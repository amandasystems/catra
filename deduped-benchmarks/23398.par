// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10252, R10253, R10254, R10255, R10678, R10679, R10680, R10681, R10682, R10683, R10892, R10893, R10894, R10895, R10896, R10897, R10898, R10899, R10900, R10901, R10902, R10903, R10904, R10905, R10906, R10907, R10908, R10909, R10910, R10911, R10912, R10913, R10914, R10915, R10916, R10917, R10918, R10919, R10920, R10921, R10922, R10923, R10924, R10925, R10926, R10927, R10928, R10929, R10930, R10931, R10932, R10933, R10934, R10935, R10936, R10937, R10938, R10939, R10940, R10941, R10942, R10943, R10944, R10945, R10946, R10947, R10948, R10949, R10950, R10951, R10952, R10953, R10954, R10955, R10956, R10957, R10958, R10959, R10960, R10961, R10962, R10963, R10964, R10965, R10966, R10967, R10968, R10969, R10970, R10971, R10972, R10973, R10974, R10975, R10976, R10977, R10978, R10979, R10980, R10981, R10982, R10983, R10984, R10985, R10986, R10987, R10988, R10989, R10990, R10991, R10992, R10993, R10994, R10995, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10916 += 1, R10917 += 1 };
  s0 -> s1 [0, 65535] { R10917 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10917 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R10919 += 1 };
  s0 -> s0 [0, 65535] { R10918 += 1, R10919 += 1 };
  s0 -> s2 [73, 73] { R10919 += 1 };
  s0 -> s3 [73, 73] { R10919 += 1 };
  s0 -> s1 [78, 65535] { R10919 += 1 };
  s1 -> s1 [0, 72] { R10919 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10919 += 1 };
  s1 -> s3 [73, 73] { R10919 += 1 };
  s1 -> s1 [78, 65535] { R10919 += 1 };
  s2 -> s2 [0, 73] { R10919 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R10919 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R10921 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R10920 += 1, R10921 += 1 };
  s0 -> s2 [73, 73] { R10921 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R10921 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R10921 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R10921 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10921 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R10921 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R10921 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10921 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R10923 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10922 += 1, R10923 += 1 };
  s0 -> s2 [73, 73] { R10923 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R10923 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R10923 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R10923 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10923 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R10923 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R10923 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10923 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R10925 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10924 += 1, R10925 += 1 };
  s0 -> s2 [73, 73] { R10925 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R10925 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R10925 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R10925 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10925 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R10925 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R10925 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10925 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R10927 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10926 += 1, R10927 += 1 };
  s0 -> s2 [73, 73] { R10927 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R10927 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R10927 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R10927 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10927 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R10927 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R10927 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10927 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R10929 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R10928 += 1, R10929 += 1 };
  s0 -> s2 [73, 73] { R10929 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R10929 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R10929 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R10929 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10929 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R10929 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R10929 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10929 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R10931 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10930 += 1, R10931 += 1 };
  s0 -> s2 [73, 73] { R10931 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R10931 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R10931 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R10931 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10931 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R10931 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R10931 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R10931 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R10933 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R10932 += 1, R10933 += 1 };
  s0 -> s2 [73, 73] { R10933 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R10933 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R10933 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R10933 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10933 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R10933 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R10933 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R10933 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R10953 += 1 };
  s0 -> s0 [0, 65535] { R10952 += 1, R10953 += 1 };
  s0 -> s2 [73, 73] { R10953 += 1 };
  s0 -> s1 [74, 65535] { R10953 += 1 };
  s1 -> s1 [0, 72] { R10953 += 1 };
  s1 -> s2 [73, 73] { R10953 += 1 };
  s1 -> s1 [74, 65535] { R10953 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10953 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10954 += 1, R10955 += 1 };
  s0 -> s1 [0, 65535] { R10955 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R10955 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R10957 += 1 };
  s0 -> s2 [0, 65535] { R10957 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R10956 += 1, R10957 += 1 };
  s0 -> s3 [73, 73] { R10957 += 1 };
  s0 -> s1 [74, 65535] { R10957 += 1 };
  s1 -> s1 [0, 72] { R10957 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R10957 += 1 };
  s1 -> s1 [74, 65535] { R10957 += 1 };
  s2 -> s1 [0, 72] { R10957 += 1 };
  s2 -> s2 [0, 65535] { R10957 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R10957 += 1 };
  s2 -> s1 [74, 65535] { R10957 += 1 };
  s3 -> s3 [0, 65535] { R10957 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R10959 += 1, R10897 += 1 };
  s0 -> s2 [0, 65535] { R10959 += 1, R10896 += 1, R10897 += 1 };
  s0 -> s0 [0, 65535] { R10958 += 1, R10959 += 1 };
  s0 -> s1 [74, 65535] { R10959 += 1, R10897 += 1 };
  s1 -> s1 [0, 72] { R10959 += 1, R10897 += 1 };
  s1 -> s1 [0, 65535] { R10959 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R10959 += 1, R10897 += 1 };
  s2 -> s1 [0, 72] { R10959 += 1, R10897 += 1 };
  s2 -> s2 [0, 65535] { R10959 += 1, R10896 += 1, R10897 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R10959 += 1, R10897 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10960 += 1, R10961 += 1 };
  s0 -> s1 [0, 65535] { R10961 += 1, R10898 += 1, R10899 += 1 };
  s0 -> s2 [0, 65535] { R10961 += 1, R10899 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10961 += 1, R10898 += 1, R10899 += 1 };
  s1 -> s2 [0, 65535] { R10961 += 1, R10899 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10961 += 1 };
  s2 -> s2 [0, 65535] { R10961 += 1, R10899 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10961 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R10963 += 1, R10901 += 1 };
  s0 -> s0 [0, 65535] { R10962 += 1, R10963 += 1 };
  s0 -> s2 [0, 65535] { R10963 += 1, R10900 += 1, R10901 += 1 };
  s0 -> s1 [77, 65535] { R10963 += 1, R10901 += 1 };
  s1 -> s1 [0, 73] { R10963 += 1, R10901 += 1 };
  s1 -> s1 [0, 65535] { R10963 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R10963 += 1, R10901 += 1 };
  s2 -> s1 [0, 73] { R10963 += 1, R10901 += 1 };
  s2 -> s2 [0, 65535] { R10963 += 1, R10900 += 1, R10901 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R10963 += 1, R10901 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10965 += 1, R10903 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R10965 += 1, R10902 += 1, R10903 += 1 };
  s0 -> s0 [0, 65535] { R10964 += 1, R10965 += 1 };
  s1 -> s1 [0, 65535] { R10965 += 1, R10903 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R10965 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10965 += 1, R10903 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R10965 += 1, R10902 += 1, R10903 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10965 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R10967 += 1, R10905 += 1 };
  s0 -> s2 [0, 65535] { R10967 += 1, R10904 += 1, R10905 += 1 };
  s0 -> s3 [0, 65535] { R10967 += 1, R10905 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R10966 += 1, R10967 += 1 };
  s0 -> s1 [78, 65535] { R10967 += 1, R10905 += 1 };
  s1 -> s1 [0, 76] { R10967 += 1, R10905 += 1 };
  s1 -> s1 [0, 65535] { R10967 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R10967 += 1, R10905 += 1 };
  s2 -> s1 [0, 76] { R10967 += 1, R10905 += 1 };
  s2 -> s2 [0, 65535] { R10967 += 1, R10904 += 1, R10905 += 1 };
  s2 -> s3 [0, 65535] { R10967 += 1, R10905 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R10967 += 1, R10905 += 1 };
  s3 -> s1 [0, 76] { R10967 += 1, R10905 += 1 };
  s3 -> s3 [0, 65535] { R10967 += 1, R10905 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10967 += 1 };
  s3 -> s1 [78, 65535] { R10967 += 1, R10905 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10967 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R10969 += 1, R10907 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R10969 += 1, R10906 += 1, R10907 += 1 };
  s0 -> s0 [0, 65535] { R10968 += 1, R10969 += 1 };
  s0 -> s3 [0, 65535] { R10969 += 1, R10907 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R10969 += 1, R10907 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R10969 += 1, R10907 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R10969 += 1, R10907 += 1 };
  s1 -> s4 [0, 65535] { R10969 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R10969 += 1, R10907 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R10969 += 1, R10907 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R10969 += 1, R10906 += 1, R10907 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10969 += 1, R10907 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R10969 += 1, R10907 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R10969 += 1, R10907 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R10969 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10969 += 1, R10907 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R10969 += 1, R10907 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R10969 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10971 += 1, R10909 += 1 };
  s0 -> s2 [0, 65535] { R10971 += 1, R10908 += 1, R10909 += 1 };
  s0 -> s0 [0, 65535] { R10970 += 1, R10971 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10971 += 1, R10909 += 1 };
  s1 -> s4 [0, 65535] { R10971 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10971 += 1, R10909 += 1 };
  s2 -> s2 [0, 65535] { R10971 += 1, R10908 += 1, R10909 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10971 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s0 -> s0 [0, 65535] { R10972 += 1, R10973 += 1 };
  s0 -> s2 [0, 65535] { R10973 += 1, R10910 += 1, R10911 += 1 };
  s0 -> s3 [0, 65535] { R10973 += 1, R10911 += 1, R10254 += 1, R10255 += 1 };
  s0 -> s4 [89, 89] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s0 -> s1 [90, 65535] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s1 -> s1 [0, 77] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s1 -> s4 [89, 89] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s1 -> s1 [90, 65535] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s2 -> s1 [0, 77] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R10973 += 1, R10910 += 1, R10911 += 1 };
  s2 -> s3 [0, 65535] { R10973 += 1, R10911 += 1, R10254 += 1, R10255 += 1 };
  s2 -> s4 [89, 89] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s2 -> s1 [90, 65535] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s3 -> s1 [0, 77] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s3 -> s3 [0, 65535] { R10973 += 1, R10911 += 1, R10254 += 1, R10255 += 1 };
  s3 -> s4 [89, 89] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s3 -> s1 [90, 65535] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s4 -> s4 [0, 77] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10973 += 1 };
  s4 -> s4 [0, 65535] { R10973 += 1, R10911 += 1 };
  s4 -> s4 [89, 65535] { R10973 += 1, R10911 += 1, R10255 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10973 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10975 += 1, R10912 += 1, R10913 += 1 };
  s0 -> s0 [0, 65535] { R10974 += 1, R10975 += 1 };
  s0 -> s2 [0, 65535] { R10975 += 1, R10913 += 1, R10682 += 1, R10683 += 1 };
  s0 -> s3 [0, 65535] { R10975 += 1, R10913 += 1 };
  s1 -> s1 [0, 65535] { R10975 += 1, R10912 += 1, R10913 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R10975 += 1, R10913 += 1, R10682 += 1, R10683 += 1 };
  s1 -> s3 [0, 65535] { R10975 += 1, R10913 += 1 };
  s2 -> s4 [0, 65535] { R10975 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10975 += 1, R10913 += 1, R10682 += 1, R10683 += 1 };
  s2 -> s3 [0, 65535] { R10975 += 1, R10913 += 1 };
  s3 -> s4 [0, 65535] { R10975 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10975 += 1, R10913 += 1 };
  s4 -> s4 [0, 65535] { R10975 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R10976 += 1, R10977 += 1 };
  s0 -> s1 [0, 65535] { R10977 += 1, R10915 += 1 };
  s0 -> s2 [0, 65535] { R10977 += 1, R10914 += 1, R10915 += 1 };
  s1 -> s1 [0, 65535] { R10977 += 1, R10915 += 1 };
  s1 -> s4 [0, 65535] { R10977 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10977 += 1, R10915 += 1 };
  s2 -> s2 [0, 65535] { R10977 += 1, R10914 += 1, R10915 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10977 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10979 += 1, R10934 += 1, R10935 += 1 };
  s0 -> s2 [0, 65535] { R10979 += 1, R10935 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R10978 += 1, R10979 += 1 };
  s1 -> s1 [0, 65535] { R10979 += 1, R10934 += 1, R10935 += 1 };
  s1 -> s2 [0, 65535] { R10979 += 1, R10935 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10979 += 1 };
  s2 -> s2 [0, 65535] { R10979 += 1, R10935 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10979 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R10981 += 1, R10937 += 1 };
  s0 -> s2 [0, 65535] { R10981 += 1, R10936 += 1, R10937 += 1 };
  s0 -> s0 [0, 65535] { R10980 += 1, R10981 += 1 };
  s0 -> s3 [73, 73] { R10981 += 1, R10937 += 1 };
  s0 -> s4 [73, 73] { R10981 += 1, R10937 += 1 };
  s0 -> s5 [77, 77] { R10981 += 1, R10937 += 1 };
  s0 -> s1 [78, 65535] { R10981 += 1, R10937 += 1 };
  s1 -> s1 [0, 72] { R10981 += 1, R10937 += 1 };
  s1 -> s3 [73, 73] { R10981 += 1, R10937 += 1 };
  s1 -> s4 [73, 73] { R10981 += 1, R10937 += 1 };
  s1 -> s5 [77, 77] { R10981 += 1, R10937 += 1 };
  s1 -> s1 [78, 65535] { R10981 += 1, R10937 += 1 };
  s2 -> s1 [0, 72] { R10981 += 1, R10937 += 1 };
  s2 -> s2 [0, 65535] { R10981 += 1, R10936 += 1, R10937 += 1 };
  s2 -> s3 [73, 73] { R10981 += 1, R10937 += 1 };
  s2 -> s4 [73, 73] { R10981 += 1, R10937 += 1 };
  s2 -> s5 [77, 77] { R10981 += 1, R10937 += 1 };
  s2 -> s1 [78, 65535] { R10981 += 1, R10937 += 1 };
  s4 -> s4 [0, 73] { R10981 += 1, R10937 += 1 };
  s4 -> s7 [77, 77] { R10981 += 1, R10937 += 1 };
  s4 -> s4 [78, 65535] { R10981 += 1, R10937 += 1 };
  s5 -> s5 [0, 72] { R10981 += 1, R10937 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10981 += 1 };
  s5 -> s7 [73, 73] { R10981 += 1, R10937 += 1 };
  s5 -> s8 [73, 73] { R10981 += 1, R10937 += 1 };
  s5 -> s5 [77, 65535] { R10981 += 1, R10937 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R10981 += 1, R10937 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10981 += 1 };
  s7 -> s7 [77, 65535] { R10981 += 1, R10937 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10981 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R10983 += 1, R10939 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R10983 += 1, R10938 += 1, R10939 += 1 };
  s0 -> s0 [0, 65535] { R10982 += 1, R10983 += 1 };
  s0 -> s3 [73, 73] { R10983 += 1, R10939 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R10983 += 1, R10939 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R10983 += 1, R10939 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R10983 += 1, R10939 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10983 += 1 };
  s1 -> s3 [73, 73] { R10983 += 1, R10939 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R10983 += 1, R10939 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R10983 += 1, R10939 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R10983 += 1, R10939 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10983 += 1, R10938 += 1, R10939 += 1 };
  s2 -> s3 [73, 73] { R10983 += 1, R10939 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R10983 += 1, R10939 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R10983 += 1, R10939 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10983 += 1 };
  s3 -> s3 [0, 65535] { R10983 += 1, R10939 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10983 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10983 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R10985 += 1, R10941 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R10985 += 1, R10940 += 1, R10941 += 1 };
  s0 -> s0 [0, 65535] { R10984 += 1, R10985 += 1 };
  s0 -> s3 [73, 73] { R10985 += 1, R10941 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R10985 += 1, R10941 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R10985 += 1, R10941 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R10985 += 1, R10941 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10985 += 1 };
  s1 -> s3 [73, 73] { R10985 += 1, R10941 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R10985 += 1, R10941 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R10985 += 1, R10941 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R10985 += 1, R10941 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10985 += 1, R10940 += 1, R10941 += 1 };
  s2 -> s3 [73, 73] { R10985 += 1, R10941 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R10985 += 1, R10941 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R10985 += 1, R10941 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10985 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10985 += 1 };
  s4 -> s4 [0, 65535] { R10985 += 1, R10941 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10985 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10986 += 1, R10987 += 1 };
  s0 -> s2 [0, 65535] { R10987 += 1, R10942 += 1, R10943 += 1 };
  s0 -> s3 [73, 73] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R10987 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R10987 += 1, R10942 += 1, R10943 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R10987 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10987 += 1, R10943 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535] { R10987 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10987 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s3 [0, 65535] { R10989 += 1, R10944 += 1, R10945 += 1 };
  s0 -> s0 [0, 65535] { R10988 += 1, R10989 += 1 };
  s0 -> s4 [73, 73] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [73, 73] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [73, 73] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [73, 73] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [74, 65535] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [74, 65535] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 72] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 72] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [73, 73] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [73, 73] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s6 [73, 73] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s7 [73, 73] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [74, 65535] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [74, 65535] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 72] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 72] { R10989 += 1, R10945 += 1 };
  s2 -> s4 [73, 73] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s8 [73, 73] { R10989 += 1, R10945 += 1 };
  s2 -> s5 [73, 73] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [73, 73] { R10989 += 1, R10945 += 1 };
  s2 -> s2 [74, 65535] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [74, 65535] { R10989 += 1, R10945 += 1 };
  s3 -> s1 [0, 72] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R10989 += 1, R10944 += 1, R10945 += 1 };
  s3 -> s4 [73, 73] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [73, 73] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [73, 73] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [73, 73] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [74, 65535] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [74, 65535] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s4 [0, 65535] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s8 [0, 65535] { R10989 += 1, R10945 += 1 };
  s6 -> s4 [0, 65535] { R10989 += 1, R10945 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R10989 += 1, R10945 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s8 [0, 65535] { R10989 += 1, R10945 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10989 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10989 += 1 };
  s11 -> s11 [0, 72] { R10989 += 1, R10945 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10989 += 1 };
  s11 -> s8 [73, 73] { R10989 += 1, R10945 += 1 };
  s11 -> s12 [73, 73] { R10989 += 1, R10945 += 1 };
  s11 -> s11 [74, 65535] { R10989 += 1, R10945 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10989 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s0 [0, 65535] { R10990 += 1, R10991 += 1 };
  s0 -> s2 [0, 65535] { R10991 += 1, R10946 += 1, R10947 += 1 };
  s0 -> s3 [73, 73] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s4 [73, 73] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [74, 65535] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [0, 72] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10991 += 1 };
  s1 -> s3 [73, 73] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s4 [73, 73] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [74, 65535] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [0, 72] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s2 [0, 65535] { R10991 += 1, R10946 += 1, R10947 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [73, 73] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [74, 65535] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R10991 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10991 += 1, R10947 += 1, R10252 += 1, R10253 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10991 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10991 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s2 [0, 72] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s3 [0, 65535] { R10993 += 1, R10948 += 1, R10949 += 1 };
  s0 -> s0 [0, 65535] { R10992 += 1, R10993 += 1 };
  s0 -> s4 [73, 73] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s5 [73, 73] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s6 [73, 73] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s7 [73, 73] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s1 [74, 65535] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s2 [74, 65535] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s1 [0, 72] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s2 [0, 72] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s4 [73, 73] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s5 [73, 73] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s6 [73, 73] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s7 [73, 73] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s1 [74, 65535] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s2 [74, 65535] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [0, 72] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [0, 65535] { R10993 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [73, 73] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s6 [73, 73] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [74, 65535] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s1 [0, 72] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s2 [0, 72] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s3 [0, 65535] { R10993 += 1, R10948 += 1, R10949 += 1 };
  s3 -> s4 [73, 73] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s5 [73, 73] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s6 [73, 73] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s7 [73, 73] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s1 [74, 65535] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s2 [74, 65535] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s4 -> s4 [0, 65535] { R10993 += 1, R10949 += 1, R10678 += 1, R10679 += 1 };
  s4 -> s6 [0, 65535] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s5 -> s5 [0, 65535] { R10993 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R10993 += 1, R10949 += 1, R10679 += 1, R10680 += 1 };
  s6 -> s8 [0, 65535] { R10993 += 1 };
  s6 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10993 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s0 -> s2 [0, 72] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s0 -> s0 [0, 65535] { R10994 += 1, R10995 += 1 };
  s0 -> s3 [0, 65535] { R10995 += 1, R10950 += 1, R10951 += 1 };
  s0 -> s4 [73, 73] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s0 -> s5 [73, 73] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s0 -> s6 [73, 73] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s0 -> s7 [73, 73] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s0 -> s2 [74, 76] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s0 -> s1 [74, 65535] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s0 -> s8 [77, 77] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s0 -> s2 [90, 65535] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s1 -> s1 [0, 72] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s1 -> s2 [0, 72] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s1 -> s4 [73, 73] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s1 -> s5 [73, 73] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s1 -> s6 [73, 73] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s1 -> s7 [73, 73] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s1 -> s2 [74, 76] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s1 -> s1 [74, 65535] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s1 -> s8 [77, 77] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s1 -> s2 [90, 65535] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s2 -> s2 [0, 72] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s2 -> s4 [73, 73] { R10995 += 1, R10951 += 1 };
  s2 -> s6 [73, 73] { R10995 += 1, R10951 += 1 };
  s2 -> s2 [74, 76] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s2 -> s2 [74, 65535] { R10995 += 1, R10951 += 1 };
  s2 -> s8 [77, 77] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s2 -> s2 [90, 65535] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s3 -> s1 [0, 72] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s3 -> s2 [0, 72] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s3 -> s3 [0, 65535] { R10995 += 1, R10950 += 1, R10951 += 1 };
  s3 -> s4 [73, 73] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s3 -> s5 [73, 73] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s3 -> s6 [73, 73] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s3 -> s7 [73, 73] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s3 -> s2 [74, 76] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s3 -> s1 [74, 65535] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s3 -> s8 [77, 77] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s3 -> s2 [90, 65535] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s5 -> s6 [0, 76] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s5 -> s5 [0, 65535] { R10995 += 1, R10951 += 1, R10892 += 1, R10893 += 1 };
  s5 -> s10 [77, 77] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s5 -> s6 [90, 65535] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s6 -> s6 [0, 76] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s6 -> s6 [0, 65535] { R10995 += 1, R10951 += 1 };
  s6 -> s10 [77, 77] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s6 -> s6 [90, 65535] { R10995 += 1, R10951 += 1, R10893 += 1 };
  s8 -> s8 [0, 72] { R10995 += 1, R10951 += 1 };
  s8 -> s8 [0, 65535] { R10995 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R10995 += 1, R10951 += 1 };
  s8 -> s11 [73, 73] { R10995 += 1, R10951 += 1 };
  s8 -> s8 [74, 65535] { R10995 += 1, R10951 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R10995 += 1 };
  s10 -> s10 [0, 65535] { R10995 += 1, R10951 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10995 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10995 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R10911 && R2 = R10995 && R20 - R10995 = -1 && R21 = R10995 && R22 - R10995 = -1 && R23 = R10995 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R10910 = 0 && R10936 = 0 && R10937 = 0 && R10944 = 0 && R10945 = 0 && R10948 = 0 && R10949 = 0 && R10950 = 0 && R10951 = 0 && R10952 = 0 && R10953 = R10995 && R10954 = 0 && R10955 = R10995 && R10956 = 0 && R10957 = R10995 && R10958 = 0 && R10959 = R10995 && R10960 = 0 && R10961 = R10995 && R10962 = 0 && R10963 = R10995 && R10964 = 0 && R10965 = R10995 && R10966 = 0 && R10967 = R10995 && R10968 = 0 && R10969 = R10995 && R10970 = 0 && R10971 = R10995 && R10972 = 0 && R10973 = R10995 && R10974 = 0 && R10975 = R10995 && R10976 = 0 && R10977 = R10995 && R10978 = 0 && R10979 = R10995 && R10980 = 0 && R10981 = R10995 && R10982 = 0 && R10983 = R10995 && R10984 = 0 && R10985 = R10995 && R10986 = 0 && R10987 = R10995 && R10988 = 0 && R10989 = R10995 && R10990 = 0 && R10991 = R10995 && R10992 = 0 && R10993 = R10995 && R10994 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && -1 < R10911 && 0 < R10995 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R10255 + R10253 < 1))) && (R10896 != 0 || R10897 = R10911 || (R17 = 0 && R10911 = 0)) && (R10898 != 0 || R10899 = R10911 || (R17 = 0 && R10911 = 0)) && (R10900 != 0 || R10901 = R10911 || (R17 = 0 && R10911 = 0)) && (R10902 != 0 || R10903 = R10911 || (R17 = 0 && R10911 = 0)) && (R10904 != 0 || R10905 = R10911 || (R17 = 0 && R10911 = 0)) && (R10906 != 0 || R10907 = R10911 || (R17 = 0 && R10911 = 0)) && (R10908 != 0 || R10909 = R10911 || (R17 = 0 && R10911 = 0)) && (R10912 != 0 || R10911 = R10913 || (R17 = 0 && R10911 = 0)) && (R10914 != 0 || R10911 = R10915 || (R17 = 0 && R10911 = 0)) && (R18 = 0 || (R10934 = 0 && R10935 = 0)) && (R18 = 0 || (R10938 = 0 && R10939 = 0)) && (R18 = 0 || (R10940 = 0 && R10941 = 0)) && (R18 = 0 || (R10942 = 0 && R10943 = 0)) && (R18 = 0 || (R10946 = 0 && R10947 = 0)) && (R19 = 0 || (R10916 = 0 && R10917 = 0)) && (R19 = 0 || (R10918 = 0 && R10919 = 0)) && (R19 = 0 || (R10920 = 0 && R10921 = 0)) && (R19 = 0 || (R10922 = 0 && R10923 = 0)) && (R19 = 0 || (R10924 = 0 && R10925 = 0)) && (R19 = 0 || (R10926 = 0 && R10927 = 0)) && (R19 = 0 || (R10928 = 0 && R10929 = 0)) && (R19 = 0 || (R10930 = 0 && R10931 = 0)) && (R19 = 0 || (R10932 = 0 && R10933 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R10683 + R10680 = 0 || (R56 + R10681 + R10678 = 0 && R57 + R10682 + R10679 = 0)) && (R58 + R10683 + R10680 = 0 || (R62 + R10894 + R10892 = 0 && R63 + R10895 + R10893 = 0)) && (R10896 = 0 || (R17 = 0 && R10911 = 0)) && (R10898 = 0 || (R17 = 0 && R10911 = 0)) && (R10900 = 0 || (R17 = 0 && R10911 = 0)) && (R10902 = 0 || (R17 = 0 && R10911 = 0)) && (R10904 = 0 || (R17 = 0 && R10911 = 0)) && (R10906 = 0 || (R17 = 0 && R10911 = 0)) && (R10908 = 0 || (R17 = 0 && R10911 = 0)) && (R10912 = 0 || (R17 = 0 && R10911 = 0)) && (R10914 = 0 || (R17 = 0 && R10911 = 0));
// End of Parikh automata intersection problem
