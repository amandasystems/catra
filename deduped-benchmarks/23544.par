// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R16, R17, R18, R19, R2, R20, R21, R22, R23, R3, R4, R6, R7;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R7 += 1 };
  s1 -> s1 [0, 60] { R7 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R4 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [9, 13] { R17 += 1 };
  s0 -> s1 [14, 31] { R17 += 1 };
  s0 -> s2 [32, 32] { R17 += 1 };
  s0 -> s1 [33, 65535] { R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17 += 1 };
  s2 -> s1 [0, 65535] { R17 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s1 [0, 65535] { R19 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 - R7 = 1 && R6 = 0 && R0 != 0 && R4 < 1 && -1 < R7 && (R2 != 0 || ((R0 != R17 || R16 - R17 = -1 || R17 < 0) && (R0 = R17 || R0 < 1))) && (R2 != 0 || ((R0 != R19 || R18 - R19 = -1 || R19 < 0) && (R0 = R19 || R0 < 1))) && (R20 != 0 || ((R3 != 0 || ((R0 != R21 || R21 = 1 || R21 < 0) && (R0 = R21 || R21 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R21 || R21 = 1 || R21 < 0) && (R21 != 1 || -1 < R0) && (R0 = R21 || R21 = 1))))) && (R22 != 0 || ((R3 != 0 || ((R0 != R23 || R23 = 1 || R23 < 0) && (R0 = R23 || R23 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R23 || R23 = 1 || R23 < 0) && (R23 != 1 || -1 < R0) && (R0 = R23 || R23 = 1))))) && (R2 = 0 || (R0 = R17 && R16 - R17 = -1)) && (R2 = 0 || (R0 = R19 && R18 - R19 = -1)) && (R20 = 0 || (R3 = 0 && R0 < 0)) && (R22 = 0 || (R3 = 0 && R0 < 0));
// End of Parikh automata intersection problem
