// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R3, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [66, 66];
  s0 -> s0 [67, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [66, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R7 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R8 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [9, 13] { R16 += 1 };
  s0 -> s1 [14, 31] { R16 += 1 };
  s0 -> s2 [32, 32] { R16 += 1 };
  s0 -> s1 [33, 65535] { R16 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16 += 1 };
  s2 -> s1 [0, 65535] { R16 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R18 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R18 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20 += 1 };
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65] { R62 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s1 [67, 65535] { R62 += 1 };
  s1 -> s1 [0, 65] { R62 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [67, 65535] { R62 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s0 -> s1 [0, 65535] { R64 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R64 += 1, R13 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 66] { R66 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s2 [84, 84] { R66 += 1 };
  s0 -> s1 [85, 65535] { R66 += 1 };
  s1 -> s1 [0, 66] { R66 += 1 };
  s1 -> s2 [84, 84] { R66 += 1 };
  s1 -> s1 [85, 65535] { R66 += 1 };
  s2 -> s2 [0, 66] { R66 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [84, 65535] { R66 += 1 };
  accepting s2;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R68 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1, R34 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R70 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s2 [0, 65535] { R70 += 1, R36 += 1 };
  s0 -> s1 [85, 65535] { R70 += 1 };
  s1 -> s1 [0, 83] { R70 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [85, 65535] { R70 += 1 };
  s2 -> s1 [0, 83] { R70 += 1 };
  s2 -> s2 [0, 65535] { R70 += 1, R36 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R70 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R72 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s1 [85, 65535] { R72 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R72 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R72 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R72 += 1, R40 += 1 };
  s2 -> s1 [0, 83] { R72 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R72 += 1, R39 += 1, R40 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R72 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s1 [0, 65535] { R74 += 1, R45 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R44 += 1, R45 += 1 };
  s1 -> s4 [0, 65535] { R74 += 1 };
  s1 -> s1 [0, 65535] { R74 += 1, R45 += 1, R46 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R74 += 1, R45 += 1, R46 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R74 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R74 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 84] { R76 += 1, R50 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s3 [90, 90] { R76 += 1, R50 += 1 };
  s0 -> s1 [91, 65535] { R76 += 1, R50 += 1 };
  s1 -> s1 [0, 84] { R76 += 1, R50 += 1 };
  s1 -> s3 [90, 90] { R76 += 1, R50 += 1 };
  s1 -> s1 [91, 65535] { R76 += 1, R50 += 1 };
  s2 -> s1 [0, 84] { R76 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R76 += 1, R49 += 1, R50 += 1 };
  s2 -> s3 [90, 90] { R76 += 1, R50 += 1 };
  s2 -> s1 [91, 65535] { R76 += 1, R50 += 1 };
  s3 -> s3 [0, 84] { R76 += 1, R50 += 1 };
  s3 -> s3 [0, 65535] { R76 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [90, 65535] { R76 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R78 += 1, R55 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R54 += 1, R55 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R78 += 1, R55 += 1, R56 += 1 };
  s1 -> s4 [0, 65535] { R78 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R78 += 1, R55 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R78 += 1, R54 += 1, R55 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R78 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R80 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R80 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s3 [84, 84] { R80 += 1, R60 += 1 };
  s0 -> s4 [84, 84] { R80 += 1, R60 += 1 };
  s0 -> s1 [91, 65535] { R80 += 1, R60 += 1 };
  s1 -> s1 [0, 83] { R80 += 1, R60 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1 };
  s1 -> s3 [84, 84] { R80 += 1, R60 += 1 };
  s1 -> s4 [84, 84] { R80 += 1, R60 += 1 };
  s1 -> s1 [91, 65535] { R80 += 1, R60 += 1 };
  s2 -> s1 [0, 83] { R80 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R80 += 1, R59 += 1, R60 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R80 += 1, R60 += 1 };
  s2 -> s4 [84, 84] { R80 += 1, R60 += 1 };
  s2 -> s1 [91, 65535] { R80 += 1, R60 += 1 };
  s3 -> s3 [0, 84] { R80 += 1, R60 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R80 += 1 };
  s3 -> s3 [91, 65535] { R80 += 1, R60 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R80 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [0, 65535] { R82 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1, R14 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R84 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [66, 66] { R84 += 1 };
  s0 -> s3 [66, 66] { R84 += 1 };
  s0 -> s1 [85, 65535] { R84 += 1 };
  s1 -> s1 [0, 65] { R84 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R84 += 1 };
  s1 -> s3 [66, 66] { R84 += 1 };
  s1 -> s1 [85, 65535] { R84 += 1 };
  s2 -> s2 [0, 66] { R84 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [85, 65535] { R84 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R86 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s2 [66, 66] { R86 += 1, R33 += 1 };
  s0 -> s3 [66, 66] { R86 += 1, R33 += 1 };
  s0 -> s1 [67, 65535] { R86 += 1, R33 += 1 };
  s1 -> s1 [0, 65] { R86 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R86 += 1, R33 += 1 };
  s1 -> s3 [66, 66] { R86 += 1, R33 += 1 };
  s1 -> s1 [67, 65535] { R86 += 1, R33 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R86 += 1, R33 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R88 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s2 [66, 66] { R88 += 1, R35 += 1 };
  s0 -> s3 [66, 66] { R88 += 1, R35 += 1 };
  s0 -> s1 [67, 65535] { R88 += 1, R35 += 1 };
  s1 -> s1 [0, 65] { R88 += 1, R35 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R88 += 1, R35 += 1 };
  s1 -> s3 [66, 66] { R88 += 1, R35 += 1 };
  s1 -> s1 [67, 65535] { R88 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R88 += 1, R35 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R90 += 1, R37 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s0 -> s2 [66, 66] { R90 += 1, R37 += 1, R38 += 1 };
  s0 -> s3 [66, 66] { R90 += 1, R37 += 1, R38 += 1 };
  s0 -> s1 [67, 65535] { R90 += 1, R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65] { R90 += 1, R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R90 += 1, R37 += 1, R38 += 1 };
  s1 -> s3 [66, 66] { R90 += 1, R37 += 1, R38 += 1 };
  s1 -> s1 [67, 65535] { R90 += 1, R37 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R90 += 1, R37 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R92 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s0 -> s2 [66, 66] { R92 += 1, R41 += 1, R42 += 1 };
  s0 -> s3 [66, 66] { R92 += 1, R41 += 1, R42 += 1 };
  s0 -> s1 [67, 65535] { R92 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 65] { R92 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R92 += 1, R41 += 1, R42 += 1 };
  s1 -> s3 [66, 66] { R92 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [67, 65535] { R92 += 1, R41 += 1, R42 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R92 += 1, R41 += 1, R42 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65] { R94 += 1, R47 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s0 -> s2 [66, 66] { R94 += 1, R47 += 1, R48 += 1 };
  s0 -> s3 [66, 66] { R94 += 1, R47 += 1, R48 += 1 };
  s0 -> s1 [67, 65535] { R94 += 1, R47 += 1, R48 += 1 };
  s1 -> s1 [0, 65] { R94 += 1, R47 += 1, R48 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R94 += 1, R47 += 1, R48 += 1 };
  s1 -> s3 [66, 66] { R94 += 1, R47 += 1, R48 += 1 };
  s1 -> s1 [67, 65535] { R94 += 1, R47 += 1, R48 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R94 += 1, R47 += 1, R48 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R96 += 1, R51 += 1, R52 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s2 [66, 66] { R96 += 1, R51 += 1, R52 += 1 };
  s0 -> s3 [66, 66] { R96 += 1, R51 += 1, R52 += 1 };
  s0 -> s1 [67, 65535] { R96 += 1, R51 += 1, R52 += 1 };
  s1 -> s1 [0, 65] { R96 += 1, R51 += 1, R52 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R96 += 1, R51 += 1, R52 += 1 };
  s1 -> s3 [66, 66] { R96 += 1, R51 += 1, R52 += 1 };
  s1 -> s1 [67, 65535] { R96 += 1, R51 += 1, R52 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R96 += 1, R51 += 1, R52 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R98 += 1, R57 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s2 [66, 66] { R98 += 1, R57 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R98 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R98 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R98 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R98 += 1, R57 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R98 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R98 += 1, R57 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R98 += 1, R57 += 1, R58 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
constraint R1 = R80 && R15 - R80 = -1 && R16 = R80 && R17 - R80 = -1 && R18 = R80 && R19 = 0 && R20 = 1 && R21 = 0 && R22 = 1 && R34 + R33 + -1*R50 + -1*R48 = 0 && R49 + R47 = 0 && R61 = 0 && R62 = R80 && R63 = 0 && R64 = R80 && R65 = 0 && R66 = R80 && R67 = 0 && R68 = R80 && R69 = 0 && R70 = R80 && R71 = 0 && R72 = R80 && R73 = 0 && R74 = R80 && R75 = 0 && R76 = R80 && R77 = 0 && R78 = R80 && R79 = 0 && R7 < 1 && R8 < 1 && R36 + R35 < 1 && -1*R50 + -1*R48 < 1 && 0 < R80 && (R46 + R43 != 0 || ((R39 + R37 != 0 || R40 + R38 + -1*R50 + -1*R48 = 0 || R50 + R48 < 1) && (R39 + R37 = 0 || R50 + R48 < 1))) && (R46 + R43 != 0 || ((R44 + R41 != 0 || R45 + R42 + -1*R50 + -1*R48 = 0 || R50 + R48 < 1) && (R44 + R41 = 0 || R50 + R48 < 1))) && (R14 = 0 || (R81 = 0 && R82 = 0 && R83 = 0 && R84 = 0 && R85 = 0 && R86 = 0 && R87 = 0 && R88 = 0 && R89 = 0 && R90 = 0 && R91 = 0 && R92 = 0 && R93 = 0 && R94 = 0 && R95 = 0 && R96 = 0 && R97 = 0 && R98 = 0)) && (R46 + R43 = 0 || (R39 + R37 = 0 && R40 + R38 + -1*R50 + -1*R48 = 0)) && (R46 + R43 = 0 || (R44 + R41 = 0 && R45 + R42 + -1*R50 + -1*R48 = 0)) && (R56 + R53 = 0 || (R54 + R51 = 0 && R55 + R52 = 0)) && (R56 + R53 = 0 || (R59 + R57 = 0 && R60 + R58 = 0));
// End of Parikh automata intersection problem
