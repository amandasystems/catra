// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R141, R142, R2, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R142 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R142 += 1 };
  s1 -> s1 [0, 60] { R142 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R142 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s0 -> s1 [0, 65535] { R234 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R234 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s1 [0, 65535] { R236 += 1, R207 += 1, R208 += 1 };
  s0 -> s2 [13, 13] { R236 += 1, R208 += 1 };
  s1 -> s1 [0, 65535] { R236 += 1, R207 += 1, R208 += 1 };
  s1 -> s2 [13, 13] { R236 += 1, R208 += 1 };
  s2 -> s2 [0, 65535] { R236 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R238 += 1, R210 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s0 -> s2 [0, 65535] { R238 += 1, R209 += 1, R210 += 1 };
  s1 -> s1 [0, 65535] { R238 += 1, R210 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R238 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R238 += 1, R210 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R238 += 1, R209 += 1, R210 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R238 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R244 += 1 };
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s0 -> s2 [71, 71] { R244 += 1 };
  s0 -> s1 [72, 65535] { R244 += 1 };
  s1 -> s1 [0, 64] { R244 += 1 };
  s1 -> s2 [71, 71] { R244 += 1 };
  s1 -> s1 [72, 65535] { R244 += 1 };
  s2 -> s2 [0, 64] { R244 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [71, 65535] { R244 += 1 };
  accepting s2;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R246 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s1 -> s1 [0, 65535] { R246 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 70] { R248 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R248 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s3 [71, 71] { R248 += 1 };
  s0 -> s1 [72, 65535] { R248 += 1, R12 += 1 };
  s1 -> s1 [0, 70] { R248 += 1, R12 += 1 };
  s1 -> s3 [71, 71] { R248 += 1 };
  s1 -> s1 [72, 65535] { R248 += 1, R12 += 1 };
  s2 -> s1 [0, 70] { R248 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R248 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [71, 71] { R248 += 1 };
  s2 -> s1 [72, 65535] { R248 += 1, R12 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R248 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R250 += 1, R220 += 1 };
  s0 -> s2 [0, 65535] { R250 += 1, R219 += 1, R220 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s0 -> s3 [9, 13] { R250 += 1, R220 += 1 };
  s0 -> s1 [14, 31] { R250 += 1, R220 += 1 };
  s0 -> s3 [32, 32] { R250 += 1, R220 += 1 };
  s0 -> s1 [33, 65535] { R250 += 1, R220 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R250 += 1, R220 += 1 };
  s1 -> s5 [0, 65535] { R250 += 1 };
  s2 -> s1 [0, 8] { R250 += 1, R220 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R250 += 1, R219 += 1, R220 += 1 };
  s2 -> s3 [9, 13] { R250 += 1, R220 += 1 };
  s2 -> s1 [14, 31] { R250 += 1, R220 += 1 };
  s2 -> s3 [32, 32] { R250 += 1, R220 += 1 };
  s2 -> s1 [33, 65535] { R250 += 1, R220 += 1 };
  s3 -> s1 [0, 65535] { R250 += 1, R220 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R250 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R252 += 1, R222 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R252 += 1, R221 += 1, R222 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s1 -> s1 [0, 65535] { R252 += 1, R222 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R252 += 1 };
  s2 -> s1 [0, 65535] { R252 += 1, R222 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R252 += 1, R221 += 1, R222 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R252 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 8] { R254 += 1, R224 += 1 };
  s0 -> s2 [0, 65535] { R254 += 1, R223 += 1, R224 += 1 };
  s0 -> s0 [0, 65535] { R253 += 1, R254 += 1 };
  s0 -> s3 [9, 13] { R254 += 1, R224 += 1 };
  s0 -> s1 [14, 31] { R254 += 1, R224 += 1 };
  s0 -> s3 [32, 32] { R254 += 1, R224 += 1 };
  s0 -> s1 [33, 65535] { R254 += 1, R224 += 1 };
  s1 -> s1 [0, 65535] { R254 += 1, R224 += 1 };
  s1 -> s5 [0, 65535] { R254 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R254 += 1, R224 += 1 };
  s2 -> s2 [0, 65535] { R254 += 1, R223 += 1, R224 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R254 += 1, R224 += 1 };
  s2 -> s1 [14, 31] { R254 += 1, R224 += 1 };
  s2 -> s3 [32, 32] { R254 += 1, R224 += 1 };
  s2 -> s1 [33, 65535] { R254 += 1, R224 += 1 };
  s3 -> s1 [0, 65535] { R254 += 1, R224 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R254 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R256 += 1, R225 += 1, R226 += 1 };
  s0 -> s0 [0, 65535] { R255 += 1, R256 += 1 };
  s0 -> s2 [0, 65535] { R256 += 1, R226 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R256 += 1, R225 += 1, R226 += 1 };
  s1 -> s2 [0, 65535] { R256 += 1, R226 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R256 += 1 };
  s2 -> s2 [0, 65535] { R256 += 1, R226 += 1, R8 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R256 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 70] { R258 += 1, R228 += 1 };
  s0 -> s2 [0, 65535] { R258 += 1, R227 += 1, R228 += 1 };
  s0 -> s0 [0, 65535] { R257 += 1, R258 += 1 };
  s0 -> s1 [72, 65535] { R258 += 1, R228 += 1 };
  s1 -> s1 [0, 70] { R258 += 1, R228 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R258 += 1 };
  s1 -> s1 [72, 65535] { R258 += 1, R228 += 1 };
  s2 -> s1 [0, 70] { R258 += 1, R228 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R258 += 1, R227 += 1, R228 += 1 };
  s2 -> s1 [72, 65535] { R258 += 1, R228 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R260 += 1, R229 += 1, R230 += 1 };
  s0 -> s2 [0, 65535] { R260 += 1, R230 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R259 += 1, R260 += 1 };
  s1 -> s1 [0, 65535] { R260 += 1, R229 += 1, R230 += 1 };
  s1 -> s2 [0, 65535] { R260 += 1, R230 += 1, R205 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R260 += 1, R230 += 1, R205 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R260 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R260 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 71] { R262 += 1, R232 += 1 };
  s0 -> s2 [0, 65535] { R262 += 1, R231 += 1, R232 += 1 };
  s0 -> s0 [0, 65535] { R261 += 1, R262 += 1 };
  s0 -> s1 [91, 65535] { R262 += 1, R232 += 1 };
  s1 -> s1 [0, 71] { R262 += 1, R232 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R262 += 1 };
  s1 -> s1 [91, 65535] { R262 += 1, R232 += 1 };
  s2 -> s1 [0, 71] { R262 += 1, R232 += 1 };
  s2 -> s2 [0, 65535] { R262 += 1, R231 += 1, R232 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R262 += 1, R232 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R264 += 1, R240 += 1, R206 += 1 };
  s0 -> s2 [0, 65535] { R264 += 1, R239 += 1, R240 += 1 };
  s0 -> s0 [0, 65535] { R263 += 1, R264 += 1 };
  s1 -> s1 [0, 65535] { R264 += 1, R240 += 1, R206 += 1 };
  s1 -> s4 [0, 65535] { R264 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R264 += 1, R240 += 1, R206 += 1 };
  s2 -> s2 [0, 65535] { R264 += 1, R239 += 1, R240 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R264 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 70] { R266 += 1, R242 += 1 };
  s0 -> s2 [0, 65535] { R266 += 1, R241 += 1, R242 += 1 };
  s0 -> s0 [0, 65535] { R265 += 1, R266 += 1 };
  s0 -> s3 [71, 71] { R266 += 1, R242 += 1 };
  s0 -> s4 [71, 71] { R266 += 1, R242 += 1 };
  s0 -> s1 [91, 65535] { R266 += 1, R242 += 1 };
  s1 -> s1 [0, 70] { R266 += 1, R242 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R266 += 1 };
  s1 -> s3 [71, 71] { R266 += 1, R242 += 1 };
  s1 -> s4 [71, 71] { R266 += 1, R242 += 1 };
  s1 -> s1 [91, 65535] { R266 += 1, R242 += 1 };
  s2 -> s1 [0, 70] { R266 += 1, R242 += 1 };
  s2 -> s2 [0, 65535] { R266 += 1, R241 += 1, R242 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [71, 71] { R266 += 1, R242 += 1 };
  s2 -> s4 [71, 71] { R266 += 1, R242 += 1 };
  s2 -> s1 [91, 65535] { R266 += 1, R242 += 1 };
  s3 -> s3 [0, 65535] { R266 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 71] { R266 += 1, R242 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R266 += 1 };
  s4 -> s4 [91, 65535] { R266 += 1, R242 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [103, 103];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R212 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [9, 13] { R212 += 1 };
  s0 -> s1 [14, 31] { R212 += 1 };
  s0 -> s2 [32, 32] { R212 += 1 };
  s0 -> s1 [33, 65535] { R212 += 1 };
  s1 -> s1 [0, 65535] { R212 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R212 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s1 [0, 65535] { R214 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R216 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s2 [9, 13] { R216 += 1 };
  s0 -> s1 [14, 31] { R216 += 1 };
  s0 -> s2 [32, 32] { R216 += 1 };
  s0 -> s1 [33, 65535] { R216 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R216 += 1 };
  s2 -> s1 [0, 65535] { R216 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R218 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s1 -> s1 [0, 65535] { R218 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R222 && R3 = R238 && R11 = 0 && R141 = 0 && R142 = R266 && R207 = 0 && R219 - R222 = -1 && R220 = R222 && R221 - R222 = -1 && R223 = 0 && R224 = 1 && R225 = 0 && R226 = 1 && R233 - R266 = 1 && R234 = R238 && R235 - R266 = 1 && R236 = R238 && R237 - R266 = 1 && R243 = 0 && R244 = R266 && R245 = 0 && R246 = R266 && R247 = 0 && R248 = R266 && R249 = 0 && R250 = R266 && R251 = 0 && R252 = R266 && R253 = 0 && R254 = R266 && R255 = 0 && R256 = R266 && R257 = 0 && R258 = R266 && R259 = 0 && R260 = R266 && R261 = 0 && R262 = R266 && R263 = 0 && R264 = R266 && R265 = 0 && R0 != 0 && R1 != 0 && R9 < 1 && R12 < R222 && -2 < R12 && 0 < R222 && R266 < R238 && -1 < R266 && (R0 != R208 || R208 = 1 || R208 < 0) && (R5 != 0 || ((R1 != R212 || R211 - R212 = -1 || R212 < 0) && (R1 = R212 || R1 < 1))) && (R5 != 0 || ((R1 != R214 || R213 - R214 = -1 || R214 < 0) && (R1 = R214 || R1 < 1))) && (R206 != 0 || ((R239 != 0 || R12 - R240 = -1 || R12 < 0) && (R239 = 0 || R12 < 0))) && (R206 != 0 || ((R241 != 0 || R12 - R242 = -1 || R12 < 0) && (R241 = 0 || R12 < 0))) && (R208 != 1 || -1 < R0) && (R209 != 0 || ((R4 != 0 || ((R0 != R210 || R210 = 1 || R210 < 0) && (R0 = R210 || R210 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R210 || R210 = 1 || R210 < 0) && (R210 != 1 || -1 < R0) && (R0 = R210 || R210 = 1))))) && (R215 != 0 || ((R6 != 0 || ((R1 != R216 || R216 = 1 || R216 < 0) && (R1 = R216 || R216 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R216 || R216 = 1 || R216 < 0) && (R216 != 1 || -1 < R1) && (R1 = R216 || R216 = 1))))) && (R217 != 0 || ((R6 != 0 || ((R1 != R218 || R218 = 1 || R218 < 0) && (R1 = R218 || R218 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R218 || R218 = 1 || R218 < 0) && (R218 != 1 || -1 < R1) && (R1 = R218 || R218 = 1))))) && (R222 != R228 || R12 - R227 = -1 || ((R205 != 0 || R228 - R12 < 2) && (R205 = 0 || R228 - R12 < 1 || R228 < 1))) && (R222 != R230 || R12 - R229 = -1 || ((R205 != 0 || R230 - R12 < 2) && (R205 = 0 || R230 - R12 < 1 || R230 < 1))) && (R222 != R232 || R12 - R231 = -1 || ((R205 != 0 || R232 - R12 < 2) && (R205 = 0 || R232 - R12 < 1 || R232 < 1))) && (R0 = R208 || R208 = 1) && (R5 = 0 || (R1 = R212 && R211 - R212 = -1)) && (R5 = 0 || (R1 = R214 && R213 - R214 = -1)) && (R206 = 0 || (R12 - R240 = -1 && R239 = 0)) && (R206 = 0 || (R12 - R242 = -1 && R241 = 0)) && (R209 = 0 || (R4 = 0 && R0 < 0)) && (R215 = 0 || (R6 = 0 && R1 < 0)) && (R217 = 0 || (R6 = 0 && R1 < 0)) && (R222 = R228 || (R12 - R222 = -1 && R205 = 0)) && (R222 = R230 || (R12 - R222 = -1 && R205 = 0)) && (R222 = R232 || (R12 - R222 = -1 && R205 = 0));
// End of Parikh automata intersection problem
