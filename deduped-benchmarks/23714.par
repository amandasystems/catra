// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R5160, R5161, R5162, R5163, R5164, R5165, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R8, R8554, R8555, R8556, R8557, R8558, R8559, R8872, R8873, R8874, R8875, R8876, R8877, R8878, R8879, R8880, R8881, R8882, R8883, R8884, R8885, R8886, R8887, R8888, R8889, R8890, R8891, R8892, R8893, R8894, R8895, R8896, R8897, R8898, R8899, R8900, R8901, R8902, R8903, R8904, R8905, R8906, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R8915, R8916, R8917, R8918, R8919, R8920, R8921, R8922, R8923, R8924, R8925, R8926, R8927, R8928, R8929, R8930, R8931, R8932, R8933, R8934, R8935, R8936, R8937, R8938, R8939, R8940, R8941, R8942, R8943, R8944, R8945, R8946, R8947, R8948, R8949, R8950, R8951, R8952, R8953, R8954, R8955, R8956, R8957, R8958, R8959, R8960, R8961, R8962, R8963, R8964, R8965, R8966, R8967, R8968, R8969, R8970, R8971, R8972, R8973, R8974, R8975;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8896 += 1, R8897 += 1 };
  s0 -> s1 [0, 65535] { R8897 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8897 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R8899 += 1 };
  s0 -> s0 [0, 65535] { R8898 += 1, R8899 += 1 };
  s0 -> s2 [73, 73] { R8899 += 1 };
  s0 -> s3 [73, 73] { R8899 += 1 };
  s0 -> s1 [82, 65535] { R8899 += 1 };
  s1 -> s1 [0, 72] { R8899 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8899 += 1 };
  s1 -> s3 [73, 73] { R8899 += 1 };
  s1 -> s1 [82, 65535] { R8899 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R8899 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R8899 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R8901 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8900 += 1, R8901 += 1 };
  s0 -> s2 [73, 73] { R8901 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R8901 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R8901 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R8901 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8901 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R8901 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R8901 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R8901 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R8903 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R8902 += 1, R8903 += 1 };
  s0 -> s2 [73, 73] { R8903 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R8903 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R8903 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R8903 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8903 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R8903 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R8903 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8903 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R8905 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R8904 += 1, R8905 += 1 };
  s0 -> s2 [73, 73] { R8905 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R8905 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R8905 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R8905 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8905 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R8905 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R8905 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8905 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R8907 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8906 += 1, R8907 += 1 };
  s0 -> s2 [73, 73] { R8907 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R8907 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R8907 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R8907 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8907 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R8907 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R8907 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8907 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R8909 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8908 += 1, R8909 += 1 };
  s0 -> s2 [73, 73] { R8909 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R8909 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R8909 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R8909 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8909 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R8909 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R8909 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R8909 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R8911 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8910 += 1, R8911 += 1 };
  s0 -> s2 [73, 73] { R8911 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R8911 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R8911 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R8911 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8911 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R8911 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R8911 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R8911 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R8913 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R8912 += 1, R8913 += 1 };
  s0 -> s2 [73, 73] { R8913 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R8913 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R8913 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R8913 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8913 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R8913 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R8913 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R8913 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R8933 += 1 };
  s0 -> s0 [0, 65535] { R8932 += 1, R8933 += 1 };
  s0 -> s2 [73, 73] { R8933 += 1 };
  s0 -> s1 [74, 65535] { R8933 += 1 };
  s1 -> s1 [0, 72] { R8933 += 1 };
  s1 -> s2 [73, 73] { R8933 += 1 };
  s1 -> s1 [74, 65535] { R8933 += 1 };
  s2 -> s2 [0, 65535] { R8933 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8935 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R8934 += 1, R8935 += 1 };
  s1 -> s1 [0, 65535] { R8935 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R8937 += 1 };
  s0 -> s0 [0, 65535] { R8936 += 1, R8937 += 1 };
  s0 -> s2 [0, 65535] { R8937 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R8937 += 1 };
  s0 -> s1 [74, 65535] { R8937 += 1 };
  s1 -> s1 [0, 72] { R8937 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R8937 += 1 };
  s1 -> s1 [74, 65535] { R8937 += 1 };
  s2 -> s1 [0, 72] { R8937 += 1 };
  s2 -> s2 [0, 65535] { R8937 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R8937 += 1 };
  s2 -> s1 [74, 65535] { R8937 += 1 };
  s3 -> s3 [0, 65535] { R8937 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R8939 += 1, R8877 += 1 };
  s0 -> s0 [0, 65535] { R8938 += 1, R8939 += 1 };
  s0 -> s2 [0, 65535] { R8939 += 1, R8876 += 1, R8877 += 1 };
  s0 -> s1 [74, 65535] { R8939 += 1, R8877 += 1 };
  s1 -> s1 [0, 72] { R8939 += 1, R8877 += 1 };
  s1 -> s1 [0, 65535] { R8939 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R8939 += 1, R8877 += 1 };
  s2 -> s1 [0, 72] { R8939 += 1, R8877 += 1 };
  s2 -> s2 [0, 65535] { R8939 += 1, R8876 += 1, R8877 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R8939 += 1, R8877 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8940 += 1, R8941 += 1 };
  s0 -> s1 [0, 65535] { R8941 += 1, R8879 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R8941 += 1, R8878 += 1, R8879 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8941 += 1, R8879 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R8941 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8941 += 1, R8879 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R8941 += 1, R8878 += 1, R8879 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8941 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R8943 += 1, R8881 += 1 };
  s0 -> s2 [0, 65535] { R8943 += 1, R8880 += 1, R8881 += 1 };
  s0 -> s0 [0, 65535] { R8942 += 1, R8943 += 1 };
  s0 -> s1 [81, 65535] { R8943 += 1, R8881 += 1 };
  s1 -> s1 [0, 73] { R8943 += 1, R8881 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8943 += 1 };
  s1 -> s1 [81, 65535] { R8943 += 1, R8881 += 1 };
  s2 -> s1 [0, 73] { R8943 += 1, R8881 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8943 += 1, R8880 += 1, R8881 += 1 };
  s2 -> s1 [81, 65535] { R8943 += 1, R8881 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8945 += 1, R8882 += 1, R8883 += 1 };
  s0 -> s0 [0, 65535] { R8944 += 1, R8945 += 1 };
  s0 -> s2 [0, 65535] { R8945 += 1, R8883 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R8945 += 1, R8882 += 1, R8883 += 1 };
  s1 -> s2 [0, 65535] { R8945 += 1, R8883 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8945 += 1 };
  s2 -> s2 [0, 65535] { R8945 += 1, R8883 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8945 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R8947 += 1, R8885 += 1 };
  s0 -> s0 [0, 65535] { R8946 += 1, R8947 += 1 };
  s0 -> s2 [0, 65535] { R8947 += 1, R8885 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R8947 += 1, R8884 += 1, R8885 += 1 };
  s0 -> s1 [82, 65535] { R8947 += 1, R8885 += 1 };
  s1 -> s1 [0, 80] { R8947 += 1, R8885 += 1 };
  s1 -> s1 [0, 65535] { R8947 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R8947 += 1, R8885 += 1 };
  s2 -> s1 [0, 80] { R8947 += 1, R8885 += 1 };
  s2 -> s2 [0, 65535] { R8947 += 1, R8885 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R8947 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8947 += 1, R8885 += 1 };
  s3 -> s1 [0, 80] { R8947 += 1, R8885 += 1 };
  s3 -> s2 [0, 65535] { R8947 += 1, R8885 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R8947 += 1, R8884 += 1, R8885 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R8947 += 1, R8885 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8947 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R8949 += 1, R8887 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8949 += 1, R8887 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R8948 += 1, R8949 += 1 };
  s0 -> s3 [0, 65535] { R8949 += 1, R8886 += 1, R8887 += 1 };
  s0 -> s1 [82, 65535] { R8949 += 1, R8887 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R8949 += 1, R8887 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R8949 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8949 += 1, R8887 += 1 };
  s1 -> s1 [82, 65535] { R8949 += 1, R8887 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R8949 += 1, R8887 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R8949 += 1 };
  s2 -> s2 [0, 65535] { R8949 += 1, R8887 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8949 += 1, R8887 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R8949 += 1, R8887 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R8949 += 1, R8887 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8949 += 1, R8886 += 1, R8887 += 1 };
  s3 -> s1 [82, 65535] { R8949 += 1, R8887 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8949 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8951 += 1, R8888 += 1, R8889 += 1 };
  s0 -> s2 [0, 65535] { R8951 += 1, R8889 += 1 };
  s0 -> s0 [0, 65535] { R8950 += 1, R8951 += 1 };
  s0 -> s3 [0, 65535] { R8951 += 1, R8889 += 1, R5164 += 1, R5165 += 1 };
  s1 -> s1 [0, 65535] { R8951 += 1, R8888 += 1, R8889 += 1 };
  s1 -> s2 [0, 65535] { R8951 += 1, R8889 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R8951 += 1, R8889 += 1, R5164 += 1, R5165 += 1 };
  s2 -> s2 [0, 65535] { R8951 += 1, R8889 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8951 += 1 };
  s3 -> s2 [0, 65535] { R8951 += 1, R8889 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8951 += 1, R8889 += 1, R5164 += 1, R5165 += 1 };
  s3 -> s5 [0, 65535] { R8951 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8951 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s0 -> s0 [0, 65535] { R8952 += 1, R8953 += 1 };
  s0 -> s2 [0, 65535] { R8953 += 1, R8890 += 1, R8891 += 1 };
  s0 -> s3 [82, 82] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s0 -> s1 [83, 65535] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s1 -> s1 [0, 81] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s1 -> s3 [82, 82] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s1 -> s1 [83, 65535] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s2 -> s1 [0, 81] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s2 -> s2 [0, 65535] { R8953 += 1, R8890 += 1, R8891 += 1 };
  s2 -> s3 [82, 82] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s2 -> s1 [83, 65535] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8953 += 1 };
  s3 -> s6 [0, 65535] { R8953 += 1, R8891 += 1 };
  s3 -> s3 [0, 65535] { R8953 += 1, R8891 += 1, R7709 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8953 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8953 += 1 };
  s6 -> s6 [0, 65535] { R8953 += 1, R8891 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R8954 += 1, R8955 += 1 };
  s0 -> s1 [0, 65535] { R8955 += 1, R8892 += 1, R8893 += 1 };
  s0 -> s2 [0, 65535] { R8955 += 1, R8893 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8955 += 1, R8892 += 1, R8893 += 1 };
  s1 -> s2 [0, 65535] { R8955 += 1, R8893 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8955 += 1 };
  s2 -> s2 [0, 65535] { R8955 += 1, R8893 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8955 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R8956 += 1, R8957 += 1 };
  s0 -> s1 [0, 65535] { R8957 += 1, R8895 += 1 };
  s0 -> s2 [0, 65535] { R8957 += 1, R8894 += 1, R8895 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8957 += 1, R8895 += 1 };
  s1 -> s4 [0, 65535] { R8957 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8957 += 1, R8895 += 1 };
  s2 -> s2 [0, 65535] { R8957 += 1, R8894 += 1, R8895 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8957 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8959 += 1, R8915 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R8958 += 1, R8959 += 1 };
  s0 -> s2 [0, 65535] { R8959 += 1, R8914 += 1, R8915 += 1 };
  s1 -> s1 [0, 65535] { R8959 += 1, R8915 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R8959 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8959 += 1, R8915 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R8959 += 1, R8914 += 1, R8915 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8959 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R8961 += 1, R8917 += 1 };
  s0 -> s2 [0, 65535] { R8961 += 1, R8916 += 1, R8917 += 1 };
  s0 -> s0 [0, 65535] { R8960 += 1, R8961 += 1 };
  s0 -> s3 [73, 73] { R8961 += 1, R8917 += 1 };
  s0 -> s4 [73, 73] { R8961 += 1, R8917 += 1 };
  s0 -> s5 [81, 81] { R8961 += 1, R8917 += 1 };
  s0 -> s1 [82, 65535] { R8961 += 1, R8917 += 1 };
  s1 -> s1 [0, 72] { R8961 += 1, R8917 += 1 };
  s1 -> s3 [73, 73] { R8961 += 1, R8917 += 1 };
  s1 -> s4 [73, 73] { R8961 += 1, R8917 += 1 };
  s1 -> s5 [81, 81] { R8961 += 1, R8917 += 1 };
  s1 -> s1 [82, 65535] { R8961 += 1, R8917 += 1 };
  s2 -> s1 [0, 72] { R8961 += 1, R8917 += 1 };
  s2 -> s2 [0, 65535] { R8961 += 1, R8916 += 1, R8917 += 1 };
  s2 -> s3 [73, 73] { R8961 += 1, R8917 += 1 };
  s2 -> s4 [73, 73] { R8961 += 1, R8917 += 1 };
  s2 -> s5 [81, 81] { R8961 += 1, R8917 += 1 };
  s2 -> s1 [82, 65535] { R8961 += 1, R8917 += 1 };
  s4 -> s4 [0, 73] { R8961 += 1, R8917 += 1 };
  s4 -> s7 [81, 81] { R8961 += 1, R8917 += 1 };
  s4 -> s4 [82, 65535] { R8961 += 1, R8917 += 1 };
  s5 -> s5 [0, 72] { R8961 += 1, R8917 += 1 };
  s5 -> s5 [0, 65535] { R8961 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R8961 += 1, R8917 += 1 };
  s5 -> s8 [73, 73] { R8961 += 1, R8917 += 1 };
  s5 -> s5 [81, 65535] { R8961 += 1, R8917 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R8961 += 1, R8917 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8961 += 1 };
  s7 -> s7 [81, 65535] { R8961 += 1, R8917 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8961 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R8963 += 1, R8919 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R8963 += 1, R8918 += 1, R8919 += 1 };
  s0 -> s0 [0, 65535] { R8962 += 1, R8963 += 1 };
  s0 -> s3 [73, 73] { R8963 += 1, R8919 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R8963 += 1, R8919 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R8963 += 1, R8919 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R8963 += 1, R8919 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8963 += 1 };
  s1 -> s3 [73, 73] { R8963 += 1, R8919 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R8963 += 1, R8919 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R8963 += 1, R8919 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R8963 += 1, R8919 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R8963 += 1, R8918 += 1, R8919 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8963 += 1, R8919 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R8963 += 1, R8919 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R8963 += 1, R8919 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R8963 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8963 += 1, R8919 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8963 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8963 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R8965 += 1, R8921 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R8964 += 1, R8965 += 1 };
  s0 -> s2 [0, 65535] { R8965 += 1, R8920 += 1, R8921 += 1 };
  s0 -> s3 [73, 73] { R8965 += 1, R8921 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R8965 += 1, R8921 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R8965 += 1, R8921 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R8965 += 1, R8921 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8965 += 1 };
  s1 -> s3 [73, 73] { R8965 += 1, R8921 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R8965 += 1, R8921 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R8965 += 1, R8921 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R8965 += 1, R8921 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R8965 += 1, R8920 += 1, R8921 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8965 += 1, R8921 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R8965 += 1, R8921 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R8965 += 1, R8921 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R8965 += 1, R8921 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R8965 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8965 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8965 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R8967 += 1, R8922 += 1, R8923 += 1 };
  s0 -> s0 [0, 65535] { R8966 += 1, R8967 += 1 };
  s0 -> s3 [73, 73] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R8967 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R8967 += 1, R8922 += 1, R8923 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R8967 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8967 += 1, R8923 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8967 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8967 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s2 [0, 72] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s0 [0, 65535] { R8968 += 1, R8969 += 1 };
  s0 -> s3 [0, 65535] { R8969 += 1, R8924 += 1, R8925 += 1 };
  s0 -> s4 [73, 73] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s5 [73, 73] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s6 [73, 73] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s7 [73, 73] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s1 [74, 65535] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s2 [74, 65535] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s1 [0, 72] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [0, 65535] { R8969 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [73, 73] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s5 [73, 73] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [74, 65535] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s1 [0, 72] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [0, 72] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s2 -> s4 [73, 73] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s5 [73, 73] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s6 [73, 73] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s2 -> s7 [73, 73] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s2 -> s1 [74, 65535] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [74, 65535] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s1 [0, 72] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s2 [0, 72] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s3 [0, 65535] { R8969 += 1, R8924 += 1, R8925 += 1 };
  s3 -> s4 [73, 73] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s5 [73, 73] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s6 [73, 73] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s7 [73, 73] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s1 [74, 65535] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s2 [74, 65535] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s4 -> s4 [0, 65535] { R8969 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s8 [0, 65535] { R8969 += 1 };
  s5 -> s5 [0, 65535] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R8969 += 1, R8925 += 1, R5161 += 1, R5162 += 1 };
  s7 -> s7 [0, 65535] { R8969 += 1, R8925 += 1, R5160 += 1, R5161 += 1 };
  s8 -> s8 [0, 65535] { R8969 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s0 -> s3 [0, 65535] { R8971 += 1, R8926 += 1, R8927 += 1 };
  s0 -> s0 [0, 65535] { R8970 += 1, R8971 += 1 };
  s0 -> s4 [73, 73] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [73, 73] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s0 -> s7 [73, 73] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s0 -> s2 [74, 81] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s0 -> s1 [74, 65535] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [83, 65535] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s1 -> s1 [0, 72] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 72] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s1 -> s4 [73, 73] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s5 [73, 73] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s6 [73, 73] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s1 -> s7 [73, 73] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s1 -> s2 [74, 81] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s1 -> s1 [74, 65535] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [83, 65535] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s2 -> s2 [0, 72] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s2 -> s2 [0, 65535] { R8971 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [73, 73] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s2 -> s7 [73, 73] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s2 -> s2 [74, 81] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s2 -> s2 [83, 65535] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s3 -> s1 [0, 72] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R8971 += 1, R8926 += 1, R8927 += 1 };
  s3 -> s4 [73, 73] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [73, 73] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s3 -> s7 [73, 73] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s3 -> s2 [74, 81] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s3 -> s1 [74, 65535] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [83, 65535] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s4 -> s7 [0, 81] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s4 -> s4 [0, 65535] { R8971 += 1, R8927 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s7 [83, 65535] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s6 -> s6 [0, 65535] { R8971 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 81] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s7 -> s7 [0, 65535] { R8971 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [83, 65535] { R8971 += 1, R8927 += 1, R7707 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s6, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s0 -> s2 [0, 72] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s0 -> s3 [0, 65535] { R8973 += 1, R8928 += 1, R8929 += 1 };
  s0 -> s0 [0, 65535] { R8972 += 1, R8973 += 1 };
  s0 -> s4 [73, 73] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s0 -> s5 [73, 73] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s0 -> s6 [73, 73] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s0 -> s7 [73, 73] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s0 -> s1 [74, 65535] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s0 -> s2 [74, 65535] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s1 -> s1 [0, 72] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s1 -> s2 [0, 72] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s1 -> s4 [73, 73] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s1 -> s5 [73, 73] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s1 -> s6 [73, 73] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s1 -> s7 [73, 73] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s1 -> s1 [74, 65535] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s1 -> s2 [74, 65535] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s2 [0, 72] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s11 [0, 72] { R8973 += 1, R8929 += 1 };
  s2 -> s8 [73, 73] { R8973 += 1, R8929 += 1 };
  s2 -> s4 [73, 73] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s12 [73, 73] { R8973 += 1, R8929 += 1 };
  s2 -> s7 [73, 73] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s2 [74, 65535] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s11 [74, 65535] { R8973 += 1, R8929 += 1 };
  s3 -> s1 [0, 72] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s3 -> s2 [0, 72] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s3 -> s3 [0, 65535] { R8973 += 1, R8928 += 1, R8929 += 1 };
  s3 -> s4 [73, 73] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s3 -> s5 [73, 73] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s3 -> s6 [73, 73] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s3 -> s7 [73, 73] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s3 -> s1 [74, 65535] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s3 -> s2 [74, 65535] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s5 -> s5 [0, 65535] { R8973 += 1, R8929 += 1, R8554 += 1, R8555 += 1 };
  s5 -> s7 [0, 65535] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s7 -> s8 [0, 65535] { R8973 += 1, R8929 += 1 };
  s7 -> s7 [0, 65535] { R8973 += 1, R8929 += 1, R8555 += 1, R8556 += 1 };
  s8 -> s9 [0, 65535] { R8973 += 1 };
  s8 -> s8 [0, 65535] { R8973 += 1, R8929 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R8973 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R8973 += 1, R8929 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8973 += 1 };
  s11 -> s8 [73, 73] { R8973 += 1, R8929 += 1 };
  s11 -> s12 [73, 73] { R8973 += 1, R8929 += 1 };
  s11 -> s11 [74, 65535] { R8973 += 1, R8929 += 1 };
  s12 -> s12 [0, 65535] { R8973 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s0 -> s2 [0, 72] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s0 -> s0 [0, 65535] { R8974 += 1, R8975 += 1 };
  s0 -> s3 [0, 65535] { R8975 += 1, R8930 += 1, R8931 += 1 };
  s0 -> s4 [73, 73] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s0 -> s5 [73, 73] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s0 -> s6 [73, 73] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s0 -> s7 [73, 73] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s0 -> s2 [74, 80] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s0 -> s1 [74, 65535] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s0 -> s8 [81, 81] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s0 -> s2 [83, 65535] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s1 -> s1 [0, 72] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s1 -> s2 [0, 72] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s1 -> s4 [73, 73] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s1 -> s5 [73, 73] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s1 -> s6 [73, 73] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s1 -> s7 [73, 73] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s1 -> s2 [74, 80] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s1 -> s1 [74, 65535] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s1 -> s8 [81, 81] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s1 -> s2 [83, 65535] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s2 -> s2 [0, 72] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s2 -> s6 [73, 73] { R8975 += 1, R8931 += 1 };
  s2 -> s7 [73, 73] { R8975 += 1, R8931 += 1 };
  s2 -> s2 [74, 80] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s2 -> s2 [74, 65535] { R8975 += 1, R8931 += 1 };
  s2 -> s8 [81, 81] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s2 -> s2 [83, 65535] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s3 -> s1 [0, 72] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s3 -> s2 [0, 72] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s3 -> s3 [0, 65535] { R8975 += 1, R8930 += 1, R8931 += 1 };
  s3 -> s4 [73, 73] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s3 -> s5 [73, 73] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s3 -> s6 [73, 73] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s3 -> s7 [73, 73] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s3 -> s2 [74, 80] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s3 -> s1 [74, 65535] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s3 -> s8 [81, 81] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s3 -> s2 [83, 65535] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s5 -> s7 [0, 80] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s5 -> s5 [0, 65535] { R8975 += 1, R8931 += 1, R8872 += 1, R8873 += 1 };
  s5 -> s11 [81, 81] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s5 -> s7 [83, 65535] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s7 -> s7 [0, 80] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s7 -> s7 [0, 65535] { R8975 += 1, R8931 += 1 };
  s7 -> s11 [81, 81] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s7 -> s7 [83, 65535] { R8975 += 1, R8931 += 1, R8873 += 1 };
  s8 -> s8 [0, 72] { R8975 += 1, R8931 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8975 += 1 };
  s8 -> s10 [73, 73] { R8975 += 1, R8931 += 1 };
  s8 -> s11 [73, 73] { R8975 += 1, R8931 += 1 };
  s8 -> s8 [74, 65535] { R8975 += 1, R8931 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8975 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8975 += 1, R8931 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R8975 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8975 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R8891 && R2 = R8975 && R20 - R8975 = -1 && R21 = R8975 && R22 - R8975 = -1 && R23 = R8975 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7709 + -1*R7707 - R53 = 0 && R52 + R7708 + R7706 = 0 && R8890 = 0 && R8916 = 0 && R8917 = 0 && R8924 = 0 && R8925 = 0 && R8926 = 0 && R8927 = 0 && R8928 = 0 && R8929 = 0 && R8930 = 0 && R8931 = 0 && R8932 = 0 && R8933 = R8975 && R8934 = 0 && R8935 = R8975 && R8936 = 0 && R8937 = R8975 && R8938 = 0 && R8939 = R8975 && R8940 = 0 && R8941 = R8975 && R8942 = 0 && R8943 = R8975 && R8944 = 0 && R8945 = R8975 && R8946 = 0 && R8947 = R8975 && R8948 = 0 && R8949 = R8975 && R8950 = 0 && R8951 = R8975 && R8952 = 0 && R8953 = R8975 && R8954 = 0 && R8955 = R8975 && R8956 = 0 && R8957 = R8975 && R8958 = 0 && R8959 = R8975 && R8960 = 0 && R8961 = R8975 && R8962 = 0 && R8963 = R8975 && R8964 = 0 && R8965 = R8975 && R8966 = 0 && R8967 = R8975 && R8968 = 0 && R8969 = R8975 && R8970 = 0 && R8971 = R8975 && R8972 = 0 && R8973 = R8975 && R8974 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7709 + -1*R7707 - R53 < 1 && -1 < R8891 && 0 < R8975 && (R48 + R5165 + R5162 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7709 + -1*R7707 - R53 = 0 || R53 + R7709 + R7707 < 1) && (R42 + R72 + R70 = 0 || R53 + R7709 + R7707 < 1))) && (R48 + R5165 + R5162 != 0 || ((R46 + R5163 + R5160 != 0 || R47 + R5164 + R5161 + -1*R7709 + -1*R7707 - R53 = 0 || R53 + R7709 + R7707 < 1) && (R46 + R5163 + R5160 = 0 || R53 + R7709 + R7707 < 1))) && (R8876 != 0 || R8877 = R8891 || (R17 = 0 && R8891 = 0)) && (R8878 != 0 || R8879 = R8891 || (R17 = 0 && R8891 = 0)) && (R8880 != 0 || R8881 = R8891 || (R17 = 0 && R8891 = 0)) && (R8882 != 0 || R8883 = R8891 || (R17 = 0 && R8891 = 0)) && (R8884 != 0 || R8885 = R8891 || (R17 = 0 && R8891 = 0)) && (R8886 != 0 || R8887 = R8891 || (R17 = 0 && R8891 = 0)) && (R8888 != 0 || R8889 = R8891 || (R17 = 0 && R8891 = 0)) && (R8892 != 0 || R8891 = R8893 || (R17 = 0 && R8891 = 0)) && (R8894 != 0 || R8891 = R8895 || (R17 = 0 && R8891 = 0)) && (R18 = 0 || (R8914 = 0 && R8915 = 0)) && (R18 = 0 || (R8918 = 0 && R8919 = 0)) && (R18 = 0 || (R8920 = 0 && R8921 = 0)) && (R18 = 0 || (R8922 = 0 && R8923 = 0)) && (R19 = 0 || (R8896 = 0 && R8897 = 0)) && (R19 = 0 || (R8898 = 0 && R8899 = 0)) && (R19 = 0 || (R8900 = 0 && R8901 = 0)) && (R19 = 0 || (R8902 = 0 && R8903 = 0)) && (R19 = 0 || (R8904 = 0 && R8905 = 0)) && (R19 = 0 || (R8906 = 0 && R8907 = 0)) && (R19 = 0 || (R8908 = 0 && R8909 = 0)) && (R19 = 0 || (R8910 = 0 && R8911 = 0)) && (R19 = 0 || (R8912 = 0 && R8913 = 0)) && (R48 + R5165 + R5162 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7709 + -1*R7707 - R53 = 0)) && (R48 + R5165 + R5162 = 0 || (R46 + R5163 + R5160 = 0 && R47 + R5164 + R5161 + -1*R7709 + -1*R7707 - R53 = 0)) && (R58 + R8559 + R8556 = 0 || (R56 + R8557 + R8554 = 0 && R57 + R8558 + R8555 = 0)) && (R58 + R8559 + R8556 = 0 || (R62 + R8874 + R8872 = 0 && R63 + R8875 + R8873 = 0)) && (R8876 = 0 || (R17 = 0 && R8891 = 0)) && (R8878 = 0 || (R17 = 0 && R8891 = 0)) && (R8880 = 0 || (R17 = 0 && R8891 = 0)) && (R8882 = 0 || (R17 = 0 && R8891 = 0)) && (R8884 = 0 || (R17 = 0 && R8891 = 0)) && (R8886 = 0 || (R17 = 0 && R8891 = 0)) && (R8888 = 0 || (R17 = 0 && R8891 = 0)) && (R8892 = 0 || (R17 = 0 && R8891 = 0)) && (R8894 = 0 || (R17 = 0 && R8891 = 0));
// End of Parikh automata intersection problem
