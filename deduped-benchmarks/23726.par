// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R5160, R5161, R5162, R5163, R5164, R5165, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R8, R8554, R8555, R8556, R8557, R8558, R8559, R8560, R8561, R8562, R8563, R8564, R8565, R8566, R8567, R8568, R8569, R8570, R8571, R8572, R8573, R8574, R8575, R8576, R8577, R8578, R8579, R8580, R8581, R8582, R8583, R8584, R8585, R8586, R8587, R8588, R8589, R8590, R8591, R8592, R8593, R8594, R8595, R8596, R8597, R8598, R8599, R8600, R8601, R8602, R8603, R8604, R8605, R8606, R8607, R8608, R8609, R8610, R8611, R8612, R8613, R8614, R8615, R8616, R8617, R8618, R8619, R8620, R8621, R8622, R8623, R8624, R8625, R8626, R8627, R8628, R8629, R8630, R8631, R8632, R8633, R8634, R8635, R8636, R8637, R8638, R8639, R8640, R8641, R8642, R8643, R8644, R8645, R8646, R8647, R8648, R8649, R8650, R8651, R8652, R8653, R8654, R8655, R8656, R8657, R8658, R8659, R8660, R8661, R8662, R8663;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8585 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R8584 += 1, R8585 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8585 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R8587 += 1 };
  s0 -> s0 [0, 65535] { R8586 += 1, R8587 += 1 };
  s0 -> s2 [73, 73] { R8587 += 1 };
  s0 -> s3 [73, 73] { R8587 += 1 };
  s0 -> s1 [82, 65535] { R8587 += 1 };
  s1 -> s1 [0, 72] { R8587 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8587 += 1 };
  s1 -> s3 [73, 73] { R8587 += 1 };
  s1 -> s1 [82, 65535] { R8587 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R8587 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R8587 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R8589 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8588 += 1, R8589 += 1 };
  s0 -> s2 [73, 73] { R8589 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R8589 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R8589 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R8589 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8589 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R8589 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R8589 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R8589 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R8591 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R8590 += 1, R8591 += 1 };
  s0 -> s2 [73, 73] { R8591 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R8591 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R8591 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R8591 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8591 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R8591 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R8591 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R8591 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R8593 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R8592 += 1, R8593 += 1 };
  s0 -> s2 [73, 73] { R8593 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R8593 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R8593 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R8593 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8593 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R8593 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R8593 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R8593 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R8595 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8594 += 1, R8595 += 1 };
  s0 -> s2 [73, 73] { R8595 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R8595 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R8595 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R8595 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8595 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R8595 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R8595 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8595 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R8597 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8596 += 1, R8597 += 1 };
  s0 -> s2 [73, 73] { R8597 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R8597 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R8597 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R8597 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8597 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R8597 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R8597 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8597 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R8599 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8598 += 1, R8599 += 1 };
  s0 -> s2 [73, 73] { R8599 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R8599 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R8599 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R8599 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8599 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R8599 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R8599 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R8599 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R8601 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R8600 += 1, R8601 += 1 };
  s0 -> s2 [73, 73] { R8601 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R8601 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R8601 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R8601 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8601 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R8601 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R8601 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8601 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R8621 += 1 };
  s0 -> s0 [0, 65535] { R8620 += 1, R8621 += 1 };
  s0 -> s2 [73, 73] { R8621 += 1 };
  s0 -> s1 [74, 65535] { R8621 += 1 };
  s1 -> s1 [0, 72] { R8621 += 1 };
  s1 -> s2 [73, 73] { R8621 += 1 };
  s1 -> s1 [74, 65535] { R8621 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8621 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8623 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R8622 += 1, R8623 += 1 };
  s1 -> s1 [0, 65535] { R8623 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R8625 += 1 };
  s0 -> s2 [0, 65535] { R8625 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R8624 += 1, R8625 += 1 };
  s0 -> s3 [73, 73] { R8625 += 1 };
  s0 -> s1 [74, 65535] { R8625 += 1 };
  s1 -> s1 [0, 72] { R8625 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R8625 += 1 };
  s1 -> s1 [74, 65535] { R8625 += 1 };
  s2 -> s1 [0, 72] { R8625 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8625 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R8625 += 1 };
  s2 -> s1 [74, 65535] { R8625 += 1 };
  s3 -> s3 [0, 65535] { R8625 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R8627 += 1, R8565 += 1 };
  s0 -> s0 [0, 65535] { R8626 += 1, R8627 += 1 };
  s0 -> s2 [0, 65535] { R8627 += 1, R8564 += 1, R8565 += 1 };
  s0 -> s1 [74, 65535] { R8627 += 1, R8565 += 1 };
  s1 -> s1 [0, 72] { R8627 += 1, R8565 += 1 };
  s1 -> s1 [0, 65535] { R8627 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R8627 += 1, R8565 += 1 };
  s2 -> s1 [0, 72] { R8627 += 1, R8565 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8627 += 1, R8564 += 1, R8565 += 1 };
  s2 -> s1 [74, 65535] { R8627 += 1, R8565 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8629 += 1, R8566 += 1, R8567 += 1 };
  s0 -> s0 [0, 65535] { R8628 += 1, R8629 += 1 };
  s0 -> s2 [0, 65535] { R8629 += 1, R8567 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R8629 += 1, R8566 += 1, R8567 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8629 += 1, R8567 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R8629 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8629 += 1, R8567 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R8629 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R8631 += 1, R8569 += 1 };
  s0 -> s0 [0, 65535] { R8630 += 1, R8631 += 1 };
  s0 -> s2 [0, 65535] { R8631 += 1, R8568 += 1, R8569 += 1 };
  s0 -> s1 [81, 65535] { R8631 += 1, R8569 += 1 };
  s1 -> s1 [0, 73] { R8631 += 1, R8569 += 1 };
  s1 -> s1 [0, 65535] { R8631 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R8631 += 1, R8569 += 1 };
  s2 -> s1 [0, 73] { R8631 += 1, R8569 += 1 };
  s2 -> s2 [0, 65535] { R8631 += 1, R8568 += 1, R8569 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R8631 += 1, R8569 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8633 += 1, R8570 += 1, R8571 += 1 };
  s0 -> s2 [0, 65535] { R8633 += 1, R8571 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R8632 += 1, R8633 += 1 };
  s1 -> s1 [0, 65535] { R8633 += 1, R8570 += 1, R8571 += 1 };
  s1 -> s2 [0, 65535] { R8633 += 1, R8571 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8633 += 1 };
  s2 -> s2 [0, 65535] { R8633 += 1, R8571 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8633 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R8635 += 1, R8573 += 1 };
  s0 -> s2 [0, 65535] { R8635 += 1, R8573 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R8635 += 1, R8572 += 1, R8573 += 1 };
  s0 -> s0 [0, 65535] { R8634 += 1, R8635 += 1 };
  s0 -> s1 [82, 65535] { R8635 += 1, R8573 += 1 };
  s1 -> s1 [0, 80] { R8635 += 1, R8573 += 1 };
  s1 -> s1 [0, 65535] { R8635 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R8635 += 1, R8573 += 1 };
  s2 -> s1 [0, 80] { R8635 += 1, R8573 += 1 };
  s2 -> s5 [0, 65535] { R8635 += 1 };
  s2 -> s2 [0, 65535] { R8635 += 1, R8573 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8635 += 1, R8573 += 1 };
  s3 -> s1 [0, 80] { R8635 += 1, R8573 += 1 };
  s3 -> s2 [0, 65535] { R8635 += 1, R8573 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R8635 += 1, R8572 += 1, R8573 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R8635 += 1, R8573 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8635 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R8637 += 1, R8575 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8637 += 1, R8575 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R8637 += 1, R8574 += 1, R8575 += 1 };
  s0 -> s0 [0, 65535] { R8636 += 1, R8637 += 1 };
  s0 -> s1 [82, 65535] { R8637 += 1, R8575 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R8637 += 1, R8575 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R8637 += 1 };
  s1 -> s1 [0, 65535] { R8637 += 1, R8575 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R8637 += 1, R8575 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R8637 += 1, R8575 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R8637 += 1, R8575 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R8637 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8637 += 1, R8575 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R8637 += 1, R8575 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R8637 += 1, R8575 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8637 += 1, R8574 += 1, R8575 += 1 };
  s3 -> s1 [82, 65535] { R8637 += 1, R8575 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8637 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8639 += 1, R8577 += 1, R5164 += 1, R5165 += 1 };
  s0 -> s2 [0, 65535] { R8639 += 1, R8577 += 1 };
  s0 -> s3 [0, 65535] { R8639 += 1, R8576 += 1, R8577 += 1 };
  s0 -> s0 [0, 65535] { R8638 += 1, R8639 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8639 += 1, R8577 += 1, R5164 += 1, R5165 += 1 };
  s1 -> s2 [0, 65535] { R8639 += 1, R8577 += 1 };
  s1 -> s5 [0, 65535] { R8639 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8639 += 1, R8577 += 1 };
  s2 -> s5 [0, 65535] { R8639 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8639 += 1, R8577 += 1, R5164 += 1, R5165 += 1 };
  s3 -> s2 [0, 65535] { R8639 += 1, R8577 += 1 };
  s3 -> s3 [0, 65535] { R8639 += 1, R8576 += 1, R8577 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8639 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s0 -> s2 [0, 65535] { R8641 += 1, R8578 += 1, R8579 += 1 };
  s0 -> s0 [0, 65535] { R8640 += 1, R8641 += 1 };
  s0 -> s3 [82, 82] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s0 -> s1 [83, 65535] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s1 -> s1 [0, 81] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s1 -> s3 [82, 82] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s1 -> s1 [83, 65535] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s2 -> s1 [0, 81] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s2 -> s2 [0, 65535] { R8641 += 1, R8578 += 1, R8579 += 1 };
  s2 -> s3 [82, 82] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s2 -> s1 [83, 65535] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s3 -> s3 [0, 65535] { R8641 += 1, R8579 += 1, R7709 += 1 };
  s3 -> s4 [0, 65535] { R8641 += 1, R8579 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8641 += 1 };
  s4 -> s4 [0, 65535] { R8641 += 1, R8579 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8641 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8641 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R8642 += 1, R8643 += 1 };
  s0 -> s1 [0, 65535] { R8643 += 1, R8581 += 1 };
  s0 -> s2 [0, 65535] { R8643 += 1, R8580 += 1, R8581 += 1 };
  s1 -> s4 [0, 65535] { R8643 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8643 += 1, R8581 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8643 += 1, R8581 += 1 };
  s2 -> s2 [0, 65535] { R8643 += 1, R8580 += 1, R8581 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8643 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s0 -> s2 [0, 65535] { R8645 += 1, R8583 += 1, R8562 += 1, R8563 += 1 };
  s0 -> s0 [0, 65535] { R8644 += 1, R8645 += 1 };
  s0 -> s3 [0, 65535] { R8645 += 1, R8582 += 1, R8583 += 1 };
  s0 -> s4 [81, 81] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s0 -> s5 [81, 81] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s0 -> s1 [83, 65535] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s1 -> s1 [0, 80] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s1 -> s1 [0, 65535] { R8645 += 1, R8583 += 1 };
  s1 -> s6 [0, 65535] { R8645 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [81, 81] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s1 -> s5 [81, 81] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s1 -> s1 [83, 65535] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s2 -> s1 [0, 80] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s2 -> s2 [0, 65535] { R8645 += 1, R8583 += 1, R8562 += 1, R8563 += 1 };
  s2 -> s6 [0, 65535] { R8645 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [81, 81] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s2 -> s5 [81, 81] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s2 -> s1 [83, 65535] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s3 -> s1 [0, 80] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s3 -> s2 [0, 65535] { R8645 += 1, R8583 += 1, R8562 += 1, R8563 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R8645 += 1, R8582 += 1, R8583 += 1 };
  s3 -> s4 [81, 81] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s3 -> s5 [81, 81] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s3 -> s1 [83, 65535] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s4 -> s4 [0, 81] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s4 -> s4 [0, 65535] { R8645 += 1, R8583 += 1 };
  s4 -> s6 [0, 65535] { R8645 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [83, 65535] { R8645 += 1, R8583 += 1, R8563 += 1 };
  s5 -> s6 [0, 65535] { R8645 += 1 };
  s5 -> s5 [0, 65535] { R8645 += 1, R8583 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R8645 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8647 += 1, R8602 += 1, R8603 += 1 };
  s0 -> s2 [0, 65535] { R8647 += 1, R8603 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R8646 += 1, R8647 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8647 += 1, R8602 += 1, R8603 += 1 };
  s1 -> s2 [0, 65535] { R8647 += 1, R8603 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R8647 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8647 += 1, R8603 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R8647 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R8649 += 1, R8605 += 1 };
  s0 -> s0 [0, 65535] { R8648 += 1, R8649 += 1 };
  s0 -> s2 [0, 65535] { R8649 += 1, R8604 += 1, R8605 += 1 };
  s0 -> s3 [73, 73] { R8649 += 1, R8605 += 1 };
  s0 -> s4 [73, 73] { R8649 += 1, R8605 += 1 };
  s0 -> s5 [81, 81] { R8649 += 1, R8605 += 1 };
  s0 -> s1 [82, 65535] { R8649 += 1, R8605 += 1 };
  s1 -> s1 [0, 72] { R8649 += 1, R8605 += 1 };
  s1 -> s3 [73, 73] { R8649 += 1, R8605 += 1 };
  s1 -> s4 [73, 73] { R8649 += 1, R8605 += 1 };
  s1 -> s5 [81, 81] { R8649 += 1, R8605 += 1 };
  s1 -> s1 [82, 65535] { R8649 += 1, R8605 += 1 };
  s2 -> s1 [0, 72] { R8649 += 1, R8605 += 1 };
  s2 -> s2 [0, 65535] { R8649 += 1, R8604 += 1, R8605 += 1 };
  s2 -> s3 [73, 73] { R8649 += 1, R8605 += 1 };
  s2 -> s4 [73, 73] { R8649 += 1, R8605 += 1 };
  s2 -> s5 [81, 81] { R8649 += 1, R8605 += 1 };
  s2 -> s1 [82, 65535] { R8649 += 1, R8605 += 1 };
  s4 -> s4 [0, 73] { R8649 += 1, R8605 += 1 };
  s4 -> s8 [81, 81] { R8649 += 1, R8605 += 1 };
  s4 -> s4 [82, 65535] { R8649 += 1, R8605 += 1 };
  s5 -> s5 [0, 72] { R8649 += 1, R8605 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8649 += 1 };
  s5 -> s7 [73, 73] { R8649 += 1, R8605 += 1 };
  s5 -> s8 [73, 73] { R8649 += 1, R8605 += 1 };
  s5 -> s5 [81, 65535] { R8649 += 1, R8605 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8649 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R8649 += 1, R8605 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8649 += 1 };
  s8 -> s8 [81, 65535] { R8649 += 1, R8605 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R8651 += 1, R8607 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R8651 += 1, R8606 += 1, R8607 += 1 };
  s0 -> s0 [0, 65535] { R8650 += 1, R8651 += 1 };
  s0 -> s3 [73, 73] { R8651 += 1, R8607 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R8651 += 1, R8607 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R8651 += 1, R8607 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R8651 += 1, R8607 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R8651 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8651 += 1, R8607 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R8651 += 1, R8607 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R8651 += 1, R8607 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R8651 += 1, R8607 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8651 += 1, R8606 += 1, R8607 += 1 };
  s2 -> s3 [73, 73] { R8651 += 1, R8607 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R8651 += 1, R8607 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R8651 += 1, R8607 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8651 += 1 };
  s3 -> s3 [0, 65535] { R8651 += 1, R8607 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8651 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8651 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R8653 += 1, R8609 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R8652 += 1, R8653 += 1 };
  s0 -> s2 [0, 65535] { R8653 += 1, R8608 += 1, R8609 += 1 };
  s0 -> s3 [73, 73] { R8653 += 1, R8609 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R8653 += 1, R8609 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R8653 += 1, R8609 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R8653 += 1, R8609 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8653 += 1 };
  s1 -> s3 [73, 73] { R8653 += 1, R8609 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R8653 += 1, R8609 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R8653 += 1, R8609 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R8653 += 1, R8609 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8653 += 1, R8608 += 1, R8609 += 1 };
  s2 -> s3 [73, 73] { R8653 += 1, R8609 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R8653 += 1, R8609 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R8653 += 1, R8609 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8653 += 1, R8609 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R8653 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8653 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8653 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R8654 += 1, R8655 += 1 };
  s0 -> s2 [0, 65535] { R8655 += 1, R8610 += 1, R8611 += 1 };
  s0 -> s3 [73, 73] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R8655 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R8655 += 1, R8610 += 1, R8611 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R8655 += 1, R8611 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R8655 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8655 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8655 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s2 [0, 72] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s0 [0, 65535] { R8656 += 1, R8657 += 1 };
  s0 -> s3 [0, 65535] { R8657 += 1, R8612 += 1, R8613 += 1 };
  s0 -> s4 [73, 73] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s5 [73, 73] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s6 [73, 73] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s7 [73, 73] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s1 [74, 65535] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s2 [74, 65535] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [0, 72] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s2 [0, 72] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s4 [73, 73] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s5 [73, 73] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s6 [73, 73] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s7 [73, 73] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [74, 65535] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s2 [74, 65535] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [0, 72] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R8657 += 1 };
  s2 -> s5 [73, 73] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s7 [73, 73] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [74, 65535] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s1 [0, 72] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s2 [0, 72] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s3 [0, 65535] { R8657 += 1, R8612 += 1, R8613 += 1 };
  s3 -> s4 [73, 73] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s5 [73, 73] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s6 [73, 73] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s7 [73, 73] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s1 [74, 65535] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s2 [74, 65535] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s4 -> s4 [0, 65535] { R8657 += 1, R8613 += 1, R5160 += 1, R5161 += 1 };
  s4 -> s5 [0, 65535] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s5 -> s5 [0, 65535] { R8657 += 1, R8613 += 1, R5161 += 1, R5162 += 1 };
  s5 -> s9 [0, 65535] { R8657 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R8657 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8657 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s0 -> s0 [0, 65535] { R8658 += 1, R8659 += 1 };
  s0 -> s3 [0, 65535] { R8659 += 1, R8614 += 1, R8615 += 1 };
  s0 -> s4 [73, 73] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [73, 73] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s0 -> s7 [73, 73] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s0 -> s2 [74, 81] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s0 -> s1 [74, 65535] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [83, 65535] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s1 -> s1 [0, 72] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 72] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s1 -> s4 [73, 73] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s5 [73, 73] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s6 [73, 73] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s1 -> s7 [73, 73] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s1 -> s2 [74, 81] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s1 -> s1 [74, 65535] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [83, 65535] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s2 -> s2 [0, 72] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R8659 += 1 };
  s2 -> s6 [73, 73] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s2 -> s7 [73, 73] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s2 -> s2 [74, 81] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s2 -> s2 [83, 65535] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s3 -> s1 [0, 72] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R8659 += 1, R8614 += 1, R8615 += 1 };
  s3 -> s4 [73, 73] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [73, 73] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s3 -> s7 [73, 73] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s3 -> s2 [74, 81] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s3 -> s1 [74, 65535] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [83, 65535] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s4 -> s6 [0, 81] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s4 -> s4 [0, 65535] { R8659 += 1, R8615 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s6 [83, 65535] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s6 -> s6 [0, 81] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R8659 += 1 };
  s6 -> s6 [83, 65535] { R8659 += 1, R8615 += 1, R7707 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R8659 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s6, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s0 -> s2 [0, 72] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s0 -> s3 [0, 65535] { R8661 += 1, R8616 += 1, R8617 += 1 };
  s0 -> s0 [0, 65535] { R8660 += 1, R8661 += 1 };
  s0 -> s4 [73, 73] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s0 -> s5 [73, 73] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s0 -> s6 [73, 73] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s0 -> s7 [73, 73] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s0 -> s1 [74, 65535] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s0 -> s2 [74, 65535] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s1 -> s1 [0, 72] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s1 -> s11 [0, 72] { R8661 += 1, R8617 += 1 };
  s1 -> s8 [73, 73] { R8661 += 1, R8617 += 1 };
  s1 -> s5 [73, 73] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s1 -> s6 [73, 73] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s1 -> s12 [73, 73] { R8661 += 1, R8617 += 1 };
  s1 -> s1 [74, 65535] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s1 -> s11 [74, 65535] { R8661 += 1, R8617 += 1 };
  s2 -> s1 [0, 72] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s2 [0, 72] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s2 -> s4 [73, 73] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s2 -> s5 [73, 73] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s6 [73, 73] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s7 [73, 73] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s2 -> s1 [74, 65535] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s2 [74, 65535] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s3 -> s1 [0, 72] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s3 -> s2 [0, 72] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s3 -> s3 [0, 65535] { R8661 += 1, R8616 += 1, R8617 += 1 };
  s3 -> s4 [73, 73] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s3 -> s5 [73, 73] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s3 -> s6 [73, 73] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s3 -> s7 [73, 73] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s3 -> s1 [74, 65535] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s3 -> s2 [74, 65535] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s4 -> s4 [0, 65535] { R8661 += 1, R8617 += 1, R8554 += 1, R8555 += 1 };
  s4 -> s5 [0, 65535] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s5 -> s8 [0, 65535] { R8661 += 1, R8617 += 1 };
  s5 -> s5 [0, 65535] { R8661 += 1, R8617 += 1, R8555 += 1, R8556 += 1 };
  s8 -> s8 [0, 65535] { R8661 += 1, R8617 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8661 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8661 += 1 };
  s11 -> s11 [0, 72] { R8661 += 1, R8617 += 1 };
  s11 -> s11 [0, 65535] { R8661 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [73, 73] { R8661 += 1, R8617 += 1 };
  s11 -> s12 [73, 73] { R8661 += 1, R8617 += 1 };
  s11 -> s11 [74, 65535] { R8661 += 1, R8617 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8661 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s2 [0, 65535] { R8663 += 1, R8618 += 1, R8619 += 1 };
  s0 -> s0 [0, 65535] { R8662 += 1, R8663 += 1 };
  s0 -> s3 [73, 73] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s4 [73, 73] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s1 [74, 65535] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s1 [0, 72] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s1 [0, 65535] { R8663 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s4 [73, 73] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s1 [74, 65535] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s2 -> s1 [0, 72] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s2 -> s2 [0, 65535] { R8663 += 1, R8618 += 1, R8619 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s2 -> s4 [73, 73] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s2 -> s1 [74, 65535] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s3 -> s3 [0, 65535] { R8663 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8663 += 1, R8619 += 1, R8560 += 1, R8561 += 1 };
  s4 -> s6 [0, 65535] { R8663 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8663 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R8579 && R2 = R8663 && R20 - R8663 = -1 && R21 = R8663 && R22 - R8663 = -1 && R23 = R8663 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7709 + -1*R7707 - R53 = 0 && R52 + R7708 + R7706 = 0 && R8578 = 0 && R8604 = 0 && R8605 = 0 && R8612 = 0 && R8613 = 0 && R8614 = 0 && R8615 = 0 && R8616 = 0 && R8617 = 0 && R8620 = 0 && R8621 = R8663 && R8622 = 0 && R8623 = R8663 && R8624 = 0 && R8625 = R8663 && R8626 = 0 && R8627 = R8663 && R8628 = 0 && R8629 = R8663 && R8630 = 0 && R8631 = R8663 && R8632 = 0 && R8633 = R8663 && R8634 = 0 && R8635 = R8663 && R8636 = 0 && R8637 = R8663 && R8638 = 0 && R8639 = R8663 && R8640 = 0 && R8641 = R8663 && R8642 = 0 && R8643 = R8663 && R8644 = 0 && R8645 = R8663 && R8646 = 0 && R8647 = R8663 && R8648 = 0 && R8649 = R8663 && R8650 = 0 && R8651 = R8663 && R8652 = 0 && R8653 = R8663 && R8654 = 0 && R8655 = R8663 && R8656 = 0 && R8657 = R8663 && R8658 = 0 && R8659 = R8663 && R8660 = 0 && R8661 = R8663 && R8662 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7709 + -1*R7707 - R53 < 1 && -1 < R8579 && 0 < R8663 && (R48 + R5165 + R5162 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7709 + -1*R7707 - R53 = 0 || R53 + R7709 + R7707 < 1) && (R42 + R72 + R70 = 0 || R53 + R7709 + R7707 < 1))) && (R48 + R5165 + R5162 != 0 || ((R46 + R5163 + R5160 != 0 || R47 + R5164 + R5161 + -1*R7709 + -1*R7707 - R53 = 0 || R53 + R7709 + R7707 < 1) && (R46 + R5163 + R5160 = 0 || R53 + R7709 + R7707 < 1))) && (R8564 != 0 || R8565 = R8579 || (R17 = 0 && R8579 = 0)) && (R8566 != 0 || R8567 = R8579 || (R17 = 0 && R8579 = 0)) && (R8568 != 0 || R8569 = R8579 || (R17 = 0 && R8579 = 0)) && (R8570 != 0 || R8571 = R8579 || (R17 = 0 && R8579 = 0)) && (R8572 != 0 || R8573 = R8579 || (R17 = 0 && R8579 = 0)) && (R8574 != 0 || R8575 = R8579 || (R17 = 0 && R8579 = 0)) && (R8576 != 0 || R8577 = R8579 || (R17 = 0 && R8579 = 0)) && (R8580 != 0 || R8579 = R8581 || (R17 = 0 && R8579 = 0)) && (R8582 != 0 || R8579 = R8583 || (R17 = 0 && R8579 = 0)) && (R18 = 0 || (R8602 = 0 && R8603 = 0)) && (R18 = 0 || (R8606 = 0 && R8607 = 0)) && (R18 = 0 || (R8608 = 0 && R8609 = 0)) && (R18 = 0 || (R8610 = 0 && R8611 = 0)) && (R18 = 0 || (R8618 = 0 && R8619 = 0)) && (R19 = 0 || (R8584 = 0 && R8585 = 0)) && (R19 = 0 || (R8586 = 0 && R8587 = 0)) && (R19 = 0 || (R8588 = 0 && R8589 = 0)) && (R19 = 0 || (R8590 = 0 && R8591 = 0)) && (R19 = 0 || (R8592 = 0 && R8593 = 0)) && (R19 = 0 || (R8594 = 0 && R8595 = 0)) && (R19 = 0 || (R8596 = 0 && R8597 = 0)) && (R19 = 0 || (R8598 = 0 && R8599 = 0)) && (R19 = 0 || (R8600 = 0 && R8601 = 0)) && (R48 + R5165 + R5162 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7709 + -1*R7707 - R53 = 0)) && (R48 + R5165 + R5162 = 0 || (R46 + R5163 + R5160 = 0 && R47 + R5164 + R5161 + -1*R7709 + -1*R7707 - R53 = 0)) && (R58 + R8559 + R8556 = 0 || (R56 + R8557 + R8554 = 0 && R57 + R8558 + R8555 = 0)) && (R58 + R8559 + R8556 = 0 || (R62 + R8562 + R8560 = 0 && R63 + R8563 + R8561 = 0)) && (R8564 = 0 || (R17 = 0 && R8579 = 0)) && (R8566 = 0 || (R17 = 0 && R8579 = 0)) && (R8568 = 0 || (R17 = 0 && R8579 = 0)) && (R8570 = 0 || (R17 = 0 && R8579 = 0)) && (R8572 = 0 || (R17 = 0 && R8579 = 0)) && (R8574 = 0 || (R17 = 0 && R8579 = 0)) && (R8576 = 0 || (R17 = 0 && R8579 = 0)) && (R8580 = 0 || (R17 = 0 && R8579 = 0)) && (R8582 = 0 || (R17 = 0 && R8579 = 0));
// End of Parikh automata intersection problem
