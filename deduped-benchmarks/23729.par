// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R14408 += 1, R14409 += 1 };
  s0 -> s1 [0, 65535] { R14409 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R14409 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R14411 += 1 };
  s0 -> s0 [0, 65535] { R14410 += 1, R14411 += 1 };
  s0 -> s2 [73, 73] { R14411 += 1 };
  s0 -> s3 [73, 73] { R14411 += 1 };
  s0 -> s1 [82, 65535] { R14411 += 1 };
  s1 -> s1 [0, 72] { R14411 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14411 += 1 };
  s1 -> s3 [73, 73] { R14411 += 1 };
  s1 -> s1 [82, 65535] { R14411 += 1 };
  s2 -> s2 [0, 73] { R14411 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R14411 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R14413 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R14412 += 1, R14413 += 1 };
  s0 -> s2 [73, 73] { R14413 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R14413 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R14413 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R14413 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14413 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R14413 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R14413 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14413 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R14415 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R14414 += 1, R14415 += 1 };
  s0 -> s2 [73, 73] { R14415 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R14415 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R14415 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R14415 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14415 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R14415 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R14415 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R14415 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R14417 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R14416 += 1, R14417 += 1 };
  s0 -> s2 [73, 73] { R14417 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R14417 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R14417 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R14417 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14417 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R14417 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R14417 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14417 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R14419 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14418 += 1, R14419 += 1 };
  s0 -> s2 [73, 73] { R14419 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R14419 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R14419 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R14419 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14419 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R14419 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R14419 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R14419 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R14421 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R14420 += 1, R14421 += 1 };
  s0 -> s2 [73, 73] { R14421 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R14421 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R14421 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R14421 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14421 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R14421 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R14421 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14421 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R14423 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R14422 += 1, R14423 += 1 };
  s0 -> s2 [73, 73] { R14423 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R14423 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R14423 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R14423 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14423 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R14423 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R14423 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14423 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R14425 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R14424 += 1, R14425 += 1 };
  s0 -> s2 [73, 73] { R14425 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R14425 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R14425 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R14425 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14425 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R14425 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R14425 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14425 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R14445 += 1 };
  s0 -> s0 [0, 65535] { R14444 += 1, R14445 += 1 };
  s0 -> s2 [73, 73] { R14445 += 1 };
  s0 -> s1 [74, 65535] { R14445 += 1 };
  s1 -> s1 [0, 72] { R14445 += 1 };
  s1 -> s2 [73, 73] { R14445 += 1 };
  s1 -> s1 [74, 65535] { R14445 += 1 };
  s2 -> s2 [0, 65535] { R14445 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R14446 += 1, R14447 += 1 };
  s0 -> s1 [0, 65535] { R14447 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14447 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R14449 += 1 };
  s0 -> s0 [0, 65535] { R14448 += 1, R14449 += 1 };
  s0 -> s2 [0, 65535] { R14449 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R14449 += 1 };
  s0 -> s1 [74, 65535] { R14449 += 1 };
  s1 -> s1 [0, 72] { R14449 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R14449 += 1 };
  s1 -> s1 [74, 65535] { R14449 += 1 };
  s2 -> s1 [0, 72] { R14449 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14449 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R14449 += 1 };
  s2 -> s1 [74, 65535] { R14449 += 1 };
  s3 -> s3 [0, 65535] { R14449 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R14451 += 1, R14389 += 1 };
  s0 -> s0 [0, 65535] { R14450 += 1, R14451 += 1 };
  s0 -> s2 [0, 65535] { R14451 += 1, R14388 += 1, R14389 += 1 };
  s0 -> s1 [74, 65535] { R14451 += 1, R14389 += 1 };
  s1 -> s1 [0, 72] { R14451 += 1, R14389 += 1 };
  s1 -> s1 [0, 65535] { R14451 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R14451 += 1, R14389 += 1 };
  s2 -> s1 [0, 72] { R14451 += 1, R14389 += 1 };
  s2 -> s2 [0, 65535] { R14451 += 1, R14388 += 1, R14389 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R14451 += 1, R14389 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R14453 += 1, R14390 += 1, R14391 += 1 };
  s0 -> s2 [0, 65535] { R14453 += 1, R14391 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R14452 += 1, R14453 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14453 += 1, R14390 += 1, R14391 += 1 };
  s1 -> s2 [0, 65535] { R14453 += 1, R14391 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14453 += 1, R14391 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R14453 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14453 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R14455 += 1, R14393 += 1 };
  s0 -> s0 [0, 65535] { R14454 += 1, R14455 += 1 };
  s0 -> s2 [0, 65535] { R14455 += 1, R14392 += 1, R14393 += 1 };
  s0 -> s1 [81, 65535] { R14455 += 1, R14393 += 1 };
  s1 -> s1 [0, 73] { R14455 += 1, R14393 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14455 += 1 };
  s1 -> s1 [81, 65535] { R14455 += 1, R14393 += 1 };
  s2 -> s1 [0, 73] { R14455 += 1, R14393 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14455 += 1, R14392 += 1, R14393 += 1 };
  s2 -> s1 [81, 65535] { R14455 += 1, R14393 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R14456 += 1, R14457 += 1 };
  s0 -> s1 [0, 65535] { R14457 += 1, R14395 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R14457 += 1, R14394 += 1, R14395 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14457 += 1, R14395 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R14457 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14457 += 1, R14395 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R14457 += 1, R14394 += 1, R14395 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14457 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R14459 += 1, R14397 += 1 };
  s0 -> s2 [0, 65535] { R14459 += 1, R14396 += 1, R14397 += 1 };
  s0 -> s3 [0, 65535] { R14459 += 1, R14397 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R14458 += 1, R14459 += 1 };
  s0 -> s1 [82, 65535] { R14459 += 1, R14397 += 1 };
  s1 -> s1 [0, 80] { R14459 += 1, R14397 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R14459 += 1 };
  s1 -> s1 [82, 65535] { R14459 += 1, R14397 += 1 };
  s2 -> s1 [0, 80] { R14459 += 1, R14397 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14459 += 1, R14396 += 1, R14397 += 1 };
  s2 -> s3 [0, 65535] { R14459 += 1, R14397 += 1, R69 += 1 };
  s2 -> s1 [82, 65535] { R14459 += 1, R14397 += 1 };
  s3 -> s1 [0, 80] { R14459 += 1, R14397 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14459 += 1, R14397 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R14459 += 1 };
  s3 -> s1 [82, 65535] { R14459 += 1, R14397 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14459 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R14461 += 1, R14399 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R14461 += 1, R14398 += 1, R14399 += 1 };
  s0 -> s3 [0, 65535] { R14461 += 1, R14399 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R14460 += 1, R14461 += 1 };
  s0 -> s1 [82, 65535] { R14461 += 1, R14399 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R14461 += 1, R14399 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R14461 += 1, R14399 += 1 };
  s1 -> s4 [0, 65535] { R14461 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R14461 += 1, R14399 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R14461 += 1, R14399 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R14461 += 1, R14398 += 1, R14399 += 1 };
  s2 -> s3 [0, 65535] { R14461 += 1, R14399 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R14461 += 1, R14399 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R14461 += 1, R14399 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R14461 += 1, R14399 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R14461 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R14461 += 1, R14399 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R14461 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R14462 += 1, R14463 += 1 };
  s0 -> s1 [0, 65535] { R14463 += 1, R14401 += 1 };
  s0 -> s2 [0, 65535] { R14463 += 1, R14400 += 1, R14401 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14463 += 1, R14401 += 1 };
  s1 -> s4 [0, 65535] { R14463 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14463 += 1, R14401 += 1 };
  s2 -> s2 [0, 65535] { R14463 += 1, R14400 += 1, R14401 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14463 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s0 -> s0 [0, 65535] { R14464 += 1, R14465 += 1 };
  s0 -> s2 [0, 65535] { R14465 += 1, R14402 += 1, R14403 += 1 };
  s0 -> s3 [0, 65535] { R14465 += 1, R14403 += 1, R14064 += 1, R14065 += 1 };
  s0 -> s4 [82, 82] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s0 -> s1 [83, 65535] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s1 -> s1 [0, 81] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s1 -> s4 [82, 82] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s1 -> s1 [83, 65535] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s2 -> s1 [0, 81] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s2 -> s2 [0, 65535] { R14465 += 1, R14402 += 1, R14403 += 1 };
  s2 -> s3 [0, 65535] { R14465 += 1, R14403 += 1, R14064 += 1, R14065 += 1 };
  s2 -> s4 [82, 82] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s2 -> s1 [83, 65535] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s3 -> s1 [0, 81] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s3 -> s3 [0, 65535] { R14465 += 1, R14403 += 1, R14064 += 1, R14065 += 1 };
  s3 -> s4 [82, 82] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s3 -> s1 [83, 65535] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14465 += 1, R14403 += 1, R14065 += 1 };
  s4 -> s6 [0, 65535] { R14465 += 1 };
  s4 -> s7 [0, 65535] { R14465 += 1, R14403 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14465 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R14465 += 1 };
  s7 -> s7 [0, 65535] { R14465 += 1, R14403 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14467 += 1, R14404 += 1, R14405 += 1 };
  s0 -> s2 [0, 65535] { R14467 += 1, R14405 += 1, R14070 += 1, R14071 += 1 };
  s0 -> s0 [0, 65535] { R14466 += 1, R14467 += 1 };
  s0 -> s3 [0, 65535] { R14467 += 1, R14405 += 1, R14069 += 1, R14070 += 1 };
  s1 -> s1 [0, 65535] { R14467 += 1, R14404 += 1, R14405 += 1 };
  s1 -> s2 [0, 65535] { R14467 += 1, R14405 += 1, R14070 += 1, R14071 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R14467 += 1, R14405 += 1, R14069 += 1, R14070 += 1 };
  s2 -> s2 [0, 65535] { R14467 += 1, R14405 += 1, R14070 += 1, R14071 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R14467 += 1 };
  s2 -> s6 [0, 65535] { R14467 += 1, R14405 += 1 };
  s3 -> s2 [0, 65535] { R14467 += 1, R14405 += 1, R14070 += 1, R14071 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14467 += 1, R14405 += 1, R14069 += 1, R14070 += 1 };
  s3 -> s5 [0, 65535] { R14467 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14467 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R14467 += 1 };
  s6 -> s6 [0, 65535] { R14467 += 1, R14405 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R14468 += 1, R14469 += 1 };
  s0 -> s1 [0, 65535] { R14469 += 1, R14407 += 1 };
  s0 -> s2 [0, 65535] { R14469 += 1, R14406 += 1, R14407 += 1 };
  s1 -> s4 [0, 65535] { R14469 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14469 += 1, R14407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14469 += 1, R14407 += 1 };
  s2 -> s2 [0, 65535] { R14469 += 1, R14406 += 1, R14407 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14469 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R14471 += 1, R14427 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R14471 += 1, R14426 += 1, R14427 += 1 };
  s0 -> s0 [0, 65535] { R14470 += 1, R14471 += 1 };
  s1 -> s1 [0, 65535] { R14471 += 1, R14427 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14471 += 1 };
  s2 -> s1 [0, 65535] { R14471 += 1, R14427 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14471 += 1, R14426 += 1, R14427 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14471 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R14473 += 1, R14429 += 1 };
  s0 -> s2 [0, 65535] { R14473 += 1, R14428 += 1, R14429 += 1 };
  s0 -> s0 [0, 65535] { R14472 += 1, R14473 += 1 };
  s0 -> s3 [73, 73] { R14473 += 1, R14429 += 1 };
  s0 -> s4 [73, 73] { R14473 += 1, R14429 += 1 };
  s0 -> s5 [81, 81] { R14473 += 1, R14429 += 1 };
  s0 -> s1 [82, 65535] { R14473 += 1, R14429 += 1 };
  s1 -> s1 [0, 72] { R14473 += 1, R14429 += 1 };
  s1 -> s3 [73, 73] { R14473 += 1, R14429 += 1 };
  s1 -> s4 [73, 73] { R14473 += 1, R14429 += 1 };
  s1 -> s5 [81, 81] { R14473 += 1, R14429 += 1 };
  s1 -> s1 [82, 65535] { R14473 += 1, R14429 += 1 };
  s2 -> s1 [0, 72] { R14473 += 1, R14429 += 1 };
  s2 -> s2 [0, 65535] { R14473 += 1, R14428 += 1, R14429 += 1 };
  s2 -> s3 [73, 73] { R14473 += 1, R14429 += 1 };
  s2 -> s4 [73, 73] { R14473 += 1, R14429 += 1 };
  s2 -> s5 [81, 81] { R14473 += 1, R14429 += 1 };
  s2 -> s1 [82, 65535] { R14473 += 1, R14429 += 1 };
  s3 -> s3 [0, 73] { R14473 += 1, R14429 += 1 };
  s3 -> s7 [81, 81] { R14473 += 1, R14429 += 1 };
  s3 -> s3 [82, 65535] { R14473 += 1, R14429 += 1 };
  s5 -> s5 [0, 72] { R14473 += 1, R14429 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14473 += 1 };
  s5 -> s7 [73, 73] { R14473 += 1, R14429 += 1 };
  s5 -> s8 [73, 73] { R14473 += 1, R14429 += 1 };
  s5 -> s5 [81, 65535] { R14473 += 1, R14429 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R14473 += 1, R14429 += 1 };
  s7 -> s7 [0, 65535] { R14473 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R14473 += 1, R14429 += 1 };
  s8 -> s8 [0, 65535] { R14473 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R14475 += 1, R14431 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R14475 += 1, R14430 += 1, R14431 += 1 };
  s0 -> s0 [0, 65535] { R14474 += 1, R14475 += 1 };
  s0 -> s3 [73, 73] { R14475 += 1, R14431 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R14475 += 1, R14431 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R14475 += 1, R14431 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R14475 += 1, R14431 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14475 += 1 };
  s1 -> s3 [73, 73] { R14475 += 1, R14431 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R14475 += 1, R14431 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R14475 += 1, R14431 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R14475 += 1, R14431 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R14475 += 1, R14430 += 1, R14431 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R14475 += 1, R14431 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R14475 += 1, R14431 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R14475 += 1, R14431 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R14475 += 1 };
  s3 -> s3 [0, 65535] { R14475 += 1, R14431 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14475 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14475 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R14477 += 1, R14433 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R14477 += 1, R14432 += 1, R14433 += 1 };
  s0 -> s0 [0, 65535] { R14476 += 1, R14477 += 1 };
  s0 -> s3 [73, 73] { R14477 += 1, R14433 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R14477 += 1, R14433 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R14477 += 1, R14433 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R14477 += 1, R14433 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R14477 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R14477 += 1, R14433 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R14477 += 1, R14433 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R14477 += 1, R14433 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R14477 += 1, R14433 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14477 += 1, R14432 += 1, R14433 += 1 };
  s2 -> s3 [73, 73] { R14477 += 1, R14433 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R14477 += 1, R14433 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R14477 += 1, R14433 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14477 += 1, R14433 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R14477 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14477 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14477 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R14479 += 1, R14434 += 1, R14435 += 1 };
  s0 -> s0 [0, 65535] { R14478 += 1, R14479 += 1 };
  s0 -> s3 [73, 73] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14479 += 1 };
  s1 -> s3 [73, 73] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R14479 += 1, R14434 += 1, R14435 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R14479 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14479 += 1 };
  s4 -> s4 [0, 65535] { R14479 += 1, R14435 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14479 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [0, 72] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s0 [0, 65535] { R14480 += 1, R14481 += 1 };
  s0 -> s3 [0, 65535] { R14481 += 1, R14436 += 1, R14437 += 1 };
  s0 -> s4 [73, 73] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s5 [73, 73] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s6 [73, 73] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s7 [73, 73] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s1 [74, 65535] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [74, 65535] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s1 [0, 72] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [0, 72] { R14481 += 1, R14437 += 1 };
  s1 -> s5 [73, 73] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s6 [73, 73] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s12 [73, 73] { R14481 += 1, R14437 += 1 };
  s1 -> s8 [73, 73] { R14481 += 1, R14437 += 1 };
  s1 -> s1 [74, 65535] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [74, 65535] { R14481 += 1, R14437 += 1 };
  s2 -> s1 [0, 72] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [0, 72] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s4 [73, 73] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s5 [73, 73] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s6 [73, 73] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s7 [73, 73] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s1 [74, 65535] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [74, 65535] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [0, 72] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [0, 72] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s3 [0, 65535] { R14481 += 1, R14436 += 1, R14437 += 1 };
  s3 -> s4 [73, 73] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s5 [73, 73] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s6 [73, 73] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s7 [73, 73] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [74, 65535] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [74, 65535] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s4 [0, 65535] { R14481 += 1, R14437 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s5 [0, 65535] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s5 -> s5 [0, 65535] { R14481 += 1, R14437 += 1, R10247 += 1, R10248 += 1 };
  s5 -> s8 [0, 65535] { R14481 += 1, R14437 += 1 };
  s8 -> s8 [0, 65535] { R14481 += 1, R14437 += 1 };
  s8 -> s9 [0, 65535] { R14481 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R14481 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R14481 += 1, R14437 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R14481 += 1 };
  s11 -> s12 [73, 73] { R14481 += 1, R14437 += 1 };
  s11 -> s8 [73, 73] { R14481 += 1, R14437 += 1 };
  s11 -> s11 [74, 65535] { R14481 += 1, R14437 += 1 };
  s12 -> s12 [0, 65535] { R14481 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s0 -> s0 [0, 65535] { R14482 += 1, R14483 += 1 };
  s0 -> s2 [0, 65535] { R14483 += 1, R14438 += 1, R14439 += 1 };
  s0 -> s3 [73, 73] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s0 -> s4 [73, 73] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s0 -> s1 [74, 65535] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s1 [0, 72] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R14483 += 1 };
  s1 -> s3 [73, 73] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s4 [73, 73] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s1 [74, 65535] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s1 [0, 72] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s2 [0, 65535] { R14483 += 1, R14438 += 1, R14439 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s4 [73, 73] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s1 [74, 65535] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s3 -> s3 [0, 65535] { R14483 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14483 += 1, R14439 += 1, R14062 += 1, R14063 += 1 };
  s4 -> s5 [0, 65535] { R14483 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14483 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s0 -> s2 [0, 65535] { R14485 += 1, R14440 += 1, R14441 += 1 };
  s0 -> s0 [0, 65535] { R14484 += 1, R14485 += 1 };
  s0 -> s3 [73, 73] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s0 -> s4 [73, 73] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s0 -> s1 [74, 65535] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s1 -> s1 [0, 72] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s1 -> s1 [0, 65535] { R14485 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s1 -> s4 [73, 73] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s1 -> s1 [74, 65535] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s2 -> s1 [0, 72] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s2 -> s2 [0, 65535] { R14485 += 1, R14440 += 1, R14441 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s2 -> s4 [73, 73] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s2 -> s1 [74, 65535] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s3 -> s3 [0, 65535] { R14485 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14485 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14485 += 1, R14441 += 1, R14066 += 1, R14067 += 1 };
  s5 -> s5 [0, 65535] { R14485 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s0 -> s2 [0, 72] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s0 -> s3 [0, 65535] { R14487 += 1, R14442 += 1, R14443 += 1 };
  s0 -> s0 [0, 65535] { R14486 += 1, R14487 += 1 };
  s0 -> s4 [73, 73] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s0 -> s5 [73, 73] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s0 -> s6 [73, 73] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s0 -> s7 [73, 73] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s0 -> s2 [74, 80] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s0 -> s1 [74, 65535] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s0 -> s8 [81, 81] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s0 -> s2 [83, 65535] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s1 -> s1 [0, 72] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s1 -> s2 [0, 72] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s1 -> s4 [73, 73] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s1 -> s5 [73, 73] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s1 -> s6 [73, 73] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s1 -> s7 [73, 73] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s1 -> s2 [74, 80] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s1 -> s1 [74, 65535] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s1 -> s8 [81, 81] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s1 -> s2 [83, 65535] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s2 -> s2 [0, 72] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s2 -> s5 [73, 73] { R14487 += 1, R14443 += 1 };
  s2 -> s6 [73, 73] { R14487 += 1, R14443 += 1 };
  s2 -> s2 [74, 80] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s2 -> s2 [74, 65535] { R14487 += 1, R14443 += 1 };
  s2 -> s8 [81, 81] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s2 -> s2 [83, 65535] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s3 -> s1 [0, 72] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s3 -> s2 [0, 72] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s3 -> s3 [0, 65535] { R14487 += 1, R14442 += 1, R14443 += 1 };
  s3 -> s4 [73, 73] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s3 -> s5 [73, 73] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s3 -> s6 [73, 73] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s3 -> s7 [73, 73] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s3 -> s2 [74, 80] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s3 -> s1 [74, 65535] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s3 -> s8 [81, 81] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s3 -> s2 [83, 65535] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s5 -> s5 [0, 80] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s5 -> s5 [0, 65535] { R14487 += 1, R14443 += 1 };
  s5 -> s10 [81, 81] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s5 -> s5 [83, 65535] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s7 -> s5 [0, 80] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s7 -> s7 [0, 65535] { R14487 += 1, R14443 += 1, R14384 += 1, R14385 += 1 };
  s7 -> s10 [81, 81] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s7 -> s5 [83, 65535] { R14487 += 1, R14443 += 1, R14385 += 1 };
  s8 -> s8 [0, 72] { R14487 += 1, R14443 += 1 };
  s8 -> s8 [0, 65535] { R14487 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R14487 += 1, R14443 += 1 };
  s8 -> s11 [73, 73] { R14487 += 1, R14443 += 1 };
  s8 -> s8 [74, 65535] { R14487 += 1, R14443 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R14487 += 1, R14443 += 1 };
  s10 -> s12 [0, 65535] { R14487 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R14487 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R14487 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R14403 && R2 = R14487 && R20 - R14487 = -1 && R21 = R14487 && R22 - R14487 = -1 && R23 = R14487 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14065 + -1*R14063 - R53 = 0 && R52 + R14064 + R14062 = 0 && R14402 = 0 && R14428 = 0 && R14429 = 0 && R14436 = 0 && R14437 = 0 && R14442 = 0 && R14443 = 0 && R14444 = 0 && R14445 = R14487 && R14446 = 0 && R14447 = R14487 && R14448 = 0 && R14449 = R14487 && R14450 = 0 && R14451 = R14487 && R14452 = 0 && R14453 = R14487 && R14454 = 0 && R14455 = R14487 && R14456 = 0 && R14457 = R14487 && R14458 = 0 && R14459 = R14487 && R14460 = 0 && R14461 = R14487 && R14462 = 0 && R14463 = R14487 && R14464 = 0 && R14465 = R14487 && R14466 = 0 && R14467 = R14487 && R14468 = 0 && R14469 = R14487 && R14470 = 0 && R14471 = R14487 && R14472 = 0 && R14473 = R14487 && R14474 = 0 && R14475 = R14487 && R14476 = 0 && R14477 = R14487 && R14478 = 0 && R14479 = R14487 && R14480 = 0 && R14481 = R14487 && R14482 = 0 && R14483 = R14487 && R14484 = 0 && R14485 = R14487 && R14486 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14065 + -1*R14063 - R53 < 1 && -1 < R14403 && 0 < R14487 && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R14065 + -1*R14063 - R53 = 0 || R53 + R14065 + R14063 < 1) && (R42 + R72 + R70 = 0 || R53 + R14065 + R14063 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R14065 + -1*R14063 - R53 = 0 || R53 + R14065 + R14063 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R14065 + R14063 < 1))) && (R14388 != 0 || R14389 = R14403 || (R17 = 0 && R14403 = 0)) && (R14390 != 0 || R14391 = R14403 || (R17 = 0 && R14403 = 0)) && (R14392 != 0 || R14393 = R14403 || (R17 = 0 && R14403 = 0)) && (R14394 != 0 || R14395 = R14403 || (R17 = 0 && R14403 = 0)) && (R14396 != 0 || R14397 = R14403 || (R17 = 0 && R14403 = 0)) && (R14398 != 0 || R14399 = R14403 || (R17 = 0 && R14403 = 0)) && (R14400 != 0 || R14401 = R14403 || (R17 = 0 && R14403 = 0)) && (R14404 != 0 || R14403 = R14405 || (R17 = 0 && R14403 = 0)) && (R14406 != 0 || R14403 = R14407 || (R17 = 0 && R14403 = 0)) && (R18 = 0 || (R14426 = 0 && R14427 = 0)) && (R18 = 0 || (R14430 = 0 && R14431 = 0)) && (R18 = 0 || (R14432 = 0 && R14433 = 0)) && (R18 = 0 || (R14434 = 0 && R14435 = 0)) && (R18 = 0 || (R14438 = 0 && R14439 = 0)) && (R18 = 0 || (R14440 = 0 && R14441 = 0)) && (R19 = 0 || (R14408 = 0 && R14409 = 0)) && (R19 = 0 || (R14410 = 0 && R14411 = 0)) && (R19 = 0 || (R14412 = 0 && R14413 = 0)) && (R19 = 0 || (R14414 = 0 && R14415 = 0)) && (R19 = 0 || (R14416 = 0 && R14417 = 0)) && (R19 = 0 || (R14418 = 0 && R14419 = 0)) && (R19 = 0 || (R14420 = 0 && R14421 = 0)) && (R19 = 0 || (R14422 = 0 && R14423 = 0)) && (R19 = 0 || (R14424 = 0 && R14425 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R14065 + -1*R14063 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R14065 + -1*R14063 - R53 = 0)) && (R58 + R14071 + R14068 = 0 || (R56 + R14069 + R14066 = 0 && R57 + R14070 + R14067 = 0)) && (R58 + R14071 + R14068 = 0 || (R62 + R14386 + R14384 = 0 && R63 + R14387 + R14385 = 0)) && (R14388 = 0 || (R17 = 0 && R14403 = 0)) && (R14390 = 0 || (R17 = 0 && R14403 = 0)) && (R14392 = 0 || (R17 = 0 && R14403 = 0)) && (R14394 = 0 || (R17 = 0 && R14403 = 0)) && (R14396 = 0 || (R17 = 0 && R14403 = 0)) && (R14398 = 0 || (R17 = 0 && R14403 = 0)) && (R14400 = 0 || (R17 = 0 && R14403 = 0)) && (R14404 = 0 || (R17 = 0 && R14403 = 0)) && (R14406 = 0 || (R17 = 0 && R14403 = 0));
// End of Parikh automata intersection problem
