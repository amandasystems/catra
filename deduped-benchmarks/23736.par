// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R4, R40, R42, R43, R46, R47, R4738, R4739, R4740, R4741, R4742, R4743, R48, R5056, R5057, R5058, R5059, R5060, R5061, R5062, R5063, R5064, R5065, R5066, R5067, R5068, R5069, R5070, R5071, R5072, R5073, R5074, R5075, R5076, R5077, R5078, R5079, R5080, R5081, R5082, R5083, R5084, R5085, R5086, R5087, R5088, R5089, R5090, R5091, R5092, R5093, R5094, R5095, R5096, R5097, R5098, R5099, R5100, R5101, R5102, R5103, R5104, R5105, R5106, R5107, R5108, R5109, R5110, R5111, R5112, R5113, R5114, R5115, R5116, R5117, R5118, R5119, R5120, R5121, R5122, R5123, R5124, R5125, R5126, R5127, R5128, R5129, R5130, R5131, R5132, R5133, R5134, R5135, R5136, R5137, R5138, R5139, R5140, R5141, R5142, R5143, R5144, R5145, R5146, R5147, R5148, R5149, R5150, R5151, R5152, R5153, R5154, R5155, R5156, R5157, R5158, R5159, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R5080 += 1, R5081 += 1 };
  s0 -> s1 [0, 65535] { R5081 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5081 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R5083 += 1 };
  s0 -> s0 [0, 65535] { R5082 += 1, R5083 += 1 };
  s0 -> s2 [73, 73] { R5083 += 1 };
  s0 -> s3 [73, 73] { R5083 += 1 };
  s0 -> s1 [82, 65535] { R5083 += 1 };
  s1 -> s1 [0, 72] { R5083 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5083 += 1 };
  s1 -> s3 [73, 73] { R5083 += 1 };
  s1 -> s1 [82, 65535] { R5083 += 1 };
  s2 -> s2 [0, 73] { R5083 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R5083 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R5085 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R5084 += 1, R5085 += 1 };
  s0 -> s2 [73, 73] { R5085 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R5085 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R5085 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R5085 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5085 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R5085 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R5085 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5085 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R5087 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R5086 += 1, R5087 += 1 };
  s0 -> s2 [73, 73] { R5087 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R5087 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R5087 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R5087 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5087 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R5087 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R5087 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5087 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R5089 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R5088 += 1, R5089 += 1 };
  s0 -> s2 [73, 73] { R5089 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R5089 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R5089 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R5089 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5089 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R5089 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R5089 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R5089 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R5091 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5090 += 1, R5091 += 1 };
  s0 -> s2 [73, 73] { R5091 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R5091 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R5091 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R5091 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5091 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R5091 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R5091 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R5091 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R5093 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R5092 += 1, R5093 += 1 };
  s0 -> s2 [73, 73] { R5093 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R5093 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R5093 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R5093 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5093 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R5093 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R5093 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5093 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R5095 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R5094 += 1, R5095 += 1 };
  s0 -> s2 [73, 73] { R5095 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R5095 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R5095 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R5095 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5095 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R5095 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R5095 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R5095 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R5097 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R5096 += 1, R5097 += 1 };
  s0 -> s2 [73, 73] { R5097 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R5097 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R5097 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R5097 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5097 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R5097 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R5097 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5097 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R5117 += 1 };
  s0 -> s0 [0, 65535] { R5116 += 1, R5117 += 1 };
  s0 -> s2 [73, 73] { R5117 += 1 };
  s0 -> s1 [74, 65535] { R5117 += 1 };
  s1 -> s1 [0, 72] { R5117 += 1 };
  s1 -> s2 [73, 73] { R5117 += 1 };
  s1 -> s1 [74, 65535] { R5117 += 1 };
  s2 -> s2 [0, 65535] { R5117 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R5119 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R5118 += 1, R5119 += 1 };
  s1 -> s1 [0, 65535] { R5119 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R5121 += 1 };
  s0 -> s0 [0, 65535] { R5120 += 1, R5121 += 1 };
  s0 -> s2 [0, 65535] { R5121 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R5121 += 1 };
  s0 -> s1 [74, 65535] { R5121 += 1 };
  s1 -> s1 [0, 72] { R5121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R5121 += 1 };
  s1 -> s1 [74, 65535] { R5121 += 1 };
  s2 -> s1 [0, 72] { R5121 += 1 };
  s2 -> s2 [0, 65535] { R5121 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R5121 += 1 };
  s2 -> s1 [74, 65535] { R5121 += 1 };
  s3 -> s3 [0, 65535] { R5121 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R5123 += 1, R5061 += 1 };
  s0 -> s0 [0, 65535] { R5122 += 1, R5123 += 1 };
  s0 -> s2 [0, 65535] { R5123 += 1, R5060 += 1, R5061 += 1 };
  s0 -> s1 [74, 65535] { R5123 += 1, R5061 += 1 };
  s1 -> s1 [0, 72] { R5123 += 1, R5061 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5123 += 1 };
  s1 -> s1 [74, 65535] { R5123 += 1, R5061 += 1 };
  s2 -> s1 [0, 72] { R5123 += 1, R5061 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5123 += 1, R5060 += 1, R5061 += 1 };
  s2 -> s1 [74, 65535] { R5123 += 1, R5061 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R5125 += 1, R5062 += 1, R5063 += 1 };
  s0 -> s2 [0, 65535] { R5125 += 1, R5063 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R5124 += 1, R5125 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5125 += 1, R5062 += 1, R5063 += 1 };
  s1 -> s2 [0, 65535] { R5125 += 1, R5063 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5125 += 1, R5063 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R5125 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5125 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R5127 += 1, R5065 += 1 };
  s0 -> s2 [0, 65535] { R5127 += 1, R5064 += 1, R5065 += 1 };
  s0 -> s0 [0, 65535] { R5126 += 1, R5127 += 1 };
  s0 -> s1 [81, 65535] { R5127 += 1, R5065 += 1 };
  s1 -> s1 [0, 73] { R5127 += 1, R5065 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5127 += 1 };
  s1 -> s1 [81, 65535] { R5127 += 1, R5065 += 1 };
  s2 -> s1 [0, 73] { R5127 += 1, R5065 += 1 };
  s2 -> s2 [0, 65535] { R5127 += 1, R5064 += 1, R5065 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R5127 += 1, R5065 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R5128 += 1, R5129 += 1 };
  s0 -> s1 [0, 65535] { R5129 += 1, R5067 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R5129 += 1, R5066 += 1, R5067 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5129 += 1, R5067 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R5129 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5129 += 1, R5067 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R5129 += 1, R5066 += 1, R5067 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5129 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R5131 += 1, R5069 += 1 };
  s0 -> s2 [0, 65535] { R5131 += 1, R5069 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R5131 += 1, R5068 += 1, R5069 += 1 };
  s0 -> s0 [0, 65535] { R5130 += 1, R5131 += 1 };
  s0 -> s1 [82, 65535] { R5131 += 1, R5069 += 1 };
  s1 -> s1 [0, 80] { R5131 += 1, R5069 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5131 += 1 };
  s1 -> s1 [82, 65535] { R5131 += 1, R5069 += 1 };
  s2 -> s1 [0, 80] { R5131 += 1, R5069 += 1 };
  s2 -> s2 [0, 65535] { R5131 += 1, R5069 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R5131 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R5131 += 1, R5069 += 1 };
  s3 -> s1 [0, 80] { R5131 += 1, R5069 += 1 };
  s3 -> s2 [0, 65535] { R5131 += 1, R5069 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R5131 += 1, R5068 += 1, R5069 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R5131 += 1, R5069 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5131 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R5133 += 1, R5071 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R5133 += 1, R5071 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R5132 += 1, R5133 += 1 };
  s0 -> s3 [0, 65535] { R5133 += 1, R5070 += 1, R5071 += 1 };
  s0 -> s1 [82, 65535] { R5133 += 1, R5071 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R5133 += 1, R5071 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R5133 += 1, R5071 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5133 += 1 };
  s1 -> s1 [82, 65535] { R5133 += 1, R5071 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R5133 += 1, R5071 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R5133 += 1, R5071 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5133 += 1 };
  s2 -> s1 [82, 65535] { R5133 += 1, R5071 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R5133 += 1, R5071 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R5133 += 1, R5071 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5133 += 1, R5070 += 1, R5071 += 1 };
  s3 -> s1 [82, 65535] { R5133 += 1, R5071 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5133 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R5135 += 1, R5073 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R5134 += 1, R5135 += 1 };
  s0 -> s2 [0, 65535] { R5135 += 1, R5073 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R5135 += 1, R5072 += 1, R5073 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5135 += 1, R5073 += 1, R77 += 1, R78 += 1 };
  s1 -> s2 [0, 65535] { R5135 += 1, R5073 += 1, R78 += 1, R79 += 1 };
  s1 -> s5 [0, 65535] { R5135 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5135 += 1, R5073 += 1, R78 += 1, R79 += 1 };
  s2 -> s5 [0, 65535] { R5135 += 1 };
  s2 -> s6 [0, 65535] { R5135 += 1, R5073 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5135 += 1, R5073 += 1, R77 += 1, R78 += 1 };
  s3 -> s2 [0, 65535] { R5135 += 1, R5073 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R5135 += 1, R5072 += 1, R5073 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5135 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R5135 += 1 };
  s6 -> s6 [0, 65535] { R5135 += 1, R5073 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s0 -> s2 [0, 65535] { R5137 += 1, R5075 += 1, R3892 += 1, R3893 += 1 };
  s0 -> s3 [0, 65535] { R5137 += 1, R5074 += 1, R5075 += 1 };
  s0 -> s0 [0, 65535] { R5136 += 1, R5137 += 1 };
  s0 -> s4 [82, 82] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s0 -> s1 [83, 65535] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s1 -> s1 [0, 81] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s1 -> s4 [82, 82] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s1 -> s1 [83, 65535] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s2 -> s1 [0, 81] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s2 -> s2 [0, 65535] { R5137 += 1, R5075 += 1, R3892 += 1, R3893 += 1 };
  s2 -> s4 [82, 82] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s2 -> s1 [83, 65535] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s3 -> s1 [0, 81] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s3 -> s2 [0, 65535] { R5137 += 1, R5075 += 1, R3892 += 1, R3893 += 1 };
  s3 -> s3 [0, 65535] { R5137 += 1, R5074 += 1, R5075 += 1 };
  s3 -> s4 [82, 82] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s3 -> s1 [83, 65535] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s4 -> s5 [0, 65535] { R5137 += 1, R5075 += 1 };
  s4 -> s6 [0, 65535] { R5137 += 1 };
  s4 -> s4 [0, 65535] { R5137 += 1, R5075 += 1, R3893 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R5137 += 1, R5075 += 1 };
  s5 -> s6 [0, 65535] { R5137 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R5137 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R5139 += 1, R5077 += 1 };
  s0 -> s0 [0, 65535] { R5138 += 1, R5139 += 1 };
  s0 -> s2 [0, 65535] { R5139 += 1, R5076 += 1, R5077 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5139 += 1 };
  s1 -> s1 [0, 65535] { R5139 += 1, R5077 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5139 += 1, R5077 += 1 };
  s2 -> s2 [0, 65535] { R5139 += 1, R5076 += 1, R5077 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5139 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R5141 += 1, R5079 += 1 };
  s0 -> s2 [0, 65535] { R5141 += 1, R5078 += 1, R5079 += 1 };
  s0 -> s0 [0, 65535] { R5140 += 1, R5141 += 1 };
  s1 -> s4 [0, 65535] { R5141 += 1 };
  s1 -> s1 [0, 65535] { R5141 += 1, R5079 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5141 += 1, R5079 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5141 += 1, R5078 += 1, R5079 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5141 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R5142 += 1, R5143 += 1 };
  s0 -> s1 [0, 65535] { R5143 += 1, R5098 += 1, R5099 += 1 };
  s0 -> s2 [0, 65535] { R5143 += 1, R5099 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5143 += 1, R5098 += 1, R5099 += 1 };
  s1 -> s2 [0, 65535] { R5143 += 1, R5099 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5143 += 1, R5099 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R5143 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5143 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R5145 += 1, R5101 += 1 };
  s0 -> s0 [0, 65535] { R5144 += 1, R5145 += 1 };
  s0 -> s2 [0, 65535] { R5145 += 1, R5100 += 1, R5101 += 1 };
  s0 -> s3 [73, 73] { R5145 += 1, R5101 += 1 };
  s0 -> s4 [73, 73] { R5145 += 1, R5101 += 1 };
  s0 -> s5 [81, 81] { R5145 += 1, R5101 += 1 };
  s0 -> s1 [82, 65535] { R5145 += 1, R5101 += 1 };
  s1 -> s1 [0, 72] { R5145 += 1, R5101 += 1 };
  s1 -> s3 [73, 73] { R5145 += 1, R5101 += 1 };
  s1 -> s4 [73, 73] { R5145 += 1, R5101 += 1 };
  s1 -> s5 [81, 81] { R5145 += 1, R5101 += 1 };
  s1 -> s1 [82, 65535] { R5145 += 1, R5101 += 1 };
  s2 -> s1 [0, 72] { R5145 += 1, R5101 += 1 };
  s2 -> s2 [0, 65535] { R5145 += 1, R5100 += 1, R5101 += 1 };
  s2 -> s3 [73, 73] { R5145 += 1, R5101 += 1 };
  s2 -> s4 [73, 73] { R5145 += 1, R5101 += 1 };
  s2 -> s5 [81, 81] { R5145 += 1, R5101 += 1 };
  s2 -> s1 [82, 65535] { R5145 += 1, R5101 += 1 };
  s3 -> s3 [0, 73] { R5145 += 1, R5101 += 1 };
  s3 -> s7 [81, 81] { R5145 += 1, R5101 += 1 };
  s3 -> s3 [82, 65535] { R5145 += 1, R5101 += 1 };
  s5 -> s5 [0, 72] { R5145 += 1, R5101 += 1 };
  s5 -> s5 [0, 65535] { R5145 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R5145 += 1, R5101 += 1 };
  s5 -> s8 [73, 73] { R5145 += 1, R5101 += 1 };
  s5 -> s5 [81, 65535] { R5145 += 1, R5101 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R5145 += 1, R5101 += 1 };
  s7 -> s7 [0, 65535] { R5145 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R5145 += 1, R5101 += 1 };
  s8 -> s8 [0, 65535] { R5145 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R5147 += 1, R5103 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R5147 += 1, R5102 += 1, R5103 += 1 };
  s0 -> s0 [0, 65535] { R5146 += 1, R5147 += 1 };
  s0 -> s3 [73, 73] { R5147 += 1, R5103 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R5147 += 1, R5103 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R5147 += 1, R5103 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R5147 += 1, R5103 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R5147 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R5147 += 1, R5103 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R5147 += 1, R5103 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R5147 += 1, R5103 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R5147 += 1, R5103 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R5147 += 1, R5102 += 1, R5103 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R5147 += 1, R5103 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R5147 += 1, R5103 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R5147 += 1, R5103 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R5147 += 1, R5103 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R5147 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5147 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5147 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R5149 += 1, R5105 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R5149 += 1, R5104 += 1, R5105 += 1 };
  s0 -> s0 [0, 65535] { R5148 += 1, R5149 += 1 };
  s0 -> s3 [73, 73] { R5149 += 1, R5105 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R5149 += 1, R5105 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R5149 += 1, R5105 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R5149 += 1, R5105 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R5149 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R5149 += 1, R5105 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R5149 += 1, R5105 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R5149 += 1, R5105 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R5149 += 1, R5105 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R5149 += 1, R5104 += 1, R5105 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R5149 += 1, R5105 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R5149 += 1, R5105 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R5149 += 1, R5105 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R5149 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5149 += 1 };
  s4 -> s4 [0, 65535] { R5149 += 1, R5105 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5149 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R5150 += 1, R5151 += 1 };
  s0 -> s2 [0, 65535] { R5151 += 1, R5106 += 1, R5107 += 1 };
  s0 -> s3 [73, 73] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5151 += 1 };
  s1 -> s3 [73, 73] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5151 += 1, R5106 += 1, R5107 += 1 };
  s2 -> s3 [73, 73] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5151 += 1, R5107 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R5151 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5151 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5151 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R5152 += 1, R5153 += 1 };
  s0 -> s2 [0, 65535] { R5153 += 1, R5108 += 1, R5109 += 1 };
  s0 -> s3 [73, 73] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5153 += 1 };
  s1 -> s3 [73, 73] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5153 += 1, R5108 += 1, R5109 += 1 };
  s2 -> s3 [73, 73] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5153 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5153 += 1 };
  s4 -> s4 [0, 65535] { R5153 += 1, R5109 += 1, R74 += 1, R75 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5153 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s0 [0, 65535] { R5154 += 1, R5155 += 1 };
  s0 -> s2 [0, 65535] { R5155 += 1, R5110 += 1, R5111 += 1 };
  s0 -> s3 [73, 73] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s4 [73, 73] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [74, 65535] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 72] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 65535] { R5155 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s4 [73, 73] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [74, 65535] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s1 [0, 72] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5155 += 1, R5110 += 1, R5111 += 1 };
  s2 -> s3 [73, 73] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [73, 73] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s1 [74, 65535] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R5155 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5155 += 1 };
  s4 -> s4 [0, 65535] { R5155 += 1, R5111 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5155 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s0 -> s2 [0, 72] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s0 -> s3 [0, 65535] { R5157 += 1, R5112 += 1, R5113 += 1 };
  s0 -> s0 [0, 65535] { R5156 += 1, R5157 += 1 };
  s0 -> s4 [73, 73] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s0 -> s5 [73, 73] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s0 -> s6 [73, 73] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s0 -> s7 [73, 73] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s0 -> s1 [74, 65535] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s0 -> s2 [74, 65535] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s1 -> s11 [0, 72] { R5157 += 1, R5113 += 1 };
  s1 -> s1 [0, 72] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s1 -> s12 [73, 73] { R5157 += 1, R5113 += 1 };
  s1 -> s5 [73, 73] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s1 -> s8 [73, 73] { R5157 += 1, R5113 += 1 };
  s1 -> s6 [73, 73] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s1 -> s11 [74, 65535] { R5157 += 1, R5113 += 1 };
  s1 -> s1 [74, 65535] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s1 [0, 72] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s2 [0, 72] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s2 -> s4 [73, 73] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s2 -> s5 [73, 73] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s6 [73, 73] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s7 [73, 73] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s2 -> s1 [74, 65535] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s2 [74, 65535] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s3 -> s1 [0, 72] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s3 -> s2 [0, 72] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s3 -> s3 [0, 65535] { R5157 += 1, R5112 += 1, R5113 += 1 };
  s3 -> s4 [73, 73] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s3 -> s5 [73, 73] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s3 -> s6 [73, 73] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s3 -> s7 [73, 73] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s3 -> s1 [74, 65535] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s3 -> s2 [74, 65535] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s6 -> s8 [0, 65535] { R5157 += 1, R5113 += 1 };
  s6 -> s6 [0, 65535] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s7 -> s6 [0, 65535] { R5157 += 1, R5113 += 1, R4739 += 1, R4740 += 1 };
  s7 -> s7 [0, 65535] { R5157 += 1, R5113 += 1, R4738 += 1, R4739 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R5157 += 1, R5113 += 1 };
  s8 -> s10 [0, 65535] { R5157 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5157 += 1 };
  s11 -> s11 [0, 72] { R5157 += 1, R5113 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R5157 += 1 };
  s11 -> s12 [73, 73] { R5157 += 1, R5113 += 1 };
  s11 -> s8 [73, 73] { R5157 += 1, R5113 += 1 };
  s11 -> s11 [74, 65535] { R5157 += 1, R5113 += 1 };
  s12 -> s12 [0, 65535] { R5157 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s0 -> s2 [0, 72] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s0 -> s0 [0, 65535] { R5158 += 1, R5159 += 1 };
  s0 -> s3 [0, 65535] { R5159 += 1, R5114 += 1, R5115 += 1 };
  s0 -> s4 [73, 73] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s0 -> s5 [73, 73] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s0 -> s6 [73, 73] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s0 -> s7 [73, 73] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s0 -> s1 [74, 80] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s0 -> s2 [74, 65535] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s0 -> s8 [81, 81] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s0 -> s1 [83, 65535] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s1 -> s1 [0, 72] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s1 -> s5 [73, 73] { R5159 += 1, R5115 += 1 };
  s1 -> s7 [73, 73] { R5159 += 1, R5115 += 1 };
  s1 -> s1 [74, 80] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s1 -> s1 [74, 65535] { R5159 += 1, R5115 += 1 };
  s1 -> s8 [81, 81] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s1 -> s1 [83, 65535] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s2 -> s1 [0, 72] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s2 -> s2 [0, 72] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s2 -> s4 [73, 73] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s2 -> s5 [73, 73] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s2 -> s6 [73, 73] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s2 -> s7 [73, 73] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s2 -> s1 [74, 80] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s2 -> s2 [74, 65535] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s2 -> s8 [81, 81] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s2 -> s1 [83, 65535] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s3 -> s1 [0, 72] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s3 -> s2 [0, 72] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s3 -> s3 [0, 65535] { R5159 += 1, R5114 += 1, R5115 += 1 };
  s3 -> s4 [73, 73] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s3 -> s5 [73, 73] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s3 -> s6 [73, 73] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s3 -> s7 [73, 73] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s3 -> s1 [74, 80] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s3 -> s2 [74, 65535] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s3 -> s8 [81, 81] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s3 -> s1 [83, 65535] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s5 -> s5 [0, 80] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s5 -> s5 [0, 65535] { R5159 += 1, R5115 += 1 };
  s5 -> s10 [81, 81] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s5 -> s5 [83, 65535] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s6 -> s5 [0, 80] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s6 -> s6 [0, 65535] { R5159 += 1, R5115 += 1, R5056 += 1, R5057 += 1 };
  s6 -> s10 [81, 81] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s6 -> s5 [83, 65535] { R5159 += 1, R5115 += 1, R5057 += 1 };
  s8 -> s8 [0, 72] { R5159 += 1, R5115 += 1 };
  s8 -> s8 [0, 65535] { R5159 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R5159 += 1, R5115 += 1 };
  s8 -> s11 [73, 73] { R5159 += 1, R5115 += 1 };
  s8 -> s8 [74, 65535] { R5159 += 1, R5115 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5159 += 1, R5115 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R5159 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R5159 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R5159 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R5075 && R2 = R5159 && R20 - R5159 = -1 && R21 = R5159 && R22 - R5159 = -1 && R23 = R5159 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3893 + -1*R3891 - R53 = 0 && R52 + R3892 + R3890 = 0 && R5074 = 0 && R5100 = 0 && R5101 = 0 && R5112 = 0 && R5113 = 0 && R5114 = 0 && R5115 = 0 && R5116 = 0 && R5117 = R5159 && R5118 = 0 && R5119 = R5159 && R5120 = 0 && R5121 = R5159 && R5122 = 0 && R5123 = R5159 && R5124 = 0 && R5125 = R5159 && R5126 = 0 && R5127 = R5159 && R5128 = 0 && R5129 = R5159 && R5130 = 0 && R5131 = R5159 && R5132 = 0 && R5133 = R5159 && R5134 = 0 && R5135 = R5159 && R5136 = 0 && R5137 = R5159 && R5138 = 0 && R5139 = R5159 && R5140 = 0 && R5141 = R5159 && R5142 = 0 && R5143 = R5159 && R5144 = 0 && R5145 = R5159 && R5146 = 0 && R5147 = R5159 && R5148 = 0 && R5149 = R5159 && R5150 = 0 && R5151 = R5159 && R5152 = 0 && R5153 = R5159 && R5154 = 0 && R5155 = R5159 && R5156 = 0 && R5157 = R5159 && R5158 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3893 + -1*R3891 - R53 < 1 && -1 < R5075 && 0 < R5159 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3893 + -1*R3891 - R53 = 0 || R53 + R3893 + R3891 < 1) && (R42 + R72 + R70 = 0 || R53 + R3893 + R3891 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R3893 + -1*R3891 - R53 = 0 || R53 + R3893 + R3891 < 1) && (R46 + R77 + R74 = 0 || R53 + R3893 + R3891 < 1))) && (R5060 != 0 || R5061 = R5075 || (R17 = 0 && R5075 = 0)) && (R5062 != 0 || R5063 = R5075 || (R17 = 0 && R5075 = 0)) && (R5064 != 0 || R5065 = R5075 || (R17 = 0 && R5075 = 0)) && (R5066 != 0 || R5067 = R5075 || (R17 = 0 && R5075 = 0)) && (R5068 != 0 || R5069 = R5075 || (R17 = 0 && R5075 = 0)) && (R5070 != 0 || R5071 = R5075 || (R17 = 0 && R5075 = 0)) && (R5072 != 0 || R5073 = R5075 || (R17 = 0 && R5075 = 0)) && (R5076 != 0 || R5075 = R5077 || (R17 = 0 && R5075 = 0)) && (R5078 != 0 || R5075 = R5079 || (R17 = 0 && R5075 = 0)) && (R18 = 0 || (R5098 = 0 && R5099 = 0)) && (R18 = 0 || (R5102 = 0 && R5103 = 0)) && (R18 = 0 || (R5104 = 0 && R5105 = 0)) && (R18 = 0 || (R5106 = 0 && R5107 = 0)) && (R18 = 0 || (R5108 = 0 && R5109 = 0)) && (R18 = 0 || (R5110 = 0 && R5111 = 0)) && (R19 = 0 || (R5080 = 0 && R5081 = 0)) && (R19 = 0 || (R5082 = 0 && R5083 = 0)) && (R19 = 0 || (R5084 = 0 && R5085 = 0)) && (R19 = 0 || (R5086 = 0 && R5087 = 0)) && (R19 = 0 || (R5088 = 0 && R5089 = 0)) && (R19 = 0 || (R5090 = 0 && R5091 = 0)) && (R19 = 0 || (R5092 = 0 && R5093 = 0)) && (R19 = 0 || (R5094 = 0 && R5095 = 0)) && (R19 = 0 || (R5096 = 0 && R5097 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3893 + -1*R3891 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R3893 + -1*R3891 - R53 = 0)) && (R58 + R4743 + R4740 = 0 || (R56 + R4741 + R4738 = 0 && R57 + R4742 + R4739 = 0)) && (R58 + R4743 + R4740 = 0 || (R62 + R5058 + R5056 = 0 && R63 + R5059 + R5057 = 0)) && (R5060 = 0 || (R17 = 0 && R5075 = 0)) && (R5062 = 0 || (R17 = 0 && R5075 = 0)) && (R5064 = 0 || (R17 = 0 && R5075 = 0)) && (R5066 = 0 || (R17 = 0 && R5075 = 0)) && (R5068 = 0 || (R17 = 0 && R5075 = 0)) && (R5070 = 0 || (R17 = 0 && R5075 = 0)) && (R5072 = 0 || (R17 = 0 && R5075 = 0)) && (R5076 = 0 || (R17 = 0 && R5075 = 0)) && (R5078 = 0 || (R17 = 0 && R5075 = 0));
// End of Parikh automata intersection problem
