// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R12609 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R12608 += 1, R12609 += 1 };
  s1 -> s1 [0, 65535] { R12609 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R12611 += 1 };
  s0 -> s0 [0, 65535] { R12610 += 1, R12611 += 1 };
  s0 -> s2 [73, 73] { R12611 += 1 };
  s0 -> s3 [73, 73] { R12611 += 1 };
  s0 -> s1 [82, 65535] { R12611 += 1 };
  s1 -> s1 [0, 72] { R12611 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12611 += 1 };
  s1 -> s3 [73, 73] { R12611 += 1 };
  s1 -> s1 [82, 65535] { R12611 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R12611 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R12611 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R12613 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R12612 += 1, R12613 += 1 };
  s0 -> s2 [73, 73] { R12613 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R12613 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R12613 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R12613 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12613 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R12613 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R12613 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12613 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R12615 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R12614 += 1, R12615 += 1 };
  s0 -> s2 [73, 73] { R12615 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R12615 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R12615 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R12615 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12615 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R12615 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R12615 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12615 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R12617 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R12616 += 1, R12617 += 1 };
  s0 -> s2 [73, 73] { R12617 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R12617 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R12617 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R12617 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12617 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R12617 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R12617 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12617 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R12619 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12618 += 1, R12619 += 1 };
  s0 -> s2 [73, 73] { R12619 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R12619 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R12619 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R12619 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12619 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R12619 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R12619 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12619 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R12621 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R12620 += 1, R12621 += 1 };
  s0 -> s2 [73, 73] { R12621 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R12621 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R12621 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R12621 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12621 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R12621 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R12621 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R12621 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R12623 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12622 += 1, R12623 += 1 };
  s0 -> s2 [73, 73] { R12623 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R12623 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R12623 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R12623 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12623 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R12623 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R12623 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12623 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R12625 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R12624 += 1, R12625 += 1 };
  s0 -> s2 [73, 73] { R12625 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R12625 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R12625 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R12625 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12625 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R12625 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R12625 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R12625 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R12645 += 1 };
  s0 -> s0 [0, 65535] { R12644 += 1, R12645 += 1 };
  s0 -> s2 [73, 73] { R12645 += 1 };
  s0 -> s1 [74, 65535] { R12645 += 1 };
  s1 -> s1 [0, 72] { R12645 += 1 };
  s1 -> s2 [73, 73] { R12645 += 1 };
  s1 -> s1 [74, 65535] { R12645 += 1 };
  s2 -> s2 [0, 65535] { R12645 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12647 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12646 += 1, R12647 += 1 };
  s1 -> s1 [0, 65535] { R12647 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R12649 += 1 };
  s0 -> s2 [0, 65535] { R12649 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R12648 += 1, R12649 += 1 };
  s0 -> s3 [73, 73] { R12649 += 1 };
  s0 -> s1 [74, 65535] { R12649 += 1 };
  s1 -> s1 [0, 72] { R12649 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R12649 += 1 };
  s1 -> s1 [74, 65535] { R12649 += 1 };
  s2 -> s1 [0, 72] { R12649 += 1 };
  s2 -> s2 [0, 65535] { R12649 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R12649 += 1 };
  s2 -> s1 [74, 65535] { R12649 += 1 };
  s3 -> s3 [0, 65535] { R12649 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R12651 += 1, R12589 += 1 };
  s0 -> s0 [0, 65535] { R12650 += 1, R12651 += 1 };
  s0 -> s2 [0, 65535] { R12651 += 1, R12588 += 1, R12589 += 1 };
  s0 -> s1 [74, 65535] { R12651 += 1, R12589 += 1 };
  s1 -> s1 [0, 72] { R12651 += 1, R12589 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12651 += 1 };
  s1 -> s1 [74, 65535] { R12651 += 1, R12589 += 1 };
  s2 -> s1 [0, 72] { R12651 += 1, R12589 += 1 };
  s2 -> s2 [0, 65535] { R12651 += 1, R12588 += 1, R12589 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R12651 += 1, R12589 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12653 += 1, R12591 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R12652 += 1, R12653 += 1 };
  s0 -> s2 [0, 65535] { R12653 += 1, R12590 += 1, R12591 += 1 };
  s1 -> s1 [0, 65535] { R12653 += 1, R12591 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12653 += 1 };
  s2 -> s1 [0, 65535] { R12653 += 1, R12591 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12653 += 1, R12590 += 1, R12591 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12653 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R12655 += 1, R12593 += 1 };
  s0 -> s2 [0, 65535] { R12655 += 1, R12592 += 1, R12593 += 1 };
  s0 -> s0 [0, 65535] { R12654 += 1, R12655 += 1 };
  s0 -> s1 [81, 65535] { R12655 += 1, R12593 += 1 };
  s1 -> s1 [0, 73] { R12655 += 1, R12593 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12655 += 1 };
  s1 -> s1 [81, 65535] { R12655 += 1, R12593 += 1 };
  s2 -> s1 [0, 73] { R12655 += 1, R12593 += 1 };
  s2 -> s2 [0, 65535] { R12655 += 1, R12592 += 1, R12593 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R12655 += 1, R12593 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R12656 += 1, R12657 += 1 };
  s0 -> s1 [0, 65535] { R12657 += 1, R12595 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R12657 += 1, R12594 += 1, R12595 += 1 };
  s1 -> s4 [0, 65535] { R12657 += 1 };
  s1 -> s1 [0, 65535] { R12657 += 1, R12595 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12657 += 1, R12595 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R12657 += 1, R12594 += 1, R12595 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12657 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R12659 += 1, R12597 += 1 };
  s0 -> s0 [0, 65535] { R12658 += 1, R12659 += 1 };
  s0 -> s2 [0, 65535] { R12659 += 1, R12597 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R12659 += 1, R12596 += 1, R12597 += 1 };
  s0 -> s1 [82, 65535] { R12659 += 1, R12597 += 1 };
  s1 -> s1 [0, 80] { R12659 += 1, R12597 += 1 };
  s1 -> s1 [0, 65535] { R12659 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R12659 += 1, R12597 += 1 };
  s2 -> s1 [0, 80] { R12659 += 1, R12597 += 1 };
  s2 -> s2 [0, 65535] { R12659 += 1, R12597 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R12659 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R12659 += 1, R12597 += 1 };
  s3 -> s1 [0, 80] { R12659 += 1, R12597 += 1 };
  s3 -> s2 [0, 65535] { R12659 += 1, R12597 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R12659 += 1, R12596 += 1, R12597 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R12659 += 1, R12597 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12659 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R12661 += 1, R12599 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R12661 += 1, R12599 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R12660 += 1, R12661 += 1 };
  s0 -> s3 [0, 65535] { R12661 += 1, R12598 += 1, R12599 += 1 };
  s0 -> s1 [82, 65535] { R12661 += 1, R12599 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R12661 += 1, R12599 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R12661 += 1, R12599 += 1 };
  s1 -> s5 [0, 65535] { R12661 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R12661 += 1, R12599 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R12661 += 1, R12599 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R12661 += 1, R12599 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R12661 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R12661 += 1, R12599 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R12661 += 1, R12599 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R12661 += 1, R12599 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R12661 += 1, R12598 += 1, R12599 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R12661 += 1, R12599 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12661 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12663 += 1, R12601 += 1 };
  s0 -> s2 [0, 65535] { R12663 += 1, R12600 += 1, R12601 += 1 };
  s0 -> s0 [0, 65535] { R12662 += 1, R12663 += 1 };
  s1 -> s4 [0, 65535] { R12663 += 1 };
  s1 -> s1 [0, 65535] { R12663 += 1, R12601 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12663 += 1, R12601 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12663 += 1, R12600 += 1, R12601 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12663 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R12665 += 1, R12603 += 1 };
  s0 -> s0 [0, 65535] { R12664 += 1, R12665 += 1 };
  s0 -> s2 [0, 65535] { R12665 += 1, R12602 += 1, R12603 += 1 };
  s1 -> s1 [0, 65535] { R12665 += 1, R12603 += 1 };
  s1 -> s4 [0, 65535] { R12665 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12665 += 1, R12603 += 1 };
  s2 -> s2 [0, 65535] { R12665 += 1, R12602 += 1, R12603 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12665 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R12667 += 1, R12605 += 1 };
  s0 -> s0 [0, 65535] { R12666 += 1, R12667 += 1 };
  s0 -> s2 [0, 65535] { R12667 += 1, R12604 += 1, R12605 += 1 };
  s1 -> s4 [0, 65535] { R12667 += 1 };
  s1 -> s1 [0, 65535] { R12667 += 1, R12605 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12667 += 1, R12605 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12667 += 1, R12604 += 1, R12605 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12667 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R12669 += 1, R12607 += 1, R12587 += 1 };
  s0 -> s0 [0, 65535] { R12668 += 1, R12669 += 1 };
  s0 -> s2 [0, 65535] { R12669 += 1, R12606 += 1, R12607 += 1 };
  s0 -> s1 [0, 65535] { R12669 += 1, R12607 += 1 };
  s0 -> s1 [83, 65535] { R12669 += 1, R12607 += 1, R12587 += 1 };
  s1 -> s1 [0, 81] { R12669 += 1, R12607 += 1, R12587 += 1 };
  s1 -> s4 [0, 65535] { R12669 += 1 };
  s1 -> s1 [0, 65535] { R12669 += 1, R12607 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [83, 65535] { R12669 += 1, R12607 += 1, R12587 += 1 };
  s2 -> s1 [0, 81] { R12669 += 1, R12607 += 1, R12587 += 1 };
  s2 -> s2 [0, 65535] { R12669 += 1, R12606 += 1, R12607 += 1 };
  s2 -> s1 [0, 65535] { R12669 += 1, R12607 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [83, 65535] { R12669 += 1, R12607 += 1, R12587 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12669 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R12670 += 1, R12671 += 1 };
  s0 -> s1 [0, 65535] { R12671 += 1, R12626 += 1, R12627 += 1 };
  s0 -> s2 [0, 65535] { R12671 += 1, R12627 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12671 += 1, R12626 += 1, R12627 += 1 };
  s1 -> s2 [0, 65535] { R12671 += 1, R12627 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12671 += 1 };
  s2 -> s2 [0, 65535] { R12671 += 1, R12627 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12671 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R12673 += 1, R12629 += 1 };
  s0 -> s2 [0, 65535] { R12673 += 1, R12628 += 1, R12629 += 1 };
  s0 -> s0 [0, 65535] { R12672 += 1, R12673 += 1 };
  s0 -> s3 [73, 73] { R12673 += 1, R12629 += 1 };
  s0 -> s4 [73, 73] { R12673 += 1, R12629 += 1 };
  s0 -> s5 [81, 81] { R12673 += 1, R12629 += 1 };
  s0 -> s1 [82, 65535] { R12673 += 1, R12629 += 1 };
  s1 -> s1 [0, 72] { R12673 += 1, R12629 += 1 };
  s1 -> s3 [73, 73] { R12673 += 1, R12629 += 1 };
  s1 -> s4 [73, 73] { R12673 += 1, R12629 += 1 };
  s1 -> s5 [81, 81] { R12673 += 1, R12629 += 1 };
  s1 -> s1 [82, 65535] { R12673 += 1, R12629 += 1 };
  s2 -> s1 [0, 72] { R12673 += 1, R12629 += 1 };
  s2 -> s2 [0, 65535] { R12673 += 1, R12628 += 1, R12629 += 1 };
  s2 -> s3 [73, 73] { R12673 += 1, R12629 += 1 };
  s2 -> s4 [73, 73] { R12673 += 1, R12629 += 1 };
  s2 -> s5 [81, 81] { R12673 += 1, R12629 += 1 };
  s2 -> s1 [82, 65535] { R12673 += 1, R12629 += 1 };
  s4 -> s4 [0, 73] { R12673 += 1, R12629 += 1 };
  s4 -> s8 [81, 81] { R12673 += 1, R12629 += 1 };
  s4 -> s4 [82, 65535] { R12673 += 1, R12629 += 1 };
  s5 -> s5 [0, 72] { R12673 += 1, R12629 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12673 += 1 };
  s5 -> s7 [73, 73] { R12673 += 1, R12629 += 1 };
  s5 -> s8 [73, 73] { R12673 += 1, R12629 += 1 };
  s5 -> s5 [81, 65535] { R12673 += 1, R12629 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12673 += 1 };
  s8 -> s8 [0, 73] { R12673 += 1, R12629 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12673 += 1 };
  s8 -> s8 [81, 65535] { R12673 += 1, R12629 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R12675 += 1, R12631 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12674 += 1, R12675 += 1 };
  s0 -> s2 [0, 65535] { R12675 += 1, R12630 += 1, R12631 += 1 };
  s0 -> s3 [73, 73] { R12675 += 1, R12631 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R12675 += 1, R12631 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R12675 += 1, R12631 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R12675 += 1, R12631 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12675 += 1 };
  s1 -> s3 [73, 73] { R12675 += 1, R12631 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R12675 += 1, R12631 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R12675 += 1, R12631 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R12675 += 1, R12631 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12675 += 1, R12630 += 1, R12631 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R12675 += 1, R12631 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R12675 += 1, R12631 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R12675 += 1, R12631 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R12675 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12675 += 1, R12631 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12675 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12675 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R12677 += 1, R12633 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R12677 += 1, R12632 += 1, R12633 += 1 };
  s0 -> s0 [0, 65535] { R12676 += 1, R12677 += 1 };
  s0 -> s3 [73, 73] { R12677 += 1, R12633 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R12677 += 1, R12633 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R12677 += 1, R12633 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R12677 += 1, R12633 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R12677 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R12677 += 1, R12633 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R12677 += 1, R12633 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R12677 += 1, R12633 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R12677 += 1, R12633 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R12677 += 1, R12632 += 1, R12633 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R12677 += 1, R12633 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R12677 += 1, R12633 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R12677 += 1, R12633 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R12677 += 1 };
  s3 -> s3 [0, 65535] { R12677 += 1, R12633 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12677 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12677 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R12678 += 1, R12679 += 1 };
  s0 -> s2 [0, 65535] { R12679 += 1, R12634 += 1, R12635 += 1 };
  s0 -> s3 [73, 73] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R12679 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R12679 += 1, R12634 += 1, R12635 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R12679 += 1, R12635 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R12679 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12679 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12679 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [0, 72] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s3 [0, 65535] { R12681 += 1, R12636 += 1, R12637 += 1 };
  s0 -> s0 [0, 65535] { R12680 += 1, R12681 += 1 };
  s0 -> s4 [73, 73] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s5 [73, 73] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s6 [73, 73] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s7 [73, 73] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s1 [74, 65535] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [74, 65535] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [0, 72] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [0, 72] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s4 [73, 73] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s5 [73, 73] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s6 [73, 73] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s7 [73, 73] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [74, 65535] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [74, 65535] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s11 [0, 72] { R12681 += 1, R12637 += 1 };
  s2 -> s2 [0, 72] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s12 [73, 73] { R12681 += 1, R12637 += 1 };
  s2 -> s5 [73, 73] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s8 [73, 73] { R12681 += 1, R12637 += 1 };
  s2 -> s7 [73, 73] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s11 [74, 65535] { R12681 += 1, R12637 += 1 };
  s2 -> s2 [74, 65535] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [0, 72] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [0, 72] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s3 [0, 65535] { R12681 += 1, R12636 += 1, R12637 += 1 };
  s3 -> s4 [73, 73] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s5 [73, 73] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s6 [73, 73] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s7 [73, 73] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [74, 65535] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [74, 65535] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s6 -> s6 [0, 65535] { R12681 += 1, R12637 += 1, R10246 += 1, R10247 += 1 };
  s6 -> s7 [0, 65535] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s7 -> s8 [0, 65535] { R12681 += 1, R12637 += 1 };
  s7 -> s7 [0, 65535] { R12681 += 1, R12637 += 1, R10247 += 1, R10248 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R12681 += 1 };
  s8 -> s8 [0, 65535] { R12681 += 1, R12637 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12681 += 1 };
  s11 -> s11 [0, 72] { R12681 += 1, R12637 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12681 += 1 };
  s11 -> s12 [73, 73] { R12681 += 1, R12637 += 1 };
  s11 -> s8 [73, 73] { R12681 += 1, R12637 += 1 };
  s11 -> s11 [74, 65535] { R12681 += 1, R12637 += 1 };
  s12 -> s12 [0, 65535] { R12681 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R12683 += 1, R12638 += 1, R12639 += 1 };
  s0 -> s0 [0, 65535] { R12682 += 1, R12683 += 1 };
  s0 -> s4 [73, 73] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s0 -> s1 [74, 81] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s8 [82, 82] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s0 -> s1 [83, 65535] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s1 -> s1 [74, 81] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s1 -> s8 [82, 82] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s1 -> s1 [83, 65535] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s2 -> s1 [74, 81] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s8 [82, 82] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s2 -> s1 [83, 65535] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R12683 += 1, R12638 += 1, R12639 += 1 };
  s3 -> s4 [73, 73] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s3 -> s1 [74, 81] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s8 [82, 82] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s3 -> s1 [83, 65535] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s5 -> s5 [0, 81] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s5 -> s11 [82, 82] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s5 -> s5 [83, 65535] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s6 -> s5 [0, 81] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R12683 += 1, R12639 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s11 [82, 82] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s6 -> s5 [83, 65535] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s8 -> s9 [0, 72] { R12683 += 1, R12639 += 1 };
  s8 -> s8 [0, 72] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s8 -> s10 [73, 73] { R12683 += 1, R12639 += 1 };
  s8 -> s11 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s8 -> s12 [73, 73] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s8 -> s13 [73, 73] { R12683 += 1, R12639 += 1 };
  s8 -> s9 [74, 65535] { R12683 += 1, R12639 += 1 };
  s8 -> s8 [74, 65535] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s9 -> s9 [0, 72] { R12683 += 1, R12639 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s9 [0, 65535] { R12683 += 1 };
  s9 -> s10 [73, 73] { R12683 += 1, R12639 += 1 };
  s9 -> s13 [73, 73] { R12683 += 1, R12639 += 1 };
  s9 -> s9 [74, 65535] { R12683 += 1, R12639 += 1 };
  s10 -> s10 [0, 65535] { R12683 += 1, R12639 += 1 };
  s10 -> s15 [0, 65535] { R12683 += 1 };
  s10 -> s14 [0, 65535];
  s11 -> s10 [0, 65535] { R12683 += 1, R12639 += 1 };
  s11 -> s11 [0, 65535] { R12683 += 1, R12639 += 1, R11523 += 1 };
  s13 -> s14 [0, 65535];
  s13 -> s13 [0, 65535] { R12683 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R12683 += 1 };
  s15 -> s14 [0, 65535];
  accepting s13, s9, s14, s15, s10;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s0 -> s2 [0, 72] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s0 -> s3 [0, 65535] { R12685 += 1, R12640 += 1, R12641 += 1 };
  s0 -> s0 [0, 65535] { R12684 += 1, R12685 += 1 };
  s0 -> s4 [73, 73] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s0 -> s5 [73, 73] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s0 -> s6 [73, 73] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s0 -> s7 [73, 73] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s0 -> s1 [74, 65535] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s0 -> s2 [74, 65535] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s1 -> s1 [0, 72] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s1 -> s2 [0, 72] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s1 -> s4 [73, 73] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s1 -> s5 [73, 73] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s1 -> s6 [73, 73] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s1 -> s7 [73, 73] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s1 -> s1 [74, 65535] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s1 -> s2 [74, 65535] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s2 -> s11 [0, 72] { R12685 += 1, R12641 += 1 };
  s2 -> s2 [0, 72] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s2 -> s4 [73, 73] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s2 -> s12 [73, 73] { R12685 += 1, R12641 += 1 };
  s2 -> s5 [73, 73] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s2 -> s8 [73, 73] { R12685 += 1, R12641 += 1 };
  s2 -> s11 [74, 65535] { R12685 += 1, R12641 += 1 };
  s2 -> s2 [74, 65535] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s3 -> s1 [0, 72] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s3 -> s2 [0, 72] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s3 -> s3 [0, 65535] { R12685 += 1, R12640 += 1, R12641 += 1 };
  s3 -> s4 [73, 73] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s3 -> s5 [73, 73] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s3 -> s6 [73, 73] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s3 -> s7 [73, 73] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s3 -> s1 [74, 65535] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s3 -> s2 [74, 65535] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s5 -> s5 [0, 65535] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s5 -> s8 [0, 65535] { R12685 += 1, R12641 += 1 };
  s6 -> s5 [0, 65535] { R12685 += 1, R12641 += 1, R12371 += 1, R12372 += 1 };
  s6 -> s6 [0, 65535] { R12685 += 1, R12641 += 1, R12370 += 1, R12371 += 1 };
  s8 -> s9 [0, 65535] { R12685 += 1 };
  s8 -> s8 [0, 65535] { R12685 += 1, R12641 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R12685 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R12685 += 1, R12641 += 1 };
  s11 -> s11 [0, 65535] { R12685 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R12685 += 1, R12641 += 1 };
  s11 -> s8 [73, 73] { R12685 += 1, R12641 += 1 };
  s11 -> s11 [74, 65535] { R12685 += 1, R12641 += 1 };
  s12 -> s12 [0, 65535] { R12685 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s0 -> s2 [0, 72] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s0 -> s0 [0, 65535] { R12686 += 1, R12687 += 1 };
  s0 -> s3 [0, 65535] { R12687 += 1, R12642 += 1, R12643 += 1 };
  s0 -> s4 [73, 73] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s0 -> s5 [73, 73] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s0 -> s6 [73, 73] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s0 -> s7 [73, 73] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s0 -> s1 [74, 80] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s0 -> s2 [74, 65535] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s0 -> s8 [81, 81] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s0 -> s1 [83, 65535] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s1 -> s1 [0, 72] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s1 -> s6 [73, 73] { R12687 += 1, R12643 += 1 };
  s1 -> s7 [73, 73] { R12687 += 1, R12643 += 1 };
  s1 -> s1 [74, 80] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s1 -> s1 [74, 65535] { R12687 += 1, R12643 += 1 };
  s1 -> s8 [81, 81] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s1 -> s1 [83, 65535] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s2 -> s1 [0, 72] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s2 -> s2 [0, 72] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s2 -> s4 [73, 73] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s2 -> s5 [73, 73] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s2 -> s6 [73, 73] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s2 -> s7 [73, 73] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s2 -> s1 [74, 80] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s2 -> s2 [74, 65535] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s2 -> s8 [81, 81] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s2 -> s1 [83, 65535] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s3 -> s1 [0, 72] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s3 -> s2 [0, 72] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s3 -> s3 [0, 65535] { R12687 += 1, R12642 += 1, R12643 += 1 };
  s3 -> s4 [73, 73] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s3 -> s5 [73, 73] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s3 -> s6 [73, 73] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s3 -> s7 [73, 73] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s3 -> s1 [74, 80] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s3 -> s2 [74, 65535] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s3 -> s8 [81, 81] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s3 -> s1 [83, 65535] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s5 -> s6 [0, 80] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s5 -> s5 [0, 65535] { R12687 += 1, R12643 += 1, R12584 += 1, R12585 += 1 };
  s5 -> s10 [81, 81] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s5 -> s6 [83, 65535] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s6 -> s6 [0, 80] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s6 -> s6 [0, 65535] { R12687 += 1, R12643 += 1 };
  s6 -> s10 [81, 81] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s6 -> s6 [83, 65535] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s8 -> s8 [0, 72] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s8 -> s8 [0, 65535] { R12687 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R12687 += 1, R12643 += 1 };
  s8 -> s11 [73, 73] { R12687 += 1, R12643 += 1 };
  s8 -> s8 [74, 81] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s8 -> s8 [74, 65535] { R12687 += 1, R12643 += 1 };
  s8 -> s8 [83, 65535] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s10 -> s12 [0, 65535] { R12687 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12687 += 1, R12643 += 1 };
  s10 -> s10 [83, 65535] { R12687 += 1, R12643 += 1, R12585 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12687 += 1 };
  s12 -> s12 [0, 65535] { R12687 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R12687 && R20 - R12687 = -1 && R21 = R12687 && R22 - R12687 = -1 && R23 = R12687 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11525 + -1*R11523 - R53 = 0 && R52 + R11524 + R11522 = 0 && R12628 = 0 && R12629 = 0 && R12636 = 0 && R12637 = 0 && R12638 = 0 && R12639 = 0 && R12640 = 0 && R12641 = 0 && R12642 = 0 && R12643 = 0 && R12644 = 0 && R12645 = R12687 && R12646 = 0 && R12647 = R12687 && R12648 = 0 && R12649 = R12687 && R12650 = 0 && R12651 = R12687 && R12652 = 0 && R12653 = R12687 && R12654 = 0 && R12655 = R12687 && R12656 = 0 && R12657 = R12687 && R12658 = 0 && R12659 = R12687 && R12660 = 0 && R12661 = R12687 && R12662 = 0 && R12663 = R12687 && R12664 = 0 && R12665 = R12687 && R12666 = 0 && R12667 = R12687 && R12668 = 0 && R12669 = R12687 && R12670 = 0 && R12671 = R12687 && R12672 = 0 && R12673 = R12687 && R12674 = 0 && R12675 = R12687 && R12676 = 0 && R12677 = R12687 && R12678 = 0 && R12679 = R12687 && R12680 = 0 && R12681 = R12687 && R12682 = 0 && R12683 = R12687 && R12684 = 0 && R12685 = R12687 && R12686 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11525 + -1*R11523 - R53 < 1 && 0 < R12687 && (R1 != 0 || R17 = 0 || (R12588 = 0 && R12589 = 0)) && (R1 != 0 || R17 = 0 || (R12590 = 0 && R12591 = 0)) && (R1 != 0 || R17 = 0 || (R12592 = 0 && R12593 = 0)) && (R1 != 0 || R17 = 0 || (R12594 = 0 && R12595 = 0)) && (R1 != 0 || R17 = 0 || (R12596 = 0 && R12597 = 0)) && (R1 != 0 || R17 = 0 || (R12598 = 0 && R12599 = 0)) && (R1 != 0 || R17 = 0 || (R12600 = 0 && R12601 = 0)) && (R1 != 0 || R17 = 0 || (R12602 = 0 && R12603 = 0)) && (R1 != 0 || R17 = 0 || (R12604 = 0 && R12605 = 0)) && (R1 != 0 || R17 = 0 || (R12606 = 0 && R12607 = 0)) && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R11525 + -1*R11523 - R53 = 0 || R53 + R11525 + R11523 < 1) && (R42 + R72 + R70 = 0 || R53 + R11525 + R11523 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R11525 + -1*R11523 - R53 = 0 || R53 + R11525 + R11523 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R11525 + R11523 < 1))) && (R12588 != 0 || R1 = R12589 || R1 < 1) && (R12590 != 0 || R1 = R12591 || R1 < 1) && (R12592 != 0 || R1 = R12593 || R1 < 1) && (R12594 != 0 || R1 = R12595 || R1 < 1) && (R12596 != 0 || R1 = R12597 || R1 < 1) && (R12598 != 0 || R1 = R12599 || R1 < 1) && (R12600 != 0 || R1 = R12601 || R1 < 1) && (R12602 != 0 || R1 = R12603 || R1 < 1) && (R12604 != 0 || R1 = R12605 || R1 < 1) && (R12606 != 0 || R1 = R12607 || R1 < 1) && (R18 = 0 || (R12626 = 0 && R12627 = 0)) && (R18 = 0 || (R12630 = 0 && R12631 = 0)) && (R18 = 0 || (R12632 = 0 && R12633 = 0)) && (R18 = 0 || (R12634 = 0 && R12635 = 0)) && (R19 = 0 || (R12608 = 0 && R12609 = 0)) && (R19 = 0 || (R12610 = 0 && R12611 = 0)) && (R19 = 0 || (R12612 = 0 && R12613 = 0)) && (R19 = 0 || (R12614 = 0 && R12615 = 0)) && (R19 = 0 || (R12616 = 0 && R12617 = 0)) && (R19 = 0 || (R12618 = 0 && R12619 = 0)) && (R19 = 0 || (R12620 = 0 && R12621 = 0)) && (R19 = 0 || (R12622 = 0 && R12623 = 0)) && (R19 = 0 || (R12624 = 0 && R12625 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R11525 + -1*R11523 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R11525 + -1*R11523 - R53 = 0)) && (R58 + R12375 + R12372 = 0 || (R56 + R12373 + R12370 = 0 && R57 + R12374 + R12371 = 0)) && (R58 + R12375 + R12372 = 0 || (R62 + R12586 + R12584 = 0 && R63 + R12587 + R12585 = 0)) && (R12588 = 0 || R1 < 1) && (R12590 = 0 || R1 < 1) && (R12592 = 0 || R1 < 1) && (R12594 = 0 || R1 < 1) && (R12596 = 0 || R1 < 1) && (R12598 = 0 || R1 < 1) && (R12600 = 0 || R1 < 1) && (R12602 = 0 || R1 < 1) && (R12604 = 0 || R1 < 1) && (R12606 = 0 || R1 < 1);
// End of Parikh automata intersection problem
