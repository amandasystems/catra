// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R15332, R15333, R15334, R15335, R15336, R15337, R15338, R15339, R15340, R15341, R16612, R16613, R16614, R16615, R16616, R16617, R16618, R16619, R16620, R16621, R16622, R16623, R16624, R16625, R16626, R16627, R16628, R16629, R16630, R16631, R16632, R16633, R16634, R16635, R16636, R16637, R16638, R16639, R16640, R16641, R16642, R16643, R16644, R16645, R16646, R16647, R16648, R16649, R16650, R16651, R16652, R16653, R16654, R16655, R16656, R16657, R16658, R16659, R16660, R16661, R16662, R16663, R16664, R16665, R16666, R16667, R16668, R16669, R16670, R16671, R16672, R16673, R16674, R16675, R16676, R16677, R16678, R16679, R16680, R16681, R16682, R16683, R16684, R16685, R16686, R16687, R16688, R16689, R16690, R16691, R16692, R16693, R16694, R16695, R16696, R16697, R16698, R16699, R16700, R16701, R16702, R16703, R16704, R16705, R16706, R16707, R16708, R16709, R16710, R16711, R16712, R16713, R16714, R16715, R16716, R16717, R16718, R16719, R16720, R16721, R16722, R16723, R16724, R16725, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R16646 += 1, R16647 += 1 };
  s0 -> s1 [0, 65535] { R16647 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16647 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R16649 += 1 };
  s0 -> s0 [0, 65535] { R16648 += 1, R16649 += 1 };
  s0 -> s2 [73, 73] { R16649 += 1 };
  s0 -> s3 [73, 73] { R16649 += 1 };
  s0 -> s1 [82, 65535] { R16649 += 1 };
  s1 -> s1 [0, 72] { R16649 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16649 += 1 };
  s1 -> s3 [73, 73] { R16649 += 1 };
  s1 -> s1 [82, 65535] { R16649 += 1 };
  s2 -> s2 [0, 73] { R16649 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R16649 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R16651 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16650 += 1, R16651 += 1 };
  s0 -> s2 [73, 73] { R16651 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R16651 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R16651 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R16651 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16651 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R16651 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R16651 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16651 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R16653 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16652 += 1, R16653 += 1 };
  s0 -> s2 [73, 73] { R16653 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R16653 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R16653 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R16653 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16653 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R16653 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R16653 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R16653 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R16655 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16654 += 1, R16655 += 1 };
  s0 -> s2 [73, 73] { R16655 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R16655 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R16655 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R16655 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16655 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R16655 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R16655 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R16655 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R16657 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16656 += 1, R16657 += 1 };
  s0 -> s2 [73, 73] { R16657 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R16657 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R16657 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R16657 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16657 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R16657 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R16657 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R16657 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R16659 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16658 += 1, R16659 += 1 };
  s0 -> s2 [73, 73] { R16659 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R16659 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R16659 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R16659 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16659 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R16659 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R16659 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16659 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R16661 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16660 += 1, R16661 += 1 };
  s0 -> s2 [73, 73] { R16661 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R16661 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R16661 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R16661 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16661 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R16661 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R16661 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R16661 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R16663 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16662 += 1, R16663 += 1 };
  s0 -> s2 [73, 73] { R16663 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R16663 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R16663 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R16663 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16663 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R16663 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R16663 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16663 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R16683 += 1 };
  s0 -> s0 [0, 65535] { R16682 += 1, R16683 += 1 };
  s0 -> s2 [73, 73] { R16683 += 1 };
  s0 -> s1 [74, 65535] { R16683 += 1 };
  s1 -> s1 [0, 72] { R16683 += 1 };
  s1 -> s2 [73, 73] { R16683 += 1 };
  s1 -> s1 [74, 65535] { R16683 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16683 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R16684 += 1, R16685 += 1 };
  s0 -> s1 [0, 65535] { R16685 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16685 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R16687 += 1 };
  s0 -> s0 [0, 65535] { R16686 += 1, R16687 += 1 };
  s0 -> s2 [0, 65535] { R16687 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R16687 += 1 };
  s0 -> s1 [74, 65535] { R16687 += 1 };
  s1 -> s1 [0, 72] { R16687 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R16687 += 1 };
  s1 -> s1 [74, 65535] { R16687 += 1 };
  s2 -> s1 [0, 72] { R16687 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16687 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R16687 += 1 };
  s2 -> s1 [74, 65535] { R16687 += 1 };
  s3 -> s3 [0, 65535] { R16687 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R16689 += 1, R16627 += 1 };
  s0 -> s0 [0, 65535] { R16688 += 1, R16689 += 1 };
  s0 -> s2 [0, 65535] { R16689 += 1, R16626 += 1, R16627 += 1 };
  s0 -> s1 [74, 65535] { R16689 += 1, R16627 += 1 };
  s1 -> s1 [0, 72] { R16689 += 1, R16627 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16689 += 1 };
  s1 -> s1 [74, 65535] { R16689 += 1, R16627 += 1 };
  s2 -> s1 [0, 72] { R16689 += 1, R16627 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16689 += 1, R16626 += 1, R16627 += 1 };
  s2 -> s1 [74, 65535] { R16689 += 1, R16627 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R16691 += 1, R16629 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R16691 += 1, R16628 += 1, R16629 += 1 };
  s0 -> s0 [0, 65535] { R16690 += 1, R16691 += 1 };
  s1 -> s4 [0, 65535] { R16691 += 1 };
  s1 -> s1 [0, 65535] { R16691 += 1, R16629 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16691 += 1, R16629 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16691 += 1, R16628 += 1, R16629 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16691 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R16693 += 1, R16631 += 1 };
  s0 -> s2 [0, 65535] { R16693 += 1, R16630 += 1, R16631 += 1 };
  s0 -> s0 [0, 65535] { R16692 += 1, R16693 += 1 };
  s0 -> s1 [81, 65535] { R16693 += 1, R16631 += 1 };
  s1 -> s1 [0, 73] { R16693 += 1, R16631 += 1 };
  s1 -> s1 [0, 65535] { R16693 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R16693 += 1, R16631 += 1 };
  s2 -> s1 [0, 73] { R16693 += 1, R16631 += 1 };
  s2 -> s2 [0, 65535] { R16693 += 1, R16630 += 1, R16631 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R16693 += 1, R16631 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R16695 += 1, R16633 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R16694 += 1, R16695 += 1 };
  s0 -> s2 [0, 65535] { R16695 += 1, R16632 += 1, R16633 += 1 };
  s1 -> s4 [0, 65535] { R16695 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16695 += 1, R16633 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16695 += 1, R16633 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R16695 += 1, R16632 += 1, R16633 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16695 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R16697 += 1, R16635 += 1 };
  s0 -> s2 [0, 65535] { R16697 += 1, R16635 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R16697 += 1, R16634 += 1, R16635 += 1 };
  s0 -> s0 [0, 65535] { R16696 += 1, R16697 += 1 };
  s0 -> s1 [82, 65535] { R16697 += 1, R16635 += 1 };
  s1 -> s1 [0, 80] { R16697 += 1, R16635 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16697 += 1 };
  s1 -> s1 [82, 65535] { R16697 += 1, R16635 += 1 };
  s2 -> s1 [0, 80] { R16697 += 1, R16635 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16697 += 1, R16635 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R16697 += 1 };
  s2 -> s1 [82, 65535] { R16697 += 1, R16635 += 1 };
  s3 -> s1 [0, 80] { R16697 += 1, R16635 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R16697 += 1, R16635 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R16697 += 1, R16634 += 1, R16635 += 1 };
  s3 -> s1 [82, 65535] { R16697 += 1, R16635 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16697 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R16699 += 1, R16637 += 1, R15335 += 1 };
  s0 -> s0 [0, 65535] { R16698 += 1, R16699 += 1 };
  s0 -> s2 [0, 65535] { R16699 += 1, R16636 += 1, R16637 += 1 };
  s0 -> s1 [0, 65535] { R16699 += 1, R16637 += 1 };
  s0 -> s1 [82, 65535] { R16699 += 1, R16637 += 1, R15335 += 1 };
  s1 -> s1 [0, 80] { R16699 += 1, R16637 += 1, R15335 += 1 };
  s1 -> s4 [0, 65535] { R16699 += 1 };
  s1 -> s1 [0, 65535] { R16699 += 1, R16637 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R16699 += 1, R16637 += 1, R15335 += 1 };
  s2 -> s1 [0, 80] { R16699 += 1, R16637 += 1, R15335 += 1 };
  s2 -> s2 [0, 65535] { R16699 += 1, R16636 += 1, R16637 += 1 };
  s2 -> s1 [0, 65535] { R16699 += 1, R16637 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R16699 += 1, R16637 += 1, R15335 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16699 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R16701 += 1, R16639 += 1, R15340 += 1, R15341 += 1 };
  s0 -> s2 [0, 65535] { R16701 += 1, R16639 += 1, R15339 += 1, R15340 += 1 };
  s0 -> s3 [0, 65535] { R16701 += 1, R16638 += 1, R16639 += 1 };
  s0 -> s0 [0, 65535] { R16700 += 1, R16701 += 1 };
  s1 -> s1 [0, 65535] { R16701 += 1, R16639 += 1, R15340 += 1, R15341 += 1 };
  s1 -> s5 [0, 65535] { R16701 += 1 };
  s1 -> s6 [0, 65535] { R16701 += 1, R16639 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R16701 += 1, R16639 += 1, R15340 += 1, R15341 += 1 };
  s2 -> s2 [0, 65535] { R16701 += 1, R16639 += 1, R15339 += 1, R15340 += 1 };
  s2 -> s5 [0, 65535] { R16701 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R16701 += 1, R16639 += 1, R15340 += 1, R15341 += 1 };
  s3 -> s2 [0, 65535] { R16701 += 1, R16639 += 1, R15339 += 1, R15340 += 1 };
  s3 -> s3 [0, 65535] { R16701 += 1, R16638 += 1, R16639 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16701 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R16701 += 1 };
  s6 -> s6 [0, 65535] { R16701 += 1, R16639 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R16703 += 1, R16640 += 1, R16641 += 1 };
  s0 -> s2 [0, 65535] { R16703 += 1, R16641 += 1 };
  s0 -> s0 [0, 65535] { R16702 += 1, R16703 += 1 };
  s1 -> s1 [0, 65535] { R16703 += 1, R16640 += 1, R16641 += 1 };
  s1 -> s2 [0, 65535] { R16703 += 1, R16641 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16703 += 1, R16641 += 1 };
  s2 -> s3 [0, 65535] { R16703 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16703 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R16704 += 1, R16705 += 1 };
  s0 -> s1 [0, 65535] { R16705 += 1, R16643 += 1, R16620 += 1, R16621 += 1 };
  s0 -> s2 [0, 65535] { R16705 += 1, R16643 += 1, R16619 += 1, R16620 += 1 };
  s0 -> s3 [0, 65535] { R16705 += 1, R16642 += 1, R16643 += 1 };
  s1 -> s5 [0, 65535] { R16705 += 1 };
  s1 -> s6 [0, 65535] { R16705 += 1, R16643 += 1 };
  s1 -> s1 [0, 65535] { R16705 += 1, R16643 += 1, R16620 += 1, R16621 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R16705 += 1 };
  s2 -> s1 [0, 65535] { R16705 += 1, R16643 += 1, R16620 += 1, R16621 += 1 };
  s2 -> s2 [0, 65535] { R16705 += 1, R16643 += 1, R16619 += 1, R16620 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R16705 += 1, R16643 += 1, R16620 += 1, R16621 += 1 };
  s3 -> s2 [0, 65535] { R16705 += 1, R16643 += 1, R16619 += 1, R16620 += 1 };
  s3 -> s3 [0, 65535] { R16705 += 1, R16642 += 1, R16643 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16705 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R16705 += 1 };
  s6 -> s6 [0, 65535] { R16705 += 1, R16643 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s0 -> s2 [0, 65535] { R16707 += 1, R16644 += 1, R16645 += 1 };
  s0 -> s0 [0, 65535] { R16706 += 1, R16707 += 1 };
  s0 -> s3 [0, 65535] { R16707 += 1, R16645 += 1, R16624 += 1, R16625 += 1 };
  s0 -> s4 [81, 81] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s0 -> s5 [81, 81] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s0 -> s1 [83, 65535] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s1 -> s1 [0, 80] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s1 -> s1 [0, 65535] { R16707 += 1, R16645 += 1 };
  s1 -> s6 [0, 65535] { R16707 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [81, 81] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s1 -> s5 [81, 81] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s1 -> s1 [83, 65535] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s2 -> s1 [0, 80] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R16707 += 1, R16644 += 1, R16645 += 1 };
  s2 -> s3 [0, 65535] { R16707 += 1, R16645 += 1, R16624 += 1, R16625 += 1 };
  s2 -> s4 [81, 81] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s2 -> s5 [81, 81] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s2 -> s1 [83, 65535] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s3 -> s1 [0, 80] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s6 [0, 65535] { R16707 += 1 };
  s3 -> s3 [0, 65535] { R16707 += 1, R16645 += 1, R16624 += 1, R16625 += 1 };
  s3 -> s4 [81, 81] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s3 -> s5 [81, 81] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s3 -> s1 [83, 65535] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s4 -> s6 [0, 65535] { R16707 += 1 };
  s4 -> s4 [0, 65535] { R16707 += 1, R16645 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 81] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s5 -> s6 [0, 65535] { R16707 += 1 };
  s5 -> s5 [0, 65535] { R16707 += 1, R16645 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [83, 65535] { R16707 += 1, R16645 += 1, R16625 += 1 };
  s6 -> s6 [0, 65535] { R16707 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R16709 += 1, R16664 += 1, R16665 += 1 };
  s0 -> s0 [0, 65535] { R16708 += 1, R16709 += 1 };
  s0 -> s2 [0, 65535] { R16709 += 1, R16665 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16709 += 1, R16664 += 1, R16665 += 1 };
  s1 -> s2 [0, 65535] { R16709 += 1, R16665 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R16709 += 1 };
  s2 -> s2 [0, 65535] { R16709 += 1, R16665 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16709 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R16711 += 1, R16667 += 1 };
  s0 -> s0 [0, 65535] { R16710 += 1, R16711 += 1 };
  s0 -> s2 [0, 65535] { R16711 += 1, R16666 += 1, R16667 += 1 };
  s0 -> s3 [73, 73] { R16711 += 1, R16667 += 1 };
  s0 -> s4 [73, 73] { R16711 += 1, R16667 += 1 };
  s0 -> s5 [81, 81] { R16711 += 1, R16667 += 1 };
  s0 -> s1 [82, 65535] { R16711 += 1, R16667 += 1 };
  s1 -> s1 [0, 72] { R16711 += 1, R16667 += 1 };
  s1 -> s3 [73, 73] { R16711 += 1, R16667 += 1 };
  s1 -> s4 [73, 73] { R16711 += 1, R16667 += 1 };
  s1 -> s5 [81, 81] { R16711 += 1, R16667 += 1 };
  s1 -> s1 [82, 65535] { R16711 += 1, R16667 += 1 };
  s2 -> s1 [0, 72] { R16711 += 1, R16667 += 1 };
  s2 -> s2 [0, 65535] { R16711 += 1, R16666 += 1, R16667 += 1 };
  s2 -> s3 [73, 73] { R16711 += 1, R16667 += 1 };
  s2 -> s4 [73, 73] { R16711 += 1, R16667 += 1 };
  s2 -> s5 [81, 81] { R16711 += 1, R16667 += 1 };
  s2 -> s1 [82, 65535] { R16711 += 1, R16667 += 1 };
  s3 -> s3 [0, 73] { R16711 += 1, R16667 += 1 };
  s3 -> s7 [81, 81] { R16711 += 1, R16667 += 1 };
  s3 -> s3 [82, 65535] { R16711 += 1, R16667 += 1 };
  s5 -> s5 [0, 72] { R16711 += 1, R16667 += 1 };
  s5 -> s5 [0, 65535] { R16711 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R16711 += 1, R16667 += 1 };
  s5 -> s8 [73, 73] { R16711 += 1, R16667 += 1 };
  s5 -> s5 [81, 65535] { R16711 += 1, R16667 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R16711 += 1, R16667 += 1 };
  s7 -> s7 [0, 65535] { R16711 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R16711 += 1, R16667 += 1 };
  s8 -> s8 [0, 65535] { R16711 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R16713 += 1, R16669 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R16712 += 1, R16713 += 1 };
  s0 -> s2 [0, 65535] { R16713 += 1, R16668 += 1, R16669 += 1 };
  s0 -> s3 [73, 73] { R16713 += 1, R16669 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R16713 += 1, R16669 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R16713 += 1, R16669 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R16713 += 1, R16669 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R16713 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R16713 += 1, R16669 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R16713 += 1, R16669 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R16713 += 1, R16669 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R16713 += 1, R16669 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16713 += 1, R16668 += 1, R16669 += 1 };
  s2 -> s3 [73, 73] { R16713 += 1, R16669 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R16713 += 1, R16669 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R16713 += 1, R16669 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R16713 += 1, R16669 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R16713 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16713 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16713 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R16715 += 1, R16671 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R16714 += 1, R16715 += 1 };
  s0 -> s2 [0, 65535] { R16715 += 1, R16670 += 1, R16671 += 1 };
  s0 -> s3 [73, 73] { R16715 += 1, R16671 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R16715 += 1, R16671 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R16715 += 1, R16671 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R16715 += 1, R16671 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R16715 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R16715 += 1, R16671 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R16715 += 1, R16671 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R16715 += 1, R16671 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R16715 += 1, R16671 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16715 += 1, R16670 += 1, R16671 += 1 };
  s2 -> s3 [73, 73] { R16715 += 1, R16671 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R16715 += 1, R16671 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R16715 += 1, R16671 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R16715 += 1, R16671 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R16715 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16715 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16715 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s2 [0, 72] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s0 -> s3 [0, 65535] { R16717 += 1, R16672 += 1, R16673 += 1 };
  s0 -> s0 [0, 65535] { R16716 += 1, R16717 += 1 };
  s0 -> s4 [73, 73] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s5 [73, 73] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s0 -> s6 [73, 73] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s7 [73, 73] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s0 -> s2 [74, 80] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s0 -> s1 [74, 65535] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s2 [82, 65535] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s1 -> s1 [0, 72] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s2 [0, 72] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s1 -> s4 [73, 73] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s5 [73, 73] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s1 -> s6 [73, 73] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s7 [73, 73] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s1 -> s2 [74, 80] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s1 -> s1 [74, 65535] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s2 [82, 65535] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s2 -> s2 [0, 72] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R16717 += 1 };
  s2 -> s5 [73, 73] { R16717 += 1, R16673 += 1 };
  s2 -> s7 [73, 73] { R16717 += 1, R16673 += 1 };
  s2 -> s2 [74, 80] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s2 -> s2 [74, 65535] { R16717 += 1, R16673 += 1 };
  s2 -> s2 [82, 65535] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s3 -> s1 [0, 72] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s2 [0, 72] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s3 -> s3 [0, 65535] { R16717 += 1, R16672 += 1, R16673 += 1 };
  s3 -> s4 [73, 73] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s5 [73, 73] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s3 -> s6 [73, 73] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s7 [73, 73] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s3 -> s2 [74, 80] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s3 -> s1 [74, 65535] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s2 [82, 65535] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s5 -> s5 [0, 65535] { R16717 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s7 [0, 80] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s6 -> s6 [0, 65535] { R16717 += 1, R16673 += 1, R15332 += 1, R15333 += 1 };
  s6 -> s7 [82, 65535] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s7 -> s7 [0, 80] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R16717 += 1 };
  s7 -> s7 [0, 65535] { R16717 += 1, R16673 += 1 };
  s7 -> s7 [82, 65535] { R16717 += 1, R16673 += 1, R15333 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16717 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s0 [0, 65535] { R16718 += 1, R16719 += 1 };
  s0 -> s2 [0, 65535] { R16719 += 1, R16674 += 1, R16675 += 1 };
  s0 -> s3 [73, 73] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s4 [73, 73] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s1 [74, 65535] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [0, 72] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R16719 += 1 };
  s1 -> s3 [73, 73] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s4 [73, 73] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [74, 65535] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [0, 72] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R16719 += 1, R16674 += 1, R16675 += 1 };
  s2 -> s3 [73, 73] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s4 [73, 73] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [74, 65535] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s3 -> s3 [0, 65535] { R16719 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R16719 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R16719 += 1, R16675 += 1, R15336 += 1, R15337 += 1 };
  s5 -> s5 [0, 65535] { R16719 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s0 -> s2 [0, 72] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s0 -> s3 [0, 65535] { R16721 += 1, R16676 += 1, R16677 += 1 };
  s0 -> s0 [0, 65535] { R16720 += 1, R16721 += 1 };
  s0 -> s4 [73, 73] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s0 -> s5 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s0 -> s6 [73, 73] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s0 -> s7 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s0 -> s2 [74, 81] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s0 -> s1 [74, 65535] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s0 -> s8 [82, 82] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s0 -> s2 [83, 65535] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s1 -> s1 [0, 72] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s1 -> s2 [0, 72] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s1 -> s4 [73, 73] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s1 -> s5 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s1 -> s6 [73, 73] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s1 -> s7 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s1 -> s2 [74, 81] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s1 -> s1 [74, 65535] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s1 -> s8 [82, 82] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s1 -> s2 [83, 65535] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s2 -> s2 [0, 72] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s2 -> s5 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s2 -> s7 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s2 -> s2 [74, 81] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s2 -> s8 [82, 82] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s2 -> s2 [83, 65535] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s3 -> s1 [0, 72] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s3 -> s2 [0, 72] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s3 -> s3 [0, 65535] { R16721 += 1, R16676 += 1, R16677 += 1 };
  s3 -> s4 [73, 73] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s3 -> s5 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s3 -> s6 [73, 73] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s3 -> s7 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s3 -> s2 [74, 81] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s3 -> s1 [74, 65535] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s3 -> s8 [82, 82] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s3 -> s2 [83, 65535] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s5 -> s5 [0, 81] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s5 -> s12 [82, 82] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s5 -> s5 [83, 65535] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s6 -> s5 [0, 81] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s6 -> s6 [0, 65535] { R16721 += 1, R16677 += 1, R16612 += 1, R16613 += 1 };
  s6 -> s12 [82, 82] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s6 -> s5 [83, 65535] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s8 -> s9 [0, 72] { R16721 += 1, R16677 += 1 };
  s8 -> s8 [0, 72] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s8 -> s10 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s8 -> s11 [73, 73] { R16721 += 1, R16677 += 1 };
  s8 -> s12 [73, 73] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s8 -> s13 [73, 73] { R16721 += 1, R16677 += 1 };
  s8 -> s9 [74, 65535] { R16721 += 1, R16677 += 1 };
  s8 -> s8 [74, 65535] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s9 -> s9 [0, 72] { R16721 += 1, R16677 += 1 };
  s9 -> s9 [0, 65535] { R16721 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s11 [73, 73] { R16721 += 1, R16677 += 1 };
  s9 -> s13 [73, 73] { R16721 += 1, R16677 += 1 };
  s9 -> s9 [74, 65535] { R16721 += 1, R16677 += 1 };
  s11 -> s14 [0, 65535];
  s11 -> s11 [0, 65535] { R16721 += 1 };
  s12 -> s12 [0, 65535] { R16721 += 1, R16677 += 1, R16613 += 1 };
  s12 -> s13 [0, 65535] { R16721 += 1, R16677 += 1 };
  s13 -> s14 [0, 65535];
  s13 -> s15 [0, 65535] { R16721 += 1 };
  s13 -> s13 [0, 65535] { R16721 += 1, R16677 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R16721 += 1 };
  accepting s13, s9, s14, s15, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s0 -> s0 [0, 65535] { R16722 += 1, R16723 += 1 };
  s0 -> s2 [0, 65535] { R16723 += 1, R16678 += 1, R16679 += 1 };
  s0 -> s3 [73, 73] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s0 -> s4 [73, 73] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s0 -> s1 [74, 65535] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s1 -> s1 [0, 72] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s1 -> s1 [0, 65535] { R16723 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s1 -> s4 [73, 73] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s1 -> s1 [74, 65535] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s2 -> s1 [0, 72] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s2 -> s2 [0, 65535] { R16723 += 1, R16678 += 1, R16679 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s2 -> s4 [73, 73] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s2 -> s1 [74, 65535] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s3 -> s3 [0, 65535] { R16723 += 1, R16679 += 1, R16616 += 1, R16617 += 1 };
  s3 -> s6 [0, 65535] { R16723 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16723 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16723 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s2 [0, 65535] { R16725 += 1, R16680 += 1, R16681 += 1 };
  s0 -> s0 [0, 65535] { R16724 += 1, R16725 += 1 };
  s0 -> s3 [73, 73] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s4 [73, 73] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s1 [74, 65535] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [0, 72] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16725 += 1 };
  s1 -> s3 [73, 73] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s4 [73, 73] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [74, 65535] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s1 [0, 72] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16725 += 1, R16680 += 1, R16681 += 1 };
  s2 -> s3 [73, 73] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s4 [73, 73] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s1 [74, 65535] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16725 += 1, R16681 += 1, R16622 += 1, R16623 += 1 };
  s3 -> s6 [0, 65535] { R16725 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16725 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16725 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R16725 && R20 - R16725 = -1 && R21 = R16725 && R22 - R16725 = -1 && R23 = R16725 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R16615 + -1*R16613 - R53 = 0 && R52 + R16614 + R16612 = 0 && R16666 = 0 && R16667 = 0 && R16672 = 0 && R16673 = 0 && R16676 = 0 && R16677 = 0 && R16682 = 0 && R16683 = R16725 && R16684 = 0 && R16685 = R16725 && R16686 = 0 && R16687 = R16725 && R16688 = 0 && R16689 = R16725 && R16690 = 0 && R16691 = R16725 && R16692 = 0 && R16693 = R16725 && R16694 = 0 && R16695 = R16725 && R16696 = 0 && R16697 = R16725 && R16698 = 0 && R16699 = R16725 && R16700 = 0 && R16701 = R16725 && R16702 = 0 && R16703 = R16725 && R16704 = 0 && R16705 = R16725 && R16706 = 0 && R16707 = R16725 && R16708 = 0 && R16709 = R16725 && R16710 = 0 && R16711 = R16725 && R16712 = 0 && R16713 = R16725 && R16714 = 0 && R16715 = R16725 && R16716 = 0 && R16717 = R16725 && R16718 = 0 && R16719 = R16725 && R16720 = 0 && R16721 = R16725 && R16722 = 0 && R16723 = R16725 && R16724 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R16615 + -1*R16613 - R53 < 1 && 0 < R16725 && (R1 != 0 || R17 = 0 || (R16626 = 0 && R16627 = 0)) && (R1 != 0 || R17 = 0 || (R16628 = 0 && R16629 = 0)) && (R1 != 0 || R17 = 0 || (R16630 = 0 && R16631 = 0)) && (R1 != 0 || R17 = 0 || (R16632 = 0 && R16633 = 0)) && (R1 != 0 || R17 = 0 || (R16634 = 0 && R16635 = 0)) && (R1 != 0 || R17 = 0 || (R16636 = 0 && R16637 = 0)) && (R1 != 0 || R17 = 0 || (R16638 = 0 && R16639 = 0)) && (R1 != 0 || R17 = 0 || (R16640 = 0 && R16641 = 0)) && (R1 != 0 || R17 = 0 || (R16642 = 0 && R16643 = 0)) && (R1 != 0 || R17 = 0 || (R16644 = 0 && R16645 = 0)) && (R48 + R15341 + R15338 != 0 || ((R42 + R15334 + R15332 != 0 || R43 + R15335 + R15333 + -1*R16615 + -1*R16613 - R53 = 0 || R53 + R16615 + R16613 < 1) && (R42 + R15334 + R15332 = 0 || R53 + R16615 + R16613 < 1))) && (R48 + R15341 + R15338 != 0 || ((R46 + R15339 + R15336 != 0 || R47 + R15340 + R15337 + -1*R16615 + -1*R16613 - R53 = 0 || R53 + R16615 + R16613 < 1) && (R46 + R15339 + R15336 = 0 || R53 + R16615 + R16613 < 1))) && (R16626 != 0 || R1 = R16627 || R1 < 1) && (R16628 != 0 || R1 = R16629 || R1 < 1) && (R16630 != 0 || R1 = R16631 || R1 < 1) && (R16632 != 0 || R1 = R16633 || R1 < 1) && (R16634 != 0 || R1 = R16635 || R1 < 1) && (R16636 != 0 || R1 = R16637 || R1 < 1) && (R16638 != 0 || R1 = R16639 || R1 < 1) && (R16640 != 0 || R1 = R16641 || R1 < 1) && (R16642 != 0 || R1 = R16643 || R1 < 1) && (R16644 != 0 || R1 = R16645 || R1 < 1) && (R18 = 0 || (R16664 = 0 && R16665 = 0)) && (R18 = 0 || (R16668 = 0 && R16669 = 0)) && (R18 = 0 || (R16670 = 0 && R16671 = 0)) && (R18 = 0 || (R16674 = 0 && R16675 = 0)) && (R18 = 0 || (R16678 = 0 && R16679 = 0)) && (R18 = 0 || (R16680 = 0 && R16681 = 0)) && (R19 = 0 || (R16646 = 0 && R16647 = 0)) && (R19 = 0 || (R16648 = 0 && R16649 = 0)) && (R19 = 0 || (R16650 = 0 && R16651 = 0)) && (R19 = 0 || (R16652 = 0 && R16653 = 0)) && (R19 = 0 || (R16654 = 0 && R16655 = 0)) && (R19 = 0 || (R16656 = 0 && R16657 = 0)) && (R19 = 0 || (R16658 = 0 && R16659 = 0)) && (R19 = 0 || (R16660 = 0 && R16661 = 0)) && (R19 = 0 || (R16662 = 0 && R16663 = 0)) && (R48 + R15341 + R15338 = 0 || (R42 + R15334 + R15332 = 0 && R43 + R15335 + R15333 + -1*R16615 + -1*R16613 - R53 = 0)) && (R48 + R15341 + R15338 = 0 || (R46 + R15339 + R15336 = 0 && R47 + R15340 + R15337 + -1*R16615 + -1*R16613 - R53 = 0)) && (R58 + R16621 + R16618 = 0 || (R56 + R16619 + R16616 = 0 && R57 + R16620 + R16617 = 0)) && (R58 + R16621 + R16618 = 0 || (R62 + R16624 + R16622 = 0 && R63 + R16625 + R16623 = 0)) && (R16626 = 0 || R1 < 1) && (R16628 = 0 || R1 < 1) && (R16630 = 0 || R1 < 1) && (R16632 = 0 || R1 < 1) && (R16634 = 0 || R1 < 1) && (R16636 = 0 || R1 < 1) && (R16638 = 0 || R1 < 1) && (R16640 = 0 || R1 < 1) && (R16642 = 0 || R1 < 1) && (R16644 = 0 || R1 < 1);
// End of Parikh automata intersection problem
