// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R15332, R15333, R15334, R15335, R15336, R15337, R15338, R15339, R15340, R15341, R17, R17882, R17883, R17884, R17885, R18, R18308, R18309, R18310, R18311, R18312, R18313, R18314, R18315, R18316, R18317, R18318, R18319, R18320, R18321, R18322, R18323, R18324, R18325, R18326, R18327, R18328, R18329, R18330, R18331, R18332, R18333, R18334, R18335, R18336, R18337, R18338, R18339, R18340, R18341, R18342, R18343, R18344, R18345, R18346, R18347, R18348, R18349, R18350, R18351, R18352, R18353, R18354, R18355, R18356, R18357, R18358, R18359, R18360, R18361, R18362, R18363, R18364, R18365, R18366, R18367, R18368, R18369, R18370, R18371, R18372, R18373, R18374, R18375, R18376, R18377, R18378, R18379, R18380, R18381, R18382, R18383, R18384, R18385, R18386, R18387, R18388, R18389, R18390, R18391, R18392, R18393, R18394, R18395, R18396, R18397, R18398, R18399, R18400, R18401, R18402, R18403, R18404, R18405, R18406, R18407, R18408, R18409, R18410, R18411, R18412, R18413, R18414, R18415, R18416, R18417, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18339 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R18338 += 1, R18339 += 1 };
  s1 -> s1 [0, 65535] { R18339 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R18341 += 1 };
  s0 -> s0 [0, 65535] { R18340 += 1, R18341 += 1 };
  s0 -> s2 [73, 73] { R18341 += 1 };
  s0 -> s3 [73, 73] { R18341 += 1 };
  s0 -> s1 [82, 65535] { R18341 += 1 };
  s1 -> s1 [0, 72] { R18341 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18341 += 1 };
  s1 -> s3 [73, 73] { R18341 += 1 };
  s1 -> s1 [82, 65535] { R18341 += 1 };
  s2 -> s2 [0, 73] { R18341 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R18341 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R18343 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R18342 += 1, R18343 += 1 };
  s0 -> s2 [73, 73] { R18343 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R18343 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R18343 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R18343 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18343 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R18343 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R18343 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18343 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R18345 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R18344 += 1, R18345 += 1 };
  s0 -> s2 [73, 73] { R18345 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R18345 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R18345 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R18345 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18345 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R18345 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R18345 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R18345 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R18347 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R18346 += 1, R18347 += 1 };
  s0 -> s2 [73, 73] { R18347 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R18347 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R18347 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R18347 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18347 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R18347 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R18347 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18347 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R18349 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R18348 += 1, R18349 += 1 };
  s0 -> s2 [73, 73] { R18349 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R18349 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R18349 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R18349 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18349 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R18349 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R18349 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18349 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R18351 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R18350 += 1, R18351 += 1 };
  s0 -> s2 [73, 73] { R18351 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R18351 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R18351 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R18351 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18351 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R18351 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R18351 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18351 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R18353 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R18352 += 1, R18353 += 1 };
  s0 -> s2 [73, 73] { R18353 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R18353 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R18353 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R18353 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18353 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R18353 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R18353 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18353 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R18355 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R18354 += 1, R18355 += 1 };
  s0 -> s2 [73, 73] { R18355 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R18355 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R18355 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R18355 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18355 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R18355 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R18355 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18355 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R18375 += 1 };
  s0 -> s0 [0, 65535] { R18374 += 1, R18375 += 1 };
  s0 -> s2 [73, 73] { R18375 += 1 };
  s0 -> s1 [74, 65535] { R18375 += 1 };
  s1 -> s1 [0, 72] { R18375 += 1 };
  s1 -> s2 [73, 73] { R18375 += 1 };
  s1 -> s1 [74, 65535] { R18375 += 1 };
  s2 -> s2 [0, 65535] { R18375 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18377 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R18376 += 1, R18377 += 1 };
  s1 -> s1 [0, 65535] { R18377 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R18379 += 1 };
  s0 -> s0 [0, 65535] { R18378 += 1, R18379 += 1 };
  s0 -> s2 [0, 65535] { R18379 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R18379 += 1 };
  s0 -> s1 [74, 65535] { R18379 += 1 };
  s1 -> s1 [0, 72] { R18379 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R18379 += 1 };
  s1 -> s1 [74, 65535] { R18379 += 1 };
  s2 -> s1 [0, 72] { R18379 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18379 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R18379 += 1 };
  s2 -> s1 [74, 65535] { R18379 += 1 };
  s3 -> s3 [0, 65535] { R18379 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R18381 += 1, R18319 += 1 };
  s0 -> s2 [0, 65535] { R18381 += 1, R18318 += 1, R18319 += 1 };
  s0 -> s0 [0, 65535] { R18380 += 1, R18381 += 1 };
  s0 -> s1 [74, 65535] { R18381 += 1, R18319 += 1 };
  s1 -> s1 [0, 72] { R18381 += 1, R18319 += 1 };
  s1 -> s1 [0, 65535] { R18381 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R18381 += 1, R18319 += 1 };
  s2 -> s1 [0, 72] { R18381 += 1, R18319 += 1 };
  s2 -> s2 [0, 65535] { R18381 += 1, R18318 += 1, R18319 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R18381 += 1, R18319 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18383 += 1, R18320 += 1, R18321 += 1 };
  s0 -> s0 [0, 65535] { R18382 += 1, R18383 += 1 };
  s0 -> s2 [0, 65535] { R18383 += 1, R18321 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18383 += 1, R18320 += 1, R18321 += 1 };
  s1 -> s2 [0, 65535] { R18383 += 1, R18321 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18383 += 1, R18321 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R18383 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18383 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R18385 += 1, R18323 += 1 };
  s0 -> s2 [0, 65535] { R18385 += 1, R18322 += 1, R18323 += 1 };
  s0 -> s0 [0, 65535] { R18384 += 1, R18385 += 1 };
  s0 -> s1 [81, 65535] { R18385 += 1, R18323 += 1 };
  s1 -> s1 [0, 73] { R18385 += 1, R18323 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18385 += 1 };
  s1 -> s1 [81, 65535] { R18385 += 1, R18323 += 1 };
  s2 -> s1 [0, 73] { R18385 += 1, R18323 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18385 += 1, R18322 += 1, R18323 += 1 };
  s2 -> s1 [81, 65535] { R18385 += 1, R18323 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18387 += 1, R18324 += 1, R18325 += 1 };
  s0 -> s0 [0, 65535] { R18386 += 1, R18387 += 1 };
  s0 -> s2 [0, 65535] { R18387 += 1, R18325 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18387 += 1, R18324 += 1, R18325 += 1 };
  s1 -> s2 [0, 65535] { R18387 += 1, R18325 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18387 += 1, R18325 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R18387 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18387 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R18389 += 1, R18327 += 1 };
  s0 -> s2 [0, 65535] { R18389 += 1, R18327 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R18389 += 1, R18326 += 1, R18327 += 1 };
  s0 -> s0 [0, 65535] { R18388 += 1, R18389 += 1 };
  s0 -> s1 [82, 65535] { R18389 += 1, R18327 += 1 };
  s1 -> s1 [0, 80] { R18389 += 1, R18327 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18389 += 1 };
  s1 -> s1 [82, 65535] { R18389 += 1, R18327 += 1 };
  s2 -> s1 [0, 80] { R18389 += 1, R18327 += 1 };
  s2 -> s5 [0, 65535] { R18389 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18389 += 1, R18327 += 1, R69 += 1 };
  s2 -> s1 [82, 65535] { R18389 += 1, R18327 += 1 };
  s3 -> s1 [0, 80] { R18389 += 1, R18327 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R18389 += 1, R18327 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R18389 += 1, R18326 += 1, R18327 += 1 };
  s3 -> s1 [82, 65535] { R18389 += 1, R18327 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18389 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R18391 += 1, R18329 += 1, R15335 += 1 };
  s0 -> s0 [0, 65535] { R18390 += 1, R18391 += 1 };
  s0 -> s1 [0, 65535] { R18391 += 1, R18329 += 1 };
  s0 -> s2 [0, 65535] { R18391 += 1, R18328 += 1, R18329 += 1 };
  s0 -> s1 [82, 65535] { R18391 += 1, R18329 += 1, R15335 += 1 };
  s1 -> s1 [0, 80] { R18391 += 1, R18329 += 1, R15335 += 1 };
  s1 -> s4 [0, 65535] { R18391 += 1 };
  s1 -> s1 [0, 65535] { R18391 += 1, R18329 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R18391 += 1, R18329 += 1, R15335 += 1 };
  s2 -> s1 [0, 80] { R18391 += 1, R18329 += 1, R15335 += 1 };
  s2 -> s1 [0, 65535] { R18391 += 1, R18329 += 1 };
  s2 -> s2 [0, 65535] { R18391 += 1, R18328 += 1, R18329 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R18391 += 1, R18329 += 1, R15335 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18391 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R18393 += 1, R18330 += 1, R18331 += 1 };
  s0 -> s2 [0, 65535] { R18393 += 1, R18331 += 1, R15340 += 1, R15341 += 1 };
  s0 -> s3 [0, 65535] { R18393 += 1, R18331 += 1, R15339 += 1, R15340 += 1 };
  s0 -> s0 [0, 65535] { R18392 += 1, R18393 += 1 };
  s1 -> s1 [0, 65535] { R18393 += 1, R18330 += 1, R18331 += 1 };
  s1 -> s2 [0, 65535] { R18393 += 1, R18331 += 1, R15340 += 1, R15341 += 1 };
  s1 -> s3 [0, 65535] { R18393 += 1, R18331 += 1, R15339 += 1, R15340 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18393 += 1, R18331 += 1, R15340 += 1, R15341 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18393 += 1 };
  s2 -> s6 [0, 65535] { R18393 += 1, R18331 += 1 };
  s3 -> s2 [0, 65535] { R18393 += 1, R18331 += 1, R15340 += 1, R15341 += 1 };
  s3 -> s3 [0, 65535] { R18393 += 1, R18331 += 1, R15339 += 1, R15340 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18393 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18393 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18393 += 1 };
  s6 -> s6 [0, 65535] { R18393 += 1, R18331 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s0 -> s2 [0, 65535] { R18395 += 1, R18332 += 1, R18333 += 1 };
  s0 -> s0 [0, 65535] { R18394 += 1, R18395 += 1 };
  s0 -> s3 [82, 82] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s0 -> s1 [83, 65535] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s1 -> s1 [0, 81] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s1 -> s3 [82, 82] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s1 -> s1 [83, 65535] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s2 -> s1 [0, 81] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s2 -> s2 [0, 65535] { R18395 += 1, R18332 += 1, R18333 += 1 };
  s2 -> s3 [82, 82] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s2 -> s1 [83, 65535] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s3 -> s3 [0, 65535] { R18395 += 1, R18333 += 1, R17885 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18395 += 1 };
  s3 -> s6 [0, 65535] { R18395 += 1, R18333 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18395 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18395 += 1 };
  s6 -> s6 [0, 65535] { R18395 += 1, R18333 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R18397 += 1, R18334 += 1, R18335 += 1 };
  s0 -> s2 [0, 65535] { R18397 += 1, R18335 += 1, R18312 += 1, R18313 += 1 };
  s0 -> s0 [0, 65535] { R18396 += 1, R18397 += 1 };
  s0 -> s3 [0, 65535] { R18397 += 1, R18335 += 1 };
  s1 -> s1 [0, 65535] { R18397 += 1, R18334 += 1, R18335 += 1 };
  s1 -> s2 [0, 65535] { R18397 += 1, R18335 += 1, R18312 += 1, R18313 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R18397 += 1, R18335 += 1 };
  s2 -> s2 [0, 65535] { R18397 += 1, R18335 += 1, R18312 += 1, R18313 += 1 };
  s2 -> s4 [0, 65535] { R18397 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18397 += 1, R18335 += 1 };
  s3 -> s4 [0, 65535] { R18397 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18397 += 1, R18335 += 1 };
  s4 -> s4 [0, 65535] { R18397 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s0 -> s2 [0, 65535] { R18399 += 1, R18336 += 1, R18337 += 1 };
  s0 -> s0 [0, 65535] { R18398 += 1, R18399 += 1 };
  s0 -> s3 [0, 65535] { R18399 += 1, R18337 += 1, R18316 += 1, R18317 += 1 };
  s0 -> s4 [81, 81] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s0 -> s5 [81, 81] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s0 -> s1 [83, 65535] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s1 -> s1 [0, 80] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s1 -> s1 [0, 65535] { R18399 += 1, R18337 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R18399 += 1 };
  s1 -> s4 [81, 81] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s1 -> s5 [81, 81] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s1 -> s1 [83, 65535] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s2 -> s1 [0, 80] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s2 -> s2 [0, 65535] { R18399 += 1, R18336 += 1, R18337 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R18399 += 1, R18337 += 1, R18316 += 1, R18317 += 1 };
  s2 -> s4 [81, 81] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s2 -> s5 [81, 81] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s2 -> s1 [83, 65535] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s3 -> s1 [0, 80] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R18399 += 1 };
  s3 -> s3 [0, 65535] { R18399 += 1, R18337 += 1, R18316 += 1, R18317 += 1 };
  s3 -> s4 [81, 81] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s3 -> s5 [81, 81] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s3 -> s1 [83, 65535] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s4 -> s4 [0, 65535] { R18399 += 1, R18337 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R18399 += 1 };
  s5 -> s5 [0, 81] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R18399 += 1 };
  s5 -> s5 [0, 65535] { R18399 += 1, R18337 += 1 };
  s5 -> s5 [83, 65535] { R18399 += 1, R18337 += 1, R18317 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18399 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R18401 += 1, R18357 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R18400 += 1, R18401 += 1 };
  s0 -> s2 [0, 65535] { R18401 += 1, R18356 += 1, R18357 += 1 };
  s1 -> s1 [0, 65535] { R18401 += 1, R18357 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18401 += 1 };
  s2 -> s1 [0, 65535] { R18401 += 1, R18357 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R18401 += 1, R18356 += 1, R18357 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18401 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R18403 += 1, R18359 += 1 };
  s0 -> s0 [0, 65535] { R18402 += 1, R18403 += 1 };
  s0 -> s2 [0, 65535] { R18403 += 1, R18358 += 1, R18359 += 1 };
  s0 -> s3 [73, 73] { R18403 += 1, R18359 += 1 };
  s0 -> s4 [73, 73] { R18403 += 1, R18359 += 1 };
  s0 -> s5 [81, 81] { R18403 += 1, R18359 += 1 };
  s0 -> s1 [82, 65535] { R18403 += 1, R18359 += 1 };
  s1 -> s1 [0, 72] { R18403 += 1, R18359 += 1 };
  s1 -> s3 [73, 73] { R18403 += 1, R18359 += 1 };
  s1 -> s4 [73, 73] { R18403 += 1, R18359 += 1 };
  s1 -> s5 [81, 81] { R18403 += 1, R18359 += 1 };
  s1 -> s1 [82, 65535] { R18403 += 1, R18359 += 1 };
  s2 -> s1 [0, 72] { R18403 += 1, R18359 += 1 };
  s2 -> s2 [0, 65535] { R18403 += 1, R18358 += 1, R18359 += 1 };
  s2 -> s3 [73, 73] { R18403 += 1, R18359 += 1 };
  s2 -> s4 [73, 73] { R18403 += 1, R18359 += 1 };
  s2 -> s5 [81, 81] { R18403 += 1, R18359 += 1 };
  s2 -> s1 [82, 65535] { R18403 += 1, R18359 += 1 };
  s3 -> s3 [0, 73] { R18403 += 1, R18359 += 1 };
  s3 -> s8 [81, 81] { R18403 += 1, R18359 += 1 };
  s3 -> s3 [82, 65535] { R18403 += 1, R18359 += 1 };
  s5 -> s5 [0, 72] { R18403 += 1, R18359 += 1 };
  s5 -> s5 [0, 65535] { R18403 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R18403 += 1, R18359 += 1 };
  s5 -> s8 [73, 73] { R18403 += 1, R18359 += 1 };
  s5 -> s5 [81, 65535] { R18403 += 1, R18359 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18403 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R18403 += 1, R18359 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18403 += 1 };
  s8 -> s8 [81, 65535] { R18403 += 1, R18359 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R18405 += 1, R18361 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R18405 += 1, R18360 += 1, R18361 += 1 };
  s0 -> s0 [0, 65535] { R18404 += 1, R18405 += 1 };
  s0 -> s3 [73, 73] { R18405 += 1, R18361 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R18405 += 1, R18361 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R18405 += 1, R18361 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R18405 += 1, R18361 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18405 += 1 };
  s1 -> s3 [73, 73] { R18405 += 1, R18361 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R18405 += 1, R18361 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R18405 += 1, R18361 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R18405 += 1, R18361 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R18405 += 1, R18360 += 1, R18361 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R18405 += 1, R18361 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R18405 += 1, R18361 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R18405 += 1, R18361 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R18405 += 1, R18361 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R18405 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18405 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18405 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R18407 += 1, R18363 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R18406 += 1, R18407 += 1 };
  s0 -> s2 [0, 65535] { R18407 += 1, R18362 += 1, R18363 += 1 };
  s0 -> s3 [73, 73] { R18407 += 1, R18363 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R18407 += 1, R18363 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R18407 += 1, R18363 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R18407 += 1, R18363 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R18407 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R18407 += 1, R18363 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R18407 += 1, R18363 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R18407 += 1, R18363 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R18407 += 1, R18363 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18407 += 1, R18362 += 1, R18363 += 1 };
  s2 -> s3 [73, 73] { R18407 += 1, R18363 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R18407 += 1, R18363 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R18407 += 1, R18363 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R18407 += 1, R18363 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R18407 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18407 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18407 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s2 [0, 72] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s0 -> s0 [0, 65535] { R18408 += 1, R18409 += 1 };
  s0 -> s3 [0, 65535] { R18409 += 1, R18364 += 1, R18365 += 1 };
  s0 -> s4 [73, 73] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s0 -> s5 [73, 73] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s0 -> s6 [73, 73] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s7 [73, 73] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s2 [74, 80] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s0 -> s1 [74, 65535] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s2 [82, 65535] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s1 -> s1 [0, 72] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s2 [0, 72] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s1 -> s4 [73, 73] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s1 -> s5 [73, 73] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s1 -> s6 [73, 73] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s7 [73, 73] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s2 [74, 80] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s1 -> s1 [74, 65535] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s2 [82, 65535] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s2 -> s2 [0, 72] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R18409 += 1 };
  s2 -> s4 [73, 73] { R18409 += 1, R18365 += 1 };
  s2 -> s5 [73, 73] { R18409 += 1, R18365 += 1 };
  s2 -> s2 [74, 80] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s2 -> s2 [74, 65535] { R18409 += 1, R18365 += 1 };
  s2 -> s2 [82, 65535] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s3 -> s1 [0, 72] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s2 [0, 72] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s3 -> s3 [0, 65535] { R18409 += 1, R18364 += 1, R18365 += 1 };
  s3 -> s4 [73, 73] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s3 -> s5 [73, 73] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s3 -> s6 [73, 73] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s7 [73, 73] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s2 [74, 80] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s3 -> s1 [74, 65535] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s2 [82, 65535] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R18409 += 1 };
  s5 -> s5 [0, 80] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R18409 += 1, R18365 += 1 };
  s5 -> s9 [0, 65535] { R18409 += 1 };
  s5 -> s5 [82, 65535] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s6 -> s5 [0, 80] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s6 -> s6 [0, 65535] { R18409 += 1, R18365 += 1, R15332 += 1, R15333 += 1 };
  s6 -> s5 [82, 65535] { R18409 += 1, R18365 += 1, R15333 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18409 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s2 [0, 65535] { R18411 += 1, R18366 += 1, R18367 += 1 };
  s0 -> s0 [0, 65535] { R18410 += 1, R18411 += 1 };
  s0 -> s3 [73, 73] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s4 [73, 73] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s1 [74, 65535] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [0, 72] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18411 += 1 };
  s1 -> s3 [73, 73] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s4 [73, 73] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [74, 65535] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [0, 72] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s2 [0, 65535] { R18411 += 1, R18366 += 1, R18367 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s4 [73, 73] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [74, 65535] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s3 -> s3 [0, 65535] { R18411 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18411 += 1, R18367 += 1, R15336 += 1, R15337 += 1 };
  s4 -> s5 [0, 65535] { R18411 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18411 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s2 [0, 72] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s0 -> s3 [0, 65535] { R18413 += 1, R18368 += 1, R18369 += 1 };
  s0 -> s0 [0, 65535] { R18412 += 1, R18413 += 1 };
  s0 -> s4 [73, 73] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s0 -> s5 [73, 73] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s0 -> s6 [73, 73] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s7 [73, 73] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s2 [74, 81] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s0 -> s1 [74, 65535] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s2 [83, 65535] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s1 -> s1 [0, 72] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s1 -> s2 [0, 72] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s1 -> s4 [73, 73] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s1 -> s5 [73, 73] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s1 -> s6 [73, 73] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s1 -> s7 [73, 73] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s1 -> s2 [74, 81] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s1 -> s1 [74, 65535] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s1 -> s2 [83, 65535] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s2 -> s2 [0, 72] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s2 -> s2 [0, 65535] { R18413 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s2 -> s5 [73, 73] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s2 -> s2 [74, 81] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s2 -> s2 [83, 65535] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s3 -> s1 [0, 72] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s2 [0, 72] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s3 -> s3 [0, 65535] { R18413 += 1, R18368 += 1, R18369 += 1 };
  s3 -> s4 [73, 73] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s3 -> s5 [73, 73] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s3 -> s6 [73, 73] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s7 [73, 73] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s2 [74, 81] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s3 -> s1 [74, 65535] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s2 [83, 65535] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s4 -> s4 [0, 81] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s4 -> s4 [0, 65535] { R18413 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [83, 65535] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s5 -> s5 [0, 65535] { R18413 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 81] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s7 -> s7 [0, 65535] { R18413 += 1, R18369 += 1, R17882 += 1, R17883 += 1 };
  s7 -> s4 [83, 65535] { R18413 += 1, R18369 += 1, R17883 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s0 -> s2 [0, 72] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s0 -> s0 [0, 65535] { R18414 += 1, R18415 += 1 };
  s0 -> s3 [0, 65535] { R18415 += 1, R18370 += 1, R18371 += 1 };
  s0 -> s4 [73, 73] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s0 -> s5 [73, 73] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s0 -> s6 [73, 73] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s0 -> s7 [73, 73] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s0 -> s1 [74, 65535] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s0 -> s2 [74, 65535] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s1 -> s1 [0, 72] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R18415 += 1 };
  s1 -> s5 [73, 73] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s1 -> s7 [73, 73] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s1 -> s1 [74, 65535] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s2 -> s1 [0, 72] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s2 -> s2 [0, 72] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s2 -> s4 [73, 73] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s2 -> s5 [73, 73] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s2 -> s6 [73, 73] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s2 -> s7 [73, 73] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s2 -> s1 [74, 65535] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s2 -> s2 [74, 65535] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s3 -> s1 [0, 72] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s3 -> s2 [0, 72] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s3 -> s3 [0, 65535] { R18415 += 1, R18370 += 1, R18371 += 1 };
  s3 -> s4 [73, 73] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s3 -> s5 [73, 73] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s3 -> s6 [73, 73] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s3 -> s7 [73, 73] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s3 -> s1 [74, 65535] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s3 -> s2 [74, 65535] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s5 -> s5 [0, 65535] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R18415 += 1 };
  s6 -> s5 [0, 65535] { R18415 += 1, R18371 += 1, R18309 += 1, R18310 += 1 };
  s6 -> s6 [0, 65535] { R18415 += 1, R18371 += 1, R18308 += 1, R18309 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R18415 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18415 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s0 -> s2 [0, 65535] { R18417 += 1, R18372 += 1, R18373 += 1 };
  s0 -> s0 [0, 65535] { R18416 += 1, R18417 += 1 };
  s0 -> s3 [73, 73] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s0 -> s4 [73, 73] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s0 -> s1 [74, 65535] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s1 -> s1 [0, 72] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s1 -> s1 [0, 65535] { R18417 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s1 -> s4 [73, 73] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s1 -> s1 [74, 65535] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s2 -> s1 [0, 72] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s2 -> s2 [0, 65535] { R18417 += 1, R18372 += 1, R18373 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s2 -> s4 [73, 73] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s2 -> s1 [74, 65535] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s3 -> s3 [0, 65535] { R18417 += 1, R18373 += 1, R18314 += 1, R18315 += 1 };
  s3 -> s6 [0, 65535] { R18417 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18417 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18417 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R18333 && R2 = R18417 && R20 - R18417 = -1 && R21 = R18417 && R22 - R18417 = -1 && R23 = R18417 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17885 + -1*R17883 - R53 = 0 && R52 + R17884 + R17882 = 0 && R18332 = 0 && R18358 = 0 && R18359 = 0 && R18364 = 0 && R18365 = 0 && R18368 = 0 && R18369 = 0 && R18370 = 0 && R18371 = 0 && R18374 = 0 && R18375 = R18417 && R18376 = 0 && R18377 = R18417 && R18378 = 0 && R18379 = R18417 && R18380 = 0 && R18381 = R18417 && R18382 = 0 && R18383 = R18417 && R18384 = 0 && R18385 = R18417 && R18386 = 0 && R18387 = R18417 && R18388 = 0 && R18389 = R18417 && R18390 = 0 && R18391 = R18417 && R18392 = 0 && R18393 = R18417 && R18394 = 0 && R18395 = R18417 && R18396 = 0 && R18397 = R18417 && R18398 = 0 && R18399 = R18417 && R18400 = 0 && R18401 = R18417 && R18402 = 0 && R18403 = R18417 && R18404 = 0 && R18405 = R18417 && R18406 = 0 && R18407 = R18417 && R18408 = 0 && R18409 = R18417 && R18410 = 0 && R18411 = R18417 && R18412 = 0 && R18413 = R18417 && R18414 = 0 && R18415 = R18417 && R18416 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17885 + -1*R17883 - R53 < 1 && -1 < R18333 && 0 < R18417 && (R48 + R15341 + R15338 != 0 || ((R42 + R15334 + R15332 != 0 || R43 + R15335 + R15333 + -1*R17885 + -1*R17883 - R53 = 0 || R53 + R17885 + R17883 < 1) && (R42 + R15334 + R15332 = 0 || R53 + R17885 + R17883 < 1))) && (R48 + R15341 + R15338 != 0 || ((R46 + R15339 + R15336 != 0 || R47 + R15340 + R15337 + -1*R17885 + -1*R17883 - R53 = 0 || R53 + R17885 + R17883 < 1) && (R46 + R15339 + R15336 = 0 || R53 + R17885 + R17883 < 1))) && (R18318 != 0 || R18319 = R18333 || (R17 = 0 && R18333 = 0)) && (R18320 != 0 || R18321 = R18333 || (R17 = 0 && R18333 = 0)) && (R18322 != 0 || R18323 = R18333 || (R17 = 0 && R18333 = 0)) && (R18324 != 0 || R18325 = R18333 || (R17 = 0 && R18333 = 0)) && (R18326 != 0 || R18327 = R18333 || (R17 = 0 && R18333 = 0)) && (R18328 != 0 || R18329 = R18333 || (R17 = 0 && R18333 = 0)) && (R18330 != 0 || R18331 = R18333 || (R17 = 0 && R18333 = 0)) && (R18334 != 0 || R18333 = R18335 || (R17 = 0 && R18333 = 0)) && (R18336 != 0 || R18333 = R18337 || (R17 = 0 && R18333 = 0)) && (R18 = 0 || (R18356 = 0 && R18357 = 0)) && (R18 = 0 || (R18360 = 0 && R18361 = 0)) && (R18 = 0 || (R18362 = 0 && R18363 = 0)) && (R18 = 0 || (R18366 = 0 && R18367 = 0)) && (R18 = 0 || (R18372 = 0 && R18373 = 0)) && (R19 = 0 || (R18338 = 0 && R18339 = 0)) && (R19 = 0 || (R18340 = 0 && R18341 = 0)) && (R19 = 0 || (R18342 = 0 && R18343 = 0)) && (R19 = 0 || (R18344 = 0 && R18345 = 0)) && (R19 = 0 || (R18346 = 0 && R18347 = 0)) && (R19 = 0 || (R18348 = 0 && R18349 = 0)) && (R19 = 0 || (R18350 = 0 && R18351 = 0)) && (R19 = 0 || (R18352 = 0 && R18353 = 0)) && (R19 = 0 || (R18354 = 0 && R18355 = 0)) && (R48 + R15341 + R15338 = 0 || (R42 + R15334 + R15332 = 0 && R43 + R15335 + R15333 + -1*R17885 + -1*R17883 - R53 = 0)) && (R48 + R15341 + R15338 = 0 || (R46 + R15339 + R15336 = 0 && R47 + R15340 + R15337 + -1*R17885 + -1*R17883 - R53 = 0)) && (R58 + R18313 + R18310 = 0 || (R56 + R18311 + R18308 = 0 && R57 + R18312 + R18309 = 0)) && (R58 + R18313 + R18310 = 0 || (R62 + R18316 + R18314 = 0 && R63 + R18317 + R18315 = 0)) && (R18318 = 0 || (R17 = 0 && R18333 = 0)) && (R18320 = 0 || (R17 = 0 && R18333 = 0)) && (R18322 = 0 || (R17 = 0 && R18333 = 0)) && (R18324 = 0 || (R17 = 0 && R18333 = 0)) && (R18326 = 0 || (R17 = 0 && R18333 = 0)) && (R18328 = 0 || (R17 = 0 && R18333 = 0)) && (R18330 = 0 || (R17 = 0 && R18333 = 0)) && (R18334 = 0 || (R17 = 0 && R18333 = 0)) && (R18336 = 0 || (R17 = 0 && R18333 = 0));
// End of Parikh automata intersection problem
