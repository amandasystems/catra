// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10246, R10247, R10248, R10249, R10250, R10251, R10252, R10253, R10254, R10255, R11, R11100, R11101, R11102, R11103, R11104, R11105, R11210, R11211, R11212, R11213, R11214, R11215, R11216, R11217, R11218, R11219, R11220, R11221, R11222, R11223, R11224, R11225, R11226, R11227, R11228, R11229, R11230, R11231, R11232, R11233, R11234, R11235, R11236, R11237, R11238, R11239, R11240, R11241, R11242, R11243, R11244, R11245, R11246, R11247, R11248, R11249, R11250, R11251, R11252, R11253, R11254, R11255, R11256, R11257, R11258, R11259, R11260, R11261, R11262, R11263, R11264, R11265, R11266, R11267, R11268, R11269, R11270, R11271, R11272, R11273, R11274, R11275, R11276, R11277, R11278, R11279, R11280, R11281, R11282, R11283, R11284, R11285, R11286, R11287, R11288, R11289, R11290, R11291, R11292, R11293, R11294, R11295, R11296, R11297, R11298, R11299, R11300, R11301, R11302, R11303, R11304, R11305, R11306, R11307, R11308, R11309, R11310, R11311, R11312, R11313, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11235 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R11234 += 1, R11235 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11235 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R11237 += 1 };
  s0 -> s0 [0, 65535] { R11236 += 1, R11237 += 1 };
  s0 -> s2 [73, 73] { R11237 += 1 };
  s0 -> s3 [73, 73] { R11237 += 1 };
  s0 -> s1 [82, 65535] { R11237 += 1 };
  s1 -> s1 [0, 72] { R11237 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11237 += 1 };
  s1 -> s3 [73, 73] { R11237 += 1 };
  s1 -> s1 [82, 65535] { R11237 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R11237 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R11237 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R11239 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11238 += 1, R11239 += 1 };
  s0 -> s2 [73, 73] { R11239 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R11239 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R11239 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R11239 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11239 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R11239 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R11239 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R11239 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R11241 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11240 += 1, R11241 += 1 };
  s0 -> s2 [73, 73] { R11241 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R11241 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R11241 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R11241 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11241 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R11241 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R11241 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11241 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R11243 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11242 += 1, R11243 += 1 };
  s0 -> s2 [73, 73] { R11243 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R11243 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R11243 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R11243 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11243 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R11243 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R11243 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11243 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R11245 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11244 += 1, R11245 += 1 };
  s0 -> s2 [73, 73] { R11245 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R11245 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R11245 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R11245 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11245 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R11245 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R11245 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11245 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R11247 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11246 += 1, R11247 += 1 };
  s0 -> s2 [73, 73] { R11247 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R11247 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R11247 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R11247 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11247 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R11247 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R11247 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11247 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R11249 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11248 += 1, R11249 += 1 };
  s0 -> s2 [73, 73] { R11249 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R11249 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R11249 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R11249 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11249 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R11249 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R11249 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11249 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R11251 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11250 += 1, R11251 += 1 };
  s0 -> s2 [73, 73] { R11251 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R11251 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R11251 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R11251 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11251 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R11251 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R11251 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11251 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R11271 += 1 };
  s0 -> s0 [0, 65535] { R11270 += 1, R11271 += 1 };
  s0 -> s2 [73, 73] { R11271 += 1 };
  s0 -> s1 [74, 65535] { R11271 += 1 };
  s1 -> s1 [0, 72] { R11271 += 1 };
  s1 -> s2 [73, 73] { R11271 += 1 };
  s1 -> s1 [74, 65535] { R11271 += 1 };
  s2 -> s2 [0, 65535] { R11271 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11273 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R11272 += 1, R11273 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11273 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R11275 += 1 };
  s0 -> s0 [0, 65535] { R11274 += 1, R11275 += 1 };
  s0 -> s2 [0, 65535] { R11275 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R11275 += 1 };
  s0 -> s1 [74, 65535] { R11275 += 1 };
  s1 -> s1 [0, 72] { R11275 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R11275 += 1 };
  s1 -> s1 [74, 65535] { R11275 += 1 };
  s2 -> s1 [0, 72] { R11275 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11275 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R11275 += 1 };
  s2 -> s1 [74, 65535] { R11275 += 1 };
  s3 -> s3 [0, 65535] { R11275 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R11277 += 1, R11215 += 1 };
  s0 -> s2 [0, 65535] { R11277 += 1, R11214 += 1, R11215 += 1 };
  s0 -> s0 [0, 65535] { R11276 += 1, R11277 += 1 };
  s0 -> s1 [74, 65535] { R11277 += 1, R11215 += 1 };
  s1 -> s1 [0, 72] { R11277 += 1, R11215 += 1 };
  s1 -> s1 [0, 65535] { R11277 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R11277 += 1, R11215 += 1 };
  s2 -> s1 [0, 72] { R11277 += 1, R11215 += 1 };
  s2 -> s2 [0, 65535] { R11277 += 1, R11214 += 1, R11215 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R11277 += 1, R11215 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R11278 += 1, R11279 += 1 };
  s0 -> s1 [0, 65535] { R11279 += 1, R11216 += 1, R11217 += 1 };
  s0 -> s2 [0, 65535] { R11279 += 1, R11217 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11279 += 1, R11216 += 1, R11217 += 1 };
  s1 -> s2 [0, 65535] { R11279 += 1, R11217 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11279 += 1, R11217 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R11279 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11279 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R11281 += 1, R11219 += 1 };
  s0 -> s0 [0, 65535] { R11280 += 1, R11281 += 1 };
  s0 -> s2 [0, 65535] { R11281 += 1, R11218 += 1, R11219 += 1 };
  s0 -> s1 [81, 65535] { R11281 += 1, R11219 += 1 };
  s1 -> s1 [0, 73] { R11281 += 1, R11219 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11281 += 1 };
  s1 -> s1 [81, 65535] { R11281 += 1, R11219 += 1 };
  s2 -> s1 [0, 73] { R11281 += 1, R11219 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11281 += 1, R11218 += 1, R11219 += 1 };
  s2 -> s1 [81, 65535] { R11281 += 1, R11219 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11283 += 1, R11221 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R11283 += 1, R11220 += 1, R11221 += 1 };
  s0 -> s0 [0, 65535] { R11282 += 1, R11283 += 1 };
  s1 -> s1 [0, 65535] { R11283 += 1, R11221 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R11283 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11283 += 1, R11221 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R11283 += 1, R11220 += 1, R11221 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11283 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R11285 += 1, R11223 += 1 };
  s0 -> s2 [0, 65535] { R11285 += 1, R11223 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R11284 += 1, R11285 += 1 };
  s0 -> s3 [0, 65535] { R11285 += 1, R11222 += 1, R11223 += 1 };
  s0 -> s1 [82, 65535] { R11285 += 1, R11223 += 1 };
  s1 -> s1 [0, 80] { R11285 += 1, R11223 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11285 += 1 };
  s1 -> s1 [82, 65535] { R11285 += 1, R11223 += 1 };
  s2 -> s1 [0, 80] { R11285 += 1, R11223 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11285 += 1 };
  s2 -> s2 [0, 65535] { R11285 += 1, R11223 += 1, R69 += 1 };
  s2 -> s1 [82, 65535] { R11285 += 1, R11223 += 1 };
  s3 -> s1 [0, 80] { R11285 += 1, R11223 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11285 += 1, R11223 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R11285 += 1, R11222 += 1, R11223 += 1 };
  s3 -> s1 [82, 65535] { R11285 += 1, R11223 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11285 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R11287 += 1, R11225 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R11287 += 1, R11225 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R11287 += 1, R11224 += 1, R11225 += 1 };
  s0 -> s0 [0, 65535] { R11286 += 1, R11287 += 1 };
  s0 -> s1 [82, 65535] { R11287 += 1, R11225 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R11287 += 1, R11225 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11287 += 1, R11225 += 1 };
  s1 -> s5 [0, 65535] { R11287 += 1 };
  s1 -> s1 [82, 65535] { R11287 += 1, R11225 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R11287 += 1, R11225 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R11287 += 1, R11225 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11287 += 1 };
  s2 -> s1 [82, 65535] { R11287 += 1, R11225 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R11287 += 1, R11225 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R11287 += 1, R11225 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11287 += 1, R11224 += 1, R11225 += 1 };
  s3 -> s1 [82, 65535] { R11287 += 1, R11225 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11287 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R11289 += 1, R11227 += 1 };
  s0 -> s0 [0, 65535] { R11288 += 1, R11289 += 1 };
  s0 -> s2 [0, 65535] { R11289 += 1, R11226 += 1, R11227 += 1 };
  s1 -> s1 [0, 65535] { R11289 += 1, R11227 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11289 += 1 };
  s2 -> s1 [0, 65535] { R11289 += 1, R11227 += 1 };
  s2 -> s2 [0, 65535] { R11289 += 1, R11226 += 1, R11227 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11289 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R11291 += 1, R11228 += 1, R11229 += 1 };
  s0 -> s0 [0, 65535] { R11290 += 1, R11291 += 1 };
  s0 -> s2 [0, 65535] { R11291 += 1, R11229 += 1, R10255 += 1 };
  s0 -> s3 [0, 65535] { R11291 += 1, R11229 += 1 };
  s1 -> s1 [0, 65535] { R11291 += 1, R11228 += 1, R11229 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11291 += 1, R11229 += 1, R10255 += 1 };
  s1 -> s3 [0, 65535] { R11291 += 1, R11229 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11291 += 1 };
  s2 -> s2 [0, 65535] { R11291 += 1, R11229 += 1, R10255 += 1 };
  s2 -> s3 [0, 65535] { R11291 += 1, R11229 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11291 += 1 };
  s3 -> s3 [0, 65535] { R11291 += 1, R11229 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11291 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R11292 += 1, R11293 += 1 };
  s0 -> s1 [0, 65535] { R11293 += 1, R11231 += 1 };
  s0 -> s2 [0, 65535] { R11293 += 1, R11230 += 1, R11231 += 1 };
  s1 -> s1 [0, 65535] { R11293 += 1, R11231 += 1 };
  s1 -> s4 [0, 65535] { R11293 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11293 += 1, R11231 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11293 += 1, R11230 += 1, R11231 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11293 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s0 -> s0 [0, 65535] { R11294 += 1, R11295 += 1 };
  s0 -> s2 [0, 65535] { R11295 += 1, R11232 += 1, R11233 += 1 };
  s0 -> s1 [0, 65535] { R11295 += 1, R11233 += 1 };
  s0 -> s3 [81, 81] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s0 -> s4 [81, 81] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s0 -> s1 [83, 65535] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s1 -> s1 [0, 80] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11295 += 1 };
  s1 -> s1 [0, 65535] { R11295 += 1, R11233 += 1 };
  s1 -> s3 [81, 81] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s1 -> s4 [81, 81] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s1 -> s1 [83, 65535] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s2 -> s1 [0, 80] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11295 += 1, R11232 += 1, R11233 += 1 };
  s2 -> s1 [0, 65535] { R11295 += 1, R11233 += 1 };
  s2 -> s3 [81, 81] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s2 -> s4 [81, 81] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s2 -> s1 [83, 65535] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s3 -> s3 [0, 81] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11295 += 1 };
  s3 -> s3 [0, 65535] { R11295 += 1, R11233 += 1 };
  s3 -> s3 [83, 65535] { R11295 += 1, R11233 += 1, R11213 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11295 += 1 };
  s4 -> s4 [0, 65535] { R11295 += 1, R11233 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11295 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R11297 += 1, R11253 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R11296 += 1, R11297 += 1 };
  s0 -> s2 [0, 65535] { R11297 += 1, R11252 += 1, R11253 += 1 };
  s1 -> s1 [0, 65535] { R11297 += 1, R11253 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R11297 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11297 += 1, R11253 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R11297 += 1, R11252 += 1, R11253 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11297 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R11299 += 1, R11255 += 1 };
  s0 -> s2 [0, 65535] { R11299 += 1, R11254 += 1, R11255 += 1 };
  s0 -> s0 [0, 65535] { R11298 += 1, R11299 += 1 };
  s0 -> s3 [73, 73] { R11299 += 1, R11255 += 1 };
  s0 -> s4 [73, 73] { R11299 += 1, R11255 += 1 };
  s0 -> s5 [81, 81] { R11299 += 1, R11255 += 1 };
  s0 -> s1 [82, 65535] { R11299 += 1, R11255 += 1 };
  s1 -> s1 [0, 72] { R11299 += 1, R11255 += 1 };
  s1 -> s3 [73, 73] { R11299 += 1, R11255 += 1 };
  s1 -> s4 [73, 73] { R11299 += 1, R11255 += 1 };
  s1 -> s5 [81, 81] { R11299 += 1, R11255 += 1 };
  s1 -> s1 [82, 65535] { R11299 += 1, R11255 += 1 };
  s2 -> s1 [0, 72] { R11299 += 1, R11255 += 1 };
  s2 -> s2 [0, 65535] { R11299 += 1, R11254 += 1, R11255 += 1 };
  s2 -> s3 [73, 73] { R11299 += 1, R11255 += 1 };
  s2 -> s4 [73, 73] { R11299 += 1, R11255 += 1 };
  s2 -> s5 [81, 81] { R11299 += 1, R11255 += 1 };
  s2 -> s1 [82, 65535] { R11299 += 1, R11255 += 1 };
  s4 -> s4 [0, 73] { R11299 += 1, R11255 += 1 };
  s4 -> s7 [81, 81] { R11299 += 1, R11255 += 1 };
  s4 -> s4 [82, 65535] { R11299 += 1, R11255 += 1 };
  s5 -> s5 [0, 72] { R11299 += 1, R11255 += 1 };
  s5 -> s5 [0, 65535] { R11299 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R11299 += 1, R11255 += 1 };
  s5 -> s8 [73, 73] { R11299 += 1, R11255 += 1 };
  s5 -> s5 [81, 65535] { R11299 += 1, R11255 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R11299 += 1, R11255 += 1 };
  s7 -> s7 [0, 65535] { R11299 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R11299 += 1, R11255 += 1 };
  s8 -> s8 [0, 65535] { R11299 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R11301 += 1, R11257 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R11301 += 1, R11256 += 1, R11257 += 1 };
  s0 -> s0 [0, 65535] { R11300 += 1, R11301 += 1 };
  s0 -> s3 [73, 73] { R11301 += 1, R11257 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R11301 += 1, R11257 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R11301 += 1, R11257 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R11301 += 1, R11257 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11301 += 1 };
  s1 -> s3 [73, 73] { R11301 += 1, R11257 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R11301 += 1, R11257 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R11301 += 1, R11257 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R11301 += 1, R11257 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11301 += 1, R11256 += 1, R11257 += 1 };
  s2 -> s3 [73, 73] { R11301 += 1, R11257 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R11301 += 1, R11257 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R11301 += 1, R11257 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R11301 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11301 += 1, R11257 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11301 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11301 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R11303 += 1, R11259 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R11302 += 1, R11303 += 1 };
  s0 -> s2 [0, 65535] { R11303 += 1, R11258 += 1, R11259 += 1 };
  s0 -> s3 [73, 73] { R11303 += 1, R11259 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R11303 += 1, R11259 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R11303 += 1, R11259 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R11303 += 1, R11259 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R11303 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R11303 += 1, R11259 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R11303 += 1, R11259 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R11303 += 1, R11259 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R11303 += 1, R11259 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11303 += 1, R11258 += 1, R11259 += 1 };
  s2 -> s3 [73, 73] { R11303 += 1, R11259 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R11303 += 1, R11259 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R11303 += 1, R11259 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R11303 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11303 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11303 += 1, R11259 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R11303 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R11304 += 1, R11305 += 1 };
  s0 -> s2 [0, 65535] { R11305 += 1, R11260 += 1, R11261 += 1 };
  s0 -> s3 [73, 73] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R11305 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R11305 += 1, R11260 += 1, R11261 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R11305 += 1, R11261 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R11305 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11305 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11305 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [0, 72] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s3 [0, 65535] { R11307 += 1, R11262 += 1, R11263 += 1 };
  s0 -> s0 [0, 65535] { R11306 += 1, R11307 += 1 };
  s0 -> s4 [73, 73] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s5 [73, 73] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s6 [73, 73] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s7 [73, 73] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s1 [74, 65535] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [74, 65535] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [0, 72] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [0, 72] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s4 [73, 73] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s5 [73, 73] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s6 [73, 73] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s7 [73, 73] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [74, 65535] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [74, 65535] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s11 [0, 72] { R11307 += 1, R11263 += 1 };
  s2 -> s2 [0, 72] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s12 [73, 73] { R11307 += 1, R11263 += 1 };
  s2 -> s6 [73, 73] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s8 [73, 73] { R11307 += 1, R11263 += 1 };
  s2 -> s7 [73, 73] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s11 [74, 65535] { R11307 += 1, R11263 += 1 };
  s2 -> s2 [74, 65535] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [0, 72] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [0, 72] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s3 [0, 65535] { R11307 += 1, R11262 += 1, R11263 += 1 };
  s3 -> s4 [73, 73] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s5 [73, 73] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s6 [73, 73] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s7 [73, 73] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [74, 65535] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [74, 65535] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s5 -> s5 [0, 65535] { R11307 += 1, R11263 += 1, R10246 += 1, R10247 += 1 };
  s5 -> s6 [0, 65535] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s6 -> s6 [0, 65535] { R11307 += 1, R11263 += 1, R10247 += 1, R10248 += 1 };
  s6 -> s8 [0, 65535] { R11307 += 1, R11263 += 1 };
  s8 -> s9 [0, 65535] { R11307 += 1 };
  s8 -> s8 [0, 65535] { R11307 += 1, R11263 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R11307 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R11307 += 1, R11263 += 1 };
  s11 -> s11 [0, 65535] { R11307 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R11307 += 1, R11263 += 1 };
  s11 -> s8 [73, 73] { R11307 += 1, R11263 += 1 };
  s11 -> s11 [74, 65535] { R11307 += 1, R11263 += 1 };
  s12 -> s12 [0, 65535] { R11307 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s0 -> s2 [0, 72] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s0 [0, 65535] { R11308 += 1, R11309 += 1 };
  s0 -> s3 [0, 65535] { R11309 += 1, R11264 += 1, R11265 += 1 };
  s0 -> s4 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s0 -> s5 [73, 73] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s6 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s0 -> s7 [73, 73] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [74, 81] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s0 -> s2 [74, 65535] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s8 [82, 82] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s0 -> s1 [83, 65535] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s1 -> s1 [0, 72] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s1 -> s4 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s1 -> s6 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s1 -> s1 [74, 81] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s1 -> s8 [82, 82] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s1 -> s1 [83, 65535] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s2 -> s1 [0, 72] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s2 -> s2 [0, 72] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s2 -> s5 [73, 73] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s6 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s2 -> s7 [73, 73] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [74, 81] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s2 -> s2 [74, 65535] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s8 [82, 82] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s2 -> s1 [83, 65535] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s3 -> s1 [0, 72] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s3 -> s2 [0, 72] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R11309 += 1, R11264 += 1, R11265 += 1 };
  s3 -> s4 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s3 -> s5 [73, 73] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s6 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s3 -> s7 [73, 73] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s1 [74, 81] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s3 -> s2 [74, 65535] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s8 [82, 82] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s3 -> s1 [83, 65535] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s4 -> s4 [0, 81] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s4 -> s11 [82, 82] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s4 -> s4 [83, 65535] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s7 -> s4 [0, 81] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s7 -> s7 [0, 65535] { R11309 += 1, R11265 += 1, R10252 += 1, R10253 += 1 };
  s7 -> s11 [82, 82] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s7 -> s4 [83, 65535] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s8 -> s8 [0, 72] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s8 -> s8 [0, 65535] { R11309 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s8 -> s11 [73, 73] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s8 -> s8 [74, 65535] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11309 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11309 += 1, R11265 += 1, R10253 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R11309 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11309 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s2 [0, 72] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s0 [0, 65535] { R11310 += 1, R11311 += 1 };
  s0 -> s3 [0, 65535] { R11311 += 1, R11266 += 1, R11267 += 1 };
  s0 -> s4 [73, 73] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s5 [73, 73] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s6 [73, 73] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s7 [73, 73] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s1 [74, 65535] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s2 [74, 65535] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s1 -> s1 [0, 72] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s11 [0, 72] { R11311 += 1, R11267 += 1 };
  s1 -> s12 [73, 73] { R11311 += 1, R11267 += 1 };
  s1 -> s5 [73, 73] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s7 [73, 73] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s8 [73, 73] { R11311 += 1, R11267 += 1 };
  s1 -> s1 [74, 65535] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s11 [74, 65535] { R11311 += 1, R11267 += 1 };
  s2 -> s1 [0, 72] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s2 [0, 72] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s2 -> s4 [73, 73] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s2 -> s5 [73, 73] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s6 [73, 73] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s2 -> s7 [73, 73] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s1 [74, 65535] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s2 [74, 65535] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s1 [0, 72] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s2 [0, 72] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s3 [0, 65535] { R11311 += 1, R11266 += 1, R11267 += 1 };
  s3 -> s4 [73, 73] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s5 [73, 73] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s6 [73, 73] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s7 [73, 73] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s1 [74, 65535] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s2 [74, 65535] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s4 -> s4 [0, 65535] { R11311 += 1, R11267 += 1, R11100 += 1, R11101 += 1 };
  s4 -> s5 [0, 65535] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s5 -> s5 [0, 65535] { R11311 += 1, R11267 += 1, R11101 += 1, R11102 += 1 };
  s5 -> s8 [0, 65535] { R11311 += 1, R11267 += 1 };
  s8 -> s9 [0, 65535] { R11311 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R11311 += 1, R11267 += 1 };
  s9 -> s9 [0, 65535] { R11311 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R11311 += 1, R11267 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R11311 += 1 };
  s11 -> s12 [73, 73] { R11311 += 1, R11267 += 1 };
  s11 -> s8 [73, 73] { R11311 += 1, R11267 += 1 };
  s11 -> s11 [74, 65535] { R11311 += 1, R11267 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R11311 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s0 -> s2 [0, 72] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s0 -> s3 [0, 65535] { R11313 += 1, R11268 += 1, R11269 += 1 };
  s0 -> s0 [0, 65535] { R11312 += 1, R11313 += 1 };
  s0 -> s4 [73, 73] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s0 -> s5 [73, 73] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s0 -> s6 [73, 73] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s0 -> s7 [73, 73] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s0 -> s1 [74, 80] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s0 -> s2 [74, 65535] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s0 -> s1 [83, 65535] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s1 -> s1 [0, 72] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s1 -> s1 [0, 65535] { R11313 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R11313 += 1, R11269 += 1 };
  s1 -> s6 [73, 73] { R11313 += 1, R11269 += 1 };
  s1 -> s1 [74, 80] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s1 -> s1 [74, 65535] { R11313 += 1, R11269 += 1 };
  s1 -> s1 [83, 65535] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s2 -> s1 [0, 72] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s2 -> s2 [0, 72] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s2 -> s4 [73, 73] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s2 -> s5 [73, 73] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s2 -> s6 [73, 73] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s2 -> s7 [73, 73] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s2 -> s1 [74, 80] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s2 -> s2 [74, 65535] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s2 -> s1 [83, 65535] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s3 -> s1 [0, 72] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s3 -> s2 [0, 72] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s3 -> s3 [0, 65535] { R11313 += 1, R11268 += 1, R11269 += 1 };
  s3 -> s4 [73, 73] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s3 -> s5 [73, 73] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s3 -> s6 [73, 73] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s3 -> s7 [73, 73] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s3 -> s1 [74, 80] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s3 -> s2 [74, 65535] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s3 -> s1 [83, 65535] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s4 -> s4 [0, 65535] { R11313 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 80] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s6 -> s6 [0, 65535] { R11313 += 1, R11269 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R11313 += 1 };
  s6 -> s6 [83, 65535] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s7 -> s6 [0, 80] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s7 -> s7 [0, 65535] { R11313 += 1, R11269 += 1, R11210 += 1, R11211 += 1 };
  s7 -> s6 [83, 65535] { R11313 += 1, R11269 += 1, R11211 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11313 += 1 };
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R11313 && R20 - R11313 = -1 && R21 = R11313 && R22 - R11313 = -1 && R23 = R11313 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R11254 = 0 && R11255 = 0 && R11262 = 0 && R11263 = 0 && R11264 = 0 && R11265 = 0 && R11266 = 0 && R11267 = 0 && R11268 = 0 && R11269 = 0 && R11270 = 0 && R11271 = R11313 && R11272 = 0 && R11273 = R11313 && R11274 = 0 && R11275 = R11313 && R11276 = 0 && R11277 = R11313 && R11278 = 0 && R11279 = R11313 && R11280 = 0 && R11281 = R11313 && R11282 = 0 && R11283 = R11313 && R11284 = 0 && R11285 = R11313 && R11286 = 0 && R11287 = R11313 && R11288 = 0 && R11289 = R11313 && R11290 = 0 && R11291 = R11313 && R11292 = 0 && R11293 = R11313 && R11294 = 0 && R11295 = R11313 && R11296 = 0 && R11297 = R11313 && R11298 = 0 && R11299 = R11313 && R11300 = 0 && R11301 = R11313 && R11302 = 0 && R11303 = R11313 && R11304 = 0 && R11305 = R11313 && R11306 = 0 && R11307 = R11313 && R11308 = 0 && R11309 = R11313 && R11310 = 0 && R11311 = R11313 && R11312 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && 0 < R11313 && (R1 != 0 || R17 = 0 || (R11214 = 0 && R11215 = 0)) && (R1 != 0 || R17 = 0 || (R11216 = 0 && R11217 = 0)) && (R1 != 0 || R17 = 0 || (R11218 = 0 && R11219 = 0)) && (R1 != 0 || R17 = 0 || (R11220 = 0 && R11221 = 0)) && (R1 != 0 || R17 = 0 || (R11222 = 0 && R11223 = 0)) && (R1 != 0 || R17 = 0 || (R11224 = 0 && R11225 = 0)) && (R1 != 0 || R17 = 0 || (R11226 = 0 && R11227 = 0)) && (R1 != 0 || R17 = 0 || (R11228 = 0 && R11229 = 0)) && (R1 != 0 || R17 = 0 || (R11230 = 0 && R11231 = 0)) && (R1 != 0 || R17 = 0 || (R11232 = 0 && R11233 = 0)) && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R10255 + R10253 < 1))) && (R11214 != 0 || R1 = R11215 || R1 < 1) && (R11216 != 0 || R1 = R11217 || R1 < 1) && (R11218 != 0 || R1 = R11219 || R1 < 1) && (R11220 != 0 || R1 = R11221 || R1 < 1) && (R11222 != 0 || R1 = R11223 || R1 < 1) && (R11224 != 0 || R1 = R11225 || R1 < 1) && (R11226 != 0 || R1 = R11227 || R1 < 1) && (R11228 != 0 || R1 = R11229 || R1 < 1) && (R11230 != 0 || R1 = R11231 || R1 < 1) && (R11232 != 0 || R1 = R11233 || R1 < 1) && (R18 = 0 || (R11252 = 0 && R11253 = 0)) && (R18 = 0 || (R11256 = 0 && R11257 = 0)) && (R18 = 0 || (R11258 = 0 && R11259 = 0)) && (R18 = 0 || (R11260 = 0 && R11261 = 0)) && (R19 = 0 || (R11234 = 0 && R11235 = 0)) && (R19 = 0 || (R11236 = 0 && R11237 = 0)) && (R19 = 0 || (R11238 = 0 && R11239 = 0)) && (R19 = 0 || (R11240 = 0 && R11241 = 0)) && (R19 = 0 || (R11242 = 0 && R11243 = 0)) && (R19 = 0 || (R11244 = 0 && R11245 = 0)) && (R19 = 0 || (R11246 = 0 && R11247 = 0)) && (R19 = 0 || (R11248 = 0 && R11249 = 0)) && (R19 = 0 || (R11250 = 0 && R11251 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R11105 + R11102 = 0 || (R56 + R11103 + R11100 = 0 && R57 + R11104 + R11101 = 0)) && (R58 + R11105 + R11102 = 0 || (R62 + R11212 + R11210 = 0 && R63 + R11213 + R11211 = 0)) && (R11214 = 0 || R1 < 1) && (R11216 = 0 || R1 < 1) && (R11218 = 0 || R1 < 1) && (R11220 = 0 || R1 < 1) && (R11222 = 0 || R1 < 1) && (R11224 = 0 || R1 < 1) && (R11226 = 0 || R1 < 1) && (R11228 = 0 || R1 < 1) && (R11230 = 0 || R1 < 1) && (R11232 = 0 || R1 < 1);
// End of Parikh automata intersection problem
