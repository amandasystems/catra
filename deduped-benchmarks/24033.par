// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R12802, R12803, R12804, R12805, R12806, R12807, R12808, R12809, R12810, R12811, R12812, R12813, R12814, R12815, R12816, R12817, R12818, R12819, R12820, R12821, R12822, R12823, R12824, R12825, R12826, R12827, R12828, R12829, R12830, R12831, R12832, R12833, R12834, R12835, R12836, R12837, R12838, R12839, R12840, R12841, R12842, R12843, R12844, R12845, R12846, R12847, R12848, R12849, R12850, R12851, R12852, R12853, R12854, R12855, R12856, R12857, R12858, R12859, R12860, R12861, R12862, R12863, R12864, R12865, R12866, R12867, R12868, R12869, R12870, R12871, R12872, R12873, R12874, R12875, R12876, R12877, R12878, R12879, R12880, R12881, R12882, R12883, R12884, R12885, R12886, R12887, R12888, R12889, R12890, R12891, R12892, R12893, R12894, R12895, R12896, R12897, R12898, R12899, R12900, R12901, R12902, R12903, R12904, R12905, R12906, R12907, R12908, R12909, R12910, R12911, R12912, R12913, R12914, R12915, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R12837 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R12836 += 1, R12837 += 1 };
  s1 -> s1 [0, 65535] { R12837 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R12839 += 1 };
  s0 -> s0 [0, 65535] { R12838 += 1, R12839 += 1 };
  s0 -> s2 [73, 73] { R12839 += 1 };
  s0 -> s3 [73, 73] { R12839 += 1 };
  s0 -> s1 [78, 65535] { R12839 += 1 };
  s1 -> s1 [0, 72] { R12839 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12839 += 1 };
  s1 -> s3 [73, 73] { R12839 += 1 };
  s1 -> s1 [78, 65535] { R12839 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R12839 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R12839 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R12841 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R12840 += 1, R12841 += 1 };
  s0 -> s2 [73, 73] { R12841 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R12841 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R12841 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R12841 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12841 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R12841 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R12841 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12841 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R12843 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R12842 += 1, R12843 += 1 };
  s0 -> s2 [73, 73] { R12843 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R12843 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R12843 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R12843 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12843 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R12843 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R12843 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12843 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R12845 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R12844 += 1, R12845 += 1 };
  s0 -> s2 [73, 73] { R12845 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R12845 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R12845 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R12845 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12845 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R12845 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R12845 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12845 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R12847 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12846 += 1, R12847 += 1 };
  s0 -> s2 [73, 73] { R12847 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R12847 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R12847 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R12847 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12847 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R12847 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R12847 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R12847 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R12849 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R12848 += 1, R12849 += 1 };
  s0 -> s2 [73, 73] { R12849 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R12849 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R12849 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R12849 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12849 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R12849 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R12849 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R12849 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R12851 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12850 += 1, R12851 += 1 };
  s0 -> s2 [73, 73] { R12851 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R12851 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R12851 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R12851 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12851 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R12851 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R12851 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12851 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R12853 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R12852 += 1, R12853 += 1 };
  s0 -> s2 [73, 73] { R12853 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R12853 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R12853 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R12853 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12853 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R12853 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R12853 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12853 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R12873 += 1 };
  s0 -> s0 [0, 65535] { R12872 += 1, R12873 += 1 };
  s0 -> s2 [73, 73] { R12873 += 1 };
  s0 -> s1 [74, 65535] { R12873 += 1 };
  s1 -> s1 [0, 72] { R12873 += 1 };
  s1 -> s2 [73, 73] { R12873 += 1 };
  s1 -> s1 [74, 65535] { R12873 += 1 };
  s2 -> s2 [0, 65535] { R12873 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12875 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12874 += 1, R12875 += 1 };
  s1 -> s1 [0, 65535] { R12875 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R12877 += 1 };
  s0 -> s0 [0, 65535] { R12876 += 1, R12877 += 1 };
  s0 -> s2 [0, 65535] { R12877 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R12877 += 1 };
  s0 -> s1 [74, 65535] { R12877 += 1 };
  s1 -> s1 [0, 72] { R12877 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R12877 += 1 };
  s1 -> s1 [74, 65535] { R12877 += 1 };
  s2 -> s1 [0, 72] { R12877 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12877 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R12877 += 1 };
  s2 -> s1 [74, 65535] { R12877 += 1 };
  s3 -> s3 [0, 65535] { R12877 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R12879 += 1, R12817 += 1 };
  s0 -> s2 [0, 65535] { R12879 += 1, R12816 += 1, R12817 += 1 };
  s0 -> s0 [0, 65535] { R12878 += 1, R12879 += 1 };
  s0 -> s1 [74, 65535] { R12879 += 1, R12817 += 1 };
  s1 -> s1 [0, 72] { R12879 += 1, R12817 += 1 };
  s1 -> s1 [0, 65535] { R12879 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R12879 += 1, R12817 += 1 };
  s2 -> s1 [0, 72] { R12879 += 1, R12817 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12879 += 1, R12816 += 1, R12817 += 1 };
  s2 -> s1 [74, 65535] { R12879 += 1, R12817 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R12880 += 1, R12881 += 1 };
  s0 -> s1 [0, 65535] { R12881 += 1, R12819 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R12881 += 1, R12818 += 1, R12819 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12881 += 1, R12819 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R12881 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12881 += 1, R12819 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R12881 += 1, R12818 += 1, R12819 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12881 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R12883 += 1, R12821 += 1 };
  s0 -> s0 [0, 65535] { R12882 += 1, R12883 += 1 };
  s0 -> s2 [0, 65535] { R12883 += 1, R12820 += 1, R12821 += 1 };
  s0 -> s1 [77, 65535] { R12883 += 1, R12821 += 1 };
  s1 -> s1 [0, 73] { R12883 += 1, R12821 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12883 += 1 };
  s1 -> s1 [77, 65535] { R12883 += 1, R12821 += 1 };
  s2 -> s1 [0, 73] { R12883 += 1, R12821 += 1 };
  s2 -> s2 [0, 65535] { R12883 += 1, R12820 += 1, R12821 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R12883 += 1, R12821 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12885 += 1, R12823 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R12885 += 1, R12822 += 1, R12823 += 1 };
  s0 -> s0 [0, 65535] { R12884 += 1, R12885 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12885 += 1, R12823 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R12885 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12885 += 1, R12823 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R12885 += 1, R12822 += 1, R12823 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12885 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R12887 += 1, R12825 += 1 };
  s0 -> s0 [0, 65535] { R12886 += 1, R12887 += 1 };
  s0 -> s2 [0, 65535] { R12887 += 1, R12825 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R12887 += 1, R12824 += 1, R12825 += 1 };
  s0 -> s1 [78, 65535] { R12887 += 1, R12825 += 1 };
  s1 -> s1 [0, 76] { R12887 += 1, R12825 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12887 += 1 };
  s1 -> s1 [78, 65535] { R12887 += 1, R12825 += 1 };
  s2 -> s1 [0, 76] { R12887 += 1, R12825 += 1 };
  s2 -> s5 [0, 65535] { R12887 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12887 += 1, R12825 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R12887 += 1, R12825 += 1 };
  s3 -> s1 [0, 76] { R12887 += 1, R12825 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12887 += 1, R12825 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R12887 += 1, R12824 += 1, R12825 += 1 };
  s3 -> s1 [78, 65535] { R12887 += 1, R12825 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12887 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R12889 += 1, R12827 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R12889 += 1, R12827 += 1 };
  s0 -> s0 [0, 65535] { R12888 += 1, R12889 += 1 };
  s0 -> s2 [0, 65535] { R12889 += 1, R12826 += 1, R12827 += 1 };
  s0 -> s1 [78, 65535] { R12889 += 1, R12827 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R12889 += 1, R12827 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R12889 += 1, R12827 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12889 += 1 };
  s1 -> s1 [78, 65535] { R12889 += 1, R12827 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R12889 += 1, R12827 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R12889 += 1, R12827 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12889 += 1, R12826 += 1, R12827 += 1 };
  s2 -> s1 [78, 65535] { R12889 += 1, R12827 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12889 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12891 += 1, R12829 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s0 [0, 65535] { R12890 += 1, R12891 += 1 };
  s0 -> s2 [0, 65535] { R12891 += 1, R12828 += 1, R12829 += 1 };
  s0 -> s3 [0, 65535] { R12891 += 1, R12829 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s1 [0, 65535] { R12891 += 1, R12829 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535] { R12891 += 1, R12829 += 1 };
  s1 -> s4 [0, 65535] { R12891 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R12891 += 1, R12829 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s2 [0, 65535] { R12891 += 1, R12828 += 1, R12829 += 1 };
  s2 -> s3 [0, 65535] { R12891 += 1, R12829 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R12891 += 1, R12829 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s3 [0, 65535] { R12891 += 1, R12829 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s4 [0, 65535] { R12891 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12891 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12891 += 1, R12829 += 1 };
  s6 -> s4 [0, 65535] { R12891 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s0 -> s2 [0, 65535] { R12893 += 1, R12830 += 1, R12831 += 1 };
  s0 -> s0 [0, 65535] { R12892 += 1, R12893 += 1 };
  s0 -> s3 [79, 79] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s0 -> s1 [80, 65535] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s1 -> s1 [0, 77] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s1 -> s3 [79, 79] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s1 -> s1 [80, 65535] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s2 -> s1 [0, 77] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s2 -> s2 [0, 65535] { R12893 += 1, R12830 += 1, R12831 += 1 };
  s2 -> s3 [79, 79] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s2 -> s1 [80, 65535] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s3 -> s3 [0, 77] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s3 -> s3 [0, 65535] { R12893 += 1, R12831 += 1 };
  s3 -> s4 [0, 65535] { R12893 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [79, 65535] { R12893 += 1, R12831 += 1, R12805 += 1 };
  s4 -> s4 [0, 65535] { R12893 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R12894 += 1, R12895 += 1 };
  s0 -> s1 [0, 65535] { R12895 += 1, R12833 += 1, R12810 += 1, R12811 += 1 };
  s0 -> s2 [0, 65535] { R12895 += 1, R12832 += 1, R12833 += 1 };
  s0 -> s3 [0, 65535] { R12895 += 1, R12833 += 1, R12809 += 1, R12810 += 1 };
  s1 -> s4 [0, 65535] { R12895 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12895 += 1, R12833 += 1, R12810 += 1, R12811 += 1 };
  s1 -> s6 [0, 65535] { R12895 += 1, R12833 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R12895 += 1, R12833 += 1, R12810 += 1, R12811 += 1 };
  s2 -> s2 [0, 65535] { R12895 += 1, R12832 += 1, R12833 += 1 };
  s2 -> s3 [0, 65535] { R12895 += 1, R12833 += 1, R12809 += 1, R12810 += 1 };
  s3 -> s4 [0, 65535] { R12895 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R12895 += 1, R12833 += 1, R12810 += 1, R12811 += 1 };
  s3 -> s3 [0, 65535] { R12895 += 1, R12833 += 1, R12809 += 1, R12810 += 1 };
  s4 -> s4 [0, 65535] { R12895 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R12895 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12895 += 1, R12833 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s0 -> s2 [0, 65535] { R12897 += 1, R12834 += 1, R12835 += 1 };
  s0 -> s0 [0, 65535] { R12896 += 1, R12897 += 1 };
  s0 -> s3 [0, 65535] { R12897 += 1, R12835 += 1, R12814 += 1, R12815 += 1 };
  s0 -> s4 [77, 77] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s0 -> s5 [77, 77] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s0 -> s1 [80, 65535] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s1 -> s1 [0, 76] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s1 -> s1 [0, 65535] { R12897 += 1, R12835 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R12897 += 1 };
  s1 -> s4 [77, 77] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s1 -> s5 [77, 77] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s1 -> s1 [80, 65535] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s2 -> s1 [0, 76] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s2 -> s2 [0, 65535] { R12897 += 1, R12834 += 1, R12835 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R12897 += 1, R12835 += 1, R12814 += 1, R12815 += 1 };
  s2 -> s4 [77, 77] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s2 -> s5 [77, 77] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s2 -> s1 [80, 65535] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s3 -> s1 [0, 76] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R12897 += 1, R12835 += 1, R12814 += 1, R12815 += 1 };
  s3 -> s7 [0, 65535] { R12897 += 1 };
  s3 -> s4 [77, 77] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s3 -> s5 [77, 77] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s3 -> s1 [80, 65535] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s4 -> s4 [0, 77] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s4 -> s4 [0, 65535] { R12897 += 1, R12835 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R12897 += 1 };
  s4 -> s4 [80, 65535] { R12897 += 1, R12835 += 1, R12815 += 1 };
  s5 -> s5 [0, 65535] { R12897 += 1, R12835 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R12897 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12897 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12899 += 1, R12855 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R12899 += 1, R12854 += 1, R12855 += 1 };
  s0 -> s0 [0, 65535] { R12898 += 1, R12899 += 1 };
  s1 -> s4 [0, 65535] { R12899 += 1 };
  s1 -> s1 [0, 65535] { R12899 += 1, R12855 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12899 += 1, R12855 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R12899 += 1, R12854 += 1, R12855 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12899 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R12901 += 1, R12857 += 1 };
  s0 -> s2 [0, 65535] { R12901 += 1, R12856 += 1, R12857 += 1 };
  s0 -> s0 [0, 65535] { R12900 += 1, R12901 += 1 };
  s0 -> s3 [73, 73] { R12901 += 1, R12857 += 1 };
  s0 -> s4 [73, 73] { R12901 += 1, R12857 += 1 };
  s0 -> s5 [77, 77] { R12901 += 1, R12857 += 1 };
  s0 -> s1 [78, 65535] { R12901 += 1, R12857 += 1 };
  s1 -> s1 [0, 72] { R12901 += 1, R12857 += 1 };
  s1 -> s3 [73, 73] { R12901 += 1, R12857 += 1 };
  s1 -> s4 [73, 73] { R12901 += 1, R12857 += 1 };
  s1 -> s5 [77, 77] { R12901 += 1, R12857 += 1 };
  s1 -> s1 [78, 65535] { R12901 += 1, R12857 += 1 };
  s2 -> s1 [0, 72] { R12901 += 1, R12857 += 1 };
  s2 -> s2 [0, 65535] { R12901 += 1, R12856 += 1, R12857 += 1 };
  s2 -> s3 [73, 73] { R12901 += 1, R12857 += 1 };
  s2 -> s4 [73, 73] { R12901 += 1, R12857 += 1 };
  s2 -> s5 [77, 77] { R12901 += 1, R12857 += 1 };
  s2 -> s1 [78, 65535] { R12901 += 1, R12857 += 1 };
  s3 -> s3 [0, 73] { R12901 += 1, R12857 += 1 };
  s3 -> s8 [77, 77] { R12901 += 1, R12857 += 1 };
  s3 -> s3 [78, 65535] { R12901 += 1, R12857 += 1 };
  s5 -> s5 [0, 72] { R12901 += 1, R12857 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12901 += 1 };
  s5 -> s7 [73, 73] { R12901 += 1, R12857 += 1 };
  s5 -> s8 [73, 73] { R12901 += 1, R12857 += 1 };
  s5 -> s5 [77, 65535] { R12901 += 1, R12857 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12901 += 1 };
  s8 -> s8 [0, 73] { R12901 += 1, R12857 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12901 += 1 };
  s8 -> s8 [77, 65535] { R12901 += 1, R12857 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R12903 += 1, R12859 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12902 += 1, R12903 += 1 };
  s0 -> s2 [0, 65535] { R12903 += 1, R12858 += 1, R12859 += 1 };
  s0 -> s3 [73, 73] { R12903 += 1, R12859 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R12903 += 1, R12859 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R12903 += 1, R12859 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R12903 += 1, R12859 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R12903 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R12903 += 1, R12859 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R12903 += 1, R12859 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R12903 += 1, R12859 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R12903 += 1, R12859 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12903 += 1, R12858 += 1, R12859 += 1 };
  s2 -> s3 [73, 73] { R12903 += 1, R12859 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R12903 += 1, R12859 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R12903 += 1, R12859 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12903 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12903 += 1 };
  s4 -> s4 [0, 65535] { R12903 += 1, R12859 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12903 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R12905 += 1, R12861 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R12904 += 1, R12905 += 1 };
  s0 -> s2 [0, 65535] { R12905 += 1, R12860 += 1, R12861 += 1 };
  s0 -> s3 [73, 73] { R12905 += 1, R12861 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R12905 += 1, R12861 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R12905 += 1, R12861 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R12905 += 1, R12861 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12905 += 1 };
  s1 -> s3 [73, 73] { R12905 += 1, R12861 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R12905 += 1, R12861 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R12905 += 1, R12861 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R12905 += 1, R12861 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12905 += 1, R12860 += 1, R12861 += 1 };
  s2 -> s3 [73, 73] { R12905 += 1, R12861 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R12905 += 1, R12861 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R12905 += 1, R12861 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12905 += 1, R12861 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R12905 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12905 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12905 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R12906 += 1, R12907 += 1 };
  s0 -> s3 [0, 65535] { R12907 += 1, R12862 += 1, R12863 += 1 };
  s0 -> s4 [73, 73] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s2 -> s2 [0, 65535] { R12907 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [73, 73] { R12907 += 1, R12863 += 1 };
  s2 -> s6 [73, 73] { R12907 += 1, R12863 += 1 };
  s2 -> s2 [74, 76] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R12907 += 1, R12863 += 1 };
  s2 -> s2 [78, 65535] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R12907 += 1, R12862 += 1, R12863 += 1 };
  s3 -> s4 [73, 73] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R12907 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s6 [0, 76] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535] { R12907 += 1 };
  s6 -> s6 [0, 65535] { R12907 += 1, R12863 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [78, 65535] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s7 -> s6 [0, 76] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R12907 += 1, R12863 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [78, 65535] { R12907 += 1, R12863 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R12907 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R12908 += 1, R12909 += 1 };
  s0 -> s2 [0, 65535] { R12909 += 1, R12864 += 1, R12865 += 1 };
  s0 -> s3 [73, 73] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12909 += 1 };
  s1 -> s3 [73, 73] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R12909 += 1, R12864 += 1, R12865 += 1 };
  s2 -> s3 [73, 73] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R12909 += 1 };
  s4 -> s5 [0, 65535] { R12909 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12909 += 1, R12865 += 1, R11526 += 1, R11527 += 1 };
  s5 -> s5 [0, 65535] { R12909 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [0, 72] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s0 -> s0 [0, 65535] { R12910 += 1, R12911 += 1 };
  s0 -> s3 [0, 65535] { R12911 += 1, R12866 += 1, R12867 += 1 };
  s0 -> s4 [73, 73] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s0 -> s5 [73, 73] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s0 -> s6 [73, 73] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s7 [73, 73] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [74, 77] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s0 -> s1 [74, 65535] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [80, 65535] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s1 -> s1 [0, 72] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s2 [0, 72] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s1 -> s4 [73, 73] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s1 -> s5 [73, 73] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s1 -> s6 [73, 73] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s7 [73, 73] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s2 [74, 77] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s1 -> s1 [74, 65535] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s2 [80, 65535] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s2 -> s2 [0, 72] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R12911 += 1 };
  s2 -> s4 [73, 73] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s2 -> s5 [73, 73] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s2 -> s2 [74, 77] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s2 -> s2 [80, 65535] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s3 -> s1 [0, 72] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s2 [0, 72] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s3 -> s3 [0, 65535] { R12911 += 1, R12866 += 1, R12867 += 1 };
  s3 -> s4 [73, 73] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s3 -> s5 [73, 73] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s3 -> s6 [73, 73] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s7 [73, 73] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s2 [74, 77] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s3 -> s1 [74, 65535] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s2 [80, 65535] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R12911 += 1 };
  s5 -> s5 [0, 77] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R12911 += 1 };
  s5 -> s5 [80, 65535] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s6 -> s5 [0, 77] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s6 -> s6 [0, 65535] { R12911 += 1, R12867 += 1, R12802 += 1, R12803 += 1 };
  s6 -> s5 [80, 65535] { R12911 += 1, R12867 += 1, R12803 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s0 -> s0 [0, 65535] { R12912 += 1, R12913 += 1 };
  s0 -> s2 [0, 65535] { R12913 += 1, R12868 += 1, R12869 += 1 };
  s0 -> s3 [73, 73] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s0 -> s4 [73, 73] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s0 -> s1 [74, 65535] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s1 [0, 72] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12913 += 1 };
  s1 -> s3 [73, 73] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s4 [73, 73] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s1 [74, 65535] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s1 [0, 72] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12913 += 1, R12868 += 1, R12869 += 1 };
  s2 -> s3 [73, 73] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s4 [73, 73] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s1 [74, 65535] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s3 -> s3 [0, 65535] { R12913 += 1, R12869 += 1, R12806 += 1, R12807 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12913 += 1 };
  s4 -> s4 [0, 65535] { R12913 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12913 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s0 -> s0 [0, 65535] { R12914 += 1, R12915 += 1 };
  s0 -> s2 [0, 65535] { R12915 += 1, R12870 += 1, R12871 += 1 };
  s0 -> s3 [73, 73] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s0 -> s4 [73, 73] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s0 -> s1 [74, 65535] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s1 -> s1 [0, 72] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s1 -> s1 [0, 65535] { R12915 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s1 -> s4 [73, 73] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s1 -> s1 [74, 65535] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s2 -> s1 [0, 72] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s2 -> s2 [0, 65535] { R12915 += 1, R12870 += 1, R12871 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s2 -> s4 [73, 73] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s2 -> s1 [74, 65535] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s3 -> s3 [0, 65535] { R12915 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12915 += 1 };
  s4 -> s4 [0, 65535] { R12915 += 1, R12871 += 1, R12812 += 1, R12813 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12915 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R12831 && R2 = R12915 && R20 - R12915 = -1 && R21 = R12915 && R22 - R12915 = -1 && R23 = R12915 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12805 + -1*R12803 - R53 = 0 && R52 + R12804 + R12802 = 0 && R12830 = 0 && R12856 = 0 && R12857 = 0 && R12862 = 0 && R12863 = 0 && R12866 = 0 && R12867 = 0 && R12872 = 0 && R12873 = R12915 && R12874 = 0 && R12875 = R12915 && R12876 = 0 && R12877 = R12915 && R12878 = 0 && R12879 = R12915 && R12880 = 0 && R12881 = R12915 && R12882 = 0 && R12883 = R12915 && R12884 = 0 && R12885 = R12915 && R12886 = 0 && R12887 = R12915 && R12888 = 0 && R12889 = R12915 && R12890 = 0 && R12891 = R12915 && R12892 = 0 && R12893 = R12915 && R12894 = 0 && R12895 = R12915 && R12896 = 0 && R12897 = R12915 && R12898 = 0 && R12899 = R12915 && R12900 = 0 && R12901 = R12915 && R12902 = 0 && R12903 = R12915 && R12904 = 0 && R12905 = R12915 && R12906 = 0 && R12907 = R12915 && R12908 = 0 && R12909 = R12915 && R12910 = 0 && R12911 = R12915 && R12912 = 0 && R12913 = R12915 && R12914 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12805 + -1*R12803 - R53 < 1 && -1 < R12831 && 0 < R12915 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R12805 + R12803 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R12805 + R12803 < 1))) && (R12816 != 0 || R12817 = R12831 || (R17 = 0 && R12831 = 0)) && (R12818 != 0 || R12819 = R12831 || (R17 = 0 && R12831 = 0)) && (R12820 != 0 || R12821 = R12831 || (R17 = 0 && R12831 = 0)) && (R12822 != 0 || R12823 = R12831 || (R17 = 0 && R12831 = 0)) && (R12824 != 0 || R12825 = R12831 || (R17 = 0 && R12831 = 0)) && (R12826 != 0 || R12827 = R12831 || (R17 = 0 && R12831 = 0)) && (R12828 != 0 || R12829 = R12831 || (R17 = 0 && R12831 = 0)) && (R12832 != 0 || R12831 = R12833 || (R17 = 0 && R12831 = 0)) && (R12834 != 0 || R12831 = R12835 || (R17 = 0 && R12831 = 0)) && (R18 = 0 || (R12854 = 0 && R12855 = 0)) && (R18 = 0 || (R12858 = 0 && R12859 = 0)) && (R18 = 0 || (R12860 = 0 && R12861 = 0)) && (R18 = 0 || (R12864 = 0 && R12865 = 0)) && (R18 = 0 || (R12868 = 0 && R12869 = 0)) && (R18 = 0 || (R12870 = 0 && R12871 = 0)) && (R19 = 0 || (R12836 = 0 && R12837 = 0)) && (R19 = 0 || (R12838 = 0 && R12839 = 0)) && (R19 = 0 || (R12840 = 0 && R12841 = 0)) && (R19 = 0 || (R12842 = 0 && R12843 = 0)) && (R19 = 0 || (R12844 = 0 && R12845 = 0)) && (R19 = 0 || (R12846 = 0 && R12847 = 0)) && (R19 = 0 || (R12848 = 0 && R12849 = 0)) && (R19 = 0 || (R12850 = 0 && R12851 = 0)) && (R19 = 0 || (R12852 = 0 && R12853 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0)) && (R58 + R12811 + R12808 = 0 || (R56 + R12809 + R12806 = 0 && R57 + R12810 + R12807 = 0)) && (R58 + R12811 + R12808 = 0 || (R62 + R12814 + R12812 = 0 && R63 + R12815 + R12813 = 0)) && (R12816 = 0 || (R17 = 0 && R12831 = 0)) && (R12818 = 0 || (R17 = 0 && R12831 = 0)) && (R12820 = 0 || (R17 = 0 && R12831 = 0)) && (R12822 = 0 || (R17 = 0 && R12831 = 0)) && (R12824 = 0 || (R17 = 0 && R12831 = 0)) && (R12826 = 0 || (R17 = 0 && R12831 = 0)) && (R12828 = 0 || (R17 = 0 && R12831 = 0)) && (R12832 = 0 || (R17 = 0 && R12831 = 0)) && (R12834 = 0 || (R17 = 0 && R12831 = 0));
// End of Parikh automata intersection problem
