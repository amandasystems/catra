// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R14072, R14073, R14074, R14075, R14076, R14077, R14078, R14079, R14080, R14081, R14394, R14395, R14396, R14397, R14398, R14399, R14400, R14401, R14402, R14403, R14404, R14405, R14406, R14407, R14408, R14409, R14410, R14411, R14412, R14413, R14414, R14415, R14416, R14417, R14418, R14419, R14420, R14421, R14422, R14423, R14424, R14425, R14426, R14427, R14428, R14429, R14430, R14431, R14432, R14433, R14434, R14435, R14436, R14437, R14438, R14439, R14440, R14441, R14442, R14443, R14444, R14445, R14446, R14447, R14448, R14449, R14450, R14451, R14452, R14453, R14454, R14455, R14456, R14457, R14458, R14459, R14460, R14461, R14462, R14463, R14464, R14465, R14466, R14467, R14468, R14469, R14470, R14471, R14472, R14473, R14474, R14475, R14476, R14477, R14478, R14479, R14480, R14481, R14482, R14483, R14484, R14485, R14486, R14487, R14488, R14489, R14490, R14491, R14492, R14493, R14494, R14495, R14496, R14497, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R14419 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R14418 += 1, R14419 += 1 };
  s1 -> s1 [0, 65535] { R14419 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R14421 += 1 };
  s0 -> s0 [0, 65535] { R14420 += 1, R14421 += 1 };
  s0 -> s2 [73, 73] { R14421 += 1 };
  s0 -> s3 [73, 73] { R14421 += 1 };
  s0 -> s1 [78, 65535] { R14421 += 1 };
  s1 -> s1 [0, 72] { R14421 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14421 += 1 };
  s1 -> s3 [73, 73] { R14421 += 1 };
  s1 -> s1 [78, 65535] { R14421 += 1 };
  s2 -> s2 [0, 73] { R14421 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R14421 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R14423 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R14422 += 1, R14423 += 1 };
  s0 -> s2 [73, 73] { R14423 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R14423 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R14423 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R14423 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14423 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R14423 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R14423 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14423 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R14425 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R14424 += 1, R14425 += 1 };
  s0 -> s2 [73, 73] { R14425 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R14425 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R14425 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R14425 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14425 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R14425 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R14425 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14425 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R14427 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R14426 += 1, R14427 += 1 };
  s0 -> s2 [73, 73] { R14427 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R14427 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R14427 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R14427 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14427 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R14427 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R14427 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14427 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R14429 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14428 += 1, R14429 += 1 };
  s0 -> s2 [73, 73] { R14429 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R14429 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R14429 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R14429 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14429 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R14429 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R14429 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14429 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R14431 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R14430 += 1, R14431 += 1 };
  s0 -> s2 [73, 73] { R14431 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R14431 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R14431 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R14431 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14431 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R14431 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R14431 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14431 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R14433 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R14432 += 1, R14433 += 1 };
  s0 -> s2 [73, 73] { R14433 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R14433 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R14433 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R14433 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14433 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R14433 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R14433 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14433 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R14435 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R14434 += 1, R14435 += 1 };
  s0 -> s2 [73, 73] { R14435 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R14435 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R14435 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R14435 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14435 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R14435 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R14435 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14435 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R14455 += 1 };
  s0 -> s0 [0, 65535] { R14454 += 1, R14455 += 1 };
  s0 -> s2 [73, 73] { R14455 += 1 };
  s0 -> s1 [74, 65535] { R14455 += 1 };
  s1 -> s1 [0, 72] { R14455 += 1 };
  s1 -> s2 [73, 73] { R14455 += 1 };
  s1 -> s1 [74, 65535] { R14455 += 1 };
  s2 -> s2 [0, 65535] { R14455 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R14457 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R14456 += 1, R14457 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14457 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R14459 += 1 };
  s0 -> s0 [0, 65535] { R14458 += 1, R14459 += 1 };
  s0 -> s2 [0, 65535] { R14459 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R14459 += 1 };
  s0 -> s1 [74, 65535] { R14459 += 1 };
  s1 -> s1 [0, 72] { R14459 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R14459 += 1 };
  s1 -> s1 [74, 65535] { R14459 += 1 };
  s2 -> s1 [0, 72] { R14459 += 1 };
  s2 -> s2 [0, 65535] { R14459 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R14459 += 1 };
  s2 -> s1 [74, 65535] { R14459 += 1 };
  s3 -> s3 [0, 65535] { R14459 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R14461 += 1, R14399 += 1 };
  s0 -> s0 [0, 65535] { R14460 += 1, R14461 += 1 };
  s0 -> s2 [0, 65535] { R14461 += 1, R14398 += 1, R14399 += 1 };
  s0 -> s1 [74, 65535] { R14461 += 1, R14399 += 1 };
  s1 -> s1 [0, 72] { R14461 += 1, R14399 += 1 };
  s1 -> s1 [0, 65535] { R14461 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R14461 += 1, R14399 += 1 };
  s2 -> s1 [0, 72] { R14461 += 1, R14399 += 1 };
  s2 -> s2 [0, 65535] { R14461 += 1, R14398 += 1, R14399 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R14461 += 1, R14399 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R14462 += 1, R14463 += 1 };
  s0 -> s1 [0, 65535] { R14463 += 1, R14401 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R14463 += 1, R14400 += 1, R14401 += 1 };
  s1 -> s4 [0, 65535] { R14463 += 1 };
  s1 -> s1 [0, 65535] { R14463 += 1, R14401 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14463 += 1, R14401 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R14463 += 1, R14400 += 1, R14401 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14463 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R14465 += 1, R14403 += 1 };
  s0 -> s0 [0, 65535] { R14464 += 1, R14465 += 1 };
  s0 -> s2 [0, 65535] { R14465 += 1, R14402 += 1, R14403 += 1 };
  s0 -> s1 [77, 65535] { R14465 += 1, R14403 += 1 };
  s1 -> s1 [0, 73] { R14465 += 1, R14403 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14465 += 1 };
  s1 -> s1 [77, 65535] { R14465 += 1, R14403 += 1 };
  s2 -> s1 [0, 73] { R14465 += 1, R14403 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14465 += 1, R14402 += 1, R14403 += 1 };
  s2 -> s1 [77, 65535] { R14465 += 1, R14403 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R14467 += 1, R14405 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R14467 += 1, R14404 += 1, R14405 += 1 };
  s0 -> s0 [0, 65535] { R14466 += 1, R14467 += 1 };
  s1 -> s4 [0, 65535] { R14467 += 1 };
  s1 -> s1 [0, 65535] { R14467 += 1, R14405 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14467 += 1, R14405 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R14467 += 1, R14404 += 1, R14405 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14467 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R14469 += 1, R14407 += 1 };
  s0 -> s2 [0, 65535] { R14469 += 1, R14406 += 1, R14407 += 1 };
  s0 -> s3 [0, 65535] { R14469 += 1, R14407 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R14468 += 1, R14469 += 1 };
  s0 -> s1 [78, 65535] { R14469 += 1, R14407 += 1 };
  s1 -> s1 [0, 76] { R14469 += 1, R14407 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R14469 += 1 };
  s1 -> s1 [78, 65535] { R14469 += 1, R14407 += 1 };
  s2 -> s1 [0, 76] { R14469 += 1, R14407 += 1 };
  s2 -> s2 [0, 65535] { R14469 += 1, R14406 += 1, R14407 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R14469 += 1, R14407 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R14469 += 1, R14407 += 1 };
  s3 -> s1 [0, 76] { R14469 += 1, R14407 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14469 += 1, R14407 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R14469 += 1 };
  s3 -> s1 [78, 65535] { R14469 += 1, R14407 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14469 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R14471 += 1, R14409 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R14471 += 1, R14409 += 1 };
  s0 -> s2 [0, 65535] { R14471 += 1, R14408 += 1, R14409 += 1 };
  s0 -> s0 [0, 65535] { R14470 += 1, R14471 += 1 };
  s0 -> s1 [78, 65535] { R14471 += 1, R14409 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R14471 += 1, R14409 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R14471 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14471 += 1, R14409 += 1 };
  s1 -> s1 [78, 65535] { R14471 += 1, R14409 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R14471 += 1, R14409 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14471 += 1, R14409 += 1 };
  s2 -> s2 [0, 65535] { R14471 += 1, R14408 += 1, R14409 += 1 };
  s2 -> s1 [78, 65535] { R14471 += 1, R14409 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14471 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R14473 += 1, R14411 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s2 [0, 65535] { R14473 += 1, R14410 += 1, R14411 += 1 };
  s0 -> s0 [0, 65535] { R14472 += 1, R14473 += 1 };
  s0 -> s3 [0, 65535] { R14473 += 1, R14411 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s1 [0, 65535] { R14473 += 1, R14411 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R14473 += 1, R14411 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535] { R14473 += 1 };
  s2 -> s1 [0, 65535] { R14473 += 1, R14411 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s2 [0, 65535] { R14473 += 1, R14410 += 1, R14411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R14473 += 1, R14411 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535] { R14473 += 1, R14411 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14473 += 1, R14411 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s6 [0, 65535] { R14473 += 1 };
  s4 -> s4 [0, 65535] { R14473 += 1, R14411 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14473 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14473 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s0 -> s2 [0, 65535] { R14475 += 1, R14412 += 1, R14413 += 1 };
  s0 -> s3 [0, 65535] { R14475 += 1, R14413 += 1, R14074 += 1, R14075 += 1 };
  s0 -> s0 [0, 65535] { R14474 += 1, R14475 += 1 };
  s0 -> s4 [79, 79] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s0 -> s1 [80, 65535] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s1 -> s1 [0, 77] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s1 -> s4 [79, 79] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s1 -> s1 [80, 65535] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s2 -> s1 [0, 77] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s2 -> s2 [0, 65535] { R14475 += 1, R14412 += 1, R14413 += 1 };
  s2 -> s3 [0, 65535] { R14475 += 1, R14413 += 1, R14074 += 1, R14075 += 1 };
  s2 -> s4 [79, 79] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s2 -> s1 [80, 65535] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s3 -> s1 [0, 77] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s3 -> s3 [0, 65535] { R14475 += 1, R14413 += 1, R14074 += 1, R14075 += 1 };
  s3 -> s4 [79, 79] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s3 -> s1 [80, 65535] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s4 -> s4 [0, 77] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14475 += 1, R14413 += 1 };
  s4 -> s6 [0, 65535] { R14475 += 1 };
  s4 -> s4 [79, 65535] { R14475 += 1, R14413 += 1, R14075 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14475 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14477 += 1, R14414 += 1, R14415 += 1 };
  s0 -> s0 [0, 65535] { R14476 += 1, R14477 += 1 };
  s0 -> s2 [0, 65535] { R14477 += 1, R14415 += 1, R14079 += 1, R14080 += 1 };
  s0 -> s3 [0, 65535] { R14477 += 1, R14415 += 1, R14080 += 1, R14081 += 1 };
  s1 -> s1 [0, 65535] { R14477 += 1, R14414 += 1, R14415 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R14477 += 1, R14415 += 1, R14079 += 1, R14080 += 1 };
  s1 -> s3 [0, 65535] { R14477 += 1, R14415 += 1, R14080 += 1, R14081 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14477 += 1, R14415 += 1, R14079 += 1, R14080 += 1 };
  s2 -> s6 [0, 65535] { R14477 += 1 };
  s2 -> s3 [0, 65535] { R14477 += 1, R14415 += 1, R14080 += 1, R14081 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R14477 += 1, R14415 += 1 };
  s3 -> s6 [0, 65535] { R14477 += 1 };
  s3 -> s3 [0, 65535] { R14477 += 1, R14415 += 1, R14080 += 1, R14081 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14477 += 1, R14415 += 1 };
  s5 -> s6 [0, 65535] { R14477 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R14477 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R14479 += 1, R14417 += 1, R14397 += 1 };
  s0 -> s2 [0, 65535] { R14479 += 1, R14416 += 1, R14417 += 1 };
  s0 -> s0 [0, 65535] { R14478 += 1, R14479 += 1 };
  s0 -> s1 [0, 65535] { R14479 += 1, R14417 += 1 };
  s0 -> s1 [80, 65535] { R14479 += 1, R14417 += 1, R14397 += 1 };
  s1 -> s1 [0, 77] { R14479 += 1, R14417 += 1, R14397 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14479 += 1 };
  s1 -> s1 [0, 65535] { R14479 += 1, R14417 += 1 };
  s1 -> s1 [80, 65535] { R14479 += 1, R14417 += 1, R14397 += 1 };
  s2 -> s1 [0, 77] { R14479 += 1, R14417 += 1, R14397 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14479 += 1, R14416 += 1, R14417 += 1 };
  s2 -> s1 [0, 65535] { R14479 += 1, R14417 += 1 };
  s2 -> s1 [80, 65535] { R14479 += 1, R14417 += 1, R14397 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14479 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R14481 += 1, R14436 += 1, R14437 += 1 };
  s0 -> s2 [0, 65535] { R14481 += 1, R14437 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R14480 += 1, R14481 += 1 };
  s1 -> s1 [0, 65535] { R14481 += 1, R14436 += 1, R14437 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R14481 += 1, R14437 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14481 += 1, R14437 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R14481 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14481 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R14483 += 1, R14439 += 1 };
  s0 -> s2 [0, 65535] { R14483 += 1, R14438 += 1, R14439 += 1 };
  s0 -> s0 [0, 65535] { R14482 += 1, R14483 += 1 };
  s0 -> s3 [73, 73] { R14483 += 1, R14439 += 1 };
  s0 -> s4 [73, 73] { R14483 += 1, R14439 += 1 };
  s0 -> s5 [77, 77] { R14483 += 1, R14439 += 1 };
  s0 -> s1 [78, 65535] { R14483 += 1, R14439 += 1 };
  s1 -> s1 [0, 72] { R14483 += 1, R14439 += 1 };
  s1 -> s3 [73, 73] { R14483 += 1, R14439 += 1 };
  s1 -> s4 [73, 73] { R14483 += 1, R14439 += 1 };
  s1 -> s5 [77, 77] { R14483 += 1, R14439 += 1 };
  s1 -> s1 [78, 65535] { R14483 += 1, R14439 += 1 };
  s2 -> s1 [0, 72] { R14483 += 1, R14439 += 1 };
  s2 -> s2 [0, 65535] { R14483 += 1, R14438 += 1, R14439 += 1 };
  s2 -> s3 [73, 73] { R14483 += 1, R14439 += 1 };
  s2 -> s4 [73, 73] { R14483 += 1, R14439 += 1 };
  s2 -> s5 [77, 77] { R14483 += 1, R14439 += 1 };
  s2 -> s1 [78, 65535] { R14483 += 1, R14439 += 1 };
  s3 -> s3 [0, 73] { R14483 += 1, R14439 += 1 };
  s3 -> s8 [77, 77] { R14483 += 1, R14439 += 1 };
  s3 -> s3 [78, 65535] { R14483 += 1, R14439 += 1 };
  s5 -> s5 [0, 72] { R14483 += 1, R14439 += 1 };
  s5 -> s5 [0, 65535] { R14483 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R14483 += 1, R14439 += 1 };
  s5 -> s8 [73, 73] { R14483 += 1, R14439 += 1 };
  s5 -> s5 [77, 65535] { R14483 += 1, R14439 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R14483 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R14483 += 1, R14439 += 1 };
  s8 -> s8 [0, 65535] { R14483 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [77, 65535] { R14483 += 1, R14439 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R14485 += 1, R14441 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R14484 += 1, R14485 += 1 };
  s0 -> s2 [0, 65535] { R14485 += 1, R14440 += 1, R14441 += 1 };
  s0 -> s3 [73, 73] { R14485 += 1, R14441 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R14485 += 1, R14441 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R14485 += 1, R14441 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R14485 += 1, R14441 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14485 += 1 };
  s1 -> s3 [73, 73] { R14485 += 1, R14441 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R14485 += 1, R14441 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R14485 += 1, R14441 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R14485 += 1, R14441 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14485 += 1, R14440 += 1, R14441 += 1 };
  s2 -> s3 [73, 73] { R14485 += 1, R14441 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R14485 += 1, R14441 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R14485 += 1, R14441 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14485 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14485 += 1, R14441 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R14485 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14485 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R14487 += 1, R14443 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R14487 += 1, R14442 += 1, R14443 += 1 };
  s0 -> s0 [0, 65535] { R14486 += 1, R14487 += 1 };
  s0 -> s3 [73, 73] { R14487 += 1, R14443 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R14487 += 1, R14443 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R14487 += 1, R14443 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R14487 += 1, R14443 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R14487 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R14487 += 1, R14443 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R14487 += 1, R14443 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R14487 += 1, R14443 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R14487 += 1, R14443 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R14487 += 1, R14442 += 1, R14443 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R14487 += 1, R14443 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R14487 += 1, R14443 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R14487 += 1, R14443 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R14487 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14487 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14487 += 1, R14443 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R14487 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R14488 += 1, R14489 += 1 };
  s0 -> s3 [0, 65535] { R14489 += 1, R14444 += 1, R14445 += 1 };
  s0 -> s4 [73, 73] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R14489 += 1 };
  s2 -> s4 [73, 73] { R14489 += 1, R14445 += 1 };
  s2 -> s7 [73, 73] { R14489 += 1, R14445 += 1 };
  s2 -> s2 [74, 76] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R14489 += 1, R14445 += 1 };
  s2 -> s2 [78, 65535] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R14489 += 1, R14444 += 1, R14445 += 1 };
  s3 -> s4 [73, 73] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s4 -> s4 [0, 76] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R14489 += 1, R14445 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R14489 += 1 };
  s4 -> s4 [78, 65535] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s6 -> s4 [0, 76] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R14489 += 1, R14445 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s4 [78, 65535] { R14489 += 1, R14445 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R14489 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14489 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s2 [0, 65535] { R14491 += 1, R14446 += 1, R14447 += 1 };
  s0 -> s0 [0, 65535] { R14490 += 1, R14491 += 1 };
  s0 -> s3 [73, 73] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14491 += 1 };
  s1 -> s3 [73, 73] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14491 += 1, R14446 += 1, R14447 += 1 };
  s2 -> s3 [73, 73] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R14491 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14491 += 1, R14447 += 1, R11526 += 1, R11527 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14491 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14491 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s0 [0, 65535] { R14492 += 1, R14493 += 1 };
  s0 -> s2 [0, 65535] { R14493 += 1, R14448 += 1, R14449 += 1 };
  s0 -> s3 [73, 73] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s4 [73, 73] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s1 [74, 65535] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 72] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 65535] { R14493 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s4 [73, 73] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [74, 65535] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [0, 72] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R14493 += 1, R14448 += 1, R14449 += 1 };
  s2 -> s3 [73, 73] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s4 [73, 73] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [74, 65535] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s3 [0, 65535] { R14493 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14493 += 1 };
  s4 -> s4 [0, 65535] { R14493 += 1, R14449 += 1, R14072 += 1, R14073 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14493 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s0 [0, 65535] { R14494 += 1, R14495 += 1 };
  s0 -> s2 [0, 65535] { R14495 += 1, R14450 += 1, R14451 += 1 };
  s0 -> s3 [73, 73] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s4 [73, 73] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s1 [74, 65535] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s1 [0, 72] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s1 [0, 65535] { R14495 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s4 [73, 73] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s1 [74, 65535] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s1 [0, 72] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14495 += 1, R14450 += 1, R14451 += 1 };
  s2 -> s3 [73, 73] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s4 [73, 73] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s1 [74, 65535] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14495 += 1, R14451 += 1, R14076 += 1, R14077 += 1 };
  s3 -> s6 [0, 65535] { R14495 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14495 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14495 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s0 -> s2 [0, 72] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s0 -> s0 [0, 65535] { R14496 += 1, R14497 += 1 };
  s0 -> s3 [0, 65535] { R14497 += 1, R14452 += 1, R14453 += 1 };
  s0 -> s4 [73, 73] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s0 -> s5 [73, 73] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s0 -> s6 [73, 73] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s0 -> s7 [73, 73] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s0 -> s1 [74, 76] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s0 -> s2 [74, 65535] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s0 -> s8 [77, 77] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s0 -> s1 [80, 65535] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s1 -> s1 [0, 72] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s1 -> s6 [73, 73] { R14497 += 1, R14453 += 1 };
  s1 -> s7 [73, 73] { R14497 += 1, R14453 += 1 };
  s1 -> s1 [74, 76] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s1 -> s1 [74, 65535] { R14497 += 1, R14453 += 1 };
  s1 -> s8 [77, 77] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s1 -> s1 [80, 65535] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s2 -> s1 [0, 72] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s2 -> s2 [0, 72] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s2 -> s4 [73, 73] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s2 -> s5 [73, 73] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s2 -> s6 [73, 73] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s2 -> s7 [73, 73] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s2 -> s1 [74, 76] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s2 -> s2 [74, 65535] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s2 -> s8 [77, 77] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s2 -> s1 [80, 65535] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s3 -> s1 [0, 72] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s3 -> s2 [0, 72] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s3 -> s3 [0, 65535] { R14497 += 1, R14452 += 1, R14453 += 1 };
  s3 -> s4 [73, 73] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s3 -> s5 [73, 73] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s3 -> s6 [73, 73] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s3 -> s7 [73, 73] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s3 -> s1 [74, 76] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s3 -> s2 [74, 65535] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s3 -> s8 [77, 77] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s3 -> s1 [80, 65535] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s5 -> s7 [0, 76] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s5 -> s5 [0, 65535] { R14497 += 1, R14453 += 1, R14394 += 1, R14395 += 1 };
  s5 -> s11 [77, 77] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s5 -> s7 [80, 65535] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s7 -> s7 [0, 76] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s7 -> s7 [0, 65535] { R14497 += 1, R14453 += 1 };
  s7 -> s11 [77, 77] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s7 -> s7 [80, 65535] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s8 -> s8 [0, 72] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s8 -> s8 [0, 65535] { R14497 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R14497 += 1, R14453 += 1 };
  s8 -> s11 [73, 73] { R14497 += 1, R14453 += 1 };
  s8 -> s8 [74, 77] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s8 -> s8 [74, 65535] { R14497 += 1, R14453 += 1 };
  s8 -> s8 [80, 65535] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R14497 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s11 -> s11 [0, 65535] { R14497 += 1, R14453 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R14497 += 1 };
  s11 -> s11 [80, 65535] { R14497 += 1, R14453 += 1, R14395 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R14497 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R14413 && R2 = R14497 && R20 - R14497 = -1 && R21 = R14497 && R22 - R14497 = -1 && R23 = R14497 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14075 + -1*R14073 - R53 = 0 && R52 + R14074 + R14072 = 0 && R14412 = 0 && R14438 = 0 && R14439 = 0 && R14444 = 0 && R14445 = 0 && R14452 = 0 && R14453 = 0 && R14454 = 0 && R14455 = R14497 && R14456 = 0 && R14457 = R14497 && R14458 = 0 && R14459 = R14497 && R14460 = 0 && R14461 = R14497 && R14462 = 0 && R14463 = R14497 && R14464 = 0 && R14465 = R14497 && R14466 = 0 && R14467 = R14497 && R14468 = 0 && R14469 = R14497 && R14470 = 0 && R14471 = R14497 && R14472 = 0 && R14473 = R14497 && R14474 = 0 && R14475 = R14497 && R14476 = 0 && R14477 = R14497 && R14478 = 0 && R14479 = R14497 && R14480 = 0 && R14481 = R14497 && R14482 = 0 && R14483 = R14497 && R14484 = 0 && R14485 = R14497 && R14486 = 0 && R14487 = R14497 && R14488 = 0 && R14489 = R14497 && R14490 = 0 && R14491 = R14497 && R14492 = 0 && R14493 = R14497 && R14494 = 0 && R14495 = R14497 && R14496 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14075 + -1*R14073 - R53 < 1 && -1 < R14413 && 0 < R14497 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R14075 + R14073 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R14075 + R14073 < 1))) && (R14398 != 0 || R14399 = R14413 || (R17 = 0 && R14413 = 0)) && (R14400 != 0 || R14401 = R14413 || (R17 = 0 && R14413 = 0)) && (R14402 != 0 || R14403 = R14413 || (R17 = 0 && R14413 = 0)) && (R14404 != 0 || R14405 = R14413 || (R17 = 0 && R14413 = 0)) && (R14406 != 0 || R14407 = R14413 || (R17 = 0 && R14413 = 0)) && (R14408 != 0 || R14409 = R14413 || (R17 = 0 && R14413 = 0)) && (R14410 != 0 || R14411 = R14413 || (R17 = 0 && R14413 = 0)) && (R14414 != 0 || R14413 = R14415 || (R17 = 0 && R14413 = 0)) && (R14416 != 0 || R14413 = R14417 || (R17 = 0 && R14413 = 0)) && (R18 = 0 || (R14436 = 0 && R14437 = 0)) && (R18 = 0 || (R14440 = 0 && R14441 = 0)) && (R18 = 0 || (R14442 = 0 && R14443 = 0)) && (R18 = 0 || (R14446 = 0 && R14447 = 0)) && (R18 = 0 || (R14448 = 0 && R14449 = 0)) && (R18 = 0 || (R14450 = 0 && R14451 = 0)) && (R19 = 0 || (R14418 = 0 && R14419 = 0)) && (R19 = 0 || (R14420 = 0 && R14421 = 0)) && (R19 = 0 || (R14422 = 0 && R14423 = 0)) && (R19 = 0 || (R14424 = 0 && R14425 = 0)) && (R19 = 0 || (R14426 = 0 && R14427 = 0)) && (R19 = 0 || (R14428 = 0 && R14429 = 0)) && (R19 = 0 || (R14430 = 0 && R14431 = 0)) && (R19 = 0 || (R14432 = 0 && R14433 = 0)) && (R19 = 0 || (R14434 = 0 && R14435 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0)) && (R58 + R14081 + R14078 = 0 || (R56 + R14079 + R14076 = 0 && R57 + R14080 + R14077 = 0)) && (R58 + R14081 + R14078 = 0 || (R62 + R14396 + R14394 = 0 && R63 + R14397 + R14395 = 0)) && (R14398 = 0 || (R17 = 0 && R14413 = 0)) && (R14400 = 0 || (R17 = 0 && R14413 = 0)) && (R14402 = 0 || (R17 = 0 && R14413 = 0)) && (R14404 = 0 || (R17 = 0 && R14413 = 0)) && (R14406 = 0 || (R17 = 0 && R14413 = 0)) && (R14408 = 0 || (R17 = 0 && R14413 = 0)) && (R14410 = 0 || (R17 = 0 && R14413 = 0)) && (R14414 = 0 || (R17 = 0 && R14413 = 0)) && (R14416 = 0 || (R17 = 0 && R14413 = 0));
// End of Parikh automata intersection problem
