// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R27, R3, R3468, R3469, R3470, R3471, R3472, R3473, R3682, R3683, R3684, R3685, R3686, R3687, R3688, R3689, R3690, R3691, R3692, R3693, R3694, R3695, R3696, R3697, R3698, R3699, R3700, R3701, R3702, R3703, R3704, R3705, R3706, R3707, R3708, R3709, R3710, R3711, R3712, R3713, R3714, R3715, R3716, R3717, R3718, R3719, R3720, R3721, R3722, R3723, R3724, R3725, R3726, R3727, R3728, R3729, R3730, R3731, R3732, R3733, R3734, R3735, R3736, R3737, R3738, R3739, R3740, R3741, R3742, R3743, R3744, R3745, R3746, R3747, R3748, R3749, R3750, R3751, R3752, R3753, R3754, R3755, R3756, R3757, R3758, R3759, R3760, R3761, R3762, R3763, R3764, R3765, R3766, R3767, R3768, R3769, R3770, R3771, R3772, R3773, R3774, R3775, R3776, R3777, R3778, R3779, R3780, R3781, R3782, R3783, R3784, R3785, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3707 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R3706 += 1, R3707 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3707 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R3709 += 1 };
  s0 -> s0 [0, 65535] { R3708 += 1, R3709 += 1 };
  s0 -> s2 [73, 73] { R3709 += 1 };
  s0 -> s3 [73, 73] { R3709 += 1 };
  s0 -> s1 [78, 65535] { R3709 += 1 };
  s1 -> s1 [0, 72] { R3709 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3709 += 1 };
  s1 -> s3 [73, 73] { R3709 += 1 };
  s1 -> s1 [78, 65535] { R3709 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R3709 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R3709 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R3711 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3710 += 1, R3711 += 1 };
  s0 -> s2 [73, 73] { R3711 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R3711 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R3711 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R3711 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3711 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R3711 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R3711 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R3711 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R3713 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3712 += 1, R3713 += 1 };
  s0 -> s2 [73, 73] { R3713 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R3713 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R3713 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R3713 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3713 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R3713 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R3713 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3713 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R3715 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3714 += 1, R3715 += 1 };
  s0 -> s2 [73, 73] { R3715 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R3715 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R3715 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R3715 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3715 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R3715 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R3715 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3715 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R3717 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3716 += 1, R3717 += 1 };
  s0 -> s2 [73, 73] { R3717 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R3717 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R3717 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R3717 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3717 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R3717 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R3717 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3717 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R3719 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R3718 += 1, R3719 += 1 };
  s0 -> s2 [73, 73] { R3719 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R3719 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R3719 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R3719 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3719 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R3719 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R3719 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3719 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R3721 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3720 += 1, R3721 += 1 };
  s0 -> s2 [73, 73] { R3721 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R3721 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R3721 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R3721 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3721 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R3721 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R3721 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3721 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R3723 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R3722 += 1, R3723 += 1 };
  s0 -> s2 [73, 73] { R3723 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R3723 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R3723 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R3723 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3723 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R3723 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R3723 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3723 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R3743 += 1 };
  s0 -> s0 [0, 65535] { R3742 += 1, R3743 += 1 };
  s0 -> s2 [73, 73] { R3743 += 1 };
  s0 -> s1 [74, 65535] { R3743 += 1 };
  s1 -> s1 [0, 72] { R3743 += 1 };
  s1 -> s2 [73, 73] { R3743 += 1 };
  s1 -> s1 [74, 65535] { R3743 += 1 };
  s2 -> s2 [0, 65535] { R3743 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3745 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R3744 += 1, R3745 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3745 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R3747 += 1 };
  s0 -> s0 [0, 65535] { R3746 += 1, R3747 += 1 };
  s0 -> s2 [0, 65535] { R3747 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R3747 += 1 };
  s0 -> s1 [74, 65535] { R3747 += 1 };
  s1 -> s1 [0, 72] { R3747 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R3747 += 1 };
  s1 -> s1 [74, 65535] { R3747 += 1 };
  s2 -> s1 [0, 72] { R3747 += 1 };
  s2 -> s2 [0, 65535] { R3747 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R3747 += 1 };
  s2 -> s1 [74, 65535] { R3747 += 1 };
  s3 -> s3 [0, 65535] { R3747 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R3749 += 1, R3687 += 1 };
  s0 -> s0 [0, 65535] { R3748 += 1, R3749 += 1 };
  s0 -> s2 [0, 65535] { R3749 += 1, R3686 += 1, R3687 += 1 };
  s0 -> s1 [74, 65535] { R3749 += 1, R3687 += 1 };
  s1 -> s1 [0, 72] { R3749 += 1, R3687 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3749 += 1 };
  s1 -> s1 [74, 65535] { R3749 += 1, R3687 += 1 };
  s2 -> s1 [0, 72] { R3749 += 1, R3687 += 1 };
  s2 -> s2 [0, 65535] { R3749 += 1, R3686 += 1, R3687 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R3749 += 1, R3687 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3751 += 1, R3688 += 1, R3689 += 1 };
  s0 -> s0 [0, 65535] { R3750 += 1, R3751 += 1 };
  s0 -> s2 [0, 65535] { R3751 += 1, R3689 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R3751 += 1, R3688 += 1, R3689 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3751 += 1, R3689 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3751 += 1 };
  s2 -> s2 [0, 65535] { R3751 += 1, R3689 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3751 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R3753 += 1, R3691 += 1 };
  s0 -> s2 [0, 65535] { R3753 += 1, R3690 += 1, R3691 += 1 };
  s0 -> s0 [0, 65535] { R3752 += 1, R3753 += 1 };
  s0 -> s1 [77, 65535] { R3753 += 1, R3691 += 1 };
  s1 -> s1 [0, 73] { R3753 += 1, R3691 += 1 };
  s1 -> s1 [0, 65535] { R3753 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R3753 += 1, R3691 += 1 };
  s2 -> s1 [0, 73] { R3753 += 1, R3691 += 1 };
  s2 -> s2 [0, 65535] { R3753 += 1, R3690 += 1, R3691 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R3753 += 1, R3691 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3755 += 1, R3693 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R3755 += 1, R3692 += 1, R3693 += 1 };
  s0 -> s0 [0, 65535] { R3754 += 1, R3755 += 1 };
  s1 -> s1 [0, 65535] { R3755 += 1, R3693 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3755 += 1 };
  s2 -> s1 [0, 65535] { R3755 += 1, R3693 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3755 += 1, R3692 += 1, R3693 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3755 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R3757 += 1, R3695 += 1 };
  s0 -> s2 [0, 65535] { R3757 += 1, R3695 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R3757 += 1, R3694 += 1, R3695 += 1 };
  s0 -> s0 [0, 65535] { R3756 += 1, R3757 += 1 };
  s0 -> s1 [78, 65535] { R3757 += 1, R3695 += 1 };
  s1 -> s1 [0, 76] { R3757 += 1, R3695 += 1 };
  s1 -> s1 [0, 65535] { R3757 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R3757 += 1, R3695 += 1 };
  s2 -> s1 [0, 76] { R3757 += 1, R3695 += 1 };
  s2 -> s2 [0, 65535] { R3757 += 1, R3695 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3757 += 1 };
  s2 -> s1 [78, 65535] { R3757 += 1, R3695 += 1 };
  s3 -> s1 [0, 76] { R3757 += 1, R3695 += 1 };
  s3 -> s2 [0, 65535] { R3757 += 1, R3695 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R3757 += 1, R3694 += 1, R3695 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R3757 += 1, R3695 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3757 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R3759 += 1, R3697 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R3759 += 1, R3696 += 1, R3697 += 1 };
  s0 -> s0 [0, 65535] { R3758 += 1, R3759 += 1 };
  s0 -> s3 [0, 65535] { R3759 += 1, R3697 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R3759 += 1, R3697 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R3759 += 1, R3697 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R3759 += 1, R3697 += 1 };
  s1 -> s4 [0, 65535] { R3759 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R3759 += 1, R3697 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R3759 += 1, R3697 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R3759 += 1, R3696 += 1, R3697 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3759 += 1, R3697 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R3759 += 1, R3697 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R3759 += 1, R3697 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R3759 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3759 += 1, R3697 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R3759 += 1, R3697 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R3759 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3761 += 1, R3698 += 1, R3699 += 1 };
  s0 -> s2 [0, 65535] { R3761 += 1, R3699 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R3760 += 1, R3761 += 1 };
  s0 -> s3 [0, 65535] { R3761 += 1, R3699 += 1, R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R3761 += 1, R3698 += 1, R3699 += 1 };
  s1 -> s2 [0, 65535] { R3761 += 1, R3699 += 1, R77 += 1, R78 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R3761 += 1, R3699 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535] { R3761 += 1 };
  s2 -> s2 [0, 65535] { R3761 += 1, R3699 += 1, R77 += 1, R78 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3761 += 1, R3699 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R3761 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3761 += 1, R3699 += 1, R78 += 1, R79 += 1 };
  s3 -> s6 [0, 65535] { R3761 += 1, R3699 += 1 };
  s4 -> s4 [0, 65535] { R3761 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3761 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3761 += 1, R3699 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R3763 += 1, R3701 += 1, R2622 += 1, R2623 += 1 };
  s0 -> s0 [0, 65535] { R3762 += 1, R3763 += 1 };
  s0 -> s3 [0, 65535] { R3763 += 1, R3700 += 1, R3701 += 1 };
  s0 -> s4 [79, 79] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s0 -> s1 [80, 65535] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s1 -> s1 [0, 77] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s1 -> s4 [79, 79] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s1 -> s1 [80, 65535] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s2 -> s1 [0, 77] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R3763 += 1, R3701 += 1, R2622 += 1, R2623 += 1 };
  s2 -> s4 [79, 79] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s2 -> s1 [80, 65535] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s3 -> s1 [0, 77] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s3 -> s2 [0, 65535] { R3763 += 1, R3701 += 1, R2622 += 1, R2623 += 1 };
  s3 -> s3 [0, 65535] { R3763 += 1, R3700 += 1, R3701 += 1 };
  s3 -> s4 [79, 79] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s3 -> s1 [80, 65535] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s4 -> s4 [0, 77] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s4 -> s5 [0, 65535] { R3763 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3763 += 1, R3701 += 1 };
  s4 -> s4 [79, 65535] { R3763 += 1, R3701 += 1, R2623 += 1 };
  s5 -> s5 [0, 65535] { R3763 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R3764 += 1, R3765 += 1 };
  s0 -> s1 [0, 65535] { R3765 += 1, R3702 += 1, R3703 += 1 };
  s0 -> s2 [0, 65535] { R3765 += 1, R3703 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3765 += 1, R3702 += 1, R3703 += 1 };
  s1 -> s2 [0, 65535] { R3765 += 1, R3703 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3765 += 1 };
  s2 -> s2 [0, 65535] { R3765 += 1, R3703 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3765 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R3767 += 1, R3705 += 1 };
  s0 -> s0 [0, 65535] { R3766 += 1, R3767 += 1 };
  s0 -> s2 [0, 65535] { R3767 += 1, R3704 += 1, R3705 += 1 };
  s1 -> s4 [0, 65535] { R3767 += 1 };
  s1 -> s1 [0, 65535] { R3767 += 1, R3705 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3767 += 1, R3705 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3767 += 1, R3704 += 1, R3705 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3767 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3769 += 1, R3724 += 1, R3725 += 1 };
  s0 -> s0 [0, 65535] { R3768 += 1, R3769 += 1 };
  s0 -> s2 [0, 65535] { R3769 += 1, R3725 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R3769 += 1, R3724 += 1, R3725 += 1 };
  s1 -> s2 [0, 65535] { R3769 += 1, R3725 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3769 += 1, R3725 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3769 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3769 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R3771 += 1, R3727 += 1 };
  s0 -> s2 [0, 65535] { R3771 += 1, R3726 += 1, R3727 += 1 };
  s0 -> s0 [0, 65535] { R3770 += 1, R3771 += 1 };
  s0 -> s3 [73, 73] { R3771 += 1, R3727 += 1 };
  s0 -> s4 [73, 73] { R3771 += 1, R3727 += 1 };
  s0 -> s5 [77, 77] { R3771 += 1, R3727 += 1 };
  s0 -> s1 [78, 65535] { R3771 += 1, R3727 += 1 };
  s1 -> s1 [0, 72] { R3771 += 1, R3727 += 1 };
  s1 -> s3 [73, 73] { R3771 += 1, R3727 += 1 };
  s1 -> s4 [73, 73] { R3771 += 1, R3727 += 1 };
  s1 -> s5 [77, 77] { R3771 += 1, R3727 += 1 };
  s1 -> s1 [78, 65535] { R3771 += 1, R3727 += 1 };
  s2 -> s1 [0, 72] { R3771 += 1, R3727 += 1 };
  s2 -> s2 [0, 65535] { R3771 += 1, R3726 += 1, R3727 += 1 };
  s2 -> s3 [73, 73] { R3771 += 1, R3727 += 1 };
  s2 -> s4 [73, 73] { R3771 += 1, R3727 += 1 };
  s2 -> s5 [77, 77] { R3771 += 1, R3727 += 1 };
  s2 -> s1 [78, 65535] { R3771 += 1, R3727 += 1 };
  s4 -> s4 [0, 73] { R3771 += 1, R3727 += 1 };
  s4 -> s8 [77, 77] { R3771 += 1, R3727 += 1 };
  s4 -> s4 [78, 65535] { R3771 += 1, R3727 += 1 };
  s5 -> s5 [0, 72] { R3771 += 1, R3727 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3771 += 1 };
  s5 -> s7 [73, 73] { R3771 += 1, R3727 += 1 };
  s5 -> s8 [73, 73] { R3771 += 1, R3727 += 1 };
  s5 -> s5 [77, 65535] { R3771 += 1, R3727 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3771 += 1 };
  s8 -> s8 [0, 73] { R3771 += 1, R3727 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3771 += 1 };
  s8 -> s8 [77, 65535] { R3771 += 1, R3727 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R3773 += 1, R3729 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R3773 += 1, R3728 += 1, R3729 += 1 };
  s0 -> s0 [0, 65535] { R3772 += 1, R3773 += 1 };
  s0 -> s3 [73, 73] { R3773 += 1, R3729 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R3773 += 1, R3729 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R3773 += 1, R3729 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R3773 += 1, R3729 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R3773 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3773 += 1, R3729 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R3773 += 1, R3729 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R3773 += 1, R3729 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R3773 += 1, R3729 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R3773 += 1, R3728 += 1, R3729 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R3773 += 1, R3729 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R3773 += 1, R3729 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R3773 += 1, R3729 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R3773 += 1, R3729 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3773 += 1 };
  s4 -> s4 [0, 65535] { R3773 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3773 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R3775 += 1, R3731 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R3775 += 1, R3730 += 1, R3731 += 1 };
  s0 -> s0 [0, 65535] { R3774 += 1, R3775 += 1 };
  s0 -> s3 [73, 73] { R3775 += 1, R3731 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R3775 += 1, R3731 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R3775 += 1, R3731 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R3775 += 1, R3731 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R3775 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3775 += 1, R3731 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R3775 += 1, R3731 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R3775 += 1, R3731 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R3775 += 1, R3731 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3775 += 1, R3730 += 1, R3731 += 1 };
  s2 -> s3 [73, 73] { R3775 += 1, R3731 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R3775 += 1, R3731 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R3775 += 1, R3731 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3775 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3775 += 1 };
  s4 -> s4 [0, 65535] { R3775 += 1, R3731 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3775 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R3776 += 1, R3777 += 1 };
  s0 -> s2 [0, 65535] { R3777 += 1, R3732 += 1, R3733 += 1 };
  s0 -> s3 [73, 73] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R3777 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R3777 += 1, R3732 += 1, R3733 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R3777 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3777 += 1 };
  s4 -> s4 [0, 65535] { R3777 += 1, R3733 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3777 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R3779 += 1, R3734 += 1, R3735 += 1 };
  s0 -> s0 [0, 65535] { R3778 += 1, R3779 += 1 };
  s0 -> s3 [73, 73] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R3779 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R3779 += 1, R3734 += 1, R3735 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R3779 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3779 += 1, R3735 += 1, R74 += 1, R75 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3779 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3779 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [0, 65535] { R3781 += 1, R3736 += 1, R3737 += 1 };
  s0 -> s0 [0, 65535] { R3780 += 1, R3781 += 1 };
  s0 -> s3 [73, 73] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s4 [73, 73] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s1 [74, 65535] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 72] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 65535] { R3781 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s4 [73, 73] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [74, 65535] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [0, 72] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s2 [0, 65535] { R3781 += 1, R3736 += 1, R3737 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s4 [73, 73] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [74, 65535] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s3 [0, 65535] { R3781 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3781 += 1, R3737 += 1, R2620 += 1, R2621 += 1 };
  s4 -> s5 [0, 65535] { R3781 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3781 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s2 [0, 72] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s3 [0, 65535] { R3783 += 1, R3738 += 1, R3739 += 1 };
  s0 -> s0 [0, 65535] { R3782 += 1, R3783 += 1 };
  s0 -> s4 [73, 73] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s5 [73, 73] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s6 [73, 73] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s7 [73, 73] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s1 [74, 65535] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s2 [74, 65535] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s1 [0, 72] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s1 -> s2 [0, 72] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s4 [73, 73] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s1 -> s5 [73, 73] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s1 -> s6 [73, 73] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s7 [73, 73] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s1 [74, 65535] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s1 -> s2 [74, 65535] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s11 [0, 72] { R3783 += 1, R3739 += 1 };
  s2 -> s2 [0, 72] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s8 [73, 73] { R3783 += 1, R3739 += 1 };
  s2 -> s12 [73, 73] { R3783 += 1, R3739 += 1 };
  s2 -> s6 [73, 73] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s7 [73, 73] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s11 [74, 65535] { R3783 += 1, R3739 += 1 };
  s2 -> s2 [74, 65535] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s1 [0, 72] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s2 [0, 72] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s3 [0, 65535] { R3783 += 1, R3738 += 1, R3739 += 1 };
  s3 -> s4 [73, 73] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s5 [73, 73] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s6 [73, 73] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s7 [73, 73] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s1 [74, 65535] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s2 [74, 65535] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s4 -> s4 [0, 65535] { R3783 += 1, R3739 += 1, R3468 += 1, R3469 += 1 };
  s4 -> s7 [0, 65535] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s7 -> s8 [0, 65535] { R3783 += 1, R3739 += 1 };
  s7 -> s7 [0, 65535] { R3783 += 1, R3739 += 1, R3469 += 1, R3470 += 1 };
  s8 -> s8 [0, 65535] { R3783 += 1, R3739 += 1 };
  s8 -> s9 [0, 65535] { R3783 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R3783 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R3783 += 1, R3739 += 1 };
  s11 -> s11 [0, 65535] { R3783 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [73, 73] { R3783 += 1, R3739 += 1 };
  s11 -> s12 [73, 73] { R3783 += 1, R3739 += 1 };
  s11 -> s11 [74, 65535] { R3783 += 1, R3739 += 1 };
  s12 -> s12 [0, 65535] { R3783 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s0 -> s2 [0, 72] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s0 -> s0 [0, 65535] { R3784 += 1, R3785 += 1 };
  s0 -> s3 [0, 65535] { R3785 += 1, R3740 += 1, R3741 += 1 };
  s0 -> s4 [73, 73] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s0 -> s5 [73, 73] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s0 -> s6 [73, 73] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s0 -> s7 [73, 73] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s0 -> s1 [74, 76] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s0 -> s2 [74, 65535] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s0 -> s8 [77, 77] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s0 -> s1 [80, 65535] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s1 -> s1 [0, 72] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s1 -> s4 [73, 73] { R3785 += 1, R3741 += 1 };
  s1 -> s6 [73, 73] { R3785 += 1, R3741 += 1 };
  s1 -> s1 [74, 76] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s1 -> s1 [74, 65535] { R3785 += 1, R3741 += 1 };
  s1 -> s8 [77, 77] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s1 -> s1 [80, 65535] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s2 -> s1 [0, 72] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s2 -> s2 [0, 72] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s2 -> s4 [73, 73] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s2 -> s5 [73, 73] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s2 -> s6 [73, 73] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s2 -> s7 [73, 73] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s2 -> s1 [74, 76] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s2 -> s2 [74, 65535] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s2 -> s8 [77, 77] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s2 -> s1 [80, 65535] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s3 -> s1 [0, 72] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s3 -> s2 [0, 72] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s3 -> s3 [0, 65535] { R3785 += 1, R3740 += 1, R3741 += 1 };
  s3 -> s4 [73, 73] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s3 -> s5 [73, 73] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s3 -> s6 [73, 73] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s3 -> s7 [73, 73] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s3 -> s1 [74, 76] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s3 -> s2 [74, 65535] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s3 -> s8 [77, 77] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s3 -> s1 [80, 65535] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s6 -> s6 [0, 76] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s6 -> s6 [0, 65535] { R3785 += 1, R3741 += 1 };
  s6 -> s10 [77, 77] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s6 -> s6 [80, 65535] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s7 -> s6 [0, 76] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s7 -> s7 [0, 65535] { R3785 += 1, R3741 += 1, R3682 += 1, R3683 += 1 };
  s7 -> s10 [77, 77] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s7 -> s6 [80, 65535] { R3785 += 1, R3741 += 1, R3683 += 1 };
  s8 -> s8 [0, 72] { R3785 += 1, R3741 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3785 += 1 };
  s8 -> s10 [73, 73] { R3785 += 1, R3741 += 1 };
  s8 -> s11 [73, 73] { R3785 += 1, R3741 += 1 };
  s8 -> s8 [74, 65535] { R3785 += 1, R3741 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R3785 += 1 };
  s10 -> s10 [0, 65535] { R3785 += 1, R3741 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3785 += 1 };
  s12 -> s12 [0, 65535] { R3785 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R3701 && R2 = R3785 && R20 - R3785 = -1 && R21 = R3785 && R22 - R3785 = -1 && R23 = R3785 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R3700 = 0 && R3726 = 0 && R3727 = 0 && R3738 = 0 && R3739 = 0 && R3740 = 0 && R3741 = 0 && R3742 = 0 && R3743 = R3785 && R3744 = 0 && R3745 = R3785 && R3746 = 0 && R3747 = R3785 && R3748 = 0 && R3749 = R3785 && R3750 = 0 && R3751 = R3785 && R3752 = 0 && R3753 = R3785 && R3754 = 0 && R3755 = R3785 && R3756 = 0 && R3757 = R3785 && R3758 = 0 && R3759 = R3785 && R3760 = 0 && R3761 = R3785 && R3762 = 0 && R3763 = R3785 && R3764 = 0 && R3765 = R3785 && R3766 = 0 && R3767 = R3785 && R3768 = 0 && R3769 = R3785 && R3770 = 0 && R3771 = R3785 && R3772 = 0 && R3773 = R3785 && R3774 = 0 && R3775 = R3785 && R3776 = 0 && R3777 = R3785 && R3778 = 0 && R3779 = R3785 && R3780 = 0 && R3781 = R3785 && R3782 = 0 && R3783 = R3785 && R3784 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R3701 && 0 < R3785 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R3686 != 0 || R3687 = R3701 || (R17 = 0 && R3701 = 0)) && (R3688 != 0 || R3689 = R3701 || (R17 = 0 && R3701 = 0)) && (R3690 != 0 || R3691 = R3701 || (R17 = 0 && R3701 = 0)) && (R3692 != 0 || R3693 = R3701 || (R17 = 0 && R3701 = 0)) && (R3694 != 0 || R3695 = R3701 || (R17 = 0 && R3701 = 0)) && (R3696 != 0 || R3697 = R3701 || (R17 = 0 && R3701 = 0)) && (R3698 != 0 || R3699 = R3701 || (R17 = 0 && R3701 = 0)) && (R3702 != 0 || R3701 = R3703 || (R17 = 0 && R3701 = 0)) && (R3704 != 0 || R3701 = R3705 || (R17 = 0 && R3701 = 0)) && (R18 = 0 || (R3724 = 0 && R3725 = 0)) && (R18 = 0 || (R3728 = 0 && R3729 = 0)) && (R18 = 0 || (R3730 = 0 && R3731 = 0)) && (R18 = 0 || (R3732 = 0 && R3733 = 0)) && (R18 = 0 || (R3734 = 0 && R3735 = 0)) && (R18 = 0 || (R3736 = 0 && R3737 = 0)) && (R19 = 0 || (R3706 = 0 && R3707 = 0)) && (R19 = 0 || (R3708 = 0 && R3709 = 0)) && (R19 = 0 || (R3710 = 0 && R3711 = 0)) && (R19 = 0 || (R3712 = 0 && R3713 = 0)) && (R19 = 0 || (R3714 = 0 && R3715 = 0)) && (R19 = 0 || (R3716 = 0 && R3717 = 0)) && (R19 = 0 || (R3718 = 0 && R3719 = 0)) && (R19 = 0 || (R3720 = 0 && R3721 = 0)) && (R19 = 0 || (R3722 = 0 && R3723 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R3473 + R3470 = 0 || (R56 + R3471 + R3468 = 0 && R57 + R3472 + R3469 = 0)) && (R58 + R3473 + R3470 = 0 || (R62 + R3684 + R3682 = 0 && R63 + R3685 + R3683 = 0)) && (R3686 = 0 || (R17 = 0 && R3701 = 0)) && (R3688 = 0 || (R17 = 0 && R3701 = 0)) && (R3690 = 0 || (R17 = 0 && R3701 = 0)) && (R3692 = 0 || (R17 = 0 && R3701 = 0)) && (R3694 = 0 || (R17 = 0 && R3701 = 0)) && (R3696 = 0 || (R17 = 0 && R3701 = 0)) && (R3698 = 0 || (R17 = 0 && R3701 = 0)) && (R3702 = 0 || (R17 = 0 && R3701 = 0)) && (R3704 = 0 || (R17 = 0 && R3701 = 0));
// End of Parikh automata intersection problem
