// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R17, R17888, R17889, R17890, R17891, R18, R18736, R18737, R18738, R18739, R18740, R18741, R18846, R18847, R18848, R18849, R18850, R18851, R18852, R18853, R18854, R18855, R18856, R18857, R18858, R18859, R18860, R18861, R18862, R18863, R18864, R18865, R18866, R18867, R18868, R18869, R18870, R18871, R18872, R18873, R18874, R18875, R18876, R18877, R18878, R18879, R18880, R18881, R18882, R18883, R18884, R18885, R18886, R18887, R18888, R18889, R18890, R18891, R18892, R18893, R18894, R18895, R18896, R18897, R18898, R18899, R18900, R18901, R18902, R18903, R18904, R18905, R18906, R18907, R18908, R18909, R18910, R18911, R18912, R18913, R18914, R18915, R18916, R18917, R18918, R18919, R18920, R18921, R18922, R18923, R18924, R18925, R18926, R18927, R18928, R18929, R18930, R18931, R18932, R18933, R18934, R18935, R18936, R18937, R18938, R18939, R18940, R18941, R18942, R18943, R18944, R18945, R18946, R18947, R18948, R18949, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R18870 += 1, R18871 += 1 };
  s0 -> s1 [0, 65535] { R18871 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18871 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R18873 += 1 };
  s0 -> s0 [0, 65535] { R18872 += 1, R18873 += 1 };
  s0 -> s2 [73, 73] { R18873 += 1 };
  s0 -> s3 [73, 73] { R18873 += 1 };
  s0 -> s1 [78, 65535] { R18873 += 1 };
  s1 -> s1 [0, 72] { R18873 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18873 += 1 };
  s1 -> s3 [73, 73] { R18873 += 1 };
  s1 -> s1 [78, 65535] { R18873 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R18873 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R18873 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R18875 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R18874 += 1, R18875 += 1 };
  s0 -> s2 [73, 73] { R18875 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R18875 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R18875 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R18875 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18875 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R18875 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R18875 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R18875 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R18877 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R18876 += 1, R18877 += 1 };
  s0 -> s2 [73, 73] { R18877 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R18877 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R18877 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R18877 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18877 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R18877 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R18877 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R18877 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R18879 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R18878 += 1, R18879 += 1 };
  s0 -> s2 [73, 73] { R18879 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R18879 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R18879 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R18879 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18879 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R18879 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R18879 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R18879 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R18881 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R18880 += 1, R18881 += 1 };
  s0 -> s2 [73, 73] { R18881 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R18881 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R18881 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R18881 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18881 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R18881 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R18881 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R18881 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R18883 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R18882 += 1, R18883 += 1 };
  s0 -> s2 [73, 73] { R18883 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R18883 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R18883 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R18883 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18883 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R18883 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R18883 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R18883 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R18885 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R18884 += 1, R18885 += 1 };
  s0 -> s2 [73, 73] { R18885 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R18885 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R18885 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R18885 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18885 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R18885 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R18885 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R18885 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R18887 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R18886 += 1, R18887 += 1 };
  s0 -> s2 [73, 73] { R18887 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R18887 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R18887 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R18887 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18887 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R18887 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R18887 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R18887 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R18907 += 1 };
  s0 -> s0 [0, 65535] { R18906 += 1, R18907 += 1 };
  s0 -> s2 [73, 73] { R18907 += 1 };
  s0 -> s1 [74, 65535] { R18907 += 1 };
  s1 -> s1 [0, 72] { R18907 += 1 };
  s1 -> s2 [73, 73] { R18907 += 1 };
  s1 -> s1 [74, 65535] { R18907 += 1 };
  s2 -> s2 [0, 65535] { R18907 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R18908 += 1, R18909 += 1 };
  s0 -> s1 [0, 65535] { R18909 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R18909 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R18911 += 1 };
  s0 -> s2 [0, 65535] { R18911 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R18910 += 1, R18911 += 1 };
  s0 -> s3 [73, 73] { R18911 += 1 };
  s0 -> s1 [74, 65535] { R18911 += 1 };
  s1 -> s1 [0, 72] { R18911 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R18911 += 1 };
  s1 -> s1 [74, 65535] { R18911 += 1 };
  s2 -> s1 [0, 72] { R18911 += 1 };
  s2 -> s2 [0, 65535] { R18911 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R18911 += 1 };
  s2 -> s1 [74, 65535] { R18911 += 1 };
  s3 -> s3 [0, 65535] { R18911 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R18913 += 1, R18851 += 1 };
  s0 -> s0 [0, 65535] { R18912 += 1, R18913 += 1 };
  s0 -> s2 [0, 65535] { R18913 += 1, R18850 += 1, R18851 += 1 };
  s0 -> s1 [74, 65535] { R18913 += 1, R18851 += 1 };
  s1 -> s1 [0, 72] { R18913 += 1, R18851 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18913 += 1 };
  s1 -> s1 [74, 65535] { R18913 += 1, R18851 += 1 };
  s2 -> s1 [0, 72] { R18913 += 1, R18851 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18913 += 1, R18850 += 1, R18851 += 1 };
  s2 -> s1 [74, 65535] { R18913 += 1, R18851 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R18914 += 1, R18915 += 1 };
  s0 -> s1 [0, 65535] { R18915 += 1, R18853 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R18915 += 1, R18852 += 1, R18853 += 1 };
  s1 -> s1 [0, 65535] { R18915 += 1, R18853 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R18915 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18915 += 1, R18853 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18915 += 1, R18852 += 1, R18853 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18915 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R18917 += 1, R18855 += 1 };
  s0 -> s2 [0, 65535] { R18917 += 1, R18854 += 1, R18855 += 1 };
  s0 -> s0 [0, 65535] { R18916 += 1, R18917 += 1 };
  s0 -> s1 [77, 65535] { R18917 += 1, R18855 += 1 };
  s1 -> s1 [0, 73] { R18917 += 1, R18855 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18917 += 1 };
  s1 -> s1 [77, 65535] { R18917 += 1, R18855 += 1 };
  s2 -> s1 [0, 73] { R18917 += 1, R18855 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18917 += 1, R18854 += 1, R18855 += 1 };
  s2 -> s1 [77, 65535] { R18917 += 1, R18855 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R18918 += 1, R18919 += 1 };
  s0 -> s1 [0, 65535] { R18919 += 1, R18857 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R18919 += 1, R18856 += 1, R18857 += 1 };
  s1 -> s4 [0, 65535] { R18919 += 1 };
  s1 -> s1 [0, 65535] { R18919 += 1, R18857 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18919 += 1, R18857 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18919 += 1, R18856 += 1, R18857 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18919 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R18921 += 1, R18859 += 1 };
  s0 -> s0 [0, 65535] { R18920 += 1, R18921 += 1 };
  s0 -> s2 [0, 65535] { R18921 += 1, R18858 += 1, R18859 += 1 };
  s0 -> s3 [0, 65535] { R18921 += 1, R18859 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R18921 += 1, R18859 += 1 };
  s1 -> s1 [0, 76] { R18921 += 1, R18859 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18921 += 1 };
  s1 -> s1 [78, 65535] { R18921 += 1, R18859 += 1 };
  s2 -> s1 [0, 76] { R18921 += 1, R18859 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18921 += 1, R18858 += 1, R18859 += 1 };
  s2 -> s3 [0, 65535] { R18921 += 1, R18859 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R18921 += 1, R18859 += 1 };
  s3 -> s1 [0, 76] { R18921 += 1, R18859 += 1 };
  s3 -> s4 [0, 65535] { R18921 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18921 += 1, R18859 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R18921 += 1, R18859 += 1 };
  s4 -> s4 [0, 65535] { R18921 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R18923 += 1, R18861 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R18923 += 1, R18861 += 1 };
  s0 -> s2 [0, 65535] { R18923 += 1, R18860 += 1, R18861 += 1 };
  s0 -> s0 [0, 65535] { R18922 += 1, R18923 += 1 };
  s0 -> s1 [78, 65535] { R18923 += 1, R18861 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R18923 += 1, R18861 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18923 += 1 };
  s1 -> s1 [0, 65535] { R18923 += 1, R18861 += 1 };
  s1 -> s1 [78, 65535] { R18923 += 1, R18861 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R18923 += 1, R18861 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18923 += 1, R18861 += 1 };
  s2 -> s2 [0, 65535] { R18923 += 1, R18860 += 1, R18861 += 1 };
  s2 -> s1 [78, 65535] { R18923 += 1, R18861 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18923 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R18925 += 1, R18862 += 1, R18863 += 1 };
  s0 -> s2 [0, 65535] { R18925 += 1, R18863 += 1 };
  s0 -> s3 [0, 65535] { R18925 += 1, R18863 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s0 [0, 65535] { R18924 += 1, R18925 += 1 };
  s1 -> s1 [0, 65535] { R18925 += 1, R18862 += 1, R18863 += 1 };
  s1 -> s2 [0, 65535] { R18925 += 1, R18863 += 1 };
  s1 -> s3 [0, 65535] { R18925 += 1, R18863 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18925 += 1, R18863 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18925 += 1 };
  s3 -> s2 [0, 65535] { R18925 += 1, R18863 += 1 };
  s3 -> s3 [0, 65535] { R18925 += 1, R18863 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18925 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18925 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s0 -> s2 [0, 65535] { R18927 += 1, R18865 += 1, R17890 += 1, R17891 += 1 };
  s0 -> s3 [0, 65535] { R18927 += 1, R18864 += 1, R18865 += 1 };
  s0 -> s0 [0, 65535] { R18926 += 1, R18927 += 1 };
  s0 -> s4 [79, 79] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s0 -> s1 [80, 65535] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s1 -> s1 [0, 77] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s1 -> s4 [79, 79] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s1 -> s1 [80, 65535] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s2 -> s1 [0, 77] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s2 -> s2 [0, 65535] { R18927 += 1, R18865 += 1, R17890 += 1, R17891 += 1 };
  s2 -> s4 [79, 79] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s2 -> s1 [80, 65535] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s3 -> s1 [0, 77] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s3 -> s2 [0, 65535] { R18927 += 1, R18865 += 1, R17890 += 1, R17891 += 1 };
  s3 -> s3 [0, 65535] { R18927 += 1, R18864 += 1, R18865 += 1 };
  s3 -> s4 [79, 79] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s3 -> s1 [80, 65535] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s4 -> s4 [0, 77] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s4 -> s5 [0, 65535] { R18927 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18927 += 1, R18865 += 1 };
  s4 -> s4 [79, 65535] { R18927 += 1, R18865 += 1, R17891 += 1 };
  s5 -> s5 [0, 65535] { R18927 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R18929 += 1, R18866 += 1, R18867 += 1 };
  s0 -> s2 [0, 65535] { R18929 += 1, R18867 += 1 };
  s0 -> s0 [0, 65535] { R18928 += 1, R18929 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18929 += 1, R18866 += 1, R18867 += 1 };
  s1 -> s2 [0, 65535] { R18929 += 1, R18867 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18929 += 1 };
  s2 -> s2 [0, 65535] { R18929 += 1, R18867 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18929 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s0 -> s0 [0, 65535] { R18930 += 1, R18931 += 1 };
  s0 -> s2 [0, 65535] { R18931 += 1, R18868 += 1, R18869 += 1 };
  s0 -> s1 [0, 65535] { R18931 += 1, R18869 += 1 };
  s0 -> s3 [77, 77] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s0 -> s4 [77, 77] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s0 -> s1 [80, 65535] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s1 -> s1 [0, 76] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s1 -> s5 [0, 65535] { R18931 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18931 += 1, R18869 += 1 };
  s1 -> s3 [77, 77] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s1 -> s4 [77, 77] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s1 -> s1 [80, 65535] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s2 -> s1 [0, 76] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s2 -> s2 [0, 65535] { R18931 += 1, R18868 += 1, R18869 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R18931 += 1, R18869 += 1 };
  s2 -> s3 [77, 77] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s2 -> s4 [77, 77] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s2 -> s1 [80, 65535] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s3 -> s3 [0, 77] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s3 -> s3 [0, 65535] { R18931 += 1, R18869 += 1 };
  s3 -> s5 [0, 65535] { R18931 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [80, 65535] { R18931 += 1, R18869 += 1, R18849 += 1 };
  s4 -> s5 [0, 65535] { R18931 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18931 += 1, R18869 += 1 };
  s5 -> s5 [0, 65535] { R18931 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R18933 += 1, R18888 += 1, R18889 += 1 };
  s0 -> s2 [0, 65535] { R18933 += 1, R18889 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R18932 += 1, R18933 += 1 };
  s1 -> s1 [0, 65535] { R18933 += 1, R18888 += 1, R18889 += 1 };
  s1 -> s2 [0, 65535] { R18933 += 1, R18889 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18933 += 1, R18889 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18933 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18933 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R18935 += 1, R18891 += 1 };
  s0 -> s0 [0, 65535] { R18934 += 1, R18935 += 1 };
  s0 -> s2 [0, 65535] { R18935 += 1, R18890 += 1, R18891 += 1 };
  s0 -> s3 [73, 73] { R18935 += 1, R18891 += 1 };
  s0 -> s4 [73, 73] { R18935 += 1, R18891 += 1 };
  s0 -> s5 [77, 77] { R18935 += 1, R18891 += 1 };
  s0 -> s1 [78, 65535] { R18935 += 1, R18891 += 1 };
  s1 -> s1 [0, 72] { R18935 += 1, R18891 += 1 };
  s1 -> s3 [73, 73] { R18935 += 1, R18891 += 1 };
  s1 -> s4 [73, 73] { R18935 += 1, R18891 += 1 };
  s1 -> s5 [77, 77] { R18935 += 1, R18891 += 1 };
  s1 -> s1 [78, 65535] { R18935 += 1, R18891 += 1 };
  s2 -> s1 [0, 72] { R18935 += 1, R18891 += 1 };
  s2 -> s2 [0, 65535] { R18935 += 1, R18890 += 1, R18891 += 1 };
  s2 -> s3 [73, 73] { R18935 += 1, R18891 += 1 };
  s2 -> s4 [73, 73] { R18935 += 1, R18891 += 1 };
  s2 -> s5 [77, 77] { R18935 += 1, R18891 += 1 };
  s2 -> s1 [78, 65535] { R18935 += 1, R18891 += 1 };
  s4 -> s4 [0, 73] { R18935 += 1, R18891 += 1 };
  s4 -> s8 [77, 77] { R18935 += 1, R18891 += 1 };
  s4 -> s4 [78, 65535] { R18935 += 1, R18891 += 1 };
  s5 -> s5 [0, 72] { R18935 += 1, R18891 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18935 += 1 };
  s5 -> s7 [73, 73] { R18935 += 1, R18891 += 1 };
  s5 -> s8 [73, 73] { R18935 += 1, R18891 += 1 };
  s5 -> s5 [77, 65535] { R18935 += 1, R18891 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18935 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R18935 += 1, R18891 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18935 += 1 };
  s8 -> s8 [77, 65535] { R18935 += 1, R18891 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R18937 += 1, R18893 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R18936 += 1, R18937 += 1 };
  s0 -> s2 [0, 65535] { R18937 += 1, R18892 += 1, R18893 += 1 };
  s0 -> s3 [73, 73] { R18937 += 1, R18893 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R18937 += 1, R18893 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R18937 += 1, R18893 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R18937 += 1, R18893 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18937 += 1 };
  s1 -> s3 [73, 73] { R18937 += 1, R18893 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R18937 += 1, R18893 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R18937 += 1, R18893 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R18937 += 1, R18893 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18937 += 1, R18892 += 1, R18893 += 1 };
  s2 -> s3 [73, 73] { R18937 += 1, R18893 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R18937 += 1, R18893 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R18937 += 1, R18893 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R18937 += 1, R18893 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R18937 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18937 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R18939 += 1, R18895 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R18939 += 1, R18894 += 1, R18895 += 1 };
  s0 -> s0 [0, 65535] { R18938 += 1, R18939 += 1 };
  s0 -> s3 [73, 73] { R18939 += 1, R18895 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R18939 += 1, R18895 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R18939 += 1, R18895 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R18939 += 1, R18895 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18939 += 1 };
  s1 -> s3 [73, 73] { R18939 += 1, R18895 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R18939 += 1, R18895 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R18939 += 1, R18895 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R18939 += 1, R18895 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R18939 += 1, R18894 += 1, R18895 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R18939 += 1, R18895 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R18939 += 1, R18895 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R18939 += 1, R18895 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R18939 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R18939 += 1 };
  s4 -> s4 [0, 65535] { R18939 += 1, R18895 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18939 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R18941 += 1, R18896 += 1, R18897 += 1 };
  s0 -> s0 [0, 65535] { R18940 += 1, R18941 += 1 };
  s0 -> s4 [73, 73] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R18941 += 1 };
  s2 -> s5 [73, 73] { R18941 += 1, R18897 += 1 };
  s2 -> s6 [73, 73] { R18941 += 1, R18897 += 1 };
  s2 -> s2 [74, 76] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R18941 += 1, R18897 += 1 };
  s2 -> s2 [78, 65535] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R18941 += 1, R18896 += 1, R18897 += 1 };
  s3 -> s4 [73, 73] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R18941 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 76] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R18941 += 1, R18897 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R18941 += 1 };
  s6 -> s6 [78, 65535] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s7 -> s6 [0, 76] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R18941 += 1, R18897 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [78, 65535] { R18941 += 1, R18897 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18941 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 72] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s0 [0, 65535] { R18942 += 1, R18943 += 1 };
  s0 -> s3 [0, 65535] { R18943 += 1, R18898 += 1, R18899 += 1 };
  s0 -> s4 [73, 73] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [74, 65535] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 72] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R18943 += 1 };
  s1 -> s6 [73, 73] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s7 [73, 73] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 72] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [73, 73] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s5 [73, 73] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s6 [73, 73] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [74, 65535] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 72] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 72] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R18943 += 1, R18898 += 1, R18899 += 1 };
  s3 -> s4 [73, 73] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [74, 65535] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s4 [0, 65535] { R18943 += 1, R18899 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s7 [0, 65535] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R18943 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R18943 += 1 };
  s7 -> s7 [0, 65535] { R18943 += 1, R18899 += 1, R15343 += 1, R15344 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18943 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s0 [0, 65535] { R18944 += 1, R18945 += 1 };
  s0 -> s2 [0, 65535] { R18945 += 1, R18900 += 1, R18901 += 1 };
  s0 -> s3 [73, 73] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s4 [73, 73] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s1 [74, 65535] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 72] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 65535] { R18945 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s4 [73, 73] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [74, 65535] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [0, 72] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18945 += 1, R18900 += 1, R18901 += 1 };
  s2 -> s3 [73, 73] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s4 [73, 73] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [74, 65535] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s3 [0, 65535] { R18945 += 1, R18901 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s6 [0, 65535] { R18945 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18945 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18945 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s2 [0, 72] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s0 [0, 65535] { R18946 += 1, R18947 += 1 };
  s0 -> s3 [0, 65535] { R18947 += 1, R18902 += 1, R18903 += 1 };
  s0 -> s4 [73, 73] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s5 [73, 73] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s6 [73, 73] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s7 [73, 73] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s1 [74, 65535] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s2 [74, 65535] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s1 [0, 72] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s1 -> s2 [0, 72] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s4 [73, 73] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s1 -> s5 [73, 73] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s6 [73, 73] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s1 -> s7 [73, 73] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s1 [74, 65535] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s1 -> s2 [74, 65535] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s11 [0, 72] { R18947 += 1, R18903 += 1 };
  s2 -> s2 [0, 72] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s12 [73, 73] { R18947 += 1, R18903 += 1 };
  s2 -> s8 [73, 73] { R18947 += 1, R18903 += 1 };
  s2 -> s5 [73, 73] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s7 [73, 73] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s11 [74, 65535] { R18947 += 1, R18903 += 1 };
  s2 -> s2 [74, 65535] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s1 [0, 72] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s2 [0, 72] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s3 [0, 65535] { R18947 += 1, R18902 += 1, R18903 += 1 };
  s3 -> s4 [73, 73] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s5 [73, 73] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s6 [73, 73] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s7 [73, 73] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s1 [74, 65535] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s2 [74, 65535] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s4 -> s4 [0, 65535] { R18947 += 1, R18903 += 1, R18736 += 1, R18737 += 1 };
  s4 -> s7 [0, 65535] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s7 -> s8 [0, 65535] { R18947 += 1, R18903 += 1 };
  s7 -> s7 [0, 65535] { R18947 += 1, R18903 += 1, R18737 += 1, R18738 += 1 };
  s8 -> s9 [0, 65535] { R18947 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R18947 += 1, R18903 += 1 };
  s9 -> s9 [0, 65535] { R18947 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R18947 += 1, R18903 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R18947 += 1 };
  s11 -> s12 [73, 73] { R18947 += 1, R18903 += 1 };
  s11 -> s8 [73, 73] { R18947 += 1, R18903 += 1 };
  s11 -> s11 [74, 65535] { R18947 += 1, R18903 += 1 };
  s12 -> s12 [0, 65535] { R18947 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s0 -> s2 [0, 72] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s0 -> s0 [0, 65535] { R18948 += 1, R18949 += 1 };
  s0 -> s3 [0, 65535] { R18949 += 1, R18904 += 1, R18905 += 1 };
  s0 -> s4 [73, 73] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s0 -> s5 [73, 73] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s0 -> s6 [73, 73] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s0 -> s7 [73, 73] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s0 -> s2 [74, 76] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s0 -> s1 [74, 65535] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s0 -> s2 [80, 65535] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s1 -> s1 [0, 72] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s1 -> s2 [0, 72] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s1 -> s4 [73, 73] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s1 -> s5 [73, 73] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s1 -> s6 [73, 73] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s1 -> s7 [73, 73] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s1 -> s2 [74, 76] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s1 -> s1 [74, 65535] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s1 -> s2 [80, 65535] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s2 -> s2 [0, 72] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R18949 += 1 };
  s2 -> s6 [73, 73] { R18949 += 1, R18905 += 1 };
  s2 -> s7 [73, 73] { R18949 += 1, R18905 += 1 };
  s2 -> s2 [74, 76] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s2 -> s2 [74, 65535] { R18949 += 1, R18905 += 1 };
  s2 -> s2 [80, 65535] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s3 -> s1 [0, 72] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s3 -> s2 [0, 72] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s3 -> s3 [0, 65535] { R18949 += 1, R18904 += 1, R18905 += 1 };
  s3 -> s4 [73, 73] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s3 -> s5 [73, 73] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s3 -> s6 [73, 73] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s3 -> s7 [73, 73] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s3 -> s2 [74, 76] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s3 -> s1 [74, 65535] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s3 -> s2 [80, 65535] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s5 -> s7 [0, 76] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s5 -> s5 [0, 65535] { R18949 += 1, R18905 += 1, R18846 += 1, R18847 += 1 };
  s5 -> s7 [80, 65535] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R18949 += 1 };
  s7 -> s7 [0, 76] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R18949 += 1 };
  s7 -> s7 [0, 65535] { R18949 += 1, R18905 += 1 };
  s7 -> s7 [80, 65535] { R18949 += 1, R18905 += 1, R18847 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18949 += 1 };
  accepting s8, s2, s9, s6, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R18865 && R2 = R18949 && R20 - R18949 = -1 && R21 = R18949 && R22 - R18949 = -1 && R23 = R18949 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17891 + -1*R17889 - R53 = 0 && R52 + R17890 + R17888 = 0 && R18864 = 0 && R18890 = 0 && R18891 = 0 && R18896 = 0 && R18897 = 0 && R18898 = 0 && R18899 = 0 && R18902 = 0 && R18903 = 0 && R18904 = 0 && R18905 = 0 && R18906 = 0 && R18907 = R18949 && R18908 = 0 && R18909 = R18949 && R18910 = 0 && R18911 = R18949 && R18912 = 0 && R18913 = R18949 && R18914 = 0 && R18915 = R18949 && R18916 = 0 && R18917 = R18949 && R18918 = 0 && R18919 = R18949 && R18920 = 0 && R18921 = R18949 && R18922 = 0 && R18923 = R18949 && R18924 = 0 && R18925 = R18949 && R18926 = 0 && R18927 = R18949 && R18928 = 0 && R18929 = R18949 && R18930 = 0 && R18931 = R18949 && R18932 = 0 && R18933 = R18949 && R18934 = 0 && R18935 = R18949 && R18936 = 0 && R18937 = R18949 && R18938 = 0 && R18939 = R18949 && R18940 = 0 && R18941 = R18949 && R18942 = 0 && R18943 = R18949 && R18944 = 0 && R18945 = R18949 && R18946 = 0 && R18947 = R18949 && R18948 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17891 + -1*R17889 - R53 < 1 && -1 < R18865 && 0 < R18949 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R17891 + R17889 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R17891 + R17889 < 1))) && (R18850 != 0 || R18851 = R18865 || (R17 = 0 && R18865 = 0)) && (R18852 != 0 || R18853 = R18865 || (R17 = 0 && R18865 = 0)) && (R18854 != 0 || R18855 = R18865 || (R17 = 0 && R18865 = 0)) && (R18856 != 0 || R18857 = R18865 || (R17 = 0 && R18865 = 0)) && (R18858 != 0 || R18859 = R18865 || (R17 = 0 && R18865 = 0)) && (R18860 != 0 || R18861 = R18865 || (R17 = 0 && R18865 = 0)) && (R18862 != 0 || R18863 = R18865 || (R17 = 0 && R18865 = 0)) && (R18866 != 0 || R18865 = R18867 || (R17 = 0 && R18865 = 0)) && (R18868 != 0 || R18865 = R18869 || (R17 = 0 && R18865 = 0)) && (R18 = 0 || (R18888 = 0 && R18889 = 0)) && (R18 = 0 || (R18892 = 0 && R18893 = 0)) && (R18 = 0 || (R18894 = 0 && R18895 = 0)) && (R18 = 0 || (R18900 = 0 && R18901 = 0)) && (R19 = 0 || (R18870 = 0 && R18871 = 0)) && (R19 = 0 || (R18872 = 0 && R18873 = 0)) && (R19 = 0 || (R18874 = 0 && R18875 = 0)) && (R19 = 0 || (R18876 = 0 && R18877 = 0)) && (R19 = 0 || (R18878 = 0 && R18879 = 0)) && (R19 = 0 || (R18880 = 0 && R18881 = 0)) && (R19 = 0 || (R18882 = 0 && R18883 = 0)) && (R19 = 0 || (R18884 = 0 && R18885 = 0)) && (R19 = 0 || (R18886 = 0 && R18887 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0)) && (R58 + R18741 + R18738 = 0 || (R56 + R18739 + R18736 = 0 && R57 + R18740 + R18737 = 0)) && (R58 + R18741 + R18738 = 0 || (R62 + R18848 + R18846 = 0 && R63 + R18849 + R18847 = 0)) && (R18850 = 0 || (R17 = 0 && R18865 = 0)) && (R18852 = 0 || (R17 = 0 && R18865 = 0)) && (R18854 = 0 || (R17 = 0 && R18865 = 0)) && (R18856 = 0 || (R17 = 0 && R18865 = 0)) && (R18858 = 0 || (R17 = 0 && R18865 = 0)) && (R18860 = 0 || (R17 = 0 && R18865 = 0)) && (R18862 = 0 || (R17 = 0 && R18865 = 0)) && (R18866 = 0 || (R17 = 0 && R18865 = 0)) && (R18868 = 0 || (R17 = 0 && R18865 = 0));
// End of Parikh automata intersection problem
