// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R17, R17888, R17889, R17890, R17891, R17892, R17893, R17894, R17895, R17896, R17897, R18, R18106, R18107, R18108, R18109, R18110, R18111, R18112, R18113, R18114, R18115, R18116, R18117, R18118, R18119, R18120, R18121, R18122, R18123, R18124, R18125, R18126, R18127, R18128, R18129, R18130, R18131, R18132, R18133, R18134, R18135, R18136, R18137, R18138, R18139, R18140, R18141, R18142, R18143, R18144, R18145, R18146, R18147, R18148, R18149, R18150, R18151, R18152, R18153, R18154, R18155, R18156, R18157, R18158, R18159, R18160, R18161, R18162, R18163, R18164, R18165, R18166, R18167, R18168, R18169, R18170, R18171, R18172, R18173, R18174, R18175, R18176, R18177, R18178, R18179, R18180, R18181, R18182, R18183, R18184, R18185, R18186, R18187, R18188, R18189, R18190, R18191, R18192, R18193, R18194, R18195, R18196, R18197, R18198, R18199, R18200, R18201, R18202, R18203, R18204, R18205, R18206, R18207, R18208, R18209, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18131 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R18130 += 1, R18131 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18131 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R18133 += 1 };
  s0 -> s0 [0, 65535] { R18132 += 1, R18133 += 1 };
  s0 -> s2 [73, 73] { R18133 += 1 };
  s0 -> s3 [73, 73] { R18133 += 1 };
  s0 -> s1 [78, 65535] { R18133 += 1 };
  s1 -> s1 [0, 72] { R18133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18133 += 1 };
  s1 -> s3 [73, 73] { R18133 += 1 };
  s1 -> s1 [78, 65535] { R18133 += 1 };
  s2 -> s2 [0, 73] { R18133 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R18133 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R18135 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R18134 += 1, R18135 += 1 };
  s0 -> s2 [73, 73] { R18135 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R18135 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R18135 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R18135 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18135 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R18135 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R18135 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R18135 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R18137 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R18136 += 1, R18137 += 1 };
  s0 -> s2 [73, 73] { R18137 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R18137 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R18137 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R18137 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18137 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R18137 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R18137 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18137 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R18139 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R18138 += 1, R18139 += 1 };
  s0 -> s2 [73, 73] { R18139 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R18139 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R18139 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R18139 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18139 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R18139 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R18139 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18139 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R18141 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R18140 += 1, R18141 += 1 };
  s0 -> s2 [73, 73] { R18141 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R18141 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R18141 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R18141 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18141 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R18141 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R18141 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18141 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R18143 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R18142 += 1, R18143 += 1 };
  s0 -> s2 [73, 73] { R18143 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R18143 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R18143 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R18143 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18143 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R18143 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R18143 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R18143 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R18145 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R18144 += 1, R18145 += 1 };
  s0 -> s2 [73, 73] { R18145 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R18145 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R18145 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R18145 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18145 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R18145 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R18145 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18145 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R18147 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R18146 += 1, R18147 += 1 };
  s0 -> s2 [73, 73] { R18147 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R18147 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R18147 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R18147 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18147 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R18147 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R18147 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18147 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R18167 += 1 };
  s0 -> s0 [0, 65535] { R18166 += 1, R18167 += 1 };
  s0 -> s2 [73, 73] { R18167 += 1 };
  s0 -> s1 [74, 65535] { R18167 += 1 };
  s1 -> s1 [0, 72] { R18167 += 1 };
  s1 -> s2 [73, 73] { R18167 += 1 };
  s1 -> s1 [74, 65535] { R18167 += 1 };
  s2 -> s2 [0, 65535] { R18167 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R18168 += 1, R18169 += 1 };
  s0 -> s1 [0, 65535] { R18169 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18169 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R18171 += 1 };
  s0 -> s2 [0, 65535] { R18171 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R18170 += 1, R18171 += 1 };
  s0 -> s3 [73, 73] { R18171 += 1 };
  s0 -> s1 [74, 65535] { R18171 += 1 };
  s1 -> s1 [0, 72] { R18171 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R18171 += 1 };
  s1 -> s1 [74, 65535] { R18171 += 1 };
  s2 -> s1 [0, 72] { R18171 += 1 };
  s2 -> s2 [0, 65535] { R18171 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R18171 += 1 };
  s2 -> s1 [74, 65535] { R18171 += 1 };
  s3 -> s3 [0, 65535] { R18171 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R18173 += 1, R18111 += 1 };
  s0 -> s2 [0, 65535] { R18173 += 1, R18110 += 1, R18111 += 1 };
  s0 -> s0 [0, 65535] { R18172 += 1, R18173 += 1 };
  s0 -> s1 [74, 65535] { R18173 += 1, R18111 += 1 };
  s1 -> s1 [0, 72] { R18173 += 1, R18111 += 1 };
  s1 -> s1 [0, 65535] { R18173 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R18173 += 1, R18111 += 1 };
  s2 -> s1 [0, 72] { R18173 += 1, R18111 += 1 };
  s2 -> s2 [0, 65535] { R18173 += 1, R18110 += 1, R18111 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R18173 += 1, R18111 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18175 += 1, R18113 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R18175 += 1, R18112 += 1, R18113 += 1 };
  s0 -> s0 [0, 65535] { R18174 += 1, R18175 += 1 };
  s1 -> s4 [0, 65535] { R18175 += 1 };
  s1 -> s1 [0, 65535] { R18175 += 1, R18113 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18175 += 1, R18113 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18175 += 1, R18112 += 1, R18113 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18175 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R18177 += 1, R18115 += 1 };
  s0 -> s0 [0, 65535] { R18176 += 1, R18177 += 1 };
  s0 -> s2 [0, 65535] { R18177 += 1, R18114 += 1, R18115 += 1 };
  s0 -> s1 [77, 65535] { R18177 += 1, R18115 += 1 };
  s1 -> s1 [0, 73] { R18177 += 1, R18115 += 1 };
  s1 -> s1 [0, 65535] { R18177 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R18177 += 1, R18115 += 1 };
  s2 -> s1 [0, 73] { R18177 += 1, R18115 += 1 };
  s2 -> s2 [0, 65535] { R18177 += 1, R18114 += 1, R18115 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R18177 += 1, R18115 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18179 += 1, R18116 += 1, R18117 += 1 };
  s0 -> s2 [0, 65535] { R18179 += 1, R18117 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R18178 += 1, R18179 += 1 };
  s1 -> s1 [0, 65535] { R18179 += 1, R18116 += 1, R18117 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R18179 += 1, R18117 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R18179 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18179 += 1, R18117 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R18179 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R18181 += 1, R18119 += 1 };
  s0 -> s2 [0, 65535] { R18181 += 1, R18119 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R18181 += 1, R18118 += 1, R18119 += 1 };
  s0 -> s0 [0, 65535] { R18180 += 1, R18181 += 1 };
  s0 -> s1 [78, 65535] { R18181 += 1, R18119 += 1 };
  s1 -> s1 [0, 76] { R18181 += 1, R18119 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18181 += 1 };
  s1 -> s1 [78, 65535] { R18181 += 1, R18119 += 1 };
  s2 -> s1 [0, 76] { R18181 += 1, R18119 += 1 };
  s2 -> s2 [0, 65535] { R18181 += 1, R18119 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R18181 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R18181 += 1, R18119 += 1 };
  s3 -> s1 [0, 76] { R18181 += 1, R18119 += 1 };
  s3 -> s2 [0, 65535] { R18181 += 1, R18119 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18181 += 1, R18118 += 1, R18119 += 1 };
  s3 -> s1 [78, 65535] { R18181 += 1, R18119 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18181 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R18183 += 1, R18121 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R18182 += 1, R18183 += 1 };
  s0 -> s1 [0, 65535] { R18183 += 1, R18121 += 1 };
  s0 -> s2 [0, 65535] { R18183 += 1, R18120 += 1, R18121 += 1 };
  s0 -> s1 [78, 65535] { R18183 += 1, R18121 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R18183 += 1, R18121 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18183 += 1 };
  s1 -> s1 [0, 65535] { R18183 += 1, R18121 += 1 };
  s1 -> s1 [78, 65535] { R18183 += 1, R18121 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R18183 += 1, R18121 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18183 += 1, R18121 += 1 };
  s2 -> s2 [0, 65535] { R18183 += 1, R18120 += 1, R18121 += 1 };
  s2 -> s1 [78, 65535] { R18183 += 1, R18121 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18183 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R18185 += 1, R18122 += 1, R18123 += 1 };
  s0 -> s2 [0, 65535] { R18185 += 1, R18123 += 1 };
  s0 -> s3 [0, 65535] { R18185 += 1, R18123 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s0 [0, 65535] { R18184 += 1, R18185 += 1 };
  s1 -> s1 [0, 65535] { R18185 += 1, R18122 += 1, R18123 += 1 };
  s1 -> s2 [0, 65535] { R18185 += 1, R18123 += 1 };
  s1 -> s3 [0, 65535] { R18185 += 1, R18123 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18185 += 1, R18123 += 1 };
  s2 -> s4 [0, 65535] { R18185 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R18185 += 1, R18123 += 1 };
  s3 -> s3 [0, 65535] { R18185 += 1, R18123 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s4 [0, 65535] { R18185 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18185 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s0 -> s0 [0, 65535] { R18186 += 1, R18187 += 1 };
  s0 -> s2 [0, 65535] { R18187 += 1, R18124 += 1, R18125 += 1 };
  s0 -> s3 [0, 65535] { R18187 += 1, R18125 += 1, R17890 += 1, R17891 += 1 };
  s0 -> s4 [79, 79] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s0 -> s1 [80, 65535] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s1 -> s1 [0, 77] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s1 -> s4 [79, 79] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s1 -> s1 [80, 65535] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s2 -> s1 [0, 77] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s2 -> s2 [0, 65535] { R18187 += 1, R18124 += 1, R18125 += 1 };
  s2 -> s3 [0, 65535] { R18187 += 1, R18125 += 1, R17890 += 1, R17891 += 1 };
  s2 -> s4 [79, 79] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s2 -> s1 [80, 65535] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s3 -> s1 [0, 77] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s3 -> s3 [0, 65535] { R18187 += 1, R18125 += 1, R17890 += 1, R17891 += 1 };
  s3 -> s4 [79, 79] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s3 -> s1 [80, 65535] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s4 -> s4 [0, 77] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s4 -> s5 [0, 65535] { R18187 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18187 += 1, R18125 += 1 };
  s4 -> s4 [79, 65535] { R18187 += 1, R18125 += 1, R17891 += 1 };
  s5 -> s5 [0, 65535] { R18187 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R18189 += 1, R18127 += 1, R17896 += 1, R17897 += 1 };
  s0 -> s0 [0, 65535] { R18188 += 1, R18189 += 1 };
  s0 -> s2 [0, 65535] { R18189 += 1, R18126 += 1, R18127 += 1 };
  s0 -> s3 [0, 65535] { R18189 += 1, R18127 += 1, R17895 += 1, R17896 += 1 };
  s1 -> s4 [0, 65535] { R18189 += 1 };
  s1 -> s6 [0, 65535] { R18189 += 1, R18127 += 1 };
  s1 -> s1 [0, 65535] { R18189 += 1, R18127 += 1, R17896 += 1, R17897 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18189 += 1, R18127 += 1, R17896 += 1, R17897 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18189 += 1, R18126 += 1, R18127 += 1 };
  s2 -> s3 [0, 65535] { R18189 += 1, R18127 += 1, R17895 += 1, R17896 += 1 };
  s3 -> s4 [0, 65535] { R18189 += 1 };
  s3 -> s1 [0, 65535] { R18189 += 1, R18127 += 1, R17896 += 1, R17897 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18189 += 1, R18127 += 1, R17895 += 1, R17896 += 1 };
  s4 -> s4 [0, 65535] { R18189 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18189 += 1 };
  s6 -> s6 [0, 65535] { R18189 += 1, R18127 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R18191 += 1, R18128 += 1, R18129 += 1 };
  s0 -> s2 [0, 65535] { R18191 += 1, R18129 += 1 };
  s0 -> s0 [0, 65535] { R18190 += 1, R18191 += 1 };
  s1 -> s1 [0, 65535] { R18191 += 1, R18128 += 1, R18129 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R18191 += 1, R18129 += 1 };
  s2 -> s3 [0, 65535] { R18191 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18191 += 1, R18129 += 1 };
  s3 -> s3 [0, 65535] { R18191 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R18193 += 1, R18148 += 1, R18149 += 1 };
  s0 -> s2 [0, 65535] { R18193 += 1, R18149 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R18192 += 1, R18193 += 1 };
  s1 -> s1 [0, 65535] { R18193 += 1, R18148 += 1, R18149 += 1 };
  s1 -> s2 [0, 65535] { R18193 += 1, R18149 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R18193 += 1 };
  s2 -> s2 [0, 65535] { R18193 += 1, R18149 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18193 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R18195 += 1, R18151 += 1 };
  s0 -> s0 [0, 65535] { R18194 += 1, R18195 += 1 };
  s0 -> s2 [0, 65535] { R18195 += 1, R18150 += 1, R18151 += 1 };
  s0 -> s3 [73, 73] { R18195 += 1, R18151 += 1 };
  s0 -> s4 [73, 73] { R18195 += 1, R18151 += 1 };
  s0 -> s5 [77, 77] { R18195 += 1, R18151 += 1 };
  s0 -> s1 [78, 65535] { R18195 += 1, R18151 += 1 };
  s1 -> s1 [0, 72] { R18195 += 1, R18151 += 1 };
  s1 -> s3 [73, 73] { R18195 += 1, R18151 += 1 };
  s1 -> s4 [73, 73] { R18195 += 1, R18151 += 1 };
  s1 -> s5 [77, 77] { R18195 += 1, R18151 += 1 };
  s1 -> s1 [78, 65535] { R18195 += 1, R18151 += 1 };
  s2 -> s1 [0, 72] { R18195 += 1, R18151 += 1 };
  s2 -> s2 [0, 65535] { R18195 += 1, R18150 += 1, R18151 += 1 };
  s2 -> s3 [73, 73] { R18195 += 1, R18151 += 1 };
  s2 -> s4 [73, 73] { R18195 += 1, R18151 += 1 };
  s2 -> s5 [77, 77] { R18195 += 1, R18151 += 1 };
  s2 -> s1 [78, 65535] { R18195 += 1, R18151 += 1 };
  s3 -> s3 [0, 73] { R18195 += 1, R18151 += 1 };
  s3 -> s8 [77, 77] { R18195 += 1, R18151 += 1 };
  s3 -> s3 [78, 65535] { R18195 += 1, R18151 += 1 };
  s5 -> s5 [0, 72] { R18195 += 1, R18151 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18195 += 1 };
  s5 -> s7 [73, 73] { R18195 += 1, R18151 += 1 };
  s5 -> s8 [73, 73] { R18195 += 1, R18151 += 1 };
  s5 -> s5 [77, 65535] { R18195 += 1, R18151 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18195 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R18195 += 1, R18151 += 1 };
  s8 -> s8 [0, 65535] { R18195 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [77, 65535] { R18195 += 1, R18151 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R18197 += 1, R18153 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R18196 += 1, R18197 += 1 };
  s0 -> s2 [0, 65535] { R18197 += 1, R18152 += 1, R18153 += 1 };
  s0 -> s3 [73, 73] { R18197 += 1, R18153 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R18197 += 1, R18153 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R18197 += 1, R18153 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R18197 += 1, R18153 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18197 += 1 };
  s1 -> s3 [73, 73] { R18197 += 1, R18153 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R18197 += 1, R18153 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R18197 += 1, R18153 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R18197 += 1, R18153 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18197 += 1, R18152 += 1, R18153 += 1 };
  s2 -> s3 [73, 73] { R18197 += 1, R18153 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R18197 += 1, R18153 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R18197 += 1, R18153 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18197 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18197 += 1 };
  s4 -> s4 [0, 65535] { R18197 += 1, R18153 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18197 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R18199 += 1, R18155 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R18199 += 1, R18154 += 1, R18155 += 1 };
  s0 -> s0 [0, 65535] { R18198 += 1, R18199 += 1 };
  s0 -> s3 [73, 73] { R18199 += 1, R18155 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R18199 += 1, R18155 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R18199 += 1, R18155 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R18199 += 1, R18155 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18199 += 1 };
  s1 -> s3 [73, 73] { R18199 += 1, R18155 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R18199 += 1, R18155 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R18199 += 1, R18155 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R18199 += 1, R18155 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R18199 += 1, R18154 += 1, R18155 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R18199 += 1, R18155 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R18199 += 1, R18155 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R18199 += 1, R18155 += 1, R68 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18199 += 1 };
  s4 -> s5 [0, 65535] { R18199 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18199 += 1, R18155 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R18199 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R18201 += 1, R18156 += 1, R18157 += 1 };
  s0 -> s0 [0, 65535] { R18200 += 1, R18201 += 1 };
  s0 -> s4 [73, 73] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R18201 += 1 };
  s1 -> s4 [73, 73] { R18201 += 1, R18157 += 1 };
  s1 -> s5 [73, 73] { R18201 += 1, R18157 += 1 };
  s1 -> s1 [74, 76] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R18201 += 1, R18157 += 1 };
  s1 -> s1 [78, 65535] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R18201 += 1, R18156 += 1, R18157 += 1 };
  s3 -> s4 [73, 73] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R18201 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 76] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R18201 += 1, R18157 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R18201 += 1 };
  s5 -> s5 [78, 65535] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s7 -> s5 [0, 76] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R18201 += 1, R18157 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s5 [78, 65535] { R18201 += 1, R18157 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18201 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s3 [0, 65535] { R18203 += 1, R18158 += 1, R18159 += 1 };
  s0 -> s0 [0, 65535] { R18202 += 1, R18203 += 1 };
  s0 -> s4 [73, 73] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 72] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 72] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [73, 73] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s5 [73, 73] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s6 [73, 73] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s7 [73, 73] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [74, 65535] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 65535] { R18203 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [73, 73] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 72] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R18203 += 1, R18158 += 1, R18159 += 1 };
  s3 -> s4 [73, 73] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s5 [0, 65535] { R18203 += 1, R18159 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s7 [0, 65535] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s6 [0, 65535] { R18203 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R18203 += 1 };
  s7 -> s7 [0, 65535] { R18203 += 1, R18159 += 1, R15343 += 1, R15344 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18203 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s0 [0, 65535] { R18204 += 1, R18205 += 1 };
  s0 -> s2 [0, 65535] { R18205 += 1, R18160 += 1, R18161 += 1 };
  s0 -> s3 [73, 73] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s4 [73, 73] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s1 [74, 65535] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 72] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 65535] { R18205 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s4 [73, 73] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [74, 65535] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [0, 72] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s2 [0, 65535] { R18205 += 1, R18160 += 1, R18161 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s4 [73, 73] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [74, 65535] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s6 [0, 65535] { R18205 += 1 };
  s3 -> s3 [0, 65535] { R18205 += 1, R18161 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18205 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18205 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s0 [0, 65535] { R18206 += 1, R18207 += 1 };
  s0 -> s2 [0, 65535] { R18207 += 1, R18162 += 1, R18163 += 1 };
  s0 -> s3 [73, 73] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s4 [73, 73] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s1 [74, 65535] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [0, 72] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18207 += 1 };
  s1 -> s3 [73, 73] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s4 [73, 73] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [74, 65535] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s1 [0, 72] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18207 += 1, R18162 += 1, R18163 += 1 };
  s2 -> s3 [73, 73] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s4 [73, 73] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s1 [74, 65535] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18207 += 1, R18163 += 1, R17892 += 1, R17893 += 1 };
  s3 -> s6 [0, 65535] { R18207 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18207 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18207 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s0 -> s2 [0, 72] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s0 -> s3 [0, 65535] { R18209 += 1, R18164 += 1, R18165 += 1 };
  s0 -> s0 [0, 65535] { R18208 += 1, R18209 += 1 };
  s0 -> s4 [73, 73] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s0 -> s5 [73, 73] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s0 -> s6 [73, 73] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s0 -> s7 [73, 73] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s0 -> s2 [74, 76] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s0 -> s1 [74, 65535] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s0 -> s8 [77, 77] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s0 -> s2 [80, 65535] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s1 -> s1 [0, 72] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s1 -> s2 [0, 72] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s1 -> s4 [73, 73] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s1 -> s5 [73, 73] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s1 -> s6 [73, 73] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s1 -> s7 [73, 73] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s1 -> s2 [74, 76] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s1 -> s1 [74, 65535] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s1 -> s8 [77, 77] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s1 -> s2 [80, 65535] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s2 -> s2 [0, 72] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s2 -> s5 [73, 73] { R18209 += 1, R18165 += 1 };
  s2 -> s7 [73, 73] { R18209 += 1, R18165 += 1 };
  s2 -> s2 [74, 76] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s2 -> s2 [74, 65535] { R18209 += 1, R18165 += 1 };
  s2 -> s8 [77, 77] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s2 -> s2 [80, 65535] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s3 -> s1 [0, 72] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s3 -> s2 [0, 72] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s3 -> s3 [0, 65535] { R18209 += 1, R18164 += 1, R18165 += 1 };
  s3 -> s4 [73, 73] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s3 -> s5 [73, 73] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s3 -> s6 [73, 73] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s3 -> s7 [73, 73] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s3 -> s2 [74, 76] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s3 -> s1 [74, 65535] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s3 -> s8 [77, 77] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s3 -> s2 [80, 65535] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s4 -> s7 [0, 76] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s4 -> s4 [0, 65535] { R18209 += 1, R18165 += 1, R18106 += 1, R18107 += 1 };
  s4 -> s11 [77, 77] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s4 -> s7 [80, 65535] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s7 -> s7 [0, 76] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s7 -> s7 [0, 65535] { R18209 += 1, R18165 += 1 };
  s7 -> s11 [77, 77] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s7 -> s7 [80, 65535] { R18209 += 1, R18165 += 1, R18107 += 1 };
  s8 -> s8 [0, 72] { R18209 += 1, R18165 += 1 };
  s8 -> s8 [0, 65535] { R18209 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R18209 += 1, R18165 += 1 };
  s8 -> s11 [73, 73] { R18209 += 1, R18165 += 1 };
  s8 -> s8 [74, 65535] { R18209 += 1, R18165 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R18209 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R18209 += 1, R18165 += 1 };
  s11 -> s12 [0, 65535] { R18209 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R18209 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R18125 && R2 = R18209 && R20 - R18209 = -1 && R21 = R18209 && R22 - R18209 = -1 && R23 = R18209 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17891 + -1*R17889 - R53 = 0 && R52 + R17890 + R17888 = 0 && R18124 = 0 && R18150 = 0 && R18151 = 0 && R18156 = 0 && R18157 = 0 && R18158 = 0 && R18159 = 0 && R18164 = 0 && R18165 = 0 && R18166 = 0 && R18167 = R18209 && R18168 = 0 && R18169 = R18209 && R18170 = 0 && R18171 = R18209 && R18172 = 0 && R18173 = R18209 && R18174 = 0 && R18175 = R18209 && R18176 = 0 && R18177 = R18209 && R18178 = 0 && R18179 = R18209 && R18180 = 0 && R18181 = R18209 && R18182 = 0 && R18183 = R18209 && R18184 = 0 && R18185 = R18209 && R18186 = 0 && R18187 = R18209 && R18188 = 0 && R18189 = R18209 && R18190 = 0 && R18191 = R18209 && R18192 = 0 && R18193 = R18209 && R18194 = 0 && R18195 = R18209 && R18196 = 0 && R18197 = R18209 && R18198 = 0 && R18199 = R18209 && R18200 = 0 && R18201 = R18209 && R18202 = 0 && R18203 = R18209 && R18204 = 0 && R18205 = R18209 && R18206 = 0 && R18207 = R18209 && R18208 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17891 + -1*R17889 - R53 < 1 && -1 < R18125 && 0 < R18209 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R17891 + R17889 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R17891 + R17889 < 1))) && (R18110 != 0 || R18111 = R18125 || (R17 = 0 && R18125 = 0)) && (R18112 != 0 || R18113 = R18125 || (R17 = 0 && R18125 = 0)) && (R18114 != 0 || R18115 = R18125 || (R17 = 0 && R18125 = 0)) && (R18116 != 0 || R18117 = R18125 || (R17 = 0 && R18125 = 0)) && (R18118 != 0 || R18119 = R18125 || (R17 = 0 && R18125 = 0)) && (R18120 != 0 || R18121 = R18125 || (R17 = 0 && R18125 = 0)) && (R18122 != 0 || R18123 = R18125 || (R17 = 0 && R18125 = 0)) && (R18126 != 0 || R18125 = R18127 || (R17 = 0 && R18125 = 0)) && (R18128 != 0 || R18125 = R18129 || (R17 = 0 && R18125 = 0)) && (R18 = 0 || (R18148 = 0 && R18149 = 0)) && (R18 = 0 || (R18152 = 0 && R18153 = 0)) && (R18 = 0 || (R18154 = 0 && R18155 = 0)) && (R18 = 0 || (R18160 = 0 && R18161 = 0)) && (R18 = 0 || (R18162 = 0 && R18163 = 0)) && (R19 = 0 || (R18130 = 0 && R18131 = 0)) && (R19 = 0 || (R18132 = 0 && R18133 = 0)) && (R19 = 0 || (R18134 = 0 && R18135 = 0)) && (R19 = 0 || (R18136 = 0 && R18137 = 0)) && (R19 = 0 || (R18138 = 0 && R18139 = 0)) && (R19 = 0 || (R18140 = 0 && R18141 = 0)) && (R19 = 0 || (R18142 = 0 && R18143 = 0)) && (R19 = 0 || (R18144 = 0 && R18145 = 0)) && (R19 = 0 || (R18146 = 0 && R18147 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0)) && (R58 + R17897 + R17894 = 0 || (R56 + R17895 + R17892 = 0 && R57 + R17896 + R17893 = 0)) && (R58 + R17897 + R17894 = 0 || (R62 + R18108 + R18106 = 0 && R63 + R18109 + R18107 = 0)) && (R18110 = 0 || (R17 = 0 && R18125 = 0)) && (R18112 = 0 || (R17 = 0 && R18125 = 0)) && (R18114 = 0 || (R17 = 0 && R18125 = 0)) && (R18116 = 0 || (R17 = 0 && R18125 = 0)) && (R18118 = 0 || (R17 = 0 && R18125 = 0)) && (R18120 = 0 || (R17 = 0 && R18125 = 0)) && (R18122 = 0 || (R17 = 0 && R18125 = 0)) && (R18126 = 0 || (R17 = 0 && R18125 = 0)) && (R18128 = 0 || (R17 = 0 && R18125 = 0));
// End of Parikh automata intersection problem
