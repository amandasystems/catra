// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R52, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R53, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R56, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R57, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R58, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R537 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R536 += 1, R537 += 1 };
  s1 -> s1 [0, 65535] { R537 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R539 += 1 };
  s0 -> s0 [0, 65535] { R538 += 1, R539 += 1 };
  s0 -> s2 [73, 73] { R539 += 1 };
  s0 -> s3 [73, 73] { R539 += 1 };
  s0 -> s1 [78, 65535] { R539 += 1 };
  s1 -> s1 [0, 72] { R539 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R539 += 1 };
  s1 -> s3 [73, 73] { R539 += 1 };
  s1 -> s1 [78, 65535] { R539 += 1 };
  s2 -> s2 [0, 73] { R539 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R539 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R541 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R540 += 1, R541 += 1 };
  s0 -> s2 [73, 73] { R541 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R541 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R541 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R541 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R541 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R541 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R541 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R541 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R543 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R542 += 1, R543 += 1 };
  s0 -> s2 [73, 73] { R543 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R543 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R543 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R543 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R543 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R543 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R543 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R543 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R545 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R544 += 1, R545 += 1 };
  s0 -> s2 [73, 73] { R545 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R545 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R545 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R545 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R545 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R545 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R545 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R545 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R547 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R546 += 1, R547 += 1 };
  s0 -> s2 [73, 73] { R547 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R547 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R547 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R547 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R547 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R547 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R547 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R547 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R549 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R548 += 1, R549 += 1 };
  s0 -> s2 [73, 73] { R549 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R549 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R549 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R549 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R549 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R549 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R549 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R549 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R551 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R550 += 1, R551 += 1 };
  s0 -> s2 [73, 73] { R551 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R551 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R551 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R551 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R551 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R551 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R551 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R551 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R553 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R552 += 1, R553 += 1 };
  s0 -> s2 [73, 73] { R553 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R553 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R553 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R553 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R553 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R553 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R553 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R553 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R573 += 1 };
  s0 -> s0 [0, 65535] { R572 += 1, R573 += 1 };
  s0 -> s2 [73, 73] { R573 += 1 };
  s0 -> s1 [74, 65535] { R573 += 1 };
  s1 -> s1 [0, 72] { R573 += 1 };
  s1 -> s2 [73, 73] { R573 += 1 };
  s1 -> s1 [74, 65535] { R573 += 1 };
  s2 -> s2 [0, 65535] { R573 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R575 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R574 += 1, R575 += 1 };
  s1 -> s1 [0, 65535] { R575 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R577 += 1 };
  s0 -> s0 [0, 65535] { R576 += 1, R577 += 1 };
  s0 -> s2 [0, 65535] { R577 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R577 += 1 };
  s0 -> s1 [74, 65535] { R577 += 1 };
  s1 -> s1 [0, 72] { R577 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R577 += 1 };
  s1 -> s1 [74, 65535] { R577 += 1 };
  s2 -> s1 [0, 72] { R577 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R577 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R577 += 1 };
  s2 -> s1 [74, 65535] { R577 += 1 };
  s3 -> s3 [0, 65535] { R577 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R579 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R578 += 1, R579 += 1 };
  s0 -> s2 [0, 65535] { R579 += 1, R516 += 1, R517 += 1 };
  s0 -> s1 [74, 65535] { R579 += 1, R517 += 1 };
  s1 -> s1 [0, 72] { R579 += 1, R517 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R579 += 1 };
  s1 -> s1 [74, 65535] { R579 += 1, R517 += 1 };
  s2 -> s1 [0, 72] { R579 += 1, R517 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R579 += 1, R516 += 1, R517 += 1 };
  s2 -> s1 [74, 65535] { R579 += 1, R517 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R581 += 1, R518 += 1, R519 += 1 };
  s0 -> s2 [0, 65535] { R581 += 1, R519 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R580 += 1, R581 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R581 += 1, R518 += 1, R519 += 1 };
  s1 -> s2 [0, 65535] { R581 += 1, R519 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R581 += 1 };
  s2 -> s2 [0, 65535] { R581 += 1, R519 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R581 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R583 += 1, R521 += 1 };
  s0 -> s2 [0, 65535] { R583 += 1, R520 += 1, R521 += 1 };
  s0 -> s0 [0, 65535] { R582 += 1, R583 += 1 };
  s0 -> s1 [77, 65535] { R583 += 1, R521 += 1 };
  s1 -> s1 [0, 73] { R583 += 1, R521 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R583 += 1 };
  s1 -> s1 [77, 65535] { R583 += 1, R521 += 1 };
  s2 -> s1 [0, 73] { R583 += 1, R521 += 1 };
  s2 -> s2 [0, 65535] { R583 += 1, R520 += 1, R521 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R583 += 1, R521 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R584 += 1, R585 += 1 };
  s0 -> s1 [0, 65535] { R585 += 1, R523 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R585 += 1, R522 += 1, R523 += 1 };
  s1 -> s4 [0, 65535] { R585 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R585 += 1, R523 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R585 += 1, R523 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R585 += 1, R522 += 1, R523 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R585 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R587 += 1, R525 += 1 };
  s0 -> s2 [0, 65535] { R587 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R586 += 1, R587 += 1 };
  s0 -> s3 [0, 65535] { R587 += 1, R525 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R587 += 1, R525 += 1 };
  s1 -> s1 [0, 76] { R587 += 1, R525 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R587 += 1 };
  s1 -> s1 [78, 65535] { R587 += 1, R525 += 1 };
  s2 -> s1 [0, 76] { R587 += 1, R525 += 1 };
  s2 -> s2 [0, 65535] { R587 += 1, R524 += 1, R525 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R587 += 1, R525 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R587 += 1, R525 += 1 };
  s3 -> s1 [0, 76] { R587 += 1, R525 += 1 };
  s3 -> s4 [0, 65535] { R587 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R587 += 1, R525 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R587 += 1, R525 += 1 };
  s4 -> s4 [0, 65535] { R587 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R589 += 1, R527 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R588 += 1, R589 += 1 };
  s0 -> s2 [0, 65535] { R589 += 1, R526 += 1, R527 += 1 };
  s0 -> s3 [0, 65535] { R589 += 1, R527 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R589 += 1, R527 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R589 += 1, R527 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R589 += 1, R527 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R589 += 1 };
  s1 -> s1 [78, 65535] { R589 += 1, R527 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R589 += 1, R527 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R589 += 1, R526 += 1, R527 += 1 };
  s2 -> s3 [0, 65535] { R589 += 1, R527 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R589 += 1, R527 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R589 += 1, R527 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R589 += 1 };
  s3 -> s3 [0, 65535] { R589 += 1, R527 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R589 += 1, R527 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R589 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R591 += 1, R529 += 1, R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R591 += 1, R528 += 1, R529 += 1 };
  s0 -> s0 [0, 65535] { R590 += 1, R591 += 1 };
  s0 -> s3 [0, 65535] { R591 += 1, R529 += 1, R77 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R591 += 1, R529 += 1, R78 += 1, R79 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R591 += 1, R529 += 1 };
  s1 -> s5 [0, 65535] { R591 += 1 };
  s2 -> s1 [0, 65535] { R591 += 1, R529 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R591 += 1, R528 += 1, R529 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R591 += 1, R529 += 1, R77 += 1, R78 += 1 };
  s3 -> s1 [0, 65535] { R591 += 1, R529 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R591 += 1, R529 += 1, R77 += 1, R78 += 1 };
  s3 -> s5 [0, 65535] { R591 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R591 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R591 += 1, R529 += 1 };
  s6 -> s5 [0, 65535] { R591 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R593 += 1, R531 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R592 += 1, R593 += 1 };
  s0 -> s2 [0, 65535] { R593 += 1, R530 += 1, R531 += 1 };
  s0 -> s1 [0, 65535] { R593 += 1, R531 += 1 };
  s0 -> s1 [79, 65535] { R593 += 1, R531 += 1, R83 += 1 };
  s1 -> s1 [0, 77] { R593 += 1, R531 += 1, R83 += 1 };
  s1 -> s4 [0, 65535] { R593 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R593 += 1, R531 += 1 };
  s1 -> s1 [79, 65535] { R593 += 1, R531 += 1, R83 += 1 };
  s2 -> s1 [0, 77] { R593 += 1, R531 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R593 += 1, R530 += 1, R531 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R593 += 1, R531 += 1 };
  s2 -> s1 [79, 65535] { R593 += 1, R531 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R593 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R595 += 1, R533 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R594 += 1, R595 += 1 };
  s0 -> s2 [0, 65535] { R595 += 1, R533 += 1 };
  s0 -> s3 [0, 65535] { R595 += 1, R532 += 1, R533 += 1 };
  s1 -> s5 [0, 65535] { R595 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R595 += 1, R533 += 1, R510 += 1, R511 += 1 };
  s1 -> s2 [0, 65535] { R595 += 1, R533 += 1 };
  s2 -> s5 [0, 65535] { R595 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R595 += 1, R533 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R595 += 1, R533 += 1, R510 += 1, R511 += 1 };
  s3 -> s2 [0, 65535] { R595 += 1, R533 += 1 };
  s3 -> s3 [0, 65535] { R595 += 1, R532 += 1, R533 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R595 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R597 += 1, R535 += 1, R515 += 1 };
  s0 -> s0 [0, 65535] { R596 += 1, R597 += 1 };
  s0 -> s2 [0, 65535] { R597 += 1, R534 += 1, R535 += 1 };
  s0 -> s3 [0, 65535] { R597 += 1, R535 += 1, R514 += 1, R515 += 1 };
  s0 -> s4 [77, 77] { R597 += 1, R535 += 1, R515 += 1 };
  s0 -> s5 [77, 77] { R597 += 1, R535 += 1, R515 += 1 };
  s0 -> s1 [80, 65535] { R597 += 1, R535 += 1, R515 += 1 };
  s1 -> s1 [0, 76] { R597 += 1, R535 += 1, R515 += 1 };
  s1 -> s6 [0, 65535] { R597 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R597 += 1, R535 += 1 };
  s1 -> s4 [77, 77] { R597 += 1, R535 += 1, R515 += 1 };
  s1 -> s5 [77, 77] { R597 += 1, R535 += 1, R515 += 1 };
  s1 -> s1 [80, 65535] { R597 += 1, R535 += 1, R515 += 1 };
  s2 -> s1 [0, 76] { R597 += 1, R535 += 1, R515 += 1 };
  s2 -> s2 [0, 65535] { R597 += 1, R534 += 1, R535 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R597 += 1, R535 += 1, R514 += 1, R515 += 1 };
  s2 -> s4 [77, 77] { R597 += 1, R535 += 1, R515 += 1 };
  s2 -> s5 [77, 77] { R597 += 1, R535 += 1, R515 += 1 };
  s2 -> s1 [80, 65535] { R597 += 1, R535 += 1, R515 += 1 };
  s3 -> s1 [0, 76] { R597 += 1, R535 += 1, R515 += 1 };
  s3 -> s6 [0, 65535] { R597 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R597 += 1, R535 += 1, R514 += 1, R515 += 1 };
  s3 -> s4 [77, 77] { R597 += 1, R535 += 1, R515 += 1 };
  s3 -> s5 [77, 77] { R597 += 1, R535 += 1, R515 += 1 };
  s3 -> s1 [80, 65535] { R597 += 1, R535 += 1, R515 += 1 };
  s4 -> s4 [0, 77] { R597 += 1, R535 += 1, R515 += 1 };
  s4 -> s6 [0, 65535] { R597 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R597 += 1, R535 += 1 };
  s4 -> s4 [80, 65535] { R597 += 1, R535 += 1, R515 += 1 };
  s5 -> s6 [0, 65535] { R597 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R597 += 1, R535 += 1 };
  s6 -> s6 [0, 65535] { R597 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R598 += 1, R599 += 1 };
  s0 -> s1 [0, 65535] { R599 += 1, R555 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R599 += 1, R554 += 1, R555 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R599 += 1, R555 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R599 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R599 += 1, R555 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R599 += 1, R554 += 1, R555 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R599 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R601 += 1, R557 += 1 };
  s0 -> s0 [0, 65535] { R600 += 1, R601 += 1 };
  s0 -> s2 [0, 65535] { R601 += 1, R556 += 1, R557 += 1 };
  s0 -> s3 [73, 73] { R601 += 1, R557 += 1 };
  s0 -> s4 [73, 73] { R601 += 1, R557 += 1 };
  s0 -> s5 [77, 77] { R601 += 1, R557 += 1 };
  s0 -> s1 [78, 65535] { R601 += 1, R557 += 1 };
  s1 -> s1 [0, 72] { R601 += 1, R557 += 1 };
  s1 -> s3 [73, 73] { R601 += 1, R557 += 1 };
  s1 -> s4 [73, 73] { R601 += 1, R557 += 1 };
  s1 -> s5 [77, 77] { R601 += 1, R557 += 1 };
  s1 -> s1 [78, 65535] { R601 += 1, R557 += 1 };
  s2 -> s1 [0, 72] { R601 += 1, R557 += 1 };
  s2 -> s2 [0, 65535] { R601 += 1, R556 += 1, R557 += 1 };
  s2 -> s3 [73, 73] { R601 += 1, R557 += 1 };
  s2 -> s4 [73, 73] { R601 += 1, R557 += 1 };
  s2 -> s5 [77, 77] { R601 += 1, R557 += 1 };
  s2 -> s1 [78, 65535] { R601 += 1, R557 += 1 };
  s4 -> s4 [0, 73] { R601 += 1, R557 += 1 };
  s4 -> s8 [77, 77] { R601 += 1, R557 += 1 };
  s4 -> s4 [78, 65535] { R601 += 1, R557 += 1 };
  s5 -> s5 [0, 72] { R601 += 1, R557 += 1 };
  s5 -> s5 [0, 65535] { R601 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R601 += 1, R557 += 1 };
  s5 -> s8 [73, 73] { R601 += 1, R557 += 1 };
  s5 -> s5 [77, 65535] { R601 += 1, R557 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R601 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R601 += 1, R557 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R601 += 1 };
  s8 -> s8 [77, 65535] { R601 += 1, R557 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R603 += 1, R559 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R603 += 1, R558 += 1, R559 += 1 };
  s0 -> s0 [0, 65535] { R602 += 1, R603 += 1 };
  s0 -> s3 [73, 73] { R603 += 1, R559 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R603 += 1, R559 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R603 += 1, R559 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R603 += 1, R559 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R603 += 1 };
  s1 -> s3 [73, 73] { R603 += 1, R559 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R603 += 1, R559 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R603 += 1, R559 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R603 += 1, R559 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R603 += 1, R558 += 1, R559 += 1 };
  s2 -> s3 [73, 73] { R603 += 1, R559 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R603 += 1, R559 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R603 += 1, R559 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R603 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R603 += 1 };
  s4 -> s4 [0, 65535] { R603 += 1, R559 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R603 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R605 += 1, R561 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R604 += 1, R605 += 1 };
  s0 -> s2 [0, 65535] { R605 += 1, R560 += 1, R561 += 1 };
  s0 -> s3 [73, 73] { R605 += 1, R561 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R605 += 1, R561 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R605 += 1, R561 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R605 += 1, R561 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R605 += 1 };
  s1 -> s3 [73, 73] { R605 += 1, R561 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R605 += 1, R561 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R605 += 1, R561 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R605 += 1, R561 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R605 += 1, R560 += 1, R561 += 1 };
  s2 -> s3 [73, 73] { R605 += 1, R561 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R605 += 1, R561 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R605 += 1, R561 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R605 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R605 += 1 };
  s4 -> s4 [0, 65535] { R605 += 1, R561 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R605 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R607 += 1, R562 += 1, R563 += 1 };
  s0 -> s0 [0, 65535] { R606 += 1, R607 += 1 };
  s0 -> s3 [73, 73] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R607 += 1 };
  s1 -> s3 [73, 73] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R607 += 1, R562 += 1, R563 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R607 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R607 += 1, R563 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R607 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R607 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R609 += 1, R564 += 1, R565 += 1 };
  s0 -> s0 [0, 65535] { R608 += 1, R609 += 1 };
  s0 -> s3 [73, 73] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R609 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R609 += 1, R564 += 1, R565 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R609 += 1 };
  s3 -> s3 [0, 65535] { R609 += 1, R565 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R609 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R609 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R611 += 1, R567 += 1, R81 += 1 };
  s0 -> s2 [0, 72] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R610 += 1, R611 += 1 };
  s0 -> s3 [0, 65535] { R611 += 1, R566 += 1, R567 += 1 };
  s0 -> s4 [73, 73] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s0 -> s5 [73, 73] { R611 += 1, R567 += 1, R81 += 1 };
  s0 -> s6 [73, 73] { R611 += 1, R567 += 1, R81 += 1 };
  s0 -> s7 [73, 73] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s0 -> s1 [74, 77] { R611 += 1, R567 += 1, R81 += 1 };
  s0 -> s2 [74, 65535] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [79, 79] { R611 += 1, R567 += 1, R81 += 1 };
  s0 -> s1 [80, 65535] { R611 += 1, R567 += 1, R81 += 1 };
  s1 -> s1 [0, 72] { R611 += 1, R567 += 1, R81 += 1 };
  s1 -> s5 [73, 73] { R611 += 1, R567 += 1, R81 += 1 };
  s1 -> s6 [73, 73] { R611 += 1, R567 += 1, R81 += 1 };
  s1 -> s1 [74, 77] { R611 += 1, R567 += 1, R81 += 1 };
  s1 -> s8 [79, 79] { R611 += 1, R567 += 1, R81 += 1 };
  s1 -> s1 [80, 65535] { R611 += 1, R567 += 1, R81 += 1 };
  s2 -> s1 [0, 72] { R611 += 1, R567 += 1, R81 += 1 };
  s2 -> s2 [0, 72] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [73, 73] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s2 -> s5 [73, 73] { R611 += 1, R567 += 1, R81 += 1 };
  s2 -> s6 [73, 73] { R611 += 1, R567 += 1, R81 += 1 };
  s2 -> s7 [73, 73] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s2 -> s1 [74, 77] { R611 += 1, R567 += 1, R81 += 1 };
  s2 -> s2 [74, 65535] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s2 -> s8 [79, 79] { R611 += 1, R567 += 1, R81 += 1 };
  s2 -> s1 [80, 65535] { R611 += 1, R567 += 1, R81 += 1 };
  s3 -> s1 [0, 72] { R611 += 1, R567 += 1, R81 += 1 };
  s3 -> s2 [0, 72] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R611 += 1, R566 += 1, R567 += 1 };
  s3 -> s4 [73, 73] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s3 -> s5 [73, 73] { R611 += 1, R567 += 1, R81 += 1 };
  s3 -> s6 [73, 73] { R611 += 1, R567 += 1, R81 += 1 };
  s3 -> s7 [73, 73] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s3 -> s1 [74, 77] { R611 += 1, R567 += 1, R81 += 1 };
  s3 -> s2 [74, 65535] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [79, 79] { R611 += 1, R567 += 1, R81 += 1 };
  s3 -> s1 [80, 65535] { R611 += 1, R567 += 1, R81 += 1 };
  s5 -> s5 [0, 77] { R611 += 1, R567 += 1, R81 += 1 };
  s5 -> s11 [79, 79] { R611 += 1, R567 += 1, R81 += 1 };
  s5 -> s5 [80, 65535] { R611 += 1, R567 += 1, R81 += 1 };
  s7 -> s5 [0, 77] { R611 += 1, R567 += 1, R81 += 1 };
  s7 -> s7 [0, 65535] { R611 += 1, R567 += 1, R80 += 1, R81 += 1 };
  s7 -> s11 [79, 79] { R611 += 1, R567 += 1, R81 += 1 };
  s7 -> s5 [80, 65535] { R611 += 1, R567 += 1, R81 += 1 };
  s8 -> s8 [0, 72] { R611 += 1, R567 += 1, R81 += 1 };
  s8 -> s8 [0, 65535] { R611 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R611 += 1, R567 += 1 };
  s8 -> s11 [73, 73] { R611 += 1, R567 += 1 };
  s8 -> s8 [74, 77] { R611 += 1, R567 += 1, R81 += 1 };
  s8 -> s8 [74, 65535] { R611 += 1, R567 += 1 };
  s8 -> s8 [79, 65535] { R611 += 1, R567 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R611 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R611 += 1, R567 += 1, R81 += 1 };
  s11 -> s12 [0, 65535] { R611 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R611 += 1, R567 += 1 };
  s11 -> s11 [79, 65535] { R611 += 1, R567 += 1, R81 += 1 };
  s12 -> s12 [0, 65535] { R611 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s0 -> s2 [0, 72] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s0 -> s3 [0, 65535] { R613 += 1, R568 += 1, R569 += 1 };
  s0 -> s0 [0, 65535] { R612 += 1, R613 += 1 };
  s0 -> s4 [73, 73] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s0 -> s5 [73, 73] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s0 -> s6 [73, 73] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s0 -> s7 [73, 73] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s0 -> s1 [74, 65535] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s0 -> s2 [74, 65535] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 72] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s1 -> s2 [0, 72] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s1 -> s4 [73, 73] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s1 -> s5 [73, 73] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s1 -> s6 [73, 73] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s1 -> s7 [73, 73] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [74, 65535] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s1 -> s2 [74, 65535] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [0, 72] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [0, 65535] { R613 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [73, 73] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s2 -> s7 [73, 73] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [74, 65535] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s3 -> s1 [0, 72] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s3 -> s2 [0, 72] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s3 -> s3 [0, 65535] { R613 += 1, R568 += 1, R569 += 1 };
  s3 -> s4 [73, 73] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s3 -> s5 [73, 73] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s3 -> s6 [73, 73] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s3 -> s7 [73, 73] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s3 -> s1 [74, 65535] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s3 -> s2 [74, 65535] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s4 -> s4 [0, 65535] { R613 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R613 += 1, R569 += 1, R506 += 1, R507 += 1 };
  s5 -> s7 [0, 65535] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s7 -> s8 [0, 65535] { R613 += 1 };
  s7 -> s7 [0, 65535] { R613 += 1, R569 += 1, R507 += 1, R508 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R613 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s0 -> s0 [0, 65535] { R614 += 1, R615 += 1 };
  s0 -> s2 [0, 65535] { R615 += 1, R570 += 1, R571 += 1 };
  s0 -> s3 [73, 73] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s0 -> s4 [73, 73] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s0 -> s1 [74, 65535] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s1 -> s1 [0, 72] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R615 += 1 };
  s1 -> s3 [73, 73] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s1 -> s4 [73, 73] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s1 -> s1 [74, 65535] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s2 -> s1 [0, 72] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s2 -> s2 [0, 65535] { R615 += 1, R570 += 1, R571 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s2 -> s4 [73, 73] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s2 -> s1 [74, 65535] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s3 -> s3 [0, 65535] { R615 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R615 += 1 };
  s4 -> s4 [0, 65535] { R615 += 1, R571 += 1, R512 += 1, R513 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R615 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R615 && R20 - R615 = -1 && R21 = R615 && R22 - R615 = -1 && R23 = R615 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R556 = 0 && R557 = 0 && R566 = 0 && R567 = 0 && R568 = 0 && R569 = 0 && R572 = 0 && R573 = R615 && R574 = 0 && R575 = R615 && R576 = 0 && R577 = R615 && R578 = 0 && R579 = R615 && R580 = 0 && R581 = R615 && R582 = 0 && R583 = R615 && R584 = 0 && R585 = R615 && R586 = 0 && R587 = R615 && R588 = 0 && R589 = R615 && R590 = 0 && R591 = R615 && R592 = 0 && R593 = R615 && R594 = 0 && R595 = R615 && R596 = 0 && R597 = R615 && R598 = 0 && R599 = R615 && R600 = 0 && R601 = R615 && R602 = 0 && R603 = R615 && R604 = 0 && R605 = R615 && R606 = 0 && R607 = R615 && R608 = 0 && R609 = R615 && R610 = 0 && R611 = R615 && R612 = 0 && R613 = R615 && R614 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R615 && (R1 != 0 || R17 = 0 || (R516 = 0 && R517 = 0)) && (R1 != 0 || R17 = 0 || (R518 = 0 && R519 = 0)) && (R1 != 0 || R17 = 0 || (R520 = 0 && R521 = 0)) && (R1 != 0 || R17 = 0 || (R522 = 0 && R523 = 0)) && (R1 != 0 || R17 = 0 || (R524 = 0 && R525 = 0)) && (R1 != 0 || R17 = 0 || (R526 = 0 && R527 = 0)) && (R1 != 0 || R17 = 0 || (R528 = 0 && R529 = 0)) && (R1 != 0 || R17 = 0 || (R530 = 0 && R531 = 0)) && (R1 != 0 || R17 = 0 || (R532 = 0 && R533 = 0)) && (R1 != 0 || R17 = 0 || (R534 = 0 && R535 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R516 != 0 || R1 = R517 || R1 < 1) && (R518 != 0 || R1 = R519 || R1 < 1) && (R520 != 0 || R1 = R521 || R1 < 1) && (R522 != 0 || R1 = R523 || R1 < 1) && (R524 != 0 || R1 = R525 || R1 < 1) && (R526 != 0 || R1 = R527 || R1 < 1) && (R528 != 0 || R1 = R529 || R1 < 1) && (R530 != 0 || R1 = R531 || R1 < 1) && (R532 != 0 || R1 = R533 || R1 < 1) && (R534 != 0 || R1 = R535 || R1 < 1) && (R18 = 0 || (R554 = 0 && R555 = 0)) && (R18 = 0 || (R558 = 0 && R559 = 0)) && (R18 = 0 || (R560 = 0 && R561 = 0)) && (R18 = 0 || (R562 = 0 && R563 = 0)) && (R18 = 0 || (R564 = 0 && R565 = 0)) && (R18 = 0 || (R570 = 0 && R571 = 0)) && (R19 = 0 || (R536 = 0 && R537 = 0)) && (R19 = 0 || (R538 = 0 && R539 = 0)) && (R19 = 0 || (R540 = 0 && R541 = 0)) && (R19 = 0 || (R542 = 0 && R543 = 0)) && (R19 = 0 || (R544 = 0 && R545 = 0)) && (R19 = 0 || (R546 = 0 && R547 = 0)) && (R19 = 0 || (R548 = 0 && R549 = 0)) && (R19 = 0 || (R550 = 0 && R551 = 0)) && (R19 = 0 || (R552 = 0 && R553 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R511 + R508 = 0 || (R56 + R509 + R506 = 0 && R57 + R510 + R507 = 0)) && (R58 + R511 + R508 = 0 || (R62 + R514 + R512 = 0 && R63 + R515 + R513 = 0)) && (R516 = 0 || R1 < 1) && (R518 = 0 || R1 < 1) && (R520 = 0 || R1 < 1) && (R522 = 0 || R1 < 1) && (R524 = 0 || R1 < 1) && (R526 = 0 || R1 < 1) && (R528 = 0 || R1 < 1) && (R530 = 0 || R1 < 1) && (R532 = 0 || R1 < 1) && (R534 = 0 || R1 < 1);
// End of Parikh automata intersection problem
