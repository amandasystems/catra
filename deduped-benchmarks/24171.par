// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R66, R67, R68, R6862, R6863, R6864, R6865, R6866, R6867, R69, R70, R71, R7180, R7181, R7182, R7183, R7184, R7185, R7186, R7187, R7188, R7189, R7190, R7191, R7192, R7193, R7194, R7195, R7196, R7197, R7198, R7199, R72, R7200, R7201, R7202, R7203, R7204, R7205, R7206, R7207, R7208, R7209, R7210, R7211, R7212, R7213, R7214, R7215, R7216, R7217, R7218, R7219, R7220, R7221, R7222, R7223, R7224, R7225, R7226, R7227, R7228, R7229, R7230, R7231, R7232, R7233, R7234, R7235, R7236, R7237, R7238, R7239, R7240, R7241, R7242, R7243, R7244, R7245, R7246, R7247, R7248, R7249, R7250, R7251, R7252, R7253, R7254, R7255, R7256, R7257, R7258, R7259, R7260, R7261, R7262, R7263, R7264, R7265, R7266, R7267, R7268, R7269, R7270, R7271, R7272, R7273, R7274, R7275, R7276, R7277, R7278, R7279, R7280, R7281, R7282, R7283, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7205 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R7204 += 1, R7205 += 1 };
  s1 -> s1 [0, 65535] { R7205 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R7207 += 1 };
  s0 -> s0 [0, 65535] { R7206 += 1, R7207 += 1 };
  s0 -> s2 [73, 73] { R7207 += 1 };
  s0 -> s3 [73, 73] { R7207 += 1 };
  s0 -> s1 [78, 65535] { R7207 += 1 };
  s1 -> s1 [0, 72] { R7207 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7207 += 1 };
  s1 -> s3 [73, 73] { R7207 += 1 };
  s1 -> s1 [78, 65535] { R7207 += 1 };
  s2 -> s2 [0, 73] { R7207 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R7207 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R7209 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7208 += 1, R7209 += 1 };
  s0 -> s2 [73, 73] { R7209 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R7209 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R7209 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R7209 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7209 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R7209 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R7209 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R7209 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R7211 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7210 += 1, R7211 += 1 };
  s0 -> s2 [73, 73] { R7211 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R7211 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R7211 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R7211 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7211 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R7211 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R7211 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R7211 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R7213 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7212 += 1, R7213 += 1 };
  s0 -> s2 [73, 73] { R7213 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R7213 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R7213 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R7213 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7213 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R7213 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R7213 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7213 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R7215 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7214 += 1, R7215 += 1 };
  s0 -> s2 [73, 73] { R7215 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R7215 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R7215 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R7215 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7215 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R7215 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R7215 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R7215 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R7217 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7216 += 1, R7217 += 1 };
  s0 -> s2 [73, 73] { R7217 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R7217 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R7217 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R7217 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7217 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R7217 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R7217 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R7217 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R7219 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7218 += 1, R7219 += 1 };
  s0 -> s2 [73, 73] { R7219 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R7219 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R7219 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R7219 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7219 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R7219 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R7219 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R7219 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R7221 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7220 += 1, R7221 += 1 };
  s0 -> s2 [73, 73] { R7221 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R7221 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R7221 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R7221 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7221 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R7221 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R7221 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R7221 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R7241 += 1 };
  s0 -> s0 [0, 65535] { R7240 += 1, R7241 += 1 };
  s0 -> s2 [73, 73] { R7241 += 1 };
  s0 -> s1 [74, 65535] { R7241 += 1 };
  s1 -> s1 [0, 72] { R7241 += 1 };
  s1 -> s2 [73, 73] { R7241 += 1 };
  s1 -> s1 [74, 65535] { R7241 += 1 };
  s2 -> s2 [0, 65535] { R7241 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7242 += 1, R7243 += 1 };
  s0 -> s1 [0, 65535] { R7243 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7243 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R7245 += 1 };
  s0 -> s2 [0, 65535] { R7245 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R7244 += 1, R7245 += 1 };
  s0 -> s3 [73, 73] { R7245 += 1 };
  s0 -> s1 [74, 65535] { R7245 += 1 };
  s1 -> s1 [0, 72] { R7245 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R7245 += 1 };
  s1 -> s1 [74, 65535] { R7245 += 1 };
  s2 -> s1 [0, 72] { R7245 += 1 };
  s2 -> s2 [0, 65535] { R7245 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R7245 += 1 };
  s2 -> s1 [74, 65535] { R7245 += 1 };
  s3 -> s3 [0, 65535] { R7245 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R7247 += 1, R7185 += 1 };
  s0 -> s0 [0, 65535] { R7246 += 1, R7247 += 1 };
  s0 -> s2 [0, 65535] { R7247 += 1, R7184 += 1, R7185 += 1 };
  s0 -> s1 [74, 65535] { R7247 += 1, R7185 += 1 };
  s1 -> s1 [0, 72] { R7247 += 1, R7185 += 1 };
  s1 -> s1 [0, 65535] { R7247 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R7247 += 1, R7185 += 1 };
  s2 -> s1 [0, 72] { R7247 += 1, R7185 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7247 += 1, R7184 += 1, R7185 += 1 };
  s2 -> s1 [74, 65535] { R7247 += 1, R7185 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7249 += 1, R7186 += 1, R7187 += 1 };
  s0 -> s0 [0, 65535] { R7248 += 1, R7249 += 1 };
  s0 -> s2 [0, 65535] { R7249 += 1, R7187 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R7249 += 1, R7186 += 1, R7187 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7249 += 1, R7187 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7249 += 1, R7187 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R7249 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7249 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R7251 += 1, R7189 += 1 };
  s0 -> s2 [0, 65535] { R7251 += 1, R7188 += 1, R7189 += 1 };
  s0 -> s0 [0, 65535] { R7250 += 1, R7251 += 1 };
  s0 -> s1 [77, 65535] { R7251 += 1, R7189 += 1 };
  s1 -> s1 [0, 73] { R7251 += 1, R7189 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7251 += 1 };
  s1 -> s1 [77, 65535] { R7251 += 1, R7189 += 1 };
  s2 -> s1 [0, 73] { R7251 += 1, R7189 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7251 += 1, R7188 += 1, R7189 += 1 };
  s2 -> s1 [77, 65535] { R7251 += 1, R7189 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7253 += 1, R7190 += 1, R7191 += 1 };
  s0 -> s2 [0, 65535] { R7253 += 1, R7191 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R7252 += 1, R7253 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7253 += 1, R7190 += 1, R7191 += 1 };
  s1 -> s2 [0, 65535] { R7253 += 1, R7191 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7253 += 1 };
  s2 -> s2 [0, 65535] { R7253 += 1, R7191 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7253 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R7255 += 1, R7193 += 1 };
  s0 -> s2 [0, 65535] { R7255 += 1, R7192 += 1, R7193 += 1 };
  s0 -> s0 [0, 65535] { R7254 += 1, R7255 += 1 };
  s0 -> s3 [0, 65535] { R7255 += 1, R7193 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R7255 += 1, R7193 += 1 };
  s1 -> s1 [0, 76] { R7255 += 1, R7193 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7255 += 1 };
  s1 -> s1 [78, 65535] { R7255 += 1, R7193 += 1 };
  s2 -> s1 [0, 76] { R7255 += 1, R7193 += 1 };
  s2 -> s2 [0, 65535] { R7255 += 1, R7192 += 1, R7193 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7255 += 1, R7193 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R7255 += 1, R7193 += 1 };
  s3 -> s1 [0, 76] { R7255 += 1, R7193 += 1 };
  s3 -> s4 [0, 65535] { R7255 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7255 += 1, R7193 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R7255 += 1, R7193 += 1 };
  s4 -> s4 [0, 65535] { R7255 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R7257 += 1, R7195 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R7257 += 1, R7194 += 1, R7195 += 1 };
  s0 -> s3 [0, 65535] { R7257 += 1, R7195 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R7256 += 1, R7257 += 1 };
  s0 -> s1 [78, 65535] { R7257 += 1, R7195 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R7257 += 1, R7195 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R7257 += 1 };
  s1 -> s1 [0, 65535] { R7257 += 1, R7195 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R7257 += 1, R7195 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R7257 += 1, R7195 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R7257 += 1, R7194 += 1, R7195 += 1 };
  s2 -> s3 [0, 65535] { R7257 += 1, R7195 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R7257 += 1, R7195 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R7257 += 1, R7195 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R7257 += 1 };
  s3 -> s3 [0, 65535] { R7257 += 1, R7195 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R7257 += 1, R7195 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R7257 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7259 += 1, R7197 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R7259 += 1, R7197 += 1 };
  s0 -> s0 [0, 65535] { R7258 += 1, R7259 += 1 };
  s0 -> s3 [0, 65535] { R7259 += 1, R7196 += 1, R7197 += 1 };
  s1 -> s5 [0, 65535] { R7259 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7259 += 1, R7197 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s2 [0, 65535] { R7259 += 1, R7197 += 1 };
  s2 -> s5 [0, 65535] { R7259 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7259 += 1, R7197 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7259 += 1, R7197 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s2 [0, 65535] { R7259 += 1, R7197 += 1 };
  s3 -> s3 [0, 65535] { R7259 += 1, R7196 += 1, R7197 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7259 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s0 -> s2 [0, 65535] { R7261 += 1, R7198 += 1, R7199 += 1 };
  s0 -> s3 [0, 65535] { R7261 += 1, R7199 += 1, R6438 += 1, R6439 += 1 };
  s0 -> s0 [0, 65535] { R7260 += 1, R7261 += 1 };
  s0 -> s4 [79, 79] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s0 -> s1 [80, 65535] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s1 -> s1 [0, 77] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s1 -> s4 [79, 79] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s1 -> s1 [80, 65535] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s2 -> s1 [0, 77] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R7261 += 1, R7198 += 1, R7199 += 1 };
  s2 -> s3 [0, 65535] { R7261 += 1, R7199 += 1, R6438 += 1, R6439 += 1 };
  s2 -> s4 [79, 79] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s2 -> s1 [80, 65535] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s3 -> s1 [0, 77] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s3 -> s3 [0, 65535] { R7261 += 1, R7199 += 1, R6438 += 1, R6439 += 1 };
  s3 -> s4 [79, 79] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s3 -> s1 [80, 65535] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s4 -> s4 [0, 77] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s4 -> s4 [0, 65535] { R7261 += 1, R7199 += 1 };
  s4 -> s5 [0, 65535] { R7261 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [79, 65535] { R7261 += 1, R7199 += 1, R6439 += 1 };
  s5 -> s5 [0, 65535] { R7261 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R7262 += 1, R7263 += 1 };
  s0 -> s1 [0, 65535] { R7263 += 1, R7200 += 1, R7201 += 1 };
  s0 -> s2 [0, 65535] { R7263 += 1, R7201 += 1 };
  s0 -> s3 [0, 65535] { R7263 += 1, R7201 += 1, R6866 += 1, R6867 += 1 };
  s1 -> s1 [0, 65535] { R7263 += 1, R7200 += 1, R7201 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R7263 += 1, R7201 += 1 };
  s1 -> s3 [0, 65535] { R7263 += 1, R7201 += 1, R6866 += 1, R6867 += 1 };
  s2 -> s4 [0, 65535] { R7263 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7263 += 1, R7201 += 1 };
  s3 -> s4 [0, 65535] { R7263 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7263 += 1, R7201 += 1 };
  s3 -> s3 [0, 65535] { R7263 += 1, R7201 += 1, R6866 += 1, R6867 += 1 };
  s4 -> s4 [0, 65535] { R7263 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R7265 += 1, R7203 += 1, R7183 += 1 };
  s0 -> s0 [0, 65535] { R7264 += 1, R7265 += 1 };
  s0 -> s2 [0, 65535] { R7265 += 1, R7202 += 1, R7203 += 1 };
  s0 -> s1 [0, 65535] { R7265 += 1, R7203 += 1 };
  s0 -> s1 [80, 65535] { R7265 += 1, R7203 += 1, R7183 += 1 };
  s1 -> s1 [0, 77] { R7265 += 1, R7203 += 1, R7183 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7265 += 1 };
  s1 -> s1 [0, 65535] { R7265 += 1, R7203 += 1 };
  s1 -> s1 [80, 65535] { R7265 += 1, R7203 += 1, R7183 += 1 };
  s2 -> s1 [0, 77] { R7265 += 1, R7203 += 1, R7183 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7265 += 1, R7202 += 1, R7203 += 1 };
  s2 -> s1 [0, 65535] { R7265 += 1, R7203 += 1 };
  s2 -> s1 [80, 65535] { R7265 += 1, R7203 += 1, R7183 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7265 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7267 += 1, R7223 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R7267 += 1, R7222 += 1, R7223 += 1 };
  s0 -> s0 [0, 65535] { R7266 += 1, R7267 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7267 += 1, R7223 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R7267 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7267 += 1, R7223 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R7267 += 1, R7222 += 1, R7223 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7267 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R7269 += 1, R7225 += 1 };
  s0 -> s0 [0, 65535] { R7268 += 1, R7269 += 1 };
  s0 -> s2 [0, 65535] { R7269 += 1, R7224 += 1, R7225 += 1 };
  s0 -> s3 [73, 73] { R7269 += 1, R7225 += 1 };
  s0 -> s4 [73, 73] { R7269 += 1, R7225 += 1 };
  s0 -> s5 [77, 77] { R7269 += 1, R7225 += 1 };
  s0 -> s1 [78, 65535] { R7269 += 1, R7225 += 1 };
  s1 -> s1 [0, 72] { R7269 += 1, R7225 += 1 };
  s1 -> s3 [73, 73] { R7269 += 1, R7225 += 1 };
  s1 -> s4 [73, 73] { R7269 += 1, R7225 += 1 };
  s1 -> s5 [77, 77] { R7269 += 1, R7225 += 1 };
  s1 -> s1 [78, 65535] { R7269 += 1, R7225 += 1 };
  s2 -> s1 [0, 72] { R7269 += 1, R7225 += 1 };
  s2 -> s2 [0, 65535] { R7269 += 1, R7224 += 1, R7225 += 1 };
  s2 -> s3 [73, 73] { R7269 += 1, R7225 += 1 };
  s2 -> s4 [73, 73] { R7269 += 1, R7225 += 1 };
  s2 -> s5 [77, 77] { R7269 += 1, R7225 += 1 };
  s2 -> s1 [78, 65535] { R7269 += 1, R7225 += 1 };
  s4 -> s4 [0, 73] { R7269 += 1, R7225 += 1 };
  s4 -> s7 [77, 77] { R7269 += 1, R7225 += 1 };
  s4 -> s4 [78, 65535] { R7269 += 1, R7225 += 1 };
  s5 -> s5 [0, 72] { R7269 += 1, R7225 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7269 += 1 };
  s5 -> s7 [73, 73] { R7269 += 1, R7225 += 1 };
  s5 -> s8 [73, 73] { R7269 += 1, R7225 += 1 };
  s5 -> s5 [77, 65535] { R7269 += 1, R7225 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R7269 += 1, R7225 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7269 += 1 };
  s7 -> s7 [77, 65535] { R7269 += 1, R7225 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7269 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R7271 += 1, R7227 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R7270 += 1, R7271 += 1 };
  s0 -> s2 [0, 65535] { R7271 += 1, R7226 += 1, R7227 += 1 };
  s0 -> s3 [73, 73] { R7271 += 1, R7227 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R7271 += 1, R7227 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R7271 += 1, R7227 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R7271 += 1, R7227 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R7271 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7271 += 1, R7227 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R7271 += 1, R7227 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R7271 += 1, R7227 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R7271 += 1, R7227 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7271 += 1, R7226 += 1, R7227 += 1 };
  s2 -> s3 [73, 73] { R7271 += 1, R7227 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R7271 += 1, R7227 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R7271 += 1, R7227 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7271 += 1 };
  s3 -> s3 [0, 65535] { R7271 += 1, R7227 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7271 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7271 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R7273 += 1, R7229 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R7273 += 1, R7228 += 1, R7229 += 1 };
  s0 -> s0 [0, 65535] { R7272 += 1, R7273 += 1 };
  s0 -> s3 [73, 73] { R7273 += 1, R7229 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R7273 += 1, R7229 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R7273 += 1, R7229 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R7273 += 1, R7229 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R7273 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7273 += 1, R7229 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R7273 += 1, R7229 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R7273 += 1, R7229 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R7273 += 1, R7229 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R7273 += 1, R7228 += 1, R7229 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7273 += 1, R7229 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R7273 += 1, R7229 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R7273 += 1, R7229 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R7273 += 1, R7229 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7273 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7273 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7273 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R7274 += 1, R7275 += 1 };
  s0 -> s2 [0, 65535] { R7275 += 1, R7230 += 1, R7231 += 1 };
  s0 -> s3 [73, 73] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7275 += 1 };
  s1 -> s3 [73, 73] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R7275 += 1, R7230 += 1, R7231 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R7275 += 1, R7231 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7275 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7275 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7275 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 72] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s0 [0, 65535] { R7276 += 1, R7277 += 1 };
  s0 -> s3 [0, 65535] { R7277 += 1, R7232 += 1, R7233 += 1 };
  s0 -> s4 [73, 73] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [73, 73] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [73, 73] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [74, 65535] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 72] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R7277 += 1 };
  s1 -> s4 [73, 73] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 72] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [73, 73] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s5 [73, 73] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [73, 73] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s7 [73, 73] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [74, 65535] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 72] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 72] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R7277 += 1, R7232 += 1, R7233 += 1 };
  s3 -> s4 [73, 73] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [73, 73] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [73, 73] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [74, 65535] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s9 [0, 65535] { R7277 += 1 };
  s4 -> s4 [0, 65535] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R7277 += 1, R7233 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R7277 += 1, R7233 += 1, R3890 += 1, R3891 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R7277 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7277 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [0, 65535] { R7279 += 1, R7234 += 1, R7235 += 1 };
  s0 -> s0 [0, 65535] { R7278 += 1, R7279 += 1 };
  s0 -> s3 [73, 73] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s4 [73, 73] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [74, 65535] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 72] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7279 += 1 };
  s1 -> s3 [73, 73] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s4 [73, 73] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [74, 65535] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [0, 72] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7279 += 1, R7234 += 1, R7235 += 1 };
  s2 -> s3 [73, 73] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [73, 73] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [74, 65535] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7279 += 1, R7235 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s6 [0, 65535] { R7279 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7279 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7279 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s2 [0, 72] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s3 [0, 65535] { R7281 += 1, R7236 += 1, R7237 += 1 };
  s0 -> s0 [0, 65535] { R7280 += 1, R7281 += 1 };
  s0 -> s4 [73, 73] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s5 [73, 73] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s6 [73, 73] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s7 [73, 73] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s1 [74, 65535] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s2 [74, 65535] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s1 [0, 72] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s2 [0, 72] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s4 [73, 73] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s5 [73, 73] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s6 [73, 73] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s7 [73, 73] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s1 [74, 65535] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s2 [74, 65535] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s2 [0, 72] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s2 [0, 65535] { R7281 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [73, 73] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s6 [73, 73] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s2 [74, 65535] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s1 [0, 72] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s2 [0, 72] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s3 [0, 65535] { R7281 += 1, R7236 += 1, R7237 += 1 };
  s3 -> s4 [73, 73] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s5 [73, 73] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s6 [73, 73] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s7 [73, 73] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s1 [74, 65535] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s2 [74, 65535] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s5 -> s5 [0, 65535] { R7281 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R7281 += 1 };
  s6 -> s6 [0, 65535] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R7281 += 1, R7237 += 1, R6863 += 1, R6864 += 1 };
  s7 -> s7 [0, 65535] { R7281 += 1, R7237 += 1, R6862 += 1, R6863 += 1 };
  s8 -> s8 [0, 65535] { R7281 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s0 -> s2 [0, 72] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s0 -> s3 [0, 65535] { R7283 += 1, R7238 += 1, R7239 += 1 };
  s0 -> s0 [0, 65535] { R7282 += 1, R7283 += 1 };
  s0 -> s4 [73, 73] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s0 -> s5 [73, 73] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s0 -> s6 [73, 73] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s0 -> s7 [73, 73] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s0 -> s2 [74, 76] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s0 -> s1 [74, 65535] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s0 -> s8 [77, 77] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s0 -> s2 [80, 65535] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s1 -> s1 [0, 72] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s1 -> s2 [0, 72] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s1 -> s4 [73, 73] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s1 -> s5 [73, 73] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s1 -> s6 [73, 73] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s1 -> s7 [73, 73] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s1 -> s2 [74, 76] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s1 -> s1 [74, 65535] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s1 -> s8 [77, 77] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s1 -> s2 [80, 65535] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s2 -> s2 [0, 72] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s2 -> s5 [73, 73] { R7283 += 1, R7239 += 1 };
  s2 -> s6 [73, 73] { R7283 += 1, R7239 += 1 };
  s2 -> s2 [74, 76] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s2 -> s2 [74, 65535] { R7283 += 1, R7239 += 1 };
  s2 -> s8 [77, 77] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s2 -> s2 [80, 65535] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s3 -> s1 [0, 72] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s3 -> s2 [0, 72] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s3 -> s3 [0, 65535] { R7283 += 1, R7238 += 1, R7239 += 1 };
  s3 -> s4 [73, 73] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s3 -> s5 [73, 73] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s3 -> s6 [73, 73] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s3 -> s7 [73, 73] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s3 -> s2 [74, 76] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s3 -> s1 [74, 65535] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s3 -> s8 [77, 77] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s3 -> s2 [80, 65535] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s5 -> s5 [0, 76] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s5 -> s5 [0, 65535] { R7283 += 1, R7239 += 1 };
  s5 -> s10 [77, 77] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s5 -> s5 [80, 65535] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s7 -> s5 [0, 76] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s7 -> s7 [0, 65535] { R7283 += 1, R7239 += 1, R7180 += 1, R7181 += 1 };
  s7 -> s10 [77, 77] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s7 -> s5 [80, 65535] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s8 -> s8 [0, 72] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7283 += 1 };
  s8 -> s10 [73, 73] { R7283 += 1, R7239 += 1 };
  s8 -> s11 [73, 73] { R7283 += 1, R7239 += 1 };
  s8 -> s8 [74, 77] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s8 -> s8 [74, 65535] { R7283 += 1, R7239 += 1 };
  s8 -> s8 [80, 65535] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R7283 += 1 };
  s10 -> s10 [0, 65535] { R7283 += 1, R7239 += 1 };
  s10 -> s10 [80, 65535] { R7283 += 1, R7239 += 1, R7181 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7283 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7283 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R7199 && R2 = R7283 && R20 - R7283 = -1 && R21 = R7283 && R22 - R7283 = -1 && R23 = R7283 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R7198 = 0 && R7224 = 0 && R7225 = 0 && R7232 = 0 && R7233 = 0 && R7236 = 0 && R7237 = 0 && R7238 = 0 && R7239 = 0 && R7240 = 0 && R7241 = R7283 && R7242 = 0 && R7243 = R7283 && R7244 = 0 && R7245 = R7283 && R7246 = 0 && R7247 = R7283 && R7248 = 0 && R7249 = R7283 && R7250 = 0 && R7251 = R7283 && R7252 = 0 && R7253 = R7283 && R7254 = 0 && R7255 = R7283 && R7256 = 0 && R7257 = R7283 && R7258 = 0 && R7259 = R7283 && R7260 = 0 && R7261 = R7283 && R7262 = 0 && R7263 = R7283 && R7264 = 0 && R7265 = R7283 && R7266 = 0 && R7267 = R7283 && R7268 = 0 && R7269 = R7283 && R7270 = 0 && R7271 = R7283 && R7272 = 0 && R7273 = R7283 && R7274 = 0 && R7275 = R7283 && R7276 = 0 && R7277 = R7283 && R7278 = 0 && R7279 = R7283 && R7280 = 0 && R7281 = R7283 && R7282 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R7199 && 0 < R7283 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R7184 != 0 || R7185 = R7199 || (R17 = 0 && R7199 = 0)) && (R7186 != 0 || R7187 = R7199 || (R17 = 0 && R7199 = 0)) && (R7188 != 0 || R7189 = R7199 || (R17 = 0 && R7199 = 0)) && (R7190 != 0 || R7191 = R7199 || (R17 = 0 && R7199 = 0)) && (R7192 != 0 || R7193 = R7199 || (R17 = 0 && R7199 = 0)) && (R7194 != 0 || R7195 = R7199 || (R17 = 0 && R7199 = 0)) && (R7196 != 0 || R7197 = R7199 || (R17 = 0 && R7199 = 0)) && (R7200 != 0 || R7199 = R7201 || (R17 = 0 && R7199 = 0)) && (R7202 != 0 || R7199 = R7203 || (R17 = 0 && R7199 = 0)) && (R18 = 0 || (R7222 = 0 && R7223 = 0)) && (R18 = 0 || (R7226 = 0 && R7227 = 0)) && (R18 = 0 || (R7228 = 0 && R7229 = 0)) && (R18 = 0 || (R7230 = 0 && R7231 = 0)) && (R18 = 0 || (R7234 = 0 && R7235 = 0)) && (R19 = 0 || (R7204 = 0 && R7205 = 0)) && (R19 = 0 || (R7206 = 0 && R7207 = 0)) && (R19 = 0 || (R7208 = 0 && R7209 = 0)) && (R19 = 0 || (R7210 = 0 && R7211 = 0)) && (R19 = 0 || (R7212 = 0 && R7213 = 0)) && (R19 = 0 || (R7214 = 0 && R7215 = 0)) && (R19 = 0 || (R7216 = 0 && R7217 = 0)) && (R19 = 0 || (R7218 = 0 && R7219 = 0)) && (R19 = 0 || (R7220 = 0 && R7221 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R6867 + R6864 = 0 || (R56 + R6865 + R6862 = 0 && R57 + R6866 + R6863 = 0)) && (R58 + R6867 + R6864 = 0 || (R62 + R7182 + R7180 = 0 && R63 + R7183 + R7181 = 0)) && (R7184 = 0 || (R17 = 0 && R7199 = 0)) && (R7186 = 0 || (R17 = 0 && R7199 = 0)) && (R7188 = 0 || (R17 = 0 && R7199 = 0)) && (R7190 = 0 || (R17 = 0 && R7199 = 0)) && (R7192 = 0 || (R17 = 0 && R7199 = 0)) && (R7194 = 0 || (R17 = 0 && R7199 = 0)) && (R7196 = 0 || (R17 = 0 && R7199 = 0)) && (R7200 = 0 || (R17 = 0 && R7199 = 0)) && (R7202 = 0 || (R17 = 0 && R7199 = 0));
// End of Parikh automata intersection problem
