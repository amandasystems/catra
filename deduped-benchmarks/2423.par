// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R37, R38, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R6;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [90, 90];
  s0 -> s0 [91, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [90, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R37 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 89];
  s0 -> s0 [0, 65535] { R38 += 1 };
  s0 -> s2 [90, 90];
  s0 -> s1 [91, 65535];
  s1 -> s1 [0, 89];
  s1 -> s2 [90, 90];
  s1 -> s1 [91, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R43 += 1 };
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s0 -> s2 [9, 13] { R43 += 1 };
  s0 -> s1 [14, 31] { R43 += 1 };
  s0 -> s2 [32, 32] { R43 += 1 };
  s0 -> s1 [33, 65535] { R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R43 += 1 };
  s2 -> s1 [0, 65535] { R43 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R45 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R45 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R47 += 1 };
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s2 [9, 13] { R47 += 1 };
  s0 -> s1 [14, 31] { R47 += 1 };
  s0 -> s2 [32, 32] { R47 += 1 };
  s0 -> s1 [33, 65535] { R47 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R47 += 1 };
  s2 -> s1 [0, 65535] { R47 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R49 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s1 -> s1 [0, 65535] { R49 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 89] { R51 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s0 -> s1 [91, 65535] { R51 += 1 };
  s1 -> s1 [0, 89] { R51 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R51 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R53 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535] { R53 += 1, R41 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R6 += 1 };
  s1 -> s1 [0, 60] { R6 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
};
constraint R0 - R6 = 1 && R1 = R53 && R5 = 0 && R42 - R53 = -1 && R43 = R53 && R44 - R53 = -1 && R45 = R53 && R46 = 0 && R47 = 1 && R48 = 0 && R49 = 1 && R50 = 0 && R51 = R53 && R52 = 0 && -1 < R6 && R37 < 1 && R38 < 1 && 0 < R53;
// End of Parikh automata intersection problem
