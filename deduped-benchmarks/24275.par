// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8, R8982, R8983, R8984, R8985, R9830, R9831, R9832, R9833, R9834, R9835, R9836, R9837, R9838, R9839, R9840, R9841, R9842, R9843, R9844, R9845, R9846, R9847, R9848, R9849, R9850, R9851, R9852, R9853, R9854, R9855, R9856, R9857, R9858, R9859, R9860, R9861, R9862, R9863, R9864, R9865, R9866, R9867, R9868, R9869, R9870, R9871, R9872, R9873, R9874, R9875, R9876, R9877, R9878, R9879, R9880, R9881, R9882, R9883, R9884, R9885, R9886, R9887, R9888, R9889, R9890, R9891, R9892, R9893, R9894, R9895, R9896, R9897, R9898, R9899, R9900, R9901, R9902, R9903, R9904, R9905, R9906, R9907, R9908, R9909, R9910, R9911, R9912, R9913, R9914, R9915, R9916, R9917, R9918, R9919, R9920, R9921, R9922, R9923, R9924, R9925, R9926, R9927, R9928, R9929, R9930, R9931, R9932, R9933, R9934, R9935, R9936, R9937, R9938, R9939;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9860 += 1, R9861 += 1 };
  s0 -> s1 [0, 65535] { R9861 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9861 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R9863 += 1 };
  s0 -> s0 [0, 65535] { R9862 += 1, R9863 += 1 };
  s0 -> s2 [84, 84] { R9863 += 1 };
  s0 -> s3 [84, 84] { R9863 += 1 };
  s0 -> s1 [86, 65535] { R9863 += 1 };
  s1 -> s1 [0, 83] { R9863 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9863 += 1 };
  s1 -> s3 [84, 84] { R9863 += 1 };
  s1 -> s1 [86, 65535] { R9863 += 1 };
  s2 -> s2 [0, 84] { R9863 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [86, 65535] { R9863 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R9865 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R9864 += 1, R9865 += 1 };
  s0 -> s2 [84, 84] { R9865 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R9865 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R9865 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R9865 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9865 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R9865 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R9865 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9865 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R9867 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9866 += 1, R9867 += 1 };
  s0 -> s2 [84, 84] { R9867 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R9867 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R9867 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R9867 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9867 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R9867 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R9867 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9867 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R9869 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R9868 += 1, R9869 += 1 };
  s0 -> s2 [84, 84] { R9869 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R9869 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R9869 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R9869 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9869 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R9869 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R9869 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9869 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R9871 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9870 += 1, R9871 += 1 };
  s0 -> s2 [84, 84] { R9871 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R9871 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R9871 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R9871 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9871 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R9871 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R9871 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9871 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R9873 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R9872 += 1, R9873 += 1 };
  s0 -> s2 [84, 84] { R9873 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R9873 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R9873 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R9873 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9873 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R9873 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R9873 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R9873 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R9875 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R9874 += 1, R9875 += 1 };
  s0 -> s2 [84, 84] { R9875 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R9875 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R9875 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R9875 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9875 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R9875 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R9875 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R9875 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R9877 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R9876 += 1, R9877 += 1 };
  s0 -> s2 [84, 84] { R9877 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R9877 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R9877 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R9877 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9877 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R9877 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R9877 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9877 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R9897 += 1 };
  s0 -> s0 [0, 65535] { R9896 += 1, R9897 += 1 };
  s0 -> s2 [84, 84] { R9897 += 1 };
  s0 -> s1 [85, 65535] { R9897 += 1 };
  s1 -> s1 [0, 83] { R9897 += 1 };
  s1 -> s2 [84, 84] { R9897 += 1 };
  s1 -> s1 [85, 65535] { R9897 += 1 };
  s2 -> s2 [0, 65535] { R9897 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9899 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R9898 += 1, R9899 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9899 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R9901 += 1 };
  s0 -> s0 [0, 65535] { R9900 += 1, R9901 += 1 };
  s0 -> s2 [0, 65535] { R9901 += 1, R8 += 1 };
  s0 -> s3 [84, 84] { R9901 += 1 };
  s0 -> s1 [85, 65535] { R9901 += 1 };
  s1 -> s1 [0, 83] { R9901 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R9901 += 1 };
  s1 -> s1 [85, 65535] { R9901 += 1 };
  s2 -> s1 [0, 83] { R9901 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9901 += 1, R8 += 1 };
  s2 -> s3 [84, 84] { R9901 += 1 };
  s2 -> s1 [85, 65535] { R9901 += 1 };
  s3 -> s3 [0, 65535] { R9901 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R9903 += 1, R9841 += 1 };
  s0 -> s0 [0, 65535] { R9902 += 1, R9903 += 1 };
  s0 -> s2 [0, 65535] { R9903 += 1, R9840 += 1, R9841 += 1 };
  s0 -> s1 [85, 65535] { R9903 += 1, R9841 += 1 };
  s1 -> s1 [0, 83] { R9903 += 1, R9841 += 1 };
  s1 -> s1 [0, 65535] { R9903 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R9903 += 1, R9841 += 1 };
  s2 -> s1 [0, 83] { R9903 += 1, R9841 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9903 += 1, R9840 += 1, R9841 += 1 };
  s2 -> s1 [85, 65535] { R9903 += 1, R9841 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R9904 += 1, R9905 += 1 };
  s0 -> s1 [0, 65535] { R9905 += 1, R9843 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R9905 += 1, R9842 += 1, R9843 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9905 += 1, R9843 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R9905 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9905 += 1, R9843 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R9905 += 1, R9842 += 1, R9843 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9905 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9907 += 1, R9845 += 1 };
  s0 -> s0 [0, 65535] { R9906 += 1, R9907 += 1 };
  s0 -> s2 [0, 65535] { R9907 += 1, R9844 += 1, R9845 += 1 };
  s1 -> s1 [0, 65535] { R9907 += 1, R9845 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9907 += 1 };
  s2 -> s1 [0, 65535] { R9907 += 1, R9845 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9907 += 1, R9844 += 1, R9845 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9907 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9909 += 1, R9846 += 1, R9847 += 1 };
  s0 -> s0 [0, 65535] { R9908 += 1, R9909 += 1 };
  s0 -> s2 [0, 65535] { R9909 += 1, R9847 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R9909 += 1, R9846 += 1, R9847 += 1 };
  s1 -> s2 [0, 65535] { R9909 += 1, R9847 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9909 += 1 };
  s2 -> s2 [0, 65535] { R9909 += 1, R9847 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9909 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R9911 += 1, R9849 += 1 };
  s0 -> s2 [0, 65535] { R9911 += 1, R9849 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R9911 += 1, R9848 += 1, R9849 += 1 };
  s0 -> s0 [0, 65535] { R9910 += 1, R9911 += 1 };
  s0 -> s1 [86, 65535] { R9911 += 1, R9849 += 1 };
  s1 -> s1 [0, 84] { R9911 += 1, R9849 += 1 };
  s1 -> s1 [0, 65535] { R9911 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R9911 += 1, R9849 += 1 };
  s2 -> s1 [0, 84] { R9911 += 1, R9849 += 1 };
  s2 -> s2 [0, 65535] { R9911 += 1, R9849 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9911 += 1 };
  s2 -> s1 [86, 65535] { R9911 += 1, R9849 += 1 };
  s3 -> s1 [0, 84] { R9911 += 1, R9849 += 1 };
  s3 -> s2 [0, 65535] { R9911 += 1, R9849 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R9911 += 1, R9848 += 1, R9849 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [86, 65535] { R9911 += 1, R9849 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9911 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R9913 += 1, R9851 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R9913 += 1, R9851 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R9913 += 1, R9850 += 1, R9851 += 1 };
  s0 -> s0 [0, 65535] { R9912 += 1, R9913 += 1 };
  s0 -> s1 [86, 65535] { R9913 += 1, R9851 += 1, R73 += 1 };
  s1 -> s1 [0, 84] { R9913 += 1, R9851 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R9913 += 1, R9851 += 1 };
  s1 -> s5 [0, 65535] { R9913 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R9913 += 1, R9851 += 1, R73 += 1 };
  s2 -> s1 [0, 84] { R9913 += 1, R9851 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R9913 += 1, R9851 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R9913 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R9913 += 1, R9851 += 1, R73 += 1 };
  s3 -> s1 [0, 84] { R9913 += 1, R9851 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R9913 += 1, R9851 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R9913 += 1, R9850 += 1, R9851 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [86, 65535] { R9913 += 1, R9851 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9913 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R9915 += 1, R9853 += 1 };
  s0 -> s2 [0, 65535] { R9915 += 1, R9852 += 1, R9853 += 1 };
  s0 -> s0 [0, 65535] { R9914 += 1, R9915 += 1 };
  s1 -> s1 [0, 65535] { R9915 += 1, R9853 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9915 += 1 };
  s2 -> s1 [0, 65535] { R9915 += 1, R9853 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9915 += 1, R9852 += 1, R9853 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9915 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s0 -> s0 [0, 65535] { R9916 += 1, R9917 += 1 };
  s0 -> s2 [0, 65535] { R9917 += 1, R9855 += 1, R8984 += 1, R8985 += 1 };
  s0 -> s3 [0, 65535] { R9917 += 1, R9854 += 1, R9855 += 1 };
  s0 -> s4 [89, 89] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s0 -> s1 [90, 65535] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s1 -> s1 [0, 85] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s1 -> s4 [89, 89] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s1 -> s1 [90, 65535] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s2 -> s1 [0, 85] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s2 -> s2 [0, 65535] { R9917 += 1, R9855 += 1, R8984 += 1, R8985 += 1 };
  s2 -> s4 [89, 89] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s2 -> s1 [90, 65535] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s3 -> s1 [0, 85] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s3 -> s2 [0, 65535] { R9917 += 1, R9855 += 1, R8984 += 1, R8985 += 1 };
  s3 -> s3 [0, 65535] { R9917 += 1, R9854 += 1, R9855 += 1 };
  s3 -> s4 [89, 89] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s3 -> s1 [90, 65535] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s4 -> s4 [0, 85] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9917 += 1, R9855 += 1 };
  s4 -> s6 [0, 65535] { R9917 += 1 };
  s4 -> s4 [89, 65535] { R9917 += 1, R9855 += 1, R8985 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9917 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R9919 += 1, R9856 += 1, R9857 += 1 };
  s0 -> s0 [0, 65535] { R9918 += 1, R9919 += 1 };
  s0 -> s2 [0, 65535] { R9919 += 1, R9857 += 1 };
  s1 -> s1 [0, 65535] { R9919 += 1, R9856 += 1, R9857 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9919 += 1, R9857 += 1 };
  s2 -> s3 [0, 65535] { R9919 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9919 += 1, R9857 += 1 };
  s3 -> s3 [0, 65535] { R9919 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 84] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s0 -> s2 [0, 65535] { R9921 += 1, R9858 += 1, R9859 += 1 };
  s0 -> s3 [0, 65535] { R9921 += 1, R9859 += 1, R9838 += 1, R9839 += 1 };
  s0 -> s0 [0, 65535] { R9920 += 1, R9921 += 1 };
  s0 -> s4 [85, 85] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s0 -> s5 [85, 85] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s0 -> s1 [90, 65535] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s1 -> s1 [0, 84] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s1 -> s1 [0, 65535] { R9921 += 1, R9859 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R9921 += 1 };
  s1 -> s4 [85, 85] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s1 -> s5 [85, 85] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s1 -> s1 [90, 65535] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s2 -> s1 [0, 84] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s2 -> s2 [0, 65535] { R9921 += 1, R9858 += 1, R9859 += 1 };
  s2 -> s3 [0, 65535] { R9921 += 1, R9859 += 1, R9838 += 1, R9839 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [85, 85] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s2 -> s5 [85, 85] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s2 -> s1 [90, 65535] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s3 -> s1 [0, 84] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s3 -> s3 [0, 65535] { R9921 += 1, R9859 += 1, R9838 += 1, R9839 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R9921 += 1 };
  s3 -> s4 [85, 85] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s3 -> s5 [85, 85] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s3 -> s1 [90, 65535] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s4 -> s4 [0, 85] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s4 -> s4 [0, 65535] { R9921 += 1, R9859 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9921 += 1 };
  s4 -> s4 [90, 65535] { R9921 += 1, R9859 += 1, R9839 += 1 };
  s5 -> s5 [0, 65535] { R9921 += 1, R9859 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9921 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9921 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9923 += 1, R9878 += 1, R9879 += 1 };
  s0 -> s2 [0, 65535] { R9923 += 1, R9879 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R9922 += 1, R9923 += 1 };
  s1 -> s1 [0, 65535] { R9923 += 1, R9878 += 1, R9879 += 1 };
  s1 -> s2 [0, 65535] { R9923 += 1, R9879 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9923 += 1, R9879 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9923 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9923 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R9925 += 1, R9881 += 1 };
  s0 -> s2 [0, 65535] { R9925 += 1, R9880 += 1, R9881 += 1 };
  s0 -> s0 [0, 65535] { R9924 += 1, R9925 += 1 };
  s0 -> s3 [84, 84] { R9925 += 1, R9881 += 1 };
  s0 -> s4 [84, 84] { R9925 += 1, R9881 += 1 };
  s0 -> s5 [85, 85] { R9925 += 1, R9881 += 1 };
  s0 -> s1 [86, 65535] { R9925 += 1, R9881 += 1 };
  s1 -> s1 [0, 83] { R9925 += 1, R9881 += 1 };
  s1 -> s3 [84, 84] { R9925 += 1, R9881 += 1 };
  s1 -> s4 [84, 84] { R9925 += 1, R9881 += 1 };
  s1 -> s5 [85, 85] { R9925 += 1, R9881 += 1 };
  s1 -> s1 [86, 65535] { R9925 += 1, R9881 += 1 };
  s2 -> s1 [0, 83] { R9925 += 1, R9881 += 1 };
  s2 -> s2 [0, 65535] { R9925 += 1, R9880 += 1, R9881 += 1 };
  s2 -> s3 [84, 84] { R9925 += 1, R9881 += 1 };
  s2 -> s4 [84, 84] { R9925 += 1, R9881 += 1 };
  s2 -> s5 [85, 85] { R9925 += 1, R9881 += 1 };
  s2 -> s1 [86, 65535] { R9925 += 1, R9881 += 1 };
  s4 -> s4 [0, 84] { R9925 += 1, R9881 += 1 };
  s4 -> s8 [85, 85] { R9925 += 1, R9881 += 1 };
  s4 -> s4 [86, 65535] { R9925 += 1, R9881 += 1 };
  s5 -> s5 [0, 83] { R9925 += 1, R9881 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9925 += 1 };
  s5 -> s7 [84, 84] { R9925 += 1, R9881 += 1 };
  s5 -> s8 [84, 84] { R9925 += 1, R9881 += 1 };
  s5 -> s5 [85, 65535] { R9925 += 1, R9881 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9925 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9925 += 1, R9881 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R9925 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R9925 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R9927 += 1, R9883 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R9927 += 1, R9882 += 1, R9883 += 1 };
  s0 -> s0 [0, 65535] { R9926 += 1, R9927 += 1 };
  s0 -> s3 [84, 84] { R9927 += 1, R9883 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R9927 += 1, R9883 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R9927 += 1, R9883 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R9927 += 1, R9883 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9927 += 1 };
  s1 -> s3 [84, 84] { R9927 += 1, R9883 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R9927 += 1, R9883 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R9927 += 1, R9883 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R9927 += 1, R9883 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9927 += 1, R9882 += 1, R9883 += 1 };
  s2 -> s3 [84, 84] { R9927 += 1, R9883 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R9927 += 1, R9883 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R9927 += 1, R9883 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9927 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9927 += 1 };
  s4 -> s4 [0, 65535] { R9927 += 1, R9883 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9927 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R9929 += 1, R9885 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R9928 += 1, R9929 += 1 };
  s0 -> s2 [0, 65535] { R9929 += 1, R9884 += 1, R9885 += 1 };
  s0 -> s3 [84, 84] { R9929 += 1, R9885 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R9929 += 1, R9885 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R9929 += 1, R9885 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R9929 += 1, R9885 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R9929 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R9929 += 1, R9885 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R9929 += 1, R9885 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R9929 += 1, R9885 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R9929 += 1, R9885 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R9929 += 1, R9884 += 1, R9885 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R9929 += 1, R9885 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R9929 += 1, R9885 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R9929 += 1, R9885 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R9929 += 1 };
  s3 -> s3 [0, 65535] { R9929 += 1, R9885 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9929 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9929 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R9931 += 1, R9886 += 1, R9887 += 1 };
  s0 -> s0 [0, 65535] { R9930 += 1, R9931 += 1 };
  s0 -> s3 [84, 84] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [84, 84] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [85, 65535] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 83] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9931 += 1 };
  s1 -> s3 [84, 84] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [84, 84] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [85, 65535] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 83] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R9931 += 1, R9886 += 1, R9887 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [84, 84] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [85, 65535] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R9931 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9931 += 1 };
  s4 -> s4 [0, 65535] { R9931 += 1, R9887 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9931 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 83] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s3 [0, 65535] { R9933 += 1, R9888 += 1, R9889 += 1 };
  s0 -> s0 [0, 65535] { R9932 += 1, R9933 += 1 };
  s0 -> s4 [84, 84] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [84, 84] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [84, 84] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [84, 84] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [85, 65535] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [85, 65535] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 83] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 83] { R9933 += 1, R9889 += 1 };
  s1 -> s4 [84, 84] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s8 [84, 84] { R9933 += 1, R9889 += 1 };
  s1 -> s12 [84, 84] { R9933 += 1, R9889 += 1 };
  s1 -> s7 [84, 84] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [85, 65535] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [85, 65535] { R9933 += 1, R9889 += 1 };
  s2 -> s1 [0, 83] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 83] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [84, 84] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [84, 84] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s6 [84, 84] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [84, 84] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [85, 65535] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [85, 65535] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 83] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 83] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R9933 += 1, R9888 += 1, R9889 += 1 };
  s3 -> s4 [84, 84] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [84, 84] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [84, 84] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [84, 84] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [85, 65535] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [85, 65535] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s4 [0, 65535] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s8 [0, 65535] { R9933 += 1, R9889 += 1 };
  s6 -> s4 [0, 65535] { R9933 += 1, R9889 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R9933 += 1, R9889 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s8 [0, 65535] { R9933 += 1, R9889 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R9933 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9933 += 1 };
  s11 -> s11 [0, 83] { R9933 += 1, R9889 += 1 };
  s11 -> s11 [0, 65535] { R9933 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [84, 84] { R9933 += 1, R9889 += 1 };
  s11 -> s12 [84, 84] { R9933 += 1, R9889 += 1 };
  s11 -> s11 [85, 65535] { R9933 += 1, R9889 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9933 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s0 [0, 65535] { R9934 += 1, R9935 += 1 };
  s0 -> s2 [0, 65535] { R9935 += 1, R9890 += 1, R9891 += 1 };
  s0 -> s3 [84, 84] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s4 [84, 84] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s1 [85, 65535] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [0, 83] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9935 += 1 };
  s1 -> s3 [84, 84] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s4 [84, 84] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [85, 65535] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [0, 83] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9935 += 1, R9890 += 1, R9891 += 1 };
  s2 -> s3 [84, 84] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s4 [84, 84] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [85, 65535] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s3 [0, 65535] { R9935 += 1, R9891 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s6 [0, 65535] { R9935 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9935 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9935 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s2 [0, 83] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s3 [0, 65535] { R9937 += 1, R9892 += 1, R9893 += 1 };
  s0 -> s0 [0, 65535] { R9936 += 1, R9937 += 1 };
  s0 -> s4 [84, 84] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s5 [84, 84] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s6 [84, 84] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s7 [84, 84] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s1 [85, 65535] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s2 [85, 65535] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s1 [0, 83] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s1 -> s2 [0, 83] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s4 [84, 84] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s5 [84, 84] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s6 [84, 84] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s1 -> s7 [84, 84] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s1 -> s1 [85, 65535] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s1 -> s2 [85, 65535] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s11 [0, 83] { R9937 += 1, R9893 += 1 };
  s2 -> s2 [0, 83] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s12 [84, 84] { R9937 += 1, R9893 += 1 };
  s2 -> s4 [84, 84] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s5 [84, 84] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s8 [84, 84] { R9937 += 1, R9893 += 1 };
  s2 -> s11 [85, 65535] { R9937 += 1, R9893 += 1 };
  s2 -> s2 [85, 65535] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s1 [0, 83] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s2 [0, 83] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s3 [0, 65535] { R9937 += 1, R9892 += 1, R9893 += 1 };
  s3 -> s4 [84, 84] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s5 [84, 84] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s6 [84, 84] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s7 [84, 84] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s1 [85, 65535] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s2 [85, 65535] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s5 -> s5 [0, 65535] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s5 -> s8 [0, 65535] { R9937 += 1, R9893 += 1 };
  s7 -> s5 [0, 65535] { R9937 += 1, R9893 += 1, R9831 += 1, R9832 += 1 };
  s7 -> s7 [0, 65535] { R9937 += 1, R9893 += 1, R9830 += 1, R9831 += 1 };
  s8 -> s9 [0, 65535] { R9937 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R9937 += 1, R9893 += 1 };
  s9 -> s9 [0, 65535] { R9937 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 83] { R9937 += 1, R9893 += 1 };
  s11 -> s11 [0, 65535] { R9937 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [84, 84] { R9937 += 1, R9893 += 1 };
  s11 -> s8 [84, 84] { R9937 += 1, R9893 += 1 };
  s11 -> s11 [85, 65535] { R9937 += 1, R9893 += 1 };
  s12 -> s12 [0, 65535] { R9937 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s0 -> s0 [0, 65535] { R9938 += 1, R9939 += 1 };
  s0 -> s2 [0, 65535] { R9939 += 1, R9894 += 1, R9895 += 1 };
  s0 -> s3 [84, 84] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s0 -> s4 [84, 84] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s0 -> s1 [85, 65535] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s1 -> s1 [0, 83] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s1 -> s1 [0, 65535] { R9939 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s1 -> s4 [84, 84] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s1 -> s1 [85, 65535] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s2 -> s1 [0, 83] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9939 += 1, R9894 += 1, R9895 += 1 };
  s2 -> s3 [84, 84] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s2 -> s4 [84, 84] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s2 -> s1 [85, 65535] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s3 -> s3 [0, 65535] { R9939 += 1, R9895 += 1, R9836 += 1, R9837 += 1 };
  s3 -> s6 [0, 65535] { R9939 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9939 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9939 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R9855 && R2 = R9939 && R20 - R9939 = -1 && R21 = R9939 && R22 - R9939 = -1 && R23 = R9939 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8985 + -1*R8983 - R53 = 0 && R52 + R8984 + R8982 = 0 && R9854 = 0 && R9880 = 0 && R9881 = 0 && R9888 = 0 && R9889 = 0 && R9892 = 0 && R9893 = 0 && R9896 = 0 && R9897 = R9939 && R9898 = 0 && R9899 = R9939 && R9900 = 0 && R9901 = R9939 && R9902 = 0 && R9903 = R9939 && R9904 = 0 && R9905 = R9939 && R9906 = 0 && R9907 = R9939 && R9908 = 0 && R9909 = R9939 && R9910 = 0 && R9911 = R9939 && R9912 = 0 && R9913 = R9939 && R9914 = 0 && R9915 = R9939 && R9916 = 0 && R9917 = R9939 && R9918 = 0 && R9919 = R9939 && R9920 = 0 && R9921 = R9939 && R9922 = 0 && R9923 = R9939 && R9924 = 0 && R9925 = R9939 && R9926 = 0 && R9927 = R9939 && R9928 = 0 && R9929 = R9939 && R9930 = 0 && R9931 = R9939 && R9932 = 0 && R9933 = R9939 && R9934 = 0 && R9935 = R9939 && R9936 = 0 && R9937 = R9939 && R9938 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8985 + -1*R8983 - R53 < 1 && -1 < R9855 && 0 < R9939 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R42 + R72 + R70 = 0 || R53 + R8985 + R8983 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R8985 + R8983 < 1))) && (R9840 != 0 || R9841 = R9855 || (R17 = 0 && R9855 = 0)) && (R9842 != 0 || R9843 = R9855 || (R17 = 0 && R9855 = 0)) && (R9844 != 0 || R9845 = R9855 || (R17 = 0 && R9855 = 0)) && (R9846 != 0 || R9847 = R9855 || (R17 = 0 && R9855 = 0)) && (R9848 != 0 || R9849 = R9855 || (R17 = 0 && R9855 = 0)) && (R9850 != 0 || R9851 = R9855 || (R17 = 0 && R9855 = 0)) && (R9852 != 0 || R9853 = R9855 || (R17 = 0 && R9855 = 0)) && (R9856 != 0 || R9855 = R9857 || (R17 = 0 && R9855 = 0)) && (R9858 != 0 || R9855 = R9859 || (R17 = 0 && R9855 = 0)) && (R18 = 0 || (R9878 = 0 && R9879 = 0)) && (R18 = 0 || (R9882 = 0 && R9883 = 0)) && (R18 = 0 || (R9884 = 0 && R9885 = 0)) && (R18 = 0 || (R9886 = 0 && R9887 = 0)) && (R18 = 0 || (R9890 = 0 && R9891 = 0)) && (R18 = 0 || (R9894 = 0 && R9895 = 0)) && (R19 = 0 || (R9860 = 0 && R9861 = 0)) && (R19 = 0 || (R9862 = 0 && R9863 = 0)) && (R19 = 0 || (R9864 = 0 && R9865 = 0)) && (R19 = 0 || (R9866 = 0 && R9867 = 0)) && (R19 = 0 || (R9868 = 0 && R9869 = 0)) && (R19 = 0 || (R9870 = 0 && R9871 = 0)) && (R19 = 0 || (R9872 = 0 && R9873 = 0)) && (R19 = 0 || (R9874 = 0 && R9875 = 0)) && (R19 = 0 || (R9876 = 0 && R9877 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0)) && (R58 + R9835 + R9832 = 0 || (R56 + R9833 + R9830 = 0 && R57 + R9834 + R9831 = 0)) && (R58 + R9835 + R9832 = 0 || (R62 + R9838 + R9836 = 0 && R63 + R9839 + R9837 = 0)) && (R9840 = 0 || (R17 = 0 && R9855 = 0)) && (R9842 = 0 || (R17 = 0 && R9855 = 0)) && (R9844 = 0 || (R17 = 0 && R9855 = 0)) && (R9846 = 0 || (R17 = 0 && R9855 = 0)) && (R9848 = 0 || (R17 = 0 && R9855 = 0)) && (R9850 = 0 || (R17 = 0 && R9855 = 0)) && (R9852 = 0 || (R17 = 0 && R9855 = 0)) && (R9856 = 0 || (R17 = 0 && R9855 = 0)) && (R9858 = 0 || (R17 = 0 && R9855 = 0));
// End of Parikh automata intersection problem
