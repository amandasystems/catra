// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R4, R40, R42, R43, R46, R47, R4744, R4745, R4746, R4747, R4748, R4749, R4750, R4751, R4752, R4753, R4754, R4755, R4756, R4757, R4758, R4759, R4760, R4761, R4762, R4763, R4764, R4765, R4766, R4767, R4768, R4769, R4770, R4771, R4772, R4773, R4774, R4775, R4776, R4777, R4778, R4779, R4780, R4781, R4782, R4783, R4784, R4785, R4786, R4787, R4788, R4789, R4790, R4791, R4792, R4793, R4794, R4795, R4796, R4797, R4798, R4799, R48, R4800, R4801, R4802, R4803, R4804, R4805, R4806, R4807, R4808, R4809, R4810, R4811, R4812, R4813, R4814, R4815, R4816, R4817, R4818, R4819, R4820, R4821, R4822, R4823, R4824, R4825, R4826, R4827, R4828, R4829, R4830, R4831, R4832, R4833, R4834, R4835, R4836, R4837, R4838, R4839, R4840, R4841, R4842, R4843, R4844, R4845, R4846, R4847, R4848, R4849, R4850, R4851, R4852, R4853, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R4775 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R4774 += 1, R4775 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4775 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R4777 += 1 };
  s0 -> s0 [0, 65535] { R4776 += 1, R4777 += 1 };
  s0 -> s2 [73, 73] { R4777 += 1 };
  s0 -> s3 [73, 73] { R4777 += 1 };
  s0 -> s1 [78, 65535] { R4777 += 1 };
  s1 -> s1 [0, 72] { R4777 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4777 += 1 };
  s1 -> s3 [73, 73] { R4777 += 1 };
  s1 -> s1 [78, 65535] { R4777 += 1 };
  s2 -> s2 [0, 73] { R4777 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R4777 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R4779 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R4778 += 1, R4779 += 1 };
  s0 -> s2 [73, 73] { R4779 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R4779 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R4779 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R4779 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4779 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R4779 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R4779 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4779 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R4781 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R4780 += 1, R4781 += 1 };
  s0 -> s2 [73, 73] { R4781 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R4781 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R4781 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R4781 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4781 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R4781 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R4781 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R4781 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R4783 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R4782 += 1, R4783 += 1 };
  s0 -> s2 [73, 73] { R4783 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R4783 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R4783 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R4783 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4783 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R4783 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R4783 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4783 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R4785 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R4784 += 1, R4785 += 1 };
  s0 -> s2 [73, 73] { R4785 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R4785 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R4785 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R4785 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4785 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R4785 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R4785 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4785 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R4787 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R4786 += 1, R4787 += 1 };
  s0 -> s2 [73, 73] { R4787 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R4787 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R4787 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R4787 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4787 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R4787 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R4787 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R4787 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R4789 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R4788 += 1, R4789 += 1 };
  s0 -> s2 [73, 73] { R4789 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R4789 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R4789 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R4789 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4789 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R4789 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R4789 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R4789 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R4791 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R4790 += 1, R4791 += 1 };
  s0 -> s2 [73, 73] { R4791 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R4791 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R4791 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R4791 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4791 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R4791 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R4791 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4791 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R4811 += 1 };
  s0 -> s0 [0, 65535] { R4810 += 1, R4811 += 1 };
  s0 -> s2 [73, 73] { R4811 += 1 };
  s0 -> s1 [74, 65535] { R4811 += 1 };
  s1 -> s1 [0, 72] { R4811 += 1 };
  s1 -> s2 [73, 73] { R4811 += 1 };
  s1 -> s1 [74, 65535] { R4811 += 1 };
  s2 -> s2 [0, 65535] { R4811 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4813 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4812 += 1, R4813 += 1 };
  s1 -> s1 [0, 65535] { R4813 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R4815 += 1 };
  s0 -> s0 [0, 65535] { R4814 += 1, R4815 += 1 };
  s0 -> s2 [0, 65535] { R4815 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R4815 += 1 };
  s0 -> s1 [74, 65535] { R4815 += 1 };
  s1 -> s1 [0, 72] { R4815 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R4815 += 1 };
  s1 -> s1 [74, 65535] { R4815 += 1 };
  s2 -> s1 [0, 72] { R4815 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4815 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R4815 += 1 };
  s2 -> s1 [74, 65535] { R4815 += 1 };
  s3 -> s3 [0, 65535] { R4815 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R4817 += 1, R4755 += 1 };
  s0 -> s0 [0, 65535] { R4816 += 1, R4817 += 1 };
  s0 -> s2 [0, 65535] { R4817 += 1, R4754 += 1, R4755 += 1 };
  s0 -> s1 [74, 65535] { R4817 += 1, R4755 += 1 };
  s1 -> s1 [0, 72] { R4817 += 1, R4755 += 1 };
  s1 -> s1 [0, 65535] { R4817 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R4817 += 1, R4755 += 1 };
  s2 -> s1 [0, 72] { R4817 += 1, R4755 += 1 };
  s2 -> s2 [0, 65535] { R4817 += 1, R4754 += 1, R4755 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R4817 += 1, R4755 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R4819 += 1, R4756 += 1, R4757 += 1 };
  s0 -> s0 [0, 65535] { R4818 += 1, R4819 += 1 };
  s0 -> s2 [0, 65535] { R4819 += 1, R4757 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R4819 += 1, R4756 += 1, R4757 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4819 += 1, R4757 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R4819 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4819 += 1, R4757 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R4819 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R4821 += 1, R4759 += 1 };
  s0 -> s0 [0, 65535] { R4820 += 1, R4821 += 1 };
  s0 -> s2 [0, 65535] { R4821 += 1, R4758 += 1, R4759 += 1 };
  s0 -> s1 [77, 65535] { R4821 += 1, R4759 += 1 };
  s1 -> s1 [0, 73] { R4821 += 1, R4759 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4821 += 1 };
  s1 -> s1 [77, 65535] { R4821 += 1, R4759 += 1 };
  s2 -> s1 [0, 73] { R4821 += 1, R4759 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4821 += 1, R4758 += 1, R4759 += 1 };
  s2 -> s1 [77, 65535] { R4821 += 1, R4759 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R4823 += 1, R4761 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R4822 += 1, R4823 += 1 };
  s0 -> s2 [0, 65535] { R4823 += 1, R4760 += 1, R4761 += 1 };
  s1 -> s1 [0, 65535] { R4823 += 1, R4761 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4823 += 1 };
  s2 -> s1 [0, 65535] { R4823 += 1, R4761 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4823 += 1, R4760 += 1, R4761 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4823 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R4825 += 1, R4763 += 1 };
  s0 -> s2 [0, 65535] { R4825 += 1, R4762 += 1, R4763 += 1 };
  s0 -> s0 [0, 65535] { R4824 += 1, R4825 += 1 };
  s0 -> s3 [0, 65535] { R4825 += 1, R4763 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R4825 += 1, R4763 += 1 };
  s1 -> s1 [0, 76] { R4825 += 1, R4763 += 1 };
  s1 -> s1 [0, 65535] { R4825 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R4825 += 1, R4763 += 1 };
  s2 -> s1 [0, 76] { R4825 += 1, R4763 += 1 };
  s2 -> s2 [0, 65535] { R4825 += 1, R4762 += 1, R4763 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4825 += 1, R4763 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R4825 += 1, R4763 += 1 };
  s3 -> s1 [0, 76] { R4825 += 1, R4763 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4825 += 1, R4763 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R4825 += 1 };
  s3 -> s1 [78, 65535] { R4825 += 1, R4763 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4825 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R4827 += 1, R4765 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R4827 += 1, R4764 += 1, R4765 += 1 };
  s0 -> s0 [0, 65535] { R4826 += 1, R4827 += 1 };
  s0 -> s3 [0, 65535] { R4827 += 1, R4765 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R4827 += 1, R4765 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R4827 += 1, R4765 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R4827 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4827 += 1, R4765 += 1 };
  s1 -> s1 [78, 65535] { R4827 += 1, R4765 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R4827 += 1, R4765 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4827 += 1, R4764 += 1, R4765 += 1 };
  s2 -> s3 [0, 65535] { R4827 += 1, R4765 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R4827 += 1, R4765 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R4827 += 1, R4765 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R4827 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4827 += 1, R4765 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R4827 += 1, R4765 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R4827 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R4829 += 1, R4767 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R4829 += 1, R4766 += 1, R4767 += 1 };
  s0 -> s3 [0, 65535] { R4829 += 1, R4767 += 1 };
  s0 -> s0 [0, 65535] { R4828 += 1, R4829 += 1 };
  s1 -> s1 [0, 65535] { R4829 += 1, R4767 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s3 [0, 65535] { R4829 += 1, R4767 += 1 };
  s1 -> s4 [0, 65535] { R4829 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R4829 += 1, R4767 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s2 [0, 65535] { R4829 += 1, R4766 += 1, R4767 += 1 };
  s2 -> s3 [0, 65535] { R4829 += 1, R4767 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4829 += 1, R4767 += 1 };
  s3 -> s4 [0, 65535] { R4829 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4829 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R4831 += 1, R4769 += 1, R3899 += 1 };
  s0 -> s0 [0, 65535] { R4830 += 1, R4831 += 1 };
  s0 -> s2 [0, 65535] { R4831 += 1, R4768 += 1, R4769 += 1 };
  s0 -> s1 [0, 65535] { R4831 += 1, R4769 += 1 };
  s0 -> s1 [80, 65535] { R4831 += 1, R4769 += 1, R3899 += 1 };
  s1 -> s1 [0, 77] { R4831 += 1, R4769 += 1, R3899 += 1 };
  s1 -> s4 [0, 65535] { R4831 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4831 += 1, R4769 += 1 };
  s1 -> s1 [80, 65535] { R4831 += 1, R4769 += 1, R3899 += 1 };
  s2 -> s1 [0, 77] { R4831 += 1, R4769 += 1, R3899 += 1 };
  s2 -> s2 [0, 65535] { R4831 += 1, R4768 += 1, R4769 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4831 += 1, R4769 += 1 };
  s2 -> s1 [80, 65535] { R4831 += 1, R4769 += 1, R3899 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4831 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R4833 += 1, R4771 += 1 };
  s0 -> s2 [0, 65535] { R4833 += 1, R4770 += 1, R4771 += 1 };
  s0 -> s0 [0, 65535] { R4832 += 1, R4833 += 1 };
  s1 -> s1 [0, 65535] { R4833 += 1, R4771 += 1 };
  s1 -> s4 [0, 65535] { R4833 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4833 += 1, R4771 += 1 };
  s2 -> s2 [0, 65535] { R4833 += 1, R4770 += 1, R4771 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4833 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s0 -> s2 [0, 65535] { R4835 += 1, R4773 += 1, R4752 += 1, R4753 += 1 };
  s0 -> s0 [0, 65535] { R4834 += 1, R4835 += 1 };
  s0 -> s3 [0, 65535] { R4835 += 1, R4772 += 1, R4773 += 1 };
  s0 -> s4 [77, 77] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s0 -> s5 [77, 77] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s0 -> s1 [81, 65535] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s1 -> s1 [0, 76] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s1 -> s6 [0, 65535] { R4835 += 1 };
  s1 -> s1 [0, 65535] { R4835 += 1, R4773 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [77, 77] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s1 -> s5 [77, 77] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s1 -> s1 [81, 65535] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s2 -> s1 [0, 76] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s2 -> s6 [0, 65535] { R4835 += 1 };
  s2 -> s2 [0, 65535] { R4835 += 1, R4773 += 1, R4752 += 1, R4753 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [77, 77] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s2 -> s5 [77, 77] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s2 -> s1 [81, 65535] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s3 -> s1 [0, 76] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s3 -> s2 [0, 65535] { R4835 += 1, R4773 += 1, R4752 += 1, R4753 += 1 };
  s3 -> s3 [0, 65535] { R4835 += 1, R4772 += 1, R4773 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [77, 77] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s3 -> s5 [77, 77] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s3 -> s1 [81, 65535] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s4 -> s4 [0, 77] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s4 -> s6 [0, 65535] { R4835 += 1 };
  s4 -> s4 [0, 65535] { R4835 += 1, R4773 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [81, 65535] { R4835 += 1, R4773 += 1, R4753 += 1 };
  s5 -> s6 [0, 65535] { R4835 += 1 };
  s5 -> s5 [0, 65535] { R4835 += 1, R4773 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R4835 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R4836 += 1, R4837 += 1 };
  s0 -> s1 [0, 65535] { R4837 += 1, R4793 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R4837 += 1, R4792 += 1, R4793 += 1 };
  s1 -> s4 [0, 65535] { R4837 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4837 += 1, R4793 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4837 += 1, R4793 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R4837 += 1, R4792 += 1, R4793 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4837 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R4839 += 1, R4795 += 1 };
  s0 -> s0 [0, 65535] { R4838 += 1, R4839 += 1 };
  s0 -> s2 [0, 65535] { R4839 += 1, R4794 += 1, R4795 += 1 };
  s0 -> s3 [73, 73] { R4839 += 1, R4795 += 1 };
  s0 -> s4 [73, 73] { R4839 += 1, R4795 += 1 };
  s0 -> s5 [77, 77] { R4839 += 1, R4795 += 1 };
  s0 -> s1 [78, 65535] { R4839 += 1, R4795 += 1 };
  s1 -> s1 [0, 72] { R4839 += 1, R4795 += 1 };
  s1 -> s3 [73, 73] { R4839 += 1, R4795 += 1 };
  s1 -> s4 [73, 73] { R4839 += 1, R4795 += 1 };
  s1 -> s5 [77, 77] { R4839 += 1, R4795 += 1 };
  s1 -> s1 [78, 65535] { R4839 += 1, R4795 += 1 };
  s2 -> s1 [0, 72] { R4839 += 1, R4795 += 1 };
  s2 -> s2 [0, 65535] { R4839 += 1, R4794 += 1, R4795 += 1 };
  s2 -> s3 [73, 73] { R4839 += 1, R4795 += 1 };
  s2 -> s4 [73, 73] { R4839 += 1, R4795 += 1 };
  s2 -> s5 [77, 77] { R4839 += 1, R4795 += 1 };
  s2 -> s1 [78, 65535] { R4839 += 1, R4795 += 1 };
  s4 -> s4 [0, 73] { R4839 += 1, R4795 += 1 };
  s4 -> s7 [77, 77] { R4839 += 1, R4795 += 1 };
  s4 -> s4 [78, 65535] { R4839 += 1, R4795 += 1 };
  s5 -> s5 [0, 72] { R4839 += 1, R4795 += 1 };
  s5 -> s5 [0, 65535] { R4839 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R4839 += 1, R4795 += 1 };
  s5 -> s8 [73, 73] { R4839 += 1, R4795 += 1 };
  s5 -> s5 [77, 65535] { R4839 += 1, R4795 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R4839 += 1, R4795 += 1 };
  s7 -> s7 [0, 65535] { R4839 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R4839 += 1, R4795 += 1 };
  s8 -> s8 [0, 65535] { R4839 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R4841 += 1, R4797 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R4840 += 1, R4841 += 1 };
  s0 -> s2 [0, 65535] { R4841 += 1, R4796 += 1, R4797 += 1 };
  s0 -> s3 [73, 73] { R4841 += 1, R4797 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R4841 += 1, R4797 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R4841 += 1, R4797 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R4841 += 1, R4797 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4841 += 1 };
  s1 -> s3 [73, 73] { R4841 += 1, R4797 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R4841 += 1, R4797 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R4841 += 1, R4797 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R4841 += 1, R4797 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4841 += 1, R4796 += 1, R4797 += 1 };
  s2 -> s3 [73, 73] { R4841 += 1, R4797 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R4841 += 1, R4797 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R4841 += 1, R4797 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R4841 += 1 };
  s3 -> s3 [0, 65535] { R4841 += 1, R4797 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4841 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4841 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R4843 += 1, R4799 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R4842 += 1, R4843 += 1 };
  s0 -> s2 [0, 65535] { R4843 += 1, R4798 += 1, R4799 += 1 };
  s0 -> s3 [73, 73] { R4843 += 1, R4799 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R4843 += 1, R4799 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R4843 += 1, R4799 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R4843 += 1, R4799 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4843 += 1 };
  s1 -> s3 [73, 73] { R4843 += 1, R4799 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R4843 += 1, R4799 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R4843 += 1, R4799 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R4843 += 1, R4799 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R4843 += 1, R4798 += 1, R4799 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R4843 += 1, R4799 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R4843 += 1, R4799 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R4843 += 1, R4799 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4843 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4843 += 1, R4799 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R4843 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4843 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R4844 += 1, R4845 += 1 };
  s0 -> s2 [0, 65535] { R4845 += 1, R4800 += 1, R4801 += 1 };
  s0 -> s3 [73, 73] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R4845 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4845 += 1, R4800 += 1, R4801 += 1 };
  s2 -> s3 [73, 73] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R4845 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4845 += 1, R4801 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4845 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4845 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R4846 += 1, R4847 += 1 };
  s0 -> s3 [0, 65535] { R4847 += 1, R4802 += 1, R4803 += 1 };
  s0 -> s4 [73, 73] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [73, 73] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [73, 73] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [73, 73] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [73, 73] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s7 [73, 73] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4847 += 1 };
  s2 -> s5 [73, 73] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [73, 73] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R4847 += 1, R4802 += 1, R4803 += 1 };
  s3 -> s4 [73, 73] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [73, 73] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [73, 73] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R4847 += 1, R4803 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s7 [0, 65535] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R4847 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4847 += 1, R4803 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s9 [0, 65535] { R4847 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4847 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s2 [0, 72] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s0 -> s3 [0, 65535] { R4849 += 1, R4804 += 1, R4805 += 1 };
  s0 -> s0 [0, 65535] { R4848 += 1, R4849 += 1 };
  s0 -> s4 [73, 73] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s5 [73, 73] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s6 [73, 73] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s0 -> s7 [73, 73] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s0 -> s2 [74, 77] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s0 -> s1 [74, 65535] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s8 [80, 80] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s0 -> s2 [81, 65535] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s1 -> s1 [0, 72] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s2 [0, 72] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s1 -> s4 [73, 73] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s5 [73, 73] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s6 [73, 73] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s1 -> s7 [73, 73] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s1 -> s2 [74, 77] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s1 -> s1 [74, 65535] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s8 [80, 80] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s1 -> s2 [81, 65535] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s2 -> s2 [0, 72] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s2 -> s6 [73, 73] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s2 -> s7 [73, 73] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s2 -> s2 [74, 77] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s2 -> s8 [80, 80] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s2 -> s2 [81, 65535] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s3 -> s1 [0, 72] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s2 [0, 72] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s3 -> s3 [0, 65535] { R4849 += 1, R4804 += 1, R4805 += 1 };
  s3 -> s4 [73, 73] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s5 [73, 73] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s6 [73, 73] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s3 -> s7 [73, 73] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s3 -> s2 [74, 77] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s3 -> s1 [74, 65535] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s8 [80, 80] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s3 -> s2 [81, 65535] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s5 -> s7 [0, 77] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s5 -> s5 [0, 65535] { R4849 += 1, R4805 += 1, R3896 += 1, R3897 += 1 };
  s5 -> s10 [80, 80] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s5 -> s7 [81, 65535] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s7 -> s7 [0, 77] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s7 -> s10 [80, 80] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s7 -> s7 [81, 65535] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s8 -> s8 [0, 72] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4849 += 1 };
  s8 -> s10 [73, 73] { R4849 += 1, R4805 += 1 };
  s8 -> s11 [73, 73] { R4849 += 1, R4805 += 1 };
  s8 -> s8 [74, 77] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s8 -> s8 [74, 65535] { R4849 += 1, R4805 += 1 };
  s8 -> s8 [80, 65535] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s10 -> s10 [0, 65535] { R4849 += 1, R4805 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R4849 += 1 };
  s10 -> s10 [80, 65535] { R4849 += 1, R4805 += 1, R3897 += 1 };
  s11 -> s11 [0, 65535] { R4849 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4849 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s0 -> s2 [0, 72] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s0 -> s3 [0, 65535] { R4851 += 1, R4806 += 1, R4807 += 1 };
  s0 -> s0 [0, 65535] { R4850 += 1, R4851 += 1 };
  s0 -> s4 [73, 73] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s0 -> s5 [73, 73] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s0 -> s6 [73, 73] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s0 -> s7 [73, 73] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s0 -> s1 [74, 65535] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s0 -> s2 [74, 65535] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s1 -> s1 [0, 72] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s1 -> s2 [0, 72] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s1 -> s4 [73, 73] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s1 -> s5 [73, 73] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s1 -> s6 [73, 73] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s1 -> s7 [73, 73] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s1 -> s1 [74, 65535] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s1 -> s2 [74, 65535] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s2 -> s11 [0, 72] { R4851 += 1, R4807 += 1 };
  s2 -> s2 [0, 72] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s2 -> s4 [73, 73] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s2 -> s5 [73, 73] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s2 -> s12 [73, 73] { R4851 += 1, R4807 += 1 };
  s2 -> s8 [73, 73] { R4851 += 1, R4807 += 1 };
  s2 -> s11 [74, 65535] { R4851 += 1, R4807 += 1 };
  s2 -> s2 [74, 65535] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s3 -> s1 [0, 72] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s3 -> s2 [0, 72] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s3 -> s3 [0, 65535] { R4851 += 1, R4806 += 1, R4807 += 1 };
  s3 -> s4 [73, 73] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s3 -> s5 [73, 73] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s3 -> s6 [73, 73] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s3 -> s7 [73, 73] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s3 -> s1 [74, 65535] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s3 -> s2 [74, 65535] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s5 -> s5 [0, 65535] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s5 -> s8 [0, 65535] { R4851 += 1, R4807 += 1 };
  s6 -> s5 [0, 65535] { R4851 += 1, R4807 += 1, R4745 += 1, R4746 += 1 };
  s6 -> s6 [0, 65535] { R4851 += 1, R4807 += 1, R4744 += 1, R4745 += 1 };
  s8 -> s9 [0, 65535] { R4851 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R4851 += 1, R4807 += 1 };
  s9 -> s9 [0, 65535] { R4851 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R4851 += 1, R4807 += 1 };
  s11 -> s11 [0, 65535] { R4851 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R4851 += 1, R4807 += 1 };
  s11 -> s8 [73, 73] { R4851 += 1, R4807 += 1 };
  s11 -> s11 [74, 65535] { R4851 += 1, R4807 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R4851 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s0 -> s0 [0, 65535] { R4852 += 1, R4853 += 1 };
  s0 -> s2 [0, 65535] { R4853 += 1, R4808 += 1, R4809 += 1 };
  s0 -> s3 [73, 73] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s0 -> s4 [73, 73] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s0 -> s1 [74, 65535] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s1 -> s1 [0, 72] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s1 -> s1 [0, 65535] { R4853 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s1 -> s4 [73, 73] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s1 -> s1 [74, 65535] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s2 -> s1 [0, 72] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s2 -> s2 [0, 65535] { R4853 += 1, R4808 += 1, R4809 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s2 -> s4 [73, 73] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s2 -> s1 [74, 65535] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s3 -> s6 [0, 65535] { R4853 += 1 };
  s3 -> s3 [0, 65535] { R4853 += 1, R4809 += 1, R4750 += 1, R4751 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4853 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4853 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R4853 && R20 - R4853 = -1 && R21 = R4853 && R22 - R4853 = -1 && R23 = R4853 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3899 + -1*R3897 - R53 = 0 && R52 + R3898 + R3896 = 0 && R4794 = 0 && R4795 = 0 && R4802 = 0 && R4803 = 0 && R4804 = 0 && R4805 = 0 && R4806 = 0 && R4807 = 0 && R4810 = 0 && R4811 = R4853 && R4812 = 0 && R4813 = R4853 && R4814 = 0 && R4815 = R4853 && R4816 = 0 && R4817 = R4853 && R4818 = 0 && R4819 = R4853 && R4820 = 0 && R4821 = R4853 && R4822 = 0 && R4823 = R4853 && R4824 = 0 && R4825 = R4853 && R4826 = 0 && R4827 = R4853 && R4828 = 0 && R4829 = R4853 && R4830 = 0 && R4831 = R4853 && R4832 = 0 && R4833 = R4853 && R4834 = 0 && R4835 = R4853 && R4836 = 0 && R4837 = R4853 && R4838 = 0 && R4839 = R4853 && R4840 = 0 && R4841 = R4853 && R4842 = 0 && R4843 = R4853 && R4844 = 0 && R4845 = R4853 && R4846 = 0 && R4847 = R4853 && R4848 = 0 && R4849 = R4853 && R4850 = 0 && R4851 = R4853 && R4852 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3899 + -1*R3897 - R53 < 1 && 0 < R4853 && (R1 != 0 || R17 = 0 || (R4754 = 0 && R4755 = 0)) && (R1 != 0 || R17 = 0 || (R4756 = 0 && R4757 = 0)) && (R1 != 0 || R17 = 0 || (R4758 = 0 && R4759 = 0)) && (R1 != 0 || R17 = 0 || (R4760 = 0 && R4761 = 0)) && (R1 != 0 || R17 = 0 || (R4762 = 0 && R4763 = 0)) && (R1 != 0 || R17 = 0 || (R4764 = 0 && R4765 = 0)) && (R1 != 0 || R17 = 0 || (R4766 = 0 && R4767 = 0)) && (R1 != 0 || R17 = 0 || (R4768 = 0 && R4769 = 0)) && (R1 != 0 || R17 = 0 || (R4770 = 0 && R4771 = 0)) && (R1 != 0 || R17 = 0 || (R4772 = 0 && R4773 = 0)) && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R42 + R72 + R70 = 0 || R53 + R3899 + R3897 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R3899 + R3897 < 1))) && (R4754 != 0 || R1 = R4755 || R1 < 1) && (R4756 != 0 || R1 = R4757 || R1 < 1) && (R4758 != 0 || R1 = R4759 || R1 < 1) && (R4760 != 0 || R1 = R4761 || R1 < 1) && (R4762 != 0 || R1 = R4763 || R1 < 1) && (R4764 != 0 || R1 = R4765 || R1 < 1) && (R4766 != 0 || R1 = R4767 || R1 < 1) && (R4768 != 0 || R1 = R4769 || R1 < 1) && (R4770 != 0 || R1 = R4771 || R1 < 1) && (R4772 != 0 || R1 = R4773 || R1 < 1) && (R18 = 0 || (R4792 = 0 && R4793 = 0)) && (R18 = 0 || (R4796 = 0 && R4797 = 0)) && (R18 = 0 || (R4798 = 0 && R4799 = 0)) && (R18 = 0 || (R4800 = 0 && R4801 = 0)) && (R18 = 0 || (R4808 = 0 && R4809 = 0)) && (R19 = 0 || (R4774 = 0 && R4775 = 0)) && (R19 = 0 || (R4776 = 0 && R4777 = 0)) && (R19 = 0 || (R4778 = 0 && R4779 = 0)) && (R19 = 0 || (R4780 = 0 && R4781 = 0)) && (R19 = 0 || (R4782 = 0 && R4783 = 0)) && (R19 = 0 || (R4784 = 0 && R4785 = 0)) && (R19 = 0 || (R4786 = 0 && R4787 = 0)) && (R19 = 0 || (R4788 = 0 && R4789 = 0)) && (R19 = 0 || (R4790 = 0 && R4791 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0)) && (R58 + R4749 + R4746 = 0 || (R56 + R4747 + R4744 = 0 && R57 + R4748 + R4745 = 0)) && (R58 + R4749 + R4746 = 0 || (R62 + R4752 + R4750 = 0 && R63 + R4753 + R4751 = 0)) && (R4754 = 0 || R1 < 1) && (R4756 = 0 || R1 < 1) && (R4758 = 0 || R1 < 1) && (R4760 = 0 || R1 < 1) && (R4762 = 0 || R1 < 1) && (R4764 = 0 || R1 < 1) && (R4766 = 0 || R1 < 1) && (R4768 = 0 || R1 < 1) && (R4770 = 0 || R1 < 1) && (R4772 = 0 || R1 < 1);
// End of Parikh automata intersection problem
