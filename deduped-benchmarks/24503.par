// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R16618, R16619, R16620, R16621, R17, R17466, R17467, R17468, R17469, R17470, R17471, R17680, R17681, R17682, R17683, R17684, R17685, R17686, R17687, R17688, R17689, R17690, R17691, R17692, R17693, R17694, R17695, R17696, R17697, R17698, R17699, R17700, R17701, R17702, R17703, R17704, R17705, R17706, R17707, R17708, R17709, R17710, R17711, R17712, R17713, R17714, R17715, R17716, R17717, R17718, R17719, R17720, R17721, R17722, R17723, R17724, R17725, R17726, R17727, R17728, R17729, R17730, R17731, R17732, R17733, R17734, R17735, R17736, R17737, R17738, R17739, R17740, R17741, R17742, R17743, R17744, R17745, R17746, R17747, R17748, R17749, R17750, R17751, R17752, R17753, R17754, R17755, R17756, R17757, R17758, R17759, R17760, R17761, R17762, R17763, R17764, R17765, R17766, R17767, R17768, R17769, R17770, R17771, R17772, R17773, R17774, R17775, R17776, R17777, R17778, R17779, R17780, R17781, R17782, R17783, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R17705 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R17704 += 1, R17705 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R17705 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R17707 += 1 };
  s0 -> s0 [0, 65535] { R17706 += 1, R17707 += 1 };
  s0 -> s2 [73, 73] { R17707 += 1 };
  s0 -> s3 [73, 73] { R17707 += 1 };
  s0 -> s1 [78, 65535] { R17707 += 1 };
  s1 -> s1 [0, 72] { R17707 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17707 += 1 };
  s1 -> s3 [73, 73] { R17707 += 1 };
  s1 -> s1 [78, 65535] { R17707 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R17707 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R17707 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R17709 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R17708 += 1, R17709 += 1 };
  s0 -> s2 [73, 73] { R17709 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R17709 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R17709 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R17709 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17709 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R17709 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R17709 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17709 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R17711 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R17710 += 1, R17711 += 1 };
  s0 -> s2 [73, 73] { R17711 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R17711 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R17711 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R17711 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17711 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R17711 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R17711 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R17711 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R17713 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R17712 += 1, R17713 += 1 };
  s0 -> s2 [73, 73] { R17713 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R17713 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R17713 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R17713 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17713 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R17713 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R17713 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R17713 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R17715 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R17714 += 1, R17715 += 1 };
  s0 -> s2 [73, 73] { R17715 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R17715 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R17715 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R17715 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17715 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R17715 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R17715 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R17715 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R17717 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R17716 += 1, R17717 += 1 };
  s0 -> s2 [73, 73] { R17717 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R17717 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R17717 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R17717 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17717 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R17717 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R17717 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R17717 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R17719 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R17718 += 1, R17719 += 1 };
  s0 -> s2 [73, 73] { R17719 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R17719 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R17719 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R17719 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17719 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R17719 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R17719 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R17719 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R17721 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R17720 += 1, R17721 += 1 };
  s0 -> s2 [73, 73] { R17721 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R17721 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R17721 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R17721 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17721 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R17721 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R17721 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R17721 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R17741 += 1 };
  s0 -> s0 [0, 65535] { R17740 += 1, R17741 += 1 };
  s0 -> s2 [73, 73] { R17741 += 1 };
  s0 -> s1 [74, 65535] { R17741 += 1 };
  s1 -> s1 [0, 72] { R17741 += 1 };
  s1 -> s2 [73, 73] { R17741 += 1 };
  s1 -> s1 [74, 65535] { R17741 += 1 };
  s2 -> s2 [0, 65535] { R17741 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R17742 += 1, R17743 += 1 };
  s0 -> s1 [0, 65535] { R17743 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R17743 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R17745 += 1 };
  s0 -> s2 [0, 65535] { R17745 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R17744 += 1, R17745 += 1 };
  s0 -> s3 [73, 73] { R17745 += 1 };
  s0 -> s1 [74, 65535] { R17745 += 1 };
  s1 -> s1 [0, 72] { R17745 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R17745 += 1 };
  s1 -> s1 [74, 65535] { R17745 += 1 };
  s2 -> s1 [0, 72] { R17745 += 1 };
  s2 -> s2 [0, 65535] { R17745 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R17745 += 1 };
  s2 -> s1 [74, 65535] { R17745 += 1 };
  s3 -> s3 [0, 65535] { R17745 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R17747 += 1, R17685 += 1 };
  s0 -> s0 [0, 65535] { R17746 += 1, R17747 += 1 };
  s0 -> s2 [0, 65535] { R17747 += 1, R17684 += 1, R17685 += 1 };
  s0 -> s1 [74, 65535] { R17747 += 1, R17685 += 1 };
  s1 -> s1 [0, 72] { R17747 += 1, R17685 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17747 += 1 };
  s1 -> s1 [74, 65535] { R17747 += 1, R17685 += 1 };
  s2 -> s1 [0, 72] { R17747 += 1, R17685 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17747 += 1, R17684 += 1, R17685 += 1 };
  s2 -> s1 [74, 65535] { R17747 += 1, R17685 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R17749 += 1, R17687 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R17749 += 1, R17686 += 1, R17687 += 1 };
  s0 -> s0 [0, 65535] { R17748 += 1, R17749 += 1 };
  s1 -> s1 [0, 65535] { R17749 += 1, R17687 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R17749 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17749 += 1, R17687 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17749 += 1, R17686 += 1, R17687 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17749 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R17751 += 1, R17689 += 1 };
  s0 -> s2 [0, 65535] { R17751 += 1, R17688 += 1, R17689 += 1 };
  s0 -> s0 [0, 65535] { R17750 += 1, R17751 += 1 };
  s0 -> s1 [77, 65535] { R17751 += 1, R17689 += 1 };
  s1 -> s1 [0, 73] { R17751 += 1, R17689 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17751 += 1 };
  s1 -> s1 [77, 65535] { R17751 += 1, R17689 += 1 };
  s2 -> s1 [0, 73] { R17751 += 1, R17689 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17751 += 1, R17688 += 1, R17689 += 1 };
  s2 -> s1 [77, 65535] { R17751 += 1, R17689 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R17753 += 1, R17690 += 1, R17691 += 1 };
  s0 -> s0 [0, 65535] { R17752 += 1, R17753 += 1 };
  s0 -> s2 [0, 65535] { R17753 += 1, R17691 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R17753 += 1, R17690 += 1, R17691 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R17753 += 1, R17691 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R17753 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17753 += 1, R17691 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R17753 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R17755 += 1, R17693 += 1 };
  s0 -> s2 [0, 65535] { R17755 += 1, R17692 += 1, R17693 += 1 };
  s0 -> s0 [0, 65535] { R17754 += 1, R17755 += 1 };
  s0 -> s3 [0, 65535] { R17755 += 1, R17693 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R17755 += 1, R17693 += 1 };
  s1 -> s1 [0, 76] { R17755 += 1, R17693 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R17755 += 1 };
  s1 -> s1 [78, 65535] { R17755 += 1, R17693 += 1 };
  s2 -> s1 [0, 76] { R17755 += 1, R17693 += 1 };
  s2 -> s2 [0, 65535] { R17755 += 1, R17692 += 1, R17693 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R17755 += 1, R17693 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R17755 += 1, R17693 += 1 };
  s3 -> s1 [0, 76] { R17755 += 1, R17693 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R17755 += 1 };
  s3 -> s3 [0, 65535] { R17755 += 1, R17693 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R17755 += 1, R17693 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R17755 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R17757 += 1, R17695 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R17757 += 1, R17695 += 1 };
  s0 -> s2 [0, 65535] { R17757 += 1, R17694 += 1, R17695 += 1 };
  s0 -> s0 [0, 65535] { R17756 += 1, R17757 += 1 };
  s0 -> s1 [78, 65535] { R17757 += 1, R17695 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R17757 += 1, R17695 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R17757 += 1, R17695 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17757 += 1 };
  s1 -> s1 [78, 65535] { R17757 += 1, R17695 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R17757 += 1, R17695 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R17757 += 1, R17695 += 1 };
  s2 -> s2 [0, 65535] { R17757 += 1, R17694 += 1, R17695 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R17757 += 1, R17695 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17757 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R17759 += 1, R17697 += 1 };
  s0 -> s0 [0, 65535] { R17758 += 1, R17759 += 1 };
  s0 -> s2 [0, 65535] { R17759 += 1, R17697 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R17759 += 1, R17696 += 1, R17697 += 1 };
  s1 -> s1 [0, 65535] { R17759 += 1, R17697 += 1 };
  s1 -> s5 [0, 65535] { R17759 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R17759 += 1, R17697 += 1 };
  s2 -> s5 [0, 65535] { R17759 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17759 += 1, R17697 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s1 [0, 65535] { R17759 += 1, R17697 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R17759 += 1, R17697 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s3 [0, 65535] { R17759 += 1, R17696 += 1, R17697 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R17759 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s0 -> s2 [0, 65535] { R17761 += 1, R17698 += 1, R17699 += 1 };
  s0 -> s0 [0, 65535] { R17760 += 1, R17761 += 1 };
  s0 -> s3 [80, 80] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s0 -> s1 [81, 65535] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s1 -> s1 [0, 77] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s1 -> s3 [80, 80] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s1 -> s1 [81, 65535] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s2 -> s1 [0, 77] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s2 -> s2 [0, 65535] { R17761 += 1, R17698 += 1, R17699 += 1 };
  s2 -> s3 [80, 80] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s2 -> s1 [81, 65535] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s3 -> s3 [0, 77] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s3 -> s4 [0, 65535] { R17761 += 1 };
  s3 -> s3 [0, 65535] { R17761 += 1, R17699 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [80, 65535] { R17761 += 1, R17699 += 1, R16621 += 1 };
  s4 -> s4 [0, 65535] { R17761 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R17763 += 1, R17701 += 1 };
  s0 -> s2 [0, 65535] { R17763 += 1, R17700 += 1, R17701 += 1 };
  s0 -> s0 [0, 65535] { R17762 += 1, R17763 += 1 };
  s1 -> s1 [0, 65535] { R17763 += 1, R17701 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17763 += 1 };
  s2 -> s1 [0, 65535] { R17763 += 1, R17701 += 1 };
  s2 -> s2 [0, 65535] { R17763 += 1, R17700 += 1, R17701 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17763 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R17765 += 1, R17703 += 1 };
  s0 -> s0 [0, 65535] { R17764 += 1, R17765 += 1 };
  s0 -> s2 [0, 65535] { R17765 += 1, R17702 += 1, R17703 += 1 };
  s1 -> s1 [0, 65535] { R17765 += 1, R17703 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17765 += 1 };
  s2 -> s1 [0, 65535] { R17765 += 1, R17703 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17765 += 1, R17702 += 1, R17703 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17765 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R17767 += 1, R17722 += 1, R17723 += 1 };
  s0 -> s0 [0, 65535] { R17766 += 1, R17767 += 1 };
  s0 -> s2 [0, 65535] { R17767 += 1, R17723 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R17767 += 1, R17722 += 1, R17723 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R17767 += 1, R17723 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R17767 += 1 };
  s2 -> s2 [0, 65535] { R17767 += 1, R17723 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17767 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R17769 += 1, R17725 += 1 };
  s0 -> s2 [0, 65535] { R17769 += 1, R17724 += 1, R17725 += 1 };
  s0 -> s0 [0, 65535] { R17768 += 1, R17769 += 1 };
  s0 -> s3 [73, 73] { R17769 += 1, R17725 += 1 };
  s0 -> s4 [73, 73] { R17769 += 1, R17725 += 1 };
  s0 -> s5 [77, 77] { R17769 += 1, R17725 += 1 };
  s0 -> s1 [78, 65535] { R17769 += 1, R17725 += 1 };
  s1 -> s1 [0, 72] { R17769 += 1, R17725 += 1 };
  s1 -> s3 [73, 73] { R17769 += 1, R17725 += 1 };
  s1 -> s4 [73, 73] { R17769 += 1, R17725 += 1 };
  s1 -> s5 [77, 77] { R17769 += 1, R17725 += 1 };
  s1 -> s1 [78, 65535] { R17769 += 1, R17725 += 1 };
  s2 -> s1 [0, 72] { R17769 += 1, R17725 += 1 };
  s2 -> s2 [0, 65535] { R17769 += 1, R17724 += 1, R17725 += 1 };
  s2 -> s3 [73, 73] { R17769 += 1, R17725 += 1 };
  s2 -> s4 [73, 73] { R17769 += 1, R17725 += 1 };
  s2 -> s5 [77, 77] { R17769 += 1, R17725 += 1 };
  s2 -> s1 [78, 65535] { R17769 += 1, R17725 += 1 };
  s4 -> s4 [0, 73] { R17769 += 1, R17725 += 1 };
  s4 -> s7 [77, 77] { R17769 += 1, R17725 += 1 };
  s4 -> s4 [78, 65535] { R17769 += 1, R17725 += 1 };
  s5 -> s5 [0, 72] { R17769 += 1, R17725 += 1 };
  s5 -> s5 [0, 65535] { R17769 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R17769 += 1, R17725 += 1 };
  s5 -> s8 [73, 73] { R17769 += 1, R17725 += 1 };
  s5 -> s5 [77, 65535] { R17769 += 1, R17725 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R17769 += 1, R17725 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R17769 += 1 };
  s7 -> s7 [77, 65535] { R17769 += 1, R17725 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R17769 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R17771 += 1, R17727 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R17770 += 1, R17771 += 1 };
  s0 -> s2 [0, 65535] { R17771 += 1, R17726 += 1, R17727 += 1 };
  s0 -> s3 [73, 73] { R17771 += 1, R17727 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R17771 += 1, R17727 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R17771 += 1, R17727 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R17771 += 1, R17727 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R17771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17771 += 1, R17727 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R17771 += 1, R17727 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R17771 += 1, R17727 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R17771 += 1, R17727 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R17771 += 1, R17726 += 1, R17727 += 1 };
  s2 -> s3 [73, 73] { R17771 += 1, R17727 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R17771 += 1, R17727 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R17771 += 1, R17727 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R17771 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17771 += 1, R17727 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R17771 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17771 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R17773 += 1, R17729 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R17773 += 1, R17728 += 1, R17729 += 1 };
  s0 -> s0 [0, 65535] { R17772 += 1, R17773 += 1 };
  s0 -> s3 [73, 73] { R17773 += 1, R17729 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R17773 += 1, R17729 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R17773 += 1, R17729 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R17773 += 1, R17729 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R17773 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17773 += 1, R17729 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R17773 += 1, R17729 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R17773 += 1, R17729 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R17773 += 1, R17729 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R17773 += 1, R17728 += 1, R17729 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17773 += 1, R17729 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R17773 += 1, R17729 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R17773 += 1, R17729 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R17773 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R17773 += 1 };
  s4 -> s4 [0, 65535] { R17773 += 1, R17729 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17773 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R17774 += 1, R17775 += 1 };
  s0 -> s3 [0, 65535] { R17775 += 1, R17730 += 1, R17731 += 1 };
  s0 -> s4 [73, 73] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R17775 += 1 };
  s2 -> s5 [73, 73] { R17775 += 1, R17731 += 1 };
  s2 -> s7 [73, 73] { R17775 += 1, R17731 += 1 };
  s2 -> s2 [74, 76] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R17775 += 1, R17731 += 1 };
  s2 -> s2 [78, 65535] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R17775 += 1, R17730 += 1, R17731 += 1 };
  s3 -> s4 [73, 73] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s4 -> s5 [0, 76] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R17775 += 1, R17731 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s5 [78, 65535] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s5 -> s5 [0, 76] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R17775 += 1, R17731 += 1 };
  s5 -> s9 [0, 65535] { R17775 += 1 };
  s5 -> s5 [78, 65535] { R17775 += 1, R17731 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R17775 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R17775 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s3 [0, 65535] { R17777 += 1, R17732 += 1, R17733 += 1 };
  s0 -> s0 [0, 65535] { R17776 += 1, R17777 += 1 };
  s0 -> s4 [73, 73] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 72] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 72] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [73, 73] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s5 [73, 73] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s6 [73, 73] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s7 [73, 73] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [74, 65535] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 65535] { R17777 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [73, 73] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 72] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R17777 += 1, R17732 += 1, R17733 += 1 };
  s3 -> s4 [73, 73] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s4 [0, 65535] { R17777 += 1, R17733 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s6 [0, 65535] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s9 [0, 65535] { R17777 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R17777 += 1, R17733 += 1, R15343 += 1, R15344 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R17777 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R17777 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s0 -> s2 [0, 72] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s3 [0, 65535] { R17779 += 1, R17734 += 1, R17735 += 1 };
  s0 -> s0 [0, 65535] { R17778 += 1, R17779 += 1 };
  s0 -> s4 [73, 73] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s0 -> s5 [73, 73] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s6 [73, 73] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s0 -> s7 [73, 73] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s1 [74, 77] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s0 -> s2 [74, 65535] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s1 [81, 65535] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s1 -> s1 [0, 72] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s1 -> s1 [0, 65535] { R17779 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s1 -> s6 [73, 73] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s1 -> s1 [74, 77] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s1 -> s1 [81, 65535] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s2 -> s1 [0, 72] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s2 -> s2 [0, 72] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s4 [73, 73] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s2 -> s5 [73, 73] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s6 [73, 73] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s2 -> s7 [73, 73] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [74, 77] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s2 -> s2 [74, 65535] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [81, 65535] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s3 -> s1 [0, 72] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s3 -> s2 [0, 72] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s3 [0, 65535] { R17779 += 1, R17734 += 1, R17735 += 1 };
  s3 -> s4 [73, 73] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s3 -> s5 [73, 73] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s6 [73, 73] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s3 -> s7 [73, 73] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s1 [74, 77] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s3 -> s2 [74, 65535] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s1 [81, 65535] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s4 -> s4 [0, 77] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s4 -> s4 [0, 65535] { R17779 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s5 -> s4 [0, 77] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s5 -> s5 [0, 65535] { R17779 += 1, R17735 += 1, R16618 += 1, R16619 += 1 };
  s5 -> s4 [81, 65535] { R17779 += 1, R17735 += 1, R16619 += 1 };
  s6 -> s6 [0, 65535] { R17779 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s1, s4, s6, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s0 -> s2 [0, 72] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s0 -> s3 [0, 65535] { R17781 += 1, R17736 += 1, R17737 += 1 };
  s0 -> s0 [0, 65535] { R17780 += 1, R17781 += 1 };
  s0 -> s4 [73, 73] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s0 -> s5 [73, 73] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s0 -> s6 [73, 73] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s0 -> s7 [73, 73] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s0 -> s1 [74, 65535] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s0 -> s2 [74, 65535] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s1 -> s1 [0, 72] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s1 -> s2 [0, 72] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s1 -> s4 [73, 73] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s1 -> s5 [73, 73] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s1 -> s6 [73, 73] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s1 -> s7 [73, 73] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s1 -> s1 [74, 65535] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s1 -> s2 [74, 65535] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s2 [0, 72] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s11 [0, 72] { R17781 += 1, R17737 += 1 };
  s2 -> s4 [73, 73] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s8 [73, 73] { R17781 += 1, R17737 += 1 };
  s2 -> s7 [73, 73] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s12 [73, 73] { R17781 += 1, R17737 += 1 };
  s2 -> s2 [74, 65535] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s11 [74, 65535] { R17781 += 1, R17737 += 1 };
  s3 -> s1 [0, 72] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s3 -> s2 [0, 72] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s3 -> s3 [0, 65535] { R17781 += 1, R17736 += 1, R17737 += 1 };
  s3 -> s4 [73, 73] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s3 -> s5 [73, 73] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s3 -> s6 [73, 73] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s3 -> s7 [73, 73] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s3 -> s1 [74, 65535] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s3 -> s2 [74, 65535] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s6 -> s6 [0, 65535] { R17781 += 1, R17737 += 1, R17466 += 1, R17467 += 1 };
  s6 -> s7 [0, 65535] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s7 -> s8 [0, 65535] { R17781 += 1, R17737 += 1 };
  s7 -> s7 [0, 65535] { R17781 += 1, R17737 += 1, R17467 += 1, R17468 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R17781 += 1, R17737 += 1 };
  s8 -> s10 [0, 65535] { R17781 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R17781 += 1 };
  s11 -> s11 [0, 72] { R17781 += 1, R17737 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R17781 += 1 };
  s11 -> s8 [73, 73] { R17781 += 1, R17737 += 1 };
  s11 -> s12 [73, 73] { R17781 += 1, R17737 += 1 };
  s11 -> s11 [74, 65535] { R17781 += 1, R17737 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R17781 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s0 -> s2 [0, 72] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s0 -> s3 [0, 65535] { R17783 += 1, R17738 += 1, R17739 += 1 };
  s0 -> s0 [0, 65535] { R17782 += 1, R17783 += 1 };
  s0 -> s4 [73, 73] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s0 -> s5 [73, 73] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s0 -> s6 [73, 73] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s0 -> s7 [73, 73] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s0 -> s1 [74, 76] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s0 -> s2 [74, 65535] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s0 -> s8 [77, 77] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s0 -> s1 [81, 65535] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s1 -> s1 [0, 72] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s1 -> s5 [73, 73] { R17783 += 1, R17739 += 1 };
  s1 -> s7 [73, 73] { R17783 += 1, R17739 += 1 };
  s1 -> s1 [74, 76] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s1 -> s1 [74, 65535] { R17783 += 1, R17739 += 1 };
  s1 -> s8 [77, 77] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s1 -> s1 [81, 65535] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s2 -> s1 [0, 72] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s2 -> s2 [0, 72] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s2 -> s4 [73, 73] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s2 -> s5 [73, 73] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s2 -> s6 [73, 73] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s2 -> s7 [73, 73] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s2 -> s1 [74, 76] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s2 -> s2 [74, 65535] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s2 -> s8 [77, 77] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s2 -> s1 [81, 65535] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s3 -> s1 [0, 72] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s3 -> s2 [0, 72] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s3 -> s3 [0, 65535] { R17783 += 1, R17738 += 1, R17739 += 1 };
  s3 -> s4 [73, 73] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s3 -> s5 [73, 73] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s3 -> s6 [73, 73] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s3 -> s7 [73, 73] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s3 -> s1 [74, 76] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s3 -> s2 [74, 65535] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s3 -> s8 [77, 77] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s3 -> s1 [81, 65535] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s4 -> s5 [0, 76] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s4 -> s4 [0, 65535] { R17783 += 1, R17739 += 1, R17680 += 1, R17681 += 1 };
  s4 -> s11 [77, 77] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s4 -> s5 [81, 65535] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s5 -> s5 [0, 76] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s5 -> s5 [0, 65535] { R17783 += 1, R17739 += 1 };
  s5 -> s11 [77, 77] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s5 -> s5 [81, 65535] { R17783 += 1, R17739 += 1, R17681 += 1 };
  s8 -> s8 [0, 72] { R17783 += 1, R17739 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R17783 += 1 };
  s8 -> s10 [73, 73] { R17783 += 1, R17739 += 1 };
  s8 -> s11 [73, 73] { R17783 += 1, R17739 += 1 };
  s8 -> s8 [74, 65535] { R17783 += 1, R17739 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R17783 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R17783 += 1 };
  s11 -> s11 [0, 65535] { R17783 += 1, R17739 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R17783 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R17699 && R2 = R17783 && R20 - R17783 = -1 && R21 = R17783 && R22 - R17783 = -1 && R23 = R17783 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R16621 + -1*R16619 - R53 = 0 && R52 + R16620 + R16618 = 0 && R17698 = 0 && R17724 = 0 && R17725 = 0 && R17730 = 0 && R17731 = 0 && R17732 = 0 && R17733 = 0 && R17734 = 0 && R17735 = 0 && R17736 = 0 && R17737 = 0 && R17738 = 0 && R17739 = 0 && R17740 = 0 && R17741 = R17783 && R17742 = 0 && R17743 = R17783 && R17744 = 0 && R17745 = R17783 && R17746 = 0 && R17747 = R17783 && R17748 = 0 && R17749 = R17783 && R17750 = 0 && R17751 = R17783 && R17752 = 0 && R17753 = R17783 && R17754 = 0 && R17755 = R17783 && R17756 = 0 && R17757 = R17783 && R17758 = 0 && R17759 = R17783 && R17760 = 0 && R17761 = R17783 && R17762 = 0 && R17763 = R17783 && R17764 = 0 && R17765 = R17783 && R17766 = 0 && R17767 = R17783 && R17768 = 0 && R17769 = R17783 && R17770 = 0 && R17771 = R17783 && R17772 = 0 && R17773 = R17783 && R17774 = 0 && R17775 = R17783 && R17776 = 0 && R17777 = R17783 && R17778 = 0 && R17779 = R17783 && R17780 = 0 && R17781 = R17783 && R17782 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R16621 + -1*R16619 - R53 < 1 && -1 < R17699 && 0 < R17783 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R16621 + R16619 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R16621 + R16619 < 1))) && (R17684 != 0 || R17685 = R17699 || (R17 = 0 && R17699 = 0)) && (R17686 != 0 || R17687 = R17699 || (R17 = 0 && R17699 = 0)) && (R17688 != 0 || R17689 = R17699 || (R17 = 0 && R17699 = 0)) && (R17690 != 0 || R17691 = R17699 || (R17 = 0 && R17699 = 0)) && (R17692 != 0 || R17693 = R17699 || (R17 = 0 && R17699 = 0)) && (R17694 != 0 || R17695 = R17699 || (R17 = 0 && R17699 = 0)) && (R17696 != 0 || R17697 = R17699 || (R17 = 0 && R17699 = 0)) && (R17700 != 0 || R17699 = R17701 || (R17 = 0 && R17699 = 0)) && (R17702 != 0 || R17699 = R17703 || (R17 = 0 && R17699 = 0)) && (R18 = 0 || (R17722 = 0 && R17723 = 0)) && (R18 = 0 || (R17726 = 0 && R17727 = 0)) && (R18 = 0 || (R17728 = 0 && R17729 = 0)) && (R19 = 0 || (R17704 = 0 && R17705 = 0)) && (R19 = 0 || (R17706 = 0 && R17707 = 0)) && (R19 = 0 || (R17708 = 0 && R17709 = 0)) && (R19 = 0 || (R17710 = 0 && R17711 = 0)) && (R19 = 0 || (R17712 = 0 && R17713 = 0)) && (R19 = 0 || (R17714 = 0 && R17715 = 0)) && (R19 = 0 || (R17716 = 0 && R17717 = 0)) && (R19 = 0 || (R17718 = 0 && R17719 = 0)) && (R19 = 0 || (R17720 = 0 && R17721 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0)) && (R58 + R17471 + R17468 = 0 || (R56 + R17469 + R17466 = 0 && R57 + R17470 + R17467 = 0)) && (R58 + R17471 + R17468 = 0 || (R62 + R17682 + R17680 = 0 && R63 + R17683 + R17681 = 0)) && (R17684 = 0 || (R17 = 0 && R17699 = 0)) && (R17686 = 0 || (R17 = 0 && R17699 = 0)) && (R17688 = 0 || (R17 = 0 && R17699 = 0)) && (R17690 = 0 || (R17 = 0 && R17699 = 0)) && (R17692 = 0 || (R17 = 0 && R17699 = 0)) && (R17694 = 0 || (R17 = 0 && R17699 = 0)) && (R17696 = 0 || (R17 = 0 && R17699 = 0)) && (R17700 = 0 || (R17 = 0 && R17699 = 0)) && (R17702 = 0 || (R17 = 0 && R17699 = 0));
// End of Parikh automata intersection problem
