// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R6440, R6441, R6442, R6443, R6444, R6445, R6446, R6447, R6448, R6449, R6450, R6451, R6452, R6453, R6454, R6455, R6456, R6457, R6458, R6459, R6460, R6461, R6462, R6463, R6464, R6465, R6466, R6467, R6468, R6469, R6470, R6471, R6472, R6473, R6474, R6475, R6476, R6477, R6478, R6479, R6480, R6481, R6482, R6483, R6484, R6485, R6486, R6487, R6488, R6489, R6490, R6491, R6492, R6493, R6494, R6495, R6496, R6497, R6498, R6499, R6500, R6501, R6502, R6503, R6504, R6505, R6506, R6507, R6508, R6509, R6510, R6511, R6512, R6513, R6514, R6515, R6516, R6517, R6518, R6519, R6520, R6521, R6522, R6523, R6524, R6525, R6526, R6527, R6528, R6529, R6530, R6531, R6532, R6533, R6534, R6535, R6536, R6537, R6538, R6539, R6540, R6541, R6542, R6543, R6544, R6545, R6546, R6547, R6548, R6549, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6471 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R6470 += 1, R6471 += 1 };
  s1 -> s1 [0, 65535] { R6471 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R6473 += 1 };
  s0 -> s0 [0, 65535] { R6472 += 1, R6473 += 1 };
  s0 -> s2 [73, 73] { R6473 += 1 };
  s0 -> s3 [73, 73] { R6473 += 1 };
  s0 -> s1 [78, 65535] { R6473 += 1 };
  s1 -> s1 [0, 72] { R6473 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6473 += 1 };
  s1 -> s3 [73, 73] { R6473 += 1 };
  s1 -> s1 [78, 65535] { R6473 += 1 };
  s2 -> s2 [0, 73] { R6473 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R6473 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R6475 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R6474 += 1, R6475 += 1 };
  s0 -> s2 [73, 73] { R6475 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R6475 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R6475 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R6475 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6475 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R6475 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R6475 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6475 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R6477 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R6476 += 1, R6477 += 1 };
  s0 -> s2 [73, 73] { R6477 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R6477 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R6477 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R6477 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6477 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R6477 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R6477 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R6477 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R6479 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R6478 += 1, R6479 += 1 };
  s0 -> s2 [73, 73] { R6479 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R6479 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R6479 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R6479 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6479 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R6479 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R6479 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6479 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R6481 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6480 += 1, R6481 += 1 };
  s0 -> s2 [73, 73] { R6481 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R6481 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R6481 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R6481 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6481 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R6481 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R6481 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R6481 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R6483 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R6482 += 1, R6483 += 1 };
  s0 -> s2 [73, 73] { R6483 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R6483 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R6483 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R6483 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6483 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R6483 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R6483 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6483 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R6485 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R6484 += 1, R6485 += 1 };
  s0 -> s2 [73, 73] { R6485 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R6485 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R6485 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R6485 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6485 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R6485 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R6485 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6485 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R6487 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R6486 += 1, R6487 += 1 };
  s0 -> s2 [73, 73] { R6487 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R6487 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R6487 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R6487 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6487 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R6487 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R6487 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6487 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R6507 += 1 };
  s0 -> s0 [0, 65535] { R6506 += 1, R6507 += 1 };
  s0 -> s2 [73, 73] { R6507 += 1 };
  s0 -> s1 [74, 65535] { R6507 += 1 };
  s1 -> s1 [0, 72] { R6507 += 1 };
  s1 -> s2 [73, 73] { R6507 += 1 };
  s1 -> s1 [74, 65535] { R6507 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6507 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6509 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6508 += 1, R6509 += 1 };
  s1 -> s1 [0, 65535] { R6509 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R6511 += 1 };
  s0 -> s0 [0, 65535] { R6510 += 1, R6511 += 1 };
  s0 -> s2 [0, 65535] { R6511 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R6511 += 1 };
  s0 -> s1 [74, 65535] { R6511 += 1 };
  s1 -> s1 [0, 72] { R6511 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R6511 += 1 };
  s1 -> s1 [74, 65535] { R6511 += 1 };
  s2 -> s1 [0, 72] { R6511 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6511 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R6511 += 1 };
  s2 -> s1 [74, 65535] { R6511 += 1 };
  s3 -> s3 [0, 65535] { R6511 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R6513 += 1, R6451 += 1 };
  s0 -> s0 [0, 65535] { R6512 += 1, R6513 += 1 };
  s0 -> s2 [0, 65535] { R6513 += 1, R6450 += 1, R6451 += 1 };
  s0 -> s1 [74, 65535] { R6513 += 1, R6451 += 1 };
  s1 -> s1 [0, 72] { R6513 += 1, R6451 += 1 };
  s1 -> s1 [0, 65535] { R6513 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R6513 += 1, R6451 += 1 };
  s2 -> s1 [0, 72] { R6513 += 1, R6451 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6513 += 1, R6450 += 1, R6451 += 1 };
  s2 -> s1 [74, 65535] { R6513 += 1, R6451 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6515 += 1, R6453 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R6515 += 1, R6452 += 1, R6453 += 1 };
  s0 -> s0 [0, 65535] { R6514 += 1, R6515 += 1 };
  s1 -> s1 [0, 65535] { R6515 += 1, R6453 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R6515 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6515 += 1, R6453 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R6515 += 1, R6452 += 1, R6453 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6515 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R6517 += 1, R6455 += 1 };
  s0 -> s2 [0, 65535] { R6517 += 1, R6454 += 1, R6455 += 1 };
  s0 -> s0 [0, 65535] { R6516 += 1, R6517 += 1 };
  s0 -> s1 [77, 65535] { R6517 += 1, R6455 += 1 };
  s1 -> s1 [0, 73] { R6517 += 1, R6455 += 1 };
  s1 -> s1 [0, 65535] { R6517 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R6517 += 1, R6455 += 1 };
  s2 -> s1 [0, 73] { R6517 += 1, R6455 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6517 += 1, R6454 += 1, R6455 += 1 };
  s2 -> s1 [77, 65535] { R6517 += 1, R6455 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6519 += 1, R6457 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R6519 += 1, R6456 += 1, R6457 += 1 };
  s0 -> s0 [0, 65535] { R6518 += 1, R6519 += 1 };
  s1 -> s1 [0, 65535] { R6519 += 1, R6457 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6519 += 1 };
  s2 -> s1 [0, 65535] { R6519 += 1, R6457 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R6519 += 1, R6456 += 1, R6457 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6519 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R6521 += 1, R6459 += 1 };
  s0 -> s0 [0, 65535] { R6520 += 1, R6521 += 1 };
  s0 -> s2 [0, 65535] { R6521 += 1, R6459 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R6521 += 1, R6458 += 1, R6459 += 1 };
  s0 -> s1 [78, 65535] { R6521 += 1, R6459 += 1 };
  s1 -> s1 [0, 76] { R6521 += 1, R6459 += 1 };
  s1 -> s1 [0, 65535] { R6521 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R6521 += 1, R6459 += 1 };
  s2 -> s1 [0, 76] { R6521 += 1, R6459 += 1 };
  s2 -> s2 [0, 65535] { R6521 += 1, R6459 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6521 += 1 };
  s2 -> s1 [78, 65535] { R6521 += 1, R6459 += 1 };
  s3 -> s1 [0, 76] { R6521 += 1, R6459 += 1 };
  s3 -> s2 [0, 65535] { R6521 += 1, R6459 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R6521 += 1, R6458 += 1, R6459 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R6521 += 1, R6459 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6521 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R6523 += 1, R6461 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R6523 += 1, R6461 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R6523 += 1, R6460 += 1, R6461 += 1 };
  s0 -> s0 [0, 65535] { R6522 += 1, R6523 += 1 };
  s0 -> s1 [78, 65535] { R6523 += 1, R6461 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R6523 += 1, R6461 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R6523 += 1, R6461 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6523 += 1 };
  s1 -> s1 [78, 65535] { R6523 += 1, R6461 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R6523 += 1, R6461 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R6523 += 1, R6461 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6523 += 1 };
  s2 -> s1 [78, 65535] { R6523 += 1, R6461 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R6523 += 1, R6461 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R6523 += 1, R6461 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6523 += 1, R6460 += 1, R6461 += 1 };
  s3 -> s1 [78, 65535] { R6523 += 1, R6461 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6523 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6525 += 1, R6463 += 1 };
  s0 -> s2 [0, 65535] { R6525 += 1, R6463 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s3 [0, 65535] { R6525 += 1, R6462 += 1, R6463 += 1 };
  s0 -> s0 [0, 65535] { R6524 += 1, R6525 += 1 };
  s1 -> s1 [0, 65535] { R6525 += 1, R6463 += 1 };
  s1 -> s5 [0, 65535] { R6525 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R6525 += 1, R6463 += 1 };
  s2 -> s5 [0, 65535] { R6525 += 1 };
  s2 -> s2 [0, 65535] { R6525 += 1, R6463 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6525 += 1, R6463 += 1 };
  s3 -> s2 [0, 65535] { R6525 += 1, R6463 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6525 += 1, R6462 += 1, R6463 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6525 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s0 -> s2 [0, 65535] { R6527 += 1, R6465 += 1, R6438 += 1, R6439 += 1 };
  s0 -> s0 [0, 65535] { R6526 += 1, R6527 += 1 };
  s0 -> s3 [0, 65535] { R6527 += 1, R6464 += 1, R6465 += 1 };
  s0 -> s4 [80, 80] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s0 -> s1 [81, 65535] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s1 -> s1 [0, 77] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s1 -> s4 [80, 80] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s1 -> s1 [81, 65535] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s2 -> s1 [0, 77] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R6527 += 1, R6465 += 1, R6438 += 1, R6439 += 1 };
  s2 -> s4 [80, 80] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s2 -> s1 [81, 65535] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s3 -> s1 [0, 77] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s3 -> s2 [0, 65535] { R6527 += 1, R6465 += 1, R6438 += 1, R6439 += 1 };
  s3 -> s3 [0, 65535] { R6527 += 1, R6464 += 1, R6465 += 1 };
  s3 -> s4 [80, 80] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s3 -> s1 [81, 65535] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s4 -> s4 [0, 77] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6527 += 1 };
  s4 -> s4 [0, 65535] { R6527 += 1, R6465 += 1 };
  s4 -> s4 [80, 65535] { R6527 += 1, R6465 += 1, R6439 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6527 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R6528 += 1, R6529 += 1 };
  s0 -> s1 [0, 65535] { R6529 += 1, R6467 += 1, R6443 += 1, R6444 += 1 };
  s0 -> s2 [0, 65535] { R6529 += 1, R6466 += 1, R6467 += 1 };
  s0 -> s3 [0, 65535] { R6529 += 1, R6467 += 1, R6444 += 1, R6445 += 1 };
  s1 -> s1 [0, 65535] { R6529 += 1, R6467 += 1, R6443 += 1, R6444 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6529 += 1 };
  s1 -> s3 [0, 65535] { R6529 += 1, R6467 += 1, R6444 += 1, R6445 += 1 };
  s2 -> s1 [0, 65535] { R6529 += 1, R6467 += 1, R6443 += 1, R6444 += 1 };
  s2 -> s2 [0, 65535] { R6529 += 1, R6466 += 1, R6467 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6529 += 1, R6467 += 1, R6444 += 1, R6445 += 1 };
  s3 -> s4 [0, 65535] { R6529 += 1, R6467 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6529 += 1 };
  s3 -> s3 [0, 65535] { R6529 += 1, R6467 += 1, R6444 += 1, R6445 += 1 };
  s4 -> s4 [0, 65535] { R6529 += 1, R6467 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6529 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6529 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s0 -> s2 [0, 65535] { R6531 += 1, R6468 += 1, R6469 += 1 };
  s0 -> s3 [0, 65535] { R6531 += 1, R6469 += 1, R6448 += 1, R6449 += 1 };
  s0 -> s0 [0, 65535] { R6530 += 1, R6531 += 1 };
  s0 -> s4 [77, 77] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s0 -> s5 [77, 77] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s0 -> s1 [81, 65535] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s1 -> s1 [0, 76] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6531 += 1, R6469 += 1 };
  s1 -> s7 [0, 65535] { R6531 += 1 };
  s1 -> s4 [77, 77] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s1 -> s5 [77, 77] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s1 -> s1 [81, 65535] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s2 -> s1 [0, 76] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s2 -> s2 [0, 65535] { R6531 += 1, R6468 += 1, R6469 += 1 };
  s2 -> s3 [0, 65535] { R6531 += 1, R6469 += 1, R6448 += 1, R6449 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [77, 77] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s2 -> s5 [77, 77] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s2 -> s1 [81, 65535] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s3 -> s1 [0, 76] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s3 -> s3 [0, 65535] { R6531 += 1, R6469 += 1, R6448 += 1, R6449 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R6531 += 1 };
  s3 -> s4 [77, 77] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s3 -> s5 [77, 77] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s3 -> s1 [81, 65535] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s4 -> s4 [0, 77] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s4 -> s4 [0, 65535] { R6531 += 1, R6469 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6531 += 1 };
  s4 -> s4 [81, 65535] { R6531 += 1, R6469 += 1, R6449 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6531 += 1, R6469 += 1 };
  s5 -> s7 [0, 65535] { R6531 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6531 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6533 += 1, R6489 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R6533 += 1, R6488 += 1, R6489 += 1 };
  s0 -> s0 [0, 65535] { R6532 += 1, R6533 += 1 };
  s1 -> s1 [0, 65535] { R6533 += 1, R6489 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6533 += 1 };
  s2 -> s1 [0, 65535] { R6533 += 1, R6489 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6533 += 1, R6488 += 1, R6489 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6533 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R6535 += 1, R6491 += 1 };
  s0 -> s2 [0, 65535] { R6535 += 1, R6490 += 1, R6491 += 1 };
  s0 -> s0 [0, 65535] { R6534 += 1, R6535 += 1 };
  s0 -> s3 [73, 73] { R6535 += 1, R6491 += 1 };
  s0 -> s4 [73, 73] { R6535 += 1, R6491 += 1 };
  s0 -> s5 [77, 77] { R6535 += 1, R6491 += 1 };
  s0 -> s1 [78, 65535] { R6535 += 1, R6491 += 1 };
  s1 -> s1 [0, 72] { R6535 += 1, R6491 += 1 };
  s1 -> s3 [73, 73] { R6535 += 1, R6491 += 1 };
  s1 -> s4 [73, 73] { R6535 += 1, R6491 += 1 };
  s1 -> s5 [77, 77] { R6535 += 1, R6491 += 1 };
  s1 -> s1 [78, 65535] { R6535 += 1, R6491 += 1 };
  s2 -> s1 [0, 72] { R6535 += 1, R6491 += 1 };
  s2 -> s2 [0, 65535] { R6535 += 1, R6490 += 1, R6491 += 1 };
  s2 -> s3 [73, 73] { R6535 += 1, R6491 += 1 };
  s2 -> s4 [73, 73] { R6535 += 1, R6491 += 1 };
  s2 -> s5 [77, 77] { R6535 += 1, R6491 += 1 };
  s2 -> s1 [78, 65535] { R6535 += 1, R6491 += 1 };
  s3 -> s3 [0, 73] { R6535 += 1, R6491 += 1 };
  s3 -> s8 [77, 77] { R6535 += 1, R6491 += 1 };
  s3 -> s3 [78, 65535] { R6535 += 1, R6491 += 1 };
  s5 -> s5 [0, 72] { R6535 += 1, R6491 += 1 };
  s5 -> s5 [0, 65535] { R6535 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R6535 += 1, R6491 += 1 };
  s5 -> s8 [73, 73] { R6535 += 1, R6491 += 1 };
  s5 -> s5 [77, 65535] { R6535 += 1, R6491 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6535 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R6535 += 1, R6491 += 1 };
  s8 -> s8 [0, 65535] { R6535 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [77, 65535] { R6535 += 1, R6491 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R6537 += 1, R6493 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R6537 += 1, R6492 += 1, R6493 += 1 };
  s0 -> s0 [0, 65535] { R6536 += 1, R6537 += 1 };
  s0 -> s3 [73, 73] { R6537 += 1, R6493 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R6537 += 1, R6493 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R6537 += 1, R6493 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R6537 += 1, R6493 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6537 += 1 };
  s1 -> s3 [73, 73] { R6537 += 1, R6493 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R6537 += 1, R6493 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R6537 += 1, R6493 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R6537 += 1, R6493 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R6537 += 1, R6492 += 1, R6493 += 1 };
  s2 -> s3 [73, 73] { R6537 += 1, R6493 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R6537 += 1, R6493 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R6537 += 1, R6493 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R6537 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6537 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6537 += 1, R6493 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R6537 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R6539 += 1, R6495 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R6539 += 1, R6494 += 1, R6495 += 1 };
  s0 -> s0 [0, 65535] { R6538 += 1, R6539 += 1 };
  s0 -> s3 [73, 73] { R6539 += 1, R6495 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R6539 += 1, R6495 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R6539 += 1, R6495 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R6539 += 1, R6495 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R6539 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R6539 += 1, R6495 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R6539 += 1, R6495 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R6539 += 1, R6495 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R6539 += 1, R6495 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R6539 += 1, R6494 += 1, R6495 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R6539 += 1, R6495 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R6539 += 1, R6495 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R6539 += 1, R6495 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R6539 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6539 += 1, R6495 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R6539 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6539 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R6541 += 1, R6496 += 1, R6497 += 1 };
  s0 -> s0 [0, 65535] { R6540 += 1, R6541 += 1 };
  s0 -> s3 [73, 73] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R6541 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R6541 += 1, R6496 += 1, R6497 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6541 += 1, R6497 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R6541 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6541 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6541 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 72] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s0 [0, 65535] { R6542 += 1, R6543 += 1 };
  s0 -> s3 [0, 65535] { R6543 += 1, R6498 += 1, R6499 += 1 };
  s0 -> s4 [73, 73] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [74, 65535] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 72] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 65535] { R6543 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [73, 73] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 72] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [73, 73] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s5 [73, 73] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [73, 73] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [73, 73] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [74, 65535] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 72] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 72] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R6543 += 1, R6498 += 1, R6499 += 1 };
  s3 -> s4 [73, 73] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [74, 65535] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s5 [0, 65535] { R6543 += 1, R6499 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s7 [0, 65535] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6543 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6543 += 1, R6499 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s9 [0, 65535] { R6543 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6543 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [0, 65535] { R6545 += 1, R6500 += 1, R6501 += 1 };
  s0 -> s0 [0, 65535] { R6544 += 1, R6545 += 1 };
  s0 -> s3 [73, 73] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s4 [73, 73] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [74, 65535] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 72] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6545 += 1 };
  s1 -> s3 [73, 73] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s4 [73, 73] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [74, 65535] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [0, 72] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s2 [0, 65535] { R6545 += 1, R6500 += 1, R6501 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [73, 73] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [74, 65535] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s6 [0, 65535] { R6545 += 1 };
  s3 -> s3 [0, 65535] { R6545 += 1, R6501 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6545 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6545 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s2 [0, 65535] { R6547 += 1, R6502 += 1, R6503 += 1 };
  s0 -> s0 [0, 65535] { R6546 += 1, R6547 += 1 };
  s0 -> s3 [73, 73] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s4 [73, 73] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s1 [74, 65535] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [0, 72] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [0, 65535] { R6547 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s4 [73, 73] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [74, 65535] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s1 [0, 72] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s2 [0, 65535] { R6547 += 1, R6502 += 1, R6503 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s4 [73, 73] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s1 [74, 65535] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s3 -> s6 [0, 65535] { R6547 += 1 };
  s3 -> s3 [0, 65535] { R6547 += 1, R6503 += 1, R6440 += 1, R6441 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6547 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6547 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s0 -> s2 [0, 65535] { R6549 += 1, R6504 += 1, R6505 += 1 };
  s0 -> s0 [0, 65535] { R6548 += 1, R6549 += 1 };
  s0 -> s3 [73, 73] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s0 -> s4 [73, 73] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s0 -> s1 [74, 65535] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s1 -> s1 [0, 72] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s1 -> s1 [0, 65535] { R6549 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s1 -> s4 [73, 73] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s1 -> s1 [74, 65535] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s2 -> s1 [0, 72] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s2 -> s2 [0, 65535] { R6549 += 1, R6504 += 1, R6505 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s2 -> s4 [73, 73] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s2 -> s1 [74, 65535] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s3 -> s3 [0, 65535] { R6549 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6549 += 1, R6505 += 1, R6446 += 1, R6447 += 1 };
  s4 -> s5 [0, 65535] { R6549 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6549 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R6465 && R2 = R6549 && R20 - R6549 = -1 && R21 = R6549 && R22 - R6549 = -1 && R23 = R6549 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R6464 = 0 && R6490 = 0 && R6491 = 0 && R6498 = 0 && R6499 = 0 && R6506 = 0 && R6507 = R6549 && R6508 = 0 && R6509 = R6549 && R6510 = 0 && R6511 = R6549 && R6512 = 0 && R6513 = R6549 && R6514 = 0 && R6515 = R6549 && R6516 = 0 && R6517 = R6549 && R6518 = 0 && R6519 = R6549 && R6520 = 0 && R6521 = R6549 && R6522 = 0 && R6523 = R6549 && R6524 = 0 && R6525 = R6549 && R6526 = 0 && R6527 = R6549 && R6528 = 0 && R6529 = R6549 && R6530 = 0 && R6531 = R6549 && R6532 = 0 && R6533 = R6549 && R6534 = 0 && R6535 = R6549 && R6536 = 0 && R6537 = R6549 && R6538 = 0 && R6539 = R6549 && R6540 = 0 && R6541 = R6549 && R6542 = 0 && R6543 = R6549 && R6544 = 0 && R6545 = R6549 && R6546 = 0 && R6547 = R6549 && R6548 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R6465 && 0 < R6549 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R6450 != 0 || R6451 = R6465 || (R17 = 0 && R6465 = 0)) && (R6452 != 0 || R6453 = R6465 || (R17 = 0 && R6465 = 0)) && (R6454 != 0 || R6455 = R6465 || (R17 = 0 && R6465 = 0)) && (R6456 != 0 || R6457 = R6465 || (R17 = 0 && R6465 = 0)) && (R6458 != 0 || R6459 = R6465 || (R17 = 0 && R6465 = 0)) && (R6460 != 0 || R6461 = R6465 || (R17 = 0 && R6465 = 0)) && (R6462 != 0 || R6463 = R6465 || (R17 = 0 && R6465 = 0)) && (R6466 != 0 || R6465 = R6467 || (R17 = 0 && R6465 = 0)) && (R6468 != 0 || R6465 = R6469 || (R17 = 0 && R6465 = 0)) && (R18 = 0 || (R6488 = 0 && R6489 = 0)) && (R18 = 0 || (R6492 = 0 && R6493 = 0)) && (R18 = 0 || (R6494 = 0 && R6495 = 0)) && (R18 = 0 || (R6496 = 0 && R6497 = 0)) && (R18 = 0 || (R6500 = 0 && R6501 = 0)) && (R18 = 0 || (R6502 = 0 && R6503 = 0)) && (R18 = 0 || (R6504 = 0 && R6505 = 0)) && (R19 = 0 || (R6470 = 0 && R6471 = 0)) && (R19 = 0 || (R6472 = 0 && R6473 = 0)) && (R19 = 0 || (R6474 = 0 && R6475 = 0)) && (R19 = 0 || (R6476 = 0 && R6477 = 0)) && (R19 = 0 || (R6478 = 0 && R6479 = 0)) && (R19 = 0 || (R6480 = 0 && R6481 = 0)) && (R19 = 0 || (R6482 = 0 && R6483 = 0)) && (R19 = 0 || (R6484 = 0 && R6485 = 0)) && (R19 = 0 || (R6486 = 0 && R6487 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R6445 + R6442 = 0 || (R56 + R6443 + R6440 = 0 && R57 + R6444 + R6441 = 0)) && (R58 + R6445 + R6442 = 0 || (R62 + R6448 + R6446 = 0 && R63 + R6449 + R6447 = 0)) && (R6450 = 0 || (R17 = 0 && R6465 = 0)) && (R6452 = 0 || (R17 = 0 && R6465 = 0)) && (R6454 = 0 || (R17 = 0 && R6465 = 0)) && (R6456 = 0 || (R17 = 0 && R6465 = 0)) && (R6458 = 0 || (R17 = 0 && R6465 = 0)) && (R6460 = 0 || (R17 = 0 && R6465 = 0)) && (R6462 = 0 || (R17 = 0 && R6465 = 0)) && (R6466 = 0 || (R17 = 0 && R6465 = 0)) && (R6468 = 0 || (R17 = 0 && R6465 = 0));
// End of Parikh automata intersection problem
