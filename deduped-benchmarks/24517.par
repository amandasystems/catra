// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R7716, R7717, R7718, R7719, R7720, R7721, R7930, R7931, R7932, R7933, R7934, R7935, R7936, R7937, R7938, R7939, R7940, R7941, R7942, R7943, R7944, R7945, R7946, R7947, R7948, R7949, R7950, R7951, R7952, R7953, R7954, R7955, R7956, R7957, R7958, R7959, R7960, R7961, R7962, R7963, R7964, R7965, R7966, R7967, R7968, R7969, R7970, R7971, R7972, R7973, R7974, R7975, R7976, R7977, R7978, R7979, R7980, R7981, R7982, R7983, R7984, R7985, R7986, R7987, R7988, R7989, R7990, R7991, R7992, R7993, R7994, R7995, R7996, R7997, R7998, R7999, R8, R8000, R8001, R8002, R8003, R8004, R8005, R8006, R8007, R8008, R8009, R8010, R8011, R8012, R8013, R8014, R8015, R8016, R8017, R8018, R8019, R8020, R8021, R8022, R8023, R8024, R8025, R8026, R8027, R8028, R8029, R8030, R8031, R8032, R8033;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R7954 += 1, R7955 += 1 };
  s0 -> s1 [0, 65535] { R7955 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R7955 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R7957 += 1 };
  s0 -> s0 [0, 65535] { R7956 += 1, R7957 += 1 };
  s0 -> s2 [73, 73] { R7957 += 1 };
  s0 -> s3 [73, 73] { R7957 += 1 };
  s0 -> s1 [78, 65535] { R7957 += 1 };
  s1 -> s1 [0, 72] { R7957 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7957 += 1 };
  s1 -> s3 [73, 73] { R7957 += 1 };
  s1 -> s1 [78, 65535] { R7957 += 1 };
  s2 -> s2 [0, 73] { R7957 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R7957 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R7959 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7958 += 1, R7959 += 1 };
  s0 -> s2 [73, 73] { R7959 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R7959 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R7959 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R7959 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7959 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R7959 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R7959 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7959 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R7961 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7960 += 1, R7961 += 1 };
  s0 -> s2 [73, 73] { R7961 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R7961 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R7961 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R7961 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7961 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R7961 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R7961 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7961 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R7963 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7962 += 1, R7963 += 1 };
  s0 -> s2 [73, 73] { R7963 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R7963 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R7963 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R7963 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7963 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R7963 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R7963 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R7963 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R7965 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7964 += 1, R7965 += 1 };
  s0 -> s2 [73, 73] { R7965 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R7965 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R7965 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R7965 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7965 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R7965 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R7965 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7965 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R7967 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7966 += 1, R7967 += 1 };
  s0 -> s2 [73, 73] { R7967 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R7967 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R7967 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R7967 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7967 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R7967 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R7967 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7967 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R7969 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7968 += 1, R7969 += 1 };
  s0 -> s2 [73, 73] { R7969 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R7969 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R7969 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R7969 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7969 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R7969 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R7969 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7969 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R7971 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7970 += 1, R7971 += 1 };
  s0 -> s2 [73, 73] { R7971 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R7971 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R7971 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R7971 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7971 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R7971 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R7971 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7971 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R7991 += 1 };
  s0 -> s0 [0, 65535] { R7990 += 1, R7991 += 1 };
  s0 -> s2 [73, 73] { R7991 += 1 };
  s0 -> s1 [74, 65535] { R7991 += 1 };
  s1 -> s1 [0, 72] { R7991 += 1 };
  s1 -> s2 [73, 73] { R7991 += 1 };
  s1 -> s1 [74, 65535] { R7991 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7991 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7992 += 1, R7993 += 1 };
  s0 -> s1 [0, 65535] { R7993 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7993 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R7995 += 1 };
  s0 -> s2 [0, 65535] { R7995 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R7994 += 1, R7995 += 1 };
  s0 -> s3 [73, 73] { R7995 += 1 };
  s0 -> s1 [74, 65535] { R7995 += 1 };
  s1 -> s1 [0, 72] { R7995 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R7995 += 1 };
  s1 -> s1 [74, 65535] { R7995 += 1 };
  s2 -> s1 [0, 72] { R7995 += 1 };
  s2 -> s2 [0, 65535] { R7995 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R7995 += 1 };
  s2 -> s1 [74, 65535] { R7995 += 1 };
  s3 -> s3 [0, 65535] { R7995 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R7997 += 1, R7935 += 1 };
  s0 -> s2 [0, 65535] { R7997 += 1, R7934 += 1, R7935 += 1 };
  s0 -> s0 [0, 65535] { R7996 += 1, R7997 += 1 };
  s0 -> s1 [74, 65535] { R7997 += 1, R7935 += 1 };
  s1 -> s1 [0, 72] { R7997 += 1, R7935 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7997 += 1 };
  s1 -> s1 [74, 65535] { R7997 += 1, R7935 += 1 };
  s2 -> s1 [0, 72] { R7997 += 1, R7935 += 1 };
  s2 -> s2 [0, 65535] { R7997 += 1, R7934 += 1, R7935 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R7997 += 1, R7935 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R7998 += 1, R7999 += 1 };
  s0 -> s1 [0, 65535] { R7999 += 1, R7937 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R7999 += 1, R7936 += 1, R7937 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7999 += 1 };
  s1 -> s1 [0, 65535] { R7999 += 1, R7937 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7999 += 1, R7937 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R7999 += 1, R7936 += 1, R7937 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7999 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R8001 += 1, R7939 += 1 };
  s0 -> s2 [0, 65535] { R8001 += 1, R7938 += 1, R7939 += 1 };
  s0 -> s0 [0, 65535] { R8000 += 1, R8001 += 1 };
  s0 -> s1 [77, 65535] { R8001 += 1, R7939 += 1 };
  s1 -> s1 [0, 73] { R8001 += 1, R7939 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8001 += 1 };
  s1 -> s1 [77, 65535] { R8001 += 1, R7939 += 1 };
  s2 -> s1 [0, 73] { R8001 += 1, R7939 += 1 };
  s2 -> s2 [0, 65535] { R8001 += 1, R7938 += 1, R7939 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R8001 += 1, R7939 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8002 += 1, R8003 += 1 };
  s0 -> s1 [0, 65535] { R8003 += 1, R7940 += 1, R7941 += 1 };
  s0 -> s2 [0, 65535] { R8003 += 1, R7941 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8003 += 1, R7940 += 1, R7941 += 1 };
  s1 -> s2 [0, 65535] { R8003 += 1, R7941 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8003 += 1, R7941 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R8003 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8003 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R8005 += 1, R7943 += 1 };
  s0 -> s0 [0, 65535] { R8004 += 1, R8005 += 1 };
  s0 -> s2 [0, 65535] { R8005 += 1, R7942 += 1, R7943 += 1 };
  s0 -> s3 [0, 65535] { R8005 += 1, R7943 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R8005 += 1, R7943 += 1 };
  s1 -> s1 [0, 76] { R8005 += 1, R7943 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8005 += 1 };
  s1 -> s1 [78, 65535] { R8005 += 1, R7943 += 1 };
  s2 -> s1 [0, 76] { R8005 += 1, R7943 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8005 += 1, R7942 += 1, R7943 += 1 };
  s2 -> s3 [0, 65535] { R8005 += 1, R7943 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R8005 += 1, R7943 += 1 };
  s3 -> s1 [0, 76] { R8005 += 1, R7943 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8005 += 1 };
  s3 -> s3 [0, 65535] { R8005 += 1, R7943 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R8005 += 1, R7943 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8005 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R8007 += 1, R7945 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8007 += 1, R7945 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R8006 += 1, R8007 += 1 };
  s0 -> s3 [0, 65535] { R8007 += 1, R7944 += 1, R7945 += 1 };
  s0 -> s1 [78, 65535] { R8007 += 1, R7945 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R8007 += 1, R7945 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R8007 += 1, R7945 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8007 += 1 };
  s1 -> s1 [78, 65535] { R8007 += 1, R7945 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R8007 += 1, R7945 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R8007 += 1, R7945 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8007 += 1 };
  s2 -> s1 [78, 65535] { R8007 += 1, R7945 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R8007 += 1, R7945 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R8007 += 1, R7945 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8007 += 1, R7944 += 1, R7945 += 1 };
  s3 -> s1 [78, 65535] { R8007 += 1, R7945 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8007 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8009 += 1, R7946 += 1, R7947 += 1 };
  s0 -> s2 [0, 65535] { R8009 += 1, R7947 += 1 };
  s0 -> s0 [0, 65535] { R8008 += 1, R8009 += 1 };
  s1 -> s1 [0, 65535] { R8009 += 1, R7946 += 1, R7947 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8009 += 1, R7947 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8009 += 1 };
  s2 -> s2 [0, 65535] { R8009 += 1, R7947 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8009 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R8011 += 1, R7949 += 1, R7715 += 1 };
  s0 -> s2 [0, 65535] { R8011 += 1, R7948 += 1, R7949 += 1 };
  s0 -> s0 [0, 65535] { R8010 += 1, R8011 += 1 };
  s0 -> s1 [0, 65535] { R8011 += 1, R7949 += 1 };
  s0 -> s1 [80, 65535] { R8011 += 1, R7949 += 1, R7715 += 1 };
  s1 -> s1 [0, 77] { R8011 += 1, R7949 += 1, R7715 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8011 += 1, R7949 += 1 };
  s1 -> s4 [0, 65535] { R8011 += 1 };
  s1 -> s1 [80, 65535] { R8011 += 1, R7949 += 1, R7715 += 1 };
  s2 -> s1 [0, 77] { R8011 += 1, R7949 += 1, R7715 += 1 };
  s2 -> s2 [0, 65535] { R8011 += 1, R7948 += 1, R7949 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8011 += 1, R7949 += 1 };
  s2 -> s1 [80, 65535] { R8011 += 1, R7949 += 1, R7715 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8011 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8013 += 1, R7950 += 1, R7951 += 1 };
  s0 -> s2 [0, 65535] { R8013 += 1, R7951 += 1, R7720 += 1, R7721 += 1 };
  s0 -> s3 [0, 65535] { R8013 += 1, R7951 += 1, R7719 += 1, R7720 += 1 };
  s0 -> s0 [0, 65535] { R8012 += 1, R8013 += 1 };
  s1 -> s1 [0, 65535] { R8013 += 1, R7950 += 1, R7951 += 1 };
  s1 -> s2 [0, 65535] { R8013 += 1, R7951 += 1, R7720 += 1, R7721 += 1 };
  s1 -> s3 [0, 65535] { R8013 += 1, R7951 += 1, R7719 += 1, R7720 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8013 += 1, R7951 += 1, R7720 += 1, R7721 += 1 };
  s2 -> s4 [0, 65535] { R8013 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8013 += 1, R7951 += 1 };
  s3 -> s2 [0, 65535] { R8013 += 1, R7951 += 1, R7720 += 1, R7721 += 1 };
  s3 -> s3 [0, 65535] { R8013 += 1, R7951 += 1, R7719 += 1, R7720 += 1 };
  s3 -> s4 [0, 65535] { R8013 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8013 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8013 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8013 += 1, R7951 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8015 += 1, R7952 += 1, R7953 += 1 };
  s0 -> s2 [0, 65535] { R8015 += 1, R7953 += 1 };
  s0 -> s0 [0, 65535] { R8014 += 1, R8015 += 1 };
  s1 -> s1 [0, 65535] { R8015 += 1, R7952 += 1, R7953 += 1 };
  s1 -> s2 [0, 65535] { R8015 += 1, R7953 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8015 += 1 };
  s2 -> s2 [0, 65535] { R8015 += 1, R7953 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8015 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8017 += 1, R7972 += 1, R7973 += 1 };
  s0 -> s0 [0, 65535] { R8016 += 1, R8017 += 1 };
  s0 -> s2 [0, 65535] { R8017 += 1, R7973 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R8017 += 1, R7972 += 1, R7973 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8017 += 1, R7973 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8017 += 1 };
  s2 -> s2 [0, 65535] { R8017 += 1, R7973 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8017 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R8019 += 1, R7975 += 1 };
  s0 -> s0 [0, 65535] { R8018 += 1, R8019 += 1 };
  s0 -> s2 [0, 65535] { R8019 += 1, R7974 += 1, R7975 += 1 };
  s0 -> s3 [73, 73] { R8019 += 1, R7975 += 1 };
  s0 -> s4 [73, 73] { R8019 += 1, R7975 += 1 };
  s0 -> s5 [77, 77] { R8019 += 1, R7975 += 1 };
  s0 -> s1 [78, 65535] { R8019 += 1, R7975 += 1 };
  s1 -> s1 [0, 72] { R8019 += 1, R7975 += 1 };
  s1 -> s3 [73, 73] { R8019 += 1, R7975 += 1 };
  s1 -> s4 [73, 73] { R8019 += 1, R7975 += 1 };
  s1 -> s5 [77, 77] { R8019 += 1, R7975 += 1 };
  s1 -> s1 [78, 65535] { R8019 += 1, R7975 += 1 };
  s2 -> s1 [0, 72] { R8019 += 1, R7975 += 1 };
  s2 -> s2 [0, 65535] { R8019 += 1, R7974 += 1, R7975 += 1 };
  s2 -> s3 [73, 73] { R8019 += 1, R7975 += 1 };
  s2 -> s4 [73, 73] { R8019 += 1, R7975 += 1 };
  s2 -> s5 [77, 77] { R8019 += 1, R7975 += 1 };
  s2 -> s1 [78, 65535] { R8019 += 1, R7975 += 1 };
  s4 -> s4 [0, 73] { R8019 += 1, R7975 += 1 };
  s4 -> s8 [77, 77] { R8019 += 1, R7975 += 1 };
  s4 -> s4 [78, 65535] { R8019 += 1, R7975 += 1 };
  s5 -> s5 [0, 72] { R8019 += 1, R7975 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8019 += 1 };
  s5 -> s7 [73, 73] { R8019 += 1, R7975 += 1 };
  s5 -> s8 [73, 73] { R8019 += 1, R7975 += 1 };
  s5 -> s5 [77, 65535] { R8019 += 1, R7975 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8019 += 1 };
  s8 -> s8 [0, 73] { R8019 += 1, R7975 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8019 += 1 };
  s8 -> s8 [77, 65535] { R8019 += 1, R7975 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R8021 += 1, R7977 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8020 += 1, R8021 += 1 };
  s0 -> s2 [0, 65535] { R8021 += 1, R7976 += 1, R7977 += 1 };
  s0 -> s3 [73, 73] { R8021 += 1, R7977 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R8021 += 1, R7977 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R8021 += 1, R7977 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R8021 += 1, R7977 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8021 += 1 };
  s1 -> s3 [73, 73] { R8021 += 1, R7977 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R8021 += 1, R7977 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R8021 += 1, R7977 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R8021 += 1, R7977 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8021 += 1, R7976 += 1, R7977 += 1 };
  s2 -> s3 [73, 73] { R8021 += 1, R7977 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R8021 += 1, R7977 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R8021 += 1, R7977 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8021 += 1, R7977 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R8021 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8021 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8021 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R8023 += 1, R7979 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R8023 += 1, R7978 += 1, R7979 += 1 };
  s0 -> s0 [0, 65535] { R8022 += 1, R8023 += 1 };
  s0 -> s3 [73, 73] { R8023 += 1, R7979 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R8023 += 1, R7979 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R8023 += 1, R7979 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R8023 += 1, R7979 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8023 += 1 };
  s1 -> s3 [73, 73] { R8023 += 1, R7979 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R8023 += 1, R7979 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R8023 += 1, R7979 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R8023 += 1, R7979 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8023 += 1, R7978 += 1, R7979 += 1 };
  s2 -> s3 [73, 73] { R8023 += 1, R7979 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R8023 += 1, R7979 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R8023 += 1, R7979 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R8023 += 1, R7979 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R8023 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8023 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8023 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R8025 += 1, R7980 += 1, R7981 += 1 };
  s0 -> s0 [0, 65535] { R8024 += 1, R8025 += 1 };
  s0 -> s3 [73, 73] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R8025 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R8025 += 1, R7980 += 1, R7981 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R8025 += 1, R7981 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R8025 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8025 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8025 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 72] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s0 [0, 65535] { R8026 += 1, R8027 += 1 };
  s0 -> s3 [0, 65535] { R8027 += 1, R7982 += 1, R7983 += 1 };
  s0 -> s4 [73, 73] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [73, 73] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [73, 73] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [73, 73] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [74, 65535] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [74, 65535] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 72] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 72] { R8027 += 1, R7983 += 1 };
  s1 -> s8 [73, 73] { R8027 += 1, R7983 += 1 };
  s1 -> s4 [73, 73] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [73, 73] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s12 [73, 73] { R8027 += 1, R7983 += 1 };
  s1 -> s1 [74, 65535] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [74, 65535] { R8027 += 1, R7983 += 1 };
  s2 -> s1 [0, 72] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 72] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [73, 73] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [73, 73] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [73, 73] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [73, 73] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s1 [74, 65535] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [74, 65535] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 72] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 72] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R8027 += 1, R7982 += 1, R7983 += 1 };
  s3 -> s4 [73, 73] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [73, 73] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [73, 73] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [73, 73] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [74, 65535] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [74, 65535] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s8 [0, 65535] { R8027 += 1, R7983 += 1 };
  s4 -> s4 [0, 65535] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s4 [0, 65535] { R8027 += 1, R7983 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R8027 += 1, R7983 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s8 [0, 65535] { R8027 += 1, R7983 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8027 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8027 += 1 };
  s11 -> s11 [0, 72] { R8027 += 1, R7983 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8027 += 1 };
  s11 -> s8 [73, 73] { R8027 += 1, R7983 += 1 };
  s11 -> s12 [73, 73] { R8027 += 1, R7983 += 1 };
  s11 -> s11 [74, 65535] { R8027 += 1, R7983 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8027 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s2 [0, 72] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s0 -> s3 [0, 65535] { R8029 += 1, R7984 += 1, R7985 += 1 };
  s0 -> s0 [0, 65535] { R8028 += 1, R8029 += 1 };
  s0 -> s4 [73, 73] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s5 [73, 73] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s6 [73, 73] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s0 -> s7 [73, 73] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s0 -> s2 [74, 77] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s0 -> s1 [74, 65535] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s8 [80, 80] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s0 -> s2 [81, 65535] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s1 -> s1 [0, 72] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s2 [0, 72] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s1 -> s4 [73, 73] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s5 [73, 73] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s6 [73, 73] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s1 -> s7 [73, 73] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s1 -> s2 [74, 77] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s1 -> s1 [74, 65535] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s8 [80, 80] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s1 -> s2 [81, 65535] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s2 -> s2 [0, 72] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s2 -> s6 [73, 73] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s2 -> s7 [73, 73] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s2 -> s2 [74, 77] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s2 -> s8 [80, 80] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s2 -> s2 [81, 65535] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s3 -> s1 [0, 72] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s2 [0, 72] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s3 -> s3 [0, 65535] { R8029 += 1, R7984 += 1, R7985 += 1 };
  s3 -> s4 [73, 73] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s5 [73, 73] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s6 [73, 73] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s3 -> s7 [73, 73] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s3 -> s2 [74, 77] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s3 -> s1 [74, 65535] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s8 [80, 80] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s3 -> s2 [81, 65535] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s4 -> s6 [0, 77] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s4 -> s4 [0, 65535] { R8029 += 1, R7985 += 1, R7712 += 1, R7713 += 1 };
  s4 -> s10 [80, 80] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s4 -> s6 [81, 65535] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s6 -> s6 [0, 77] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s6 -> s10 [80, 80] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s6 -> s6 [81, 65535] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s8 -> s8 [0, 72] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s8 -> s8 [0, 65535] { R8029 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R8029 += 1, R7985 += 1 };
  s8 -> s11 [73, 73] { R8029 += 1, R7985 += 1 };
  s8 -> s8 [74, 77] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s8 -> s8 [74, 65535] { R8029 += 1, R7985 += 1 };
  s8 -> s8 [80, 65535] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s10 -> s10 [0, 65535] { R8029 += 1, R7985 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R8029 += 1 };
  s10 -> s10 [80, 65535] { R8029 += 1, R7985 += 1, R7713 += 1 };
  s11 -> s11 [0, 65535] { R8029 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8029 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s0 -> s2 [0, 65535] { R8031 += 1, R7986 += 1, R7987 += 1 };
  s0 -> s0 [0, 65535] { R8030 += 1, R8031 += 1 };
  s0 -> s3 [73, 73] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s0 -> s4 [73, 73] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s0 -> s1 [74, 65535] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s1 [0, 72] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s1 [0, 65535] { R8031 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s4 [73, 73] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s1 [74, 65535] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s1 [0, 72] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8031 += 1, R7986 += 1, R7987 += 1 };
  s2 -> s3 [73, 73] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s4 [73, 73] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s1 [74, 65535] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8031 += 1 };
  s4 -> s5 [0, 65535] { R8031 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8031 += 1, R7987 += 1, R7716 += 1, R7717 += 1 };
  s5 -> s5 [0, 65535] { R8031 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s0 -> s2 [0, 72] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s0 -> s3 [0, 65535] { R8033 += 1, R7988 += 1, R7989 += 1 };
  s0 -> s0 [0, 65535] { R8032 += 1, R8033 += 1 };
  s0 -> s4 [73, 73] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s0 -> s5 [73, 73] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s0 -> s6 [73, 73] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s0 -> s7 [73, 73] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s0 -> s1 [74, 76] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s0 -> s2 [74, 65535] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s0 -> s8 [77, 77] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s0 -> s1 [81, 65535] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s1 -> s1 [0, 72] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s1 -> s4 [73, 73] { R8033 += 1, R7989 += 1 };
  s1 -> s7 [73, 73] { R8033 += 1, R7989 += 1 };
  s1 -> s1 [74, 76] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s1 -> s1 [74, 65535] { R8033 += 1, R7989 += 1 };
  s1 -> s8 [77, 77] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s1 -> s1 [81, 65535] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s2 -> s1 [0, 72] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s2 -> s2 [0, 72] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s2 -> s4 [73, 73] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s2 -> s5 [73, 73] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s2 -> s6 [73, 73] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s2 -> s7 [73, 73] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s2 -> s1 [74, 76] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s2 -> s2 [74, 65535] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s2 -> s8 [77, 77] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s2 -> s1 [81, 65535] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s3 -> s1 [0, 72] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s3 -> s2 [0, 72] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s3 -> s3 [0, 65535] { R8033 += 1, R7988 += 1, R7989 += 1 };
  s3 -> s4 [73, 73] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s3 -> s5 [73, 73] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s3 -> s6 [73, 73] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s3 -> s7 [73, 73] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s3 -> s1 [74, 76] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s3 -> s2 [74, 65535] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s3 -> s8 [77, 77] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s3 -> s1 [81, 65535] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s6 -> s7 [0, 76] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s6 -> s6 [0, 65535] { R8033 += 1, R7989 += 1, R7930 += 1, R7931 += 1 };
  s6 -> s10 [77, 77] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s6 -> s7 [81, 65535] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s7 -> s7 [0, 76] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s7 -> s7 [0, 65535] { R8033 += 1, R7989 += 1 };
  s7 -> s10 [77, 77] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s7 -> s7 [81, 65535] { R8033 += 1, R7989 += 1, R7931 += 1 };
  s8 -> s8 [0, 72] { R8033 += 1, R7989 += 1 };
  s8 -> s8 [0, 65535] { R8033 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R8033 += 1, R7989 += 1 };
  s8 -> s11 [73, 73] { R8033 += 1, R7989 += 1 };
  s8 -> s8 [74, 65535] { R8033 += 1, R7989 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8033 += 1, R7989 += 1 };
  s10 -> s12 [0, 65535] { R8033 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8033 += 1 };
  s12 -> s12 [0, 65535] { R8033 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R8033 && R20 - R8033 = -1 && R21 = R8033 && R22 - R8033 = -1 && R23 = R8033 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7715 + -1*R7713 - R53 = 0 && R52 + R7714 + R7712 = 0 && R7974 = 0 && R7975 = 0 && R7982 = 0 && R7983 = 0 && R7984 = 0 && R7985 = 0 && R7988 = 0 && R7989 = 0 && R7990 = 0 && R7991 = R8033 && R7992 = 0 && R7993 = R8033 && R7994 = 0 && R7995 = R8033 && R7996 = 0 && R7997 = R8033 && R7998 = 0 && R7999 = R8033 && R8000 = 0 && R8001 = R8033 && R8002 = 0 && R8003 = R8033 && R8004 = 0 && R8005 = R8033 && R8006 = 0 && R8007 = R8033 && R8008 = 0 && R8009 = R8033 && R8010 = 0 && R8011 = R8033 && R8012 = 0 && R8013 = R8033 && R8014 = 0 && R8015 = R8033 && R8016 = 0 && R8017 = R8033 && R8018 = 0 && R8019 = R8033 && R8020 = 0 && R8021 = R8033 && R8022 = 0 && R8023 = R8033 && R8024 = 0 && R8025 = R8033 && R8026 = 0 && R8027 = R8033 && R8028 = 0 && R8029 = R8033 && R8030 = 0 && R8031 = R8033 && R8032 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7715 + -1*R7713 - R53 < 1 && 0 < R8033 && (R1 != 0 || R17 = 0 || (R7934 = 0 && R7935 = 0)) && (R1 != 0 || R17 = 0 || (R7936 = 0 && R7937 = 0)) && (R1 != 0 || R17 = 0 || (R7938 = 0 && R7939 = 0)) && (R1 != 0 || R17 = 0 || (R7940 = 0 && R7941 = 0)) && (R1 != 0 || R17 = 0 || (R7942 = 0 && R7943 = 0)) && (R1 != 0 || R17 = 0 || (R7944 = 0 && R7945 = 0)) && (R1 != 0 || R17 = 0 || (R7946 = 0 && R7947 = 0)) && (R1 != 0 || R17 = 0 || (R7948 = 0 && R7949 = 0)) && (R1 != 0 || R17 = 0 || (R7950 = 0 && R7951 = 0)) && (R1 != 0 || R17 = 0 || (R7952 = 0 && R7953 = 0)) && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R42 + R72 + R70 = 0 || R53 + R7715 + R7713 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R7715 + R7713 < 1))) && (R7934 != 0 || R1 = R7935 || R1 < 1) && (R7936 != 0 || R1 = R7937 || R1 < 1) && (R7938 != 0 || R1 = R7939 || R1 < 1) && (R7940 != 0 || R1 = R7941 || R1 < 1) && (R7942 != 0 || R1 = R7943 || R1 < 1) && (R7944 != 0 || R1 = R7945 || R1 < 1) && (R7946 != 0 || R1 = R7947 || R1 < 1) && (R7948 != 0 || R1 = R7949 || R1 < 1) && (R7950 != 0 || R1 = R7951 || R1 < 1) && (R7952 != 0 || R1 = R7953 || R1 < 1) && (R18 = 0 || (R7972 = 0 && R7973 = 0)) && (R18 = 0 || (R7976 = 0 && R7977 = 0)) && (R18 = 0 || (R7978 = 0 && R7979 = 0)) && (R18 = 0 || (R7980 = 0 && R7981 = 0)) && (R18 = 0 || (R7986 = 0 && R7987 = 0)) && (R19 = 0 || (R7954 = 0 && R7955 = 0)) && (R19 = 0 || (R7956 = 0 && R7957 = 0)) && (R19 = 0 || (R7958 = 0 && R7959 = 0)) && (R19 = 0 || (R7960 = 0 && R7961 = 0)) && (R19 = 0 || (R7962 = 0 && R7963 = 0)) && (R19 = 0 || (R7964 = 0 && R7965 = 0)) && (R19 = 0 || (R7966 = 0 && R7967 = 0)) && (R19 = 0 || (R7968 = 0 && R7969 = 0)) && (R19 = 0 || (R7970 = 0 && R7971 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0)) && (R58 + R7721 + R7718 = 0 || (R56 + R7719 + R7716 = 0 && R57 + R7720 + R7717 = 0)) && (R58 + R7721 + R7718 = 0 || (R62 + R7932 + R7930 = 0 && R63 + R7933 + R7931 = 0)) && (R7934 = 0 || R1 < 1) && (R7936 = 0 || R1 < 1) && (R7938 = 0 || R1 < 1) && (R7940 = 0 || R1 < 1) && (R7942 = 0 || R1 < 1) && (R7944 = 0 || R1 < 1) && (R7946 = 0 || R1 < 1) && (R7948 = 0 || R1 < 1) && (R7950 = 0 || R1 < 1) && (R7952 = 0 || R1 < 1);
// End of Parikh automata intersection problem
