// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R11536, R11537, R11538, R11539, R11540, R11541, R11750, R11751, R11752, R11753, R11754, R11755, R11756, R11757, R11758, R11759, R11760, R11761, R11762, R11763, R11764, R11765, R11766, R11767, R11768, R11769, R11770, R11771, R11772, R11773, R11774, R11775, R11776, R11777, R11778, R11779, R11780, R11781, R11782, R11783, R11784, R11785, R11786, R11787, R11788, R11789, R11790, R11791, R11792, R11793, R11794, R11795, R11796, R11797, R11798, R11799, R11800, R11801, R11802, R11803, R11804, R11805, R11806, R11807, R11808, R11809, R11810, R11811, R11812, R11813, R11814, R11815, R11816, R11817, R11818, R11819, R11820, R11821, R11822, R11823, R11824, R11825, R11826, R11827, R11828, R11829, R11830, R11831, R11832, R11833, R11834, R11835, R11836, R11837, R11838, R11839, R11840, R11841, R11842, R11843, R11844, R11845, R11846, R11847, R11848, R11849, R11850, R11851, R11852, R11853, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R11774 += 1, R11775 += 1 };
  s0 -> s1 [0, 65535] { R11775 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11775 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R11777 += 1 };
  s0 -> s0 [0, 65535] { R11776 += 1, R11777 += 1 };
  s0 -> s2 [73, 73] { R11777 += 1 };
  s0 -> s3 [73, 73] { R11777 += 1 };
  s0 -> s1 [78, 65535] { R11777 += 1 };
  s1 -> s1 [0, 72] { R11777 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11777 += 1 };
  s1 -> s3 [73, 73] { R11777 += 1 };
  s1 -> s1 [78, 65535] { R11777 += 1 };
  s2 -> s2 [0, 73] { R11777 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R11777 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R11779 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11778 += 1, R11779 += 1 };
  s0 -> s2 [73, 73] { R11779 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R11779 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R11779 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R11779 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11779 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R11779 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R11779 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11779 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R11781 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11780 += 1, R11781 += 1 };
  s0 -> s2 [73, 73] { R11781 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R11781 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R11781 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R11781 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11781 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R11781 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R11781 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11781 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R11783 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11782 += 1, R11783 += 1 };
  s0 -> s2 [73, 73] { R11783 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R11783 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R11783 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R11783 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11783 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R11783 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R11783 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11783 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R11785 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11784 += 1, R11785 += 1 };
  s0 -> s2 [73, 73] { R11785 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R11785 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R11785 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R11785 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11785 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R11785 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R11785 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11785 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R11787 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11786 += 1, R11787 += 1 };
  s0 -> s2 [73, 73] { R11787 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R11787 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R11787 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R11787 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11787 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R11787 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R11787 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11787 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R11789 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11788 += 1, R11789 += 1 };
  s0 -> s2 [73, 73] { R11789 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R11789 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R11789 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R11789 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11789 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R11789 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R11789 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11789 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R11791 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11790 += 1, R11791 += 1 };
  s0 -> s2 [73, 73] { R11791 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R11791 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R11791 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R11791 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11791 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R11791 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R11791 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R11791 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R11811 += 1 };
  s0 -> s0 [0, 65535] { R11810 += 1, R11811 += 1 };
  s0 -> s2 [73, 73] { R11811 += 1 };
  s0 -> s1 [74, 65535] { R11811 += 1 };
  s1 -> s1 [0, 72] { R11811 += 1 };
  s1 -> s2 [73, 73] { R11811 += 1 };
  s1 -> s1 [74, 65535] { R11811 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11811 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11813 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R11812 += 1, R11813 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11813 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R11815 += 1 };
  s0 -> s0 [0, 65535] { R11814 += 1, R11815 += 1 };
  s0 -> s2 [0, 65535] { R11815 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R11815 += 1 };
  s0 -> s1 [74, 65535] { R11815 += 1 };
  s1 -> s1 [0, 72] { R11815 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R11815 += 1 };
  s1 -> s1 [74, 65535] { R11815 += 1 };
  s2 -> s1 [0, 72] { R11815 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11815 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R11815 += 1 };
  s2 -> s1 [74, 65535] { R11815 += 1 };
  s3 -> s3 [0, 65535] { R11815 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R11817 += 1, R11755 += 1 };
  s0 -> s2 [0, 65535] { R11817 += 1, R11754 += 1, R11755 += 1 };
  s0 -> s0 [0, 65535] { R11816 += 1, R11817 += 1 };
  s0 -> s1 [74, 65535] { R11817 += 1, R11755 += 1 };
  s1 -> s1 [0, 72] { R11817 += 1, R11755 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11817 += 1 };
  s1 -> s1 [74, 65535] { R11817 += 1, R11755 += 1 };
  s2 -> s1 [0, 72] { R11817 += 1, R11755 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11817 += 1, R11754 += 1, R11755 += 1 };
  s2 -> s1 [74, 65535] { R11817 += 1, R11755 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R11818 += 1, R11819 += 1 };
  s0 -> s1 [0, 65535] { R11819 += 1, R11756 += 1, R11757 += 1 };
  s0 -> s2 [0, 65535] { R11819 += 1, R11757 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11819 += 1, R11756 += 1, R11757 += 1 };
  s1 -> s2 [0, 65535] { R11819 += 1, R11757 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R11819 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11819 += 1, R11757 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R11819 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R11821 += 1, R11759 += 1 };
  s0 -> s2 [0, 65535] { R11821 += 1, R11758 += 1, R11759 += 1 };
  s0 -> s0 [0, 65535] { R11820 += 1, R11821 += 1 };
  s0 -> s1 [77, 65535] { R11821 += 1, R11759 += 1 };
  s1 -> s1 [0, 73] { R11821 += 1, R11759 += 1 };
  s1 -> s1 [0, 65535] { R11821 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R11821 += 1, R11759 += 1 };
  s2 -> s1 [0, 73] { R11821 += 1, R11759 += 1 };
  s2 -> s2 [0, 65535] { R11821 += 1, R11758 += 1, R11759 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R11821 += 1, R11759 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R11822 += 1, R11823 += 1 };
  s0 -> s1 [0, 65535] { R11823 += 1, R11760 += 1, R11761 += 1 };
  s0 -> s2 [0, 65535] { R11823 += 1, R11761 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11823 += 1, R11760 += 1, R11761 += 1 };
  s1 -> s2 [0, 65535] { R11823 += 1, R11761 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R11823 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11823 += 1, R11761 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R11823 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R11825 += 1, R11763 += 1 };
  s0 -> s2 [0, 65535] { R11825 += 1, R11762 += 1, R11763 += 1 };
  s0 -> s3 [0, 65535] { R11825 += 1, R11763 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R11824 += 1, R11825 += 1 };
  s0 -> s1 [78, 65535] { R11825 += 1, R11763 += 1 };
  s1 -> s1 [0, 76] { R11825 += 1, R11763 += 1 };
  s1 -> s1 [0, 65535] { R11825 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R11825 += 1, R11763 += 1 };
  s2 -> s1 [0, 76] { R11825 += 1, R11763 += 1 };
  s2 -> s2 [0, 65535] { R11825 += 1, R11762 += 1, R11763 += 1 };
  s2 -> s3 [0, 65535] { R11825 += 1, R11763 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R11825 += 1, R11763 += 1 };
  s3 -> s1 [0, 76] { R11825 += 1, R11763 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11825 += 1, R11763 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R11825 += 1 };
  s3 -> s1 [78, 65535] { R11825 += 1, R11763 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11825 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R11827 += 1, R11765 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R11826 += 1, R11827 += 1 };
  s0 -> s1 [0, 65535] { R11827 += 1, R11765 += 1 };
  s0 -> s2 [0, 65535] { R11827 += 1, R11764 += 1, R11765 += 1 };
  s0 -> s1 [78, 65535] { R11827 += 1, R11765 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R11827 += 1, R11765 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R11827 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11827 += 1, R11765 += 1 };
  s1 -> s1 [78, 65535] { R11827 += 1, R11765 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R11827 += 1, R11765 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11827 += 1, R11765 += 1 };
  s2 -> s2 [0, 65535] { R11827 += 1, R11764 += 1, R11765 += 1 };
  s2 -> s1 [78, 65535] { R11827 += 1, R11765 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11827 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R11828 += 1, R11829 += 1 };
  s0 -> s1 [0, 65535] { R11829 += 1, R11766 += 1, R11767 += 1 };
  s0 -> s2 [0, 65535] { R11829 += 1, R11767 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R11829 += 1, R11767 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s1 [0, 65535] { R11829 += 1, R11766 += 1, R11767 += 1 };
  s1 -> s2 [0, 65535] { R11829 += 1, R11767 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s3 [0, 65535] { R11829 += 1, R11767 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R11829 += 1 };
  s2 -> s2 [0, 65535] { R11829 += 1, R11767 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s3 [0, 65535] { R11829 += 1, R11767 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R11829 += 1 };
  s3 -> s5 [0, 65535] { R11829 += 1, R11767 += 1 };
  s3 -> s3 [0, 65535] { R11829 += 1, R11767 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11829 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R11829 += 1 };
  s5 -> s5 [0, 65535] { R11829 += 1, R11767 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R11831 += 1, R11769 += 1, R11535 += 1 };
  s0 -> s1 [0, 65535] { R11831 += 1, R11769 += 1 };
  s0 -> s2 [0, 65535] { R11831 += 1, R11768 += 1, R11769 += 1 };
  s0 -> s0 [0, 65535] { R11830 += 1, R11831 += 1 };
  s0 -> s1 [80, 65535] { R11831 += 1, R11769 += 1, R11535 += 1 };
  s1 -> s1 [0, 77] { R11831 += 1, R11769 += 1, R11535 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11831 += 1, R11769 += 1 };
  s1 -> s4 [0, 65535] { R11831 += 1 };
  s1 -> s1 [80, 65535] { R11831 += 1, R11769 += 1, R11535 += 1 };
  s2 -> s1 [0, 77] { R11831 += 1, R11769 += 1, R11535 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11831 += 1, R11769 += 1 };
  s2 -> s2 [0, 65535] { R11831 += 1, R11768 += 1, R11769 += 1 };
  s2 -> s1 [80, 65535] { R11831 += 1, R11769 += 1, R11535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11831 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11833 += 1, R11770 += 1, R11771 += 1 };
  s0 -> s2 [0, 65535] { R11833 += 1, R11771 += 1, R11539 += 1, R11540 += 1 };
  s0 -> s3 [0, 65535] { R11833 += 1, R11771 += 1, R11540 += 1, R11541 += 1 };
  s0 -> s0 [0, 65535] { R11832 += 1, R11833 += 1 };
  s1 -> s1 [0, 65535] { R11833 += 1, R11770 += 1, R11771 += 1 };
  s1 -> s2 [0, 65535] { R11833 += 1, R11771 += 1, R11539 += 1, R11540 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R11833 += 1, R11771 += 1, R11540 += 1, R11541 += 1 };
  s2 -> s2 [0, 65535] { R11833 += 1, R11771 += 1, R11539 += 1, R11540 += 1 };
  s2 -> s5 [0, 65535] { R11833 += 1 };
  s2 -> s3 [0, 65535] { R11833 += 1, R11771 += 1, R11540 += 1, R11541 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R11833 += 1, R11771 += 1 };
  s3 -> s5 [0, 65535] { R11833 += 1 };
  s3 -> s3 [0, 65535] { R11833 += 1, R11771 += 1, R11540 += 1, R11541 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11833 += 1, R11771 += 1 };
  s4 -> s5 [0, 65535] { R11833 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11833 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R11835 += 1, R11773 += 1 };
  s0 -> s2 [0, 65535] { R11835 += 1, R11772 += 1, R11773 += 1 };
  s0 -> s0 [0, 65535] { R11834 += 1, R11835 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11835 += 1, R11773 += 1 };
  s1 -> s4 [0, 65535] { R11835 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11835 += 1, R11773 += 1 };
  s2 -> s2 [0, 65535] { R11835 += 1, R11772 += 1, R11773 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11835 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R11836 += 1, R11837 += 1 };
  s0 -> s1 [0, 65535] { R11837 += 1, R11793 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R11837 += 1, R11792 += 1, R11793 += 1 };
  s1 -> s4 [0, 65535] { R11837 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11837 += 1, R11793 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11837 += 1, R11793 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R11837 += 1, R11792 += 1, R11793 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11837 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R11839 += 1, R11795 += 1 };
  s0 -> s0 [0, 65535] { R11838 += 1, R11839 += 1 };
  s0 -> s2 [0, 65535] { R11839 += 1, R11794 += 1, R11795 += 1 };
  s0 -> s3 [73, 73] { R11839 += 1, R11795 += 1 };
  s0 -> s4 [73, 73] { R11839 += 1, R11795 += 1 };
  s0 -> s5 [77, 77] { R11839 += 1, R11795 += 1 };
  s0 -> s1 [78, 65535] { R11839 += 1, R11795 += 1 };
  s1 -> s1 [0, 72] { R11839 += 1, R11795 += 1 };
  s1 -> s3 [73, 73] { R11839 += 1, R11795 += 1 };
  s1 -> s4 [73, 73] { R11839 += 1, R11795 += 1 };
  s1 -> s5 [77, 77] { R11839 += 1, R11795 += 1 };
  s1 -> s1 [78, 65535] { R11839 += 1, R11795 += 1 };
  s2 -> s1 [0, 72] { R11839 += 1, R11795 += 1 };
  s2 -> s2 [0, 65535] { R11839 += 1, R11794 += 1, R11795 += 1 };
  s2 -> s3 [73, 73] { R11839 += 1, R11795 += 1 };
  s2 -> s4 [73, 73] { R11839 += 1, R11795 += 1 };
  s2 -> s5 [77, 77] { R11839 += 1, R11795 += 1 };
  s2 -> s1 [78, 65535] { R11839 += 1, R11795 += 1 };
  s3 -> s3 [0, 73] { R11839 += 1, R11795 += 1 };
  s3 -> s8 [77, 77] { R11839 += 1, R11795 += 1 };
  s3 -> s3 [78, 65535] { R11839 += 1, R11795 += 1 };
  s5 -> s5 [0, 72] { R11839 += 1, R11795 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11839 += 1 };
  s5 -> s7 [73, 73] { R11839 += 1, R11795 += 1 };
  s5 -> s8 [73, 73] { R11839 += 1, R11795 += 1 };
  s5 -> s5 [77, 65535] { R11839 += 1, R11795 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11839 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R11839 += 1, R11795 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11839 += 1 };
  s8 -> s8 [77, 65535] { R11839 += 1, R11795 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R11841 += 1, R11797 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R11841 += 1, R11796 += 1, R11797 += 1 };
  s0 -> s0 [0, 65535] { R11840 += 1, R11841 += 1 };
  s0 -> s3 [73, 73] { R11841 += 1, R11797 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R11841 += 1, R11797 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R11841 += 1, R11797 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R11841 += 1, R11797 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11841 += 1 };
  s1 -> s3 [73, 73] { R11841 += 1, R11797 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R11841 += 1, R11797 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R11841 += 1, R11797 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R11841 += 1, R11797 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11841 += 1, R11796 += 1, R11797 += 1 };
  s2 -> s3 [73, 73] { R11841 += 1, R11797 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R11841 += 1, R11797 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R11841 += 1, R11797 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R11841 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11841 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11841 += 1, R11797 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R11841 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R11843 += 1, R11799 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R11842 += 1, R11843 += 1 };
  s0 -> s2 [0, 65535] { R11843 += 1, R11798 += 1, R11799 += 1 };
  s0 -> s3 [73, 73] { R11843 += 1, R11799 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R11843 += 1, R11799 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R11843 += 1, R11799 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R11843 += 1, R11799 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11843 += 1 };
  s1 -> s3 [73, 73] { R11843 += 1, R11799 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R11843 += 1, R11799 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R11843 += 1, R11799 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R11843 += 1, R11799 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R11843 += 1, R11798 += 1, R11799 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R11843 += 1, R11799 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R11843 += 1, R11799 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R11843 += 1, R11799 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11843 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11843 += 1, R11799 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R11843 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11843 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R11844 += 1, R11845 += 1 };
  s0 -> s3 [0, 65535] { R11845 += 1, R11800 += 1, R11801 += 1 };
  s0 -> s4 [73, 73] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R11845 += 1 };
  s2 -> s4 [73, 73] { R11845 += 1, R11801 += 1 };
  s2 -> s6 [73, 73] { R11845 += 1, R11801 += 1 };
  s2 -> s2 [74, 76] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R11845 += 1, R11801 += 1 };
  s2 -> s2 [78, 65535] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R11845 += 1, R11800 += 1, R11801 += 1 };
  s3 -> s4 [73, 73] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R11845 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 76] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R11845 += 1, R11801 += 1 };
  s6 -> s9 [0, 65535] { R11845 += 1 };
  s6 -> s6 [78, 65535] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s7 -> s6 [0, 76] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R11845 += 1, R11801 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [78, 65535] { R11845 += 1, R11801 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11845 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s2 [0, 65535] { R11847 += 1, R11802 += 1, R11803 += 1 };
  s0 -> s0 [0, 65535] { R11846 += 1, R11847 += 1 };
  s0 -> s3 [73, 73] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R11847 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R11847 += 1, R11802 += 1, R11803 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R11847 += 1, R11803 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11847 += 1 };
  s4 -> s4 [0, 65535] { R11847 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11847 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s0 -> s2 [0, 72] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s0 [0, 65535] { R11848 += 1, R11849 += 1 };
  s0 -> s3 [0, 65535] { R11849 += 1, R11804 += 1, R11805 += 1 };
  s0 -> s4 [73, 73] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s0 -> s5 [73, 73] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s6 [73, 73] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s0 -> s7 [73, 73] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s1 [74, 77] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s0 -> s2 [74, 65535] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s8 [80, 80] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s0 -> s1 [81, 65535] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s1 -> s1 [0, 72] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s1 -> s4 [73, 73] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s1 -> s6 [73, 73] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s1 -> s1 [74, 77] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s1 -> s8 [80, 80] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s1 -> s1 [81, 65535] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s2 -> s1 [0, 72] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s2 -> s2 [0, 72] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s4 [73, 73] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s2 -> s5 [73, 73] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s6 [73, 73] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s2 -> s7 [73, 73] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s1 [74, 77] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s2 -> s2 [74, 65535] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s8 [80, 80] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s2 -> s1 [81, 65535] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s3 -> s1 [0, 72] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s3 -> s2 [0, 72] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s3 [0, 65535] { R11849 += 1, R11804 += 1, R11805 += 1 };
  s3 -> s4 [73, 73] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s3 -> s5 [73, 73] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s6 [73, 73] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s3 -> s7 [73, 73] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s1 [74, 77] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s3 -> s2 [74, 65535] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s8 [80, 80] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s3 -> s1 [81, 65535] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s4 -> s4 [0, 77] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s4 -> s10 [80, 80] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s4 -> s4 [81, 65535] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s5 -> s4 [0, 77] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s5 -> s5 [0, 65535] { R11849 += 1, R11805 += 1, R11532 += 1, R11533 += 1 };
  s5 -> s10 [80, 80] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s5 -> s4 [81, 65535] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s8 -> s8 [0, 72] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11849 += 1 };
  s8 -> s10 [73, 73] { R11849 += 1, R11805 += 1 };
  s8 -> s11 [73, 73] { R11849 += 1, R11805 += 1 };
  s8 -> s8 [74, 77] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s8 -> s8 [74, 65535] { R11849 += 1, R11805 += 1 };
  s8 -> s8 [80, 65535] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s10 -> s10 [0, 65535] { R11849 += 1, R11805 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R11849 += 1 };
  s10 -> s10 [80, 65535] { R11849 += 1, R11805 += 1, R11533 += 1 };
  s11 -> s11 [0, 65535] { R11849 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11849 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s2 [0, 65535] { R11851 += 1, R11806 += 1, R11807 += 1 };
  s0 -> s0 [0, 65535] { R11850 += 1, R11851 += 1 };
  s0 -> s3 [73, 73] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s4 [73, 73] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s1 [74, 65535] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [0, 72] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11851 += 1 };
  s1 -> s3 [73, 73] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s4 [73, 73] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [74, 65535] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s1 [0, 72] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s2 [0, 65535] { R11851 += 1, R11806 += 1, R11807 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s4 [73, 73] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s1 [74, 65535] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s3 -> s3 [0, 65535] { R11851 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11851 += 1 };
  s4 -> s4 [0, 65535] { R11851 += 1, R11807 += 1, R11536 += 1, R11537 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11851 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s0 -> s2 [0, 72] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s0 -> s3 [0, 65535] { R11853 += 1, R11808 += 1, R11809 += 1 };
  s0 -> s0 [0, 65535] { R11852 += 1, R11853 += 1 };
  s0 -> s4 [73, 73] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s0 -> s5 [73, 73] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s0 -> s6 [73, 73] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s0 -> s7 [73, 73] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s0 -> s2 [74, 76] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s0 -> s1 [74, 65535] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s0 -> s8 [77, 77] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s0 -> s2 [81, 65535] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s1 -> s1 [0, 72] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s1 -> s2 [0, 72] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s1 -> s4 [73, 73] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s1 -> s5 [73, 73] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s1 -> s6 [73, 73] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s1 -> s7 [73, 73] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s1 -> s2 [74, 76] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s1 -> s1 [74, 65535] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s1 -> s8 [77, 77] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s1 -> s2 [81, 65535] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s2 -> s2 [0, 72] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s2 -> s6 [73, 73] { R11853 += 1, R11809 += 1 };
  s2 -> s7 [73, 73] { R11853 += 1, R11809 += 1 };
  s2 -> s2 [74, 76] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s2 -> s2 [74, 65535] { R11853 += 1, R11809 += 1 };
  s2 -> s8 [77, 77] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s2 -> s2 [81, 65535] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s3 -> s1 [0, 72] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s3 -> s2 [0, 72] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s3 -> s3 [0, 65535] { R11853 += 1, R11808 += 1, R11809 += 1 };
  s3 -> s4 [73, 73] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s3 -> s5 [73, 73] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s3 -> s6 [73, 73] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s3 -> s7 [73, 73] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s3 -> s2 [74, 76] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s3 -> s1 [74, 65535] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s3 -> s8 [77, 77] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s3 -> s2 [81, 65535] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s4 -> s7 [0, 76] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s4 -> s4 [0, 65535] { R11853 += 1, R11809 += 1, R11750 += 1, R11751 += 1 };
  s4 -> s11 [77, 77] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s4 -> s7 [81, 65535] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s7 -> s7 [0, 76] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s7 -> s7 [0, 65535] { R11853 += 1, R11809 += 1 };
  s7 -> s11 [77, 77] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s7 -> s7 [81, 65535] { R11853 += 1, R11809 += 1, R11751 += 1 };
  s8 -> s8 [0, 72] { R11853 += 1, R11809 += 1 };
  s8 -> s8 [0, 65535] { R11853 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R11853 += 1, R11809 += 1 };
  s8 -> s11 [73, 73] { R11853 += 1, R11809 += 1 };
  s8 -> s8 [74, 65535] { R11853 += 1, R11809 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11853 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R11853 += 1 };
  s11 -> s11 [0, 65535] { R11853 += 1, R11809 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11853 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R11853 && R20 - R11853 = -1 && R21 = R11853 && R22 - R11853 = -1 && R23 = R11853 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11535 + -1*R11533 - R53 = 0 && R52 + R11534 + R11532 = 0 && R11794 = 0 && R11795 = 0 && R11800 = 0 && R11801 = 0 && R11804 = 0 && R11805 = 0 && R11808 = 0 && R11809 = 0 && R11810 = 0 && R11811 = R11853 && R11812 = 0 && R11813 = R11853 && R11814 = 0 && R11815 = R11853 && R11816 = 0 && R11817 = R11853 && R11818 = 0 && R11819 = R11853 && R11820 = 0 && R11821 = R11853 && R11822 = 0 && R11823 = R11853 && R11824 = 0 && R11825 = R11853 && R11826 = 0 && R11827 = R11853 && R11828 = 0 && R11829 = R11853 && R11830 = 0 && R11831 = R11853 && R11832 = 0 && R11833 = R11853 && R11834 = 0 && R11835 = R11853 && R11836 = 0 && R11837 = R11853 && R11838 = 0 && R11839 = R11853 && R11840 = 0 && R11841 = R11853 && R11842 = 0 && R11843 = R11853 && R11844 = 0 && R11845 = R11853 && R11846 = 0 && R11847 = R11853 && R11848 = 0 && R11849 = R11853 && R11850 = 0 && R11851 = R11853 && R11852 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11535 + -1*R11533 - R53 < 1 && 0 < R11853 && (R1 != 0 || R17 = 0 || (R11754 = 0 && R11755 = 0)) && (R1 != 0 || R17 = 0 || (R11756 = 0 && R11757 = 0)) && (R1 != 0 || R17 = 0 || (R11758 = 0 && R11759 = 0)) && (R1 != 0 || R17 = 0 || (R11760 = 0 && R11761 = 0)) && (R1 != 0 || R17 = 0 || (R11762 = 0 && R11763 = 0)) && (R1 != 0 || R17 = 0 || (R11764 = 0 && R11765 = 0)) && (R1 != 0 || R17 = 0 || (R11766 = 0 && R11767 = 0)) && (R1 != 0 || R17 = 0 || (R11768 = 0 && R11769 = 0)) && (R1 != 0 || R17 = 0 || (R11770 = 0 && R11771 = 0)) && (R1 != 0 || R17 = 0 || (R11772 = 0 && R11773 = 0)) && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R11535 + R11533 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R11535 + R11533 < 1))) && (R11754 != 0 || R1 = R11755 || R1 < 1) && (R11756 != 0 || R1 = R11757 || R1 < 1) && (R11758 != 0 || R1 = R11759 || R1 < 1) && (R11760 != 0 || R1 = R11761 || R1 < 1) && (R11762 != 0 || R1 = R11763 || R1 < 1) && (R11764 != 0 || R1 = R11765 || R1 < 1) && (R11766 != 0 || R1 = R11767 || R1 < 1) && (R11768 != 0 || R1 = R11769 || R1 < 1) && (R11770 != 0 || R1 = R11771 || R1 < 1) && (R11772 != 0 || R1 = R11773 || R1 < 1) && (R18 = 0 || (R11792 = 0 && R11793 = 0)) && (R18 = 0 || (R11796 = 0 && R11797 = 0)) && (R18 = 0 || (R11798 = 0 && R11799 = 0)) && (R18 = 0 || (R11802 = 0 && R11803 = 0)) && (R18 = 0 || (R11806 = 0 && R11807 = 0)) && (R19 = 0 || (R11774 = 0 && R11775 = 0)) && (R19 = 0 || (R11776 = 0 && R11777 = 0)) && (R19 = 0 || (R11778 = 0 && R11779 = 0)) && (R19 = 0 || (R11780 = 0 && R11781 = 0)) && (R19 = 0 || (R11782 = 0 && R11783 = 0)) && (R19 = 0 || (R11784 = 0 && R11785 = 0)) && (R19 = 0 || (R11786 = 0 && R11787 = 0)) && (R19 = 0 || (R11788 = 0 && R11789 = 0)) && (R19 = 0 || (R11790 = 0 && R11791 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0)) && (R58 + R11541 + R11538 = 0 || (R56 + R11539 + R11536 = 0 && R57 + R11540 + R11537 = 0)) && (R58 + R11541 + R11538 = 0 || (R62 + R11752 + R11750 = 0 && R63 + R11753 + R11751 = 0)) && (R11754 = 0 || R1 < 1) && (R11756 = 0 || R1 < 1) && (R11758 = 0 || R1 < 1) && (R11760 = 0 || R1 < 1) && (R11762 = 0 || R1 < 1) && (R11764 = 0 || R1 < 1) && (R11766 = 0 || R1 < 1) && (R11768 = 0 || R1 < 1) && (R11770 = 0 || R1 < 1) && (R11772 = 0 || R1 < 1);
// End of Parikh automata intersection problem
