// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R11536, R11537, R11538, R11539, R11540, R11541, R11854, R11855, R11856, R11857, R11858, R11859, R11860, R11861, R11862, R11863, R11864, R11865, R11866, R11867, R11868, R11869, R11870, R11871, R11872, R11873, R11874, R11875, R11876, R11877, R11878, R11879, R11880, R11881, R11882, R11883, R11884, R11885, R11886, R11887, R11888, R11889, R11890, R11891, R11892, R11893, R11894, R11895, R11896, R11897, R11898, R11899, R11900, R11901, R11902, R11903, R11904, R11905, R11906, R11907, R11908, R11909, R11910, R11911, R11912, R11913, R11914, R11915, R11916, R11917, R11918, R11919, R11920, R11921, R11922, R11923, R11924, R11925, R11926, R11927, R11928, R11929, R11930, R11931, R11932, R11933, R11934, R11935, R11936, R11937, R11938, R11939, R11940, R11941, R11942, R11943, R11944, R11945, R11946, R11947, R11948, R11949, R11950, R11951, R11952, R11953, R11954, R11955, R11956, R11957, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11879 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R11878 += 1, R11879 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11879 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R11881 += 1 };
  s0 -> s0 [0, 65535] { R11880 += 1, R11881 += 1 };
  s0 -> s2 [73, 73] { R11881 += 1 };
  s0 -> s3 [73, 73] { R11881 += 1 };
  s0 -> s1 [78, 65535] { R11881 += 1 };
  s1 -> s1 [0, 72] { R11881 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11881 += 1 };
  s1 -> s3 [73, 73] { R11881 += 1 };
  s1 -> s1 [78, 65535] { R11881 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R11881 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R11881 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R11883 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11882 += 1, R11883 += 1 };
  s0 -> s2 [73, 73] { R11883 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R11883 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R11883 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R11883 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11883 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R11883 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R11883 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R11883 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R11885 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11884 += 1, R11885 += 1 };
  s0 -> s2 [73, 73] { R11885 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R11885 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R11885 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R11885 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11885 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R11885 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R11885 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11885 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R11887 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11886 += 1, R11887 += 1 };
  s0 -> s2 [73, 73] { R11887 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R11887 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R11887 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R11887 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11887 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R11887 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R11887 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11887 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R11889 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11888 += 1, R11889 += 1 };
  s0 -> s2 [73, 73] { R11889 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R11889 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R11889 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R11889 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11889 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R11889 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R11889 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11889 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R11891 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11890 += 1, R11891 += 1 };
  s0 -> s2 [73, 73] { R11891 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R11891 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R11891 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R11891 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11891 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R11891 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R11891 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R11891 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R11893 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11892 += 1, R11893 += 1 };
  s0 -> s2 [73, 73] { R11893 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R11893 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R11893 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R11893 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11893 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R11893 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R11893 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11893 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R11895 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11894 += 1, R11895 += 1 };
  s0 -> s2 [73, 73] { R11895 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R11895 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R11895 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R11895 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11895 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R11895 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R11895 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11895 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R11915 += 1 };
  s0 -> s0 [0, 65535] { R11914 += 1, R11915 += 1 };
  s0 -> s2 [73, 73] { R11915 += 1 };
  s0 -> s1 [74, 65535] { R11915 += 1 };
  s1 -> s1 [0, 72] { R11915 += 1 };
  s1 -> s2 [73, 73] { R11915 += 1 };
  s1 -> s1 [74, 65535] { R11915 += 1 };
  s2 -> s2 [0, 65535] { R11915 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R11916 += 1, R11917 += 1 };
  s0 -> s1 [0, 65535] { R11917 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11917 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R11919 += 1 };
  s0 -> s2 [0, 65535] { R11919 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R11918 += 1, R11919 += 1 };
  s0 -> s3 [73, 73] { R11919 += 1 };
  s0 -> s1 [74, 65535] { R11919 += 1 };
  s1 -> s1 [0, 72] { R11919 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R11919 += 1 };
  s1 -> s1 [74, 65535] { R11919 += 1 };
  s2 -> s1 [0, 72] { R11919 += 1 };
  s2 -> s2 [0, 65535] { R11919 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R11919 += 1 };
  s2 -> s1 [74, 65535] { R11919 += 1 };
  s3 -> s3 [0, 65535] { R11919 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R11921 += 1, R11859 += 1 };
  s0 -> s2 [0, 65535] { R11921 += 1, R11858 += 1, R11859 += 1 };
  s0 -> s0 [0, 65535] { R11920 += 1, R11921 += 1 };
  s0 -> s1 [74, 65535] { R11921 += 1, R11859 += 1 };
  s1 -> s1 [0, 72] { R11921 += 1, R11859 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11921 += 1 };
  s1 -> s1 [74, 65535] { R11921 += 1, R11859 += 1 };
  s2 -> s1 [0, 72] { R11921 += 1, R11859 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11921 += 1, R11858 += 1, R11859 += 1 };
  s2 -> s1 [74, 65535] { R11921 += 1, R11859 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11923 += 1, R11861 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R11922 += 1, R11923 += 1 };
  s0 -> s2 [0, 65535] { R11923 += 1, R11860 += 1, R11861 += 1 };
  s1 -> s1 [0, 65535] { R11923 += 1, R11861 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R11923 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11923 += 1, R11861 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R11923 += 1, R11860 += 1, R11861 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11923 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R11925 += 1, R11863 += 1 };
  s0 -> s0 [0, 65535] { R11924 += 1, R11925 += 1 };
  s0 -> s2 [0, 65535] { R11925 += 1, R11862 += 1, R11863 += 1 };
  s0 -> s1 [77, 65535] { R11925 += 1, R11863 += 1 };
  s1 -> s1 [0, 73] { R11925 += 1, R11863 += 1 };
  s1 -> s1 [0, 65535] { R11925 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R11925 += 1, R11863 += 1 };
  s2 -> s1 [0, 73] { R11925 += 1, R11863 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11925 += 1, R11862 += 1, R11863 += 1 };
  s2 -> s1 [77, 65535] { R11925 += 1, R11863 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R11926 += 1, R11927 += 1 };
  s0 -> s1 [0, 65535] { R11927 += 1, R11865 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R11927 += 1, R11864 += 1, R11865 += 1 };
  s1 -> s4 [0, 65535] { R11927 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11927 += 1, R11865 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11927 += 1, R11865 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R11927 += 1, R11864 += 1, R11865 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11927 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R11929 += 1, R11867 += 1 };
  s0 -> s0 [0, 65535] { R11928 += 1, R11929 += 1 };
  s0 -> s2 [0, 65535] { R11929 += 1, R11866 += 1, R11867 += 1 };
  s0 -> s3 [0, 65535] { R11929 += 1, R11867 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R11929 += 1, R11867 += 1 };
  s1 -> s1 [0, 76] { R11929 += 1, R11867 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11929 += 1 };
  s1 -> s1 [78, 65535] { R11929 += 1, R11867 += 1 };
  s2 -> s1 [0, 76] { R11929 += 1, R11867 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11929 += 1, R11866 += 1, R11867 += 1 };
  s2 -> s3 [0, 65535] { R11929 += 1, R11867 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R11929 += 1, R11867 += 1 };
  s3 -> s1 [0, 76] { R11929 += 1, R11867 += 1 };
  s3 -> s4 [0, 65535] { R11929 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11929 += 1, R11867 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R11929 += 1, R11867 += 1 };
  s4 -> s4 [0, 65535] { R11929 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R11931 += 1, R11869 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R11931 += 1, R11869 += 1 };
  s0 -> s0 [0, 65535] { R11930 += 1, R11931 += 1 };
  s0 -> s2 [0, 65535] { R11931 += 1, R11868 += 1, R11869 += 1 };
  s0 -> s1 [78, 65535] { R11931 += 1, R11869 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R11931 += 1, R11869 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R11931 += 1, R11869 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11931 += 1 };
  s1 -> s1 [78, 65535] { R11931 += 1, R11869 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R11931 += 1, R11869 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R11931 += 1, R11869 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11931 += 1, R11868 += 1, R11869 += 1 };
  s2 -> s1 [78, 65535] { R11931 += 1, R11869 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11931 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R11933 += 1, R11871 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s2 [0, 65535] { R11933 += 1, R11871 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s3 [0, 65535] { R11933 += 1, R11870 += 1, R11871 += 1 };
  s0 -> s0 [0, 65535] { R11932 += 1, R11933 += 1 };
  s1 -> s1 [0, 65535] { R11933 += 1, R11871 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s2 [0, 65535] { R11933 += 1, R11871 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535] { R11933 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11933 += 1, R11871 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s5 [0, 65535] { R11933 += 1, R11871 += 1 };
  s2 -> s6 [0, 65535] { R11933 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11933 += 1, R11871 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s2 [0, 65535] { R11933 += 1, R11871 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s3 [0, 65535] { R11933 += 1, R11870 += 1, R11871 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11933 += 1, R11871 += 1 };
  s5 -> s6 [0, 65535] { R11933 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11933 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R11935 += 1, R11873 += 1, R11535 += 1 };
  s0 -> s1 [0, 65535] { R11935 += 1, R11873 += 1 };
  s0 -> s0 [0, 65535] { R11934 += 1, R11935 += 1 };
  s0 -> s2 [0, 65535] { R11935 += 1, R11872 += 1, R11873 += 1 };
  s0 -> s1 [80, 65535] { R11935 += 1, R11873 += 1, R11535 += 1 };
  s1 -> s1 [0, 77] { R11935 += 1, R11873 += 1, R11535 += 1 };
  s1 -> s4 [0, 65535] { R11935 += 1 };
  s1 -> s1 [0, 65535] { R11935 += 1, R11873 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R11935 += 1, R11873 += 1, R11535 += 1 };
  s2 -> s1 [0, 77] { R11935 += 1, R11873 += 1, R11535 += 1 };
  s2 -> s1 [0, 65535] { R11935 += 1, R11873 += 1 };
  s2 -> s2 [0, 65535] { R11935 += 1, R11872 += 1, R11873 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R11935 += 1, R11873 += 1, R11535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11935 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11937 += 1, R11875 += 1, R11540 += 1, R11541 += 1 };
  s0 -> s0 [0, 65535] { R11936 += 1, R11937 += 1 };
  s0 -> s2 [0, 65535] { R11937 += 1, R11875 += 1, R11539 += 1, R11540 += 1 };
  s0 -> s3 [0, 65535] { R11937 += 1, R11874 += 1, R11875 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R11937 += 1, R11875 += 1 };
  s1 -> s1 [0, 65535] { R11937 += 1, R11875 += 1, R11540 += 1, R11541 += 1 };
  s1 -> s5 [0, 65535] { R11937 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R11937 += 1, R11875 += 1, R11540 += 1, R11541 += 1 };
  s2 -> s5 [0, 65535] { R11937 += 1 };
  s2 -> s2 [0, 65535] { R11937 += 1, R11875 += 1, R11539 += 1, R11540 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11937 += 1, R11875 += 1, R11540 += 1, R11541 += 1 };
  s3 -> s2 [0, 65535] { R11937 += 1, R11875 += 1, R11539 += 1, R11540 += 1 };
  s3 -> s3 [0, 65535] { R11937 += 1, R11874 += 1, R11875 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11937 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11937 += 1, R11875 += 1 };
  s6 -> s5 [0, 65535] { R11937 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R11939 += 1, R11877 += 1, R11857 += 1 };
  s0 -> s2 [0, 65535] { R11939 += 1, R11876 += 1, R11877 += 1 };
  s0 -> s1 [0, 65535] { R11939 += 1, R11877 += 1 };
  s0 -> s0 [0, 65535] { R11938 += 1, R11939 += 1 };
  s0 -> s1 [81, 65535] { R11939 += 1, R11877 += 1, R11857 += 1 };
  s1 -> s1 [0, 77] { R11939 += 1, R11877 += 1, R11857 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11939 += 1 };
  s1 -> s1 [0, 65535] { R11939 += 1, R11877 += 1 };
  s1 -> s1 [81, 65535] { R11939 += 1, R11877 += 1, R11857 += 1 };
  s2 -> s1 [0, 77] { R11939 += 1, R11877 += 1, R11857 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11939 += 1, R11876 += 1, R11877 += 1 };
  s2 -> s1 [0, 65535] { R11939 += 1, R11877 += 1 };
  s2 -> s1 [81, 65535] { R11939 += 1, R11877 += 1, R11857 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11939 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R11941 += 1, R11897 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R11940 += 1, R11941 += 1 };
  s0 -> s2 [0, 65535] { R11941 += 1, R11896 += 1, R11897 += 1 };
  s1 -> s1 [0, 65535] { R11941 += 1, R11897 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R11941 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11941 += 1, R11897 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R11941 += 1, R11896 += 1, R11897 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11941 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R11943 += 1, R11899 += 1 };
  s0 -> s2 [0, 65535] { R11943 += 1, R11898 += 1, R11899 += 1 };
  s0 -> s0 [0, 65535] { R11942 += 1, R11943 += 1 };
  s0 -> s3 [73, 73] { R11943 += 1, R11899 += 1 };
  s0 -> s4 [73, 73] { R11943 += 1, R11899 += 1 };
  s0 -> s5 [77, 77] { R11943 += 1, R11899 += 1 };
  s0 -> s1 [78, 65535] { R11943 += 1, R11899 += 1 };
  s1 -> s1 [0, 72] { R11943 += 1, R11899 += 1 };
  s1 -> s3 [73, 73] { R11943 += 1, R11899 += 1 };
  s1 -> s4 [73, 73] { R11943 += 1, R11899 += 1 };
  s1 -> s5 [77, 77] { R11943 += 1, R11899 += 1 };
  s1 -> s1 [78, 65535] { R11943 += 1, R11899 += 1 };
  s2 -> s1 [0, 72] { R11943 += 1, R11899 += 1 };
  s2 -> s2 [0, 65535] { R11943 += 1, R11898 += 1, R11899 += 1 };
  s2 -> s3 [73, 73] { R11943 += 1, R11899 += 1 };
  s2 -> s4 [73, 73] { R11943 += 1, R11899 += 1 };
  s2 -> s5 [77, 77] { R11943 += 1, R11899 += 1 };
  s2 -> s1 [78, 65535] { R11943 += 1, R11899 += 1 };
  s4 -> s4 [0, 73] { R11943 += 1, R11899 += 1 };
  s4 -> s7 [77, 77] { R11943 += 1, R11899 += 1 };
  s4 -> s4 [78, 65535] { R11943 += 1, R11899 += 1 };
  s5 -> s5 [0, 72] { R11943 += 1, R11899 += 1 };
  s5 -> s5 [0, 65535] { R11943 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R11943 += 1, R11899 += 1 };
  s5 -> s8 [73, 73] { R11943 += 1, R11899 += 1 };
  s5 -> s5 [77, 65535] { R11943 += 1, R11899 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R11943 += 1, R11899 += 1 };
  s7 -> s7 [0, 65535] { R11943 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R11943 += 1, R11899 += 1 };
  s8 -> s8 [0, 65535] { R11943 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R11945 += 1, R11901 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R11945 += 1, R11900 += 1, R11901 += 1 };
  s0 -> s0 [0, 65535] { R11944 += 1, R11945 += 1 };
  s0 -> s3 [73, 73] { R11945 += 1, R11901 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R11945 += 1, R11901 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R11945 += 1, R11901 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R11945 += 1, R11901 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R11945 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R11945 += 1, R11901 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R11945 += 1, R11901 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R11945 += 1, R11901 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R11945 += 1, R11901 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R11945 += 1, R11900 += 1, R11901 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R11945 += 1, R11901 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R11945 += 1, R11901 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R11945 += 1, R11901 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R11945 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11945 += 1 };
  s4 -> s4 [0, 65535] { R11945 += 1, R11901 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11945 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R11947 += 1, R11903 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R11947 += 1, R11902 += 1, R11903 += 1 };
  s0 -> s0 [0, 65535] { R11946 += 1, R11947 += 1 };
  s0 -> s3 [73, 73] { R11947 += 1, R11903 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R11947 += 1, R11903 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R11947 += 1, R11903 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R11947 += 1, R11903 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R11947 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R11947 += 1, R11903 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R11947 += 1, R11903 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R11947 += 1, R11903 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R11947 += 1, R11903 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11947 += 1, R11902 += 1, R11903 += 1 };
  s2 -> s3 [73, 73] { R11947 += 1, R11903 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R11947 += 1, R11903 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R11947 += 1, R11903 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R11947 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11947 += 1, R11903 += 1, R68 += 1 };
  s4 -> s5 [0, 65535] { R11947 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11947 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R11948 += 1, R11949 += 1 };
  s0 -> s3 [0, 65535] { R11949 += 1, R11904 += 1, R11905 += 1 };
  s0 -> s4 [73, 73] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R11949 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [73, 73] { R11949 += 1, R11905 += 1 };
  s1 -> s6 [73, 73] { R11949 += 1, R11905 += 1 };
  s1 -> s1 [74, 76] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R11949 += 1, R11905 += 1 };
  s1 -> s1 [78, 65535] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R11949 += 1, R11904 += 1, R11905 += 1 };
  s3 -> s4 [73, 73] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R11949 += 1 };
  s6 -> s6 [0, 76] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R11949 += 1 };
  s6 -> s6 [0, 65535] { R11949 += 1, R11905 += 1 };
  s6 -> s6 [78, 65535] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s7 -> s6 [0, 76] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R11949 += 1, R11905 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [78, 65535] { R11949 += 1, R11905 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11949 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R11950 += 1, R11951 += 1 };
  s0 -> s2 [0, 65535] { R11951 += 1, R11906 += 1, R11907 += 1 };
  s0 -> s3 [73, 73] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11951 += 1 };
  s1 -> s3 [73, 73] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R11951 += 1, R11906 += 1, R11907 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11951 += 1 };
  s4 -> s5 [0, 65535] { R11951 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11951 += 1, R11907 += 1, R11526 += 1, R11527 += 1 };
  s5 -> s5 [0, 65535] { R11951 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s0 -> s2 [0, 72] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s0 [0, 65535] { R11952 += 1, R11953 += 1 };
  s0 -> s3 [0, 65535] { R11953 += 1, R11908 += 1, R11909 += 1 };
  s0 -> s4 [73, 73] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s5 [73, 73] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s0 -> s6 [73, 73] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s0 -> s7 [73, 73] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s1 [74, 77] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s0 -> s2 [74, 65535] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s8 [80, 80] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s0 -> s1 [81, 65535] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s1 -> s1 [0, 72] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s1 -> s5 [73, 73] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s1 -> s6 [73, 73] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s1 -> s1 [74, 77] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s1 -> s8 [80, 80] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s1 -> s1 [81, 65535] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s2 -> s1 [0, 72] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s2 -> s2 [0, 72] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s4 [73, 73] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s5 [73, 73] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s2 -> s6 [73, 73] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s2 -> s7 [73, 73] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s1 [74, 77] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s2 -> s2 [74, 65535] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s8 [80, 80] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s2 -> s1 [81, 65535] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s3 -> s1 [0, 72] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s3 -> s2 [0, 72] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s3 [0, 65535] { R11953 += 1, R11908 += 1, R11909 += 1 };
  s3 -> s4 [73, 73] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s5 [73, 73] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s3 -> s6 [73, 73] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s3 -> s7 [73, 73] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s1 [74, 77] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s3 -> s2 [74, 65535] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s8 [80, 80] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s3 -> s1 [81, 65535] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s5 -> s5 [0, 77] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s5 -> s11 [80, 80] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s5 -> s5 [81, 65535] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s7 -> s5 [0, 77] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s7 -> s7 [0, 65535] { R11953 += 1, R11909 += 1, R11532 += 1, R11533 += 1 };
  s7 -> s11 [80, 80] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s7 -> s5 [81, 65535] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s8 -> s8 [0, 72] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11953 += 1 };
  s8 -> s10 [73, 73] { R11953 += 1, R11909 += 1 };
  s8 -> s11 [73, 73] { R11953 += 1, R11909 += 1 };
  s8 -> s8 [74, 77] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s8 -> s8 [74, 65535] { R11953 += 1, R11909 += 1 };
  s8 -> s8 [80, 65535] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11953 += 1 };
  s11 -> s11 [0, 77] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R11953 += 1 };
  s11 -> s11 [0, 65535] { R11953 += 1, R11909 += 1 };
  s11 -> s11 [80, 65535] { R11953 += 1, R11909 += 1, R11533 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11953 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s2 [0, 65535] { R11955 += 1, R11910 += 1, R11911 += 1 };
  s0 -> s0 [0, 65535] { R11954 += 1, R11955 += 1 };
  s0 -> s3 [73, 73] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s4 [73, 73] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s1 [74, 65535] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [0, 72] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11955 += 1 };
  s1 -> s3 [73, 73] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s4 [73, 73] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [74, 65535] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s1 [0, 72] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11955 += 1, R11910 += 1, R11911 += 1 };
  s2 -> s3 [73, 73] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s4 [73, 73] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s1 [74, 65535] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s3 -> s3 [0, 65535] { R11955 += 1, R11911 += 1, R11536 += 1, R11537 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11955 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11955 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11955 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s0 -> s2 [0, 72] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s0 -> s3 [0, 65535] { R11957 += 1, R11912 += 1, R11913 += 1 };
  s0 -> s0 [0, 65535] { R11956 += 1, R11957 += 1 };
  s0 -> s4 [73, 73] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s0 -> s5 [73, 73] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s0 -> s6 [73, 73] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s0 -> s7 [73, 73] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s0 -> s1 [74, 76] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s0 -> s2 [74, 65535] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s0 -> s8 [77, 77] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s0 -> s1 [81, 65535] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s1 -> s1 [0, 72] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s1 -> s5 [73, 73] { R11957 += 1, R11913 += 1 };
  s1 -> s6 [73, 73] { R11957 += 1, R11913 += 1 };
  s1 -> s1 [74, 76] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s1 -> s1 [74, 65535] { R11957 += 1, R11913 += 1 };
  s1 -> s8 [77, 77] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s1 -> s1 [81, 65535] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s2 -> s1 [0, 72] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s2 -> s2 [0, 72] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s2 -> s4 [73, 73] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s2 -> s5 [73, 73] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s2 -> s6 [73, 73] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s2 -> s7 [73, 73] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s2 -> s1 [74, 76] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s2 -> s2 [74, 65535] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s2 -> s8 [77, 77] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s2 -> s1 [81, 65535] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s3 -> s1 [0, 72] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s3 -> s2 [0, 72] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s3 -> s3 [0, 65535] { R11957 += 1, R11912 += 1, R11913 += 1 };
  s3 -> s4 [73, 73] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s3 -> s5 [73, 73] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s3 -> s6 [73, 73] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s3 -> s7 [73, 73] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s3 -> s1 [74, 76] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s3 -> s2 [74, 65535] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s3 -> s8 [77, 77] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s3 -> s1 [81, 65535] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s4 -> s5 [0, 76] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s4 -> s4 [0, 65535] { R11957 += 1, R11913 += 1, R11854 += 1, R11855 += 1 };
  s4 -> s11 [77, 77] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s4 -> s5 [81, 65535] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s5 -> s5 [0, 76] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s5 -> s5 [0, 65535] { R11957 += 1, R11913 += 1 };
  s5 -> s11 [77, 77] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s5 -> s5 [81, 65535] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s8 -> s8 [0, 72] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s8 -> s8 [0, 65535] { R11957 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R11957 += 1, R11913 += 1 };
  s8 -> s11 [73, 73] { R11957 += 1, R11913 += 1 };
  s8 -> s8 [74, 77] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s8 -> s8 [74, 65535] { R11957 += 1, R11913 += 1 };
  s8 -> s8 [81, 65535] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11957 += 1 };
  s11 -> s11 [0, 77] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s11 -> s12 [0, 65535] { R11957 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11957 += 1, R11913 += 1 };
  s11 -> s11 [81, 65535] { R11957 += 1, R11913 += 1, R11855 += 1 };
  s12 -> s12 [0, 65535] { R11957 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R11957 && R20 - R11957 = -1 && R21 = R11957 && R22 - R11957 = -1 && R23 = R11957 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11535 + -1*R11533 - R53 = 0 && R52 + R11534 + R11532 = 0 && R11898 = 0 && R11899 = 0 && R11904 = 0 && R11905 = 0 && R11908 = 0 && R11909 = 0 && R11912 = 0 && R11913 = 0 && R11914 = 0 && R11915 = R11957 && R11916 = 0 && R11917 = R11957 && R11918 = 0 && R11919 = R11957 && R11920 = 0 && R11921 = R11957 && R11922 = 0 && R11923 = R11957 && R11924 = 0 && R11925 = R11957 && R11926 = 0 && R11927 = R11957 && R11928 = 0 && R11929 = R11957 && R11930 = 0 && R11931 = R11957 && R11932 = 0 && R11933 = R11957 && R11934 = 0 && R11935 = R11957 && R11936 = 0 && R11937 = R11957 && R11938 = 0 && R11939 = R11957 && R11940 = 0 && R11941 = R11957 && R11942 = 0 && R11943 = R11957 && R11944 = 0 && R11945 = R11957 && R11946 = 0 && R11947 = R11957 && R11948 = 0 && R11949 = R11957 && R11950 = 0 && R11951 = R11957 && R11952 = 0 && R11953 = R11957 && R11954 = 0 && R11955 = R11957 && R11956 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11535 + -1*R11533 - R53 < 1 && 0 < R11957 && (R1 != 0 || R17 = 0 || (R11858 = 0 && R11859 = 0)) && (R1 != 0 || R17 = 0 || (R11860 = 0 && R11861 = 0)) && (R1 != 0 || R17 = 0 || (R11862 = 0 && R11863 = 0)) && (R1 != 0 || R17 = 0 || (R11864 = 0 && R11865 = 0)) && (R1 != 0 || R17 = 0 || (R11866 = 0 && R11867 = 0)) && (R1 != 0 || R17 = 0 || (R11868 = 0 && R11869 = 0)) && (R1 != 0 || R17 = 0 || (R11870 = 0 && R11871 = 0)) && (R1 != 0 || R17 = 0 || (R11872 = 0 && R11873 = 0)) && (R1 != 0 || R17 = 0 || (R11874 = 0 && R11875 = 0)) && (R1 != 0 || R17 = 0 || (R11876 = 0 && R11877 = 0)) && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R11535 + R11533 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R11535 + R11533 < 1))) && (R11858 != 0 || R1 = R11859 || R1 < 1) && (R11860 != 0 || R1 = R11861 || R1 < 1) && (R11862 != 0 || R1 = R11863 || R1 < 1) && (R11864 != 0 || R1 = R11865 || R1 < 1) && (R11866 != 0 || R1 = R11867 || R1 < 1) && (R11868 != 0 || R1 = R11869 || R1 < 1) && (R11870 != 0 || R1 = R11871 || R1 < 1) && (R11872 != 0 || R1 = R11873 || R1 < 1) && (R11874 != 0 || R1 = R11875 || R1 < 1) && (R11876 != 0 || R1 = R11877 || R1 < 1) && (R18 = 0 || (R11896 = 0 && R11897 = 0)) && (R18 = 0 || (R11900 = 0 && R11901 = 0)) && (R18 = 0 || (R11902 = 0 && R11903 = 0)) && (R18 = 0 || (R11906 = 0 && R11907 = 0)) && (R18 = 0 || (R11910 = 0 && R11911 = 0)) && (R19 = 0 || (R11878 = 0 && R11879 = 0)) && (R19 = 0 || (R11880 = 0 && R11881 = 0)) && (R19 = 0 || (R11882 = 0 && R11883 = 0)) && (R19 = 0 || (R11884 = 0 && R11885 = 0)) && (R19 = 0 || (R11886 = 0 && R11887 = 0)) && (R19 = 0 || (R11888 = 0 && R11889 = 0)) && (R19 = 0 || (R11890 = 0 && R11891 = 0)) && (R19 = 0 || (R11892 = 0 && R11893 = 0)) && (R19 = 0 || (R11894 = 0 && R11895 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0)) && (R58 + R11541 + R11538 = 0 || (R56 + R11539 + R11536 = 0 && R57 + R11540 + R11537 = 0)) && (R58 + R11541 + R11538 = 0 || (R62 + R11856 + R11854 = 0 && R63 + R11857 + R11855 = 0)) && (R11858 = 0 || R1 < 1) && (R11860 = 0 || R1 < 1) && (R11862 = 0 || R1 < 1) && (R11864 = 0 || R1 < 1) && (R11866 = 0 || R1 < 1) && (R11868 = 0 || R1 < 1) && (R11870 = 0 || R1 < 1) && (R11872 = 0 || R1 < 1) && (R11874 = 0 || R1 < 1) && (R11876 = 0 || R1 < 1);
// End of Parikh automata intersection problem
