// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10252, R10253, R10254, R10255, R11, R11100, R11101, R11102, R11103, R11104, R11105, R11418, R11419, R11420, R11421, R11422, R11423, R11424, R11425, R11426, R11427, R11428, R11429, R11430, R11431, R11432, R11433, R11434, R11435, R11436, R11437, R11438, R11439, R11440, R11441, R11442, R11443, R11444, R11445, R11446, R11447, R11448, R11449, R11450, R11451, R11452, R11453, R11454, R11455, R11456, R11457, R11458, R11459, R11460, R11461, R11462, R11463, R11464, R11465, R11466, R11467, R11468, R11469, R11470, R11471, R11472, R11473, R11474, R11475, R11476, R11477, R11478, R11479, R11480, R11481, R11482, R11483, R11484, R11485, R11486, R11487, R11488, R11489, R11490, R11491, R11492, R11493, R11494, R11495, R11496, R11497, R11498, R11499, R11500, R11501, R11502, R11503, R11504, R11505, R11506, R11507, R11508, R11509, R11510, R11511, R11512, R11513, R11514, R11515, R11516, R11517, R11518, R11519, R11520, R11521, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R11442 += 1, R11443 += 1 };
  s0 -> s1 [0, 65535] { R11443 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11443 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R11445 += 1 };
  s0 -> s0 [0, 65535] { R11444 += 1, R11445 += 1 };
  s0 -> s2 [73, 73] { R11445 += 1 };
  s0 -> s3 [73, 73] { R11445 += 1 };
  s0 -> s1 [78, 65535] { R11445 += 1 };
  s1 -> s1 [0, 72] { R11445 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11445 += 1 };
  s1 -> s3 [73, 73] { R11445 += 1 };
  s1 -> s1 [78, 65535] { R11445 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R11445 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R11445 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R11447 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11446 += 1, R11447 += 1 };
  s0 -> s2 [73, 73] { R11447 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R11447 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R11447 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R11447 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11447 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R11447 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R11447 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11447 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R11449 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11448 += 1, R11449 += 1 };
  s0 -> s2 [73, 73] { R11449 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R11449 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R11449 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R11449 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11449 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R11449 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R11449 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R11449 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R11451 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11450 += 1, R11451 += 1 };
  s0 -> s2 [73, 73] { R11451 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R11451 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R11451 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R11451 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11451 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R11451 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R11451 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R11451 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R11453 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11452 += 1, R11453 += 1 };
  s0 -> s2 [73, 73] { R11453 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R11453 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R11453 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R11453 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11453 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R11453 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R11453 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11453 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R11455 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11454 += 1, R11455 += 1 };
  s0 -> s2 [73, 73] { R11455 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R11455 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R11455 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R11455 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11455 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R11455 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R11455 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11455 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R11457 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11456 += 1, R11457 += 1 };
  s0 -> s2 [73, 73] { R11457 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R11457 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R11457 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R11457 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11457 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R11457 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R11457 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R11457 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R11459 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11458 += 1, R11459 += 1 };
  s0 -> s2 [73, 73] { R11459 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R11459 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R11459 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R11459 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11459 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R11459 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R11459 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11459 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R11479 += 1 };
  s0 -> s0 [0, 65535] { R11478 += 1, R11479 += 1 };
  s0 -> s2 [73, 73] { R11479 += 1 };
  s0 -> s1 [74, 65535] { R11479 += 1 };
  s1 -> s1 [0, 72] { R11479 += 1 };
  s1 -> s2 [73, 73] { R11479 += 1 };
  s1 -> s1 [74, 65535] { R11479 += 1 };
  s2 -> s2 [0, 65535] { R11479 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11481 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R11480 += 1, R11481 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11481 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R11483 += 1 };
  s0 -> s0 [0, 65535] { R11482 += 1, R11483 += 1 };
  s0 -> s2 [0, 65535] { R11483 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R11483 += 1 };
  s0 -> s1 [74, 65535] { R11483 += 1 };
  s1 -> s1 [0, 72] { R11483 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R11483 += 1 };
  s1 -> s1 [74, 65535] { R11483 += 1 };
  s2 -> s1 [0, 72] { R11483 += 1 };
  s2 -> s2 [0, 65535] { R11483 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R11483 += 1 };
  s2 -> s1 [74, 65535] { R11483 += 1 };
  s3 -> s3 [0, 65535] { R11483 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R11485 += 1, R11423 += 1 };
  s0 -> s0 [0, 65535] { R11484 += 1, R11485 += 1 };
  s0 -> s2 [0, 65535] { R11485 += 1, R11422 += 1, R11423 += 1 };
  s0 -> s1 [74, 65535] { R11485 += 1, R11423 += 1 };
  s1 -> s1 [0, 72] { R11485 += 1, R11423 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11485 += 1 };
  s1 -> s1 [74, 65535] { R11485 += 1, R11423 += 1 };
  s2 -> s1 [0, 72] { R11485 += 1, R11423 += 1 };
  s2 -> s2 [0, 65535] { R11485 += 1, R11422 += 1, R11423 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R11485 += 1, R11423 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11487 += 1, R11424 += 1, R11425 += 1 };
  s0 -> s2 [0, 65535] { R11487 += 1, R11425 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R11486 += 1, R11487 += 1 };
  s1 -> s1 [0, 65535] { R11487 += 1, R11424 += 1, R11425 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R11487 += 1, R11425 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11487 += 1, R11425 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R11487 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11487 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R11489 += 1, R11427 += 1 };
  s0 -> s0 [0, 65535] { R11488 += 1, R11489 += 1 };
  s0 -> s2 [0, 65535] { R11489 += 1, R11426 += 1, R11427 += 1 };
  s0 -> s1 [77, 65535] { R11489 += 1, R11427 += 1 };
  s1 -> s1 [0, 73] { R11489 += 1, R11427 += 1 };
  s1 -> s1 [0, 65535] { R11489 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R11489 += 1, R11427 += 1 };
  s2 -> s1 [0, 73] { R11489 += 1, R11427 += 1 };
  s2 -> s2 [0, 65535] { R11489 += 1, R11426 += 1, R11427 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R11489 += 1, R11427 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R11490 += 1, R11491 += 1 };
  s0 -> s1 [0, 65535] { R11491 += 1, R11429 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R11491 += 1, R11428 += 1, R11429 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11491 += 1, R11429 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R11491 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11491 += 1, R11429 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R11491 += 1, R11428 += 1, R11429 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11491 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R11493 += 1, R11431 += 1 };
  s0 -> s0 [0, 65535] { R11492 += 1, R11493 += 1 };
  s0 -> s2 [0, 65535] { R11493 += 1, R11430 += 1, R11431 += 1 };
  s0 -> s3 [0, 65535] { R11493 += 1, R11431 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R11493 += 1, R11431 += 1 };
  s1 -> s1 [0, 76] { R11493 += 1, R11431 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11493 += 1 };
  s1 -> s1 [78, 65535] { R11493 += 1, R11431 += 1 };
  s2 -> s1 [0, 76] { R11493 += 1, R11431 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11493 += 1, R11430 += 1, R11431 += 1 };
  s2 -> s3 [0, 65535] { R11493 += 1, R11431 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R11493 += 1, R11431 += 1 };
  s3 -> s1 [0, 76] { R11493 += 1, R11431 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11493 += 1 };
  s3 -> s3 [0, 65535] { R11493 += 1, R11431 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R11493 += 1, R11431 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11493 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R11495 += 1, R11433 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R11495 += 1, R11432 += 1, R11433 += 1 };
  s0 -> s3 [0, 65535] { R11495 += 1, R11433 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R11494 += 1, R11495 += 1 };
  s0 -> s1 [78, 65535] { R11495 += 1, R11433 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R11495 += 1, R11433 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R11495 += 1, R11433 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11495 += 1 };
  s1 -> s1 [78, 65535] { R11495 += 1, R11433 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R11495 += 1, R11433 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11495 += 1, R11432 += 1, R11433 += 1 };
  s2 -> s3 [0, 65535] { R11495 += 1, R11433 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R11495 += 1, R11433 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R11495 += 1, R11433 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11495 += 1 };
  s3 -> s3 [0, 65535] { R11495 += 1, R11433 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R11495 += 1, R11433 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11495 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R11497 += 1, R11434 += 1, R11435 += 1 };
  s0 -> s0 [0, 65535] { R11496 += 1, R11497 += 1 };
  s0 -> s2 [0, 65535] { R11497 += 1, R11435 += 1 };
  s1 -> s1 [0, 65535] { R11497 += 1, R11434 += 1, R11435 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11497 += 1, R11435 += 1 };
  s2 -> s3 [0, 65535] { R11497 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11497 += 1, R11435 += 1 };
  s3 -> s3 [0, 65535] { R11497 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s0 -> s0 [0, 65535] { R11498 += 1, R11499 += 1 };
  s0 -> s2 [0, 65535] { R11499 += 1, R11437 += 1, R10254 += 1, R10255 += 1 };
  s0 -> s3 [0, 65535] { R11499 += 1, R11436 += 1, R11437 += 1 };
  s0 -> s4 [80, 80] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s0 -> s1 [81, 65535] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s1 -> s1 [0, 77] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s1 -> s4 [80, 80] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s1 -> s1 [81, 65535] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s2 -> s1 [0, 77] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R11499 += 1, R11437 += 1, R10254 += 1, R10255 += 1 };
  s2 -> s4 [80, 80] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s2 -> s1 [81, 65535] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s3 -> s1 [0, 77] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s3 -> s2 [0, 65535] { R11499 += 1, R11437 += 1, R10254 += 1, R10255 += 1 };
  s3 -> s3 [0, 65535] { R11499 += 1, R11436 += 1, R11437 += 1 };
  s3 -> s4 [80, 80] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s3 -> s1 [81, 65535] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s4 -> s4 [0, 77] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s4 -> s5 [0, 65535] { R11499 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11499 += 1, R11437 += 1 };
  s4 -> s4 [80, 65535] { R11499 += 1, R11437 += 1, R10255 += 1 };
  s5 -> s5 [0, 65535] { R11499 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11501 += 1, R11439 += 1 };
  s0 -> s2 [0, 65535] { R11501 += 1, R11438 += 1, R11439 += 1 };
  s0 -> s0 [0, 65535] { R11500 += 1, R11501 += 1 };
  s1 -> s4 [0, 65535] { R11501 += 1 };
  s1 -> s1 [0, 65535] { R11501 += 1, R11439 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11501 += 1, R11439 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11501 += 1, R11438 += 1, R11439 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11501 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R11503 += 1, R11441 += 1, R11421 += 1 };
  s0 -> s2 [0, 65535] { R11503 += 1, R11440 += 1, R11441 += 1 };
  s0 -> s1 [0, 65535] { R11503 += 1, R11441 += 1 };
  s0 -> s0 [0, 65535] { R11502 += 1, R11503 += 1 };
  s0 -> s1 [81, 65535] { R11503 += 1, R11441 += 1, R11421 += 1 };
  s1 -> s1 [0, 77] { R11503 += 1, R11441 += 1, R11421 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11503 += 1 };
  s1 -> s1 [0, 65535] { R11503 += 1, R11441 += 1 };
  s1 -> s1 [81, 65535] { R11503 += 1, R11441 += 1, R11421 += 1 };
  s2 -> s1 [0, 77] { R11503 += 1, R11441 += 1, R11421 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11503 += 1, R11440 += 1, R11441 += 1 };
  s2 -> s1 [0, 65535] { R11503 += 1, R11441 += 1 };
  s2 -> s1 [81, 65535] { R11503 += 1, R11441 += 1, R11421 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11503 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R11504 += 1, R11505 += 1 };
  s0 -> s1 [0, 65535] { R11505 += 1, R11461 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R11505 += 1, R11460 += 1, R11461 += 1 };
  s1 -> s1 [0, 65535] { R11505 += 1, R11461 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R11505 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11505 += 1, R11461 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R11505 += 1, R11460 += 1, R11461 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11505 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R11507 += 1, R11463 += 1 };
  s0 -> s2 [0, 65535] { R11507 += 1, R11462 += 1, R11463 += 1 };
  s0 -> s0 [0, 65535] { R11506 += 1, R11507 += 1 };
  s0 -> s3 [73, 73] { R11507 += 1, R11463 += 1 };
  s0 -> s4 [73, 73] { R11507 += 1, R11463 += 1 };
  s0 -> s5 [77, 77] { R11507 += 1, R11463 += 1 };
  s0 -> s1 [78, 65535] { R11507 += 1, R11463 += 1 };
  s1 -> s1 [0, 72] { R11507 += 1, R11463 += 1 };
  s1 -> s3 [73, 73] { R11507 += 1, R11463 += 1 };
  s1 -> s4 [73, 73] { R11507 += 1, R11463 += 1 };
  s1 -> s5 [77, 77] { R11507 += 1, R11463 += 1 };
  s1 -> s1 [78, 65535] { R11507 += 1, R11463 += 1 };
  s2 -> s1 [0, 72] { R11507 += 1, R11463 += 1 };
  s2 -> s2 [0, 65535] { R11507 += 1, R11462 += 1, R11463 += 1 };
  s2 -> s3 [73, 73] { R11507 += 1, R11463 += 1 };
  s2 -> s4 [73, 73] { R11507 += 1, R11463 += 1 };
  s2 -> s5 [77, 77] { R11507 += 1, R11463 += 1 };
  s2 -> s1 [78, 65535] { R11507 += 1, R11463 += 1 };
  s4 -> s4 [0, 73] { R11507 += 1, R11463 += 1 };
  s4 -> s7 [77, 77] { R11507 += 1, R11463 += 1 };
  s4 -> s4 [78, 65535] { R11507 += 1, R11463 += 1 };
  s5 -> s5 [0, 72] { R11507 += 1, R11463 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11507 += 1 };
  s5 -> s7 [73, 73] { R11507 += 1, R11463 += 1 };
  s5 -> s8 [73, 73] { R11507 += 1, R11463 += 1 };
  s5 -> s5 [77, 65535] { R11507 += 1, R11463 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R11507 += 1, R11463 += 1 };
  s7 -> s7 [0, 65535] { R11507 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R11507 += 1, R11463 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11507 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R11509 += 1, R11465 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R11509 += 1, R11464 += 1, R11465 += 1 };
  s0 -> s0 [0, 65535] { R11508 += 1, R11509 += 1 };
  s0 -> s3 [73, 73] { R11509 += 1, R11465 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R11509 += 1, R11465 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R11509 += 1, R11465 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R11509 += 1, R11465 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R11509 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11509 += 1, R11465 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R11509 += 1, R11465 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R11509 += 1, R11465 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R11509 += 1, R11465 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R11509 += 1, R11464 += 1, R11465 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R11509 += 1, R11465 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R11509 += 1, R11465 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R11509 += 1, R11465 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R11509 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11509 += 1, R11465 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11509 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11509 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R11511 += 1, R11467 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R11511 += 1, R11466 += 1, R11467 += 1 };
  s0 -> s0 [0, 65535] { R11510 += 1, R11511 += 1 };
  s0 -> s3 [73, 73] { R11511 += 1, R11467 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R11511 += 1, R11467 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R11511 += 1, R11467 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R11511 += 1, R11467 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11511 += 1 };
  s1 -> s3 [73, 73] { R11511 += 1, R11467 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R11511 += 1, R11467 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R11511 += 1, R11467 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R11511 += 1, R11467 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11511 += 1, R11466 += 1, R11467 += 1 };
  s2 -> s3 [73, 73] { R11511 += 1, R11467 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R11511 += 1, R11467 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R11511 += 1, R11467 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11511 += 1, R11467 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R11511 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11511 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11511 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R11513 += 1, R11468 += 1, R11469 += 1 };
  s0 -> s0 [0, 65535] { R11512 += 1, R11513 += 1 };
  s0 -> s3 [73, 73] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11513 += 1 };
  s1 -> s3 [73, 73] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11513 += 1, R11468 += 1, R11469 += 1 };
  s2 -> s3 [73, 73] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R11513 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11513 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11513 += 1, R11469 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R11513 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s3 [0, 65535] { R11515 += 1, R11470 += 1, R11471 += 1 };
  s0 -> s0 [0, 65535] { R11514 += 1, R11515 += 1 };
  s0 -> s4 [73, 73] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [73, 73] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s7 [73, 73] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [74, 65535] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [74, 65535] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 72] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 72] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [73, 73] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s5 [73, 73] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s6 [73, 73] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s7 [73, 73] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [74, 65535] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [74, 65535] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 72] { R11515 += 1, R11471 += 1 };
  s2 -> s2 [0, 72] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [73, 73] { R11515 += 1, R11471 += 1 };
  s2 -> s8 [73, 73] { R11515 += 1, R11471 += 1 };
  s2 -> s5 [73, 73] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [73, 73] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [74, 65535] { R11515 += 1, R11471 += 1 };
  s2 -> s2 [74, 65535] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 72] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R11515 += 1, R11470 += 1, R11471 += 1 };
  s3 -> s4 [73, 73] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [73, 73] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s7 [73, 73] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [74, 65535] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [74, 65535] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s4 [0, 65535] { R11515 += 1, R11471 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s5 [0, 65535] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R11515 += 1, R11471 += 1 };
  s5 -> s5 [0, 65535] { R11515 += 1, R11471 += 1, R7707 += 1, R7708 += 1 };
  s8 -> s9 [0, 65535] { R11515 += 1 };
  s8 -> s8 [0, 65535] { R11515 += 1, R11471 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R11515 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R11515 += 1, R11471 += 1 };
  s11 -> s11 [0, 65535] { R11515 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R11515 += 1, R11471 += 1 };
  s11 -> s8 [73, 73] { R11515 += 1, R11471 += 1 };
  s11 -> s11 [74, 65535] { R11515 += 1, R11471 += 1 };
  s12 -> s12 [0, 65535] { R11515 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s2 [0, 65535] { R11517 += 1, R11472 += 1, R11473 += 1 };
  s0 -> s0 [0, 65535] { R11516 += 1, R11517 += 1 };
  s0 -> s3 [73, 73] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s4 [73, 73] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [74, 65535] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [0, 72] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [0, 65535] { R11517 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s4 [73, 73] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [74, 65535] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [0, 72] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11517 += 1, R11472 += 1, R11473 += 1 };
  s2 -> s3 [73, 73] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [73, 73] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [74, 65535] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11517 += 1, R11473 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s6 [0, 65535] { R11517 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11517 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11517 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s2 [0, 72] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s0 [0, 65535] { R11518 += 1, R11519 += 1 };
  s0 -> s3 [0, 65535] { R11519 += 1, R11474 += 1, R11475 += 1 };
  s0 -> s4 [73, 73] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s5 [73, 73] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s6 [73, 73] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s7 [73, 73] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s1 [74, 65535] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s2 [74, 65535] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s1 -> s11 [0, 72] { R11519 += 1, R11475 += 1 };
  s1 -> s1 [0, 72] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s8 [73, 73] { R11519 += 1, R11475 += 1 };
  s1 -> s5 [73, 73] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s12 [73, 73] { R11519 += 1, R11475 += 1 };
  s1 -> s7 [73, 73] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s11 [74, 65535] { R11519 += 1, R11475 += 1 };
  s1 -> s1 [74, 65535] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s1 [0, 72] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s2 [0, 72] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s2 -> s4 [73, 73] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s2 -> s5 [73, 73] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s6 [73, 73] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s2 -> s7 [73, 73] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s1 [74, 65535] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s2 [74, 65535] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s1 [0, 72] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s2 [0, 72] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s3 [0, 65535] { R11519 += 1, R11474 += 1, R11475 += 1 };
  s3 -> s4 [73, 73] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s5 [73, 73] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s6 [73, 73] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s7 [73, 73] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s1 [74, 65535] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s2 [74, 65535] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s4 -> s4 [0, 65535] { R11519 += 1, R11475 += 1, R11100 += 1, R11101 += 1 };
  s4 -> s7 [0, 65535] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s7 -> s8 [0, 65535] { R11519 += 1, R11475 += 1 };
  s7 -> s7 [0, 65535] { R11519 += 1, R11475 += 1, R11101 += 1, R11102 += 1 };
  s8 -> s8 [0, 65535] { R11519 += 1, R11475 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R11519 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11519 += 1 };
  s11 -> s11 [0, 72] { R11519 += 1, R11475 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11519 += 1 };
  s11 -> s8 [73, 73] { R11519 += 1, R11475 += 1 };
  s11 -> s12 [73, 73] { R11519 += 1, R11475 += 1 };
  s11 -> s11 [74, 65535] { R11519 += 1, R11475 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11519 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s0 -> s2 [0, 72] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s0 -> s3 [0, 65535] { R11521 += 1, R11476 += 1, R11477 += 1 };
  s0 -> s0 [0, 65535] { R11520 += 1, R11521 += 1 };
  s0 -> s4 [73, 73] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s0 -> s5 [73, 73] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s0 -> s6 [73, 73] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s0 -> s7 [73, 73] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s0 -> s2 [74, 76] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s0 -> s1 [74, 65535] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s0 -> s8 [77, 77] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s0 -> s2 [81, 65535] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s1 -> s1 [0, 72] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s1 -> s2 [0, 72] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s1 -> s4 [73, 73] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s1 -> s5 [73, 73] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s1 -> s6 [73, 73] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s1 -> s7 [73, 73] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s1 -> s2 [74, 76] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s1 -> s1 [74, 65535] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s1 -> s8 [77, 77] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s1 -> s2 [81, 65535] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s2 -> s2 [0, 72] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s2 -> s4 [73, 73] { R11521 += 1, R11477 += 1 };
  s2 -> s6 [73, 73] { R11521 += 1, R11477 += 1 };
  s2 -> s2 [74, 76] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s2 -> s2 [74, 65535] { R11521 += 1, R11477 += 1 };
  s2 -> s8 [77, 77] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s2 -> s2 [81, 65535] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s3 -> s1 [0, 72] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s3 -> s2 [0, 72] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s3 -> s3 [0, 65535] { R11521 += 1, R11476 += 1, R11477 += 1 };
  s3 -> s4 [73, 73] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s3 -> s5 [73, 73] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s3 -> s6 [73, 73] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s3 -> s7 [73, 73] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s3 -> s2 [74, 76] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s3 -> s1 [74, 65535] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s3 -> s8 [77, 77] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s3 -> s2 [81, 65535] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s4 -> s4 [0, 76] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s4 -> s4 [0, 65535] { R11521 += 1, R11477 += 1 };
  s4 -> s10 [77, 77] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s4 -> s4 [81, 65535] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s7 -> s4 [0, 76] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s7 -> s7 [0, 65535] { R11521 += 1, R11477 += 1, R11418 += 1, R11419 += 1 };
  s7 -> s10 [77, 77] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s7 -> s4 [81, 65535] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s8 -> s8 [0, 72] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11521 += 1 };
  s8 -> s10 [73, 73] { R11521 += 1, R11477 += 1 };
  s8 -> s11 [73, 73] { R11521 += 1, R11477 += 1 };
  s8 -> s8 [74, 77] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s8 -> s8 [74, 65535] { R11521 += 1, R11477 += 1 };
  s8 -> s8 [81, 65535] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s10 -> s10 [0, 65535] { R11521 += 1, R11477 += 1 };
  s10 -> s12 [0, 65535] { R11521 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [81, 65535] { R11521 += 1, R11477 += 1, R11419 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11521 += 1 };
  s12 -> s12 [0, 65535] { R11521 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R11437 && R2 = R11521 && R20 - R11521 = -1 && R21 = R11521 && R22 - R11521 = -1 && R23 = R11521 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R11436 = 0 && R11462 = 0 && R11463 = 0 && R11470 = 0 && R11471 = 0 && R11474 = 0 && R11475 = 0 && R11476 = 0 && R11477 = 0 && R11478 = 0 && R11479 = R11521 && R11480 = 0 && R11481 = R11521 && R11482 = 0 && R11483 = R11521 && R11484 = 0 && R11485 = R11521 && R11486 = 0 && R11487 = R11521 && R11488 = 0 && R11489 = R11521 && R11490 = 0 && R11491 = R11521 && R11492 = 0 && R11493 = R11521 && R11494 = 0 && R11495 = R11521 && R11496 = 0 && R11497 = R11521 && R11498 = 0 && R11499 = R11521 && R11500 = 0 && R11501 = R11521 && R11502 = 0 && R11503 = R11521 && R11504 = 0 && R11505 = R11521 && R11506 = 0 && R11507 = R11521 && R11508 = 0 && R11509 = R11521 && R11510 = 0 && R11511 = R11521 && R11512 = 0 && R11513 = R11521 && R11514 = 0 && R11515 = R11521 && R11516 = 0 && R11517 = R11521 && R11518 = 0 && R11519 = R11521 && R11520 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && -1 < R11437 && 0 < R11521 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R10255 + R10253 < 1))) && (R11422 != 0 || R11423 = R11437 || (R17 = 0 && R11437 = 0)) && (R11424 != 0 || R11425 = R11437 || (R17 = 0 && R11437 = 0)) && (R11426 != 0 || R11427 = R11437 || (R17 = 0 && R11437 = 0)) && (R11428 != 0 || R11429 = R11437 || (R17 = 0 && R11437 = 0)) && (R11430 != 0 || R11431 = R11437 || (R17 = 0 && R11437 = 0)) && (R11432 != 0 || R11433 = R11437 || (R17 = 0 && R11437 = 0)) && (R11434 != 0 || R11435 = R11437 || (R17 = 0 && R11437 = 0)) && (R11438 != 0 || R11437 = R11439 || (R17 = 0 && R11437 = 0)) && (R11440 != 0 || R11437 = R11441 || (R17 = 0 && R11437 = 0)) && (R18 = 0 || (R11460 = 0 && R11461 = 0)) && (R18 = 0 || (R11464 = 0 && R11465 = 0)) && (R18 = 0 || (R11466 = 0 && R11467 = 0)) && (R18 = 0 || (R11468 = 0 && R11469 = 0)) && (R18 = 0 || (R11472 = 0 && R11473 = 0)) && (R19 = 0 || (R11442 = 0 && R11443 = 0)) && (R19 = 0 || (R11444 = 0 && R11445 = 0)) && (R19 = 0 || (R11446 = 0 && R11447 = 0)) && (R19 = 0 || (R11448 = 0 && R11449 = 0)) && (R19 = 0 || (R11450 = 0 && R11451 = 0)) && (R19 = 0 || (R11452 = 0 && R11453 = 0)) && (R19 = 0 || (R11454 = 0 && R11455 = 0)) && (R19 = 0 || (R11456 = 0 && R11457 = 0)) && (R19 = 0 || (R11458 = 0 && R11459 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R11105 + R11102 = 0 || (R56 + R11103 + R11100 = 0 && R57 + R11104 + R11101 = 0)) && (R58 + R11105 + R11102 = 0 || (R62 + R11420 + R11418 = 0 && R63 + R11421 + R11419 = 0)) && (R11422 = 0 || (R17 = 0 && R11437 = 0)) && (R11424 = 0 || (R17 = 0 && R11437 = 0)) && (R11426 = 0 || (R17 = 0 && R11437 = 0)) && (R11428 = 0 || (R17 = 0 && R11437 = 0)) && (R11430 = 0 || (R17 = 0 && R11437 = 0)) && (R11432 = 0 || (R17 = 0 && R11437 = 0)) && (R11434 = 0 || (R17 = 0 && R11437 = 0)) && (R11438 = 0 || (R17 = 0 && R11437 = 0)) && (R11440 = 0 || (R17 = 0 && R11437 = 0));
// End of Parikh automata intersection problem
