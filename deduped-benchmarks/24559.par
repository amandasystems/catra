// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R66, R67, R68, R6862, R6863, R6864, R6865, R6866, R6867, R6868, R6869, R6870, R6871, R6872, R6873, R6874, R6875, R6876, R6877, R6878, R6879, R6880, R6881, R6882, R6883, R6884, R6885, R6886, R6887, R6888, R6889, R6890, R6891, R6892, R6893, R6894, R6895, R6896, R6897, R6898, R6899, R69, R6900, R6901, R6902, R6903, R6904, R6905, R6906, R6907, R6908, R6909, R6910, R6911, R6912, R6913, R6914, R6915, R6916, R6917, R6918, R6919, R6920, R6921, R6922, R6923, R6924, R6925, R6926, R6927, R6928, R6929, R6930, R6931, R6932, R6933, R6934, R6935, R6936, R6937, R6938, R6939, R6940, R6941, R6942, R6943, R6944, R6945, R6946, R6947, R6948, R6949, R6950, R6951, R6952, R6953, R6954, R6955, R6956, R6957, R6958, R6959, R6960, R6961, R6962, R6963, R6964, R6965, R6966, R6967, R6968, R6969, R6970, R6971, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6892 += 1, R6893 += 1 };
  s0 -> s1 [0, 65535] { R6893 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6893 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R6895 += 1 };
  s0 -> s0 [0, 65535] { R6894 += 1, R6895 += 1 };
  s0 -> s2 [73, 73] { R6895 += 1 };
  s0 -> s3 [73, 73] { R6895 += 1 };
  s0 -> s1 [78, 65535] { R6895 += 1 };
  s1 -> s1 [0, 72] { R6895 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6895 += 1 };
  s1 -> s3 [73, 73] { R6895 += 1 };
  s1 -> s1 [78, 65535] { R6895 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R6895 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R6895 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R6897 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R6896 += 1, R6897 += 1 };
  s0 -> s2 [73, 73] { R6897 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R6897 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R6897 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R6897 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6897 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R6897 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R6897 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6897 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R6899 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R6898 += 1, R6899 += 1 };
  s0 -> s2 [73, 73] { R6899 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R6899 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R6899 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R6899 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6899 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R6899 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R6899 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6899 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R6901 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R6900 += 1, R6901 += 1 };
  s0 -> s2 [73, 73] { R6901 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R6901 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R6901 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R6901 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6901 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R6901 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R6901 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6901 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R6903 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6902 += 1, R6903 += 1 };
  s0 -> s2 [73, 73] { R6903 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R6903 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R6903 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R6903 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6903 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R6903 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R6903 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6903 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R6905 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R6904 += 1, R6905 += 1 };
  s0 -> s2 [73, 73] { R6905 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R6905 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R6905 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R6905 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6905 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R6905 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R6905 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6905 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R6907 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R6906 += 1, R6907 += 1 };
  s0 -> s2 [73, 73] { R6907 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R6907 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R6907 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R6907 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6907 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R6907 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R6907 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6907 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R6909 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R6908 += 1, R6909 += 1 };
  s0 -> s2 [73, 73] { R6909 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R6909 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R6909 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R6909 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6909 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R6909 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R6909 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6909 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R6929 += 1 };
  s0 -> s0 [0, 65535] { R6928 += 1, R6929 += 1 };
  s0 -> s2 [73, 73] { R6929 += 1 };
  s0 -> s1 [74, 65535] { R6929 += 1 };
  s1 -> s1 [0, 72] { R6929 += 1 };
  s1 -> s2 [73, 73] { R6929 += 1 };
  s1 -> s1 [74, 65535] { R6929 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6929 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6930 += 1, R6931 += 1 };
  s0 -> s1 [0, 65535] { R6931 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6931 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R6933 += 1 };
  s0 -> s2 [0, 65535] { R6933 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R6932 += 1, R6933 += 1 };
  s0 -> s3 [73, 73] { R6933 += 1 };
  s0 -> s1 [74, 65535] { R6933 += 1 };
  s1 -> s1 [0, 72] { R6933 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R6933 += 1 };
  s1 -> s1 [74, 65535] { R6933 += 1 };
  s2 -> s1 [0, 72] { R6933 += 1 };
  s2 -> s2 [0, 65535] { R6933 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R6933 += 1 };
  s2 -> s1 [74, 65535] { R6933 += 1 };
  s3 -> s3 [0, 65535] { R6933 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R6935 += 1, R6873 += 1 };
  s0 -> s0 [0, 65535] { R6934 += 1, R6935 += 1 };
  s0 -> s2 [0, 65535] { R6935 += 1, R6872 += 1, R6873 += 1 };
  s0 -> s1 [74, 65535] { R6935 += 1, R6873 += 1 };
  s1 -> s1 [0, 72] { R6935 += 1, R6873 += 1 };
  s1 -> s1 [0, 65535] { R6935 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R6935 += 1, R6873 += 1 };
  s2 -> s1 [0, 72] { R6935 += 1, R6873 += 1 };
  s2 -> s2 [0, 65535] { R6935 += 1, R6872 += 1, R6873 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R6935 += 1, R6873 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R6936 += 1, R6937 += 1 };
  s0 -> s1 [0, 65535] { R6937 += 1, R6874 += 1, R6875 += 1 };
  s0 -> s2 [0, 65535] { R6937 += 1, R6875 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6937 += 1, R6874 += 1, R6875 += 1 };
  s1 -> s2 [0, 65535] { R6937 += 1, R6875 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6937 += 1, R6875 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R6937 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6937 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R6939 += 1, R6877 += 1 };
  s0 -> s0 [0, 65535] { R6938 += 1, R6939 += 1 };
  s0 -> s2 [0, 65535] { R6939 += 1, R6876 += 1, R6877 += 1 };
  s0 -> s1 [77, 65535] { R6939 += 1, R6877 += 1 };
  s1 -> s1 [0, 73] { R6939 += 1, R6877 += 1 };
  s1 -> s1 [0, 65535] { R6939 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R6939 += 1, R6877 += 1 };
  s2 -> s1 [0, 73] { R6939 += 1, R6877 += 1 };
  s2 -> s2 [0, 65535] { R6939 += 1, R6876 += 1, R6877 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R6939 += 1, R6877 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6941 += 1, R6878 += 1, R6879 += 1 };
  s0 -> s0 [0, 65535] { R6940 += 1, R6941 += 1 };
  s0 -> s2 [0, 65535] { R6941 += 1, R6879 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R6941 += 1, R6878 += 1, R6879 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R6941 += 1, R6879 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6941 += 1, R6879 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R6941 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6941 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R6943 += 1, R6881 += 1 };
  s0 -> s0 [0, 65535] { R6942 += 1, R6943 += 1 };
  s0 -> s2 [0, 65535] { R6943 += 1, R6881 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R6943 += 1, R6880 += 1, R6881 += 1 };
  s0 -> s1 [78, 65535] { R6943 += 1, R6881 += 1 };
  s1 -> s1 [0, 76] { R6943 += 1, R6881 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6943 += 1 };
  s1 -> s1 [78, 65535] { R6943 += 1, R6881 += 1 };
  s2 -> s1 [0, 76] { R6943 += 1, R6881 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6943 += 1, R6881 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R6943 += 1 };
  s2 -> s1 [78, 65535] { R6943 += 1, R6881 += 1 };
  s3 -> s1 [0, 76] { R6943 += 1, R6881 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6943 += 1, R6881 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R6943 += 1, R6880 += 1, R6881 += 1 };
  s3 -> s1 [78, 65535] { R6943 += 1, R6881 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6943 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R6945 += 1, R6883 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R6945 += 1, R6883 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R6945 += 1, R6882 += 1, R6883 += 1 };
  s0 -> s0 [0, 65535] { R6944 += 1, R6945 += 1 };
  s0 -> s1 [78, 65535] { R6945 += 1, R6883 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R6945 += 1, R6883 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6945 += 1 };
  s1 -> s1 [0, 65535] { R6945 += 1, R6883 += 1 };
  s1 -> s1 [78, 65535] { R6945 += 1, R6883 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R6945 += 1, R6883 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6945 += 1, R6883 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R6945 += 1 };
  s2 -> s1 [78, 65535] { R6945 += 1, R6883 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R6945 += 1, R6883 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6945 += 1, R6883 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R6945 += 1, R6882 += 1, R6883 += 1 };
  s3 -> s1 [78, 65535] { R6945 += 1, R6883 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6945 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R6946 += 1, R6947 += 1 };
  s0 -> s1 [0, 65535] { R6947 += 1, R6885 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R6947 += 1, R6885 += 1 };
  s0 -> s3 [0, 65535] { R6947 += 1, R6884 += 1, R6885 += 1 };
  s1 -> s1 [0, 65535] { R6947 += 1, R6885 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s2 [0, 65535] { R6947 += 1, R6885 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6947 += 1 };
  s2 -> s2 [0, 65535] { R6947 += 1, R6885 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6947 += 1 };
  s3 -> s1 [0, 65535] { R6947 += 1, R6885 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s2 [0, 65535] { R6947 += 1, R6885 += 1 };
  s3 -> s3 [0, 65535] { R6947 += 1, R6884 += 1, R6885 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6947 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s0 -> s2 [0, 65535] { R6949 += 1, R6887 += 1, R6438 += 1, R6439 += 1 };
  s0 -> s0 [0, 65535] { R6948 += 1, R6949 += 1 };
  s0 -> s3 [0, 65535] { R6949 += 1, R6886 += 1, R6887 += 1 };
  s0 -> s4 [80, 80] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s0 -> s1 [81, 65535] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s1 -> s1 [0, 77] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s1 -> s4 [80, 80] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s1 -> s1 [81, 65535] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s2 -> s1 [0, 77] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R6949 += 1, R6887 += 1, R6438 += 1, R6439 += 1 };
  s2 -> s4 [80, 80] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s2 -> s1 [81, 65535] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s3 -> s1 [0, 77] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s3 -> s2 [0, 65535] { R6949 += 1, R6887 += 1, R6438 += 1, R6439 += 1 };
  s3 -> s3 [0, 65535] { R6949 += 1, R6886 += 1, R6887 += 1 };
  s3 -> s4 [80, 80] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s3 -> s1 [81, 65535] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s4 -> s4 [0, 77] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s4 -> s4 [0, 65535] { R6949 += 1, R6887 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6949 += 1 };
  s4 -> s4 [80, 65535] { R6949 += 1, R6887 += 1, R6439 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6949 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R6951 += 1, R6889 += 1 };
  s0 -> s0 [0, 65535] { R6950 += 1, R6951 += 1 };
  s0 -> s2 [0, 65535] { R6951 += 1, R6888 += 1, R6889 += 1 };
  s0 -> s3 [0, 65535] { R6951 += 1, R6889 += 1, R6866 += 1, R6867 += 1 };
  s1 -> s4 [0, 65535] { R6951 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6951 += 1, R6889 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6951 += 1, R6889 += 1 };
  s2 -> s2 [0, 65535] { R6951 += 1, R6888 += 1, R6889 += 1 };
  s2 -> s3 [0, 65535] { R6951 += 1, R6889 += 1, R6866 += 1, R6867 += 1 };
  s3 -> s4 [0, 65535] { R6951 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R6951 += 1, R6889 += 1 };
  s3 -> s3 [0, 65535] { R6951 += 1, R6889 += 1, R6866 += 1, R6867 += 1 };
  s4 -> s4 [0, 65535] { R6951 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s0 -> s2 [0, 65535] { R6953 += 1, R6890 += 1, R6891 += 1 };
  s0 -> s3 [0, 65535] { R6953 += 1, R6891 += 1, R6870 += 1, R6871 += 1 };
  s0 -> s0 [0, 65535] { R6952 += 1, R6953 += 1 };
  s0 -> s4 [77, 77] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s0 -> s5 [77, 77] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s0 -> s1 [81, 65535] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s1 -> s1 [0, 76] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s1 -> s1 [0, 65535] { R6953 += 1, R6891 += 1 };
  s1 -> s6 [0, 65535] { R6953 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [77, 77] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s1 -> s5 [77, 77] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s1 -> s1 [81, 65535] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s2 -> s1 [0, 76] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s2 -> s2 [0, 65535] { R6953 += 1, R6890 += 1, R6891 += 1 };
  s2 -> s3 [0, 65535] { R6953 += 1, R6891 += 1, R6870 += 1, R6871 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [77, 77] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s2 -> s5 [77, 77] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s2 -> s1 [81, 65535] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s3 -> s1 [0, 76] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s3 -> s3 [0, 65535] { R6953 += 1, R6891 += 1, R6870 += 1, R6871 += 1 };
  s3 -> s6 [0, 65535] { R6953 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [77, 77] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s3 -> s5 [77, 77] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s3 -> s1 [81, 65535] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s4 -> s4 [0, 65535] { R6953 += 1, R6891 += 1 };
  s4 -> s6 [0, 65535] { R6953 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 77] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s5 -> s5 [0, 65535] { R6953 += 1, R6891 += 1 };
  s5 -> s6 [0, 65535] { R6953 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [81, 65535] { R6953 += 1, R6891 += 1, R6871 += 1 };
  s6 -> s6 [0, 65535] { R6953 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6955 += 1, R6911 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R6954 += 1, R6955 += 1 };
  s0 -> s2 [0, 65535] { R6955 += 1, R6910 += 1, R6911 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6955 += 1, R6911 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R6955 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6955 += 1, R6911 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R6955 += 1, R6910 += 1, R6911 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6955 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R6957 += 1, R6913 += 1 };
  s0 -> s2 [0, 65535] { R6957 += 1, R6912 += 1, R6913 += 1 };
  s0 -> s0 [0, 65535] { R6956 += 1, R6957 += 1 };
  s0 -> s3 [73, 73] { R6957 += 1, R6913 += 1 };
  s0 -> s4 [73, 73] { R6957 += 1, R6913 += 1 };
  s0 -> s5 [77, 77] { R6957 += 1, R6913 += 1 };
  s0 -> s1 [78, 65535] { R6957 += 1, R6913 += 1 };
  s1 -> s1 [0, 72] { R6957 += 1, R6913 += 1 };
  s1 -> s3 [73, 73] { R6957 += 1, R6913 += 1 };
  s1 -> s4 [73, 73] { R6957 += 1, R6913 += 1 };
  s1 -> s5 [77, 77] { R6957 += 1, R6913 += 1 };
  s1 -> s1 [78, 65535] { R6957 += 1, R6913 += 1 };
  s2 -> s1 [0, 72] { R6957 += 1, R6913 += 1 };
  s2 -> s2 [0, 65535] { R6957 += 1, R6912 += 1, R6913 += 1 };
  s2 -> s3 [73, 73] { R6957 += 1, R6913 += 1 };
  s2 -> s4 [73, 73] { R6957 += 1, R6913 += 1 };
  s2 -> s5 [77, 77] { R6957 += 1, R6913 += 1 };
  s2 -> s1 [78, 65535] { R6957 += 1, R6913 += 1 };
  s4 -> s4 [0, 73] { R6957 += 1, R6913 += 1 };
  s4 -> s8 [77, 77] { R6957 += 1, R6913 += 1 };
  s4 -> s4 [78, 65535] { R6957 += 1, R6913 += 1 };
  s5 -> s5 [0, 72] { R6957 += 1, R6913 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6957 += 1 };
  s5 -> s7 [73, 73] { R6957 += 1, R6913 += 1 };
  s5 -> s8 [73, 73] { R6957 += 1, R6913 += 1 };
  s5 -> s5 [77, 65535] { R6957 += 1, R6913 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6957 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R6957 += 1, R6913 += 1 };
  s8 -> s8 [0, 65535] { R6957 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [77, 65535] { R6957 += 1, R6913 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R6959 += 1, R6915 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R6959 += 1, R6914 += 1, R6915 += 1 };
  s0 -> s0 [0, 65535] { R6958 += 1, R6959 += 1 };
  s0 -> s3 [73, 73] { R6959 += 1, R6915 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R6959 += 1, R6915 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R6959 += 1, R6915 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R6959 += 1, R6915 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6959 += 1 };
  s1 -> s3 [73, 73] { R6959 += 1, R6915 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R6959 += 1, R6915 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R6959 += 1, R6915 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R6959 += 1, R6915 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6959 += 1, R6914 += 1, R6915 += 1 };
  s2 -> s3 [73, 73] { R6959 += 1, R6915 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R6959 += 1, R6915 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R6959 += 1, R6915 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6959 += 1, R6915 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R6959 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6959 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6959 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R6961 += 1, R6917 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R6960 += 1, R6961 += 1 };
  s0 -> s2 [0, 65535] { R6961 += 1, R6916 += 1, R6917 += 1 };
  s0 -> s3 [73, 73] { R6961 += 1, R6917 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R6961 += 1, R6917 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R6961 += 1, R6917 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R6961 += 1, R6917 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6961 += 1 };
  s1 -> s3 [73, 73] { R6961 += 1, R6917 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R6961 += 1, R6917 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R6961 += 1, R6917 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R6961 += 1, R6917 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R6961 += 1, R6916 += 1, R6917 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R6961 += 1, R6917 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R6961 += 1, R6917 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R6961 += 1, R6917 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R6961 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6961 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6961 += 1, R6917 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R6961 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R6962 += 1, R6963 += 1 };
  s0 -> s2 [0, 65535] { R6963 += 1, R6918 += 1, R6919 += 1 };
  s0 -> s3 [73, 73] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6963 += 1 };
  s1 -> s3 [73, 73] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6963 += 1, R6918 += 1, R6919 += 1 };
  s2 -> s3 [73, 73] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6963 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6963 += 1 };
  s4 -> s4 [0, 65535] { R6963 += 1, R6919 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6963 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 72] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s3 [0, 65535] { R6965 += 1, R6920 += 1, R6921 += 1 };
  s0 -> s0 [0, 65535] { R6964 += 1, R6965 += 1 };
  s0 -> s4 [73, 73] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [73, 73] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [73, 73] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [74, 65535] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 72] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 65535] { R6965 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 72] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [73, 73] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s5 [73, 73] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [73, 73] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s7 [73, 73] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [74, 65535] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 72] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 72] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R6965 += 1, R6920 += 1, R6921 += 1 };
  s3 -> s4 [73, 73] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [73, 73] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [73, 73] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [74, 65535] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s4 [0, 65535] { R6965 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R6965 += 1, R6921 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s7 [0, 65535] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6965 += 1, R6921 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s9 [0, 65535] { R6965 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6965 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [0, 65535] { R6967 += 1, R6922 += 1, R6923 += 1 };
  s0 -> s0 [0, 65535] { R6966 += 1, R6967 += 1 };
  s0 -> s3 [73, 73] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s4 [73, 73] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [74, 65535] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 72] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 65535] { R6967 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s4 [73, 73] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [74, 65535] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [0, 72] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s2 [0, 65535] { R6967 += 1, R6922 += 1, R6923 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [73, 73] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [74, 65535] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R6967 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6967 += 1 };
  s4 -> s4 [0, 65535] { R6967 += 1, R6923 += 1, R6436 += 1, R6437 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6967 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s2 [0, 72] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s0 [0, 65535] { R6968 += 1, R6969 += 1 };
  s0 -> s3 [0, 65535] { R6969 += 1, R6924 += 1, R6925 += 1 };
  s0 -> s4 [73, 73] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s5 [73, 73] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s6 [73, 73] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s7 [73, 73] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s1 [74, 65535] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s2 [74, 65535] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s1 [0, 72] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s2 [0, 72] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s4 [73, 73] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s5 [73, 73] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s6 [73, 73] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s7 [73, 73] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s1 [74, 65535] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s2 [74, 65535] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s2 [0, 72] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R6969 += 1 };
  s2 -> s6 [73, 73] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s7 [73, 73] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s2 [74, 65535] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s1 [0, 72] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s2 [0, 72] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s3 [0, 65535] { R6969 += 1, R6924 += 1, R6925 += 1 };
  s3 -> s4 [73, 73] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s5 [73, 73] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s6 [73, 73] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s7 [73, 73] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s1 [74, 65535] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s2 [74, 65535] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s4 -> s4 [0, 65535] { R6969 += 1, R6925 += 1, R6862 += 1, R6863 += 1 };
  s4 -> s6 [0, 65535] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s6 -> s9 [0, 65535] { R6969 += 1 };
  s6 -> s6 [0, 65535] { R6969 += 1, R6925 += 1, R6863 += 1, R6864 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6969 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6969 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s0 -> s0 [0, 65535] { R6970 += 1, R6971 += 1 };
  s0 -> s2 [0, 65535] { R6971 += 1, R6926 += 1, R6927 += 1 };
  s0 -> s3 [73, 73] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s0 -> s4 [73, 73] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s0 -> s1 [74, 65535] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s1 -> s1 [0, 72] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s1 -> s1 [0, 65535] { R6971 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s1 -> s4 [73, 73] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s1 -> s1 [74, 65535] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s2 -> s1 [0, 72] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R6971 += 1, R6926 += 1, R6927 += 1 };
  s2 -> s3 [73, 73] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s2 -> s4 [73, 73] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s2 -> s1 [74, 65535] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s3 -> s3 [0, 65535] { R6971 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6971 += 1 };
  s4 -> s4 [0, 65535] { R6971 += 1, R6927 += 1, R6868 += 1, R6869 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6971 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R6887 && R2 = R6971 && R20 - R6971 = -1 && R21 = R6971 && R22 - R6971 = -1 && R23 = R6971 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R6886 = 0 && R6912 = 0 && R6913 = 0 && R6920 = 0 && R6921 = 0 && R6924 = 0 && R6925 = 0 && R6928 = 0 && R6929 = R6971 && R6930 = 0 && R6931 = R6971 && R6932 = 0 && R6933 = R6971 && R6934 = 0 && R6935 = R6971 && R6936 = 0 && R6937 = R6971 && R6938 = 0 && R6939 = R6971 && R6940 = 0 && R6941 = R6971 && R6942 = 0 && R6943 = R6971 && R6944 = 0 && R6945 = R6971 && R6946 = 0 && R6947 = R6971 && R6948 = 0 && R6949 = R6971 && R6950 = 0 && R6951 = R6971 && R6952 = 0 && R6953 = R6971 && R6954 = 0 && R6955 = R6971 && R6956 = 0 && R6957 = R6971 && R6958 = 0 && R6959 = R6971 && R6960 = 0 && R6961 = R6971 && R6962 = 0 && R6963 = R6971 && R6964 = 0 && R6965 = R6971 && R6966 = 0 && R6967 = R6971 && R6968 = 0 && R6969 = R6971 && R6970 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R6887 && 0 < R6971 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R6872 != 0 || R6873 = R6887 || (R17 = 0 && R6887 = 0)) && (R6874 != 0 || R6875 = R6887 || (R17 = 0 && R6887 = 0)) && (R6876 != 0 || R6877 = R6887 || (R17 = 0 && R6887 = 0)) && (R6878 != 0 || R6879 = R6887 || (R17 = 0 && R6887 = 0)) && (R6880 != 0 || R6881 = R6887 || (R17 = 0 && R6887 = 0)) && (R6882 != 0 || R6883 = R6887 || (R17 = 0 && R6887 = 0)) && (R6884 != 0 || R6885 = R6887 || (R17 = 0 && R6887 = 0)) && (R6888 != 0 || R6887 = R6889 || (R17 = 0 && R6887 = 0)) && (R6890 != 0 || R6887 = R6891 || (R17 = 0 && R6887 = 0)) && (R18 = 0 || (R6910 = 0 && R6911 = 0)) && (R18 = 0 || (R6914 = 0 && R6915 = 0)) && (R18 = 0 || (R6916 = 0 && R6917 = 0)) && (R18 = 0 || (R6918 = 0 && R6919 = 0)) && (R18 = 0 || (R6922 = 0 && R6923 = 0)) && (R18 = 0 || (R6926 = 0 && R6927 = 0)) && (R19 = 0 || (R6892 = 0 && R6893 = 0)) && (R19 = 0 || (R6894 = 0 && R6895 = 0)) && (R19 = 0 || (R6896 = 0 && R6897 = 0)) && (R19 = 0 || (R6898 = 0 && R6899 = 0)) && (R19 = 0 || (R6900 = 0 && R6901 = 0)) && (R19 = 0 || (R6902 = 0 && R6903 = 0)) && (R19 = 0 || (R6904 = 0 && R6905 = 0)) && (R19 = 0 || (R6906 = 0 && R6907 = 0)) && (R19 = 0 || (R6908 = 0 && R6909 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R6867 + R6864 = 0 || (R56 + R6865 + R6862 = 0 && R57 + R6866 + R6863 = 0)) && (R58 + R6867 + R6864 = 0 || (R62 + R6870 + R6868 = 0 && R63 + R6871 + R6869 = 0)) && (R6872 = 0 || (R17 = 0 && R6887 = 0)) && (R6874 = 0 || (R17 = 0 && R6887 = 0)) && (R6876 = 0 || (R17 = 0 && R6887 = 0)) && (R6878 = 0 || (R17 = 0 && R6887 = 0)) && (R6880 = 0 || (R17 = 0 && R6887 = 0)) && (R6882 = 0 || (R17 = 0 && R6887 = 0)) && (R6884 = 0 || (R17 = 0 && R6887 = 0)) && (R6888 = 0 || (R17 = 0 && R6887 = 0)) && (R6890 = 0 || (R17 = 0 && R6887 = 0));
// End of Parikh automata intersection problem
