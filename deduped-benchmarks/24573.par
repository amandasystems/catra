// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R12802, R12803, R12804, R12805, R12806, R12807, R12808, R12809, R12810, R12811, R13124, R13125, R13126, R13127, R13128, R13129, R13130, R13131, R13132, R13133, R13134, R13135, R13136, R13137, R13138, R13139, R13140, R13141, R13142, R13143, R13144, R13145, R13146, R13147, R13148, R13149, R13150, R13151, R13152, R13153, R13154, R13155, R13156, R13157, R13158, R13159, R13160, R13161, R13162, R13163, R13164, R13165, R13166, R13167, R13168, R13169, R13170, R13171, R13172, R13173, R13174, R13175, R13176, R13177, R13178, R13179, R13180, R13181, R13182, R13183, R13184, R13185, R13186, R13187, R13188, R13189, R13190, R13191, R13192, R13193, R13194, R13195, R13196, R13197, R13198, R13199, R13200, R13201, R13202, R13203, R13204, R13205, R13206, R13207, R13208, R13209, R13210, R13211, R13212, R13213, R13214, R13215, R13216, R13217, R13218, R13219, R13220, R13221, R13222, R13223, R13224, R13225, R13226, R13227, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R13149 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R13148 += 1, R13149 += 1 };
  s1 -> s1 [0, 65535] { R13149 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R13151 += 1 };
  s0 -> s0 [0, 65535] { R13150 += 1, R13151 += 1 };
  s0 -> s2 [73, 73] { R13151 += 1 };
  s0 -> s3 [73, 73] { R13151 += 1 };
  s0 -> s1 [82, 65535] { R13151 += 1 };
  s1 -> s1 [0, 72] { R13151 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13151 += 1 };
  s1 -> s3 [73, 73] { R13151 += 1 };
  s1 -> s1 [82, 65535] { R13151 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R13151 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R13151 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R13153 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R13152 += 1, R13153 += 1 };
  s0 -> s2 [73, 73] { R13153 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R13153 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R13153 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R13153 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13153 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R13153 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R13153 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R13153 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R13155 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R13154 += 1, R13155 += 1 };
  s0 -> s2 [73, 73] { R13155 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R13155 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R13155 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R13155 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13155 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R13155 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R13155 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13155 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R13157 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R13156 += 1, R13157 += 1 };
  s0 -> s2 [73, 73] { R13157 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R13157 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R13157 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R13157 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13157 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R13157 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R13157 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R13157 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R13159 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R13158 += 1, R13159 += 1 };
  s0 -> s2 [73, 73] { R13159 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R13159 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R13159 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R13159 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13159 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R13159 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R13159 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13159 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R13161 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R13160 += 1, R13161 += 1 };
  s0 -> s2 [73, 73] { R13161 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R13161 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R13161 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R13161 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13161 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R13161 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R13161 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R13161 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R13163 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R13162 += 1, R13163 += 1 };
  s0 -> s2 [73, 73] { R13163 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R13163 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R13163 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R13163 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13163 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R13163 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R13163 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R13163 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R13165 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R13164 += 1, R13165 += 1 };
  s0 -> s2 [73, 73] { R13165 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R13165 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R13165 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R13165 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13165 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R13165 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R13165 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13165 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R13185 += 1 };
  s0 -> s0 [0, 65535] { R13184 += 1, R13185 += 1 };
  s0 -> s2 [73, 73] { R13185 += 1 };
  s0 -> s1 [74, 65535] { R13185 += 1 };
  s1 -> s1 [0, 72] { R13185 += 1 };
  s1 -> s2 [73, 73] { R13185 += 1 };
  s1 -> s1 [74, 65535] { R13185 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13185 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R13186 += 1, R13187 += 1 };
  s0 -> s1 [0, 65535] { R13187 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13187 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R13189 += 1 };
  s0 -> s2 [0, 65535] { R13189 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R13188 += 1, R13189 += 1 };
  s0 -> s3 [73, 73] { R13189 += 1 };
  s0 -> s1 [74, 65535] { R13189 += 1 };
  s1 -> s1 [0, 72] { R13189 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R13189 += 1 };
  s1 -> s1 [74, 65535] { R13189 += 1 };
  s2 -> s1 [0, 72] { R13189 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13189 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R13189 += 1 };
  s2 -> s1 [74, 65535] { R13189 += 1 };
  s3 -> s3 [0, 65535] { R13189 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R13191 += 1, R13129 += 1 };
  s0 -> s2 [0, 65535] { R13191 += 1, R13128 += 1, R13129 += 1 };
  s0 -> s0 [0, 65535] { R13190 += 1, R13191 += 1 };
  s0 -> s1 [74, 65535] { R13191 += 1, R13129 += 1 };
  s1 -> s1 [0, 72] { R13191 += 1, R13129 += 1 };
  s1 -> s1 [0, 65535] { R13191 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R13191 += 1, R13129 += 1 };
  s2 -> s1 [0, 72] { R13191 += 1, R13129 += 1 };
  s2 -> s2 [0, 65535] { R13191 += 1, R13128 += 1, R13129 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R13191 += 1, R13129 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R13193 += 1, R13130 += 1, R13131 += 1 };
  s0 -> s2 [0, 65535] { R13193 += 1, R13131 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R13192 += 1, R13193 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13193 += 1, R13130 += 1, R13131 += 1 };
  s1 -> s2 [0, 65535] { R13193 += 1, R13131 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13193 += 1, R13131 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R13193 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13193 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R13195 += 1, R13133 += 1 };
  s0 -> s2 [0, 65535] { R13195 += 1, R13132 += 1, R13133 += 1 };
  s0 -> s0 [0, 65535] { R13194 += 1, R13195 += 1 };
  s0 -> s1 [81, 65535] { R13195 += 1, R13133 += 1 };
  s1 -> s1 [0, 73] { R13195 += 1, R13133 += 1 };
  s1 -> s1 [0, 65535] { R13195 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R13195 += 1, R13133 += 1 };
  s2 -> s1 [0, 73] { R13195 += 1, R13133 += 1 };
  s2 -> s2 [0, 65535] { R13195 += 1, R13132 += 1, R13133 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R13195 += 1, R13133 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R13196 += 1, R13197 += 1 };
  s0 -> s1 [0, 65535] { R13197 += 1, R13134 += 1, R13135 += 1 };
  s0 -> s2 [0, 65535] { R13197 += 1, R13135 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R13197 += 1, R13134 += 1, R13135 += 1 };
  s1 -> s2 [0, 65535] { R13197 += 1, R13135 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13197 += 1, R13135 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R13197 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13197 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R13199 += 1, R13137 += 1 };
  s0 -> s2 [0, 65535] { R13199 += 1, R13136 += 1, R13137 += 1 };
  s0 -> s3 [0, 65535] { R13199 += 1, R13137 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R13198 += 1, R13199 += 1 };
  s0 -> s1 [82, 65535] { R13199 += 1, R13137 += 1 };
  s1 -> s1 [0, 80] { R13199 += 1, R13137 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13199 += 1 };
  s1 -> s1 [82, 65535] { R13199 += 1, R13137 += 1 };
  s2 -> s1 [0, 80] { R13199 += 1, R13137 += 1 };
  s2 -> s2 [0, 65535] { R13199 += 1, R13136 += 1, R13137 += 1 };
  s2 -> s3 [0, 65535] { R13199 += 1, R13137 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R13199 += 1, R13137 += 1 };
  s3 -> s1 [0, 80] { R13199 += 1, R13137 += 1 };
  s3 -> s3 [0, 65535] { R13199 += 1, R13137 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R13199 += 1 };
  s3 -> s1 [82, 65535] { R13199 += 1, R13137 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13199 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R13201 += 1, R13139 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R13201 += 1, R13139 += 1 };
  s0 -> s0 [0, 65535] { R13200 += 1, R13201 += 1 };
  s0 -> s2 [0, 65535] { R13201 += 1, R13138 += 1, R13139 += 1 };
  s0 -> s1 [82, 65535] { R13201 += 1, R13139 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R13201 += 1, R13139 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R13201 += 1, R13139 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13201 += 1 };
  s1 -> s1 [82, 65535] { R13201 += 1, R13139 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R13201 += 1, R13139 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R13201 += 1, R13139 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13201 += 1, R13138 += 1, R13139 += 1 };
  s2 -> s1 [82, 65535] { R13201 += 1, R13139 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13201 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R13203 += 1, R13141 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s2 [0, 65535] { R13203 += 1, R13140 += 1, R13141 += 1 };
  s0 -> s0 [0, 65535] { R13202 += 1, R13203 += 1 };
  s0 -> s3 [0, 65535] { R13203 += 1, R13141 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s4 [0, 65535] { R13203 += 1 };
  s1 -> s1 [0, 65535] { R13203 += 1, R13141 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R13203 += 1, R13141 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s1 [0, 65535] { R13203 += 1, R13141 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s2 [0, 65535] { R13203 += 1, R13140 += 1, R13141 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R13203 += 1, R13141 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535] { R13203 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13203 += 1, R13141 += 1 };
  s3 -> s3 [0, 65535] { R13203 += 1, R13141 += 1, R11530 += 1, R11531 += 1 };
  s4 -> s4 [0, 65535] { R13203 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R13203 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13203 += 1, R13141 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s0 -> s2 [0, 65535] { R13205 += 1, R13142 += 1, R13143 += 1 };
  s0 -> s0 [0, 65535] { R13204 += 1, R13205 += 1 };
  s0 -> s3 [0, 65535] { R13205 += 1, R13143 += 1, R12804 += 1, R12805 += 1 };
  s0 -> s4 [87, 87] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s0 -> s1 [88, 65535] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s1 -> s1 [0, 81] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s1 -> s4 [87, 87] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s1 -> s1 [88, 65535] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s2 -> s1 [0, 81] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s2 -> s2 [0, 65535] { R13205 += 1, R13142 += 1, R13143 += 1 };
  s2 -> s3 [0, 65535] { R13205 += 1, R13143 += 1, R12804 += 1, R12805 += 1 };
  s2 -> s4 [87, 87] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s2 -> s1 [88, 65535] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s3 -> s1 [0, 81] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s3 -> s3 [0, 65535] { R13205 += 1, R13143 += 1, R12804 += 1, R12805 += 1 };
  s3 -> s4 [87, 87] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s3 -> s1 [88, 65535] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s4 -> s4 [0, 81] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s4 -> s4 [0, 65535] { R13205 += 1, R13143 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13205 += 1 };
  s4 -> s4 [87, 65535] { R13205 += 1, R13143 += 1, R12805 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13205 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R13207 += 1, R13145 += 1, R12810 += 1, R12811 += 1 };
  s0 -> s2 [0, 65535] { R13207 += 1, R13144 += 1, R13145 += 1 };
  s0 -> s3 [0, 65535] { R13207 += 1, R13145 += 1, R12809 += 1, R12810 += 1 };
  s0 -> s0 [0, 65535] { R13206 += 1, R13207 += 1 };
  s1 -> s6 [0, 65535] { R13207 += 1, R13145 += 1 };
  s1 -> s1 [0, 65535] { R13207 += 1, R13145 += 1, R12810 += 1, R12811 += 1 };
  s1 -> s4 [0, 65535] { R13207 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R13207 += 1, R13145 += 1, R12810 += 1, R12811 += 1 };
  s2 -> s2 [0, 65535] { R13207 += 1, R13144 += 1, R13145 += 1 };
  s2 -> s3 [0, 65535] { R13207 += 1, R13145 += 1, R12809 += 1, R12810 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R13207 += 1, R13145 += 1, R12810 += 1, R12811 += 1 };
  s3 -> s4 [0, 65535] { R13207 += 1 };
  s3 -> s3 [0, 65535] { R13207 += 1, R13145 += 1, R12809 += 1, R12810 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13207 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13207 += 1, R13145 += 1 };
  s6 -> s4 [0, 65535] { R13207 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R13209 += 1, R13147 += 1, R13127 += 1 };
  s0 -> s2 [0, 65535] { R13209 += 1, R13146 += 1, R13147 += 1 };
  s0 -> s0 [0, 65535] { R13208 += 1, R13209 += 1 };
  s0 -> s1 [0, 65535] { R13209 += 1, R13147 += 1 };
  s0 -> s1 [88, 65535] { R13209 += 1, R13147 += 1, R13127 += 1 };
  s1 -> s1 [0, 81] { R13209 += 1, R13147 += 1, R13127 += 1 };
  s1 -> s1 [0, 65535] { R13209 += 1, R13147 += 1 };
  s1 -> s4 [0, 65535] { R13209 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R13209 += 1, R13147 += 1, R13127 += 1 };
  s2 -> s1 [0, 81] { R13209 += 1, R13147 += 1, R13127 += 1 };
  s2 -> s2 [0, 65535] { R13209 += 1, R13146 += 1, R13147 += 1 };
  s2 -> s1 [0, 65535] { R13209 += 1, R13147 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R13209 += 1, R13147 += 1, R13127 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13209 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R13210 += 1, R13211 += 1 };
  s0 -> s1 [0, 65535] { R13211 += 1, R13166 += 1, R13167 += 1 };
  s0 -> s2 [0, 65535] { R13211 += 1, R13167 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R13211 += 1, R13166 += 1, R13167 += 1 };
  s1 -> s2 [0, 65535] { R13211 += 1, R13167 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13211 += 1, R13167 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13211 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13211 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R13213 += 1, R13169 += 1 };
  s0 -> s2 [0, 65535] { R13213 += 1, R13168 += 1, R13169 += 1 };
  s0 -> s0 [0, 65535] { R13212 += 1, R13213 += 1 };
  s0 -> s3 [73, 73] { R13213 += 1, R13169 += 1 };
  s0 -> s4 [73, 73] { R13213 += 1, R13169 += 1 };
  s0 -> s5 [81, 81] { R13213 += 1, R13169 += 1 };
  s0 -> s1 [82, 65535] { R13213 += 1, R13169 += 1 };
  s1 -> s1 [0, 72] { R13213 += 1, R13169 += 1 };
  s1 -> s3 [73, 73] { R13213 += 1, R13169 += 1 };
  s1 -> s4 [73, 73] { R13213 += 1, R13169 += 1 };
  s1 -> s5 [81, 81] { R13213 += 1, R13169 += 1 };
  s1 -> s1 [82, 65535] { R13213 += 1, R13169 += 1 };
  s2 -> s1 [0, 72] { R13213 += 1, R13169 += 1 };
  s2 -> s2 [0, 65535] { R13213 += 1, R13168 += 1, R13169 += 1 };
  s2 -> s3 [73, 73] { R13213 += 1, R13169 += 1 };
  s2 -> s4 [73, 73] { R13213 += 1, R13169 += 1 };
  s2 -> s5 [81, 81] { R13213 += 1, R13169 += 1 };
  s2 -> s1 [82, 65535] { R13213 += 1, R13169 += 1 };
  s3 -> s3 [0, 73] { R13213 += 1, R13169 += 1 };
  s3 -> s7 [81, 81] { R13213 += 1, R13169 += 1 };
  s3 -> s3 [82, 65535] { R13213 += 1, R13169 += 1 };
  s5 -> s5 [0, 72] { R13213 += 1, R13169 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R13213 += 1 };
  s5 -> s7 [73, 73] { R13213 += 1, R13169 += 1 };
  s5 -> s8 [73, 73] { R13213 += 1, R13169 += 1 };
  s5 -> s5 [81, 65535] { R13213 += 1, R13169 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R13213 += 1, R13169 += 1 };
  s7 -> s7 [0, 65535] { R13213 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R13213 += 1, R13169 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R13213 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R13215 += 1, R13171 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R13214 += 1, R13215 += 1 };
  s0 -> s2 [0, 65535] { R13215 += 1, R13170 += 1, R13171 += 1 };
  s0 -> s3 [73, 73] { R13215 += 1, R13171 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R13215 += 1, R13171 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R13215 += 1, R13171 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R13215 += 1, R13171 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R13215 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R13215 += 1, R13171 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R13215 += 1, R13171 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R13215 += 1, R13171 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R13215 += 1, R13171 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R13215 += 1, R13170 += 1, R13171 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R13215 += 1, R13171 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R13215 += 1, R13171 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R13215 += 1, R13171 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R13215 += 1, R13171 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R13215 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13215 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13215 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R13217 += 1, R13173 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R13217 += 1, R13172 += 1, R13173 += 1 };
  s0 -> s0 [0, 65535] { R13216 += 1, R13217 += 1 };
  s0 -> s3 [73, 73] { R13217 += 1, R13173 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R13217 += 1, R13173 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R13217 += 1, R13173 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R13217 += 1, R13173 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13217 += 1 };
  s1 -> s3 [73, 73] { R13217 += 1, R13173 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R13217 += 1, R13173 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R13217 += 1, R13173 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R13217 += 1, R13173 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13217 += 1, R13172 += 1, R13173 += 1 };
  s2 -> s3 [73, 73] { R13217 += 1, R13173 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R13217 += 1, R13173 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R13217 += 1, R13173 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R13217 += 1, R13173 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R13217 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13217 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13217 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R13218 += 1, R13219 += 1 };
  s0 -> s3 [0, 65535] { R13219 += 1, R13174 += 1, R13175 += 1 };
  s0 -> s4 [73, 73] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s0 -> s2 [74, 80] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s1 -> s2 [74, 80] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [82, 65535] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13219 += 1 };
  s2 -> s4 [73, 73] { R13219 += 1, R13175 += 1 };
  s2 -> s7 [73, 73] { R13219 += 1, R13175 += 1 };
  s2 -> s2 [74, 80] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R13219 += 1, R13175 += 1 };
  s2 -> s2 [82, 65535] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R13219 += 1, R13174 += 1, R13175 += 1 };
  s3 -> s4 [73, 73] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s3 -> s2 [74, 80] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R13219 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s7 [0, 80] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R13219 += 1, R13175 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s7 [82, 65535] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s7 -> s7 [0, 80] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R13219 += 1 };
  s7 -> s7 [0, 65535] { R13219 += 1, R13175 += 1 };
  s7 -> s7 [82, 65535] { R13219 += 1, R13175 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13219 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s2 [0, 65535] { R13221 += 1, R13176 += 1, R13177 += 1 };
  s0 -> s0 [0, 65535] { R13220 += 1, R13221 += 1 };
  s0 -> s3 [73, 73] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R13221 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13221 += 1, R13176 += 1, R13177 += 1 };
  s2 -> s3 [73, 73] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13221 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13221 += 1 };
  s4 -> s4 [0, 65535] { R13221 += 1, R13177 += 1, R11526 += 1, R11527 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13221 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s0 [0, 65535] { R13222 += 1, R13223 += 1 };
  s0 -> s2 [0, 65535] { R13223 += 1, R13178 += 1, R13179 += 1 };
  s0 -> s3 [73, 73] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s4 [73, 73] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s1 [74, 65535] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s1 [0, 72] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s1 [0, 65535] { R13223 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s4 [73, 73] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s1 [74, 65535] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s1 [0, 72] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13223 += 1, R13178 += 1, R13179 += 1 };
  s2 -> s3 [73, 73] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s4 [73, 73] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s1 [74, 65535] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s3 [0, 65535] { R13223 += 1, R13179 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13223 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13223 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13223 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s0 -> s0 [0, 65535] { R13224 += 1, R13225 += 1 };
  s0 -> s2 [0, 65535] { R13225 += 1, R13180 += 1, R13181 += 1 };
  s0 -> s3 [73, 73] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s0 -> s4 [73, 73] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s0 -> s1 [74, 65535] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s1 [0, 72] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s1 [0, 65535] { R13225 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s4 [73, 73] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s1 [74, 65535] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s1 [0, 72] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s2 [0, 65535] { R13225 += 1, R13180 += 1, R13181 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s4 [73, 73] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s1 [74, 65535] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s3 -> s3 [0, 65535] { R13225 += 1, R13181 += 1, R12806 += 1, R12807 += 1 };
  s3 -> s6 [0, 65535] { R13225 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13225 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13225 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s0 -> s2 [0, 72] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s0 -> s3 [0, 65535] { R13227 += 1, R13182 += 1, R13183 += 1 };
  s0 -> s0 [0, 65535] { R13226 += 1, R13227 += 1 };
  s0 -> s4 [73, 73] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s0 -> s5 [73, 73] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s0 -> s6 [73, 73] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s0 -> s7 [73, 73] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s0 -> s1 [74, 80] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s0 -> s2 [74, 65535] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s0 -> s8 [81, 81] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s0 -> s1 [88, 65535] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s1 -> s1 [0, 72] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s1 -> s6 [73, 73] { R13227 += 1, R13183 += 1 };
  s1 -> s7 [73, 73] { R13227 += 1, R13183 += 1 };
  s1 -> s1 [74, 80] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s1 -> s1 [74, 65535] { R13227 += 1, R13183 += 1 };
  s1 -> s8 [81, 81] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s1 -> s1 [88, 65535] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s2 -> s1 [0, 72] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s2 -> s2 [0, 72] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s2 -> s4 [73, 73] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s2 -> s5 [73, 73] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s2 -> s6 [73, 73] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s2 -> s7 [73, 73] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s2 -> s1 [74, 80] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s2 -> s2 [74, 65535] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s2 -> s8 [81, 81] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s2 -> s1 [88, 65535] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s3 -> s1 [0, 72] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s3 -> s2 [0, 72] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s3 -> s3 [0, 65535] { R13227 += 1, R13182 += 1, R13183 += 1 };
  s3 -> s4 [73, 73] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s3 -> s5 [73, 73] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s3 -> s6 [73, 73] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s3 -> s7 [73, 73] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s3 -> s1 [74, 80] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s3 -> s2 [74, 65535] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s3 -> s8 [81, 81] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s3 -> s1 [88, 65535] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s4 -> s6 [0, 80] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s4 -> s4 [0, 65535] { R13227 += 1, R13183 += 1, R13124 += 1, R13125 += 1 };
  s4 -> s10 [81, 81] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s4 -> s6 [88, 65535] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s6 -> s6 [0, 80] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s6 -> s6 [0, 65535] { R13227 += 1, R13183 += 1 };
  s6 -> s10 [81, 81] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s6 -> s6 [88, 65535] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s8 -> s8 [0, 72] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s8 -> s8 [0, 65535] { R13227 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R13227 += 1, R13183 += 1 };
  s8 -> s11 [73, 73] { R13227 += 1, R13183 += 1 };
  s8 -> s8 [74, 81] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s8 -> s8 [74, 65535] { R13227 += 1, R13183 += 1 };
  s8 -> s8 [88, 65535] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s10 -> s10 [0, 65535] { R13227 += 1, R13183 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R13227 += 1 };
  s10 -> s10 [88, 65535] { R13227 += 1, R13183 += 1, R13125 += 1 };
  s11 -> s11 [0, 65535] { R13227 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R13227 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R13143 && R2 = R13227 && R20 - R13227 = -1 && R21 = R13227 && R22 - R13227 = -1 && R23 = R13227 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12805 + -1*R12803 - R53 = 0 && R52 + R12804 + R12802 = 0 && R13142 = 0 && R13168 = 0 && R13169 = 0 && R13174 = 0 && R13175 = 0 && R13182 = 0 && R13183 = 0 && R13184 = 0 && R13185 = R13227 && R13186 = 0 && R13187 = R13227 && R13188 = 0 && R13189 = R13227 && R13190 = 0 && R13191 = R13227 && R13192 = 0 && R13193 = R13227 && R13194 = 0 && R13195 = R13227 && R13196 = 0 && R13197 = R13227 && R13198 = 0 && R13199 = R13227 && R13200 = 0 && R13201 = R13227 && R13202 = 0 && R13203 = R13227 && R13204 = 0 && R13205 = R13227 && R13206 = 0 && R13207 = R13227 && R13208 = 0 && R13209 = R13227 && R13210 = 0 && R13211 = R13227 && R13212 = 0 && R13213 = R13227 && R13214 = 0 && R13215 = R13227 && R13216 = 0 && R13217 = R13227 && R13218 = 0 && R13219 = R13227 && R13220 = 0 && R13221 = R13227 && R13222 = 0 && R13223 = R13227 && R13224 = 0 && R13225 = R13227 && R13226 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12805 + -1*R12803 - R53 < 1 && -1 < R13143 && 0 < R13227 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R12805 + R12803 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R12805 + R12803 < 1))) && (R13128 != 0 || R13129 = R13143 || (R17 = 0 && R13143 = 0)) && (R13130 != 0 || R13131 = R13143 || (R17 = 0 && R13143 = 0)) && (R13132 != 0 || R13133 = R13143 || (R17 = 0 && R13143 = 0)) && (R13134 != 0 || R13135 = R13143 || (R17 = 0 && R13143 = 0)) && (R13136 != 0 || R13137 = R13143 || (R17 = 0 && R13143 = 0)) && (R13138 != 0 || R13139 = R13143 || (R17 = 0 && R13143 = 0)) && (R13140 != 0 || R13141 = R13143 || (R17 = 0 && R13143 = 0)) && (R13144 != 0 || R13143 = R13145 || (R17 = 0 && R13143 = 0)) && (R13146 != 0 || R13143 = R13147 || (R17 = 0 && R13143 = 0)) && (R18 = 0 || (R13166 = 0 && R13167 = 0)) && (R18 = 0 || (R13170 = 0 && R13171 = 0)) && (R18 = 0 || (R13172 = 0 && R13173 = 0)) && (R18 = 0 || (R13176 = 0 && R13177 = 0)) && (R18 = 0 || (R13178 = 0 && R13179 = 0)) && (R18 = 0 || (R13180 = 0 && R13181 = 0)) && (R19 = 0 || (R13148 = 0 && R13149 = 0)) && (R19 = 0 || (R13150 = 0 && R13151 = 0)) && (R19 = 0 || (R13152 = 0 && R13153 = 0)) && (R19 = 0 || (R13154 = 0 && R13155 = 0)) && (R19 = 0 || (R13156 = 0 && R13157 = 0)) && (R19 = 0 || (R13158 = 0 && R13159 = 0)) && (R19 = 0 || (R13160 = 0 && R13161 = 0)) && (R19 = 0 || (R13162 = 0 && R13163 = 0)) && (R19 = 0 || (R13164 = 0 && R13165 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0)) && (R58 + R12811 + R12808 = 0 || (R56 + R12809 + R12806 = 0 && R57 + R12810 + R12807 = 0)) && (R58 + R12811 + R12808 = 0 || (R62 + R13126 + R13124 = 0 && R63 + R13127 + R13125 = 0)) && (R13128 = 0 || (R17 = 0 && R13143 = 0)) && (R13130 = 0 || (R17 = 0 && R13143 = 0)) && (R13132 = 0 || (R17 = 0 && R13143 = 0)) && (R13134 = 0 || (R17 = 0 && R13143 = 0)) && (R13136 = 0 || (R17 = 0 && R13143 = 0)) && (R13138 = 0 || (R17 = 0 && R13143 = 0)) && (R13140 = 0 || (R17 = 0 && R13143 = 0)) && (R13144 = 0 || (R17 = 0 && R13143 = 0)) && (R13146 = 0 || (R17 = 0 && R13143 = 0));
// End of Parikh automata intersection problem
