// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R4, R40, R42, R43, R4322, R4323, R4324, R4325, R4326, R4327, R4536, R4537, R4538, R4539, R4540, R4541, R4542, R4543, R4544, R4545, R4546, R4547, R4548, R4549, R4550, R4551, R4552, R4553, R4554, R4555, R4556, R4557, R4558, R4559, R4560, R4561, R4562, R4563, R4564, R4565, R4566, R4567, R4568, R4569, R4570, R4571, R4572, R4573, R4574, R4575, R4576, R4577, R4578, R4579, R4580, R4581, R4582, R4583, R4584, R4585, R4586, R4587, R4588, R4589, R4590, R4591, R4592, R4593, R4594, R4595, R4596, R4597, R4598, R4599, R46, R4600, R4601, R4602, R4603, R4604, R4605, R4606, R4607, R4608, R4609, R4610, R4611, R4612, R4613, R4614, R4615, R4616, R4617, R4618, R4619, R4620, R4621, R4622, R4623, R4624, R4625, R4626, R4627, R4628, R4629, R4630, R4631, R4632, R4633, R4634, R4635, R4636, R4637, R4638, R4639, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R4560 += 1, R4561 += 1 };
  s0 -> s1 [0, 65535] { R4561 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4561 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R4563 += 1 };
  s0 -> s0 [0, 65535] { R4562 += 1, R4563 += 1 };
  s0 -> s2 [73, 73] { R4563 += 1 };
  s0 -> s3 [73, 73] { R4563 += 1 };
  s0 -> s1 [82, 65535] { R4563 += 1 };
  s1 -> s1 [0, 72] { R4563 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4563 += 1 };
  s1 -> s3 [73, 73] { R4563 += 1 };
  s1 -> s1 [82, 65535] { R4563 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R4563 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R4563 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R4565 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R4564 += 1, R4565 += 1 };
  s0 -> s2 [73, 73] { R4565 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R4565 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R4565 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R4565 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4565 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R4565 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R4565 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R4565 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R4567 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R4566 += 1, R4567 += 1 };
  s0 -> s2 [73, 73] { R4567 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R4567 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R4567 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R4567 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4567 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R4567 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R4567 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R4567 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R4569 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R4568 += 1, R4569 += 1 };
  s0 -> s2 [73, 73] { R4569 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R4569 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R4569 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R4569 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4569 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R4569 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R4569 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4569 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R4571 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R4570 += 1, R4571 += 1 };
  s0 -> s2 [73, 73] { R4571 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R4571 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R4571 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R4571 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4571 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R4571 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R4571 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R4571 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R4573 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R4572 += 1, R4573 += 1 };
  s0 -> s2 [73, 73] { R4573 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R4573 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R4573 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R4573 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4573 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R4573 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R4573 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4573 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R4575 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R4574 += 1, R4575 += 1 };
  s0 -> s2 [73, 73] { R4575 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R4575 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R4575 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R4575 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4575 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R4575 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R4575 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4575 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R4577 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R4576 += 1, R4577 += 1 };
  s0 -> s2 [73, 73] { R4577 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R4577 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R4577 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R4577 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4577 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R4577 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R4577 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4577 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R4597 += 1 };
  s0 -> s0 [0, 65535] { R4596 += 1, R4597 += 1 };
  s0 -> s2 [73, 73] { R4597 += 1 };
  s0 -> s1 [74, 65535] { R4597 += 1 };
  s1 -> s1 [0, 72] { R4597 += 1 };
  s1 -> s2 [73, 73] { R4597 += 1 };
  s1 -> s1 [74, 65535] { R4597 += 1 };
  s2 -> s2 [0, 65535] { R4597 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4599 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4598 += 1, R4599 += 1 };
  s1 -> s1 [0, 65535] { R4599 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R4601 += 1 };
  s0 -> s2 [0, 65535] { R4601 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R4600 += 1, R4601 += 1 };
  s0 -> s3 [73, 73] { R4601 += 1 };
  s0 -> s1 [74, 65535] { R4601 += 1 };
  s1 -> s1 [0, 72] { R4601 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R4601 += 1 };
  s1 -> s1 [74, 65535] { R4601 += 1 };
  s2 -> s1 [0, 72] { R4601 += 1 };
  s2 -> s2 [0, 65535] { R4601 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R4601 += 1 };
  s2 -> s1 [74, 65535] { R4601 += 1 };
  s3 -> s3 [0, 65535] { R4601 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R4603 += 1, R4541 += 1 };
  s0 -> s2 [0, 65535] { R4603 += 1, R4540 += 1, R4541 += 1 };
  s0 -> s0 [0, 65535] { R4602 += 1, R4603 += 1 };
  s0 -> s1 [74, 65535] { R4603 += 1, R4541 += 1 };
  s1 -> s1 [0, 72] { R4603 += 1, R4541 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4603 += 1 };
  s1 -> s1 [74, 65535] { R4603 += 1, R4541 += 1 };
  s2 -> s1 [0, 72] { R4603 += 1, R4541 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4603 += 1, R4540 += 1, R4541 += 1 };
  s2 -> s1 [74, 65535] { R4603 += 1, R4541 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R4604 += 1, R4605 += 1 };
  s0 -> s1 [0, 65535] { R4605 += 1, R4543 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R4605 += 1, R4542 += 1, R4543 += 1 };
  s1 -> s1 [0, 65535] { R4605 += 1, R4543 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4605 += 1 };
  s2 -> s1 [0, 65535] { R4605 += 1, R4543 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4605 += 1, R4542 += 1, R4543 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4605 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R4607 += 1, R4545 += 1 };
  s0 -> s0 [0, 65535] { R4606 += 1, R4607 += 1 };
  s0 -> s2 [0, 65535] { R4607 += 1, R4544 += 1, R4545 += 1 };
  s0 -> s1 [81, 65535] { R4607 += 1, R4545 += 1 };
  s1 -> s1 [0, 73] { R4607 += 1, R4545 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4607 += 1 };
  s1 -> s1 [81, 65535] { R4607 += 1, R4545 += 1 };
  s2 -> s1 [0, 73] { R4607 += 1, R4545 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4607 += 1, R4544 += 1, R4545 += 1 };
  s2 -> s1 [81, 65535] { R4607 += 1, R4545 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R4609 += 1, R4547 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R4609 += 1, R4546 += 1, R4547 += 1 };
  s0 -> s0 [0, 65535] { R4608 += 1, R4609 += 1 };
  s1 -> s4 [0, 65535] { R4609 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4609 += 1, R4547 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4609 += 1, R4547 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R4609 += 1, R4546 += 1, R4547 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4609 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R4611 += 1, R4549 += 1 };
  s0 -> s2 [0, 65535] { R4611 += 1, R4549 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R4610 += 1, R4611 += 1 };
  s0 -> s3 [0, 65535] { R4611 += 1, R4548 += 1, R4549 += 1 };
  s0 -> s1 [82, 65535] { R4611 += 1, R4549 += 1 };
  s1 -> s1 [0, 80] { R4611 += 1, R4549 += 1 };
  s1 -> s1 [0, 65535] { R4611 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R4611 += 1, R4549 += 1 };
  s2 -> s1 [0, 80] { R4611 += 1, R4549 += 1 };
  s2 -> s2 [0, 65535] { R4611 += 1, R4549 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4611 += 1 };
  s2 -> s1 [82, 65535] { R4611 += 1, R4549 += 1 };
  s3 -> s1 [0, 80] { R4611 += 1, R4549 += 1 };
  s3 -> s2 [0, 65535] { R4611 += 1, R4549 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4611 += 1, R4548 += 1, R4549 += 1 };
  s3 -> s1 [82, 65535] { R4611 += 1, R4549 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4611 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R4613 += 1, R4551 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R4613 += 1, R4550 += 1, R4551 += 1 };
  s0 -> s0 [0, 65535] { R4612 += 1, R4613 += 1 };
  s0 -> s3 [0, 65535] { R4613 += 1, R4551 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [82, 65535] { R4613 += 1, R4551 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R4613 += 1, R4551 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R4613 += 1, R4551 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4613 += 1 };
  s1 -> s1 [82, 65535] { R4613 += 1, R4551 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R4613 += 1, R4551 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R4613 += 1, R4550 += 1, R4551 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4613 += 1, R4551 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [82, 65535] { R4613 += 1, R4551 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R4613 += 1, R4551 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4613 += 1, R4551 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R4613 += 1 };
  s3 -> s1 [82, 65535] { R4613 += 1, R4551 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4613 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R4615 += 1, R4553 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R4615 += 1, R4553 += 1 };
  s0 -> s3 [0, 65535] { R4615 += 1, R4552 += 1, R4553 += 1 };
  s0 -> s0 [0, 65535] { R4614 += 1, R4615 += 1 };
  s1 -> s1 [0, 65535] { R4615 += 1, R4553 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s5 [0, 65535] { R4615 += 1 };
  s1 -> s2 [0, 65535] { R4615 += 1, R4553 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4615 += 1 };
  s2 -> s2 [0, 65535] { R4615 += 1, R4553 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4615 += 1, R4553 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s2 [0, 65535] { R4615 += 1, R4553 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4615 += 1, R4552 += 1, R4553 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4615 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R4617 += 1, R4555 += 1, R3899 += 1 };
  s0 -> s1 [0, 65535] { R4617 += 1, R4555 += 1 };
  s0 -> s0 [0, 65535] { R4616 += 1, R4617 += 1 };
  s0 -> s2 [0, 65535] { R4617 += 1, R4554 += 1, R4555 += 1 };
  s0 -> s1 [87, 65535] { R4617 += 1, R4555 += 1, R3899 += 1 };
  s1 -> s1 [0, 81] { R4617 += 1, R4555 += 1, R3899 += 1 };
  s1 -> s1 [0, 65535] { R4617 += 1, R4555 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4617 += 1 };
  s1 -> s1 [87, 65535] { R4617 += 1, R4555 += 1, R3899 += 1 };
  s2 -> s1 [0, 81] { R4617 += 1, R4555 += 1, R3899 += 1 };
  s2 -> s1 [0, 65535] { R4617 += 1, R4555 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4617 += 1, R4554 += 1, R4555 += 1 };
  s2 -> s1 [87, 65535] { R4617 += 1, R4555 += 1, R3899 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4617 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R4619 += 1, R4556 += 1, R4557 += 1 };
  s0 -> s0 [0, 65535] { R4618 += 1, R4619 += 1 };
  s0 -> s2 [0, 65535] { R4619 += 1, R4557 += 1 };
  s0 -> s3 [0, 65535] { R4619 += 1, R4557 += 1, R4326 += 1, R4327 += 1 };
  s1 -> s1 [0, 65535] { R4619 += 1, R4556 += 1, R4557 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4619 += 1, R4557 += 1 };
  s1 -> s3 [0, 65535] { R4619 += 1, R4557 += 1, R4326 += 1, R4327 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4619 += 1, R4557 += 1 };
  s2 -> s5 [0, 65535] { R4619 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4619 += 1, R4557 += 1 };
  s3 -> s5 [0, 65535] { R4619 += 1 };
  s3 -> s3 [0, 65535] { R4619 += 1, R4557 += 1, R4326 += 1, R4327 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4619 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R4621 += 1, R4558 += 1, R4559 += 1 };
  s0 -> s2 [0, 65535] { R4621 += 1, R4559 += 1 };
  s0 -> s0 [0, 65535] { R4620 += 1, R4621 += 1 };
  s1 -> s1 [0, 65535] { R4621 += 1, R4558 += 1, R4559 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4621 += 1, R4559 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4621 += 1 };
  s2 -> s2 [0, 65535] { R4621 += 1, R4559 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4621 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R4623 += 1, R4578 += 1, R4579 += 1 };
  s0 -> s2 [0, 65535] { R4623 += 1, R4579 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4622 += 1, R4623 += 1 };
  s1 -> s1 [0, 65535] { R4623 += 1, R4578 += 1, R4579 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4623 += 1, R4579 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4623 += 1 };
  s2 -> s2 [0, 65535] { R4623 += 1, R4579 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4623 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R4625 += 1, R4581 += 1 };
  s0 -> s2 [0, 65535] { R4625 += 1, R4580 += 1, R4581 += 1 };
  s0 -> s0 [0, 65535] { R4624 += 1, R4625 += 1 };
  s0 -> s3 [73, 73] { R4625 += 1, R4581 += 1 };
  s0 -> s4 [73, 73] { R4625 += 1, R4581 += 1 };
  s0 -> s5 [81, 81] { R4625 += 1, R4581 += 1 };
  s0 -> s1 [82, 65535] { R4625 += 1, R4581 += 1 };
  s1 -> s1 [0, 72] { R4625 += 1, R4581 += 1 };
  s1 -> s3 [73, 73] { R4625 += 1, R4581 += 1 };
  s1 -> s4 [73, 73] { R4625 += 1, R4581 += 1 };
  s1 -> s5 [81, 81] { R4625 += 1, R4581 += 1 };
  s1 -> s1 [82, 65535] { R4625 += 1, R4581 += 1 };
  s2 -> s1 [0, 72] { R4625 += 1, R4581 += 1 };
  s2 -> s2 [0, 65535] { R4625 += 1, R4580 += 1, R4581 += 1 };
  s2 -> s3 [73, 73] { R4625 += 1, R4581 += 1 };
  s2 -> s4 [73, 73] { R4625 += 1, R4581 += 1 };
  s2 -> s5 [81, 81] { R4625 += 1, R4581 += 1 };
  s2 -> s1 [82, 65535] { R4625 += 1, R4581 += 1 };
  s4 -> s4 [0, 73] { R4625 += 1, R4581 += 1 };
  s4 -> s7 [81, 81] { R4625 += 1, R4581 += 1 };
  s4 -> s4 [82, 65535] { R4625 += 1, R4581 += 1 };
  s5 -> s5 [0, 72] { R4625 += 1, R4581 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4625 += 1 };
  s5 -> s7 [73, 73] { R4625 += 1, R4581 += 1 };
  s5 -> s8 [73, 73] { R4625 += 1, R4581 += 1 };
  s5 -> s5 [81, 65535] { R4625 += 1, R4581 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R4625 += 1, R4581 += 1 };
  s7 -> s7 [0, 65535] { R4625 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R4625 += 1, R4581 += 1 };
  s8 -> s8 [0, 65535] { R4625 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R4627 += 1, R4583 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R4626 += 1, R4627 += 1 };
  s0 -> s2 [0, 65535] { R4627 += 1, R4582 += 1, R4583 += 1 };
  s0 -> s3 [73, 73] { R4627 += 1, R4583 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R4627 += 1, R4583 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R4627 += 1, R4583 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R4627 += 1, R4583 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4627 += 1 };
  s1 -> s3 [73, 73] { R4627 += 1, R4583 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R4627 += 1, R4583 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R4627 += 1, R4583 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R4627 += 1, R4583 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4627 += 1, R4582 += 1, R4583 += 1 };
  s2 -> s3 [73, 73] { R4627 += 1, R4583 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R4627 += 1, R4583 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R4627 += 1, R4583 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4627 += 1 };
  s3 -> s3 [0, 65535] { R4627 += 1, R4583 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4627 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4627 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R4629 += 1, R4585 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R4629 += 1, R4584 += 1, R4585 += 1 };
  s0 -> s0 [0, 65535] { R4628 += 1, R4629 += 1 };
  s0 -> s3 [73, 73] { R4629 += 1, R4585 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R4629 += 1, R4585 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R4629 += 1, R4585 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R4629 += 1, R4585 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4629 += 1 };
  s1 -> s3 [73, 73] { R4629 += 1, R4585 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R4629 += 1, R4585 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R4629 += 1, R4585 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R4629 += 1, R4585 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R4629 += 1, R4584 += 1, R4585 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R4629 += 1, R4585 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R4629 += 1, R4585 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R4629 += 1, R4585 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R4629 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4629 += 1 };
  s4 -> s4 [0, 65535] { R4629 += 1, R4585 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4629 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R4631 += 1, R4586 += 1, R4587 += 1 };
  s0 -> s0 [0, 65535] { R4630 += 1, R4631 += 1 };
  s0 -> s3 [73, 73] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4631 += 1 };
  s1 -> s3 [73, 73] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4631 += 1, R4586 += 1, R4587 += 1 };
  s2 -> s3 [73, 73] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4631 += 1, R4587 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R4631 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4631 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4631 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R4632 += 1, R4633 += 1 };
  s0 -> s3 [0, 65535] { R4633 += 1, R4588 += 1, R4589 += 1 };
  s0 -> s4 [73, 73] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [73, 73] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [74, 65535] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s5 [73, 73] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s6 [73, 73] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [74, 65535] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4633 += 1 };
  s2 -> s4 [73, 73] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [73, 73] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R4633 += 1, R4588 += 1, R4589 += 1 };
  s3 -> s4 [73, 73] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [73, 73] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [74, 65535] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R4633 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s9 [0, 65535] { R4633 += 1 };
  s7 -> s6 [0, 65535] { R4633 += 1, R4589 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s7 [0, 65535] { R4633 += 1, R4589 += 1, R3890 += 1, R3891 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4633 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s2 [0, 72] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s0 -> s0 [0, 65535] { R4634 += 1, R4635 += 1 };
  s0 -> s3 [0, 65535] { R4635 += 1, R4590 += 1, R4591 += 1 };
  s0 -> s4 [73, 73] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s0 -> s5 [73, 73] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s0 -> s6 [73, 73] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s7 [73, 73] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s2 [74, 81] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s0 -> s1 [74, 65535] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s8 [87, 87] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s0 -> s2 [88, 65535] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s1 -> s1 [0, 72] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s2 [0, 72] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s1 -> s4 [73, 73] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s1 -> s5 [73, 73] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s1 -> s6 [73, 73] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s7 [73, 73] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s2 [74, 81] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s1 -> s1 [74, 65535] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s8 [87, 87] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s1 -> s2 [88, 65535] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s2 -> s2 [0, 72] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s2 -> s4 [73, 73] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s2 -> s5 [73, 73] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s2 -> s2 [74, 81] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s2 -> s8 [87, 87] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s2 -> s2 [88, 65535] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s3 -> s1 [0, 72] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s2 [0, 72] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s3 -> s3 [0, 65535] { R4635 += 1, R4590 += 1, R4591 += 1 };
  s3 -> s4 [73, 73] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s3 -> s5 [73, 73] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s3 -> s6 [73, 73] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s7 [73, 73] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s2 [74, 81] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s3 -> s1 [74, 65535] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s8 [87, 87] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s3 -> s2 [88, 65535] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s4 -> s4 [0, 81] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s4 -> s10 [87, 87] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s4 -> s4 [88, 65535] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s6 -> s4 [0, 81] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s6 -> s6 [0, 65535] { R4635 += 1, R4591 += 1, R3896 += 1, R3897 += 1 };
  s6 -> s10 [87, 87] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s6 -> s4 [88, 65535] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s8 -> s8 [0, 72] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4635 += 1 };
  s8 -> s10 [73, 73] { R4635 += 1, R4591 += 1 };
  s8 -> s11 [73, 73] { R4635 += 1, R4591 += 1 };
  s8 -> s8 [74, 81] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s8 -> s8 [74, 65535] { R4635 += 1, R4591 += 1 };
  s8 -> s8 [87, 65535] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s10 -> s10 [0, 65535] { R4635 += 1, R4591 += 1 };
  s10 -> s12 [0, 65535] { R4635 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [87, 65535] { R4635 += 1, R4591 += 1, R3897 += 1 };
  s11 -> s11 [0, 65535] { R4635 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4635 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s2 [0, 72] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s3 [0, 65535] { R4637 += 1, R4592 += 1, R4593 += 1 };
  s0 -> s0 [0, 65535] { R4636 += 1, R4637 += 1 };
  s0 -> s4 [73, 73] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s5 [73, 73] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s6 [73, 73] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s7 [73, 73] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s1 [74, 65535] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s2 [74, 65535] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s1 -> s1 [0, 72] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s1 [0, 65535] { R4637 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s6 [73, 73] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s1 [74, 65535] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s1 [0, 72] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s2 [0, 72] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s2 -> s4 [73, 73] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s5 [73, 73] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s2 -> s6 [73, 73] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s7 [73, 73] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s2 -> s1 [74, 65535] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s2 [74, 65535] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s1 [0, 72] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s2 [0, 72] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s3 [0, 65535] { R4637 += 1, R4592 += 1, R4593 += 1 };
  s3 -> s4 [73, 73] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s5 [73, 73] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s6 [73, 73] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s7 [73, 73] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s1 [74, 65535] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s2 [74, 65535] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s4 -> s4 [0, 65535] { R4637 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R4637 += 1 };
  s6 -> s6 [0, 65535] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s7 -> s6 [0, 65535] { R4637 += 1, R4593 += 1, R4323 += 1, R4324 += 1 };
  s7 -> s7 [0, 65535] { R4637 += 1, R4593 += 1, R4322 += 1, R4323 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4637 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s0 -> s2 [0, 72] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s0 -> s0 [0, 65535] { R4638 += 1, R4639 += 1 };
  s0 -> s3 [0, 65535] { R4639 += 1, R4594 += 1, R4595 += 1 };
  s0 -> s4 [73, 73] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s0 -> s5 [73, 73] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s0 -> s6 [73, 73] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s0 -> s7 [73, 73] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s0 -> s2 [74, 80] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s0 -> s1 [74, 65535] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s0 -> s8 [81, 81] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s0 -> s2 [88, 65535] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s1 -> s1 [0, 72] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s1 -> s2 [0, 72] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s1 -> s4 [73, 73] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s1 -> s5 [73, 73] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s1 -> s6 [73, 73] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s1 -> s7 [73, 73] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s1 -> s2 [74, 80] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s1 -> s1 [74, 65535] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s1 -> s8 [81, 81] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s1 -> s2 [88, 65535] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s2 -> s2 [0, 72] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s2 -> s4 [73, 73] { R4639 += 1, R4595 += 1 };
  s2 -> s7 [73, 73] { R4639 += 1, R4595 += 1 };
  s2 -> s2 [74, 80] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s2 -> s2 [74, 65535] { R4639 += 1, R4595 += 1 };
  s2 -> s8 [81, 81] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s2 -> s2 [88, 65535] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s3 -> s1 [0, 72] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s3 -> s2 [0, 72] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s3 -> s3 [0, 65535] { R4639 += 1, R4594 += 1, R4595 += 1 };
  s3 -> s4 [73, 73] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s3 -> s5 [73, 73] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s3 -> s6 [73, 73] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s3 -> s7 [73, 73] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s3 -> s2 [74, 80] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s3 -> s1 [74, 65535] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s3 -> s8 [81, 81] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s3 -> s2 [88, 65535] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s5 -> s7 [0, 80] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s5 -> s5 [0, 65535] { R4639 += 1, R4595 += 1, R4536 += 1, R4537 += 1 };
  s5 -> s10 [81, 81] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s5 -> s7 [88, 65535] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s7 -> s7 [0, 80] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s7 -> s7 [0, 65535] { R4639 += 1, R4595 += 1 };
  s7 -> s10 [81, 81] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s7 -> s7 [88, 65535] { R4639 += 1, R4595 += 1, R4537 += 1 };
  s8 -> s8 [0, 72] { R4639 += 1, R4595 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4639 += 1 };
  s8 -> s10 [73, 73] { R4639 += 1, R4595 += 1 };
  s8 -> s11 [73, 73] { R4639 += 1, R4595 += 1 };
  s8 -> s8 [74, 65535] { R4639 += 1, R4595 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4639 += 1, R4595 += 1 };
  s10 -> s12 [0, 65535] { R4639 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4639 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4639 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R4639 && R20 - R4639 = -1 && R21 = R4639 && R22 - R4639 = -1 && R23 = R4639 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3899 + -1*R3897 - R53 = 0 && R52 + R3898 + R3896 = 0 && R4580 = 0 && R4581 = 0 && R4588 = 0 && R4589 = 0 && R4590 = 0 && R4591 = 0 && R4592 = 0 && R4593 = 0 && R4594 = 0 && R4595 = 0 && R4596 = 0 && R4597 = R4639 && R4598 = 0 && R4599 = R4639 && R4600 = 0 && R4601 = R4639 && R4602 = 0 && R4603 = R4639 && R4604 = 0 && R4605 = R4639 && R4606 = 0 && R4607 = R4639 && R4608 = 0 && R4609 = R4639 && R4610 = 0 && R4611 = R4639 && R4612 = 0 && R4613 = R4639 && R4614 = 0 && R4615 = R4639 && R4616 = 0 && R4617 = R4639 && R4618 = 0 && R4619 = R4639 && R4620 = 0 && R4621 = R4639 && R4622 = 0 && R4623 = R4639 && R4624 = 0 && R4625 = R4639 && R4626 = 0 && R4627 = R4639 && R4628 = 0 && R4629 = R4639 && R4630 = 0 && R4631 = R4639 && R4632 = 0 && R4633 = R4639 && R4634 = 0 && R4635 = R4639 && R4636 = 0 && R4637 = R4639 && R4638 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3899 + -1*R3897 - R53 < 1 && 0 < R4639 && (R1 != 0 || R17 = 0 || (R4540 = 0 && R4541 = 0)) && (R1 != 0 || R17 = 0 || (R4542 = 0 && R4543 = 0)) && (R1 != 0 || R17 = 0 || (R4544 = 0 && R4545 = 0)) && (R1 != 0 || R17 = 0 || (R4546 = 0 && R4547 = 0)) && (R1 != 0 || R17 = 0 || (R4548 = 0 && R4549 = 0)) && (R1 != 0 || R17 = 0 || (R4550 = 0 && R4551 = 0)) && (R1 != 0 || R17 = 0 || (R4552 = 0 && R4553 = 0)) && (R1 != 0 || R17 = 0 || (R4554 = 0 && R4555 = 0)) && (R1 != 0 || R17 = 0 || (R4556 = 0 && R4557 = 0)) && (R1 != 0 || R17 = 0 || (R4558 = 0 && R4559 = 0)) && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R42 + R72 + R70 = 0 || R53 + R3899 + R3897 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R3899 + R3897 < 1))) && (R4540 != 0 || R1 = R4541 || R1 < 1) && (R4542 != 0 || R1 = R4543 || R1 < 1) && (R4544 != 0 || R1 = R4545 || R1 < 1) && (R4546 != 0 || R1 = R4547 || R1 < 1) && (R4548 != 0 || R1 = R4549 || R1 < 1) && (R4550 != 0 || R1 = R4551 || R1 < 1) && (R4552 != 0 || R1 = R4553 || R1 < 1) && (R4554 != 0 || R1 = R4555 || R1 < 1) && (R4556 != 0 || R1 = R4557 || R1 < 1) && (R4558 != 0 || R1 = R4559 || R1 < 1) && (R18 = 0 || (R4578 = 0 && R4579 = 0)) && (R18 = 0 || (R4582 = 0 && R4583 = 0)) && (R18 = 0 || (R4584 = 0 && R4585 = 0)) && (R18 = 0 || (R4586 = 0 && R4587 = 0)) && (R19 = 0 || (R4560 = 0 && R4561 = 0)) && (R19 = 0 || (R4562 = 0 && R4563 = 0)) && (R19 = 0 || (R4564 = 0 && R4565 = 0)) && (R19 = 0 || (R4566 = 0 && R4567 = 0)) && (R19 = 0 || (R4568 = 0 && R4569 = 0)) && (R19 = 0 || (R4570 = 0 && R4571 = 0)) && (R19 = 0 || (R4572 = 0 && R4573 = 0)) && (R19 = 0 || (R4574 = 0 && R4575 = 0)) && (R19 = 0 || (R4576 = 0 && R4577 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0)) && (R58 + R4327 + R4324 = 0 || (R56 + R4325 + R4322 = 0 && R57 + R4326 + R4323 = 0)) && (R58 + R4327 + R4324 = 0 || (R62 + R4538 + R4536 = 0 && R63 + R4539 + R4537 = 0)) && (R4540 = 0 || R1 < 1) && (R4542 = 0 || R1 < 1) && (R4544 = 0 || R1 < 1) && (R4546 = 0 || R1 < 1) && (R4548 = 0 || R1 < 1) && (R4550 = 0 || R1 < 1) && (R4552 = 0 || R1 < 1) && (R4554 = 0 || R1 < 1) && (R4556 = 0 || R1 < 1) && (R4558 = 0 || R1 < 1);
// End of Parikh automata intersection problem
