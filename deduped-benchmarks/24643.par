// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1350, R1351, R1352, R1353, R17, R18, R19, R2, R20, R21, R2198, R2199, R22, R2200, R2201, R2202, R2203, R2204, R2205, R2206, R2207, R2208, R2209, R2210, R2211, R2212, R2213, R2214, R2215, R2216, R2217, R2218, R2219, R2220, R2221, R2222, R2223, R2224, R2225, R2226, R2227, R2228, R2229, R2230, R2231, R2232, R2233, R2234, R2235, R2236, R2237, R2238, R2239, R2240, R2241, R2242, R2243, R2244, R2245, R2246, R2247, R2248, R2249, R2250, R2251, R2252, R2253, R2254, R2255, R2256, R2257, R2258, R2259, R2260, R2261, R2262, R2263, R2264, R2265, R2266, R2267, R2268, R2269, R2270, R2271, R2272, R2273, R2274, R2275, R2276, R2277, R2278, R2279, R2280, R2281, R2282, R2283, R2284, R2285, R2286, R2287, R2288, R2289, R2290, R2291, R2292, R2293, R2294, R2295, R2296, R2297, R2298, R2299, R23, R2300, R2301, R2302, R2303, R2304, R2305, R2306, R2307, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2229 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R2228 += 1, R2229 += 1 };
  s1 -> s1 [0, 65535] { R2229 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R2231 += 1 };
  s0 -> s0 [0, 65535] { R2230 += 1, R2231 += 1 };
  s0 -> s2 [73, 73] { R2231 += 1 };
  s0 -> s3 [73, 73] { R2231 += 1 };
  s0 -> s1 [82, 65535] { R2231 += 1 };
  s1 -> s1 [0, 72] { R2231 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2231 += 1 };
  s1 -> s3 [73, 73] { R2231 += 1 };
  s1 -> s1 [82, 65535] { R2231 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R2231 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R2231 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R2233 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R2232 += 1, R2233 += 1 };
  s0 -> s2 [73, 73] { R2233 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R2233 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R2233 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R2233 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2233 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R2233 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R2233 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R2233 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R2235 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R2234 += 1, R2235 += 1 };
  s0 -> s2 [73, 73] { R2235 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R2235 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R2235 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R2235 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2235 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R2235 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R2235 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2235 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R2237 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2236 += 1, R2237 += 1 };
  s0 -> s2 [73, 73] { R2237 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R2237 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R2237 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R2237 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2237 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R2237 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R2237 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R2237 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R2239 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2238 += 1, R2239 += 1 };
  s0 -> s2 [73, 73] { R2239 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R2239 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R2239 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R2239 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2239 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R2239 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R2239 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2239 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R2241 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R2240 += 1, R2241 += 1 };
  s0 -> s2 [73, 73] { R2241 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R2241 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R2241 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R2241 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2241 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R2241 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R2241 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2241 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R2243 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R2242 += 1, R2243 += 1 };
  s0 -> s2 [73, 73] { R2243 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R2243 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R2243 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R2243 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2243 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R2243 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R2243 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2243 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R2245 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R2244 += 1, R2245 += 1 };
  s0 -> s2 [73, 73] { R2245 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R2245 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R2245 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R2245 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2245 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R2245 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R2245 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R2245 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R2265 += 1 };
  s0 -> s0 [0, 65535] { R2264 += 1, R2265 += 1 };
  s0 -> s2 [73, 73] { R2265 += 1 };
  s0 -> s1 [74, 65535] { R2265 += 1 };
  s1 -> s1 [0, 72] { R2265 += 1 };
  s1 -> s2 [73, 73] { R2265 += 1 };
  s1 -> s1 [74, 65535] { R2265 += 1 };
  s2 -> s2 [0, 65535] { R2265 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2266 += 1, R2267 += 1 };
  s0 -> s1 [0, 65535] { R2267 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2267 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R2269 += 1 };
  s0 -> s0 [0, 65535] { R2268 += 1, R2269 += 1 };
  s0 -> s2 [0, 65535] { R2269 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R2269 += 1 };
  s0 -> s1 [74, 65535] { R2269 += 1 };
  s1 -> s1 [0, 72] { R2269 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R2269 += 1 };
  s1 -> s1 [74, 65535] { R2269 += 1 };
  s2 -> s1 [0, 72] { R2269 += 1 };
  s2 -> s2 [0, 65535] { R2269 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R2269 += 1 };
  s2 -> s1 [74, 65535] { R2269 += 1 };
  s3 -> s3 [0, 65535] { R2269 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R2271 += 1, R2209 += 1 };
  s0 -> s2 [0, 65535] { R2271 += 1, R2208 += 1, R2209 += 1 };
  s0 -> s0 [0, 65535] { R2270 += 1, R2271 += 1 };
  s0 -> s1 [74, 65535] { R2271 += 1, R2209 += 1 };
  s1 -> s1 [0, 72] { R2271 += 1, R2209 += 1 };
  s1 -> s1 [0, 65535] { R2271 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R2271 += 1, R2209 += 1 };
  s2 -> s1 [0, 72] { R2271 += 1, R2209 += 1 };
  s2 -> s2 [0, 65535] { R2271 += 1, R2208 += 1, R2209 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R2271 += 1, R2209 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2273 += 1, R2210 += 1, R2211 += 1 };
  s0 -> s2 [0, 65535] { R2273 += 1, R2211 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R2272 += 1, R2273 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2273 += 1, R2210 += 1, R2211 += 1 };
  s1 -> s2 [0, 65535] { R2273 += 1, R2211 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2273 += 1, R2211 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R2273 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2273 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R2275 += 1, R2213 += 1 };
  s0 -> s0 [0, 65535] { R2274 += 1, R2275 += 1 };
  s0 -> s2 [0, 65535] { R2275 += 1, R2212 += 1, R2213 += 1 };
  s0 -> s1 [81, 65535] { R2275 += 1, R2213 += 1 };
  s1 -> s1 [0, 73] { R2275 += 1, R2213 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2275 += 1 };
  s1 -> s1 [81, 65535] { R2275 += 1, R2213 += 1 };
  s2 -> s1 [0, 73] { R2275 += 1, R2213 += 1 };
  s2 -> s2 [0, 65535] { R2275 += 1, R2212 += 1, R2213 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R2275 += 1, R2213 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2277 += 1, R2214 += 1, R2215 += 1 };
  s0 -> s0 [0, 65535] { R2276 += 1, R2277 += 1 };
  s0 -> s2 [0, 65535] { R2277 += 1, R2215 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2277 += 1, R2214 += 1, R2215 += 1 };
  s1 -> s2 [0, 65535] { R2277 += 1, R2215 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R2277 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2277 += 1, R2215 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R2277 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R2279 += 1, R2217 += 1 };
  s0 -> s2 [0, 65535] { R2279 += 1, R2216 += 1, R2217 += 1 };
  s0 -> s0 [0, 65535] { R2278 += 1, R2279 += 1 };
  s0 -> s3 [0, 65535] { R2279 += 1, R2217 += 1, R69 += 1 };
  s0 -> s1 [82, 65535] { R2279 += 1, R2217 += 1 };
  s1 -> s1 [0, 80] { R2279 += 1, R2217 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2279 += 1 };
  s1 -> s1 [82, 65535] { R2279 += 1, R2217 += 1 };
  s2 -> s1 [0, 80] { R2279 += 1, R2217 += 1 };
  s2 -> s2 [0, 65535] { R2279 += 1, R2216 += 1, R2217 += 1 };
  s2 -> s3 [0, 65535] { R2279 += 1, R2217 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R2279 += 1, R2217 += 1 };
  s3 -> s1 [0, 80] { R2279 += 1, R2217 += 1 };
  s3 -> s4 [0, 65535] { R2279 += 1 };
  s3 -> s3 [0, 65535] { R2279 += 1, R2217 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R2279 += 1, R2217 += 1 };
  s4 -> s4 [0, 65535] { R2279 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R2281 += 1, R2219 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R2281 += 1, R2218 += 1, R2219 += 1 };
  s0 -> s0 [0, 65535] { R2280 += 1, R2281 += 1 };
  s0 -> s3 [0, 65535] { R2281 += 1, R2219 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [82, 65535] { R2281 += 1, R2219 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R2281 += 1, R2219 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R2281 += 1 };
  s1 -> s1 [0, 65535] { R2281 += 1, R2219 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R2281 += 1, R2219 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R2281 += 1, R2219 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R2281 += 1, R2218 += 1, R2219 += 1 };
  s2 -> s3 [0, 65535] { R2281 += 1, R2219 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R2281 += 1, R2219 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R2281 += 1, R2219 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R2281 += 1 };
  s3 -> s3 [0, 65535] { R2281 += 1, R2219 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R2281 += 1, R2219 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R2281 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R2283 += 1, R2221 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R2283 += 1, R2221 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R2282 += 1, R2283 += 1 };
  s0 -> s3 [0, 65535] { R2283 += 1, R2220 += 1, R2221 += 1 };
  s1 -> s1 [0, 65535] { R2283 += 1, R2221 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R2283 += 1 };
  s1 -> s2 [0, 65535] { R2283 += 1, R2221 += 1, R78 += 1, R79 += 1 };
  s2 -> s5 [0, 65535] { R2283 += 1, R2221 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R2283 += 1 };
  s2 -> s2 [0, 65535] { R2283 += 1, R2221 += 1, R78 += 1, R79 += 1 };
  s3 -> s1 [0, 65535] { R2283 += 1, R2221 += 1, R77 += 1, R78 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2283 += 1, R2221 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R2283 += 1, R2220 += 1, R2221 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2283 += 1, R2221 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R2283 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2283 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s0 -> s0 [0, 65535] { R2284 += 1, R2285 += 1 };
  s0 -> s2 [0, 65535] { R2285 += 1, R2223 += 1, R1352 += 1, R1353 += 1 };
  s0 -> s3 [0, 65535] { R2285 += 1, R2222 += 1, R2223 += 1 };
  s0 -> s4 [87, 87] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s0 -> s1 [88, 65535] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s1 -> s1 [0, 81] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s1 -> s4 [87, 87] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s1 -> s1 [88, 65535] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s2 -> s1 [0, 81] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s2 -> s2 [0, 65535] { R2285 += 1, R2223 += 1, R1352 += 1, R1353 += 1 };
  s2 -> s4 [87, 87] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s2 -> s1 [88, 65535] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s3 -> s1 [0, 81] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s3 -> s2 [0, 65535] { R2285 += 1, R2223 += 1, R1352 += 1, R1353 += 1 };
  s3 -> s3 [0, 65535] { R2285 += 1, R2222 += 1, R2223 += 1 };
  s3 -> s4 [87, 87] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s3 -> s1 [88, 65535] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s4 -> s4 [0, 81] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2285 += 1, R2223 += 1 };
  s4 -> s6 [0, 65535] { R2285 += 1 };
  s4 -> s4 [87, 65535] { R2285 += 1, R2223 += 1, R1353 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2285 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R2287 += 1, R2225 += 1 };
  s0 -> s0 [0, 65535] { R2286 += 1, R2287 += 1 };
  s0 -> s2 [0, 65535] { R2287 += 1, R2224 += 1, R2225 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2287 += 1, R2225 += 1 };
  s1 -> s4 [0, 65535] { R2287 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2287 += 1, R2225 += 1 };
  s2 -> s2 [0, 65535] { R2287 += 1, R2224 += 1, R2225 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2287 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s0 -> s0 [0, 65535] { R2288 += 1, R2289 += 1 };
  s0 -> s2 [0, 65535] { R2289 += 1, R2226 += 1, R2227 += 1 };
  s0 -> s3 [0, 65535] { R2289 += 1, R2227 += 1, R2206 += 1, R2207 += 1 };
  s0 -> s4 [81, 81] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s0 -> s5 [81, 81] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s0 -> s1 [88, 65535] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s1 -> s1 [0, 80] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s1 -> s1 [0, 65535] { R2289 += 1, R2227 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R2289 += 1 };
  s1 -> s4 [81, 81] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s1 -> s5 [81, 81] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s1 -> s1 [88, 65535] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s2 -> s1 [0, 80] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s2 -> s2 [0, 65535] { R2289 += 1, R2226 += 1, R2227 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2289 += 1, R2227 += 1, R2206 += 1, R2207 += 1 };
  s2 -> s4 [81, 81] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s2 -> s5 [81, 81] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s2 -> s1 [88, 65535] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s3 -> s1 [0, 80] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2289 += 1, R2227 += 1, R2206 += 1, R2207 += 1 };
  s3 -> s7 [0, 65535] { R2289 += 1 };
  s3 -> s4 [81, 81] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s3 -> s5 [81, 81] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s3 -> s1 [88, 65535] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s4 -> s4 [0, 81] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s4 -> s4 [0, 65535] { R2289 += 1, R2227 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R2289 += 1 };
  s4 -> s4 [88, 65535] { R2289 += 1, R2227 += 1, R2207 += 1 };
  s5 -> s5 [0, 65535] { R2289 += 1, R2227 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R2289 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2289 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R2291 += 1, R2247 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R2290 += 1, R2291 += 1 };
  s0 -> s2 [0, 65535] { R2291 += 1, R2246 += 1, R2247 += 1 };
  s1 -> s4 [0, 65535] { R2291 += 1 };
  s1 -> s1 [0, 65535] { R2291 += 1, R2247 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2291 += 1, R2247 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2291 += 1, R2246 += 1, R2247 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2291 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R2293 += 1, R2249 += 1 };
  s0 -> s2 [0, 65535] { R2293 += 1, R2248 += 1, R2249 += 1 };
  s0 -> s0 [0, 65535] { R2292 += 1, R2293 += 1 };
  s0 -> s3 [73, 73] { R2293 += 1, R2249 += 1 };
  s0 -> s4 [73, 73] { R2293 += 1, R2249 += 1 };
  s0 -> s5 [81, 81] { R2293 += 1, R2249 += 1 };
  s0 -> s1 [82, 65535] { R2293 += 1, R2249 += 1 };
  s1 -> s1 [0, 72] { R2293 += 1, R2249 += 1 };
  s1 -> s3 [73, 73] { R2293 += 1, R2249 += 1 };
  s1 -> s4 [73, 73] { R2293 += 1, R2249 += 1 };
  s1 -> s5 [81, 81] { R2293 += 1, R2249 += 1 };
  s1 -> s1 [82, 65535] { R2293 += 1, R2249 += 1 };
  s2 -> s1 [0, 72] { R2293 += 1, R2249 += 1 };
  s2 -> s2 [0, 65535] { R2293 += 1, R2248 += 1, R2249 += 1 };
  s2 -> s3 [73, 73] { R2293 += 1, R2249 += 1 };
  s2 -> s4 [73, 73] { R2293 += 1, R2249 += 1 };
  s2 -> s5 [81, 81] { R2293 += 1, R2249 += 1 };
  s2 -> s1 [82, 65535] { R2293 += 1, R2249 += 1 };
  s4 -> s4 [0, 73] { R2293 += 1, R2249 += 1 };
  s4 -> s8 [81, 81] { R2293 += 1, R2249 += 1 };
  s4 -> s4 [82, 65535] { R2293 += 1, R2249 += 1 };
  s5 -> s5 [0, 72] { R2293 += 1, R2249 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2293 += 1 };
  s5 -> s7 [73, 73] { R2293 += 1, R2249 += 1 };
  s5 -> s8 [73, 73] { R2293 += 1, R2249 += 1 };
  s5 -> s5 [81, 65535] { R2293 += 1, R2249 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2293 += 1 };
  s8 -> s8 [0, 73] { R2293 += 1, R2249 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2293 += 1 };
  s8 -> s8 [81, 65535] { R2293 += 1, R2249 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R2295 += 1, R2251 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R2294 += 1, R2295 += 1 };
  s0 -> s2 [0, 65535] { R2295 += 1, R2250 += 1, R2251 += 1 };
  s0 -> s3 [73, 73] { R2295 += 1, R2251 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R2295 += 1, R2251 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R2295 += 1, R2251 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R2295 += 1, R2251 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R2295 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R2295 += 1, R2251 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R2295 += 1, R2251 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R2295 += 1, R2251 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R2295 += 1, R2251 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R2295 += 1, R2250 += 1, R2251 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R2295 += 1, R2251 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R2295 += 1, R2251 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R2295 += 1, R2251 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R2295 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2295 += 1 };
  s4 -> s4 [0, 65535] { R2295 += 1, R2251 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2295 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R2297 += 1, R2253 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R2297 += 1, R2252 += 1, R2253 += 1 };
  s0 -> s0 [0, 65535] { R2296 += 1, R2297 += 1 };
  s0 -> s3 [73, 73] { R2297 += 1, R2253 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R2297 += 1, R2253 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R2297 += 1, R2253 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R2297 += 1, R2253 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R2297 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R2297 += 1, R2253 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R2297 += 1, R2253 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R2297 += 1, R2253 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R2297 += 1, R2253 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R2297 += 1, R2252 += 1, R2253 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R2297 += 1, R2253 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R2297 += 1, R2253 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R2297 += 1, R2253 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R2297 += 1 };
  s3 -> s3 [0, 65535] { R2297 += 1, R2253 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2297 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2297 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R2299 += 1, R2254 += 1, R2255 += 1 };
  s0 -> s0 [0, 65535] { R2298 += 1, R2299 += 1 };
  s0 -> s3 [73, 73] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R2299 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2299 += 1, R2254 += 1, R2255 += 1 };
  s2 -> s3 [73, 73] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2299 += 1, R2255 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R2299 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2299 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2299 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R2300 += 1, R2301 += 1 };
  s0 -> s2 [0, 65535] { R2301 += 1, R2256 += 1, R2257 += 1 };
  s0 -> s3 [73, 73] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2301 += 1 };
  s1 -> s3 [73, 73] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R2301 += 1, R2256 += 1, R2257 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2301 += 1 };
  s4 -> s5 [0, 65535] { R2301 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2301 += 1, R2257 += 1, R74 += 1, R75 += 1 };
  s5 -> s5 [0, 65535] { R2301 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s2 [0, 65535] { R2303 += 1, R2258 += 1, R2259 += 1 };
  s0 -> s0 [0, 65535] { R2302 += 1, R2303 += 1 };
  s0 -> s3 [73, 73] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s4 [73, 73] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s1 [74, 65535] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [0, 72] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [0, 65535] { R2303 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s4 [73, 73] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [74, 65535] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [0, 72] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s2 [0, 65535] { R2303 += 1, R2258 += 1, R2259 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s4 [73, 73] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [74, 65535] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s3 [0, 65535] { R2303 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2303 += 1, R2259 += 1, R1350 += 1, R1351 += 1 };
  s4 -> s5 [0, 65535] { R2303 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2303 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s2 [0, 72] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s3 [0, 65535] { R2305 += 1, R2260 += 1, R2261 += 1 };
  s0 -> s0 [0, 65535] { R2304 += 1, R2305 += 1 };
  s0 -> s4 [73, 73] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s5 [73, 73] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s6 [73, 73] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s7 [73, 73] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s1 [74, 65535] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s2 [74, 65535] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s1 [0, 72] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s1 -> s2 [0, 72] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s4 [73, 73] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s1 -> s5 [73, 73] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s1 -> s6 [73, 73] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s7 [73, 73] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s1 [74, 65535] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s1 -> s2 [74, 65535] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s2 [0, 72] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s11 [0, 72] { R2305 += 1, R2261 += 1 };
  s2 -> s12 [73, 73] { R2305 += 1, R2261 += 1 };
  s2 -> s8 [73, 73] { R2305 += 1, R2261 += 1 };
  s2 -> s6 [73, 73] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s7 [73, 73] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s2 [74, 65535] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s11 [74, 65535] { R2305 += 1, R2261 += 1 };
  s3 -> s1 [0, 72] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s2 [0, 72] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s3 [0, 65535] { R2305 += 1, R2260 += 1, R2261 += 1 };
  s3 -> s4 [73, 73] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s5 [73, 73] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s6 [73, 73] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s7 [73, 73] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s1 [74, 65535] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s2 [74, 65535] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s5 -> s5 [0, 65535] { R2305 += 1, R2261 += 1, R2198 += 1, R2199 += 1 };
  s5 -> s7 [0, 65535] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s7 -> s8 [0, 65535] { R2305 += 1, R2261 += 1 };
  s7 -> s7 [0, 65535] { R2305 += 1, R2261 += 1, R2199 += 1, R2200 += 1 };
  s8 -> s9 [0, 65535] { R2305 += 1 };
  s8 -> s8 [0, 65535] { R2305 += 1, R2261 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R2305 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R2305 += 1, R2261 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R2305 += 1 };
  s11 -> s12 [73, 73] { R2305 += 1, R2261 += 1 };
  s11 -> s8 [73, 73] { R2305 += 1, R2261 += 1 };
  s11 -> s11 [74, 65535] { R2305 += 1, R2261 += 1 };
  s12 -> s12 [0, 65535] { R2305 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s0 -> s2 [0, 65535] { R2307 += 1, R2262 += 1, R2263 += 1 };
  s0 -> s0 [0, 65535] { R2306 += 1, R2307 += 1 };
  s0 -> s3 [73, 73] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s0 -> s4 [73, 73] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s0 -> s1 [74, 65535] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s1 -> s1 [0, 72] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s1 -> s1 [0, 65535] { R2307 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s1 -> s4 [73, 73] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s1 -> s1 [74, 65535] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s2 -> s1 [0, 72] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s2 -> s2 [0, 65535] { R2307 += 1, R2262 += 1, R2263 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s2 -> s4 [73, 73] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s2 -> s1 [74, 65535] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s3 -> s3 [0, 65535] { R2307 += 1, R2263 += 1, R2204 += 1, R2205 += 1 };
  s3 -> s6 [0, 65535] { R2307 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2307 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2307 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R2223 && R2 = R2307 && R20 - R2307 = -1 && R21 = R2307 && R22 - R2307 = -1 && R23 = R2307 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R1353 + -1*R1351 - R53 = 0 && R52 + R1352 + R1350 = 0 && R2222 = 0 && R2248 = 0 && R2249 = 0 && R2260 = 0 && R2261 = 0 && R2264 = 0 && R2265 = R2307 && R2266 = 0 && R2267 = R2307 && R2268 = 0 && R2269 = R2307 && R2270 = 0 && R2271 = R2307 && R2272 = 0 && R2273 = R2307 && R2274 = 0 && R2275 = R2307 && R2276 = 0 && R2277 = R2307 && R2278 = 0 && R2279 = R2307 && R2280 = 0 && R2281 = R2307 && R2282 = 0 && R2283 = R2307 && R2284 = 0 && R2285 = R2307 && R2286 = 0 && R2287 = R2307 && R2288 = 0 && R2289 = R2307 && R2290 = 0 && R2291 = R2307 && R2292 = 0 && R2293 = R2307 && R2294 = 0 && R2295 = R2307 && R2296 = 0 && R2297 = R2307 && R2298 = 0 && R2299 = R2307 && R2300 = 0 && R2301 = R2307 && R2302 = 0 && R2303 = R2307 && R2304 = 0 && R2305 = R2307 && R2306 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R1353 + -1*R1351 - R53 < 1 && -1 < R2223 && 0 < R2307 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R42 + R72 + R70 = 0 || R53 + R1353 + R1351 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R46 + R77 + R74 = 0 || R53 + R1353 + R1351 < 1))) && (R2208 != 0 || R2209 = R2223 || (R17 = 0 && R2223 = 0)) && (R2210 != 0 || R2211 = R2223 || (R17 = 0 && R2223 = 0)) && (R2212 != 0 || R2213 = R2223 || (R17 = 0 && R2223 = 0)) && (R2214 != 0 || R2215 = R2223 || (R17 = 0 && R2223 = 0)) && (R2216 != 0 || R2217 = R2223 || (R17 = 0 && R2223 = 0)) && (R2218 != 0 || R2219 = R2223 || (R17 = 0 && R2223 = 0)) && (R2220 != 0 || R2221 = R2223 || (R17 = 0 && R2223 = 0)) && (R2224 != 0 || R2223 = R2225 || (R17 = 0 && R2223 = 0)) && (R2226 != 0 || R2223 = R2227 || (R17 = 0 && R2223 = 0)) && (R18 = 0 || (R2246 = 0 && R2247 = 0)) && (R18 = 0 || (R2250 = 0 && R2251 = 0)) && (R18 = 0 || (R2252 = 0 && R2253 = 0)) && (R18 = 0 || (R2254 = 0 && R2255 = 0)) && (R18 = 0 || (R2256 = 0 && R2257 = 0)) && (R18 = 0 || (R2258 = 0 && R2259 = 0)) && (R18 = 0 || (R2262 = 0 && R2263 = 0)) && (R19 = 0 || (R2228 = 0 && R2229 = 0)) && (R19 = 0 || (R2230 = 0 && R2231 = 0)) && (R19 = 0 || (R2232 = 0 && R2233 = 0)) && (R19 = 0 || (R2234 = 0 && R2235 = 0)) && (R19 = 0 || (R2236 = 0 && R2237 = 0)) && (R19 = 0 || (R2238 = 0 && R2239 = 0)) && (R19 = 0 || (R2240 = 0 && R2241 = 0)) && (R19 = 0 || (R2242 = 0 && R2243 = 0)) && (R19 = 0 || (R2244 = 0 && R2245 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0)) && (R58 + R2203 + R2200 = 0 || (R56 + R2201 + R2198 = 0 && R57 + R2202 + R2199 = 0)) && (R58 + R2203 + R2200 = 0 || (R62 + R2206 + R2204 = 0 && R63 + R2207 + R2205 = 0)) && (R2208 = 0 || (R17 = 0 && R2223 = 0)) && (R2210 = 0 || (R17 = 0 && R2223 = 0)) && (R2212 = 0 || (R17 = 0 && R2223 = 0)) && (R2214 = 0 || (R17 = 0 && R2223 = 0)) && (R2216 = 0 || (R17 = 0 && R2223 = 0)) && (R2218 = 0 || (R17 = 0 && R2223 = 0)) && (R2220 = 0 || (R17 = 0 && R2223 = 0)) && (R2224 = 0 || (R17 = 0 && R2223 = 0)) && (R2226 = 0 || (R17 = 0 && R2223 = 0));
// End of Parikh automata intersection problem
