// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R11958, R11959, R11960, R11961, R11962, R11963, R12, R12276, R12277, R12278, R12279, R12280, R12281, R12282, R12283, R12284, R12285, R12286, R12287, R12288, R12289, R12290, R12291, R12292, R12293, R12294, R12295, R12296, R12297, R12298, R12299, R12300, R12301, R12302, R12303, R12304, R12305, R12306, R12307, R12308, R12309, R12310, R12311, R12312, R12313, R12314, R12315, R12316, R12317, R12318, R12319, R12320, R12321, R12322, R12323, R12324, R12325, R12326, R12327, R12328, R12329, R12330, R12331, R12332, R12333, R12334, R12335, R12336, R12337, R12338, R12339, R12340, R12341, R12342, R12343, R12344, R12345, R12346, R12347, R12348, R12349, R12350, R12351, R12352, R12353, R12354, R12355, R12356, R12357, R12358, R12359, R12360, R12361, R12362, R12363, R12364, R12365, R12366, R12367, R12368, R12369, R12370, R12371, R12372, R12373, R12374, R12375, R12376, R12377, R12378, R12379, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R12300 += 1, R12301 += 1 };
  s0 -> s1 [0, 65535] { R12301 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R12301 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R12303 += 1 };
  s0 -> s0 [0, 65535] { R12302 += 1, R12303 += 1 };
  s0 -> s2 [73, 73] { R12303 += 1 };
  s0 -> s3 [73, 73] { R12303 += 1 };
  s0 -> s1 [82, 65535] { R12303 += 1 };
  s1 -> s1 [0, 72] { R12303 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12303 += 1 };
  s1 -> s3 [73, 73] { R12303 += 1 };
  s1 -> s1 [82, 65535] { R12303 += 1 };
  s2 -> s2 [0, 73] { R12303 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R12303 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R12305 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R12304 += 1, R12305 += 1 };
  s0 -> s2 [73, 73] { R12305 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R12305 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R12305 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R12305 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12305 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R12305 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R12305 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12305 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R12307 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R12306 += 1, R12307 += 1 };
  s0 -> s2 [73, 73] { R12307 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R12307 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R12307 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R12307 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12307 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R12307 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R12307 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R12307 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R12309 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R12308 += 1, R12309 += 1 };
  s0 -> s2 [73, 73] { R12309 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R12309 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R12309 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R12309 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12309 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R12309 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R12309 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12309 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R12311 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12310 += 1, R12311 += 1 };
  s0 -> s2 [73, 73] { R12311 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R12311 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R12311 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R12311 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12311 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R12311 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R12311 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12311 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R12313 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R12312 += 1, R12313 += 1 };
  s0 -> s2 [73, 73] { R12313 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R12313 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R12313 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R12313 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12313 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R12313 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R12313 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12313 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R12315 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12314 += 1, R12315 += 1 };
  s0 -> s2 [73, 73] { R12315 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R12315 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R12315 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R12315 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12315 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R12315 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R12315 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12315 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R12317 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R12316 += 1, R12317 += 1 };
  s0 -> s2 [73, 73] { R12317 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R12317 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R12317 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R12317 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12317 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R12317 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R12317 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12317 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R12337 += 1 };
  s0 -> s0 [0, 65535] { R12336 += 1, R12337 += 1 };
  s0 -> s2 [73, 73] { R12337 += 1 };
  s0 -> s1 [74, 65535] { R12337 += 1 };
  s1 -> s1 [0, 72] { R12337 += 1 };
  s1 -> s2 [73, 73] { R12337 += 1 };
  s1 -> s1 [74, 65535] { R12337 += 1 };
  s2 -> s2 [0, 65535] { R12337 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12339 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12338 += 1, R12339 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12339 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R12341 += 1 };
  s0 -> s2 [0, 65535] { R12341 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R12340 += 1, R12341 += 1 };
  s0 -> s3 [73, 73] { R12341 += 1 };
  s0 -> s1 [74, 65535] { R12341 += 1 };
  s1 -> s1 [0, 72] { R12341 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R12341 += 1 };
  s1 -> s1 [74, 65535] { R12341 += 1 };
  s2 -> s1 [0, 72] { R12341 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12341 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R12341 += 1 };
  s2 -> s1 [74, 65535] { R12341 += 1 };
  s3 -> s3 [0, 65535] { R12341 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R12343 += 1, R12281 += 1 };
  s0 -> s0 [0, 65535] { R12342 += 1, R12343 += 1 };
  s0 -> s2 [0, 65535] { R12343 += 1, R12280 += 1, R12281 += 1 };
  s0 -> s1 [74, 65535] { R12343 += 1, R12281 += 1 };
  s1 -> s1 [0, 72] { R12343 += 1, R12281 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12343 += 1 };
  s1 -> s1 [74, 65535] { R12343 += 1, R12281 += 1 };
  s2 -> s1 [0, 72] { R12343 += 1, R12281 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12343 += 1, R12280 += 1, R12281 += 1 };
  s2 -> s1 [74, 65535] { R12343 += 1, R12281 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12345 += 1, R12283 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R12345 += 1, R12282 += 1, R12283 += 1 };
  s0 -> s0 [0, 65535] { R12344 += 1, R12345 += 1 };
  s1 -> s4 [0, 65535] { R12345 += 1 };
  s1 -> s1 [0, 65535] { R12345 += 1, R12283 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12345 += 1, R12283 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12345 += 1, R12282 += 1, R12283 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12345 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R12347 += 1, R12285 += 1 };
  s0 -> s0 [0, 65535] { R12346 += 1, R12347 += 1 };
  s0 -> s2 [0, 65535] { R12347 += 1, R12284 += 1, R12285 += 1 };
  s0 -> s1 [81, 65535] { R12347 += 1, R12285 += 1 };
  s1 -> s1 [0, 73] { R12347 += 1, R12285 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12347 += 1 };
  s1 -> s1 [81, 65535] { R12347 += 1, R12285 += 1 };
  s2 -> s1 [0, 73] { R12347 += 1, R12285 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12347 += 1, R12284 += 1, R12285 += 1 };
  s2 -> s1 [81, 65535] { R12347 += 1, R12285 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12349 += 1, R12286 += 1, R12287 += 1 };
  s0 -> s0 [0, 65535] { R12348 += 1, R12349 += 1 };
  s0 -> s2 [0, 65535] { R12349 += 1, R12287 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R12349 += 1, R12286 += 1, R12287 += 1 };
  s1 -> s2 [0, 65535] { R12349 += 1, R12287 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12349 += 1 };
  s2 -> s2 [0, 65535] { R12349 += 1, R12287 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12349 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R12351 += 1, R12289 += 1 };
  s0 -> s2 [0, 65535] { R12351 += 1, R12289 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R12350 += 1, R12351 += 1 };
  s0 -> s3 [0, 65535] { R12351 += 1, R12288 += 1, R12289 += 1 };
  s0 -> s1 [82, 65535] { R12351 += 1, R12289 += 1 };
  s1 -> s1 [0, 80] { R12351 += 1, R12289 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12351 += 1 };
  s1 -> s1 [82, 65535] { R12351 += 1, R12289 += 1 };
  s2 -> s1 [0, 80] { R12351 += 1, R12289 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12351 += 1, R12289 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R12351 += 1 };
  s2 -> s1 [82, 65535] { R12351 += 1, R12289 += 1 };
  s3 -> s1 [0, 80] { R12351 += 1, R12289 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12351 += 1, R12289 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R12351 += 1, R12288 += 1, R12289 += 1 };
  s3 -> s1 [82, 65535] { R12351 += 1, R12289 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12351 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R12353 += 1, R12291 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R12353 += 1, R12290 += 1, R12291 += 1 };
  s0 -> s1 [0, 65535] { R12353 += 1, R12291 += 1 };
  s0 -> s0 [0, 65535] { R12352 += 1, R12353 += 1 };
  s0 -> s1 [82, 65535] { R12353 += 1, R12291 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R12353 += 1, R12291 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R12353 += 1, R12291 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12353 += 1 };
  s1 -> s1 [82, 65535] { R12353 += 1, R12291 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R12353 += 1, R12291 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R12353 += 1, R12290 += 1, R12291 += 1 };
  s2 -> s1 [0, 65535] { R12353 += 1, R12291 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R12353 += 1, R12291 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12353 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R12354 += 1, R12355 += 1 };
  s0 -> s1 [0, 65535] { R12355 += 1, R12293 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s2 [0, 65535] { R12355 += 1, R12293 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s3 [0, 65535] { R12355 += 1, R12292 += 1, R12293 += 1 };
  s1 -> s5 [0, 65535] { R12355 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12355 += 1, R12293 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s2 [0, 65535] { R12355 += 1, R12293 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s5 [0, 65535] { R12355 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R12355 += 1, R12293 += 1 };
  s2 -> s2 [0, 65535] { R12355 += 1, R12293 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12355 += 1, R12293 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s2 [0, 65535] { R12355 += 1, R12293 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s3 [0, 65535] { R12355 += 1, R12292 += 1, R12293 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12355 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R12355 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R12355 += 1, R12293 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R12357 += 1, R12295 += 1, R11535 += 1 };
  s0 -> s0 [0, 65535] { R12356 += 1, R12357 += 1 };
  s0 -> s2 [0, 65535] { R12357 += 1, R12294 += 1, R12295 += 1 };
  s0 -> s1 [0, 65535] { R12357 += 1, R12295 += 1 };
  s0 -> s1 [87, 65535] { R12357 += 1, R12295 += 1, R11535 += 1 };
  s1 -> s1 [0, 81] { R12357 += 1, R12295 += 1, R11535 += 1 };
  s1 -> s4 [0, 65535] { R12357 += 1 };
  s1 -> s1 [0, 65535] { R12357 += 1, R12295 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R12357 += 1, R12295 += 1, R11535 += 1 };
  s2 -> s1 [0, 81] { R12357 += 1, R12295 += 1, R11535 += 1 };
  s2 -> s2 [0, 65535] { R12357 += 1, R12294 += 1, R12295 += 1 };
  s2 -> s1 [0, 65535] { R12357 += 1, R12295 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R12357 += 1, R12295 += 1, R11535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12357 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R12358 += 1, R12359 += 1 };
  s0 -> s1 [0, 65535] { R12359 += 1, R12297 += 1, R11962 += 1, R11963 += 1 };
  s0 -> s2 [0, 65535] { R12359 += 1, R12297 += 1 };
  s0 -> s3 [0, 65535] { R12359 += 1, R12296 += 1, R12297 += 1 };
  s1 -> s1 [0, 65535] { R12359 += 1, R12297 += 1, R11962 += 1, R11963 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12359 += 1, R12297 += 1 };
  s1 -> s5 [0, 65535] { R12359 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12359 += 1, R12297 += 1 };
  s2 -> s5 [0, 65535] { R12359 += 1 };
  s3 -> s1 [0, 65535] { R12359 += 1, R12297 += 1, R11962 += 1, R11963 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12359 += 1, R12297 += 1 };
  s3 -> s3 [0, 65535] { R12359 += 1, R12296 += 1, R12297 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12359 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R12361 += 1, R12299 += 1, R12279 += 1 };
  s0 -> s0 [0, 65535] { R12360 += 1, R12361 += 1 };
  s0 -> s2 [0, 65535] { R12361 += 1, R12298 += 1, R12299 += 1 };
  s0 -> s1 [0, 65535] { R12361 += 1, R12299 += 1 };
  s0 -> s1 [88, 65535] { R12361 += 1, R12299 += 1, R12279 += 1 };
  s1 -> s1 [0, 81] { R12361 += 1, R12299 += 1, R12279 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12361 += 1 };
  s1 -> s1 [0, 65535] { R12361 += 1, R12299 += 1 };
  s1 -> s1 [88, 65535] { R12361 += 1, R12299 += 1, R12279 += 1 };
  s2 -> s1 [0, 81] { R12361 += 1, R12299 += 1, R12279 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12361 += 1, R12298 += 1, R12299 += 1 };
  s2 -> s1 [0, 65535] { R12361 += 1, R12299 += 1 };
  s2 -> s1 [88, 65535] { R12361 += 1, R12299 += 1, R12279 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12361 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R12362 += 1, R12363 += 1 };
  s0 -> s1 [0, 65535] { R12363 += 1, R12318 += 1, R12319 += 1 };
  s0 -> s2 [0, 65535] { R12363 += 1, R12319 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R12363 += 1, R12318 += 1, R12319 += 1 };
  s1 -> s2 [0, 65535] { R12363 += 1, R12319 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12363 += 1 };
  s2 -> s2 [0, 65535] { R12363 += 1, R12319 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12363 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R12365 += 1, R12321 += 1 };
  s0 -> s0 [0, 65535] { R12364 += 1, R12365 += 1 };
  s0 -> s2 [0, 65535] { R12365 += 1, R12320 += 1, R12321 += 1 };
  s0 -> s3 [73, 73] { R12365 += 1, R12321 += 1 };
  s0 -> s4 [73, 73] { R12365 += 1, R12321 += 1 };
  s0 -> s5 [81, 81] { R12365 += 1, R12321 += 1 };
  s0 -> s1 [82, 65535] { R12365 += 1, R12321 += 1 };
  s1 -> s1 [0, 72] { R12365 += 1, R12321 += 1 };
  s1 -> s3 [73, 73] { R12365 += 1, R12321 += 1 };
  s1 -> s4 [73, 73] { R12365 += 1, R12321 += 1 };
  s1 -> s5 [81, 81] { R12365 += 1, R12321 += 1 };
  s1 -> s1 [82, 65535] { R12365 += 1, R12321 += 1 };
  s2 -> s1 [0, 72] { R12365 += 1, R12321 += 1 };
  s2 -> s2 [0, 65535] { R12365 += 1, R12320 += 1, R12321 += 1 };
  s2 -> s3 [73, 73] { R12365 += 1, R12321 += 1 };
  s2 -> s4 [73, 73] { R12365 += 1, R12321 += 1 };
  s2 -> s5 [81, 81] { R12365 += 1, R12321 += 1 };
  s2 -> s1 [82, 65535] { R12365 += 1, R12321 += 1 };
  s4 -> s4 [0, 73] { R12365 += 1, R12321 += 1 };
  s4 -> s7 [81, 81] { R12365 += 1, R12321 += 1 };
  s4 -> s4 [82, 65535] { R12365 += 1, R12321 += 1 };
  s5 -> s5 [0, 72] { R12365 += 1, R12321 += 1 };
  s5 -> s5 [0, 65535] { R12365 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R12365 += 1, R12321 += 1 };
  s5 -> s8 [73, 73] { R12365 += 1, R12321 += 1 };
  s5 -> s5 [81, 65535] { R12365 += 1, R12321 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R12365 += 1, R12321 += 1 };
  s7 -> s7 [0, 65535] { R12365 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R12365 += 1, R12321 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12365 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R12367 += 1, R12323 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12366 += 1, R12367 += 1 };
  s0 -> s2 [0, 65535] { R12367 += 1, R12322 += 1, R12323 += 1 };
  s0 -> s3 [73, 73] { R12367 += 1, R12323 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R12367 += 1, R12323 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R12367 += 1, R12323 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R12367 += 1, R12323 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12367 += 1 };
  s1 -> s3 [73, 73] { R12367 += 1, R12323 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R12367 += 1, R12323 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R12367 += 1, R12323 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R12367 += 1, R12323 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12367 += 1, R12322 += 1, R12323 += 1 };
  s2 -> s3 [73, 73] { R12367 += 1, R12323 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R12367 += 1, R12323 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R12367 += 1, R12323 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12367 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12367 += 1 };
  s4 -> s4 [0, 65535] { R12367 += 1, R12323 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12367 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R12369 += 1, R12325 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R12369 += 1, R12324 += 1, R12325 += 1 };
  s0 -> s0 [0, 65535] { R12368 += 1, R12369 += 1 };
  s0 -> s3 [73, 73] { R12369 += 1, R12325 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R12369 += 1, R12325 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R12369 += 1, R12325 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R12369 += 1, R12325 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R12369 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R12369 += 1, R12325 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R12369 += 1, R12325 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R12369 += 1, R12325 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R12369 += 1, R12325 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R12369 += 1, R12324 += 1, R12325 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R12369 += 1, R12325 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R12369 += 1, R12325 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R12369 += 1, R12325 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R12369 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12369 += 1, R12325 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12369 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12369 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R12371 += 1, R12326 += 1, R12327 += 1 };
  s0 -> s0 [0, 65535] { R12370 += 1, R12371 += 1 };
  s0 -> s4 [73, 73] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [74, 80] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [74, 80] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [82, 65535] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s2 -> s2 [0, 65535] { R12371 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [73, 73] { R12371 += 1, R12327 += 1 };
  s2 -> s6 [73, 73] { R12371 += 1, R12327 += 1 };
  s2 -> s2 [74, 80] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R12371 += 1, R12327 += 1 };
  s2 -> s2 [82, 65535] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R12371 += 1, R12326 += 1, R12327 += 1 };
  s3 -> s4 [73, 73] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [74, 80] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s4 -> s6 [0, 80] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R12371 += 1, R12327 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s6 [82, 65535] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R12371 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 80] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R12371 += 1, R12327 += 1 };
  s6 -> s9 [0, 65535] { R12371 += 1 };
  s6 -> s6 [82, 65535] { R12371 += 1, R12327 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12371 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R12372 += 1, R12373 += 1 };
  s0 -> s2 [0, 65535] { R12373 += 1, R12328 += 1, R12329 += 1 };
  s0 -> s3 [73, 73] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R12373 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R12373 += 1, R12328 += 1, R12329 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R12373 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12373 += 1 };
  s4 -> s4 [0, 65535] { R12373 += 1, R12329 += 1, R11526 += 1, R11527 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12373 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s0 -> s2 [0, 72] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s3 [0, 65535] { R12375 += 1, R12330 += 1, R12331 += 1 };
  s0 -> s0 [0, 65535] { R12374 += 1, R12375 += 1 };
  s0 -> s4 [73, 73] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s0 -> s5 [73, 73] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s0 -> s6 [73, 73] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s7 [73, 73] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s1 [74, 81] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s0 -> s2 [74, 65535] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s8 [87, 87] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s0 -> s1 [88, 65535] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s1 -> s1 [0, 72] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s1 -> s4 [73, 73] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s1 -> s5 [73, 73] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s1 -> s1 [74, 81] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s1 -> s8 [87, 87] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s1 -> s1 [88, 65535] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s2 -> s1 [0, 72] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s2 -> s2 [0, 72] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s4 [73, 73] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s2 -> s5 [73, 73] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s2 -> s6 [73, 73] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s7 [73, 73] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s1 [74, 81] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s2 -> s2 [74, 65535] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s8 [87, 87] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s2 -> s1 [88, 65535] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s3 -> s1 [0, 72] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s3 -> s2 [0, 72] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s3 [0, 65535] { R12375 += 1, R12330 += 1, R12331 += 1 };
  s3 -> s4 [73, 73] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s3 -> s5 [73, 73] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s3 -> s6 [73, 73] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s7 [73, 73] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s1 [74, 81] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s3 -> s2 [74, 65535] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s8 [87, 87] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s3 -> s1 [88, 65535] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s5 -> s5 [0, 81] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s5 -> s11 [87, 87] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s5 -> s5 [88, 65535] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s7 -> s5 [0, 81] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s7 -> s7 [0, 65535] { R12375 += 1, R12331 += 1, R11532 += 1, R11533 += 1 };
  s7 -> s11 [87, 87] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s7 -> s5 [88, 65535] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s8 -> s8 [0, 72] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s8 -> s8 [0, 65535] { R12375 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R12375 += 1, R12331 += 1 };
  s8 -> s11 [73, 73] { R12375 += 1, R12331 += 1 };
  s8 -> s8 [74, 81] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s8 -> s8 [74, 65535] { R12375 += 1, R12331 += 1 };
  s8 -> s8 [87, 65535] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12375 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 81] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R12375 += 1 };
  s11 -> s11 [0, 65535] { R12375 += 1, R12331 += 1 };
  s11 -> s11 [87, 65535] { R12375 += 1, R12331 += 1, R11533 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12375 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s0 -> s2 [0, 72] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s0 -> s3 [0, 65535] { R12377 += 1, R12332 += 1, R12333 += 1 };
  s0 -> s0 [0, 65535] { R12376 += 1, R12377 += 1 };
  s0 -> s4 [73, 73] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s0 -> s5 [73, 73] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s0 -> s6 [73, 73] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s0 -> s7 [73, 73] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s0 -> s1 [74, 65535] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s0 -> s2 [74, 65535] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s1 -> s1 [0, 72] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s1 -> s2 [0, 72] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s1 -> s4 [73, 73] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s1 -> s5 [73, 73] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s1 -> s6 [73, 73] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s1 -> s7 [73, 73] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s1 -> s1 [74, 65535] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s1 -> s2 [74, 65535] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s2 -> s2 [0, 72] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s2 -> s2 [0, 65535] { R12377 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [73, 73] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s2 -> s6 [73, 73] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s2 -> s2 [74, 65535] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s3 -> s1 [0, 72] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s3 -> s2 [0, 72] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s3 -> s3 [0, 65535] { R12377 += 1, R12332 += 1, R12333 += 1 };
  s3 -> s4 [73, 73] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s3 -> s5 [73, 73] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s3 -> s6 [73, 73] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s3 -> s7 [73, 73] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s3 -> s1 [74, 65535] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s3 -> s2 [74, 65535] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s5 -> s5 [0, 65535] { R12377 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R12377 += 1 };
  s6 -> s6 [0, 65535] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R12377 += 1, R12333 += 1, R11959 += 1, R11960 += 1 };
  s7 -> s7 [0, 65535] { R12377 += 1, R12333 += 1, R11958 += 1, R11959 += 1 };
  s8 -> s8 [0, 65535] { R12377 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s0 -> s2 [0, 72] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s0 -> s3 [0, 65535] { R12379 += 1, R12334 += 1, R12335 += 1 };
  s0 -> s0 [0, 65535] { R12378 += 1, R12379 += 1 };
  s0 -> s4 [73, 73] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s0 -> s5 [73, 73] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s0 -> s6 [73, 73] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s0 -> s7 [73, 73] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s0 -> s2 [74, 80] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s0 -> s1 [74, 65535] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s0 -> s8 [81, 81] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s0 -> s2 [88, 65535] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s1 -> s1 [0, 72] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s1 -> s2 [0, 72] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s1 -> s4 [73, 73] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s1 -> s5 [73, 73] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s1 -> s6 [73, 73] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s1 -> s7 [73, 73] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s1 -> s2 [74, 80] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s1 -> s1 [74, 65535] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s1 -> s8 [81, 81] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s1 -> s2 [88, 65535] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s2 -> s2 [0, 72] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s2 -> s6 [73, 73] { R12379 += 1, R12335 += 1 };
  s2 -> s7 [73, 73] { R12379 += 1, R12335 += 1 };
  s2 -> s2 [74, 80] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s2 -> s2 [74, 65535] { R12379 += 1, R12335 += 1 };
  s2 -> s8 [81, 81] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s2 -> s2 [88, 65535] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s3 -> s1 [0, 72] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s3 -> s2 [0, 72] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s3 -> s3 [0, 65535] { R12379 += 1, R12334 += 1, R12335 += 1 };
  s3 -> s4 [73, 73] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s3 -> s5 [73, 73] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s3 -> s6 [73, 73] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s3 -> s7 [73, 73] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s3 -> s2 [74, 80] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s3 -> s1 [74, 65535] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s3 -> s8 [81, 81] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s3 -> s2 [88, 65535] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s5 -> s6 [0, 80] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s5 -> s5 [0, 65535] { R12379 += 1, R12335 += 1, R12276 += 1, R12277 += 1 };
  s5 -> s11 [81, 81] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s5 -> s6 [88, 65535] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s6 -> s6 [0, 80] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s6 -> s6 [0, 65535] { R12379 += 1, R12335 += 1 };
  s6 -> s11 [81, 81] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s6 -> s6 [88, 65535] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s8 -> s8 [0, 72] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s8 -> s8 [0, 65535] { R12379 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R12379 += 1, R12335 += 1 };
  s8 -> s11 [73, 73] { R12379 += 1, R12335 += 1 };
  s8 -> s8 [74, 81] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s8 -> s8 [74, 65535] { R12379 += 1, R12335 += 1 };
  s8 -> s8 [88, 65535] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12379 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 81] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s11 -> s12 [0, 65535] { R12379 += 1 };
  s11 -> s11 [0, 65535] { R12379 += 1, R12335 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [88, 65535] { R12379 += 1, R12335 += 1, R12277 += 1 };
  s12 -> s12 [0, 65535] { R12379 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R12379 && R20 - R12379 = -1 && R21 = R12379 && R22 - R12379 = -1 && R23 = R12379 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11535 + -1*R11533 - R53 = 0 && R52 + R11534 + R11532 = 0 && R12320 = 0 && R12321 = 0 && R12326 = 0 && R12327 = 0 && R12330 = 0 && R12331 = 0 && R12332 = 0 && R12333 = 0 && R12334 = 0 && R12335 = 0 && R12336 = 0 && R12337 = R12379 && R12338 = 0 && R12339 = R12379 && R12340 = 0 && R12341 = R12379 && R12342 = 0 && R12343 = R12379 && R12344 = 0 && R12345 = R12379 && R12346 = 0 && R12347 = R12379 && R12348 = 0 && R12349 = R12379 && R12350 = 0 && R12351 = R12379 && R12352 = 0 && R12353 = R12379 && R12354 = 0 && R12355 = R12379 && R12356 = 0 && R12357 = R12379 && R12358 = 0 && R12359 = R12379 && R12360 = 0 && R12361 = R12379 && R12362 = 0 && R12363 = R12379 && R12364 = 0 && R12365 = R12379 && R12366 = 0 && R12367 = R12379 && R12368 = 0 && R12369 = R12379 && R12370 = 0 && R12371 = R12379 && R12372 = 0 && R12373 = R12379 && R12374 = 0 && R12375 = R12379 && R12376 = 0 && R12377 = R12379 && R12378 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11535 + -1*R11533 - R53 < 1 && 0 < R12379 && (R1 != 0 || R17 = 0 || (R12280 = 0 && R12281 = 0)) && (R1 != 0 || R17 = 0 || (R12282 = 0 && R12283 = 0)) && (R1 != 0 || R17 = 0 || (R12284 = 0 && R12285 = 0)) && (R1 != 0 || R17 = 0 || (R12286 = 0 && R12287 = 0)) && (R1 != 0 || R17 = 0 || (R12288 = 0 && R12289 = 0)) && (R1 != 0 || R17 = 0 || (R12290 = 0 && R12291 = 0)) && (R1 != 0 || R17 = 0 || (R12292 = 0 && R12293 = 0)) && (R1 != 0 || R17 = 0 || (R12294 = 0 && R12295 = 0)) && (R1 != 0 || R17 = 0 || (R12296 = 0 && R12297 = 0)) && (R1 != 0 || R17 = 0 || (R12298 = 0 && R12299 = 0)) && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R11535 + R11533 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R11535 + R11533 < 1))) && (R12280 != 0 || R1 = R12281 || R1 < 1) && (R12282 != 0 || R1 = R12283 || R1 < 1) && (R12284 != 0 || R1 = R12285 || R1 < 1) && (R12286 != 0 || R1 = R12287 || R1 < 1) && (R12288 != 0 || R1 = R12289 || R1 < 1) && (R12290 != 0 || R1 = R12291 || R1 < 1) && (R12292 != 0 || R1 = R12293 || R1 < 1) && (R12294 != 0 || R1 = R12295 || R1 < 1) && (R12296 != 0 || R1 = R12297 || R1 < 1) && (R12298 != 0 || R1 = R12299 || R1 < 1) && (R18 = 0 || (R12318 = 0 && R12319 = 0)) && (R18 = 0 || (R12322 = 0 && R12323 = 0)) && (R18 = 0 || (R12324 = 0 && R12325 = 0)) && (R18 = 0 || (R12328 = 0 && R12329 = 0)) && (R19 = 0 || (R12300 = 0 && R12301 = 0)) && (R19 = 0 || (R12302 = 0 && R12303 = 0)) && (R19 = 0 || (R12304 = 0 && R12305 = 0)) && (R19 = 0 || (R12306 = 0 && R12307 = 0)) && (R19 = 0 || (R12308 = 0 && R12309 = 0)) && (R19 = 0 || (R12310 = 0 && R12311 = 0)) && (R19 = 0 || (R12312 = 0 && R12313 = 0)) && (R19 = 0 || (R12314 = 0 && R12315 = 0)) && (R19 = 0 || (R12316 = 0 && R12317 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0)) && (R58 + R11963 + R11960 = 0 || (R56 + R11961 + R11958 = 0 && R57 + R11962 + R11959 = 0)) && (R58 + R11963 + R11960 = 0 || (R62 + R12278 + R12276 = 0 && R63 + R12279 + R12277 = 0)) && (R12280 = 0 || R1 < 1) && (R12282 = 0 || R1 < 1) && (R12284 = 0 || R1 < 1) && (R12286 = 0 || R1 < 1) && (R12288 = 0 || R1 < 1) && (R12290 = 0 || R1 < 1) && (R12292 = 0 || R1 < 1) && (R12294 = 0 || R1 < 1) && (R12296 = 0 || R1 < 1) && (R12298 = 0 || R1 < 1);
// End of Parikh automata intersection problem
