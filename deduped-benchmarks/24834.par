// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R176, R177, R2, R260, R261, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R4, R6, R7;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [69, 69];
  s0 -> s0 [70, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [69, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R260 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 68];
  s0 -> s0 [0, 65535] { R261 += 1 };
  s0 -> s2 [69, 69];
  s0 -> s1 [70, 65535];
  s1 -> s1 [0, 68];
  s1 -> s2 [69, 69];
  s1 -> s1 [70, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R266 += 1 };
  s0 -> s0 [0, 65535] { R265 += 1, R266 += 1 };
  s0 -> s2 [9, 13] { R266 += 1 };
  s0 -> s1 [14, 31] { R266 += 1 };
  s0 -> s2 [32, 32] { R266 += 1 };
  s0 -> s1 [33, 65535] { R266 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R266 += 1 };
  s2 -> s1 [0, 65535] { R266 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R268 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R267 += 1, R268 += 1 };
  s1 -> s1 [0, 65535] { R268 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R270 += 1 };
  s0 -> s0 [0, 65535] { R269 += 1, R270 += 1 };
  s0 -> s2 [9, 13] { R270 += 1 };
  s0 -> s1 [14, 31] { R270 += 1 };
  s0 -> s2 [32, 32] { R270 += 1 };
  s0 -> s1 [33, 65535] { R270 += 1 };
  s1 -> s1 [0, 65535] { R270 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R270 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R271 += 1, R272 += 1 };
  s0 -> s1 [0, 65535] { R272 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R272 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 68] { R288 += 1 };
  s0 -> s0 [0, 65535] { R287 += 1, R288 += 1 };
  s0 -> s2 [69, 69] { R288 += 1 };
  s0 -> s1 [70, 65535] { R288 += 1 };
  s1 -> s1 [0, 68] { R288 += 1 };
  s1 -> s2 [69, 69] { R288 += 1 };
  s1 -> s1 [70, 65535] { R288 += 1 };
  s2 -> s2 [0, 65535] { R288 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R290 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R289 += 1, R290 += 1 };
  s1 -> s1 [0, 65535] { R290 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 68] { R292 += 1, R177 += 1 };
  s0 -> s2 [0, 65535] { R292 += 1, R176 += 1, R177 += 1 };
  s0 -> s0 [0, 65535] { R291 += 1, R292 += 1 };
  s0 -> s3 [69, 69] { R292 += 1 };
  s0 -> s1 [70, 65535] { R292 += 1, R177 += 1 };
  s1 -> s1 [0, 68] { R292 += 1, R177 += 1 };
  s1 -> s3 [69, 69] { R292 += 1 };
  s1 -> s1 [70, 65535] { R292 += 1, R177 += 1 };
  s2 -> s1 [0, 68] { R292 += 1, R177 += 1 };
  s2 -> s2 [0, 65535] { R292 += 1, R176 += 1, R177 += 1 };
  s2 -> s3 [69, 69] { R292 += 1 };
  s2 -> s1 [70, 65535] { R292 += 1, R177 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R292 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 68] { R294 += 1, R278 += 1 };
  s0 -> s0 [0, 65535] { R293 += 1, R294 += 1 };
  s0 -> s2 [0, 65535] { R294 += 1, R277 += 1, R278 += 1 };
  s0 -> s3 [69, 69] { R294 += 1, R278 += 1 };
  s0 -> s1 [70, 65535] { R294 += 1, R278 += 1 };
  s1 -> s1 [0, 68] { R294 += 1, R278 += 1 };
  s1 -> s3 [69, 69] { R294 += 1, R278 += 1 };
  s1 -> s1 [70, 65535] { R294 += 1, R278 += 1 };
  s2 -> s1 [0, 68] { R294 += 1, R278 += 1 };
  s2 -> s2 [0, 65535] { R294 += 1, R277 += 1, R278 += 1 };
  s2 -> s3 [69, 69] { R294 += 1, R278 += 1 };
  s2 -> s1 [70, 65535] { R294 += 1, R278 += 1 };
  s3 -> s3 [0, 65535] { R294 += 1, R278 += 1 };
  s3 -> s4 [0, 65535] { R294 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R294 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R296 += 1, R279 += 1, R280 += 1 };
  s0 -> s2 [0, 65535] { R296 += 1, R280 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R295 += 1, R296 += 1 };
  s1 -> s1 [0, 65535] { R296 += 1, R279 += 1, R280 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R296 += 1, R280 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R296 += 1 };
  s2 -> s2 [0, 65535] { R296 += 1, R280 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R296 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 68] { R298 += 1, R282 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R298 += 1, R281 += 1, R282 += 1 };
  s0 -> s3 [0, 65535] { R298 += 1, R282 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s0 -> s4 [69, 69] { R298 += 1, R282 += 1 };
  s0 -> s1 [70, 65535] { R298 += 1, R282 += 1, R7 += 1 };
  s1 -> s1 [0, 68] { R298 += 1, R282 += 1, R7 += 1 };
  s1 -> s4 [69, 69] { R298 += 1, R282 += 1 };
  s1 -> s1 [70, 65535] { R298 += 1, R282 += 1, R7 += 1 };
  s2 -> s1 [0, 68] { R298 += 1, R282 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R298 += 1, R281 += 1, R282 += 1 };
  s2 -> s3 [0, 65535] { R298 += 1, R282 += 1, R6 += 1, R7 += 1 };
  s2 -> s4 [69, 69] { R298 += 1, R282 += 1 };
  s2 -> s1 [70, 65535] { R298 += 1, R282 += 1, R7 += 1 };
  s3 -> s1 [0, 68] { R298 += 1, R282 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R298 += 1, R282 += 1, R6 += 1, R7 += 1 };
  s3 -> s4 [69, 69] { R298 += 1, R282 += 1 };
  s3 -> s1 [70, 65535] { R298 += 1, R282 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R298 += 1, R282 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R298 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R298 += 1 };
  accepting s4, s5, s6;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R300 += 1, R284 += 1, R274 += 1 };
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s2 [0, 65535] { R300 += 1, R284 += 1, R273 += 1, R274 += 1 };
  s0 -> s3 [0, 65535] { R300 += 1, R283 += 1, R284 += 1 };
  s0 -> s4 [69, 69] { R300 += 1, R284 += 1, R274 += 1 };
  s0 -> s1 [70, 65535] { R300 += 1, R284 += 1, R274 += 1 };
  s1 -> s1 [0, 68] { R300 += 1, R284 += 1, R274 += 1 };
  s1 -> s4 [69, 69] { R300 += 1, R284 += 1, R274 += 1 };
  s1 -> s1 [70, 65535] { R300 += 1, R284 += 1, R274 += 1 };
  s2 -> s1 [0, 68] { R300 += 1, R284 += 1, R274 += 1 };
  s2 -> s2 [0, 65535] { R300 += 1, R284 += 1, R273 += 1, R274 += 1 };
  s2 -> s4 [69, 69] { R300 += 1, R284 += 1, R274 += 1 };
  s2 -> s1 [70, 65535] { R300 += 1, R284 += 1, R274 += 1 };
  s3 -> s1 [0, 68] { R300 += 1, R284 += 1, R274 += 1 };
  s3 -> s2 [0, 65535] { R300 += 1, R284 += 1, R273 += 1, R274 += 1 };
  s3 -> s3 [0, 65535] { R300 += 1, R283 += 1, R284 += 1 };
  s3 -> s4 [69, 69] { R300 += 1, R284 += 1, R274 += 1 };
  s3 -> s1 [70, 65535] { R300 += 1, R284 += 1, R274 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R300 += 1 };
  s4 -> s4 [0, 65535] { R300 += 1, R284 += 1, R274 += 1 };
  s4 -> s7 [0, 65535] { R300 += 1, R284 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R300 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R300 += 1 };
  s7 -> s7 [0, 65535] { R300 += 1, R284 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R302 += 1, R286 += 1, R276 += 1, R264 += 1 };
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s2 [0, 65535] { R302 += 1, R286 += 1, R275 += 1, R276 += 1 };
  s0 -> s3 [0, 65535] { R302 += 1, R285 += 1, R286 += 1 };
  s1 -> s1 [0, 65535] { R302 += 1, R286 += 1, R276 += 1, R264 += 1 };
  s1 -> s6 [0, 65535] { R302 += 1, R286 += 1 };
  s1 -> s5 [0, 65535] { R302 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R302 += 1, R286 += 1, R276 += 1, R264 += 1 };
  s2 -> s2 [0, 65535] { R302 += 1, R286 += 1, R275 += 1, R276 += 1 };
  s2 -> s5 [0, 65535] { R302 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R302 += 1, R286 += 1, R276 += 1, R264 += 1 };
  s3 -> s2 [0, 65535] { R302 += 1, R286 += 1, R275 += 1, R276 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R302 += 1, R285 += 1, R286 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R302 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R302 += 1, R286 += 1 };
  s6 -> s5 [0, 65535] { R302 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R274 && R1 = R284 && R2 = R302 && R6 = 0 && R7 - R273 = -1 && R176 = 0 && R177 - R283 = -1 && R265 - R302 = -1 && R266 = R302 && R267 - R302 = -1 && R268 = R302 && R269 = 0 && R270 = 1 && R271 = 0 && R272 = 1 && R277 = R283 && R278 = R284 && R281 = R283 && R282 = R284 && R287 = 0 && R288 = R302 && R289 = 0 && R290 = R302 && R291 = 0 && R292 = R302 && R293 = 0 && R294 = R302 && R295 = 0 && R296 = R302 && R297 = 0 && R298 = R302 && R299 = 0 && R300 = R302 && R301 = 0 && R260 < 1 && R261 < 1 && R273 - R274 < 1 && -1 < R273 && R283 - R284 < 1 && -1 < R283 && 0 < R302 && (R273 != R275 || R274 = R276 || ((R264 != 0 || R274 - R275 < 1 || R275 < 0) && (R264 = 0 || R274 < R275 || R275 < 0))) && (R279 != R283 || R280 = R284 || (R274 = 0 && (R273 != 0 || R284 - R283 < 1))) && (R283 != R285 || R284 = R286 || ((R273 != 0 || R274 != 0 || R284 - R285 < 1 || R285 < 0) && (R274 < 1 || R284 < R285 || R285 < 0))) && (R273 = R275 || (R264 = 0 && R273 = R274)) && (R279 = R283 || (R274 = 0 && (R273 != 0 || R284 - R283 < 1))) && (R283 = R285 || (R274 = 0 && (R273 != 0 || R284 - R283 < 1)));
// End of Parikh automata intersection problem
