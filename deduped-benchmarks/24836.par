// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R2, R3, R4, R5, R9, R93, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [69, 69];
  s0 -> s0 [70, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [69, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R93 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 68] { R96 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s2 [69, 69];
  s0 -> s1 [70, 65535] { R96 += 1 };
  s1 -> s1 [0, 68] { R96 += 1 };
  s1 -> s2 [69, 69];
  s1 -> s1 [70, 65535] { R96 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R138 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s2 [9, 13] { R138 += 1 };
  s0 -> s1 [14, 31] { R138 += 1 };
  s0 -> s2 [32, 32] { R138 += 1 };
  s0 -> s1 [33, 65535] { R138 += 1 };
  s1 -> s1 [0, 65535] { R138 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R138 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R140 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s1 -> s1 [0, 65535] { R140 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R142 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s0 -> s2 [9, 13] { R142 += 1 };
  s0 -> s1 [14, 31] { R142 += 1 };
  s0 -> s2 [32, 32] { R142 += 1 };
  s0 -> s1 [33, 65535] { R142 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R142 += 1 };
  s2 -> s1 [0, 65535] { R142 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R143 += 1, R144 += 1 };
  s0 -> s1 [0, 65535] { R144 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R144 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 68] { R160 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s2 [69, 69] { R160 += 1 };
  s0 -> s1 [70, 65535] { R160 += 1 };
  s1 -> s1 [0, 68] { R160 += 1 };
  s1 -> s2 [69, 69] { R160 += 1 };
  s1 -> s1 [70, 65535] { R160 += 1 };
  s2 -> s2 [0, 65535] { R160 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s1 [0, 65535] { R162 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R162 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 68] { R164 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R9 += 1, R10 += 1 };
  s0 -> s3 [69, 69] { R164 += 1 };
  s0 -> s1 [70, 65535] { R164 += 1, R10 += 1 };
  s1 -> s1 [0, 68] { R164 += 1, R10 += 1 };
  s1 -> s3 [69, 69] { R164 += 1 };
  s1 -> s1 [70, 65535] { R164 += 1, R10 += 1 };
  s2 -> s1 [0, 68] { R164 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R164 += 1, R9 += 1, R10 += 1 };
  s2 -> s3 [69, 69] { R164 += 1 };
  s2 -> s1 [70, 65535] { R164 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R164 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 68] { R166 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R149 += 1, R150 += 1 };
  s0 -> s3 [69, 69] { R166 += 1, R150 += 1 };
  s0 -> s1 [70, 65535] { R166 += 1, R150 += 1 };
  s1 -> s1 [0, 68] { R166 += 1, R150 += 1 };
  s1 -> s3 [69, 69] { R166 += 1, R150 += 1 };
  s1 -> s1 [70, 65535] { R166 += 1, R150 += 1 };
  s2 -> s1 [0, 68] { R166 += 1, R150 += 1 };
  s2 -> s2 [0, 65535] { R166 += 1, R149 += 1, R150 += 1 };
  s2 -> s3 [69, 69] { R166 += 1, R150 += 1 };
  s2 -> s1 [70, 65535] { R166 += 1, R150 += 1 };
  s3 -> s3 [0, 65535] { R166 += 1, R150 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R166 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R166 += 1 };
  accepting s3, s4, s5;
};
automaton value2_12 {
  init s0;
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s1 [0, 65535] { R168 += 1, R151 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R152 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R168 += 1, R151 += 1, R152 += 1 };
  s1 -> s2 [0, 65535] { R168 += 1, R152 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R168 += 1, R152 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R168 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R168 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 68] { R170 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R154 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R170 += 1, R153 += 1, R154 += 1 };
  s0 -> s4 [69, 69] { R170 += 1, R154 += 1 };
  s0 -> s1 [70, 65535] { R170 += 1, R154 += 1 };
  s1 -> s1 [0, 68] { R170 += 1, R154 += 1 };
  s1 -> s1 [0, 65535] { R170 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [69, 69] { R170 += 1, R154 += 1 };
  s1 -> s1 [70, 65535] { R170 += 1, R154 += 1 };
  s2 -> s1 [0, 68] { R170 += 1, R154 += 1 };
  s2 -> s2 [0, 65535] { R170 += 1, R154 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R170 += 1 };
  s2 -> s4 [69, 69] { R170 += 1, R154 += 1 };
  s2 -> s1 [70, 65535] { R170 += 1, R154 += 1 };
  s3 -> s1 [0, 68] { R170 += 1, R154 += 1 };
  s3 -> s2 [0, 65535] { R170 += 1, R154 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R170 += 1, R153 += 1, R154 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [69, 69] { R170 += 1, R154 += 1 };
  s3 -> s1 [70, 65535] { R170 += 1, R154 += 1 };
  s4 -> s4 [0, 65535] { R170 += 1, R154 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R170 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R172 += 1, R156 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [0, 65535] { R172 += 1, R156 += 1, R145 += 1, R146 += 1 };
  s0 -> s4 [69, 69] { R172 += 1, R156 += 1, R146 += 1 };
  s0 -> s1 [70, 65535] { R172 += 1, R156 += 1, R146 += 1 };
  s1 -> s1 [0, 68] { R172 += 1, R156 += 1, R146 += 1 };
  s1 -> s4 [69, 69] { R172 += 1, R156 += 1, R146 += 1 };
  s1 -> s1 [70, 65535] { R172 += 1, R156 += 1, R146 += 1 };
  s2 -> s1 [0, 68] { R172 += 1, R156 += 1, R146 += 1 };
  s2 -> s2 [0, 65535] { R172 += 1, R155 += 1, R156 += 1 };
  s2 -> s3 [0, 65535] { R172 += 1, R156 += 1, R145 += 1, R146 += 1 };
  s2 -> s4 [69, 69] { R172 += 1, R156 += 1, R146 += 1 };
  s2 -> s1 [70, 65535] { R172 += 1, R156 += 1, R146 += 1 };
  s3 -> s1 [0, 68] { R172 += 1, R156 += 1, R146 += 1 };
  s3 -> s3 [0, 65535] { R172 += 1, R156 += 1, R145 += 1, R146 += 1 };
  s3 -> s4 [69, 69] { R172 += 1, R156 += 1, R146 += 1 };
  s3 -> s1 [70, 65535] { R172 += 1, R156 += 1, R146 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R172 += 1 };
  s4 -> s7 [0, 65535] { R172 += 1, R156 += 1 };
  s4 -> s4 [0, 65535] { R172 += 1, R156 += 1, R146 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R172 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R172 += 1 };
  s7 -> s7 [0, 65535] { R172 += 1, R156 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R174 += 1, R157 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R158 += 1, R147 += 1, R148 += 1 };
  s0 -> s3 [0, 65535] { R174 += 1, R158 += 1, R148 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s1 -> s1 [0, 65535] { R174 += 1, R157 += 1, R158 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R174 += 1, R158 += 1, R147 += 1, R148 += 1 };
  s1 -> s3 [0, 65535] { R174 += 1, R158 += 1, R148 += 1, R136 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R174 += 1, R158 += 1, R147 += 1, R148 += 1 };
  s2 -> s3 [0, 65535] { R174 += 1, R158 += 1, R148 += 1, R136 += 1 };
  s2 -> s6 [0, 65535] { R174 += 1 };
  s3 -> s4 [0, 65535] { R174 += 1, R158 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R174 += 1, R158 += 1, R148 += 1, R136 += 1 };
  s3 -> s6 [0, 65535] { R174 += 1 };
  s4 -> s4 [0, 65535] { R174 += 1, R158 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R174 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R174 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R146 && R1 = R156 && R2 = R172 && R9 = 0 && R10 - R155 = -1 && R95 = 0 && R96 - R171 = -1 && R137 - R172 = -1 && R138 = R172 && R139 - R172 = -1 && R140 = R172 && R141 = 0 && R142 = 1 && R143 = 0 && R144 = 1 && R145 = 0 && R149 = R155 && R150 = R156 && R159 = R171 && R160 = R172 && R163 = R171 && R164 = R172 && R165 = R171 && R166 = R172 && R5 < 1 && R93 < 1 && -1 < R146 && R155 - R156 < 1 && -1 < R155 && R171 - R172 < 1 && -1 < R171 && 0 < R172 && (R147 != 0 || R146 = R148 || (R136 = 0 && R146 = 0)) && (R151 != R155 || R152 = R156 || (R146 = 0 && R155 = R156)) && (R153 != R155 || R154 = R156 || (R146 = 0 && R155 = R156)) && (R155 != R157 || R156 = R158 || ((R146 != 0 || R156 - R157 < 1 || R157 < 0) && (R146 < 1 || R156 < R157 || R157 < 0))) && (R161 != R171 || R162 = R172 || (R156 = 0 && (R155 != 0 || R172 - R171 < 1))) && (R167 != R171 || R168 = R172 || (R156 = 0 && (R155 != 0 || R172 - R171 < 1))) && (R169 != R171 || R170 = R172 || (R156 = 0 && (R155 != 0 || R172 - R171 < 1))) && (R171 != R173 || R172 = R174 || ((R155 != 0 || R156 != 0 || R172 - R173 < 1 || R173 < 0) && (R156 < 1 || R172 < R173 || R173 < 0))) && (R147 = 0 || (R136 = 0 && R146 = 0)) && (R151 = R155 || (R146 = 0 && R155 = R156)) && (R153 = R155 || (R146 = 0 && R155 = R156)) && (R155 = R157 || (R146 = 0 && R155 = R156)) && (R161 = R171 || (R156 = 0 && (R155 != 0 || R172 - R171 < 1))) && (R167 = R171 || (R156 = 0 && (R155 != 0 || R172 - R171 < 1))) && (R169 = R171 || (R156 = 0 && (R155 != 0 || R172 - R171 < 1))) && (R171 = R173 || (R156 = 0 && (R155 != 0 || R172 - R171 < 1)));
// End of Parikh automata intersection problem
