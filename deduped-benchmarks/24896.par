// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10252, R10253, R10254, R10255, R10256, R10257, R10258, R10259, R10260, R10261, R10262, R10263, R10264, R10265, R10266, R10267, R10268, R10269, R10270, R10271, R10272, R10273, R10274, R10275, R10276, R10277, R10278, R10279, R10280, R10281, R10282, R10283, R10284, R10285, R10286, R10287, R10288, R10289, R10290, R10291, R10292, R10293, R10294, R10295, R10296, R10297, R10298, R10299, R10300, R10301, R10302, R10303, R10304, R10305, R10306, R10307, R10308, R10309, R10310, R10311, R10312, R10313, R10314, R10315, R10316, R10317, R10318, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10327, R10328, R10329, R10330, R10331, R10332, R10333, R10334, R10335, R10336, R10337, R10338, R10339, R10340, R10341, R10342, R10343, R10344, R10345, R10346, R10347, R10348, R10349, R10350, R10351, R10352, R10353, R10354, R10355, R10356, R10357, R10358, R10359, R10360, R10361, R10362, R10363, R10364, R10365, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10287 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R10286 += 1, R10287 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10287 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R10289 += 1 };
  s0 -> s0 [0, 65535] { R10288 += 1, R10289 += 1 };
  s0 -> s2 [75, 75] { R10289 += 1 };
  s0 -> s3 [75, 75] { R10289 += 1 };
  s0 -> s1 [88, 65535] { R10289 += 1 };
  s1 -> s1 [0, 74] { R10289 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10289 += 1 };
  s1 -> s3 [75, 75] { R10289 += 1 };
  s1 -> s1 [88, 65535] { R10289 += 1 };
  s2 -> s2 [0, 75] { R10289 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R10289 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R10291 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R10290 += 1, R10291 += 1 };
  s0 -> s2 [75, 75] { R10291 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R10291 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R10291 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R10291 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10291 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R10291 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R10291 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10291 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R10293 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10292 += 1, R10293 += 1 };
  s0 -> s2 [75, 75] { R10293 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R10293 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R10293 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R10293 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10293 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R10293 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R10293 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R10293 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R10295 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10294 += 1, R10295 += 1 };
  s0 -> s2 [75, 75] { R10295 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R10295 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R10295 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R10295 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10295 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R10295 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R10295 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10295 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R10297 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10296 += 1, R10297 += 1 };
  s0 -> s2 [75, 75] { R10297 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R10297 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R10297 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R10297 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10297 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R10297 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R10297 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10297 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R10299 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R10298 += 1, R10299 += 1 };
  s0 -> s2 [75, 75] { R10299 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R10299 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R10299 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R10299 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10299 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R10299 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R10299 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10299 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R10301 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10300 += 1, R10301 += 1 };
  s0 -> s2 [75, 75] { R10301 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R10301 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R10301 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R10301 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10301 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R10301 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R10301 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R10301 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R10303 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R10302 += 1, R10303 += 1 };
  s0 -> s2 [75, 75] { R10303 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R10303 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R10303 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R10303 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10303 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R10303 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R10303 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10303 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R10323 += 1 };
  s0 -> s0 [0, 65535] { R10322 += 1, R10323 += 1 };
  s0 -> s2 [75, 75] { R10323 += 1 };
  s0 -> s1 [76, 65535] { R10323 += 1 };
  s1 -> s1 [0, 74] { R10323 += 1 };
  s1 -> s2 [75, 75] { R10323 += 1 };
  s1 -> s1 [76, 65535] { R10323 += 1 };
  s2 -> s2 [0, 65535] { R10323 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10325 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10324 += 1, R10325 += 1 };
  s1 -> s1 [0, 65535] { R10325 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R10327 += 1 };
  s0 -> s0 [0, 65535] { R10326 += 1, R10327 += 1 };
  s0 -> s2 [0, 65535] { R10327 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R10327 += 1 };
  s0 -> s1 [76, 65535] { R10327 += 1 };
  s1 -> s1 [0, 74] { R10327 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R10327 += 1 };
  s1 -> s1 [76, 65535] { R10327 += 1 };
  s2 -> s1 [0, 74] { R10327 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10327 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R10327 += 1 };
  s2 -> s1 [76, 65535] { R10327 += 1 };
  s3 -> s3 [0, 65535] { R10327 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R10329 += 1, R10267 += 1 };
  s0 -> s0 [0, 65535] { R10328 += 1, R10329 += 1 };
  s0 -> s2 [0, 65535] { R10329 += 1, R10266 += 1, R10267 += 1 };
  s0 -> s1 [76, 65535] { R10329 += 1, R10267 += 1 };
  s1 -> s1 [0, 74] { R10329 += 1, R10267 += 1 };
  s1 -> s1 [0, 65535] { R10329 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R10329 += 1, R10267 += 1 };
  s2 -> s1 [0, 74] { R10329 += 1, R10267 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10329 += 1, R10266 += 1, R10267 += 1 };
  s2 -> s1 [76, 65535] { R10329 += 1, R10267 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10331 += 1, R10268 += 1, R10269 += 1 };
  s0 -> s0 [0, 65535] { R10330 += 1, R10331 += 1 };
  s0 -> s2 [0, 65535] { R10331 += 1, R10269 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R10331 += 1, R10268 += 1, R10269 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10331 += 1, R10269 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R10331 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10331 += 1, R10269 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R10331 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R10333 += 1, R10271 += 1 };
  s0 -> s0 [0, 65535] { R10332 += 1, R10333 += 1 };
  s0 -> s2 [0, 65535] { R10333 += 1, R10270 += 1, R10271 += 1 };
  s0 -> s1 [87, 65535] { R10333 += 1, R10271 += 1 };
  s1 -> s1 [0, 75] { R10333 += 1, R10271 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10333 += 1 };
  s1 -> s1 [87, 65535] { R10333 += 1, R10271 += 1 };
  s2 -> s1 [0, 75] { R10333 += 1, R10271 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10333 += 1, R10270 += 1, R10271 += 1 };
  s2 -> s1 [87, 65535] { R10333 += 1, R10271 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10335 += 1, R10272 += 1, R10273 += 1 };
  s0 -> s2 [0, 65535] { R10335 += 1, R10273 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R10334 += 1, R10335 += 1 };
  s1 -> s1 [0, 65535] { R10335 += 1, R10272 += 1, R10273 += 1 };
  s1 -> s2 [0, 65535] { R10335 += 1, R10273 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10335 += 1, R10273 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R10335 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10335 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R10337 += 1, R10275 += 1 };
  s0 -> s2 [0, 65535] { R10337 += 1, R10275 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R10336 += 1, R10337 += 1 };
  s0 -> s3 [0, 65535] { R10337 += 1, R10274 += 1, R10275 += 1 };
  s0 -> s1 [88, 65535] { R10337 += 1, R10275 += 1 };
  s1 -> s1 [0, 86] { R10337 += 1, R10275 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10337 += 1 };
  s1 -> s1 [88, 65535] { R10337 += 1, R10275 += 1 };
  s2 -> s1 [0, 86] { R10337 += 1, R10275 += 1 };
  s2 -> s5 [0, 65535] { R10337 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10337 += 1, R10275 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R10337 += 1, R10275 += 1 };
  s3 -> s1 [0, 86] { R10337 += 1, R10275 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10337 += 1, R10275 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R10337 += 1, R10274 += 1, R10275 += 1 };
  s3 -> s1 [88, 65535] { R10337 += 1, R10275 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10337 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R10339 += 1, R10277 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R10339 += 1, R10277 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R10339 += 1, R10276 += 1, R10277 += 1 };
  s0 -> s0 [0, 65535] { R10338 += 1, R10339 += 1 };
  s0 -> s1 [88, 65535] { R10339 += 1, R10277 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R10339 += 1, R10277 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10339 += 1 };
  s1 -> s1 [0, 65535] { R10339 += 1, R10277 += 1 };
  s1 -> s1 [88, 65535] { R10339 += 1, R10277 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R10339 += 1, R10277 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10339 += 1, R10277 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R10339 += 1 };
  s2 -> s1 [88, 65535] { R10339 += 1, R10277 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R10339 += 1, R10277 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10339 += 1, R10277 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R10339 += 1, R10276 += 1, R10277 += 1 };
  s3 -> s1 [88, 65535] { R10339 += 1, R10277 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10339 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10341 += 1, R10279 += 1 };
  s0 -> s2 [0, 65535] { R10341 += 1, R10278 += 1, R10279 += 1 };
  s0 -> s0 [0, 65535] { R10340 += 1, R10341 += 1 };
  s1 -> s1 [0, 65535] { R10341 += 1, R10279 += 1 };
  s1 -> s4 [0, 65535] { R10341 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10341 += 1, R10279 += 1 };
  s2 -> s2 [0, 65535] { R10341 += 1, R10278 += 1, R10279 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10341 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s0 -> s2 [0, 65535] { R10343 += 1, R10280 += 1, R10281 += 1 };
  s0 -> s0 [0, 65535] { R10342 += 1, R10343 += 1 };
  s0 -> s3 [90, 90] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s0 -> s1 [91, 65535] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s1 -> s1 [0, 87] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s1 -> s3 [90, 90] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s1 -> s1 [91, 65535] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s2 -> s1 [0, 87] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R10343 += 1, R10280 += 1, R10281 += 1 };
  s2 -> s3 [90, 90] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s2 -> s1 [91, 65535] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s3 -> s3 [0, 87] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10343 += 1 };
  s3 -> s3 [0, 65535] { R10343 += 1, R10281 += 1 };
  s3 -> s3 [90, 65535] { R10343 += 1, R10281 += 1, R10255 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10343 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10345 += 1, R10283 += 1, R10260 += 1, R10261 += 1 };
  s0 -> s2 [0, 65535] { R10345 += 1, R10283 += 1, R10259 += 1, R10260 += 1 };
  s0 -> s0 [0, 65535] { R10344 += 1, R10345 += 1 };
  s0 -> s3 [0, 65535] { R10345 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s1 [0, 65535] { R10345 += 1, R10283 += 1, R10260 += 1, R10261 += 1 };
  s1 -> s6 [0, 65535] { R10345 += 1, R10283 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10345 += 1 };
  s2 -> s1 [0, 65535] { R10345 += 1, R10283 += 1, R10260 += 1, R10261 += 1 };
  s2 -> s2 [0, 65535] { R10345 += 1, R10283 += 1, R10259 += 1, R10260 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10345 += 1 };
  s3 -> s1 [0, 65535] { R10345 += 1, R10283 += 1, R10260 += 1, R10261 += 1 };
  s3 -> s2 [0, 65535] { R10345 += 1, R10283 += 1, R10259 += 1, R10260 += 1 };
  s3 -> s3 [0, 65535] { R10345 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10345 += 1 };
  s6 -> s6 [0, 65535] { R10345 += 1, R10283 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10345 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s0 -> s0 [0, 65535] { R10346 += 1, R10347 += 1 };
  s0 -> s2 [0, 65535] { R10347 += 1, R10284 += 1, R10285 += 1 };
  s0 -> s3 [0, 65535] { R10347 += 1, R10285 += 1, R10264 += 1, R10265 += 1 };
  s0 -> s4 [87, 87] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s0 -> s5 [87, 87] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s0 -> s1 [91, 65535] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s1 -> s1 [0, 86] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10347 += 1, R10285 += 1 };
  s1 -> s7 [0, 65535] { R10347 += 1 };
  s1 -> s4 [87, 87] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s1 -> s5 [87, 87] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s1 -> s1 [91, 65535] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s2 -> s1 [0, 86] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10347 += 1, R10284 += 1, R10285 += 1 };
  s2 -> s3 [0, 65535] { R10347 += 1, R10285 += 1, R10264 += 1, R10265 += 1 };
  s2 -> s4 [87, 87] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s2 -> s5 [87, 87] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s2 -> s1 [91, 65535] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s3 -> s1 [0, 86] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10347 += 1, R10285 += 1, R10264 += 1, R10265 += 1 };
  s3 -> s7 [0, 65535] { R10347 += 1 };
  s3 -> s4 [87, 87] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s3 -> s5 [87, 87] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s3 -> s1 [91, 65535] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s4 -> s4 [0, 87] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10347 += 1, R10285 += 1 };
  s4 -> s7 [0, 65535] { R10347 += 1 };
  s4 -> s4 [91, 65535] { R10347 += 1, R10285 += 1, R10265 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10347 += 1, R10285 += 1 };
  s5 -> s7 [0, 65535] { R10347 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10347 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10349 += 1, R10304 += 1, R10305 += 1 };
  s0 -> s0 [0, 65535] { R10348 += 1, R10349 += 1 };
  s0 -> s2 [0, 65535] { R10349 += 1, R10305 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R10349 += 1, R10304 += 1, R10305 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10349 += 1, R10305 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10349 += 1, R10305 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R10349 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10349 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R10351 += 1, R10307 += 1 };
  s0 -> s0 [0, 65535] { R10350 += 1, R10351 += 1 };
  s0 -> s2 [0, 65535] { R10351 += 1, R10306 += 1, R10307 += 1 };
  s0 -> s3 [75, 75] { R10351 += 1, R10307 += 1 };
  s0 -> s4 [75, 75] { R10351 += 1, R10307 += 1 };
  s0 -> s5 [87, 87] { R10351 += 1, R10307 += 1 };
  s0 -> s1 [88, 65535] { R10351 += 1, R10307 += 1 };
  s1 -> s1 [0, 74] { R10351 += 1, R10307 += 1 };
  s1 -> s3 [75, 75] { R10351 += 1, R10307 += 1 };
  s1 -> s4 [75, 75] { R10351 += 1, R10307 += 1 };
  s1 -> s5 [87, 87] { R10351 += 1, R10307 += 1 };
  s1 -> s1 [88, 65535] { R10351 += 1, R10307 += 1 };
  s2 -> s1 [0, 74] { R10351 += 1, R10307 += 1 };
  s2 -> s2 [0, 65535] { R10351 += 1, R10306 += 1, R10307 += 1 };
  s2 -> s3 [75, 75] { R10351 += 1, R10307 += 1 };
  s2 -> s4 [75, 75] { R10351 += 1, R10307 += 1 };
  s2 -> s5 [87, 87] { R10351 += 1, R10307 += 1 };
  s2 -> s1 [88, 65535] { R10351 += 1, R10307 += 1 };
  s4 -> s4 [0, 75] { R10351 += 1, R10307 += 1 };
  s4 -> s7 [87, 87] { R10351 += 1, R10307 += 1 };
  s4 -> s4 [88, 65535] { R10351 += 1, R10307 += 1 };
  s5 -> s5 [0, 74] { R10351 += 1, R10307 += 1 };
  s5 -> s5 [0, 65535] { R10351 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R10351 += 1, R10307 += 1 };
  s5 -> s8 [75, 75] { R10351 += 1, R10307 += 1 };
  s5 -> s5 [87, 65535] { R10351 += 1, R10307 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 75] { R10351 += 1, R10307 += 1 };
  s7 -> s7 [0, 65535] { R10351 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R10351 += 1, R10307 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10351 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R10353 += 1, R10309 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R10353 += 1, R10308 += 1, R10309 += 1 };
  s0 -> s0 [0, 65535] { R10352 += 1, R10353 += 1 };
  s0 -> s3 [75, 75] { R10353 += 1, R10309 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R10353 += 1, R10309 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R10353 += 1, R10309 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R10353 += 1, R10309 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R10353 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R10353 += 1, R10309 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R10353 += 1, R10309 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R10353 += 1, R10309 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R10353 += 1, R10309 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10353 += 1, R10308 += 1, R10309 += 1 };
  s2 -> s3 [75, 75] { R10353 += 1, R10309 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R10353 += 1, R10309 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R10353 += 1, R10309 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10353 += 1, R10309 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R10353 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10353 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10353 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R10355 += 1, R10311 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R10354 += 1, R10355 += 1 };
  s0 -> s2 [0, 65535] { R10355 += 1, R10310 += 1, R10311 += 1 };
  s0 -> s3 [75, 75] { R10355 += 1, R10311 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R10355 += 1, R10311 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R10355 += 1, R10311 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R10355 += 1, R10311 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R10355 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R10355 += 1, R10311 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R10355 += 1, R10311 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R10355 += 1, R10311 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R10355 += 1, R10311 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R10355 += 1, R10310 += 1, R10311 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R10355 += 1, R10311 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R10355 += 1, R10311 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R10355 += 1, R10311 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R10355 += 1 };
  s3 -> s3 [0, 65535] { R10355 += 1, R10311 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10355 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10355 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10356 += 1, R10357 += 1 };
  s0 -> s2 [0, 65535] { R10357 += 1, R10312 += 1, R10313 += 1 };
  s0 -> s3 [75, 75] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R10357 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [75, 75] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R10357 += 1, R10312 += 1, R10313 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [75, 75] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10357 += 1 };
  s4 -> s5 [0, 65535] { R10357 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10357 += 1, R10313 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R10357 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 74] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s0 [0, 65535] { R10358 += 1, R10359 += 1 };
  s0 -> s3 [0, 65535] { R10359 += 1, R10314 += 1, R10315 += 1 };
  s0 -> s4 [75, 75] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [75, 75] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [75, 75] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [75, 75] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [76, 65535] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [76, 65535] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 74] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 74] { R10359 += 1, R10315 += 1 };
  s1 -> s4 [75, 75] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [75, 75] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s8 [75, 75] { R10359 += 1, R10315 += 1 };
  s1 -> s12 [75, 75] { R10359 += 1, R10315 += 1 };
  s1 -> s1 [76, 65535] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [76, 65535] { R10359 += 1, R10315 += 1 };
  s2 -> s1 [0, 74] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 74] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [75, 75] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [75, 75] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [75, 75] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [75, 75] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s1 [76, 65535] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [76, 65535] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 74] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 74] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R10359 += 1, R10314 += 1, R10315 += 1 };
  s3 -> s4 [75, 75] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [75, 75] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [75, 75] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [75, 75] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [76, 65535] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [76, 65535] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s5 -> s5 [0, 65535] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R10359 += 1, R10315 += 1 };
  s7 -> s5 [0, 65535] { R10359 += 1, R10315 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R10359 += 1, R10315 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10359 += 1, R10315 += 1 };
  s8 -> s10 [0, 65535] { R10359 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10359 += 1 };
  s11 -> s11 [0, 74] { R10359 += 1, R10315 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10359 += 1 };
  s11 -> s8 [75, 75] { R10359 += 1, R10315 += 1 };
  s11 -> s12 [75, 75] { R10359 += 1, R10315 += 1 };
  s11 -> s11 [76, 65535] { R10359 += 1, R10315 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10359 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s0 -> s2 [0, 74] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s3 [0, 65535] { R10361 += 1, R10316 += 1, R10317 += 1 };
  s0 -> s0 [0, 65535] { R10360 += 1, R10361 += 1 };
  s0 -> s4 [75, 75] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s5 [75, 75] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s0 -> s6 [75, 75] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s0 -> s7 [75, 75] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [76, 87] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s0 -> s2 [76, 65535] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [91, 65535] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s1 -> s1 [0, 74] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R10361 += 1 };
  s1 -> s5 [75, 75] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s1 -> s6 [75, 75] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s1 -> s1 [76, 87] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s1 -> s1 [91, 65535] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s2 -> s1 [0, 74] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s2 -> s2 [0, 74] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [75, 75] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s5 [75, 75] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s2 -> s6 [75, 75] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s2 -> s7 [75, 75] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [76, 87] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s2 -> s2 [76, 65535] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [91, 65535] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s3 -> s1 [0, 74] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s3 -> s2 [0, 74] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R10361 += 1, R10316 += 1, R10317 += 1 };
  s3 -> s4 [75, 75] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s5 [75, 75] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s3 -> s6 [75, 75] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s3 -> s7 [75, 75] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s1 [76, 87] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s3 -> s2 [76, 65535] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s1 [91, 65535] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10361 += 1 };
  s6 -> s6 [0, 87] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10361 += 1 };
  s6 -> s6 [91, 65535] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s7 -> s6 [0, 87] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s7 -> s7 [0, 65535] { R10361 += 1, R10317 += 1, R10252 += 1, R10253 += 1 };
  s7 -> s6 [91, 65535] { R10361 += 1, R10317 += 1, R10253 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s5, s6, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s0 [0, 65535] { R10362 += 1, R10363 += 1 };
  s0 -> s2 [0, 65535] { R10363 += 1, R10318 += 1, R10319 += 1 };
  s0 -> s3 [75, 75] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s4 [75, 75] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s1 [76, 65535] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [0, 74] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10363 += 1 };
  s1 -> s3 [75, 75] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s4 [75, 75] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [76, 65535] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s1 [0, 74] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10363 += 1, R10318 += 1, R10319 += 1 };
  s2 -> s3 [75, 75] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s4 [75, 75] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s1 [76, 65535] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s3 -> s3 [0, 65535] { R10363 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10363 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10363 += 1, R10319 += 1, R10256 += 1, R10257 += 1 };
  s5 -> s5 [0, 65535] { R10363 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s0 -> s2 [0, 65535] { R10365 += 1, R10320 += 1, R10321 += 1 };
  s0 -> s0 [0, 65535] { R10364 += 1, R10365 += 1 };
  s0 -> s3 [75, 75] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s0 -> s4 [75, 75] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s0 -> s1 [76, 65535] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s1 -> s1 [0, 74] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10365 += 1 };
  s1 -> s3 [75, 75] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s1 -> s4 [75, 75] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s1 -> s1 [76, 65535] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s2 -> s1 [0, 74] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10365 += 1, R10320 += 1, R10321 += 1 };
  s2 -> s3 [75, 75] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s2 -> s4 [75, 75] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s2 -> s1 [76, 65535] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10365 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10365 += 1, R10321 += 1, R10262 += 1, R10263 += 1 };
  s4 -> s6 [0, 65535] { R10365 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10365 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R10281 && R2 = R10365 && R20 - R10365 = -1 && R21 = R10365 && R22 - R10365 = -1 && R23 = R10365 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R10280 = 0 && R10306 = 0 && R10307 = 0 && R10314 = 0 && R10315 = 0 && R10316 = 0 && R10317 = 0 && R10322 = 0 && R10323 = R10365 && R10324 = 0 && R10325 = R10365 && R10326 = 0 && R10327 = R10365 && R10328 = 0 && R10329 = R10365 && R10330 = 0 && R10331 = R10365 && R10332 = 0 && R10333 = R10365 && R10334 = 0 && R10335 = R10365 && R10336 = 0 && R10337 = R10365 && R10338 = 0 && R10339 = R10365 && R10340 = 0 && R10341 = R10365 && R10342 = 0 && R10343 = R10365 && R10344 = 0 && R10345 = R10365 && R10346 = 0 && R10347 = R10365 && R10348 = 0 && R10349 = R10365 && R10350 = 0 && R10351 = R10365 && R10352 = 0 && R10353 = R10365 && R10354 = 0 && R10355 = R10365 && R10356 = 0 && R10357 = R10365 && R10358 = 0 && R10359 = R10365 && R10360 = 0 && R10361 = R10365 && R10362 = 0 && R10363 = R10365 && R10364 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && -1 < R10281 && 0 < R10365 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R10255 + R10253 < 1))) && (R10266 != 0 || R10267 = R10281 || (R17 = 0 && R10281 = 0)) && (R10268 != 0 || R10269 = R10281 || (R17 = 0 && R10281 = 0)) && (R10270 != 0 || R10271 = R10281 || (R17 = 0 && R10281 = 0)) && (R10272 != 0 || R10273 = R10281 || (R17 = 0 && R10281 = 0)) && (R10274 != 0 || R10275 = R10281 || (R17 = 0 && R10281 = 0)) && (R10276 != 0 || R10277 = R10281 || (R17 = 0 && R10281 = 0)) && (R10278 != 0 || R10279 = R10281 || (R17 = 0 && R10281 = 0)) && (R10282 != 0 || R10281 = R10283 || (R17 = 0 && R10281 = 0)) && (R10284 != 0 || R10281 = R10285 || (R17 = 0 && R10281 = 0)) && (R18 = 0 || (R10304 = 0 && R10305 = 0)) && (R18 = 0 || (R10308 = 0 && R10309 = 0)) && (R18 = 0 || (R10310 = 0 && R10311 = 0)) && (R18 = 0 || (R10312 = 0 && R10313 = 0)) && (R18 = 0 || (R10318 = 0 && R10319 = 0)) && (R18 = 0 || (R10320 = 0 && R10321 = 0)) && (R19 = 0 || (R10286 = 0 && R10287 = 0)) && (R19 = 0 || (R10288 = 0 && R10289 = 0)) && (R19 = 0 || (R10290 = 0 && R10291 = 0)) && (R19 = 0 || (R10292 = 0 && R10293 = 0)) && (R19 = 0 || (R10294 = 0 && R10295 = 0)) && (R19 = 0 || (R10296 = 0 && R10297 = 0)) && (R19 = 0 || (R10298 = 0 && R10299 = 0)) && (R19 = 0 || (R10300 = 0 && R10301 = 0)) && (R19 = 0 || (R10302 = 0 && R10303 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R10261 + R10258 = 0 || (R56 + R10259 + R10256 = 0 && R57 + R10260 + R10257 = 0)) && (R58 + R10261 + R10258 = 0 || (R62 + R10264 + R10262 = 0 && R63 + R10265 + R10263 = 0)) && (R10266 = 0 || (R17 = 0 && R10281 = 0)) && (R10268 = 0 || (R17 = 0 && R10281 = 0)) && (R10270 = 0 || (R17 = 0 && R10281 = 0)) && (R10272 = 0 || (R17 = 0 && R10281 = 0)) && (R10274 = 0 || (R17 = 0 && R10281 = 0)) && (R10276 = 0 || (R17 = 0 && R10281 = 0)) && (R10278 = 0 || (R17 = 0 && R10281 = 0)) && (R10282 = 0 || (R17 = 0 && R10281 = 0)) && (R10284 = 0 || (R17 = 0 && R10281 = 0));
// End of Parikh automata intersection problem
