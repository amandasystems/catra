// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R4, R40, R42, R43, R4322, R4323, R4324, R4325, R4326, R4327, R4432, R4433, R4434, R4435, R4436, R4437, R4438, R4439, R4440, R4441, R4442, R4443, R4444, R4445, R4446, R4447, R4448, R4449, R4450, R4451, R4452, R4453, R4454, R4455, R4456, R4457, R4458, R4459, R4460, R4461, R4462, R4463, R4464, R4465, R4466, R4467, R4468, R4469, R4470, R4471, R4472, R4473, R4474, R4475, R4476, R4477, R4478, R4479, R4480, R4481, R4482, R4483, R4484, R4485, R4486, R4487, R4488, R4489, R4490, R4491, R4492, R4493, R4494, R4495, R4496, R4497, R4498, R4499, R4500, R4501, R4502, R4503, R4504, R4505, R4506, R4507, R4508, R4509, R4510, R4511, R4512, R4513, R4514, R4515, R4516, R4517, R4518, R4519, R4520, R4521, R4522, R4523, R4524, R4525, R4526, R4527, R4528, R4529, R4530, R4531, R4532, R4533, R4534, R4535, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R4457 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R4456 += 1, R4457 += 1 };
  s1 -> s1 [0, 65535] { R4457 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R4459 += 1 };
  s0 -> s0 [0, 65535] { R4458 += 1, R4459 += 1 };
  s0 -> s2 [75, 75] { R4459 += 1 };
  s0 -> s3 [75, 75] { R4459 += 1 };
  s0 -> s1 [88, 65535] { R4459 += 1 };
  s1 -> s1 [0, 74] { R4459 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4459 += 1 };
  s1 -> s3 [75, 75] { R4459 += 1 };
  s1 -> s1 [88, 65535] { R4459 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 75] { R4459 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R4459 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R4461 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R4460 += 1, R4461 += 1 };
  s0 -> s2 [75, 75] { R4461 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R4461 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R4461 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R4461 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4461 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R4461 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R4461 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R4461 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R4463 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R4462 += 1, R4463 += 1 };
  s0 -> s2 [75, 75] { R4463 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R4463 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R4463 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R4463 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4463 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R4463 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R4463 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4463 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R4465 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R4464 += 1, R4465 += 1 };
  s0 -> s2 [75, 75] { R4465 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R4465 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R4465 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R4465 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4465 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R4465 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R4465 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R4465 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R4467 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R4466 += 1, R4467 += 1 };
  s0 -> s2 [75, 75] { R4467 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R4467 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R4467 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R4467 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4467 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R4467 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R4467 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4467 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R4469 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R4468 += 1, R4469 += 1 };
  s0 -> s2 [75, 75] { R4469 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R4469 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R4469 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R4469 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4469 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R4469 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R4469 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R4469 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R4471 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R4470 += 1, R4471 += 1 };
  s0 -> s2 [75, 75] { R4471 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R4471 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R4471 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R4471 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4471 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R4471 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R4471 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R4471 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R4473 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R4472 += 1, R4473 += 1 };
  s0 -> s2 [75, 75] { R4473 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R4473 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R4473 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R4473 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4473 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R4473 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R4473 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4473 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R4493 += 1 };
  s0 -> s0 [0, 65535] { R4492 += 1, R4493 += 1 };
  s0 -> s2 [75, 75] { R4493 += 1 };
  s0 -> s1 [76, 65535] { R4493 += 1 };
  s1 -> s1 [0, 74] { R4493 += 1 };
  s1 -> s2 [75, 75] { R4493 += 1 };
  s1 -> s1 [76, 65535] { R4493 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4493 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R4494 += 1, R4495 += 1 };
  s0 -> s1 [0, 65535] { R4495 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4495 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R4497 += 1 };
  s0 -> s0 [0, 65535] { R4496 += 1, R4497 += 1 };
  s0 -> s2 [0, 65535] { R4497 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R4497 += 1 };
  s0 -> s1 [76, 65535] { R4497 += 1 };
  s1 -> s1 [0, 74] { R4497 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R4497 += 1 };
  s1 -> s1 [76, 65535] { R4497 += 1 };
  s2 -> s1 [0, 74] { R4497 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4497 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R4497 += 1 };
  s2 -> s1 [76, 65535] { R4497 += 1 };
  s3 -> s3 [0, 65535] { R4497 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R4499 += 1, R4437 += 1 };
  s0 -> s2 [0, 65535] { R4499 += 1, R4436 += 1, R4437 += 1 };
  s0 -> s0 [0, 65535] { R4498 += 1, R4499 += 1 };
  s0 -> s1 [76, 65535] { R4499 += 1, R4437 += 1 };
  s1 -> s1 [0, 74] { R4499 += 1, R4437 += 1 };
  s1 -> s1 [0, 65535] { R4499 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R4499 += 1, R4437 += 1 };
  s2 -> s1 [0, 74] { R4499 += 1, R4437 += 1 };
  s2 -> s2 [0, 65535] { R4499 += 1, R4436 += 1, R4437 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R4499 += 1, R4437 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R4500 += 1, R4501 += 1 };
  s0 -> s1 [0, 65535] { R4501 += 1, R4438 += 1, R4439 += 1 };
  s0 -> s2 [0, 65535] { R4501 += 1, R4439 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R4501 += 1, R4438 += 1, R4439 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4501 += 1, R4439 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R4501 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4501 += 1, R4439 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R4501 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R4503 += 1, R4441 += 1 };
  s0 -> s2 [0, 65535] { R4503 += 1, R4440 += 1, R4441 += 1 };
  s0 -> s0 [0, 65535] { R4502 += 1, R4503 += 1 };
  s0 -> s1 [87, 65535] { R4503 += 1, R4441 += 1 };
  s1 -> s1 [0, 75] { R4503 += 1, R4441 += 1 };
  s1 -> s1 [0, 65535] { R4503 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R4503 += 1, R4441 += 1 };
  s2 -> s1 [0, 75] { R4503 += 1, R4441 += 1 };
  s2 -> s2 [0, 65535] { R4503 += 1, R4440 += 1, R4441 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R4503 += 1, R4441 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R4504 += 1, R4505 += 1 };
  s0 -> s1 [0, 65535] { R4505 += 1, R4442 += 1, R4443 += 1 };
  s0 -> s2 [0, 65535] { R4505 += 1, R4443 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4505 += 1, R4442 += 1, R4443 += 1 };
  s1 -> s2 [0, 65535] { R4505 += 1, R4443 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4505 += 1 };
  s2 -> s2 [0, 65535] { R4505 += 1, R4443 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4505 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R4507 += 1, R4445 += 1 };
  s0 -> s0 [0, 65535] { R4506 += 1, R4507 += 1 };
  s0 -> s2 [0, 65535] { R4507 += 1, R4445 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R4507 += 1, R4444 += 1, R4445 += 1 };
  s0 -> s1 [88, 65535] { R4507 += 1, R4445 += 1 };
  s1 -> s1 [0, 86] { R4507 += 1, R4445 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4507 += 1 };
  s1 -> s1 [88, 65535] { R4507 += 1, R4445 += 1 };
  s2 -> s1 [0, 86] { R4507 += 1, R4445 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4507 += 1, R4445 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R4507 += 1 };
  s2 -> s1 [88, 65535] { R4507 += 1, R4445 += 1 };
  s3 -> s1 [0, 86] { R4507 += 1, R4445 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4507 += 1, R4445 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R4507 += 1, R4444 += 1, R4445 += 1 };
  s3 -> s1 [88, 65535] { R4507 += 1, R4445 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4507 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R4509 += 1, R4447 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R4509 += 1, R4446 += 1, R4447 += 1 };
  s0 -> s0 [0, 65535] { R4508 += 1, R4509 += 1 };
  s0 -> s3 [0, 65535] { R4509 += 1, R4447 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [88, 65535] { R4509 += 1, R4447 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R4509 += 1, R4447 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4509 += 1 };
  s1 -> s1 [0, 65535] { R4509 += 1, R4447 += 1 };
  s1 -> s1 [88, 65535] { R4509 += 1, R4447 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R4509 += 1, R4447 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R4509 += 1, R4446 += 1, R4447 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4509 += 1, R4447 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [88, 65535] { R4509 += 1, R4447 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R4509 += 1, R4447 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R4509 += 1 };
  s3 -> s3 [0, 65535] { R4509 += 1, R4447 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [88, 65535] { R4509 += 1, R4447 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4509 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R4511 += 1, R4449 += 1 };
  s0 -> s2 [0, 65535] { R4511 += 1, R4449 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s0 [0, 65535] { R4510 += 1, R4511 += 1 };
  s0 -> s3 [0, 65535] { R4511 += 1, R4448 += 1, R4449 += 1 };
  s1 -> s1 [0, 65535] { R4511 += 1, R4449 += 1 };
  s1 -> s5 [0, 65535] { R4511 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R4511 += 1, R4449 += 1 };
  s2 -> s2 [0, 65535] { R4511 += 1, R4449 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s5 [0, 65535] { R4511 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4511 += 1, R4449 += 1 };
  s3 -> s2 [0, 65535] { R4511 += 1, R4449 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s3 [0, 65535] { R4511 += 1, R4448 += 1, R4449 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4511 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R4513 += 1, R4451 += 1, R3899 += 1 };
  s0 -> s0 [0, 65535] { R4512 += 1, R4513 += 1 };
  s0 -> s1 [0, 65535] { R4513 += 1, R4451 += 1 };
  s0 -> s2 [0, 65535] { R4513 += 1, R4450 += 1, R4451 += 1 };
  s0 -> s1 [90, 65535] { R4513 += 1, R4451 += 1, R3899 += 1 };
  s1 -> s1 [0, 87] { R4513 += 1, R4451 += 1, R3899 += 1 };
  s1 -> s1 [0, 65535] { R4513 += 1, R4451 += 1 };
  s1 -> s4 [0, 65535] { R4513 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R4513 += 1, R4451 += 1, R3899 += 1 };
  s2 -> s1 [0, 87] { R4513 += 1, R4451 += 1, R3899 += 1 };
  s2 -> s1 [0, 65535] { R4513 += 1, R4451 += 1 };
  s2 -> s2 [0, 65535] { R4513 += 1, R4450 += 1, R4451 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R4513 += 1, R4451 += 1, R3899 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4513 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R4515 += 1, R4453 += 1, R4326 += 1, R4327 += 1 };
  s0 -> s2 [0, 65535] { R4515 += 1, R4453 += 1 };
  s0 -> s0 [0, 65535] { R4514 += 1, R4515 += 1 };
  s0 -> s3 [0, 65535] { R4515 += 1, R4452 += 1, R4453 += 1 };
  s1 -> s1 [0, 65535] { R4515 += 1, R4453 += 1, R4326 += 1, R4327 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4515 += 1, R4453 += 1 };
  s1 -> s5 [0, 65535] { R4515 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4515 += 1, R4453 += 1 };
  s2 -> s5 [0, 65535] { R4515 += 1 };
  s3 -> s1 [0, 65535] { R4515 += 1, R4453 += 1, R4326 += 1, R4327 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4515 += 1, R4453 += 1 };
  s3 -> s3 [0, 65535] { R4515 += 1, R4452 += 1, R4453 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4515 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s0 -> s2 [0, 65535] { R4517 += 1, R4454 += 1, R4455 += 1 };
  s0 -> s1 [0, 65535] { R4517 += 1, R4455 += 1 };
  s0 -> s0 [0, 65535] { R4516 += 1, R4517 += 1 };
  s0 -> s3 [87, 87] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s0 -> s4 [87, 87] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s0 -> s1 [91, 65535] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s1 -> s1 [0, 86] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s1 -> s1 [0, 65535] { R4517 += 1, R4455 += 1 };
  s1 -> s5 [0, 65535] { R4517 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [87, 87] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s1 -> s4 [87, 87] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s1 -> s1 [91, 65535] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s2 -> s1 [0, 86] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s2 -> s2 [0, 65535] { R4517 += 1, R4454 += 1, R4455 += 1 };
  s2 -> s1 [0, 65535] { R4517 += 1, R4455 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [87, 87] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s2 -> s4 [87, 87] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s2 -> s1 [91, 65535] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s3 -> s3 [0, 87] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s3 -> s5 [0, 65535] { R4517 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R4517 += 1, R4455 += 1 };
  s3 -> s3 [91, 65535] { R4517 += 1, R4455 += 1, R4435 += 1 };
  s4 -> s5 [0, 65535] { R4517 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4517 += 1, R4455 += 1 };
  s5 -> s5 [0, 65535] { R4517 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R4519 += 1, R4474 += 1, R4475 += 1 };
  s0 -> s2 [0, 65535] { R4519 += 1, R4475 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4518 += 1, R4519 += 1 };
  s1 -> s1 [0, 65535] { R4519 += 1, R4474 += 1, R4475 += 1 };
  s1 -> s2 [0, 65535] { R4519 += 1, R4475 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4519 += 1 };
  s2 -> s2 [0, 65535] { R4519 += 1, R4475 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4519 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R4521 += 1, R4477 += 1 };
  s0 -> s2 [0, 65535] { R4521 += 1, R4476 += 1, R4477 += 1 };
  s0 -> s0 [0, 65535] { R4520 += 1, R4521 += 1 };
  s0 -> s3 [75, 75] { R4521 += 1, R4477 += 1 };
  s0 -> s4 [75, 75] { R4521 += 1, R4477 += 1 };
  s0 -> s5 [87, 87] { R4521 += 1, R4477 += 1 };
  s0 -> s1 [88, 65535] { R4521 += 1, R4477 += 1 };
  s1 -> s1 [0, 74] { R4521 += 1, R4477 += 1 };
  s1 -> s3 [75, 75] { R4521 += 1, R4477 += 1 };
  s1 -> s4 [75, 75] { R4521 += 1, R4477 += 1 };
  s1 -> s5 [87, 87] { R4521 += 1, R4477 += 1 };
  s1 -> s1 [88, 65535] { R4521 += 1, R4477 += 1 };
  s2 -> s1 [0, 74] { R4521 += 1, R4477 += 1 };
  s2 -> s2 [0, 65535] { R4521 += 1, R4476 += 1, R4477 += 1 };
  s2 -> s3 [75, 75] { R4521 += 1, R4477 += 1 };
  s2 -> s4 [75, 75] { R4521 += 1, R4477 += 1 };
  s2 -> s5 [87, 87] { R4521 += 1, R4477 += 1 };
  s2 -> s1 [88, 65535] { R4521 += 1, R4477 += 1 };
  s4 -> s4 [0, 75] { R4521 += 1, R4477 += 1 };
  s4 -> s7 [87, 87] { R4521 += 1, R4477 += 1 };
  s4 -> s4 [88, 65535] { R4521 += 1, R4477 += 1 };
  s5 -> s5 [0, 74] { R4521 += 1, R4477 += 1 };
  s5 -> s5 [0, 65535] { R4521 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R4521 += 1, R4477 += 1 };
  s5 -> s8 [75, 75] { R4521 += 1, R4477 += 1 };
  s5 -> s5 [87, 65535] { R4521 += 1, R4477 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 75] { R4521 += 1, R4477 += 1 };
  s7 -> s7 [0, 65535] { R4521 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R4521 += 1, R4477 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4521 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R4523 += 1, R4479 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R4522 += 1, R4523 += 1 };
  s0 -> s2 [0, 65535] { R4523 += 1, R4478 += 1, R4479 += 1 };
  s0 -> s3 [75, 75] { R4523 += 1, R4479 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R4523 += 1, R4479 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R4523 += 1, R4479 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R4523 += 1, R4479 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4523 += 1 };
  s1 -> s3 [75, 75] { R4523 += 1, R4479 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R4523 += 1, R4479 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R4523 += 1, R4479 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R4523 += 1, R4479 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4523 += 1, R4478 += 1, R4479 += 1 };
  s2 -> s3 [75, 75] { R4523 += 1, R4479 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R4523 += 1, R4479 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R4523 += 1, R4479 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4523 += 1, R4479 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R4523 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4523 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4523 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R4525 += 1, R4481 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R4524 += 1, R4525 += 1 };
  s0 -> s2 [0, 65535] { R4525 += 1, R4480 += 1, R4481 += 1 };
  s0 -> s3 [75, 75] { R4525 += 1, R4481 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R4525 += 1, R4481 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R4525 += 1, R4481 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R4525 += 1, R4481 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R4525 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R4525 += 1, R4481 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R4525 += 1, R4481 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R4525 += 1, R4481 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R4525 += 1, R4481 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4525 += 1, R4480 += 1, R4481 += 1 };
  s2 -> s3 [75, 75] { R4525 += 1, R4481 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R4525 += 1, R4481 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R4525 += 1, R4481 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R4525 += 1, R4481 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R4525 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4525 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4525 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R4527 += 1, R4482 += 1, R4483 += 1 };
  s0 -> s0 [0, 65535] { R4526 += 1, R4527 += 1 };
  s0 -> s3 [75, 75] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R4527 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [75, 75] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R4527 += 1, R4482 += 1, R4483 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [75, 75] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R4527 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4527 += 1, R4483 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535] { R4527 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4527 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 74] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R4528 += 1, R4529 += 1 };
  s0 -> s3 [0, 65535] { R4529 += 1, R4484 += 1, R4485 += 1 };
  s0 -> s4 [75, 75] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [75, 75] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [75, 75] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [75, 75] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [76, 65535] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [76, 65535] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 74] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 74] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [75, 75] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s5 [75, 75] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s6 [75, 75] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s7 [75, 75] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [76, 65535] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [76, 65535] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 74] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4529 += 1 };
  s2 -> s4 [75, 75] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [75, 75] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [76, 65535] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 74] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 74] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R4529 += 1, R4484 += 1, R4485 += 1 };
  s3 -> s4 [75, 75] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [75, 75] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [75, 75] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [75, 75] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [76, 65535] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [76, 65535] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R4529 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R4529 += 1, R4485 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s7 [0, 65535] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4529 += 1, R4485 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s9 [0, 65535] { R4529 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4529 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s0 -> s2 [0, 74] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s3 [0, 65535] { R4531 += 1, R4486 += 1, R4487 += 1 };
  s0 -> s0 [0, 65535] { R4530 += 1, R4531 += 1 };
  s0 -> s4 [75, 75] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s5 [75, 75] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s0 -> s6 [75, 75] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s7 [75, 75] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s0 -> s1 [76, 87] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s0 -> s2 [76, 65535] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s8 [90, 90] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s0 -> s1 [91, 65535] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s1 -> s1 [0, 74] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s1 -> s5 [75, 75] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s1 -> s7 [75, 75] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s1 -> s1 [76, 87] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s1 -> s8 [90, 90] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s1 -> s1 [91, 65535] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s2 -> s1 [0, 74] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s2 -> s2 [0, 74] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s4 [75, 75] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s5 [75, 75] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s2 -> s6 [75, 75] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s7 [75, 75] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s2 -> s1 [76, 87] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s2 -> s2 [76, 65535] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s8 [90, 90] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s2 -> s1 [91, 65535] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s3 -> s1 [0, 74] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s3 -> s2 [0, 74] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s3 [0, 65535] { R4531 += 1, R4486 += 1, R4487 += 1 };
  s3 -> s4 [75, 75] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s5 [75, 75] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s3 -> s6 [75, 75] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s7 [75, 75] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s3 -> s1 [76, 87] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s3 -> s2 [76, 65535] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s8 [90, 90] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s3 -> s1 [91, 65535] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s4 -> s7 [0, 87] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s4 -> s4 [0, 65535] { R4531 += 1, R4487 += 1, R3896 += 1, R3897 += 1 };
  s4 -> s10 [90, 90] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s4 -> s7 [91, 65535] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s7 -> s7 [0, 87] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s7 -> s10 [90, 90] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s7 -> s7 [91, 65535] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s8 -> s8 [0, 74] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4531 += 1 };
  s8 -> s10 [75, 75] { R4531 += 1, R4487 += 1 };
  s8 -> s11 [75, 75] { R4531 += 1, R4487 += 1 };
  s8 -> s8 [76, 87] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s8 -> s8 [76, 65535] { R4531 += 1, R4487 += 1 };
  s8 -> s8 [90, 65535] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 87] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s10 -> s10 [0, 65535] { R4531 += 1, R4487 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R4531 += 1 };
  s10 -> s10 [90, 65535] { R4531 += 1, R4487 += 1, R3897 += 1 };
  s11 -> s11 [0, 65535] { R4531 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4531 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s2 [0, 74] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s0 [0, 65535] { R4532 += 1, R4533 += 1 };
  s0 -> s3 [0, 65535] { R4533 += 1, R4488 += 1, R4489 += 1 };
  s0 -> s4 [75, 75] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s5 [75, 75] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s6 [75, 75] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s7 [75, 75] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s1 [76, 65535] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s2 [76, 65535] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s1 [0, 74] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s1 -> s2 [0, 74] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s4 [75, 75] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s1 -> s5 [75, 75] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s6 [75, 75] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s7 [75, 75] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s1 -> s1 [76, 65535] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s1 -> s2 [76, 65535] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s2 [0, 74] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4533 += 1 };
  s2 -> s5 [75, 75] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s6 [75, 75] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s2 [76, 65535] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s1 [0, 74] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s2 [0, 74] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s3 [0, 65535] { R4533 += 1, R4488 += 1, R4489 += 1 };
  s3 -> s4 [75, 75] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s5 [75, 75] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s6 [75, 75] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s7 [75, 75] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s1 [76, 65535] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s2 [76, 65535] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s5 -> s9 [0, 65535] { R4533 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4533 += 1 };
  s7 -> s5 [0, 65535] { R4533 += 1, R4489 += 1, R4323 += 1, R4324 += 1 };
  s7 -> s7 [0, 65535] { R4533 += 1, R4489 += 1, R4322 += 1, R4323 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4533 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s0 -> s2 [0, 74] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s0 -> s3 [0, 65535] { R4535 += 1, R4490 += 1, R4491 += 1 };
  s0 -> s0 [0, 65535] { R4534 += 1, R4535 += 1 };
  s0 -> s4 [75, 75] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s0 -> s5 [75, 75] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s0 -> s6 [75, 75] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s0 -> s7 [75, 75] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s0 -> s1 [76, 86] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s0 -> s2 [76, 65535] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s0 -> s1 [91, 65535] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s1 -> s1 [0, 74] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s1 -> s1 [0, 65535] { R4535 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [75, 75] { R4535 += 1, R4491 += 1 };
  s1 -> s6 [75, 75] { R4535 += 1, R4491 += 1 };
  s1 -> s1 [76, 86] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s1 -> s1 [76, 65535] { R4535 += 1, R4491 += 1 };
  s1 -> s1 [91, 65535] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s2 -> s1 [0, 74] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s2 -> s2 [0, 74] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s2 -> s4 [75, 75] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s2 -> s5 [75, 75] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s2 -> s6 [75, 75] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s2 -> s7 [75, 75] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s2 -> s1 [76, 86] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s2 -> s2 [76, 65535] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s2 -> s1 [91, 65535] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s3 -> s1 [0, 74] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s3 -> s2 [0, 74] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s3 -> s3 [0, 65535] { R4535 += 1, R4490 += 1, R4491 += 1 };
  s3 -> s4 [75, 75] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s3 -> s5 [75, 75] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s3 -> s6 [75, 75] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s3 -> s7 [75, 75] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s3 -> s1 [76, 86] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s3 -> s2 [76, 65535] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s3 -> s1 [91, 65535] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s4 -> s4 [0, 86] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s4 -> s4 [0, 65535] { R4535 += 1, R4491 += 1 };
  s4 -> s9 [0, 65535] { R4535 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [91, 65535] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s5 -> s4 [0, 86] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s5 -> s5 [0, 65535] { R4535 += 1, R4491 += 1, R4432 += 1, R4433 += 1 };
  s5 -> s4 [91, 65535] { R4535 += 1, R4491 += 1, R4433 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4535 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4535 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R4535 && R20 - R4535 = -1 && R21 = R4535 && R22 - R4535 = -1 && R23 = R4535 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3899 + -1*R3897 - R53 = 0 && R52 + R3898 + R3896 = 0 && R4476 = 0 && R4477 = 0 && R4484 = 0 && R4485 = 0 && R4486 = 0 && R4487 = 0 && R4488 = 0 && R4489 = 0 && R4490 = 0 && R4491 = 0 && R4492 = 0 && R4493 = R4535 && R4494 = 0 && R4495 = R4535 && R4496 = 0 && R4497 = R4535 && R4498 = 0 && R4499 = R4535 && R4500 = 0 && R4501 = R4535 && R4502 = 0 && R4503 = R4535 && R4504 = 0 && R4505 = R4535 && R4506 = 0 && R4507 = R4535 && R4508 = 0 && R4509 = R4535 && R4510 = 0 && R4511 = R4535 && R4512 = 0 && R4513 = R4535 && R4514 = 0 && R4515 = R4535 && R4516 = 0 && R4517 = R4535 && R4518 = 0 && R4519 = R4535 && R4520 = 0 && R4521 = R4535 && R4522 = 0 && R4523 = R4535 && R4524 = 0 && R4525 = R4535 && R4526 = 0 && R4527 = R4535 && R4528 = 0 && R4529 = R4535 && R4530 = 0 && R4531 = R4535 && R4532 = 0 && R4533 = R4535 && R4534 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3899 + -1*R3897 - R53 < 1 && 0 < R4535 && (R1 != 0 || R17 = 0 || (R4436 = 0 && R4437 = 0)) && (R1 != 0 || R17 = 0 || (R4438 = 0 && R4439 = 0)) && (R1 != 0 || R17 = 0 || (R4440 = 0 && R4441 = 0)) && (R1 != 0 || R17 = 0 || (R4442 = 0 && R4443 = 0)) && (R1 != 0 || R17 = 0 || (R4444 = 0 && R4445 = 0)) && (R1 != 0 || R17 = 0 || (R4446 = 0 && R4447 = 0)) && (R1 != 0 || R17 = 0 || (R4448 = 0 && R4449 = 0)) && (R1 != 0 || R17 = 0 || (R4450 = 0 && R4451 = 0)) && (R1 != 0 || R17 = 0 || (R4452 = 0 && R4453 = 0)) && (R1 != 0 || R17 = 0 || (R4454 = 0 && R4455 = 0)) && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R42 + R72 + R70 = 0 || R53 + R3899 + R3897 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R3899 + R3897 < 1))) && (R4436 != 0 || R1 = R4437 || R1 < 1) && (R4438 != 0 || R1 = R4439 || R1 < 1) && (R4440 != 0 || R1 = R4441 || R1 < 1) && (R4442 != 0 || R1 = R4443 || R1 < 1) && (R4444 != 0 || R1 = R4445 || R1 < 1) && (R4446 != 0 || R1 = R4447 || R1 < 1) && (R4448 != 0 || R1 = R4449 || R1 < 1) && (R4450 != 0 || R1 = R4451 || R1 < 1) && (R4452 != 0 || R1 = R4453 || R1 < 1) && (R4454 != 0 || R1 = R4455 || R1 < 1) && (R18 = 0 || (R4474 = 0 && R4475 = 0)) && (R18 = 0 || (R4478 = 0 && R4479 = 0)) && (R18 = 0 || (R4480 = 0 && R4481 = 0)) && (R18 = 0 || (R4482 = 0 && R4483 = 0)) && (R19 = 0 || (R4456 = 0 && R4457 = 0)) && (R19 = 0 || (R4458 = 0 && R4459 = 0)) && (R19 = 0 || (R4460 = 0 && R4461 = 0)) && (R19 = 0 || (R4462 = 0 && R4463 = 0)) && (R19 = 0 || (R4464 = 0 && R4465 = 0)) && (R19 = 0 || (R4466 = 0 && R4467 = 0)) && (R19 = 0 || (R4468 = 0 && R4469 = 0)) && (R19 = 0 || (R4470 = 0 && R4471 = 0)) && (R19 = 0 || (R4472 = 0 && R4473 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0)) && (R58 + R4327 + R4324 = 0 || (R56 + R4325 + R4322 = 0 && R57 + R4326 + R4323 = 0)) && (R58 + R4327 + R4324 = 0 || (R62 + R4434 + R4432 = 0 && R63 + R4435 + R4433 = 0)) && (R4436 = 0 || R1 < 1) && (R4438 = 0 || R1 < 1) && (R4440 = 0 || R1 < 1) && (R4442 = 0 || R1 < 1) && (R4444 = 0 || R1 < 1) && (R4446 = 0 || R1 < 1) && (R4448 = 0 || R1 < 1) && (R4450 = 0 || R1 < 1) && (R4452 = 0 || R1 < 1) && (R4454 = 0 || R1 < 1);
// End of Parikh automata intersection problem
