// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R15348, R15349, R15350, R15351, R16196, R16197, R16198, R16199, R16200, R16201, R16410, R16411, R16412, R16413, R16414, R16415, R16416, R16417, R16418, R16419, R16420, R16421, R16422, R16423, R16424, R16425, R16426, R16427, R16428, R16429, R16430, R16431, R16432, R16433, R16434, R16435, R16436, R16437, R16438, R16439, R16440, R16441, R16442, R16443, R16444, R16445, R16446, R16447, R16448, R16449, R16450, R16451, R16452, R16453, R16454, R16455, R16456, R16457, R16458, R16459, R16460, R16461, R16462, R16463, R16464, R16465, R16466, R16467, R16468, R16469, R16470, R16471, R16472, R16473, R16474, R16475, R16476, R16477, R16478, R16479, R16480, R16481, R16482, R16483, R16484, R16485, R16486, R16487, R16488, R16489, R16490, R16491, R16492, R16493, R16494, R16495, R16496, R16497, R16498, R16499, R16500, R16501, R16502, R16503, R16504, R16505, R16506, R16507, R16508, R16509, R16510, R16511, R16512, R16513, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R16434 += 1, R16435 += 1 };
  s0 -> s1 [0, 65535] { R16435 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16435 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R16437 += 1 };
  s0 -> s0 [0, 65535] { R16436 += 1, R16437 += 1 };
  s0 -> s2 [75, 75] { R16437 += 1 };
  s0 -> s3 [75, 75] { R16437 += 1 };
  s0 -> s1 [88, 65535] { R16437 += 1 };
  s1 -> s1 [0, 74] { R16437 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R16437 += 1 };
  s1 -> s3 [75, 75] { R16437 += 1 };
  s1 -> s1 [88, 65535] { R16437 += 1 };
  s2 -> s2 [0, 75] { R16437 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R16437 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R16439 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16438 += 1, R16439 += 1 };
  s0 -> s2 [75, 75] { R16439 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R16439 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R16439 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R16439 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R16439 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R16439 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R16439 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16439 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R16441 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16440 += 1, R16441 += 1 };
  s0 -> s2 [75, 75] { R16441 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R16441 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R16441 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R16441 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R16441 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R16441 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R16441 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R16441 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R16443 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16442 += 1, R16443 += 1 };
  s0 -> s2 [75, 75] { R16443 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R16443 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R16443 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R16443 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R16443 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R16443 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R16443 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R16443 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R16445 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16444 += 1, R16445 += 1 };
  s0 -> s2 [75, 75] { R16445 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R16445 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R16445 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R16445 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R16445 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R16445 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R16445 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R16445 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R16447 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16446 += 1, R16447 += 1 };
  s0 -> s2 [75, 75] { R16447 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R16447 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R16447 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R16447 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R16447 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R16447 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R16447 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R16447 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R16449 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16448 += 1, R16449 += 1 };
  s0 -> s2 [75, 75] { R16449 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R16449 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R16449 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R16449 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R16449 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R16449 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R16449 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R16449 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R16451 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16450 += 1, R16451 += 1 };
  s0 -> s2 [75, 75] { R16451 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R16451 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R16451 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R16451 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R16451 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R16451 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R16451 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16451 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R16471 += 1 };
  s0 -> s0 [0, 65535] { R16470 += 1, R16471 += 1 };
  s0 -> s2 [75, 75] { R16471 += 1 };
  s0 -> s1 [76, 65535] { R16471 += 1 };
  s1 -> s1 [0, 74] { R16471 += 1 };
  s1 -> s2 [75, 75] { R16471 += 1 };
  s1 -> s1 [76, 65535] { R16471 += 1 };
  s2 -> s2 [0, 65535] { R16471 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R16472 += 1, R16473 += 1 };
  s0 -> s1 [0, 65535] { R16473 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16473 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R16475 += 1 };
  s0 -> s0 [0, 65535] { R16474 += 1, R16475 += 1 };
  s0 -> s2 [0, 65535] { R16475 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R16475 += 1 };
  s0 -> s1 [76, 65535] { R16475 += 1 };
  s1 -> s1 [0, 74] { R16475 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R16475 += 1 };
  s1 -> s1 [76, 65535] { R16475 += 1 };
  s2 -> s1 [0, 74] { R16475 += 1 };
  s2 -> s2 [0, 65535] { R16475 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R16475 += 1 };
  s2 -> s1 [76, 65535] { R16475 += 1 };
  s3 -> s3 [0, 65535] { R16475 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R16477 += 1, R16415 += 1 };
  s0 -> s2 [0, 65535] { R16477 += 1, R16414 += 1, R16415 += 1 };
  s0 -> s0 [0, 65535] { R16476 += 1, R16477 += 1 };
  s0 -> s1 [76, 65535] { R16477 += 1, R16415 += 1 };
  s1 -> s1 [0, 74] { R16477 += 1, R16415 += 1 };
  s1 -> s1 [0, 65535] { R16477 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R16477 += 1, R16415 += 1 };
  s2 -> s1 [0, 74] { R16477 += 1, R16415 += 1 };
  s2 -> s2 [0, 65535] { R16477 += 1, R16414 += 1, R16415 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R16477 += 1, R16415 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R16479 += 1, R16416 += 1, R16417 += 1 };
  s0 -> s0 [0, 65535] { R16478 += 1, R16479 += 1 };
  s0 -> s2 [0, 65535] { R16479 += 1, R16417 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R16479 += 1, R16416 += 1, R16417 += 1 };
  s1 -> s2 [0, 65535] { R16479 += 1, R16417 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16479 += 1, R16417 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R16479 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16479 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R16481 += 1, R16419 += 1 };
  s0 -> s2 [0, 65535] { R16481 += 1, R16418 += 1, R16419 += 1 };
  s0 -> s0 [0, 65535] { R16480 += 1, R16481 += 1 };
  s0 -> s1 [87, 65535] { R16481 += 1, R16419 += 1 };
  s1 -> s1 [0, 75] { R16481 += 1, R16419 += 1 };
  s1 -> s1 [0, 65535] { R16481 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R16481 += 1, R16419 += 1 };
  s2 -> s1 [0, 75] { R16481 += 1, R16419 += 1 };
  s2 -> s2 [0, 65535] { R16481 += 1, R16418 += 1, R16419 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R16481 += 1, R16419 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R16483 += 1, R16421 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R16482 += 1, R16483 += 1 };
  s0 -> s2 [0, 65535] { R16483 += 1, R16420 += 1, R16421 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16483 += 1, R16421 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R16483 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16483 += 1, R16421 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R16483 += 1, R16420 += 1, R16421 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16483 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R16485 += 1, R16423 += 1 };
  s0 -> s0 [0, 65535] { R16484 += 1, R16485 += 1 };
  s0 -> s2 [0, 65535] { R16485 += 1, R16423 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R16485 += 1, R16422 += 1, R16423 += 1 };
  s0 -> s1 [88, 65535] { R16485 += 1, R16423 += 1 };
  s1 -> s1 [0, 86] { R16485 += 1, R16423 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16485 += 1 };
  s1 -> s1 [88, 65535] { R16485 += 1, R16423 += 1 };
  s2 -> s1 [0, 86] { R16485 += 1, R16423 += 1 };
  s2 -> s2 [0, 65535] { R16485 += 1, R16423 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R16485 += 1 };
  s2 -> s1 [88, 65535] { R16485 += 1, R16423 += 1 };
  s3 -> s1 [0, 86] { R16485 += 1, R16423 += 1 };
  s3 -> s2 [0, 65535] { R16485 += 1, R16423 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16485 += 1, R16422 += 1, R16423 += 1 };
  s3 -> s1 [88, 65535] { R16485 += 1, R16423 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16485 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R16487 += 1, R16425 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R16487 += 1, R16424 += 1, R16425 += 1 };
  s0 -> s0 [0, 65535] { R16486 += 1, R16487 += 1 };
  s0 -> s1 [0, 65535] { R16487 += 1, R16425 += 1 };
  s0 -> s1 [88, 65535] { R16487 += 1, R16425 += 1, R11525 += 1 };
  s1 -> s1 [0, 86] { R16487 += 1, R16425 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16487 += 1, R16425 += 1 };
  s1 -> s4 [0, 65535] { R16487 += 1 };
  s1 -> s1 [88, 65535] { R16487 += 1, R16425 += 1, R11525 += 1 };
  s2 -> s1 [0, 86] { R16487 += 1, R16425 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R16487 += 1, R16424 += 1, R16425 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16487 += 1, R16425 += 1 };
  s2 -> s1 [88, 65535] { R16487 += 1, R16425 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16487 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R16489 += 1, R16427 += 1 };
  s0 -> s2 [0, 65535] { R16489 += 1, R16426 += 1, R16427 += 1 };
  s0 -> s3 [0, 65535] { R16489 += 1, R16427 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s0 [0, 65535] { R16488 += 1, R16489 += 1 };
  s1 -> s1 [0, 65535] { R16489 += 1, R16427 += 1 };
  s1 -> s4 [0, 65535] { R16489 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R16489 += 1, R16427 += 1 };
  s2 -> s2 [0, 65535] { R16489 += 1, R16426 += 1, R16427 += 1 };
  s2 -> s3 [0, 65535] { R16489 += 1, R16427 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R16489 += 1, R16427 += 1 };
  s3 -> s4 [0, 65535] { R16489 += 1 };
  s3 -> s3 [0, 65535] { R16489 += 1, R16427 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16489 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R16491 += 1, R16429 += 1, R15351 += 1 };
  s0 -> s2 [0, 65535] { R16491 += 1, R16428 += 1, R16429 += 1 };
  s0 -> s0 [0, 65535] { R16490 += 1, R16491 += 1 };
  s0 -> s1 [0, 65535] { R16491 += 1, R16429 += 1 };
  s0 -> s1 [90, 65535] { R16491 += 1, R16429 += 1, R15351 += 1 };
  s1 -> s1 [0, 87] { R16491 += 1, R16429 += 1, R15351 += 1 };
  s1 -> s4 [0, 65535] { R16491 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16491 += 1, R16429 += 1 };
  s1 -> s1 [90, 65535] { R16491 += 1, R16429 += 1, R15351 += 1 };
  s2 -> s1 [0, 87] { R16491 += 1, R16429 += 1, R15351 += 1 };
  s2 -> s2 [0, 65535] { R16491 += 1, R16428 += 1, R16429 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16491 += 1, R16429 += 1 };
  s2 -> s1 [90, 65535] { R16491 += 1, R16429 += 1, R15351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16491 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R16492 += 1, R16493 += 1 };
  s0 -> s1 [0, 65535] { R16493 += 1, R16431 += 1 };
  s0 -> s2 [0, 65535] { R16493 += 1, R16430 += 1, R16431 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16493 += 1, R16431 += 1 };
  s1 -> s4 [0, 65535] { R16493 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16493 += 1, R16431 += 1 };
  s2 -> s2 [0, 65535] { R16493 += 1, R16430 += 1, R16431 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16493 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R16494 += 1, R16495 += 1 };
  s0 -> s1 [0, 65535] { R16495 += 1, R16433 += 1 };
  s0 -> s2 [0, 65535] { R16495 += 1, R16432 += 1, R16433 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16495 += 1 };
  s1 -> s1 [0, 65535] { R16495 += 1, R16433 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16495 += 1, R16433 += 1 };
  s2 -> s2 [0, 65535] { R16495 += 1, R16432 += 1, R16433 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16495 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R16496 += 1, R16497 += 1 };
  s0 -> s1 [0, 65535] { R16497 += 1, R16452 += 1, R16453 += 1 };
  s0 -> s2 [0, 65535] { R16497 += 1, R16453 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R16497 += 1, R16452 += 1, R16453 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R16497 += 1, R16453 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R16497 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16497 += 1, R16453 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R16497 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R16499 += 1, R16455 += 1 };
  s0 -> s2 [0, 65535] { R16499 += 1, R16454 += 1, R16455 += 1 };
  s0 -> s0 [0, 65535] { R16498 += 1, R16499 += 1 };
  s0 -> s3 [75, 75] { R16499 += 1, R16455 += 1 };
  s0 -> s4 [75, 75] { R16499 += 1, R16455 += 1 };
  s0 -> s5 [87, 87] { R16499 += 1, R16455 += 1 };
  s0 -> s1 [88, 65535] { R16499 += 1, R16455 += 1 };
  s1 -> s1 [0, 74] { R16499 += 1, R16455 += 1 };
  s1 -> s3 [75, 75] { R16499 += 1, R16455 += 1 };
  s1 -> s4 [75, 75] { R16499 += 1, R16455 += 1 };
  s1 -> s5 [87, 87] { R16499 += 1, R16455 += 1 };
  s1 -> s1 [88, 65535] { R16499 += 1, R16455 += 1 };
  s2 -> s1 [0, 74] { R16499 += 1, R16455 += 1 };
  s2 -> s2 [0, 65535] { R16499 += 1, R16454 += 1, R16455 += 1 };
  s2 -> s3 [75, 75] { R16499 += 1, R16455 += 1 };
  s2 -> s4 [75, 75] { R16499 += 1, R16455 += 1 };
  s2 -> s5 [87, 87] { R16499 += 1, R16455 += 1 };
  s2 -> s1 [88, 65535] { R16499 += 1, R16455 += 1 };
  s3 -> s3 [0, 75] { R16499 += 1, R16455 += 1 };
  s3 -> s8 [87, 87] { R16499 += 1, R16455 += 1 };
  s3 -> s3 [88, 65535] { R16499 += 1, R16455 += 1 };
  s5 -> s5 [0, 74] { R16499 += 1, R16455 += 1 };
  s5 -> s5 [0, 65535] { R16499 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R16499 += 1, R16455 += 1 };
  s5 -> s8 [75, 75] { R16499 += 1, R16455 += 1 };
  s5 -> s5 [87, 65535] { R16499 += 1, R16455 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R16499 += 1 };
  s8 -> s8 [0, 75] { R16499 += 1, R16455 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R16499 += 1 };
  s8 -> s8 [87, 65535] { R16499 += 1, R16455 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R16501 += 1, R16457 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R16500 += 1, R16501 += 1 };
  s0 -> s2 [0, 65535] { R16501 += 1, R16456 += 1, R16457 += 1 };
  s0 -> s3 [75, 75] { R16501 += 1, R16457 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R16501 += 1, R16457 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R16501 += 1, R16457 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R16501 += 1, R16457 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16501 += 1 };
  s1 -> s3 [75, 75] { R16501 += 1, R16457 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R16501 += 1, R16457 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R16501 += 1, R16457 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R16501 += 1, R16457 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16501 += 1, R16456 += 1, R16457 += 1 };
  s2 -> s3 [75, 75] { R16501 += 1, R16457 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R16501 += 1, R16457 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R16501 += 1, R16457 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16501 += 1, R16457 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R16501 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16501 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16501 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R16503 += 1, R16459 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R16503 += 1, R16458 += 1, R16459 += 1 };
  s0 -> s0 [0, 65535] { R16502 += 1, R16503 += 1 };
  s0 -> s3 [75, 75] { R16503 += 1, R16459 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R16503 += 1, R16459 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R16503 += 1, R16459 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R16503 += 1, R16459 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R16503 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R16503 += 1, R16459 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R16503 += 1, R16459 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R16503 += 1, R16459 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R16503 += 1, R16459 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R16503 += 1, R16458 += 1, R16459 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R16503 += 1, R16459 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R16503 += 1, R16459 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R16503 += 1, R16459 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R16503 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16503 += 1, R16459 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16503 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16503 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 74] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R16504 += 1, R16505 += 1 };
  s0 -> s3 [0, 65535] { R16505 += 1, R16460 += 1, R16461 += 1 };
  s0 -> s4 [75, 75] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [75, 75] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s0 -> s6 [75, 75] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [75, 75] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s0 -> s2 [76, 86] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s0 -> s1 [76, 65535] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [88, 65535] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s1 -> s1 [0, 74] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 74] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s1 -> s4 [75, 75] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [75, 75] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s1 -> s6 [75, 75] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [75, 75] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s1 -> s2 [76, 86] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s1 -> s1 [76, 65535] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [88, 65535] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s2 -> s2 [0, 74] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s2 -> s2 [0, 65535] { R16505 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [75, 75] { R16505 += 1, R16461 += 1 };
  s2 -> s7 [75, 75] { R16505 += 1, R16461 += 1 };
  s2 -> s2 [76, 86] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s2 -> s2 [76, 65535] { R16505 += 1, R16461 += 1 };
  s2 -> s2 [88, 65535] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s3 -> s1 [0, 74] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 74] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R16505 += 1, R16460 += 1, R16461 += 1 };
  s3 -> s4 [75, 75] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [75, 75] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s3 -> s6 [75, 75] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [75, 75] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s3 -> s2 [76, 86] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s3 -> s1 [76, 65535] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [88, 65535] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s5 -> s5 [0, 86] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s5 -> s9 [0, 65535] { R16505 += 1 };
  s5 -> s5 [0, 65535] { R16505 += 1, R16461 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [88, 65535] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s6 -> s5 [0, 86] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R16505 += 1, R16461 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s5 [88, 65535] { R16505 += 1, R16461 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R16505 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16505 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 74] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s0 [0, 65535] { R16506 += 1, R16507 += 1 };
  s0 -> s3 [0, 65535] { R16507 += 1, R16462 += 1, R16463 += 1 };
  s0 -> s4 [75, 75] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s5 [75, 75] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [75, 75] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s7 [75, 75] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [76, 65535] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [76, 65535] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 74] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 65535] { R16507 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [75, 75] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s5 [75, 75] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [76, 65535] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 74] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 74] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [75, 75] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s5 [75, 75] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s6 [75, 75] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s7 [75, 75] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s1 [76, 65535] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [76, 65535] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 74] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 74] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R16507 += 1, R16462 += 1, R16463 += 1 };
  s3 -> s4 [75, 75] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s5 [75, 75] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [75, 75] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s7 [75, 75] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [76, 65535] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [76, 65535] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s4 [0, 65535] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s9 [0, 65535] { R16507 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R16507 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R16507 += 1, R16463 += 1, R15343 += 1, R15344 += 1 };
  s7 -> s7 [0, 65535] { R16507 += 1, R16463 += 1, R15342 += 1, R15343 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16507 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s0 -> s2 [0, 74] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s0 [0, 65535] { R16508 += 1, R16509 += 1 };
  s0 -> s3 [0, 65535] { R16509 += 1, R16464 += 1, R16465 += 1 };
  s0 -> s4 [75, 75] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s5 [75, 75] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s0 -> s6 [75, 75] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s7 [75, 75] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s0 -> s1 [76, 87] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s0 -> s2 [76, 65535] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s8 [90, 90] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s0 -> s1 [91, 65535] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s1 -> s1 [0, 74] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s1 -> s5 [75, 75] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s1 -> s7 [75, 75] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s1 -> s1 [76, 87] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s1 -> s8 [90, 90] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s1 -> s1 [91, 65535] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s2 -> s1 [0, 74] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s2 -> s2 [0, 74] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s4 [75, 75] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s5 [75, 75] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s2 -> s6 [75, 75] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s7 [75, 75] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s2 -> s1 [76, 87] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s2 -> s2 [76, 65535] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s8 [90, 90] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s2 -> s1 [91, 65535] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s3 -> s1 [0, 74] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s3 -> s2 [0, 74] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s3 [0, 65535] { R16509 += 1, R16464 += 1, R16465 += 1 };
  s3 -> s4 [75, 75] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s5 [75, 75] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s3 -> s6 [75, 75] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s7 [75, 75] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s3 -> s1 [76, 87] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s3 -> s2 [76, 65535] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s8 [90, 90] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s3 -> s1 [91, 65535] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s4 -> s7 [0, 87] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s4 -> s4 [0, 65535] { R16509 += 1, R16465 += 1, R15348 += 1, R15349 += 1 };
  s4 -> s11 [90, 90] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s4 -> s7 [91, 65535] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s7 -> s7 [0, 87] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s7 -> s11 [90, 90] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s7 -> s7 [91, 65535] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s8 -> s8 [0, 74] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s8 -> s8 [0, 65535] { R16509 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [75, 75] { R16509 += 1, R16465 += 1 };
  s8 -> s11 [75, 75] { R16509 += 1, R16465 += 1 };
  s8 -> s8 [76, 87] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s8 -> s8 [76, 65535] { R16509 += 1, R16465 += 1 };
  s8 -> s8 [90, 65535] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16509 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 87] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R16509 += 1, R16465 += 1 };
  s11 -> s12 [0, 65535] { R16509 += 1 };
  s11 -> s11 [90, 65535] { R16509 += 1, R16465 += 1, R15349 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R16509 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s2 [0, 74] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s0 [0, 65535] { R16510 += 1, R16511 += 1 };
  s0 -> s3 [0, 65535] { R16511 += 1, R16466 += 1, R16467 += 1 };
  s0 -> s4 [75, 75] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s5 [75, 75] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s6 [75, 75] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s7 [75, 75] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s1 [76, 65535] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s2 [76, 65535] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s1 -> s11 [0, 74] { R16511 += 1, R16467 += 1 };
  s1 -> s1 [0, 74] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s5 [75, 75] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s8 [75, 75] { R16511 += 1, R16467 += 1 };
  s1 -> s7 [75, 75] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s12 [75, 75] { R16511 += 1, R16467 += 1 };
  s1 -> s11 [76, 65535] { R16511 += 1, R16467 += 1 };
  s1 -> s1 [76, 65535] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s1 [0, 74] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s2 [0, 74] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s4 [75, 75] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s5 [75, 75] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s6 [75, 75] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s7 [75, 75] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s1 [76, 65535] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s2 [76, 65535] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s1 [0, 74] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s2 [0, 74] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s3 [0, 65535] { R16511 += 1, R16466 += 1, R16467 += 1 };
  s3 -> s4 [75, 75] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s5 [75, 75] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s6 [75, 75] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s7 [75, 75] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s1 [76, 65535] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s2 [76, 65535] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s5 -> s5 [0, 65535] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s5 -> s8 [0, 65535] { R16511 += 1, R16467 += 1 };
  s6 -> s5 [0, 65535] { R16511 += 1, R16467 += 1, R16197 += 1, R16198 += 1 };
  s6 -> s6 [0, 65535] { R16511 += 1, R16467 += 1, R16196 += 1, R16197 += 1 };
  s8 -> s9 [0, 65535] { R16511 += 1 };
  s8 -> s8 [0, 65535] { R16511 += 1, R16467 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R16511 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 74] { R16511 += 1, R16467 += 1 };
  s11 -> s11 [0, 65535] { R16511 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [75, 75] { R16511 += 1, R16467 += 1 };
  s11 -> s12 [75, 75] { R16511 += 1, R16467 += 1 };
  s11 -> s11 [76, 65535] { R16511 += 1, R16467 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R16511 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s0 -> s2 [0, 74] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s0 -> s3 [0, 65535] { R16513 += 1, R16468 += 1, R16469 += 1 };
  s0 -> s0 [0, 65535] { R16512 += 1, R16513 += 1 };
  s0 -> s4 [75, 75] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s0 -> s5 [75, 75] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s0 -> s6 [75, 75] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s0 -> s7 [75, 75] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s0 -> s1 [76, 86] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s0 -> s2 [76, 65535] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s0 -> s8 [87, 87] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s0 -> s1 [91, 65535] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s1 -> s1 [0, 74] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s1 -> s6 [75, 75] { R16513 += 1, R16469 += 1 };
  s1 -> s7 [75, 75] { R16513 += 1, R16469 += 1 };
  s1 -> s1 [76, 86] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s1 -> s1 [76, 65535] { R16513 += 1, R16469 += 1 };
  s1 -> s8 [87, 87] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s1 -> s1 [91, 65535] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s2 -> s1 [0, 74] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s2 -> s2 [0, 74] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s2 -> s4 [75, 75] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s2 -> s5 [75, 75] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s2 -> s6 [75, 75] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s2 -> s7 [75, 75] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s2 -> s1 [76, 86] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s2 -> s2 [76, 65535] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s2 -> s8 [87, 87] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s2 -> s1 [91, 65535] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s3 -> s1 [0, 74] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s3 -> s2 [0, 74] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s3 -> s3 [0, 65535] { R16513 += 1, R16468 += 1, R16469 += 1 };
  s3 -> s4 [75, 75] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s3 -> s5 [75, 75] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s3 -> s6 [75, 75] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s3 -> s7 [75, 75] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s3 -> s1 [76, 86] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s3 -> s2 [76, 65535] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s3 -> s8 [87, 87] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s3 -> s1 [91, 65535] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s5 -> s6 [0, 86] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s5 -> s5 [0, 65535] { R16513 += 1, R16469 += 1, R16410 += 1, R16411 += 1 };
  s5 -> s11 [87, 87] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s5 -> s6 [91, 65535] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s6 -> s6 [0, 86] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s6 -> s6 [0, 65535] { R16513 += 1, R16469 += 1 };
  s6 -> s11 [87, 87] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s6 -> s6 [91, 65535] { R16513 += 1, R16469 += 1, R16411 += 1 };
  s8 -> s8 [0, 74] { R16513 += 1, R16469 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R16513 += 1 };
  s8 -> s10 [75, 75] { R16513 += 1, R16469 += 1 };
  s8 -> s11 [75, 75] { R16513 += 1, R16469 += 1 };
  s8 -> s8 [76, 65535] { R16513 += 1, R16469 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16513 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R16513 += 1 };
  s11 -> s11 [0, 65535] { R16513 += 1, R16469 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R16513 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R16513 && R20 - R16513 = -1 && R21 = R16513 && R22 - R16513 = -1 && R23 = R16513 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15351 + -1*R15349 - R53 = 0 && R52 + R15350 + R15348 = 0 && R16454 = 0 && R16455 = 0 && R16460 = 0 && R16461 = 0 && R16462 = 0 && R16463 = 0 && R16464 = 0 && R16465 = 0 && R16466 = 0 && R16467 = 0 && R16468 = 0 && R16469 = 0 && R16470 = 0 && R16471 = R16513 && R16472 = 0 && R16473 = R16513 && R16474 = 0 && R16475 = R16513 && R16476 = 0 && R16477 = R16513 && R16478 = 0 && R16479 = R16513 && R16480 = 0 && R16481 = R16513 && R16482 = 0 && R16483 = R16513 && R16484 = 0 && R16485 = R16513 && R16486 = 0 && R16487 = R16513 && R16488 = 0 && R16489 = R16513 && R16490 = 0 && R16491 = R16513 && R16492 = 0 && R16493 = R16513 && R16494 = 0 && R16495 = R16513 && R16496 = 0 && R16497 = R16513 && R16498 = 0 && R16499 = R16513 && R16500 = 0 && R16501 = R16513 && R16502 = 0 && R16503 = R16513 && R16504 = 0 && R16505 = R16513 && R16506 = 0 && R16507 = R16513 && R16508 = 0 && R16509 = R16513 && R16510 = 0 && R16511 = R16513 && R16512 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15351 + -1*R15349 - R53 < 1 && 0 < R16513 && (R1 != 0 || R17 = 0 || (R16414 = 0 && R16415 = 0)) && (R1 != 0 || R17 = 0 || (R16416 = 0 && R16417 = 0)) && (R1 != 0 || R17 = 0 || (R16418 = 0 && R16419 = 0)) && (R1 != 0 || R17 = 0 || (R16420 = 0 && R16421 = 0)) && (R1 != 0 || R17 = 0 || (R16422 = 0 && R16423 = 0)) && (R1 != 0 || R17 = 0 || (R16424 = 0 && R16425 = 0)) && (R1 != 0 || R17 = 0 || (R16426 = 0 && R16427 = 0)) && (R1 != 0 || R17 = 0 || (R16428 = 0 && R16429 = 0)) && (R1 != 0 || R17 = 0 || (R16430 = 0 && R16431 = 0)) && (R1 != 0 || R17 = 0 || (R16432 = 0 && R16433 = 0)) && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R15351 + R15349 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R15351 + R15349 < 1))) && (R16414 != 0 || R1 = R16415 || R1 < 1) && (R16416 != 0 || R1 = R16417 || R1 < 1) && (R16418 != 0 || R1 = R16419 || R1 < 1) && (R16420 != 0 || R1 = R16421 || R1 < 1) && (R16422 != 0 || R1 = R16423 || R1 < 1) && (R16424 != 0 || R1 = R16425 || R1 < 1) && (R16426 != 0 || R1 = R16427 || R1 < 1) && (R16428 != 0 || R1 = R16429 || R1 < 1) && (R16430 != 0 || R1 = R16431 || R1 < 1) && (R16432 != 0 || R1 = R16433 || R1 < 1) && (R18 = 0 || (R16452 = 0 && R16453 = 0)) && (R18 = 0 || (R16456 = 0 && R16457 = 0)) && (R18 = 0 || (R16458 = 0 && R16459 = 0)) && (R19 = 0 || (R16434 = 0 && R16435 = 0)) && (R19 = 0 || (R16436 = 0 && R16437 = 0)) && (R19 = 0 || (R16438 = 0 && R16439 = 0)) && (R19 = 0 || (R16440 = 0 && R16441 = 0)) && (R19 = 0 || (R16442 = 0 && R16443 = 0)) && (R19 = 0 || (R16444 = 0 && R16445 = 0)) && (R19 = 0 || (R16446 = 0 && R16447 = 0)) && (R19 = 0 || (R16448 = 0 && R16449 = 0)) && (R19 = 0 || (R16450 = 0 && R16451 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0)) && (R58 + R16201 + R16198 = 0 || (R56 + R16199 + R16196 = 0 && R57 + R16200 + R16197 = 0)) && (R58 + R16201 + R16198 = 0 || (R62 + R16412 + R16410 = 0 && R63 + R16413 + R16411 = 0)) && (R16414 = 0 || R1 < 1) && (R16416 = 0 || R1 < 1) && (R16418 = 0 || R1 < 1) && (R16420 = 0 || R1 < 1) && (R16422 = 0 || R1 < 1) && (R16424 = 0 || R1 < 1) && (R16426 = 0 || R1 < 1) && (R16428 = 0 || R1 < 1) && (R16430 = 0 || R1 < 1) && (R16432 = 0 || R1 < 1);
// End of Parikh automata intersection problem
