// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R15348, R15349, R15350, R15351, R15352, R15353, R15354, R15355, R15356, R15357, R15566, R15567, R15568, R15569, R15570, R15571, R15572, R15573, R15574, R15575, R15576, R15577, R15578, R15579, R15580, R15581, R15582, R15583, R15584, R15585, R15586, R15587, R15588, R15589, R15590, R15591, R15592, R15593, R15594, R15595, R15596, R15597, R15598, R15599, R15600, R15601, R15602, R15603, R15604, R15605, R15606, R15607, R15608, R15609, R15610, R15611, R15612, R15613, R15614, R15615, R15616, R15617, R15618, R15619, R15620, R15621, R15622, R15623, R15624, R15625, R15626, R15627, R15628, R15629, R15630, R15631, R15632, R15633, R15634, R15635, R15636, R15637, R15638, R15639, R15640, R15641, R15642, R15643, R15644, R15645, R15646, R15647, R15648, R15649, R15650, R15651, R15652, R15653, R15654, R15655, R15656, R15657, R15658, R15659, R15660, R15661, R15662, R15663, R15664, R15665, R15666, R15667, R15668, R15669, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R15590 += 1, R15591 += 1 };
  s0 -> s1 [0, 65535] { R15591 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R15591 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R15593 += 1 };
  s0 -> s0 [0, 65535] { R15592 += 1, R15593 += 1 };
  s0 -> s2 [75, 75] { R15593 += 1 };
  s0 -> s3 [75, 75] { R15593 += 1 };
  s0 -> s1 [88, 65535] { R15593 += 1 };
  s1 -> s1 [0, 74] { R15593 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R15593 += 1 };
  s1 -> s3 [75, 75] { R15593 += 1 };
  s1 -> s1 [88, 65535] { R15593 += 1 };
  s2 -> s2 [0, 75] { R15593 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R15593 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R15595 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R15594 += 1, R15595 += 1 };
  s0 -> s2 [75, 75] { R15595 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R15595 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R15595 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R15595 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R15595 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R15595 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R15595 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R15595 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R15597 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R15596 += 1, R15597 += 1 };
  s0 -> s2 [75, 75] { R15597 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R15597 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R15597 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R15597 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R15597 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R15597 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R15597 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15597 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R15599 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R15598 += 1, R15599 += 1 };
  s0 -> s2 [75, 75] { R15599 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R15599 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R15599 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R15599 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R15599 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R15599 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R15599 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R15599 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R15601 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R15600 += 1, R15601 += 1 };
  s0 -> s2 [75, 75] { R15601 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R15601 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R15601 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R15601 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R15601 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R15601 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R15601 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R15601 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R15603 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R15602 += 1, R15603 += 1 };
  s0 -> s2 [75, 75] { R15603 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R15603 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R15603 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R15603 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R15603 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R15603 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R15603 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R15603 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R15605 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R15604 += 1, R15605 += 1 };
  s0 -> s2 [75, 75] { R15605 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R15605 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R15605 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R15605 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R15605 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R15605 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R15605 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15605 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R15607 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R15606 += 1, R15607 += 1 };
  s0 -> s2 [75, 75] { R15607 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R15607 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R15607 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R15607 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R15607 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R15607 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R15607 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15607 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R15627 += 1 };
  s0 -> s0 [0, 65535] { R15626 += 1, R15627 += 1 };
  s0 -> s2 [75, 75] { R15627 += 1 };
  s0 -> s1 [76, 65535] { R15627 += 1 };
  s1 -> s1 [0, 74] { R15627 += 1 };
  s1 -> s2 [75, 75] { R15627 += 1 };
  s1 -> s1 [76, 65535] { R15627 += 1 };
  s2 -> s2 [0, 65535] { R15627 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R15629 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R15628 += 1, R15629 += 1 };
  s1 -> s1 [0, 65535] { R15629 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R15631 += 1 };
  s0 -> s0 [0, 65535] { R15630 += 1, R15631 += 1 };
  s0 -> s2 [0, 65535] { R15631 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R15631 += 1 };
  s0 -> s1 [76, 65535] { R15631 += 1 };
  s1 -> s1 [0, 74] { R15631 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R15631 += 1 };
  s1 -> s1 [76, 65535] { R15631 += 1 };
  s2 -> s1 [0, 74] { R15631 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15631 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R15631 += 1 };
  s2 -> s1 [76, 65535] { R15631 += 1 };
  s3 -> s3 [0, 65535] { R15631 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R15633 += 1, R15571 += 1 };
  s0 -> s0 [0, 65535] { R15632 += 1, R15633 += 1 };
  s0 -> s2 [0, 65535] { R15633 += 1, R15570 += 1, R15571 += 1 };
  s0 -> s1 [76, 65535] { R15633 += 1, R15571 += 1 };
  s1 -> s1 [0, 74] { R15633 += 1, R15571 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15633 += 1 };
  s1 -> s1 [76, 65535] { R15633 += 1, R15571 += 1 };
  s2 -> s1 [0, 74] { R15633 += 1, R15571 += 1 };
  s2 -> s2 [0, 65535] { R15633 += 1, R15570 += 1, R15571 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R15633 += 1, R15571 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R15635 += 1, R15573 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R15634 += 1, R15635 += 1 };
  s0 -> s2 [0, 65535] { R15635 += 1, R15572 += 1, R15573 += 1 };
  s1 -> s1 [0, 65535] { R15635 += 1, R15573 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R15635 += 1 };
  s2 -> s1 [0, 65535] { R15635 += 1, R15573 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15635 += 1, R15572 += 1, R15573 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15635 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R15637 += 1, R15575 += 1 };
  s0 -> s0 [0, 65535] { R15636 += 1, R15637 += 1 };
  s0 -> s2 [0, 65535] { R15637 += 1, R15574 += 1, R15575 += 1 };
  s0 -> s1 [87, 65535] { R15637 += 1, R15575 += 1 };
  s1 -> s1 [0, 75] { R15637 += 1, R15575 += 1 };
  s1 -> s1 [0, 65535] { R15637 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R15637 += 1, R15575 += 1 };
  s2 -> s1 [0, 75] { R15637 += 1, R15575 += 1 };
  s2 -> s2 [0, 65535] { R15637 += 1, R15574 += 1, R15575 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R15637 += 1, R15575 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R15638 += 1, R15639 += 1 };
  s0 -> s1 [0, 65535] { R15639 += 1, R15577 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R15639 += 1, R15576 += 1, R15577 += 1 };
  s1 -> s1 [0, 65535] { R15639 += 1, R15577 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R15639 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R15639 += 1, R15577 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R15639 += 1, R15576 += 1, R15577 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15639 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R15641 += 1, R15579 += 1 };
  s0 -> s2 [0, 65535] { R15641 += 1, R15579 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R15641 += 1, R15578 += 1, R15579 += 1 };
  s0 -> s0 [0, 65535] { R15640 += 1, R15641 += 1 };
  s0 -> s1 [88, 65535] { R15641 += 1, R15579 += 1 };
  s1 -> s1 [0, 86] { R15641 += 1, R15579 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R15641 += 1 };
  s1 -> s1 [88, 65535] { R15641 += 1, R15579 += 1 };
  s2 -> s1 [0, 86] { R15641 += 1, R15579 += 1 };
  s2 -> s5 [0, 65535] { R15641 += 1 };
  s2 -> s2 [0, 65535] { R15641 += 1, R15579 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R15641 += 1, R15579 += 1 };
  s3 -> s1 [0, 86] { R15641 += 1, R15579 += 1 };
  s3 -> s2 [0, 65535] { R15641 += 1, R15579 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R15641 += 1, R15578 += 1, R15579 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R15641 += 1, R15579 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15641 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R15643 += 1, R15581 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R15642 += 1, R15643 += 1 };
  s0 -> s1 [0, 65535] { R15643 += 1, R15581 += 1 };
  s0 -> s2 [0, 65535] { R15643 += 1, R15580 += 1, R15581 += 1 };
  s0 -> s1 [88, 65535] { R15643 += 1, R15581 += 1, R11525 += 1 };
  s1 -> s1 [0, 86] { R15643 += 1, R15581 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R15643 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15643 += 1, R15581 += 1 };
  s1 -> s1 [88, 65535] { R15643 += 1, R15581 += 1, R11525 += 1 };
  s2 -> s1 [0, 86] { R15643 += 1, R15581 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R15643 += 1, R15581 += 1 };
  s2 -> s2 [0, 65535] { R15643 += 1, R15580 += 1, R15581 += 1 };
  s2 -> s1 [88, 65535] { R15643 += 1, R15581 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15643 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R15645 += 1, R15583 += 1 };
  s0 -> s2 [0, 65535] { R15645 += 1, R15583 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s0 [0, 65535] { R15644 += 1, R15645 += 1 };
  s0 -> s3 [0, 65535] { R15645 += 1, R15582 += 1, R15583 += 1 };
  s1 -> s5 [0, 65535] { R15645 += 1 };
  s1 -> s1 [0, 65535] { R15645 += 1, R15583 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R15645 += 1 };
  s2 -> s1 [0, 65535] { R15645 += 1, R15583 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15645 += 1, R15583 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s1 [0, 65535] { R15645 += 1, R15583 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R15645 += 1, R15583 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s3 [0, 65535] { R15645 += 1, R15582 += 1, R15583 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15645 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R15647 += 1, R15585 += 1, R15351 += 1 };
  s0 -> s1 [0, 65535] { R15647 += 1, R15585 += 1 };
  s0 -> s0 [0, 65535] { R15646 += 1, R15647 += 1 };
  s0 -> s2 [0, 65535] { R15647 += 1, R15584 += 1, R15585 += 1 };
  s0 -> s1 [90, 65535] { R15647 += 1, R15585 += 1, R15351 += 1 };
  s1 -> s1 [0, 87] { R15647 += 1, R15585 += 1, R15351 += 1 };
  s1 -> s1 [0, 65535] { R15647 += 1, R15585 += 1 };
  s1 -> s4 [0, 65535] { R15647 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R15647 += 1, R15585 += 1, R15351 += 1 };
  s2 -> s1 [0, 87] { R15647 += 1, R15585 += 1, R15351 += 1 };
  s2 -> s1 [0, 65535] { R15647 += 1, R15585 += 1 };
  s2 -> s2 [0, 65535] { R15647 += 1, R15584 += 1, R15585 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R15647 += 1, R15585 += 1, R15351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15647 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R15649 += 1, R15586 += 1, R15587 += 1 };
  s0 -> s2 [0, 65535] { R15649 += 1, R15587 += 1, R15355 += 1, R15356 += 1 };
  s0 -> s3 [0, 65535] { R15649 += 1, R15587 += 1, R15356 += 1, R15357 += 1 };
  s0 -> s0 [0, 65535] { R15648 += 1, R15649 += 1 };
  s1 -> s1 [0, 65535] { R15649 += 1, R15586 += 1, R15587 += 1 };
  s1 -> s2 [0, 65535] { R15649 += 1, R15587 += 1, R15355 += 1, R15356 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R15649 += 1, R15587 += 1, R15356 += 1, R15357 += 1 };
  s2 -> s2 [0, 65535] { R15649 += 1, R15587 += 1, R15355 += 1, R15356 += 1 };
  s2 -> s5 [0, 65535] { R15649 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R15649 += 1, R15587 += 1, R15356 += 1, R15357 += 1 };
  s3 -> s4 [0, 65535] { R15649 += 1, R15587 += 1 };
  s3 -> s5 [0, 65535] { R15649 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R15649 += 1, R15587 += 1, R15356 += 1, R15357 += 1 };
  s4 -> s4 [0, 65535] { R15649 += 1, R15587 += 1 };
  s4 -> s5 [0, 65535] { R15649 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R15649 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R15651 += 1, R15588 += 1, R15589 += 1 };
  s0 -> s2 [0, 65535] { R15651 += 1, R15589 += 1 };
  s0 -> s0 [0, 65535] { R15650 += 1, R15651 += 1 };
  s1 -> s1 [0, 65535] { R15651 += 1, R15588 += 1, R15589 += 1 };
  s1 -> s2 [0, 65535] { R15651 += 1, R15589 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R15651 += 1 };
  s2 -> s2 [0, 65535] { R15651 += 1, R15589 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15651 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R15653 += 1, R15609 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R15652 += 1, R15653 += 1 };
  s0 -> s2 [0, 65535] { R15653 += 1, R15608 += 1, R15609 += 1 };
  s1 -> s1 [0, 65535] { R15653 += 1, R15609 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R15653 += 1 };
  s2 -> s1 [0, 65535] { R15653 += 1, R15609 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15653 += 1, R15608 += 1, R15609 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15653 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R15655 += 1, R15611 += 1 };
  s0 -> s2 [0, 65535] { R15655 += 1, R15610 += 1, R15611 += 1 };
  s0 -> s0 [0, 65535] { R15654 += 1, R15655 += 1 };
  s0 -> s3 [75, 75] { R15655 += 1, R15611 += 1 };
  s0 -> s4 [75, 75] { R15655 += 1, R15611 += 1 };
  s0 -> s5 [87, 87] { R15655 += 1, R15611 += 1 };
  s0 -> s1 [88, 65535] { R15655 += 1, R15611 += 1 };
  s1 -> s1 [0, 74] { R15655 += 1, R15611 += 1 };
  s1 -> s3 [75, 75] { R15655 += 1, R15611 += 1 };
  s1 -> s4 [75, 75] { R15655 += 1, R15611 += 1 };
  s1 -> s5 [87, 87] { R15655 += 1, R15611 += 1 };
  s1 -> s1 [88, 65535] { R15655 += 1, R15611 += 1 };
  s2 -> s1 [0, 74] { R15655 += 1, R15611 += 1 };
  s2 -> s2 [0, 65535] { R15655 += 1, R15610 += 1, R15611 += 1 };
  s2 -> s3 [75, 75] { R15655 += 1, R15611 += 1 };
  s2 -> s4 [75, 75] { R15655 += 1, R15611 += 1 };
  s2 -> s5 [87, 87] { R15655 += 1, R15611 += 1 };
  s2 -> s1 [88, 65535] { R15655 += 1, R15611 += 1 };
  s4 -> s4 [0, 75] { R15655 += 1, R15611 += 1 };
  s4 -> s7 [87, 87] { R15655 += 1, R15611 += 1 };
  s4 -> s4 [88, 65535] { R15655 += 1, R15611 += 1 };
  s5 -> s5 [0, 74] { R15655 += 1, R15611 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R15655 += 1 };
  s5 -> s7 [75, 75] { R15655 += 1, R15611 += 1 };
  s5 -> s8 [75, 75] { R15655 += 1, R15611 += 1 };
  s5 -> s5 [87, 65535] { R15655 += 1, R15611 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 75] { R15655 += 1, R15611 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R15655 += 1 };
  s7 -> s7 [87, 65535] { R15655 += 1, R15611 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R15655 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R15657 += 1, R15613 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R15657 += 1, R15612 += 1, R15613 += 1 };
  s0 -> s0 [0, 65535] { R15656 += 1, R15657 += 1 };
  s0 -> s3 [75, 75] { R15657 += 1, R15613 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R15657 += 1, R15613 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R15657 += 1, R15613 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R15657 += 1, R15613 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R15657 += 1 };
  s1 -> s3 [75, 75] { R15657 += 1, R15613 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R15657 += 1, R15613 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R15657 += 1, R15613 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R15657 += 1, R15613 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R15657 += 1, R15612 += 1, R15613 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R15657 += 1, R15613 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R15657 += 1, R15613 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R15657 += 1, R15613 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R15657 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R15657 += 1 };
  s4 -> s4 [0, 65535] { R15657 += 1, R15613 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15657 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R15659 += 1, R15615 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R15658 += 1, R15659 += 1 };
  s0 -> s2 [0, 65535] { R15659 += 1, R15614 += 1, R15615 += 1 };
  s0 -> s3 [75, 75] { R15659 += 1, R15615 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R15659 += 1, R15615 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R15659 += 1, R15615 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R15659 += 1, R15615 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R15659 += 1 };
  s1 -> s3 [75, 75] { R15659 += 1, R15615 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R15659 += 1, R15615 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R15659 += 1, R15615 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R15659 += 1, R15615 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R15659 += 1, R15614 += 1, R15615 += 1 };
  s2 -> s3 [75, 75] { R15659 += 1, R15615 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R15659 += 1, R15615 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R15659 += 1, R15615 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R15659 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R15659 += 1 };
  s4 -> s4 [0, 65535] { R15659 += 1, R15615 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15659 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 74] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R15660 += 1, R15661 += 1 };
  s0 -> s3 [0, 65535] { R15661 += 1, R15616 += 1, R15617 += 1 };
  s0 -> s4 [75, 75] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s0 -> s5 [75, 75] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [75, 75] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [75, 75] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s0 -> s2 [76, 86] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s0 -> s1 [76, 65535] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [88, 65535] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s1 -> s1 [0, 74] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 74] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s1 -> s4 [75, 75] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s1 -> s5 [75, 75] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [75, 75] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [75, 75] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s1 -> s2 [76, 86] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s1 -> s1 [76, 65535] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [88, 65535] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s2 -> s2 [0, 74] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R15661 += 1 };
  s2 -> s4 [75, 75] { R15661 += 1, R15617 += 1 };
  s2 -> s7 [75, 75] { R15661 += 1, R15617 += 1 };
  s2 -> s2 [76, 86] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s2 -> s2 [76, 65535] { R15661 += 1, R15617 += 1 };
  s2 -> s2 [88, 65535] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s3 -> s1 [0, 74] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 74] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R15661 += 1, R15616 += 1, R15617 += 1 };
  s3 -> s4 [75, 75] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s3 -> s5 [75, 75] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [75, 75] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [75, 75] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s3 -> s2 [76, 86] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s3 -> s1 [76, 65535] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [88, 65535] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R15661 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s7 [0, 86] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R15661 += 1, R15617 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s7 [88, 65535] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s7 -> s7 [0, 86] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535] { R15661 += 1 };
  s7 -> s7 [0, 65535] { R15661 += 1, R15617 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [88, 65535] { R15661 += 1, R15617 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R15661 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 74] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s3 [0, 65535] { R15663 += 1, R15618 += 1, R15619 += 1 };
  s0 -> s0 [0, 65535] { R15662 += 1, R15663 += 1 };
  s0 -> s4 [75, 75] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s5 [75, 75] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [75, 75] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s7 [75, 75] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [76, 65535] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [76, 65535] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 74] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R15663 += 1 };
  s1 -> s4 [75, 75] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s5 [75, 75] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [76, 65535] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 74] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 74] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [75, 75] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s5 [75, 75] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s6 [75, 75] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s7 [75, 75] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s1 [76, 65535] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [76, 65535] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 74] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 74] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R15663 += 1, R15618 += 1, R15619 += 1 };
  s3 -> s4 [75, 75] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s5 [75, 75] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [75, 75] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s7 [75, 75] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [76, 65535] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [76, 65535] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R15663 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s9 [0, 65535] { R15663 += 1 };
  s7 -> s5 [0, 65535] { R15663 += 1, R15619 += 1, R15343 += 1, R15344 += 1 };
  s7 -> s7 [0, 65535] { R15663 += 1, R15619 += 1, R15342 += 1, R15343 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R15663 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s2 [0, 74] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s0 -> s3 [0, 65535] { R15665 += 1, R15620 += 1, R15621 += 1 };
  s0 -> s0 [0, 65535] { R15664 += 1, R15665 += 1 };
  s0 -> s4 [75, 75] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s5 [75, 75] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s0 -> s6 [75, 75] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s7 [75, 75] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s0 -> s2 [76, 87] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s0 -> s1 [76, 65535] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s8 [90, 90] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s0 -> s2 [91, 65535] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s1 -> s1 [0, 74] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s2 [0, 74] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s1 -> s4 [75, 75] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s5 [75, 75] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s1 -> s6 [75, 75] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s7 [75, 75] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s1 -> s2 [76, 87] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s1 -> s1 [76, 65535] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s8 [90, 90] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s1 -> s2 [91, 65535] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s2 -> s2 [0, 74] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s2 -> s5 [75, 75] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s2 -> s7 [75, 75] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s2 -> s2 [76, 87] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s2 -> s8 [90, 90] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s2 -> s2 [91, 65535] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s3 -> s1 [0, 74] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s2 [0, 74] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s3 -> s3 [0, 65535] { R15665 += 1, R15620 += 1, R15621 += 1 };
  s3 -> s4 [75, 75] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s5 [75, 75] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s3 -> s6 [75, 75] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s7 [75, 75] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s3 -> s2 [76, 87] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s3 -> s1 [76, 65535] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s8 [90, 90] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s3 -> s2 [91, 65535] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s6 -> s7 [0, 87] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s6 -> s6 [0, 65535] { R15665 += 1, R15621 += 1, R15348 += 1, R15349 += 1 };
  s6 -> s10 [90, 90] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s6 -> s7 [91, 65535] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s7 -> s7 [0, 87] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s7 -> s10 [90, 90] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s7 -> s7 [91, 65535] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s8 -> s8 [0, 74] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s8 -> s8 [0, 65535] { R15665 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [75, 75] { R15665 += 1, R15621 += 1 };
  s8 -> s11 [75, 75] { R15665 += 1, R15621 += 1 };
  s8 -> s8 [76, 87] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s8 -> s8 [76, 65535] { R15665 += 1, R15621 += 1 };
  s8 -> s8 [90, 65535] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 87] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s10 -> s10 [0, 65535] { R15665 += 1, R15621 += 1 };
  s10 -> s12 [0, 65535] { R15665 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [90, 65535] { R15665 += 1, R15621 += 1, R15349 += 1 };
  s11 -> s11 [0, 65535] { R15665 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R15665 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s0 -> s0 [0, 65535] { R15666 += 1, R15667 += 1 };
  s0 -> s2 [0, 65535] { R15667 += 1, R15622 += 1, R15623 += 1 };
  s0 -> s3 [75, 75] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s0 -> s4 [75, 75] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s0 -> s1 [76, 65535] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s1 [0, 74] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s1 [0, 65535] { R15667 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [75, 75] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s4 [75, 75] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s1 [76, 65535] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s1 [0, 74] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s2 [0, 65535] { R15667 += 1, R15622 += 1, R15623 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [75, 75] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s4 [75, 75] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s1 [76, 65535] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s3 -> s3 [0, 65535] { R15667 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R15667 += 1 };
  s4 -> s4 [0, 65535] { R15667 += 1, R15623 += 1, R15352 += 1, R15353 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R15667 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s0 -> s2 [0, 74] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s0 -> s3 [0, 65535] { R15669 += 1, R15624 += 1, R15625 += 1 };
  s0 -> s0 [0, 65535] { R15668 += 1, R15669 += 1 };
  s0 -> s4 [75, 75] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s0 -> s5 [75, 75] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s0 -> s6 [75, 75] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s0 -> s7 [75, 75] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s0 -> s1 [76, 86] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s0 -> s2 [76, 65535] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s0 -> s8 [87, 87] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s0 -> s1 [91, 65535] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s1 -> s1 [0, 74] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s1 -> s4 [75, 75] { R15669 += 1, R15625 += 1 };
  s1 -> s6 [75, 75] { R15669 += 1, R15625 += 1 };
  s1 -> s1 [76, 86] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s1 -> s1 [76, 65535] { R15669 += 1, R15625 += 1 };
  s1 -> s8 [87, 87] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s1 -> s1 [91, 65535] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s2 -> s1 [0, 74] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s2 -> s2 [0, 74] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s2 -> s4 [75, 75] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s2 -> s5 [75, 75] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s2 -> s6 [75, 75] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s2 -> s7 [75, 75] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s2 -> s1 [76, 86] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s2 -> s2 [76, 65535] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s2 -> s8 [87, 87] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s2 -> s1 [91, 65535] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s3 -> s1 [0, 74] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s3 -> s2 [0, 74] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s3 -> s3 [0, 65535] { R15669 += 1, R15624 += 1, R15625 += 1 };
  s3 -> s4 [75, 75] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s3 -> s5 [75, 75] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s3 -> s6 [75, 75] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s3 -> s7 [75, 75] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s3 -> s1 [76, 86] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s3 -> s2 [76, 65535] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s3 -> s8 [87, 87] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s3 -> s1 [91, 65535] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s4 -> s4 [0, 86] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s4 -> s4 [0, 65535] { R15669 += 1, R15625 += 1 };
  s4 -> s11 [87, 87] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s4 -> s4 [91, 65535] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s7 -> s4 [0, 86] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s7 -> s7 [0, 65535] { R15669 += 1, R15625 += 1, R15566 += 1, R15567 += 1 };
  s7 -> s11 [87, 87] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s7 -> s4 [91, 65535] { R15669 += 1, R15625 += 1, R15567 += 1 };
  s8 -> s8 [0, 74] { R15669 += 1, R15625 += 1 };
  s8 -> s8 [0, 65535] { R15669 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [75, 75] { R15669 += 1, R15625 += 1 };
  s8 -> s11 [75, 75] { R15669 += 1, R15625 += 1 };
  s8 -> s8 [76, 65535] { R15669 += 1, R15625 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R15669 += 1 };
  s11 -> s12 [0, 65535] { R15669 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R15669 += 1, R15625 += 1 };
  s12 -> s12 [0, 65535] { R15669 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R15669 && R20 - R15669 = -1 && R21 = R15669 && R22 - R15669 = -1 && R23 = R15669 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15351 + -1*R15349 - R53 = 0 && R52 + R15350 + R15348 = 0 && R15610 = 0 && R15611 = 0 && R15616 = 0 && R15617 = 0 && R15618 = 0 && R15619 = 0 && R15620 = 0 && R15621 = 0 && R15624 = 0 && R15625 = 0 && R15626 = 0 && R15627 = R15669 && R15628 = 0 && R15629 = R15669 && R15630 = 0 && R15631 = R15669 && R15632 = 0 && R15633 = R15669 && R15634 = 0 && R15635 = R15669 && R15636 = 0 && R15637 = R15669 && R15638 = 0 && R15639 = R15669 && R15640 = 0 && R15641 = R15669 && R15642 = 0 && R15643 = R15669 && R15644 = 0 && R15645 = R15669 && R15646 = 0 && R15647 = R15669 && R15648 = 0 && R15649 = R15669 && R15650 = 0 && R15651 = R15669 && R15652 = 0 && R15653 = R15669 && R15654 = 0 && R15655 = R15669 && R15656 = 0 && R15657 = R15669 && R15658 = 0 && R15659 = R15669 && R15660 = 0 && R15661 = R15669 && R15662 = 0 && R15663 = R15669 && R15664 = 0 && R15665 = R15669 && R15666 = 0 && R15667 = R15669 && R15668 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15351 + -1*R15349 - R53 < 1 && 0 < R15669 && (R1 != 0 || R17 = 0 || (R15570 = 0 && R15571 = 0)) && (R1 != 0 || R17 = 0 || (R15572 = 0 && R15573 = 0)) && (R1 != 0 || R17 = 0 || (R15574 = 0 && R15575 = 0)) && (R1 != 0 || R17 = 0 || (R15576 = 0 && R15577 = 0)) && (R1 != 0 || R17 = 0 || (R15578 = 0 && R15579 = 0)) && (R1 != 0 || R17 = 0 || (R15580 = 0 && R15581 = 0)) && (R1 != 0 || R17 = 0 || (R15582 = 0 && R15583 = 0)) && (R1 != 0 || R17 = 0 || (R15584 = 0 && R15585 = 0)) && (R1 != 0 || R17 = 0 || (R15586 = 0 && R15587 = 0)) && (R1 != 0 || R17 = 0 || (R15588 = 0 && R15589 = 0)) && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R15351 + R15349 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R15351 + R15349 < 1))) && (R15570 != 0 || R1 = R15571 || R1 < 1) && (R15572 != 0 || R1 = R15573 || R1 < 1) && (R15574 != 0 || R1 = R15575 || R1 < 1) && (R15576 != 0 || R1 = R15577 || R1 < 1) && (R15578 != 0 || R1 = R15579 || R1 < 1) && (R15580 != 0 || R1 = R15581 || R1 < 1) && (R15582 != 0 || R1 = R15583 || R1 < 1) && (R15584 != 0 || R1 = R15585 || R1 < 1) && (R15586 != 0 || R1 = R15587 || R1 < 1) && (R15588 != 0 || R1 = R15589 || R1 < 1) && (R18 = 0 || (R15608 = 0 && R15609 = 0)) && (R18 = 0 || (R15612 = 0 && R15613 = 0)) && (R18 = 0 || (R15614 = 0 && R15615 = 0)) && (R18 = 0 || (R15622 = 0 && R15623 = 0)) && (R19 = 0 || (R15590 = 0 && R15591 = 0)) && (R19 = 0 || (R15592 = 0 && R15593 = 0)) && (R19 = 0 || (R15594 = 0 && R15595 = 0)) && (R19 = 0 || (R15596 = 0 && R15597 = 0)) && (R19 = 0 || (R15598 = 0 && R15599 = 0)) && (R19 = 0 || (R15600 = 0 && R15601 = 0)) && (R19 = 0 || (R15602 = 0 && R15603 = 0)) && (R19 = 0 || (R15604 = 0 && R15605 = 0)) && (R19 = 0 || (R15606 = 0 && R15607 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0)) && (R58 + R15357 + R15354 = 0 || (R56 + R15355 + R15352 = 0 && R57 + R15356 + R15353 = 0)) && (R58 + R15357 + R15354 = 0 || (R62 + R15568 + R15566 = 0 && R63 + R15569 + R15567 = 0)) && (R15570 = 0 || R1 < 1) && (R15572 = 0 || R1 < 1) && (R15574 = 0 || R1 < 1) && (R15576 = 0 || R1 < 1) && (R15578 = 0 || R1 < 1) && (R15580 = 0 || R1 < 1) && (R15582 = 0 || R1 < 1) && (R15584 = 0 || R1 < 1) && (R15586 = 0 || R1 < 1) && (R15588 = 0 || R1 < 1);
// End of Parikh automata intersection problem
