// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R3900, R3901, R3902, R3903, R3904, R3905, R4, R40, R42, R4218, R4219, R4220, R4221, R4222, R4223, R4224, R4225, R4226, R4227, R4228, R4229, R4230, R4231, R4232, R4233, R4234, R4235, R4236, R4237, R4238, R4239, R4240, R4241, R4242, R4243, R4244, R4245, R4246, R4247, R4248, R4249, R4250, R4251, R4252, R4253, R4254, R4255, R4256, R4257, R4258, R4259, R4260, R4261, R4262, R4263, R4264, R4265, R4266, R4267, R4268, R4269, R4270, R4271, R4272, R4273, R4274, R4275, R4276, R4277, R4278, R4279, R4280, R4281, R4282, R4283, R4284, R4285, R4286, R4287, R4288, R4289, R4290, R4291, R4292, R4293, R4294, R4295, R4296, R4297, R4298, R4299, R43, R4300, R4301, R4302, R4303, R4304, R4305, R4306, R4307, R4308, R4309, R4310, R4311, R4312, R4313, R4314, R4315, R4316, R4317, R4318, R4319, R4320, R4321, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R4243 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R4242 += 1, R4243 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4243 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R4245 += 1 };
  s0 -> s0 [0, 65535] { R4244 += 1, R4245 += 1 };
  s0 -> s2 [75, 75] { R4245 += 1 };
  s0 -> s3 [75, 75] { R4245 += 1 };
  s0 -> s1 [88, 65535] { R4245 += 1 };
  s1 -> s1 [0, 74] { R4245 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4245 += 1 };
  s1 -> s3 [75, 75] { R4245 += 1 };
  s1 -> s1 [88, 65535] { R4245 += 1 };
  s2 -> s2 [0, 75] { R4245 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R4245 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R4247 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R4246 += 1, R4247 += 1 };
  s0 -> s2 [75, 75] { R4247 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R4247 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R4247 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R4247 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4247 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R4247 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R4247 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4247 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R4249 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R4248 += 1, R4249 += 1 };
  s0 -> s2 [75, 75] { R4249 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R4249 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R4249 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R4249 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4249 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R4249 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R4249 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R4249 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R4251 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R4250 += 1, R4251 += 1 };
  s0 -> s2 [75, 75] { R4251 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R4251 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R4251 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R4251 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4251 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R4251 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R4251 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R4251 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R4253 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R4252 += 1, R4253 += 1 };
  s0 -> s2 [75, 75] { R4253 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R4253 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R4253 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R4253 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4253 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R4253 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R4253 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R4253 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R4255 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R4254 += 1, R4255 += 1 };
  s0 -> s2 [75, 75] { R4255 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R4255 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R4255 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R4255 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4255 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R4255 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R4255 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R4255 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R4257 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R4256 += 1, R4257 += 1 };
  s0 -> s2 [75, 75] { R4257 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R4257 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R4257 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R4257 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4257 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R4257 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R4257 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4257 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R4259 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R4258 += 1, R4259 += 1 };
  s0 -> s2 [75, 75] { R4259 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R4259 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R4259 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R4259 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R4259 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R4259 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R4259 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4259 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R4279 += 1 };
  s0 -> s0 [0, 65535] { R4278 += 1, R4279 += 1 };
  s0 -> s2 [75, 75] { R4279 += 1 };
  s0 -> s1 [76, 65535] { R4279 += 1 };
  s1 -> s1 [0, 74] { R4279 += 1 };
  s1 -> s2 [75, 75] { R4279 += 1 };
  s1 -> s1 [76, 65535] { R4279 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4279 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4281 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4280 += 1, R4281 += 1 };
  s1 -> s1 [0, 65535] { R4281 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R4283 += 1 };
  s0 -> s0 [0, 65535] { R4282 += 1, R4283 += 1 };
  s0 -> s2 [0, 65535] { R4283 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R4283 += 1 };
  s0 -> s1 [76, 65535] { R4283 += 1 };
  s1 -> s1 [0, 74] { R4283 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R4283 += 1 };
  s1 -> s1 [76, 65535] { R4283 += 1 };
  s2 -> s1 [0, 74] { R4283 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4283 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R4283 += 1 };
  s2 -> s1 [76, 65535] { R4283 += 1 };
  s3 -> s3 [0, 65535] { R4283 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R4285 += 1, R4223 += 1 };
  s0 -> s0 [0, 65535] { R4284 += 1, R4285 += 1 };
  s0 -> s2 [0, 65535] { R4285 += 1, R4222 += 1, R4223 += 1 };
  s0 -> s1 [76, 65535] { R4285 += 1, R4223 += 1 };
  s1 -> s1 [0, 74] { R4285 += 1, R4223 += 1 };
  s1 -> s1 [0, 65535] { R4285 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R4285 += 1, R4223 += 1 };
  s2 -> s1 [0, 74] { R4285 += 1, R4223 += 1 };
  s2 -> s2 [0, 65535] { R4285 += 1, R4222 += 1, R4223 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R4285 += 1, R4223 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R4287 += 1, R4225 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R4287 += 1, R4224 += 1, R4225 += 1 };
  s0 -> s0 [0, 65535] { R4286 += 1, R4287 += 1 };
  s1 -> s1 [0, 65535] { R4287 += 1, R4225 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R4287 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4287 += 1, R4225 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R4287 += 1, R4224 += 1, R4225 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4287 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R4289 += 1, R4227 += 1 };
  s0 -> s2 [0, 65535] { R4289 += 1, R4226 += 1, R4227 += 1 };
  s0 -> s0 [0, 65535] { R4288 += 1, R4289 += 1 };
  s0 -> s1 [87, 65535] { R4289 += 1, R4227 += 1 };
  s1 -> s1 [0, 75] { R4289 += 1, R4227 += 1 };
  s1 -> s1 [0, 65535] { R4289 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R4289 += 1, R4227 += 1 };
  s2 -> s1 [0, 75] { R4289 += 1, R4227 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4289 += 1, R4226 += 1, R4227 += 1 };
  s2 -> s1 [87, 65535] { R4289 += 1, R4227 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R4290 += 1, R4291 += 1 };
  s0 -> s1 [0, 65535] { R4291 += 1, R4228 += 1, R4229 += 1 };
  s0 -> s2 [0, 65535] { R4291 += 1, R4229 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4291 += 1, R4228 += 1, R4229 += 1 };
  s1 -> s2 [0, 65535] { R4291 += 1, R4229 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R4291 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4291 += 1, R4229 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R4291 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R4293 += 1, R4231 += 1 };
  s0 -> s2 [0, 65535] { R4293 += 1, R4230 += 1, R4231 += 1 };
  s0 -> s0 [0, 65535] { R4292 += 1, R4293 += 1 };
  s0 -> s3 [0, 65535] { R4293 += 1, R4231 += 1, R69 += 1 };
  s0 -> s1 [88, 65535] { R4293 += 1, R4231 += 1 };
  s1 -> s1 [0, 86] { R4293 += 1, R4231 += 1 };
  s1 -> s1 [0, 65535] { R4293 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R4293 += 1, R4231 += 1 };
  s2 -> s1 [0, 86] { R4293 += 1, R4231 += 1 };
  s2 -> s2 [0, 65535] { R4293 += 1, R4230 += 1, R4231 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R4293 += 1, R4231 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R4293 += 1, R4231 += 1 };
  s3 -> s1 [0, 86] { R4293 += 1, R4231 += 1 };
  s3 -> s4 [0, 65535] { R4293 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4293 += 1, R4231 += 1, R69 += 1 };
  s3 -> s1 [88, 65535] { R4293 += 1, R4231 += 1 };
  s4 -> s4 [0, 65535] { R4293 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R4295 += 1, R4233 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R4294 += 1, R4295 += 1 };
  s0 -> s2 [0, 65535] { R4295 += 1, R4232 += 1, R4233 += 1 };
  s0 -> s3 [0, 65535] { R4295 += 1, R4233 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [88, 65535] { R4295 += 1, R4233 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R4295 += 1, R4233 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R4295 += 1, R4233 += 1 };
  s1 -> s4 [0, 65535] { R4295 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R4295 += 1, R4233 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R4295 += 1, R4233 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R4295 += 1, R4232 += 1, R4233 += 1 };
  s2 -> s3 [0, 65535] { R4295 += 1, R4233 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R4295 += 1, R4233 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R4295 += 1, R4233 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R4295 += 1 };
  s3 -> s3 [0, 65535] { R4295 += 1, R4233 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R4295 += 1, R4233 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R4295 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R4297 += 1, R4235 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R4297 += 1, R4234 += 1, R4235 += 1 };
  s0 -> s0 [0, 65535] { R4296 += 1, R4297 += 1 };
  s0 -> s3 [0, 65535] { R4297 += 1, R4235 += 1 };
  s1 -> s4 [0, 65535] { R4297 += 1 };
  s1 -> s1 [0, 65535] { R4297 += 1, R4235 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s3 [0, 65535] { R4297 += 1, R4235 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R4297 += 1, R4235 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s2 [0, 65535] { R4297 += 1, R4234 += 1, R4235 += 1 };
  s2 -> s3 [0, 65535] { R4297 += 1, R4235 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R4297 += 1 };
  s3 -> s3 [0, 65535] { R4297 += 1, R4235 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4297 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R4299 += 1, R4237 += 1, R3899 += 1 };
  s0 -> s1 [0, 65535] { R4299 += 1, R4237 += 1 };
  s0 -> s2 [0, 65535] { R4299 += 1, R4236 += 1, R4237 += 1 };
  s0 -> s0 [0, 65535] { R4298 += 1, R4299 += 1 };
  s0 -> s1 [90, 65535] { R4299 += 1, R4237 += 1, R3899 += 1 };
  s1 -> s1 [0, 87] { R4299 += 1, R4237 += 1, R3899 += 1 };
  s1 -> s1 [0, 65535] { R4299 += 1, R4237 += 1 };
  s1 -> s4 [0, 65535] { R4299 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R4299 += 1, R4237 += 1, R3899 += 1 };
  s2 -> s1 [0, 87] { R4299 += 1, R4237 += 1, R3899 += 1 };
  s2 -> s1 [0, 65535] { R4299 += 1, R4237 += 1 };
  s2 -> s2 [0, 65535] { R4299 += 1, R4236 += 1, R4237 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R4299 += 1, R4237 += 1, R3899 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4299 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R4301 += 1, R4238 += 1, R4239 += 1 };
  s0 -> s0 [0, 65535] { R4300 += 1, R4301 += 1 };
  s0 -> s2 [0, 65535] { R4301 += 1, R4239 += 1, R3904 += 1, R3905 += 1 };
  s0 -> s3 [0, 65535] { R4301 += 1, R4239 += 1, R3903 += 1, R3904 += 1 };
  s1 -> s1 [0, 65535] { R4301 += 1, R4238 += 1, R4239 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4301 += 1, R4239 += 1, R3904 += 1, R3905 += 1 };
  s1 -> s3 [0, 65535] { R4301 += 1, R4239 += 1, R3903 += 1, R3904 += 1 };
  s2 -> s6 [0, 65535] { R4301 += 1, R4239 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4301 += 1, R4239 += 1, R3904 += 1, R3905 += 1 };
  s2 -> s5 [0, 65535] { R4301 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4301 += 1, R4239 += 1, R3904 += 1, R3905 += 1 };
  s3 -> s5 [0, 65535] { R4301 += 1 };
  s3 -> s3 [0, 65535] { R4301 += 1, R4239 += 1, R3903 += 1, R3904 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4301 += 1 };
  s6 -> s6 [0, 65535] { R4301 += 1, R4239 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R4301 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 87] { R4303 += 1, R4241 += 1, R4221 += 1 };
  s0 -> s2 [0, 65535] { R4303 += 1, R4240 += 1, R4241 += 1 };
  s0 -> s0 [0, 65535] { R4302 += 1, R4303 += 1 };
  s0 -> s1 [0, 65535] { R4303 += 1, R4241 += 1 };
  s0 -> s1 [91, 65535] { R4303 += 1, R4241 += 1, R4221 += 1 };
  s1 -> s1 [0, 87] { R4303 += 1, R4241 += 1, R4221 += 1 };
  s1 -> s4 [0, 65535] { R4303 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4303 += 1, R4241 += 1 };
  s1 -> s1 [91, 65535] { R4303 += 1, R4241 += 1, R4221 += 1 };
  s2 -> s1 [0, 87] { R4303 += 1, R4241 += 1, R4221 += 1 };
  s2 -> s2 [0, 65535] { R4303 += 1, R4240 += 1, R4241 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4303 += 1, R4241 += 1 };
  s2 -> s1 [91, 65535] { R4303 += 1, R4241 += 1, R4221 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4303 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R4304 += 1, R4305 += 1 };
  s0 -> s1 [0, 65535] { R4305 += 1, R4260 += 1, R4261 += 1 };
  s0 -> s2 [0, 65535] { R4305 += 1, R4261 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4305 += 1, R4260 += 1, R4261 += 1 };
  s1 -> s2 [0, 65535] { R4305 += 1, R4261 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4305 += 1, R4261 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R4305 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4305 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R4307 += 1, R4263 += 1 };
  s0 -> s0 [0, 65535] { R4306 += 1, R4307 += 1 };
  s0 -> s2 [0, 65535] { R4307 += 1, R4262 += 1, R4263 += 1 };
  s0 -> s3 [75, 75] { R4307 += 1, R4263 += 1 };
  s0 -> s4 [75, 75] { R4307 += 1, R4263 += 1 };
  s0 -> s5 [87, 87] { R4307 += 1, R4263 += 1 };
  s0 -> s1 [88, 65535] { R4307 += 1, R4263 += 1 };
  s1 -> s1 [0, 74] { R4307 += 1, R4263 += 1 };
  s1 -> s3 [75, 75] { R4307 += 1, R4263 += 1 };
  s1 -> s4 [75, 75] { R4307 += 1, R4263 += 1 };
  s1 -> s5 [87, 87] { R4307 += 1, R4263 += 1 };
  s1 -> s1 [88, 65535] { R4307 += 1, R4263 += 1 };
  s2 -> s1 [0, 74] { R4307 += 1, R4263 += 1 };
  s2 -> s2 [0, 65535] { R4307 += 1, R4262 += 1, R4263 += 1 };
  s2 -> s3 [75, 75] { R4307 += 1, R4263 += 1 };
  s2 -> s4 [75, 75] { R4307 += 1, R4263 += 1 };
  s2 -> s5 [87, 87] { R4307 += 1, R4263 += 1 };
  s2 -> s1 [88, 65535] { R4307 += 1, R4263 += 1 };
  s4 -> s4 [0, 75] { R4307 += 1, R4263 += 1 };
  s4 -> s8 [87, 87] { R4307 += 1, R4263 += 1 };
  s4 -> s4 [88, 65535] { R4307 += 1, R4263 += 1 };
  s5 -> s5 [0, 74] { R4307 += 1, R4263 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4307 += 1 };
  s5 -> s7 [75, 75] { R4307 += 1, R4263 += 1 };
  s5 -> s8 [75, 75] { R4307 += 1, R4263 += 1 };
  s5 -> s5 [87, 65535] { R4307 += 1, R4263 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4307 += 1 };
  s8 -> s8 [0, 75] { R4307 += 1, R4263 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4307 += 1 };
  s8 -> s8 [87, 65535] { R4307 += 1, R4263 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R4309 += 1, R4265 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R4308 += 1, R4309 += 1 };
  s0 -> s2 [0, 65535] { R4309 += 1, R4264 += 1, R4265 += 1 };
  s0 -> s3 [75, 75] { R4309 += 1, R4265 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R4309 += 1, R4265 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R4309 += 1, R4265 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R4309 += 1, R4265 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4309 += 1 };
  s1 -> s3 [75, 75] { R4309 += 1, R4265 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R4309 += 1, R4265 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R4309 += 1, R4265 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R4309 += 1, R4265 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4309 += 1, R4264 += 1, R4265 += 1 };
  s2 -> s3 [75, 75] { R4309 += 1, R4265 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R4309 += 1, R4265 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R4309 += 1, R4265 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4309 += 1, R4265 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R4309 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4309 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4309 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R4311 += 1, R4267 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R4311 += 1, R4266 += 1, R4267 += 1 };
  s0 -> s0 [0, 65535] { R4310 += 1, R4311 += 1 };
  s0 -> s3 [75, 75] { R4311 += 1, R4267 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R4311 += 1, R4267 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R4311 += 1, R4267 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R4311 += 1, R4267 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R4311 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [75, 75] { R4311 += 1, R4267 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R4311 += 1, R4267 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R4311 += 1, R4267 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R4311 += 1, R4267 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R4311 += 1, R4266 += 1, R4267 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [75, 75] { R4311 += 1, R4267 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R4311 += 1, R4267 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R4311 += 1, R4267 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R4311 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4311 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4311 += 1, R4267 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R4311 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R4312 += 1, R4313 += 1 };
  s0 -> s2 [0, 65535] { R4313 += 1, R4268 += 1, R4269 += 1 };
  s0 -> s3 [75, 75] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R4313 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [75, 75] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R4313 += 1, R4268 += 1, R4269 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [75, 75] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R4313 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4313 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4313 += 1, R4269 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R4313 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 74] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s0 [0, 65535] { R4314 += 1, R4315 += 1 };
  s0 -> s3 [0, 65535] { R4315 += 1, R4270 += 1, R4271 += 1 };
  s0 -> s4 [75, 75] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [75, 75] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [75, 75] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [75, 75] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [76, 65535] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [76, 65535] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 74] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 65535] { R4315 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [75, 75] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [75, 75] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [76, 65535] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 74] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 74] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [75, 75] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s5 [75, 75] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [75, 75] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s7 [75, 75] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [76, 65535] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [76, 65535] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 74] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 74] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R4315 += 1, R4270 += 1, R4271 += 1 };
  s3 -> s4 [75, 75] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [75, 75] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [75, 75] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [75, 75] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [76, 65535] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [76, 65535] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s4 [0, 65535] { R4315 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4315 += 1, R4271 += 1, R3890 += 1, R3891 += 1 };
  s6 -> s7 [0, 65535] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R4315 += 1 };
  s7 -> s7 [0, 65535] { R4315 += 1, R4271 += 1, R3891 += 1, R3892 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4315 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s0 -> s2 [0, 74] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s0 [0, 65535] { R4316 += 1, R4317 += 1 };
  s0 -> s3 [0, 65535] { R4317 += 1, R4272 += 1, R4273 += 1 };
  s0 -> s4 [75, 75] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s0 -> s5 [75, 75] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s0 -> s6 [75, 75] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s7 [75, 75] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s1 [76, 87] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s0 -> s2 [76, 65535] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s8 [90, 90] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s0 -> s1 [91, 65535] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s1 -> s1 [0, 74] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s1 -> s4 [75, 75] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s1 -> s5 [75, 75] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s1 -> s1 [76, 87] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s1 -> s8 [90, 90] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s1 -> s1 [91, 65535] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s2 -> s1 [0, 74] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s2 -> s2 [0, 74] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s4 [75, 75] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s2 -> s5 [75, 75] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s2 -> s6 [75, 75] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s7 [75, 75] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s1 [76, 87] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s2 -> s2 [76, 65535] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s8 [90, 90] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s2 -> s1 [91, 65535] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s3 -> s1 [0, 74] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s3 -> s2 [0, 74] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s3 [0, 65535] { R4317 += 1, R4272 += 1, R4273 += 1 };
  s3 -> s4 [75, 75] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s3 -> s5 [75, 75] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s3 -> s6 [75, 75] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s7 [75, 75] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s1 [76, 87] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s3 -> s2 [76, 65535] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s8 [90, 90] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s3 -> s1 [91, 65535] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s5 -> s5 [0, 87] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s5 -> s10 [90, 90] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s5 -> s5 [91, 65535] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s6 -> s5 [0, 87] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s6 -> s6 [0, 65535] { R4317 += 1, R4273 += 1, R3896 += 1, R3897 += 1 };
  s6 -> s10 [90, 90] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s6 -> s5 [91, 65535] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s8 -> s8 [0, 74] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s8 -> s8 [0, 65535] { R4317 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [75, 75] { R4317 += 1, R4273 += 1 };
  s8 -> s11 [75, 75] { R4317 += 1, R4273 += 1 };
  s8 -> s8 [76, 87] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s8 -> s8 [76, 65535] { R4317 += 1, R4273 += 1 };
  s8 -> s8 [90, 65535] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 87] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s10 -> s12 [0, 65535] { R4317 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4317 += 1, R4273 += 1 };
  s10 -> s10 [90, 65535] { R4317 += 1, R4273 += 1, R3897 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4317 += 1 };
  s12 -> s12 [0, 65535] { R4317 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s0 -> s0 [0, 65535] { R4318 += 1, R4319 += 1 };
  s0 -> s2 [0, 65535] { R4319 += 1, R4274 += 1, R4275 += 1 };
  s0 -> s3 [75, 75] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s0 -> s4 [75, 75] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s0 -> s1 [76, 65535] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s1 -> s1 [0, 74] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4319 += 1 };
  s1 -> s3 [75, 75] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s1 -> s4 [75, 75] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s1 -> s1 [76, 65535] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s2 -> s1 [0, 74] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s2 -> s2 [0, 65535] { R4319 += 1, R4274 += 1, R4275 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s2 -> s4 [75, 75] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s2 -> s1 [76, 65535] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4319 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4319 += 1, R4275 += 1, R3900 += 1, R3901 += 1 };
  s4 -> s6 [0, 65535] { R4319 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4319 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s0 -> s2 [0, 74] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s0 -> s0 [0, 65535] { R4320 += 1, R4321 += 1 };
  s0 -> s3 [0, 65535] { R4321 += 1, R4276 += 1, R4277 += 1 };
  s0 -> s4 [75, 75] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s0 -> s5 [75, 75] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s0 -> s6 [75, 75] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s0 -> s7 [75, 75] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s0 -> s2 [76, 86] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s0 -> s1 [76, 65535] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s0 -> s8 [87, 87] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s0 -> s2 [91, 65535] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s1 -> s1 [0, 74] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s1 -> s2 [0, 74] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s1 -> s4 [75, 75] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s1 -> s5 [75, 75] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s1 -> s6 [75, 75] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s1 -> s7 [75, 75] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s1 -> s2 [76, 86] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s1 -> s1 [76, 65535] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s1 -> s8 [87, 87] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s1 -> s2 [91, 65535] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s2 -> s2 [0, 74] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s2 -> s5 [75, 75] { R4321 += 1, R4277 += 1 };
  s2 -> s7 [75, 75] { R4321 += 1, R4277 += 1 };
  s2 -> s2 [76, 86] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s2 -> s2 [76, 65535] { R4321 += 1, R4277 += 1 };
  s2 -> s8 [87, 87] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s2 -> s2 [91, 65535] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s3 -> s1 [0, 74] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s3 -> s2 [0, 74] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s3 -> s3 [0, 65535] { R4321 += 1, R4276 += 1, R4277 += 1 };
  s3 -> s4 [75, 75] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s3 -> s5 [75, 75] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s3 -> s6 [75, 75] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s3 -> s7 [75, 75] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s3 -> s2 [76, 86] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s3 -> s1 [76, 65535] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s3 -> s8 [87, 87] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s3 -> s2 [91, 65535] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s5 -> s5 [0, 86] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s5 -> s5 [0, 65535] { R4321 += 1, R4277 += 1 };
  s5 -> s10 [87, 87] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s5 -> s5 [91, 65535] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s6 -> s5 [0, 86] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s6 -> s6 [0, 65535] { R4321 += 1, R4277 += 1, R4218 += 1, R4219 += 1 };
  s6 -> s10 [87, 87] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s6 -> s5 [91, 65535] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s8 -> s8 [0, 74] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s8 -> s8 [0, 65535] { R4321 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [75, 75] { R4321 += 1, R4277 += 1 };
  s8 -> s11 [75, 75] { R4321 += 1, R4277 += 1 };
  s8 -> s8 [76, 87] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s8 -> s8 [76, 65535] { R4321 += 1, R4277 += 1 };
  s8 -> s8 [91, 65535] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 87] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s10 -> s12 [0, 65535] { R4321 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4321 += 1, R4277 += 1 };
  s10 -> s10 [91, 65535] { R4321 += 1, R4277 += 1, R4219 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4321 += 1 };
  s12 -> s12 [0, 65535] { R4321 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R4321 && R20 - R4321 = -1 && R21 = R4321 && R22 - R4321 = -1 && R23 = R4321 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3899 + -1*R3897 - R53 = 0 && R52 + R3898 + R3896 = 0 && R4262 = 0 && R4263 = 0 && R4270 = 0 && R4271 = 0 && R4272 = 0 && R4273 = 0 && R4276 = 0 && R4277 = 0 && R4278 = 0 && R4279 = R4321 && R4280 = 0 && R4281 = R4321 && R4282 = 0 && R4283 = R4321 && R4284 = 0 && R4285 = R4321 && R4286 = 0 && R4287 = R4321 && R4288 = 0 && R4289 = R4321 && R4290 = 0 && R4291 = R4321 && R4292 = 0 && R4293 = R4321 && R4294 = 0 && R4295 = R4321 && R4296 = 0 && R4297 = R4321 && R4298 = 0 && R4299 = R4321 && R4300 = 0 && R4301 = R4321 && R4302 = 0 && R4303 = R4321 && R4304 = 0 && R4305 = R4321 && R4306 = 0 && R4307 = R4321 && R4308 = 0 && R4309 = R4321 && R4310 = 0 && R4311 = R4321 && R4312 = 0 && R4313 = R4321 && R4314 = 0 && R4315 = R4321 && R4316 = 0 && R4317 = R4321 && R4318 = 0 && R4319 = R4321 && R4320 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3899 + -1*R3897 - R53 < 1 && 0 < R4321 && (R1 != 0 || R17 = 0 || (R4222 = 0 && R4223 = 0)) && (R1 != 0 || R17 = 0 || (R4224 = 0 && R4225 = 0)) && (R1 != 0 || R17 = 0 || (R4226 = 0 && R4227 = 0)) && (R1 != 0 || R17 = 0 || (R4228 = 0 && R4229 = 0)) && (R1 != 0 || R17 = 0 || (R4230 = 0 && R4231 = 0)) && (R1 != 0 || R17 = 0 || (R4232 = 0 && R4233 = 0)) && (R1 != 0 || R17 = 0 || (R4234 = 0 && R4235 = 0)) && (R1 != 0 || R17 = 0 || (R4236 = 0 && R4237 = 0)) && (R1 != 0 || R17 = 0 || (R4238 = 0 && R4239 = 0)) && (R1 != 0 || R17 = 0 || (R4240 = 0 && R4241 = 0)) && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R42 + R72 + R70 = 0 || R53 + R3899 + R3897 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R3899 + R3897 < 1))) && (R4222 != 0 || R1 = R4223 || R1 < 1) && (R4224 != 0 || R1 = R4225 || R1 < 1) && (R4226 != 0 || R1 = R4227 || R1 < 1) && (R4228 != 0 || R1 = R4229 || R1 < 1) && (R4230 != 0 || R1 = R4231 || R1 < 1) && (R4232 != 0 || R1 = R4233 || R1 < 1) && (R4234 != 0 || R1 = R4235 || R1 < 1) && (R4236 != 0 || R1 = R4237 || R1 < 1) && (R4238 != 0 || R1 = R4239 || R1 < 1) && (R4240 != 0 || R1 = R4241 || R1 < 1) && (R18 = 0 || (R4260 = 0 && R4261 = 0)) && (R18 = 0 || (R4264 = 0 && R4265 = 0)) && (R18 = 0 || (R4266 = 0 && R4267 = 0)) && (R18 = 0 || (R4268 = 0 && R4269 = 0)) && (R18 = 0 || (R4274 = 0 && R4275 = 0)) && (R19 = 0 || (R4242 = 0 && R4243 = 0)) && (R19 = 0 || (R4244 = 0 && R4245 = 0)) && (R19 = 0 || (R4246 = 0 && R4247 = 0)) && (R19 = 0 || (R4248 = 0 && R4249 = 0)) && (R19 = 0 || (R4250 = 0 && R4251 = 0)) && (R19 = 0 || (R4252 = 0 && R4253 = 0)) && (R19 = 0 || (R4254 = 0 && R4255 = 0)) && (R19 = 0 || (R4256 = 0 && R4257 = 0)) && (R19 = 0 || (R4258 = 0 && R4259 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0)) && (R58 + R3905 + R3902 = 0 || (R56 + R3903 + R3900 = 0 && R57 + R3904 + R3901 = 0)) && (R58 + R3905 + R3902 = 0 || (R62 + R4220 + R4218 = 0 && R63 + R4221 + R4219 = 0)) && (R4222 = 0 || R1 < 1) && (R4224 = 0 || R1 < 1) && (R4226 = 0 || R1 < 1) && (R4228 = 0 || R1 < 1) && (R4230 = 0 || R1 < 1) && (R4232 = 0 || R1 < 1) && (R4234 = 0 || R1 < 1) && (R4236 = 0 || R1 < 1) && (R4238 = 0 || R1 < 1) && (R4240 = 0 || R1 < 1);
// End of Parikh automata intersection problem
