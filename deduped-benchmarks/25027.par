// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10252, R10253, R10254, R10255, R11, R11100, R11101, R11102, R11103, R11104, R11105, R11106, R11107, R11108, R11109, R11110, R11111, R11112, R11113, R11114, R11115, R11116, R11117, R11118, R11119, R11120, R11121, R11122, R11123, R11124, R11125, R11126, R11127, R11128, R11129, R11130, R11131, R11132, R11133, R11134, R11135, R11136, R11137, R11138, R11139, R11140, R11141, R11142, R11143, R11144, R11145, R11146, R11147, R11148, R11149, R11150, R11151, R11152, R11153, R11154, R11155, R11156, R11157, R11158, R11159, R11160, R11161, R11162, R11163, R11164, R11165, R11166, R11167, R11168, R11169, R11170, R11171, R11172, R11173, R11174, R11175, R11176, R11177, R11178, R11179, R11180, R11181, R11182, R11183, R11184, R11185, R11186, R11187, R11188, R11189, R11190, R11191, R11192, R11193, R11194, R11195, R11196, R11197, R11198, R11199, R11200, R11201, R11202, R11203, R11204, R11205, R11206, R11207, R11208, R11209, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R11130 += 1, R11131 += 1 };
  s0 -> s1 [0, 65535] { R11131 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R11131 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R11133 += 1 };
  s0 -> s0 [0, 65535] { R11132 += 1, R11133 += 1 };
  s0 -> s2 [75, 75] { R11133 += 1 };
  s0 -> s3 [75, 75] { R11133 += 1 };
  s0 -> s1 [88, 65535] { R11133 += 1 };
  s1 -> s1 [0, 74] { R11133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R11133 += 1 };
  s1 -> s3 [75, 75] { R11133 += 1 };
  s1 -> s1 [88, 65535] { R11133 += 1 };
  s2 -> s2 [0, 75] { R11133 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R11133 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R11135 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11134 += 1, R11135 += 1 };
  s0 -> s2 [75, 75] { R11135 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R11135 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R11135 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R11135 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R11135 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R11135 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R11135 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11135 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R11137 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11136 += 1, R11137 += 1 };
  s0 -> s2 [75, 75] { R11137 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R11137 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R11137 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R11137 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R11137 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R11137 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R11137 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11137 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R11139 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11138 += 1, R11139 += 1 };
  s0 -> s2 [75, 75] { R11139 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R11139 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R11139 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R11139 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R11139 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R11139 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R11139 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11139 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R11141 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11140 += 1, R11141 += 1 };
  s0 -> s2 [75, 75] { R11141 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R11141 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R11141 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R11141 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R11141 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R11141 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R11141 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11141 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R11143 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11142 += 1, R11143 += 1 };
  s0 -> s2 [75, 75] { R11143 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R11143 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R11143 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R11143 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R11143 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R11143 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R11143 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11143 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R11145 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11144 += 1, R11145 += 1 };
  s0 -> s2 [75, 75] { R11145 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R11145 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R11145 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R11145 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R11145 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R11145 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R11145 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R11145 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R11147 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11146 += 1, R11147 += 1 };
  s0 -> s2 [75, 75] { R11147 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R11147 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R11147 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R11147 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R11147 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R11147 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R11147 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11147 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R11167 += 1 };
  s0 -> s0 [0, 65535] { R11166 += 1, R11167 += 1 };
  s0 -> s2 [75, 75] { R11167 += 1 };
  s0 -> s1 [76, 65535] { R11167 += 1 };
  s1 -> s1 [0, 74] { R11167 += 1 };
  s1 -> s2 [75, 75] { R11167 += 1 };
  s1 -> s1 [76, 65535] { R11167 += 1 };
  s2 -> s2 [0, 65535] { R11167 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R11168 += 1, R11169 += 1 };
  s0 -> s1 [0, 65535] { R11169 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11169 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R11171 += 1 };
  s0 -> s2 [0, 65535] { R11171 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R11170 += 1, R11171 += 1 };
  s0 -> s3 [75, 75] { R11171 += 1 };
  s0 -> s1 [76, 65535] { R11171 += 1 };
  s1 -> s1 [0, 74] { R11171 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R11171 += 1 };
  s1 -> s1 [76, 65535] { R11171 += 1 };
  s2 -> s1 [0, 74] { R11171 += 1 };
  s2 -> s2 [0, 65535] { R11171 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R11171 += 1 };
  s2 -> s1 [76, 65535] { R11171 += 1 };
  s3 -> s3 [0, 65535] { R11171 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R11173 += 1, R11111 += 1 };
  s0 -> s0 [0, 65535] { R11172 += 1, R11173 += 1 };
  s0 -> s2 [0, 65535] { R11173 += 1, R11110 += 1, R11111 += 1 };
  s0 -> s1 [76, 65535] { R11173 += 1, R11111 += 1 };
  s1 -> s1 [0, 74] { R11173 += 1, R11111 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11173 += 1 };
  s1 -> s1 [76, 65535] { R11173 += 1, R11111 += 1 };
  s2 -> s1 [0, 74] { R11173 += 1, R11111 += 1 };
  s2 -> s2 [0, 65535] { R11173 += 1, R11110 += 1, R11111 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R11173 += 1, R11111 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R11174 += 1, R11175 += 1 };
  s0 -> s1 [0, 65535] { R11175 += 1, R11112 += 1, R11113 += 1 };
  s0 -> s2 [0, 65535] { R11175 += 1, R11113 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R11175 += 1, R11112 += 1, R11113 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11175 += 1, R11113 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R11175 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11175 += 1, R11113 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R11175 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R11177 += 1, R11115 += 1 };
  s0 -> s2 [0, 65535] { R11177 += 1, R11114 += 1, R11115 += 1 };
  s0 -> s0 [0, 65535] { R11176 += 1, R11177 += 1 };
  s0 -> s1 [87, 65535] { R11177 += 1, R11115 += 1 };
  s1 -> s1 [0, 75] { R11177 += 1, R11115 += 1 };
  s1 -> s1 [0, 65535] { R11177 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R11177 += 1, R11115 += 1 };
  s2 -> s1 [0, 75] { R11177 += 1, R11115 += 1 };
  s2 -> s2 [0, 65535] { R11177 += 1, R11114 += 1, R11115 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R11177 += 1, R11115 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11179 += 1, R11117 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R11179 += 1, R11116 += 1, R11117 += 1 };
  s0 -> s0 [0, 65535] { R11178 += 1, R11179 += 1 };
  s1 -> s4 [0, 65535] { R11179 += 1 };
  s1 -> s1 [0, 65535] { R11179 += 1, R11117 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11179 += 1, R11117 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11179 += 1, R11116 += 1, R11117 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11179 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R11181 += 1, R11119 += 1 };
  s0 -> s0 [0, 65535] { R11180 += 1, R11181 += 1 };
  s0 -> s2 [0, 65535] { R11181 += 1, R11119 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R11181 += 1, R11118 += 1, R11119 += 1 };
  s0 -> s1 [88, 65535] { R11181 += 1, R11119 += 1 };
  s1 -> s1 [0, 86] { R11181 += 1, R11119 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11181 += 1 };
  s1 -> s1 [88, 65535] { R11181 += 1, R11119 += 1 };
  s2 -> s1 [0, 86] { R11181 += 1, R11119 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11181 += 1, R11119 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R11181 += 1 };
  s2 -> s1 [88, 65535] { R11181 += 1, R11119 += 1 };
  s3 -> s1 [0, 86] { R11181 += 1, R11119 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11181 += 1, R11119 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R11181 += 1, R11118 += 1, R11119 += 1 };
  s3 -> s1 [88, 65535] { R11181 += 1, R11119 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11181 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R11183 += 1, R11121 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R11183 += 1, R11120 += 1, R11121 += 1 };
  s0 -> s0 [0, 65535] { R11182 += 1, R11183 += 1 };
  s0 -> s3 [0, 65535] { R11183 += 1, R11121 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [88, 65535] { R11183 += 1, R11121 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R11183 += 1, R11121 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R11183 += 1, R11121 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11183 += 1 };
  s1 -> s1 [88, 65535] { R11183 += 1, R11121 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R11183 += 1, R11121 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R11183 += 1, R11120 += 1, R11121 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11183 += 1, R11121 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [88, 65535] { R11183 += 1, R11121 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R11183 += 1, R11121 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11183 += 1, R11121 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R11183 += 1 };
  s3 -> s1 [88, 65535] { R11183 += 1, R11121 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11183 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R11185 += 1, R11122 += 1, R11123 += 1 };
  s0 -> s0 [0, 65535] { R11184 += 1, R11185 += 1 };
  s0 -> s2 [0, 65535] { R11185 += 1, R11123 += 1 };
  s1 -> s1 [0, 65535] { R11185 += 1, R11122 += 1, R11123 += 1 };
  s1 -> s2 [0, 65535] { R11185 += 1, R11123 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11185 += 1 };
  s2 -> s2 [0, 65535] { R11185 += 1, R11123 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11185 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s0 -> s2 [0, 65535] { R11187 += 1, R11124 += 1, R11125 += 1 };
  s0 -> s0 [0, 65535] { R11186 += 1, R11187 += 1 };
  s0 -> s3 [90, 90] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s0 -> s1 [91, 65535] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s1 -> s1 [0, 87] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s1 -> s3 [90, 90] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s1 -> s1 [91, 65535] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s2 -> s1 [0, 87] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R11187 += 1, R11124 += 1, R11125 += 1 };
  s2 -> s3 [90, 90] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s2 -> s1 [91, 65535] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s3 -> s3 [0, 87] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s3 -> s3 [0, 65535] { R11187 += 1, R11125 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11187 += 1 };
  s3 -> s3 [90, 65535] { R11187 += 1, R11125 += 1, R10255 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11187 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11189 += 1, R11126 += 1, R11127 += 1 };
  s0 -> s0 [0, 65535] { R11188 += 1, R11189 += 1 };
  s0 -> s2 [0, 65535] { R11189 += 1, R11127 += 1 };
  s1 -> s1 [0, 65535] { R11189 += 1, R11126 += 1, R11127 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11189 += 1, R11127 += 1 };
  s2 -> s3 [0, 65535] { R11189 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11189 += 1, R11127 += 1 };
  s3 -> s3 [0, 65535] { R11189 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s0 -> s2 [0, 65535] { R11191 += 1, R11128 += 1, R11129 += 1 };
  s0 -> s3 [0, 65535] { R11191 += 1, R11129 += 1, R11108 += 1, R11109 += 1 };
  s0 -> s0 [0, 65535] { R11190 += 1, R11191 += 1 };
  s0 -> s4 [87, 87] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s0 -> s5 [87, 87] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s0 -> s1 [91, 65535] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s1 -> s1 [0, 86] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s1 -> s1 [0, 65535] { R11191 += 1, R11129 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R11191 += 1 };
  s1 -> s4 [87, 87] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s1 -> s5 [87, 87] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s1 -> s1 [91, 65535] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s2 -> s1 [0, 86] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11191 += 1, R11128 += 1, R11129 += 1 };
  s2 -> s3 [0, 65535] { R11191 += 1, R11129 += 1, R11108 += 1, R11109 += 1 };
  s2 -> s4 [87, 87] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s2 -> s5 [87, 87] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s2 -> s1 [91, 65535] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s3 -> s1 [0, 86] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11191 += 1, R11129 += 1, R11108 += 1, R11109 += 1 };
  s3 -> s7 [0, 65535] { R11191 += 1 };
  s3 -> s4 [87, 87] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s3 -> s5 [87, 87] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s3 -> s1 [91, 65535] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11191 += 1, R11129 += 1 };
  s4 -> s7 [0, 65535] { R11191 += 1 };
  s5 -> s5 [0, 87] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R11191 += 1 };
  s5 -> s5 [0, 65535] { R11191 += 1, R11129 += 1 };
  s5 -> s5 [91, 65535] { R11191 += 1, R11129 += 1, R11109 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11191 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R11193 += 1, R11148 += 1, R11149 += 1 };
  s0 -> s2 [0, 65535] { R11193 += 1, R11149 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R11192 += 1, R11193 += 1 };
  s1 -> s1 [0, 65535] { R11193 += 1, R11148 += 1, R11149 += 1 };
  s1 -> s2 [0, 65535] { R11193 += 1, R11149 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11193 += 1 };
  s2 -> s2 [0, 65535] { R11193 += 1, R11149 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11193 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R11195 += 1, R11151 += 1 };
  s0 -> s0 [0, 65535] { R11194 += 1, R11195 += 1 };
  s0 -> s2 [0, 65535] { R11195 += 1, R11150 += 1, R11151 += 1 };
  s0 -> s3 [75, 75] { R11195 += 1, R11151 += 1 };
  s0 -> s4 [75, 75] { R11195 += 1, R11151 += 1 };
  s0 -> s5 [87, 87] { R11195 += 1, R11151 += 1 };
  s0 -> s1 [88, 65535] { R11195 += 1, R11151 += 1 };
  s1 -> s1 [0, 74] { R11195 += 1, R11151 += 1 };
  s1 -> s3 [75, 75] { R11195 += 1, R11151 += 1 };
  s1 -> s4 [75, 75] { R11195 += 1, R11151 += 1 };
  s1 -> s5 [87, 87] { R11195 += 1, R11151 += 1 };
  s1 -> s1 [88, 65535] { R11195 += 1, R11151 += 1 };
  s2 -> s1 [0, 74] { R11195 += 1, R11151 += 1 };
  s2 -> s2 [0, 65535] { R11195 += 1, R11150 += 1, R11151 += 1 };
  s2 -> s3 [75, 75] { R11195 += 1, R11151 += 1 };
  s2 -> s4 [75, 75] { R11195 += 1, R11151 += 1 };
  s2 -> s5 [87, 87] { R11195 += 1, R11151 += 1 };
  s2 -> s1 [88, 65535] { R11195 += 1, R11151 += 1 };
  s4 -> s4 [0, 75] { R11195 += 1, R11151 += 1 };
  s4 -> s7 [87, 87] { R11195 += 1, R11151 += 1 };
  s4 -> s4 [88, 65535] { R11195 += 1, R11151 += 1 };
  s5 -> s5 [0, 74] { R11195 += 1, R11151 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11195 += 1 };
  s5 -> s7 [75, 75] { R11195 += 1, R11151 += 1 };
  s5 -> s8 [75, 75] { R11195 += 1, R11151 += 1 };
  s5 -> s5 [87, 65535] { R11195 += 1, R11151 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 75] { R11195 += 1, R11151 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11195 += 1 };
  s7 -> s7 [87, 65535] { R11195 += 1, R11151 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11195 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R11197 += 1, R11153 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R11196 += 1, R11197 += 1 };
  s0 -> s2 [0, 65535] { R11197 += 1, R11152 += 1, R11153 += 1 };
  s0 -> s3 [75, 75] { R11197 += 1, R11153 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R11197 += 1, R11153 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R11197 += 1, R11153 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R11197 += 1, R11153 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11197 += 1 };
  s1 -> s3 [75, 75] { R11197 += 1, R11153 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R11197 += 1, R11153 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R11197 += 1, R11153 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R11197 += 1, R11153 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R11197 += 1, R11152 += 1, R11153 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R11197 += 1, R11153 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R11197 += 1, R11153 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R11197 += 1, R11153 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R11197 += 1, R11153 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11197 += 1 };
  s4 -> s4 [0, 65535] { R11197 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11197 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R11199 += 1, R11155 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R11198 += 1, R11199 += 1 };
  s0 -> s2 [0, 65535] { R11199 += 1, R11154 += 1, R11155 += 1 };
  s0 -> s3 [75, 75] { R11199 += 1, R11155 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R11199 += 1, R11155 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R11199 += 1, R11155 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R11199 += 1, R11155 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R11199 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R11199 += 1, R11155 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R11199 += 1, R11155 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R11199 += 1, R11155 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R11199 += 1, R11155 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11199 += 1, R11154 += 1, R11155 += 1 };
  s2 -> s3 [75, 75] { R11199 += 1, R11155 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R11199 += 1, R11155 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R11199 += 1, R11155 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11199 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11199 += 1, R11155 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R11199 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11199 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R11200 += 1, R11201 += 1 };
  s0 -> s2 [0, 65535] { R11201 += 1, R11156 += 1, R11157 += 1 };
  s0 -> s3 [75, 75] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R11201 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [75, 75] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R11201 += 1, R11156 += 1, R11157 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [75, 75] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R11201 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11201 += 1 };
  s4 -> s4 [0, 65535] { R11201 += 1, R11157 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11201 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 74] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s3 [0, 65535] { R11203 += 1, R11158 += 1, R11159 += 1 };
  s0 -> s0 [0, 65535] { R11202 += 1, R11203 += 1 };
  s0 -> s4 [75, 75] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [75, 75] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [75, 75] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [75, 75] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [76, 65535] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [76, 65535] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 74] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 74] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [75, 75] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [75, 75] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s6 [75, 75] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s7 [75, 75] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [76, 65535] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [76, 65535] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 74] { R11203 += 1, R11159 += 1 };
  s2 -> s2 [0, 74] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s4 [75, 75] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [75, 75] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [75, 75] { R11203 += 1, R11159 += 1 };
  s2 -> s8 [75, 75] { R11203 += 1, R11159 += 1 };
  s2 -> s11 [76, 65535] { R11203 += 1, R11159 += 1 };
  s2 -> s2 [76, 65535] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 74] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 74] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R11203 += 1, R11158 += 1, R11159 += 1 };
  s3 -> s4 [75, 75] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [75, 75] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [75, 75] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [75, 75] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [76, 65535] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [76, 65535] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s5 [0, 65535] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R11203 += 1, R11159 += 1 };
  s7 -> s5 [0, 65535] { R11203 += 1, R11159 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R11203 += 1, R11159 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535] { R11203 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R11203 += 1, R11159 += 1 };
  s9 -> s9 [0, 65535] { R11203 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 74] { R11203 += 1, R11159 += 1 };
  s11 -> s11 [0, 65535] { R11203 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [75, 75] { R11203 += 1, R11159 += 1 };
  s11 -> s8 [75, 75] { R11203 += 1, R11159 += 1 };
  s11 -> s11 [76, 65535] { R11203 += 1, R11159 += 1 };
  s12 -> s12 [0, 65535] { R11203 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s0 -> s2 [0, 74] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s0 [0, 65535] { R11204 += 1, R11205 += 1 };
  s0 -> s3 [0, 65535] { R11205 += 1, R11160 += 1, R11161 += 1 };
  s0 -> s4 [75, 75] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s0 -> s5 [75, 75] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s0 -> s6 [75, 75] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s7 [75, 75] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [76, 87] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s0 -> s2 [76, 65535] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [91, 65535] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s1 -> s1 [0, 74] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s1 -> s1 [0, 65535] { R11205 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [75, 75] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s1 -> s5 [75, 75] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s1 -> s1 [76, 87] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s1 -> s1 [91, 65535] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s2 -> s1 [0, 74] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s2 -> s2 [0, 74] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [75, 75] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s2 -> s5 [75, 75] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s2 -> s6 [75, 75] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s7 [75, 75] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [76, 87] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s2 -> s2 [76, 65535] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [91, 65535] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s3 -> s1 [0, 74] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s3 -> s2 [0, 74] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R11205 += 1, R11160 += 1, R11161 += 1 };
  s3 -> s4 [75, 75] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s3 -> s5 [75, 75] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s3 -> s6 [75, 75] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s7 [75, 75] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s1 [76, 87] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s3 -> s2 [76, 65535] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s1 [91, 65535] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s4 -> s4 [0, 87] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R11205 += 1 };
  s4 -> s4 [91, 65535] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R11205 += 1 };
  s6 -> s4 [0, 87] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s6 -> s6 [0, 65535] { R11205 += 1, R11161 += 1, R10252 += 1, R10253 += 1 };
  s6 -> s4 [91, 65535] { R11205 += 1, R11161 += 1, R10253 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s2 [0, 74] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s3 [0, 65535] { R11207 += 1, R11162 += 1, R11163 += 1 };
  s0 -> s0 [0, 65535] { R11206 += 1, R11207 += 1 };
  s0 -> s4 [75, 75] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s5 [75, 75] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s6 [75, 75] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s7 [75, 75] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s1 [76, 65535] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s2 [76, 65535] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s1 [0, 74] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s1 -> s2 [0, 74] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s4 [75, 75] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s5 [75, 75] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s6 [75, 75] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s1 -> s7 [75, 75] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s1 -> s1 [76, 65535] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s1 -> s2 [76, 65535] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s2 [0, 74] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s11 [0, 74] { R11207 += 1, R11163 += 1 };
  s2 -> s4 [75, 75] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s5 [75, 75] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s8 [75, 75] { R11207 += 1, R11163 += 1 };
  s2 -> s12 [75, 75] { R11207 += 1, R11163 += 1 };
  s2 -> s2 [76, 65535] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s11 [76, 65535] { R11207 += 1, R11163 += 1 };
  s3 -> s1 [0, 74] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s2 [0, 74] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s3 [0, 65535] { R11207 += 1, R11162 += 1, R11163 += 1 };
  s3 -> s4 [75, 75] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s5 [75, 75] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s6 [75, 75] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s7 [75, 75] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s1 [76, 65535] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s2 [76, 65535] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s4 -> s4 [0, 65535] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s4 -> s8 [0, 65535] { R11207 += 1, R11163 += 1 };
  s7 -> s4 [0, 65535] { R11207 += 1, R11163 += 1, R11101 += 1, R11102 += 1 };
  s7 -> s7 [0, 65535] { R11207 += 1, R11163 += 1, R11100 += 1, R11101 += 1 };
  s8 -> s8 [0, 65535] { R11207 += 1, R11163 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R11207 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11207 += 1 };
  s11 -> s11 [0, 74] { R11207 += 1, R11163 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11207 += 1 };
  s11 -> s8 [75, 75] { R11207 += 1, R11163 += 1 };
  s11 -> s12 [75, 75] { R11207 += 1, R11163 += 1 };
  s11 -> s11 [76, 65535] { R11207 += 1, R11163 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11207 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s0 -> s0 [0, 65535] { R11208 += 1, R11209 += 1 };
  s0 -> s2 [0, 65535] { R11209 += 1, R11164 += 1, R11165 += 1 };
  s0 -> s3 [75, 75] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s0 -> s4 [75, 75] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s0 -> s1 [76, 65535] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s1 -> s1 [0, 74] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11209 += 1 };
  s1 -> s3 [75, 75] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s1 -> s4 [75, 75] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s1 -> s1 [76, 65535] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s2 -> s1 [0, 74] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s2 -> s2 [0, 65535] { R11209 += 1, R11164 += 1, R11165 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s2 -> s4 [75, 75] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s2 -> s1 [76, 65535] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11209 += 1 };
  s3 -> s3 [0, 65535] { R11209 += 1, R11165 += 1, R11106 += 1, R11107 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11209 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11209 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R11125 && R2 = R11209 && R20 - R11209 = -1 && R21 = R11209 && R22 - R11209 = -1 && R23 = R11209 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R11124 = 0 && R11150 = 0 && R11151 = 0 && R11158 = 0 && R11159 = 0 && R11160 = 0 && R11161 = 0 && R11162 = 0 && R11163 = 0 && R11166 = 0 && R11167 = R11209 && R11168 = 0 && R11169 = R11209 && R11170 = 0 && R11171 = R11209 && R11172 = 0 && R11173 = R11209 && R11174 = 0 && R11175 = R11209 && R11176 = 0 && R11177 = R11209 && R11178 = 0 && R11179 = R11209 && R11180 = 0 && R11181 = R11209 && R11182 = 0 && R11183 = R11209 && R11184 = 0 && R11185 = R11209 && R11186 = 0 && R11187 = R11209 && R11188 = 0 && R11189 = R11209 && R11190 = 0 && R11191 = R11209 && R11192 = 0 && R11193 = R11209 && R11194 = 0 && R11195 = R11209 && R11196 = 0 && R11197 = R11209 && R11198 = 0 && R11199 = R11209 && R11200 = 0 && R11201 = R11209 && R11202 = 0 && R11203 = R11209 && R11204 = 0 && R11205 = R11209 && R11206 = 0 && R11207 = R11209 && R11208 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && -1 < R11125 && 0 < R11209 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R10255 + R10253 < 1))) && (R11110 != 0 || R11111 = R11125 || (R17 = 0 && R11125 = 0)) && (R11112 != 0 || R11113 = R11125 || (R17 = 0 && R11125 = 0)) && (R11114 != 0 || R11115 = R11125 || (R17 = 0 && R11125 = 0)) && (R11116 != 0 || R11117 = R11125 || (R17 = 0 && R11125 = 0)) && (R11118 != 0 || R11119 = R11125 || (R17 = 0 && R11125 = 0)) && (R11120 != 0 || R11121 = R11125 || (R17 = 0 && R11125 = 0)) && (R11122 != 0 || R11123 = R11125 || (R17 = 0 && R11125 = 0)) && (R11126 != 0 || R11125 = R11127 || (R17 = 0 && R11125 = 0)) && (R11128 != 0 || R11125 = R11129 || (R17 = 0 && R11125 = 0)) && (R18 = 0 || (R11148 = 0 && R11149 = 0)) && (R18 = 0 || (R11152 = 0 && R11153 = 0)) && (R18 = 0 || (R11154 = 0 && R11155 = 0)) && (R18 = 0 || (R11156 = 0 && R11157 = 0)) && (R18 = 0 || (R11164 = 0 && R11165 = 0)) && (R19 = 0 || (R11130 = 0 && R11131 = 0)) && (R19 = 0 || (R11132 = 0 && R11133 = 0)) && (R19 = 0 || (R11134 = 0 && R11135 = 0)) && (R19 = 0 || (R11136 = 0 && R11137 = 0)) && (R19 = 0 || (R11138 = 0 && R11139 = 0)) && (R19 = 0 || (R11140 = 0 && R11141 = 0)) && (R19 = 0 || (R11142 = 0 && R11143 = 0)) && (R19 = 0 || (R11144 = 0 && R11145 = 0)) && (R19 = 0 || (R11146 = 0 && R11147 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R11105 + R11102 = 0 || (R56 + R11103 + R11100 = 0 && R57 + R11104 + R11101 = 0)) && (R58 + R11105 + R11102 = 0 || (R62 + R11108 + R11106 = 0 && R63 + R11109 + R11107 = 0)) && (R11110 = 0 || (R17 = 0 && R11125 = 0)) && (R11112 = 0 || (R17 = 0 && R11125 = 0)) && (R11114 = 0 || (R17 = 0 && R11125 = 0)) && (R11116 = 0 || (R17 = 0 && R11125 = 0)) && (R11118 = 0 || (R17 = 0 && R11125 = 0)) && (R11120 = 0 || (R17 = 0 && R11125 = 0)) && (R11122 = 0 || (R17 = 0 && R11125 = 0)) && (R11126 = 0 || (R17 = 0 && R11125 = 0)) && (R11128 = 0 || (R17 = 0 && R11125 = 0));
// End of Parikh automata intersection problem
