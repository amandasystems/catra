// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R5166, R5167, R5168, R5169, R52, R53, R56, R57, R58, R6014, R6015, R6016, R6017, R6018, R6019, R62, R63, R6332, R6333, R6334, R6335, R6336, R6337, R6338, R6339, R6340, R6341, R6342, R6343, R6344, R6345, R6346, R6347, R6348, R6349, R6350, R6351, R6352, R6353, R6354, R6355, R6356, R6357, R6358, R6359, R6360, R6361, R6362, R6363, R6364, R6365, R6366, R6367, R6368, R6369, R6370, R6371, R6372, R6373, R6374, R6375, R6376, R6377, R6378, R6379, R6380, R6381, R6382, R6383, R6384, R6385, R6386, R6387, R6388, R6389, R6390, R6391, R6392, R6393, R6394, R6395, R6396, R6397, R6398, R6399, R6400, R6401, R6402, R6403, R6404, R6405, R6406, R6407, R6408, R6409, R6410, R6411, R6412, R6413, R6414, R6415, R6416, R6417, R6418, R6419, R6420, R6421, R6422, R6423, R6424, R6425, R6426, R6427, R6428, R6429, R6430, R6431, R6432, R6433, R6434, R6435, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6356 += 1, R6357 += 1 };
  s0 -> s1 [0, 65535] { R6357 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6357 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R6359 += 1 };
  s0 -> s0 [0, 65535] { R6358 += 1, R6359 += 1 };
  s0 -> s2 [75, 75] { R6359 += 1 };
  s0 -> s3 [75, 75] { R6359 += 1 };
  s0 -> s1 [88, 65535] { R6359 += 1 };
  s1 -> s1 [0, 74] { R6359 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6359 += 1 };
  s1 -> s3 [75, 75] { R6359 += 1 };
  s1 -> s1 [88, 65535] { R6359 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 75] { R6359 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R6359 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R6361 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R6360 += 1, R6361 += 1 };
  s0 -> s2 [75, 75] { R6361 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R6361 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R6361 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R6361 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6361 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R6361 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R6361 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6361 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R6363 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R6362 += 1, R6363 += 1 };
  s0 -> s2 [75, 75] { R6363 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R6363 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R6363 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R6363 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6363 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R6363 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R6363 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6363 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R6365 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R6364 += 1, R6365 += 1 };
  s0 -> s2 [75, 75] { R6365 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R6365 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R6365 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R6365 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6365 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R6365 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R6365 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6365 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R6367 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6366 += 1, R6367 += 1 };
  s0 -> s2 [75, 75] { R6367 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R6367 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R6367 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R6367 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6367 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R6367 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R6367 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6367 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R6369 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R6368 += 1, R6369 += 1 };
  s0 -> s2 [75, 75] { R6369 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R6369 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R6369 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R6369 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6369 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R6369 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R6369 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6369 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R6371 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R6370 += 1, R6371 += 1 };
  s0 -> s2 [75, 75] { R6371 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R6371 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R6371 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R6371 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6371 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R6371 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R6371 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6371 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R6373 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R6372 += 1, R6373 += 1 };
  s0 -> s2 [75, 75] { R6373 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R6373 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R6373 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R6373 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6373 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R6373 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R6373 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6373 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R6393 += 1 };
  s0 -> s0 [0, 65535] { R6392 += 1, R6393 += 1 };
  s0 -> s2 [75, 75] { R6393 += 1 };
  s0 -> s1 [76, 65535] { R6393 += 1 };
  s1 -> s1 [0, 74] { R6393 += 1 };
  s1 -> s2 [75, 75] { R6393 += 1 };
  s1 -> s1 [76, 65535] { R6393 += 1 };
  s2 -> s2 [0, 65535] { R6393 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6394 += 1, R6395 += 1 };
  s0 -> s1 [0, 65535] { R6395 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6395 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R6397 += 1 };
  s0 -> s2 [0, 65535] { R6397 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R6396 += 1, R6397 += 1 };
  s0 -> s3 [75, 75] { R6397 += 1 };
  s0 -> s1 [76, 65535] { R6397 += 1 };
  s1 -> s1 [0, 74] { R6397 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R6397 += 1 };
  s1 -> s1 [76, 65535] { R6397 += 1 };
  s2 -> s1 [0, 74] { R6397 += 1 };
  s2 -> s2 [0, 65535] { R6397 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R6397 += 1 };
  s2 -> s1 [76, 65535] { R6397 += 1 };
  s3 -> s3 [0, 65535] { R6397 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R6399 += 1, R6337 += 1 };
  s0 -> s0 [0, 65535] { R6398 += 1, R6399 += 1 };
  s0 -> s2 [0, 65535] { R6399 += 1, R6336 += 1, R6337 += 1 };
  s0 -> s1 [76, 65535] { R6399 += 1, R6337 += 1 };
  s1 -> s1 [0, 74] { R6399 += 1, R6337 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6399 += 1 };
  s1 -> s1 [76, 65535] { R6399 += 1, R6337 += 1 };
  s2 -> s1 [0, 74] { R6399 += 1, R6337 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6399 += 1, R6336 += 1, R6337 += 1 };
  s2 -> s1 [76, 65535] { R6399 += 1, R6337 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6401 += 1, R6339 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R6400 += 1, R6401 += 1 };
  s0 -> s2 [0, 65535] { R6401 += 1, R6338 += 1, R6339 += 1 };
  s1 -> s4 [0, 65535] { R6401 += 1 };
  s1 -> s1 [0, 65535] { R6401 += 1, R6339 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6401 += 1, R6339 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R6401 += 1, R6338 += 1, R6339 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6401 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R6403 += 1, R6341 += 1 };
  s0 -> s0 [0, 65535] { R6402 += 1, R6403 += 1 };
  s0 -> s2 [0, 65535] { R6403 += 1, R6340 += 1, R6341 += 1 };
  s0 -> s1 [87, 65535] { R6403 += 1, R6341 += 1 };
  s1 -> s1 [0, 75] { R6403 += 1, R6341 += 1 };
  s1 -> s1 [0, 65535] { R6403 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R6403 += 1, R6341 += 1 };
  s2 -> s1 [0, 75] { R6403 += 1, R6341 += 1 };
  s2 -> s2 [0, 65535] { R6403 += 1, R6340 += 1, R6341 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R6403 += 1, R6341 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6405 += 1, R6342 += 1, R6343 += 1 };
  s0 -> s2 [0, 65535] { R6405 += 1, R6343 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R6404 += 1, R6405 += 1 };
  s1 -> s1 [0, 65535] { R6405 += 1, R6342 += 1, R6343 += 1 };
  s1 -> s2 [0, 65535] { R6405 += 1, R6343 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6405 += 1, R6343 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6405 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6405 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R6407 += 1, R6345 += 1 };
  s0 -> s2 [0, 65535] { R6407 += 1, R6344 += 1, R6345 += 1 };
  s0 -> s3 [0, 65535] { R6407 += 1, R6345 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R6406 += 1, R6407 += 1 };
  s0 -> s1 [88, 65535] { R6407 += 1, R6345 += 1 };
  s1 -> s1 [0, 86] { R6407 += 1, R6345 += 1 };
  s1 -> s1 [0, 65535] { R6407 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R6407 += 1, R6345 += 1 };
  s2 -> s1 [0, 86] { R6407 += 1, R6345 += 1 };
  s2 -> s2 [0, 65535] { R6407 += 1, R6344 += 1, R6345 += 1 };
  s2 -> s3 [0, 65535] { R6407 += 1, R6345 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R6407 += 1, R6345 += 1 };
  s3 -> s1 [0, 86] { R6407 += 1, R6345 += 1 };
  s3 -> s3 [0, 65535] { R6407 += 1, R6345 += 1, R69 += 1 };
  s3 -> s4 [0, 65535] { R6407 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R6407 += 1, R6345 += 1 };
  s4 -> s4 [0, 65535] { R6407 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R6409 += 1, R6347 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R6408 += 1, R6409 += 1 };
  s0 -> s2 [0, 65535] { R6409 += 1, R6347 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R6409 += 1, R6346 += 1, R6347 += 1 };
  s0 -> s1 [88, 65535] { R6409 += 1, R6347 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R6409 += 1, R6347 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R6409 += 1, R6347 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6409 += 1 };
  s1 -> s1 [88, 65535] { R6409 += 1, R6347 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R6409 += 1, R6347 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R6409 += 1, R6347 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6409 += 1 };
  s2 -> s1 [88, 65535] { R6409 += 1, R6347 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R6409 += 1, R6347 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R6409 += 1, R6347 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6409 += 1, R6346 += 1, R6347 += 1 };
  s3 -> s1 [88, 65535] { R6409 += 1, R6347 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6409 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6411 += 1, R6348 += 1, R6349 += 1 };
  s0 -> s2 [0, 65535] { R6411 += 1, R6349 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s3 [0, 65535] { R6411 += 1, R6349 += 1 };
  s0 -> s0 [0, 65535] { R6410 += 1, R6411 += 1 };
  s1 -> s1 [0, 65535] { R6411 += 1, R6348 += 1, R6349 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R6411 += 1, R6349 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s3 [0, 65535] { R6411 += 1, R6349 += 1 };
  s2 -> s4 [0, 65535] { R6411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6411 += 1, R6349 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s3 [0, 65535] { R6411 += 1, R6349 += 1 };
  s3 -> s4 [0, 65535] { R6411 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6411 += 1, R6349 += 1 };
  s4 -> s4 [0, 65535] { R6411 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s0 -> s2 [0, 65535] { R6413 += 1, R6350 += 1, R6351 += 1 };
  s0 -> s3 [0, 65535] { R6413 += 1, R6351 += 1, R5168 += 1, R5169 += 1 };
  s0 -> s0 [0, 65535] { R6412 += 1, R6413 += 1 };
  s0 -> s4 [90, 90] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s0 -> s1 [91, 65535] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s1 -> s1 [0, 87] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s1 -> s4 [90, 90] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s1 -> s1 [91, 65535] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s2 -> s1 [0, 87] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s2 -> s2 [0, 65535] { R6413 += 1, R6350 += 1, R6351 += 1 };
  s2 -> s3 [0, 65535] { R6413 += 1, R6351 += 1, R5168 += 1, R5169 += 1 };
  s2 -> s4 [90, 90] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s2 -> s1 [91, 65535] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s3 -> s1 [0, 87] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s3 -> s3 [0, 65535] { R6413 += 1, R6351 += 1, R5168 += 1, R5169 += 1 };
  s3 -> s4 [90, 90] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s3 -> s1 [91, 65535] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s4 -> s4 [0, 87] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s4 -> s5 [0, 65535] { R6413 += 1 };
  s4 -> s4 [0, 65535] { R6413 += 1, R6351 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [90, 65535] { R6413 += 1, R6351 += 1, R5169 += 1 };
  s5 -> s5 [0, 65535] { R6413 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R6414 += 1, R6415 += 1 };
  s0 -> s1 [0, 65535] { R6415 += 1, R6353 += 1 };
  s0 -> s2 [0, 65535] { R6415 += 1, R6352 += 1, R6353 += 1 };
  s1 -> s1 [0, 65535] { R6415 += 1, R6353 += 1 };
  s1 -> s4 [0, 65535] { R6415 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6415 += 1, R6353 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6415 += 1, R6352 += 1, R6353 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6415 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 87] { R6417 += 1, R6355 += 1, R6335 += 1 };
  s0 -> s0 [0, 65535] { R6416 += 1, R6417 += 1 };
  s0 -> s2 [0, 65535] { R6417 += 1, R6354 += 1, R6355 += 1 };
  s0 -> s1 [0, 65535] { R6417 += 1, R6355 += 1 };
  s0 -> s1 [91, 65535] { R6417 += 1, R6355 += 1, R6335 += 1 };
  s1 -> s1 [0, 87] { R6417 += 1, R6355 += 1, R6335 += 1 };
  s1 -> s4 [0, 65535] { R6417 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6417 += 1, R6355 += 1 };
  s1 -> s1 [91, 65535] { R6417 += 1, R6355 += 1, R6335 += 1 };
  s2 -> s1 [0, 87] { R6417 += 1, R6355 += 1, R6335 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6417 += 1, R6354 += 1, R6355 += 1 };
  s2 -> s1 [0, 65535] { R6417 += 1, R6355 += 1 };
  s2 -> s1 [91, 65535] { R6417 += 1, R6355 += 1, R6335 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6417 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R6418 += 1, R6419 += 1 };
  s0 -> s1 [0, 65535] { R6419 += 1, R6375 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R6419 += 1, R6374 += 1, R6375 += 1 };
  s1 -> s4 [0, 65535] { R6419 += 1 };
  s1 -> s1 [0, 65535] { R6419 += 1, R6375 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6419 += 1, R6375 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6419 += 1, R6374 += 1, R6375 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6419 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R6421 += 1, R6377 += 1 };
  s0 -> s0 [0, 65535] { R6420 += 1, R6421 += 1 };
  s0 -> s2 [0, 65535] { R6421 += 1, R6376 += 1, R6377 += 1 };
  s0 -> s3 [75, 75] { R6421 += 1, R6377 += 1 };
  s0 -> s4 [75, 75] { R6421 += 1, R6377 += 1 };
  s0 -> s5 [87, 87] { R6421 += 1, R6377 += 1 };
  s0 -> s1 [88, 65535] { R6421 += 1, R6377 += 1 };
  s1 -> s1 [0, 74] { R6421 += 1, R6377 += 1 };
  s1 -> s3 [75, 75] { R6421 += 1, R6377 += 1 };
  s1 -> s4 [75, 75] { R6421 += 1, R6377 += 1 };
  s1 -> s5 [87, 87] { R6421 += 1, R6377 += 1 };
  s1 -> s1 [88, 65535] { R6421 += 1, R6377 += 1 };
  s2 -> s1 [0, 74] { R6421 += 1, R6377 += 1 };
  s2 -> s2 [0, 65535] { R6421 += 1, R6376 += 1, R6377 += 1 };
  s2 -> s3 [75, 75] { R6421 += 1, R6377 += 1 };
  s2 -> s4 [75, 75] { R6421 += 1, R6377 += 1 };
  s2 -> s5 [87, 87] { R6421 += 1, R6377 += 1 };
  s2 -> s1 [88, 65535] { R6421 += 1, R6377 += 1 };
  s4 -> s4 [0, 75] { R6421 += 1, R6377 += 1 };
  s4 -> s7 [87, 87] { R6421 += 1, R6377 += 1 };
  s4 -> s4 [88, 65535] { R6421 += 1, R6377 += 1 };
  s5 -> s5 [0, 74] { R6421 += 1, R6377 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6421 += 1 };
  s5 -> s7 [75, 75] { R6421 += 1, R6377 += 1 };
  s5 -> s8 [75, 75] { R6421 += 1, R6377 += 1 };
  s5 -> s5 [87, 65535] { R6421 += 1, R6377 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 75] { R6421 += 1, R6377 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6421 += 1 };
  s7 -> s7 [87, 65535] { R6421 += 1, R6377 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6421 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R6423 += 1, R6379 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R6422 += 1, R6423 += 1 };
  s0 -> s2 [0, 65535] { R6423 += 1, R6378 += 1, R6379 += 1 };
  s0 -> s3 [75, 75] { R6423 += 1, R6379 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R6423 += 1, R6379 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R6423 += 1, R6379 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R6423 += 1, R6379 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R6423 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [75, 75] { R6423 += 1, R6379 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R6423 += 1, R6379 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R6423 += 1, R6379 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R6423 += 1, R6379 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R6423 += 1, R6378 += 1, R6379 += 1 };
  s2 -> s3 [75, 75] { R6423 += 1, R6379 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R6423 += 1, R6379 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R6423 += 1, R6379 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R6423 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6423 += 1 };
  s4 -> s4 [0, 65535] { R6423 += 1, R6379 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6423 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R6425 += 1, R6381 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R6425 += 1, R6380 += 1, R6381 += 1 };
  s0 -> s0 [0, 65535] { R6424 += 1, R6425 += 1 };
  s0 -> s3 [75, 75] { R6425 += 1, R6381 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R6425 += 1, R6381 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R6425 += 1, R6381 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R6425 += 1, R6381 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6425 += 1 };
  s1 -> s3 [75, 75] { R6425 += 1, R6381 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R6425 += 1, R6381 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R6425 += 1, R6381 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R6425 += 1, R6381 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6425 += 1, R6380 += 1, R6381 += 1 };
  s2 -> s3 [75, 75] { R6425 += 1, R6381 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R6425 += 1, R6381 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R6425 += 1, R6381 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R6425 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6425 += 1 };
  s4 -> s4 [0, 65535] { R6425 += 1, R6381 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6425 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R6427 += 1, R6382 += 1, R6383 += 1 };
  s0 -> s0 [0, 65535] { R6426 += 1, R6427 += 1 };
  s0 -> s3 [75, 75] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6427 += 1 };
  s1 -> s3 [75, 75] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6427 += 1, R6382 += 1, R6383 += 1 };
  s2 -> s3 [75, 75] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R6427 += 1, R6383 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6427 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6427 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6427 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 74] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R6428 += 1, R6429 += 1 };
  s0 -> s3 [0, 65535] { R6429 += 1, R6384 += 1, R6385 += 1 };
  s0 -> s4 [75, 75] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [75, 75] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [75, 75] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [75, 75] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [76, 65535] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [76, 65535] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 74] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 74] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [75, 75] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [75, 75] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [75, 75] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [75, 75] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [76, 65535] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [76, 65535] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 74] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R6429 += 1 };
  s2 -> s5 [75, 75] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [75, 75] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [76, 65535] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 74] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 74] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R6429 += 1, R6384 += 1, R6385 += 1 };
  s3 -> s4 [75, 75] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [75, 75] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [75, 75] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [75, 75] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [76, 65535] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [76, 65535] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s9 [0, 65535] { R6429 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6429 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R6429 += 1, R6385 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s7 [0, 65535] { R6429 += 1, R6385 += 1, R3890 += 1, R3891 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6429 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s2 [0, 65535] { R6431 += 1, R6386 += 1, R6387 += 1 };
  s0 -> s0 [0, 65535] { R6430 += 1, R6431 += 1 };
  s0 -> s3 [75, 75] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s4 [75, 75] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s1 [76, 65535] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [0, 74] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6431 += 1 };
  s1 -> s3 [75, 75] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s4 [75, 75] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [76, 65535] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [0, 74] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R6431 += 1, R6386 += 1, R6387 += 1 };
  s2 -> s3 [75, 75] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s4 [75, 75] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [76, 65535] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6431 += 1 };
  s4 -> s5 [0, 65535] { R6431 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6431 += 1, R6387 += 1, R5166 += 1, R5167 += 1 };
  s5 -> s5 [0, 65535] { R6431 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s2 [0, 74] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s0 [0, 65535] { R6432 += 1, R6433 += 1 };
  s0 -> s3 [0, 65535] { R6433 += 1, R6388 += 1, R6389 += 1 };
  s0 -> s4 [75, 75] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s5 [75, 75] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s6 [75, 75] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s7 [75, 75] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s1 [76, 65535] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s2 [76, 65535] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s1 [0, 74] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s2 [0, 74] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s4 [75, 75] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s5 [75, 75] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s6 [75, 75] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s7 [75, 75] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s1 [76, 65535] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s2 [76, 65535] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s11 [0, 74] { R6433 += 1, R6389 += 1 };
  s2 -> s2 [0, 74] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s5 [75, 75] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s8 [75, 75] { R6433 += 1, R6389 += 1 };
  s2 -> s12 [75, 75] { R6433 += 1, R6389 += 1 };
  s2 -> s7 [75, 75] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s11 [76, 65535] { R6433 += 1, R6389 += 1 };
  s2 -> s2 [76, 65535] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s1 [0, 74] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s2 [0, 74] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s3 [0, 65535] { R6433 += 1, R6388 += 1, R6389 += 1 };
  s3 -> s4 [75, 75] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s5 [75, 75] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s6 [75, 75] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s7 [75, 75] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s1 [76, 65535] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s2 [76, 65535] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s4 -> s4 [0, 65535] { R6433 += 1, R6389 += 1, R6014 += 1, R6015 += 1 };
  s4 -> s7 [0, 65535] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s7 -> s8 [0, 65535] { R6433 += 1, R6389 += 1 };
  s7 -> s7 [0, 65535] { R6433 += 1, R6389 += 1, R6015 += 1, R6016 += 1 };
  s8 -> s8 [0, 65535] { R6433 += 1, R6389 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R6433 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6433 += 1 };
  s11 -> s11 [0, 74] { R6433 += 1, R6389 += 1 };
  s11 -> s11 [0, 65535] { R6433 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [75, 75] { R6433 += 1, R6389 += 1 };
  s11 -> s12 [75, 75] { R6433 += 1, R6389 += 1 };
  s11 -> s11 [76, 65535] { R6433 += 1, R6389 += 1 };
  s12 -> s12 [0, 65535] { R6433 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s0 -> s2 [0, 74] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s0 -> s0 [0, 65535] { R6434 += 1, R6435 += 1 };
  s0 -> s3 [0, 65535] { R6435 += 1, R6390 += 1, R6391 += 1 };
  s0 -> s4 [75, 75] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s0 -> s5 [75, 75] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s0 -> s6 [75, 75] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s0 -> s7 [75, 75] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s0 -> s1 [76, 86] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s0 -> s2 [76, 65535] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s0 -> s8 [87, 87] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s0 -> s1 [91, 65535] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s1 -> s1 [0, 74] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s1 -> s5 [75, 75] { R6435 += 1, R6391 += 1 };
  s1 -> s6 [75, 75] { R6435 += 1, R6391 += 1 };
  s1 -> s1 [76, 86] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s1 -> s1 [76, 65535] { R6435 += 1, R6391 += 1 };
  s1 -> s8 [87, 87] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s1 -> s1 [91, 65535] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s2 -> s1 [0, 74] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s2 -> s2 [0, 74] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s2 -> s4 [75, 75] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s2 -> s5 [75, 75] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s2 -> s6 [75, 75] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s2 -> s7 [75, 75] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s2 -> s1 [76, 86] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s2 -> s2 [76, 65535] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s2 -> s8 [87, 87] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s2 -> s1 [91, 65535] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s3 -> s1 [0, 74] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s3 -> s2 [0, 74] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s3 -> s3 [0, 65535] { R6435 += 1, R6390 += 1, R6391 += 1 };
  s3 -> s4 [75, 75] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s3 -> s5 [75, 75] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s3 -> s6 [75, 75] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s3 -> s7 [75, 75] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s3 -> s1 [76, 86] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s3 -> s2 [76, 65535] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s3 -> s8 [87, 87] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s3 -> s1 [91, 65535] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s5 -> s5 [0, 86] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s5 -> s5 [0, 65535] { R6435 += 1, R6391 += 1 };
  s5 -> s11 [87, 87] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s5 -> s5 [91, 65535] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s7 -> s5 [0, 86] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s7 -> s7 [0, 65535] { R6435 += 1, R6391 += 1, R6332 += 1, R6333 += 1 };
  s7 -> s11 [87, 87] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s7 -> s5 [91, 65535] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s8 -> s8 [0, 74] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s8 -> s8 [0, 65535] { R6435 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [75, 75] { R6435 += 1, R6391 += 1 };
  s8 -> s11 [75, 75] { R6435 += 1, R6391 += 1 };
  s8 -> s8 [76, 87] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s8 -> s8 [76, 65535] { R6435 += 1, R6391 += 1 };
  s8 -> s8 [91, 65535] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6435 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 87] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s11 -> s11 [0, 65535] { R6435 += 1, R6391 += 1 };
  s11 -> s12 [0, 65535] { R6435 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [91, 65535] { R6435 += 1, R6391 += 1, R6333 += 1 };
  s12 -> s12 [0, 65535] { R6435 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R6351 && R2 = R6435 && R20 - R6435 = -1 && R21 = R6435 && R22 - R6435 = -1 && R23 = R6435 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R6350 = 0 && R6376 = 0 && R6377 = 0 && R6384 = 0 && R6385 = 0 && R6388 = 0 && R6389 = 0 && R6390 = 0 && R6391 = 0 && R6392 = 0 && R6393 = R6435 && R6394 = 0 && R6395 = R6435 && R6396 = 0 && R6397 = R6435 && R6398 = 0 && R6399 = R6435 && R6400 = 0 && R6401 = R6435 && R6402 = 0 && R6403 = R6435 && R6404 = 0 && R6405 = R6435 && R6406 = 0 && R6407 = R6435 && R6408 = 0 && R6409 = R6435 && R6410 = 0 && R6411 = R6435 && R6412 = 0 && R6413 = R6435 && R6414 = 0 && R6415 = R6435 && R6416 = 0 && R6417 = R6435 && R6418 = 0 && R6419 = R6435 && R6420 = 0 && R6421 = R6435 && R6422 = 0 && R6423 = R6435 && R6424 = 0 && R6425 = R6435 && R6426 = 0 && R6427 = R6435 && R6428 = 0 && R6429 = R6435 && R6430 = 0 && R6431 = R6435 && R6432 = 0 && R6433 = R6435 && R6434 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && -1 < R6351 && 0 < R6435 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R5169 + R5167 < 1))) && (R6336 != 0 || R6337 = R6351 || (R17 = 0 && R6351 = 0)) && (R6338 != 0 || R6339 = R6351 || (R17 = 0 && R6351 = 0)) && (R6340 != 0 || R6341 = R6351 || (R17 = 0 && R6351 = 0)) && (R6342 != 0 || R6343 = R6351 || (R17 = 0 && R6351 = 0)) && (R6344 != 0 || R6345 = R6351 || (R17 = 0 && R6351 = 0)) && (R6346 != 0 || R6347 = R6351 || (R17 = 0 && R6351 = 0)) && (R6348 != 0 || R6349 = R6351 || (R17 = 0 && R6351 = 0)) && (R6352 != 0 || R6351 = R6353 || (R17 = 0 && R6351 = 0)) && (R6354 != 0 || R6351 = R6355 || (R17 = 0 && R6351 = 0)) && (R18 = 0 || (R6374 = 0 && R6375 = 0)) && (R18 = 0 || (R6378 = 0 && R6379 = 0)) && (R18 = 0 || (R6380 = 0 && R6381 = 0)) && (R18 = 0 || (R6382 = 0 && R6383 = 0)) && (R18 = 0 || (R6386 = 0 && R6387 = 0)) && (R19 = 0 || (R6356 = 0 && R6357 = 0)) && (R19 = 0 || (R6358 = 0 && R6359 = 0)) && (R19 = 0 || (R6360 = 0 && R6361 = 0)) && (R19 = 0 || (R6362 = 0 && R6363 = 0)) && (R19 = 0 || (R6364 = 0 && R6365 = 0)) && (R19 = 0 || (R6366 = 0 && R6367 = 0)) && (R19 = 0 || (R6368 = 0 && R6369 = 0)) && (R19 = 0 || (R6370 = 0 && R6371 = 0)) && (R19 = 0 || (R6372 = 0 && R6373 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R6019 + R6016 = 0 || (R56 + R6017 + R6014 = 0 && R57 + R6018 + R6015 = 0)) && (R58 + R6019 + R6016 = 0 || (R62 + R6334 + R6332 = 0 && R63 + R6335 + R6333 = 0)) && (R6336 = 0 || (R17 = 0 && R6351 = 0)) && (R6338 = 0 || (R17 = 0 && R6351 = 0)) && (R6340 = 0 || (R17 = 0 && R6351 = 0)) && (R6342 = 0 || (R17 = 0 && R6351 = 0)) && (R6344 = 0 || (R17 = 0 && R6351 = 0)) && (R6346 = 0 || (R17 = 0 && R6351 = 0)) && (R6348 = 0 || (R17 = 0 && R6351 = 0)) && (R6352 = 0 || (R17 = 0 && R6351 = 0)) && (R6354 = 0 || (R17 = 0 && R6351 = 0));
// End of Parikh automata intersection problem
