// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11007, R11008, R11009, R11010, R12463, R12464, R12465, R12466, R12467, R12468, R12469, R12470, R12471, R12472, R12473, R12474, R12475, R12476, R12477, R12478, R12479, R12480, R12481, R12482, R12483, R12484, R12485, R12486, R12487, R12488, R12489, R12490, R12491, R12492, R12493, R12494, R12495, R12496, R12497, R12498, R12499, R12500, R12501, R12502, R12503, R12504, R12505, R12506, R12507, R12508, R12509, R12510, R12511, R12512, R12513, R12514, R12515, R12516, R12517, R12518, R12519, R12520, R12521, R12522, R12523, R12524, R12525, R12526, R12527, R12528, R12529, R12530, R12531, R12532, R12533, R12534, R12535, R12536, R12537, R12538, R12539, R12540, R12541, R12542, R12543, R12544, R12545, R12546, R12547, R12548, R12549, R12550, R12551, R12552, R12553, R12554, R12555, R12556, R12557, R12558, R12559, R12560, R12561, R12562, R12563, R12564, R12565, R12566, R12567, R12568, R12569, R12570, R12571, R12572, R12573, R12574, R12575, R12576, R12577, R12578, R12579, R12580, R12581, R12582, R12583, R12584, R12585, R12586, R12587, R12588, R12589, R12590, R12591, R12592, R12593, R12594, R12595, R12596, R12597, R12598, R12599, R12600, R12601, R12602, R12603, R12604, R12605, R12606, R12607, R12608, R12609, R12610, R12611, R12612, R12613, R12614, R12615, R12616, R12617, R12618, R12619, R12620, R12621, R12622, R12623, R12624, R12625, R12626, R12627, R12628, R12629, R12630, R12631, R12632, R12633, R12634, R12635, R12636, R12637, R12638, R12639, R12640, R12641, R12642, R12643, R12644, R12645, R12646, R12647, R12648, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R67, R68, R69, R7, R73, R74, R77, R78, R79, R80, R81, R82, R83, R84, R8819, R8820, R8821, R8822, R8823, R8824;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1 };
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R12574 += 1 };
  s0 -> s0 [0, 65535] { R12573 += 1, R12574 += 1 };
  s0 -> s2 [66, 66] { R12574 += 1 };
  s0 -> s1 [67, 65535] { R12574 += 1 };
  s1 -> s1 [0, 64] { R12574 += 1 };
  s1 -> s2 [66, 66] { R12574 += 1 };
  s1 -> s1 [67, 65535] { R12574 += 1 };
  s2 -> s2 [0, 64] { R12574 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R12574 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R12575 += 1, R12576 += 1 };
  s0 -> s1 [0, 65535] { R12576 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12576 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R12578 += 1 };
  s0 -> s0 [0, 65535] { R12577 += 1, R12578 += 1 };
  s0 -> s2 [0, 65535] { R12578 += 1, R14 += 1 };
  s0 -> s3 [66, 66] { R12578 += 1 };
  s0 -> s1 [67, 65535] { R12578 += 1 };
  s1 -> s1 [0, 65] { R12578 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R12578 += 1 };
  s1 -> s1 [67, 65535] { R12578 += 1 };
  s2 -> s1 [0, 65] { R12578 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12578 += 1, R14 += 1 };
  s2 -> s3 [66, 66] { R12578 += 1 };
  s2 -> s1 [67, 65535] { R12578 += 1 };
  s3 -> s3 [0, 65535] { R12578 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R12580 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R12579 += 1, R12580 += 1 };
  s0 -> s2 [0, 65535] { R12580 += 1, R23 += 1, R24 += 1 };
  s0 -> s3 [9, 13] { R12580 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R12580 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R12580 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R12580 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12580 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R12580 += 1 };
  s2 -> s1 [0, 8] { R12580 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12580 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [9, 13] { R12580 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R12580 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R12580 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R12580 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R12580 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12580 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R12582 += 1, R26 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R12582 += 1, R25 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R12581 += 1, R12582 += 1 };
  s1 -> s1 [0, 65535] { R12582 += 1, R26 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R12582 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12582 += 1, R26 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R12582 += 1, R25 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12582 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R12584 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R12583 += 1, R12584 += 1 };
  s0 -> s2 [0, 65535] { R12584 += 1, R27 += 1, R28 += 1 };
  s0 -> s3 [9, 13] { R12584 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R12584 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R12584 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R12584 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R12584 += 1 };
  s1 -> s1 [0, 65535] { R12584 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R12584 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12584 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [9, 13] { R12584 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R12584 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R12584 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R12584 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R12584 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12584 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R12585 += 1, R12586 += 1 };
  s0 -> s1 [0, 65535] { R12586 += 1, R30 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R12586 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R12586 += 1, R30 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R12586 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12586 += 1, R30 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R12586 += 1, R29 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12586 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R12588 += 1, R12493 += 1, R12494 += 1 };
  s0 -> s0 [0, 65535] { R12587 += 1, R12588 += 1 };
  s0 -> s2 [0, 65535] { R12588 += 1, R12494 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R12588 += 1, R12493 += 1, R12494 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R12588 += 1, R12494 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12588 += 1, R12494 += 1, R22 += 1 };
  s2 -> s4 [0, 65535] { R12588 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12588 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R12590 += 1, R12496 += 1 };
  s0 -> s0 [0, 65535] { R12589 += 1, R12590 += 1 };
  s0 -> s2 [0, 65535] { R12590 += 1, R12495 += 1, R12496 += 1 };
  s0 -> s3 [66, 66] { R12590 += 1, R12496 += 1 };
  s0 -> s4 [66, 66] { R12590 += 1, R12496 += 1 };
  s0 -> s1 [71, 65535] { R12590 += 1, R12496 += 1 };
  s1 -> s1 [0, 65] { R12590 += 1, R12496 += 1 };
  s1 -> s1 [0, 65535] { R12590 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R12590 += 1, R12496 += 1 };
  s1 -> s4 [66, 66] { R12590 += 1, R12496 += 1 };
  s1 -> s1 [71, 65535] { R12590 += 1, R12496 += 1 };
  s2 -> s1 [0, 65] { R12590 += 1, R12496 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12590 += 1, R12495 += 1, R12496 += 1 };
  s2 -> s3 [66, 66] { R12590 += 1, R12496 += 1 };
  s2 -> s4 [66, 66] { R12590 += 1, R12496 += 1 };
  s2 -> s1 [71, 65535] { R12590 += 1, R12496 += 1 };
  s3 -> s3 [0, 66] { R12590 += 1, R12496 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12590 += 1 };
  s3 -> s3 [71, 65535] { R12590 += 1, R12496 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12590 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R12592 += 1, R12498 += 1, R49 += 1 };
  s0 -> s2 [0, 65535] { R12592 += 1, R12497 += 1, R12498 += 1 };
  s0 -> s0 [0, 65535] { R12591 += 1, R12592 += 1 };
  s0 -> s3 [66, 66] { R12592 += 1, R12498 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R12592 += 1, R12498 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R12592 += 1, R12498 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R12592 += 1, R12498 += 1, R49 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12592 += 1 };
  s1 -> s3 [66, 66] { R12592 += 1, R12498 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R12592 += 1, R12498 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R12592 += 1, R12498 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R12592 += 1, R12498 += 1, R49 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12592 += 1, R12497 += 1, R12498 += 1 };
  s2 -> s3 [66, 66] { R12592 += 1, R12498 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R12592 += 1, R12498 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R12592 += 1, R12498 += 1, R49 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12592 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12592 += 1 };
  s4 -> s4 [0, 65535] { R12592 += 1, R12498 += 1, R49 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12592 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R12594 += 1, R12500 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R12593 += 1, R12594 += 1 };
  s0 -> s2 [0, 65535] { R12594 += 1, R12499 += 1, R12500 += 1 };
  s0 -> s3 [66, 66] { R12594 += 1, R12500 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R12594 += 1, R12500 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R12594 += 1, R12500 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R12594 += 1, R12500 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12594 += 1 };
  s1 -> s3 [66, 66] { R12594 += 1, R12500 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R12594 += 1, R12500 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R12594 += 1, R12500 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R12594 += 1, R12500 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12594 += 1, R12499 += 1, R12500 += 1 };
  s2 -> s3 [66, 66] { R12594 += 1, R12500 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R12594 += 1, R12500 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R12594 += 1, R12500 += 1, R51 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12594 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12594 += 1 };
  s4 -> s4 [0, 65535] { R12594 += 1, R12500 += 1, R51 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12594 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R12596 += 1, R12501 += 1, R12502 += 1 };
  s0 -> s0 [0, 65535] { R12595 += 1, R12596 += 1 };
  s0 -> s3 [66, 66] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535] { R12596 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R12596 += 1, R12501 += 1, R12502 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535] { R12596 += 1, R12502 += 1, R53 += 1, R54 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12596 += 1 };
  s4 -> s4 [0, 65535] { R12596 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12596 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R12598 += 1, R12503 += 1, R12504 += 1 };
  s0 -> s0 [0, 65535] { R12597 += 1, R12598 += 1 };
  s0 -> s3 [66, 66] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R12598 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R12598 += 1, R12503 += 1, R12504 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s3 -> s3 [0, 65535] { R12598 += 1, R12504 += 1, R57 += 1, R58 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12598 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12598 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12598 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R12600 += 1, R12505 += 1, R12506 += 1 };
  s0 -> s0 [0, 65535] { R12599 += 1, R12600 += 1 };
  s0 -> s3 [66, 66] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R12600 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R12600 += 1, R12505 += 1, R12506 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R12600 += 1, R12506 += 1, R63 += 1, R64 += 1 };
  s3 -> s6 [0, 65535] { R12600 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12600 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12600 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R12601 += 1, R12602 += 1 };
  s0 -> s2 [0, 65535] { R12602 += 1, R12507 += 1, R12508 += 1 };
  s0 -> s3 [66, 66] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R12602 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12602 += 1, R12507 += 1, R12508 += 1 };
  s2 -> s3 [66, 66] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12602 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12602 += 1 };
  s4 -> s4 [0, 65535] { R12602 += 1, R12508 += 1, R67 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12602 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R12604 += 1, R12509 += 1, R12510 += 1 };
  s0 -> s0 [0, 65535] { R12603 += 1, R12604 += 1 };
  s0 -> s3 [66, 66] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535] { R12604 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R12604 += 1, R12509 += 1, R12510 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535] { R12604 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12604 += 1, R12510 += 1, R73 += 1, R74 += 1 };
  s4 -> s6 [0, 65535] { R12604 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12604 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R12606 += 1, R12530 += 1 };
  s0 -> s0 [0, 65535] { R12605 += 1, R12606 += 1 };
  s0 -> s2 [0, 65535] { R12606 += 1, R12529 += 1, R12530 += 1 };
  s0 -> s3 [66, 66] { R12606 += 1, R12530 += 1 };
  s0 -> s1 [67, 65535] { R12606 += 1, R12530 += 1 };
  s1 -> s1 [0, 65] { R12606 += 1, R12530 += 1 };
  s1 -> s3 [66, 66] { R12606 += 1, R12530 += 1 };
  s1 -> s1 [67, 65535] { R12606 += 1, R12530 += 1 };
  s2 -> s1 [0, 65] { R12606 += 1, R12530 += 1 };
  s2 -> s2 [0, 65535] { R12606 += 1, R12529 += 1, R12530 += 1 };
  s2 -> s3 [66, 66] { R12606 += 1, R12530 += 1 };
  s2 -> s1 [67, 65535] { R12606 += 1, R12530 += 1 };
  s3 -> s4 [0, 65535] { R12606 += 1 };
  s3 -> s3 [0, 65535] { R12606 += 1, R12530 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12606 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R12608 += 1, R12531 += 1, R12532 += 1 };
  s0 -> s2 [0, 65535] { R12608 += 1, R12532 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12607 += 1, R12608 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12608 += 1, R12531 += 1, R12532 += 1 };
  s1 -> s2 [0, 65535] { R12608 += 1, R12532 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12608 += 1, R12532 += 1, R1 += 1 };
  s2 -> s4 [0, 65535] { R12608 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12608 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R12610 += 1, R12534 += 1 };
  s0 -> s2 [0, 65535] { R12610 += 1, R12533 += 1, R12534 += 1 };
  s0 -> s3 [0, 65535] { R12610 += 1, R12534 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R12609 += 1, R12610 += 1 };
  s0 -> s4 [66, 66] { R12610 += 1, R12534 += 1 };
  s0 -> s1 [67, 65535] { R12610 += 1, R12534 += 1 };
  s1 -> s1 [0, 65] { R12610 += 1, R12534 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12610 += 1 };
  s1 -> s4 [66, 66] { R12610 += 1, R12534 += 1 };
  s1 -> s1 [67, 65535] { R12610 += 1, R12534 += 1 };
  s2 -> s1 [0, 65] { R12610 += 1, R12534 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12610 += 1, R12533 += 1, R12534 += 1 };
  s2 -> s3 [0, 65535] { R12610 += 1, R12534 += 1, R11 += 1 };
  s2 -> s4 [66, 66] { R12610 += 1, R12534 += 1 };
  s2 -> s1 [67, 65535] { R12610 += 1, R12534 += 1 };
  s3 -> s1 [0, 65] { R12610 += 1, R12534 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12610 += 1, R12534 += 1, R11 += 1 };
  s3 -> s6 [0, 65535] { R12610 += 1 };
  s3 -> s4 [66, 66] { R12610 += 1, R12534 += 1 };
  s3 -> s1 [67, 65535] { R12610 += 1, R12534 += 1 };
  s4 -> s4 [0, 65535] { R12610 += 1, R12534 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12610 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R12612 += 1, R12536 += 1, R12474 += 1 };
  s0 -> s2 [0, 65535] { R12612 += 1, R12536 += 1, R12473 += 1, R12474 += 1 };
  s0 -> s3 [0, 65535] { R12612 += 1, R12535 += 1, R12536 += 1 };
  s0 -> s0 [0, 65535] { R12611 += 1, R12612 += 1 };
  s0 -> s1 [67, 65535] { R12612 += 1, R12536 += 1, R12474 += 1 };
  s1 -> s1 [0, 65] { R12612 += 1, R12536 += 1, R12474 += 1 };
  s1 -> s5 [0, 65535] { R12612 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12612 += 1, R12536 += 1 };
  s1 -> s1 [67, 65535] { R12612 += 1, R12536 += 1, R12474 += 1 };
  s2 -> s1 [0, 65] { R12612 += 1, R12536 += 1, R12474 += 1 };
  s2 -> s5 [0, 65535] { R12612 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12612 += 1, R12536 += 1, R12473 += 1, R12474 += 1 };
  s2 -> s1 [67, 65535] { R12612 += 1, R12536 += 1, R12474 += 1 };
  s3 -> s1 [0, 65] { R12612 += 1, R12536 += 1, R12474 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12612 += 1, R12536 += 1, R12473 += 1, R12474 += 1 };
  s3 -> s3 [0, 65535] { R12612 += 1, R12535 += 1, R12536 += 1 };
  s3 -> s1 [67, 65535] { R12612 += 1, R12536 += 1, R12474 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12612 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R12613 += 1, R12614 += 1 };
  s0 -> s1 [0, 65535] { R12614 += 1, R12538 += 1, R12476 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R12614 += 1, R12537 += 1, R12538 += 1 };
  s0 -> s3 [0, 65535] { R12614 += 1, R12538 += 1, R12475 += 1, R12476 += 1 };
  s1 -> s4 [0, 65535] { R12614 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12614 += 1, R12538 += 1, R12476 += 1, R20 += 1 };
  s1 -> s6 [0, 65535] { R12614 += 1, R12538 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R12614 += 1, R12538 += 1, R12476 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R12614 += 1, R12537 += 1, R12538 += 1 };
  s2 -> s3 [0, 65535] { R12614 += 1, R12538 += 1, R12475 += 1, R12476 += 1 };
  s3 -> s4 [0, 65535] { R12614 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R12614 += 1, R12538 += 1, R12476 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R12614 += 1, R12538 += 1, R12475 += 1, R12476 += 1 };
  s4 -> s4 [0, 65535] { R12614 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R12614 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12614 += 1, R12538 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R12616 += 1, R12540 += 1, R12478 += 1 };
  s0 -> s0 [0, 65535] { R12615 += 1, R12616 += 1 };
  s0 -> s2 [0, 65535] { R12616 += 1, R12539 += 1, R12540 += 1 };
  s0 -> s3 [0, 65535] { R12616 += 1, R12540 += 1, R12477 += 1, R12478 += 1 };
  s0 -> s1 [70, 65535] { R12616 += 1, R12540 += 1, R12478 += 1 };
  s1 -> s1 [0, 66] { R12616 += 1, R12540 += 1, R12478 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12616 += 1 };
  s1 -> s1 [0, 65535] { R12616 += 1, R12540 += 1 };
  s1 -> s1 [70, 65535] { R12616 += 1, R12540 += 1, R12478 += 1 };
  s2 -> s1 [0, 66] { R12616 += 1, R12540 += 1, R12478 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12616 += 1, R12539 += 1, R12540 += 1 };
  s2 -> s3 [0, 65535] { R12616 += 1, R12540 += 1, R12477 += 1, R12478 += 1 };
  s2 -> s1 [70, 65535] { R12616 += 1, R12540 += 1, R12478 += 1 };
  s3 -> s1 [0, 66] { R12616 += 1, R12540 += 1, R12478 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12616 += 1 };
  s3 -> s3 [0, 65535] { R12616 += 1, R12540 += 1, R12477 += 1, R12478 += 1 };
  s3 -> s1 [70, 65535] { R12616 += 1, R12540 += 1, R12478 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12616 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R12618 += 1, R12542 += 1, R12479 += 1, R12480 += 1 };
  s0 -> s2 [0, 65535] { R12618 += 1, R12542 += 1, R12480 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R12617 += 1, R12618 += 1 };
  s0 -> s3 [0, 65535] { R12618 += 1, R12541 += 1, R12542 += 1 };
  s1 -> s1 [0, 65535] { R12618 += 1, R12542 += 1, R12479 += 1, R12480 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12618 += 1, R12542 += 1, R12480 += 1, R78 += 1 };
  s1 -> s6 [0, 65535] { R12618 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R12618 += 1, R12542 += 1 };
  s2 -> s2 [0, 65535] { R12618 += 1, R12542 += 1, R12480 += 1, R78 += 1 };
  s2 -> s6 [0, 65535] { R12618 += 1 };
  s3 -> s1 [0, 65535] { R12618 += 1, R12542 += 1, R12479 += 1, R12480 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12618 += 1, R12542 += 1, R12480 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R12618 += 1, R12541 += 1, R12542 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12618 += 1, R12542 += 1 };
  s5 -> s6 [0, 65535] { R12618 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R12618 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s0 -> s2 [0, 65535] { R12620 += 1, R12543 += 1, R12544 += 1 };
  s0 -> s0 [0, 65535] { R12619 += 1, R12620 += 1 };
  s0 -> s3 [0, 65535] { R12620 += 1, R12544 += 1, R12482 += 1, R80 += 1 };
  s0 -> s4 [0, 65535] { R12620 += 1, R12544 += 1, R12481 += 1, R12482 += 1 };
  s0 -> s1 [71, 65535] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s1 -> s1 [0, 69] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s1 -> s5 [0, 65535] { R12620 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12620 += 1, R12544 += 1 };
  s1 -> s1 [71, 65535] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s2 -> s1 [0, 69] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s2 -> s2 [0, 65535] { R12620 += 1, R12543 += 1, R12544 += 1 };
  s2 -> s3 [0, 65535] { R12620 += 1, R12544 += 1, R12482 += 1, R80 += 1 };
  s2 -> s4 [0, 65535] { R12620 += 1, R12544 += 1, R12481 += 1, R12482 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [71, 65535] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s3 -> s1 [0, 69] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s3 -> s7 [0, 65535] { R12620 += 1, R12544 += 1 };
  s3 -> s5 [0, 65535] { R12620 += 1 };
  s3 -> s3 [0, 65535] { R12620 += 1, R12544 += 1, R12482 += 1, R80 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [71, 65535] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s4 -> s1 [0, 69] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s4 -> s5 [0, 65535] { R12620 += 1 };
  s4 -> s3 [0, 65535] { R12620 += 1, R12544 += 1, R12482 += 1, R80 += 1 };
  s4 -> s4 [0, 65535] { R12620 += 1, R12544 += 1, R12481 += 1, R12482 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [71, 65535] { R12620 += 1, R12544 += 1, R12482 += 1 };
  s5 -> s5 [0, 65535] { R12620 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12620 += 1, R12544 += 1 };
  s7 -> s5 [0, 65535] { R12620 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R12622 += 1, R12545 += 1, R12546 += 1 };
  s0 -> s3 [0, 65535] { R12622 += 1, R12546 += 1, R12484 += 1, R83 += 1, R84 += 1 };
  s0 -> s4 [0, 65535] { R12622 += 1, R12546 += 1, R12483 += 1, R12484 += 1 };
  s0 -> s0 [0, 65535] { R12621 += 1, R12622 += 1 };
  s0 -> s1 [71, 65535] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R12622 += 1 };
  s1 -> s1 [0, 65535] { R12622 += 1, R12546 += 1, R12484 += 1 };
  s1 -> s7 [0, 65535] { R12622 += 1, R12546 += 1 };
  s1 -> s1 [71, 65535] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12622 += 1, R12545 += 1, R12546 += 1 };
  s2 -> s3 [0, 65535] { R12622 += 1, R12546 += 1, R12484 += 1, R83 += 1, R84 += 1 };
  s2 -> s4 [0, 65535] { R12622 += 1, R12546 += 1, R12483 += 1, R12484 += 1 };
  s2 -> s1 [71, 65535] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12622 += 1, R12546 += 1, R12484 += 1, R83 += 1, R84 += 1 };
  s3 -> s6 [0, 65535] { R12622 += 1 };
  s3 -> s7 [0, 65535] { R12622 += 1, R12546 += 1 };
  s3 -> s1 [71, 65535] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R12622 += 1, R12546 += 1, R12484 += 1, R83 += 1, R84 += 1 };
  s4 -> s6 [0, 65535] { R12622 += 1 };
  s4 -> s4 [0, 65535] { R12622 += 1, R12546 += 1, R12483 += 1, R12484 += 1 };
  s4 -> s1 [71, 65535] { R12622 += 1, R12546 += 1, R12484 += 1, R84 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12622 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R12622 += 1 };
  s7 -> s7 [0, 65535] { R12622 += 1, R12546 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R12624 += 1, R12548 += 1, R12485 += 1, R12486 += 1 };
  s0 -> s2 [0, 65535] { R12624 += 1, R12548 += 1, R12486 += 1 };
  s0 -> s3 [0, 65535] { R12624 += 1, R12548 += 1, R12486 += 1, R8823 += 1, R8824 += 1 };
  s0 -> s0 [0, 65535] { R12623 += 1, R12624 += 1 };
  s0 -> s4 [0, 65535] { R12624 += 1, R12547 += 1, R12548 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12624 += 1, R12548 += 1, R12485 += 1, R12486 += 1 };
  s1 -> s2 [0, 65535] { R12624 += 1, R12548 += 1, R12486 += 1 };
  s1 -> s6 [0, 65535] { R12624 += 1 };
  s1 -> s3 [0, 65535] { R12624 += 1, R12548 += 1, R12486 += 1, R8823 += 1, R8824 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12624 += 1, R12548 += 1, R12486 += 1 };
  s2 -> s6 [0, 65535] { R12624 += 1 };
  s2 -> s7 [0, 65535] { R12624 += 1, R12548 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R12624 += 1, R12548 += 1, R12486 += 1 };
  s3 -> s6 [0, 65535] { R12624 += 1 };
  s3 -> s7 [0, 65535] { R12624 += 1, R12548 += 1 };
  s3 -> s3 [0, 65535] { R12624 += 1, R12548 += 1, R12486 += 1, R8823 += 1, R8824 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R12624 += 1, R12548 += 1, R12485 += 1, R12486 += 1 };
  s4 -> s2 [0, 65535] { R12624 += 1, R12548 += 1, R12486 += 1 };
  s4 -> s3 [0, 65535] { R12624 += 1, R12548 += 1, R12486 += 1, R8823 += 1, R8824 += 1 };
  s4 -> s4 [0, 65535] { R12624 += 1, R12547 += 1, R12548 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12624 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R12624 += 1 };
  s7 -> s7 [0, 65535] { R12624 += 1, R12548 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65535] { R12626 += 1, R12550 += 1, R12487 += 1, R12488 += 1 };
  s0 -> s2 [0, 65535] { R12626 += 1, R12549 += 1, R12550 += 1 };
  s0 -> s0 [0, 65535] { R12625 += 1, R12626 += 1 };
  s0 -> s3 [0, 65535] { R12626 += 1, R12550 += 1, R12488 += 1 };
  s1 -> s1 [0, 65535] { R12626 += 1, R12550 += 1, R12487 += 1, R12488 += 1 };
  s1 -> s4 [0, 65535] { R12626 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R12626 += 1, R12550 += 1, R12488 += 1 };
  s2 -> s1 [0, 65535] { R12626 += 1, R12550 += 1, R12487 += 1, R12488 += 1 };
  s2 -> s2 [0, 65535] { R12626 += 1, R12549 += 1, R12550 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R12626 += 1, R12550 += 1, R12488 += 1 };
  s3 -> s4 [0, 65535] { R12626 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12626 += 1, R12550 += 1, R12488 += 1 };
  s3 -> s6 [0, 65535] { R12626 += 1, R12550 += 1 };
  s4 -> s4 [0, 65535] { R12626 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R12626 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12626 += 1, R12550 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s0 [0, 65535] { R12627 += 1, R12628 += 1 };
  s0 -> s1 [0, 65535] { R12628 += 1, R12551 += 1, R12552 += 1 };
  s0 -> s2 [0, 65535] { R12628 += 1, R12552 += 1, R12490 += 1 };
  s0 -> s3 [0, 65535] { R12628 += 1, R12552 += 1, R12489 += 1, R12490 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12628 += 1, R12551 += 1, R12552 += 1 };
  s1 -> s2 [0, 65535] { R12628 += 1, R12552 += 1, R12490 += 1 };
  s1 -> s3 [0, 65535] { R12628 += 1, R12552 += 1, R12489 += 1, R12490 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R12628 += 1 };
  s2 -> s2 [0, 65535] { R12628 += 1, R12552 += 1, R12490 += 1 };
  s2 -> s6 [0, 65535] { R12628 += 1, R12552 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12628 += 1 };
  s3 -> s2 [0, 65535] { R12628 += 1, R12552 += 1, R12490 += 1 };
  s3 -> s3 [0, 65535] { R12628 += 1, R12552 += 1, R12489 += 1, R12490 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12628 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R12628 += 1 };
  s6 -> s6 [0, 65535] { R12628 += 1, R12552 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s0 -> s2 [0, 65535] { R12630 += 1, R12554 += 1, R12491 += 1, R12492 += 1 };
  s0 -> s0 [0, 65535] { R12629 += 1, R12630 += 1 };
  s0 -> s3 [0, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12471 += 1, R12472 += 1 };
  s0 -> s4 [0, 65535] { R12630 += 1, R12553 += 1, R12554 += 1 };
  s0 -> s5 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s0 -> s6 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s0 -> s1 [72, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s1 -> s1 [0, 69] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s1 -> s7 [0, 65535] { R12630 += 1, R12554 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s9 [0, 65535] { R12630 += 1 };
  s1 -> s1 [0, 65535] { R12630 += 1, R12554 += 1, R12492 += 1 };
  s1 -> s5 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s1 -> s6 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s1 -> s1 [72, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s2 -> s1 [0, 69] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s2 -> s2 [0, 65535] { R12630 += 1, R12554 += 1, R12491 += 1, R12492 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s9 [0, 65535] { R12630 += 1 };
  s2 -> s3 [0, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12471 += 1, R12472 += 1 };
  s2 -> s5 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s2 -> s6 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s2 -> s1 [72, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s3 -> s1 [0, 69] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s3 -> s7 [0, 65535] { R12630 += 1, R12554 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s9 [0, 65535] { R12630 += 1 };
  s3 -> s3 [0, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12471 += 1, R12472 += 1 };
  s3 -> s5 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s3 -> s6 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s3 -> s1 [72, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s4 -> s1 [0, 69] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s4 -> s2 [0, 65535] { R12630 += 1, R12554 += 1, R12491 += 1, R12492 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s3 [0, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12471 += 1, R12472 += 1 };
  s4 -> s4 [0, 65535] { R12630 += 1, R12553 += 1, R12554 += 1 };
  s4 -> s5 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s4 -> s6 [70, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s4 -> s1 [72, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s5 -> s5 [0, 70] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s5 -> s7 [0, 65535] { R12630 += 1, R12554 += 1 };
  s5 -> s5 [0, 65535] { R12630 += 1, R12554 += 1, R12492 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R12630 += 1 };
  s5 -> s5 [72, 65535] { R12630 += 1, R12554 += 1, R12492 += 1, R12472 += 1 };
  s6 -> s7 [0, 65535] { R12630 += 1, R12554 += 1 };
  s6 -> s6 [0, 65535] { R12630 += 1, R12554 += 1, R12492 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R12630 += 1 };
  s7 -> s7 [0, 65535] { R12630 += 1, R12554 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R12630 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12630 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 65535] { R12632 += 1, R12555 += 1, R12556 += 1 };
  s0 -> s2 [0, 65535] { R12632 += 1, R12556 += 1, R12511 += 1, R12512 += 1 };
  s0 -> s3 [0, 65535] { R12632 += 1, R12556 += 1, R12512 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R12631 += 1, R12632 += 1 };
  s1 -> s1 [0, 65535] { R12632 += 1, R12555 += 1, R12556 += 1 };
  s1 -> s2 [0, 65535] { R12632 += 1, R12556 += 1, R12511 += 1, R12512 += 1 };
  s1 -> s3 [0, 65535] { R12632 += 1, R12556 += 1, R12512 += 1, R21 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R12632 += 1, R12556 += 1, R12512 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R12632 += 1, R12556 += 1, R12511 += 1, R12512 += 1 };
  s2 -> s5 [0, 65535] { R12632 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R12632 += 1, R12556 += 1, R12512 += 1, R21 += 1 };
  s3 -> s4 [0, 65535] { R12632 += 1, R12556 += 1 };
  s3 -> s5 [0, 65535] { R12632 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12632 += 1, R12556 += 1 };
  s4 -> s5 [0, 65535] { R12632 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12632 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s0 -> s0 [0, 65535] { R12633 += 1, R12634 += 1 };
  s0 -> s2 [0, 65535] { R12634 += 1, R12558 += 1, R12513 += 1, R12514 += 1 };
  s0 -> s3 [0, 65535] { R12634 += 1, R12557 += 1, R12558 += 1 };
  s0 -> s4 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s0 -> s5 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s0 -> s6 [70, 70] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s0 -> s1 [71, 65535] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s1 -> s1 [0, 65] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s1 -> s4 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s1 -> s5 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s1 -> s6 [70, 70] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s1 -> s1 [71, 65535] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s2 -> s1 [0, 65] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s2 -> s2 [0, 65535] { R12634 += 1, R12558 += 1, R12513 += 1, R12514 += 1 };
  s2 -> s4 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s2 -> s5 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s2 -> s6 [70, 70] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s2 -> s1 [71, 65535] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s3 -> s1 [0, 65] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s3 -> s2 [0, 65535] { R12634 += 1, R12558 += 1, R12513 += 1, R12514 += 1 };
  s3 -> s3 [0, 65535] { R12634 += 1, R12557 += 1, R12558 += 1 };
  s3 -> s4 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s3 -> s5 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s3 -> s6 [70, 70] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s3 -> s1 [71, 65535] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s4 -> s4 [0, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s4 -> s9 [70, 70] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s4 -> s4 [71, 65535] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s6 -> s6 [0, 65] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s6 -> s7 [0, 65535] { R12634 += 1 };
  s6 -> s6 [0, 65535] { R12634 += 1, R12558 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s6 -> s10 [66, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s6 -> s6 [70, 65535] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s7 -> s7 [0, 65535] { R12634 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 66] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s9 -> s7 [0, 65535] { R12634 += 1 };
  s9 -> s9 [0, 65535] { R12634 += 1, R12558 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [70, 65535] { R12634 += 1, R12558 += 1, R12514 += 1 };
  s10 -> s7 [0, 65535] { R12634 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [0, 65535] { R12634 += 1, R12558 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R12636 += 1, R12560 += 1, R12515 += 1, R12516 += 1 };
  s0 -> s0 [0, 65535] { R12635 += 1, R12636 += 1 };
  s0 -> s3 [0, 65535] { R12636 += 1, R12559 += 1, R12560 += 1 };
  s0 -> s4 [66, 66] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s1 -> s6 [0, 65535] { R12636 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R12636 += 1, R12560 += 1 };
  s1 -> s4 [66, 66] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R12636 += 1, R12560 += 1, R12515 += 1, R12516 += 1 };
  s2 -> s6 [0, 65535] { R12636 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s3 -> s2 [0, 65535] { R12636 += 1, R12560 += 1, R12515 += 1, R12516 += 1 };
  s3 -> s3 [0, 65535] { R12636 += 1, R12559 += 1, R12560 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s4 -> s6 [0, 65535] { R12636 += 1 };
  s4 -> s4 [0, 65535] { R12636 += 1, R12560 += 1, R12516 += 1, R77 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R12636 += 1, R12560 += 1 };
  s5 -> s6 [0, 65535] { R12636 += 1 };
  s5 -> s5 [0, 65535] { R12636 += 1, R12560 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R12636 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R12636 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R12636 += 1, R12560 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R12638 += 1, R12561 += 1, R12562 += 1 };
  s0 -> s0 [0, 65535] { R12637 += 1, R12638 += 1 };
  s0 -> s3 [0, 65535] { R12638 += 1, R12562 += 1, R12517 += 1, R12518 += 1 };
  s0 -> s4 [66, 66] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s1 -> s6 [0, 65535] { R12638 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R12638 += 1, R12562 += 1 };
  s1 -> s4 [66, 66] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R12638 += 1, R12561 += 1, R12562 += 1 };
  s2 -> s3 [0, 65535] { R12638 += 1, R12562 += 1, R12517 += 1, R12518 += 1 };
  s2 -> s4 [66, 66] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s3 -> s6 [0, 65535] { R12638 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R12638 += 1, R12562 += 1, R12517 += 1, R12518 += 1 };
  s3 -> s4 [66, 66] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s4 -> s6 [0, 65535] { R12638 += 1 };
  s4 -> s4 [0, 65535] { R12638 += 1, R12562 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R12638 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R12638 += 1, R12562 += 1, R12518 += 1, R79 += 1 };
  s5 -> s8 [0, 65535] { R12638 += 1, R12562 += 1 };
  s6 -> s6 [0, 65535] { R12638 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R12638 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R12638 += 1, R12562 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R12639 += 1, R12640 += 1 };
  s0 -> s2 [0, 65535] { R12640 += 1, R12564 += 1, R12519 += 1, R12520 += 1 };
  s0 -> s3 [0, 65535] { R12640 += 1, R12563 += 1, R12564 += 1 };
  s0 -> s4 [66, 66] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535] { R12640 += 1, R12564 += 1 };
  s1 -> s6 [0, 65535] { R12640 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [66, 66] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s2 -> s6 [0, 65535] { R12640 += 1 };
  s2 -> s2 [0, 65535] { R12640 += 1, R12564 += 1, R12519 += 1, R12520 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s3 -> s2 [0, 65535] { R12640 += 1, R12564 += 1, R12519 += 1, R12520 += 1 };
  s3 -> s3 [0, 65535] { R12640 += 1, R12563 += 1, R12564 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s4 -> s6 [0, 65535] { R12640 += 1 };
  s4 -> s4 [0, 65535] { R12640 += 1, R12564 += 1, R12520 += 1, R81 += 1, R82 += 1 };
  s4 -> s8 [0, 65535] { R12640 += 1, R12564 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R12640 += 1 };
  s5 -> s5 [0, 65535] { R12640 += 1, R12564 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R12640 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R12640 += 1 };
  s8 -> s8 [0, 65535] { R12640 += 1, R12564 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s0 -> s2 [0, 65] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s0 -> s0 [0, 65535] { R12641 += 1, R12642 += 1 };
  s0 -> s3 [0, 65535] { R12642 += 1, R12565 += 1, R12566 += 1 };
  s0 -> s4 [0, 65535] { R12642 += 1, R12566 += 1, R12521 += 1, R12522 += 1 };
  s0 -> s5 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s0 -> s6 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s0 -> s7 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s0 -> s8 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s0 -> s1 [67, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s0 -> s2 [67, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s1 -> s1 [0, 65] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s1 -> s2 [0, 65] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s1 -> s5 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s1 -> s6 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s1 -> s7 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s1 -> s8 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s1 -> s1 [67, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s1 -> s2 [67, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s2 -> s2 [0, 65] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s2 -> s9 [0, 65535] { R12642 += 1 };
  s2 -> s10 [0, 65535];
  s2 -> s2 [0, 65535] { R12642 += 1, R12566 += 1 };
  s2 -> s5 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s2 -> s8 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s2 -> s2 [67, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s3 -> s1 [0, 65] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s3 -> s2 [0, 65] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s3 -> s3 [0, 65535] { R12642 += 1, R12565 += 1, R12566 += 1 };
  s3 -> s4 [0, 65535] { R12642 += 1, R12566 += 1, R12521 += 1, R12522 += 1 };
  s3 -> s5 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s3 -> s6 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s3 -> s7 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s3 -> s8 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s3 -> s1 [67, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s3 -> s2 [67, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s4 -> s1 [0, 65] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s4 -> s2 [0, 65] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s4 -> s4 [0, 65535] { R12642 += 1, R12566 += 1, R12521 += 1, R12522 += 1 };
  s4 -> s5 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s4 -> s6 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s4 -> s7 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s4 -> s8 [66, 66] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s4 -> s1 [67, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s4 -> s2 [67, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s5 -> s11 [0, 65535] { R12642 += 1, R12566 += 1 };
  s5 -> s9 [0, 65535] { R12642 += 1 };
  s5 -> s5 [0, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s5 -> s10 [0, 65535];
  s6 -> s5 [0, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8820 += 1, R8821 += 1 };
  s6 -> s6 [0, 65535] { R12642 += 1, R12566 += 1, R12522 += 1, R8819 += 1, R8820 += 1 };
  s8 -> s9 [0, 65535] { R12642 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R12642 += 1, R12566 += 1 };
  s9 -> s9 [0, 65535] { R12642 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R12642 += 1, R12566 += 1 };
  s11 -> s9 [0, 65535] { R12642 += 1 };
  s11 -> s10 [0, 65535];
  accepting s8, s5, s2, s9, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s0 -> s2 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s0 -> s0 [0, 65535] { R12643 += 1, R12644 += 1 };
  s0 -> s3 [0, 65535] { R12644 += 1, R12568 += 1, R12523 += 1, R12524 += 1 };
  s0 -> s4 [0, 65535] { R12644 += 1, R12567 += 1, R12568 += 1 };
  s0 -> s5 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s0 -> s6 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s0 -> s7 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s0 -> s8 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s0 -> s1 [67, 70] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s0 -> s2 [67, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s0 -> s9 [71, 71] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s0 -> s1 [72, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s1 -> s1 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s1 -> s6 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s1 -> s8 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s1 -> s1 [67, 70] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s1 -> s9 [71, 71] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s1 -> s1 [72, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s2 -> s1 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s2 -> s2 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s2 -> s5 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s2 -> s6 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s2 -> s7 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s2 -> s8 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s2 -> s1 [67, 70] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s2 -> s2 [67, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s2 -> s9 [71, 71] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s2 -> s1 [72, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s3 -> s1 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s3 -> s2 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s3 -> s3 [0, 65535] { R12644 += 1, R12568 += 1, R12523 += 1, R12524 += 1 };
  s3 -> s5 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s3 -> s6 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s3 -> s7 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s3 -> s8 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s3 -> s1 [67, 70] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s3 -> s2 [67, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s3 -> s9 [71, 71] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s3 -> s1 [72, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s4 -> s1 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s4 -> s2 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s4 -> s3 [0, 65535] { R12644 += 1, R12568 += 1, R12523 += 1, R12524 += 1 };
  s4 -> s4 [0, 65535] { R12644 += 1, R12567 += 1, R12568 += 1 };
  s4 -> s5 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s4 -> s6 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s4 -> s7 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s4 -> s8 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s4 -> s1 [67, 70] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s4 -> s2 [67, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s4 -> s9 [71, 71] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s4 -> s1 [72, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s5 -> s8 [0, 70] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s5 -> s5 [0, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11007 += 1, R11008 += 1 };
  s5 -> s13 [71, 71] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s5 -> s8 [72, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s8 -> s8 [0, 70] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s8 -> s13 [71, 71] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s8 -> s8 [72, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s9 -> s10 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s9 -> s9 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s9 -> s11 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s9 -> s12 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s9 -> s13 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s9 -> s14 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s9 -> s10 [67, 65535] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s9 -> s9 [67, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s10 -> s10 [0, 65] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s10 -> s10 [0, 65535] { R12644 += 1, R12568 += 1 };
  s10 -> s15 [0, 65535] { R12644 += 1 };
  s10 -> s17 [0, 65535];
  s10 -> s11 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s10 -> s14 [66, 66] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s10 -> s10 [67, 65535] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s11 -> s11 [0, 65535] { R12644 += 1, R12568 += 1 };
  s11 -> s15 [0, 65535] { R12644 += 1 };
  s11 -> s17 [0, 65535];
  s13 -> s13 [0, 65535] { R12644 += 1, R12568 += 1, R12524 += 1, R11008 += 1 };
  s13 -> s14 [0, 65535] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s14 -> s15 [0, 65535] { R12644 += 1 };
  s14 -> s16 [0, 65535] { R12644 += 1, R12568 += 1 };
  s14 -> s17 [0, 65535];
  s14 -> s14 [0, 65535] { R12644 += 1, R12568 += 1, R12524 += 1 };
  s15 -> s15 [0, 65535] { R12644 += 1 };
  s15 -> s17 [0, 65535];
  s16 -> s15 [0, 65535] { R12644 += 1 };
  s16 -> s16 [0, 65535] { R12644 += 1, R12568 += 1 };
  s16 -> s17 [0, 65535];
  s17 -> s17 [0, 65535];
  accepting s17, s16, s14, s15, s10, s11;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s0 -> s2 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s0 -> s0 [0, 65535] { R12645 += 1, R12646 += 1 };
  s0 -> s3 [0, 65535] { R12646 += 1, R12569 += 1, R12570 += 1 };
  s0 -> s4 [0, 65535] { R12646 += 1, R12570 += 1, R12525 += 1, R12526 += 1 };
  s0 -> s5 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s0 -> s6 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s0 -> s7 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s0 -> s8 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s0 -> s1 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s0 -> s2 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s1 -> s1 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s1 -> s13 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s1 -> s5 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s1 -> s9 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s1 -> s14 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s1 -> s7 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s1 -> s1 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s1 -> s13 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s2 -> s1 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s2 -> s2 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s2 -> s5 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s2 -> s6 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s2 -> s7 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s2 -> s8 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s2 -> s1 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s2 -> s2 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s3 -> s1 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s3 -> s2 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s3 -> s3 [0, 65535] { R12646 += 1, R12569 += 1, R12570 += 1 };
  s3 -> s4 [0, 65535] { R12646 += 1, R12570 += 1, R12525 += 1, R12526 += 1 };
  s3 -> s5 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s3 -> s6 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s3 -> s7 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s3 -> s8 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s3 -> s1 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s3 -> s2 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s4 -> s1 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s4 -> s2 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s4 -> s4 [0, 65535] { R12646 += 1, R12570 += 1, R12525 += 1, R12526 += 1 };
  s4 -> s5 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s4 -> s6 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s4 -> s7 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s4 -> s8 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s4 -> s1 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s4 -> s2 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s6 -> s6 [0, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12463 += 1, R12464 += 1 };
  s6 -> s7 [0, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s7 -> s9 [0, 65535] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s7 -> s7 [0, 65535] { R12646 += 1, R12570 += 1, R12526 += 1, R12464 += 1, R12465 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s9 -> s11 [0, 65535] { R12646 += 1, R12570 += 1 };
  s9 -> s12 [0, 65535] { R12646 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R12646 += 1, R12570 += 1 };
  s11 -> s12 [0, 65535] { R12646 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R12646 += 1 };
  s13 -> s13 [0, 65] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s13 -> s10 [0, 65535];
  s13 -> s13 [0, 65535] { R12646 += 1, R12570 += 1 };
  s13 -> s12 [0, 65535] { R12646 += 1 };
  s13 -> s9 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s13 -> s14 [66, 66] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s13 -> s13 [67, 65535] { R12646 += 1, R12570 += 1, R12526 += 1 };
  s14 -> s10 [0, 65535];
  s14 -> s14 [0, 65535] { R12646 += 1, R12570 += 1 };
  s14 -> s12 [0, 65535] { R12646 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s0 -> s2 [0, 65535] { R12648 += 1, R12572 += 1, R12527 += 1, R12528 += 1 };
  s0 -> s3 [0, 65535] { R12648 += 1, R12571 += 1, R12572 += 1 };
  s0 -> s0 [0, 65535] { R12647 += 1, R12648 += 1 };
  s0 -> s4 [66, 66] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s0 -> s5 [66, 66] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s0 -> s1 [67, 65535] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s1 -> s1 [0, 65] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12648 += 1, R12572 += 1 };
  s1 -> s8 [0, 65535] { R12648 += 1 };
  s1 -> s4 [66, 66] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s1 -> s5 [66, 66] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s1 -> s1 [67, 65535] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s2 -> s1 [0, 65] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s2 -> s2 [0, 65535] { R12648 += 1, R12572 += 1, R12527 += 1, R12528 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R12648 += 1 };
  s2 -> s4 [66, 66] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s2 -> s5 [66, 66] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s2 -> s1 [67, 65535] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s3 -> s1 [0, 65] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s3 -> s2 [0, 65535] { R12648 += 1, R12572 += 1, R12527 += 1, R12528 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R12648 += 1, R12571 += 1, R12572 += 1 };
  s3 -> s4 [66, 66] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s3 -> s5 [66, 66] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s3 -> s1 [67, 65535] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12648 += 1, R12572 += 1 };
  s4 -> s8 [0, 65535] { R12648 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R12648 += 1, R12572 += 1 };
  s5 -> s8 [0, 65535] { R12648 += 1 };
  s5 -> s5 [0, 65535] { R12648 += 1, R12572 += 1, R12528 += 1, R12469 += 1, R12470 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12648 += 1, R12572 += 1 };
  s7 -> s8 [0, 65535] { R12648 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12648 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R12572 && R3 - R12648 = 1 && R23 - R12572 = -1 && R24 = R12572 && R25 - R12572 = -1 && R26 = R12572 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R12648 && R32 - R12648 = 1 && R33 = R12648 && R34 - R12648 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R11010 + -1*R11008 - R64 = 0 && R63 + R11009 + R11007 = 0 && R12513 = 0 && R12514 = 0 && R12521 = 0 && R12522 = 0 && R12523 = 0 && R12524 = 0 && R12525 = 0 && R12526 = 0 && R12529 = 0 && R12530 = R12572 && R12531 = 0 && R12532 = R12572 && R12533 = 0 && R12534 = R12572 && R12535 = 0 && R12536 = R12572 && R12537 = 0 && R12538 = R12572 && R12539 = 0 && R12540 = R12572 && R12541 = 0 && R12542 = R12572 && R12543 = 0 && R12544 = R12572 && R12545 = 0 && R12546 = R12572 && R12547 = 0 && R12548 = R12572 && R12549 = 0 && R12550 = R12572 && R12551 = 0 && R12552 = R12572 && R12553 = 0 && R12554 = R12572 && R12555 = 0 && R12556 = R12572 && R12557 = 0 && R12558 = R12572 && R12559 = 0 && R12560 = R12572 && R12561 = 0 && R12562 = R12572 && R12563 = 0 && R12564 = R12572 && R12565 = 0 && R12566 = R12572 && R12567 = 0 && R12568 = R12572 && R12569 = 0 && R12570 = R12572 && R12571 = 0 && R12573 = 0 && R12574 = R12648 && R12575 = 0 && R12576 = R12648 && R12577 = 0 && R12578 = R12648 && R12579 = 0 && R12580 = R12648 && R12581 = 0 && R12582 = R12648 && R12583 = 0 && R12584 = R12648 && R12585 = 0 && R12586 = R12648 && R12587 = 0 && R12588 = R12648 && R12589 = 0 && R12590 = R12648 && R12591 = 0 && R12592 = R12648 && R12593 = 0 && R12594 = R12648 && R12595 = 0 && R12596 = R12648 && R12597 = 0 && R12598 = R12648 && R12599 = 0 && R12600 = R12648 && R12601 = 0 && R12602 = R12648 && R12603 = 0 && R12604 = R12648 && R12605 = 0 && R12606 = R12648 && R12607 = 0 && R12608 = R12648 && R12609 = 0 && R12610 = R12648 && R12611 = 0 && R12612 = R12648 && R12613 = 0 && R12614 = R12648 && R12615 = 0 && R12616 = R12648 && R12617 = 0 && R12618 = R12648 && R12619 = 0 && R12620 = R12648 && R12621 = 0 && R12622 = R12648 && R12623 = 0 && R12624 = R12648 && R12625 = 0 && R12626 = R12648 && R12627 = 0 && R12628 = R12648 && R12629 = 0 && R12630 = R12648 && R12631 = 0 && R12632 = R12648 && R12633 = 0 && R12634 = R12648 && R12635 = 0 && R12636 = R12648 && R12637 = 0 && R12638 = R12648 && R12639 = 0 && R12640 = R12648 && R12641 = 0 && R12642 = R12648 && R12643 = 0 && R12644 = R12648 && R12645 = 0 && R12646 = R12648 && R12647 = 0 && -1 < R1 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R11010 + -1*R11008 - R64 < 1 && 0 < R12572 && -1 < R12648 && (R1 != 0 || R20 = 0 || (R12473 = 0 && R12474 = 0)) && (R1 != 0 || R20 = 0 || (R12475 = 0 && R12476 = 0)) && (R1 != 0 || R20 = 0 || (R12477 = 0 && R12478 = 0)) && (R1 != 0 || R20 = 0 || (R12479 = 0 && R12480 = 0)) && (R1 != 0 || R20 = 0 || (R12481 = 0 && R12482 = 0)) && (R1 != 0 || R20 = 0 || (R12483 = 0 && R12484 = 0)) && (R1 != 0 || R20 = 0 || (R12485 = 0 && R12486 = 0)) && (R1 != 0 || R20 = 0 || (R12487 = 0 && R12488 = 0)) && (R1 != 0 || R20 = 0 || (R12489 = 0 && R12490 = 0)) && (R1 != 0 || R20 = 0 || (R12491 = 0 && R12492 = 0)) && (R59 + R8824 + R8821 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R11010 + -1*R11008 - R64 = 0 || R64 + R11010 + R11008 < 1) && (R53 + R83 + R81 = 0 || R64 + R11010 + R11008 < 1))) && (R59 + R8824 + R8821 != 0 || ((R57 + R8822 + R8819 != 0 || R58 + R8823 + R8820 + -1*R11010 + -1*R11008 - R64 = 0 || R64 + R11010 + R11008 < 1) && (R57 + R8822 + R8819 = 0 || R64 + R11010 + R11008 < 1))) && (R12473 != 0 || R1 = R12474 || R1 < 1) && (R12475 != 0 || R1 = R12476 || R1 < 1) && (R12477 != 0 || R1 = R12478 || R1 < 1) && (R12479 != 0 || R1 = R12480 || R1 < 1) && (R12481 != 0 || R1 = R12482 || R1 < 1) && (R12483 != 0 || R1 = R12484 || R1 < 1) && (R12485 != 0 || R1 = R12486 || R1 < 1) && (R12487 != 0 || R1 = R12488 || R1 < 1) && (R12489 != 0 || R1 = R12490 || R1 < 1) && (R12491 != 0 || R1 = R12492 || R1 < 1) && (R21 = 0 || (R12511 = 0 && R12512 = 0)) && (R21 = 0 || (R12515 = 0 && R12516 = 0)) && (R21 = 0 || (R12517 = 0 && R12518 = 0)) && (R21 = 0 || (R12519 = 0 && R12520 = 0)) && (R21 = 0 || (R12527 = 0 && R12528 = 0)) && (R22 = 0 || (R12493 = 0 && R12494 = 0)) && (R22 = 0 || (R12495 = 0 && R12496 = 0)) && (R22 = 0 || (R12497 = 0 && R12498 = 0)) && (R22 = 0 || (R12499 = 0 && R12500 = 0)) && (R22 = 0 || (R12501 = 0 && R12502 = 0)) && (R22 = 0 || (R12503 = 0 && R12504 = 0)) && (R22 = 0 || (R12505 = 0 && R12506 = 0)) && (R22 = 0 || (R12507 = 0 && R12508 = 0)) && (R22 = 0 || (R12509 = 0 && R12510 = 0)) && (R59 + R8824 + R8821 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R11010 + -1*R11008 - R64 = 0)) && (R59 + R8824 + R8821 = 0 || (R57 + R8822 + R8819 = 0 && R58 + R8823 + R8820 + -1*R11010 + -1*R11008 - R64 = 0)) && (R69 + R12468 + R12465 = 0 || (R67 + R12466 + R12463 = 0 && R68 + R12467 + R12464 = 0)) && (R69 + R12468 + R12465 = 0 || (R73 + R12471 + R12469 = 0 && R74 + R12472 + R12470 = 0)) && (R12473 = 0 || R1 < 1) && (R12475 = 0 || R1 < 1) && (R12477 = 0 || R1 < 1) && (R12479 = 0 || R1 < 1) && (R12481 = 0 || R1 < 1) && (R12483 = 0 || R1 < 1) && (R12485 = 0 || R1 < 1) && (R12487 = 0 || R1 < 1) && (R12489 = 0 || R1 < 1) && (R12491 = 0 || R1 < 1);
// End of Parikh automata intersection problem
