// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 72] { R413 += 1 };
  s0 -> s0 [0, 65535] { R412 += 1, R413 += 1 };
  s0 -> s1 [74, 65535] { R413 += 1 };
  s1 -> s1 [0, 72] { R413 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R413 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R414 += 1, R415 += 1 };
  s0 -> s1 [0, 65535] { R415 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R415 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 73] { R417 += 1 };
  s0 -> s0 [0, 65535] { R416 += 1, R417 += 1 };
  s0 -> s2 [74, 74] { R417 += 1 };
  s0 -> s1 [75, 65535] { R417 += 1 };
  s1 -> s1 [0, 73] { R417 += 1 };
  s1 -> s2 [74, 74] { R417 += 1 };
  s1 -> s1 [75, 65535] { R417 += 1 };
  s2 -> s2 [0, 65535] { R417 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R418 += 1, R419 += 1 };
  s0 -> s1 [0, 65535] { R419 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R419 += 1, R59 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 73] { R421 += 1 };
  s0 -> s0 [0, 65535] { R420 += 1, R421 += 1 };
  s0 -> s2 [0, 65535] { R421 += 1, R61 += 1 };
  s0 -> s1 [75, 65535] { R421 += 1 };
  s1 -> s1 [0, 73] { R421 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [75, 65535] { R421 += 1 };
  s2 -> s1 [0, 73] { R421 += 1 };
  s2 -> s2 [0, 65535] { R421 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R421 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R422 += 1, R423 += 1 };
  s0 -> s1 [0, 65535] { R423 += 1, R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R423 += 1, R66 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R423 += 1, R65 += 1, R66 += 1 };
  s1 -> s2 [0, 65535] { R423 += 1, R66 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R423 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R423 += 1, R66 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R423 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 73] { R425 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R425 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R424 += 1, R425 += 1 };
  s0 -> s3 [74, 74] { R425 += 1, R71 += 1 };
  s0 -> s4 [74, 74] { R425 += 1, R71 += 1 };
  s0 -> s1 [88, 65535] { R425 += 1, R71 += 1 };
  s1 -> s1 [0, 73] { R425 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R425 += 1 };
  s1 -> s3 [74, 74] { R425 += 1, R71 += 1 };
  s1 -> s4 [74, 74] { R425 += 1, R71 += 1 };
  s1 -> s1 [88, 65535] { R425 += 1, R71 += 1 };
  s2 -> s1 [0, 73] { R425 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R425 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [74, 74] { R425 += 1, R71 += 1 };
  s2 -> s4 [74, 74] { R425 += 1, R71 += 1 };
  s2 -> s1 [88, 65535] { R425 += 1, R71 += 1 };
  s3 -> s3 [0, 74] { R425 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R425 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [88, 65535] { R425 += 1, R71 += 1 };
  s4 -> s4 [0, 65535] { R425 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 73] { R427 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R427 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R426 += 1, R427 += 1 };
  s0 -> s3 [74, 74] { R427 += 1, R75 += 1 };
  s0 -> s1 [75, 65535] { R427 += 1, R75 += 1 };
  s1 -> s1 [0, 73] { R427 += 1, R75 += 1 };
  s1 -> s3 [74, 74] { R427 += 1, R75 += 1 };
  s1 -> s1 [75, 65535] { R427 += 1, R75 += 1 };
  s2 -> s1 [0, 73] { R427 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R427 += 1, R74 += 1, R75 += 1 };
  s2 -> s3 [74, 74] { R427 += 1, R75 += 1 };
  s2 -> s1 [75, 65535] { R427 += 1, R75 += 1 };
  s3 -> s4 [0, 65535] { R427 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R427 += 1, R75 += 1 };
  s4 -> s4 [0, 65535] { R427 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s0 [0, 65535] { R428 += 1, R429 += 1 };
  s0 -> s1 [0, 65535] { R429 += 1, R79 += 1, R80 += 1 };
  s0 -> s2 [0, 65535] { R429 += 1, R80 += 1, R81 += 1 };
  s1 -> s1 [0, 65535] { R429 += 1, R79 += 1, R80 += 1 };
  s1 -> s2 [0, 65535] { R429 += 1, R80 += 1, R81 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R429 += 1 };
  s2 -> s2 [0, 65535] { R429 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R429 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 73] { R431 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R430 += 1, R431 += 1 };
  s0 -> s2 [0, 65535] { R431 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R431 += 1, R86 += 1, R87 += 1 };
  s0 -> s1 [75, 65535] { R431 += 1, R86 += 1 };
  s1 -> s1 [0, 73] { R431 += 1, R86 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R431 += 1 };
  s1 -> s1 [75, 65535] { R431 += 1, R86 += 1 };
  s2 -> s1 [0, 73] { R431 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R431 += 1, R85 += 1, R86 += 1 };
  s2 -> s3 [0, 65535] { R431 += 1, R86 += 1, R87 += 1 };
  s2 -> s1 [75, 65535] { R431 += 1, R86 += 1 };
  s3 -> s1 [0, 73] { R431 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R431 += 1 };
  s3 -> s3 [0, 65535] { R431 += 1, R86 += 1, R87 += 1 };
  s3 -> s1 [75, 65535] { R431 += 1, R86 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R431 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 73] { R433 += 1, R93 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R433 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R433 += 1, R92 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R432 += 1, R433 += 1 };
  s0 -> s1 [75, 65535] { R433 += 1, R93 += 1, R95 += 1 };
  s1 -> s1 [0, 73] { R433 += 1, R93 += 1, R95 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R433 += 1 };
  s1 -> s1 [0, 65535] { R433 += 1, R93 += 1 };
  s1 -> s1 [75, 65535] { R433 += 1, R93 += 1, R95 += 1 };
  s2 -> s1 [0, 73] { R433 += 1, R93 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R433 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535] { R433 += 1 };
  s2 -> s1 [75, 65535] { R433 += 1, R93 += 1, R95 += 1 };
  s3 -> s1 [0, 73] { R433 += 1, R93 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R433 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R433 += 1, R92 += 1, R93 += 1 };
  s3 -> s1 [75, 65535] { R433 += 1, R93 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R433 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R435 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R434 += 1, R435 += 1 };
  s0 -> s2 [0, 65535] { R435 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s0 -> s3 [0, 65535] { R435 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R435 += 1, R101 += 1, R102 += 1 };
  s1 -> s2 [0, 65535] { R435 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s1 -> s3 [0, 65535] { R435 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R435 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s2 -> s6 [0, 65535] { R435 += 1, R102 += 1 };
  s2 -> s5 [0, 65535] { R435 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R435 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s3 -> s5 [0, 65535] { R435 += 1 };
  s3 -> s3 [0, 65535] { R435 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R435 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R435 += 1, R102 += 1 };
  s6 -> s5 [0, 65535] { R435 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R437 += 1, R111 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R436 += 1, R437 += 1 };
  s0 -> s2 [0, 65535] { R437 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [0, 65535] { R437 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s0 -> s1 [87, 65535] { R437 += 1, R111 += 1, R113 += 1 };
  s1 -> s1 [0, 74] { R437 += 1, R111 += 1, R113 += 1 };
  s1 -> s1 [0, 65535] { R437 += 1, R111 += 1 };
  s1 -> s4 [0, 65535] { R437 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [87, 65535] { R437 += 1, R111 += 1, R113 += 1 };
  s2 -> s1 [0, 74] { R437 += 1, R111 += 1, R113 += 1 };
  s2 -> s2 [0, 65535] { R437 += 1, R110 += 1, R111 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R437 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s2 -> s1 [87, 65535] { R437 += 1, R111 += 1, R113 += 1 };
  s3 -> s1 [0, 74] { R437 += 1, R111 += 1, R113 += 1 };
  s3 -> s4 [0, 65535] { R437 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R437 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s3 -> s1 [87, 65535] { R437 += 1, R111 += 1, R113 += 1 };
  s4 -> s4 [0, 65535] { R437 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R439 += 1, R119 += 1, R120 += 1 };
  s0 -> s2 [0, 65535] { R439 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [0, 65535] { R439 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s0 -> s0 [0, 65535] { R438 += 1, R439 += 1 };
  s1 -> s1 [0, 65535] { R439 += 1, R119 += 1, R120 += 1 };
  s1 -> s2 [0, 65535] { R439 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [0, 65535] { R439 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R439 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s2 -> s3 [0, 65535] { R439 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R439 += 1 };
  s3 -> s3 [0, 65535] { R439 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [0, 65535] { R439 += 1, R120 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R439 += 1 };
  s4 -> s4 [0, 65535] { R439 += 1, R120 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R439 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R439 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R440 += 1, R441 += 1 };
  s0 -> s1 [0, 65535] { R441 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R441 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R442 += 1, R443 += 1 };
  s0 -> s1 [0, 65535] { R443 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R443 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 72] { R445 += 1 };
  s0 -> s0 [0, 65535] { R444 += 1, R445 += 1 };
  s0 -> s2 [73, 73] { R445 += 1 };
  s0 -> s3 [73, 73] { R445 += 1 };
  s0 -> s1 [75, 65535] { R445 += 1 };
  s1 -> s1 [0, 72] { R445 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R445 += 1 };
  s1 -> s3 [73, 73] { R445 += 1 };
  s1 -> s1 [75, 65535] { R445 += 1 };
  s2 -> s2 [0, 73] { R445 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R445 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 72] { R447 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R446 += 1, R447 += 1 };
  s0 -> s2 [73, 73] { R447 += 1, R58 += 1 };
  s0 -> s3 [73, 73] { R447 += 1, R58 += 1 };
  s0 -> s1 [74, 65535] { R447 += 1, R58 += 1 };
  s1 -> s1 [0, 72] { R447 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R447 += 1, R58 += 1 };
  s1 -> s3 [73, 73] { R447 += 1, R58 += 1 };
  s1 -> s1 [74, 65535] { R447 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R447 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 72] { R449 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R448 += 1, R449 += 1 };
  s0 -> s2 [73, 73] { R449 += 1, R60 += 1 };
  s0 -> s3 [73, 73] { R449 += 1, R60 += 1 };
  s0 -> s1 [74, 65535] { R449 += 1, R60 += 1 };
  s1 -> s1 [0, 72] { R449 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R449 += 1, R60 += 1 };
  s1 -> s3 [73, 73] { R449 += 1, R60 += 1 };
  s1 -> s1 [74, 65535] { R449 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R449 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 72] { R451 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R450 += 1, R451 += 1 };
  s0 -> s2 [73, 73] { R451 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R451 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R451 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R451 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R451 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R451 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R451 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R451 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 72] { R453 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R452 += 1, R453 += 1 };
  s0 -> s2 [73, 73] { R453 += 1, R68 += 1, R69 += 1 };
  s0 -> s3 [73, 73] { R453 += 1, R68 += 1, R69 += 1 };
  s0 -> s1 [74, 65535] { R453 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 72] { R453 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R453 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [73, 73] { R453 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [74, 65535] { R453 += 1, R68 += 1, R69 += 1 };
  s2 -> s2 [0, 65535] { R453 += 1, R68 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 72] { R455 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R454 += 1, R455 += 1 };
  s0 -> s2 [73, 73] { R455 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [73, 73] { R455 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [74, 65535] { R455 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 72] { R455 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R455 += 1, R72 += 1, R73 += 1 };
  s1 -> s3 [73, 73] { R455 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [74, 65535] { R455 += 1, R72 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R455 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 72] { R457 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R456 += 1, R457 += 1 };
  s0 -> s2 [73, 73] { R457 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [73, 73] { R457 += 1, R76 += 1, R77 += 1 };
  s0 -> s1 [74, 65535] { R457 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 72] { R457 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R457 += 1, R76 += 1, R77 += 1 };
  s1 -> s3 [73, 73] { R457 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [74, 65535] { R457 += 1, R76 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R457 += 1, R76 += 1, R77 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R459 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R458 += 1, R459 += 1 };
  s0 -> s2 [73, 73] { R459 += 1, R82 += 1, R83 += 1 };
  s0 -> s3 [73, 73] { R459 += 1, R82 += 1, R83 += 1 };
  s0 -> s1 [74, 65535] { R459 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 72] { R459 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R459 += 1, R82 += 1, R83 += 1 };
  s1 -> s3 [73, 73] { R459 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [74, 65535] { R459 += 1, R82 += 1, R83 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R459 += 1, R82 += 1, R83 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R461 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R460 += 1, R461 += 1 };
  s0 -> s2 [73, 73] { R461 += 1, R88 += 1, R89 += 1 };
  s0 -> s3 [73, 73] { R461 += 1, R88 += 1, R89 += 1 };
  s0 -> s1 [74, 65535] { R461 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [0, 72] { R461 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R461 += 1, R88 += 1, R89 += 1 };
  s1 -> s3 [73, 73] { R461 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [74, 65535] { R461 += 1, R88 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R461 += 1, R88 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R463 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R462 += 1, R463 += 1 };
  s0 -> s2 [73, 73] { R463 += 1, R96 += 1, R97 += 1 };
  s0 -> s3 [73, 73] { R463 += 1, R96 += 1, R97 += 1 };
  s0 -> s1 [74, 65535] { R463 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 72] { R463 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R463 += 1, R96 += 1, R97 += 1 };
  s1 -> s3 [73, 73] { R463 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [74, 65535] { R463 += 1, R96 += 1, R97 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R463 += 1, R96 += 1, R97 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R465 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R464 += 1, R465 += 1 };
  s0 -> s2 [73, 73] { R465 += 1, R106 += 1, R107 += 1 };
  s0 -> s3 [73, 73] { R465 += 1, R106 += 1, R107 += 1 };
  s0 -> s1 [74, 65535] { R465 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 72] { R465 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R465 += 1, R106 += 1, R107 += 1 };
  s1 -> s3 [73, 73] { R465 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [74, 65535] { R465 += 1, R106 += 1, R107 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R465 += 1, R106 += 1, R107 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R467 += 1, R114 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R466 += 1, R467 += 1 };
  s0 -> s2 [73, 73] { R467 += 1, R114 += 1, R115 += 1 };
  s0 -> s3 [73, 73] { R467 += 1, R114 += 1, R115 += 1 };
  s0 -> s1 [74, 65535] { R467 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [0, 72] { R467 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R467 += 1, R114 += 1, R115 += 1 };
  s1 -> s3 [73, 73] { R467 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [74, 65535] { R467 += 1, R114 += 1, R115 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R467 += 1, R114 += 1, R115 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R469 += 1, R405 += 1, R407 += 1 };
  s0 -> s2 [0, 72] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s0 -> s3 [0, 72] { R469 += 1, R404 += 1, R405 += 1 };
  s0 -> s0 [0, 65535] { R468 += 1, R469 += 1 };
  s0 -> s4 [73, 73] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s0 -> s5 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s0 -> s6 [73, 73] { R469 += 1, R404 += 1, R405 += 1 };
  s0 -> s7 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s0 -> s8 [73, 73] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s0 -> s9 [73, 73] { R469 += 1, R404 += 1, R405 += 1 };
  s0 -> s10 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s0 -> s2 [74, 65535] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s0 -> s3 [74, 65535] { R469 += 1, R404 += 1, R405 += 1 };
  s0 -> s11 [87, 87] { R469 += 1, R405 += 1, R407 += 1 };
  s0 -> s1 [88, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s1 -> s1 [0, 72] { R469 += 1, R405 += 1, R407 += 1 };
  s1 -> s5 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s1 -> s7 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s1 -> s10 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s1 -> s11 [87, 87] { R469 += 1, R405 += 1, R407 += 1 };
  s1 -> s1 [88, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s2 -> s1 [0, 72] { R469 += 1, R405 += 1, R407 += 1 };
  s2 -> s2 [0, 72] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s2 -> s4 [73, 73] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s2 -> s5 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s2 -> s7 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s2 -> s8 [73, 73] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s2 -> s10 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s2 -> s2 [74, 65535] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s2 -> s11 [87, 87] { R469 += 1, R405 += 1, R407 += 1 };
  s2 -> s1 [88, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s3 -> s1 [0, 72] { R469 += 1, R405 += 1, R407 += 1 };
  s3 -> s2 [0, 72] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s3 -> s3 [0, 72] { R469 += 1, R404 += 1, R405 += 1 };
  s3 -> s4 [73, 73] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s3 -> s5 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s3 -> s6 [73, 73] { R469 += 1, R404 += 1, R405 += 1 };
  s3 -> s7 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s3 -> s8 [73, 73] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s3 -> s9 [73, 73] { R469 += 1, R404 += 1, R405 += 1 };
  s3 -> s10 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s3 -> s2 [74, 65535] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s3 -> s3 [74, 65535] { R469 += 1, R404 += 1, R405 += 1 };
  s3 -> s11 [87, 87] { R469 += 1, R405 += 1, R407 += 1 };
  s3 -> s1 [88, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s7 -> s7 [0, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s7 -> s24 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s7 -> s13 [87, 87] { R469 += 1, R405 += 1, R407 += 1 };
  s7 -> s7 [88, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s8 -> s7 [0, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s8 -> s8 [0, 65535] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s8 -> s24 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s8 -> s13 [87, 87] { R469 += 1, R405 += 1, R407 += 1 };
  s8 -> s7 [88, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s9 -> s7 [0, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s9 -> s8 [0, 65535] { R469 += 1, R405 += 1, R406 += 1, R407 += 1 };
  s9 -> s9 [0, 65535] { R469 += 1, R404 += 1, R405 += 1 };
  s9 -> s24 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s9 -> s13 [87, 87] { R469 += 1, R405 += 1, R407 += 1 };
  s9 -> s7 [88, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s10 -> s10 [0, 72] { R469 += 1, R405 += 1, R407 += 1 };
  s10 -> s24 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s10 -> s25 [73, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s10 -> s10 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s10 -> s18 [87, 87] { R469 += 1, R405 += 1, R407 += 1 };
  s10 -> s10 [88, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s11 -> s11 [0, 72] { R469 += 1, R405 += 1, R407 += 1 };
  s11 -> s12 [0, 72] { R469 += 1 };
  s11 -> s13 [73, 73] { R469 += 1, R405 += 1 };
  s11 -> s14 [73, 73] { R469 += 1, R405 += 1 };
  s11 -> s15 [73, 73] { R469 += 1 };
  s11 -> s16 [73, 73] { R469 += 1 };
  s11 -> s17 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s11 -> s18 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s11 -> s11 [74, 65535] { R469 += 1, R405 += 1 };
  s11 -> s12 [74, 65535] { R469 += 1 };
  s11 -> s11 [87, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s12 -> s12 [0, 72] { R469 += 1 };
  s12 -> s12 [0, 65535];
  s12 -> s15 [73, 73] { R469 += 1 };
  s12 -> s16 [73, 73] { R469 += 1 };
  s12 -> s12 [74, 65535] { R469 += 1 };
  s13 -> s13 [0, 73] { R469 += 1, R405 += 1, R407 += 1 };
  s13 -> s13 [0, 65535] { R469 += 1, R405 += 1 };
  s13 -> s15 [0, 65535] { R469 += 1 };
  s13 -> s21 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s13 -> s19 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s13 -> s13 [87, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s15 -> s23 [0, 65535];
  s15 -> s15 [0, 65535] { R469 += 1 };
  s16 -> s16 [0, 65535];
  s17 -> s12 [0, 72] { R469 += 1 };
  s17 -> s17 [0, 72] { R469 += 1, R405 += 1 };
  s17 -> s21 [73, 73] { R469 += 1, R405 += 1 };
  s17 -> s22 [73, 73] { R469 += 1, R405 += 1 };
  s17 -> s15 [73, 73] { R469 += 1 };
  s17 -> s16 [73, 73] { R469 += 1 };
  s17 -> s12 [74, 65535] { R469 += 1 };
  s17 -> s17 [74, 65535] { R469 += 1, R405 += 1 };
  s18 -> s12 [0, 72] { R469 += 1 };
  s18 -> s18 [0, 72] { R469 += 1, R405 += 1, R407 += 1 };
  s18 -> s19 [73, 73] { R469 += 1, R405 += 1 };
  s18 -> s20 [73, 73] { R469 += 1, R405 += 1 };
  s18 -> s15 [73, 73] { R469 += 1 };
  s18 -> s16 [73, 73] { R469 += 1 };
  s18 -> s18 [74, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s18 -> s12 [74, 65535] { R469 += 1 };
  s18 -> s18 [74, 65535] { R469 += 1, R405 += 1 };
  s18 -> s18 [87, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s19 -> s19 [0, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s19 -> s19 [0, 65535] { R469 += 1, R405 += 1 };
  s19 -> s15 [0, 65535] { R469 += 1 };
  s19 -> s19 [87, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  s21 -> s21 [0, 65535] { R469 += 1, R405 += 1 };
  s21 -> s15 [0, 65535] { R469 += 1 };
  s23 -> s23 [0, 65535];
  s24 -> s24 [0, 74] { R469 += 1, R405 += 1, R407 += 1 };
  s24 -> s19 [87, 87] { R469 += 1, R405 += 1, R407 += 1 };
  s24 -> s24 [88, 65535] { R469 += 1, R405 += 1, R407 += 1 };
  accepting s12, s15, s16, s23;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [106, 106];
  accepting s1;
};
};
constraint R2 = R441 && R20 - R441 = -1 && R21 = R441 && R22 - R441 = -1 && R23 = R441 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R59 + R58 + -1*R409 + -1*R405 = 0 && R74 + R72 = 0 && R75 + R73 + -1*R409 + -1*R405 = 0 && R408 + R404 = 0 && R410 + R406 = 0 && R411 + R407 = 0 && R412 = 0 && R413 = R441 && R414 = 0 && R415 = R441 && R416 = 0 && R417 = R441 && R418 = 0 && R419 = R441 && R420 = 0 && R421 = R441 && R422 = 0 && R423 = R441 && R424 = 0 && R425 = R441 && R426 = 0 && R427 = R441 && R428 = 0 && R429 = R441 && R430 = 0 && R431 = R441 && R432 = 0 && R433 = R441 && R434 = 0 && R435 = R441 && R436 = 0 && R437 = R441 && R438 = 0 && R439 = R441 && R440 = 0 && R468 = 0 && R469 = 0 && R11 < 1 && R12 < 1 && R61 + R60 < 1 && -1*R81 + -1*R78 < 1 && R87 + R84 < 1 && -1*R409 + -1*R405 < 1 && 0 < R441 && (R79 + R76 != 0 || R80 + R77 + -1*R409 + -1*R405 = 0 || R81 + R78 < 1) && (R81 + R78 != 0 || R105 + R100 = 0 || (R94 + R90 = 0 && R95 + R91 = 0)) && (R81 + R78 != 0 || R105 + R100 = 0 || (R103 + R98 = 0 && R104 + R99 = 0)) && (R81 + R78 != 0 || R105 + R100 = 0 || (R112 + R108 = 0 && R113 + R109 = 0)) && (R81 + R78 != 0 || ((R79 + R76 != 0 || R80 + R77 + -1*R409 + -1*R405 = 0 || R409 + R405 < 1) && (R79 + R76 = 0 || R409 + R405 < 1))) && (R85 + R82 != 0 || R86 + R83 + -1*R409 + -1*R405 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R92 + R88 != 0 || R93 + R89 + -1*R409 + -1*R405 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R94 + R90 != 0 || R81 + R78 + -1*R95 + -1*R91 = 0 || R81 + R78 < 1) && (R101 + R96 != 0 || R102 + R97 + -1*R409 + -1*R405 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R103 + R98 != 0 || R81 + R78 + -1*R104 + -1*R99 = 0 || R81 + R78 < 1) && (R110 + R106 != 0 || R111 + R107 + -1*R409 + -1*R405 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R112 + R108 != 0 || R81 + R78 + -1*R113 + -1*R109 = 0 || R81 + R78 < 1) && (R119 + R114 != 0 || R120 + R115 + -1*R409 + -1*R405 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R19 = 0 || (R442 = 0 && R443 = 0)) && (R19 = 0 || (R444 = 0 && R445 = 0)) && (R19 = 0 || (R446 = 0 && R447 = 0)) && (R19 = 0 || (R448 = 0 && R449 = 0)) && (R19 = 0 || (R450 = 0 && R451 = 0)) && (R19 = 0 || (R452 = 0 && R453 = 0)) && (R19 = 0 || (R454 = 0 && R455 = 0)) && (R19 = 0 || (R456 = 0 && R457 = 0)) && (R19 = 0 || (R458 = 0 && R459 = 0)) && (R19 = 0 || (R460 = 0 && R461 = 0)) && (R19 = 0 || (R462 = 0 && R463 = 0)) && (R19 = 0 || (R464 = 0 && R465 = 0)) && (R19 = 0 || (R466 = 0 && R467 = 0)) && (R67 + R64 = 0 || (R65 + R62 = 0 && R66 + R63 = 0)) && (R67 + R64 = 0 || (R70 + R68 = 0 && R71 + R69 = 0)) && (R79 + R76 = 0 || R81 + R78 < 1) && (R85 + R82 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R92 + R88 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R94 + R90 = 0 || R81 + R78 < 1) && (R101 + R96 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R103 + R98 = 0 || R81 + R78 < 1) && (R110 + R106 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R112 + R108 = 0 || R81 + R78 < 1) && (R119 + R114 = 0 || (R81 + R78 = 0 && R409 + R405 = 0)) && (R123 + R118 = 0 || (R121 + R116 = 0 && R122 + R117 = 0));
// End of Parikh automata intersection problem
