// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R700, R701, R702, R703, R704, R705, R706, R707, R708, R709, R710, R711, R712, R713, R714, R715, R716, R717, R718, R719, R720, R721, R722, R723, R724, R725, R726, R727, R728, R729, R730, R731, R732, R733, R734, R735, R736, R737, R738, R739, R740, R741, R742, R743, R744, R745, R746, R747, R748, R749;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 72] { R693 += 1 };
  s0 -> s0 [0, 65535] { R692 += 1, R693 += 1 };
  s0 -> s1 [74, 65535] { R693 += 1 };
  s1 -> s1 [0, 72] { R693 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R693 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R695 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R694 += 1, R695 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R695 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R696 += 1, R697 += 1 };
  s0 -> s1 [0, 65535] { R697 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R697 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R698 += 1, R699 += 1 };
  s0 -> s1 [0, 65535] { R699 += 1, R487 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R699 += 1, R487 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 73] { R701 += 1 };
  s0 -> s0 [0, 65535] { R700 += 1, R701 += 1 };
  s0 -> s2 [0, 65535] { R701 += 1, R489 += 1 };
  s0 -> s1 [75, 65535] { R701 += 1 };
  s1 -> s1 [0, 73] { R701 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [75, 65535] { R701 += 1 };
  s2 -> s1 [0, 73] { R701 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R701 += 1, R489 += 1 };
  s2 -> s1 [75, 65535] { R701 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R703 += 1, R493 += 1, R494 += 1 };
  s0 -> s0 [0, 65535] { R702 += 1, R703 += 1 };
  s0 -> s2 [0, 65535] { R703 += 1, R494 += 1, R495 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R703 += 1, R493 += 1, R494 += 1 };
  s1 -> s2 [0, 65535] { R703 += 1, R494 += 1, R495 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R703 += 1, R494 += 1, R495 += 1 };
  s2 -> s4 [0, 65535] { R703 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R703 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 73] { R705 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R705 += 1, R498 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R704 += 1, R705 += 1 };
  s0 -> s3 [74, 74] { R705 += 1, R499 += 1 };
  s0 -> s4 [74, 74] { R705 += 1, R499 += 1 };
  s0 -> s1 [88, 65535] { R705 += 1, R499 += 1 };
  s1 -> s1 [0, 73] { R705 += 1, R499 += 1 };
  s1 -> s1 [0, 65535] { R705 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [74, 74] { R705 += 1, R499 += 1 };
  s1 -> s4 [74, 74] { R705 += 1, R499 += 1 };
  s1 -> s1 [88, 65535] { R705 += 1, R499 += 1 };
  s2 -> s1 [0, 73] { R705 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R705 += 1, R498 += 1, R499 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [74, 74] { R705 += 1, R499 += 1 };
  s2 -> s4 [74, 74] { R705 += 1, R499 += 1 };
  s2 -> s1 [88, 65535] { R705 += 1, R499 += 1 };
  s3 -> s3 [0, 74] { R705 += 1, R499 += 1 };
  s3 -> s3 [0, 65535] { R705 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [88, 65535] { R705 += 1, R499 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R705 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 73] { R707 += 1, R503 += 1 };
  s0 -> s2 [0, 65535] { R707 += 1, R502 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R706 += 1, R707 += 1 };
  s0 -> s3 [74, 74] { R707 += 1, R503 += 1 };
  s0 -> s1 [75, 65535] { R707 += 1, R503 += 1 };
  s1 -> s1 [0, 73] { R707 += 1, R503 += 1 };
  s1 -> s3 [74, 74] { R707 += 1, R503 += 1 };
  s1 -> s1 [75, 65535] { R707 += 1, R503 += 1 };
  s2 -> s1 [0, 73] { R707 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R707 += 1, R502 += 1, R503 += 1 };
  s2 -> s3 [74, 74] { R707 += 1, R503 += 1 };
  s2 -> s1 [75, 65535] { R707 += 1, R503 += 1 };
  s3 -> s3 [0, 65535] { R707 += 1, R503 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R707 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R707 += 1 };
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R709 += 1, R508 += 1, R509 += 1 };
  s0 -> s0 [0, 65535] { R708 += 1, R709 += 1 };
  s0 -> s2 [0, 65535] { R709 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R709 += 1, R508 += 1, R509 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R709 += 1 };
  s2 -> s1 [0, 65535] { R709 += 1, R508 += 1, R509 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R709 += 1, R507 += 1, R508 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R709 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 73] { R711 += 1, R514 += 1 };
  s0 -> s2 [0, 65535] { R711 += 1, R514 += 1, R515 += 1 };
  s0 -> s0 [0, 65535] { R710 += 1, R711 += 1 };
  s0 -> s3 [0, 65535] { R711 += 1, R513 += 1, R514 += 1 };
  s0 -> s1 [75, 65535] { R711 += 1, R514 += 1 };
  s1 -> s1 [0, 73] { R711 += 1, R514 += 1 };
  s1 -> s1 [0, 65535] { R711 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [75, 65535] { R711 += 1, R514 += 1 };
  s2 -> s1 [0, 73] { R711 += 1, R514 += 1 };
  s2 -> s2 [0, 65535] { R711 += 1, R514 += 1, R515 += 1 };
  s2 -> s5 [0, 65535] { R711 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [75, 65535] { R711 += 1, R514 += 1 };
  s3 -> s1 [0, 73] { R711 += 1, R514 += 1 };
  s3 -> s2 [0, 65535] { R711 += 1, R514 += 1, R515 += 1 };
  s3 -> s3 [0, 65535] { R711 += 1, R513 += 1, R514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [75, 65535] { R711 += 1, R514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R711 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 73] { R713 += 1, R521 += 1, R523 += 1 };
  s0 -> s2 [0, 65535] { R713 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s0 -> s0 [0, 65535] { R712 += 1, R713 += 1 };
  s0 -> s3 [0, 65535] { R713 += 1, R520 += 1, R521 += 1 };
  s0 -> s1 [75, 65535] { R713 += 1, R521 += 1, R523 += 1 };
  s1 -> s1 [0, 73] { R713 += 1, R521 += 1, R523 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R713 += 1 };
  s1 -> s1 [0, 65535] { R713 += 1, R521 += 1 };
  s1 -> s1 [75, 65535] { R713 += 1, R521 += 1, R523 += 1 };
  s2 -> s1 [0, 73] { R713 += 1, R521 += 1, R523 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R713 += 1 };
  s2 -> s2 [0, 65535] { R713 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s2 -> s1 [75, 65535] { R713 += 1, R521 += 1, R523 += 1 };
  s3 -> s1 [0, 73] { R713 += 1, R521 += 1, R523 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R713 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s3 -> s3 [0, 65535] { R713 += 1, R520 += 1, R521 += 1 };
  s3 -> s1 [75, 65535] { R713 += 1, R521 += 1, R523 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R713 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R715 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s0 -> s2 [0, 65535] { R715 += 1, R529 += 1, R530 += 1 };
  s0 -> s0 [0, 65535] { R714 += 1, R715 += 1 };
  s0 -> s3 [0, 65535] { R715 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s1 -> s1 [0, 65535] { R715 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s1 -> s6 [0, 65535] { R715 += 1, R530 += 1 };
  s1 -> s4 [0, 65535] { R715 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R715 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s2 -> s2 [0, 65535] { R715 += 1, R529 += 1, R530 += 1 };
  s2 -> s3 [0, 65535] { R715 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R715 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s3 -> s4 [0, 65535] { R715 += 1 };
  s3 -> s3 [0, 65535] { R715 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R715 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R715 += 1, R530 += 1 };
  s6 -> s4 [0, 65535] { R715 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R717 += 1, R539 += 1, R541 += 1 };
  s0 -> s2 [0, 65535] { R717 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s0 -> s3 [0, 65535] { R717 += 1, R538 += 1, R539 += 1 };
  s0 -> s0 [0, 65535] { R716 += 1, R717 += 1 };
  s0 -> s1 [87, 65535] { R717 += 1, R539 += 1, R541 += 1 };
  s1 -> s1 [0, 74] { R717 += 1, R539 += 1, R541 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R717 += 1, R539 += 1 };
  s1 -> s5 [0, 65535] { R717 += 1 };
  s1 -> s1 [87, 65535] { R717 += 1, R539 += 1, R541 += 1 };
  s2 -> s1 [0, 74] { R717 += 1, R539 += 1, R541 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R717 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s2 -> s5 [0, 65535] { R717 += 1 };
  s2 -> s1 [87, 65535] { R717 += 1, R539 += 1, R541 += 1 };
  s3 -> s1 [0, 74] { R717 += 1, R539 += 1, R541 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R717 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s3 -> s3 [0, 65535] { R717 += 1, R538 += 1, R539 += 1 };
  s3 -> s1 [87, 65535] { R717 += 1, R539 += 1, R541 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R717 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R719 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s0 -> s0 [0, 65535] { R718 += 1, R719 += 1 };
  s0 -> s2 [0, 65535] { R719 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s0 -> s3 [0, 65535] { R719 += 1, R547 += 1, R548 += 1 };
  s1 -> s1 [0, 65535] { R719 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R719 += 1 };
  s1 -> s2 [0, 65535] { R719 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s2 -> s5 [0, 65535] { R719 += 1, R548 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R719 += 1 };
  s2 -> s2 [0, 65535] { R719 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s3 -> s1 [0, 65535] { R719 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R719 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s3 -> s3 [0, 65535] { R719 += 1, R547 += 1, R548 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R719 += 1, R548 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R719 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R719 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R721 += 1, R689 += 1, R691 += 1 };
  s0 -> s2 [0, 65535] { R721 += 1, R689 += 1, R690 += 1, R691 += 1 };
  s0 -> s0 [0, 65535] { R720 += 1, R721 += 1 };
  s0 -> s3 [74, 74] { R721 += 1, R689 += 1, R691 += 1 };
  s0 -> s4 [87, 87] { R721 += 1, R689 += 1, R691 += 1 };
  s0 -> s1 [88, 65535] { R721 += 1, R689 += 1, R691 += 1 };
  s1 -> s1 [0, 73] { R721 += 1, R689 += 1, R691 += 1 };
  s1 -> s3 [74, 74] { R721 += 1, R689 += 1, R691 += 1 };
  s1 -> s4 [87, 87] { R721 += 1, R689 += 1, R691 += 1 };
  s1 -> s1 [88, 65535] { R721 += 1, R689 += 1, R691 += 1 };
  s2 -> s1 [0, 73] { R721 += 1, R689 += 1, R691 += 1 };
  s2 -> s2 [0, 65535] { R721 += 1, R689 += 1, R690 += 1, R691 += 1 };
  s2 -> s3 [74, 74] { R721 += 1, R689 += 1, R691 += 1 };
  s2 -> s4 [87, 87] { R721 += 1, R689 += 1, R691 += 1 };
  s2 -> s1 [88, 65535] { R721 += 1, R689 += 1, R691 += 1 };
  s3 -> s3 [0, 74] { R721 += 1, R689 += 1, R691 += 1 };
  s3 -> s7 [87, 87] { R721 += 1, R689 += 1, R691 += 1 };
  s3 -> s3 [88, 65535] { R721 += 1, R689 += 1, R691 += 1 };
  s4 -> s4 [0, 73] { R721 += 1, R689 += 1, R691 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R721 += 1 };
  s4 -> s4 [0, 65535] { R721 += 1, R689 += 1 };
  s4 -> s7 [74, 74] { R721 += 1, R689 += 1, R691 += 1 };
  s4 -> s8 [74, 74] { R721 += 1, R689 += 1, R691 += 1 };
  s4 -> s4 [87, 65535] { R721 += 1, R689 += 1, R691 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R721 += 1 };
  s7 -> s7 [0, 74] { R721 += 1, R689 += 1, R691 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R721 += 1, R689 += 1 };
  s7 -> s6 [0, 65535] { R721 += 1 };
  s7 -> s7 [87, 65535] { R721 += 1, R689 += 1, R691 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R721 += 1 };
  s8 -> s8 [0, 65535] { R721 += 1, R689 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R722 += 1, R723 += 1 };
  s0 -> s1 [0, 65535] { R723 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R723 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 72] { R725 += 1 };
  s0 -> s0 [0, 65535] { R724 += 1, R725 += 1 };
  s0 -> s2 [73, 73] { R725 += 1 };
  s0 -> s3 [73, 73] { R725 += 1 };
  s0 -> s4 [74, 74] { R725 += 1 };
  s0 -> s1 [75, 65535] { R725 += 1 };
  s1 -> s1 [0, 72] { R725 += 1 };
  s1 -> s2 [73, 73] { R725 += 1 };
  s1 -> s3 [73, 73] { R725 += 1 };
  s1 -> s4 [74, 74] { R725 += 1 };
  s1 -> s1 [75, 65535] { R725 += 1 };
  s3 -> s3 [0, 73] { R725 += 1 };
  s3 -> s5 [74, 74] { R725 += 1 };
  s3 -> s3 [75, 65535] { R725 += 1 };
  s4 -> s4 [0, 72] { R725 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [73, 73] { R725 += 1 };
  s4 -> s6 [73, 73] { R725 += 1 };
  s4 -> s4 [74, 65535] { R725 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R725 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 72] { R727 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R726 += 1, R727 += 1 };
  s0 -> s2 [73, 73] { R727 += 1, R486 += 1 };
  s0 -> s3 [73, 73] { R727 += 1, R486 += 1 };
  s0 -> s1 [74, 65535] { R727 += 1, R486 += 1 };
  s1 -> s1 [0, 72] { R727 += 1, R486 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R727 += 1, R486 += 1 };
  s1 -> s3 [73, 73] { R727 += 1, R486 += 1 };
  s1 -> s1 [74, 65535] { R727 += 1, R486 += 1 };
  s2 -> s2 [0, 65535] { R727 += 1, R486 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 72] { R729 += 1, R488 += 1 };
  s0 -> s0 [0, 65535] { R728 += 1, R729 += 1 };
  s0 -> s2 [73, 73] { R729 += 1, R488 += 1 };
  s0 -> s3 [73, 73] { R729 += 1, R488 += 1 };
  s0 -> s1 [74, 65535] { R729 += 1, R488 += 1 };
  s1 -> s1 [0, 72] { R729 += 1, R488 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R729 += 1, R488 += 1 };
  s1 -> s3 [73, 73] { R729 += 1, R488 += 1 };
  s1 -> s1 [74, 65535] { R729 += 1, R488 += 1 };
  s2 -> s2 [0, 65535] { R729 += 1, R488 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 72] { R731 += 1, R490 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R730 += 1, R731 += 1 };
  s0 -> s2 [73, 73] { R731 += 1, R490 += 1, R491 += 1 };
  s0 -> s3 [73, 73] { R731 += 1, R490 += 1, R491 += 1 };
  s0 -> s1 [74, 65535] { R731 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 72] { R731 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R731 += 1, R490 += 1, R491 += 1 };
  s1 -> s3 [73, 73] { R731 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [74, 65535] { R731 += 1, R490 += 1, R491 += 1 };
  s2 -> s2 [0, 65535] { R731 += 1, R490 += 1, R491 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 72] { R733 += 1, R496 += 1, R497 += 1 };
  s0 -> s0 [0, 65535] { R732 += 1, R733 += 1 };
  s0 -> s2 [73, 73] { R733 += 1, R496 += 1, R497 += 1 };
  s0 -> s3 [73, 73] { R733 += 1, R496 += 1, R497 += 1 };
  s0 -> s1 [74, 65535] { R733 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 72] { R733 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R733 += 1, R496 += 1, R497 += 1 };
  s1 -> s3 [73, 73] { R733 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [74, 65535] { R733 += 1, R496 += 1, R497 += 1 };
  s2 -> s2 [0, 65535] { R733 += 1, R496 += 1, R497 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 72] { R735 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R734 += 1, R735 += 1 };
  s0 -> s2 [73, 73] { R735 += 1, R500 += 1, R501 += 1 };
  s0 -> s3 [73, 73] { R735 += 1, R500 += 1, R501 += 1 };
  s0 -> s1 [74, 65535] { R735 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 72] { R735 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R735 += 1, R500 += 1, R501 += 1 };
  s1 -> s3 [73, 73] { R735 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [74, 65535] { R735 += 1, R500 += 1, R501 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R735 += 1, R500 += 1, R501 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 72] { R737 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R736 += 1, R737 += 1 };
  s0 -> s2 [73, 73] { R737 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [73, 73] { R737 += 1, R504 += 1, R505 += 1 };
  s0 -> s1 [74, 65535] { R737 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 72] { R737 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R737 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [73, 73] { R737 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [74, 65535] { R737 += 1, R504 += 1, R505 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R737 += 1, R504 += 1, R505 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R739 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R738 += 1, R739 += 1 };
  s0 -> s2 [73, 73] { R739 += 1, R510 += 1, R511 += 1 };
  s0 -> s3 [73, 73] { R739 += 1, R510 += 1, R511 += 1 };
  s0 -> s1 [74, 65535] { R739 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 72] { R739 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R739 += 1, R510 += 1, R511 += 1 };
  s1 -> s3 [73, 73] { R739 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [74, 65535] { R739 += 1, R510 += 1, R511 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R739 += 1, R510 += 1, R511 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R741 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R740 += 1, R741 += 1 };
  s0 -> s2 [73, 73] { R741 += 1, R516 += 1, R517 += 1 };
  s0 -> s3 [73, 73] { R741 += 1, R516 += 1, R517 += 1 };
  s0 -> s1 [74, 65535] { R741 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 72] { R741 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R741 += 1, R516 += 1, R517 += 1 };
  s1 -> s3 [73, 73] { R741 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [74, 65535] { R741 += 1, R516 += 1, R517 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R741 += 1, R516 += 1, R517 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R743 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R742 += 1, R743 += 1 };
  s0 -> s2 [73, 73] { R743 += 1, R524 += 1, R525 += 1 };
  s0 -> s3 [73, 73] { R743 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [74, 65535] { R743 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 72] { R743 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R743 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [73, 73] { R743 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [74, 65535] { R743 += 1, R524 += 1, R525 += 1 };
  s2 -> s2 [0, 65535] { R743 += 1, R524 += 1, R525 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R745 += 1, R534 += 1, R535 += 1 };
  s0 -> s0 [0, 65535] { R744 += 1, R745 += 1 };
  s0 -> s2 [73, 73] { R745 += 1, R534 += 1, R535 += 1 };
  s0 -> s3 [73, 73] { R745 += 1, R534 += 1, R535 += 1 };
  s0 -> s1 [74, 65535] { R745 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 72] { R745 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R745 += 1, R534 += 1, R535 += 1 };
  s1 -> s3 [73, 73] { R745 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [74, 65535] { R745 += 1, R534 += 1, R535 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R745 += 1, R534 += 1, R535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R747 += 1, R542 += 1, R543 += 1 };
  s0 -> s0 [0, 65535] { R746 += 1, R747 += 1 };
  s0 -> s2 [73, 73] { R747 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [73, 73] { R747 += 1, R542 += 1, R543 += 1 };
  s0 -> s1 [74, 65535] { R747 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 72] { R747 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R747 += 1, R542 += 1, R543 += 1 };
  s1 -> s3 [73, 73] { R747 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [74, 65535] { R747 += 1, R542 += 1, R543 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R747 += 1, R542 += 1, R543 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s0 -> s2 [0, 72] { R749 += 1, R684 += 1, R685 += 1 };
  s0 -> s0 [0, 65535] { R748 += 1, R749 += 1 };
  s0 -> s3 [73, 73] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s0 -> s4 [73, 73] { R749 += 1, R684 += 1, R685 += 1 };
  s0 -> s5 [73, 73] { R749 += 1, R684 += 1, R685 += 1 };
  s0 -> s6 [73, 73] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s0 -> s1 [74, 65535] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s0 -> s2 [74, 65535] { R749 += 1, R684 += 1, R685 += 1 };
  s1 -> s1 [0, 72] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s1 -> s6 [73, 73] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [74, 65535] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [0, 72] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s2 -> s2 [0, 72] { R749 += 1, R684 += 1, R685 += 1 };
  s2 -> s3 [73, 73] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s2 -> s4 [73, 73] { R749 += 1, R684 += 1, R685 += 1 };
  s2 -> s5 [73, 73] { R749 += 1, R684 += 1, R685 += 1 };
  s2 -> s6 [73, 73] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [74, 65535] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s2 -> s2 [74, 65535] { R749 += 1, R684 += 1, R685 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R749 += 1, R684 += 1, R685 += 1 };
  s4 -> s6 [0, 65535] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R749 += 1, R685 += 1, R686 += 1, R687 += 1 };
  s7 -> s7 [0, 65535];
  accepting s1, s3, s6, s7;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [106, 106];
  accepting s1;
};
};
constraint R2 = R721 && R20 - R721 = -1 && R21 = R721 && R22 - R721 = -1 && R23 = R721 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R487 + R486 + -1*R689 + -1*R685 = 0 && R502 + R500 = 0 && R503 + R501 + -1*R689 + -1*R685 = 0 && R688 + R684 = 0 && R690 + R686 = 0 && R691 + R687 = 0 && R692 = 0 && R693 = R721 && R694 = 0 && R695 = R721 && R696 = 0 && R697 = R721 && R698 = 0 && R699 = R721 && R700 = 0 && R701 = R721 && R702 = 0 && R703 = R721 && R704 = 0 && R705 = R721 && R706 = 0 && R707 = R721 && R708 = 0 && R709 = R721 && R710 = 0 && R711 = R721 && R712 = 0 && R713 = R721 && R714 = 0 && R715 = R721 && R716 = 0 && R717 = R721 && R718 = 0 && R719 = R721 && R720 = 0 && R724 = 0 && R725 = 0 && R748 = 0 && R749 = 0 && R11 < 1 && R12 < 1 && R489 + R488 < 1 && -1*R509 + -1*R506 < 1 && R515 + R512 < 1 && -1*R689 + -1*R685 < 1 && 0 < R721 && (R507 + R504 != 0 || R508 + R505 + -1*R689 + -1*R685 = 0 || R509 + R506 < 1) && (R509 + R506 != 0 || R533 + R528 = 0 || (R522 + R518 = 0 && R523 + R519 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R531 + R526 = 0 && R532 + R527 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R540 + R536 = 0 && R541 + R537 = 0)) && (R509 + R506 != 0 || ((R507 + R504 != 0 || R508 + R505 + -1*R689 + -1*R685 = 0 || R689 + R685 < 1) && (R507 + R504 = 0 || R689 + R685 < 1))) && (R513 + R510 != 0 || R514 + R511 + -1*R689 + -1*R685 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R520 + R516 != 0 || R521 + R517 + -1*R689 + -1*R685 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R522 + R518 != 0 || R509 + R506 + -1*R523 + -1*R519 = 0 || R509 + R506 < 1) && (R529 + R524 != 0 || R530 + R525 + -1*R689 + -1*R685 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R531 + R526 != 0 || R509 + R506 + -1*R532 + -1*R527 = 0 || R509 + R506 < 1) && (R538 + R534 != 0 || R539 + R535 + -1*R689 + -1*R685 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R540 + R536 != 0 || R509 + R506 + -1*R541 + -1*R537 = 0 || R509 + R506 < 1) && (R547 + R542 != 0 || R548 + R543 + -1*R689 + -1*R685 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R19 = 0 || (R722 = 0 && R723 = 0)) && (R19 = 0 || (R726 = 0 && R727 = 0)) && (R19 = 0 || (R728 = 0 && R729 = 0)) && (R19 = 0 || (R730 = 0 && R731 = 0)) && (R19 = 0 || (R732 = 0 && R733 = 0)) && (R19 = 0 || (R734 = 0 && R735 = 0)) && (R19 = 0 || (R736 = 0 && R737 = 0)) && (R19 = 0 || (R738 = 0 && R739 = 0)) && (R19 = 0 || (R740 = 0 && R741 = 0)) && (R19 = 0 || (R742 = 0 && R743 = 0)) && (R19 = 0 || (R744 = 0 && R745 = 0)) && (R19 = 0 || (R746 = 0 && R747 = 0)) && (R495 + R492 = 0 || (R493 + R490 = 0 && R494 + R491 = 0)) && (R495 + R492 = 0 || (R498 + R496 = 0 && R499 + R497 = 0)) && (R507 + R504 = 0 || R509 + R506 < 1) && (R513 + R510 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R520 + R516 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R522 + R518 = 0 || R509 + R506 < 1) && (R529 + R524 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R531 + R526 = 0 || R509 + R506 < 1) && (R538 + R534 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R540 + R536 = 0 || R509 + R506 < 1) && (R547 + R542 = 0 || (R509 + R506 = 0 && R689 + R685 = 0)) && (R551 + R546 = 0 || (R549 + R544 = 0 && R550 + R545 = 0));
// End of Parikh automata intersection problem
