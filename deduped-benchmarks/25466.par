// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 72] { R627 += 1 };
  s0 -> s0 [0, 65535] { R626 += 1, R627 += 1 };
  s0 -> s1 [74, 65535] { R627 += 1 };
  s1 -> s1 [0, 72] { R627 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R627 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R629 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R628 += 1, R629 += 1 };
  s1 -> s1 [0, 65535] { R629 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R630 += 1, R631 += 1 };
  s0 -> s1 [0, 65535] { R631 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R631 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R633 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R632 += 1, R633 += 1 };
  s1 -> s1 [0, 65535] { R633 += 1, R487 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 73] { R635 += 1 };
  s0 -> s0 [0, 65535] { R634 += 1, R635 += 1 };
  s0 -> s2 [0, 65535] { R635 += 1, R489 += 1 };
  s0 -> s1 [75, 65535] { R635 += 1 };
  s1 -> s1 [0, 73] { R635 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [75, 65535] { R635 += 1 };
  s2 -> s1 [0, 73] { R635 += 1 };
  s2 -> s2 [0, 65535] { R635 += 1, R489 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R635 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R636 += 1, R637 += 1 };
  s0 -> s1 [0, 65535] { R637 += 1, R493 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R637 += 1, R494 += 1, R495 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R637 += 1, R493 += 1, R494 += 1 };
  s1 -> s2 [0, 65535] { R637 += 1, R494 += 1, R495 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R637 += 1, R494 += 1, R495 += 1 };
  s2 -> s4 [0, 65535] { R637 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R637 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 73] { R639 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R639 += 1, R498 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R638 += 1, R639 += 1 };
  s0 -> s3 [74, 74] { R639 += 1, R499 += 1 };
  s0 -> s4 [74, 74] { R639 += 1, R499 += 1 };
  s0 -> s1 [88, 65535] { R639 += 1, R499 += 1 };
  s1 -> s1 [0, 73] { R639 += 1, R499 += 1 };
  s1 -> s1 [0, 65535] { R639 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [74, 74] { R639 += 1, R499 += 1 };
  s1 -> s4 [74, 74] { R639 += 1, R499 += 1 };
  s1 -> s1 [88, 65535] { R639 += 1, R499 += 1 };
  s2 -> s1 [0, 73] { R639 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R639 += 1, R498 += 1, R499 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [74, 74] { R639 += 1, R499 += 1 };
  s2 -> s4 [74, 74] { R639 += 1, R499 += 1 };
  s2 -> s1 [88, 65535] { R639 += 1, R499 += 1 };
  s3 -> s3 [0, 74] { R639 += 1, R499 += 1 };
  s3 -> s3 [0, 65535] { R639 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [88, 65535] { R639 += 1, R499 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R639 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 73] { R641 += 1, R503 += 1 };
  s0 -> s2 [0, 65535] { R641 += 1, R502 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R640 += 1, R641 += 1 };
  s0 -> s3 [74, 74] { R641 += 1, R503 += 1 };
  s0 -> s1 [75, 65535] { R641 += 1, R503 += 1 };
  s1 -> s1 [0, 73] { R641 += 1, R503 += 1 };
  s1 -> s3 [74, 74] { R641 += 1, R503 += 1 };
  s1 -> s1 [75, 65535] { R641 += 1, R503 += 1 };
  s2 -> s1 [0, 73] { R641 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R641 += 1, R502 += 1, R503 += 1 };
  s2 -> s3 [74, 74] { R641 += 1, R503 += 1 };
  s2 -> s1 [75, 65535] { R641 += 1, R503 += 1 };
  s3 -> s3 [0, 65535] { R641 += 1, R503 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R641 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R641 += 1 };
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s0 [0, 65535] { R642 += 1, R643 += 1 };
  s0 -> s1 [0, 65535] { R643 += 1, R508 += 1, R509 += 1 };
  s0 -> s2 [0, 65535] { R643 += 1, R507 += 1, R508 += 1 };
  s1 -> s4 [0, 65535] { R643 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R643 += 1, R508 += 1, R509 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R643 += 1, R508 += 1, R509 += 1 };
  s2 -> s2 [0, 65535] { R643 += 1, R507 += 1, R508 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R643 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 73] { R645 += 1, R514 += 1 };
  s0 -> s0 [0, 65535] { R644 += 1, R645 += 1 };
  s0 -> s2 [0, 65535] { R645 += 1, R514 += 1, R515 += 1 };
  s0 -> s3 [0, 65535] { R645 += 1, R513 += 1, R514 += 1 };
  s0 -> s1 [75, 65535] { R645 += 1, R514 += 1 };
  s1 -> s1 [0, 73] { R645 += 1, R514 += 1 };
  s1 -> s1 [0, 65535] { R645 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [75, 65535] { R645 += 1, R514 += 1 };
  s2 -> s1 [0, 73] { R645 += 1, R514 += 1 };
  s2 -> s5 [0, 65535] { R645 += 1 };
  s2 -> s2 [0, 65535] { R645 += 1, R514 += 1, R515 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [75, 65535] { R645 += 1, R514 += 1 };
  s3 -> s1 [0, 73] { R645 += 1, R514 += 1 };
  s3 -> s2 [0, 65535] { R645 += 1, R514 += 1, R515 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R645 += 1, R513 += 1, R514 += 1 };
  s3 -> s1 [75, 65535] { R645 += 1, R514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R645 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 73] { R647 += 1, R521 += 1, R523 += 1 };
  s0 -> s2 [0, 65535] { R647 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s0 -> s3 [0, 65535] { R647 += 1, R520 += 1, R521 += 1 };
  s0 -> s0 [0, 65535] { R646 += 1, R647 += 1 };
  s0 -> s1 [75, 65535] { R647 += 1, R521 += 1, R523 += 1 };
  s1 -> s1 [0, 73] { R647 += 1, R521 += 1, R523 += 1 };
  s1 -> s5 [0, 65535] { R647 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R647 += 1, R521 += 1 };
  s1 -> s1 [75, 65535] { R647 += 1, R521 += 1, R523 += 1 };
  s2 -> s1 [0, 73] { R647 += 1, R521 += 1, R523 += 1 };
  s2 -> s2 [0, 65535] { R647 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s2 -> s5 [0, 65535] { R647 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [75, 65535] { R647 += 1, R521 += 1, R523 += 1 };
  s3 -> s1 [0, 73] { R647 += 1, R521 += 1, R523 += 1 };
  s3 -> s2 [0, 65535] { R647 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s3 -> s3 [0, 65535] { R647 += 1, R520 += 1, R521 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [75, 65535] { R647 += 1, R521 += 1, R523 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R647 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R649 += 1, R529 += 1, R530 += 1 };
  s0 -> s2 [0, 65535] { R649 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s0 -> s0 [0, 65535] { R648 += 1, R649 += 1 };
  s0 -> s3 [0, 65535] { R649 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s1 -> s1 [0, 65535] { R649 += 1, R529 += 1, R530 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R649 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s1 -> s3 [0, 65535] { R649 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s2 -> s6 [0, 65535] { R649 += 1, R530 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R649 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s2 -> s5 [0, 65535] { R649 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R649 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s3 -> s5 [0, 65535] { R649 += 1 };
  s3 -> s3 [0, 65535] { R649 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R649 += 1 };
  s6 -> s6 [0, 65535] { R649 += 1, R530 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R649 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R651 += 1, R539 += 1, R541 += 1 };
  s0 -> s2 [0, 65535] { R651 += 1, R538 += 1, R539 += 1 };
  s0 -> s3 [0, 65535] { R651 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s0 -> s0 [0, 65535] { R650 += 1, R651 += 1 };
  s0 -> s1 [87, 65535] { R651 += 1, R539 += 1, R541 += 1 };
  s1 -> s1 [0, 74] { R651 += 1, R539 += 1, R541 += 1 };
  s1 -> s4 [0, 65535] { R651 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R651 += 1, R539 += 1 };
  s1 -> s1 [87, 65535] { R651 += 1, R539 += 1, R541 += 1 };
  s2 -> s1 [0, 74] { R651 += 1, R539 += 1, R541 += 1 };
  s2 -> s2 [0, 65535] { R651 += 1, R538 += 1, R539 += 1 };
  s2 -> s3 [0, 65535] { R651 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [87, 65535] { R651 += 1, R539 += 1, R541 += 1 };
  s3 -> s1 [0, 74] { R651 += 1, R539 += 1, R541 += 1 };
  s3 -> s4 [0, 65535] { R651 += 1 };
  s3 -> s3 [0, 65535] { R651 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [87, 65535] { R651 += 1, R539 += 1, R541 += 1 };
  s4 -> s4 [0, 65535] { R651 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R653 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s0 -> s0 [0, 65535] { R652 += 1, R653 += 1 };
  s0 -> s2 [0, 65535] { R653 += 1, R547 += 1, R548 += 1 };
  s0 -> s3 [0, 65535] { R653 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s1 -> s1 [0, 65535] { R653 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s1 -> s4 [0, 65535] { R653 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R653 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s2 -> s1 [0, 65535] { R653 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s2 -> s2 [0, 65535] { R653 += 1, R547 += 1, R548 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R653 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s3 -> s4 [0, 65535] { R653 += 1 };
  s3 -> s5 [0, 65535] { R653 += 1, R548 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R653 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s4 -> s4 [0, 65535] { R653 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R653 += 1 };
  s5 -> s5 [0, 65535] { R653 += 1, R548 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R655 += 1, R623 += 1, R625 += 1 };
  s0 -> s0 [0, 65535] { R654 += 1, R655 += 1 };
  s0 -> s2 [74, 74] { R655 += 1, R623 += 1, R625 += 1 };
  s0 -> s3 [87, 87] { R655 += 1, R623 += 1, R625 += 1 };
  s0 -> s1 [88, 65535] { R655 += 1, R623 += 1, R625 += 1 };
  s1 -> s1 [0, 73] { R655 += 1, R623 += 1, R625 += 1 };
  s1 -> s2 [74, 74] { R655 += 1, R623 += 1, R625 += 1 };
  s1 -> s3 [87, 87] { R655 += 1, R623 += 1, R625 += 1 };
  s1 -> s1 [88, 65535] { R655 += 1, R623 += 1, R625 += 1 };
  s2 -> s2 [0, 74] { R655 += 1, R623 += 1, R625 += 1 };
  s2 -> s7 [87, 87] { R655 += 1, R623 += 1, R625 += 1 };
  s2 -> s2 [88, 65535] { R655 += 1, R623 += 1, R625 += 1 };
  s3 -> s3 [0, 73] { R655 += 1, R623 += 1, R625 += 1 };
  s3 -> s4 [0, 65535] { R655 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R655 += 1, R623 += 1 };
  s3 -> s6 [74, 74] { R655 += 1, R623 += 1, R625 += 1 };
  s3 -> s7 [74, 74] { R655 += 1, R623 += 1, R625 += 1 };
  s3 -> s3 [87, 65535] { R655 += 1, R623 += 1, R625 += 1 };
  s4 -> s4 [0, 65535] { R655 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R655 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R655 += 1, R623 += 1 };
  s7 -> s7 [0, 74] { R655 += 1, R623 += 1, R625 += 1 };
  s7 -> s4 [0, 65535] { R655 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R655 += 1, R623 += 1 };
  s7 -> s7 [87, 65535] { R655 += 1, R623 += 1, R625 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R656 += 1, R657 += 1 };
  s0 -> s1 [0, 65535] { R657 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R657 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 72] { R659 += 1 };
  s0 -> s0 [0, 65535] { R658 += 1, R659 += 1 };
  s0 -> s2 [73, 73] { R659 += 1 };
  s0 -> s3 [73, 73] { R659 += 1 };
  s0 -> s4 [74, 74] { R659 += 1 };
  s0 -> s1 [75, 65535] { R659 += 1 };
  s1 -> s1 [0, 72] { R659 += 1 };
  s1 -> s2 [73, 73] { R659 += 1 };
  s1 -> s3 [73, 73] { R659 += 1 };
  s1 -> s4 [74, 74] { R659 += 1 };
  s1 -> s1 [75, 65535] { R659 += 1 };
  s3 -> s3 [0, 73] { R659 += 1 };
  s3 -> s6 [74, 74] { R659 += 1 };
  s3 -> s3 [75, 65535] { R659 += 1 };
  s4 -> s4 [0, 72] { R659 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [73, 73] { R659 += 1 };
  s4 -> s6 [73, 73] { R659 += 1 };
  s4 -> s4 [74, 65535] { R659 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R659 += 1 };
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 72] { R661 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R660 += 1, R661 += 1 };
  s0 -> s2 [73, 73] { R661 += 1, R486 += 1 };
  s0 -> s3 [73, 73] { R661 += 1, R486 += 1 };
  s0 -> s1 [74, 65535] { R661 += 1, R486 += 1 };
  s1 -> s1 [0, 72] { R661 += 1, R486 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R661 += 1, R486 += 1 };
  s1 -> s3 [73, 73] { R661 += 1, R486 += 1 };
  s1 -> s1 [74, 65535] { R661 += 1, R486 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R661 += 1, R486 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 72] { R663 += 1, R488 += 1 };
  s0 -> s0 [0, 65535] { R662 += 1, R663 += 1 };
  s0 -> s2 [73, 73] { R663 += 1, R488 += 1 };
  s0 -> s3 [73, 73] { R663 += 1, R488 += 1 };
  s0 -> s1 [74, 65535] { R663 += 1, R488 += 1 };
  s1 -> s1 [0, 72] { R663 += 1, R488 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R663 += 1, R488 += 1 };
  s1 -> s3 [73, 73] { R663 += 1, R488 += 1 };
  s1 -> s1 [74, 65535] { R663 += 1, R488 += 1 };
  s2 -> s2 [0, 65535] { R663 += 1, R488 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 72] { R665 += 1, R490 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R664 += 1, R665 += 1 };
  s0 -> s2 [73, 73] { R665 += 1, R490 += 1, R491 += 1 };
  s0 -> s3 [73, 73] { R665 += 1, R490 += 1, R491 += 1 };
  s0 -> s1 [74, 65535] { R665 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 72] { R665 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R665 += 1, R490 += 1, R491 += 1 };
  s1 -> s3 [73, 73] { R665 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [74, 65535] { R665 += 1, R490 += 1, R491 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R665 += 1, R490 += 1, R491 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 72] { R667 += 1, R496 += 1, R497 += 1 };
  s0 -> s0 [0, 65535] { R666 += 1, R667 += 1 };
  s0 -> s2 [73, 73] { R667 += 1, R496 += 1, R497 += 1 };
  s0 -> s3 [73, 73] { R667 += 1, R496 += 1, R497 += 1 };
  s0 -> s1 [74, 65535] { R667 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 72] { R667 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R667 += 1, R496 += 1, R497 += 1 };
  s1 -> s3 [73, 73] { R667 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [74, 65535] { R667 += 1, R496 += 1, R497 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R667 += 1, R496 += 1, R497 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 72] { R669 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R668 += 1, R669 += 1 };
  s0 -> s2 [73, 73] { R669 += 1, R500 += 1, R501 += 1 };
  s0 -> s3 [73, 73] { R669 += 1, R500 += 1, R501 += 1 };
  s0 -> s1 [74, 65535] { R669 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 72] { R669 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R669 += 1, R500 += 1, R501 += 1 };
  s1 -> s3 [73, 73] { R669 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [74, 65535] { R669 += 1, R500 += 1, R501 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R669 += 1, R500 += 1, R501 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 72] { R671 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R670 += 1, R671 += 1 };
  s0 -> s2 [73, 73] { R671 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [73, 73] { R671 += 1, R504 += 1, R505 += 1 };
  s0 -> s1 [74, 65535] { R671 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 72] { R671 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R671 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [73, 73] { R671 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [74, 65535] { R671 += 1, R504 += 1, R505 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R671 += 1, R504 += 1, R505 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R673 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R672 += 1, R673 += 1 };
  s0 -> s2 [73, 73] { R673 += 1, R510 += 1, R511 += 1 };
  s0 -> s3 [73, 73] { R673 += 1, R510 += 1, R511 += 1 };
  s0 -> s1 [74, 65535] { R673 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 72] { R673 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R673 += 1, R510 += 1, R511 += 1 };
  s1 -> s3 [73, 73] { R673 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [74, 65535] { R673 += 1, R510 += 1, R511 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R673 += 1, R510 += 1, R511 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R675 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R674 += 1, R675 += 1 };
  s0 -> s2 [73, 73] { R675 += 1, R516 += 1, R517 += 1 };
  s0 -> s3 [73, 73] { R675 += 1, R516 += 1, R517 += 1 };
  s0 -> s1 [74, 65535] { R675 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 72] { R675 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R675 += 1, R516 += 1, R517 += 1 };
  s1 -> s3 [73, 73] { R675 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [74, 65535] { R675 += 1, R516 += 1, R517 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R675 += 1, R516 += 1, R517 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R677 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R676 += 1, R677 += 1 };
  s0 -> s2 [73, 73] { R677 += 1, R524 += 1, R525 += 1 };
  s0 -> s3 [73, 73] { R677 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [74, 65535] { R677 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 72] { R677 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R677 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [73, 73] { R677 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [74, 65535] { R677 += 1, R524 += 1, R525 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R677 += 1, R524 += 1, R525 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R679 += 1, R534 += 1, R535 += 1 };
  s0 -> s0 [0, 65535] { R678 += 1, R679 += 1 };
  s0 -> s2 [73, 73] { R679 += 1, R534 += 1, R535 += 1 };
  s0 -> s3 [73, 73] { R679 += 1, R534 += 1, R535 += 1 };
  s0 -> s1 [74, 65535] { R679 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 72] { R679 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R679 += 1, R534 += 1, R535 += 1 };
  s1 -> s3 [73, 73] { R679 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [74, 65535] { R679 += 1, R534 += 1, R535 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R679 += 1, R534 += 1, R535 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R681 += 1, R542 += 1, R543 += 1 };
  s0 -> s0 [0, 65535] { R680 += 1, R681 += 1 };
  s0 -> s2 [73, 73] { R681 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [73, 73] { R681 += 1, R542 += 1, R543 += 1 };
  s0 -> s1 [74, 65535] { R681 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 72] { R681 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R681 += 1, R542 += 1, R543 += 1 };
  s1 -> s3 [73, 73] { R681 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [74, 65535] { R681 += 1, R542 += 1, R543 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R681 += 1, R542 += 1, R543 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R683 += 1, R619 += 1, R621 += 1 };
  s0 -> s2 [0, 72] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s0 -> s3 [0, 72] { R683 += 1, R618 += 1, R619 += 1 };
  s0 -> s0 [0, 65535] { R682 += 1, R683 += 1 };
  s0 -> s4 [73, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s0 -> s5 [73, 73] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s0 -> s6 [73, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s0 -> s7 [73, 73] { R683 += 1, R618 += 1, R619 += 1 };
  s0 -> s8 [73, 73] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s0 -> s9 [73, 73] { R683 += 1, R618 += 1, R619 += 1 };
  s0 -> s2 [74, 65535] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s0 -> s3 [74, 65535] { R683 += 1, R618 += 1, R619 += 1 };
  s0 -> s1 [88, 65535] { R683 += 1, R619 += 1, R621 += 1 };
  s1 -> s1 [0, 72] { R683 += 1, R619 += 1, R621 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s4 [73, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s1 -> s6 [73, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s1 -> s1 [88, 65535] { R683 += 1, R619 += 1, R621 += 1 };
  s2 -> s1 [0, 72] { R683 += 1, R619 += 1, R621 += 1 };
  s2 -> s2 [0, 72] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s2 -> s4 [73, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s2 -> s5 [73, 73] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s2 -> s6 [73, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s2 -> s8 [73, 73] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s2 -> s2 [74, 65535] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s2 -> s1 [88, 65535] { R683 += 1, R619 += 1, R621 += 1 };
  s3 -> s1 [0, 72] { R683 += 1, R619 += 1, R621 += 1 };
  s3 -> s2 [0, 72] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s3 -> s3 [0, 72] { R683 += 1, R618 += 1, R619 += 1 };
  s3 -> s4 [73, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s3 -> s5 [73, 73] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s3 -> s6 [73, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s3 -> s7 [73, 73] { R683 += 1, R618 += 1, R619 += 1 };
  s3 -> s8 [73, 73] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s3 -> s9 [73, 73] { R683 += 1, R618 += 1, R619 += 1 };
  s3 -> s2 [74, 65535] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s3 -> s3 [74, 65535] { R683 += 1, R618 += 1, R619 += 1 };
  s3 -> s1 [88, 65535] { R683 += 1, R619 += 1, R621 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s6 [0, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s5 -> s5 [0, 65535] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s5 -> s6 [88, 65535] { R683 += 1, R619 += 1, R621 += 1 };
  s6 -> s6 [0, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s6 [88, 65535] { R683 += 1, R619 += 1, R621 += 1 };
  s9 -> s6 [0, 73] { R683 += 1, R619 += 1, R621 += 1 };
  s9 -> s5 [0, 65535] { R683 += 1, R619 += 1, R620 += 1, R621 += 1 };
  s9 -> s9 [0, 65535] { R683 += 1, R618 += 1, R619 += 1 };
  s9 -> s6 [88, 65535] { R683 += 1, R619 += 1, R621 += 1 };
  accepting s1, s4, s6;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [106, 106];
  accepting s1;
};
};
constraint R2 = R655 && R20 - R655 = -1 && R21 = R655 && R22 - R655 = -1 && R23 = R655 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R487 + R486 + -1*R623 + -1*R619 = 0 && R502 + R500 = 0 && R503 + R501 + -1*R623 + -1*R619 = 0 && R622 + R618 = 0 && R624 + R620 = 0 && R625 + R621 = 0 && R626 = 0 && R627 = R655 && R628 = 0 && R629 = R655 && R630 = 0 && R631 = R655 && R632 = 0 && R633 = R655 && R634 = 0 && R635 = R655 && R636 = 0 && R637 = R655 && R638 = 0 && R639 = R655 && R640 = 0 && R641 = R655 && R642 = 0 && R643 = R655 && R644 = 0 && R645 = R655 && R646 = 0 && R647 = R655 && R648 = 0 && R649 = R655 && R650 = 0 && R651 = R655 && R652 = 0 && R653 = R655 && R654 = 0 && R658 = 0 && R659 = 0 && R682 = 0 && R683 = 0 && R11 < 1 && R12 < 1 && R489 + R488 < 1 && -1*R509 + -1*R506 < 1 && R515 + R512 < 1 && -1*R623 + -1*R619 < 1 && 0 < R655 && (R507 + R504 != 0 || R508 + R505 + -1*R623 + -1*R619 = 0 || R509 + R506 < 1) && (R509 + R506 != 0 || R533 + R528 = 0 || (R522 + R518 = 0 && R523 + R519 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R531 + R526 = 0 && R532 + R527 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R540 + R536 = 0 && R541 + R537 = 0)) && (R509 + R506 != 0 || ((R507 + R504 != 0 || R508 + R505 + -1*R623 + -1*R619 = 0 || R623 + R619 < 1) && (R507 + R504 = 0 || R623 + R619 < 1))) && (R513 + R510 != 0 || R514 + R511 + -1*R623 + -1*R619 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R520 + R516 != 0 || R521 + R517 + -1*R623 + -1*R619 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R522 + R518 != 0 || R509 + R506 + -1*R523 + -1*R519 = 0 || R509 + R506 < 1) && (R529 + R524 != 0 || R530 + R525 + -1*R623 + -1*R619 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R531 + R526 != 0 || R509 + R506 + -1*R532 + -1*R527 = 0 || R509 + R506 < 1) && (R538 + R534 != 0 || R539 + R535 + -1*R623 + -1*R619 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R540 + R536 != 0 || R509 + R506 + -1*R541 + -1*R537 = 0 || R509 + R506 < 1) && (R547 + R542 != 0 || R548 + R543 + -1*R623 + -1*R619 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R19 = 0 || (R656 = 0 && R657 = 0)) && (R19 = 0 || (R660 = 0 && R661 = 0)) && (R19 = 0 || (R662 = 0 && R663 = 0)) && (R19 = 0 || (R664 = 0 && R665 = 0)) && (R19 = 0 || (R666 = 0 && R667 = 0)) && (R19 = 0 || (R668 = 0 && R669 = 0)) && (R19 = 0 || (R670 = 0 && R671 = 0)) && (R19 = 0 || (R672 = 0 && R673 = 0)) && (R19 = 0 || (R674 = 0 && R675 = 0)) && (R19 = 0 || (R676 = 0 && R677 = 0)) && (R19 = 0 || (R678 = 0 && R679 = 0)) && (R19 = 0 || (R680 = 0 && R681 = 0)) && (R495 + R492 = 0 || (R493 + R490 = 0 && R494 + R491 = 0)) && (R495 + R492 = 0 || (R498 + R496 = 0 && R499 + R497 = 0)) && (R507 + R504 = 0 || R509 + R506 < 1) && (R513 + R510 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R520 + R516 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R522 + R518 = 0 || R509 + R506 < 1) && (R529 + R524 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R531 + R526 = 0 || R509 + R506 < 1) && (R538 + R534 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R540 + R536 = 0 || R509 + R506 < 1) && (R547 + R542 = 0 || (R509 + R506 = 0 && R623 + R619 = 0)) && (R551 + R546 = 0 || (R549 + R544 = 0 && R550 + R545 = 0));
// End of Parikh automata intersection problem
