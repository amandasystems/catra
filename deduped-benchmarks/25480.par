// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R126, R127, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining P29
automaton P29_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R184 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R194 += 1, R195 += 1 };
  s0 -> s1 [12, 12] { R195 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R196 += 1, R197 += 1 };
  s0 -> s1 [0, 65535] { R197 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R197 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R199 += 1 };
  s0 -> s0 [0, 65535] { R198 += 1, R199 += 1 };
  s0 -> s2 [9, 13] { R199 += 1 };
  s0 -> s1 [14, 31] { R199 += 1 };
  s0 -> s2 [32, 32] { R199 += 1 };
  s0 -> s1 [33, 65535] { R199 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R199 += 1 };
  s2 -> s1 [0, 65535] { R199 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R201 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R201 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R217 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s2 [77, 77] { R217 += 1 };
  s0 -> s1 [78, 65535] { R217 += 1 };
  s1 -> s1 [0, 64] { R217 += 1 };
  s1 -> s2 [77, 77] { R217 += 1 };
  s1 -> s1 [78, 65535] { R217 += 1 };
  s2 -> s2 [0, 64] { R217 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [77, 65535] { R217 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R218 += 1, R219 += 1 };
  s0 -> s1 [0, 65535] { R219 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R219 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 76] { R221 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R220 += 1, R221 += 1 };
  s0 -> s2 [0, 65535] { R221 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [77, 77] { R221 += 1 };
  s0 -> s1 [78, 65535] { R221 += 1, R127 += 1 };
  s1 -> s1 [0, 76] { R221 += 1, R127 += 1 };
  s1 -> s3 [77, 77] { R221 += 1 };
  s1 -> s1 [78, 65535] { R221 += 1, R127 += 1 };
  s2 -> s1 [0, 76] { R221 += 1, R127 += 1 };
  s2 -> s2 [0, 65535] { R221 += 1, R126 += 1, R127 += 1 };
  s2 -> s3 [77, 77] { R221 += 1 };
  s2 -> s1 [78, 65535] { R221 += 1, R127 += 1 };
  s3 -> s3 [0, 65535] { R221 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R223 += 1, R187 += 1 };
  s0 -> s0 [0, 65535] { R222 += 1, R223 += 1 };
  s0 -> s2 [0, 65535] { R223 += 1, R186 += 1, R187 += 1 };
  s0 -> s3 [9, 13] { R223 += 1, R187 += 1 };
  s0 -> s1 [14, 31] { R223 += 1, R187 += 1 };
  s0 -> s3 [32, 32] { R223 += 1, R187 += 1 };
  s0 -> s1 [33, 65535] { R223 += 1, R187 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R223 += 1, R187 += 1 };
  s1 -> s5 [0, 65535] { R223 += 1 };
  s2 -> s1 [0, 8] { R223 += 1, R187 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R223 += 1, R186 += 1, R187 += 1 };
  s2 -> s3 [9, 13] { R223 += 1, R187 += 1 };
  s2 -> s1 [14, 31] { R223 += 1, R187 += 1 };
  s2 -> s3 [32, 32] { R223 += 1, R187 += 1 };
  s2 -> s1 [33, 65535] { R223 += 1, R187 += 1 };
  s3 -> s1 [0, 65535] { R223 += 1, R187 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R223 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R225 += 1, R188 += 1, R189 += 1 };
  s0 -> s0 [0, 65535] { R224 += 1, R225 += 1 };
  s0 -> s2 [0, 65535] { R225 += 1, R189 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R225 += 1, R188 += 1, R189 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R225 += 1, R189 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R225 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R225 += 1, R189 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R225 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R227 += 1, R191 += 1 };
  s0 -> s2 [0, 65535] { R227 += 1, R190 += 1, R191 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s3 [9, 13] { R227 += 1, R191 += 1 };
  s0 -> s1 [14, 31] { R227 += 1, R191 += 1 };
  s0 -> s3 [32, 32] { R227 += 1, R191 += 1 };
  s0 -> s1 [33, 65535] { R227 += 1, R191 += 1 };
  s1 -> s1 [0, 65535] { R227 += 1, R191 += 1 };
  s1 -> s5 [0, 65535] { R227 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R227 += 1, R191 += 1 };
  s2 -> s2 [0, 65535] { R227 += 1, R190 += 1, R191 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R227 += 1, R191 += 1 };
  s2 -> s1 [14, 31] { R227 += 1, R191 += 1 };
  s2 -> s3 [32, 32] { R227 += 1, R191 += 1 };
  s2 -> s1 [33, 65535] { R227 += 1, R191 += 1 };
  s3 -> s1 [0, 65535] { R227 += 1, R191 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R227 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R229 += 1, R192 += 1, R193 += 1 };
  s0 -> s2 [0, 65535] { R229 += 1, R193 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s1 -> s1 [0, 65535] { R229 += 1, R192 += 1, R193 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R229 += 1, R193 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R229 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R229 += 1, R193 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R229 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 76] { R231 += 1, R207 += 1 };
  s0 -> s2 [0, 65535] { R231 += 1, R206 += 1, R207 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s3 [77, 77] { R231 += 1, R207 += 1 };
  s0 -> s1 [78, 65535] { R231 += 1, R207 += 1 };
  s1 -> s1 [0, 76] { R231 += 1, R207 += 1 };
  s1 -> s3 [77, 77] { R231 += 1, R207 += 1 };
  s1 -> s1 [78, 65535] { R231 += 1, R207 += 1 };
  s2 -> s1 [0, 76] { R231 += 1, R207 += 1 };
  s2 -> s2 [0, 65535] { R231 += 1, R206 += 1, R207 += 1 };
  s2 -> s3 [77, 77] { R231 += 1, R207 += 1 };
  s2 -> s1 [78, 65535] { R231 += 1, R207 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R231 += 1, R207 += 1 };
  s3 -> s5 [0, 65535] { R231 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R231 += 1 };
  accepting s3, s4, s5;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R233 += 1, R209 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s2 [0, 65535] { R233 += 1, R208 += 1, R209 += 1 };
  s1 -> s1 [0, 65535] { R233 += 1, R209 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R233 += 1 };
  s2 -> s1 [0, 65535] { R233 += 1, R209 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R233 += 1, R208 += 1, R209 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R233 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 76] { R235 += 1, R211 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R235 += 1, R210 += 1, R211 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s3 [0, 65535] { R235 += 1, R211 += 1, R8 += 1, R9 += 1 };
  s0 -> s4 [77, 77] { R235 += 1, R211 += 1 };
  s0 -> s1 [78, 65535] { R235 += 1, R211 += 1, R9 += 1 };
  s1 -> s1 [0, 76] { R235 += 1, R211 += 1, R9 += 1 };
  s1 -> s4 [77, 77] { R235 += 1, R211 += 1 };
  s1 -> s1 [78, 65535] { R235 += 1, R211 += 1, R9 += 1 };
  s2 -> s1 [0, 76] { R235 += 1, R211 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R235 += 1, R210 += 1, R211 += 1 };
  s2 -> s3 [0, 65535] { R235 += 1, R211 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [77, 77] { R235 += 1, R211 += 1 };
  s2 -> s1 [78, 65535] { R235 += 1, R211 += 1, R9 += 1 };
  s3 -> s1 [0, 76] { R235 += 1, R211 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R235 += 1, R211 += 1, R8 += 1, R9 += 1 };
  s3 -> s4 [77, 77] { R235 += 1, R211 += 1 };
  s3 -> s1 [78, 65535] { R235 += 1, R211 += 1, R9 += 1 };
  s4 -> s4 [0, 65535] { R235 += 1, R211 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R235 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R235 += 1 };
  accepting s4, s5, s6;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 76] { R237 += 1, R213 += 1, R203 += 1 };
  s0 -> s2 [0, 65535] { R237 += 1, R213 += 1, R202 += 1, R203 += 1 };
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s0 -> s3 [0, 65535] { R237 += 1, R212 += 1, R213 += 1 };
  s0 -> s4 [77, 77] { R237 += 1, R213 += 1, R203 += 1 };
  s0 -> s1 [78, 65535] { R237 += 1, R213 += 1, R203 += 1 };
  s1 -> s1 [0, 76] { R237 += 1, R213 += 1, R203 += 1 };
  s1 -> s4 [77, 77] { R237 += 1, R213 += 1, R203 += 1 };
  s1 -> s1 [78, 65535] { R237 += 1, R213 += 1, R203 += 1 };
  s2 -> s1 [0, 76] { R237 += 1, R213 += 1, R203 += 1 };
  s2 -> s2 [0, 65535] { R237 += 1, R213 += 1, R202 += 1, R203 += 1 };
  s2 -> s4 [77, 77] { R237 += 1, R213 += 1, R203 += 1 };
  s2 -> s1 [78, 65535] { R237 += 1, R213 += 1, R203 += 1 };
  s3 -> s1 [0, 76] { R237 += 1, R213 += 1, R203 += 1 };
  s3 -> s2 [0, 65535] { R237 += 1, R213 += 1, R202 += 1, R203 += 1 };
  s3 -> s3 [0, 65535] { R237 += 1, R212 += 1, R213 += 1 };
  s3 -> s4 [77, 77] { R237 += 1, R213 += 1, R203 += 1 };
  s3 -> s1 [78, 65535] { R237 += 1, R213 += 1, R203 += 1 };
  s4 -> s5 [0, 65535] { R237 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R237 += 1, R213 += 1 };
  s4 -> s4 [0, 65535] { R237 += 1, R213 += 1, R203 += 1 };
  s5 -> s5 [0, 65535] { R237 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R237 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R237 += 1, R213 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R239 += 1, R214 += 1, R215 += 1 };
  s0 -> s2 [0, 65535] { R239 += 1, R215 += 1, R205 += 1, R185 += 1 };
  s0 -> s3 [0, 65535] { R239 += 1, R215 += 1, R204 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s1 -> s1 [0, 65535] { R239 += 1, R214 += 1, R215 += 1 };
  s1 -> s2 [0, 65535] { R239 += 1, R215 += 1, R205 += 1, R185 += 1 };
  s1 -> s3 [0, 65535] { R239 += 1, R215 += 1, R204 += 1, R205 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R239 += 1 };
  s2 -> s6 [0, 65535] { R239 += 1, R215 += 1 };
  s2 -> s2 [0, 65535] { R239 += 1, R215 += 1, R205 += 1, R185 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R239 += 1 };
  s3 -> s2 [0, 65535] { R239 += 1, R215 += 1, R205 += 1, R185 += 1 };
  s3 -> s3 [0, 65535] { R239 += 1, R215 += 1, R204 += 1, R205 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R239 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R239 += 1 };
  s6 -> s6 [0, 65535] { R239 += 1, R215 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
constraint R0 = R203 && R1 = R213 && R2 - R239 = 1 && R8 = 0 && R9 - R202 = -1 && R126 = 0 && R127 - R212 = -1 && R186 - R213 = -1 && R187 = R213 && R188 - R213 = -1 && R189 = R213 && R190 = 0 && R191 = 1 && R192 = 0 && R193 = 1 && R194 = R239 && R195 - R239 = 1 && R196 = R239 && R197 - R239 = 1 && R198 = 0 && R199 = 1 && R200 = 0 && R201 = 1 && R206 = R212 && R207 = R213 && R210 = R212 && R211 = R213 && R216 = 0 && R217 = R239 && R218 = 0 && R219 = R239 && R220 = 0 && R221 = R239 && R222 = 0 && R223 = R239 && R224 = 0 && R225 = R239 && R226 = 0 && R227 = R239 && R228 = 0 && R229 = R239 && R230 = 0 && R231 = R239 && R232 = 0 && R233 = R239 && R234 = 0 && R235 = R239 && R236 = 0 && R237 = R239 && R238 = 0 && R184 < 1 && R202 - R203 < 1 && -1 < R202 && R212 - R213 < 1 && -1 < R212 && 0 < R213 && -1 < R239 && (R202 != R204 || R203 = R205 || ((R185 != 0 || R203 - R204 < 1 || R204 < 0) && (R185 = 0 || R203 < R204 || R204 < 0))) && (R208 != R212 || R209 = R213 || (R203 = 0 && (R202 != 0 || R213 - R212 < 1))) && (R212 != R214 || R213 = R215 || ((R202 != 0 || R203 != 0 || R213 - R214 < 1 || R214 < 0) && (R203 < 1 || R213 < R214 || R214 < 0))) && (R202 = R204 || (R185 = 0 && R202 = R203)) && (R208 = R212 || (R203 = 0 && (R202 != 0 || R213 - R212 < 1))) && (R212 = R214 || (R203 = 0 && (R202 != 0 || R213 - R212 < 1)));
// End of Parikh automata intersection problem
