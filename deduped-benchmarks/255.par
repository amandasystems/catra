// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R2, R3, R4, R5, R6, R7, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P3
automaton P3_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s0 -> s1 [9, 9] { R92 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_2 {
  init s0;
  s0 -> s1 [0, 65535] { R94 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s1 -> s1 [0, 65535] { R94 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 31] { R110 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [32, 32] { R110 += 1 };
  s0 -> s1 [33, 65535] { R110 += 1 };
  s1 -> s1 [0, 31] { R110 += 1 };
  s1 -> s2 [32, 32] { R110 += 1 };
  s1 -> s1 [33, 65535] { R110 += 1 };
  s2 -> s2 [0, 65535] { R110 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value_4 {
  init s0;
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s1 [0, 65535] { R112 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R112 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 31] { R114 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R9 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s3 [32, 32] { R114 += 1 };
  s0 -> s1 [33, 65535] { R114 += 1, R10 += 1 };
  s1 -> s1 [0, 31] { R114 += 1, R10 += 1 };
  s1 -> s3 [32, 32] { R114 += 1 };
  s1 -> s1 [33, 65535] { R114 += 1, R10 += 1 };
  s2 -> s1 [0, 31] { R114 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R114 += 1, R9 += 1, R10 += 1 };
  s2 -> s3 [32, 32] { R114 += 1 };
  s2 -> s1 [33, 65535] { R114 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R114 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_6 {
  init s0;
  s0 -> s1 [0, 8] { R116 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s0 -> s3 [9, 13] { R116 += 1, R84 += 1 };
  s0 -> s1 [14, 31] { R116 += 1, R84 += 1 };
  s0 -> s3 [32, 32] { R116 += 1, R84 += 1 };
  s0 -> s1 [33, 65535] { R116 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R116 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1, R84 += 1 };
  s2 -> s1 [0, 8] { R116 += 1, R84 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R116 += 1, R83 += 1, R84 += 1 };
  s2 -> s3 [9, 13] { R116 += 1, R84 += 1 };
  s2 -> s1 [14, 31] { R116 += 1, R84 += 1 };
  s2 -> s3 [32, 32] { R116 += 1, R84 += 1 };
  s2 -> s1 [33, 65535] { R116 += 1, R84 += 1 };
  s3 -> s1 [0, 65535] { R116 += 1, R84 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R116 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value_7 {
  init s0;
  s0 -> s1 [0, 65535] { R118 += 1, R85 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R118 += 1, R86 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R118 += 1, R85 += 1, R86 += 1 };
  s1 -> s2 [0, 65535] { R118 += 1, R86 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R118 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R118 += 1, R86 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R118 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 8] { R120 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R120 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s3 [9, 13] { R120 += 1, R88 += 1 };
  s0 -> s1 [14, 31] { R120 += 1, R88 += 1 };
  s0 -> s3 [32, 32] { R120 += 1, R88 += 1 };
  s0 -> s1 [33, 65535] { R120 += 1, R88 += 1 };
  s1 -> s5 [0, 65535] { R120 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R120 += 1, R88 += 1 };
  s2 -> s1 [0, 8] { R120 += 1, R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R120 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [9, 13] { R120 += 1, R88 += 1 };
  s2 -> s1 [14, 31] { R120 += 1, R88 += 1 };
  s2 -> s3 [32, 32] { R120 += 1, R88 += 1 };
  s2 -> s1 [33, 65535] { R120 += 1, R88 += 1 };
  s3 -> s1 [0, 65535] { R120 += 1, R88 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R120 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value_9 {
  init s0;
  s0 -> s1 [0, 65535] { R122 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R122 += 1, R90 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R122 += 1, R89 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R122 += 1, R90 += 1, R6 += 1 };
  s2 -> s3 [0, 65535] { R122 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R122 += 1, R90 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R122 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 64] { R124 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R124 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s1 [91, 65535] { R124 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R124 += 1, R96 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R124 += 1 };
  s1 -> s1 [91, 65535] { R124 += 1, R96 += 1 };
  s2 -> s1 [0, 64] { R124 += 1, R96 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R124 += 1, R95 += 1, R96 += 1 };
  s2 -> s1 [91, 65535] { R124 += 1, R96 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 65535] { R126 += 1, R98 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s2 [0, 65535] { R126 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [0, 65535] { R126 += 1 };
  s1 -> s1 [0, 65535] { R126 += 1, R98 += 1, R74 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R126 += 1, R98 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R126 += 1, R97 += 1, R98 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R126 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_12 {
  init s0;
  s0 -> s1 [0, 65535] { R128 += 1, R100 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s1 -> s4 [0, 65535] { R128 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R128 += 1, R100 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R128 += 1, R100 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R128 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R128 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_13 {
  init s0;
  s0 -> s1 [0, 65535] { R130 += 1, R101 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R102 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s3 [11, 11] { R130 += 1, R102 += 1, R76 += 1 };
  s1 -> s1 [0, 65535] { R130 += 1, R101 += 1, R102 += 1 };
  s1 -> s2 [0, 65535] { R130 += 1, R102 += 1, R75 += 1, R76 += 1 };
  s1 -> s3 [11, 11] { R130 += 1, R102 += 1, R76 += 1 };
  s2 -> s2 [0, 65535] { R130 += 1, R102 += 1, R75 += 1, R76 += 1 };
  s2 -> s3 [11, 11] { R130 += 1, R102 += 1, R76 += 1 };
  s3 -> s3 [0, 65535] { R130 += 1, R102 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R130 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R130 += 1 };
  accepting s3, s4, s5;
};
automaton value_14 {
  init s0;
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s1 [0, 65535] { R132 += 1, R104 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R103 += 1, R104 += 1 };
  s0 -> s3 [0, 65535] { R132 += 1, R104 += 1, R78 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R132 += 1 };
  s1 -> s1 [0, 65535] { R132 += 1, R104 += 1, R77 += 1, R78 += 1 };
  s1 -> s3 [0, 65535] { R132 += 1, R104 += 1, R78 += 1, R3 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R132 += 1, R104 += 1, R77 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R132 += 1, R103 += 1, R104 += 1 };
  s2 -> s3 [0, 65535] { R132 += 1, R104 += 1, R78 += 1, R3 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R132 += 1 };
  s3 -> s5 [0, 65535] { R132 += 1, R104 += 1 };
  s3 -> s3 [0, 65535] { R132 += 1, R104 += 1, R78 += 1, R3 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R132 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R132 += 1 };
  s5 -> s5 [0, 65535] { R132 += 1, R104 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value_15 {
  init s0;
  s0 -> s1 [0, 8] { R134 += 1, R106 += 1, R80 += 1 };
  s0 -> s2 [0, 65535] { R134 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s3 [0, 65535] { R134 += 1, R106 += 1, R79 += 1, R80 += 1 };
  s0 -> s4 [9, 13] { R134 += 1, R106 += 1, R80 += 1 };
  s0 -> s1 [14, 31] { R134 += 1, R106 += 1, R80 += 1 };
  s0 -> s4 [32, 32] { R134 += 1, R106 += 1, R80 += 1 };
  s0 -> s1 [33, 65535] { R134 += 1, R106 += 1, R80 += 1 };
  s1 -> s5 [0, 65535] { R134 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R134 += 1, R106 += 1, R80 += 1 };
  s1 -> s7 [0, 65535] { R134 += 1, R106 += 1 };
  s2 -> s1 [0, 8] { R134 += 1, R106 += 1, R80 += 1 };
  s2 -> s2 [0, 65535] { R134 += 1, R105 += 1, R106 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R134 += 1, R106 += 1, R79 += 1, R80 += 1 };
  s2 -> s4 [9, 13] { R134 += 1, R106 += 1, R80 += 1 };
  s2 -> s1 [14, 31] { R134 += 1, R106 += 1, R80 += 1 };
  s2 -> s4 [32, 32] { R134 += 1, R106 += 1, R80 += 1 };
  s2 -> s1 [33, 65535] { R134 += 1, R106 += 1, R80 += 1 };
  s3 -> s1 [0, 8] { R134 += 1, R106 += 1, R80 += 1 };
  s3 -> s5 [0, 65535] { R134 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R134 += 1, R106 += 1, R79 += 1, R80 += 1 };
  s3 -> s4 [9, 13] { R134 += 1, R106 += 1, R80 += 1 };
  s3 -> s1 [14, 31] { R134 += 1, R106 += 1, R80 += 1 };
  s3 -> s4 [32, 32] { R134 += 1, R106 += 1, R80 += 1 };
  s3 -> s1 [33, 65535] { R134 += 1, R106 += 1, R80 += 1 };
  s4 -> s1 [0, 65535] { R134 += 1, R106 += 1, R80 += 1 };
  s5 -> s5 [0, 65535] { R134 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R134 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R134 += 1, R106 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value_16 {
  init s0;
  s0 -> s1 [0, 65535] { R136 += 1, R108 += 1, R82 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R108 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s3 [0, 65535] { R136 += 1, R107 += 1, R108 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R136 += 1 };
  s1 -> s6 [0, 65535] { R136 += 1, R108 += 1 };
  s1 -> s1 [0, 65535] { R136 += 1, R108 += 1, R82 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R136 += 1 };
  s2 -> s1 [0, 65535] { R136 += 1, R108 += 1, R82 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R136 += 1, R108 += 1, R81 += 1, R82 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R136 += 1, R108 += 1, R82 += 1, R4 += 1 };
  s3 -> s2 [0, 65535] { R136 += 1, R108 += 1, R81 += 1, R82 += 1 };
  s3 -> s3 [0, 65535] { R136 += 1, R107 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R136 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R136 += 1 };
  s6 -> s6 [0, 65535] { R136 += 1, R108 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R76 && R1 = R108 && R2 = R136 && R9 = 0 && R10 - R107 = -1 && R75 - R76 = -1 && R83 - R108 = -1 && R84 = R108 && R85 - R108 = -1 && R86 = R108 && R87 = 0 && R88 = 1 && R89 = 0 && R90 = 1 && R91 = 0 && R92 = 1 && R93 = 0 && R94 = 1 && R99 = R107 && R100 = R108 && R101 = R107 && R102 = R108 && R103 = R107 && R104 = R108 && R105 = R107 && R106 = R108 && R109 = 1 && R110 = R136 && R111 = 1 && R112 = R136 && R113 = 1 && R114 = R136 && R115 = 1 && R116 = R136 && R117 = 1 && R118 = R136 && R119 = 1 && R120 = R136 && R121 = 1 && R122 = R136 && R123 = 1 && R124 = R136 && R125 = 1 && R126 = R136 && R127 = 1 && R128 = R136 && R129 = 1 && R130 = R136 && R131 = 1 && R132 = R136 && R133 = 1 && R134 = R136 && R135 = 1 && R76 != 0 && R107 - R108 < 1 && 0 < R107 && 0 < R136 && (R76 != R78 || R77 - R78 = -1 || (R3 = 0 && R78 < 0)) && (R79 != 0 || ((R4 != 0 || ((R76 != R80 || R80 = 1 || R80 < 0) && (R76 = R80 || R80 = 1 || R76 < 1))) && (R4 = 0 || ((R76 != R80 || R80 = 1 || R80 < 0) && (R80 != 1 || -1 < R76) && (R76 = R80 || R80 = 1))))) && (R81 != 0 || ((R4 != 0 || ((R76 != R82 || R82 = 1 || R82 < 0) && (R76 = R82 || R82 = 1 || R76 < 1))) && (R4 = 0 || ((R76 != R82 || R82 = 1 || R82 < 0) && (R82 != 1 || -1 < R76) && (R76 = R82 || R82 = 1))))) && (R95 != 0 || R96 - R107 = -1 || (R74 = 0 && R107 = 1)) && (R97 != 0 || R98 - R107 = -1 || (R74 = 0 && R107 = 1)) && (R76 = R78 || (R3 = 0 && R76 < 0)) && (R79 = 0 || (R4 = 0 && R76 < 0)) && (R81 = 0 || (R4 = 0 && R76 < 0)) && (R95 = 0 || (R74 = 0 && R107 = 1)) && (R97 = 0 || (R74 = 0 && R107 = 1));
// End of Parikh automata intersection problem
