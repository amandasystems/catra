// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R36, R38, R4, R40, R41, R44, R45, R46, R5, R7260, R7262, R7264, R7265, R7268, R7269, R7270, R7274, R7275, R7276, R7277, R7278, R7279, R7280, R7281, R7282, R7283, R7284, R7285, R7286, R7287, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R8069, R8070, R8071, R8072, R8073, R8074, R8075, R8076, R8077, R8078, R8079, R8080, R8081, R8082, R8083, R8084, R8085, R8086, R8087, R8088, R8089, R8090, R8091, R8092, R8093, R8094, R8095, R8096, R8097, R8098, R8099, R8100, R8101, R8102, R8103, R8104, R8105, R8106, R8107, R8108, R8109, R8110, R8111, R8112, R8113, R8114, R8115, R8116, R8117, R8118, R8119, R8120, R8121, R8122, R8123, R8124, R8125, R8126, R8127, R8128, R8129, R8130, R8131, R8132, R8133, R8134, R8135, R8136, R8137, R8138, R8139, R8140, R8141, R8142, R8143, R8144, R8145, R8146, R8147, R8148, R8149, R8150, R8151, R8152, R8153, R8154, R8155, R8156, R8157, R8158, R8159, R8160, R8161, R8162, R8163, R8164, R8165, R8166, R8167, R8168, R8169, R8170, R8171, R8172, R8173, R8174, R8175, R8176, R8177, R8178, R8179, R8180, R8181, R8182, R8183, R8184, R8185, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s2 [9, 13] { R29 += 1 };
  s0 -> s1 [14, 31] { R29 += 1 };
  s0 -> s2 [32, 32] { R29 += 1 };
  s0 -> s1 [33, 65535] { R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R29 += 1 };
  s2 -> s1 [0, 65535] { R29 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R7274 += 1, R7275 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R7277 += 1 };
  s0 -> s0 [0, 65535] { R7276 += 1, R7277 += 1 };
  s0 -> s2 [81, 81] { R7277 += 1 };
  s0 -> s3 [81, 81] { R7277 += 1 };
  s0 -> s1 [83, 65535] { R7277 += 1 };
  s1 -> s1 [0, 80] { R7277 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7277 += 1 };
  s1 -> s3 [81, 81] { R7277 += 1 };
  s1 -> s1 [83, 65535] { R7277 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R7277 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R7277 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R7278 += 1, R7279 += 1 };
  s0 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7280 += 1, R7281 += 1 };
  s0 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7281 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R7282 += 1, R7283 += 1 };
  s0 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7284 += 1, R7285 += 1 };
  s0 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R8137 += 1 };
  s0 -> s0 [0, 65535] { R8136 += 1, R8137 += 1 };
  s0 -> s2 [81, 81] { R8137 += 1 };
  s0 -> s1 [82, 65535] { R8137 += 1 };
  s1 -> s1 [0, 80] { R8137 += 1 };
  s1 -> s2 [81, 81] { R8137 += 1 };
  s1 -> s1 [82, 65535] { R8137 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8137 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R8138 += 1, R8139 += 1 };
  s0 -> s1 [0, 65535] { R8139 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8139 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R8141 += 1 };
  s0 -> s0 [0, 65535] { R8140 += 1, R8141 += 1 };
  s0 -> s2 [0, 65535] { R8141 += 1, R12 += 1 };
  s0 -> s3 [81, 81] { R8141 += 1 };
  s0 -> s1 [82, 65535] { R8141 += 1 };
  s1 -> s1 [0, 80] { R8141 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R8141 += 1 };
  s1 -> s1 [82, 65535] { R8141 += 1 };
  s2 -> s1 [0, 80] { R8141 += 1 };
  s2 -> s2 [0, 65535] { R8141 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R8141 += 1 };
  s2 -> s1 [82, 65535] { R8141 += 1 };
  s3 -> s3 [0, 65535] { R8141 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R8143 += 1, R8080 += 1, R8081 += 1 };
  s0 -> s2 [0, 65535] { R8143 += 1, R8081 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8142 += 1, R8143 += 1 };
  s1 -> s1 [0, 65535] { R8143 += 1, R8080 += 1, R8081 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8143 += 1, R8081 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8143 += 1, R8081 += 1, R22 += 1 };
  s2 -> s4 [0, 65535] { R8143 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8143 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 80] { R8145 += 1, R8083 += 1 };
  s0 -> s0 [0, 65535] { R8144 += 1, R8145 += 1 };
  s0 -> s2 [0, 65535] { R8145 += 1, R8082 += 1, R8083 += 1 };
  s0 -> s3 [81, 81] { R8145 += 1, R8083 += 1 };
  s0 -> s4 [81, 81] { R8145 += 1, R8083 += 1 };
  s0 -> s1 [83, 65535] { R8145 += 1, R8083 += 1 };
  s1 -> s1 [0, 80] { R8145 += 1, R8083 += 1 };
  s1 -> s1 [0, 65535] { R8145 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8145 += 1, R8083 += 1 };
  s1 -> s4 [81, 81] { R8145 += 1, R8083 += 1 };
  s1 -> s1 [83, 65535] { R8145 += 1, R8083 += 1 };
  s2 -> s1 [0, 80] { R8145 += 1, R8083 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8145 += 1, R8082 += 1, R8083 += 1 };
  s2 -> s3 [81, 81] { R8145 += 1, R8083 += 1 };
  s2 -> s4 [81, 81] { R8145 += 1, R8083 += 1 };
  s2 -> s1 [83, 65535] { R8145 += 1, R8083 += 1 };
  s3 -> s3 [0, 81] { R8145 += 1, R8083 += 1 };
  s3 -> s3 [0, 65535] { R8145 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [83, 65535] { R8145 += 1, R8083 += 1 };
  s4 -> s4 [0, 65535] { R8145 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s0 -> s2 [0, 65535] { R8147 += 1, R8084 += 1, R8085 += 1 };
  s0 -> s0 [0, 65535] { R8146 += 1, R8147 += 1 };
  s0 -> s3 [81, 81] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s0 -> s4 [81, 81] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s0 -> s1 [82, 65535] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s1 -> s1 [0, 80] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s1 -> s1 [0, 65535] { R8147 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s1 -> s4 [81, 81] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s1 -> s1 [82, 65535] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s2 -> s1 [0, 80] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8147 += 1, R8084 += 1, R8085 += 1 };
  s2 -> s3 [81, 81] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s2 -> s4 [81, 81] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s2 -> s1 [82, 65535] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R8147 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8147 += 1 };
  s4 -> s4 [0, 65535] { R8147 += 1, R8085 += 1, R7260 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8147 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s0 -> s2 [0, 65535] { R8149 += 1, R8086 += 1, R8087 += 1 };
  s0 -> s0 [0, 65535] { R8148 += 1, R8149 += 1 };
  s0 -> s3 [81, 81] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s0 -> s4 [81, 81] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s0 -> s1 [82, 65535] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s1 -> s1 [0, 80] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s1 -> s1 [0, 65535] { R8149 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s1 -> s4 [81, 81] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s1 -> s1 [82, 65535] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s2 -> s1 [0, 80] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8149 += 1, R8086 += 1, R8087 += 1 };
  s2 -> s3 [81, 81] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s2 -> s4 [81, 81] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s2 -> s1 [82, 65535] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8149 += 1 };
  s4 -> s5 [0, 65535] { R8149 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8149 += 1, R8087 += 1, R7262 += 1 };
  s5 -> s5 [0, 65535] { R8149 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 80] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s0 [0, 65535] { R8150 += 1, R8151 += 1 };
  s0 -> s2 [0, 65535] { R8151 += 1, R8088 += 1, R8089 += 1 };
  s0 -> s3 [81, 81] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s4 [81, 81] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s1 [82, 65535] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [0, 80] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8151 += 1 };
  s1 -> s3 [81, 81] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s4 [81, 81] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [82, 65535] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [0, 80] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s2 [0, 65535] { R8151 += 1, R8088 += 1, R8089 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s4 [81, 81] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [82, 65535] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s3 [0, 65535] { R8151 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8151 += 1 };
  s4 -> s4 [0, 65535] { R8151 += 1, R8089 += 1, R7264 += 1, R7265 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8151 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 80] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s2 [0, 65535] { R8153 += 1, R8090 += 1, R8091 += 1 };
  s0 -> s0 [0, 65535] { R8152 += 1, R8153 += 1 };
  s0 -> s3 [81, 81] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s4 [81, 81] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s1 [82, 65535] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 80] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 65535] { R8153 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s4 [81, 81] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [82, 65535] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [0, 80] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s2 [0, 65535] { R8153 += 1, R8090 += 1, R8091 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s4 [81, 81] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [82, 65535] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s3 [0, 65535] { R8153 += 1, R8091 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8153 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8153 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8153 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 80] { R8155 += 1, R8105 += 1 };
  s0 -> s0 [0, 65535] { R8154 += 1, R8155 += 1 };
  s0 -> s2 [0, 65535] { R8155 += 1, R8104 += 1, R8105 += 1 };
  s0 -> s3 [81, 81] { R8155 += 1, R8105 += 1 };
  s0 -> s1 [82, 65535] { R8155 += 1, R8105 += 1 };
  s1 -> s1 [0, 80] { R8155 += 1, R8105 += 1 };
  s1 -> s3 [81, 81] { R8155 += 1, R8105 += 1 };
  s1 -> s1 [82, 65535] { R8155 += 1, R8105 += 1 };
  s2 -> s1 [0, 80] { R8155 += 1, R8105 += 1 };
  s2 -> s2 [0, 65535] { R8155 += 1, R8104 += 1, R8105 += 1 };
  s2 -> s3 [81, 81] { R8155 += 1, R8105 += 1 };
  s2 -> s1 [82, 65535] { R8155 += 1, R8105 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8155 += 1, R8105 += 1 };
  s3 -> s5 [0, 65535] { R8155 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8155 += 1 };
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8157 += 1, R8107 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R8157 += 1, R8106 += 1, R8107 += 1 };
  s0 -> s0 [0, 65535] { R8156 += 1, R8157 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8157 += 1 };
  s1 -> s1 [0, 65535] { R8157 += 1, R8107 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8157 += 1, R8107 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R8157 += 1, R8106 += 1, R8107 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8157 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R8159 += 1, R8109 += 1 };
  s0 -> s2 [0, 65535] { R8159 += 1, R8108 += 1, R8109 += 1 };
  s0 -> s0 [0, 65535] { R8158 += 1, R8159 += 1 };
  s0 -> s3 [0, 65535] { R8159 += 1, R8109 += 1, R9 += 1 };
  s0 -> s4 [81, 81] { R8159 += 1, R8109 += 1 };
  s0 -> s1 [82, 65535] { R8159 += 1, R8109 += 1 };
  s1 -> s1 [0, 80] { R8159 += 1, R8109 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8159 += 1 };
  s1 -> s4 [81, 81] { R8159 += 1, R8109 += 1 };
  s1 -> s1 [82, 65535] { R8159 += 1, R8109 += 1 };
  s2 -> s1 [0, 80] { R8159 += 1, R8109 += 1 };
  s2 -> s2 [0, 65535] { R8159 += 1, R8108 += 1, R8109 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8159 += 1, R8109 += 1, R9 += 1 };
  s2 -> s4 [81, 81] { R8159 += 1, R8109 += 1 };
  s2 -> s1 [82, 65535] { R8159 += 1, R8109 += 1 };
  s3 -> s1 [0, 80] { R8159 += 1, R8109 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8159 += 1 };
  s3 -> s3 [0, 65535] { R8159 += 1, R8109 += 1, R9 += 1 };
  s3 -> s4 [81, 81] { R8159 += 1, R8109 += 1 };
  s3 -> s1 [82, 65535] { R8159 += 1, R8109 += 1 };
  s4 -> s4 [0, 65535] { R8159 += 1, R8109 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8159 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 80] { R8161 += 1, R8111 += 1, R8067 += 1 };
  s0 -> s0 [0, 65535] { R8160 += 1, R8161 += 1 };
  s0 -> s2 [0, 65535] { R8161 += 1, R8110 += 1, R8111 += 1 };
  s0 -> s3 [0, 65535] { R8161 += 1, R8111 += 1, R8066 += 1, R8067 += 1 };
  s0 -> s1 [82, 65535] { R8161 += 1, R8111 += 1, R8067 += 1 };
  s1 -> s1 [0, 80] { R8161 += 1, R8111 += 1, R8067 += 1 };
  s1 -> s1 [0, 65535] { R8161 += 1, R8111 += 1 };
  s1 -> s4 [0, 65535] { R8161 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R8161 += 1, R8111 += 1, R8067 += 1 };
  s2 -> s1 [0, 80] { R8161 += 1, R8111 += 1, R8067 += 1 };
  s2 -> s2 [0, 65535] { R8161 += 1, R8110 += 1, R8111 += 1 };
  s2 -> s3 [0, 65535] { R8161 += 1, R8111 += 1, R8066 += 1, R8067 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R8161 += 1, R8111 += 1, R8067 += 1 };
  s3 -> s1 [0, 80] { R8161 += 1, R8111 += 1, R8067 += 1 };
  s3 -> s4 [0, 65535] { R8161 += 1 };
  s3 -> s3 [0, 65535] { R8161 += 1, R8111 += 1, R8066 += 1, R8067 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R8161 += 1, R8111 += 1, R8067 += 1 };
  s4 -> s4 [0, 65535] { R8161 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R8163 += 1, R8113 += 1, R8068 += 1, R8069 += 1 };
  s0 -> s2 [0, 65535] { R8163 += 1, R8113 += 1, R8069 += 1, R20 += 1 };
  s0 -> s3 [0, 65535] { R8163 += 1, R8112 += 1, R8113 += 1 };
  s0 -> s0 [0, 65535] { R8162 += 1, R8163 += 1 };
  s1 -> s6 [0, 65535] { R8163 += 1 };
  s1 -> s1 [0, 65535] { R8163 += 1, R8113 += 1, R8068 += 1, R8069 += 1 };
  s1 -> s2 [0, 65535] { R8163 += 1, R8113 += 1, R8069 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8163 += 1, R8113 += 1 };
  s2 -> s6 [0, 65535] { R8163 += 1 };
  s2 -> s2 [0, 65535] { R8163 += 1, R8113 += 1, R8069 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8163 += 1, R8113 += 1, R8068 += 1, R8069 += 1 };
  s3 -> s2 [0, 65535] { R8163 += 1, R8113 += 1, R8069 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R8163 += 1, R8112 += 1, R8113 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8163 += 1, R8113 += 1 };
  s5 -> s6 [0, 65535] { R8163 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8163 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8165 += 1, R8115 += 1, R8071 += 1 };
  s0 -> s2 [0, 65535] { R8165 += 1, R8114 += 1, R8115 += 1 };
  s0 -> s0 [0, 65535] { R8164 += 1, R8165 += 1 };
  s0 -> s3 [0, 65535] { R8165 += 1, R8115 += 1, R8070 += 1, R8071 += 1 };
  s1 -> s1 [0, 65535] { R8165 += 1, R8115 += 1, R8071 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8165 += 1, R8115 += 1 };
  s1 -> s5 [0, 65535] { R8165 += 1 };
  s2 -> s1 [0, 65535] { R8165 += 1, R8115 += 1, R8071 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8165 += 1, R8114 += 1, R8115 += 1 };
  s2 -> s3 [0, 65535] { R8165 += 1, R8115 += 1, R8070 += 1, R8071 += 1 };
  s3 -> s1 [0, 65535] { R8165 += 1, R8115 += 1, R8071 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8165 += 1, R8115 += 1, R8070 += 1, R8071 += 1 };
  s3 -> s5 [0, 65535] { R8165 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8165 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8165 += 1, R8115 += 1 };
  s6 -> s5 [0, 65535] { R8165 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8167 += 1, R8117 += 1, R8073 += 1, R7287 += 1 };
  s0 -> s2 [0, 65535] { R8167 += 1, R8117 += 1, R8072 += 1, R8073 += 1 };
  s0 -> s3 [0, 65535] { R8167 += 1, R8116 += 1, R8117 += 1 };
  s0 -> s0 [0, 65535] { R8166 += 1, R8167 += 1 };
  s1 -> s1 [0, 65535] { R8167 += 1, R8117 += 1, R8073 += 1, R7287 += 1 };
  s1 -> s6 [0, 65535] { R8167 += 1, R8117 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8167 += 1 };
  s2 -> s1 [0, 65535] { R8167 += 1, R8117 += 1, R8073 += 1, R7287 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8167 += 1, R8117 += 1, R8072 += 1, R8073 += 1 };
  s2 -> s5 [0, 65535] { R8167 += 1 };
  s3 -> s1 [0, 65535] { R8167 += 1, R8117 += 1, R8073 += 1, R7287 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8167 += 1, R8117 += 1, R8072 += 1, R8073 += 1 };
  s3 -> s3 [0, 65535] { R8167 += 1, R8116 += 1, R8117 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8167 += 1 };
  s6 -> s6 [0, 65535] { R8167 += 1, R8117 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8167 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 81] { R8169 += 1, R8119 += 1, R8075 += 1 };
  s0 -> s0 [0, 65535] { R8168 += 1, R8169 += 1 };
  s0 -> s2 [0, 65535] { R8169 += 1, R8119 += 1, R8074 += 1, R8075 += 1 };
  s0 -> s3 [0, 65535] { R8169 += 1, R8118 += 1, R8119 += 1 };
  s0 -> s1 [83, 65535] { R8169 += 1, R8119 += 1, R8075 += 1 };
  s1 -> s1 [0, 81] { R8169 += 1, R8119 += 1, R8075 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8169 += 1 };
  s1 -> s1 [0, 65535] { R8169 += 1, R8119 += 1 };
  s1 -> s1 [83, 65535] { R8169 += 1, R8119 += 1, R8075 += 1 };
  s2 -> s1 [0, 81] { R8169 += 1, R8119 += 1, R8075 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8169 += 1, R8119 += 1, R8074 += 1, R8075 += 1 };
  s2 -> s5 [0, 65535] { R8169 += 1 };
  s2 -> s1 [83, 65535] { R8169 += 1, R8119 += 1, R8075 += 1 };
  s3 -> s1 [0, 81] { R8169 += 1, R8119 += 1, R8075 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8169 += 1, R8119 += 1, R8074 += 1, R8075 += 1 };
  s3 -> s3 [0, 65535] { R8169 += 1, R8118 += 1, R8119 += 1 };
  s3 -> s1 [83, 65535] { R8169 += 1, R8119 += 1, R8075 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8169 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 81] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s0 -> s2 [0, 65535] { R8171 += 1, R8120 += 1, R8121 += 1 };
  s0 -> s0 [0, 65535] { R8170 += 1, R8171 += 1 };
  s0 -> s3 [0, 65535] { R8171 += 1, R8121 += 1, R8076 += 1, R8077 += 1 };
  s0 -> s4 [0, 65535] { R8171 += 1, R8121 += 1, R8077 += 1, R8058 += 1, R8059 += 1 };
  s0 -> s1 [83, 65535] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s1 -> s1 [0, 81] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s1 -> s5 [0, 65535] { R8171 += 1 };
  s1 -> s1 [0, 65535] { R8171 += 1, R8121 += 1, R8077 += 1 };
  s1 -> s6 [0, 65535] { R8171 += 1, R8121 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [83, 65535] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s2 -> s1 [0, 81] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s2 -> s2 [0, 65535] { R8171 += 1, R8120 += 1, R8121 += 1 };
  s2 -> s3 [0, 65535] { R8171 += 1, R8121 += 1, R8076 += 1, R8077 += 1 };
  s2 -> s4 [0, 65535] { R8171 += 1, R8121 += 1, R8077 += 1, R8058 += 1, R8059 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [83, 65535] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s3 -> s1 [0, 81] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s3 -> s3 [0, 65535] { R8171 += 1, R8121 += 1, R8076 += 1, R8077 += 1 };
  s3 -> s5 [0, 65535] { R8171 += 1 };
  s3 -> s4 [0, 65535] { R8171 += 1, R8121 += 1, R8077 += 1, R8058 += 1, R8059 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [83, 65535] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s4 -> s1 [0, 81] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s4 -> s5 [0, 65535] { R8171 += 1 };
  s4 -> s4 [0, 65535] { R8171 += 1, R8121 += 1, R8077 += 1, R8058 += 1, R8059 += 1 };
  s4 -> s6 [0, 65535] { R8171 += 1, R8121 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s1 [83, 65535] { R8171 += 1, R8121 += 1, R8077 += 1, R8059 += 1 };
  s5 -> s5 [0, 65535] { R8171 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R8171 += 1 };
  s6 -> s6 [0, 65535] { R8171 += 1, R8121 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1, R8064 += 1, R8065 += 1 };
  s0 -> s2 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s3 [0, 65535] { R8173 += 1, R8123 += 1, R8078 += 1, R8079 += 1 };
  s0 -> s4 [0, 65535] { R8173 += 1, R8122 += 1, R8123 += 1 };
  s0 -> s0 [0, 65535] { R8172 += 1, R8173 += 1 };
  s1 -> s1 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1, R8064 += 1, R8065 += 1 };
  s1 -> s8 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1 };
  s1 -> s6 [0, 65535] { R8173 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R8173 += 1, R8123 += 1 };
  s2 -> s1 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1, R8064 += 1, R8065 += 1 };
  s2 -> s2 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s6 [0, 65535] { R8173 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R8173 += 1, R8123 += 1 };
  s3 -> s1 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1, R8064 += 1, R8065 += 1 };
  s3 -> s2 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1, R8063 += 1, R8064 += 1 };
  s3 -> s3 [0, 65535] { R8173 += 1, R8123 += 1, R8078 += 1, R8079 += 1 };
  s3 -> s6 [0, 65535] { R8173 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1, R8064 += 1, R8065 += 1 };
  s4 -> s2 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1, R8063 += 1, R8064 += 1 };
  s4 -> s3 [0, 65535] { R8173 += 1, R8123 += 1, R8078 += 1, R8079 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8173 += 1, R8122 += 1, R8123 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8173 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8173 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8173 += 1, R8123 += 1 };
  s8 -> s8 [0, 65535] { R8173 += 1, R8123 += 1, R8079 += 1 };
  s8 -> s6 [0, 65535] { R8173 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R8173 += 1, R8123 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65535] { R8175 += 1, R8125 += 1, R8092 += 1, R8093 += 1 };
  s0 -> s0 [0, 65535] { R8174 += 1, R8175 += 1 };
  s0 -> s2 [0, 65535] { R8175 += 1, R8125 += 1, R8093 += 1, R21 += 1 };
  s0 -> s3 [0, 65535] { R8175 += 1, R8124 += 1, R8125 += 1 };
  s1 -> s1 [0, 65535] { R8175 += 1, R8125 += 1, R8092 += 1, R8093 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8175 += 1 };
  s1 -> s2 [0, 65535] { R8175 += 1, R8125 += 1, R8093 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8175 += 1, R8125 += 1 };
  s2 -> s6 [0, 65535] { R8175 += 1 };
  s2 -> s2 [0, 65535] { R8175 += 1, R8125 += 1, R8093 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R8175 += 1, R8125 += 1, R8092 += 1, R8093 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8175 += 1, R8125 += 1, R8093 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R8175 += 1, R8124 += 1, R8125 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8175 += 1, R8125 += 1 };
  s5 -> s6 [0, 65535] { R8175 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8175 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s0 -> s0 [0, 65535] { R8176 += 1, R8177 += 1 };
  s0 -> s2 [0, 65535] { R8177 += 1, R8126 += 1, R8127 += 1 };
  s0 -> s3 [0, 65535] { R8177 += 1, R8127 += 1, R8094 += 1, R8095 += 1 };
  s0 -> s4 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s0 -> s5 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s0 -> s6 [82, 82] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s0 -> s1 [83, 65535] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s1 -> s1 [0, 80] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s1 -> s4 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s1 -> s5 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s1 -> s6 [82, 82] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s1 -> s1 [83, 65535] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s2 -> s1 [0, 80] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s2 -> s2 [0, 65535] { R8177 += 1, R8126 += 1, R8127 += 1 };
  s2 -> s3 [0, 65535] { R8177 += 1, R8127 += 1, R8094 += 1, R8095 += 1 };
  s2 -> s4 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s2 -> s5 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s2 -> s6 [82, 82] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s2 -> s1 [83, 65535] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s3 -> s1 [0, 80] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s3 -> s3 [0, 65535] { R8177 += 1, R8127 += 1, R8094 += 1, R8095 += 1 };
  s3 -> s4 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s3 -> s5 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s3 -> s6 [82, 82] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s3 -> s1 [83, 65535] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s5 -> s5 [0, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s5 -> s10 [82, 82] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s5 -> s5 [83, 65535] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s6 -> s6 [0, 80] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s6 -> s6 [0, 65535] { R8177 += 1, R8127 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R8177 += 1 };
  s6 -> s9 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s6 -> s10 [81, 81] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s6 -> s6 [82, 65535] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8177 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R8177 += 1, R8127 += 1 };
  s9 -> s8 [0, 65535] { R8177 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s11 [0, 65535] { R8177 += 1, R8127 += 1 };
  s10 -> s10 [0, 65535] { R8177 += 1, R8127 += 1, R8095 += 1 };
  s10 -> s8 [0, 65535] { R8177 += 1 };
  s11 -> s7 [0, 65535];
  s11 -> s11 [0, 65535] { R8177 += 1, R8127 += 1 };
  s11 -> s8 [0, 65535] { R8177 += 1 };
  accepting s8, s9, s6, s7, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s0 -> s2 [0, 65535] { R8179 += 1, R8128 += 1, R8129 += 1 };
  s0 -> s0 [0, 65535] { R8178 += 1, R8179 += 1 };
  s0 -> s3 [0, 65535] { R8179 += 1, R8129 += 1, R8096 += 1, R8097 += 1 };
  s0 -> s4 [81, 81] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s0 -> s5 [81, 81] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s0 -> s1 [82, 65535] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s1 -> s1 [0, 80] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s1 -> s1 [0, 65535] { R8179 += 1, R8129 += 1 };
  s1 -> s6 [0, 65535] { R8179 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [81, 81] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s1 -> s5 [81, 81] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s1 -> s1 [82, 65535] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s2 -> s1 [0, 80] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s2 -> s2 [0, 65535] { R8179 += 1, R8128 += 1, R8129 += 1 };
  s2 -> s3 [0, 65535] { R8179 += 1, R8129 += 1, R8096 += 1, R8097 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [81, 81] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s2 -> s5 [81, 81] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s2 -> s1 [82, 65535] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s3 -> s1 [0, 80] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s3 -> s6 [0, 65535] { R8179 += 1 };
  s3 -> s3 [0, 65535] { R8179 += 1, R8129 += 1, R8096 += 1, R8097 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [81, 81] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s3 -> s5 [81, 81] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s3 -> s1 [82, 65535] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s4 -> s4 [0, 65535] { R8179 += 1, R8129 += 1 };
  s4 -> s6 [0, 65535] { R8179 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R8179 += 1 };
  s5 -> s5 [0, 65535] { R8179 += 1, R8129 += 1, R8097 += 1, R7286 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R8179 += 1, R8129 += 1 };
  s6 -> s6 [0, 65535] { R8179 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R8179 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8179 += 1, R8129 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s0 -> s2 [0, 80] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s0 -> s3 [0, 65535] { R8181 += 1, R8131 += 1, R8098 += 1, R8099 += 1 };
  s0 -> s0 [0, 65535] { R8180 += 1, R8181 += 1 };
  s0 -> s4 [0, 65535] { R8181 += 1, R8130 += 1, R8131 += 1 };
  s0 -> s5 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s0 -> s6 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s0 -> s7 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s0 -> s8 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s0 -> s2 [82, 65535] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s0 -> s1 [83, 65535] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s1 -> s1 [0, 80] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s1 -> s1 [0, 65535] { R8181 += 1, R8131 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s10 [0, 65535] { R8181 += 1 };
  s1 -> s5 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s1 -> s6 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s1 -> s1 [83, 65535] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s2 -> s1 [0, 80] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s2 -> s2 [0, 80] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s2 -> s5 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s2 -> s6 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s2 -> s7 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s2 -> s8 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s2 -> s2 [82, 65535] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s2 -> s1 [83, 65535] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s3 -> s1 [0, 80] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s3 -> s2 [0, 80] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s3 -> s3 [0, 65535] { R8181 += 1, R8131 += 1, R8098 += 1, R8099 += 1 };
  s3 -> s5 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s3 -> s6 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s3 -> s7 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s3 -> s8 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s3 -> s2 [82, 65535] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s3 -> s1 [83, 65535] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s4 -> s1 [0, 80] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s4 -> s2 [0, 80] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s4 -> s3 [0, 65535] { R8181 += 1, R8131 += 1, R8098 += 1, R8099 += 1 };
  s4 -> s4 [0, 65535] { R8181 += 1, R8130 += 1, R8131 += 1 };
  s4 -> s5 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s4 -> s6 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s4 -> s7 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s4 -> s8 [81, 81] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s4 -> s2 [82, 65535] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s4 -> s1 [83, 65535] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s5 -> s5 [0, 65535] { R8181 += 1, R8131 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s10 [0, 65535] { R8181 += 1 };
  s6 -> s6 [0, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s6 -> s6 [0, 65535] { R8181 += 1, R8131 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s10 [0, 65535] { R8181 += 1 };
  s6 -> s6 [83, 65535] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s7 -> s6 [0, 81] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s7 -> s7 [0, 65535] { R8181 += 1, R8131 += 1, R8099 += 1, R8054 += 1 };
  s7 -> s6 [83, 65535] { R8181 += 1, R8131 += 1, R8099 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8181 += 1 };
  accepting s5, s9, s6, s1, s10;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s2 [0, 65535] { R8183 += 1, R8133 += 1, R8100 += 1, R8101 += 1 };
  s0 -> s3 [0, 65535] { R8183 += 1, R8132 += 1, R8133 += 1 };
  s0 -> s0 [0, 65535] { R8182 += 1, R8183 += 1 };
  s0 -> s4 [81, 81] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s5 [81, 81] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s1 [82, 65535] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s1 [0, 80] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R8183 += 1, R8133 += 1 };
  s1 -> s8 [0, 65535] { R8183 += 1 };
  s1 -> s4 [81, 81] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s5 [81, 81] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s1 [82, 65535] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s1 [0, 80] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s2 [0, 65535] { R8183 += 1, R8133 += 1, R8100 += 1, R8101 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R8183 += 1 };
  s2 -> s4 [81, 81] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s5 [81, 81] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s1 [82, 65535] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s1 [0, 80] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s2 [0, 65535] { R8183 += 1, R8133 += 1, R8100 += 1, R8101 += 1 };
  s3 -> s3 [0, 65535] { R8183 += 1, R8132 += 1, R8133 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [81, 81] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s5 [81, 81] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s1 [82, 65535] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s4 -> s4 [0, 65535] { R8183 += 1, R8133 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R8183 += 1 };
  s5 -> s6 [0, 65535] { R8183 += 1, R8133 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8183 += 1, R8133 += 1, R8101 += 1, R8056 += 1, R8057 += 1 };
  s5 -> s8 [0, 65535] { R8183 += 1 };
  s6 -> s6 [0, 65535] { R8183 += 1, R8133 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R8183 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8183 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s0 -> s2 [0, 65535] { R8185 += 1, R8134 += 1, R8135 += 1 };
  s0 -> s3 [0, 65535] { R8185 += 1, R8135 += 1, R8102 += 1, R8103 += 1 };
  s0 -> s0 [0, 65535] { R8184 += 1, R8185 += 1 };
  s0 -> s4 [81, 81] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s0 -> s5 [81, 81] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s0 -> s1 [82, 65535] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s1 -> s1 [0, 80] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s1 -> s1 [0, 65535] { R8185 += 1, R8135 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8185 += 1 };
  s1 -> s4 [81, 81] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s1 -> s5 [81, 81] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s1 -> s1 [82, 65535] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s2 -> s1 [0, 80] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8185 += 1, R8134 += 1, R8135 += 1 };
  s2 -> s3 [0, 65535] { R8185 += 1, R8135 += 1, R8102 += 1, R8103 += 1 };
  s2 -> s4 [81, 81] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s2 -> s5 [81, 81] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s2 -> s1 [82, 65535] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s3 -> s1 [0, 80] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R8185 += 1 };
  s3 -> s3 [0, 65535] { R8185 += 1, R8135 += 1, R8102 += 1, R8103 += 1 };
  s3 -> s4 [81, 81] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s3 -> s5 [81, 81] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s3 -> s1 [82, 65535] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s4 -> s4 [0, 65535] { R8185 += 1, R8135 += 1, R8103 += 1, R8060 += 1, R8061 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8185 += 1 };
  s4 -> s8 [0, 65535] { R8185 += 1, R8135 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8185 += 1, R8135 += 1 };
  s5 -> s7 [0, 65535] { R8185 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8185 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8185 += 1 };
  s8 -> s8 [0, 65535] { R8185 += 1, R8135 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P10
automaton P10_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R2 = R8131 && R3 = R8185 && R24 - R8185 = -1 && R25 = R8185 && R26 - R8185 = -1 && R27 = R8185 && R28 = 0 && R29 = 1 && R30 = 0 && R31 = 1 && R8094 = 0 && R8095 = 0 && R8098 = 0 && R8099 = 0 && R8104 = 0 && R8105 = R8131 && R8126 = 0 && R8127 = R8131 && R8130 = 0 && R8136 = 0 && R8137 = R8185 && R8138 = 0 && R8139 = R8185 && R8140 = 0 && R8141 = R8185 && R8142 = 0 && R8143 = R8185 && R8144 = 0 && R8145 = R8185 && R8146 = 0 && R8147 = R8185 && R8148 = 0 && R8149 = R8185 && R8150 = 0 && R8151 = R8185 && R8152 = 0 && R8153 = R8185 && R8154 = 0 && R8155 = R8185 && R8156 = 0 && R8157 = R8185 && R8158 = 0 && R8159 = R8185 && R8160 = 0 && R8161 = R8185 && R8162 = 0 && R8163 = R8185 && R8164 = 0 && R8165 = R8185 && R8166 = 0 && R8167 = R8185 && R8168 = 0 && R8169 = R8185 && R8170 = 0 && R8171 = R8185 && R8172 = 0 && R8173 = R8185 && R8174 = 0 && R8175 = R8185 && R8176 = 0 && R8177 = R8185 && R8178 = 0 && R8179 = R8185 && R8180 = 0 && R8181 = R8185 && R8182 = 0 && R8183 = R8185 && R8184 = 0 && -1 < R1 && R9 < 1 && R12 < 1 && R15 < 1 && R16 < 1 && -1*R7287 + -1*R7286 - R7260 - R36 < 1 && R38 + R7262 + R8055 + R8054 < 1 && -1 < R8131 && 0 < R8185 && (R1 != 0 || R20 = 0 || (R8066 = 0 && R8067 = 0)) && (R1 != 0 || R20 = 0 || (R8068 = 0 && R8069 = 0)) && (R1 != 0 || R20 = 0 || (R8070 = 0 && R8071 = 0)) && (R1 != 0 || R20 = 0 || (R8072 = 0 && R8073 = 0)) && (R1 != 0 || R20 = 0 || (R8074 = 0 && R8075 = 0)) && (R1 != 0 || R20 = 0 || (R8076 = 0 && R8077 = 0)) && (R1 != 0 || R20 = 0 || (R8078 = 0 && R8079 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8065 + R8062 = 0 || (R40 + R7264 + R8058 + R8056 = 0 && R41 + R7265 + R8059 + R8057 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8065 + R8062 = 0 || (R44 + R7268 + R8063 + R8060 = 0 && R45 + R7269 + R8064 + R8061 = 0)) && (R40 + R7264 + R8058 + R8056 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8059 + -1*R8057 - R7265 - R41 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8063 + R8060 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8064 + -1*R8061 - R7269 - R45 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8066 != 0 || R1 = R8067 || R1 < 1) && (R8068 != 0 || R1 = R8069 || R1 < 1) && (R8070 != 0 || R1 = R8071 || R1 < 1) && (R8072 != 0 || R1 = R8073 || R1 < 1) && (R8074 != 0 || R1 = R8075 || R1 < 1) && (R8076 != 0 || R1 = R8077 || R1 < 1) && (R8078 != 0 || R1 = R8079 || R1 < 1) && (R8106 != 0 || R8107 = R8131 || (R1 = 0 && R8131 = 0)) && (R8108 != 0 || R8109 = R8131 || (R1 = 0 && R8131 = 0)) && (R8110 != 0 || R8111 = R8131 || (R1 = 0 && R8131 = 0)) && (R8112 != 0 || R8113 = R8131 || (R1 = 0 && R8131 = 0)) && (R8114 != 0 || R8115 = R8131 || (R1 = 0 && R8131 = 0)) && (R8116 != 0 || R8117 = R8131 || (R1 = 0 && R8131 = 0)) && (R8118 != 0 || R8119 = R8131 || (R1 = 0 && R8131 = 0)) && (R8120 != 0 || R8121 = R8131 || (R1 = 0 && R8131 = 0)) && (R8122 != 0 || R8123 = R8131 || (R1 = 0 && R8131 = 0)) && (R8124 != 0 || R8125 = R8131 || (R1 = 0 && R8131 = 0)) && (R8128 != 0 || R8129 = R8131 || (R1 = 0 && R8131 = 0)) && (R8132 != 0 || R8131 = R8133 || (R1 = 0 && R8131 = 0)) && (R8134 != 0 || R8131 = R8135 || (R1 = 0 && R8131 = 0)) && (R21 = 0 || (R8092 = 0 && R8093 = 0)) && (R21 = 0 || (R8096 = 0 && R8097 = 0)) && (R21 = 0 || (R8100 = 0 && R8101 = 0)) && (R21 = 0 || (R8102 = 0 && R8103 = 0)) && (R22 = 0 || (R8080 = 0 && R8081 = 0)) && (R22 = 0 || (R8082 = 0 && R8083 = 0)) && (R22 = 0 || (R8084 = 0 && R8085 = 0)) && (R22 = 0 || (R8086 = 0 && R8087 = 0)) && (R22 = 0 || (R8088 = 0 && R8089 = 0)) && (R22 = 0 || (R8090 = 0 && R8091 = 0)) && (R23 = 0 || (R7274 = 0 && R7275 = 0)) && (R23 = 0 || (R7276 = 0 && R7277 = 0)) && (R23 = 0 || (R7278 = 0 && R7279 = 0)) && (R23 = 0 || (R7280 = 0 && R7281 = 0)) && (R23 = 0 || (R7282 = 0 && R7283 = 0)) && (R23 = 0 || (R7284 = 0 && R7285 = 0)) && (R40 + R7264 + R8058 + R8056 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8063 + R8060 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8066 = 0 || R1 < 1) && (R8068 = 0 || R1 < 1) && (R8070 = 0 || R1 < 1) && (R8072 = 0 || R1 < 1) && (R8074 = 0 || R1 < 1) && (R8076 = 0 || R1 < 1) && (R8078 = 0 || R1 < 1) && (R8106 = 0 || (R1 = 0 && R8131 = 0)) && (R8108 = 0 || (R1 = 0 && R8131 = 0)) && (R8110 = 0 || (R1 = 0 && R8131 = 0)) && (R8112 = 0 || (R1 = 0 && R8131 = 0)) && (R8114 = 0 || (R1 = 0 && R8131 = 0)) && (R8116 = 0 || (R1 = 0 && R8131 = 0)) && (R8118 = 0 || (R1 = 0 && R8131 = 0)) && (R8120 = 0 || (R1 = 0 && R8131 = 0)) && (R8122 = 0 || (R1 = 0 && R8131 = 0)) && (R8124 = 0 || (R1 = 0 && R8131 = 0)) && (R8128 = 0 || (R1 = 0 && R8131 = 0)) && (R8132 = 0 || (R1 = 0 && R8131 = 0)) && (R8134 = 0 || (R1 = 0 && R8131 = 0));
// End of Parikh automata intersection problem
