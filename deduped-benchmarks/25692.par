// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R36, R38, R4, R40, R41, R44, R45, R46, R5, R7260, R7262, R7264, R7265, R7268, R7269, R7270, R7274, R7275, R7276, R7277, R7278, R7279, R7280, R7281, R7282, R7283, R7284, R7285, R7286, R7287, R8054, R8055, R8056, R8057, R8058, R8059, R8186, R8187, R8188, R8189, R8190, R8191, R8192, R8193, R8194, R8195, R8196, R8197, R8198, R8199, R8200, R8201, R8202, R8203, R8204, R8205, R8206, R8207, R8208, R8209, R8210, R8211, R8212, R8213, R8214, R8215, R8216, R8217, R8218, R8219, R8220, R8221, R8222, R8223, R8224, R8225, R8226, R8227, R8228, R8229, R8230, R8231, R8232, R8233, R8234, R8235, R8236, R8237, R8238, R8239, R8240, R8241, R8242, R8243, R8244, R8245, R8246, R8247, R8248, R8249, R8250, R8251, R8252, R8253, R8254, R8255, R8256, R8257, R8258, R8259, R8260, R8261, R8262, R8263, R8264, R8265, R8266, R8267, R8268, R8269, R8270, R8271, R8272, R8273, R8274, R8275, R8276, R8277, R8278, R8279, R8280, R8281, R8282, R8283, R8284, R8285, R8286, R8287, R8288, R8289, R8290, R8291, R8292, R8293, R8294, R8295, R8296, R8297, R8298, R8299, R8300, R8301, R8302, R8303, R8304, R8305, R8306, R8307, R8308, R8309, R8310, R8311, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s2 [9, 13] { R29 += 1 };
  s0 -> s1 [14, 31] { R29 += 1 };
  s0 -> s2 [32, 32] { R29 += 1 };
  s0 -> s1 [33, 65535] { R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R29 += 1 };
  s2 -> s1 [0, 65535] { R29 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R7274 += 1, R7275 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R7277 += 1 };
  s0 -> s0 [0, 65535] { R7276 += 1, R7277 += 1 };
  s0 -> s2 [81, 81] { R7277 += 1 };
  s0 -> s3 [81, 81] { R7277 += 1 };
  s0 -> s1 [83, 65535] { R7277 += 1 };
  s1 -> s1 [0, 80] { R7277 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7277 += 1 };
  s1 -> s3 [81, 81] { R7277 += 1 };
  s1 -> s1 [83, 65535] { R7277 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R7277 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R7277 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R7278 += 1, R7279 += 1 };
  s0 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7280 += 1, R7281 += 1 };
  s0 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7281 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R7282 += 1, R7283 += 1 };
  s0 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7284 += 1, R7285 += 1 };
  s0 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R8263 += 1 };
  s0 -> s0 [0, 65535] { R8262 += 1, R8263 += 1 };
  s0 -> s2 [81, 81] { R8263 += 1 };
  s0 -> s1 [82, 65535] { R8263 += 1 };
  s1 -> s1 [0, 80] { R8263 += 1 };
  s1 -> s2 [81, 81] { R8263 += 1 };
  s1 -> s1 [82, 65535] { R8263 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8263 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8265 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8264 += 1, R8265 += 1 };
  s1 -> s1 [0, 65535] { R8265 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R8267 += 1 };
  s0 -> s0 [0, 65535] { R8266 += 1, R8267 += 1 };
  s0 -> s2 [0, 65535] { R8267 += 1, R12 += 1 };
  s0 -> s3 [81, 81] { R8267 += 1 };
  s0 -> s1 [82, 65535] { R8267 += 1 };
  s1 -> s1 [0, 80] { R8267 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R8267 += 1 };
  s1 -> s1 [82, 65535] { R8267 += 1 };
  s2 -> s1 [0, 80] { R8267 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8267 += 1, R12 += 1 };
  s2 -> s3 [81, 81] { R8267 += 1 };
  s2 -> s1 [82, 65535] { R8267 += 1 };
  s3 -> s3 [0, 65535] { R8267 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R8269 += 1, R8206 += 1, R8207 += 1 };
  s0 -> s0 [0, 65535] { R8268 += 1, R8269 += 1 };
  s0 -> s2 [0, 65535] { R8269 += 1, R8207 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8269 += 1, R8206 += 1, R8207 += 1 };
  s1 -> s2 [0, 65535] { R8269 += 1, R8207 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8269 += 1 };
  s2 -> s2 [0, 65535] { R8269 += 1, R8207 += 1, R22 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8269 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 80] { R8271 += 1, R8209 += 1 };
  s0 -> s0 [0, 65535] { R8270 += 1, R8271 += 1 };
  s0 -> s2 [0, 65535] { R8271 += 1, R8208 += 1, R8209 += 1 };
  s0 -> s3 [81, 81] { R8271 += 1, R8209 += 1 };
  s0 -> s4 [81, 81] { R8271 += 1, R8209 += 1 };
  s0 -> s1 [83, 65535] { R8271 += 1, R8209 += 1 };
  s1 -> s1 [0, 80] { R8271 += 1, R8209 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8271 += 1 };
  s1 -> s3 [81, 81] { R8271 += 1, R8209 += 1 };
  s1 -> s4 [81, 81] { R8271 += 1, R8209 += 1 };
  s1 -> s1 [83, 65535] { R8271 += 1, R8209 += 1 };
  s2 -> s1 [0, 80] { R8271 += 1, R8209 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8271 += 1, R8208 += 1, R8209 += 1 };
  s2 -> s3 [81, 81] { R8271 += 1, R8209 += 1 };
  s2 -> s4 [81, 81] { R8271 += 1, R8209 += 1 };
  s2 -> s1 [83, 65535] { R8271 += 1, R8209 += 1 };
  s3 -> s3 [0, 65535] { R8271 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 81] { R8271 += 1, R8209 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8271 += 1 };
  s4 -> s4 [83, 65535] { R8271 += 1, R8209 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s0 -> s2 [0, 65535] { R8273 += 1, R8210 += 1, R8211 += 1 };
  s0 -> s0 [0, 65535] { R8272 += 1, R8273 += 1 };
  s0 -> s3 [81, 81] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s0 -> s4 [81, 81] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s0 -> s1 [82, 65535] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s1 -> s1 [0, 80] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s1 -> s1 [0, 65535] { R8273 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s1 -> s4 [81, 81] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s1 -> s1 [82, 65535] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s2 -> s1 [0, 80] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s2 -> s2 [0, 65535] { R8273 += 1, R8210 += 1, R8211 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s2 -> s4 [81, 81] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s2 -> s1 [82, 65535] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R8273 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8273 += 1 };
  s4 -> s4 [0, 65535] { R8273 += 1, R8211 += 1, R7260 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8273 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s0 -> s0 [0, 65535] { R8274 += 1, R8275 += 1 };
  s0 -> s2 [0, 65535] { R8275 += 1, R8212 += 1, R8213 += 1 };
  s0 -> s3 [81, 81] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s0 -> s4 [81, 81] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s0 -> s1 [82, 65535] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s1 -> s1 [0, 80] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s1 -> s1 [0, 65535] { R8275 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s1 -> s4 [81, 81] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s1 -> s1 [82, 65535] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s2 -> s1 [0, 80] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s2 -> s2 [0, 65535] { R8275 += 1, R8212 += 1, R8213 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s2 -> s4 [81, 81] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s2 -> s1 [82, 65535] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s3 -> s3 [0, 65535] { R8275 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8275 += 1 };
  s4 -> s4 [0, 65535] { R8275 += 1, R8213 += 1, R7262 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8275 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 80] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s2 [0, 65535] { R8277 += 1, R8214 += 1, R8215 += 1 };
  s0 -> s0 [0, 65535] { R8276 += 1, R8277 += 1 };
  s0 -> s3 [81, 81] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s4 [81, 81] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s1 [82, 65535] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [0, 80] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [0, 65535] { R8277 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s4 [81, 81] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [82, 65535] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [0, 80] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s2 [0, 65535] { R8277 += 1, R8214 += 1, R8215 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s4 [81, 81] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [82, 65535] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s3 [0, 65535] { R8277 += 1, R8215 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s6 [0, 65535] { R8277 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8277 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8277 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 80] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s2 [0, 65535] { R8279 += 1, R8216 += 1, R8217 += 1 };
  s0 -> s0 [0, 65535] { R8278 += 1, R8279 += 1 };
  s0 -> s3 [81, 81] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s4 [81, 81] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s1 [82, 65535] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 80] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8279 += 1 };
  s1 -> s3 [81, 81] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s4 [81, 81] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [82, 65535] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [0, 80] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s2 [0, 65535] { R8279 += 1, R8216 += 1, R8217 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s4 [81, 81] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [82, 65535] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s3 [0, 65535] { R8279 += 1, R8217 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s6 [0, 65535] { R8279 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8279 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8279 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 80] { R8281 += 1, R8231 += 1 };
  s0 -> s0 [0, 65535] { R8280 += 1, R8281 += 1 };
  s0 -> s2 [0, 65535] { R8281 += 1, R8230 += 1, R8231 += 1 };
  s0 -> s3 [81, 81] { R8281 += 1, R8231 += 1 };
  s0 -> s1 [82, 65535] { R8281 += 1, R8231 += 1 };
  s1 -> s1 [0, 80] { R8281 += 1, R8231 += 1 };
  s1 -> s3 [81, 81] { R8281 += 1, R8231 += 1 };
  s1 -> s1 [82, 65535] { R8281 += 1, R8231 += 1 };
  s2 -> s1 [0, 80] { R8281 += 1, R8231 += 1 };
  s2 -> s2 [0, 65535] { R8281 += 1, R8230 += 1, R8231 += 1 };
  s2 -> s3 [81, 81] { R8281 += 1, R8231 += 1 };
  s2 -> s1 [82, 65535] { R8281 += 1, R8231 += 1 };
  s3 -> s3 [0, 65535] { R8281 += 1, R8231 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8281 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8281 += 1 };
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R8282 += 1, R8283 += 1 };
  s0 -> s1 [0, 65535] { R8283 += 1, R8232 += 1, R8233 += 1 };
  s0 -> s2 [0, 65535] { R8283 += 1, R8233 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8283 += 1, R8232 += 1, R8233 += 1 };
  s1 -> s2 [0, 65535] { R8283 += 1, R8233 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8283 += 1 };
  s2 -> s2 [0, 65535] { R8283 += 1, R8233 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8283 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R8285 += 1, R8235 += 1 };
  s0 -> s2 [0, 65535] { R8285 += 1, R8234 += 1, R8235 += 1 };
  s0 -> s3 [0, 65535] { R8285 += 1, R8235 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R8284 += 1, R8285 += 1 };
  s0 -> s4 [81, 81] { R8285 += 1, R8235 += 1 };
  s0 -> s1 [82, 65535] { R8285 += 1, R8235 += 1 };
  s1 -> s1 [0, 80] { R8285 += 1, R8235 += 1 };
  s1 -> s1 [0, 65535] { R8285 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [81, 81] { R8285 += 1, R8235 += 1 };
  s1 -> s1 [82, 65535] { R8285 += 1, R8235 += 1 };
  s2 -> s1 [0, 80] { R8285 += 1, R8235 += 1 };
  s2 -> s2 [0, 65535] { R8285 += 1, R8234 += 1, R8235 += 1 };
  s2 -> s3 [0, 65535] { R8285 += 1, R8235 += 1, R9 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [81, 81] { R8285 += 1, R8235 += 1 };
  s2 -> s1 [82, 65535] { R8285 += 1, R8235 += 1 };
  s3 -> s1 [0, 80] { R8285 += 1, R8235 += 1 };
  s3 -> s5 [0, 65535] { R8285 += 1 };
  s3 -> s3 [0, 65535] { R8285 += 1, R8235 += 1, R9 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [81, 81] { R8285 += 1, R8235 += 1 };
  s3 -> s1 [82, 65535] { R8285 += 1, R8235 += 1 };
  s4 -> s4 [0, 65535] { R8285 += 1, R8235 += 1 };
  s5 -> s5 [0, 65535] { R8285 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 80] { R8287 += 1, R8237 += 1, R8193 += 1 };
  s0 -> s2 [0, 65535] { R8287 += 1, R8237 += 1, R8192 += 1, R8193 += 1 };
  s0 -> s0 [0, 65535] { R8286 += 1, R8287 += 1 };
  s0 -> s3 [0, 65535] { R8287 += 1, R8236 += 1, R8237 += 1 };
  s0 -> s1 [82, 65535] { R8287 += 1, R8237 += 1, R8193 += 1 };
  s1 -> s1 [0, 80] { R8287 += 1, R8237 += 1, R8193 += 1 };
  s1 -> s5 [0, 65535] { R8287 += 1 };
  s1 -> s1 [0, 65535] { R8287 += 1, R8237 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R8287 += 1, R8237 += 1, R8193 += 1 };
  s2 -> s1 [0, 80] { R8287 += 1, R8237 += 1, R8193 += 1 };
  s2 -> s5 [0, 65535] { R8287 += 1 };
  s2 -> s2 [0, 65535] { R8287 += 1, R8237 += 1, R8192 += 1, R8193 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8287 += 1, R8237 += 1, R8193 += 1 };
  s3 -> s1 [0, 80] { R8287 += 1, R8237 += 1, R8193 += 1 };
  s3 -> s2 [0, 65535] { R8287 += 1, R8237 += 1, R8192 += 1, R8193 += 1 };
  s3 -> s3 [0, 65535] { R8287 += 1, R8236 += 1, R8237 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R8287 += 1, R8237 += 1, R8193 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8287 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R8289 += 1, R8239 += 1, R8194 += 1, R8195 += 1 };
  s0 -> s2 [0, 65535] { R8289 += 1, R8238 += 1, R8239 += 1 };
  s0 -> s0 [0, 65535] { R8288 += 1, R8289 += 1 };
  s0 -> s3 [0, 65535] { R8289 += 1, R8239 += 1, R8195 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R8289 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8289 += 1, R8239 += 1, R8194 += 1, R8195 += 1 };
  s1 -> s3 [0, 65535] { R8289 += 1, R8239 += 1, R8195 += 1, R20 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8289 += 1, R8239 += 1, R8194 += 1, R8195 += 1 };
  s2 -> s2 [0, 65535] { R8289 += 1, R8238 += 1, R8239 += 1 };
  s2 -> s3 [0, 65535] { R8289 += 1, R8239 += 1, R8195 += 1, R20 += 1 };
  s3 -> s4 [0, 65535] { R8289 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8289 += 1, R8239 += 1 };
  s3 -> s3 [0, 65535] { R8289 += 1, R8239 += 1, R8195 += 1, R20 += 1 };
  s4 -> s4 [0, 65535] { R8289 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8289 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8289 += 1, R8239 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8291 += 1, R8241 += 1, R8197 += 1 };
  s0 -> s2 [0, 65535] { R8291 += 1, R8241 += 1, R8196 += 1, R8197 += 1 };
  s0 -> s3 [0, 65535] { R8291 += 1, R8240 += 1, R8241 += 1 };
  s0 -> s0 [0, 65535] { R8290 += 1, R8291 += 1 };
  s1 -> s1 [0, 65535] { R8291 += 1, R8241 += 1, R8197 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8291 += 1 };
  s1 -> s6 [0, 65535] { R8291 += 1, R8241 += 1 };
  s2 -> s1 [0, 65535] { R8291 += 1, R8241 += 1, R8197 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8291 += 1, R8241 += 1, R8196 += 1, R8197 += 1 };
  s2 -> s5 [0, 65535] { R8291 += 1 };
  s3 -> s1 [0, 65535] { R8291 += 1, R8241 += 1, R8197 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8291 += 1, R8241 += 1, R8196 += 1, R8197 += 1 };
  s3 -> s3 [0, 65535] { R8291 += 1, R8240 += 1, R8241 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8291 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8291 += 1 };
  s6 -> s6 [0, 65535] { R8291 += 1, R8241 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8293 += 1, R8243 += 1, R8198 += 1, R8199 += 1 };
  s0 -> s2 [0, 65535] { R8293 += 1, R8243 += 1, R8199 += 1, R7287 += 1 };
  s0 -> s0 [0, 65535] { R8292 += 1, R8293 += 1 };
  s0 -> s3 [0, 65535] { R8293 += 1, R8242 += 1, R8243 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8293 += 1 };
  s1 -> s1 [0, 65535] { R8293 += 1, R8243 += 1, R8198 += 1, R8199 += 1 };
  s1 -> s2 [0, 65535] { R8293 += 1, R8243 += 1, R8199 += 1, R7287 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8293 += 1 };
  s2 -> s6 [0, 65535] { R8293 += 1, R8243 += 1 };
  s2 -> s2 [0, 65535] { R8293 += 1, R8243 += 1, R8199 += 1, R7287 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8293 += 1, R8243 += 1, R8198 += 1, R8199 += 1 };
  s3 -> s2 [0, 65535] { R8293 += 1, R8243 += 1, R8199 += 1, R7287 += 1 };
  s3 -> s3 [0, 65535] { R8293 += 1, R8242 += 1, R8243 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8293 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8293 += 1 };
  s6 -> s6 [0, 65535] { R8293 += 1, R8243 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 81] { R8295 += 1, R8245 += 1, R8201 += 1 };
  s0 -> s0 [0, 65535] { R8294 += 1, R8295 += 1 };
  s0 -> s2 [0, 65535] { R8295 += 1, R8244 += 1, R8245 += 1 };
  s0 -> s3 [0, 65535] { R8295 += 1, R8245 += 1, R8200 += 1, R8201 += 1 };
  s0 -> s1 [83, 65535] { R8295 += 1, R8245 += 1, R8201 += 1 };
  s1 -> s1 [0, 81] { R8295 += 1, R8245 += 1, R8201 += 1 };
  s1 -> s4 [0, 65535] { R8295 += 1 };
  s1 -> s1 [0, 65535] { R8295 += 1, R8245 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [83, 65535] { R8295 += 1, R8245 += 1, R8201 += 1 };
  s2 -> s1 [0, 81] { R8295 += 1, R8245 += 1, R8201 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8295 += 1, R8244 += 1, R8245 += 1 };
  s2 -> s3 [0, 65535] { R8295 += 1, R8245 += 1, R8200 += 1, R8201 += 1 };
  s2 -> s1 [83, 65535] { R8295 += 1, R8245 += 1, R8201 += 1 };
  s3 -> s1 [0, 81] { R8295 += 1, R8245 += 1, R8201 += 1 };
  s3 -> s4 [0, 65535] { R8295 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8295 += 1, R8245 += 1, R8200 += 1, R8201 += 1 };
  s3 -> s1 [83, 65535] { R8295 += 1, R8245 += 1, R8201 += 1 };
  s4 -> s4 [0, 65535] { R8295 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 81] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s0 -> s2 [0, 65535] { R8297 += 1, R8246 += 1, R8247 += 1 };
  s0 -> s3 [0, 65535] { R8297 += 1, R8247 += 1, R8203 += 1, R8058 += 1, R8059 += 1 };
  s0 -> s0 [0, 65535] { R8296 += 1, R8297 += 1 };
  s0 -> s4 [0, 65535] { R8297 += 1, R8247 += 1, R8202 += 1, R8203 += 1 };
  s0 -> s1 [83, 65535] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s1 -> s1 [0, 81] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s1 -> s1 [0, 65535] { R8297 += 1, R8247 += 1, R8203 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8297 += 1 };
  s1 -> s7 [0, 65535] { R8297 += 1, R8247 += 1 };
  s1 -> s1 [83, 65535] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s2 -> s1 [0, 81] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s2 -> s2 [0, 65535] { R8297 += 1, R8246 += 1, R8247 += 1 };
  s2 -> s3 [0, 65535] { R8297 += 1, R8247 += 1, R8203 += 1, R8058 += 1, R8059 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R8297 += 1, R8247 += 1, R8202 += 1, R8203 += 1 };
  s2 -> s1 [83, 65535] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s3 -> s1 [0, 81] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s3 -> s3 [0, 65535] { R8297 += 1, R8247 += 1, R8203 += 1, R8058 += 1, R8059 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8297 += 1 };
  s3 -> s7 [0, 65535] { R8297 += 1, R8247 += 1 };
  s3 -> s1 [83, 65535] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s4 -> s1 [0, 81] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s4 -> s3 [0, 65535] { R8297 += 1, R8247 += 1, R8203 += 1, R8058 += 1, R8059 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8297 += 1, R8247 += 1, R8202 += 1, R8203 += 1 };
  s4 -> s6 [0, 65535] { R8297 += 1 };
  s4 -> s1 [83, 65535] { R8297 += 1, R8247 += 1, R8203 += 1, R8059 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8297 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8297 += 1 };
  s7 -> s7 [0, 65535] { R8297 += 1, R8247 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R8299 += 1, R8249 += 1, R8204 += 1, R8205 += 1 };
  s0 -> s2 [0, 65535] { R8299 += 1, R8249 += 1, R8205 += 1, R8190 += 1, R8191 += 1 };
  s0 -> s3 [0, 65535] { R8299 += 1, R8249 += 1, R8205 += 1 };
  s0 -> s0 [0, 65535] { R8298 += 1, R8299 += 1 };
  s0 -> s4 [0, 65535] { R8299 += 1, R8248 += 1, R8249 += 1 };
  s1 -> s1 [0, 65535] { R8299 += 1, R8249 += 1, R8204 += 1, R8205 += 1 };
  s1 -> s2 [0, 65535] { R8299 += 1, R8249 += 1, R8205 += 1, R8190 += 1, R8191 += 1 };
  s1 -> s3 [0, 65535] { R8299 += 1, R8249 += 1, R8205 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8299 += 1 };
  s2 -> s2 [0, 65535] { R8299 += 1, R8249 += 1, R8205 += 1, R8190 += 1, R8191 += 1 };
  s2 -> s3 [0, 65535] { R8299 += 1, R8249 += 1, R8205 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8299 += 1 };
  s2 -> s7 [0, 65535] { R8299 += 1, R8249 += 1 };
  s3 -> s3 [0, 65535] { R8299 += 1, R8249 += 1, R8205 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8299 += 1 };
  s3 -> s7 [0, 65535] { R8299 += 1, R8249 += 1 };
  s4 -> s1 [0, 65535] { R8299 += 1, R8249 += 1, R8204 += 1, R8205 += 1 };
  s4 -> s2 [0, 65535] { R8299 += 1, R8249 += 1, R8205 += 1, R8190 += 1, R8191 += 1 };
  s4 -> s3 [0, 65535] { R8299 += 1, R8249 += 1, R8205 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8299 += 1, R8248 += 1, R8249 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8299 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8299 += 1 };
  s7 -> s7 [0, 65535] { R8299 += 1, R8249 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65535] { R8301 += 1, R8251 += 1, R8218 += 1, R8219 += 1 };
  s0 -> s0 [0, 65535] { R8300 += 1, R8301 += 1 };
  s0 -> s2 [0, 65535] { R8301 += 1, R8250 += 1, R8251 += 1 };
  s0 -> s3 [0, 65535] { R8301 += 1, R8251 += 1, R8219 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R8301 += 1, R8251 += 1, R8218 += 1, R8219 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R8301 += 1, R8251 += 1, R8219 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R8301 += 1 };
  s2 -> s1 [0, 65535] { R8301 += 1, R8251 += 1, R8218 += 1, R8219 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8301 += 1, R8250 += 1, R8251 += 1 };
  s2 -> s3 [0, 65535] { R8301 += 1, R8251 += 1, R8219 += 1, R21 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8301 += 1, R8251 += 1, R8219 += 1, R21 += 1 };
  s3 -> s5 [0, 65535] { R8301 += 1 };
  s3 -> s6 [0, 65535] { R8301 += 1, R8251 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8301 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8301 += 1, R8251 += 1 };
  s6 -> s5 [0, 65535] { R8301 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s0 -> s2 [0, 65535] { R8303 += 1, R8252 += 1, R8253 += 1 };
  s0 -> s3 [0, 65535] { R8303 += 1, R8253 += 1, R8220 += 1, R8221 += 1 };
  s0 -> s0 [0, 65535] { R8302 += 1, R8303 += 1 };
  s0 -> s4 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s0 -> s5 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s0 -> s6 [82, 82] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s0 -> s1 [83, 65535] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s1 -> s1 [0, 80] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s1 -> s4 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s1 -> s5 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s1 -> s6 [82, 82] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s1 -> s1 [83, 65535] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s2 -> s1 [0, 80] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s2 -> s2 [0, 65535] { R8303 += 1, R8252 += 1, R8253 += 1 };
  s2 -> s3 [0, 65535] { R8303 += 1, R8253 += 1, R8220 += 1, R8221 += 1 };
  s2 -> s4 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s2 -> s5 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s2 -> s6 [82, 82] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s2 -> s1 [83, 65535] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s3 -> s1 [0, 80] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s3 -> s3 [0, 65535] { R8303 += 1, R8253 += 1, R8220 += 1, R8221 += 1 };
  s3 -> s4 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s3 -> s5 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s3 -> s6 [82, 82] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s3 -> s1 [83, 65535] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s5 -> s5 [0, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s5 -> s9 [82, 82] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s5 -> s5 [83, 65535] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s6 -> s6 [0, 80] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R8303 += 1 };
  s6 -> s6 [0, 65535] { R8303 += 1, R8253 += 1 };
  s6 -> s9 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s6 -> s10 [81, 81] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s6 -> s6 [82, 65535] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8303 += 1 };
  s9 -> s9 [0, 65535] { R8303 += 1, R8253 += 1, R8221 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R8303 += 1 };
  s9 -> s11 [0, 65535] { R8303 += 1, R8253 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R8303 += 1 };
  s10 -> s10 [0, 65535] { R8303 += 1, R8253 += 1 };
  s11 -> s7 [0, 65535];
  s11 -> s8 [0, 65535] { R8303 += 1 };
  s11 -> s11 [0, 65535] { R8303 += 1, R8253 += 1 };
  accepting s8, s9, s6, s7, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s0 -> s0 [0, 65535] { R8304 += 1, R8305 += 1 };
  s0 -> s2 [0, 65535] { R8305 += 1, R8254 += 1, R8255 += 1 };
  s0 -> s3 [0, 65535] { R8305 += 1, R8255 += 1, R8222 += 1, R8223 += 1 };
  s0 -> s4 [81, 81] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s0 -> s5 [81, 81] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s0 -> s1 [82, 65535] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s1 -> s1 [0, 80] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s1 -> s6 [0, 65535] { R8305 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R8305 += 1, R8255 += 1 };
  s1 -> s4 [81, 81] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s1 -> s5 [81, 81] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s1 -> s1 [82, 65535] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s2 -> s1 [0, 80] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R8305 += 1, R8254 += 1, R8255 += 1 };
  s2 -> s3 [0, 65535] { R8305 += 1, R8255 += 1, R8222 += 1, R8223 += 1 };
  s2 -> s4 [81, 81] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s2 -> s5 [81, 81] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s2 -> s1 [82, 65535] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s3 -> s1 [0, 80] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s3 -> s6 [0, 65535] { R8305 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R8305 += 1, R8255 += 1, R8222 += 1, R8223 += 1 };
  s3 -> s4 [81, 81] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s3 -> s5 [81, 81] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s3 -> s1 [82, 65535] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s4 -> s6 [0, 65535] { R8305 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R8305 += 1, R8255 += 1 };
  s5 -> s6 [0, 65535] { R8305 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8305 += 1, R8255 += 1, R8223 += 1, R7286 += 1 };
  s5 -> s8 [0, 65535] { R8305 += 1, R8255 += 1 };
  s6 -> s6 [0, 65535] { R8305 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R8305 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8305 += 1, R8255 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s0 -> s2 [0, 80] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s0 -> s3 [0, 65535] { R8307 += 1, R8256 += 1, R8257 += 1 };
  s0 -> s4 [0, 65535] { R8307 += 1, R8257 += 1, R8224 += 1, R8225 += 1 };
  s0 -> s0 [0, 65535] { R8306 += 1, R8307 += 1 };
  s0 -> s5 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s0 -> s6 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s0 -> s7 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s0 -> s8 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s0 -> s2 [82, 65535] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s0 -> s1 [83, 65535] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s1 -> s1 [0, 80] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s1 -> s1 [0, 65535] { R8307 += 1, R8257 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s10 [0, 65535] { R8307 += 1 };
  s1 -> s5 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s1 -> s6 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s1 -> s1 [83, 65535] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s2 -> s1 [0, 80] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s2 -> s2 [0, 80] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s2 -> s5 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s2 -> s6 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s2 -> s7 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s2 -> s8 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s2 -> s2 [82, 65535] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s2 -> s1 [83, 65535] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s3 -> s1 [0, 80] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s3 -> s2 [0, 80] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s3 -> s3 [0, 65535] { R8307 += 1, R8256 += 1, R8257 += 1 };
  s3 -> s4 [0, 65535] { R8307 += 1, R8257 += 1, R8224 += 1, R8225 += 1 };
  s3 -> s5 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s3 -> s6 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s3 -> s7 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s3 -> s8 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s3 -> s2 [82, 65535] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s3 -> s1 [83, 65535] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s4 -> s1 [0, 80] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s4 -> s2 [0, 80] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s4 -> s4 [0, 65535] { R8307 += 1, R8257 += 1, R8224 += 1, R8225 += 1 };
  s4 -> s5 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s4 -> s6 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s4 -> s7 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s4 -> s8 [81, 81] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s4 -> s2 [82, 65535] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s4 -> s1 [83, 65535] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s5 -> s5 [0, 65535] { R8307 += 1, R8257 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s10 [0, 65535] { R8307 += 1 };
  s6 -> s6 [0, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s6 -> s6 [0, 65535] { R8307 += 1, R8257 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s10 [0, 65535] { R8307 += 1 };
  s6 -> s6 [83, 65535] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s8 -> s6 [0, 81] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s8 -> s8 [0, 65535] { R8307 += 1, R8257 += 1, R8225 += 1, R8054 += 1 };
  s8 -> s6 [83, 65535] { R8307 += 1, R8257 += 1, R8225 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8307 += 1 };
  accepting s5, s9, s6, s1, s10;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s2 [0, 65535] { R8309 += 1, R8258 += 1, R8259 += 1 };
  s0 -> s0 [0, 65535] { R8308 += 1, R8309 += 1 };
  s0 -> s3 [0, 65535] { R8309 += 1, R8259 += 1, R8226 += 1, R8227 += 1 };
  s0 -> s4 [81, 81] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s5 [81, 81] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s1 [82, 65535] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s1 [0, 80] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s6 [0, 65535] { R8309 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R8309 += 1, R8259 += 1 };
  s1 -> s4 [81, 81] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s5 [81, 81] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s1 [82, 65535] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s1 [0, 80] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R8309 += 1, R8258 += 1, R8259 += 1 };
  s2 -> s3 [0, 65535] { R8309 += 1, R8259 += 1, R8226 += 1, R8227 += 1 };
  s2 -> s4 [81, 81] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s5 [81, 81] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s1 [82, 65535] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s1 [0, 80] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s6 [0, 65535] { R8309 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R8309 += 1, R8259 += 1, R8226 += 1, R8227 += 1 };
  s3 -> s4 [81, 81] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s5 [81, 81] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s1 [82, 65535] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s4 -> s6 [0, 65535] { R8309 += 1 };
  s4 -> s4 [0, 65535] { R8309 += 1, R8259 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R8309 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R8309 += 1, R8259 += 1 };
  s5 -> s5 [0, 65535] { R8309 += 1, R8259 += 1, R8227 += 1, R8056 += 1, R8057 += 1 };
  s6 -> s6 [0, 65535] { R8309 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R8309 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8309 += 1, R8259 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s0 -> s2 [0, 80] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s0 -> s3 [0, 65535] { R8311 += 1, R8261 += 1, R8228 += 1, R8229 += 1 };
  s0 -> s0 [0, 65535] { R8310 += 1, R8311 += 1 };
  s0 -> s4 [0, 65535] { R8311 += 1, R8260 += 1, R8261 += 1 };
  s0 -> s5 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s0 -> s6 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s0 -> s7 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s0 -> s8 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s0 -> s1 [82, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s0 -> s2 [82, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s1 -> s1 [0, 80] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s1 -> s2 [0, 80] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s1 -> s5 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s1 -> s6 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s1 -> s7 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s1 -> s8 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s1 -> s1 [82, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s1 -> s2 [82, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s2 -> s2 [0, 80] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s2 -> s10 [0, 65535];
  s2 -> s11 [0, 65535] { R8311 += 1 };
  s2 -> s2 [0, 65535] { R8311 += 1, R8261 += 1 };
  s2 -> s5 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s2 -> s8 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s2 -> s2 [82, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s3 -> s1 [0, 80] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s3 -> s2 [0, 80] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s3 -> s3 [0, 65535] { R8311 += 1, R8261 += 1, R8228 += 1, R8229 += 1 };
  s3 -> s5 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s3 -> s6 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s3 -> s7 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s3 -> s8 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s3 -> s1 [82, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s3 -> s2 [82, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s4 -> s1 [0, 80] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s4 -> s2 [0, 80] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s4 -> s3 [0, 65535] { R8311 += 1, R8261 += 1, R8228 += 1, R8229 += 1 };
  s4 -> s4 [0, 65535] { R8311 += 1, R8260 += 1, R8261 += 1 };
  s4 -> s5 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s4 -> s6 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s4 -> s7 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s4 -> s8 [81, 81] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s4 -> s1 [82, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s4 -> s2 [82, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s5 -> s10 [0, 65535];
  s5 -> s5 [0, 65535] { R8311 += 1, R8261 += 1 };
  s5 -> s11 [0, 65535] { R8311 += 1 };
  s7 -> s7 [0, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8186 += 1, R8187 += 1 };
  s7 -> s8 [0, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s8 -> s9 [0, 65535] { R8311 += 1, R8261 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R8311 += 1, R8261 += 1, R8229 += 1, R8187 += 1, R8188 += 1 };
  s8 -> s11 [0, 65535] { R8311 += 1 };
  s9 -> s9 [0, 65535] { R8311 += 1, R8261 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R8311 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8311 += 1 };
  accepting s8, s5, s2, s9, s10, s11;
};
};
synchronised {  // Automata constraining P10
automaton P10_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R2 = R8261 && R3 = R8311 && R24 - R8311 = -1 && R25 = R8311 && R26 - R8311 = -1 && R27 = R8311 && R28 = 0 && R29 = 1 && R30 = 0 && R31 = 1 && R8220 = 0 && R8221 = 0 && R8224 = 0 && R8225 = 0 && R8228 = 0 && R8229 = 0 && R8230 = 0 && R8231 = R8261 && R8252 = 0 && R8253 = R8261 && R8256 = 0 && R8257 = R8261 && R8260 = 0 && R8262 = 0 && R8263 = R8311 && R8264 = 0 && R8265 = R8311 && R8266 = 0 && R8267 = R8311 && R8268 = 0 && R8269 = R8311 && R8270 = 0 && R8271 = R8311 && R8272 = 0 && R8273 = R8311 && R8274 = 0 && R8275 = R8311 && R8276 = 0 && R8277 = R8311 && R8278 = 0 && R8279 = R8311 && R8280 = 0 && R8281 = R8311 && R8282 = 0 && R8283 = R8311 && R8284 = 0 && R8285 = R8311 && R8286 = 0 && R8287 = R8311 && R8288 = 0 && R8289 = R8311 && R8290 = 0 && R8291 = R8311 && R8292 = 0 && R8293 = R8311 && R8294 = 0 && R8295 = R8311 && R8296 = 0 && R8297 = R8311 && R8298 = 0 && R8299 = R8311 && R8300 = 0 && R8301 = R8311 && R8302 = 0 && R8303 = R8311 && R8304 = 0 && R8305 = R8311 && R8306 = 0 && R8307 = R8311 && R8308 = 0 && R8309 = R8311 && R8310 = 0 && -1 < R1 && R9 < 1 && R12 < 1 && R15 < 1 && R16 < 1 && -1*R7287 + -1*R7286 - R7260 - R36 < 1 && R38 + R7262 + R8055 + R8054 < 1 && -1 < R8261 && 0 < R8311 && (R1 != 0 || R20 = 0 || (R8192 = 0 && R8193 = 0)) && (R1 != 0 || R20 = 0 || (R8194 = 0 && R8195 = 0)) && (R1 != 0 || R20 = 0 || (R8196 = 0 && R8197 = 0)) && (R1 != 0 || R20 = 0 || (R8198 = 0 && R8199 = 0)) && (R1 != 0 || R20 = 0 || (R8200 = 0 && R8201 = 0)) && (R1 != 0 || R20 = 0 || (R8202 = 0 && R8203 = 0)) && (R1 != 0 || R20 = 0 || (R8204 = 0 && R8205 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8191 + R8188 = 0 || (R40 + R7264 + R8058 + R8056 = 0 && R41 + R7265 + R8059 + R8057 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8191 + R8188 = 0 || (R44 + R7268 + R8189 + R8186 = 0 && R45 + R7269 + R8190 + R8187 = 0)) && (R40 + R7264 + R8058 + R8056 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8059 + -1*R8057 - R7265 - R41 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8189 + R8186 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8190 + -1*R8187 - R7269 - R45 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8192 != 0 || R1 = R8193 || R1 < 1) && (R8194 != 0 || R1 = R8195 || R1 < 1) && (R8196 != 0 || R1 = R8197 || R1 < 1) && (R8198 != 0 || R1 = R8199 || R1 < 1) && (R8200 != 0 || R1 = R8201 || R1 < 1) && (R8202 != 0 || R1 = R8203 || R1 < 1) && (R8204 != 0 || R1 = R8205 || R1 < 1) && (R8232 != 0 || R8233 = R8261 || (R1 = 0 && R8261 = 0)) && (R8234 != 0 || R8235 = R8261 || (R1 = 0 && R8261 = 0)) && (R8236 != 0 || R8237 = R8261 || (R1 = 0 && R8261 = 0)) && (R8238 != 0 || R8239 = R8261 || (R1 = 0 && R8261 = 0)) && (R8240 != 0 || R8241 = R8261 || (R1 = 0 && R8261 = 0)) && (R8242 != 0 || R8243 = R8261 || (R1 = 0 && R8261 = 0)) && (R8244 != 0 || R8245 = R8261 || (R1 = 0 && R8261 = 0)) && (R8246 != 0 || R8247 = R8261 || (R1 = 0 && R8261 = 0)) && (R8248 != 0 || R8249 = R8261 || (R1 = 0 && R8261 = 0)) && (R8250 != 0 || R8251 = R8261 || (R1 = 0 && R8261 = 0)) && (R8254 != 0 || R8255 = R8261 || (R1 = 0 && R8261 = 0)) && (R8258 != 0 || R8259 = R8261 || (R1 = 0 && R8261 = 0)) && (R21 = 0 || (R8218 = 0 && R8219 = 0)) && (R21 = 0 || (R8222 = 0 && R8223 = 0)) && (R21 = 0 || (R8226 = 0 && R8227 = 0)) && (R22 = 0 || (R8206 = 0 && R8207 = 0)) && (R22 = 0 || (R8208 = 0 && R8209 = 0)) && (R22 = 0 || (R8210 = 0 && R8211 = 0)) && (R22 = 0 || (R8212 = 0 && R8213 = 0)) && (R22 = 0 || (R8214 = 0 && R8215 = 0)) && (R22 = 0 || (R8216 = 0 && R8217 = 0)) && (R23 = 0 || (R7274 = 0 && R7275 = 0)) && (R23 = 0 || (R7276 = 0 && R7277 = 0)) && (R23 = 0 || (R7278 = 0 && R7279 = 0)) && (R23 = 0 || (R7280 = 0 && R7281 = 0)) && (R23 = 0 || (R7282 = 0 && R7283 = 0)) && (R23 = 0 || (R7284 = 0 && R7285 = 0)) && (R40 + R7264 + R8058 + R8056 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8189 + R8186 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8192 = 0 || R1 < 1) && (R8194 = 0 || R1 < 1) && (R8196 = 0 || R1 < 1) && (R8198 = 0 || R1 < 1) && (R8200 = 0 || R1 < 1) && (R8202 = 0 || R1 < 1) && (R8204 = 0 || R1 < 1) && (R8232 = 0 || (R1 = 0 && R8261 = 0)) && (R8234 = 0 || (R1 = 0 && R8261 = 0)) && (R8236 = 0 || (R1 = 0 && R8261 = 0)) && (R8238 = 0 || (R1 = 0 && R8261 = 0)) && (R8240 = 0 || (R1 = 0 && R8261 = 0)) && (R8242 = 0 || (R1 = 0 && R8261 = 0)) && (R8244 = 0 || (R1 = 0 && R8261 = 0)) && (R8246 = 0 || (R1 = 0 && R8261 = 0)) && (R8248 = 0 || (R1 = 0 && R8261 = 0)) && (R8250 = 0 || (R1 = 0 && R8261 = 0)) && (R8254 = 0 || (R1 = 0 && R8261 = 0)) && (R8258 = 0 || (R1 = 0 && R8261 = 0));
// End of Parikh automata intersection problem
