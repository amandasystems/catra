// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R36, R38, R4, R40, R41, R44, R45, R46, R5, R7260, R7262, R7264, R7265, R7268, R7269, R7270, R7274, R7275, R7276, R7277, R7278, R7279, R7280, R7281, R7282, R7283, R7284, R7285, R7286, R7287, R8054, R8055, R8056, R8057, R8058, R8059, R8312, R8313, R8314, R8315, R8316, R8317, R8318, R8319, R8320, R8321, R8322, R8323, R8324, R8325, R8326, R8327, R8328, R8329, R8330, R8331, R8332, R8333, R8334, R8335, R8336, R8337, R8338, R8339, R8340, R8341, R8342, R8343, R8344, R8345, R8346, R8347, R8348, R8349, R8350, R8351, R8352, R8353, R8354, R8355, R8356, R8357, R8358, R8359, R8360, R8361, R8362, R8363, R8364, R8365, R8366, R8367, R8368, R8369, R8370, R8371, R8372, R8373, R8374, R8375, R8376, R8377, R8378, R8379, R8380, R8381, R8382, R8383, R8384, R8385, R8386, R8387, R8388, R8389, R8390, R8391, R8392, R8393, R8394, R8395, R8396, R8397, R8398, R8399, R8400, R8401, R8402, R8403, R8404, R8405, R8406, R8407, R8408, R8409, R8410, R8411, R8412, R8413, R8414, R8415, R8416, R8417, R8418, R8419, R8420, R8421, R8422, R8423, R8424, R8425, R8426, R8427, R8428, R8429, R8430, R8431, R8432, R8433, R8434, R8435, R8436, R8437, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s2 [9, 13] { R29 += 1 };
  s0 -> s1 [14, 31] { R29 += 1 };
  s0 -> s2 [32, 32] { R29 += 1 };
  s0 -> s1 [33, 65535] { R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R29 += 1 };
  s2 -> s1 [0, 65535] { R29 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R7274 += 1, R7275 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R7277 += 1 };
  s0 -> s0 [0, 65535] { R7276 += 1, R7277 += 1 };
  s0 -> s2 [81, 81] { R7277 += 1 };
  s0 -> s3 [81, 81] { R7277 += 1 };
  s0 -> s1 [83, 65535] { R7277 += 1 };
  s1 -> s1 [0, 80] { R7277 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7277 += 1 };
  s1 -> s3 [81, 81] { R7277 += 1 };
  s1 -> s1 [83, 65535] { R7277 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R7277 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R7277 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R7278 += 1, R7279 += 1 };
  s0 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7280 += 1, R7281 += 1 };
  s0 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7281 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R7282 += 1, R7283 += 1 };
  s0 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7284 += 1, R7285 += 1 };
  s0 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R8389 += 1 };
  s0 -> s0 [0, 65535] { R8388 += 1, R8389 += 1 };
  s0 -> s2 [81, 81] { R8389 += 1 };
  s0 -> s1 [82, 65535] { R8389 += 1 };
  s1 -> s1 [0, 80] { R8389 += 1 };
  s1 -> s2 [81, 81] { R8389 += 1 };
  s1 -> s1 [82, 65535] { R8389 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8389 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8391 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8390 += 1, R8391 += 1 };
  s1 -> s1 [0, 65535] { R8391 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R8393 += 1 };
  s0 -> s2 [0, 65535] { R8393 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R8392 += 1, R8393 += 1 };
  s0 -> s3 [81, 81] { R8393 += 1 };
  s0 -> s1 [82, 65535] { R8393 += 1 };
  s1 -> s1 [0, 80] { R8393 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R8393 += 1 };
  s1 -> s1 [82, 65535] { R8393 += 1 };
  s2 -> s1 [0, 80] { R8393 += 1 };
  s2 -> s2 [0, 65535] { R8393 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R8393 += 1 };
  s2 -> s1 [82, 65535] { R8393 += 1 };
  s3 -> s3 [0, 65535] { R8393 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R8395 += 1, R8333 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8394 += 1, R8395 += 1 };
  s0 -> s2 [0, 65535] { R8395 += 1, R8332 += 1, R8333 += 1 };
  s1 -> s1 [0, 65535] { R8395 += 1, R8333 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8395 += 1 };
  s2 -> s1 [0, 65535] { R8395 += 1, R8333 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R8395 += 1, R8332 += 1, R8333 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8395 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 80] { R8397 += 1, R8335 += 1 };
  s0 -> s0 [0, 65535] { R8396 += 1, R8397 += 1 };
  s0 -> s2 [0, 65535] { R8397 += 1, R8334 += 1, R8335 += 1 };
  s0 -> s3 [81, 81] { R8397 += 1, R8335 += 1 };
  s0 -> s4 [81, 81] { R8397 += 1, R8335 += 1 };
  s0 -> s1 [83, 65535] { R8397 += 1, R8335 += 1 };
  s1 -> s1 [0, 80] { R8397 += 1, R8335 += 1 };
  s1 -> s1 [0, 65535] { R8397 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8397 += 1, R8335 += 1 };
  s1 -> s4 [81, 81] { R8397 += 1, R8335 += 1 };
  s1 -> s1 [83, 65535] { R8397 += 1, R8335 += 1 };
  s2 -> s1 [0, 80] { R8397 += 1, R8335 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8397 += 1, R8334 += 1, R8335 += 1 };
  s2 -> s3 [81, 81] { R8397 += 1, R8335 += 1 };
  s2 -> s4 [81, 81] { R8397 += 1, R8335 += 1 };
  s2 -> s1 [83, 65535] { R8397 += 1, R8335 += 1 };
  s3 -> s3 [0, 65535] { R8397 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 81] { R8397 += 1, R8335 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8397 += 1 };
  s4 -> s4 [83, 65535] { R8397 += 1, R8335 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s0 -> s2 [0, 65535] { R8399 += 1, R8336 += 1, R8337 += 1 };
  s0 -> s0 [0, 65535] { R8398 += 1, R8399 += 1 };
  s0 -> s3 [81, 81] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s0 -> s4 [81, 81] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s0 -> s1 [82, 65535] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s1 -> s1 [0, 80] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s1 -> s1 [0, 65535] { R8399 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s1 -> s4 [81, 81] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s1 -> s1 [82, 65535] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s2 -> s1 [0, 80] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s2 -> s2 [0, 65535] { R8399 += 1, R8336 += 1, R8337 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s2 -> s4 [81, 81] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s2 -> s1 [82, 65535] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s3 -> s6 [0, 65535] { R8399 += 1 };
  s3 -> s3 [0, 65535] { R8399 += 1, R8337 += 1, R7260 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8399 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8399 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s0 -> s2 [0, 65535] { R8401 += 1, R8338 += 1, R8339 += 1 };
  s0 -> s0 [0, 65535] { R8400 += 1, R8401 += 1 };
  s0 -> s3 [81, 81] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s0 -> s4 [81, 81] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s0 -> s1 [82, 65535] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s1 -> s1 [0, 80] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8401 += 1 };
  s1 -> s3 [81, 81] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s1 -> s4 [81, 81] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s1 -> s1 [82, 65535] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s2 -> s1 [0, 80] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s2 -> s2 [0, 65535] { R8401 += 1, R8338 += 1, R8339 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s2 -> s4 [81, 81] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s2 -> s1 [82, 65535] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s3 -> s3 [0, 65535] { R8401 += 1, R8339 += 1, R7262 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8401 += 1 };
  s4 -> s4 [0, 65535] { R8401 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8401 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 80] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s0 [0, 65535] { R8402 += 1, R8403 += 1 };
  s0 -> s2 [0, 65535] { R8403 += 1, R8340 += 1, R8341 += 1 };
  s0 -> s3 [81, 81] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s4 [81, 81] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s1 [82, 65535] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [0, 80] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [0, 65535] { R8403 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s4 [81, 81] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [82, 65535] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [0, 80] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8403 += 1, R8340 += 1, R8341 += 1 };
  s2 -> s3 [81, 81] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s4 [81, 81] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [82, 65535] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s3 [0, 65535] { R8403 += 1, R8341 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s6 [0, 65535] { R8403 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8403 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8403 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 80] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s0 [0, 65535] { R8404 += 1, R8405 += 1 };
  s0 -> s2 [0, 65535] { R8405 += 1, R8342 += 1, R8343 += 1 };
  s0 -> s3 [81, 81] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s4 [81, 81] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s1 [82, 65535] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 80] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 65535] { R8405 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s4 [81, 81] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [82, 65535] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [0, 80] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s2 [0, 65535] { R8405 += 1, R8342 += 1, R8343 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s4 [81, 81] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [82, 65535] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s3 [0, 65535] { R8405 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8405 += 1 };
  s4 -> s4 [0, 65535] { R8405 += 1, R8343 += 1, R7268 += 1, R7269 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8405 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 80] { R8407 += 1, R8357 += 1 };
  s0 -> s0 [0, 65535] { R8406 += 1, R8407 += 1 };
  s0 -> s2 [0, 65535] { R8407 += 1, R8356 += 1, R8357 += 1 };
  s0 -> s3 [81, 81] { R8407 += 1, R8357 += 1 };
  s0 -> s1 [82, 65535] { R8407 += 1, R8357 += 1 };
  s1 -> s1 [0, 80] { R8407 += 1, R8357 += 1 };
  s1 -> s3 [81, 81] { R8407 += 1, R8357 += 1 };
  s1 -> s1 [82, 65535] { R8407 += 1, R8357 += 1 };
  s2 -> s1 [0, 80] { R8407 += 1, R8357 += 1 };
  s2 -> s2 [0, 65535] { R8407 += 1, R8356 += 1, R8357 += 1 };
  s2 -> s3 [81, 81] { R8407 += 1, R8357 += 1 };
  s2 -> s1 [82, 65535] { R8407 += 1, R8357 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8407 += 1, R8357 += 1 };
  s3 -> s5 [0, 65535] { R8407 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8407 += 1 };
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R8408 += 1, R8409 += 1 };
  s0 -> s1 [0, 65535] { R8409 += 1, R8358 += 1, R8359 += 1 };
  s0 -> s2 [0, 65535] { R8409 += 1, R8359 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8409 += 1, R8358 += 1, R8359 += 1 };
  s1 -> s2 [0, 65535] { R8409 += 1, R8359 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8409 += 1 };
  s2 -> s2 [0, 65535] { R8409 += 1, R8359 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8409 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R8411 += 1, R8361 += 1 };
  s0 -> s2 [0, 65535] { R8411 += 1, R8360 += 1, R8361 += 1 };
  s0 -> s3 [0, 65535] { R8411 += 1, R8361 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R8410 += 1, R8411 += 1 };
  s0 -> s4 [81, 81] { R8411 += 1, R8361 += 1 };
  s0 -> s1 [82, 65535] { R8411 += 1, R8361 += 1 };
  s1 -> s1 [0, 80] { R8411 += 1, R8361 += 1 };
  s1 -> s1 [0, 65535] { R8411 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [81, 81] { R8411 += 1, R8361 += 1 };
  s1 -> s1 [82, 65535] { R8411 += 1, R8361 += 1 };
  s2 -> s1 [0, 80] { R8411 += 1, R8361 += 1 };
  s2 -> s2 [0, 65535] { R8411 += 1, R8360 += 1, R8361 += 1 };
  s2 -> s3 [0, 65535] { R8411 += 1, R8361 += 1, R9 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [81, 81] { R8411 += 1, R8361 += 1 };
  s2 -> s1 [82, 65535] { R8411 += 1, R8361 += 1 };
  s3 -> s1 [0, 80] { R8411 += 1, R8361 += 1 };
  s3 -> s3 [0, 65535] { R8411 += 1, R8361 += 1, R9 += 1 };
  s3 -> s5 [0, 65535] { R8411 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [81, 81] { R8411 += 1, R8361 += 1 };
  s3 -> s1 [82, 65535] { R8411 += 1, R8361 += 1 };
  s4 -> s4 [0, 65535] { R8411 += 1, R8361 += 1 };
  s5 -> s5 [0, 65535] { R8411 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 80] { R8413 += 1, R8363 += 1, R8319 += 1 };
  s0 -> s2 [0, 65535] { R8413 += 1, R8362 += 1, R8363 += 1 };
  s0 -> s3 [0, 65535] { R8413 += 1, R8363 += 1, R8318 += 1, R8319 += 1 };
  s0 -> s0 [0, 65535] { R8412 += 1, R8413 += 1 };
  s0 -> s1 [82, 65535] { R8413 += 1, R8363 += 1, R8319 += 1 };
  s1 -> s1 [0, 80] { R8413 += 1, R8363 += 1, R8319 += 1 };
  s1 -> s1 [0, 65535] { R8413 += 1, R8363 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8413 += 1 };
  s1 -> s1 [82, 65535] { R8413 += 1, R8363 += 1, R8319 += 1 };
  s2 -> s1 [0, 80] { R8413 += 1, R8363 += 1, R8319 += 1 };
  s2 -> s2 [0, 65535] { R8413 += 1, R8362 += 1, R8363 += 1 };
  s2 -> s3 [0, 65535] { R8413 += 1, R8363 += 1, R8318 += 1, R8319 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8413 += 1, R8363 += 1, R8319 += 1 };
  s3 -> s1 [0, 80] { R8413 += 1, R8363 += 1, R8319 += 1 };
  s3 -> s3 [0, 65535] { R8413 += 1, R8363 += 1, R8318 += 1, R8319 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8413 += 1 };
  s3 -> s1 [82, 65535] { R8413 += 1, R8363 += 1, R8319 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8413 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R8415 += 1, R8365 += 1, R8320 += 1, R8321 += 1 };
  s0 -> s2 [0, 65535] { R8415 += 1, R8364 += 1, R8365 += 1 };
  s0 -> s0 [0, 65535] { R8414 += 1, R8415 += 1 };
  s0 -> s3 [0, 65535] { R8415 += 1, R8365 += 1, R8321 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R8415 += 1, R8365 += 1, R8320 += 1, R8321 += 1 };
  s1 -> s4 [0, 65535] { R8415 += 1 };
  s1 -> s3 [0, 65535] { R8415 += 1, R8365 += 1, R8321 += 1, R20 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R8415 += 1, R8365 += 1, R8320 += 1, R8321 += 1 };
  s2 -> s2 [0, 65535] { R8415 += 1, R8364 += 1, R8365 += 1 };
  s2 -> s3 [0, 65535] { R8415 += 1, R8365 += 1, R8321 += 1, R20 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R8415 += 1 };
  s3 -> s5 [0, 65535] { R8415 += 1, R8365 += 1 };
  s3 -> s3 [0, 65535] { R8415 += 1, R8365 += 1, R8321 += 1, R20 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8415 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R8415 += 1 };
  s5 -> s5 [0, 65535] { R8415 += 1, R8365 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8417 += 1, R8367 += 1, R8322 += 1, R8323 += 1 };
  s0 -> s2 [0, 65535] { R8417 += 1, R8366 += 1, R8367 += 1 };
  s0 -> s3 [0, 65535] { R8417 += 1, R8367 += 1, R8323 += 1 };
  s0 -> s0 [0, 65535] { R8416 += 1, R8417 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8417 += 1, R8367 += 1, R8322 += 1, R8323 += 1 };
  s1 -> s3 [0, 65535] { R8417 += 1, R8367 += 1, R8323 += 1 };
  s1 -> s6 [0, 65535] { R8417 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R8417 += 1, R8367 += 1, R8322 += 1, R8323 += 1 };
  s2 -> s2 [0, 65535] { R8417 += 1, R8366 += 1, R8367 += 1 };
  s2 -> s3 [0, 65535] { R8417 += 1, R8367 += 1, R8323 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8417 += 1, R8367 += 1 };
  s3 -> s3 [0, 65535] { R8417 += 1, R8367 += 1, R8323 += 1 };
  s3 -> s6 [0, 65535] { R8417 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8417 += 1, R8367 += 1 };
  s5 -> s6 [0, 65535] { R8417 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8417 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8419 += 1, R8368 += 1, R8369 += 1 };
  s0 -> s2 [0, 65535] { R8419 += 1, R8369 += 1, R8325 += 1, R7287 += 1 };
  s0 -> s0 [0, 65535] { R8418 += 1, R8419 += 1 };
  s0 -> s3 [0, 65535] { R8419 += 1, R8369 += 1, R8324 += 1, R8325 += 1 };
  s1 -> s1 [0, 65535] { R8419 += 1, R8368 += 1, R8369 += 1 };
  s1 -> s2 [0, 65535] { R8419 += 1, R8369 += 1, R8325 += 1, R7287 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R8419 += 1, R8369 += 1, R8324 += 1, R8325 += 1 };
  s2 -> s2 [0, 65535] { R8419 += 1, R8369 += 1, R8325 += 1, R7287 += 1 };
  s2 -> s4 [0, 65535] { R8419 += 1 };
  s2 -> s6 [0, 65535] { R8419 += 1, R8369 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8419 += 1, R8369 += 1, R8325 += 1, R7287 += 1 };
  s3 -> s4 [0, 65535] { R8419 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8419 += 1, R8369 += 1, R8324 += 1, R8325 += 1 };
  s4 -> s4 [0, 65535] { R8419 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8419 += 1 };
  s6 -> s6 [0, 65535] { R8419 += 1, R8369 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 81] { R8421 += 1, R8371 += 1, R8327 += 1 };
  s0 -> s0 [0, 65535] { R8420 += 1, R8421 += 1 };
  s0 -> s2 [0, 65535] { R8421 += 1, R8370 += 1, R8371 += 1 };
  s0 -> s3 [0, 65535] { R8421 += 1, R8371 += 1, R8326 += 1, R8327 += 1 };
  s0 -> s1 [83, 65535] { R8421 += 1, R8371 += 1, R8327 += 1 };
  s1 -> s1 [0, 81] { R8421 += 1, R8371 += 1, R8327 += 1 };
  s1 -> s4 [0, 65535] { R8421 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8421 += 1, R8371 += 1 };
  s1 -> s1 [83, 65535] { R8421 += 1, R8371 += 1, R8327 += 1 };
  s2 -> s1 [0, 81] { R8421 += 1, R8371 += 1, R8327 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8421 += 1, R8370 += 1, R8371 += 1 };
  s2 -> s3 [0, 65535] { R8421 += 1, R8371 += 1, R8326 += 1, R8327 += 1 };
  s2 -> s1 [83, 65535] { R8421 += 1, R8371 += 1, R8327 += 1 };
  s3 -> s1 [0, 81] { R8421 += 1, R8371 += 1, R8327 += 1 };
  s3 -> s4 [0, 65535] { R8421 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8421 += 1, R8371 += 1, R8326 += 1, R8327 += 1 };
  s3 -> s1 [83, 65535] { R8421 += 1, R8371 += 1, R8327 += 1 };
  s4 -> s4 [0, 65535] { R8421 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 81] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s0 -> s2 [0, 65535] { R8423 += 1, R8373 += 1, R8328 += 1, R8329 += 1 };
  s0 -> s3 [0, 65535] { R8423 += 1, R8372 += 1, R8373 += 1 };
  s0 -> s0 [0, 65535] { R8422 += 1, R8423 += 1 };
  s0 -> s4 [0, 65535] { R8423 += 1, R8373 += 1, R8329 += 1, R8058 += 1, R8059 += 1 };
  s0 -> s1 [83, 65535] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s1 -> s1 [0, 81] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s1 -> s5 [0, 65535] { R8423 += 1, R8373 += 1 };
  s1 -> s1 [0, 65535] { R8423 += 1, R8373 += 1, R8329 += 1 };
  s1 -> s6 [0, 65535] { R8423 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [83, 65535] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s2 -> s1 [0, 81] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s2 -> s2 [0, 65535] { R8423 += 1, R8373 += 1, R8328 += 1, R8329 += 1 };
  s2 -> s6 [0, 65535] { R8423 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R8423 += 1, R8373 += 1, R8329 += 1, R8058 += 1, R8059 += 1 };
  s2 -> s1 [83, 65535] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s3 -> s1 [0, 81] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s3 -> s2 [0, 65535] { R8423 += 1, R8373 += 1, R8328 += 1, R8329 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R8423 += 1, R8372 += 1, R8373 += 1 };
  s3 -> s4 [0, 65535] { R8423 += 1, R8373 += 1, R8329 += 1, R8058 += 1, R8059 += 1 };
  s3 -> s1 [83, 65535] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s4 -> s1 [0, 81] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s4 -> s5 [0, 65535] { R8423 += 1, R8373 += 1 };
  s4 -> s6 [0, 65535] { R8423 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R8423 += 1, R8373 += 1, R8329 += 1, R8058 += 1, R8059 += 1 };
  s4 -> s1 [83, 65535] { R8423 += 1, R8373 += 1, R8329 += 1, R8059 += 1 };
  s5 -> s5 [0, 65535] { R8423 += 1, R8373 += 1 };
  s5 -> s6 [0, 65535] { R8423 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R8423 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s0 [0, 65535] { R8424 += 1, R8425 += 1 };
  s0 -> s1 [0, 65535] { R8425 += 1, R8375 += 1, R8331 += 1 };
  s0 -> s2 [0, 65535] { R8425 += 1, R8375 += 1, R8330 += 1, R8331 += 1 };
  s0 -> s3 [0, 65535] { R8425 += 1, R8374 += 1, R8375 += 1 };
  s1 -> s5 [0, 65535] { R8425 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8425 += 1, R8375 += 1 };
  s1 -> s1 [0, 65535] { R8425 += 1, R8375 += 1, R8331 += 1 };
  s2 -> s5 [0, 65535] { R8425 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R8425 += 1, R8375 += 1, R8331 += 1 };
  s2 -> s2 [0, 65535] { R8425 += 1, R8375 += 1, R8330 += 1, R8331 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8425 += 1, R8375 += 1, R8331 += 1 };
  s3 -> s2 [0, 65535] { R8425 += 1, R8375 += 1, R8330 += 1, R8331 += 1 };
  s3 -> s3 [0, 65535] { R8425 += 1, R8374 += 1, R8375 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8425 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8425 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8425 += 1, R8375 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s0 [0, 65535] { R8426 += 1, R8427 += 1 };
  s0 -> s1 [0, 65535] { R8427 += 1, R8377 += 1, R8345 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R8427 += 1, R8377 += 1, R8344 += 1, R8345 += 1 };
  s0 -> s3 [0, 65535] { R8427 += 1, R8376 += 1, R8377 += 1 };
  s1 -> s1 [0, 65535] { R8427 += 1, R8377 += 1, R8345 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8427 += 1, R8377 += 1 };
  s1 -> s5 [0, 65535] { R8427 += 1 };
  s2 -> s1 [0, 65535] { R8427 += 1, R8377 += 1, R8345 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8427 += 1, R8377 += 1, R8344 += 1, R8345 += 1 };
  s2 -> s5 [0, 65535] { R8427 += 1 };
  s3 -> s1 [0, 65535] { R8427 += 1, R8377 += 1, R8345 += 1, R21 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8427 += 1, R8377 += 1, R8344 += 1, R8345 += 1 };
  s3 -> s3 [0, 65535] { R8427 += 1, R8376 += 1, R8377 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8427 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8427 += 1, R8377 += 1 };
  s6 -> s5 [0, 65535] { R8427 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s0 -> s2 [0, 65535] { R8429 += 1, R8378 += 1, R8379 += 1 };
  s0 -> s3 [0, 65535] { R8429 += 1, R8379 += 1, R8346 += 1, R8347 += 1 };
  s0 -> s0 [0, 65535] { R8428 += 1, R8429 += 1 };
  s0 -> s4 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s0 -> s5 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s0 -> s6 [82, 82] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s0 -> s1 [83, 65535] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s1 -> s1 [0, 80] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s1 -> s4 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s1 -> s5 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s1 -> s6 [82, 82] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s1 -> s1 [83, 65535] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s2 -> s1 [0, 80] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s2 -> s2 [0, 65535] { R8429 += 1, R8378 += 1, R8379 += 1 };
  s2 -> s3 [0, 65535] { R8429 += 1, R8379 += 1, R8346 += 1, R8347 += 1 };
  s2 -> s4 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s2 -> s5 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s2 -> s6 [82, 82] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s2 -> s1 [83, 65535] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s3 -> s1 [0, 80] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s3 -> s3 [0, 65535] { R8429 += 1, R8379 += 1, R8346 += 1, R8347 += 1 };
  s3 -> s4 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s3 -> s5 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s3 -> s6 [82, 82] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s3 -> s1 [83, 65535] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s4 -> s4 [0, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s4 -> s10 [82, 82] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s4 -> s4 [83, 65535] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s6 -> s6 [0, 80] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s6 -> s6 [0, 65535] { R8429 += 1, R8379 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R8429 += 1 };
  s6 -> s9 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s6 -> s10 [81, 81] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s6 -> s6 [82, 65535] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8429 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R8429 += 1, R8379 += 1 };
  s9 -> s8 [0, 65535] { R8429 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s11 [0, 65535] { R8429 += 1, R8379 += 1 };
  s10 -> s10 [0, 65535] { R8429 += 1, R8379 += 1, R8347 += 1 };
  s10 -> s8 [0, 65535] { R8429 += 1 };
  s11 -> s7 [0, 65535];
  s11 -> s11 [0, 65535] { R8429 += 1, R8379 += 1 };
  s11 -> s8 [0, 65535] { R8429 += 1 };
  accepting s8, s9, s6, s7, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s0 -> s0 [0, 65535] { R8430 += 1, R8431 += 1 };
  s0 -> s2 [0, 65535] { R8431 += 1, R8380 += 1, R8381 += 1 };
  s0 -> s3 [0, 65535] { R8431 += 1, R8381 += 1, R8348 += 1, R8349 += 1 };
  s0 -> s4 [81, 81] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s0 -> s5 [81, 81] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s0 -> s1 [82, 65535] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s1 -> s1 [0, 80] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s1 -> s1 [0, 65535] { R8431 += 1, R8381 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R8431 += 1 };
  s1 -> s4 [81, 81] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s1 -> s5 [81, 81] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s1 -> s1 [82, 65535] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s2 -> s1 [0, 80] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R8431 += 1, R8380 += 1, R8381 += 1 };
  s2 -> s3 [0, 65535] { R8431 += 1, R8381 += 1, R8348 += 1, R8349 += 1 };
  s2 -> s4 [81, 81] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s2 -> s5 [81, 81] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s2 -> s1 [82, 65535] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s3 -> s1 [0, 80] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R8431 += 1, R8381 += 1, R8348 += 1, R8349 += 1 };
  s3 -> s8 [0, 65535] { R8431 += 1 };
  s3 -> s4 [81, 81] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s3 -> s5 [81, 81] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s3 -> s1 [82, 65535] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s4 -> s4 [0, 65535] { R8431 += 1, R8381 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R8431 += 1 };
  s5 -> s6 [0, 65535] { R8431 += 1, R8381 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8431 += 1, R8381 += 1, R8349 += 1, R7286 += 1 };
  s5 -> s8 [0, 65535] { R8431 += 1 };
  s6 -> s6 [0, 65535] { R8431 += 1, R8381 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R8431 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8431 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s0 -> s2 [0, 80] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s0 -> s3 [0, 65535] { R8433 += 1, R8383 += 1, R8350 += 1, R8351 += 1 };
  s0 -> s4 [0, 65535] { R8433 += 1, R8382 += 1, R8383 += 1 };
  s0 -> s0 [0, 65535] { R8432 += 1, R8433 += 1 };
  s0 -> s5 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s0 -> s6 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s0 -> s7 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s0 -> s8 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s0 -> s1 [82, 65535] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s0 -> s2 [83, 65535] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s1 -> s1 [0, 80] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s1 -> s2 [0, 80] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s1 -> s5 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s1 -> s6 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s1 -> s7 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s1 -> s8 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s1 -> s1 [82, 65535] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s1 -> s2 [83, 65535] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s2 -> s2 [0, 80] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R8433 += 1, R8383 += 1 };
  s2 -> s10 [0, 65535] { R8433 += 1 };
  s2 -> s5 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s2 -> s8 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s2 -> s2 [83, 65535] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s3 -> s1 [0, 80] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s3 -> s2 [0, 80] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s3 -> s3 [0, 65535] { R8433 += 1, R8383 += 1, R8350 += 1, R8351 += 1 };
  s3 -> s5 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s3 -> s6 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s3 -> s7 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s3 -> s8 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s3 -> s1 [82, 65535] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s3 -> s2 [83, 65535] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s4 -> s1 [0, 80] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s4 -> s2 [0, 80] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s4 -> s3 [0, 65535] { R8433 += 1, R8383 += 1, R8350 += 1, R8351 += 1 };
  s4 -> s4 [0, 65535] { R8433 += 1, R8382 += 1, R8383 += 1 };
  s4 -> s5 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s4 -> s6 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s4 -> s7 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s4 -> s8 [81, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s4 -> s1 [82, 65535] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s4 -> s2 [83, 65535] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s5 -> s5 [0, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R8433 += 1, R8383 += 1 };
  s5 -> s10 [0, 65535] { R8433 += 1 };
  s5 -> s5 [83, 65535] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s7 -> s5 [0, 81] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s7 -> s7 [0, 65535] { R8433 += 1, R8383 += 1, R8351 += 1, R8054 += 1 };
  s7 -> s5 [83, 65535] { R8433 += 1, R8383 += 1, R8351 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8433 += 1, R8383 += 1 };
  s8 -> s10 [0, 65535] { R8433 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8433 += 1 };
  accepting s8, s5, s2, s9, s10;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s0 [0, 65535] { R8434 += 1, R8435 += 1 };
  s0 -> s2 [0, 65535] { R8435 += 1, R8384 += 1, R8385 += 1 };
  s0 -> s3 [0, 65535] { R8435 += 1, R8385 += 1, R8352 += 1, R8353 += 1 };
  s0 -> s4 [81, 81] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s5 [81, 81] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s1 [82, 65535] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s1 [0, 80] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8435 += 1 };
  s1 -> s1 [0, 65535] { R8435 += 1, R8385 += 1 };
  s1 -> s4 [81, 81] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s5 [81, 81] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s1 [82, 65535] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s1 [0, 80] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8435 += 1, R8384 += 1, R8385 += 1 };
  s2 -> s3 [0, 65535] { R8435 += 1, R8385 += 1, R8352 += 1, R8353 += 1 };
  s2 -> s4 [81, 81] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s5 [81, 81] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s1 [82, 65535] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s1 [0, 80] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8435 += 1, R8385 += 1, R8352 += 1, R8353 += 1 };
  s3 -> s7 [0, 65535] { R8435 += 1 };
  s3 -> s4 [81, 81] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s5 [81, 81] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s3 -> s1 [82, 65535] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8435 += 1, R8385 += 1, R8353 += 1, R8056 += 1, R8057 += 1 };
  s4 -> s8 [0, 65535] { R8435 += 1, R8385 += 1 };
  s4 -> s7 [0, 65535] { R8435 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8435 += 1, R8385 += 1 };
  s5 -> s7 [0, 65535] { R8435 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8435 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8435 += 1, R8385 += 1 };
  s8 -> s7 [0, 65535] { R8435 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s0 -> s2 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s0 -> s3 [0, 65535] { R8437 += 1, R8386 += 1, R8387 += 1 };
  s0 -> s4 [0, 65535] { R8437 += 1, R8387 += 1, R8354 += 1, R8355 += 1 };
  s0 -> s0 [0, 65535] { R8436 += 1, R8437 += 1 };
  s0 -> s5 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s0 -> s6 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s0 -> s7 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s0 -> s8 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s0 -> s1 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s0 -> s2 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s1 -> s1 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s1 -> s2 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s1 -> s5 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s1 -> s6 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s1 -> s7 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s1 -> s8 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s1 -> s1 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s1 -> s2 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s2 -> s13 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s2 -> s2 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s2 -> s14 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s2 -> s9 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s2 -> s6 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s2 -> s7 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s2 -> s13 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s2 -> s2 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s3 -> s1 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s3 -> s2 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s3 -> s3 [0, 65535] { R8437 += 1, R8386 += 1, R8387 += 1 };
  s3 -> s4 [0, 65535] { R8437 += 1, R8387 += 1, R8354 += 1, R8355 += 1 };
  s3 -> s5 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s3 -> s6 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s3 -> s7 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s3 -> s8 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s3 -> s1 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s3 -> s2 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s4 -> s1 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s4 -> s2 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s4 -> s4 [0, 65535] { R8437 += 1, R8387 += 1, R8354 += 1, R8355 += 1 };
  s4 -> s5 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s4 -> s6 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s4 -> s7 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s4 -> s8 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s4 -> s1 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s4 -> s2 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s5 -> s5 [0, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8312 += 1, R8313 += 1 };
  s5 -> s7 [0, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s7 -> s9 [0, 65535] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s7 -> s7 [0, 65535] { R8437 += 1, R8387 += 1, R8355 += 1, R8313 += 1, R8314 += 1 };
  s9 -> s10 [0, 65535] { R8437 += 1 };
  s9 -> s9 [0, 65535] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s9 -> s11 [0, 65535] { R8437 += 1, R8387 += 1 };
  s9 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R8437 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s10 [0, 65535] { R8437 += 1 };
  s11 -> s11 [0, 65535] { R8437 += 1, R8387 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 80] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s13 -> s10 [0, 65535] { R8437 += 1 };
  s13 -> s13 [0, 65535] { R8437 += 1, R8387 += 1 };
  s13 -> s12 [0, 65535];
  s13 -> s14 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s13 -> s9 [81, 81] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s13 -> s13 [82, 65535] { R8437 += 1, R8387 += 1, R8355 += 1 };
  s14 -> s10 [0, 65535] { R8437 += 1 };
  s14 -> s14 [0, 65535] { R8437 += 1, R8387 += 1 };
  s14 -> s12 [0, 65535];
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P10
automaton P10_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R2 = R8387 && R3 = R8437 && R24 - R8437 = -1 && R25 = R8437 && R26 - R8437 = -1 && R27 = R8437 && R28 = 0 && R29 = 1 && R30 = 0 && R31 = 1 && R8346 = 0 && R8347 = 0 && R8350 = 0 && R8351 = 0 && R8354 = 0 && R8355 = 0 && R8356 = 0 && R8357 = R8387 && R8378 = 0 && R8379 = R8387 && R8382 = 0 && R8383 = R8387 && R8386 = 0 && R8388 = 0 && R8389 = R8437 && R8390 = 0 && R8391 = R8437 && R8392 = 0 && R8393 = R8437 && R8394 = 0 && R8395 = R8437 && R8396 = 0 && R8397 = R8437 && R8398 = 0 && R8399 = R8437 && R8400 = 0 && R8401 = R8437 && R8402 = 0 && R8403 = R8437 && R8404 = 0 && R8405 = R8437 && R8406 = 0 && R8407 = R8437 && R8408 = 0 && R8409 = R8437 && R8410 = 0 && R8411 = R8437 && R8412 = 0 && R8413 = R8437 && R8414 = 0 && R8415 = R8437 && R8416 = 0 && R8417 = R8437 && R8418 = 0 && R8419 = R8437 && R8420 = 0 && R8421 = R8437 && R8422 = 0 && R8423 = R8437 && R8424 = 0 && R8425 = R8437 && R8426 = 0 && R8427 = R8437 && R8428 = 0 && R8429 = R8437 && R8430 = 0 && R8431 = R8437 && R8432 = 0 && R8433 = R8437 && R8434 = 0 && R8435 = R8437 && R8436 = 0 && -1 < R1 && R9 < 1 && R12 < 1 && R15 < 1 && R16 < 1 && -1*R7287 + -1*R7286 - R7260 - R36 < 1 && R38 + R7262 + R8055 + R8054 < 1 && -1 < R8387 && 0 < R8437 && (R1 != 0 || R20 = 0 || (R8318 = 0 && R8319 = 0)) && (R1 != 0 || R20 = 0 || (R8320 = 0 && R8321 = 0)) && (R1 != 0 || R20 = 0 || (R8322 = 0 && R8323 = 0)) && (R1 != 0 || R20 = 0 || (R8324 = 0 && R8325 = 0)) && (R1 != 0 || R20 = 0 || (R8326 = 0 && R8327 = 0)) && (R1 != 0 || R20 = 0 || (R8328 = 0 && R8329 = 0)) && (R1 != 0 || R20 = 0 || (R8330 = 0 && R8331 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8317 + R8314 = 0 || (R40 + R7264 + R8058 + R8056 = 0 && R41 + R7265 + R8059 + R8057 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8317 + R8314 = 0 || (R44 + R7268 + R8315 + R8312 = 0 && R45 + R7269 + R8316 + R8313 = 0)) && (R40 + R7264 + R8058 + R8056 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8059 + -1*R8057 - R7265 - R41 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8315 + R8312 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8316 + -1*R8313 - R7269 - R45 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8318 != 0 || R1 = R8319 || R1 < 1) && (R8320 != 0 || R1 = R8321 || R1 < 1) && (R8322 != 0 || R1 = R8323 || R1 < 1) && (R8324 != 0 || R1 = R8325 || R1 < 1) && (R8326 != 0 || R1 = R8327 || R1 < 1) && (R8328 != 0 || R1 = R8329 || R1 < 1) && (R8330 != 0 || R1 = R8331 || R1 < 1) && (R8358 != 0 || R8359 = R8387 || (R1 = 0 && R8387 = 0)) && (R8360 != 0 || R8361 = R8387 || (R1 = 0 && R8387 = 0)) && (R8362 != 0 || R8363 = R8387 || (R1 = 0 && R8387 = 0)) && (R8364 != 0 || R8365 = R8387 || (R1 = 0 && R8387 = 0)) && (R8366 != 0 || R8367 = R8387 || (R1 = 0 && R8387 = 0)) && (R8368 != 0 || R8369 = R8387 || (R1 = 0 && R8387 = 0)) && (R8370 != 0 || R8371 = R8387 || (R1 = 0 && R8387 = 0)) && (R8372 != 0 || R8373 = R8387 || (R1 = 0 && R8387 = 0)) && (R8374 != 0 || R8375 = R8387 || (R1 = 0 && R8387 = 0)) && (R8376 != 0 || R8377 = R8387 || (R1 = 0 && R8387 = 0)) && (R8380 != 0 || R8381 = R8387 || (R1 = 0 && R8387 = 0)) && (R8384 != 0 || R8385 = R8387 || (R1 = 0 && R8387 = 0)) && (R21 = 0 || (R8344 = 0 && R8345 = 0)) && (R21 = 0 || (R8348 = 0 && R8349 = 0)) && (R21 = 0 || (R8352 = 0 && R8353 = 0)) && (R22 = 0 || (R8332 = 0 && R8333 = 0)) && (R22 = 0 || (R8334 = 0 && R8335 = 0)) && (R22 = 0 || (R8336 = 0 && R8337 = 0)) && (R22 = 0 || (R8338 = 0 && R8339 = 0)) && (R22 = 0 || (R8340 = 0 && R8341 = 0)) && (R22 = 0 || (R8342 = 0 && R8343 = 0)) && (R23 = 0 || (R7274 = 0 && R7275 = 0)) && (R23 = 0 || (R7276 = 0 && R7277 = 0)) && (R23 = 0 || (R7278 = 0 && R7279 = 0)) && (R23 = 0 || (R7280 = 0 && R7281 = 0)) && (R23 = 0 || (R7282 = 0 && R7283 = 0)) && (R23 = 0 || (R7284 = 0 && R7285 = 0)) && (R40 + R7264 + R8058 + R8056 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8315 + R8312 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8318 = 0 || R1 < 1) && (R8320 = 0 || R1 < 1) && (R8322 = 0 || R1 < 1) && (R8324 = 0 || R1 < 1) && (R8326 = 0 || R1 < 1) && (R8328 = 0 || R1 < 1) && (R8330 = 0 || R1 < 1) && (R8358 = 0 || (R1 = 0 && R8387 = 0)) && (R8360 = 0 || (R1 = 0 && R8387 = 0)) && (R8362 = 0 || (R1 = 0 && R8387 = 0)) && (R8364 = 0 || (R1 = 0 && R8387 = 0)) && (R8366 = 0 || (R1 = 0 && R8387 = 0)) && (R8368 = 0 || (R1 = 0 && R8387 = 0)) && (R8370 = 0 || (R1 = 0 && R8387 = 0)) && (R8372 = 0 || (R1 = 0 && R8387 = 0)) && (R8374 = 0 || (R1 = 0 && R8387 = 0)) && (R8376 = 0 || (R1 = 0 && R8387 = 0)) && (R8380 = 0 || (R1 = 0 && R8387 = 0)) && (R8384 = 0 || (R1 = 0 && R8387 = 0));
// End of Parikh automata intersection problem
