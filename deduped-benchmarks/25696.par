// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R36, R38, R4, R40, R41, R44, R45, R46, R5, R7260, R7262, R7264, R7265, R7268, R7269, R7270, R7274, R7275, R7276, R7277, R7278, R7279, R7280, R7281, R7282, R7283, R7284, R7285, R7286, R7287, R7288, R7289, R7672, R7673, R7674, R7675, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R7935, R7936, R7937, R7938, R7939, R7940, R7941, R7942, R7943, R7944, R7945, R7946, R7947, R7948, R7949, R7950, R7951, R7952, R7953, R7954, R7955, R7956, R7957, R7958, R7959, R7960, R7961, R7962, R7963, R7964, R7965, R7966, R7967, R7968, R7969, R7970, R7971, R7972, R7973, R7974, R7975, R7976, R7977, R7978, R7979, R7980, R7981, R7982, R7983, R7984, R7985, R7986, R7987, R7988, R7989, R7990, R7991, R7992, R7993, R7994, R7995, R7996, R7997, R7998, R7999, R8000, R8001, R8002, R8003, R8004, R8005, R8006, R8007, R8008, R8009, R8010, R8011, R8012, R8013, R8014, R8015, R8016, R8017, R8018, R8019, R8020, R8021, R8022, R8023, R8024, R8025, R8026, R8027, R8028, R8029, R8030, R8031, R8032, R8033, R8034, R8035, R8036, R8037, R8038, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8047, R8048, R8049, R8050, R8051, R8052, R8053, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s2 [9, 13] { R29 += 1 };
  s0 -> s1 [14, 31] { R29 += 1 };
  s0 -> s2 [32, 32] { R29 += 1 };
  s0 -> s1 [33, 65535] { R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R29 += 1 };
  s2 -> s1 [0, 65535] { R29 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R7274 += 1, R7275 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R7277 += 1 };
  s0 -> s0 [0, 65535] { R7276 += 1, R7277 += 1 };
  s0 -> s2 [81, 81] { R7277 += 1 };
  s0 -> s3 [81, 81] { R7277 += 1 };
  s0 -> s1 [83, 65535] { R7277 += 1 };
  s1 -> s1 [0, 80] { R7277 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7277 += 1 };
  s1 -> s3 [81, 81] { R7277 += 1 };
  s1 -> s1 [83, 65535] { R7277 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R7277 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R7277 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R7278 += 1, R7279 += 1 };
  s0 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7280 += 1, R7281 += 1 };
  s0 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7281 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R7282 += 1, R7283 += 1 };
  s0 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7284 += 1, R7285 += 1 };
  s0 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R8005 += 1 };
  s0 -> s0 [0, 65535] { R8004 += 1, R8005 += 1 };
  s0 -> s2 [81, 81] { R8005 += 1 };
  s0 -> s1 [82, 65535] { R8005 += 1 };
  s1 -> s1 [0, 80] { R8005 += 1 };
  s1 -> s2 [81, 81] { R8005 += 1 };
  s1 -> s1 [82, 65535] { R8005 += 1 };
  s2 -> s2 [0, 65535] { R8005 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8007 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8006 += 1, R8007 += 1 };
  s1 -> s1 [0, 65535] { R8007 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R8009 += 1 };
  s0 -> s0 [0, 65535] { R8008 += 1, R8009 += 1 };
  s0 -> s2 [0, 65535] { R8009 += 1, R12 += 1 };
  s0 -> s3 [81, 81] { R8009 += 1 };
  s0 -> s1 [82, 65535] { R8009 += 1 };
  s1 -> s1 [0, 80] { R8009 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R8009 += 1 };
  s1 -> s1 [82, 65535] { R8009 += 1 };
  s2 -> s1 [0, 80] { R8009 += 1 };
  s2 -> s2 [0, 65535] { R8009 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R8009 += 1 };
  s2 -> s1 [82, 65535] { R8009 += 1 };
  s3 -> s3 [0, 65535] { R8009 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R8011 += 1, R7949 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8010 += 1, R8011 += 1 };
  s0 -> s2 [0, 65535] { R8011 += 1, R7948 += 1, R7949 += 1 };
  s1 -> s1 [0, 65535] { R8011 += 1, R7949 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8011 += 1 };
  s2 -> s1 [0, 65535] { R8011 += 1, R7949 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8011 += 1, R7948 += 1, R7949 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8011 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 80] { R8013 += 1, R7951 += 1 };
  s0 -> s0 [0, 65535] { R8012 += 1, R8013 += 1 };
  s0 -> s2 [0, 65535] { R8013 += 1, R7950 += 1, R7951 += 1 };
  s0 -> s3 [81, 81] { R8013 += 1, R7951 += 1 };
  s0 -> s4 [81, 81] { R8013 += 1, R7951 += 1 };
  s0 -> s1 [83, 65535] { R8013 += 1, R7951 += 1 };
  s1 -> s1 [0, 80] { R8013 += 1, R7951 += 1 };
  s1 -> s1 [0, 65535] { R8013 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8013 += 1, R7951 += 1 };
  s1 -> s4 [81, 81] { R8013 += 1, R7951 += 1 };
  s1 -> s1 [83, 65535] { R8013 += 1, R7951 += 1 };
  s2 -> s1 [0, 80] { R8013 += 1, R7951 += 1 };
  s2 -> s2 [0, 65535] { R8013 += 1, R7950 += 1, R7951 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8013 += 1, R7951 += 1 };
  s2 -> s4 [81, 81] { R8013 += 1, R7951 += 1 };
  s2 -> s1 [83, 65535] { R8013 += 1, R7951 += 1 };
  s3 -> s3 [0, 65535] { R8013 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 81] { R8013 += 1, R7951 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8013 += 1 };
  s4 -> s4 [83, 65535] { R8013 += 1, R7951 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s0 -> s2 [0, 65535] { R8015 += 1, R7952 += 1, R7953 += 1 };
  s0 -> s0 [0, 65535] { R8014 += 1, R8015 += 1 };
  s0 -> s3 [81, 81] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s0 -> s4 [81, 81] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s0 -> s1 [82, 65535] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s1 -> s1 [0, 80] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8015 += 1 };
  s1 -> s3 [81, 81] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s1 -> s4 [81, 81] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s1 -> s1 [82, 65535] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s2 -> s1 [0, 80] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s2 -> s2 [0, 65535] { R8015 += 1, R7952 += 1, R7953 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s2 -> s4 [81, 81] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s2 -> s1 [82, 65535] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R8015 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8015 += 1, R7953 += 1, R7260 += 1 };
  s4 -> s6 [0, 65535] { R8015 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8015 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s0 -> s2 [0, 65535] { R8017 += 1, R7954 += 1, R7955 += 1 };
  s0 -> s0 [0, 65535] { R8016 += 1, R8017 += 1 };
  s0 -> s3 [81, 81] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s0 -> s4 [81, 81] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s0 -> s1 [82, 65535] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s1 -> s1 [0, 80] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s1 -> s1 [0, 65535] { R8017 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s1 -> s4 [81, 81] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s1 -> s1 [82, 65535] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s2 -> s1 [0, 80] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s2 -> s2 [0, 65535] { R8017 += 1, R7954 += 1, R7955 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s2 -> s4 [81, 81] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s2 -> s1 [82, 65535] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s3 -> s3 [0, 65535] { R8017 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8017 += 1, R7955 += 1, R7262 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8017 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8017 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 80] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s0 [0, 65535] { R8018 += 1, R8019 += 1 };
  s0 -> s2 [0, 65535] { R8019 += 1, R7956 += 1, R7957 += 1 };
  s0 -> s3 [81, 81] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s4 [81, 81] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s1 [82, 65535] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [0, 80] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8019 += 1 };
  s1 -> s3 [81, 81] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s4 [81, 81] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [82, 65535] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [0, 80] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8019 += 1, R7956 += 1, R7957 += 1 };
  s2 -> s3 [81, 81] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s4 [81, 81] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [82, 65535] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8019 += 1 };
  s4 -> s5 [0, 65535] { R8019 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8019 += 1, R7957 += 1, R7264 += 1, R7265 += 1 };
  s5 -> s5 [0, 65535] { R8019 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 80] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s2 [0, 65535] { R8021 += 1, R7958 += 1, R7959 += 1 };
  s0 -> s0 [0, 65535] { R8020 += 1, R8021 += 1 };
  s0 -> s3 [81, 81] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s4 [81, 81] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s1 [82, 65535] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 80] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8021 += 1 };
  s1 -> s3 [81, 81] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s4 [81, 81] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [82, 65535] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [0, 80] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8021 += 1, R7958 += 1, R7959 += 1 };
  s2 -> s3 [81, 81] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s4 [81, 81] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [82, 65535] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8021 += 1, R7959 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s6 [0, 65535] { R8021 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8021 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8021 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 80] { R8023 += 1, R7973 += 1 };
  s0 -> s0 [0, 65535] { R8022 += 1, R8023 += 1 };
  s0 -> s2 [0, 65535] { R8023 += 1, R7972 += 1, R7973 += 1 };
  s0 -> s3 [81, 81] { R8023 += 1, R7973 += 1 };
  s0 -> s1 [82, 65535] { R8023 += 1, R7973 += 1 };
  s1 -> s1 [0, 80] { R8023 += 1, R7973 += 1 };
  s1 -> s3 [81, 81] { R8023 += 1, R7973 += 1 };
  s1 -> s1 [82, 65535] { R8023 += 1, R7973 += 1 };
  s2 -> s1 [0, 80] { R8023 += 1, R7973 += 1 };
  s2 -> s2 [0, 65535] { R8023 += 1, R7972 += 1, R7973 += 1 };
  s2 -> s3 [81, 81] { R8023 += 1, R7973 += 1 };
  s2 -> s1 [82, 65535] { R8023 += 1, R7973 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8023 += 1, R7973 += 1 };
  s3 -> s5 [0, 65535] { R8023 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8023 += 1 };
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8025 += 1, R7974 += 1, R7975 += 1 };
  s0 -> s0 [0, 65535] { R8024 += 1, R8025 += 1 };
  s0 -> s2 [0, 65535] { R8025 += 1, R7975 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R8025 += 1, R7974 += 1, R7975 += 1 };
  s1 -> s2 [0, 65535] { R8025 += 1, R7975 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8025 += 1 };
  s2 -> s2 [0, 65535] { R8025 += 1, R7975 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8025 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R8027 += 1, R7977 += 1 };
  s0 -> s2 [0, 65535] { R8027 += 1, R7977 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R8026 += 1, R8027 += 1 };
  s0 -> s3 [0, 65535] { R8027 += 1, R7976 += 1, R7977 += 1 };
  s0 -> s4 [81, 81] { R8027 += 1, R7977 += 1 };
  s0 -> s1 [82, 65535] { R8027 += 1, R7977 += 1 };
  s1 -> s1 [0, 80] { R8027 += 1, R7977 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8027 += 1 };
  s1 -> s4 [81, 81] { R8027 += 1, R7977 += 1 };
  s1 -> s1 [82, 65535] { R8027 += 1, R7977 += 1 };
  s2 -> s1 [0, 80] { R8027 += 1, R7977 += 1 };
  s2 -> s6 [0, 65535] { R8027 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8027 += 1, R7977 += 1, R9 += 1 };
  s2 -> s4 [81, 81] { R8027 += 1, R7977 += 1 };
  s2 -> s1 [82, 65535] { R8027 += 1, R7977 += 1 };
  s3 -> s1 [0, 80] { R8027 += 1, R7977 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8027 += 1, R7977 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R8027 += 1, R7976 += 1, R7977 += 1 };
  s3 -> s4 [81, 81] { R8027 += 1, R7977 += 1 };
  s3 -> s1 [82, 65535] { R8027 += 1, R7977 += 1 };
  s4 -> s4 [0, 65535] { R8027 += 1, R7977 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8027 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 80] { R8029 += 1, R7979 += 1, R7935 += 1 };
  s0 -> s2 [0, 65535] { R8029 += 1, R7979 += 1, R7934 += 1, R7935 += 1 };
  s0 -> s0 [0, 65535] { R8028 += 1, R8029 += 1 };
  s0 -> s3 [0, 65535] { R8029 += 1, R7978 += 1, R7979 += 1 };
  s0 -> s1 [82, 65535] { R8029 += 1, R7979 += 1, R7935 += 1 };
  s1 -> s1 [0, 80] { R8029 += 1, R7979 += 1, R7935 += 1 };
  s1 -> s1 [0, 65535] { R8029 += 1, R7979 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8029 += 1 };
  s1 -> s1 [82, 65535] { R8029 += 1, R7979 += 1, R7935 += 1 };
  s2 -> s1 [0, 80] { R8029 += 1, R7979 += 1, R7935 += 1 };
  s2 -> s2 [0, 65535] { R8029 += 1, R7979 += 1, R7934 += 1, R7935 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8029 += 1 };
  s2 -> s1 [82, 65535] { R8029 += 1, R7979 += 1, R7935 += 1 };
  s3 -> s1 [0, 80] { R8029 += 1, R7979 += 1, R7935 += 1 };
  s3 -> s2 [0, 65535] { R8029 += 1, R7979 += 1, R7934 += 1, R7935 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8029 += 1, R7978 += 1, R7979 += 1 };
  s3 -> s1 [82, 65535] { R8029 += 1, R7979 += 1, R7935 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8029 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R8031 += 1, R7980 += 1, R7981 += 1 };
  s0 -> s2 [0, 65535] { R8031 += 1, R7981 += 1, R7937 += 1, R20 += 1 };
  s0 -> s3 [0, 65535] { R8031 += 1, R7981 += 1, R7936 += 1, R7937 += 1 };
  s0 -> s0 [0, 65535] { R8030 += 1, R8031 += 1 };
  s1 -> s1 [0, 65535] { R8031 += 1, R7980 += 1, R7981 += 1 };
  s1 -> s2 [0, 65535] { R8031 += 1, R7981 += 1, R7937 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R8031 += 1, R7981 += 1, R7936 += 1, R7937 += 1 };
  s2 -> s2 [0, 65535] { R8031 += 1, R7981 += 1, R7937 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8031 += 1 };
  s2 -> s6 [0, 65535] { R8031 += 1, R7981 += 1 };
  s3 -> s2 [0, 65535] { R8031 += 1, R7981 += 1, R7937 += 1, R20 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8031 += 1 };
  s3 -> s3 [0, 65535] { R8031 += 1, R7981 += 1, R7936 += 1, R7937 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8031 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8031 += 1 };
  s6 -> s6 [0, 65535] { R8031 += 1, R7981 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8033 += 1, R7983 += 1, R7938 += 1, R7939 += 1 };
  s0 -> s2 [0, 65535] { R8033 += 1, R7983 += 1, R7939 += 1 };
  s0 -> s3 [0, 65535] { R8033 += 1, R7982 += 1, R7983 += 1 };
  s0 -> s0 [0, 65535] { R8032 += 1, R8033 += 1 };
  s1 -> s1 [0, 65535] { R8033 += 1, R7983 += 1, R7938 += 1, R7939 += 1 };
  s1 -> s2 [0, 65535] { R8033 += 1, R7983 += 1, R7939 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8033 += 1 };
  s2 -> s5 [0, 65535] { R8033 += 1, R7983 += 1 };
  s2 -> s2 [0, 65535] { R8033 += 1, R7983 += 1, R7939 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R8033 += 1 };
  s3 -> s1 [0, 65535] { R8033 += 1, R7983 += 1, R7938 += 1, R7939 += 1 };
  s3 -> s2 [0, 65535] { R8033 += 1, R7983 += 1, R7939 += 1 };
  s3 -> s3 [0, 65535] { R8033 += 1, R7982 += 1, R7983 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8033 += 1, R7983 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R8033 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8033 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8035 += 1, R7984 += 1, R7985 += 1 };
  s0 -> s2 [0, 65535] { R8035 += 1, R7985 += 1, R7940 += 1, R7941 += 1 };
  s0 -> s0 [0, 65535] { R8034 += 1, R8035 += 1 };
  s0 -> s3 [0, 65535] { R8035 += 1, R7985 += 1, R7941 += 1, R7287 += 1 };
  s1 -> s1 [0, 65535] { R8035 += 1, R7984 += 1, R7985 += 1 };
  s1 -> s2 [0, 65535] { R8035 += 1, R7985 += 1, R7940 += 1, R7941 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R8035 += 1, R7985 += 1, R7941 += 1, R7287 += 1 };
  s2 -> s2 [0, 65535] { R8035 += 1, R7985 += 1, R7940 += 1, R7941 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8035 += 1, R7985 += 1, R7941 += 1, R7287 += 1 };
  s2 -> s6 [0, 65535] { R8035 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8035 += 1, R7985 += 1 };
  s3 -> s3 [0, 65535] { R8035 += 1, R7985 += 1, R7941 += 1, R7287 += 1 };
  s3 -> s6 [0, 65535] { R8035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8035 += 1, R7985 += 1 };
  s5 -> s6 [0, 65535] { R8035 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8035 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 81] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s0 -> s2 [0, 65535] { R8037 += 1, R7986 += 1, R7987 += 1 };
  s0 -> s3 [0, 65535] { R8037 += 1, R7987 += 1, R7942 += 1, R7943 += 1 };
  s0 -> s4 [0, 65535] { R8037 += 1, R7987 += 1, R7943 += 1, R7289 += 1 };
  s0 -> s0 [0, 65535] { R8036 += 1, R8037 += 1 };
  s0 -> s1 [83, 65535] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s1 -> s1 [0, 81] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s1 -> s1 [0, 65535] { R8037 += 1, R7987 += 1 };
  s1 -> s5 [0, 65535] { R8037 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [83, 65535] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s2 -> s1 [0, 81] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s2 -> s2 [0, 65535] { R8037 += 1, R7986 += 1, R7987 += 1 };
  s2 -> s3 [0, 65535] { R8037 += 1, R7987 += 1, R7942 += 1, R7943 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R8037 += 1, R7987 += 1, R7943 += 1, R7289 += 1 };
  s2 -> s1 [83, 65535] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s3 -> s1 [0, 81] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s3 -> s3 [0, 65535] { R8037 += 1, R7987 += 1, R7942 += 1, R7943 += 1 };
  s3 -> s5 [0, 65535] { R8037 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R8037 += 1, R7987 += 1, R7943 += 1, R7289 += 1 };
  s3 -> s1 [83, 65535] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s4 -> s1 [0, 81] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s4 -> s5 [0, 65535] { R8037 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8037 += 1, R7987 += 1, R7943 += 1, R7289 += 1 };
  s4 -> s7 [0, 65535] { R8037 += 1, R7987 += 1 };
  s4 -> s1 [83, 65535] { R8037 += 1, R7987 += 1, R7943 += 1 };
  s5 -> s5 [0, 65535] { R8037 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8037 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8037 += 1, R7987 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 81] { R8039 += 1, R7989 += 1, R7945 += 1, R7675 += 1 };
  s0 -> s2 [0, 65535] { R8039 += 1, R7989 += 1, R7944 += 1, R7945 += 1 };
  s0 -> s3 [0, 65535] { R8039 += 1, R7988 += 1, R7989 += 1 };
  s0 -> s0 [0, 65535] { R8038 += 1, R8039 += 1 };
  s0 -> s1 [0, 65535] { R8039 += 1, R7989 += 1, R7945 += 1 };
  s0 -> s1 [83, 65535] { R8039 += 1, R7989 += 1, R7945 += 1, R7675 += 1 };
  s1 -> s1 [0, 81] { R8039 += 1, R7989 += 1, R7945 += 1, R7675 += 1 };
  s1 -> s6 [0, 65535] { R8039 += 1, R7989 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8039 += 1 };
  s1 -> s1 [0, 65535] { R8039 += 1, R7989 += 1, R7945 += 1 };
  s1 -> s1 [83, 65535] { R8039 += 1, R7989 += 1, R7945 += 1, R7675 += 1 };
  s2 -> s1 [0, 81] { R8039 += 1, R7989 += 1, R7945 += 1, R7675 += 1 };
  s2 -> s2 [0, 65535] { R8039 += 1, R7989 += 1, R7944 += 1, R7945 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8039 += 1 };
  s2 -> s1 [0, 65535] { R8039 += 1, R7989 += 1, R7945 += 1 };
  s2 -> s1 [83, 65535] { R8039 += 1, R7989 += 1, R7945 += 1, R7675 += 1 };
  s3 -> s1 [0, 81] { R8039 += 1, R7989 += 1, R7945 += 1, R7675 += 1 };
  s3 -> s2 [0, 65535] { R8039 += 1, R7989 += 1, R7944 += 1, R7945 += 1 };
  s3 -> s3 [0, 65535] { R8039 += 1, R7988 += 1, R7989 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8039 += 1, R7989 += 1, R7945 += 1 };
  s3 -> s1 [83, 65535] { R8039 += 1, R7989 += 1, R7945 += 1, R7675 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8039 += 1 };
  s6 -> s6 [0, 65535] { R8039 += 1, R7989 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8039 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s0 [0, 65535] { R8040 += 1, R8041 += 1 };
  s0 -> s1 [0, 65535] { R8041 += 1, R7990 += 1, R7991 += 1 };
  s0 -> s2 [0, 65535] { R8041 += 1, R7991 += 1, R7947 += 1 };
  s0 -> s3 [0, 65535] { R8041 += 1, R7991 += 1, R7946 += 1, R7947 += 1 };
  s1 -> s1 [0, 65535] { R8041 += 1, R7990 += 1, R7991 += 1 };
  s1 -> s2 [0, 65535] { R8041 += 1, R7991 += 1, R7947 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R8041 += 1, R7991 += 1, R7946 += 1, R7947 += 1 };
  s2 -> s4 [0, 65535] { R8041 += 1 };
  s2 -> s2 [0, 65535] { R8041 += 1, R7991 += 1, R7947 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8041 += 1, R7991 += 1 };
  s3 -> s4 [0, 65535] { R8041 += 1 };
  s3 -> s2 [0, 65535] { R8041 += 1, R7991 += 1, R7947 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8041 += 1, R7991 += 1, R7946 += 1, R7947 += 1 };
  s4 -> s4 [0, 65535] { R8041 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8041 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8041 += 1, R7991 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65535] { R8043 += 1, R7992 += 1, R7993 += 1 };
  s0 -> s2 [0, 65535] { R8043 += 1, R7993 += 1, R7961 += 1, R21 += 1 };
  s0 -> s3 [0, 65535] { R8043 += 1, R7993 += 1, R7960 += 1, R7961 += 1 };
  s0 -> s0 [0, 65535] { R8042 += 1, R8043 += 1 };
  s1 -> s1 [0, 65535] { R8043 += 1, R7992 += 1, R7993 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8043 += 1, R7993 += 1, R7961 += 1, R21 += 1 };
  s1 -> s3 [0, 65535] { R8043 += 1, R7993 += 1, R7960 += 1, R7961 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8043 += 1, R7993 += 1, R7961 += 1, R21 += 1 };
  s2 -> s6 [0, 65535] { R8043 += 1, R7993 += 1 };
  s2 -> s5 [0, 65535] { R8043 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8043 += 1, R7993 += 1, R7961 += 1, R21 += 1 };
  s3 -> s5 [0, 65535] { R8043 += 1 };
  s3 -> s3 [0, 65535] { R8043 += 1, R7993 += 1, R7960 += 1, R7961 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8043 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8043 += 1, R7993 += 1 };
  s6 -> s5 [0, 65535] { R8043 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s0 -> s2 [0, 65535] { R8045 += 1, R7994 += 1, R7995 += 1 };
  s0 -> s3 [0, 65535] { R8045 += 1, R7995 += 1, R7962 += 1, R7963 += 1 };
  s0 -> s0 [0, 65535] { R8044 += 1, R8045 += 1 };
  s0 -> s4 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s0 -> s5 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s0 -> s6 [82, 82] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s0 -> s1 [83, 65535] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s1 -> s1 [0, 80] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s1 -> s4 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s1 -> s5 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s1 -> s6 [82, 82] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s1 -> s1 [83, 65535] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s2 -> s1 [0, 80] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s2 -> s2 [0, 65535] { R8045 += 1, R7994 += 1, R7995 += 1 };
  s2 -> s3 [0, 65535] { R8045 += 1, R7995 += 1, R7962 += 1, R7963 += 1 };
  s2 -> s4 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s2 -> s5 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s2 -> s6 [82, 82] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s2 -> s1 [83, 65535] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s3 -> s1 [0, 80] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s3 -> s3 [0, 65535] { R8045 += 1, R7995 += 1, R7962 += 1, R7963 += 1 };
  s3 -> s4 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s3 -> s5 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s3 -> s6 [82, 82] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s3 -> s1 [83, 65535] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s5 -> s5 [0, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s5 -> s10 [82, 82] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s5 -> s5 [83, 65535] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s6 -> s6 [0, 80] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R8045 += 1 };
  s6 -> s6 [0, 65535] { R8045 += 1, R7995 += 1 };
  s6 -> s9 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s6 -> s10 [81, 81] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s6 -> s6 [82, 65535] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8045 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R8045 += 1, R7995 += 1 };
  s9 -> s8 [0, 65535] { R8045 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s11 [0, 65535] { R8045 += 1, R7995 += 1 };
  s10 -> s10 [0, 65535] { R8045 += 1, R7995 += 1, R7963 += 1 };
  s10 -> s8 [0, 65535] { R8045 += 1 };
  s11 -> s7 [0, 65535];
  s11 -> s11 [0, 65535] { R8045 += 1, R7995 += 1 };
  s11 -> s8 [0, 65535] { R8045 += 1 };
  accepting s8, s9, s6, s7, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s0 -> s2 [0, 65535] { R8047 += 1, R7996 += 1, R7997 += 1 };
  s0 -> s3 [0, 65535] { R8047 += 1, R7997 += 1, R7964 += 1, R7965 += 1 };
  s0 -> s0 [0, 65535] { R8046 += 1, R8047 += 1 };
  s0 -> s4 [81, 81] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s0 -> s5 [81, 81] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s0 -> s1 [82, 65535] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s1 -> s1 [0, 80] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8047 += 1 };
  s1 -> s1 [0, 65535] { R8047 += 1, R7997 += 1 };
  s1 -> s4 [81, 81] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s1 -> s5 [81, 81] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s1 -> s1 [82, 65535] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s2 -> s1 [0, 80] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8047 += 1, R7996 += 1, R7997 += 1 };
  s2 -> s3 [0, 65535] { R8047 += 1, R7997 += 1, R7964 += 1, R7965 += 1 };
  s2 -> s4 [81, 81] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s2 -> s5 [81, 81] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s2 -> s1 [82, 65535] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s3 -> s1 [0, 80] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R8047 += 1 };
  s3 -> s3 [0, 65535] { R8047 += 1, R7997 += 1, R7964 += 1, R7965 += 1 };
  s3 -> s4 [81, 81] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s3 -> s5 [81, 81] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s3 -> s1 [82, 65535] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8047 += 1 };
  s4 -> s8 [0, 65535] { R8047 += 1, R7997 += 1 };
  s4 -> s4 [0, 65535] { R8047 += 1, R7997 += 1, R7965 += 1, R7286 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8047 += 1 };
  s5 -> s5 [0, 65535] { R8047 += 1, R7997 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8047 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8047 += 1 };
  s8 -> s8 [0, 65535] { R8047 += 1, R7997 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s0 -> s2 [0, 65535] { R8049 += 1, R7999 += 1, R7966 += 1, R7967 += 1 };
  s0 -> s0 [0, 65535] { R8048 += 1, R8049 += 1 };
  s0 -> s3 [0, 65535] { R8049 += 1, R7998 += 1, R7999 += 1 };
  s0 -> s4 [81, 81] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s0 -> s5 [81, 81] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s0 -> s1 [82, 65535] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s1 -> s1 [0, 80] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s1 -> s6 [0, 65535] { R8049 += 1 };
  s1 -> s1 [0, 65535] { R8049 += 1, R7999 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [81, 81] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s1 -> s5 [81, 81] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s1 -> s1 [82, 65535] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s2 -> s1 [0, 80] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s2 -> s2 [0, 65535] { R8049 += 1, R7999 += 1, R7966 += 1, R7967 += 1 };
  s2 -> s6 [0, 65535] { R8049 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [81, 81] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s2 -> s5 [81, 81] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s2 -> s1 [82, 65535] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s3 -> s1 [0, 80] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s3 -> s2 [0, 65535] { R8049 += 1, R7999 += 1, R7966 += 1, R7967 += 1 };
  s3 -> s3 [0, 65535] { R8049 += 1, R7998 += 1, R7999 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [81, 81] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s3 -> s5 [81, 81] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s3 -> s1 [82, 65535] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s4 -> s4 [0, 65535] { R8049 += 1, R7999 += 1, R7967 += 1, R7288 += 1 };
  s4 -> s6 [0, 65535] { R8049 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R8049 += 1, R7999 += 1 };
  s5 -> s6 [0, 65535] { R8049 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8049 += 1, R7999 += 1 };
  s6 -> s6 [0, 65535] { R8049 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R8049 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8049 += 1, R7999 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s0 -> s2 [0, 80] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s0 -> s3 [0, 65535] { R8051 += 1, R8000 += 1, R8001 += 1 };
  s0 -> s4 [0, 65535] { R8051 += 1, R8001 += 1, R7968 += 1, R7969 += 1 };
  s0 -> s0 [0, 65535] { R8050 += 1, R8051 += 1 };
  s0 -> s5 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s0 -> s6 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s0 -> s7 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s0 -> s8 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s0 -> s1 [82, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s0 -> s2 [83, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s1 -> s1 [0, 80] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s1 -> s2 [0, 80] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s1 -> s5 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s1 -> s6 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s1 -> s7 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s1 -> s8 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s1 -> s1 [82, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s1 -> s2 [83, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s2 -> s2 [0, 80] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s10 [0, 65535] { R8051 += 1 };
  s2 -> s2 [0, 65535] { R8051 += 1, R8001 += 1 };
  s2 -> s7 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1 };
  s2 -> s8 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1 };
  s2 -> s2 [82, 65535] { R8051 += 1, R8001 += 1, R7969 += 1 };
  s2 -> s2 [83, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s3 -> s1 [0, 80] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s3 -> s2 [0, 80] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s3 -> s3 [0, 65535] { R8051 += 1, R8000 += 1, R8001 += 1 };
  s3 -> s4 [0, 65535] { R8051 += 1, R8001 += 1, R7968 += 1, R7969 += 1 };
  s3 -> s5 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s3 -> s6 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s3 -> s7 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s3 -> s8 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s3 -> s1 [82, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s3 -> s2 [83, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s4 -> s1 [0, 80] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s4 -> s2 [0, 80] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s4 -> s4 [0, 65535] { R8051 += 1, R8001 += 1, R7968 += 1, R7969 += 1 };
  s4 -> s5 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s4 -> s6 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s4 -> s7 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s4 -> s8 [81, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s4 -> s1 [82, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s4 -> s2 [83, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s5 -> s7 [0, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s5 -> s5 [0, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7672 += 1, R7673 += 1 };
  s5 -> s7 [83, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s7 -> s7 [0, 81] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s10 [0, 65535] { R8051 += 1 };
  s7 -> s11 [0, 65535] { R8051 += 1, R8001 += 1 };
  s7 -> s7 [0, 65535] { R8051 += 1, R8001 += 1, R7969 += 1 };
  s7 -> s7 [83, 65535] { R8051 += 1, R8001 += 1, R7969 += 1, R7673 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8051 += 1 };
  s8 -> s8 [0, 65535] { R8051 += 1, R8001 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8051 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s10 [0, 65535] { R8051 += 1 };
  s11 -> s11 [0, 65535] { R8051 += 1, R8001 += 1 };
  accepting s8, s2, s9, s7, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s2 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s0 -> s3 [0, 65535] { R8053 += 1, R8003 += 1, R7970 += 1, R7971 += 1 };
  s0 -> s0 [0, 65535] { R8052 += 1, R8053 += 1 };
  s0 -> s4 [0, 65535] { R8053 += 1, R8002 += 1, R8003 += 1 };
  s0 -> s5 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s0 -> s6 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s7 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s0 -> s8 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s1 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s2 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s1 -> s13 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s1 -> s1 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s1 -> s6 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s1 -> s14 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s1 -> s8 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s1 -> s9 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s1 -> s13 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s1 -> s1 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s1 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s2 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s2 -> s5 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s2 -> s6 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s7 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s2 -> s8 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s1 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s2 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s3 -> s1 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s2 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s3 -> s3 [0, 65535] { R8053 += 1, R8003 += 1, R7970 += 1, R7971 += 1 };
  s3 -> s5 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s3 -> s6 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s7 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s3 -> s8 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s1 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s2 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s4 -> s1 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s2 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s4 -> s3 [0, 65535] { R8053 += 1, R8003 += 1, R7970 += 1, R7971 += 1 };
  s4 -> s4 [0, 65535] { R8053 += 1, R8002 += 1, R8003 += 1 };
  s4 -> s5 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s4 -> s6 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s7 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s4 -> s8 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s1 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s2 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s5 -> s5 [0, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7928 += 1, R7929 += 1 };
  s5 -> s8 [0, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s8 -> s8 [0, 65535] { R8053 += 1, R8003 += 1, R7971 += 1, R7929 += 1, R7930 += 1 };
  s8 -> s9 [0, 65535] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s9 -> s10 [0, 65535] { R8053 += 1, R8003 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s9 -> s12 [0, 65535] { R8053 += 1 };
  s10 -> s10 [0, 65535] { R8053 += 1, R8003 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s12 [0, 65535] { R8053 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R8053 += 1 };
  s13 -> s13 [0, 80] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s13 -> s13 [0, 65535] { R8053 += 1, R8003 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s12 [0, 65535] { R8053 += 1 };
  s13 -> s14 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s13 -> s9 [81, 81] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s13 -> s13 [82, 65535] { R8053 += 1, R8003 += 1, R7971 += 1 };
  s14 -> s14 [0, 65535] { R8053 += 1, R8003 += 1 };
  s14 -> s11 [0, 65535];
  s14 -> s12 [0, 65535] { R8053 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P10
automaton P10_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R2 = R8003 && R3 = R8053 && R24 - R8053 = -1 && R25 = R8053 && R26 - R8053 = -1 && R27 = R8053 && R28 = 0 && R29 = 1 && R30 = 0 && R31 = 1 && R7962 = 0 && R7963 = 0 && R7968 = 0 && R7969 = 0 && R7970 = 0 && R7971 = 0 && R7972 = 0 && R7973 = R8003 && R7994 = 0 && R7995 = R8003 && R8000 = 0 && R8001 = R8003 && R8002 = 0 && R8004 = 0 && R8005 = R8053 && R8006 = 0 && R8007 = R8053 && R8008 = 0 && R8009 = R8053 && R8010 = 0 && R8011 = R8053 && R8012 = 0 && R8013 = R8053 && R8014 = 0 && R8015 = R8053 && R8016 = 0 && R8017 = R8053 && R8018 = 0 && R8019 = R8053 && R8020 = 0 && R8021 = R8053 && R8022 = 0 && R8023 = R8053 && R8024 = 0 && R8025 = R8053 && R8026 = 0 && R8027 = R8053 && R8028 = 0 && R8029 = R8053 && R8030 = 0 && R8031 = R8053 && R8032 = 0 && R8033 = R8053 && R8034 = 0 && R8035 = R8053 && R8036 = 0 && R8037 = R8053 && R8038 = 0 && R8039 = R8053 && R8040 = 0 && R8041 = R8053 && R8042 = 0 && R8043 = R8053 && R8044 = 0 && R8045 = R8053 && R8046 = 0 && R8047 = R8053 && R8048 = 0 && R8049 = R8053 && R8050 = 0 && R8051 = R8053 && R8052 = 0 && -1 < R1 && R9 < 1 && R12 < 1 && R15 < 1 && R16 < 1 && -1*R7287 + -1*R7286 - R7260 - R36 < 1 && R38 + R7262 + R7289 + R7288 < 1 && -1 < R8003 && 0 < R8053 && (R1 != 0 || R20 = 0 || (R7934 = 0 && R7935 = 0)) && (R1 != 0 || R20 = 0 || (R7936 = 0 && R7937 = 0)) && (R1 != 0 || R20 = 0 || (R7938 = 0 && R7939 = 0)) && (R1 != 0 || R20 = 0 || (R7940 = 0 && R7941 = 0)) && (R1 != 0 || R20 = 0 || (R7942 = 0 && R7943 = 0)) && (R1 != 0 || R20 = 0 || (R7944 = 0 && R7945 = 0)) && (R1 != 0 || R20 = 0 || (R7946 = 0 && R7947 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R7933 + R7930 = 0 || (R40 + R7264 + R7674 + R7672 = 0 && R41 + R7265 + R7675 + R7673 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R7933 + R7930 = 0 || (R44 + R7268 + R7931 + R7928 = 0 && R45 + R7269 + R7932 + R7929 = 0)) && (R40 + R7264 + R7674 + R7672 != 0 || R36 + R7260 + R7287 + R7286 + -1*R7675 + -1*R7673 - R7265 - R41 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R7931 + R7928 != 0 || R36 + R7260 + R7287 + R7286 + -1*R7932 + -1*R7929 - R7269 - R45 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R7934 != 0 || R1 = R7935 || R1 < 1) && (R7936 != 0 || R1 = R7937 || R1 < 1) && (R7938 != 0 || R1 = R7939 || R1 < 1) && (R7940 != 0 || R1 = R7941 || R1 < 1) && (R7942 != 0 || R1 = R7943 || R1 < 1) && (R7944 != 0 || R1 = R7945 || R1 < 1) && (R7946 != 0 || R1 = R7947 || R1 < 1) && (R7974 != 0 || R7975 = R8003 || (R1 = 0 && R8003 = 0)) && (R7976 != 0 || R7977 = R8003 || (R1 = 0 && R8003 = 0)) && (R7978 != 0 || R7979 = R8003 || (R1 = 0 && R8003 = 0)) && (R7980 != 0 || R7981 = R8003 || (R1 = 0 && R8003 = 0)) && (R7982 != 0 || R7983 = R8003 || (R1 = 0 && R8003 = 0)) && (R7984 != 0 || R7985 = R8003 || (R1 = 0 && R8003 = 0)) && (R7986 != 0 || R7987 = R8003 || (R1 = 0 && R8003 = 0)) && (R7988 != 0 || R7989 = R8003 || (R1 = 0 && R8003 = 0)) && (R7990 != 0 || R7991 = R8003 || (R1 = 0 && R8003 = 0)) && (R7992 != 0 || R7993 = R8003 || (R1 = 0 && R8003 = 0)) && (R7996 != 0 || R7997 = R8003 || (R1 = 0 && R8003 = 0)) && (R7998 != 0 || R7999 = R8003 || (R1 = 0 && R8003 = 0)) && (R21 = 0 || (R7960 = 0 && R7961 = 0)) && (R21 = 0 || (R7964 = 0 && R7965 = 0)) && (R21 = 0 || (R7966 = 0 && R7967 = 0)) && (R22 = 0 || (R7948 = 0 && R7949 = 0)) && (R22 = 0 || (R7950 = 0 && R7951 = 0)) && (R22 = 0 || (R7952 = 0 && R7953 = 0)) && (R22 = 0 || (R7954 = 0 && R7955 = 0)) && (R22 = 0 || (R7956 = 0 && R7957 = 0)) && (R22 = 0 || (R7958 = 0 && R7959 = 0)) && (R23 = 0 || (R7274 = 0 && R7275 = 0)) && (R23 = 0 || (R7276 = 0 && R7277 = 0)) && (R23 = 0 || (R7278 = 0 && R7279 = 0)) && (R23 = 0 || (R7280 = 0 && R7281 = 0)) && (R23 = 0 || (R7282 = 0 && R7283 = 0)) && (R23 = 0 || (R7284 = 0 && R7285 = 0)) && (R40 + R7264 + R7674 + R7672 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R7931 + R7928 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R7934 = 0 || R1 < 1) && (R7936 = 0 || R1 < 1) && (R7938 = 0 || R1 < 1) && (R7940 = 0 || R1 < 1) && (R7942 = 0 || R1 < 1) && (R7944 = 0 || R1 < 1) && (R7946 = 0 || R1 < 1) && (R7974 = 0 || (R1 = 0 && R8003 = 0)) && (R7976 = 0 || (R1 = 0 && R8003 = 0)) && (R7978 = 0 || (R1 = 0 && R8003 = 0)) && (R7980 = 0 || (R1 = 0 && R8003 = 0)) && (R7982 = 0 || (R1 = 0 && R8003 = 0)) && (R7984 = 0 || (R1 = 0 && R8003 = 0)) && (R7986 = 0 || (R1 = 0 && R8003 = 0)) && (R7988 = 0 || (R1 = 0 && R8003 = 0)) && (R7990 = 0 || (R1 = 0 && R8003 = 0)) && (R7992 = 0 || (R1 = 0 && R8003 = 0)) && (R7996 = 0 || (R1 = 0 && R8003 = 0)) && (R7998 = 0 || (R1 = 0 && R8003 = 0));
// End of Parikh automata intersection problem
