// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R36, R38, R4, R40, R41, R44, R45, R46, R5, R7260, R7262, R7264, R7265, R7268, R7269, R7270, R7274, R7275, R7276, R7277, R7278, R7279, R7280, R7281, R7282, R7283, R7284, R7285, R7286, R7287, R8054, R8055, R8438, R8439, R8440, R8441, R8694, R8695, R8696, R8697, R8698, R8699, R8700, R8701, R8702, R8703, R8704, R8705, R8706, R8707, R8708, R8709, R8710, R8711, R8712, R8713, R8714, R8715, R8716, R8717, R8718, R8719, R8720, R8721, R8722, R8723, R8724, R8725, R8726, R8727, R8728, R8729, R8730, R8731, R8732, R8733, R8734, R8735, R8736, R8737, R8738, R8739, R8740, R8741, R8742, R8743, R8744, R8745, R8746, R8747, R8748, R8749, R8750, R8751, R8752, R8753, R8754, R8755, R8756, R8757, R8758, R8759, R8760, R8761, R8762, R8763, R8764, R8765, R8766, R8767, R8768, R8769, R8770, R8771, R8772, R8773, R8774, R8775, R8776, R8777, R8778, R8779, R8780, R8781, R8782, R8783, R8784, R8785, R8786, R8787, R8788, R8789, R8790, R8791, R8792, R8793, R8794, R8795, R8796, R8797, R8798, R8799, R8800, R8801, R8802, R8803, R8804, R8805, R8806, R8807, R8808, R8809, R8810, R8811, R8812, R8813, R8814, R8815, R8816, R8817, R8818, R8819, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s2 [9, 13] { R29 += 1 };
  s0 -> s1 [14, 31] { R29 += 1 };
  s0 -> s2 [32, 32] { R29 += 1 };
  s0 -> s1 [33, 65535] { R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R29 += 1 };
  s2 -> s1 [0, 65535] { R29 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R7274 += 1, R7275 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R7277 += 1 };
  s0 -> s0 [0, 65535] { R7276 += 1, R7277 += 1 };
  s0 -> s2 [81, 81] { R7277 += 1 };
  s0 -> s3 [81, 81] { R7277 += 1 };
  s0 -> s1 [83, 65535] { R7277 += 1 };
  s1 -> s1 [0, 80] { R7277 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7277 += 1 };
  s1 -> s3 [81, 81] { R7277 += 1 };
  s1 -> s1 [83, 65535] { R7277 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R7277 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R7277 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R7278 += 1, R7279 += 1 };
  s0 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7280 += 1, R7281 += 1 };
  s0 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7281 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R7282 += 1, R7283 += 1 };
  s0 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7284 += 1, R7285 += 1 };
  s0 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R8771 += 1 };
  s0 -> s0 [0, 65535] { R8770 += 1, R8771 += 1 };
  s0 -> s2 [81, 81] { R8771 += 1 };
  s0 -> s1 [82, 65535] { R8771 += 1 };
  s1 -> s1 [0, 80] { R8771 += 1 };
  s1 -> s2 [81, 81] { R8771 += 1 };
  s1 -> s1 [82, 65535] { R8771 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8771 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R8772 += 1, R8773 += 1 };
  s0 -> s1 [0, 65535] { R8773 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8773 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R8775 += 1 };
  s0 -> s0 [0, 65535] { R8774 += 1, R8775 += 1 };
  s0 -> s2 [0, 65535] { R8775 += 1, R12 += 1 };
  s0 -> s3 [81, 81] { R8775 += 1 };
  s0 -> s1 [82, 65535] { R8775 += 1 };
  s1 -> s1 [0, 80] { R8775 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R8775 += 1 };
  s1 -> s1 [82, 65535] { R8775 += 1 };
  s2 -> s1 [0, 80] { R8775 += 1 };
  s2 -> s2 [0, 65535] { R8775 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R8775 += 1 };
  s2 -> s1 [82, 65535] { R8775 += 1 };
  s3 -> s3 [0, 65535] { R8775 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R8776 += 1, R8777 += 1 };
  s0 -> s1 [0, 65535] { R8777 += 1, R8714 += 1, R8715 += 1 };
  s0 -> s2 [0, 65535] { R8777 += 1, R8715 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8777 += 1, R8714 += 1, R8715 += 1 };
  s1 -> s2 [0, 65535] { R8777 += 1, R8715 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8777 += 1 };
  s2 -> s2 [0, 65535] { R8777 += 1, R8715 += 1, R22 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8777 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 80] { R8779 += 1, R8717 += 1 };
  s0 -> s2 [0, 65535] { R8779 += 1, R8716 += 1, R8717 += 1 };
  s0 -> s0 [0, 65535] { R8778 += 1, R8779 += 1 };
  s0 -> s3 [81, 81] { R8779 += 1, R8717 += 1 };
  s0 -> s4 [81, 81] { R8779 += 1, R8717 += 1 };
  s0 -> s1 [83, 65535] { R8779 += 1, R8717 += 1 };
  s1 -> s1 [0, 80] { R8779 += 1, R8717 += 1 };
  s1 -> s1 [0, 65535] { R8779 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8779 += 1, R8717 += 1 };
  s1 -> s4 [81, 81] { R8779 += 1, R8717 += 1 };
  s1 -> s1 [83, 65535] { R8779 += 1, R8717 += 1 };
  s2 -> s1 [0, 80] { R8779 += 1, R8717 += 1 };
  s2 -> s2 [0, 65535] { R8779 += 1, R8716 += 1, R8717 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8779 += 1, R8717 += 1 };
  s2 -> s4 [81, 81] { R8779 += 1, R8717 += 1 };
  s2 -> s1 [83, 65535] { R8779 += 1, R8717 += 1 };
  s3 -> s3 [0, 65535] { R8779 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 81] { R8779 += 1, R8717 += 1 };
  s4 -> s4 [0, 65535] { R8779 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [83, 65535] { R8779 += 1, R8717 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s0 -> s0 [0, 65535] { R8780 += 1, R8781 += 1 };
  s0 -> s2 [0, 65535] { R8781 += 1, R8718 += 1, R8719 += 1 };
  s0 -> s3 [81, 81] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s0 -> s4 [81, 81] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s0 -> s1 [82, 65535] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s1 -> s1 [0, 80] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s1 -> s1 [0, 65535] { R8781 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s1 -> s4 [81, 81] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s1 -> s1 [82, 65535] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s2 -> s1 [0, 80] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8781 += 1, R8718 += 1, R8719 += 1 };
  s2 -> s3 [81, 81] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s2 -> s4 [81, 81] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s2 -> s1 [82, 65535] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R8781 += 1, R8719 += 1, R7260 += 1 };
  s3 -> s6 [0, 65535] { R8781 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8781 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8781 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s0 -> s2 [0, 65535] { R8783 += 1, R8720 += 1, R8721 += 1 };
  s0 -> s0 [0, 65535] { R8782 += 1, R8783 += 1 };
  s0 -> s3 [81, 81] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s0 -> s4 [81, 81] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s0 -> s1 [82, 65535] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s1 -> s1 [0, 80] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8783 += 1 };
  s1 -> s3 [81, 81] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s1 -> s4 [81, 81] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s1 -> s1 [82, 65535] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s2 -> s1 [0, 80] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s2 -> s2 [0, 65535] { R8783 += 1, R8720 += 1, R8721 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s2 -> s4 [81, 81] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s2 -> s1 [82, 65535] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8783 += 1 };
  s4 -> s5 [0, 65535] { R8783 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8783 += 1, R8721 += 1, R7262 += 1 };
  s5 -> s5 [0, 65535] { R8783 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 80] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s2 [0, 65535] { R8785 += 1, R8722 += 1, R8723 += 1 };
  s0 -> s0 [0, 65535] { R8784 += 1, R8785 += 1 };
  s0 -> s3 [81, 81] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s4 [81, 81] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s1 [82, 65535] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [0, 80] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8785 += 1 };
  s1 -> s3 [81, 81] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s4 [81, 81] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [82, 65535] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [0, 80] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8785 += 1, R8722 += 1, R8723 += 1 };
  s2 -> s3 [81, 81] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s4 [81, 81] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [82, 65535] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8785 += 1, R8723 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s6 [0, 65535] { R8785 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8785 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8785 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 80] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s2 [0, 65535] { R8787 += 1, R8724 += 1, R8725 += 1 };
  s0 -> s0 [0, 65535] { R8786 += 1, R8787 += 1 };
  s0 -> s3 [81, 81] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s4 [81, 81] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s1 [82, 65535] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 80] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 65535] { R8787 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s4 [81, 81] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [82, 65535] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [0, 80] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s2 [0, 65535] { R8787 += 1, R8724 += 1, R8725 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s4 [81, 81] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [82, 65535] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s3 [0, 65535] { R8787 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8787 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8787 += 1, R8725 += 1, R7268 += 1, R7269 += 1 };
  s5 -> s5 [0, 65535] { R8787 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 80] { R8789 += 1, R8739 += 1 };
  s0 -> s0 [0, 65535] { R8788 += 1, R8789 += 1 };
  s0 -> s2 [0, 65535] { R8789 += 1, R8738 += 1, R8739 += 1 };
  s0 -> s3 [81, 81] { R8789 += 1, R8739 += 1 };
  s0 -> s1 [82, 65535] { R8789 += 1, R8739 += 1 };
  s1 -> s1 [0, 80] { R8789 += 1, R8739 += 1 };
  s1 -> s3 [81, 81] { R8789 += 1, R8739 += 1 };
  s1 -> s1 [82, 65535] { R8789 += 1, R8739 += 1 };
  s2 -> s1 [0, 80] { R8789 += 1, R8739 += 1 };
  s2 -> s2 [0, 65535] { R8789 += 1, R8738 += 1, R8739 += 1 };
  s2 -> s3 [81, 81] { R8789 += 1, R8739 += 1 };
  s2 -> s1 [82, 65535] { R8789 += 1, R8739 += 1 };
  s3 -> s4 [0, 65535] { R8789 += 1 };
  s3 -> s3 [0, 65535] { R8789 += 1, R8739 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8789 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R8790 += 1, R8791 += 1 };
  s0 -> s1 [0, 65535] { R8791 += 1, R8741 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R8791 += 1, R8740 += 1, R8741 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8791 += 1, R8741 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R8791 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8791 += 1, R8741 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R8791 += 1, R8740 += 1, R8741 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8791 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R8793 += 1, R8743 += 1 };
  s0 -> s2 [0, 65535] { R8793 += 1, R8743 += 1, R9 += 1 };
  s0 -> s3 [0, 65535] { R8793 += 1, R8742 += 1, R8743 += 1 };
  s0 -> s0 [0, 65535] { R8792 += 1, R8793 += 1 };
  s0 -> s4 [81, 81] { R8793 += 1, R8743 += 1 };
  s0 -> s1 [82, 65535] { R8793 += 1, R8743 += 1 };
  s1 -> s1 [0, 80] { R8793 += 1, R8743 += 1 };
  s1 -> s1 [0, 65535] { R8793 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [81, 81] { R8793 += 1, R8743 += 1 };
  s1 -> s1 [82, 65535] { R8793 += 1, R8743 += 1 };
  s2 -> s1 [0, 80] { R8793 += 1, R8743 += 1 };
  s2 -> s2 [0, 65535] { R8793 += 1, R8743 += 1, R9 += 1 };
  s2 -> s6 [0, 65535] { R8793 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [81, 81] { R8793 += 1, R8743 += 1 };
  s2 -> s1 [82, 65535] { R8793 += 1, R8743 += 1 };
  s3 -> s1 [0, 80] { R8793 += 1, R8743 += 1 };
  s3 -> s2 [0, 65535] { R8793 += 1, R8743 += 1, R9 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8793 += 1, R8742 += 1, R8743 += 1 };
  s3 -> s4 [81, 81] { R8793 += 1, R8743 += 1 };
  s3 -> s1 [82, 65535] { R8793 += 1, R8743 += 1 };
  s4 -> s4 [0, 65535] { R8793 += 1, R8743 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8793 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 80] { R8795 += 1, R8745 += 1, R8701 += 1 };
  s0 -> s2 [0, 65535] { R8795 += 1, R8744 += 1, R8745 += 1 };
  s0 -> s3 [0, 65535] { R8795 += 1, R8745 += 1, R8700 += 1, R8701 += 1 };
  s0 -> s0 [0, 65535] { R8794 += 1, R8795 += 1 };
  s0 -> s1 [82, 65535] { R8795 += 1, R8745 += 1, R8701 += 1 };
  s1 -> s1 [0, 80] { R8795 += 1, R8745 += 1, R8701 += 1 };
  s1 -> s1 [0, 65535] { R8795 += 1, R8745 += 1 };
  s1 -> s4 [0, 65535] { R8795 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R8795 += 1, R8745 += 1, R8701 += 1 };
  s2 -> s1 [0, 80] { R8795 += 1, R8745 += 1, R8701 += 1 };
  s2 -> s2 [0, 65535] { R8795 += 1, R8744 += 1, R8745 += 1 };
  s2 -> s3 [0, 65535] { R8795 += 1, R8745 += 1, R8700 += 1, R8701 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R8795 += 1, R8745 += 1, R8701 += 1 };
  s3 -> s1 [0, 80] { R8795 += 1, R8745 += 1, R8701 += 1 };
  s3 -> s3 [0, 65535] { R8795 += 1, R8745 += 1, R8700 += 1, R8701 += 1 };
  s3 -> s4 [0, 65535] { R8795 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R8795 += 1, R8745 += 1, R8701 += 1 };
  s4 -> s4 [0, 65535] { R8795 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R8796 += 1, R8797 += 1 };
  s0 -> s1 [0, 65535] { R8797 += 1, R8746 += 1, R8747 += 1 };
  s0 -> s2 [0, 65535] { R8797 += 1, R8747 += 1, R8703 += 1, R20 += 1 };
  s0 -> s3 [0, 65535] { R8797 += 1, R8747 += 1, R8702 += 1, R8703 += 1 };
  s1 -> s1 [0, 65535] { R8797 += 1, R8746 += 1, R8747 += 1 };
  s1 -> s2 [0, 65535] { R8797 += 1, R8747 += 1, R8703 += 1, R20 += 1 };
  s1 -> s3 [0, 65535] { R8797 += 1, R8747 += 1, R8702 += 1, R8703 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8797 += 1, R8747 += 1, R8703 += 1, R20 += 1 };
  s2 -> s6 [0, 65535] { R8797 += 1, R8747 += 1 };
  s2 -> s4 [0, 65535] { R8797 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8797 += 1, R8747 += 1, R8703 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R8797 += 1, R8747 += 1, R8702 += 1, R8703 += 1 };
  s3 -> s4 [0, 65535] { R8797 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8797 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8797 += 1, R8747 += 1 };
  s6 -> s4 [0, 65535] { R8797 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8799 += 1, R8748 += 1, R8749 += 1 };
  s0 -> s0 [0, 65535] { R8798 += 1, R8799 += 1 };
  s0 -> s2 [0, 65535] { R8799 += 1, R8749 += 1, R8705 += 1 };
  s0 -> s3 [0, 65535] { R8799 += 1, R8749 += 1, R8704 += 1, R8705 += 1 };
  s1 -> s1 [0, 65535] { R8799 += 1, R8748 += 1, R8749 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R8799 += 1, R8749 += 1, R8705 += 1 };
  s1 -> s3 [0, 65535] { R8799 += 1, R8749 += 1, R8704 += 1, R8705 += 1 };
  s2 -> s4 [0, 65535] { R8799 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8799 += 1, R8749 += 1 };
  s2 -> s2 [0, 65535] { R8799 += 1, R8749 += 1, R8705 += 1 };
  s3 -> s4 [0, 65535] { R8799 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8799 += 1, R8749 += 1, R8705 += 1 };
  s3 -> s3 [0, 65535] { R8799 += 1, R8749 += 1, R8704 += 1, R8705 += 1 };
  s4 -> s4 [0, 65535] { R8799 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8799 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8799 += 1, R8749 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8801 += 1, R8751 += 1, R8707 += 1, R7287 += 1 };
  s0 -> s0 [0, 65535] { R8800 += 1, R8801 += 1 };
  s0 -> s2 [0, 65535] { R8801 += 1, R8751 += 1, R8706 += 1, R8707 += 1 };
  s0 -> s3 [0, 65535] { R8801 += 1, R8750 += 1, R8751 += 1 };
  s1 -> s5 [0, 65535] { R8801 += 1 };
  s1 -> s1 [0, 65535] { R8801 += 1, R8751 += 1, R8707 += 1, R7287 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8801 += 1, R8751 += 1 };
  s2 -> s5 [0, 65535] { R8801 += 1 };
  s2 -> s1 [0, 65535] { R8801 += 1, R8751 += 1, R8707 += 1, R7287 += 1 };
  s2 -> s2 [0, 65535] { R8801 += 1, R8751 += 1, R8706 += 1, R8707 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8801 += 1, R8751 += 1, R8707 += 1, R7287 += 1 };
  s3 -> s2 [0, 65535] { R8801 += 1, R8751 += 1, R8706 += 1, R8707 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8801 += 1, R8750 += 1, R8751 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8801 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8801 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8801 += 1, R8751 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 81] { R8803 += 1, R8753 += 1, R8709 += 1 };
  s0 -> s0 [0, 65535] { R8802 += 1, R8803 += 1 };
  s0 -> s2 [0, 65535] { R8803 += 1, R8752 += 1, R8753 += 1 };
  s0 -> s3 [0, 65535] { R8803 += 1, R8753 += 1, R8708 += 1, R8709 += 1 };
  s0 -> s1 [83, 65535] { R8803 += 1, R8753 += 1, R8709 += 1 };
  s1 -> s1 [0, 81] { R8803 += 1, R8753 += 1, R8709 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8803 += 1, R8753 += 1 };
  s1 -> s5 [0, 65535] { R8803 += 1 };
  s1 -> s1 [83, 65535] { R8803 += 1, R8753 += 1, R8709 += 1 };
  s2 -> s1 [0, 81] { R8803 += 1, R8753 += 1, R8709 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8803 += 1, R8752 += 1, R8753 += 1 };
  s2 -> s3 [0, 65535] { R8803 += 1, R8753 += 1, R8708 += 1, R8709 += 1 };
  s2 -> s1 [83, 65535] { R8803 += 1, R8753 += 1, R8709 += 1 };
  s3 -> s1 [0, 81] { R8803 += 1, R8753 += 1, R8709 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8803 += 1, R8753 += 1, R8708 += 1, R8709 += 1 };
  s3 -> s5 [0, 65535] { R8803 += 1 };
  s3 -> s1 [83, 65535] { R8803 += 1, R8753 += 1, R8709 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8803 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 81] { R8805 += 1, R8755 += 1, R8711 += 1, R8441 += 1 };
  s0 -> s2 [0, 65535] { R8805 += 1, R8754 += 1, R8755 += 1 };
  s0 -> s1 [0, 65535] { R8805 += 1, R8755 += 1, R8711 += 1 };
  s0 -> s0 [0, 65535] { R8804 += 1, R8805 += 1 };
  s0 -> s3 [0, 65535] { R8805 += 1, R8755 += 1, R8710 += 1, R8711 += 1 };
  s0 -> s1 [83, 65535] { R8805 += 1, R8755 += 1, R8711 += 1, R8441 += 1 };
  s1 -> s1 [0, 81] { R8805 += 1, R8755 += 1, R8711 += 1, R8441 += 1 };
  s1 -> s1 [0, 65535] { R8805 += 1, R8755 += 1, R8711 += 1 };
  s1 -> s6 [0, 65535] { R8805 += 1, R8755 += 1 };
  s1 -> s4 [0, 65535] { R8805 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [83, 65535] { R8805 += 1, R8755 += 1, R8711 += 1, R8441 += 1 };
  s2 -> s1 [0, 81] { R8805 += 1, R8755 += 1, R8711 += 1, R8441 += 1 };
  s2 -> s2 [0, 65535] { R8805 += 1, R8754 += 1, R8755 += 1 };
  s2 -> s1 [0, 65535] { R8805 += 1, R8755 += 1, R8711 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8805 += 1, R8755 += 1, R8710 += 1, R8711 += 1 };
  s2 -> s1 [83, 65535] { R8805 += 1, R8755 += 1, R8711 += 1, R8441 += 1 };
  s3 -> s1 [0, 81] { R8805 += 1, R8755 += 1, R8711 += 1, R8441 += 1 };
  s3 -> s1 [0, 65535] { R8805 += 1, R8755 += 1, R8711 += 1 };
  s3 -> s4 [0, 65535] { R8805 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8805 += 1, R8755 += 1, R8710 += 1, R8711 += 1 };
  s3 -> s1 [83, 65535] { R8805 += 1, R8755 += 1, R8711 += 1, R8441 += 1 };
  s4 -> s4 [0, 65535] { R8805 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8805 += 1, R8755 += 1 };
  s6 -> s4 [0, 65535] { R8805 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R8807 += 1, R8757 += 1, R8713 += 1 };
  s0 -> s2 [0, 65535] { R8807 += 1, R8756 += 1, R8757 += 1 };
  s0 -> s0 [0, 65535] { R8806 += 1, R8807 += 1 };
  s0 -> s3 [0, 65535] { R8807 += 1, R8757 += 1, R8712 += 1, R8713 += 1 };
  s1 -> s6 [0, 65535] { R8807 += 1, R8757 += 1 };
  s1 -> s4 [0, 65535] { R8807 += 1 };
  s1 -> s1 [0, 65535] { R8807 += 1, R8757 += 1, R8713 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8807 += 1, R8757 += 1, R8713 += 1 };
  s2 -> s2 [0, 65535] { R8807 += 1, R8756 += 1, R8757 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8807 += 1, R8757 += 1, R8712 += 1, R8713 += 1 };
  s3 -> s4 [0, 65535] { R8807 += 1 };
  s3 -> s1 [0, 65535] { R8807 += 1, R8757 += 1, R8713 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8807 += 1, R8757 += 1, R8712 += 1, R8713 += 1 };
  s4 -> s4 [0, 65535] { R8807 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8807 += 1, R8757 += 1 };
  s6 -> s4 [0, 65535] { R8807 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65535] { R8809 += 1, R8759 += 1, R8726 += 1, R8727 += 1 };
  s0 -> s0 [0, 65535] { R8808 += 1, R8809 += 1 };
  s0 -> s2 [0, 65535] { R8809 += 1, R8759 += 1, R8727 += 1, R21 += 1 };
  s0 -> s3 [0, 65535] { R8809 += 1, R8758 += 1, R8759 += 1 };
  s1 -> s1 [0, 65535] { R8809 += 1, R8759 += 1, R8726 += 1, R8727 += 1 };
  s1 -> s5 [0, 65535] { R8809 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8809 += 1, R8759 += 1, R8727 += 1, R21 += 1 };
  s2 -> s5 [0, 65535] { R8809 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R8809 += 1, R8759 += 1 };
  s2 -> s2 [0, 65535] { R8809 += 1, R8759 += 1, R8727 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R8809 += 1, R8759 += 1, R8726 += 1, R8727 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8809 += 1, R8759 += 1, R8727 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R8809 += 1, R8758 += 1, R8759 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8809 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8809 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8809 += 1, R8759 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s0 -> s0 [0, 65535] { R8810 += 1, R8811 += 1 };
  s0 -> s2 [0, 65535] { R8811 += 1, R8760 += 1, R8761 += 1 };
  s0 -> s3 [0, 65535] { R8811 += 1, R8761 += 1, R8728 += 1, R8729 += 1 };
  s0 -> s4 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s0 -> s5 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s0 -> s6 [82, 82] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s0 -> s1 [83, 65535] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s1 -> s1 [0, 80] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s1 -> s4 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s1 -> s5 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s1 -> s6 [82, 82] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s1 -> s1 [83, 65535] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s2 -> s1 [0, 80] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s2 -> s2 [0, 65535] { R8811 += 1, R8760 += 1, R8761 += 1 };
  s2 -> s3 [0, 65535] { R8811 += 1, R8761 += 1, R8728 += 1, R8729 += 1 };
  s2 -> s4 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s2 -> s5 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s2 -> s6 [82, 82] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s2 -> s1 [83, 65535] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s3 -> s1 [0, 80] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s3 -> s3 [0, 65535] { R8811 += 1, R8761 += 1, R8728 += 1, R8729 += 1 };
  s3 -> s4 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s3 -> s5 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s3 -> s6 [82, 82] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s3 -> s1 [83, 65535] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s5 -> s5 [0, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s5 -> s10 [82, 82] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s5 -> s5 [83, 65535] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s6 -> s6 [0, 80] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s6 -> s6 [0, 65535] { R8811 += 1, R8761 += 1 };
  s6 -> s7 [0, 65535] { R8811 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s6 -> s10 [81, 81] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s6 -> s6 [82, 65535] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s7 -> s7 [0, 65535] { R8811 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8811 += 1, R8761 += 1 };
  s9 -> s7 [0, 65535] { R8811 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s7 [0, 65535] { R8811 += 1 };
  s10 -> s10 [0, 65535] { R8811 += 1, R8761 += 1, R8729 += 1 };
  s10 -> s11 [0, 65535] { R8811 += 1, R8761 += 1 };
  s10 -> s8 [0, 65535];
  s11 -> s7 [0, 65535] { R8811 += 1 };
  s11 -> s11 [0, 65535] { R8811 += 1, R8761 += 1 };
  s11 -> s8 [0, 65535];
  accepting s8, s9, s6, s7, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s0 -> s0 [0, 65535] { R8812 += 1, R8813 += 1 };
  s0 -> s2 [0, 65535] { R8813 += 1, R8763 += 1, R8730 += 1, R8731 += 1 };
  s0 -> s3 [0, 65535] { R8813 += 1, R8762 += 1, R8763 += 1 };
  s0 -> s4 [81, 81] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s0 -> s5 [81, 81] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s0 -> s1 [82, 65535] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s1 -> s1 [0, 80] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s1 -> s1 [0, 65535] { R8813 += 1, R8763 += 1 };
  s1 -> s6 [0, 65535] { R8813 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [81, 81] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s1 -> s5 [81, 81] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s1 -> s1 [82, 65535] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s2 -> s1 [0, 80] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s2 -> s2 [0, 65535] { R8813 += 1, R8763 += 1, R8730 += 1, R8731 += 1 };
  s2 -> s6 [0, 65535] { R8813 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [81, 81] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s2 -> s5 [81, 81] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s2 -> s1 [82, 65535] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s3 -> s1 [0, 80] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s3 -> s2 [0, 65535] { R8813 += 1, R8763 += 1, R8730 += 1, R8731 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R8813 += 1, R8762 += 1, R8763 += 1 };
  s3 -> s4 [81, 81] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s3 -> s5 [81, 81] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s3 -> s1 [82, 65535] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s4 -> s4 [0, 65535] { R8813 += 1, R8763 += 1, R8731 += 1, R7286 += 1 };
  s4 -> s6 [0, 65535] { R8813 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R8813 += 1, R8763 += 1 };
  s5 -> s5 [0, 65535] { R8813 += 1, R8763 += 1 };
  s5 -> s6 [0, 65535] { R8813 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R8813 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R8813 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8813 += 1, R8763 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s0 -> s2 [0, 80] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s0 -> s3 [0, 65535] { R8815 += 1, R8765 += 1, R8732 += 1, R8733 += 1 };
  s0 -> s0 [0, 65535] { R8814 += 1, R8815 += 1 };
  s0 -> s4 [0, 65535] { R8815 += 1, R8764 += 1, R8765 += 1 };
  s0 -> s5 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s0 -> s6 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s0 -> s7 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s0 -> s8 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s0 -> s2 [82, 65535] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s0 -> s1 [83, 65535] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s1 -> s1 [0, 80] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s1 -> s1 [0, 65535] { R8815 += 1, R8765 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s10 [0, 65535] { R8815 += 1 };
  s1 -> s5 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s1 -> s8 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s1 -> s1 [83, 65535] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s2 -> s1 [0, 80] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s2 -> s2 [0, 80] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s2 -> s5 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s2 -> s6 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s2 -> s7 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s2 -> s8 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s2 -> s2 [82, 65535] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s2 -> s1 [83, 65535] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s3 -> s1 [0, 80] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s3 -> s2 [0, 80] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s3 -> s3 [0, 65535] { R8815 += 1, R8765 += 1, R8732 += 1, R8733 += 1 };
  s3 -> s5 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s3 -> s6 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s3 -> s7 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s3 -> s8 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s3 -> s2 [82, 65535] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s3 -> s1 [83, 65535] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s4 -> s1 [0, 80] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s4 -> s2 [0, 80] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s4 -> s3 [0, 65535] { R8815 += 1, R8765 += 1, R8732 += 1, R8733 += 1 };
  s4 -> s4 [0, 65535] { R8815 += 1, R8764 += 1, R8765 += 1 };
  s4 -> s5 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s4 -> s6 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s4 -> s7 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s4 -> s8 [81, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s4 -> s2 [82, 65535] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s4 -> s1 [83, 65535] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s5 -> s5 [0, 65535] { R8815 += 1, R8765 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s10 [0, 65535] { R8815 += 1 };
  s7 -> s8 [0, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s7 -> s7 [0, 65535] { R8815 += 1, R8765 += 1, R8733 += 1, R8054 += 1 };
  s7 -> s8 [83, 65535] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s8 -> s8 [0, 81] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8815 += 1 };
  s8 -> s8 [0, 65535] { R8815 += 1, R8765 += 1 };
  s8 -> s8 [83, 65535] { R8815 += 1, R8765 += 1, R8733 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8815 += 1 };
  accepting s8, s5, s9, s1, s10;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s0 -> s2 [0, 80] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s0 -> s0 [0, 65535] { R8816 += 1, R8817 += 1 };
  s0 -> s3 [0, 65535] { R8817 += 1, R8766 += 1, R8767 += 1 };
  s0 -> s4 [0, 65535] { R8817 += 1, R8767 += 1, R8734 += 1, R8735 += 1 };
  s0 -> s5 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s0 -> s6 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s0 -> s7 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s0 -> s8 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s0 -> s2 [82, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s0 -> s1 [83, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s1 -> s1 [0, 80] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s1 -> s10 [0, 65535];
  s1 -> s1 [0, 65535] { R8817 += 1, R8767 += 1 };
  s1 -> s11 [0, 65535] { R8817 += 1 };
  s1 -> s5 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1 };
  s1 -> s8 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1 };
  s1 -> s1 [82, 65535] { R8817 += 1, R8767 += 1, R8735 += 1 };
  s1 -> s1 [83, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s2 -> s1 [0, 80] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s2 -> s2 [0, 80] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s2 -> s5 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s2 -> s6 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s2 -> s7 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s2 -> s8 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s2 -> s2 [82, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s2 -> s1 [83, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s3 -> s1 [0, 80] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s3 -> s2 [0, 80] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s3 -> s3 [0, 65535] { R8817 += 1, R8766 += 1, R8767 += 1 };
  s3 -> s4 [0, 65535] { R8817 += 1, R8767 += 1, R8734 += 1, R8735 += 1 };
  s3 -> s5 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s3 -> s6 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s3 -> s7 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s3 -> s8 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s3 -> s2 [82, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s3 -> s1 [83, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s4 -> s1 [0, 80] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s4 -> s2 [0, 80] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s4 -> s4 [0, 65535] { R8817 += 1, R8767 += 1, R8734 += 1, R8735 += 1 };
  s4 -> s5 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s4 -> s6 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s4 -> s7 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s4 -> s8 [81, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s4 -> s2 [82, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s4 -> s1 [83, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s5 -> s5 [0, 65535] { R8817 += 1, R8767 += 1 };
  s5 -> s10 [0, 65535];
  s5 -> s11 [0, 65535] { R8817 += 1 };
  s7 -> s8 [0, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s7 -> s7 [0, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8438 += 1, R8439 += 1 };
  s7 -> s8 [83, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s8 -> s8 [0, 81] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s8 -> s9 [0, 65535] { R8817 += 1, R8767 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R8817 += 1, R8767 += 1, R8735 += 1 };
  s8 -> s11 [0, 65535] { R8817 += 1 };
  s8 -> s8 [83, 65535] { R8817 += 1, R8767 += 1, R8735 += 1, R8439 += 1 };
  s9 -> s9 [0, 65535] { R8817 += 1, R8767 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R8817 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8817 += 1 };
  accepting s8, s5, s9, s1, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s0 -> s2 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s0 -> s0 [0, 65535] { R8818 += 1, R8819 += 1 };
  s0 -> s3 [0, 65535] { R8819 += 1, R8768 += 1, R8769 += 1 };
  s0 -> s4 [0, 65535] { R8819 += 1, R8769 += 1, R8736 += 1, R8737 += 1 };
  s0 -> s5 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s0 -> s6 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s0 -> s7 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s0 -> s8 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s0 -> s1 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s0 -> s2 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s1 -> s1 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s1 -> s2 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s1 -> s5 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s1 -> s6 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s1 -> s7 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s1 -> s8 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s1 -> s1 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s1 -> s2 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s2 -> s13 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s2 -> s2 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s2 -> s6 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s2 -> s14 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s2 -> s7 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s2 -> s9 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s2 -> s13 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s2 -> s2 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s3 -> s1 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s3 -> s2 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s3 -> s3 [0, 65535] { R8819 += 1, R8768 += 1, R8769 += 1 };
  s3 -> s4 [0, 65535] { R8819 += 1, R8769 += 1, R8736 += 1, R8737 += 1 };
  s3 -> s5 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s3 -> s6 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s3 -> s7 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s3 -> s8 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s3 -> s1 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s3 -> s2 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s4 -> s1 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s4 -> s2 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s4 -> s4 [0, 65535] { R8819 += 1, R8769 += 1, R8736 += 1, R8737 += 1 };
  s4 -> s5 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s4 -> s6 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s4 -> s7 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s4 -> s8 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s4 -> s1 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s4 -> s2 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s5 -> s5 [0, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8694 += 1, R8695 += 1 };
  s5 -> s6 [0, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s6 -> s6 [0, 65535] { R8819 += 1, R8769 += 1, R8737 += 1, R8695 += 1, R8696 += 1 };
  s6 -> s9 [0, 65535] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R8819 += 1 };
  s9 -> s9 [0, 65535] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s9 -> s12 [0, 65535] { R8819 += 1, R8769 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8819 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s11 [0, 65535] { R8819 += 1 };
  s12 -> s12 [0, 65535] { R8819 += 1, R8769 += 1 };
  s13 -> s13 [0, 80] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s13 -> s10 [0, 65535];
  s13 -> s13 [0, 65535] { R8819 += 1, R8769 += 1 };
  s13 -> s11 [0, 65535] { R8819 += 1 };
  s13 -> s14 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s13 -> s9 [81, 81] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s13 -> s13 [82, 65535] { R8819 += 1, R8769 += 1, R8737 += 1 };
  s14 -> s10 [0, 65535];
  s14 -> s11 [0, 65535] { R8819 += 1 };
  s14 -> s14 [0, 65535] { R8819 += 1, R8769 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P10
automaton P10_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R2 = R8769 && R3 = R8819 && R24 - R8819 = -1 && R25 = R8819 && R26 - R8819 = -1 && R27 = R8819 && R28 = 0 && R29 = 1 && R30 = 0 && R31 = 1 && R8728 = 0 && R8729 = 0 && R8732 = 0 && R8733 = 0 && R8734 = 0 && R8735 = 0 && R8736 = 0 && R8737 = 0 && R8738 = 0 && R8739 = R8769 && R8760 = 0 && R8761 = R8769 && R8764 = 0 && R8765 = R8769 && R8766 = 0 && R8767 = R8769 && R8768 = 0 && R8770 = 0 && R8771 = R8819 && R8772 = 0 && R8773 = R8819 && R8774 = 0 && R8775 = R8819 && R8776 = 0 && R8777 = R8819 && R8778 = 0 && R8779 = R8819 && R8780 = 0 && R8781 = R8819 && R8782 = 0 && R8783 = R8819 && R8784 = 0 && R8785 = R8819 && R8786 = 0 && R8787 = R8819 && R8788 = 0 && R8789 = R8819 && R8790 = 0 && R8791 = R8819 && R8792 = 0 && R8793 = R8819 && R8794 = 0 && R8795 = R8819 && R8796 = 0 && R8797 = R8819 && R8798 = 0 && R8799 = R8819 && R8800 = 0 && R8801 = R8819 && R8802 = 0 && R8803 = R8819 && R8804 = 0 && R8805 = R8819 && R8806 = 0 && R8807 = R8819 && R8808 = 0 && R8809 = R8819 && R8810 = 0 && R8811 = R8819 && R8812 = 0 && R8813 = R8819 && R8814 = 0 && R8815 = R8819 && R8816 = 0 && R8817 = R8819 && R8818 = 0 && -1 < R1 && R9 < 1 && R12 < 1 && R15 < 1 && R16 < 1 && -1*R7287 + -1*R7286 - R7260 - R36 < 1 && R38 + R7262 + R8055 + R8054 < 1 && -1 < R8769 && 0 < R8819 && (R1 != 0 || R20 = 0 || (R8700 = 0 && R8701 = 0)) && (R1 != 0 || R20 = 0 || (R8702 = 0 && R8703 = 0)) && (R1 != 0 || R20 = 0 || (R8704 = 0 && R8705 = 0)) && (R1 != 0 || R20 = 0 || (R8706 = 0 && R8707 = 0)) && (R1 != 0 || R20 = 0 || (R8708 = 0 && R8709 = 0)) && (R1 != 0 || R20 = 0 || (R8710 = 0 && R8711 = 0)) && (R1 != 0 || R20 = 0 || (R8712 = 0 && R8713 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8699 + R8696 = 0 || (R40 + R7264 + R8440 + R8438 = 0 && R41 + R7265 + R8441 + R8439 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8699 + R8696 = 0 || (R44 + R7268 + R8697 + R8694 = 0 && R45 + R7269 + R8698 + R8695 = 0)) && (R40 + R7264 + R8440 + R8438 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8441 + -1*R8439 - R7265 - R41 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8697 + R8694 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8698 + -1*R8695 - R7269 - R45 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8700 != 0 || R1 = R8701 || R1 < 1) && (R8702 != 0 || R1 = R8703 || R1 < 1) && (R8704 != 0 || R1 = R8705 || R1 < 1) && (R8706 != 0 || R1 = R8707 || R1 < 1) && (R8708 != 0 || R1 = R8709 || R1 < 1) && (R8710 != 0 || R1 = R8711 || R1 < 1) && (R8712 != 0 || R1 = R8713 || R1 < 1) && (R8740 != 0 || R8741 = R8769 || (R1 = 0 && R8769 = 0)) && (R8742 != 0 || R8743 = R8769 || (R1 = 0 && R8769 = 0)) && (R8744 != 0 || R8745 = R8769 || (R1 = 0 && R8769 = 0)) && (R8746 != 0 || R8747 = R8769 || (R1 = 0 && R8769 = 0)) && (R8748 != 0 || R8749 = R8769 || (R1 = 0 && R8769 = 0)) && (R8750 != 0 || R8751 = R8769 || (R1 = 0 && R8769 = 0)) && (R8752 != 0 || R8753 = R8769 || (R1 = 0 && R8769 = 0)) && (R8754 != 0 || R8755 = R8769 || (R1 = 0 && R8769 = 0)) && (R8756 != 0 || R8757 = R8769 || (R1 = 0 && R8769 = 0)) && (R8758 != 0 || R8759 = R8769 || (R1 = 0 && R8769 = 0)) && (R8762 != 0 || R8763 = R8769 || (R1 = 0 && R8769 = 0)) && (R21 = 0 || (R8726 = 0 && R8727 = 0)) && (R21 = 0 || (R8730 = 0 && R8731 = 0)) && (R22 = 0 || (R8714 = 0 && R8715 = 0)) && (R22 = 0 || (R8716 = 0 && R8717 = 0)) && (R22 = 0 || (R8718 = 0 && R8719 = 0)) && (R22 = 0 || (R8720 = 0 && R8721 = 0)) && (R22 = 0 || (R8722 = 0 && R8723 = 0)) && (R22 = 0 || (R8724 = 0 && R8725 = 0)) && (R23 = 0 || (R7274 = 0 && R7275 = 0)) && (R23 = 0 || (R7276 = 0 && R7277 = 0)) && (R23 = 0 || (R7278 = 0 && R7279 = 0)) && (R23 = 0 || (R7280 = 0 && R7281 = 0)) && (R23 = 0 || (R7282 = 0 && R7283 = 0)) && (R23 = 0 || (R7284 = 0 && R7285 = 0)) && (R40 + R7264 + R8440 + R8438 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8697 + R8694 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8700 = 0 || R1 < 1) && (R8702 = 0 || R1 < 1) && (R8704 = 0 || R1 < 1) && (R8706 = 0 || R1 < 1) && (R8708 = 0 || R1 < 1) && (R8710 = 0 || R1 < 1) && (R8712 = 0 || R1 < 1) && (R8740 = 0 || (R1 = 0 && R8769 = 0)) && (R8742 = 0 || (R1 = 0 && R8769 = 0)) && (R8744 = 0 || (R1 = 0 && R8769 = 0)) && (R8746 = 0 || (R1 = 0 && R8769 = 0)) && (R8748 = 0 || (R1 = 0 && R8769 = 0)) && (R8750 = 0 || (R1 = 0 && R8769 = 0)) && (R8752 = 0 || (R1 = 0 && R8769 = 0)) && (R8754 = 0 || (R1 = 0 && R8769 = 0)) && (R8756 = 0 || (R1 = 0 && R8769 = 0)) && (R8758 = 0 || (R1 = 0 && R8769 = 0)) && (R8762 = 0 || (R1 = 0 && R8769 = 0));
// End of Parikh automata intersection problem
