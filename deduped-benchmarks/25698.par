// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R36, R38, R4, R40, R41, R44, R45, R46, R5, R7260, R7262, R7264, R7265, R7268, R7269, R7270, R7274, R7275, R7276, R7277, R7278, R7279, R7280, R7281, R7282, R7283, R7284, R7285, R7286, R7287, R8054, R8055, R8438, R8439, R8440, R8441, R8568, R8569, R8570, R8571, R8572, R8573, R8574, R8575, R8576, R8577, R8578, R8579, R8580, R8581, R8582, R8583, R8584, R8585, R8586, R8587, R8588, R8589, R8590, R8591, R8592, R8593, R8594, R8595, R8596, R8597, R8598, R8599, R8600, R8601, R8602, R8603, R8604, R8605, R8606, R8607, R8608, R8609, R8610, R8611, R8612, R8613, R8614, R8615, R8616, R8617, R8618, R8619, R8620, R8621, R8622, R8623, R8624, R8625, R8626, R8627, R8628, R8629, R8630, R8631, R8632, R8633, R8634, R8635, R8636, R8637, R8638, R8639, R8640, R8641, R8642, R8643, R8644, R8645, R8646, R8647, R8648, R8649, R8650, R8651, R8652, R8653, R8654, R8655, R8656, R8657, R8658, R8659, R8660, R8661, R8662, R8663, R8664, R8665, R8666, R8667, R8668, R8669, R8670, R8671, R8672, R8673, R8674, R8675, R8676, R8677, R8678, R8679, R8680, R8681, R8682, R8683, R8684, R8685, R8686, R8687, R8688, R8689, R8690, R8691, R8692, R8693, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s2 [9, 13] { R29 += 1 };
  s0 -> s1 [14, 31] { R29 += 1 };
  s0 -> s2 [32, 32] { R29 += 1 };
  s0 -> s1 [33, 65535] { R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R29 += 1 };
  s2 -> s1 [0, 65535] { R29 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R7274 += 1, R7275 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7275 += 1, R23 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R7277 += 1 };
  s0 -> s0 [0, 65535] { R7276 += 1, R7277 += 1 };
  s0 -> s2 [81, 81] { R7277 += 1 };
  s0 -> s3 [81, 81] { R7277 += 1 };
  s0 -> s1 [83, 65535] { R7277 += 1 };
  s1 -> s1 [0, 80] { R7277 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7277 += 1 };
  s1 -> s3 [81, 81] { R7277 += 1 };
  s1 -> s1 [83, 65535] { R7277 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R7277 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R7277 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R7278 += 1, R7279 += 1 };
  s0 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s0 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 80] { R7279 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s3 [81, 81] { R7279 += 1, R36 += 1 };
  s1 -> s1 [82, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R7279 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7280 += 1, R7281 += 1 };
  s0 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R7281 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R7281 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R7281 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7281 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R7282 += 1, R7283 += 1 };
  s0 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s0 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 80] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [81, 81] { R7283 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [82, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7283 += 1, R40 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7284 += 1, R7285 += 1 };
  s0 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s0 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 80] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s3 [81, 81] { R7285 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [82, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7285 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R8645 += 1 };
  s0 -> s0 [0, 65535] { R8644 += 1, R8645 += 1 };
  s0 -> s2 [81, 81] { R8645 += 1 };
  s0 -> s1 [82, 65535] { R8645 += 1 };
  s1 -> s1 [0, 80] { R8645 += 1 };
  s1 -> s2 [81, 81] { R8645 += 1 };
  s1 -> s1 [82, 65535] { R8645 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8645 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8647 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8646 += 1, R8647 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8647 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R8649 += 1 };
  s0 -> s0 [0, 65535] { R8648 += 1, R8649 += 1 };
  s0 -> s2 [0, 65535] { R8649 += 1, R12 += 1 };
  s0 -> s3 [81, 81] { R8649 += 1 };
  s0 -> s1 [82, 65535] { R8649 += 1 };
  s1 -> s1 [0, 80] { R8649 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R8649 += 1 };
  s1 -> s1 [82, 65535] { R8649 += 1 };
  s2 -> s1 [0, 80] { R8649 += 1 };
  s2 -> s2 [0, 65535] { R8649 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R8649 += 1 };
  s2 -> s1 [82, 65535] { R8649 += 1 };
  s3 -> s3 [0, 65535] { R8649 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R8650 += 1, R8651 += 1 };
  s0 -> s1 [0, 65535] { R8651 += 1, R8588 += 1, R8589 += 1 };
  s0 -> s2 [0, 65535] { R8651 += 1, R8589 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R8651 += 1, R8588 += 1, R8589 += 1 };
  s1 -> s2 [0, 65535] { R8651 += 1, R8589 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8651 += 1, R8589 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8651 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8651 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 80] { R8653 += 1, R8591 += 1 };
  s0 -> s0 [0, 65535] { R8652 += 1, R8653 += 1 };
  s0 -> s2 [0, 65535] { R8653 += 1, R8590 += 1, R8591 += 1 };
  s0 -> s3 [81, 81] { R8653 += 1, R8591 += 1 };
  s0 -> s4 [81, 81] { R8653 += 1, R8591 += 1 };
  s0 -> s1 [83, 65535] { R8653 += 1, R8591 += 1 };
  s1 -> s1 [0, 80] { R8653 += 1, R8591 += 1 };
  s1 -> s1 [0, 65535] { R8653 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8653 += 1, R8591 += 1 };
  s1 -> s4 [81, 81] { R8653 += 1, R8591 += 1 };
  s1 -> s1 [83, 65535] { R8653 += 1, R8591 += 1 };
  s2 -> s1 [0, 80] { R8653 += 1, R8591 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8653 += 1, R8590 += 1, R8591 += 1 };
  s2 -> s3 [81, 81] { R8653 += 1, R8591 += 1 };
  s2 -> s4 [81, 81] { R8653 += 1, R8591 += 1 };
  s2 -> s1 [83, 65535] { R8653 += 1, R8591 += 1 };
  s3 -> s3 [0, 65535] { R8653 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 81] { R8653 += 1, R8591 += 1 };
  s4 -> s4 [0, 65535] { R8653 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [83, 65535] { R8653 += 1, R8591 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s0 -> s0 [0, 65535] { R8654 += 1, R8655 += 1 };
  s0 -> s2 [0, 65535] { R8655 += 1, R8592 += 1, R8593 += 1 };
  s0 -> s3 [81, 81] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s0 -> s4 [81, 81] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s0 -> s1 [82, 65535] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s1 -> s1 [0, 80] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s1 -> s1 [0, 65535] { R8655 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s1 -> s4 [81, 81] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s1 -> s1 [82, 65535] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s2 -> s1 [0, 80] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8655 += 1, R8592 += 1, R8593 += 1 };
  s2 -> s3 [81, 81] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s2 -> s4 [81, 81] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s2 -> s1 [82, 65535] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R8655 += 1, R8593 += 1, R7260 += 1 };
  s3 -> s6 [0, 65535] { R8655 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8655 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8655 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s0 -> s0 [0, 65535] { R8656 += 1, R8657 += 1 };
  s0 -> s2 [0, 65535] { R8657 += 1, R8594 += 1, R8595 += 1 };
  s0 -> s3 [81, 81] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s0 -> s4 [81, 81] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s0 -> s1 [82, 65535] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s1 -> s1 [0, 80] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8657 += 1 };
  s1 -> s3 [81, 81] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s1 -> s4 [81, 81] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s1 -> s1 [82, 65535] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s2 -> s1 [0, 80] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8657 += 1, R8594 += 1, R8595 += 1 };
  s2 -> s3 [81, 81] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s2 -> s4 [81, 81] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s2 -> s1 [82, 65535] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s3 -> s3 [0, 65535] { R8657 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8657 += 1, R8595 += 1, R7262 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8657 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8657 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 80] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s2 [0, 65535] { R8659 += 1, R8596 += 1, R8597 += 1 };
  s0 -> s0 [0, 65535] { R8658 += 1, R8659 += 1 };
  s0 -> s3 [81, 81] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s4 [81, 81] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s0 -> s1 [82, 65535] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [0, 80] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8659 += 1 };
  s1 -> s3 [81, 81] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s4 [81, 81] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s1 -> s1 [82, 65535] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [0, 80] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s2 [0, 65535] { R8659 += 1, R8596 += 1, R8597 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s4 [81, 81] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s2 -> s1 [82, 65535] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8659 += 1, R8597 += 1, R7264 += 1, R7265 += 1 };
  s3 -> s6 [0, 65535] { R8659 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8659 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8659 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 80] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s0 [0, 65535] { R8660 += 1, R8661 += 1 };
  s0 -> s2 [0, 65535] { R8661 += 1, R8598 += 1, R8599 += 1 };
  s0 -> s3 [81, 81] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s4 [81, 81] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s1 [82, 65535] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 80] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [0, 65535] { R8661 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s4 [81, 81] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s1 [82, 65535] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [0, 80] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8661 += 1, R8598 += 1, R8599 += 1 };
  s2 -> s3 [81, 81] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s4 [81, 81] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s2 -> s1 [82, 65535] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s3 [0, 65535] { R8661 += 1, R8599 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8661 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8661 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8661 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 80] { R8663 += 1, R8613 += 1 };
  s0 -> s0 [0, 65535] { R8662 += 1, R8663 += 1 };
  s0 -> s2 [0, 65535] { R8663 += 1, R8612 += 1, R8613 += 1 };
  s0 -> s3 [81, 81] { R8663 += 1, R8613 += 1 };
  s0 -> s1 [82, 65535] { R8663 += 1, R8613 += 1 };
  s1 -> s1 [0, 80] { R8663 += 1, R8613 += 1 };
  s1 -> s3 [81, 81] { R8663 += 1, R8613 += 1 };
  s1 -> s1 [82, 65535] { R8663 += 1, R8613 += 1 };
  s2 -> s1 [0, 80] { R8663 += 1, R8613 += 1 };
  s2 -> s2 [0, 65535] { R8663 += 1, R8612 += 1, R8613 += 1 };
  s2 -> s3 [81, 81] { R8663 += 1, R8613 += 1 };
  s2 -> s1 [82, 65535] { R8663 += 1, R8613 += 1 };
  s3 -> s3 [0, 65535] { R8663 += 1, R8613 += 1 };
  s3 -> s4 [0, 65535] { R8663 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8663 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8665 += 1, R8614 += 1, R8615 += 1 };
  s0 -> s2 [0, 65535] { R8665 += 1, R8615 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R8664 += 1, R8665 += 1 };
  s1 -> s1 [0, 65535] { R8665 += 1, R8614 += 1, R8615 += 1 };
  s1 -> s2 [0, 65535] { R8665 += 1, R8615 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8665 += 1, R8615 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R8665 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8665 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R8667 += 1, R8617 += 1 };
  s0 -> s2 [0, 65535] { R8667 += 1, R8616 += 1, R8617 += 1 };
  s0 -> s3 [0, 65535] { R8667 += 1, R8617 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R8666 += 1, R8667 += 1 };
  s0 -> s4 [81, 81] { R8667 += 1, R8617 += 1 };
  s0 -> s1 [82, 65535] { R8667 += 1, R8617 += 1 };
  s1 -> s1 [0, 80] { R8667 += 1, R8617 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8667 += 1 };
  s1 -> s4 [81, 81] { R8667 += 1, R8617 += 1 };
  s1 -> s1 [82, 65535] { R8667 += 1, R8617 += 1 };
  s2 -> s1 [0, 80] { R8667 += 1, R8617 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8667 += 1, R8616 += 1, R8617 += 1 };
  s2 -> s3 [0, 65535] { R8667 += 1, R8617 += 1, R9 += 1 };
  s2 -> s4 [81, 81] { R8667 += 1, R8617 += 1 };
  s2 -> s1 [82, 65535] { R8667 += 1, R8617 += 1 };
  s3 -> s1 [0, 80] { R8667 += 1, R8617 += 1 };
  s3 -> s5 [0, 65535] { R8667 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8667 += 1, R8617 += 1, R9 += 1 };
  s3 -> s4 [81, 81] { R8667 += 1, R8617 += 1 };
  s3 -> s1 [82, 65535] { R8667 += 1, R8617 += 1 };
  s4 -> s4 [0, 65535] { R8667 += 1, R8617 += 1 };
  s5 -> s5 [0, 65535] { R8667 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 80] { R8669 += 1, R8619 += 1, R8575 += 1 };
  s0 -> s0 [0, 65535] { R8668 += 1, R8669 += 1 };
  s0 -> s2 [0, 65535] { R8669 += 1, R8619 += 1, R8574 += 1, R8575 += 1 };
  s0 -> s3 [0, 65535] { R8669 += 1, R8618 += 1, R8619 += 1 };
  s0 -> s1 [82, 65535] { R8669 += 1, R8619 += 1, R8575 += 1 };
  s1 -> s1 [0, 80] { R8669 += 1, R8619 += 1, R8575 += 1 };
  s1 -> s5 [0, 65535] { R8669 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8669 += 1, R8619 += 1 };
  s1 -> s1 [82, 65535] { R8669 += 1, R8619 += 1, R8575 += 1 };
  s2 -> s1 [0, 80] { R8669 += 1, R8619 += 1, R8575 += 1 };
  s2 -> s5 [0, 65535] { R8669 += 1 };
  s2 -> s2 [0, 65535] { R8669 += 1, R8619 += 1, R8574 += 1, R8575 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8669 += 1, R8619 += 1, R8575 += 1 };
  s3 -> s1 [0, 80] { R8669 += 1, R8619 += 1, R8575 += 1 };
  s3 -> s2 [0, 65535] { R8669 += 1, R8619 += 1, R8574 += 1, R8575 += 1 };
  s3 -> s3 [0, 65535] { R8669 += 1, R8618 += 1, R8619 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R8669 += 1, R8619 += 1, R8575 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8669 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R8671 += 1, R8621 += 1, R8576 += 1, R8577 += 1 };
  s0 -> s0 [0, 65535] { R8670 += 1, R8671 += 1 };
  s0 -> s2 [0, 65535] { R8671 += 1, R8620 += 1, R8621 += 1 };
  s0 -> s3 [0, 65535] { R8671 += 1, R8621 += 1, R8577 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8671 += 1, R8621 += 1, R8576 += 1, R8577 += 1 };
  s1 -> s6 [0, 65535] { R8671 += 1 };
  s1 -> s3 [0, 65535] { R8671 += 1, R8621 += 1, R8577 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R8671 += 1, R8621 += 1, R8576 += 1, R8577 += 1 };
  s2 -> s2 [0, 65535] { R8671 += 1, R8620 += 1, R8621 += 1 };
  s2 -> s3 [0, 65535] { R8671 += 1, R8621 += 1, R8577 += 1, R20 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8671 += 1, R8621 += 1 };
  s3 -> s6 [0, 65535] { R8671 += 1 };
  s3 -> s3 [0, 65535] { R8671 += 1, R8621 += 1, R8577 += 1, R20 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8671 += 1, R8621 += 1 };
  s5 -> s6 [0, 65535] { R8671 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8671 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8673 += 1, R8622 += 1, R8623 += 1 };
  s0 -> s0 [0, 65535] { R8672 += 1, R8673 += 1 };
  s0 -> s2 [0, 65535] { R8673 += 1, R8623 += 1, R8578 += 1, R8579 += 1 };
  s0 -> s3 [0, 65535] { R8673 += 1, R8623 += 1, R8579 += 1 };
  s1 -> s1 [0, 65535] { R8673 += 1, R8622 += 1, R8623 += 1 };
  s1 -> s2 [0, 65535] { R8673 += 1, R8623 += 1, R8578 += 1, R8579 += 1 };
  s1 -> s3 [0, 65535] { R8673 += 1, R8623 += 1, R8579 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R8673 += 1 };
  s2 -> s2 [0, 65535] { R8673 += 1, R8623 += 1, R8578 += 1, R8579 += 1 };
  s2 -> s3 [0, 65535] { R8673 += 1, R8623 += 1, R8579 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R8673 += 1 };
  s3 -> s3 [0, 65535] { R8673 += 1, R8623 += 1, R8579 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8673 += 1, R8623 += 1 };
  s4 -> s4 [0, 65535] { R8673 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8673 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8673 += 1, R8623 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8675 += 1, R8625 += 1, R8581 += 1, R7287 += 1 };
  s0 -> s0 [0, 65535] { R8674 += 1, R8675 += 1 };
  s0 -> s2 [0, 65535] { R8675 += 1, R8625 += 1, R8580 += 1, R8581 += 1 };
  s0 -> s3 [0, 65535] { R8675 += 1, R8624 += 1, R8625 += 1 };
  s1 -> s5 [0, 65535] { R8675 += 1 };
  s1 -> s1 [0, 65535] { R8675 += 1, R8625 += 1, R8581 += 1, R7287 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8675 += 1, R8625 += 1 };
  s2 -> s5 [0, 65535] { R8675 += 1 };
  s2 -> s1 [0, 65535] { R8675 += 1, R8625 += 1, R8581 += 1, R7287 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8675 += 1, R8625 += 1, R8580 += 1, R8581 += 1 };
  s3 -> s1 [0, 65535] { R8675 += 1, R8625 += 1, R8581 += 1, R7287 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8675 += 1, R8625 += 1, R8580 += 1, R8581 += 1 };
  s3 -> s3 [0, 65535] { R8675 += 1, R8624 += 1, R8625 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8675 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8675 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8675 += 1, R8625 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 81] { R8677 += 1, R8627 += 1, R8583 += 1 };
  s0 -> s2 [0, 65535] { R8677 += 1, R8626 += 1, R8627 += 1 };
  s0 -> s3 [0, 65535] { R8677 += 1, R8627 += 1, R8582 += 1, R8583 += 1 };
  s0 -> s0 [0, 65535] { R8676 += 1, R8677 += 1 };
  s0 -> s1 [83, 65535] { R8677 += 1, R8627 += 1, R8583 += 1 };
  s1 -> s1 [0, 81] { R8677 += 1, R8627 += 1, R8583 += 1 };
  s1 -> s4 [0, 65535] { R8677 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8677 += 1, R8627 += 1 };
  s1 -> s1 [83, 65535] { R8677 += 1, R8627 += 1, R8583 += 1 };
  s2 -> s1 [0, 81] { R8677 += 1, R8627 += 1, R8583 += 1 };
  s2 -> s2 [0, 65535] { R8677 += 1, R8626 += 1, R8627 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8677 += 1, R8627 += 1, R8582 += 1, R8583 += 1 };
  s2 -> s1 [83, 65535] { R8677 += 1, R8627 += 1, R8583 += 1 };
  s3 -> s1 [0, 81] { R8677 += 1, R8627 += 1, R8583 += 1 };
  s3 -> s4 [0, 65535] { R8677 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8677 += 1, R8627 += 1, R8582 += 1, R8583 += 1 };
  s3 -> s1 [83, 65535] { R8677 += 1, R8627 += 1, R8583 += 1 };
  s4 -> s4 [0, 65535] { R8677 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 81] { R8679 += 1, R8629 += 1, R8585 += 1, R8441 += 1 };
  s0 -> s2 [0, 65535] { R8679 += 1, R8628 += 1, R8629 += 1 };
  s0 -> s3 [0, 65535] { R8679 += 1, R8629 += 1, R8584 += 1, R8585 += 1 };
  s0 -> s1 [0, 65535] { R8679 += 1, R8629 += 1, R8585 += 1 };
  s0 -> s0 [0, 65535] { R8678 += 1, R8679 += 1 };
  s0 -> s1 [83, 65535] { R8679 += 1, R8629 += 1, R8585 += 1, R8441 += 1 };
  s1 -> s1 [0, 81] { R8679 += 1, R8629 += 1, R8585 += 1, R8441 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8679 += 1, R8629 += 1 };
  s1 -> s1 [0, 65535] { R8679 += 1, R8629 += 1, R8585 += 1 };
  s1 -> s5 [0, 65535] { R8679 += 1 };
  s1 -> s1 [83, 65535] { R8679 += 1, R8629 += 1, R8585 += 1, R8441 += 1 };
  s2 -> s1 [0, 81] { R8679 += 1, R8629 += 1, R8585 += 1, R8441 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8679 += 1, R8628 += 1, R8629 += 1 };
  s2 -> s3 [0, 65535] { R8679 += 1, R8629 += 1, R8584 += 1, R8585 += 1 };
  s2 -> s1 [0, 65535] { R8679 += 1, R8629 += 1, R8585 += 1 };
  s2 -> s1 [83, 65535] { R8679 += 1, R8629 += 1, R8585 += 1, R8441 += 1 };
  s3 -> s1 [0, 81] { R8679 += 1, R8629 += 1, R8585 += 1, R8441 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8679 += 1, R8629 += 1, R8584 += 1, R8585 += 1 };
  s3 -> s1 [0, 65535] { R8679 += 1, R8629 += 1, R8585 += 1 };
  s3 -> s5 [0, 65535] { R8679 += 1 };
  s3 -> s1 [83, 65535] { R8679 += 1, R8629 += 1, R8585 += 1, R8441 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8679 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8679 += 1, R8629 += 1 };
  s6 -> s5 [0, 65535] { R8679 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s0 [0, 65535] { R8680 += 1, R8681 += 1 };
  s0 -> s1 [0, 65535] { R8681 += 1, R8631 += 1, R8586 += 1, R8587 += 1 };
  s0 -> s2 [0, 65535] { R8681 += 1, R8631 += 1, R8587 += 1, R8572 += 1, R8573 += 1 };
  s0 -> s3 [0, 65535] { R8681 += 1, R8630 += 1, R8631 += 1 };
  s0 -> s4 [0, 65535] { R8681 += 1, R8631 += 1, R8587 += 1 };
  s1 -> s5 [0, 65535] { R8681 += 1 };
  s1 -> s1 [0, 65535] { R8681 += 1, R8631 += 1, R8586 += 1, R8587 += 1 };
  s1 -> s2 [0, 65535] { R8681 += 1, R8631 += 1, R8587 += 1, R8572 += 1, R8573 += 1 };
  s1 -> s4 [0, 65535] { R8681 += 1, R8631 += 1, R8587 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s5 [0, 65535] { R8681 += 1 };
  s2 -> s2 [0, 65535] { R8681 += 1, R8631 += 1, R8587 += 1, R8572 += 1, R8573 += 1 };
  s2 -> s4 [0, 65535] { R8681 += 1, R8631 += 1, R8587 += 1 };
  s2 -> s6 [0, 65535] { R8681 += 1, R8631 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s1 [0, 65535] { R8681 += 1, R8631 += 1, R8586 += 1, R8587 += 1 };
  s3 -> s2 [0, 65535] { R8681 += 1, R8631 += 1, R8587 += 1, R8572 += 1, R8573 += 1 };
  s3 -> s3 [0, 65535] { R8681 += 1, R8630 += 1, R8631 += 1 };
  s3 -> s4 [0, 65535] { R8681 += 1, R8631 += 1, R8587 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R8681 += 1 };
  s4 -> s4 [0, 65535] { R8681 += 1, R8631 += 1, R8587 += 1 };
  s4 -> s6 [0, 65535] { R8681 += 1, R8631 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8681 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R8681 += 1 };
  s6 -> s6 [0, 65535] { R8681 += 1, R8631 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65535] { R8683 += 1, R8632 += 1, R8633 += 1 };
  s0 -> s2 [0, 65535] { R8683 += 1, R8633 += 1, R8601 += 1, R21 += 1 };
  s0 -> s3 [0, 65535] { R8683 += 1, R8633 += 1, R8600 += 1, R8601 += 1 };
  s0 -> s0 [0, 65535] { R8682 += 1, R8683 += 1 };
  s1 -> s1 [0, 65535] { R8683 += 1, R8632 += 1, R8633 += 1 };
  s1 -> s2 [0, 65535] { R8683 += 1, R8633 += 1, R8601 += 1, R21 += 1 };
  s1 -> s3 [0, 65535] { R8683 += 1, R8633 += 1, R8600 += 1, R8601 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R8683 += 1 };
  s2 -> s2 [0, 65535] { R8683 += 1, R8633 += 1, R8601 += 1, R21 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8683 += 1, R8633 += 1 };
  s3 -> s4 [0, 65535] { R8683 += 1 };
  s3 -> s2 [0, 65535] { R8683 += 1, R8633 += 1, R8601 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R8683 += 1, R8633 += 1, R8600 += 1, R8601 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8683 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8683 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8683 += 1, R8633 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s0 -> s2 [0, 65535] { R8685 += 1, R8635 += 1, R8602 += 1, R8603 += 1 };
  s0 -> s0 [0, 65535] { R8684 += 1, R8685 += 1 };
  s0 -> s3 [0, 65535] { R8685 += 1, R8634 += 1, R8635 += 1 };
  s0 -> s4 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s0 -> s5 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s0 -> s6 [82, 82] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s0 -> s1 [83, 65535] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s1 -> s1 [0, 80] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s1 -> s4 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s1 -> s5 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s1 -> s6 [82, 82] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s1 -> s1 [83, 65535] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s2 -> s1 [0, 80] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s2 -> s2 [0, 65535] { R8685 += 1, R8635 += 1, R8602 += 1, R8603 += 1 };
  s2 -> s4 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s2 -> s5 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s2 -> s6 [82, 82] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s2 -> s1 [83, 65535] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s3 -> s1 [0, 80] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s3 -> s2 [0, 65535] { R8685 += 1, R8635 += 1, R8602 += 1, R8603 += 1 };
  s3 -> s3 [0, 65535] { R8685 += 1, R8634 += 1, R8635 += 1 };
  s3 -> s4 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s3 -> s5 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s3 -> s6 [82, 82] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s3 -> s1 [83, 65535] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s5 -> s5 [0, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s5 -> s9 [82, 82] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s5 -> s5 [83, 65535] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s6 -> s6 [0, 80] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s6 -> s7 [0, 65535] { R8685 += 1 };
  s6 -> s6 [0, 65535] { R8685 += 1, R8635 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s6 -> s10 [81, 81] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s6 -> s6 [82, 65535] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s7 -> s7 [0, 65535] { R8685 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s7 [0, 65535] { R8685 += 1 };
  s9 -> s9 [0, 65535] { R8685 += 1, R8635 += 1, R8603 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s11 [0, 65535] { R8685 += 1, R8635 += 1 };
  s10 -> s7 [0, 65535] { R8685 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [0, 65535] { R8685 += 1, R8635 += 1 };
  s11 -> s7 [0, 65535] { R8685 += 1 };
  s11 -> s8 [0, 65535];
  s11 -> s11 [0, 65535] { R8685 += 1, R8635 += 1 };
  accepting s8, s9, s6, s7, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s0 -> s2 [0, 65535] { R8687 += 1, R8637 += 1, R8604 += 1, R8605 += 1 };
  s0 -> s0 [0, 65535] { R8686 += 1, R8687 += 1 };
  s0 -> s3 [0, 65535] { R8687 += 1, R8636 += 1, R8637 += 1 };
  s0 -> s4 [81, 81] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s0 -> s5 [81, 81] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s0 -> s1 [82, 65535] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s1 -> s1 [0, 80] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s1 -> s1 [0, 65535] { R8687 += 1, R8637 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8687 += 1 };
  s1 -> s4 [81, 81] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s1 -> s5 [81, 81] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s1 -> s1 [82, 65535] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s2 -> s1 [0, 80] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s2 -> s2 [0, 65535] { R8687 += 1, R8637 += 1, R8604 += 1, R8605 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R8687 += 1 };
  s2 -> s4 [81, 81] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s2 -> s5 [81, 81] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s2 -> s1 [82, 65535] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s3 -> s1 [0, 80] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s3 -> s2 [0, 65535] { R8687 += 1, R8637 += 1, R8604 += 1, R8605 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8687 += 1, R8636 += 1, R8637 += 1 };
  s3 -> s4 [81, 81] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s3 -> s5 [81, 81] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s3 -> s1 [82, 65535] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s4 -> s4 [0, 65535] { R8687 += 1, R8637 += 1, R8605 += 1, R7286 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s8 [0, 65535] { R8687 += 1, R8637 += 1 };
  s4 -> s7 [0, 65535] { R8687 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8687 += 1, R8637 += 1 };
  s5 -> s7 [0, 65535] { R8687 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8687 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8687 += 1, R8637 += 1 };
  s8 -> s7 [0, 65535] { R8687 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s0 -> s2 [0, 80] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s0 -> s3 [0, 65535] { R8689 += 1, R8639 += 1, R8606 += 1, R8607 += 1 };
  s0 -> s0 [0, 65535] { R8688 += 1, R8689 += 1 };
  s0 -> s4 [0, 65535] { R8689 += 1, R8638 += 1, R8639 += 1 };
  s0 -> s5 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s0 -> s6 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s0 -> s7 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s0 -> s8 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s0 -> s1 [82, 65535] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s0 -> s2 [83, 65535] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s1 -> s1 [0, 80] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s1 -> s2 [0, 80] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s1 -> s5 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s1 -> s6 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s1 -> s7 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s1 -> s8 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s1 -> s1 [82, 65535] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s1 -> s2 [83, 65535] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s2 -> s2 [0, 80] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s10 [0, 65535] { R8689 += 1 };
  s2 -> s2 [0, 65535] { R8689 += 1, R8639 += 1 };
  s2 -> s5 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s2 -> s8 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s2 -> s2 [83, 65535] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s3 -> s1 [0, 80] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s3 -> s2 [0, 80] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s3 -> s3 [0, 65535] { R8689 += 1, R8639 += 1, R8606 += 1, R8607 += 1 };
  s3 -> s5 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s3 -> s6 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s3 -> s7 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s3 -> s8 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s3 -> s1 [82, 65535] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s3 -> s2 [83, 65535] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s4 -> s1 [0, 80] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s4 -> s2 [0, 80] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s4 -> s3 [0, 65535] { R8689 += 1, R8639 += 1, R8606 += 1, R8607 += 1 };
  s4 -> s4 [0, 65535] { R8689 += 1, R8638 += 1, R8639 += 1 };
  s4 -> s5 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s4 -> s6 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s4 -> s7 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s4 -> s8 [81, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s4 -> s1 [82, 65535] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s4 -> s2 [83, 65535] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s5 -> s5 [0, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s5 -> s5 [0, 65535] { R8689 += 1, R8639 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s10 [0, 65535] { R8689 += 1 };
  s5 -> s5 [83, 65535] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s7 -> s5 [0, 81] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s7 -> s7 [0, 65535] { R8689 += 1, R8639 += 1, R8607 += 1, R8054 += 1 };
  s7 -> s5 [83, 65535] { R8689 += 1, R8639 += 1, R8607 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8689 += 1 };
  s8 -> s8 [0, 65535] { R8689 += 1, R8639 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8689 += 1 };
  accepting s8, s5, s2, s9, s10;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s0 -> s2 [0, 80] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s0 -> s3 [0, 65535] { R8691 += 1, R8641 += 1, R8608 += 1, R8609 += 1 };
  s0 -> s4 [0, 65535] { R8691 += 1, R8640 += 1, R8641 += 1 };
  s0 -> s0 [0, 65535] { R8690 += 1, R8691 += 1 };
  s0 -> s5 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s0 -> s6 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s0 -> s7 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s0 -> s8 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s0 -> s2 [82, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s0 -> s1 [83, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s1 -> s1 [0, 80] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s1 -> s9 [0, 65535] { R8691 += 1 };
  s1 -> s1 [0, 65535] { R8691 += 1, R8641 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s5 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1 };
  s1 -> s6 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1 };
  s1 -> s1 [82, 65535] { R8691 += 1, R8641 += 1, R8609 += 1 };
  s1 -> s1 [83, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s2 -> s1 [0, 80] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s2 -> s2 [0, 80] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s2 -> s5 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s2 -> s6 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s2 -> s7 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s2 -> s8 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s2 -> s2 [82, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s2 -> s1 [83, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s3 -> s1 [0, 80] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s3 -> s2 [0, 80] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s3 -> s3 [0, 65535] { R8691 += 1, R8641 += 1, R8608 += 1, R8609 += 1 };
  s3 -> s5 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s3 -> s6 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s3 -> s7 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s3 -> s8 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s3 -> s2 [82, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s3 -> s1 [83, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s4 -> s1 [0, 80] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s4 -> s2 [0, 80] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s4 -> s3 [0, 65535] { R8691 += 1, R8641 += 1, R8608 += 1, R8609 += 1 };
  s4 -> s4 [0, 65535] { R8691 += 1, R8640 += 1, R8641 += 1 };
  s4 -> s5 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s4 -> s6 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s4 -> s7 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s4 -> s8 [81, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s4 -> s2 [82, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s4 -> s1 [83, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s5 -> s9 [0, 65535] { R8691 += 1 };
  s5 -> s5 [0, 65535] { R8691 += 1, R8641 += 1 };
  s5 -> s11 [0, 65535];
  s6 -> s6 [0, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s6 -> s9 [0, 65535] { R8691 += 1 };
  s6 -> s10 [0, 65535] { R8691 += 1, R8641 += 1 };
  s6 -> s6 [0, 65535] { R8691 += 1, R8641 += 1, R8609 += 1 };
  s6 -> s11 [0, 65535];
  s6 -> s6 [83, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s7 -> s6 [0, 81] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s7 -> s7 [0, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8438 += 1, R8439 += 1 };
  s7 -> s6 [83, 65535] { R8691 += 1, R8641 += 1, R8609 += 1, R8439 += 1 };
  s9 -> s9 [0, 65535] { R8691 += 1 };
  s9 -> s11 [0, 65535];
  s10 -> s9 [0, 65535] { R8691 += 1 };
  s10 -> s10 [0, 65535] { R8691 += 1, R8641 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s5, s9, s6, s1, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s0 -> s2 [0, 80] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s0 -> s3 [0, 65535] { R8693 += 1, R8642 += 1, R8643 += 1 };
  s0 -> s4 [0, 65535] { R8693 += 1, R8643 += 1, R8610 += 1, R8611 += 1 };
  s0 -> s0 [0, 65535] { R8692 += 1, R8693 += 1 };
  s0 -> s5 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s0 -> s6 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s0 -> s7 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s0 -> s8 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s0 -> s1 [82, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s0 -> s2 [82, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s1 -> s1 [0, 80] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s1 -> s2 [0, 80] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s1 -> s5 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s1 -> s6 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s1 -> s7 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s1 -> s8 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s1 -> s1 [82, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s1 -> s2 [82, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s2 -> s2 [0, 80] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s2 -> s9 [0, 65535] { R8693 += 1 };
  s2 -> s10 [0, 65535];
  s2 -> s2 [0, 65535] { R8693 += 1, R8643 += 1 };
  s2 -> s7 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s2 -> s8 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s2 -> s2 [82, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s3 -> s1 [0, 80] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s3 -> s2 [0, 80] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s3 -> s3 [0, 65535] { R8693 += 1, R8642 += 1, R8643 += 1 };
  s3 -> s4 [0, 65535] { R8693 += 1, R8643 += 1, R8610 += 1, R8611 += 1 };
  s3 -> s5 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s3 -> s6 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s3 -> s7 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s3 -> s8 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s3 -> s1 [82, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s3 -> s2 [82, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s4 -> s1 [0, 80] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s4 -> s2 [0, 80] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s4 -> s4 [0, 65535] { R8693 += 1, R8643 += 1, R8610 += 1, R8611 += 1 };
  s4 -> s5 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s4 -> s6 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s4 -> s7 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s4 -> s8 [81, 81] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s4 -> s1 [82, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s4 -> s2 [82, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s5 -> s5 [0, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8568 += 1, R8569 += 1 };
  s5 -> s7 [0, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s7 -> s11 [0, 65535] { R8693 += 1, R8643 += 1 };
  s7 -> s9 [0, 65535] { R8693 += 1 };
  s7 -> s7 [0, 65535] { R8693 += 1, R8643 += 1, R8611 += 1, R8569 += 1, R8570 += 1 };
  s7 -> s10 [0, 65535];
  s8 -> s9 [0, 65535] { R8693 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R8693 += 1, R8643 += 1 };
  s9 -> s9 [0, 65535] { R8693 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8693 += 1, R8643 += 1 };
  s11 -> s9 [0, 65535] { R8693 += 1 };
  s11 -> s10 [0, 65535];
  accepting s8, s2, s9, s7, s10, s11;
};
};
synchronised {  // Automata constraining P10
automaton P10_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R2 = R8643 && R3 = R8693 && R24 - R8693 = -1 && R25 = R8693 && R26 - R8693 = -1 && R27 = R8693 && R28 = 0 && R29 = 1 && R30 = 0 && R31 = 1 && R8602 = 0 && R8603 = 0 && R8606 = 0 && R8607 = 0 && R8608 = 0 && R8609 = 0 && R8610 = 0 && R8611 = 0 && R8612 = 0 && R8613 = R8643 && R8634 = 0 && R8635 = R8643 && R8638 = 0 && R8639 = R8643 && R8640 = 0 && R8641 = R8643 && R8642 = 0 && R8644 = 0 && R8645 = R8693 && R8646 = 0 && R8647 = R8693 && R8648 = 0 && R8649 = R8693 && R8650 = 0 && R8651 = R8693 && R8652 = 0 && R8653 = R8693 && R8654 = 0 && R8655 = R8693 && R8656 = 0 && R8657 = R8693 && R8658 = 0 && R8659 = R8693 && R8660 = 0 && R8661 = R8693 && R8662 = 0 && R8663 = R8693 && R8664 = 0 && R8665 = R8693 && R8666 = 0 && R8667 = R8693 && R8668 = 0 && R8669 = R8693 && R8670 = 0 && R8671 = R8693 && R8672 = 0 && R8673 = R8693 && R8674 = 0 && R8675 = R8693 && R8676 = 0 && R8677 = R8693 && R8678 = 0 && R8679 = R8693 && R8680 = 0 && R8681 = R8693 && R8682 = 0 && R8683 = R8693 && R8684 = 0 && R8685 = R8693 && R8686 = 0 && R8687 = R8693 && R8688 = 0 && R8689 = R8693 && R8690 = 0 && R8691 = R8693 && R8692 = 0 && -1 < R1 && R9 < 1 && R12 < 1 && R15 < 1 && R16 < 1 && -1*R7287 + -1*R7286 - R7260 - R36 < 1 && R38 + R7262 + R8055 + R8054 < 1 && -1 < R8643 && 0 < R8693 && (R1 != 0 || R20 = 0 || (R8574 = 0 && R8575 = 0)) && (R1 != 0 || R20 = 0 || (R8576 = 0 && R8577 = 0)) && (R1 != 0 || R20 = 0 || (R8578 = 0 && R8579 = 0)) && (R1 != 0 || R20 = 0 || (R8580 = 0 && R8581 = 0)) && (R1 != 0 || R20 = 0 || (R8582 = 0 && R8583 = 0)) && (R1 != 0 || R20 = 0 || (R8584 = 0 && R8585 = 0)) && (R1 != 0 || R20 = 0 || (R8586 = 0 && R8587 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8573 + R8570 = 0 || (R40 + R7264 + R8440 + R8438 = 0 && R41 + R7265 + R8441 + R8439 = 0)) && (R36 + R7260 + R7287 + R7286 != 0 || R46 + R7270 + R8573 + R8570 = 0 || (R44 + R7268 + R8571 + R8568 = 0 && R45 + R7269 + R8572 + R8569 = 0)) && (R40 + R7264 + R8440 + R8438 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8441 + -1*R8439 - R7265 - R41 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8571 + R8568 != 0 || R36 + R7260 + R7287 + R7286 + -1*R8572 + -1*R8569 - R7269 - R45 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8574 != 0 || R1 = R8575 || R1 < 1) && (R8576 != 0 || R1 = R8577 || R1 < 1) && (R8578 != 0 || R1 = R8579 || R1 < 1) && (R8580 != 0 || R1 = R8581 || R1 < 1) && (R8582 != 0 || R1 = R8583 || R1 < 1) && (R8584 != 0 || R1 = R8585 || R1 < 1) && (R8586 != 0 || R1 = R8587 || R1 < 1) && (R8614 != 0 || R8615 = R8643 || (R1 = 0 && R8643 = 0)) && (R8616 != 0 || R8617 = R8643 || (R1 = 0 && R8643 = 0)) && (R8618 != 0 || R8619 = R8643 || (R1 = 0 && R8643 = 0)) && (R8620 != 0 || R8621 = R8643 || (R1 = 0 && R8643 = 0)) && (R8622 != 0 || R8623 = R8643 || (R1 = 0 && R8643 = 0)) && (R8624 != 0 || R8625 = R8643 || (R1 = 0 && R8643 = 0)) && (R8626 != 0 || R8627 = R8643 || (R1 = 0 && R8643 = 0)) && (R8628 != 0 || R8629 = R8643 || (R1 = 0 && R8643 = 0)) && (R8630 != 0 || R8631 = R8643 || (R1 = 0 && R8643 = 0)) && (R8632 != 0 || R8633 = R8643 || (R1 = 0 && R8643 = 0)) && (R8636 != 0 || R8637 = R8643 || (R1 = 0 && R8643 = 0)) && (R21 = 0 || (R8600 = 0 && R8601 = 0)) && (R21 = 0 || (R8604 = 0 && R8605 = 0)) && (R22 = 0 || (R8588 = 0 && R8589 = 0)) && (R22 = 0 || (R8590 = 0 && R8591 = 0)) && (R22 = 0 || (R8592 = 0 && R8593 = 0)) && (R22 = 0 || (R8594 = 0 && R8595 = 0)) && (R22 = 0 || (R8596 = 0 && R8597 = 0)) && (R22 = 0 || (R8598 = 0 && R8599 = 0)) && (R23 = 0 || (R7274 = 0 && R7275 = 0)) && (R23 = 0 || (R7276 = 0 && R7277 = 0)) && (R23 = 0 || (R7278 = 0 && R7279 = 0)) && (R23 = 0 || (R7280 = 0 && R7281 = 0)) && (R23 = 0 || (R7282 = 0 && R7283 = 0)) && (R23 = 0 || (R7284 = 0 && R7285 = 0)) && (R40 + R7264 + R8440 + R8438 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R44 + R7268 + R8571 + R8568 = 0 || R36 + R7260 + R7287 + R7286 < 1) && (R8574 = 0 || R1 < 1) && (R8576 = 0 || R1 < 1) && (R8578 = 0 || R1 < 1) && (R8580 = 0 || R1 < 1) && (R8582 = 0 || R1 < 1) && (R8584 = 0 || R1 < 1) && (R8586 = 0 || R1 < 1) && (R8614 = 0 || (R1 = 0 && R8643 = 0)) && (R8616 = 0 || (R1 = 0 && R8643 = 0)) && (R8618 = 0 || (R1 = 0 && R8643 = 0)) && (R8620 = 0 || (R1 = 0 && R8643 = 0)) && (R8622 = 0 || (R1 = 0 && R8643 = 0)) && (R8624 = 0 || (R1 = 0 && R8643 = 0)) && (R8626 = 0 || (R1 = 0 && R8643 = 0)) && (R8628 = 0 || (R1 = 0 && R8643 = 0)) && (R8630 = 0 || (R1 = 0 && R8643 = 0)) && (R8632 = 0 || (R1 = 0 && R8643 = 0)) && (R8636 = 0 || (R1 = 0 && R8643 = 0));
// End of Parikh automata intersection problem
