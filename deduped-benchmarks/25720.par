// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10252, R10253, R10254, R10255, R10256, R10257, R10258, R10259, R10260, R10261, R10366, R10367, R10368, R10369, R10370, R10371, R10372, R10373, R10374, R10375, R10376, R10377, R10378, R10379, R10380, R10381, R10382, R10383, R10384, R10385, R10386, R10387, R10388, R10389, R10390, R10391, R10392, R10393, R10394, R10395, R10396, R10397, R10398, R10399, R10400, R10401, R10402, R10403, R10404, R10405, R10406, R10407, R10408, R10409, R10410, R10411, R10412, R10413, R10414, R10415, R10416, R10417, R10418, R10419, R10420, R10421, R10422, R10423, R10424, R10425, R10426, R10427, R10428, R10429, R10430, R10431, R10432, R10433, R10434, R10435, R10436, R10437, R10438, R10439, R10440, R10441, R10442, R10443, R10444, R10445, R10446, R10447, R10448, R10449, R10450, R10451, R10452, R10453, R10454, R10455, R10456, R10457, R10458, R10459, R10460, R10461, R10462, R10463, R10464, R10465, R10466, R10467, R10468, R10469, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10391 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R10390 += 1, R10391 += 1 };
  s1 -> s1 [0, 65535] { R10391 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R10393 += 1 };
  s0 -> s0 [0, 65535] { R10392 += 1, R10393 += 1 };
  s0 -> s2 [73, 73] { R10393 += 1 };
  s0 -> s3 [73, 73] { R10393 += 1 };
  s0 -> s1 [78, 65535] { R10393 += 1 };
  s1 -> s1 [0, 72] { R10393 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10393 += 1 };
  s1 -> s3 [73, 73] { R10393 += 1 };
  s1 -> s1 [78, 65535] { R10393 += 1 };
  s2 -> s2 [0, 73] { R10393 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R10393 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R10395 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R10394 += 1, R10395 += 1 };
  s0 -> s2 [73, 73] { R10395 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R10395 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R10395 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R10395 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10395 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R10395 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R10395 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10395 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R10397 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10396 += 1, R10397 += 1 };
  s0 -> s2 [73, 73] { R10397 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R10397 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R10397 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R10397 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10397 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R10397 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R10397 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10397 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R10399 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10398 += 1, R10399 += 1 };
  s0 -> s2 [73, 73] { R10399 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R10399 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R10399 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R10399 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10399 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R10399 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R10399 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10399 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R10401 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10400 += 1, R10401 += 1 };
  s0 -> s2 [73, 73] { R10401 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R10401 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R10401 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R10401 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10401 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R10401 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R10401 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R10401 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R10403 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R10402 += 1, R10403 += 1 };
  s0 -> s2 [73, 73] { R10403 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R10403 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R10403 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R10403 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10403 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R10403 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R10403 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10403 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R10405 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10404 += 1, R10405 += 1 };
  s0 -> s2 [73, 73] { R10405 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R10405 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R10405 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R10405 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10405 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R10405 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R10405 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10405 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R10407 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R10406 += 1, R10407 += 1 };
  s0 -> s2 [73, 73] { R10407 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R10407 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R10407 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R10407 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10407 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R10407 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R10407 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R10407 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R10427 += 1 };
  s0 -> s0 [0, 65535] { R10426 += 1, R10427 += 1 };
  s0 -> s2 [73, 73] { R10427 += 1 };
  s0 -> s1 [74, 65535] { R10427 += 1 };
  s1 -> s1 [0, 72] { R10427 += 1 };
  s1 -> s2 [73, 73] { R10427 += 1 };
  s1 -> s1 [74, 65535] { R10427 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10427 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10428 += 1, R10429 += 1 };
  s0 -> s1 [0, 65535] { R10429 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10429 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R10431 += 1 };
  s0 -> s0 [0, 65535] { R10430 += 1, R10431 += 1 };
  s0 -> s2 [0, 65535] { R10431 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R10431 += 1 };
  s0 -> s1 [74, 65535] { R10431 += 1 };
  s1 -> s1 [0, 72] { R10431 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R10431 += 1 };
  s1 -> s1 [74, 65535] { R10431 += 1 };
  s2 -> s1 [0, 72] { R10431 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10431 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R10431 += 1 };
  s2 -> s1 [74, 65535] { R10431 += 1 };
  s3 -> s3 [0, 65535] { R10431 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R10433 += 1, R10371 += 1 };
  s0 -> s2 [0, 65535] { R10433 += 1, R10370 += 1, R10371 += 1 };
  s0 -> s0 [0, 65535] { R10432 += 1, R10433 += 1 };
  s0 -> s1 [74, 65535] { R10433 += 1, R10371 += 1 };
  s1 -> s1 [0, 72] { R10433 += 1, R10371 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10433 += 1 };
  s1 -> s1 [74, 65535] { R10433 += 1, R10371 += 1 };
  s2 -> s1 [0, 72] { R10433 += 1, R10371 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10433 += 1, R10370 += 1, R10371 += 1 };
  s2 -> s1 [74, 65535] { R10433 += 1, R10371 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10435 += 1, R10372 += 1, R10373 += 1 };
  s0 -> s2 [0, 65535] { R10435 += 1, R10373 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R10434 += 1, R10435 += 1 };
  s1 -> s1 [0, 65535] { R10435 += 1, R10372 += 1, R10373 += 1 };
  s1 -> s2 [0, 65535] { R10435 += 1, R10373 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10435 += 1, R10373 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R10435 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10435 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R10437 += 1, R10375 += 1 };
  s0 -> s2 [0, 65535] { R10437 += 1, R10374 += 1, R10375 += 1 };
  s0 -> s0 [0, 65535] { R10436 += 1, R10437 += 1 };
  s0 -> s1 [77, 65535] { R10437 += 1, R10375 += 1 };
  s1 -> s1 [0, 73] { R10437 += 1, R10375 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10437 += 1 };
  s1 -> s1 [77, 65535] { R10437 += 1, R10375 += 1 };
  s2 -> s1 [0, 73] { R10437 += 1, R10375 += 1 };
  s2 -> s2 [0, 65535] { R10437 += 1, R10374 += 1, R10375 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R10437 += 1, R10375 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10439 += 1, R10377 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R10438 += 1, R10439 += 1 };
  s0 -> s2 [0, 65535] { R10439 += 1, R10376 += 1, R10377 += 1 };
  s1 -> s1 [0, 65535] { R10439 += 1, R10377 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10439 += 1 };
  s2 -> s1 [0, 65535] { R10439 += 1, R10377 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10439 += 1, R10376 += 1, R10377 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10439 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R10441 += 1, R10379 += 1 };
  s0 -> s2 [0, 65535] { R10441 += 1, R10379 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R10440 += 1, R10441 += 1 };
  s0 -> s3 [0, 65535] { R10441 += 1, R10378 += 1, R10379 += 1 };
  s0 -> s1 [78, 65535] { R10441 += 1, R10379 += 1 };
  s1 -> s1 [0, 76] { R10441 += 1, R10379 += 1 };
  s1 -> s1 [0, 65535] { R10441 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R10441 += 1, R10379 += 1 };
  s2 -> s1 [0, 76] { R10441 += 1, R10379 += 1 };
  s2 -> s2 [0, 65535] { R10441 += 1, R10379 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10441 += 1 };
  s2 -> s1 [78, 65535] { R10441 += 1, R10379 += 1 };
  s3 -> s1 [0, 76] { R10441 += 1, R10379 += 1 };
  s3 -> s2 [0, 65535] { R10441 += 1, R10379 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10441 += 1, R10378 += 1, R10379 += 1 };
  s3 -> s1 [78, 65535] { R10441 += 1, R10379 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10441 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R10443 += 1, R10381 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R10443 += 1, R10380 += 1, R10381 += 1 };
  s0 -> s3 [0, 65535] { R10443 += 1, R10381 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R10442 += 1, R10443 += 1 };
  s0 -> s1 [78, 65535] { R10443 += 1, R10381 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R10443 += 1, R10381 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R10443 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10443 += 1, R10381 += 1 };
  s1 -> s1 [78, 65535] { R10443 += 1, R10381 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R10443 += 1, R10381 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R10443 += 1, R10380 += 1, R10381 += 1 };
  s2 -> s3 [0, 65535] { R10443 += 1, R10381 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R10443 += 1, R10381 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R10443 += 1, R10381 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R10443 += 1, R10381 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R10443 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R10443 += 1, R10381 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R10443 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10445 += 1, R10382 += 1, R10383 += 1 };
  s0 -> s2 [0, 65535] { R10445 += 1, R10383 += 1 };
  s0 -> s0 [0, 65535] { R10444 += 1, R10445 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10445 += 1, R10382 += 1, R10383 += 1 };
  s1 -> s2 [0, 65535] { R10445 += 1, R10383 += 1 };
  s2 -> s3 [0, 65535] { R10445 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10445 += 1, R10383 += 1 };
  s3 -> s3 [0, 65535] { R10445 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s0 -> s2 [0, 65535] { R10447 += 1, R10384 += 1, R10385 += 1 };
  s0 -> s0 [0, 65535] { R10446 += 1, R10447 += 1 };
  s0 -> s3 [83, 83] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s0 -> s1 [84, 65535] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s1 -> s1 [0, 77] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s1 -> s3 [83, 83] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s1 -> s1 [84, 65535] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s2 -> s1 [0, 77] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R10447 += 1, R10384 += 1, R10385 += 1 };
  s2 -> s3 [83, 83] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s2 -> s1 [84, 65535] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s3 -> s3 [0, 77] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s3 -> s4 [0, 65535] { R10447 += 1 };
  s3 -> s3 [0, 65535] { R10447 += 1, R10385 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [83, 65535] { R10447 += 1, R10385 += 1, R10255 += 1 };
  s4 -> s4 [0, 65535] { R10447 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10449 += 1, R10386 += 1, R10387 += 1 };
  s0 -> s0 [0, 65535] { R10448 += 1, R10449 += 1 };
  s0 -> s2 [0, 65535] { R10449 += 1, R10387 += 1, R10259 += 1, R10260 += 1 };
  s0 -> s3 [0, 65535] { R10449 += 1, R10387 += 1, R10260 += 1, R10261 += 1 };
  s1 -> s1 [0, 65535] { R10449 += 1, R10386 += 1, R10387 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R10449 += 1, R10387 += 1, R10259 += 1, R10260 += 1 };
  s1 -> s3 [0, 65535] { R10449 += 1, R10387 += 1, R10260 += 1, R10261 += 1 };
  s2 -> s4 [0, 65535] { R10449 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10449 += 1, R10387 += 1, R10259 += 1, R10260 += 1 };
  s2 -> s3 [0, 65535] { R10449 += 1, R10387 += 1, R10260 += 1, R10261 += 1 };
  s3 -> s4 [0, 65535] { R10449 += 1 };
  s3 -> s5 [0, 65535] { R10449 += 1, R10387 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10449 += 1, R10387 += 1, R10260 += 1, R10261 += 1 };
  s4 -> s4 [0, 65535] { R10449 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R10449 += 1 };
  s5 -> s5 [0, 65535] { R10449 += 1, R10387 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s0 -> s0 [0, 65535] { R10450 += 1, R10451 += 1 };
  s0 -> s1 [0, 65535] { R10451 += 1, R10389 += 1 };
  s0 -> s2 [0, 65535] { R10451 += 1, R10388 += 1, R10389 += 1 };
  s0 -> s3 [77, 77] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s0 -> s4 [77, 77] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s0 -> s1 [84, 65535] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s1 -> s1 [0, 76] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s1 -> s5 [0, 65535] { R10451 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10451 += 1, R10389 += 1 };
  s1 -> s3 [77, 77] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s1 -> s4 [77, 77] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s1 -> s1 [84, 65535] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s2 -> s1 [0, 76] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R10451 += 1, R10389 += 1 };
  s2 -> s2 [0, 65535] { R10451 += 1, R10388 += 1, R10389 += 1 };
  s2 -> s3 [77, 77] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s2 -> s4 [77, 77] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s2 -> s1 [84, 65535] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s3 -> s5 [0, 65535] { R10451 += 1 };
  s3 -> s3 [0, 65535] { R10451 += 1, R10389 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 77] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s4 -> s5 [0, 65535] { R10451 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10451 += 1, R10389 += 1 };
  s4 -> s4 [84, 65535] { R10451 += 1, R10389 += 1, R10369 += 1 };
  s5 -> s5 [0, 65535] { R10451 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10452 += 1, R10453 += 1 };
  s0 -> s1 [0, 65535] { R10453 += 1, R10408 += 1, R10409 += 1 };
  s0 -> s2 [0, 65535] { R10453 += 1, R10409 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10453 += 1, R10408 += 1, R10409 += 1 };
  s1 -> s2 [0, 65535] { R10453 += 1, R10409 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10453 += 1 };
  s2 -> s2 [0, 65535] { R10453 += 1, R10409 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10453 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R10455 += 1, R10411 += 1 };
  s0 -> s0 [0, 65535] { R10454 += 1, R10455 += 1 };
  s0 -> s2 [0, 65535] { R10455 += 1, R10410 += 1, R10411 += 1 };
  s0 -> s3 [73, 73] { R10455 += 1, R10411 += 1 };
  s0 -> s4 [73, 73] { R10455 += 1, R10411 += 1 };
  s0 -> s5 [77, 77] { R10455 += 1, R10411 += 1 };
  s0 -> s1 [78, 65535] { R10455 += 1, R10411 += 1 };
  s1 -> s1 [0, 72] { R10455 += 1, R10411 += 1 };
  s1 -> s3 [73, 73] { R10455 += 1, R10411 += 1 };
  s1 -> s4 [73, 73] { R10455 += 1, R10411 += 1 };
  s1 -> s5 [77, 77] { R10455 += 1, R10411 += 1 };
  s1 -> s1 [78, 65535] { R10455 += 1, R10411 += 1 };
  s2 -> s1 [0, 72] { R10455 += 1, R10411 += 1 };
  s2 -> s2 [0, 65535] { R10455 += 1, R10410 += 1, R10411 += 1 };
  s2 -> s3 [73, 73] { R10455 += 1, R10411 += 1 };
  s2 -> s4 [73, 73] { R10455 += 1, R10411 += 1 };
  s2 -> s5 [77, 77] { R10455 += 1, R10411 += 1 };
  s2 -> s1 [78, 65535] { R10455 += 1, R10411 += 1 };
  s3 -> s3 [0, 73] { R10455 += 1, R10411 += 1 };
  s3 -> s8 [77, 77] { R10455 += 1, R10411 += 1 };
  s3 -> s3 [78, 65535] { R10455 += 1, R10411 += 1 };
  s5 -> s5 [0, 72] { R10455 += 1, R10411 += 1 };
  s5 -> s5 [0, 65535] { R10455 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R10455 += 1, R10411 += 1 };
  s5 -> s8 [73, 73] { R10455 += 1, R10411 += 1 };
  s5 -> s5 [77, 65535] { R10455 += 1, R10411 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10455 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R10455 += 1, R10411 += 1 };
  s8 -> s8 [0, 65535] { R10455 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [77, 65535] { R10455 += 1, R10411 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R10457 += 1, R10413 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10456 += 1, R10457 += 1 };
  s0 -> s2 [0, 65535] { R10457 += 1, R10412 += 1, R10413 += 1 };
  s0 -> s3 [73, 73] { R10457 += 1, R10413 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R10457 += 1, R10413 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R10457 += 1, R10413 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R10457 += 1, R10413 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10457 += 1 };
  s1 -> s3 [73, 73] { R10457 += 1, R10413 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R10457 += 1, R10413 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R10457 += 1, R10413 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R10457 += 1, R10413 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10457 += 1, R10412 += 1, R10413 += 1 };
  s2 -> s3 [73, 73] { R10457 += 1, R10413 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R10457 += 1, R10413 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R10457 += 1, R10413 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R10457 += 1, R10413 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10457 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10457 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10457 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R10459 += 1, R10415 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R10459 += 1, R10414 += 1, R10415 += 1 };
  s0 -> s0 [0, 65535] { R10458 += 1, R10459 += 1 };
  s0 -> s3 [73, 73] { R10459 += 1, R10415 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R10459 += 1, R10415 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R10459 += 1, R10415 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R10459 += 1, R10415 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10459 += 1 };
  s1 -> s3 [73, 73] { R10459 += 1, R10415 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R10459 += 1, R10415 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R10459 += 1, R10415 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R10459 += 1, R10415 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10459 += 1, R10414 += 1, R10415 += 1 };
  s2 -> s3 [73, 73] { R10459 += 1, R10415 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R10459 += 1, R10415 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R10459 += 1, R10415 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10459 += 1, R10415 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R10459 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10459 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10459 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10460 += 1, R10461 += 1 };
  s0 -> s2 [0, 65535] { R10461 += 1, R10416 += 1, R10417 += 1 };
  s0 -> s3 [73, 73] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10461 += 1 };
  s1 -> s3 [73, 73] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10461 += 1, R10416 += 1, R10417 += 1 };
  s2 -> s3 [73, 73] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10461 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10461 += 1, R10417 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R10461 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10461 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 72] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s3 [0, 65535] { R10463 += 1, R10418 += 1, R10419 += 1 };
  s0 -> s0 [0, 65535] { R10462 += 1, R10463 += 1 };
  s0 -> s4 [73, 73] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [73, 73] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [73, 73] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s7 [73, 73] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [74, 65535] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [74, 65535] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 72] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 72] { R10463 += 1, R10419 += 1 };
  s1 -> s12 [73, 73] { R10463 += 1, R10419 += 1 };
  s1 -> s4 [73, 73] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s8 [73, 73] { R10463 += 1, R10419 += 1 };
  s1 -> s6 [73, 73] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [74, 65535] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [74, 65535] { R10463 += 1, R10419 += 1 };
  s2 -> s1 [0, 72] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 72] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [73, 73] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [73, 73] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s6 [73, 73] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s7 [73, 73] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s1 [74, 65535] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [74, 65535] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 72] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 72] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R10463 += 1, R10418 += 1, R10419 += 1 };
  s3 -> s4 [73, 73] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [73, 73] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [73, 73] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s7 [73, 73] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [74, 65535] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [74, 65535] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s4 [0, 65535] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s8 [0, 65535] { R10463 += 1, R10419 += 1 };
  s7 -> s4 [0, 65535] { R10463 += 1, R10419 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R10463 += 1, R10419 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535] { R10463 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R10463 += 1, R10419 += 1 };
  s9 -> s9 [0, 65535] { R10463 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R10463 += 1, R10419 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10463 += 1 };
  s11 -> s12 [73, 73] { R10463 += 1, R10419 += 1 };
  s11 -> s8 [73, 73] { R10463 += 1, R10419 += 1 };
  s11 -> s11 [74, 65535] { R10463 += 1, R10419 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R10463 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s0 -> s2 [0, 72] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s0 [0, 65535] { R10464 += 1, R10465 += 1 };
  s0 -> s3 [0, 65535] { R10465 += 1, R10420 += 1, R10421 += 1 };
  s0 -> s4 [73, 73] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s0 -> s5 [73, 73] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s0 -> s6 [73, 73] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s7 [73, 73] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [74, 77] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s0 -> s2 [74, 65535] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [84, 65535] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s1 -> s1 [0, 72] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s1 -> s1 [0, 65535] { R10465 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s1 -> s5 [73, 73] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s1 -> s1 [74, 77] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s1 -> s1 [84, 65535] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s2 -> s1 [0, 72] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s2 -> s2 [0, 72] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [73, 73] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s2 -> s5 [73, 73] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s2 -> s6 [73, 73] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s7 [73, 73] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [74, 77] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s2 -> s2 [74, 65535] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [84, 65535] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s3 -> s1 [0, 72] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s3 -> s2 [0, 72] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R10465 += 1, R10420 += 1, R10421 += 1 };
  s3 -> s4 [73, 73] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s3 -> s5 [73, 73] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s3 -> s6 [73, 73] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s7 [73, 73] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s1 [74, 77] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s3 -> s2 [74, 65535] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s1 [84, 65535] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s4 -> s4 [0, 65535] { R10465 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 77] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s5 -> s5 [0, 65535] { R10465 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [84, 65535] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s6 -> s5 [0, 77] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s6 -> s6 [0, 65535] { R10465 += 1, R10421 += 1, R10252 += 1, R10253 += 1 };
  s6 -> s5 [84, 65535] { R10465 += 1, R10421 += 1, R10253 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s0 [0, 65535] { R10466 += 1, R10467 += 1 };
  s0 -> s2 [0, 65535] { R10467 += 1, R10422 += 1, R10423 += 1 };
  s0 -> s3 [73, 73] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s4 [73, 73] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s1 [74, 65535] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [0, 72] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [0, 65535] { R10467 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s4 [73, 73] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [74, 65535] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s1 [0, 72] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s2 [0, 65535] { R10467 += 1, R10422 += 1, R10423 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s4 [73, 73] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s1 [74, 65535] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s3 -> s3 [0, 65535] { R10467 += 1, R10423 += 1, R10256 += 1, R10257 += 1 };
  s3 -> s6 [0, 65535] { R10467 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10467 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10467 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s0 -> s2 [0, 72] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s0 -> s3 [0, 65535] { R10469 += 1, R10424 += 1, R10425 += 1 };
  s0 -> s0 [0, 65535] { R10468 += 1, R10469 += 1 };
  s0 -> s4 [73, 73] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s0 -> s5 [73, 73] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s0 -> s6 [73, 73] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s0 -> s7 [73, 73] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s0 -> s1 [74, 76] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s0 -> s2 [74, 65535] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s0 -> s1 [84, 65535] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s1 -> s1 [0, 72] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s1 -> s1 [0, 65535] { R10469 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [73, 73] { R10469 += 1, R10425 += 1 };
  s1 -> s6 [73, 73] { R10469 += 1, R10425 += 1 };
  s1 -> s1 [74, 76] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s1 -> s1 [74, 65535] { R10469 += 1, R10425 += 1 };
  s1 -> s1 [84, 65535] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s2 -> s1 [0, 72] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s2 -> s2 [0, 72] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s2 -> s4 [73, 73] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s2 -> s5 [73, 73] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s2 -> s6 [73, 73] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s2 -> s7 [73, 73] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s2 -> s1 [74, 76] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s2 -> s2 [74, 65535] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s2 -> s1 [84, 65535] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s3 -> s1 [0, 72] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s3 -> s2 [0, 72] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s3 -> s3 [0, 65535] { R10469 += 1, R10424 += 1, R10425 += 1 };
  s3 -> s4 [73, 73] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s3 -> s5 [73, 73] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s3 -> s6 [73, 73] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s3 -> s7 [73, 73] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s3 -> s1 [74, 76] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s3 -> s2 [74, 65535] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s3 -> s1 [84, 65535] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s4 -> s4 [0, 65535] { R10469 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s6 [0, 76] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s6 -> s8 [0, 65535] { R10469 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R10469 += 1, R10425 += 1 };
  s6 -> s6 [84, 65535] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s7 -> s6 [0, 76] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s7 -> s7 [0, 65535] { R10469 += 1, R10425 += 1, R10366 += 1, R10367 += 1 };
  s7 -> s6 [84, 65535] { R10469 += 1, R10425 += 1, R10367 += 1 };
  s8 -> s8 [0, 65535] { R10469 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R10385 && R2 = R10469 && R20 - R10469 = -1 && R21 = R10469 && R22 - R10469 = -1 && R23 = R10469 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R10384 = 0 && R10410 = 0 && R10411 = 0 && R10418 = 0 && R10419 = 0 && R10420 = 0 && R10421 = 0 && R10424 = 0 && R10425 = 0 && R10426 = 0 && R10427 = R10469 && R10428 = 0 && R10429 = R10469 && R10430 = 0 && R10431 = R10469 && R10432 = 0 && R10433 = R10469 && R10434 = 0 && R10435 = R10469 && R10436 = 0 && R10437 = R10469 && R10438 = 0 && R10439 = R10469 && R10440 = 0 && R10441 = R10469 && R10442 = 0 && R10443 = R10469 && R10444 = 0 && R10445 = R10469 && R10446 = 0 && R10447 = R10469 && R10448 = 0 && R10449 = R10469 && R10450 = 0 && R10451 = R10469 && R10452 = 0 && R10453 = R10469 && R10454 = 0 && R10455 = R10469 && R10456 = 0 && R10457 = R10469 && R10458 = 0 && R10459 = R10469 && R10460 = 0 && R10461 = R10469 && R10462 = 0 && R10463 = R10469 && R10464 = 0 && R10465 = R10469 && R10466 = 0 && R10467 = R10469 && R10468 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && -1 < R10385 && 0 < R10469 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R10255 + R10253 < 1))) && (R10370 != 0 || R10371 = R10385 || (R17 = 0 && R10385 = 0)) && (R10372 != 0 || R10373 = R10385 || (R17 = 0 && R10385 = 0)) && (R10374 != 0 || R10375 = R10385 || (R17 = 0 && R10385 = 0)) && (R10376 != 0 || R10377 = R10385 || (R17 = 0 && R10385 = 0)) && (R10378 != 0 || R10379 = R10385 || (R17 = 0 && R10385 = 0)) && (R10380 != 0 || R10381 = R10385 || (R17 = 0 && R10385 = 0)) && (R10382 != 0 || R10383 = R10385 || (R17 = 0 && R10385 = 0)) && (R10386 != 0 || R10385 = R10387 || (R17 = 0 && R10385 = 0)) && (R10388 != 0 || R10385 = R10389 || (R17 = 0 && R10385 = 0)) && (R18 = 0 || (R10408 = 0 && R10409 = 0)) && (R18 = 0 || (R10412 = 0 && R10413 = 0)) && (R18 = 0 || (R10414 = 0 && R10415 = 0)) && (R18 = 0 || (R10416 = 0 && R10417 = 0)) && (R18 = 0 || (R10422 = 0 && R10423 = 0)) && (R19 = 0 || (R10390 = 0 && R10391 = 0)) && (R19 = 0 || (R10392 = 0 && R10393 = 0)) && (R19 = 0 || (R10394 = 0 && R10395 = 0)) && (R19 = 0 || (R10396 = 0 && R10397 = 0)) && (R19 = 0 || (R10398 = 0 && R10399 = 0)) && (R19 = 0 || (R10400 = 0 && R10401 = 0)) && (R19 = 0 || (R10402 = 0 && R10403 = 0)) && (R19 = 0 || (R10404 = 0 && R10405 = 0)) && (R19 = 0 || (R10406 = 0 && R10407 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R10261 + R10258 = 0 || (R56 + R10259 + R10256 = 0 && R57 + R10260 + R10257 = 0)) && (R58 + R10261 + R10258 = 0 || (R62 + R10368 + R10366 = 0 && R63 + R10369 + R10367 = 0)) && (R10370 = 0 || (R17 = 0 && R10385 = 0)) && (R10372 = 0 || (R17 = 0 && R10385 = 0)) && (R10374 = 0 || (R17 = 0 && R10385 = 0)) && (R10376 = 0 || (R17 = 0 && R10385 = 0)) && (R10378 = 0 || (R17 = 0 && R10385 = 0)) && (R10380 = 0 || (R17 = 0 && R10385 = 0)) && (R10382 = 0 || (R17 = 0 && R10385 = 0)) && (R10386 = 0 || (R17 = 0 && R10385 = 0)) && (R10388 = 0 || (R17 = 0 && R10385 = 0));
// End of Parikh automata intersection problem
