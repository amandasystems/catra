// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R15348, R15349, R15350, R15351, R15352, R15353, R15354, R15355, R15356, R15357, R15670, R15671, R15672, R15673, R15674, R15675, R15676, R15677, R15678, R15679, R15680, R15681, R15682, R15683, R15684, R15685, R15686, R15687, R15688, R15689, R15690, R15691, R15692, R15693, R15694, R15695, R15696, R15697, R15698, R15699, R15700, R15701, R15702, R15703, R15704, R15705, R15706, R15707, R15708, R15709, R15710, R15711, R15712, R15713, R15714, R15715, R15716, R15717, R15718, R15719, R15720, R15721, R15722, R15723, R15724, R15725, R15726, R15727, R15728, R15729, R15730, R15731, R15732, R15733, R15734, R15735, R15736, R15737, R15738, R15739, R15740, R15741, R15742, R15743, R15744, R15745, R15746, R15747, R15748, R15749, R15750, R15751, R15752, R15753, R15754, R15755, R15756, R15757, R15758, R15759, R15760, R15761, R15762, R15763, R15764, R15765, R15766, R15767, R15768, R15769, R15770, R15771, R15772, R15773, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R15695 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R15694 += 1, R15695 += 1 };
  s1 -> s1 [0, 65535] { R15695 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R15697 += 1 };
  s0 -> s0 [0, 65535] { R15696 += 1, R15697 += 1 };
  s0 -> s2 [73, 73] { R15697 += 1 };
  s0 -> s3 [73, 73] { R15697 += 1 };
  s0 -> s1 [78, 65535] { R15697 += 1 };
  s1 -> s1 [0, 72] { R15697 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15697 += 1 };
  s1 -> s3 [73, 73] { R15697 += 1 };
  s1 -> s1 [78, 65535] { R15697 += 1 };
  s2 -> s2 [0, 73] { R15697 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R15697 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R15699 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R15698 += 1, R15699 += 1 };
  s0 -> s2 [73, 73] { R15699 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R15699 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R15699 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R15699 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15699 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R15699 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R15699 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15699 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R15701 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R15700 += 1, R15701 += 1 };
  s0 -> s2 [73, 73] { R15701 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R15701 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R15701 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R15701 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15701 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R15701 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R15701 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R15701 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R15703 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R15702 += 1, R15703 += 1 };
  s0 -> s2 [73, 73] { R15703 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R15703 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R15703 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R15703 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15703 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R15703 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R15703 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15703 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R15705 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R15704 += 1, R15705 += 1 };
  s0 -> s2 [73, 73] { R15705 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R15705 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R15705 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R15705 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15705 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R15705 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R15705 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15705 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R15707 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R15706 += 1, R15707 += 1 };
  s0 -> s2 [73, 73] { R15707 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R15707 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R15707 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R15707 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15707 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R15707 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R15707 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15707 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R15709 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R15708 += 1, R15709 += 1 };
  s0 -> s2 [73, 73] { R15709 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R15709 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R15709 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R15709 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15709 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R15709 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R15709 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R15709 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R15711 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R15710 += 1, R15711 += 1 };
  s0 -> s2 [73, 73] { R15711 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R15711 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R15711 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R15711 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15711 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R15711 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R15711 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R15711 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R15731 += 1 };
  s0 -> s0 [0, 65535] { R15730 += 1, R15731 += 1 };
  s0 -> s2 [73, 73] { R15731 += 1 };
  s0 -> s1 [74, 65535] { R15731 += 1 };
  s1 -> s1 [0, 72] { R15731 += 1 };
  s1 -> s2 [73, 73] { R15731 += 1 };
  s1 -> s1 [74, 65535] { R15731 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15731 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R15733 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R15732 += 1, R15733 += 1 };
  s1 -> s1 [0, 65535] { R15733 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R15735 += 1 };
  s0 -> s2 [0, 65535] { R15735 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R15734 += 1, R15735 += 1 };
  s0 -> s3 [73, 73] { R15735 += 1 };
  s0 -> s1 [74, 65535] { R15735 += 1 };
  s1 -> s1 [0, 72] { R15735 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R15735 += 1 };
  s1 -> s1 [74, 65535] { R15735 += 1 };
  s2 -> s1 [0, 72] { R15735 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15735 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R15735 += 1 };
  s2 -> s1 [74, 65535] { R15735 += 1 };
  s3 -> s3 [0, 65535] { R15735 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R15737 += 1, R15675 += 1 };
  s0 -> s0 [0, 65535] { R15736 += 1, R15737 += 1 };
  s0 -> s2 [0, 65535] { R15737 += 1, R15674 += 1, R15675 += 1 };
  s0 -> s1 [74, 65535] { R15737 += 1, R15675 += 1 };
  s1 -> s1 [0, 72] { R15737 += 1, R15675 += 1 };
  s1 -> s1 [0, 65535] { R15737 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R15737 += 1, R15675 += 1 };
  s2 -> s1 [0, 72] { R15737 += 1, R15675 += 1 };
  s2 -> s2 [0, 65535] { R15737 += 1, R15674 += 1, R15675 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R15737 += 1, R15675 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R15739 += 1, R15676 += 1, R15677 += 1 };
  s0 -> s2 [0, 65535] { R15739 += 1, R15677 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R15738 += 1, R15739 += 1 };
  s1 -> s1 [0, 65535] { R15739 += 1, R15676 += 1, R15677 += 1 };
  s1 -> s2 [0, 65535] { R15739 += 1, R15677 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R15739 += 1 };
  s2 -> s2 [0, 65535] { R15739 += 1, R15677 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15739 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R15741 += 1, R15679 += 1 };
  s0 -> s0 [0, 65535] { R15740 += 1, R15741 += 1 };
  s0 -> s2 [0, 65535] { R15741 += 1, R15678 += 1, R15679 += 1 };
  s0 -> s1 [77, 65535] { R15741 += 1, R15679 += 1 };
  s1 -> s1 [0, 73] { R15741 += 1, R15679 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15741 += 1 };
  s1 -> s1 [77, 65535] { R15741 += 1, R15679 += 1 };
  s2 -> s1 [0, 73] { R15741 += 1, R15679 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15741 += 1, R15678 += 1, R15679 += 1 };
  s2 -> s1 [77, 65535] { R15741 += 1, R15679 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R15743 += 1, R15681 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R15743 += 1, R15680 += 1, R15681 += 1 };
  s0 -> s0 [0, 65535] { R15742 += 1, R15743 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15743 += 1, R15681 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R15743 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R15743 += 1, R15681 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R15743 += 1, R15680 += 1, R15681 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15743 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R15745 += 1, R15683 += 1 };
  s0 -> s2 [0, 65535] { R15745 += 1, R15682 += 1, R15683 += 1 };
  s0 -> s3 [0, 65535] { R15745 += 1, R15683 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R15744 += 1, R15745 += 1 };
  s0 -> s1 [78, 65535] { R15745 += 1, R15683 += 1 };
  s1 -> s1 [0, 76] { R15745 += 1, R15683 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R15745 += 1 };
  s1 -> s1 [78, 65535] { R15745 += 1, R15683 += 1 };
  s2 -> s1 [0, 76] { R15745 += 1, R15683 += 1 };
  s2 -> s2 [0, 65535] { R15745 += 1, R15682 += 1, R15683 += 1 };
  s2 -> s3 [0, 65535] { R15745 += 1, R15683 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R15745 += 1, R15683 += 1 };
  s3 -> s1 [0, 76] { R15745 += 1, R15683 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15745 += 1, R15683 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R15745 += 1 };
  s3 -> s1 [78, 65535] { R15745 += 1, R15683 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15745 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R15747 += 1, R15685 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R15747 += 1, R15684 += 1, R15685 += 1 };
  s0 -> s0 [0, 65535] { R15746 += 1, R15747 += 1 };
  s0 -> s1 [0, 65535] { R15747 += 1, R15685 += 1 };
  s0 -> s1 [78, 65535] { R15747 += 1, R15685 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R15747 += 1, R15685 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15747 += 1, R15685 += 1 };
  s1 -> s4 [0, 65535] { R15747 += 1 };
  s1 -> s1 [78, 65535] { R15747 += 1, R15685 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R15747 += 1, R15685 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15747 += 1, R15684 += 1, R15685 += 1 };
  s2 -> s1 [0, 65535] { R15747 += 1, R15685 += 1 };
  s2 -> s1 [78, 65535] { R15747 += 1, R15685 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15747 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R15749 += 1, R15687 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s2 [0, 65535] { R15749 += 1, R15687 += 1 };
  s0 -> s0 [0, 65535] { R15748 += 1, R15749 += 1 };
  s0 -> s3 [0, 65535] { R15749 += 1, R15686 += 1, R15687 += 1 };
  s1 -> s5 [0, 65535] { R15749 += 1 };
  s1 -> s1 [0, 65535] { R15749 += 1, R15687 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s2 [0, 65535] { R15749 += 1, R15687 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R15749 += 1 };
  s2 -> s2 [0, 65535] { R15749 += 1, R15687 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R15749 += 1, R15687 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s2 [0, 65535] { R15749 += 1, R15687 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15749 += 1, R15686 += 1, R15687 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15749 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R15751 += 1, R15689 += 1, R15351 += 1 };
  s0 -> s2 [0, 65535] { R15751 += 1, R15688 += 1, R15689 += 1 };
  s0 -> s1 [0, 65535] { R15751 += 1, R15689 += 1 };
  s0 -> s0 [0, 65535] { R15750 += 1, R15751 += 1 };
  s0 -> s1 [83, 65535] { R15751 += 1, R15689 += 1, R15351 += 1 };
  s1 -> s1 [0, 77] { R15751 += 1, R15689 += 1, R15351 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R15751 += 1 };
  s1 -> s1 [0, 65535] { R15751 += 1, R15689 += 1 };
  s1 -> s1 [83, 65535] { R15751 += 1, R15689 += 1, R15351 += 1 };
  s2 -> s1 [0, 77] { R15751 += 1, R15689 += 1, R15351 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15751 += 1, R15688 += 1, R15689 += 1 };
  s2 -> s1 [0, 65535] { R15751 += 1, R15689 += 1 };
  s2 -> s1 [83, 65535] { R15751 += 1, R15689 += 1, R15351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15751 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R15753 += 1, R15690 += 1, R15691 += 1 };
  s0 -> s0 [0, 65535] { R15752 += 1, R15753 += 1 };
  s0 -> s2 [0, 65535] { R15753 += 1, R15691 += 1, R15356 += 1, R15357 += 1 };
  s0 -> s3 [0, 65535] { R15753 += 1, R15691 += 1, R15355 += 1, R15356 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R15753 += 1, R15690 += 1, R15691 += 1 };
  s1 -> s2 [0, 65535] { R15753 += 1, R15691 += 1, R15356 += 1, R15357 += 1 };
  s1 -> s3 [0, 65535] { R15753 += 1, R15691 += 1, R15355 += 1, R15356 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R15753 += 1 };
  s2 -> s6 [0, 65535] { R15753 += 1, R15691 += 1 };
  s2 -> s2 [0, 65535] { R15753 += 1, R15691 += 1, R15356 += 1, R15357 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R15753 += 1 };
  s3 -> s2 [0, 65535] { R15753 += 1, R15691 += 1, R15356 += 1, R15357 += 1 };
  s3 -> s3 [0, 65535] { R15753 += 1, R15691 += 1, R15355 += 1, R15356 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15753 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R15753 += 1 };
  s6 -> s6 [0, 65535] { R15753 += 1, R15691 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R15755 += 1, R15693 += 1, R15673 += 1 };
  s0 -> s2 [0, 65535] { R15755 += 1, R15692 += 1, R15693 += 1 };
  s0 -> s1 [0, 65535] { R15755 += 1, R15693 += 1 };
  s0 -> s0 [0, 65535] { R15754 += 1, R15755 += 1 };
  s0 -> s1 [84, 65535] { R15755 += 1, R15693 += 1, R15673 += 1 };
  s1 -> s1 [0, 77] { R15755 += 1, R15693 += 1, R15673 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R15755 += 1 };
  s1 -> s1 [0, 65535] { R15755 += 1, R15693 += 1 };
  s1 -> s1 [84, 65535] { R15755 += 1, R15693 += 1, R15673 += 1 };
  s2 -> s1 [0, 77] { R15755 += 1, R15693 += 1, R15673 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15755 += 1, R15692 += 1, R15693 += 1 };
  s2 -> s1 [0, 65535] { R15755 += 1, R15693 += 1 };
  s2 -> s1 [84, 65535] { R15755 += 1, R15693 += 1, R15673 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15755 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R15757 += 1, R15712 += 1, R15713 += 1 };
  s0 -> s2 [0, 65535] { R15757 += 1, R15713 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R15756 += 1, R15757 += 1 };
  s1 -> s1 [0, 65535] { R15757 += 1, R15712 += 1, R15713 += 1 };
  s1 -> s2 [0, 65535] { R15757 += 1, R15713 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15757 += 1, R15713 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R15757 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15757 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R15759 += 1, R15715 += 1 };
  s0 -> s0 [0, 65535] { R15758 += 1, R15759 += 1 };
  s0 -> s2 [0, 65535] { R15759 += 1, R15714 += 1, R15715 += 1 };
  s0 -> s3 [73, 73] { R15759 += 1, R15715 += 1 };
  s0 -> s4 [73, 73] { R15759 += 1, R15715 += 1 };
  s0 -> s5 [77, 77] { R15759 += 1, R15715 += 1 };
  s0 -> s1 [78, 65535] { R15759 += 1, R15715 += 1 };
  s1 -> s1 [0, 72] { R15759 += 1, R15715 += 1 };
  s1 -> s3 [73, 73] { R15759 += 1, R15715 += 1 };
  s1 -> s4 [73, 73] { R15759 += 1, R15715 += 1 };
  s1 -> s5 [77, 77] { R15759 += 1, R15715 += 1 };
  s1 -> s1 [78, 65535] { R15759 += 1, R15715 += 1 };
  s2 -> s1 [0, 72] { R15759 += 1, R15715 += 1 };
  s2 -> s2 [0, 65535] { R15759 += 1, R15714 += 1, R15715 += 1 };
  s2 -> s3 [73, 73] { R15759 += 1, R15715 += 1 };
  s2 -> s4 [73, 73] { R15759 += 1, R15715 += 1 };
  s2 -> s5 [77, 77] { R15759 += 1, R15715 += 1 };
  s2 -> s1 [78, 65535] { R15759 += 1, R15715 += 1 };
  s3 -> s3 [0, 73] { R15759 += 1, R15715 += 1 };
  s3 -> s7 [77, 77] { R15759 += 1, R15715 += 1 };
  s3 -> s3 [78, 65535] { R15759 += 1, R15715 += 1 };
  s5 -> s5 [0, 72] { R15759 += 1, R15715 += 1 };
  s5 -> s5 [0, 65535] { R15759 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R15759 += 1, R15715 += 1 };
  s5 -> s8 [73, 73] { R15759 += 1, R15715 += 1 };
  s5 -> s5 [77, 65535] { R15759 += 1, R15715 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R15759 += 1, R15715 += 1 };
  s7 -> s7 [0, 65535] { R15759 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R15759 += 1, R15715 += 1 };
  s8 -> s8 [0, 65535] { R15759 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R15761 += 1, R15717 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R15761 += 1, R15716 += 1, R15717 += 1 };
  s0 -> s0 [0, 65535] { R15760 += 1, R15761 += 1 };
  s0 -> s3 [73, 73] { R15761 += 1, R15717 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R15761 += 1, R15717 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R15761 += 1, R15717 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R15761 += 1, R15717 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R15761 += 1 };
  s1 -> s3 [73, 73] { R15761 += 1, R15717 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R15761 += 1, R15717 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R15761 += 1, R15717 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R15761 += 1, R15717 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R15761 += 1, R15716 += 1, R15717 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R15761 += 1, R15717 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R15761 += 1, R15717 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R15761 += 1, R15717 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R15761 += 1, R15717 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R15761 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15761 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15761 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R15763 += 1, R15719 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R15762 += 1, R15763 += 1 };
  s0 -> s2 [0, 65535] { R15763 += 1, R15718 += 1, R15719 += 1 };
  s0 -> s3 [73, 73] { R15763 += 1, R15719 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R15763 += 1, R15719 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R15763 += 1, R15719 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R15763 += 1, R15719 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R15763 += 1 };
  s1 -> s3 [73, 73] { R15763 += 1, R15719 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R15763 += 1, R15719 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R15763 += 1, R15719 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R15763 += 1, R15719 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R15763 += 1, R15718 += 1, R15719 += 1 };
  s2 -> s3 [73, 73] { R15763 += 1, R15719 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R15763 += 1, R15719 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R15763 += 1, R15719 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R15763 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R15763 += 1 };
  s4 -> s4 [0, 65535] { R15763 += 1, R15719 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15763 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R15765 += 1, R15720 += 1, R15721 += 1 };
  s0 -> s0 [0, 65535] { R15764 += 1, R15765 += 1 };
  s0 -> s4 [73, 73] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R15765 += 1 };
  s1 -> s5 [73, 73] { R15765 += 1, R15721 += 1 };
  s1 -> s7 [73, 73] { R15765 += 1, R15721 += 1 };
  s1 -> s1 [74, 76] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R15765 += 1, R15721 += 1 };
  s1 -> s1 [78, 65535] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R15765 += 1, R15720 += 1, R15721 += 1 };
  s3 -> s4 [73, 73] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s5 -> s5 [0, 76] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R15765 += 1 };
  s5 -> s5 [0, 65535] { R15765 += 1, R15721 += 1 };
  s5 -> s5 [78, 65535] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s6 -> s5 [0, 76] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R15765 += 1, R15721 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s5 [78, 65535] { R15765 += 1, R15721 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R15765 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R15765 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 72] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s3 [0, 65535] { R15767 += 1, R15722 += 1, R15723 += 1 };
  s0 -> s0 [0, 65535] { R15766 += 1, R15767 += 1 };
  s0 -> s4 [73, 73] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [74, 65535] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 72] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 65535] { R15767 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [73, 73] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s7 [73, 73] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 72] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [73, 73] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s5 [73, 73] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s6 [73, 73] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [74, 65535] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 72] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 72] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R15767 += 1, R15722 += 1, R15723 += 1 };
  s3 -> s4 [73, 73] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [74, 65535] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s5 [0, 65535] { R15767 += 1, R15723 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s7 [0, 65535] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s6 [0, 65535] { R15767 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R15767 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R15767 += 1, R15723 += 1, R15343 += 1, R15344 += 1 };
  s8 -> s8 [0, 65535] { R15767 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s2 [0, 72] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s0 -> s3 [0, 65535] { R15769 += 1, R15724 += 1, R15725 += 1 };
  s0 -> s0 [0, 65535] { R15768 += 1, R15769 += 1 };
  s0 -> s4 [73, 73] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s0 -> s5 [73, 73] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s6 [73, 73] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s0 -> s7 [73, 73] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s2 [74, 77] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s0 -> s1 [74, 65535] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s8 [83, 83] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s0 -> s2 [84, 65535] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s1 -> s1 [0, 72] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s2 [0, 72] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s1 -> s4 [73, 73] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s1 -> s5 [73, 73] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s6 [73, 73] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s1 -> s7 [73, 73] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s2 [74, 77] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s1 -> s1 [74, 65535] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s8 [83, 83] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s1 -> s2 [84, 65535] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s2 -> s2 [0, 72] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s2 -> s4 [73, 73] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s2 -> s6 [73, 73] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s2 -> s2 [74, 77] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s2 -> s8 [83, 83] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s2 -> s2 [84, 65535] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s3 -> s1 [0, 72] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s2 [0, 72] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s3 -> s3 [0, 65535] { R15769 += 1, R15724 += 1, R15725 += 1 };
  s3 -> s4 [73, 73] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s3 -> s5 [73, 73] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s6 [73, 73] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s3 -> s7 [73, 73] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s2 [74, 77] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s3 -> s1 [74, 65535] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s8 [83, 83] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s3 -> s2 [84, 65535] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s4 -> s4 [0, 77] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s4 -> s11 [83, 83] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s4 -> s4 [84, 65535] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s5 -> s4 [0, 77] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s5 -> s5 [0, 65535] { R15769 += 1, R15725 += 1, R15348 += 1, R15349 += 1 };
  s5 -> s11 [83, 83] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s5 -> s4 [84, 65535] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s8 -> s8 [0, 72] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s8 -> s8 [0, 65535] { R15769 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R15769 += 1, R15725 += 1 };
  s8 -> s11 [73, 73] { R15769 += 1, R15725 += 1 };
  s8 -> s8 [74, 77] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s8 -> s8 [74, 65535] { R15769 += 1, R15725 += 1 };
  s8 -> s8 [83, 65535] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R15769 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s11 -> s12 [0, 65535] { R15769 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R15769 += 1, R15725 += 1 };
  s11 -> s11 [83, 65535] { R15769 += 1, R15725 += 1, R15349 += 1 };
  s12 -> s12 [0, 65535] { R15769 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s0 -> s2 [0, 65535] { R15771 += 1, R15726 += 1, R15727 += 1 };
  s0 -> s0 [0, 65535] { R15770 += 1, R15771 += 1 };
  s0 -> s3 [73, 73] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s0 -> s4 [73, 73] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s0 -> s1 [74, 65535] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s1 [0, 72] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R15771 += 1 };
  s1 -> s3 [73, 73] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s4 [73, 73] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s1 [74, 65535] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s1 [0, 72] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s2 [0, 65535] { R15771 += 1, R15726 += 1, R15727 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s4 [73, 73] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s1 [74, 65535] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s3 -> s3 [0, 65535] { R15771 += 1, R15727 += 1, R15352 += 1, R15353 += 1 };
  s3 -> s6 [0, 65535] { R15771 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15771 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15771 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s0 -> s2 [0, 72] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s0 -> s3 [0, 65535] { R15773 += 1, R15728 += 1, R15729 += 1 };
  s0 -> s0 [0, 65535] { R15772 += 1, R15773 += 1 };
  s0 -> s4 [73, 73] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s0 -> s5 [73, 73] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s0 -> s6 [73, 73] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s0 -> s7 [73, 73] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s0 -> s1 [74, 76] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s0 -> s2 [74, 65535] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s0 -> s8 [77, 77] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s0 -> s1 [84, 65535] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s1 -> s1 [0, 72] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s1 -> s4 [73, 73] { R15773 += 1, R15729 += 1 };
  s1 -> s6 [73, 73] { R15773 += 1, R15729 += 1 };
  s1 -> s1 [74, 76] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s1 -> s1 [74, 65535] { R15773 += 1, R15729 += 1 };
  s1 -> s8 [77, 77] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s1 -> s1 [84, 65535] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s2 -> s1 [0, 72] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s2 -> s2 [0, 72] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s2 -> s4 [73, 73] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s2 -> s5 [73, 73] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s2 -> s6 [73, 73] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s2 -> s7 [73, 73] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s2 -> s1 [74, 76] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s2 -> s2 [74, 65535] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s2 -> s8 [77, 77] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s2 -> s1 [84, 65535] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s3 -> s1 [0, 72] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s3 -> s2 [0, 72] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s3 -> s3 [0, 65535] { R15773 += 1, R15728 += 1, R15729 += 1 };
  s3 -> s4 [73, 73] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s3 -> s5 [73, 73] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s3 -> s6 [73, 73] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s3 -> s7 [73, 73] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s3 -> s1 [74, 76] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s3 -> s2 [74, 65535] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s3 -> s8 [77, 77] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s3 -> s1 [84, 65535] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s5 -> s6 [0, 76] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s5 -> s5 [0, 65535] { R15773 += 1, R15729 += 1, R15670 += 1, R15671 += 1 };
  s5 -> s11 [77, 77] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s5 -> s6 [84, 65535] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s6 -> s6 [0, 76] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s6 -> s6 [0, 65535] { R15773 += 1, R15729 += 1 };
  s6 -> s11 [77, 77] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s6 -> s6 [84, 65535] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s8 -> s8 [0, 72] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R15773 += 1 };
  s8 -> s10 [73, 73] { R15773 += 1, R15729 += 1 };
  s8 -> s11 [73, 73] { R15773 += 1, R15729 += 1 };
  s8 -> s8 [74, 77] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s8 -> s8 [74, 65535] { R15773 += 1, R15729 += 1 };
  s8 -> s8 [84, 65535] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R15773 += 1 };
  s11 -> s11 [0, 77] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R15773 += 1 };
  s11 -> s11 [0, 65535] { R15773 += 1, R15729 += 1 };
  s11 -> s11 [84, 65535] { R15773 += 1, R15729 += 1, R15671 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R15773 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R15773 && R20 - R15773 = -1 && R21 = R15773 && R22 - R15773 = -1 && R23 = R15773 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15351 + -1*R15349 - R53 = 0 && R52 + R15350 + R15348 = 0 && R15714 = 0 && R15715 = 0 && R15720 = 0 && R15721 = 0 && R15722 = 0 && R15723 = 0 && R15724 = 0 && R15725 = 0 && R15728 = 0 && R15729 = 0 && R15730 = 0 && R15731 = R15773 && R15732 = 0 && R15733 = R15773 && R15734 = 0 && R15735 = R15773 && R15736 = 0 && R15737 = R15773 && R15738 = 0 && R15739 = R15773 && R15740 = 0 && R15741 = R15773 && R15742 = 0 && R15743 = R15773 && R15744 = 0 && R15745 = R15773 && R15746 = 0 && R15747 = R15773 && R15748 = 0 && R15749 = R15773 && R15750 = 0 && R15751 = R15773 && R15752 = 0 && R15753 = R15773 && R15754 = 0 && R15755 = R15773 && R15756 = 0 && R15757 = R15773 && R15758 = 0 && R15759 = R15773 && R15760 = 0 && R15761 = R15773 && R15762 = 0 && R15763 = R15773 && R15764 = 0 && R15765 = R15773 && R15766 = 0 && R15767 = R15773 && R15768 = 0 && R15769 = R15773 && R15770 = 0 && R15771 = R15773 && R15772 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15351 + -1*R15349 - R53 < 1 && 0 < R15773 && (R1 != 0 || R17 = 0 || (R15674 = 0 && R15675 = 0)) && (R1 != 0 || R17 = 0 || (R15676 = 0 && R15677 = 0)) && (R1 != 0 || R17 = 0 || (R15678 = 0 && R15679 = 0)) && (R1 != 0 || R17 = 0 || (R15680 = 0 && R15681 = 0)) && (R1 != 0 || R17 = 0 || (R15682 = 0 && R15683 = 0)) && (R1 != 0 || R17 = 0 || (R15684 = 0 && R15685 = 0)) && (R1 != 0 || R17 = 0 || (R15686 = 0 && R15687 = 0)) && (R1 != 0 || R17 = 0 || (R15688 = 0 && R15689 = 0)) && (R1 != 0 || R17 = 0 || (R15690 = 0 && R15691 = 0)) && (R1 != 0 || R17 = 0 || (R15692 = 0 && R15693 = 0)) && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R15351 + R15349 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R15351 + R15349 < 1))) && (R15674 != 0 || R1 = R15675 || R1 < 1) && (R15676 != 0 || R1 = R15677 || R1 < 1) && (R15678 != 0 || R1 = R15679 || R1 < 1) && (R15680 != 0 || R1 = R15681 || R1 < 1) && (R15682 != 0 || R1 = R15683 || R1 < 1) && (R15684 != 0 || R1 = R15685 || R1 < 1) && (R15686 != 0 || R1 = R15687 || R1 < 1) && (R15688 != 0 || R1 = R15689 || R1 < 1) && (R15690 != 0 || R1 = R15691 || R1 < 1) && (R15692 != 0 || R1 = R15693 || R1 < 1) && (R18 = 0 || (R15712 = 0 && R15713 = 0)) && (R18 = 0 || (R15716 = 0 && R15717 = 0)) && (R18 = 0 || (R15718 = 0 && R15719 = 0)) && (R18 = 0 || (R15726 = 0 && R15727 = 0)) && (R19 = 0 || (R15694 = 0 && R15695 = 0)) && (R19 = 0 || (R15696 = 0 && R15697 = 0)) && (R19 = 0 || (R15698 = 0 && R15699 = 0)) && (R19 = 0 || (R15700 = 0 && R15701 = 0)) && (R19 = 0 || (R15702 = 0 && R15703 = 0)) && (R19 = 0 || (R15704 = 0 && R15705 = 0)) && (R19 = 0 || (R15706 = 0 && R15707 = 0)) && (R19 = 0 || (R15708 = 0 && R15709 = 0)) && (R19 = 0 || (R15710 = 0 && R15711 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0)) && (R58 + R15357 + R15354 = 0 || (R56 + R15355 + R15352 = 0 && R57 + R15356 + R15353 = 0)) && (R58 + R15357 + R15354 = 0 || (R62 + R15672 + R15670 = 0 && R63 + R15673 + R15671 = 0)) && (R15674 = 0 || R1 < 1) && (R15676 = 0 || R1 < 1) && (R15678 = 0 || R1 < 1) && (R15680 = 0 || R1 < 1) && (R15682 = 0 || R1 < 1) && (R15684 = 0 || R1 < 1) && (R15686 = 0 || R1 < 1) && (R15688 = 0 || R1 < 1) && (R15690 = 0 || R1 < 1) && (R15692 = 0 || R1 < 1);
// End of Parikh automata intersection problem
