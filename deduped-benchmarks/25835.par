// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R12, R12380, R12381, R12382, R12383, R12384, R12385, R12386, R12387, R12388, R12389, R12390, R12391, R12392, R12393, R12394, R12395, R12396, R12397, R12398, R12399, R12400, R12401, R12402, R12403, R12404, R12405, R12406, R12407, R12408, R12409, R12410, R12411, R12412, R12413, R12414, R12415, R12416, R12417, R12418, R12419, R12420, R12421, R12422, R12423, R12424, R12425, R12426, R12427, R12428, R12429, R12430, R12431, R12432, R12433, R12434, R12435, R12436, R12437, R12438, R12439, R12440, R12441, R12442, R12443, R12444, R12445, R12446, R12447, R12448, R12449, R12450, R12451, R12452, R12453, R12454, R12455, R12456, R12457, R12458, R12459, R12460, R12461, R12462, R12463, R12464, R12465, R12466, R12467, R12468, R12469, R12470, R12471, R12472, R12473, R12474, R12475, R12476, R12477, R12478, R12479, R12480, R12481, R12482, R12483, R12484, R12485, R12486, R12487, R12488, R12489, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R12411 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R12410 += 1, R12411 += 1 };
  s1 -> s1 [0, 65535] { R12411 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R12413 += 1 };
  s0 -> s0 [0, 65535] { R12412 += 1, R12413 += 1 };
  s0 -> s2 [73, 73] { R12413 += 1 };
  s0 -> s3 [73, 73] { R12413 += 1 };
  s0 -> s1 [78, 65535] { R12413 += 1 };
  s1 -> s1 [0, 72] { R12413 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12413 += 1 };
  s1 -> s3 [73, 73] { R12413 += 1 };
  s1 -> s1 [78, 65535] { R12413 += 1 };
  s2 -> s2 [0, 73] { R12413 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R12413 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R12415 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R12414 += 1, R12415 += 1 };
  s0 -> s2 [73, 73] { R12415 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R12415 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R12415 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R12415 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12415 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R12415 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R12415 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R12415 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R12417 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R12416 += 1, R12417 += 1 };
  s0 -> s2 [73, 73] { R12417 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R12417 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R12417 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R12417 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12417 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R12417 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R12417 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R12417 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R12419 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R12418 += 1, R12419 += 1 };
  s0 -> s2 [73, 73] { R12419 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R12419 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R12419 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R12419 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12419 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R12419 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R12419 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R12419 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R12421 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12420 += 1, R12421 += 1 };
  s0 -> s2 [73, 73] { R12421 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R12421 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R12421 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R12421 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12421 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R12421 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R12421 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R12421 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R12423 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R12422 += 1, R12423 += 1 };
  s0 -> s2 [73, 73] { R12423 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R12423 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R12423 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R12423 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12423 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R12423 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R12423 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R12423 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R12425 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12424 += 1, R12425 += 1 };
  s0 -> s2 [73, 73] { R12425 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R12425 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R12425 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R12425 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12425 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R12425 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R12425 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R12425 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R12427 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R12426 += 1, R12427 += 1 };
  s0 -> s2 [73, 73] { R12427 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R12427 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R12427 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R12427 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12427 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R12427 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R12427 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12427 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R12447 += 1 };
  s0 -> s0 [0, 65535] { R12446 += 1, R12447 += 1 };
  s0 -> s2 [73, 73] { R12447 += 1 };
  s0 -> s1 [74, 65535] { R12447 += 1 };
  s1 -> s1 [0, 72] { R12447 += 1 };
  s1 -> s2 [73, 73] { R12447 += 1 };
  s1 -> s1 [74, 65535] { R12447 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12447 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12449 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12448 += 1, R12449 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12449 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R12451 += 1 };
  s0 -> s0 [0, 65535] { R12450 += 1, R12451 += 1 };
  s0 -> s2 [0, 65535] { R12451 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R12451 += 1 };
  s0 -> s1 [74, 65535] { R12451 += 1 };
  s1 -> s1 [0, 72] { R12451 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R12451 += 1 };
  s1 -> s1 [74, 65535] { R12451 += 1 };
  s2 -> s1 [0, 72] { R12451 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12451 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R12451 += 1 };
  s2 -> s1 [74, 65535] { R12451 += 1 };
  s3 -> s3 [0, 65535] { R12451 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R12453 += 1, R12391 += 1 };
  s0 -> s0 [0, 65535] { R12452 += 1, R12453 += 1 };
  s0 -> s2 [0, 65535] { R12453 += 1, R12390 += 1, R12391 += 1 };
  s0 -> s1 [74, 65535] { R12453 += 1, R12391 += 1 };
  s1 -> s1 [0, 72] { R12453 += 1, R12391 += 1 };
  s1 -> s1 [0, 65535] { R12453 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R12453 += 1, R12391 += 1 };
  s2 -> s1 [0, 72] { R12453 += 1, R12391 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12453 += 1, R12390 += 1, R12391 += 1 };
  s2 -> s1 [74, 65535] { R12453 += 1, R12391 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R12454 += 1, R12455 += 1 };
  s0 -> s1 [0, 65535] { R12455 += 1, R12392 += 1, R12393 += 1 };
  s0 -> s2 [0, 65535] { R12455 += 1, R12393 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R12455 += 1, R12392 += 1, R12393 += 1 };
  s1 -> s2 [0, 65535] { R12455 += 1, R12393 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12455 += 1, R12393 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R12455 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12455 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R12457 += 1, R12395 += 1 };
  s0 -> s0 [0, 65535] { R12456 += 1, R12457 += 1 };
  s0 -> s2 [0, 65535] { R12457 += 1, R12394 += 1, R12395 += 1 };
  s0 -> s1 [77, 65535] { R12457 += 1, R12395 += 1 };
  s1 -> s1 [0, 73] { R12457 += 1, R12395 += 1 };
  s1 -> s1 [0, 65535] { R12457 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R12457 += 1, R12395 += 1 };
  s2 -> s1 [0, 73] { R12457 += 1, R12395 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12457 += 1, R12394 += 1, R12395 += 1 };
  s2 -> s1 [77, 65535] { R12457 += 1, R12395 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12459 += 1, R12397 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R12458 += 1, R12459 += 1 };
  s0 -> s2 [0, 65535] { R12459 += 1, R12396 += 1, R12397 += 1 };
  s1 -> s1 [0, 65535] { R12459 += 1, R12397 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12459 += 1 };
  s2 -> s1 [0, 65535] { R12459 += 1, R12397 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12459 += 1, R12396 += 1, R12397 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12459 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R12461 += 1, R12399 += 1 };
  s0 -> s0 [0, 65535] { R12460 += 1, R12461 += 1 };
  s0 -> s2 [0, 65535] { R12461 += 1, R12399 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R12461 += 1, R12398 += 1, R12399 += 1 };
  s0 -> s1 [78, 65535] { R12461 += 1, R12399 += 1 };
  s1 -> s1 [0, 76] { R12461 += 1, R12399 += 1 };
  s1 -> s1 [0, 65535] { R12461 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R12461 += 1, R12399 += 1 };
  s2 -> s1 [0, 76] { R12461 += 1, R12399 += 1 };
  s2 -> s2 [0, 65535] { R12461 += 1, R12399 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R12461 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R12461 += 1, R12399 += 1 };
  s3 -> s1 [0, 76] { R12461 += 1, R12399 += 1 };
  s3 -> s2 [0, 65535] { R12461 += 1, R12399 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R12461 += 1, R12398 += 1, R12399 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R12461 += 1, R12399 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12461 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R12463 += 1, R12401 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R12463 += 1, R12400 += 1, R12401 += 1 };
  s0 -> s1 [0, 65535] { R12463 += 1, R12401 += 1 };
  s0 -> s0 [0, 65535] { R12462 += 1, R12463 += 1 };
  s0 -> s1 [78, 65535] { R12463 += 1, R12401 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R12463 += 1, R12401 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R12463 += 1 };
  s1 -> s1 [0, 65535] { R12463 += 1, R12401 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R12463 += 1, R12401 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R12463 += 1, R12401 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R12463 += 1, R12400 += 1, R12401 += 1 };
  s2 -> s1 [0, 65535] { R12463 += 1, R12401 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R12463 += 1, R12401 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12463 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12465 += 1, R12402 += 1, R12403 += 1 };
  s0 -> s2 [0, 65535] { R12465 += 1, R12403 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R12465 += 1, R12403 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s0 [0, 65535] { R12464 += 1, R12465 += 1 };
  s1 -> s1 [0, 65535] { R12465 += 1, R12402 += 1, R12403 += 1 };
  s1 -> s2 [0, 65535] { R12465 += 1, R12403 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s3 [0, 65535] { R12465 += 1, R12403 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R12465 += 1 };
  s2 -> s2 [0, 65535] { R12465 += 1, R12403 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s3 [0, 65535] { R12465 += 1, R12403 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R12465 += 1 };
  s3 -> s3 [0, 65535] { R12465 += 1, R12403 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s5 [0, 65535] { R12465 += 1, R12403 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12465 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R12465 += 1 };
  s5 -> s5 [0, 65535] { R12465 += 1, R12403 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R12467 += 1, R12405 += 1, R11535 += 1 };
  s0 -> s2 [0, 65535] { R12467 += 1, R12404 += 1, R12405 += 1 };
  s0 -> s1 [0, 65535] { R12467 += 1, R12405 += 1 };
  s0 -> s0 [0, 65535] { R12466 += 1, R12467 += 1 };
  s0 -> s1 [83, 65535] { R12467 += 1, R12405 += 1, R11535 += 1 };
  s1 -> s1 [0, 77] { R12467 += 1, R12405 += 1, R11535 += 1 };
  s1 -> s4 [0, 65535] { R12467 += 1 };
  s1 -> s1 [0, 65535] { R12467 += 1, R12405 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [83, 65535] { R12467 += 1, R12405 += 1, R11535 += 1 };
  s2 -> s1 [0, 77] { R12467 += 1, R12405 += 1, R11535 += 1 };
  s2 -> s2 [0, 65535] { R12467 += 1, R12404 += 1, R12405 += 1 };
  s2 -> s1 [0, 65535] { R12467 += 1, R12405 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [83, 65535] { R12467 += 1, R12405 += 1, R11535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12467 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R12469 += 1, R12407 += 1 };
  s0 -> s2 [0, 65535] { R12469 += 1, R12406 += 1, R12407 += 1 };
  s0 -> s0 [0, 65535] { R12468 += 1, R12469 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12469 += 1 };
  s1 -> s1 [0, 65535] { R12469 += 1, R12407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12469 += 1, R12407 += 1 };
  s2 -> s2 [0, 65535] { R12469 += 1, R12406 += 1, R12407 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12469 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s0 -> s2 [0, 65535] { R12471 += 1, R12409 += 1, R12388 += 1, R12389 += 1 };
  s0 -> s3 [0, 65535] { R12471 += 1, R12408 += 1, R12409 += 1 };
  s0 -> s0 [0, 65535] { R12470 += 1, R12471 += 1 };
  s0 -> s4 [77, 77] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s0 -> s5 [77, 77] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s0 -> s1 [84, 65535] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s1 -> s1 [0, 76] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12471 += 1, R12409 += 1 };
  s1 -> s7 [0, 65535] { R12471 += 1 };
  s1 -> s4 [77, 77] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s1 -> s5 [77, 77] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s1 -> s1 [84, 65535] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s2 -> s1 [0, 76] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s2 -> s2 [0, 65535] { R12471 += 1, R12409 += 1, R12388 += 1, R12389 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R12471 += 1 };
  s2 -> s4 [77, 77] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s2 -> s5 [77, 77] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s2 -> s1 [84, 65535] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s3 -> s1 [0, 76] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s3 -> s2 [0, 65535] { R12471 += 1, R12409 += 1, R12388 += 1, R12389 += 1 };
  s3 -> s3 [0, 65535] { R12471 += 1, R12408 += 1, R12409 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [77, 77] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s3 -> s5 [77, 77] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s3 -> s1 [84, 65535] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s4 -> s4 [0, 77] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R12471 += 1 };
  s4 -> s4 [0, 65535] { R12471 += 1, R12409 += 1 };
  s4 -> s4 [84, 65535] { R12471 += 1, R12409 += 1, R12389 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R12471 += 1 };
  s5 -> s5 [0, 65535] { R12471 += 1, R12409 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12471 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12473 += 1, R12428 += 1, R12429 += 1 };
  s0 -> s2 [0, 65535] { R12473 += 1, R12429 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R12472 += 1, R12473 += 1 };
  s1 -> s1 [0, 65535] { R12473 += 1, R12428 += 1, R12429 += 1 };
  s1 -> s2 [0, 65535] { R12473 += 1, R12429 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12473 += 1 };
  s2 -> s2 [0, 65535] { R12473 += 1, R12429 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12473 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R12475 += 1, R12431 += 1 };
  s0 -> s2 [0, 65535] { R12475 += 1, R12430 += 1, R12431 += 1 };
  s0 -> s0 [0, 65535] { R12474 += 1, R12475 += 1 };
  s0 -> s3 [73, 73] { R12475 += 1, R12431 += 1 };
  s0 -> s4 [73, 73] { R12475 += 1, R12431 += 1 };
  s0 -> s5 [77, 77] { R12475 += 1, R12431 += 1 };
  s0 -> s1 [78, 65535] { R12475 += 1, R12431 += 1 };
  s1 -> s1 [0, 72] { R12475 += 1, R12431 += 1 };
  s1 -> s3 [73, 73] { R12475 += 1, R12431 += 1 };
  s1 -> s4 [73, 73] { R12475 += 1, R12431 += 1 };
  s1 -> s5 [77, 77] { R12475 += 1, R12431 += 1 };
  s1 -> s1 [78, 65535] { R12475 += 1, R12431 += 1 };
  s2 -> s1 [0, 72] { R12475 += 1, R12431 += 1 };
  s2 -> s2 [0, 65535] { R12475 += 1, R12430 += 1, R12431 += 1 };
  s2 -> s3 [73, 73] { R12475 += 1, R12431 += 1 };
  s2 -> s4 [73, 73] { R12475 += 1, R12431 += 1 };
  s2 -> s5 [77, 77] { R12475 += 1, R12431 += 1 };
  s2 -> s1 [78, 65535] { R12475 += 1, R12431 += 1 };
  s4 -> s4 [0, 73] { R12475 += 1, R12431 += 1 };
  s4 -> s7 [77, 77] { R12475 += 1, R12431 += 1 };
  s4 -> s4 [78, 65535] { R12475 += 1, R12431 += 1 };
  s5 -> s5 [0, 72] { R12475 += 1, R12431 += 1 };
  s5 -> s5 [0, 65535] { R12475 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R12475 += 1, R12431 += 1 };
  s5 -> s8 [73, 73] { R12475 += 1, R12431 += 1 };
  s5 -> s5 [77, 65535] { R12475 += 1, R12431 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R12475 += 1, R12431 += 1 };
  s7 -> s7 [0, 65535] { R12475 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R12475 += 1, R12431 += 1 };
  s8 -> s8 [0, 65535] { R12475 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R12477 += 1, R12433 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12476 += 1, R12477 += 1 };
  s0 -> s2 [0, 65535] { R12477 += 1, R12432 += 1, R12433 += 1 };
  s0 -> s3 [73, 73] { R12477 += 1, R12433 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R12477 += 1, R12433 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R12477 += 1, R12433 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R12477 += 1, R12433 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R12477 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R12477 += 1, R12433 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R12477 += 1, R12433 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R12477 += 1, R12433 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R12477 += 1, R12433 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12477 += 1, R12432 += 1, R12433 += 1 };
  s2 -> s3 [73, 73] { R12477 += 1, R12433 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R12477 += 1, R12433 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R12477 += 1, R12433 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R12477 += 1, R12433 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12477 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12477 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12477 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R12479 += 1, R12435 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R12479 += 1, R12434 += 1, R12435 += 1 };
  s0 -> s0 [0, 65535] { R12478 += 1, R12479 += 1 };
  s0 -> s3 [73, 73] { R12479 += 1, R12435 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R12479 += 1, R12435 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R12479 += 1, R12435 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R12479 += 1, R12435 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12479 += 1 };
  s1 -> s3 [73, 73] { R12479 += 1, R12435 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R12479 += 1, R12435 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R12479 += 1, R12435 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R12479 += 1, R12435 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12479 += 1, R12434 += 1, R12435 += 1 };
  s2 -> s3 [73, 73] { R12479 += 1, R12435 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R12479 += 1, R12435 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R12479 += 1, R12435 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R12479 += 1 };
  s3 -> s3 [0, 65535] { R12479 += 1, R12435 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12479 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12479 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R12481 += 1, R12436 += 1, R12437 += 1 };
  s0 -> s0 [0, 65535] { R12480 += 1, R12481 += 1 };
  s0 -> s4 [73, 73] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s2 -> s2 [0, 65535] { R12481 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [73, 73] { R12481 += 1, R12437 += 1 };
  s2 -> s6 [73, 73] { R12481 += 1, R12437 += 1 };
  s2 -> s2 [74, 76] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R12481 += 1, R12437 += 1 };
  s2 -> s2 [78, 65535] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R12481 += 1, R12436 += 1, R12437 += 1 };
  s3 -> s4 [73, 73] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R12481 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s6 [0, 76] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535] { R12481 += 1 };
  s6 -> s6 [0, 65535] { R12481 += 1, R12437 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [78, 65535] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s7 -> s6 [0, 76] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R12481 += 1, R12437 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [78, 65535] { R12481 += 1, R12437 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R12481 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s2 [0, 65535] { R12483 += 1, R12438 += 1, R12439 += 1 };
  s0 -> s0 [0, 65535] { R12482 += 1, R12483 += 1 };
  s0 -> s3 [73, 73] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R12483 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12483 += 1, R12438 += 1, R12439 += 1 };
  s2 -> s3 [73, 73] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R12483 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12483 += 1 };
  s4 -> s4 [0, 65535] { R12483 += 1, R12439 += 1, R11526 += 1, R11527 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12483 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s0 -> s2 [0, 72] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s0 [0, 65535] { R12484 += 1, R12485 += 1 };
  s0 -> s3 [0, 65535] { R12485 += 1, R12440 += 1, R12441 += 1 };
  s0 -> s4 [73, 73] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s0 -> s5 [73, 73] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s0 -> s6 [73, 73] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s7 [73, 73] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s1 [74, 77] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s0 -> s2 [74, 65535] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s8 [83, 83] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s0 -> s1 [84, 65535] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s1 -> s1 [0, 72] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s1 -> s4 [73, 73] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s1 -> s5 [73, 73] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s1 -> s1 [74, 77] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s1 -> s8 [83, 83] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s1 -> s1 [84, 65535] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s2 -> s1 [0, 72] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s2 -> s2 [0, 72] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s4 [73, 73] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s2 -> s5 [73, 73] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s2 -> s6 [73, 73] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s7 [73, 73] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s1 [74, 77] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s2 -> s2 [74, 65535] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s8 [83, 83] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s2 -> s1 [84, 65535] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s3 -> s1 [0, 72] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s3 -> s2 [0, 72] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s3 [0, 65535] { R12485 += 1, R12440 += 1, R12441 += 1 };
  s3 -> s4 [73, 73] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s3 -> s5 [73, 73] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s3 -> s6 [73, 73] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s7 [73, 73] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s1 [74, 77] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s3 -> s2 [74, 65535] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s8 [83, 83] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s3 -> s1 [84, 65535] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s5 -> s5 [0, 77] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s5 -> s10 [83, 83] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s5 -> s5 [84, 65535] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s7 -> s5 [0, 77] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s7 -> s7 [0, 65535] { R12485 += 1, R12441 += 1, R11532 += 1, R11533 += 1 };
  s7 -> s10 [83, 83] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s7 -> s5 [84, 65535] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s8 -> s8 [0, 72] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s8 -> s8 [0, 65535] { R12485 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R12485 += 1, R12441 += 1 };
  s8 -> s11 [73, 73] { R12485 += 1, R12441 += 1 };
  s8 -> s8 [74, 77] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s8 -> s8 [74, 65535] { R12485 += 1, R12441 += 1 };
  s8 -> s8 [83, 65535] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s10 -> s10 [0, 65535] { R12485 += 1, R12441 += 1 };
  s10 -> s12 [0, 65535] { R12485 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [83, 65535] { R12485 += 1, R12441 += 1, R11533 += 1 };
  s11 -> s11 [0, 65535] { R12485 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12485 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s2 [0, 72] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s0 [0, 65535] { R12486 += 1, R12487 += 1 };
  s0 -> s3 [0, 65535] { R12487 += 1, R12442 += 1, R12443 += 1 };
  s0 -> s4 [73, 73] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s5 [73, 73] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s6 [73, 73] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s7 [73, 73] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s1 [74, 65535] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s2 [74, 65535] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s1 -> s1 [0, 72] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s11 [0, 72] { R12487 += 1, R12443 += 1 };
  s1 -> s4 [73, 73] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s12 [73, 73] { R12487 += 1, R12443 += 1 };
  s1 -> s8 [73, 73] { R12487 += 1, R12443 += 1 };
  s1 -> s7 [73, 73] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s1 [74, 65535] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s11 [74, 65535] { R12487 += 1, R12443 += 1 };
  s2 -> s1 [0, 72] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s2 [0, 72] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s2 -> s4 [73, 73] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s5 [73, 73] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s2 -> s6 [73, 73] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s2 -> s7 [73, 73] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s1 [74, 65535] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s2 [74, 65535] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s1 [0, 72] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s2 [0, 72] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s3 [0, 65535] { R12487 += 1, R12442 += 1, R12443 += 1 };
  s3 -> s4 [73, 73] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s5 [73, 73] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s6 [73, 73] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s7 [73, 73] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s1 [74, 65535] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s2 [74, 65535] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s4 -> s4 [0, 65535] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s4 -> s8 [0, 65535] { R12487 += 1, R12443 += 1 };
  s6 -> s4 [0, 65535] { R12487 += 1, R12443 += 1, R12381 += 1, R12382 += 1 };
  s6 -> s6 [0, 65535] { R12487 += 1, R12443 += 1, R12380 += 1, R12381 += 1 };
  s8 -> s8 [0, 65535] { R12487 += 1, R12443 += 1 };
  s8 -> s9 [0, 65535] { R12487 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R12487 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R12487 += 1, R12443 += 1 };
  s11 -> s11 [0, 65535] { R12487 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R12487 += 1, R12443 += 1 };
  s11 -> s8 [73, 73] { R12487 += 1, R12443 += 1 };
  s11 -> s11 [74, 65535] { R12487 += 1, R12443 += 1 };
  s12 -> s12 [0, 65535] { R12487 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s0 -> s2 [0, 65535] { R12489 += 1, R12444 += 1, R12445 += 1 };
  s0 -> s0 [0, 65535] { R12488 += 1, R12489 += 1 };
  s0 -> s3 [73, 73] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s0 -> s4 [73, 73] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s0 -> s1 [74, 65535] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s1 -> s1 [0, 72] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12489 += 1 };
  s1 -> s3 [73, 73] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s1 -> s4 [73, 73] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s1 -> s1 [74, 65535] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s2 -> s1 [0, 72] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12489 += 1, R12444 += 1, R12445 += 1 };
  s2 -> s3 [73, 73] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s2 -> s4 [73, 73] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s2 -> s1 [74, 65535] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12489 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12489 += 1 };
  s4 -> s4 [0, 65535] { R12489 += 1, R12445 += 1, R12386 += 1, R12387 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12489 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R12489 && R20 - R12489 = -1 && R21 = R12489 && R22 - R12489 = -1 && R23 = R12489 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11535 + -1*R11533 - R53 = 0 && R52 + R11534 + R11532 = 0 && R12430 = 0 && R12431 = 0 && R12436 = 0 && R12437 = 0 && R12440 = 0 && R12441 = 0 && R12442 = 0 && R12443 = 0 && R12446 = 0 && R12447 = R12489 && R12448 = 0 && R12449 = R12489 && R12450 = 0 && R12451 = R12489 && R12452 = 0 && R12453 = R12489 && R12454 = 0 && R12455 = R12489 && R12456 = 0 && R12457 = R12489 && R12458 = 0 && R12459 = R12489 && R12460 = 0 && R12461 = R12489 && R12462 = 0 && R12463 = R12489 && R12464 = 0 && R12465 = R12489 && R12466 = 0 && R12467 = R12489 && R12468 = 0 && R12469 = R12489 && R12470 = 0 && R12471 = R12489 && R12472 = 0 && R12473 = R12489 && R12474 = 0 && R12475 = R12489 && R12476 = 0 && R12477 = R12489 && R12478 = 0 && R12479 = R12489 && R12480 = 0 && R12481 = R12489 && R12482 = 0 && R12483 = R12489 && R12484 = 0 && R12485 = R12489 && R12486 = 0 && R12487 = R12489 && R12488 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11535 + -1*R11533 - R53 < 1 && 0 < R12489 && (R1 != 0 || R17 = 0 || (R12390 = 0 && R12391 = 0)) && (R1 != 0 || R17 = 0 || (R12392 = 0 && R12393 = 0)) && (R1 != 0 || R17 = 0 || (R12394 = 0 && R12395 = 0)) && (R1 != 0 || R17 = 0 || (R12396 = 0 && R12397 = 0)) && (R1 != 0 || R17 = 0 || (R12398 = 0 && R12399 = 0)) && (R1 != 0 || R17 = 0 || (R12400 = 0 && R12401 = 0)) && (R1 != 0 || R17 = 0 || (R12402 = 0 && R12403 = 0)) && (R1 != 0 || R17 = 0 || (R12404 = 0 && R12405 = 0)) && (R1 != 0 || R17 = 0 || (R12406 = 0 && R12407 = 0)) && (R1 != 0 || R17 = 0 || (R12408 = 0 && R12409 = 0)) && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R11535 + R11533 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R11535 + R11533 < 1))) && (R12390 != 0 || R1 = R12391 || R1 < 1) && (R12392 != 0 || R1 = R12393 || R1 < 1) && (R12394 != 0 || R1 = R12395 || R1 < 1) && (R12396 != 0 || R1 = R12397 || R1 < 1) && (R12398 != 0 || R1 = R12399 || R1 < 1) && (R12400 != 0 || R1 = R12401 || R1 < 1) && (R12402 != 0 || R1 = R12403 || R1 < 1) && (R12404 != 0 || R1 = R12405 || R1 < 1) && (R12406 != 0 || R1 = R12407 || R1 < 1) && (R12408 != 0 || R1 = R12409 || R1 < 1) && (R18 = 0 || (R12428 = 0 && R12429 = 0)) && (R18 = 0 || (R12432 = 0 && R12433 = 0)) && (R18 = 0 || (R12434 = 0 && R12435 = 0)) && (R18 = 0 || (R12438 = 0 && R12439 = 0)) && (R18 = 0 || (R12444 = 0 && R12445 = 0)) && (R19 = 0 || (R12410 = 0 && R12411 = 0)) && (R19 = 0 || (R12412 = 0 && R12413 = 0)) && (R19 = 0 || (R12414 = 0 && R12415 = 0)) && (R19 = 0 || (R12416 = 0 && R12417 = 0)) && (R19 = 0 || (R12418 = 0 && R12419 = 0)) && (R19 = 0 || (R12420 = 0 && R12421 = 0)) && (R19 = 0 || (R12422 = 0 && R12423 = 0)) && (R19 = 0 || (R12424 = 0 && R12425 = 0)) && (R19 = 0 || (R12426 = 0 && R12427 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0)) && (R58 + R12385 + R12382 = 0 || (R56 + R12383 + R12380 = 0 && R57 + R12384 + R12381 = 0)) && (R58 + R12385 + R12382 = 0 || (R62 + R12388 + R12386 = 0 && R63 + R12389 + R12387 = 0)) && (R12390 = 0 || R1 < 1) && (R12392 = 0 || R1 < 1) && (R12394 = 0 || R1 < 1) && (R12396 = 0 || R1 < 1) && (R12398 = 0 || R1 < 1) && (R12400 = 0 || R1 < 1) && (R12402 = 0 || R1 < 1) && (R12404 = 0 || R1 < 1) && (R12406 = 0 || R1 < 1) && (R12408 = 0 || R1 < 1);
// End of Parikh automata intersection problem
