// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R506, R507, R508, R509, R510, R511, R52, R53, R56, R57, R58, R616, R617, R618, R619, R62, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R63, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R66, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R67, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R68, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R69, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R70, R700, R701, R702, R703, R704, R705, R706, R707, R708, R709, R71, R710, R711, R712, R713, R714, R715, R716, R717, R718, R719, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R640 += 1, R641 += 1 };
  s0 -> s1 [0, 65535] { R641 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R641 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R643 += 1 };
  s0 -> s0 [0, 65535] { R642 += 1, R643 += 1 };
  s0 -> s2 [73, 73] { R643 += 1 };
  s0 -> s3 [73, 73] { R643 += 1 };
  s0 -> s1 [78, 65535] { R643 += 1 };
  s1 -> s1 [0, 72] { R643 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R643 += 1 };
  s1 -> s3 [73, 73] { R643 += 1 };
  s1 -> s1 [78, 65535] { R643 += 1 };
  s2 -> s2 [0, 73] { R643 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R643 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R645 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R644 += 1, R645 += 1 };
  s0 -> s2 [73, 73] { R645 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R645 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R645 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R645 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R645 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R645 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R645 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R645 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R647 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R646 += 1, R647 += 1 };
  s0 -> s2 [73, 73] { R647 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R647 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R647 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R647 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R647 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R647 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R647 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R647 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R649 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R648 += 1, R649 += 1 };
  s0 -> s2 [73, 73] { R649 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R649 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R649 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R649 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R649 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R649 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R649 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R649 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R651 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R650 += 1, R651 += 1 };
  s0 -> s2 [73, 73] { R651 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R651 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R651 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R651 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R651 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R651 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R651 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R651 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R653 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R652 += 1, R653 += 1 };
  s0 -> s2 [73, 73] { R653 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R653 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R653 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R653 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R653 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R653 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R653 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R653 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R655 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R654 += 1, R655 += 1 };
  s0 -> s2 [73, 73] { R655 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R655 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R655 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R655 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R655 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R655 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R655 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R655 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R657 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R656 += 1, R657 += 1 };
  s0 -> s2 [73, 73] { R657 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R657 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R657 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R657 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R657 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R657 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R657 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R657 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R677 += 1 };
  s0 -> s0 [0, 65535] { R676 += 1, R677 += 1 };
  s0 -> s2 [73, 73] { R677 += 1 };
  s0 -> s1 [74, 65535] { R677 += 1 };
  s1 -> s1 [0, 72] { R677 += 1 };
  s1 -> s2 [73, 73] { R677 += 1 };
  s1 -> s1 [74, 65535] { R677 += 1 };
  s2 -> s2 [0, 65535] { R677 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R678 += 1, R679 += 1 };
  s0 -> s1 [0, 65535] { R679 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R679 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R681 += 1 };
  s0 -> s2 [0, 65535] { R681 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R680 += 1, R681 += 1 };
  s0 -> s3 [73, 73] { R681 += 1 };
  s0 -> s1 [74, 65535] { R681 += 1 };
  s1 -> s1 [0, 72] { R681 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R681 += 1 };
  s1 -> s1 [74, 65535] { R681 += 1 };
  s2 -> s1 [0, 72] { R681 += 1 };
  s2 -> s2 [0, 65535] { R681 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R681 += 1 };
  s2 -> s1 [74, 65535] { R681 += 1 };
  s3 -> s3 [0, 65535] { R681 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R683 += 1, R621 += 1 };
  s0 -> s2 [0, 65535] { R683 += 1, R620 += 1, R621 += 1 };
  s0 -> s0 [0, 65535] { R682 += 1, R683 += 1 };
  s0 -> s1 [74, 65535] { R683 += 1, R621 += 1 };
  s1 -> s1 [0, 72] { R683 += 1, R621 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R683 += 1 };
  s1 -> s1 [74, 65535] { R683 += 1, R621 += 1 };
  s2 -> s1 [0, 72] { R683 += 1, R621 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R683 += 1, R620 += 1, R621 += 1 };
  s2 -> s1 [74, 65535] { R683 += 1, R621 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R684 += 1, R685 += 1 };
  s0 -> s1 [0, 65535] { R685 += 1, R623 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R685 += 1, R622 += 1, R623 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R685 += 1, R623 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R685 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R685 += 1, R623 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R685 += 1, R622 += 1, R623 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R685 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R687 += 1, R625 += 1 };
  s0 -> s0 [0, 65535] { R686 += 1, R687 += 1 };
  s0 -> s2 [0, 65535] { R687 += 1, R624 += 1, R625 += 1 };
  s0 -> s1 [77, 65535] { R687 += 1, R625 += 1 };
  s1 -> s1 [0, 73] { R687 += 1, R625 += 1 };
  s1 -> s1 [0, 65535] { R687 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R687 += 1, R625 += 1 };
  s2 -> s1 [0, 73] { R687 += 1, R625 += 1 };
  s2 -> s2 [0, 65535] { R687 += 1, R624 += 1, R625 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R687 += 1, R625 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R688 += 1, R689 += 1 };
  s0 -> s1 [0, 65535] { R689 += 1, R627 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R689 += 1, R626 += 1, R627 += 1 };
  s1 -> s1 [0, 65535] { R689 += 1, R627 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R689 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R689 += 1, R627 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R689 += 1, R626 += 1, R627 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R689 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R691 += 1, R629 += 1 };
  s0 -> s0 [0, 65535] { R690 += 1, R691 += 1 };
  s0 -> s2 [0, 65535] { R691 += 1, R629 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R691 += 1, R628 += 1, R629 += 1 };
  s0 -> s1 [78, 65535] { R691 += 1, R629 += 1 };
  s1 -> s1 [0, 76] { R691 += 1, R629 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R691 += 1 };
  s1 -> s1 [78, 65535] { R691 += 1, R629 += 1 };
  s2 -> s1 [0, 76] { R691 += 1, R629 += 1 };
  s2 -> s2 [0, 65535] { R691 += 1, R629 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R691 += 1 };
  s2 -> s1 [78, 65535] { R691 += 1, R629 += 1 };
  s3 -> s1 [0, 76] { R691 += 1, R629 += 1 };
  s3 -> s2 [0, 65535] { R691 += 1, R629 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R691 += 1, R628 += 1, R629 += 1 };
  s3 -> s1 [78, 65535] { R691 += 1, R629 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R691 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R693 += 1, R631 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R692 += 1, R693 += 1 };
  s0 -> s2 [0, 65535] { R693 += 1, R631 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R693 += 1, R630 += 1, R631 += 1 };
  s0 -> s1 [78, 65535] { R693 += 1, R631 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R693 += 1, R631 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R693 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R693 += 1, R631 += 1 };
  s1 -> s1 [78, 65535] { R693 += 1, R631 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R693 += 1, R631 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R693 += 1 };
  s2 -> s2 [0, 65535] { R693 += 1, R631 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R693 += 1, R631 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R693 += 1, R631 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R693 += 1, R631 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R693 += 1, R630 += 1, R631 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R693 += 1, R631 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R693 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R695 += 1, R633 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R695 += 1, R633 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R695 += 1, R632 += 1, R633 += 1 };
  s0 -> s0 [0, 65535] { R694 += 1, R695 += 1 };
  s1 -> s1 [0, 65535] { R695 += 1, R633 += 1, R77 += 1, R78 += 1 };
  s1 -> s2 [0, 65535] { R695 += 1, R633 += 1, R78 += 1, R79 += 1 };
  s1 -> s5 [0, 65535] { R695 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R695 += 1, R633 += 1, R78 += 1, R79 += 1 };
  s2 -> s5 [0, 65535] { R695 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R695 += 1, R633 += 1 };
  s3 -> s1 [0, 65535] { R695 += 1, R633 += 1, R77 += 1, R78 += 1 };
  s3 -> s2 [0, 65535] { R695 += 1, R633 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R695 += 1, R632 += 1, R633 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R695 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R695 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R695 += 1, R633 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R697 += 1, R635 += 1, R83 += 1 };
  s0 -> s1 [0, 65535] { R697 += 1, R635 += 1 };
  s0 -> s2 [0, 65535] { R697 += 1, R634 += 1, R635 += 1 };
  s0 -> s0 [0, 65535] { R696 += 1, R697 += 1 };
  s0 -> s1 [83, 65535] { R697 += 1, R635 += 1, R83 += 1 };
  s1 -> s1 [0, 77] { R697 += 1, R635 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R697 += 1, R635 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R697 += 1 };
  s1 -> s1 [83, 65535] { R697 += 1, R635 += 1, R83 += 1 };
  s2 -> s1 [0, 77] { R697 += 1, R635 += 1, R83 += 1 };
  s2 -> s1 [0, 65535] { R697 += 1, R635 += 1 };
  s2 -> s2 [0, 65535] { R697 += 1, R634 += 1, R635 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [83, 65535] { R697 += 1, R635 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R697 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R699 += 1, R637 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R698 += 1, R699 += 1 };
  s0 -> s2 [0, 65535] { R699 += 1, R636 += 1, R637 += 1 };
  s0 -> s3 [0, 65535] { R699 += 1, R637 += 1 };
  s1 -> s1 [0, 65535] { R699 += 1, R637 += 1, R510 += 1, R511 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R699 += 1, R637 += 1 };
  s1 -> s5 [0, 65535] { R699 += 1 };
  s2 -> s1 [0, 65535] { R699 += 1, R637 += 1, R510 += 1, R511 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R699 += 1, R636 += 1, R637 += 1 };
  s2 -> s3 [0, 65535] { R699 += 1, R637 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R699 += 1, R637 += 1 };
  s3 -> s5 [0, 65535] { R699 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R699 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R701 += 1, R639 += 1, R619 += 1 };
  s0 -> s1 [0, 65535] { R701 += 1, R639 += 1 };
  s0 -> s0 [0, 65535] { R700 += 1, R701 += 1 };
  s0 -> s2 [0, 65535] { R701 += 1, R638 += 1, R639 += 1 };
  s0 -> s3 [77, 77] { R701 += 1, R639 += 1, R619 += 1 };
  s0 -> s4 [77, 77] { R701 += 1, R639 += 1, R619 += 1 };
  s0 -> s1 [84, 65535] { R701 += 1, R639 += 1, R619 += 1 };
  s1 -> s1 [0, 76] { R701 += 1, R639 += 1, R619 += 1 };
  s1 -> s1 [0, 65535] { R701 += 1, R639 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R701 += 1 };
  s1 -> s3 [77, 77] { R701 += 1, R639 += 1, R619 += 1 };
  s1 -> s4 [77, 77] { R701 += 1, R639 += 1, R619 += 1 };
  s1 -> s1 [84, 65535] { R701 += 1, R639 += 1, R619 += 1 };
  s2 -> s1 [0, 76] { R701 += 1, R639 += 1, R619 += 1 };
  s2 -> s1 [0, 65535] { R701 += 1, R639 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R701 += 1, R638 += 1, R639 += 1 };
  s2 -> s3 [77, 77] { R701 += 1, R639 += 1, R619 += 1 };
  s2 -> s4 [77, 77] { R701 += 1, R639 += 1, R619 += 1 };
  s2 -> s1 [84, 65535] { R701 += 1, R639 += 1, R619 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R701 += 1 };
  s3 -> s3 [0, 65535] { R701 += 1, R639 += 1 };
  s4 -> s4 [0, 77] { R701 += 1, R639 += 1, R619 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R701 += 1 };
  s4 -> s4 [0, 65535] { R701 += 1, R639 += 1 };
  s4 -> s4 [84, 65535] { R701 += 1, R639 += 1, R619 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R701 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R703 += 1, R659 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R703 += 1, R658 += 1, R659 += 1 };
  s0 -> s0 [0, 65535] { R702 += 1, R703 += 1 };
  s1 -> s1 [0, 65535] { R703 += 1, R659 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R703 += 1 };
  s2 -> s1 [0, 65535] { R703 += 1, R659 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R703 += 1, R658 += 1, R659 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R703 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R705 += 1, R661 += 1 };
  s0 -> s0 [0, 65535] { R704 += 1, R705 += 1 };
  s0 -> s2 [0, 65535] { R705 += 1, R660 += 1, R661 += 1 };
  s0 -> s3 [73, 73] { R705 += 1, R661 += 1 };
  s0 -> s4 [73, 73] { R705 += 1, R661 += 1 };
  s0 -> s5 [77, 77] { R705 += 1, R661 += 1 };
  s0 -> s1 [78, 65535] { R705 += 1, R661 += 1 };
  s1 -> s1 [0, 72] { R705 += 1, R661 += 1 };
  s1 -> s3 [73, 73] { R705 += 1, R661 += 1 };
  s1 -> s4 [73, 73] { R705 += 1, R661 += 1 };
  s1 -> s5 [77, 77] { R705 += 1, R661 += 1 };
  s1 -> s1 [78, 65535] { R705 += 1, R661 += 1 };
  s2 -> s1 [0, 72] { R705 += 1, R661 += 1 };
  s2 -> s2 [0, 65535] { R705 += 1, R660 += 1, R661 += 1 };
  s2 -> s3 [73, 73] { R705 += 1, R661 += 1 };
  s2 -> s4 [73, 73] { R705 += 1, R661 += 1 };
  s2 -> s5 [77, 77] { R705 += 1, R661 += 1 };
  s2 -> s1 [78, 65535] { R705 += 1, R661 += 1 };
  s4 -> s4 [0, 73] { R705 += 1, R661 += 1 };
  s4 -> s7 [77, 77] { R705 += 1, R661 += 1 };
  s4 -> s4 [78, 65535] { R705 += 1, R661 += 1 };
  s5 -> s5 [0, 72] { R705 += 1, R661 += 1 };
  s5 -> s5 [0, 65535] { R705 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R705 += 1, R661 += 1 };
  s5 -> s8 [73, 73] { R705 += 1, R661 += 1 };
  s5 -> s5 [77, 65535] { R705 += 1, R661 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R705 += 1, R661 += 1 };
  s7 -> s7 [0, 65535] { R705 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R705 += 1, R661 += 1 };
  s8 -> s8 [0, 65535] { R705 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R707 += 1, R663 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R706 += 1, R707 += 1 };
  s0 -> s2 [0, 65535] { R707 += 1, R662 += 1, R663 += 1 };
  s0 -> s3 [73, 73] { R707 += 1, R663 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R707 += 1, R663 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R707 += 1, R663 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R707 += 1, R663 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R707 += 1 };
  s1 -> s3 [73, 73] { R707 += 1, R663 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R707 += 1, R663 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R707 += 1, R663 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R707 += 1, R663 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R707 += 1, R662 += 1, R663 += 1 };
  s2 -> s3 [73, 73] { R707 += 1, R663 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R707 += 1, R663 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R707 += 1, R663 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R707 += 1, R663 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R707 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R707 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R707 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R709 += 1, R665 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R708 += 1, R709 += 1 };
  s0 -> s2 [0, 65535] { R709 += 1, R664 += 1, R665 += 1 };
  s0 -> s3 [73, 73] { R709 += 1, R665 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R709 += 1, R665 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R709 += 1, R665 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R709 += 1, R665 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R709 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R709 += 1, R665 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R709 += 1, R665 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R709 += 1, R665 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R709 += 1, R665 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R709 += 1, R664 += 1, R665 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R709 += 1, R665 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R709 += 1, R665 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R709 += 1, R665 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R709 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R709 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R709 += 1, R665 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R709 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R710 += 1, R711 += 1 };
  s0 -> s2 [0, 65535] { R711 += 1, R666 += 1, R667 += 1 };
  s0 -> s3 [73, 73] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R711 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R711 += 1, R666 += 1, R667 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R711 += 1, R667 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R711 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R711 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R711 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R713 += 1, R668 += 1, R669 += 1 };
  s0 -> s0 [0, 65535] { R712 += 1, R713 += 1 };
  s0 -> s3 [73, 73] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R713 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R713 += 1, R668 += 1, R669 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R713 += 1, R669 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R713 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R713 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R713 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R715 += 1, R671 += 1, R81 += 1 };
  s0 -> s2 [0, 72] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s0 -> s3 [0, 65535] { R715 += 1, R670 += 1, R671 += 1 };
  s0 -> s0 [0, 65535] { R714 += 1, R715 += 1 };
  s0 -> s4 [73, 73] { R715 += 1, R671 += 1, R81 += 1 };
  s0 -> s5 [73, 73] { R715 += 1, R671 += 1, R81 += 1 };
  s0 -> s6 [73, 73] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s0 -> s7 [73, 73] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s0 -> s1 [74, 77] { R715 += 1, R671 += 1, R81 += 1 };
  s0 -> s2 [74, 65535] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [83, 83] { R715 += 1, R671 += 1, R81 += 1 };
  s0 -> s1 [84, 65535] { R715 += 1, R671 += 1, R81 += 1 };
  s1 -> s1 [0, 72] { R715 += 1, R671 += 1, R81 += 1 };
  s1 -> s4 [73, 73] { R715 += 1, R671 += 1, R81 += 1 };
  s1 -> s5 [73, 73] { R715 += 1, R671 += 1, R81 += 1 };
  s1 -> s1 [74, 77] { R715 += 1, R671 += 1, R81 += 1 };
  s1 -> s8 [83, 83] { R715 += 1, R671 += 1, R81 += 1 };
  s1 -> s1 [84, 65535] { R715 += 1, R671 += 1, R81 += 1 };
  s2 -> s1 [0, 72] { R715 += 1, R671 += 1, R81 += 1 };
  s2 -> s2 [0, 72] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [73, 73] { R715 += 1, R671 += 1, R81 += 1 };
  s2 -> s5 [73, 73] { R715 += 1, R671 += 1, R81 += 1 };
  s2 -> s6 [73, 73] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s2 -> s7 [73, 73] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s2 -> s1 [74, 77] { R715 += 1, R671 += 1, R81 += 1 };
  s2 -> s2 [74, 65535] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s2 -> s8 [83, 83] { R715 += 1, R671 += 1, R81 += 1 };
  s2 -> s1 [84, 65535] { R715 += 1, R671 += 1, R81 += 1 };
  s3 -> s1 [0, 72] { R715 += 1, R671 += 1, R81 += 1 };
  s3 -> s2 [0, 72] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R715 += 1, R670 += 1, R671 += 1 };
  s3 -> s4 [73, 73] { R715 += 1, R671 += 1, R81 += 1 };
  s3 -> s5 [73, 73] { R715 += 1, R671 += 1, R81 += 1 };
  s3 -> s6 [73, 73] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s3 -> s7 [73, 73] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s3 -> s1 [74, 77] { R715 += 1, R671 += 1, R81 += 1 };
  s3 -> s2 [74, 65535] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [83, 83] { R715 += 1, R671 += 1, R81 += 1 };
  s3 -> s1 [84, 65535] { R715 += 1, R671 += 1, R81 += 1 };
  s4 -> s4 [0, 77] { R715 += 1, R671 += 1, R81 += 1 };
  s4 -> s10 [83, 83] { R715 += 1, R671 += 1, R81 += 1 };
  s4 -> s4 [84, 65535] { R715 += 1, R671 += 1, R81 += 1 };
  s6 -> s4 [0, 77] { R715 += 1, R671 += 1, R81 += 1 };
  s6 -> s6 [0, 65535] { R715 += 1, R671 += 1, R80 += 1, R81 += 1 };
  s6 -> s10 [83, 83] { R715 += 1, R671 += 1, R81 += 1 };
  s6 -> s4 [84, 65535] { R715 += 1, R671 += 1, R81 += 1 };
  s8 -> s8 [0, 72] { R715 += 1, R671 += 1, R81 += 1 };
  s8 -> s8 [0, 65535] { R715 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R715 += 1, R671 += 1 };
  s8 -> s11 [73, 73] { R715 += 1, R671 += 1 };
  s8 -> s8 [74, 77] { R715 += 1, R671 += 1, R81 += 1 };
  s8 -> s8 [74, 65535] { R715 += 1, R671 += 1 };
  s8 -> s8 [83, 65535] { R715 += 1, R671 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R715 += 1, R671 += 1, R81 += 1 };
  s10 -> s10 [0, 65535] { R715 += 1, R671 += 1 };
  s10 -> s12 [0, 65535] { R715 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [83, 65535] { R715 += 1, R671 += 1, R81 += 1 };
  s11 -> s11 [0, 65535] { R715 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R715 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s0 -> s2 [0, 72] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s0 -> s3 [0, 65535] { R717 += 1, R672 += 1, R673 += 1 };
  s0 -> s0 [0, 65535] { R716 += 1, R717 += 1 };
  s0 -> s4 [73, 73] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s0 -> s5 [73, 73] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s0 -> s6 [73, 73] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s0 -> s7 [73, 73] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s0 -> s1 [74, 65535] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s0 -> s2 [74, 65535] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s1 -> s1 [0, 72] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R717 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [73, 73] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s1 -> s7 [73, 73] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [74, 65535] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [0, 72] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [0, 72] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s2 -> s4 [73, 73] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s2 -> s5 [73, 73] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s2 -> s6 [73, 73] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s2 -> s7 [73, 73] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [74, 65535] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [74, 65535] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s3 -> s1 [0, 72] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s3 -> s2 [0, 72] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s3 -> s3 [0, 65535] { R717 += 1, R672 += 1, R673 += 1 };
  s3 -> s4 [73, 73] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s3 -> s5 [73, 73] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s3 -> s6 [73, 73] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s3 -> s7 [73, 73] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s3 -> s1 [74, 65535] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s3 -> s2 [74, 65535] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s4 -> s4 [0, 65535] { R717 += 1, R673 += 1, R506 += 1, R507 += 1 };
  s4 -> s7 [0, 65535] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s5 -> s5 [0, 65535] { R717 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R717 += 1 };
  s7 -> s7 [0, 65535] { R717 += 1, R673 += 1, R507 += 1, R508 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R717 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s0 -> s2 [0, 72] { R719 += 1, R675 += 1, R617 += 1 };
  s0 -> s3 [0, 65535] { R719 += 1, R674 += 1, R675 += 1 };
  s0 -> s0 [0, 65535] { R718 += 1, R719 += 1 };
  s0 -> s4 [73, 73] { R719 += 1, R675 += 1, R617 += 1 };
  s0 -> s5 [73, 73] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s0 -> s6 [73, 73] { R719 += 1, R675 += 1, R617 += 1 };
  s0 -> s7 [73, 73] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s0 -> s2 [74, 76] { R719 += 1, R675 += 1, R617 += 1 };
  s0 -> s1 [74, 65535] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s0 -> s2 [84, 65535] { R719 += 1, R675 += 1, R617 += 1 };
  s1 -> s1 [0, 72] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s1 -> s2 [0, 72] { R719 += 1, R675 += 1, R617 += 1 };
  s1 -> s4 [73, 73] { R719 += 1, R675 += 1, R617 += 1 };
  s1 -> s5 [73, 73] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s1 -> s6 [73, 73] { R719 += 1, R675 += 1, R617 += 1 };
  s1 -> s7 [73, 73] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s1 -> s2 [74, 76] { R719 += 1, R675 += 1, R617 += 1 };
  s1 -> s1 [74, 65535] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s1 -> s2 [84, 65535] { R719 += 1, R675 += 1, R617 += 1 };
  s2 -> s2 [0, 72] { R719 += 1, R675 += 1, R617 += 1 };
  s2 -> s2 [0, 65535] { R719 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R719 += 1, R675 += 1 };
  s2 -> s6 [73, 73] { R719 += 1, R675 += 1 };
  s2 -> s2 [74, 76] { R719 += 1, R675 += 1, R617 += 1 };
  s2 -> s2 [74, 65535] { R719 += 1, R675 += 1 };
  s2 -> s2 [84, 65535] { R719 += 1, R675 += 1, R617 += 1 };
  s3 -> s1 [0, 72] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s3 -> s2 [0, 72] { R719 += 1, R675 += 1, R617 += 1 };
  s3 -> s3 [0, 65535] { R719 += 1, R674 += 1, R675 += 1 };
  s3 -> s4 [73, 73] { R719 += 1, R675 += 1, R617 += 1 };
  s3 -> s5 [73, 73] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s3 -> s6 [73, 73] { R719 += 1, R675 += 1, R617 += 1 };
  s3 -> s7 [73, 73] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s3 -> s2 [74, 76] { R719 += 1, R675 += 1, R617 += 1 };
  s3 -> s1 [74, 65535] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s3 -> s2 [84, 65535] { R719 += 1, R675 += 1, R617 += 1 };
  s4 -> s4 [0, 65535] { R719 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 76] { R719 += 1, R675 += 1, R617 += 1 };
  s6 -> s6 [0, 65535] { R719 += 1, R675 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R719 += 1 };
  s6 -> s6 [84, 65535] { R719 += 1, R675 += 1, R617 += 1 };
  s7 -> s6 [0, 76] { R719 += 1, R675 += 1, R617 += 1 };
  s7 -> s7 [0, 65535] { R719 += 1, R675 += 1, R616 += 1, R617 += 1 };
  s7 -> s6 [84, 65535] { R719 += 1, R675 += 1, R617 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R719 += 1 };
  accepting s4, s8, s2, s9, s6;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R719 && R20 - R719 = -1 && R21 = R719 && R22 - R719 = -1 && R23 = R719 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R660 = 0 && R661 = 0 && R670 = 0 && R671 = 0 && R672 = 0 && R673 = 0 && R674 = 0 && R675 = 0 && R676 = 0 && R677 = R719 && R678 = 0 && R679 = R719 && R680 = 0 && R681 = R719 && R682 = 0 && R683 = R719 && R684 = 0 && R685 = R719 && R686 = 0 && R687 = R719 && R688 = 0 && R689 = R719 && R690 = 0 && R691 = R719 && R692 = 0 && R693 = R719 && R694 = 0 && R695 = R719 && R696 = 0 && R697 = R719 && R698 = 0 && R699 = R719 && R700 = 0 && R701 = R719 && R702 = 0 && R703 = R719 && R704 = 0 && R705 = R719 && R706 = 0 && R707 = R719 && R708 = 0 && R709 = R719 && R710 = 0 && R711 = R719 && R712 = 0 && R713 = R719 && R714 = 0 && R715 = R719 && R716 = 0 && R717 = R719 && R718 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R719 && (R1 != 0 || R17 = 0 || (R620 = 0 && R621 = 0)) && (R1 != 0 || R17 = 0 || (R622 = 0 && R623 = 0)) && (R1 != 0 || R17 = 0 || (R624 = 0 && R625 = 0)) && (R1 != 0 || R17 = 0 || (R626 = 0 && R627 = 0)) && (R1 != 0 || R17 = 0 || (R628 = 0 && R629 = 0)) && (R1 != 0 || R17 = 0 || (R630 = 0 && R631 = 0)) && (R1 != 0 || R17 = 0 || (R632 = 0 && R633 = 0)) && (R1 != 0 || R17 = 0 || (R634 = 0 && R635 = 0)) && (R1 != 0 || R17 = 0 || (R636 = 0 && R637 = 0)) && (R1 != 0 || R17 = 0 || (R638 = 0 && R639 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R620 != 0 || R1 = R621 || R1 < 1) && (R622 != 0 || R1 = R623 || R1 < 1) && (R624 != 0 || R1 = R625 || R1 < 1) && (R626 != 0 || R1 = R627 || R1 < 1) && (R628 != 0 || R1 = R629 || R1 < 1) && (R630 != 0 || R1 = R631 || R1 < 1) && (R632 != 0 || R1 = R633 || R1 < 1) && (R634 != 0 || R1 = R635 || R1 < 1) && (R636 != 0 || R1 = R637 || R1 < 1) && (R638 != 0 || R1 = R639 || R1 < 1) && (R18 = 0 || (R658 = 0 && R659 = 0)) && (R18 = 0 || (R662 = 0 && R663 = 0)) && (R18 = 0 || (R664 = 0 && R665 = 0)) && (R18 = 0 || (R666 = 0 && R667 = 0)) && (R18 = 0 || (R668 = 0 && R669 = 0)) && (R19 = 0 || (R640 = 0 && R641 = 0)) && (R19 = 0 || (R642 = 0 && R643 = 0)) && (R19 = 0 || (R644 = 0 && R645 = 0)) && (R19 = 0 || (R646 = 0 && R647 = 0)) && (R19 = 0 || (R648 = 0 && R649 = 0)) && (R19 = 0 || (R650 = 0 && R651 = 0)) && (R19 = 0 || (R652 = 0 && R653 = 0)) && (R19 = 0 || (R654 = 0 && R655 = 0)) && (R19 = 0 || (R656 = 0 && R657 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R511 + R508 = 0 || (R56 + R509 + R506 = 0 && R57 + R510 + R507 = 0)) && (R58 + R511 + R508 = 0 || (R62 + R618 + R616 = 0 && R63 + R619 + R617 = 0)) && (R620 = 0 || R1 < 1) && (R622 = 0 || R1 < 1) && (R624 = 0 || R1 < 1) && (R626 = 0 || R1 < 1) && (R628 = 0 || R1 < 1) && (R630 = 0 || R1 < 1) && (R632 = 0 || R1 < 1) && (R634 = 0 || R1 < 1) && (R636 = 0 || R1 < 1) && (R638 = 0 || R1 < 1);
// End of Parikh automata intersection problem
