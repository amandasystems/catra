// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R6440, R6441, R6442, R6443, R6444, R6445, R66, R6654, R6655, R6656, R6657, R6658, R6659, R6660, R6661, R6662, R6663, R6664, R6665, R6666, R6667, R6668, R6669, R6670, R6671, R6672, R6673, R6674, R6675, R6676, R6677, R6678, R6679, R6680, R6681, R6682, R6683, R6684, R6685, R6686, R6687, R6688, R6689, R6690, R6691, R6692, R6693, R6694, R6695, R6696, R6697, R6698, R6699, R67, R6700, R6701, R6702, R6703, R6704, R6705, R6706, R6707, R6708, R6709, R6710, R6711, R6712, R6713, R6714, R6715, R6716, R6717, R6718, R6719, R6720, R6721, R6722, R6723, R6724, R6725, R6726, R6727, R6728, R6729, R6730, R6731, R6732, R6733, R6734, R6735, R6736, R6737, R6738, R6739, R6740, R6741, R6742, R6743, R6744, R6745, R6746, R6747, R6748, R6749, R6750, R6751, R6752, R6753, R6754, R6755, R6756, R6757, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6678 += 1, R6679 += 1 };
  s0 -> s1 [0, 65535] { R6679 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6679 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R6681 += 1 };
  s0 -> s0 [0, 65535] { R6680 += 1, R6681 += 1 };
  s0 -> s2 [73, 73] { R6681 += 1 };
  s0 -> s3 [73, 73] { R6681 += 1 };
  s0 -> s1 [78, 65535] { R6681 += 1 };
  s1 -> s1 [0, 72] { R6681 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6681 += 1 };
  s1 -> s3 [73, 73] { R6681 += 1 };
  s1 -> s1 [78, 65535] { R6681 += 1 };
  s2 -> s2 [0, 73] { R6681 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R6681 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R6683 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R6682 += 1, R6683 += 1 };
  s0 -> s2 [73, 73] { R6683 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R6683 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R6683 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R6683 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6683 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R6683 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R6683 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6683 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R6685 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R6684 += 1, R6685 += 1 };
  s0 -> s2 [73, 73] { R6685 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R6685 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R6685 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R6685 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6685 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R6685 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R6685 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6685 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R6687 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R6686 += 1, R6687 += 1 };
  s0 -> s2 [73, 73] { R6687 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R6687 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R6687 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R6687 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6687 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R6687 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R6687 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6687 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R6689 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6688 += 1, R6689 += 1 };
  s0 -> s2 [73, 73] { R6689 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R6689 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R6689 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R6689 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6689 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R6689 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R6689 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R6689 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R6691 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R6690 += 1, R6691 += 1 };
  s0 -> s2 [73, 73] { R6691 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R6691 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R6691 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R6691 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6691 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R6691 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R6691 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R6691 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R6693 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R6692 += 1, R6693 += 1 };
  s0 -> s2 [73, 73] { R6693 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R6693 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R6693 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R6693 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6693 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R6693 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R6693 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6693 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R6695 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R6694 += 1, R6695 += 1 };
  s0 -> s2 [73, 73] { R6695 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R6695 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R6695 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R6695 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6695 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R6695 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R6695 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R6695 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R6715 += 1 };
  s0 -> s0 [0, 65535] { R6714 += 1, R6715 += 1 };
  s0 -> s2 [73, 73] { R6715 += 1 };
  s0 -> s1 [74, 65535] { R6715 += 1 };
  s1 -> s1 [0, 72] { R6715 += 1 };
  s1 -> s2 [73, 73] { R6715 += 1 };
  s1 -> s1 [74, 65535] { R6715 += 1 };
  s2 -> s2 [0, 65535] { R6715 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6717 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6716 += 1, R6717 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6717 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R6719 += 1 };
  s0 -> s2 [0, 65535] { R6719 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R6718 += 1, R6719 += 1 };
  s0 -> s3 [73, 73] { R6719 += 1 };
  s0 -> s1 [74, 65535] { R6719 += 1 };
  s1 -> s1 [0, 72] { R6719 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R6719 += 1 };
  s1 -> s1 [74, 65535] { R6719 += 1 };
  s2 -> s1 [0, 72] { R6719 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6719 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R6719 += 1 };
  s2 -> s1 [74, 65535] { R6719 += 1 };
  s3 -> s3 [0, 65535] { R6719 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R6721 += 1, R6659 += 1 };
  s0 -> s0 [0, 65535] { R6720 += 1, R6721 += 1 };
  s0 -> s2 [0, 65535] { R6721 += 1, R6658 += 1, R6659 += 1 };
  s0 -> s1 [74, 65535] { R6721 += 1, R6659 += 1 };
  s1 -> s1 [0, 72] { R6721 += 1, R6659 += 1 };
  s1 -> s1 [0, 65535] { R6721 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R6721 += 1, R6659 += 1 };
  s2 -> s1 [0, 72] { R6721 += 1, R6659 += 1 };
  s2 -> s2 [0, 65535] { R6721 += 1, R6658 += 1, R6659 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R6721 += 1, R6659 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6723 += 1, R6660 += 1, R6661 += 1 };
  s0 -> s0 [0, 65535] { R6722 += 1, R6723 += 1 };
  s0 -> s2 [0, 65535] { R6723 += 1, R6661 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R6723 += 1, R6660 += 1, R6661 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6723 += 1, R6661 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R6723 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6723 += 1, R6661 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R6723 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R6725 += 1, R6663 += 1 };
  s0 -> s2 [0, 65535] { R6725 += 1, R6662 += 1, R6663 += 1 };
  s0 -> s0 [0, 65535] { R6724 += 1, R6725 += 1 };
  s0 -> s1 [77, 65535] { R6725 += 1, R6663 += 1 };
  s1 -> s1 [0, 73] { R6725 += 1, R6663 += 1 };
  s1 -> s1 [0, 65535] { R6725 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R6725 += 1, R6663 += 1 };
  s2 -> s1 [0, 73] { R6725 += 1, R6663 += 1 };
  s2 -> s2 [0, 65535] { R6725 += 1, R6662 += 1, R6663 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R6725 += 1, R6663 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6727 += 1, R6664 += 1, R6665 += 1 };
  s0 -> s2 [0, 65535] { R6727 += 1, R6665 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R6726 += 1, R6727 += 1 };
  s1 -> s1 [0, 65535] { R6727 += 1, R6664 += 1, R6665 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R6727 += 1, R6665 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6727 += 1, R6665 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R6727 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6727 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R6729 += 1, R6667 += 1 };
  s0 -> s2 [0, 65535] { R6729 += 1, R6666 += 1, R6667 += 1 };
  s0 -> s3 [0, 65535] { R6729 += 1, R6667 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R6728 += 1, R6729 += 1 };
  s0 -> s1 [78, 65535] { R6729 += 1, R6667 += 1 };
  s1 -> s1 [0, 76] { R6729 += 1, R6667 += 1 };
  s1 -> s1 [0, 65535] { R6729 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R6729 += 1, R6667 += 1 };
  s2 -> s1 [0, 76] { R6729 += 1, R6667 += 1 };
  s2 -> s2 [0, 65535] { R6729 += 1, R6666 += 1, R6667 += 1 };
  s2 -> s3 [0, 65535] { R6729 += 1, R6667 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R6729 += 1, R6667 += 1 };
  s3 -> s1 [0, 76] { R6729 += 1, R6667 += 1 };
  s3 -> s3 [0, 65535] { R6729 += 1, R6667 += 1, R69 += 1 };
  s3 -> s4 [0, 65535] { R6729 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R6729 += 1, R6667 += 1 };
  s4 -> s4 [0, 65535] { R6729 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R6731 += 1, R6669 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R6730 += 1, R6731 += 1 };
  s0 -> s2 [0, 65535] { R6731 += 1, R6668 += 1, R6669 += 1 };
  s0 -> s3 [0, 65535] { R6731 += 1, R6669 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R6731 += 1, R6669 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R6731 += 1, R6669 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R6731 += 1, R6669 += 1 };
  s1 -> s4 [0, 65535] { R6731 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R6731 += 1, R6669 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R6731 += 1, R6669 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R6731 += 1, R6668 += 1, R6669 += 1 };
  s2 -> s3 [0, 65535] { R6731 += 1, R6669 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R6731 += 1, R6669 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R6731 += 1, R6669 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R6731 += 1 };
  s3 -> s3 [0, 65535] { R6731 += 1, R6669 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R6731 += 1, R6669 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R6731 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R6732 += 1, R6733 += 1 };
  s0 -> s1 [0, 65535] { R6733 += 1, R6670 += 1, R6671 += 1 };
  s0 -> s2 [0, 65535] { R6733 += 1, R6671 += 1 };
  s0 -> s3 [0, 65535] { R6733 += 1, R6671 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s1 [0, 65535] { R6733 += 1, R6670 += 1, R6671 += 1 };
  s1 -> s2 [0, 65535] { R6733 += 1, R6671 += 1 };
  s1 -> s3 [0, 65535] { R6733 += 1, R6671 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R6733 += 1 };
  s2 -> s2 [0, 65535] { R6733 += 1, R6671 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R6733 += 1 };
  s3 -> s2 [0, 65535] { R6733 += 1, R6671 += 1 };
  s3 -> s3 [0, 65535] { R6733 += 1, R6671 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6733 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s0 -> s2 [0, 65535] { R6735 += 1, R6672 += 1, R6673 += 1 };
  s0 -> s0 [0, 65535] { R6734 += 1, R6735 += 1 };
  s0 -> s3 [83, 83] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s0 -> s1 [84, 65535] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s1 -> s1 [0, 77] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s1 -> s3 [83, 83] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s1 -> s1 [84, 65535] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s2 -> s1 [0, 77] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R6735 += 1, R6672 += 1, R6673 += 1 };
  s2 -> s3 [83, 83] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s2 -> s1 [84, 65535] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s3 -> s3 [0, 77] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6735 += 1 };
  s3 -> s3 [0, 65535] { R6735 += 1, R6673 += 1 };
  s3 -> s3 [83, 65535] { R6735 += 1, R6673 += 1, R6439 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6735 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R6736 += 1, R6737 += 1 };
  s0 -> s1 [0, 65535] { R6737 += 1, R6674 += 1, R6675 += 1 };
  s0 -> s2 [0, 65535] { R6737 += 1, R6675 += 1, R6443 += 1, R6444 += 1 };
  s0 -> s3 [0, 65535] { R6737 += 1, R6675 += 1, R6444 += 1, R6445 += 1 };
  s1 -> s1 [0, 65535] { R6737 += 1, R6674 += 1, R6675 += 1 };
  s1 -> s2 [0, 65535] { R6737 += 1, R6675 += 1, R6443 += 1, R6444 += 1 };
  s1 -> s3 [0, 65535] { R6737 += 1, R6675 += 1, R6444 += 1, R6445 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R6737 += 1 };
  s2 -> s2 [0, 65535] { R6737 += 1, R6675 += 1, R6443 += 1, R6444 += 1 };
  s2 -> s3 [0, 65535] { R6737 += 1, R6675 += 1, R6444 += 1, R6445 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R6737 += 1 };
  s3 -> s3 [0, 65535] { R6737 += 1, R6675 += 1, R6444 += 1, R6445 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6737 += 1, R6675 += 1 };
  s4 -> s4 [0, 65535] { R6737 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6737 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6737 += 1, R6675 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R6739 += 1, R6676 += 1, R6677 += 1 };
  s0 -> s0 [0, 65535] { R6738 += 1, R6739 += 1 };
  s0 -> s2 [0, 65535] { R6739 += 1, R6677 += 1 };
  s1 -> s1 [0, 65535] { R6739 += 1, R6676 += 1, R6677 += 1 };
  s1 -> s2 [0, 65535] { R6739 += 1, R6677 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6739 += 1, R6677 += 1 };
  s2 -> s3 [0, 65535] { R6739 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6739 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R6740 += 1, R6741 += 1 };
  s0 -> s1 [0, 65535] { R6741 += 1, R6696 += 1, R6697 += 1 };
  s0 -> s2 [0, 65535] { R6741 += 1, R6697 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R6741 += 1, R6696 += 1, R6697 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6741 += 1, R6697 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R6741 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6741 += 1, R6697 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R6741 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R6743 += 1, R6699 += 1 };
  s0 -> s2 [0, 65535] { R6743 += 1, R6698 += 1, R6699 += 1 };
  s0 -> s0 [0, 65535] { R6742 += 1, R6743 += 1 };
  s0 -> s3 [73, 73] { R6743 += 1, R6699 += 1 };
  s0 -> s4 [73, 73] { R6743 += 1, R6699 += 1 };
  s0 -> s5 [77, 77] { R6743 += 1, R6699 += 1 };
  s0 -> s1 [78, 65535] { R6743 += 1, R6699 += 1 };
  s1 -> s1 [0, 72] { R6743 += 1, R6699 += 1 };
  s1 -> s3 [73, 73] { R6743 += 1, R6699 += 1 };
  s1 -> s4 [73, 73] { R6743 += 1, R6699 += 1 };
  s1 -> s5 [77, 77] { R6743 += 1, R6699 += 1 };
  s1 -> s1 [78, 65535] { R6743 += 1, R6699 += 1 };
  s2 -> s1 [0, 72] { R6743 += 1, R6699 += 1 };
  s2 -> s2 [0, 65535] { R6743 += 1, R6698 += 1, R6699 += 1 };
  s2 -> s3 [73, 73] { R6743 += 1, R6699 += 1 };
  s2 -> s4 [73, 73] { R6743 += 1, R6699 += 1 };
  s2 -> s5 [77, 77] { R6743 += 1, R6699 += 1 };
  s2 -> s1 [78, 65535] { R6743 += 1, R6699 += 1 };
  s3 -> s3 [0, 73] { R6743 += 1, R6699 += 1 };
  s3 -> s7 [77, 77] { R6743 += 1, R6699 += 1 };
  s3 -> s3 [78, 65535] { R6743 += 1, R6699 += 1 };
  s5 -> s5 [0, 72] { R6743 += 1, R6699 += 1 };
  s5 -> s5 [0, 65535] { R6743 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R6743 += 1, R6699 += 1 };
  s5 -> s8 [73, 73] { R6743 += 1, R6699 += 1 };
  s5 -> s5 [77, 65535] { R6743 += 1, R6699 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R6743 += 1, R6699 += 1 };
  s7 -> s7 [0, 65535] { R6743 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R6743 += 1, R6699 += 1 };
  s8 -> s8 [0, 65535] { R6743 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R6745 += 1, R6701 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R6744 += 1, R6745 += 1 };
  s0 -> s2 [0, 65535] { R6745 += 1, R6700 += 1, R6701 += 1 };
  s0 -> s3 [73, 73] { R6745 += 1, R6701 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R6745 += 1, R6701 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R6745 += 1, R6701 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R6745 += 1, R6701 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R6745 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R6745 += 1, R6701 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R6745 += 1, R6701 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R6745 += 1, R6701 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R6745 += 1, R6701 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R6745 += 1, R6700 += 1, R6701 += 1 };
  s2 -> s3 [73, 73] { R6745 += 1, R6701 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R6745 += 1, R6701 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R6745 += 1, R6701 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R6745 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6745 += 1, R6701 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R6745 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6745 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R6747 += 1, R6703 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R6747 += 1, R6702 += 1, R6703 += 1 };
  s0 -> s0 [0, 65535] { R6746 += 1, R6747 += 1 };
  s0 -> s3 [73, 73] { R6747 += 1, R6703 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R6747 += 1, R6703 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R6747 += 1, R6703 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R6747 += 1, R6703 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6747 += 1 };
  s1 -> s3 [73, 73] { R6747 += 1, R6703 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R6747 += 1, R6703 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R6747 += 1, R6703 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R6747 += 1, R6703 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6747 += 1, R6702 += 1, R6703 += 1 };
  s2 -> s3 [73, 73] { R6747 += 1, R6703 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R6747 += 1, R6703 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R6747 += 1, R6703 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6747 += 1, R6703 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R6747 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6747 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6747 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R6749 += 1, R6704 += 1, R6705 += 1 };
  s0 -> s0 [0, 65535] { R6748 += 1, R6749 += 1 };
  s0 -> s3 [73, 73] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6749 += 1 };
  s1 -> s3 [73, 73] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6749 += 1, R6704 += 1, R6705 += 1 };
  s2 -> s3 [73, 73] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R6749 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6749 += 1, R6705 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6749 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6749 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 72] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s0 [0, 65535] { R6750 += 1, R6751 += 1 };
  s0 -> s3 [0, 65535] { R6751 += 1, R6706 += 1, R6707 += 1 };
  s0 -> s4 [73, 73] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [74, 65535] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 72] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 65535] { R6751 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [73, 73] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 72] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [73, 73] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s5 [73, 73] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [73, 73] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [73, 73] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [74, 65535] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 72] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 72] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R6751 += 1, R6706 += 1, R6707 += 1 };
  s3 -> s4 [73, 73] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [74, 65535] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s4 [0, 65535] { R6751 += 1, R6707 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s6 [0, 65535] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s9 [0, 65535] { R6751 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6751 += 1, R6707 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6751 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6751 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [0, 72] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s0 -> s3 [0, 65535] { R6753 += 1, R6708 += 1, R6709 += 1 };
  s0 -> s0 [0, 65535] { R6752 += 1, R6753 += 1 };
  s0 -> s4 [73, 73] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s0 -> s5 [73, 73] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s6 [73, 73] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s7 [73, 73] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s0 -> s2 [74, 77] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s0 -> s1 [74, 65535] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [84, 65535] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s1 -> s1 [0, 72] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s2 [0, 72] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s1 -> s4 [73, 73] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s1 -> s5 [73, 73] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s6 [73, 73] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s7 [73, 73] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s1 -> s2 [74, 77] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s1 -> s1 [74, 65535] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s2 [84, 65535] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s2 -> s2 [0, 72] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R6753 += 1 };
  s2 -> s4 [73, 73] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s2 -> s7 [73, 73] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s2 -> s2 [74, 77] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s2 -> s2 [84, 65535] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s3 -> s1 [0, 72] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s2 [0, 72] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R6753 += 1, R6708 += 1, R6709 += 1 };
  s3 -> s4 [73, 73] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s3 -> s5 [73, 73] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s6 [73, 73] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s7 [73, 73] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s3 -> s2 [74, 77] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s3 -> s1 [74, 65535] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s2 [84, 65535] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s4 -> s4 [0, 65535] { R6753 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s7 [0, 77] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s5 -> s5 [0, 65535] { R6753 += 1, R6709 += 1, R6436 += 1, R6437 += 1 };
  s5 -> s7 [84, 65535] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s7 -> s7 [0, 77] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6753 += 1 };
  s7 -> s7 [84, 65535] { R6753 += 1, R6709 += 1, R6437 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s0 [0, 65535] { R6754 += 1, R6755 += 1 };
  s0 -> s2 [0, 65535] { R6755 += 1, R6710 += 1, R6711 += 1 };
  s0 -> s3 [73, 73] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s4 [73, 73] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s1 [74, 65535] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [0, 72] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6755 += 1 };
  s1 -> s3 [73, 73] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s4 [73, 73] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [74, 65535] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s1 [0, 72] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6755 += 1, R6710 += 1, R6711 += 1 };
  s2 -> s3 [73, 73] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s4 [73, 73] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s1 [74, 65535] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s3 -> s6 [0, 65535] { R6755 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6755 += 1, R6711 += 1, R6440 += 1, R6441 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6755 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6755 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s0 -> s2 [0, 72] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s0 -> s3 [0, 65535] { R6757 += 1, R6712 += 1, R6713 += 1 };
  s0 -> s0 [0, 65535] { R6756 += 1, R6757 += 1 };
  s0 -> s4 [73, 73] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s0 -> s5 [73, 73] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s0 -> s6 [73, 73] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s0 -> s7 [73, 73] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s0 -> s1 [74, 76] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s0 -> s2 [74, 65535] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s0 -> s8 [77, 77] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s0 -> s1 [84, 65535] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s1 -> s1 [0, 72] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s1 -> s4 [73, 73] { R6757 += 1, R6713 += 1 };
  s1 -> s5 [73, 73] { R6757 += 1, R6713 += 1 };
  s1 -> s1 [74, 76] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s1 -> s1 [74, 65535] { R6757 += 1, R6713 += 1 };
  s1 -> s8 [77, 77] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s1 -> s1 [84, 65535] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s2 -> s1 [0, 72] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s2 -> s2 [0, 72] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s2 -> s4 [73, 73] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s2 -> s5 [73, 73] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s2 -> s6 [73, 73] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s2 -> s7 [73, 73] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s2 -> s1 [74, 76] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s2 -> s2 [74, 65535] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s2 -> s8 [77, 77] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s2 -> s1 [84, 65535] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s3 -> s1 [0, 72] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s3 -> s2 [0, 72] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s3 -> s3 [0, 65535] { R6757 += 1, R6712 += 1, R6713 += 1 };
  s3 -> s4 [73, 73] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s3 -> s5 [73, 73] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s3 -> s6 [73, 73] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s3 -> s7 [73, 73] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s3 -> s1 [74, 76] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s3 -> s2 [74, 65535] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s3 -> s8 [77, 77] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s3 -> s1 [84, 65535] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s4 -> s4 [0, 76] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s4 -> s4 [0, 65535] { R6757 += 1, R6713 += 1 };
  s4 -> s11 [77, 77] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s4 -> s4 [84, 65535] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s6 -> s4 [0, 76] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s6 -> s6 [0, 65535] { R6757 += 1, R6713 += 1, R6654 += 1, R6655 += 1 };
  s6 -> s11 [77, 77] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s6 -> s4 [84, 65535] { R6757 += 1, R6713 += 1, R6655 += 1 };
  s8 -> s8 [0, 72] { R6757 += 1, R6713 += 1 };
  s8 -> s8 [0, 65535] { R6757 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R6757 += 1, R6713 += 1 };
  s8 -> s11 [73, 73] { R6757 += 1, R6713 += 1 };
  s8 -> s8 [74, 65535] { R6757 += 1, R6713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6757 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R6757 += 1 };
  s11 -> s11 [0, 65535] { R6757 += 1, R6713 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R6757 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R6673 && R2 = R6757 && R20 - R6757 = -1 && R21 = R6757 && R22 - R6757 = -1 && R23 = R6757 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R6672 = 0 && R6698 = 0 && R6699 = 0 && R6706 = 0 && R6707 = 0 && R6708 = 0 && R6709 = 0 && R6712 = 0 && R6713 = 0 && R6714 = 0 && R6715 = R6757 && R6716 = 0 && R6717 = R6757 && R6718 = 0 && R6719 = R6757 && R6720 = 0 && R6721 = R6757 && R6722 = 0 && R6723 = R6757 && R6724 = 0 && R6725 = R6757 && R6726 = 0 && R6727 = R6757 && R6728 = 0 && R6729 = R6757 && R6730 = 0 && R6731 = R6757 && R6732 = 0 && R6733 = R6757 && R6734 = 0 && R6735 = R6757 && R6736 = 0 && R6737 = R6757 && R6738 = 0 && R6739 = R6757 && R6740 = 0 && R6741 = R6757 && R6742 = 0 && R6743 = R6757 && R6744 = 0 && R6745 = R6757 && R6746 = 0 && R6747 = R6757 && R6748 = 0 && R6749 = R6757 && R6750 = 0 && R6751 = R6757 && R6752 = 0 && R6753 = R6757 && R6754 = 0 && R6755 = R6757 && R6756 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R6673 && 0 < R6757 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R6658 != 0 || R6659 = R6673 || (R17 = 0 && R6673 = 0)) && (R6660 != 0 || R6661 = R6673 || (R17 = 0 && R6673 = 0)) && (R6662 != 0 || R6663 = R6673 || (R17 = 0 && R6673 = 0)) && (R6664 != 0 || R6665 = R6673 || (R17 = 0 && R6673 = 0)) && (R6666 != 0 || R6667 = R6673 || (R17 = 0 && R6673 = 0)) && (R6668 != 0 || R6669 = R6673 || (R17 = 0 && R6673 = 0)) && (R6670 != 0 || R6671 = R6673 || (R17 = 0 && R6673 = 0)) && (R6674 != 0 || R6673 = R6675 || (R17 = 0 && R6673 = 0)) && (R6676 != 0 || R6673 = R6677 || (R17 = 0 && R6673 = 0)) && (R18 = 0 || (R6696 = 0 && R6697 = 0)) && (R18 = 0 || (R6700 = 0 && R6701 = 0)) && (R18 = 0 || (R6702 = 0 && R6703 = 0)) && (R18 = 0 || (R6704 = 0 && R6705 = 0)) && (R18 = 0 || (R6710 = 0 && R6711 = 0)) && (R19 = 0 || (R6678 = 0 && R6679 = 0)) && (R19 = 0 || (R6680 = 0 && R6681 = 0)) && (R19 = 0 || (R6682 = 0 && R6683 = 0)) && (R19 = 0 || (R6684 = 0 && R6685 = 0)) && (R19 = 0 || (R6686 = 0 && R6687 = 0)) && (R19 = 0 || (R6688 = 0 && R6689 = 0)) && (R19 = 0 || (R6690 = 0 && R6691 = 0)) && (R19 = 0 || (R6692 = 0 && R6693 = 0)) && (R19 = 0 || (R6694 = 0 && R6695 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R6445 + R6442 = 0 || (R56 + R6443 + R6440 = 0 && R57 + R6444 + R6441 = 0)) && (R58 + R6445 + R6442 = 0 || (R62 + R6656 + R6654 = 0 && R63 + R6657 + R6655 = 0)) && (R6658 = 0 || (R17 = 0 && R6673 = 0)) && (R6660 = 0 || (R17 = 0 && R6673 = 0)) && (R6662 = 0 || (R17 = 0 && R6673 = 0)) && (R6664 = 0 || (R17 = 0 && R6673 = 0)) && (R6666 = 0 || (R17 = 0 && R6673 = 0)) && (R6668 = 0 || (R17 = 0 && R6673 = 0)) && (R6670 = 0 || (R17 = 0 && R6673 = 0)) && (R6674 = 0 || (R17 = 0 && R6673 = 0)) && (R6676 = 0 || (R17 = 0 && R6673 = 0));
// End of Parikh automata intersection problem
