// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R7716, R7717, R7718, R7719, R7720, R7721, R7722, R7723, R7724, R7725, R7726, R7727, R7728, R7729, R7730, R7731, R7732, R7733, R7734, R7735, R7736, R7737, R7738, R7739, R7740, R7741, R7742, R7743, R7744, R7745, R7746, R7747, R7748, R7749, R7750, R7751, R7752, R7753, R7754, R7755, R7756, R7757, R7758, R7759, R7760, R7761, R7762, R7763, R7764, R7765, R7766, R7767, R7768, R7769, R7770, R7771, R7772, R7773, R7774, R7775, R7776, R7777, R7778, R7779, R7780, R7781, R7782, R7783, R7784, R7785, R7786, R7787, R7788, R7789, R7790, R7791, R7792, R7793, R7794, R7795, R7796, R7797, R7798, R7799, R7800, R7801, R7802, R7803, R7804, R7805, R7806, R7807, R7808, R7809, R7810, R7811, R7812, R7813, R7814, R7815, R7816, R7817, R7818, R7819, R7820, R7821, R7822, R7823, R7824, R7825, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R7746 += 1, R7747 += 1 };
  s0 -> s1 [0, 65535] { R7747 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7747 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R7749 += 1 };
  s0 -> s0 [0, 65535] { R7748 += 1, R7749 += 1 };
  s0 -> s2 [73, 73] { R7749 += 1 };
  s0 -> s3 [73, 73] { R7749 += 1 };
  s0 -> s1 [78, 65535] { R7749 += 1 };
  s1 -> s1 [0, 72] { R7749 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7749 += 1 };
  s1 -> s3 [73, 73] { R7749 += 1 };
  s1 -> s1 [78, 65535] { R7749 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R7749 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R7749 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R7751 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7750 += 1, R7751 += 1 };
  s0 -> s2 [73, 73] { R7751 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R7751 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R7751 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R7751 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7751 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R7751 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R7751 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R7751 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R7753 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7752 += 1, R7753 += 1 };
  s0 -> s2 [73, 73] { R7753 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R7753 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R7753 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R7753 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7753 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R7753 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R7753 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R7753 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R7755 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7754 += 1, R7755 += 1 };
  s0 -> s2 [73, 73] { R7755 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R7755 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R7755 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R7755 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7755 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R7755 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R7755 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7755 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R7757 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7756 += 1, R7757 += 1 };
  s0 -> s2 [73, 73] { R7757 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R7757 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R7757 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R7757 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7757 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R7757 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R7757 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7757 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R7759 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7758 += 1, R7759 += 1 };
  s0 -> s2 [73, 73] { R7759 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R7759 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R7759 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R7759 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7759 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R7759 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R7759 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7759 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R7761 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7760 += 1, R7761 += 1 };
  s0 -> s2 [73, 73] { R7761 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R7761 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R7761 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R7761 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7761 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R7761 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R7761 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R7761 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R7763 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7762 += 1, R7763 += 1 };
  s0 -> s2 [73, 73] { R7763 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R7763 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R7763 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R7763 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7763 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R7763 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R7763 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7763 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R7783 += 1 };
  s0 -> s0 [0, 65535] { R7782 += 1, R7783 += 1 };
  s0 -> s2 [73, 73] { R7783 += 1 };
  s0 -> s1 [74, 65535] { R7783 += 1 };
  s1 -> s1 [0, 72] { R7783 += 1 };
  s1 -> s2 [73, 73] { R7783 += 1 };
  s1 -> s1 [74, 65535] { R7783 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7783 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7784 += 1, R7785 += 1 };
  s0 -> s1 [0, 65535] { R7785 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R7785 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R7787 += 1 };
  s0 -> s0 [0, 65535] { R7786 += 1, R7787 += 1 };
  s0 -> s2 [0, 65535] { R7787 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R7787 += 1 };
  s0 -> s1 [74, 65535] { R7787 += 1 };
  s1 -> s1 [0, 72] { R7787 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R7787 += 1 };
  s1 -> s1 [74, 65535] { R7787 += 1 };
  s2 -> s1 [0, 72] { R7787 += 1 };
  s2 -> s2 [0, 65535] { R7787 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R7787 += 1 };
  s2 -> s1 [74, 65535] { R7787 += 1 };
  s3 -> s3 [0, 65535] { R7787 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R7789 += 1, R7727 += 1 };
  s0 -> s2 [0, 65535] { R7789 += 1, R7726 += 1, R7727 += 1 };
  s0 -> s0 [0, 65535] { R7788 += 1, R7789 += 1 };
  s0 -> s1 [74, 65535] { R7789 += 1, R7727 += 1 };
  s1 -> s1 [0, 72] { R7789 += 1, R7727 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7789 += 1 };
  s1 -> s1 [74, 65535] { R7789 += 1, R7727 += 1 };
  s2 -> s1 [0, 72] { R7789 += 1, R7727 += 1 };
  s2 -> s2 [0, 65535] { R7789 += 1, R7726 += 1, R7727 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R7789 += 1, R7727 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7791 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s2 [0, 65535] { R7791 += 1, R7729 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R7790 += 1, R7791 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7791 += 1, R7728 += 1, R7729 += 1 };
  s1 -> s2 [0, 65535] { R7791 += 1, R7729 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7791 += 1, R7729 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R7791 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7791 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R7793 += 1, R7731 += 1 };
  s0 -> s2 [0, 65535] { R7793 += 1, R7730 += 1, R7731 += 1 };
  s0 -> s0 [0, 65535] { R7792 += 1, R7793 += 1 };
  s0 -> s1 [77, 65535] { R7793 += 1, R7731 += 1 };
  s1 -> s1 [0, 73] { R7793 += 1, R7731 += 1 };
  s1 -> s1 [0, 65535] { R7793 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R7793 += 1, R7731 += 1 };
  s2 -> s1 [0, 73] { R7793 += 1, R7731 += 1 };
  s2 -> s2 [0, 65535] { R7793 += 1, R7730 += 1, R7731 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R7793 += 1, R7731 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7795 += 1, R7732 += 1, R7733 += 1 };
  s0 -> s0 [0, 65535] { R7794 += 1, R7795 += 1 };
  s0 -> s2 [0, 65535] { R7795 += 1, R7733 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R7795 += 1, R7732 += 1, R7733 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7795 += 1, R7733 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R7795 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7795 += 1, R7733 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R7795 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R7797 += 1, R7735 += 1 };
  s0 -> s2 [0, 65535] { R7797 += 1, R7734 += 1, R7735 += 1 };
  s0 -> s3 [0, 65535] { R7797 += 1, R7735 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R7796 += 1, R7797 += 1 };
  s0 -> s1 [78, 65535] { R7797 += 1, R7735 += 1 };
  s1 -> s1 [0, 76] { R7797 += 1, R7735 += 1 };
  s1 -> s1 [0, 65535] { R7797 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R7797 += 1, R7735 += 1 };
  s2 -> s1 [0, 76] { R7797 += 1, R7735 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7797 += 1, R7734 += 1, R7735 += 1 };
  s2 -> s3 [0, 65535] { R7797 += 1, R7735 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R7797 += 1, R7735 += 1 };
  s3 -> s1 [0, 76] { R7797 += 1, R7735 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7797 += 1 };
  s3 -> s3 [0, 65535] { R7797 += 1, R7735 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R7797 += 1, R7735 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7797 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R7799 += 1, R7737 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R7799 += 1, R7736 += 1, R7737 += 1 };
  s0 -> s3 [0, 65535] { R7799 += 1, R7737 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R7798 += 1, R7799 += 1 };
  s0 -> s1 [78, 65535] { R7799 += 1, R7737 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R7799 += 1, R7737 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R7799 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7799 += 1, R7737 += 1 };
  s1 -> s1 [78, 65535] { R7799 += 1, R7737 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R7799 += 1, R7737 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R7799 += 1, R7736 += 1, R7737 += 1 };
  s2 -> s3 [0, 65535] { R7799 += 1, R7737 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R7799 += 1, R7737 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R7799 += 1, R7737 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R7799 += 1, R7737 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R7799 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R7799 += 1, R7737 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R7799 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7801 += 1, R7738 += 1, R7739 += 1 };
  s0 -> s2 [0, 65535] { R7801 += 1, R7739 += 1 };
  s0 -> s0 [0, 65535] { R7800 += 1, R7801 += 1 };
  s1 -> s1 [0, 65535] { R7801 += 1, R7738 += 1, R7739 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7801 += 1, R7739 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7801 += 1, R7739 += 1 };
  s2 -> s4 [0, 65535] { R7801 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7801 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R7803 += 1, R7741 += 1, R7715 += 1 };
  s0 -> s0 [0, 65535] { R7802 += 1, R7803 += 1 };
  s0 -> s1 [0, 65535] { R7803 += 1, R7741 += 1 };
  s0 -> s2 [0, 65535] { R7803 += 1, R7740 += 1, R7741 += 1 };
  s0 -> s1 [83, 65535] { R7803 += 1, R7741 += 1, R7715 += 1 };
  s1 -> s1 [0, 77] { R7803 += 1, R7741 += 1, R7715 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7803 += 1, R7741 += 1 };
  s1 -> s4 [0, 65535] { R7803 += 1 };
  s1 -> s1 [83, 65535] { R7803 += 1, R7741 += 1, R7715 += 1 };
  s2 -> s1 [0, 77] { R7803 += 1, R7741 += 1, R7715 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7803 += 1, R7741 += 1 };
  s2 -> s2 [0, 65535] { R7803 += 1, R7740 += 1, R7741 += 1 };
  s2 -> s1 [83, 65535] { R7803 += 1, R7741 += 1, R7715 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7803 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7805 += 1, R7743 += 1, R7719 += 1, R7720 += 1 };
  s0 -> s2 [0, 65535] { R7805 += 1, R7742 += 1, R7743 += 1 };
  s0 -> s3 [0, 65535] { R7805 += 1, R7743 += 1, R7720 += 1, R7721 += 1 };
  s0 -> s0 [0, 65535] { R7804 += 1, R7805 += 1 };
  s1 -> s1 [0, 65535] { R7805 += 1, R7743 += 1, R7719 += 1, R7720 += 1 };
  s1 -> s3 [0, 65535] { R7805 += 1, R7743 += 1, R7720 += 1, R7721 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7805 += 1 };
  s2 -> s1 [0, 65535] { R7805 += 1, R7743 += 1, R7719 += 1, R7720 += 1 };
  s2 -> s2 [0, 65535] { R7805 += 1, R7742 += 1, R7743 += 1 };
  s2 -> s3 [0, 65535] { R7805 += 1, R7743 += 1, R7720 += 1, R7721 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7805 += 1, R7743 += 1, R7720 += 1, R7721 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7805 += 1 };
  s3 -> s6 [0, 65535] { R7805 += 1, R7743 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7805 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7805 += 1 };
  s6 -> s6 [0, 65535] { R7805 += 1, R7743 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s0 -> s2 [0, 65535] { R7807 += 1, R7745 += 1, R7724 += 1, R7725 += 1 };
  s0 -> s0 [0, 65535] { R7806 += 1, R7807 += 1 };
  s0 -> s3 [0, 65535] { R7807 += 1, R7744 += 1, R7745 += 1 };
  s0 -> s4 [77, 77] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s0 -> s5 [77, 77] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s0 -> s1 [84, 65535] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s1 -> s1 [0, 76] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s1 -> s1 [0, 65535] { R7807 += 1, R7745 += 1 };
  s1 -> s6 [0, 65535] { R7807 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [77, 77] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s1 -> s5 [77, 77] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s1 -> s1 [84, 65535] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s2 -> s1 [0, 76] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s2 -> s2 [0, 65535] { R7807 += 1, R7745 += 1, R7724 += 1, R7725 += 1 };
  s2 -> s6 [0, 65535] { R7807 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [77, 77] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s2 -> s5 [77, 77] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s2 -> s1 [84, 65535] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s3 -> s1 [0, 76] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s3 -> s2 [0, 65535] { R7807 += 1, R7745 += 1, R7724 += 1, R7725 += 1 };
  s3 -> s3 [0, 65535] { R7807 += 1, R7744 += 1, R7745 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [77, 77] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s3 -> s5 [77, 77] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s3 -> s1 [84, 65535] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s4 -> s4 [0, 65535] { R7807 += 1, R7745 += 1 };
  s4 -> s6 [0, 65535] { R7807 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 77] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s5 -> s6 [0, 65535] { R7807 += 1 };
  s5 -> s5 [0, 65535] { R7807 += 1, R7745 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [84, 65535] { R7807 += 1, R7745 += 1, R7725 += 1 };
  s6 -> s6 [0, 65535] { R7807 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7809 += 1, R7764 += 1, R7765 += 1 };
  s0 -> s2 [0, 65535] { R7809 += 1, R7765 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R7808 += 1, R7809 += 1 };
  s1 -> s1 [0, 65535] { R7809 += 1, R7764 += 1, R7765 += 1 };
  s1 -> s2 [0, 65535] { R7809 += 1, R7765 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7809 += 1 };
  s2 -> s2 [0, 65535] { R7809 += 1, R7765 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7809 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R7811 += 1, R7767 += 1 };
  s0 -> s2 [0, 65535] { R7811 += 1, R7766 += 1, R7767 += 1 };
  s0 -> s0 [0, 65535] { R7810 += 1, R7811 += 1 };
  s0 -> s3 [73, 73] { R7811 += 1, R7767 += 1 };
  s0 -> s4 [73, 73] { R7811 += 1, R7767 += 1 };
  s0 -> s5 [77, 77] { R7811 += 1, R7767 += 1 };
  s0 -> s1 [78, 65535] { R7811 += 1, R7767 += 1 };
  s1 -> s1 [0, 72] { R7811 += 1, R7767 += 1 };
  s1 -> s3 [73, 73] { R7811 += 1, R7767 += 1 };
  s1 -> s4 [73, 73] { R7811 += 1, R7767 += 1 };
  s1 -> s5 [77, 77] { R7811 += 1, R7767 += 1 };
  s1 -> s1 [78, 65535] { R7811 += 1, R7767 += 1 };
  s2 -> s1 [0, 72] { R7811 += 1, R7767 += 1 };
  s2 -> s2 [0, 65535] { R7811 += 1, R7766 += 1, R7767 += 1 };
  s2 -> s3 [73, 73] { R7811 += 1, R7767 += 1 };
  s2 -> s4 [73, 73] { R7811 += 1, R7767 += 1 };
  s2 -> s5 [77, 77] { R7811 += 1, R7767 += 1 };
  s2 -> s1 [78, 65535] { R7811 += 1, R7767 += 1 };
  s4 -> s4 [0, 73] { R7811 += 1, R7767 += 1 };
  s4 -> s7 [77, 77] { R7811 += 1, R7767 += 1 };
  s4 -> s4 [78, 65535] { R7811 += 1, R7767 += 1 };
  s5 -> s5 [0, 72] { R7811 += 1, R7767 += 1 };
  s5 -> s5 [0, 65535] { R7811 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R7811 += 1, R7767 += 1 };
  s5 -> s8 [73, 73] { R7811 += 1, R7767 += 1 };
  s5 -> s5 [77, 65535] { R7811 += 1, R7767 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R7811 += 1, R7767 += 1 };
  s7 -> s7 [0, 65535] { R7811 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R7811 += 1, R7767 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7811 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R7813 += 1, R7769 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R7813 += 1, R7768 += 1, R7769 += 1 };
  s0 -> s0 [0, 65535] { R7812 += 1, R7813 += 1 };
  s0 -> s3 [73, 73] { R7813 += 1, R7769 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R7813 += 1, R7769 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R7813 += 1, R7769 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R7813 += 1, R7769 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R7813 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7813 += 1, R7769 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R7813 += 1, R7769 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R7813 += 1, R7769 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R7813 += 1, R7769 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R7813 += 1, R7768 += 1, R7769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7813 += 1, R7769 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R7813 += 1, R7769 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R7813 += 1, R7769 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R7813 += 1 };
  s3 -> s3 [0, 65535] { R7813 += 1, R7769 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7813 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7813 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R7815 += 1, R7771 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R7815 += 1, R7770 += 1, R7771 += 1 };
  s0 -> s0 [0, 65535] { R7814 += 1, R7815 += 1 };
  s0 -> s3 [73, 73] { R7815 += 1, R7771 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R7815 += 1, R7771 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R7815 += 1, R7771 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R7815 += 1, R7771 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R7815 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7815 += 1, R7771 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R7815 += 1, R7771 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R7815 += 1, R7771 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R7815 += 1, R7771 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R7815 += 1, R7770 += 1, R7771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7815 += 1, R7771 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R7815 += 1, R7771 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R7815 += 1, R7771 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R7815 += 1 };
  s3 -> s3 [0, 65535] { R7815 += 1, R7771 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7815 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7815 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R7816 += 1, R7817 += 1 };
  s0 -> s2 [0, 65535] { R7817 += 1, R7772 += 1, R7773 += 1 };
  s0 -> s3 [73, 73] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R7817 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R7817 += 1, R7772 += 1, R7773 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R7817 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7817 += 1 };
  s4 -> s4 [0, 65535] { R7817 += 1, R7773 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7817 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s0 [0, 65535] { R7818 += 1, R7819 += 1 };
  s0 -> s3 [0, 65535] { R7819 += 1, R7774 += 1, R7775 += 1 };
  s0 -> s4 [73, 73] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [73, 73] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s7 [73, 73] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [74, 65535] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [74, 65535] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 72] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 72] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [73, 73] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s5 [73, 73] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s6 [73, 73] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s7 [73, 73] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [74, 65535] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [74, 65535] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 72] { R7819 += 1, R7775 += 1 };
  s2 -> s2 [0, 72] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [73, 73] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [73, 73] { R7819 += 1, R7775 += 1 };
  s2 -> s8 [73, 73] { R7819 += 1, R7775 += 1 };
  s2 -> s7 [73, 73] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [74, 65535] { R7819 += 1, R7775 += 1 };
  s2 -> s2 [74, 65535] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 72] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R7819 += 1, R7774 += 1, R7775 += 1 };
  s3 -> s4 [73, 73] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [73, 73] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s7 [73, 73] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [74, 65535] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [74, 65535] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s4 [0, 65535] { R7819 += 1, R7775 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s6 [0, 65535] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R7819 += 1, R7775 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s8 [0, 65535] { R7819 += 1, R7775 += 1 };
  s8 -> s9 [0, 65535] { R7819 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R7819 += 1, R7775 += 1 };
  s9 -> s9 [0, 65535] { R7819 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R7819 += 1, R7775 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R7819 += 1 };
  s11 -> s12 [73, 73] { R7819 += 1, R7775 += 1 };
  s11 -> s8 [73, 73] { R7819 += 1, R7775 += 1 };
  s11 -> s11 [74, 65535] { R7819 += 1, R7775 += 1 };
  s12 -> s12 [0, 65535] { R7819 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s2 [0, 72] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s0 -> s0 [0, 65535] { R7820 += 1, R7821 += 1 };
  s0 -> s3 [0, 65535] { R7821 += 1, R7776 += 1, R7777 += 1 };
  s0 -> s4 [73, 73] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s0 -> s5 [73, 73] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s6 [73, 73] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s7 [73, 73] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s0 -> s2 [74, 77] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s0 -> s1 [74, 65535] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s8 [83, 83] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s0 -> s2 [84, 65535] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s1 -> s1 [0, 72] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s2 [0, 72] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s1 -> s4 [73, 73] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s1 -> s5 [73, 73] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s6 [73, 73] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s7 [73, 73] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s1 -> s2 [74, 77] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s1 -> s1 [74, 65535] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s8 [83, 83] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s1 -> s2 [84, 65535] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s2 -> s2 [0, 72] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s2 -> s4 [73, 73] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s2 -> s7 [73, 73] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s2 -> s2 [74, 77] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s2 -> s8 [83, 83] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s2 -> s2 [84, 65535] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s3 -> s1 [0, 72] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s2 [0, 72] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s3 -> s3 [0, 65535] { R7821 += 1, R7776 += 1, R7777 += 1 };
  s3 -> s4 [73, 73] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s3 -> s5 [73, 73] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s6 [73, 73] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s7 [73, 73] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s3 -> s2 [74, 77] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s3 -> s1 [74, 65535] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s8 [83, 83] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s3 -> s2 [84, 65535] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s4 -> s4 [0, 77] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s4 -> s10 [83, 83] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s4 -> s4 [84, 65535] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s5 -> s4 [0, 77] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s5 -> s5 [0, 65535] { R7821 += 1, R7777 += 1, R7712 += 1, R7713 += 1 };
  s5 -> s10 [83, 83] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s5 -> s4 [84, 65535] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s8 -> s8 [0, 72] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7821 += 1 };
  s8 -> s10 [73, 73] { R7821 += 1, R7777 += 1 };
  s8 -> s11 [73, 73] { R7821 += 1, R7777 += 1 };
  s8 -> s8 [74, 77] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s8 -> s8 [74, 65535] { R7821 += 1, R7777 += 1 };
  s8 -> s8 [83, 65535] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R7821 += 1 };
  s10 -> s10 [0, 65535] { R7821 += 1, R7777 += 1 };
  s10 -> s10 [83, 65535] { R7821 += 1, R7777 += 1, R7713 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7821 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7821 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s0 -> s0 [0, 65535] { R7822 += 1, R7823 += 1 };
  s0 -> s2 [0, 65535] { R7823 += 1, R7778 += 1, R7779 += 1 };
  s0 -> s3 [73, 73] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s0 -> s4 [73, 73] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s0 -> s1 [74, 65535] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s1 [0, 72] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7823 += 1 };
  s1 -> s3 [73, 73] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s4 [73, 73] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s1 [74, 65535] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s1 [0, 72] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7823 += 1, R7778 += 1, R7779 += 1 };
  s2 -> s3 [73, 73] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s4 [73, 73] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s1 [74, 65535] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7823 += 1 };
  s4 -> s5 [0, 65535] { R7823 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7823 += 1, R7779 += 1, R7716 += 1, R7717 += 1 };
  s5 -> s5 [0, 65535] { R7823 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s0 -> s2 [0, 65535] { R7825 += 1, R7780 += 1, R7781 += 1 };
  s0 -> s0 [0, 65535] { R7824 += 1, R7825 += 1 };
  s0 -> s3 [73, 73] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s0 -> s4 [73, 73] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s0 -> s1 [74, 65535] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s1 -> s1 [0, 72] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7825 += 1 };
  s1 -> s3 [73, 73] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s1 -> s4 [73, 73] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s1 -> s1 [74, 65535] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s2 -> s1 [0, 72] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s2 -> s2 [0, 65535] { R7825 += 1, R7780 += 1, R7781 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s2 -> s4 [73, 73] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s2 -> s1 [74, 65535] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s3 -> s3 [0, 65535] { R7825 += 1, R7781 += 1, R7722 += 1, R7723 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7825 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7825 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7825 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R7825 && R20 - R7825 = -1 && R21 = R7825 && R22 - R7825 = -1 && R23 = R7825 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7715 + -1*R7713 - R53 = 0 && R52 + R7714 + R7712 = 0 && R7766 = 0 && R7767 = 0 && R7774 = 0 && R7775 = 0 && R7776 = 0 && R7777 = 0 && R7782 = 0 && R7783 = R7825 && R7784 = 0 && R7785 = R7825 && R7786 = 0 && R7787 = R7825 && R7788 = 0 && R7789 = R7825 && R7790 = 0 && R7791 = R7825 && R7792 = 0 && R7793 = R7825 && R7794 = 0 && R7795 = R7825 && R7796 = 0 && R7797 = R7825 && R7798 = 0 && R7799 = R7825 && R7800 = 0 && R7801 = R7825 && R7802 = 0 && R7803 = R7825 && R7804 = 0 && R7805 = R7825 && R7806 = 0 && R7807 = R7825 && R7808 = 0 && R7809 = R7825 && R7810 = 0 && R7811 = R7825 && R7812 = 0 && R7813 = R7825 && R7814 = 0 && R7815 = R7825 && R7816 = 0 && R7817 = R7825 && R7818 = 0 && R7819 = R7825 && R7820 = 0 && R7821 = R7825 && R7822 = 0 && R7823 = R7825 && R7824 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7715 + -1*R7713 - R53 < 1 && 0 < R7825 && (R1 != 0 || R17 = 0 || (R7726 = 0 && R7727 = 0)) && (R1 != 0 || R17 = 0 || (R7728 = 0 && R7729 = 0)) && (R1 != 0 || R17 = 0 || (R7730 = 0 && R7731 = 0)) && (R1 != 0 || R17 = 0 || (R7732 = 0 && R7733 = 0)) && (R1 != 0 || R17 = 0 || (R7734 = 0 && R7735 = 0)) && (R1 != 0 || R17 = 0 || (R7736 = 0 && R7737 = 0)) && (R1 != 0 || R17 = 0 || (R7738 = 0 && R7739 = 0)) && (R1 != 0 || R17 = 0 || (R7740 = 0 && R7741 = 0)) && (R1 != 0 || R17 = 0 || (R7742 = 0 && R7743 = 0)) && (R1 != 0 || R17 = 0 || (R7744 = 0 && R7745 = 0)) && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R42 + R72 + R70 = 0 || R53 + R7715 + R7713 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R7715 + R7713 < 1))) && (R7726 != 0 || R1 = R7727 || R1 < 1) && (R7728 != 0 || R1 = R7729 || R1 < 1) && (R7730 != 0 || R1 = R7731 || R1 < 1) && (R7732 != 0 || R1 = R7733 || R1 < 1) && (R7734 != 0 || R1 = R7735 || R1 < 1) && (R7736 != 0 || R1 = R7737 || R1 < 1) && (R7738 != 0 || R1 = R7739 || R1 < 1) && (R7740 != 0 || R1 = R7741 || R1 < 1) && (R7742 != 0 || R1 = R7743 || R1 < 1) && (R7744 != 0 || R1 = R7745 || R1 < 1) && (R18 = 0 || (R7764 = 0 && R7765 = 0)) && (R18 = 0 || (R7768 = 0 && R7769 = 0)) && (R18 = 0 || (R7770 = 0 && R7771 = 0)) && (R18 = 0 || (R7772 = 0 && R7773 = 0)) && (R18 = 0 || (R7778 = 0 && R7779 = 0)) && (R18 = 0 || (R7780 = 0 && R7781 = 0)) && (R19 = 0 || (R7746 = 0 && R7747 = 0)) && (R19 = 0 || (R7748 = 0 && R7749 = 0)) && (R19 = 0 || (R7750 = 0 && R7751 = 0)) && (R19 = 0 || (R7752 = 0 && R7753 = 0)) && (R19 = 0 || (R7754 = 0 && R7755 = 0)) && (R19 = 0 || (R7756 = 0 && R7757 = 0)) && (R19 = 0 || (R7758 = 0 && R7759 = 0)) && (R19 = 0 || (R7760 = 0 && R7761 = 0)) && (R19 = 0 || (R7762 = 0 && R7763 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0)) && (R58 + R7721 + R7718 = 0 || (R56 + R7719 + R7716 = 0 && R57 + R7720 + R7717 = 0)) && (R58 + R7721 + R7718 = 0 || (R62 + R7724 + R7722 = 0 && R63 + R7725 + R7723 = 0)) && (R7726 = 0 || R1 < 1) && (R7728 = 0 || R1 < 1) && (R7730 = 0 || R1 < 1) && (R7732 = 0 || R1 < 1) && (R7734 = 0 || R1 < 1) && (R7736 = 0 || R1 < 1) && (R7738 = 0 || R1 < 1) && (R7740 = 0 || R1 < 1) && (R7742 = 0 || R1 < 1) && (R7744 = 0 || R1 < 1);
// End of Parikh automata intersection problem
