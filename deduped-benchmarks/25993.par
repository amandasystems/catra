// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R6, R7, R9;
synchronised {  // Automata constraining P19
automaton P19_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P21
automaton P21_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R10 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R10 += 1 };
  s1 -> s1 [0, 60] { R10 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s1 [0, 65535] { R44 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R44 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s0 -> s1 [0, 65535] { R46 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R46 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R48 += 1, R31 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s0 -> s2 [13, 13] { R48 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R48 += 1, R31 += 1, R32 += 1 };
  s1 -> s2 [13, 13] { R48 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R48 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s0 -> s1 [0, 65535] { R50 += 1, R33 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R50 += 1, R34 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R50 += 1, R33 += 1, R34 += 1 };
  s1 -> s2 [0, 65535] { R50 += 1, R34 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R50 += 1 };
  s2 -> s2 [0, 65535] { R50 += 1, R34 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R50 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R7 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s1 [0, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R38 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R40 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s2 [9, 13] { R40 += 1 };
  s0 -> s1 [14, 31] { R40 += 1 };
  s0 -> s2 [32, 32] { R40 += 1 };
  s0 -> s1 [33, 65535] { R40 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R40 += 1 };
  s2 -> s1 [0, 65535] { R40 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R42 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R42 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P20
automaton P20_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
constraint R3 = R44 && R9 = 0 && R10 = R50 && R31 = 0 && R43 - R50 = 1 && R45 = 0 && R46 = R50 && R47 = 0 && R48 = R50 && R49 = 0 && R0 != 0 && R1 != 0 && R2 != 0 && R7 < 1 && R50 < R44 && -1 < R50 && (R0 != R32 || R32 = 1 || R32 < 0) && (R5 != 0 || ((R2 != R36 || R35 - R36 = -1 || R36 < 0) && (R2 = R36 || R2 < 1))) && (R5 != 0 || ((R2 != R38 || R37 - R38 = -1 || R38 < 0) && (R2 = R38 || R2 < 1))) && (R32 != 1 || -1 < R0) && (R33 != 0 || ((R4 != 0 || ((R0 != R34 || R34 = 1 || R34 < 0) && (R0 = R34 || R34 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R34 || R34 = 1 || R34 < 0) && (R34 != 1 || -1 < R0) && (R0 = R34 || R34 = 1))))) && (R39 != 0 || ((R6 != 0 || ((R2 != R40 || R40 = 1 || R40 < 0) && (R2 = R40 || R40 = 1 || R2 < 1))) && (R6 = 0 || ((R2 != R40 || R40 = 1 || R40 < 0) && (R40 != 1 || -1 < R2) && (R2 = R40 || R40 = 1))))) && (R41 != 0 || ((R6 != 0 || ((R2 != R42 || R42 = 1 || R42 < 0) && (R2 = R42 || R42 = 1 || R2 < 1))) && (R6 = 0 || ((R2 != R42 || R42 = 1 || R42 < 0) && (R42 != 1 || -1 < R2) && (R2 = R42 || R42 = 1))))) && (R0 = R32 || R32 = 1) && (R5 = 0 || (R2 = R36 && R35 - R36 = -1)) && (R5 = 0 || (R2 = R38 && R37 - R38 = -1)) && (R33 = 0 || (R4 = 0 && R0 < 0)) && (R39 = 0 || (R6 = 0 && R2 < 0)) && (R41 = 0 || (R6 = 0 && R2 < 0));
// End of Parikh automata intersection problem
