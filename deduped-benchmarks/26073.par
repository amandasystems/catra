// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R13879 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R13878 += 1, R13879 += 1 };
  s1 -> s1 [0, 65535] { R13879 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R13881 += 1 };
  s0 -> s0 [0, 65535] { R13880 += 1, R13881 += 1 };
  s0 -> s2 [84, 84] { R13881 += 1 };
  s0 -> s3 [84, 84] { R13881 += 1 };
  s0 -> s1 [86, 65535] { R13881 += 1 };
  s1 -> s1 [0, 83] { R13881 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13881 += 1 };
  s1 -> s3 [84, 84] { R13881 += 1 };
  s1 -> s1 [86, 65535] { R13881 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 84] { R13881 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [86, 65535] { R13881 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R13883 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R13882 += 1, R13883 += 1 };
  s0 -> s2 [84, 84] { R13883 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R13883 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R13883 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R13883 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13883 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R13883 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R13883 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13883 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R13885 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R13884 += 1, R13885 += 1 };
  s0 -> s2 [84, 84] { R13885 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R13885 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R13885 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R13885 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13885 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R13885 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R13885 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R13885 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R13887 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R13886 += 1, R13887 += 1 };
  s0 -> s2 [84, 84] { R13887 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R13887 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R13887 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R13887 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13887 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R13887 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R13887 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R13887 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R13889 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R13888 += 1, R13889 += 1 };
  s0 -> s2 [84, 84] { R13889 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R13889 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R13889 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R13889 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13889 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R13889 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R13889 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R13889 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R13891 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R13890 += 1, R13891 += 1 };
  s0 -> s2 [84, 84] { R13891 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R13891 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R13891 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R13891 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13891 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R13891 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R13891 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13891 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R13893 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R13892 += 1, R13893 += 1 };
  s0 -> s2 [84, 84] { R13893 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R13893 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R13893 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R13893 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13893 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R13893 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R13893 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13893 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R13895 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R13894 += 1, R13895 += 1 };
  s0 -> s2 [84, 84] { R13895 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R13895 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R13895 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R13895 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13895 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R13895 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R13895 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13895 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R13915 += 1 };
  s0 -> s0 [0, 65535] { R13914 += 1, R13915 += 1 };
  s0 -> s2 [84, 84] { R13915 += 1 };
  s0 -> s1 [85, 65535] { R13915 += 1 };
  s1 -> s1 [0, 83] { R13915 += 1 };
  s1 -> s2 [84, 84] { R13915 += 1 };
  s1 -> s1 [85, 65535] { R13915 += 1 };
  s2 -> s2 [0, 65535] { R13915 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R13916 += 1, R13917 += 1 };
  s0 -> s1 [0, 65535] { R13917 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13917 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R13919 += 1 };
  s0 -> s0 [0, 65535] { R13918 += 1, R13919 += 1 };
  s0 -> s2 [0, 65535] { R13919 += 1, R8 += 1 };
  s0 -> s3 [84, 84] { R13919 += 1 };
  s0 -> s1 [85, 65535] { R13919 += 1 };
  s1 -> s1 [0, 83] { R13919 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R13919 += 1 };
  s1 -> s1 [85, 65535] { R13919 += 1 };
  s2 -> s1 [0, 83] { R13919 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13919 += 1, R8 += 1 };
  s2 -> s3 [84, 84] { R13919 += 1 };
  s2 -> s1 [85, 65535] { R13919 += 1 };
  s3 -> s3 [0, 65535] { R13919 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R13921 += 1, R13859 += 1 };
  s0 -> s2 [0, 65535] { R13921 += 1, R13858 += 1, R13859 += 1 };
  s0 -> s0 [0, 65535] { R13920 += 1, R13921 += 1 };
  s0 -> s1 [85, 65535] { R13921 += 1, R13859 += 1 };
  s1 -> s1 [0, 83] { R13921 += 1, R13859 += 1 };
  s1 -> s1 [0, 65535] { R13921 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R13921 += 1, R13859 += 1 };
  s2 -> s1 [0, 83] { R13921 += 1, R13859 += 1 };
  s2 -> s2 [0, 65535] { R13921 += 1, R13858 += 1, R13859 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R13921 += 1, R13859 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R13923 += 1, R13861 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R13922 += 1, R13923 += 1 };
  s0 -> s2 [0, 65535] { R13923 += 1, R13860 += 1, R13861 += 1 };
  s1 -> s1 [0, 65535] { R13923 += 1, R13861 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13923 += 1 };
  s2 -> s1 [0, 65535] { R13923 += 1, R13861 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13923 += 1, R13860 += 1, R13861 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13923 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R13925 += 1, R13862 += 1, R13863 += 1 };
  s0 -> s2 [0, 65535] { R13925 += 1, R13863 += 1 };
  s0 -> s0 [0, 65535] { R13924 += 1, R13925 += 1 };
  s1 -> s1 [0, 65535] { R13925 += 1, R13862 += 1, R13863 += 1 };
  s1 -> s2 [0, 65535] { R13925 += 1, R13863 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13925 += 1, R13863 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13925 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13925 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R13926 += 1, R13927 += 1 };
  s0 -> s1 [0, 65535] { R13927 += 1, R13865 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R13927 += 1, R13864 += 1, R13865 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13927 += 1, R13865 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R13927 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13927 += 1, R13865 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R13927 += 1, R13864 += 1, R13865 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13927 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R13929 += 1, R13867 += 1 };
  s0 -> s0 [0, 65535] { R13928 += 1, R13929 += 1 };
  s0 -> s2 [0, 65535] { R13929 += 1, R13867 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R13929 += 1, R13866 += 1, R13867 += 1 };
  s0 -> s1 [86, 65535] { R13929 += 1, R13867 += 1 };
  s1 -> s1 [0, 84] { R13929 += 1, R13867 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13929 += 1 };
  s1 -> s1 [86, 65535] { R13929 += 1, R13867 += 1 };
  s2 -> s1 [0, 84] { R13929 += 1, R13867 += 1 };
  s2 -> s5 [0, 65535] { R13929 += 1 };
  s2 -> s2 [0, 65535] { R13929 += 1, R13867 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R13929 += 1, R13867 += 1 };
  s3 -> s1 [0, 84] { R13929 += 1, R13867 += 1 };
  s3 -> s2 [0, 65535] { R13929 += 1, R13867 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13929 += 1, R13866 += 1, R13867 += 1 };
  s3 -> s1 [86, 65535] { R13929 += 1, R13867 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13929 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R13931 += 1, R13869 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R13930 += 1, R13931 += 1 };
  s0 -> s2 [0, 65535] { R13931 += 1, R13869 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R13931 += 1, R13868 += 1, R13869 += 1 };
  s0 -> s1 [86, 65535] { R13931 += 1, R13869 += 1, R73 += 1 };
  s1 -> s1 [0, 84] { R13931 += 1, R13869 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R13931 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13931 += 1, R13869 += 1 };
  s1 -> s1 [86, 65535] { R13931 += 1, R13869 += 1, R73 += 1 };
  s2 -> s1 [0, 84] { R13931 += 1, R13869 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R13931 += 1 };
  s2 -> s2 [0, 65535] { R13931 += 1, R13869 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R13931 += 1, R13869 += 1, R73 += 1 };
  s3 -> s1 [0, 84] { R13931 += 1, R13869 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R13931 += 1, R13869 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13931 += 1, R13868 += 1, R13869 += 1 };
  s3 -> s1 [86, 65535] { R13931 += 1, R13869 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13931 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R13933 += 1, R13870 += 1, R13871 += 1 };
  s0 -> s0 [0, 65535] { R13932 += 1, R13933 += 1 };
  s0 -> s2 [0, 65535] { R13933 += 1, R13871 += 1 };
  s1 -> s1 [0, 65535] { R13933 += 1, R13870 += 1, R13871 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R13933 += 1, R13871 += 1 };
  s2 -> s3 [0, 65535] { R13933 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13933 += 1, R13871 += 1 };
  s3 -> s3 [0, 65535] { R13933 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s0 -> s2 [0, 65535] { R13935 += 1, R13873 += 1, R12794 += 1, R12795 += 1 };
  s0 -> s3 [0, 65535] { R13935 += 1, R13872 += 1, R13873 += 1 };
  s0 -> s0 [0, 65535] { R13934 += 1, R13935 += 1 };
  s0 -> s4 [86, 86] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s0 -> s1 [87, 65535] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s1 -> s1 [0, 85] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s1 -> s4 [86, 86] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s1 -> s1 [87, 65535] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s2 -> s1 [0, 85] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s2 -> s2 [0, 65535] { R13935 += 1, R13873 += 1, R12794 += 1, R12795 += 1 };
  s2 -> s4 [86, 86] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s2 -> s1 [87, 65535] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s3 -> s1 [0, 85] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s3 -> s2 [0, 65535] { R13935 += 1, R13873 += 1, R12794 += 1, R12795 += 1 };
  s3 -> s3 [0, 65535] { R13935 += 1, R13872 += 1, R13873 += 1 };
  s3 -> s4 [86, 86] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s3 -> s1 [87, 65535] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s4 -> s5 [0, 65535] { R13935 += 1 };
  s4 -> s6 [0, 65535] { R13935 += 1, R13873 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R13935 += 1, R13873 += 1, R12795 += 1 };
  s5 -> s5 [0, 65535] { R13935 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R13935 += 1 };
  s6 -> s6 [0, 65535] { R13935 += 1, R13873 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R13936 += 1, R13937 += 1 };
  s0 -> s1 [0, 65535] { R13937 += 1, R13874 += 1, R13875 += 1 };
  s0 -> s2 [0, 65535] { R13937 += 1, R13875 += 1 };
  s1 -> s1 [0, 65535] { R13937 += 1, R13874 += 1, R13875 += 1 };
  s1 -> s2 [0, 65535] { R13937 += 1, R13875 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13937 += 1, R13875 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13937 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13937 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R13939 += 1, R13877 += 1 };
  s0 -> s2 [0, 65535] { R13939 += 1, R13876 += 1, R13877 += 1 };
  s0 -> s0 [0, 65535] { R13938 += 1, R13939 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13939 += 1, R13877 += 1 };
  s1 -> s4 [0, 65535] { R13939 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13939 += 1, R13877 += 1 };
  s2 -> s2 [0, 65535] { R13939 += 1, R13876 += 1, R13877 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13939 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R13940 += 1, R13941 += 1 };
  s0 -> s1 [0, 65535] { R13941 += 1, R13896 += 1, R13897 += 1 };
  s0 -> s2 [0, 65535] { R13941 += 1, R13897 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13941 += 1, R13896 += 1, R13897 += 1 };
  s1 -> s2 [0, 65535] { R13941 += 1, R13897 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R13941 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13941 += 1, R13897 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R13941 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R13943 += 1, R13899 += 1 };
  s0 -> s0 [0, 65535] { R13942 += 1, R13943 += 1 };
  s0 -> s2 [0, 65535] { R13943 += 1, R13898 += 1, R13899 += 1 };
  s0 -> s3 [84, 84] { R13943 += 1, R13899 += 1 };
  s0 -> s4 [84, 84] { R13943 += 1, R13899 += 1 };
  s0 -> s5 [85, 85] { R13943 += 1, R13899 += 1 };
  s0 -> s1 [86, 65535] { R13943 += 1, R13899 += 1 };
  s1 -> s1 [0, 83] { R13943 += 1, R13899 += 1 };
  s1 -> s3 [84, 84] { R13943 += 1, R13899 += 1 };
  s1 -> s4 [84, 84] { R13943 += 1, R13899 += 1 };
  s1 -> s5 [85, 85] { R13943 += 1, R13899 += 1 };
  s1 -> s1 [86, 65535] { R13943 += 1, R13899 += 1 };
  s2 -> s1 [0, 83] { R13943 += 1, R13899 += 1 };
  s2 -> s2 [0, 65535] { R13943 += 1, R13898 += 1, R13899 += 1 };
  s2 -> s3 [84, 84] { R13943 += 1, R13899 += 1 };
  s2 -> s4 [84, 84] { R13943 += 1, R13899 += 1 };
  s2 -> s5 [85, 85] { R13943 += 1, R13899 += 1 };
  s2 -> s1 [86, 65535] { R13943 += 1, R13899 += 1 };
  s3 -> s3 [0, 84] { R13943 += 1, R13899 += 1 };
  s3 -> s7 [85, 85] { R13943 += 1, R13899 += 1 };
  s3 -> s3 [86, 65535] { R13943 += 1, R13899 += 1 };
  s5 -> s5 [0, 83] { R13943 += 1, R13899 += 1 };
  s5 -> s5 [0, 65535] { R13943 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R13943 += 1, R13899 += 1 };
  s5 -> s8 [84, 84] { R13943 += 1, R13899 += 1 };
  s5 -> s5 [85, 65535] { R13943 += 1, R13899 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R13943 += 1, R13899 += 1 };
  s7 -> s9 [0, 65535] { R13943 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R13943 += 1 };
  s9 -> s9 [0, 65535] { R13943 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R13945 += 1, R13901 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R13944 += 1, R13945 += 1 };
  s0 -> s2 [0, 65535] { R13945 += 1, R13900 += 1, R13901 += 1 };
  s0 -> s3 [84, 84] { R13945 += 1, R13901 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R13945 += 1, R13901 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R13945 += 1, R13901 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R13945 += 1, R13901 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R13945 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R13945 += 1, R13901 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R13945 += 1, R13901 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R13945 += 1, R13901 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R13945 += 1, R13901 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13945 += 1, R13900 += 1, R13901 += 1 };
  s2 -> s3 [84, 84] { R13945 += 1, R13901 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R13945 += 1, R13901 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R13945 += 1, R13901 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R13945 += 1 };
  s3 -> s3 [0, 65535] { R13945 += 1, R13901 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13945 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13945 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R13947 += 1, R13903 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R13946 += 1, R13947 += 1 };
  s0 -> s2 [0, 65535] { R13947 += 1, R13902 += 1, R13903 += 1 };
  s0 -> s3 [84, 84] { R13947 += 1, R13903 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R13947 += 1, R13903 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R13947 += 1, R13903 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R13947 += 1, R13903 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13947 += 1 };
  s1 -> s3 [84, 84] { R13947 += 1, R13903 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R13947 += 1, R13903 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R13947 += 1, R13903 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R13947 += 1, R13903 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R13947 += 1, R13902 += 1, R13903 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R13947 += 1, R13903 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R13947 += 1, R13903 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R13947 += 1, R13903 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R13947 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13947 += 1, R13903 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13947 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13947 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R13948 += 1, R13949 += 1 };
  s0 -> s2 [0, 65535] { R13949 += 1, R13904 += 1, R13905 += 1 };
  s0 -> s3 [84, 84] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [84, 84] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [85, 65535] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 83] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R13949 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [84, 84] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [85, 65535] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 83] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R13949 += 1, R13904 += 1, R13905 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [84, 84] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [85, 65535] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R13949 += 1, R13905 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13949 += 1 };
  s4 -> s4 [0, 65535] { R13949 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13949 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [0, 83] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s0 [0, 65535] { R13950 += 1, R13951 += 1 };
  s0 -> s3 [0, 65535] { R13951 += 1, R13906 += 1, R13907 += 1 };
  s0 -> s4 [84, 84] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s5 [84, 84] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s6 [84, 84] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s7 [84, 84] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s1 [85, 65535] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [85, 65535] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s11 [0, 83] { R13951 += 1, R13907 += 1 };
  s1 -> s1 [0, 83] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s8 [84, 84] { R13951 += 1, R13907 += 1 };
  s1 -> s12 [84, 84] { R13951 += 1, R13907 += 1 };
  s1 -> s6 [84, 84] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s7 [84, 84] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [85, 65535] { R13951 += 1, R13907 += 1 };
  s1 -> s1 [85, 65535] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s1 [0, 83] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [0, 83] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s4 [84, 84] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s5 [84, 84] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s6 [84, 84] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s7 [84, 84] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s1 [85, 65535] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [85, 65535] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [0, 83] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [0, 83] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s3 [0, 65535] { R13951 += 1, R13906 += 1, R13907 += 1 };
  s3 -> s4 [84, 84] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s5 [84, 84] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s6 [84, 84] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s7 [84, 84] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [85, 65535] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [85, 65535] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s4 [0, 65535] { R13951 += 1, R13907 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s6 [0, 65535] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s6 -> s8 [0, 65535] { R13951 += 1, R13907 += 1 };
  s6 -> s6 [0, 65535] { R13951 += 1, R13907 += 1, R10247 += 1, R10248 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R13951 += 1 };
  s8 -> s8 [0, 65535] { R13951 += 1, R13907 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R13951 += 1 };
  s11 -> s11 [0, 83] { R13951 += 1, R13907 += 1 };
  s11 -> s11 [0, 65535] { R13951 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [84, 84] { R13951 += 1, R13907 += 1 };
  s11 -> s12 [84, 84] { R13951 += 1, R13907 += 1 };
  s11 -> s11 [85, 65535] { R13951 += 1, R13907 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R13951 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s2 [0, 65535] { R13953 += 1, R13908 += 1, R13909 += 1 };
  s0 -> s0 [0, 65535] { R13952 += 1, R13953 += 1 };
  s0 -> s3 [84, 84] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s4 [84, 84] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s1 [85, 65535] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s1 [0, 83] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s1 [0, 65535] { R13953 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s4 [84, 84] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s1 [85, 65535] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s2 -> s1 [0, 83] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s2 -> s2 [0, 65535] { R13953 += 1, R13908 += 1, R13909 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s2 -> s4 [84, 84] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s2 -> s1 [85, 65535] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s3 -> s3 [0, 65535] { R13953 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13953 += 1, R13909 += 1, R12792 += 1, R12793 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13953 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13953 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s0 -> s2 [0, 83] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s0 -> s0 [0, 65535] { R13954 += 1, R13955 += 1 };
  s0 -> s3 [0, 65535] { R13955 += 1, R13910 += 1, R13911 += 1 };
  s0 -> s4 [84, 84] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s0 -> s5 [84, 84] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s0 -> s6 [84, 84] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s0 -> s7 [84, 84] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s0 -> s1 [85, 65535] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s0 -> s2 [85, 65535] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s1 -> s1 [0, 83] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s1 -> s2 [0, 83] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s1 -> s4 [84, 84] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s1 -> s5 [84, 84] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s1 -> s6 [84, 84] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s1 -> s7 [84, 84] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s1 -> s1 [85, 65535] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s1 -> s2 [85, 65535] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s2 -> s11 [0, 83] { R13955 += 1, R13911 += 1 };
  s2 -> s2 [0, 83] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s2 -> s8 [84, 84] { R13955 += 1, R13911 += 1 };
  s2 -> s5 [84, 84] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s2 -> s6 [84, 84] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s2 -> s12 [84, 84] { R13955 += 1, R13911 += 1 };
  s2 -> s11 [85, 65535] { R13955 += 1, R13911 += 1 };
  s2 -> s2 [85, 65535] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s3 -> s1 [0, 83] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s3 -> s2 [0, 83] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s3 -> s3 [0, 65535] { R13955 += 1, R13910 += 1, R13911 += 1 };
  s3 -> s4 [84, 84] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s3 -> s5 [84, 84] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s3 -> s6 [84, 84] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s3 -> s7 [84, 84] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s3 -> s1 [85, 65535] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s3 -> s2 [85, 65535] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s6 -> s8 [0, 65535] { R13955 += 1, R13911 += 1 };
  s6 -> s6 [0, 65535] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s7 -> s6 [0, 65535] { R13955 += 1, R13911 += 1, R13641 += 1, R13642 += 1 };
  s7 -> s7 [0, 65535] { R13955 += 1, R13911 += 1, R13640 += 1, R13641 += 1 };
  s8 -> s8 [0, 65535] { R13955 += 1, R13911 += 1 };
  s8 -> s9 [0, 65535] { R13955 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R13955 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 83] { R13955 += 1, R13911 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R13955 += 1 };
  s11 -> s8 [84, 84] { R13955 += 1, R13911 += 1 };
  s11 -> s12 [84, 84] { R13955 += 1, R13911 += 1 };
  s11 -> s11 [85, 65535] { R13955 += 1, R13911 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R13955 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s0 -> s2 [0, 83] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s0 -> s0 [0, 65535] { R13956 += 1, R13957 += 1 };
  s0 -> s3 [0, 65535] { R13957 += 1, R13912 += 1, R13913 += 1 };
  s0 -> s4 [84, 84] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s0 -> s5 [84, 84] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s0 -> s6 [84, 84] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s0 -> s7 [84, 84] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s0 -> s8 [85, 85] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s0 -> s2 [85, 65535] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s0 -> s1 [87, 65535] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s1 -> s1 [0, 83] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s1 -> s4 [84, 84] { R13957 += 1, R13913 += 1 };
  s1 -> s5 [84, 84] { R13957 += 1, R13913 += 1 };
  s1 -> s8 [85, 85] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s1 -> s1 [85, 65535] { R13957 += 1, R13913 += 1 };
  s1 -> s1 [87, 65535] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s2 -> s1 [0, 83] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s2 -> s2 [0, 83] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s2 -> s4 [84, 84] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s2 -> s5 [84, 84] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s2 -> s6 [84, 84] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s2 -> s7 [84, 84] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s2 -> s8 [85, 85] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s2 -> s2 [85, 65535] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s2 -> s1 [87, 65535] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s3 -> s1 [0, 83] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s3 -> s2 [0, 83] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s3 -> s3 [0, 65535] { R13957 += 1, R13912 += 1, R13913 += 1 };
  s3 -> s4 [84, 84] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s3 -> s5 [84, 84] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s3 -> s6 [84, 84] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s3 -> s7 [84, 84] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s3 -> s8 [85, 85] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s3 -> s2 [85, 65535] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s3 -> s1 [87, 65535] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s5 -> s5 [0, 84] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s5 -> s5 [0, 65535] { R13957 += 1, R13913 += 1 };
  s5 -> s11 [85, 85] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s5 -> s5 [87, 65535] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s7 -> s5 [0, 84] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s7 -> s7 [0, 65535] { R13957 += 1, R13913 += 1, R13854 += 1, R13855 += 1 };
  s7 -> s11 [85, 85] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s7 -> s5 [87, 65535] { R13957 += 1, R13913 += 1, R13855 += 1 };
  s8 -> s8 [0, 83] { R13957 += 1, R13913 += 1 };
  s8 -> s8 [0, 65535] { R13957 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [84, 84] { R13957 += 1, R13913 += 1 };
  s8 -> s11 [84, 84] { R13957 += 1, R13913 += 1 };
  s8 -> s8 [85, 65535] { R13957 += 1, R13913 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R13957 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R13957 += 1 };
  s11 -> s11 [0, 65535] { R13957 += 1, R13913 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R13957 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R13873 && R2 = R13957 && R20 - R13957 = -1 && R21 = R13957 && R22 - R13957 = -1 && R23 = R13957 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12795 + -1*R12793 - R53 = 0 && R52 + R12794 + R12792 = 0 && R13872 = 0 && R13898 = 0 && R13899 = 0 && R13906 = 0 && R13907 = 0 && R13910 = 0 && R13911 = 0 && R13912 = 0 && R13913 = 0 && R13914 = 0 && R13915 = R13957 && R13916 = 0 && R13917 = R13957 && R13918 = 0 && R13919 = R13957 && R13920 = 0 && R13921 = R13957 && R13922 = 0 && R13923 = R13957 && R13924 = 0 && R13925 = R13957 && R13926 = 0 && R13927 = R13957 && R13928 = 0 && R13929 = R13957 && R13930 = 0 && R13931 = R13957 && R13932 = 0 && R13933 = R13957 && R13934 = 0 && R13935 = R13957 && R13936 = 0 && R13937 = R13957 && R13938 = 0 && R13939 = R13957 && R13940 = 0 && R13941 = R13957 && R13942 = 0 && R13943 = R13957 && R13944 = 0 && R13945 = R13957 && R13946 = 0 && R13947 = R13957 && R13948 = 0 && R13949 = R13957 && R13950 = 0 && R13951 = R13957 && R13952 = 0 && R13953 = R13957 && R13954 = 0 && R13955 = R13957 && R13956 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12795 + -1*R12793 - R53 < 1 && -1 < R13873 && 0 < R13957 && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R12795 + -1*R12793 - R53 = 0 || R53 + R12795 + R12793 < 1) && (R42 + R72 + R70 = 0 || R53 + R12795 + R12793 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R12795 + -1*R12793 - R53 = 0 || R53 + R12795 + R12793 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R12795 + R12793 < 1))) && (R13858 != 0 || R13859 = R13873 || (R17 = 0 && R13873 = 0)) && (R13860 != 0 || R13861 = R13873 || (R17 = 0 && R13873 = 0)) && (R13862 != 0 || R13863 = R13873 || (R17 = 0 && R13873 = 0)) && (R13864 != 0 || R13865 = R13873 || (R17 = 0 && R13873 = 0)) && (R13866 != 0 || R13867 = R13873 || (R17 = 0 && R13873 = 0)) && (R13868 != 0 || R13869 = R13873 || (R17 = 0 && R13873 = 0)) && (R13870 != 0 || R13871 = R13873 || (R17 = 0 && R13873 = 0)) && (R13874 != 0 || R13873 = R13875 || (R17 = 0 && R13873 = 0)) && (R13876 != 0 || R13873 = R13877 || (R17 = 0 && R13873 = 0)) && (R18 = 0 || (R13896 = 0 && R13897 = 0)) && (R18 = 0 || (R13900 = 0 && R13901 = 0)) && (R18 = 0 || (R13902 = 0 && R13903 = 0)) && (R18 = 0 || (R13904 = 0 && R13905 = 0)) && (R18 = 0 || (R13908 = 0 && R13909 = 0)) && (R19 = 0 || (R13878 = 0 && R13879 = 0)) && (R19 = 0 || (R13880 = 0 && R13881 = 0)) && (R19 = 0 || (R13882 = 0 && R13883 = 0)) && (R19 = 0 || (R13884 = 0 && R13885 = 0)) && (R19 = 0 || (R13886 = 0 && R13887 = 0)) && (R19 = 0 || (R13888 = 0 && R13889 = 0)) && (R19 = 0 || (R13890 = 0 && R13891 = 0)) && (R19 = 0 || (R13892 = 0 && R13893 = 0)) && (R19 = 0 || (R13894 = 0 && R13895 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R12795 + -1*R12793 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R12795 + -1*R12793 - R53 = 0)) && (R58 + R13645 + R13642 = 0 || (R56 + R13643 + R13640 = 0 && R57 + R13644 + R13641 = 0)) && (R58 + R13645 + R13642 = 0 || (R62 + R13856 + R13854 = 0 && R63 + R13857 + R13855 = 0)) && (R13858 = 0 || (R17 = 0 && R13873 = 0)) && (R13860 = 0 || (R17 = 0 && R13873 = 0)) && (R13862 = 0 || (R17 = 0 && R13873 = 0)) && (R13864 = 0 || (R17 = 0 && R13873 = 0)) && (R13866 = 0 || (R17 = 0 && R13873 = 0)) && (R13868 = 0 || (R17 = 0 && R13873 = 0)) && (R13870 = 0 || (R17 = 0 && R13873 = 0)) && (R13874 = 0 || (R17 = 0 && R13873 = 0)) && (R13876 = 0 || (R17 = 0 && R13873 = 0));
// End of Parikh automata intersection problem
