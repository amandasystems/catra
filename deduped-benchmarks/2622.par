// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R488, R489, R490, R491, R5, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R700, R701, R702, R703, R704, R705, R706, R707, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [10, 10] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R669 += 1 };
  s0 -> s0 [0, 65535] { R668 += 1, R669 += 1 };
  s0 -> s2 [66, 66] { R669 += 1 };
  s0 -> s1 [67, 65535] { R669 += 1 };
  s1 -> s1 [0, 64] { R669 += 1 };
  s1 -> s2 [66, 66] { R669 += 1 };
  s1 -> s1 [67, 65535] { R669 += 1 };
  s2 -> s2 [0, 64] { R669 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R669 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R670 += 1, R671 += 1 };
  s0 -> s1 [0, 65535] { R671 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R671 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65] { R673 += 1 };
  s0 -> s2 [0, 65535] { R673 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R672 += 1, R673 += 1 };
  s0 -> s3 [66, 66] { R673 += 1 };
  s0 -> s1 [67, 65535] { R673 += 1 };
  s1 -> s1 [0, 65] { R673 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R673 += 1 };
  s1 -> s1 [67, 65535] { R673 += 1 };
  s2 -> s1 [0, 65] { R673 += 1 };
  s2 -> s2 [0, 65535] { R673 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R673 += 1 };
  s2 -> s1 [67, 65535] { R673 += 1 };
  s3 -> s3 [0, 65535] { R673 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R675 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R675 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R674 += 1, R675 += 1 };
  s0 -> s3 [9, 13] { R675 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R675 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R675 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R675 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R675 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R675 += 1 };
  s2 -> s1 [0, 8] { R675 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R675 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R675 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R675 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R675 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R675 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R675 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R675 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R677 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R677 += 1, R18 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R676 += 1, R677 += 1 };
  s1 -> s4 [0, 65535] { R677 += 1 };
  s1 -> s1 [0, 65535] { R677 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R677 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R677 += 1, R18 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R677 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R679 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R678 += 1, R679 += 1 };
  s0 -> s2 [0, 65535] { R679 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R679 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R679 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R679 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R679 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R679 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R679 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R679 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R679 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R679 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R679 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R679 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R679 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R679 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R679 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R681 += 1, R23 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R680 += 1, R681 += 1 };
  s0 -> s2 [0, 65535] { R681 += 1, R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R681 += 1, R23 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R681 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R681 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R681 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R681 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65] { R683 += 1, R643 += 1 };
  s0 -> s2 [0, 65535] { R683 += 1, R642 += 1, R643 += 1 };
  s0 -> s0 [0, 65535] { R682 += 1, R683 += 1 };
  s0 -> s1 [67, 65535] { R683 += 1, R643 += 1 };
  s1 -> s1 [0, 65] { R683 += 1, R643 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R683 += 1 };
  s1 -> s1 [67, 65535] { R683 += 1, R643 += 1 };
  s2 -> s1 [0, 65] { R683 += 1, R643 += 1 };
  s2 -> s2 [0, 65535] { R683 += 1, R642 += 1, R643 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [67, 65535] { R683 += 1, R643 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R685 += 1, R644 += 1, R645 += 1 };
  s0 -> s2 [0, 65535] { R685 += 1, R645 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R684 += 1, R685 += 1 };
  s1 -> s1 [0, 65535] { R685 += 1, R644 += 1, R645 += 1 };
  s1 -> s2 [0, 65535] { R685 += 1, R645 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R685 += 1, R645 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R685 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R685 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R686 += 1, R687 += 1 };
  s0 -> s1 [0, 65535] { R687 += 1, R646 += 1, R647 += 1 };
  s0 -> s2 [0, 65535] { R687 += 1, R647 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R687 += 1, R646 += 1, R647 += 1 };
  s1 -> s2 [0, 65535] { R687 += 1, R647 += 1 };
  s2 -> s3 [0, 65535] { R687 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R687 += 1, R647 += 1 };
  s3 -> s3 [0, 65535] { R687 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R689 += 1, R648 += 1, R649 += 1 };
  s0 -> s2 [0, 65535] { R689 += 1, R649 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R688 += 1, R689 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R689 += 1, R648 += 1, R649 += 1 };
  s1 -> s2 [0, 65535] { R689 += 1, R649 += 1, R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R689 += 1 };
  s2 -> s2 [0, 65535] { R689 += 1, R649 += 1, R485 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R689 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 66] { R691 += 1, R651 += 1 };
  s0 -> s0 [0, 65535] { R690 += 1, R691 += 1 };
  s0 -> s2 [0, 65535] { R691 += 1, R651 += 1, R487 += 1 };
  s0 -> s3 [0, 65535] { R691 += 1, R650 += 1, R651 += 1 };
  s0 -> s1 [68, 65535] { R691 += 1, R651 += 1 };
  s1 -> s1 [0, 66] { R691 += 1, R651 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R691 += 1 };
  s1 -> s1 [68, 65535] { R691 += 1, R651 += 1 };
  s2 -> s1 [0, 66] { R691 += 1, R651 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R691 += 1, R651 += 1, R487 += 1 };
  s2 -> s5 [0, 65535] { R691 += 1 };
  s2 -> s1 [68, 65535] { R691 += 1, R651 += 1 };
  s3 -> s1 [0, 66] { R691 += 1, R651 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R691 += 1, R651 += 1, R487 += 1 };
  s3 -> s3 [0, 65535] { R691 += 1, R650 += 1, R651 += 1 };
  s3 -> s1 [68, 65535] { R691 += 1, R651 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R691 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 66] { R693 += 1, R653 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R692 += 1, R693 += 1 };
  s0 -> s2 [0, 65535] { R693 += 1, R653 += 1, R490 += 1, R491 += 1 };
  s0 -> s3 [0, 65535] { R693 += 1, R652 += 1, R653 += 1 };
  s0 -> s4 [67, 67] { R693 += 1, R653 += 1, R491 += 1 };
  s0 -> s1 [68, 65535] { R693 += 1, R653 += 1, R491 += 1 };
  s1 -> s1 [0, 66] { R693 += 1, R653 += 1, R491 += 1 };
  s1 -> s4 [67, 67] { R693 += 1, R653 += 1, R491 += 1 };
  s1 -> s1 [68, 65535] { R693 += 1, R653 += 1, R491 += 1 };
  s2 -> s1 [0, 66] { R693 += 1, R653 += 1, R491 += 1 };
  s2 -> s2 [0, 65535] { R693 += 1, R653 += 1, R490 += 1, R491 += 1 };
  s2 -> s4 [67, 67] { R693 += 1, R653 += 1, R491 += 1 };
  s2 -> s1 [68, 65535] { R693 += 1, R653 += 1, R491 += 1 };
  s3 -> s1 [0, 66] { R693 += 1, R653 += 1, R491 += 1 };
  s3 -> s2 [0, 65535] { R693 += 1, R653 += 1, R490 += 1, R491 += 1 };
  s3 -> s3 [0, 65535] { R693 += 1, R652 += 1, R653 += 1 };
  s3 -> s4 [67, 67] { R693 += 1, R653 += 1, R491 += 1 };
  s3 -> s1 [68, 65535] { R693 += 1, R653 += 1, R491 += 1 };
  s4 -> s5 [0, 65535] { R693 += 1 };
  s4 -> s4 [0, 65535] { R693 += 1, R653 += 1, R491 += 1 };
  s4 -> s6 [0, 65535] { R693 += 1, R653 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R693 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R693 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R693 += 1, R653 += 1 };
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R695 += 1, R654 += 1, R655 += 1 };
  s0 -> s2 [0, 65535] { R695 += 1, R655 += 1 };
  s0 -> s0 [0, 65535] { R694 += 1, R695 += 1 };
  s1 -> s1 [0, 65535] { R695 += 1, R654 += 1, R655 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R695 += 1, R655 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R695 += 1 };
  s2 -> s2 [0, 65535] { R695 += 1, R655 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R695 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R697 += 1, R656 += 1, R657 += 1 };
  s0 -> s2 [0, 65535] { R697 += 1, R657 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R696 += 1, R697 += 1 };
  s1 -> s1 [0, 65535] { R697 += 1, R656 += 1, R657 += 1 };
  s1 -> s2 [0, 65535] { R697 += 1, R657 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R697 += 1, R657 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R697 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R697 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R699 += 1, R659 += 1 };
  s0 -> s0 [0, 65535] { R698 += 1, R699 += 1 };
  s0 -> s2 [0, 65535] { R699 += 1, R658 += 1, R659 += 1 };
  s0 -> s3 [66, 66] { R699 += 1, R659 += 1 };
  s0 -> s4 [66, 66] { R699 += 1, R659 += 1 };
  s0 -> s5 [67, 67] { R699 += 1, R659 += 1 };
  s0 -> s1 [68, 65535] { R699 += 1, R659 += 1 };
  s1 -> s1 [0, 65] { R699 += 1, R659 += 1 };
  s1 -> s3 [66, 66] { R699 += 1, R659 += 1 };
  s1 -> s4 [66, 66] { R699 += 1, R659 += 1 };
  s1 -> s5 [67, 67] { R699 += 1, R659 += 1 };
  s1 -> s1 [68, 65535] { R699 += 1, R659 += 1 };
  s2 -> s1 [0, 65] { R699 += 1, R659 += 1 };
  s2 -> s2 [0, 65535] { R699 += 1, R658 += 1, R659 += 1 };
  s2 -> s3 [66, 66] { R699 += 1, R659 += 1 };
  s2 -> s4 [66, 66] { R699 += 1, R659 += 1 };
  s2 -> s5 [67, 67] { R699 += 1, R659 += 1 };
  s2 -> s1 [68, 65535] { R699 += 1, R659 += 1 };
  s4 -> s4 [0, 66] { R699 += 1, R659 += 1 };
  s4 -> s8 [67, 67] { R699 += 1, R659 += 1 };
  s4 -> s4 [68, 65535] { R699 += 1, R659 += 1 };
  s5 -> s5 [0, 65] { R699 += 1, R659 += 1 };
  s5 -> s5 [0, 65535] { R699 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [66, 66] { R699 += 1, R659 += 1 };
  s5 -> s8 [66, 66] { R699 += 1, R659 += 1 };
  s5 -> s5 [67, 65535] { R699 += 1, R659 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R699 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R699 += 1 };
  s8 -> s8 [0, 65535] { R699 += 1, R659 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R699 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R701 += 1, R661 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R701 += 1, R660 += 1, R661 += 1 };
  s0 -> s0 [0, 65535] { R700 += 1, R701 += 1 };
  s0 -> s3 [66, 66] { R701 += 1, R661 += 1, R484 += 1 };
  s0 -> s4 [66, 66] { R701 += 1, R661 += 1, R484 += 1 };
  s0 -> s1 [67, 65535] { R701 += 1, R661 += 1, R484 += 1 };
  s1 -> s1 [0, 65] { R701 += 1, R661 += 1, R484 += 1 };
  s1 -> s1 [0, 65535] { R701 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R701 += 1, R661 += 1, R484 += 1 };
  s1 -> s4 [66, 66] { R701 += 1, R661 += 1, R484 += 1 };
  s1 -> s1 [67, 65535] { R701 += 1, R661 += 1, R484 += 1 };
  s2 -> s1 [0, 65] { R701 += 1, R661 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R701 += 1, R660 += 1, R661 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R701 += 1, R661 += 1, R484 += 1 };
  s2 -> s4 [66, 66] { R701 += 1, R661 += 1, R484 += 1 };
  s2 -> s1 [67, 65535] { R701 += 1, R661 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R701 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R701 += 1, R661 += 1, R484 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R701 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R701 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R703 += 1, R663 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R702 += 1, R703 += 1 };
  s0 -> s2 [0, 65535] { R703 += 1, R662 += 1, R663 += 1 };
  s0 -> s3 [66, 66] { R703 += 1, R663 += 1, R486 += 1 };
  s0 -> s4 [66, 66] { R703 += 1, R663 += 1, R486 += 1 };
  s0 -> s1 [67, 65535] { R703 += 1, R663 += 1, R486 += 1 };
  s1 -> s1 [0, 65] { R703 += 1, R663 += 1, R486 += 1 };
  s1 -> s1 [0, 65535] { R703 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R703 += 1, R663 += 1, R486 += 1 };
  s1 -> s4 [66, 66] { R703 += 1, R663 += 1, R486 += 1 };
  s1 -> s1 [67, 65535] { R703 += 1, R663 += 1, R486 += 1 };
  s2 -> s1 [0, 65] { R703 += 1, R663 += 1, R486 += 1 };
  s2 -> s2 [0, 65535] { R703 += 1, R662 += 1, R663 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R703 += 1, R663 += 1, R486 += 1 };
  s2 -> s4 [66, 66] { R703 += 1, R663 += 1, R486 += 1 };
  s2 -> s1 [67, 65535] { R703 += 1, R663 += 1, R486 += 1 };
  s3 -> s3 [0, 65535] { R703 += 1, R663 += 1, R486 += 1 };
  s3 -> s6 [0, 65535] { R703 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R703 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R703 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s0 -> s2 [0, 65535] { R705 += 1, R664 += 1, R665 += 1 };
  s0 -> s0 [0, 65535] { R704 += 1, R705 += 1 };
  s0 -> s3 [66, 66] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s0 -> s4 [66, 66] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s0 -> s1 [67, 65535] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s1 -> s1 [0, 65] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s1 -> s1 [0, 65535] { R705 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s1 -> s4 [66, 66] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s1 -> s1 [67, 65535] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s2 -> s1 [0, 65] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s2 -> s2 [0, 65535] { R705 += 1, R664 += 1, R665 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s2 -> s4 [66, 66] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s2 -> s1 [67, 65535] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s3 -> s3 [0, 65535] { R705 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R705 += 1, R665 += 1, R488 += 1, R489 += 1 };
  s4 -> s5 [0, 65535] { R705 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R705 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s0 -> s2 [0, 65] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s0 -> s3 [0, 65535] { R707 += 1, R666 += 1, R667 += 1 };
  s0 -> s0 [0, 65535] { R706 += 1, R707 += 1 };
  s0 -> s4 [66, 66] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s0 -> s5 [66, 66] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s0 -> s6 [66, 66] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s0 -> s7 [66, 66] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s0 -> s1 [67, 65535] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s0 -> s2 [67, 65535] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s1 -> s1 [0, 65] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s1 -> s2 [0, 65] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s1 -> s4 [66, 66] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s1 -> s5 [66, 66] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s1 -> s6 [66, 66] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s1 -> s7 [66, 66] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s1 -> s1 [67, 65535] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s1 -> s2 [67, 65535] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s2 -> s2 [0, 65] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s2 -> s11 [0, 65] { R707 += 1, R667 += 1 };
  s2 -> s8 [66, 66] { R707 += 1, R667 += 1 };
  s2 -> s6 [66, 66] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s2 -> s12 [66, 66] { R707 += 1, R667 += 1 };
  s2 -> s7 [66, 66] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s2 -> s2 [67, 65535] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s2 -> s11 [67, 65535] { R707 += 1, R667 += 1 };
  s3 -> s1 [0, 65] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s3 -> s2 [0, 65] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s3 -> s3 [0, 65535] { R707 += 1, R666 += 1, R667 += 1 };
  s3 -> s4 [66, 66] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s3 -> s5 [66, 66] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s3 -> s6 [66, 66] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s3 -> s7 [66, 66] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s3 -> s1 [67, 65535] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s3 -> s2 [67, 65535] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s5 -> s5 [0, 65535] { R707 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s5 -> s7 [0, 65535] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s7 -> s8 [0, 65535] { R707 += 1, R667 += 1 };
  s7 -> s7 [0, 65535] { R707 += 1, R667 += 1, R637 += 1, R638 += 1 };
  s8 -> s8 [0, 65535] { R707 += 1, R667 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R707 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R707 += 1 };
  s11 -> s11 [0, 65] { R707 += 1, R667 += 1 };
  s11 -> s11 [0, 65535] { R707 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [66, 66] { R707 += 1, R667 += 1 };
  s11 -> s12 [66, 66] { R707 += 1, R667 += 1 };
  s11 -> s11 [67, 65535] { R707 += 1, R667 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R707 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R1 = R655 && R2 = R707 && R16 - R655 = -1 && R17 = R655 && R18 - R655 = -1 && R19 = R655 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R491 + -1*R489 = 0 && R490 + R488 = 0 && R642 = 0 && R643 = R655 && R644 = 0 && R645 = R655 && R646 = 0 && R647 = R655 && R648 = 0 && R649 = R655 && R650 = 0 && R651 = R655 && R652 = 0 && R653 = R655 && R654 = 0 && R658 = 0 && R659 = 0 && R666 = 0 && R667 = 0 && R668 = 1 && R669 = R707 && R670 = 1 && R671 = R707 && R672 = 1 && R673 = R707 && R674 = 1 && R675 = R707 && R676 = 1 && R677 = R707 && R678 = 1 && R679 = R707 && R680 = 1 && R681 = R707 && R682 = 1 && R683 = R707 && R684 = 1 && R685 = R707 && R686 = 1 && R687 = R707 && R688 = 1 && R689 = R707 && R690 = 1 && R691 = R707 && R692 = 1 && R693 = R707 && R694 = 1 && R695 = R707 && R696 = 1 && R697 = R707 && R698 = 1 && R699 = R707 && R700 = 1 && R701 = R707 && R702 = 1 && R703 = R707 && R704 = 1 && R705 = R707 && R706 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R491 + -1*R489 < 1 && 0 < R655 && 0 < R707 && (R491 + R489 != 0 || R641 + R638 = 0 || (R639 + R636 = 0 && R640 + R637 = 0)) && (R639 + R636 != 0 || R491 + R489 + -1*R640 + -1*R637 = 0 || R491 + R489 < 1) && (R15 = 0 || (R656 = 0 && R657 = 0)) && (R15 = 0 || (R660 = 0 && R661 = 0)) && (R15 = 0 || (R662 = 0 && R663 = 0)) && (R15 = 0 || (R664 = 0 && R665 = 0)) && (R639 + R636 = 0 || R491 + R489 < 1);
// End of Parikh automata intersection problem
