// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R1368, R1369, R14, R15, R1598, R1599, R16, R1600, R1601, R1602, R1603, R1604, R1605, R1606, R1607, R1608, R1609, R1610, R1611, R1612, R1613, R1614, R1615, R1616, R1617, R1618, R1619, R1620, R1621, R1622, R1623, R1624, R1625, R1626, R1627, R1628, R1629, R1630, R1631, R1632, R1633, R1634, R1635, R1636, R1637, R1638, R1639, R1640, R1641, R1642, R1643, R1644, R1645, R1646, R1647, R1648, R1649, R1650, R1651, R1652, R1653, R1654, R1655, R1656, R1657, R1658, R1659, R1660, R1661, R1662, R1663, R1664, R1665, R1666, R1667, R1668, R1669, R1670, R1671, R1672, R1673, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [10, 10] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1635 += 1 };
  s0 -> s0 [0, 65535] { R1634 += 1, R1635 += 1 };
  s0 -> s2 [66, 66] { R1635 += 1 };
  s0 -> s1 [67, 65535] { R1635 += 1 };
  s1 -> s1 [0, 64] { R1635 += 1 };
  s1 -> s2 [66, 66] { R1635 += 1 };
  s1 -> s1 [67, 65535] { R1635 += 1 };
  s2 -> s2 [0, 64] { R1635 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R1635 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1637 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1636 += 1, R1637 += 1 };
  s1 -> s1 [0, 65535] { R1637 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65] { R1639 += 1 };
  s0 -> s2 [0, 65535] { R1639 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R1638 += 1, R1639 += 1 };
  s0 -> s3 [66, 66] { R1639 += 1 };
  s0 -> s1 [67, 65535] { R1639 += 1 };
  s1 -> s1 [0, 65] { R1639 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R1639 += 1 };
  s1 -> s1 [67, 65535] { R1639 += 1 };
  s2 -> s1 [0, 65] { R1639 += 1 };
  s2 -> s2 [0, 65535] { R1639 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R1639 += 1 };
  s2 -> s1 [67, 65535] { R1639 += 1 };
  s3 -> s3 [0, 65535] { R1639 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1641 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1640 += 1, R1641 += 1 };
  s0 -> s2 [0, 65535] { R1641 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R1641 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1641 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1641 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1641 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R1641 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R1641 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1641 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R1641 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1641 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1641 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1641 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1641 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1641 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1641 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1643 += 1, R18 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R1642 += 1, R1643 += 1 };
  s0 -> s2 [0, 65535] { R1643 += 1, R19 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R1643 += 1, R18 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1643 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1643 += 1 };
  s2 -> s2 [0, 65535] { R1643 += 1, R19 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1643 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1645 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1645 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1644 += 1, R1645 += 1 };
  s0 -> s3 [9, 13] { R1645 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1645 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1645 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1645 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R1645 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R1645 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1645 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R1645 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1645 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1645 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1645 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1645 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1645 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1645 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1647 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R1646 += 1, R1647 += 1 };
  s0 -> s2 [0, 65535] { R1647 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1647 += 1, R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535] { R1647 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1647 += 1 };
  s2 -> s2 [0, 65535] { R1647 += 1, R23 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1647 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65] { R1649 += 1, R1609 += 1 };
  s0 -> s0 [0, 65535] { R1648 += 1, R1649 += 1 };
  s0 -> s2 [0, 65535] { R1649 += 1, R1608 += 1, R1609 += 1 };
  s0 -> s1 [67, 65535] { R1649 += 1, R1609 += 1 };
  s1 -> s1 [0, 65] { R1649 += 1, R1609 += 1 };
  s1 -> s1 [0, 65535] { R1649 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [67, 65535] { R1649 += 1, R1609 += 1 };
  s2 -> s1 [0, 65] { R1649 += 1, R1609 += 1 };
  s2 -> s2 [0, 65535] { R1649 += 1, R1608 += 1, R1609 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [67, 65535] { R1649 += 1, R1609 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1650 += 1, R1651 += 1 };
  s0 -> s1 [0, 65535] { R1651 += 1, R1610 += 1, R1611 += 1 };
  s0 -> s2 [0, 65535] { R1651 += 1, R1611 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R1651 += 1, R1610 += 1, R1611 += 1 };
  s1 -> s2 [0, 65535] { R1651 += 1, R1611 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1651 += 1 };
  s2 -> s2 [0, 65535] { R1651 += 1, R1611 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1651 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1652 += 1, R1653 += 1 };
  s0 -> s1 [0, 65535] { R1653 += 1, R1612 += 1, R1613 += 1 };
  s0 -> s2 [0, 65535] { R1653 += 1, R1613 += 1 };
  s1 -> s1 [0, 65535] { R1653 += 1, R1612 += 1, R1613 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1653 += 1, R1613 += 1 };
  s2 -> s3 [0, 65535] { R1653 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1653 += 1, R1613 += 1 };
  s3 -> s3 [0, 65535] { R1653 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R1654 += 1, R1655 += 1 };
  s0 -> s1 [0, 65535] { R1655 += 1, R1615 += 1, R485 += 1 };
  s0 -> s2 [0, 65535] { R1655 += 1, R1614 += 1, R1615 += 1 };
  s1 -> s4 [0, 65535] { R1655 += 1 };
  s1 -> s1 [0, 65535] { R1655 += 1, R1615 += 1, R485 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1655 += 1, R1615 += 1, R485 += 1 };
  s2 -> s2 [0, 65535] { R1655 += 1, R1614 += 1, R1615 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1655 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 66] { R1657 += 1, R1617 += 1 };
  s0 -> s0 [0, 65535] { R1656 += 1, R1657 += 1 };
  s0 -> s2 [0, 65535] { R1657 += 1, R1616 += 1, R1617 += 1 };
  s0 -> s1 [68, 65535] { R1657 += 1, R1617 += 1 };
  s1 -> s1 [0, 66] { R1657 += 1, R1617 += 1 };
  s1 -> s1 [0, 65535] { R1657 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R1657 += 1, R1617 += 1 };
  s2 -> s1 [0, 66] { R1657 += 1, R1617 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1657 += 1, R1616 += 1, R1617 += 1 };
  s2 -> s1 [68, 65535] { R1657 += 1, R1617 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1659 += 1, R1618 += 1, R1619 += 1 };
  s0 -> s2 [0, 65535] { R1659 += 1, R1619 += 1 };
  s0 -> s0 [0, 65535] { R1658 += 1, R1659 += 1 };
  s1 -> s1 [0, 65535] { R1659 += 1, R1618 += 1, R1619 += 1 };
  s1 -> s2 [0, 65535] { R1659 += 1, R1619 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1659 += 1, R1619 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1659 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1659 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1661 += 1, R1620 += 1, R1621 += 1 };
  s0 -> s0 [0, 65535] { R1660 += 1, R1661 += 1 };
  s0 -> s2 [0, 65535] { R1661 += 1, R1621 += 1, R1605 += 1, R1606 += 1 };
  s0 -> s3 [0, 65535] { R1661 += 1, R1621 += 1, R1606 += 1, R1607 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1661 += 1, R1620 += 1, R1621 += 1 };
  s1 -> s2 [0, 65535] { R1661 += 1, R1621 += 1, R1605 += 1, R1606 += 1 };
  s1 -> s3 [0, 65535] { R1661 += 1, R1621 += 1, R1606 += 1, R1607 += 1 };
  s2 -> s5 [0, 65535] { R1661 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1661 += 1, R1621 += 1, R1605 += 1, R1606 += 1 };
  s2 -> s3 [0, 65535] { R1661 += 1, R1621 += 1, R1606 += 1, R1607 += 1 };
  s3 -> s4 [0, 65535] { R1661 += 1, R1621 += 1 };
  s3 -> s5 [0, 65535] { R1661 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1661 += 1, R1621 += 1, R1606 += 1, R1607 += 1 };
  s4 -> s4 [0, 65535] { R1661 += 1, R1621 += 1 };
  s4 -> s5 [0, 65535] { R1661 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1661 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1663 += 1, R1623 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R1662 += 1, R1663 += 1 };
  s0 -> s2 [0, 65535] { R1663 += 1, R1622 += 1, R1623 += 1 };
  s1 -> s1 [0, 65535] { R1663 += 1, R1623 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1663 += 1 };
  s2 -> s1 [0, 65535] { R1663 += 1, R1623 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1663 += 1, R1622 += 1, R1623 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1663 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R1665 += 1, R1625 += 1 };
  s0 -> s0 [0, 65535] { R1664 += 1, R1665 += 1 };
  s0 -> s2 [0, 65535] { R1665 += 1, R1624 += 1, R1625 += 1 };
  s0 -> s3 [66, 66] { R1665 += 1, R1625 += 1 };
  s0 -> s4 [66, 66] { R1665 += 1, R1625 += 1 };
  s0 -> s5 [67, 67] { R1665 += 1, R1625 += 1 };
  s0 -> s1 [68, 65535] { R1665 += 1, R1625 += 1 };
  s1 -> s1 [0, 65] { R1665 += 1, R1625 += 1 };
  s1 -> s3 [66, 66] { R1665 += 1, R1625 += 1 };
  s1 -> s4 [66, 66] { R1665 += 1, R1625 += 1 };
  s1 -> s5 [67, 67] { R1665 += 1, R1625 += 1 };
  s1 -> s1 [68, 65535] { R1665 += 1, R1625 += 1 };
  s2 -> s1 [0, 65] { R1665 += 1, R1625 += 1 };
  s2 -> s2 [0, 65535] { R1665 += 1, R1624 += 1, R1625 += 1 };
  s2 -> s3 [66, 66] { R1665 += 1, R1625 += 1 };
  s2 -> s4 [66, 66] { R1665 += 1, R1625 += 1 };
  s2 -> s5 [67, 67] { R1665 += 1, R1625 += 1 };
  s2 -> s1 [68, 65535] { R1665 += 1, R1625 += 1 };
  s4 -> s4 [0, 66] { R1665 += 1, R1625 += 1 };
  s4 -> s7 [67, 67] { R1665 += 1, R1625 += 1 };
  s4 -> s4 [68, 65535] { R1665 += 1, R1625 += 1 };
  s5 -> s5 [0, 65] { R1665 += 1, R1625 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1665 += 1 };
  s5 -> s7 [66, 66] { R1665 += 1, R1625 += 1 };
  s5 -> s8 [66, 66] { R1665 += 1, R1625 += 1 };
  s5 -> s5 [67, 65535] { R1665 += 1, R1625 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1665 += 1, R1625 += 1 };
  s7 -> s9 [0, 65535] { R1665 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1665 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1665 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R1667 += 1, R1627 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R1667 += 1, R1626 += 1, R1627 += 1 };
  s0 -> s0 [0, 65535] { R1666 += 1, R1667 += 1 };
  s0 -> s3 [66, 66] { R1667 += 1, R1627 += 1, R484 += 1 };
  s0 -> s4 [66, 66] { R1667 += 1, R1627 += 1, R484 += 1 };
  s0 -> s1 [67, 65535] { R1667 += 1, R1627 += 1, R484 += 1 };
  s1 -> s1 [0, 65] { R1667 += 1, R1627 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1667 += 1 };
  s1 -> s3 [66, 66] { R1667 += 1, R1627 += 1, R484 += 1 };
  s1 -> s4 [66, 66] { R1667 += 1, R1627 += 1, R484 += 1 };
  s1 -> s1 [67, 65535] { R1667 += 1, R1627 += 1, R484 += 1 };
  s2 -> s1 [0, 65] { R1667 += 1, R1627 += 1, R484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1667 += 1, R1626 += 1, R1627 += 1 };
  s2 -> s3 [66, 66] { R1667 += 1, R1627 += 1, R484 += 1 };
  s2 -> s4 [66, 66] { R1667 += 1, R1627 += 1, R484 += 1 };
  s2 -> s1 [67, 65535] { R1667 += 1, R1627 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R1667 += 1, R1627 += 1, R484 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1667 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1667 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1667 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R1669 += 1, R1629 += 1 };
  s0 -> s2 [0, 65] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s0 -> s3 [0, 65535] { R1669 += 1, R1628 += 1, R1629 += 1 };
  s0 -> s0 [0, 65535] { R1668 += 1, R1669 += 1 };
  s0 -> s4 [66, 66] { R1669 += 1, R1629 += 1 };
  s0 -> s5 [66, 66] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s0 -> s6 [66, 66] { R1669 += 1, R1629 += 1 };
  s0 -> s7 [66, 66] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s0 -> s2 [67, 65535] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s0 -> s1 [68, 65535] { R1669 += 1, R1629 += 1 };
  s1 -> s1 [0, 65] { R1669 += 1, R1629 += 1 };
  s1 -> s1 [0, 65535] { R1669 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [66, 66] { R1669 += 1, R1629 += 1 };
  s1 -> s6 [66, 66] { R1669 += 1, R1629 += 1 };
  s1 -> s1 [68, 65535] { R1669 += 1, R1629 += 1 };
  s2 -> s1 [0, 65] { R1669 += 1, R1629 += 1 };
  s2 -> s2 [0, 65] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s2 -> s4 [66, 66] { R1669 += 1, R1629 += 1 };
  s2 -> s5 [66, 66] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s2 -> s6 [66, 66] { R1669 += 1, R1629 += 1 };
  s2 -> s7 [66, 66] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s2 -> s2 [67, 65535] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s2 -> s1 [68, 65535] { R1669 += 1, R1629 += 1 };
  s3 -> s1 [0, 65] { R1669 += 1, R1629 += 1 };
  s3 -> s2 [0, 65] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s3 -> s3 [0, 65535] { R1669 += 1, R1628 += 1, R1629 += 1 };
  s3 -> s4 [66, 66] { R1669 += 1, R1629 += 1 };
  s3 -> s5 [66, 66] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s3 -> s6 [66, 66] { R1669 += 1, R1629 += 1 };
  s3 -> s7 [66, 66] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s3 -> s2 [67, 65535] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s3 -> s1 [68, 65535] { R1669 += 1, R1629 += 1 };
  s4 -> s4 [0, 66] { R1669 += 1, R1629 += 1 };
  s4 -> s4 [0, 65535] { R1669 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [68, 65535] { R1669 += 1, R1629 += 1 };
  s5 -> s4 [0, 66] { R1669 += 1, R1629 += 1 };
  s5 -> s5 [0, 65535] { R1669 += 1, R1629 += 1, R1368 += 1 };
  s5 -> s4 [68, 65535] { R1669 += 1, R1629 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1669 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s6, s8;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s0 -> s2 [0, 65] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s0 [0, 65535] { R1670 += 1, R1671 += 1 };
  s0 -> s3 [0, 65535] { R1671 += 1, R1630 += 1, R1631 += 1 };
  s0 -> s4 [66, 66] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s5 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s0 -> s6 [66, 66] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s7 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s0 -> s8 [67, 67] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s0 -> s2 [67, 65535] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s1 [68, 65535] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s1 -> s1 [0, 65] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s1 -> s5 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s1 -> s7 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s1 -> s8 [67, 67] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s1 -> s1 [68, 65535] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s2 -> s1 [0, 65] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s2 -> s2 [0, 65] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s4 [66, 66] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s5 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s2 -> s6 [66, 66] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s7 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s2 -> s8 [67, 67] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s2 -> s2 [67, 65535] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s1 [68, 65535] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s3 -> s1 [0, 65] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s3 -> s2 [0, 65] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s3 [0, 65535] { R1671 += 1, R1630 += 1, R1631 += 1 };
  s3 -> s4 [66, 66] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s5 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s3 -> s6 [66, 66] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s7 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s3 -> s8 [67, 67] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s3 -> s2 [67, 65535] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s1 [68, 65535] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s4 -> s5 [0, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s4 -> s4 [0, 65535] { R1671 += 1, R1631 += 1, R1598 += 1, R1599 += 1 };
  s4 -> s11 [67, 67] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s4 -> s5 [68, 65535] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s5 -> s5 [0, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s5 -> s11 [67, 67] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s5 -> s5 [68, 65535] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s8 -> s9 [0, 65] { R1671 += 1, R1631 += 1 };
  s8 -> s8 [0, 65] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s8 -> s10 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s8 -> s11 [66, 66] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s8 -> s12 [66, 66] { R1671 += 1, R1631 += 1 };
  s8 -> s13 [66, 66] { R1671 += 1, R1631 += 1 };
  s8 -> s9 [67, 65535] { R1671 += 1, R1631 += 1 };
  s8 -> s8 [67, 65535] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s9 -> s9 [0, 65] { R1671 += 1, R1631 += 1 };
  s9 -> s9 [0, 65535] { R1671 += 1 };
  s9 -> s15 [0, 65535];
  s9 -> s12 [66, 66] { R1671 += 1, R1631 += 1 };
  s9 -> s13 [66, 66] { R1671 += 1, R1631 += 1 };
  s9 -> s9 [67, 65535] { R1671 += 1, R1631 += 1 };
  s11 -> s11 [0, 65535] { R1671 += 1, R1631 += 1, R1599 += 1 };
  s11 -> s13 [0, 65535] { R1671 += 1, R1631 += 1 };
  s12 -> s15 [0, 65535];
  s12 -> s12 [0, 65535] { R1671 += 1 };
  s13 -> s14 [0, 65535] { R1671 += 1 };
  s13 -> s15 [0, 65535];
  s13 -> s13 [0, 65535] { R1671 += 1, R1631 += 1 };
  s14 -> s14 [0, 65535] { R1671 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s12, s13, s9, s14, s15;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s0 -> s0 [0, 65535] { R1672 += 1, R1673 += 1 };
  s0 -> s2 [0, 65535] { R1673 += 1, R1632 += 1, R1633 += 1 };
  s0 -> s3 [66, 66] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s0 -> s4 [66, 66] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s0 -> s1 [67, 65535] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s1 -> s1 [0, 65] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s1 -> s1 [0, 65535] { R1673 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s1 -> s4 [66, 66] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s1 -> s1 [67, 65535] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s2 -> s1 [0, 65] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s2 -> s2 [0, 65535] { R1673 += 1, R1632 += 1, R1633 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s2 -> s4 [66, 66] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s2 -> s1 [67, 65535] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s3 -> s3 [0, 65535] { R1673 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1673 += 1, R1633 += 1, R1602 += 1, R1603 += 1 };
  s4 -> s5 [0, 65535] { R1673 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1673 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1621 && R2 = R1673 && R16 - R1621 = -1 && R17 = R1621 && R18 - R1621 = -1 && R19 = R1621 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R1601 + -1*R1599 = 0 && R1600 + R1598 = 0 && R1608 = 0 && R1609 = R1621 && R1610 = 0 && R1611 = R1621 && R1612 = 0 && R1613 = R1621 && R1614 = 0 && R1615 = R1621 && R1616 = 0 && R1617 = R1621 && R1618 = 0 && R1619 = R1621 && R1620 = 0 && R1624 = 0 && R1625 = 0 && R1628 = 0 && R1629 = 0 && R1630 = 0 && R1631 = 0 && R1634 = 1 && R1635 = R1673 && R1636 = 1 && R1637 = R1673 && R1638 = 1 && R1639 = R1673 && R1640 = 1 && R1641 = R1673 && R1642 = 1 && R1643 = R1673 && R1644 = 1 && R1645 = R1673 && R1646 = 1 && R1647 = R1673 && R1648 = 1 && R1649 = R1673 && R1650 = 1 && R1651 = R1673 && R1652 = 1 && R1653 = R1673 && R1654 = 1 && R1655 = R1673 && R1656 = 1 && R1657 = R1673 && R1658 = 1 && R1659 = R1673 && R1660 = 1 && R1661 = R1673 && R1662 = 1 && R1663 = R1673 && R1664 = 1 && R1665 = R1673 && R1666 = 1 && R1667 = R1673 && R1668 = 1 && R1669 = R1673 && R1670 = 1 && R1671 = R1673 && R1672 = 1 && R9 < 1 && R12 < 1 && R1369 + R1368 < 1 && -1*R1601 + -1*R1599 < 1 && 0 < R1621 && 0 < R1673 && (R1601 + R1599 != 0 || R1607 + R1604 = 0 || (R1605 + R1602 = 0 && R1606 + R1603 = 0)) && (R1605 + R1602 != 0 || R1601 + R1599 + -1*R1606 + -1*R1603 = 0 || R1601 + R1599 < 1) && (R15 = 0 || (R1622 = 0 && R1623 = 0)) && (R15 = 0 || (R1626 = 0 && R1627 = 0)) && (R15 = 0 || (R1632 = 0 && R1633 = 0)) && (R1605 + R1602 = 0 || R1601 + R1599 < 1);
// End of Parikh automata intersection problem
