// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R1368, R1369, R1378, R1379, R1380, R1381, R14, R1454, R1455, R1456, R1457, R1458, R1459, R1460, R1461, R1462, R1463, R1464, R1465, R1466, R1467, R1468, R1469, R1470, R1471, R1472, R1473, R1474, R1475, R1476, R1477, R1478, R1479, R1480, R1481, R1482, R1483, R1484, R1485, R1486, R1487, R1488, R1489, R1490, R1491, R1492, R1493, R1494, R1495, R1496, R1497, R1498, R1499, R15, R1500, R1501, R1502, R1503, R1504, R1505, R1506, R1507, R1508, R1509, R1510, R1511, R1512, R1513, R1514, R1515, R1516, R1517, R1518, R1519, R1520, R1521, R1522, R1523, R1524, R1525, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [10, 10] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1487 += 1 };
  s0 -> s0 [0, 65535] { R1486 += 1, R1487 += 1 };
  s0 -> s2 [66, 66] { R1487 += 1 };
  s0 -> s1 [67, 65535] { R1487 += 1 };
  s1 -> s1 [0, 64] { R1487 += 1 };
  s1 -> s2 [66, 66] { R1487 += 1 };
  s1 -> s1 [67, 65535] { R1487 += 1 };
  s2 -> s2 [0, 64] { R1487 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R1487 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1488 += 1, R1489 += 1 };
  s0 -> s1 [0, 65535] { R1489 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1489 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65] { R1491 += 1 };
  s0 -> s2 [0, 65535] { R1491 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R1490 += 1, R1491 += 1 };
  s0 -> s3 [66, 66] { R1491 += 1 };
  s0 -> s1 [67, 65535] { R1491 += 1 };
  s1 -> s1 [0, 65] { R1491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R1491 += 1 };
  s1 -> s1 [67, 65535] { R1491 += 1 };
  s2 -> s1 [0, 65] { R1491 += 1 };
  s2 -> s2 [0, 65535] { R1491 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R1491 += 1 };
  s2 -> s1 [67, 65535] { R1491 += 1 };
  s3 -> s3 [0, 65535] { R1491 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1493 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R1493 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1492 += 1, R1493 += 1 };
  s0 -> s3 [9, 13] { R1493 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1493 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1493 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1493 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1493 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R1493 += 1 };
  s2 -> s1 [0, 8] { R1493 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1493 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R1493 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1493 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1493 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1493 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1493 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1493 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1495 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R1495 += 1, R18 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R1494 += 1, R1495 += 1 };
  s1 -> s1 [0, 65535] { R1495 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1495 += 1 };
  s2 -> s1 [0, 65535] { R1495 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1495 += 1, R18 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1495 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1497 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1497 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1496 += 1, R1497 += 1 };
  s0 -> s3 [9, 13] { R1497 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1497 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1497 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1497 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R1497 += 1 };
  s1 -> s1 [0, 65535] { R1497 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1497 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R1497 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1497 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1497 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1497 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1497 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1497 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1497 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1499 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R1498 += 1, R1499 += 1 };
  s0 -> s2 [0, 65535] { R1499 += 1, R23 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R1499 += 1, R22 += 1, R23 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1499 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R1499 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1499 += 1, R23 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1499 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65] { R1501 += 1, R1461 += 1 };
  s0 -> s0 [0, 65535] { R1500 += 1, R1501 += 1 };
  s0 -> s2 [0, 65535] { R1501 += 1, R1460 += 1, R1461 += 1 };
  s0 -> s1 [67, 65535] { R1501 += 1, R1461 += 1 };
  s1 -> s1 [0, 65] { R1501 += 1, R1461 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1501 += 1 };
  s1 -> s1 [67, 65535] { R1501 += 1, R1461 += 1 };
  s2 -> s1 [0, 65] { R1501 += 1, R1461 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1501 += 1, R1460 += 1, R1461 += 1 };
  s2 -> s1 [67, 65535] { R1501 += 1, R1461 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1502 += 1, R1503 += 1 };
  s0 -> s1 [0, 65535] { R1503 += 1, R1463 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R1503 += 1, R1462 += 1, R1463 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1503 += 1 };
  s1 -> s1 [0, 65535] { R1503 += 1, R1463 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1503 += 1, R1463 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R1503 += 1, R1462 += 1, R1463 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1503 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1504 += 1, R1505 += 1 };
  s0 -> s1 [0, 65535] { R1505 += 1, R1465 += 1 };
  s0 -> s2 [0, 65535] { R1505 += 1, R1464 += 1, R1465 += 1 };
  s1 -> s4 [0, 65535] { R1505 += 1 };
  s1 -> s1 [0, 65535] { R1505 += 1, R1465 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1505 += 1, R1465 += 1 };
  s2 -> s2 [0, 65535] { R1505 += 1, R1464 += 1, R1465 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1505 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1507 += 1, R1467 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R1506 += 1, R1507 += 1 };
  s0 -> s2 [0, 65535] { R1507 += 1, R1466 += 1, R1467 += 1 };
  s1 -> s1 [0, 65535] { R1507 += 1, R1467 += 1, R485 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1507 += 1 };
  s2 -> s1 [0, 65535] { R1507 += 1, R1467 += 1, R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1507 += 1, R1466 += 1, R1467 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1507 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 66] { R1509 += 1, R1469 += 1 };
  s0 -> s2 [0, 65535] { R1509 += 1, R1468 += 1, R1469 += 1 };
  s0 -> s0 [0, 65535] { R1508 += 1, R1509 += 1 };
  s0 -> s1 [68, 65535] { R1509 += 1, R1469 += 1 };
  s1 -> s1 [0, 66] { R1509 += 1, R1469 += 1 };
  s1 -> s1 [0, 65535] { R1509 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R1509 += 1, R1469 += 1 };
  s2 -> s1 [0, 66] { R1509 += 1, R1469 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1509 += 1, R1468 += 1, R1469 += 1 };
  s2 -> s1 [68, 65535] { R1509 += 1, R1469 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1510 += 1, R1511 += 1 };
  s0 -> s1 [0, 65535] { R1511 += 1, R1471 += 1, R1381 += 1 };
  s0 -> s2 [0, 65535] { R1511 += 1, R1470 += 1, R1471 += 1 };
  s0 -> s3 [0, 65535] { R1511 += 1, R1471 += 1 };
  s1 -> s1 [0, 65535] { R1511 += 1, R1471 += 1, R1381 += 1 };
  s1 -> s3 [0, 65535] { R1511 += 1, R1471 += 1 };
  s1 -> s4 [0, 65535] { R1511 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1511 += 1, R1471 += 1, R1381 += 1 };
  s2 -> s2 [0, 65535] { R1511 += 1, R1470 += 1, R1471 += 1 };
  s2 -> s3 [0, 65535] { R1511 += 1, R1471 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1511 += 1, R1471 += 1 };
  s3 -> s4 [0, 65535] { R1511 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1511 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1512 += 1, R1513 += 1 };
  s0 -> s1 [0, 65535] { R1513 += 1, R1473 += 1, R1458 += 1, R1459 += 1 };
  s0 -> s2 [0, 65535] { R1513 += 1, R1472 += 1, R1473 += 1 };
  s0 -> s3 [0, 65535] { R1513 += 1, R1473 += 1 };
  s1 -> s4 [0, 65535] { R1513 += 1 };
  s1 -> s1 [0, 65535] { R1513 += 1, R1473 += 1, R1458 += 1, R1459 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1513 += 1, R1473 += 1 };
  s2 -> s1 [0, 65535] { R1513 += 1, R1473 += 1, R1458 += 1, R1459 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1513 += 1, R1472 += 1, R1473 += 1 };
  s2 -> s3 [0, 65535] { R1513 += 1, R1473 += 1 };
  s3 -> s4 [0, 65535] { R1513 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1513 += 1, R1473 += 1 };
  s4 -> s4 [0, 65535] { R1513 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1515 += 1, R1474 += 1, R1475 += 1 };
  s0 -> s2 [0, 65535] { R1515 += 1, R1475 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R1514 += 1, R1515 += 1 };
  s1 -> s1 [0, 65535] { R1515 += 1, R1474 += 1, R1475 += 1 };
  s1 -> s2 [0, 65535] { R1515 += 1, R1475 += 1, R15 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1515 += 1, R1475 += 1, R15 += 1 };
  s2 -> s3 [0, 65535] { R1515 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1515 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R1517 += 1, R1477 += 1 };
  s0 -> s0 [0, 65535] { R1516 += 1, R1517 += 1 };
  s0 -> s2 [0, 65535] { R1517 += 1, R1476 += 1, R1477 += 1 };
  s0 -> s3 [66, 66] { R1517 += 1, R1477 += 1 };
  s0 -> s4 [66, 66] { R1517 += 1, R1477 += 1 };
  s0 -> s5 [67, 67] { R1517 += 1, R1477 += 1 };
  s0 -> s1 [68, 65535] { R1517 += 1, R1477 += 1 };
  s1 -> s1 [0, 65] { R1517 += 1, R1477 += 1 };
  s1 -> s3 [66, 66] { R1517 += 1, R1477 += 1 };
  s1 -> s4 [66, 66] { R1517 += 1, R1477 += 1 };
  s1 -> s5 [67, 67] { R1517 += 1, R1477 += 1 };
  s1 -> s1 [68, 65535] { R1517 += 1, R1477 += 1 };
  s2 -> s1 [0, 65] { R1517 += 1, R1477 += 1 };
  s2 -> s2 [0, 65535] { R1517 += 1, R1476 += 1, R1477 += 1 };
  s2 -> s3 [66, 66] { R1517 += 1, R1477 += 1 };
  s2 -> s4 [66, 66] { R1517 += 1, R1477 += 1 };
  s2 -> s5 [67, 67] { R1517 += 1, R1477 += 1 };
  s2 -> s1 [68, 65535] { R1517 += 1, R1477 += 1 };
  s3 -> s3 [0, 66] { R1517 += 1, R1477 += 1 };
  s3 -> s7 [67, 67] { R1517 += 1, R1477 += 1 };
  s3 -> s3 [68, 65535] { R1517 += 1, R1477 += 1 };
  s5 -> s5 [0, 65] { R1517 += 1, R1477 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1517 += 1 };
  s5 -> s7 [66, 66] { R1517 += 1, R1477 += 1 };
  s5 -> s8 [66, 66] { R1517 += 1, R1477 += 1 };
  s5 -> s5 [67, 65535] { R1517 += 1, R1477 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1517 += 1, R1477 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R1517 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1517 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1517 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R1519 += 1, R1479 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R1519 += 1, R1478 += 1, R1479 += 1 };
  s0 -> s0 [0, 65535] { R1518 += 1, R1519 += 1 };
  s0 -> s3 [66, 66] { R1519 += 1, R1479 += 1, R484 += 1 };
  s0 -> s4 [66, 66] { R1519 += 1, R1479 += 1, R484 += 1 };
  s0 -> s1 [67, 65535] { R1519 += 1, R1479 += 1, R484 += 1 };
  s1 -> s1 [0, 65] { R1519 += 1, R1479 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1519 += 1 };
  s1 -> s3 [66, 66] { R1519 += 1, R1479 += 1, R484 += 1 };
  s1 -> s4 [66, 66] { R1519 += 1, R1479 += 1, R484 += 1 };
  s1 -> s1 [67, 65535] { R1519 += 1, R1479 += 1, R484 += 1 };
  s2 -> s1 [0, 65] { R1519 += 1, R1479 += 1, R484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1519 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s3 [66, 66] { R1519 += 1, R1479 += 1, R484 += 1 };
  s2 -> s4 [66, 66] { R1519 += 1, R1479 += 1, R484 += 1 };
  s2 -> s1 [67, 65535] { R1519 += 1, R1479 += 1, R484 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1519 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1519 += 1 };
  s4 -> s4 [0, 65535] { R1519 += 1, R1479 += 1, R484 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1519 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R1521 += 1, R1481 += 1 };
  s0 -> s2 [0, 65] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s0 -> s0 [0, 65535] { R1520 += 1, R1521 += 1 };
  s0 -> s3 [0, 65535] { R1521 += 1, R1480 += 1, R1481 += 1 };
  s0 -> s4 [66, 66] { R1521 += 1, R1481 += 1 };
  s0 -> s5 [66, 66] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s0 -> s6 [66, 66] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s0 -> s7 [66, 66] { R1521 += 1, R1481 += 1 };
  s0 -> s2 [67, 65535] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s0 -> s1 [68, 65535] { R1521 += 1, R1481 += 1 };
  s1 -> s1 [0, 65] { R1521 += 1, R1481 += 1 };
  s1 -> s1 [0, 65535] { R1521 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [66, 66] { R1521 += 1, R1481 += 1 };
  s1 -> s7 [66, 66] { R1521 += 1, R1481 += 1 };
  s1 -> s1 [68, 65535] { R1521 += 1, R1481 += 1 };
  s2 -> s1 [0, 65] { R1521 += 1, R1481 += 1 };
  s2 -> s2 [0, 65] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s2 -> s4 [66, 66] { R1521 += 1, R1481 += 1 };
  s2 -> s5 [66, 66] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s2 -> s6 [66, 66] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s2 -> s7 [66, 66] { R1521 += 1, R1481 += 1 };
  s2 -> s2 [67, 65535] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s2 -> s1 [68, 65535] { R1521 += 1, R1481 += 1 };
  s3 -> s1 [0, 65] { R1521 += 1, R1481 += 1 };
  s3 -> s2 [0, 65] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s3 -> s3 [0, 65535] { R1521 += 1, R1480 += 1, R1481 += 1 };
  s3 -> s4 [66, 66] { R1521 += 1, R1481 += 1 };
  s3 -> s5 [66, 66] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s3 -> s6 [66, 66] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s3 -> s7 [66, 66] { R1521 += 1, R1481 += 1 };
  s3 -> s2 [67, 65535] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s3 -> s1 [68, 65535] { R1521 += 1, R1481 += 1 };
  s4 -> s4 [0, 66] { R1521 += 1, R1481 += 1 };
  s4 -> s4 [0, 65535] { R1521 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [68, 65535] { R1521 += 1, R1481 += 1 };
  s5 -> s4 [0, 66] { R1521 += 1, R1481 += 1 };
  s5 -> s5 [0, 65535] { R1521 += 1, R1481 += 1, R1368 += 1 };
  s5 -> s4 [68, 65535] { R1521 += 1, R1481 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1521 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s7, s8;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s2 [0, 65] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s0 -> s0 [0, 65535] { R1522 += 1, R1523 += 1 };
  s0 -> s3 [0, 65535] { R1523 += 1, R1482 += 1, R1483 += 1 };
  s0 -> s4 [66, 66] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s5 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s0 -> s6 [66, 66] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s7 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s0 -> s8 [67, 67] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s0 -> s1 [67, 65535] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s2 [68, 65535] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s1 -> s1 [0, 65] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s1 -> s2 [0, 65] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s1 -> s4 [66, 66] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s1 -> s5 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s1 -> s6 [66, 66] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s1 -> s7 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s1 -> s8 [67, 67] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s1 -> s1 [67, 65535] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s1 -> s2 [68, 65535] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s2 -> s2 [0, 65] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s2 -> s5 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s2 -> s7 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s2 -> s8 [67, 67] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s2 -> s2 [68, 65535] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s3 -> s1 [0, 65] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s2 [0, 65] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s3 -> s3 [0, 65535] { R1523 += 1, R1482 += 1, R1483 += 1 };
  s3 -> s4 [66, 66] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s5 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s3 -> s6 [66, 66] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s7 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s3 -> s8 [67, 67] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s3 -> s1 [67, 65535] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s2 [68, 65535] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s4 -> s5 [0, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s4 -> s4 [0, 65535] { R1523 += 1, R1483 += 1, R1378 += 1, R1379 += 1 };
  s4 -> s11 [67, 67] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s4 -> s5 [68, 65535] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s5 -> s5 [0, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s5 -> s11 [67, 67] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s5 -> s5 [68, 65535] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s8 -> s8 [0, 65] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1523 += 1 };
  s8 -> s10 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s8 -> s11 [66, 66] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s8 -> s8 [67, 65535] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1523 += 1 };
  s11 -> s12 [0, 65535] { R1523 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1523 += 1, R1483 += 1, R1379 += 1 };
  s12 -> s12 [0, 65535] { R1523 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s0 -> s2 [0, 65] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s0 -> s0 [0, 65535] { R1524 += 1, R1525 += 1 };
  s0 -> s3 [0, 65535] { R1525 += 1, R1484 += 1, R1485 += 1 };
  s0 -> s4 [66, 66] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s0 -> s5 [66, 66] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s0 -> s6 [66, 66] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s0 -> s7 [66, 66] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s0 -> s1 [67, 65535] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s0 -> s2 [67, 65535] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s1 -> s1 [0, 65] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s1 -> s2 [0, 65] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s1 -> s4 [66, 66] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s1 -> s5 [66, 66] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s1 -> s6 [66, 66] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s1 -> s7 [66, 66] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s1 -> s1 [67, 65535] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s1 -> s2 [67, 65535] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s2 -> s2 [0, 65] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R1525 += 1 };
  s2 -> s5 [66, 66] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s2 -> s7 [66, 66] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s2 -> s2 [67, 65535] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s3 -> s1 [0, 65] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s3 -> s2 [0, 65] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s3 -> s3 [0, 65535] { R1525 += 1, R1484 += 1, R1485 += 1 };
  s3 -> s4 [66, 66] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s3 -> s5 [66, 66] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s3 -> s6 [66, 66] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s3 -> s7 [66, 66] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s3 -> s1 [67, 65535] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s3 -> s2 [67, 65535] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s5 -> s9 [0, 65535] { R1525 += 1 };
  s6 -> s5 [0, 65535] { R1525 += 1, R1485 += 1, R1455 += 1, R1456 += 1 };
  s6 -> s6 [0, 65535] { R1525 += 1, R1485 += 1, R1454 += 1, R1455 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1525 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1525 += 1 };
  accepting s8, s5, s2, s9, s7;
};
};
constraint R1 = R1473 && R2 = R1525 && R16 - R1473 = -1 && R17 = R1473 && R18 - R1473 = -1 && R19 = R1473 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R1381 + -1*R1379 = 0 && R1380 + R1378 = 0 && R1460 = 0 && R1461 = R1473 && R1462 = 0 && R1463 = R1473 && R1464 = 0 && R1465 = R1473 && R1466 = 0 && R1467 = R1473 && R1468 = 0 && R1469 = R1473 && R1470 = 0 && R1471 = R1473 && R1472 = 0 && R1476 = 0 && R1477 = 0 && R1480 = 0 && R1481 = 0 && R1482 = 0 && R1483 = 0 && R1484 = 0 && R1485 = 0 && R1486 = 1 && R1487 = R1525 && R1488 = 1 && R1489 = R1525 && R1490 = 1 && R1491 = R1525 && R1492 = 1 && R1493 = R1525 && R1494 = 1 && R1495 = R1525 && R1496 = 1 && R1497 = R1525 && R1498 = 1 && R1499 = R1525 && R1500 = 1 && R1501 = R1525 && R1502 = 1 && R1503 = R1525 && R1504 = 1 && R1505 = R1525 && R1506 = 1 && R1507 = R1525 && R1508 = 1 && R1509 = R1525 && R1510 = 1 && R1511 = R1525 && R1512 = 1 && R1513 = R1525 && R1514 = 1 && R1515 = R1525 && R1516 = 1 && R1517 = R1525 && R1518 = 1 && R1519 = R1525 && R1520 = 1 && R1521 = R1525 && R1522 = 1 && R1523 = R1525 && R1524 = 1 && R9 < 1 && R12 < 1 && R1369 + R1368 < 1 && -1*R1381 + -1*R1379 < 1 && 0 < R1473 && 0 < R1525 && (R1381 + R1379 != 0 || R1459 + R1456 = 0 || (R1457 + R1454 = 0 && R1458 + R1455 = 0)) && (R1457 + R1454 != 0 || R1381 + R1379 + -1*R1458 + -1*R1455 = 0 || R1381 + R1379 < 1) && (R15 = 0 || (R1474 = 0 && R1475 = 0)) && (R15 = 0 || (R1478 = 0 && R1479 = 0)) && (R1457 + R1454 = 0 || R1381 + R1379 < 1);
// End of Parikh automata intersection problem
