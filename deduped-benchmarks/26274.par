// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R824, R825, R826, R827, R828, R829, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [78, 78];
  s0 -> s0 [79, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [78, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 77];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [78, 78];
  s0 -> s1 [79, 65535];
  s1 -> s1 [0, 77];
  s1 -> s2 [78, 78];
  s1 -> s1 [79, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 77] { R833 += 1 };
  s0 -> s0 [0, 65535] { R832 += 1, R833 += 1 };
  s0 -> s1 [79, 65535] { R833 += 1 };
  s1 -> s1 [0, 77] { R833 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [79, 65535] { R833 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R834 += 1, R835 += 1 };
  s0 -> s1 [0, 65535] { R835 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R835 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 78] { R837 += 1 };
  s0 -> s0 [0, 65535] { R836 += 1, R837 += 1 };
  s0 -> s1 [85, 65535] { R837 += 1 };
  s1 -> s1 [0, 78] { R837 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [85, 65535] { R837 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R839 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R838 += 1, R839 += 1 };
  s1 -> s1 [0, 65535] { R839 += 1, R487 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 84] { R841 += 1 };
  s0 -> s2 [0, 65535] { R841 += 1, R489 += 1 };
  s0 -> s0 [0, 65535] { R840 += 1, R841 += 1 };
  s0 -> s1 [86, 65535] { R841 += 1 };
  s1 -> s1 [0, 84] { R841 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R841 += 1 };
  s2 -> s1 [0, 84] { R841 += 1 };
  s2 -> s2 [0, 65535] { R841 += 1, R489 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R841 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R843 += 1, R493 += 1, R494 += 1 };
  s0 -> s0 [0, 65535] { R842 += 1, R843 += 1 };
  s0 -> s2 [0, 65535] { R843 += 1, R494 += 1, R495 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R843 += 1, R493 += 1, R494 += 1 };
  s1 -> s2 [0, 65535] { R843 += 1, R494 += 1, R495 += 1 };
  s2 -> s3 [0, 65535] { R843 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R843 += 1, R494 += 1, R495 += 1 };
  s3 -> s3 [0, 65535] { R843 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 84] { R845 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R844 += 1, R845 += 1 };
  s0 -> s2 [0, 65535] { R845 += 1, R498 += 1, R499 += 1 };
  s0 -> s3 [85, 85] { R845 += 1, R499 += 1 };
  s0 -> s4 [85, 85] { R845 += 1, R499 += 1 };
  s0 -> s1 [89, 65535] { R845 += 1, R499 += 1 };
  s1 -> s1 [0, 84] { R845 += 1, R499 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R845 += 1 };
  s1 -> s3 [85, 85] { R845 += 1, R499 += 1 };
  s1 -> s4 [85, 85] { R845 += 1, R499 += 1 };
  s1 -> s1 [89, 65535] { R845 += 1, R499 += 1 };
  s2 -> s1 [0, 84] { R845 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R845 += 1, R498 += 1, R499 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [85, 85] { R845 += 1, R499 += 1 };
  s2 -> s4 [85, 85] { R845 += 1, R499 += 1 };
  s2 -> s1 [89, 65535] { R845 += 1, R499 += 1 };
  s3 -> s3 [0, 85] { R845 += 1, R499 += 1 };
  s3 -> s3 [0, 65535] { R845 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [89, 65535] { R845 += 1, R499 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R845 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 84] { R847 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R846 += 1, R847 += 1 };
  s0 -> s2 [0, 65535] { R847 += 1, R502 += 1, R503 += 1 };
  s0 -> s3 [85, 85] { R847 += 1, R503 += 1 };
  s0 -> s1 [86, 65535] { R847 += 1, R503 += 1 };
  s1 -> s1 [0, 84] { R847 += 1, R503 += 1 };
  s1 -> s3 [85, 85] { R847 += 1, R503 += 1 };
  s1 -> s1 [86, 65535] { R847 += 1, R503 += 1 };
  s2 -> s1 [0, 84] { R847 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R847 += 1, R502 += 1, R503 += 1 };
  s2 -> s3 [85, 85] { R847 += 1, R503 += 1 };
  s2 -> s1 [86, 65535] { R847 += 1, R503 += 1 };
  s3 -> s3 [0, 65535] { R847 += 1, R503 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R847 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R847 += 1 };
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R849 += 1, R508 += 1, R509 += 1 };
  s0 -> s2 [0, 65535] { R849 += 1, R507 += 1, R508 += 1 };
  s0 -> s0 [0, 65535] { R848 += 1, R849 += 1 };
  s1 -> s1 [0, 65535] { R849 += 1, R508 += 1, R509 += 1 };
  s1 -> s4 [0, 65535] { R849 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R849 += 1, R508 += 1, R509 += 1 };
  s2 -> s2 [0, 65535] { R849 += 1, R507 += 1, R508 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R849 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 84] { R851 += 1, R514 += 1 };
  s0 -> s0 [0, 65535] { R850 += 1, R851 += 1 };
  s0 -> s2 [0, 65535] { R851 += 1, R514 += 1, R515 += 1 };
  s0 -> s3 [0, 65535] { R851 += 1, R513 += 1, R514 += 1 };
  s0 -> s1 [86, 65535] { R851 += 1, R514 += 1 };
  s1 -> s1 [0, 84] { R851 += 1, R514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R851 += 1 };
  s1 -> s1 [86, 65535] { R851 += 1, R514 += 1 };
  s2 -> s1 [0, 84] { R851 += 1, R514 += 1 };
  s2 -> s5 [0, 65535] { R851 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R851 += 1, R514 += 1, R515 += 1 };
  s2 -> s1 [86, 65535] { R851 += 1, R514 += 1 };
  s3 -> s1 [0, 84] { R851 += 1, R514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R851 += 1, R514 += 1, R515 += 1 };
  s3 -> s3 [0, 65535] { R851 += 1, R513 += 1, R514 += 1 };
  s3 -> s1 [86, 65535] { R851 += 1, R514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R851 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R853 += 1, R521 += 1, R523 += 1 };
  s0 -> s2 [0, 65535] { R853 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s0 -> s0 [0, 65535] { R852 += 1, R853 += 1 };
  s0 -> s3 [0, 65535] { R853 += 1, R520 += 1, R521 += 1 };
  s0 -> s1 [86, 65535] { R853 += 1, R521 += 1, R523 += 1 };
  s1 -> s1 [0, 84] { R853 += 1, R521 += 1, R523 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R853 += 1, R521 += 1 };
  s1 -> s5 [0, 65535] { R853 += 1 };
  s1 -> s1 [86, 65535] { R853 += 1, R521 += 1, R523 += 1 };
  s2 -> s1 [0, 84] { R853 += 1, R521 += 1, R523 += 1 };
  s2 -> s2 [0, 65535] { R853 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R853 += 1 };
  s2 -> s1 [86, 65535] { R853 += 1, R521 += 1, R523 += 1 };
  s3 -> s1 [0, 84] { R853 += 1, R521 += 1, R523 += 1 };
  s3 -> s2 [0, 65535] { R853 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R853 += 1, R520 += 1, R521 += 1 };
  s3 -> s1 [86, 65535] { R853 += 1, R521 += 1, R523 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R853 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R854 += 1, R855 += 1 };
  s0 -> s1 [0, 65535] { R855 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s0 -> s2 [0, 65535] { R855 += 1, R529 += 1, R530 += 1 };
  s0 -> s3 [0, 65535] { R855 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R855 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s1 -> s6 [0, 65535] { R855 += 1 };
  s1 -> s3 [0, 65535] { R855 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R855 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s2 -> s2 [0, 65535] { R855 += 1, R529 += 1, R530 += 1 };
  s2 -> s3 [0, 65535] { R855 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s3 -> s4 [0, 65535] { R855 += 1, R530 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R855 += 1 };
  s3 -> s3 [0, 65535] { R855 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s4 -> s4 [0, 65535] { R855 += 1, R530 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R855 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R855 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 85] { R857 += 1, R539 += 1, R541 += 1 };
  s0 -> s2 [0, 65535] { R857 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s0 -> s3 [0, 65535] { R857 += 1, R538 += 1, R539 += 1 };
  s0 -> s0 [0, 65535] { R856 += 1, R857 += 1 };
  s0 -> s1 [88, 65535] { R857 += 1, R539 += 1, R541 += 1 };
  s1 -> s1 [0, 85] { R857 += 1, R539 += 1, R541 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R857 += 1, R539 += 1 };
  s1 -> s5 [0, 65535] { R857 += 1 };
  s1 -> s1 [88, 65535] { R857 += 1, R539 += 1, R541 += 1 };
  s2 -> s1 [0, 85] { R857 += 1, R539 += 1, R541 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R857 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s2 -> s5 [0, 65535] { R857 += 1 };
  s2 -> s1 [88, 65535] { R857 += 1, R539 += 1, R541 += 1 };
  s3 -> s1 [0, 85] { R857 += 1, R539 += 1, R541 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R857 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s3 -> s3 [0, 65535] { R857 += 1, R538 += 1, R539 += 1 };
  s3 -> s1 [88, 65535] { R857 += 1, R539 += 1, R541 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R857 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R859 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s0 -> s2 [0, 65535] { R859 += 1, R547 += 1, R548 += 1 };
  s0 -> s3 [0, 65535] { R859 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s0 -> s0 [0, 65535] { R858 += 1, R859 += 1 };
  s1 -> s1 [0, 65535] { R859 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R859 += 1, R548 += 1 };
  s1 -> s5 [0, 65535] { R859 += 1 };
  s2 -> s1 [0, 65535] { R859 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R859 += 1, R547 += 1, R548 += 1 };
  s2 -> s3 [0, 65535] { R859 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s3 -> s1 [0, 65535] { R859 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R859 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s3 -> s5 [0, 65535] { R859 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R859 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R859 += 1, R548 += 1 };
  s6 -> s5 [0, 65535] { R859 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 84] { R861 += 1, R829 += 1, R831 += 1 };
  s0 -> s2 [0, 65535] { R861 += 1 };
  s0 -> s1 [0, 65535] { R861 += 1, R829 += 1 };
  s0 -> s0 [0, 65535] { R860 += 1, R861 += 1 };
  s0 -> s3 [85, 85] { R861 += 1, R829 += 1, R831 += 1 };
  s0 -> s4 [85, 85] { R861 += 1, R829 += 1, R831 += 1 };
  s0 -> s1 [88, 65535] { R861 += 1, R829 += 1, R831 += 1 };
  s1 -> s1 [0, 84] { R861 += 1, R829 += 1, R831 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R861 += 1 };
  s1 -> s1 [0, 65535] { R861 += 1, R829 += 1 };
  s1 -> s3 [85, 85] { R861 += 1, R829 += 1, R831 += 1 };
  s1 -> s4 [85, 85] { R861 += 1, R829 += 1, R831 += 1 };
  s1 -> s1 [88, 65535] { R861 += 1, R829 += 1, R831 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R861 += 1 };
  s3 -> s3 [0, 85] { R861 += 1, R829 += 1, R831 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R861 += 1, R829 += 1 };
  s3 -> s2 [0, 65535] { R861 += 1 };
  s3 -> s3 [88, 65535] { R861 += 1, R829 += 1, R831 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R861 += 1 };
  s4 -> s4 [0, 65535] { R861 += 1, R829 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R862 += 1, R863 += 1 };
  s0 -> s1 [0, 65535] { R863 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R863 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 77] { R865 += 1 };
  s0 -> s0 [0, 65535] { R864 += 1, R865 += 1 };
  s0 -> s2 [78, 78] { R865 += 1 };
  s0 -> s3 [78, 78] { R865 += 1 };
  s0 -> s4 [85, 85] { R865 += 1 };
  s0 -> s1 [86, 65535] { R865 += 1 };
  s1 -> s1 [0, 77] { R865 += 1 };
  s1 -> s2 [78, 78] { R865 += 1 };
  s1 -> s3 [78, 78] { R865 += 1 };
  s1 -> s4 [85, 85] { R865 += 1 };
  s1 -> s1 [86, 65535] { R865 += 1 };
  s3 -> s3 [0, 78] { R865 += 1 };
  s3 -> s5 [85, 85] { R865 += 1 };
  s3 -> s3 [86, 65535] { R865 += 1 };
  s4 -> s4 [0, 77] { R865 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [78, 78] { R865 += 1 };
  s4 -> s6 [78, 78] { R865 += 1 };
  s4 -> s4 [85, 65535] { R865 += 1 };
  s5 -> s5 [0, 78] { R865 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s5 [85, 65535] { R865 += 1 };
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 77] { R867 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R866 += 1, R867 += 1 };
  s0 -> s2 [78, 78] { R867 += 1, R486 += 1 };
  s0 -> s3 [78, 78] { R867 += 1, R486 += 1 };
  s0 -> s1 [79, 65535] { R867 += 1, R486 += 1 };
  s1 -> s1 [0, 77] { R867 += 1, R486 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R867 += 1, R486 += 1 };
  s1 -> s3 [78, 78] { R867 += 1, R486 += 1 };
  s1 -> s1 [79, 65535] { R867 += 1, R486 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R867 += 1, R486 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 77] { R869 += 1, R488 += 1 };
  s0 -> s0 [0, 65535] { R868 += 1, R869 += 1 };
  s0 -> s2 [78, 78] { R869 += 1, R488 += 1 };
  s0 -> s3 [78, 78] { R869 += 1, R488 += 1 };
  s0 -> s1 [79, 65535] { R869 += 1, R488 += 1 };
  s1 -> s1 [0, 77] { R869 += 1, R488 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R869 += 1, R488 += 1 };
  s1 -> s3 [78, 78] { R869 += 1, R488 += 1 };
  s1 -> s1 [79, 65535] { R869 += 1, R488 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R869 += 1, R488 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R871 += 1, R490 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R870 += 1, R871 += 1 };
  s0 -> s2 [78, 78] { R871 += 1, R490 += 1, R491 += 1 };
  s0 -> s3 [78, 78] { R871 += 1, R490 += 1, R491 += 1 };
  s0 -> s1 [79, 65535] { R871 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 77] { R871 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R871 += 1, R490 += 1, R491 += 1 };
  s1 -> s3 [78, 78] { R871 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [79, 65535] { R871 += 1, R490 += 1, R491 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R871 += 1, R490 += 1, R491 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 77] { R873 += 1, R496 += 1, R497 += 1 };
  s0 -> s0 [0, 65535] { R872 += 1, R873 += 1 };
  s0 -> s2 [78, 78] { R873 += 1, R496 += 1, R497 += 1 };
  s0 -> s3 [78, 78] { R873 += 1, R496 += 1, R497 += 1 };
  s0 -> s1 [79, 65535] { R873 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 77] { R873 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R873 += 1, R496 += 1, R497 += 1 };
  s1 -> s3 [78, 78] { R873 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [79, 65535] { R873 += 1, R496 += 1, R497 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R873 += 1, R496 += 1, R497 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R875 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R874 += 1, R875 += 1 };
  s0 -> s2 [78, 78] { R875 += 1, R500 += 1, R501 += 1 };
  s0 -> s3 [78, 78] { R875 += 1, R500 += 1, R501 += 1 };
  s0 -> s1 [79, 65535] { R875 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 77] { R875 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R875 += 1, R500 += 1, R501 += 1 };
  s1 -> s3 [78, 78] { R875 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [79, 65535] { R875 += 1, R500 += 1, R501 += 1 };
  s2 -> s2 [0, 65535] { R875 += 1, R500 += 1, R501 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 77] { R877 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R876 += 1, R877 += 1 };
  s0 -> s2 [78, 78] { R877 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [78, 78] { R877 += 1, R504 += 1, R505 += 1 };
  s0 -> s1 [79, 65535] { R877 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 77] { R877 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R877 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [78, 78] { R877 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [79, 65535] { R877 += 1, R504 += 1, R505 += 1 };
  s2 -> s2 [0, 65535] { R877 += 1, R504 += 1, R505 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 77] { R879 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R878 += 1, R879 += 1 };
  s0 -> s2 [78, 78] { R879 += 1, R510 += 1, R511 += 1 };
  s0 -> s3 [78, 78] { R879 += 1, R510 += 1, R511 += 1 };
  s0 -> s1 [79, 65535] { R879 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 77] { R879 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R879 += 1, R510 += 1, R511 += 1 };
  s1 -> s3 [78, 78] { R879 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [79, 65535] { R879 += 1, R510 += 1, R511 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R879 += 1, R510 += 1, R511 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 77] { R881 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R880 += 1, R881 += 1 };
  s0 -> s2 [78, 78] { R881 += 1, R516 += 1, R517 += 1 };
  s0 -> s3 [78, 78] { R881 += 1, R516 += 1, R517 += 1 };
  s0 -> s1 [79, 65535] { R881 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 77] { R881 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R881 += 1, R516 += 1, R517 += 1 };
  s1 -> s3 [78, 78] { R881 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [79, 65535] { R881 += 1, R516 += 1, R517 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R881 += 1, R516 += 1, R517 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 77] { R883 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R882 += 1, R883 += 1 };
  s0 -> s2 [78, 78] { R883 += 1, R524 += 1, R525 += 1 };
  s0 -> s3 [78, 78] { R883 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [79, 65535] { R883 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 77] { R883 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R883 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [78, 78] { R883 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [79, 65535] { R883 += 1, R524 += 1, R525 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R883 += 1, R524 += 1, R525 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 77] { R885 += 1, R534 += 1, R535 += 1 };
  s0 -> s0 [0, 65535] { R884 += 1, R885 += 1 };
  s0 -> s2 [78, 78] { R885 += 1, R534 += 1, R535 += 1 };
  s0 -> s3 [78, 78] { R885 += 1, R534 += 1, R535 += 1 };
  s0 -> s1 [79, 65535] { R885 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 77] { R885 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R885 += 1, R534 += 1, R535 += 1 };
  s1 -> s3 [78, 78] { R885 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [79, 65535] { R885 += 1, R534 += 1, R535 += 1 };
  s2 -> s2 [0, 65535] { R885 += 1, R534 += 1, R535 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 77] { R887 += 1, R542 += 1, R543 += 1 };
  s0 -> s0 [0, 65535] { R886 += 1, R887 += 1 };
  s0 -> s2 [78, 78] { R887 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [78, 78] { R887 += 1, R542 += 1, R543 += 1 };
  s0 -> s1 [79, 65535] { R887 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 77] { R887 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R887 += 1, R542 += 1, R543 += 1 };
  s1 -> s3 [78, 78] { R887 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [79, 65535] { R887 += 1, R542 += 1, R543 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R887 += 1, R542 += 1, R543 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 77] { R889 += 1, R824 += 1, R825 += 1 };
  s0 -> s2 [0, 77] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s0 -> s3 [0, 77] { R889 += 1, R825 += 1, R827 += 1 };
  s0 -> s0 [0, 65535] { R888 += 1, R889 += 1 };
  s0 -> s4 [78, 78] { R889 += 1, R825 += 1, R827 += 1 };
  s0 -> s5 [78, 78] { R889 += 1, R825 += 1, R827 += 1 };
  s0 -> s6 [78, 78] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s0 -> s7 [78, 78] { R889 += 1, R824 += 1, R825 += 1 };
  s0 -> s8 [78, 78] { R889 += 1, R824 += 1, R825 += 1 };
  s0 -> s9 [78, 78] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s0 -> s3 [79, 84] { R889 += 1, R825 += 1, R827 += 1 };
  s0 -> s1 [79, 65535] { R889 += 1, R824 += 1, R825 += 1 };
  s0 -> s2 [79, 65535] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s0 -> s10 [88, 88] { R889 += 1, R825 += 1, R827 += 1 };
  s0 -> s3 [89, 65535] { R889 += 1, R825 += 1, R827 += 1 };
  s1 -> s1 [0, 77] { R889 += 1, R824 += 1, R825 += 1 };
  s1 -> s2 [0, 77] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s1 -> s3 [0, 77] { R889 += 1, R825 += 1, R827 += 1 };
  s1 -> s4 [78, 78] { R889 += 1, R825 += 1, R827 += 1 };
  s1 -> s5 [78, 78] { R889 += 1, R825 += 1, R827 += 1 };
  s1 -> s6 [78, 78] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s1 -> s7 [78, 78] { R889 += 1, R824 += 1, R825 += 1 };
  s1 -> s8 [78, 78] { R889 += 1, R824 += 1, R825 += 1 };
  s1 -> s9 [78, 78] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s1 -> s3 [79, 84] { R889 += 1, R825 += 1, R827 += 1 };
  s1 -> s1 [79, 65535] { R889 += 1, R824 += 1, R825 += 1 };
  s1 -> s2 [79, 65535] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s1 -> s10 [88, 88] { R889 += 1, R825 += 1, R827 += 1 };
  s1 -> s3 [89, 65535] { R889 += 1, R825 += 1, R827 += 1 };
  s2 -> s2 [0, 77] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s2 -> s3 [0, 77] { R889 += 1, R825 += 1, R827 += 1 };
  s2 -> s4 [78, 78] { R889 += 1, R825 += 1, R827 += 1 };
  s2 -> s5 [78, 78] { R889 += 1, R825 += 1, R827 += 1 };
  s2 -> s6 [78, 78] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s2 -> s9 [78, 78] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s2 -> s3 [79, 84] { R889 += 1, R825 += 1, R827 += 1 };
  s2 -> s2 [79, 65535] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s2 -> s10 [88, 88] { R889 += 1, R825 += 1, R827 += 1 };
  s2 -> s3 [89, 65535] { R889 += 1, R825 += 1, R827 += 1 };
  s3 -> s3 [0, 77] { R889 += 1, R825 += 1, R827 += 1 };
  s3 -> s4 [78, 78] { R889 += 1, R825 += 1, R827 += 1 };
  s3 -> s5 [78, 78] { R889 += 1, R825 += 1, R827 += 1 };
  s3 -> s3 [79, 84] { R889 += 1, R825 += 1, R827 += 1 };
  s3 -> s10 [88, 88] { R889 += 1, R825 += 1, R827 += 1 };
  s3 -> s3 [89, 65535] { R889 += 1, R825 += 1, R827 += 1 };
  s5 -> s5 [0, 84] { R889 += 1, R825 += 1, R827 += 1 };
  s5 -> s11 [88, 88] { R889 += 1, R825 += 1, R827 += 1 };
  s5 -> s5 [89, 65535] { R889 += 1, R825 += 1, R827 += 1 };
  s6 -> s5 [0, 84] { R889 += 1, R825 += 1, R827 += 1 };
  s6 -> s6 [0, 65535] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s6 -> s11 [88, 88] { R889 += 1, R825 += 1, R827 += 1 };
  s6 -> s5 [89, 65535] { R889 += 1, R825 += 1, R827 += 1 };
  s8 -> s5 [0, 84] { R889 += 1, R825 += 1, R827 += 1 };
  s8 -> s6 [0, 65535] { R889 += 1, R825 += 1, R826 += 1, R827 += 1 };
  s8 -> s8 [0, 65535] { R889 += 1, R824 += 1, R825 += 1 };
  s8 -> s11 [88, 88] { R889 += 1, R825 += 1, R827 += 1 };
  s8 -> s5 [89, 65535] { R889 += 1, R825 += 1, R827 += 1 };
  s10 -> s10 [0, 77] { R889 += 1, R825 += 1, R827 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s11 [78, 78] { R889 += 1, R825 += 1 };
  s10 -> s12 [78, 78] { R889 += 1, R825 += 1 };
  s10 -> s10 [79, 84] { R889 += 1, R825 += 1, R827 += 1 };
  s10 -> s10 [79, 65535] { R889 += 1, R825 += 1 };
  s10 -> s10 [88, 65535] { R889 += 1, R825 += 1, R827 += 1 };
  s11 -> s11 [0, 84] { R889 += 1, R825 += 1, R827 += 1 };
  s11 -> s13 [0, 65535];
  s11 -> s11 [0, 65535] { R889 += 1, R825 += 1 };
  s11 -> s11 [88, 65535] { R889 += 1, R825 += 1, R827 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65535];
  accepting s10, s11, s12, s13;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [110, 110];
  accepting s1;
};
};
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R2 = R861 && R20 - R861 = -1 && R21 = R861 && R22 - R861 = -1 && R23 = R861 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R487 + R486 + -1*R829 + -1*R825 = 0 && R502 + R500 = 0 && R503 + R501 + -1*R829 + -1*R825 = 0 && R828 + R824 = 0 && R830 + R826 = 0 && R831 + R827 = 0 && R832 = 0 && R833 = R861 && R834 = 0 && R835 = R861 && R836 = 0 && R837 = R861 && R838 = 0 && R839 = R861 && R840 = 0 && R841 = R861 && R842 = 0 && R843 = R861 && R844 = 0 && R845 = R861 && R846 = 0 && R847 = R861 && R848 = 0 && R849 = R861 && R850 = 0 && R851 = R861 && R852 = 0 && R853 = R861 && R854 = 0 && R855 = R861 && R856 = 0 && R857 = R861 && R858 = 0 && R859 = R861 && R860 = 0 && R864 = 0 && R865 = 0 && R888 = 0 && R889 = 0 && R11 < 1 && R12 < 1 && R489 + R488 < 1 && -1*R509 + -1*R506 < 1 && R515 + R512 < 1 && -1*R829 + -1*R825 < 1 && 0 < R861 && (R507 + R504 != 0 || R508 + R505 + -1*R829 + -1*R825 = 0 || R509 + R506 < 1) && (R509 + R506 != 0 || R533 + R528 = 0 || (R522 + R518 = 0 && R523 + R519 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R531 + R526 = 0 && R532 + R527 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R540 + R536 = 0 && R541 + R537 = 0)) && (R509 + R506 != 0 || ((R507 + R504 != 0 || R508 + R505 + -1*R829 + -1*R825 = 0 || R829 + R825 < 1) && (R507 + R504 = 0 || R829 + R825 < 1))) && (R513 + R510 != 0 || R514 + R511 + -1*R829 + -1*R825 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R520 + R516 != 0 || R521 + R517 + -1*R829 + -1*R825 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R522 + R518 != 0 || R509 + R506 + -1*R523 + -1*R519 = 0 || R509 + R506 < 1) && (R529 + R524 != 0 || R530 + R525 + -1*R829 + -1*R825 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R531 + R526 != 0 || R509 + R506 + -1*R532 + -1*R527 = 0 || R509 + R506 < 1) && (R538 + R534 != 0 || R539 + R535 + -1*R829 + -1*R825 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R540 + R536 != 0 || R509 + R506 + -1*R541 + -1*R537 = 0 || R509 + R506 < 1) && (R547 + R542 != 0 || R548 + R543 + -1*R829 + -1*R825 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R19 = 0 || (R862 = 0 && R863 = 0)) && (R19 = 0 || (R866 = 0 && R867 = 0)) && (R19 = 0 || (R868 = 0 && R869 = 0)) && (R19 = 0 || (R870 = 0 && R871 = 0)) && (R19 = 0 || (R872 = 0 && R873 = 0)) && (R19 = 0 || (R874 = 0 && R875 = 0)) && (R19 = 0 || (R876 = 0 && R877 = 0)) && (R19 = 0 || (R878 = 0 && R879 = 0)) && (R19 = 0 || (R880 = 0 && R881 = 0)) && (R19 = 0 || (R882 = 0 && R883 = 0)) && (R19 = 0 || (R884 = 0 && R885 = 0)) && (R19 = 0 || (R886 = 0 && R887 = 0)) && (R495 + R492 = 0 || (R493 + R490 = 0 && R494 + R491 = 0)) && (R495 + R492 = 0 || (R498 + R496 = 0 && R499 + R497 = 0)) && (R507 + R504 = 0 || R509 + R506 < 1) && (R513 + R510 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R520 + R516 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R522 + R518 = 0 || R509 + R506 < 1) && (R529 + R524 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R531 + R526 = 0 || R509 + R506 < 1) && (R538 + R534 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R540 + R536 = 0 || R509 + R506 < 1) && (R547 + R542 = 0 || (R509 + R506 = 0 && R829 + R825 = 0)) && (R551 + R546 = 0 || (R549 + R544 = 0 && R550 + R545 = 0));
// End of Parikh automata intersection problem
