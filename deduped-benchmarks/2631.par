// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1000, R1001, R1002, R1003, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R5, R9, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [10, 10] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R965 += 1 };
  s0 -> s0 [0, 65535] { R964 += 1, R965 += 1 };
  s0 -> s2 [66, 66] { R965 += 1 };
  s0 -> s1 [67, 65535] { R965 += 1 };
  s1 -> s1 [0, 64] { R965 += 1 };
  s1 -> s2 [66, 66] { R965 += 1 };
  s1 -> s1 [67, 65535] { R965 += 1 };
  s2 -> s2 [0, 64] { R965 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R965 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R967 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R966 += 1, R967 += 1 };
  s1 -> s1 [0, 65535] { R967 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65] { R969 += 1 };
  s0 -> s2 [0, 65535] { R969 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R968 += 1, R969 += 1 };
  s0 -> s3 [66, 66] { R969 += 1 };
  s0 -> s1 [67, 65535] { R969 += 1 };
  s1 -> s1 [0, 65] { R969 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R969 += 1 };
  s1 -> s1 [67, 65535] { R969 += 1 };
  s2 -> s1 [0, 65] { R969 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R969 += 1, R9 += 1 };
  s2 -> s3 [66, 66] { R969 += 1 };
  s2 -> s1 [67, 65535] { R969 += 1 };
  s3 -> s3 [0, 65535] { R969 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R971 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R971 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R970 += 1, R971 += 1 };
  s0 -> s3 [9, 13] { R971 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R971 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R971 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R971 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R971 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R971 += 1, R17 += 1 };
  s2 -> s1 [0, 8] { R971 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R971 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R971 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R971 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R971 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R971 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R971 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R971 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R972 += 1, R973 += 1 };
  s0 -> s1 [0, 65535] { R973 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R973 += 1, R18 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R973 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R973 += 1 };
  s2 -> s1 [0, 65535] { R973 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R973 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R973 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R975 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R975 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R974 += 1, R975 += 1 };
  s0 -> s3 [9, 13] { R975 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R975 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R975 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R975 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R975 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R975 += 1, R21 += 1 };
  s2 -> s1 [0, 8] { R975 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R975 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R975 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R975 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R975 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R975 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R975 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R975 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R977 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R976 += 1, R977 += 1 };
  s0 -> s2 [0, 65535] { R977 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R977 += 1, R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535] { R977 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R977 += 1, R23 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R977 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R977 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65] { R979 += 1, R939 += 1 };
  s0 -> s0 [0, 65535] { R978 += 1, R979 += 1 };
  s0 -> s2 [0, 65535] { R979 += 1, R938 += 1, R939 += 1 };
  s0 -> s1 [67, 65535] { R979 += 1, R939 += 1 };
  s1 -> s1 [0, 65] { R979 += 1, R939 += 1 };
  s1 -> s1 [0, 65535] { R979 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [67, 65535] { R979 += 1, R939 += 1 };
  s2 -> s1 [0, 65] { R979 += 1, R939 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R979 += 1, R938 += 1, R939 += 1 };
  s2 -> s1 [67, 65535] { R979 += 1, R939 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R981 += 1, R941 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R980 += 1, R981 += 1 };
  s0 -> s2 [0, 65535] { R981 += 1, R940 += 1, R941 += 1 };
  s1 -> s1 [0, 65535] { R981 += 1, R941 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R981 += 1 };
  s2 -> s1 [0, 65535] { R981 += 1, R941 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R981 += 1, R940 += 1, R941 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R981 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R983 += 1, R943 += 1 };
  s0 -> s2 [0, 65535] { R983 += 1, R942 += 1, R943 += 1 };
  s0 -> s0 [0, 65535] { R982 += 1, R983 += 1 };
  s1 -> s1 [0, 65535] { R983 += 1, R943 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R983 += 1 };
  s2 -> s1 [0, 65535] { R983 += 1, R943 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R983 += 1, R942 += 1, R943 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R983 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R984 += 1, R985 += 1 };
  s0 -> s1 [0, 65535] { R985 += 1, R944 += 1, R945 += 1 };
  s0 -> s2 [0, 65535] { R985 += 1, R945 += 1, R485 += 1 };
  s1 -> s1 [0, 65535] { R985 += 1, R944 += 1, R945 += 1 };
  s1 -> s2 [0, 65535] { R985 += 1, R945 += 1, R485 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R985 += 1, R945 += 1, R485 += 1 };
  s2 -> s3 [0, 65535] { R985 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R985 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 66] { R987 += 1, R947 += 1 };
  s0 -> s2 [0, 65535] { R987 += 1, R947 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R986 += 1, R987 += 1 };
  s0 -> s3 [0, 65535] { R987 += 1, R946 += 1, R947 += 1 };
  s0 -> s1 [68, 65535] { R987 += 1, R947 += 1 };
  s1 -> s1 [0, 66] { R987 += 1, R947 += 1 };
  s1 -> s1 [0, 65535] { R987 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [68, 65535] { R987 += 1, R947 += 1 };
  s2 -> s1 [0, 66] { R987 += 1, R947 += 1 };
  s2 -> s5 [0, 65535] { R987 += 1 };
  s2 -> s2 [0, 65535] { R987 += 1, R947 += 1, R487 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [68, 65535] { R987 += 1, R947 += 1 };
  s3 -> s1 [0, 66] { R987 += 1, R947 += 1 };
  s3 -> s2 [0, 65535] { R987 += 1, R947 += 1, R487 += 1 };
  s3 -> s3 [0, 65535] { R987 += 1, R946 += 1, R947 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [68, 65535] { R987 += 1, R947 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R987 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R988 += 1, R989 += 1 };
  s0 -> s1 [0, 65535] { R989 += 1, R949 += 1, R931 += 1 };
  s0 -> s2 [0, 65535] { R989 += 1, R949 += 1 };
  s0 -> s3 [0, 65535] { R989 += 1, R948 += 1, R949 += 1 };
  s1 -> s1 [0, 65535] { R989 += 1, R949 += 1, R931 += 1 };
  s1 -> s5 [0, 65535] { R989 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R989 += 1, R949 += 1 };
  s2 -> s5 [0, 65535] { R989 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R989 += 1, R949 += 1 };
  s3 -> s1 [0, 65535] { R989 += 1, R949 += 1, R931 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R989 += 1, R949 += 1 };
  s3 -> s3 [0, 65535] { R989 += 1, R948 += 1, R949 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R989 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R991 += 1, R950 += 1, R951 += 1 };
  s0 -> s0 [0, 65535] { R990 += 1, R991 += 1 };
  s0 -> s2 [0, 65535] { R991 += 1, R951 += 1, R936 += 1, R937 += 1 };
  s0 -> s3 [0, 65535] { R991 += 1, R951 += 1, R935 += 1, R936 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R991 += 1, R950 += 1, R951 += 1 };
  s1 -> s2 [0, 65535] { R991 += 1, R951 += 1, R936 += 1, R937 += 1 };
  s1 -> s3 [0, 65535] { R991 += 1, R951 += 1, R935 += 1, R936 += 1 };
  s2 -> s6 [0, 65535] { R991 += 1, R951 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R991 += 1, R951 += 1, R936 += 1, R937 += 1 };
  s2 -> s5 [0, 65535] { R991 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R991 += 1, R951 += 1, R936 += 1, R937 += 1 };
  s3 -> s3 [0, 65535] { R991 += 1, R951 += 1, R935 += 1, R936 += 1 };
  s3 -> s5 [0, 65535] { R991 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R991 += 1 };
  s6 -> s6 [0, 65535] { R991 += 1, R951 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R991 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R993 += 1, R952 += 1, R953 += 1 };
  s0 -> s2 [0, 65535] { R993 += 1, R953 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R992 += 1, R993 += 1 };
  s1 -> s1 [0, 65535] { R993 += 1, R952 += 1, R953 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R993 += 1, R953 += 1, R15 += 1 };
  s2 -> s3 [0, 65535] { R993 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R993 += 1, R953 += 1, R15 += 1 };
  s3 -> s3 [0, 65535] { R993 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R995 += 1, R955 += 1 };
  s0 -> s0 [0, 65535] { R994 += 1, R995 += 1 };
  s0 -> s2 [0, 65535] { R995 += 1, R954 += 1, R955 += 1 };
  s0 -> s3 [66, 66] { R995 += 1, R955 += 1 };
  s0 -> s4 [66, 66] { R995 += 1, R955 += 1 };
  s0 -> s5 [67, 67] { R995 += 1, R955 += 1 };
  s0 -> s1 [68, 65535] { R995 += 1, R955 += 1 };
  s1 -> s1 [0, 65] { R995 += 1, R955 += 1 };
  s1 -> s3 [66, 66] { R995 += 1, R955 += 1 };
  s1 -> s4 [66, 66] { R995 += 1, R955 += 1 };
  s1 -> s5 [67, 67] { R995 += 1, R955 += 1 };
  s1 -> s1 [68, 65535] { R995 += 1, R955 += 1 };
  s2 -> s1 [0, 65] { R995 += 1, R955 += 1 };
  s2 -> s2 [0, 65535] { R995 += 1, R954 += 1, R955 += 1 };
  s2 -> s3 [66, 66] { R995 += 1, R955 += 1 };
  s2 -> s4 [66, 66] { R995 += 1, R955 += 1 };
  s2 -> s5 [67, 67] { R995 += 1, R955 += 1 };
  s2 -> s1 [68, 65535] { R995 += 1, R955 += 1 };
  s4 -> s4 [0, 66] { R995 += 1, R955 += 1 };
  s4 -> s8 [67, 67] { R995 += 1, R955 += 1 };
  s4 -> s4 [68, 65535] { R995 += 1, R955 += 1 };
  s5 -> s5 [0, 65] { R995 += 1, R955 += 1 };
  s5 -> s5 [0, 65535] { R995 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [66, 66] { R995 += 1, R955 += 1 };
  s5 -> s8 [66, 66] { R995 += 1, R955 += 1 };
  s5 -> s5 [67, 65535] { R995 += 1, R955 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R995 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R995 += 1 };
  s8 -> s8 [0, 65535] { R995 += 1, R955 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R995 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R997 += 1, R957 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R996 += 1, R997 += 1 };
  s0 -> s2 [0, 65535] { R997 += 1, R956 += 1, R957 += 1 };
  s0 -> s3 [66, 66] { R997 += 1, R957 += 1, R484 += 1 };
  s0 -> s4 [66, 66] { R997 += 1, R957 += 1, R484 += 1 };
  s0 -> s1 [67, 65535] { R997 += 1, R957 += 1, R484 += 1 };
  s1 -> s1 [0, 65] { R997 += 1, R957 += 1, R484 += 1 };
  s1 -> s1 [0, 65535] { R997 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R997 += 1, R957 += 1, R484 += 1 };
  s1 -> s4 [66, 66] { R997 += 1, R957 += 1, R484 += 1 };
  s1 -> s1 [67, 65535] { R997 += 1, R957 += 1, R484 += 1 };
  s2 -> s1 [0, 65] { R997 += 1, R957 += 1, R484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R997 += 1, R956 += 1, R957 += 1 };
  s2 -> s3 [66, 66] { R997 += 1, R957 += 1, R484 += 1 };
  s2 -> s4 [66, 66] { R997 += 1, R957 += 1, R484 += 1 };
  s2 -> s1 [67, 65535] { R997 += 1, R957 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R997 += 1, R957 += 1, R484 += 1 };
  s3 -> s6 [0, 65535] { R997 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R997 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R997 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R999 += 1, R959 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R998 += 1, R999 += 1 };
  s0 -> s2 [0, 65535] { R999 += 1, R958 += 1, R959 += 1 };
  s0 -> s3 [66, 66] { R999 += 1, R959 += 1, R486 += 1 };
  s0 -> s4 [66, 66] { R999 += 1, R959 += 1, R486 += 1 };
  s0 -> s1 [67, 65535] { R999 += 1, R959 += 1, R486 += 1 };
  s1 -> s1 [0, 65] { R999 += 1, R959 += 1, R486 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R999 += 1 };
  s1 -> s3 [66, 66] { R999 += 1, R959 += 1, R486 += 1 };
  s1 -> s4 [66, 66] { R999 += 1, R959 += 1, R486 += 1 };
  s1 -> s1 [67, 65535] { R999 += 1, R959 += 1, R486 += 1 };
  s2 -> s1 [0, 65] { R999 += 1, R959 += 1, R486 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R999 += 1, R958 += 1, R959 += 1 };
  s2 -> s3 [66, 66] { R999 += 1, R959 += 1, R486 += 1 };
  s2 -> s4 [66, 66] { R999 += 1, R959 += 1, R486 += 1 };
  s2 -> s1 [67, 65535] { R999 += 1, R959 += 1, R486 += 1 };
  s3 -> s3 [0, 65535] { R999 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R999 += 1 };
  s4 -> s4 [0, 65535] { R999 += 1, R959 += 1, R486 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R999 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s0 -> s2 [0, 65] { R1001 += 1, R961 += 1, R929 += 1 };
  s0 -> s3 [0, 65535] { R1001 += 1, R960 += 1, R961 += 1 };
  s0 -> s0 [0, 65535] { R1000 += 1, R1001 += 1 };
  s0 -> s4 [66, 66] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s0 -> s5 [66, 66] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s0 -> s6 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s0 -> s7 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s0 -> s8 [67, 67] { R1001 += 1, R961 += 1, R929 += 1 };
  s0 -> s1 [67, 65535] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s0 -> s2 [68, 65535] { R1001 += 1, R961 += 1, R929 += 1 };
  s1 -> s1 [0, 65] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s1 -> s2 [0, 65] { R1001 += 1, R961 += 1, R929 += 1 };
  s1 -> s4 [66, 66] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s1 -> s5 [66, 66] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s1 -> s6 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s1 -> s7 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s1 -> s8 [67, 67] { R1001 += 1, R961 += 1, R929 += 1 };
  s1 -> s1 [67, 65535] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s1 -> s2 [68, 65535] { R1001 += 1, R961 += 1, R929 += 1 };
  s2 -> s2 [0, 65] { R1001 += 1, R961 += 1, R929 += 1 };
  s2 -> s6 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s2 -> s7 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s2 -> s8 [67, 67] { R1001 += 1, R961 += 1, R929 += 1 };
  s2 -> s2 [68, 65535] { R1001 += 1, R961 += 1, R929 += 1 };
  s3 -> s1 [0, 65] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s3 -> s2 [0, 65] { R1001 += 1, R961 += 1, R929 += 1 };
  s3 -> s3 [0, 65535] { R1001 += 1, R960 += 1, R961 += 1 };
  s3 -> s4 [66, 66] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s3 -> s5 [66, 66] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s3 -> s6 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s3 -> s7 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s3 -> s8 [67, 67] { R1001 += 1, R961 += 1, R929 += 1 };
  s3 -> s1 [67, 65535] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s3 -> s2 [68, 65535] { R1001 += 1, R961 += 1, R929 += 1 };
  s5 -> s7 [0, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s5 -> s5 [0, 65535] { R1001 += 1, R961 += 1, R928 += 1, R929 += 1 };
  s5 -> s11 [67, 67] { R1001 += 1, R961 += 1, R929 += 1 };
  s5 -> s7 [68, 65535] { R1001 += 1, R961 += 1, R929 += 1 };
  s7 -> s7 [0, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s7 -> s11 [67, 67] { R1001 += 1, R961 += 1, R929 += 1 };
  s7 -> s7 [68, 65535] { R1001 += 1, R961 += 1, R929 += 1 };
  s8 -> s8 [0, 65] { R1001 += 1, R961 += 1, R929 += 1 };
  s8 -> s8 [0, 65535] { R1001 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s8 -> s11 [66, 66] { R1001 += 1, R961 += 1, R929 += 1 };
  s8 -> s8 [67, 65535] { R1001 += 1, R961 += 1, R929 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1001 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R1001 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1001 += 1, R961 += 1, R929 += 1 };
  s12 -> s12 [0, 65535] { R1001 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s0 -> s2 [0, 65535] { R1003 += 1, R962 += 1, R963 += 1 };
  s0 -> s0 [0, 65535] { R1002 += 1, R1003 += 1 };
  s0 -> s3 [66, 66] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s0 -> s4 [66, 66] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s0 -> s1 [67, 65535] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s1 -> s1 [0, 65] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s1 -> s1 [0, 65535] { R1003 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s1 -> s4 [66, 66] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s1 -> s1 [67, 65535] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s2 -> s1 [0, 65] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s2 -> s2 [0, 65535] { R1003 += 1, R962 += 1, R963 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s2 -> s4 [66, 66] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s2 -> s1 [67, 65535] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s3 -> s3 [0, 65535] { R1003 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1003 += 1 };
  s4 -> s4 [0, 65535] { R1003 += 1, R963 += 1, R932 += 1, R933 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1003 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R951 && R2 = R1003 && R16 - R951 = -1 && R17 = R951 && R18 - R951 = -1 && R19 = R951 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R931 + -1*R929 = 0 && R930 + R928 = 0 && R938 = 0 && R939 = R951 && R940 = 0 && R941 = R951 && R942 = 0 && R943 = R951 && R944 = 0 && R945 = R951 && R946 = 0 && R947 = R951 && R948 = 0 && R949 = R951 && R950 = 0 && R954 = 0 && R955 = 0 && R960 = 0 && R961 = 0 && R964 = 1 && R965 = R1003 && R966 = 1 && R967 = R1003 && R968 = 1 && R969 = R1003 && R970 = 1 && R971 = R1003 && R972 = 1 && R973 = R1003 && R974 = 1 && R975 = R1003 && R976 = 1 && R977 = R1003 && R978 = 1 && R979 = R1003 && R980 = 1 && R981 = R1003 && R982 = 1 && R983 = R1003 && R984 = 1 && R985 = R1003 && R986 = 1 && R987 = R1003 && R988 = 1 && R989 = R1003 && R990 = 1 && R991 = R1003 && R992 = 1 && R993 = R1003 && R994 = 1 && R995 = R1003 && R996 = 1 && R997 = R1003 && R998 = 1 && R999 = R1003 && R1000 = 1 && R1001 = R1003 && R1002 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R931 + -1*R929 < 1 && 0 < R951 && 0 < R1003 && (R931 + R929 != 0 || R937 + R934 = 0 || (R935 + R932 = 0 && R936 + R933 = 0)) && (R935 + R932 != 0 || R931 + R929 + -1*R936 + -1*R933 = 0 || R931 + R929 < 1) && (R15 = 0 || (R952 = 0 && R953 = 0)) && (R15 = 0 || (R956 = 0 && R957 = 0)) && (R15 = 0 || (R958 = 0 && R959 = 0)) && (R15 = 0 || (R962 = 0 && R963 = 0)) && (R935 + R932 = 0 || R931 + R929 < 1);
// End of Parikh automata intersection problem
