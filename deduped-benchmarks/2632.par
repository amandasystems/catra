// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R1074, R1075, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R5, R9, R928, R929, R930, R931;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [10, 10] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1037 += 1 };
  s0 -> s0 [0, 65535] { R1036 += 1, R1037 += 1 };
  s0 -> s2 [66, 66] { R1037 += 1 };
  s0 -> s1 [67, 65535] { R1037 += 1 };
  s1 -> s1 [0, 64] { R1037 += 1 };
  s1 -> s2 [66, 66] { R1037 += 1 };
  s1 -> s1 [67, 65535] { R1037 += 1 };
  s2 -> s2 [0, 64] { R1037 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R1037 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1039 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1038 += 1, R1039 += 1 };
  s1 -> s1 [0, 65535] { R1039 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65] { R1041 += 1 };
  s0 -> s0 [0, 65535] { R1040 += 1, R1041 += 1 };
  s0 -> s2 [0, 65535] { R1041 += 1, R9 += 1 };
  s0 -> s3 [66, 66] { R1041 += 1 };
  s0 -> s1 [67, 65535] { R1041 += 1 };
  s1 -> s1 [0, 65] { R1041 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R1041 += 1 };
  s1 -> s1 [67, 65535] { R1041 += 1 };
  s2 -> s1 [0, 65] { R1041 += 1 };
  s2 -> s2 [0, 65535] { R1041 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R1041 += 1 };
  s2 -> s1 [67, 65535] { R1041 += 1 };
  s3 -> s3 [0, 65535] { R1041 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1043 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1042 += 1, R1043 += 1 };
  s0 -> s2 [0, 65535] { R1043 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R1043 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1043 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1043 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1043 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R1043 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1043 += 1 };
  s2 -> s1 [0, 8] { R1043 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R1043 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1043 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1043 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1043 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1043 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1043 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1043 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1045 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R1045 += 1, R18 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R1044 += 1, R1045 += 1 };
  s1 -> s1 [0, 65535] { R1045 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1045 += 1 };
  s2 -> s1 [0, 65535] { R1045 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1045 += 1, R18 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1045 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1047 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1046 += 1, R1047 += 1 };
  s0 -> s2 [0, 65535] { R1047 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R1047 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1047 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1047 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1047 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R1047 += 1 };
  s1 -> s1 [0, 65535] { R1047 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1047 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R1047 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1047 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1047 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1047 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1047 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1047 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1047 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R1048 += 1, R1049 += 1 };
  s0 -> s1 [0, 65535] { R1049 += 1, R23 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1049 += 1, R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R1049 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1049 += 1 };
  s2 -> s1 [0, 65535] { R1049 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1049 += 1, R22 += 1, R23 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1049 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65] { R1051 += 1, R1011 += 1 };
  s0 -> s0 [0, 65535] { R1050 += 1, R1051 += 1 };
  s0 -> s2 [0, 65535] { R1051 += 1, R1010 += 1, R1011 += 1 };
  s0 -> s1 [67, 65535] { R1051 += 1, R1011 += 1 };
  s1 -> s1 [0, 65] { R1051 += 1, R1011 += 1 };
  s1 -> s1 [0, 65535] { R1051 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [67, 65535] { R1051 += 1, R1011 += 1 };
  s2 -> s1 [0, 65] { R1051 += 1, R1011 += 1 };
  s2 -> s2 [0, 65535] { R1051 += 1, R1010 += 1, R1011 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [67, 65535] { R1051 += 1, R1011 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1053 += 1, R1012 += 1, R1013 += 1 };
  s0 -> s0 [0, 65535] { R1052 += 1, R1053 += 1 };
  s0 -> s2 [0, 65535] { R1053 += 1, R1013 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R1053 += 1, R1012 += 1, R1013 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1053 += 1, R1013 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R1053 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1053 += 1, R1013 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R1053 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1055 += 1, R1015 += 1 };
  s0 -> s2 [0, 65535] { R1055 += 1, R1014 += 1, R1015 += 1 };
  s0 -> s0 [0, 65535] { R1054 += 1, R1055 += 1 };
  s1 -> s1 [0, 65535] { R1055 += 1, R1015 += 1 };
  s1 -> s4 [0, 65535] { R1055 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1055 += 1, R1015 += 1 };
  s2 -> s2 [0, 65535] { R1055 += 1, R1014 += 1, R1015 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1055 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1057 += 1, R1016 += 1, R1017 += 1 };
  s0 -> s2 [0, 65535] { R1057 += 1, R1017 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R1056 += 1, R1057 += 1 };
  s1 -> s1 [0, 65535] { R1057 += 1, R1016 += 1, R1017 += 1 };
  s1 -> s2 [0, 65535] { R1057 += 1, R1017 += 1, R485 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1057 += 1, R1017 += 1, R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1057 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1057 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 66] { R1059 += 1, R1019 += 1 };
  s0 -> s2 [0, 65535] { R1059 += 1, R1019 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R1058 += 1, R1059 += 1 };
  s0 -> s3 [0, 65535] { R1059 += 1, R1018 += 1, R1019 += 1 };
  s0 -> s1 [68, 65535] { R1059 += 1, R1019 += 1 };
  s1 -> s1 [0, 66] { R1059 += 1, R1019 += 1 };
  s1 -> s1 [0, 65535] { R1059 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [68, 65535] { R1059 += 1, R1019 += 1 };
  s2 -> s1 [0, 66] { R1059 += 1, R1019 += 1 };
  s2 -> s2 [0, 65535] { R1059 += 1, R1019 += 1, R487 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1059 += 1 };
  s2 -> s1 [68, 65535] { R1059 += 1, R1019 += 1 };
  s3 -> s1 [0, 66] { R1059 += 1, R1019 += 1 };
  s3 -> s2 [0, 65535] { R1059 += 1, R1019 += 1, R487 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1059 += 1, R1018 += 1, R1019 += 1 };
  s3 -> s1 [68, 65535] { R1059 += 1, R1019 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1059 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1061 += 1, R1021 += 1 };
  s0 -> s2 [0, 65535] { R1061 += 1, R1020 += 1, R1021 += 1 };
  s0 -> s3 [0, 65535] { R1061 += 1, R1021 += 1, R931 += 1 };
  s0 -> s0 [0, 65535] { R1060 += 1, R1061 += 1 };
  s1 -> s1 [0, 65535] { R1061 += 1, R1021 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1061 += 1 };
  s2 -> s1 [0, 65535] { R1061 += 1, R1021 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1061 += 1, R1020 += 1, R1021 += 1 };
  s2 -> s3 [0, 65535] { R1061 += 1, R1021 += 1, R931 += 1 };
  s3 -> s1 [0, 65535] { R1061 += 1, R1021 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1061 += 1 };
  s3 -> s3 [0, 65535] { R1061 += 1, R1021 += 1, R931 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1061 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1063 += 1, R1023 += 1 };
  s0 -> s0 [0, 65535] { R1062 += 1, R1063 += 1 };
  s0 -> s2 [0, 65535] { R1063 += 1, R1022 += 1, R1023 += 1 };
  s0 -> s3 [0, 65535] { R1063 += 1, R1023 += 1, R1008 += 1, R1009 += 1 };
  s1 -> s4 [0, 65535] { R1063 += 1 };
  s1 -> s1 [0, 65535] { R1063 += 1, R1023 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1063 += 1, R1023 += 1 };
  s2 -> s2 [0, 65535] { R1063 += 1, R1022 += 1, R1023 += 1 };
  s2 -> s3 [0, 65535] { R1063 += 1, R1023 += 1, R1008 += 1, R1009 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R1063 += 1 };
  s3 -> s1 [0, 65535] { R1063 += 1, R1023 += 1 };
  s3 -> s3 [0, 65535] { R1063 += 1, R1023 += 1, R1008 += 1, R1009 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1063 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R1064 += 1, R1065 += 1 };
  s0 -> s1 [0, 65535] { R1065 += 1, R1025 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R1065 += 1, R1024 += 1, R1025 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1065 += 1 };
  s1 -> s1 [0, 65535] { R1065 += 1, R1025 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1065 += 1, R1025 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R1065 += 1, R1024 += 1, R1025 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1065 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R1067 += 1, R1027 += 1 };
  s0 -> s0 [0, 65535] { R1066 += 1, R1067 += 1 };
  s0 -> s2 [0, 65535] { R1067 += 1, R1026 += 1, R1027 += 1 };
  s0 -> s3 [66, 66] { R1067 += 1, R1027 += 1 };
  s0 -> s4 [66, 66] { R1067 += 1, R1027 += 1 };
  s0 -> s5 [67, 67] { R1067 += 1, R1027 += 1 };
  s0 -> s1 [68, 65535] { R1067 += 1, R1027 += 1 };
  s1 -> s1 [0, 65] { R1067 += 1, R1027 += 1 };
  s1 -> s3 [66, 66] { R1067 += 1, R1027 += 1 };
  s1 -> s4 [66, 66] { R1067 += 1, R1027 += 1 };
  s1 -> s5 [67, 67] { R1067 += 1, R1027 += 1 };
  s1 -> s1 [68, 65535] { R1067 += 1, R1027 += 1 };
  s2 -> s1 [0, 65] { R1067 += 1, R1027 += 1 };
  s2 -> s2 [0, 65535] { R1067 += 1, R1026 += 1, R1027 += 1 };
  s2 -> s3 [66, 66] { R1067 += 1, R1027 += 1 };
  s2 -> s4 [66, 66] { R1067 += 1, R1027 += 1 };
  s2 -> s5 [67, 67] { R1067 += 1, R1027 += 1 };
  s2 -> s1 [68, 65535] { R1067 += 1, R1027 += 1 };
  s3 -> s3 [0, 66] { R1067 += 1, R1027 += 1 };
  s3 -> s7 [67, 67] { R1067 += 1, R1027 += 1 };
  s3 -> s3 [68, 65535] { R1067 += 1, R1027 += 1 };
  s5 -> s5 [0, 65] { R1067 += 1, R1027 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1067 += 1 };
  s5 -> s7 [66, 66] { R1067 += 1, R1027 += 1 };
  s5 -> s8 [66, 66] { R1067 += 1, R1027 += 1 };
  s5 -> s5 [67, 65535] { R1067 += 1, R1027 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R1067 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1067 += 1, R1027 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1067 += 1 };
  s9 -> s9 [0, 65535] { R1067 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R1069 += 1, R1029 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R1068 += 1, R1069 += 1 };
  s0 -> s2 [0, 65535] { R1069 += 1, R1028 += 1, R1029 += 1 };
  s0 -> s3 [66, 66] { R1069 += 1, R1029 += 1, R484 += 1 };
  s0 -> s4 [66, 66] { R1069 += 1, R1029 += 1, R484 += 1 };
  s0 -> s1 [67, 65535] { R1069 += 1, R1029 += 1, R484 += 1 };
  s1 -> s1 [0, 65] { R1069 += 1, R1029 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1069 += 1 };
  s1 -> s3 [66, 66] { R1069 += 1, R1029 += 1, R484 += 1 };
  s1 -> s4 [66, 66] { R1069 += 1, R1029 += 1, R484 += 1 };
  s1 -> s1 [67, 65535] { R1069 += 1, R1029 += 1, R484 += 1 };
  s2 -> s1 [0, 65] { R1069 += 1, R1029 += 1, R484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1069 += 1, R1028 += 1, R1029 += 1 };
  s2 -> s3 [66, 66] { R1069 += 1, R1029 += 1, R484 += 1 };
  s2 -> s4 [66, 66] { R1069 += 1, R1029 += 1, R484 += 1 };
  s2 -> s1 [67, 65535] { R1069 += 1, R1029 += 1, R484 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1069 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1069 += 1 };
  s4 -> s4 [0, 65535] { R1069 += 1, R1029 += 1, R484 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1069 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R1071 += 1, R1031 += 1, R486 += 1 };
  s0 -> s2 [0, 65535] { R1071 += 1, R1030 += 1, R1031 += 1 };
  s0 -> s0 [0, 65535] { R1070 += 1, R1071 += 1 };
  s0 -> s3 [66, 66] { R1071 += 1, R1031 += 1, R486 += 1 };
  s0 -> s4 [66, 66] { R1071 += 1, R1031 += 1, R486 += 1 };
  s0 -> s1 [67, 65535] { R1071 += 1, R1031 += 1, R486 += 1 };
  s1 -> s1 [0, 65] { R1071 += 1, R1031 += 1, R486 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1071 += 1 };
  s1 -> s3 [66, 66] { R1071 += 1, R1031 += 1, R486 += 1 };
  s1 -> s4 [66, 66] { R1071 += 1, R1031 += 1, R486 += 1 };
  s1 -> s1 [67, 65535] { R1071 += 1, R1031 += 1, R486 += 1 };
  s2 -> s1 [0, 65] { R1071 += 1, R1031 += 1, R486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1071 += 1, R1030 += 1, R1031 += 1 };
  s2 -> s3 [66, 66] { R1071 += 1, R1031 += 1, R486 += 1 };
  s2 -> s4 [66, 66] { R1071 += 1, R1031 += 1, R486 += 1 };
  s2 -> s1 [67, 65535] { R1071 += 1, R1031 += 1, R486 += 1 };
  s3 -> s6 [0, 65535] { R1071 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1071 += 1, R1031 += 1, R486 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1071 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1071 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s0 -> s2 [0, 65] { R1073 += 1, R1033 += 1, R929 += 1 };
  s0 -> s0 [0, 65535] { R1072 += 1, R1073 += 1 };
  s0 -> s3 [0, 65535] { R1073 += 1, R1032 += 1, R1033 += 1 };
  s0 -> s4 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s0 -> s5 [66, 66] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s0 -> s6 [66, 66] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s0 -> s7 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s0 -> s8 [67, 67] { R1073 += 1, R1033 += 1, R929 += 1 };
  s0 -> s1 [67, 65535] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s0 -> s2 [68, 65535] { R1073 += 1, R1033 += 1, R929 += 1 };
  s1 -> s1 [0, 65] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s1 -> s2 [0, 65] { R1073 += 1, R1033 += 1, R929 += 1 };
  s1 -> s4 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s1 -> s5 [66, 66] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s1 -> s6 [66, 66] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s1 -> s7 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s1 -> s8 [67, 67] { R1073 += 1, R1033 += 1, R929 += 1 };
  s1 -> s1 [67, 65535] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s1 -> s2 [68, 65535] { R1073 += 1, R1033 += 1, R929 += 1 };
  s2 -> s2 [0, 65] { R1073 += 1, R1033 += 1, R929 += 1 };
  s2 -> s4 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s2 -> s7 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s2 -> s8 [67, 67] { R1073 += 1, R1033 += 1, R929 += 1 };
  s2 -> s2 [68, 65535] { R1073 += 1, R1033 += 1, R929 += 1 };
  s3 -> s1 [0, 65] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s3 -> s2 [0, 65] { R1073 += 1, R1033 += 1, R929 += 1 };
  s3 -> s3 [0, 65535] { R1073 += 1, R1032 += 1, R1033 += 1 };
  s3 -> s4 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s3 -> s5 [66, 66] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s3 -> s6 [66, 66] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s3 -> s7 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s3 -> s8 [67, 67] { R1073 += 1, R1033 += 1, R929 += 1 };
  s3 -> s1 [67, 65535] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s3 -> s2 [68, 65535] { R1073 += 1, R1033 += 1, R929 += 1 };
  s6 -> s7 [0, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s6 -> s6 [0, 65535] { R1073 += 1, R1033 += 1, R928 += 1, R929 += 1 };
  s6 -> s11 [67, 67] { R1073 += 1, R1033 += 1, R929 += 1 };
  s6 -> s7 [68, 65535] { R1073 += 1, R1033 += 1, R929 += 1 };
  s7 -> s7 [0, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s7 -> s11 [67, 67] { R1073 += 1, R1033 += 1, R929 += 1 };
  s7 -> s7 [68, 65535] { R1073 += 1, R1033 += 1, R929 += 1 };
  s8 -> s8 [0, 65] { R1073 += 1, R1033 += 1, R929 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1073 += 1 };
  s8 -> s10 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s8 -> s11 [66, 66] { R1073 += 1, R1033 += 1, R929 += 1 };
  s8 -> s8 [67, 65535] { R1073 += 1, R1033 += 1, R929 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1073 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R1073 += 1 };
  s11 -> s11 [0, 65535] { R1073 += 1, R1033 += 1, R929 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1073 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s0 -> s2 [0, 65] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s0 -> s3 [0, 65535] { R1075 += 1, R1034 += 1, R1035 += 1 };
  s0 -> s0 [0, 65535] { R1074 += 1, R1075 += 1 };
  s0 -> s4 [66, 66] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s0 -> s5 [66, 66] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s0 -> s6 [66, 66] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s0 -> s7 [66, 66] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s0 -> s1 [67, 65535] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s0 -> s2 [67, 65535] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s1 -> s1 [0, 65] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s1 -> s1 [0, 65535] { R1075 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [66, 66] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s1 -> s5 [66, 66] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s1 -> s1 [67, 65535] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s2 -> s1 [0, 65] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s2 -> s2 [0, 65] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s2 -> s4 [66, 66] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s2 -> s5 [66, 66] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s2 -> s6 [66, 66] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s2 -> s7 [66, 66] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s2 -> s1 [67, 65535] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s2 -> s2 [67, 65535] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s3 -> s1 [0, 65] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s3 -> s2 [0, 65] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s3 -> s3 [0, 65535] { R1075 += 1, R1034 += 1, R1035 += 1 };
  s3 -> s4 [66, 66] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s3 -> s5 [66, 66] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s3 -> s6 [66, 66] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s3 -> s7 [66, 66] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s3 -> s1 [67, 65535] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s3 -> s2 [67, 65535] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s4 -> s4 [0, 65535] { R1075 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s5 -> s8 [0, 65535] { R1075 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R1075 += 1, R1035 += 1, R1005 += 1, R1006 += 1 };
  s7 -> s7 [0, 65535] { R1075 += 1, R1035 += 1, R1004 += 1, R1005 += 1 };
  s8 -> s8 [0, 65535] { R1075 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
};
constraint R1 = R1023 && R2 = R1075 && R16 - R1023 = -1 && R17 = R1023 && R18 - R1023 = -1 && R19 = R1023 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R931 + -1*R929 = 0 && R930 + R928 = 0 && R1010 = 0 && R1011 = R1023 && R1012 = 0 && R1013 = R1023 && R1014 = 0 && R1015 = R1023 && R1016 = 0 && R1017 = R1023 && R1018 = 0 && R1019 = R1023 && R1020 = 0 && R1021 = R1023 && R1022 = 0 && R1026 = 0 && R1027 = 0 && R1032 = 0 && R1033 = 0 && R1034 = 0 && R1035 = 0 && R1036 = 1 && R1037 = R1075 && R1038 = 1 && R1039 = R1075 && R1040 = 1 && R1041 = R1075 && R1042 = 1 && R1043 = R1075 && R1044 = 1 && R1045 = R1075 && R1046 = 1 && R1047 = R1075 && R1048 = 1 && R1049 = R1075 && R1050 = 1 && R1051 = R1075 && R1052 = 1 && R1053 = R1075 && R1054 = 1 && R1055 = R1075 && R1056 = 1 && R1057 = R1075 && R1058 = 1 && R1059 = R1075 && R1060 = 1 && R1061 = R1075 && R1062 = 1 && R1063 = R1075 && R1064 = 1 && R1065 = R1075 && R1066 = 1 && R1067 = R1075 && R1068 = 1 && R1069 = R1075 && R1070 = 1 && R1071 = R1075 && R1072 = 1 && R1073 = R1075 && R1074 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R931 + -1*R929 < 1 && 0 < R1023 && 0 < R1075 && (R931 + R929 != 0 || R1009 + R1006 = 0 || (R1007 + R1004 = 0 && R1008 + R1005 = 0)) && (R1007 + R1004 != 0 || R931 + R929 + -1*R1008 + -1*R1005 = 0 || R931 + R929 < 1) && (R15 = 0 || (R1024 = 0 && R1025 = 0)) && (R15 = 0 || (R1028 = 0 && R1029 = 0)) && (R15 = 0 || (R1030 = 0 && R1031 = 0)) && (R1007 + R1004 = 0 || R931 + R929 < 1);
// End of Parikh automata intersection problem
