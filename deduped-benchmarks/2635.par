// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R488, R489, R490, R491, R5, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [10, 10] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R597 += 1 };
  s0 -> s0 [0, 65535] { R596 += 1, R597 += 1 };
  s0 -> s2 [66, 66] { R597 += 1 };
  s0 -> s1 [67, 65535] { R597 += 1 };
  s1 -> s1 [0, 64] { R597 += 1 };
  s1 -> s2 [66, 66] { R597 += 1 };
  s1 -> s1 [67, 65535] { R597 += 1 };
  s2 -> s2 [0, 64] { R597 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R597 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R598 += 1, R599 += 1 };
  s0 -> s1 [0, 65535] { R599 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R599 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65] { R601 += 1 };
  s0 -> s2 [0, 65535] { R601 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R600 += 1, R601 += 1 };
  s0 -> s3 [66, 66] { R601 += 1 };
  s0 -> s1 [67, 65535] { R601 += 1 };
  s1 -> s1 [0, 65] { R601 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R601 += 1 };
  s1 -> s1 [67, 65535] { R601 += 1 };
  s2 -> s1 [0, 65] { R601 += 1 };
  s2 -> s2 [0, 65535] { R601 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R601 += 1 };
  s2 -> s1 [67, 65535] { R601 += 1 };
  s3 -> s3 [0, 65535] { R601 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R603 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R602 += 1, R603 += 1 };
  s0 -> s2 [0, 65535] { R603 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R603 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R603 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R603 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R603 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R603 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R603 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R603 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R603 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R603 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R603 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R603 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R603 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R603 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R603 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R605 += 1, R18 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R604 += 1, R605 += 1 };
  s0 -> s2 [0, 65535] { R605 += 1, R19 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R605 += 1, R18 += 1, R19 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R605 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R605 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R605 += 1, R19 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R605 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R607 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R607 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R606 += 1, R607 += 1 };
  s0 -> s3 [9, 13] { R607 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R607 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R607 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R607 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R607 += 1 };
  s1 -> s1 [0, 65535] { R607 += 1, R21 += 1 };
  s2 -> s1 [0, 8] { R607 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R607 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R607 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R607 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R607 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R607 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R607 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R607 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R609 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R608 += 1, R609 += 1 };
  s0 -> s2 [0, 65535] { R609 += 1, R23 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R609 += 1, R22 += 1, R23 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R609 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R609 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R609 += 1, R23 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R609 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65] { R611 += 1, R571 += 1 };
  s0 -> s2 [0, 65535] { R611 += 1, R570 += 1, R571 += 1 };
  s0 -> s0 [0, 65535] { R610 += 1, R611 += 1 };
  s0 -> s1 [67, 65535] { R611 += 1, R571 += 1 };
  s1 -> s1 [0, 65] { R611 += 1, R571 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R611 += 1 };
  s1 -> s1 [67, 65535] { R611 += 1, R571 += 1 };
  s2 -> s1 [0, 65] { R611 += 1, R571 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R611 += 1, R570 += 1, R571 += 1 };
  s2 -> s1 [67, 65535] { R611 += 1, R571 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R613 += 1, R573 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R612 += 1, R613 += 1 };
  s0 -> s2 [0, 65535] { R613 += 1, R572 += 1, R573 += 1 };
  s1 -> s1 [0, 65535] { R613 += 1, R573 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R613 += 1 };
  s2 -> s1 [0, 65535] { R613 += 1, R573 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R613 += 1, R572 += 1, R573 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R613 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R614 += 1, R615 += 1 };
  s0 -> s1 [0, 65535] { R615 += 1, R575 += 1 };
  s0 -> s2 [0, 65535] { R615 += 1, R574 += 1, R575 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R615 += 1, R575 += 1 };
  s1 -> s4 [0, 65535] { R615 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R615 += 1, R575 += 1 };
  s2 -> s2 [0, 65535] { R615 += 1, R574 += 1, R575 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R615 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R617 += 1, R576 += 1, R577 += 1 };
  s0 -> s2 [0, 65535] { R617 += 1, R577 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R616 += 1, R617 += 1 };
  s1 -> s1 [0, 65535] { R617 += 1, R576 += 1, R577 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R617 += 1, R577 += 1, R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R617 += 1, R577 += 1, R485 += 1 };
  s2 -> s4 [0, 65535] { R617 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R617 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 66] { R619 += 1, R579 += 1 };
  s0 -> s2 [0, 65535] { R619 += 1, R579 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R618 += 1, R619 += 1 };
  s0 -> s3 [0, 65535] { R619 += 1, R578 += 1, R579 += 1 };
  s0 -> s1 [68, 65535] { R619 += 1, R579 += 1 };
  s1 -> s1 [0, 66] { R619 += 1, R579 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R619 += 1 };
  s1 -> s1 [68, 65535] { R619 += 1, R579 += 1 };
  s2 -> s1 [0, 66] { R619 += 1, R579 += 1 };
  s2 -> s2 [0, 65535] { R619 += 1, R579 += 1, R487 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R619 += 1 };
  s2 -> s1 [68, 65535] { R619 += 1, R579 += 1 };
  s3 -> s1 [0, 66] { R619 += 1, R579 += 1 };
  s3 -> s2 [0, 65535] { R619 += 1, R579 += 1, R487 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R619 += 1, R578 += 1, R579 += 1 };
  s3 -> s1 [68, 65535] { R619 += 1, R579 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R619 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 66] { R621 += 1, R581 += 1, R491 += 1 };
  s0 -> s2 [0, 65535] { R621 += 1, R581 += 1, R490 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R620 += 1, R621 += 1 };
  s0 -> s3 [0, 65535] { R621 += 1, R580 += 1, R581 += 1 };
  s0 -> s4 [67, 67] { R621 += 1, R581 += 1, R491 += 1 };
  s0 -> s1 [68, 65535] { R621 += 1, R581 += 1, R491 += 1 };
  s1 -> s1 [0, 66] { R621 += 1, R581 += 1, R491 += 1 };
  s1 -> s4 [67, 67] { R621 += 1, R581 += 1, R491 += 1 };
  s1 -> s1 [68, 65535] { R621 += 1, R581 += 1, R491 += 1 };
  s2 -> s1 [0, 66] { R621 += 1, R581 += 1, R491 += 1 };
  s2 -> s2 [0, 65535] { R621 += 1, R581 += 1, R490 += 1, R491 += 1 };
  s2 -> s4 [67, 67] { R621 += 1, R581 += 1, R491 += 1 };
  s2 -> s1 [68, 65535] { R621 += 1, R581 += 1, R491 += 1 };
  s3 -> s1 [0, 66] { R621 += 1, R581 += 1, R491 += 1 };
  s3 -> s2 [0, 65535] { R621 += 1, R581 += 1, R490 += 1, R491 += 1 };
  s3 -> s3 [0, 65535] { R621 += 1, R580 += 1, R581 += 1 };
  s3 -> s4 [67, 67] { R621 += 1, R581 += 1, R491 += 1 };
  s3 -> s1 [68, 65535] { R621 += 1, R581 += 1, R491 += 1 };
  s4 -> s4 [0, 65535] { R621 += 1, R581 += 1, R491 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R621 += 1 };
  s4 -> s7 [0, 65535] { R621 += 1, R581 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R621 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R621 += 1 };
  s7 -> s7 [0, 65535] { R621 += 1, R581 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R623 += 1, R583 += 1, R568 += 1, R569 += 1 };
  s0 -> s2 [0, 65535] { R623 += 1, R582 += 1, R583 += 1 };
  s0 -> s3 [0, 65535] { R623 += 1, R583 += 1 };
  s0 -> s0 [0, 65535] { R622 += 1, R623 += 1 };
  s1 -> s1 [0, 65535] { R623 += 1, R583 += 1, R568 += 1, R569 += 1 };
  s1 -> s4 [0, 65535] { R623 += 1 };
  s1 -> s3 [0, 65535] { R623 += 1, R583 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R623 += 1, R583 += 1, R568 += 1, R569 += 1 };
  s2 -> s2 [0, 65535] { R623 += 1, R582 += 1, R583 += 1 };
  s2 -> s3 [0, 65535] { R623 += 1, R583 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R623 += 1 };
  s3 -> s3 [0, 65535] { R623 += 1, R583 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R623 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R625 += 1, R584 += 1, R585 += 1 };
  s0 -> s0 [0, 65535] { R624 += 1, R625 += 1 };
  s0 -> s2 [0, 65535] { R625 += 1, R585 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R625 += 1, R584 += 1, R585 += 1 };
  s1 -> s2 [0, 65535] { R625 += 1, R585 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R625 += 1, R585 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R625 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R625 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R627 += 1, R587 += 1 };
  s0 -> s2 [0, 65535] { R627 += 1, R586 += 1, R587 += 1 };
  s0 -> s0 [0, 65535] { R626 += 1, R627 += 1 };
  s0 -> s3 [66, 66] { R627 += 1, R587 += 1 };
  s0 -> s4 [66, 66] { R627 += 1, R587 += 1 };
  s0 -> s5 [67, 67] { R627 += 1, R587 += 1 };
  s0 -> s1 [68, 65535] { R627 += 1, R587 += 1 };
  s1 -> s1 [0, 65] { R627 += 1, R587 += 1 };
  s1 -> s3 [66, 66] { R627 += 1, R587 += 1 };
  s1 -> s4 [66, 66] { R627 += 1, R587 += 1 };
  s1 -> s5 [67, 67] { R627 += 1, R587 += 1 };
  s1 -> s1 [68, 65535] { R627 += 1, R587 += 1 };
  s2 -> s1 [0, 65] { R627 += 1, R587 += 1 };
  s2 -> s2 [0, 65535] { R627 += 1, R586 += 1, R587 += 1 };
  s2 -> s3 [66, 66] { R627 += 1, R587 += 1 };
  s2 -> s4 [66, 66] { R627 += 1, R587 += 1 };
  s2 -> s5 [67, 67] { R627 += 1, R587 += 1 };
  s2 -> s1 [68, 65535] { R627 += 1, R587 += 1 };
  s3 -> s3 [0, 66] { R627 += 1, R587 += 1 };
  s3 -> s8 [67, 67] { R627 += 1, R587 += 1 };
  s3 -> s3 [68, 65535] { R627 += 1, R587 += 1 };
  s5 -> s5 [0, 65] { R627 += 1, R587 += 1 };
  s5 -> s5 [0, 65535] { R627 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [66, 66] { R627 += 1, R587 += 1 };
  s5 -> s8 [66, 66] { R627 += 1, R587 += 1 };
  s5 -> s5 [67, 65535] { R627 += 1, R587 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R627 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R627 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R627 += 1, R587 += 1 };
  s9 -> s9 [0, 65535] { R627 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R629 += 1, R589 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R628 += 1, R629 += 1 };
  s0 -> s2 [0, 65535] { R629 += 1, R588 += 1, R589 += 1 };
  s0 -> s3 [66, 66] { R629 += 1, R589 += 1, R484 += 1 };
  s0 -> s4 [66, 66] { R629 += 1, R589 += 1, R484 += 1 };
  s0 -> s1 [67, 65535] { R629 += 1, R589 += 1, R484 += 1 };
  s1 -> s1 [0, 65] { R629 += 1, R589 += 1, R484 += 1 };
  s1 -> s1 [0, 65535] { R629 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R629 += 1, R589 += 1, R484 += 1 };
  s1 -> s4 [66, 66] { R629 += 1, R589 += 1, R484 += 1 };
  s1 -> s1 [67, 65535] { R629 += 1, R589 += 1, R484 += 1 };
  s2 -> s1 [0, 65] { R629 += 1, R589 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R629 += 1, R588 += 1, R589 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R629 += 1, R589 += 1, R484 += 1 };
  s2 -> s4 [66, 66] { R629 += 1, R589 += 1, R484 += 1 };
  s2 -> s1 [67, 65535] { R629 += 1, R589 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R629 += 1, R589 += 1, R484 += 1 };
  s3 -> s6 [0, 65535] { R629 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R629 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R629 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R631 += 1, R591 += 1, R486 += 1 };
  s0 -> s2 [0, 65535] { R631 += 1, R590 += 1, R591 += 1 };
  s0 -> s0 [0, 65535] { R630 += 1, R631 += 1 };
  s0 -> s3 [66, 66] { R631 += 1, R591 += 1, R486 += 1 };
  s0 -> s4 [66, 66] { R631 += 1, R591 += 1, R486 += 1 };
  s0 -> s1 [67, 65535] { R631 += 1, R591 += 1, R486 += 1 };
  s1 -> s1 [0, 65] { R631 += 1, R591 += 1, R486 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R631 += 1 };
  s1 -> s3 [66, 66] { R631 += 1, R591 += 1, R486 += 1 };
  s1 -> s4 [66, 66] { R631 += 1, R591 += 1, R486 += 1 };
  s1 -> s1 [67, 65535] { R631 += 1, R591 += 1, R486 += 1 };
  s2 -> s1 [0, 65] { R631 += 1, R591 += 1, R486 += 1 };
  s2 -> s2 [0, 65535] { R631 += 1, R590 += 1, R591 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R631 += 1, R591 += 1, R486 += 1 };
  s2 -> s4 [66, 66] { R631 += 1, R591 += 1, R486 += 1 };
  s2 -> s1 [67, 65535] { R631 += 1, R591 += 1, R486 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R631 += 1, R591 += 1, R486 += 1 };
  s3 -> s6 [0, 65535] { R631 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R631 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R631 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s0 -> s2 [0, 65535] { R633 += 1, R592 += 1, R593 += 1 };
  s0 -> s0 [0, 65535] { R632 += 1, R633 += 1 };
  s0 -> s3 [66, 66] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s0 -> s4 [66, 66] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s0 -> s1 [67, 65535] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s1 -> s1 [0, 65] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s1 -> s1 [0, 65535] { R633 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s1 -> s4 [66, 66] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s1 -> s1 [67, 65535] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s2 -> s1 [0, 65] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s2 -> s2 [0, 65535] { R633 += 1, R592 += 1, R593 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s2 -> s4 [66, 66] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s2 -> s1 [67, 65535] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s3 -> s6 [0, 65535] { R633 += 1 };
  s3 -> s3 [0, 65535] { R633 += 1, R593 += 1, R488 += 1, R489 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R633 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R633 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s0 -> s2 [0, 65] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s0 -> s0 [0, 65535] { R634 += 1, R635 += 1 };
  s0 -> s3 [0, 65535] { R635 += 1, R594 += 1, R595 += 1 };
  s0 -> s4 [66, 66] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s0 -> s5 [66, 66] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s0 -> s6 [66, 66] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s0 -> s7 [66, 66] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s0 -> s1 [67, 65535] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s0 -> s2 [67, 65535] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s1 -> s1 [0, 65] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s1 -> s2 [0, 65] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s1 -> s4 [66, 66] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s1 -> s5 [66, 66] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s1 -> s6 [66, 66] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s1 -> s7 [66, 66] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s1 -> s1 [67, 65535] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s1 -> s2 [67, 65535] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s2 -> s2 [0, 65] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s2 -> s2 [0, 65535] { R635 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [66, 66] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s2 -> s6 [66, 66] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s2 -> s2 [67, 65535] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s3 -> s1 [0, 65] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s3 -> s2 [0, 65] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s3 -> s3 [0, 65535] { R635 += 1, R594 += 1, R595 += 1 };
  s3 -> s4 [66, 66] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s3 -> s5 [66, 66] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s3 -> s6 [66, 66] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s3 -> s7 [66, 66] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s3 -> s1 [67, 65535] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s3 -> s2 [67, 65535] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s5 -> s5 [0, 65535] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s5 -> s9 [0, 65535] { R635 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R635 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R635 += 1, R595 += 1, R565 += 1, R566 += 1 };
  s7 -> s7 [0, 65535] { R635 += 1, R595 += 1, R564 += 1, R565 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R635 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
};
constraint R1 = R583 && R2 = R635 && R16 - R583 = -1 && R17 = R583 && R18 - R583 = -1 && R19 = R583 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R491 + -1*R489 = 0 && R490 + R488 = 0 && R570 = 0 && R571 = R583 && R572 = 0 && R573 = R583 && R574 = 0 && R575 = R583 && R576 = 0 && R577 = R583 && R578 = 0 && R579 = R583 && R580 = 0 && R581 = R583 && R582 = 0 && R586 = 0 && R587 = 0 && R594 = 0 && R595 = 0 && R596 = 1 && R597 = R635 && R598 = 1 && R599 = R635 && R600 = 1 && R601 = R635 && R602 = 1 && R603 = R635 && R604 = 1 && R605 = R635 && R606 = 1 && R607 = R635 && R608 = 1 && R609 = R635 && R610 = 1 && R611 = R635 && R612 = 1 && R613 = R635 && R614 = 1 && R615 = R635 && R616 = 1 && R617 = R635 && R618 = 1 && R619 = R635 && R620 = 1 && R621 = R635 && R622 = 1 && R623 = R635 && R624 = 1 && R625 = R635 && R626 = 1 && R627 = R635 && R628 = 1 && R629 = R635 && R630 = 1 && R631 = R635 && R632 = 1 && R633 = R635 && R634 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R491 + -1*R489 < 1 && 0 < R583 && 0 < R635 && (R491 + R489 != 0 || R569 + R566 = 0 || (R567 + R564 = 0 && R568 + R565 = 0)) && (R567 + R564 != 0 || R491 + R489 + -1*R568 + -1*R565 = 0 || R491 + R489 < 1) && (R15 = 0 || (R584 = 0 && R585 = 0)) && (R15 = 0 || (R588 = 0 && R589 = 0)) && (R15 = 0 || (R590 = 0 && R591 = 0)) && (R15 = 0 || (R592 = 0 && R593 = 0)) && (R567 + R564 = 0 || R491 + R489 < 1);
// End of Parikh automata intersection problem
