// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R256, R257, R258, R259, R26, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R27, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R32, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R33, R330, R331, R34, R35, R4, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [10, 10] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R293 += 1 };
  s0 -> s0 [0, 65535] { R292 += 1, R293 += 1 };
  s0 -> s2 [66, 66] { R293 += 1 };
  s0 -> s1 [67, 65535] { R293 += 1 };
  s1 -> s1 [0, 64] { R293 += 1 };
  s1 -> s2 [66, 66] { R293 += 1 };
  s1 -> s1 [67, 65535] { R293 += 1 };
  s2 -> s2 [0, 64] { R293 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R293 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R295 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R294 += 1, R295 += 1 };
  s1 -> s1 [0, 65535] { R295 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65] { R297 += 1 };
  s0 -> s2 [0, 65535] { R297 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R296 += 1, R297 += 1 };
  s0 -> s3 [66, 66] { R297 += 1 };
  s0 -> s1 [67, 65535] { R297 += 1 };
  s1 -> s1 [0, 65] { R297 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R297 += 1 };
  s1 -> s1 [67, 65535] { R297 += 1 };
  s2 -> s1 [0, 65] { R297 += 1 };
  s2 -> s2 [0, 65535] { R297 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R297 += 1 };
  s2 -> s1 [67, 65535] { R297 += 1 };
  s3 -> s3 [0, 65535] { R297 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R299 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R299 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R298 += 1, R299 += 1 };
  s0 -> s3 [9, 13] { R299 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R299 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R299 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R299 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R299 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R299 += 1 };
  s2 -> s1 [0, 8] { R299 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R299 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R299 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R299 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R299 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R299 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R299 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R299 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R300 += 1, R301 += 1 };
  s0 -> s1 [0, 65535] { R301 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R301 += 1, R18 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R301 += 1 };
  s1 -> s1 [0, 65535] { R301 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R301 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R301 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R301 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R303 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R302 += 1, R303 += 1 };
  s0 -> s2 [0, 65535] { R303 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R303 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R303 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R303 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R303 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R303 += 1 };
  s1 -> s1 [0, 65535] { R303 += 1, R21 += 1 };
  s2 -> s1 [0, 8] { R303 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R303 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R303 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R303 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R303 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R303 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R303 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R303 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R304 += 1, R305 += 1 };
  s0 -> s1 [0, 65535] { R305 += 1, R23 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R305 += 1, R22 += 1, R23 += 1 };
  s1 -> s4 [0, 65535] { R305 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R305 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R305 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R305 += 1, R22 += 1, R23 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R305 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65] { R307 += 1, R267 += 1 };
  s0 -> s0 [0, 65535] { R306 += 1, R307 += 1 };
  s0 -> s2 [0, 65535] { R307 += 1, R266 += 1, R267 += 1 };
  s0 -> s1 [67, 65535] { R307 += 1, R267 += 1 };
  s1 -> s1 [0, 65] { R307 += 1, R267 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R307 += 1 };
  s1 -> s1 [67, 65535] { R307 += 1, R267 += 1 };
  s2 -> s1 [0, 65] { R307 += 1, R267 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R307 += 1, R266 += 1, R267 += 1 };
  s2 -> s1 [67, 65535] { R307 += 1, R267 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R309 += 1, R268 += 1, R269 += 1 };
  s0 -> s2 [0, 65535] { R309 += 1, R269 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R308 += 1, R309 += 1 };
  s1 -> s1 [0, 65535] { R309 += 1, R268 += 1, R269 += 1 };
  s1 -> s2 [0, 65535] { R309 += 1, R269 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R309 += 1, R269 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R309 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R309 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 66] { R311 += 1, R271 += 1 };
  s0 -> s0 [0, 65535] { R310 += 1, R311 += 1 };
  s0 -> s2 [0, 65535] { R311 += 1, R270 += 1, R271 += 1 };
  s0 -> s3 [67, 67] { R311 += 1, R271 += 1 };
  s0 -> s1 [68, 65535] { R311 += 1, R271 += 1 };
  s1 -> s1 [0, 66] { R311 += 1, R271 += 1 };
  s1 -> s3 [67, 67] { R311 += 1, R271 += 1 };
  s1 -> s1 [68, 65535] { R311 += 1, R271 += 1 };
  s2 -> s1 [0, 66] { R311 += 1, R271 += 1 };
  s2 -> s2 [0, 65535] { R311 += 1, R270 += 1, R271 += 1 };
  s2 -> s3 [67, 67] { R311 += 1, R271 += 1 };
  s2 -> s1 [68, 65535] { R311 += 1, R271 += 1 };
  s3 -> s3 [0, 65535] { R311 += 1, R271 += 1 };
  s3 -> s4 [0, 65535] { R311 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R311 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R312 += 1, R313 += 1 };
  s0 -> s1 [0, 65535] { R313 += 1, R272 += 1, R273 += 1 };
  s0 -> s2 [0, 65535] { R313 += 1, R273 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R313 += 1, R272 += 1, R273 += 1 };
  s1 -> s2 [0, 65535] { R313 += 1, R273 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R313 += 1, R273 += 1, R33 += 1 };
  s2 -> s4 [0, 65535] { R313 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R313 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 66] { R315 += 1, R275 += 1 };
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s2 [0, 65535] { R315 += 1, R274 += 1, R275 += 1 };
  s0 -> s3 [0, 65535] { R315 += 1, R275 += 1, R35 += 1 };
  s0 -> s1 [68, 65535] { R315 += 1, R275 += 1 };
  s1 -> s1 [0, 66] { R315 += 1, R275 += 1 };
  s1 -> s1 [0, 65535] { R315 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [68, 65535] { R315 += 1, R275 += 1 };
  s2 -> s1 [0, 66] { R315 += 1, R275 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R315 += 1, R274 += 1, R275 += 1 };
  s2 -> s3 [0, 65535] { R315 += 1, R275 += 1, R35 += 1 };
  s2 -> s1 [68, 65535] { R315 += 1, R275 += 1 };
  s3 -> s1 [0, 66] { R315 += 1, R275 += 1 };
  s3 -> s4 [0, 65535] { R315 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R315 += 1, R275 += 1, R35 += 1 };
  s3 -> s1 [68, 65535] { R315 += 1, R275 += 1 };
  s4 -> s4 [0, 65535] { R315 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 66] { R317 += 1, R277 += 1, R259 += 1 };
  s0 -> s2 [0, 65535] { R317 += 1, R276 += 1, R277 += 1 };
  s0 -> s0 [0, 65535] { R316 += 1, R317 += 1 };
  s0 -> s3 [67, 67] { R317 += 1, R277 += 1, R259 += 1 };
  s0 -> s1 [68, 65535] { R317 += 1, R277 += 1, R259 += 1 };
  s1 -> s1 [0, 66] { R317 += 1, R277 += 1, R259 += 1 };
  s1 -> s3 [67, 67] { R317 += 1, R277 += 1, R259 += 1 };
  s1 -> s1 [68, 65535] { R317 += 1, R277 += 1, R259 += 1 };
  s2 -> s1 [0, 66] { R317 += 1, R277 += 1, R259 += 1 };
  s2 -> s2 [0, 65535] { R317 += 1, R276 += 1, R277 += 1 };
  s2 -> s3 [67, 67] { R317 += 1, R277 += 1, R259 += 1 };
  s2 -> s1 [68, 65535] { R317 += 1, R277 += 1, R259 += 1 };
  s3 -> s3 [0, 65535] { R317 += 1, R277 += 1, R259 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R317 += 1, R277 += 1 };
  s3 -> s6 [0, 65535] { R317 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R317 += 1, R277 += 1 };
  s5 -> s6 [0, 65535] { R317 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R317 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R319 += 1, R278 += 1, R279 += 1 };
  s0 -> s2 [0, 65535] { R319 += 1, R279 += 1, R263 += 1, R264 += 1 };
  s0 -> s0 [0, 65535] { R318 += 1, R319 += 1 };
  s0 -> s3 [0, 65535] { R319 += 1, R279 += 1, R264 += 1, R265 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R319 += 1, R278 += 1, R279 += 1 };
  s1 -> s2 [0, 65535] { R319 += 1, R279 += 1, R263 += 1, R264 += 1 };
  s1 -> s3 [0, 65535] { R319 += 1, R279 += 1, R264 += 1, R265 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R319 += 1, R279 += 1, R263 += 1, R264 += 1 };
  s2 -> s3 [0, 65535] { R319 += 1, R279 += 1, R264 += 1, R265 += 1 };
  s2 -> s6 [0, 65535] { R319 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R319 += 1, R279 += 1 };
  s3 -> s3 [0, 65535] { R319 += 1, R279 += 1, R264 += 1, R265 += 1 };
  s3 -> s6 [0, 65535] { R319 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R319 += 1, R279 += 1 };
  s5 -> s6 [0, 65535] { R319 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R319 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R321 += 1, R280 += 1, R281 += 1 };
  s0 -> s0 [0, 65535] { R320 += 1, R321 += 1 };
  s0 -> s2 [0, 65535] { R321 += 1, R281 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R321 += 1, R280 += 1, R281 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R321 += 1, R281 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R321 += 1, R281 += 1, R15 += 1 };
  s2 -> s4 [0, 65535] { R321 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R321 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R323 += 1, R283 += 1 };
  s0 -> s2 [0, 65535] { R323 += 1, R282 += 1, R283 += 1 };
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s0 -> s3 [66, 66] { R323 += 1, R283 += 1 };
  s0 -> s4 [66, 66] { R323 += 1, R283 += 1 };
  s0 -> s1 [68, 65535] { R323 += 1, R283 += 1 };
  s1 -> s1 [0, 65] { R323 += 1, R283 += 1 };
  s1 -> s1 [0, 65535] { R323 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R323 += 1, R283 += 1 };
  s1 -> s4 [66, 66] { R323 += 1, R283 += 1 };
  s1 -> s1 [68, 65535] { R323 += 1, R283 += 1 };
  s2 -> s1 [0, 65] { R323 += 1, R283 += 1 };
  s2 -> s2 [0, 65535] { R323 += 1, R282 += 1, R283 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R323 += 1, R283 += 1 };
  s2 -> s4 [66, 66] { R323 += 1, R283 += 1 };
  s2 -> s1 [68, 65535] { R323 += 1, R283 += 1 };
  s3 -> s3 [0, 66] { R323 += 1, R283 += 1 };
  s3 -> s3 [0, 65535] { R323 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [68, 65535] { R323 += 1, R283 += 1 };
  s4 -> s4 [0, 65535] { R323 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R325 += 1, R285 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R324 += 1, R325 += 1 };
  s0 -> s2 [0, 65535] { R325 += 1, R284 += 1, R285 += 1 };
  s0 -> s3 [66, 66] { R325 += 1, R285 += 1, R32 += 1 };
  s0 -> s4 [66, 66] { R325 += 1, R285 += 1, R32 += 1 };
  s0 -> s1 [67, 65535] { R325 += 1, R285 += 1, R32 += 1 };
  s1 -> s1 [0, 65] { R325 += 1, R285 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R325 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R325 += 1, R285 += 1, R32 += 1 };
  s1 -> s4 [66, 66] { R325 += 1, R285 += 1, R32 += 1 };
  s1 -> s1 [67, 65535] { R325 += 1, R285 += 1, R32 += 1 };
  s2 -> s1 [0, 65] { R325 += 1, R285 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R325 += 1, R284 += 1, R285 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R325 += 1, R285 += 1, R32 += 1 };
  s2 -> s4 [66, 66] { R325 += 1, R285 += 1, R32 += 1 };
  s2 -> s1 [67, 65535] { R325 += 1, R285 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R325 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R325 += 1 };
  s4 -> s4 [0, 65535] { R325 += 1, R285 += 1, R32 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R325 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R327 += 1, R287 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R327 += 1, R286 += 1, R287 += 1 };
  s0 -> s0 [0, 65535] { R326 += 1, R327 += 1 };
  s0 -> s3 [66, 66] { R327 += 1, R287 += 1, R34 += 1 };
  s0 -> s4 [66, 66] { R327 += 1, R287 += 1, R34 += 1 };
  s0 -> s1 [67, 65535] { R327 += 1, R287 += 1, R34 += 1 };
  s1 -> s1 [0, 65] { R327 += 1, R287 += 1, R34 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R327 += 1 };
  s1 -> s3 [66, 66] { R327 += 1, R287 += 1, R34 += 1 };
  s1 -> s4 [66, 66] { R327 += 1, R287 += 1, R34 += 1 };
  s1 -> s1 [67, 65535] { R327 += 1, R287 += 1, R34 += 1 };
  s2 -> s1 [0, 65] { R327 += 1, R287 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R327 += 1, R286 += 1, R287 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R327 += 1, R287 += 1, R34 += 1 };
  s2 -> s4 [66, 66] { R327 += 1, R287 += 1, R34 += 1 };
  s2 -> s1 [67, 65535] { R327 += 1, R287 += 1, R34 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R327 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R327 += 1, R287 += 1, R34 += 1 };
  s4 -> s6 [0, 65535] { R327 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R327 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s0 -> s2 [0, 65] { R329 += 1, R289 += 1, R257 += 1 };
  s0 -> s3 [0, 65535] { R329 += 1, R288 += 1, R289 += 1 };
  s0 -> s0 [0, 65535] { R328 += 1, R329 += 1 };
  s0 -> s4 [66, 66] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s0 -> s5 [66, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s0 -> s6 [66, 66] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s0 -> s7 [66, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s0 -> s1 [67, 65535] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s0 -> s2 [68, 65535] { R329 += 1, R289 += 1, R257 += 1 };
  s1 -> s1 [0, 65] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s1 -> s2 [0, 65] { R329 += 1, R289 += 1, R257 += 1 };
  s1 -> s4 [66, 66] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s1 -> s5 [66, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s1 -> s6 [66, 66] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s1 -> s7 [66, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s1 -> s1 [67, 65535] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s1 -> s2 [68, 65535] { R329 += 1, R289 += 1, R257 += 1 };
  s2 -> s2 [0, 65] { R329 += 1, R289 += 1, R257 += 1 };
  s2 -> s2 [0, 65535] { R329 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [66, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s2 -> s7 [66, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s2 -> s2 [68, 65535] { R329 += 1, R289 += 1, R257 += 1 };
  s3 -> s1 [0, 65] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s3 -> s2 [0, 65] { R329 += 1, R289 += 1, R257 += 1 };
  s3 -> s3 [0, 65535] { R329 += 1, R288 += 1, R289 += 1 };
  s3 -> s4 [66, 66] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s3 -> s5 [66, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s3 -> s6 [66, 66] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s3 -> s7 [66, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s3 -> s1 [67, 65535] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s3 -> s2 [68, 65535] { R329 += 1, R289 += 1, R257 += 1 };
  s5 -> s5 [0, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s5 -> s5 [0, 65535] { R329 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [68, 65535] { R329 += 1, R289 += 1, R257 += 1 };
  s6 -> s5 [0, 66] { R329 += 1, R289 += 1, R257 += 1 };
  s6 -> s6 [0, 65535] { R329 += 1, R289 += 1, R256 += 1, R257 += 1 };
  s6 -> s5 [68, 65535] { R329 += 1, R289 += 1, R257 += 1 };
  s7 -> s7 [0, 65535] { R329 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s2, s5, s7, s8;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s0 -> s2 [0, 65535] { R331 += 1, R290 += 1, R291 += 1 };
  s0 -> s0 [0, 65535] { R330 += 1, R331 += 1 };
  s0 -> s3 [66, 66] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s0 -> s4 [66, 66] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s0 -> s1 [67, 65535] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s1 -> s1 [0, 65] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s1 -> s1 [0, 65535] { R331 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s1 -> s4 [66, 66] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s1 -> s1 [67, 65535] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s2 -> s1 [0, 65] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s2 -> s2 [0, 65535] { R331 += 1, R290 += 1, R291 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s2 -> s4 [66, 66] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s2 -> s1 [67, 65535] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s3 -> s3 [0, 65535] { R331 += 1, R291 += 1, R260 += 1, R261 += 1 };
  s3 -> s6 [0, 65535] { R331 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R331 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R331 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R279 && R2 = R331 && R16 - R279 = -1 && R17 = R279 && R18 - R279 = -1 && R19 = R279 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R33 + R32 + -1*R259 + -1*R257 = 0 && R258 + R256 = 0 && R266 = 0 && R267 = R279 && R268 = 0 && R269 = R279 && R270 = 0 && R271 = R279 && R272 = 0 && R273 = R279 && R274 = 0 && R275 = R279 && R276 = 0 && R277 = R279 && R278 = 0 && R288 = 0 && R289 = 0 && R292 = 1 && R293 = R331 && R294 = 1 && R295 = R331 && R296 = 1 && R297 = R331 && R298 = 1 && R299 = R331 && R300 = 1 && R301 = R331 && R302 = 1 && R303 = R331 && R304 = 1 && R305 = R331 && R306 = 1 && R307 = R331 && R308 = 1 && R309 = R331 && R310 = 1 && R311 = R331 && R312 = 1 && R313 = R331 && R314 = 1 && R315 = R331 && R316 = 1 && R317 = R331 && R318 = 1 && R319 = R331 && R320 = 1 && R321 = R331 && R322 = 1 && R323 = R331 && R324 = 1 && R325 = R331 && R326 = 1 && R327 = R331 && R328 = 1 && R329 = R331 && R330 = 1 && R9 < 1 && R12 < 1 && R35 + R34 < 1 && -1*R259 + -1*R257 < 1 && 0 < R279 && 0 < R331 && (R259 + R257 != 0 || R265 + R262 = 0 || (R263 + R260 = 0 && R264 + R261 = 0)) && (R263 + R260 != 0 || R259 + R257 + -1*R264 + -1*R261 = 0 || R259 + R257 < 1) && (R15 = 0 || (R280 = 0 && R281 = 0)) && (R15 = 0 || (R282 = 0 && R283 = 0)) && (R15 = 0 || (R284 = 0 && R285 = 0)) && (R15 = 0 || (R286 = 0 && R287 = 0)) && (R15 = 0 || (R290 = 0 && R291 = 0)) && (R263 + R260 = 0 || R259 + R257 < 1);
// End of Parikh automata intersection problem
