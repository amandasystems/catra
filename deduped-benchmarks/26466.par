// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R4, R40, R42, R43, R46, R47, R4738, R4739, R4740, R4741, R4742, R4743, R48, R4952, R4953, R4954, R4955, R4956, R4957, R4958, R4959, R4960, R4961, R4962, R4963, R4964, R4965, R4966, R4967, R4968, R4969, R4970, R4971, R4972, R4973, R4974, R4975, R4976, R4977, R4978, R4979, R4980, R4981, R4982, R4983, R4984, R4985, R4986, R4987, R4988, R4989, R4990, R4991, R4992, R4993, R4994, R4995, R4996, R4997, R4998, R4999, R5000, R5001, R5002, R5003, R5004, R5005, R5006, R5007, R5008, R5009, R5010, R5011, R5012, R5013, R5014, R5015, R5016, R5017, R5018, R5019, R5020, R5021, R5022, R5023, R5024, R5025, R5026, R5027, R5028, R5029, R5030, R5031, R5032, R5033, R5034, R5035, R5036, R5037, R5038, R5039, R5040, R5041, R5042, R5043, R5044, R5045, R5046, R5047, R5048, R5049, R5050, R5051, R5052, R5053, R5054, R5055, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [76, 76];
  s0 -> s0 [77, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [76, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 75];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [76, 76];
  s0 -> s1 [77, 65535];
  s1 -> s1 [0, 75];
  s1 -> s2 [76, 76];
  s1 -> s1 [77, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R4977 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R4976 += 1, R4977 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4977 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 75] { R4979 += 1 };
  s0 -> s0 [0, 65535] { R4978 += 1, R4979 += 1 };
  s0 -> s2 [76, 76] { R4979 += 1 };
  s0 -> s3 [76, 76] { R4979 += 1 };
  s0 -> s1 [88, 65535] { R4979 += 1 };
  s1 -> s1 [0, 75] { R4979 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R4979 += 1 };
  s1 -> s3 [76, 76] { R4979 += 1 };
  s1 -> s1 [88, 65535] { R4979 += 1 };
  s2 -> s2 [0, 76] { R4979 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R4979 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 75] { R4981 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R4980 += 1, R4981 += 1 };
  s0 -> s2 [76, 76] { R4981 += 1, R38 += 1 };
  s0 -> s3 [76, 76] { R4981 += 1, R38 += 1 };
  s0 -> s1 [77, 65535] { R4981 += 1, R38 += 1 };
  s1 -> s1 [0, 75] { R4981 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R4981 += 1, R38 += 1 };
  s1 -> s3 [76, 76] { R4981 += 1, R38 += 1 };
  s1 -> s1 [77, 65535] { R4981 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4981 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 75] { R4983 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R4982 += 1, R4983 += 1 };
  s0 -> s2 [76, 76] { R4983 += 1, R40 += 1 };
  s0 -> s3 [76, 76] { R4983 += 1, R40 += 1 };
  s0 -> s1 [77, 65535] { R4983 += 1, R40 += 1 };
  s1 -> s1 [0, 75] { R4983 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R4983 += 1, R40 += 1 };
  s1 -> s3 [76, 76] { R4983 += 1, R40 += 1 };
  s1 -> s1 [77, 65535] { R4983 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R4983 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R4985 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R4984 += 1, R4985 += 1 };
  s0 -> s2 [76, 76] { R4985 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [76, 76] { R4985 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [77, 65535] { R4985 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 75] { R4985 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R4985 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [76, 76] { R4985 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [77, 65535] { R4985 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R4985 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 75] { R4987 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R4986 += 1, R4987 += 1 };
  s0 -> s2 [76, 76] { R4987 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [76, 76] { R4987 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [77, 65535] { R4987 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 75] { R4987 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R4987 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [76, 76] { R4987 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [77, 65535] { R4987 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4987 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 75] { R4989 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R4988 += 1, R4989 += 1 };
  s0 -> s2 [76, 76] { R4989 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [76, 76] { R4989 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [77, 65535] { R4989 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 75] { R4989 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R4989 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [76, 76] { R4989 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [77, 65535] { R4989 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4989 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 75] { R4991 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R4990 += 1, R4991 += 1 };
  s0 -> s2 [76, 76] { R4991 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [76, 76] { R4991 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [77, 65535] { R4991 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 75] { R4991 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R4991 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [76, 76] { R4991 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [77, 65535] { R4991 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4991 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R4993 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R4992 += 1, R4993 += 1 };
  s0 -> s2 [76, 76] { R4993 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [76, 76] { R4993 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [77, 65535] { R4993 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 75] { R4993 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R4993 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [76, 76] { R4993 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [77, 65535] { R4993 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4993 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 75] { R5013 += 1 };
  s0 -> s0 [0, 65535] { R5012 += 1, R5013 += 1 };
  s0 -> s2 [76, 76] { R5013 += 1 };
  s0 -> s1 [77, 65535] { R5013 += 1 };
  s1 -> s1 [0, 75] { R5013 += 1 };
  s1 -> s2 [76, 76] { R5013 += 1 };
  s1 -> s1 [77, 65535] { R5013 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5013 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R5014 += 1, R5015 += 1 };
  s0 -> s1 [0, 65535] { R5015 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5015 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 75] { R5017 += 1 };
  s0 -> s2 [0, 65535] { R5017 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R5016 += 1, R5017 += 1 };
  s0 -> s3 [76, 76] { R5017 += 1 };
  s0 -> s1 [77, 65535] { R5017 += 1 };
  s1 -> s1 [0, 75] { R5017 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [76, 76] { R5017 += 1 };
  s1 -> s1 [77, 65535] { R5017 += 1 };
  s2 -> s1 [0, 75] { R5017 += 1 };
  s2 -> s2 [0, 65535] { R5017 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [76, 76] { R5017 += 1 };
  s2 -> s1 [77, 65535] { R5017 += 1 };
  s3 -> s3 [0, 65535] { R5017 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 75] { R5019 += 1, R4957 += 1 };
  s0 -> s0 [0, 65535] { R5018 += 1, R5019 += 1 };
  s0 -> s2 [0, 65535] { R5019 += 1, R4956 += 1, R4957 += 1 };
  s0 -> s1 [77, 65535] { R5019 += 1, R4957 += 1 };
  s1 -> s1 [0, 75] { R5019 += 1, R4957 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5019 += 1 };
  s1 -> s1 [77, 65535] { R5019 += 1, R4957 += 1 };
  s2 -> s1 [0, 75] { R5019 += 1, R4957 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5019 += 1, R4956 += 1, R4957 += 1 };
  s2 -> s1 [77, 65535] { R5019 += 1, R4957 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R5021 += 1, R4959 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R5020 += 1, R5021 += 1 };
  s0 -> s2 [0, 65535] { R5021 += 1, R4958 += 1, R4959 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5021 += 1 };
  s1 -> s1 [0, 65535] { R5021 += 1, R4959 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5021 += 1, R4959 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R5021 += 1, R4958 += 1, R4959 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5021 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 76] { R5023 += 1, R4961 += 1 };
  s0 -> s2 [0, 65535] { R5023 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s0 [0, 65535] { R5022 += 1, R5023 += 1 };
  s0 -> s1 [87, 65535] { R5023 += 1, R4961 += 1 };
  s1 -> s1 [0, 76] { R5023 += 1, R4961 += 1 };
  s1 -> s1 [0, 65535] { R5023 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R5023 += 1, R4961 += 1 };
  s2 -> s1 [0, 76] { R5023 += 1, R4961 += 1 };
  s2 -> s2 [0, 65535] { R5023 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R5023 += 1, R4961 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R5025 += 1, R4963 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R5025 += 1, R4962 += 1, R4963 += 1 };
  s0 -> s0 [0, 65535] { R5024 += 1, R5025 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5025 += 1, R4963 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R5025 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5025 += 1, R4963 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R5025 += 1, R4962 += 1, R4963 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5025 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R5027 += 1, R4965 += 1 };
  s0 -> s2 [0, 65535] { R5027 += 1, R4964 += 1, R4965 += 1 };
  s0 -> s0 [0, 65535] { R5026 += 1, R5027 += 1 };
  s0 -> s3 [0, 65535] { R5027 += 1, R4965 += 1, R69 += 1 };
  s0 -> s1 [88, 65535] { R5027 += 1, R4965 += 1 };
  s1 -> s1 [0, 86] { R5027 += 1, R4965 += 1 };
  s1 -> s1 [0, 65535] { R5027 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R5027 += 1, R4965 += 1 };
  s2 -> s1 [0, 86] { R5027 += 1, R4965 += 1 };
  s2 -> s2 [0, 65535] { R5027 += 1, R4964 += 1, R4965 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R5027 += 1, R4965 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R5027 += 1, R4965 += 1 };
  s3 -> s1 [0, 86] { R5027 += 1, R4965 += 1 };
  s3 -> s4 [0, 65535] { R5027 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5027 += 1, R4965 += 1, R69 += 1 };
  s3 -> s1 [88, 65535] { R5027 += 1, R4965 += 1 };
  s4 -> s4 [0, 65535] { R5027 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R5029 += 1, R4967 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R5029 += 1, R4966 += 1, R4967 += 1 };
  s0 -> s0 [0, 65535] { R5028 += 1, R5029 += 1 };
  s0 -> s3 [0, 65535] { R5029 += 1, R4967 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [88, 65535] { R5029 += 1, R4967 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R5029 += 1, R4967 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5029 += 1, R4967 += 1 };
  s1 -> s5 [0, 65535] { R5029 += 1 };
  s1 -> s1 [88, 65535] { R5029 += 1, R4967 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R5029 += 1, R4967 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R5029 += 1, R4966 += 1, R4967 += 1 };
  s2 -> s3 [0, 65535] { R5029 += 1, R4967 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R5029 += 1, R4967 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R5029 += 1, R4967 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R5029 += 1, R4967 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5029 += 1 };
  s3 -> s1 [88, 65535] { R5029 += 1, R4967 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5029 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R5030 += 1, R5031 += 1 };
  s0 -> s1 [0, 65535] { R5031 += 1, R4969 += 1, R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R5031 += 1, R4968 += 1, R4969 += 1 };
  s0 -> s3 [0, 65535] { R5031 += 1, R4969 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5031 += 1, R4969 += 1, R78 += 1, R79 += 1 };
  s1 -> s6 [0, 65535] { R5031 += 1, R4969 += 1 };
  s1 -> s5 [0, 65535] { R5031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R5031 += 1, R4969 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R5031 += 1, R4968 += 1, R4969 += 1 };
  s2 -> s3 [0, 65535] { R5031 += 1, R4969 += 1, R77 += 1, R78 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5031 += 1, R4969 += 1, R78 += 1, R79 += 1 };
  s3 -> s5 [0, 65535] { R5031 += 1 };
  s3 -> s3 [0, 65535] { R5031 += 1, R4969 += 1, R77 += 1, R78 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5031 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R5031 += 1, R4969 += 1 };
  s6 -> s5 [0, 65535] { R5031 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s0 -> s2 [0, 65535] { R5033 += 1, R4970 += 1, R4971 += 1 };
  s0 -> s3 [0, 65535] { R5033 += 1, R4971 += 1, R3892 += 1, R3893 += 1 };
  s0 -> s0 [0, 65535] { R5032 += 1, R5033 += 1 };
  s0 -> s4 [88, 88] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s0 -> s1 [89, 65535] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s1 -> s1 [0, 87] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s1 -> s4 [88, 88] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s1 -> s1 [89, 65535] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s2 -> s1 [0, 87] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s2 -> s2 [0, 65535] { R5033 += 1, R4970 += 1, R4971 += 1 };
  s2 -> s3 [0, 65535] { R5033 += 1, R4971 += 1, R3892 += 1, R3893 += 1 };
  s2 -> s4 [88, 88] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s2 -> s1 [89, 65535] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s3 -> s1 [0, 87] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s3 -> s3 [0, 65535] { R5033 += 1, R4971 += 1, R3892 += 1, R3893 += 1 };
  s3 -> s4 [88, 88] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s3 -> s1 [89, 65535] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s4 -> s5 [0, 65535] { R5033 += 1, R4971 += 1 };
  s4 -> s4 [0, 65535] { R5033 += 1, R4971 += 1, R3893 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R5033 += 1 };
  s5 -> s5 [0, 65535] { R5033 += 1, R4971 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R5033 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5033 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R5035 += 1, R4972 += 1, R4973 += 1 };
  s0 -> s0 [0, 65535] { R5034 += 1, R5035 += 1 };
  s0 -> s2 [0, 65535] { R5035 += 1, R4973 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5035 += 1, R4972 += 1, R4973 += 1 };
  s1 -> s2 [0, 65535] { R5035 += 1, R4973 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5035 += 1, R4973 += 1 };
  s2 -> s4 [0, 65535] { R5035 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5035 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R5037 += 1, R4974 += 1, R4975 += 1 };
  s0 -> s2 [0, 65535] { R5037 += 1, R4975 += 1 };
  s0 -> s0 [0, 65535] { R5036 += 1, R5037 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5037 += 1, R4974 += 1, R4975 += 1 };
  s1 -> s2 [0, 65535] { R5037 += 1, R4975 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5037 += 1 };
  s2 -> s2 [0, 65535] { R5037 += 1, R4975 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5037 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R5039 += 1, R4994 += 1, R4995 += 1 };
  s0 -> s2 [0, 65535] { R5039 += 1, R4995 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R5038 += 1, R5039 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5039 += 1, R4994 += 1, R4995 += 1 };
  s1 -> s2 [0, 65535] { R5039 += 1, R4995 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R5039 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5039 += 1, R4995 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R5039 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 75] { R5041 += 1, R4997 += 1 };
  s0 -> s2 [0, 65535] { R5041 += 1, R4996 += 1, R4997 += 1 };
  s0 -> s0 [0, 65535] { R5040 += 1, R5041 += 1 };
  s0 -> s3 [76, 76] { R5041 += 1, R4997 += 1 };
  s0 -> s4 [76, 76] { R5041 += 1, R4997 += 1 };
  s0 -> s5 [87, 87] { R5041 += 1, R4997 += 1 };
  s0 -> s1 [88, 65535] { R5041 += 1, R4997 += 1 };
  s1 -> s1 [0, 75] { R5041 += 1, R4997 += 1 };
  s1 -> s3 [76, 76] { R5041 += 1, R4997 += 1 };
  s1 -> s4 [76, 76] { R5041 += 1, R4997 += 1 };
  s1 -> s5 [87, 87] { R5041 += 1, R4997 += 1 };
  s1 -> s1 [88, 65535] { R5041 += 1, R4997 += 1 };
  s2 -> s1 [0, 75] { R5041 += 1, R4997 += 1 };
  s2 -> s2 [0, 65535] { R5041 += 1, R4996 += 1, R4997 += 1 };
  s2 -> s3 [76, 76] { R5041 += 1, R4997 += 1 };
  s2 -> s4 [76, 76] { R5041 += 1, R4997 += 1 };
  s2 -> s5 [87, 87] { R5041 += 1, R4997 += 1 };
  s2 -> s1 [88, 65535] { R5041 += 1, R4997 += 1 };
  s3 -> s3 [0, 76] { R5041 += 1, R4997 += 1 };
  s3 -> s8 [87, 87] { R5041 += 1, R4997 += 1 };
  s3 -> s3 [88, 65535] { R5041 += 1, R4997 += 1 };
  s5 -> s5 [0, 75] { R5041 += 1, R4997 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5041 += 1 };
  s5 -> s7 [76, 76] { R5041 += 1, R4997 += 1 };
  s5 -> s8 [76, 76] { R5041 += 1, R4997 += 1 };
  s5 -> s5 [87, 65535] { R5041 += 1, R4997 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5041 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 76] { R5041 += 1, R4997 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5041 += 1 };
  s8 -> s8 [87, 65535] { R5041 += 1, R4997 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 75] { R5043 += 1, R4999 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R5042 += 1, R5043 += 1 };
  s0 -> s2 [0, 65535] { R5043 += 1, R4998 += 1, R4999 += 1 };
  s0 -> s3 [76, 76] { R5043 += 1, R4999 += 1, R66 += 1 };
  s0 -> s4 [76, 76] { R5043 += 1, R4999 += 1, R66 += 1 };
  s0 -> s1 [77, 65535] { R5043 += 1, R4999 += 1, R66 += 1 };
  s1 -> s1 [0, 75] { R5043 += 1, R4999 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R5043 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R5043 += 1, R4999 += 1, R66 += 1 };
  s1 -> s4 [76, 76] { R5043 += 1, R4999 += 1, R66 += 1 };
  s1 -> s1 [77, 65535] { R5043 += 1, R4999 += 1, R66 += 1 };
  s2 -> s1 [0, 75] { R5043 += 1, R4999 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R5043 += 1, R4998 += 1, R4999 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R5043 += 1, R4999 += 1, R66 += 1 };
  s2 -> s4 [76, 76] { R5043 += 1, R4999 += 1, R66 += 1 };
  s2 -> s1 [77, 65535] { R5043 += 1, R4999 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R5043 += 1 };
  s3 -> s3 [0, 65535] { R5043 += 1, R4999 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5043 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5043 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 75] { R5045 += 1, R5001 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R5045 += 1, R5000 += 1, R5001 += 1 };
  s0 -> s0 [0, 65535] { R5044 += 1, R5045 += 1 };
  s0 -> s3 [76, 76] { R5045 += 1, R5001 += 1, R68 += 1 };
  s0 -> s4 [76, 76] { R5045 += 1, R5001 += 1, R68 += 1 };
  s0 -> s1 [77, 65535] { R5045 += 1, R5001 += 1, R68 += 1 };
  s1 -> s1 [0, 75] { R5045 += 1, R5001 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5045 += 1 };
  s1 -> s3 [76, 76] { R5045 += 1, R5001 += 1, R68 += 1 };
  s1 -> s4 [76, 76] { R5045 += 1, R5001 += 1, R68 += 1 };
  s1 -> s1 [77, 65535] { R5045 += 1, R5001 += 1, R68 += 1 };
  s2 -> s1 [0, 75] { R5045 += 1, R5001 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5045 += 1, R5000 += 1, R5001 += 1 };
  s2 -> s3 [76, 76] { R5045 += 1, R5001 += 1, R68 += 1 };
  s2 -> s4 [76, 76] { R5045 += 1, R5001 += 1, R68 += 1 };
  s2 -> s1 [77, 65535] { R5045 += 1, R5001 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5045 += 1, R5001 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R5045 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5045 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5045 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 75] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R5047 += 1, R5002 += 1, R5003 += 1 };
  s0 -> s0 [0, 65535] { R5046 += 1, R5047 += 1 };
  s0 -> s3 [76, 76] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [76, 76] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [77, 65535] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 75] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R5047 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [76, 76] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [77, 65535] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 75] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R5047 += 1, R5002 += 1, R5003 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [76, 76] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [77, 65535] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R5047 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5047 += 1, R5003 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5047 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5047 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 75] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R5048 += 1, R5049 += 1 };
  s0 -> s2 [0, 65535] { R5049 += 1, R5004 += 1, R5005 += 1 };
  s0 -> s3 [76, 76] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [76, 76] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [77, 65535] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 75] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R5049 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [76, 76] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [76, 76] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [77, 65535] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 75] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5049 += 1, R5004 += 1, R5005 += 1 };
  s2 -> s3 [76, 76] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [76, 76] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [77, 65535] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R5049 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5049 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5049 += 1, R5005 += 1, R74 += 1, R75 += 1 };
  s5 -> s5 [0, 65535] { R5049 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 75] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 65535] { R5051 += 1, R5006 += 1, R5007 += 1 };
  s0 -> s0 [0, 65535] { R5050 += 1, R5051 += 1 };
  s0 -> s3 [76, 76] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s4 [76, 76] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [77, 65535] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 75] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5051 += 1 };
  s1 -> s3 [76, 76] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s4 [76, 76] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [77, 65535] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s1 [0, 75] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s2 [0, 65535] { R5051 += 1, R5006 += 1, R5007 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [76, 76] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s1 [77, 65535] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R5051 += 1, R5007 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [0, 65535] { R5051 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5051 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5051 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 75] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s0 -> s2 [0, 75] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s0 -> s0 [0, 65535] { R5052 += 1, R5053 += 1 };
  s0 -> s3 [0, 65535] { R5053 += 1, R5008 += 1, R5009 += 1 };
  s0 -> s4 [76, 76] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s0 -> s5 [76, 76] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s0 -> s6 [76, 76] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s0 -> s7 [76, 76] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s0 -> s1 [77, 65535] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s0 -> s2 [77, 65535] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s1 -> s11 [0, 75] { R5053 += 1, R5009 += 1 };
  s1 -> s1 [0, 75] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s1 -> s12 [76, 76] { R5053 += 1, R5009 += 1 };
  s1 -> s8 [76, 76] { R5053 += 1, R5009 += 1 };
  s1 -> s5 [76, 76] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s1 -> s6 [76, 76] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s1 -> s11 [77, 65535] { R5053 += 1, R5009 += 1 };
  s1 -> s1 [77, 65535] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s1 [0, 75] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s2 [0, 75] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s2 -> s4 [76, 76] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s2 -> s5 [76, 76] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s6 [76, 76] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s7 [76, 76] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s2 -> s1 [77, 65535] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s2 -> s2 [77, 65535] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s3 -> s1 [0, 75] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s3 -> s2 [0, 75] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s3 -> s3 [0, 65535] { R5053 += 1, R5008 += 1, R5009 += 1 };
  s3 -> s4 [76, 76] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s3 -> s5 [76, 76] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s3 -> s6 [76, 76] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s3 -> s7 [76, 76] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s3 -> s1 [77, 65535] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s3 -> s2 [77, 65535] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s5 -> s8 [0, 65535] { R5053 += 1, R5009 += 1 };
  s5 -> s5 [0, 65535] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s7 -> s5 [0, 65535] { R5053 += 1, R5009 += 1, R4739 += 1, R4740 += 1 };
  s7 -> s7 [0, 65535] { R5053 += 1, R5009 += 1, R4738 += 1, R4739 += 1 };
  s8 -> s9 [0, 65535] { R5053 += 1 };
  s8 -> s8 [0, 65535] { R5053 += 1, R5009 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R5053 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 75] { R5053 += 1, R5009 += 1 };
  s11 -> s11 [0, 65535] { R5053 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [76, 76] { R5053 += 1, R5009 += 1 };
  s11 -> s8 [76, 76] { R5053 += 1, R5009 += 1 };
  s11 -> s11 [77, 65535] { R5053 += 1, R5009 += 1 };
  s12 -> s12 [0, 65535] { R5053 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 75] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s0 -> s2 [0, 75] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s0 -> s0 [0, 65535] { R5054 += 1, R5055 += 1 };
  s0 -> s3 [0, 65535] { R5055 += 1, R5010 += 1, R5011 += 1 };
  s0 -> s4 [76, 76] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s0 -> s5 [76, 76] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s0 -> s6 [76, 76] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s0 -> s7 [76, 76] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s0 -> s2 [77, 86] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s0 -> s1 [77, 65535] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s0 -> s8 [87, 87] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s0 -> s2 [89, 65535] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s1 -> s1 [0, 75] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s1 -> s2 [0, 75] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s1 -> s4 [76, 76] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s1 -> s5 [76, 76] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s1 -> s6 [76, 76] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s1 -> s7 [76, 76] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s1 -> s2 [77, 86] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s1 -> s1 [77, 65535] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s1 -> s8 [87, 87] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s1 -> s2 [89, 65535] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s2 -> s2 [0, 75] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s2 -> s5 [76, 76] { R5055 += 1, R5011 += 1 };
  s2 -> s7 [76, 76] { R5055 += 1, R5011 += 1 };
  s2 -> s2 [77, 86] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s2 -> s2 [77, 65535] { R5055 += 1, R5011 += 1 };
  s2 -> s8 [87, 87] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s2 -> s2 [89, 65535] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s3 -> s1 [0, 75] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s3 -> s2 [0, 75] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s3 -> s3 [0, 65535] { R5055 += 1, R5010 += 1, R5011 += 1 };
  s3 -> s4 [76, 76] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s3 -> s5 [76, 76] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s3 -> s6 [76, 76] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s3 -> s7 [76, 76] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s3 -> s2 [77, 86] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s3 -> s1 [77, 65535] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s3 -> s8 [87, 87] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s3 -> s2 [89, 65535] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s5 -> s5 [0, 86] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s5 -> s5 [0, 65535] { R5055 += 1, R5011 += 1 };
  s5 -> s10 [87, 87] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s5 -> s5 [89, 65535] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s6 -> s5 [0, 86] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s6 -> s6 [0, 65535] { R5055 += 1, R5011 += 1, R4952 += 1, R4953 += 1 };
  s6 -> s10 [87, 87] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s6 -> s5 [89, 65535] { R5055 += 1, R5011 += 1, R4953 += 1 };
  s8 -> s8 [0, 75] { R5055 += 1, R5011 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R5055 += 1 };
  s8 -> s10 [76, 76] { R5055 += 1, R5011 += 1 };
  s8 -> s11 [76, 76] { R5055 += 1, R5011 += 1 };
  s8 -> s8 [77, 65535] { R5055 += 1, R5011 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5055 += 1, R5011 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R5055 += 1 };
  s11 -> s11 [0, 65535] { R5055 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R5055 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
constraint R1 = R4971 && R2 = R5055 && R20 - R5055 = -1 && R21 = R5055 && R22 - R5055 = -1 && R23 = R5055 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3893 + -1*R3891 - R53 = 0 && R52 + R3892 + R3890 = 0 && R4970 = 0 && R4996 = 0 && R4997 = 0 && R5008 = 0 && R5009 = 0 && R5010 = 0 && R5011 = 0 && R5012 = 0 && R5013 = R5055 && R5014 = 0 && R5015 = R5055 && R5016 = 0 && R5017 = R5055 && R5018 = 0 && R5019 = R5055 && R5020 = 0 && R5021 = R5055 && R5022 = 0 && R5023 = R5055 && R5024 = 0 && R5025 = R5055 && R5026 = 0 && R5027 = R5055 && R5028 = 0 && R5029 = R5055 && R5030 = 0 && R5031 = R5055 && R5032 = 0 && R5033 = R5055 && R5034 = 0 && R5035 = R5055 && R5036 = 0 && R5037 = R5055 && R5038 = 0 && R5039 = R5055 && R5040 = 0 && R5041 = R5055 && R5042 = 0 && R5043 = R5055 && R5044 = 0 && R5045 = R5055 && R5046 = 0 && R5047 = R5055 && R5048 = 0 && R5049 = R5055 && R5050 = 0 && R5051 = R5055 && R5052 = 0 && R5053 = R5055 && R5054 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3893 + -1*R3891 - R53 < 1 && -1 < R4971 && 0 < R5055 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3893 + -1*R3891 - R53 = 0 || R53 + R3893 + R3891 < 1) && (R42 + R72 + R70 = 0 || R53 + R3893 + R3891 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R3893 + -1*R3891 - R53 = 0 || R53 + R3893 + R3891 < 1) && (R46 + R77 + R74 = 0 || R53 + R3893 + R3891 < 1))) && (R4956 != 0 || R4957 = R4971 || (R17 = 0 && R4971 = 0)) && (R4958 != 0 || R4959 = R4971 || (R17 = 0 && R4971 = 0)) && (R4960 != 0 || R4961 = R4971 || (R17 = 0 && R4971 = 0)) && (R4962 != 0 || R4963 = R4971 || (R17 = 0 && R4971 = 0)) && (R4964 != 0 || R4965 = R4971 || (R17 = 0 && R4971 = 0)) && (R4966 != 0 || R4967 = R4971 || (R17 = 0 && R4971 = 0)) && (R4968 != 0 || R4969 = R4971 || (R17 = 0 && R4971 = 0)) && (R4972 != 0 || R4971 = R4973 || (R17 = 0 && R4971 = 0)) && (R4974 != 0 || R4971 = R4975 || (R17 = 0 && R4971 = 0)) && (R18 = 0 || (R4994 = 0 && R4995 = 0)) && (R18 = 0 || (R4998 = 0 && R4999 = 0)) && (R18 = 0 || (R5000 = 0 && R5001 = 0)) && (R18 = 0 || (R5002 = 0 && R5003 = 0)) && (R18 = 0 || (R5004 = 0 && R5005 = 0)) && (R18 = 0 || (R5006 = 0 && R5007 = 0)) && (R19 = 0 || (R4976 = 0 && R4977 = 0)) && (R19 = 0 || (R4978 = 0 && R4979 = 0)) && (R19 = 0 || (R4980 = 0 && R4981 = 0)) && (R19 = 0 || (R4982 = 0 && R4983 = 0)) && (R19 = 0 || (R4984 = 0 && R4985 = 0)) && (R19 = 0 || (R4986 = 0 && R4987 = 0)) && (R19 = 0 || (R4988 = 0 && R4989 = 0)) && (R19 = 0 || (R4990 = 0 && R4991 = 0)) && (R19 = 0 || (R4992 = 0 && R4993 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3893 + -1*R3891 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R3893 + -1*R3891 - R53 = 0)) && (R58 + R4743 + R4740 = 0 || (R56 + R4741 + R4738 = 0 && R57 + R4742 + R4739 = 0)) && (R58 + R4743 + R4740 = 0 || (R62 + R4954 + R4952 = 0 && R63 + R4955 + R4953 = 0)) && (R4956 = 0 || (R17 = 0 && R4971 = 0)) && (R4958 = 0 || (R17 = 0 && R4971 = 0)) && (R4960 = 0 || (R17 = 0 && R4971 = 0)) && (R4962 = 0 || (R17 = 0 && R4971 = 0)) && (R4964 = 0 || (R17 = 0 && R4971 = 0)) && (R4966 = 0 || (R17 = 0 && R4971 = 0)) && (R4968 = 0 || (R17 = 0 && R4971 = 0)) && (R4972 = 0 || (R17 = 0 && R4971 = 0)) && (R4974 = 0 || (R17 = 0 && R4971 = 0));
// End of Parikh automata intersection problem
