// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R5160, R5161, R5162, R5163, R5164, R5165, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8, R8976, R8977, R8978, R8979, R8980, R8981, R8982, R8983, R8984, R8985, R9194, R9195, R9196, R9197, R9198, R9199, R9200, R9201, R9202, R9203, R9204, R9205, R9206, R9207, R9208, R9209, R9210, R9211, R9212, R9213, R9214, R9215, R9216, R9217, R9218, R9219, R9220, R9221, R9222, R9223, R9224, R9225, R9226, R9227, R9228, R9229, R9230, R9231, R9232, R9233, R9234, R9235, R9236, R9237, R9238, R9239, R9240, R9241, R9242, R9243, R9244, R9245, R9246, R9247, R9248, R9249, R9250, R9251, R9252, R9253, R9254, R9255, R9256, R9257, R9258, R9259, R9260, R9261, R9262, R9263, R9264, R9265, R9266, R9267, R9268, R9269, R9270, R9271, R9272, R9273, R9274, R9275, R9276, R9277, R9278, R9279, R9280, R9281, R9282, R9283, R9284, R9285, R9286, R9287, R9288, R9289, R9290, R9291, R9292, R9293, R9294, R9295, R9296, R9297;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [76, 76];
  s0 -> s0 [77, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [76, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 75];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [76, 76];
  s0 -> s1 [77, 65535];
  s1 -> s1 [0, 75];
  s1 -> s2 [76, 76];
  s1 -> s1 [77, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9218 += 1, R9219 += 1 };
  s0 -> s1 [0, 65535] { R9219 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9219 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 75] { R9221 += 1 };
  s0 -> s0 [0, 65535] { R9220 += 1, R9221 += 1 };
  s0 -> s2 [76, 76] { R9221 += 1 };
  s0 -> s3 [76, 76] { R9221 += 1 };
  s0 -> s1 [88, 65535] { R9221 += 1 };
  s1 -> s1 [0, 75] { R9221 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R9221 += 1 };
  s1 -> s3 [76, 76] { R9221 += 1 };
  s1 -> s1 [88, 65535] { R9221 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 76] { R9221 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R9221 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 75] { R9223 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R9222 += 1, R9223 += 1 };
  s0 -> s2 [76, 76] { R9223 += 1, R38 += 1 };
  s0 -> s3 [76, 76] { R9223 += 1, R38 += 1 };
  s0 -> s1 [77, 65535] { R9223 += 1, R38 += 1 };
  s1 -> s1 [0, 75] { R9223 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R9223 += 1, R38 += 1 };
  s1 -> s3 [76, 76] { R9223 += 1, R38 += 1 };
  s1 -> s1 [77, 65535] { R9223 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R9223 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 75] { R9225 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9224 += 1, R9225 += 1 };
  s0 -> s2 [76, 76] { R9225 += 1, R40 += 1 };
  s0 -> s3 [76, 76] { R9225 += 1, R40 += 1 };
  s0 -> s1 [77, 65535] { R9225 += 1, R40 += 1 };
  s1 -> s1 [0, 75] { R9225 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R9225 += 1, R40 += 1 };
  s1 -> s3 [76, 76] { R9225 += 1, R40 += 1 };
  s1 -> s1 [77, 65535] { R9225 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9225 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R9227 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R9226 += 1, R9227 += 1 };
  s0 -> s2 [76, 76] { R9227 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [76, 76] { R9227 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [77, 65535] { R9227 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 75] { R9227 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R9227 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [76, 76] { R9227 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [77, 65535] { R9227 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R9227 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 75] { R9229 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9228 += 1, R9229 += 1 };
  s0 -> s2 [76, 76] { R9229 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [76, 76] { R9229 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [77, 65535] { R9229 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 75] { R9229 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R9229 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [76, 76] { R9229 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [77, 65535] { R9229 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9229 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 75] { R9231 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R9230 += 1, R9231 += 1 };
  s0 -> s2 [76, 76] { R9231 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [76, 76] { R9231 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [77, 65535] { R9231 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 75] { R9231 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R9231 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [76, 76] { R9231 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [77, 65535] { R9231 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9231 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 75] { R9233 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R9232 += 1, R9233 += 1 };
  s0 -> s2 [76, 76] { R9233 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [76, 76] { R9233 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [77, 65535] { R9233 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 75] { R9233 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R9233 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [76, 76] { R9233 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [77, 65535] { R9233 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9233 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R9235 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R9234 += 1, R9235 += 1 };
  s0 -> s2 [76, 76] { R9235 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [76, 76] { R9235 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [77, 65535] { R9235 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 75] { R9235 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R9235 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [76, 76] { R9235 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [77, 65535] { R9235 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9235 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 75] { R9255 += 1 };
  s0 -> s0 [0, 65535] { R9254 += 1, R9255 += 1 };
  s0 -> s2 [76, 76] { R9255 += 1 };
  s0 -> s1 [77, 65535] { R9255 += 1 };
  s1 -> s1 [0, 75] { R9255 += 1 };
  s1 -> s2 [76, 76] { R9255 += 1 };
  s1 -> s1 [77, 65535] { R9255 += 1 };
  s2 -> s2 [0, 65535] { R9255 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R9256 += 1, R9257 += 1 };
  s0 -> s1 [0, 65535] { R9257 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R9257 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 75] { R9259 += 1 };
  s0 -> s0 [0, 65535] { R9258 += 1, R9259 += 1 };
  s0 -> s2 [0, 65535] { R9259 += 1, R8 += 1 };
  s0 -> s3 [76, 76] { R9259 += 1 };
  s0 -> s1 [77, 65535] { R9259 += 1 };
  s1 -> s1 [0, 75] { R9259 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [76, 76] { R9259 += 1 };
  s1 -> s1 [77, 65535] { R9259 += 1 };
  s2 -> s1 [0, 75] { R9259 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9259 += 1, R8 += 1 };
  s2 -> s3 [76, 76] { R9259 += 1 };
  s2 -> s1 [77, 65535] { R9259 += 1 };
  s3 -> s3 [0, 65535] { R9259 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 75] { R9261 += 1, R9199 += 1 };
  s0 -> s2 [0, 65535] { R9261 += 1, R9198 += 1, R9199 += 1 };
  s0 -> s0 [0, 65535] { R9260 += 1, R9261 += 1 };
  s0 -> s1 [77, 65535] { R9261 += 1, R9199 += 1 };
  s1 -> s1 [0, 75] { R9261 += 1, R9199 += 1 };
  s1 -> s1 [0, 65535] { R9261 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R9261 += 1, R9199 += 1 };
  s2 -> s1 [0, 75] { R9261 += 1, R9199 += 1 };
  s2 -> s2 [0, 65535] { R9261 += 1, R9198 += 1, R9199 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R9261 += 1, R9199 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9263 += 1, R9200 += 1, R9201 += 1 };
  s0 -> s2 [0, 65535] { R9263 += 1, R9201 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R9262 += 1, R9263 += 1 };
  s1 -> s1 [0, 65535] { R9263 += 1, R9200 += 1, R9201 += 1 };
  s1 -> s2 [0, 65535] { R9263 += 1, R9201 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9263 += 1 };
  s2 -> s2 [0, 65535] { R9263 += 1, R9201 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9263 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 76] { R9265 += 1, R9203 += 1 };
  s0 -> s2 [0, 65535] { R9265 += 1, R9202 += 1, R9203 += 1 };
  s0 -> s0 [0, 65535] { R9264 += 1, R9265 += 1 };
  s0 -> s1 [87, 65535] { R9265 += 1, R9203 += 1 };
  s1 -> s1 [0, 76] { R9265 += 1, R9203 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9265 += 1 };
  s1 -> s1 [87, 65535] { R9265 += 1, R9203 += 1 };
  s2 -> s1 [0, 76] { R9265 += 1, R9203 += 1 };
  s2 -> s2 [0, 65535] { R9265 += 1, R9202 += 1, R9203 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R9265 += 1, R9203 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9267 += 1, R9204 += 1, R9205 += 1 };
  s0 -> s2 [0, 65535] { R9267 += 1, R9205 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R9266 += 1, R9267 += 1 };
  s1 -> s1 [0, 65535] { R9267 += 1, R9204 += 1, R9205 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9267 += 1, R9205 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9267 += 1 };
  s2 -> s2 [0, 65535] { R9267 += 1, R9205 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9267 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R9269 += 1, R9207 += 1 };
  s0 -> s2 [0, 65535] { R9269 += 1, R9207 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R9269 += 1, R9206 += 1, R9207 += 1 };
  s0 -> s0 [0, 65535] { R9268 += 1, R9269 += 1 };
  s0 -> s1 [88, 65535] { R9269 += 1, R9207 += 1 };
  s1 -> s1 [0, 86] { R9269 += 1, R9207 += 1 };
  s1 -> s1 [0, 65535] { R9269 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R9269 += 1, R9207 += 1 };
  s2 -> s1 [0, 86] { R9269 += 1, R9207 += 1 };
  s2 -> s2 [0, 65535] { R9269 += 1, R9207 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R9269 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R9269 += 1, R9207 += 1 };
  s3 -> s1 [0, 86] { R9269 += 1, R9207 += 1 };
  s3 -> s2 [0, 65535] { R9269 += 1, R9207 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R9269 += 1, R9206 += 1, R9207 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R9269 += 1, R9207 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9269 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R9271 += 1, R9209 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R9270 += 1, R9271 += 1 };
  s0 -> s2 [0, 65535] { R9271 += 1, R9209 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R9271 += 1, R9208 += 1, R9209 += 1 };
  s0 -> s1 [88, 65535] { R9271 += 1, R9209 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R9271 += 1, R9209 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R9271 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9271 += 1, R9209 += 1 };
  s1 -> s1 [88, 65535] { R9271 += 1, R9209 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R9271 += 1, R9209 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R9271 += 1 };
  s2 -> s2 [0, 65535] { R9271 += 1, R9209 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R9271 += 1, R9209 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R9271 += 1, R9209 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R9271 += 1, R9209 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9271 += 1, R9208 += 1, R9209 += 1 };
  s3 -> s1 [88, 65535] { R9271 += 1, R9209 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9271 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R9273 += 1, R9210 += 1, R9211 += 1 };
  s0 -> s0 [0, 65535] { R9272 += 1, R9273 += 1 };
  s0 -> s2 [0, 65535] { R9273 += 1, R9211 += 1, R5164 += 1, R5165 += 1 };
  s0 -> s3 [0, 65535] { R9273 += 1, R9211 += 1 };
  s1 -> s1 [0, 65535] { R9273 += 1, R9210 += 1, R9211 += 1 };
  s1 -> s2 [0, 65535] { R9273 += 1, R9211 += 1, R5164 += 1, R5165 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R9273 += 1, R9211 += 1 };
  s2 -> s4 [0, 65535] { R9273 += 1 };
  s2 -> s2 [0, 65535] { R9273 += 1, R9211 += 1, R5164 += 1, R5165 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9273 += 1, R9211 += 1 };
  s3 -> s4 [0, 65535] { R9273 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9273 += 1, R9211 += 1 };
  s4 -> s4 [0, 65535] { R9273 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s0 -> s0 [0, 65535] { R9274 += 1, R9275 += 1 };
  s0 -> s2 [0, 65535] { R9275 += 1, R9213 += 1, R8978 += 1, R8979 += 1 };
  s0 -> s3 [0, 65535] { R9275 += 1, R9212 += 1, R9213 += 1 };
  s0 -> s4 [88, 88] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s0 -> s1 [89, 65535] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s1 -> s1 [0, 87] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s1 -> s4 [88, 88] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s1 -> s1 [89, 65535] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s2 -> s1 [0, 87] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s2 -> s2 [0, 65535] { R9275 += 1, R9213 += 1, R8978 += 1, R8979 += 1 };
  s2 -> s4 [88, 88] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s2 -> s1 [89, 65535] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s3 -> s1 [0, 87] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s3 -> s2 [0, 65535] { R9275 += 1, R9213 += 1, R8978 += 1, R8979 += 1 };
  s3 -> s3 [0, 65535] { R9275 += 1, R9212 += 1, R9213 += 1 };
  s3 -> s4 [88, 88] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s3 -> s1 [89, 65535] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s4 -> s4 [0, 65535] { R9275 += 1, R9213 += 1, R8979 += 1 };
  s4 -> s5 [0, 65535] { R9275 += 1, R9213 += 1 };
  s4 -> s6 [0, 65535] { R9275 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R9275 += 1, R9213 += 1 };
  s5 -> s6 [0, 65535] { R9275 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9275 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R9276 += 1, R9277 += 1 };
  s0 -> s1 [0, 65535] { R9277 += 1, R9214 += 1, R9215 += 1 };
  s0 -> s2 [0, 65535] { R9277 += 1, R9215 += 1, R8984 += 1, R8985 += 1 };
  s0 -> s3 [0, 65535] { R9277 += 1, R9215 += 1, R8983 += 1, R8984 += 1 };
  s1 -> s1 [0, 65535] { R9277 += 1, R9214 += 1, R9215 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9277 += 1, R9215 += 1, R8984 += 1, R8985 += 1 };
  s1 -> s3 [0, 65535] { R9277 += 1, R9215 += 1, R8983 += 1, R8984 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9277 += 1, R9215 += 1, R8984 += 1, R8985 += 1 };
  s2 -> s5 [0, 65535] { R9277 += 1 };
  s2 -> s6 [0, 65535] { R9277 += 1, R9215 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9277 += 1, R9215 += 1, R8984 += 1, R8985 += 1 };
  s3 -> s3 [0, 65535] { R9277 += 1, R9215 += 1, R8983 += 1, R8984 += 1 };
  s3 -> s5 [0, 65535] { R9277 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9277 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9277 += 1 };
  s6 -> s6 [0, 65535] { R9277 += 1, R9215 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R9278 += 1, R9279 += 1 };
  s0 -> s1 [0, 65535] { R9279 += 1, R9216 += 1, R9217 += 1 };
  s0 -> s2 [0, 65535] { R9279 += 1, R9217 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9279 += 1, R9216 += 1, R9217 += 1 };
  s1 -> s2 [0, 65535] { R9279 += 1, R9217 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9279 += 1 };
  s2 -> s2 [0, 65535] { R9279 += 1, R9217 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9279 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R9280 += 1, R9281 += 1 };
  s0 -> s1 [0, 65535] { R9281 += 1, R9237 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R9281 += 1, R9236 += 1, R9237 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9281 += 1 };
  s1 -> s1 [0, 65535] { R9281 += 1, R9237 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9281 += 1, R9237 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R9281 += 1, R9236 += 1, R9237 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9281 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 75] { R9283 += 1, R9239 += 1 };
  s0 -> s0 [0, 65535] { R9282 += 1, R9283 += 1 };
  s0 -> s2 [0, 65535] { R9283 += 1, R9238 += 1, R9239 += 1 };
  s0 -> s3 [76, 76] { R9283 += 1, R9239 += 1 };
  s0 -> s4 [76, 76] { R9283 += 1, R9239 += 1 };
  s0 -> s5 [87, 87] { R9283 += 1, R9239 += 1 };
  s0 -> s1 [88, 65535] { R9283 += 1, R9239 += 1 };
  s1 -> s1 [0, 75] { R9283 += 1, R9239 += 1 };
  s1 -> s3 [76, 76] { R9283 += 1, R9239 += 1 };
  s1 -> s4 [76, 76] { R9283 += 1, R9239 += 1 };
  s1 -> s5 [87, 87] { R9283 += 1, R9239 += 1 };
  s1 -> s1 [88, 65535] { R9283 += 1, R9239 += 1 };
  s2 -> s1 [0, 75] { R9283 += 1, R9239 += 1 };
  s2 -> s2 [0, 65535] { R9283 += 1, R9238 += 1, R9239 += 1 };
  s2 -> s3 [76, 76] { R9283 += 1, R9239 += 1 };
  s2 -> s4 [76, 76] { R9283 += 1, R9239 += 1 };
  s2 -> s5 [87, 87] { R9283 += 1, R9239 += 1 };
  s2 -> s1 [88, 65535] { R9283 += 1, R9239 += 1 };
  s4 -> s4 [0, 76] { R9283 += 1, R9239 += 1 };
  s4 -> s8 [87, 87] { R9283 += 1, R9239 += 1 };
  s4 -> s4 [88, 65535] { R9283 += 1, R9239 += 1 };
  s5 -> s5 [0, 75] { R9283 += 1, R9239 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9283 += 1 };
  s5 -> s7 [76, 76] { R9283 += 1, R9239 += 1 };
  s5 -> s8 [76, 76] { R9283 += 1, R9239 += 1 };
  s5 -> s5 [87, 65535] { R9283 += 1, R9239 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9283 += 1 };
  s8 -> s8 [0, 76] { R9283 += 1, R9239 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9283 += 1 };
  s8 -> s8 [87, 65535] { R9283 += 1, R9239 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 75] { R9285 += 1, R9241 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R9285 += 1, R9240 += 1, R9241 += 1 };
  s0 -> s0 [0, 65535] { R9284 += 1, R9285 += 1 };
  s0 -> s3 [76, 76] { R9285 += 1, R9241 += 1, R66 += 1 };
  s0 -> s4 [76, 76] { R9285 += 1, R9241 += 1, R66 += 1 };
  s0 -> s1 [77, 65535] { R9285 += 1, R9241 += 1, R66 += 1 };
  s1 -> s1 [0, 75] { R9285 += 1, R9241 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R9285 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R9285 += 1, R9241 += 1, R66 += 1 };
  s1 -> s4 [76, 76] { R9285 += 1, R9241 += 1, R66 += 1 };
  s1 -> s1 [77, 65535] { R9285 += 1, R9241 += 1, R66 += 1 };
  s2 -> s1 [0, 75] { R9285 += 1, R9241 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R9285 += 1, R9240 += 1, R9241 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R9285 += 1, R9241 += 1, R66 += 1 };
  s2 -> s4 [76, 76] { R9285 += 1, R9241 += 1, R66 += 1 };
  s2 -> s1 [77, 65535] { R9285 += 1, R9241 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R9285 += 1, R9241 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R9285 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9285 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9285 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 75] { R9287 += 1, R9243 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R9287 += 1, R9242 += 1, R9243 += 1 };
  s0 -> s0 [0, 65535] { R9286 += 1, R9287 += 1 };
  s0 -> s3 [76, 76] { R9287 += 1, R9243 += 1, R68 += 1 };
  s0 -> s4 [76, 76] { R9287 += 1, R9243 += 1, R68 += 1 };
  s0 -> s1 [77, 65535] { R9287 += 1, R9243 += 1, R68 += 1 };
  s1 -> s1 [0, 75] { R9287 += 1, R9243 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R9287 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R9287 += 1, R9243 += 1, R68 += 1 };
  s1 -> s4 [76, 76] { R9287 += 1, R9243 += 1, R68 += 1 };
  s1 -> s1 [77, 65535] { R9287 += 1, R9243 += 1, R68 += 1 };
  s2 -> s1 [0, 75] { R9287 += 1, R9243 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R9287 += 1, R9242 += 1, R9243 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R9287 += 1, R9243 += 1, R68 += 1 };
  s2 -> s4 [76, 76] { R9287 += 1, R9243 += 1, R68 += 1 };
  s2 -> s1 [77, 65535] { R9287 += 1, R9243 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R9287 += 1, R9243 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R9287 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9287 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9287 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 75] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R9289 += 1, R9244 += 1, R9245 += 1 };
  s0 -> s0 [0, 65535] { R9288 += 1, R9289 += 1 };
  s0 -> s3 [76, 76] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [76, 76] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [77, 65535] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 75] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R9289 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [76, 76] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [77, 65535] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 75] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R9289 += 1, R9244 += 1, R9245 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [76, 76] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [77, 65535] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R9289 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9289 += 1, R9245 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9289 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9289 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 75] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s2 [0, 75] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s3 [0, 65535] { R9291 += 1, R9246 += 1, R9247 += 1 };
  s0 -> s0 [0, 65535] { R9290 += 1, R9291 += 1 };
  s0 -> s4 [76, 76] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s5 [76, 76] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s6 [76, 76] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s7 [76, 76] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s1 [77, 65535] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s2 [77, 65535] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [0, 75] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s2 [0, 75] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s4 [76, 76] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s5 [76, 76] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s6 [76, 76] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s7 [76, 76] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [77, 65535] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s2 [77, 65535] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [0, 75] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R9291 += 1 };
  s2 -> s6 [76, 76] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s7 [76, 76] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [77, 65535] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s1 [0, 75] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s2 [0, 75] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s3 [0, 65535] { R9291 += 1, R9246 += 1, R9247 += 1 };
  s3 -> s4 [76, 76] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s5 [76, 76] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s6 [76, 76] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s7 [76, 76] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s1 [77, 65535] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s2 [77, 65535] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s4 -> s4 [0, 65535] { R9291 += 1, R9247 += 1, R5160 += 1, R5161 += 1 };
  s4 -> s7 [0, 65535] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R9291 += 1 };
  s7 -> s8 [0, 65535] { R9291 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R9291 += 1, R9247 += 1, R5161 += 1, R5162 += 1 };
  s8 -> s8 [0, 65535] { R9291 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 75] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s0 -> s2 [0, 65535] { R9293 += 1, R9248 += 1, R9249 += 1 };
  s0 -> s0 [0, 65535] { R9292 += 1, R9293 += 1 };
  s0 -> s3 [76, 76] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s0 -> s4 [76, 76] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s0 -> s1 [77, 65535] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s1 -> s1 [0, 75] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s1 -> s1 [0, 65535] { R9293 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s1 -> s4 [76, 76] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s1 -> s1 [77, 65535] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s2 -> s1 [0, 75] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s2 -> s2 [0, 65535] { R9293 += 1, R9248 += 1, R9249 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s2 -> s4 [76, 76] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s2 -> s1 [77, 65535] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9293 += 1, R9249 += 1, R8976 += 1, R8977 += 1 };
  s3 -> s6 [0, 65535] { R9293 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9293 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9293 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 75] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s0 -> s2 [0, 65535] { R9295 += 1, R9250 += 1, R9251 += 1 };
  s0 -> s0 [0, 65535] { R9294 += 1, R9295 += 1 };
  s0 -> s3 [76, 76] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s0 -> s4 [76, 76] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s0 -> s1 [77, 65535] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s1 -> s1 [0, 75] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9295 += 1 };
  s1 -> s3 [76, 76] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s1 -> s4 [76, 76] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s1 -> s1 [77, 65535] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s2 -> s1 [0, 75] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9295 += 1, R9250 += 1, R9251 += 1 };
  s2 -> s3 [76, 76] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s2 -> s4 [76, 76] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s2 -> s1 [77, 65535] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9295 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9295 += 1 };
  s4 -> s4 [0, 65535] { R9295 += 1, R9251 += 1, R8980 += 1, R8981 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9295 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 75] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s0 -> s2 [0, 75] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s0 -> s3 [0, 65535] { R9297 += 1, R9252 += 1, R9253 += 1 };
  s0 -> s0 [0, 65535] { R9296 += 1, R9297 += 1 };
  s0 -> s4 [76, 76] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s0 -> s5 [76, 76] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s0 -> s6 [76, 76] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s0 -> s7 [76, 76] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s0 -> s2 [77, 86] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s0 -> s1 [77, 65535] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s0 -> s8 [87, 87] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s0 -> s2 [89, 65535] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s1 -> s1 [0, 75] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s1 -> s2 [0, 75] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s1 -> s4 [76, 76] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s1 -> s5 [76, 76] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s1 -> s6 [76, 76] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s1 -> s7 [76, 76] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s1 -> s2 [77, 86] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s1 -> s1 [77, 65535] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s1 -> s8 [87, 87] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s1 -> s2 [89, 65535] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s2 -> s2 [0, 75] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s2 -> s6 [76, 76] { R9297 += 1, R9253 += 1 };
  s2 -> s7 [76, 76] { R9297 += 1, R9253 += 1 };
  s2 -> s2 [77, 86] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s2 -> s2 [77, 65535] { R9297 += 1, R9253 += 1 };
  s2 -> s8 [87, 87] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s2 -> s2 [89, 65535] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s3 -> s1 [0, 75] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s3 -> s2 [0, 75] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s3 -> s3 [0, 65535] { R9297 += 1, R9252 += 1, R9253 += 1 };
  s3 -> s4 [76, 76] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s3 -> s5 [76, 76] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s3 -> s6 [76, 76] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s3 -> s7 [76, 76] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s3 -> s2 [77, 86] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s3 -> s1 [77, 65535] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s3 -> s8 [87, 87] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s3 -> s2 [89, 65535] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s4 -> s6 [0, 86] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s4 -> s4 [0, 65535] { R9297 += 1, R9253 += 1, R9194 += 1, R9195 += 1 };
  s4 -> s10 [87, 87] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s4 -> s6 [89, 65535] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s6 -> s6 [0, 86] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s6 -> s6 [0, 65535] { R9297 += 1, R9253 += 1 };
  s6 -> s10 [87, 87] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s6 -> s6 [89, 65535] { R9297 += 1, R9253 += 1, R9195 += 1 };
  s8 -> s8 [0, 75] { R9297 += 1, R9253 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R9297 += 1 };
  s8 -> s10 [76, 76] { R9297 += 1, R9253 += 1 };
  s8 -> s11 [76, 76] { R9297 += 1, R9253 += 1 };
  s8 -> s8 [77, 65535] { R9297 += 1, R9253 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9297 += 1, R9253 += 1 };
  s10 -> s12 [0, 65535] { R9297 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R9297 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9297 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
constraint R1 = R9213 && R2 = R9297 && R20 - R9297 = -1 && R21 = R9297 && R22 - R9297 = -1 && R23 = R9297 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8979 + -1*R8977 - R53 = 0 && R52 + R8978 + R8976 = 0 && R9212 = 0 && R9238 = 0 && R9239 = 0 && R9246 = 0 && R9247 = 0 && R9252 = 0 && R9253 = 0 && R9254 = 0 && R9255 = R9297 && R9256 = 0 && R9257 = R9297 && R9258 = 0 && R9259 = R9297 && R9260 = 0 && R9261 = R9297 && R9262 = 0 && R9263 = R9297 && R9264 = 0 && R9265 = R9297 && R9266 = 0 && R9267 = R9297 && R9268 = 0 && R9269 = R9297 && R9270 = 0 && R9271 = R9297 && R9272 = 0 && R9273 = R9297 && R9274 = 0 && R9275 = R9297 && R9276 = 0 && R9277 = R9297 && R9278 = 0 && R9279 = R9297 && R9280 = 0 && R9281 = R9297 && R9282 = 0 && R9283 = R9297 && R9284 = 0 && R9285 = R9297 && R9286 = 0 && R9287 = R9297 && R9288 = 0 && R9289 = R9297 && R9290 = 0 && R9291 = R9297 && R9292 = 0 && R9293 = R9297 && R9294 = 0 && R9295 = R9297 && R9296 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8979 + -1*R8977 - R53 < 1 && -1 < R9213 && 0 < R9297 && (R48 + R5165 + R5162 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8979 + -1*R8977 - R53 = 0 || R53 + R8979 + R8977 < 1) && (R42 + R72 + R70 = 0 || R53 + R8979 + R8977 < 1))) && (R48 + R5165 + R5162 != 0 || ((R46 + R5163 + R5160 != 0 || R47 + R5164 + R5161 + -1*R8979 + -1*R8977 - R53 = 0 || R53 + R8979 + R8977 < 1) && (R46 + R5163 + R5160 = 0 || R53 + R8979 + R8977 < 1))) && (R9198 != 0 || R9199 = R9213 || (R17 = 0 && R9213 = 0)) && (R9200 != 0 || R9201 = R9213 || (R17 = 0 && R9213 = 0)) && (R9202 != 0 || R9203 = R9213 || (R17 = 0 && R9213 = 0)) && (R9204 != 0 || R9205 = R9213 || (R17 = 0 && R9213 = 0)) && (R9206 != 0 || R9207 = R9213 || (R17 = 0 && R9213 = 0)) && (R9208 != 0 || R9209 = R9213 || (R17 = 0 && R9213 = 0)) && (R9210 != 0 || R9211 = R9213 || (R17 = 0 && R9213 = 0)) && (R9214 != 0 || R9213 = R9215 || (R17 = 0 && R9213 = 0)) && (R9216 != 0 || R9213 = R9217 || (R17 = 0 && R9213 = 0)) && (R18 = 0 || (R9236 = 0 && R9237 = 0)) && (R18 = 0 || (R9240 = 0 && R9241 = 0)) && (R18 = 0 || (R9242 = 0 && R9243 = 0)) && (R18 = 0 || (R9244 = 0 && R9245 = 0)) && (R18 = 0 || (R9248 = 0 && R9249 = 0)) && (R18 = 0 || (R9250 = 0 && R9251 = 0)) && (R19 = 0 || (R9218 = 0 && R9219 = 0)) && (R19 = 0 || (R9220 = 0 && R9221 = 0)) && (R19 = 0 || (R9222 = 0 && R9223 = 0)) && (R19 = 0 || (R9224 = 0 && R9225 = 0)) && (R19 = 0 || (R9226 = 0 && R9227 = 0)) && (R19 = 0 || (R9228 = 0 && R9229 = 0)) && (R19 = 0 || (R9230 = 0 && R9231 = 0)) && (R19 = 0 || (R9232 = 0 && R9233 = 0)) && (R19 = 0 || (R9234 = 0 && R9235 = 0)) && (R48 + R5165 + R5162 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8979 + -1*R8977 - R53 = 0)) && (R48 + R5165 + R5162 = 0 || (R46 + R5163 + R5160 = 0 && R47 + R5164 + R5161 + -1*R8979 + -1*R8977 - R53 = 0)) && (R58 + R8985 + R8982 = 0 || (R56 + R8983 + R8980 = 0 && R57 + R8984 + R8981 = 0)) && (R58 + R8985 + R8982 = 0 || (R62 + R9196 + R9194 = 0 && R63 + R9197 + R9195 = 0)) && (R9198 = 0 || (R17 = 0 && R9213 = 0)) && (R9200 = 0 || (R17 = 0 && R9213 = 0)) && (R9202 = 0 || (R17 = 0 && R9213 = 0)) && (R9204 = 0 || (R17 = 0 && R9213 = 0)) && (R9206 = 0 || (R17 = 0 && R9213 = 0)) && (R9208 = 0 || (R17 = 0 && R9213 = 0)) && (R9210 = 0 || (R17 = 0 && R9213 = 0)) && (R9214 = 0 || (R17 = 0 && R9213 = 0)) && (R9216 = 0 || (R17 = 0 && R9213 = 0));
// End of Parikh automata intersection problem
