// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R15332, R15333, R15334, R15335, R15336, R15337, R15338, R15339, R15340, R15341, R17, R17882, R17883, R17884, R17885, R17886, R17887, R17888, R17889, R17890, R17891, R17996, R17997, R17998, R17999, R18, R18000, R18001, R18002, R18003, R18004, R18005, R18006, R18007, R18008, R18009, R18010, R18011, R18012, R18013, R18014, R18015, R18016, R18017, R18018, R18019, R18020, R18021, R18022, R18023, R18024, R18025, R18026, R18027, R18028, R18029, R18030, R18031, R18032, R18033, R18034, R18035, R18036, R18037, R18038, R18039, R18040, R18041, R18042, R18043, R18044, R18045, R18046, R18047, R18048, R18049, R18050, R18051, R18052, R18053, R18054, R18055, R18056, R18057, R18058, R18059, R18060, R18061, R18062, R18063, R18064, R18065, R18066, R18067, R18068, R18069, R18070, R18071, R18072, R18073, R18074, R18075, R18076, R18077, R18078, R18079, R18080, R18081, R18082, R18083, R18084, R18085, R18086, R18087, R18088, R18089, R18090, R18091, R18092, R18093, R18094, R18095, R18096, R18097, R18098, R18099, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [76, 76];
  s0 -> s0 [77, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [76, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 75];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [76, 76];
  s0 -> s1 [77, 65535];
  s1 -> s1 [0, 75];
  s1 -> s2 [76, 76];
  s1 -> s1 [77, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R18020 += 1, R18021 += 1 };
  s0 -> s1 [0, 65535] { R18021 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R18021 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 75] { R18023 += 1 };
  s0 -> s0 [0, 65535] { R18022 += 1, R18023 += 1 };
  s0 -> s2 [76, 76] { R18023 += 1 };
  s0 -> s3 [76, 76] { R18023 += 1 };
  s0 -> s1 [88, 65535] { R18023 += 1 };
  s1 -> s1 [0, 75] { R18023 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18023 += 1 };
  s1 -> s3 [76, 76] { R18023 += 1 };
  s1 -> s1 [88, 65535] { R18023 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 76] { R18023 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R18023 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 75] { R18025 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R18024 += 1, R18025 += 1 };
  s0 -> s2 [76, 76] { R18025 += 1, R38 += 1 };
  s0 -> s3 [76, 76] { R18025 += 1, R38 += 1 };
  s0 -> s1 [77, 65535] { R18025 += 1, R38 += 1 };
  s1 -> s1 [0, 75] { R18025 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18025 += 1, R38 += 1 };
  s1 -> s3 [76, 76] { R18025 += 1, R38 += 1 };
  s1 -> s1 [77, 65535] { R18025 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18025 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 75] { R18027 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R18026 += 1, R18027 += 1 };
  s0 -> s2 [76, 76] { R18027 += 1, R40 += 1 };
  s0 -> s3 [76, 76] { R18027 += 1, R40 += 1 };
  s0 -> s1 [77, 65535] { R18027 += 1, R40 += 1 };
  s1 -> s1 [0, 75] { R18027 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18027 += 1, R40 += 1 };
  s1 -> s3 [76, 76] { R18027 += 1, R40 += 1 };
  s1 -> s1 [77, 65535] { R18027 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R18027 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R18029 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R18028 += 1, R18029 += 1 };
  s0 -> s2 [76, 76] { R18029 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [76, 76] { R18029 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [77, 65535] { R18029 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 75] { R18029 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18029 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [76, 76] { R18029 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [77, 65535] { R18029 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R18029 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 75] { R18031 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R18030 += 1, R18031 += 1 };
  s0 -> s2 [76, 76] { R18031 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [76, 76] { R18031 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [77, 65535] { R18031 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 75] { R18031 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18031 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [76, 76] { R18031 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [77, 65535] { R18031 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R18031 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 75] { R18033 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R18032 += 1, R18033 += 1 };
  s0 -> s2 [76, 76] { R18033 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [76, 76] { R18033 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [77, 65535] { R18033 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 75] { R18033 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18033 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [76, 76] { R18033 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [77, 65535] { R18033 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R18033 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 75] { R18035 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R18034 += 1, R18035 += 1 };
  s0 -> s2 [76, 76] { R18035 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [76, 76] { R18035 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [77, 65535] { R18035 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 75] { R18035 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18035 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [76, 76] { R18035 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [77, 65535] { R18035 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R18035 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R18037 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R18036 += 1, R18037 += 1 };
  s0 -> s2 [76, 76] { R18037 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [76, 76] { R18037 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [77, 65535] { R18037 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 75] { R18037 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18037 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [76, 76] { R18037 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [77, 65535] { R18037 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18037 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 75] { R18057 += 1 };
  s0 -> s0 [0, 65535] { R18056 += 1, R18057 += 1 };
  s0 -> s2 [76, 76] { R18057 += 1 };
  s0 -> s1 [77, 65535] { R18057 += 1 };
  s1 -> s1 [0, 75] { R18057 += 1 };
  s1 -> s2 [76, 76] { R18057 += 1 };
  s1 -> s1 [77, 65535] { R18057 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18057 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R18058 += 1, R18059 += 1 };
  s0 -> s1 [0, 65535] { R18059 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18059 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 75] { R18061 += 1 };
  s0 -> s2 [0, 65535] { R18061 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R18060 += 1, R18061 += 1 };
  s0 -> s3 [76, 76] { R18061 += 1 };
  s0 -> s1 [77, 65535] { R18061 += 1 };
  s1 -> s1 [0, 75] { R18061 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [76, 76] { R18061 += 1 };
  s1 -> s1 [77, 65535] { R18061 += 1 };
  s2 -> s1 [0, 75] { R18061 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18061 += 1, R8 += 1 };
  s2 -> s3 [76, 76] { R18061 += 1 };
  s2 -> s1 [77, 65535] { R18061 += 1 };
  s3 -> s3 [0, 65535] { R18061 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 75] { R18063 += 1, R18001 += 1 };
  s0 -> s0 [0, 65535] { R18062 += 1, R18063 += 1 };
  s0 -> s2 [0, 65535] { R18063 += 1, R18000 += 1, R18001 += 1 };
  s0 -> s1 [77, 65535] { R18063 += 1, R18001 += 1 };
  s1 -> s1 [0, 75] { R18063 += 1, R18001 += 1 };
  s1 -> s1 [0, 65535] { R18063 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R18063 += 1, R18001 += 1 };
  s2 -> s1 [0, 75] { R18063 += 1, R18001 += 1 };
  s2 -> s2 [0, 65535] { R18063 += 1, R18000 += 1, R18001 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R18063 += 1, R18001 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18065 += 1, R18003 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R18064 += 1, R18065 += 1 };
  s0 -> s2 [0, 65535] { R18065 += 1, R18002 += 1, R18003 += 1 };
  s1 -> s4 [0, 65535] { R18065 += 1 };
  s1 -> s1 [0, 65535] { R18065 += 1, R18003 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18065 += 1, R18003 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18065 += 1, R18002 += 1, R18003 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18065 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 76] { R18067 += 1, R18005 += 1 };
  s0 -> s2 [0, 65535] { R18067 += 1, R18004 += 1, R18005 += 1 };
  s0 -> s0 [0, 65535] { R18066 += 1, R18067 += 1 };
  s0 -> s1 [87, 65535] { R18067 += 1, R18005 += 1 };
  s1 -> s1 [0, 76] { R18067 += 1, R18005 += 1 };
  s1 -> s1 [0, 65535] { R18067 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R18067 += 1, R18005 += 1 };
  s2 -> s1 [0, 76] { R18067 += 1, R18005 += 1 };
  s2 -> s2 [0, 65535] { R18067 += 1, R18004 += 1, R18005 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R18067 += 1, R18005 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R18068 += 1, R18069 += 1 };
  s0 -> s1 [0, 65535] { R18069 += 1, R18007 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R18069 += 1, R18006 += 1, R18007 += 1 };
  s1 -> s4 [0, 65535] { R18069 += 1 };
  s1 -> s1 [0, 65535] { R18069 += 1, R18007 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18069 += 1, R18007 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18069 += 1, R18006 += 1, R18007 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18069 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R18071 += 1, R18009 += 1 };
  s0 -> s2 [0, 65535] { R18071 += 1, R18008 += 1, R18009 += 1 };
  s0 -> s3 [0, 65535] { R18071 += 1, R18009 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R18070 += 1, R18071 += 1 };
  s0 -> s1 [88, 65535] { R18071 += 1, R18009 += 1 };
  s1 -> s1 [0, 86] { R18071 += 1, R18009 += 1 };
  s1 -> s1 [0, 65535] { R18071 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R18071 += 1, R18009 += 1 };
  s2 -> s1 [0, 86] { R18071 += 1, R18009 += 1 };
  s2 -> s2 [0, 65535] { R18071 += 1, R18008 += 1, R18009 += 1 };
  s2 -> s3 [0, 65535] { R18071 += 1, R18009 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R18071 += 1, R18009 += 1 };
  s3 -> s1 [0, 86] { R18071 += 1, R18009 += 1 };
  s3 -> s3 [0, 65535] { R18071 += 1, R18009 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18071 += 1 };
  s3 -> s1 [88, 65535] { R18071 += 1, R18009 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18071 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R18073 += 1, R18011 += 1, R15335 += 1 };
  s0 -> s1 [0, 65535] { R18073 += 1, R18011 += 1 };
  s0 -> s0 [0, 65535] { R18072 += 1, R18073 += 1 };
  s0 -> s2 [0, 65535] { R18073 += 1, R18010 += 1, R18011 += 1 };
  s0 -> s1 [88, 65535] { R18073 += 1, R18011 += 1, R15335 += 1 };
  s1 -> s1 [0, 86] { R18073 += 1, R18011 += 1, R15335 += 1 };
  s1 -> s1 [0, 65535] { R18073 += 1, R18011 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18073 += 1 };
  s1 -> s1 [88, 65535] { R18073 += 1, R18011 += 1, R15335 += 1 };
  s2 -> s1 [0, 86] { R18073 += 1, R18011 += 1, R15335 += 1 };
  s2 -> s1 [0, 65535] { R18073 += 1, R18011 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18073 += 1, R18010 += 1, R18011 += 1 };
  s2 -> s1 [88, 65535] { R18073 += 1, R18011 += 1, R15335 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18073 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R18075 += 1, R18012 += 1, R18013 += 1 };
  s0 -> s2 [0, 65535] { R18075 += 1, R18013 += 1, R15340 += 1, R15341 += 1 };
  s0 -> s0 [0, 65535] { R18074 += 1, R18075 += 1 };
  s0 -> s3 [0, 65535] { R18075 += 1, R18013 += 1, R15339 += 1, R15340 += 1 };
  s1 -> s1 [0, 65535] { R18075 += 1, R18012 += 1, R18013 += 1 };
  s1 -> s2 [0, 65535] { R18075 += 1, R18013 += 1, R15340 += 1, R15341 += 1 };
  s1 -> s3 [0, 65535] { R18075 += 1, R18013 += 1, R15339 += 1, R15340 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18075 += 1, R18013 += 1 };
  s2 -> s2 [0, 65535] { R18075 += 1, R18013 += 1, R15340 += 1, R15341 += 1 };
  s2 -> s4 [0, 65535] { R18075 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R18075 += 1, R18013 += 1, R15340 += 1, R15341 += 1 };
  s3 -> s4 [0, 65535] { R18075 += 1 };
  s3 -> s3 [0, 65535] { R18075 += 1, R18013 += 1, R15339 += 1, R15340 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18075 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18075 += 1, R18013 += 1 };
  s6 -> s4 [0, 65535] { R18075 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s0 -> s0 [0, 65535] { R18076 += 1, R18077 += 1 };
  s0 -> s2 [0, 65535] { R18077 += 1, R18014 += 1, R18015 += 1 };
  s0 -> s3 [88, 88] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s0 -> s1 [89, 65535] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s1 -> s1 [0, 87] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s1 -> s3 [88, 88] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s1 -> s1 [89, 65535] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s2 -> s1 [0, 87] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s2 -> s2 [0, 65535] { R18077 += 1, R18014 += 1, R18015 += 1 };
  s2 -> s3 [88, 88] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s2 -> s1 [89, 65535] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s3 -> s4 [0, 65535] { R18077 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18077 += 1, R18015 += 1, R17885 += 1 };
  s3 -> s6 [0, 65535] { R18077 += 1, R18015 += 1 };
  s4 -> s4 [0, 65535] { R18077 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18077 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18077 += 1, R18015 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R18079 += 1, R18016 += 1, R18017 += 1 };
  s0 -> s2 [0, 65535] { R18079 += 1, R18017 += 1, R17890 += 1, R17891 += 1 };
  s0 -> s0 [0, 65535] { R18078 += 1, R18079 += 1 };
  s0 -> s3 [0, 65535] { R18079 += 1, R18017 += 1, R17889 += 1, R17890 += 1 };
  s1 -> s1 [0, 65535] { R18079 += 1, R18016 += 1, R18017 += 1 };
  s1 -> s2 [0, 65535] { R18079 += 1, R18017 += 1, R17890 += 1, R17891 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R18079 += 1, R18017 += 1, R17889 += 1, R17890 += 1 };
  s2 -> s2 [0, 65535] { R18079 += 1, R18017 += 1, R17890 += 1, R17891 += 1 };
  s2 -> s4 [0, 65535] { R18079 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18079 += 1, R18017 += 1 };
  s3 -> s2 [0, 65535] { R18079 += 1, R18017 += 1, R17890 += 1, R17891 += 1 };
  s3 -> s4 [0, 65535] { R18079 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18079 += 1, R18017 += 1, R17889 += 1, R17890 += 1 };
  s4 -> s4 [0, 65535] { R18079 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18079 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18079 += 1, R18017 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s0 -> s0 [0, 65535] { R18080 += 1, R18081 += 1 };
  s0 -> s2 [0, 65535] { R18081 += 1, R18018 += 1, R18019 += 1 };
  s0 -> s1 [0, 65535] { R18081 += 1, R18019 += 1 };
  s0 -> s3 [87, 87] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s0 -> s4 [87, 87] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s0 -> s1 [89, 65535] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s1 -> s1 [0, 86] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s1 -> s5 [0, 65535] { R18081 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18081 += 1, R18019 += 1 };
  s1 -> s3 [87, 87] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s1 -> s4 [87, 87] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s1 -> s1 [89, 65535] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s2 -> s1 [0, 86] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R18081 += 1, R18018 += 1, R18019 += 1 };
  s2 -> s1 [0, 65535] { R18081 += 1, R18019 += 1 };
  s2 -> s3 [87, 87] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s2 -> s4 [87, 87] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s2 -> s1 [89, 65535] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s3 -> s3 [0, 87] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s3 -> s5 [0, 65535] { R18081 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18081 += 1, R18019 += 1 };
  s3 -> s3 [89, 65535] { R18081 += 1, R18019 += 1, R17999 += 1 };
  s4 -> s5 [0, 65535] { R18081 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18081 += 1, R18019 += 1 };
  s5 -> s5 [0, 65535] { R18081 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R18083 += 1, R18039 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R18082 += 1, R18083 += 1 };
  s0 -> s2 [0, 65535] { R18083 += 1, R18038 += 1, R18039 += 1 };
  s1 -> s4 [0, 65535] { R18083 += 1 };
  s1 -> s1 [0, 65535] { R18083 += 1, R18039 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18083 += 1, R18039 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18083 += 1, R18038 += 1, R18039 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18083 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 75] { R18085 += 1, R18041 += 1 };
  s0 -> s0 [0, 65535] { R18084 += 1, R18085 += 1 };
  s0 -> s2 [0, 65535] { R18085 += 1, R18040 += 1, R18041 += 1 };
  s0 -> s3 [76, 76] { R18085 += 1, R18041 += 1 };
  s0 -> s4 [76, 76] { R18085 += 1, R18041 += 1 };
  s0 -> s5 [87, 87] { R18085 += 1, R18041 += 1 };
  s0 -> s1 [88, 65535] { R18085 += 1, R18041 += 1 };
  s1 -> s1 [0, 75] { R18085 += 1, R18041 += 1 };
  s1 -> s3 [76, 76] { R18085 += 1, R18041 += 1 };
  s1 -> s4 [76, 76] { R18085 += 1, R18041 += 1 };
  s1 -> s5 [87, 87] { R18085 += 1, R18041 += 1 };
  s1 -> s1 [88, 65535] { R18085 += 1, R18041 += 1 };
  s2 -> s1 [0, 75] { R18085 += 1, R18041 += 1 };
  s2 -> s2 [0, 65535] { R18085 += 1, R18040 += 1, R18041 += 1 };
  s2 -> s3 [76, 76] { R18085 += 1, R18041 += 1 };
  s2 -> s4 [76, 76] { R18085 += 1, R18041 += 1 };
  s2 -> s5 [87, 87] { R18085 += 1, R18041 += 1 };
  s2 -> s1 [88, 65535] { R18085 += 1, R18041 += 1 };
  s3 -> s3 [0, 76] { R18085 += 1, R18041 += 1 };
  s3 -> s7 [87, 87] { R18085 += 1, R18041 += 1 };
  s3 -> s3 [88, 65535] { R18085 += 1, R18041 += 1 };
  s5 -> s5 [0, 75] { R18085 += 1, R18041 += 1 };
  s5 -> s5 [0, 65535] { R18085 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [76, 76] { R18085 += 1, R18041 += 1 };
  s5 -> s8 [76, 76] { R18085 += 1, R18041 += 1 };
  s5 -> s5 [87, 65535] { R18085 += 1, R18041 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 76] { R18085 += 1, R18041 += 1 };
  s7 -> s7 [0, 65535] { R18085 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R18085 += 1, R18041 += 1 };
  s8 -> s8 [0, 65535] { R18085 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 75] { R18087 += 1, R18043 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R18087 += 1, R18042 += 1, R18043 += 1 };
  s0 -> s0 [0, 65535] { R18086 += 1, R18087 += 1 };
  s0 -> s3 [76, 76] { R18087 += 1, R18043 += 1, R66 += 1 };
  s0 -> s4 [76, 76] { R18087 += 1, R18043 += 1, R66 += 1 };
  s0 -> s1 [77, 65535] { R18087 += 1, R18043 += 1, R66 += 1 };
  s1 -> s1 [0, 75] { R18087 += 1, R18043 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R18087 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [76, 76] { R18087 += 1, R18043 += 1, R66 += 1 };
  s1 -> s4 [76, 76] { R18087 += 1, R18043 += 1, R66 += 1 };
  s1 -> s1 [77, 65535] { R18087 += 1, R18043 += 1, R66 += 1 };
  s2 -> s1 [0, 75] { R18087 += 1, R18043 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R18087 += 1, R18042 += 1, R18043 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [76, 76] { R18087 += 1, R18043 += 1, R66 += 1 };
  s2 -> s4 [76, 76] { R18087 += 1, R18043 += 1, R66 += 1 };
  s2 -> s1 [77, 65535] { R18087 += 1, R18043 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R18087 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R18087 += 1 };
  s4 -> s4 [0, 65535] { R18087 += 1, R18043 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18087 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 75] { R18089 += 1, R18045 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R18089 += 1, R18044 += 1, R18045 += 1 };
  s0 -> s0 [0, 65535] { R18088 += 1, R18089 += 1 };
  s0 -> s3 [76, 76] { R18089 += 1, R18045 += 1, R68 += 1 };
  s0 -> s4 [76, 76] { R18089 += 1, R18045 += 1, R68 += 1 };
  s0 -> s1 [77, 65535] { R18089 += 1, R18045 += 1, R68 += 1 };
  s1 -> s1 [0, 75] { R18089 += 1, R18045 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18089 += 1 };
  s1 -> s3 [76, 76] { R18089 += 1, R18045 += 1, R68 += 1 };
  s1 -> s4 [76, 76] { R18089 += 1, R18045 += 1, R68 += 1 };
  s1 -> s1 [77, 65535] { R18089 += 1, R18045 += 1, R68 += 1 };
  s2 -> s1 [0, 75] { R18089 += 1, R18045 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R18089 += 1, R18044 += 1, R18045 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R18089 += 1, R18045 += 1, R68 += 1 };
  s2 -> s4 [76, 76] { R18089 += 1, R18045 += 1, R68 += 1 };
  s2 -> s1 [77, 65535] { R18089 += 1, R18045 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R18089 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18089 += 1, R18045 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R18089 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18089 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 75] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s0 -> s2 [0, 75] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s0 [0, 65535] { R18090 += 1, R18091 += 1 };
  s0 -> s3 [0, 65535] { R18091 += 1, R18046 += 1, R18047 += 1 };
  s0 -> s4 [76, 76] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s5 [76, 76] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s0 -> s6 [76, 76] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s7 [76, 76] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s0 -> s1 [77, 86] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s0 -> s2 [77, 65535] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s1 [88, 65535] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s1 -> s1 [0, 75] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s1 -> s1 [0, 65535] { R18091 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [76, 76] { R18091 += 1, R18047 += 1 };
  s1 -> s7 [76, 76] { R18091 += 1, R18047 += 1 };
  s1 -> s1 [77, 86] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s1 -> s1 [77, 65535] { R18091 += 1, R18047 += 1 };
  s1 -> s1 [88, 65535] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s2 -> s1 [0, 75] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s2 -> s2 [0, 75] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s4 [76, 76] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s5 [76, 76] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s2 -> s6 [76, 76] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s7 [76, 76] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s2 -> s1 [77, 86] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s2 -> s2 [77, 65535] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s1 [88, 65535] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s3 -> s1 [0, 75] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s3 -> s2 [0, 75] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s3 [0, 65535] { R18091 += 1, R18046 += 1, R18047 += 1 };
  s3 -> s4 [76, 76] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s5 [76, 76] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s3 -> s6 [76, 76] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s7 [76, 76] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s3 -> s1 [77, 86] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s3 -> s2 [77, 65535] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s1 [88, 65535] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s5 -> s5 [0, 86] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R18091 += 1, R18047 += 1 };
  s5 -> s9 [0, 65535] { R18091 += 1 };
  s5 -> s5 [88, 65535] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s6 -> s5 [0, 86] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s6 -> s6 [0, 65535] { R18091 += 1, R18047 += 1, R15332 += 1, R15333 += 1 };
  s6 -> s5 [88, 65535] { R18091 += 1, R18047 += 1, R15333 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R18091 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18091 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 75] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s2 [0, 65535] { R18093 += 1, R18048 += 1, R18049 += 1 };
  s0 -> s0 [0, 65535] { R18092 += 1, R18093 += 1 };
  s0 -> s3 [76, 76] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s4 [76, 76] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s1 [77, 65535] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [0, 75] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18093 += 1 };
  s1 -> s3 [76, 76] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s4 [76, 76] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [77, 65535] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [0, 75] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18093 += 1, R18048 += 1, R18049 += 1 };
  s2 -> s3 [76, 76] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s4 [76, 76] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [77, 65535] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18093 += 1, R18049 += 1, R15336 += 1, R15337 += 1 };
  s3 -> s6 [0, 65535] { R18093 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18093 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18093 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 75] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s0 -> s2 [0, 75] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s0 [0, 65535] { R18094 += 1, R18095 += 1 };
  s0 -> s3 [0, 65535] { R18095 += 1, R18050 += 1, R18051 += 1 };
  s0 -> s4 [76, 76] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s5 [76, 76] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s6 [76, 76] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s0 -> s7 [76, 76] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s0 -> s1 [77, 87] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s0 -> s2 [77, 65535] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s1 [89, 65535] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s1 -> s1 [0, 75] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s1 -> s1 [0, 65535] { R18095 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [76, 76] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s1 -> s7 [76, 76] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s1 -> s1 [77, 87] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s1 -> s1 [89, 65535] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s2 -> s1 [0, 75] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s2 -> s2 [0, 75] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s4 [76, 76] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s5 [76, 76] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s6 [76, 76] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s2 -> s7 [76, 76] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s2 -> s1 [77, 87] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s2 -> s2 [77, 65535] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s1 [89, 65535] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s3 -> s1 [0, 75] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s3 -> s2 [0, 75] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s3 [0, 65535] { R18095 += 1, R18050 += 1, R18051 += 1 };
  s3 -> s4 [76, 76] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s5 [76, 76] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s6 [76, 76] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s3 -> s7 [76, 76] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s3 -> s1 [77, 87] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s3 -> s2 [77, 65535] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s1 [89, 65535] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s4 -> s6 [0, 87] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s4 -> s4 [0, 65535] { R18095 += 1, R18051 += 1, R17882 += 1, R17883 += 1 };
  s4 -> s6 [89, 65535] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s6 -> s6 [0, 87] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R18095 += 1 };
  s6 -> s6 [89, 65535] { R18095 += 1, R18051 += 1, R17883 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R18095 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s6, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 75] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s0 -> s2 [0, 65535] { R18097 += 1, R18052 += 1, R18053 += 1 };
  s0 -> s0 [0, 65535] { R18096 += 1, R18097 += 1 };
  s0 -> s3 [76, 76] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s0 -> s4 [76, 76] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s0 -> s1 [77, 65535] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s1 -> s1 [0, 75] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18097 += 1 };
  s1 -> s3 [76, 76] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s1 -> s4 [76, 76] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s1 -> s1 [77, 65535] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s2 -> s1 [0, 75] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s2 -> s2 [0, 65535] { R18097 += 1, R18052 += 1, R18053 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s2 -> s4 [76, 76] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s2 -> s1 [77, 65535] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s3 -> s3 [0, 65535] { R18097 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18097 += 1 };
  s4 -> s4 [0, 65535] { R18097 += 1, R18053 += 1, R17886 += 1, R17887 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18097 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 75] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s0 -> s2 [0, 75] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s0 -> s3 [0, 65535] { R18099 += 1, R18054 += 1, R18055 += 1 };
  s0 -> s0 [0, 65535] { R18098 += 1, R18099 += 1 };
  s0 -> s4 [76, 76] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s0 -> s5 [76, 76] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s0 -> s6 [76, 76] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s0 -> s7 [76, 76] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s0 -> s2 [77, 86] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s0 -> s1 [77, 65535] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s0 -> s2 [89, 65535] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s1 -> s1 [0, 75] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s1 -> s2 [0, 75] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s1 -> s4 [76, 76] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s1 -> s5 [76, 76] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s1 -> s6 [76, 76] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s1 -> s7 [76, 76] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s1 -> s2 [77, 86] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s1 -> s1 [77, 65535] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s1 -> s2 [89, 65535] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s2 -> s2 [0, 75] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R18099 += 1 };
  s2 -> s6 [76, 76] { R18099 += 1, R18055 += 1 };
  s2 -> s7 [76, 76] { R18099 += 1, R18055 += 1 };
  s2 -> s2 [77, 86] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s2 -> s2 [77, 65535] { R18099 += 1, R18055 += 1 };
  s2 -> s2 [89, 65535] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s3 -> s1 [0, 75] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s3 -> s2 [0, 75] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s3 -> s3 [0, 65535] { R18099 += 1, R18054 += 1, R18055 += 1 };
  s3 -> s4 [76, 76] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s3 -> s5 [76, 76] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s3 -> s6 [76, 76] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s3 -> s7 [76, 76] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s3 -> s2 [77, 86] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s3 -> s1 [77, 65535] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s3 -> s2 [89, 65535] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s4 -> s7 [0, 86] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s4 -> s4 [0, 65535] { R18099 += 1, R18055 += 1, R17996 += 1, R17997 += 1 };
  s4 -> s7 [89, 65535] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R18099 += 1 };
  s7 -> s7 [0, 86] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R18099 += 1, R18055 += 1 };
  s7 -> s9 [0, 65535] { R18099 += 1 };
  s7 -> s7 [89, 65535] { R18099 += 1, R18055 += 1, R17997 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18099 += 1 };
  accepting s8, s2, s9, s6, s7;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
constraint R1 = R18015 && R2 = R18099 && R20 - R18099 = -1 && R21 = R18099 && R22 - R18099 = -1 && R23 = R18099 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17885 + -1*R17883 - R53 = 0 && R52 + R17884 + R17882 = 0 && R18014 = 0 && R18040 = 0 && R18041 = 0 && R18046 = 0 && R18047 = 0 && R18050 = 0 && R18051 = 0 && R18054 = 0 && R18055 = 0 && R18056 = 0 && R18057 = R18099 && R18058 = 0 && R18059 = R18099 && R18060 = 0 && R18061 = R18099 && R18062 = 0 && R18063 = R18099 && R18064 = 0 && R18065 = R18099 && R18066 = 0 && R18067 = R18099 && R18068 = 0 && R18069 = R18099 && R18070 = 0 && R18071 = R18099 && R18072 = 0 && R18073 = R18099 && R18074 = 0 && R18075 = R18099 && R18076 = 0 && R18077 = R18099 && R18078 = 0 && R18079 = R18099 && R18080 = 0 && R18081 = R18099 && R18082 = 0 && R18083 = R18099 && R18084 = 0 && R18085 = R18099 && R18086 = 0 && R18087 = R18099 && R18088 = 0 && R18089 = R18099 && R18090 = 0 && R18091 = R18099 && R18092 = 0 && R18093 = R18099 && R18094 = 0 && R18095 = R18099 && R18096 = 0 && R18097 = R18099 && R18098 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17885 + -1*R17883 - R53 < 1 && -1 < R18015 && 0 < R18099 && (R48 + R15341 + R15338 != 0 || ((R42 + R15334 + R15332 != 0 || R43 + R15335 + R15333 + -1*R17885 + -1*R17883 - R53 = 0 || R53 + R17885 + R17883 < 1) && (R42 + R15334 + R15332 = 0 || R53 + R17885 + R17883 < 1))) && (R48 + R15341 + R15338 != 0 || ((R46 + R15339 + R15336 != 0 || R47 + R15340 + R15337 + -1*R17885 + -1*R17883 - R53 = 0 || R53 + R17885 + R17883 < 1) && (R46 + R15339 + R15336 = 0 || R53 + R17885 + R17883 < 1))) && (R18000 != 0 || R18001 = R18015 || (R17 = 0 && R18015 = 0)) && (R18002 != 0 || R18003 = R18015 || (R17 = 0 && R18015 = 0)) && (R18004 != 0 || R18005 = R18015 || (R17 = 0 && R18015 = 0)) && (R18006 != 0 || R18007 = R18015 || (R17 = 0 && R18015 = 0)) && (R18008 != 0 || R18009 = R18015 || (R17 = 0 && R18015 = 0)) && (R18010 != 0 || R18011 = R18015 || (R17 = 0 && R18015 = 0)) && (R18012 != 0 || R18013 = R18015 || (R17 = 0 && R18015 = 0)) && (R18016 != 0 || R18015 = R18017 || (R17 = 0 && R18015 = 0)) && (R18018 != 0 || R18015 = R18019 || (R17 = 0 && R18015 = 0)) && (R18 = 0 || (R18038 = 0 && R18039 = 0)) && (R18 = 0 || (R18042 = 0 && R18043 = 0)) && (R18 = 0 || (R18044 = 0 && R18045 = 0)) && (R18 = 0 || (R18048 = 0 && R18049 = 0)) && (R18 = 0 || (R18052 = 0 && R18053 = 0)) && (R19 = 0 || (R18020 = 0 && R18021 = 0)) && (R19 = 0 || (R18022 = 0 && R18023 = 0)) && (R19 = 0 || (R18024 = 0 && R18025 = 0)) && (R19 = 0 || (R18026 = 0 && R18027 = 0)) && (R19 = 0 || (R18028 = 0 && R18029 = 0)) && (R19 = 0 || (R18030 = 0 && R18031 = 0)) && (R19 = 0 || (R18032 = 0 && R18033 = 0)) && (R19 = 0 || (R18034 = 0 && R18035 = 0)) && (R19 = 0 || (R18036 = 0 && R18037 = 0)) && (R48 + R15341 + R15338 = 0 || (R42 + R15334 + R15332 = 0 && R43 + R15335 + R15333 + -1*R17885 + -1*R17883 - R53 = 0)) && (R48 + R15341 + R15338 = 0 || (R46 + R15339 + R15336 = 0 && R47 + R15340 + R15337 + -1*R17885 + -1*R17883 - R53 = 0)) && (R58 + R17891 + R17888 = 0 || (R56 + R17889 + R17886 = 0 && R57 + R17890 + R17887 = 0)) && (R58 + R17891 + R17888 = 0 || (R62 + R17998 + R17996 = 0 && R63 + R17999 + R17997 = 0)) && (R18000 = 0 || (R17 = 0 && R18015 = 0)) && (R18002 = 0 || (R17 = 0 && R18015 = 0)) && (R18004 = 0 || (R17 = 0 && R18015 = 0)) && (R18006 = 0 || (R17 = 0 && R18015 = 0)) && (R18008 = 0 || (R17 = 0 && R18015 = 0)) && (R18010 = 0 || (R17 = 0 && R18015 = 0)) && (R18012 = 0 || (R17 = 0 && R18015 = 0)) && (R18016 = 0 || (R17 = 0 && R18015 = 0)) && (R18018 = 0 || (R17 = 0 && R18015 = 0));
// End of Parikh automata intersection problem
