// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [76, 76];
  s0 -> s0 [77, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [76, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 75];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [76, 76];
  s0 -> s1 [77, 65535];
  s1 -> s1 [0, 75];
  s1 -> s2 [76, 76];
  s1 -> s1 [77, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11979 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R11978 += 1, R11979 += 1 };
  s1 -> s1 [0, 65535] { R11979 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 75] { R11981 += 1 };
  s0 -> s0 [0, 65535] { R11980 += 1, R11981 += 1 };
  s0 -> s2 [76, 76] { R11981 += 1 };
  s0 -> s3 [76, 76] { R11981 += 1 };
  s0 -> s1 [88, 65535] { R11981 += 1 };
  s1 -> s1 [0, 75] { R11981 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R11981 += 1 };
  s1 -> s3 [76, 76] { R11981 += 1 };
  s1 -> s1 [88, 65535] { R11981 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 76] { R11981 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R11981 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 75] { R11983 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11982 += 1, R11983 += 1 };
  s0 -> s2 [76, 76] { R11983 += 1, R38 += 1 };
  s0 -> s3 [76, 76] { R11983 += 1, R38 += 1 };
  s0 -> s1 [77, 65535] { R11983 += 1, R38 += 1 };
  s1 -> s1 [0, 75] { R11983 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R11983 += 1, R38 += 1 };
  s1 -> s3 [76, 76] { R11983 += 1, R38 += 1 };
  s1 -> s1 [77, 65535] { R11983 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11983 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 75] { R11985 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11984 += 1, R11985 += 1 };
  s0 -> s2 [76, 76] { R11985 += 1, R40 += 1 };
  s0 -> s3 [76, 76] { R11985 += 1, R40 += 1 };
  s0 -> s1 [77, 65535] { R11985 += 1, R40 += 1 };
  s1 -> s1 [0, 75] { R11985 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R11985 += 1, R40 += 1 };
  s1 -> s3 [76, 76] { R11985 += 1, R40 += 1 };
  s1 -> s1 [77, 65535] { R11985 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R11985 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R11987 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11986 += 1, R11987 += 1 };
  s0 -> s2 [76, 76] { R11987 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [76, 76] { R11987 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [77, 65535] { R11987 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 75] { R11987 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R11987 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [76, 76] { R11987 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [77, 65535] { R11987 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11987 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 75] { R11989 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11988 += 1, R11989 += 1 };
  s0 -> s2 [76, 76] { R11989 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [76, 76] { R11989 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [77, 65535] { R11989 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 75] { R11989 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R11989 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [76, 76] { R11989 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [77, 65535] { R11989 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11989 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 75] { R11991 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11990 += 1, R11991 += 1 };
  s0 -> s2 [76, 76] { R11991 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [76, 76] { R11991 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [77, 65535] { R11991 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 75] { R11991 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R11991 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [76, 76] { R11991 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [77, 65535] { R11991 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R11991 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 75] { R11993 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11992 += 1, R11993 += 1 };
  s0 -> s2 [76, 76] { R11993 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [76, 76] { R11993 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [77, 65535] { R11993 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 75] { R11993 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R11993 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [76, 76] { R11993 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [77, 65535] { R11993 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11993 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R11995 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11994 += 1, R11995 += 1 };
  s0 -> s2 [76, 76] { R11995 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [76, 76] { R11995 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [77, 65535] { R11995 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 75] { R11995 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R11995 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [76, 76] { R11995 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [77, 65535] { R11995 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11995 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 75] { R12015 += 1 };
  s0 -> s0 [0, 65535] { R12014 += 1, R12015 += 1 };
  s0 -> s2 [76, 76] { R12015 += 1 };
  s0 -> s1 [77, 65535] { R12015 += 1 };
  s1 -> s1 [0, 75] { R12015 += 1 };
  s1 -> s2 [76, 76] { R12015 += 1 };
  s1 -> s1 [77, 65535] { R12015 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12015 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R12016 += 1, R12017 += 1 };
  s0 -> s1 [0, 65535] { R12017 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R12017 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 75] { R12019 += 1 };
  s0 -> s2 [0, 65535] { R12019 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R12018 += 1, R12019 += 1 };
  s0 -> s3 [76, 76] { R12019 += 1 };
  s0 -> s1 [77, 65535] { R12019 += 1 };
  s1 -> s1 [0, 75] { R12019 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [76, 76] { R12019 += 1 };
  s1 -> s1 [77, 65535] { R12019 += 1 };
  s2 -> s1 [0, 75] { R12019 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12019 += 1, R8 += 1 };
  s2 -> s3 [76, 76] { R12019 += 1 };
  s2 -> s1 [77, 65535] { R12019 += 1 };
  s3 -> s3 [0, 65535] { R12019 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 75] { R12021 += 1, R11959 += 1 };
  s0 -> s0 [0, 65535] { R12020 += 1, R12021 += 1 };
  s0 -> s2 [0, 65535] { R12021 += 1, R11958 += 1, R11959 += 1 };
  s0 -> s1 [77, 65535] { R12021 += 1, R11959 += 1 };
  s1 -> s1 [0, 75] { R12021 += 1, R11959 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12021 += 1 };
  s1 -> s1 [77, 65535] { R12021 += 1, R11959 += 1 };
  s2 -> s1 [0, 75] { R12021 += 1, R11959 += 1 };
  s2 -> s2 [0, 65535] { R12021 += 1, R11958 += 1, R11959 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R12021 += 1, R11959 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R12022 += 1, R12023 += 1 };
  s0 -> s1 [0, 65535] { R12023 += 1, R11961 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R12023 += 1, R11960 += 1, R11961 += 1 };
  s1 -> s4 [0, 65535] { R12023 += 1 };
  s1 -> s1 [0, 65535] { R12023 += 1, R11961 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12023 += 1, R11961 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R12023 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12023 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 76] { R12025 += 1, R11963 += 1 };
  s0 -> s2 [0, 65535] { R12025 += 1, R11962 += 1, R11963 += 1 };
  s0 -> s0 [0, 65535] { R12024 += 1, R12025 += 1 };
  s0 -> s1 [87, 65535] { R12025 += 1, R11963 += 1 };
  s1 -> s1 [0, 76] { R12025 += 1, R11963 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12025 += 1 };
  s1 -> s1 [87, 65535] { R12025 += 1, R11963 += 1 };
  s2 -> s1 [0, 76] { R12025 += 1, R11963 += 1 };
  s2 -> s2 [0, 65535] { R12025 += 1, R11962 += 1, R11963 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R12025 += 1, R11963 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12027 += 1, R11965 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R12026 += 1, R12027 += 1 };
  s0 -> s2 [0, 65535] { R12027 += 1, R11964 += 1, R11965 += 1 };
  s1 -> s1 [0, 65535] { R12027 += 1, R11965 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R12027 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12027 += 1, R11965 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12027 += 1, R11964 += 1, R11965 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12027 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R12029 += 1, R11967 += 1 };
  s0 -> s0 [0, 65535] { R12028 += 1, R12029 += 1 };
  s0 -> s2 [0, 65535] { R12029 += 1, R11966 += 1, R11967 += 1 };
  s0 -> s3 [0, 65535] { R12029 += 1, R11967 += 1, R69 += 1 };
  s0 -> s1 [88, 65535] { R12029 += 1, R11967 += 1 };
  s1 -> s1 [0, 86] { R12029 += 1, R11967 += 1 };
  s1 -> s1 [0, 65535] { R12029 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R12029 += 1, R11967 += 1 };
  s2 -> s1 [0, 86] { R12029 += 1, R11967 += 1 };
  s2 -> s2 [0, 65535] { R12029 += 1, R11966 += 1, R11967 += 1 };
  s2 -> s3 [0, 65535] { R12029 += 1, R11967 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R12029 += 1, R11967 += 1 };
  s3 -> s1 [0, 86] { R12029 += 1, R11967 += 1 };
  s3 -> s4 [0, 65535] { R12029 += 1 };
  s3 -> s3 [0, 65535] { R12029 += 1, R11967 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R12029 += 1, R11967 += 1 };
  s4 -> s4 [0, 65535] { R12029 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R12031 += 1, R11969 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R12031 += 1, R11969 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R12030 += 1, R12031 += 1 };
  s0 -> s3 [0, 65535] { R12031 += 1, R11968 += 1, R11969 += 1 };
  s0 -> s1 [88, 65535] { R12031 += 1, R11969 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R12031 += 1, R11969 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12031 += 1 };
  s1 -> s1 [0, 65535] { R12031 += 1, R11969 += 1 };
  s1 -> s1 [88, 65535] { R12031 += 1, R11969 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R12031 += 1, R11969 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12031 += 1, R11969 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R12031 += 1 };
  s2 -> s1 [88, 65535] { R12031 += 1, R11969 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R12031 += 1, R11969 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12031 += 1, R11969 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R12031 += 1, R11968 += 1, R11969 += 1 };
  s3 -> s1 [88, 65535] { R12031 += 1, R11969 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12031 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R12032 += 1, R12033 += 1 };
  s0 -> s1 [0, 65535] { R12033 += 1, R11971 += 1 };
  s0 -> s2 [0, 65535] { R12033 += 1, R11970 += 1, R11971 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12033 += 1 };
  s1 -> s1 [0, 65535] { R12033 += 1, R11971 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12033 += 1, R11971 += 1 };
  s2 -> s2 [0, 65535] { R12033 += 1, R11970 += 1, R11971 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12033 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R12034 += 1, R12035 += 1 };
  s0 -> s1 [0, 65535] { R12035 += 1, R11973 += 1 };
  s0 -> s2 [0, 65535] { R12035 += 1, R11972 += 1, R11973 += 1 };
  s1 -> s4 [0, 65535] { R12035 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12035 += 1, R11973 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12035 += 1, R11973 += 1 };
  s2 -> s2 [0, 65535] { R12035 += 1, R11972 += 1, R11973 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12035 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R12037 += 1, R11975 += 1, R11952 += 1, R11953 += 1 };
  s0 -> s2 [0, 65535] { R12037 += 1, R11974 += 1, R11975 += 1 };
  s0 -> s3 [0, 65535] { R12037 += 1, R11975 += 1 };
  s0 -> s0 [0, 65535] { R12036 += 1, R12037 += 1 };
  s1 -> s1 [0, 65535] { R12037 += 1, R11975 += 1, R11952 += 1, R11953 += 1 };
  s1 -> s4 [0, 65535] { R12037 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R12037 += 1, R11975 += 1 };
  s2 -> s1 [0, 65535] { R12037 += 1, R11975 += 1, R11952 += 1, R11953 += 1 };
  s2 -> s2 [0, 65535] { R12037 += 1, R11974 += 1, R11975 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R12037 += 1, R11975 += 1 };
  s3 -> s4 [0, 65535] { R12037 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12037 += 1, R11975 += 1 };
  s4 -> s4 [0, 65535] { R12037 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s0 -> s2 [0, 65535] { R12039 += 1, R11976 += 1, R11977 += 1 };
  s0 -> s3 [0, 65535] { R12039 += 1, R11977 += 1, R11956 += 1, R11957 += 1 };
  s0 -> s0 [0, 65535] { R12038 += 1, R12039 += 1 };
  s0 -> s4 [87, 87] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s0 -> s5 [87, 87] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s0 -> s1 [89, 65535] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s1 -> s1 [0, 86] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s1 -> s6 [0, 65535] { R12039 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R12039 += 1, R11977 += 1 };
  s1 -> s4 [87, 87] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s1 -> s5 [87, 87] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s1 -> s1 [89, 65535] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s2 -> s1 [0, 86] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R12039 += 1, R11976 += 1, R11977 += 1 };
  s2 -> s3 [0, 65535] { R12039 += 1, R11977 += 1, R11956 += 1, R11957 += 1 };
  s2 -> s4 [87, 87] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s2 -> s5 [87, 87] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s2 -> s1 [89, 65535] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s3 -> s1 [0, 86] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s3 -> s6 [0, 65535] { R12039 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R12039 += 1, R11977 += 1, R11956 += 1, R11957 += 1 };
  s3 -> s4 [87, 87] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s3 -> s5 [87, 87] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s3 -> s1 [89, 65535] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s4 -> s4 [0, 65535] { R12039 += 1, R11977 += 1 };
  s4 -> s6 [0, 65535] { R12039 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 87] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s5 -> s6 [0, 65535] { R12039 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R12039 += 1, R11977 += 1 };
  s5 -> s5 [89, 65535] { R12039 += 1, R11977 += 1, R11957 += 1 };
  s6 -> s6 [0, 65535] { R12039 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R12040 += 1, R12041 += 1 };
  s0 -> s1 [0, 65535] { R12041 += 1, R11996 += 1, R11997 += 1 };
  s0 -> s2 [0, 65535] { R12041 += 1, R11997 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R12041 += 1, R11996 += 1, R11997 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12041 += 1, R11997 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R12041 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12041 += 1, R11997 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R12041 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 75] { R12043 += 1, R11999 += 1 };
  s0 -> s0 [0, 65535] { R12042 += 1, R12043 += 1 };
  s0 -> s2 [0, 65535] { R12043 += 1, R11998 += 1, R11999 += 1 };
  s0 -> s3 [76, 76] { R12043 += 1, R11999 += 1 };
  s0 -> s4 [76, 76] { R12043 += 1, R11999 += 1 };
  s0 -> s5 [87, 87] { R12043 += 1, R11999 += 1 };
  s0 -> s1 [88, 65535] { R12043 += 1, R11999 += 1 };
  s1 -> s1 [0, 75] { R12043 += 1, R11999 += 1 };
  s1 -> s3 [76, 76] { R12043 += 1, R11999 += 1 };
  s1 -> s4 [76, 76] { R12043 += 1, R11999 += 1 };
  s1 -> s5 [87, 87] { R12043 += 1, R11999 += 1 };
  s1 -> s1 [88, 65535] { R12043 += 1, R11999 += 1 };
  s2 -> s1 [0, 75] { R12043 += 1, R11999 += 1 };
  s2 -> s2 [0, 65535] { R12043 += 1, R11998 += 1, R11999 += 1 };
  s2 -> s3 [76, 76] { R12043 += 1, R11999 += 1 };
  s2 -> s4 [76, 76] { R12043 += 1, R11999 += 1 };
  s2 -> s5 [87, 87] { R12043 += 1, R11999 += 1 };
  s2 -> s1 [88, 65535] { R12043 += 1, R11999 += 1 };
  s3 -> s3 [0, 76] { R12043 += 1, R11999 += 1 };
  s3 -> s7 [87, 87] { R12043 += 1, R11999 += 1 };
  s3 -> s3 [88, 65535] { R12043 += 1, R11999 += 1 };
  s5 -> s5 [0, 75] { R12043 += 1, R11999 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12043 += 1 };
  s5 -> s7 [76, 76] { R12043 += 1, R11999 += 1 };
  s5 -> s8 [76, 76] { R12043 += 1, R11999 += 1 };
  s5 -> s5 [87, 65535] { R12043 += 1, R11999 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 76] { R12043 += 1, R11999 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12043 += 1 };
  s7 -> s7 [87, 65535] { R12043 += 1, R11999 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12043 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 75] { R12045 += 1, R12001 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R12045 += 1, R12000 += 1, R12001 += 1 };
  s0 -> s0 [0, 65535] { R12044 += 1, R12045 += 1 };
  s0 -> s3 [76, 76] { R12045 += 1, R12001 += 1, R66 += 1 };
  s0 -> s4 [76, 76] { R12045 += 1, R12001 += 1, R66 += 1 };
  s0 -> s1 [77, 65535] { R12045 += 1, R12001 += 1, R66 += 1 };
  s1 -> s1 [0, 75] { R12045 += 1, R12001 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12045 += 1 };
  s1 -> s3 [76, 76] { R12045 += 1, R12001 += 1, R66 += 1 };
  s1 -> s4 [76, 76] { R12045 += 1, R12001 += 1, R66 += 1 };
  s1 -> s1 [77, 65535] { R12045 += 1, R12001 += 1, R66 += 1 };
  s2 -> s1 [0, 75] { R12045 += 1, R12001 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12045 += 1, R12000 += 1, R12001 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R12045 += 1, R12001 += 1, R66 += 1 };
  s2 -> s4 [76, 76] { R12045 += 1, R12001 += 1, R66 += 1 };
  s2 -> s1 [77, 65535] { R12045 += 1, R12001 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R12045 += 1, R12001 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12045 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12045 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12045 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 75] { R12047 += 1, R12003 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R12047 += 1, R12002 += 1, R12003 += 1 };
  s0 -> s0 [0, 65535] { R12046 += 1, R12047 += 1 };
  s0 -> s3 [76, 76] { R12047 += 1, R12003 += 1, R68 += 1 };
  s0 -> s4 [76, 76] { R12047 += 1, R12003 += 1, R68 += 1 };
  s0 -> s1 [77, 65535] { R12047 += 1, R12003 += 1, R68 += 1 };
  s1 -> s1 [0, 75] { R12047 += 1, R12003 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R12047 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [76, 76] { R12047 += 1, R12003 += 1, R68 += 1 };
  s1 -> s4 [76, 76] { R12047 += 1, R12003 += 1, R68 += 1 };
  s1 -> s1 [77, 65535] { R12047 += 1, R12003 += 1, R68 += 1 };
  s2 -> s1 [0, 75] { R12047 += 1, R12003 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R12047 += 1, R12002 += 1, R12003 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [76, 76] { R12047 += 1, R12003 += 1, R68 += 1 };
  s2 -> s4 [76, 76] { R12047 += 1, R12003 += 1, R68 += 1 };
  s2 -> s1 [77, 65535] { R12047 += 1, R12003 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R12047 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12047 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12047 += 1, R12003 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R12047 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 75] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R12049 += 1, R12004 += 1, R12005 += 1 };
  s0 -> s0 [0, 65535] { R12048 += 1, R12049 += 1 };
  s0 -> s3 [76, 76] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [76, 76] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [77, 65535] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 75] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R12049 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [76, 76] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [77, 65535] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 75] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R12049 += 1, R12004 += 1, R12005 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [76, 76] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [77, 65535] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R12049 += 1, R12005 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R12049 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12049 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12049 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 75] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [0, 75] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s3 [0, 65535] { R12051 += 1, R12006 += 1, R12007 += 1 };
  s0 -> s0 [0, 65535] { R12050 += 1, R12051 += 1 };
  s0 -> s4 [76, 76] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s5 [76, 76] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s6 [76, 76] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s7 [76, 76] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s1 [77, 65535] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [77, 65535] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s1 [0, 75] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [0, 75] { R12051 += 1, R12007 += 1 };
  s1 -> s8 [76, 76] { R12051 += 1, R12007 += 1 };
  s1 -> s6 [76, 76] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s12 [76, 76] { R12051 += 1, R12007 += 1 };
  s1 -> s7 [76, 76] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [77, 65535] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [77, 65535] { R12051 += 1, R12007 += 1 };
  s2 -> s1 [0, 75] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [0, 75] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s4 [76, 76] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s5 [76, 76] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s6 [76, 76] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s7 [76, 76] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s1 [77, 65535] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [77, 65535] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [0, 75] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [0, 75] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s3 [0, 65535] { R12051 += 1, R12006 += 1, R12007 += 1 };
  s3 -> s4 [76, 76] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s5 [76, 76] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s6 [76, 76] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s7 [76, 76] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [77, 65535] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [77, 65535] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s4 [0, 65535] { R12051 += 1, R12007 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s7 [0, 65535] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s7 -> s8 [0, 65535] { R12051 += 1, R12007 += 1 };
  s7 -> s7 [0, 65535] { R12051 += 1, R12007 += 1, R10247 += 1, R10248 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12051 += 1, R12007 += 1 };
  s8 -> s10 [0, 65535] { R12051 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12051 += 1 };
  s11 -> s11 [0, 75] { R12051 += 1, R12007 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12051 += 1 };
  s11 -> s8 [76, 76] { R12051 += 1, R12007 += 1 };
  s11 -> s12 [76, 76] { R12051 += 1, R12007 += 1 };
  s11 -> s11 [77, 65535] { R12051 += 1, R12007 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12051 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 75] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 75] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R12053 += 1, R12008 += 1, R12009 += 1 };
  s0 -> s0 [0, 65535] { R12052 += 1, R12053 += 1 };
  s0 -> s4 [76, 76] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s0 -> s6 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s0 -> s7 [76, 76] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [77, 87] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s0 -> s1 [77, 65535] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s8 [88, 88] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s0 -> s2 [89, 65535] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s1 -> s1 [0, 75] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 75] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s1 -> s4 [76, 76] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s1 -> s6 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s1 -> s7 [76, 76] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [77, 87] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s1 -> s1 [77, 65535] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s8 [88, 88] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s1 -> s2 [89, 65535] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s2 -> s2 [0, 75] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s2 -> s5 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s2 -> s6 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s2 -> s2 [77, 87] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s2 -> s8 [88, 88] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s2 -> s2 [89, 65535] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s3 -> s1 [0, 75] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 75] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R12053 += 1, R12008 += 1, R12009 += 1 };
  s3 -> s4 [76, 76] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s3 -> s6 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s3 -> s7 [76, 76] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [77, 87] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s3 -> s1 [77, 65535] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s8 [88, 88] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s3 -> s2 [89, 65535] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s5 -> s5 [0, 87] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s5 -> s10 [88, 88] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s5 -> s5 [89, 65535] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s7 -> s5 [0, 87] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R12053 += 1, R12009 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s10 [88, 88] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s7 -> s5 [89, 65535] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s8 -> s8 [0, 75] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s8 -> s9 [0, 75] { R12053 += 1, R12009 += 1 };
  s8 -> s10 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s8 -> s11 [76, 76] { R12053 += 1, R12009 += 1 };
  s8 -> s12 [76, 76] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s8 -> s13 [76, 76] { R12053 += 1, R12009 += 1 };
  s8 -> s8 [77, 65535] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s8 -> s9 [77, 65535] { R12053 += 1, R12009 += 1 };
  s9 -> s9 [0, 75] { R12053 += 1, R12009 += 1 };
  s9 -> s9 [0, 65535] { R12053 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s11 [76, 76] { R12053 += 1, R12009 += 1 };
  s9 -> s13 [76, 76] { R12053 += 1, R12009 += 1 };
  s9 -> s9 [77, 65535] { R12053 += 1, R12009 += 1 };
  s10 -> s10 [0, 65535] { R12053 += 1, R12009 += 1, R11523 += 1 };
  s10 -> s11 [0, 65535] { R12053 += 1, R12009 += 1 };
  s11 -> s11 [0, 65535] { R12053 += 1, R12009 += 1 };
  s11 -> s15 [0, 65535] { R12053 += 1 };
  s11 -> s14 [0, 65535];
  s13 -> s13 [0, 65535] { R12053 += 1 };
  s13 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R12053 += 1 };
  s15 -> s14 [0, 65535];
  accepting s13, s9, s14, s15, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 75] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s0 -> s2 [0, 75] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s0 -> s3 [0, 65535] { R12055 += 1, R12010 += 1, R12011 += 1 };
  s0 -> s0 [0, 65535] { R12054 += 1, R12055 += 1 };
  s0 -> s4 [76, 76] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s0 -> s5 [76, 76] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s0 -> s6 [76, 76] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s0 -> s7 [76, 76] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s0 -> s1 [77, 65535] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s0 -> s2 [77, 65535] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s1 -> s1 [0, 75] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s1 -> s1 [0, 65535] { R12055 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [76, 76] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s1 -> s6 [76, 76] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s1 -> s1 [77, 65535] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s1 [0, 75] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s2 [0, 75] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s2 -> s4 [76, 76] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s5 [76, 76] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s2 -> s6 [76, 76] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s7 [76, 76] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s2 -> s1 [77, 65535] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s2 [77, 65535] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s3 -> s1 [0, 75] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s3 -> s2 [0, 75] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s3 -> s3 [0, 65535] { R12055 += 1, R12010 += 1, R12011 += 1 };
  s3 -> s4 [76, 76] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s3 -> s5 [76, 76] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s3 -> s6 [76, 76] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s3 -> s7 [76, 76] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s3 -> s1 [77, 65535] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s3 -> s2 [77, 65535] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s4 -> s4 [0, 65535] { R12055 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R12055 += 1, R12011 += 1, R11948 += 1, R11949 += 1 };
  s5 -> s6 [0, 65535] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s6 -> s8 [0, 65535] { R12055 += 1 };
  s6 -> s6 [0, 65535] { R12055 += 1, R12011 += 1, R11949 += 1, R11950 += 1 };
  s6 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12055 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 75] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s0 -> s0 [0, 65535] { R12056 += 1, R12057 += 1 };
  s0 -> s2 [0, 65535] { R12057 += 1, R12012 += 1, R12013 += 1 };
  s0 -> s3 [76, 76] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s0 -> s4 [76, 76] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s0 -> s1 [77, 65535] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s1 -> s1 [0, 75] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12057 += 1 };
  s1 -> s3 [76, 76] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s1 -> s4 [76, 76] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s1 -> s1 [77, 65535] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s2 -> s1 [0, 75] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12057 += 1, R12012 += 1, R12013 += 1 };
  s2 -> s3 [76, 76] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s2 -> s4 [76, 76] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s2 -> s1 [77, 65535] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s3 -> s3 [0, 65535] { R12057 += 1, R12013 += 1, R11954 += 1, R11955 += 1 };
  s3 -> s6 [0, 65535] { R12057 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12057 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12057 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
constraint R2 = R12057 && R20 - R12057 = -1 && R21 = R12057 && R22 - R12057 = -1 && R23 = R12057 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11525 + -1*R11523 - R53 = 0 && R52 + R11524 + R11522 = 0 && R11998 = 0 && R11999 = 0 && R12006 = 0 && R12007 = 0 && R12008 = 0 && R12009 = 0 && R12010 = 0 && R12011 = 0 && R12014 = 0 && R12015 = R12057 && R12016 = 0 && R12017 = R12057 && R12018 = 0 && R12019 = R12057 && R12020 = 0 && R12021 = R12057 && R12022 = 0 && R12023 = R12057 && R12024 = 0 && R12025 = R12057 && R12026 = 0 && R12027 = R12057 && R12028 = 0 && R12029 = R12057 && R12030 = 0 && R12031 = R12057 && R12032 = 0 && R12033 = R12057 && R12034 = 0 && R12035 = R12057 && R12036 = 0 && R12037 = R12057 && R12038 = 0 && R12039 = R12057 && R12040 = 0 && R12041 = R12057 && R12042 = 0 && R12043 = R12057 && R12044 = 0 && R12045 = R12057 && R12046 = 0 && R12047 = R12057 && R12048 = 0 && R12049 = R12057 && R12050 = 0 && R12051 = R12057 && R12052 = 0 && R12053 = R12057 && R12054 = 0 && R12055 = R12057 && R12056 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11525 + -1*R11523 - R53 < 1 && 0 < R12057 && (R1 != 0 || R17 = 0 || (R11958 = 0 && R11959 = 0)) && (R1 != 0 || R17 = 0 || (R11960 = 0 && R11961 = 0)) && (R1 != 0 || R17 = 0 || (R11962 = 0 && R11963 = 0)) && (R1 != 0 || R17 = 0 || (R11964 = 0 && R11965 = 0)) && (R1 != 0 || R17 = 0 || (R11966 = 0 && R11967 = 0)) && (R1 != 0 || R17 = 0 || (R11968 = 0 && R11969 = 0)) && (R1 != 0 || R17 = 0 || (R11970 = 0 && R11971 = 0)) && (R1 != 0 || R17 = 0 || (R11972 = 0 && R11973 = 0)) && (R1 != 0 || R17 = 0 || (R11974 = 0 && R11975 = 0)) && (R1 != 0 || R17 = 0 || (R11976 = 0 && R11977 = 0)) && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R11525 + -1*R11523 - R53 = 0 || R53 + R11525 + R11523 < 1) && (R42 + R72 + R70 = 0 || R53 + R11525 + R11523 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R11525 + -1*R11523 - R53 = 0 || R53 + R11525 + R11523 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R11525 + R11523 < 1))) && (R11958 != 0 || R1 = R11959 || R1 < 1) && (R11960 != 0 || R1 = R11961 || R1 < 1) && (R11962 != 0 || R1 = R11963 || R1 < 1) && (R11964 != 0 || R1 = R11965 || R1 < 1) && (R11966 != 0 || R1 = R11967 || R1 < 1) && (R11968 != 0 || R1 = R11969 || R1 < 1) && (R11970 != 0 || R1 = R11971 || R1 < 1) && (R11972 != 0 || R1 = R11973 || R1 < 1) && (R11974 != 0 || R1 = R11975 || R1 < 1) && (R11976 != 0 || R1 = R11977 || R1 < 1) && (R18 = 0 || (R11996 = 0 && R11997 = 0)) && (R18 = 0 || (R12000 = 0 && R12001 = 0)) && (R18 = 0 || (R12002 = 0 && R12003 = 0)) && (R18 = 0 || (R12004 = 0 && R12005 = 0)) && (R18 = 0 || (R12012 = 0 && R12013 = 0)) && (R19 = 0 || (R11978 = 0 && R11979 = 0)) && (R19 = 0 || (R11980 = 0 && R11981 = 0)) && (R19 = 0 || (R11982 = 0 && R11983 = 0)) && (R19 = 0 || (R11984 = 0 && R11985 = 0)) && (R19 = 0 || (R11986 = 0 && R11987 = 0)) && (R19 = 0 || (R11988 = 0 && R11989 = 0)) && (R19 = 0 || (R11990 = 0 && R11991 = 0)) && (R19 = 0 || (R11992 = 0 && R11993 = 0)) && (R19 = 0 || (R11994 = 0 && R11995 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R11525 + -1*R11523 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R11525 + -1*R11523 - R53 = 0)) && (R58 + R11953 + R11950 = 0 || (R56 + R11951 + R11948 = 0 && R57 + R11952 + R11949 = 0)) && (R58 + R11953 + R11950 = 0 || (R62 + R11956 + R11954 = 0 && R63 + R11957 + R11955 = 0)) && (R11958 = 0 || R1 < 1) && (R11960 = 0 || R1 < 1) && (R11962 = 0 || R1 < 1) && (R11964 = 0 || R1 < 1) && (R11966 = 0 || R1 < 1) && (R11968 = 0 || R1 < 1) && (R11970 = 0 || R1 < 1) && (R11972 = 0 || R1 < 1) && (R11974 = 0 || R1 < 1) && (R11976 = 0 || R1 < 1);
// End of Parikh automata intersection problem
