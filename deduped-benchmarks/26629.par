// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R17, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R18, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R19, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R20, R200, R201, R202, R21, R22, R23, R24, R25, R26, R3, R4, R5, R8, R87, R88, R89, R90;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [69, 69];
  s0 -> s0 [70, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [69, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 68];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [69, 69];
  s0 -> s1 [70, 65535];
  s1 -> s1 [0, 68];
  s1 -> s2 [69, 69];
  s1 -> s1 [70, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s1 [0, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s1 [0, 65535] { R88 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R88 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 68] { R90 += 1 };
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s0 -> s2 [69, 69] { R90 += 1 };
  s0 -> s3 [69, 69] { R90 += 1 };
  s0 -> s1 [77, 65535] { R90 += 1 };
  s1 -> s1 [0, 68] { R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [69, 69] { R90 += 1 };
  s1 -> s3 [69, 69] { R90 += 1 };
  s1 -> s1 [77, 65535] { R90 += 1 };
  s2 -> s2 [0, 69] { R90 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [77, 65535] { R90 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 68] { R178 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s2 [69, 69] { R178 += 1 };
  s0 -> s1 [70, 65535] { R178 += 1 };
  s1 -> s1 [0, 68] { R178 += 1 };
  s1 -> s2 [69, 69] { R178 += 1 };
  s1 -> s1 [70, 65535] { R178 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R178 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s1 [0, 65535] { R180 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R180 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 68] { R182 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s3 [69, 69] { R182 += 1 };
  s0 -> s1 [70, 65535] { R182 += 1 };
  s1 -> s1 [0, 68] { R182 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [69, 69] { R182 += 1 };
  s1 -> s1 [70, 65535] { R182 += 1 };
  s2 -> s1 [0, 68] { R182 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R182 += 1, R8 += 1 };
  s2 -> s3 [69, 69] { R182 += 1 };
  s2 -> s1 [70, 65535] { R182 += 1 };
  s3 -> s3 [0, 65535] { R182 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R184 += 1, R153 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s0 -> s2 [0, 65535] { R184 += 1, R154 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R184 += 1, R153 += 1, R154 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R184 += 1, R154 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R184 += 1 };
  s2 -> s2 [0, 65535] { R184 += 1, R154 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R184 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R186 += 1, R156 += 1 };
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s2 [0, 65535] { R186 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [69, 69] { R186 += 1, R156 += 1 };
  s0 -> s4 [69, 69] { R186 += 1, R156 += 1 };
  s0 -> s1 [77, 65535] { R186 += 1, R156 += 1 };
  s1 -> s1 [0, 68] { R186 += 1, R156 += 1 };
  s1 -> s1 [0, 65535] { R186 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [69, 69] { R186 += 1, R156 += 1 };
  s1 -> s4 [69, 69] { R186 += 1, R156 += 1 };
  s1 -> s1 [77, 65535] { R186 += 1, R156 += 1 };
  s2 -> s1 [0, 68] { R186 += 1, R156 += 1 };
  s2 -> s2 [0, 65535] { R186 += 1, R155 += 1, R156 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [69, 69] { R186 += 1, R156 += 1 };
  s2 -> s4 [69, 69] { R186 += 1, R156 += 1 };
  s2 -> s1 [77, 65535] { R186 += 1, R156 += 1 };
  s3 -> s3 [0, 69] { R186 += 1, R156 += 1 };
  s3 -> s3 [0, 65535] { R186 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [77, 65535] { R186 += 1, R156 += 1 };
  s4 -> s4 [0, 65535] { R186 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 68] { R188 += 1, R162 += 1 };
  s0 -> s2 [0, 65535] { R188 += 1, R161 += 1, R162 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s3 [69, 69] { R188 += 1, R162 += 1 };
  s0 -> s1 [70, 65535] { R188 += 1, R162 += 1 };
  s1 -> s1 [0, 68] { R188 += 1, R162 += 1 };
  s1 -> s3 [69, 69] { R188 += 1, R162 += 1 };
  s1 -> s1 [70, 65535] { R188 += 1, R162 += 1 };
  s2 -> s1 [0, 68] { R188 += 1, R162 += 1 };
  s2 -> s2 [0, 65535] { R188 += 1, R161 += 1, R162 += 1 };
  s2 -> s3 [69, 69] { R188 += 1, R162 += 1 };
  s2 -> s1 [70, 65535] { R188 += 1, R162 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R188 += 1 };
  s3 -> s3 [0, 65535] { R188 += 1, R162 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R188 += 1 };
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s1 [0, 65535] { R190 += 1, R163 += 1, R164 += 1 };
  s0 -> s2 [0, 65535] { R190 += 1, R164 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R190 += 1, R163 += 1, R164 += 1 };
  s1 -> s2 [0, 65535] { R190 += 1, R164 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R190 += 1 };
  s2 -> s2 [0, 65535] { R190 += 1, R164 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R190 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 68] { R192 += 1, R166 += 1 };
  s0 -> s2 [0, 65535] { R192 += 1, R165 += 1, R166 += 1 };
  s0 -> s3 [0, 65535] { R192 += 1, R166 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s4 [69, 69] { R192 += 1, R166 += 1 };
  s0 -> s1 [70, 65535] { R192 += 1, R166 += 1 };
  s1 -> s1 [0, 68] { R192 += 1, R166 += 1 };
  s1 -> s1 [0, 65535] { R192 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [69, 69] { R192 += 1, R166 += 1 };
  s1 -> s1 [70, 65535] { R192 += 1, R166 += 1 };
  s2 -> s1 [0, 68] { R192 += 1, R166 += 1 };
  s2 -> s2 [0, 65535] { R192 += 1, R165 += 1, R166 += 1 };
  s2 -> s3 [0, 65535] { R192 += 1, R166 += 1, R5 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [69, 69] { R192 += 1, R166 += 1 };
  s2 -> s1 [70, 65535] { R192 += 1, R166 += 1 };
  s3 -> s1 [0, 68] { R192 += 1, R166 += 1 };
  s3 -> s3 [0, 65535] { R192 += 1, R166 += 1, R5 += 1 };
  s3 -> s5 [0, 65535] { R192 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [69, 69] { R192 += 1, R166 += 1 };
  s3 -> s1 [70, 65535] { R192 += 1, R166 += 1 };
  s4 -> s4 [0, 65535] { R192 += 1, R166 += 1 };
  s5 -> s5 [0, 65535] { R192 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 68] { R194 += 1, R168 += 1, R148 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s0 -> s2 [0, 65535] { R194 += 1, R167 += 1, R168 += 1 };
  s0 -> s3 [0, 65535] { R194 += 1, R168 += 1, R147 += 1, R148 += 1 };
  s0 -> s1 [70, 65535] { R194 += 1, R168 += 1, R148 += 1 };
  s1 -> s1 [0, 68] { R194 += 1, R168 += 1, R148 += 1 };
  s1 -> s1 [0, 65535] { R194 += 1, R168 += 1 };
  s1 -> s4 [0, 65535] { R194 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [70, 65535] { R194 += 1, R168 += 1, R148 += 1 };
  s2 -> s1 [0, 68] { R194 += 1, R168 += 1, R148 += 1 };
  s2 -> s2 [0, 65535] { R194 += 1, R167 += 1, R168 += 1 };
  s2 -> s3 [0, 65535] { R194 += 1, R168 += 1, R147 += 1, R148 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [70, 65535] { R194 += 1, R168 += 1, R148 += 1 };
  s3 -> s1 [0, 68] { R194 += 1, R168 += 1, R148 += 1 };
  s3 -> s3 [0, 65535] { R194 += 1, R168 += 1, R147 += 1, R148 += 1 };
  s3 -> s4 [0, 65535] { R194 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [70, 65535] { R194 += 1, R168 += 1, R148 += 1 };
  s4 -> s4 [0, 65535] { R194 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R196 += 1, R169 += 1, R170 += 1 };
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R196 += 1, R170 += 1, R150 += 1, R15 += 1 };
  s0 -> s3 [0, 65535] { R196 += 1, R170 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 65535] { R196 += 1, R169 += 1, R170 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R196 += 1, R170 += 1, R150 += 1, R15 += 1 };
  s1 -> s3 [0, 65535] { R196 += 1, R170 += 1, R149 += 1, R150 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R196 += 1, R170 += 1 };
  s2 -> s2 [0, 65535] { R196 += 1, R170 += 1, R150 += 1, R15 += 1 };
  s2 -> s5 [0, 65535] { R196 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R196 += 1, R170 += 1, R150 += 1, R15 += 1 };
  s3 -> s3 [0, 65535] { R196 += 1, R170 += 1, R149 += 1, R150 += 1 };
  s3 -> s5 [0, 65535] { R196 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R196 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R196 += 1, R170 += 1 };
  s6 -> s5 [0, 65535] { R196 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R198 += 1, R172 += 1, R152 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s2 [0, 65535] { R198 += 1, R172 += 1, R151 += 1, R152 += 1 };
  s0 -> s3 [0, 65535] { R198 += 1, R171 += 1, R172 += 1 };
  s0 -> s4 [76, 76] { R198 += 1, R172 += 1, R152 += 1 };
  s0 -> s1 [77, 65535] { R198 += 1, R172 += 1, R152 += 1 };
  s1 -> s1 [0, 69] { R198 += 1, R172 += 1, R152 += 1 };
  s1 -> s4 [76, 76] { R198 += 1, R172 += 1, R152 += 1 };
  s1 -> s1 [77, 65535] { R198 += 1, R172 += 1, R152 += 1 };
  s2 -> s1 [0, 69] { R198 += 1, R172 += 1, R152 += 1 };
  s2 -> s2 [0, 65535] { R198 += 1, R172 += 1, R151 += 1, R152 += 1 };
  s2 -> s4 [76, 76] { R198 += 1, R172 += 1, R152 += 1 };
  s2 -> s1 [77, 65535] { R198 += 1, R172 += 1, R152 += 1 };
  s3 -> s1 [0, 69] { R198 += 1, R172 += 1, R152 += 1 };
  s3 -> s2 [0, 65535] { R198 += 1, R172 += 1, R151 += 1, R152 += 1 };
  s3 -> s3 [0, 65535] { R198 += 1, R171 += 1, R172 += 1 };
  s3 -> s4 [76, 76] { R198 += 1, R172 += 1, R152 += 1 };
  s3 -> s1 [77, 65535] { R198 += 1, R172 += 1, R152 += 1 };
  s4 -> s4 [0, 69] { R198 += 1, R172 += 1, R152 += 1 };
  s4 -> s4 [0, 65535] { R198 += 1, R172 += 1 };
  s4 -> s5 [0, 65535] { R198 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [76, 65535] { R198 += 1, R172 += 1, R152 += 1 };
  s5 -> s5 [0, 65535] { R198 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R200 += 1, R174 += 1, R157 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R200 += 1, R173 += 1, R174 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s3 [0, 65535] { R200 += 1, R174 += 1, R158 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R200 += 1, R174 += 1, R157 += 1, R158 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R200 += 1 };
  s1 -> s3 [0, 65535] { R200 += 1, R174 += 1, R158 += 1, R16 += 1 };
  s2 -> s1 [0, 65535] { R200 += 1, R174 += 1, R157 += 1, R158 += 1 };
  s2 -> s2 [0, 65535] { R200 += 1, R173 += 1, R174 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R200 += 1, R174 += 1, R158 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R200 += 1, R174 += 1 };
  s3 -> s6 [0, 65535] { R200 += 1 };
  s3 -> s3 [0, 65535] { R200 += 1, R174 += 1, R158 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R200 += 1, R174 += 1 };
  s5 -> s6 [0, 65535] { R200 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R200 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 68] { R202 += 1, R176 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R176 += 1, R159 += 1, R160 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s3 [0, 65535] { R202 += 1, R175 += 1, R176 += 1 };
  s0 -> s4 [69, 69] { R202 += 1, R176 += 1, R160 += 1 };
  s0 -> s5 [69, 69] { R202 += 1, R176 += 1, R160 += 1 };
  s0 -> s1 [77, 65535] { R202 += 1, R176 += 1, R160 += 1 };
  s1 -> s1 [0, 68] { R202 += 1, R176 += 1, R160 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R202 += 1 };
  s1 -> s1 [0, 65535] { R202 += 1, R176 += 1 };
  s1 -> s4 [69, 69] { R202 += 1, R176 += 1, R160 += 1 };
  s1 -> s5 [69, 69] { R202 += 1, R176 += 1, R160 += 1 };
  s1 -> s1 [77, 65535] { R202 += 1, R176 += 1, R160 += 1 };
  s2 -> s1 [0, 68] { R202 += 1, R176 += 1, R160 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R202 += 1, R176 += 1, R159 += 1, R160 += 1 };
  s2 -> s7 [0, 65535] { R202 += 1 };
  s2 -> s4 [69, 69] { R202 += 1, R176 += 1, R160 += 1 };
  s2 -> s5 [69, 69] { R202 += 1, R176 += 1, R160 += 1 };
  s2 -> s1 [77, 65535] { R202 += 1, R176 += 1, R160 += 1 };
  s3 -> s1 [0, 68] { R202 += 1, R176 += 1, R160 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R202 += 1, R176 += 1, R159 += 1, R160 += 1 };
  s3 -> s3 [0, 65535] { R202 += 1, R175 += 1, R176 += 1 };
  s3 -> s4 [69, 69] { R202 += 1, R176 += 1, R160 += 1 };
  s3 -> s5 [69, 69] { R202 += 1, R176 += 1, R160 += 1 };
  s3 -> s1 [77, 65535] { R202 += 1, R176 += 1, R160 += 1 };
  s4 -> s4 [0, 69] { R202 += 1, R176 += 1, R160 += 1 };
  s4 -> s4 [0, 65535] { R202 += 1, R176 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R202 += 1 };
  s4 -> s4 [77, 65535] { R202 += 1, R176 += 1, R160 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R202 += 1, R176 += 1 };
  s5 -> s7 [0, 65535] { R202 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R202 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining c7
automaton c7_0 {
  init s0;
  s0 -> s1 [101, 101];
  accepting s1;
};
};
constraint R0 = R152 && R1 = R172 && R2 = R202 && R19 - R202 = -1 && R20 = R202 && R21 - R202 = -1 && R22 = R202 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R151 = 0 && R161 = 0 && R162 = R172 && R171 = 0 && R177 = 0 && R178 = R202 && R179 = 0 && R180 = R202 && R181 = 0 && R182 = R202 && R183 = 0 && R184 = R202 && R185 = 0 && R186 = R202 && R187 = 0 && R188 = R202 && R189 = 0 && R190 = R202 && R191 = 0 && R192 = R202 && R193 = 0 && R194 = R202 && R195 = 0 && R196 = R202 && R197 = 0 && R198 = R202 && R199 = 0 && R200 = R202 && R201 = 0 && R5 < 1 && R8 < 1 && R11 < 1 && R12 < 1 && -1 < R152 && -1 < R172 && 0 < R202 && (R147 != 0 || R148 = R152 || (R15 = 0 && R152 = 0)) && (R149 != 0 || R150 = R152 || (R15 = 0 && R152 = 0)) && (R163 != 0 || R164 = R172 || (R152 = 0 && R172 = 0)) && (R165 != 0 || R166 = R172 || (R152 = 0 && R172 = 0)) && (R167 != 0 || R168 = R172 || (R152 = 0 && R172 = 0)) && (R169 != 0 || R170 = R172 || (R152 = 0 && R172 = 0)) && (R173 != 0 || R172 = R174 || (R152 = 0 && R172 = 0)) && (R175 != 0 || R172 = R176 || (R152 = 0 && R172 = 0)) && (R16 = 0 || (R157 = 0 && R158 = 0)) && (R16 = 0 || (R159 = 0 && R160 = 0)) && (R17 = 0 || (R153 = 0 && R154 = 0)) && (R17 = 0 || (R155 = 0 && R156 = 0)) && (R18 = 0 || (R87 = 0 && R88 = 0)) && (R18 = 0 || (R89 = 0 && R90 = 0)) && (R147 = 0 || (R15 = 0 && R152 = 0)) && (R149 = 0 || (R15 = 0 && R152 = 0)) && (R163 = 0 || (R152 = 0 && R172 = 0)) && (R165 = 0 || (R152 = 0 && R172 = 0)) && (R167 = 0 || (R152 = 0 && R172 = 0)) && (R169 = 0 || (R152 = 0 && R172 = 0)) && (R173 = 0 || (R152 = 0 && R172 = 0)) && (R175 = 0 || (R152 = 0 && R172 = 0));
// End of Parikh automata intersection problem
