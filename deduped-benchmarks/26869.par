// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R760, R761, R762, R763, R764, R765, R766, R767, R768, R769, R770, R771, R772, R773, R774, R775, R776, R777, R778, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788, R789, R790, R791, R792, R793, R794, R795, R796, R797, R798, R799, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R810, R811, R812, R813, R814, R815;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 72] { R759 += 1 };
  s0 -> s0 [0, 65535] { R758 += 1, R759 += 1 };
  s0 -> s1 [74, 65535] { R759 += 1 };
  s1 -> s1 [0, 72] { R759 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R759 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R760 += 1, R761 += 1 };
  s0 -> s1 [0, 65535] { R761 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R761 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R762 += 1, R763 += 1 };
  s0 -> s1 [0, 65535] { R763 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R763 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R764 += 1, R765 += 1 };
  s0 -> s1 [0, 65535] { R765 += 1, R487 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R765 += 1, R487 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 73] { R767 += 1 };
  s0 -> s0 [0, 65535] { R766 += 1, R767 += 1 };
  s0 -> s2 [0, 65535] { R767 += 1, R489 += 1 };
  s0 -> s1 [75, 65535] { R767 += 1 };
  s1 -> s1 [0, 73] { R767 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [75, 65535] { R767 += 1 };
  s2 -> s1 [0, 73] { R767 += 1 };
  s2 -> s2 [0, 65535] { R767 += 1, R489 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R767 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R768 += 1, R769 += 1 };
  s0 -> s1 [0, 65535] { R769 += 1, R494 += 1, R495 += 1 };
  s0 -> s2 [0, 65535] { R769 += 1, R493 += 1, R494 += 1 };
  s1 -> s1 [0, 65535] { R769 += 1, R494 += 1, R495 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R769 += 1 };
  s2 -> s1 [0, 65535] { R769 += 1, R494 += 1, R495 += 1 };
  s2 -> s2 [0, 65535] { R769 += 1, R493 += 1, R494 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R769 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 73] { R771 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R771 += 1, R498 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R770 += 1, R771 += 1 };
  s0 -> s3 [74, 74] { R771 += 1, R499 += 1 };
  s0 -> s4 [74, 74] { R771 += 1, R499 += 1 };
  s0 -> s1 [90, 65535] { R771 += 1, R499 += 1 };
  s1 -> s1 [0, 73] { R771 += 1, R499 += 1 };
  s1 -> s1 [0, 65535] { R771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [74, 74] { R771 += 1, R499 += 1 };
  s1 -> s4 [74, 74] { R771 += 1, R499 += 1 };
  s1 -> s1 [90, 65535] { R771 += 1, R499 += 1 };
  s2 -> s1 [0, 73] { R771 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R771 += 1, R498 += 1, R499 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [74, 74] { R771 += 1, R499 += 1 };
  s2 -> s4 [74, 74] { R771 += 1, R499 += 1 };
  s2 -> s1 [90, 65535] { R771 += 1, R499 += 1 };
  s3 -> s3 [0, 74] { R771 += 1, R499 += 1 };
  s3 -> s3 [0, 65535] { R771 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [90, 65535] { R771 += 1, R499 += 1 };
  s4 -> s4 [0, 65535] { R771 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 73] { R773 += 1, R503 += 1 };
  s0 -> s2 [0, 65535] { R773 += 1, R502 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R772 += 1, R773 += 1 };
  s0 -> s3 [74, 74] { R773 += 1, R503 += 1 };
  s0 -> s1 [75, 65535] { R773 += 1, R503 += 1 };
  s1 -> s1 [0, 73] { R773 += 1, R503 += 1 };
  s1 -> s3 [74, 74] { R773 += 1, R503 += 1 };
  s1 -> s1 [75, 65535] { R773 += 1, R503 += 1 };
  s2 -> s1 [0, 73] { R773 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R773 += 1, R502 += 1, R503 += 1 };
  s2 -> s3 [74, 74] { R773 += 1, R503 += 1 };
  s2 -> s1 [75, 65535] { R773 += 1, R503 += 1 };
  s3 -> s3 [0, 65535] { R773 += 1, R503 += 1 };
  s3 -> s4 [0, 65535] { R773 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R773 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R775 += 1, R508 += 1, R509 += 1 };
  s0 -> s0 [0, 65535] { R774 += 1, R775 += 1 };
  s0 -> s2 [0, 65535] { R775 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R775 += 1, R508 += 1, R509 += 1 };
  s1 -> s4 [0, 65535] { R775 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R775 += 1, R508 += 1, R509 += 1 };
  s2 -> s2 [0, 65535] { R775 += 1, R507 += 1, R508 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R775 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 73] { R777 += 1, R514 += 1 };
  s0 -> s0 [0, 65535] { R776 += 1, R777 += 1 };
  s0 -> s2 [0, 65535] { R777 += 1, R514 += 1, R515 += 1 };
  s0 -> s3 [0, 65535] { R777 += 1, R513 += 1, R514 += 1 };
  s0 -> s1 [75, 65535] { R777 += 1, R514 += 1 };
  s1 -> s1 [0, 73] { R777 += 1, R514 += 1 };
  s1 -> s1 [0, 65535] { R777 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [75, 65535] { R777 += 1, R514 += 1 };
  s2 -> s1 [0, 73] { R777 += 1, R514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R777 += 1, R514 += 1, R515 += 1 };
  s2 -> s5 [0, 65535] { R777 += 1 };
  s2 -> s1 [75, 65535] { R777 += 1, R514 += 1 };
  s3 -> s1 [0, 73] { R777 += 1, R514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R777 += 1, R514 += 1, R515 += 1 };
  s3 -> s3 [0, 65535] { R777 += 1, R513 += 1, R514 += 1 };
  s3 -> s1 [75, 65535] { R777 += 1, R514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R777 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 73] { R779 += 1, R521 += 1, R523 += 1 };
  s0 -> s2 [0, 65535] { R779 += 1, R520 += 1, R521 += 1 };
  s0 -> s0 [0, 65535] { R778 += 1, R779 += 1 };
  s0 -> s3 [0, 65535] { R779 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s0 -> s1 [75, 65535] { R779 += 1, R521 += 1, R523 += 1 };
  s1 -> s1 [0, 73] { R779 += 1, R521 += 1, R523 += 1 };
  s1 -> s4 [0, 65535] { R779 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R779 += 1, R521 += 1 };
  s1 -> s1 [75, 65535] { R779 += 1, R521 += 1, R523 += 1 };
  s2 -> s1 [0, 73] { R779 += 1, R521 += 1, R523 += 1 };
  s2 -> s2 [0, 65535] { R779 += 1, R520 += 1, R521 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R779 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s2 -> s1 [75, 65535] { R779 += 1, R521 += 1, R523 += 1 };
  s3 -> s1 [0, 73] { R779 += 1, R521 += 1, R523 += 1 };
  s3 -> s4 [0, 65535] { R779 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R779 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s3 -> s1 [75, 65535] { R779 += 1, R521 += 1, R523 += 1 };
  s4 -> s4 [0, 65535] { R779 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R781 += 1, R529 += 1, R530 += 1 };
  s0 -> s0 [0, 65535] { R780 += 1, R781 += 1 };
  s0 -> s2 [0, 65535] { R781 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s0 -> s3 [0, 65535] { R781 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s1 -> s1 [0, 65535] { R781 += 1, R529 += 1, R530 += 1 };
  s1 -> s2 [0, 65535] { R781 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s1 -> s3 [0, 65535] { R781 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R781 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s2 -> s3 [0, 65535] { R781 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s2 -> s5 [0, 65535] { R781 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R781 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s3 -> s4 [0, 65535] { R781 += 1, R530 += 1 };
  s3 -> s5 [0, 65535] { R781 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R781 += 1, R530 += 1 };
  s4 -> s5 [0, 65535] { R781 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R781 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R783 += 1, R539 += 1, R541 += 1 };
  s0 -> s0 [0, 65535] { R782 += 1, R783 += 1 };
  s0 -> s2 [0, 65535] { R783 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s0 -> s3 [0, 65535] { R783 += 1, R538 += 1, R539 += 1 };
  s0 -> s1 [89, 65535] { R783 += 1, R539 += 1, R541 += 1 };
  s1 -> s1 [0, 74] { R783 += 1, R539 += 1, R541 += 1 };
  s1 -> s1 [0, 65535] { R783 += 1, R539 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R783 += 1 };
  s1 -> s1 [89, 65535] { R783 += 1, R539 += 1, R541 += 1 };
  s2 -> s1 [0, 74] { R783 += 1, R539 += 1, R541 += 1 };
  s2 -> s2 [0, 65535] { R783 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R783 += 1 };
  s2 -> s1 [89, 65535] { R783 += 1, R539 += 1, R541 += 1 };
  s3 -> s1 [0, 74] { R783 += 1, R539 += 1, R541 += 1 };
  s3 -> s2 [0, 65535] { R783 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s3 -> s3 [0, 65535] { R783 += 1, R538 += 1, R539 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [89, 65535] { R783 += 1, R539 += 1, R541 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R783 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R785 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s0 -> s0 [0, 65535] { R784 += 1, R785 += 1 };
  s0 -> s2 [0, 65535] { R785 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s0 -> s3 [0, 65535] { R785 += 1, R547 += 1, R548 += 1 };
  s1 -> s1 [0, 65535] { R785 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s1 -> s6 [0, 65535] { R785 += 1, R548 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R785 += 1 };
  s2 -> s1 [0, 65535] { R785 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s2 -> s2 [0, 65535] { R785 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R785 += 1 };
  s3 -> s1 [0, 65535] { R785 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s3 -> s2 [0, 65535] { R785 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R785 += 1, R547 += 1, R548 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R785 += 1 };
  s6 -> s6 [0, 65535] { R785 += 1, R548 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R785 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 74] { R787 += 1, R755 += 1, R757 += 1 };
  s0 -> s0 [0, 65535] { R786 += 1, R787 += 1 };
  s0 -> s2 [89, 89] { R787 += 1, R755 += 1, R757 += 1 };
  s0 -> s1 [90, 65535] { R787 += 1, R755 += 1, R757 += 1 };
  s1 -> s1 [0, 74] { R787 += 1, R755 += 1, R757 += 1 };
  s1 -> s2 [89, 89] { R787 += 1, R755 += 1, R757 += 1 };
  s1 -> s1 [90, 65535] { R787 += 1, R755 += 1, R757 += 1 };
  s2 -> s2 [0, 74] { R787 += 1, R755 += 1, R757 += 1 };
  s2 -> s3 [0, 65535] { R787 += 1 };
  s2 -> s2 [0, 65535] { R787 += 1, R755 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [89, 65535] { R787 += 1, R755 += 1, R757 += 1 };
  s3 -> s3 [0, 65535] { R787 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s2, s3, s4;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R788 += 1, R789 += 1 };
  s0 -> s1 [0, 65535] { R789 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R789 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 72] { R791 += 1 };
  s0 -> s0 [0, 65535] { R790 += 1, R791 += 1 };
  s0 -> s2 [73, 73] { R791 += 1 };
  s0 -> s3 [73, 73] { R791 += 1 };
  s0 -> s4 [74, 74] { R791 += 1 };
  s0 -> s1 [75, 65535] { R791 += 1 };
  s1 -> s1 [0, 72] { R791 += 1 };
  s1 -> s2 [73, 73] { R791 += 1 };
  s1 -> s3 [73, 73] { R791 += 1 };
  s1 -> s4 [74, 74] { R791 += 1 };
  s1 -> s1 [75, 65535] { R791 += 1 };
  s2 -> s2 [0, 73] { R791 += 1 };
  s2 -> s5 [74, 74] { R791 += 1 };
  s2 -> s2 [75, 65535] { R791 += 1 };
  s4 -> s4 [0, 72] { R791 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [73, 73] { R791 += 1 };
  s4 -> s6 [73, 73] { R791 += 1 };
  s4 -> s4 [74, 65535] { R791 += 1 };
  s5 -> s5 [0, 65535] { R791 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 72] { R793 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R792 += 1, R793 += 1 };
  s0 -> s2 [73, 73] { R793 += 1, R486 += 1 };
  s0 -> s3 [73, 73] { R793 += 1, R486 += 1 };
  s0 -> s1 [74, 65535] { R793 += 1, R486 += 1 };
  s1 -> s1 [0, 72] { R793 += 1, R486 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R793 += 1, R486 += 1 };
  s1 -> s3 [73, 73] { R793 += 1, R486 += 1 };
  s1 -> s1 [74, 65535] { R793 += 1, R486 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R793 += 1, R486 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 72] { R795 += 1, R488 += 1 };
  s0 -> s0 [0, 65535] { R794 += 1, R795 += 1 };
  s0 -> s2 [73, 73] { R795 += 1, R488 += 1 };
  s0 -> s3 [73, 73] { R795 += 1, R488 += 1 };
  s0 -> s1 [74, 65535] { R795 += 1, R488 += 1 };
  s1 -> s1 [0, 72] { R795 += 1, R488 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R795 += 1, R488 += 1 };
  s1 -> s3 [73, 73] { R795 += 1, R488 += 1 };
  s1 -> s1 [74, 65535] { R795 += 1, R488 += 1 };
  s2 -> s2 [0, 65535] { R795 += 1, R488 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 72] { R797 += 1, R490 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R796 += 1, R797 += 1 };
  s0 -> s2 [73, 73] { R797 += 1, R490 += 1, R491 += 1 };
  s0 -> s3 [73, 73] { R797 += 1, R490 += 1, R491 += 1 };
  s0 -> s1 [74, 65535] { R797 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 72] { R797 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R797 += 1, R490 += 1, R491 += 1 };
  s1 -> s3 [73, 73] { R797 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [74, 65535] { R797 += 1, R490 += 1, R491 += 1 };
  s2 -> s2 [0, 65535] { R797 += 1, R490 += 1, R491 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 72] { R799 += 1, R496 += 1, R497 += 1 };
  s0 -> s0 [0, 65535] { R798 += 1, R799 += 1 };
  s0 -> s2 [73, 73] { R799 += 1, R496 += 1, R497 += 1 };
  s0 -> s3 [73, 73] { R799 += 1, R496 += 1, R497 += 1 };
  s0 -> s1 [74, 65535] { R799 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 72] { R799 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R799 += 1, R496 += 1, R497 += 1 };
  s1 -> s3 [73, 73] { R799 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [74, 65535] { R799 += 1, R496 += 1, R497 += 1 };
  s2 -> s2 [0, 65535] { R799 += 1, R496 += 1, R497 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 72] { R801 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R800 += 1, R801 += 1 };
  s0 -> s2 [73, 73] { R801 += 1, R500 += 1, R501 += 1 };
  s0 -> s3 [73, 73] { R801 += 1, R500 += 1, R501 += 1 };
  s0 -> s1 [74, 65535] { R801 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 72] { R801 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R801 += 1, R500 += 1, R501 += 1 };
  s1 -> s3 [73, 73] { R801 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [74, 65535] { R801 += 1, R500 += 1, R501 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R801 += 1, R500 += 1, R501 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 72] { R803 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R802 += 1, R803 += 1 };
  s0 -> s2 [73, 73] { R803 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [73, 73] { R803 += 1, R504 += 1, R505 += 1 };
  s0 -> s1 [74, 65535] { R803 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 72] { R803 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R803 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [73, 73] { R803 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [74, 65535] { R803 += 1, R504 += 1, R505 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R803 += 1, R504 += 1, R505 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R805 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R804 += 1, R805 += 1 };
  s0 -> s2 [73, 73] { R805 += 1, R510 += 1, R511 += 1 };
  s0 -> s3 [73, 73] { R805 += 1, R510 += 1, R511 += 1 };
  s0 -> s1 [74, 65535] { R805 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 72] { R805 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R805 += 1, R510 += 1, R511 += 1 };
  s1 -> s3 [73, 73] { R805 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [74, 65535] { R805 += 1, R510 += 1, R511 += 1 };
  s2 -> s2 [0, 65535] { R805 += 1, R510 += 1, R511 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R807 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R806 += 1, R807 += 1 };
  s0 -> s2 [73, 73] { R807 += 1, R516 += 1, R517 += 1 };
  s0 -> s3 [73, 73] { R807 += 1, R516 += 1, R517 += 1 };
  s0 -> s1 [74, 65535] { R807 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 72] { R807 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R807 += 1, R516 += 1, R517 += 1 };
  s1 -> s3 [73, 73] { R807 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [74, 65535] { R807 += 1, R516 += 1, R517 += 1 };
  s2 -> s2 [0, 65535] { R807 += 1, R516 += 1, R517 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R809 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R808 += 1, R809 += 1 };
  s0 -> s2 [73, 73] { R809 += 1, R524 += 1, R525 += 1 };
  s0 -> s3 [73, 73] { R809 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [74, 65535] { R809 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 72] { R809 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R809 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [73, 73] { R809 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [74, 65535] { R809 += 1, R524 += 1, R525 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R809 += 1, R524 += 1, R525 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R811 += 1, R534 += 1, R535 += 1 };
  s0 -> s0 [0, 65535] { R810 += 1, R811 += 1 };
  s0 -> s2 [73, 73] { R811 += 1, R534 += 1, R535 += 1 };
  s0 -> s3 [73, 73] { R811 += 1, R534 += 1, R535 += 1 };
  s0 -> s1 [74, 65535] { R811 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 72] { R811 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R811 += 1, R534 += 1, R535 += 1 };
  s1 -> s3 [73, 73] { R811 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [74, 65535] { R811 += 1, R534 += 1, R535 += 1 };
  s2 -> s2 [0, 65535] { R811 += 1, R534 += 1, R535 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R813 += 1, R542 += 1, R543 += 1 };
  s0 -> s0 [0, 65535] { R812 += 1, R813 += 1 };
  s0 -> s2 [73, 73] { R813 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [73, 73] { R813 += 1, R542 += 1, R543 += 1 };
  s0 -> s1 [74, 65535] { R813 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 72] { R813 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R813 += 1, R542 += 1, R543 += 1 };
  s1 -> s3 [73, 73] { R813 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [74, 65535] { R813 += 1, R542 += 1, R543 += 1 };
  s2 -> s2 [0, 65535] { R813 += 1, R542 += 1, R543 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R815 += 1, R751 += 1, R753 += 1 };
  s0 -> s2 [0, 72] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s0 -> s3 [0, 72] { R815 += 1, R750 += 1, R751 += 1 };
  s0 -> s0 [0, 65535] { R814 += 1, R815 += 1 };
  s0 -> s4 [73, 73] { R815 += 1, R750 += 1, R751 += 1 };
  s0 -> s5 [73, 73] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s0 -> s6 [73, 73] { R815 += 1, R750 += 1, R751 += 1 };
  s0 -> s7 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s0 -> s8 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s0 -> s9 [73, 73] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s0 -> s10 [74, 74] { R815 += 1, R751 += 1, R753 += 1 };
  s0 -> s2 [74, 65535] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s0 -> s3 [74, 65535] { R815 += 1, R750 += 1, R751 += 1 };
  s0 -> s1 [90, 65535] { R815 += 1, R751 += 1, R753 += 1 };
  s1 -> s1 [0, 72] { R815 += 1, R751 += 1, R753 += 1 };
  s1 -> s7 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s1 -> s8 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s1 -> s10 [74, 74] { R815 += 1, R751 += 1, R753 += 1 };
  s1 -> s1 [90, 65535] { R815 += 1, R751 += 1, R753 += 1 };
  s2 -> s1 [0, 72] { R815 += 1, R751 += 1, R753 += 1 };
  s2 -> s2 [0, 72] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s2 -> s5 [73, 73] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s2 -> s7 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s2 -> s8 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s2 -> s9 [73, 73] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s2 -> s10 [74, 74] { R815 += 1, R751 += 1, R753 += 1 };
  s2 -> s2 [74, 65535] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s2 -> s1 [90, 65535] { R815 += 1, R751 += 1, R753 += 1 };
  s3 -> s1 [0, 72] { R815 += 1, R751 += 1, R753 += 1 };
  s3 -> s2 [0, 72] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s3 -> s3 [0, 72] { R815 += 1, R750 += 1, R751 += 1 };
  s3 -> s4 [73, 73] { R815 += 1, R750 += 1, R751 += 1 };
  s3 -> s5 [73, 73] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s3 -> s6 [73, 73] { R815 += 1, R750 += 1, R751 += 1 };
  s3 -> s7 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s3 -> s8 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s3 -> s9 [73, 73] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s3 -> s10 [74, 74] { R815 += 1, R751 += 1, R753 += 1 };
  s3 -> s2 [74, 65535] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s3 -> s3 [74, 65535] { R815 += 1, R750 += 1, R751 += 1 };
  s3 -> s1 [90, 65535] { R815 += 1, R751 += 1, R753 += 1 };
  s5 -> s8 [0, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s5 -> s5 [0, 65535] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s5 -> s11 [74, 74] { R815 += 1, R751 += 1, R753 += 1 };
  s5 -> s8 [90, 65535] { R815 += 1, R751 += 1, R753 += 1 };
  s6 -> s8 [0, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s6 -> s5 [0, 65535] { R815 += 1, R751 += 1, R752 += 1, R753 += 1 };
  s6 -> s6 [0, 65535] { R815 += 1, R750 += 1, R751 += 1 };
  s6 -> s11 [74, 74] { R815 += 1, R751 += 1, R753 += 1 };
  s6 -> s8 [90, 65535] { R815 += 1, R751 += 1, R753 += 1 };
  s8 -> s8 [0, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s8 -> s11 [74, 74] { R815 += 1, R751 += 1, R753 += 1 };
  s8 -> s8 [90, 65535] { R815 += 1, R751 += 1, R753 += 1 };
  s10 -> s10 [0, 72] { R815 += 1, R751 += 1, R753 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s11 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s10 -> s12 [73, 73] { R815 += 1, R751 += 1, R753 += 1 };
  s10 -> s10 [74, 74] { R815 += 1, R751 += 1, R753 += 1 };
  s10 -> s10 [90, 65535] { R815 += 1, R751 += 1, R753 += 1 };
  s11 -> s11 [0, 74] { R815 += 1, R751 += 1, R753 += 1 };
  s11 -> s11 [0, 65535];
  s11 -> s11 [90, 65535] { R815 += 1, R751 += 1, R753 += 1 };
  s12 -> s12 [0, 65535];
  accepting s10, s11, s12;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [106, 106];
  accepting s1;
};
};
constraint R2 = R787 && R20 - R787 = -1 && R21 = R787 && R22 - R787 = -1 && R23 = R787 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R487 + R486 + -1*R755 + -1*R751 = 0 && R502 + R500 = 0 && R503 + R501 + -1*R755 + -1*R751 = 0 && R754 + R750 = 0 && R756 + R752 = 0 && R757 + R753 = 0 && R758 = 0 && R759 = R787 && R760 = 0 && R761 = R787 && R762 = 0 && R763 = R787 && R764 = 0 && R765 = R787 && R766 = 0 && R767 = R787 && R768 = 0 && R769 = R787 && R770 = 0 && R771 = R787 && R772 = 0 && R773 = R787 && R774 = 0 && R775 = R787 && R776 = 0 && R777 = R787 && R778 = 0 && R779 = R787 && R780 = 0 && R781 = R787 && R782 = 0 && R783 = R787 && R784 = 0 && R785 = R787 && R786 = 0 && R790 = 0 && R791 = 0 && R814 = 0 && R815 = 0 && R11 < 1 && R12 < 1 && R489 + R488 < 1 && -1*R509 + -1*R506 < 1 && R515 + R512 < 1 && -1*R755 + -1*R751 < 1 && 0 < R787 && (R507 + R504 != 0 || R508 + R505 + -1*R755 + -1*R751 = 0 || R509 + R506 < 1) && (R509 + R506 != 0 || R533 + R528 = 0 || (R522 + R518 = 0 && R523 + R519 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R531 + R526 = 0 && R532 + R527 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R540 + R536 = 0 && R541 + R537 = 0)) && (R509 + R506 != 0 || ((R507 + R504 != 0 || R508 + R505 + -1*R755 + -1*R751 = 0 || R755 + R751 < 1) && (R507 + R504 = 0 || R755 + R751 < 1))) && (R513 + R510 != 0 || R514 + R511 + -1*R755 + -1*R751 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R520 + R516 != 0 || R521 + R517 + -1*R755 + -1*R751 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R522 + R518 != 0 || R509 + R506 + -1*R523 + -1*R519 = 0 || R509 + R506 < 1) && (R529 + R524 != 0 || R530 + R525 + -1*R755 + -1*R751 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R531 + R526 != 0 || R509 + R506 + -1*R532 + -1*R527 = 0 || R509 + R506 < 1) && (R538 + R534 != 0 || R539 + R535 + -1*R755 + -1*R751 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R540 + R536 != 0 || R509 + R506 + -1*R541 + -1*R537 = 0 || R509 + R506 < 1) && (R547 + R542 != 0 || R548 + R543 + -1*R755 + -1*R751 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R19 = 0 || (R788 = 0 && R789 = 0)) && (R19 = 0 || (R792 = 0 && R793 = 0)) && (R19 = 0 || (R794 = 0 && R795 = 0)) && (R19 = 0 || (R796 = 0 && R797 = 0)) && (R19 = 0 || (R798 = 0 && R799 = 0)) && (R19 = 0 || (R800 = 0 && R801 = 0)) && (R19 = 0 || (R802 = 0 && R803 = 0)) && (R19 = 0 || (R804 = 0 && R805 = 0)) && (R19 = 0 || (R806 = 0 && R807 = 0)) && (R19 = 0 || (R808 = 0 && R809 = 0)) && (R19 = 0 || (R810 = 0 && R811 = 0)) && (R19 = 0 || (R812 = 0 && R813 = 0)) && (R495 + R492 = 0 || (R493 + R490 = 0 && R494 + R491 = 0)) && (R495 + R492 = 0 || (R498 + R496 = 0 && R499 + R497 = 0)) && (R507 + R504 = 0 || R509 + R506 < 1) && (R513 + R510 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R520 + R516 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R522 + R518 = 0 || R509 + R506 < 1) && (R529 + R524 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R531 + R526 = 0 || R509 + R506 < 1) && (R538 + R534 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R540 + R536 = 0 || R509 + R506 < 1) && (R547 + R542 = 0 || (R509 + R506 = 0 && R755 + R751 = 0)) && (R551 + R546 = 0 || (R549 + R544 = 0 && R550 + R545 = 0));
// End of Parikh automata intersection problem
