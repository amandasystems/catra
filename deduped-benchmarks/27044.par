// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R3, R4, R5, R7, R8;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R8 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R8 += 1 };
  s1 -> s1 [0, 43] { R8 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R28 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20 += 1 };
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s1 [0, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R28 && R7 = 0 && R8 - R27 = -1 && R0 != 0 && R1 != 0 && R5 < 1 && R27 - R28 < 1 && -1 < R27 && 0 < R28 && (R3 != 0 || ((R1 != R20 || R19 - R20 = -1 || R20 < 0) && (R1 = R20 || R1 < 1))) && (R3 != 0 || ((R1 != R22 || R21 - R22 = -1 || R22 < 0) && (R1 = R22 || R1 < 1))) && (R23 != 0 || ((R4 != 0 || ((R1 != R24 || R24 = 1 || R24 < 0) && (R1 = R24 || R24 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R24 || R24 = 1 || R24 < 0) && (R24 != 1 || -1 < R1) && (R1 = R24 || R24 = 1))))) && (R25 != 0 || ((R4 != 0 || ((R1 != R26 || R26 = 1 || R26 < 0) && (R1 = R26 || R26 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R26 || R26 = 1 || R26 < 0) && (R26 != 1 || -1 < R1) && (R1 = R26 || R26 = 1))))) && (R3 = 0 || (R1 = R20 && R19 - R20 = -1)) && (R3 = 0 || (R1 = R22 && R21 - R22 = -1)) && (R23 = 0 || (R4 = 0 && R1 < 0)) && (R25 = 0 || (R4 = 0 && R1 < 0));
// End of Parikh automata intersection problem
