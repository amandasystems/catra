// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8, R8982, R8983, R8984, R8985, R8986, R8987, R8988, R8989, R8990, R8991, R8992, R8993, R8994, R8995, R8996, R8997, R8998, R8999, R9000, R9001, R9002, R9003, R9004, R9005, R9006, R9007, R9008, R9009, R9010, R9011, R9012, R9013, R9014, R9015, R9016, R9017, R9018, R9019, R9020, R9021, R9022, R9023, R9024, R9025, R9026, R9027, R9028, R9029, R9030, R9031, R9032, R9033, R9034, R9035, R9036, R9037, R9038, R9039, R9040, R9041, R9042, R9043, R9044, R9045, R9046, R9047, R9048, R9049, R9050, R9051, R9052, R9053, R9054, R9055, R9056, R9057, R9058, R9059, R9060, R9061, R9062, R9063, R9064, R9065, R9066, R9067, R9068, R9069, R9070, R9071, R9072, R9073, R9074, R9075, R9076, R9077, R9078, R9079, R9080, R9081, R9082, R9083, R9084, R9085, R9086, R9087, R9088, R9089, R9090, R9091, R9092, R9093, R9094, R9095;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9016 += 1, R9017 += 1 };
  s0 -> s1 [0, 65535] { R9017 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9017 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R9019 += 1 };
  s0 -> s0 [0, 65535] { R9018 += 1, R9019 += 1 };
  s0 -> s2 [81, 81] { R9019 += 1 };
  s0 -> s3 [81, 81] { R9019 += 1 };
  s0 -> s1 [83, 65535] { R9019 += 1 };
  s1 -> s1 [0, 80] { R9019 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9019 += 1 };
  s1 -> s3 [81, 81] { R9019 += 1 };
  s1 -> s1 [83, 65535] { R9019 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R9019 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R9019 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R9021 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R9020 += 1, R9021 += 1 };
  s0 -> s2 [81, 81] { R9021 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R9021 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R9021 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R9021 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9021 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R9021 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R9021 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9021 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R9023 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9022 += 1, R9023 += 1 };
  s0 -> s2 [81, 81] { R9023 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R9023 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R9023 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R9023 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9023 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R9023 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R9023 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R9023 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R9025 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R9024 += 1, R9025 += 1 };
  s0 -> s2 [81, 81] { R9025 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R9025 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R9025 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R9025 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9025 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R9025 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R9025 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9025 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R9027 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9026 += 1, R9027 += 1 };
  s0 -> s2 [81, 81] { R9027 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R9027 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R9027 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R9027 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9027 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R9027 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R9027 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9027 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R9029 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R9028 += 1, R9029 += 1 };
  s0 -> s2 [81, 81] { R9029 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R9029 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R9029 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R9029 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9029 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R9029 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R9029 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R9029 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R9031 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R9030 += 1, R9031 += 1 };
  s0 -> s2 [81, 81] { R9031 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R9031 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R9031 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R9031 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9031 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R9031 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R9031 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9031 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R9033 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R9032 += 1, R9033 += 1 };
  s0 -> s2 [81, 81] { R9033 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R9033 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R9033 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R9033 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9033 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R9033 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R9033 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9033 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R9053 += 1 };
  s0 -> s0 [0, 65535] { R9052 += 1, R9053 += 1 };
  s0 -> s2 [81, 81] { R9053 += 1 };
  s0 -> s1 [82, 65535] { R9053 += 1 };
  s1 -> s1 [0, 80] { R9053 += 1 };
  s1 -> s2 [81, 81] { R9053 += 1 };
  s1 -> s1 [82, 65535] { R9053 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9053 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9055 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R9054 += 1, R9055 += 1 };
  s1 -> s1 [0, 65535] { R9055 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R9057 += 1 };
  s0 -> s0 [0, 65535] { R9056 += 1, R9057 += 1 };
  s0 -> s2 [0, 65535] { R9057 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R9057 += 1 };
  s0 -> s1 [82, 65535] { R9057 += 1 };
  s1 -> s1 [0, 80] { R9057 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R9057 += 1 };
  s1 -> s1 [82, 65535] { R9057 += 1 };
  s2 -> s1 [0, 80] { R9057 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9057 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R9057 += 1 };
  s2 -> s1 [82, 65535] { R9057 += 1 };
  s3 -> s3 [0, 65535] { R9057 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R9059 += 1, R8997 += 1 };
  s0 -> s2 [0, 65535] { R9059 += 1, R8996 += 1, R8997 += 1 };
  s0 -> s0 [0, 65535] { R9058 += 1, R9059 += 1 };
  s0 -> s1 [82, 65535] { R9059 += 1, R8997 += 1 };
  s1 -> s1 [0, 80] { R9059 += 1, R8997 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9059 += 1 };
  s1 -> s1 [82, 65535] { R9059 += 1, R8997 += 1 };
  s2 -> s1 [0, 80] { R9059 += 1, R8997 += 1 };
  s2 -> s2 [0, 65535] { R9059 += 1, R8996 += 1, R8997 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R9059 += 1, R8997 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9061 += 1, R8999 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R9060 += 1, R9061 += 1 };
  s0 -> s2 [0, 65535] { R9061 += 1, R8998 += 1, R8999 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9061 += 1 };
  s1 -> s1 [0, 65535] { R9061 += 1, R8999 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9061 += 1, R8999 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R9061 += 1, R8998 += 1, R8999 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9061 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9063 += 1, R9001 += 1 };
  s0 -> s2 [0, 65535] { R9063 += 1, R9000 += 1, R9001 += 1 };
  s0 -> s0 [0, 65535] { R9062 += 1, R9063 += 1 };
  s1 -> s4 [0, 65535] { R9063 += 1 };
  s1 -> s1 [0, 65535] { R9063 += 1, R9001 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9063 += 1, R9001 += 1 };
  s2 -> s2 [0, 65535] { R9063 += 1, R9000 += 1, R9001 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9063 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R9064 += 1, R9065 += 1 };
  s0 -> s1 [0, 65535] { R9065 += 1, R9003 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R9065 += 1, R9002 += 1, R9003 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9065 += 1, R9003 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R9065 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9065 += 1, R9003 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R9065 += 1, R9002 += 1, R9003 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9065 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R9067 += 1, R9005 += 1 };
  s0 -> s0 [0, 65535] { R9066 += 1, R9067 += 1 };
  s0 -> s2 [0, 65535] { R9067 += 1, R9005 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R9067 += 1, R9004 += 1, R9005 += 1 };
  s0 -> s1 [83, 65535] { R9067 += 1, R9005 += 1 };
  s1 -> s1 [0, 81] { R9067 += 1, R9005 += 1 };
  s1 -> s1 [0, 65535] { R9067 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R9067 += 1, R9005 += 1 };
  s2 -> s1 [0, 81] { R9067 += 1, R9005 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9067 += 1, R9005 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R9067 += 1 };
  s2 -> s1 [83, 65535] { R9067 += 1, R9005 += 1 };
  s3 -> s1 [0, 81] { R9067 += 1, R9005 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9067 += 1, R9005 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R9067 += 1, R9004 += 1, R9005 += 1 };
  s3 -> s1 [83, 65535] { R9067 += 1, R9005 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9067 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R9069 += 1, R9007 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R9069 += 1, R9007 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R9069 += 1, R9006 += 1, R9007 += 1 };
  s0 -> s0 [0, 65535] { R9068 += 1, R9069 += 1 };
  s0 -> s1 [83, 65535] { R9069 += 1, R9007 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R9069 += 1, R9007 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R9069 += 1 };
  s1 -> s1 [0, 65535] { R9069 += 1, R9007 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R9069 += 1, R9007 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R9069 += 1, R9007 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R9069 += 1 };
  s2 -> s2 [0, 65535] { R9069 += 1, R9007 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R9069 += 1, R9007 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R9069 += 1, R9007 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R9069 += 1, R9007 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R9069 += 1, R9006 += 1, R9007 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R9069 += 1, R9007 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9069 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R9070 += 1, R9071 += 1 };
  s0 -> s1 [0, 65535] { R9071 += 1, R9008 += 1, R9009 += 1 };
  s0 -> s2 [0, 65535] { R9071 += 1, R9009 += 1 };
  s1 -> s1 [0, 65535] { R9071 += 1, R9008 += 1, R9009 += 1 };
  s1 -> s2 [0, 65535] { R9071 += 1, R9009 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9071 += 1 };
  s2 -> s2 [0, 65535] { R9071 += 1, R9009 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9071 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s0 -> s0 [0, 65535] { R9072 += 1, R9073 += 1 };
  s0 -> s2 [0, 65535] { R9073 += 1, R9010 += 1, R9011 += 1 };
  s0 -> s3 [85, 85] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s0 -> s1 [86, 65535] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s1 -> s1 [0, 82] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s1 -> s3 [85, 85] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s1 -> s1 [86, 65535] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s2 -> s1 [0, 82] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s2 -> s2 [0, 65535] { R9073 += 1, R9010 += 1, R9011 += 1 };
  s2 -> s3 [85, 85] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s2 -> s1 [86, 65535] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s3 -> s3 [0, 82] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9073 += 1, R9011 += 1 };
  s3 -> s5 [0, 65535] { R9073 += 1 };
  s3 -> s3 [85, 65535] { R9073 += 1, R9011 += 1, R8985 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9073 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R9075 += 1, R9013 += 1, R8990 += 1, R8991 += 1 };
  s0 -> s0 [0, 65535] { R9074 += 1, R9075 += 1 };
  s0 -> s2 [0, 65535] { R9075 += 1, R9012 += 1, R9013 += 1 };
  s0 -> s3 [0, 65535] { R9075 += 1, R9013 += 1, R8989 += 1, R8990 += 1 };
  s1 -> s1 [0, 65535] { R9075 += 1, R9013 += 1, R8990 += 1, R8991 += 1 };
  s1 -> s6 [0, 65535] { R9075 += 1, R9013 += 1 };
  s1 -> s4 [0, 65535] { R9075 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9075 += 1, R9013 += 1, R8990 += 1, R8991 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9075 += 1, R9012 += 1, R9013 += 1 };
  s2 -> s3 [0, 65535] { R9075 += 1, R9013 += 1, R8989 += 1, R8990 += 1 };
  s3 -> s1 [0, 65535] { R9075 += 1, R9013 += 1, R8990 += 1, R8991 += 1 };
  s3 -> s4 [0, 65535] { R9075 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9075 += 1, R9013 += 1, R8989 += 1, R8990 += 1 };
  s4 -> s4 [0, 65535] { R9075 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9075 += 1, R9013 += 1 };
  s6 -> s4 [0, 65535] { R9075 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s0 -> s0 [0, 65535] { R9076 += 1, R9077 += 1 };
  s0 -> s2 [0, 65535] { R9077 += 1, R9014 += 1, R9015 += 1 };
  s0 -> s3 [0, 65535] { R9077 += 1, R9015 += 1, R8994 += 1, R8995 += 1 };
  s0 -> s4 [82, 82] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s0 -> s5 [82, 82] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s0 -> s1 [86, 65535] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s1 -> s1 [0, 81] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R9077 += 1 };
  s1 -> s1 [0, 65535] { R9077 += 1, R9015 += 1 };
  s1 -> s4 [82, 82] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s1 -> s5 [82, 82] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s1 -> s1 [86, 65535] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s2 -> s1 [0, 81] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9077 += 1, R9014 += 1, R9015 += 1 };
  s2 -> s3 [0, 65535] { R9077 += 1, R9015 += 1, R8994 += 1, R8995 += 1 };
  s2 -> s4 [82, 82] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s2 -> s5 [82, 82] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s2 -> s1 [86, 65535] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s3 -> s1 [0, 81] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R9077 += 1 };
  s3 -> s3 [0, 65535] { R9077 += 1, R9015 += 1, R8994 += 1, R8995 += 1 };
  s3 -> s4 [82, 82] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s3 -> s5 [82, 82] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s3 -> s1 [86, 65535] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9077 += 1 };
  s4 -> s4 [0, 65535] { R9077 += 1, R9015 += 1 };
  s5 -> s5 [0, 82] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9077 += 1 };
  s5 -> s5 [0, 65535] { R9077 += 1, R9015 += 1 };
  s5 -> s5 [86, 65535] { R9077 += 1, R9015 += 1, R8995 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9077 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9079 += 1, R9035 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R9079 += 1, R9034 += 1, R9035 += 1 };
  s0 -> s0 [0, 65535] { R9078 += 1, R9079 += 1 };
  s1 -> s1 [0, 65535] { R9079 += 1, R9035 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9079 += 1 };
  s2 -> s1 [0, 65535] { R9079 += 1, R9035 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9079 += 1, R9034 += 1, R9035 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9079 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R9081 += 1, R9037 += 1 };
  s0 -> s0 [0, 65535] { R9080 += 1, R9081 += 1 };
  s0 -> s2 [0, 65535] { R9081 += 1, R9036 += 1, R9037 += 1 };
  s0 -> s3 [81, 81] { R9081 += 1, R9037 += 1 };
  s0 -> s4 [81, 81] { R9081 += 1, R9037 += 1 };
  s0 -> s5 [82, 82] { R9081 += 1, R9037 += 1 };
  s0 -> s1 [83, 65535] { R9081 += 1, R9037 += 1 };
  s1 -> s1 [0, 80] { R9081 += 1, R9037 += 1 };
  s1 -> s3 [81, 81] { R9081 += 1, R9037 += 1 };
  s1 -> s4 [81, 81] { R9081 += 1, R9037 += 1 };
  s1 -> s5 [82, 82] { R9081 += 1, R9037 += 1 };
  s1 -> s1 [83, 65535] { R9081 += 1, R9037 += 1 };
  s2 -> s1 [0, 80] { R9081 += 1, R9037 += 1 };
  s2 -> s2 [0, 65535] { R9081 += 1, R9036 += 1, R9037 += 1 };
  s2 -> s3 [81, 81] { R9081 += 1, R9037 += 1 };
  s2 -> s4 [81, 81] { R9081 += 1, R9037 += 1 };
  s2 -> s5 [82, 82] { R9081 += 1, R9037 += 1 };
  s2 -> s1 [83, 65535] { R9081 += 1, R9037 += 1 };
  s4 -> s4 [0, 81] { R9081 += 1, R9037 += 1 };
  s4 -> s7 [82, 82] { R9081 += 1, R9037 += 1 };
  s4 -> s4 [83, 65535] { R9081 += 1, R9037 += 1 };
  s5 -> s5 [0, 80] { R9081 += 1, R9037 += 1 };
  s5 -> s5 [0, 65535] { R9081 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R9081 += 1, R9037 += 1 };
  s5 -> s8 [81, 81] { R9081 += 1, R9037 += 1 };
  s5 -> s5 [82, 65535] { R9081 += 1, R9037 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R9081 += 1 };
  s7 -> s7 [0, 65535] { R9081 += 1, R9037 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9081 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R9081 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R9083 += 1, R9039 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R9083 += 1, R9038 += 1, R9039 += 1 };
  s0 -> s0 [0, 65535] { R9082 += 1, R9083 += 1 };
  s0 -> s3 [81, 81] { R9083 += 1, R9039 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R9083 += 1, R9039 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R9083 += 1, R9039 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R9083 += 1, R9039 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R9083 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R9083 += 1, R9039 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R9083 += 1, R9039 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R9083 += 1, R9039 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R9083 += 1, R9039 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R9083 += 1, R9038 += 1, R9039 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R9083 += 1, R9039 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R9083 += 1, R9039 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R9083 += 1, R9039 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R9083 += 1, R9039 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R9083 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9083 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9083 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R9085 += 1, R9041 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R9084 += 1, R9085 += 1 };
  s0 -> s2 [0, 65535] { R9085 += 1, R9040 += 1, R9041 += 1 };
  s0 -> s3 [81, 81] { R9085 += 1, R9041 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R9085 += 1, R9041 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R9085 += 1, R9041 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R9085 += 1, R9041 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9085 += 1 };
  s1 -> s3 [81, 81] { R9085 += 1, R9041 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R9085 += 1, R9041 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R9085 += 1, R9041 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R9085 += 1, R9041 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9085 += 1, R9040 += 1, R9041 += 1 };
  s2 -> s3 [81, 81] { R9085 += 1, R9041 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R9085 += 1, R9041 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R9085 += 1, R9041 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9085 += 1, R9041 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R9085 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9085 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9085 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R9086 += 1, R9087 += 1 };
  s0 -> s2 [0, 65535] { R9087 += 1, R9042 += 1, R9043 += 1 };
  s0 -> s3 [81, 81] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R9087 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9087 += 1, R9042 += 1, R9043 += 1 };
  s2 -> s3 [81, 81] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9087 += 1 };
  s3 -> s3 [0, 65535] { R9087 += 1, R9043 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9087 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9087 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 80] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s3 [0, 65535] { R9089 += 1, R9044 += 1, R9045 += 1 };
  s0 -> s0 [0, 65535] { R9088 += 1, R9089 += 1 };
  s0 -> s4 [81, 81] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [81, 81] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [81, 81] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [81, 81] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [82, 65535] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [82, 65535] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 80] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 80] { R9089 += 1, R9045 += 1 };
  s1 -> s12 [81, 81] { R9089 += 1, R9045 += 1 };
  s1 -> s5 [81, 81] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s7 [81, 81] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s8 [81, 81] { R9089 += 1, R9045 += 1 };
  s1 -> s1 [82, 65535] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [82, 65535] { R9089 += 1, R9045 += 1 };
  s2 -> s1 [0, 80] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 80] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [81, 81] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s5 [81, 81] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [81, 81] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [81, 81] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [82, 65535] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [82, 65535] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 80] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 80] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R9089 += 1, R9044 += 1, R9045 += 1 };
  s3 -> s4 [81, 81] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [81, 81] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [81, 81] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [81, 81] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [82, 65535] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [82, 65535] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s4 [0, 65535] { R9089 += 1, R9045 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s5 [0, 65535] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s5 [0, 65535] { R9089 += 1, R9045 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R9089 += 1, R9045 += 1 };
  s8 -> s9 [0, 65535] { R9089 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R9089 += 1, R9045 += 1 };
  s9 -> s9 [0, 65535] { R9089 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 80] { R9089 += 1, R9045 += 1 };
  s11 -> s11 [0, 65535] { R9089 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [81, 81] { R9089 += 1, R9045 += 1 };
  s11 -> s8 [81, 81] { R9089 += 1, R9045 += 1 };
  s11 -> s11 [82, 65535] { R9089 += 1, R9045 += 1 };
  s12 -> s12 [0, 65535] { R9089 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s2 [0, 80] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s0 -> s3 [0, 65535] { R9091 += 1, R9046 += 1, R9047 += 1 };
  s0 -> s0 [0, 65535] { R9090 += 1, R9091 += 1 };
  s0 -> s4 [81, 81] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s0 -> s5 [81, 81] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s6 [81, 81] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s0 -> s7 [81, 81] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s2 [82, 82] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s0 -> s1 [82, 65535] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s2 [86, 65535] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s1 -> s1 [0, 80] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s2 [0, 80] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s1 -> s4 [81, 81] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s1 -> s5 [81, 81] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s6 [81, 81] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s1 -> s7 [81, 81] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s2 [82, 82] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s1 -> s1 [82, 65535] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s2 [86, 65535] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s2 -> s2 [0, 80] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R9091 += 1 };
  s2 -> s4 [81, 81] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s2 -> s6 [81, 81] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s2 -> s2 [82, 82] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s2 -> s2 [86, 65535] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s3 -> s1 [0, 80] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s2 [0, 80] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s3 -> s3 [0, 65535] { R9091 += 1, R9046 += 1, R9047 += 1 };
  s3 -> s4 [81, 81] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s3 -> s5 [81, 81] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s6 [81, 81] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s3 -> s7 [81, 81] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s2 [82, 82] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s3 -> s1 [82, 65535] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s2 [86, 65535] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s4 -> s4 [0, 65535] { R9091 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 82] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s5 -> s5 [0, 65535] { R9091 += 1, R9047 += 1, R8982 += 1, R8983 += 1 };
  s5 -> s6 [86, 65535] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s6 -> s6 [0, 82] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s6 -> s6 [0, 65535] { R9091 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [86, 65535] { R9091 += 1, R9047 += 1, R8983 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s6, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s0 -> s0 [0, 65535] { R9092 += 1, R9093 += 1 };
  s0 -> s2 [0, 65535] { R9093 += 1, R9048 += 1, R9049 += 1 };
  s0 -> s3 [81, 81] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s0 -> s4 [81, 81] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s0 -> s1 [82, 65535] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s1 [0, 80] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9093 += 1 };
  s1 -> s3 [81, 81] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s4 [81, 81] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s1 [82, 65535] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s1 [0, 80] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9093 += 1, R9048 += 1, R9049 += 1 };
  s2 -> s3 [81, 81] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s4 [81, 81] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s1 [82, 65535] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9093 += 1 };
  s3 -> s3 [0, 65535] { R9093 += 1, R9049 += 1, R8986 += 1, R8987 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9093 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9093 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s0 -> s2 [0, 65535] { R9095 += 1, R9050 += 1, R9051 += 1 };
  s0 -> s0 [0, 65535] { R9094 += 1, R9095 += 1 };
  s0 -> s3 [81, 81] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s0 -> s4 [81, 81] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s0 -> s1 [82, 65535] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s1 -> s1 [0, 80] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s1 -> s1 [0, 65535] { R9095 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s1 -> s4 [81, 81] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s1 -> s1 [82, 65535] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s2 -> s1 [0, 80] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s2 -> s2 [0, 65535] { R9095 += 1, R9050 += 1, R9051 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s2 -> s4 [81, 81] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s2 -> s1 [82, 65535] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s3 -> s3 [0, 65535] { R9095 += 1, R9051 += 1, R8992 += 1, R8993 += 1 };
  s3 -> s6 [0, 65535] { R9095 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9095 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9095 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R1 = R9011 && R2 = R9095 && R20 - R9095 = -1 && R21 = R9095 && R22 - R9095 = -1 && R23 = R9095 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8985 + -1*R8983 - R53 = 0 && R52 + R8984 + R8982 = 0 && R9010 = 0 && R9036 = 0 && R9037 = 0 && R9044 = 0 && R9045 = 0 && R9046 = 0 && R9047 = 0 && R9052 = 0 && R9053 = R9095 && R9054 = 0 && R9055 = R9095 && R9056 = 0 && R9057 = R9095 && R9058 = 0 && R9059 = R9095 && R9060 = 0 && R9061 = R9095 && R9062 = 0 && R9063 = R9095 && R9064 = 0 && R9065 = R9095 && R9066 = 0 && R9067 = R9095 && R9068 = 0 && R9069 = R9095 && R9070 = 0 && R9071 = R9095 && R9072 = 0 && R9073 = R9095 && R9074 = 0 && R9075 = R9095 && R9076 = 0 && R9077 = R9095 && R9078 = 0 && R9079 = R9095 && R9080 = 0 && R9081 = R9095 && R9082 = 0 && R9083 = R9095 && R9084 = 0 && R9085 = R9095 && R9086 = 0 && R9087 = R9095 && R9088 = 0 && R9089 = R9095 && R9090 = 0 && R9091 = R9095 && R9092 = 0 && R9093 = R9095 && R9094 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8985 + -1*R8983 - R53 < 1 && -1 < R9011 && 0 < R9095 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R42 + R72 + R70 = 0 || R53 + R8985 + R8983 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R8985 + R8983 < 1))) && (R8996 != 0 || R8997 = R9011 || (R17 = 0 && R9011 = 0)) && (R8998 != 0 || R8999 = R9011 || (R17 = 0 && R9011 = 0)) && (R9000 != 0 || R9001 = R9011 || (R17 = 0 && R9011 = 0)) && (R9002 != 0 || R9003 = R9011 || (R17 = 0 && R9011 = 0)) && (R9004 != 0 || R9005 = R9011 || (R17 = 0 && R9011 = 0)) && (R9006 != 0 || R9007 = R9011 || (R17 = 0 && R9011 = 0)) && (R9008 != 0 || R9009 = R9011 || (R17 = 0 && R9011 = 0)) && (R9012 != 0 || R9011 = R9013 || (R17 = 0 && R9011 = 0)) && (R9014 != 0 || R9011 = R9015 || (R17 = 0 && R9011 = 0)) && (R18 = 0 || (R9034 = 0 && R9035 = 0)) && (R18 = 0 || (R9038 = 0 && R9039 = 0)) && (R18 = 0 || (R9040 = 0 && R9041 = 0)) && (R18 = 0 || (R9042 = 0 && R9043 = 0)) && (R18 = 0 || (R9048 = 0 && R9049 = 0)) && (R18 = 0 || (R9050 = 0 && R9051 = 0)) && (R19 = 0 || (R9016 = 0 && R9017 = 0)) && (R19 = 0 || (R9018 = 0 && R9019 = 0)) && (R19 = 0 || (R9020 = 0 && R9021 = 0)) && (R19 = 0 || (R9022 = 0 && R9023 = 0)) && (R19 = 0 || (R9024 = 0 && R9025 = 0)) && (R19 = 0 || (R9026 = 0 && R9027 = 0)) && (R19 = 0 || (R9028 = 0 && R9029 = 0)) && (R19 = 0 || (R9030 = 0 && R9031 = 0)) && (R19 = 0 || (R9032 = 0 && R9033 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0)) && (R58 + R8991 + R8988 = 0 || (R56 + R8989 + R8986 = 0 && R57 + R8990 + R8987 = 0)) && (R58 + R8991 + R8988 = 0 || (R62 + R8994 + R8992 = 0 && R63 + R8995 + R8993 = 0)) && (R8996 = 0 || (R17 = 0 && R9011 = 0)) && (R8998 = 0 || (R17 = 0 && R9011 = 0)) && (R9000 = 0 || (R17 = 0 && R9011 = 0)) && (R9002 = 0 || (R17 = 0 && R9011 = 0)) && (R9004 = 0 || (R17 = 0 && R9011 = 0)) && (R9006 = 0 || (R17 = 0 && R9011 = 0)) && (R9008 = 0 || (R17 = 0 && R9011 = 0)) && (R9012 = 0 || (R17 = 0 && R9011 = 0)) && (R9014 = 0 || (R17 = 0 && R9011 = 0));
// End of Parikh automata intersection problem
