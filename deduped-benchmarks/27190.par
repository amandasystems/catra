// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R2624, R2625, R2626, R2627, R2628, R2629, R27, R2942, R2943, R2944, R2945, R2946, R2947, R2948, R2949, R2950, R2951, R2952, R2953, R2954, R2955, R2956, R2957, R2958, R2959, R2960, R2961, R2962, R2963, R2964, R2965, R2966, R2967, R2968, R2969, R2970, R2971, R2972, R2973, R2974, R2975, R2976, R2977, R2978, R2979, R2980, R2981, R2982, R2983, R2984, R2985, R2986, R2987, R2988, R2989, R2990, R2991, R2992, R2993, R2994, R2995, R2996, R2997, R2998, R2999, R3, R3000, R3001, R3002, R3003, R3004, R3005, R3006, R3007, R3008, R3009, R3010, R3011, R3012, R3013, R3014, R3015, R3016, R3017, R3018, R3019, R3020, R3021, R3022, R3023, R3024, R3025, R3026, R3027, R3028, R3029, R3030, R3031, R3032, R3033, R3034, R3035, R3036, R3037, R3038, R3039, R3040, R3041, R3042, R3043, R3044, R3045, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R2966 += 1, R2967 += 1 };
  s0 -> s1 [0, 65535] { R2967 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2967 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R2969 += 1 };
  s0 -> s0 [0, 65535] { R2968 += 1, R2969 += 1 };
  s0 -> s2 [81, 81] { R2969 += 1 };
  s0 -> s3 [81, 81] { R2969 += 1 };
  s0 -> s1 [83, 65535] { R2969 += 1 };
  s1 -> s1 [0, 80] { R2969 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2969 += 1 };
  s1 -> s3 [81, 81] { R2969 += 1 };
  s1 -> s1 [83, 65535] { R2969 += 1 };
  s2 -> s2 [0, 81] { R2969 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R2969 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R2971 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R2970 += 1, R2971 += 1 };
  s0 -> s2 [81, 81] { R2971 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R2971 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R2971 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R2971 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2971 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R2971 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R2971 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2971 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R2973 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R2972 += 1, R2973 += 1 };
  s0 -> s2 [81, 81] { R2973 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R2973 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R2973 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R2973 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2973 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R2973 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R2973 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2973 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R2975 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2974 += 1, R2975 += 1 };
  s0 -> s2 [81, 81] { R2975 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R2975 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R2975 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R2975 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2975 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R2975 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R2975 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2975 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R2977 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2976 += 1, R2977 += 1 };
  s0 -> s2 [81, 81] { R2977 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R2977 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R2977 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R2977 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2977 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R2977 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R2977 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R2977 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R2979 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R2978 += 1, R2979 += 1 };
  s0 -> s2 [81, 81] { R2979 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R2979 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R2979 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R2979 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2979 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R2979 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R2979 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2979 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R2981 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R2980 += 1, R2981 += 1 };
  s0 -> s2 [81, 81] { R2981 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R2981 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R2981 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R2981 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2981 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R2981 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R2981 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2981 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R2983 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R2982 += 1, R2983 += 1 };
  s0 -> s2 [81, 81] { R2983 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R2983 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R2983 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R2983 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2983 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R2983 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R2983 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2983 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R3003 += 1 };
  s0 -> s0 [0, 65535] { R3002 += 1, R3003 += 1 };
  s0 -> s2 [81, 81] { R3003 += 1 };
  s0 -> s1 [82, 65535] { R3003 += 1 };
  s1 -> s1 [0, 80] { R3003 += 1 };
  s1 -> s2 [81, 81] { R3003 += 1 };
  s1 -> s1 [82, 65535] { R3003 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3003 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3004 += 1, R3005 += 1 };
  s0 -> s1 [0, 65535] { R3005 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3005 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R3007 += 1 };
  s0 -> s0 [0, 65535] { R3006 += 1, R3007 += 1 };
  s0 -> s2 [0, 65535] { R3007 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R3007 += 1 };
  s0 -> s1 [82, 65535] { R3007 += 1 };
  s1 -> s1 [0, 80] { R3007 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R3007 += 1 };
  s1 -> s1 [82, 65535] { R3007 += 1 };
  s2 -> s1 [0, 80] { R3007 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3007 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R3007 += 1 };
  s2 -> s1 [82, 65535] { R3007 += 1 };
  s3 -> s3 [0, 65535] { R3007 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R3009 += 1, R2947 += 1 };
  s0 -> s0 [0, 65535] { R3008 += 1, R3009 += 1 };
  s0 -> s2 [0, 65535] { R3009 += 1, R2946 += 1, R2947 += 1 };
  s0 -> s1 [82, 65535] { R3009 += 1, R2947 += 1 };
  s1 -> s1 [0, 80] { R3009 += 1, R2947 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3009 += 1 };
  s1 -> s1 [82, 65535] { R3009 += 1, R2947 += 1 };
  s2 -> s1 [0, 80] { R3009 += 1, R2947 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3009 += 1, R2946 += 1, R2947 += 1 };
  s2 -> s1 [82, 65535] { R3009 += 1, R2947 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3011 += 1, R2949 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R3011 += 1, R2948 += 1, R2949 += 1 };
  s0 -> s0 [0, 65535] { R3010 += 1, R3011 += 1 };
  s1 -> s4 [0, 65535] { R3011 += 1 };
  s1 -> s1 [0, 65535] { R3011 += 1, R2949 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3011 += 1, R2949 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R3011 += 1, R2948 += 1, R2949 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3011 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R3013 += 1, R2951 += 1 };
  s0 -> s0 [0, 65535] { R3012 += 1, R3013 += 1 };
  s0 -> s2 [0, 65535] { R3013 += 1, R2950 += 1, R2951 += 1 };
  s1 -> s1 [0, 65535] { R3013 += 1, R2951 += 1 };
  s1 -> s4 [0, 65535] { R3013 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3013 += 1, R2951 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3013 += 1, R2950 += 1, R2951 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3013 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3015 += 1, R2953 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R3015 += 1, R2952 += 1, R2953 += 1 };
  s0 -> s0 [0, 65535] { R3014 += 1, R3015 += 1 };
  s1 -> s1 [0, 65535] { R3015 += 1, R2953 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R3015 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3015 += 1, R2953 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R3015 += 1, R2952 += 1, R2953 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3015 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R3017 += 1, R2955 += 1 };
  s0 -> s0 [0, 65535] { R3016 += 1, R3017 += 1 };
  s0 -> s2 [0, 65535] { R3017 += 1, R2954 += 1, R2955 += 1 };
  s0 -> s3 [0, 65535] { R3017 += 1, R2955 += 1, R69 += 1 };
  s0 -> s1 [83, 65535] { R3017 += 1, R2955 += 1 };
  s1 -> s1 [0, 81] { R3017 += 1, R2955 += 1 };
  s1 -> s1 [0, 65535] { R3017 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R3017 += 1, R2955 += 1 };
  s2 -> s1 [0, 81] { R3017 += 1, R2955 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3017 += 1, R2954 += 1, R2955 += 1 };
  s2 -> s3 [0, 65535] { R3017 += 1, R2955 += 1, R69 += 1 };
  s2 -> s1 [83, 65535] { R3017 += 1, R2955 += 1 };
  s3 -> s1 [0, 81] { R3017 += 1, R2955 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3017 += 1, R2955 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R3017 += 1 };
  s3 -> s1 [83, 65535] { R3017 += 1, R2955 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3017 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R3019 += 1, R2957 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R3019 += 1, R2957 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R3018 += 1, R3019 += 1 };
  s0 -> s3 [0, 65535] { R3019 += 1, R2956 += 1, R2957 += 1 };
  s0 -> s1 [83, 65535] { R3019 += 1, R2957 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R3019 += 1, R2957 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3019 += 1, R2957 += 1 };
  s1 -> s5 [0, 65535] { R3019 += 1 };
  s1 -> s1 [83, 65535] { R3019 += 1, R2957 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R3019 += 1, R2957 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R3019 += 1, R2957 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3019 += 1 };
  s2 -> s1 [83, 65535] { R3019 += 1, R2957 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R3019 += 1, R2957 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R3019 += 1, R2957 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3019 += 1, R2956 += 1, R2957 += 1 };
  s3 -> s1 [83, 65535] { R3019 += 1, R2957 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3019 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R3020 += 1, R3021 += 1 };
  s0 -> s1 [0, 65535] { R3021 += 1, R2959 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R3021 += 1, R2958 += 1, R2959 += 1 };
  s0 -> s3 [0, 65535] { R3021 += 1, R2959 += 1, R78 += 1, R79 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3021 += 1 };
  s1 -> s1 [0, 65535] { R3021 += 1, R2959 += 1, R77 += 1, R78 += 1 };
  s1 -> s3 [0, 65535] { R3021 += 1, R2959 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3021 += 1, R2959 += 1, R77 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R3021 += 1, R2958 += 1, R2959 += 1 };
  s2 -> s3 [0, 65535] { R3021 += 1, R2959 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3021 += 1 };
  s3 -> s6 [0, 65535] { R3021 += 1, R2959 += 1 };
  s3 -> s3 [0, 65535] { R3021 += 1, R2959 += 1, R78 += 1, R79 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3021 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3021 += 1 };
  s6 -> s6 [0, 65535] { R3021 += 1, R2959 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R3023 += 1, R2961 += 1, R2622 += 1, R2623 += 1 };
  s0 -> s3 [0, 65535] { R3023 += 1, R2960 += 1, R2961 += 1 };
  s0 -> s0 [0, 65535] { R3022 += 1, R3023 += 1 };
  s0 -> s4 [85, 85] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s0 -> s1 [86, 65535] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s1 -> s1 [0, 82] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s1 -> s4 [85, 85] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s1 -> s1 [86, 65535] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s2 -> s1 [0, 82] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R3023 += 1, R2961 += 1, R2622 += 1, R2623 += 1 };
  s2 -> s4 [85, 85] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s2 -> s1 [86, 65535] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s3 -> s1 [0, 82] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s3 -> s2 [0, 65535] { R3023 += 1, R2961 += 1, R2622 += 1, R2623 += 1 };
  s3 -> s3 [0, 65535] { R3023 += 1, R2960 += 1, R2961 += 1 };
  s3 -> s4 [85, 85] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s3 -> s1 [86, 65535] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s4 -> s4 [0, 82] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3023 += 1 };
  s4 -> s4 [0, 65535] { R3023 += 1, R2961 += 1 };
  s4 -> s4 [85, 65535] { R3023 += 1, R2961 += 1, R2623 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3023 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3025 += 1, R2963 += 1, R2628 += 1, R2629 += 1 };
  s0 -> s2 [0, 65535] { R3025 += 1, R2963 += 1, R2627 += 1, R2628 += 1 };
  s0 -> s0 [0, 65535] { R3024 += 1, R3025 += 1 };
  s0 -> s3 [0, 65535] { R3025 += 1, R2962 += 1, R2963 += 1 };
  s1 -> s1 [0, 65535] { R3025 += 1, R2963 += 1, R2628 += 1, R2629 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R3025 += 1, R2963 += 1 };
  s1 -> s5 [0, 65535] { R3025 += 1 };
  s2 -> s1 [0, 65535] { R3025 += 1, R2963 += 1, R2628 += 1, R2629 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3025 += 1, R2963 += 1, R2627 += 1, R2628 += 1 };
  s2 -> s5 [0, 65535] { R3025 += 1 };
  s3 -> s1 [0, 65535] { R3025 += 1, R2963 += 1, R2628 += 1, R2629 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3025 += 1, R2963 += 1, R2627 += 1, R2628 += 1 };
  s3 -> s3 [0, 65535] { R3025 += 1, R2962 += 1, R2963 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3025 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3025 += 1, R2963 += 1 };
  s6 -> s5 [0, 65535] { R3025 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R3026 += 1, R3027 += 1 };
  s0 -> s1 [0, 65535] { R3027 += 1, R2965 += 1 };
  s0 -> s2 [0, 65535] { R3027 += 1, R2964 += 1, R2965 += 1 };
  s1 -> s1 [0, 65535] { R3027 += 1, R2965 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3027 += 1 };
  s2 -> s1 [0, 65535] { R3027 += 1, R2965 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3027 += 1, R2964 += 1, R2965 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3027 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3029 += 1, R2985 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R3029 += 1, R2984 += 1, R2985 += 1 };
  s0 -> s0 [0, 65535] { R3028 += 1, R3029 += 1 };
  s1 -> s1 [0, 65535] { R3029 += 1, R2985 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R3029 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3029 += 1, R2985 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R3029 += 1, R2984 += 1, R2985 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3029 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R3031 += 1, R2987 += 1 };
  s0 -> s2 [0, 65535] { R3031 += 1, R2986 += 1, R2987 += 1 };
  s0 -> s0 [0, 65535] { R3030 += 1, R3031 += 1 };
  s0 -> s3 [81, 81] { R3031 += 1, R2987 += 1 };
  s0 -> s4 [81, 81] { R3031 += 1, R2987 += 1 };
  s0 -> s5 [82, 82] { R3031 += 1, R2987 += 1 };
  s0 -> s1 [83, 65535] { R3031 += 1, R2987 += 1 };
  s1 -> s1 [0, 80] { R3031 += 1, R2987 += 1 };
  s1 -> s3 [81, 81] { R3031 += 1, R2987 += 1 };
  s1 -> s4 [81, 81] { R3031 += 1, R2987 += 1 };
  s1 -> s5 [82, 82] { R3031 += 1, R2987 += 1 };
  s1 -> s1 [83, 65535] { R3031 += 1, R2987 += 1 };
  s2 -> s1 [0, 80] { R3031 += 1, R2987 += 1 };
  s2 -> s2 [0, 65535] { R3031 += 1, R2986 += 1, R2987 += 1 };
  s2 -> s3 [81, 81] { R3031 += 1, R2987 += 1 };
  s2 -> s4 [81, 81] { R3031 += 1, R2987 += 1 };
  s2 -> s5 [82, 82] { R3031 += 1, R2987 += 1 };
  s2 -> s1 [83, 65535] { R3031 += 1, R2987 += 1 };
  s3 -> s3 [0, 81] { R3031 += 1, R2987 += 1 };
  s3 -> s8 [82, 82] { R3031 += 1, R2987 += 1 };
  s3 -> s3 [83, 65535] { R3031 += 1, R2987 += 1 };
  s5 -> s5 [0, 80] { R3031 += 1, R2987 += 1 };
  s5 -> s5 [0, 65535] { R3031 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R3031 += 1, R2987 += 1 };
  s5 -> s8 [81, 81] { R3031 += 1, R2987 += 1 };
  s5 -> s5 [82, 65535] { R3031 += 1, R2987 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3031 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R3031 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3031 += 1, R2987 += 1 };
  s9 -> s9 [0, 65535] { R3031 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R3033 += 1, R2989 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R3033 += 1, R2988 += 1, R2989 += 1 };
  s0 -> s0 [0, 65535] { R3032 += 1, R3033 += 1 };
  s0 -> s3 [81, 81] { R3033 += 1, R2989 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R3033 += 1, R2989 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R3033 += 1, R2989 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R3033 += 1, R2989 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R3033 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R3033 += 1, R2989 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R3033 += 1, R2989 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R3033 += 1, R2989 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R3033 += 1, R2989 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3033 += 1, R2988 += 1, R2989 += 1 };
  s2 -> s3 [81, 81] { R3033 += 1, R2989 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R3033 += 1, R2989 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R3033 += 1, R2989 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R3033 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3033 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3033 += 1, R2989 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R3033 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R3035 += 1, R2991 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R3035 += 1, R2990 += 1, R2991 += 1 };
  s0 -> s0 [0, 65535] { R3034 += 1, R3035 += 1 };
  s0 -> s3 [81, 81] { R3035 += 1, R2991 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R3035 += 1, R2991 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R3035 += 1, R2991 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R3035 += 1, R2991 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R3035 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R3035 += 1, R2991 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R3035 += 1, R2991 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R3035 += 1, R2991 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R3035 += 1, R2991 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R3035 += 1, R2990 += 1, R2991 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R3035 += 1, R2991 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R3035 += 1, R2991 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R3035 += 1, R2991 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R3035 += 1, R2991 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R3035 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3035 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3035 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R3036 += 1, R3037 += 1 };
  s0 -> s2 [0, 65535] { R3037 += 1, R2992 += 1, R2993 += 1 };
  s0 -> s3 [81, 81] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R3037 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R3037 += 1, R2992 += 1, R2993 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R3037 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3037 += 1 };
  s4 -> s4 [0, 65535] { R3037 += 1, R2993 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3037 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R3038 += 1, R3039 += 1 };
  s0 -> s2 [0, 65535] { R3039 += 1, R2994 += 1, R2995 += 1 };
  s0 -> s3 [81, 81] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [81, 81] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [82, 65535] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 80] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R3039 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [81, 81] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [82, 65535] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 80] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R3039 += 1, R2994 += 1, R2995 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [81, 81] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [82, 65535] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R3039 += 1, R2995 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R3039 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3039 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3039 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s0 [0, 65535] { R3040 += 1, R3041 += 1 };
  s0 -> s2 [0, 65535] { R3041 += 1, R2996 += 1, R2997 += 1 };
  s0 -> s3 [81, 81] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s4 [81, 81] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s1 [82, 65535] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 80] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3041 += 1 };
  s1 -> s3 [81, 81] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s4 [81, 81] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [82, 65535] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [0, 80] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3041 += 1, R2996 += 1, R2997 += 1 };
  s2 -> s3 [81, 81] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s4 [81, 81] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [82, 65535] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s6 [0, 65535] { R3041 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3041 += 1, R2997 += 1, R2620 += 1, R2621 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3041 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3041 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s0 -> s2 [0, 65535] { R3043 += 1, R2998 += 1, R2999 += 1 };
  s0 -> s0 [0, 65535] { R3042 += 1, R3043 += 1 };
  s0 -> s3 [81, 81] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s0 -> s4 [81, 81] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s0 -> s1 [82, 65535] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s1 [0, 80] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3043 += 1 };
  s1 -> s3 [81, 81] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s4 [81, 81] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s1 [82, 65535] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s1 [0, 80] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s2 [0, 65535] { R3043 += 1, R2998 += 1, R2999 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s4 [81, 81] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s1 [82, 65535] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3043 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3043 += 1 };
  s4 -> s4 [0, 65535] { R3043 += 1, R2999 += 1, R2624 += 1, R2625 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3043 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s0 -> s2 [0, 80] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s0 -> s3 [0, 65535] { R3045 += 1, R3000 += 1, R3001 += 1 };
  s0 -> s0 [0, 65535] { R3044 += 1, R3045 += 1 };
  s0 -> s4 [81, 81] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s0 -> s5 [81, 81] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s0 -> s6 [81, 81] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s0 -> s7 [81, 81] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s0 -> s8 [82, 82] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s0 -> s1 [82, 65535] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s0 -> s2 [86, 65535] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s1 -> s1 [0, 80] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s1 -> s2 [0, 80] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s1 -> s4 [81, 81] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s1 -> s5 [81, 81] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s1 -> s6 [81, 81] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s1 -> s7 [81, 81] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s1 -> s8 [82, 82] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s1 -> s1 [82, 65535] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s1 -> s2 [86, 65535] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s2 -> s2 [0, 80] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s2 -> s6 [81, 81] { R3045 += 1, R3001 += 1 };
  s2 -> s7 [81, 81] { R3045 += 1, R3001 += 1 };
  s2 -> s8 [82, 82] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s2 -> s2 [82, 65535] { R3045 += 1, R3001 += 1 };
  s2 -> s2 [86, 65535] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s3 -> s1 [0, 80] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s3 -> s2 [0, 80] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s3 -> s3 [0, 65535] { R3045 += 1, R3000 += 1, R3001 += 1 };
  s3 -> s4 [81, 81] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s3 -> s5 [81, 81] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s3 -> s6 [81, 81] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s3 -> s7 [81, 81] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s3 -> s8 [82, 82] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s3 -> s1 [82, 65535] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s3 -> s2 [86, 65535] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s4 -> s7 [0, 81] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s4 -> s4 [0, 65535] { R3045 += 1, R3001 += 1, R2942 += 1, R2943 += 1 };
  s4 -> s11 [82, 82] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s4 -> s7 [86, 65535] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s7 -> s7 [0, 81] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s7 -> s7 [0, 65535] { R3045 += 1, R3001 += 1 };
  s7 -> s11 [82, 82] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s7 -> s7 [86, 65535] { R3045 += 1, R3001 += 1, R2943 += 1 };
  s8 -> s8 [0, 80] { R3045 += 1, R3001 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3045 += 1 };
  s8 -> s10 [81, 81] { R3045 += 1, R3001 += 1 };
  s8 -> s11 [81, 81] { R3045 += 1, R3001 += 1 };
  s8 -> s8 [82, 65535] { R3045 += 1, R3001 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3045 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R3045 += 1 };
  s11 -> s11 [0, 65535] { R3045 += 1, R3001 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3045 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R1 = R2961 && R2 = R3045 && R20 - R3045 = -1 && R21 = R3045 && R22 - R3045 = -1 && R23 = R3045 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R2960 = 0 && R2986 = 0 && R2987 = 0 && R3000 = 0 && R3001 = 0 && R3002 = 0 && R3003 = R3045 && R3004 = 0 && R3005 = R3045 && R3006 = 0 && R3007 = R3045 && R3008 = 0 && R3009 = R3045 && R3010 = 0 && R3011 = R3045 && R3012 = 0 && R3013 = R3045 && R3014 = 0 && R3015 = R3045 && R3016 = 0 && R3017 = R3045 && R3018 = 0 && R3019 = R3045 && R3020 = 0 && R3021 = R3045 && R3022 = 0 && R3023 = R3045 && R3024 = 0 && R3025 = R3045 && R3026 = 0 && R3027 = R3045 && R3028 = 0 && R3029 = R3045 && R3030 = 0 && R3031 = R3045 && R3032 = 0 && R3033 = R3045 && R3034 = 0 && R3035 = R3045 && R3036 = 0 && R3037 = R3045 && R3038 = 0 && R3039 = R3045 && R3040 = 0 && R3041 = R3045 && R3042 = 0 && R3043 = R3045 && R3044 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R2961 && 0 < R3045 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R2946 != 0 || R2947 = R2961 || (R17 = 0 && R2961 = 0)) && (R2948 != 0 || R2949 = R2961 || (R17 = 0 && R2961 = 0)) && (R2950 != 0 || R2951 = R2961 || (R17 = 0 && R2961 = 0)) && (R2952 != 0 || R2953 = R2961 || (R17 = 0 && R2961 = 0)) && (R2954 != 0 || R2955 = R2961 || (R17 = 0 && R2961 = 0)) && (R2956 != 0 || R2957 = R2961 || (R17 = 0 && R2961 = 0)) && (R2958 != 0 || R2959 = R2961 || (R17 = 0 && R2961 = 0)) && (R2962 != 0 || R2961 = R2963 || (R17 = 0 && R2961 = 0)) && (R2964 != 0 || R2961 = R2965 || (R17 = 0 && R2961 = 0)) && (R18 = 0 || (R2984 = 0 && R2985 = 0)) && (R18 = 0 || (R2988 = 0 && R2989 = 0)) && (R18 = 0 || (R2990 = 0 && R2991 = 0)) && (R18 = 0 || (R2992 = 0 && R2993 = 0)) && (R18 = 0 || (R2994 = 0 && R2995 = 0)) && (R18 = 0 || (R2996 = 0 && R2997 = 0)) && (R18 = 0 || (R2998 = 0 && R2999 = 0)) && (R19 = 0 || (R2966 = 0 && R2967 = 0)) && (R19 = 0 || (R2968 = 0 && R2969 = 0)) && (R19 = 0 || (R2970 = 0 && R2971 = 0)) && (R19 = 0 || (R2972 = 0 && R2973 = 0)) && (R19 = 0 || (R2974 = 0 && R2975 = 0)) && (R19 = 0 || (R2976 = 0 && R2977 = 0)) && (R19 = 0 || (R2978 = 0 && R2979 = 0)) && (R19 = 0 || (R2980 = 0 && R2981 = 0)) && (R19 = 0 || (R2982 = 0 && R2983 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R2629 + R2626 = 0 || (R56 + R2627 + R2624 = 0 && R57 + R2628 + R2625 = 0)) && (R58 + R2629 + R2626 = 0 || (R62 + R2944 + R2942 = 0 && R63 + R2945 + R2943 = 0)) && (R2946 = 0 || (R17 = 0 && R2961 = 0)) && (R2948 = 0 || (R17 = 0 && R2961 = 0)) && (R2950 = 0 || (R17 = 0 && R2961 = 0)) && (R2952 = 0 || (R17 = 0 && R2961 = 0)) && (R2954 = 0 || (R17 = 0 && R2961 = 0)) && (R2956 = 0 || (R17 = 0 && R2961 = 0)) && (R2958 = 0 || (R17 = 0 && R2961 = 0)) && (R2962 = 0 || (R17 = 0 && R2961 = 0)) && (R2964 = 0 || (R17 = 0 && R2961 = 0));
// End of Parikh automata intersection problem
