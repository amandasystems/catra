// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R8, R8138, R8139, R8140, R8141, R8142, R8143, R8144, R8145, R8146, R8147, R8148, R8149, R8150, R8151, R8152, R8153, R8154, R8155, R8156, R8157, R8158, R8159, R8160, R8161, R8162, R8163, R8164, R8165, R8166, R8167, R8168, R8169, R8170, R8171, R8172, R8173, R8174, R8175, R8176, R8177, R8178, R8179, R8180, R8181, R8182, R8183, R8184, R8185, R8186, R8187, R8188, R8189, R8190, R8191, R8192, R8193, R8194, R8195, R8196, R8197, R8198, R8199, R8200, R8201, R8202, R8203, R8204, R8205, R8206, R8207, R8208, R8209, R8210, R8211, R8212, R8213, R8214, R8215, R8216, R8217, R8218, R8219, R8220, R8221, R8222, R8223, R8224, R8225, R8226, R8227, R8228, R8229, R8230, R8231, R8232, R8233, R8234, R8235, R8236, R8237, R8238, R8239, R8240, R8241, R8242, R8243, R8244, R8245, R8246, R8247;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8168 += 1, R8169 += 1 };
  s0 -> s1 [0, 65535] { R8169 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R8169 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R8171 += 1 };
  s0 -> s0 [0, 65535] { R8170 += 1, R8171 += 1 };
  s0 -> s2 [81, 81] { R8171 += 1 };
  s0 -> s3 [81, 81] { R8171 += 1 };
  s0 -> s1 [83, 65535] { R8171 += 1 };
  s1 -> s1 [0, 80] { R8171 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8171 += 1 };
  s1 -> s3 [81, 81] { R8171 += 1 };
  s1 -> s1 [83, 65535] { R8171 += 1 };
  s2 -> s2 [0, 81] { R8171 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R8171 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R8173 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8172 += 1, R8173 += 1 };
  s0 -> s2 [81, 81] { R8173 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R8173 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R8173 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R8173 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8173 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R8173 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R8173 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8173 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R8175 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R8174 += 1, R8175 += 1 };
  s0 -> s2 [81, 81] { R8175 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R8175 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R8175 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R8175 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8175 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R8175 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R8175 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R8175 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R8177 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R8176 += 1, R8177 += 1 };
  s0 -> s2 [81, 81] { R8177 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R8177 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R8177 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R8177 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8177 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R8177 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R8177 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R8177 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R8179 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8178 += 1, R8179 += 1 };
  s0 -> s2 [81, 81] { R8179 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R8179 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R8179 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R8179 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8179 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R8179 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R8179 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8179 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R8181 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8180 += 1, R8181 += 1 };
  s0 -> s2 [81, 81] { R8181 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R8181 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R8181 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R8181 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8181 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R8181 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R8181 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R8181 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R8183 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8182 += 1, R8183 += 1 };
  s0 -> s2 [81, 81] { R8183 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R8183 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R8183 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R8183 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8183 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R8183 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R8183 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8183 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R8185 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R8184 += 1, R8185 += 1 };
  s0 -> s2 [81, 81] { R8185 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R8185 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R8185 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R8185 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8185 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R8185 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R8185 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8185 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R8205 += 1 };
  s0 -> s0 [0, 65535] { R8204 += 1, R8205 += 1 };
  s0 -> s2 [81, 81] { R8205 += 1 };
  s0 -> s1 [82, 65535] { R8205 += 1 };
  s1 -> s1 [0, 80] { R8205 += 1 };
  s1 -> s2 [81, 81] { R8205 += 1 };
  s1 -> s1 [82, 65535] { R8205 += 1 };
  s2 -> s2 [0, 65535] { R8205 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8207 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R8206 += 1, R8207 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8207 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R8209 += 1 };
  s0 -> s2 [0, 65535] { R8209 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R8208 += 1, R8209 += 1 };
  s0 -> s3 [81, 81] { R8209 += 1 };
  s0 -> s1 [82, 65535] { R8209 += 1 };
  s1 -> s1 [0, 80] { R8209 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R8209 += 1 };
  s1 -> s1 [82, 65535] { R8209 += 1 };
  s2 -> s1 [0, 80] { R8209 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8209 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R8209 += 1 };
  s2 -> s1 [82, 65535] { R8209 += 1 };
  s3 -> s3 [0, 65535] { R8209 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R8211 += 1, R8149 += 1 };
  s0 -> s2 [0, 65535] { R8211 += 1, R8148 += 1, R8149 += 1 };
  s0 -> s0 [0, 65535] { R8210 += 1, R8211 += 1 };
  s0 -> s1 [82, 65535] { R8211 += 1, R8149 += 1 };
  s1 -> s1 [0, 80] { R8211 += 1, R8149 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8211 += 1 };
  s1 -> s1 [82, 65535] { R8211 += 1, R8149 += 1 };
  s2 -> s1 [0, 80] { R8211 += 1, R8149 += 1 };
  s2 -> s2 [0, 65535] { R8211 += 1, R8148 += 1, R8149 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R8211 += 1, R8149 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8213 += 1, R8151 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R8212 += 1, R8213 += 1 };
  s0 -> s2 [0, 65535] { R8213 += 1, R8150 += 1, R8151 += 1 };
  s1 -> s4 [0, 65535] { R8213 += 1 };
  s1 -> s1 [0, 65535] { R8213 += 1, R8151 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8213 += 1, R8151 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8213 += 1, R8150 += 1, R8151 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8213 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R8214 += 1, R8215 += 1 };
  s0 -> s1 [0, 65535] { R8215 += 1, R8153 += 1 };
  s0 -> s2 [0, 65535] { R8215 += 1, R8152 += 1, R8153 += 1 };
  s1 -> s4 [0, 65535] { R8215 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8215 += 1, R8153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8215 += 1, R8153 += 1 };
  s2 -> s2 [0, 65535] { R8215 += 1, R8152 += 1, R8153 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8215 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8217 += 1, R8155 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R8216 += 1, R8217 += 1 };
  s0 -> s2 [0, 65535] { R8217 += 1, R8154 += 1, R8155 += 1 };
  s1 -> s4 [0, 65535] { R8217 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8217 += 1, R8155 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8217 += 1, R8155 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R8217 += 1, R8154 += 1, R8155 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8217 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R8219 += 1, R8157 += 1 };
  s0 -> s2 [0, 65535] { R8219 += 1, R8157 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R8218 += 1, R8219 += 1 };
  s0 -> s3 [0, 65535] { R8219 += 1, R8156 += 1, R8157 += 1 };
  s0 -> s1 [83, 65535] { R8219 += 1, R8157 += 1 };
  s1 -> s1 [0, 81] { R8219 += 1, R8157 += 1 };
  s1 -> s1 [0, 65535] { R8219 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R8219 += 1, R8157 += 1 };
  s2 -> s1 [0, 81] { R8219 += 1, R8157 += 1 };
  s2 -> s2 [0, 65535] { R8219 += 1, R8157 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8219 += 1 };
  s2 -> s1 [83, 65535] { R8219 += 1, R8157 += 1 };
  s3 -> s1 [0, 81] { R8219 += 1, R8157 += 1 };
  s3 -> s2 [0, 65535] { R8219 += 1, R8157 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R8219 += 1, R8156 += 1, R8157 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R8219 += 1, R8157 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8219 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R8221 += 1, R8159 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8221 += 1, R8158 += 1, R8159 += 1 };
  s0 -> s0 [0, 65535] { R8220 += 1, R8221 += 1 };
  s0 -> s3 [0, 65535] { R8221 += 1, R8159 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [83, 65535] { R8221 += 1, R8159 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R8221 += 1, R8159 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8221 += 1 };
  s1 -> s1 [0, 65535] { R8221 += 1, R8159 += 1 };
  s1 -> s1 [83, 65535] { R8221 += 1, R8159 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R8221 += 1, R8159 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8221 += 1, R8158 += 1, R8159 += 1 };
  s2 -> s3 [0, 65535] { R8221 += 1, R8159 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R8221 += 1, R8159 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R8221 += 1, R8159 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8221 += 1 };
  s3 -> s3 [0, 65535] { R8221 += 1, R8159 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [83, 65535] { R8221 += 1, R8159 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8221 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R8222 += 1, R8223 += 1 };
  s0 -> s1 [0, 65535] { R8223 += 1, R8160 += 1, R8161 += 1 };
  s0 -> s2 [0, 65535] { R8223 += 1, R8161 += 1 };
  s1 -> s1 [0, 65535] { R8223 += 1, R8160 += 1, R8161 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8223 += 1, R8161 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8223 += 1 };
  s2 -> s2 [0, 65535] { R8223 += 1, R8161 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8223 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R8225 += 1, R8163 += 1, R7715 += 1 };
  s0 -> s2 [0, 65535] { R8225 += 1, R8162 += 1, R8163 += 1 };
  s0 -> s1 [0, 65535] { R8225 += 1, R8163 += 1 };
  s0 -> s0 [0, 65535] { R8224 += 1, R8225 += 1 };
  s0 -> s1 [85, 65535] { R8225 += 1, R8163 += 1, R7715 += 1 };
  s1 -> s1 [0, 82] { R8225 += 1, R8163 += 1, R7715 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8225 += 1, R8163 += 1 };
  s1 -> s4 [0, 65535] { R8225 += 1 };
  s1 -> s1 [85, 65535] { R8225 += 1, R8163 += 1, R7715 += 1 };
  s2 -> s1 [0, 82] { R8225 += 1, R8163 += 1, R7715 += 1 };
  s2 -> s2 [0, 65535] { R8225 += 1, R8162 += 1, R8163 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8225 += 1, R8163 += 1 };
  s2 -> s1 [85, 65535] { R8225 += 1, R8163 += 1, R7715 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8225 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8227 += 1, R8164 += 1, R8165 += 1 };
  s0 -> s2 [0, 65535] { R8227 += 1, R8165 += 1 };
  s0 -> s3 [0, 65535] { R8227 += 1, R8165 += 1, R8142 += 1, R8143 += 1 };
  s0 -> s0 [0, 65535] { R8226 += 1, R8227 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8227 += 1, R8164 += 1, R8165 += 1 };
  s1 -> s2 [0, 65535] { R8227 += 1, R8165 += 1 };
  s1 -> s3 [0, 65535] { R8227 += 1, R8165 += 1, R8142 += 1, R8143 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8227 += 1, R8165 += 1 };
  s2 -> s5 [0, 65535] { R8227 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8227 += 1, R8165 += 1 };
  s3 -> s5 [0, 65535] { R8227 += 1 };
  s3 -> s3 [0, 65535] { R8227 += 1, R8165 += 1, R8142 += 1, R8143 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8227 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s0 -> s0 [0, 65535] { R8228 += 1, R8229 += 1 };
  s0 -> s2 [0, 65535] { R8229 += 1, R8167 += 1, R8146 += 1, R8147 += 1 };
  s0 -> s3 [0, 65535] { R8229 += 1, R8166 += 1, R8167 += 1 };
  s0 -> s4 [82, 82] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s0 -> s5 [82, 82] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s0 -> s1 [86, 65535] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s1 -> s1 [0, 81] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s1 -> s6 [0, 65535] { R8229 += 1 };
  s1 -> s1 [0, 65535] { R8229 += 1, R8167 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [82, 82] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s1 -> s5 [82, 82] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s1 -> s1 [86, 65535] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s2 -> s1 [0, 81] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s2 -> s2 [0, 65535] { R8229 += 1, R8167 += 1, R8146 += 1, R8147 += 1 };
  s2 -> s6 [0, 65535] { R8229 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [82, 82] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s2 -> s5 [82, 82] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s2 -> s1 [86, 65535] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s3 -> s1 [0, 81] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s3 -> s2 [0, 65535] { R8229 += 1, R8167 += 1, R8146 += 1, R8147 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R8229 += 1, R8166 += 1, R8167 += 1 };
  s3 -> s4 [82, 82] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s3 -> s5 [82, 82] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s3 -> s1 [86, 65535] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s4 -> s4 [0, 65535] { R8229 += 1, R8167 += 1 };
  s4 -> s6 [0, 65535] { R8229 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 82] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s5 -> s6 [0, 65535] { R8229 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8229 += 1, R8167 += 1 };
  s5 -> s5 [86, 65535] { R8229 += 1, R8167 += 1, R8147 += 1 };
  s6 -> s6 [0, 65535] { R8229 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R8230 += 1, R8231 += 1 };
  s0 -> s1 [0, 65535] { R8231 += 1, R8186 += 1, R8187 += 1 };
  s0 -> s2 [0, 65535] { R8231 += 1, R8187 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R8231 += 1, R8186 += 1, R8187 += 1 };
  s1 -> s2 [0, 65535] { R8231 += 1, R8187 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8231 += 1 };
  s2 -> s2 [0, 65535] { R8231 += 1, R8187 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8231 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R8233 += 1, R8189 += 1 };
  s0 -> s0 [0, 65535] { R8232 += 1, R8233 += 1 };
  s0 -> s2 [0, 65535] { R8233 += 1, R8188 += 1, R8189 += 1 };
  s0 -> s3 [81, 81] { R8233 += 1, R8189 += 1 };
  s0 -> s4 [81, 81] { R8233 += 1, R8189 += 1 };
  s0 -> s5 [82, 82] { R8233 += 1, R8189 += 1 };
  s0 -> s1 [83, 65535] { R8233 += 1, R8189 += 1 };
  s1 -> s1 [0, 80] { R8233 += 1, R8189 += 1 };
  s1 -> s3 [81, 81] { R8233 += 1, R8189 += 1 };
  s1 -> s4 [81, 81] { R8233 += 1, R8189 += 1 };
  s1 -> s5 [82, 82] { R8233 += 1, R8189 += 1 };
  s1 -> s1 [83, 65535] { R8233 += 1, R8189 += 1 };
  s2 -> s1 [0, 80] { R8233 += 1, R8189 += 1 };
  s2 -> s2 [0, 65535] { R8233 += 1, R8188 += 1, R8189 += 1 };
  s2 -> s3 [81, 81] { R8233 += 1, R8189 += 1 };
  s2 -> s4 [81, 81] { R8233 += 1, R8189 += 1 };
  s2 -> s5 [82, 82] { R8233 += 1, R8189 += 1 };
  s2 -> s1 [83, 65535] { R8233 += 1, R8189 += 1 };
  s3 -> s3 [0, 81] { R8233 += 1, R8189 += 1 };
  s3 -> s8 [82, 82] { R8233 += 1, R8189 += 1 };
  s3 -> s3 [83, 65535] { R8233 += 1, R8189 += 1 };
  s5 -> s5 [0, 80] { R8233 += 1, R8189 += 1 };
  s5 -> s5 [0, 65535] { R8233 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R8233 += 1, R8189 += 1 };
  s5 -> s8 [81, 81] { R8233 += 1, R8189 += 1 };
  s5 -> s5 [82, 65535] { R8233 += 1, R8189 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8233 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8233 += 1, R8189 += 1 };
  s8 -> s9 [0, 65535] { R8233 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R8233 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R8235 += 1, R8191 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8234 += 1, R8235 += 1 };
  s0 -> s2 [0, 65535] { R8235 += 1, R8190 += 1, R8191 += 1 };
  s0 -> s3 [81, 81] { R8235 += 1, R8191 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R8235 += 1, R8191 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R8235 += 1, R8191 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R8235 += 1, R8191 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R8235 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R8235 += 1, R8191 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R8235 += 1, R8191 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R8235 += 1, R8191 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R8235 += 1, R8191 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8235 += 1, R8190 += 1, R8191 += 1 };
  s2 -> s3 [81, 81] { R8235 += 1, R8191 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R8235 += 1, R8191 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R8235 += 1, R8191 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R8235 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8235 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8235 += 1, R8191 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R8235 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R8237 += 1, R8193 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R8236 += 1, R8237 += 1 };
  s0 -> s2 [0, 65535] { R8237 += 1, R8192 += 1, R8193 += 1 };
  s0 -> s3 [81, 81] { R8237 += 1, R8193 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R8237 += 1, R8193 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R8237 += 1, R8193 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R8237 += 1, R8193 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R8237 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8237 += 1, R8193 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R8237 += 1, R8193 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R8237 += 1, R8193 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R8237 += 1, R8193 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R8237 += 1, R8192 += 1, R8193 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8237 += 1, R8193 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R8237 += 1, R8193 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R8237 += 1, R8193 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R8237 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8237 += 1, R8193 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R8237 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8237 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R8239 += 1, R8194 += 1, R8195 += 1 };
  s0 -> s0 [0, 65535] { R8238 += 1, R8239 += 1 };
  s0 -> s3 [81, 81] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8239 += 1 };
  s1 -> s3 [81, 81] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8239 += 1, R8194 += 1, R8195 += 1 };
  s2 -> s3 [81, 81] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8239 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8239 += 1 };
  s4 -> s4 [0, 65535] { R8239 += 1, R8195 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8239 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 80] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s3 [0, 65535] { R8241 += 1, R8196 += 1, R8197 += 1 };
  s0 -> s0 [0, 65535] { R8240 += 1, R8241 += 1 };
  s0 -> s4 [81, 81] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [81, 81] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [81, 81] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [81, 81] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [82, 65535] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [82, 65535] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 80] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 80] { R8241 += 1, R8197 += 1 };
  s1 -> s4 [81, 81] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [81, 81] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s8 [81, 81] { R8241 += 1, R8197 += 1 };
  s1 -> s12 [81, 81] { R8241 += 1, R8197 += 1 };
  s1 -> s1 [82, 65535] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [82, 65535] { R8241 += 1, R8197 += 1 };
  s2 -> s1 [0, 80] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 80] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [81, 81] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [81, 81] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [81, 81] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [81, 81] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s1 [82, 65535] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [82, 65535] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 80] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 80] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R8241 += 1, R8196 += 1, R8197 += 1 };
  s3 -> s4 [81, 81] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [81, 81] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [81, 81] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [81, 81] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [82, 65535] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [82, 65535] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s5 -> s5 [0, 65535] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R8241 += 1, R8197 += 1 };
  s6 -> s5 [0, 65535] { R8241 += 1, R8197 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R8241 += 1, R8197 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8241 += 1 };
  s8 -> s8 [0, 65535] { R8241 += 1, R8197 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8241 += 1 };
  s11 -> s11 [0, 80] { R8241 += 1, R8197 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8241 += 1 };
  s11 -> s8 [81, 81] { R8241 += 1, R8197 += 1 };
  s11 -> s12 [81, 81] { R8241 += 1, R8197 += 1 };
  s11 -> s11 [82, 65535] { R8241 += 1, R8197 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8241 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s2 [0, 80] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s0 -> s0 [0, 65535] { R8242 += 1, R8243 += 1 };
  s0 -> s3 [0, 65535] { R8243 += 1, R8198 += 1, R8199 += 1 };
  s0 -> s4 [81, 81] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s5 [81, 81] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s6 [81, 81] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s0 -> s7 [81, 81] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s0 -> s2 [82, 82] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s0 -> s1 [82, 65535] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s8 [85, 85] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s0 -> s2 [86, 65535] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s1 -> s1 [0, 80] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s2 [0, 80] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s1 -> s4 [81, 81] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s5 [81, 81] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s6 [81, 81] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s1 -> s7 [81, 81] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s1 -> s2 [82, 82] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s1 -> s1 [82, 65535] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s8 [85, 85] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s1 -> s2 [86, 65535] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s2 -> s2 [0, 80] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s2 -> s6 [81, 81] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s2 -> s7 [81, 81] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s2 -> s2 [82, 82] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s2 -> s8 [85, 85] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s2 -> s2 [86, 65535] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s3 -> s1 [0, 80] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s2 [0, 80] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s3 -> s3 [0, 65535] { R8243 += 1, R8198 += 1, R8199 += 1 };
  s3 -> s4 [81, 81] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s5 [81, 81] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s6 [81, 81] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s3 -> s7 [81, 81] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s3 -> s2 [82, 82] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s3 -> s1 [82, 65535] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s8 [85, 85] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s3 -> s2 [86, 65535] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s4 -> s6 [0, 82] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s4 -> s4 [0, 65535] { R8243 += 1, R8199 += 1, R7712 += 1, R7713 += 1 };
  s4 -> s11 [85, 85] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s4 -> s6 [86, 65535] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s6 -> s6 [0, 82] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s6 -> s11 [85, 85] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s6 -> s6 [86, 65535] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s8 -> s8 [0, 80] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s8 -> s8 [0, 65535] { R8243 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [81, 81] { R8243 += 1, R8199 += 1 };
  s8 -> s11 [81, 81] { R8243 += 1, R8199 += 1 };
  s8 -> s8 [82, 82] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s8 -> s8 [82, 65535] { R8243 += 1, R8199 += 1 };
  s8 -> s8 [85, 65535] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8243 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 82] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s11 -> s12 [0, 65535] { R8243 += 1 };
  s11 -> s11 [0, 65535] { R8243 += 1, R8199 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [85, 65535] { R8243 += 1, R8199 += 1, R7713 += 1 };
  s12 -> s12 [0, 65535] { R8243 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s2 [0, 80] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s0 [0, 65535] { R8244 += 1, R8245 += 1 };
  s0 -> s3 [0, 65535] { R8245 += 1, R8200 += 1, R8201 += 1 };
  s0 -> s4 [81, 81] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s5 [81, 81] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s6 [81, 81] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s7 [81, 81] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s1 [82, 65535] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s2 [82, 65535] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s1 [0, 80] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s2 [0, 80] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s4 [81, 81] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s5 [81, 81] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s6 [81, 81] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s7 [81, 81] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s1 [82, 65535] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s2 [82, 65535] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s2 [0, 80] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R8245 += 1 };
  s2 -> s4 [81, 81] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s6 [81, 81] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s2 [82, 65535] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s1 [0, 80] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s2 [0, 80] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s3 [0, 65535] { R8245 += 1, R8200 += 1, R8201 += 1 };
  s3 -> s4 [81, 81] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s5 [81, 81] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s6 [81, 81] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s7 [81, 81] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s1 [82, 65535] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s2 [82, 65535] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s4 -> s4 [0, 65535] { R8245 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R8245 += 1 };
  s7 -> s6 [0, 65535] { R8245 += 1, R8201 += 1, R8139 += 1, R8140 += 1 };
  s7 -> s7 [0, 65535] { R8245 += 1, R8201 += 1, R8138 += 1, R8139 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8245 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s0 -> s0 [0, 65535] { R8246 += 1, R8247 += 1 };
  s0 -> s2 [0, 65535] { R8247 += 1, R8202 += 1, R8203 += 1 };
  s0 -> s3 [81, 81] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s0 -> s4 [81, 81] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s0 -> s1 [82, 65535] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s1 -> s1 [0, 80] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8247 += 1 };
  s1 -> s3 [81, 81] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s1 -> s4 [81, 81] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s1 -> s1 [82, 65535] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s2 -> s1 [0, 80] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8247 += 1, R8202 += 1, R8203 += 1 };
  s2 -> s3 [81, 81] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s2 -> s4 [81, 81] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s2 -> s1 [82, 65535] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8247 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8247 += 1 };
  s4 -> s4 [0, 65535] { R8247 += 1, R8203 += 1, R8144 += 1, R8145 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8247 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R2 = R8247 && R20 - R8247 = -1 && R21 = R8247 && R22 - R8247 = -1 && R23 = R8247 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7715 + -1*R7713 - R53 = 0 && R52 + R7714 + R7712 = 0 && R8188 = 0 && R8189 = 0 && R8196 = 0 && R8197 = 0 && R8198 = 0 && R8199 = 0 && R8200 = 0 && R8201 = 0 && R8204 = 0 && R8205 = R8247 && R8206 = 0 && R8207 = R8247 && R8208 = 0 && R8209 = R8247 && R8210 = 0 && R8211 = R8247 && R8212 = 0 && R8213 = R8247 && R8214 = 0 && R8215 = R8247 && R8216 = 0 && R8217 = R8247 && R8218 = 0 && R8219 = R8247 && R8220 = 0 && R8221 = R8247 && R8222 = 0 && R8223 = R8247 && R8224 = 0 && R8225 = R8247 && R8226 = 0 && R8227 = R8247 && R8228 = 0 && R8229 = R8247 && R8230 = 0 && R8231 = R8247 && R8232 = 0 && R8233 = R8247 && R8234 = 0 && R8235 = R8247 && R8236 = 0 && R8237 = R8247 && R8238 = 0 && R8239 = R8247 && R8240 = 0 && R8241 = R8247 && R8242 = 0 && R8243 = R8247 && R8244 = 0 && R8245 = R8247 && R8246 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7715 + -1*R7713 - R53 < 1 && 0 < R8247 && (R1 != 0 || R17 = 0 || (R8148 = 0 && R8149 = 0)) && (R1 != 0 || R17 = 0 || (R8150 = 0 && R8151 = 0)) && (R1 != 0 || R17 = 0 || (R8152 = 0 && R8153 = 0)) && (R1 != 0 || R17 = 0 || (R8154 = 0 && R8155 = 0)) && (R1 != 0 || R17 = 0 || (R8156 = 0 && R8157 = 0)) && (R1 != 0 || R17 = 0 || (R8158 = 0 && R8159 = 0)) && (R1 != 0 || R17 = 0 || (R8160 = 0 && R8161 = 0)) && (R1 != 0 || R17 = 0 || (R8162 = 0 && R8163 = 0)) && (R1 != 0 || R17 = 0 || (R8164 = 0 && R8165 = 0)) && (R1 != 0 || R17 = 0 || (R8166 = 0 && R8167 = 0)) && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R42 + R72 + R70 = 0 || R53 + R7715 + R7713 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R7715 + R7713 < 1))) && (R8148 != 0 || R1 = R8149 || R1 < 1) && (R8150 != 0 || R1 = R8151 || R1 < 1) && (R8152 != 0 || R1 = R8153 || R1 < 1) && (R8154 != 0 || R1 = R8155 || R1 < 1) && (R8156 != 0 || R1 = R8157 || R1 < 1) && (R8158 != 0 || R1 = R8159 || R1 < 1) && (R8160 != 0 || R1 = R8161 || R1 < 1) && (R8162 != 0 || R1 = R8163 || R1 < 1) && (R8164 != 0 || R1 = R8165 || R1 < 1) && (R8166 != 0 || R1 = R8167 || R1 < 1) && (R18 = 0 || (R8186 = 0 && R8187 = 0)) && (R18 = 0 || (R8190 = 0 && R8191 = 0)) && (R18 = 0 || (R8192 = 0 && R8193 = 0)) && (R18 = 0 || (R8194 = 0 && R8195 = 0)) && (R18 = 0 || (R8202 = 0 && R8203 = 0)) && (R19 = 0 || (R8168 = 0 && R8169 = 0)) && (R19 = 0 || (R8170 = 0 && R8171 = 0)) && (R19 = 0 || (R8172 = 0 && R8173 = 0)) && (R19 = 0 || (R8174 = 0 && R8175 = 0)) && (R19 = 0 || (R8176 = 0 && R8177 = 0)) && (R19 = 0 || (R8178 = 0 && R8179 = 0)) && (R19 = 0 || (R8180 = 0 && R8181 = 0)) && (R19 = 0 || (R8182 = 0 && R8183 = 0)) && (R19 = 0 || (R8184 = 0 && R8185 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0)) && (R58 + R8143 + R8140 = 0 || (R56 + R8141 + R8138 = 0 && R57 + R8142 + R8139 = 0)) && (R58 + R8143 + R8140 = 0 || (R62 + R8146 + R8144 = 0 && R63 + R8147 + R8145 = 0)) && (R8148 = 0 || R1 < 1) && (R8150 = 0 || R1 < 1) && (R8152 = 0 || R1 < 1) && (R8154 = 0 || R1 < 1) && (R8156 = 0 || R1 < 1) && (R8158 = 0 || R1 < 1) && (R8160 = 0 || R1 < 1) && (R8162 = 0 || R1 < 1) && (R8164 = 0 || R1 < 1) && (R8166 = 0 || R1 < 1);
// End of Parikh automata intersection problem
