// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R5166, R5167, R5168, R5169, R52, R53, R56, R57, R58, R6014, R6015, R6016, R6017, R6018, R6019, R6124, R6125, R6126, R6127, R6128, R6129, R6130, R6131, R6132, R6133, R6134, R6135, R6136, R6137, R6138, R6139, R6140, R6141, R6142, R6143, R6144, R6145, R6146, R6147, R6148, R6149, R6150, R6151, R6152, R6153, R6154, R6155, R6156, R6157, R6158, R6159, R6160, R6161, R6162, R6163, R6164, R6165, R6166, R6167, R6168, R6169, R6170, R6171, R6172, R6173, R6174, R6175, R6176, R6177, R6178, R6179, R6180, R6181, R6182, R6183, R6184, R6185, R6186, R6187, R6188, R6189, R6190, R6191, R6192, R6193, R6194, R6195, R6196, R6197, R6198, R6199, R62, R6200, R6201, R6202, R6203, R6204, R6205, R6206, R6207, R6208, R6209, R6210, R6211, R6212, R6213, R6214, R6215, R6216, R6217, R6218, R6219, R6220, R6221, R6222, R6223, R6224, R6225, R6226, R6227, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6148 += 1, R6149 += 1 };
  s0 -> s1 [0, 65535] { R6149 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6149 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R6151 += 1 };
  s0 -> s0 [0, 65535] { R6150 += 1, R6151 += 1 };
  s0 -> s2 [73, 73] { R6151 += 1 };
  s0 -> s3 [73, 73] { R6151 += 1 };
  s0 -> s1 [82, 65535] { R6151 += 1 };
  s1 -> s1 [0, 72] { R6151 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6151 += 1 };
  s1 -> s3 [73, 73] { R6151 += 1 };
  s1 -> s1 [82, 65535] { R6151 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R6151 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R6151 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R6153 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R6152 += 1, R6153 += 1 };
  s0 -> s2 [73, 73] { R6153 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R6153 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R6153 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R6153 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6153 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R6153 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R6153 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6153 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R6155 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R6154 += 1, R6155 += 1 };
  s0 -> s2 [73, 73] { R6155 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R6155 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R6155 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R6155 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6155 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R6155 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R6155 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6155 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R6157 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R6156 += 1, R6157 += 1 };
  s0 -> s2 [73, 73] { R6157 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R6157 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R6157 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R6157 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6157 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R6157 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R6157 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6157 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R6159 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6158 += 1, R6159 += 1 };
  s0 -> s2 [73, 73] { R6159 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R6159 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R6159 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R6159 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6159 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R6159 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R6159 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6159 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R6161 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R6160 += 1, R6161 += 1 };
  s0 -> s2 [73, 73] { R6161 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R6161 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R6161 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R6161 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6161 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R6161 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R6161 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6161 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R6163 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R6162 += 1, R6163 += 1 };
  s0 -> s2 [73, 73] { R6163 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R6163 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R6163 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R6163 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6163 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R6163 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R6163 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R6163 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R6165 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R6164 += 1, R6165 += 1 };
  s0 -> s2 [73, 73] { R6165 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R6165 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R6165 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R6165 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6165 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R6165 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R6165 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6165 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R6185 += 1 };
  s0 -> s0 [0, 65535] { R6184 += 1, R6185 += 1 };
  s0 -> s2 [73, 73] { R6185 += 1 };
  s0 -> s1 [74, 65535] { R6185 += 1 };
  s1 -> s1 [0, 72] { R6185 += 1 };
  s1 -> s2 [73, 73] { R6185 += 1 };
  s1 -> s1 [74, 65535] { R6185 += 1 };
  s2 -> s2 [0, 65535] { R6185 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6187 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6186 += 1, R6187 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6187 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R6189 += 1 };
  s0 -> s0 [0, 65535] { R6188 += 1, R6189 += 1 };
  s0 -> s2 [0, 65535] { R6189 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R6189 += 1 };
  s0 -> s1 [74, 65535] { R6189 += 1 };
  s1 -> s1 [0, 72] { R6189 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R6189 += 1 };
  s1 -> s1 [74, 65535] { R6189 += 1 };
  s2 -> s1 [0, 72] { R6189 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6189 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R6189 += 1 };
  s2 -> s1 [74, 65535] { R6189 += 1 };
  s3 -> s3 [0, 65535] { R6189 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R6191 += 1, R6129 += 1 };
  s0 -> s2 [0, 65535] { R6191 += 1, R6128 += 1, R6129 += 1 };
  s0 -> s0 [0, 65535] { R6190 += 1, R6191 += 1 };
  s0 -> s1 [74, 65535] { R6191 += 1, R6129 += 1 };
  s1 -> s1 [0, 72] { R6191 += 1, R6129 += 1 };
  s1 -> s1 [0, 65535] { R6191 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R6191 += 1, R6129 += 1 };
  s2 -> s1 [0, 72] { R6191 += 1, R6129 += 1 };
  s2 -> s2 [0, 65535] { R6191 += 1, R6128 += 1, R6129 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R6191 += 1, R6129 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6193 += 1, R6131 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R6192 += 1, R6193 += 1 };
  s0 -> s2 [0, 65535] { R6193 += 1, R6130 += 1, R6131 += 1 };
  s1 -> s1 [0, 65535] { R6193 += 1, R6131 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R6193 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6193 += 1, R6131 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R6193 += 1, R6130 += 1, R6131 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6193 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R6195 += 1, R6133 += 1 };
  s0 -> s0 [0, 65535] { R6194 += 1, R6195 += 1 };
  s0 -> s2 [0, 65535] { R6195 += 1, R6132 += 1, R6133 += 1 };
  s0 -> s1 [81, 65535] { R6195 += 1, R6133 += 1 };
  s1 -> s1 [0, 73] { R6195 += 1, R6133 += 1 };
  s1 -> s1 [0, 65535] { R6195 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R6195 += 1, R6133 += 1 };
  s2 -> s1 [0, 73] { R6195 += 1, R6133 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6195 += 1, R6132 += 1, R6133 += 1 };
  s2 -> s1 [81, 65535] { R6195 += 1, R6133 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6197 += 1, R6135 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R6196 += 1, R6197 += 1 };
  s0 -> s2 [0, 65535] { R6197 += 1, R6134 += 1, R6135 += 1 };
  s1 -> s1 [0, 65535] { R6197 += 1, R6135 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6197 += 1 };
  s2 -> s1 [0, 65535] { R6197 += 1, R6135 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6197 += 1, R6134 += 1, R6135 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6197 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R6199 += 1, R6137 += 1 };
  s0 -> s2 [0, 65535] { R6199 += 1, R6137 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R6198 += 1, R6199 += 1 };
  s0 -> s3 [0, 65535] { R6199 += 1, R6136 += 1, R6137 += 1 };
  s0 -> s1 [82, 65535] { R6199 += 1, R6137 += 1 };
  s1 -> s1 [0, 80] { R6199 += 1, R6137 += 1 };
  s1 -> s1 [0, 65535] { R6199 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R6199 += 1, R6137 += 1 };
  s2 -> s1 [0, 80] { R6199 += 1, R6137 += 1 };
  s2 -> s2 [0, 65535] { R6199 += 1, R6137 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R6199 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R6199 += 1, R6137 += 1 };
  s3 -> s1 [0, 80] { R6199 += 1, R6137 += 1 };
  s3 -> s2 [0, 65535] { R6199 += 1, R6137 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R6199 += 1, R6136 += 1, R6137 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R6199 += 1, R6137 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6199 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R6201 += 1, R6139 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R6201 += 1, R6138 += 1, R6139 += 1 };
  s0 -> s3 [0, 65535] { R6201 += 1, R6139 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R6200 += 1, R6201 += 1 };
  s0 -> s1 [82, 65535] { R6201 += 1, R6139 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R6201 += 1, R6139 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6201 += 1 };
  s1 -> s1 [0, 65535] { R6201 += 1, R6139 += 1 };
  s1 -> s1 [82, 65535] { R6201 += 1, R6139 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R6201 += 1, R6139 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6201 += 1, R6138 += 1, R6139 += 1 };
  s2 -> s3 [0, 65535] { R6201 += 1, R6139 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [82, 65535] { R6201 += 1, R6139 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R6201 += 1, R6139 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6201 += 1 };
  s3 -> s3 [0, 65535] { R6201 += 1, R6139 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [82, 65535] { R6201 += 1, R6139 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6201 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R6202 += 1, R6203 += 1 };
  s0 -> s1 [0, 65535] { R6203 += 1, R6141 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R6203 += 1, R6140 += 1, R6141 += 1 };
  s0 -> s3 [0, 65535] { R6203 += 1, R6141 += 1 };
  s1 -> s4 [0, 65535] { R6203 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6203 += 1, R6141 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s3 [0, 65535] { R6203 += 1, R6141 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6203 += 1, R6141 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s2 [0, 65535] { R6203 += 1, R6140 += 1, R6141 += 1 };
  s2 -> s3 [0, 65535] { R6203 += 1, R6141 += 1 };
  s3 -> s4 [0, 65535] { R6203 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6203 += 1, R6141 += 1 };
  s4 -> s4 [0, 65535] { R6203 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s0 -> s2 [0, 65535] { R6205 += 1, R6143 += 1, R5168 += 1, R5169 += 1 };
  s0 -> s3 [0, 65535] { R6205 += 1, R6142 += 1, R6143 += 1 };
  s0 -> s0 [0, 65535] { R6204 += 1, R6205 += 1 };
  s0 -> s4 [90, 90] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s0 -> s1 [91, 65535] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s1 -> s1 [0, 81] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s1 -> s4 [90, 90] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s1 -> s1 [91, 65535] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s2 -> s1 [0, 81] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s2 -> s2 [0, 65535] { R6205 += 1, R6143 += 1, R5168 += 1, R5169 += 1 };
  s2 -> s4 [90, 90] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s2 -> s1 [91, 65535] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s3 -> s1 [0, 81] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s3 -> s2 [0, 65535] { R6205 += 1, R6143 += 1, R5168 += 1, R5169 += 1 };
  s3 -> s3 [0, 65535] { R6205 += 1, R6142 += 1, R6143 += 1 };
  s3 -> s4 [90, 90] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s3 -> s1 [91, 65535] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s4 -> s4 [0, 81] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s4 -> s5 [0, 65535] { R6205 += 1 };
  s4 -> s4 [0, 65535] { R6205 += 1, R6143 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [90, 65535] { R6205 += 1, R6143 += 1, R5169 += 1 };
  s5 -> s5 [0, 65535] { R6205 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R6207 += 1, R6144 += 1, R6145 += 1 };
  s0 -> s0 [0, 65535] { R6206 += 1, R6207 += 1 };
  s0 -> s2 [0, 65535] { R6207 += 1, R6145 += 1 };
  s1 -> s1 [0, 65535] { R6207 += 1, R6144 += 1, R6145 += 1 };
  s1 -> s2 [0, 65535] { R6207 += 1, R6145 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6207 += 1 };
  s2 -> s2 [0, 65535] { R6207 += 1, R6145 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6207 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s0 -> s2 [0, 65535] { R6209 += 1, R6146 += 1, R6147 += 1 };
  s0 -> s1 [0, 65535] { R6209 += 1, R6147 += 1 };
  s0 -> s0 [0, 65535] { R6208 += 1, R6209 += 1 };
  s0 -> s3 [81, 81] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s0 -> s4 [81, 81] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s0 -> s1 [91, 65535] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s1 -> s1 [0, 80] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6209 += 1, R6147 += 1 };
  s1 -> s6 [0, 65535] { R6209 += 1 };
  s1 -> s3 [81, 81] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s1 -> s4 [81, 81] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s1 -> s1 [91, 65535] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s2 -> s1 [0, 80] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s2 -> s2 [0, 65535] { R6209 += 1, R6146 += 1, R6147 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6209 += 1, R6147 += 1 };
  s2 -> s3 [81, 81] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s2 -> s4 [81, 81] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s2 -> s1 [91, 65535] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6209 += 1, R6147 += 1 };
  s3 -> s6 [0, 65535] { R6209 += 1 };
  s4 -> s4 [0, 81] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6209 += 1, R6147 += 1 };
  s4 -> s6 [0, 65535] { R6209 += 1 };
  s4 -> s4 [91, 65535] { R6209 += 1, R6147 += 1, R6127 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6209 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6211 += 1, R6167 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R6211 += 1, R6166 += 1, R6167 += 1 };
  s0 -> s0 [0, 65535] { R6210 += 1, R6211 += 1 };
  s1 -> s1 [0, 65535] { R6211 += 1, R6167 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6211 += 1 };
  s2 -> s1 [0, 65535] { R6211 += 1, R6167 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6211 += 1, R6166 += 1, R6167 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6211 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R6213 += 1, R6169 += 1 };
  s0 -> s2 [0, 65535] { R6213 += 1, R6168 += 1, R6169 += 1 };
  s0 -> s0 [0, 65535] { R6212 += 1, R6213 += 1 };
  s0 -> s3 [73, 73] { R6213 += 1, R6169 += 1 };
  s0 -> s4 [73, 73] { R6213 += 1, R6169 += 1 };
  s0 -> s5 [81, 81] { R6213 += 1, R6169 += 1 };
  s0 -> s1 [82, 65535] { R6213 += 1, R6169 += 1 };
  s1 -> s1 [0, 72] { R6213 += 1, R6169 += 1 };
  s1 -> s3 [73, 73] { R6213 += 1, R6169 += 1 };
  s1 -> s4 [73, 73] { R6213 += 1, R6169 += 1 };
  s1 -> s5 [81, 81] { R6213 += 1, R6169 += 1 };
  s1 -> s1 [82, 65535] { R6213 += 1, R6169 += 1 };
  s2 -> s1 [0, 72] { R6213 += 1, R6169 += 1 };
  s2 -> s2 [0, 65535] { R6213 += 1, R6168 += 1, R6169 += 1 };
  s2 -> s3 [73, 73] { R6213 += 1, R6169 += 1 };
  s2 -> s4 [73, 73] { R6213 += 1, R6169 += 1 };
  s2 -> s5 [81, 81] { R6213 += 1, R6169 += 1 };
  s2 -> s1 [82, 65535] { R6213 += 1, R6169 += 1 };
  s3 -> s3 [0, 73] { R6213 += 1, R6169 += 1 };
  s3 -> s7 [81, 81] { R6213 += 1, R6169 += 1 };
  s3 -> s3 [82, 65535] { R6213 += 1, R6169 += 1 };
  s5 -> s5 [0, 72] { R6213 += 1, R6169 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6213 += 1 };
  s5 -> s7 [73, 73] { R6213 += 1, R6169 += 1 };
  s5 -> s8 [73, 73] { R6213 += 1, R6169 += 1 };
  s5 -> s5 [81, 65535] { R6213 += 1, R6169 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R6213 += 1, R6169 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6213 += 1 };
  s7 -> s7 [81, 65535] { R6213 += 1, R6169 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6213 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R6215 += 1, R6171 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R6215 += 1, R6170 += 1, R6171 += 1 };
  s0 -> s0 [0, 65535] { R6214 += 1, R6215 += 1 };
  s0 -> s3 [73, 73] { R6215 += 1, R6171 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R6215 += 1, R6171 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R6215 += 1, R6171 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R6215 += 1, R6171 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6215 += 1 };
  s1 -> s3 [73, 73] { R6215 += 1, R6171 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R6215 += 1, R6171 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R6215 += 1, R6171 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R6215 += 1, R6171 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R6215 += 1, R6170 += 1, R6171 += 1 };
  s2 -> s3 [73, 73] { R6215 += 1, R6171 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R6215 += 1, R6171 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R6215 += 1, R6171 += 1, R66 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6215 += 1 };
  s4 -> s5 [0, 65535] { R6215 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6215 += 1, R6171 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R6215 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R6217 += 1, R6173 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R6216 += 1, R6217 += 1 };
  s0 -> s2 [0, 65535] { R6217 += 1, R6172 += 1, R6173 += 1 };
  s0 -> s3 [73, 73] { R6217 += 1, R6173 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R6217 += 1, R6173 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R6217 += 1, R6173 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R6217 += 1, R6173 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6217 += 1 };
  s1 -> s3 [73, 73] { R6217 += 1, R6173 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R6217 += 1, R6173 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R6217 += 1, R6173 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R6217 += 1, R6173 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6217 += 1, R6172 += 1, R6173 += 1 };
  s2 -> s3 [73, 73] { R6217 += 1, R6173 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R6217 += 1, R6173 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R6217 += 1, R6173 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R6217 += 1, R6173 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6217 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6217 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6217 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R6218 += 1, R6219 += 1 };
  s0 -> s2 [0, 65535] { R6219 += 1, R6174 += 1, R6175 += 1 };
  s0 -> s3 [73, 73] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R6219 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R6219 += 1, R6174 += 1, R6175 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R6219 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6219 += 1, R6175 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535] { R6219 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6219 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 72] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s0 [0, 65535] { R6220 += 1, R6221 += 1 };
  s0 -> s3 [0, 65535] { R6221 += 1, R6176 += 1, R6177 += 1 };
  s0 -> s4 [73, 73] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [73, 73] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [73, 73] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [74, 65535] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 72] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s1 [0, 65535] { R6221 += 1 };
  s1 -> s5 [73, 73] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 72] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [73, 73] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s5 [73, 73] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [73, 73] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s7 [73, 73] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [74, 65535] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 72] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 72] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R6221 += 1, R6176 += 1, R6177 += 1 };
  s3 -> s4 [73, 73] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [73, 73] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [73, 73] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [74, 65535] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R6221 += 1 };
  s6 -> s6 [0, 65535] { R6221 += 1, R6177 += 1, R3890 += 1, R3891 += 1 };
  s6 -> s7 [0, 65535] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s8 [0, 65535] { R6221 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R6221 += 1, R6177 += 1, R3891 += 1, R3892 += 1 };
  s8 -> s8 [0, 65535] { R6221 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s2 [0, 65535] { R6223 += 1, R6178 += 1, R6179 += 1 };
  s0 -> s0 [0, 65535] { R6222 += 1, R6223 += 1 };
  s0 -> s3 [73, 73] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s4 [73, 73] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s1 [74, 65535] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [0, 72] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [0, 65535] { R6223 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s4 [73, 73] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [74, 65535] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [0, 72] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6223 += 1, R6178 += 1, R6179 += 1 };
  s2 -> s3 [73, 73] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s4 [73, 73] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [74, 65535] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s6 [0, 65535] { R6223 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6223 += 1, R6179 += 1, R5166 += 1, R5167 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6223 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6223 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s2 [0, 72] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s0 [0, 65535] { R6224 += 1, R6225 += 1 };
  s0 -> s3 [0, 65535] { R6225 += 1, R6180 += 1, R6181 += 1 };
  s0 -> s4 [73, 73] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s5 [73, 73] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s6 [73, 73] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s7 [73, 73] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s1 [74, 65535] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s2 [74, 65535] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s1 [0, 72] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s11 [0, 72] { R6225 += 1, R6181 += 1 };
  s1 -> s12 [73, 73] { R6225 += 1, R6181 += 1 };
  s1 -> s4 [73, 73] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s6 [73, 73] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s8 [73, 73] { R6225 += 1, R6181 += 1 };
  s1 -> s1 [74, 65535] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s11 [74, 65535] { R6225 += 1, R6181 += 1 };
  s2 -> s1 [0, 72] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s2 [0, 72] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s2 -> s4 [73, 73] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s5 [73, 73] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s2 -> s6 [73, 73] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s7 [73, 73] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s2 -> s1 [74, 65535] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s2 [74, 65535] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s1 [0, 72] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s2 [0, 72] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s3 [0, 65535] { R6225 += 1, R6180 += 1, R6181 += 1 };
  s3 -> s4 [73, 73] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s5 [73, 73] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s6 [73, 73] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s7 [73, 73] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s1 [74, 65535] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s2 [74, 65535] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s5 -> s5 [0, 65535] { R6225 += 1, R6181 += 1, R6014 += 1, R6015 += 1 };
  s5 -> s6 [0, 65535] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s6 -> s6 [0, 65535] { R6225 += 1, R6181 += 1, R6015 += 1, R6016 += 1 };
  s6 -> s8 [0, 65535] { R6225 += 1, R6181 += 1 };
  s8 -> s9 [0, 65535] { R6225 += 1 };
  s8 -> s8 [0, 65535] { R6225 += 1, R6181 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R6225 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R6225 += 1, R6181 += 1 };
  s11 -> s11 [0, 65535] { R6225 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R6225 += 1, R6181 += 1 };
  s11 -> s8 [73, 73] { R6225 += 1, R6181 += 1 };
  s11 -> s11 [74, 65535] { R6225 += 1, R6181 += 1 };
  s12 -> s12 [0, 65535] { R6225 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s0 -> s2 [0, 72] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s0 -> s3 [0, 65535] { R6227 += 1, R6182 += 1, R6183 += 1 };
  s0 -> s0 [0, 65535] { R6226 += 1, R6227 += 1 };
  s0 -> s4 [73, 73] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s0 -> s5 [73, 73] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s0 -> s6 [73, 73] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s0 -> s7 [73, 73] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s0 -> s1 [74, 80] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s0 -> s2 [74, 65535] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s0 -> s1 [91, 65535] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s1 -> s1 [0, 72] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s1 -> s1 [0, 65535] { R6227 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R6227 += 1, R6183 += 1 };
  s1 -> s6 [73, 73] { R6227 += 1, R6183 += 1 };
  s1 -> s1 [74, 80] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s1 -> s1 [74, 65535] { R6227 += 1, R6183 += 1 };
  s1 -> s1 [91, 65535] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s2 -> s1 [0, 72] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s2 -> s2 [0, 72] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s2 -> s4 [73, 73] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s2 -> s5 [73, 73] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s2 -> s6 [73, 73] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s2 -> s7 [73, 73] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s2 -> s1 [74, 80] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s2 -> s2 [74, 65535] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s2 -> s1 [91, 65535] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s3 -> s1 [0, 72] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s3 -> s2 [0, 72] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s3 -> s3 [0, 65535] { R6227 += 1, R6182 += 1, R6183 += 1 };
  s3 -> s4 [73, 73] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s3 -> s5 [73, 73] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s3 -> s6 [73, 73] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s3 -> s7 [73, 73] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s3 -> s1 [74, 80] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s3 -> s2 [74, 65535] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s3 -> s1 [91, 65535] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s4 -> s4 [0, 65535] { R6227 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 80] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s5 -> s5 [0, 65535] { R6227 += 1, R6183 += 1, R6124 += 1, R6125 += 1 };
  s5 -> s6 [91, 65535] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s6 -> s6 [0, 80] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s6 -> s6 [0, 65535] { R6227 += 1, R6183 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R6227 += 1 };
  s6 -> s6 [91, 65535] { R6227 += 1, R6183 += 1, R6125 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6227 += 1 };
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R6143 && R2 = R6227 && R20 - R6227 = -1 && R21 = R6227 && R22 - R6227 = -1 && R23 = R6227 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R6142 = 0 && R6168 = 0 && R6169 = 0 && R6176 = 0 && R6177 = 0 && R6180 = 0 && R6181 = 0 && R6182 = 0 && R6183 = 0 && R6184 = 0 && R6185 = R6227 && R6186 = 0 && R6187 = R6227 && R6188 = 0 && R6189 = R6227 && R6190 = 0 && R6191 = R6227 && R6192 = 0 && R6193 = R6227 && R6194 = 0 && R6195 = R6227 && R6196 = 0 && R6197 = R6227 && R6198 = 0 && R6199 = R6227 && R6200 = 0 && R6201 = R6227 && R6202 = 0 && R6203 = R6227 && R6204 = 0 && R6205 = R6227 && R6206 = 0 && R6207 = R6227 && R6208 = 0 && R6209 = R6227 && R6210 = 0 && R6211 = R6227 && R6212 = 0 && R6213 = R6227 && R6214 = 0 && R6215 = R6227 && R6216 = 0 && R6217 = R6227 && R6218 = 0 && R6219 = R6227 && R6220 = 0 && R6221 = R6227 && R6222 = 0 && R6223 = R6227 && R6224 = 0 && R6225 = R6227 && R6226 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && -1 < R6143 && 0 < R6227 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R5169 + R5167 < 1))) && (R6128 != 0 || R6129 = R6143 || (R17 = 0 && R6143 = 0)) && (R6130 != 0 || R6131 = R6143 || (R17 = 0 && R6143 = 0)) && (R6132 != 0 || R6133 = R6143 || (R17 = 0 && R6143 = 0)) && (R6134 != 0 || R6135 = R6143 || (R17 = 0 && R6143 = 0)) && (R6136 != 0 || R6137 = R6143 || (R17 = 0 && R6143 = 0)) && (R6138 != 0 || R6139 = R6143 || (R17 = 0 && R6143 = 0)) && (R6140 != 0 || R6141 = R6143 || (R17 = 0 && R6143 = 0)) && (R6144 != 0 || R6143 = R6145 || (R17 = 0 && R6143 = 0)) && (R6146 != 0 || R6143 = R6147 || (R17 = 0 && R6143 = 0)) && (R18 = 0 || (R6166 = 0 && R6167 = 0)) && (R18 = 0 || (R6170 = 0 && R6171 = 0)) && (R18 = 0 || (R6172 = 0 && R6173 = 0)) && (R18 = 0 || (R6174 = 0 && R6175 = 0)) && (R18 = 0 || (R6178 = 0 && R6179 = 0)) && (R19 = 0 || (R6148 = 0 && R6149 = 0)) && (R19 = 0 || (R6150 = 0 && R6151 = 0)) && (R19 = 0 || (R6152 = 0 && R6153 = 0)) && (R19 = 0 || (R6154 = 0 && R6155 = 0)) && (R19 = 0 || (R6156 = 0 && R6157 = 0)) && (R19 = 0 || (R6158 = 0 && R6159 = 0)) && (R19 = 0 || (R6160 = 0 && R6161 = 0)) && (R19 = 0 || (R6162 = 0 && R6163 = 0)) && (R19 = 0 || (R6164 = 0 && R6165 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R6019 + R6016 = 0 || (R56 + R6017 + R6014 = 0 && R57 + R6018 + R6015 = 0)) && (R58 + R6019 + R6016 = 0 || (R62 + R6126 + R6124 = 0 && R63 + R6127 + R6125 = 0)) && (R6128 = 0 || (R17 = 0 && R6143 = 0)) && (R6130 = 0 || (R17 = 0 && R6143 = 0)) && (R6132 = 0 || (R17 = 0 && R6143 = 0)) && (R6134 = 0 || (R17 = 0 && R6143 = 0)) && (R6136 = 0 || (R17 = 0 && R6143 = 0)) && (R6138 = 0 || (R17 = 0 && R6143 = 0)) && (R6140 = 0 || (R17 = 0 && R6143 = 0)) && (R6144 = 0 || (R17 = 0 && R6143 = 0)) && (R6146 = 0 || (R17 = 0 && R6143 = 0));
// End of Parikh automata intersection problem
