// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R4 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s1 [11, 11] { R10 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s1 [0, 65535] { R12 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R12 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R14 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R14 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s1 [0, 65535] { R16 += 1, R5 += 1, R6 += 1 };
  s0 -> s2 [32, 32] { R16 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R16 += 1, R5 += 1, R6 += 1 };
  s1 -> s2 [32, 32] { R16 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R16 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R18 += 1, R8 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R18 += 1, R7 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R18 += 1, R8 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18 += 1, R8 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18 += 1, R7 += 1, R8 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R18 && R5 = 0 && R9 = 0 && R10 = 1 && R11 = 0 && R12 = 1 && R13 = 1 && R14 = R18 && R15 = 1 && R16 = R18 && R17 = 1 && R0 != 0 && R4 < 1 && 0 < R18 && (R0 != R6 || R6 = 1 || R6 < 0) && (R6 != 1 || -1 < R0) && (R7 != 0 || ((R2 != 0 || ((R0 != R8 || R8 = 1 || R8 < 0) && (R0 = R8 || R8 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R8 || R8 = 1 || R8 < 0) && (R8 != 1 || -1 < R0) && (R0 = R8 || R8 = 1))))) && (R0 = R6 || R6 = 1) && (R7 = 0 || (R2 = 0 && R0 < 0));
// End of Parikh automata intersection problem
