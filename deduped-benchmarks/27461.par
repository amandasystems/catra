// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1350, R1351, R1352, R1353, R1354, R1355, R1356, R1357, R1358, R1359, R1360, R1361, R1362, R1363, R1364, R1365, R1366, R1367, R1368, R1369, R1370, R1371, R1372, R1373, R1374, R1375, R1376, R1377, R1378, R1379, R1380, R1381, R1382, R1383, R1384, R1385, R1386, R1387, R1388, R1389, R1390, R1391, R1392, R1393, R1394, R1395, R1396, R1397, R1398, R1399, R1400, R1401, R1402, R1403, R1404, R1405, R1406, R1407, R1408, R1409, R1410, R1411, R1412, R1413, R1414, R1415, R1416, R1417, R1418, R1419, R1420, R1421, R1422, R1423, R1424, R1425, R1426, R1427, R1428, R1429, R1430, R1431, R1432, R1433, R1434, R1435, R1436, R1437, R1438, R1439, R1440, R1441, R1442, R1443, R1444, R1445, R1446, R1447, R1448, R1449, R1450, R1451, R1452, R1453, R1454, R1455, R1456, R1457, R1458, R1459, R1460, R1461, R1462, R1463, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1385 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R1384 += 1, R1385 += 1 };
  s1 -> s1 [0, 65535] { R1385 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R1387 += 1 };
  s0 -> s0 [0, 65535] { R1386 += 1, R1387 += 1 };
  s0 -> s2 [73, 73] { R1387 += 1 };
  s0 -> s3 [73, 73] { R1387 += 1 };
  s0 -> s1 [82, 65535] { R1387 += 1 };
  s1 -> s1 [0, 72] { R1387 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1387 += 1 };
  s1 -> s3 [73, 73] { R1387 += 1 };
  s1 -> s1 [82, 65535] { R1387 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R1387 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R1387 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R1389 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R1388 += 1, R1389 += 1 };
  s0 -> s2 [73, 73] { R1389 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R1389 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R1389 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R1389 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1389 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R1389 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R1389 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1389 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R1391 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R1390 += 1, R1391 += 1 };
  s0 -> s2 [73, 73] { R1391 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R1391 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R1391 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R1391 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1391 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R1391 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R1391 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R1391 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R1393 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R1392 += 1, R1393 += 1 };
  s0 -> s2 [73, 73] { R1393 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R1393 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R1393 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R1393 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1393 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R1393 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R1393 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1393 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R1395 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1394 += 1, R1395 += 1 };
  s0 -> s2 [73, 73] { R1395 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R1395 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R1395 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R1395 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1395 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R1395 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R1395 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1395 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R1397 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R1396 += 1, R1397 += 1 };
  s0 -> s2 [73, 73] { R1397 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R1397 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R1397 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R1397 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1397 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R1397 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R1397 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R1397 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R1399 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R1398 += 1, R1399 += 1 };
  s0 -> s2 [73, 73] { R1399 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R1399 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R1399 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R1399 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1399 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R1399 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R1399 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1399 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R1401 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R1400 += 1, R1401 += 1 };
  s0 -> s2 [73, 73] { R1401 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R1401 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R1401 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R1401 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1401 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R1401 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R1401 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1401 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R1421 += 1 };
  s0 -> s0 [0, 65535] { R1420 += 1, R1421 += 1 };
  s0 -> s2 [73, 73] { R1421 += 1 };
  s0 -> s1 [74, 65535] { R1421 += 1 };
  s1 -> s1 [0, 72] { R1421 += 1 };
  s1 -> s2 [73, 73] { R1421 += 1 };
  s1 -> s1 [74, 65535] { R1421 += 1 };
  s2 -> s2 [0, 65535] { R1421 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1422 += 1, R1423 += 1 };
  s0 -> s1 [0, 65535] { R1423 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1423 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R1425 += 1 };
  s0 -> s2 [0, 65535] { R1425 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1424 += 1, R1425 += 1 };
  s0 -> s3 [73, 73] { R1425 += 1 };
  s0 -> s1 [74, 65535] { R1425 += 1 };
  s1 -> s1 [0, 72] { R1425 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R1425 += 1 };
  s1 -> s1 [74, 65535] { R1425 += 1 };
  s2 -> s1 [0, 72] { R1425 += 1 };
  s2 -> s2 [0, 65535] { R1425 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R1425 += 1 };
  s2 -> s1 [74, 65535] { R1425 += 1 };
  s3 -> s3 [0, 65535] { R1425 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R1427 += 1, R1365 += 1 };
  s0 -> s2 [0, 65535] { R1427 += 1, R1364 += 1, R1365 += 1 };
  s0 -> s0 [0, 65535] { R1426 += 1, R1427 += 1 };
  s0 -> s1 [74, 65535] { R1427 += 1, R1365 += 1 };
  s1 -> s1 [0, 72] { R1427 += 1, R1365 += 1 };
  s1 -> s1 [0, 65535] { R1427 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R1427 += 1, R1365 += 1 };
  s2 -> s1 [0, 72] { R1427 += 1, R1365 += 1 };
  s2 -> s2 [0, 65535] { R1427 += 1, R1364 += 1, R1365 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R1427 += 1, R1365 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R1428 += 1, R1429 += 1 };
  s0 -> s1 [0, 65535] { R1429 += 1, R1367 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R1429 += 1, R1366 += 1, R1367 += 1 };
  s1 -> s4 [0, 65535] { R1429 += 1 };
  s1 -> s1 [0, 65535] { R1429 += 1, R1367 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1429 += 1, R1367 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R1429 += 1, R1366 += 1, R1367 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1429 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R1431 += 1, R1369 += 1 };
  s0 -> s2 [0, 65535] { R1431 += 1, R1368 += 1, R1369 += 1 };
  s0 -> s0 [0, 65535] { R1430 += 1, R1431 += 1 };
  s0 -> s1 [81, 65535] { R1431 += 1, R1369 += 1 };
  s1 -> s1 [0, 73] { R1431 += 1, R1369 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1431 += 1 };
  s1 -> s1 [81, 65535] { R1431 += 1, R1369 += 1 };
  s2 -> s1 [0, 73] { R1431 += 1, R1369 += 1 };
  s2 -> s2 [0, 65535] { R1431 += 1, R1368 += 1, R1369 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R1431 += 1, R1369 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1433 += 1, R1370 += 1, R1371 += 1 };
  s0 -> s2 [0, 65535] { R1433 += 1, R1371 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R1432 += 1, R1433 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1433 += 1, R1370 += 1, R1371 += 1 };
  s1 -> s2 [0, 65535] { R1433 += 1, R1371 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1433 += 1, R1371 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R1433 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1433 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R1435 += 1, R1373 += 1 };
  s0 -> s2 [0, 65535] { R1435 += 1, R1373 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R1435 += 1, R1372 += 1, R1373 += 1 };
  s0 -> s0 [0, 65535] { R1434 += 1, R1435 += 1 };
  s0 -> s1 [82, 65535] { R1435 += 1, R1373 += 1 };
  s1 -> s1 [0, 80] { R1435 += 1, R1373 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1435 += 1 };
  s1 -> s1 [82, 65535] { R1435 += 1, R1373 += 1 };
  s2 -> s1 [0, 80] { R1435 += 1, R1373 += 1 };
  s2 -> s2 [0, 65535] { R1435 += 1, R1373 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1435 += 1 };
  s2 -> s1 [82, 65535] { R1435 += 1, R1373 += 1 };
  s3 -> s1 [0, 80] { R1435 += 1, R1373 += 1 };
  s3 -> s2 [0, 65535] { R1435 += 1, R1373 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R1435 += 1, R1372 += 1, R1373 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R1435 += 1, R1373 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1435 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R1437 += 1, R1375 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R1437 += 1, R1374 += 1, R1375 += 1 };
  s0 -> s3 [0, 65535] { R1437 += 1, R1375 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R1436 += 1, R1437 += 1 };
  s0 -> s1 [82, 65535] { R1437 += 1, R1375 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R1437 += 1, R1375 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R1437 += 1, R1375 += 1 };
  s1 -> s4 [0, 65535] { R1437 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R1437 += 1, R1375 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R1437 += 1, R1375 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1437 += 1, R1374 += 1, R1375 += 1 };
  s2 -> s3 [0, 65535] { R1437 += 1, R1375 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [82, 65535] { R1437 += 1, R1375 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R1437 += 1, R1375 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R1437 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1437 += 1, R1375 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [82, 65535] { R1437 += 1, R1375 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R1437 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1439 += 1, R1377 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R1439 += 1, R1377 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R1438 += 1, R1439 += 1 };
  s0 -> s3 [0, 65535] { R1439 += 1, R1376 += 1, R1377 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1439 += 1, R1377 += 1, R77 += 1, R78 += 1 };
  s1 -> s2 [0, 65535] { R1439 += 1, R1377 += 1, R78 += 1, R79 += 1 };
  s1 -> s6 [0, 65535] { R1439 += 1 };
  s2 -> s5 [0, 65535] { R1439 += 1, R1377 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1439 += 1, R1377 += 1, R78 += 1, R79 += 1 };
  s2 -> s6 [0, 65535] { R1439 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1439 += 1, R1377 += 1, R77 += 1, R78 += 1 };
  s3 -> s2 [0, 65535] { R1439 += 1, R1377 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R1439 += 1, R1376 += 1, R1377 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1439 += 1, R1377 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R1439 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1439 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s0 -> s0 [0, 65535] { R1440 += 1, R1441 += 1 };
  s0 -> s2 [0, 65535] { R1441 += 1, R1379 += 1, R1352 += 1, R1353 += 1 };
  s0 -> s3 [0, 65535] { R1441 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s4 [90, 90] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s0 -> s1 [91, 65535] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s1 -> s1 [0, 81] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s1 -> s4 [90, 90] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s1 -> s1 [91, 65535] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s2 -> s1 [0, 81] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s2 -> s2 [0, 65535] { R1441 += 1, R1379 += 1, R1352 += 1, R1353 += 1 };
  s2 -> s4 [90, 90] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s2 -> s1 [91, 65535] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s3 -> s1 [0, 81] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s3 -> s2 [0, 65535] { R1441 += 1, R1379 += 1, R1352 += 1, R1353 += 1 };
  s3 -> s3 [0, 65535] { R1441 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s4 [90, 90] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s3 -> s1 [91, 65535] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s4 -> s4 [0, 81] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s4 -> s5 [0, 65535] { R1441 += 1 };
  s4 -> s4 [0, 65535] { R1441 += 1, R1379 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [90, 65535] { R1441 += 1, R1379 += 1, R1353 += 1 };
  s5 -> s5 [0, 65535] { R1441 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1443 += 1, R1381 += 1, R1357 += 1, R1358 += 1 };
  s0 -> s2 [0, 65535] { R1443 += 1, R1380 += 1, R1381 += 1 };
  s0 -> s0 [0, 65535] { R1442 += 1, R1443 += 1 };
  s0 -> s3 [0, 65535] { R1443 += 1, R1381 += 1, R1358 += 1, R1359 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1443 += 1, R1381 += 1, R1357 += 1, R1358 += 1 };
  s1 -> s3 [0, 65535] { R1443 += 1, R1381 += 1, R1358 += 1, R1359 += 1 };
  s1 -> s6 [0, 65535] { R1443 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1443 += 1, R1381 += 1, R1357 += 1, R1358 += 1 };
  s2 -> s2 [0, 65535] { R1443 += 1, R1380 += 1, R1381 += 1 };
  s2 -> s3 [0, 65535] { R1443 += 1, R1381 += 1, R1358 += 1, R1359 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1443 += 1, R1381 += 1 };
  s3 -> s3 [0, 65535] { R1443 += 1, R1381 += 1, R1358 += 1, R1359 += 1 };
  s3 -> s6 [0, 65535] { R1443 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1443 += 1, R1381 += 1 };
  s5 -> s6 [0, 65535] { R1443 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1443 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s0 -> s2 [0, 65535] { R1445 += 1, R1383 += 1, R1362 += 1, R1363 += 1 };
  s0 -> s3 [0, 65535] { R1445 += 1, R1382 += 1, R1383 += 1 };
  s0 -> s0 [0, 65535] { R1444 += 1, R1445 += 1 };
  s0 -> s4 [81, 81] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s0 -> s5 [81, 81] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s0 -> s1 [91, 65535] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s1 -> s1 [0, 80] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R1445 += 1 };
  s1 -> s1 [0, 65535] { R1445 += 1, R1383 += 1 };
  s1 -> s4 [81, 81] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s1 -> s5 [81, 81] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s1 -> s1 [91, 65535] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s2 -> s1 [0, 80] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s2 -> s2 [0, 65535] { R1445 += 1, R1383 += 1, R1362 += 1, R1363 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R1445 += 1 };
  s2 -> s4 [81, 81] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s2 -> s5 [81, 81] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s2 -> s1 [91, 65535] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s3 -> s1 [0, 80] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s3 -> s2 [0, 65535] { R1445 += 1, R1383 += 1, R1362 += 1, R1363 += 1 };
  s3 -> s3 [0, 65535] { R1445 += 1, R1382 += 1, R1383 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [81, 81] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s3 -> s5 [81, 81] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s3 -> s1 [91, 65535] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s4 -> s4 [0, 81] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s4 -> s4 [0, 65535] { R1445 += 1, R1383 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R1445 += 1 };
  s4 -> s4 [91, 65535] { R1445 += 1, R1383 += 1, R1363 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R1445 += 1 };
  s5 -> s5 [0, 65535] { R1445 += 1, R1383 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1445 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1447 += 1, R1403 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R1446 += 1, R1447 += 1 };
  s0 -> s2 [0, 65535] { R1447 += 1, R1402 += 1, R1403 += 1 };
  s1 -> s1 [0, 65535] { R1447 += 1, R1403 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R1447 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1447 += 1, R1403 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1447 += 1, R1402 += 1, R1403 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1447 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R1449 += 1, R1405 += 1 };
  s0 -> s2 [0, 65535] { R1449 += 1, R1404 += 1, R1405 += 1 };
  s0 -> s0 [0, 65535] { R1448 += 1, R1449 += 1 };
  s0 -> s3 [73, 73] { R1449 += 1, R1405 += 1 };
  s0 -> s4 [73, 73] { R1449 += 1, R1405 += 1 };
  s0 -> s5 [81, 81] { R1449 += 1, R1405 += 1 };
  s0 -> s1 [82, 65535] { R1449 += 1, R1405 += 1 };
  s1 -> s1 [0, 72] { R1449 += 1, R1405 += 1 };
  s1 -> s3 [73, 73] { R1449 += 1, R1405 += 1 };
  s1 -> s4 [73, 73] { R1449 += 1, R1405 += 1 };
  s1 -> s5 [81, 81] { R1449 += 1, R1405 += 1 };
  s1 -> s1 [82, 65535] { R1449 += 1, R1405 += 1 };
  s2 -> s1 [0, 72] { R1449 += 1, R1405 += 1 };
  s2 -> s2 [0, 65535] { R1449 += 1, R1404 += 1, R1405 += 1 };
  s2 -> s3 [73, 73] { R1449 += 1, R1405 += 1 };
  s2 -> s4 [73, 73] { R1449 += 1, R1405 += 1 };
  s2 -> s5 [81, 81] { R1449 += 1, R1405 += 1 };
  s2 -> s1 [82, 65535] { R1449 += 1, R1405 += 1 };
  s3 -> s3 [0, 73] { R1449 += 1, R1405 += 1 };
  s3 -> s7 [81, 81] { R1449 += 1, R1405 += 1 };
  s3 -> s3 [82, 65535] { R1449 += 1, R1405 += 1 };
  s5 -> s5 [0, 72] { R1449 += 1, R1405 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1449 += 1 };
  s5 -> s7 [73, 73] { R1449 += 1, R1405 += 1 };
  s5 -> s8 [73, 73] { R1449 += 1, R1405 += 1 };
  s5 -> s5 [81, 65535] { R1449 += 1, R1405 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R1449 += 1, R1405 += 1 };
  s7 -> s7 [0, 65535] { R1449 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R1449 += 1, R1405 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1449 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R1451 += 1, R1407 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R1451 += 1, R1406 += 1, R1407 += 1 };
  s0 -> s0 [0, 65535] { R1450 += 1, R1451 += 1 };
  s0 -> s3 [73, 73] { R1451 += 1, R1407 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R1451 += 1, R1407 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R1451 += 1, R1407 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R1451 += 1, R1407 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1451 += 1 };
  s1 -> s3 [73, 73] { R1451 += 1, R1407 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R1451 += 1, R1407 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R1451 += 1, R1407 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R1451 += 1, R1407 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1451 += 1, R1406 += 1, R1407 += 1 };
  s2 -> s3 [73, 73] { R1451 += 1, R1407 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R1451 += 1, R1407 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R1451 += 1, R1407 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R1451 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1451 += 1, R1407 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R1451 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1451 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R1453 += 1, R1409 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R1452 += 1, R1453 += 1 };
  s0 -> s2 [0, 65535] { R1453 += 1, R1408 += 1, R1409 += 1 };
  s0 -> s3 [73, 73] { R1453 += 1, R1409 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R1453 += 1, R1409 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R1453 += 1, R1409 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R1453 += 1, R1409 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R1453 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1453 += 1, R1409 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R1453 += 1, R1409 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R1453 += 1, R1409 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R1453 += 1, R1409 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1453 += 1, R1408 += 1, R1409 += 1 };
  s2 -> s3 [73, 73] { R1453 += 1, R1409 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R1453 += 1, R1409 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R1453 += 1, R1409 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R1453 += 1, R1409 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1453 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1453 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1453 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R1455 += 1, R1410 += 1, R1411 += 1 };
  s0 -> s0 [0, 65535] { R1454 += 1, R1455 += 1 };
  s0 -> s3 [73, 73] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1455 += 1 };
  s1 -> s3 [73, 73] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1455 += 1, R1410 += 1, R1411 += 1 };
  s2 -> s3 [73, 73] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1455 += 1 };
  s3 -> s3 [0, 65535] { R1455 += 1, R1411 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1455 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1455 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R1457 += 1, R1412 += 1, R1413 += 1 };
  s0 -> s0 [0, 65535] { R1456 += 1, R1457 += 1 };
  s0 -> s3 [73, 73] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1457 += 1 };
  s1 -> s3 [73, 73] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1457 += 1, R1412 += 1, R1413 += 1 };
  s2 -> s3 [73, 73] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R1457 += 1 };
  s3 -> s3 [0, 65535] { R1457 += 1, R1413 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1457 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1457 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s2 [0, 65535] { R1459 += 1, R1414 += 1, R1415 += 1 };
  s0 -> s0 [0, 65535] { R1458 += 1, R1459 += 1 };
  s0 -> s3 [73, 73] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s4 [73, 73] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s1 [74, 65535] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [0, 72] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [0, 65535] { R1459 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s4 [73, 73] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [74, 65535] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [0, 72] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s2 [0, 65535] { R1459 += 1, R1414 += 1, R1415 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s4 [73, 73] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [74, 65535] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s3 [0, 65535] { R1459 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1459 += 1 };
  s4 -> s4 [0, 65535] { R1459 += 1, R1415 += 1, R1350 += 1, R1351 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1459 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s2 [0, 65535] { R1461 += 1, R1416 += 1, R1417 += 1 };
  s0 -> s0 [0, 65535] { R1460 += 1, R1461 += 1 };
  s0 -> s3 [73, 73] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s4 [73, 73] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s1 [74, 65535] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [0, 72] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1461 += 1 };
  s1 -> s3 [73, 73] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s4 [73, 73] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [74, 65535] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s1 [0, 72] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s2 [0, 65535] { R1461 += 1, R1416 += 1, R1417 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s4 [73, 73] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s1 [74, 65535] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1461 += 1 };
  s4 -> s5 [0, 65535] { R1461 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1461 += 1, R1417 += 1, R1354 += 1, R1355 += 1 };
  s5 -> s5 [0, 65535] { R1461 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s0 -> s2 [0, 65535] { R1463 += 1, R1418 += 1, R1419 += 1 };
  s0 -> s0 [0, 65535] { R1462 += 1, R1463 += 1 };
  s0 -> s3 [73, 73] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s0 -> s4 [73, 73] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s0 -> s1 [74, 65535] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s1 -> s1 [0, 72] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1463 += 1 };
  s1 -> s3 [73, 73] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s1 -> s4 [73, 73] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s1 -> s1 [74, 65535] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s2 -> s1 [0, 72] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1463 += 1, R1418 += 1, R1419 += 1 };
  s2 -> s3 [73, 73] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s2 -> s4 [73, 73] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s2 -> s1 [74, 65535] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1463 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1463 += 1, R1419 += 1, R1360 += 1, R1361 += 1 };
  s4 -> s6 [0, 65535] { R1463 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1463 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R1379 && R2 = R1463 && R20 - R1463 = -1 && R21 = R1463 && R22 - R1463 = -1 && R23 = R1463 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R1353 + -1*R1351 - R53 = 0 && R52 + R1352 + R1350 = 0 && R1378 = 0 && R1404 = 0 && R1405 = 0 && R1420 = 0 && R1421 = R1463 && R1422 = 0 && R1423 = R1463 && R1424 = 0 && R1425 = R1463 && R1426 = 0 && R1427 = R1463 && R1428 = 0 && R1429 = R1463 && R1430 = 0 && R1431 = R1463 && R1432 = 0 && R1433 = R1463 && R1434 = 0 && R1435 = R1463 && R1436 = 0 && R1437 = R1463 && R1438 = 0 && R1439 = R1463 && R1440 = 0 && R1441 = R1463 && R1442 = 0 && R1443 = R1463 && R1444 = 0 && R1445 = R1463 && R1446 = 0 && R1447 = R1463 && R1448 = 0 && R1449 = R1463 && R1450 = 0 && R1451 = R1463 && R1452 = 0 && R1453 = R1463 && R1454 = 0 && R1455 = R1463 && R1456 = 0 && R1457 = R1463 && R1458 = 0 && R1459 = R1463 && R1460 = 0 && R1461 = R1463 && R1462 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R1353 + -1*R1351 - R53 < 1 && -1 < R1379 && 0 < R1463 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R42 + R72 + R70 = 0 || R53 + R1353 + R1351 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R46 + R77 + R74 = 0 || R53 + R1353 + R1351 < 1))) && (R1364 != 0 || R1365 = R1379 || (R17 = 0 && R1379 = 0)) && (R1366 != 0 || R1367 = R1379 || (R17 = 0 && R1379 = 0)) && (R1368 != 0 || R1369 = R1379 || (R17 = 0 && R1379 = 0)) && (R1370 != 0 || R1371 = R1379 || (R17 = 0 && R1379 = 0)) && (R1372 != 0 || R1373 = R1379 || (R17 = 0 && R1379 = 0)) && (R1374 != 0 || R1375 = R1379 || (R17 = 0 && R1379 = 0)) && (R1376 != 0 || R1377 = R1379 || (R17 = 0 && R1379 = 0)) && (R1380 != 0 || R1379 = R1381 || (R17 = 0 && R1379 = 0)) && (R1382 != 0 || R1379 = R1383 || (R17 = 0 && R1379 = 0)) && (R18 = 0 || (R1402 = 0 && R1403 = 0)) && (R18 = 0 || (R1406 = 0 && R1407 = 0)) && (R18 = 0 || (R1408 = 0 && R1409 = 0)) && (R18 = 0 || (R1410 = 0 && R1411 = 0)) && (R18 = 0 || (R1412 = 0 && R1413 = 0)) && (R18 = 0 || (R1414 = 0 && R1415 = 0)) && (R18 = 0 || (R1416 = 0 && R1417 = 0)) && (R18 = 0 || (R1418 = 0 && R1419 = 0)) && (R19 = 0 || (R1384 = 0 && R1385 = 0)) && (R19 = 0 || (R1386 = 0 && R1387 = 0)) && (R19 = 0 || (R1388 = 0 && R1389 = 0)) && (R19 = 0 || (R1390 = 0 && R1391 = 0)) && (R19 = 0 || (R1392 = 0 && R1393 = 0)) && (R19 = 0 || (R1394 = 0 && R1395 = 0)) && (R19 = 0 || (R1396 = 0 && R1397 = 0)) && (R19 = 0 || (R1398 = 0 && R1399 = 0)) && (R19 = 0 || (R1400 = 0 && R1401 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0)) && (R58 + R1359 + R1356 = 0 || (R56 + R1357 + R1354 = 0 && R57 + R1358 + R1355 = 0)) && (R58 + R1359 + R1356 = 0 || (R62 + R1362 + R1360 = 0 && R63 + R1363 + R1361 = 0)) && (R1364 = 0 || (R17 = 0 && R1379 = 0)) && (R1366 = 0 || (R17 = 0 && R1379 = 0)) && (R1368 = 0 || (R17 = 0 && R1379 = 0)) && (R1370 = 0 || (R17 = 0 && R1379 = 0)) && (R1372 = 0 || (R17 = 0 && R1379 = 0)) && (R1374 = 0 || (R17 = 0 && R1379 = 0)) && (R1376 = 0 || (R17 = 0 && R1379 = 0)) && (R1380 = 0 || (R17 = 0 && R1379 = 0)) && (R1382 = 0 || (R17 = 0 && R1379 = 0));
// End of Parikh automata intersection problem
