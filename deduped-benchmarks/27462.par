// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1350, R1351, R1352, R1353, R1354, R1355, R1356, R1357, R1358, R1359, R1464, R1465, R1466, R1467, R1468, R1469, R1470, R1471, R1472, R1473, R1474, R1475, R1476, R1477, R1478, R1479, R1480, R1481, R1482, R1483, R1484, R1485, R1486, R1487, R1488, R1489, R1490, R1491, R1492, R1493, R1494, R1495, R1496, R1497, R1498, R1499, R1500, R1501, R1502, R1503, R1504, R1505, R1506, R1507, R1508, R1509, R1510, R1511, R1512, R1513, R1514, R1515, R1516, R1517, R1518, R1519, R1520, R1521, R1522, R1523, R1524, R1525, R1526, R1527, R1528, R1529, R1530, R1531, R1532, R1533, R1534, R1535, R1536, R1537, R1538, R1539, R1540, R1541, R1542, R1543, R1544, R1545, R1546, R1547, R1548, R1549, R1550, R1551, R1552, R1553, R1554, R1555, R1556, R1557, R1558, R1559, R1560, R1561, R1562, R1563, R1564, R1565, R1566, R1567, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1488 += 1, R1489 += 1 };
  s0 -> s1 [0, 65535] { R1489 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1489 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R1491 += 1 };
  s0 -> s0 [0, 65535] { R1490 += 1, R1491 += 1 };
  s0 -> s2 [73, 73] { R1491 += 1 };
  s0 -> s3 [73, 73] { R1491 += 1 };
  s0 -> s1 [82, 65535] { R1491 += 1 };
  s1 -> s1 [0, 72] { R1491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1491 += 1 };
  s1 -> s3 [73, 73] { R1491 += 1 };
  s1 -> s1 [82, 65535] { R1491 += 1 };
  s2 -> s2 [0, 73] { R1491 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R1491 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R1493 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R1492 += 1, R1493 += 1 };
  s0 -> s2 [73, 73] { R1493 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R1493 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R1493 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R1493 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1493 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R1493 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R1493 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R1493 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R1495 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R1494 += 1, R1495 += 1 };
  s0 -> s2 [73, 73] { R1495 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R1495 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R1495 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R1495 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1495 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R1495 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R1495 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1495 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R1497 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R1496 += 1, R1497 += 1 };
  s0 -> s2 [73, 73] { R1497 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R1497 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R1497 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R1497 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1497 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R1497 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R1497 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1497 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R1499 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1498 += 1, R1499 += 1 };
  s0 -> s2 [73, 73] { R1499 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R1499 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R1499 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R1499 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1499 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R1499 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R1499 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R1499 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R1501 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R1500 += 1, R1501 += 1 };
  s0 -> s2 [73, 73] { R1501 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R1501 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R1501 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R1501 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1501 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R1501 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R1501 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R1501 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R1503 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R1502 += 1, R1503 += 1 };
  s0 -> s2 [73, 73] { R1503 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R1503 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R1503 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R1503 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1503 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R1503 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R1503 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R1503 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R1505 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R1504 += 1, R1505 += 1 };
  s0 -> s2 [73, 73] { R1505 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R1505 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R1505 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R1505 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1505 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R1505 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R1505 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1505 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R1525 += 1 };
  s0 -> s0 [0, 65535] { R1524 += 1, R1525 += 1 };
  s0 -> s2 [73, 73] { R1525 += 1 };
  s0 -> s1 [74, 65535] { R1525 += 1 };
  s1 -> s1 [0, 72] { R1525 += 1 };
  s1 -> s2 [73, 73] { R1525 += 1 };
  s1 -> s1 [74, 65535] { R1525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1525 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1526 += 1, R1527 += 1 };
  s0 -> s1 [0, 65535] { R1527 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1527 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R1529 += 1 };
  s0 -> s2 [0, 65535] { R1529 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1528 += 1, R1529 += 1 };
  s0 -> s3 [73, 73] { R1529 += 1 };
  s0 -> s1 [74, 65535] { R1529 += 1 };
  s1 -> s1 [0, 72] { R1529 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R1529 += 1 };
  s1 -> s1 [74, 65535] { R1529 += 1 };
  s2 -> s1 [0, 72] { R1529 += 1 };
  s2 -> s2 [0, 65535] { R1529 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R1529 += 1 };
  s2 -> s1 [74, 65535] { R1529 += 1 };
  s3 -> s3 [0, 65535] { R1529 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R1531 += 1, R1469 += 1 };
  s0 -> s0 [0, 65535] { R1530 += 1, R1531 += 1 };
  s0 -> s2 [0, 65535] { R1531 += 1, R1468 += 1, R1469 += 1 };
  s0 -> s1 [74, 65535] { R1531 += 1, R1469 += 1 };
  s1 -> s1 [0, 72] { R1531 += 1, R1469 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1531 += 1 };
  s1 -> s1 [74, 65535] { R1531 += 1, R1469 += 1 };
  s2 -> s1 [0, 72] { R1531 += 1, R1469 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1531 += 1, R1468 += 1, R1469 += 1 };
  s2 -> s1 [74, 65535] { R1531 += 1, R1469 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1533 += 1, R1470 += 1, R1471 += 1 };
  s0 -> s2 [0, 65535] { R1533 += 1, R1471 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1532 += 1, R1533 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1533 += 1, R1470 += 1, R1471 += 1 };
  s1 -> s2 [0, 65535] { R1533 += 1, R1471 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R1533 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1533 += 1, R1471 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R1533 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R1535 += 1, R1473 += 1 };
  s0 -> s2 [0, 65535] { R1535 += 1, R1472 += 1, R1473 += 1 };
  s0 -> s0 [0, 65535] { R1534 += 1, R1535 += 1 };
  s0 -> s1 [81, 65535] { R1535 += 1, R1473 += 1 };
  s1 -> s1 [0, 73] { R1535 += 1, R1473 += 1 };
  s1 -> s1 [0, 65535] { R1535 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R1535 += 1, R1473 += 1 };
  s2 -> s1 [0, 73] { R1535 += 1, R1473 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1535 += 1, R1472 += 1, R1473 += 1 };
  s2 -> s1 [81, 65535] { R1535 += 1, R1473 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1536 += 1, R1537 += 1 };
  s0 -> s1 [0, 65535] { R1537 += 1, R1474 += 1, R1475 += 1 };
  s0 -> s2 [0, 65535] { R1537 += 1, R1475 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1537 += 1, R1474 += 1, R1475 += 1 };
  s1 -> s2 [0, 65535] { R1537 += 1, R1475 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1537 += 1 };
  s2 -> s2 [0, 65535] { R1537 += 1, R1475 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1537 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R1539 += 1, R1477 += 1 };
  s0 -> s2 [0, 65535] { R1539 += 1, R1476 += 1, R1477 += 1 };
  s0 -> s0 [0, 65535] { R1538 += 1, R1539 += 1 };
  s0 -> s3 [0, 65535] { R1539 += 1, R1477 += 1, R69 += 1 };
  s0 -> s1 [82, 65535] { R1539 += 1, R1477 += 1 };
  s1 -> s1 [0, 80] { R1539 += 1, R1477 += 1 };
  s1 -> s1 [0, 65535] { R1539 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R1539 += 1, R1477 += 1 };
  s2 -> s1 [0, 80] { R1539 += 1, R1477 += 1 };
  s2 -> s2 [0, 65535] { R1539 += 1, R1476 += 1, R1477 += 1 };
  s2 -> s3 [0, 65535] { R1539 += 1, R1477 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R1539 += 1, R1477 += 1 };
  s3 -> s1 [0, 80] { R1539 += 1, R1477 += 1 };
  s3 -> s4 [0, 65535] { R1539 += 1 };
  s3 -> s3 [0, 65535] { R1539 += 1, R1477 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R1539 += 1, R1477 += 1 };
  s4 -> s4 [0, 65535] { R1539 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R1541 += 1, R1479 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R1540 += 1, R1541 += 1 };
  s0 -> s2 [0, 65535] { R1541 += 1, R1479 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R1541 += 1, R1478 += 1, R1479 += 1 };
  s0 -> s1 [82, 65535] { R1541 += 1, R1479 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R1541 += 1, R1479 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R1541 += 1, R1479 += 1 };
  s1 -> s5 [0, 65535] { R1541 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R1541 += 1, R1479 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R1541 += 1, R1479 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R1541 += 1, R1479 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R1541 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R1541 += 1, R1479 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R1541 += 1, R1479 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R1541 += 1, R1479 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R1541 += 1, R1478 += 1, R1479 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R1541 += 1, R1479 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1541 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1543 += 1, R1481 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R1542 += 1, R1543 += 1 };
  s0 -> s2 [0, 65535] { R1543 += 1, R1480 += 1, R1481 += 1 };
  s0 -> s3 [0, 65535] { R1543 += 1, R1481 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535] { R1543 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1543 += 1, R1481 += 1, R78 += 1, R79 += 1 };
  s1 -> s6 [0, 65535] { R1543 += 1, R1481 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1543 += 1, R1481 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R1543 += 1, R1480 += 1, R1481 += 1 };
  s2 -> s3 [0, 65535] { R1543 += 1, R1481 += 1, R77 += 1, R78 += 1 };
  s3 -> s4 [0, 65535] { R1543 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1543 += 1, R1481 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R1543 += 1, R1481 += 1, R77 += 1, R78 += 1 };
  s4 -> s4 [0, 65535] { R1543 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1543 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1543 += 1, R1481 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s0 -> s0 [0, 65535] { R1544 += 1, R1545 += 1 };
  s0 -> s2 [0, 65535] { R1545 += 1, R1483 += 1, R1352 += 1, R1353 += 1 };
  s0 -> s3 [0, 65535] { R1545 += 1, R1482 += 1, R1483 += 1 };
  s0 -> s4 [90, 90] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s0 -> s1 [91, 65535] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s1 -> s1 [0, 81] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s1 -> s4 [90, 90] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s1 -> s1 [91, 65535] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s2 -> s1 [0, 81] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s2 -> s2 [0, 65535] { R1545 += 1, R1483 += 1, R1352 += 1, R1353 += 1 };
  s2 -> s4 [90, 90] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s2 -> s1 [91, 65535] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s3 -> s1 [0, 81] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s3 -> s2 [0, 65535] { R1545 += 1, R1483 += 1, R1352 += 1, R1353 += 1 };
  s3 -> s3 [0, 65535] { R1545 += 1, R1482 += 1, R1483 += 1 };
  s3 -> s4 [90, 90] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s3 -> s1 [91, 65535] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s4 -> s4 [0, 81] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1545 += 1 };
  s4 -> s4 [0, 65535] { R1545 += 1, R1483 += 1 };
  s4 -> s4 [90, 65535] { R1545 += 1, R1483 += 1, R1353 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1545 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R1546 += 1, R1547 += 1 };
  s0 -> s1 [0, 65535] { R1547 += 1, R1485 += 1, R1357 += 1, R1358 += 1 };
  s0 -> s2 [0, 65535] { R1547 += 1, R1484 += 1, R1485 += 1 };
  s0 -> s3 [0, 65535] { R1547 += 1, R1485 += 1, R1358 += 1, R1359 += 1 };
  s1 -> s4 [0, 65535] { R1547 += 1 };
  s1 -> s1 [0, 65535] { R1547 += 1, R1485 += 1, R1357 += 1, R1358 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R1547 += 1, R1485 += 1, R1358 += 1, R1359 += 1 };
  s2 -> s1 [0, 65535] { R1547 += 1, R1485 += 1, R1357 += 1, R1358 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1547 += 1, R1484 += 1, R1485 += 1 };
  s2 -> s3 [0, 65535] { R1547 += 1, R1485 += 1, R1358 += 1, R1359 += 1 };
  s3 -> s4 [0, 65535] { R1547 += 1 };
  s3 -> s5 [0, 65535] { R1547 += 1, R1485 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1547 += 1, R1485 += 1, R1358 += 1, R1359 += 1 };
  s4 -> s4 [0, 65535] { R1547 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1547 += 1 };
  s5 -> s5 [0, 65535] { R1547 += 1, R1485 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s0 -> s0 [0, 65535] { R1548 += 1, R1549 += 1 };
  s0 -> s2 [0, 65535] { R1549 += 1, R1486 += 1, R1487 += 1 };
  s0 -> s1 [0, 65535] { R1549 += 1, R1487 += 1 };
  s0 -> s3 [81, 81] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s0 -> s4 [81, 81] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s0 -> s1 [91, 65535] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s1 -> s1 [0, 80] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s1 -> s5 [0, 65535] { R1549 += 1 };
  s1 -> s1 [0, 65535] { R1549 += 1, R1487 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s1 -> s4 [81, 81] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s1 -> s1 [91, 65535] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s2 -> s1 [0, 80] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s2 -> s2 [0, 65535] { R1549 += 1, R1486 += 1, R1487 += 1 };
  s2 -> s1 [0, 65535] { R1549 += 1, R1487 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s2 -> s4 [81, 81] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s2 -> s1 [91, 65535] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s3 -> s3 [0, 81] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s3 -> s5 [0, 65535] { R1549 += 1 };
  s3 -> s3 [0, 65535] { R1549 += 1, R1487 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [91, 65535] { R1549 += 1, R1487 += 1, R1467 += 1 };
  s4 -> s5 [0, 65535] { R1549 += 1 };
  s4 -> s4 [0, 65535] { R1549 += 1, R1487 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1549 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1551 += 1, R1507 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R1551 += 1, R1506 += 1, R1507 += 1 };
  s0 -> s0 [0, 65535] { R1550 += 1, R1551 += 1 };
  s1 -> s1 [0, 65535] { R1551 += 1, R1507 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R1551 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1551 += 1, R1507 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R1551 += 1, R1506 += 1, R1507 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1551 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R1553 += 1, R1509 += 1 };
  s0 -> s2 [0, 65535] { R1553 += 1, R1508 += 1, R1509 += 1 };
  s0 -> s0 [0, 65535] { R1552 += 1, R1553 += 1 };
  s0 -> s3 [73, 73] { R1553 += 1, R1509 += 1 };
  s0 -> s4 [73, 73] { R1553 += 1, R1509 += 1 };
  s0 -> s5 [81, 81] { R1553 += 1, R1509 += 1 };
  s0 -> s1 [82, 65535] { R1553 += 1, R1509 += 1 };
  s1 -> s1 [0, 72] { R1553 += 1, R1509 += 1 };
  s1 -> s3 [73, 73] { R1553 += 1, R1509 += 1 };
  s1 -> s4 [73, 73] { R1553 += 1, R1509 += 1 };
  s1 -> s5 [81, 81] { R1553 += 1, R1509 += 1 };
  s1 -> s1 [82, 65535] { R1553 += 1, R1509 += 1 };
  s2 -> s1 [0, 72] { R1553 += 1, R1509 += 1 };
  s2 -> s2 [0, 65535] { R1553 += 1, R1508 += 1, R1509 += 1 };
  s2 -> s3 [73, 73] { R1553 += 1, R1509 += 1 };
  s2 -> s4 [73, 73] { R1553 += 1, R1509 += 1 };
  s2 -> s5 [81, 81] { R1553 += 1, R1509 += 1 };
  s2 -> s1 [82, 65535] { R1553 += 1, R1509 += 1 };
  s3 -> s3 [0, 73] { R1553 += 1, R1509 += 1 };
  s3 -> s7 [81, 81] { R1553 += 1, R1509 += 1 };
  s3 -> s3 [82, 65535] { R1553 += 1, R1509 += 1 };
  s5 -> s5 [0, 72] { R1553 += 1, R1509 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1553 += 1 };
  s5 -> s7 [73, 73] { R1553 += 1, R1509 += 1 };
  s5 -> s8 [73, 73] { R1553 += 1, R1509 += 1 };
  s5 -> s5 [81, 65535] { R1553 += 1, R1509 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R1553 += 1, R1509 += 1 };
  s7 -> s7 [0, 65535] { R1553 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R1553 += 1, R1509 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1553 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R1555 += 1, R1511 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R1555 += 1, R1510 += 1, R1511 += 1 };
  s0 -> s0 [0, 65535] { R1554 += 1, R1555 += 1 };
  s0 -> s3 [73, 73] { R1555 += 1, R1511 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R1555 += 1, R1511 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R1555 += 1, R1511 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R1555 += 1, R1511 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R1555 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1555 += 1, R1511 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R1555 += 1, R1511 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R1555 += 1, R1511 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R1555 += 1, R1511 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R1555 += 1, R1510 += 1, R1511 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1555 += 1, R1511 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R1555 += 1, R1511 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R1555 += 1, R1511 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R1555 += 1, R1511 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R1555 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1555 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1555 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R1557 += 1, R1513 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R1556 += 1, R1557 += 1 };
  s0 -> s2 [0, 65535] { R1557 += 1, R1512 += 1, R1513 += 1 };
  s0 -> s3 [73, 73] { R1557 += 1, R1513 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R1557 += 1, R1513 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R1557 += 1, R1513 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R1557 += 1, R1513 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R1557 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1557 += 1, R1513 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R1557 += 1, R1513 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R1557 += 1, R1513 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R1557 += 1, R1513 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R1557 += 1, R1512 += 1, R1513 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1557 += 1, R1513 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R1557 += 1, R1513 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R1557 += 1, R1513 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R1557 += 1, R1513 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1557 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1557 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1557 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R1558 += 1, R1559 += 1 };
  s0 -> s2 [0, 65535] { R1559 += 1, R1514 += 1, R1515 += 1 };
  s0 -> s3 [73, 73] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R1559 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1559 += 1, R1514 += 1, R1515 += 1 };
  s2 -> s3 [73, 73] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1559 += 1 };
  s4 -> s5 [0, 65535] { R1559 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1559 += 1, R1515 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R1559 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R1560 += 1, R1561 += 1 };
  s0 -> s2 [0, 65535] { R1561 += 1, R1516 += 1, R1517 += 1 };
  s0 -> s3 [73, 73] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R1561 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R1561 += 1, R1516 += 1, R1517 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R1561 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1561 += 1, R1517 += 1, R74 += 1, R75 += 1 };
  s4 -> s5 [0, 65535] { R1561 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1561 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s2 [0, 65535] { R1563 += 1, R1518 += 1, R1519 += 1 };
  s0 -> s0 [0, 65535] { R1562 += 1, R1563 += 1 };
  s0 -> s3 [73, 73] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s4 [73, 73] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s1 [74, 65535] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [0, 72] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1563 += 1 };
  s1 -> s3 [73, 73] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s4 [73, 73] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [74, 65535] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [0, 72] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1563 += 1, R1518 += 1, R1519 += 1 };
  s2 -> s3 [73, 73] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s4 [73, 73] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [74, 65535] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1563 += 1 };
  s3 -> s3 [0, 65535] { R1563 += 1, R1519 += 1, R1350 += 1, R1351 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1563 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1563 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s0 [0, 65535] { R1564 += 1, R1565 += 1 };
  s0 -> s2 [0, 65535] { R1565 += 1, R1520 += 1, R1521 += 1 };
  s0 -> s3 [73, 73] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s4 [73, 73] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s1 [74, 65535] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [0, 72] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [0, 65535] { R1565 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s4 [73, 73] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [74, 65535] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s1 [0, 72] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1565 += 1, R1520 += 1, R1521 += 1 };
  s2 -> s3 [73, 73] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s4 [73, 73] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s1 [74, 65535] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1565 += 1 };
  s4 -> s5 [0, 65535] { R1565 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1565 += 1, R1521 += 1, R1354 += 1, R1355 += 1 };
  s5 -> s5 [0, 65535] { R1565 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s0 -> s2 [0, 72] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s0 -> s0 [0, 65535] { R1566 += 1, R1567 += 1 };
  s0 -> s3 [0, 65535] { R1567 += 1, R1522 += 1, R1523 += 1 };
  s0 -> s4 [73, 73] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s0 -> s5 [73, 73] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s0 -> s6 [73, 73] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s0 -> s7 [73, 73] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s0 -> s2 [74, 80] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s0 -> s1 [74, 65535] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s0 -> s2 [91, 65535] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s1 -> s1 [0, 72] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s1 -> s2 [0, 72] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s1 -> s4 [73, 73] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s1 -> s5 [73, 73] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s1 -> s6 [73, 73] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s1 -> s7 [73, 73] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s1 -> s2 [74, 80] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s1 -> s1 [74, 65535] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s1 -> s2 [91, 65535] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s2 -> s2 [0, 72] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R1567 += 1 };
  s2 -> s6 [73, 73] { R1567 += 1, R1523 += 1 };
  s2 -> s7 [73, 73] { R1567 += 1, R1523 += 1 };
  s2 -> s2 [74, 80] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s2 -> s2 [74, 65535] { R1567 += 1, R1523 += 1 };
  s2 -> s2 [91, 65535] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s3 -> s1 [0, 72] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s3 -> s2 [0, 72] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s3 -> s3 [0, 65535] { R1567 += 1, R1522 += 1, R1523 += 1 };
  s3 -> s4 [73, 73] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s3 -> s5 [73, 73] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s3 -> s6 [73, 73] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s3 -> s7 [73, 73] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s3 -> s2 [74, 80] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s3 -> s1 [74, 65535] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s3 -> s2 [91, 65535] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s4 -> s6 [0, 80] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s4 -> s4 [0, 65535] { R1567 += 1, R1523 += 1, R1464 += 1, R1465 += 1 };
  s4 -> s6 [91, 65535] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s6 -> s6 [0, 80] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s6 -> s6 [0, 65535] { R1567 += 1, R1523 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R1567 += 1 };
  s6 -> s6 [91, 65535] { R1567 += 1, R1523 += 1, R1465 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1567 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1567 += 1 };
  accepting s8, s2, s9, s6, s7;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R1483 && R2 = R1567 && R20 - R1567 = -1 && R21 = R1567 && R22 - R1567 = -1 && R23 = R1567 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R1353 + -1*R1351 - R53 = 0 && R52 + R1352 + R1350 = 0 && R1482 = 0 && R1508 = 0 && R1509 = 0 && R1522 = 0 && R1523 = 0 && R1524 = 0 && R1525 = R1567 && R1526 = 0 && R1527 = R1567 && R1528 = 0 && R1529 = R1567 && R1530 = 0 && R1531 = R1567 && R1532 = 0 && R1533 = R1567 && R1534 = 0 && R1535 = R1567 && R1536 = 0 && R1537 = R1567 && R1538 = 0 && R1539 = R1567 && R1540 = 0 && R1541 = R1567 && R1542 = 0 && R1543 = R1567 && R1544 = 0 && R1545 = R1567 && R1546 = 0 && R1547 = R1567 && R1548 = 0 && R1549 = R1567 && R1550 = 0 && R1551 = R1567 && R1552 = 0 && R1553 = R1567 && R1554 = 0 && R1555 = R1567 && R1556 = 0 && R1557 = R1567 && R1558 = 0 && R1559 = R1567 && R1560 = 0 && R1561 = R1567 && R1562 = 0 && R1563 = R1567 && R1564 = 0 && R1565 = R1567 && R1566 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R1353 + -1*R1351 - R53 < 1 && -1 < R1483 && 0 < R1567 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R42 + R72 + R70 = 0 || R53 + R1353 + R1351 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R46 + R77 + R74 = 0 || R53 + R1353 + R1351 < 1))) && (R1468 != 0 || R1469 = R1483 || (R17 = 0 && R1483 = 0)) && (R1470 != 0 || R1471 = R1483 || (R17 = 0 && R1483 = 0)) && (R1472 != 0 || R1473 = R1483 || (R17 = 0 && R1483 = 0)) && (R1474 != 0 || R1475 = R1483 || (R17 = 0 && R1483 = 0)) && (R1476 != 0 || R1477 = R1483 || (R17 = 0 && R1483 = 0)) && (R1478 != 0 || R1479 = R1483 || (R17 = 0 && R1483 = 0)) && (R1480 != 0 || R1481 = R1483 || (R17 = 0 && R1483 = 0)) && (R1484 != 0 || R1483 = R1485 || (R17 = 0 && R1483 = 0)) && (R1486 != 0 || R1483 = R1487 || (R17 = 0 && R1483 = 0)) && (R18 = 0 || (R1506 = 0 && R1507 = 0)) && (R18 = 0 || (R1510 = 0 && R1511 = 0)) && (R18 = 0 || (R1512 = 0 && R1513 = 0)) && (R18 = 0 || (R1514 = 0 && R1515 = 0)) && (R18 = 0 || (R1516 = 0 && R1517 = 0)) && (R18 = 0 || (R1518 = 0 && R1519 = 0)) && (R18 = 0 || (R1520 = 0 && R1521 = 0)) && (R19 = 0 || (R1488 = 0 && R1489 = 0)) && (R19 = 0 || (R1490 = 0 && R1491 = 0)) && (R19 = 0 || (R1492 = 0 && R1493 = 0)) && (R19 = 0 || (R1494 = 0 && R1495 = 0)) && (R19 = 0 || (R1496 = 0 && R1497 = 0)) && (R19 = 0 || (R1498 = 0 && R1499 = 0)) && (R19 = 0 || (R1500 = 0 && R1501 = 0)) && (R19 = 0 || (R1502 = 0 && R1503 = 0)) && (R19 = 0 || (R1504 = 0 && R1505 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0)) && (R58 + R1359 + R1356 = 0 || (R56 + R1357 + R1354 = 0 && R57 + R1358 + R1355 = 0)) && (R58 + R1359 + R1356 = 0 || (R62 + R1466 + R1464 = 0 && R63 + R1467 + R1465 = 0)) && (R1468 = 0 || (R17 = 0 && R1483 = 0)) && (R1470 = 0 || (R17 = 0 && R1483 = 0)) && (R1472 = 0 || (R17 = 0 && R1483 = 0)) && (R1474 = 0 || (R17 = 0 && R1483 = 0)) && (R1476 = 0 || (R17 = 0 && R1483 = 0)) && (R1478 = 0 || (R17 = 0 && R1483 = 0)) && (R1480 = 0 || (R17 = 0 && R1483 = 0)) && (R1484 = 0 || (R17 = 0 && R1483 = 0)) && (R1486 = 0 || (R17 = 0 && R1483 = 0));
// End of Parikh automata intersection problem
