// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R6440, R6441, R6442, R6443, R6444, R6445, R66, R67, R6758, R6759, R6760, R6761, R6762, R6763, R6764, R6765, R6766, R6767, R6768, R6769, R6770, R6771, R6772, R6773, R6774, R6775, R6776, R6777, R6778, R6779, R6780, R6781, R6782, R6783, R6784, R6785, R6786, R6787, R6788, R6789, R6790, R6791, R6792, R6793, R6794, R6795, R6796, R6797, R6798, R6799, R68, R6800, R6801, R6802, R6803, R6804, R6805, R6806, R6807, R6808, R6809, R6810, R6811, R6812, R6813, R6814, R6815, R6816, R6817, R6818, R6819, R6820, R6821, R6822, R6823, R6824, R6825, R6826, R6827, R6828, R6829, R6830, R6831, R6832, R6833, R6834, R6835, R6836, R6837, R6838, R6839, R6840, R6841, R6842, R6843, R6844, R6845, R6846, R6847, R6848, R6849, R6850, R6851, R6852, R6853, R6854, R6855, R6856, R6857, R6858, R6859, R6860, R6861, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6783 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R6782 += 1, R6783 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6783 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R6785 += 1 };
  s0 -> s0 [0, 65535] { R6784 += 1, R6785 += 1 };
  s0 -> s2 [73, 73] { R6785 += 1 };
  s0 -> s3 [73, 73] { R6785 += 1 };
  s0 -> s1 [82, 65535] { R6785 += 1 };
  s1 -> s1 [0, 72] { R6785 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6785 += 1 };
  s1 -> s3 [73, 73] { R6785 += 1 };
  s1 -> s1 [82, 65535] { R6785 += 1 };
  s2 -> s2 [0, 73] { R6785 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R6785 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R6787 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R6786 += 1, R6787 += 1 };
  s0 -> s2 [73, 73] { R6787 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R6787 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R6787 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R6787 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6787 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R6787 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R6787 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R6787 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R6789 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R6788 += 1, R6789 += 1 };
  s0 -> s2 [73, 73] { R6789 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R6789 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R6789 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R6789 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6789 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R6789 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R6789 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R6789 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R6791 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R6790 += 1, R6791 += 1 };
  s0 -> s2 [73, 73] { R6791 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R6791 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R6791 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R6791 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6791 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R6791 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R6791 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6791 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R6793 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6792 += 1, R6793 += 1 };
  s0 -> s2 [73, 73] { R6793 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R6793 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R6793 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R6793 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6793 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R6793 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R6793 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R6793 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R6795 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R6794 += 1, R6795 += 1 };
  s0 -> s2 [73, 73] { R6795 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R6795 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R6795 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R6795 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6795 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R6795 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R6795 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R6795 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R6797 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R6796 += 1, R6797 += 1 };
  s0 -> s2 [73, 73] { R6797 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R6797 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R6797 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R6797 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6797 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R6797 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R6797 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6797 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R6799 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R6798 += 1, R6799 += 1 };
  s0 -> s2 [73, 73] { R6799 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R6799 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R6799 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R6799 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6799 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R6799 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R6799 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6799 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R6819 += 1 };
  s0 -> s0 [0, 65535] { R6818 += 1, R6819 += 1 };
  s0 -> s2 [73, 73] { R6819 += 1 };
  s0 -> s1 [74, 65535] { R6819 += 1 };
  s1 -> s1 [0, 72] { R6819 += 1 };
  s1 -> s2 [73, 73] { R6819 += 1 };
  s1 -> s1 [74, 65535] { R6819 += 1 };
  s2 -> s2 [0, 65535] { R6819 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6820 += 1, R6821 += 1 };
  s0 -> s1 [0, 65535] { R6821 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6821 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R6823 += 1 };
  s0 -> s2 [0, 65535] { R6823 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R6822 += 1, R6823 += 1 };
  s0 -> s3 [73, 73] { R6823 += 1 };
  s0 -> s1 [74, 65535] { R6823 += 1 };
  s1 -> s1 [0, 72] { R6823 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R6823 += 1 };
  s1 -> s1 [74, 65535] { R6823 += 1 };
  s2 -> s1 [0, 72] { R6823 += 1 };
  s2 -> s2 [0, 65535] { R6823 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R6823 += 1 };
  s2 -> s1 [74, 65535] { R6823 += 1 };
  s3 -> s3 [0, 65535] { R6823 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R6825 += 1, R6763 += 1 };
  s0 -> s0 [0, 65535] { R6824 += 1, R6825 += 1 };
  s0 -> s2 [0, 65535] { R6825 += 1, R6762 += 1, R6763 += 1 };
  s0 -> s1 [74, 65535] { R6825 += 1, R6763 += 1 };
  s1 -> s1 [0, 72] { R6825 += 1, R6763 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6825 += 1 };
  s1 -> s1 [74, 65535] { R6825 += 1, R6763 += 1 };
  s2 -> s1 [0, 72] { R6825 += 1, R6763 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6825 += 1, R6762 += 1, R6763 += 1 };
  s2 -> s1 [74, 65535] { R6825 += 1, R6763 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6827 += 1, R6765 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R6826 += 1, R6827 += 1 };
  s0 -> s2 [0, 65535] { R6827 += 1, R6764 += 1, R6765 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6827 += 1, R6765 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R6827 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6827 += 1, R6765 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R6827 += 1, R6764 += 1, R6765 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6827 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R6829 += 1, R6767 += 1 };
  s0 -> s0 [0, 65535] { R6828 += 1, R6829 += 1 };
  s0 -> s2 [0, 65535] { R6829 += 1, R6766 += 1, R6767 += 1 };
  s0 -> s1 [81, 65535] { R6829 += 1, R6767 += 1 };
  s1 -> s1 [0, 73] { R6829 += 1, R6767 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6829 += 1 };
  s1 -> s1 [81, 65535] { R6829 += 1, R6767 += 1 };
  s2 -> s1 [0, 73] { R6829 += 1, R6767 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6829 += 1, R6766 += 1, R6767 += 1 };
  s2 -> s1 [81, 65535] { R6829 += 1, R6767 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6831 += 1, R6769 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R6831 += 1, R6768 += 1, R6769 += 1 };
  s0 -> s0 [0, 65535] { R6830 += 1, R6831 += 1 };
  s1 -> s1 [0, 65535] { R6831 += 1, R6769 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R6831 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6831 += 1, R6769 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R6831 += 1, R6768 += 1, R6769 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6831 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R6833 += 1, R6771 += 1 };
  s0 -> s0 [0, 65535] { R6832 += 1, R6833 += 1 };
  s0 -> s2 [0, 65535] { R6833 += 1, R6770 += 1, R6771 += 1 };
  s0 -> s3 [0, 65535] { R6833 += 1, R6771 += 1, R69 += 1 };
  s0 -> s1 [82, 65535] { R6833 += 1, R6771 += 1 };
  s1 -> s1 [0, 80] { R6833 += 1, R6771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6833 += 1 };
  s1 -> s1 [82, 65535] { R6833 += 1, R6771 += 1 };
  s2 -> s1 [0, 80] { R6833 += 1, R6771 += 1 };
  s2 -> s2 [0, 65535] { R6833 += 1, R6770 += 1, R6771 += 1 };
  s2 -> s3 [0, 65535] { R6833 += 1, R6771 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R6833 += 1, R6771 += 1 };
  s3 -> s1 [0, 80] { R6833 += 1, R6771 += 1 };
  s3 -> s4 [0, 65535] { R6833 += 1 };
  s3 -> s3 [0, 65535] { R6833 += 1, R6771 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R6833 += 1, R6771 += 1 };
  s4 -> s4 [0, 65535] { R6833 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R6835 += 1, R6773 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R6835 += 1, R6772 += 1, R6773 += 1 };
  s0 -> s0 [0, 65535] { R6834 += 1, R6835 += 1 };
  s0 -> s3 [0, 65535] { R6835 += 1, R6773 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [82, 65535] { R6835 += 1, R6773 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R6835 += 1, R6773 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R6835 += 1, R6773 += 1 };
  s1 -> s4 [0, 65535] { R6835 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R6835 += 1, R6773 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R6835 += 1, R6773 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6835 += 1, R6772 += 1, R6773 += 1 };
  s2 -> s3 [0, 65535] { R6835 += 1, R6773 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [82, 65535] { R6835 += 1, R6773 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R6835 += 1, R6773 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R6835 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6835 += 1, R6773 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [82, 65535] { R6835 += 1, R6773 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R6835 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6837 += 1, R6775 += 1 };
  s0 -> s2 [0, 65535] { R6837 += 1, R6774 += 1, R6775 += 1 };
  s0 -> s3 [0, 65535] { R6837 += 1, R6775 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s0 [0, 65535] { R6836 += 1, R6837 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6837 += 1, R6775 += 1 };
  s1 -> s5 [0, 65535] { R6837 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R6837 += 1, R6775 += 1 };
  s2 -> s2 [0, 65535] { R6837 += 1, R6774 += 1, R6775 += 1 };
  s2 -> s3 [0, 65535] { R6837 += 1, R6775 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6837 += 1, R6775 += 1 };
  s3 -> s5 [0, 65535] { R6837 += 1 };
  s3 -> s3 [0, 65535] { R6837 += 1, R6775 += 1, R3894 += 1, R3895 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6837 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s0 -> s0 [0, 65535] { R6838 += 1, R6839 += 1 };
  s0 -> s2 [0, 65535] { R6839 += 1, R6776 += 1, R6777 += 1 };
  s0 -> s3 [90, 90] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s0 -> s1 [91, 65535] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s1 -> s1 [0, 81] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s1 -> s3 [90, 90] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s1 -> s1 [91, 65535] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s2 -> s1 [0, 81] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R6839 += 1, R6776 += 1, R6777 += 1 };
  s2 -> s3 [90, 90] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s2 -> s1 [91, 65535] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s3 -> s3 [0, 81] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s3 -> s3 [0, 65535] { R6839 += 1, R6777 += 1 };
  s3 -> s4 [0, 65535] { R6839 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [90, 65535] { R6839 += 1, R6777 += 1, R6439 += 1 };
  s4 -> s4 [0, 65535] { R6839 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R6840 += 1, R6841 += 1 };
  s0 -> s1 [0, 65535] { R6841 += 1, R6779 += 1, R6443 += 1, R6444 += 1 };
  s0 -> s2 [0, 65535] { R6841 += 1, R6778 += 1, R6779 += 1 };
  s0 -> s3 [0, 65535] { R6841 += 1, R6779 += 1, R6444 += 1, R6445 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R6841 += 1 };
  s1 -> s1 [0, 65535] { R6841 += 1, R6779 += 1, R6443 += 1, R6444 += 1 };
  s1 -> s3 [0, 65535] { R6841 += 1, R6779 += 1, R6444 += 1, R6445 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R6841 += 1, R6779 += 1, R6443 += 1, R6444 += 1 };
  s2 -> s2 [0, 65535] { R6841 += 1, R6778 += 1, R6779 += 1 };
  s2 -> s3 [0, 65535] { R6841 += 1, R6779 += 1, R6444 += 1, R6445 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6841 += 1, R6779 += 1 };
  s3 -> s6 [0, 65535] { R6841 += 1 };
  s3 -> s3 [0, 65535] { R6841 += 1, R6779 += 1, R6444 += 1, R6445 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6841 += 1, R6779 += 1 };
  s5 -> s6 [0, 65535] { R6841 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6841 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R6843 += 1, R6781 += 1, R6761 += 1 };
  s0 -> s1 [0, 65535] { R6843 += 1, R6781 += 1 };
  s0 -> s0 [0, 65535] { R6842 += 1, R6843 += 1 };
  s0 -> s2 [0, 65535] { R6843 += 1, R6780 += 1, R6781 += 1 };
  s0 -> s1 [91, 65535] { R6843 += 1, R6781 += 1, R6761 += 1 };
  s1 -> s1 [0, 81] { R6843 += 1, R6781 += 1, R6761 += 1 };
  s1 -> s1 [0, 65535] { R6843 += 1, R6781 += 1 };
  s1 -> s4 [0, 65535] { R6843 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R6843 += 1, R6781 += 1, R6761 += 1 };
  s2 -> s1 [0, 81] { R6843 += 1, R6781 += 1, R6761 += 1 };
  s2 -> s1 [0, 65535] { R6843 += 1, R6781 += 1 };
  s2 -> s2 [0, 65535] { R6843 += 1, R6780 += 1, R6781 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R6843 += 1, R6781 += 1, R6761 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6843 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R6844 += 1, R6845 += 1 };
  s0 -> s1 [0, 65535] { R6845 += 1, R6801 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R6845 += 1, R6800 += 1, R6801 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6845 += 1, R6801 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R6845 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6845 += 1, R6801 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R6845 += 1, R6800 += 1, R6801 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6845 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R6847 += 1, R6803 += 1 };
  s0 -> s0 [0, 65535] { R6846 += 1, R6847 += 1 };
  s0 -> s2 [0, 65535] { R6847 += 1, R6802 += 1, R6803 += 1 };
  s0 -> s3 [73, 73] { R6847 += 1, R6803 += 1 };
  s0 -> s4 [73, 73] { R6847 += 1, R6803 += 1 };
  s0 -> s5 [81, 81] { R6847 += 1, R6803 += 1 };
  s0 -> s1 [82, 65535] { R6847 += 1, R6803 += 1 };
  s1 -> s1 [0, 72] { R6847 += 1, R6803 += 1 };
  s1 -> s3 [73, 73] { R6847 += 1, R6803 += 1 };
  s1 -> s4 [73, 73] { R6847 += 1, R6803 += 1 };
  s1 -> s5 [81, 81] { R6847 += 1, R6803 += 1 };
  s1 -> s1 [82, 65535] { R6847 += 1, R6803 += 1 };
  s2 -> s1 [0, 72] { R6847 += 1, R6803 += 1 };
  s2 -> s2 [0, 65535] { R6847 += 1, R6802 += 1, R6803 += 1 };
  s2 -> s3 [73, 73] { R6847 += 1, R6803 += 1 };
  s2 -> s4 [73, 73] { R6847 += 1, R6803 += 1 };
  s2 -> s5 [81, 81] { R6847 += 1, R6803 += 1 };
  s2 -> s1 [82, 65535] { R6847 += 1, R6803 += 1 };
  s4 -> s4 [0, 73] { R6847 += 1, R6803 += 1 };
  s4 -> s7 [81, 81] { R6847 += 1, R6803 += 1 };
  s4 -> s4 [82, 65535] { R6847 += 1, R6803 += 1 };
  s5 -> s5 [0, 72] { R6847 += 1, R6803 += 1 };
  s5 -> s5 [0, 65535] { R6847 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R6847 += 1, R6803 += 1 };
  s5 -> s8 [73, 73] { R6847 += 1, R6803 += 1 };
  s5 -> s5 [81, 65535] { R6847 += 1, R6803 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R6847 += 1, R6803 += 1 };
  s7 -> s7 [0, 65535] { R6847 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R6847 += 1, R6803 += 1 };
  s8 -> s8 [0, 65535] { R6847 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R6849 += 1, R6805 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R6848 += 1, R6849 += 1 };
  s0 -> s2 [0, 65535] { R6849 += 1, R6804 += 1, R6805 += 1 };
  s0 -> s3 [73, 73] { R6849 += 1, R6805 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R6849 += 1, R6805 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R6849 += 1, R6805 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R6849 += 1, R6805 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6849 += 1 };
  s1 -> s3 [73, 73] { R6849 += 1, R6805 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R6849 += 1, R6805 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R6849 += 1, R6805 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R6849 += 1, R6805 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6849 += 1, R6804 += 1, R6805 += 1 };
  s2 -> s3 [73, 73] { R6849 += 1, R6805 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R6849 += 1, R6805 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R6849 += 1, R6805 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6849 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6849 += 1 };
  s4 -> s4 [0, 65535] { R6849 += 1, R6805 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6849 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R6851 += 1, R6807 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R6851 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s0 [0, 65535] { R6850 += 1, R6851 += 1 };
  s0 -> s3 [73, 73] { R6851 += 1, R6807 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R6851 += 1, R6807 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R6851 += 1, R6807 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R6851 += 1, R6807 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R6851 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R6851 += 1, R6807 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R6851 += 1, R6807 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R6851 += 1, R6807 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R6851 += 1, R6807 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R6851 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R6851 += 1, R6807 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R6851 += 1, R6807 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R6851 += 1, R6807 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R6851 += 1, R6807 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R6851 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6851 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6851 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R6852 += 1, R6853 += 1 };
  s0 -> s2 [0, 65535] { R6853 += 1, R6808 += 1, R6809 += 1 };
  s0 -> s3 [73, 73] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R6853 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R6853 += 1, R6808 += 1, R6809 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R6853 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6853 += 1 };
  s4 -> s4 [0, 65535] { R6853 += 1, R6809 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6853 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 72] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s3 [0, 65535] { R6855 += 1, R6810 += 1, R6811 += 1 };
  s0 -> s0 [0, 65535] { R6854 += 1, R6855 += 1 };
  s0 -> s4 [73, 73] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [73, 73] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [74, 65535] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [74, 65535] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 72] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 65535] { R6855 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [73, 73] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 72] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [73, 73] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s5 [73, 73] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [73, 73] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [73, 73] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s1 [74, 65535] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 72] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 72] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R6855 += 1, R6810 += 1, R6811 += 1 };
  s3 -> s4 [73, 73] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [73, 73] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [74, 65535] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [74, 65535] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s9 [0, 65535] { R6855 += 1 };
  s4 -> s4 [0, 65535] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R6855 += 1, R6811 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R6855 += 1, R6811 += 1, R3890 += 1, R3891 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6855 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6855 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s0 -> s2 [0, 72] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s3 [0, 65535] { R6857 += 1, R6812 += 1, R6813 += 1 };
  s0 -> s0 [0, 65535] { R6856 += 1, R6857 += 1 };
  s0 -> s4 [73, 73] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s0 -> s5 [73, 73] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s6 [73, 73] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s7 [73, 73] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s0 -> s1 [74, 81] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s0 -> s2 [74, 65535] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [91, 65535] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s1 -> s1 [0, 72] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s1 -> s1 [0, 65535] { R6857 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s1 -> s7 [73, 73] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s1 -> s1 [74, 81] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s1 -> s1 [91, 65535] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s2 -> s1 [0, 72] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s2 -> s2 [0, 72] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [73, 73] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s2 -> s5 [73, 73] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s6 [73, 73] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s7 [73, 73] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s2 -> s1 [74, 81] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s2 -> s2 [74, 65535] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [91, 65535] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s3 -> s1 [0, 72] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s3 -> s2 [0, 72] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R6857 += 1, R6812 += 1, R6813 += 1 };
  s3 -> s4 [73, 73] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s3 -> s5 [73, 73] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s6 [73, 73] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s7 [73, 73] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s3 -> s1 [74, 81] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s3 -> s2 [74, 65535] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s1 [91, 65535] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s4 -> s4 [0, 81] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s4 -> s4 [0, 65535] { R6857 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [91, 65535] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s6 -> s4 [0, 81] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s6 -> s6 [0, 65535] { R6857 += 1, R6813 += 1, R6436 += 1, R6437 += 1 };
  s6 -> s4 [91, 65535] { R6857 += 1, R6813 += 1, R6437 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6857 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s0 [0, 65535] { R6858 += 1, R6859 += 1 };
  s0 -> s2 [0, 65535] { R6859 += 1, R6814 += 1, R6815 += 1 };
  s0 -> s3 [73, 73] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s4 [73, 73] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s1 [74, 65535] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [0, 72] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [0, 65535] { R6859 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s4 [73, 73] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [74, 65535] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s1 [0, 72] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s2 [0, 65535] { R6859 += 1, R6814 += 1, R6815 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s4 [73, 73] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s1 [74, 65535] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s3 -> s3 [0, 65535] { R6859 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6859 += 1 };
  s4 -> s4 [0, 65535] { R6859 += 1, R6815 += 1, R6440 += 1, R6441 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6859 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s0 -> s2 [0, 72] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s0 -> s3 [0, 65535] { R6861 += 1, R6816 += 1, R6817 += 1 };
  s0 -> s0 [0, 65535] { R6860 += 1, R6861 += 1 };
  s0 -> s4 [73, 73] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s0 -> s5 [73, 73] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s0 -> s6 [73, 73] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s0 -> s7 [73, 73] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s0 -> s2 [74, 80] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s0 -> s1 [74, 65535] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s0 -> s8 [81, 81] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s0 -> s2 [91, 65535] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s1 -> s1 [0, 72] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s1 -> s2 [0, 72] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s1 -> s4 [73, 73] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s1 -> s5 [73, 73] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s1 -> s6 [73, 73] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s1 -> s7 [73, 73] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s1 -> s2 [74, 80] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s1 -> s1 [74, 65535] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s1 -> s8 [81, 81] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s1 -> s2 [91, 65535] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s2 -> s2 [0, 72] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s2 -> s5 [73, 73] { R6861 += 1, R6817 += 1 };
  s2 -> s7 [73, 73] { R6861 += 1, R6817 += 1 };
  s2 -> s2 [74, 80] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s2 -> s2 [74, 65535] { R6861 += 1, R6817 += 1 };
  s2 -> s8 [81, 81] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s2 -> s2 [91, 65535] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s3 -> s1 [0, 72] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s3 -> s2 [0, 72] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s3 -> s3 [0, 65535] { R6861 += 1, R6816 += 1, R6817 += 1 };
  s3 -> s4 [73, 73] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s3 -> s5 [73, 73] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s3 -> s6 [73, 73] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s3 -> s7 [73, 73] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s3 -> s2 [74, 80] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s3 -> s1 [74, 65535] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s3 -> s8 [81, 81] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s3 -> s2 [91, 65535] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s4 -> s7 [0, 80] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s4 -> s4 [0, 65535] { R6861 += 1, R6817 += 1, R6758 += 1, R6759 += 1 };
  s4 -> s11 [81, 81] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s4 -> s7 [91, 65535] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s7 -> s7 [0, 80] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s7 -> s7 [0, 65535] { R6861 += 1, R6817 += 1 };
  s7 -> s11 [81, 81] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s7 -> s7 [91, 65535] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s8 -> s8 [0, 72] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s8 -> s8 [0, 65535] { R6861 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R6861 += 1, R6817 += 1 };
  s8 -> s11 [73, 73] { R6861 += 1, R6817 += 1 };
  s8 -> s8 [74, 81] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s8 -> s8 [74, 65535] { R6861 += 1, R6817 += 1 };
  s8 -> s8 [91, 65535] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6861 += 1 };
  s11 -> s11 [0, 81] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R6861 += 1, R6817 += 1 };
  s11 -> s12 [0, 65535] { R6861 += 1 };
  s11 -> s11 [91, 65535] { R6861 += 1, R6817 += 1, R6759 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R6861 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R6777 && R2 = R6861 && R20 - R6861 = -1 && R21 = R6861 && R22 - R6861 = -1 && R23 = R6861 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R6776 = 0 && R6802 = 0 && R6803 = 0 && R6810 = 0 && R6811 = 0 && R6812 = 0 && R6813 = 0 && R6816 = 0 && R6817 = 0 && R6818 = 0 && R6819 = R6861 && R6820 = 0 && R6821 = R6861 && R6822 = 0 && R6823 = R6861 && R6824 = 0 && R6825 = R6861 && R6826 = 0 && R6827 = R6861 && R6828 = 0 && R6829 = R6861 && R6830 = 0 && R6831 = R6861 && R6832 = 0 && R6833 = R6861 && R6834 = 0 && R6835 = R6861 && R6836 = 0 && R6837 = R6861 && R6838 = 0 && R6839 = R6861 && R6840 = 0 && R6841 = R6861 && R6842 = 0 && R6843 = R6861 && R6844 = 0 && R6845 = R6861 && R6846 = 0 && R6847 = R6861 && R6848 = 0 && R6849 = R6861 && R6850 = 0 && R6851 = R6861 && R6852 = 0 && R6853 = R6861 && R6854 = 0 && R6855 = R6861 && R6856 = 0 && R6857 = R6861 && R6858 = 0 && R6859 = R6861 && R6860 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R6777 && 0 < R6861 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R6762 != 0 || R6763 = R6777 || (R17 = 0 && R6777 = 0)) && (R6764 != 0 || R6765 = R6777 || (R17 = 0 && R6777 = 0)) && (R6766 != 0 || R6767 = R6777 || (R17 = 0 && R6777 = 0)) && (R6768 != 0 || R6769 = R6777 || (R17 = 0 && R6777 = 0)) && (R6770 != 0 || R6771 = R6777 || (R17 = 0 && R6777 = 0)) && (R6772 != 0 || R6773 = R6777 || (R17 = 0 && R6777 = 0)) && (R6774 != 0 || R6775 = R6777 || (R17 = 0 && R6777 = 0)) && (R6778 != 0 || R6777 = R6779 || (R17 = 0 && R6777 = 0)) && (R6780 != 0 || R6777 = R6781 || (R17 = 0 && R6777 = 0)) && (R18 = 0 || (R6800 = 0 && R6801 = 0)) && (R18 = 0 || (R6804 = 0 && R6805 = 0)) && (R18 = 0 || (R6806 = 0 && R6807 = 0)) && (R18 = 0 || (R6808 = 0 && R6809 = 0)) && (R18 = 0 || (R6814 = 0 && R6815 = 0)) && (R19 = 0 || (R6782 = 0 && R6783 = 0)) && (R19 = 0 || (R6784 = 0 && R6785 = 0)) && (R19 = 0 || (R6786 = 0 && R6787 = 0)) && (R19 = 0 || (R6788 = 0 && R6789 = 0)) && (R19 = 0 || (R6790 = 0 && R6791 = 0)) && (R19 = 0 || (R6792 = 0 && R6793 = 0)) && (R19 = 0 || (R6794 = 0 && R6795 = 0)) && (R19 = 0 || (R6796 = 0 && R6797 = 0)) && (R19 = 0 || (R6798 = 0 && R6799 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R6445 + R6442 = 0 || (R56 + R6443 + R6440 = 0 && R57 + R6444 + R6441 = 0)) && (R58 + R6445 + R6442 = 0 || (R62 + R6760 + R6758 = 0 && R63 + R6761 + R6759 = 0)) && (R6762 = 0 || (R17 = 0 && R6777 = 0)) && (R6764 = 0 || (R17 = 0 && R6777 = 0)) && (R6766 = 0 || (R17 = 0 && R6777 = 0)) && (R6768 = 0 || (R17 = 0 && R6777 = 0)) && (R6770 = 0 || (R17 = 0 && R6777 = 0)) && (R6772 = 0 || (R17 = 0 && R6777 = 0)) && (R6774 = 0 || (R17 = 0 && R6777 = 0)) && (R6778 = 0 || (R17 = 0 && R6777 = 0)) && (R6780 = 0 || (R17 = 0 && R6777 = 0));
// End of Parikh automata intersection problem
