// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R2, R3, R4, R5, R6, R7, R8, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R16 += 1 };
  s1 -> s1 [0, 60] { R16 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R122 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s2 [82, 82] { R122 += 1 };
  s0 -> s1 [83, 65535] { R122 += 1 };
  s1 -> s1 [0, 64] { R122 += 1 };
  s1 -> s2 [82, 82] { R122 += 1 };
  s1 -> s1 [83, 65535] { R122 += 1 };
  s2 -> s2 [0, 64] { R122 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R122 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R124 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R124 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R126 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s2 [0, 65535] { R126 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [9, 13] { R126 += 1, R92 += 1 };
  s0 -> s1 [14, 31] { R126 += 1, R92 += 1 };
  s0 -> s3 [32, 32] { R126 += 1, R92 += 1 };
  s0 -> s1 [33, 65535] { R126 += 1, R92 += 1 };
  s1 -> s5 [0, 65535] { R126 += 1 };
  s1 -> s1 [0, 65535] { R126 += 1, R92 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R126 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R126 += 1, R91 += 1, R92 += 1 };
  s2 -> s3 [9, 13] { R126 += 1, R92 += 1 };
  s2 -> s1 [14, 31] { R126 += 1, R92 += 1 };
  s2 -> s3 [32, 32] { R126 += 1, R92 += 1 };
  s2 -> s1 [33, 65535] { R126 += 1, R92 += 1 };
  s3 -> s1 [0, 65535] { R126 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R126 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R128 += 1, R94 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [0, 65535] { R128 += 1 };
  s1 -> s1 [0, 65535] { R128 += 1, R94 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R128 += 1, R94 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R128 += 1, R93 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R128 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R130 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [9, 13] { R130 += 1, R96 += 1 };
  s0 -> s1 [14, 31] { R130 += 1, R96 += 1 };
  s0 -> s3 [32, 32] { R130 += 1, R96 += 1 };
  s0 -> s1 [33, 65535] { R130 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R130 += 1, R96 += 1 };
  s1 -> s5 [0, 65535] { R130 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R130 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R130 += 1, R95 += 1, R96 += 1 };
  s2 -> s3 [9, 13] { R130 += 1, R96 += 1 };
  s2 -> s1 [14, 31] { R130 += 1, R96 += 1 };
  s2 -> s3 [32, 32] { R130 += 1, R96 += 1 };
  s2 -> s1 [33, 65535] { R130 += 1, R96 += 1 };
  s3 -> s1 [0, 65535] { R130 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R130 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R132 += 1, R98 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535] { R132 += 1, R98 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R132 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R132 += 1, R98 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R132 += 1, R97 += 1, R98 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R132 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R138 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s2 [88, 88] { R138 += 1 };
  s0 -> s1 [89, 65535] { R138 += 1 };
  s1 -> s1 [0, 64] { R138 += 1 };
  s1 -> s2 [88, 88] { R138 += 1 };
  s1 -> s1 [89, 65535] { R138 += 1 };
  s2 -> s2 [0, 64] { R138 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R138 += 1 };
  accepting s2;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s1 [0, 65535] { R140 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R140 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 87] { R142 += 1 };
  s0 -> s2 [0, 65535] { R142 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s0 -> s3 [88, 88] { R142 += 1 };
  s0 -> s1 [89, 65535] { R142 += 1 };
  s1 -> s1 [0, 87] { R142 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [88, 88] { R142 += 1 };
  s1 -> s1 [89, 65535] { R142 += 1 };
  s2 -> s1 [0, 87] { R142 += 1 };
  s2 -> s2 [0, 65535] { R142 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [88, 88] { R142 += 1 };
  s2 -> s1 [89, 65535] { R142 += 1 };
  s3 -> s3 [0, 65535] { R142 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R144 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R143 += 1, R144 += 1 };
  s0 -> s2 [0, 65535] { R144 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [9, 13] { R144 += 1, R108 += 1 };
  s0 -> s1 [14, 31] { R144 += 1, R108 += 1 };
  s0 -> s3 [32, 32] { R144 += 1, R108 += 1 };
  s0 -> s1 [33, 65535] { R144 += 1, R108 += 1 };
  s1 -> s5 [0, 65535] { R144 += 1 };
  s1 -> s1 [0, 65535] { R144 += 1, R108 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R144 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R144 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R144 += 1, R108 += 1 };
  s2 -> s1 [14, 31] { R144 += 1, R108 += 1 };
  s2 -> s3 [32, 32] { R144 += 1, R108 += 1 };
  s2 -> s1 [33, 65535] { R144 += 1, R108 += 1 };
  s3 -> s1 [0, 65535] { R144 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R144 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R146 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R146 += 1, R110 += 1, R8 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R146 += 1, R109 += 1, R110 += 1 };
  s1 -> s2 [0, 65535] { R146 += 1, R110 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R146 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R146 += 1, R110 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R146 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R148 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R148 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s0 -> s3 [9, 13] { R148 += 1, R112 += 1 };
  s0 -> s1 [14, 31] { R148 += 1, R112 += 1 };
  s0 -> s3 [32, 32] { R148 += 1, R112 += 1 };
  s0 -> s1 [33, 65535] { R148 += 1, R112 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R148 += 1, R112 += 1 };
  s1 -> s5 [0, 65535] { R148 += 1 };
  s2 -> s1 [0, 8] { R148 += 1, R112 += 1 };
  s2 -> s2 [0, 65535] { R148 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R148 += 1, R112 += 1 };
  s2 -> s1 [14, 31] { R148 += 1, R112 += 1 };
  s2 -> s3 [32, 32] { R148 += 1, R112 += 1 };
  s2 -> s1 [33, 65535] { R148 += 1, R112 += 1 };
  s3 -> s1 [0, 65535] { R148 += 1, R112 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R148 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R150 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s0 -> s2 [0, 65535] { R150 += 1, R114 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R150 += 1, R113 += 1, R114 += 1 };
  s1 -> s2 [0, 65535] { R150 += 1, R114 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R150 += 1 };
  s2 -> s2 [0, 65535] { R150 += 1, R114 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R150 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 87] { R152 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R152 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [89, 65535] { R152 += 1, R116 += 1 };
  s1 -> s1 [0, 87] { R152 += 1, R116 += 1 };
  s1 -> s1 [0, 65535] { R152 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [89, 65535] { R152 += 1, R116 += 1 };
  s2 -> s1 [0, 87] { R152 += 1, R116 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R152 += 1, R115 += 1, R116 += 1 };
  s2 -> s1 [89, 65535] { R152 += 1, R116 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R154 += 1, R118 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s2 [0, 65535] { R154 += 1, R117 += 1, R118 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R154 += 1 };
  s1 -> s1 [0, 65535] { R154 += 1, R118 += 1, R89 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R154 += 1, R118 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R154 += 1, R117 += 1, R118 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R154 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 88] { R156 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s0 -> s2 [0, 65535] { R156 += 1, R119 += 1, R120 += 1 };
  s0 -> s1 [91, 65535] { R156 += 1, R120 += 1 };
  s1 -> s1 [0, 88] { R156 += 1, R120 += 1 };
  s1 -> s1 [0, 65535] { R156 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R156 += 1, R120 += 1 };
  s2 -> s1 [0, 88] { R156 += 1, R120 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R156 += 1, R119 += 1, R120 += 1 };
  s2 -> s1 [91, 65535] { R156 += 1, R120 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R158 += 1, R134 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R158 += 1, R133 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R158 += 1, R134 += 1, R90 += 1 };
  s1 -> s4 [0, 65535] { R158 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R158 += 1, R134 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R158 += 1, R133 += 1, R134 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R158 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 87] { R160 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R135 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s3 [88, 88] { R160 += 1, R136 += 1 };
  s0 -> s4 [88, 88] { R160 += 1, R136 += 1 };
  s0 -> s1 [91, 65535] { R160 += 1, R136 += 1 };
  s1 -> s1 [0, 87] { R160 += 1, R136 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R160 += 1 };
  s1 -> s3 [88, 88] { R160 += 1, R136 += 1 };
  s1 -> s4 [88, 88] { R160 += 1, R136 += 1 };
  s1 -> s1 [91, 65535] { R160 += 1, R136 += 1 };
  s2 -> s1 [0, 87] { R160 += 1, R136 += 1 };
  s2 -> s2 [0, 65535] { R160 += 1, R135 += 1, R136 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [88, 88] { R160 += 1, R136 += 1 };
  s2 -> s4 [88, 88] { R160 += 1, R136 += 1 };
  s2 -> s1 [91, 65535] { R160 += 1, R136 += 1 };
  s3 -> s3 [0, 88] { R160 += 1, R136 += 1 };
  s3 -> s3 [0, 65535] { R160 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R160 += 1, R136 += 1 };
  s4 -> s4 [0, 65535] { R160 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R100 += 1 };
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s2 [9, 13] { R100 += 1 };
  s0 -> s1 [14, 31] { R100 += 1 };
  s0 -> s2 [32, 32] { R100 += 1 };
  s0 -> s1 [33, 65535] { R100 += 1 };
  s1 -> s1 [0, 65535] { R100 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R100 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s1 [0, 65535] { R102 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R102 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R104 += 1 };
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s2 [9, 13] { R104 += 1 };
  s0 -> s1 [14, 31] { R104 += 1 };
  s0 -> s2 [32, 32] { R104 += 1 };
  s0 -> s1 [33, 65535] { R104 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R104 += 1 };
  s2 -> s1 [0, 65535] { R104 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s1 [0, 65535] { R106 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R106 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R120 && R3 = R132 && R15 = 0 && R16 = R160 && R107 - R120 = -1 && R108 = R120 && R109 - R120 = -1 && R110 = R120 && R111 = 0 && R112 = 1 && R113 = 0 && R114 = 1 && R115 = 0 && R116 = R120 && R117 = 0 && R118 = R120 && R119 = 0 && R121 - R160 = 1 && R122 = R132 && R123 - R160 = 1 && R124 = R132 && R125 - R160 = 1 && R126 = R132 && R127 - R160 = 1 && R128 = R132 && R129 - R160 = 1 && R130 = R132 && R131 - R160 = 1 && R137 = 0 && R138 = R160 && R139 = 0 && R140 = R160 && R141 = 0 && R142 = R160 && R143 = 0 && R144 = R160 && R145 = 0 && R146 = R160 && R147 = 0 && R148 = R160 && R149 = 0 && R150 = R160 && R151 = 0 && R152 = R160 && R153 = 0 && R154 = R160 && R155 = 0 && R156 = R160 && R157 = 0 && R158 = R160 && R159 = 0 && R0 != 0 && R1 != 0 && R10 < 1 && R11 < 1 && 0 < R120 && R160 < R132 && -1 < R160 && (R4 != 0 || ((R0 != R92 || R91 - R92 = -1 || R92 < 0) && (R0 = R92 || R0 < 1))) && (R4 != 0 || ((R0 != R94 || R93 - R94 = -1 || R94 < 0) && (R0 = R94 || R0 < 1))) && (R6 != 0 || ((R1 != R100 || R99 - R100 = -1 || R100 < 0) && (R1 = R100 || R1 < 1))) && (R6 != 0 || ((R1 != R102 || R101 - R102 = -1 || R102 < 0) && (R1 = R102 || R1 < 1))) && (R95 != 0 || ((R5 != 0 || ((R0 != R96 || R96 = 1 || R96 < 0) && (R0 = R96 || R96 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R96 || R96 = 1 || R96 < 0) && (R96 != 1 || -1 < R0) && (R0 = R96 || R96 = 1))))) && (R97 != 0 || ((R5 != 0 || ((R0 != R98 || R98 = 1 || R98 < 0) && (R0 = R98 || R98 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R98 || R98 = 1 || R98 < 0) && (R98 != 1 || -1 < R0) && (R0 = R98 || R98 = 1))))) && (R103 != 0 || ((R7 != 0 || ((R1 != R104 || R104 = 1 || R104 < 0) && (R1 = R104 || R104 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R104 || R104 = 1 || R104 < 0) && (R104 != 1 || -1 < R1) && (R1 = R104 || R104 = 1))))) && (R105 != 0 || ((R7 != 0 || ((R1 != R106 || R106 = 1 || R106 < 0) && (R1 = R106 || R106 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R106 || R106 = 1 || R106 < 0) && (R106 != 1 || -1 < R1) && (R1 = R106 || R106 = 1))))) && (R4 = 0 || (R0 = R92 && R91 - R92 = -1)) && (R4 = 0 || (R0 = R94 && R93 - R94 = -1)) && (R6 = 0 || (R1 = R100 && R99 - R100 = -1)) && (R6 = 0 || (R1 = R102 && R101 - R102 = -1)) && (R90 = 0 || (R133 = 0 && R134 = 0)) && (R90 = 0 || (R135 = 0 && R136 = 0)) && (R95 = 0 || (R5 = 0 && R0 < 0)) && (R97 = 0 || (R5 = 0 && R0 < 0)) && (R103 = 0 || (R7 = 0 && R1 < 0)) && (R105 = 0 || (R7 = 0 && R1 < 0));
// End of Parikh automata intersection problem
