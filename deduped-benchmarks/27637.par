// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R12931 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R12930 += 1, R12931 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12931 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R12933 += 1 };
  s0 -> s0 [0, 65535] { R12932 += 1, R12933 += 1 };
  s0 -> s2 [75, 75] { R12933 += 1 };
  s0 -> s3 [75, 75] { R12933 += 1 };
  s0 -> s1 [88, 65535] { R12933 += 1 };
  s1 -> s1 [0, 74] { R12933 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R12933 += 1 };
  s1 -> s3 [75, 75] { R12933 += 1 };
  s1 -> s1 [88, 65535] { R12933 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 75] { R12933 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R12933 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R12935 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R12934 += 1, R12935 += 1 };
  s0 -> s2 [75, 75] { R12935 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R12935 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R12935 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R12935 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R12935 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R12935 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R12935 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12935 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R12937 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R12936 += 1, R12937 += 1 };
  s0 -> s2 [75, 75] { R12937 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R12937 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R12937 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R12937 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R12937 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R12937 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R12937 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12937 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R12939 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R12938 += 1, R12939 += 1 };
  s0 -> s2 [75, 75] { R12939 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R12939 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R12939 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R12939 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R12939 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R12939 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R12939 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R12939 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R12941 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12940 += 1, R12941 += 1 };
  s0 -> s2 [75, 75] { R12941 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R12941 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R12941 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R12941 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R12941 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R12941 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R12941 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R12941 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R12943 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R12942 += 1, R12943 += 1 };
  s0 -> s2 [75, 75] { R12943 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R12943 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R12943 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R12943 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R12943 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R12943 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R12943 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R12943 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R12945 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12944 += 1, R12945 += 1 };
  s0 -> s2 [75, 75] { R12945 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R12945 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R12945 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R12945 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R12945 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R12945 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R12945 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12945 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R12947 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R12946 += 1, R12947 += 1 };
  s0 -> s2 [75, 75] { R12947 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R12947 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R12947 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R12947 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R12947 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R12947 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R12947 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12947 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R12967 += 1 };
  s0 -> s0 [0, 65535] { R12966 += 1, R12967 += 1 };
  s0 -> s2 [75, 75] { R12967 += 1 };
  s0 -> s1 [76, 65535] { R12967 += 1 };
  s1 -> s1 [0, 74] { R12967 += 1 };
  s1 -> s2 [75, 75] { R12967 += 1 };
  s1 -> s1 [76, 65535] { R12967 += 1 };
  s2 -> s2 [0, 65535] { R12967 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12969 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12968 += 1, R12969 += 1 };
  s1 -> s1 [0, 65535] { R12969 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R12971 += 1 };
  s0 -> s2 [0, 65535] { R12971 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R12970 += 1, R12971 += 1 };
  s0 -> s3 [75, 75] { R12971 += 1 };
  s0 -> s1 [76, 65535] { R12971 += 1 };
  s1 -> s1 [0, 74] { R12971 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R12971 += 1 };
  s1 -> s1 [76, 65535] { R12971 += 1 };
  s2 -> s1 [0, 74] { R12971 += 1 };
  s2 -> s2 [0, 65535] { R12971 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R12971 += 1 };
  s2 -> s1 [76, 65535] { R12971 += 1 };
  s3 -> s3 [0, 65535] { R12971 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R12973 += 1, R12911 += 1 };
  s0 -> s2 [0, 65535] { R12973 += 1, R12910 += 1, R12911 += 1 };
  s0 -> s0 [0, 65535] { R12972 += 1, R12973 += 1 };
  s0 -> s1 [76, 65535] { R12973 += 1, R12911 += 1 };
  s1 -> s1 [0, 74] { R12973 += 1, R12911 += 1 };
  s1 -> s1 [0, 65535] { R12973 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R12973 += 1, R12911 += 1 };
  s2 -> s1 [0, 74] { R12973 += 1, R12911 += 1 };
  s2 -> s2 [0, 65535] { R12973 += 1, R12910 += 1, R12911 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R12973 += 1, R12911 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12975 += 1, R12913 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R12975 += 1, R12912 += 1, R12913 += 1 };
  s0 -> s0 [0, 65535] { R12974 += 1, R12975 += 1 };
  s1 -> s1 [0, 65535] { R12975 += 1, R12913 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12975 += 1 };
  s2 -> s1 [0, 65535] { R12975 += 1, R12913 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12975 += 1, R12912 += 1, R12913 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12975 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R12977 += 1, R12915 += 1 };
  s0 -> s2 [0, 65535] { R12977 += 1, R12914 += 1, R12915 += 1 };
  s0 -> s0 [0, 65535] { R12976 += 1, R12977 += 1 };
  s0 -> s1 [87, 65535] { R12977 += 1, R12915 += 1 };
  s1 -> s1 [0, 75] { R12977 += 1, R12915 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12977 += 1 };
  s1 -> s1 [87, 65535] { R12977 += 1, R12915 += 1 };
  s2 -> s1 [0, 75] { R12977 += 1, R12915 += 1 };
  s2 -> s2 [0, 65535] { R12977 += 1, R12914 += 1, R12915 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R12977 += 1, R12915 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12979 += 1, R12917 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R12979 += 1, R12916 += 1, R12917 += 1 };
  s0 -> s0 [0, 65535] { R12978 += 1, R12979 += 1 };
  s1 -> s1 [0, 65535] { R12979 += 1, R12917 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12979 += 1 };
  s2 -> s1 [0, 65535] { R12979 += 1, R12917 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R12979 += 1, R12916 += 1, R12917 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12979 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R12981 += 1, R12919 += 1 };
  s0 -> s2 [0, 65535] { R12981 += 1, R12919 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R12981 += 1, R12918 += 1, R12919 += 1 };
  s0 -> s0 [0, 65535] { R12980 += 1, R12981 += 1 };
  s0 -> s1 [88, 65535] { R12981 += 1, R12919 += 1 };
  s1 -> s1 [0, 86] { R12981 += 1, R12919 += 1 };
  s1 -> s1 [0, 65535] { R12981 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R12981 += 1, R12919 += 1 };
  s2 -> s1 [0, 86] { R12981 += 1, R12919 += 1 };
  s2 -> s2 [0, 65535] { R12981 += 1, R12919 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R12981 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R12981 += 1, R12919 += 1 };
  s3 -> s1 [0, 86] { R12981 += 1, R12919 += 1 };
  s3 -> s2 [0, 65535] { R12981 += 1, R12919 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R12981 += 1, R12918 += 1, R12919 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R12981 += 1, R12919 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12981 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R12983 += 1, R12921 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R12983 += 1, R12921 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R12983 += 1, R12920 += 1, R12921 += 1 };
  s0 -> s0 [0, 65535] { R12982 += 1, R12983 += 1 };
  s0 -> s1 [88, 65535] { R12983 += 1, R12921 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R12983 += 1, R12921 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12983 += 1 };
  s1 -> s1 [0, 65535] { R12983 += 1, R12921 += 1 };
  s1 -> s1 [88, 65535] { R12983 += 1, R12921 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R12983 += 1, R12921 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R12983 += 1, R12921 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R12983 += 1 };
  s2 -> s1 [88, 65535] { R12983 += 1, R12921 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R12983 += 1, R12921 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R12983 += 1, R12921 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12983 += 1, R12920 += 1, R12921 += 1 };
  s3 -> s1 [88, 65535] { R12983 += 1, R12921 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12983 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12985 += 1, R12923 += 1 };
  s0 -> s2 [0, 65535] { R12985 += 1, R12922 += 1, R12923 += 1 };
  s0 -> s0 [0, 65535] { R12984 += 1, R12985 += 1 };
  s1 -> s1 [0, 65535] { R12985 += 1, R12923 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12985 += 1 };
  s2 -> s1 [0, 65535] { R12985 += 1, R12923 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12985 += 1, R12922 += 1, R12923 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12985 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s0 -> s0 [0, 65535] { R12986 += 1, R12987 += 1 };
  s0 -> s2 [0, 65535] { R12987 += 1, R12924 += 1, R12925 += 1 };
  s0 -> s3 [0, 65535] { R12987 += 1, R12925 += 1, R12794 += 1, R12795 += 1 };
  s0 -> s4 [88, 88] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s0 -> s1 [89, 65535] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s1 -> s1 [0, 87] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s1 -> s4 [88, 88] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s1 -> s1 [89, 65535] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s2 -> s1 [0, 87] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s2 -> s2 [0, 65535] { R12987 += 1, R12924 += 1, R12925 += 1 };
  s2 -> s3 [0, 65535] { R12987 += 1, R12925 += 1, R12794 += 1, R12795 += 1 };
  s2 -> s4 [88, 88] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s2 -> s1 [89, 65535] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s3 -> s1 [0, 87] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s3 -> s3 [0, 65535] { R12987 += 1, R12925 += 1, R12794 += 1, R12795 += 1 };
  s3 -> s4 [88, 88] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s3 -> s1 [89, 65535] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s4 -> s5 [0, 65535] { R12987 += 1, R12925 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R12987 += 1 };
  s4 -> s4 [0, 65535] { R12987 += 1, R12925 += 1, R12795 += 1 };
  s5 -> s5 [0, 65535] { R12987 += 1, R12925 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R12987 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12987 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R12988 += 1, R12989 += 1 };
  s0 -> s1 [0, 65535] { R12989 += 1, R12927 += 1, R12799 += 1, R12800 += 1 };
  s0 -> s2 [0, 65535] { R12989 += 1, R12926 += 1, R12927 += 1 };
  s0 -> s3 [0, 65535] { R12989 += 1, R12927 += 1, R12800 += 1, R12801 += 1 };
  s1 -> s4 [0, 65535] { R12989 += 1 };
  s1 -> s1 [0, 65535] { R12989 += 1, R12927 += 1, R12799 += 1, R12800 += 1 };
  s1 -> s3 [0, 65535] { R12989 += 1, R12927 += 1, R12800 += 1, R12801 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R12989 += 1, R12927 += 1, R12799 += 1, R12800 += 1 };
  s2 -> s2 [0, 65535] { R12989 += 1, R12926 += 1, R12927 += 1 };
  s2 -> s3 [0, 65535] { R12989 += 1, R12927 += 1, R12800 += 1, R12801 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R12989 += 1 };
  s3 -> s3 [0, 65535] { R12989 += 1, R12927 += 1, R12800 += 1, R12801 += 1 };
  s3 -> s5 [0, 65535] { R12989 += 1, R12927 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12989 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R12989 += 1 };
  s5 -> s5 [0, 65535] { R12989 += 1, R12927 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s0 -> s1 [0, 65535] { R12991 += 1, R12929 += 1 };
  s0 -> s0 [0, 65535] { R12990 += 1, R12991 += 1 };
  s0 -> s2 [0, 65535] { R12991 += 1, R12928 += 1, R12929 += 1 };
  s0 -> s3 [87, 87] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s0 -> s4 [87, 87] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s0 -> s1 [89, 65535] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s1 -> s1 [0, 86] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s1 -> s1 [0, 65535] { R12991 += 1, R12929 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R12991 += 1 };
  s1 -> s3 [87, 87] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s1 -> s4 [87, 87] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s1 -> s1 [89, 65535] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s2 -> s1 [0, 86] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s2 -> s1 [0, 65535] { R12991 += 1, R12929 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12991 += 1, R12928 += 1, R12929 += 1 };
  s2 -> s3 [87, 87] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s2 -> s4 [87, 87] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s2 -> s1 [89, 65535] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s3 -> s3 [0, 65535] { R12991 += 1, R12929 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12991 += 1 };
  s4 -> s4 [0, 87] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s4 -> s4 [0, 65535] { R12991 += 1, R12929 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12991 += 1 };
  s4 -> s4 [89, 65535] { R12991 += 1, R12929 += 1, R12909 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12991 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R12992 += 1, R12993 += 1 };
  s0 -> s1 [0, 65535] { R12993 += 1, R12949 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R12993 += 1, R12948 += 1, R12949 += 1 };
  s1 -> s1 [0, 65535] { R12993 += 1, R12949 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R12993 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12993 += 1, R12949 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R12993 += 1, R12948 += 1, R12949 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12993 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R12995 += 1, R12951 += 1 };
  s0 -> s2 [0, 65535] { R12995 += 1, R12950 += 1, R12951 += 1 };
  s0 -> s0 [0, 65535] { R12994 += 1, R12995 += 1 };
  s0 -> s3 [75, 75] { R12995 += 1, R12951 += 1 };
  s0 -> s4 [75, 75] { R12995 += 1, R12951 += 1 };
  s0 -> s5 [87, 87] { R12995 += 1, R12951 += 1 };
  s0 -> s1 [88, 65535] { R12995 += 1, R12951 += 1 };
  s1 -> s1 [0, 74] { R12995 += 1, R12951 += 1 };
  s1 -> s3 [75, 75] { R12995 += 1, R12951 += 1 };
  s1 -> s4 [75, 75] { R12995 += 1, R12951 += 1 };
  s1 -> s5 [87, 87] { R12995 += 1, R12951 += 1 };
  s1 -> s1 [88, 65535] { R12995 += 1, R12951 += 1 };
  s2 -> s1 [0, 74] { R12995 += 1, R12951 += 1 };
  s2 -> s2 [0, 65535] { R12995 += 1, R12950 += 1, R12951 += 1 };
  s2 -> s3 [75, 75] { R12995 += 1, R12951 += 1 };
  s2 -> s4 [75, 75] { R12995 += 1, R12951 += 1 };
  s2 -> s5 [87, 87] { R12995 += 1, R12951 += 1 };
  s2 -> s1 [88, 65535] { R12995 += 1, R12951 += 1 };
  s3 -> s3 [0, 75] { R12995 += 1, R12951 += 1 };
  s3 -> s8 [87, 87] { R12995 += 1, R12951 += 1 };
  s3 -> s3 [88, 65535] { R12995 += 1, R12951 += 1 };
  s5 -> s5 [0, 74] { R12995 += 1, R12951 += 1 };
  s5 -> s5 [0, 65535] { R12995 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R12995 += 1, R12951 += 1 };
  s5 -> s8 [75, 75] { R12995 += 1, R12951 += 1 };
  s5 -> s5 [87, 65535] { R12995 += 1, R12951 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12995 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 75] { R12995 += 1, R12951 += 1 };
  s8 -> s8 [0, 65535] { R12995 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [87, 65535] { R12995 += 1, R12951 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R12997 += 1, R12953 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R12997 += 1, R12952 += 1, R12953 += 1 };
  s0 -> s0 [0, 65535] { R12996 += 1, R12997 += 1 };
  s0 -> s3 [75, 75] { R12997 += 1, R12953 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R12997 += 1, R12953 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R12997 += 1, R12953 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R12997 += 1, R12953 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R12997 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R12997 += 1, R12953 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R12997 += 1, R12953 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R12997 += 1, R12953 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R12997 += 1, R12953 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12997 += 1, R12952 += 1, R12953 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R12997 += 1, R12953 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R12997 += 1, R12953 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R12997 += 1, R12953 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R12997 += 1, R12953 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12997 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12997 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12997 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R12999 += 1, R12955 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R12999 += 1, R12954 += 1, R12955 += 1 };
  s0 -> s0 [0, 65535] { R12998 += 1, R12999 += 1 };
  s0 -> s3 [75, 75] { R12999 += 1, R12955 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R12999 += 1, R12955 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R12999 += 1, R12955 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R12999 += 1, R12955 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R12999 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R12999 += 1, R12955 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R12999 += 1, R12955 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R12999 += 1, R12955 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R12999 += 1, R12955 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R12999 += 1, R12954 += 1, R12955 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R12999 += 1, R12955 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R12999 += 1, R12955 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R12999 += 1, R12955 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R12999 += 1, R12955 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12999 += 1 };
  s4 -> s4 [0, 65535] { R12999 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12999 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R13001 += 1, R12956 += 1, R12957 += 1 };
  s0 -> s0 [0, 65535] { R13000 += 1, R13001 += 1 };
  s0 -> s3 [75, 75] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R13001 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13001 += 1, R12956 += 1, R12957 += 1 };
  s2 -> s3 [75, 75] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13001 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13001 += 1 };
  s4 -> s4 [0, 65535] { R13001 += 1, R12957 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13001 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [0, 74] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s0 [0, 65535] { R13002 += 1, R13003 += 1 };
  s0 -> s3 [0, 65535] { R13003 += 1, R12958 += 1, R12959 += 1 };
  s0 -> s4 [75, 75] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s5 [75, 75] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s6 [75, 75] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s7 [75, 75] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s1 [76, 65535] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [76, 65535] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [0, 74] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [0, 74] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s4 [75, 75] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s5 [75, 75] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s6 [75, 75] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s7 [75, 75] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [76, 65535] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [76, 65535] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s11 [0, 74] { R13003 += 1, R12959 += 1 };
  s2 -> s2 [0, 74] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s12 [75, 75] { R13003 += 1, R12959 += 1 };
  s2 -> s6 [75, 75] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s7 [75, 75] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s8 [75, 75] { R13003 += 1, R12959 += 1 };
  s2 -> s11 [76, 65535] { R13003 += 1, R12959 += 1 };
  s2 -> s2 [76, 65535] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [0, 74] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [0, 74] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s3 [0, 65535] { R13003 += 1, R12958 += 1, R12959 += 1 };
  s3 -> s4 [75, 75] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s5 [75, 75] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s6 [75, 75] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s7 [75, 75] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [76, 65535] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [76, 65535] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s5 -> s5 [0, 65535] { R13003 += 1, R12959 += 1, R10246 += 1, R10247 += 1 };
  s5 -> s7 [0, 65535] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s7 -> s7 [0, 65535] { R13003 += 1, R12959 += 1, R10247 += 1, R10248 += 1 };
  s7 -> s8 [0, 65535] { R13003 += 1, R12959 += 1 };
  s8 -> s9 [0, 65535] { R13003 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R13003 += 1, R12959 += 1 };
  s9 -> s9 [0, 65535] { R13003 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 74] { R13003 += 1, R12959 += 1 };
  s11 -> s11 [0, 65535] { R13003 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [75, 75] { R13003 += 1, R12959 += 1 };
  s11 -> s8 [75, 75] { R13003 += 1, R12959 += 1 };
  s11 -> s11 [76, 65535] { R13003 += 1, R12959 += 1 };
  s12 -> s12 [0, 65535] { R13003 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s0 [0, 65535] { R13004 += 1, R13005 += 1 };
  s0 -> s2 [0, 65535] { R13005 += 1, R12960 += 1, R12961 += 1 };
  s0 -> s3 [75, 75] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s4 [75, 75] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s1 [76, 65535] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s1 [0, 74] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s1 [0, 65535] { R13005 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s4 [75, 75] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s1 [76, 65535] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s2 -> s1 [0, 74] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13005 += 1, R12960 += 1, R12961 += 1 };
  s2 -> s3 [75, 75] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s2 -> s4 [75, 75] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s2 -> s1 [76, 65535] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s3 -> s3 [0, 65535] { R13005 += 1, R12961 += 1, R12792 += 1, R12793 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13005 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13005 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13005 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s0 -> s2 [0, 65535] { R13007 += 1, R12962 += 1, R12963 += 1 };
  s0 -> s0 [0, 65535] { R13006 += 1, R13007 += 1 };
  s0 -> s3 [75, 75] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s0 -> s4 [75, 75] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s0 -> s1 [76, 65535] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s1 -> s1 [0, 74] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s1 -> s1 [0, 65535] { R13007 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s1 -> s4 [75, 75] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s1 -> s1 [76, 65535] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s2 -> s1 [0, 74] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s2 -> s2 [0, 65535] { R13007 += 1, R12962 += 1, R12963 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s2 -> s4 [75, 75] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s2 -> s1 [76, 65535] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s3 -> s3 [0, 65535] { R13007 += 1, R12963 += 1, R12796 += 1, R12797 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13007 += 1 };
  s4 -> s4 [0, 65535] { R13007 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13007 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s0 -> s2 [0, 74] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s0 -> s0 [0, 65535] { R13008 += 1, R13009 += 1 };
  s0 -> s3 [0, 65535] { R13009 += 1, R12964 += 1, R12965 += 1 };
  s0 -> s4 [75, 75] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s0 -> s5 [75, 75] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s0 -> s6 [75, 75] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s0 -> s7 [75, 75] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s0 -> s1 [76, 86] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s0 -> s2 [76, 65535] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s0 -> s1 [89, 65535] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s1 -> s1 [0, 74] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R13009 += 1 };
  s1 -> s6 [75, 75] { R13009 += 1, R12965 += 1 };
  s1 -> s7 [75, 75] { R13009 += 1, R12965 += 1 };
  s1 -> s1 [76, 86] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s1 -> s1 [76, 65535] { R13009 += 1, R12965 += 1 };
  s1 -> s1 [89, 65535] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s2 -> s1 [0, 74] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s2 -> s2 [0, 74] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s2 -> s4 [75, 75] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s2 -> s5 [75, 75] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s2 -> s6 [75, 75] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s2 -> s7 [75, 75] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s2 -> s1 [76, 86] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s2 -> s2 [76, 65535] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s2 -> s1 [89, 65535] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s3 -> s1 [0, 74] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s3 -> s2 [0, 74] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s3 -> s3 [0, 65535] { R13009 += 1, R12964 += 1, R12965 += 1 };
  s3 -> s4 [75, 75] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s3 -> s5 [75, 75] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s3 -> s6 [75, 75] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s3 -> s7 [75, 75] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s3 -> s1 [76, 86] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s3 -> s2 [76, 65535] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s3 -> s1 [89, 65535] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s5 -> s6 [0, 86] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s5 -> s5 [0, 65535] { R13009 += 1, R12965 += 1, R12906 += 1, R12907 += 1 };
  s5 -> s6 [89, 65535] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s6 -> s6 [0, 86] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s6 -> s9 [0, 65535] { R13009 += 1 };
  s6 -> s6 [0, 65535] { R13009 += 1, R12965 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [89, 65535] { R13009 += 1, R12965 += 1, R12907 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R13009 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13009 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R12925 && R2 = R13009 && R20 - R13009 = -1 && R21 = R13009 && R22 - R13009 = -1 && R23 = R13009 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12795 + -1*R12793 - R53 = 0 && R52 + R12794 + R12792 = 0 && R12924 = 0 && R12950 = 0 && R12951 = 0 && R12958 = 0 && R12959 = 0 && R12964 = 0 && R12965 = 0 && R12966 = 0 && R12967 = R13009 && R12968 = 0 && R12969 = R13009 && R12970 = 0 && R12971 = R13009 && R12972 = 0 && R12973 = R13009 && R12974 = 0 && R12975 = R13009 && R12976 = 0 && R12977 = R13009 && R12978 = 0 && R12979 = R13009 && R12980 = 0 && R12981 = R13009 && R12982 = 0 && R12983 = R13009 && R12984 = 0 && R12985 = R13009 && R12986 = 0 && R12987 = R13009 && R12988 = 0 && R12989 = R13009 && R12990 = 0 && R12991 = R13009 && R12992 = 0 && R12993 = R13009 && R12994 = 0 && R12995 = R13009 && R12996 = 0 && R12997 = R13009 && R12998 = 0 && R12999 = R13009 && R13000 = 0 && R13001 = R13009 && R13002 = 0 && R13003 = R13009 && R13004 = 0 && R13005 = R13009 && R13006 = 0 && R13007 = R13009 && R13008 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12795 + -1*R12793 - R53 < 1 && -1 < R12925 && 0 < R13009 && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R12795 + -1*R12793 - R53 = 0 || R53 + R12795 + R12793 < 1) && (R42 + R72 + R70 = 0 || R53 + R12795 + R12793 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R12795 + -1*R12793 - R53 = 0 || R53 + R12795 + R12793 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R12795 + R12793 < 1))) && (R12910 != 0 || R12911 = R12925 || (R17 = 0 && R12925 = 0)) && (R12912 != 0 || R12913 = R12925 || (R17 = 0 && R12925 = 0)) && (R12914 != 0 || R12915 = R12925 || (R17 = 0 && R12925 = 0)) && (R12916 != 0 || R12917 = R12925 || (R17 = 0 && R12925 = 0)) && (R12918 != 0 || R12919 = R12925 || (R17 = 0 && R12925 = 0)) && (R12920 != 0 || R12921 = R12925 || (R17 = 0 && R12925 = 0)) && (R12922 != 0 || R12923 = R12925 || (R17 = 0 && R12925 = 0)) && (R12926 != 0 || R12925 = R12927 || (R17 = 0 && R12925 = 0)) && (R12928 != 0 || R12925 = R12929 || (R17 = 0 && R12925 = 0)) && (R18 = 0 || (R12948 = 0 && R12949 = 0)) && (R18 = 0 || (R12952 = 0 && R12953 = 0)) && (R18 = 0 || (R12954 = 0 && R12955 = 0)) && (R18 = 0 || (R12956 = 0 && R12957 = 0)) && (R18 = 0 || (R12960 = 0 && R12961 = 0)) && (R18 = 0 || (R12962 = 0 && R12963 = 0)) && (R19 = 0 || (R12930 = 0 && R12931 = 0)) && (R19 = 0 || (R12932 = 0 && R12933 = 0)) && (R19 = 0 || (R12934 = 0 && R12935 = 0)) && (R19 = 0 || (R12936 = 0 && R12937 = 0)) && (R19 = 0 || (R12938 = 0 && R12939 = 0)) && (R19 = 0 || (R12940 = 0 && R12941 = 0)) && (R19 = 0 || (R12942 = 0 && R12943 = 0)) && (R19 = 0 || (R12944 = 0 && R12945 = 0)) && (R19 = 0 || (R12946 = 0 && R12947 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R12795 + -1*R12793 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R12795 + -1*R12793 - R53 = 0)) && (R58 + R12801 + R12798 = 0 || (R56 + R12799 + R12796 = 0 && R57 + R12800 + R12797 = 0)) && (R58 + R12801 + R12798 = 0 || (R62 + R12908 + R12906 = 0 && R63 + R12909 + R12907 = 0)) && (R12910 = 0 || (R17 = 0 && R12925 = 0)) && (R12912 = 0 || (R17 = 0 && R12925 = 0)) && (R12914 = 0 || (R17 = 0 && R12925 = 0)) && (R12916 = 0 || (R17 = 0 && R12925 = 0)) && (R12918 = 0 || (R17 = 0 && R12925 = 0)) && (R12920 = 0 || (R17 = 0 && R12925 = 0)) && (R12922 = 0 || (R17 = 0 && R12925 = 0)) && (R12926 = 0 || (R17 = 0 && R12925 = 0)) && (R12928 = 0 || (R17 = 0 && R12925 = 0));
// End of Parikh automata intersection problem
