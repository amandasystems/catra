// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R15332, R15333, R15334, R15335, R15336, R15337, R15338, R15339, R15340, R15341, R17, R17882, R17883, R17884, R17885, R18, R18308, R18309, R18310, R18311, R18312, R18313, R18418, R18419, R18420, R18421, R18422, R18423, R18424, R18425, R18426, R18427, R18428, R18429, R18430, R18431, R18432, R18433, R18434, R18435, R18436, R18437, R18438, R18439, R18440, R18441, R18442, R18443, R18444, R18445, R18446, R18447, R18448, R18449, R18450, R18451, R18452, R18453, R18454, R18455, R18456, R18457, R18458, R18459, R18460, R18461, R18462, R18463, R18464, R18465, R18466, R18467, R18468, R18469, R18470, R18471, R18472, R18473, R18474, R18475, R18476, R18477, R18478, R18479, R18480, R18481, R18482, R18483, R18484, R18485, R18486, R18487, R18488, R18489, R18490, R18491, R18492, R18493, R18494, R18495, R18496, R18497, R18498, R18499, R18500, R18501, R18502, R18503, R18504, R18505, R18506, R18507, R18508, R18509, R18510, R18511, R18512, R18513, R18514, R18515, R18516, R18517, R18518, R18519, R18520, R18521, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R18442 += 1, R18443 += 1 };
  s0 -> s1 [0, 65535] { R18443 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R18443 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R18445 += 1 };
  s0 -> s0 [0, 65535] { R18444 += 1, R18445 += 1 };
  s0 -> s2 [75, 75] { R18445 += 1 };
  s0 -> s3 [75, 75] { R18445 += 1 };
  s0 -> s1 [88, 65535] { R18445 += 1 };
  s1 -> s1 [0, 74] { R18445 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R18445 += 1 };
  s1 -> s3 [75, 75] { R18445 += 1 };
  s1 -> s1 [88, 65535] { R18445 += 1 };
  s2 -> s2 [0, 75] { R18445 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R18445 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R18447 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R18446 += 1, R18447 += 1 };
  s0 -> s2 [75, 75] { R18447 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R18447 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R18447 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R18447 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R18447 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R18447 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R18447 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R18447 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R18449 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R18448 += 1, R18449 += 1 };
  s0 -> s2 [75, 75] { R18449 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R18449 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R18449 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R18449 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R18449 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R18449 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R18449 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18449 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R18451 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R18450 += 1, R18451 += 1 };
  s0 -> s2 [75, 75] { R18451 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R18451 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R18451 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R18451 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R18451 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R18451 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R18451 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R18451 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R18453 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R18452 += 1, R18453 += 1 };
  s0 -> s2 [75, 75] { R18453 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R18453 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R18453 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R18453 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R18453 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R18453 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R18453 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R18453 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R18455 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R18454 += 1, R18455 += 1 };
  s0 -> s2 [75, 75] { R18455 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R18455 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R18455 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R18455 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R18455 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R18455 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R18455 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18455 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R18457 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R18456 += 1, R18457 += 1 };
  s0 -> s2 [75, 75] { R18457 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R18457 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R18457 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R18457 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R18457 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R18457 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R18457 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R18457 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R18459 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R18458 += 1, R18459 += 1 };
  s0 -> s2 [75, 75] { R18459 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R18459 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R18459 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R18459 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R18459 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R18459 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R18459 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R18459 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R18479 += 1 };
  s0 -> s0 [0, 65535] { R18478 += 1, R18479 += 1 };
  s0 -> s2 [75, 75] { R18479 += 1 };
  s0 -> s1 [76, 65535] { R18479 += 1 };
  s1 -> s1 [0, 74] { R18479 += 1 };
  s1 -> s2 [75, 75] { R18479 += 1 };
  s1 -> s1 [76, 65535] { R18479 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18479 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18481 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R18480 += 1, R18481 += 1 };
  s1 -> s1 [0, 65535] { R18481 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R18483 += 1 };
  s0 -> s0 [0, 65535] { R18482 += 1, R18483 += 1 };
  s0 -> s2 [0, 65535] { R18483 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R18483 += 1 };
  s0 -> s1 [76, 65535] { R18483 += 1 };
  s1 -> s1 [0, 74] { R18483 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R18483 += 1 };
  s1 -> s1 [76, 65535] { R18483 += 1 };
  s2 -> s1 [0, 74] { R18483 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18483 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R18483 += 1 };
  s2 -> s1 [76, 65535] { R18483 += 1 };
  s3 -> s3 [0, 65535] { R18483 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R18485 += 1, R18423 += 1 };
  s0 -> s0 [0, 65535] { R18484 += 1, R18485 += 1 };
  s0 -> s2 [0, 65535] { R18485 += 1, R18422 += 1, R18423 += 1 };
  s0 -> s1 [76, 65535] { R18485 += 1, R18423 += 1 };
  s1 -> s1 [0, 74] { R18485 += 1, R18423 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18485 += 1 };
  s1 -> s1 [76, 65535] { R18485 += 1, R18423 += 1 };
  s2 -> s1 [0, 74] { R18485 += 1, R18423 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18485 += 1, R18422 += 1, R18423 += 1 };
  s2 -> s1 [76, 65535] { R18485 += 1, R18423 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18487 += 1, R18425 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R18487 += 1, R18424 += 1, R18425 += 1 };
  s0 -> s0 [0, 65535] { R18486 += 1, R18487 += 1 };
  s1 -> s1 [0, 65535] { R18487 += 1, R18425 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R18487 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18487 += 1, R18425 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R18487 += 1, R18424 += 1, R18425 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18487 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R18489 += 1, R18427 += 1 };
  s0 -> s0 [0, 65535] { R18488 += 1, R18489 += 1 };
  s0 -> s2 [0, 65535] { R18489 += 1, R18426 += 1, R18427 += 1 };
  s0 -> s1 [87, 65535] { R18489 += 1, R18427 += 1 };
  s1 -> s1 [0, 75] { R18489 += 1, R18427 += 1 };
  s1 -> s1 [0, 65535] { R18489 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R18489 += 1, R18427 += 1 };
  s2 -> s1 [0, 75] { R18489 += 1, R18427 += 1 };
  s2 -> s2 [0, 65535] { R18489 += 1, R18426 += 1, R18427 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R18489 += 1, R18427 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18491 += 1, R18429 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R18491 += 1, R18428 += 1, R18429 += 1 };
  s0 -> s0 [0, 65535] { R18490 += 1, R18491 += 1 };
  s1 -> s4 [0, 65535] { R18491 += 1 };
  s1 -> s1 [0, 65535] { R18491 += 1, R18429 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18491 += 1, R18429 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R18491 += 1, R18428 += 1, R18429 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18491 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R18493 += 1, R18431 += 1 };
  s0 -> s0 [0, 65535] { R18492 += 1, R18493 += 1 };
  s0 -> s2 [0, 65535] { R18493 += 1, R18430 += 1, R18431 += 1 };
  s0 -> s3 [0, 65535] { R18493 += 1, R18431 += 1, R69 += 1 };
  s0 -> s1 [88, 65535] { R18493 += 1, R18431 += 1 };
  s1 -> s1 [0, 86] { R18493 += 1, R18431 += 1 };
  s1 -> s1 [0, 65535] { R18493 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R18493 += 1, R18431 += 1 };
  s2 -> s1 [0, 86] { R18493 += 1, R18431 += 1 };
  s2 -> s2 [0, 65535] { R18493 += 1, R18430 += 1, R18431 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18493 += 1, R18431 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R18493 += 1, R18431 += 1 };
  s3 -> s1 [0, 86] { R18493 += 1, R18431 += 1 };
  s3 -> s4 [0, 65535] { R18493 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18493 += 1, R18431 += 1, R69 += 1 };
  s3 -> s1 [88, 65535] { R18493 += 1, R18431 += 1 };
  s4 -> s4 [0, 65535] { R18493 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R18495 += 1, R18433 += 1, R15335 += 1 };
  s0 -> s0 [0, 65535] { R18494 += 1, R18495 += 1 };
  s0 -> s2 [0, 65535] { R18495 += 1, R18432 += 1, R18433 += 1 };
  s0 -> s1 [0, 65535] { R18495 += 1, R18433 += 1 };
  s0 -> s1 [88, 65535] { R18495 += 1, R18433 += 1, R15335 += 1 };
  s1 -> s1 [0, 86] { R18495 += 1, R18433 += 1, R15335 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18495 += 1 };
  s1 -> s1 [0, 65535] { R18495 += 1, R18433 += 1 };
  s1 -> s1 [88, 65535] { R18495 += 1, R18433 += 1, R15335 += 1 };
  s2 -> s1 [0, 86] { R18495 += 1, R18433 += 1, R15335 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18495 += 1, R18432 += 1, R18433 += 1 };
  s2 -> s1 [0, 65535] { R18495 += 1, R18433 += 1 };
  s2 -> s1 [88, 65535] { R18495 += 1, R18433 += 1, R15335 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18495 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R18497 += 1, R18435 += 1, R15339 += 1, R15340 += 1 };
  s0 -> s2 [0, 65535] { R18497 += 1, R18434 += 1, R18435 += 1 };
  s0 -> s0 [0, 65535] { R18496 += 1, R18497 += 1 };
  s0 -> s3 [0, 65535] { R18497 += 1, R18435 += 1, R15340 += 1, R15341 += 1 };
  s1 -> s1 [0, 65535] { R18497 += 1, R18435 += 1, R15339 += 1, R15340 += 1 };
  s1 -> s5 [0, 65535] { R18497 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R18497 += 1, R18435 += 1, R15340 += 1, R15341 += 1 };
  s2 -> s1 [0, 65535] { R18497 += 1, R18435 += 1, R15339 += 1, R15340 += 1 };
  s2 -> s2 [0, 65535] { R18497 += 1, R18434 += 1, R18435 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R18497 += 1, R18435 += 1, R15340 += 1, R15341 += 1 };
  s3 -> s4 [0, 65535] { R18497 += 1, R18435 += 1 };
  s3 -> s5 [0, 65535] { R18497 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18497 += 1, R18435 += 1, R15340 += 1, R15341 += 1 };
  s4 -> s4 [0, 65535] { R18497 += 1, R18435 += 1 };
  s4 -> s5 [0, 65535] { R18497 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18497 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s0 -> s2 [0, 65535] { R18499 += 1, R18437 += 1, R17884 += 1, R17885 += 1 };
  s0 -> s3 [0, 65535] { R18499 += 1, R18436 += 1, R18437 += 1 };
  s0 -> s0 [0, 65535] { R18498 += 1, R18499 += 1 };
  s0 -> s4 [88, 88] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s0 -> s1 [89, 65535] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s1 -> s1 [0, 87] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s1 -> s4 [88, 88] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s1 -> s1 [89, 65535] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s2 -> s1 [0, 87] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s2 -> s2 [0, 65535] { R18499 += 1, R18437 += 1, R17884 += 1, R17885 += 1 };
  s2 -> s4 [88, 88] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s2 -> s1 [89, 65535] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s3 -> s1 [0, 87] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s3 -> s2 [0, 65535] { R18499 += 1, R18437 += 1, R17884 += 1, R17885 += 1 };
  s3 -> s3 [0, 65535] { R18499 += 1, R18436 += 1, R18437 += 1 };
  s3 -> s4 [88, 88] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s3 -> s1 [89, 65535] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18499 += 1 };
  s4 -> s7 [0, 65535] { R18499 += 1, R18437 += 1 };
  s4 -> s4 [0, 65535] { R18499 += 1, R18437 += 1, R17885 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18499 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18499 += 1 };
  s7 -> s7 [0, 65535] { R18499 += 1, R18437 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R18501 += 1, R18439 += 1 };
  s0 -> s2 [0, 65535] { R18501 += 1, R18439 += 1, R18312 += 1, R18313 += 1 };
  s0 -> s0 [0, 65535] { R18500 += 1, R18501 += 1 };
  s0 -> s3 [0, 65535] { R18501 += 1, R18438 += 1, R18439 += 1 };
  s1 -> s1 [0, 65535] { R18501 += 1, R18439 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R18501 += 1 };
  s2 -> s1 [0, 65535] { R18501 += 1, R18439 += 1 };
  s2 -> s2 [0, 65535] { R18501 += 1, R18439 += 1, R18312 += 1, R18313 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18501 += 1 };
  s3 -> s1 [0, 65535] { R18501 += 1, R18439 += 1 };
  s3 -> s2 [0, 65535] { R18501 += 1, R18439 += 1, R18312 += 1, R18313 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18501 += 1, R18438 += 1, R18439 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18501 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s0 -> s0 [0, 65535] { R18502 += 1, R18503 += 1 };
  s0 -> s2 [0, 65535] { R18503 += 1, R18440 += 1, R18441 += 1 };
  s0 -> s1 [0, 65535] { R18503 += 1, R18441 += 1 };
  s0 -> s3 [87, 87] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s0 -> s4 [87, 87] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s0 -> s1 [89, 65535] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s1 -> s1 [0, 86] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18503 += 1 };
  s1 -> s1 [0, 65535] { R18503 += 1, R18441 += 1 };
  s1 -> s3 [87, 87] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s1 -> s4 [87, 87] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s1 -> s1 [89, 65535] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s2 -> s1 [0, 86] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18503 += 1, R18440 += 1, R18441 += 1 };
  s2 -> s1 [0, 65535] { R18503 += 1, R18441 += 1 };
  s2 -> s3 [87, 87] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s2 -> s4 [87, 87] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s2 -> s1 [89, 65535] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18503 += 1, R18441 += 1 };
  s3 -> s6 [0, 65535] { R18503 += 1 };
  s4 -> s4 [0, 87] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18503 += 1 };
  s4 -> s4 [0, 65535] { R18503 += 1, R18441 += 1 };
  s4 -> s4 [89, 65535] { R18503 += 1, R18441 += 1, R18421 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18503 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R18504 += 1, R18505 += 1 };
  s0 -> s1 [0, 65535] { R18505 += 1, R18460 += 1, R18461 += 1 };
  s0 -> s2 [0, 65535] { R18505 += 1, R18461 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18505 += 1, R18460 += 1, R18461 += 1 };
  s1 -> s2 [0, 65535] { R18505 += 1, R18461 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R18505 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18505 += 1, R18461 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R18505 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R18507 += 1, R18463 += 1 };
  s0 -> s2 [0, 65535] { R18507 += 1, R18462 += 1, R18463 += 1 };
  s0 -> s0 [0, 65535] { R18506 += 1, R18507 += 1 };
  s0 -> s3 [75, 75] { R18507 += 1, R18463 += 1 };
  s0 -> s4 [75, 75] { R18507 += 1, R18463 += 1 };
  s0 -> s5 [87, 87] { R18507 += 1, R18463 += 1 };
  s0 -> s1 [88, 65535] { R18507 += 1, R18463 += 1 };
  s1 -> s1 [0, 74] { R18507 += 1, R18463 += 1 };
  s1 -> s3 [75, 75] { R18507 += 1, R18463 += 1 };
  s1 -> s4 [75, 75] { R18507 += 1, R18463 += 1 };
  s1 -> s5 [87, 87] { R18507 += 1, R18463 += 1 };
  s1 -> s1 [88, 65535] { R18507 += 1, R18463 += 1 };
  s2 -> s1 [0, 74] { R18507 += 1, R18463 += 1 };
  s2 -> s2 [0, 65535] { R18507 += 1, R18462 += 1, R18463 += 1 };
  s2 -> s3 [75, 75] { R18507 += 1, R18463 += 1 };
  s2 -> s4 [75, 75] { R18507 += 1, R18463 += 1 };
  s2 -> s5 [87, 87] { R18507 += 1, R18463 += 1 };
  s2 -> s1 [88, 65535] { R18507 += 1, R18463 += 1 };
  s3 -> s3 [0, 75] { R18507 += 1, R18463 += 1 };
  s3 -> s8 [87, 87] { R18507 += 1, R18463 += 1 };
  s3 -> s3 [88, 65535] { R18507 += 1, R18463 += 1 };
  s5 -> s5 [0, 74] { R18507 += 1, R18463 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18507 += 1 };
  s5 -> s7 [75, 75] { R18507 += 1, R18463 += 1 };
  s5 -> s8 [75, 75] { R18507 += 1, R18463 += 1 };
  s5 -> s5 [87, 65535] { R18507 += 1, R18463 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18507 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 75] { R18507 += 1, R18463 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18507 += 1 };
  s8 -> s8 [87, 65535] { R18507 += 1, R18463 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R18509 += 1, R18465 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R18509 += 1, R18464 += 1, R18465 += 1 };
  s0 -> s0 [0, 65535] { R18508 += 1, R18509 += 1 };
  s0 -> s3 [75, 75] { R18509 += 1, R18465 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R18509 += 1, R18465 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R18509 += 1, R18465 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R18509 += 1, R18465 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18509 += 1 };
  s1 -> s3 [75, 75] { R18509 += 1, R18465 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R18509 += 1, R18465 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R18509 += 1, R18465 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R18509 += 1, R18465 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18509 += 1, R18464 += 1, R18465 += 1 };
  s2 -> s3 [75, 75] { R18509 += 1, R18465 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R18509 += 1, R18465 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R18509 += 1, R18465 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18509 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18509 += 1 };
  s4 -> s4 [0, 65535] { R18509 += 1, R18465 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18509 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R18511 += 1, R18467 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R18511 += 1, R18466 += 1, R18467 += 1 };
  s0 -> s0 [0, 65535] { R18510 += 1, R18511 += 1 };
  s0 -> s3 [75, 75] { R18511 += 1, R18467 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R18511 += 1, R18467 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R18511 += 1, R18467 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R18511 += 1, R18467 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18511 += 1 };
  s1 -> s3 [75, 75] { R18511 += 1, R18467 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R18511 += 1, R18467 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R18511 += 1, R18467 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R18511 += 1, R18467 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18511 += 1, R18466 += 1, R18467 += 1 };
  s2 -> s3 [75, 75] { R18511 += 1, R18467 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R18511 += 1, R18467 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R18511 += 1, R18467 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18511 += 1 };
  s3 -> s3 [0, 65535] { R18511 += 1, R18467 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18511 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18511 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s2 [0, 74] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s0 -> s3 [0, 65535] { R18513 += 1, R18468 += 1, R18469 += 1 };
  s0 -> s0 [0, 65535] { R18512 += 1, R18513 += 1 };
  s0 -> s4 [75, 75] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s0 -> s5 [75, 75] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s6 [75, 75] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s0 -> s7 [75, 75] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s2 [76, 86] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s0 -> s1 [76, 65535] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s2 [88, 65535] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s1 -> s1 [0, 74] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s2 [0, 74] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s1 -> s4 [75, 75] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s1 -> s5 [75, 75] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s6 [75, 75] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s1 -> s7 [75, 75] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s2 [76, 86] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s1 -> s1 [76, 65535] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s1 -> s2 [88, 65535] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s2 -> s2 [0, 74] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R18513 += 1 };
  s2 -> s4 [75, 75] { R18513 += 1, R18469 += 1 };
  s2 -> s6 [75, 75] { R18513 += 1, R18469 += 1 };
  s2 -> s2 [76, 86] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s2 -> s2 [76, 65535] { R18513 += 1, R18469 += 1 };
  s2 -> s2 [88, 65535] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s3 -> s1 [0, 74] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s2 [0, 74] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s3 -> s3 [0, 65535] { R18513 += 1, R18468 += 1, R18469 += 1 };
  s3 -> s4 [75, 75] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s3 -> s5 [75, 75] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s6 [75, 75] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s3 -> s7 [75, 75] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s2 [76, 86] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s3 -> s1 [76, 65535] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s2 [88, 65535] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s4 -> s4 [0, 86] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R18513 += 1, R18469 += 1 };
  s4 -> s9 [0, 65535] { R18513 += 1 };
  s4 -> s4 [88, 65535] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s5 -> s4 [0, 86] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s5 -> s5 [0, 65535] { R18513 += 1, R18469 += 1, R15332 += 1, R15333 += 1 };
  s5 -> s4 [88, 65535] { R18513 += 1, R18469 += 1, R15333 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R18513 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18513 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s2 [0, 65535] { R18515 += 1, R18470 += 1, R18471 += 1 };
  s0 -> s0 [0, 65535] { R18514 += 1, R18515 += 1 };
  s0 -> s3 [75, 75] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s4 [75, 75] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s1 [76, 65535] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [0, 74] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18515 += 1 };
  s1 -> s3 [75, 75] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s4 [75, 75] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [76, 65535] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [0, 74] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18515 += 1, R18470 += 1, R18471 += 1 };
  s2 -> s3 [75, 75] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s4 [75, 75] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [76, 65535] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s3 -> s6 [0, 65535] { R18515 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18515 += 1, R18471 += 1, R15336 += 1, R15337 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18515 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18515 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s2 [0, 65535] { R18517 += 1, R18472 += 1, R18473 += 1 };
  s0 -> s0 [0, 65535] { R18516 += 1, R18517 += 1 };
  s0 -> s3 [75, 75] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s4 [75, 75] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s1 [76, 65535] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s1 -> s1 [0, 74] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s1 -> s1 [0, 65535] { R18517 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s1 -> s4 [75, 75] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s1 -> s1 [76, 65535] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s1 [0, 74] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s2 [0, 65535] { R18517 += 1, R18472 += 1, R18473 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s4 [75, 75] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s1 [76, 65535] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s6 [0, 65535] { R18517 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18517 += 1, R18473 += 1, R17882 += 1, R17883 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18517 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18517 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s0 -> s2 [0, 74] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s0 -> s3 [0, 65535] { R18519 += 1, R18474 += 1, R18475 += 1 };
  s0 -> s0 [0, 65535] { R18518 += 1, R18519 += 1 };
  s0 -> s4 [75, 75] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s0 -> s5 [75, 75] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s0 -> s6 [75, 75] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s0 -> s7 [75, 75] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s0 -> s1 [76, 65535] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s0 -> s2 [76, 65535] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s1 -> s1 [0, 74] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s1 -> s2 [0, 74] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s1 -> s4 [75, 75] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s1 -> s5 [75, 75] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s1 -> s6 [75, 75] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s1 -> s7 [75, 75] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s1 -> s1 [76, 65535] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s1 -> s2 [76, 65535] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s2 -> s2 [0, 74] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s2 -> s2 [0, 65535] { R18519 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [75, 75] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s2 -> s6 [75, 75] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s2 -> s2 [76, 65535] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s3 -> s1 [0, 74] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s3 -> s2 [0, 74] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s3 -> s3 [0, 65535] { R18519 += 1, R18474 += 1, R18475 += 1 };
  s3 -> s4 [75, 75] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s3 -> s5 [75, 75] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s3 -> s6 [75, 75] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s3 -> s7 [75, 75] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s3 -> s1 [76, 65535] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s3 -> s2 [76, 65535] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s4 -> s4 [0, 65535] { R18519 += 1, R18475 += 1, R18308 += 1, R18309 += 1 };
  s4 -> s5 [0, 65535] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s5 -> s9 [0, 65535] { R18519 += 1 };
  s5 -> s5 [0, 65535] { R18519 += 1, R18475 += 1, R18309 += 1, R18310 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R18519 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18519 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s0 -> s2 [0, 74] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s0 -> s3 [0, 65535] { R18521 += 1, R18476 += 1, R18477 += 1 };
  s0 -> s0 [0, 65535] { R18520 += 1, R18521 += 1 };
  s0 -> s4 [75, 75] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s0 -> s5 [75, 75] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s0 -> s6 [75, 75] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s0 -> s7 [75, 75] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s0 -> s1 [76, 86] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s0 -> s2 [76, 65535] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s0 -> s1 [89, 65535] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s1 -> s1 [0, 74] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s1 -> s1 [0, 65535] { R18521 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [75, 75] { R18521 += 1, R18477 += 1 };
  s1 -> s5 [75, 75] { R18521 += 1, R18477 += 1 };
  s1 -> s1 [76, 86] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s1 -> s1 [76, 65535] { R18521 += 1, R18477 += 1 };
  s1 -> s1 [89, 65535] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s2 -> s1 [0, 74] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s2 -> s2 [0, 74] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s2 -> s4 [75, 75] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s2 -> s5 [75, 75] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s2 -> s6 [75, 75] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s2 -> s7 [75, 75] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s2 -> s1 [76, 86] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s2 -> s2 [76, 65535] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s2 -> s1 [89, 65535] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s3 -> s1 [0, 74] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s3 -> s2 [0, 74] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s3 -> s3 [0, 65535] { R18521 += 1, R18476 += 1, R18477 += 1 };
  s3 -> s4 [75, 75] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s3 -> s5 [75, 75] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s3 -> s6 [75, 75] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s3 -> s7 [75, 75] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s3 -> s1 [76, 86] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s3 -> s2 [76, 65535] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s3 -> s1 [89, 65535] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s4 -> s4 [0, 86] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s4 -> s4 [0, 65535] { R18521 += 1, R18477 += 1 };
  s4 -> s9 [0, 65535] { R18521 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [89, 65535] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s5 -> s5 [0, 65535] { R18521 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 86] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s7 -> s7 [0, 65535] { R18521 += 1, R18477 += 1, R18418 += 1, R18419 += 1 };
  s7 -> s4 [89, 65535] { R18521 += 1, R18477 += 1, R18419 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18521 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R18437 && R2 = R18521 && R20 - R18521 = -1 && R21 = R18521 && R22 - R18521 = -1 && R23 = R18521 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17885 + -1*R17883 - R53 = 0 && R52 + R17884 + R17882 = 0 && R18436 = 0 && R18462 = 0 && R18463 = 0 && R18468 = 0 && R18469 = 0 && R18474 = 0 && R18475 = 0 && R18476 = 0 && R18477 = 0 && R18478 = 0 && R18479 = R18521 && R18480 = 0 && R18481 = R18521 && R18482 = 0 && R18483 = R18521 && R18484 = 0 && R18485 = R18521 && R18486 = 0 && R18487 = R18521 && R18488 = 0 && R18489 = R18521 && R18490 = 0 && R18491 = R18521 && R18492 = 0 && R18493 = R18521 && R18494 = 0 && R18495 = R18521 && R18496 = 0 && R18497 = R18521 && R18498 = 0 && R18499 = R18521 && R18500 = 0 && R18501 = R18521 && R18502 = 0 && R18503 = R18521 && R18504 = 0 && R18505 = R18521 && R18506 = 0 && R18507 = R18521 && R18508 = 0 && R18509 = R18521 && R18510 = 0 && R18511 = R18521 && R18512 = 0 && R18513 = R18521 && R18514 = 0 && R18515 = R18521 && R18516 = 0 && R18517 = R18521 && R18518 = 0 && R18519 = R18521 && R18520 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17885 + -1*R17883 - R53 < 1 && -1 < R18437 && 0 < R18521 && (R48 + R15341 + R15338 != 0 || ((R42 + R15334 + R15332 != 0 || R43 + R15335 + R15333 + -1*R17885 + -1*R17883 - R53 = 0 || R53 + R17885 + R17883 < 1) && (R42 + R15334 + R15332 = 0 || R53 + R17885 + R17883 < 1))) && (R48 + R15341 + R15338 != 0 || ((R46 + R15339 + R15336 != 0 || R47 + R15340 + R15337 + -1*R17885 + -1*R17883 - R53 = 0 || R53 + R17885 + R17883 < 1) && (R46 + R15339 + R15336 = 0 || R53 + R17885 + R17883 < 1))) && (R18422 != 0 || R18423 = R18437 || (R17 = 0 && R18437 = 0)) && (R18424 != 0 || R18425 = R18437 || (R17 = 0 && R18437 = 0)) && (R18426 != 0 || R18427 = R18437 || (R17 = 0 && R18437 = 0)) && (R18428 != 0 || R18429 = R18437 || (R17 = 0 && R18437 = 0)) && (R18430 != 0 || R18431 = R18437 || (R17 = 0 && R18437 = 0)) && (R18432 != 0 || R18433 = R18437 || (R17 = 0 && R18437 = 0)) && (R18434 != 0 || R18435 = R18437 || (R17 = 0 && R18437 = 0)) && (R18438 != 0 || R18437 = R18439 || (R17 = 0 && R18437 = 0)) && (R18440 != 0 || R18437 = R18441 || (R17 = 0 && R18437 = 0)) && (R18 = 0 || (R18460 = 0 && R18461 = 0)) && (R18 = 0 || (R18464 = 0 && R18465 = 0)) && (R18 = 0 || (R18466 = 0 && R18467 = 0)) && (R18 = 0 || (R18470 = 0 && R18471 = 0)) && (R18 = 0 || (R18472 = 0 && R18473 = 0)) && (R19 = 0 || (R18442 = 0 && R18443 = 0)) && (R19 = 0 || (R18444 = 0 && R18445 = 0)) && (R19 = 0 || (R18446 = 0 && R18447 = 0)) && (R19 = 0 || (R18448 = 0 && R18449 = 0)) && (R19 = 0 || (R18450 = 0 && R18451 = 0)) && (R19 = 0 || (R18452 = 0 && R18453 = 0)) && (R19 = 0 || (R18454 = 0 && R18455 = 0)) && (R19 = 0 || (R18456 = 0 && R18457 = 0)) && (R19 = 0 || (R18458 = 0 && R18459 = 0)) && (R48 + R15341 + R15338 = 0 || (R42 + R15334 + R15332 = 0 && R43 + R15335 + R15333 + -1*R17885 + -1*R17883 - R53 = 0)) && (R48 + R15341 + R15338 = 0 || (R46 + R15339 + R15336 = 0 && R47 + R15340 + R15337 + -1*R17885 + -1*R17883 - R53 = 0)) && (R58 + R18313 + R18310 = 0 || (R56 + R18311 + R18308 = 0 && R57 + R18312 + R18309 = 0)) && (R58 + R18313 + R18310 = 0 || (R62 + R18420 + R18418 = 0 && R63 + R18421 + R18419 = 0)) && (R18422 = 0 || (R17 = 0 && R18437 = 0)) && (R18424 = 0 || (R17 = 0 && R18437 = 0)) && (R18426 = 0 || (R17 = 0 && R18437 = 0)) && (R18428 = 0 || (R17 = 0 && R18437 = 0)) && (R18430 = 0 || (R17 = 0 && R18437 = 0)) && (R18432 = 0 || (R17 = 0 && R18437 = 0)) && (R18434 = 0 || (R17 = 0 && R18437 = 0)) && (R18438 = 0 || (R17 = 0 && R18437 = 0)) && (R18440 = 0 || (R17 = 0 && R18437 = 0));
// End of Parikh automata intersection problem
