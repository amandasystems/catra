// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10246, R10247, R10248, R10249, R10250, R10251, R10252, R10253, R10254, R10255, R10678, R10679, R10680, R10681, R10682, R10683, R10788, R10789, R10790, R10791, R10792, R10793, R10794, R10795, R10796, R10797, R10798, R10799, R10800, R10801, R10802, R10803, R10804, R10805, R10806, R10807, R10808, R10809, R10810, R10811, R10812, R10813, R10814, R10815, R10816, R10817, R10818, R10819, R10820, R10821, R10822, R10823, R10824, R10825, R10826, R10827, R10828, R10829, R10830, R10831, R10832, R10833, R10834, R10835, R10836, R10837, R10838, R10839, R10840, R10841, R10842, R10843, R10844, R10845, R10846, R10847, R10848, R10849, R10850, R10851, R10852, R10853, R10854, R10855, R10856, R10857, R10858, R10859, R10860, R10861, R10862, R10863, R10864, R10865, R10866, R10867, R10868, R10869, R10870, R10871, R10872, R10873, R10874, R10875, R10876, R10877, R10878, R10879, R10880, R10881, R10882, R10883, R10884, R10885, R10886, R10887, R10888, R10889, R10890, R10891, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10812 += 1, R10813 += 1 };
  s0 -> s1 [0, 65535] { R10813 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10813 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R10815 += 1 };
  s0 -> s0 [0, 65535] { R10814 += 1, R10815 += 1 };
  s0 -> s2 [75, 75] { R10815 += 1 };
  s0 -> s3 [75, 75] { R10815 += 1 };
  s0 -> s1 [88, 65535] { R10815 += 1 };
  s1 -> s1 [0, 74] { R10815 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10815 += 1 };
  s1 -> s3 [75, 75] { R10815 += 1 };
  s1 -> s1 [88, 65535] { R10815 += 1 };
  s2 -> s2 [0, 75] { R10815 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R10815 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R10817 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R10816 += 1, R10817 += 1 };
  s0 -> s2 [75, 75] { R10817 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R10817 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R10817 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R10817 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10817 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R10817 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R10817 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R10817 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R10819 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10818 += 1, R10819 += 1 };
  s0 -> s2 [75, 75] { R10819 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R10819 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R10819 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R10819 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10819 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R10819 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R10819 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10819 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R10821 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10820 += 1, R10821 += 1 };
  s0 -> s2 [75, 75] { R10821 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R10821 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R10821 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R10821 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10821 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R10821 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R10821 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10821 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R10823 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10822 += 1, R10823 += 1 };
  s0 -> s2 [75, 75] { R10823 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R10823 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R10823 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R10823 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10823 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R10823 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R10823 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R10823 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R10825 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R10824 += 1, R10825 += 1 };
  s0 -> s2 [75, 75] { R10825 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R10825 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R10825 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R10825 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10825 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R10825 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R10825 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R10825 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R10827 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10826 += 1, R10827 += 1 };
  s0 -> s2 [75, 75] { R10827 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R10827 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R10827 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R10827 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10827 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R10827 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R10827 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10827 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R10829 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R10828 += 1, R10829 += 1 };
  s0 -> s2 [75, 75] { R10829 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R10829 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R10829 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R10829 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10829 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R10829 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R10829 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10829 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R10849 += 1 };
  s0 -> s0 [0, 65535] { R10848 += 1, R10849 += 1 };
  s0 -> s2 [75, 75] { R10849 += 1 };
  s0 -> s1 [76, 65535] { R10849 += 1 };
  s1 -> s1 [0, 74] { R10849 += 1 };
  s1 -> s2 [75, 75] { R10849 += 1 };
  s1 -> s1 [76, 65535] { R10849 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10849 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10850 += 1, R10851 += 1 };
  s0 -> s1 [0, 65535] { R10851 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10851 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R10853 += 1 };
  s0 -> s0 [0, 65535] { R10852 += 1, R10853 += 1 };
  s0 -> s2 [0, 65535] { R10853 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R10853 += 1 };
  s0 -> s1 [76, 65535] { R10853 += 1 };
  s1 -> s1 [0, 74] { R10853 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R10853 += 1 };
  s1 -> s1 [76, 65535] { R10853 += 1 };
  s2 -> s1 [0, 74] { R10853 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10853 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R10853 += 1 };
  s2 -> s1 [76, 65535] { R10853 += 1 };
  s3 -> s3 [0, 65535] { R10853 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R10855 += 1, R10793 += 1 };
  s0 -> s0 [0, 65535] { R10854 += 1, R10855 += 1 };
  s0 -> s2 [0, 65535] { R10855 += 1, R10792 += 1, R10793 += 1 };
  s0 -> s1 [76, 65535] { R10855 += 1, R10793 += 1 };
  s1 -> s1 [0, 74] { R10855 += 1, R10793 += 1 };
  s1 -> s1 [0, 65535] { R10855 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R10855 += 1, R10793 += 1 };
  s2 -> s1 [0, 74] { R10855 += 1, R10793 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10855 += 1, R10792 += 1, R10793 += 1 };
  s2 -> s1 [76, 65535] { R10855 += 1, R10793 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10856 += 1, R10857 += 1 };
  s0 -> s1 [0, 65535] { R10857 += 1, R10795 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R10857 += 1, R10794 += 1, R10795 += 1 };
  s1 -> s4 [0, 65535] { R10857 += 1 };
  s1 -> s1 [0, 65535] { R10857 += 1, R10795 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10857 += 1, R10795 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10857 += 1, R10794 += 1, R10795 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10857 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R10859 += 1, R10797 += 1 };
  s0 -> s0 [0, 65535] { R10858 += 1, R10859 += 1 };
  s0 -> s2 [0, 65535] { R10859 += 1, R10796 += 1, R10797 += 1 };
  s0 -> s1 [87, 65535] { R10859 += 1, R10797 += 1 };
  s1 -> s1 [0, 75] { R10859 += 1, R10797 += 1 };
  s1 -> s1 [0, 65535] { R10859 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R10859 += 1, R10797 += 1 };
  s2 -> s1 [0, 75] { R10859 += 1, R10797 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10859 += 1, R10796 += 1, R10797 += 1 };
  s2 -> s1 [87, 65535] { R10859 += 1, R10797 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10861 += 1, R10799 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R10860 += 1, R10861 += 1 };
  s0 -> s2 [0, 65535] { R10861 += 1, R10798 += 1, R10799 += 1 };
  s1 -> s1 [0, 65535] { R10861 += 1, R10799 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R10861 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10861 += 1, R10799 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R10861 += 1, R10798 += 1, R10799 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10861 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R10863 += 1, R10801 += 1 };
  s0 -> s2 [0, 65535] { R10863 += 1, R10801 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R10863 += 1, R10800 += 1, R10801 += 1 };
  s0 -> s0 [0, 65535] { R10862 += 1, R10863 += 1 };
  s0 -> s1 [88, 65535] { R10863 += 1, R10801 += 1 };
  s1 -> s1 [0, 86] { R10863 += 1, R10801 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10863 += 1 };
  s1 -> s1 [88, 65535] { R10863 += 1, R10801 += 1 };
  s2 -> s1 [0, 86] { R10863 += 1, R10801 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10863 += 1, R10801 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R10863 += 1 };
  s2 -> s1 [88, 65535] { R10863 += 1, R10801 += 1 };
  s3 -> s1 [0, 86] { R10863 += 1, R10801 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10863 += 1, R10801 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R10863 += 1, R10800 += 1, R10801 += 1 };
  s3 -> s1 [88, 65535] { R10863 += 1, R10801 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10863 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R10865 += 1, R10803 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R10864 += 1, R10865 += 1 };
  s0 -> s2 [0, 65535] { R10865 += 1, R10803 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R10865 += 1, R10802 += 1, R10803 += 1 };
  s0 -> s1 [88, 65535] { R10865 += 1, R10803 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R10865 += 1, R10803 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10865 += 1, R10803 += 1 };
  s1 -> s5 [0, 65535] { R10865 += 1 };
  s1 -> s1 [88, 65535] { R10865 += 1, R10803 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R10865 += 1, R10803 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10865 += 1, R10803 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R10865 += 1 };
  s2 -> s1 [88, 65535] { R10865 += 1, R10803 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R10865 += 1, R10803 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10865 += 1, R10803 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R10865 += 1, R10802 += 1, R10803 += 1 };
  s3 -> s1 [88, 65535] { R10865 += 1, R10803 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10865 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R10866 += 1, R10867 += 1 };
  s0 -> s1 [0, 65535] { R10867 += 1, R10804 += 1, R10805 += 1 };
  s0 -> s2 [0, 65535] { R10867 += 1, R10805 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10867 += 1, R10804 += 1, R10805 += 1 };
  s1 -> s2 [0, 65535] { R10867 += 1, R10805 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10867 += 1 };
  s2 -> s2 [0, 65535] { R10867 += 1, R10805 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10867 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10869 += 1, R10807 += 1, R10255 += 1 };
  s0 -> s2 [0, 65535] { R10869 += 1, R10806 += 1, R10807 += 1 };
  s0 -> s0 [0, 65535] { R10868 += 1, R10869 += 1 };
  s0 -> s3 [0, 65535] { R10869 += 1, R10807 += 1 };
  s1 -> s1 [0, 65535] { R10869 += 1, R10807 += 1, R10255 += 1 };
  s1 -> s4 [0, 65535] { R10869 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10869 += 1, R10807 += 1 };
  s2 -> s1 [0, 65535] { R10869 += 1, R10807 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R10869 += 1, R10806 += 1, R10807 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10869 += 1, R10807 += 1 };
  s3 -> s4 [0, 65535] { R10869 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10869 += 1, R10807 += 1 };
  s4 -> s4 [0, 65535] { R10869 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10871 += 1, R10809 += 1, R10682 += 1, R10683 += 1 };
  s0 -> s0 [0, 65535] { R10870 += 1, R10871 += 1 };
  s0 -> s2 [0, 65535] { R10871 += 1, R10809 += 1 };
  s0 -> s3 [0, 65535] { R10871 += 1, R10808 += 1, R10809 += 1 };
  s1 -> s1 [0, 65535] { R10871 += 1, R10809 += 1, R10682 += 1, R10683 += 1 };
  s1 -> s5 [0, 65535] { R10871 += 1 };
  s1 -> s2 [0, 65535] { R10871 += 1, R10809 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10871 += 1 };
  s2 -> s2 [0, 65535] { R10871 += 1, R10809 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10871 += 1, R10809 += 1, R10682 += 1, R10683 += 1 };
  s3 -> s2 [0, 65535] { R10871 += 1, R10809 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10871 += 1, R10808 += 1, R10809 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10871 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s0 -> s2 [0, 65535] { R10873 += 1, R10810 += 1, R10811 += 1 };
  s0 -> s0 [0, 65535] { R10872 += 1, R10873 += 1 };
  s0 -> s1 [0, 65535] { R10873 += 1, R10811 += 1 };
  s0 -> s3 [87, 87] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s0 -> s4 [87, 87] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s0 -> s1 [89, 65535] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s1 -> s1 [0, 86] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10873 += 1 };
  s1 -> s1 [0, 65535] { R10873 += 1, R10811 += 1 };
  s1 -> s3 [87, 87] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s1 -> s4 [87, 87] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s1 -> s1 [89, 65535] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s2 -> s1 [0, 86] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s2 -> s2 [0, 65535] { R10873 += 1, R10810 += 1, R10811 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10873 += 1, R10811 += 1 };
  s2 -> s3 [87, 87] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s2 -> s4 [87, 87] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s2 -> s1 [89, 65535] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s3 -> s3 [0, 65535] { R10873 += 1, R10811 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10873 += 1 };
  s4 -> s4 [0, 87] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10873 += 1 };
  s4 -> s4 [0, 65535] { R10873 += 1, R10811 += 1 };
  s4 -> s4 [89, 65535] { R10873 += 1, R10811 += 1, R10791 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10873 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10874 += 1, R10875 += 1 };
  s0 -> s1 [0, 65535] { R10875 += 1, R10831 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R10875 += 1, R10830 += 1, R10831 += 1 };
  s1 -> s1 [0, 65535] { R10875 += 1, R10831 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R10875 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10875 += 1, R10831 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10875 += 1, R10830 += 1, R10831 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10875 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R10877 += 1, R10833 += 1 };
  s0 -> s0 [0, 65535] { R10876 += 1, R10877 += 1 };
  s0 -> s2 [0, 65535] { R10877 += 1, R10832 += 1, R10833 += 1 };
  s0 -> s3 [75, 75] { R10877 += 1, R10833 += 1 };
  s0 -> s4 [75, 75] { R10877 += 1, R10833 += 1 };
  s0 -> s5 [87, 87] { R10877 += 1, R10833 += 1 };
  s0 -> s1 [88, 65535] { R10877 += 1, R10833 += 1 };
  s1 -> s1 [0, 74] { R10877 += 1, R10833 += 1 };
  s1 -> s3 [75, 75] { R10877 += 1, R10833 += 1 };
  s1 -> s4 [75, 75] { R10877 += 1, R10833 += 1 };
  s1 -> s5 [87, 87] { R10877 += 1, R10833 += 1 };
  s1 -> s1 [88, 65535] { R10877 += 1, R10833 += 1 };
  s2 -> s1 [0, 74] { R10877 += 1, R10833 += 1 };
  s2 -> s2 [0, 65535] { R10877 += 1, R10832 += 1, R10833 += 1 };
  s2 -> s3 [75, 75] { R10877 += 1, R10833 += 1 };
  s2 -> s4 [75, 75] { R10877 += 1, R10833 += 1 };
  s2 -> s5 [87, 87] { R10877 += 1, R10833 += 1 };
  s2 -> s1 [88, 65535] { R10877 += 1, R10833 += 1 };
  s3 -> s3 [0, 75] { R10877 += 1, R10833 += 1 };
  s3 -> s8 [87, 87] { R10877 += 1, R10833 += 1 };
  s3 -> s3 [88, 65535] { R10877 += 1, R10833 += 1 };
  s5 -> s5 [0, 74] { R10877 += 1, R10833 += 1 };
  s5 -> s5 [0, 65535] { R10877 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R10877 += 1, R10833 += 1 };
  s5 -> s8 [75, 75] { R10877 += 1, R10833 += 1 };
  s5 -> s5 [87, 65535] { R10877 += 1, R10833 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10877 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 75] { R10877 += 1, R10833 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10877 += 1 };
  s8 -> s8 [87, 65535] { R10877 += 1, R10833 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R10879 += 1, R10835 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R10879 += 1, R10834 += 1, R10835 += 1 };
  s0 -> s0 [0, 65535] { R10878 += 1, R10879 += 1 };
  s0 -> s3 [75, 75] { R10879 += 1, R10835 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R10879 += 1, R10835 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R10879 += 1, R10835 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R10879 += 1, R10835 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10879 += 1 };
  s1 -> s3 [75, 75] { R10879 += 1, R10835 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R10879 += 1, R10835 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R10879 += 1, R10835 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R10879 += 1, R10835 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R10879 += 1, R10834 += 1, R10835 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R10879 += 1, R10835 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R10879 += 1, R10835 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R10879 += 1, R10835 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R10879 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10879 += 1, R10835 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10879 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10879 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R10881 += 1, R10837 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R10880 += 1, R10881 += 1 };
  s0 -> s2 [0, 65535] { R10881 += 1, R10836 += 1, R10837 += 1 };
  s0 -> s3 [75, 75] { R10881 += 1, R10837 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R10881 += 1, R10837 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R10881 += 1, R10837 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R10881 += 1, R10837 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10881 += 1 };
  s1 -> s3 [75, 75] { R10881 += 1, R10837 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R10881 += 1, R10837 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R10881 += 1, R10837 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R10881 += 1, R10837 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10881 += 1, R10836 += 1, R10837 += 1 };
  s2 -> s3 [75, 75] { R10881 += 1, R10837 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R10881 += 1, R10837 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R10881 += 1, R10837 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R10881 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10881 += 1, R10837 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R10881 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10881 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10882 += 1, R10883 += 1 };
  s0 -> s2 [0, 65535] { R10883 += 1, R10838 += 1, R10839 += 1 };
  s0 -> s3 [75, 75] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10883 += 1 };
  s1 -> s3 [75, 75] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10883 += 1, R10838 += 1, R10839 += 1 };
  s2 -> s3 [75, 75] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10883 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10883 += 1 };
  s4 -> s4 [0, 65535] { R10883 += 1, R10839 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10883 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [0, 74] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s3 [0, 65535] { R10885 += 1, R10840 += 1, R10841 += 1 };
  s0 -> s0 [0, 65535] { R10884 += 1, R10885 += 1 };
  s0 -> s4 [75, 75] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s5 [75, 75] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s6 [75, 75] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s7 [75, 75] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s1 [76, 65535] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [76, 65535] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s1 [0, 74] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [0, 74] { R10885 += 1, R10841 += 1 };
  s1 -> s5 [75, 75] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s8 [75, 75] { R10885 += 1, R10841 += 1 };
  s1 -> s7 [75, 75] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s12 [75, 75] { R10885 += 1, R10841 += 1 };
  s1 -> s1 [76, 65535] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [76, 65535] { R10885 += 1, R10841 += 1 };
  s2 -> s1 [0, 74] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [0, 74] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s4 [75, 75] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s5 [75, 75] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s6 [75, 75] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s7 [75, 75] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s1 [76, 65535] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [76, 65535] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [0, 74] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [0, 74] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s3 [0, 65535] { R10885 += 1, R10840 += 1, R10841 += 1 };
  s3 -> s4 [75, 75] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s5 [75, 75] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s6 [75, 75] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s7 [75, 75] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [76, 65535] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [76, 65535] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s4 [0, 65535] { R10885 += 1, R10841 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s7 [0, 65535] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s7 -> s8 [0, 65535] { R10885 += 1, R10841 += 1 };
  s7 -> s7 [0, 65535] { R10885 += 1, R10841 += 1, R10247 += 1, R10248 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10885 += 1, R10841 += 1 };
  s8 -> s10 [0, 65535] { R10885 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10885 += 1 };
  s11 -> s11 [0, 74] { R10885 += 1, R10841 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10885 += 1 };
  s11 -> s8 [75, 75] { R10885 += 1, R10841 += 1 };
  s11 -> s12 [75, 75] { R10885 += 1, R10841 += 1 };
  s11 -> s11 [76, 65535] { R10885 += 1, R10841 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10885 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s0 -> s2 [0, 74] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s3 [0, 65535] { R10887 += 1, R10842 += 1, R10843 += 1 };
  s0 -> s0 [0, 65535] { R10886 += 1, R10887 += 1 };
  s0 -> s4 [75, 75] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s5 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s0 -> s6 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s0 -> s7 [75, 75] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [76, 87] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s0 -> s2 [76, 65535] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s8 [88, 88] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s0 -> s1 [89, 65535] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s1 -> s1 [0, 74] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s1 -> s5 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s1 -> s6 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s1 -> s1 [76, 87] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s1 -> s8 [88, 88] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s1 -> s1 [89, 65535] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s2 -> s1 [0, 74] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s2 -> s2 [0, 74] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [75, 75] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s5 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s2 -> s6 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s2 -> s7 [75, 75] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [76, 87] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s2 -> s2 [76, 65535] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s8 [88, 88] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s2 -> s1 [89, 65535] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s3 -> s1 [0, 74] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s3 -> s2 [0, 74] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R10887 += 1, R10842 += 1, R10843 += 1 };
  s3 -> s4 [75, 75] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s5 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s3 -> s6 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s3 -> s7 [75, 75] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s1 [76, 87] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s3 -> s2 [76, 65535] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s8 [88, 88] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s3 -> s1 [89, 65535] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s4 -> s5 [0, 87] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s4 -> s4 [0, 65535] { R10887 += 1, R10843 += 1, R10252 += 1, R10253 += 1 };
  s4 -> s11 [88, 88] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s4 -> s5 [89, 65535] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s5 -> s5 [0, 87] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s5 -> s11 [88, 88] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s5 -> s5 [89, 65535] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s8 -> s8 [0, 74] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10887 += 1 };
  s8 -> s10 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s8 -> s11 [75, 75] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s8 -> s8 [76, 65535] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10887 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10887 += 1, R10843 += 1, R10253 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10887 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10887 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s2 [0, 74] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s3 [0, 65535] { R10889 += 1, R10844 += 1, R10845 += 1 };
  s0 -> s0 [0, 65535] { R10888 += 1, R10889 += 1 };
  s0 -> s4 [75, 75] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s5 [75, 75] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s6 [75, 75] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s7 [75, 75] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s1 [76, 65535] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s2 [76, 65535] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s1 [0, 74] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s2 [0, 74] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s4 [75, 75] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s5 [75, 75] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s6 [75, 75] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s7 [75, 75] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s1 [76, 65535] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s2 [76, 65535] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [0, 74] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [0, 65535] { R10889 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [75, 75] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s7 [75, 75] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [76, 65535] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s1 [0, 74] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s2 [0, 74] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s3 [0, 65535] { R10889 += 1, R10844 += 1, R10845 += 1 };
  s3 -> s4 [75, 75] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s5 [75, 75] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s6 [75, 75] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s7 [75, 75] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s1 [76, 65535] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s2 [76, 65535] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s4 -> s4 [0, 65535] { R10889 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10889 += 1, R10845 += 1, R10678 += 1, R10679 += 1 };
  s5 -> s7 [0, 65535] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10889 += 1, R10845 += 1, R10679 += 1, R10680 += 1 };
  s7 -> s9 [0, 65535] { R10889 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10889 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s0 -> s2 [0, 74] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s0 -> s0 [0, 65535] { R10890 += 1, R10891 += 1 };
  s0 -> s3 [0, 65535] { R10891 += 1, R10846 += 1, R10847 += 1 };
  s0 -> s4 [75, 75] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s0 -> s5 [75, 75] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s0 -> s6 [75, 75] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s0 -> s7 [75, 75] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s0 -> s1 [76, 86] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s0 -> s2 [76, 65535] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s0 -> s1 [89, 65535] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s1 -> s1 [0, 74] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R10891 += 1 };
  s1 -> s4 [75, 75] { R10891 += 1, R10847 += 1 };
  s1 -> s5 [75, 75] { R10891 += 1, R10847 += 1 };
  s1 -> s1 [76, 86] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s1 -> s1 [76, 65535] { R10891 += 1, R10847 += 1 };
  s1 -> s1 [89, 65535] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s2 -> s1 [0, 74] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s2 -> s2 [0, 74] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s2 -> s4 [75, 75] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s2 -> s5 [75, 75] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s2 -> s6 [75, 75] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s2 -> s7 [75, 75] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s2 -> s1 [76, 86] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s2 -> s2 [76, 65535] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s2 -> s1 [89, 65535] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s3 -> s1 [0, 74] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s3 -> s2 [0, 74] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s3 -> s3 [0, 65535] { R10891 += 1, R10846 += 1, R10847 += 1 };
  s3 -> s4 [75, 75] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s3 -> s5 [75, 75] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s3 -> s6 [75, 75] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s3 -> s7 [75, 75] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s3 -> s1 [76, 86] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s3 -> s2 [76, 65535] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s3 -> s1 [89, 65535] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s4 -> s4 [0, 86] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s4 -> s4 [0, 65535] { R10891 += 1, R10847 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R10891 += 1 };
  s4 -> s4 [89, 65535] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10891 += 1 };
  s7 -> s4 [0, 86] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s7 -> s7 [0, 65535] { R10891 += 1, R10847 += 1, R10788 += 1, R10789 += 1 };
  s7 -> s4 [89, 65535] { R10891 += 1, R10847 += 1, R10789 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10891 += 1 };
  accepting s4, s8, s5, s9, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R10891 && R20 - R10891 = -1 && R21 = R10891 && R22 - R10891 = -1 && R23 = R10891 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R10832 = 0 && R10833 = 0 && R10840 = 0 && R10841 = 0 && R10842 = 0 && R10843 = 0 && R10844 = 0 && R10845 = 0 && R10846 = 0 && R10847 = 0 && R10848 = 0 && R10849 = R10891 && R10850 = 0 && R10851 = R10891 && R10852 = 0 && R10853 = R10891 && R10854 = 0 && R10855 = R10891 && R10856 = 0 && R10857 = R10891 && R10858 = 0 && R10859 = R10891 && R10860 = 0 && R10861 = R10891 && R10862 = 0 && R10863 = R10891 && R10864 = 0 && R10865 = R10891 && R10866 = 0 && R10867 = R10891 && R10868 = 0 && R10869 = R10891 && R10870 = 0 && R10871 = R10891 && R10872 = 0 && R10873 = R10891 && R10874 = 0 && R10875 = R10891 && R10876 = 0 && R10877 = R10891 && R10878 = 0 && R10879 = R10891 && R10880 = 0 && R10881 = R10891 && R10882 = 0 && R10883 = R10891 && R10884 = 0 && R10885 = R10891 && R10886 = 0 && R10887 = R10891 && R10888 = 0 && R10889 = R10891 && R10890 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && 0 < R10891 && (R1 != 0 || R17 = 0 || (R10792 = 0 && R10793 = 0)) && (R1 != 0 || R17 = 0 || (R10794 = 0 && R10795 = 0)) && (R1 != 0 || R17 = 0 || (R10796 = 0 && R10797 = 0)) && (R1 != 0 || R17 = 0 || (R10798 = 0 && R10799 = 0)) && (R1 != 0 || R17 = 0 || (R10800 = 0 && R10801 = 0)) && (R1 != 0 || R17 = 0 || (R10802 = 0 && R10803 = 0)) && (R1 != 0 || R17 = 0 || (R10804 = 0 && R10805 = 0)) && (R1 != 0 || R17 = 0 || (R10806 = 0 && R10807 = 0)) && (R1 != 0 || R17 = 0 || (R10808 = 0 && R10809 = 0)) && (R1 != 0 || R17 = 0 || (R10810 = 0 && R10811 = 0)) && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R10255 + R10253 < 1))) && (R10792 != 0 || R1 = R10793 || R1 < 1) && (R10794 != 0 || R1 = R10795 || R1 < 1) && (R10796 != 0 || R1 = R10797 || R1 < 1) && (R10798 != 0 || R1 = R10799 || R1 < 1) && (R10800 != 0 || R1 = R10801 || R1 < 1) && (R10802 != 0 || R1 = R10803 || R1 < 1) && (R10804 != 0 || R1 = R10805 || R1 < 1) && (R10806 != 0 || R1 = R10807 || R1 < 1) && (R10808 != 0 || R1 = R10809 || R1 < 1) && (R10810 != 0 || R1 = R10811 || R1 < 1) && (R18 = 0 || (R10830 = 0 && R10831 = 0)) && (R18 = 0 || (R10834 = 0 && R10835 = 0)) && (R18 = 0 || (R10836 = 0 && R10837 = 0)) && (R18 = 0 || (R10838 = 0 && R10839 = 0)) && (R19 = 0 || (R10812 = 0 && R10813 = 0)) && (R19 = 0 || (R10814 = 0 && R10815 = 0)) && (R19 = 0 || (R10816 = 0 && R10817 = 0)) && (R19 = 0 || (R10818 = 0 && R10819 = 0)) && (R19 = 0 || (R10820 = 0 && R10821 = 0)) && (R19 = 0 || (R10822 = 0 && R10823 = 0)) && (R19 = 0 || (R10824 = 0 && R10825 = 0)) && (R19 = 0 || (R10826 = 0 && R10827 = 0)) && (R19 = 0 || (R10828 = 0 && R10829 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R10683 + R10680 = 0 || (R56 + R10681 + R10678 = 0 && R57 + R10682 + R10679 = 0)) && (R58 + R10683 + R10680 = 0 || (R62 + R10790 + R10788 = 0 && R63 + R10791 + R10789 = 0)) && (R10792 = 0 || R1 < 1) && (R10794 = 0 || R1 < 1) && (R10796 = 0 || R1 < 1) && (R10798 = 0 || R1 < 1) && (R10800 = 0 || R1 < 1) && (R10802 = 0 || R1 < 1) && (R10804 = 0 || R1 < 1) && (R10806 = 0 || R1 < 1) && (R10808 = 0 || R1 < 1) && (R10810 = 0 || R1 < 1);
// End of Parikh automata intersection problem
