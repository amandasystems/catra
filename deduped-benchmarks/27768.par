// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10246, R10247, R10248, R10249, R10250, R10251, R10252, R10253, R10254, R10255, R10256, R10257, R10258, R10259, R10260, R10261, R10470, R10471, R10472, R10473, R10474, R10475, R10476, R10477, R10478, R10479, R10480, R10481, R10482, R10483, R10484, R10485, R10486, R10487, R10488, R10489, R10490, R10491, R10492, R10493, R10494, R10495, R10496, R10497, R10498, R10499, R10500, R10501, R10502, R10503, R10504, R10505, R10506, R10507, R10508, R10509, R10510, R10511, R10512, R10513, R10514, R10515, R10516, R10517, R10518, R10519, R10520, R10521, R10522, R10523, R10524, R10525, R10526, R10527, R10528, R10529, R10530, R10531, R10532, R10533, R10534, R10535, R10536, R10537, R10538, R10539, R10540, R10541, R10542, R10543, R10544, R10545, R10546, R10547, R10548, R10549, R10550, R10551, R10552, R10553, R10554, R10555, R10556, R10557, R10558, R10559, R10560, R10561, R10562, R10563, R10564, R10565, R10566, R10567, R10568, R10569, R10570, R10571, R10572, R10573, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10495 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R10494 += 1, R10495 += 1 };
  s1 -> s1 [0, 65535] { R10495 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R10497 += 1 };
  s0 -> s0 [0, 65535] { R10496 += 1, R10497 += 1 };
  s0 -> s2 [75, 75] { R10497 += 1 };
  s0 -> s3 [75, 75] { R10497 += 1 };
  s0 -> s1 [88, 65535] { R10497 += 1 };
  s1 -> s1 [0, 74] { R10497 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10497 += 1 };
  s1 -> s3 [75, 75] { R10497 += 1 };
  s1 -> s1 [88, 65535] { R10497 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 75] { R10497 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R10497 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R10499 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R10498 += 1, R10499 += 1 };
  s0 -> s2 [75, 75] { R10499 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R10499 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R10499 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R10499 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10499 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R10499 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R10499 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R10499 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R10501 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10500 += 1, R10501 += 1 };
  s0 -> s2 [75, 75] { R10501 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R10501 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R10501 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R10501 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10501 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R10501 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R10501 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R10501 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R10503 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10502 += 1, R10503 += 1 };
  s0 -> s2 [75, 75] { R10503 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R10503 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R10503 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R10503 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10503 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R10503 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R10503 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10503 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R10505 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10504 += 1, R10505 += 1 };
  s0 -> s2 [75, 75] { R10505 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R10505 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R10505 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R10505 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10505 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R10505 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R10505 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10505 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R10507 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R10506 += 1, R10507 += 1 };
  s0 -> s2 [75, 75] { R10507 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R10507 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R10507 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R10507 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10507 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R10507 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R10507 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R10507 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R10509 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10508 += 1, R10509 += 1 };
  s0 -> s2 [75, 75] { R10509 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R10509 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R10509 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R10509 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10509 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R10509 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R10509 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R10509 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R10511 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R10510 += 1, R10511 += 1 };
  s0 -> s2 [75, 75] { R10511 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R10511 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R10511 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R10511 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R10511 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R10511 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R10511 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R10511 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R10531 += 1 };
  s0 -> s0 [0, 65535] { R10530 += 1, R10531 += 1 };
  s0 -> s2 [75, 75] { R10531 += 1 };
  s0 -> s1 [76, 65535] { R10531 += 1 };
  s1 -> s1 [0, 74] { R10531 += 1 };
  s1 -> s2 [75, 75] { R10531 += 1 };
  s1 -> s1 [76, 65535] { R10531 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10531 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10532 += 1, R10533 += 1 };
  s0 -> s1 [0, 65535] { R10533 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10533 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R10535 += 1 };
  s0 -> s0 [0, 65535] { R10534 += 1, R10535 += 1 };
  s0 -> s2 [0, 65535] { R10535 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R10535 += 1 };
  s0 -> s1 [76, 65535] { R10535 += 1 };
  s1 -> s1 [0, 74] { R10535 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R10535 += 1 };
  s1 -> s1 [76, 65535] { R10535 += 1 };
  s2 -> s1 [0, 74] { R10535 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10535 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R10535 += 1 };
  s2 -> s1 [76, 65535] { R10535 += 1 };
  s3 -> s3 [0, 65535] { R10535 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R10537 += 1, R10475 += 1 };
  s0 -> s0 [0, 65535] { R10536 += 1, R10537 += 1 };
  s0 -> s2 [0, 65535] { R10537 += 1, R10474 += 1, R10475 += 1 };
  s0 -> s1 [76, 65535] { R10537 += 1, R10475 += 1 };
  s1 -> s1 [0, 74] { R10537 += 1, R10475 += 1 };
  s1 -> s1 [0, 65535] { R10537 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R10537 += 1, R10475 += 1 };
  s2 -> s1 [0, 74] { R10537 += 1, R10475 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10537 += 1, R10474 += 1, R10475 += 1 };
  s2 -> s1 [76, 65535] { R10537 += 1, R10475 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10539 += 1, R10477 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R10538 += 1, R10539 += 1 };
  s0 -> s2 [0, 65535] { R10539 += 1, R10476 += 1, R10477 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10539 += 1 };
  s1 -> s1 [0, 65535] { R10539 += 1, R10477 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10539 += 1, R10477 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R10539 += 1, R10476 += 1, R10477 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10539 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R10541 += 1, R10479 += 1 };
  s0 -> s0 [0, 65535] { R10540 += 1, R10541 += 1 };
  s0 -> s2 [0, 65535] { R10541 += 1, R10478 += 1, R10479 += 1 };
  s0 -> s1 [87, 65535] { R10541 += 1, R10479 += 1 };
  s1 -> s1 [0, 75] { R10541 += 1, R10479 += 1 };
  s1 -> s1 [0, 65535] { R10541 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R10541 += 1, R10479 += 1 };
  s2 -> s1 [0, 75] { R10541 += 1, R10479 += 1 };
  s2 -> s2 [0, 65535] { R10541 += 1, R10478 += 1, R10479 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R10541 += 1, R10479 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10543 += 1, R10481 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R10542 += 1, R10543 += 1 };
  s0 -> s2 [0, 65535] { R10543 += 1, R10480 += 1, R10481 += 1 };
  s1 -> s1 [0, 65535] { R10543 += 1, R10481 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R10543 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10543 += 1, R10481 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10543 += 1, R10480 += 1, R10481 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10543 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R10545 += 1, R10483 += 1 };
  s0 -> s0 [0, 65535] { R10544 += 1, R10545 += 1 };
  s0 -> s2 [0, 65535] { R10545 += 1, R10483 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R10545 += 1, R10482 += 1, R10483 += 1 };
  s0 -> s1 [88, 65535] { R10545 += 1, R10483 += 1 };
  s1 -> s1 [0, 86] { R10545 += 1, R10483 += 1 };
  s1 -> s1 [0, 65535] { R10545 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R10545 += 1, R10483 += 1 };
  s2 -> s1 [0, 86] { R10545 += 1, R10483 += 1 };
  s2 -> s5 [0, 65535] { R10545 += 1 };
  s2 -> s2 [0, 65535] { R10545 += 1, R10483 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R10545 += 1, R10483 += 1 };
  s3 -> s1 [0, 86] { R10545 += 1, R10483 += 1 };
  s3 -> s2 [0, 65535] { R10545 += 1, R10483 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R10545 += 1, R10482 += 1, R10483 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R10545 += 1, R10483 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10545 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R10547 += 1, R10485 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R10547 += 1, R10484 += 1, R10485 += 1 };
  s0 -> s0 [0, 65535] { R10546 += 1, R10547 += 1 };
  s0 -> s3 [0, 65535] { R10547 += 1, R10485 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [88, 65535] { R10547 += 1, R10485 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R10547 += 1, R10485 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R10547 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10547 += 1, R10485 += 1 };
  s1 -> s1 [88, 65535] { R10547 += 1, R10485 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R10547 += 1, R10485 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R10547 += 1, R10484 += 1, R10485 += 1 };
  s2 -> s3 [0, 65535] { R10547 += 1, R10485 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R10547 += 1, R10485 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R10547 += 1, R10485 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R10547 += 1 };
  s3 -> s3 [0, 65535] { R10547 += 1, R10485 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R10547 += 1, R10485 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R10547 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10549 += 1, R10487 += 1 };
  s0 -> s0 [0, 65535] { R10548 += 1, R10549 += 1 };
  s0 -> s2 [0, 65535] { R10549 += 1, R10486 += 1, R10487 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10549 += 1 };
  s1 -> s1 [0, 65535] { R10549 += 1, R10487 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10549 += 1, R10487 += 1 };
  s2 -> s2 [0, 65535] { R10549 += 1, R10486 += 1, R10487 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10549 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R10550 += 1, R10551 += 1 };
  s0 -> s1 [0, 65535] { R10551 += 1, R10488 += 1, R10489 += 1 };
  s0 -> s2 [0, 65535] { R10551 += 1, R10489 += 1, R10255 += 1 };
  s0 -> s3 [0, 65535] { R10551 += 1, R10489 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10551 += 1, R10488 += 1, R10489 += 1 };
  s1 -> s2 [0, 65535] { R10551 += 1, R10489 += 1, R10255 += 1 };
  s1 -> s3 [0, 65535] { R10551 += 1, R10489 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10551 += 1 };
  s2 -> s2 [0, 65535] { R10551 += 1, R10489 += 1, R10255 += 1 };
  s2 -> s3 [0, 65535] { R10551 += 1, R10489 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10551 += 1 };
  s3 -> s3 [0, 65535] { R10551 += 1, R10489 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10551 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R10552 += 1, R10553 += 1 };
  s0 -> s1 [0, 65535] { R10553 += 1, R10491 += 1, R10260 += 1, R10261 += 1 };
  s0 -> s2 [0, 65535] { R10553 += 1, R10490 += 1, R10491 += 1 };
  s0 -> s3 [0, 65535] { R10553 += 1, R10491 += 1, R10259 += 1, R10260 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10553 += 1 };
  s1 -> s1 [0, 65535] { R10553 += 1, R10491 += 1, R10260 += 1, R10261 += 1 };
  s1 -> s6 [0, 65535] { R10553 += 1, R10491 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10553 += 1, R10491 += 1, R10260 += 1, R10261 += 1 };
  s2 -> s2 [0, 65535] { R10553 += 1, R10490 += 1, R10491 += 1 };
  s2 -> s3 [0, 65535] { R10553 += 1, R10491 += 1, R10259 += 1, R10260 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10553 += 1 };
  s3 -> s1 [0, 65535] { R10553 += 1, R10491 += 1, R10260 += 1, R10261 += 1 };
  s3 -> s3 [0, 65535] { R10553 += 1, R10491 += 1, R10259 += 1, R10260 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10553 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10553 += 1 };
  s6 -> s6 [0, 65535] { R10553 += 1, R10491 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 87] { R10555 += 1, R10493 += 1, R10473 += 1 };
  s0 -> s2 [0, 65535] { R10555 += 1, R10492 += 1, R10493 += 1 };
  s0 -> s0 [0, 65535] { R10554 += 1, R10555 += 1 };
  s0 -> s1 [0, 65535] { R10555 += 1, R10493 += 1 };
  s0 -> s1 [89, 65535] { R10555 += 1, R10493 += 1, R10473 += 1 };
  s1 -> s1 [0, 87] { R10555 += 1, R10493 += 1, R10473 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10555 += 1, R10493 += 1 };
  s1 -> s4 [0, 65535] { R10555 += 1 };
  s1 -> s1 [89, 65535] { R10555 += 1, R10493 += 1, R10473 += 1 };
  s2 -> s1 [0, 87] { R10555 += 1, R10493 += 1, R10473 += 1 };
  s2 -> s2 [0, 65535] { R10555 += 1, R10492 += 1, R10493 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10555 += 1, R10493 += 1 };
  s2 -> s1 [89, 65535] { R10555 += 1, R10493 += 1, R10473 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10555 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10557 += 1, R10513 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R10556 += 1, R10557 += 1 };
  s0 -> s2 [0, 65535] { R10557 += 1, R10512 += 1, R10513 += 1 };
  s1 -> s1 [0, 65535] { R10557 += 1, R10513 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10557 += 1 };
  s2 -> s1 [0, 65535] { R10557 += 1, R10513 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10557 += 1, R10512 += 1, R10513 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10557 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R10559 += 1, R10515 += 1 };
  s0 -> s0 [0, 65535] { R10558 += 1, R10559 += 1 };
  s0 -> s2 [0, 65535] { R10559 += 1, R10514 += 1, R10515 += 1 };
  s0 -> s3 [75, 75] { R10559 += 1, R10515 += 1 };
  s0 -> s4 [75, 75] { R10559 += 1, R10515 += 1 };
  s0 -> s5 [87, 87] { R10559 += 1, R10515 += 1 };
  s0 -> s1 [88, 65535] { R10559 += 1, R10515 += 1 };
  s1 -> s1 [0, 74] { R10559 += 1, R10515 += 1 };
  s1 -> s3 [75, 75] { R10559 += 1, R10515 += 1 };
  s1 -> s4 [75, 75] { R10559 += 1, R10515 += 1 };
  s1 -> s5 [87, 87] { R10559 += 1, R10515 += 1 };
  s1 -> s1 [88, 65535] { R10559 += 1, R10515 += 1 };
  s2 -> s1 [0, 74] { R10559 += 1, R10515 += 1 };
  s2 -> s2 [0, 65535] { R10559 += 1, R10514 += 1, R10515 += 1 };
  s2 -> s3 [75, 75] { R10559 += 1, R10515 += 1 };
  s2 -> s4 [75, 75] { R10559 += 1, R10515 += 1 };
  s2 -> s5 [87, 87] { R10559 += 1, R10515 += 1 };
  s2 -> s1 [88, 65535] { R10559 += 1, R10515 += 1 };
  s3 -> s3 [0, 75] { R10559 += 1, R10515 += 1 };
  s3 -> s7 [87, 87] { R10559 += 1, R10515 += 1 };
  s3 -> s3 [88, 65535] { R10559 += 1, R10515 += 1 };
  s5 -> s5 [0, 74] { R10559 += 1, R10515 += 1 };
  s5 -> s5 [0, 65535] { R10559 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R10559 += 1, R10515 += 1 };
  s5 -> s8 [75, 75] { R10559 += 1, R10515 += 1 };
  s5 -> s5 [87, 65535] { R10559 += 1, R10515 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 75] { R10559 += 1, R10515 += 1 };
  s7 -> s7 [0, 65535] { R10559 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R10559 += 1, R10515 += 1 };
  s8 -> s8 [0, 65535] { R10559 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R10561 += 1, R10517 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10560 += 1, R10561 += 1 };
  s0 -> s2 [0, 65535] { R10561 += 1, R10516 += 1, R10517 += 1 };
  s0 -> s3 [75, 75] { R10561 += 1, R10517 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R10561 += 1, R10517 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R10561 += 1, R10517 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R10561 += 1, R10517 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R10561 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R10561 += 1, R10517 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R10561 += 1, R10517 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R10561 += 1, R10517 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R10561 += 1, R10517 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10561 += 1, R10516 += 1, R10517 += 1 };
  s2 -> s3 [75, 75] { R10561 += 1, R10517 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R10561 += 1, R10517 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R10561 += 1, R10517 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R10561 += 1, R10517 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10561 += 1 };
  s4 -> s4 [0, 65535] { R10561 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10561 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R10563 += 1, R10519 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R10563 += 1, R10518 += 1, R10519 += 1 };
  s0 -> s0 [0, 65535] { R10562 += 1, R10563 += 1 };
  s0 -> s3 [75, 75] { R10563 += 1, R10519 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R10563 += 1, R10519 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R10563 += 1, R10519 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R10563 += 1, R10519 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10563 += 1 };
  s1 -> s3 [75, 75] { R10563 += 1, R10519 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R10563 += 1, R10519 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R10563 += 1, R10519 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R10563 += 1, R10519 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10563 += 1, R10518 += 1, R10519 += 1 };
  s2 -> s3 [75, 75] { R10563 += 1, R10519 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R10563 += 1, R10519 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R10563 += 1, R10519 += 1, R68 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10563 += 1 };
  s4 -> s5 [0, 65535] { R10563 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10563 += 1, R10519 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R10563 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10564 += 1, R10565 += 1 };
  s0 -> s2 [0, 65535] { R10565 += 1, R10520 += 1, R10521 += 1 };
  s0 -> s3 [75, 75] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10565 += 1 };
  s1 -> s3 [75, 75] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10565 += 1, R10520 += 1, R10521 += 1 };
  s2 -> s3 [75, 75] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10565 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10565 += 1 };
  s4 -> s4 [0, 65535] { R10565 += 1, R10521 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10565 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [0, 74] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s3 [0, 65535] { R10567 += 1, R10522 += 1, R10523 += 1 };
  s0 -> s0 [0, 65535] { R10566 += 1, R10567 += 1 };
  s0 -> s4 [75, 75] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s5 [75, 75] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s6 [75, 75] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s7 [75, 75] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s1 [76, 65535] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [76, 65535] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [0, 74] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [0, 74] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s4 [75, 75] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s5 [75, 75] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s6 [75, 75] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s7 [75, 75] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [76, 65535] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [76, 65535] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s11 [0, 74] { R10567 += 1, R10523 += 1 };
  s2 -> s2 [0, 74] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s12 [75, 75] { R10567 += 1, R10523 += 1 };
  s2 -> s4 [75, 75] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s8 [75, 75] { R10567 += 1, R10523 += 1 };
  s2 -> s7 [75, 75] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s11 [76, 65535] { R10567 += 1, R10523 += 1 };
  s2 -> s2 [76, 65535] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [0, 74] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [0, 74] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s3 [0, 65535] { R10567 += 1, R10522 += 1, R10523 += 1 };
  s3 -> s4 [75, 75] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s5 [75, 75] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s6 [75, 75] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s7 [75, 75] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [76, 65535] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [76, 65535] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s5 -> s5 [0, 65535] { R10567 += 1, R10523 += 1, R10246 += 1, R10247 += 1 };
  s5 -> s7 [0, 65535] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s7 -> s8 [0, 65535] { R10567 += 1, R10523 += 1 };
  s7 -> s7 [0, 65535] { R10567 += 1, R10523 += 1, R10247 += 1, R10248 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10567 += 1, R10523 += 1 };
  s8 -> s10 [0, 65535] { R10567 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10567 += 1 };
  s11 -> s11 [0, 74] { R10567 += 1, R10523 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10567 += 1 };
  s11 -> s12 [75, 75] { R10567 += 1, R10523 += 1 };
  s11 -> s8 [75, 75] { R10567 += 1, R10523 += 1 };
  s11 -> s11 [76, 65535] { R10567 += 1, R10523 += 1 };
  s12 -> s12 [0, 65535] { R10567 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s0 -> s2 [0, 74] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s0 [0, 65535] { R10568 += 1, R10569 += 1 };
  s0 -> s3 [0, 65535] { R10569 += 1, R10524 += 1, R10525 += 1 };
  s0 -> s4 [75, 75] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s5 [75, 75] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s6 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s0 -> s7 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s0 -> s1 [76, 87] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s0 -> s2 [76, 65535] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s8 [88, 88] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s0 -> s1 [89, 65535] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s1 -> s1 [0, 74] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s1 -> s6 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s1 -> s7 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s1 -> s1 [76, 87] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s1 -> s8 [88, 88] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s1 -> s1 [89, 65535] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s2 -> s1 [0, 74] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s2 -> s2 [0, 74] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [75, 75] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s5 [75, 75] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s6 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s2 -> s7 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s2 -> s1 [76, 87] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s2 -> s2 [76, 65535] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s8 [88, 88] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s2 -> s1 [89, 65535] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s3 -> s1 [0, 74] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s3 -> s2 [0, 74] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R10569 += 1, R10524 += 1, R10525 += 1 };
  s3 -> s4 [75, 75] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s5 [75, 75] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s6 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s3 -> s7 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s3 -> s1 [76, 87] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s3 -> s2 [76, 65535] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s8 [88, 88] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s3 -> s1 [89, 65535] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s5 -> s7 [0, 87] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s5 -> s5 [0, 65535] { R10569 += 1, R10525 += 1, R10252 += 1, R10253 += 1 };
  s5 -> s10 [88, 88] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s5 -> s7 [89, 65535] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s7 -> s7 [0, 87] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s7 -> s10 [88, 88] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s7 -> s7 [89, 65535] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s8 -> s8 [0, 74] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10569 += 1 };
  s8 -> s10 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s8 -> s11 [75, 75] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s8 -> s8 [76, 65535] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10569 += 1, R10525 += 1, R10253 += 1 };
  s10 -> s12 [0, 65535] { R10569 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10569 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10569 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s2 [0, 65535] { R10571 += 1, R10526 += 1, R10527 += 1 };
  s0 -> s0 [0, 65535] { R10570 += 1, R10571 += 1 };
  s0 -> s3 [75, 75] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s4 [75, 75] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s1 [76, 65535] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [0, 74] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10571 += 1 };
  s1 -> s3 [75, 75] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s4 [75, 75] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [76, 65535] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s1 [0, 74] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s2 [0, 65535] { R10571 += 1, R10526 += 1, R10527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s4 [75, 75] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s1 [76, 65535] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10571 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10571 += 1 };
  s4 -> s4 [0, 65535] { R10571 += 1, R10527 += 1, R10256 += 1, R10257 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10571 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s0 -> s2 [0, 74] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s0 -> s3 [0, 65535] { R10573 += 1, R10528 += 1, R10529 += 1 };
  s0 -> s0 [0, 65535] { R10572 += 1, R10573 += 1 };
  s0 -> s4 [75, 75] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s0 -> s5 [75, 75] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s0 -> s6 [75, 75] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s0 -> s7 [75, 75] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s0 -> s2 [76, 86] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s0 -> s1 [76, 65535] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s0 -> s8 [87, 87] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s0 -> s2 [89, 65535] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s1 -> s1 [0, 74] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s1 -> s2 [0, 74] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s1 -> s4 [75, 75] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s1 -> s5 [75, 75] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s1 -> s6 [75, 75] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s1 -> s7 [75, 75] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s1 -> s2 [76, 86] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s1 -> s1 [76, 65535] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s1 -> s8 [87, 87] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s1 -> s2 [89, 65535] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s2 -> s2 [0, 74] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s2 -> s5 [75, 75] { R10573 += 1, R10529 += 1 };
  s2 -> s7 [75, 75] { R10573 += 1, R10529 += 1 };
  s2 -> s2 [76, 86] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s2 -> s2 [76, 65535] { R10573 += 1, R10529 += 1 };
  s2 -> s8 [87, 87] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s2 -> s2 [89, 65535] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s3 -> s1 [0, 74] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s3 -> s2 [0, 74] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s3 -> s3 [0, 65535] { R10573 += 1, R10528 += 1, R10529 += 1 };
  s3 -> s4 [75, 75] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s3 -> s5 [75, 75] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s3 -> s6 [75, 75] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s3 -> s7 [75, 75] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s3 -> s2 [76, 86] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s3 -> s1 [76, 65535] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s3 -> s8 [87, 87] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s3 -> s2 [89, 65535] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s4 -> s5 [0, 86] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s4 -> s4 [0, 65535] { R10573 += 1, R10529 += 1, R10470 += 1, R10471 += 1 };
  s4 -> s11 [87, 87] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s4 -> s5 [89, 65535] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s5 -> s5 [0, 86] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s5 -> s5 [0, 65535] { R10573 += 1, R10529 += 1 };
  s5 -> s11 [87, 87] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s5 -> s5 [89, 65535] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s8 -> s8 [0, 74] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10573 += 1 };
  s8 -> s10 [75, 75] { R10573 += 1, R10529 += 1 };
  s8 -> s11 [75, 75] { R10573 += 1, R10529 += 1 };
  s8 -> s8 [76, 87] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s8 -> s8 [76, 65535] { R10573 += 1, R10529 += 1 };
  s8 -> s8 [89, 65535] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10573 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 87] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10573 += 1 };
  s11 -> s11 [0, 65535] { R10573 += 1, R10529 += 1 };
  s11 -> s11 [89, 65535] { R10573 += 1, R10529 += 1, R10471 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10573 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R10573 && R20 - R10573 = -1 && R21 = R10573 && R22 - R10573 = -1 && R23 = R10573 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R10514 = 0 && R10515 = 0 && R10522 = 0 && R10523 = 0 && R10524 = 0 && R10525 = 0 && R10528 = 0 && R10529 = 0 && R10530 = 0 && R10531 = R10573 && R10532 = 0 && R10533 = R10573 && R10534 = 0 && R10535 = R10573 && R10536 = 0 && R10537 = R10573 && R10538 = 0 && R10539 = R10573 && R10540 = 0 && R10541 = R10573 && R10542 = 0 && R10543 = R10573 && R10544 = 0 && R10545 = R10573 && R10546 = 0 && R10547 = R10573 && R10548 = 0 && R10549 = R10573 && R10550 = 0 && R10551 = R10573 && R10552 = 0 && R10553 = R10573 && R10554 = 0 && R10555 = R10573 && R10556 = 0 && R10557 = R10573 && R10558 = 0 && R10559 = R10573 && R10560 = 0 && R10561 = R10573 && R10562 = 0 && R10563 = R10573 && R10564 = 0 && R10565 = R10573 && R10566 = 0 && R10567 = R10573 && R10568 = 0 && R10569 = R10573 && R10570 = 0 && R10571 = R10573 && R10572 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && 0 < R10573 && (R1 != 0 || R17 = 0 || (R10474 = 0 && R10475 = 0)) && (R1 != 0 || R17 = 0 || (R10476 = 0 && R10477 = 0)) && (R1 != 0 || R17 = 0 || (R10478 = 0 && R10479 = 0)) && (R1 != 0 || R17 = 0 || (R10480 = 0 && R10481 = 0)) && (R1 != 0 || R17 = 0 || (R10482 = 0 && R10483 = 0)) && (R1 != 0 || R17 = 0 || (R10484 = 0 && R10485 = 0)) && (R1 != 0 || R17 = 0 || (R10486 = 0 && R10487 = 0)) && (R1 != 0 || R17 = 0 || (R10488 = 0 && R10489 = 0)) && (R1 != 0 || R17 = 0 || (R10490 = 0 && R10491 = 0)) && (R1 != 0 || R17 = 0 || (R10492 = 0 && R10493 = 0)) && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R10255 + R10253 < 1))) && (R10474 != 0 || R1 = R10475 || R1 < 1) && (R10476 != 0 || R1 = R10477 || R1 < 1) && (R10478 != 0 || R1 = R10479 || R1 < 1) && (R10480 != 0 || R1 = R10481 || R1 < 1) && (R10482 != 0 || R1 = R10483 || R1 < 1) && (R10484 != 0 || R1 = R10485 || R1 < 1) && (R10486 != 0 || R1 = R10487 || R1 < 1) && (R10488 != 0 || R1 = R10489 || R1 < 1) && (R10490 != 0 || R1 = R10491 || R1 < 1) && (R10492 != 0 || R1 = R10493 || R1 < 1) && (R18 = 0 || (R10512 = 0 && R10513 = 0)) && (R18 = 0 || (R10516 = 0 && R10517 = 0)) && (R18 = 0 || (R10518 = 0 && R10519 = 0)) && (R18 = 0 || (R10520 = 0 && R10521 = 0)) && (R18 = 0 || (R10526 = 0 && R10527 = 0)) && (R19 = 0 || (R10494 = 0 && R10495 = 0)) && (R19 = 0 || (R10496 = 0 && R10497 = 0)) && (R19 = 0 || (R10498 = 0 && R10499 = 0)) && (R19 = 0 || (R10500 = 0 && R10501 = 0)) && (R19 = 0 || (R10502 = 0 && R10503 = 0)) && (R19 = 0 || (R10504 = 0 && R10505 = 0)) && (R19 = 0 || (R10506 = 0 && R10507 = 0)) && (R19 = 0 || (R10508 = 0 && R10509 = 0)) && (R19 = 0 || (R10510 = 0 && R10511 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R10261 + R10258 = 0 || (R56 + R10259 + R10256 = 0 && R57 + R10260 + R10257 = 0)) && (R58 + R10261 + R10258 = 0 || (R62 + R10472 + R10470 = 0 && R63 + R10473 + R10471 = 0)) && (R10474 = 0 || R1 < 1) && (R10476 = 0 || R1 < 1) && (R10478 = 0 || R1 < 1) && (R10480 = 0 || R1 < 1) && (R10482 = 0 || R1 < 1) && (R10484 = 0 || R1 < 1) && (R10486 = 0 || R1 < 1) && (R10488 = 0 || R1 < 1) && (R10490 = 0 || R1 < 1) && (R10492 = 0 || R1 < 1);
// End of Parikh automata intersection problem
