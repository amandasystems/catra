// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R5160, R5161, R5162, R5163, R5164, R5165, R5166, R5167, R5168, R5169, R52, R53, R56, R57, R58, R6014, R6015, R6016, R6017, R6018, R6019, R62, R6228, R6229, R6230, R6231, R6232, R6233, R6234, R6235, R6236, R6237, R6238, R6239, R6240, R6241, R6242, R6243, R6244, R6245, R6246, R6247, R6248, R6249, R6250, R6251, R6252, R6253, R6254, R6255, R6256, R6257, R6258, R6259, R6260, R6261, R6262, R6263, R6264, R6265, R6266, R6267, R6268, R6269, R6270, R6271, R6272, R6273, R6274, R6275, R6276, R6277, R6278, R6279, R6280, R6281, R6282, R6283, R6284, R6285, R6286, R6287, R6288, R6289, R6290, R6291, R6292, R6293, R6294, R6295, R6296, R6297, R6298, R6299, R63, R6300, R6301, R6302, R6303, R6304, R6305, R6306, R6307, R6308, R6309, R6310, R6311, R6312, R6313, R6314, R6315, R6316, R6317, R6318, R6319, R6320, R6321, R6322, R6323, R6324, R6325, R6326, R6327, R6328, R6329, R6330, R6331, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6253 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R6252 += 1, R6253 += 1 };
  s1 -> s1 [0, 65535] { R6253 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R6255 += 1 };
  s0 -> s0 [0, 65535] { R6254 += 1, R6255 += 1 };
  s0 -> s2 [75, 75] { R6255 += 1 };
  s0 -> s3 [75, 75] { R6255 += 1 };
  s0 -> s1 [88, 65535] { R6255 += 1 };
  s1 -> s1 [0, 74] { R6255 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6255 += 1 };
  s1 -> s3 [75, 75] { R6255 += 1 };
  s1 -> s1 [88, 65535] { R6255 += 1 };
  s2 -> s2 [0, 75] { R6255 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R6255 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R6257 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R6256 += 1, R6257 += 1 };
  s0 -> s2 [75, 75] { R6257 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R6257 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R6257 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R6257 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6257 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R6257 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R6257 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R6257 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R6259 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R6258 += 1, R6259 += 1 };
  s0 -> s2 [75, 75] { R6259 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R6259 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R6259 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R6259 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6259 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R6259 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R6259 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R6259 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R6261 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R6260 += 1, R6261 += 1 };
  s0 -> s2 [75, 75] { R6261 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R6261 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R6261 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R6261 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6261 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R6261 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R6261 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R6261 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R6263 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6262 += 1, R6263 += 1 };
  s0 -> s2 [75, 75] { R6263 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R6263 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R6263 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R6263 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6263 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R6263 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R6263 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6263 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R6265 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R6264 += 1, R6265 += 1 };
  s0 -> s2 [75, 75] { R6265 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R6265 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R6265 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R6265 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6265 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R6265 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R6265 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R6265 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R6267 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R6266 += 1, R6267 += 1 };
  s0 -> s2 [75, 75] { R6267 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R6267 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R6267 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R6267 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6267 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R6267 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R6267 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6267 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R6269 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R6268 += 1, R6269 += 1 };
  s0 -> s2 [75, 75] { R6269 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R6269 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R6269 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R6269 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6269 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R6269 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R6269 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6269 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R6289 += 1 };
  s0 -> s0 [0, 65535] { R6288 += 1, R6289 += 1 };
  s0 -> s2 [75, 75] { R6289 += 1 };
  s0 -> s1 [76, 65535] { R6289 += 1 };
  s1 -> s1 [0, 74] { R6289 += 1 };
  s1 -> s2 [75, 75] { R6289 += 1 };
  s1 -> s1 [76, 65535] { R6289 += 1 };
  s2 -> s2 [0, 65535] { R6289 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6291 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6290 += 1, R6291 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6291 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R6293 += 1 };
  s0 -> s2 [0, 65535] { R6293 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R6292 += 1, R6293 += 1 };
  s0 -> s3 [75, 75] { R6293 += 1 };
  s0 -> s1 [76, 65535] { R6293 += 1 };
  s1 -> s1 [0, 74] { R6293 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R6293 += 1 };
  s1 -> s1 [76, 65535] { R6293 += 1 };
  s2 -> s1 [0, 74] { R6293 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6293 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R6293 += 1 };
  s2 -> s1 [76, 65535] { R6293 += 1 };
  s3 -> s3 [0, 65535] { R6293 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R6295 += 1, R6233 += 1 };
  s0 -> s0 [0, 65535] { R6294 += 1, R6295 += 1 };
  s0 -> s2 [0, 65535] { R6295 += 1, R6232 += 1, R6233 += 1 };
  s0 -> s1 [76, 65535] { R6295 += 1, R6233 += 1 };
  s1 -> s1 [0, 74] { R6295 += 1, R6233 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6295 += 1 };
  s1 -> s1 [76, 65535] { R6295 += 1, R6233 += 1 };
  s2 -> s1 [0, 74] { R6295 += 1, R6233 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6295 += 1, R6232 += 1, R6233 += 1 };
  s2 -> s1 [76, 65535] { R6295 += 1, R6233 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6297 += 1, R6235 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R6296 += 1, R6297 += 1 };
  s0 -> s2 [0, 65535] { R6297 += 1, R6234 += 1, R6235 += 1 };
  s1 -> s4 [0, 65535] { R6297 += 1 };
  s1 -> s1 [0, 65535] { R6297 += 1, R6235 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6297 += 1, R6235 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6297 += 1, R6234 += 1, R6235 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6297 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R6299 += 1, R6237 += 1 };
  s0 -> s2 [0, 65535] { R6299 += 1, R6236 += 1, R6237 += 1 };
  s0 -> s0 [0, 65535] { R6298 += 1, R6299 += 1 };
  s0 -> s1 [87, 65535] { R6299 += 1, R6237 += 1 };
  s1 -> s1 [0, 75] { R6299 += 1, R6237 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6299 += 1 };
  s1 -> s1 [87, 65535] { R6299 += 1, R6237 += 1 };
  s2 -> s1 [0, 75] { R6299 += 1, R6237 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6299 += 1, R6236 += 1, R6237 += 1 };
  s2 -> s1 [87, 65535] { R6299 += 1, R6237 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6301 += 1, R6238 += 1, R6239 += 1 };
  s0 -> s0 [0, 65535] { R6300 += 1, R6301 += 1 };
  s0 -> s2 [0, 65535] { R6301 += 1, R6239 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R6301 += 1, R6238 += 1, R6239 += 1 };
  s1 -> s2 [0, 65535] { R6301 += 1, R6239 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6301 += 1 };
  s2 -> s2 [0, 65535] { R6301 += 1, R6239 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6301 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R6303 += 1, R6241 += 1 };
  s0 -> s2 [0, 65535] { R6303 += 1, R6241 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R6302 += 1, R6303 += 1 };
  s0 -> s3 [0, 65535] { R6303 += 1, R6240 += 1, R6241 += 1 };
  s0 -> s1 [88, 65535] { R6303 += 1, R6241 += 1 };
  s1 -> s1 [0, 86] { R6303 += 1, R6241 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6303 += 1 };
  s1 -> s1 [88, 65535] { R6303 += 1, R6241 += 1 };
  s2 -> s1 [0, 86] { R6303 += 1, R6241 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6303 += 1 };
  s2 -> s2 [0, 65535] { R6303 += 1, R6241 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R6303 += 1, R6241 += 1 };
  s3 -> s1 [0, 86] { R6303 += 1, R6241 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6303 += 1, R6241 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R6303 += 1, R6240 += 1, R6241 += 1 };
  s3 -> s1 [88, 65535] { R6303 += 1, R6241 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6303 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R6305 += 1, R6243 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R6304 += 1, R6305 += 1 };
  s0 -> s2 [0, 65535] { R6305 += 1, R6243 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R6305 += 1, R6242 += 1, R6243 += 1 };
  s0 -> s1 [88, 65535] { R6305 += 1, R6243 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R6305 += 1, R6243 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R6305 += 1 };
  s1 -> s1 [0, 65535] { R6305 += 1, R6243 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R6305 += 1, R6243 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R6305 += 1, R6243 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R6305 += 1 };
  s2 -> s2 [0, 65535] { R6305 += 1, R6243 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R6305 += 1, R6243 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R6305 += 1, R6243 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R6305 += 1, R6243 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6305 += 1, R6242 += 1, R6243 += 1 };
  s3 -> s1 [88, 65535] { R6305 += 1, R6243 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6305 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R6306 += 1, R6307 += 1 };
  s0 -> s1 [0, 65535] { R6307 += 1, R6244 += 1, R6245 += 1 };
  s0 -> s2 [0, 65535] { R6307 += 1, R6245 += 1 };
  s0 -> s3 [0, 65535] { R6307 += 1, R6245 += 1, R5164 += 1, R5165 += 1 };
  s1 -> s1 [0, 65535] { R6307 += 1, R6244 += 1, R6245 += 1 };
  s1 -> s2 [0, 65535] { R6307 += 1, R6245 += 1 };
  s1 -> s3 [0, 65535] { R6307 += 1, R6245 += 1, R5164 += 1, R5165 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R6307 += 1 };
  s2 -> s2 [0, 65535] { R6307 += 1, R6245 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R6307 += 1 };
  s3 -> s2 [0, 65535] { R6307 += 1, R6245 += 1 };
  s3 -> s3 [0, 65535] { R6307 += 1, R6245 += 1, R5164 += 1, R5165 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6307 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R6309 += 1, R6246 += 1, R6247 += 1 };
  s0 -> s2 [0, 65535] { R6309 += 1, R6247 += 1 };
  s0 -> s0 [0, 65535] { R6308 += 1, R6309 += 1 };
  s0 -> s3 [0, 65535] { R6309 += 1, R6247 += 1, R5169 += 1 };
  s1 -> s1 [0, 65535] { R6309 += 1, R6246 += 1, R6247 += 1 };
  s1 -> s2 [0, 65535] { R6309 += 1, R6247 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R6309 += 1, R6247 += 1, R5169 += 1 };
  s2 -> s2 [0, 65535] { R6309 += 1, R6247 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6309 += 1 };
  s3 -> s2 [0, 65535] { R6309 += 1, R6247 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6309 += 1 };
  s3 -> s3 [0, 65535] { R6309 += 1, R6247 += 1, R5169 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6309 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R6310 += 1, R6311 += 1 };
  s0 -> s1 [0, 65535] { R6311 += 1, R6248 += 1, R6249 += 1 };
  s0 -> s2 [0, 65535] { R6311 += 1, R6249 += 1 };
  s1 -> s1 [0, 65535] { R6311 += 1, R6248 += 1, R6249 += 1 };
  s1 -> s2 [0, 65535] { R6311 += 1, R6249 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6311 += 1, R6249 += 1 };
  s2 -> s4 [0, 65535] { R6311 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6311 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 87] { R6313 += 1, R6251 += 1, R6231 += 1 };
  s0 -> s1 [0, 65535] { R6313 += 1, R6251 += 1 };
  s0 -> s0 [0, 65535] { R6312 += 1, R6313 += 1 };
  s0 -> s2 [0, 65535] { R6313 += 1, R6250 += 1, R6251 += 1 };
  s0 -> s1 [89, 65535] { R6313 += 1, R6251 += 1, R6231 += 1 };
  s1 -> s1 [0, 87] { R6313 += 1, R6251 += 1, R6231 += 1 };
  s1 -> s4 [0, 65535] { R6313 += 1 };
  s1 -> s1 [0, 65535] { R6313 += 1, R6251 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [89, 65535] { R6313 += 1, R6251 += 1, R6231 += 1 };
  s2 -> s1 [0, 87] { R6313 += 1, R6251 += 1, R6231 += 1 };
  s2 -> s1 [0, 65535] { R6313 += 1, R6251 += 1 };
  s2 -> s2 [0, 65535] { R6313 += 1, R6250 += 1, R6251 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [89, 65535] { R6313 += 1, R6251 += 1, R6231 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6313 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6315 += 1, R6270 += 1, R6271 += 1 };
  s0 -> s2 [0, 65535] { R6315 += 1, R6271 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R6314 += 1, R6315 += 1 };
  s1 -> s1 [0, 65535] { R6315 += 1, R6270 += 1, R6271 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6315 += 1, R6271 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R6315 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6315 += 1, R6271 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R6315 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R6317 += 1, R6273 += 1 };
  s0 -> s0 [0, 65535] { R6316 += 1, R6317 += 1 };
  s0 -> s2 [0, 65535] { R6317 += 1, R6272 += 1, R6273 += 1 };
  s0 -> s3 [75, 75] { R6317 += 1, R6273 += 1 };
  s0 -> s4 [75, 75] { R6317 += 1, R6273 += 1 };
  s0 -> s5 [87, 87] { R6317 += 1, R6273 += 1 };
  s0 -> s1 [88, 65535] { R6317 += 1, R6273 += 1 };
  s1 -> s1 [0, 74] { R6317 += 1, R6273 += 1 };
  s1 -> s3 [75, 75] { R6317 += 1, R6273 += 1 };
  s1 -> s4 [75, 75] { R6317 += 1, R6273 += 1 };
  s1 -> s5 [87, 87] { R6317 += 1, R6273 += 1 };
  s1 -> s1 [88, 65535] { R6317 += 1, R6273 += 1 };
  s2 -> s1 [0, 74] { R6317 += 1, R6273 += 1 };
  s2 -> s2 [0, 65535] { R6317 += 1, R6272 += 1, R6273 += 1 };
  s2 -> s3 [75, 75] { R6317 += 1, R6273 += 1 };
  s2 -> s4 [75, 75] { R6317 += 1, R6273 += 1 };
  s2 -> s5 [87, 87] { R6317 += 1, R6273 += 1 };
  s2 -> s1 [88, 65535] { R6317 += 1, R6273 += 1 };
  s4 -> s4 [0, 75] { R6317 += 1, R6273 += 1 };
  s4 -> s7 [87, 87] { R6317 += 1, R6273 += 1 };
  s4 -> s4 [88, 65535] { R6317 += 1, R6273 += 1 };
  s5 -> s5 [0, 74] { R6317 += 1, R6273 += 1 };
  s5 -> s5 [0, 65535] { R6317 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R6317 += 1, R6273 += 1 };
  s5 -> s8 [75, 75] { R6317 += 1, R6273 += 1 };
  s5 -> s5 [87, 65535] { R6317 += 1, R6273 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 75] { R6317 += 1, R6273 += 1 };
  s7 -> s7 [0, 65535] { R6317 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R6317 += 1, R6273 += 1 };
  s8 -> s8 [0, 65535] { R6317 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R6319 += 1, R6275 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R6319 += 1, R6274 += 1, R6275 += 1 };
  s0 -> s0 [0, 65535] { R6318 += 1, R6319 += 1 };
  s0 -> s3 [75, 75] { R6319 += 1, R6275 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R6319 += 1, R6275 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R6319 += 1, R6275 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R6319 += 1, R6275 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6319 += 1 };
  s1 -> s3 [75, 75] { R6319 += 1, R6275 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R6319 += 1, R6275 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R6319 += 1, R6275 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R6319 += 1, R6275 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6319 += 1, R6274 += 1, R6275 += 1 };
  s2 -> s3 [75, 75] { R6319 += 1, R6275 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R6319 += 1, R6275 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R6319 += 1, R6275 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6319 += 1, R6275 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R6319 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6319 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6319 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R6321 += 1, R6277 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R6321 += 1, R6276 += 1, R6277 += 1 };
  s0 -> s0 [0, 65535] { R6320 += 1, R6321 += 1 };
  s0 -> s3 [75, 75] { R6321 += 1, R6277 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R6321 += 1, R6277 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R6321 += 1, R6277 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R6321 += 1, R6277 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6321 += 1 };
  s1 -> s3 [75, 75] { R6321 += 1, R6277 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R6321 += 1, R6277 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R6321 += 1, R6277 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R6321 += 1, R6277 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R6321 += 1, R6276 += 1, R6277 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R6321 += 1, R6277 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R6321 += 1, R6277 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R6321 += 1, R6277 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6321 += 1 };
  s3 -> s3 [0, 65535] { R6321 += 1, R6277 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6321 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6321 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R6323 += 1, R6278 += 1, R6279 += 1 };
  s0 -> s0 [0, 65535] { R6322 += 1, R6323 += 1 };
  s0 -> s3 [75, 75] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R6323 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R6323 += 1, R6278 += 1, R6279 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6323 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6323 += 1 };
  s4 -> s4 [0, 65535] { R6323 += 1, R6279 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6323 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s2 [0, 74] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s3 [0, 65535] { R6325 += 1, R6280 += 1, R6281 += 1 };
  s0 -> s0 [0, 65535] { R6324 += 1, R6325 += 1 };
  s0 -> s4 [75, 75] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s5 [75, 75] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s6 [75, 75] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s7 [75, 75] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s1 [76, 65535] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s2 [76, 65535] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s1 [0, 74] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [0, 65535] { R6325 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [75, 75] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s7 [75, 75] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [76, 65535] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s1 [0, 74] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [0, 74] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s2 -> s4 [75, 75] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s5 [75, 75] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s2 -> s6 [75, 75] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s2 -> s7 [75, 75] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s1 [76, 65535] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [76, 65535] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s1 [0, 74] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s2 [0, 74] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s3 [0, 65535] { R6325 += 1, R6280 += 1, R6281 += 1 };
  s3 -> s4 [75, 75] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s5 [75, 75] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s6 [75, 75] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s7 [75, 75] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s1 [76, 65535] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s2 [76, 65535] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s4 -> s4 [0, 65535] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s4 -> s9 [0, 65535] { R6325 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R6325 += 1, R6281 += 1, R5161 += 1, R5162 += 1 };
  s5 -> s5 [0, 65535] { R6325 += 1, R6281 += 1, R5160 += 1, R5161 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6325 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6325 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s0 -> s2 [0, 74] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s0 [0, 65535] { R6326 += 1, R6327 += 1 };
  s0 -> s3 [0, 65535] { R6327 += 1, R6282 += 1, R6283 += 1 };
  s0 -> s4 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s0 -> s5 [75, 75] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s6 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s0 -> s7 [75, 75] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s1 [76, 87] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s0 -> s2 [76, 65535] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s8 [88, 88] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s0 -> s1 [89, 65535] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s1 -> s1 [0, 74] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s1 -> s4 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s1 -> s6 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s1 -> s1 [76, 87] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s1 -> s8 [88, 88] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s1 -> s1 [89, 65535] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s2 -> s1 [0, 74] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s2 -> s2 [0, 74] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s4 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s2 -> s5 [75, 75] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s6 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s2 -> s7 [75, 75] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [76, 87] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s2 -> s2 [76, 65535] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s8 [88, 88] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s2 -> s1 [89, 65535] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s3 -> s1 [0, 74] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s3 -> s2 [0, 74] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s3 [0, 65535] { R6327 += 1, R6282 += 1, R6283 += 1 };
  s3 -> s4 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s3 -> s5 [75, 75] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s6 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s3 -> s7 [75, 75] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s1 [76, 87] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s3 -> s2 [76, 65535] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s8 [88, 88] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s3 -> s1 [89, 65535] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s6 -> s6 [0, 87] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s6 -> s10 [88, 88] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s6 -> s6 [89, 65535] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s7 -> s6 [0, 87] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s7 -> s7 [0, 65535] { R6327 += 1, R6283 += 1, R5166 += 1, R5167 += 1 };
  s7 -> s10 [88, 88] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s7 -> s6 [89, 65535] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s8 -> s8 [0, 74] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s8 -> s8 [0, 65535] { R6327 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s8 -> s11 [75, 75] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s8 -> s8 [76, 65535] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6327 += 1, R6283 += 1, R5167 += 1 };
  s10 -> s12 [0, 65535] { R6327 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R6327 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R6327 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s2 [0, 74] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s0 [0, 65535] { R6328 += 1, R6329 += 1 };
  s0 -> s3 [0, 65535] { R6329 += 1, R6284 += 1, R6285 += 1 };
  s0 -> s4 [75, 75] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s5 [75, 75] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s6 [75, 75] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s7 [75, 75] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s1 [76, 65535] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s2 [76, 65535] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s1 [0, 74] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s11 [0, 74] { R6329 += 1, R6285 += 1 };
  s1 -> s12 [75, 75] { R6329 += 1, R6285 += 1 };
  s1 -> s4 [75, 75] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s8 [75, 75] { R6329 += 1, R6285 += 1 };
  s1 -> s7 [75, 75] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s1 [76, 65535] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s11 [76, 65535] { R6329 += 1, R6285 += 1 };
  s2 -> s1 [0, 74] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s2 [0, 74] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s2 -> s4 [75, 75] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s5 [75, 75] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s2 -> s6 [75, 75] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s2 -> s7 [75, 75] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s1 [76, 65535] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s2 [76, 65535] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s1 [0, 74] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s2 [0, 74] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s3 [0, 65535] { R6329 += 1, R6284 += 1, R6285 += 1 };
  s3 -> s4 [75, 75] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s5 [75, 75] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s6 [75, 75] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s7 [75, 75] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s1 [76, 65535] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s2 [76, 65535] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s6 -> s6 [0, 65535] { R6329 += 1, R6285 += 1, R6014 += 1, R6015 += 1 };
  s6 -> s7 [0, 65535] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s7 -> s8 [0, 65535] { R6329 += 1, R6285 += 1 };
  s7 -> s7 [0, 65535] { R6329 += 1, R6285 += 1, R6015 += 1, R6016 += 1 };
  s8 -> s8 [0, 65535] { R6329 += 1, R6285 += 1 };
  s8 -> s9 [0, 65535] { R6329 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R6329 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 74] { R6329 += 1, R6285 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R6329 += 1 };
  s11 -> s12 [75, 75] { R6329 += 1, R6285 += 1 };
  s11 -> s8 [75, 75] { R6329 += 1, R6285 += 1 };
  s11 -> s11 [76, 65535] { R6329 += 1, R6285 += 1 };
  s12 -> s12 [0, 65535] { R6329 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s0 -> s2 [0, 74] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s0 -> s0 [0, 65535] { R6330 += 1, R6331 += 1 };
  s0 -> s3 [0, 65535] { R6331 += 1, R6286 += 1, R6287 += 1 };
  s0 -> s4 [75, 75] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s0 -> s5 [75, 75] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s0 -> s6 [75, 75] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s0 -> s7 [75, 75] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s0 -> s2 [76, 86] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s0 -> s1 [76, 65535] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s0 -> s8 [87, 87] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s0 -> s2 [89, 65535] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s1 -> s1 [0, 74] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s1 -> s2 [0, 74] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s1 -> s4 [75, 75] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s1 -> s5 [75, 75] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s1 -> s6 [75, 75] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s1 -> s7 [75, 75] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s1 -> s2 [76, 86] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s1 -> s1 [76, 65535] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s1 -> s8 [87, 87] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s1 -> s2 [89, 65535] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s2 -> s2 [0, 74] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s2 -> s4 [75, 75] { R6331 += 1, R6287 += 1 };
  s2 -> s7 [75, 75] { R6331 += 1, R6287 += 1 };
  s2 -> s2 [76, 86] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s2 -> s2 [76, 65535] { R6331 += 1, R6287 += 1 };
  s2 -> s8 [87, 87] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s2 -> s2 [89, 65535] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s3 -> s1 [0, 74] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s3 -> s2 [0, 74] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s3 -> s3 [0, 65535] { R6331 += 1, R6286 += 1, R6287 += 1 };
  s3 -> s4 [75, 75] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s3 -> s5 [75, 75] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s3 -> s6 [75, 75] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s3 -> s7 [75, 75] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s3 -> s2 [76, 86] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s3 -> s1 [76, 65535] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s3 -> s8 [87, 87] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s3 -> s2 [89, 65535] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s4 -> s4 [0, 86] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s4 -> s4 [0, 65535] { R6331 += 1, R6287 += 1 };
  s4 -> s11 [87, 87] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s4 -> s4 [89, 65535] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s6 -> s4 [0, 86] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s6 -> s6 [0, 65535] { R6331 += 1, R6287 += 1, R6228 += 1, R6229 += 1 };
  s6 -> s11 [87, 87] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s6 -> s4 [89, 65535] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s8 -> s8 [0, 74] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s8 -> s8 [0, 65535] { R6331 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [75, 75] { R6331 += 1, R6287 += 1 };
  s8 -> s11 [75, 75] { R6331 += 1, R6287 += 1 };
  s8 -> s8 [76, 87] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s8 -> s8 [76, 65535] { R6331 += 1, R6287 += 1 };
  s8 -> s8 [89, 65535] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6331 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 87] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R6331 += 1 };
  s11 -> s11 [0, 65535] { R6331 += 1, R6287 += 1 };
  s11 -> s11 [89, 65535] { R6331 += 1, R6287 += 1, R6229 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R6331 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R6331 && R20 - R6331 = -1 && R21 = R6331 && R22 - R6331 = -1 && R23 = R6331 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R6272 = 0 && R6273 = 0 && R6280 = 0 && R6281 = 0 && R6282 = 0 && R6283 = 0 && R6284 = 0 && R6285 = 0 && R6286 = 0 && R6287 = 0 && R6288 = 0 && R6289 = R6331 && R6290 = 0 && R6291 = R6331 && R6292 = 0 && R6293 = R6331 && R6294 = 0 && R6295 = R6331 && R6296 = 0 && R6297 = R6331 && R6298 = 0 && R6299 = R6331 && R6300 = 0 && R6301 = R6331 && R6302 = 0 && R6303 = R6331 && R6304 = 0 && R6305 = R6331 && R6306 = 0 && R6307 = R6331 && R6308 = 0 && R6309 = R6331 && R6310 = 0 && R6311 = R6331 && R6312 = 0 && R6313 = R6331 && R6314 = 0 && R6315 = R6331 && R6316 = 0 && R6317 = R6331 && R6318 = 0 && R6319 = R6331 && R6320 = 0 && R6321 = R6331 && R6322 = 0 && R6323 = R6331 && R6324 = 0 && R6325 = R6331 && R6326 = 0 && R6327 = R6331 && R6328 = 0 && R6329 = R6331 && R6330 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && 0 < R6331 && (R1 != 0 || R17 = 0 || (R6232 = 0 && R6233 = 0)) && (R1 != 0 || R17 = 0 || (R6234 = 0 && R6235 = 0)) && (R1 != 0 || R17 = 0 || (R6236 = 0 && R6237 = 0)) && (R1 != 0 || R17 = 0 || (R6238 = 0 && R6239 = 0)) && (R1 != 0 || R17 = 0 || (R6240 = 0 && R6241 = 0)) && (R1 != 0 || R17 = 0 || (R6242 = 0 && R6243 = 0)) && (R1 != 0 || R17 = 0 || (R6244 = 0 && R6245 = 0)) && (R1 != 0 || R17 = 0 || (R6246 = 0 && R6247 = 0)) && (R1 != 0 || R17 = 0 || (R6248 = 0 && R6249 = 0)) && (R1 != 0 || R17 = 0 || (R6250 = 0 && R6251 = 0)) && (R48 + R5165 + R5162 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R5165 + R5162 != 0 || ((R46 + R5163 + R5160 != 0 || R47 + R5164 + R5161 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R5163 + R5160 = 0 || R53 + R5169 + R5167 < 1))) && (R6232 != 0 || R1 = R6233 || R1 < 1) && (R6234 != 0 || R1 = R6235 || R1 < 1) && (R6236 != 0 || R1 = R6237 || R1 < 1) && (R6238 != 0 || R1 = R6239 || R1 < 1) && (R6240 != 0 || R1 = R6241 || R1 < 1) && (R6242 != 0 || R1 = R6243 || R1 < 1) && (R6244 != 0 || R1 = R6245 || R1 < 1) && (R6246 != 0 || R1 = R6247 || R1 < 1) && (R6248 != 0 || R1 = R6249 || R1 < 1) && (R6250 != 0 || R1 = R6251 || R1 < 1) && (R18 = 0 || (R6270 = 0 && R6271 = 0)) && (R18 = 0 || (R6274 = 0 && R6275 = 0)) && (R18 = 0 || (R6276 = 0 && R6277 = 0)) && (R18 = 0 || (R6278 = 0 && R6279 = 0)) && (R19 = 0 || (R6252 = 0 && R6253 = 0)) && (R19 = 0 || (R6254 = 0 && R6255 = 0)) && (R19 = 0 || (R6256 = 0 && R6257 = 0)) && (R19 = 0 || (R6258 = 0 && R6259 = 0)) && (R19 = 0 || (R6260 = 0 && R6261 = 0)) && (R19 = 0 || (R6262 = 0 && R6263 = 0)) && (R19 = 0 || (R6264 = 0 && R6265 = 0)) && (R19 = 0 || (R6266 = 0 && R6267 = 0)) && (R19 = 0 || (R6268 = 0 && R6269 = 0)) && (R48 + R5165 + R5162 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R5165 + R5162 = 0 || (R46 + R5163 + R5160 = 0 && R47 + R5164 + R5161 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R6019 + R6016 = 0 || (R56 + R6017 + R6014 = 0 && R57 + R6018 + R6015 = 0)) && (R58 + R6019 + R6016 = 0 || (R62 + R6230 + R6228 = 0 && R63 + R6231 + R6229 = 0)) && (R6232 = 0 || R1 < 1) && (R6234 = 0 || R1 < 1) && (R6236 = 0 || R1 < 1) && (R6238 = 0 || R1 < 1) && (R6240 = 0 || R1 < 1) && (R6242 = 0 || R1 < 1) && (R6244 = 0 || R1 < 1) && (R6246 = 0 || R1 < 1) && (R6248 = 0 || R1 < 1) && (R6250 = 0 || R1 < 1);
// End of Parikh automata intersection problem
