// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R175, R178, R180, R181, R2, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R3, R4, R6, R7;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R178 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80] { R181 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535] { R181 += 1 };
  s1 -> s1 [0, 80] { R181 += 1 };
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535] { R181 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R223 += 1 };
  s0 -> s0 [0, 65535] { R222 += 1, R223 += 1 };
  s0 -> s2 [9, 13] { R223 += 1 };
  s0 -> s1 [14, 31] { R223 += 1 };
  s0 -> s2 [32, 32] { R223 += 1 };
  s0 -> s1 [33, 65535] { R223 += 1 };
  s1 -> s1 [0, 65535] { R223 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R223 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R225 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R224 += 1, R225 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R225 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R227 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s2 [9, 13] { R227 += 1 };
  s0 -> s1 [14, 31] { R227 += 1 };
  s0 -> s2 [32, 32] { R227 += 1 };
  s0 -> s1 [33, 65535] { R227 += 1 };
  s1 -> s1 [0, 65535] { R227 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R227 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R229 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s1 -> s1 [0, 65535] { R229 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 80] { R245 += 1 };
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s2 [81, 81] { R245 += 1 };
  s0 -> s1 [82, 65535] { R245 += 1 };
  s1 -> s1 [0, 80] { R245 += 1 };
  s1 -> s2 [81, 81] { R245 += 1 };
  s1 -> s1 [82, 65535] { R245 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R245 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s1 [0, 65535] { R247 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R247 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R249 += 1 };
  s0 -> s2 [0, 65535] { R249 += 1, R175 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s3 [81, 81] { R249 += 1 };
  s0 -> s1 [82, 65535] { R249 += 1 };
  s1 -> s1 [0, 80] { R249 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R249 += 1 };
  s1 -> s1 [82, 65535] { R249 += 1 };
  s2 -> s1 [0, 80] { R249 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R249 += 1, R175 += 1 };
  s2 -> s3 [81, 81] { R249 += 1 };
  s2 -> s1 [82, 65535] { R249 += 1 };
  s3 -> s3 [0, 65535] { R249 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R251 += 1, R235 += 1 };
  s0 -> s2 [0, 65535] { R251 += 1, R234 += 1, R235 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s3 [81, 81] { R251 += 1, R235 += 1 };
  s0 -> s1 [82, 65535] { R251 += 1, R235 += 1 };
  s1 -> s1 [0, 80] { R251 += 1, R235 += 1 };
  s1 -> s3 [81, 81] { R251 += 1, R235 += 1 };
  s1 -> s1 [82, 65535] { R251 += 1, R235 += 1 };
  s2 -> s1 [0, 80] { R251 += 1, R235 += 1 };
  s2 -> s2 [0, 65535] { R251 += 1, R234 += 1, R235 += 1 };
  s2 -> s3 [81, 81] { R251 += 1, R235 += 1 };
  s2 -> s1 [82, 65535] { R251 += 1, R235 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R251 += 1, R235 += 1 };
  s3 -> s5 [0, 65535] { R251 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R251 += 1 };
  accepting s3, s4, s5;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R253 += 1, R236 += 1, R237 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R237 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R253 += 1, R236 += 1, R237 += 1 };
  s1 -> s2 [0, 65535] { R253 += 1, R237 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R253 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R253 += 1, R237 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R253 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R255 += 1, R239 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R239 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R255 += 1, R238 += 1, R239 += 1 };
  s0 -> s4 [81, 81] { R255 += 1, R239 += 1 };
  s0 -> s1 [82, 65535] { R255 += 1, R239 += 1, R7 += 1 };
  s1 -> s1 [0, 80] { R255 += 1, R239 += 1, R7 += 1 };
  s1 -> s4 [81, 81] { R255 += 1, R239 += 1 };
  s1 -> s1 [82, 65535] { R255 += 1, R239 += 1, R7 += 1 };
  s2 -> s1 [0, 80] { R255 += 1, R239 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R255 += 1, R239 += 1, R6 += 1, R7 += 1 };
  s2 -> s4 [81, 81] { R255 += 1, R239 += 1 };
  s2 -> s1 [82, 65535] { R255 += 1, R239 += 1, R7 += 1 };
  s3 -> s1 [0, 80] { R255 += 1, R239 += 1, R7 += 1 };
  s3 -> s2 [0, 65535] { R255 += 1, R239 += 1, R6 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R255 += 1, R238 += 1, R239 += 1 };
  s3 -> s4 [81, 81] { R255 += 1, R239 += 1 };
  s3 -> s1 [82, 65535] { R255 += 1, R239 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R255 += 1, R239 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R255 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R255 += 1 };
  accepting s4, s5, s6;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R257 += 1, R241 += 1, R231 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s2 [0, 65535] { R257 += 1, R240 += 1, R241 += 1 };
  s0 -> s3 [0, 65535] { R257 += 1, R241 += 1, R230 += 1, R231 += 1 };
  s0 -> s4 [81, 81] { R257 += 1, R241 += 1, R231 += 1 };
  s0 -> s1 [82, 65535] { R257 += 1, R241 += 1, R231 += 1 };
  s1 -> s1 [0, 80] { R257 += 1, R241 += 1, R231 += 1 };
  s1 -> s4 [81, 81] { R257 += 1, R241 += 1, R231 += 1 };
  s1 -> s1 [82, 65535] { R257 += 1, R241 += 1, R231 += 1 };
  s2 -> s1 [0, 80] { R257 += 1, R241 += 1, R231 += 1 };
  s2 -> s2 [0, 65535] { R257 += 1, R240 += 1, R241 += 1 };
  s2 -> s3 [0, 65535] { R257 += 1, R241 += 1, R230 += 1, R231 += 1 };
  s2 -> s4 [81, 81] { R257 += 1, R241 += 1, R231 += 1 };
  s2 -> s1 [82, 65535] { R257 += 1, R241 += 1, R231 += 1 };
  s3 -> s1 [0, 80] { R257 += 1, R241 += 1, R231 += 1 };
  s3 -> s3 [0, 65535] { R257 += 1, R241 += 1, R230 += 1, R231 += 1 };
  s3 -> s4 [81, 81] { R257 += 1, R241 += 1, R231 += 1 };
  s3 -> s1 [82, 65535] { R257 += 1, R241 += 1, R231 += 1 };
  s4 -> s5 [0, 65535] { R257 += 1, R241 += 1 };
  s4 -> s4 [0, 65535] { R257 += 1, R241 += 1, R231 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R257 += 1 };
  s5 -> s5 [0, 65535] { R257 += 1, R241 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R257 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R257 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s1 [0, 65535] { R259 += 1, R243 += 1, R232 += 1, R233 += 1 };
  s0 -> s2 [0, 65535] { R259 += 1, R242 += 1, R243 += 1 };
  s0 -> s3 [0, 65535] { R259 += 1, R243 += 1, R233 += 1, R221 += 1 };
  s1 -> s1 [0, 65535] { R259 += 1, R243 += 1, R232 += 1, R233 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R259 += 1 };
  s1 -> s3 [0, 65535] { R259 += 1, R243 += 1, R233 += 1, R221 += 1 };
  s2 -> s1 [0, 65535] { R259 += 1, R243 += 1, R232 += 1, R233 += 1 };
  s2 -> s2 [0, 65535] { R259 += 1, R242 += 1, R243 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R259 += 1, R243 += 1, R233 += 1, R221 += 1 };
  s3 -> s4 [0, 65535] { R259 += 1, R243 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R259 += 1 };
  s3 -> s3 [0, 65535] { R259 += 1, R243 += 1, R233 += 1, R221 += 1 };
  s4 -> s4 [0, 65535] { R259 += 1, R243 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R259 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R259 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R231 && R1 = R241 && R2 = R257 && R6 = 0 && R7 - R230 = -1 && R180 = 0 && R181 - R256 = -1 && R222 - R257 = -1 && R223 = R257 && R224 - R257 = -1 && R225 = R257 && R226 = 0 && R227 = 1 && R228 = 0 && R229 = 1 && R234 = 0 && R235 = R241 && R238 = 0 && R239 = R241 && R240 = 0 && R244 = R256 && R245 = R257 && R250 = R256 && R251 = R257 && R254 = R256 && R255 = R257 && R175 < 1 && R178 < 1 && R230 - R231 < 1 && -1 < R230 && -1 < R241 && R256 - R257 < 1 && -1 < R256 && 0 < R257 && (R230 != R232 || R231 = R233 || ((R221 != 0 || R231 - R232 < 1 || R232 < 0) && (R221 = 0 || R231 < R232 || R232 < 0))) && (R236 != 0 || R237 = R241 || (R231 = 0 && (R230 != 0 || R241 < 1))) && (R242 != 0 || R241 = R243 || (R231 = 0 && (R230 != 0 || R241 < 1))) && (R246 != R256 || R247 = R257 || (R241 = 0 && R256 = R257)) && (R248 != R256 || R249 = R257 || (R241 = 0 && R256 = R257)) && (R252 != R256 || R253 = R257 || (R241 = 0 && R256 = R257)) && (R256 != R258 || R257 = R259 || ((R241 != 0 || R257 - R258 < 1 || R258 < 0) && (R241 < 1 || R257 < R258 || R258 < 0))) && (R230 = R232 || (R221 = 0 && R230 = R231)) && (R236 = 0 || (R231 = 0 && (R230 != 0 || R241 < 1))) && (R242 = 0 || (R231 = 0 && (R230 != 0 || R241 < 1))) && (R246 = R256 || (R241 = 0 && R256 = R257)) && (R248 = R256 || (R241 = 0 && R256 = R257)) && (R252 = R256 || (R241 = 0 && R256 = R257)) && (R256 = R258 || (R241 = 0 && R256 = R257));
// End of Parikh automata intersection problem
