// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R176, R177, R2, R260, R262, R263, R3, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R4, R6, R7;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R260 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80] { R263 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535] { R263 += 1 };
  s1 -> s1 [0, 80] { R263 += 1 };
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535] { R263 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R305 += 1 };
  s0 -> s0 [0, 65535] { R304 += 1, R305 += 1 };
  s0 -> s2 [9, 13] { R305 += 1 };
  s0 -> s1 [14, 31] { R305 += 1 };
  s0 -> s2 [32, 32] { R305 += 1 };
  s0 -> s1 [33, 65535] { R305 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R305 += 1 };
  s2 -> s1 [0, 65535] { R305 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R307 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R306 += 1, R307 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R307 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R309 += 1 };
  s0 -> s0 [0, 65535] { R308 += 1, R309 += 1 };
  s0 -> s2 [9, 13] { R309 += 1 };
  s0 -> s1 [14, 31] { R309 += 1 };
  s0 -> s2 [32, 32] { R309 += 1 };
  s0 -> s1 [33, 65535] { R309 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R309 += 1 };
  s2 -> s1 [0, 65535] { R309 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R310 += 1, R311 += 1 };
  s0 -> s1 [0, 65535] { R311 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R311 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 80] { R327 += 1 };
  s0 -> s0 [0, 65535] { R326 += 1, R327 += 1 };
  s0 -> s2 [81, 81] { R327 += 1 };
  s0 -> s1 [82, 65535] { R327 += 1 };
  s1 -> s1 [0, 80] { R327 += 1 };
  s1 -> s2 [81, 81] { R327 += 1 };
  s1 -> s1 [82, 65535] { R327 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R327 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R328 += 1, R329 += 1 };
  s0 -> s1 [0, 65535] { R329 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R329 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R331 += 1, R177 += 1 };
  s0 -> s2 [0, 65535] { R331 += 1, R176 += 1, R177 += 1 };
  s0 -> s0 [0, 65535] { R330 += 1, R331 += 1 };
  s0 -> s3 [81, 81] { R331 += 1 };
  s0 -> s1 [82, 65535] { R331 += 1, R177 += 1 };
  s1 -> s1 [0, 80] { R331 += 1, R177 += 1 };
  s1 -> s3 [81, 81] { R331 += 1 };
  s1 -> s1 [82, 65535] { R331 += 1, R177 += 1 };
  s2 -> s1 [0, 80] { R331 += 1, R177 += 1 };
  s2 -> s2 [0, 65535] { R331 += 1, R176 += 1, R177 += 1 };
  s2 -> s3 [81, 81] { R331 += 1 };
  s2 -> s1 [82, 65535] { R331 += 1, R177 += 1 };
  s3 -> s3 [0, 65535] { R331 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R333 += 1, R317 += 1 };
  s0 -> s0 [0, 65535] { R332 += 1, R333 += 1 };
  s0 -> s2 [0, 65535] { R333 += 1, R316 += 1, R317 += 1 };
  s0 -> s3 [81, 81] { R333 += 1, R317 += 1 };
  s0 -> s1 [82, 65535] { R333 += 1, R317 += 1 };
  s1 -> s1 [0, 80] { R333 += 1, R317 += 1 };
  s1 -> s3 [81, 81] { R333 += 1, R317 += 1 };
  s1 -> s1 [82, 65535] { R333 += 1, R317 += 1 };
  s2 -> s1 [0, 80] { R333 += 1, R317 += 1 };
  s2 -> s2 [0, 65535] { R333 += 1, R316 += 1, R317 += 1 };
  s2 -> s3 [81, 81] { R333 += 1, R317 += 1 };
  s2 -> s1 [82, 65535] { R333 += 1, R317 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R333 += 1, R317 += 1 };
  s3 -> s5 [0, 65535] { R333 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R333 += 1 };
  accepting s3, s4, s5;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R335 += 1, R318 += 1, R319 += 1 };
  s0 -> s2 [0, 65535] { R335 += 1, R319 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R334 += 1, R335 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R335 += 1, R318 += 1, R319 += 1 };
  s1 -> s2 [0, 65535] { R335 += 1, R319 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R335 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R335 += 1, R319 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R335 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R337 += 1, R321 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R337 += 1, R321 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R337 += 1, R320 += 1, R321 += 1 };
  s0 -> s0 [0, 65535] { R336 += 1, R337 += 1 };
  s0 -> s4 [81, 81] { R337 += 1, R321 += 1 };
  s0 -> s1 [82, 65535] { R337 += 1, R321 += 1, R7 += 1 };
  s1 -> s1 [0, 80] { R337 += 1, R321 += 1, R7 += 1 };
  s1 -> s4 [81, 81] { R337 += 1, R321 += 1 };
  s1 -> s1 [82, 65535] { R337 += 1, R321 += 1, R7 += 1 };
  s2 -> s1 [0, 80] { R337 += 1, R321 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R337 += 1, R321 += 1, R6 += 1, R7 += 1 };
  s2 -> s4 [81, 81] { R337 += 1, R321 += 1 };
  s2 -> s1 [82, 65535] { R337 += 1, R321 += 1, R7 += 1 };
  s3 -> s1 [0, 80] { R337 += 1, R321 += 1, R7 += 1 };
  s3 -> s2 [0, 65535] { R337 += 1, R321 += 1, R6 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R337 += 1, R320 += 1, R321 += 1 };
  s3 -> s4 [81, 81] { R337 += 1, R321 += 1 };
  s3 -> s1 [82, 65535] { R337 += 1, R321 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R337 += 1, R321 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R337 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R337 += 1 };
  accepting s4, s5, s6;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R339 += 1, R323 += 1, R313 += 1 };
  s0 -> s2 [0, 65535] { R339 += 1, R323 += 1, R312 += 1, R313 += 1 };
  s0 -> s0 [0, 65535] { R338 += 1, R339 += 1 };
  s0 -> s3 [0, 65535] { R339 += 1, R322 += 1, R323 += 1 };
  s0 -> s4 [81, 81] { R339 += 1, R323 += 1, R313 += 1 };
  s0 -> s1 [82, 65535] { R339 += 1, R323 += 1, R313 += 1 };
  s1 -> s1 [0, 80] { R339 += 1, R323 += 1, R313 += 1 };
  s1 -> s4 [81, 81] { R339 += 1, R323 += 1, R313 += 1 };
  s1 -> s1 [82, 65535] { R339 += 1, R323 += 1, R313 += 1 };
  s2 -> s1 [0, 80] { R339 += 1, R323 += 1, R313 += 1 };
  s2 -> s2 [0, 65535] { R339 += 1, R323 += 1, R312 += 1, R313 += 1 };
  s2 -> s4 [81, 81] { R339 += 1, R323 += 1, R313 += 1 };
  s2 -> s1 [82, 65535] { R339 += 1, R323 += 1, R313 += 1 };
  s3 -> s1 [0, 80] { R339 += 1, R323 += 1, R313 += 1 };
  s3 -> s2 [0, 65535] { R339 += 1, R323 += 1, R312 += 1, R313 += 1 };
  s3 -> s3 [0, 65535] { R339 += 1, R322 += 1, R323 += 1 };
  s3 -> s4 [81, 81] { R339 += 1, R323 += 1, R313 += 1 };
  s3 -> s1 [82, 65535] { R339 += 1, R323 += 1, R313 += 1 };
  s4 -> s5 [0, 65535] { R339 += 1, R323 += 1 };
  s4 -> s6 [0, 65535] { R339 += 1 };
  s4 -> s4 [0, 65535] { R339 += 1, R323 += 1, R313 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R339 += 1, R323 += 1 };
  s5 -> s6 [0, 65535] { R339 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R339 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R341 += 1, R324 += 1, R325 += 1 };
  s0 -> s2 [0, 65535] { R341 += 1, R325 += 1, R315 += 1, R303 += 1 };
  s0 -> s0 [0, 65535] { R340 += 1, R341 += 1 };
  s0 -> s3 [0, 65535] { R341 += 1, R325 += 1, R314 += 1, R315 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R341 += 1, R324 += 1, R325 += 1 };
  s1 -> s2 [0, 65535] { R341 += 1, R325 += 1, R315 += 1, R303 += 1 };
  s1 -> s3 [0, 65535] { R341 += 1, R325 += 1, R314 += 1, R315 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R341 += 1 };
  s2 -> s2 [0, 65535] { R341 += 1, R325 += 1, R315 += 1, R303 += 1 };
  s2 -> s6 [0, 65535] { R341 += 1, R325 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R341 += 1 };
  s3 -> s2 [0, 65535] { R341 += 1, R325 += 1, R315 += 1, R303 += 1 };
  s3 -> s3 [0, 65535] { R341 += 1, R325 += 1, R314 += 1, R315 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R341 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R341 += 1 };
  s6 -> s6 [0, 65535] { R341 += 1, R325 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R313 && R1 = R323 && R2 = R339 && R6 = 0 && R7 - R312 = -1 && R176 = 0 && R177 - R322 = -1 && R262 = 0 && R263 - R338 = -1 && R304 - R339 = -1 && R305 = R339 && R306 - R339 = -1 && R307 = R339 && R308 = 0 && R309 = 1 && R310 = 0 && R311 = 1 && R316 = R322 && R317 = R323 && R320 = R322 && R321 = R323 && R326 = R338 && R327 = R339 && R330 = R338 && R331 = R339 && R332 = R338 && R333 = R339 && R336 = R338 && R337 = R339 && R260 < 1 && R312 - R313 < 1 && -1 < R312 && R322 - R323 < 1 && -1 < R322 && R338 - R339 < 1 && -1 < R338 && 0 < R339 && (R312 != R314 || R313 = R315 || ((R303 != 0 || R313 - R314 < 1 || R314 < 0) && (R303 = 0 || R313 < R314 || R314 < 0))) && (R318 != R322 || R319 = R323 || (R313 = 0 && (R312 != 0 || R323 - R322 < 1))) && (R322 != R324 || R323 = R325 || ((R312 != 0 || R313 != 0 || R323 - R324 < 1 || R324 < 0) && (R313 < 1 || R323 < R324 || R324 < 0))) && (R328 != R338 || R329 = R339 || (R323 = 0 && (R322 != 0 || R339 - R338 < 1))) && (R334 != R338 || R335 = R339 || (R323 = 0 && (R322 != 0 || R339 - R338 < 1))) && (R338 != R340 || R339 = R341 || ((R322 != 0 || R323 != 0 || R339 - R340 < 1 || R340 < 0) && (R323 < 1 || R339 < R340 || R340 < 0))) && (R312 = R314 || (R303 = 0 && R312 = R313)) && (R318 = R322 || (R313 = 0 && (R312 != 0 || R323 - R322 < 1))) && (R322 = R324 || (R313 = 0 && (R312 != 0 || R323 - R322 < 1))) && (R328 = R338 || (R323 = 0 && (R322 != 0 || R339 - R338 < 1))) && (R334 = R338 || (R323 = 0 && (R322 != 0 || R339 - R338 < 1))) && (R338 = R340 || (R323 = 0 && (R322 != 0 || R339 - R338 < 1)));
// End of Parikh automata intersection problem
