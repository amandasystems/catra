// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R2, R3, R4, R5, R9, R93, R94, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R93 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R94 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R99 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s2 [9, 13] { R99 += 1 };
  s0 -> s1 [14, 31] { R99 += 1 };
  s0 -> s2 [32, 32] { R99 += 1 };
  s0 -> s1 [33, 65535] { R99 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R99 += 1 };
  s2 -> s1 [0, 65535] { R99 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R101 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R101 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R103 += 1 };
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s2 [9, 13] { R103 += 1 };
  s0 -> s1 [14, 31] { R103 += 1 };
  s0 -> s2 [32, 32] { R103 += 1 };
  s0 -> s1 [33, 65535] { R103 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R103 += 1 };
  s2 -> s1 [0, 65535] { R103 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s1 [0, 65535] { R105 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R105 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 80] { R121 += 1 };
  s0 -> s0 [0, 65535] { R120 += 1, R121 += 1 };
  s0 -> s2 [81, 81] { R121 += 1 };
  s0 -> s1 [82, 65535] { R121 += 1 };
  s1 -> s1 [0, 80] { R121 += 1 };
  s1 -> s2 [81, 81] { R121 += 1 };
  s1 -> s1 [82, 65535] { R121 += 1 };
  s2 -> s2 [0, 65535] { R121 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R122 += 1, R123 += 1 };
  s0 -> s1 [0, 65535] { R123 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R123 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R125 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R124 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R125 += 1, R9 += 1, R10 += 1 };
  s0 -> s3 [81, 81] { R125 += 1 };
  s0 -> s1 [82, 65535] { R125 += 1, R10 += 1 };
  s1 -> s1 [0, 80] { R125 += 1, R10 += 1 };
  s1 -> s3 [81, 81] { R125 += 1 };
  s1 -> s1 [82, 65535] { R125 += 1, R10 += 1 };
  s2 -> s1 [0, 80] { R125 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R125 += 1, R9 += 1, R10 += 1 };
  s2 -> s3 [81, 81] { R125 += 1 };
  s2 -> s1 [82, 65535] { R125 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R125 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R127 += 1, R111 += 1 };
  s0 -> s2 [0, 65535] { R127 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R126 += 1, R127 += 1 };
  s0 -> s3 [81, 81] { R127 += 1, R111 += 1 };
  s0 -> s1 [82, 65535] { R127 += 1, R111 += 1 };
  s1 -> s1 [0, 80] { R127 += 1, R111 += 1 };
  s1 -> s3 [81, 81] { R127 += 1, R111 += 1 };
  s1 -> s1 [82, 65535] { R127 += 1, R111 += 1 };
  s2 -> s1 [0, 80] { R127 += 1, R111 += 1 };
  s2 -> s2 [0, 65535] { R127 += 1, R110 += 1, R111 += 1 };
  s2 -> s3 [81, 81] { R127 += 1, R111 += 1 };
  s2 -> s1 [82, 65535] { R127 += 1, R111 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R127 += 1, R111 += 1 };
  s3 -> s5 [0, 65535] { R127 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R127 += 1 };
  accepting s3, s4, s5;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R129 += 1, R113 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R129 += 1, R112 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R128 += 1, R129 += 1 };
  s1 -> s1 [0, 65535] { R129 += 1, R113 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R129 += 1 };
  s2 -> s1 [0, 65535] { R129 += 1, R113 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R129 += 1, R112 += 1, R113 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R129 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R131 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R131 += 1, R114 += 1, R115 += 1 };
  s0 -> s3 [0, 65535] { R131 += 1, R115 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R130 += 1, R131 += 1 };
  s0 -> s4 [81, 81] { R131 += 1, R115 += 1 };
  s0 -> s1 [82, 65535] { R131 += 1, R115 += 1 };
  s1 -> s1 [0, 80] { R131 += 1, R115 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R131 += 1 };
  s1 -> s4 [81, 81] { R131 += 1, R115 += 1 };
  s1 -> s1 [82, 65535] { R131 += 1, R115 += 1 };
  s2 -> s1 [0, 80] { R131 += 1, R115 += 1 };
  s2 -> s2 [0, 65535] { R131 += 1, R114 += 1, R115 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R131 += 1, R115 += 1, R5 += 1 };
  s2 -> s4 [81, 81] { R131 += 1, R115 += 1 };
  s2 -> s1 [82, 65535] { R131 += 1, R115 += 1 };
  s3 -> s1 [0, 80] { R131 += 1, R115 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R131 += 1 };
  s3 -> s3 [0, 65535] { R131 += 1, R115 += 1, R5 += 1 };
  s3 -> s4 [81, 81] { R131 += 1, R115 += 1 };
  s3 -> s1 [82, 65535] { R131 += 1, R115 += 1 };
  s4 -> s4 [0, 65535] { R131 += 1, R115 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R131 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R133 += 1, R117 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R133 += 1, R116 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s3 [0, 65535] { R133 += 1, R117 += 1, R106 += 1, R107 += 1 };
  s0 -> s4 [81, 81] { R133 += 1, R117 += 1, R107 += 1 };
  s0 -> s1 [82, 65535] { R133 += 1, R117 += 1, R107 += 1 };
  s1 -> s1 [0, 80] { R133 += 1, R117 += 1, R107 += 1 };
  s1 -> s4 [81, 81] { R133 += 1, R117 += 1, R107 += 1 };
  s1 -> s1 [82, 65535] { R133 += 1, R117 += 1, R107 += 1 };
  s2 -> s1 [0, 80] { R133 += 1, R117 += 1, R107 += 1 };
  s2 -> s2 [0, 65535] { R133 += 1, R116 += 1, R117 += 1 };
  s2 -> s3 [0, 65535] { R133 += 1, R117 += 1, R106 += 1, R107 += 1 };
  s2 -> s4 [81, 81] { R133 += 1, R117 += 1, R107 += 1 };
  s2 -> s1 [82, 65535] { R133 += 1, R117 += 1, R107 += 1 };
  s3 -> s1 [0, 80] { R133 += 1, R117 += 1, R107 += 1 };
  s3 -> s3 [0, 65535] { R133 += 1, R117 += 1, R106 += 1, R107 += 1 };
  s3 -> s4 [81, 81] { R133 += 1, R117 += 1, R107 += 1 };
  s3 -> s1 [82, 65535] { R133 += 1, R117 += 1, R107 += 1 };
  s4 -> s5 [0, 65535] { R133 += 1 };
  s4 -> s6 [0, 65535] { R133 += 1, R117 += 1 };
  s4 -> s4 [0, 65535] { R133 += 1, R117 += 1, R107 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R133 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R133 += 1 };
  s6 -> s6 [0, 65535] { R133 += 1, R117 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s0 -> s1 [0, 65535] { R135 += 1, R119 += 1, R109 += 1, R97 += 1 };
  s0 -> s2 [0, 65535] { R135 += 1, R118 += 1, R119 += 1 };
  s0 -> s3 [0, 65535] { R135 += 1, R119 += 1, R108 += 1, R109 += 1 };
  s1 -> s4 [0, 65535] { R135 += 1 };
  s1 -> s6 [0, 65535] { R135 += 1, R119 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R135 += 1, R119 += 1, R109 += 1, R97 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R135 += 1, R119 += 1, R109 += 1, R97 += 1 };
  s2 -> s2 [0, 65535] { R135 += 1, R118 += 1, R119 += 1 };
  s2 -> s3 [0, 65535] { R135 += 1, R119 += 1, R108 += 1, R109 += 1 };
  s3 -> s4 [0, 65535] { R135 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R135 += 1, R119 += 1, R109 += 1, R97 += 1 };
  s3 -> s3 [0, 65535] { R135 += 1, R119 += 1, R108 += 1, R109 += 1 };
  s4 -> s4 [0, 65535] { R135 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R135 += 1 };
  s6 -> s6 [0, 65535] { R135 += 1, R119 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R107 && R1 = R117 && R2 = R135 && R9 = 0 && R10 - R116 = -1 && R98 - R135 = -1 && R99 = R135 && R100 - R135 = -1 && R101 = R135 && R102 = 0 && R103 = 1 && R104 = 0 && R105 = 1 && R106 = 0 && R110 = R116 && R111 = R117 && R120 = 0 && R121 = R135 && R122 = 0 && R123 = R135 && R124 = 0 && R125 = R135 && R126 = 0 && R127 = R135 && R128 = 0 && R129 = R135 && R130 = 0 && R131 = R135 && R132 = 0 && R133 = R135 && R134 = 0 && R5 < 1 && R93 < 1 && R94 < 1 && -1 < R107 && R116 - R117 < 1 && -1 < R116 && 0 < R135 && (R108 != 0 || R107 = R109 || (R97 = 0 && R107 = 0)) && (R112 != R116 || R113 = R117 || (R107 = 0 && R116 = R117)) && (R114 != R116 || R115 = R117 || (R107 = 0 && R116 = R117)) && (R116 != R118 || R117 = R119 || ((R107 != 0 || R117 - R118 < 1 || R118 < 0) && (R107 < 1 || R117 < R118 || R118 < 0))) && (R108 = 0 || (R97 = 0 && R107 = 0)) && (R112 = R116 || (R107 = 0 && R116 = R117)) && (R114 = R116 || (R107 = 0 && R116 = R117)) && (R116 = R118 || (R107 = 0 && R116 = R117));
// End of Parikh automata intersection problem
