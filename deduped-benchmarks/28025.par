// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R12, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R3, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [85, 85];
  s0 -> s0 [86, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [85, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 84];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [85, 85];
  s0 -> s1 [86, 65535];
  s1 -> s1 [0, 84];
  s1 -> s2 [85, 85];
  s1 -> s1 [86, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [9, 13] { R19 += 1 };
  s0 -> s1 [14, 31] { R19 += 1 };
  s0 -> s2 [32, 32] { R19 += 1 };
  s0 -> s1 [33, 65535] { R19 += 1 };
  s1 -> s1 [0, 65535] { R19 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R19 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R21 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R23 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s2 [9, 13] { R23 += 1 };
  s0 -> s1 [14, 31] { R23 += 1 };
  s0 -> s2 [32, 32] { R23 += 1 };
  s0 -> s1 [33, 65535] { R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R23 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [0, 65535] { R25 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 84] { R79 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s1 [86, 65535] { R79 += 1 };
  s1 -> s1 [0, 84] { R79 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R79 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R16 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 85] { R83 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [89, 89] { R83 += 1 };
  s0 -> s1 [90, 65535] { R83 += 1 };
  s1 -> s1 [0, 85] { R83 += 1 };
  s1 -> s2 [89, 89] { R83 += 1 };
  s1 -> s1 [90, 65535] { R83 += 1 };
  s2 -> s2 [0, 85] { R83 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [89, 65535] { R83 += 1 };
  accepting s2;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R85 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R85 += 1, R41 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 88] { R87 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s1 [90, 65535] { R87 += 1 };
  s1 -> s1 [0, 88] { R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R87 += 1 };
  s2 -> s1 [0, 88] { R87 += 1 };
  s2 -> s2 [0, 65535] { R87 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R87 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 88] { R89 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R89 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [89, 89] { R89 += 1, R47 += 1 };
  s0 -> s1 [90, 65535] { R89 += 1, R47 += 1 };
  s1 -> s1 [0, 88] { R89 += 1, R47 += 1 };
  s1 -> s3 [89, 89] { R89 += 1, R47 += 1 };
  s1 -> s1 [90, 65535] { R89 += 1, R47 += 1 };
  s2 -> s1 [0, 88] { R89 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R89 += 1, R46 += 1, R47 += 1 };
  s2 -> s3 [89, 89] { R89 += 1, R47 += 1 };
  s2 -> s1 [90, 65535] { R89 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R89 += 1, R47 += 1 };
  s3 -> s5 [0, 65535] { R89 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R89 += 1 };
  accepting s3, s4, s5;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s1 [0, 65535] { R91 += 1, R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R91 += 1, R51 += 1, R52 += 1 };
  s1 -> s4 [0, 65535] { R91 += 1 };
  s1 -> s1 [0, 65535] { R91 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R91 += 1, R52 += 1, R53 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R91 += 1, R51 += 1, R52 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R91 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 88] { R93 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R93 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s3 [0, 65535] { R93 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [90, 65535] { R93 += 1, R58 += 1 };
  s1 -> s1 [0, 88] { R93 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [90, 65535] { R93 += 1, R58 += 1 };
  s2 -> s1 [0, 88] { R93 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R93 += 1, R58 += 1, R59 += 1 };
  s2 -> s5 [0, 65535] { R93 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [90, 65535] { R93 += 1, R58 += 1 };
  s3 -> s1 [0, 88] { R93 += 1, R58 += 1 };
  s3 -> s2 [0, 65535] { R93 += 1, R58 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R93 += 1, R57 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [90, 65535] { R93 += 1, R58 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R93 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 88] { R95 += 1, R65 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R95 += 1, R64 += 1, R65 += 1 };
  s0 -> s3 [0, 65535] { R95 += 1, R65 += 1, R66 += 1, R67 += 1 };
  s0 -> s4 [89, 89] { R95 += 1, R65 += 1, R67 += 1 };
  s0 -> s1 [90, 65535] { R95 += 1, R65 += 1, R67 += 1 };
  s1 -> s1 [0, 88] { R95 += 1, R65 += 1, R67 += 1 };
  s1 -> s4 [89, 89] { R95 += 1, R65 += 1, R67 += 1 };
  s1 -> s1 [90, 65535] { R95 += 1, R65 += 1, R67 += 1 };
  s2 -> s1 [0, 88] { R95 += 1, R65 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R95 += 1, R64 += 1, R65 += 1 };
  s2 -> s3 [0, 65535] { R95 += 1, R65 += 1, R66 += 1, R67 += 1 };
  s2 -> s4 [89, 89] { R95 += 1, R65 += 1, R67 += 1 };
  s2 -> s1 [90, 65535] { R95 += 1, R65 += 1, R67 += 1 };
  s3 -> s1 [0, 88] { R95 += 1, R65 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R95 += 1, R65 += 1, R66 += 1, R67 += 1 };
  s3 -> s4 [89, 89] { R95 += 1, R65 += 1, R67 += 1 };
  s3 -> s1 [90, 65535] { R95 += 1, R65 += 1, R67 += 1 };
  s4 -> s5 [0, 65535] { R95 += 1, R65 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R95 += 1 };
  s4 -> s4 [0, 65535] { R95 += 1, R65 += 1, R67 += 1 };
  s5 -> s5 [0, 65535] { R95 += 1, R65 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R95 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R95 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R97 += 1, R74 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s2 [0, 65535] { R97 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [0, 65535] { R97 += 1, R74 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 65535] { R97 += 1, R74 += 1, R76 += 1, R77 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R97 += 1 };
  s1 -> s6 [0, 65535] { R97 += 1, R74 += 1 };
  s2 -> s1 [0, 65535] { R97 += 1, R74 += 1, R76 += 1, R77 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R97 += 1, R73 += 1, R74 += 1 };
  s2 -> s3 [0, 65535] { R97 += 1, R74 += 1, R75 += 1, R76 += 1 };
  s3 -> s1 [0, 65535] { R97 += 1, R74 += 1, R76 += 1, R77 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R97 += 1 };
  s3 -> s3 [0, 65535] { R97 += 1, R74 += 1, R75 += 1, R76 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R97 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R97 += 1 };
  s6 -> s6 [0, 65535] { R97 += 1, R74 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R99 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R99 += 1, R17 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 84] { R101 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s2 [85, 85] { R101 += 1 };
  s0 -> s3 [85, 85] { R101 += 1 };
  s0 -> s1 [90, 65535] { R101 += 1 };
  s1 -> s1 [0, 84] { R101 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R101 += 1 };
  s1 -> s3 [85, 85] { R101 += 1 };
  s1 -> s1 [90, 65535] { R101 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 85] { R101 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [90, 65535] { R101 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 84] { R103 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s2 [85, 85] { R103 += 1, R40 += 1 };
  s0 -> s3 [85, 85] { R103 += 1, R40 += 1 };
  s0 -> s1 [86, 65535] { R103 += 1, R40 += 1 };
  s1 -> s1 [0, 84] { R103 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R103 += 1, R40 += 1 };
  s1 -> s3 [85, 85] { R103 += 1, R40 += 1 };
  s1 -> s1 [86, 65535] { R103 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R103 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 84] { R105 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s2 [85, 85] { R105 += 1, R42 += 1 };
  s0 -> s3 [85, 85] { R105 += 1, R42 += 1 };
  s0 -> s1 [86, 65535] { R105 += 1, R42 += 1 };
  s1 -> s1 [0, 84] { R105 += 1, R42 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R105 += 1, R42 += 1 };
  s1 -> s3 [85, 85] { R105 += 1, R42 += 1 };
  s1 -> s1 [86, 65535] { R105 += 1, R42 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R105 += 1, R42 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 84] { R107 += 1, R44 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s0 -> s2 [85, 85] { R107 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [85, 85] { R107 += 1, R44 += 1, R45 += 1 };
  s0 -> s1 [86, 65535] { R107 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 84] { R107 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R107 += 1, R44 += 1, R45 += 1 };
  s1 -> s3 [85, 85] { R107 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [86, 65535] { R107 += 1, R44 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R107 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 84] { R109 += 1, R48 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R108 += 1, R109 += 1 };
  s0 -> s2 [85, 85] { R109 += 1, R48 += 1, R49 += 1 };
  s0 -> s3 [85, 85] { R109 += 1, R48 += 1, R49 += 1 };
  s0 -> s1 [86, 65535] { R109 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [0, 84] { R109 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R109 += 1, R48 += 1, R49 += 1 };
  s1 -> s3 [85, 85] { R109 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [86, 65535] { R109 += 1, R48 += 1, R49 += 1 };
  s2 -> s2 [0, 65535] { R109 += 1, R48 += 1, R49 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R111 += 1, R54 += 1, R55 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s2 [85, 85] { R111 += 1, R54 += 1, R55 += 1 };
  s0 -> s3 [85, 85] { R111 += 1, R54 += 1, R55 += 1 };
  s0 -> s1 [86, 65535] { R111 += 1, R54 += 1, R55 += 1 };
  s1 -> s1 [0, 84] { R111 += 1, R54 += 1, R55 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R111 += 1, R54 += 1, R55 += 1 };
  s1 -> s3 [85, 85] { R111 += 1, R54 += 1, R55 += 1 };
  s1 -> s1 [86, 65535] { R111 += 1, R54 += 1, R55 += 1 };
  s2 -> s2 [0, 65535] { R111 += 1, R54 += 1, R55 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R113 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s2 [85, 85] { R113 += 1, R60 += 1, R61 += 1 };
  s0 -> s3 [85, 85] { R113 += 1, R60 += 1, R61 += 1 };
  s0 -> s1 [86, 65535] { R113 += 1, R60 += 1, R61 += 1 };
  s1 -> s1 [0, 84] { R113 += 1, R60 += 1, R61 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R113 += 1, R60 += 1, R61 += 1 };
  s1 -> s3 [85, 85] { R113 += 1, R60 += 1, R61 += 1 };
  s1 -> s1 [86, 65535] { R113 += 1, R60 += 1, R61 += 1 };
  s2 -> s2 [0, 65535] { R113 += 1, R60 += 1, R61 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 84] { R115 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s0 -> s2 [85, 85] { R115 += 1, R68 += 1, R69 += 1 };
  s0 -> s3 [85, 85] { R115 += 1, R68 += 1, R69 += 1 };
  s0 -> s1 [86, 65535] { R115 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 84] { R115 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R115 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [85, 85] { R115 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [86, 65535] { R115 += 1, R68 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R115 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R2 = R97 && R18 - R97 = -1 && R19 = R97 && R20 - R97 = -1 && R21 = R97 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R41 + R40 + -1*R65 + -1*R61 = 0 && R46 + R44 = 0 && R47 + R45 + -1*R65 + -1*R61 = 0 && R53 + R50 + -1*R67 + -1*R63 = 0 && R64 + R60 = 0 && R66 + R62 = 0 && R78 = 0 && R79 = R97 && R80 = 0 && R81 = R97 && R82 = 0 && R83 = R97 && R84 = 0 && R85 = R97 && R86 = 0 && R87 = R97 && R88 = 0 && R89 = R97 && R90 = 0 && R91 = R97 && R92 = 0 && R93 = R97 && R94 = 0 && R95 = R97 && R96 = 0 && R11 < 1 && R12 < 1 && R43 + R42 < 1 && R59 + R56 < 1 && -1*R65 + -1*R61 < 1 && -1*R67 + -1*R63 < 1 && 0 < R97 && (R51 + R48 != 0 || R52 + R49 + -1*R65 + -1*R61 = 0 || R65 + R61 < 1) && (R57 + R54 != 0 || R58 + R55 + -1*R65 + -1*R61 = 0 || R65 + R61 < 1) && (R65 + R61 != 0 || ((R51 + R48 != 0 || R52 + R49 = 0 || R67 + R63 < 1) && (R51 + R48 = 0 || R67 + R63 < 1))) && (R65 + R61 != 0 || ((R57 + R54 != 0 || R58 + R55 = 0 || R67 + R63 < 1) && (R57 + R54 = 0 || R67 + R63 < 1))) && (R65 + R61 != 0 || ((R73 + R68 != 0 || R74 + R69 = 0 || R67 + R63 < 1) && (R73 + R68 = 0 || R67 + R63 < 1))) && (R67 + R63 != 0 || R77 + R72 = 0 || (R75 + R70 = 0 && R76 + R71 = 0)) && (R73 + R68 != 0 || R65 + R61 + -1*R74 + -1*R69 = 0 || R65 + R61 < 1) && (R75 + R70 != 0 || R67 + R63 + -1*R76 + -1*R71 = 0 || R67 + R63 < 1) && (R17 = 0 || (R98 = 0 && R99 = 0 && R100 = 0 && R101 = 0 && R102 = 0 && R103 = 0 && R104 = 0 && R105 = 0 && R106 = 0 && R107 = 0 && R108 = 0 && R109 = 0 && R110 = 0 && R111 = 0 && R112 = 0 && R113 = 0 && R114 = 0 && R115 = 0)) && (R51 + R48 = 0 || R65 + R61 < 1) && (R57 + R54 = 0 || R65 + R61 < 1) && (R73 + R68 = 0 || R65 + R61 < 1) && (R75 + R70 = 0 || R67 + R63 < 1);
// End of Parikh automata intersection problem
