// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R9 += 1 };
  s0 -> s0 [0, 65535] { R8 += 1, R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R9 += 1 };
  s1 -> s1 [0, 60] { R9 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R67 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s2 [79, 79] { R67 += 1 };
  s0 -> s1 [80, 65535] { R67 += 1 };
  s1 -> s1 [0, 64] { R67 += 1 };
  s1 -> s2 [79, 79] { R67 += 1 };
  s1 -> s1 [80, 65535] { R67 += 1 };
  s2 -> s2 [0, 64] { R67 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [79, 65535] { R67 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s1 [0, 65535] { R69 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R69 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R71 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R71 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s3 [9, 13] { R71 += 1, R59 += 1 };
  s0 -> s1 [14, 31] { R71 += 1, R59 += 1 };
  s0 -> s3 [32, 32] { R71 += 1, R59 += 1 };
  s0 -> s1 [33, 65535] { R71 += 1, R59 += 1 };
  s1 -> s5 [0, 65535] { R71 += 1 };
  s1 -> s1 [0, 65535] { R71 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R71 += 1, R59 += 1 };
  s2 -> s2 [0, 65535] { R71 += 1, R58 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R71 += 1, R59 += 1 };
  s2 -> s1 [14, 31] { R71 += 1, R59 += 1 };
  s2 -> s3 [32, 32] { R71 += 1, R59 += 1 };
  s2 -> s1 [33, 65535] { R71 += 1, R59 += 1 };
  s3 -> s1 [0, 65535] { R71 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R71 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s1 [0, 65535] { R73 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R73 += 1, R61 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R73 += 1, R60 += 1, R61 += 1 };
  s1 -> s2 [0, 65535] { R73 += 1, R61 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R73 += 1 };
  s2 -> s2 [0, 65535] { R73 += 1, R61 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R73 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R75 += 1, R63 += 1 };
  s0 -> s2 [0, 65535] { R75 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s3 [9, 13] { R75 += 1, R63 += 1 };
  s0 -> s1 [14, 31] { R75 += 1, R63 += 1 };
  s0 -> s3 [32, 32] { R75 += 1, R63 += 1 };
  s0 -> s1 [33, 65535] { R75 += 1, R63 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R75 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1, R63 += 1 };
  s2 -> s1 [0, 8] { R75 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R75 += 1, R62 += 1, R63 += 1 };
  s2 -> s3 [9, 13] { R75 += 1, R63 += 1 };
  s2 -> s1 [14, 31] { R75 += 1, R63 += 1 };
  s2 -> s3 [32, 32] { R75 += 1, R63 += 1 };
  s2 -> s1 [33, 65535] { R75 += 1, R63 += 1 };
  s3 -> s1 [0, 65535] { R75 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R75 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R77 += 1, R64 += 1, R65 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R77 += 1, R65 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R77 += 1, R64 += 1, R65 += 1 };
  s1 -> s2 [0, 65535] { R77 += 1, R65 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R77 += 1 };
  s2 -> s2 [0, 65535] { R77 += 1, R65 += 1, R6 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R77 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R79 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s1 [91, 65535] { R79 += 1 };
  s1 -> s1 [0, 64] { R79 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R79 += 1 };
  accepting s0, s1;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 8] { R83 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R83 += 1, R50 += 1, R51 += 1 };
  s0 -> s3 [9, 13] { R83 += 1, R51 += 1 };
  s0 -> s1 [14, 31] { R83 += 1, R51 += 1 };
  s0 -> s3 [32, 32] { R83 += 1, R51 += 1 };
  s0 -> s1 [33, 65535] { R83 += 1, R51 += 1 };
  s1 -> s5 [0, 65535] { R83 += 1 };
  s1 -> s1 [0, 65535] { R83 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R83 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R83 += 1, R50 += 1, R51 += 1 };
  s2 -> s3 [9, 13] { R83 += 1, R51 += 1 };
  s2 -> s1 [14, 31] { R83 += 1, R51 += 1 };
  s2 -> s3 [32, 32] { R83 += 1, R51 += 1 };
  s2 -> s1 [33, 65535] { R83 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R83 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R83 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R85 += 1, R53 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R85 += 1, R53 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R85 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R85 += 1, R53 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R85 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R85 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 8] { R87 += 1, R55 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R54 += 1, R55 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s3 [9, 13] { R87 += 1, R55 += 1 };
  s0 -> s1 [14, 31] { R87 += 1, R55 += 1 };
  s0 -> s3 [32, 32] { R87 += 1, R55 += 1 };
  s0 -> s1 [33, 65535] { R87 += 1, R55 += 1 };
  s1 -> s5 [0, 65535] { R87 += 1 };
  s1 -> s1 [0, 65535] { R87 += 1, R55 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R87 += 1, R55 += 1 };
  s2 -> s2 [0, 65535] { R87 += 1, R54 += 1, R55 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R87 += 1, R55 += 1 };
  s2 -> s1 [14, 31] { R87 += 1, R55 += 1 };
  s2 -> s3 [32, 32] { R87 += 1, R55 += 1 };
  s2 -> s1 [33, 65535] { R87 += 1, R55 += 1 };
  s3 -> s1 [0, 65535] { R87 += 1, R55 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R87 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R57 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R89 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R57 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R89 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R89 += 1, R57 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R89 += 1, R56 += 1, R57 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R89 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  accepting s0;
};
};
constraint R2 = R77 && R8 = 0 && R9 = R89 && R66 - R89 = 1 && R67 = R77 && R68 - R89 = 1 && R69 = R77 && R70 - R89 = 1 && R71 = R77 && R72 - R89 = 1 && R73 = R77 && R74 - R89 = 1 && R75 = R77 && R76 - R89 = 1 && R78 = 0 && R79 = R89 && R80 = 0 && R81 = R89 && R82 = 0 && R83 = R89 && R84 = 0 && R85 = R89 && R86 = 0 && R87 = R89 && R88 = 0 && R0 != 0 && R1 != 0 && R89 < R77 && -1 < R89 && (R3 != 0 || ((R0 != R51 || R50 - R51 = -1 || R51 < 0) && (R0 = R51 || R0 < 1))) && (R3 != 0 || ((R0 != R53 || R52 - R53 = -1 || R53 < 0) && (R0 = R53 || R0 < 1))) && (R5 != 0 || ((R1 != R59 || R58 - R59 = -1 || R59 < 0) && (R1 = R59 || R1 < 1))) && (R5 != 0 || ((R1 != R61 || R60 - R61 = -1 || R61 < 0) && (R1 = R61 || R1 < 1))) && (R54 != 0 || ((R4 != 0 || ((R0 != R55 || R55 = 1 || R55 < 0) && (R0 = R55 || R55 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R55 || R55 = 1 || R55 < 0) && (R55 != 1 || -1 < R0) && (R0 = R55 || R55 = 1))))) && (R56 != 0 || ((R4 != 0 || ((R0 != R57 || R57 = 1 || R57 < 0) && (R0 = R57 || R57 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R57 || R57 = 1 || R57 < 0) && (R57 != 1 || -1 < R0) && (R0 = R57 || R57 = 1))))) && (R62 != 0 || ((R6 != 0 || ((R1 != R63 || R63 = 1 || R63 < 0) && (R1 = R63 || R63 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R63 || R63 = 1 || R63 < 0) && (R63 != 1 || -1 < R1) && (R1 = R63 || R63 = 1))))) && (R64 != 0 || ((R6 != 0 || ((R1 != R65 || R65 = 1 || R65 < 0) && (R1 = R65 || R65 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R65 || R65 = 1 || R65 < 0) && (R65 != 1 || -1 < R1) && (R1 = R65 || R65 = 1))))) && (R3 = 0 || (R0 = R51 && R50 - R51 = -1)) && (R3 = 0 || (R0 = R53 && R52 - R53 = -1)) && (R5 = 0 || (R1 = R59 && R58 - R59 = -1)) && (R5 = 0 || (R1 = R61 && R60 - R61 = -1)) && (R54 = 0 || (R4 = 0 && R0 < 0)) && (R56 = 0 || (R4 = 0 && R0 < 0)) && (R62 = 0 || (R6 = 0 && R1 < 0)) && (R64 = 0 || (R6 = 0 && R1 < 0));
// End of Parikh automata intersection problem
