// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R2, R3, R4, R5, R507, R508, R6, R7, R755, R756, R8, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R9, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R958 += 1 };
  s0 -> s0 [0, 65535] { R957 += 1, R958 += 1 };
  s0 -> s2 [46, 46] { R958 += 1 };
  s0 -> s3 [47, 47] { R958 += 1 };
  s0 -> s1 [48, 65535] { R958 += 1 };
  s1 -> s1 [0, 45] { R958 += 1 };
  s1 -> s2 [46, 46] { R958 += 1 };
  s1 -> s3 [47, 47] { R958 += 1 };
  s1 -> s1 [48, 65535] { R958 += 1 };
  s2 -> s1 [0, 45] { R958 += 1 };
  s2 -> s2 [46, 46] { R958 += 1 };
  s2 -> s3 [47, 47] { R958 += 1 };
  s2 -> s1 [48, 114] { R958 += 1 };
  s2 -> s8 [115, 115] { R958 += 1 };
  s2 -> s1 [116, 65535] { R958 += 1 };
  s3 -> s3 [0, 45] { R958 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R958 += 1 };
  s3 -> s3 [47, 65535] { R958 += 1 };
  s4 -> s3 [0, 45] { R958 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R958 += 1 };
  s4 -> s3 [47, 114] { R958 += 1 };
  s4 -> s5 [115, 115] { R958 += 1 };
  s4 -> s3 [116, 65535] { R958 += 1 };
  s5 -> s3 [0, 45] { R958 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R958 += 1 };
  s5 -> s3 [47, 110] { R958 += 1 };
  s5 -> s6 [111, 111] { R958 += 1 };
  s5 -> s3 [112, 65535] { R958 += 1 };
  s6 -> s3 [0, 45] { R958 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R958 += 1 };
  s6 -> s3 [47, 98] { R958 += 1 };
  s6 -> s7 [99, 99] { R958 += 1 };
  s6 -> s3 [100, 65535] { R958 += 1 };
  s7 -> s3 [0, 45] { R958 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R958 += 1 };
  s7 -> s3 [47, 106] { R958 += 1 };
  s7 -> s3 [108, 65535] { R958 += 1 };
  s8 -> s1 [0, 45] { R958 += 1 };
  s8 -> s2 [46, 46] { R958 += 1 };
  s8 -> s3 [47, 47] { R958 += 1 };
  s8 -> s1 [48, 110] { R958 += 1 };
  s8 -> s9 [111, 111] { R958 += 1 };
  s8 -> s1 [112, 65535] { R958 += 1 };
  s9 -> s1 [0, 45] { R958 += 1 };
  s9 -> s2 [46, 46] { R958 += 1 };
  s9 -> s3 [47, 47] { R958 += 1 };
  s9 -> s1 [48, 98] { R958 += 1 };
  s9 -> s10 [99, 99] { R958 += 1 };
  s9 -> s1 [100, 65535] { R958 += 1 };
  s10 -> s1 [0, 45] { R958 += 1 };
  s10 -> s2 [46, 46] { R958 += 1 };
  s10 -> s3 [47, 47] { R958 += 1 };
  s10 -> s1 [48, 106] { R958 += 1 };
  s10 -> s1 [108, 65535] { R958 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R960 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R959 += 1, R960 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R960 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R962 += 1, R756 += 1 };
  s0 -> s0 [0, 65535] { R961 += 1, R962 += 1 };
  s0 -> s2 [0, 65535] { R962 += 1, R755 += 1, R756 += 1 };
  s0 -> s3 [47, 47] { R962 += 1 };
  s0 -> s1 [48, 65535] { R962 += 1, R756 += 1 };
  s1 -> s1 [0, 46] { R962 += 1, R756 += 1 };
  s1 -> s3 [47, 47] { R962 += 1 };
  s1 -> s1 [48, 65535] { R962 += 1, R756 += 1 };
  s2 -> s1 [0, 46] { R962 += 1, R756 += 1 };
  s2 -> s2 [0, 65535] { R962 += 1, R755 += 1, R756 += 1 };
  s2 -> s3 [47, 47] { R962 += 1 };
  s2 -> s1 [48, 65535] { R962 += 1, R756 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R962 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R963 += 1, R964 += 1 };
  s0 -> s1 [0, 65535] { R964 += 1, R922 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R964 += 1, R921 += 1, R922 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R964 += 1 };
  s1 -> s1 [0, 65535] { R964 += 1, R922 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R964 += 1, R922 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R964 += 1, R921 += 1, R922 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R964 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R965 += 1, R966 += 1 };
  s0 -> s1 [0, 65535] { R966 += 1, R923 += 1, R924 += 1 };
  s0 -> s2 [0, 65535] { R966 += 1, R924 += 1, R879 += 1, R880 += 1 };
  s0 -> s3 [63, 63] { R966 += 1, R924 += 1, R880 += 1 };
  s1 -> s1 [0, 65535] { R966 += 1, R923 += 1, R924 += 1 };
  s1 -> s2 [0, 65535] { R966 += 1, R924 += 1, R879 += 1, R880 += 1 };
  s1 -> s3 [63, 63] { R966 += 1, R924 += 1, R880 += 1 };
  s2 -> s2 [0, 65535] { R966 += 1, R924 += 1, R879 += 1, R880 += 1 };
  s2 -> s3 [63, 63] { R966 += 1, R924 += 1, R880 += 1 };
  s3 -> s4 [0, 65535] { R966 += 1 };
  s3 -> s3 [0, 65535] { R966 += 1, R924 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R966 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R967 += 1, R968 += 1 };
  s0 -> s1 [0, 65535] { R968 += 1, R925 += 1, R926 += 1 };
  s0 -> s2 [0, 65535] { R968 += 1, R926 += 1, R882 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R968 += 1, R926 += 1, R881 += 1, R882 += 1 };
  s1 -> s1 [0, 65535] { R968 += 1, R925 += 1, R926 += 1 };
  s1 -> s2 [0, 65535] { R968 += 1, R926 += 1, R882 += 1, R8 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R968 += 1, R926 += 1, R881 += 1, R882 += 1 };
  s2 -> s6 [0, 65535] { R968 += 1, R926 += 1 };
  s2 -> s4 [0, 65535] { R968 += 1 };
  s2 -> s2 [0, 65535] { R968 += 1, R926 += 1, R882 += 1, R8 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R968 += 1 };
  s3 -> s2 [0, 65535] { R968 += 1, R926 += 1, R882 += 1, R8 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R968 += 1, R926 += 1, R881 += 1, R882 += 1 };
  s4 -> s4 [0, 65535] { R968 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R968 += 1, R926 += 1 };
  s6 -> s4 [0, 65535] { R968 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R970 += 1, R927 += 1, R928 += 1 };
  s0 -> s2 [0, 65535] { R970 += 1, R928 += 1, R887 += 1, R888 += 1 };
  s0 -> s3 [0, 65535] { R970 += 1, R928 += 1, R888 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R969 += 1, R970 += 1 };
  s1 -> s1 [0, 65535] { R970 += 1, R927 += 1, R928 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R970 += 1, R928 += 1, R887 += 1, R888 += 1 };
  s1 -> s3 [0, 65535] { R970 += 1, R928 += 1, R888 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R970 += 1, R928 += 1, R887 += 1, R888 += 1 };
  s2 -> s6 [0, 65535] { R970 += 1 };
  s2 -> s3 [0, 65535] { R970 += 1, R928 += 1, R888 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R970 += 1, R928 += 1 };
  s3 -> s6 [0, 65535] { R970 += 1 };
  s3 -> s3 [0, 65535] { R970 += 1, R928 += 1, R888 += 1, R0 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R970 += 1, R928 += 1 };
  s5 -> s6 [0, 65535] { R970 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R970 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 37] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R972 += 1, R930 += 1, R889 += 1, R890 += 1 };
  s0 -> s3 [0, 65535] { R972 += 1, R930 += 1, R890 += 1, R11 += 1, R12 += 1 };
  s0 -> s4 [0, 65535] { R972 += 1, R929 += 1, R930 += 1 };
  s0 -> s0 [0, 65535] { R971 += 1, R972 += 1 };
  s0 -> s5 [38, 38] { R972 += 1, R930 += 1, R890 += 1 };
  s0 -> s1 [39, 65535] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s1 -> s1 [0, 37] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s1 -> s5 [38, 38] { R972 += 1, R930 += 1, R890 += 1 };
  s1 -> s1 [39, 65535] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s2 -> s1 [0, 37] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R972 += 1, R930 += 1, R889 += 1, R890 += 1 };
  s2 -> s3 [0, 65535] { R972 += 1, R930 += 1, R890 += 1, R11 += 1, R12 += 1 };
  s2 -> s5 [38, 38] { R972 += 1, R930 += 1, R890 += 1 };
  s2 -> s1 [39, 65535] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s3 -> s1 [0, 37] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R972 += 1, R930 += 1, R890 += 1, R11 += 1, R12 += 1 };
  s3 -> s5 [38, 38] { R972 += 1, R930 += 1, R890 += 1 };
  s3 -> s1 [39, 65535] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s4 -> s1 [0, 37] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s4 -> s2 [0, 65535] { R972 += 1, R930 += 1, R889 += 1, R890 += 1 };
  s4 -> s3 [0, 65535] { R972 += 1, R930 += 1, R890 += 1, R11 += 1, R12 += 1 };
  s4 -> s4 [0, 65535] { R972 += 1, R929 += 1, R930 += 1 };
  s4 -> s5 [38, 38] { R972 += 1, R930 += 1, R890 += 1 };
  s4 -> s1 [39, 65535] { R972 += 1, R930 += 1, R890 += 1, R12 += 1 };
  s5 -> s5 [0, 65535] { R972 += 1, R930 += 1, R890 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R972 += 1, R930 += 1 };
  s5 -> s8 [0, 65535] { R972 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R972 += 1, R930 += 1 };
  s7 -> s8 [0, 65535] { R972 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R972 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 63] { R974 += 1, R932 += 1 };
  s0 -> s0 [0, 65535] { R973 += 1, R974 += 1 };
  s0 -> s2 [0, 65535] { R974 += 1, R931 += 1, R932 += 1 };
  s0 -> s3 [64, 64] { R974 += 1, R932 += 1 };
  s0 -> s1 [65, 65535] { R974 += 1, R932 += 1 };
  s1 -> s1 [0, 63] { R974 += 1, R932 += 1 };
  s1 -> s3 [64, 64] { R974 += 1, R932 += 1 };
  s1 -> s1 [65, 65535] { R974 += 1, R932 += 1 };
  s2 -> s1 [0, 63] { R974 += 1, R932 += 1 };
  s2 -> s2 [0, 65535] { R974 += 1, R931 += 1, R932 += 1 };
  s2 -> s3 [64, 64] { R974 += 1, R932 += 1 };
  s2 -> s1 [65, 65535] { R974 += 1, R932 += 1 };
  s3 -> s3 [0, 65535] { R974 += 1, R932 += 1 };
  s3 -> s4 [0, 65535] { R974 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R974 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R976 += 1, R934 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R975 += 1, R976 += 1 };
  s0 -> s2 [0, 65535] { R976 += 1, R933 += 1, R934 += 1 };
  s1 -> s4 [0, 65535] { R976 += 1 };
  s1 -> s1 [0, 65535] { R976 += 1, R934 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R976 += 1, R934 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R976 += 1, R933 += 1, R934 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R976 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 36] { R978 += 1, R936 += 1, R900 += 1 };
  s0 -> s2 [0, 65535] { R978 += 1, R935 += 1, R936 += 1 };
  s0 -> s3 [0, 65535] { R978 += 1, R936 += 1, R899 += 1, R900 += 1 };
  s0 -> s0 [0, 65535] { R977 += 1, R978 += 1 };
  s0 -> s1 [38, 42] { R978 += 1, R936 += 1, R900 += 1 };
  s0 -> s1 [44, 57] { R978 += 1, R936 += 1, R900 += 1 };
  s0 -> s1 [59, 63] { R978 += 1, R936 += 1, R900 += 1 };
  s0 -> s1 [65, 65535] { R978 += 1, R936 += 1, R900 += 1 };
  s1 -> s1 [0, 36] { R978 += 1, R936 += 1, R900 += 1 };
  s1 -> s1 [0, 65535] { R978 += 1, R936 += 1 };
  s1 -> s4 [0, 65535] { R978 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [38, 42] { R978 += 1, R936 += 1, R900 += 1 };
  s1 -> s1 [44, 57] { R978 += 1, R936 += 1, R900 += 1 };
  s1 -> s1 [59, 63] { R978 += 1, R936 += 1, R900 += 1 };
  s1 -> s1 [65, 65535] { R978 += 1, R936 += 1, R900 += 1 };
  s2 -> s1 [0, 36] { R978 += 1, R936 += 1, R900 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R978 += 1, R935 += 1, R936 += 1 };
  s2 -> s3 [0, 65535] { R978 += 1, R936 += 1, R899 += 1, R900 += 1 };
  s2 -> s1 [38, 42] { R978 += 1, R936 += 1, R900 += 1 };
  s2 -> s1 [44, 57] { R978 += 1, R936 += 1, R900 += 1 };
  s2 -> s1 [59, 63] { R978 += 1, R936 += 1, R900 += 1 };
  s2 -> s1 [65, 65535] { R978 += 1, R936 += 1, R900 += 1 };
  s3 -> s1 [0, 36] { R978 += 1, R936 += 1, R900 += 1 };
  s3 -> s4 [0, 65535] { R978 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R978 += 1, R936 += 1, R899 += 1, R900 += 1 };
  s3 -> s1 [38, 42] { R978 += 1, R936 += 1, R900 += 1 };
  s3 -> s1 [44, 57] { R978 += 1, R936 += 1, R900 += 1 };
  s3 -> s1 [59, 63] { R978 += 1, R936 += 1, R900 += 1 };
  s3 -> s1 [65, 65535] { R978 += 1, R936 += 1, R900 += 1 };
  s4 -> s4 [0, 65535] { R978 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R980 += 1, R938 += 1, R902 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R980 += 1, R937 += 1, R938 += 1 };
  s0 -> s3 [0, 65535] { R980 += 1, R938 += 1, R901 += 1, R902 += 1 };
  s0 -> s0 [0, 65535] { R979 += 1, R980 += 1 };
  s1 -> s1 [0, 65535] { R980 += 1, R938 += 1, R902 += 1, R2 += 1 };
  s1 -> s6 [0, 65535] { R980 += 1, R938 += 1 };
  s1 -> s4 [0, 65535] { R980 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R980 += 1, R938 += 1, R902 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R980 += 1, R937 += 1, R938 += 1 };
  s2 -> s3 [0, 65535] { R980 += 1, R938 += 1, R901 += 1, R902 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R980 += 1, R938 += 1, R902 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R980 += 1, R938 += 1, R901 += 1, R902 += 1 };
  s3 -> s4 [0, 65535] { R980 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R980 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R980 += 1, R938 += 1 };
  s6 -> s4 [0, 65535] { R980 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 43] { R982 += 1, R940 += 1, R904 += 1 };
  s0 -> s2 [0, 65535] { R982 += 1, R940 += 1, R903 += 1, R904 += 1 };
  s0 -> s0 [0, 65535] { R981 += 1, R982 += 1 };
  s0 -> s3 [0, 65535] { R982 += 1, R939 += 1, R940 += 1 };
  s0 -> s1 [45, 57] { R982 += 1, R940 += 1, R904 += 1 };
  s0 -> s4 [58, 58] { R982 += 1, R940 += 1, R904 += 1 };
  s0 -> s1 [59, 65535] { R982 += 1, R940 += 1, R904 += 1 };
  s1 -> s1 [0, 43] { R982 += 1, R940 += 1, R904 += 1 };
  s1 -> s1 [45, 57] { R982 += 1, R940 += 1, R904 += 1 };
  s1 -> s4 [58, 58] { R982 += 1, R940 += 1, R904 += 1 };
  s1 -> s1 [59, 65535] { R982 += 1, R940 += 1, R904 += 1 };
  s2 -> s1 [0, 43] { R982 += 1, R940 += 1, R904 += 1 };
  s2 -> s2 [0, 65535] { R982 += 1, R940 += 1, R903 += 1, R904 += 1 };
  s2 -> s1 [45, 57] { R982 += 1, R940 += 1, R904 += 1 };
  s2 -> s4 [58, 58] { R982 += 1, R940 += 1, R904 += 1 };
  s2 -> s1 [59, 65535] { R982 += 1, R940 += 1, R904 += 1 };
  s3 -> s1 [0, 43] { R982 += 1, R940 += 1, R904 += 1 };
  s3 -> s2 [0, 65535] { R982 += 1, R940 += 1, R903 += 1, R904 += 1 };
  s3 -> s3 [0, 65535] { R982 += 1, R939 += 1, R940 += 1 };
  s3 -> s1 [45, 57] { R982 += 1, R940 += 1, R904 += 1 };
  s3 -> s4 [58, 58] { R982 += 1, R940 += 1, R904 += 1 };
  s3 -> s1 [59, 65535] { R982 += 1, R940 += 1, R904 += 1 };
  s4 -> s4 [0, 43] { R982 += 1, R940 += 1, R904 += 1 };
  s4 -> s4 [0, 65535] { R982 += 1, R940 += 1 };
  s4 -> s5 [0, 65535] { R982 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [45, 65535] { R982 += 1, R940 += 1, R904 += 1 };
  s5 -> s5 [0, 65535] { R982 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R984 += 1, R941 += 1, R942 += 1 };
  s0 -> s2 [0, 65535] { R984 += 1, R942 += 1, R906 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R984 += 1, R942 += 1, R905 += 1, R906 += 1 };
  s0 -> s0 [0, 65535] { R983 += 1, R984 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R984 += 1, R941 += 1, R942 += 1 };
  s1 -> s2 [0, 65535] { R984 += 1, R942 += 1, R906 += 1, R4 += 1 };
  s1 -> s3 [0, 65535] { R984 += 1, R942 += 1, R905 += 1, R906 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R984 += 1, R942 += 1 };
  s2 -> s5 [0, 65535] { R984 += 1 };
  s2 -> s2 [0, 65535] { R984 += 1, R942 += 1, R906 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R984 += 1 };
  s3 -> s2 [0, 65535] { R984 += 1, R942 += 1, R906 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R984 += 1, R942 += 1, R905 += 1, R906 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R984 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R984 += 1, R942 += 1 };
  s6 -> s5 [0, 65535] { R984 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 57] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s0 -> s2 [0, 65535] { R986 += 1, R943 += 1, R944 += 1 };
  s0 -> s3 [0, 65535] { R986 += 1, R944 += 1, R907 += 1, R908 += 1 };
  s0 -> s4 [0, 65535] { R986 += 1, R944 += 1, R908 += 1, R507 += 1, R508 += 1 };
  s0 -> s0 [0, 65535] { R985 += 1, R986 += 1 };
  s0 -> s5 [58, 58] { R986 += 1, R944 += 1, R908 += 1 };
  s0 -> s1 [59, 65535] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s1 -> s1 [0, 57] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s1 -> s5 [58, 58] { R986 += 1, R944 += 1, R908 += 1 };
  s1 -> s1 [59, 65535] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s2 -> s1 [0, 57] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s2 -> s2 [0, 65535] { R986 += 1, R943 += 1, R944 += 1 };
  s2 -> s3 [0, 65535] { R986 += 1, R944 += 1, R907 += 1, R908 += 1 };
  s2 -> s4 [0, 65535] { R986 += 1, R944 += 1, R908 += 1, R507 += 1, R508 += 1 };
  s2 -> s5 [58, 58] { R986 += 1, R944 += 1, R908 += 1 };
  s2 -> s1 [59, 65535] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s3 -> s1 [0, 57] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s3 -> s3 [0, 65535] { R986 += 1, R944 += 1, R907 += 1, R908 += 1 };
  s3 -> s4 [0, 65535] { R986 += 1, R944 += 1, R908 += 1, R507 += 1, R508 += 1 };
  s3 -> s5 [58, 58] { R986 += 1, R944 += 1, R908 += 1 };
  s3 -> s1 [59, 65535] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s4 -> s1 [0, 57] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s4 -> s4 [0, 65535] { R986 += 1, R944 += 1, R908 += 1, R507 += 1, R508 += 1 };
  s4 -> s5 [58, 58] { R986 += 1, R944 += 1, R908 += 1 };
  s4 -> s1 [59, 65535] { R986 += 1, R944 += 1, R908 += 1, R508 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R986 += 1 };
  s5 -> s8 [0, 65535] { R986 += 1, R944 += 1 };
  s5 -> s5 [0, 65535] { R986 += 1, R944 += 1, R908 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R986 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R986 += 1 };
  s8 -> s8 [0, 65535] { R986 += 1, R944 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 90] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s0 -> s2 [0, 65535] { R988 += 1, R945 += 1, R946 += 1 };
  s0 -> s3 [0, 65535] { R988 += 1, R946 += 1, R909 += 1, R910 += 1 };
  s0 -> s4 [0, 65535] { R988 += 1, R946 += 1, R910 += 1, R883 += 1, R884 += 1 };
  s0 -> s0 [0, 65535] { R987 += 1, R988 += 1 };
  s0 -> s5 [91, 91] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s0 -> s1 [92, 65535] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s1 -> s1 [0, 65535] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s1 -> s9 [0, 65535] { R988 += 1, R946 += 1, R910 += 1 };
  s1 -> s6 [0, 65535] { R988 += 1 };
  s1 -> s7 [0, 65535] { R988 += 1, R946 += 1 };
  s1 -> s8 [0, 65535];
  s2 -> s1 [0, 90] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s2 -> s2 [0, 65535] { R988 += 1, R945 += 1, R946 += 1 };
  s2 -> s3 [0, 65535] { R988 += 1, R946 += 1, R909 += 1, R910 += 1 };
  s2 -> s4 [0, 65535] { R988 += 1, R946 += 1, R910 += 1, R883 += 1, R884 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [91, 91] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s2 -> s1 [92, 65535] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s3 -> s1 [0, 90] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s3 -> s6 [0, 65535] { R988 += 1 };
  s3 -> s3 [0, 65535] { R988 += 1, R946 += 1, R909 += 1, R910 += 1 };
  s3 -> s4 [0, 65535] { R988 += 1, R946 += 1, R910 += 1, R883 += 1, R884 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s5 [91, 91] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s3 -> s1 [92, 65535] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s4 -> s1 [0, 90] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s4 -> s6 [0, 65535] { R988 += 1 };
  s4 -> s7 [0, 65535] { R988 += 1, R946 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R988 += 1, R946 += 1, R910 += 1, R883 += 1, R884 += 1 };
  s4 -> s5 [91, 91] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s4 -> s1 [92, 65535] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s5 -> s1 [0, 65535] { R988 += 1, R946 += 1, R910 += 1, R884 += 1 };
  s6 -> s6 [0, 65535] { R988 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R988 += 1 };
  s7 -> s7 [0, 65535] { R988 += 1, R946 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R988 += 1, R946 += 1, R910 += 1 };
  s9 -> s6 [0, 65535] { R988 += 1 };
  s9 -> s7 [0, 65535] { R988 += 1, R946 += 1 };
  s9 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R990 += 1, R948 += 1, R912 += 1, R885 += 1, R886 += 1 };
  s0 -> s2 [0, 65535] { R990 += 1, R948 += 1, R911 += 1, R912 += 1 };
  s0 -> s3 [0, 65535] { R990 += 1, R948 += 1, R912 += 1, R886 += 1, R9 += 1 };
  s0 -> s4 [0, 65535] { R990 += 1, R947 += 1, R948 += 1 };
  s0 -> s0 [0, 65535] { R989 += 1, R990 += 1 };
  s1 -> s6 [0, 65535] { R990 += 1, R948 += 1 };
  s1 -> s1 [0, 65535] { R990 += 1, R948 += 1, R912 += 1, R885 += 1, R886 += 1 };
  s1 -> s3 [0, 65535] { R990 += 1, R948 += 1, R912 += 1, R886 += 1, R9 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R990 += 1 };
  s2 -> s1 [0, 65535] { R990 += 1, R948 += 1, R912 += 1, R885 += 1, R886 += 1 };
  s2 -> s2 [0, 65535] { R990 += 1, R948 += 1, R911 += 1, R912 += 1 };
  s2 -> s3 [0, 65535] { R990 += 1, R948 += 1, R912 += 1, R886 += 1, R9 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s8 [0, 65535] { R990 += 1 };
  s3 -> s6 [0, 65535] { R990 += 1, R948 += 1 };
  s3 -> s3 [0, 65535] { R990 += 1, R948 += 1, R912 += 1, R886 += 1, R9 += 1 };
  s3 -> s7 [0, 65535] { R990 += 1, R948 += 1, R912 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s8 [0, 65535] { R990 += 1 };
  s4 -> s1 [0, 65535] { R990 += 1, R948 += 1, R912 += 1, R885 += 1, R886 += 1 };
  s4 -> s2 [0, 65535] { R990 += 1, R948 += 1, R911 += 1, R912 += 1 };
  s4 -> s3 [0, 65535] { R990 += 1, R948 += 1, R912 += 1, R886 += 1, R9 += 1 };
  s4 -> s4 [0, 65535] { R990 += 1, R947 += 1, R948 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R990 += 1, R948 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s8 [0, 65535] { R990 += 1 };
  s7 -> s6 [0, 65535] { R990 += 1, R948 += 1 };
  s7 -> s7 [0, 65535] { R990 += 1, R948 += 1, R912 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s8 [0, 65535] { R990 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R990 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 57] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s0 -> s2 [0, 65535] { R992 += 1, R950 += 1, R913 += 1, R914 += 1 };
  s0 -> s3 [0, 65535] { R992 += 1, R950 += 1, R914 += 1, R891 += 1, R892 += 1 };
  s0 -> s0 [0, 65535] { R991 += 1, R992 += 1 };
  s0 -> s4 [0, 65535] { R992 += 1, R949 += 1, R950 += 1 };
  s0 -> s1 [59, 65535] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s1 -> s1 [0, 57] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s1 -> s1 [0, 65535] { R992 += 1, R950 += 1, R914 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R992 += 1, R950 += 1 };
  s1 -> s7 [0, 65535] { R992 += 1 };
  s1 -> s1 [59, 65535] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s2 -> s1 [0, 57] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s2 -> s2 [0, 65535] { R992 += 1, R950 += 1, R913 += 1, R914 += 1 };
  s2 -> s3 [0, 65535] { R992 += 1, R950 += 1, R914 += 1, R891 += 1, R892 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R992 += 1 };
  s2 -> s1 [59, 65535] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s3 -> s1 [0, 57] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s3 -> s3 [0, 65535] { R992 += 1, R950 += 1, R914 += 1, R891 += 1, R892 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R992 += 1, R950 += 1 };
  s3 -> s7 [0, 65535] { R992 += 1 };
  s3 -> s1 [59, 65535] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s4 -> s1 [0, 57] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s4 -> s2 [0, 65535] { R992 += 1, R950 += 1, R913 += 1, R914 += 1 };
  s4 -> s3 [0, 65535] { R992 += 1, R950 += 1, R914 += 1, R891 += 1, R892 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R992 += 1, R949 += 1, R950 += 1 };
  s4 -> s1 [59, 65535] { R992 += 1, R950 += 1, R914 += 1, R892 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R992 += 1, R950 += 1 };
  s6 -> s7 [0, 65535] { R992 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R992 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R993 += 1, R994 += 1 };
  s0 -> s1 [0, 65535] { R994 += 1, R952 += 1, R915 += 1, R916 += 1 };
  s0 -> s2 [0, 65535] { R994 += 1, R952 += 1, R916 += 1, R894 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R994 += 1, R951 += 1, R952 += 1 };
  s0 -> s4 [0, 65535] { R994 += 1, R952 += 1, R916 += 1, R893 += 1, R894 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R994 += 1, R952 += 1, R915 += 1, R916 += 1 };
  s1 -> s7 [0, 65535] { R994 += 1 };
  s1 -> s2 [0, 65535] { R994 += 1, R952 += 1, R916 += 1, R894 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R994 += 1, R952 += 1, R916 += 1, R893 += 1, R894 += 1 };
  s2 -> s5 [0, 65535] { R994 += 1, R952 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R994 += 1, R952 += 1, R916 += 1 };
  s2 -> s7 [0, 65535] { R994 += 1 };
  s2 -> s2 [0, 65535] { R994 += 1, R952 += 1, R916 += 1, R894 += 1, R1 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R994 += 1, R952 += 1, R915 += 1, R916 += 1 };
  s3 -> s2 [0, 65535] { R994 += 1, R952 += 1, R916 += 1, R894 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R994 += 1, R951 += 1, R952 += 1 };
  s3 -> s4 [0, 65535] { R994 += 1, R952 += 1, R916 += 1, R893 += 1, R894 += 1 };
  s4 -> s5 [0, 65535] { R994 += 1, R952 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R994 += 1 };
  s4 -> s2 [0, 65535] { R994 += 1, R952 += 1, R916 += 1, R894 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R994 += 1, R952 += 1, R916 += 1, R893 += 1, R894 += 1 };
  s5 -> s5 [0, 65535] { R994 += 1, R952 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R994 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R994 += 1 };
  s8 -> s5 [0, 65535] { R994 += 1, R952 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R994 += 1, R952 += 1, R916 += 1 };
  s8 -> s7 [0, 65535] { R994 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s0 -> s2 [0, 65535] { R996 += 1, R954 += 1, R917 += 1, R918 += 1 };
  s0 -> s3 [0, 65535] { R996 += 1, R953 += 1, R954 += 1 };
  s0 -> s4 [0, 65535] { R996 += 1, R954 += 1, R918 += 1, R895 += 1, R896 += 1 };
  s0 -> s0 [0, 65535] { R995 += 1, R996 += 1 };
  s0 -> s1 [91, 65535] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s1 -> s1 [0, 64] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s1 -> s5 [0, 65535] { R996 += 1 };
  s1 -> s1 [0, 65535] { R996 += 1, R954 += 1, R918 += 1 };
  s1 -> s6 [0, 65535] { R996 += 1, R954 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [91, 65535] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s2 -> s1 [0, 64] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s2 -> s2 [0, 65535] { R996 += 1, R954 += 1, R917 += 1, R918 += 1 };
  s2 -> s5 [0, 65535] { R996 += 1 };
  s2 -> s4 [0, 65535] { R996 += 1, R954 += 1, R918 += 1, R895 += 1, R896 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [91, 65535] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s3 -> s1 [0, 64] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s3 -> s2 [0, 65535] { R996 += 1, R954 += 1, R917 += 1, R918 += 1 };
  s3 -> s3 [0, 65535] { R996 += 1, R953 += 1, R954 += 1 };
  s3 -> s4 [0, 65535] { R996 += 1, R954 += 1, R918 += 1, R895 += 1, R896 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [91, 65535] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s4 -> s1 [0, 64] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s4 -> s5 [0, 65535] { R996 += 1 };
  s4 -> s4 [0, 65535] { R996 += 1, R954 += 1, R918 += 1, R895 += 1, R896 += 1 };
  s4 -> s6 [0, 65535] { R996 += 1, R954 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s1 [91, 65535] { R996 += 1, R954 += 1, R918 += 1, R896 += 1 };
  s5 -> s5 [0, 65535] { R996 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R996 += 1 };
  s6 -> s6 [0, 65535] { R996 += 1, R954 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R997 += 1, R998 += 1 };
  s0 -> s1 [0, 65535] { R998 += 1, R956 += 1, R919 += 1, R920 += 1 };
  s0 -> s2 [0, 65535] { R998 += 1, R956 += 1, R920 += 1, R897 += 1, R898 += 1 };
  s0 -> s3 [0, 65535] { R998 += 1, R956 += 1, R920 += 1, R898 += 1, R878 += 1 };
  s0 -> s4 [0, 65535] { R998 += 1, R955 += 1, R956 += 1 };
  s1 -> s1 [0, 65535] { R998 += 1, R956 += 1, R919 += 1, R920 += 1 };
  s1 -> s2 [0, 65535] { R998 += 1, R956 += 1, R920 += 1, R897 += 1, R898 += 1 };
  s1 -> s3 [0, 65535] { R998 += 1, R956 += 1, R920 += 1, R898 += 1, R878 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R998 += 1 };
  s2 -> s2 [0, 65535] { R998 += 1, R956 += 1, R920 += 1, R897 += 1, R898 += 1 };
  s2 -> s3 [0, 65535] { R998 += 1, R956 += 1, R920 += 1, R898 += 1, R878 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R998 += 1 };
  s2 -> s8 [0, 65535] { R998 += 1, R956 += 1 };
  s3 -> s6 [0, 65535] { R998 += 1, R956 += 1, R920 += 1 };
  s3 -> s3 [0, 65535] { R998 += 1, R956 += 1, R920 += 1, R898 += 1, R878 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R998 += 1 };
  s3 -> s8 [0, 65535] { R998 += 1, R956 += 1 };
  s4 -> s1 [0, 65535] { R998 += 1, R956 += 1, R919 += 1, R920 += 1 };
  s4 -> s2 [0, 65535] { R998 += 1, R956 += 1, R920 += 1, R897 += 1, R898 += 1 };
  s4 -> s3 [0, 65535] { R998 += 1, R956 += 1, R920 += 1, R898 += 1, R878 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R998 += 1, R955 += 1, R956 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R998 += 1, R956 += 1, R920 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s7 [0, 65535] { R998 += 1 };
  s6 -> s8 [0, 65535] { R998 += 1, R956 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R998 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R998 += 1 };
  s8 -> s8 [0, 65535] { R998 += 1, R956 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R890 && R4 = R894 && R5 = R920 && R6 = R930 && R7 = R998 && R11 = 0 && R507 = 0 && R508 - R893 = -1 && R755 = 0 && R756 = R956 && R879 = 0 && R880 = 1 && R881 = 0 && R882 = 1 && R883 = 0 && R884 = 1 && R885 = 0 && R886 = 1 && R887 = 1 && R888 = R890 && R889 = 1 && R891 = R893 && R892 = R894 && R899 = 0 && R900 = 4 && R901 = 0 && R902 = 4 && R903 = 5 && R904 = R920 && R905 = 5 && R906 = R920 && R907 = 5 && R908 = R920 && R909 = 5 && R910 = R920 && R911 = 5 && R912 = R920 && R913 = 5 && R914 = R920 && R915 = 5 && R916 = R920 && R917 = 5 && R918 = R920 && R919 = 5 && R921 - R956 = 1 && R922 = R930 && R923 - R956 = 1 && R924 = R930 && R925 - R956 = 1 && R926 = R930 && R927 - R956 = 1 && R928 = R930 && R929 - R956 = 1 && R931 = 0 && R932 = R956 && R933 = 0 && R934 = R956 && R935 = 0 && R936 = R956 && R937 = 0 && R938 = R956 && R939 = 0 && R940 = R956 && R941 = 0 && R942 = R956 && R943 = 0 && R944 = R956 && R945 = 0 && R946 = R956 && R947 = 0 && R948 = R956 && R949 = 0 && R950 = R956 && R951 = 0 && R952 = R956 && R953 = 0 && R954 = R956 && R955 = 0 && R957 = 10 && R958 = R998 && R959 = 10 && R960 = R998 && R961 = 10 && R962 = R998 && R963 = 10 && R964 = R998 && R965 = 10 && R966 = R998 && R967 = 10 && R968 = R998 && R969 = 10 && R970 = R998 && R971 = 10 && R972 = R998 && R973 = 10 && R974 = R998 && R975 = 10 && R976 = R998 && R977 = 10 && R978 = R998 && R979 = 10 && R980 = R998 && R981 = 10 && R982 = R998 && R983 = 10 && R984 = R998 && R985 = 10 && R986 = R998 && R987 = 10 && R988 = R998 && R989 = 10 && R990 = R998 && R991 = 10 && R992 = R998 && R993 = 10 && R994 = R998 && R995 = 10 && R996 = R998 && R997 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && -1 < R12 && 0 < R890 && R893 - R894 < 1 && 0 < R893 && 4 < R920 && R956 < R930 && -1 < R956 && 9 < R998 && (R895 != 0 || R893 - R896 = 1 || (R878 = 0 && R893 = 1)) && (R897 != 0 || R893 - R898 = 1 || (R878 = 0 && R893 = 1)) && (R895 = 0 || (R878 = 0 && R893 = 1)) && (R897 = 0 || (R878 = 0 && R893 = 1));
// End of Parikh automata intersection problem
