// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R1196, R1197, R1313, R1314, R1315, R1316, R1317, R1318, R1319, R1320, R1321, R1322, R1323, R1324, R1325, R1326, R1327, R1328, R1329, R1330, R1331, R1332, R1333, R1334, R1335, R1336, R1337, R1338, R1339, R1340, R1341, R1342, R1343, R1344, R1345, R1346, R1347, R1348, R1349, R1350, R1351, R1352, R1353, R1354, R1355, R1356, R1357, R1358, R1359, R1360, R1361, R1362, R1363, R1364, R1365, R1366, R1367, R1368, R1369, R1370, R1371, R1372, R1373, R1374, R1375, R1376, R1377, R1378, R1379, R1380, R1381, R1382, R1383, R1384, R1385, R1386, R1387, R1388, R1389, R1390, R1391, R1392, R1393, R1394, R1395, R1396, R1397, R1398, R1399, R1400, R1401, R1402, R1403, R1404, R1405, R1406, R1407, R1408, R1409, R1410, R1411, R1412, R1413, R1414, R1415, R1416, R1417, R1418, R1419, R1420, R1421, R1422, R1423, R1424, R1425, R1426, R1427, R2, R3, R4, R5, R6, R7, R8, R955, R958, R960, R961;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1385 += 1 };
  s0 -> s0 [0, 65535] { R1384 += 1, R1385 += 1 };
  s0 -> s2 [46, 46] { R1385 += 1 };
  s0 -> s3 [47, 47] { R1385 += 1 };
  s0 -> s1 [48, 65535] { R1385 += 1 };
  s1 -> s1 [0, 45] { R1385 += 1 };
  s1 -> s2 [46, 46] { R1385 += 1 };
  s1 -> s3 [47, 47] { R1385 += 1 };
  s1 -> s1 [48, 65535] { R1385 += 1 };
  s2 -> s1 [0, 45] { R1385 += 1 };
  s2 -> s2 [46, 46] { R1385 += 1 };
  s2 -> s3 [47, 47] { R1385 += 1 };
  s2 -> s1 [48, 114] { R1385 += 1 };
  s2 -> s8 [115, 115] { R1385 += 1 };
  s2 -> s1 [116, 65535] { R1385 += 1 };
  s3 -> s3 [0, 45] { R1385 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1385 += 1 };
  s3 -> s3 [47, 65535] { R1385 += 1 };
  s4 -> s3 [0, 45] { R1385 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1385 += 1 };
  s4 -> s3 [47, 114] { R1385 += 1 };
  s4 -> s5 [115, 115] { R1385 += 1 };
  s4 -> s3 [116, 65535] { R1385 += 1 };
  s5 -> s3 [0, 45] { R1385 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1385 += 1 };
  s5 -> s3 [47, 110] { R1385 += 1 };
  s5 -> s6 [111, 111] { R1385 += 1 };
  s5 -> s3 [112, 65535] { R1385 += 1 };
  s6 -> s3 [0, 45] { R1385 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1385 += 1 };
  s6 -> s3 [47, 98] { R1385 += 1 };
  s6 -> s7 [99, 99] { R1385 += 1 };
  s6 -> s3 [100, 65535] { R1385 += 1 };
  s7 -> s3 [0, 45] { R1385 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1385 += 1 };
  s7 -> s3 [47, 106] { R1385 += 1 };
  s7 -> s3 [108, 65535] { R1385 += 1 };
  s8 -> s1 [0, 45] { R1385 += 1 };
  s8 -> s2 [46, 46] { R1385 += 1 };
  s8 -> s3 [47, 47] { R1385 += 1 };
  s8 -> s1 [48, 110] { R1385 += 1 };
  s8 -> s9 [111, 111] { R1385 += 1 };
  s8 -> s1 [112, 65535] { R1385 += 1 };
  s9 -> s1 [0, 45] { R1385 += 1 };
  s9 -> s2 [46, 46] { R1385 += 1 };
  s9 -> s3 [47, 47] { R1385 += 1 };
  s9 -> s1 [48, 98] { R1385 += 1 };
  s9 -> s10 [99, 99] { R1385 += 1 };
  s9 -> s1 [100, 65535] { R1385 += 1 };
  s10 -> s1 [0, 45] { R1385 += 1 };
  s10 -> s2 [46, 46] { R1385 += 1 };
  s10 -> s3 [47, 47] { R1385 += 1 };
  s10 -> s1 [48, 106] { R1385 += 1 };
  s10 -> s1 [108, 65535] { R1385 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1387 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1386 += 1, R1387 += 1 };
  s1 -> s1 [0, 65535] { R1387 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1389 += 1, R1197 += 1 };
  s0 -> s2 [0, 65535] { R1389 += 1, R1196 += 1, R1197 += 1 };
  s0 -> s0 [0, 65535] { R1388 += 1, R1389 += 1 };
  s0 -> s3 [47, 47] { R1389 += 1 };
  s0 -> s1 [48, 65535] { R1389 += 1, R1197 += 1 };
  s1 -> s1 [0, 46] { R1389 += 1, R1197 += 1 };
  s1 -> s3 [47, 47] { R1389 += 1 };
  s1 -> s1 [48, 65535] { R1389 += 1, R1197 += 1 };
  s2 -> s1 [0, 46] { R1389 += 1, R1197 += 1 };
  s2 -> s2 [0, 65535] { R1389 += 1, R1196 += 1, R1197 += 1 };
  s2 -> s3 [47, 47] { R1389 += 1 };
  s2 -> s1 [48, 65535] { R1389 += 1, R1197 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1389 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 62] { R1391 += 1, R1347 += 1 };
  s0 -> s2 [0, 65535] { R1391 += 1, R1346 += 1, R1347 += 1 };
  s0 -> s0 [0, 65535] { R1390 += 1, R1391 += 1 };
  s0 -> s3 [63, 63] { R1391 += 1, R1347 += 1 };
  s0 -> s1 [64, 65535] { R1391 += 1, R1347 += 1 };
  s1 -> s1 [0, 62] { R1391 += 1, R1347 += 1 };
  s1 -> s3 [63, 63] { R1391 += 1, R1347 += 1 };
  s1 -> s1 [64, 65535] { R1391 += 1, R1347 += 1 };
  s2 -> s1 [0, 62] { R1391 += 1, R1347 += 1 };
  s2 -> s2 [0, 65535] { R1391 += 1, R1346 += 1, R1347 += 1 };
  s2 -> s3 [63, 63] { R1391 += 1, R1347 += 1 };
  s2 -> s1 [64, 65535] { R1391 += 1, R1347 += 1 };
  s3 -> s3 [0, 65535] { R1391 += 1, R1347 += 1 };
  s3 -> s4 [0, 65535] { R1391 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1391 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1392 += 1, R1393 += 1 };
  s0 -> s1 [0, 65535] { R1393 += 1, R1349 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R1393 += 1, R1348 += 1, R1349 += 1 };
  s1 -> s4 [0, 65535] { R1393 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1393 += 1, R1349 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1393 += 1, R1349 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1393 += 1, R1348 += 1, R1349 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1393 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R1395 += 1, R1351 += 1, R961 += 1 };
  s0 -> s2 [0, 65535] { R1395 += 1, R1351 += 1, R960 += 1, R961 += 1 };
  s0 -> s3 [0, 65535] { R1395 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s0 [0, 65535] { R1394 += 1, R1395 += 1 };
  s0 -> s4 [63, 63] { R1395 += 1, R1351 += 1 };
  s0 -> s1 [64, 65535] { R1395 += 1, R1351 += 1, R961 += 1 };
  s1 -> s1 [0, 62] { R1395 += 1, R1351 += 1, R961 += 1 };
  s1 -> s4 [63, 63] { R1395 += 1, R1351 += 1 };
  s1 -> s1 [64, 65535] { R1395 += 1, R1351 += 1, R961 += 1 };
  s2 -> s1 [0, 62] { R1395 += 1, R1351 += 1, R961 += 1 };
  s2 -> s2 [0, 65535] { R1395 += 1, R1351 += 1, R960 += 1, R961 += 1 };
  s2 -> s4 [63, 63] { R1395 += 1, R1351 += 1 };
  s2 -> s1 [64, 65535] { R1395 += 1, R1351 += 1, R961 += 1 };
  s3 -> s1 [0, 62] { R1395 += 1, R1351 += 1, R961 += 1 };
  s3 -> s2 [0, 65535] { R1395 += 1, R1351 += 1, R960 += 1, R961 += 1 };
  s3 -> s3 [0, 65535] { R1395 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s4 [63, 63] { R1395 += 1, R1351 += 1 };
  s3 -> s1 [64, 65535] { R1395 += 1, R1351 += 1, R961 += 1 };
  s4 -> s4 [0, 65535] { R1395 += 1, R1351 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1395 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1395 += 1 };
  accepting s4, s5, s6;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 62] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s0 -> s2 [0, 65535] { R1397 += 1, R1353 += 1, R1318 += 1, R1319 += 1 };
  s0 -> s0 [0, 65535] { R1396 += 1, R1397 += 1 };
  s0 -> s3 [0, 65535] { R1397 += 1, R1352 += 1, R1353 += 1 };
  s0 -> s4 [63, 63] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s0 -> s1 [64, 65535] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s1 -> s1 [0, 65535] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R1397 += 1, R1353 += 1 };
  s1 -> s6 [0, 65535] { R1397 += 1 };
  s2 -> s1 [0, 62] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s2 -> s2 [0, 65535] { R1397 += 1, R1353 += 1, R1318 += 1, R1319 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1397 += 1 };
  s2 -> s4 [63, 63] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s2 -> s1 [64, 65535] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s3 -> s1 [0, 62] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s3 -> s2 [0, 65535] { R1397 += 1, R1353 += 1, R1318 += 1, R1319 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1397 += 1, R1352 += 1, R1353 += 1 };
  s3 -> s4 [63, 63] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s3 -> s1 [64, 65535] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s4 -> s1 [0, 65535] { R1397 += 1, R1353 += 1, R1319 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1397 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1397 += 1, R1353 += 1 };
  s7 -> s6 [0, 65535] { R1397 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1399 += 1, R1355 += 1, R1320 += 1, R1321 += 1 };
  s0 -> s2 [0, 65535] { R1399 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s3 [0, 65535] { R1399 += 1, R1355 += 1, R1321 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1398 += 1, R1399 += 1 };
  s1 -> s4 [0, 65535] { R1399 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1399 += 1, R1355 += 1, R1320 += 1, R1321 += 1 };
  s1 -> s3 [0, 65535] { R1399 += 1, R1355 += 1, R1321 += 1, R8 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1399 += 1, R1355 += 1, R1320 += 1, R1321 += 1 };
  s2 -> s2 [0, 65535] { R1399 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s3 [0, 65535] { R1399 += 1, R1355 += 1, R1321 += 1, R8 += 1 };
  s3 -> s4 [0, 65535] { R1399 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1399 += 1, R1355 += 1, R1321 += 1, R8 += 1 };
  s3 -> s6 [0, 65535] { R1399 += 1, R1355 += 1 };
  s4 -> s4 [0, 65535] { R1399 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1399 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1399 += 1, R1355 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R1401 += 1, R1357 += 1, R1322 += 1, R1323 += 1 };
  s0 -> s2 [0, 65535] { R1401 += 1, R1356 += 1, R1357 += 1 };
  s0 -> s0 [0, 65535] { R1400 += 1, R1401 += 1 };
  s0 -> s3 [0, 65535] { R1401 += 1, R1357 += 1, R1323 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1401 += 1, R1357 += 1, R1322 += 1, R1323 += 1 };
  s1 -> s5 [0, 65535] { R1401 += 1 };
  s1 -> s3 [0, 65535] { R1401 += 1, R1357 += 1, R1323 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1401 += 1, R1357 += 1, R1322 += 1, R1323 += 1 };
  s2 -> s2 [0, 65535] { R1401 += 1, R1356 += 1, R1357 += 1 };
  s2 -> s3 [0, 65535] { R1401 += 1, R1357 += 1, R1323 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1401 += 1 };
  s3 -> s6 [0, 65535] { R1401 += 1, R1357 += 1 };
  s3 -> s3 [0, 65535] { R1401 += 1, R1357 += 1, R1323 += 1, R0 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1401 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1401 += 1 };
  s6 -> s6 [0, 65535] { R1401 += 1, R1357 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 58] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R1402 += 1, R1403 += 1 };
  s0 -> s2 [0, 65535] { R1403 += 1, R1358 += 1, R1359 += 1 };
  s0 -> s3 [0, 65535] { R1403 += 1, R1359 += 1, R1324 += 1, R1325 += 1 };
  s0 -> s4 [0, 65535] { R1403 += 1, R1359 += 1, R1325 += 1, R10 += 1, R11 += 1 };
  s0 -> s5 [59, 59] { R1403 += 1, R1359 += 1, R1325 += 1 };
  s0 -> s1 [60, 65535] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s1 -> s1 [0, 58] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s1 -> s5 [59, 59] { R1403 += 1, R1359 += 1, R1325 += 1 };
  s1 -> s1 [60, 65535] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s2 -> s1 [0, 58] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R1403 += 1, R1358 += 1, R1359 += 1 };
  s2 -> s3 [0, 65535] { R1403 += 1, R1359 += 1, R1324 += 1, R1325 += 1 };
  s2 -> s4 [0, 65535] { R1403 += 1, R1359 += 1, R1325 += 1, R10 += 1, R11 += 1 };
  s2 -> s5 [59, 59] { R1403 += 1, R1359 += 1, R1325 += 1 };
  s2 -> s1 [60, 65535] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s3 -> s1 [0, 58] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R1403 += 1, R1359 += 1, R1324 += 1, R1325 += 1 };
  s3 -> s4 [0, 65535] { R1403 += 1, R1359 += 1, R1325 += 1, R10 += 1, R11 += 1 };
  s3 -> s5 [59, 59] { R1403 += 1, R1359 += 1, R1325 += 1 };
  s3 -> s1 [60, 65535] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s4 -> s1 [0, 58] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s4 -> s4 [0, 65535] { R1403 += 1, R1359 += 1, R1325 += 1, R10 += 1, R11 += 1 };
  s4 -> s5 [59, 59] { R1403 += 1, R1359 += 1, R1325 += 1 };
  s4 -> s1 [60, 65535] { R1403 += 1, R1359 += 1, R1325 += 1, R11 += 1 };
  s5 -> s5 [0, 65535] { R1403 += 1, R1359 += 1, R1325 += 1 };
  s5 -> s6 [0, 65535] { R1403 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1403 += 1, R1359 += 1 };
  s6 -> s6 [0, 65535] { R1403 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1403 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1403 += 1, R1359 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 37] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s0 -> s2 [0, 65535] { R1405 += 1, R1361 += 1, R1327 += 1, R955 += 1 };
  s0 -> s3 [0, 65535] { R1405 += 1, R1361 += 1, R1326 += 1, R1327 += 1 };
  s0 -> s4 [0, 65535] { R1405 += 1, R1360 += 1, R1361 += 1 };
  s0 -> s0 [0, 65535] { R1404 += 1, R1405 += 1 };
  s0 -> s5 [38, 38] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s0 -> s1 [39, 65535] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s1 -> s1 [0, 37] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s1 -> s1 [0, 65535] { R1405 += 1, R1361 += 1 };
  s1 -> s7 [0, 65535] { R1405 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [38, 38] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s1 -> s1 [39, 65535] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s2 -> s1 [0, 37] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s2 -> s2 [0, 65535] { R1405 += 1, R1361 += 1, R1327 += 1, R955 += 1 };
  s2 -> s8 [0, 65535] { R1405 += 1, R1361 += 1 };
  s2 -> s7 [0, 65535] { R1405 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [38, 38] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s2 -> s1 [39, 65535] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s3 -> s1 [0, 37] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s3 -> s2 [0, 65535] { R1405 += 1, R1361 += 1, R1327 += 1, R955 += 1 };
  s3 -> s3 [0, 65535] { R1405 += 1, R1361 += 1, R1326 += 1, R1327 += 1 };
  s3 -> s7 [0, 65535] { R1405 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [38, 38] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s3 -> s1 [39, 65535] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s4 -> s1 [0, 37] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s4 -> s2 [0, 65535] { R1405 += 1, R1361 += 1, R1327 += 1, R955 += 1 };
  s4 -> s3 [0, 65535] { R1405 += 1, R1361 += 1, R1326 += 1, R1327 += 1 };
  s4 -> s4 [0, 65535] { R1405 += 1, R1360 += 1, R1361 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [38, 38] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s4 -> s1 [39, 65535] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s5 -> s5 [0, 65535] { R1405 += 1, R1361 += 1, R1327 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1405 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1405 += 1, R1361 += 1 };
  s8 -> s7 [0, 65535] { R1405 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 45] { R1407 += 1, R1363 += 1, R1329 += 1 };
  s0 -> s0 [0, 65535] { R1406 += 1, R1407 += 1 };
  s0 -> s2 [0, 65535] { R1407 += 1, R1362 += 1, R1363 += 1 };
  s0 -> s3 [0, 65535] { R1407 += 1, R1363 += 1, R1328 += 1, R1329 += 1 };
  s0 -> s1 [47, 65535] { R1407 += 1, R1363 += 1, R1329 += 1 };
  s1 -> s1 [0, 45] { R1407 += 1, R1363 += 1, R1329 += 1 };
  s1 -> s4 [0, 65535] { R1407 += 1 };
  s1 -> s1 [0, 65535] { R1407 += 1, R1363 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [47, 65535] { R1407 += 1, R1363 += 1, R1329 += 1 };
  s2 -> s1 [0, 45] { R1407 += 1, R1363 += 1, R1329 += 1 };
  s2 -> s2 [0, 65535] { R1407 += 1, R1362 += 1, R1363 += 1 };
  s2 -> s3 [0, 65535] { R1407 += 1, R1363 += 1, R1328 += 1, R1329 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [47, 65535] { R1407 += 1, R1363 += 1, R1329 += 1 };
  s3 -> s1 [0, 45] { R1407 += 1, R1363 += 1, R1329 += 1 };
  s3 -> s4 [0, 65535] { R1407 += 1 };
  s3 -> s3 [0, 65535] { R1407 += 1, R1363 += 1, R1328 += 1, R1329 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [47, 65535] { R1407 += 1, R1363 += 1, R1329 += 1 };
  s4 -> s4 [0, 65535] { R1407 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1409 += 1, R1365 += 1, R1330 += 1, R1331 += 1 };
  s0 -> s2 [0, 65535] { R1409 += 1, R1365 += 1, R1331 += 1, R1313 += 1 };
  s0 -> s0 [0, 65535] { R1408 += 1, R1409 += 1 };
  s0 -> s3 [0, 65535] { R1409 += 1, R1364 += 1, R1365 += 1 };
  s1 -> s1 [0, 65535] { R1409 += 1, R1365 += 1, R1330 += 1, R1331 += 1 };
  s1 -> s2 [0, 65535] { R1409 += 1, R1365 += 1, R1331 += 1, R1313 += 1 };
  s1 -> s5 [0, 65535] { R1409 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1409 += 1, R1365 += 1, R1331 += 1, R1313 += 1 };
  s2 -> s5 [0, 65535] { R1409 += 1 };
  s2 -> s6 [0, 65535] { R1409 += 1, R1365 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1409 += 1, R1365 += 1, R1330 += 1, R1331 += 1 };
  s3 -> s2 [0, 65535] { R1409 += 1, R1365 += 1, R1331 += 1, R1313 += 1 };
  s3 -> s3 [0, 65535] { R1409 += 1, R1364 += 1, R1365 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1409 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1409 += 1 };
  s6 -> s6 [0, 65535] { R1409 += 1, R1365 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 63] { R1411 += 1, R1367 += 1 };
  s0 -> s0 [0, 65535] { R1410 += 1, R1411 += 1 };
  s0 -> s2 [0, 65535] { R1411 += 1, R1366 += 1, R1367 += 1 };
  s0 -> s3 [64, 64] { R1411 += 1, R1367 += 1 };
  s0 -> s1 [65, 65535] { R1411 += 1, R1367 += 1 };
  s1 -> s1 [0, 63] { R1411 += 1, R1367 += 1 };
  s1 -> s3 [64, 64] { R1411 += 1, R1367 += 1 };
  s1 -> s1 [65, 65535] { R1411 += 1, R1367 += 1 };
  s2 -> s1 [0, 63] { R1411 += 1, R1367 += 1 };
  s2 -> s2 [0, 65535] { R1411 += 1, R1366 += 1, R1367 += 1 };
  s2 -> s3 [64, 64] { R1411 += 1, R1367 += 1 };
  s2 -> s1 [65, 65535] { R1411 += 1, R1367 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1411 += 1, R1367 += 1 };
  s3 -> s5 [0, 65535] { R1411 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1411 += 1 };
  accepting s3, s4, s5;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R1412 += 1, R1413 += 1 };
  s0 -> s1 [0, 65535] { R1413 += 1, R1369 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1413 += 1, R1368 += 1, R1369 += 1 };
  s1 -> s4 [0, 65535] { R1413 += 1 };
  s1 -> s1 [0, 65535] { R1413 += 1, R1369 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1413 += 1, R1369 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1413 += 1, R1368 += 1, R1369 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1413 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 36] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s0 -> s2 [0, 65535] { R1415 += 1, R1371 += 1, R1332 += 1, R1333 += 1 };
  s0 -> s0 [0, 65535] { R1414 += 1, R1415 += 1 };
  s0 -> s3 [0, 65535] { R1415 += 1, R1370 += 1, R1371 += 1 };
  s0 -> s1 [38, 42] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s0 -> s1 [44, 57] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s0 -> s1 [59, 63] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s0 -> s1 [65, 65535] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s1 -> s1 [0, 36] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s1 -> s5 [0, 65535] { R1415 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1415 += 1, R1371 += 1 };
  s1 -> s1 [38, 42] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s1 -> s1 [44, 57] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s1 -> s1 [59, 63] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s1 -> s1 [65, 65535] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s2 -> s1 [0, 36] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s2 -> s5 [0, 65535] { R1415 += 1 };
  s2 -> s2 [0, 65535] { R1415 += 1, R1371 += 1, R1332 += 1, R1333 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [38, 42] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s2 -> s1 [44, 57] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s2 -> s1 [59, 63] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s2 -> s1 [65, 65535] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s3 -> s1 [0, 36] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s3 -> s2 [0, 65535] { R1415 += 1, R1371 += 1, R1332 += 1, R1333 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1415 += 1, R1370 += 1, R1371 += 1 };
  s3 -> s1 [38, 42] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s3 -> s1 [44, 57] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s3 -> s1 [59, 63] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s3 -> s1 [65, 65535] { R1415 += 1, R1371 += 1, R1333 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1415 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1417 += 1, R1372 += 1, R1373 += 1 };
  s0 -> s2 [0, 65535] { R1417 += 1, R1373 += 1, R1335 += 1, R2 += 1 };
  s0 -> s3 [0, 65535] { R1417 += 1, R1373 += 1, R1334 += 1, R1335 += 1 };
  s0 -> s0 [0, 65535] { R1416 += 1, R1417 += 1 };
  s1 -> s1 [0, 65535] { R1417 += 1, R1372 += 1, R1373 += 1 };
  s1 -> s2 [0, 65535] { R1417 += 1, R1373 += 1, R1335 += 1, R2 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1417 += 1, R1373 += 1, R1334 += 1, R1335 += 1 };
  s2 -> s2 [0, 65535] { R1417 += 1, R1373 += 1, R1335 += 1, R2 += 1 };
  s2 -> s6 [0, 65535] { R1417 += 1, R1373 += 1 };
  s2 -> s4 [0, 65535] { R1417 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1417 += 1, R1373 += 1, R1335 += 1, R2 += 1 };
  s3 -> s4 [0, 65535] { R1417 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1417 += 1, R1373 += 1, R1334 += 1, R1335 += 1 };
  s4 -> s4 [0, 65535] { R1417 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1417 += 1, R1373 += 1 };
  s6 -> s4 [0, 65535] { R1417 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 43] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s0 -> s2 [0, 65535] { R1419 += 1, R1374 += 1, R1375 += 1 };
  s0 -> s3 [0, 65535] { R1419 += 1, R1375 += 1, R1336 += 1, R1337 += 1 };
  s0 -> s0 [0, 65535] { R1418 += 1, R1419 += 1 };
  s0 -> s1 [45, 64] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s0 -> s1 [91, 65535] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s1 -> s1 [0, 43] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1419 += 1 };
  s1 -> s1 [0, 65535] { R1419 += 1, R1375 += 1 };
  s1 -> s1 [45, 64] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s1 -> s1 [91, 65535] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s2 -> s1 [0, 43] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s2 -> s2 [0, 65535] { R1419 += 1, R1374 += 1, R1375 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1419 += 1, R1375 += 1, R1336 += 1, R1337 += 1 };
  s2 -> s1 [45, 64] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s2 -> s1 [91, 65535] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s3 -> s1 [0, 43] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1419 += 1 };
  s3 -> s3 [0, 65535] { R1419 += 1, R1375 += 1, R1336 += 1, R1337 += 1 };
  s3 -> s1 [45, 64] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s3 -> s1 [91, 65535] { R1419 += 1, R1375 += 1, R1337 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1419 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R1421 += 1, R1376 += 1, R1377 += 1 };
  s0 -> s2 [0, 65535] { R1421 += 1, R1377 += 1, R1339 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1420 += 1, R1421 += 1 };
  s0 -> s3 [0, 65535] { R1421 += 1, R1377 += 1, R1338 += 1, R1339 += 1 };
  s1 -> s1 [0, 65535] { R1421 += 1, R1376 += 1, R1377 += 1 };
  s1 -> s2 [0, 65535] { R1421 += 1, R1377 += 1, R1339 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1421 += 1, R1377 += 1, R1338 += 1, R1339 += 1 };
  s2 -> s4 [0, 65535] { R1421 += 1 };
  s2 -> s2 [0, 65535] { R1421 += 1, R1377 += 1, R1339 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1421 += 1, R1377 += 1 };
  s3 -> s4 [0, 65535] { R1421 += 1 };
  s3 -> s2 [0, 65535] { R1421 += 1, R1377 += 1, R1339 += 1, R1 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1421 += 1, R1377 += 1, R1338 += 1, R1339 += 1 };
  s4 -> s4 [0, 65535] { R1421 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1421 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1421 += 1, R1377 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 57] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s0 -> s2 [0, 65535] { R1423 += 1, R1379 += 1, R1340 += 1, R1341 += 1 };
  s0 -> s0 [0, 65535] { R1422 += 1, R1423 += 1 };
  s0 -> s3 [0, 65535] { R1423 += 1, R1379 += 1, R1341 += 1, R958 += 1 };
  s0 -> s4 [0, 65535] { R1423 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s5 [58, 58] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s0 -> s1 [59, 65535] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s1 -> s1 [0, 57] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s1 -> s7 [0, 65535] { R1423 += 1 };
  s1 -> s1 [0, 65535] { R1423 += 1, R1379 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [58, 58] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s1 -> s1 [59, 65535] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s2 -> s1 [0, 57] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s2 -> s2 [0, 65535] { R1423 += 1, R1379 += 1, R1340 += 1, R1341 += 1 };
  s2 -> s7 [0, 65535] { R1423 += 1 };
  s2 -> s3 [0, 65535] { R1423 += 1, R1379 += 1, R1341 += 1, R958 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [58, 58] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s2 -> s1 [59, 65535] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s3 -> s1 [0, 57] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s3 -> s7 [0, 65535] { R1423 += 1 };
  s3 -> s3 [0, 65535] { R1423 += 1, R1379 += 1, R1341 += 1, R958 += 1 };
  s3 -> s8 [0, 65535] { R1423 += 1, R1379 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [58, 58] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s3 -> s1 [59, 65535] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s4 -> s1 [0, 57] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s4 -> s2 [0, 65535] { R1423 += 1, R1379 += 1, R1340 += 1, R1341 += 1 };
  s4 -> s3 [0, 65535] { R1423 += 1, R1379 += 1, R1341 += 1, R958 += 1 };
  s4 -> s4 [0, 65535] { R1423 += 1, R1378 += 1, R1379 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [58, 58] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s4 -> s1 [59, 65535] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s5 -> s5 [0, 65535] { R1423 += 1, R1379 += 1, R1341 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1423 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1423 += 1 };
  s8 -> s8 [0, 65535] { R1423 += 1, R1379 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 90] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s0 -> s0 [0, 65535] { R1424 += 1, R1425 += 1 };
  s0 -> s2 [0, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1314 += 1, R1315 += 1 };
  s0 -> s3 [0, 65535] { R1425 += 1, R1380 += 1, R1381 += 1 };
  s0 -> s4 [0, 65535] { R1425 += 1, R1381 += 1, R1342 += 1, R1343 += 1 };
  s0 -> s5 [91, 91] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s0 -> s1 [92, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s1 -> s8 [0, 65535] { R1425 += 1, R1381 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R1425 += 1 };
  s1 -> s9 [0, 65535] { R1425 += 1, R1381 += 1, R1343 += 1 };
  s1 -> s1 [0, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s2 -> s1 [0, 90] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s2 -> s8 [0, 65535] { R1425 += 1, R1381 += 1 };
  s2 -> s2 [0, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1314 += 1, R1315 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R1425 += 1 };
  s2 -> s5 [91, 91] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s2 -> s1 [92, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s3 -> s1 [0, 90] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s3 -> s2 [0, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1314 += 1, R1315 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1425 += 1, R1380 += 1, R1381 += 1 };
  s3 -> s4 [0, 65535] { R1425 += 1, R1381 += 1, R1342 += 1, R1343 += 1 };
  s3 -> s5 [91, 91] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s3 -> s1 [92, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s4 -> s1 [0, 90] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s4 -> s2 [0, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1314 += 1, R1315 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R1425 += 1 };
  s4 -> s4 [0, 65535] { R1425 += 1, R1381 += 1, R1342 += 1, R1343 += 1 };
  s4 -> s5 [91, 91] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s4 -> s1 [92, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s5 -> s1 [0, 65535] { R1425 += 1, R1381 += 1, R1343 += 1, R1315 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1425 += 1 };
  s8 -> s8 [0, 65535] { R1425 += 1, R1381 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1425 += 1 };
  s9 -> s8 [0, 65535] { R1425 += 1, R1381 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s7 [0, 65535] { R1425 += 1 };
  s9 -> s9 [0, 65535] { R1425 += 1, R1381 += 1, R1343 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1426 += 1, R1427 += 1 };
  s0 -> s1 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1, R1316 += 1, R1317 += 1 };
  s0 -> s2 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1, R1317 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R1427 += 1, R1383 += 1, R1344 += 1, R1345 += 1 };
  s0 -> s4 [0, 65535] { R1427 += 1, R1382 += 1, R1383 += 1 };
  s1 -> s1 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1, R1316 += 1, R1317 += 1 };
  s1 -> s7 [0, 65535] { R1427 += 1, R1383 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1, R1317 += 1, R7 += 1 };
  s1 -> s6 [0, 65535] { R1427 += 1 };
  s2 -> s7 [0, 65535] { R1427 += 1, R1383 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1, R1317 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1 };
  s2 -> s6 [0, 65535] { R1427 += 1 };
  s3 -> s1 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1, R1316 += 1, R1317 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1, R1317 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R1427 += 1, R1383 += 1, R1344 += 1, R1345 += 1 };
  s3 -> s6 [0, 65535] { R1427 += 1 };
  s4 -> s1 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1, R1316 += 1, R1317 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1, R1317 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R1427 += 1, R1383 += 1, R1344 += 1, R1345 += 1 };
  s4 -> s4 [0, 65535] { R1427 += 1, R1382 += 1, R1383 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1427 += 1 };
  s7 -> s7 [0, 65535] { R1427 += 1, R1383 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1427 += 1 };
  s8 -> s7 [0, 65535] { R1427 += 1, R1383 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R1427 += 1, R1383 += 1, R1345 += 1 };
  s8 -> s6 [0, 65535] { R1427 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R1327 && R4 = R1345 && R5 = R1365 && R6 = R1427 && R10 = 0 && R960 = 0 && R961 - R1326 = -1 && R1196 = 0 && R1197 = R1383 && R1318 = 0 && R1319 = 1 && R1320 = 0 && R1321 = 1 && R1322 = R1326 && R1323 = R1327 && R1324 = R1326 && R1325 = R1327 && R1332 = 0 && R1333 = 1 && R1334 = 0 && R1335 = 1 && R1336 = 2 && R1337 = R1345 && R1338 = 2 && R1339 = R1345 && R1340 = 2 && R1341 = R1345 && R1342 = 2 && R1343 = R1345 && R1344 = 2 && R1346 - R1383 = 1 && R1347 = R1365 && R1348 - R1383 = 1 && R1349 = R1365 && R1350 - R1383 = 1 && R1351 = R1365 && R1352 - R1383 = 1 && R1353 = R1365 && R1354 - R1383 = 1 && R1355 = R1365 && R1356 - R1383 = 1 && R1357 = R1365 && R1358 - R1383 = 1 && R1359 = R1365 && R1360 - R1383 = 1 && R1361 = R1365 && R1362 - R1383 = 1 && R1363 = R1365 && R1364 - R1383 = 1 && R1366 = 0 && R1367 = R1383 && R1368 = 0 && R1369 = R1383 && R1370 = 0 && R1371 = R1383 && R1372 = 0 && R1373 = R1383 && R1374 = 0 && R1375 = R1383 && R1376 = 0 && R1377 = R1383 && R1378 = 0 && R1379 = R1383 && R1380 = 0 && R1381 = R1383 && R1382 = 0 && R1384 = 10 && R1385 = R1427 && R1386 = 10 && R1387 = R1427 && R1388 = 10 && R1389 = R1427 && R1390 = 10 && R1391 = R1427 && R1392 = 10 && R1393 = R1427 && R1394 = 10 && R1395 = R1427 && R1396 = 10 && R1397 = R1427 && R1398 = 10 && R1399 = R1427 && R1400 = 10 && R1401 = R1427 && R1402 = 10 && R1403 = R1427 && R1404 = 10 && R1405 = R1427 && R1406 = 10 && R1407 = R1427 && R1408 = 10 && R1409 = R1427 && R1410 = 10 && R1411 = R1427 && R1412 = 10 && R1413 = R1427 && R1414 = 10 && R1415 = R1427 && R1416 = 10 && R1417 = R1427 && R1418 = 10 && R1419 = R1427 && R1420 = 10 && R1421 = R1427 && R1422 = 10 && R1423 = R1427 && R1424 = 10 && R1425 = R1427 && R1426 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && -1 < R11 && R955 < 1 && R958 < 1 && R1326 - R1327 < 1 && 0 < R1326 && 1 < R1345 && R1383 < R1365 && -1 < R1383 && 9 < R1427 && (R1314 != 0 || ((R7 != 0 || ((R1 != R1315 || R1315 = 1 || R1315 < 0) && (R1 = R1315 || R1315 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R1315 || R1315 = 1 || R1315 < 0) && (R1315 != 1 || -1 < R1) && (R1 = R1315 || R1315 = 1))))) && (R1316 != 0 || ((R7 != 0 || ((R1 != R1317 || R1317 = 1 || R1317 < 0) && (R1 = R1317 || R1317 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R1317 || R1317 = 1 || R1317 < 0) && (R1317 != 1 || -1 < R1) && (R1 = R1317 || R1317 = 1))))) && (R1328 != 0 || R1326 - R1329 = 1 || (R1313 = 0 && R1326 = 1)) && (R1330 != 0 || R1326 - R1331 = 1 || (R1313 = 0 && R1326 = 1)) && (R1314 = 0 || (R7 = 0 && R1 < 0)) && (R1316 = 0 || (R7 = 0 && R1 < 0)) && (R1328 = 0 || (R1313 = 0 && R1326 = 1)) && (R1330 = 0 || (R1313 = 0 && R1326 = 1));
// End of Parikh automata intersection problem
