// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R2, R3, R4, R430, R431, R5, R6, R640, R641, R7, R744, R745, R746, R747, R748, R749, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R760, R761, R762, R763, R764, R765, R766, R767, R768, R769, R770, R771, R772, R773, R774, R775, R776, R777, R778, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788, R789, R790, R791, R792, R793, R794, R795, R796, R797, R798, R799, R8, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R820, R821, R822, R823, R824, R825, R826, R827, R828, R829, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R811 += 1 };
  s0 -> s0 [0, 65535] { R810 += 1, R811 += 1 };
  s0 -> s2 [46, 46] { R811 += 1 };
  s0 -> s3 [47, 47] { R811 += 1 };
  s0 -> s1 [48, 65535] { R811 += 1 };
  s1 -> s1 [0, 45] { R811 += 1 };
  s1 -> s2 [46, 46] { R811 += 1 };
  s1 -> s3 [47, 47] { R811 += 1 };
  s1 -> s1 [48, 65535] { R811 += 1 };
  s2 -> s1 [0, 45] { R811 += 1 };
  s2 -> s2 [46, 46] { R811 += 1 };
  s2 -> s3 [47, 47] { R811 += 1 };
  s2 -> s1 [48, 114] { R811 += 1 };
  s2 -> s8 [115, 115] { R811 += 1 };
  s2 -> s1 [116, 65535] { R811 += 1 };
  s3 -> s3 [0, 45] { R811 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R811 += 1 };
  s3 -> s3 [47, 65535] { R811 += 1 };
  s4 -> s3 [0, 45] { R811 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R811 += 1 };
  s4 -> s3 [47, 114] { R811 += 1 };
  s4 -> s5 [115, 115] { R811 += 1 };
  s4 -> s3 [116, 65535] { R811 += 1 };
  s5 -> s3 [0, 45] { R811 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R811 += 1 };
  s5 -> s3 [47, 110] { R811 += 1 };
  s5 -> s6 [111, 111] { R811 += 1 };
  s5 -> s3 [112, 65535] { R811 += 1 };
  s6 -> s3 [0, 45] { R811 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R811 += 1 };
  s6 -> s3 [47, 98] { R811 += 1 };
  s6 -> s7 [99, 99] { R811 += 1 };
  s6 -> s3 [100, 65535] { R811 += 1 };
  s7 -> s3 [0, 45] { R811 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R811 += 1 };
  s7 -> s3 [47, 106] { R811 += 1 };
  s7 -> s3 [108, 65535] { R811 += 1 };
  s8 -> s1 [0, 45] { R811 += 1 };
  s8 -> s2 [46, 46] { R811 += 1 };
  s8 -> s3 [47, 47] { R811 += 1 };
  s8 -> s1 [48, 110] { R811 += 1 };
  s8 -> s9 [111, 111] { R811 += 1 };
  s8 -> s1 [112, 65535] { R811 += 1 };
  s9 -> s1 [0, 45] { R811 += 1 };
  s9 -> s2 [46, 46] { R811 += 1 };
  s9 -> s3 [47, 47] { R811 += 1 };
  s9 -> s1 [48, 98] { R811 += 1 };
  s9 -> s10 [99, 99] { R811 += 1 };
  s9 -> s1 [100, 65535] { R811 += 1 };
  s10 -> s1 [0, 45] { R811 += 1 };
  s10 -> s2 [46, 46] { R811 += 1 };
  s10 -> s3 [47, 47] { R811 += 1 };
  s10 -> s1 [48, 106] { R811 += 1 };
  s10 -> s1 [108, 65535] { R811 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R812 += 1, R813 += 1 };
  s0 -> s1 [0, 65535] { R813 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R813 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R815 += 1, R641 += 1 };
  s0 -> s2 [0, 65535] { R815 += 1, R640 += 1, R641 += 1 };
  s0 -> s0 [0, 65535] { R814 += 1, R815 += 1 };
  s0 -> s3 [47, 47] { R815 += 1 };
  s0 -> s1 [48, 65535] { R815 += 1, R641 += 1 };
  s1 -> s1 [0, 46] { R815 += 1, R641 += 1 };
  s1 -> s3 [47, 47] { R815 += 1 };
  s1 -> s1 [48, 65535] { R815 += 1, R641 += 1 };
  s2 -> s1 [0, 46] { R815 += 1, R641 += 1 };
  s2 -> s2 [0, 65535] { R815 += 1, R640 += 1, R641 += 1 };
  s2 -> s3 [47, 47] { R815 += 1 };
  s2 -> s1 [48, 65535] { R815 += 1, R641 += 1 };
  s3 -> s3 [0, 65535] { R815 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R817 += 1, R757 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R816 += 1, R817 += 1 };
  s0 -> s2 [0, 65535] { R817 += 1, R756 += 1, R757 += 1 };
  s1 -> s1 [0, 65535] { R817 += 1, R757 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R817 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R817 += 1, R757 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R817 += 1, R756 += 1, R757 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R817 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R819 += 1, R783 += 1 };
  s0 -> s0 [0, 65535] { R818 += 1, R819 += 1 };
  s0 -> s2 [0, 65535] { R819 += 1, R782 += 1, R783 += 1 };
  s0 -> s3 [64, 64] { R819 += 1, R783 += 1 };
  s0 -> s1 [65, 65535] { R819 += 1, R783 += 1 };
  s1 -> s1 [0, 63] { R819 += 1, R783 += 1 };
  s1 -> s3 [64, 64] { R819 += 1, R783 += 1 };
  s1 -> s1 [65, 65535] { R819 += 1, R783 += 1 };
  s2 -> s1 [0, 63] { R819 += 1, R783 += 1 };
  s2 -> s2 [0, 65535] { R819 += 1, R782 += 1, R783 += 1 };
  s2 -> s3 [64, 64] { R819 += 1, R783 += 1 };
  s2 -> s1 [65, 65535] { R819 += 1, R783 += 1 };
  s3 -> s4 [0, 65535] { R819 += 1 };
  s3 -> s3 [0, 65535] { R819 += 1, R783 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R819 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R821 += 1, R784 += 1, R785 += 1 };
  s0 -> s0 [0, 65535] { R820 += 1, R821 += 1 };
  s0 -> s2 [0, 65535] { R821 += 1, R785 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R821 += 1, R784 += 1, R785 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R821 += 1, R785 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R821 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R821 += 1, R785 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R821 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 43] { R823 += 1, R787 += 1, R759 += 1 };
  s0 -> s0 [0, 65535] { R822 += 1, R823 += 1 };
  s0 -> s2 [0, 65535] { R823 += 1, R787 += 1, R758 += 1, R759 += 1 };
  s0 -> s3 [0, 65535] { R823 += 1, R786 += 1, R787 += 1 };
  s0 -> s1 [45, 65535] { R823 += 1, R787 += 1, R759 += 1 };
  s1 -> s1 [0, 43] { R823 += 1, R787 += 1, R759 += 1 };
  s1 -> s5 [0, 65535] { R823 += 1 };
  s1 -> s1 [0, 65535] { R823 += 1, R787 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [45, 65535] { R823 += 1, R787 += 1, R759 += 1 };
  s2 -> s1 [0, 43] { R823 += 1, R787 += 1, R759 += 1 };
  s2 -> s5 [0, 65535] { R823 += 1 };
  s2 -> s2 [0, 65535] { R823 += 1, R787 += 1, R758 += 1, R759 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [45, 65535] { R823 += 1, R787 += 1, R759 += 1 };
  s3 -> s1 [0, 43] { R823 += 1, R787 += 1, R759 += 1 };
  s3 -> s2 [0, 65535] { R823 += 1, R787 += 1, R758 += 1, R759 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R823 += 1, R786 += 1, R787 += 1 };
  s3 -> s1 [45, 65535] { R823 += 1, R787 += 1, R759 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R823 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R825 += 1, R789 += 1, R760 += 1, R761 += 1 };
  s0 -> s2 [0, 65535] { R825 += 1, R789 += 1, R761 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R824 += 1, R825 += 1 };
  s0 -> s3 [0, 65535] { R825 += 1, R788 += 1, R789 += 1 };
  s1 -> s1 [0, 65535] { R825 += 1, R789 += 1, R760 += 1, R761 += 1 };
  s1 -> s6 [0, 65535] { R825 += 1 };
  s1 -> s2 [0, 65535] { R825 += 1, R789 += 1, R761 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R825 += 1, R789 += 1 };
  s2 -> s6 [0, 65535] { R825 += 1 };
  s2 -> s2 [0, 65535] { R825 += 1, R789 += 1, R761 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R825 += 1, R789 += 1, R760 += 1, R761 += 1 };
  s3 -> s2 [0, 65535] { R825 += 1, R789 += 1, R761 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R825 += 1, R788 += 1, R789 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R825 += 1, R789 += 1 };
  s5 -> s6 [0, 65535] { R825 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R825 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R827 += 1, R791 += 1, R762 += 1, R763 += 1 };
  s0 -> s0 [0, 65535] { R826 += 1, R827 += 1 };
  s0 -> s3 [0, 65535] { R827 += 1, R791 += 1, R763 += 1, R10 += 1, R11 += 1 };
  s0 -> s4 [0, 65535] { R827 += 1, R790 += 1, R791 += 1 };
  s0 -> s5 [58, 58] { R827 += 1, R791 += 1, R763 += 1 };
  s0 -> s1 [59, 65535] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s1 -> s1 [0, 57] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s1 -> s5 [58, 58] { R827 += 1, R791 += 1, R763 += 1 };
  s1 -> s1 [59, 65535] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s2 -> s1 [0, 57] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R827 += 1, R791 += 1, R762 += 1, R763 += 1 };
  s2 -> s3 [0, 65535] { R827 += 1, R791 += 1, R763 += 1, R10 += 1, R11 += 1 };
  s2 -> s5 [58, 58] { R827 += 1, R791 += 1, R763 += 1 };
  s2 -> s1 [59, 65535] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s3 -> s1 [0, 57] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R827 += 1, R791 += 1, R763 += 1, R10 += 1, R11 += 1 };
  s3 -> s5 [58, 58] { R827 += 1, R791 += 1, R763 += 1 };
  s3 -> s1 [59, 65535] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s4 -> s1 [0, 57] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s4 -> s2 [0, 65535] { R827 += 1, R791 += 1, R762 += 1, R763 += 1 };
  s4 -> s3 [0, 65535] { R827 += 1, R791 += 1, R763 += 1, R10 += 1, R11 += 1 };
  s4 -> s4 [0, 65535] { R827 += 1, R790 += 1, R791 += 1 };
  s4 -> s5 [58, 58] { R827 += 1, R791 += 1, R763 += 1 };
  s4 -> s1 [59, 65535] { R827 += 1, R791 += 1, R763 += 1, R11 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R827 += 1, R791 += 1 };
  s5 -> s5 [0, 65535] { R827 += 1, R791 += 1, R763 += 1 };
  s5 -> s8 [0, 65535] { R827 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R827 += 1, R791 += 1 };
  s7 -> s8 [0, 65535] { R827 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R827 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s0 -> s0 [0, 65535] { R828 += 1, R829 += 1 };
  s0 -> s2 [0, 65535] { R829 += 1, R792 += 1, R793 += 1 };
  s0 -> s3 [0, 65535] { R829 += 1, R793 += 1, R764 += 1, R765 += 1 };
  s0 -> s4 [0, 65535] { R829 += 1, R793 += 1, R765 += 1, R744 += 1, R745 += 1 };
  s0 -> s5 [91, 91] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s0 -> s1 [92, 65535] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s1 -> s6 [0, 65535] { R829 += 1, R793 += 1 };
  s1 -> s7 [0, 65535] { R829 += 1 };
  s1 -> s9 [0, 65535] { R829 += 1, R793 += 1, R765 += 1 };
  s1 -> s1 [0, 65535] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s1 -> s8 [0, 65535];
  s2 -> s1 [0, 90] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s2 -> s2 [0, 65535] { R829 += 1, R792 += 1, R793 += 1 };
  s2 -> s3 [0, 65535] { R829 += 1, R793 += 1, R764 += 1, R765 += 1 };
  s2 -> s4 [0, 65535] { R829 += 1, R793 += 1, R765 += 1, R744 += 1, R745 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [91, 91] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s2 -> s1 [92, 65535] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s3 -> s1 [0, 90] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s3 -> s7 [0, 65535] { R829 += 1 };
  s3 -> s3 [0, 65535] { R829 += 1, R793 += 1, R764 += 1, R765 += 1 };
  s3 -> s4 [0, 65535] { R829 += 1, R793 += 1, R765 += 1, R744 += 1, R745 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s5 [91, 91] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s3 -> s1 [92, 65535] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s4 -> s1 [0, 90] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s4 -> s6 [0, 65535] { R829 += 1, R793 += 1 };
  s4 -> s7 [0, 65535] { R829 += 1 };
  s4 -> s4 [0, 65535] { R829 += 1, R793 += 1, R765 += 1, R744 += 1, R745 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s5 [91, 91] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s4 -> s1 [92, 65535] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s5 -> s1 [0, 65535] { R829 += 1, R793 += 1, R765 += 1, R745 += 1 };
  s6 -> s6 [0, 65535] { R829 += 1, R793 += 1 };
  s6 -> s7 [0, 65535] { R829 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R829 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s6 [0, 65535] { R829 += 1, R793 += 1 };
  s9 -> s7 [0, 65535] { R829 += 1 };
  s9 -> s9 [0, 65535] { R829 += 1, R793 += 1, R765 += 1 };
  s9 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R831 += 1, R795 += 1, R766 += 1, R767 += 1 };
  s0 -> s0 [0, 65535] { R830 += 1, R831 += 1 };
  s0 -> s2 [0, 65535] { R831 += 1, R795 += 1, R767 += 1, R747 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R831 += 1, R794 += 1, R795 += 1 };
  s0 -> s4 [0, 65535] { R831 += 1, R795 += 1, R767 += 1, R746 += 1, R747 += 1 };
  s1 -> s1 [0, 65535] { R831 += 1, R795 += 1, R766 += 1, R767 += 1 };
  s1 -> s2 [0, 65535] { R831 += 1, R795 += 1, R767 += 1, R747 += 1, R8 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R831 += 1 };
  s1 -> s4 [0, 65535] { R831 += 1, R795 += 1, R767 += 1, R746 += 1, R747 += 1 };
  s2 -> s2 [0, 65535] { R831 += 1, R795 += 1, R767 += 1, R747 += 1, R8 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R831 += 1 };
  s2 -> s8 [0, 65535] { R831 += 1, R795 += 1, R767 += 1 };
  s2 -> s7 [0, 65535] { R831 += 1, R795 += 1 };
  s3 -> s1 [0, 65535] { R831 += 1, R795 += 1, R766 += 1, R767 += 1 };
  s3 -> s2 [0, 65535] { R831 += 1, R795 += 1, R767 += 1, R747 += 1, R8 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R831 += 1, R794 += 1, R795 += 1 };
  s3 -> s4 [0, 65535] { R831 += 1, R795 += 1, R767 += 1, R746 += 1, R747 += 1 };
  s4 -> s2 [0, 65535] { R831 += 1, R795 += 1, R767 += 1, R747 += 1, R8 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R831 += 1 };
  s4 -> s7 [0, 65535] { R831 += 1, R795 += 1 };
  s4 -> s4 [0, 65535] { R831 += 1, R795 += 1, R767 += 1, R746 += 1, R747 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R831 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R831 += 1 };
  s7 -> s7 [0, 65535] { R831 += 1, R795 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R831 += 1 };
  s8 -> s8 [0, 65535] { R831 += 1, R795 += 1, R767 += 1 };
  s8 -> s7 [0, 65535] { R831 += 1, R795 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 57] { R833 += 1, R797 += 1, R769 += 1 };
  s0 -> s0 [0, 65535] { R832 += 1, R833 += 1 };
  s0 -> s2 [0, 65535] { R833 += 1, R797 += 1, R768 += 1, R769 += 1 };
  s0 -> s3 [0, 65535] { R833 += 1, R796 += 1, R797 += 1 };
  s0 -> s4 [58, 58] { R833 += 1, R797 += 1, R769 += 1 };
  s0 -> s1 [59, 63] { R833 += 1, R797 += 1, R769 += 1 };
  s0 -> s1 [65, 65535] { R833 += 1, R797 += 1, R769 += 1 };
  s1 -> s1 [0, 57] { R833 += 1, R797 += 1, R769 += 1 };
  s1 -> s4 [58, 58] { R833 += 1, R797 += 1, R769 += 1 };
  s1 -> s1 [59, 63] { R833 += 1, R797 += 1, R769 += 1 };
  s1 -> s1 [65, 65535] { R833 += 1, R797 += 1, R769 += 1 };
  s2 -> s1 [0, 57] { R833 += 1, R797 += 1, R769 += 1 };
  s2 -> s2 [0, 65535] { R833 += 1, R797 += 1, R768 += 1, R769 += 1 };
  s2 -> s4 [58, 58] { R833 += 1, R797 += 1, R769 += 1 };
  s2 -> s1 [59, 63] { R833 += 1, R797 += 1, R769 += 1 };
  s2 -> s1 [65, 65535] { R833 += 1, R797 += 1, R769 += 1 };
  s3 -> s1 [0, 57] { R833 += 1, R797 += 1, R769 += 1 };
  s3 -> s2 [0, 65535] { R833 += 1, R797 += 1, R768 += 1, R769 += 1 };
  s3 -> s3 [0, 65535] { R833 += 1, R796 += 1, R797 += 1 };
  s3 -> s4 [58, 58] { R833 += 1, R797 += 1, R769 += 1 };
  s3 -> s1 [59, 63] { R833 += 1, R797 += 1, R769 += 1 };
  s3 -> s1 [65, 65535] { R833 += 1, R797 += 1, R769 += 1 };
  s4 -> s4 [0, 63] { R833 += 1, R797 += 1, R769 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R833 += 1 };
  s4 -> s4 [0, 65535] { R833 += 1, R797 += 1 };
  s4 -> s4 [65, 65535] { R833 += 1, R797 += 1, R769 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R833 += 1 };
  accepting s4, s5, s6;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R834 += 1, R835 += 1 };
  s0 -> s1 [0, 65535] { R835 += 1, R799 += 1, R770 += 1, R771 += 1 };
  s0 -> s2 [0, 65535] { R835 += 1, R798 += 1, R799 += 1 };
  s0 -> s3 [0, 65535] { R835 += 1, R799 += 1, R771 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R835 += 1, R799 += 1, R770 += 1, R771 += 1 };
  s1 -> s3 [0, 65535] { R835 += 1, R799 += 1, R771 += 1, R4 += 1 };
  s1 -> s6 [0, 65535] { R835 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R835 += 1, R799 += 1, R770 += 1, R771 += 1 };
  s2 -> s2 [0, 65535] { R835 += 1, R798 += 1, R799 += 1 };
  s2 -> s3 [0, 65535] { R835 += 1, R799 += 1, R771 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R835 += 1, R799 += 1, R771 += 1, R4 += 1 };
  s3 -> s5 [0, 65535] { R835 += 1, R799 += 1 };
  s3 -> s6 [0, 65535] { R835 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R835 += 1, R799 += 1 };
  s5 -> s6 [0, 65535] { R835 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R835 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 57] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s0 -> s2 [0, 65535] { R837 += 1, R800 += 1, R801 += 1 };
  s0 -> s3 [0, 65535] { R837 += 1, R801 += 1, R773 += 1, R430 += 1, R431 += 1 };
  s0 -> s0 [0, 65535] { R836 += 1, R837 += 1 };
  s0 -> s4 [0, 65535] { R837 += 1, R801 += 1, R772 += 1, R773 += 1 };
  s0 -> s5 [58, 58] { R837 += 1, R801 += 1, R773 += 1 };
  s0 -> s1 [59, 65535] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s1 -> s1 [0, 57] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s1 -> s5 [58, 58] { R837 += 1, R801 += 1, R773 += 1 };
  s1 -> s1 [59, 65535] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s2 -> s1 [0, 57] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s2 -> s2 [0, 65535] { R837 += 1, R800 += 1, R801 += 1 };
  s2 -> s3 [0, 65535] { R837 += 1, R801 += 1, R773 += 1, R430 += 1, R431 += 1 };
  s2 -> s4 [0, 65535] { R837 += 1, R801 += 1, R772 += 1, R773 += 1 };
  s2 -> s5 [58, 58] { R837 += 1, R801 += 1, R773 += 1 };
  s2 -> s1 [59, 65535] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s3 -> s1 [0, 57] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s3 -> s3 [0, 65535] { R837 += 1, R801 += 1, R773 += 1, R430 += 1, R431 += 1 };
  s3 -> s5 [58, 58] { R837 += 1, R801 += 1, R773 += 1 };
  s3 -> s1 [59, 65535] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s4 -> s1 [0, 57] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s4 -> s3 [0, 65535] { R837 += 1, R801 += 1, R773 += 1, R430 += 1, R431 += 1 };
  s4 -> s4 [0, 65535] { R837 += 1, R801 += 1, R772 += 1, R773 += 1 };
  s4 -> s5 [58, 58] { R837 += 1, R801 += 1, R773 += 1 };
  s4 -> s1 [59, 65535] { R837 += 1, R801 += 1, R773 += 1, R431 += 1 };
  s5 -> s6 [0, 65535] { R837 += 1 };
  s5 -> s5 [0, 65535] { R837 += 1, R801 += 1, R773 += 1 };
  s5 -> s7 [0, 65535] { R837 += 1, R801 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R837 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R837 += 1 };
  s7 -> s7 [0, 65535] { R837 += 1, R801 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 36] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s0 -> s2 [0, 65535] { R839 += 1, R803 += 1, R775 += 1, R748 += 1, R749 += 1 };
  s0 -> s3 [0, 65535] { R839 += 1, R802 += 1, R803 += 1 };
  s0 -> s4 [0, 65535] { R839 += 1, R803 += 1, R774 += 1, R775 += 1 };
  s0 -> s0 [0, 65535] { R838 += 1, R839 += 1 };
  s0 -> s1 [38, 42] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s0 -> s1 [44, 57] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s0 -> s1 [59, 65535] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s1 -> s1 [0, 36] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s1 -> s5 [0, 65535] { R839 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R839 += 1, R803 += 1, R775 += 1 };
  s1 -> s7 [0, 65535] { R839 += 1, R803 += 1 };
  s1 -> s1 [38, 42] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s1 -> s1 [44, 57] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s1 -> s1 [59, 65535] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s2 -> s1 [0, 36] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s2 -> s5 [0, 65535] { R839 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R839 += 1, R803 += 1, R775 += 1, R748 += 1, R749 += 1 };
  s2 -> s7 [0, 65535] { R839 += 1, R803 += 1 };
  s2 -> s1 [38, 42] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s2 -> s1 [44, 57] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s2 -> s1 [59, 65535] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s3 -> s1 [0, 36] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R839 += 1, R803 += 1, R775 += 1, R748 += 1, R749 += 1 };
  s3 -> s3 [0, 65535] { R839 += 1, R802 += 1, R803 += 1 };
  s3 -> s4 [0, 65535] { R839 += 1, R803 += 1, R774 += 1, R775 += 1 };
  s3 -> s1 [38, 42] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s3 -> s1 [44, 57] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s3 -> s1 [59, 65535] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s4 -> s1 [0, 36] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s4 -> s5 [0, 65535] { R839 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R839 += 1, R803 += 1, R775 += 1, R748 += 1, R749 += 1 };
  s4 -> s4 [0, 65535] { R839 += 1, R803 += 1, R774 += 1, R775 += 1 };
  s4 -> s1 [38, 42] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s4 -> s1 [44, 57] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s4 -> s1 [59, 65535] { R839 += 1, R803 += 1, R775 += 1, R749 += 1 };
  s5 -> s5 [0, 65535] { R839 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R839 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R839 += 1, R803 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R841 += 1, R805 += 1, R776 += 1, R777 += 1 };
  s0 -> s2 [0, 65535] { R841 += 1, R805 += 1, R777 += 1, R751 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R840 += 1, R841 += 1 };
  s0 -> s3 [0, 65535] { R841 += 1, R805 += 1, R777 += 1, R750 += 1, R751 += 1 };
  s0 -> s4 [0, 65535] { R841 += 1, R804 += 1, R805 += 1 };
  s1 -> s1 [0, 65535] { R841 += 1, R805 += 1, R776 += 1, R777 += 1 };
  s1 -> s2 [0, 65535] { R841 += 1, R805 += 1, R777 += 1, R751 += 1, R2 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R841 += 1, R805 += 1, R777 += 1, R750 += 1, R751 += 1 };
  s1 -> s7 [0, 65535] { R841 += 1 };
  s2 -> s2 [0, 65535] { R841 += 1, R805 += 1, R777 += 1, R751 += 1, R2 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R841 += 1, R805 += 1 };
  s2 -> s8 [0, 65535] { R841 += 1, R805 += 1, R777 += 1 };
  s2 -> s7 [0, 65535] { R841 += 1 };
  s3 -> s2 [0, 65535] { R841 += 1, R805 += 1, R777 += 1, R751 += 1, R2 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R841 += 1, R805 += 1, R777 += 1, R750 += 1, R751 += 1 };
  s3 -> s6 [0, 65535] { R841 += 1, R805 += 1 };
  s3 -> s7 [0, 65535] { R841 += 1 };
  s4 -> s1 [0, 65535] { R841 += 1, R805 += 1, R776 += 1, R777 += 1 };
  s4 -> s2 [0, 65535] { R841 += 1, R805 += 1, R777 += 1, R751 += 1, R2 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R841 += 1, R805 += 1, R777 += 1, R750 += 1, R751 += 1 };
  s4 -> s4 [0, 65535] { R841 += 1, R804 += 1, R805 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R841 += 1, R805 += 1 };
  s6 -> s7 [0, 65535] { R841 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R841 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R841 += 1, R805 += 1 };
  s8 -> s8 [0, 65535] { R841 += 1, R805 += 1, R777 += 1 };
  s8 -> s7 [0, 65535] { R841 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 36] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s0 -> s2 [0, 65535] { R843 += 1, R806 += 1, R807 += 1 };
  s0 -> s3 [0, 65535] { R843 += 1, R807 += 1, R778 += 1, R779 += 1 };
  s0 -> s0 [0, 65535] { R842 += 1, R843 += 1 };
  s0 -> s4 [0, 65535] { R843 += 1, R807 += 1, R779 += 1, R752 += 1, R753 += 1 };
  s0 -> s1 [38, 42] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s0 -> s1 [44, 65535] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s1 -> s1 [0, 36] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s1 -> s5 [0, 65535] { R843 += 1, R807 += 1 };
  s1 -> s1 [0, 65535] { R843 += 1, R807 += 1, R779 += 1 };
  s1 -> s6 [0, 65535] { R843 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [38, 42] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s1 -> s1 [44, 65535] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s2 -> s1 [0, 36] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s2 -> s2 [0, 65535] { R843 += 1, R806 += 1, R807 += 1 };
  s2 -> s3 [0, 65535] { R843 += 1, R807 += 1, R778 += 1, R779 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R843 += 1, R807 += 1, R779 += 1, R752 += 1, R753 += 1 };
  s2 -> s1 [38, 42] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s2 -> s1 [44, 65535] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s3 -> s1 [0, 36] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s3 -> s3 [0, 65535] { R843 += 1, R807 += 1, R778 += 1, R779 += 1 };
  s3 -> s6 [0, 65535] { R843 += 1 };
  s3 -> s4 [0, 65535] { R843 += 1, R807 += 1, R779 += 1, R752 += 1, R753 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [38, 42] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s3 -> s1 [44, 65535] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s4 -> s1 [0, 36] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s4 -> s5 [0, 65535] { R843 += 1, R807 += 1 };
  s4 -> s6 [0, 65535] { R843 += 1 };
  s4 -> s4 [0, 65535] { R843 += 1, R807 += 1, R779 += 1, R752 += 1, R753 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s1 [38, 42] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s4 -> s1 [44, 65535] { R843 += 1, R807 += 1, R779 += 1, R753 += 1 };
  s5 -> s5 [0, 65535] { R843 += 1, R807 += 1 };
  s5 -> s6 [0, 65535] { R843 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R843 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R845 += 1, R808 += 1, R809 += 1 };
  s0 -> s2 [0, 65535] { R845 += 1, R809 += 1, R780 += 1, R781 += 1 };
  s0 -> s3 [0, 65535] { R845 += 1, R809 += 1, R781 += 1, R754 += 1, R755 += 1 };
  s0 -> s0 [0, 65535] { R844 += 1, R845 += 1 };
  s0 -> s4 [0, 65535] { R845 += 1, R809 += 1, R781 += 1, R755 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R845 += 1, R808 += 1, R809 += 1 };
  s1 -> s2 [0, 65535] { R845 += 1, R809 += 1, R780 += 1, R781 += 1 };
  s1 -> s3 [0, 65535] { R845 += 1, R809 += 1, R781 += 1, R754 += 1, R755 += 1 };
  s1 -> s4 [0, 65535] { R845 += 1, R809 += 1, R781 += 1, R755 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R845 += 1, R809 += 1, R780 += 1, R781 += 1 };
  s2 -> s7 [0, 65535] { R845 += 1 };
  s2 -> s3 [0, 65535] { R845 += 1, R809 += 1, R781 += 1, R754 += 1, R755 += 1 };
  s2 -> s4 [0, 65535] { R845 += 1, R809 += 1, R781 += 1, R755 += 1, R1 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R845 += 1, R809 += 1 };
  s3 -> s7 [0, 65535] { R845 += 1 };
  s3 -> s3 [0, 65535] { R845 += 1, R809 += 1, R781 += 1, R754 += 1, R755 += 1 };
  s3 -> s4 [0, 65535] { R845 += 1, R809 += 1, R781 += 1, R755 += 1, R1 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R845 += 1, R809 += 1 };
  s4 -> s7 [0, 65535] { R845 += 1 };
  s4 -> s8 [0, 65535] { R845 += 1, R809 += 1, R781 += 1 };
  s4 -> s4 [0, 65535] { R845 += 1, R809 += 1, R781 += 1, R755 += 1, R1 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R845 += 1, R809 += 1 };
  s6 -> s7 [0, 65535] { R845 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R845 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R845 += 1, R809 += 1 };
  s8 -> s7 [0, 65535] { R845 += 1 };
  s8 -> s8 [0, 65535] { R845 += 1, R809 += 1, R781 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R4 = R751 && R5 = R767 && R6 = R757 && R7 = R845 && R10 = 0 && R430 = 0 && R431 = R755 && R640 = 0 && R641 = R809 && R748 - R755 = 1 && R749 = R751 && R750 - R755 = 1 && R752 = 0 && R753 = R755 && R754 = 0 && R756 - R809 = 1 && R758 = 12 && R759 = R767 && R760 = 12 && R761 = R767 && R762 = 12 && R763 = R767 && R764 = 12 && R765 = R767 && R766 = 12 && R768 = 0 && R769 = 11 && R770 = 0 && R771 = 11 && R772 = 0 && R773 = 11 && R774 = 0 && R775 = 11 && R776 = 0 && R777 = 11 && R778 = 0 && R779 = 11 && R780 = 0 && R781 = 11 && R782 = 0 && R783 = R809 && R784 = 0 && R785 = R809 && R786 = 0 && R787 = R809 && R788 = 0 && R789 = R809 && R790 = 0 && R791 = R809 && R792 = 0 && R793 = R809 && R794 = 0 && R795 = R809 && R796 = 0 && R797 = R809 && R798 = 0 && R799 = R809 && R800 = 0 && R801 = R809 && R802 = 0 && R803 = R809 && R804 = 0 && R805 = R809 && R806 = 0 && R807 = R809 && R808 = 0 && R810 = 10 && R811 = R845 && R812 = 10 && R813 = R845 && R814 = 10 && R815 = R845 && R816 = 10 && R817 = R845 && R818 = 10 && R819 = R845 && R820 = 10 && R821 = R845 && R822 = 10 && R823 = R845 && R824 = 10 && R825 = R845 && R826 = 10 && R827 = R845 && R828 = 10 && R829 = R845 && R830 = 10 && R831 = R845 && R832 = 10 && R833 = R845 && R834 = 10 && R835 = R845 && R836 = 10 && R837 = R845 && R838 = 10 && R839 = R845 && R840 = 10 && R841 = R845 && R842 = 10 && R843 = R845 && R844 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R3 != 0 && R11 != -1 && R755 < R751 && -1 < R755 && R809 < R757 && 11 < R767 && -1 < R809 && 9 < R845 && (R744 != 0 || ((R8 != 0 || ((R0 != R745 || R745 = 1 || R745 < 0) && (R0 = R745 || R745 = 1 || R0 < 1))) && (R8 = 0 || ((R0 != R745 || R745 = 1 || R745 < 0) && (R745 != 1 || -1 < R0) && (R0 = R745 || R745 = 1))))) && (R746 != 0 || ((R8 != 0 || ((R0 != R747 || R747 = 1 || R747 < 0) && (R0 = R747 || R747 = 1 || R0 < 1))) && (R8 = 0 || ((R0 != R747 || R747 = 1 || R747 < 0) && (R747 != 1 || -1 < R0) && (R0 = R747 || R747 = 1))))) && (R744 = 0 || (R8 = 0 && R0 < 0)) && (R746 = 0 || (R8 = 0 && R0 < 0));
// End of Parikh automata intersection problem
