// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2516, R2517, R2518, R2519, R2520, R2521, R2522, R2523, R2524, R2525, R2526, R2527, R2528, R2529, R2530, R2531, R2532, R2533, R2534, R2535, R2536, R2537, R2538, R2539, R2540, R2541, R2542, R2543, R2544, R2545, R2546, R2547, R2548, R2549, R2550, R2551, R2552, R2553, R2554, R2555, R2556, R2557, R2558, R2559, R2560, R2561, R2562, R2563, R2564, R2565, R2566, R2567, R2568, R2569, R2570, R2571, R2572, R2573, R2574, R2575, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2521 += 1 };
  s0 -> s0 [0, 65535] { R2520 += 1, R2521 += 1 };
  s0 -> s1 [45, 64] { R2521 += 1 };
  s0 -> s1 [91, 107] { R2521 += 1 };
  s0 -> s2 [108, 108] { R2521 += 1 };
  s0 -> s1 [109, 65535] { R2521 += 1 };
  s1 -> s1 [0, 43] { R2521 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2521 += 1 };
  s1 -> s1 [91, 65535] { R2521 += 1 };
  s2 -> s1 [0, 43] { R2521 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2521 += 1 };
  s2 -> s1 [91, 110] { R2521 += 1 };
  s2 -> s3 [111, 111] { R2521 += 1 };
  s2 -> s1 [112, 65535] { R2521 += 1 };
  s3 -> s1 [0, 43] { R2521 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2521 += 1 };
  s3 -> s1 [91, 98] { R2521 += 1 };
  s3 -> s4 [99, 99] { R2521 += 1 };
  s3 -> s1 [100, 65535] { R2521 += 1 };
  s4 -> s1 [0, 43] { R2521 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2521 += 1 };
  s4 -> s1 [91, 96] { R2521 += 1 };
  s4 -> s5 [97, 97] { R2521 += 1 };
  s4 -> s1 [98, 65535] { R2521 += 1 };
  s5 -> s1 [0, 43] { R2521 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2521 += 1 };
  s5 -> s1 [91, 107] { R2521 += 1 };
  s5 -> s6 [108, 108] { R2521 += 1 };
  s5 -> s1 [109, 65535] { R2521 += 1 };
  s6 -> s1 [0, 43] { R2521 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2521 += 1 };
  s6 -> s1 [91, 103] { R2521 += 1 };
  s6 -> s7 [104, 104] { R2521 += 1 };
  s6 -> s1 [105, 65535] { R2521 += 1 };
  s7 -> s1 [0, 43] { R2521 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2521 += 1 };
  s7 -> s1 [91, 110] { R2521 += 1 };
  s7 -> s8 [111, 111] { R2521 += 1 };
  s7 -> s1 [112, 65535] { R2521 += 1 };
  s8 -> s1 [0, 43] { R2521 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2521 += 1 };
  s8 -> s1 [91, 114] { R2521 += 1 };
  s8 -> s9 [115, 115] { R2521 += 1 };
  s8 -> s1 [116, 65535] { R2521 += 1 };
  s9 -> s1 [0, 43] { R2521 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2521 += 1 };
  s9 -> s1 [91, 115] { R2521 += 1 };
  s9 -> s10 [116, 116] { R2521 += 1 };
  s9 -> s1 [117, 65535] { R2521 += 1 };
  s10 -> s1 [0, 43] { R2521 += 1 };
  s10 -> s1 [45, 64] { R2521 += 1 };
  s10 -> s1 [91, 65535] { R2521 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R2523 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2522 += 1, R2523 += 1 };
  s1 -> s1 [0, 65535] { R2523 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2525 += 1 };
  s0 -> s2 [0, 65535] { R2525 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2524 += 1, R2525 += 1 };
  s0 -> s3 [58, 58] { R2525 += 1 };
  s0 -> s1 [59, 65535] { R2525 += 1 };
  s1 -> s1 [0, 57] { R2525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2525 += 1 };
  s1 -> s1 [59, 65535] { R2525 += 1 };
  s2 -> s1 [0, 57] { R2525 += 1 };
  s2 -> s2 [0, 65535] { R2525 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2525 += 1 };
  s2 -> s1 [59, 65535] { R2525 += 1 };
  s3 -> s3 [0, 65535] { R2525 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2527 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2526 += 1, R2527 += 1 };
  s0 -> s2 [0, 65535] { R2527 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s3 [91, 91] { R2527 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2527 += 1, R2035 += 1 };
  s1 -> s5 [0, 65535] { R2527 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2527 += 1, R2035 += 1 };
  s2 -> s1 [0, 90] { R2527 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2527 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s3 [91, 91] { R2527 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2527 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2527 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2527 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2529 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s2 [0, 65535] { R2529 += 1, R2037 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2528 += 1, R2529 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2529 += 1, R2036 += 1, R2037 += 1 };
  s1 -> s2 [0, 65535] { R2529 += 1, R2037 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2529 += 1 };
  s2 -> s2 [0, 65535] { R2529 += 1, R2037 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2529 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2531 += 1 };
  s0 -> s0 [0, 65535] { R2530 += 1, R2531 += 1 };
  s0 -> s1 [91, 107] { R2531 += 1 };
  s0 -> s2 [108, 108] { R2531 += 1 };
  s0 -> s1 [109, 65535] { R2531 += 1 };
  s1 -> s1 [0, 64] { R2531 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2531 += 1 };
  s2 -> s1 [0, 64] { R2531 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2531 += 1 };
  s2 -> s3 [111, 111] { R2531 += 1 };
  s2 -> s1 [112, 65535] { R2531 += 1 };
  s3 -> s1 [0, 64] { R2531 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2531 += 1 };
  s3 -> s4 [99, 99] { R2531 += 1 };
  s3 -> s1 [100, 65535] { R2531 += 1 };
  s4 -> s1 [0, 64] { R2531 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2531 += 1 };
  s4 -> s5 [97, 97] { R2531 += 1 };
  s4 -> s1 [98, 65535] { R2531 += 1 };
  s5 -> s1 [0, 64] { R2531 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2531 += 1 };
  s5 -> s6 [108, 108] { R2531 += 1 };
  s5 -> s1 [109, 65535] { R2531 += 1 };
  s6 -> s1 [0, 64] { R2531 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2531 += 1 };
  s6 -> s7 [104, 104] { R2531 += 1 };
  s6 -> s1 [105, 65535] { R2531 += 1 };
  s7 -> s1 [0, 64] { R2531 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2531 += 1 };
  s7 -> s8 [111, 111] { R2531 += 1 };
  s7 -> s1 [112, 65535] { R2531 += 1 };
  s8 -> s1 [0, 64] { R2531 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2531 += 1 };
  s8 -> s9 [115, 115] { R2531 += 1 };
  s8 -> s1 [116, 65535] { R2531 += 1 };
  s9 -> s1 [0, 64] { R2531 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2531 += 1 };
  s9 -> s10 [116, 116] { R2531 += 1 };
  s9 -> s1 [117, 65535] { R2531 += 1 };
  s10 -> s1 [0, 64] { R2531 += 1 };
  s10 -> s1 [91, 65535] { R2531 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2533 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R2532 += 1, R2533 += 1 };
  s1 -> s1 [0, 65535] { R2533 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2535 += 1 };
  s0 -> s0 [0, 65535] { R2534 += 1, R2535 += 1 };
  s0 -> s2 [0, 65535] { R2535 += 1, R6 += 1 };
  s0 -> s3 [58, 58] { R2535 += 1 };
  s0 -> s1 [59, 65535] { R2535 += 1 };
  s1 -> s1 [0, 57] { R2535 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2535 += 1 };
  s1 -> s1 [59, 65535] { R2535 += 1 };
  s2 -> s1 [0, 57] { R2535 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2535 += 1, R6 += 1 };
  s2 -> s3 [58, 58] { R2535 += 1 };
  s2 -> s1 [59, 65535] { R2535 += 1 };
  s3 -> s3 [0, 65535] { R2535 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2537 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2536 += 1, R2537 += 1 };
  s0 -> s2 [0, 65535] { R2537 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s3 [91, 91] { R2537 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2537 += 1, R2031 += 1 };
  s1 -> s5 [0, 65535] { R2537 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2537 += 1, R2031 += 1 };
  s2 -> s1 [0, 90] { R2537 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2537 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s3 [91, 91] { R2537 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2537 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2537 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2537 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R2539 += 1, R2033 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2539 += 1, R2032 += 1, R2033 += 1 };
  s0 -> s0 [0, 65535] { R2538 += 1, R2539 += 1 };
  s1 -> s1 [0, 65535] { R2539 += 1, R2033 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2539 += 1 };
  s2 -> s1 [0, 65535] { R2539 += 1, R2033 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2539 += 1, R2032 += 1, R2033 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2539 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2559 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2558 += 1, R2559 += 1 };
  s0 -> s2 [0, 65535] { R2559 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [47, 47] { R2559 += 1 };
  s0 -> s1 [48, 65535] { R2559 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2559 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2559 += 1 };
  s1 -> s1 [48, 65535] { R2559 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2559 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2559 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2559 += 1 };
  s2 -> s1 [48, 65535] { R2559 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2559 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2560 += 1, R2561 += 1 };
  s0 -> s1 [0, 65535] { R2561 += 1, R2029 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2561 += 1, R2029 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2563 += 1, R2544 += 1, R2545 += 1 };
  s0 -> s0 [0, 65535] { R2562 += 1, R2563 += 1 };
  s0 -> s2 [108, 108] { R2563 += 1, R2545 += 1 };
  s1 -> s1 [0, 65535] { R2563 += 1, R2544 += 1, R2545 += 1 };
  s1 -> s2 [108, 108] { R2563 += 1, R2545 += 1 };
  s2 -> s3 [111, 111] { R2563 += 1, R2545 += 1 };
  s3 -> s4 [99, 99] { R2563 += 1, R2545 += 1 };
  s4 -> s5 [97, 97] { R2563 += 1, R2545 += 1 };
  s5 -> s6 [108, 108] { R2563 += 1, R2545 += 1 };
  s6 -> s7 [104, 104] { R2563 += 1, R2545 += 1 };
  s7 -> s8 [111, 111] { R2563 += 1, R2545 += 1 };
  s8 -> s9 [115, 115] { R2563 += 1, R2545 += 1 };
  s9 -> s10 [116, 116] { R2563 += 1, R2545 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2563 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2565 += 1, R2546 += 1, R2547 += 1 };
  s0 -> s2 [0, 65535] { R2565 += 1, R2547 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R2564 += 1, R2565 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2565 += 1, R2546 += 1, R2547 += 1 };
  s1 -> s2 [0, 65535] { R2565 += 1, R2547 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2565 += 1, R2547 += 1, R2 += 1 };
  s2 -> s4 [0, 65535] { R2565 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2565 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2567 += 1, R2549 += 1 };
  s0 -> s0 [0, 65535] { R2566 += 1, R2567 += 1 };
  s0 -> s2 [0, 65535] { R2567 += 1, R2548 += 1, R2549 += 1 };
  s0 -> s3 [0, 65535] { R2567 += 1, R2549 += 1, R8 += 1 };
  s0 -> s4 [90, 90] { R2567 += 1, R2549 += 1 };
  s0 -> s1 [91, 65535] { R2567 += 1, R2549 += 1 };
  s1 -> s1 [0, 89] { R2567 += 1, R2549 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2567 += 1 };
  s1 -> s4 [90, 90] { R2567 += 1, R2549 += 1 };
  s1 -> s1 [91, 65535] { R2567 += 1, R2549 += 1 };
  s2 -> s1 [0, 89] { R2567 += 1, R2549 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2567 += 1, R2548 += 1, R2549 += 1 };
  s2 -> s3 [0, 65535] { R2567 += 1, R2549 += 1, R8 += 1 };
  s2 -> s4 [90, 90] { R2567 += 1, R2549 += 1 };
  s2 -> s1 [91, 65535] { R2567 += 1, R2549 += 1 };
  s3 -> s1 [0, 89] { R2567 += 1, R2549 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2567 += 1, R2549 += 1, R8 += 1 };
  s3 -> s6 [0, 65535] { R2567 += 1 };
  s3 -> s4 [90, 90] { R2567 += 1, R2549 += 1 };
  s3 -> s1 [91, 65535] { R2567 += 1, R2549 += 1 };
  s4 -> s4 [0, 65535] { R2567 += 1, R2549 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2567 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2568 += 1, R2569 += 1 };
  s0 -> s1 [0, 65535] { R2569 += 1, R2551 += 1, R2517 += 1, R2027 += 1 };
  s0 -> s2 [0, 65535] { R2569 += 1, R2551 += 1, R2516 += 1, R2517 += 1 };
  s0 -> s3 [0, 65535] { R2569 += 1, R2550 += 1, R2551 += 1 };
  s1 -> s6 [0, 65535] { R2569 += 1, R2551 += 1 };
  s1 -> s1 [0, 65535] { R2569 += 1, R2551 += 1, R2517 += 1, R2027 += 1 };
  s1 -> s5 [0, 65535] { R2569 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2569 += 1, R2551 += 1, R2517 += 1, R2027 += 1 };
  s2 -> s2 [0, 65535] { R2569 += 1, R2551 += 1, R2516 += 1, R2517 += 1 };
  s2 -> s5 [0, 65535] { R2569 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2569 += 1, R2551 += 1, R2517 += 1, R2027 += 1 };
  s3 -> s2 [0, 65535] { R2569 += 1, R2551 += 1, R2516 += 1, R2517 += 1 };
  s3 -> s3 [0, 65535] { R2569 += 1, R2550 += 1, R2551 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2569 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2569 += 1, R2551 += 1 };
  s6 -> s5 [0, 65535] { R2569 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 114] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s0 -> s0 [0, 65535] { R2570 += 1, R2571 += 1 };
  s0 -> s2 [0, 65535] { R2571 += 1, R2552 += 1, R2553 += 1 };
  s0 -> s3 [0, 65535] { R2571 += 1, R2553 += 1, R2518 += 1, R2519 += 1 };
  s0 -> s4 [115, 115] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s0 -> s1 [116, 65535] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s1 -> s5 [0, 65535] { R2571 += 1 };
  s1 -> s8 [0, 65535] { R2571 += 1, R2553 += 1 };
  s1 -> s1 [0, 65535] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 114] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2571 += 1, R2552 += 1, R2553 += 1 };
  s2 -> s3 [0, 65535] { R2571 += 1, R2553 += 1, R2518 += 1, R2519 += 1 };
  s2 -> s4 [115, 115] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s2 -> s1 [116, 65535] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s3 -> s1 [0, 114] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s3 -> s5 [0, 65535] { R2571 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2571 += 1, R2553 += 1, R2518 += 1, R2519 += 1 };
  s3 -> s4 [115, 115] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s3 -> s1 [116, 65535] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s4 -> s1 [0, 115] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s4 -> s5 [0, 65535] { R2571 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2571 += 1, R2553 += 1 };
  s4 -> s7 [116, 116] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s4 -> s1 [117, 65535] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s5 -> s5 [0, 65535] { R2571 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 65535] { R2571 += 1, R2553 += 1, R2519 += 1 };
  s8 -> s5 [0, 65535] { R2571 += 1 };
  s8 -> s8 [0, 65535] { R2571 += 1, R2553 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2573 += 1, R2554 += 1, R2555 += 1 };
  s0 -> s2 [0, 65535] { R2573 += 1, R2555 += 1, R2541 += 1, R2028 += 1 };
  s0 -> s0 [0, 65535] { R2572 += 1, R2573 += 1 };
  s0 -> s3 [0, 65535] { R2573 += 1, R2555 += 1, R2540 += 1, R2541 += 1 };
  s1 -> s1 [0, 65535] { R2573 += 1, R2554 += 1, R2555 += 1 };
  s1 -> s2 [0, 65535] { R2573 += 1, R2555 += 1, R2541 += 1, R2028 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R2573 += 1, R2555 += 1, R2540 += 1, R2541 += 1 };
  s2 -> s6 [0, 65535] { R2573 += 1, R2555 += 1 };
  s2 -> s2 [0, 65535] { R2573 += 1, R2555 += 1, R2541 += 1, R2028 += 1 };
  s2 -> s4 [0, 65535] { R2573 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2573 += 1, R2555 += 1, R2541 += 1, R2028 += 1 };
  s3 -> s4 [0, 65535] { R2573 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2573 += 1, R2555 += 1, R2540 += 1, R2541 += 1 };
  s4 -> s4 [0, 65535] { R2573 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2573 += 1, R2555 += 1 };
  s6 -> s4 [0, 65535] { R2573 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R2574 += 1, R2575 += 1 };
  s0 -> s1 [0, 65535] { R2575 += 1, R2557 += 1, R2542 += 1, R2543 += 1 };
  s0 -> s2 [0, 65535] { R2575 += 1, R2556 += 1, R2557 += 1 };
  s0 -> s3 [108, 108] { R2575 += 1, R2557 += 1, R2543 += 1 };
  s1 -> s1 [0, 65535] { R2575 += 1, R2557 += 1, R2542 += 1, R2543 += 1 };
  s1 -> s3 [108, 108] { R2575 += 1, R2557 += 1, R2543 += 1 };
  s2 -> s1 [0, 65535] { R2575 += 1, R2557 += 1, R2542 += 1, R2543 += 1 };
  s2 -> s2 [0, 65535] { R2575 += 1, R2556 += 1, R2557 += 1 };
  s2 -> s3 [108, 108] { R2575 += 1, R2557 += 1, R2543 += 1 };
  s3 -> s4 [111, 111] { R2575 += 1, R2557 += 1, R2543 += 1 };
  s4 -> s5 [99, 99] { R2575 += 1, R2557 += 1, R2543 += 1 };
  s5 -> s6 [97, 97] { R2575 += 1, R2557 += 1, R2543 += 1 };
  s6 -> s7 [108, 108] { R2575 += 1, R2557 += 1, R2543 += 1 };
  s7 -> s8 [104, 104] { R2575 += 1, R2557 += 1, R2543 += 1 };
  s8 -> s9 [111, 111] { R2575 += 1, R2557 += 1, R2543 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R2575 += 1 };
  s9 -> s9 [0, 65535] { R2575 += 1, R2557 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R2575 += 1 };
  accepting s9, s10, s11;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2575 && R12 = 0 && R1356 = 0 && R1357 = R2539 && R2520 - R2539 = 1 && R2521 = R2575 && R2522 - R2539 = 1 && R2523 = R2575 && R2524 - R2539 = 1 && R2525 = R2575 && R2526 - R2539 = 1 && R2527 = R2575 && R2528 - R2539 = 1 && R2529 = R2575 && R2530 = 0 && R2531 = R2539 && R2532 = 0 && R2533 = R2539 && R2534 = 0 && R2535 = R2539 && R2536 = 0 && R2537 = R2539 && R2538 = 0 && R2542 = 0 && R2543 = 0 && R2544 = 0 && R2556 = 0 && R2558 = 10 && R2559 = R2575 && R2562 = 10 && R2563 = R2575 && R2574 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2545 - R13 < 1 && R2557 - R13 < 1 && -1 < R13 && R2545 - R2029 < 1 && R2557 - R2029 < 1 && R2539 < R2575 && -1 < R2539 && 9 < R2575 && (R2 != 0 || R2027 = 0 || (R2516 = 0 && R2517 = 0)) && (R2 != 0 || R2027 = 0 || (R2518 = 0 && R2519 = 0)) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2516 != 0 || R2 = R2517 || R2 < 1) && (R2518 != 0 || R2 = R2519 || R2 < 1) && (R2546 != 0 || ((R2 != 0 || ((R13 != R2547 || R2547 - R2029 < 1 || R2029 < 1) && (R2029 != R2547 || R2547 - R13 < 1 || R13 < 1) && (R13 = R2547 || R2029 = R2547 || R13 < 1 || R2029 < 1))) && (R13 != R2547 || R2 < 1 || R2547 - R2029 < 1 || R2547 < 0) && (R2029 != R2547 || R2 < 1 || R2547 - R13 < 1) && (R13 = R2547 || R2029 = R2547 || R2 < 1))) && (R2548 != 0 || ((R2 != 0 || ((R13 != R2549 || R2549 - R2029 < 1 || R2029 < 1) && (R2029 != R2549 || R2549 - R13 < 1 || R13 < 1) && (R13 = R2549 || R2029 = R2549 || R13 < 1 || R2029 < 1))) && (R13 != R2549 || R2 < 1 || R2549 - R2029 < 1 || R2549 < 0) && (R2029 != R2549 || R2 < 1 || R2549 - R13 < 1) && (R13 = R2549 || R2029 = R2549 || R2 < 1))) && (R2550 != 0 || ((R2 != 0 || ((R13 != R2551 || R2551 - R2029 < 1 || R2029 < 1) && (R2029 != R2551 || R2551 - R13 < 1 || R13 < 1) && (R13 = R2551 || R2029 = R2551 || R13 < 1 || R2029 < 1))) && (R13 != R2551 || R2 < 1 || R2551 - R2029 < 1 || R2551 < 0) && (R2029 != R2551 || R2 < 1 || R2551 - R13 < 1) && (R13 = R2551 || R2029 = R2551 || R2 < 1))) && (R2552 != 0 || ((R2 != 0 || ((R13 != R2553 || R2553 - R2029 < 1 || R2029 < 1) && (R2029 != R2553 || R2553 - R13 < 1 || R13 < 1) && (R13 = R2553 || R2029 = R2553 || R13 < 1 || R2029 < 1))) && (R13 != R2553 || R2 < 1 || R2553 - R2029 < 1 || R2553 < 0) && (R2029 != R2553 || R2 < 1 || R2553 - R13 < 1) && (R13 = R2553 || R2029 = R2553 || R2 < 1))) && (R2554 != 0 || ((R2 != 0 || ((R13 != R2555 || R2555 - R2029 < 1 || R2029 < 1) && (R2029 != R2555 || R2555 - R13 < 1 || R13 < 1) && (R13 = R2555 || R2029 = R2555 || R13 < 1 || R2029 < 1))) && (R13 != R2555 || R2 < 1 || R2555 - R2029 < 1 || R2555 < 0) && (R2029 != R2555 || R2 < 1 || R2555 - R13 < 1) && (R13 = R2555 || R2029 = R2555 || R2 < 1))) && (R2560 != 10 || R2561 = R2575 || (R2029 = 0 && R2575 = 10)) && (R2564 != 10 || R2565 = R2575 || (R2029 = 0 && R2575 = 10)) && (R2566 != 10 || R2567 = R2575 || (R2029 = 0 && R2575 = 10)) && (R2568 != 10 || R2569 = R2575 || (R2029 = 0 && R2575 = 10)) && (R2570 != 10 || R2571 = R2575 || (R2029 = 0 && R2575 = 10)) && (R2572 != 10 || R2573 = R2575 || (R2029 = 0 && R2575 = 10)) && (R2028 = 0 || (R2540 = 0 && R2541 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2516 = 0 || R2 < 1) && (R2518 = 0 || R2 < 1) && (R2546 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2548 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2550 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2552 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2554 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2560 = 10 || (R2029 = 0 && R2575 = 10)) && (R2564 = 10 || (R2029 = 0 && R2575 = 10)) && (R2566 = 10 || (R2029 = 0 && R2575 = 10)) && (R2568 = 10 || (R2029 = 0 && R2575 = 10)) && (R2570 = 10 || (R2029 = 0 && R2575 = 10)) && (R2572 = 10 || (R2029 = 0 && R2575 = 10)) && (R13 - R2545 < 1 || R2029 - R2545 < 1) && (R13 - R2557 < 1 || R2029 - R2557 < 1);
// End of Parikh automata intersection problem
