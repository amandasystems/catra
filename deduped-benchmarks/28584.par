// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2456, R2457, R2458, R2459, R2460, R2461, R2462, R2463, R2464, R2465, R2466, R2467, R2468, R2469, R2470, R2471, R2472, R2473, R2474, R2475, R2476, R2477, R2478, R2479, R2480, R2481, R2482, R2483, R2484, R2485, R2486, R2487, R2488, R2489, R2490, R2491, R2492, R2493, R2494, R2495, R2496, R2497, R2498, R2499, R2500, R2501, R2502, R2503, R2504, R2505, R2506, R2507, R2508, R2509, R2510, R2511, R2512, R2513, R2514, R2515, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2461 += 1 };
  s0 -> s0 [0, 65535] { R2460 += 1, R2461 += 1 };
  s0 -> s1 [45, 64] { R2461 += 1 };
  s0 -> s1 [91, 107] { R2461 += 1 };
  s0 -> s2 [108, 108] { R2461 += 1 };
  s0 -> s1 [109, 65535] { R2461 += 1 };
  s1 -> s1 [0, 43] { R2461 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2461 += 1 };
  s1 -> s1 [91, 65535] { R2461 += 1 };
  s2 -> s1 [0, 43] { R2461 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2461 += 1 };
  s2 -> s1 [91, 110] { R2461 += 1 };
  s2 -> s3 [111, 111] { R2461 += 1 };
  s2 -> s1 [112, 65535] { R2461 += 1 };
  s3 -> s1 [0, 43] { R2461 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2461 += 1 };
  s3 -> s1 [91, 98] { R2461 += 1 };
  s3 -> s4 [99, 99] { R2461 += 1 };
  s3 -> s1 [100, 65535] { R2461 += 1 };
  s4 -> s1 [0, 43] { R2461 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2461 += 1 };
  s4 -> s1 [91, 96] { R2461 += 1 };
  s4 -> s5 [97, 97] { R2461 += 1 };
  s4 -> s1 [98, 65535] { R2461 += 1 };
  s5 -> s1 [0, 43] { R2461 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2461 += 1 };
  s5 -> s1 [91, 107] { R2461 += 1 };
  s5 -> s6 [108, 108] { R2461 += 1 };
  s5 -> s1 [109, 65535] { R2461 += 1 };
  s6 -> s1 [0, 43] { R2461 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2461 += 1 };
  s6 -> s1 [91, 103] { R2461 += 1 };
  s6 -> s7 [104, 104] { R2461 += 1 };
  s6 -> s1 [105, 65535] { R2461 += 1 };
  s7 -> s1 [0, 43] { R2461 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2461 += 1 };
  s7 -> s1 [91, 110] { R2461 += 1 };
  s7 -> s8 [111, 111] { R2461 += 1 };
  s7 -> s1 [112, 65535] { R2461 += 1 };
  s8 -> s1 [0, 43] { R2461 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2461 += 1 };
  s8 -> s1 [91, 114] { R2461 += 1 };
  s8 -> s9 [115, 115] { R2461 += 1 };
  s8 -> s1 [116, 65535] { R2461 += 1 };
  s9 -> s1 [0, 43] { R2461 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2461 += 1 };
  s9 -> s1 [91, 115] { R2461 += 1 };
  s9 -> s10 [116, 116] { R2461 += 1 };
  s9 -> s1 [117, 65535] { R2461 += 1 };
  s10 -> s1 [0, 43] { R2461 += 1 };
  s10 -> s1 [45, 64] { R2461 += 1 };
  s10 -> s1 [91, 65535] { R2461 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R2462 += 1, R2463 += 1 };
  s0 -> s1 [0, 65535] { R2463 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2463 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2465 += 1 };
  s0 -> s2 [0, 65535] { R2465 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2464 += 1, R2465 += 1 };
  s0 -> s3 [58, 58] { R2465 += 1 };
  s0 -> s1 [59, 65535] { R2465 += 1 };
  s1 -> s1 [0, 57] { R2465 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2465 += 1 };
  s1 -> s1 [59, 65535] { R2465 += 1 };
  s2 -> s1 [0, 57] { R2465 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2465 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2465 += 1 };
  s2 -> s1 [59, 65535] { R2465 += 1 };
  s3 -> s3 [0, 65535] { R2465 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2467 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2466 += 1, R2467 += 1 };
  s0 -> s2 [0, 65535] { R2467 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s3 [91, 91] { R2467 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2467 += 1, R2035 += 1 };
  s1 -> s5 [0, 65535] { R2467 += 1 };
  s1 -> s1 [0, 65535] { R2467 += 1, R2035 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2467 += 1, R2035 += 1 };
  s2 -> s2 [0, 65535] { R2467 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2467 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2467 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2467 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2467 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2469 += 1, R2037 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2468 += 1, R2469 += 1 };
  s0 -> s2 [0, 65535] { R2469 += 1, R2036 += 1, R2037 += 1 };
  s1 -> s1 [0, 65535] { R2469 += 1, R2037 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R2469 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2469 += 1, R2037 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2469 += 1, R2036 += 1, R2037 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2469 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2471 += 1 };
  s0 -> s0 [0, 65535] { R2470 += 1, R2471 += 1 };
  s0 -> s1 [91, 107] { R2471 += 1 };
  s0 -> s2 [108, 108] { R2471 += 1 };
  s0 -> s1 [109, 65535] { R2471 += 1 };
  s1 -> s1 [0, 64] { R2471 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2471 += 1 };
  s2 -> s1 [0, 64] { R2471 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2471 += 1 };
  s2 -> s3 [111, 111] { R2471 += 1 };
  s2 -> s1 [112, 65535] { R2471 += 1 };
  s3 -> s1 [0, 64] { R2471 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2471 += 1 };
  s3 -> s4 [99, 99] { R2471 += 1 };
  s3 -> s1 [100, 65535] { R2471 += 1 };
  s4 -> s1 [0, 64] { R2471 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2471 += 1 };
  s4 -> s5 [97, 97] { R2471 += 1 };
  s4 -> s1 [98, 65535] { R2471 += 1 };
  s5 -> s1 [0, 64] { R2471 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2471 += 1 };
  s5 -> s6 [108, 108] { R2471 += 1 };
  s5 -> s1 [109, 65535] { R2471 += 1 };
  s6 -> s1 [0, 64] { R2471 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2471 += 1 };
  s6 -> s7 [104, 104] { R2471 += 1 };
  s6 -> s1 [105, 65535] { R2471 += 1 };
  s7 -> s1 [0, 64] { R2471 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2471 += 1 };
  s7 -> s8 [111, 111] { R2471 += 1 };
  s7 -> s1 [112, 65535] { R2471 += 1 };
  s8 -> s1 [0, 64] { R2471 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2471 += 1 };
  s8 -> s9 [115, 115] { R2471 += 1 };
  s8 -> s1 [116, 65535] { R2471 += 1 };
  s9 -> s1 [0, 64] { R2471 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2471 += 1 };
  s9 -> s10 [116, 116] { R2471 += 1 };
  s9 -> s1 [117, 65535] { R2471 += 1 };
  s10 -> s1 [0, 64] { R2471 += 1 };
  s10 -> s1 [91, 65535] { R2471 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2472 += 1, R2473 += 1 };
  s0 -> s1 [0, 65535] { R2473 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2473 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2475 += 1 };
  s0 -> s0 [0, 65535] { R2474 += 1, R2475 += 1 };
  s0 -> s2 [0, 65535] { R2475 += 1, R6 += 1 };
  s0 -> s3 [58, 58] { R2475 += 1 };
  s0 -> s1 [59, 65535] { R2475 += 1 };
  s1 -> s1 [0, 57] { R2475 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2475 += 1 };
  s1 -> s1 [59, 65535] { R2475 += 1 };
  s2 -> s1 [0, 57] { R2475 += 1 };
  s2 -> s2 [0, 65535] { R2475 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2475 += 1 };
  s2 -> s1 [59, 65535] { R2475 += 1 };
  s3 -> s3 [0, 65535] { R2475 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2477 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2476 += 1, R2477 += 1 };
  s0 -> s2 [0, 65535] { R2477 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s3 [91, 91] { R2477 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2477 += 1, R2031 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2477 += 1, R2031 += 1 };
  s1 -> s5 [0, 65535] { R2477 += 1 };
  s2 -> s1 [0, 90] { R2477 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2477 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s3 [91, 91] { R2477 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2477 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2477 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2477 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R2479 += 1, R2032 += 1, R2033 += 1 };
  s0 -> s0 [0, 65535] { R2478 += 1, R2479 += 1 };
  s0 -> s2 [0, 65535] { R2479 += 1, R2033 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R2479 += 1, R2032 += 1, R2033 += 1 };
  s1 -> s2 [0, 65535] { R2479 += 1, R2033 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2479 += 1, R2033 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2479 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2479 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2499 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2499 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2498 += 1, R2499 += 1 };
  s0 -> s3 [47, 47] { R2499 += 1 };
  s0 -> s1 [48, 65535] { R2499 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2499 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2499 += 1 };
  s1 -> s1 [48, 65535] { R2499 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2499 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2499 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2499 += 1 };
  s2 -> s1 [48, 65535] { R2499 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2499 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2501 += 1, R2029 += 1 };
  s0 -> s0 [0, 65535] { R2500 += 1, R2501 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2501 += 1, R2029 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2503 += 1, R2484 += 1, R2485 += 1 };
  s0 -> s0 [0, 65535] { R2502 += 1, R2503 += 1 };
  s0 -> s2 [108, 108] { R2503 += 1, R2485 += 1 };
  s1 -> s1 [0, 65535] { R2503 += 1, R2484 += 1, R2485 += 1 };
  s1 -> s2 [108, 108] { R2503 += 1, R2485 += 1 };
  s2 -> s3 [111, 111] { R2503 += 1, R2485 += 1 };
  s3 -> s4 [99, 99] { R2503 += 1, R2485 += 1 };
  s4 -> s5 [97, 97] { R2503 += 1, R2485 += 1 };
  s5 -> s6 [108, 108] { R2503 += 1, R2485 += 1 };
  s6 -> s7 [104, 104] { R2503 += 1, R2485 += 1 };
  s7 -> s8 [111, 111] { R2503 += 1, R2485 += 1 };
  s8 -> s9 [115, 115] { R2503 += 1, R2485 += 1 };
  s9 -> s10 [116, 116] { R2503 += 1, R2485 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2503 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2504 += 1, R2505 += 1 };
  s0 -> s1 [0, 65535] { R2505 += 1, R2486 += 1, R2487 += 1 };
  s0 -> s2 [0, 65535] { R2505 += 1, R2487 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R2505 += 1, R2486 += 1, R2487 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2505 += 1, R2487 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2505 += 1 };
  s2 -> s2 [0, 65535] { R2505 += 1, R2487 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2505 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2507 += 1, R2489 += 1 };
  s0 -> s2 [0, 65535] { R2507 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s0 [0, 65535] { R2506 += 1, R2507 += 1 };
  s0 -> s3 [0, 65535] { R2507 += 1, R2489 += 1, R8 += 1 };
  s0 -> s4 [90, 90] { R2507 += 1, R2489 += 1 };
  s0 -> s1 [91, 65535] { R2507 += 1, R2489 += 1 };
  s1 -> s1 [0, 89] { R2507 += 1, R2489 += 1 };
  s1 -> s1 [0, 65535] { R2507 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [90, 90] { R2507 += 1, R2489 += 1 };
  s1 -> s1 [91, 65535] { R2507 += 1, R2489 += 1 };
  s2 -> s1 [0, 89] { R2507 += 1, R2489 += 1 };
  s2 -> s2 [0, 65535] { R2507 += 1, R2488 += 1, R2489 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2507 += 1, R2489 += 1, R8 += 1 };
  s2 -> s4 [90, 90] { R2507 += 1, R2489 += 1 };
  s2 -> s1 [91, 65535] { R2507 += 1, R2489 += 1 };
  s3 -> s1 [0, 89] { R2507 += 1, R2489 += 1 };
  s3 -> s5 [0, 65535] { R2507 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2507 += 1, R2489 += 1, R8 += 1 };
  s3 -> s4 [90, 90] { R2507 += 1, R2489 += 1 };
  s3 -> s1 [91, 65535] { R2507 += 1, R2489 += 1 };
  s4 -> s4 [0, 65535] { R2507 += 1, R2489 += 1 };
  s5 -> s5 [0, 65535] { R2507 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2508 += 1, R2509 += 1 };
  s0 -> s1 [0, 65535] { R2509 += 1, R2490 += 1, R2491 += 1 };
  s0 -> s2 [0, 65535] { R2509 += 1, R2491 += 1, R2456 += 1, R2457 += 1 };
  s0 -> s3 [0, 65535] { R2509 += 1, R2491 += 1, R2457 += 1, R2027 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2509 += 1, R2490 += 1, R2491 += 1 };
  s1 -> s2 [0, 65535] { R2509 += 1, R2491 += 1, R2456 += 1, R2457 += 1 };
  s1 -> s3 [0, 65535] { R2509 += 1, R2491 += 1, R2457 += 1, R2027 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2509 += 1, R2491 += 1, R2456 += 1, R2457 += 1 };
  s2 -> s3 [0, 65535] { R2509 += 1, R2491 += 1, R2457 += 1, R2027 += 1 };
  s2 -> s6 [0, 65535] { R2509 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2509 += 1, R2491 += 1 };
  s3 -> s3 [0, 65535] { R2509 += 1, R2491 += 1, R2457 += 1, R2027 += 1 };
  s3 -> s6 [0, 65535] { R2509 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2509 += 1, R2491 += 1 };
  s5 -> s6 [0, 65535] { R2509 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2509 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 110] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s0 -> s0 [0, 65535] { R2510 += 1, R2511 += 1 };
  s0 -> s2 [0, 65535] { R2511 += 1, R2493 += 1, R2458 += 1, R2459 += 1 };
  s0 -> s3 [0, 65535] { R2511 += 1, R2492 += 1, R2493 += 1 };
  s0 -> s4 [111, 111] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s0 -> s1 [112, 65535] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s1 -> s6 [0, 65535] { R2511 += 1 };
  s1 -> s9 [0, 65535] { R2511 += 1, R2493 += 1 };
  s2 -> s1 [0, 110] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2511 += 1 };
  s2 -> s2 [0, 65535] { R2511 += 1, R2493 += 1, R2458 += 1, R2459 += 1 };
  s2 -> s4 [111, 111] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s2 -> s1 [112, 65535] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s3 -> s1 [0, 110] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2511 += 1, R2493 += 1, R2458 += 1, R2459 += 1 };
  s3 -> s3 [0, 65535] { R2511 += 1, R2492 += 1, R2493 += 1 };
  s3 -> s4 [111, 111] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s3 -> s1 [112, 65535] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s4 -> s1 [0, 114] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2511 += 1, R2493 += 1 };
  s4 -> s6 [0, 65535] { R2511 += 1 };
  s4 -> s7 [115, 115] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s4 -> s1 [116, 65535] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2511 += 1 };
  s7 -> s1 [0, 115] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2511 += 1 };
  s7 -> s7 [0, 65535] { R2511 += 1, R2493 += 1 };
  s7 -> s8 [116, 116] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s7 -> s1 [117, 65535] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s8 -> s1 [0, 65535] { R2511 += 1, R2493 += 1, R2459 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R2511 += 1 };
  s9 -> s9 [0, 65535] { R2511 += 1, R2493 += 1 };
  accepting s3, s4, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2513 += 1, R2495 += 1, R2481 += 1, R2028 += 1 };
  s0 -> s0 [0, 65535] { R2512 += 1, R2513 += 1 };
  s0 -> s2 [0, 65535] { R2513 += 1, R2494 += 1, R2495 += 1 };
  s0 -> s3 [0, 65535] { R2513 += 1, R2495 += 1, R2480 += 1, R2481 += 1 };
  s1 -> s1 [0, 65535] { R2513 += 1, R2495 += 1, R2481 += 1, R2028 += 1 };
  s1 -> s6 [0, 65535] { R2513 += 1, R2495 += 1 };
  s1 -> s4 [0, 65535] { R2513 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2513 += 1, R2495 += 1, R2481 += 1, R2028 += 1 };
  s2 -> s2 [0, 65535] { R2513 += 1, R2494 += 1, R2495 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2513 += 1, R2495 += 1, R2480 += 1, R2481 += 1 };
  s3 -> s1 [0, 65535] { R2513 += 1, R2495 += 1, R2481 += 1, R2028 += 1 };
  s3 -> s4 [0, 65535] { R2513 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2513 += 1, R2495 += 1, R2480 += 1, R2481 += 1 };
  s4 -> s4 [0, 65535] { R2513 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2513 += 1, R2495 += 1 };
  s6 -> s4 [0, 65535] { R2513 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2515 += 1, R2497 += 1, R2482 += 1, R2483 += 1 };
  s0 -> s0 [0, 65535] { R2514 += 1, R2515 += 1 };
  s0 -> s2 [0, 65535] { R2515 += 1, R2496 += 1, R2497 += 1 };
  s0 -> s3 [108, 108] { R2515 += 1, R2497 += 1, R2483 += 1 };
  s1 -> s1 [0, 65535] { R2515 += 1, R2497 += 1, R2482 += 1, R2483 += 1 };
  s1 -> s3 [108, 108] { R2515 += 1, R2497 += 1, R2483 += 1 };
  s2 -> s1 [0, 65535] { R2515 += 1, R2497 += 1, R2482 += 1, R2483 += 1 };
  s2 -> s2 [0, 65535] { R2515 += 1, R2496 += 1, R2497 += 1 };
  s2 -> s3 [108, 108] { R2515 += 1, R2497 += 1, R2483 += 1 };
  s3 -> s4 [111, 111] { R2515 += 1, R2497 += 1, R2483 += 1 };
  s4 -> s5 [99, 99] { R2515 += 1, R2497 += 1, R2483 += 1 };
  s5 -> s6 [97, 97] { R2515 += 1, R2497 += 1, R2483 += 1 };
  s6 -> s7 [108, 108] { R2515 += 1, R2497 += 1, R2483 += 1 };
  s7 -> s8 [104, 104] { R2515 += 1, R2497 += 1, R2483 += 1 };
  s8 -> s9 [0, 65535] { R2515 += 1 };
  s8 -> s8 [0, 65535] { R2515 += 1, R2497 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R2515 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s8, s9, s10;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2515 && R12 = 0 && R1356 = 0 && R1357 = R2479 && R2460 - R2479 = 1 && R2461 = R2515 && R2462 - R2479 = 1 && R2463 = R2515 && R2464 - R2479 = 1 && R2465 = R2515 && R2466 - R2479 = 1 && R2467 = R2515 && R2468 - R2479 = 1 && R2469 = R2515 && R2470 = 0 && R2471 = R2479 && R2472 = 0 && R2473 = R2479 && R2474 = 0 && R2475 = R2479 && R2476 = 0 && R2477 = R2479 && R2478 = 0 && R2482 = 0 && R2483 = 0 && R2484 = 0 && R2496 = 0 && R2498 = 10 && R2499 = R2515 && R2502 = 10 && R2503 = R2515 && R2514 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2485 - R13 < 1 && R2497 - R13 < 1 && -1 < R13 && R2485 - R2029 < 1 && R2497 - R2029 < 1 && R2479 < R2515 && -1 < R2479 && 9 < R2515 && (R2 != 0 || R2027 = 0 || (R2456 = 0 && R2457 = 0)) && (R2 != 0 || R2027 = 0 || (R2458 = 0 && R2459 = 0)) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2456 != 0 || R2 = R2457 || R2 < 1) && (R2458 != 0 || R2 = R2459 || R2 < 1) && (R2486 != 0 || ((R2 != 0 || ((R13 != R2487 || R2487 - R2029 < 1 || R2029 < 1) && (R2029 != R2487 || R2487 - R13 < 1 || R13 < 1) && (R13 = R2487 || R2029 = R2487 || R13 < 1 || R2029 < 1))) && (R13 != R2487 || R2 < 1 || R2487 - R2029 < 1 || R2487 < 0) && (R2029 != R2487 || R2 < 1 || R2487 - R13 < 1) && (R13 = R2487 || R2029 = R2487 || R2 < 1))) && (R2488 != 0 || ((R2 != 0 || ((R13 != R2489 || R2489 - R2029 < 1 || R2029 < 1) && (R2029 != R2489 || R2489 - R13 < 1 || R13 < 1) && (R13 = R2489 || R2029 = R2489 || R13 < 1 || R2029 < 1))) && (R13 != R2489 || R2 < 1 || R2489 - R2029 < 1 || R2489 < 0) && (R2029 != R2489 || R2 < 1 || R2489 - R13 < 1) && (R13 = R2489 || R2029 = R2489 || R2 < 1))) && (R2490 != 0 || ((R2 != 0 || ((R13 != R2491 || R2491 - R2029 < 1 || R2029 < 1) && (R2029 != R2491 || R2491 - R13 < 1 || R13 < 1) && (R13 = R2491 || R2029 = R2491 || R13 < 1 || R2029 < 1))) && (R13 != R2491 || R2 < 1 || R2491 - R2029 < 1 || R2491 < 0) && (R2029 != R2491 || R2 < 1 || R2491 - R13 < 1) && (R13 = R2491 || R2029 = R2491 || R2 < 1))) && (R2492 != 0 || ((R2 != 0 || ((R13 != R2493 || R2493 - R2029 < 1 || R2029 < 1) && (R2029 != R2493 || R2493 - R13 < 1 || R13 < 1) && (R13 = R2493 || R2029 = R2493 || R13 < 1 || R2029 < 1))) && (R13 != R2493 || R2 < 1 || R2493 - R2029 < 1 || R2493 < 0) && (R2029 != R2493 || R2 < 1 || R2493 - R13 < 1) && (R13 = R2493 || R2029 = R2493 || R2 < 1))) && (R2494 != 0 || ((R2 != 0 || ((R13 != R2495 || R2495 - R2029 < 1 || R2029 < 1) && (R2029 != R2495 || R2495 - R13 < 1 || R13 < 1) && (R13 = R2495 || R2029 = R2495 || R13 < 1 || R2029 < 1))) && (R13 != R2495 || R2 < 1 || R2495 - R2029 < 1 || R2495 < 0) && (R2029 != R2495 || R2 < 1 || R2495 - R13 < 1) && (R13 = R2495 || R2029 = R2495 || R2 < 1))) && (R2500 != 10 || R2501 = R2515 || (R2029 = 0 && R2515 = 10)) && (R2504 != 10 || R2505 = R2515 || (R2029 = 0 && R2515 = 10)) && (R2506 != 10 || R2507 = R2515 || (R2029 = 0 && R2515 = 10)) && (R2508 != 10 || R2509 = R2515 || (R2029 = 0 && R2515 = 10)) && (R2510 != 10 || R2511 = R2515 || (R2029 = 0 && R2515 = 10)) && (R2512 != 10 || R2513 = R2515 || (R2029 = 0 && R2515 = 10)) && (R2028 = 0 || (R2480 = 0 && R2481 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2456 = 0 || R2 < 1) && (R2458 = 0 || R2 < 1) && (R2486 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2488 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2490 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2492 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2494 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2500 = 10 || (R2029 = 0 && R2515 = 10)) && (R2504 = 10 || (R2029 = 0 && R2515 = 10)) && (R2506 = 10 || (R2029 = 0 && R2515 = 10)) && (R2508 = 10 || (R2029 = 0 && R2515 = 10)) && (R2510 = 10 || (R2029 = 0 && R2515 = 10)) && (R2512 = 10 || (R2029 = 0 && R2515 = 10)) && (R13 - R2485 < 1 || R2029 - R2485 < 1) && (R13 - R2497 < 1 || R2029 - R2497 < 1);
// End of Parikh automata intersection problem
