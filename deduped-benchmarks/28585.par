// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2576, R2577, R2578, R2579, R2580, R2581, R2582, R2583, R2584, R2585, R2586, R2587, R2588, R2589, R2590, R2591, R2592, R2593, R2594, R2595, R2596, R2597, R2598, R2599, R2600, R2601, R2602, R2603, R2604, R2605, R2606, R2607, R2608, R2609, R2610, R2611, R2612, R2613, R2614, R2615, R2616, R2617, R2618, R2619, R2620, R2621, R2622, R2623, R2624, R2625, R2626, R2627, R2628, R2629, R2630, R2631, R2632, R2633, R2634, R2635, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2581 += 1 };
  s0 -> s0 [0, 65535] { R2580 += 1, R2581 += 1 };
  s0 -> s1 [45, 64] { R2581 += 1 };
  s0 -> s1 [91, 107] { R2581 += 1 };
  s0 -> s2 [108, 108] { R2581 += 1 };
  s0 -> s1 [109, 65535] { R2581 += 1 };
  s1 -> s1 [0, 43] { R2581 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2581 += 1 };
  s1 -> s1 [91, 65535] { R2581 += 1 };
  s2 -> s1 [0, 43] { R2581 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2581 += 1 };
  s2 -> s1 [91, 110] { R2581 += 1 };
  s2 -> s3 [111, 111] { R2581 += 1 };
  s2 -> s1 [112, 65535] { R2581 += 1 };
  s3 -> s1 [0, 43] { R2581 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2581 += 1 };
  s3 -> s1 [91, 98] { R2581 += 1 };
  s3 -> s4 [99, 99] { R2581 += 1 };
  s3 -> s1 [100, 65535] { R2581 += 1 };
  s4 -> s1 [0, 43] { R2581 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2581 += 1 };
  s4 -> s1 [91, 96] { R2581 += 1 };
  s4 -> s5 [97, 97] { R2581 += 1 };
  s4 -> s1 [98, 65535] { R2581 += 1 };
  s5 -> s1 [0, 43] { R2581 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2581 += 1 };
  s5 -> s1 [91, 107] { R2581 += 1 };
  s5 -> s6 [108, 108] { R2581 += 1 };
  s5 -> s1 [109, 65535] { R2581 += 1 };
  s6 -> s1 [0, 43] { R2581 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2581 += 1 };
  s6 -> s1 [91, 103] { R2581 += 1 };
  s6 -> s7 [104, 104] { R2581 += 1 };
  s6 -> s1 [105, 65535] { R2581 += 1 };
  s7 -> s1 [0, 43] { R2581 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2581 += 1 };
  s7 -> s1 [91, 110] { R2581 += 1 };
  s7 -> s8 [111, 111] { R2581 += 1 };
  s7 -> s1 [112, 65535] { R2581 += 1 };
  s8 -> s1 [0, 43] { R2581 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2581 += 1 };
  s8 -> s1 [91, 114] { R2581 += 1 };
  s8 -> s9 [115, 115] { R2581 += 1 };
  s8 -> s1 [116, 65535] { R2581 += 1 };
  s9 -> s1 [0, 43] { R2581 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2581 += 1 };
  s9 -> s1 [91, 115] { R2581 += 1 };
  s9 -> s10 [116, 116] { R2581 += 1 };
  s9 -> s1 [117, 65535] { R2581 += 1 };
  s10 -> s1 [0, 43] { R2581 += 1 };
  s10 -> s1 [45, 64] { R2581 += 1 };
  s10 -> s1 [91, 65535] { R2581 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R2582 += 1, R2583 += 1 };
  s0 -> s1 [0, 65535] { R2583 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2583 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2585 += 1 };
  s0 -> s2 [0, 65535] { R2585 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2584 += 1, R2585 += 1 };
  s0 -> s3 [58, 58] { R2585 += 1 };
  s0 -> s1 [59, 65535] { R2585 += 1 };
  s1 -> s1 [0, 57] { R2585 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2585 += 1 };
  s1 -> s1 [59, 65535] { R2585 += 1 };
  s2 -> s1 [0, 57] { R2585 += 1 };
  s2 -> s2 [0, 65535] { R2585 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2585 += 1 };
  s2 -> s1 [59, 65535] { R2585 += 1 };
  s3 -> s3 [0, 65535] { R2585 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2587 += 1, R2035 += 1 };
  s0 -> s2 [0, 65535] { R2587 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2586 += 1, R2587 += 1 };
  s0 -> s3 [91, 91] { R2587 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2587 += 1, R2035 += 1 };
  s1 -> s1 [0, 65535] { R2587 += 1, R2035 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2587 += 1 };
  s2 -> s1 [0, 90] { R2587 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2587 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s3 [91, 91] { R2587 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2587 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2587 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2587 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2589 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s0 [0, 65535] { R2588 += 1, R2589 += 1 };
  s0 -> s2 [0, 65535] { R2589 += 1, R2037 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R2589 += 1, R2036 += 1, R2037 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2589 += 1, R2037 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R2589 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2589 += 1, R2037 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R2589 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2591 += 1 };
  s0 -> s0 [0, 65535] { R2590 += 1, R2591 += 1 };
  s0 -> s1 [91, 107] { R2591 += 1 };
  s0 -> s2 [108, 108] { R2591 += 1 };
  s0 -> s1 [109, 65535] { R2591 += 1 };
  s1 -> s1 [0, 64] { R2591 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2591 += 1 };
  s2 -> s1 [0, 64] { R2591 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2591 += 1 };
  s2 -> s3 [111, 111] { R2591 += 1 };
  s2 -> s1 [112, 65535] { R2591 += 1 };
  s3 -> s1 [0, 64] { R2591 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2591 += 1 };
  s3 -> s4 [99, 99] { R2591 += 1 };
  s3 -> s1 [100, 65535] { R2591 += 1 };
  s4 -> s1 [0, 64] { R2591 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2591 += 1 };
  s4 -> s5 [97, 97] { R2591 += 1 };
  s4 -> s1 [98, 65535] { R2591 += 1 };
  s5 -> s1 [0, 64] { R2591 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2591 += 1 };
  s5 -> s6 [108, 108] { R2591 += 1 };
  s5 -> s1 [109, 65535] { R2591 += 1 };
  s6 -> s1 [0, 64] { R2591 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2591 += 1 };
  s6 -> s7 [104, 104] { R2591 += 1 };
  s6 -> s1 [105, 65535] { R2591 += 1 };
  s7 -> s1 [0, 64] { R2591 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2591 += 1 };
  s7 -> s8 [111, 111] { R2591 += 1 };
  s7 -> s1 [112, 65535] { R2591 += 1 };
  s8 -> s1 [0, 64] { R2591 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2591 += 1 };
  s8 -> s9 [115, 115] { R2591 += 1 };
  s8 -> s1 [116, 65535] { R2591 += 1 };
  s9 -> s1 [0, 64] { R2591 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2591 += 1 };
  s9 -> s10 [116, 116] { R2591 += 1 };
  s9 -> s1 [117, 65535] { R2591 += 1 };
  s10 -> s1 [0, 64] { R2591 += 1 };
  s10 -> s1 [91, 65535] { R2591 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2592 += 1, R2593 += 1 };
  s0 -> s1 [0, 65535] { R2593 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2593 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2595 += 1 };
  s0 -> s2 [0, 65535] { R2595 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R2594 += 1, R2595 += 1 };
  s0 -> s3 [58, 58] { R2595 += 1 };
  s0 -> s1 [59, 65535] { R2595 += 1 };
  s1 -> s1 [0, 57] { R2595 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2595 += 1 };
  s1 -> s1 [59, 65535] { R2595 += 1 };
  s2 -> s1 [0, 57] { R2595 += 1 };
  s2 -> s2 [0, 65535] { R2595 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2595 += 1 };
  s2 -> s1 [59, 65535] { R2595 += 1 };
  s3 -> s3 [0, 65535] { R2595 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2597 += 1, R2031 += 1 };
  s0 -> s2 [0, 65535] { R2597 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2596 += 1, R2597 += 1 };
  s0 -> s3 [91, 91] { R2597 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2597 += 1, R2031 += 1 };
  s1 -> s5 [0, 65535] { R2597 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2597 += 1, R2031 += 1 };
  s2 -> s1 [0, 90] { R2597 += 1, R2031 += 1 };
  s2 -> s2 [0, 65535] { R2597 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2597 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2597 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2597 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2597 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R2599 += 1, R2033 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2599 += 1, R2032 += 1, R2033 += 1 };
  s0 -> s0 [0, 65535] { R2598 += 1, R2599 += 1 };
  s1 -> s4 [0, 65535] { R2599 += 1 };
  s1 -> s1 [0, 65535] { R2599 += 1, R2033 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2599 += 1, R2033 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2599 += 1, R2032 += 1, R2033 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2599 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2619 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2619 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2618 += 1, R2619 += 1 };
  s0 -> s3 [47, 47] { R2619 += 1 };
  s0 -> s1 [48, 65535] { R2619 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2619 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2619 += 1 };
  s1 -> s1 [48, 65535] { R2619 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2619 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2619 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2619 += 1 };
  s2 -> s1 [48, 65535] { R2619 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R2619 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2620 += 1, R2621 += 1 };
  s0 -> s1 [0, 65535] { R2621 += 1, R2029 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2621 += 1, R2029 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2622 += 1, R2623 += 1 };
  s0 -> s1 [0, 65535] { R2623 += 1, R2604 += 1, R2605 += 1 };
  s0 -> s2 [108, 108] { R2623 += 1, R2605 += 1 };
  s1 -> s1 [0, 65535] { R2623 += 1, R2604 += 1, R2605 += 1 };
  s1 -> s2 [108, 108] { R2623 += 1, R2605 += 1 };
  s2 -> s3 [111, 111] { R2623 += 1, R2605 += 1 };
  s3 -> s4 [99, 99] { R2623 += 1, R2605 += 1 };
  s4 -> s5 [97, 97] { R2623 += 1, R2605 += 1 };
  s5 -> s6 [108, 108] { R2623 += 1, R2605 += 1 };
  s6 -> s7 [104, 104] { R2623 += 1, R2605 += 1 };
  s7 -> s8 [111, 111] { R2623 += 1, R2605 += 1 };
  s8 -> s9 [115, 115] { R2623 += 1, R2605 += 1 };
  s9 -> s10 [116, 116] { R2623 += 1, R2605 += 1 };
  s10 -> s10 [0, 65535] { R2623 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2625 += 1, R2606 += 1, R2607 += 1 };
  s0 -> s0 [0, 65535] { R2624 += 1, R2625 += 1 };
  s0 -> s2 [0, 65535] { R2625 += 1, R2607 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R2625 += 1, R2606 += 1, R2607 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2625 += 1, R2607 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2625 += 1, R2607 += 1, R2 += 1 };
  s2 -> s4 [0, 65535] { R2625 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2625 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2627 += 1, R2609 += 1 };
  s0 -> s2 [0, 65535] { R2627 += 1, R2609 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R2627 += 1, R2608 += 1, R2609 += 1 };
  s0 -> s0 [0, 65535] { R2626 += 1, R2627 += 1 };
  s0 -> s4 [90, 90] { R2627 += 1, R2609 += 1 };
  s0 -> s1 [91, 65535] { R2627 += 1, R2609 += 1 };
  s1 -> s1 [0, 89] { R2627 += 1, R2609 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2627 += 1 };
  s1 -> s4 [90, 90] { R2627 += 1, R2609 += 1 };
  s1 -> s1 [91, 65535] { R2627 += 1, R2609 += 1 };
  s2 -> s1 [0, 89] { R2627 += 1, R2609 += 1 };
  s2 -> s2 [0, 65535] { R2627 += 1, R2609 += 1, R8 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2627 += 1 };
  s2 -> s4 [90, 90] { R2627 += 1, R2609 += 1 };
  s2 -> s1 [91, 65535] { R2627 += 1, R2609 += 1 };
  s3 -> s1 [0, 89] { R2627 += 1, R2609 += 1 };
  s3 -> s2 [0, 65535] { R2627 += 1, R2609 += 1, R8 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2627 += 1, R2608 += 1, R2609 += 1 };
  s3 -> s4 [90, 90] { R2627 += 1, R2609 += 1 };
  s3 -> s1 [91, 65535] { R2627 += 1, R2609 += 1 };
  s4 -> s4 [0, 65535] { R2627 += 1, R2609 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2627 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2629 += 1, R2610 += 1, R2611 += 1 };
  s0 -> s2 [0, 65535] { R2629 += 1, R2611 += 1, R2576 += 1, R2577 += 1 };
  s0 -> s0 [0, 65535] { R2628 += 1, R2629 += 1 };
  s0 -> s3 [0, 65535] { R2629 += 1, R2611 += 1, R2577 += 1, R2027 += 1 };
  s1 -> s1 [0, 65535] { R2629 += 1, R2610 += 1, R2611 += 1 };
  s1 -> s2 [0, 65535] { R2629 += 1, R2611 += 1, R2576 += 1, R2577 += 1 };
  s1 -> s3 [0, 65535] { R2629 += 1, R2611 += 1, R2577 += 1, R2027 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2629 += 1, R2611 += 1, R2576 += 1, R2577 += 1 };
  s2 -> s3 [0, 65535] { R2629 += 1, R2611 += 1, R2577 += 1, R2027 += 1 };
  s2 -> s5 [0, 65535] { R2629 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R2629 += 1, R2611 += 1 };
  s3 -> s3 [0, 65535] { R2629 += 1, R2611 += 1, R2577 += 1, R2027 += 1 };
  s3 -> s5 [0, 65535] { R2629 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2629 += 1, R2611 += 1 };
  s4 -> s5 [0, 65535] { R2629 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2629 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 115] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s0 -> s0 [0, 65535] { R2630 += 1, R2631 += 1 };
  s0 -> s2 [0, 65535] { R2631 += 1, R2613 += 1, R2578 += 1, R2579 += 1 };
  s0 -> s3 [0, 65535] { R2631 += 1, R2612 += 1, R2613 += 1 };
  s0 -> s4 [116, 116] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s0 -> s1 [117, 65535] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s1 -> s1 [0, 65535] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s1 -> s6 [0, 65535] { R2631 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R2631 += 1, R2613 += 1 };
  s2 -> s1 [0, 115] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s2 -> s6 [0, 65535] { R2631 += 1 };
  s2 -> s2 [0, 65535] { R2631 += 1, R2613 += 1, R2578 += 1, R2579 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [116, 116] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s2 -> s1 [117, 65535] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s3 -> s1 [0, 115] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s3 -> s2 [0, 65535] { R2631 += 1, R2613 += 1, R2578 += 1, R2579 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2631 += 1, R2612 += 1, R2613 += 1 };
  s3 -> s4 [116, 116] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s3 -> s1 [117, 65535] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s4 -> s1 [0, 65535] { R2631 += 1, R2613 += 1, R2579 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2631 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2631 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R2631 += 1, R2613 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2633 += 1, R2615 += 1, R2600 += 1, R2601 += 1 };
  s0 -> s0 [0, 65535] { R2632 += 1, R2633 += 1 };
  s0 -> s2 [0, 65535] { R2633 += 1, R2614 += 1, R2615 += 1 };
  s0 -> s3 [0, 65535] { R2633 += 1, R2615 += 1, R2601 += 1, R2028 += 1 };
  s1 -> s1 [0, 65535] { R2633 += 1, R2615 += 1, R2600 += 1, R2601 += 1 };
  s1 -> s4 [0, 65535] { R2633 += 1 };
  s1 -> s3 [0, 65535] { R2633 += 1, R2615 += 1, R2601 += 1, R2028 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2633 += 1, R2615 += 1, R2600 += 1, R2601 += 1 };
  s2 -> s2 [0, 65535] { R2633 += 1, R2614 += 1, R2615 += 1 };
  s2 -> s3 [0, 65535] { R2633 += 1, R2615 += 1, R2601 += 1, R2028 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R2633 += 1 };
  s3 -> s3 [0, 65535] { R2633 += 1, R2615 += 1, R2601 += 1, R2028 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2633 += 1, R2615 += 1 };
  s4 -> s4 [0, 65535] { R2633 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2633 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2633 += 1, R2615 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R2634 += 1, R2635 += 1 };
  s0 -> s1 [0, 65535] { R2635 += 1, R2617 += 1, R2602 += 1, R2603 += 1 };
  s0 -> s2 [0, 65535] { R2635 += 1, R2616 += 1, R2617 += 1 };
  s0 -> s3 [108, 108] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s1 -> s1 [0, 65535] { R2635 += 1, R2617 += 1, R2602 += 1, R2603 += 1 };
  s1 -> s3 [108, 108] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s2 -> s1 [0, 65535] { R2635 += 1, R2617 += 1, R2602 += 1, R2603 += 1 };
  s2 -> s2 [0, 65535] { R2635 += 1, R2616 += 1, R2617 += 1 };
  s2 -> s3 [108, 108] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s3 -> s4 [111, 111] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s4 -> s5 [99, 99] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s5 -> s6 [97, 97] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s6 -> s7 [108, 108] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s7 -> s8 [104, 104] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s8 -> s9 [111, 111] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s9 -> s10 [115, 115] { R2635 += 1, R2617 += 1, R2603 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s12 [0, 65535] { R2635 += 1 };
  s10 -> s10 [0, 65535] { R2635 += 1, R2617 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R2635 += 1 };
  accepting s10, s11, s12;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2635 && R12 = 0 && R1356 = 0 && R1357 = R2599 && R2580 - R2599 = 1 && R2581 = R2635 && R2582 - R2599 = 1 && R2583 = R2635 && R2584 - R2599 = 1 && R2585 = R2635 && R2586 - R2599 = 1 && R2587 = R2635 && R2588 - R2599 = 1 && R2589 = R2635 && R2590 = 0 && R2591 = R2599 && R2592 = 0 && R2593 = R2599 && R2594 = 0 && R2595 = R2599 && R2596 = 0 && R2597 = R2599 && R2598 = 0 && R2602 = 0 && R2603 = 0 && R2604 = 0 && R2616 = 0 && R2618 = 10 && R2619 = R2635 && R2622 = 10 && R2623 = R2635 && R2634 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2605 - R13 < 1 && R2617 - R13 < 1 && -1 < R13 && R2605 - R2029 < 1 && R2617 - R2029 < 1 && R2599 < R2635 && -1 < R2599 && 9 < R2635 && (R2 != 0 || R2027 = 0 || (R2576 = 0 && R2577 = 0)) && (R2 != 0 || R2027 = 0 || (R2578 = 0 && R2579 = 0)) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2576 != 0 || R2 = R2577 || R2 < 1) && (R2578 != 0 || R2 = R2579 || R2 < 1) && (R2606 != 0 || ((R2 != 0 || ((R13 != R2607 || R2607 - R2029 < 1 || R2029 < 1) && (R2029 != R2607 || R2607 - R13 < 1 || R13 < 1) && (R13 = R2607 || R2029 = R2607 || R13 < 1 || R2029 < 1))) && (R13 != R2607 || R2 < 1 || R2607 - R2029 < 1 || R2607 < 0) && (R2029 != R2607 || R2 < 1 || R2607 - R13 < 1) && (R13 = R2607 || R2029 = R2607 || R2 < 1))) && (R2608 != 0 || ((R2 != 0 || ((R13 != R2609 || R2609 - R2029 < 1 || R2029 < 1) && (R2029 != R2609 || R2609 - R13 < 1 || R13 < 1) && (R13 = R2609 || R2029 = R2609 || R13 < 1 || R2029 < 1))) && (R13 != R2609 || R2 < 1 || R2609 - R2029 < 1 || R2609 < 0) && (R2029 != R2609 || R2 < 1 || R2609 - R13 < 1) && (R13 = R2609 || R2029 = R2609 || R2 < 1))) && (R2610 != 0 || ((R2 != 0 || ((R13 != R2611 || R2611 - R2029 < 1 || R2029 < 1) && (R2029 != R2611 || R2611 - R13 < 1 || R13 < 1) && (R13 = R2611 || R2029 = R2611 || R13 < 1 || R2029 < 1))) && (R13 != R2611 || R2 < 1 || R2611 - R2029 < 1 || R2611 < 0) && (R2029 != R2611 || R2 < 1 || R2611 - R13 < 1) && (R13 = R2611 || R2029 = R2611 || R2 < 1))) && (R2612 != 0 || ((R2 != 0 || ((R13 != R2613 || R2613 - R2029 < 1 || R2029 < 1) && (R2029 != R2613 || R2613 - R13 < 1 || R13 < 1) && (R13 = R2613 || R2029 = R2613 || R13 < 1 || R2029 < 1))) && (R13 != R2613 || R2 < 1 || R2613 - R2029 < 1 || R2613 < 0) && (R2029 != R2613 || R2 < 1 || R2613 - R13 < 1) && (R13 = R2613 || R2029 = R2613 || R2 < 1))) && (R2614 != 0 || ((R2 != 0 || ((R13 != R2615 || R2615 - R2029 < 1 || R2029 < 1) && (R2029 != R2615 || R2615 - R13 < 1 || R13 < 1) && (R13 = R2615 || R2029 = R2615 || R13 < 1 || R2029 < 1))) && (R13 != R2615 || R2 < 1 || R2615 - R2029 < 1 || R2615 < 0) && (R2029 != R2615 || R2 < 1 || R2615 - R13 < 1) && (R13 = R2615 || R2029 = R2615 || R2 < 1))) && (R2620 != 10 || R2621 = R2635 || (R2029 = 0 && R2635 = 10)) && (R2624 != 10 || R2625 = R2635 || (R2029 = 0 && R2635 = 10)) && (R2626 != 10 || R2627 = R2635 || (R2029 = 0 && R2635 = 10)) && (R2628 != 10 || R2629 = R2635 || (R2029 = 0 && R2635 = 10)) && (R2630 != 10 || R2631 = R2635 || (R2029 = 0 && R2635 = 10)) && (R2632 != 10 || R2633 = R2635 || (R2029 = 0 && R2635 = 10)) && (R2028 = 0 || (R2600 = 0 && R2601 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2576 = 0 || R2 < 1) && (R2578 = 0 || R2 < 1) && (R2606 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2608 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2610 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2612 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2614 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2620 = 10 || (R2029 = 0 && R2635 = 10)) && (R2624 = 10 || (R2029 = 0 && R2635 = 10)) && (R2626 = 10 || (R2029 = 0 && R2635 = 10)) && (R2628 = 10 || (R2029 = 0 && R2635 = 10)) && (R2630 = 10 || (R2029 = 0 && R2635 = 10)) && (R2632 = 10 || (R2029 = 0 && R2635 = 10)) && (R13 - R2605 < 1 || R2029 - R2605 < 1) && (R13 - R2617 < 1 || R2029 - R2617 < 1);
// End of Parikh automata intersection problem
