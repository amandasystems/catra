// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2636, R2637, R2638, R2639, R2640, R2641, R2642, R2643, R2644, R2645, R2646, R2647, R2648, R2649, R2650, R2651, R2652, R2653, R2654, R2655, R2656, R2657, R2658, R2659, R2660, R2661, R2662, R2663, R2664, R2665, R2666, R2667, R2668, R2669, R2670, R2671, R2672, R2673, R2674, R2675, R2676, R2677, R2678, R2679, R2680, R2681, R2682, R2683, R2684, R2685, R2686, R2687, R2688, R2689, R2690, R2691, R2692, R2693, R2694, R2695, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2641 += 1 };
  s0 -> s0 [0, 65535] { R2640 += 1, R2641 += 1 };
  s0 -> s1 [45, 64] { R2641 += 1 };
  s0 -> s1 [91, 107] { R2641 += 1 };
  s0 -> s2 [108, 108] { R2641 += 1 };
  s0 -> s1 [109, 65535] { R2641 += 1 };
  s1 -> s1 [0, 43] { R2641 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2641 += 1 };
  s1 -> s1 [91, 65535] { R2641 += 1 };
  s2 -> s1 [0, 43] { R2641 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2641 += 1 };
  s2 -> s1 [91, 110] { R2641 += 1 };
  s2 -> s3 [111, 111] { R2641 += 1 };
  s2 -> s1 [112, 65535] { R2641 += 1 };
  s3 -> s1 [0, 43] { R2641 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2641 += 1 };
  s3 -> s1 [91, 98] { R2641 += 1 };
  s3 -> s4 [99, 99] { R2641 += 1 };
  s3 -> s1 [100, 65535] { R2641 += 1 };
  s4 -> s1 [0, 43] { R2641 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2641 += 1 };
  s4 -> s1 [91, 96] { R2641 += 1 };
  s4 -> s5 [97, 97] { R2641 += 1 };
  s4 -> s1 [98, 65535] { R2641 += 1 };
  s5 -> s1 [0, 43] { R2641 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2641 += 1 };
  s5 -> s1 [91, 107] { R2641 += 1 };
  s5 -> s6 [108, 108] { R2641 += 1 };
  s5 -> s1 [109, 65535] { R2641 += 1 };
  s6 -> s1 [0, 43] { R2641 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2641 += 1 };
  s6 -> s1 [91, 103] { R2641 += 1 };
  s6 -> s7 [104, 104] { R2641 += 1 };
  s6 -> s1 [105, 65535] { R2641 += 1 };
  s7 -> s1 [0, 43] { R2641 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2641 += 1 };
  s7 -> s1 [91, 110] { R2641 += 1 };
  s7 -> s8 [111, 111] { R2641 += 1 };
  s7 -> s1 [112, 65535] { R2641 += 1 };
  s8 -> s1 [0, 43] { R2641 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2641 += 1 };
  s8 -> s1 [91, 114] { R2641 += 1 };
  s8 -> s9 [115, 115] { R2641 += 1 };
  s8 -> s1 [116, 65535] { R2641 += 1 };
  s9 -> s1 [0, 43] { R2641 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2641 += 1 };
  s9 -> s1 [91, 115] { R2641 += 1 };
  s9 -> s10 [116, 116] { R2641 += 1 };
  s9 -> s1 [117, 65535] { R2641 += 1 };
  s10 -> s1 [0, 43] { R2641 += 1 };
  s10 -> s1 [45, 64] { R2641 += 1 };
  s10 -> s1 [91, 65535] { R2641 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R2643 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2642 += 1, R2643 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2643 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2645 += 1 };
  s0 -> s0 [0, 65535] { R2644 += 1, R2645 += 1 };
  s0 -> s2 [0, 65535] { R2645 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R2645 += 1 };
  s0 -> s1 [59, 65535] { R2645 += 1 };
  s1 -> s1 [0, 57] { R2645 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2645 += 1 };
  s1 -> s1 [59, 65535] { R2645 += 1 };
  s2 -> s1 [0, 57] { R2645 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2645 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2645 += 1 };
  s2 -> s1 [59, 65535] { R2645 += 1 };
  s3 -> s3 [0, 65535] { R2645 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2647 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2646 += 1, R2647 += 1 };
  s0 -> s2 [0, 65535] { R2647 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s3 [91, 91] { R2647 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2647 += 1, R2035 += 1 };
  s1 -> s5 [0, 65535] { R2647 += 1 };
  s1 -> s1 [0, 65535] { R2647 += 1, R2035 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2647 += 1, R2035 += 1 };
  s2 -> s2 [0, 65535] { R2647 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2647 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2647 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2647 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2647 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2649 += 1, R2037 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R2649 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s0 [0, 65535] { R2648 += 1, R2649 += 1 };
  s1 -> s1 [0, 65535] { R2649 += 1, R2037 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R2649 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2649 += 1, R2037 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R2649 += 1, R2036 += 1, R2037 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2649 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2651 += 1 };
  s0 -> s0 [0, 65535] { R2650 += 1, R2651 += 1 };
  s0 -> s1 [91, 107] { R2651 += 1 };
  s0 -> s2 [108, 108] { R2651 += 1 };
  s0 -> s1 [109, 65535] { R2651 += 1 };
  s1 -> s1 [0, 64] { R2651 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2651 += 1 };
  s2 -> s1 [0, 64] { R2651 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2651 += 1 };
  s2 -> s3 [111, 111] { R2651 += 1 };
  s2 -> s1 [112, 65535] { R2651 += 1 };
  s3 -> s1 [0, 64] { R2651 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2651 += 1 };
  s3 -> s4 [99, 99] { R2651 += 1 };
  s3 -> s1 [100, 65535] { R2651 += 1 };
  s4 -> s1 [0, 64] { R2651 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2651 += 1 };
  s4 -> s5 [97, 97] { R2651 += 1 };
  s4 -> s1 [98, 65535] { R2651 += 1 };
  s5 -> s1 [0, 64] { R2651 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2651 += 1 };
  s5 -> s6 [108, 108] { R2651 += 1 };
  s5 -> s1 [109, 65535] { R2651 += 1 };
  s6 -> s1 [0, 64] { R2651 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2651 += 1 };
  s6 -> s7 [104, 104] { R2651 += 1 };
  s6 -> s1 [105, 65535] { R2651 += 1 };
  s7 -> s1 [0, 64] { R2651 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2651 += 1 };
  s7 -> s8 [111, 111] { R2651 += 1 };
  s7 -> s1 [112, 65535] { R2651 += 1 };
  s8 -> s1 [0, 64] { R2651 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2651 += 1 };
  s8 -> s9 [115, 115] { R2651 += 1 };
  s8 -> s1 [116, 65535] { R2651 += 1 };
  s9 -> s1 [0, 64] { R2651 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2651 += 1 };
  s9 -> s10 [116, 116] { R2651 += 1 };
  s9 -> s1 [117, 65535] { R2651 += 1 };
  s10 -> s1 [0, 64] { R2651 += 1 };
  s10 -> s1 [91, 65535] { R2651 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2652 += 1, R2653 += 1 };
  s0 -> s1 [0, 65535] { R2653 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2653 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2655 += 1 };
  s0 -> s0 [0, 65535] { R2654 += 1, R2655 += 1 };
  s0 -> s2 [0, 65535] { R2655 += 1, R6 += 1 };
  s0 -> s3 [58, 58] { R2655 += 1 };
  s0 -> s1 [59, 65535] { R2655 += 1 };
  s1 -> s1 [0, 57] { R2655 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2655 += 1 };
  s1 -> s1 [59, 65535] { R2655 += 1 };
  s2 -> s1 [0, 57] { R2655 += 1 };
  s2 -> s2 [0, 65535] { R2655 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2655 += 1 };
  s2 -> s1 [59, 65535] { R2655 += 1 };
  s3 -> s3 [0, 65535] { R2655 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2657 += 1, R2031 += 1 };
  s0 -> s2 [0, 65535] { R2657 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2656 += 1, R2657 += 1 };
  s0 -> s3 [91, 91] { R2657 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2657 += 1, R2031 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2657 += 1 };
  s1 -> s1 [0, 65535] { R2657 += 1, R2031 += 1 };
  s2 -> s1 [0, 90] { R2657 += 1, R2031 += 1 };
  s2 -> s2 [0, 65535] { R2657 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2657 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2657 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2657 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2657 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R2658 += 1, R2659 += 1 };
  s0 -> s1 [0, 65535] { R2659 += 1, R2033 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2659 += 1, R2032 += 1, R2033 += 1 };
  s1 -> s1 [0, 65535] { R2659 += 1, R2033 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2659 += 1 };
  s2 -> s1 [0, 65535] { R2659 += 1, R2033 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2659 += 1, R2032 += 1, R2033 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2659 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2679 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2678 += 1, R2679 += 1 };
  s0 -> s2 [0, 65535] { R2679 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [47, 47] { R2679 += 1 };
  s0 -> s1 [48, 65535] { R2679 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2679 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2679 += 1 };
  s1 -> s1 [48, 65535] { R2679 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2679 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2679 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2679 += 1 };
  s2 -> s1 [48, 65535] { R2679 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R2679 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2681 += 1, R2029 += 1 };
  s0 -> s0 [0, 65535] { R2680 += 1, R2681 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2681 += 1, R2029 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2682 += 1, R2683 += 1 };
  s0 -> s1 [0, 65535] { R2683 += 1, R2664 += 1, R2665 += 1 };
  s0 -> s2 [108, 108] { R2683 += 1, R2665 += 1 };
  s1 -> s1 [0, 65535] { R2683 += 1, R2664 += 1, R2665 += 1 };
  s1 -> s2 [108, 108] { R2683 += 1, R2665 += 1 };
  s2 -> s3 [111, 111] { R2683 += 1, R2665 += 1 };
  s3 -> s4 [99, 99] { R2683 += 1, R2665 += 1 };
  s4 -> s5 [97, 97] { R2683 += 1, R2665 += 1 };
  s5 -> s6 [108, 108] { R2683 += 1, R2665 += 1 };
  s6 -> s7 [104, 104] { R2683 += 1, R2665 += 1 };
  s7 -> s8 [111, 111] { R2683 += 1, R2665 += 1 };
  s8 -> s9 [115, 115] { R2683 += 1, R2665 += 1 };
  s9 -> s10 [116, 116] { R2683 += 1, R2665 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2683 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2684 += 1, R2685 += 1 };
  s0 -> s1 [0, 65535] { R2685 += 1, R2666 += 1, R2667 += 1 };
  s0 -> s2 [0, 65535] { R2685 += 1, R2667 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2685 += 1, R2666 += 1, R2667 += 1 };
  s1 -> s2 [0, 65535] { R2685 += 1, R2667 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2685 += 1, R2667 += 1, R2 += 1 };
  s2 -> s4 [0, 65535] { R2685 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2685 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2687 += 1, R2669 += 1 };
  s0 -> s2 [0, 65535] { R2687 += 1, R2668 += 1, R2669 += 1 };
  s0 -> s3 [0, 65535] { R2687 += 1, R2669 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2686 += 1, R2687 += 1 };
  s0 -> s4 [90, 90] { R2687 += 1, R2669 += 1 };
  s0 -> s1 [91, 65535] { R2687 += 1, R2669 += 1 };
  s1 -> s1 [0, 89] { R2687 += 1, R2669 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2687 += 1 };
  s1 -> s4 [90, 90] { R2687 += 1, R2669 += 1 };
  s1 -> s1 [91, 65535] { R2687 += 1, R2669 += 1 };
  s2 -> s1 [0, 89] { R2687 += 1, R2669 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2687 += 1, R2668 += 1, R2669 += 1 };
  s2 -> s3 [0, 65535] { R2687 += 1, R2669 += 1, R8 += 1 };
  s2 -> s4 [90, 90] { R2687 += 1, R2669 += 1 };
  s2 -> s1 [91, 65535] { R2687 += 1, R2669 += 1 };
  s3 -> s1 [0, 89] { R2687 += 1, R2669 += 1 };
  s3 -> s5 [0, 65535] { R2687 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2687 += 1, R2669 += 1, R8 += 1 };
  s3 -> s4 [90, 90] { R2687 += 1, R2669 += 1 };
  s3 -> s1 [91, 65535] { R2687 += 1, R2669 += 1 };
  s4 -> s4 [0, 65535] { R2687 += 1, R2669 += 1 };
  s5 -> s5 [0, 65535] { R2687 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2689 += 1, R2671 += 1, R2637 += 1, R2027 += 1 };
  s0 -> s2 [0, 65535] { R2689 += 1, R2671 += 1, R2636 += 1, R2637 += 1 };
  s0 -> s0 [0, 65535] { R2688 += 1, R2689 += 1 };
  s0 -> s3 [0, 65535] { R2689 += 1, R2670 += 1, R2671 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2689 += 1, R2671 += 1, R2637 += 1, R2027 += 1 };
  s1 -> s6 [0, 65535] { R2689 += 1, R2671 += 1 };
  s1 -> s5 [0, 65535] { R2689 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2689 += 1, R2671 += 1, R2637 += 1, R2027 += 1 };
  s2 -> s2 [0, 65535] { R2689 += 1, R2671 += 1, R2636 += 1, R2637 += 1 };
  s2 -> s5 [0, 65535] { R2689 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2689 += 1, R2671 += 1, R2637 += 1, R2027 += 1 };
  s3 -> s2 [0, 65535] { R2689 += 1, R2671 += 1, R2636 += 1, R2637 += 1 };
  s3 -> s3 [0, 65535] { R2689 += 1, R2670 += 1, R2671 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2689 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2689 += 1, R2671 += 1 };
  s6 -> s5 [0, 65535] { R2689 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R2690 += 1, R2691 += 1 };
  s0 -> s1 [0, 65535] { R2691 += 1, R2673 += 1, R2638 += 1, R2639 += 1 };
  s0 -> s2 [0, 65535] { R2691 += 1, R2673 += 1, R2639 += 1 };
  s0 -> s3 [0, 65535] { R2691 += 1, R2672 += 1, R2673 += 1 };
  s1 -> s1 [0, 65535] { R2691 += 1, R2673 += 1, R2638 += 1, R2639 += 1 };
  s1 -> s2 [0, 65535] { R2691 += 1, R2673 += 1, R2639 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2691 += 1, R2673 += 1 };
  s2 -> s6 [0, 65535] { R2691 += 1 };
  s2 -> s2 [0, 65535] { R2691 += 1, R2673 += 1, R2639 += 1 };
  s3 -> s1 [0, 65535] { R2691 += 1, R2673 += 1, R2638 += 1, R2639 += 1 };
  s3 -> s2 [0, 65535] { R2691 += 1, R2673 += 1, R2639 += 1 };
  s3 -> s3 [0, 65535] { R2691 += 1, R2672 += 1, R2673 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2691 += 1, R2673 += 1 };
  s5 -> s6 [0, 65535] { R2691 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2691 += 1 };
  accepting s2, s4, s5, s6;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2693 += 1, R2675 += 1, R2660 += 1, R2661 += 1 };
  s0 -> s2 [0, 65535] { R2693 += 1, R2674 += 1, R2675 += 1 };
  s0 -> s0 [0, 65535] { R2692 += 1, R2693 += 1 };
  s0 -> s3 [0, 65535] { R2693 += 1, R2675 += 1, R2661 += 1, R2028 += 1 };
  s1 -> s1 [0, 65535] { R2693 += 1, R2675 += 1, R2660 += 1, R2661 += 1 };
  s1 -> s5 [0, 65535] { R2693 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R2693 += 1, R2675 += 1, R2661 += 1, R2028 += 1 };
  s2 -> s1 [0, 65535] { R2693 += 1, R2675 += 1, R2660 += 1, R2661 += 1 };
  s2 -> s2 [0, 65535] { R2693 += 1, R2674 += 1, R2675 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2693 += 1, R2675 += 1, R2661 += 1, R2028 += 1 };
  s3 -> s4 [0, 65535] { R2693 += 1, R2675 += 1 };
  s3 -> s5 [0, 65535] { R2693 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2693 += 1, R2675 += 1, R2661 += 1, R2028 += 1 };
  s4 -> s4 [0, 65535] { R2693 += 1, R2675 += 1 };
  s4 -> s5 [0, 65535] { R2693 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2693 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2695 += 1, R2676 += 1, R2677 += 1 };
  s0 -> s2 [0, 65535] { R2695 += 1, R2677 += 1, R2662 += 1, R2663 += 1 };
  s0 -> s0 [0, 65535] { R2694 += 1, R2695 += 1 };
  s0 -> s3 [108, 108] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s1 -> s1 [0, 65535] { R2695 += 1, R2676 += 1, R2677 += 1 };
  s1 -> s2 [0, 65535] { R2695 += 1, R2677 += 1, R2662 += 1, R2663 += 1 };
  s1 -> s3 [108, 108] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s2 -> s2 [0, 65535] { R2695 += 1, R2677 += 1, R2662 += 1, R2663 += 1 };
  s2 -> s3 [108, 108] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s3 -> s4 [111, 111] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s4 -> s5 [99, 99] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s5 -> s6 [97, 97] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s6 -> s7 [108, 108] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s7 -> s8 [104, 104] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s8 -> s9 [111, 111] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s9 -> s10 [115, 115] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s10 -> s11 [116, 116] { R2695 += 1, R2677 += 1, R2663 += 1 };
  s11 -> s11 [0, 65535] { R2695 += 1, R2677 += 1 };
  s11 -> s12 [0, 65535] { R2695 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R2695 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  accepting s11, s12, s13;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R2 = R2639 && R3 = R2695 && R12 = 0 && R1356 = 0 && R1357 = R2659 && R2638 = 0 && R2640 - R2659 = 1 && R2641 = R2695 && R2642 - R2659 = 1 && R2643 = R2695 && R2644 - R2659 = 1 && R2645 = R2695 && R2646 - R2659 = 1 && R2647 = R2695 && R2648 - R2659 = 1 && R2649 = R2695 && R2650 = 0 && R2651 = R2659 && R2652 = 0 && R2653 = R2659 && R2654 = 0 && R2655 = R2659 && R2656 = 0 && R2657 = R2659 && R2658 = 0 && R2662 = 0 && R2663 = 0 && R2664 = 0 && R2672 = 0 && R2676 = 0 && R2678 = 10 && R2679 = R2695 && R2682 = 10 && R2683 = R2695 && R2690 = 10 && R2691 = R2695 && R2694 = 10 && R0 != 0 && R1 != 0 && R6 < 1 && R7 < 1 && R8 < 1 && R2665 - R13 < 1 && R2673 - R13 < 1 && R2677 - R13 < 1 && -1 < R13 && R2665 - R2029 < 1 && R2673 - R2029 < 1 && R2677 - R2029 < 1 && -1 < R2639 && R2659 < R2695 && -1 < R2659 && 9 < R2695 && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2636 != 0 || R2637 = R2639 || (R2027 = 0 && R2639 = 0)) && (R2666 != 0 || ((R13 != R2667 || R2667 - R2029 < 1 || R2639 < 1 || R2667 < 0) && (R2029 != R2667 || R2667 - R13 < 1 || R2639 < 1) && (R2639 != 0 || ((R13 != R2667 || R2667 - R2029 < 1 || R2029 < 1) && (R2029 != R2667 || R2667 - R13 < 1 || R13 < 1) && (R13 = R2667 || R2029 = R2667 || R13 < 1 || R2029 < 1))) && (R13 = R2667 || R2029 = R2667 || R2639 < 1))) && (R2668 != 0 || ((R13 != R2669 || R2669 - R2029 < 1 || R2639 < 1 || R2669 < 0) && (R2029 != R2669 || R2669 - R13 < 1 || R2639 < 1) && (R2639 != 0 || ((R13 != R2669 || R2669 - R2029 < 1 || R2029 < 1) && (R2029 != R2669 || R2669 - R13 < 1 || R13 < 1) && (R13 = R2669 || R2029 = R2669 || R13 < 1 || R2029 < 1))) && (R13 = R2669 || R2029 = R2669 || R2639 < 1))) && (R2670 != 0 || ((R13 != R2671 || R2671 - R2029 < 1 || R2639 < 1 || R2671 < 0) && (R2029 != R2671 || R2671 - R13 < 1 || R2639 < 1) && (R2639 != 0 || ((R13 != R2671 || R2671 - R2029 < 1 || R2029 < 1) && (R2029 != R2671 || R2671 - R13 < 1 || R13 < 1) && (R13 = R2671 || R2029 = R2671 || R13 < 1 || R2029 < 1))) && (R13 = R2671 || R2029 = R2671 || R2639 < 1))) && (R2674 != 0 || ((R13 != R2675 || R2675 - R2029 < 1 || R2639 < 1 || R2675 < 0) && (R2029 != R2675 || R2675 - R13 < 1 || R2639 < 1) && (R2639 != 0 || ((R13 != R2675 || R2675 - R2029 < 1 || R2029 < 1) && (R2029 != R2675 || R2675 - R13 < 1 || R13 < 1) && (R13 = R2675 || R2029 = R2675 || R13 < 1 || R2029 < 1))) && (R13 = R2675 || R2029 = R2675 || R2639 < 1))) && (R2680 != 10 || R2681 = R2695 || (R2029 = 0 && R2695 = 10)) && (R2684 != 10 || R2685 = R2695 || (R2029 = 0 && R2695 = 10)) && (R2686 != 10 || R2687 = R2695 || (R2029 = 0 && R2695 = 10)) && (R2688 != 10 || R2689 = R2695 || (R2029 = 0 && R2695 = 10)) && (R2692 != 10 || R2693 = R2695 || (R2029 = 0 && R2695 = 10)) && (R2028 = 0 || (R2660 = 0 && R2661 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2636 = 0 || (R2027 = 0 && R2639 = 0)) && (R2666 = 0 || (R2639 = 0 && (R13 < 1 || R2029 < 1))) && (R2668 = 0 || (R2639 = 0 && (R13 < 1 || R2029 < 1))) && (R2670 = 0 || (R2639 = 0 && (R13 < 1 || R2029 < 1))) && (R2674 = 0 || (R2639 = 0 && (R13 < 1 || R2029 < 1))) && (R2680 = 10 || (R2029 = 0 && R2695 = 10)) && (R2684 = 10 || (R2029 = 0 && R2695 = 10)) && (R2686 = 10 || (R2029 = 0 && R2695 = 10)) && (R2688 = 10 || (R2029 = 0 && R2695 = 10)) && (R2692 = 10 || (R2029 = 0 && R2695 = 10)) && (R13 - R2665 < 1 || R2029 - R2665 < 1) && (R13 - R2673 < 1 || R2029 - R2673 < 1) && (R13 - R2677 < 1 || R2029 - R2677 < 1);
// End of Parikh automata intersection problem
