// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2216, R2217, R2218, R2219, R2220, R2221, R2222, R2223, R2224, R2225, R2226, R2227, R2228, R2229, R2230, R2231, R2232, R2233, R2234, R2235, R2236, R2237, R2238, R2239, R2240, R2241, R2242, R2243, R2244, R2245, R2246, R2247, R2248, R2249, R2250, R2251, R2252, R2253, R2254, R2255, R2256, R2257, R2258, R2259, R2260, R2261, R2262, R2263, R2264, R2265, R2266, R2267, R2268, R2269, R2270, R2271, R2272, R2273, R2274, R2275, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2221 += 1 };
  s0 -> s0 [0, 65535] { R2220 += 1, R2221 += 1 };
  s0 -> s1 [45, 64] { R2221 += 1 };
  s0 -> s1 [91, 107] { R2221 += 1 };
  s0 -> s2 [108, 108] { R2221 += 1 };
  s0 -> s1 [109, 65535] { R2221 += 1 };
  s1 -> s1 [0, 43] { R2221 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2221 += 1 };
  s1 -> s1 [91, 65535] { R2221 += 1 };
  s2 -> s1 [0, 43] { R2221 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2221 += 1 };
  s2 -> s1 [91, 110] { R2221 += 1 };
  s2 -> s3 [111, 111] { R2221 += 1 };
  s2 -> s1 [112, 65535] { R2221 += 1 };
  s3 -> s1 [0, 43] { R2221 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2221 += 1 };
  s3 -> s1 [91, 98] { R2221 += 1 };
  s3 -> s4 [99, 99] { R2221 += 1 };
  s3 -> s1 [100, 65535] { R2221 += 1 };
  s4 -> s1 [0, 43] { R2221 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2221 += 1 };
  s4 -> s1 [91, 96] { R2221 += 1 };
  s4 -> s5 [97, 97] { R2221 += 1 };
  s4 -> s1 [98, 65535] { R2221 += 1 };
  s5 -> s1 [0, 43] { R2221 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2221 += 1 };
  s5 -> s1 [91, 107] { R2221 += 1 };
  s5 -> s6 [108, 108] { R2221 += 1 };
  s5 -> s1 [109, 65535] { R2221 += 1 };
  s6 -> s1 [0, 43] { R2221 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2221 += 1 };
  s6 -> s1 [91, 103] { R2221 += 1 };
  s6 -> s7 [104, 104] { R2221 += 1 };
  s6 -> s1 [105, 65535] { R2221 += 1 };
  s7 -> s1 [0, 43] { R2221 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2221 += 1 };
  s7 -> s1 [91, 110] { R2221 += 1 };
  s7 -> s8 [111, 111] { R2221 += 1 };
  s7 -> s1 [112, 65535] { R2221 += 1 };
  s8 -> s1 [0, 43] { R2221 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2221 += 1 };
  s8 -> s1 [91, 114] { R2221 += 1 };
  s8 -> s9 [115, 115] { R2221 += 1 };
  s8 -> s1 [116, 65535] { R2221 += 1 };
  s9 -> s1 [0, 43] { R2221 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2221 += 1 };
  s9 -> s1 [91, 115] { R2221 += 1 };
  s9 -> s10 [116, 116] { R2221 += 1 };
  s9 -> s1 [117, 65535] { R2221 += 1 };
  s10 -> s1 [0, 43] { R2221 += 1 };
  s10 -> s1 [45, 64] { R2221 += 1 };
  s10 -> s1 [91, 65535] { R2221 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R2222 += 1, R2223 += 1 };
  s0 -> s1 [0, 65535] { R2223 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2223 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2225 += 1 };
  s0 -> s0 [0, 65535] { R2224 += 1, R2225 += 1 };
  s0 -> s2 [0, 65535] { R2225 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R2225 += 1 };
  s0 -> s1 [59, 65535] { R2225 += 1 };
  s1 -> s1 [0, 57] { R2225 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2225 += 1 };
  s1 -> s1 [59, 65535] { R2225 += 1 };
  s2 -> s1 [0, 57] { R2225 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2225 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2225 += 1 };
  s2 -> s1 [59, 65535] { R2225 += 1 };
  s3 -> s3 [0, 65535] { R2225 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2227 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2226 += 1, R2227 += 1 };
  s0 -> s2 [0, 65535] { R2227 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s3 [91, 91] { R2227 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2227 += 1, R2035 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2227 += 1 };
  s1 -> s1 [0, 65535] { R2227 += 1, R2035 += 1 };
  s2 -> s1 [0, 90] { R2227 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2227 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s3 [91, 91] { R2227 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2227 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2227 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2227 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2229 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s2 [0, 65535] { R2229 += 1, R2037 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2228 += 1, R2229 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2229 += 1, R2036 += 1, R2037 += 1 };
  s1 -> s2 [0, 65535] { R2229 += 1, R2037 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2229 += 1, R2037 += 1, R5 += 1 };
  s2 -> s4 [0, 65535] { R2229 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2229 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2231 += 1 };
  s0 -> s0 [0, 65535] { R2230 += 1, R2231 += 1 };
  s0 -> s1 [91, 107] { R2231 += 1 };
  s0 -> s2 [108, 108] { R2231 += 1 };
  s0 -> s1 [109, 65535] { R2231 += 1 };
  s1 -> s1 [0, 64] { R2231 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2231 += 1 };
  s2 -> s1 [0, 64] { R2231 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2231 += 1 };
  s2 -> s3 [111, 111] { R2231 += 1 };
  s2 -> s1 [112, 65535] { R2231 += 1 };
  s3 -> s1 [0, 64] { R2231 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2231 += 1 };
  s3 -> s4 [99, 99] { R2231 += 1 };
  s3 -> s1 [100, 65535] { R2231 += 1 };
  s4 -> s1 [0, 64] { R2231 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2231 += 1 };
  s4 -> s5 [97, 97] { R2231 += 1 };
  s4 -> s1 [98, 65535] { R2231 += 1 };
  s5 -> s1 [0, 64] { R2231 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2231 += 1 };
  s5 -> s6 [108, 108] { R2231 += 1 };
  s5 -> s1 [109, 65535] { R2231 += 1 };
  s6 -> s1 [0, 64] { R2231 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2231 += 1 };
  s6 -> s7 [104, 104] { R2231 += 1 };
  s6 -> s1 [105, 65535] { R2231 += 1 };
  s7 -> s1 [0, 64] { R2231 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2231 += 1 };
  s7 -> s8 [111, 111] { R2231 += 1 };
  s7 -> s1 [112, 65535] { R2231 += 1 };
  s8 -> s1 [0, 64] { R2231 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2231 += 1 };
  s8 -> s9 [115, 115] { R2231 += 1 };
  s8 -> s1 [116, 65535] { R2231 += 1 };
  s9 -> s1 [0, 64] { R2231 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2231 += 1 };
  s9 -> s10 [116, 116] { R2231 += 1 };
  s9 -> s1 [117, 65535] { R2231 += 1 };
  s10 -> s1 [0, 64] { R2231 += 1 };
  s10 -> s1 [91, 65535] { R2231 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2232 += 1, R2233 += 1 };
  s0 -> s1 [0, 65535] { R2233 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R2233 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2235 += 1 };
  s0 -> s0 [0, 65535] { R2234 += 1, R2235 += 1 };
  s0 -> s2 [0, 65535] { R2235 += 1, R6 += 1 };
  s0 -> s3 [58, 58] { R2235 += 1 };
  s0 -> s1 [59, 65535] { R2235 += 1 };
  s1 -> s1 [0, 57] { R2235 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2235 += 1 };
  s1 -> s1 [59, 65535] { R2235 += 1 };
  s2 -> s1 [0, 57] { R2235 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2235 += 1, R6 += 1 };
  s2 -> s3 [58, 58] { R2235 += 1 };
  s2 -> s1 [59, 65535] { R2235 += 1 };
  s3 -> s3 [0, 65535] { R2235 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2237 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2236 += 1, R2237 += 1 };
  s0 -> s2 [0, 65535] { R2237 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s3 [91, 91] { R2237 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2237 += 1, R2031 += 1 };
  s1 -> s1 [0, 65535] { R2237 += 1, R2031 += 1 };
  s1 -> s5 [0, 65535] { R2237 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2237 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2237 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s3 [91, 91] { R2237 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2237 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2237 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2237 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R2239 += 1, R2032 += 1, R2033 += 1 };
  s0 -> s2 [0, 65535] { R2239 += 1, R2033 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R2238 += 1, R2239 += 1 };
  s1 -> s1 [0, 65535] { R2239 += 1, R2032 += 1, R2033 += 1 };
  s1 -> s2 [0, 65535] { R2239 += 1, R2033 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2239 += 1 };
  s2 -> s2 [0, 65535] { R2239 += 1, R2033 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2239 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2259 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2259 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2258 += 1, R2259 += 1 };
  s0 -> s3 [47, 47] { R2259 += 1 };
  s0 -> s1 [48, 65535] { R2259 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2259 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2259 += 1 };
  s1 -> s1 [48, 65535] { R2259 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2259 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2259 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2259 += 1 };
  s2 -> s1 [48, 65535] { R2259 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R2259 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2261 += 1, R2029 += 1 };
  s0 -> s0 [0, 65535] { R2260 += 1, R2261 += 1 };
  s1 -> s1 [0, 65535] { R2261 += 1, R2029 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2263 += 1, R2244 += 1, R2245 += 1 };
  s0 -> s0 [0, 65535] { R2262 += 1, R2263 += 1 };
  s0 -> s2 [108, 108] { R2263 += 1, R2245 += 1 };
  s1 -> s1 [0, 65535] { R2263 += 1, R2244 += 1, R2245 += 1 };
  s1 -> s2 [108, 108] { R2263 += 1, R2245 += 1 };
  s2 -> s3 [111, 111] { R2263 += 1, R2245 += 1 };
  s3 -> s4 [99, 99] { R2263 += 1, R2245 += 1 };
  s4 -> s5 [97, 97] { R2263 += 1, R2245 += 1 };
  s5 -> s6 [108, 108] { R2263 += 1, R2245 += 1 };
  s6 -> s7 [104, 104] { R2263 += 1, R2245 += 1 };
  s7 -> s8 [111, 111] { R2263 += 1, R2245 += 1 };
  s8 -> s9 [115, 115] { R2263 += 1, R2245 += 1 };
  s9 -> s10 [116, 116] { R2263 += 1, R2245 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2263 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2265 += 1, R2246 += 1, R2247 += 1 };
  s0 -> s0 [0, 65535] { R2264 += 1, R2265 += 1 };
  s0 -> s2 [0, 65535] { R2265 += 1, R2247 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R2265 += 1, R2246 += 1, R2247 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2265 += 1, R2247 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R2265 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2265 += 1, R2247 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R2265 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2267 += 1, R2249 += 1 };
  s0 -> s2 [0, 65535] { R2267 += 1, R2248 += 1, R2249 += 1 };
  s0 -> s3 [0, 65535] { R2267 += 1, R2249 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2266 += 1, R2267 += 1 };
  s0 -> s4 [90, 90] { R2267 += 1, R2249 += 1 };
  s0 -> s1 [91, 65535] { R2267 += 1, R2249 += 1 };
  s1 -> s1 [0, 89] { R2267 += 1, R2249 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2267 += 1 };
  s1 -> s4 [90, 90] { R2267 += 1, R2249 += 1 };
  s1 -> s1 [91, 65535] { R2267 += 1, R2249 += 1 };
  s2 -> s1 [0, 89] { R2267 += 1, R2249 += 1 };
  s2 -> s2 [0, 65535] { R2267 += 1, R2248 += 1, R2249 += 1 };
  s2 -> s3 [0, 65535] { R2267 += 1, R2249 += 1, R8 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [90, 90] { R2267 += 1, R2249 += 1 };
  s2 -> s1 [91, 65535] { R2267 += 1, R2249 += 1 };
  s3 -> s1 [0, 89] { R2267 += 1, R2249 += 1 };
  s3 -> s5 [0, 65535] { R2267 += 1 };
  s3 -> s3 [0, 65535] { R2267 += 1, R2249 += 1, R8 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [90, 90] { R2267 += 1, R2249 += 1 };
  s3 -> s1 [91, 65535] { R2267 += 1, R2249 += 1 };
  s4 -> s4 [0, 65535] { R2267 += 1, R2249 += 1 };
  s5 -> s5 [0, 65535] { R2267 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2268 += 1, R2269 += 1 };
  s0 -> s1 [0, 65535] { R2269 += 1, R2251 += 1, R2217 += 1, R2027 += 1 };
  s0 -> s2 [0, 65535] { R2269 += 1, R2250 += 1, R2251 += 1 };
  s0 -> s3 [0, 65535] { R2269 += 1, R2251 += 1, R2216 += 1, R2217 += 1 };
  s1 -> s4 [0, 65535] { R2269 += 1 };
  s1 -> s1 [0, 65535] { R2269 += 1, R2251 += 1, R2217 += 1, R2027 += 1 };
  s1 -> s6 [0, 65535] { R2269 += 1, R2251 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2269 += 1, R2251 += 1, R2217 += 1, R2027 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2269 += 1, R2250 += 1, R2251 += 1 };
  s2 -> s3 [0, 65535] { R2269 += 1, R2251 += 1, R2216 += 1, R2217 += 1 };
  s3 -> s4 [0, 65535] { R2269 += 1 };
  s3 -> s1 [0, 65535] { R2269 += 1, R2251 += 1, R2217 += 1, R2027 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2269 += 1, R2251 += 1, R2216 += 1, R2217 += 1 };
  s4 -> s4 [0, 65535] { R2269 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2269 += 1 };
  s6 -> s6 [0, 65535] { R2269 += 1, R2251 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 98] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s0 -> s2 [0, 65535] { R2271 += 1, R2253 += 1, R2218 += 1, R2219 += 1 };
  s0 -> s3 [0, 65535] { R2271 += 1, R2252 += 1, R2253 += 1 };
  s0 -> s0 [0, 65535] { R2270 += 1, R2271 += 1 };
  s0 -> s4 [99, 99] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s0 -> s1 [100, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s1 -> s13 [0, 65535] { R2271 += 1, R2253 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2271 += 1 };
  s1 -> s1 [0, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s2 -> s1 [0, 98] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s2 -> s2 [0, 65535] { R2271 += 1, R2253 += 1, R2218 += 1, R2219 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2271 += 1 };
  s2 -> s4 [99, 99] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s2 -> s1 [100, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s3 -> s1 [0, 98] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s3 -> s2 [0, 65535] { R2271 += 1, R2253 += 1, R2218 += 1, R2219 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2271 += 1, R2252 += 1, R2253 += 1 };
  s3 -> s4 [99, 99] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s3 -> s1 [100, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s4 -> s1 [0, 96] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s4 -> s4 [0, 65535] { R2271 += 1, R2253 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2271 += 1 };
  s4 -> s7 [97, 97] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s4 -> s1 [98, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2271 += 1 };
  s7 -> s1 [0, 107] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R2271 += 1, R2253 += 1 };
  s7 -> s6 [0, 65535] { R2271 += 1 };
  s7 -> s8 [108, 108] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s7 -> s1 [109, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s8 -> s1 [0, 103] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s8 -> s8 [0, 65535] { R2271 += 1, R2253 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R2271 += 1 };
  s8 -> s9 [104, 104] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s8 -> s1 [105, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s9 -> s1 [0, 110] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R2271 += 1 };
  s9 -> s9 [0, 65535] { R2271 += 1, R2253 += 1 };
  s9 -> s10 [111, 111] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s9 -> s1 [112, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s10 -> s1 [0, 114] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s10 -> s10 [0, 65535] { R2271 += 1, R2253 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R2271 += 1 };
  s10 -> s11 [115, 115] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s10 -> s1 [116, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s11 -> s1 [0, 115] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s11 -> s11 [0, 65535] { R2271 += 1, R2253 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R2271 += 1 };
  s11 -> s12 [116, 116] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s11 -> s1 [117, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s12 -> s1 [0, 65535] { R2271 += 1, R2253 += 1, R2219 += 1 };
  s13 -> s13 [0, 65535] { R2271 += 1, R2253 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R2271 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2273 += 1, R2254 += 1, R2255 += 1 };
  s0 -> s2 [0, 65535] { R2273 += 1, R2255 += 1, R2240 += 1, R2241 += 1 };
  s0 -> s3 [0, 65535] { R2273 += 1, R2255 += 1, R2241 += 1, R2028 += 1 };
  s0 -> s0 [0, 65535] { R2272 += 1, R2273 += 1 };
  s1 -> s1 [0, 65535] { R2273 += 1, R2254 += 1, R2255 += 1 };
  s1 -> s2 [0, 65535] { R2273 += 1, R2255 += 1, R2240 += 1, R2241 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R2273 += 1, R2255 += 1, R2241 += 1, R2028 += 1 };
  s2 -> s2 [0, 65535] { R2273 += 1, R2255 += 1, R2240 += 1, R2241 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2273 += 1, R2255 += 1, R2241 += 1, R2028 += 1 };
  s2 -> s5 [0, 65535] { R2273 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2273 += 1, R2255 += 1, R2241 += 1, R2028 += 1 };
  s3 -> s5 [0, 65535] { R2273 += 1 };
  s3 -> s6 [0, 65535] { R2273 += 1, R2255 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2273 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2273 += 1 };
  s6 -> s6 [0, 65535] { R2273 += 1, R2255 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2275 += 1, R2257 += 1, R2242 += 1, R2243 += 1 };
  s0 -> s2 [0, 65535] { R2275 += 1, R2256 += 1, R2257 += 1 };
  s0 -> s0 [0, 65535] { R2274 += 1, R2275 += 1 };
  s0 -> s3 [108, 108] { R2275 += 1, R2257 += 1, R2243 += 1 };
  s1 -> s1 [0, 65535] { R2275 += 1, R2257 += 1, R2242 += 1, R2243 += 1 };
  s1 -> s3 [108, 108] { R2275 += 1, R2257 += 1, R2243 += 1 };
  s2 -> s1 [0, 65535] { R2275 += 1, R2257 += 1, R2242 += 1, R2243 += 1 };
  s2 -> s2 [0, 65535] { R2275 += 1, R2256 += 1, R2257 += 1 };
  s2 -> s3 [108, 108] { R2275 += 1, R2257 += 1, R2243 += 1 };
  s3 -> s4 [111, 111] { R2275 += 1, R2257 += 1, R2243 += 1 };
  s4 -> s5 [0, 65535] { R2275 += 1 };
  s4 -> s4 [0, 65535] { R2275 += 1, R2257 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2275 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2275 && R12 = 0 && R1356 = 0 && R1357 = R2239 && R2220 - R2239 = 1 && R2221 = R2275 && R2222 - R2239 = 1 && R2223 = R2275 && R2224 - R2239 = 1 && R2225 = R2275 && R2226 - R2239 = 1 && R2227 = R2275 && R2228 - R2239 = 1 && R2229 = R2275 && R2230 = 0 && R2231 = R2239 && R2232 = 0 && R2233 = R2239 && R2234 = 0 && R2235 = R2239 && R2236 = 0 && R2237 = R2239 && R2238 = 0 && R2242 = 0 && R2243 = 0 && R2244 = 0 && R2256 = 0 && R2258 = 10 && R2259 = R2275 && R2262 = 10 && R2263 = R2275 && R2274 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2245 - R13 < 1 && R2257 - R13 < 1 && -1 < R13 && R2245 - R2029 < 1 && R2257 - R2029 < 1 && R2239 < R2275 && -1 < R2239 && 9 < R2275 && (R2 != 0 || R2027 = 0 || (R2216 = 0 && R2217 = 0)) && (R2 != 0 || R2027 = 0 || (R2218 = 0 && R2219 = 0)) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2216 != 0 || R2 = R2217 || R2 < 1) && (R2218 != 0 || R2 = R2219 || R2 < 1) && (R2246 != 0 || ((R2 != 0 || ((R13 != R2247 || R2247 - R2029 < 1 || R2029 < 1) && (R2029 != R2247 || R2247 - R13 < 1 || R13 < 1) && (R13 = R2247 || R2029 = R2247 || R13 < 1 || R2029 < 1))) && (R13 != R2247 || R2 < 1 || R2247 - R2029 < 1 || R2247 < 0) && (R2029 != R2247 || R2 < 1 || R2247 - R13 < 1) && (R13 = R2247 || R2029 = R2247 || R2 < 1))) && (R2248 != 0 || ((R2 != 0 || ((R13 != R2249 || R2249 - R2029 < 1 || R2029 < 1) && (R2029 != R2249 || R2249 - R13 < 1 || R13 < 1) && (R13 = R2249 || R2029 = R2249 || R13 < 1 || R2029 < 1))) && (R13 != R2249 || R2 < 1 || R2249 - R2029 < 1 || R2249 < 0) && (R2029 != R2249 || R2 < 1 || R2249 - R13 < 1) && (R13 = R2249 || R2029 = R2249 || R2 < 1))) && (R2250 != 0 || ((R2 != 0 || ((R13 != R2251 || R2251 - R2029 < 1 || R2029 < 1) && (R2029 != R2251 || R2251 - R13 < 1 || R13 < 1) && (R13 = R2251 || R2029 = R2251 || R13 < 1 || R2029 < 1))) && (R13 != R2251 || R2 < 1 || R2251 - R2029 < 1 || R2251 < 0) && (R2029 != R2251 || R2 < 1 || R2251 - R13 < 1) && (R13 = R2251 || R2029 = R2251 || R2 < 1))) && (R2252 != 0 || ((R2 != 0 || ((R13 != R2253 || R2253 - R2029 < 1 || R2029 < 1) && (R2029 != R2253 || R2253 - R13 < 1 || R13 < 1) && (R13 = R2253 || R2029 = R2253 || R13 < 1 || R2029 < 1))) && (R13 != R2253 || R2 < 1 || R2253 - R2029 < 1 || R2253 < 0) && (R2029 != R2253 || R2 < 1 || R2253 - R13 < 1) && (R13 = R2253 || R2029 = R2253 || R2 < 1))) && (R2254 != 0 || ((R2 != 0 || ((R13 != R2255 || R2255 - R2029 < 1 || R2029 < 1) && (R2029 != R2255 || R2255 - R13 < 1 || R13 < 1) && (R13 = R2255 || R2029 = R2255 || R13 < 1 || R2029 < 1))) && (R13 != R2255 || R2 < 1 || R2255 - R2029 < 1 || R2255 < 0) && (R2029 != R2255 || R2 < 1 || R2255 - R13 < 1) && (R13 = R2255 || R2029 = R2255 || R2 < 1))) && (R2260 != 10 || R2261 = R2275 || (R2029 = 0 && R2275 = 10)) && (R2264 != 10 || R2265 = R2275 || (R2029 = 0 && R2275 = 10)) && (R2266 != 10 || R2267 = R2275 || (R2029 = 0 && R2275 = 10)) && (R2268 != 10 || R2269 = R2275 || (R2029 = 0 && R2275 = 10)) && (R2270 != 10 || R2271 = R2275 || (R2029 = 0 && R2275 = 10)) && (R2272 != 10 || R2273 = R2275 || (R2029 = 0 && R2275 = 10)) && (R2028 = 0 || (R2240 = 0 && R2241 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2216 = 0 || R2 < 1) && (R2218 = 0 || R2 < 1) && (R2246 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2248 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2250 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2252 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2254 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2260 = 10 || (R2029 = 0 && R2275 = 10)) && (R2264 = 10 || (R2029 = 0 && R2275 = 10)) && (R2266 = 10 || (R2029 = 0 && R2275 = 10)) && (R2268 = 10 || (R2029 = 0 && R2275 = 10)) && (R2270 = 10 || (R2029 = 0 && R2275 = 10)) && (R2272 = 10 || (R2029 = 0 && R2275 = 10)) && (R13 - R2245 < 1 || R2029 - R2245 < 1) && (R13 - R2257 < 1 || R2029 - R2257 < 1);
// End of Parikh automata intersection problem
