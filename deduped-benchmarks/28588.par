// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2276, R2277, R2278, R2279, R2280, R2281, R2282, R2283, R2284, R2285, R2286, R2287, R2288, R2289, R2290, R2291, R2292, R2293, R2294, R2295, R2296, R2297, R2298, R2299, R2300, R2301, R2302, R2303, R2304, R2305, R2306, R2307, R2308, R2309, R2310, R2311, R2312, R2313, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2324, R2325, R2326, R2327, R2328, R2329, R2330, R2331, R2332, R2333, R2334, R2335, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2281 += 1 };
  s0 -> s0 [0, 65535] { R2280 += 1, R2281 += 1 };
  s0 -> s1 [45, 64] { R2281 += 1 };
  s0 -> s1 [91, 107] { R2281 += 1 };
  s0 -> s2 [108, 108] { R2281 += 1 };
  s0 -> s1 [109, 65535] { R2281 += 1 };
  s1 -> s1 [0, 43] { R2281 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2281 += 1 };
  s1 -> s1 [91, 65535] { R2281 += 1 };
  s2 -> s1 [0, 43] { R2281 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2281 += 1 };
  s2 -> s1 [91, 110] { R2281 += 1 };
  s2 -> s3 [111, 111] { R2281 += 1 };
  s2 -> s1 [112, 65535] { R2281 += 1 };
  s3 -> s1 [0, 43] { R2281 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2281 += 1 };
  s3 -> s1 [91, 98] { R2281 += 1 };
  s3 -> s4 [99, 99] { R2281 += 1 };
  s3 -> s1 [100, 65535] { R2281 += 1 };
  s4 -> s1 [0, 43] { R2281 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2281 += 1 };
  s4 -> s1 [91, 96] { R2281 += 1 };
  s4 -> s5 [97, 97] { R2281 += 1 };
  s4 -> s1 [98, 65535] { R2281 += 1 };
  s5 -> s1 [0, 43] { R2281 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2281 += 1 };
  s5 -> s1 [91, 107] { R2281 += 1 };
  s5 -> s6 [108, 108] { R2281 += 1 };
  s5 -> s1 [109, 65535] { R2281 += 1 };
  s6 -> s1 [0, 43] { R2281 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2281 += 1 };
  s6 -> s1 [91, 103] { R2281 += 1 };
  s6 -> s7 [104, 104] { R2281 += 1 };
  s6 -> s1 [105, 65535] { R2281 += 1 };
  s7 -> s1 [0, 43] { R2281 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2281 += 1 };
  s7 -> s1 [91, 110] { R2281 += 1 };
  s7 -> s8 [111, 111] { R2281 += 1 };
  s7 -> s1 [112, 65535] { R2281 += 1 };
  s8 -> s1 [0, 43] { R2281 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2281 += 1 };
  s8 -> s1 [91, 114] { R2281 += 1 };
  s8 -> s9 [115, 115] { R2281 += 1 };
  s8 -> s1 [116, 65535] { R2281 += 1 };
  s9 -> s1 [0, 43] { R2281 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2281 += 1 };
  s9 -> s1 [91, 115] { R2281 += 1 };
  s9 -> s10 [116, 116] { R2281 += 1 };
  s9 -> s1 [117, 65535] { R2281 += 1 };
  s10 -> s1 [0, 43] { R2281 += 1 };
  s10 -> s1 [45, 64] { R2281 += 1 };
  s10 -> s1 [91, 65535] { R2281 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R2283 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2282 += 1, R2283 += 1 };
  s1 -> s1 [0, 65535] { R2283 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2285 += 1 };
  s0 -> s2 [0, 65535] { R2285 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2284 += 1, R2285 += 1 };
  s0 -> s3 [58, 58] { R2285 += 1 };
  s0 -> s1 [59, 65535] { R2285 += 1 };
  s1 -> s1 [0, 57] { R2285 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2285 += 1 };
  s1 -> s1 [59, 65535] { R2285 += 1 };
  s2 -> s1 [0, 57] { R2285 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2285 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2285 += 1 };
  s2 -> s1 [59, 65535] { R2285 += 1 };
  s3 -> s3 [0, 65535] { R2285 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2287 += 1, R2035 += 1 };
  s0 -> s2 [0, 65535] { R2287 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2286 += 1, R2287 += 1 };
  s0 -> s3 [91, 91] { R2287 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2287 += 1, R2035 += 1 };
  s1 -> s5 [0, 65535] { R2287 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2287 += 1, R2035 += 1 };
  s2 -> s1 [0, 90] { R2287 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2287 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s3 [91, 91] { R2287 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2287 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2287 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2287 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2289 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s2 [0, 65535] { R2289 += 1, R2037 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2288 += 1, R2289 += 1 };
  s1 -> s1 [0, 65535] { R2289 += 1, R2036 += 1, R2037 += 1 };
  s1 -> s2 [0, 65535] { R2289 += 1, R2037 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2289 += 1, R2037 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R2289 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2289 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2291 += 1 };
  s0 -> s0 [0, 65535] { R2290 += 1, R2291 += 1 };
  s0 -> s1 [91, 107] { R2291 += 1 };
  s0 -> s2 [108, 108] { R2291 += 1 };
  s0 -> s1 [109, 65535] { R2291 += 1 };
  s1 -> s1 [0, 64] { R2291 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2291 += 1 };
  s2 -> s1 [0, 64] { R2291 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2291 += 1 };
  s2 -> s3 [111, 111] { R2291 += 1 };
  s2 -> s1 [112, 65535] { R2291 += 1 };
  s3 -> s1 [0, 64] { R2291 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2291 += 1 };
  s3 -> s4 [99, 99] { R2291 += 1 };
  s3 -> s1 [100, 65535] { R2291 += 1 };
  s4 -> s1 [0, 64] { R2291 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2291 += 1 };
  s4 -> s5 [97, 97] { R2291 += 1 };
  s4 -> s1 [98, 65535] { R2291 += 1 };
  s5 -> s1 [0, 64] { R2291 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2291 += 1 };
  s5 -> s6 [108, 108] { R2291 += 1 };
  s5 -> s1 [109, 65535] { R2291 += 1 };
  s6 -> s1 [0, 64] { R2291 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2291 += 1 };
  s6 -> s7 [104, 104] { R2291 += 1 };
  s6 -> s1 [105, 65535] { R2291 += 1 };
  s7 -> s1 [0, 64] { R2291 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2291 += 1 };
  s7 -> s8 [111, 111] { R2291 += 1 };
  s7 -> s1 [112, 65535] { R2291 += 1 };
  s8 -> s1 [0, 64] { R2291 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2291 += 1 };
  s8 -> s9 [115, 115] { R2291 += 1 };
  s8 -> s1 [116, 65535] { R2291 += 1 };
  s9 -> s1 [0, 64] { R2291 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2291 += 1 };
  s9 -> s10 [116, 116] { R2291 += 1 };
  s9 -> s1 [117, 65535] { R2291 += 1 };
  s10 -> s1 [0, 64] { R2291 += 1 };
  s10 -> s1 [91, 65535] { R2291 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2292 += 1, R2293 += 1 };
  s0 -> s1 [0, 65535] { R2293 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R2293 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2295 += 1 };
  s0 -> s0 [0, 65535] { R2294 += 1, R2295 += 1 };
  s0 -> s2 [0, 65535] { R2295 += 1, R6 += 1 };
  s0 -> s3 [58, 58] { R2295 += 1 };
  s0 -> s1 [59, 65535] { R2295 += 1 };
  s1 -> s1 [0, 57] { R2295 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2295 += 1 };
  s1 -> s1 [59, 65535] { R2295 += 1 };
  s2 -> s1 [0, 57] { R2295 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2295 += 1, R6 += 1 };
  s2 -> s3 [58, 58] { R2295 += 1 };
  s2 -> s1 [59, 65535] { R2295 += 1 };
  s3 -> s3 [0, 65535] { R2295 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2297 += 1, R2031 += 1 };
  s0 -> s2 [0, 65535] { R2297 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2296 += 1, R2297 += 1 };
  s0 -> s3 [91, 91] { R2297 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2297 += 1, R2031 += 1 };
  s1 -> s1 [0, 65535] { R2297 += 1, R2031 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2297 += 1 };
  s2 -> s1 [0, 90] { R2297 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2297 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s3 [91, 91] { R2297 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2297 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2297 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2297 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R2299 += 1, R2033 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R2298 += 1, R2299 += 1 };
  s0 -> s2 [0, 65535] { R2299 += 1, R2032 += 1, R2033 += 1 };
  s1 -> s1 [0, 65535] { R2299 += 1, R2033 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R2299 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2299 += 1, R2033 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2299 += 1, R2032 += 1, R2033 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2299 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2319 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2319 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2318 += 1, R2319 += 1 };
  s0 -> s3 [47, 47] { R2319 += 1 };
  s0 -> s1 [48, 65535] { R2319 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2319 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2319 += 1 };
  s1 -> s1 [48, 65535] { R2319 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2319 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2319 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2319 += 1 };
  s2 -> s1 [48, 65535] { R2319 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R2319 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2321 += 1, R2029 += 1 };
  s0 -> s0 [0, 65535] { R2320 += 1, R2321 += 1 };
  s1 -> s1 [0, 65535] { R2321 += 1, R2029 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2322 += 1, R2323 += 1 };
  s0 -> s1 [0, 65535] { R2323 += 1, R2304 += 1, R2305 += 1 };
  s0 -> s2 [108, 108] { R2323 += 1, R2305 += 1 };
  s1 -> s1 [0, 65535] { R2323 += 1, R2304 += 1, R2305 += 1 };
  s1 -> s2 [108, 108] { R2323 += 1, R2305 += 1 };
  s2 -> s3 [111, 111] { R2323 += 1, R2305 += 1 };
  s3 -> s4 [99, 99] { R2323 += 1, R2305 += 1 };
  s4 -> s5 [97, 97] { R2323 += 1, R2305 += 1 };
  s5 -> s6 [108, 108] { R2323 += 1, R2305 += 1 };
  s6 -> s7 [104, 104] { R2323 += 1, R2305 += 1 };
  s7 -> s8 [111, 111] { R2323 += 1, R2305 += 1 };
  s8 -> s9 [115, 115] { R2323 += 1, R2305 += 1 };
  s9 -> s10 [116, 116] { R2323 += 1, R2305 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2323 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2324 += 1, R2325 += 1 };
  s0 -> s1 [0, 65535] { R2325 += 1, R2307 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R2325 += 1, R2306 += 1, R2307 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2325 += 1, R2307 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R2325 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2325 += 1, R2307 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R2325 += 1, R2306 += 1, R2307 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2325 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2327 += 1, R2309 += 1 };
  s0 -> s2 [0, 65535] { R2327 += 1, R2309 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R2327 += 1, R2308 += 1, R2309 += 1 };
  s0 -> s0 [0, 65535] { R2326 += 1, R2327 += 1 };
  s0 -> s4 [90, 90] { R2327 += 1, R2309 += 1 };
  s0 -> s1 [91, 65535] { R2327 += 1, R2309 += 1 };
  s1 -> s1 [0, 89] { R2327 += 1, R2309 += 1 };
  s1 -> s1 [0, 65535] { R2327 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [90, 90] { R2327 += 1, R2309 += 1 };
  s1 -> s1 [91, 65535] { R2327 += 1, R2309 += 1 };
  s2 -> s1 [0, 89] { R2327 += 1, R2309 += 1 };
  s2 -> s2 [0, 65535] { R2327 += 1, R2309 += 1, R8 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2327 += 1 };
  s2 -> s4 [90, 90] { R2327 += 1, R2309 += 1 };
  s2 -> s1 [91, 65535] { R2327 += 1, R2309 += 1 };
  s3 -> s1 [0, 89] { R2327 += 1, R2309 += 1 };
  s3 -> s2 [0, 65535] { R2327 += 1, R2309 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R2327 += 1, R2308 += 1, R2309 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [90, 90] { R2327 += 1, R2309 += 1 };
  s3 -> s1 [91, 65535] { R2327 += 1, R2309 += 1 };
  s4 -> s4 [0, 65535] { R2327 += 1, R2309 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2327 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2329 += 1, R2310 += 1, R2311 += 1 };
  s0 -> s2 [0, 65535] { R2329 += 1, R2311 += 1, R2276 += 1, R2277 += 1 };
  s0 -> s3 [0, 65535] { R2329 += 1, R2311 += 1, R2277 += 1, R2027 += 1 };
  s0 -> s0 [0, 65535] { R2328 += 1, R2329 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2329 += 1, R2310 += 1, R2311 += 1 };
  s1 -> s2 [0, 65535] { R2329 += 1, R2311 += 1, R2276 += 1, R2277 += 1 };
  s1 -> s3 [0, 65535] { R2329 += 1, R2311 += 1, R2277 += 1, R2027 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2329 += 1 };
  s2 -> s2 [0, 65535] { R2329 += 1, R2311 += 1, R2276 += 1, R2277 += 1 };
  s2 -> s3 [0, 65535] { R2329 += 1, R2311 += 1, R2277 += 1, R2027 += 1 };
  s3 -> s4 [0, 65535] { R2329 += 1, R2311 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2329 += 1 };
  s3 -> s3 [0, 65535] { R2329 += 1, R2311 += 1, R2277 += 1, R2027 += 1 };
  s4 -> s4 [0, 65535] { R2329 += 1, R2311 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2329 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2329 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 96] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s0 -> s2 [0, 65535] { R2331 += 1, R2312 += 1, R2313 += 1 };
  s0 -> s0 [0, 65535] { R2330 += 1, R2331 += 1 };
  s0 -> s3 [0, 65535] { R2331 += 1, R2313 += 1, R2278 += 1, R2279 += 1 };
  s0 -> s4 [97, 97] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s0 -> s1 [98, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s12 [0, 65535] { R2331 += 1, R2313 += 1 };
  s1 -> s6 [0, 65535] { R2331 += 1 };
  s1 -> s1 [0, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s2 -> s1 [0, 96] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s2 -> s2 [0, 65535] { R2331 += 1, R2312 += 1, R2313 += 1 };
  s2 -> s3 [0, 65535] { R2331 += 1, R2313 += 1, R2278 += 1, R2279 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [97, 97] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s2 -> s1 [98, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s3 -> s1 [0, 96] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s3 -> s3 [0, 65535] { R2331 += 1, R2313 += 1, R2278 += 1, R2279 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2331 += 1 };
  s3 -> s4 [97, 97] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s3 -> s1 [98, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s4 -> s1 [0, 107] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s4 -> s4 [0, 65535] { R2331 += 1, R2313 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2331 += 1 };
  s4 -> s7 [108, 108] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s4 -> s1 [109, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2331 += 1 };
  s7 -> s1 [0, 103] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s7 -> s7 [0, 65535] { R2331 += 1, R2313 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2331 += 1 };
  s7 -> s8 [104, 104] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s7 -> s1 [105, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s8 -> s1 [0, 110] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R2331 += 1 };
  s8 -> s8 [0, 65535] { R2331 += 1, R2313 += 1 };
  s8 -> s9 [111, 111] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s8 -> s1 [112, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s9 -> s1 [0, 114] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R2331 += 1 };
  s9 -> s9 [0, 65535] { R2331 += 1, R2313 += 1 };
  s9 -> s10 [115, 115] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s9 -> s1 [116, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s10 -> s1 [0, 115] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s10 -> s10 [0, 65535] { R2331 += 1, R2313 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R2331 += 1 };
  s10 -> s11 [116, 116] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s10 -> s1 [117, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s11 -> s1 [0, 65535] { R2331 += 1, R2313 += 1, R2279 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R2331 += 1, R2313 += 1 };
  s12 -> s6 [0, 65535] { R2331 += 1 };
  accepting s3, s4, s12, s8, s5, s2, s9, s6, s1, s7, s0, s10;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2333 += 1, R2315 += 1, R2301 += 1, R2028 += 1 };
  s0 -> s2 [0, 65535] { R2333 += 1, R2315 += 1, R2300 += 1, R2301 += 1 };
  s0 -> s3 [0, 65535] { R2333 += 1, R2314 += 1, R2315 += 1 };
  s0 -> s0 [0, 65535] { R2332 += 1, R2333 += 1 };
  s1 -> s1 [0, 65535] { R2333 += 1, R2315 += 1, R2301 += 1, R2028 += 1 };
  s1 -> s6 [0, 65535] { R2333 += 1, R2315 += 1 };
  s1 -> s5 [0, 65535] { R2333 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2333 += 1, R2315 += 1, R2301 += 1, R2028 += 1 };
  s2 -> s2 [0, 65535] { R2333 += 1, R2315 += 1, R2300 += 1, R2301 += 1 };
  s2 -> s5 [0, 65535] { R2333 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2333 += 1, R2315 += 1, R2301 += 1, R2028 += 1 };
  s3 -> s2 [0, 65535] { R2333 += 1, R2315 += 1, R2300 += 1, R2301 += 1 };
  s3 -> s3 [0, 65535] { R2333 += 1, R2314 += 1, R2315 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2333 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2333 += 1, R2315 += 1 };
  s6 -> s5 [0, 65535] { R2333 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2335 += 1, R2317 += 1, R2302 += 1, R2303 += 1 };
  s0 -> s2 [0, 65535] { R2335 += 1, R2316 += 1, R2317 += 1 };
  s0 -> s0 [0, 65535] { R2334 += 1, R2335 += 1 };
  s0 -> s3 [108, 108] { R2335 += 1, R2317 += 1, R2303 += 1 };
  s1 -> s1 [0, 65535] { R2335 += 1, R2317 += 1, R2302 += 1, R2303 += 1 };
  s1 -> s3 [108, 108] { R2335 += 1, R2317 += 1, R2303 += 1 };
  s2 -> s1 [0, 65535] { R2335 += 1, R2317 += 1, R2302 += 1, R2303 += 1 };
  s2 -> s2 [0, 65535] { R2335 += 1, R2316 += 1, R2317 += 1 };
  s2 -> s3 [108, 108] { R2335 += 1, R2317 += 1, R2303 += 1 };
  s3 -> s4 [111, 111] { R2335 += 1, R2317 += 1, R2303 += 1 };
  s4 -> s5 [99, 99] { R2335 += 1, R2317 += 1, R2303 += 1 };
  s5 -> s6 [0, 65535] { R2335 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R2335 += 1, R2317 += 1 };
  s6 -> s6 [0, 65535] { R2335 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s5, s6, s7;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2335 && R12 = 0 && R1356 = 0 && R1357 = R2299 && R2280 - R2299 = 1 && R2281 = R2335 && R2282 - R2299 = 1 && R2283 = R2335 && R2284 - R2299 = 1 && R2285 = R2335 && R2286 - R2299 = 1 && R2287 = R2335 && R2288 - R2299 = 1 && R2289 = R2335 && R2290 = 0 && R2291 = R2299 && R2292 = 0 && R2293 = R2299 && R2294 = 0 && R2295 = R2299 && R2296 = 0 && R2297 = R2299 && R2298 = 0 && R2302 = 0 && R2303 = 0 && R2304 = 0 && R2316 = 0 && R2318 = 10 && R2319 = R2335 && R2322 = 10 && R2323 = R2335 && R2334 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2305 - R13 < 1 && R2317 - R13 < 1 && -1 < R13 && R2305 - R2029 < 1 && R2317 - R2029 < 1 && R2299 < R2335 && -1 < R2299 && 9 < R2335 && (R2 != 0 || R2027 = 0 || (R2276 = 0 && R2277 = 0)) && (R2 != 0 || R2027 = 0 || (R2278 = 0 && R2279 = 0)) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2276 != 0 || R2 = R2277 || R2 < 1) && (R2278 != 0 || R2 = R2279 || R2 < 1) && (R2306 != 0 || ((R2 != 0 || ((R13 != R2307 || R2307 - R2029 < 1 || R2029 < 1) && (R2029 != R2307 || R2307 - R13 < 1 || R13 < 1) && (R13 = R2307 || R2029 = R2307 || R13 < 1 || R2029 < 1))) && (R13 != R2307 || R2 < 1 || R2307 - R2029 < 1 || R2307 < 0) && (R2029 != R2307 || R2 < 1 || R2307 - R13 < 1) && (R13 = R2307 || R2029 = R2307 || R2 < 1))) && (R2308 != 0 || ((R2 != 0 || ((R13 != R2309 || R2309 - R2029 < 1 || R2029 < 1) && (R2029 != R2309 || R2309 - R13 < 1 || R13 < 1) && (R13 = R2309 || R2029 = R2309 || R13 < 1 || R2029 < 1))) && (R13 != R2309 || R2 < 1 || R2309 - R2029 < 1 || R2309 < 0) && (R2029 != R2309 || R2 < 1 || R2309 - R13 < 1) && (R13 = R2309 || R2029 = R2309 || R2 < 1))) && (R2310 != 0 || ((R2 != 0 || ((R13 != R2311 || R2311 - R2029 < 1 || R2029 < 1) && (R2029 != R2311 || R2311 - R13 < 1 || R13 < 1) && (R13 = R2311 || R2029 = R2311 || R13 < 1 || R2029 < 1))) && (R13 != R2311 || R2 < 1 || R2311 - R2029 < 1 || R2311 < 0) && (R2029 != R2311 || R2 < 1 || R2311 - R13 < 1) && (R13 = R2311 || R2029 = R2311 || R2 < 1))) && (R2312 != 0 || ((R2 != 0 || ((R13 != R2313 || R2313 - R2029 < 1 || R2029 < 1) && (R2029 != R2313 || R2313 - R13 < 1 || R13 < 1) && (R13 = R2313 || R2029 = R2313 || R13 < 1 || R2029 < 1))) && (R13 != R2313 || R2 < 1 || R2313 - R2029 < 1 || R2313 < 0) && (R2029 != R2313 || R2 < 1 || R2313 - R13 < 1) && (R13 = R2313 || R2029 = R2313 || R2 < 1))) && (R2314 != 0 || ((R2 != 0 || ((R13 != R2315 || R2315 - R2029 < 1 || R2029 < 1) && (R2029 != R2315 || R2315 - R13 < 1 || R13 < 1) && (R13 = R2315 || R2029 = R2315 || R13 < 1 || R2029 < 1))) && (R13 != R2315 || R2 < 1 || R2315 - R2029 < 1 || R2315 < 0) && (R2029 != R2315 || R2 < 1 || R2315 - R13 < 1) && (R13 = R2315 || R2029 = R2315 || R2 < 1))) && (R2320 != 10 || R2321 = R2335 || (R2029 = 0 && R2335 = 10)) && (R2324 != 10 || R2325 = R2335 || (R2029 = 0 && R2335 = 10)) && (R2326 != 10 || R2327 = R2335 || (R2029 = 0 && R2335 = 10)) && (R2328 != 10 || R2329 = R2335 || (R2029 = 0 && R2335 = 10)) && (R2330 != 10 || R2331 = R2335 || (R2029 = 0 && R2335 = 10)) && (R2332 != 10 || R2333 = R2335 || (R2029 = 0 && R2335 = 10)) && (R2028 = 0 || (R2300 = 0 && R2301 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2276 = 0 || R2 < 1) && (R2278 = 0 || R2 < 1) && (R2306 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2308 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2310 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2312 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2314 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2320 = 10 || (R2029 = 0 && R2335 = 10)) && (R2324 = 10 || (R2029 = 0 && R2335 = 10)) && (R2326 = 10 || (R2029 = 0 && R2335 = 10)) && (R2328 = 10 || (R2029 = 0 && R2335 = 10)) && (R2330 = 10 || (R2029 = 0 && R2335 = 10)) && (R2332 = 10 || (R2029 = 0 && R2335 = 10)) && (R13 - R2305 < 1 || R2029 - R2305 < 1) && (R13 - R2317 < 1 || R2029 - R2317 < 1);
// End of Parikh automata intersection problem
