// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2096, R2097, R2098, R2099, R2100, R2101, R2102, R2103, R2104, R2105, R2106, R2107, R2108, R2109, R2110, R2111, R2112, R2113, R2114, R2115, R2116, R2117, R2118, R2119, R2120, R2121, R2122, R2123, R2124, R2125, R2126, R2127, R2128, R2129, R2130, R2131, R2132, R2133, R2134, R2135, R2136, R2137, R2138, R2139, R2140, R2141, R2142, R2143, R2144, R2145, R2146, R2147, R2148, R2149, R2150, R2151, R2152, R2153, R2154, R2155, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2101 += 1 };
  s0 -> s0 [0, 65535] { R2100 += 1, R2101 += 1 };
  s0 -> s1 [45, 64] { R2101 += 1 };
  s0 -> s1 [91, 107] { R2101 += 1 };
  s0 -> s2 [108, 108] { R2101 += 1 };
  s0 -> s1 [109, 65535] { R2101 += 1 };
  s1 -> s1 [0, 43] { R2101 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2101 += 1 };
  s1 -> s1 [91, 65535] { R2101 += 1 };
  s2 -> s1 [0, 43] { R2101 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2101 += 1 };
  s2 -> s1 [91, 110] { R2101 += 1 };
  s2 -> s3 [111, 111] { R2101 += 1 };
  s2 -> s1 [112, 65535] { R2101 += 1 };
  s3 -> s1 [0, 43] { R2101 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2101 += 1 };
  s3 -> s1 [91, 98] { R2101 += 1 };
  s3 -> s4 [99, 99] { R2101 += 1 };
  s3 -> s1 [100, 65535] { R2101 += 1 };
  s4 -> s1 [0, 43] { R2101 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2101 += 1 };
  s4 -> s1 [91, 96] { R2101 += 1 };
  s4 -> s5 [97, 97] { R2101 += 1 };
  s4 -> s1 [98, 65535] { R2101 += 1 };
  s5 -> s1 [0, 43] { R2101 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2101 += 1 };
  s5 -> s1 [91, 107] { R2101 += 1 };
  s5 -> s6 [108, 108] { R2101 += 1 };
  s5 -> s1 [109, 65535] { R2101 += 1 };
  s6 -> s1 [0, 43] { R2101 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2101 += 1 };
  s6 -> s1 [91, 103] { R2101 += 1 };
  s6 -> s7 [104, 104] { R2101 += 1 };
  s6 -> s1 [105, 65535] { R2101 += 1 };
  s7 -> s1 [0, 43] { R2101 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2101 += 1 };
  s7 -> s1 [91, 110] { R2101 += 1 };
  s7 -> s8 [111, 111] { R2101 += 1 };
  s7 -> s1 [112, 65535] { R2101 += 1 };
  s8 -> s1 [0, 43] { R2101 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2101 += 1 };
  s8 -> s1 [91, 114] { R2101 += 1 };
  s8 -> s9 [115, 115] { R2101 += 1 };
  s8 -> s1 [116, 65535] { R2101 += 1 };
  s9 -> s1 [0, 43] { R2101 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2101 += 1 };
  s9 -> s1 [91, 115] { R2101 += 1 };
  s9 -> s10 [116, 116] { R2101 += 1 };
  s9 -> s1 [117, 65535] { R2101 += 1 };
  s10 -> s1 [0, 43] { R2101 += 1 };
  s10 -> s1 [45, 64] { R2101 += 1 };
  s10 -> s1 [91, 65535] { R2101 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R2103 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2102 += 1, R2103 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2103 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2105 += 1 };
  s0 -> s0 [0, 65535] { R2104 += 1, R2105 += 1 };
  s0 -> s2 [0, 65535] { R2105 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R2105 += 1 };
  s0 -> s1 [59, 65535] { R2105 += 1 };
  s1 -> s1 [0, 57] { R2105 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2105 += 1 };
  s1 -> s1 [59, 65535] { R2105 += 1 };
  s2 -> s1 [0, 57] { R2105 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2105 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2105 += 1 };
  s2 -> s1 [59, 65535] { R2105 += 1 };
  s3 -> s3 [0, 65535] { R2105 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2107 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2106 += 1, R2107 += 1 };
  s0 -> s2 [0, 65535] { R2107 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s3 [91, 91] { R2107 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2107 += 1, R2035 += 1 };
  s1 -> s1 [0, 65535] { R2107 += 1, R2035 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2107 += 1 };
  s2 -> s1 [0, 90] { R2107 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2107 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s3 [91, 91] { R2107 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2107 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2107 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2107 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2109 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s2 [0, 65535] { R2109 += 1, R2037 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2108 += 1, R2109 += 1 };
  s1 -> s1 [0, 65535] { R2109 += 1, R2036 += 1, R2037 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2109 += 1, R2037 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R2109 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2109 += 1, R2037 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R2109 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2111 += 1 };
  s0 -> s0 [0, 65535] { R2110 += 1, R2111 += 1 };
  s0 -> s1 [91, 107] { R2111 += 1 };
  s0 -> s2 [108, 108] { R2111 += 1 };
  s0 -> s1 [109, 65535] { R2111 += 1 };
  s1 -> s1 [0, 64] { R2111 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2111 += 1 };
  s2 -> s1 [0, 64] { R2111 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2111 += 1 };
  s2 -> s3 [111, 111] { R2111 += 1 };
  s2 -> s1 [112, 65535] { R2111 += 1 };
  s3 -> s1 [0, 64] { R2111 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2111 += 1 };
  s3 -> s4 [99, 99] { R2111 += 1 };
  s3 -> s1 [100, 65535] { R2111 += 1 };
  s4 -> s1 [0, 64] { R2111 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2111 += 1 };
  s4 -> s5 [97, 97] { R2111 += 1 };
  s4 -> s1 [98, 65535] { R2111 += 1 };
  s5 -> s1 [0, 64] { R2111 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2111 += 1 };
  s5 -> s6 [108, 108] { R2111 += 1 };
  s5 -> s1 [109, 65535] { R2111 += 1 };
  s6 -> s1 [0, 64] { R2111 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2111 += 1 };
  s6 -> s7 [104, 104] { R2111 += 1 };
  s6 -> s1 [105, 65535] { R2111 += 1 };
  s7 -> s1 [0, 64] { R2111 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2111 += 1 };
  s7 -> s8 [111, 111] { R2111 += 1 };
  s7 -> s1 [112, 65535] { R2111 += 1 };
  s8 -> s1 [0, 64] { R2111 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2111 += 1 };
  s8 -> s9 [115, 115] { R2111 += 1 };
  s8 -> s1 [116, 65535] { R2111 += 1 };
  s9 -> s1 [0, 64] { R2111 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2111 += 1 };
  s9 -> s10 [116, 116] { R2111 += 1 };
  s9 -> s1 [117, 65535] { R2111 += 1 };
  s10 -> s1 [0, 64] { R2111 += 1 };
  s10 -> s1 [91, 65535] { R2111 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2113 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R2112 += 1, R2113 += 1 };
  s1 -> s1 [0, 65535] { R2113 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2115 += 1 };
  s0 -> s0 [0, 65535] { R2114 += 1, R2115 += 1 };
  s0 -> s2 [0, 65535] { R2115 += 1, R6 += 1 };
  s0 -> s3 [58, 58] { R2115 += 1 };
  s0 -> s1 [59, 65535] { R2115 += 1 };
  s1 -> s1 [0, 57] { R2115 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2115 += 1 };
  s1 -> s1 [59, 65535] { R2115 += 1 };
  s2 -> s1 [0, 57] { R2115 += 1 };
  s2 -> s2 [0, 65535] { R2115 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2115 += 1 };
  s2 -> s1 [59, 65535] { R2115 += 1 };
  s3 -> s3 [0, 65535] { R2115 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2117 += 1, R2031 += 1 };
  s0 -> s2 [0, 65535] { R2117 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2116 += 1, R2117 += 1 };
  s0 -> s3 [91, 91] { R2117 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2117 += 1, R2031 += 1 };
  s1 -> s5 [0, 65535] { R2117 += 1 };
  s1 -> s1 [0, 65535] { R2117 += 1, R2031 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2117 += 1, R2031 += 1 };
  s2 -> s2 [0, 65535] { R2117 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2117 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2117 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2117 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2117 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R2119 += 1, R2032 += 1, R2033 += 1 };
  s0 -> s0 [0, 65535] { R2118 += 1, R2119 += 1 };
  s0 -> s2 [0, 65535] { R2119 += 1, R2033 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2119 += 1, R2032 += 1, R2033 += 1 };
  s1 -> s2 [0, 65535] { R2119 += 1, R2033 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2119 += 1 };
  s2 -> s2 [0, 65535] { R2119 += 1, R2033 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2119 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2139 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2139 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2138 += 1, R2139 += 1 };
  s0 -> s3 [47, 47] { R2139 += 1 };
  s0 -> s1 [48, 65535] { R2139 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2139 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2139 += 1 };
  s1 -> s1 [48, 65535] { R2139 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2139 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2139 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2139 += 1 };
  s2 -> s1 [48, 65535] { R2139 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R2139 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2140 += 1, R2141 += 1 };
  s0 -> s1 [0, 65535] { R2141 += 1, R2029 += 1 };
  s1 -> s1 [0, 65535] { R2141 += 1, R2029 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2143 += 1, R2124 += 1, R2125 += 1 };
  s0 -> s0 [0, 65535] { R2142 += 1, R2143 += 1 };
  s0 -> s2 [108, 108] { R2143 += 1, R2125 += 1 };
  s1 -> s1 [0, 65535] { R2143 += 1, R2124 += 1, R2125 += 1 };
  s1 -> s2 [108, 108] { R2143 += 1, R2125 += 1 };
  s2 -> s3 [111, 111] { R2143 += 1, R2125 += 1 };
  s3 -> s4 [99, 99] { R2143 += 1, R2125 += 1 };
  s4 -> s5 [97, 97] { R2143 += 1, R2125 += 1 };
  s5 -> s6 [108, 108] { R2143 += 1, R2125 += 1 };
  s6 -> s7 [104, 104] { R2143 += 1, R2125 += 1 };
  s7 -> s8 [111, 111] { R2143 += 1, R2125 += 1 };
  s8 -> s9 [115, 115] { R2143 += 1, R2125 += 1 };
  s9 -> s10 [116, 116] { R2143 += 1, R2125 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2143 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2144 += 1, R2145 += 1 };
  s0 -> s1 [0, 65535] { R2145 += 1, R2126 += 1, R2127 += 1 };
  s0 -> s2 [0, 65535] { R2145 += 1, R2127 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R2145 += 1, R2126 += 1, R2127 += 1 };
  s1 -> s2 [0, 65535] { R2145 += 1, R2127 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2145 += 1 };
  s2 -> s2 [0, 65535] { R2145 += 1, R2127 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2145 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2147 += 1, R2129 += 1 };
  s0 -> s2 [0, 65535] { R2147 += 1, R2128 += 1, R2129 += 1 };
  s0 -> s0 [0, 65535] { R2146 += 1, R2147 += 1 };
  s0 -> s3 [0, 65535] { R2147 += 1, R2129 += 1, R8 += 1 };
  s0 -> s4 [90, 90] { R2147 += 1, R2129 += 1 };
  s0 -> s1 [91, 65535] { R2147 += 1, R2129 += 1 };
  s1 -> s1 [0, 89] { R2147 += 1, R2129 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2147 += 1 };
  s1 -> s4 [90, 90] { R2147 += 1, R2129 += 1 };
  s1 -> s1 [91, 65535] { R2147 += 1, R2129 += 1 };
  s2 -> s1 [0, 89] { R2147 += 1, R2129 += 1 };
  s2 -> s2 [0, 65535] { R2147 += 1, R2128 += 1, R2129 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2147 += 1, R2129 += 1, R8 += 1 };
  s2 -> s4 [90, 90] { R2147 += 1, R2129 += 1 };
  s2 -> s1 [91, 65535] { R2147 += 1, R2129 += 1 };
  s3 -> s1 [0, 89] { R2147 += 1, R2129 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2147 += 1 };
  s3 -> s3 [0, 65535] { R2147 += 1, R2129 += 1, R8 += 1 };
  s3 -> s4 [90, 90] { R2147 += 1, R2129 += 1 };
  s3 -> s1 [91, 65535] { R2147 += 1, R2129 += 1 };
  s4 -> s4 [0, 65535] { R2147 += 1, R2129 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2147 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2149 += 1, R2130 += 1, R2131 += 1 };
  s0 -> s2 [0, 65535] { R2149 += 1, R2131 += 1, R2096 += 1, R2097 += 1 };
  s0 -> s0 [0, 65535] { R2148 += 1, R2149 += 1 };
  s0 -> s3 [0, 65535] { R2149 += 1, R2131 += 1, R2097 += 1, R2027 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2149 += 1, R2130 += 1, R2131 += 1 };
  s1 -> s2 [0, 65535] { R2149 += 1, R2131 += 1, R2096 += 1, R2097 += 1 };
  s1 -> s3 [0, 65535] { R2149 += 1, R2131 += 1, R2097 += 1, R2027 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2149 += 1 };
  s2 -> s2 [0, 65535] { R2149 += 1, R2131 += 1, R2096 += 1, R2097 += 1 };
  s2 -> s3 [0, 65535] { R2149 += 1, R2131 += 1, R2097 += 1, R2027 += 1 };
  s3 -> s4 [0, 65535] { R2149 += 1, R2131 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2149 += 1 };
  s3 -> s3 [0, 65535] { R2149 += 1, R2131 += 1, R2097 += 1, R2027 += 1 };
  s4 -> s4 [0, 65535] { R2149 += 1, R2131 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2149 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2149 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R2150 += 1, R2151 += 1 };
  s0 -> s1 [0, 65535] { R2151 += 1, R2132 += 1, R2133 += 1 };
  s0 -> s2 [0, 65535] { R2151 += 1, R2133 += 1, R2099 += 1 };
  s0 -> s3 [0, 65535] { R2151 += 1, R2133 += 1, R2098 += 1, R2099 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2151 += 1, R2132 += 1, R2133 += 1 };
  s1 -> s2 [0, 65535] { R2151 += 1, R2133 += 1, R2099 += 1 };
  s1 -> s3 [0, 65535] { R2151 += 1, R2133 += 1, R2098 += 1, R2099 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2151 += 1, R2133 += 1, R2099 += 1 };
  s2 -> s6 [0, 65535] { R2151 += 1, R2133 += 1 };
  s2 -> s5 [0, 65535] { R2151 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2151 += 1, R2133 += 1, R2099 += 1 };
  s3 -> s3 [0, 65535] { R2151 += 1, R2133 += 1, R2098 += 1, R2099 += 1 };
  s3 -> s5 [0, 65535] { R2151 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2151 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2151 += 1, R2133 += 1 };
  s6 -> s5 [0, 65535] { R2151 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R2152 += 1, R2153 += 1 };
  s0 -> s1 [0, 65535] { R2153 += 1, R2134 += 1, R2135 += 1 };
  s0 -> s2 [0, 65535] { R2153 += 1, R2135 += 1, R2120 += 1, R2121 += 1 };
  s0 -> s3 [0, 65535] { R2153 += 1, R2135 += 1, R2121 += 1, R2028 += 1 };
  s1 -> s1 [0, 65535] { R2153 += 1, R2134 += 1, R2135 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2153 += 1, R2135 += 1, R2120 += 1, R2121 += 1 };
  s1 -> s3 [0, 65535] { R2153 += 1, R2135 += 1, R2121 += 1, R2028 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2153 += 1, R2135 += 1, R2120 += 1, R2121 += 1 };
  s2 -> s6 [0, 65535] { R2153 += 1 };
  s2 -> s3 [0, 65535] { R2153 += 1, R2135 += 1, R2121 += 1, R2028 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2153 += 1, R2135 += 1 };
  s3 -> s6 [0, 65535] { R2153 += 1 };
  s3 -> s3 [0, 65535] { R2153 += 1, R2135 += 1, R2121 += 1, R2028 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2153 += 1, R2135 += 1 };
  s5 -> s6 [0, 65535] { R2153 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2153 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s0 -> s2 [0, 65535] { R2155 += 1, R2136 += 1, R2137 += 1 };
  s0 -> s0 [0, 65535] { R2154 += 1, R2155 += 1 };
  s0 -> s3 [0, 65535] { R2155 += 1, R2137 += 1, R2122 += 1, R2123 += 1 };
  s0 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s0 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s0 -> s1 [91, 107] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s0 -> s6 [108, 108] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s0 -> s1 [109, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s1 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s1 -> s1 [0, 65535] { R2155 += 1, R2137 += 1 };
  s1 -> s15 [0, 65535];
  s1 -> s16 [0, 65535] { R2155 += 1 };
  s1 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s1 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s1 -> s1 [91, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s2 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s2 -> s2 [0, 65535] { R2155 += 1, R2136 += 1, R2137 += 1 };
  s2 -> s3 [0, 65535] { R2155 += 1, R2137 += 1, R2122 += 1, R2123 += 1 };
  s2 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s2 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s2 -> s1 [91, 107] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s2 -> s6 [108, 108] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s2 -> s1 [109, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s3 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s3 -> s3 [0, 65535] { R2155 += 1, R2137 += 1, R2122 += 1, R2123 += 1 };
  s3 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s3 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s3 -> s1 [91, 107] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s3 -> s6 [108, 108] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s3 -> s1 [109, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s4 -> s17 [0, 65535] { R2155 += 1, R2137 += 1 };
  s4 -> s15 [0, 65535];
  s4 -> s4 [0, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s4 -> s16 [0, 65535] { R2155 += 1 };
  s5 -> s15 [0, 65535];
  s5 -> s16 [0, 65535] { R2155 += 1 };
  s5 -> s5 [0, 65535] { R2155 += 1, R2137 += 1 };
  s6 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s6 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s6 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s6 -> s1 [91, 110] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s6 -> s7 [111, 111] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s6 -> s1 [112, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s7 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s7 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s7 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s7 -> s1 [91, 98] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s7 -> s8 [99, 99] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s7 -> s1 [100, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s8 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s8 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s8 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s8 -> s1 [91, 96] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s8 -> s9 [97, 97] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s8 -> s1 [98, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s9 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s9 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s9 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s9 -> s1 [91, 107] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s9 -> s10 [108, 108] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s9 -> s1 [109, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s10 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s10 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s10 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s10 -> s1 [91, 103] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s10 -> s11 [104, 104] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s10 -> s1 [105, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s11 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s11 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s11 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s11 -> s1 [91, 110] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s11 -> s12 [111, 111] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s11 -> s1 [112, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s12 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s12 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s12 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s12 -> s1 [91, 114] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s12 -> s13 [115, 115] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s12 -> s1 [116, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s13 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s13 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s13 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s13 -> s1 [91, 115] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s13 -> s14 [116, 116] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s13 -> s1 [117, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s14 -> s1 [0, 89] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s14 -> s4 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s14 -> s5 [90, 90] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s14 -> s1 [91, 65535] { R2155 += 1, R2137 += 1, R2123 += 1 };
  s15 -> s15 [0, 65535];
  s16 -> s15 [0, 65535];
  s16 -> s16 [0, 65535] { R2155 += 1 };
  s17 -> s17 [0, 65535] { R2155 += 1, R2137 += 1 };
  s17 -> s15 [0, 65535];
  s17 -> s16 [0, 65535] { R2155 += 1 };
  accepting s17, s16, s4, s5, s1, s15;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2155 && R12 = 0 && R1356 = 0 && R1357 = R2119 && R2100 - R2119 = 1 && R2101 = R2155 && R2102 - R2119 = 1 && R2103 = R2155 && R2104 - R2119 = 1 && R2105 = R2155 && R2106 - R2119 = 1 && R2107 = R2155 && R2108 - R2119 = 1 && R2109 = R2155 && R2110 = 0 && R2111 = R2119 && R2112 = 0 && R2113 = R2119 && R2114 = 0 && R2115 = R2119 && R2116 = 0 && R2117 = R2119 && R2118 = 0 && R2122 = 0 && R2123 = 0 && R2124 = 0 && R2136 = 0 && R2138 = 10 && R2139 = R2155 && R2142 = 10 && R2143 = R2155 && R2154 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2125 - R13 < 1 && R2137 - R13 < 1 && -1 < R13 && R2125 - R2029 < 1 && R2137 - R2029 < 1 && R2119 < R2155 && -1 < R2119 && 9 < R2155 && (R2 != 0 || R2027 = 0 || (R2096 = 0 && R2097 = 0)) && (R2 != 0 || R2027 = 0 || (R2098 = 0 && R2099 = 0)) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2096 != 0 || R2 = R2097 || R2 < 1) && (R2098 != 0 || R2 = R2099 || R2 < 1) && (R2126 != 0 || ((R2 != 0 || ((R13 != R2127 || R2127 - R2029 < 1 || R2029 < 1) && (R2029 != R2127 || R2127 - R13 < 1 || R13 < 1) && (R13 = R2127 || R2029 = R2127 || R13 < 1 || R2029 < 1))) && (R13 != R2127 || R2 < 1 || R2127 - R2029 < 1 || R2127 < 0) && (R2029 != R2127 || R2 < 1 || R2127 - R13 < 1) && (R13 = R2127 || R2029 = R2127 || R2 < 1))) && (R2128 != 0 || ((R2 != 0 || ((R13 != R2129 || R2129 - R2029 < 1 || R2029 < 1) && (R2029 != R2129 || R2129 - R13 < 1 || R13 < 1) && (R13 = R2129 || R2029 = R2129 || R13 < 1 || R2029 < 1))) && (R13 != R2129 || R2 < 1 || R2129 - R2029 < 1 || R2129 < 0) && (R2029 != R2129 || R2 < 1 || R2129 - R13 < 1) && (R13 = R2129 || R2029 = R2129 || R2 < 1))) && (R2130 != 0 || ((R2 != 0 || ((R13 != R2131 || R2131 - R2029 < 1 || R2029 < 1) && (R2029 != R2131 || R2131 - R13 < 1 || R13 < 1) && (R13 = R2131 || R2029 = R2131 || R13 < 1 || R2029 < 1))) && (R13 != R2131 || R2 < 1 || R2131 - R2029 < 1 || R2131 < 0) && (R2029 != R2131 || R2 < 1 || R2131 - R13 < 1) && (R13 = R2131 || R2029 = R2131 || R2 < 1))) && (R2132 != 0 || ((R2 != 0 || ((R13 != R2133 || R2133 - R2029 < 1 || R2029 < 1) && (R2029 != R2133 || R2133 - R13 < 1 || R13 < 1) && (R13 = R2133 || R2029 = R2133 || R13 < 1 || R2029 < 1))) && (R13 != R2133 || R2 < 1 || R2133 - R2029 < 1 || R2133 < 0) && (R2029 != R2133 || R2 < 1 || R2133 - R13 < 1) && (R13 = R2133 || R2029 = R2133 || R2 < 1))) && (R2134 != 0 || ((R2 != 0 || ((R13 != R2135 || R2135 - R2029 < 1 || R2029 < 1) && (R2029 != R2135 || R2135 - R13 < 1 || R13 < 1) && (R13 = R2135 || R2029 = R2135 || R13 < 1 || R2029 < 1))) && (R13 != R2135 || R2 < 1 || R2135 - R2029 < 1 || R2135 < 0) && (R2029 != R2135 || R2 < 1 || R2135 - R13 < 1) && (R13 = R2135 || R2029 = R2135 || R2 < 1))) && (R2140 != 10 || R2141 = R2155 || (R2029 = 0 && R2155 = 10)) && (R2144 != 10 || R2145 = R2155 || (R2029 = 0 && R2155 = 10)) && (R2146 != 10 || R2147 = R2155 || (R2029 = 0 && R2155 = 10)) && (R2148 != 10 || R2149 = R2155 || (R2029 = 0 && R2155 = 10)) && (R2150 != 10 || R2151 = R2155 || (R2029 = 0 && R2155 = 10)) && (R2152 != 10 || R2153 = R2155 || (R2029 = 0 && R2155 = 10)) && (R2028 = 0 || (R2120 = 0 && R2121 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2096 = 0 || R2 < 1) && (R2098 = 0 || R2 < 1) && (R2126 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2128 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2130 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2132 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2134 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2140 = 10 || (R2029 = 0 && R2155 = 10)) && (R2144 = 10 || (R2029 = 0 && R2155 = 10)) && (R2146 = 10 || (R2029 = 0 && R2155 = 10)) && (R2148 = 10 || (R2029 = 0 && R2155 = 10)) && (R2150 = 10 || (R2029 = 0 && R2155 = 10)) && (R2152 = 10 || (R2029 = 0 && R2155 = 10)) && (R13 - R2125 < 1 || R2029 - R2125 < 1) && (R13 - R2137 < 1 || R2029 - R2137 < 1);
// End of Parikh automata intersection problem
