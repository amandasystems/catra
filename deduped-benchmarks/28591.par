// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R2047, R2048, R2049, R2050, R2051, R2052, R2053, R2054, R2055, R2056, R2057, R2058, R2059, R2060, R2061, R2062, R2063, R2064, R2065, R2066, R2067, R2068, R2069, R2070, R2071, R2072, R2073, R2074, R2075, R2076, R2077, R2078, R2079, R2080, R2081, R2082, R2083, R2084, R2085, R2086, R2087, R2088, R2089, R2090, R2091, R2092, R2093, R2094, R2095, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2043 += 1 };
  s0 -> s0 [0, 65535] { R2042 += 1, R2043 += 1 };
  s0 -> s1 [45, 64] { R2043 += 1 };
  s0 -> s1 [91, 107] { R2043 += 1 };
  s0 -> s2 [108, 108] { R2043 += 1 };
  s0 -> s1 [109, 65535] { R2043 += 1 };
  s1 -> s1 [0, 43] { R2043 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2043 += 1 };
  s1 -> s1 [91, 65535] { R2043 += 1 };
  s2 -> s1 [0, 43] { R2043 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2043 += 1 };
  s2 -> s1 [91, 110] { R2043 += 1 };
  s2 -> s3 [111, 111] { R2043 += 1 };
  s2 -> s1 [112, 65535] { R2043 += 1 };
  s3 -> s1 [0, 43] { R2043 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2043 += 1 };
  s3 -> s1 [91, 98] { R2043 += 1 };
  s3 -> s4 [99, 99] { R2043 += 1 };
  s3 -> s1 [100, 65535] { R2043 += 1 };
  s4 -> s1 [0, 43] { R2043 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2043 += 1 };
  s4 -> s1 [91, 96] { R2043 += 1 };
  s4 -> s5 [97, 97] { R2043 += 1 };
  s4 -> s1 [98, 65535] { R2043 += 1 };
  s5 -> s1 [0, 43] { R2043 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2043 += 1 };
  s5 -> s1 [91, 107] { R2043 += 1 };
  s5 -> s6 [108, 108] { R2043 += 1 };
  s5 -> s1 [109, 65535] { R2043 += 1 };
  s6 -> s1 [0, 43] { R2043 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2043 += 1 };
  s6 -> s1 [91, 103] { R2043 += 1 };
  s6 -> s7 [104, 104] { R2043 += 1 };
  s6 -> s1 [105, 65535] { R2043 += 1 };
  s7 -> s1 [0, 43] { R2043 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2043 += 1 };
  s7 -> s1 [91, 110] { R2043 += 1 };
  s7 -> s8 [111, 111] { R2043 += 1 };
  s7 -> s1 [112, 65535] { R2043 += 1 };
  s8 -> s1 [0, 43] { R2043 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2043 += 1 };
  s8 -> s1 [91, 114] { R2043 += 1 };
  s8 -> s9 [115, 115] { R2043 += 1 };
  s8 -> s1 [116, 65535] { R2043 += 1 };
  s9 -> s1 [0, 43] { R2043 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2043 += 1 };
  s9 -> s1 [91, 115] { R2043 += 1 };
  s9 -> s10 [116, 116] { R2043 += 1 };
  s9 -> s1 [117, 65535] { R2043 += 1 };
  s10 -> s1 [0, 43] { R2043 += 1 };
  s10 -> s1 [45, 64] { R2043 += 1 };
  s10 -> s1 [91, 65535] { R2043 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R2044 += 1, R2045 += 1 };
  s0 -> s1 [0, 65535] { R2045 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2045 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2047 += 1 };
  s0 -> s0 [0, 65535] { R2046 += 1, R2047 += 1 };
  s0 -> s2 [0, 65535] { R2047 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R2047 += 1 };
  s0 -> s1 [59, 65535] { R2047 += 1 };
  s1 -> s1 [0, 57] { R2047 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2047 += 1 };
  s1 -> s1 [59, 65535] { R2047 += 1 };
  s2 -> s1 [0, 57] { R2047 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2047 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2047 += 1 };
  s2 -> s1 [59, 65535] { R2047 += 1 };
  s3 -> s3 [0, 65535] { R2047 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2049 += 1, R2035 += 1 };
  s0 -> s2 [0, 65535] { R2049 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2048 += 1, R2049 += 1 };
  s0 -> s3 [91, 91] { R2049 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2049 += 1, R2035 += 1 };
  s1 -> s1 [0, 65535] { R2049 += 1, R2035 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2049 += 1 };
  s2 -> s1 [0, 90] { R2049 += 1, R2035 += 1 };
  s2 -> s2 [0, 65535] { R2049 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2049 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2049 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2049 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2049 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2051 += 1, R2037 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R2051 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s0 [0, 65535] { R2050 += 1, R2051 += 1 };
  s1 -> s1 [0, 65535] { R2051 += 1, R2037 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2051 += 1 };
  s2 -> s1 [0, 65535] { R2051 += 1, R2037 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R2051 += 1, R2036 += 1, R2037 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2051 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2053 += 1 };
  s0 -> s0 [0, 65535] { R2052 += 1, R2053 += 1 };
  s0 -> s1 [91, 107] { R2053 += 1 };
  s0 -> s2 [108, 108] { R2053 += 1 };
  s0 -> s1 [109, 65535] { R2053 += 1 };
  s1 -> s1 [0, 64] { R2053 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2053 += 1 };
  s2 -> s1 [0, 64] { R2053 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2053 += 1 };
  s2 -> s3 [111, 111] { R2053 += 1 };
  s2 -> s1 [112, 65535] { R2053 += 1 };
  s3 -> s1 [0, 64] { R2053 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2053 += 1 };
  s3 -> s4 [99, 99] { R2053 += 1 };
  s3 -> s1 [100, 65535] { R2053 += 1 };
  s4 -> s1 [0, 64] { R2053 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2053 += 1 };
  s4 -> s5 [97, 97] { R2053 += 1 };
  s4 -> s1 [98, 65535] { R2053 += 1 };
  s5 -> s1 [0, 64] { R2053 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2053 += 1 };
  s5 -> s6 [108, 108] { R2053 += 1 };
  s5 -> s1 [109, 65535] { R2053 += 1 };
  s6 -> s1 [0, 64] { R2053 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2053 += 1 };
  s6 -> s7 [104, 104] { R2053 += 1 };
  s6 -> s1 [105, 65535] { R2053 += 1 };
  s7 -> s1 [0, 64] { R2053 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2053 += 1 };
  s7 -> s8 [111, 111] { R2053 += 1 };
  s7 -> s1 [112, 65535] { R2053 += 1 };
  s8 -> s1 [0, 64] { R2053 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2053 += 1 };
  s8 -> s9 [115, 115] { R2053 += 1 };
  s8 -> s1 [116, 65535] { R2053 += 1 };
  s9 -> s1 [0, 64] { R2053 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2053 += 1 };
  s9 -> s10 [116, 116] { R2053 += 1 };
  s9 -> s1 [117, 65535] { R2053 += 1 };
  s10 -> s1 [0, 64] { R2053 += 1 };
  s10 -> s1 [91, 65535] { R2053 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2054 += 1, R2055 += 1 };
  s0 -> s1 [0, 65535] { R2055 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2055 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2057 += 1 };
  s0 -> s2 [0, 65535] { R2057 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R2056 += 1, R2057 += 1 };
  s0 -> s3 [58, 58] { R2057 += 1 };
  s0 -> s1 [59, 65535] { R2057 += 1 };
  s1 -> s1 [0, 57] { R2057 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2057 += 1 };
  s1 -> s1 [59, 65535] { R2057 += 1 };
  s2 -> s1 [0, 57] { R2057 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2057 += 1, R6 += 1 };
  s2 -> s3 [58, 58] { R2057 += 1 };
  s2 -> s1 [59, 65535] { R2057 += 1 };
  s3 -> s3 [0, 65535] { R2057 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2059 += 1, R2031 += 1 };
  s0 -> s2 [0, 65535] { R2059 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2058 += 1, R2059 += 1 };
  s0 -> s3 [91, 91] { R2059 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2059 += 1, R2031 += 1 };
  s1 -> s1 [0, 65535] { R2059 += 1, R2031 += 1 };
  s1 -> s5 [0, 65535] { R2059 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2059 += 1, R2031 += 1 };
  s2 -> s2 [0, 65535] { R2059 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2059 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2059 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2059 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2059 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R2061 += 1, R2033 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R2060 += 1, R2061 += 1 };
  s0 -> s2 [0, 65535] { R2061 += 1, R2032 += 1, R2033 += 1 };
  s1 -> s1 [0, 65535] { R2061 += 1, R2033 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R2061 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2061 += 1, R2033 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2061 += 1, R2032 += 1, R2033 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2061 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2079 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2078 += 1, R2079 += 1 };
  s0 -> s2 [0, 65535] { R2079 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [47, 47] { R2079 += 1 };
  s0 -> s1 [48, 65535] { R2079 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2079 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2079 += 1 };
  s1 -> s1 [48, 65535] { R2079 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2079 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2079 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2079 += 1 };
  s2 -> s1 [48, 65535] { R2079 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2079 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2080 += 1, R2081 += 1 };
  s0 -> s1 [0, 65535] { R2081 += 1, R2029 += 1 };
  s1 -> s1 [0, 65535] { R2081 += 1, R2029 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2082 += 1, R2083 += 1 };
  s0 -> s1 [0, 65535] { R2083 += 1, R2064 += 1, R2065 += 1 };
  s0 -> s2 [108, 108] { R2083 += 1, R2065 += 1 };
  s1 -> s1 [0, 65535] { R2083 += 1, R2064 += 1, R2065 += 1 };
  s1 -> s2 [108, 108] { R2083 += 1, R2065 += 1 };
  s2 -> s3 [111, 111] { R2083 += 1, R2065 += 1 };
  s3 -> s4 [99, 99] { R2083 += 1, R2065 += 1 };
  s4 -> s5 [97, 97] { R2083 += 1, R2065 += 1 };
  s5 -> s6 [108, 108] { R2083 += 1, R2065 += 1 };
  s6 -> s7 [104, 104] { R2083 += 1, R2065 += 1 };
  s7 -> s8 [111, 111] { R2083 += 1, R2065 += 1 };
  s8 -> s9 [115, 115] { R2083 += 1, R2065 += 1 };
  s9 -> s10 [116, 116] { R2083 += 1, R2065 += 1 };
  s10 -> s10 [0, 65535] { R2083 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2084 += 1, R2085 += 1 };
  s0 -> s1 [0, 65535] { R2085 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s2 [0, 65535] { R2085 += 1, R2067 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2085 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s2 [0, 65535] { R2085 += 1, R2067 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2085 += 1, R2067 += 1, R2 += 1 };
  s2 -> s4 [0, 65535] { R2085 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2085 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2087 += 1, R2069 += 1 };
  s0 -> s2 [0, 65535] { R2087 += 1, R2069 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2086 += 1, R2087 += 1 };
  s0 -> s3 [0, 65535] { R2087 += 1, R2068 += 1, R2069 += 1 };
  s0 -> s4 [90, 90] { R2087 += 1, R2069 += 1 };
  s0 -> s1 [91, 65535] { R2087 += 1, R2069 += 1 };
  s1 -> s1 [0, 89] { R2087 += 1, R2069 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2087 += 1 };
  s1 -> s4 [90, 90] { R2087 += 1, R2069 += 1 };
  s1 -> s1 [91, 65535] { R2087 += 1, R2069 += 1 };
  s2 -> s1 [0, 89] { R2087 += 1, R2069 += 1 };
  s2 -> s2 [0, 65535] { R2087 += 1, R2069 += 1, R8 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2087 += 1 };
  s2 -> s4 [90, 90] { R2087 += 1, R2069 += 1 };
  s2 -> s1 [91, 65535] { R2087 += 1, R2069 += 1 };
  s3 -> s1 [0, 89] { R2087 += 1, R2069 += 1 };
  s3 -> s2 [0, 65535] { R2087 += 1, R2069 += 1, R8 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2087 += 1, R2068 += 1, R2069 += 1 };
  s3 -> s4 [90, 90] { R2087 += 1, R2069 += 1 };
  s3 -> s1 [91, 65535] { R2087 += 1, R2069 += 1 };
  s4 -> s4 [0, 65535] { R2087 += 1, R2069 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2087 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2089 += 1, R2071 += 1, R2039 += 1, R2027 += 1 };
  s0 -> s2 [0, 65535] { R2089 += 1, R2070 += 1, R2071 += 1 };
  s0 -> s0 [0, 65535] { R2088 += 1, R2089 += 1 };
  s0 -> s3 [0, 65535] { R2089 += 1, R2071 += 1, R2038 += 1, R2039 += 1 };
  s1 -> s4 [0, 65535] { R2089 += 1 };
  s1 -> s1 [0, 65535] { R2089 += 1, R2071 += 1, R2039 += 1, R2027 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2089 += 1, R2071 += 1 };
  s2 -> s1 [0, 65535] { R2089 += 1, R2071 += 1, R2039 += 1, R2027 += 1 };
  s2 -> s2 [0, 65535] { R2089 += 1, R2070 += 1, R2071 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2089 += 1, R2071 += 1, R2038 += 1, R2039 += 1 };
  s3 -> s4 [0, 65535] { R2089 += 1 };
  s3 -> s1 [0, 65535] { R2089 += 1, R2071 += 1, R2039 += 1, R2027 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2089 += 1, R2071 += 1, R2038 += 1, R2039 += 1 };
  s4 -> s4 [0, 65535] { R2089 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2089 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2089 += 1, R2071 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 107] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s0 -> s2 [0, 65535] { R2091 += 1, R2073 += 1, R2040 += 1, R2041 += 1 };
  s0 -> s0 [0, 65535] { R2090 += 1, R2091 += 1 };
  s0 -> s3 [0, 65535] { R2091 += 1, R2072 += 1, R2073 += 1 };
  s0 -> s4 [108, 108] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s0 -> s1 [109, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s1 -> s1 [0, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s1 -> s5 [0, 65535] { R2091 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s15 [0, 65535] { R2091 += 1, R2073 += 1 };
  s2 -> s1 [0, 107] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s2 -> s5 [0, 65535] { R2091 += 1 };
  s2 -> s2 [0, 65535] { R2091 += 1, R2073 += 1, R2040 += 1, R2041 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [108, 108] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s2 -> s1 [109, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s3 -> s1 [0, 107] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s3 -> s2 [0, 65535] { R2091 += 1, R2073 += 1, R2040 += 1, R2041 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2091 += 1, R2072 += 1, R2073 += 1 };
  s3 -> s4 [108, 108] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s3 -> s1 [109, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s4 -> s1 [0, 110] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s4 -> s5 [0, 65535] { R2091 += 1 };
  s4 -> s4 [0, 65535] { R2091 += 1, R2073 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [111, 111] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s4 -> s1 [112, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s5 -> s5 [0, 65535] { R2091 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s7 -> s5 [0, 65535] { R2091 += 1 };
  s7 -> s7 [0, 65535] { R2091 += 1, R2073 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [99, 99] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s7 -> s1 [100, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s8 -> s1 [0, 96] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s8 -> s5 [0, 65535] { R2091 += 1 };
  s8 -> s8 [0, 65535] { R2091 += 1, R2073 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [97, 97] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s8 -> s1 [98, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s9 -> s1 [0, 107] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s9 -> s5 [0, 65535] { R2091 += 1 };
  s9 -> s9 [0, 65535] { R2091 += 1, R2073 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s10 [108, 108] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s9 -> s1 [109, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s10 -> s1 [0, 103] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s10 -> s5 [0, 65535] { R2091 += 1 };
  s10 -> s10 [0, 65535] { R2091 += 1, R2073 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s11 [104, 104] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s10 -> s1 [105, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s11 -> s1 [0, 110] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s11 -> s5 [0, 65535] { R2091 += 1 };
  s11 -> s11 [0, 65535] { R2091 += 1, R2073 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s12 [111, 111] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s11 -> s1 [112, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s12 -> s1 [0, 114] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s12 -> s5 [0, 65535] { R2091 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R2091 += 1, R2073 += 1 };
  s12 -> s13 [115, 115] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s12 -> s1 [116, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s13 -> s1 [0, 115] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s13 -> s13 [0, 65535] { R2091 += 1, R2073 += 1 };
  s13 -> s5 [0, 65535] { R2091 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s14 [116, 116] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s13 -> s1 [117, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s14 -> s1 [0, 65535] { R2091 += 1, R2073 += 1, R2041 += 1 };
  s15 -> s5 [0, 65535] { R2091 += 1 };
  s15 -> s6 [0, 65535];
  s15 -> s15 [0, 65535] { R2091 += 1, R2073 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R2092 += 1, R2093 += 1 };
  s0 -> s1 [0, 65535] { R2093 += 1, R2075 += 1, R2063 += 1, R2028 += 1 };
  s0 -> s2 [0, 65535] { R2093 += 1, R2074 += 1, R2075 += 1 };
  s0 -> s3 [0, 65535] { R2093 += 1, R2075 += 1, R2062 += 1, R2063 += 1 };
  s1 -> s4 [0, 65535] { R2093 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2093 += 1, R2075 += 1 };
  s1 -> s1 [0, 65535] { R2093 += 1, R2075 += 1, R2063 += 1, R2028 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2093 += 1, R2075 += 1, R2063 += 1, R2028 += 1 };
  s2 -> s2 [0, 65535] { R2093 += 1, R2074 += 1, R2075 += 1 };
  s2 -> s3 [0, 65535] { R2093 += 1, R2075 += 1, R2062 += 1, R2063 += 1 };
  s3 -> s4 [0, 65535] { R2093 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R2093 += 1, R2075 += 1, R2063 += 1, R2028 += 1 };
  s3 -> s3 [0, 65535] { R2093 += 1, R2075 += 1, R2062 += 1, R2063 += 1 };
  s4 -> s4 [0, 65535] { R2093 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2093 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2093 += 1, R2075 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2095 += 1, R2076 += 1, R2077 += 1 };
  s0 -> s0 [0, 65535] { R2094 += 1, R2095 += 1 };
  s0 -> s2 [0, 65535] { R2095 += 1, R2077 += 1 };
  s1 -> s1 [0, 65535] { R2095 += 1, R2076 += 1, R2077 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2095 += 1, R2077 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2095 += 1 };
  s2 -> s2 [0, 65535] { R2095 += 1, R2077 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2095 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2083 && R12 = 0 && R1356 = 0 && R1357 = R2061 && R2042 - R2061 = 1 && R2043 = R2083 && R2044 - R2061 = 1 && R2045 = R2083 && R2046 - R2061 = 1 && R2047 = R2083 && R2048 - R2061 = 1 && R2049 = R2083 && R2050 - R2061 = 1 && R2051 = R2083 && R2052 = 0 && R2053 = R2061 && R2054 = 0 && R2055 = R2061 && R2056 = 0 && R2057 = R2061 && R2058 = 0 && R2059 = R2061 && R2060 = 0 && R2064 = 0 && R2078 = 10 && R2079 = R2083 && R2082 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2065 - R13 < 1 && -1 < R13 && R2065 - R2029 < 1 && R2061 < R2083 && -1 < R2061 && 9 < R2083 && (R2 != 0 || R2027 = 0 || (R2038 = 0 && R2039 = 0)) && (R2 != 0 || R2027 = 0 || (R2040 = 0 && R2041 = 0)) && (R2029 != 0 || ((R2083 != R2095 || ((R2084 != 10 || ((R2085 != R2095 || ((R2086 != 10 || ((R2087 != R2095 || ((R2088 != 10 || ((R2089 != R2095 || ((R2090 != 10 || ((R2091 != R2095 || ((R2092 != 10 || ((R2093 != R2095 || R2094 = 10 || R2095 - R2061 < 1 || R2095 < 11) && (R2093 = R2095 || R2095 - R2061 < 1 || R2095 < 11))) && (R2092 = 10 || R2095 - R2061 < 1 || R2095 < 11))) && (R2091 = R2095 || R2095 - R2061 < 1 || R2095 < 11))) && (R2090 = 10 || R2095 - R2061 < 1 || R2095 < 11))) && (R2089 = R2095 || R2095 - R2061 < 1 || R2095 < 11))) && (R2088 = 10 || R2095 - R2061 < 1 || R2095 < 11))) && (R2087 = R2095 || R2095 - R2061 < 1 || R2095 < 11))) && (R2086 = 10 || R2095 - R2061 < 1 || R2095 < 11))) && (R2085 = R2095 || R2095 - R2061 < 1 || R2095 < 11))) && (R2084 = 10 || R2095 - R2061 < 1 || R2095 < 11))) && (R2083 = R2095 || R2083 < 11))) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2038 != 0 || R2 = R2039 || R2 < 1) && (R2040 != 0 || R2 = R2041 || R2 < 1) && (R2066 != 0 || ((R2 != 0 || ((R13 != R2067 || R2067 - R2029 < 1 || R2029 < 1) && (R2029 != R2067 || R2067 - R13 < 1 || R13 < 1) && (R13 = R2067 || R2029 = R2067 || R13 < 1 || R2029 < 1))) && (R13 != R2067 || R2 < 1 || R2067 - R2029 < 1 || R2067 < 0) && (R2029 != R2067 || R2 < 1 || R2067 - R13 < 1) && (R13 = R2067 || R2029 = R2067 || R2 < 1))) && (R2068 != 0 || ((R2 != 0 || ((R13 != R2069 || R2069 - R2029 < 1 || R2029 < 1) && (R2029 != R2069 || R2069 - R13 < 1 || R13 < 1) && (R13 = R2069 || R2029 = R2069 || R13 < 1 || R2029 < 1))) && (R13 != R2069 || R2 < 1 || R2069 - R2029 < 1 || R2069 < 0) && (R2029 != R2069 || R2 < 1 || R2069 - R13 < 1) && (R13 = R2069 || R2029 = R2069 || R2 < 1))) && (R2070 != 0 || ((R2 != 0 || ((R13 != R2071 || R2071 - R2029 < 1 || R2029 < 1) && (R2029 != R2071 || R2071 - R13 < 1 || R13 < 1) && (R13 = R2071 || R2029 = R2071 || R13 < 1 || R2029 < 1))) && (R13 != R2071 || R2 < 1 || R2071 - R2029 < 1 || R2071 < 0) && (R2029 != R2071 || R2 < 1 || R2071 - R13 < 1) && (R13 = R2071 || R2029 = R2071 || R2 < 1))) && (R2072 != 0 || ((R2 != 0 || ((R13 != R2073 || R2073 - R2029 < 1 || R2029 < 1) && (R2029 != R2073 || R2073 - R13 < 1 || R13 < 1) && (R13 = R2073 || R2029 = R2073 || R13 < 1 || R2029 < 1))) && (R13 != R2073 || R2 < 1 || R2073 - R2029 < 1 || R2073 < 0) && (R2029 != R2073 || R2 < 1 || R2073 - R13 < 1) && (R13 = R2073 || R2029 = R2073 || R2 < 1))) && (R2074 != 0 || ((R2 != 0 || ((R13 != R2075 || R2075 - R2029 < 1 || R2029 < 1) && (R2029 != R2075 || R2075 - R13 < 1 || R13 < 1) && (R13 = R2075 || R2029 = R2075 || R13 < 1 || R2029 < 1))) && (R13 != R2075 || R2 < 1 || R2075 - R2029 < 1 || R2075 < 0) && (R2029 != R2075 || R2 < 1 || R2075 - R13 < 1) && (R13 = R2075 || R2029 = R2075 || R2 < 1))) && (R2076 != 0 || ((R2 != 0 || ((R13 != R2077 || R2077 - R2029 < 1 || R2029 < 1) && (R2029 != R2077 || R2077 - R13 < 1 || R13 < 1) && (R13 = R2077 || R2029 = R2077 || R13 < 1 || R2029 < 1))) && (R13 != R2077 || R2 < 1 || R2077 - R2029 < 1 || R2077 < 0) && (R2029 != R2077 || R2 < 1 || R2077 - R13 < 1) && (R13 = R2077 || R2029 = R2077 || R2 < 1))) && (R2080 != 10 || R2081 = R2083 || (R2029 = 0 && R2083 = 10)) && (R2028 = 0 || (R2062 = 0 && R2063 = 0)) && (R2029 = 0 || (R2083 = R2095 && (R2084 != 10 || ((R2085 != R2095 || ((R2086 != 10 || ((R2087 != R2095 || ((R2088 != 10 || ((R2089 != R2095 || ((R2090 != 10 || ((R2091 != R2095 || ((R2092 != 10 || ((R2093 != R2095 || R2094 = 10 || R2095 - R2061 < 1 || R2095 < 10) && (R2093 = R2095 || R2095 - R2061 < 1 || R2095 < 10))) && (R2092 = 10 || R2095 - R2061 < 1 || R2095 < 10))) && (R2091 = R2095 || R2095 - R2061 < 1 || R2095 < 10))) && (R2090 = 10 || R2095 - R2061 < 1 || R2095 < 10))) && (R2089 = R2095 || R2095 - R2061 < 1 || R2095 < 10))) && (R2088 = 10 || R2095 - R2061 < 1 || R2095 < 10))) && (R2087 = R2095 || R2095 - R2061 < 1 || R2095 < 10))) && (R2086 = 10 || R2095 - R2061 < 1 || R2095 < 10))) && (R2085 = R2095 || R2095 - R2061 < 1 || R2095 < 10))) && (R2084 = 10 || R2095 - R2061 < 1 || R2095 < 10))) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2038 = 0 || R2 < 1) && (R2040 = 0 || R2 < 1) && (R2066 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2068 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2070 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2072 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2074 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2076 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2080 = 10 || (R2029 = 0 && R2083 = 10)) && (R13 - R2065 < 1 || R2029 - R2065 < 1);
// End of Parikh automata intersection problem
