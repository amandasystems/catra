// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2396, R2397, R2398, R2399, R2400, R2401, R2402, R2403, R2404, R2405, R2406, R2407, R2408, R2409, R2410, R2411, R2412, R2413, R2414, R2415, R2416, R2417, R2418, R2419, R2420, R2421, R2422, R2423, R2424, R2425, R2426, R2427, R2428, R2429, R2430, R2431, R2432, R2433, R2434, R2435, R2436, R2437, R2438, R2439, R2440, R2441, R2442, R2443, R2444, R2445, R2446, R2447, R2448, R2449, R2450, R2451, R2452, R2453, R2454, R2455, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2401 += 1 };
  s0 -> s0 [0, 65535] { R2400 += 1, R2401 += 1 };
  s0 -> s1 [45, 64] { R2401 += 1 };
  s0 -> s1 [91, 107] { R2401 += 1 };
  s0 -> s2 [108, 108] { R2401 += 1 };
  s0 -> s1 [109, 65535] { R2401 += 1 };
  s1 -> s1 [0, 43] { R2401 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2401 += 1 };
  s1 -> s1 [91, 65535] { R2401 += 1 };
  s2 -> s1 [0, 43] { R2401 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2401 += 1 };
  s2 -> s1 [91, 110] { R2401 += 1 };
  s2 -> s3 [111, 111] { R2401 += 1 };
  s2 -> s1 [112, 65535] { R2401 += 1 };
  s3 -> s1 [0, 43] { R2401 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2401 += 1 };
  s3 -> s1 [91, 98] { R2401 += 1 };
  s3 -> s4 [99, 99] { R2401 += 1 };
  s3 -> s1 [100, 65535] { R2401 += 1 };
  s4 -> s1 [0, 43] { R2401 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2401 += 1 };
  s4 -> s1 [91, 96] { R2401 += 1 };
  s4 -> s5 [97, 97] { R2401 += 1 };
  s4 -> s1 [98, 65535] { R2401 += 1 };
  s5 -> s1 [0, 43] { R2401 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2401 += 1 };
  s5 -> s1 [91, 107] { R2401 += 1 };
  s5 -> s6 [108, 108] { R2401 += 1 };
  s5 -> s1 [109, 65535] { R2401 += 1 };
  s6 -> s1 [0, 43] { R2401 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2401 += 1 };
  s6 -> s1 [91, 103] { R2401 += 1 };
  s6 -> s7 [104, 104] { R2401 += 1 };
  s6 -> s1 [105, 65535] { R2401 += 1 };
  s7 -> s1 [0, 43] { R2401 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2401 += 1 };
  s7 -> s1 [91, 110] { R2401 += 1 };
  s7 -> s8 [111, 111] { R2401 += 1 };
  s7 -> s1 [112, 65535] { R2401 += 1 };
  s8 -> s1 [0, 43] { R2401 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2401 += 1 };
  s8 -> s1 [91, 114] { R2401 += 1 };
  s8 -> s9 [115, 115] { R2401 += 1 };
  s8 -> s1 [116, 65535] { R2401 += 1 };
  s9 -> s1 [0, 43] { R2401 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2401 += 1 };
  s9 -> s1 [91, 115] { R2401 += 1 };
  s9 -> s10 [116, 116] { R2401 += 1 };
  s9 -> s1 [117, 65535] { R2401 += 1 };
  s10 -> s1 [0, 43] { R2401 += 1 };
  s10 -> s1 [45, 64] { R2401 += 1 };
  s10 -> s1 [91, 65535] { R2401 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R2403 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2402 += 1, R2403 += 1 };
  s1 -> s1 [0, 65535] { R2403 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2405 += 1 };
  s0 -> s0 [0, 65535] { R2404 += 1, R2405 += 1 };
  s0 -> s2 [0, 65535] { R2405 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R2405 += 1 };
  s0 -> s1 [59, 65535] { R2405 += 1 };
  s1 -> s1 [0, 57] { R2405 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2405 += 1 };
  s1 -> s1 [59, 65535] { R2405 += 1 };
  s2 -> s1 [0, 57] { R2405 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2405 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2405 += 1 };
  s2 -> s1 [59, 65535] { R2405 += 1 };
  s3 -> s3 [0, 65535] { R2405 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2407 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2406 += 1, R2407 += 1 };
  s0 -> s2 [0, 65535] { R2407 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s3 [91, 91] { R2407 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2407 += 1, R2035 += 1 };
  s1 -> s1 [0, 65535] { R2407 += 1, R2035 += 1 };
  s1 -> s5 [0, 65535] { R2407 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2407 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2407 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s3 [91, 91] { R2407 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2407 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2407 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2407 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2409 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s2 [0, 65535] { R2409 += 1, R2037 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2408 += 1, R2409 += 1 };
  s1 -> s1 [0, 65535] { R2409 += 1, R2036 += 1, R2037 += 1 };
  s1 -> s2 [0, 65535] { R2409 += 1, R2037 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2409 += 1, R2037 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2409 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2409 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2411 += 1 };
  s0 -> s0 [0, 65535] { R2410 += 1, R2411 += 1 };
  s0 -> s1 [91, 107] { R2411 += 1 };
  s0 -> s2 [108, 108] { R2411 += 1 };
  s0 -> s1 [109, 65535] { R2411 += 1 };
  s1 -> s1 [0, 64] { R2411 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2411 += 1 };
  s2 -> s1 [0, 64] { R2411 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2411 += 1 };
  s2 -> s3 [111, 111] { R2411 += 1 };
  s2 -> s1 [112, 65535] { R2411 += 1 };
  s3 -> s1 [0, 64] { R2411 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2411 += 1 };
  s3 -> s4 [99, 99] { R2411 += 1 };
  s3 -> s1 [100, 65535] { R2411 += 1 };
  s4 -> s1 [0, 64] { R2411 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2411 += 1 };
  s4 -> s5 [97, 97] { R2411 += 1 };
  s4 -> s1 [98, 65535] { R2411 += 1 };
  s5 -> s1 [0, 64] { R2411 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2411 += 1 };
  s5 -> s6 [108, 108] { R2411 += 1 };
  s5 -> s1 [109, 65535] { R2411 += 1 };
  s6 -> s1 [0, 64] { R2411 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2411 += 1 };
  s6 -> s7 [104, 104] { R2411 += 1 };
  s6 -> s1 [105, 65535] { R2411 += 1 };
  s7 -> s1 [0, 64] { R2411 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2411 += 1 };
  s7 -> s8 [111, 111] { R2411 += 1 };
  s7 -> s1 [112, 65535] { R2411 += 1 };
  s8 -> s1 [0, 64] { R2411 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2411 += 1 };
  s8 -> s9 [115, 115] { R2411 += 1 };
  s8 -> s1 [116, 65535] { R2411 += 1 };
  s9 -> s1 [0, 64] { R2411 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2411 += 1 };
  s9 -> s10 [116, 116] { R2411 += 1 };
  s9 -> s1 [117, 65535] { R2411 += 1 };
  s10 -> s1 [0, 64] { R2411 += 1 };
  s10 -> s1 [91, 65535] { R2411 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2413 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R2412 += 1, R2413 += 1 };
  s1 -> s1 [0, 65535] { R2413 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2415 += 1 };
  s0 -> s0 [0, 65535] { R2414 += 1, R2415 += 1 };
  s0 -> s2 [0, 65535] { R2415 += 1, R6 += 1 };
  s0 -> s3 [58, 58] { R2415 += 1 };
  s0 -> s1 [59, 65535] { R2415 += 1 };
  s1 -> s1 [0, 57] { R2415 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2415 += 1 };
  s1 -> s1 [59, 65535] { R2415 += 1 };
  s2 -> s1 [0, 57] { R2415 += 1 };
  s2 -> s2 [0, 65535] { R2415 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2415 += 1 };
  s2 -> s1 [59, 65535] { R2415 += 1 };
  s3 -> s3 [0, 65535] { R2415 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2417 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2416 += 1, R2417 += 1 };
  s0 -> s2 [0, 65535] { R2417 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s3 [91, 91] { R2417 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2417 += 1, R2031 += 1 };
  s1 -> s1 [0, 65535] { R2417 += 1, R2031 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2417 += 1 };
  s2 -> s1 [0, 90] { R2417 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2417 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s3 [91, 91] { R2417 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2417 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2417 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2417 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R2419 += 1, R2032 += 1, R2033 += 1 };
  s0 -> s0 [0, 65535] { R2418 += 1, R2419 += 1 };
  s0 -> s2 [0, 65535] { R2419 += 1, R2033 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R2419 += 1, R2032 += 1, R2033 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2419 += 1, R2033 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R2419 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2419 += 1, R2033 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R2419 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2439 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2439 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2438 += 1, R2439 += 1 };
  s0 -> s3 [47, 47] { R2439 += 1 };
  s0 -> s1 [48, 65535] { R2439 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2439 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2439 += 1 };
  s1 -> s1 [48, 65535] { R2439 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2439 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2439 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2439 += 1 };
  s2 -> s1 [48, 65535] { R2439 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2439 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2441 += 1, R2029 += 1 };
  s0 -> s0 [0, 65535] { R2440 += 1, R2441 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2441 += 1, R2029 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2442 += 1, R2443 += 1 };
  s0 -> s1 [0, 65535] { R2443 += 1, R2424 += 1, R2425 += 1 };
  s0 -> s2 [108, 108] { R2443 += 1, R2425 += 1 };
  s1 -> s1 [0, 65535] { R2443 += 1, R2424 += 1, R2425 += 1 };
  s1 -> s2 [108, 108] { R2443 += 1, R2425 += 1 };
  s2 -> s3 [111, 111] { R2443 += 1, R2425 += 1 };
  s3 -> s4 [99, 99] { R2443 += 1, R2425 += 1 };
  s4 -> s5 [97, 97] { R2443 += 1, R2425 += 1 };
  s5 -> s6 [108, 108] { R2443 += 1, R2425 += 1 };
  s6 -> s7 [104, 104] { R2443 += 1, R2425 += 1 };
  s7 -> s8 [111, 111] { R2443 += 1, R2425 += 1 };
  s8 -> s9 [115, 115] { R2443 += 1, R2425 += 1 };
  s9 -> s10 [116, 116] { R2443 += 1, R2425 += 1 };
  s10 -> s10 [0, 65535] { R2443 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2445 += 1, R2426 += 1, R2427 += 1 };
  s0 -> s0 [0, 65535] { R2444 += 1, R2445 += 1 };
  s0 -> s2 [0, 65535] { R2445 += 1, R2427 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R2445 += 1, R2426 += 1, R2427 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2445 += 1, R2427 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2445 += 1, R2427 += 1, R2 += 1 };
  s2 -> s4 [0, 65535] { R2445 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2445 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2447 += 1, R2429 += 1 };
  s0 -> s0 [0, 65535] { R2446 += 1, R2447 += 1 };
  s0 -> s2 [0, 65535] { R2447 += 1, R2429 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R2447 += 1, R2428 += 1, R2429 += 1 };
  s0 -> s4 [90, 90] { R2447 += 1, R2429 += 1 };
  s0 -> s1 [91, 65535] { R2447 += 1, R2429 += 1 };
  s1 -> s1 [0, 89] { R2447 += 1, R2429 += 1 };
  s1 -> s1 [0, 65535] { R2447 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [90, 90] { R2447 += 1, R2429 += 1 };
  s1 -> s1 [91, 65535] { R2447 += 1, R2429 += 1 };
  s2 -> s1 [0, 89] { R2447 += 1, R2429 += 1 };
  s2 -> s2 [0, 65535] { R2447 += 1, R2429 += 1, R8 += 1 };
  s2 -> s6 [0, 65535] { R2447 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [90, 90] { R2447 += 1, R2429 += 1 };
  s2 -> s1 [91, 65535] { R2447 += 1, R2429 += 1 };
  s3 -> s1 [0, 89] { R2447 += 1, R2429 += 1 };
  s3 -> s2 [0, 65535] { R2447 += 1, R2429 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R2447 += 1, R2428 += 1, R2429 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [90, 90] { R2447 += 1, R2429 += 1 };
  s3 -> s1 [91, 65535] { R2447 += 1, R2429 += 1 };
  s4 -> s4 [0, 65535] { R2447 += 1, R2429 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2447 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2449 += 1, R2431 += 1, R2397 += 1, R2027 += 1 };
  s0 -> s2 [0, 65535] { R2449 += 1, R2431 += 1, R2396 += 1, R2397 += 1 };
  s0 -> s0 [0, 65535] { R2448 += 1, R2449 += 1 };
  s0 -> s3 [0, 65535] { R2449 += 1, R2430 += 1, R2431 += 1 };
  s1 -> s1 [0, 65535] { R2449 += 1, R2431 += 1, R2397 += 1, R2027 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2449 += 1 };
  s1 -> s6 [0, 65535] { R2449 += 1, R2431 += 1 };
  s2 -> s1 [0, 65535] { R2449 += 1, R2431 += 1, R2397 += 1, R2027 += 1 };
  s2 -> s2 [0, 65535] { R2449 += 1, R2431 += 1, R2396 += 1, R2397 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2449 += 1 };
  s3 -> s1 [0, 65535] { R2449 += 1, R2431 += 1, R2397 += 1, R2027 += 1 };
  s3 -> s2 [0, 65535] { R2449 += 1, R2431 += 1, R2396 += 1, R2397 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2449 += 1, R2430 += 1, R2431 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2449 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2449 += 1 };
  s6 -> s6 [0, 65535] { R2449 += 1, R2431 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 103] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s0 -> s2 [0, 65535] { R2451 += 1, R2433 += 1, R2398 += 1, R2399 += 1 };
  s0 -> s3 [0, 65535] { R2451 += 1, R2432 += 1, R2433 += 1 };
  s0 -> s0 [0, 65535] { R2450 += 1, R2451 += 1 };
  s0 -> s4 [104, 104] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s0 -> s1 [105, 65535] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s1 -> s10 [0, 65535] { R2451 += 1, R2433 += 1 };
  s1 -> s5 [0, 65535] { R2451 += 1 };
  s1 -> s1 [0, 65535] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 103] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s2 -> s5 [0, 65535] { R2451 += 1 };
  s2 -> s2 [0, 65535] { R2451 += 1, R2433 += 1, R2398 += 1, R2399 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [104, 104] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s2 -> s1 [105, 65535] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s3 -> s1 [0, 103] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s3 -> s2 [0, 65535] { R2451 += 1, R2433 += 1, R2398 += 1, R2399 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2451 += 1, R2432 += 1, R2433 += 1 };
  s3 -> s4 [104, 104] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s3 -> s1 [105, 65535] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s4 -> s1 [0, 110] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s4 -> s5 [0, 65535] { R2451 += 1 };
  s4 -> s4 [0, 65535] { R2451 += 1, R2433 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [111, 111] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s4 -> s1 [112, 65535] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s5 -> s5 [0, 65535] { R2451 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 114] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s7 -> s5 [0, 65535] { R2451 += 1 };
  s7 -> s7 [0, 65535] { R2451 += 1, R2433 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [115, 115] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s7 -> s1 [116, 65535] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s8 -> s1 [0, 115] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s8 -> s5 [0, 65535] { R2451 += 1 };
  s8 -> s8 [0, 65535] { R2451 += 1, R2433 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [116, 116] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s8 -> s1 [117, 65535] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s9 -> s1 [0, 65535] { R2451 += 1, R2433 += 1, R2399 += 1 };
  s10 -> s10 [0, 65535] { R2451 += 1, R2433 += 1 };
  s10 -> s5 [0, 65535] { R2451 += 1 };
  s10 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0, s10;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R2452 += 1, R2453 += 1 };
  s0 -> s1 [0, 65535] { R2453 += 1, R2435 += 1, R2420 += 1, R2421 += 1 };
  s0 -> s2 [0, 65535] { R2453 += 1, R2435 += 1, R2421 += 1, R2028 += 1 };
  s0 -> s3 [0, 65535] { R2453 += 1, R2434 += 1, R2435 += 1 };
  s1 -> s5 [0, 65535] { R2453 += 1 };
  s1 -> s1 [0, 65535] { R2453 += 1, R2435 += 1, R2420 += 1, R2421 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2453 += 1, R2435 += 1, R2421 += 1, R2028 += 1 };
  s2 -> s5 [0, 65535] { R2453 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2453 += 1, R2435 += 1, R2421 += 1, R2028 += 1 };
  s2 -> s6 [0, 65535] { R2453 += 1, R2435 += 1 };
  s3 -> s1 [0, 65535] { R2453 += 1, R2435 += 1, R2420 += 1, R2421 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2453 += 1, R2435 += 1, R2421 += 1, R2028 += 1 };
  s3 -> s3 [0, 65535] { R2453 += 1, R2434 += 1, R2435 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2453 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2453 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2453 += 1, R2435 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2455 += 1, R2436 += 1, R2437 += 1 };
  s0 -> s2 [0, 65535] { R2455 += 1, R2437 += 1, R2422 += 1, R2423 += 1 };
  s0 -> s0 [0, 65535] { R2454 += 1, R2455 += 1 };
  s0 -> s3 [108, 108] { R2455 += 1, R2437 += 1, R2423 += 1 };
  s1 -> s1 [0, 65535] { R2455 += 1, R2436 += 1, R2437 += 1 };
  s1 -> s2 [0, 65535] { R2455 += 1, R2437 += 1, R2422 += 1, R2423 += 1 };
  s1 -> s3 [108, 108] { R2455 += 1, R2437 += 1, R2423 += 1 };
  s2 -> s2 [0, 65535] { R2455 += 1, R2437 += 1, R2422 += 1, R2423 += 1 };
  s2 -> s3 [108, 108] { R2455 += 1, R2437 += 1, R2423 += 1 };
  s3 -> s4 [111, 111] { R2455 += 1, R2437 += 1, R2423 += 1 };
  s4 -> s5 [99, 99] { R2455 += 1, R2437 += 1, R2423 += 1 };
  s5 -> s6 [97, 97] { R2455 += 1, R2437 += 1, R2423 += 1 };
  s6 -> s7 [108, 108] { R2455 += 1, R2437 += 1, R2423 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2455 += 1, R2437 += 1 };
  s7 -> s9 [0, 65535] { R2455 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2455 += 1 };
  accepting s7, s8, s9;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2455 && R12 = 0 && R1356 = 0 && R1357 = R2419 && R2400 - R2419 = 1 && R2401 = R2455 && R2402 - R2419 = 1 && R2403 = R2455 && R2404 - R2419 = 1 && R2405 = R2455 && R2406 - R2419 = 1 && R2407 = R2455 && R2408 - R2419 = 1 && R2409 = R2455 && R2410 = 0 && R2411 = R2419 && R2412 = 0 && R2413 = R2419 && R2414 = 0 && R2415 = R2419 && R2416 = 0 && R2417 = R2419 && R2418 = 0 && R2422 = 0 && R2423 = 0 && R2424 = 0 && R2436 = 0 && R2438 = 10 && R2439 = R2455 && R2442 = 10 && R2443 = R2455 && R2454 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2425 - R13 < 1 && R2437 - R13 < 1 && -1 < R13 && R2425 - R2029 < 1 && R2437 - R2029 < 1 && R2419 < R2455 && -1 < R2419 && 9 < R2455 && (R2 != 0 || R2027 = 0 || (R2396 = 0 && R2397 = 0)) && (R2 != 0 || R2027 = 0 || (R2398 = 0 && R2399 = 0)) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2396 != 0 || R2 = R2397 || R2 < 1) && (R2398 != 0 || R2 = R2399 || R2 < 1) && (R2426 != 0 || ((R2 != 0 || ((R13 != R2427 || R2427 - R2029 < 1 || R2029 < 1) && (R2029 != R2427 || R2427 - R13 < 1 || R13 < 1) && (R13 = R2427 || R2029 = R2427 || R13 < 1 || R2029 < 1))) && (R13 != R2427 || R2 < 1 || R2427 - R2029 < 1 || R2427 < 0) && (R2029 != R2427 || R2 < 1 || R2427 - R13 < 1) && (R13 = R2427 || R2029 = R2427 || R2 < 1))) && (R2428 != 0 || ((R2 != 0 || ((R13 != R2429 || R2429 - R2029 < 1 || R2029 < 1) && (R2029 != R2429 || R2429 - R13 < 1 || R13 < 1) && (R13 = R2429 || R2029 = R2429 || R13 < 1 || R2029 < 1))) && (R13 != R2429 || R2 < 1 || R2429 - R2029 < 1 || R2429 < 0) && (R2029 != R2429 || R2 < 1 || R2429 - R13 < 1) && (R13 = R2429 || R2029 = R2429 || R2 < 1))) && (R2430 != 0 || ((R2 != 0 || ((R13 != R2431 || R2431 - R2029 < 1 || R2029 < 1) && (R2029 != R2431 || R2431 - R13 < 1 || R13 < 1) && (R13 = R2431 || R2029 = R2431 || R13 < 1 || R2029 < 1))) && (R13 != R2431 || R2 < 1 || R2431 - R2029 < 1 || R2431 < 0) && (R2029 != R2431 || R2 < 1 || R2431 - R13 < 1) && (R13 = R2431 || R2029 = R2431 || R2 < 1))) && (R2432 != 0 || ((R2 != 0 || ((R13 != R2433 || R2433 - R2029 < 1 || R2029 < 1) && (R2029 != R2433 || R2433 - R13 < 1 || R13 < 1) && (R13 = R2433 || R2029 = R2433 || R13 < 1 || R2029 < 1))) && (R13 != R2433 || R2 < 1 || R2433 - R2029 < 1 || R2433 < 0) && (R2029 != R2433 || R2 < 1 || R2433 - R13 < 1) && (R13 = R2433 || R2029 = R2433 || R2 < 1))) && (R2434 != 0 || ((R2 != 0 || ((R13 != R2435 || R2435 - R2029 < 1 || R2029 < 1) && (R2029 != R2435 || R2435 - R13 < 1 || R13 < 1) && (R13 = R2435 || R2029 = R2435 || R13 < 1 || R2029 < 1))) && (R13 != R2435 || R2 < 1 || R2435 - R2029 < 1 || R2435 < 0) && (R2029 != R2435 || R2 < 1 || R2435 - R13 < 1) && (R13 = R2435 || R2029 = R2435 || R2 < 1))) && (R2440 != 10 || R2441 = R2455 || (R2029 = 0 && R2455 = 10)) && (R2444 != 10 || R2445 = R2455 || (R2029 = 0 && R2455 = 10)) && (R2446 != 10 || R2447 = R2455 || (R2029 = 0 && R2455 = 10)) && (R2448 != 10 || R2449 = R2455 || (R2029 = 0 && R2455 = 10)) && (R2450 != 10 || R2451 = R2455 || (R2029 = 0 && R2455 = 10)) && (R2452 != 10 || R2453 = R2455 || (R2029 = 0 && R2455 = 10)) && (R2028 = 0 || (R2420 = 0 && R2421 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2396 = 0 || R2 < 1) && (R2398 = 0 || R2 < 1) && (R2426 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2428 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2430 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2432 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2434 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2440 = 10 || (R2029 = 0 && R2455 = 10)) && (R2444 = 10 || (R2029 = 0 && R2455 = 10)) && (R2446 = 10 || (R2029 = 0 && R2455 = 10)) && (R2448 = 10 || (R2029 = 0 && R2455 = 10)) && (R2450 = 10 || (R2029 = 0 && R2455 = 10)) && (R2452 = 10 || (R2029 = 0 && R2455 = 10)) && (R13 - R2425 < 1 || R2029 - R2425 < 1) && (R13 - R2437 < 1 || R2029 - R2437 < 1);
// End of Parikh automata intersection problem
