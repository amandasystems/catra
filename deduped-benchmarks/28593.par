// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2336, R2337, R2338, R2339, R2340, R2341, R2342, R2343, R2344, R2345, R2346, R2347, R2348, R2349, R2350, R2351, R2352, R2353, R2354, R2355, R2356, R2357, R2358, R2359, R2360, R2361, R2362, R2363, R2364, R2365, R2366, R2367, R2368, R2369, R2370, R2371, R2372, R2373, R2374, R2375, R2376, R2377, R2378, R2379, R2380, R2381, R2382, R2383, R2384, R2385, R2386, R2387, R2388, R2389, R2390, R2391, R2392, R2393, R2394, R2395, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2341 += 1 };
  s0 -> s0 [0, 65535] { R2340 += 1, R2341 += 1 };
  s0 -> s1 [45, 64] { R2341 += 1 };
  s0 -> s1 [91, 107] { R2341 += 1 };
  s0 -> s2 [108, 108] { R2341 += 1 };
  s0 -> s1 [109, 65535] { R2341 += 1 };
  s1 -> s1 [0, 43] { R2341 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2341 += 1 };
  s1 -> s1 [91, 65535] { R2341 += 1 };
  s2 -> s1 [0, 43] { R2341 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2341 += 1 };
  s2 -> s1 [91, 110] { R2341 += 1 };
  s2 -> s3 [111, 111] { R2341 += 1 };
  s2 -> s1 [112, 65535] { R2341 += 1 };
  s3 -> s1 [0, 43] { R2341 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2341 += 1 };
  s3 -> s1 [91, 98] { R2341 += 1 };
  s3 -> s4 [99, 99] { R2341 += 1 };
  s3 -> s1 [100, 65535] { R2341 += 1 };
  s4 -> s1 [0, 43] { R2341 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2341 += 1 };
  s4 -> s1 [91, 96] { R2341 += 1 };
  s4 -> s5 [97, 97] { R2341 += 1 };
  s4 -> s1 [98, 65535] { R2341 += 1 };
  s5 -> s1 [0, 43] { R2341 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2341 += 1 };
  s5 -> s1 [91, 107] { R2341 += 1 };
  s5 -> s6 [108, 108] { R2341 += 1 };
  s5 -> s1 [109, 65535] { R2341 += 1 };
  s6 -> s1 [0, 43] { R2341 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2341 += 1 };
  s6 -> s1 [91, 103] { R2341 += 1 };
  s6 -> s7 [104, 104] { R2341 += 1 };
  s6 -> s1 [105, 65535] { R2341 += 1 };
  s7 -> s1 [0, 43] { R2341 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2341 += 1 };
  s7 -> s1 [91, 110] { R2341 += 1 };
  s7 -> s8 [111, 111] { R2341 += 1 };
  s7 -> s1 [112, 65535] { R2341 += 1 };
  s8 -> s1 [0, 43] { R2341 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2341 += 1 };
  s8 -> s1 [91, 114] { R2341 += 1 };
  s8 -> s9 [115, 115] { R2341 += 1 };
  s8 -> s1 [116, 65535] { R2341 += 1 };
  s9 -> s1 [0, 43] { R2341 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2341 += 1 };
  s9 -> s1 [91, 115] { R2341 += 1 };
  s9 -> s10 [116, 116] { R2341 += 1 };
  s9 -> s1 [117, 65535] { R2341 += 1 };
  s10 -> s1 [0, 43] { R2341 += 1 };
  s10 -> s1 [45, 64] { R2341 += 1 };
  s10 -> s1 [91, 65535] { R2341 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R2342 += 1, R2343 += 1 };
  s0 -> s1 [0, 65535] { R2343 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2343 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2345 += 1 };
  s0 -> s2 [0, 65535] { R2345 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2344 += 1, R2345 += 1 };
  s0 -> s3 [58, 58] { R2345 += 1 };
  s0 -> s1 [59, 65535] { R2345 += 1 };
  s1 -> s1 [0, 57] { R2345 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2345 += 1 };
  s1 -> s1 [59, 65535] { R2345 += 1 };
  s2 -> s1 [0, 57] { R2345 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2345 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2345 += 1 };
  s2 -> s1 [59, 65535] { R2345 += 1 };
  s3 -> s3 [0, 65535] { R2345 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2347 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2346 += 1, R2347 += 1 };
  s0 -> s2 [0, 65535] { R2347 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s3 [91, 91] { R2347 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2347 += 1, R2035 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2347 += 1 };
  s1 -> s1 [0, 65535] { R2347 += 1, R2035 += 1 };
  s2 -> s1 [0, 90] { R2347 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2347 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s3 [91, 91] { R2347 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2347 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2347 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2347 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2349 += 1, R2037 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R2349 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s0 [0, 65535] { R2348 += 1, R2349 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2349 += 1, R2037 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R2349 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2349 += 1, R2037 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R2349 += 1, R2036 += 1, R2037 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2349 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2351 += 1 };
  s0 -> s0 [0, 65535] { R2350 += 1, R2351 += 1 };
  s0 -> s1 [91, 107] { R2351 += 1 };
  s0 -> s2 [108, 108] { R2351 += 1 };
  s0 -> s1 [109, 65535] { R2351 += 1 };
  s1 -> s1 [0, 64] { R2351 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2351 += 1 };
  s2 -> s1 [0, 64] { R2351 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2351 += 1 };
  s2 -> s3 [111, 111] { R2351 += 1 };
  s2 -> s1 [112, 65535] { R2351 += 1 };
  s3 -> s1 [0, 64] { R2351 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2351 += 1 };
  s3 -> s4 [99, 99] { R2351 += 1 };
  s3 -> s1 [100, 65535] { R2351 += 1 };
  s4 -> s1 [0, 64] { R2351 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2351 += 1 };
  s4 -> s5 [97, 97] { R2351 += 1 };
  s4 -> s1 [98, 65535] { R2351 += 1 };
  s5 -> s1 [0, 64] { R2351 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2351 += 1 };
  s5 -> s6 [108, 108] { R2351 += 1 };
  s5 -> s1 [109, 65535] { R2351 += 1 };
  s6 -> s1 [0, 64] { R2351 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2351 += 1 };
  s6 -> s7 [104, 104] { R2351 += 1 };
  s6 -> s1 [105, 65535] { R2351 += 1 };
  s7 -> s1 [0, 64] { R2351 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2351 += 1 };
  s7 -> s8 [111, 111] { R2351 += 1 };
  s7 -> s1 [112, 65535] { R2351 += 1 };
  s8 -> s1 [0, 64] { R2351 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2351 += 1 };
  s8 -> s9 [115, 115] { R2351 += 1 };
  s8 -> s1 [116, 65535] { R2351 += 1 };
  s9 -> s1 [0, 64] { R2351 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2351 += 1 };
  s9 -> s10 [116, 116] { R2351 += 1 };
  s9 -> s1 [117, 65535] { R2351 += 1 };
  s10 -> s1 [0, 64] { R2351 += 1 };
  s10 -> s1 [91, 65535] { R2351 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2352 += 1, R2353 += 1 };
  s0 -> s1 [0, 65535] { R2353 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2353 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2355 += 1 };
  s0 -> s0 [0, 65535] { R2354 += 1, R2355 += 1 };
  s0 -> s2 [0, 65535] { R2355 += 1, R6 += 1 };
  s0 -> s3 [58, 58] { R2355 += 1 };
  s0 -> s1 [59, 65535] { R2355 += 1 };
  s1 -> s1 [0, 57] { R2355 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2355 += 1 };
  s1 -> s1 [59, 65535] { R2355 += 1 };
  s2 -> s1 [0, 57] { R2355 += 1 };
  s2 -> s2 [0, 65535] { R2355 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2355 += 1 };
  s2 -> s1 [59, 65535] { R2355 += 1 };
  s3 -> s3 [0, 65535] { R2355 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2357 += 1, R2031 += 1 };
  s0 -> s2 [0, 65535] { R2357 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2356 += 1, R2357 += 1 };
  s0 -> s3 [91, 91] { R2357 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2357 += 1, R2031 += 1 };
  s1 -> s1 [0, 65535] { R2357 += 1, R2031 += 1 };
  s1 -> s5 [0, 65535] { R2357 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2357 += 1, R2031 += 1 };
  s2 -> s2 [0, 65535] { R2357 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2357 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2357 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2357 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2357 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R2359 += 1, R2033 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R2358 += 1, R2359 += 1 };
  s0 -> s2 [0, 65535] { R2359 += 1, R2032 += 1, R2033 += 1 };
  s1 -> s1 [0, 65535] { R2359 += 1, R2033 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R2359 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2359 += 1, R2033 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2359 += 1, R2032 += 1, R2033 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2359 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2379 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2379 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2378 += 1, R2379 += 1 };
  s0 -> s3 [47, 47] { R2379 += 1 };
  s0 -> s1 [48, 65535] { R2379 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2379 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2379 += 1 };
  s1 -> s1 [48, 65535] { R2379 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2379 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2379 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2379 += 1 };
  s2 -> s1 [48, 65535] { R2379 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R2379 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2381 += 1, R2029 += 1 };
  s0 -> s0 [0, 65535] { R2380 += 1, R2381 += 1 };
  s1 -> s1 [0, 65535] { R2381 += 1, R2029 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2382 += 1, R2383 += 1 };
  s0 -> s1 [0, 65535] { R2383 += 1, R2364 += 1, R2365 += 1 };
  s0 -> s2 [108, 108] { R2383 += 1, R2365 += 1 };
  s1 -> s1 [0, 65535] { R2383 += 1, R2364 += 1, R2365 += 1 };
  s1 -> s2 [108, 108] { R2383 += 1, R2365 += 1 };
  s2 -> s3 [111, 111] { R2383 += 1, R2365 += 1 };
  s3 -> s4 [99, 99] { R2383 += 1, R2365 += 1 };
  s4 -> s5 [97, 97] { R2383 += 1, R2365 += 1 };
  s5 -> s6 [108, 108] { R2383 += 1, R2365 += 1 };
  s6 -> s7 [104, 104] { R2383 += 1, R2365 += 1 };
  s7 -> s8 [111, 111] { R2383 += 1, R2365 += 1 };
  s8 -> s9 [115, 115] { R2383 += 1, R2365 += 1 };
  s9 -> s10 [116, 116] { R2383 += 1, R2365 += 1 };
  s10 -> s10 [0, 65535] { R2383 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2385 += 1, R2367 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R2385 += 1, R2366 += 1, R2367 += 1 };
  s0 -> s0 [0, 65535] { R2384 += 1, R2385 += 1 };
  s1 -> s1 [0, 65535] { R2385 += 1, R2367 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2385 += 1 };
  s2 -> s1 [0, 65535] { R2385 += 1, R2367 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2385 += 1, R2366 += 1, R2367 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2385 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2387 += 1, R2369 += 1 };
  s0 -> s0 [0, 65535] { R2386 += 1, R2387 += 1 };
  s0 -> s2 [0, 65535] { R2387 += 1, R2368 += 1, R2369 += 1 };
  s0 -> s3 [0, 65535] { R2387 += 1, R2369 += 1, R8 += 1 };
  s0 -> s4 [90, 90] { R2387 += 1, R2369 += 1 };
  s0 -> s1 [91, 65535] { R2387 += 1, R2369 += 1 };
  s1 -> s1 [0, 89] { R2387 += 1, R2369 += 1 };
  s1 -> s1 [0, 65535] { R2387 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [90, 90] { R2387 += 1, R2369 += 1 };
  s1 -> s1 [91, 65535] { R2387 += 1, R2369 += 1 };
  s2 -> s1 [0, 89] { R2387 += 1, R2369 += 1 };
  s2 -> s2 [0, 65535] { R2387 += 1, R2368 += 1, R2369 += 1 };
  s2 -> s3 [0, 65535] { R2387 += 1, R2369 += 1, R8 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [90, 90] { R2387 += 1, R2369 += 1 };
  s2 -> s1 [91, 65535] { R2387 += 1, R2369 += 1 };
  s3 -> s1 [0, 89] { R2387 += 1, R2369 += 1 };
  s3 -> s3 [0, 65535] { R2387 += 1, R2369 += 1, R8 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2387 += 1 };
  s3 -> s4 [90, 90] { R2387 += 1, R2369 += 1 };
  s3 -> s1 [91, 65535] { R2387 += 1, R2369 += 1 };
  s4 -> s4 [0, 65535] { R2387 += 1, R2369 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2387 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2389 += 1, R2371 += 1, R2337 += 1, R2027 += 1 };
  s0 -> s2 [0, 65535] { R2389 += 1, R2371 += 1, R2336 += 1, R2337 += 1 };
  s0 -> s3 [0, 65535] { R2389 += 1, R2370 += 1, R2371 += 1 };
  s0 -> s0 [0, 65535] { R2388 += 1, R2389 += 1 };
  s1 -> s1 [0, 65535] { R2389 += 1, R2371 += 1, R2337 += 1, R2027 += 1 };
  s1 -> s5 [0, 65535] { R2389 += 1 };
  s1 -> s6 [0, 65535] { R2389 += 1, R2371 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2389 += 1, R2371 += 1, R2337 += 1, R2027 += 1 };
  s2 -> s5 [0, 65535] { R2389 += 1 };
  s2 -> s2 [0, 65535] { R2389 += 1, R2371 += 1, R2336 += 1, R2337 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2389 += 1, R2371 += 1, R2337 += 1, R2027 += 1 };
  s3 -> s2 [0, 65535] { R2389 += 1, R2371 += 1, R2336 += 1, R2337 += 1 };
  s3 -> s3 [0, 65535] { R2389 += 1, R2370 += 1, R2371 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2389 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2389 += 1 };
  s6 -> s6 [0, 65535] { R2389 += 1, R2371 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 107] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s0 -> s2 [0, 65535] { R2391 += 1, R2373 += 1, R2338 += 1, R2339 += 1 };
  s0 -> s0 [0, 65535] { R2390 += 1, R2391 += 1 };
  s0 -> s3 [0, 65535] { R2391 += 1, R2372 += 1, R2373 += 1 };
  s0 -> s4 [108, 108] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s0 -> s1 [109, 65535] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s1 -> s6 [0, 65535] { R2391 += 1 };
  s1 -> s11 [0, 65535] { R2391 += 1, R2373 += 1 };
  s2 -> s1 [0, 107] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2391 += 1 };
  s2 -> s2 [0, 65535] { R2391 += 1, R2373 += 1, R2338 += 1, R2339 += 1 };
  s2 -> s4 [108, 108] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s2 -> s1 [109, 65535] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s3 -> s1 [0, 107] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2391 += 1, R2373 += 1, R2338 += 1, R2339 += 1 };
  s3 -> s3 [0, 65535] { R2391 += 1, R2372 += 1, R2373 += 1 };
  s3 -> s4 [108, 108] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s3 -> s1 [109, 65535] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s4 -> s1 [0, 103] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2391 += 1 };
  s4 -> s4 [0, 65535] { R2391 += 1, R2373 += 1 };
  s4 -> s7 [104, 104] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s4 -> s1 [105, 65535] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2391 += 1 };
  s7 -> s1 [0, 110] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2391 += 1 };
  s7 -> s7 [0, 65535] { R2391 += 1, R2373 += 1 };
  s7 -> s8 [111, 111] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s7 -> s1 [112, 65535] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s8 -> s1 [0, 114] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R2391 += 1, R2373 += 1 };
  s8 -> s6 [0, 65535] { R2391 += 1 };
  s8 -> s9 [115, 115] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s8 -> s1 [116, 65535] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s9 -> s1 [0, 115] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R2391 += 1 };
  s9 -> s9 [0, 65535] { R2391 += 1, R2373 += 1 };
  s9 -> s10 [116, 116] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s9 -> s1 [117, 65535] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s10 -> s1 [0, 65535] { R2391 += 1, R2373 += 1, R2339 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R2391 += 1 };
  s11 -> s11 [0, 65535] { R2391 += 1, R2373 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2393 += 1, R2375 += 1, R2360 += 1, R2361 += 1 };
  s0 -> s2 [0, 65535] { R2393 += 1, R2375 += 1, R2361 += 1, R2028 += 1 };
  s0 -> s3 [0, 65535] { R2393 += 1, R2374 += 1, R2375 += 1 };
  s0 -> s0 [0, 65535] { R2392 += 1, R2393 += 1 };
  s1 -> s1 [0, 65535] { R2393 += 1, R2375 += 1, R2360 += 1, R2361 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2393 += 1, R2375 += 1, R2361 += 1, R2028 += 1 };
  s1 -> s5 [0, 65535] { R2393 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2393 += 1, R2375 += 1, R2361 += 1, R2028 += 1 };
  s2 -> s5 [0, 65535] { R2393 += 1 };
  s2 -> s6 [0, 65535] { R2393 += 1, R2375 += 1 };
  s3 -> s1 [0, 65535] { R2393 += 1, R2375 += 1, R2360 += 1, R2361 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2393 += 1, R2375 += 1, R2361 += 1, R2028 += 1 };
  s3 -> s3 [0, 65535] { R2393 += 1, R2374 += 1, R2375 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2393 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2393 += 1 };
  s6 -> s6 [0, 65535] { R2393 += 1, R2375 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2395 += 1, R2377 += 1, R2362 += 1, R2363 += 1 };
  s0 -> s0 [0, 65535] { R2394 += 1, R2395 += 1 };
  s0 -> s2 [0, 65535] { R2395 += 1, R2376 += 1, R2377 += 1 };
  s0 -> s3 [108, 108] { R2395 += 1, R2377 += 1, R2363 += 1 };
  s1 -> s1 [0, 65535] { R2395 += 1, R2377 += 1, R2362 += 1, R2363 += 1 };
  s1 -> s3 [108, 108] { R2395 += 1, R2377 += 1, R2363 += 1 };
  s2 -> s1 [0, 65535] { R2395 += 1, R2377 += 1, R2362 += 1, R2363 += 1 };
  s2 -> s2 [0, 65535] { R2395 += 1, R2376 += 1, R2377 += 1 };
  s2 -> s3 [108, 108] { R2395 += 1, R2377 += 1, R2363 += 1 };
  s3 -> s4 [111, 111] { R2395 += 1, R2377 += 1, R2363 += 1 };
  s4 -> s5 [99, 99] { R2395 += 1, R2377 += 1, R2363 += 1 };
  s5 -> s6 [97, 97] { R2395 += 1, R2377 += 1, R2363 += 1 };
  s6 -> s6 [0, 65535] { R2395 += 1, R2377 += 1 };
  s6 -> s7 [0, 65535] { R2395 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2395 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s6, s7, s8;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2395 && R12 = 0 && R1356 = 0 && R1357 = R2359 && R2340 - R2359 = 1 && R2341 = R2395 && R2342 - R2359 = 1 && R2343 = R2395 && R2344 - R2359 = 1 && R2345 = R2395 && R2346 - R2359 = 1 && R2347 = R2395 && R2348 - R2359 = 1 && R2349 = R2395 && R2350 = 0 && R2351 = R2359 && R2352 = 0 && R2353 = R2359 && R2354 = 0 && R2355 = R2359 && R2356 = 0 && R2357 = R2359 && R2358 = 0 && R2362 = 0 && R2363 = 0 && R2364 = 0 && R2376 = 0 && R2378 = 10 && R2379 = R2395 && R2382 = 10 && R2383 = R2395 && R2394 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2365 - R13 < 1 && R2377 - R13 < 1 && -1 < R13 && R2365 - R2029 < 1 && R2377 - R2029 < 1 && R2359 < R2395 && -1 < R2359 && 9 < R2395 && (R2 != 0 || R2027 = 0 || (R2336 = 0 && R2337 = 0)) && (R2 != 0 || R2027 = 0 || (R2338 = 0 && R2339 = 0)) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2336 != 0 || R2 = R2337 || R2 < 1) && (R2338 != 0 || R2 = R2339 || R2 < 1) && (R2366 != 0 || ((R2 != 0 || ((R13 != R2367 || R2367 - R2029 < 1 || R2029 < 1) && (R2029 != R2367 || R2367 - R13 < 1 || R13 < 1) && (R13 = R2367 || R2029 = R2367 || R13 < 1 || R2029 < 1))) && (R13 != R2367 || R2 < 1 || R2367 - R2029 < 1 || R2367 < 0) && (R2029 != R2367 || R2 < 1 || R2367 - R13 < 1) && (R13 = R2367 || R2029 = R2367 || R2 < 1))) && (R2368 != 0 || ((R2 != 0 || ((R13 != R2369 || R2369 - R2029 < 1 || R2029 < 1) && (R2029 != R2369 || R2369 - R13 < 1 || R13 < 1) && (R13 = R2369 || R2029 = R2369 || R13 < 1 || R2029 < 1))) && (R13 != R2369 || R2 < 1 || R2369 - R2029 < 1 || R2369 < 0) && (R2029 != R2369 || R2 < 1 || R2369 - R13 < 1) && (R13 = R2369 || R2029 = R2369 || R2 < 1))) && (R2370 != 0 || ((R2 != 0 || ((R13 != R2371 || R2371 - R2029 < 1 || R2029 < 1) && (R2029 != R2371 || R2371 - R13 < 1 || R13 < 1) && (R13 = R2371 || R2029 = R2371 || R13 < 1 || R2029 < 1))) && (R13 != R2371 || R2 < 1 || R2371 - R2029 < 1 || R2371 < 0) && (R2029 != R2371 || R2 < 1 || R2371 - R13 < 1) && (R13 = R2371 || R2029 = R2371 || R2 < 1))) && (R2372 != 0 || ((R2 != 0 || ((R13 != R2373 || R2373 - R2029 < 1 || R2029 < 1) && (R2029 != R2373 || R2373 - R13 < 1 || R13 < 1) && (R13 = R2373 || R2029 = R2373 || R13 < 1 || R2029 < 1))) && (R13 != R2373 || R2 < 1 || R2373 - R2029 < 1 || R2373 < 0) && (R2029 != R2373 || R2 < 1 || R2373 - R13 < 1) && (R13 = R2373 || R2029 = R2373 || R2 < 1))) && (R2374 != 0 || ((R2 != 0 || ((R13 != R2375 || R2375 - R2029 < 1 || R2029 < 1) && (R2029 != R2375 || R2375 - R13 < 1 || R13 < 1) && (R13 = R2375 || R2029 = R2375 || R13 < 1 || R2029 < 1))) && (R13 != R2375 || R2 < 1 || R2375 - R2029 < 1 || R2375 < 0) && (R2029 != R2375 || R2 < 1 || R2375 - R13 < 1) && (R13 = R2375 || R2029 = R2375 || R2 < 1))) && (R2380 != 10 || R2381 = R2395 || (R2029 = 0 && R2395 = 10)) && (R2384 != 10 || R2385 = R2395 || (R2029 = 0 && R2395 = 10)) && (R2386 != 10 || R2387 = R2395 || (R2029 = 0 && R2395 = 10)) && (R2388 != 10 || R2389 = R2395 || (R2029 = 0 && R2395 = 10)) && (R2390 != 10 || R2391 = R2395 || (R2029 = 0 && R2395 = 10)) && (R2392 != 10 || R2393 = R2395 || (R2029 = 0 && R2395 = 10)) && (R2028 = 0 || (R2360 = 0 && R2361 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2336 = 0 || R2 < 1) && (R2338 = 0 || R2 < 1) && (R2366 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2368 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2370 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2372 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2374 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2380 = 10 || (R2029 = 0 && R2395 = 10)) && (R2384 = 10 || (R2029 = 0 && R2395 = 10)) && (R2386 = 10 || (R2029 = 0 && R2395 = 10)) && (R2388 = 10 || (R2029 = 0 && R2395 = 10)) && (R2390 = 10 || (R2029 = 0 && R2395 = 10)) && (R2392 = 10 || (R2029 = 0 && R2395 = 10)) && (R13 - R2365 < 1 || R2029 - R2365 < 1) && (R13 - R2377 < 1 || R2029 - R2377 < 1);
// End of Parikh automata intersection problem
