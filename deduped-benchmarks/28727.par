// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R10973, R10974, R11, R12068, R12069, R12070, R12071, R12072, R12073, R12074, R12075, R12076, R12077, R12078, R12079, R12080, R12081, R12082, R12083, R12084, R12085, R12086, R12087, R12088, R12089, R12090, R12091, R12092, R12093, R12094, R12095, R12096, R12097, R12098, R12099, R12100, R12101, R12102, R12103, R12104, R12105, R12106, R12107, R12108, R12109, R12110, R12111, R12112, R12113, R12114, R12115, R12116, R12117, R12118, R12119, R12120, R12121, R12122, R12123, R12124, R12125, R12126, R12127, R12128, R12129, R12130, R12131, R12132, R12133, R12134, R12135, R12136, R12137, R12138, R12139, R12140, R12141, R12142, R12143, R12144, R12145, R12146, R12147, R12148, R12149, R12150, R12151, R12152, R12153, R12154, R12155, R12156, R12157, R12158, R12159, R12160, R12161, R12162, R12163, R12164, R12165, R12166, R12167, R12168, R12169, R12170, R12171, R12172, R12173, R12174, R12175, R12176, R12177, R12178, R12179, R12180, R2, R3, R4, R5, R6, R7, R8, R8777, R8781, R8782;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R10974 += 1 };
  s0 -> s0 [0, 65535] { R10973 += 1, R10974 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R10974 += 1 };
  s1 -> s1 [0, 43] { R10974 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R10974 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R12102 += 1 };
  s0 -> s0 [0, 65535] { R12101 += 1, R12102 += 1 };
  s0 -> s1 [45, 64] { R12102 += 1 };
  s0 -> s1 [91, 107] { R12102 += 1 };
  s0 -> s2 [108, 108] { R12102 += 1 };
  s0 -> s1 [109, 65535] { R12102 += 1 };
  s1 -> s1 [0, 43] { R12102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R12102 += 1 };
  s1 -> s1 [91, 65535] { R12102 += 1 };
  s2 -> s1 [0, 43] { R12102 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R12102 += 1 };
  s2 -> s1 [91, 110] { R12102 += 1 };
  s2 -> s3 [111, 111] { R12102 += 1 };
  s2 -> s1 [112, 65535] { R12102 += 1 };
  s3 -> s1 [0, 43] { R12102 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R12102 += 1 };
  s3 -> s1 [91, 98] { R12102 += 1 };
  s3 -> s4 [99, 99] { R12102 += 1 };
  s3 -> s1 [100, 65535] { R12102 += 1 };
  s4 -> s1 [0, 43] { R12102 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R12102 += 1 };
  s4 -> s1 [91, 96] { R12102 += 1 };
  s4 -> s5 [97, 97] { R12102 += 1 };
  s4 -> s1 [98, 65535] { R12102 += 1 };
  s5 -> s1 [0, 43] { R12102 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R12102 += 1 };
  s5 -> s1 [91, 107] { R12102 += 1 };
  s5 -> s6 [108, 108] { R12102 += 1 };
  s5 -> s1 [109, 65535] { R12102 += 1 };
  s6 -> s1 [0, 43] { R12102 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R12102 += 1 };
  s6 -> s1 [91, 103] { R12102 += 1 };
  s6 -> s7 [104, 104] { R12102 += 1 };
  s6 -> s1 [105, 65535] { R12102 += 1 };
  s7 -> s1 [0, 43] { R12102 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R12102 += 1 };
  s7 -> s1 [91, 110] { R12102 += 1 };
  s7 -> s8 [111, 111] { R12102 += 1 };
  s7 -> s1 [112, 65535] { R12102 += 1 };
  s8 -> s1 [0, 43] { R12102 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R12102 += 1 };
  s8 -> s1 [91, 114] { R12102 += 1 };
  s8 -> s9 [115, 115] { R12102 += 1 };
  s8 -> s1 [116, 65535] { R12102 += 1 };
  s9 -> s1 [0, 43] { R12102 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R12102 += 1 };
  s9 -> s1 [91, 115] { R12102 += 1 };
  s9 -> s10 [116, 116] { R12102 += 1 };
  s9 -> s1 [117, 65535] { R12102 += 1 };
  s10 -> s1 [0, 43] { R12102 += 1 };
  s10 -> s1 [45, 64] { R12102 += 1 };
  s10 -> s1 [91, 65535] { R12102 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R12103 += 1, R12104 += 1 };
  s0 -> s1 [0, 65535] { R12104 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12104 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R12106 += 1 };
  s0 -> s2 [0, 65535] { R12106 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R12105 += 1, R12106 += 1 };
  s0 -> s3 [58, 58] { R12106 += 1 };
  s0 -> s1 [59, 65535] { R12106 += 1 };
  s1 -> s1 [0, 57] { R12106 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R12106 += 1 };
  s1 -> s1 [59, 65535] { R12106 += 1 };
  s2 -> s1 [0, 57] { R12106 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12106 += 1, R8 += 1 };
  s2 -> s3 [58, 58] { R12106 += 1 };
  s2 -> s1 [59, 65535] { R12106 += 1 };
  s3 -> s3 [0, 65535] { R12106 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R12108 += 1, R12078 += 1 };
  s0 -> s0 [0, 65535] { R12107 += 1, R12108 += 1 };
  s0 -> s2 [0, 65535] { R12108 += 1, R12077 += 1, R12078 += 1 };
  s0 -> s3 [91, 91] { R12108 += 1, R12078 += 1 };
  s0 -> s1 [92, 65535] { R12108 += 1, R12078 += 1 };
  s1 -> s5 [0, 65535] { R12108 += 1 };
  s1 -> s1 [0, 65535] { R12108 += 1, R12078 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R12108 += 1, R12078 += 1 };
  s2 -> s2 [0, 65535] { R12108 += 1, R12077 += 1, R12078 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R12108 += 1, R12078 += 1 };
  s2 -> s1 [92, 65535] { R12108 += 1, R12078 += 1 };
  s3 -> s1 [0, 65535] { R12108 += 1, R12078 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12108 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R12110 += 1, R12080 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R12110 += 1, R12079 += 1, R12080 += 1 };
  s0 -> s0 [0, 65535] { R12109 += 1, R12110 += 1 };
  s1 -> s1 [0, 65535] { R12110 += 1, R12080 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12110 += 1 };
  s2 -> s1 [0, 65535] { R12110 += 1, R12080 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R12110 += 1, R12079 += 1, R12080 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12110 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R12112 += 1 };
  s0 -> s0 [0, 65535] { R12111 += 1, R12112 += 1 };
  s0 -> s1 [91, 107] { R12112 += 1 };
  s0 -> s2 [108, 108] { R12112 += 1 };
  s0 -> s1 [109, 65535] { R12112 += 1 };
  s1 -> s1 [0, 64] { R12112 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R12112 += 1 };
  s2 -> s1 [0, 64] { R12112 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R12112 += 1 };
  s2 -> s3 [111, 111] { R12112 += 1 };
  s2 -> s1 [112, 65535] { R12112 += 1 };
  s3 -> s1 [0, 64] { R12112 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R12112 += 1 };
  s3 -> s4 [99, 99] { R12112 += 1 };
  s3 -> s1 [100, 65535] { R12112 += 1 };
  s4 -> s1 [0, 64] { R12112 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R12112 += 1 };
  s4 -> s5 [97, 97] { R12112 += 1 };
  s4 -> s1 [98, 65535] { R12112 += 1 };
  s5 -> s1 [0, 64] { R12112 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R12112 += 1 };
  s5 -> s6 [108, 108] { R12112 += 1 };
  s5 -> s1 [109, 65535] { R12112 += 1 };
  s6 -> s1 [0, 64] { R12112 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R12112 += 1 };
  s6 -> s7 [104, 104] { R12112 += 1 };
  s6 -> s1 [105, 65535] { R12112 += 1 };
  s7 -> s1 [0, 64] { R12112 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R12112 += 1 };
  s7 -> s8 [111, 111] { R12112 += 1 };
  s7 -> s1 [112, 65535] { R12112 += 1 };
  s8 -> s1 [0, 64] { R12112 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R12112 += 1 };
  s8 -> s9 [115, 115] { R12112 += 1 };
  s8 -> s1 [116, 65535] { R12112 += 1 };
  s9 -> s1 [0, 64] { R12112 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R12112 += 1 };
  s9 -> s10 [116, 116] { R12112 += 1 };
  s9 -> s1 [117, 65535] { R12112 += 1 };
  s10 -> s1 [0, 64] { R12112 += 1 };
  s10 -> s1 [91, 65535] { R12112 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R12114 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12113 += 1, R12114 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12114 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R12116 += 1 };
  s0 -> s2 [0, 65535] { R12116 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R12115 += 1, R12116 += 1 };
  s0 -> s3 [58, 58] { R12116 += 1 };
  s0 -> s1 [59, 65535] { R12116 += 1 };
  s1 -> s1 [0, 57] { R12116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R12116 += 1 };
  s1 -> s1 [59, 65535] { R12116 += 1 };
  s2 -> s1 [0, 57] { R12116 += 1 };
  s2 -> s2 [0, 65535] { R12116 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R12116 += 1 };
  s2 -> s1 [59, 65535] { R12116 += 1 };
  s3 -> s3 [0, 65535] { R12116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R12118 += 1, R12074 += 1 };
  s0 -> s0 [0, 65535] { R12117 += 1, R12118 += 1 };
  s0 -> s2 [0, 65535] { R12118 += 1, R12073 += 1, R12074 += 1 };
  s0 -> s3 [91, 91] { R12118 += 1, R12074 += 1 };
  s0 -> s1 [92, 65535] { R12118 += 1, R12074 += 1 };
  s1 -> s1 [0, 65535] { R12118 += 1, R12074 += 1 };
  s1 -> s5 [0, 65535] { R12118 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R12118 += 1, R12074 += 1 };
  s2 -> s2 [0, 65535] { R12118 += 1, R12073 += 1, R12074 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R12118 += 1, R12074 += 1 };
  s2 -> s1 [92, 65535] { R12118 += 1, R12074 += 1 };
  s3 -> s1 [0, 65535] { R12118 += 1, R12074 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12118 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R12119 += 1, R12120 += 1 };
  s0 -> s1 [0, 65535] { R12120 += 1, R12075 += 1, R12076 += 1 };
  s0 -> s2 [0, 65535] { R12120 += 1, R12076 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12120 += 1, R12075 += 1, R12076 += 1 };
  s1 -> s2 [0, 65535] { R12120 += 1, R12076 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12120 += 1 };
  s2 -> s2 [0, 65535] { R12120 += 1, R12076 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12120 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R12152 += 1, R8782 += 1 };
  s0 -> s0 [0, 65535] { R12151 += 1, R12152 += 1 };
  s0 -> s2 [0, 65535] { R12152 += 1, R8781 += 1, R8782 += 1 };
  s0 -> s3 [47, 47] { R12152 += 1 };
  s0 -> s1 [48, 65535] { R12152 += 1, R8782 += 1 };
  s1 -> s1 [0, 46] { R12152 += 1, R8782 += 1 };
  s1 -> s3 [47, 47] { R12152 += 1 };
  s1 -> s1 [48, 65535] { R12152 += 1, R8782 += 1 };
  s2 -> s1 [0, 46] { R12152 += 1, R8782 += 1 };
  s2 -> s2 [0, 65535] { R12152 += 1, R8781 += 1, R8782 += 1 };
  s2 -> s3 [47, 47] { R12152 += 1 };
  s2 -> s1 [48, 65535] { R12152 += 1, R8782 += 1 };
  s3 -> s3 [0, 65535] { R12152 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R12153 += 1, R12154 += 1 };
  s0 -> s1 [0, 65535] { R12154 += 1, R12072 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12154 += 1, R12072 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 107] { R12156 += 1, R12126 += 1 };
  s0 -> s0 [0, 65535] { R12155 += 1, R12156 += 1 };
  s0 -> s2 [0, 65535] { R12156 += 1, R12125 += 1, R12126 += 1 };
  s0 -> s3 [108, 108] { R12156 += 1, R12126 += 1 };
  s0 -> s1 [109, 65535] { R12156 += 1, R12126 += 1 };
  s1 -> s1 [0, 65535] { R12156 += 1, R12126 += 1 };
  s1 -> s13 [0, 65535] { R12156 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R12156 += 1, R12126 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12156 += 1, R12125 += 1, R12126 += 1 };
  s2 -> s3 [108, 108] { R12156 += 1, R12126 += 1 };
  s2 -> s1 [109, 65535] { R12156 += 1, R12126 += 1 };
  s3 -> s1 [0, 110] { R12156 += 1, R12126 += 1 };
  s3 -> s3 [0, 65535] { R12156 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R12156 += 1, R12126 += 1 };
  s3 -> s1 [112, 65535] { R12156 += 1, R12126 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R12156 += 1, R12126 += 1 };
  s5 -> s5 [0, 65535] { R12156 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R12156 += 1, R12126 += 1 };
  s5 -> s1 [100, 65535] { R12156 += 1, R12126 += 1 };
  s6 -> s1 [0, 96] { R12156 += 1, R12126 += 1 };
  s6 -> s6 [0, 65535] { R12156 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R12156 += 1, R12126 += 1 };
  s6 -> s1 [98, 65535] { R12156 += 1, R12126 += 1 };
  s7 -> s1 [0, 107] { R12156 += 1, R12126 += 1 };
  s7 -> s7 [0, 65535] { R12156 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R12156 += 1, R12126 += 1 };
  s7 -> s1 [109, 65535] { R12156 += 1, R12126 += 1 };
  s8 -> s1 [0, 103] { R12156 += 1, R12126 += 1 };
  s8 -> s8 [0, 65535] { R12156 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R12156 += 1, R12126 += 1 };
  s8 -> s1 [105, 65535] { R12156 += 1, R12126 += 1 };
  s9 -> s1 [0, 110] { R12156 += 1, R12126 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R12156 += 1 };
  s9 -> s10 [111, 111] { R12156 += 1, R12126 += 1 };
  s9 -> s1 [112, 65535] { R12156 += 1, R12126 += 1 };
  s10 -> s1 [0, 114] { R12156 += 1, R12126 += 1 };
  s10 -> s10 [0, 65535] { R12156 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R12156 += 1, R12126 += 1 };
  s10 -> s1 [116, 65535] { R12156 += 1, R12126 += 1 };
  s11 -> s1 [0, 115] { R12156 += 1, R12126 += 1 };
  s11 -> s11 [0, 65535] { R12156 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R12156 += 1, R12126 += 1 };
  s11 -> s1 [117, 65535] { R12156 += 1, R12126 += 1 };
  s12 -> s1 [0, 65535] { R12156 += 1, R12126 += 1 };
  s13 -> s13 [0, 65535] { R12156 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R12158 += 1, R12127 += 1, R12128 += 1 };
  s0 -> s2 [0, 65535] { R12158 += 1, R12128 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R12157 += 1, R12158 += 1 };
  s1 -> s1 [0, 65535] { R12158 += 1, R12127 += 1, R12128 += 1 };
  s1 -> s2 [0, 65535] { R12158 += 1, R12128 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12158 += 1, R12128 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R12158 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12158 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R12160 += 1, R12130 += 1 };
  s0 -> s2 [0, 65535] { R12160 += 1, R12130 += 1, R8777 += 1 };
  s0 -> s3 [0, 65535] { R12160 += 1, R12129 += 1, R12130 += 1 };
  s0 -> s0 [0, 65535] { R12159 += 1, R12160 += 1 };
  s0 -> s4 [90, 90] { R12160 += 1, R12130 += 1 };
  s0 -> s1 [91, 65535] { R12160 += 1, R12130 += 1 };
  s1 -> s1 [0, 89] { R12160 += 1, R12130 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12160 += 1 };
  s1 -> s4 [90, 90] { R12160 += 1, R12130 += 1 };
  s1 -> s1 [91, 65535] { R12160 += 1, R12130 += 1 };
  s2 -> s1 [0, 89] { R12160 += 1, R12130 += 1 };
  s2 -> s2 [0, 65535] { R12160 += 1, R12130 += 1, R8777 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R12160 += 1 };
  s2 -> s4 [90, 90] { R12160 += 1, R12130 += 1 };
  s2 -> s1 [91, 65535] { R12160 += 1, R12130 += 1 };
  s3 -> s1 [0, 89] { R12160 += 1, R12130 += 1 };
  s3 -> s2 [0, 65535] { R12160 += 1, R12130 += 1, R8777 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12160 += 1, R12129 += 1, R12130 += 1 };
  s3 -> s4 [90, 90] { R12160 += 1, R12130 += 1 };
  s3 -> s1 [91, 65535] { R12160 += 1, R12130 += 1 };
  s4 -> s4 [0, 65535] { R12160 += 1, R12130 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12160 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R12161 += 1, R12162 += 1 };
  s0 -> s1 [0, 65535] { R12162 += 1, R12131 += 1, R12132 += 1 };
  s0 -> s2 [0, 65535] { R12162 += 1, R12132 += 1, R12087 += 1, R12088 += 1 };
  s0 -> s3 [0, 65535] { R12162 += 1, R12132 += 1, R12088 += 1, R12070 += 1 };
  s1 -> s1 [0, 65535] { R12162 += 1, R12131 += 1, R12132 += 1 };
  s1 -> s2 [0, 65535] { R12162 += 1, R12132 += 1, R12087 += 1, R12088 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R12162 += 1, R12132 += 1, R12088 += 1, R12070 += 1 };
  s2 -> s4 [0, 65535] { R12162 += 1 };
  s2 -> s2 [0, 65535] { R12162 += 1, R12132 += 1, R12087 += 1, R12088 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R12162 += 1, R12132 += 1, R12088 += 1, R12070 += 1 };
  s3 -> s4 [0, 65535] { R12162 += 1 };
  s3 -> s5 [0, 65535] { R12162 += 1, R12132 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R12162 += 1, R12132 += 1, R12088 += 1, R12070 += 1 };
  s4 -> s4 [0, 65535] { R12162 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R12162 += 1 };
  s5 -> s5 [0, 65535] { R12162 += 1, R12132 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 107] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s0 -> s0 [0, 65535] { R12163 += 1, R12164 += 1 };
  s0 -> s2 [0, 65535] { R12164 += 1, R12133 += 1, R12134 += 1 };
  s0 -> s3 [0, 65535] { R12164 += 1, R12134 += 1, R12089 += 1, R12090 += 1 };
  s0 -> s4 [108, 108] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s0 -> s1 [109, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s1 -> s6 [0, 65535] { R12164 += 1 };
  s1 -> s15 [0, 65535] { R12164 += 1, R12134 += 1 };
  s2 -> s1 [0, 107] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12164 += 1, R12133 += 1, R12134 += 1 };
  s2 -> s3 [0, 65535] { R12164 += 1, R12134 += 1, R12089 += 1, R12090 += 1 };
  s2 -> s4 [108, 108] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s2 -> s1 [109, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s3 -> s1 [0, 107] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12164 += 1 };
  s3 -> s3 [0, 65535] { R12164 += 1, R12134 += 1, R12089 += 1, R12090 += 1 };
  s3 -> s4 [108, 108] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s3 -> s1 [109, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s4 -> s1 [0, 110] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12164 += 1 };
  s4 -> s4 [0, 65535] { R12164 += 1, R12134 += 1 };
  s4 -> s7 [111, 111] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s4 -> s1 [112, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12164 += 1 };
  s7 -> s1 [0, 98] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R12164 += 1 };
  s7 -> s7 [0, 65535] { R12164 += 1, R12134 += 1 };
  s7 -> s8 [99, 99] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s7 -> s1 [100, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s8 -> s1 [0, 96] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R12164 += 1 };
  s8 -> s8 [0, 65535] { R12164 += 1, R12134 += 1 };
  s8 -> s9 [97, 97] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s8 -> s1 [98, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s9 -> s1 [0, 107] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R12164 += 1 };
  s9 -> s9 [0, 65535] { R12164 += 1, R12134 += 1 };
  s9 -> s10 [108, 108] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s9 -> s1 [109, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s10 -> s1 [0, 103] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R12164 += 1 };
  s10 -> s10 [0, 65535] { R12164 += 1, R12134 += 1 };
  s10 -> s11 [104, 104] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s10 -> s1 [105, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s11 -> s1 [0, 110] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R12164 += 1, R12134 += 1 };
  s11 -> s6 [0, 65535] { R12164 += 1 };
  s11 -> s12 [111, 111] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s11 -> s1 [112, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s12 -> s1 [0, 114] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R12164 += 1 };
  s12 -> s12 [0, 65535] { R12164 += 1, R12134 += 1 };
  s12 -> s13 [115, 115] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s12 -> s1 [116, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s13 -> s1 [0, 115] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R12164 += 1 };
  s13 -> s13 [0, 65535] { R12164 += 1, R12134 += 1 };
  s13 -> s14 [116, 116] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s13 -> s1 [117, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s14 -> s1 [0, 65535] { R12164 += 1, R12134 += 1, R12090 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s6 [0, 65535] { R12164 += 1 };
  s15 -> s15 [0, 65535] { R12164 += 1, R12134 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R12166 += 1, R12135 += 1, R12136 += 1 };
  s0 -> s0 [0, 65535] { R12165 += 1, R12166 += 1 };
  s0 -> s2 [0, 65535] { R12166 += 1, R12136 += 1, R12092 += 1, R12086 += 1 };
  s0 -> s3 [0, 65535] { R12166 += 1, R12136 += 1, R12091 += 1, R12092 += 1 };
  s1 -> s1 [0, 65535] { R12166 += 1, R12135 += 1, R12136 += 1 };
  s1 -> s2 [0, 65535] { R12166 += 1, R12136 += 1, R12092 += 1, R12086 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R12166 += 1, R12136 += 1, R12091 += 1, R12092 += 1 };
  s2 -> s2 [0, 65535] { R12166 += 1, R12136 += 1, R12092 += 1, R12086 += 1 };
  s2 -> s4 [0, 65535] { R12166 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R12166 += 1, R12136 += 1 };
  s3 -> s2 [0, 65535] { R12166 += 1, R12136 += 1, R12092 += 1, R12086 += 1 };
  s3 -> s4 [0, 65535] { R12166 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12166 += 1, R12136 += 1, R12091 += 1, R12092 += 1 };
  s4 -> s4 [0, 65535] { R12166 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R12166 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12166 += 1, R12136 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 57] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R12168 += 1, R12138 += 1, R12094 += 1, R10 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R12168 += 1, R12138 += 1, R12093 += 1, R12094 += 1 };
  s0 -> s0 [0, 65535] { R12167 += 1, R12168 += 1 };
  s0 -> s4 [0, 65535] { R12168 += 1, R12137 += 1, R12138 += 1 };
  s0 -> s5 [58, 58] { R12168 += 1, R12138 += 1, R12094 += 1 };
  s0 -> s1 [59, 65535] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s1 -> s1 [0, 57] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s1 -> s5 [58, 58] { R12168 += 1, R12138 += 1, R12094 += 1 };
  s1 -> s1 [59, 65535] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s2 -> s1 [0, 57] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R12168 += 1, R12138 += 1, R12094 += 1, R10 += 1, R11 += 1 };
  s2 -> s5 [58, 58] { R12168 += 1, R12138 += 1, R12094 += 1 };
  s2 -> s1 [59, 65535] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s3 -> s1 [0, 57] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s3 -> s2 [0, 65535] { R12168 += 1, R12138 += 1, R12094 += 1, R10 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R12168 += 1, R12138 += 1, R12093 += 1, R12094 += 1 };
  s3 -> s5 [58, 58] { R12168 += 1, R12138 += 1, R12094 += 1 };
  s3 -> s1 [59, 65535] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s4 -> s1 [0, 57] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s4 -> s2 [0, 65535] { R12168 += 1, R12138 += 1, R12094 += 1, R10 += 1, R11 += 1 };
  s4 -> s3 [0, 65535] { R12168 += 1, R12138 += 1, R12093 += 1, R12094 += 1 };
  s4 -> s4 [0, 65535] { R12168 += 1, R12137 += 1, R12138 += 1 };
  s4 -> s5 [58, 58] { R12168 += 1, R12138 += 1, R12094 += 1 };
  s4 -> s1 [59, 65535] { R12168 += 1, R12138 += 1, R12094 += 1, R11 += 1 };
  s5 -> s5 [0, 65535] { R12168 += 1, R12138 += 1, R12094 += 1 };
  s5 -> s6 [0, 65535] { R12168 += 1, R12138 += 1 };
  s5 -> s7 [0, 65535] { R12168 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R12168 += 1, R12138 += 1 };
  s6 -> s7 [0, 65535] { R12168 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R12168 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R12170 += 1, R12140 += 1, R12096 += 1, R12068 += 1 };
  s0 -> s2 [0, 65535] { R12170 += 1, R12140 += 1, R12095 += 1, R12096 += 1 };
  s0 -> s0 [0, 65535] { R12169 += 1, R12170 += 1 };
  s0 -> s3 [0, 65535] { R12170 += 1, R12139 += 1, R12140 += 1 };
  s1 -> s1 [0, 65535] { R12170 += 1, R12140 += 1, R12096 += 1, R12068 += 1 };
  s1 -> s5 [0, 65535] { R12170 += 1 };
  s1 -> s6 [0, 65535] { R12170 += 1, R12140 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R12170 += 1, R12140 += 1, R12096 += 1, R12068 += 1 };
  s2 -> s2 [0, 65535] { R12170 += 1, R12140 += 1, R12095 += 1, R12096 += 1 };
  s2 -> s5 [0, 65535] { R12170 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12170 += 1, R12140 += 1, R12096 += 1, R12068 += 1 };
  s3 -> s2 [0, 65535] { R12170 += 1, R12140 += 1, R12095 += 1, R12096 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12170 += 1, R12139 += 1, R12140 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12170 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R12170 += 1 };
  s6 -> s6 [0, 65535] { R12170 += 1, R12140 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12172 += 1, R12141 += 1, R12142 += 1 };
  s0 -> s2 [0, 65535] { R12172 += 1, R12142 += 1, R12098 += 1, R12081 += 1, R12082 += 1 };
  s0 -> s3 [0, 65535] { R12172 += 1, R12142 += 1, R12097 += 1, R12098 += 1 };
  s0 -> s0 [0, 65535] { R12171 += 1, R12172 += 1 };
  s0 -> s4 [108, 108] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s1 -> s1 [0, 65535] { R12172 += 1, R12141 += 1, R12142 += 1 };
  s1 -> s2 [0, 65535] { R12172 += 1, R12142 += 1, R12098 += 1, R12081 += 1, R12082 += 1 };
  s1 -> s3 [0, 65535] { R12172 += 1, R12142 += 1, R12097 += 1, R12098 += 1 };
  s1 -> s4 [108, 108] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s2 -> s2 [0, 65535] { R12172 += 1, R12142 += 1, R12098 += 1, R12081 += 1, R12082 += 1 };
  s2 -> s4 [108, 108] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s3 -> s2 [0, 65535] { R12172 += 1, R12142 += 1, R12098 += 1, R12081 += 1, R12082 += 1 };
  s3 -> s3 [0, 65535] { R12172 += 1, R12142 += 1, R12097 += 1, R12098 += 1 };
  s3 -> s4 [108, 108] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s4 -> s5 [111, 111] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s5 -> s6 [99, 99] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s6 -> s7 [97, 97] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s7 -> s8 [108, 108] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s8 -> s9 [104, 104] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s9 -> s10 [111, 111] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s10 -> s11 [115, 115] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s11 -> s12 [116, 116] { R12172 += 1, R12142 += 1, R12098 += 1, R12082 += 1 };
  s12 -> s13 [0, 65535];
  s12 -> s14 [0, 65535] { R12172 += 1, R12142 += 1 };
  s12 -> s15 [0, 65535] { R12172 += 1 };
  s12 -> s12 [0, 65535] { R12172 += 1, R12142 += 1, R12098 += 1 };
  s13 -> s13 [0, 65535];
  s14 -> s13 [0, 65535];
  s14 -> s14 [0, 65535] { R12172 += 1, R12142 += 1 };
  s14 -> s15 [0, 65535] { R12172 += 1 };
  s15 -> s13 [0, 65535];
  s15 -> s15 [0, 65535] { R12172 += 1 };
  accepting s12, s13, s14, s15;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R12174 += 1, R12143 += 1, R12144 += 1 };
  s0 -> s0 [0, 65535] { R12173 += 1, R12174 += 1 };
  s0 -> s2 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1, R12084 += 1, R12069 += 1 };
  s0 -> s3 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1, R12083 += 1, R12084 += 1 };
  s0 -> s4 [0, 65535] { R12174 += 1, R12144 += 1, R12099 += 1, R12100 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12174 += 1, R12143 += 1, R12144 += 1 };
  s1 -> s2 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1, R12084 += 1, R12069 += 1 };
  s1 -> s3 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1, R12083 += 1, R12084 += 1 };
  s1 -> s4 [0, 65535] { R12174 += 1, R12144 += 1, R12099 += 1, R12100 += 1 };
  s2 -> s8 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R12174 += 1 };
  s2 -> s2 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1, R12084 += 1, R12069 += 1 };
  s2 -> s7 [0, 65535] { R12174 += 1, R12144 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12174 += 1 };
  s3 -> s2 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1, R12084 += 1, R12069 += 1 };
  s3 -> s3 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1, R12083 += 1, R12084 += 1 };
  s3 -> s7 [0, 65535] { R12174 += 1, R12144 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12174 += 1 };
  s4 -> s2 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1, R12084 += 1, R12069 += 1 };
  s4 -> s3 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1, R12083 += 1, R12084 += 1 };
  s4 -> s4 [0, 65535] { R12174 += 1, R12144 += 1, R12099 += 1, R12100 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12174 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R12174 += 1 };
  s7 -> s7 [0, 65535] { R12174 += 1, R12144 += 1 };
  s8 -> s8 [0, 65535] { R12174 += 1, R12144 += 1, R12100 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R12174 += 1 };
  s8 -> s7 [0, 65535] { R12174 += 1, R12144 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R12176 += 1, R12146 += 1, R12122 += 1, R12071 += 1 };
  s0 -> s0 [0, 65535] { R12175 += 1, R12176 += 1 };
  s0 -> s2 [0, 65535] { R12176 += 1, R12146 += 1, R12121 += 1, R12122 += 1 };
  s0 -> s3 [0, 65535] { R12176 += 1, R12145 += 1, R12146 += 1 };
  s1 -> s1 [0, 65535] { R12176 += 1, R12146 += 1, R12122 += 1, R12071 += 1 };
  s1 -> s6 [0, 65535] { R12176 += 1, R12146 += 1 };
  s1 -> s5 [0, 65535] { R12176 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R12176 += 1, R12146 += 1, R12122 += 1, R12071 += 1 };
  s2 -> s5 [0, 65535] { R12176 += 1 };
  s2 -> s2 [0, 65535] { R12176 += 1, R12146 += 1, R12121 += 1, R12122 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12176 += 1, R12146 += 1, R12122 += 1, R12071 += 1 };
  s3 -> s2 [0, 65535] { R12176 += 1, R12146 += 1, R12121 += 1, R12122 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12176 += 1, R12145 += 1, R12146 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12176 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R12176 += 1, R12146 += 1 };
  s6 -> s5 [0, 65535] { R12176 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12178 += 1, R12148 += 1 };
  s0 -> s2 [0, 65535] { R12178 += 1, R12147 += 1, R12148 += 1 };
  s0 -> s0 [0, 65535] { R12177 += 1, R12178 += 1 };
  s1 -> s1 [0, 65535] { R12178 += 1, R12148 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12178 += 1 };
  s2 -> s1 [0, 65535] { R12178 += 1, R12148 += 1 };
  s2 -> s2 [0, 65535] { R12178 += 1, R12147 += 1, R12148 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12178 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 89] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s0 -> s2 [0, 65535] { R12180 += 1, R12150 += 1, R12123 += 1, R12124 += 1 };
  s0 -> s3 [0, 65535] { R12180 += 1, R12149 += 1, R12150 += 1 };
  s0 -> s0 [0, 65535] { R12179 += 1, R12180 += 1 };
  s0 -> s4 [90, 90] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s0 -> s5 [90, 90] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s0 -> s1 [91, 65535] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s1 -> s1 [0, 89] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s1 -> s1 [0, 65535] { R12180 += 1, R12150 += 1 };
  s1 -> s6 [0, 65535] { R12180 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [90, 90] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s1 -> s5 [90, 90] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s1 -> s1 [91, 65535] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s2 -> s1 [0, 89] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s2 -> s2 [0, 65535] { R12180 += 1, R12150 += 1, R12123 += 1, R12124 += 1 };
  s2 -> s6 [0, 65535] { R12180 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [90, 90] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s2 -> s5 [90, 90] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s2 -> s1 [91, 65535] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s3 -> s1 [0, 89] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s3 -> s2 [0, 65535] { R12180 += 1, R12150 += 1, R12123 += 1, R12124 += 1 };
  s3 -> s3 [0, 65535] { R12180 += 1, R12149 += 1, R12150 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [90, 90] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s3 -> s5 [90, 90] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s3 -> s1 [91, 65535] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s4 -> s4 [0, 65535] { R12180 += 1, R12150 += 1, R12124 += 1, R12085 += 1 };
  s4 -> s8 [0, 65535] { R12180 += 1, R12150 += 1 };
  s4 -> s6 [0, 65535] { R12180 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R12180 += 1, R12150 += 1 };
  s5 -> s6 [0, 65535] { R12180 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R12180 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R12180 += 1, R12150 += 1 };
  s8 -> s6 [0, 65535] { R12180 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R12098 && R4 = R12172 && R10 = 0 && R8781 = 0 && R10973 = 0 && R10974 = R12120 && R12081 = 0 && R12087 = 0 && R12088 = R12098 && R12089 = 0 && R12090 = R12098 && R12091 = 0 && R12092 = R12098 && R12093 = 5 && R12094 = R12098 && R12097 = 5 && R12101 - R12120 = 1 && R12102 = R12172 && R12103 - R12120 = 1 && R12104 = R12172 && R12105 - R12120 = 1 && R12106 = R12172 && R12107 - R12120 = 1 && R12108 = R12172 && R12109 - R12120 = 1 && R12110 = R12172 && R12111 = 0 && R12112 = R12120 && R12113 = 0 && R12114 = R12120 && R12115 = 0 && R12116 = R12120 && R12117 = 0 && R12118 = R12120 && R12119 = 0 && R12125 = 0 && R12127 = 0 && R12129 = 0 && R12131 = 0 && R12133 = 0 && R12135 = 0 && R12137 = 0 && R12139 = 0 && R12141 = 0 && R12143 = 0 && R12145 = 0 && R12147 = 0 && R12149 = 0 && R12151 = 10 && R12152 = R12172 && R12167 = 10 && R12168 = R12172 && R12171 = 10 && R1 != 0 && R2 != 0 && R12086 + R12085 != 0 && R7 < 1 && R8 < 1 && R12082 - R11 < 1 && -1 < R11 && R8777 < 1 && R12126 - R8782 < 1 && R12128 - R8782 < 1 && R12130 - R8782 < 1 && R12132 - R8782 < 1 && R12134 - R8782 < 1 && R12136 - R8782 < 1 && R12138 - R8782 < 1 && R12140 - R8782 < 1 && R12142 - R8782 < 1 && R12144 - R8782 < 1 && R12146 - R8782 < 1 && R12148 - R8782 < 1 && R12150 - R8782 < 1 && -1 < R8782 && R12082 - R12068 < 1 && R12126 - R12072 < 1 && R12128 - R12072 < 1 && R12130 - R12072 < 1 && R12132 - R12072 < 1 && R12134 - R12072 < 1 && R12136 - R12072 < 1 && R12138 - R12072 < 1 && R12140 - R12072 < 1 && R12142 - R12072 < 1 && R12144 - R12072 < 1 && R12146 - R12072 < 1 && R12148 - R12072 < 1 && R12150 - R12072 < 1 && 4 < R12098 && R12120 < R12172 && -1 < R12120 && 9 < R12172 && (R12072 != 0 || ((R12172 != R12180 || ((R12173 != 10 || ((R12174 != R12180 || ((R12175 != 10 || ((R12176 != R12180 || ((R12177 != 10 || ((R12178 != R12180 || R12179 = 10 || R12180 - R12120 < 1 || R12180 < 11) && (R12178 = R12180 || R12180 - R12120 < 1 || R12180 < 11))) && (R12177 = 10 || R12180 - R12120 < 1 || R12180 < 11))) && (R12176 = R12180 || R12180 - R12120 < 1 || R12180 < 11))) && (R12175 = 10 || R12180 - R12120 < 1 || R12180 < 11))) && (R12174 = R12180 || R12180 - R12120 < 1 || R12180 < 11))) && (R12173 = 10 || R12180 - R12120 < 1 || R12180 < 11))) && (R12172 = R12180 || R12172 < 11))) && (R12073 != 0 || ((R5 != 0 || ((R1 != R12074 || R12074 = 1 || R12074 < 0) && (R1 = R12074 || R12074 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R12074 || R12074 = 1 || R12074 < 0) && (R12074 != 1 || -1 < R1) && (R1 = R12074 || R12074 = 1))))) && (R12075 != 0 || ((R5 != 0 || ((R1 != R12076 || R12076 = 1 || R12076 < 0) && (R1 = R12076 || R12076 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R12076 || R12076 = 1 || R12076 < 0) && (R12076 != 1 || -1 < R1) && (R1 = R12076 || R12076 = 1))))) && (R12077 != 0 || ((R6 != 0 || ((R2 != R12078 || R12078 = 1 || R12078 < 0) && (R2 = R12078 || R12078 = 1 || R2 < 1))) && (R6 = 0 || ((R2 != R12078 || R12078 = 1 || R12078 < 0) && (R12078 != 1 || -1 < R2) && (R2 = R12078 || R12078 = 1))))) && (R12079 != 0 || ((R6 != 0 || ((R2 != R12080 || R12080 = 1 || R12080 < 0) && (R2 = R12080 || R12080 = 1 || R2 < 1))) && (R6 = 0 || ((R2 != R12080 || R12080 = 1 || R12080 < 0) && (R12080 != 1 || -1 < R2) && (R2 = R12080 || R12080 = 1))))) && (R12083 != 0 || ((R12069 != 0 || ((R11 != R12084 || R12084 - R12068 < 1 || R12068 < 1) && (R12068 != R12084 || R12084 - R11 < 1 || R11 < 1) && (R11 = R12084 || R12068 = R12084 || R11 < 1 || R12068 < 1))) && (R12069 = 0 || (R12084 - R11 < 1 && (R11 != R12084 || R12084 - R12068 < 1 || R12084 < 0) && (R12068 = R12084 || R11 - R12084 < 1))))) && (R12095 != 5 || R12096 = R12098 || (R12068 = 0 && R12098 = 5)) && (R12098 != R12100 || R12099 = 5 || (R12100 < 6 && (R12100 != 5 || R12068 = 0))) && (R12153 != 10 || R12154 = R12172 || (R12072 = 0 && R12172 = 10)) && (R12155 != 10 || R12156 = R12172 || (R12072 = 0 && R12172 = 10)) && (R12157 != 10 || R12158 = R12172 || (R12072 = 0 && R12172 = 10)) && (R12159 != 10 || R12160 = R12172 || (R12072 = 0 && R12172 = 10)) && (R12161 != 10 || R12162 = R12172 || (R12072 = 0 && R12172 = 10)) && (R12163 != 10 || R12164 = R12172 || (R12072 = 0 && R12172 = 10)) && (R12165 != 10 || R12166 = R12172 || (R12072 = 0 && R12172 = 10)) && (R12169 != 10 || R12170 = R12172 || (R12072 = 0 && R12172 = 10)) && (R12071 = 0 || (R12121 = 0 && R12122 = 0)) && (R12071 = 0 || (R12123 = 0 && R12124 = 0)) && (R12072 = 0 || (R12172 = R12180 && (R12173 != 10 || ((R12174 != R12180 || ((R12175 != 10 || ((R12176 != R12180 || ((R12177 != 10 || ((R12178 != R12180 || R12179 = 10 || R12180 - R12120 < 1 || R12180 < 10) && (R12178 = R12180 || R12180 - R12120 < 1 || R12180 < 10))) && (R12177 = 10 || R12180 - R12120 < 1 || R12180 < 10))) && (R12176 = R12180 || R12180 - R12120 < 1 || R12180 < 10))) && (R12175 = 10 || R12180 - R12120 < 1 || R12180 < 10))) && (R12174 = R12180 || R12180 - R12120 < 1 || R12180 < 10))) && (R12173 = 10 || R12180 - R12120 < 1 || R12180 < 10))) && (R12073 = 0 || (R5 = 0 && R1 < 0)) && (R12075 = 0 || (R5 = 0 && R1 < 0)) && (R12077 = 0 || (R6 = 0 && R2 < 0)) && (R12079 = 0 || (R6 = 0 && R2 < 0)) && (R12083 = 0 || (R12069 = 0 && (R11 < 1 || R12068 < 1))) && (R12095 = 5 || (R12068 = 0 && R12098 = 5)) && (R12098 = R12100 || (R12068 = 0 && R12098 = 5)) && (R12153 = 10 || (R12072 = 0 && R12172 = 10)) && (R12155 = 10 || (R12072 = 0 && R12172 = 10)) && (R12157 = 10 || (R12072 = 0 && R12172 = 10)) && (R12159 = 10 || (R12072 = 0 && R12172 = 10)) && (R12161 = 10 || (R12072 = 0 && R12172 = 10)) && (R12163 = 10 || (R12072 = 0 && R12172 = 10)) && (R12165 = 10 || (R12072 = 0 && R12172 = 10)) && (R12169 = 10 || (R12072 = 0 && R12172 = 10)) && (R11 - R12082 < 1 || R12068 - R12082 < 1) && (R8782 - R12126 < 1 || R12072 - R12126 < 1) && (R8782 - R12128 < 1 || R12072 - R12128 < 1) && (R8782 - R12130 < 1 || R12072 - R12130 < 1) && (R8782 - R12132 < 1 || R12072 - R12132 < 1) && (R8782 - R12134 < 1 || R12072 - R12134 < 1) && (R8782 - R12136 < 1 || R12072 - R12136 < 1) && (R8782 - R12138 < 1 || R12072 - R12138 < 1) && (R8782 - R12140 < 1 || R12072 - R12140 < 1) && (R8782 - R12142 < 1 || R12072 - R12142 < 1) && (R8782 - R12144 < 1 || R12072 - R12144 < 1) && (R8782 - R12146 < 1 || R12072 - R12146 < 1) && (R8782 - R12148 < 1 || R12072 - R12148 < 1) && (R8782 - R12150 < 1 || R12072 - R12150 < 1);
// End of Parikh automata intersection problem
