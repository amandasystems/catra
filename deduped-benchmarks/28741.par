// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R15, R18415, R18416, R18417, R18418, R18419, R18420, R18421, R18422, R18423, R18424, R18425, R18426, R18427, R18428, R18429, R18430, R18431, R18432, R18433, R18434, R18435, R18436, R18437, R18438, R18439, R18440, R18441, R18442, R18443, R18444, R18445, R18446, R18447, R18448, R18449, R18450, R18451, R18452, R18453, R18454, R18455, R18456, R18457, R18458, R18459, R18460, R18461, R18462, R18463, R18464, R18465, R18466, R18467, R18468, R18469, R18470, R18471, R18472, R18473, R18474, R18475, R18476, R18477, R18478, R18479, R18480, R18481, R18482, R18483, R18484, R18485, R18486, R18487, R18488, R18489, R18490, R18491, R18492, R18493, R18494, R18495, R18496, R18497, R18498, R18499, R18500, R18501, R18502, R18503, R18504, R18505, R18506, R18507, R18508, R18509, R18510, R18511, R18512, R18513, R18514, R18515, R18516, R18517, R18518, R18519, R18520, R18521, R18522, R18523, R18524, R18525, R18526, R18527, R18528, R18529, R18530, R18531, R18532, R18533, R18534, R18535, R18536, R18537, R18538, R18539, R18540, R18541, R18542, R18543, R18544, R18545, R18546, R18547, R18548, R18549, R18550, R18551, R18552, R18553, R18554, R18555, R18556, R18557, R18558, R18559, R18560, R18561, R18562, R18563, R18564, R18565, R18566, R18567, R18568, R18569, R18570, R18571, R18572, R18573, R18574, R18575, R18576, R18577, R18578, R18579, R18580, R18581, R18582, R18583, R18584, R18585, R18586, R18587, R18588, R19, R20, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P67
automaton P67_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
synchronised {  // Automata constraining P81
automaton P81_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R8 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18526 += 1 };
  s0 -> s0 [0, 65535] { R18525 += 1, R18526 += 1 };
  s0 -> s2 [46, 46] { R18526 += 1 };
  s0 -> s3 [47, 47] { R18526 += 1 };
  s0 -> s1 [48, 65535] { R18526 += 1 };
  s1 -> s1 [0, 45] { R18526 += 1 };
  s1 -> s2 [46, 46] { R18526 += 1 };
  s1 -> s3 [47, 47] { R18526 += 1 };
  s1 -> s1 [48, 65535] { R18526 += 1 };
  s2 -> s1 [0, 45] { R18526 += 1 };
  s2 -> s2 [46, 46] { R18526 += 1 };
  s2 -> s3 [47, 47] { R18526 += 1 };
  s2 -> s1 [48, 114] { R18526 += 1 };
  s2 -> s8 [115, 115] { R18526 += 1 };
  s2 -> s1 [116, 65535] { R18526 += 1 };
  s3 -> s3 [0, 45] { R18526 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18526 += 1 };
  s3 -> s3 [47, 65535] { R18526 += 1 };
  s4 -> s3 [0, 45] { R18526 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18526 += 1 };
  s4 -> s3 [47, 114] { R18526 += 1 };
  s4 -> s5 [115, 115] { R18526 += 1 };
  s4 -> s3 [116, 65535] { R18526 += 1 };
  s5 -> s3 [0, 45] { R18526 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18526 += 1 };
  s5 -> s3 [47, 110] { R18526 += 1 };
  s5 -> s6 [111, 111] { R18526 += 1 };
  s5 -> s3 [112, 65535] { R18526 += 1 };
  s6 -> s3 [0, 45] { R18526 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18526 += 1 };
  s6 -> s3 [47, 98] { R18526 += 1 };
  s6 -> s7 [99, 99] { R18526 += 1 };
  s6 -> s3 [100, 65535] { R18526 += 1 };
  s7 -> s3 [0, 45] { R18526 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18526 += 1 };
  s7 -> s3 [47, 106] { R18526 += 1 };
  s7 -> s3 [108, 65535] { R18526 += 1 };
  s8 -> s1 [0, 45] { R18526 += 1 };
  s8 -> s2 [46, 46] { R18526 += 1 };
  s8 -> s3 [47, 47] { R18526 += 1 };
  s8 -> s1 [48, 110] { R18526 += 1 };
  s8 -> s9 [111, 111] { R18526 += 1 };
  s8 -> s1 [112, 65535] { R18526 += 1 };
  s9 -> s1 [0, 45] { R18526 += 1 };
  s9 -> s2 [46, 46] { R18526 += 1 };
  s9 -> s3 [47, 47] { R18526 += 1 };
  s9 -> s1 [48, 98] { R18526 += 1 };
  s9 -> s10 [99, 99] { R18526 += 1 };
  s9 -> s1 [100, 65535] { R18526 += 1 };
  s10 -> s1 [0, 45] { R18526 += 1 };
  s10 -> s2 [46, 46] { R18526 += 1 };
  s10 -> s3 [47, 47] { R18526 += 1 };
  s10 -> s1 [48, 106] { R18526 += 1 };
  s10 -> s1 [108, 65535] { R18526 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R18527 += 1, R18528 += 1 };
  s0 -> s1 [0, 65535] { R18528 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R18528 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18530 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R18529 += 1, R18530 += 1 };
  s0 -> s2 [0, 65535] { R18530 += 1, R19 += 1, R20 += 1 };
  s0 -> s3 [47, 47] { R18530 += 1 };
  s0 -> s1 [48, 65535] { R18530 += 1, R20 += 1 };
  s1 -> s1 [0, 46] { R18530 += 1, R20 += 1 };
  s1 -> s3 [47, 47] { R18530 += 1 };
  s1 -> s1 [48, 65535] { R18530 += 1, R20 += 1 };
  s2 -> s1 [0, 46] { R18530 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R18530 += 1, R19 += 1, R20 += 1 };
  s2 -> s3 [47, 47] { R18530 += 1 };
  s2 -> s1 [48, 65535] { R18530 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R18530 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18532 += 1, R18462 += 1 };
  s0 -> s2 [0, 65535] { R18532 += 1, R18461 += 1, R18462 += 1 };
  s0 -> s0 [0, 65535] { R18531 += 1, R18532 += 1 };
  s0 -> s1 [38, 42] { R18532 += 1, R18462 += 1 };
  s0 -> s1 [44, 45] { R18532 += 1, R18462 += 1 };
  s0 -> s1 [47, 62] { R18532 += 1, R18462 += 1 };
  s0 -> s1 [64, 65535] { R18532 += 1, R18462 += 1 };
  s1 -> s1 [0, 36] { R18532 += 1, R18462 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18532 += 1 };
  s1 -> s1 [38, 42] { R18532 += 1, R18462 += 1 };
  s1 -> s1 [44, 45] { R18532 += 1, R18462 += 1 };
  s1 -> s1 [47, 62] { R18532 += 1, R18462 += 1 };
  s1 -> s1 [64, 65535] { R18532 += 1, R18462 += 1 };
  s2 -> s1 [0, 36] { R18532 += 1, R18462 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18532 += 1, R18461 += 1, R18462 += 1 };
  s2 -> s1 [38, 42] { R18532 += 1, R18462 += 1 };
  s2 -> s1 [44, 45] { R18532 += 1, R18462 += 1 };
  s2 -> s1 [47, 62] { R18532 += 1, R18462 += 1 };
  s2 -> s1 [64, 65535] { R18532 += 1, R18462 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R18534 += 1, R18464 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R18533 += 1, R18534 += 1 };
  s0 -> s2 [0, 65535] { R18534 += 1, R18463 += 1, R18464 += 1 };
  s1 -> s1 [0, 65535] { R18534 += 1, R18464 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18534 += 1 };
  s2 -> s1 [0, 65535] { R18534 += 1, R18464 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R18534 += 1, R18463 += 1, R18464 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18534 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s0 -> s0 [0, 65535] { R18535 += 1, R18536 += 1 };
  s0 -> s2 [0, 65535] { R18536 += 1, R18466 += 1, R18423 += 1, R18424 += 1 };
  s0 -> s3 [0, 65535] { R18536 += 1, R18465 += 1, R18466 += 1 };
  s0 -> s4 [63, 63] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s0 -> s1 [64, 65535] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18536 += 1 };
  s1 -> s1 [0, 65535] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s1 -> s7 [0, 65535] { R18536 += 1, R18466 += 1 };
  s2 -> s1 [0, 62] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s2 -> s6 [0, 65535] { R18536 += 1 };
  s2 -> s2 [0, 65535] { R18536 += 1, R18466 += 1, R18423 += 1, R18424 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s2 -> s1 [64, 65535] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s3 -> s1 [0, 62] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s3 -> s2 [0, 65535] { R18536 += 1, R18466 += 1, R18423 += 1, R18424 += 1 };
  s3 -> s3 [0, 65535] { R18536 += 1, R18465 += 1, R18466 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s3 -> s1 [64, 65535] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s4 -> s1 [0, 65535] { R18536 += 1, R18466 += 1, R18424 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18536 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18536 += 1 };
  s7 -> s7 [0, 65535] { R18536 += 1, R18466 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18538 += 1, R18467 += 1, R18468 += 1 };
  s0 -> s0 [0, 65535] { R18537 += 1, R18538 += 1 };
  s0 -> s2 [0, 65535] { R18538 += 1, R18468 += 1, R18425 += 1, R18426 += 1 };
  s0 -> s3 [0, 65535] { R18538 += 1, R18468 += 1, R18426 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R18538 += 1, R18467 += 1, R18468 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R18538 += 1, R18468 += 1, R18425 += 1, R18426 += 1 };
  s1 -> s3 [0, 65535] { R18538 += 1, R18468 += 1, R18426 += 1, R10 += 1 };
  s2 -> s5 [0, 65535] { R18538 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R18538 += 1, R18468 += 1, R18425 += 1, R18426 += 1 };
  s2 -> s3 [0, 65535] { R18538 += 1, R18468 += 1, R18426 += 1, R10 += 1 };
  s3 -> s4 [0, 65535] { R18538 += 1, R18468 += 1 };
  s3 -> s5 [0, 65535] { R18538 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18538 += 1, R18468 += 1, R18426 += 1, R10 += 1 };
  s4 -> s4 [0, 65535] { R18538 += 1, R18468 += 1 };
  s4 -> s5 [0, 65535] { R18538 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18538 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 63] { R18540 += 1, R18476 += 1 };
  s0 -> s2 [0, 65535] { R18540 += 1, R18475 += 1, R18476 += 1 };
  s0 -> s0 [0, 65535] { R18539 += 1, R18540 += 1 };
  s0 -> s3 [64, 64] { R18540 += 1, R18476 += 1 };
  s0 -> s1 [65, 65535] { R18540 += 1, R18476 += 1 };
  s1 -> s1 [0, 63] { R18540 += 1, R18476 += 1 };
  s1 -> s3 [64, 64] { R18540 += 1, R18476 += 1 };
  s1 -> s1 [65, 65535] { R18540 += 1, R18476 += 1 };
  s2 -> s1 [0, 63] { R18540 += 1, R18476 += 1 };
  s2 -> s2 [0, 65535] { R18540 += 1, R18475 += 1, R18476 += 1 };
  s2 -> s3 [64, 64] { R18540 += 1, R18476 += 1 };
  s2 -> s1 [65, 65535] { R18540 += 1, R18476 += 1 };
  s3 -> s3 [0, 65535] { R18540 += 1, R18476 += 1 };
  s3 -> s4 [0, 65535] { R18540 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18540 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R18542 += 1, R18478 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R18541 += 1, R18542 += 1 };
  s0 -> s2 [0, 65535] { R18542 += 1, R18477 += 1, R18478 += 1 };
  s1 -> s1 [0, 65535] { R18542 += 1, R18478 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18542 += 1 };
  s2 -> s1 [0, 65535] { R18542 += 1, R18478 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18542 += 1, R18477 += 1, R18478 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18542 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 86] { R18544 += 1, R18480 += 1 };
  s0 -> s2 [0, 65535] { R18544 += 1, R18480 += 1, R12 += 1 };
  s0 -> s3 [0, 65535] { R18544 += 1, R18479 += 1, R18480 += 1 };
  s0 -> s0 [0, 65535] { R18543 += 1, R18544 += 1 };
  s0 -> s4 [87, 87] { R18544 += 1, R18480 += 1 };
  s0 -> s1 [88, 65535] { R18544 += 1, R18480 += 1 };
  s1 -> s1 [0, 86] { R18544 += 1, R18480 += 1 };
  s1 -> s1 [0, 65535] { R18544 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R18544 += 1, R18480 += 1 };
  s1 -> s1 [88, 65535] { R18544 += 1, R18480 += 1 };
  s2 -> s1 [0, 86] { R18544 += 1, R18480 += 1 };
  s2 -> s2 [0, 65535] { R18544 += 1, R18480 += 1, R12 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18544 += 1 };
  s2 -> s4 [87, 87] { R18544 += 1, R18480 += 1 };
  s2 -> s1 [88, 65535] { R18544 += 1, R18480 += 1 };
  s3 -> s1 [0, 86] { R18544 += 1, R18480 += 1 };
  s3 -> s2 [0, 65535] { R18544 += 1, R18480 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R18544 += 1, R18479 += 1, R18480 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [87, 87] { R18544 += 1, R18480 += 1 };
  s3 -> s1 [88, 65535] { R18544 += 1, R18480 += 1 };
  s4 -> s4 [0, 65535] { R18544 += 1, R18480 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18544 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 89] { R18546 += 1, R18482 += 1 };
  s0 -> s2 [0, 65535] { R18546 += 1, R18482 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R18545 += 1, R18546 += 1 };
  s0 -> s3 [0, 65535] { R18546 += 1, R18481 += 1, R18482 += 1 };
  s0 -> s4 [90, 90] { R18546 += 1, R18482 += 1 };
  s0 -> s1 [91, 65535] { R18546 += 1, R18482 += 1 };
  s1 -> s1 [0, 89] { R18546 += 1, R18482 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18546 += 1 };
  s1 -> s4 [90, 90] { R18546 += 1, R18482 += 1 };
  s1 -> s1 [91, 65535] { R18546 += 1, R18482 += 1 };
  s2 -> s1 [0, 89] { R18546 += 1, R18482 += 1 };
  s2 -> s2 [0, 65535] { R18546 += 1, R18482 += 1, R15 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18546 += 1 };
  s2 -> s4 [90, 90] { R18546 += 1, R18482 += 1 };
  s2 -> s1 [91, 65535] { R18546 += 1, R18482 += 1 };
  s3 -> s1 [0, 89] { R18546 += 1, R18482 += 1 };
  s3 -> s2 [0, 65535] { R18546 += 1, R18482 += 1, R15 += 1 };
  s3 -> s3 [0, 65535] { R18546 += 1, R18481 += 1, R18482 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [90, 90] { R18546 += 1, R18482 += 1 };
  s3 -> s1 [91, 65535] { R18546 += 1, R18482 += 1 };
  s4 -> s4 [0, 65535] { R18546 += 1, R18482 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18546 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 43] { R18548 += 1, R18484 += 1, R18428 += 1 };
  s0 -> s2 [0, 65535] { R18548 += 1, R18483 += 1, R18484 += 1 };
  s0 -> s3 [0, 65535] { R18548 += 1, R18484 += 1, R18427 += 1, R18428 += 1 };
  s0 -> s0 [0, 65535] { R18547 += 1, R18548 += 1 };
  s0 -> s1 [45, 65535] { R18548 += 1, R18484 += 1, R18428 += 1 };
  s1 -> s1 [0, 43] { R18548 += 1, R18484 += 1, R18428 += 1 };
  s1 -> s4 [0, 65535] { R18548 += 1 };
  s1 -> s1 [0, 65535] { R18548 += 1, R18484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [45, 65535] { R18548 += 1, R18484 += 1, R18428 += 1 };
  s2 -> s1 [0, 43] { R18548 += 1, R18484 += 1, R18428 += 1 };
  s2 -> s2 [0, 65535] { R18548 += 1, R18483 += 1, R18484 += 1 };
  s2 -> s3 [0, 65535] { R18548 += 1, R18484 += 1, R18427 += 1, R18428 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [45, 65535] { R18548 += 1, R18484 += 1, R18428 += 1 };
  s3 -> s1 [0, 43] { R18548 += 1, R18484 += 1, R18428 += 1 };
  s3 -> s3 [0, 65535] { R18548 += 1, R18484 += 1, R18427 += 1, R18428 += 1 };
  s3 -> s4 [0, 65535] { R18548 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [45, 65535] { R18548 += 1, R18484 += 1, R18428 += 1 };
  s4 -> s4 [0, 65535] { R18548 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R18550 += 1, R18486 += 1, R18430 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R18550 += 1, R18485 += 1, R18486 += 1 };
  s0 -> s3 [0, 65535] { R18550 += 1, R18486 += 1, R18429 += 1, R18430 += 1 };
  s0 -> s0 [0, 65535] { R18549 += 1, R18550 += 1 };
  s1 -> s1 [0, 65535] { R18550 += 1, R18486 += 1, R18430 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R18550 += 1, R18486 += 1 };
  s1 -> s5 [0, 65535] { R18550 += 1 };
  s2 -> s1 [0, 65535] { R18550 += 1, R18486 += 1, R18430 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18550 += 1, R18485 += 1, R18486 += 1 };
  s2 -> s3 [0, 65535] { R18550 += 1, R18486 += 1, R18429 += 1, R18430 += 1 };
  s3 -> s1 [0, 65535] { R18550 += 1, R18486 += 1, R18430 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18550 += 1, R18486 += 1, R18429 += 1, R18430 += 1 };
  s3 -> s5 [0, 65535] { R18550 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18550 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18550 += 1, R18486 += 1 };
  s6 -> s5 [0, 65535] { R18550 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 36] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s0 -> s2 [0, 65535] { R18552 += 1, R18487 += 1, R18488 += 1 };
  s0 -> s3 [0, 65535] { R18552 += 1, R18488 += 1, R18431 += 1, R18432 += 1 };
  s0 -> s0 [0, 65535] { R18551 += 1, R18552 += 1 };
  s0 -> s1 [38, 42] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s0 -> s1 [44, 57] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s0 -> s1 [59, 63] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s0 -> s1 [65, 65535] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s1 -> s1 [0, 36] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s1 -> s4 [0, 65535] { R18552 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18552 += 1, R18488 += 1 };
  s1 -> s1 [38, 42] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s1 -> s1 [44, 57] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s1 -> s1 [59, 63] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s1 -> s1 [65, 65535] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s2 -> s1 [0, 36] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s2 -> s2 [0, 65535] { R18552 += 1, R18487 += 1, R18488 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18552 += 1, R18488 += 1, R18431 += 1, R18432 += 1 };
  s2 -> s1 [38, 42] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s2 -> s1 [44, 57] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s2 -> s1 [59, 63] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s2 -> s1 [65, 65535] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s3 -> s1 [0, 36] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s3 -> s4 [0, 65535] { R18552 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18552 += 1, R18488 += 1, R18431 += 1, R18432 += 1 };
  s3 -> s1 [38, 42] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s3 -> s1 [44, 57] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s3 -> s1 [59, 63] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s3 -> s1 [65, 65535] { R18552 += 1, R18488 += 1, R18432 += 1 };
  s4 -> s4 [0, 65535] { R18552 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R18553 += 1, R18554 += 1 };
  s0 -> s1 [0, 65535] { R18554 += 1, R18489 += 1, R18490 += 1 };
  s0 -> s2 [0, 65535] { R18554 += 1, R18490 += 1, R18433 += 1, R18434 += 1 };
  s0 -> s3 [0, 65535] { R18554 += 1, R18490 += 1, R18434 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18554 += 1, R18489 += 1, R18490 += 1 };
  s1 -> s2 [0, 65535] { R18554 += 1, R18490 += 1, R18433 += 1, R18434 += 1 };
  s1 -> s3 [0, 65535] { R18554 += 1, R18490 += 1, R18434 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R18554 += 1 };
  s2 -> s2 [0, 65535] { R18554 += 1, R18490 += 1, R18433 += 1, R18434 += 1 };
  s2 -> s3 [0, 65535] { R18554 += 1, R18490 += 1, R18434 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18554 += 1, R18490 += 1 };
  s3 -> s6 [0, 65535] { R18554 += 1 };
  s3 -> s3 [0, 65535] { R18554 += 1, R18490 += 1, R18434 += 1, R4 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18554 += 1, R18490 += 1 };
  s5 -> s6 [0, 65535] { R18554 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18554 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 36] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s0 -> s0 [0, 65535] { R18555 += 1, R18556 += 1 };
  s0 -> s2 [0, 65535] { R18556 += 1, R18492 += 1, R18435 += 1, R18436 += 1 };
  s0 -> s3 [0, 65535] { R18556 += 1, R18491 += 1, R18492 += 1 };
  s0 -> s1 [38, 42] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s0 -> s1 [44, 57] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s0 -> s1 [59, 63] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s0 -> s1 [65, 65535] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s1 -> s1 [0, 36] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s1 -> s1 [0, 65535] { R18556 += 1, R18492 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R18556 += 1 };
  s1 -> s1 [38, 42] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s1 -> s1 [44, 57] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s1 -> s1 [59, 63] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s1 -> s1 [65, 65535] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s2 -> s1 [0, 36] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s2 -> s2 [0, 65535] { R18556 += 1, R18492 += 1, R18435 += 1, R18436 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18556 += 1 };
  s2 -> s1 [38, 42] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s2 -> s1 [44, 57] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s2 -> s1 [59, 63] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s2 -> s1 [65, 65535] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s3 -> s1 [0, 36] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s3 -> s2 [0, 65535] { R18556 += 1, R18492 += 1, R18435 += 1, R18436 += 1 };
  s3 -> s3 [0, 65535] { R18556 += 1, R18491 += 1, R18492 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [38, 42] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s3 -> s1 [44, 57] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s3 -> s1 [59, 63] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s3 -> s1 [65, 65535] { R18556 += 1, R18492 += 1, R18436 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18556 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R18557 += 1, R18558 += 1 };
  s0 -> s1 [0, 65535] { R18558 += 1, R18494 += 1, R18438 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R18558 += 1, R18494 += 1, R18437 += 1, R18438 += 1 };
  s0 -> s3 [0, 65535] { R18558 += 1, R18493 += 1, R18494 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R18558 += 1 };
  s1 -> s1 [0, 65535] { R18558 += 1, R18494 += 1, R18438 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R18558 += 1, R18494 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18558 += 1 };
  s2 -> s1 [0, 65535] { R18558 += 1, R18494 += 1, R18438 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R18558 += 1, R18494 += 1, R18437 += 1, R18438 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18558 += 1, R18494 += 1, R18438 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R18558 += 1, R18494 += 1, R18437 += 1, R18438 += 1 };
  s3 -> s3 [0, 65535] { R18558 += 1, R18493 += 1, R18494 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18558 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18558 += 1 };
  s6 -> s6 [0, 65535] { R18558 += 1, R18494 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R18560 += 1, R18496 += 1, R18441 += 1, R18442 += 1 };
  s0 -> s0 [0, 65535] { R18559 += 1, R18560 += 1 };
  s0 -> s2 [0, 65535] { R18560 += 1, R18496 += 1, R18442 += 1, R18415 += 1 };
  s0 -> s3 [0, 65535] { R18560 += 1, R18495 += 1, R18496 += 1 };
  s1 -> s1 [0, 65535] { R18560 += 1, R18496 += 1, R18441 += 1, R18442 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R18560 += 1, R18496 += 1, R18442 += 1, R18415 += 1 };
  s1 -> s6 [0, 65535] { R18560 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18560 += 1, R18496 += 1 };
  s2 -> s2 [0, 65535] { R18560 += 1, R18496 += 1, R18442 += 1, R18415 += 1 };
  s2 -> s6 [0, 65535] { R18560 += 1 };
  s3 -> s1 [0, 65535] { R18560 += 1, R18496 += 1, R18441 += 1, R18442 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R18560 += 1, R18496 += 1, R18442 += 1, R18415 += 1 };
  s3 -> s3 [0, 65535] { R18560 += 1, R18495 += 1, R18496 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18560 += 1, R18496 += 1 };
  s5 -> s6 [0, 65535] { R18560 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18560 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 107] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s0 -> s0 [0, 65535] { R18561 += 1, R18562 += 1 };
  s0 -> s2 [0, 65535] { R18562 += 1, R18498 += 1, R18443 += 1, R18444 += 1 };
  s0 -> s3 [0, 65535] { R18562 += 1, R18497 += 1, R18498 += 1 };
  s0 -> s4 [108, 108] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s0 -> s1 [109, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s1 -> s1 [0, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s1 -> s15 [0, 65535] { R18562 += 1, R18498 += 1 };
  s1 -> s5 [0, 65535] { R18562 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 107] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s2 -> s5 [0, 65535] { R18562 += 1 };
  s2 -> s2 [0, 65535] { R18562 += 1, R18498 += 1, R18443 += 1, R18444 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [108, 108] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s2 -> s1 [109, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s3 -> s1 [0, 107] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s3 -> s2 [0, 65535] { R18562 += 1, R18498 += 1, R18443 += 1, R18444 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18562 += 1, R18497 += 1, R18498 += 1 };
  s3 -> s4 [108, 108] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s3 -> s1 [109, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s4 -> s1 [0, 110] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s4 -> s4 [0, 65535] { R18562 += 1, R18498 += 1 };
  s4 -> s5 [0, 65535] { R18562 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [111, 111] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s4 -> s1 [112, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s5 -> s5 [0, 65535] { R18562 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s7 -> s7 [0, 65535] { R18562 += 1, R18498 += 1 };
  s7 -> s5 [0, 65535] { R18562 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [99, 99] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s7 -> s1 [100, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s8 -> s1 [0, 96] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s8 -> s8 [0, 65535] { R18562 += 1, R18498 += 1 };
  s8 -> s5 [0, 65535] { R18562 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [97, 97] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s8 -> s1 [98, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s9 -> s1 [0, 107] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s9 -> s5 [0, 65535] { R18562 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R18562 += 1, R18498 += 1 };
  s9 -> s10 [108, 108] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s9 -> s1 [109, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s10 -> s1 [0, 103] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s10 -> s10 [0, 65535] { R18562 += 1, R18498 += 1 };
  s10 -> s5 [0, 65535] { R18562 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s11 [104, 104] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s10 -> s1 [105, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s11 -> s1 [0, 110] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s11 -> s5 [0, 65535] { R18562 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R18562 += 1, R18498 += 1 };
  s11 -> s12 [111, 111] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s11 -> s1 [112, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s12 -> s1 [0, 114] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s12 -> s5 [0, 65535] { R18562 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R18562 += 1, R18498 += 1 };
  s12 -> s13 [115, 115] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s12 -> s1 [116, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s13 -> s1 [0, 115] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s13 -> s5 [0, 65535] { R18562 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R18562 += 1, R18498 += 1 };
  s13 -> s14 [116, 116] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s13 -> s1 [117, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s14 -> s1 [0, 65535] { R18562 += 1, R18498 += 1, R18444 += 1 };
  s15 -> s15 [0, 65535] { R18562 += 1, R18498 += 1 };
  s15 -> s5 [0, 65535] { R18562 += 1 };
  s15 -> s6 [0, 65535];
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R18563 += 1, R18564 += 1 };
  s0 -> s1 [0, 65535] { R18564 += 1, R18500 += 1, R18446 += 1, R18440 += 1 };
  s0 -> s2 [0, 65535] { R18564 += 1, R18499 += 1, R18500 += 1 };
  s0 -> s3 [0, 65535] { R18564 += 1, R18500 += 1, R18445 += 1, R18446 += 1 };
  s1 -> s6 [0, 65535] { R18564 += 1, R18500 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18564 += 1, R18500 += 1, R18446 += 1, R18440 += 1 };
  s1 -> s5 [0, 65535] { R18564 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R18564 += 1, R18500 += 1, R18446 += 1, R18440 += 1 };
  s2 -> s2 [0, 65535] { R18564 += 1, R18499 += 1, R18500 += 1 };
  s2 -> s3 [0, 65535] { R18564 += 1, R18500 += 1, R18445 += 1, R18446 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18564 += 1, R18500 += 1, R18446 += 1, R18440 += 1 };
  s3 -> s5 [0, 65535] { R18564 += 1 };
  s3 -> s3 [0, 65535] { R18564 += 1, R18500 += 1, R18445 += 1, R18446 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18564 += 1 };
  s6 -> s6 [0, 65535] { R18564 += 1, R18500 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18564 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R18566 += 1, R18502 += 1, R18447 += 1, R18448 += 1 };
  s0 -> s0 [0, 65535] { R18565 += 1, R18566 += 1 };
  s0 -> s2 [0, 65535] { R18566 += 1, R18501 += 1, R18502 += 1 };
  s0 -> s3 [0, 65535] { R18566 += 1, R18502 += 1, R18448 += 1, R18416 += 1 };
  s1 -> s1 [0, 65535] { R18566 += 1, R18502 += 1, R18447 += 1, R18448 += 1 };
  s1 -> s4 [0, 65535] { R18566 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R18566 += 1, R18502 += 1, R18448 += 1, R18416 += 1 };
  s2 -> s1 [0, 65535] { R18566 += 1, R18502 += 1, R18447 += 1, R18448 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18566 += 1, R18501 += 1, R18502 += 1 };
  s2 -> s3 [0, 65535] { R18566 += 1, R18502 += 1, R18448 += 1, R18416 += 1 };
  s3 -> s4 [0, 65535] { R18566 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18566 += 1, R18502 += 1 };
  s3 -> s3 [0, 65535] { R18566 += 1, R18502 += 1, R18448 += 1, R18416 += 1 };
  s4 -> s4 [0, 65535] { R18566 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18566 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18566 += 1, R18502 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 107] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s0 -> s2 [0, 65535] { R18568 += 1, R18504 += 1, R18449 += 1, R18450 += 1 };
  s0 -> s3 [0, 65535] { R18568 += 1, R18503 += 1, R18504 += 1 };
  s0 -> s0 [0, 65535] { R18567 += 1, R18568 += 1 };
  s0 -> s4 [108, 108] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s0 -> s1 [109, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s15 [0, 65535] { R18568 += 1, R18504 += 1 };
  s1 -> s6 [0, 65535] { R18568 += 1 };
  s1 -> s1 [0, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s2 -> s1 [0, 107] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s2 -> s2 [0, 65535] { R18568 += 1, R18504 += 1, R18449 += 1, R18450 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18568 += 1 };
  s2 -> s4 [108, 108] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s2 -> s1 [109, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s3 -> s1 [0, 107] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s3 -> s2 [0, 65535] { R18568 += 1, R18504 += 1, R18449 += 1, R18450 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18568 += 1, R18503 += 1, R18504 += 1 };
  s3 -> s4 [108, 108] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s3 -> s1 [109, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s4 -> s1 [0, 110] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18568 += 1 };
  s4 -> s4 [0, 65535] { R18568 += 1, R18504 += 1 };
  s4 -> s7 [111, 111] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s4 -> s1 [112, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18568 += 1 };
  s7 -> s1 [0, 98] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18568 += 1, R18504 += 1 };
  s7 -> s6 [0, 65535] { R18568 += 1 };
  s7 -> s8 [99, 99] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s7 -> s1 [100, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s8 -> s1 [0, 96] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R18568 += 1 };
  s8 -> s8 [0, 65535] { R18568 += 1, R18504 += 1 };
  s8 -> s9 [97, 97] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s8 -> s1 [98, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s9 -> s1 [0, 107] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s9 -> s9 [0, 65535] { R18568 += 1, R18504 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R18568 += 1 };
  s9 -> s10 [108, 108] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s9 -> s1 [109, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s10 -> s1 [0, 103] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R18568 += 1 };
  s10 -> s10 [0, 65535] { R18568 += 1, R18504 += 1 };
  s10 -> s11 [104, 104] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s10 -> s1 [105, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s11 -> s1 [0, 110] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R18568 += 1 };
  s11 -> s11 [0, 65535] { R18568 += 1, R18504 += 1 };
  s11 -> s12 [111, 111] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s11 -> s1 [112, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s12 -> s1 [0, 114] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R18568 += 1 };
  s12 -> s12 [0, 65535] { R18568 += 1, R18504 += 1 };
  s12 -> s13 [115, 115] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s12 -> s1 [116, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s13 -> s1 [0, 115] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s13 -> s13 [0, 65535] { R18568 += 1, R18504 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R18568 += 1 };
  s13 -> s14 [116, 116] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s13 -> s1 [117, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s14 -> s1 [0, 65535] { R18568 += 1, R18504 += 1, R18450 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s15 [0, 65535] { R18568 += 1, R18504 += 1 };
  s15 -> s6 [0, 65535] { R18568 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s0 -> s0 [0, 65535] { R18569 += 1, R18570 += 1 };
  s0 -> s2 [0, 65535] { R18570 += 1, R18506 += 1, R18451 += 1, R18452 += 1 };
  s0 -> s3 [0, 65535] { R18570 += 1, R18505 += 1, R18506 += 1 };
  s0 -> s1 [45, 64] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s0 -> s1 [91, 65535] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s1 -> s1 [0, 43] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s1 -> s1 [0, 65535] { R18570 += 1, R18506 += 1 };
  s1 -> s5 [0, 65535] { R18570 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [45, 64] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s1 -> s1 [91, 65535] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s2 -> s1 [0, 43] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s2 -> s2 [0, 65535] { R18570 += 1, R18506 += 1, R18451 += 1, R18452 += 1 };
  s2 -> s5 [0, 65535] { R18570 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [45, 64] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s2 -> s1 [91, 65535] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s3 -> s1 [0, 43] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s3 -> s2 [0, 65535] { R18570 += 1, R18506 += 1, R18451 += 1, R18452 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18570 += 1, R18505 += 1, R18506 += 1 };
  s3 -> s1 [45, 64] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s3 -> s1 [91, 65535] { R18570 += 1, R18506 += 1, R18452 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18570 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R18572 += 1, R18508 += 1, R18453 += 1, R18454 += 1 };
  s0 -> s2 [0, 65535] { R18572 += 1, R18508 += 1, R18454 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R18571 += 1, R18572 += 1 };
  s0 -> s3 [0, 65535] { R18572 += 1, R18507 += 1, R18508 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18572 += 1, R18508 += 1, R18453 += 1, R18454 += 1 };
  s1 -> s2 [0, 65535] { R18572 += 1, R18508 += 1, R18454 += 1, R3 += 1 };
  s1 -> s6 [0, 65535] { R18572 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18572 += 1, R18508 += 1 };
  s2 -> s2 [0, 65535] { R18572 += 1, R18508 += 1, R18454 += 1, R3 += 1 };
  s2 -> s6 [0, 65535] { R18572 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18572 += 1, R18508 += 1, R18453 += 1, R18454 += 1 };
  s3 -> s2 [0, 65535] { R18572 += 1, R18508 += 1, R18454 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R18572 += 1, R18507 += 1, R18508 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18572 += 1, R18508 += 1 };
  s5 -> s6 [0, 65535] { R18572 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18572 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s0 -> s0 [0, 65535] { R18573 += 1, R18574 += 1 };
  s0 -> s2 [0, 65535] { R18574 += 1, R18510 += 1, R18456 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R18574 += 1, R18509 += 1, R18510 += 1 };
  s0 -> s4 [0, 65535] { R18574 += 1, R18510 += 1, R18455 += 1, R18456 += 1 };
  s0 -> s5 [58, 58] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s0 -> s1 [59, 65535] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s1 -> s1 [0, 57] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s1 -> s6 [0, 65535] { R18574 += 1 };
  s1 -> s1 [0, 65535] { R18574 += 1, R18510 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [58, 58] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s1 -> s1 [59, 65535] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s2 -> s1 [0, 57] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s2 -> s2 [0, 65535] { R18574 += 1, R18510 += 1, R18456 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R18574 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R18574 += 1, R18510 += 1 };
  s2 -> s5 [58, 58] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s2 -> s1 [59, 65535] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s3 -> s1 [0, 57] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s3 -> s2 [0, 65535] { R18574 += 1, R18510 += 1, R18456 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R18574 += 1, R18509 += 1, R18510 += 1 };
  s3 -> s4 [0, 65535] { R18574 += 1, R18510 += 1, R18455 += 1, R18456 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [58, 58] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s3 -> s1 [59, 65535] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s4 -> s1 [0, 57] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s4 -> s2 [0, 65535] { R18574 += 1, R18510 += 1, R18456 += 1, R11 += 1 };
  s4 -> s6 [0, 65535] { R18574 += 1 };
  s4 -> s4 [0, 65535] { R18574 += 1, R18510 += 1, R18455 += 1, R18456 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s5 [58, 58] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s4 -> s1 [59, 65535] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s5 -> s5 [0, 65535] { R18574 += 1, R18510 += 1, R18456 += 1 };
  s6 -> s6 [0, 65535] { R18574 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R18574 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R18574 += 1, R18510 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 90] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s0 -> s2 [0, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18419 += 1, R18420 += 1 };
  s0 -> s0 [0, 65535] { R18575 += 1, R18576 += 1 };
  s0 -> s3 [0, 65535] { R18576 += 1, R18511 += 1, R18512 += 1 };
  s0 -> s4 [0, 65535] { R18576 += 1, R18512 += 1, R18457 += 1, R18458 += 1 };
  s0 -> s5 [91, 91] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s0 -> s1 [92, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s1 -> s8 [0, 65535] { R18576 += 1, R18512 += 1 };
  s1 -> s9 [0, 65535] { R18576 += 1, R18512 += 1, R18458 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R18576 += 1 };
  s1 -> s1 [0, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s2 -> s1 [0, 90] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s2 -> s8 [0, 65535] { R18576 += 1, R18512 += 1 };
  s2 -> s2 [0, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18419 += 1, R18420 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R18576 += 1 };
  s2 -> s5 [91, 91] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s2 -> s1 [92, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s3 -> s1 [0, 90] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s3 -> s2 [0, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18419 += 1, R18420 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18576 += 1, R18511 += 1, R18512 += 1 };
  s3 -> s4 [0, 65535] { R18576 += 1, R18512 += 1, R18457 += 1, R18458 += 1 };
  s3 -> s5 [91, 91] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s3 -> s1 [92, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s4 -> s1 [0, 90] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s4 -> s2 [0, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18419 += 1, R18420 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18576 += 1, R18512 += 1, R18457 += 1, R18458 += 1 };
  s4 -> s7 [0, 65535] { R18576 += 1 };
  s4 -> s5 [91, 91] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s4 -> s1 [92, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s5 -> s1 [0, 65535] { R18576 += 1, R18512 += 1, R18458 += 1, R18420 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18576 += 1 };
  s8 -> s8 [0, 65535] { R18576 += 1, R18512 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R18576 += 1 };
  s9 -> s8 [0, 65535] { R18576 += 1, R18512 += 1 };
  s9 -> s9 [0, 65535] { R18576 += 1, R18512 += 1, R18458 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s7 [0, 65535] { R18576 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1, R18421 += 1, R18422 += 1 };
  s0 -> s2 [0, 65535] { R18578 += 1, R18514 += 1, R18459 += 1, R18460 += 1 };
  s0 -> s3 [0, 65535] { R18578 += 1, R18513 += 1, R18514 += 1 };
  s0 -> s0 [0, 65535] { R18577 += 1, R18578 += 1 };
  s0 -> s4 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1, R18422 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1, R18421 += 1, R18422 += 1 };
  s1 -> s6 [0, 65535] { R18578 += 1, R18514 += 1 };
  s1 -> s7 [0, 65535] { R18578 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1, R18422 += 1, R9 += 1 };
  s2 -> s1 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1, R18421 += 1, R18422 += 1 };
  s2 -> s2 [0, 65535] { R18578 += 1, R18514 += 1, R18459 += 1, R18460 += 1 };
  s2 -> s7 [0, 65535] { R18578 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1, R18422 += 1, R9 += 1 };
  s3 -> s1 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1, R18421 += 1, R18422 += 1 };
  s3 -> s2 [0, 65535] { R18578 += 1, R18514 += 1, R18459 += 1, R18460 += 1 };
  s3 -> s3 [0, 65535] { R18578 += 1, R18513 += 1, R18514 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1, R18422 += 1, R9 += 1 };
  s4 -> s5 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1 };
  s4 -> s6 [0, 65535] { R18578 += 1, R18514 += 1 };
  s4 -> s7 [0, 65535] { R18578 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1, R18422 += 1, R9 += 1 };
  s5 -> s5 [0, 65535] { R18578 += 1, R18514 += 1, R18460 += 1 };
  s5 -> s6 [0, 65535] { R18578 += 1, R18514 += 1 };
  s5 -> s7 [0, 65535] { R18578 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R18578 += 1, R18514 += 1 };
  s6 -> s7 [0, 65535] { R18578 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R18578 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R18580 += 1, R18515 += 1, R18516 += 1 };
  s0 -> s0 [0, 65535] { R18579 += 1, R18580 += 1 };
  s0 -> s2 [0, 65535] { R18580 += 1, R18516 += 1, R18470 += 1, R18417 += 1 };
  s0 -> s3 [0, 65535] { R18580 += 1, R18516 += 1, R18469 += 1, R18470 += 1 };
  s1 -> s1 [0, 65535] { R18580 += 1, R18515 += 1, R18516 += 1 };
  s1 -> s2 [0, 65535] { R18580 += 1, R18516 += 1, R18470 += 1, R18417 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R18580 += 1, R18516 += 1, R18469 += 1, R18470 += 1 };
  s2 -> s4 [0, 65535] { R18580 += 1 };
  s2 -> s2 [0, 65535] { R18580 += 1, R18516 += 1, R18470 += 1, R18417 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18580 += 1, R18516 += 1 };
  s3 -> s4 [0, 65535] { R18580 += 1 };
  s3 -> s2 [0, 65535] { R18580 += 1, R18516 += 1, R18470 += 1, R18417 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18580 += 1, R18516 += 1, R18469 += 1, R18470 += 1 };
  s4 -> s4 [0, 65535] { R18580 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18580 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18580 += 1, R18516 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R18582 += 1, R18518 += 1 };
  s0 -> s0 [0, 65535] { R18581 += 1, R18582 += 1 };
  s0 -> s2 [0, 65535] { R18582 += 1, R18517 += 1, R18518 += 1 };
  s1 -> s4 [0, 65535] { R18582 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18582 += 1, R18518 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18582 += 1, R18518 += 1 };
  s2 -> s2 [0, 65535] { R18582 += 1, R18517 += 1, R18518 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18582 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 86] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s0 -> s0 [0, 65535] { R18583 += 1, R18584 += 1 };
  s0 -> s2 [0, 65535] { R18584 += 1, R18519 += 1, R18520 += 1 };
  s0 -> s3 [0, 65535] { R18584 += 1, R18520 += 1, R18471 += 1, R18472 += 1 };
  s0 -> s4 [87, 87] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s0 -> s5 [87, 87] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s0 -> s1 [88, 65535] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s1 -> s1 [0, 86] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s1 -> s6 [0, 65535] { R18584 += 1 };
  s1 -> s1 [0, 65535] { R18584 += 1, R18520 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [87, 87] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s1 -> s5 [87, 87] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s1 -> s1 [88, 65535] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s2 -> s1 [0, 86] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s2 -> s2 [0, 65535] { R18584 += 1, R18519 += 1, R18520 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R18584 += 1, R18520 += 1, R18471 += 1, R18472 += 1 };
  s2 -> s4 [87, 87] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s2 -> s5 [87, 87] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s2 -> s1 [88, 65535] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s3 -> s1 [0, 86] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s3 -> s6 [0, 65535] { R18584 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R18584 += 1, R18520 += 1, R18471 += 1, R18472 += 1 };
  s3 -> s4 [87, 87] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s3 -> s5 [87, 87] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s3 -> s1 [88, 65535] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s4 -> s4 [0, 65535] { R18584 += 1, R18520 += 1, R18472 += 1, R18439 += 1 };
  s4 -> s6 [0, 65535] { R18584 += 1 };
  s4 -> s8 [0, 65535] { R18584 += 1, R18520 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R18584 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R18584 += 1, R18520 += 1 };
  s6 -> s6 [0, 65535] { R18584 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R18584 += 1 };
  s8 -> s8 [0, 65535] { R18584 += 1, R18520 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R18585 += 1, R18586 += 1 };
  s0 -> s1 [0, 65535] { R18586 += 1, R18522 += 1, R18473 += 1, R18474 += 1 };
  s0 -> s2 [0, 65535] { R18586 += 1, R18521 += 1, R18522 += 1 };
  s0 -> s3 [0, 65535] { R18586 += 1, R18522 += 1, R18474 += 1, R18418 += 1 };
  s1 -> s1 [0, 65535] { R18586 += 1, R18522 += 1, R18473 += 1, R18474 += 1 };
  s1 -> s5 [0, 65535] { R18586 += 1 };
  s1 -> s3 [0, 65535] { R18586 += 1, R18522 += 1, R18474 += 1, R18418 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R18586 += 1, R18522 += 1, R18473 += 1, R18474 += 1 };
  s2 -> s2 [0, 65535] { R18586 += 1, R18521 += 1, R18522 += 1 };
  s2 -> s3 [0, 65535] { R18586 += 1, R18522 += 1, R18474 += 1, R18418 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R18586 += 1, R18522 += 1 };
  s3 -> s5 [0, 65535] { R18586 += 1 };
  s3 -> s3 [0, 65535] { R18586 += 1, R18522 += 1, R18474 += 1, R18418 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18586 += 1, R18522 += 1 };
  s4 -> s5 [0, 65535] { R18586 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18586 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65535] { R18588 += 1, R18523 += 1, R18524 += 1 };
  s0 -> s2 [0, 65535] { R18588 += 1, R18524 += 1 };
  s0 -> s0 [0, 65535] { R18587 += 1, R18588 += 1 };
  s1 -> s1 [0, 65535] { R18588 += 1, R18523 += 1, R18524 += 1 };
  s1 -> s2 [0, 65535] { R18588 += 1, R18524 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R18588 += 1 };
  s2 -> s2 [0, 65535] { R18588 += 1, R18524 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18588 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R6 = R18460 && R7 = R18468 && R8 = R18588 && R19 = 0 && R20 = R18524 && R18427 = 3 && R18428 = R18460 && R18429 = 3 && R18430 = R18460 && R18431 = 0 && R18432 = 10 && R18433 = 0 && R18434 = 10 && R18435 = 0 && R18436 = 2 && R18437 = 0 && R18438 = 2 && R18441 = 0 && R18442 = R18460 && R18443 = 0 && R18444 = R18460 && R18445 = 0 && R18446 = R18460 && R18447 = 0 && R18448 = R18460 && R18449 = 0 && R18450 = R18460 && R18451 = 11 && R18452 = R18460 && R18453 = 11 && R18454 = R18460 && R18455 = 11 && R18456 = R18460 && R18457 = 11 && R18458 = R18460 && R18459 = 11 && R18461 - R18524 = 1 && R18462 = R18468 && R18463 - R18524 = 1 && R18464 = R18468 && R18465 - R18524 = 1 && R18466 = R18468 && R18467 - R18524 = 1 && R18475 = 0 && R18476 = R18524 && R18477 = 0 && R18478 = R18524 && R18479 = 0 && R18480 = R18524 && R18481 = 0 && R18482 = R18524 && R18483 = 0 && R18484 = R18524 && R18485 = 0 && R18486 = R18524 && R18487 = 0 && R18488 = R18524 && R18489 = 0 && R18490 = R18524 && R18491 = 0 && R18492 = R18524 && R18493 = 0 && R18494 = R18524 && R18495 = 0 && R18496 = R18524 && R18497 = 0 && R18498 = R18524 && R18499 = 0 && R18500 = R18524 && R18501 = 0 && R18502 = R18524 && R18503 = 0 && R18504 = R18524 && R18505 = 0 && R18506 = R18524 && R18507 = 0 && R18508 = R18524 && R18509 = 0 && R18510 = R18524 && R18511 = 0 && R18512 = R18524 && R18513 = 0 && R18514 = R18524 && R18515 = 0 && R18516 = R18524 && R18517 = 0 && R18518 = R18524 && R18519 = 0 && R18520 = R18524 && R18521 = 0 && R18522 = R18524 && R18523 = 0 && R18525 = 10 && R18526 = R18588 && R18527 = 10 && R18528 = R18588 && R18529 = 10 && R18530 = R18588 && R18531 = 10 && R18532 = R18588 && R18533 = 10 && R18534 = R18588 && R18535 = 10 && R18536 = R18588 && R18537 = 10 && R18538 = R18588 && R18539 = 10 && R18540 = R18588 && R18541 = 10 && R18542 = R18588 && R18543 = 10 && R18544 = R18588 && R18545 = 10 && R18546 = R18588 && R18547 = 10 && R18548 = R18588 && R18549 = 10 && R18550 = R18588 && R18551 = 10 && R18552 = R18588 && R18553 = 10 && R18554 = R18588 && R18555 = 10 && R18556 = R18588 && R18557 = 10 && R18558 = R18588 && R18559 = 10 && R18560 = R18588 && R18561 = 10 && R18562 = R18588 && R18563 = 10 && R18564 = R18588 && R18565 = 10 && R18566 = R18588 && R18567 = 10 && R18568 = R18588 && R18569 = 10 && R18570 = R18588 && R18571 = 10 && R18572 = R18588 && R18573 = 10 && R18574 = R18588 && R18575 = 10 && R18576 = R18588 && R18577 = 10 && R18578 = R18588 && R18579 = 10 && R18580 = R18588 && R18581 = 10 && R18582 = R18588 && R18583 = 10 && R18584 = R18588 && R18585 = 10 && R18586 = R18588 && R18587 = 10 && R0 != 0 && R1 != 0 && R3 != 0 && R4 != 0 && R5 != 0 && R18440 + R18439 != 0 && R11 < 1 && R12 < 1 && R15 < 1 && 10 < R18460 && R18524 < R18468 && -1 < R18524 && 9 < R18588 && (R18419 != 0 || ((R9 != 0 || ((R3 != R18420 || R18420 = 1 || R18420 < 0) && (R3 = R18420 || R18420 = 1 || R3 < 1))) && (R9 = 0 || ((R3 != R18420 || R18420 = 1 || R18420 < 0) && (R18420 != 1 || -1 < R3) && (R3 = R18420 || R18420 = 1))))) && (R18421 != 0 || ((R9 != 0 || ((R3 != R18422 || R18422 = 1 || R18422 < 0) && (R3 = R18422 || R18422 = 1 || R3 < 1))) && (R9 = 0 || ((R3 != R18422 || R18422 = 1 || R18422 < 0) && (R18422 != 1 || -1 < R3) && (R3 = R18422 || R18422 = 1))))) && (R18423 != 0 || ((R10 != 0 || ((R5 != R18424 || R18424 = 1 || R18424 < 0) && (R5 = R18424 || R18424 = 1 || R5 < 1))) && (R10 = 0 || ((R5 != R18424 || R18424 = 1 || R18424 < 0) && (R18424 != 1 || -1 < R5) && (R5 = R18424 || R18424 = 1))))) && (R18425 != 0 || ((R10 != 0 || ((R5 != R18426 || R18426 = 1 || R18426 < 0) && (R5 = R18426 || R18426 = 1 || R5 < 1))) && (R10 = 0 || ((R5 != R18426 || R18426 = 1 || R18426 < 0) && (R18426 != 1 || -1 < R5) && (R5 = R18426 || R18426 = 1))))) && (R18417 = 0 || (R18469 = 0 && R18470 = 0)) && (R18417 = 0 || (R18471 = 0 && R18472 = 0)) && (R18418 = 0 || (R18473 = 0 && R18474 = 0)) && (R18419 = 0 || (R9 = 0 && R3 < 0)) && (R18421 = 0 || (R9 = 0 && R3 < 0)) && (R18423 = 0 || (R10 = 0 && R5 < 0)) && (R18425 = 0 || (R10 = 0 && R5 < 0));
// End of Parikh automata intersection problem
