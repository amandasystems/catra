// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R2, R3, R4, R5, R6, R7, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R118 += 1 };
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s2 [46, 46] { R118 += 1 };
  s0 -> s3 [47, 47] { R118 += 1 };
  s0 -> s1 [48, 65535] { R118 += 1 };
  s1 -> s1 [0, 45] { R118 += 1 };
  s1 -> s2 [46, 46] { R118 += 1 };
  s1 -> s3 [47, 47] { R118 += 1 };
  s1 -> s1 [48, 65535] { R118 += 1 };
  s2 -> s1 [0, 45] { R118 += 1 };
  s2 -> s2 [46, 46] { R118 += 1 };
  s2 -> s3 [47, 47] { R118 += 1 };
  s2 -> s1 [48, 114] { R118 += 1 };
  s2 -> s8 [115, 115] { R118 += 1 };
  s2 -> s1 [116, 65535] { R118 += 1 };
  s3 -> s3 [0, 45] { R118 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R118 += 1 };
  s3 -> s3 [47, 65535] { R118 += 1 };
  s4 -> s3 [0, 45] { R118 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R118 += 1 };
  s4 -> s3 [47, 114] { R118 += 1 };
  s4 -> s5 [115, 115] { R118 += 1 };
  s4 -> s3 [116, 65535] { R118 += 1 };
  s5 -> s3 [0, 45] { R118 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R118 += 1 };
  s5 -> s3 [47, 110] { R118 += 1 };
  s5 -> s6 [111, 111] { R118 += 1 };
  s5 -> s3 [112, 65535] { R118 += 1 };
  s6 -> s3 [0, 45] { R118 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R118 += 1 };
  s6 -> s3 [47, 98] { R118 += 1 };
  s6 -> s7 [99, 99] { R118 += 1 };
  s6 -> s3 [100, 65535] { R118 += 1 };
  s7 -> s3 [0, 45] { R118 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R118 += 1 };
  s7 -> s3 [47, 106] { R118 += 1 };
  s7 -> s3 [108, 65535] { R118 += 1 };
  s8 -> s1 [0, 45] { R118 += 1 };
  s8 -> s2 [46, 46] { R118 += 1 };
  s8 -> s3 [47, 47] { R118 += 1 };
  s8 -> s1 [48, 110] { R118 += 1 };
  s8 -> s9 [111, 111] { R118 += 1 };
  s8 -> s1 [112, 65535] { R118 += 1 };
  s9 -> s1 [0, 45] { R118 += 1 };
  s9 -> s2 [46, 46] { R118 += 1 };
  s9 -> s3 [47, 47] { R118 += 1 };
  s9 -> s1 [48, 98] { R118 += 1 };
  s9 -> s10 [99, 99] { R118 += 1 };
  s9 -> s1 [100, 65535] { R118 += 1 };
  s10 -> s1 [0, 45] { R118 += 1 };
  s10 -> s2 [46, 46] { R118 += 1 };
  s10 -> s3 [47, 47] { R118 += 1 };
  s10 -> s1 [48, 106] { R118 += 1 };
  s10 -> s1 [108, 65535] { R118 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s1 [0, 65535] { R120 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R120 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R122 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R122 += 1, R11 += 1, R12 += 1 };
  s0 -> s3 [47, 47] { R122 += 1 };
  s0 -> s1 [48, 65535] { R122 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R122 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R122 += 1 };
  s1 -> s1 [48, 65535] { R122 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R122 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R122 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R122 += 1 };
  s2 -> s1 [48, 65535] { R122 += 1, R12 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R122 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 42] { R124 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R124 += 1, R93 += 1, R94 += 1 };
  s0 -> s3 [43, 43] { R124 += 1, R94 += 1 };
  s0 -> s1 [44, 45] { R124 += 1, R94 += 1 };
  s0 -> s1 [47, 62] { R124 += 1, R94 += 1 };
  s0 -> s1 [64, 65535] { R124 += 1, R94 += 1 };
  s1 -> s1 [0, 42] { R124 += 1, R94 += 1 };
  s1 -> s3 [43, 43] { R124 += 1, R94 += 1 };
  s1 -> s1 [44, 45] { R124 += 1, R94 += 1 };
  s1 -> s1 [47, 62] { R124 += 1, R94 += 1 };
  s1 -> s1 [64, 65535] { R124 += 1, R94 += 1 };
  s2 -> s1 [0, 42] { R124 += 1, R94 += 1 };
  s2 -> s2 [0, 65535] { R124 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [43, 43] { R124 += 1, R94 += 1 };
  s2 -> s1 [44, 45] { R124 += 1, R94 += 1 };
  s2 -> s1 [47, 62] { R124 += 1, R94 += 1 };
  s2 -> s1 [64, 65535] { R124 += 1, R94 += 1 };
  s3 -> s3 [0, 45] { R124 += 1, R94 += 1 };
  s3 -> s3 [0, 65535] { R124 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [47, 62] { R124 += 1, R94 += 1 };
  s3 -> s3 [64, 65535] { R124 += 1, R94 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R126 += 1, R96 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s2 [0, 65535] { R126 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535] { R126 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R126 += 1, R96 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R126 += 1, R96 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R126 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R126 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 42] { R128 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R97 += 1, R98 += 1 };
  s0 -> s3 [0, 65535] { R128 += 1, R98 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s4 [43, 43] { R128 += 1, R98 += 1 };
  s0 -> s1 [44, 65535] { R128 += 1, R98 += 1 };
  s1 -> s1 [0, 42] { R128 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R128 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [43, 43] { R128 += 1, R98 += 1 };
  s1 -> s1 [44, 65535] { R128 += 1, R98 += 1 };
  s2 -> s1 [0, 42] { R128 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R128 += 1, R97 += 1, R98 += 1 };
  s2 -> s3 [0, 65535] { R128 += 1, R98 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [43, 43] { R128 += 1, R98 += 1 };
  s2 -> s1 [44, 65535] { R128 += 1, R98 += 1 };
  s3 -> s1 [0, 42] { R128 += 1, R98 += 1 };
  s3 -> s5 [0, 65535] { R128 += 1 };
  s3 -> s3 [0, 65535] { R128 += 1, R98 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [43, 43] { R128 += 1, R98 += 1 };
  s3 -> s1 [44, 65535] { R128 += 1, R98 += 1 };
  s4 -> s4 [0, 65535] { R128 += 1, R98 += 1 };
  s5 -> s5 [0, 65535] { R128 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 62] { R130 += 1, R100 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s3 [0, 65535] { R130 += 1, R100 += 1, R85 += 1, R86 += 1 };
  s0 -> s4 [63, 63] { R130 += 1, R100 += 1, R86 += 1 };
  s0 -> s1 [64, 65535] { R130 += 1, R100 += 1, R86 += 1 };
  s1 -> s1 [0, 65535] { R130 += 1, R100 += 1, R86 += 1 };
  s1 -> s6 [0, 65535] { R130 += 1 };
  s1 -> s7 [0, 65535] { R130 += 1, R100 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R130 += 1, R100 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R130 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535] { R130 += 1, R100 += 1, R85 += 1, R86 += 1 };
  s2 -> s4 [63, 63] { R130 += 1, R100 += 1, R86 += 1 };
  s2 -> s1 [64, 65535] { R130 += 1, R100 += 1, R86 += 1 };
  s3 -> s1 [0, 62] { R130 += 1, R100 += 1, R86 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R130 += 1 };
  s3 -> s3 [0, 65535] { R130 += 1, R100 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [63, 63] { R130 += 1, R100 += 1, R86 += 1 };
  s3 -> s1 [64, 65535] { R130 += 1, R100 += 1, R86 += 1 };
  s4 -> s1 [0, 65535] { R130 += 1, R100 += 1, R86 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R130 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R130 += 1 };
  s7 -> s7 [0, 65535] { R130 += 1, R100 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R132 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R102 += 1, R88 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R132 += 1, R102 += 1, R87 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R132 += 1, R101 += 1, R102 += 1 };
  s1 -> s2 [0, 65535] { R132 += 1, R102 += 1, R88 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R132 += 1, R102 += 1, R87 += 1, R88 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R132 += 1, R102 += 1, R88 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R132 += 1, R102 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R132 += 1 };
  s3 -> s2 [0, 65535] { R132 += 1, R102 += 1, R88 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R132 += 1, R102 += 1, R87 += 1, R88 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R132 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R132 += 1 };
  s6 -> s6 [0, 65535] { R132 += 1, R102 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R132 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 42] { R134 += 1, R104 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R134 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s3 [0, 65535] { R134 += 1, R104 += 1, R89 += 1, R90 += 1 };
  s0 -> s4 [43, 43] { R134 += 1, R104 += 1, R90 += 1 };
  s0 -> s1 [44, 65535] { R134 += 1, R104 += 1, R90 += 1 };
  s1 -> s1 [0, 42] { R134 += 1, R104 += 1, R90 += 1 };
  s1 -> s4 [43, 43] { R134 += 1, R104 += 1, R90 += 1 };
  s1 -> s1 [44, 65535] { R134 += 1, R104 += 1, R90 += 1 };
  s2 -> s1 [0, 42] { R134 += 1, R104 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R134 += 1, R103 += 1, R104 += 1 };
  s2 -> s3 [0, 65535] { R134 += 1, R104 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [43, 43] { R134 += 1, R104 += 1, R90 += 1 };
  s2 -> s1 [44, 65535] { R134 += 1, R104 += 1, R90 += 1 };
  s3 -> s1 [0, 42] { R134 += 1, R104 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R134 += 1, R104 += 1, R89 += 1, R90 += 1 };
  s3 -> s4 [43, 43] { R134 += 1, R104 += 1, R90 += 1 };
  s3 -> s1 [44, 65535] { R134 += 1, R104 += 1, R90 += 1 };
  s4 -> s4 [0, 65535] { R134 += 1, R104 += 1, R90 += 1 };
  s4 -> s5 [0, 65535] { R134 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R134 += 1, R104 += 1 };
  s5 -> s5 [0, 65535] { R134 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R134 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R134 += 1, R104 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R136 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R106 += 1, R92 += 1, R80 += 1 };
  s0 -> s3 [0, 65535] { R136 += 1, R106 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R136 += 1, R105 += 1, R106 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R136 += 1, R106 += 1, R92 += 1, R80 += 1 };
  s1 -> s3 [0, 65535] { R136 += 1, R106 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [0, 65535] { R136 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R136 += 1, R106 += 1, R92 += 1, R80 += 1 };
  s2 -> s6 [0, 65535] { R136 += 1, R106 += 1 };
  s3 -> s4 [0, 65535] { R136 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R136 += 1, R106 += 1, R92 += 1, R80 += 1 };
  s3 -> s3 [0, 65535] { R136 += 1, R106 += 1, R91 += 1, R92 += 1 };
  s4 -> s4 [0, 65535] { R136 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R136 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R136 += 1, R106 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 43] { R138 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s2 [0, 65535] { R138 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [45, 63] { R138 += 1, R108 += 1 };
  s0 -> s1 [91, 65535] { R138 += 1, R108 += 1 };
  s1 -> s1 [0, 43] { R138 += 1, R108 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R138 += 1 };
  s1 -> s1 [45, 63] { R138 += 1, R108 += 1 };
  s1 -> s1 [91, 65535] { R138 += 1, R108 += 1 };
  s2 -> s1 [0, 43] { R138 += 1, R108 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R138 += 1, R107 += 1, R108 += 1 };
  s2 -> s1 [45, 63] { R138 += 1, R108 += 1 };
  s2 -> s1 [91, 65535] { R138 += 1, R108 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R140 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R140 += 1, R110 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R140 += 1, R109 += 1, R110 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R140 += 1, R110 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R140 += 1 };
  s2 -> s2 [0, 65535] { R140 += 1, R110 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R140 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 57] { R142 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s0 -> s2 [0, 65535] { R142 += 1, R112 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R142 += 1, R111 += 1, R112 += 1 };
  s0 -> s4 [58, 58] { R142 += 1, R112 += 1 };
  s0 -> s1 [59, 65535] { R142 += 1, R112 += 1 };
  s1 -> s1 [0, 57] { R142 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R142 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R142 += 1, R112 += 1 };
  s1 -> s1 [59, 65535] { R142 += 1, R112 += 1 };
  s2 -> s1 [0, 57] { R142 += 1, R112 += 1 };
  s2 -> s6 [0, 65535] { R142 += 1 };
  s2 -> s2 [0, 65535] { R142 += 1, R112 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R142 += 1, R112 += 1 };
  s2 -> s1 [59, 65535] { R142 += 1, R112 += 1 };
  s3 -> s1 [0, 57] { R142 += 1, R112 += 1 };
  s3 -> s2 [0, 65535] { R142 += 1, R112 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R142 += 1, R111 += 1, R112 += 1 };
  s3 -> s4 [58, 58] { R142 += 1, R112 += 1 };
  s3 -> s1 [59, 65535] { R142 += 1, R112 += 1 };
  s4 -> s4 [0, 65535] { R142 += 1, R112 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R142 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 90] { R144 += 1, R114 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R144 += 1, R114 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R143 += 1, R144 += 1 };
  s0 -> s3 [0, 65535] { R144 += 1, R113 += 1, R114 += 1 };
  s0 -> s4 [91, 91] { R144 += 1, R114 += 1, R82 += 1 };
  s0 -> s1 [92, 65535] { R144 += 1, R114 += 1, R82 += 1 };
  s1 -> s7 [0, 65535] { R144 += 1, R114 += 1 };
  s1 -> s6 [0, 65535] { R144 += 1 };
  s1 -> s1 [0, 65535] { R144 += 1, R114 += 1, R82 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 90] { R144 += 1, R114 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R144 += 1, R114 += 1, R81 += 1, R82 += 1 };
  s2 -> s6 [0, 65535] { R144 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R144 += 1, R114 += 1, R82 += 1 };
  s2 -> s1 [92, 65535] { R144 += 1, R114 += 1, R82 += 1 };
  s3 -> s1 [0, 90] { R144 += 1, R114 += 1, R82 += 1 };
  s3 -> s2 [0, 65535] { R144 += 1, R114 += 1, R81 += 1, R82 += 1 };
  s3 -> s3 [0, 65535] { R144 += 1, R113 += 1, R114 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R144 += 1, R114 += 1, R82 += 1 };
  s3 -> s1 [92, 65535] { R144 += 1, R114 += 1, R82 += 1 };
  s4 -> s1 [0, 65535] { R144 += 1, R114 += 1, R82 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R144 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R144 += 1, R114 += 1 };
  s7 -> s6 [0, 65535] { R144 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R146 += 1, R115 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R146 += 1, R116 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s3 [0, 65535] { R146 += 1, R116 += 1, R84 += 1, R4 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R146 += 1, R115 += 1, R116 += 1 };
  s1 -> s2 [0, 65535] { R146 += 1, R116 += 1, R83 += 1, R84 += 1 };
  s1 -> s3 [0, 65535] { R146 += 1, R116 += 1, R84 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R146 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R146 += 1, R116 += 1, R83 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R146 += 1, R116 += 1, R84 += 1, R4 += 1 };
  s3 -> s4 [0, 65535] { R146 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R146 += 1, R116 += 1 };
  s3 -> s3 [0, 65535] { R146 += 1, R116 += 1, R84 += 1, R4 += 1 };
  s4 -> s4 [0, 65535] { R146 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R146 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R146 += 1, R116 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R92 && R2 = R106 && R3 = R146 && R11 = 0 && R12 = R116 && R85 = 0 && R86 = 1 && R87 = 0 && R88 = 1 && R89 = 0 && R90 = R92 && R91 = 0 && R93 - R116 = 1 && R94 = R106 && R95 - R116 = 1 && R96 = R106 && R97 - R116 = 1 && R98 = R106 && R99 - R116 = 1 && R100 = R106 && R101 - R116 = 1 && R102 = R106 && R103 - R116 = 1 && R104 = R106 && R105 - R116 = 1 && R107 = 0 && R108 = R116 && R109 = 0 && R110 = R116 && R111 = 0 && R112 = R116 && R113 = 0 && R114 = R116 && R115 = 0 && R117 = 10 && R118 = R146 && R119 = 10 && R120 = R146 && R121 = 10 && R122 = R146 && R123 = 10 && R124 = R146 && R125 = 10 && R126 = R146 && R127 = 10 && R128 = R146 && R129 = 10 && R130 = R146 && R131 = 10 && R132 = R146 && R133 = 10 && R134 = R146 && R135 = 10 && R136 = R146 && R137 = 10 && R138 = R146 && R139 = 10 && R140 = R146 && R141 = 10 && R142 = R146 && R143 = 10 && R144 = R146 && R145 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R92 && R116 < R106 && -1 < R116 && 9 < R146 && (R81 != 0 || ((R4 != 0 || ((R0 != R82 || R82 = 1 || R82 < 0) && (R0 = R82 || R82 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R82 || R82 = 1 || R82 < 0) && (R82 != 1 || -1 < R0) && (R0 = R82 || R82 = 1))))) && (R83 != 0 || ((R4 != 0 || ((R0 != R84 || R84 = 1 || R84 < 0) && (R0 = R84 || R84 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R84 || R84 = 1 || R84 < 0) && (R84 != 1 || -1 < R0) && (R0 = R84 || R84 = 1))))) && (R81 = 0 || (R4 = 0 && R0 < 0)) && (R83 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
