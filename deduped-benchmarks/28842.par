// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R3, R4, R481, R482, R486, R487, R5, R6, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R705, R706, R707, R708, R709, R710, R711, R712, R713, R714, R715, R716, R717, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R681 += 1 };
  s0 -> s0 [0, 65535] { R680 += 1, R681 += 1 };
  s0 -> s2 [46, 46] { R681 += 1 };
  s0 -> s3 [47, 47] { R681 += 1 };
  s0 -> s1 [48, 65535] { R681 += 1 };
  s1 -> s1 [0, 45] { R681 += 1 };
  s1 -> s2 [46, 46] { R681 += 1 };
  s1 -> s3 [47, 47] { R681 += 1 };
  s1 -> s1 [48, 65535] { R681 += 1 };
  s2 -> s1 [0, 45] { R681 += 1 };
  s2 -> s2 [46, 46] { R681 += 1 };
  s2 -> s3 [47, 47] { R681 += 1 };
  s2 -> s1 [48, 114] { R681 += 1 };
  s2 -> s8 [115, 115] { R681 += 1 };
  s2 -> s1 [116, 65535] { R681 += 1 };
  s3 -> s3 [0, 45] { R681 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R681 += 1 };
  s3 -> s3 [47, 65535] { R681 += 1 };
  s4 -> s3 [0, 45] { R681 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R681 += 1 };
  s4 -> s3 [47, 114] { R681 += 1 };
  s4 -> s5 [115, 115] { R681 += 1 };
  s4 -> s3 [116, 65535] { R681 += 1 };
  s5 -> s3 [0, 45] { R681 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R681 += 1 };
  s5 -> s3 [47, 110] { R681 += 1 };
  s5 -> s6 [111, 111] { R681 += 1 };
  s5 -> s3 [112, 65535] { R681 += 1 };
  s6 -> s3 [0, 45] { R681 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R681 += 1 };
  s6 -> s3 [47, 98] { R681 += 1 };
  s6 -> s7 [99, 99] { R681 += 1 };
  s6 -> s3 [100, 65535] { R681 += 1 };
  s7 -> s3 [0, 45] { R681 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R681 += 1 };
  s7 -> s3 [47, 106] { R681 += 1 };
  s7 -> s3 [108, 65535] { R681 += 1 };
  s8 -> s1 [0, 45] { R681 += 1 };
  s8 -> s2 [46, 46] { R681 += 1 };
  s8 -> s3 [47, 47] { R681 += 1 };
  s8 -> s1 [48, 110] { R681 += 1 };
  s8 -> s9 [111, 111] { R681 += 1 };
  s8 -> s1 [112, 65535] { R681 += 1 };
  s9 -> s1 [0, 45] { R681 += 1 };
  s9 -> s2 [46, 46] { R681 += 1 };
  s9 -> s3 [47, 47] { R681 += 1 };
  s9 -> s1 [48, 98] { R681 += 1 };
  s9 -> s10 [99, 99] { R681 += 1 };
  s9 -> s1 [100, 65535] { R681 += 1 };
  s10 -> s1 [0, 45] { R681 += 1 };
  s10 -> s2 [46, 46] { R681 += 1 };
  s10 -> s3 [47, 47] { R681 += 1 };
  s10 -> s1 [48, 106] { R681 += 1 };
  s10 -> s1 [108, 65535] { R681 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R682 += 1, R683 += 1 };
  s0 -> s1 [0, 65535] { R683 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R683 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R685 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R684 += 1, R685 += 1 };
  s0 -> s2 [0, 65535] { R685 += 1, R486 += 1, R487 += 1 };
  s0 -> s3 [47, 47] { R685 += 1 };
  s0 -> s1 [48, 65535] { R685 += 1, R487 += 1 };
  s1 -> s1 [0, 46] { R685 += 1, R487 += 1 };
  s1 -> s3 [47, 47] { R685 += 1 };
  s1 -> s1 [48, 65535] { R685 += 1, R487 += 1 };
  s2 -> s1 [0, 46] { R685 += 1, R487 += 1 };
  s2 -> s2 [0, 65535] { R685 += 1, R486 += 1, R487 += 1 };
  s2 -> s3 [47, 47] { R685 += 1 };
  s2 -> s1 [48, 65535] { R685 += 1, R487 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R685 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R687 += 1, R616 += 1, R617 += 1 };
  s0 -> s2 [0, 65535] { R687 += 1, R617 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R686 += 1, R687 += 1 };
  s1 -> s1 [0, 65535] { R687 += 1, R616 += 1, R617 += 1 };
  s1 -> s2 [0, 65535] { R687 += 1, R617 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R687 += 1, R617 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R687 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R687 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R689 += 1, R651 += 1 };
  s0 -> s0 [0, 65535] { R688 += 1, R689 += 1 };
  s0 -> s2 [0, 65535] { R689 += 1, R650 += 1, R651 += 1 };
  s0 -> s3 [64, 64] { R689 += 1, R651 += 1 };
  s0 -> s1 [65, 65535] { R689 += 1, R651 += 1 };
  s1 -> s1 [0, 63] { R689 += 1, R651 += 1 };
  s1 -> s3 [64, 64] { R689 += 1, R651 += 1 };
  s1 -> s1 [65, 65535] { R689 += 1, R651 += 1 };
  s2 -> s1 [0, 63] { R689 += 1, R651 += 1 };
  s2 -> s2 [0, 65535] { R689 += 1, R650 += 1, R651 += 1 };
  s2 -> s3 [64, 64] { R689 += 1, R651 += 1 };
  s2 -> s1 [65, 65535] { R689 += 1, R651 += 1 };
  s3 -> s4 [0, 65535] { R689 += 1 };
  s3 -> s3 [0, 65535] { R689 += 1, R651 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R689 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R691 += 1, R652 += 1, R653 += 1 };
  s0 -> s2 [0, 65535] { R691 += 1, R653 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R690 += 1, R691 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R691 += 1, R652 += 1, R653 += 1 };
  s1 -> s2 [0, 65535] { R691 += 1, R653 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R691 += 1, R653 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R691 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R691 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 36] { R693 += 1, R655 += 1, R613 += 1 };
  s0 -> s0 [0, 65535] { R692 += 1, R693 += 1 };
  s0 -> s2 [0, 65535] { R693 += 1, R654 += 1, R655 += 1 };
  s0 -> s3 [0, 65535] { R693 += 1, R655 += 1, R612 += 1, R613 += 1 };
  s0 -> s1 [38, 42] { R693 += 1, R655 += 1, R613 += 1 };
  s0 -> s1 [44, 57] { R693 += 1, R655 += 1, R613 += 1 };
  s0 -> s1 [59, 63] { R693 += 1, R655 += 1, R613 += 1 };
  s0 -> s1 [65, 65535] { R693 += 1, R655 += 1, R613 += 1 };
  s1 -> s1 [0, 36] { R693 += 1, R655 += 1, R613 += 1 };
  s1 -> s1 [0, 65535] { R693 += 1, R655 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R693 += 1 };
  s1 -> s1 [38, 42] { R693 += 1, R655 += 1, R613 += 1 };
  s1 -> s1 [44, 57] { R693 += 1, R655 += 1, R613 += 1 };
  s1 -> s1 [59, 63] { R693 += 1, R655 += 1, R613 += 1 };
  s1 -> s1 [65, 65535] { R693 += 1, R655 += 1, R613 += 1 };
  s2 -> s1 [0, 36] { R693 += 1, R655 += 1, R613 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R693 += 1, R654 += 1, R655 += 1 };
  s2 -> s3 [0, 65535] { R693 += 1, R655 += 1, R612 += 1, R613 += 1 };
  s2 -> s1 [38, 42] { R693 += 1, R655 += 1, R613 += 1 };
  s2 -> s1 [44, 57] { R693 += 1, R655 += 1, R613 += 1 };
  s2 -> s1 [59, 63] { R693 += 1, R655 += 1, R613 += 1 };
  s2 -> s1 [65, 65535] { R693 += 1, R655 += 1, R613 += 1 };
  s3 -> s1 [0, 36] { R693 += 1, R655 += 1, R613 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R693 += 1 };
  s3 -> s3 [0, 65535] { R693 += 1, R655 += 1, R612 += 1, R613 += 1 };
  s3 -> s1 [38, 42] { R693 += 1, R655 += 1, R613 += 1 };
  s3 -> s1 [44, 57] { R693 += 1, R655 += 1, R613 += 1 };
  s3 -> s1 [59, 63] { R693 += 1, R655 += 1, R613 += 1 };
  s3 -> s1 [65, 65535] { R693 += 1, R655 += 1, R613 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R693 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R695 += 1, R657 += 1, R615 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R694 += 1, R695 += 1 };
  s0 -> s2 [0, 65535] { R695 += 1, R657 += 1, R614 += 1, R615 += 1 };
  s0 -> s3 [0, 65535] { R695 += 1, R656 += 1, R657 += 1 };
  s1 -> s5 [0, 65535] { R695 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R695 += 1, R657 += 1, R615 += 1, R0 += 1 };
  s1 -> s6 [0, 65535] { R695 += 1, R657 += 1 };
  s2 -> s5 [0, 65535] { R695 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R695 += 1, R657 += 1, R615 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R695 += 1, R657 += 1, R614 += 1, R615 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R695 += 1, R657 += 1, R615 += 1, R0 += 1 };
  s3 -> s2 [0, 65535] { R695 += 1, R657 += 1, R614 += 1, R615 += 1 };
  s3 -> s3 [0, 65535] { R695 += 1, R656 += 1, R657 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R695 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R695 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R695 += 1, R657 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 43] { R697 += 1, R659 += 1, R629 += 1 };
  s0 -> s2 [0, 65535] { R697 += 1, R659 += 1, R628 += 1, R629 += 1 };
  s0 -> s3 [0, 65535] { R697 += 1, R658 += 1, R659 += 1 };
  s0 -> s0 [0, 65535] { R696 += 1, R697 += 1 };
  s0 -> s1 [45, 64] { R697 += 1, R659 += 1, R629 += 1 };
  s0 -> s4 [83, 83] { R697 += 1, R659 += 1, R629 += 1 };
  s0 -> s1 [84, 65535] { R697 += 1, R659 += 1, R629 += 1 };
  s1 -> s1 [0, 43] { R697 += 1, R659 += 1, R629 += 1 };
  s1 -> s1 [45, 64] { R697 += 1, R659 += 1, R629 += 1 };
  s1 -> s4 [83, 83] { R697 += 1, R659 += 1, R629 += 1 };
  s1 -> s1 [84, 65535] { R697 += 1, R659 += 1, R629 += 1 };
  s2 -> s1 [0, 43] { R697 += 1, R659 += 1, R629 += 1 };
  s2 -> s2 [0, 65535] { R697 += 1, R659 += 1, R628 += 1, R629 += 1 };
  s2 -> s1 [45, 64] { R697 += 1, R659 += 1, R629 += 1 };
  s2 -> s4 [83, 83] { R697 += 1, R659 += 1, R629 += 1 };
  s2 -> s1 [84, 65535] { R697 += 1, R659 += 1, R629 += 1 };
  s3 -> s1 [0, 43] { R697 += 1, R659 += 1, R629 += 1 };
  s3 -> s2 [0, 65535] { R697 += 1, R659 += 1, R628 += 1, R629 += 1 };
  s3 -> s3 [0, 65535] { R697 += 1, R658 += 1, R659 += 1 };
  s3 -> s1 [45, 64] { R697 += 1, R659 += 1, R629 += 1 };
  s3 -> s4 [83, 83] { R697 += 1, R659 += 1, R629 += 1 };
  s3 -> s1 [84, 65535] { R697 += 1, R659 += 1, R629 += 1 };
  s4 -> s4 [0, 43] { R697 += 1, R659 += 1, R629 += 1 };
  s4 -> s5 [0, 65535] { R697 += 1 };
  s4 -> s4 [0, 65535] { R697 += 1, R659 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [45, 64] { R697 += 1, R659 += 1, R629 += 1 };
  s4 -> s4 [83, 65535] { R697 += 1, R659 += 1, R629 += 1 };
  s5 -> s5 [0, 65535] { R697 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R699 += 1, R661 += 1, R631 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R698 += 1, R699 += 1 };
  s0 -> s2 [0, 65535] { R699 += 1, R661 += 1, R630 += 1, R631 += 1 };
  s0 -> s3 [0, 65535] { R699 += 1, R660 += 1, R661 += 1 };
  s1 -> s1 [0, 65535] { R699 += 1, R661 += 1, R631 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R699 += 1, R661 += 1 };
  s1 -> s5 [0, 65535] { R699 += 1 };
  s2 -> s1 [0, 65535] { R699 += 1, R661 += 1, R631 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R699 += 1, R661 += 1, R630 += 1, R631 += 1 };
  s2 -> s5 [0, 65535] { R699 += 1 };
  s3 -> s1 [0, 65535] { R699 += 1, R661 += 1, R631 += 1, R3 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R699 += 1, R661 += 1, R630 += 1, R631 += 1 };
  s3 -> s3 [0, 65535] { R699 += 1, R660 += 1, R661 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R699 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R699 += 1, R661 += 1 };
  s6 -> s5 [0, 65535] { R699 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 57] { R701 += 1, R663 += 1, R633 += 1 };
  s0 -> s2 [0, 65535] { R701 += 1, R663 += 1, R632 += 1, R633 += 1 };
  s0 -> s3 [0, 65535] { R701 += 1, R662 += 1, R663 += 1 };
  s0 -> s4 [0, 65535] { R701 += 1, R663 += 1, R633 += 1, R481 += 1 };
  s0 -> s0 [0, 65535] { R700 += 1, R701 += 1 };
  s0 -> s5 [58, 58] { R701 += 1, R663 += 1, R633 += 1 };
  s0 -> s1 [59, 65535] { R701 += 1, R663 += 1, R633 += 1 };
  s1 -> s1 [0, 57] { R701 += 1, R663 += 1, R633 += 1 };
  s1 -> s7 [0, 65535] { R701 += 1 };
  s1 -> s1 [0, 65535] { R701 += 1, R663 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [58, 58] { R701 += 1, R663 += 1, R633 += 1 };
  s1 -> s1 [59, 65535] { R701 += 1, R663 += 1, R633 += 1 };
  s2 -> s1 [0, 57] { R701 += 1, R663 += 1, R633 += 1 };
  s2 -> s2 [0, 65535] { R701 += 1, R663 += 1, R632 += 1, R633 += 1 };
  s2 -> s7 [0, 65535] { R701 += 1 };
  s2 -> s4 [0, 65535] { R701 += 1, R663 += 1, R633 += 1, R481 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [58, 58] { R701 += 1, R663 += 1, R633 += 1 };
  s2 -> s1 [59, 65535] { R701 += 1, R663 += 1, R633 += 1 };
  s3 -> s1 [0, 57] { R701 += 1, R663 += 1, R633 += 1 };
  s3 -> s2 [0, 65535] { R701 += 1, R663 += 1, R632 += 1, R633 += 1 };
  s3 -> s3 [0, 65535] { R701 += 1, R662 += 1, R663 += 1 };
  s3 -> s4 [0, 65535] { R701 += 1, R663 += 1, R633 += 1, R481 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s5 [58, 58] { R701 += 1, R663 += 1, R633 += 1 };
  s3 -> s1 [59, 65535] { R701 += 1, R663 += 1, R633 += 1 };
  s4 -> s1 [0, 57] { R701 += 1, R663 += 1, R633 += 1 };
  s4 -> s6 [0, 65535] { R701 += 1, R663 += 1 };
  s4 -> s7 [0, 65535] { R701 += 1 };
  s4 -> s4 [0, 65535] { R701 += 1, R663 += 1, R633 += 1, R481 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s5 [58, 58] { R701 += 1, R663 += 1, R633 += 1 };
  s4 -> s1 [59, 65535] { R701 += 1, R663 += 1, R633 += 1 };
  s5 -> s5 [0, 65535] { R701 += 1, R663 += 1, R633 += 1 };
  s6 -> s6 [0, 65535] { R701 += 1, R663 += 1 };
  s6 -> s7 [0, 65535] { R701 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R701 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 82] { R703 += 1, R665 += 1, R635 += 1 };
  s0 -> s2 [0, 65535] { R703 += 1, R664 += 1, R665 += 1 };
  s0 -> s3 [0, 65535] { R703 += 1, R665 += 1, R635 += 1, R482 += 1 };
  s0 -> s4 [0, 65535] { R703 += 1, R665 += 1, R634 += 1, R635 += 1 };
  s0 -> s0 [0, 65535] { R702 += 1, R703 += 1 };
  s0 -> s5 [83, 83] { R703 += 1, R665 += 1, R635 += 1 };
  s0 -> s1 [84, 65535] { R703 += 1, R665 += 1, R635 += 1 };
  s1 -> s1 [0, 82] { R703 += 1, R665 += 1, R635 += 1 };
  s1 -> s7 [0, 65535] { R703 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R703 += 1, R665 += 1 };
  s1 -> s5 [83, 83] { R703 += 1, R665 += 1, R635 += 1 };
  s1 -> s1 [84, 65535] { R703 += 1, R665 += 1, R635 += 1 };
  s2 -> s1 [0, 82] { R703 += 1, R665 += 1, R635 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R703 += 1, R664 += 1, R665 += 1 };
  s2 -> s3 [0, 65535] { R703 += 1, R665 += 1, R635 += 1, R482 += 1 };
  s2 -> s4 [0, 65535] { R703 += 1, R665 += 1, R634 += 1, R635 += 1 };
  s2 -> s5 [83, 83] { R703 += 1, R665 += 1, R635 += 1 };
  s2 -> s1 [84, 65535] { R703 += 1, R665 += 1, R635 += 1 };
  s3 -> s1 [0, 82] { R703 += 1, R665 += 1, R635 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R703 += 1, R665 += 1, R635 += 1, R482 += 1 };
  s3 -> s8 [0, 65535] { R703 += 1, R665 += 1 };
  s3 -> s7 [0, 65535] { R703 += 1 };
  s3 -> s5 [83, 83] { R703 += 1, R665 += 1, R635 += 1 };
  s3 -> s1 [84, 65535] { R703 += 1, R665 += 1, R635 += 1 };
  s4 -> s1 [0, 82] { R703 += 1, R665 += 1, R635 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R703 += 1, R665 += 1, R635 += 1, R482 += 1 };
  s4 -> s4 [0, 65535] { R703 += 1, R665 += 1, R634 += 1, R635 += 1 };
  s4 -> s7 [0, 65535] { R703 += 1 };
  s4 -> s5 [83, 83] { R703 += 1, R665 += 1, R635 += 1 };
  s4 -> s1 [84, 65535] { R703 += 1, R665 += 1, R635 += 1 };
  s5 -> s5 [0, 65535] { R703 += 1, R665 += 1, R635 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R703 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R703 += 1, R665 += 1 };
  s8 -> s7 [0, 65535] { R703 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 90] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s0 -> s2 [0, 65535] { R705 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s0 -> s3 [0, 65535] { R705 += 1, R667 += 1, R637 += 1, R604 += 1, R605 += 1 };
  s0 -> s0 [0, 65535] { R704 += 1, R705 += 1 };
  s0 -> s4 [0, 65535] { R705 += 1, R666 += 1, R667 += 1 };
  s0 -> s5 [91, 91] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s0 -> s1 [92, 65535] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s1 -> s7 [0, 65535] { R705 += 1, R667 += 1 };
  s1 -> s1 [0, 65535] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s1 -> s9 [0, 65535] { R705 += 1, R667 += 1, R637 += 1 };
  s1 -> s8 [0, 65535] { R705 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s2 -> s2 [0, 65535] { R705 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s2 -> s8 [0, 65535] { R705 += 1 };
  s2 -> s3 [0, 65535] { R705 += 1, R667 += 1, R637 += 1, R604 += 1, R605 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [91, 91] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s2 -> s1 [92, 65535] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s3 -> s1 [0, 90] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s3 -> s7 [0, 65535] { R705 += 1, R667 += 1 };
  s3 -> s8 [0, 65535] { R705 += 1 };
  s3 -> s3 [0, 65535] { R705 += 1, R667 += 1, R637 += 1, R604 += 1, R605 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [91, 91] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s3 -> s1 [92, 65535] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s4 -> s1 [0, 90] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s4 -> s2 [0, 65535] { R705 += 1, R667 += 1, R636 += 1, R637 += 1 };
  s4 -> s3 [0, 65535] { R705 += 1, R667 += 1, R637 += 1, R604 += 1, R605 += 1 };
  s4 -> s4 [0, 65535] { R705 += 1, R666 += 1, R667 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [91, 91] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s4 -> s1 [92, 65535] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s5 -> s1 [0, 65535] { R705 += 1, R667 += 1, R637 += 1, R605 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R705 += 1, R667 += 1 };
  s7 -> s8 [0, 65535] { R705 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R705 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s7 [0, 65535] { R705 += 1, R667 += 1 };
  s9 -> s9 [0, 65535] { R705 += 1, R667 += 1, R637 += 1 };
  s9 -> s8 [0, 65535] { R705 += 1 };
  s9 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R706 += 1, R707 += 1 };
  s0 -> s1 [0, 65535] { R707 += 1, R669 += 1, R639 += 1, R607 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R707 += 1, R669 += 1, R638 += 1, R639 += 1 };
  s0 -> s3 [0, 65535] { R707 += 1, R668 += 1, R669 += 1 };
  s0 -> s4 [0, 65535] { R707 += 1, R669 += 1, R639 += 1, R606 += 1, R607 += 1 };
  s1 -> s8 [0, 65535] { R707 += 1, R669 += 1, R639 += 1 };
  s1 -> s1 [0, 65535] { R707 += 1, R669 += 1, R639 += 1, R607 += 1, R7 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R707 += 1 };
  s1 -> s7 [0, 65535] { R707 += 1, R669 += 1 };
  s2 -> s1 [0, 65535] { R707 += 1, R669 += 1, R639 += 1, R607 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R707 += 1, R669 += 1, R638 += 1, R639 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R707 += 1, R669 += 1, R639 += 1, R606 += 1, R607 += 1 };
  s2 -> s6 [0, 65535] { R707 += 1 };
  s3 -> s1 [0, 65535] { R707 += 1, R669 += 1, R639 += 1, R607 += 1, R7 += 1 };
  s3 -> s2 [0, 65535] { R707 += 1, R669 += 1, R638 += 1, R639 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R707 += 1, R668 += 1, R669 += 1 };
  s3 -> s4 [0, 65535] { R707 += 1, R669 += 1, R639 += 1, R606 += 1, R607 += 1 };
  s4 -> s1 [0, 65535] { R707 += 1, R669 += 1, R639 += 1, R607 += 1, R7 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R707 += 1, R669 += 1, R639 += 1, R606 += 1, R607 += 1 };
  s4 -> s6 [0, 65535] { R707 += 1 };
  s4 -> s7 [0, 65535] { R707 += 1, R669 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R707 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R707 += 1 };
  s7 -> s7 [0, 65535] { R707 += 1, R669 += 1 };
  s8 -> s8 [0, 65535] { R707 += 1, R669 += 1, R639 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R707 += 1 };
  s8 -> s7 [0, 65535] { R707 += 1, R669 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 82] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s0 -> s2 [0, 65535] { R709 += 1, R671 += 1, R641 += 1, R618 += 1, R619 += 1 };
  s0 -> s0 [0, 65535] { R708 += 1, R709 += 1 };
  s0 -> s3 [0, 65535] { R709 += 1, R671 += 1, R640 += 1, R641 += 1 };
  s0 -> s4 [0, 65535] { R709 += 1, R670 += 1, R671 += 1 };
  s0 -> s5 [83, 83] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s0 -> s1 [84, 65535] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s1 -> s1 [0, 82] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s1 -> s5 [83, 83] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s1 -> s1 [84, 65535] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s2 -> s1 [0, 82] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s2 -> s2 [0, 65535] { R709 += 1, R671 += 1, R641 += 1, R618 += 1, R619 += 1 };
  s2 -> s5 [83, 83] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s2 -> s1 [84, 65535] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s3 -> s1 [0, 82] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s3 -> s2 [0, 65535] { R709 += 1, R671 += 1, R641 += 1, R618 += 1, R619 += 1 };
  s3 -> s3 [0, 65535] { R709 += 1, R671 += 1, R640 += 1, R641 += 1 };
  s3 -> s5 [83, 83] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s3 -> s1 [84, 65535] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s4 -> s1 [0, 82] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s4 -> s2 [0, 65535] { R709 += 1, R671 += 1, R641 += 1, R618 += 1, R619 += 1 };
  s4 -> s3 [0, 65535] { R709 += 1, R671 += 1, R640 += 1, R641 += 1 };
  s4 -> s4 [0, 65535] { R709 += 1, R670 += 1, R671 += 1 };
  s4 -> s5 [83, 83] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s4 -> s1 [84, 65535] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s5 -> s6 [0, 65535] { R709 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R709 += 1, R671 += 1 };
  s5 -> s9 [0, 65535] { R709 += 1, R671 += 1, R641 += 1 };
  s5 -> s5 [0, 65535] { R709 += 1, R671 += 1, R641 += 1, R619 += 1 };
  s6 -> s6 [0, 65535] { R709 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R709 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R709 += 1, R671 += 1 };
  s9 -> s6 [0, 65535] { R709 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R709 += 1, R671 += 1 };
  s9 -> s9 [0, 65535] { R709 += 1, R671 += 1, R641 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R711 += 1, R673 += 1, R643 += 1, R620 += 1, R621 += 1 };
  s0 -> s2 [0, 65535] { R711 += 1, R673 += 1, R643 += 1, R621 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R710 += 1, R711 += 1 };
  s0 -> s3 [0, 65535] { R711 += 1, R673 += 1, R642 += 1, R643 += 1 };
  s0 -> s4 [0, 65535] { R711 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 65535] { R711 += 1, R673 += 1, R643 += 1, R620 += 1, R621 += 1 };
  s1 -> s7 [0, 65535] { R711 += 1, R673 += 1 };
  s1 -> s6 [0, 65535] { R711 += 1 };
  s1 -> s2 [0, 65535] { R711 += 1, R673 += 1, R643 += 1, R621 += 1, R2 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R711 += 1, R673 += 1, R643 += 1, R621 += 1, R2 += 1 };
  s2 -> s7 [0, 65535] { R711 += 1, R673 += 1 };
  s2 -> s6 [0, 65535] { R711 += 1 };
  s2 -> s8 [0, 65535] { R711 += 1, R673 += 1, R643 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R711 += 1, R673 += 1, R643 += 1, R620 += 1, R621 += 1 };
  s3 -> s6 [0, 65535] { R711 += 1 };
  s3 -> s2 [0, 65535] { R711 += 1, R673 += 1, R643 += 1, R621 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R711 += 1, R673 += 1, R642 += 1, R643 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R711 += 1, R673 += 1, R643 += 1, R620 += 1, R621 += 1 };
  s4 -> s2 [0, 65535] { R711 += 1, R673 += 1, R643 += 1, R621 += 1, R2 += 1 };
  s4 -> s3 [0, 65535] { R711 += 1, R673 += 1, R642 += 1, R643 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R711 += 1, R672 += 1, R673 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R711 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R711 += 1, R673 += 1 };
  s7 -> s6 [0, 65535] { R711 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R711 += 1, R673 += 1 };
  s8 -> s6 [0, 65535] { R711 += 1 };
  s8 -> s8 [0, 65535] { R711 += 1, R673 += 1, R643 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 82] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R9 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R712 += 1, R713 += 1 };
  s0 -> s3 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R622 += 1, R623 += 1 };
  s0 -> s4 [0, 65535] { R713 += 1, R674 += 1, R675 += 1 };
  s0 -> s5 [0, 65535] { R713 += 1, R675 += 1, R644 += 1, R645 += 1 };
  s0 -> s6 [83, 83] { R713 += 1, R675 += 1, R645 += 1, R623 += 1 };
  s0 -> s1 [84, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s1 -> s1 [0, 82] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s1 -> s6 [83, 83] { R713 += 1, R675 += 1, R645 += 1, R623 += 1 };
  s1 -> s1 [84, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s2 -> s1 [0, 82] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R9 += 1, R10 += 1 };
  s2 -> s6 [83, 83] { R713 += 1, R675 += 1, R645 += 1, R623 += 1 };
  s2 -> s1 [84, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s3 -> s1 [0, 82] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s3 -> s2 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R9 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R622 += 1, R623 += 1 };
  s3 -> s6 [83, 83] { R713 += 1, R675 += 1, R645 += 1, R623 += 1 };
  s3 -> s1 [84, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s4 -> s1 [0, 82] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s4 -> s2 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R9 += 1, R10 += 1 };
  s4 -> s3 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R622 += 1, R623 += 1 };
  s4 -> s4 [0, 65535] { R713 += 1, R674 += 1, R675 += 1 };
  s4 -> s5 [0, 65535] { R713 += 1, R675 += 1, R644 += 1, R645 += 1 };
  s4 -> s6 [83, 83] { R713 += 1, R675 += 1, R645 += 1, R623 += 1 };
  s4 -> s1 [84, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s5 -> s1 [0, 82] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s5 -> s2 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R9 += 1, R10 += 1 };
  s5 -> s3 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R622 += 1, R623 += 1 };
  s5 -> s5 [0, 65535] { R713 += 1, R675 += 1, R644 += 1, R645 += 1 };
  s5 -> s6 [83, 83] { R713 += 1, R675 += 1, R645 += 1, R623 += 1 };
  s5 -> s1 [84, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1, R10 += 1 };
  s6 -> s7 [0, 65535] { R713 += 1, R675 += 1 };
  s6 -> s8 [0, 65535] { R713 += 1, R675 += 1, R645 += 1 };
  s6 -> s6 [0, 65535] { R713 += 1, R675 += 1, R645 += 1, R623 += 1 };
  s6 -> s9 [0, 65535] { R713 += 1 };
  s6 -> s10 [0, 65535];
  s7 -> s7 [0, 65535] { R713 += 1, R675 += 1 };
  s7 -> s9 [0, 65535] { R713 += 1 };
  s7 -> s10 [0, 65535];
  s8 -> s7 [0, 65535] { R713 += 1, R675 += 1 };
  s8 -> s8 [0, 65535] { R713 += 1, R675 += 1, R645 += 1 };
  s8 -> s9 [0, 65535] { R713 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R713 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s8, s9, s6, s7, s10;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 82] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s0 -> s2 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R624 += 1, R625 += 1 };
  s0 -> s3 [0, 65535] { R715 += 1, R676 += 1, R677 += 1 };
  s0 -> s4 [0, 65535] { R715 += 1, R677 += 1, R646 += 1, R647 += 1 };
  s0 -> s5 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R608 += 1, R609 += 1 };
  s0 -> s0 [0, 65535] { R714 += 1, R715 += 1 };
  s0 -> s6 [83, 83] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s0 -> s1 [84, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s1 -> s1 [0, 82] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s1 -> s6 [83, 83] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s1 -> s1 [84, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s2 -> s1 [0, 82] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s2 -> s2 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R624 += 1, R625 += 1 };
  s2 -> s5 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R608 += 1, R609 += 1 };
  s2 -> s6 [83, 83] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s2 -> s1 [84, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s3 -> s1 [0, 82] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s3 -> s2 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R624 += 1, R625 += 1 };
  s3 -> s3 [0, 65535] { R715 += 1, R676 += 1, R677 += 1 };
  s3 -> s4 [0, 65535] { R715 += 1, R677 += 1, R646 += 1, R647 += 1 };
  s3 -> s5 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R608 += 1, R609 += 1 };
  s3 -> s6 [83, 83] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s3 -> s1 [84, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s4 -> s1 [0, 82] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s4 -> s2 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R624 += 1, R625 += 1 };
  s4 -> s4 [0, 65535] { R715 += 1, R677 += 1, R646 += 1, R647 += 1 };
  s4 -> s5 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R608 += 1, R609 += 1 };
  s4 -> s6 [83, 83] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s4 -> s1 [84, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s5 -> s1 [0, 82] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s5 -> s5 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R608 += 1, R609 += 1 };
  s5 -> s6 [83, 83] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s5 -> s1 [84, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R715 += 1, R677 += 1 };
  s6 -> s9 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1 };
  s6 -> s6 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1, R609 += 1 };
  s6 -> s10 [0, 65535] { R715 += 1 };
  s6 -> s11 [0, 65535] { R715 += 1, R677 += 1, R647 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R715 += 1, R677 += 1 };
  s8 -> s10 [0, 65535] { R715 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R715 += 1, R677 += 1 };
  s9 -> s9 [0, 65535] { R715 += 1, R677 += 1, R647 += 1, R625 += 1 };
  s9 -> s10 [0, 65535] { R715 += 1 };
  s9 -> s11 [0, 65535] { R715 += 1, R677 += 1, R647 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s10 [0, 65535] { R715 += 1 };
  s11 -> s7 [0, 65535];
  s11 -> s8 [0, 65535] { R715 += 1, R677 += 1 };
  s11 -> s10 [0, 65535] { R715 += 1 };
  s11 -> s11 [0, 65535] { R715 += 1, R677 += 1, R647 += 1 };
  accepting s8, s9, s6, s7, s10, s11;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R717 += 1, R679 += 1, R648 += 1, R649 += 1 };
  s0 -> s2 [0, 65535] { R717 += 1, R678 += 1, R679 += 1 };
  s0 -> s0 [0, 65535] { R716 += 1, R717 += 1 };
  s0 -> s3 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R626 += 1, R627 += 1 };
  s0 -> s4 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R611 += 1, R603 += 1 };
  s0 -> s5 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R610 += 1, R611 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R717 += 1, R679 += 1, R648 += 1, R649 += 1 };
  s1 -> s7 [0, 65535] { R717 += 1 };
  s1 -> s3 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R626 += 1, R627 += 1 };
  s1 -> s4 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R611 += 1, R603 += 1 };
  s1 -> s5 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R610 += 1, R611 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R717 += 1, R679 += 1, R648 += 1, R649 += 1 };
  s2 -> s2 [0, 65535] { R717 += 1, R678 += 1, R679 += 1 };
  s2 -> s3 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R626 += 1, R627 += 1 };
  s2 -> s4 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R611 += 1, R603 += 1 };
  s2 -> s5 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R610 += 1, R611 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R717 += 1 };
  s3 -> s3 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R626 += 1, R627 += 1 };
  s3 -> s4 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R611 += 1, R603 += 1 };
  s3 -> s5 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R610 += 1, R611 += 1 };
  s3 -> s9 [0, 65535] { R717 += 1, R679 += 1 };
  s4 -> s10 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R717 += 1 };
  s4 -> s4 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R611 += 1, R603 += 1 };
  s4 -> s8 [0, 65535] { R717 += 1, R679 += 1, R649 += 1 };
  s4 -> s9 [0, 65535] { R717 += 1, R679 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R717 += 1 };
  s5 -> s4 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R611 += 1, R603 += 1 };
  s5 -> s8 [0, 65535] { R717 += 1, R679 += 1, R649 += 1 };
  s5 -> s5 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1, R610 += 1, R611 += 1 };
  s5 -> s9 [0, 65535] { R717 += 1, R679 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R717 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R717 += 1 };
  s8 -> s8 [0, 65535] { R717 += 1, R679 += 1, R649 += 1 };
  s8 -> s9 [0, 65535] { R717 += 1, R679 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s7 [0, 65535] { R717 += 1 };
  s9 -> s9 [0, 65535] { R717 += 1, R679 += 1 };
  s10 -> s10 [0, 65535] { R717 += 1, R679 += 1, R649 += 1, R627 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s7 [0, 65535] { R717 += 1 };
  s10 -> s8 [0, 65535] { R717 += 1, R679 += 1, R649 += 1 };
  s10 -> s9 [0, 65535] { R717 += 1, R679 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s10;
};
};
constraint R2 = R609 && R3 = R627 && R4 = R649 && R5 = R617 && R6 = R717 && R9 = 0 && R10 - R608 = -1 && R486 = 0 && R487 = R679 && R604 = 0 && R605 = 1 && R606 = 0 && R607 = 1 && R612 = 0 && R613 = 2 && R614 = 0 && R615 = 2 && R616 - R679 = 1 && R618 = 0 && R619 = R627 && R620 = 0 && R621 = R627 && R622 = 0 && R623 = R627 && R624 = 0 && R625 = R627 && R626 = 0 && R628 = 3 && R629 = R649 && R630 = 3 && R631 = R649 && R632 = 3 && R633 = R649 && R634 = 3 && R635 = R649 && R636 = 3 && R637 = R649 && R638 = 3 && R639 = R649 && R640 = 3 && R641 = R649 && R642 = 3 && R643 = R649 && R644 = 3 && R645 = R649 && R646 = 3 && R647 = R649 && R648 = 3 && R650 = 0 && R651 = R679 && R652 = 0 && R653 = R679 && R654 = 0 && R655 = R679 && R656 = 0 && R657 = R679 && R658 = 0 && R659 = R679 && R660 = 0 && R661 = R679 && R662 = 0 && R663 = R679 && R664 = 0 && R665 = R679 && R666 = 0 && R667 = R679 && R668 = 0 && R669 = R679 && R670 = 0 && R671 = R679 && R672 = 0 && R673 = R679 && R674 = 0 && R675 = R679 && R676 = 0 && R677 = R679 && R678 = 0 && R680 = 10 && R681 = R717 && R682 = 10 && R683 = R717 && R684 = 10 && R685 = R717 && R686 = 10 && R687 = R717 && R688 = 10 && R689 = R717 && R690 = 10 && R691 = R717 && R692 = 10 && R693 = R717 && R694 = 10 && R695 = R717 && R696 = 10 && R697 = R717 && R698 = 10 && R699 = R717 && R700 = 10 && R701 = R717 && R702 = 10 && R703 = R717 && R704 = 10 && R705 = R717 && R706 = 10 && R707 = R717 && R708 = 10 && R709 = R717 && R710 = 10 && R711 = R717 && R712 = 10 && R713 = R717 && R714 = 10 && R715 = R717 && R716 = 10 && R0 != 0 && R1 != 0 && R481 < 1 && R482 < 1 && R608 - R609 < 1 && -1 < R608 && R679 < R617 && 0 < R627 && 2 < R649 && -1 < R679 && 9 < R717 && (R608 != R610 || R609 = R611 || ((R603 != 0 || R609 - R610 < 1 || R610 < 0) && (R603 = 0 || R609 < R610 || R610 < 0))) && (R608 = R610 || (R603 = 0 && R608 = R609));
// End of Parikh automata intersection problem
