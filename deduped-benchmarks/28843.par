// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R3, R4, R481, R483, R484, R5, R6, R7, R719, R720, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R9, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R914 += 1 };
  s0 -> s0 [0, 65535] { R913 += 1, R914 += 1 };
  s0 -> s2 [46, 46] { R914 += 1 };
  s0 -> s3 [47, 47] { R914 += 1 };
  s0 -> s1 [48, 65535] { R914 += 1 };
  s1 -> s1 [0, 45] { R914 += 1 };
  s1 -> s2 [46, 46] { R914 += 1 };
  s1 -> s3 [47, 47] { R914 += 1 };
  s1 -> s1 [48, 65535] { R914 += 1 };
  s2 -> s1 [0, 45] { R914 += 1 };
  s2 -> s2 [46, 46] { R914 += 1 };
  s2 -> s3 [47, 47] { R914 += 1 };
  s2 -> s1 [48, 114] { R914 += 1 };
  s2 -> s8 [115, 115] { R914 += 1 };
  s2 -> s1 [116, 65535] { R914 += 1 };
  s3 -> s3 [0, 45] { R914 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R914 += 1 };
  s3 -> s3 [47, 65535] { R914 += 1 };
  s4 -> s3 [0, 45] { R914 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R914 += 1 };
  s4 -> s3 [47, 114] { R914 += 1 };
  s4 -> s5 [115, 115] { R914 += 1 };
  s4 -> s3 [116, 65535] { R914 += 1 };
  s5 -> s3 [0, 45] { R914 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R914 += 1 };
  s5 -> s3 [47, 110] { R914 += 1 };
  s5 -> s6 [111, 111] { R914 += 1 };
  s5 -> s3 [112, 65535] { R914 += 1 };
  s6 -> s3 [0, 45] { R914 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R914 += 1 };
  s6 -> s3 [47, 98] { R914 += 1 };
  s6 -> s7 [99, 99] { R914 += 1 };
  s6 -> s3 [100, 65535] { R914 += 1 };
  s7 -> s3 [0, 45] { R914 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R914 += 1 };
  s7 -> s3 [47, 106] { R914 += 1 };
  s7 -> s3 [108, 65535] { R914 += 1 };
  s8 -> s1 [0, 45] { R914 += 1 };
  s8 -> s2 [46, 46] { R914 += 1 };
  s8 -> s3 [47, 47] { R914 += 1 };
  s8 -> s1 [48, 110] { R914 += 1 };
  s8 -> s9 [111, 111] { R914 += 1 };
  s8 -> s1 [112, 65535] { R914 += 1 };
  s9 -> s1 [0, 45] { R914 += 1 };
  s9 -> s2 [46, 46] { R914 += 1 };
  s9 -> s3 [47, 47] { R914 += 1 };
  s9 -> s1 [48, 98] { R914 += 1 };
  s9 -> s10 [99, 99] { R914 += 1 };
  s9 -> s1 [100, 65535] { R914 += 1 };
  s10 -> s1 [0, 45] { R914 += 1 };
  s10 -> s2 [46, 46] { R914 += 1 };
  s10 -> s3 [47, 47] { R914 += 1 };
  s10 -> s1 [48, 106] { R914 += 1 };
  s10 -> s1 [108, 65535] { R914 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R916 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R915 += 1, R916 += 1 };
  s1 -> s1 [0, 65535] { R916 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R918 += 1, R720 += 1 };
  s0 -> s2 [0, 65535] { R918 += 1, R719 += 1, R720 += 1 };
  s0 -> s0 [0, 65535] { R917 += 1, R918 += 1 };
  s0 -> s3 [47, 47] { R918 += 1 };
  s0 -> s1 [48, 65535] { R918 += 1, R720 += 1 };
  s1 -> s1 [0, 46] { R918 += 1, R720 += 1 };
  s1 -> s3 [47, 47] { R918 += 1 };
  s1 -> s1 [48, 65535] { R918 += 1, R720 += 1 };
  s2 -> s1 [0, 46] { R918 += 1, R720 += 1 };
  s2 -> s2 [0, 65535] { R918 += 1, R719 += 1, R720 += 1 };
  s2 -> s3 [47, 47] { R918 += 1 };
  s2 -> s1 [48, 65535] { R918 += 1, R720 += 1 };
  s3 -> s3 [0, 65535] { R918 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R920 += 1, R850 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R919 += 1, R920 += 1 };
  s0 -> s2 [0, 65535] { R920 += 1, R849 += 1, R850 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R920 += 1 };
  s1 -> s1 [0, 65535] { R920 += 1, R850 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R920 += 1, R850 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R920 += 1, R849 += 1, R850 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R920 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R922 += 1, R884 += 1 };
  s0 -> s2 [0, 65535] { R922 += 1, R883 += 1, R884 += 1 };
  s0 -> s0 [0, 65535] { R921 += 1, R922 += 1 };
  s0 -> s3 [64, 64] { R922 += 1, R884 += 1 };
  s0 -> s1 [65, 65535] { R922 += 1, R884 += 1 };
  s1 -> s1 [0, 63] { R922 += 1, R884 += 1 };
  s1 -> s3 [64, 64] { R922 += 1, R884 += 1 };
  s1 -> s1 [65, 65535] { R922 += 1, R884 += 1 };
  s2 -> s1 [0, 63] { R922 += 1, R884 += 1 };
  s2 -> s2 [0, 65535] { R922 += 1, R883 += 1, R884 += 1 };
  s2 -> s3 [64, 64] { R922 += 1, R884 += 1 };
  s2 -> s1 [65, 65535] { R922 += 1, R884 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R922 += 1, R884 += 1 };
  s3 -> s5 [0, 65535] { R922 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R922 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R923 += 1, R924 += 1 };
  s0 -> s1 [0, 65535] { R924 += 1, R885 += 1, R886 += 1 };
  s0 -> s2 [0, 65535] { R924 += 1, R886 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R924 += 1, R885 += 1, R886 += 1 };
  s1 -> s2 [0, 65535] { R924 += 1, R886 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R924 += 1 };
  s2 -> s2 [0, 65535] { R924 += 1, R886 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R924 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 36] { R926 += 1, R888 += 1, R846 += 1 };
  s0 -> s0 [0, 65535] { R925 += 1, R926 += 1 };
  s0 -> s2 [0, 65535] { R926 += 1, R887 += 1, R888 += 1 };
  s0 -> s3 [0, 65535] { R926 += 1, R888 += 1, R845 += 1, R846 += 1 };
  s0 -> s1 [38, 42] { R926 += 1, R888 += 1, R846 += 1 };
  s0 -> s1 [44, 57] { R926 += 1, R888 += 1, R846 += 1 };
  s0 -> s1 [59, 63] { R926 += 1, R888 += 1, R846 += 1 };
  s0 -> s1 [65, 65535] { R926 += 1, R888 += 1, R846 += 1 };
  s1 -> s1 [0, 36] { R926 += 1, R888 += 1, R846 += 1 };
  s1 -> s1 [0, 65535] { R926 += 1, R888 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R926 += 1 };
  s1 -> s1 [38, 42] { R926 += 1, R888 += 1, R846 += 1 };
  s1 -> s1 [44, 57] { R926 += 1, R888 += 1, R846 += 1 };
  s1 -> s1 [59, 63] { R926 += 1, R888 += 1, R846 += 1 };
  s1 -> s1 [65, 65535] { R926 += 1, R888 += 1, R846 += 1 };
  s2 -> s1 [0, 36] { R926 += 1, R888 += 1, R846 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R926 += 1, R887 += 1, R888 += 1 };
  s2 -> s3 [0, 65535] { R926 += 1, R888 += 1, R845 += 1, R846 += 1 };
  s2 -> s1 [38, 42] { R926 += 1, R888 += 1, R846 += 1 };
  s2 -> s1 [44, 57] { R926 += 1, R888 += 1, R846 += 1 };
  s2 -> s1 [59, 63] { R926 += 1, R888 += 1, R846 += 1 };
  s2 -> s1 [65, 65535] { R926 += 1, R888 += 1, R846 += 1 };
  s3 -> s1 [0, 36] { R926 += 1, R888 += 1, R846 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R926 += 1 };
  s3 -> s3 [0, 65535] { R926 += 1, R888 += 1, R845 += 1, R846 += 1 };
  s3 -> s1 [38, 42] { R926 += 1, R888 += 1, R846 += 1 };
  s3 -> s1 [44, 57] { R926 += 1, R888 += 1, R846 += 1 };
  s3 -> s1 [59, 63] { R926 += 1, R888 += 1, R846 += 1 };
  s3 -> s1 [65, 65535] { R926 += 1, R888 += 1, R846 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R926 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R927 += 1, R928 += 1 };
  s0 -> s1 [0, 65535] { R928 += 1, R889 += 1, R890 += 1 };
  s0 -> s2 [0, 65535] { R928 += 1, R890 += 1, R847 += 1, R848 += 1 };
  s0 -> s3 [0, 65535] { R928 += 1, R890 += 1, R848 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R928 += 1, R889 += 1, R890 += 1 };
  s1 -> s2 [0, 65535] { R928 += 1, R890 += 1, R847 += 1, R848 += 1 };
  s1 -> s3 [0, 65535] { R928 += 1, R890 += 1, R848 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R928 += 1, R890 += 1, R847 += 1, R848 += 1 };
  s2 -> s6 [0, 65535] { R928 += 1 };
  s2 -> s3 [0, 65535] { R928 += 1, R890 += 1, R848 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R928 += 1, R890 += 1 };
  s3 -> s6 [0, 65535] { R928 += 1 };
  s3 -> s3 [0, 65535] { R928 += 1, R890 += 1, R848 += 1, R0 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R928 += 1, R890 += 1 };
  s5 -> s6 [0, 65535] { R928 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R928 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 43] { R930 += 1, R892 += 1, R862 += 1 };
  s0 -> s2 [0, 65535] { R930 += 1, R892 += 1, R861 += 1, R862 += 1 };
  s0 -> s0 [0, 65535] { R929 += 1, R930 += 1 };
  s0 -> s3 [0, 65535] { R930 += 1, R891 += 1, R892 += 1 };
  s0 -> s1 [45, 64] { R930 += 1, R892 += 1, R862 += 1 };
  s0 -> s4 [83, 83] { R930 += 1, R892 += 1, R862 += 1 };
  s0 -> s1 [84, 65535] { R930 += 1, R892 += 1, R862 += 1 };
  s1 -> s1 [0, 43] { R930 += 1, R892 += 1, R862 += 1 };
  s1 -> s1 [45, 64] { R930 += 1, R892 += 1, R862 += 1 };
  s1 -> s4 [83, 83] { R930 += 1, R892 += 1, R862 += 1 };
  s1 -> s1 [84, 65535] { R930 += 1, R892 += 1, R862 += 1 };
  s2 -> s1 [0, 43] { R930 += 1, R892 += 1, R862 += 1 };
  s2 -> s2 [0, 65535] { R930 += 1, R892 += 1, R861 += 1, R862 += 1 };
  s2 -> s1 [45, 64] { R930 += 1, R892 += 1, R862 += 1 };
  s2 -> s4 [83, 83] { R930 += 1, R892 += 1, R862 += 1 };
  s2 -> s1 [84, 65535] { R930 += 1, R892 += 1, R862 += 1 };
  s3 -> s1 [0, 43] { R930 += 1, R892 += 1, R862 += 1 };
  s3 -> s2 [0, 65535] { R930 += 1, R892 += 1, R861 += 1, R862 += 1 };
  s3 -> s3 [0, 65535] { R930 += 1, R891 += 1, R892 += 1 };
  s3 -> s1 [45, 64] { R930 += 1, R892 += 1, R862 += 1 };
  s3 -> s4 [83, 83] { R930 += 1, R892 += 1, R862 += 1 };
  s3 -> s1 [84, 65535] { R930 += 1, R892 += 1, R862 += 1 };
  s4 -> s4 [0, 43] { R930 += 1, R892 += 1, R862 += 1 };
  s4 -> s5 [0, 65535] { R930 += 1 };
  s4 -> s4 [0, 65535] { R930 += 1, R892 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [45, 64] { R930 += 1, R892 += 1, R862 += 1 };
  s4 -> s4 [83, 65535] { R930 += 1, R892 += 1, R862 += 1 };
  s5 -> s5 [0, 65535] { R930 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R932 += 1, R894 += 1, R863 += 1, R864 += 1 };
  s0 -> s2 [0, 65535] { R932 += 1, R893 += 1, R894 += 1 };
  s0 -> s0 [0, 65535] { R931 += 1, R932 += 1 };
  s0 -> s3 [0, 65535] { R932 += 1, R894 += 1, R864 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R932 += 1, R894 += 1, R863 += 1, R864 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R932 += 1 };
  s1 -> s3 [0, 65535] { R932 += 1, R894 += 1, R864 += 1, R3 += 1 };
  s2 -> s1 [0, 65535] { R932 += 1, R894 += 1, R863 += 1, R864 += 1 };
  s2 -> s2 [0, 65535] { R932 += 1, R893 += 1, R894 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R932 += 1, R894 += 1, R864 += 1, R3 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R932 += 1 };
  s3 -> s3 [0, 65535] { R932 += 1, R894 += 1, R864 += 1, R3 += 1 };
  s3 -> s6 [0, 65535] { R932 += 1, R894 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R932 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R932 += 1 };
  s6 -> s6 [0, 65535] { R932 += 1, R894 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 57] { R934 += 1, R896 += 1, R866 += 1 };
  s0 -> s0 [0, 65535] { R933 += 1, R934 += 1 };
  s0 -> s2 [0, 65535] { R934 += 1, R896 += 1, R866 += 1, R481 += 1 };
  s0 -> s3 [0, 65535] { R934 += 1, R895 += 1, R896 += 1 };
  s0 -> s4 [0, 65535] { R934 += 1, R896 += 1, R865 += 1, R866 += 1 };
  s0 -> s5 [58, 58] { R934 += 1, R896 += 1, R866 += 1 };
  s0 -> s1 [59, 65535] { R934 += 1, R896 += 1, R866 += 1 };
  s1 -> s1 [0, 57] { R934 += 1, R896 += 1, R866 += 1 };
  s1 -> s1 [0, 65535] { R934 += 1, R896 += 1 };
  s1 -> s6 [0, 65535] { R934 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [58, 58] { R934 += 1, R896 += 1, R866 += 1 };
  s1 -> s1 [59, 65535] { R934 += 1, R896 += 1, R866 += 1 };
  s2 -> s1 [0, 57] { R934 += 1, R896 += 1, R866 += 1 };
  s2 -> s2 [0, 65535] { R934 += 1, R896 += 1, R866 += 1, R481 += 1 };
  s2 -> s6 [0, 65535] { R934 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R934 += 1, R896 += 1 };
  s2 -> s5 [58, 58] { R934 += 1, R896 += 1, R866 += 1 };
  s2 -> s1 [59, 65535] { R934 += 1, R896 += 1, R866 += 1 };
  s3 -> s1 [0, 57] { R934 += 1, R896 += 1, R866 += 1 };
  s3 -> s2 [0, 65535] { R934 += 1, R896 += 1, R866 += 1, R481 += 1 };
  s3 -> s3 [0, 65535] { R934 += 1, R895 += 1, R896 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R934 += 1, R896 += 1, R865 += 1, R866 += 1 };
  s3 -> s5 [58, 58] { R934 += 1, R896 += 1, R866 += 1 };
  s3 -> s1 [59, 65535] { R934 += 1, R896 += 1, R866 += 1 };
  s4 -> s1 [0, 57] { R934 += 1, R896 += 1, R866 += 1 };
  s4 -> s2 [0, 65535] { R934 += 1, R896 += 1, R866 += 1, R481 += 1 };
  s4 -> s6 [0, 65535] { R934 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R934 += 1, R896 += 1, R865 += 1, R866 += 1 };
  s4 -> s5 [58, 58] { R934 += 1, R896 += 1, R866 += 1 };
  s4 -> s1 [59, 65535] { R934 += 1, R896 += 1, R866 += 1 };
  s5 -> s5 [0, 65535] { R934 += 1, R896 += 1, R866 += 1 };
  s6 -> s6 [0, 65535] { R934 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R934 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R934 += 1, R896 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 82] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R936 += 1, R898 += 1, R868 += 1, R483 += 1, R484 += 1 };
  s0 -> s3 [0, 65535] { R936 += 1, R898 += 1, R867 += 1, R868 += 1 };
  s0 -> s4 [0, 65535] { R936 += 1, R897 += 1, R898 += 1 };
  s0 -> s0 [0, 65535] { R935 += 1, R936 += 1 };
  s0 -> s5 [83, 83] { R936 += 1, R898 += 1, R868 += 1 };
  s0 -> s1 [84, 65535] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s1 -> s1 [0, 82] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s1 -> s5 [83, 83] { R936 += 1, R898 += 1, R868 += 1 };
  s1 -> s1 [84, 65535] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s2 -> s1 [0, 82] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R936 += 1, R898 += 1, R868 += 1, R483 += 1, R484 += 1 };
  s2 -> s5 [83, 83] { R936 += 1, R898 += 1, R868 += 1 };
  s2 -> s1 [84, 65535] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s3 -> s1 [0, 82] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s3 -> s2 [0, 65535] { R936 += 1, R898 += 1, R868 += 1, R483 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R936 += 1, R898 += 1, R867 += 1, R868 += 1 };
  s3 -> s5 [83, 83] { R936 += 1, R898 += 1, R868 += 1 };
  s3 -> s1 [84, 65535] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s4 -> s1 [0, 82] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s4 -> s2 [0, 65535] { R936 += 1, R898 += 1, R868 += 1, R483 += 1, R484 += 1 };
  s4 -> s3 [0, 65535] { R936 += 1, R898 += 1, R867 += 1, R868 += 1 };
  s4 -> s4 [0, 65535] { R936 += 1, R897 += 1, R898 += 1 };
  s4 -> s5 [83, 83] { R936 += 1, R898 += 1, R868 += 1 };
  s4 -> s1 [84, 65535] { R936 += 1, R898 += 1, R868 += 1, R484 += 1 };
  s5 -> s6 [0, 65535] { R936 += 1, R898 += 1 };
  s5 -> s5 [0, 65535] { R936 += 1, R898 += 1, R868 += 1 };
  s5 -> s7 [0, 65535] { R936 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R936 += 1, R898 += 1 };
  s6 -> s7 [0, 65535] { R936 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R936 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 90] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s0 -> s2 [0, 65535] { R938 += 1, R900 += 1, R869 += 1, R870 += 1 };
  s0 -> s0 [0, 65535] { R937 += 1, R938 += 1 };
  s0 -> s3 [0, 65535] { R938 += 1, R900 += 1, R870 += 1, R837 += 1, R838 += 1 };
  s0 -> s4 [0, 65535] { R938 += 1, R899 += 1, R900 += 1 };
  s0 -> s5 [91, 91] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s0 -> s1 [92, 65535] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s1 -> s1 [0, 65535] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s1 -> s7 [0, 65535] { R938 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R938 += 1, R900 += 1 };
  s1 -> s9 [0, 65535] { R938 += 1, R900 += 1, R870 += 1 };
  s2 -> s1 [0, 90] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s2 -> s7 [0, 65535] { R938 += 1 };
  s2 -> s2 [0, 65535] { R938 += 1, R900 += 1, R869 += 1, R870 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R938 += 1, R900 += 1, R870 += 1, R837 += 1, R838 += 1 };
  s2 -> s5 [91, 91] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s2 -> s1 [92, 65535] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s3 -> s1 [0, 90] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s3 -> s7 [0, 65535] { R938 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R938 += 1, R900 += 1 };
  s3 -> s3 [0, 65535] { R938 += 1, R900 += 1, R870 += 1, R837 += 1, R838 += 1 };
  s3 -> s5 [91, 91] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s3 -> s1 [92, 65535] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s4 -> s1 [0, 90] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s4 -> s2 [0, 65535] { R938 += 1, R900 += 1, R869 += 1, R870 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R938 += 1, R900 += 1, R870 += 1, R837 += 1, R838 += 1 };
  s4 -> s4 [0, 65535] { R938 += 1, R899 += 1, R900 += 1 };
  s4 -> s5 [91, 91] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s4 -> s1 [92, 65535] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s5 -> s1 [0, 65535] { R938 += 1, R900 += 1, R870 += 1, R838 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R938 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R938 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R938 += 1, R900 += 1 };
  s9 -> s7 [0, 65535] { R938 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s8 [0, 65535] { R938 += 1, R900 += 1 };
  s9 -> s9 [0, 65535] { R938 += 1, R900 += 1, R870 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R939 += 1, R940 += 1 };
  s0 -> s1 [0, 65535] { R940 += 1, R901 += 1, R902 += 1 };
  s0 -> s2 [0, 65535] { R940 += 1, R902 += 1, R872 += 1, R840 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R940 += 1, R902 += 1, R872 += 1, R839 += 1, R840 += 1 };
  s0 -> s4 [0, 65535] { R940 += 1, R902 += 1, R871 += 1, R872 += 1 };
  s1 -> s1 [0, 65535] { R940 += 1, R901 += 1, R902 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R940 += 1, R902 += 1, R872 += 1, R840 += 1, R7 += 1 };
  s1 -> s3 [0, 65535] { R940 += 1, R902 += 1, R872 += 1, R839 += 1, R840 += 1 };
  s1 -> s4 [0, 65535] { R940 += 1, R902 += 1, R871 += 1, R872 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R940 += 1, R902 += 1 };
  s2 -> s2 [0, 65535] { R940 += 1, R902 += 1, R872 += 1, R840 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R940 += 1, R902 += 1, R872 += 1 };
  s2 -> s6 [0, 65535] { R940 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R940 += 1, R902 += 1 };
  s3 -> s2 [0, 65535] { R940 += 1, R902 += 1, R872 += 1, R840 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R940 += 1, R902 += 1, R872 += 1, R839 += 1, R840 += 1 };
  s3 -> s6 [0, 65535] { R940 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R940 += 1, R902 += 1, R872 += 1, R840 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R940 += 1, R902 += 1, R872 += 1, R839 += 1, R840 += 1 };
  s4 -> s6 [0, 65535] { R940 += 1 };
  s4 -> s4 [0, 65535] { R940 += 1, R902 += 1, R871 += 1, R872 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R940 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R940 += 1, R902 += 1 };
  s7 -> s6 [0, 65535] { R940 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R940 += 1, R902 += 1 };
  s8 -> s8 [0, 65535] { R940 += 1, R902 += 1, R872 += 1 };
  s8 -> s6 [0, 65535] { R940 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 82] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s0 -> s2 [0, 65535] { R942 += 1, R903 += 1, R904 += 1 };
  s0 -> s3 [0, 65535] { R942 += 1, R904 += 1, R874 += 1, R851 += 1, R852 += 1 };
  s0 -> s4 [0, 65535] { R942 += 1, R904 += 1, R873 += 1, R874 += 1 };
  s0 -> s0 [0, 65535] { R941 += 1, R942 += 1 };
  s0 -> s5 [83, 83] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s0 -> s1 [84, 65535] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s1 -> s1 [0, 82] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s1 -> s5 [83, 83] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s1 -> s1 [84, 65535] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s2 -> s1 [0, 82] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s2 -> s2 [0, 65535] { R942 += 1, R903 += 1, R904 += 1 };
  s2 -> s3 [0, 65535] { R942 += 1, R904 += 1, R874 += 1, R851 += 1, R852 += 1 };
  s2 -> s4 [0, 65535] { R942 += 1, R904 += 1, R873 += 1, R874 += 1 };
  s2 -> s5 [83, 83] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s2 -> s1 [84, 65535] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s3 -> s1 [0, 82] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s3 -> s3 [0, 65535] { R942 += 1, R904 += 1, R874 += 1, R851 += 1, R852 += 1 };
  s3 -> s5 [83, 83] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s3 -> s1 [84, 65535] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s4 -> s1 [0, 82] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s4 -> s3 [0, 65535] { R942 += 1, R904 += 1, R874 += 1, R851 += 1, R852 += 1 };
  s4 -> s4 [0, 65535] { R942 += 1, R904 += 1, R873 += 1, R874 += 1 };
  s4 -> s5 [83, 83] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s4 -> s1 [84, 65535] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s5 -> s6 [0, 65535] { R942 += 1, R904 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R942 += 1 };
  s5 -> s9 [0, 65535] { R942 += 1, R904 += 1, R874 += 1 };
  s5 -> s5 [0, 65535] { R942 += 1, R904 += 1, R874 += 1, R852 += 1 };
  s6 -> s6 [0, 65535] { R942 += 1, R904 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R942 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R942 += 1 };
  s9 -> s6 [0, 65535] { R942 += 1, R904 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R942 += 1 };
  s9 -> s9 [0, 65535] { R942 += 1, R904 += 1, R874 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R944 += 1, R906 += 1, R876 += 1, R854 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R944 += 1, R906 += 1, R875 += 1, R876 += 1 };
  s0 -> s3 [0, 65535] { R944 += 1, R906 += 1, R876 += 1, R853 += 1, R854 += 1 };
  s0 -> s4 [0, 65535] { R944 += 1, R905 += 1, R906 += 1 };
  s0 -> s0 [0, 65535] { R943 += 1, R944 += 1 };
  s1 -> s1 [0, 65535] { R944 += 1, R906 += 1, R876 += 1, R854 += 1, R2 += 1 };
  s1 -> s6 [0, 65535] { R944 += 1, R906 += 1 };
  s1 -> s7 [0, 65535] { R944 += 1 };
  s1 -> s8 [0, 65535] { R944 += 1, R906 += 1, R876 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R944 += 1, R906 += 1, R876 += 1, R854 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R944 += 1, R906 += 1, R875 += 1, R876 += 1 };
  s2 -> s3 [0, 65535] { R944 += 1, R906 += 1, R876 += 1, R853 += 1, R854 += 1 };
  s2 -> s7 [0, 65535] { R944 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R944 += 1, R906 += 1, R876 += 1, R854 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R944 += 1, R906 += 1, R876 += 1, R853 += 1, R854 += 1 };
  s3 -> s6 [0, 65535] { R944 += 1, R906 += 1 };
  s3 -> s7 [0, 65535] { R944 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R944 += 1, R906 += 1, R876 += 1, R854 += 1, R2 += 1 };
  s4 -> s2 [0, 65535] { R944 += 1, R906 += 1, R875 += 1, R876 += 1 };
  s4 -> s3 [0, 65535] { R944 += 1, R906 += 1, R876 += 1, R853 += 1, R854 += 1 };
  s4 -> s4 [0, 65535] { R944 += 1, R905 += 1, R906 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R944 += 1, R906 += 1 };
  s6 -> s7 [0, 65535] { R944 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R944 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R944 += 1, R906 += 1 };
  s8 -> s7 [0, 65535] { R944 += 1 };
  s8 -> s8 [0, 65535] { R944 += 1, R906 += 1, R876 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 82] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R946 += 1, R907 += 1, R908 += 1 };
  s0 -> s0 [0, 65535] { R945 += 1, R946 += 1 };
  s0 -> s3 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R9 += 1, R10 += 1 };
  s0 -> s4 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R855 += 1, R856 += 1 };
  s0 -> s5 [0, 65535] { R946 += 1, R908 += 1, R877 += 1, R878 += 1 };
  s0 -> s6 [83, 83] { R946 += 1, R908 += 1, R878 += 1, R856 += 1 };
  s0 -> s1 [84, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s1 -> s1 [0, 82] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s1 -> s6 [83, 83] { R946 += 1, R908 += 1, R878 += 1, R856 += 1 };
  s1 -> s1 [84, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s2 -> s1 [0, 82] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R946 += 1, R907 += 1, R908 += 1 };
  s2 -> s3 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R9 += 1, R10 += 1 };
  s2 -> s4 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R855 += 1, R856 += 1 };
  s2 -> s5 [0, 65535] { R946 += 1, R908 += 1, R877 += 1, R878 += 1 };
  s2 -> s6 [83, 83] { R946 += 1, R908 += 1, R878 += 1, R856 += 1 };
  s2 -> s1 [84, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s3 -> s1 [0, 82] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R9 += 1, R10 += 1 };
  s3 -> s6 [83, 83] { R946 += 1, R908 += 1, R878 += 1, R856 += 1 };
  s3 -> s1 [84, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s4 -> s1 [0, 82] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s4 -> s3 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R9 += 1, R10 += 1 };
  s4 -> s4 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R855 += 1, R856 += 1 };
  s4 -> s6 [83, 83] { R946 += 1, R908 += 1, R878 += 1, R856 += 1 };
  s4 -> s1 [84, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s5 -> s1 [0, 82] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s5 -> s3 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R9 += 1, R10 += 1 };
  s5 -> s4 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R855 += 1, R856 += 1 };
  s5 -> s5 [0, 65535] { R946 += 1, R908 += 1, R877 += 1, R878 += 1 };
  s5 -> s6 [83, 83] { R946 += 1, R908 += 1, R878 += 1, R856 += 1 };
  s5 -> s1 [84, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1, R10 += 1 };
  s6 -> s7 [0, 65535] { R946 += 1, R908 += 1, R878 += 1 };
  s6 -> s6 [0, 65535] { R946 += 1, R908 += 1, R878 += 1, R856 += 1 };
  s6 -> s8 [0, 65535] { R946 += 1 };
  s6 -> s9 [0, 65535] { R946 += 1, R908 += 1 };
  s6 -> s10 [0, 65535];
  s7 -> s7 [0, 65535] { R946 += 1, R908 += 1, R878 += 1 };
  s7 -> s8 [0, 65535] { R946 += 1 };
  s7 -> s9 [0, 65535] { R946 += 1, R908 += 1 };
  s7 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R946 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s8 [0, 65535] { R946 += 1 };
  s9 -> s9 [0, 65535] { R946 += 1, R908 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s8, s9, s6, s7, s10;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 82] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s0 -> s2 [0, 65535] { R948 += 1, R910 += 1, R879 += 1, R880 += 1 };
  s0 -> s3 [0, 65535] { R948 += 1, R909 += 1, R910 += 1 };
  s0 -> s0 [0, 65535] { R947 += 1, R948 += 1 };
  s0 -> s4 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R841 += 1, R842 += 1 };
  s0 -> s5 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R857 += 1, R858 += 1 };
  s0 -> s6 [83, 83] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s0 -> s1 [84, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s1 -> s1 [0, 82] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s1 -> s6 [83, 83] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s1 -> s1 [84, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s2 -> s1 [0, 82] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s2 -> s2 [0, 65535] { R948 += 1, R910 += 1, R879 += 1, R880 += 1 };
  s2 -> s4 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R841 += 1, R842 += 1 };
  s2 -> s5 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R857 += 1, R858 += 1 };
  s2 -> s6 [83, 83] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s2 -> s1 [84, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s3 -> s1 [0, 82] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s3 -> s2 [0, 65535] { R948 += 1, R910 += 1, R879 += 1, R880 += 1 };
  s3 -> s3 [0, 65535] { R948 += 1, R909 += 1, R910 += 1 };
  s3 -> s4 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R841 += 1, R842 += 1 };
  s3 -> s5 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R857 += 1, R858 += 1 };
  s3 -> s6 [83, 83] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s3 -> s1 [84, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s4 -> s1 [0, 82] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s4 -> s4 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R841 += 1, R842 += 1 };
  s4 -> s6 [83, 83] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s4 -> s1 [84, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s5 -> s1 [0, 82] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s5 -> s4 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R841 += 1, R842 += 1 };
  s5 -> s5 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R857 += 1, R858 += 1 };
  s5 -> s6 [83, 83] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s5 -> s1 [84, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s6 -> s7 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1 };
  s6 -> s8 [0, 65535] { R948 += 1 };
  s6 -> s9 [0, 65535] { R948 += 1, R910 += 1 };
  s6 -> s10 [0, 65535];
  s6 -> s6 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1, R842 += 1 };
  s6 -> s11 [0, 65535] { R948 += 1, R910 += 1, R880 += 1 };
  s7 -> s7 [0, 65535] { R948 += 1, R910 += 1, R880 += 1, R858 += 1 };
  s7 -> s8 [0, 65535] { R948 += 1 };
  s7 -> s9 [0, 65535] { R948 += 1, R910 += 1 };
  s7 -> s10 [0, 65535];
  s7 -> s11 [0, 65535] { R948 += 1, R910 += 1, R880 += 1 };
  s8 -> s8 [0, 65535] { R948 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s8 [0, 65535] { R948 += 1 };
  s9 -> s9 [0, 65535] { R948 += 1, R910 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s8 [0, 65535] { R948 += 1 };
  s11 -> s9 [0, 65535] { R948 += 1, R910 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R948 += 1, R910 += 1, R880 += 1 };
  accepting s8, s9, s6, s7, s10, s11;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R950 += 1, R912 += 1, R881 += 1, R882 += 1 };
  s0 -> s2 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R859 += 1, R860 += 1 };
  s0 -> s3 [0, 65535] { R950 += 1, R911 += 1, R912 += 1 };
  s0 -> s0 [0, 65535] { R949 += 1, R950 += 1 };
  s0 -> s4 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R844 += 1, R836 += 1 };
  s0 -> s5 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R843 += 1, R844 += 1 };
  s1 -> s6 [0, 65535] { R950 += 1 };
  s1 -> s2 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R859 += 1, R860 += 1 };
  s1 -> s1 [0, 65535] { R950 += 1, R912 += 1, R881 += 1, R882 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R844 += 1, R836 += 1 };
  s1 -> s5 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R843 += 1, R844 += 1 };
  s2 -> s6 [0, 65535] { R950 += 1 };
  s2 -> s2 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R859 += 1, R860 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R950 += 1, R912 += 1 };
  s2 -> s4 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R844 += 1, R836 += 1 };
  s2 -> s5 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R843 += 1, R844 += 1 };
  s3 -> s1 [0, 65535] { R950 += 1, R912 += 1, R881 += 1, R882 += 1 };
  s3 -> s2 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R859 += 1, R860 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R950 += 1, R911 += 1, R912 += 1 };
  s3 -> s4 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R844 += 1, R836 += 1 };
  s3 -> s5 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R843 += 1, R844 += 1 };
  s4 -> s6 [0, 65535] { R950 += 1 };
  s4 -> s10 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R950 += 1, R912 += 1 };
  s4 -> s4 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R844 += 1, R836 += 1 };
  s4 -> s9 [0, 65535] { R950 += 1, R912 += 1, R882 += 1 };
  s5 -> s6 [0, 65535] { R950 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R950 += 1, R912 += 1 };
  s5 -> s4 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R844 += 1, R836 += 1 };
  s5 -> s5 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1, R843 += 1, R844 += 1 };
  s5 -> s9 [0, 65535] { R950 += 1, R912 += 1, R882 += 1 };
  s6 -> s6 [0, 65535] { R950 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R950 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R950 += 1, R912 += 1 };
  s9 -> s6 [0, 65535] { R950 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R950 += 1, R912 += 1 };
  s9 -> s9 [0, 65535] { R950 += 1, R912 += 1, R882 += 1 };
  s10 -> s6 [0, 65535] { R950 += 1 };
  s10 -> s10 [0, 65535] { R950 += 1, R912 += 1, R882 += 1, R860 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R950 += 1, R912 += 1 };
  s10 -> s9 [0, 65535] { R950 += 1, R912 += 1, R882 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s10;
};
};
constraint R2 = R842 && R3 = R858 && R4 = R882 && R5 = R850 && R6 = R950 && R9 = 0 && R10 - R841 = -1 && R483 = 0 && R484 - R857 = -1 && R719 = 0 && R720 = R912 && R837 = 0 && R838 = 1 && R839 = 0 && R840 = 1 && R845 = 0 && R846 = 2 && R847 = 0 && R848 = 2 && R849 - R912 = 1 && R851 = R857 && R852 = R858 && R855 = R857 && R856 = R858 && R861 = 3 && R862 = R882 && R863 = 3 && R864 = R882 && R865 = 3 && R866 = R882 && R867 = 3 && R868 = R882 && R869 = 3 && R870 = R882 && R871 = 3 && R872 = R882 && R873 = 3 && R874 = R882 && R875 = 3 && R876 = R882 && R877 = 3 && R878 = R882 && R879 = 3 && R880 = R882 && R881 = 3 && R883 = 0 && R884 = R912 && R885 = 0 && R886 = R912 && R887 = 0 && R888 = R912 && R889 = 0 && R890 = R912 && R891 = 0 && R892 = R912 && R893 = 0 && R894 = R912 && R895 = 0 && R896 = R912 && R897 = 0 && R898 = R912 && R899 = 0 && R900 = R912 && R901 = 0 && R902 = R912 && R903 = 0 && R904 = R912 && R905 = 0 && R906 = R912 && R907 = 0 && R908 = R912 && R909 = 0 && R910 = R912 && R911 = 0 && R913 = 10 && R914 = R950 && R915 = 10 && R916 = R950 && R917 = 10 && R918 = R950 && R919 = 10 && R920 = R950 && R921 = 10 && R922 = R950 && R923 = 10 && R924 = R950 && R925 = 10 && R926 = R950 && R927 = 10 && R928 = R950 && R929 = 10 && R930 = R950 && R931 = 10 && R932 = R950 && R933 = 10 && R934 = R950 && R935 = 10 && R936 = R950 && R937 = 10 && R938 = R950 && R939 = 10 && R940 = R950 && R941 = 10 && R942 = R950 && R943 = 10 && R944 = R950 && R945 = 10 && R946 = R950 && R947 = 10 && R948 = R950 && R949 = 10 && R0 != 0 && R1 != 0 && R481 < 1 && R841 - R842 < 1 && -1 < R841 && R912 < R850 && R857 - R858 < 1 && -1 < R857 && 0 < R858 && 2 < R882 && -1 < R912 && 9 < R950 && (R841 != R843 || R842 = R844 || ((R836 != 0 || R842 - R843 < 1 || R843 < 0) && (R836 = 0 || R842 < R843 || R843 < 0))) && (R853 != R857 || R854 = R858 || (R842 = 0 && (R841 != 0 || R858 - R857 < 1))) && (R857 != R859 || R858 = R860 || ((R841 != 0 || R842 != 0 || R858 - R859 < 1 || R859 < 0) && (R842 < 1 || R858 < R859 || R859 < 0))) && (R841 = R843 || (R836 = 0 && R841 = R842)) && (R853 = R857 || (R842 = 0 && (R841 != 0 || R858 - R857 < 1))) && (R857 = R859 || (R842 = 0 && (R841 != 0 || R858 - R857 < 1)));
// End of Parikh automata intersection problem
