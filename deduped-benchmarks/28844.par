// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R13, R14, R2, R249, R250, R3, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R476, R477, R478, R479, R480, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R444 += 1 };
  s0 -> s0 [0, 65535] { R443 += 1, R444 += 1 };
  s0 -> s2 [46, 46] { R444 += 1 };
  s0 -> s3 [47, 47] { R444 += 1 };
  s0 -> s1 [48, 65535] { R444 += 1 };
  s1 -> s1 [0, 45] { R444 += 1 };
  s1 -> s2 [46, 46] { R444 += 1 };
  s1 -> s3 [47, 47] { R444 += 1 };
  s1 -> s1 [48, 65535] { R444 += 1 };
  s2 -> s1 [0, 45] { R444 += 1 };
  s2 -> s2 [46, 46] { R444 += 1 };
  s2 -> s3 [47, 47] { R444 += 1 };
  s2 -> s1 [48, 114] { R444 += 1 };
  s2 -> s8 [115, 115] { R444 += 1 };
  s2 -> s1 [116, 65535] { R444 += 1 };
  s3 -> s3 [0, 45] { R444 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R444 += 1 };
  s3 -> s3 [47, 65535] { R444 += 1 };
  s4 -> s3 [0, 45] { R444 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R444 += 1 };
  s4 -> s3 [47, 114] { R444 += 1 };
  s4 -> s5 [115, 115] { R444 += 1 };
  s4 -> s3 [116, 65535] { R444 += 1 };
  s5 -> s3 [0, 45] { R444 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R444 += 1 };
  s5 -> s3 [47, 110] { R444 += 1 };
  s5 -> s6 [111, 111] { R444 += 1 };
  s5 -> s3 [112, 65535] { R444 += 1 };
  s6 -> s3 [0, 45] { R444 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R444 += 1 };
  s6 -> s3 [47, 98] { R444 += 1 };
  s6 -> s7 [99, 99] { R444 += 1 };
  s6 -> s3 [100, 65535] { R444 += 1 };
  s7 -> s3 [0, 45] { R444 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R444 += 1 };
  s7 -> s3 [47, 106] { R444 += 1 };
  s7 -> s3 [108, 65535] { R444 += 1 };
  s8 -> s1 [0, 45] { R444 += 1 };
  s8 -> s2 [46, 46] { R444 += 1 };
  s8 -> s3 [47, 47] { R444 += 1 };
  s8 -> s1 [48, 110] { R444 += 1 };
  s8 -> s9 [111, 111] { R444 += 1 };
  s8 -> s1 [112, 65535] { R444 += 1 };
  s9 -> s1 [0, 45] { R444 += 1 };
  s9 -> s2 [46, 46] { R444 += 1 };
  s9 -> s3 [47, 47] { R444 += 1 };
  s9 -> s1 [48, 98] { R444 += 1 };
  s9 -> s10 [99, 99] { R444 += 1 };
  s9 -> s1 [100, 65535] { R444 += 1 };
  s10 -> s1 [0, 45] { R444 += 1 };
  s10 -> s2 [46, 46] { R444 += 1 };
  s10 -> s3 [47, 47] { R444 += 1 };
  s10 -> s1 [48, 106] { R444 += 1 };
  s10 -> s1 [108, 65535] { R444 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R445 += 1, R446 += 1 };
  s0 -> s1 [0, 65535] { R446 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R446 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R448 += 1, R250 += 1 };
  s0 -> s0 [0, 65535] { R447 += 1, R448 += 1 };
  s0 -> s2 [0, 65535] { R448 += 1, R249 += 1, R250 += 1 };
  s0 -> s3 [47, 47] { R448 += 1 };
  s0 -> s1 [48, 65535] { R448 += 1, R250 += 1 };
  s1 -> s1 [0, 46] { R448 += 1, R250 += 1 };
  s1 -> s3 [47, 47] { R448 += 1 };
  s1 -> s1 [48, 65535] { R448 += 1, R250 += 1 };
  s2 -> s1 [0, 46] { R448 += 1, R250 += 1 };
  s2 -> s2 [0, 65535] { R448 += 1, R249 += 1, R250 += 1 };
  s2 -> s3 [47, 47] { R448 += 1 };
  s2 -> s1 [48, 65535] { R448 += 1, R250 += 1 };
  s3 -> s3 [0, 65535] { R448 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R450 += 1, R380 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R450 += 1, R379 += 1, R380 += 1 };
  s0 -> s0 [0, 65535] { R449 += 1, R450 += 1 };
  s1 -> s1 [0, 65535] { R450 += 1, R380 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R450 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R450 += 1, R380 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R450 += 1, R379 += 1, R380 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R450 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R452 += 1, R414 += 1 };
  s0 -> s0 [0, 65535] { R451 += 1, R452 += 1 };
  s0 -> s2 [0, 65535] { R452 += 1, R413 += 1, R414 += 1 };
  s0 -> s3 [64, 64] { R452 += 1, R414 += 1 };
  s0 -> s1 [65, 65535] { R452 += 1, R414 += 1 };
  s1 -> s1 [0, 63] { R452 += 1, R414 += 1 };
  s1 -> s3 [64, 64] { R452 += 1, R414 += 1 };
  s1 -> s1 [65, 65535] { R452 += 1, R414 += 1 };
  s2 -> s1 [0, 63] { R452 += 1, R414 += 1 };
  s2 -> s2 [0, 65535] { R452 += 1, R413 += 1, R414 += 1 };
  s2 -> s3 [64, 64] { R452 += 1, R414 += 1 };
  s2 -> s1 [65, 65535] { R452 += 1, R414 += 1 };
  s3 -> s3 [0, 65535] { R452 += 1, R414 += 1 };
  s3 -> s4 [0, 65535] { R452 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R452 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R453 += 1, R454 += 1 };
  s0 -> s1 [0, 65535] { R454 += 1, R415 += 1, R416 += 1 };
  s0 -> s2 [0, 65535] { R454 += 1, R416 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R454 += 1, R415 += 1, R416 += 1 };
  s1 -> s2 [0, 65535] { R454 += 1, R416 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R454 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R454 += 1, R416 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R454 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 36] { R456 += 1, R418 += 1, R376 += 1 };
  s0 -> s2 [0, 65535] { R456 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R455 += 1, R456 += 1 };
  s0 -> s3 [0, 65535] { R456 += 1, R418 += 1, R375 += 1, R376 += 1 };
  s0 -> s1 [38, 42] { R456 += 1, R418 += 1, R376 += 1 };
  s0 -> s1 [44, 57] { R456 += 1, R418 += 1, R376 += 1 };
  s0 -> s1 [59, 63] { R456 += 1, R418 += 1, R376 += 1 };
  s0 -> s1 [65, 65535] { R456 += 1, R418 += 1, R376 += 1 };
  s1 -> s1 [0, 36] { R456 += 1, R418 += 1, R376 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R456 += 1, R418 += 1 };
  s1 -> s5 [0, 65535] { R456 += 1 };
  s1 -> s1 [38, 42] { R456 += 1, R418 += 1, R376 += 1 };
  s1 -> s1 [44, 57] { R456 += 1, R418 += 1, R376 += 1 };
  s1 -> s1 [59, 63] { R456 += 1, R418 += 1, R376 += 1 };
  s1 -> s1 [65, 65535] { R456 += 1, R418 += 1, R376 += 1 };
  s2 -> s1 [0, 36] { R456 += 1, R418 += 1, R376 += 1 };
  s2 -> s2 [0, 65535] { R456 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R456 += 1, R418 += 1, R375 += 1, R376 += 1 };
  s2 -> s1 [38, 42] { R456 += 1, R418 += 1, R376 += 1 };
  s2 -> s1 [44, 57] { R456 += 1, R418 += 1, R376 += 1 };
  s2 -> s1 [59, 63] { R456 += 1, R418 += 1, R376 += 1 };
  s2 -> s1 [65, 65535] { R456 += 1, R418 += 1, R376 += 1 };
  s3 -> s1 [0, 36] { R456 += 1, R418 += 1, R376 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R456 += 1, R418 += 1, R375 += 1, R376 += 1 };
  s3 -> s5 [0, 65535] { R456 += 1 };
  s3 -> s1 [38, 42] { R456 += 1, R418 += 1, R376 += 1 };
  s3 -> s1 [44, 57] { R456 += 1, R418 += 1, R376 += 1 };
  s3 -> s1 [59, 63] { R456 += 1, R418 += 1, R376 += 1 };
  s3 -> s1 [65, 65535] { R456 += 1, R418 += 1, R376 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R456 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R458 += 1, R420 += 1, R377 += 1, R378 += 1 };
  s0 -> s0 [0, 65535] { R457 += 1, R458 += 1 };
  s0 -> s2 [0, 65535] { R458 += 1, R420 += 1, R378 += 1, R0 += 1 };
  s0 -> s3 [0, 65535] { R458 += 1, R419 += 1, R420 += 1 };
  s1 -> s1 [0, 65535] { R458 += 1, R420 += 1, R377 += 1, R378 += 1 };
  s1 -> s2 [0, 65535] { R458 += 1, R420 += 1, R378 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R458 += 1 };
  s2 -> s5 [0, 65535] { R458 += 1, R420 += 1 };
  s2 -> s2 [0, 65535] { R458 += 1, R420 += 1, R378 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R458 += 1 };
  s3 -> s1 [0, 65535] { R458 += 1, R420 += 1, R377 += 1, R378 += 1 };
  s3 -> s2 [0, 65535] { R458 += 1, R420 += 1, R378 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R458 += 1, R419 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R458 += 1, R420 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R458 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R458 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 43] { R460 += 1, R422 += 1, R392 += 1 };
  s0 -> s2 [0, 65535] { R460 += 1, R421 += 1, R422 += 1 };
  s0 -> s0 [0, 65535] { R459 += 1, R460 += 1 };
  s0 -> s3 [0, 65535] { R460 += 1, R422 += 1, R391 += 1, R392 += 1 };
  s0 -> s1 [45, 64] { R460 += 1, R422 += 1, R392 += 1 };
  s0 -> s4 [83, 83] { R460 += 1, R422 += 1, R392 += 1 };
  s0 -> s1 [84, 65535] { R460 += 1, R422 += 1, R392 += 1 };
  s1 -> s1 [0, 43] { R460 += 1, R422 += 1, R392 += 1 };
  s1 -> s1 [45, 64] { R460 += 1, R422 += 1, R392 += 1 };
  s1 -> s4 [83, 83] { R460 += 1, R422 += 1, R392 += 1 };
  s1 -> s1 [84, 65535] { R460 += 1, R422 += 1, R392 += 1 };
  s2 -> s1 [0, 43] { R460 += 1, R422 += 1, R392 += 1 };
  s2 -> s2 [0, 65535] { R460 += 1, R421 += 1, R422 += 1 };
  s2 -> s3 [0, 65535] { R460 += 1, R422 += 1, R391 += 1, R392 += 1 };
  s2 -> s1 [45, 64] { R460 += 1, R422 += 1, R392 += 1 };
  s2 -> s4 [83, 83] { R460 += 1, R422 += 1, R392 += 1 };
  s2 -> s1 [84, 65535] { R460 += 1, R422 += 1, R392 += 1 };
  s3 -> s1 [0, 43] { R460 += 1, R422 += 1, R392 += 1 };
  s3 -> s3 [0, 65535] { R460 += 1, R422 += 1, R391 += 1, R392 += 1 };
  s3 -> s1 [45, 64] { R460 += 1, R422 += 1, R392 += 1 };
  s3 -> s4 [83, 83] { R460 += 1, R422 += 1, R392 += 1 };
  s3 -> s1 [84, 65535] { R460 += 1, R422 += 1, R392 += 1 };
  s4 -> s4 [0, 43] { R460 += 1, R422 += 1, R392 += 1 };
  s4 -> s5 [0, 65535] { R460 += 1 };
  s4 -> s4 [0, 65535] { R460 += 1, R422 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [45, 64] { R460 += 1, R422 += 1, R392 += 1 };
  s4 -> s4 [83, 65535] { R460 += 1, R422 += 1, R392 += 1 };
  s5 -> s5 [0, 65535] { R460 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R462 += 1, R423 += 1, R424 += 1 };
  s0 -> s2 [0, 65535] { R462 += 1, R424 += 1, R393 += 1, R394 += 1 };
  s0 -> s0 [0, 65535] { R461 += 1, R462 += 1 };
  s0 -> s3 [0, 65535] { R462 += 1, R424 += 1, R394 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R462 += 1, R423 += 1, R424 += 1 };
  s1 -> s2 [0, 65535] { R462 += 1, R424 += 1, R393 += 1, R394 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R462 += 1, R424 += 1, R394 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R462 += 1, R424 += 1, R393 += 1, R394 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R462 += 1 };
  s2 -> s3 [0, 65535] { R462 += 1, R424 += 1, R394 += 1, R3 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R462 += 1, R424 += 1 };
  s3 -> s6 [0, 65535] { R462 += 1 };
  s3 -> s3 [0, 65535] { R462 += 1, R424 += 1, R394 += 1, R3 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R462 += 1, R424 += 1 };
  s5 -> s6 [0, 65535] { R462 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R462 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 57] { R464 += 1, R426 += 1, R396 += 1 };
  s0 -> s2 [0, 65535] { R464 += 1, R426 += 1, R395 += 1, R396 += 1 };
  s0 -> s3 [0, 65535] { R464 += 1, R426 += 1, R396 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R463 += 1, R464 += 1 };
  s0 -> s4 [0, 65535] { R464 += 1, R425 += 1, R426 += 1 };
  s0 -> s5 [58, 58] { R464 += 1, R426 += 1, R396 += 1 };
  s0 -> s1 [59, 65535] { R464 += 1, R426 += 1, R396 += 1 };
  s1 -> s1 [0, 57] { R464 += 1, R426 += 1, R396 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R464 += 1, R426 += 1 };
  s1 -> s8 [0, 65535] { R464 += 1 };
  s1 -> s5 [58, 58] { R464 += 1, R426 += 1, R396 += 1 };
  s1 -> s1 [59, 65535] { R464 += 1, R426 += 1, R396 += 1 };
  s2 -> s1 [0, 57] { R464 += 1, R426 += 1, R396 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R464 += 1, R426 += 1, R395 += 1, R396 += 1 };
  s2 -> s3 [0, 65535] { R464 += 1, R426 += 1, R396 += 1, R11 += 1 };
  s2 -> s8 [0, 65535] { R464 += 1 };
  s2 -> s5 [58, 58] { R464 += 1, R426 += 1, R396 += 1 };
  s2 -> s1 [59, 65535] { R464 += 1, R426 += 1, R396 += 1 };
  s3 -> s1 [0, 57] { R464 += 1, R426 += 1, R396 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R464 += 1, R426 += 1 };
  s3 -> s3 [0, 65535] { R464 += 1, R426 += 1, R396 += 1, R11 += 1 };
  s3 -> s8 [0, 65535] { R464 += 1 };
  s3 -> s5 [58, 58] { R464 += 1, R426 += 1, R396 += 1 };
  s3 -> s1 [59, 65535] { R464 += 1, R426 += 1, R396 += 1 };
  s4 -> s1 [0, 57] { R464 += 1, R426 += 1, R396 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R464 += 1, R426 += 1, R395 += 1, R396 += 1 };
  s4 -> s3 [0, 65535] { R464 += 1, R426 += 1, R396 += 1, R11 += 1 };
  s4 -> s4 [0, 65535] { R464 += 1, R425 += 1, R426 += 1 };
  s4 -> s5 [58, 58] { R464 += 1, R426 += 1, R396 += 1 };
  s4 -> s1 [59, 65535] { R464 += 1, R426 += 1, R396 += 1 };
  s5 -> s5 [0, 65535] { R464 += 1, R426 += 1, R396 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R464 += 1, R426 += 1 };
  s7 -> s8 [0, 65535] { R464 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R464 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 82] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R466 += 1, R428 += 1, R398 += 1, R13 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R465 += 1, R466 += 1 };
  s0 -> s3 [0, 65535] { R466 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [0, 65535] { R466 += 1, R428 += 1, R397 += 1, R398 += 1 };
  s0 -> s5 [83, 83] { R466 += 1, R428 += 1, R398 += 1 };
  s0 -> s1 [84, 65535] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s1 -> s1 [0, 82] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s1 -> s5 [83, 83] { R466 += 1, R428 += 1, R398 += 1 };
  s1 -> s1 [84, 65535] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s2 -> s1 [0, 82] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R466 += 1, R428 += 1, R398 += 1, R13 += 1, R14 += 1 };
  s2 -> s5 [83, 83] { R466 += 1, R428 += 1, R398 += 1 };
  s2 -> s1 [84, 65535] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s3 -> s1 [0, 82] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s3 -> s2 [0, 65535] { R466 += 1, R428 += 1, R398 += 1, R13 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R466 += 1, R427 += 1, R428 += 1 };
  s3 -> s4 [0, 65535] { R466 += 1, R428 += 1, R397 += 1, R398 += 1 };
  s3 -> s5 [83, 83] { R466 += 1, R428 += 1, R398 += 1 };
  s3 -> s1 [84, 65535] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s4 -> s1 [0, 82] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s4 -> s2 [0, 65535] { R466 += 1, R428 += 1, R398 += 1, R13 += 1, R14 += 1 };
  s4 -> s4 [0, 65535] { R466 += 1, R428 += 1, R397 += 1, R398 += 1 };
  s4 -> s5 [83, 83] { R466 += 1, R428 += 1, R398 += 1 };
  s4 -> s1 [84, 65535] { R466 += 1, R428 += 1, R398 += 1, R14 += 1 };
  s5 -> s6 [0, 65535] { R466 += 1, R428 += 1 };
  s5 -> s5 [0, 65535] { R466 += 1, R428 += 1, R398 += 1 };
  s5 -> s7 [0, 65535] { R466 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R466 += 1, R428 += 1 };
  s6 -> s7 [0, 65535] { R466 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R466 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 90] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s0 -> s2 [0, 65535] { R468 += 1, R429 += 1, R430 += 1 };
  s0 -> s3 [0, 65535] { R468 += 1, R430 += 1, R399 += 1, R400 += 1 };
  s0 -> s0 [0, 65535] { R467 += 1, R468 += 1 };
  s0 -> s4 [0, 65535] { R468 += 1, R430 += 1, R400 += 1, R367 += 1, R368 += 1 };
  s0 -> s5 [91, 91] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s0 -> s1 [92, 65535] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s1 -> s6 [0, 65535] { R468 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R468 += 1, R430 += 1 };
  s1 -> s9 [0, 65535] { R468 += 1, R430 += 1, R400 += 1 };
  s1 -> s1 [0, 65535] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s2 -> s1 [0, 90] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s2 -> s2 [0, 65535] { R468 += 1, R429 += 1, R430 += 1 };
  s2 -> s3 [0, 65535] { R468 += 1, R430 += 1, R399 += 1, R400 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R468 += 1, R430 += 1, R400 += 1, R367 += 1, R368 += 1 };
  s2 -> s5 [91, 91] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s2 -> s1 [92, 65535] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s3 -> s1 [0, 90] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s3 -> s6 [0, 65535] { R468 += 1 };
  s3 -> s3 [0, 65535] { R468 += 1, R430 += 1, R399 += 1, R400 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R468 += 1, R430 += 1, R400 += 1, R367 += 1, R368 += 1 };
  s3 -> s5 [91, 91] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s3 -> s1 [92, 65535] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s4 -> s1 [0, 90] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s4 -> s6 [0, 65535] { R468 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R468 += 1, R430 += 1 };
  s4 -> s4 [0, 65535] { R468 += 1, R430 += 1, R400 += 1, R367 += 1, R368 += 1 };
  s4 -> s5 [91, 91] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s4 -> s1 [92, 65535] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s5 -> s1 [0, 65535] { R468 += 1, R430 += 1, R400 += 1, R368 += 1 };
  s6 -> s6 [0, 65535] { R468 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R468 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R468 += 1, R430 += 1 };
  s9 -> s6 [0, 65535] { R468 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R468 += 1, R430 += 1 };
  s9 -> s9 [0, 65535] { R468 += 1, R430 += 1, R400 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R470 += 1, R432 += 1, R402 += 1, R370 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R470 += 1, R431 += 1, R432 += 1 };
  s0 -> s3 [0, 65535] { R470 += 1, R432 += 1, R402 += 1, R369 += 1, R370 += 1 };
  s0 -> s4 [0, 65535] { R470 += 1, R432 += 1, R401 += 1, R402 += 1 };
  s0 -> s0 [0, 65535] { R469 += 1, R470 += 1 };
  s1 -> s7 [0, 65535] { R470 += 1, R432 += 1 };
  s1 -> s1 [0, 65535] { R470 += 1, R432 += 1, R402 += 1, R370 += 1, R7 += 1 };
  s1 -> s8 [0, 65535] { R470 += 1, R432 += 1, R402 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R470 += 1 };
  s2 -> s1 [0, 65535] { R470 += 1, R432 += 1, R402 += 1, R370 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R470 += 1, R431 += 1, R432 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R470 += 1, R432 += 1, R402 += 1, R369 += 1, R370 += 1 };
  s2 -> s4 [0, 65535] { R470 += 1, R432 += 1, R401 += 1, R402 += 1 };
  s3 -> s7 [0, 65535] { R470 += 1, R432 += 1 };
  s3 -> s1 [0, 65535] { R470 += 1, R432 += 1, R402 += 1, R370 += 1, R7 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R470 += 1 };
  s3 -> s3 [0, 65535] { R470 += 1, R432 += 1, R402 += 1, R369 += 1, R370 += 1 };
  s4 -> s1 [0, 65535] { R470 += 1, R432 += 1, R402 += 1, R370 += 1, R7 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R470 += 1 };
  s4 -> s3 [0, 65535] { R470 += 1, R432 += 1, R402 += 1, R369 += 1, R370 += 1 };
  s4 -> s4 [0, 65535] { R470 += 1, R432 += 1, R401 += 1, R402 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R470 += 1 };
  s7 -> s7 [0, 65535] { R470 += 1, R432 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R470 += 1 };
  s8 -> s7 [0, 65535] { R470 += 1, R432 += 1 };
  s8 -> s8 [0, 65535] { R470 += 1, R432 += 1, R402 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R470 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 82] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s0 -> s2 [0, 65535] { R472 += 1, R434 += 1, R403 += 1, R404 += 1 };
  s0 -> s0 [0, 65535] { R471 += 1, R472 += 1 };
  s0 -> s3 [0, 65535] { R472 += 1, R434 += 1, R404 += 1, R381 += 1, R382 += 1 };
  s0 -> s4 [0, 65535] { R472 += 1, R433 += 1, R434 += 1 };
  s0 -> s5 [83, 83] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s0 -> s1 [84, 65535] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s1 -> s1 [0, 82] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s1 -> s5 [83, 83] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s1 -> s1 [84, 65535] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s2 -> s1 [0, 82] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s2 -> s2 [0, 65535] { R472 += 1, R434 += 1, R403 += 1, R404 += 1 };
  s2 -> s3 [0, 65535] { R472 += 1, R434 += 1, R404 += 1, R381 += 1, R382 += 1 };
  s2 -> s5 [83, 83] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s2 -> s1 [84, 65535] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s3 -> s1 [0, 82] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s3 -> s3 [0, 65535] { R472 += 1, R434 += 1, R404 += 1, R381 += 1, R382 += 1 };
  s3 -> s5 [83, 83] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s3 -> s1 [84, 65535] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s4 -> s1 [0, 82] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s4 -> s2 [0, 65535] { R472 += 1, R434 += 1, R403 += 1, R404 += 1 };
  s4 -> s3 [0, 65535] { R472 += 1, R434 += 1, R404 += 1, R381 += 1, R382 += 1 };
  s4 -> s4 [0, 65535] { R472 += 1, R433 += 1, R434 += 1 };
  s4 -> s5 [83, 83] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s4 -> s1 [84, 65535] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s5 -> s5 [0, 65535] { R472 += 1, R434 += 1, R404 += 1, R382 += 1 };
  s5 -> s6 [0, 65535] { R472 += 1, R434 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R472 += 1, R434 += 1, R404 += 1 };
  s5 -> s9 [0, 65535] { R472 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R472 += 1, R434 += 1 };
  s6 -> s9 [0, 65535] { R472 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R472 += 1, R434 += 1 };
  s8 -> s8 [0, 65535] { R472 += 1, R434 += 1, R404 += 1 };
  s8 -> s9 [0, 65535] { R472 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R472 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R474 += 1, R435 += 1, R436 += 1 };
  s0 -> s2 [0, 65535] { R474 += 1, R436 += 1, R406 += 1, R383 += 1, R384 += 1 };
  s0 -> s3 [0, 65535] { R474 += 1, R436 += 1, R406 += 1, R384 += 1, R2 += 1 };
  s0 -> s4 [0, 65535] { R474 += 1, R436 += 1, R405 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R473 += 1, R474 += 1 };
  s1 -> s1 [0, 65535] { R474 += 1, R435 += 1, R436 += 1 };
  s1 -> s2 [0, 65535] { R474 += 1, R436 += 1, R406 += 1, R383 += 1, R384 += 1 };
  s1 -> s3 [0, 65535] { R474 += 1, R436 += 1, R406 += 1, R384 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R474 += 1, R436 += 1, R405 += 1, R406 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R474 += 1, R436 += 1, R406 += 1, R383 += 1, R384 += 1 };
  s2 -> s3 [0, 65535] { R474 += 1, R436 += 1, R406 += 1, R384 += 1, R2 += 1 };
  s2 -> s5 [0, 65535] { R474 += 1 };
  s2 -> s7 [0, 65535] { R474 += 1, R436 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R474 += 1, R436 += 1, R406 += 1, R384 += 1, R2 += 1 };
  s3 -> s5 [0, 65535] { R474 += 1 };
  s3 -> s7 [0, 65535] { R474 += 1, R436 += 1 };
  s3 -> s8 [0, 65535] { R474 += 1, R436 += 1, R406 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R474 += 1, R436 += 1, R406 += 1, R383 += 1, R384 += 1 };
  s4 -> s3 [0, 65535] { R474 += 1, R436 += 1, R406 += 1, R384 += 1, R2 += 1 };
  s4 -> s4 [0, 65535] { R474 += 1, R436 += 1, R405 += 1, R406 += 1 };
  s4 -> s5 [0, 65535] { R474 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R474 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R474 += 1 };
  s7 -> s7 [0, 65535] { R474 += 1, R436 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s5 [0, 65535] { R474 += 1 };
  s8 -> s7 [0, 65535] { R474 += 1, R436 += 1 };
  s8 -> s8 [0, 65535] { R474 += 1, R436 += 1, R406 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 82] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s0 -> s2 [0, 65535] { R476 += 1, R438 += 1, R407 += 1, R408 += 1 };
  s0 -> s3 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1, R8 += 1 };
  s0 -> s4 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R385 += 1, R386 += 1 };
  s0 -> s0 [0, 65535] { R475 += 1, R476 += 1 };
  s0 -> s5 [0, 65535] { R476 += 1, R437 += 1, R438 += 1 };
  s0 -> s6 [83, 83] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s0 -> s1 [84, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s1 -> s1 [0, 82] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s1 -> s8 [0, 65535] { R476 += 1 };
  s1 -> s1 [0, 65535] { R476 += 1, R438 += 1, R408 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s9 [0, 65535] { R476 += 1, R438 += 1 };
  s1 -> s6 [83, 83] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s1 -> s1 [84, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s2 -> s1 [0, 82] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s2 -> s2 [0, 65535] { R476 += 1, R438 += 1, R407 += 1, R408 += 1 };
  s2 -> s8 [0, 65535] { R476 += 1 };
  s2 -> s3 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R385 += 1, R386 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s6 [83, 83] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s2 -> s1 [84, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s3 -> s1 [0, 82] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s3 -> s8 [0, 65535] { R476 += 1 };
  s3 -> s3 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1, R8 += 1 };
  s3 -> s10 [0, 65535] { R476 += 1, R438 += 1, R408 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s9 [0, 65535] { R476 += 1, R438 += 1 };
  s3 -> s6 [83, 83] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s3 -> s1 [84, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s4 -> s1 [0, 82] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s4 -> s8 [0, 65535] { R476 += 1 };
  s4 -> s3 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1, R8 += 1 };
  s4 -> s4 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R385 += 1, R386 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s9 [0, 65535] { R476 += 1, R438 += 1 };
  s4 -> s6 [83, 83] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s4 -> s1 [84, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s5 -> s1 [0, 82] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s5 -> s2 [0, 65535] { R476 += 1, R438 += 1, R407 += 1, R408 += 1 };
  s5 -> s3 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1, R8 += 1 };
  s5 -> s4 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R385 += 1, R386 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R476 += 1, R437 += 1, R438 += 1 };
  s5 -> s6 [83, 83] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s5 -> s1 [84, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s6 -> s6 [0, 65535] { R476 += 1, R438 += 1, R408 += 1, R386 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R476 += 1 };
  s8 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R476 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R476 += 1, R438 += 1 };
  s10 -> s8 [0, 65535] { R476 += 1 };
  s10 -> s10 [0, 65535] { R476 += 1, R438 += 1, R408 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s9 [0, 65535] { R476 += 1, R438 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s1, s7, s0, s10;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 82] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s0 -> s2 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R387 += 1, R388 += 1 };
  s0 -> s3 [0, 65535] { R478 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s0 -> s4 [0, 65535] { R478 += 1, R439 += 1, R440 += 1 };
  s0 -> s0 [0, 65535] { R477 += 1, R478 += 1 };
  s0 -> s5 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R371 += 1, R372 += 1 };
  s0 -> s6 [83, 83] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s0 -> s1 [84, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s1 -> s1 [0, 82] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s1 -> s6 [83, 83] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s1 -> s1 [84, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s2 -> s1 [0, 82] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s2 -> s2 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R387 += 1, R388 += 1 };
  s2 -> s5 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R371 += 1, R372 += 1 };
  s2 -> s6 [83, 83] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s2 -> s1 [84, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s3 -> s1 [0, 82] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s3 -> s2 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R387 += 1, R388 += 1 };
  s3 -> s3 [0, 65535] { R478 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s3 -> s5 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R371 += 1, R372 += 1 };
  s3 -> s6 [83, 83] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s3 -> s1 [84, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s4 -> s1 [0, 82] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s4 -> s2 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R387 += 1, R388 += 1 };
  s4 -> s3 [0, 65535] { R478 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s4 -> s4 [0, 65535] { R478 += 1, R439 += 1, R440 += 1 };
  s4 -> s5 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R371 += 1, R372 += 1 };
  s4 -> s6 [83, 83] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s4 -> s1 [84, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s5 -> s1 [0, 82] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s5 -> s5 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R371 += 1, R372 += 1 };
  s5 -> s6 [83, 83] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s5 -> s1 [84, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s6 -> s6 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1, R372 += 1 };
  s6 -> s7 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1 };
  s6 -> s8 [0, 65535] { R478 += 1 };
  s6 -> s9 [0, 65535] { R478 += 1, R440 += 1, R410 += 1 };
  s6 -> s10 [0, 65535];
  s6 -> s11 [0, 65535] { R478 += 1, R440 += 1 };
  s7 -> s7 [0, 65535] { R478 += 1, R440 += 1, R410 += 1, R388 += 1 };
  s7 -> s8 [0, 65535] { R478 += 1 };
  s7 -> s9 [0, 65535] { R478 += 1, R440 += 1, R410 += 1 };
  s7 -> s10 [0, 65535];
  s7 -> s11 [0, 65535] { R478 += 1, R440 += 1 };
  s8 -> s8 [0, 65535] { R478 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s8 [0, 65535] { R478 += 1 };
  s9 -> s9 [0, 65535] { R478 += 1, R440 += 1, R410 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R478 += 1, R440 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s8 [0, 65535] { R478 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R478 += 1, R440 += 1 };
  accepting s8, s9, s6, s7, s10, s11;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R480 += 1, R442 += 1, R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R374 += 1, R366 += 1 };
  s0 -> s3 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R389 += 1, R390 += 1 };
  s0 -> s4 [0, 65535] { R480 += 1, R441 += 1, R442 += 1 };
  s0 -> s0 [0, 65535] { R479 += 1, R480 += 1 };
  s0 -> s5 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R373 += 1, R374 += 1 };
  s1 -> s1 [0, 65535] { R480 += 1, R442 += 1, R411 += 1, R412 += 1 };
  s1 -> s2 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R374 += 1, R366 += 1 };
  s1 -> s3 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R389 += 1, R390 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R373 += 1, R374 += 1 };
  s1 -> s9 [0, 65535] { R480 += 1 };
  s2 -> s2 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R374 += 1, R366 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R480 += 1, R442 += 1, R412 += 1 };
  s2 -> s8 [0, 65535] { R480 += 1, R442 += 1 };
  s2 -> s9 [0, 65535] { R480 += 1 };
  s2 -> s10 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1 };
  s3 -> s2 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R374 += 1, R366 += 1 };
  s3 -> s3 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R389 += 1, R390 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R373 += 1, R374 += 1 };
  s3 -> s8 [0, 65535] { R480 += 1, R442 += 1 };
  s3 -> s9 [0, 65535] { R480 += 1 };
  s4 -> s1 [0, 65535] { R480 += 1, R442 += 1, R411 += 1, R412 += 1 };
  s4 -> s2 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R374 += 1, R366 += 1 };
  s4 -> s3 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R389 += 1, R390 += 1 };
  s4 -> s4 [0, 65535] { R480 += 1, R441 += 1, R442 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R373 += 1, R374 += 1 };
  s5 -> s2 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R374 += 1, R366 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1, R373 += 1, R374 += 1 };
  s5 -> s7 [0, 65535] { R480 += 1, R442 += 1, R412 += 1 };
  s5 -> s8 [0, 65535] { R480 += 1, R442 += 1 };
  s5 -> s9 [0, 65535] { R480 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R480 += 1, R442 += 1, R412 += 1 };
  s7 -> s8 [0, 65535] { R480 += 1, R442 += 1 };
  s7 -> s9 [0, 65535] { R480 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R480 += 1, R442 += 1 };
  s8 -> s9 [0, 65535] { R480 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R480 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s7 [0, 65535] { R480 += 1, R442 += 1, R412 += 1 };
  s10 -> s8 [0, 65535] { R480 += 1, R442 += 1 };
  s10 -> s9 [0, 65535] { R480 += 1 };
  s10 -> s10 [0, 65535] { R480 += 1, R442 += 1, R412 += 1, R390 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s10;
};
};
constraint R2 = R372 && R3 = R388 && R4 = R412 && R5 = R380 && R6 = R480 && R13 = 0 && R14 - R387 = -1 && R249 = 0 && R250 = R442 && R367 = 0 && R368 = 1 && R369 = 0 && R370 = 1 && R371 = 0 && R375 = 0 && R376 = 2 && R377 = 0 && R378 = 2 && R379 - R442 = 1 && R381 = R387 && R382 = R388 && R391 = 3 && R392 = R412 && R393 = 3 && R394 = R412 && R395 = 3 && R396 = R412 && R397 = 3 && R398 = R412 && R399 = 3 && R400 = R412 && R401 = 3 && R402 = R412 && R403 = 3 && R404 = R412 && R405 = 3 && R406 = R412 && R407 = 3 && R408 = R412 && R409 = 3 && R410 = R412 && R411 = 3 && R413 = 0 && R414 = R442 && R415 = 0 && R416 = R442 && R417 = 0 && R418 = R442 && R419 = 0 && R420 = R442 && R421 = 0 && R422 = R442 && R423 = 0 && R424 = R442 && R425 = 0 && R426 = R442 && R427 = 0 && R428 = R442 && R429 = 0 && R430 = R442 && R431 = 0 && R432 = R442 && R433 = 0 && R434 = R442 && R435 = 0 && R436 = R442 && R437 = 0 && R438 = R442 && R439 = 0 && R440 = R442 && R441 = 0 && R443 = 10 && R444 = R480 && R445 = 10 && R446 = R480 && R447 = 10 && R448 = R480 && R449 = 10 && R450 = R480 && R451 = 10 && R452 = R480 && R453 = 10 && R454 = R480 && R455 = 10 && R456 = R480 && R457 = 10 && R458 = R480 && R459 = 10 && R460 = R480 && R461 = 10 && R462 = R480 && R463 = 10 && R464 = R480 && R465 = 10 && R466 = R480 && R467 = 10 && R468 = R480 && R469 = 10 && R470 = R480 && R471 = 10 && R472 = R480 && R473 = 10 && R474 = R480 && R475 = 10 && R476 = R480 && R477 = 10 && R478 = R480 && R479 = 10 && R0 != 0 && R1 != 0 && R8 < 1 && R11 < 1 && -1 < R372 && R442 < R380 && R387 - R388 < 1 && -1 < R387 && 0 < R388 && 2 < R412 && -1 < R442 && 9 < R480 && (R373 != 0 || R372 = R374 || (R366 = 0 && R372 = 0)) && (R383 != R387 || R384 = R388 || (R372 = 0 && R387 = R388)) && (R385 != R387 || R386 = R388 || (R372 = 0 && R387 = R388)) && (R387 != R389 || R388 = R390 || ((R372 != 0 || R388 - R389 < 1 || R389 < 0) && (R372 < 1 || R388 < R389 || R389 < 0))) && (R373 = 0 || (R366 = 0 && R372 = 0)) && (R383 = R387 || (R372 = 0 && R387 = R388)) && (R385 = R387 || (R372 = 0 && R387 = R388)) && (R387 = R389 || (R372 = 0 && R387 = R388));
// End of Parikh automata intersection problem
