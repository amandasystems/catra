// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R7063, R7064, R7065, R7066, R7067, R7068, R7069, R7070, R7501, R7502, R7503, R7504, R7505, R7506, R7507, R7508, R7509, R7510, R7511, R7512, R7513, R7514, R7515, R7516, R7517, R7518, R7519, R7520, R7521, R7522, R7523, R7524, R7525, R7526, R7527, R7528, R7529, R7530, R7531, R7532, R7533, R7534, R7535, R7536, R7537, R7538, R7539, R7540, R7541, R7542, R7543, R7544, R7545, R7546, R7547, R7548, R7549, R7550, R7551, R7552, R7553, R7554, R7555, R7556, R7557, R7558, R7559, R7560, R7561, R7562, R7563, R7564, R7565, R7566, R7567, R7568, R7569, R7570, R7571, R7572, R7573, R7574, R7575, R7576, R7577, R7578, R7579, R7580, R7581, R7582, R7583, R7584, R7585, R7586, R7587, R7588, R7589, R7590, R7591, R7592, R7593, R7594, R7595, R7596, R7597, R7598, R7599, R7600, R7601, R7602, R7603, R7604, R7605, R7606, R7607, R7608;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R7564 += 1 };
  s0 -> s0 [0, 65535] { R7563 += 1, R7564 += 1 };
  s0 -> s2 [46, 46] { R7564 += 1 };
  s0 -> s3 [47, 47] { R7564 += 1 };
  s0 -> s1 [48, 65535] { R7564 += 1 };
  s1 -> s1 [0, 45] { R7564 += 1 };
  s1 -> s2 [46, 46] { R7564 += 1 };
  s1 -> s3 [47, 47] { R7564 += 1 };
  s1 -> s1 [48, 65535] { R7564 += 1 };
  s2 -> s1 [0, 45] { R7564 += 1 };
  s2 -> s2 [46, 46] { R7564 += 1 };
  s2 -> s3 [47, 47] { R7564 += 1 };
  s2 -> s1 [48, 114] { R7564 += 1 };
  s2 -> s8 [115, 115] { R7564 += 1 };
  s2 -> s1 [116, 65535] { R7564 += 1 };
  s3 -> s3 [0, 45] { R7564 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R7564 += 1 };
  s3 -> s3 [47, 65535] { R7564 += 1 };
  s4 -> s3 [0, 45] { R7564 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R7564 += 1 };
  s4 -> s3 [47, 114] { R7564 += 1 };
  s4 -> s5 [115, 115] { R7564 += 1 };
  s4 -> s3 [116, 65535] { R7564 += 1 };
  s5 -> s3 [0, 45] { R7564 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R7564 += 1 };
  s5 -> s3 [47, 110] { R7564 += 1 };
  s5 -> s6 [111, 111] { R7564 += 1 };
  s5 -> s3 [112, 65535] { R7564 += 1 };
  s6 -> s3 [0, 45] { R7564 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R7564 += 1 };
  s6 -> s3 [47, 98] { R7564 += 1 };
  s6 -> s7 [99, 99] { R7564 += 1 };
  s6 -> s3 [100, 65535] { R7564 += 1 };
  s7 -> s3 [0, 45] { R7564 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R7564 += 1 };
  s7 -> s3 [47, 106] { R7564 += 1 };
  s7 -> s3 [108, 65535] { R7564 += 1 };
  s8 -> s1 [0, 45] { R7564 += 1 };
  s8 -> s2 [46, 46] { R7564 += 1 };
  s8 -> s3 [47, 47] { R7564 += 1 };
  s8 -> s1 [48, 110] { R7564 += 1 };
  s8 -> s9 [111, 111] { R7564 += 1 };
  s8 -> s1 [112, 65535] { R7564 += 1 };
  s9 -> s1 [0, 45] { R7564 += 1 };
  s9 -> s2 [46, 46] { R7564 += 1 };
  s9 -> s3 [47, 47] { R7564 += 1 };
  s9 -> s1 [48, 98] { R7564 += 1 };
  s9 -> s10 [99, 99] { R7564 += 1 };
  s9 -> s1 [100, 65535] { R7564 += 1 };
  s10 -> s1 [0, 45] { R7564 += 1 };
  s10 -> s2 [46, 46] { R7564 += 1 };
  s10 -> s3 [47, 47] { R7564 += 1 };
  s10 -> s1 [48, 106] { R7564 += 1 };
  s10 -> s1 [108, 65535] { R7564 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R7566 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R7565 += 1, R7566 += 1 };
  s1 -> s1 [0, 65535] { R7566 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R7568 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R7567 += 1, R7568 += 1 };
  s0 -> s2 [0, 65535] { R7568 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R7568 += 1 };
  s0 -> s1 [48, 65535] { R7568 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R7568 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R7568 += 1 };
  s1 -> s1 [48, 65535] { R7568 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R7568 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R7568 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R7568 += 1 };
  s2 -> s1 [48, 65535] { R7568 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7568 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R7570 += 1, R7064 += 1 };
  s0 -> s2 [0, 65535] { R7570 += 1, R7063 += 1, R7064 += 1 };
  s0 -> s0 [0, 65535] { R7569 += 1, R7570 += 1 };
  s0 -> s1 [38, 42] { R7570 += 1, R7064 += 1 };
  s0 -> s1 [44, 45] { R7570 += 1, R7064 += 1 };
  s0 -> s1 [47, 62] { R7570 += 1, R7064 += 1 };
  s0 -> s1 [64, 65535] { R7570 += 1, R7064 += 1 };
  s1 -> s1 [0, 36] { R7570 += 1, R7064 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7570 += 1 };
  s1 -> s1 [38, 42] { R7570 += 1, R7064 += 1 };
  s1 -> s1 [44, 45] { R7570 += 1, R7064 += 1 };
  s1 -> s1 [47, 62] { R7570 += 1, R7064 += 1 };
  s1 -> s1 [64, 65535] { R7570 += 1, R7064 += 1 };
  s2 -> s1 [0, 36] { R7570 += 1, R7064 += 1 };
  s2 -> s2 [0, 65535] { R7570 += 1, R7063 += 1, R7064 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R7570 += 1, R7064 += 1 };
  s2 -> s1 [44, 45] { R7570 += 1, R7064 += 1 };
  s2 -> s1 [47, 62] { R7570 += 1, R7064 += 1 };
  s2 -> s1 [64, 65535] { R7570 += 1, R7064 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R7572 += 1, R7065 += 1, R7066 += 1 };
  s0 -> s2 [0, 65535] { R7572 += 1, R7066 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R7571 += 1, R7572 += 1 };
  s1 -> s1 [0, 65535] { R7572 += 1, R7065 += 1, R7066 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7572 += 1, R7066 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7572 += 1 };
  s2 -> s2 [0, 65535] { R7572 += 1, R7066 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7572 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R7573 += 1, R7574 += 1 };
  s0 -> s2 [0, 65535] { R7574 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R7574 += 1, R7067 += 1, R7068 += 1 };
  s0 -> s4 [63, 63] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7574 += 1 };
  s1 -> s1 [0, 65535] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R7574 += 1, R7068 += 1 };
  s2 -> s1 [0, 62] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7574 += 1 };
  s2 -> s2 [0, 65535] { R7574 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7574 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R7574 += 1, R7067 += 1, R7068 += 1 };
  s3 -> s4 [63, 63] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R7574 += 1, R7068 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7574 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7574 += 1 };
  s7 -> s7 [0, 65535] { R7574 += 1, R7068 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R7575 += 1, R7576 += 1 };
  s0 -> s1 [0, 65535] { R7576 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R7576 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R7576 += 1, R7069 += 1, R7070 += 1 };
  s1 -> s1 [0, 65535] { R7576 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s2 [0, 65535] { R7576 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R7576 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7576 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R7576 += 1 };
  s2 -> s6 [0, 65535] { R7576 += 1, R7070 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7576 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s2 [0, 65535] { R7576 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R7576 += 1, R7069 += 1, R7070 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7576 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7576 += 1 };
  s6 -> s6 [0, 65535] { R7576 += 1, R7070 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R7578 += 1, R7532 += 1 };
  s0 -> s0 [0, 65535] { R7577 += 1, R7578 += 1 };
  s0 -> s2 [0, 65535] { R7578 += 1, R7531 += 1, R7532 += 1 };
  s0 -> s1 [45, 63] { R7578 += 1, R7532 += 1 };
  s0 -> s3 [88, 88] { R7578 += 1, R7532 += 1 };
  s0 -> s1 [89, 65535] { R7578 += 1, R7532 += 1 };
  s1 -> s1 [0, 43] { R7578 += 1, R7532 += 1 };
  s1 -> s1 [45, 63] { R7578 += 1, R7532 += 1 };
  s1 -> s3 [88, 88] { R7578 += 1, R7532 += 1 };
  s1 -> s1 [89, 65535] { R7578 += 1, R7532 += 1 };
  s2 -> s1 [0, 43] { R7578 += 1, R7532 += 1 };
  s2 -> s2 [0, 65535] { R7578 += 1, R7531 += 1, R7532 += 1 };
  s2 -> s1 [45, 63] { R7578 += 1, R7532 += 1 };
  s2 -> s3 [88, 88] { R7578 += 1, R7532 += 1 };
  s2 -> s1 [89, 65535] { R7578 += 1, R7532 += 1 };
  s3 -> s3 [0, 43] { R7578 += 1, R7532 += 1 };
  s3 -> s3 [0, 65535] { R7578 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R7578 += 1, R7532 += 1 };
  s3 -> s3 [88, 65535] { R7578 += 1, R7532 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R7580 += 1, R7533 += 1, R7534 += 1 };
  s0 -> s0 [0, 65535] { R7579 += 1, R7580 += 1 };
  s0 -> s2 [0, 65535] { R7580 += 1, R7534 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R7580 += 1, R7533 += 1, R7534 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7580 += 1, R7534 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R7580 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7580 += 1, R7534 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R7580 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R7582 += 1, R7536 += 1 };
  s0 -> s0 [0, 65535] { R7581 += 1, R7582 += 1 };
  s0 -> s2 [0, 65535] { R7582 += 1, R7536 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R7582 += 1, R7535 += 1, R7536 += 1 };
  s0 -> s4 [58, 58] { R7582 += 1, R7536 += 1 };
  s0 -> s1 [59, 65535] { R7582 += 1, R7536 += 1 };
  s1 -> s1 [0, 57] { R7582 += 1, R7536 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7582 += 1 };
  s1 -> s4 [58, 58] { R7582 += 1, R7536 += 1 };
  s1 -> s1 [59, 65535] { R7582 += 1, R7536 += 1 };
  s2 -> s1 [0, 57] { R7582 += 1, R7536 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7582 += 1, R7536 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R7582 += 1 };
  s2 -> s4 [58, 58] { R7582 += 1, R7536 += 1 };
  s2 -> s1 [59, 65535] { R7582 += 1, R7536 += 1 };
  s3 -> s1 [0, 57] { R7582 += 1, R7536 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7582 += 1, R7536 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R7582 += 1, R7535 += 1, R7536 += 1 };
  s3 -> s4 [58, 58] { R7582 += 1, R7536 += 1 };
  s3 -> s1 [59, 65535] { R7582 += 1, R7536 += 1 };
  s4 -> s4 [0, 65535] { R7582 += 1, R7536 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7582 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R7584 += 1, R7538 += 1 };
  s0 -> s0 [0, 65535] { R7583 += 1, R7584 += 1 };
  s0 -> s2 [0, 65535] { R7584 += 1, R7538 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R7584 += 1, R7537 += 1, R7538 += 1 };
  s0 -> s4 [88, 88] { R7584 += 1, R7538 += 1 };
  s0 -> s1 [89, 65535] { R7584 += 1, R7538 += 1 };
  s1 -> s1 [0, 87] { R7584 += 1, R7538 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7584 += 1 };
  s1 -> s4 [88, 88] { R7584 += 1, R7538 += 1 };
  s1 -> s1 [89, 65535] { R7584 += 1, R7538 += 1 };
  s2 -> s1 [0, 87] { R7584 += 1, R7538 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7584 += 1, R7538 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R7584 += 1 };
  s2 -> s4 [88, 88] { R7584 += 1, R7538 += 1 };
  s2 -> s1 [89, 65535] { R7584 += 1, R7538 += 1 };
  s3 -> s1 [0, 87] { R7584 += 1, R7538 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7584 += 1, R7538 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R7584 += 1, R7537 += 1, R7538 += 1 };
  s3 -> s4 [88, 88] { R7584 += 1, R7538 += 1 };
  s3 -> s1 [89, 65535] { R7584 += 1, R7538 += 1 };
  s4 -> s4 [0, 65535] { R7584 += 1, R7538 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7584 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R7586 += 1, R7539 += 1, R7540 += 1 };
  s0 -> s3 [0, 65535] { R7586 += 1, R7540 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R7585 += 1, R7586 += 1 };
  s0 -> s4 [91, 91] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R7586 += 1, R7540 += 1 };
  s1 -> s1 [0, 65535] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7586 += 1 };
  s2 -> s1 [0, 90] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R7586 += 1, R7539 += 1, R7540 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7586 += 1, R7540 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7586 += 1, R7540 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s6 [0, 65535] { R7586 += 1 };
  s3 -> s4 [91, 91] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R7586 += 1, R7540 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7586 += 1 };
  s7 -> s7 [0, 65535] { R7586 += 1, R7540 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7586 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7588 += 1, R7541 += 1, R7542 += 1 };
  s0 -> s0 [0, 65535] { R7587 += 1, R7588 += 1 };
  s0 -> s2 [0, 65535] { R7588 += 1, R7542 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R7588 += 1, R7542 += 1, R5998 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R7588 += 1, R7541 += 1, R7542 += 1 };
  s1 -> s2 [0, 65535] { R7588 += 1, R7542 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s3 [0, 65535] { R7588 += 1, R7542 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7588 += 1, R7542 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s3 [0, 65535] { R7588 += 1, R7542 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7588 += 1 };
  s3 -> s4 [0, 65535] { R7588 += 1, R7542 += 1 };
  s3 -> s3 [0, 65535] { R7588 += 1, R7542 += 1, R5998 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7588 += 1 };
  s4 -> s4 [0, 65535] { R7588 += 1, R7542 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7588 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7588 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7590 += 1, R7544 += 1, R7508 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R7589 += 1, R7590 += 1 };
  s0 -> s2 [0, 65535] { R7590 += 1, R7543 += 1, R7544 += 1 };
  s0 -> s3 [0, 65535] { R7590 += 1, R7544 += 1, R7507 += 1, R7508 += 1 };
  s1 -> s1 [0, 65535] { R7590 += 1, R7544 += 1, R7508 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R7590 += 1, R7544 += 1 };
  s1 -> s4 [0, 65535] { R7590 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7590 += 1, R7544 += 1, R7508 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R7590 += 1, R7543 += 1, R7544 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7590 += 1, R7544 += 1, R7507 += 1, R7508 += 1 };
  s3 -> s1 [0, 65535] { R7590 += 1, R7544 += 1, R7508 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R7590 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7590 += 1, R7544 += 1, R7507 += 1, R7508 += 1 };
  s4 -> s4 [0, 65535] { R7590 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7590 += 1, R7544 += 1 };
  s6 -> s4 [0, 65535] { R7590 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R7591 += 1, R7592 += 1 };
  s0 -> s1 [0, 65535] { R7592 += 1, R7546 += 1, R7509 += 1, R7510 += 1 };
  s0 -> s2 [0, 65535] { R7592 += 1, R7545 += 1, R7546 += 1 };
  s0 -> s3 [108, 108] { R7592 += 1, R7546 += 1, R7510 += 1 };
  s1 -> s1 [0, 65535] { R7592 += 1, R7546 += 1, R7509 += 1, R7510 += 1 };
  s1 -> s3 [108, 108] { R7592 += 1, R7546 += 1, R7510 += 1 };
  s2 -> s1 [0, 65535] { R7592 += 1, R7546 += 1, R7509 += 1, R7510 += 1 };
  s2 -> s2 [0, 65535] { R7592 += 1, R7545 += 1, R7546 += 1 };
  s2 -> s3 [108, 108] { R7592 += 1, R7546 += 1, R7510 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7592 += 1 };
  s3 -> s3 [0, 65535] { R7592 += 1, R7546 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7592 += 1 };
  accepting s3, s4, s5;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s0 -> s0 [0, 65535] { R7593 += 1, R7594 += 1 };
  s0 -> s2 [0, 65535] { R7594 += 1, R7547 += 1, R7548 += 1 };
  s0 -> s3 [0, 65535] { R7594 += 1, R7548 += 1, R7515 += 1, R7516 += 1 };
  s0 -> s4 [88, 88] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s0 -> s1 [89, 65535] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s1 -> s1 [0, 87] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s1 -> s4 [88, 88] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s1 -> s1 [89, 65535] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s2 -> s1 [0, 87] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s2 -> s2 [0, 65535] { R7594 += 1, R7547 += 1, R7548 += 1 };
  s2 -> s3 [0, 65535] { R7594 += 1, R7548 += 1, R7515 += 1, R7516 += 1 };
  s2 -> s4 [88, 88] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s2 -> s1 [89, 65535] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s3 -> s1 [0, 87] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s3 -> s3 [0, 65535] { R7594 += 1, R7548 += 1, R7515 += 1, R7516 += 1 };
  s3 -> s4 [88, 88] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s3 -> s1 [89, 65535] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s4 -> s4 [0, 65535] { R7594 += 1, R7548 += 1, R7516 += 1 };
  s4 -> s5 [0, 65535] { R7594 += 1, R7548 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R7594 += 1 };
  s5 -> s5 [0, 65535] { R7594 += 1, R7548 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R7594 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7594 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R7596 += 1, R7550 += 1, R7517 += 1, R7518 += 1 };
  s0 -> s2 [0, 65535] { R7596 += 1, R7549 += 1, R7550 += 1 };
  s0 -> s3 [0, 65535] { R7596 += 1, R7550 += 1, R7518 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R7595 += 1, R7596 += 1 };
  s1 -> s1 [0, 65535] { R7596 += 1, R7550 += 1, R7517 += 1, R7518 += 1 };
  s1 -> s3 [0, 65535] { R7596 += 1, R7550 += 1, R7518 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R7596 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R7596 += 1, R7550 += 1, R7517 += 1, R7518 += 1 };
  s2 -> s2 [0, 65535] { R7596 += 1, R7549 += 1, R7550 += 1 };
  s2 -> s3 [0, 65535] { R7596 += 1, R7550 += 1, R7518 += 1, R1 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7596 += 1, R7550 += 1, R7518 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R7596 += 1, R7550 += 1 };
  s3 -> s5 [0, 65535] { R7596 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7596 += 1, R7550 += 1 };
  s4 -> s5 [0, 65535] { R7596 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7596 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s0 -> s2 [0, 65535] { R7598 += 1, R7551 += 1, R7552 += 1 };
  s0 -> s3 [0, 65535] { R7598 += 1, R7552 += 1, R7520 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R7597 += 1, R7598 += 1 };
  s0 -> s4 [0, 65535] { R7598 += 1, R7552 += 1, R7519 += 1, R7520 += 1 };
  s0 -> s5 [88, 88] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s0 -> s1 [89, 65535] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s1 -> s1 [0, 87] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7598 += 1, R7552 += 1 };
  s1 -> s7 [0, 65535] { R7598 += 1 };
  s1 -> s5 [88, 88] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s1 -> s1 [89, 65535] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s2 -> s1 [0, 87] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7598 += 1, R7551 += 1, R7552 += 1 };
  s2 -> s3 [0, 65535] { R7598 += 1, R7552 += 1, R7520 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R7598 += 1, R7552 += 1, R7519 += 1, R7520 += 1 };
  s2 -> s5 [88, 88] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s2 -> s1 [89, 65535] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s3 -> s1 [0, 87] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7598 += 1, R7552 += 1, R7520 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R7598 += 1, R7552 += 1 };
  s3 -> s7 [0, 65535] { R7598 += 1 };
  s3 -> s5 [88, 88] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s3 -> s1 [89, 65535] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s4 -> s1 [0, 87] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R7598 += 1, R7552 += 1, R7520 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R7598 += 1, R7552 += 1, R7519 += 1, R7520 += 1 };
  s4 -> s7 [0, 65535] { R7598 += 1 };
  s4 -> s5 [88, 88] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s4 -> s1 [89, 65535] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s5 -> s5 [0, 65535] { R7598 += 1, R7552 += 1, R7520 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7598 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7598 += 1, R7552 += 1 };
  s8 -> s7 [0, 65535] { R7598 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s0 -> s2 [0, 65535] { R7600 += 1, R7554 += 1, R7521 += 1, R7522 += 1 };
  s0 -> s3 [0, 65535] { R7600 += 1, R7554 += 1, R7522 += 1, R7501 += 1, R7502 += 1 };
  s0 -> s0 [0, 65535] { R7599 += 1, R7600 += 1 };
  s0 -> s4 [0, 65535] { R7600 += 1, R7553 += 1, R7554 += 1 };
  s0 -> s1 [89, 65535] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s1 -> s1 [0, 87] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s1 -> s6 [0, 65535] { R7600 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R7600 += 1, R7554 += 1 };
  s1 -> s1 [0, 65535] { R7600 += 1, R7554 += 1, R7522 += 1 };
  s1 -> s1 [89, 65535] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s2 -> s1 [0, 87] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s2 -> s2 [0, 65535] { R7600 += 1, R7554 += 1, R7521 += 1, R7522 += 1 };
  s2 -> s3 [0, 65535] { R7600 += 1, R7554 += 1, R7522 += 1, R7501 += 1, R7502 += 1 };
  s2 -> s6 [0, 65535] { R7600 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [89, 65535] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s3 -> s1 [0, 87] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s3 -> s3 [0, 65535] { R7600 += 1, R7554 += 1, R7522 += 1, R7501 += 1, R7502 += 1 };
  s3 -> s6 [0, 65535] { R7600 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R7600 += 1, R7554 += 1 };
  s3 -> s1 [89, 65535] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s4 -> s1 [0, 87] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s4 -> s2 [0, 65535] { R7600 += 1, R7554 += 1, R7521 += 1, R7522 += 1 };
  s4 -> s3 [0, 65535] { R7600 += 1, R7554 += 1, R7522 += 1, R7501 += 1, R7502 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7600 += 1, R7553 += 1, R7554 += 1 };
  s4 -> s1 [89, 65535] { R7600 += 1, R7554 += 1, R7522 += 1, R7502 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7600 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7600 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7600 += 1, R7554 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R7601 += 1, R7602 += 1 };
  s0 -> s1 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1, R7504 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R7602 += 1, R7556 += 1, R7523 += 1, R7524 += 1 };
  s0 -> s3 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1, R7503 += 1, R7504 += 1 };
  s0 -> s4 [0, 65535] { R7602 += 1, R7555 += 1, R7556 += 1 };
  s1 -> s6 [0, 65535] { R7602 += 1, R7556 += 1 };
  s1 -> s1 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1, R7504 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1 };
  s1 -> s7 [0, 65535] { R7602 += 1 };
  s2 -> s1 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1, R7504 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R7602 += 1, R7556 += 1, R7523 += 1, R7524 += 1 };
  s2 -> s3 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1, R7503 += 1, R7504 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R7602 += 1 };
  s3 -> s6 [0, 65535] { R7602 += 1, R7556 += 1 };
  s3 -> s1 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1, R7504 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1, R7503 += 1, R7504 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R7602 += 1 };
  s4 -> s1 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1, R7504 += 1, R5988 += 1 };
  s4 -> s2 [0, 65535] { R7602 += 1, R7556 += 1, R7523 += 1, R7524 += 1 };
  s4 -> s3 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1, R7503 += 1, R7504 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7602 += 1, R7555 += 1, R7556 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7602 += 1, R7556 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s7 [0, 65535] { R7602 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7602 += 1 };
  s8 -> s6 [0, 65535] { R7602 += 1, R7556 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R7602 += 1, R7556 += 1, R7524 += 1 };
  s8 -> s7 [0, 65535] { R7602 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R7603 += 1, R7604 += 1 };
  s0 -> s1 [0, 65535] { R7604 += 1, R7558 += 1, R7525 += 1, R7526 += 1 };
  s0 -> s2 [0, 65535] { R7604 += 1, R7557 += 1, R7558 += 1 };
  s0 -> s3 [0, 65535] { R7604 += 1, R7558 += 1, R7526 += 1, R7505 += 1, R7506 += 1 };
  s0 -> s4 [104, 104] { R7604 += 1, R7558 += 1, R7526 += 1, R7506 += 1 };
  s1 -> s1 [0, 65535] { R7604 += 1, R7558 += 1, R7525 += 1, R7526 += 1 };
  s1 -> s3 [0, 65535] { R7604 += 1, R7558 += 1, R7526 += 1, R7505 += 1, R7506 += 1 };
  s1 -> s4 [104, 104] { R7604 += 1, R7558 += 1, R7526 += 1, R7506 += 1 };
  s2 -> s1 [0, 65535] { R7604 += 1, R7558 += 1, R7525 += 1, R7526 += 1 };
  s2 -> s2 [0, 65535] { R7604 += 1, R7557 += 1, R7558 += 1 };
  s2 -> s3 [0, 65535] { R7604 += 1, R7558 += 1, R7526 += 1, R7505 += 1, R7506 += 1 };
  s2 -> s4 [104, 104] { R7604 += 1, R7558 += 1, R7526 += 1, R7506 += 1 };
  s3 -> s3 [0, 65535] { R7604 += 1, R7558 += 1, R7526 += 1, R7505 += 1, R7506 += 1 };
  s3 -> s4 [104, 104] { R7604 += 1, R7558 += 1, R7526 += 1, R7506 += 1 };
  s4 -> s5 [111, 111] { R7604 += 1, R7558 += 1, R7526 += 1, R7506 += 1 };
  s5 -> s6 [115, 115] { R7604 += 1, R7558 += 1, R7526 += 1, R7506 += 1 };
  s6 -> s7 [116, 116] { R7604 += 1, R7558 += 1, R7526 += 1, R7506 += 1 };
  s7 -> s7 [0, 65535] { R7604 += 1, R7558 += 1, R7526 += 1 };
  s7 -> s8 [0, 65535] { R7604 += 1 };
  s7 -> s9 [0, 65535] { R7604 += 1, R7558 += 1 };
  s7 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R7604 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s8 [0, 65535] { R7604 += 1 };
  s9 -> s9 [0, 65535] { R7604 += 1, R7558 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s7, s8, s9, s10;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7606 += 1, R7559 += 1, R7560 += 1 };
  s0 -> s2 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1, R7511 += 1, R7512 += 1 };
  s0 -> s3 [0, 65535] { R7606 += 1, R7560 += 1, R7527 += 1, R7528 += 1 };
  s0 -> s0 [0, 65535] { R7605 += 1, R7606 += 1 };
  s0 -> s4 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1, R7512 += 1, R5989 += 1 };
  s1 -> s1 [0, 65535] { R7606 += 1, R7559 += 1, R7560 += 1 };
  s1 -> s2 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1, R7511 += 1, R7512 += 1 };
  s1 -> s3 [0, 65535] { R7606 += 1, R7560 += 1, R7527 += 1, R7528 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1, R7512 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1, R7511 += 1, R7512 += 1 };
  s2 -> s7 [0, 65535] { R7606 += 1 };
  s2 -> s8 [0, 65535] { R7606 += 1, R7560 += 1 };
  s2 -> s4 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1, R7512 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1, R7511 += 1, R7512 += 1 };
  s3 -> s3 [0, 65535] { R7606 += 1, R7560 += 1, R7527 += 1, R7528 += 1 };
  s3 -> s7 [0, 65535] { R7606 += 1 };
  s3 -> s4 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1, R7512 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1 };
  s4 -> s7 [0, 65535] { R7606 += 1 };
  s4 -> s8 [0, 65535] { R7606 += 1, R7560 += 1 };
  s4 -> s4 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1, R7512 += 1, R5989 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7606 += 1, R7560 += 1, R7528 += 1 };
  s6 -> s7 [0, 65535] { R7606 += 1 };
  s6 -> s8 [0, 65535] { R7606 += 1, R7560 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7606 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R7606 += 1 };
  s8 -> s8 [0, 65535] { R7606 += 1, R7560 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R7608 += 1, R7562 += 1, R7530 += 1, R7513 += 1, R7514 += 1 };
  s0 -> s0 [0, 65535] { R7607 += 1, R7608 += 1 };
  s0 -> s2 [0, 65535] { R7608 += 1, R7561 += 1, R7562 += 1 };
  s0 -> s3 [0, 65535] { R7608 += 1, R7562 += 1, R7529 += 1, R7530 += 1 };
  s0 -> s4 [111, 111] { R7608 += 1, R7562 += 1, R7530 += 1, R7514 += 1 };
  s1 -> s1 [0, 65535] { R7608 += 1, R7562 += 1, R7530 += 1, R7513 += 1, R7514 += 1 };
  s1 -> s4 [111, 111] { R7608 += 1, R7562 += 1, R7530 += 1, R7514 += 1 };
  s2 -> s1 [0, 65535] { R7608 += 1, R7562 += 1, R7530 += 1, R7513 += 1, R7514 += 1 };
  s2 -> s2 [0, 65535] { R7608 += 1, R7561 += 1, R7562 += 1 };
  s2 -> s3 [0, 65535] { R7608 += 1, R7562 += 1, R7529 += 1, R7530 += 1 };
  s2 -> s4 [111, 111] { R7608 += 1, R7562 += 1, R7530 += 1, R7514 += 1 };
  s3 -> s1 [0, 65535] { R7608 += 1, R7562 += 1, R7530 += 1, R7513 += 1, R7514 += 1 };
  s3 -> s3 [0, 65535] { R7608 += 1, R7562 += 1, R7529 += 1, R7530 += 1 };
  s3 -> s4 [111, 111] { R7608 += 1, R7562 += 1, R7530 += 1, R7514 += 1 };
  s4 -> s5 [99, 99] { R7608 += 1, R7562 += 1, R7530 += 1, R7514 += 1 };
  s5 -> s6 [97, 97] { R7608 += 1, R7562 += 1, R7530 += 1, R7514 += 1 };
  s6 -> s7 [108, 108] { R7608 += 1, R7562 += 1, R7530 += 1, R7514 += 1 };
  s7 -> s8 [0, 65535] { R7608 += 1, R7562 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R7608 += 1, R7562 += 1, R7530 += 1 };
  s7 -> s10 [0, 65535] { R7608 += 1 };
  s8 -> s8 [0, 65535] { R7608 += 1, R7562 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R7608 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7608 += 1 };
  accepting s7, s8, s9, s10;
};
};
constraint R1 = R7506 && R2 = R7530 && R3 = R7070 && R4 = R7608 && R15 = 0 && R16 = R7562 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R7063 - R7562 = 1 && R7064 = R7070 && R7065 - R7562 = 1 && R7066 = R7070 && R7067 - R7562 = 1 && R7068 = R7070 && R7069 - R7562 = 1 && R7505 = 0 && R7509 = 0 && R7510 = 0 && R7513 = 0 && R7514 = 0 && R7515 = 0 && R7516 = R7530 && R7517 = 0 && R7518 = R7530 && R7519 = 0 && R7520 = R7530 && R7521 = 0 && R7522 = R7530 && R7523 = 0 && R7524 = R7530 && R7525 = 0 && R7526 = R7530 && R7527 = 0 && R7528 = R7530 && R7529 = 0 && R7531 = 0 && R7532 = R7562 && R7533 = 0 && R7534 = R7562 && R7535 = 0 && R7536 = R7562 && R7537 = 0 && R7538 = R7562 && R7539 = 0 && R7540 = R7562 && R7541 = 0 && R7542 = R7562 && R7543 = 0 && R7544 = R7562 && R7545 = 0 && R7546 = R7562 && R7547 = 0 && R7548 = R7562 && R7549 = 0 && R7550 = R7562 && R7551 = 0 && R7552 = R7562 && R7553 = 0 && R7554 = R7562 && R7555 = 0 && R7556 = R7562 && R7557 = 0 && R7558 = R7562 && R7559 = 0 && R7560 = R7562 && R7561 = 0 && R7563 = 10 && R7564 = R7608 && R7565 = 10 && R7566 = R7608 && R7567 = 10 && R7568 = R7608 && R7569 = 10 && R7570 = R7608 && R7571 = 10 && R7572 = R7608 && R7573 = 10 && R7574 = R7608 && R7575 = 10 && R7576 = R7608 && R7577 = 10 && R7578 = R7608 && R7579 = 10 && R7580 = R7608 && R7581 = 10 && R7582 = R7608 && R7583 = 10 && R7584 = R7608 && R7585 = 10 && R7586 = R7608 && R7587 = 10 && R7588 = R7608 && R7589 = 10 && R7590 = R7608 && R7591 = 10 && R7592 = R7608 && R7593 = 10 && R7594 = R7608 && R7595 = 10 && R7596 = R7608 && R7597 = 10 && R7598 = R7608 && R7599 = 10 && R7600 = R7608 && R7601 = 10 && R7602 = R7608 && R7603 = 10 && R7604 = R7608 && R7605 = 10 && R7606 = R7608 && R7607 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R7562 < R7070 && -1 < R7506 && 0 < R7530 && -1 < R7562 && 9 < R7608 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R7501 != 0 || R7502 = R7506 || (R5988 = 0 && R7506 = 0)) && (R7503 != 0 || R7504 = R7506 || (R5988 = 0 && R7506 = 0)) && (R5989 = 0 || (R7511 = 0 && R7512 = 0)) && (R5990 = 0 || (R7507 = 0 && R7508 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R7501 = 0 || (R5988 = 0 && R7506 = 0)) && (R7503 = 0 || (R5988 = 0 && R7506 = 0));
// End of Parikh automata intersection problem
