// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R11627, R11628, R11629, R11630, R11631, R11632, R11633, R11634, R11741, R11742, R11743, R11744, R11745, R11746, R11747, R11748, R11749, R11750, R11751, R11752, R11753, R11754, R11755, R11756, R11757, R11758, R11759, R11760, R11761, R11762, R11763, R11764, R11765, R11766, R11767, R11768, R11769, R11770, R11771, R11772, R11773, R11774, R11775, R11776, R11777, R11778, R11779, R11780, R11781, R11782, R11783, R11784, R11785, R11786, R11787, R11788, R11789, R11790, R11791, R11792, R11793, R11794, R11795, R11796, R11797, R11798, R11799, R11800, R11801, R11802, R11803, R11804, R11805, R11806, R11807, R11808, R11809, R11810, R11811, R11812, R11813, R11814, R11815, R11816, R11817, R11818, R11819, R11820, R11821, R11822, R11823, R11824, R11825, R11826, R11827, R11828, R11829, R11830, R11831, R11832, R11833, R11834, R11835, R11836, R11837, R11838, R11839, R11840, R11841, R11842, R11843, R11844, R11845, R11846, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R11802 += 1 };
  s0 -> s0 [0, 65535] { R11801 += 1, R11802 += 1 };
  s0 -> s2 [46, 46] { R11802 += 1 };
  s0 -> s3 [47, 47] { R11802 += 1 };
  s0 -> s1 [48, 65535] { R11802 += 1 };
  s1 -> s1 [0, 45] { R11802 += 1 };
  s1 -> s2 [46, 46] { R11802 += 1 };
  s1 -> s3 [47, 47] { R11802 += 1 };
  s1 -> s1 [48, 65535] { R11802 += 1 };
  s2 -> s1 [0, 45] { R11802 += 1 };
  s2 -> s2 [46, 46] { R11802 += 1 };
  s2 -> s3 [47, 47] { R11802 += 1 };
  s2 -> s1 [48, 114] { R11802 += 1 };
  s2 -> s8 [115, 115] { R11802 += 1 };
  s2 -> s1 [116, 65535] { R11802 += 1 };
  s3 -> s3 [0, 45] { R11802 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R11802 += 1 };
  s3 -> s3 [47, 65535] { R11802 += 1 };
  s4 -> s3 [0, 45] { R11802 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R11802 += 1 };
  s4 -> s3 [47, 114] { R11802 += 1 };
  s4 -> s5 [115, 115] { R11802 += 1 };
  s4 -> s3 [116, 65535] { R11802 += 1 };
  s5 -> s3 [0, 45] { R11802 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R11802 += 1 };
  s5 -> s3 [47, 110] { R11802 += 1 };
  s5 -> s6 [111, 111] { R11802 += 1 };
  s5 -> s3 [112, 65535] { R11802 += 1 };
  s6 -> s3 [0, 45] { R11802 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R11802 += 1 };
  s6 -> s3 [47, 98] { R11802 += 1 };
  s6 -> s7 [99, 99] { R11802 += 1 };
  s6 -> s3 [100, 65535] { R11802 += 1 };
  s7 -> s3 [0, 45] { R11802 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R11802 += 1 };
  s7 -> s3 [47, 106] { R11802 += 1 };
  s7 -> s3 [108, 65535] { R11802 += 1 };
  s8 -> s1 [0, 45] { R11802 += 1 };
  s8 -> s2 [46, 46] { R11802 += 1 };
  s8 -> s3 [47, 47] { R11802 += 1 };
  s8 -> s1 [48, 110] { R11802 += 1 };
  s8 -> s9 [111, 111] { R11802 += 1 };
  s8 -> s1 [112, 65535] { R11802 += 1 };
  s9 -> s1 [0, 45] { R11802 += 1 };
  s9 -> s2 [46, 46] { R11802 += 1 };
  s9 -> s3 [47, 47] { R11802 += 1 };
  s9 -> s1 [48, 98] { R11802 += 1 };
  s9 -> s10 [99, 99] { R11802 += 1 };
  s9 -> s1 [100, 65535] { R11802 += 1 };
  s10 -> s1 [0, 45] { R11802 += 1 };
  s10 -> s2 [46, 46] { R11802 += 1 };
  s10 -> s3 [47, 47] { R11802 += 1 };
  s10 -> s1 [48, 106] { R11802 += 1 };
  s10 -> s1 [108, 65535] { R11802 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R11804 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R11803 += 1, R11804 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11804 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R11806 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R11805 += 1, R11806 += 1 };
  s0 -> s2 [0, 65535] { R11806 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R11806 += 1 };
  s0 -> s1 [48, 65535] { R11806 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R11806 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R11806 += 1 };
  s1 -> s1 [48, 65535] { R11806 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R11806 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R11806 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R11806 += 1 };
  s2 -> s1 [48, 65535] { R11806 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11806 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R11808 += 1, R11628 += 1 };
  s0 -> s2 [0, 65535] { R11808 += 1, R11627 += 1, R11628 += 1 };
  s0 -> s0 [0, 65535] { R11807 += 1, R11808 += 1 };
  s0 -> s1 [38, 42] { R11808 += 1, R11628 += 1 };
  s0 -> s1 [44, 45] { R11808 += 1, R11628 += 1 };
  s0 -> s1 [47, 62] { R11808 += 1, R11628 += 1 };
  s0 -> s1 [64, 65535] { R11808 += 1, R11628 += 1 };
  s1 -> s1 [0, 36] { R11808 += 1, R11628 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11808 += 1 };
  s1 -> s1 [38, 42] { R11808 += 1, R11628 += 1 };
  s1 -> s1 [44, 45] { R11808 += 1, R11628 += 1 };
  s1 -> s1 [47, 62] { R11808 += 1, R11628 += 1 };
  s1 -> s1 [64, 65535] { R11808 += 1, R11628 += 1 };
  s2 -> s1 [0, 36] { R11808 += 1, R11628 += 1 };
  s2 -> s2 [0, 65535] { R11808 += 1, R11627 += 1, R11628 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R11808 += 1, R11628 += 1 };
  s2 -> s1 [44, 45] { R11808 += 1, R11628 += 1 };
  s2 -> s1 [47, 62] { R11808 += 1, R11628 += 1 };
  s2 -> s1 [64, 65535] { R11808 += 1, R11628 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R11810 += 1, R11629 += 1, R11630 += 1 };
  s0 -> s2 [0, 65535] { R11810 += 1, R11630 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R11809 += 1, R11810 += 1 };
  s1 -> s1 [0, 65535] { R11810 += 1, R11629 += 1, R11630 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R11810 += 1, R11630 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11810 += 1, R11630 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R11810 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11810 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R11812 += 1, R11631 += 1, R11632 += 1 };
  s0 -> s0 [0, 65535] { R11811 += 1, R11812 += 1 };
  s0 -> s3 [0, 65535] { R11812 += 1, R11632 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535] { R11812 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R11812 += 1, R11632 += 1 };
  s2 -> s1 [0, 62] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R11812 += 1, R11631 += 1, R11632 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R11812 += 1, R11632 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R11812 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11812 += 1, R11632 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R11812 += 1, R11632 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R11812 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R11812 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11812 += 1, R11632 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11814 += 1, R11634 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R11814 += 1, R11633 += 1, R11634 += 1 };
  s0 -> s0 [0, 65535] { R11813 += 1, R11814 += 1 };
  s0 -> s3 [0, 65535] { R11814 += 1, R11634 += 1, R5994 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R11814 += 1, R11634 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R11814 += 1, R11634 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R11814 += 1 };
  s2 -> s1 [0, 65535] { R11814 += 1, R11634 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s2 [0, 65535] { R11814 += 1, R11633 += 1, R11634 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11814 += 1, R11634 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11814 += 1, R11634 += 1 };
  s3 -> s3 [0, 65535] { R11814 += 1, R11634 += 1, R5994 += 1, R5 += 1 };
  s3 -> s6 [0, 65535] { R11814 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11814 += 1, R11634 += 1 };
  s5 -> s6 [0, 65535] { R11814 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11814 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R11816 += 1, R11770 += 1 };
  s0 -> s2 [0, 65535] { R11816 += 1, R11769 += 1, R11770 += 1 };
  s0 -> s0 [0, 65535] { R11815 += 1, R11816 += 1 };
  s0 -> s1 [45, 63] { R11816 += 1, R11770 += 1 };
  s0 -> s3 [88, 88] { R11816 += 1, R11770 += 1 };
  s0 -> s1 [89, 65535] { R11816 += 1, R11770 += 1 };
  s1 -> s1 [0, 43] { R11816 += 1, R11770 += 1 };
  s1 -> s1 [45, 63] { R11816 += 1, R11770 += 1 };
  s1 -> s3 [88, 88] { R11816 += 1, R11770 += 1 };
  s1 -> s1 [89, 65535] { R11816 += 1, R11770 += 1 };
  s2 -> s1 [0, 43] { R11816 += 1, R11770 += 1 };
  s2 -> s2 [0, 65535] { R11816 += 1, R11769 += 1, R11770 += 1 };
  s2 -> s1 [45, 63] { R11816 += 1, R11770 += 1 };
  s2 -> s3 [88, 88] { R11816 += 1, R11770 += 1 };
  s2 -> s1 [89, 65535] { R11816 += 1, R11770 += 1 };
  s3 -> s3 [0, 43] { R11816 += 1, R11770 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11816 += 1 };
  s3 -> s3 [45, 63] { R11816 += 1, R11770 += 1 };
  s3 -> s3 [88, 65535] { R11816 += 1, R11770 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R11818 += 1, R11772 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R11817 += 1, R11818 += 1 };
  s0 -> s2 [0, 65535] { R11818 += 1, R11771 += 1, R11772 += 1 };
  s1 -> s4 [0, 65535] { R11818 += 1 };
  s1 -> s1 [0, 65535] { R11818 += 1, R11772 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11818 += 1, R11772 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11818 += 1, R11771 += 1, R11772 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11818 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R11820 += 1, R11774 += 1 };
  s0 -> s2 [0, 65535] { R11820 += 1, R11773 += 1, R11774 += 1 };
  s0 -> s3 [0, 65535] { R11820 += 1, R11774 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R11819 += 1, R11820 += 1 };
  s0 -> s4 [58, 58] { R11820 += 1, R11774 += 1 };
  s0 -> s1 [59, 65535] { R11820 += 1, R11774 += 1 };
  s1 -> s1 [0, 57] { R11820 += 1, R11774 += 1 };
  s1 -> s1 [0, 65535] { R11820 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [58, 58] { R11820 += 1, R11774 += 1 };
  s1 -> s1 [59, 65535] { R11820 += 1, R11774 += 1 };
  s2 -> s1 [0, 57] { R11820 += 1, R11774 += 1 };
  s2 -> s2 [0, 65535] { R11820 += 1, R11773 += 1, R11774 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R11820 += 1, R11774 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R11820 += 1, R11774 += 1 };
  s2 -> s1 [59, 65535] { R11820 += 1, R11774 += 1 };
  s3 -> s1 [0, 57] { R11820 += 1, R11774 += 1 };
  s3 -> s5 [0, 65535] { R11820 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11820 += 1, R11774 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R11820 += 1, R11774 += 1 };
  s3 -> s1 [59, 65535] { R11820 += 1, R11774 += 1 };
  s4 -> s4 [0, 65535] { R11820 += 1, R11774 += 1 };
  s5 -> s5 [0, 65535] { R11820 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R11822 += 1, R11776 += 1 };
  s0 -> s2 [0, 65535] { R11822 += 1, R11776 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R11822 += 1, R11775 += 1, R11776 += 1 };
  s0 -> s0 [0, 65535] { R11821 += 1, R11822 += 1 };
  s0 -> s4 [88, 88] { R11822 += 1, R11776 += 1 };
  s0 -> s1 [89, 65535] { R11822 += 1, R11776 += 1 };
  s1 -> s1 [0, 87] { R11822 += 1, R11776 += 1 };
  s1 -> s1 [0, 65535] { R11822 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R11822 += 1, R11776 += 1 };
  s1 -> s1 [89, 65535] { R11822 += 1, R11776 += 1 };
  s2 -> s1 [0, 87] { R11822 += 1, R11776 += 1 };
  s2 -> s2 [0, 65535] { R11822 += 1, R11776 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11822 += 1 };
  s2 -> s4 [88, 88] { R11822 += 1, R11776 += 1 };
  s2 -> s1 [89, 65535] { R11822 += 1, R11776 += 1 };
  s3 -> s1 [0, 87] { R11822 += 1, R11776 += 1 };
  s3 -> s2 [0, 65535] { R11822 += 1, R11776 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11822 += 1, R11775 += 1, R11776 += 1 };
  s3 -> s4 [88, 88] { R11822 += 1, R11776 += 1 };
  s3 -> s1 [89, 65535] { R11822 += 1, R11776 += 1 };
  s4 -> s4 [0, 65535] { R11822 += 1, R11776 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11822 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R11824 += 1, R11778 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R11823 += 1, R11824 += 1 };
  s0 -> s3 [0, 65535] { R11824 += 1, R11777 += 1, R11778 += 1 };
  s0 -> s4 [91, 91] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R11824 += 1 };
  s1 -> s7 [0, 65535] { R11824 += 1, R11778 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R11824 += 1, R11778 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R11824 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R11824 += 1, R11778 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11824 += 1, R11777 += 1, R11778 += 1 };
  s3 -> s4 [91, 91] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R11824 += 1, R11778 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11824 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11824 += 1 };
  s7 -> s7 [0, 65535] { R11824 += 1, R11778 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R11826 += 1, R11780 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R11826 += 1, R11780 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R11826 += 1, R11779 += 1, R11780 += 1 };
  s0 -> s0 [0, 65535] { R11825 += 1, R11826 += 1 };
  s1 -> s5 [0, 65535] { R11826 += 1 };
  s1 -> s1 [0, 65535] { R11826 += 1, R11780 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R11826 += 1, R11780 += 1 };
  s2 -> s5 [0, 65535] { R11826 += 1 };
  s2 -> s1 [0, 65535] { R11826 += 1, R11780 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R11826 += 1, R11780 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11826 += 1, R11780 += 1, R5998 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R11826 += 1, R11780 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11826 += 1, R11779 += 1, R11780 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11826 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11826 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11826 += 1, R11780 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R11827 += 1, R11828 += 1 };
  s0 -> s1 [0, 65535] { R11828 += 1, R11781 += 1, R11782 += 1 };
  s0 -> s2 [0, 65535] { R11828 += 1, R11782 += 1, R11747 += 1, R11748 += 1 };
  s0 -> s3 [0, 65535] { R11828 += 1, R11782 += 1, R11748 += 1, R5990 += 1 };
  s1 -> s1 [0, 65535] { R11828 += 1, R11781 += 1, R11782 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R11828 += 1, R11782 += 1, R11747 += 1, R11748 += 1 };
  s1 -> s3 [0, 65535] { R11828 += 1, R11782 += 1, R11748 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535] { R11828 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11828 += 1, R11782 += 1, R11747 += 1, R11748 += 1 };
  s2 -> s3 [0, 65535] { R11828 += 1, R11782 += 1, R11748 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R11828 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11828 += 1, R11782 += 1 };
  s3 -> s3 [0, 65535] { R11828 += 1, R11782 += 1, R11748 += 1, R5990 += 1 };
  s4 -> s4 [0, 65535] { R11828 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11828 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11828 += 1, R11782 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R11830 += 1, R11783 += 1, R11784 += 1 };
  s0 -> s2 [0, 65535] { R11830 += 1, R11784 += 1, R11749 += 1, R11750 += 1 };
  s0 -> s0 [0, 65535] { R11829 += 1, R11830 += 1 };
  s0 -> s3 [108, 108] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s1 -> s1 [0, 65535] { R11830 += 1, R11783 += 1, R11784 += 1 };
  s1 -> s2 [0, 65535] { R11830 += 1, R11784 += 1, R11749 += 1, R11750 += 1 };
  s1 -> s3 [108, 108] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s2 -> s2 [0, 65535] { R11830 += 1, R11784 += 1, R11749 += 1, R11750 += 1 };
  s2 -> s3 [108, 108] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s3 -> s4 [111, 111] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s4 -> s5 [99, 99] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s5 -> s6 [97, 97] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s6 -> s7 [108, 108] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s7 -> s8 [104, 104] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s8 -> s9 [111, 111] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s9 -> s10 [115, 115] { R11830 += 1, R11784 += 1, R11750 += 1 };
  s10 -> s10 [0, 65535] { R11830 += 1, R11784 += 1 };
  s10 -> s11 [0, 65535] { R11830 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R11830 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s10, s11, s12;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s0 -> s2 [0, 65535] { R11832 += 1, R11785 += 1, R11786 += 1 };
  s0 -> s3 [0, 65535] { R11832 += 1, R11786 += 1, R11753 += 1, R11754 += 1 };
  s0 -> s0 [0, 65535] { R11831 += 1, R11832 += 1 };
  s0 -> s4 [88, 88] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s0 -> s1 [89, 65535] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s1 -> s1 [0, 87] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s1 -> s4 [88, 88] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s1 -> s1 [89, 65535] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s2 -> s1 [0, 87] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s2 -> s2 [0, 65535] { R11832 += 1, R11785 += 1, R11786 += 1 };
  s2 -> s3 [0, 65535] { R11832 += 1, R11786 += 1, R11753 += 1, R11754 += 1 };
  s2 -> s4 [88, 88] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s2 -> s1 [89, 65535] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s3 -> s1 [0, 87] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s3 -> s3 [0, 65535] { R11832 += 1, R11786 += 1, R11753 += 1, R11754 += 1 };
  s3 -> s4 [88, 88] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s3 -> s1 [89, 65535] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11832 += 1, R11786 += 1, R11754 += 1 };
  s4 -> s6 [0, 65535] { R11832 += 1 };
  s4 -> s7 [0, 65535] { R11832 += 1, R11786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11832 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11832 += 1 };
  s7 -> s7 [0, 65535] { R11832 += 1, R11786 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R11833 += 1, R11834 += 1 };
  s0 -> s1 [0, 65535] { R11834 += 1, R11787 += 1, R11788 += 1 };
  s0 -> s2 [0, 65535] { R11834 += 1, R11788 += 1, R11756 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R11834 += 1, R11788 += 1, R11755 += 1, R11756 += 1 };
  s1 -> s1 [0, 65535] { R11834 += 1, R11787 += 1, R11788 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R11834 += 1, R11788 += 1, R11756 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R11834 += 1, R11788 += 1, R11755 += 1, R11756 += 1 };
  s2 -> s4 [0, 65535] { R11834 += 1 };
  s2 -> s6 [0, 65535] { R11834 += 1, R11788 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11834 += 1, R11788 += 1, R11756 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R11834 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R11834 += 1, R11788 += 1, R11756 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R11834 += 1, R11788 += 1, R11755 += 1, R11756 += 1 };
  s4 -> s4 [0, 65535] { R11834 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11834 += 1 };
  s6 -> s6 [0, 65535] { R11834 += 1, R11788 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s0 -> s2 [0, 65535] { R11836 += 1, R11789 += 1, R11790 += 1 };
  s0 -> s3 [0, 65535] { R11836 += 1, R11790 += 1, R11757 += 1, R11758 += 1 };
  s0 -> s0 [0, 65535] { R11835 += 1, R11836 += 1 };
  s0 -> s4 [0, 65535] { R11836 += 1, R11790 += 1, R11758 += 1, R7 += 1 };
  s0 -> s5 [88, 88] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s0 -> s1 [89, 65535] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s1 -> s1 [0, 87] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s1 -> s1 [0, 65535] { R11836 += 1, R11790 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R11836 += 1 };
  s1 -> s5 [88, 88] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s1 -> s1 [89, 65535] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s2 -> s1 [0, 87] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s2 -> s2 [0, 65535] { R11836 += 1, R11789 += 1, R11790 += 1 };
  s2 -> s3 [0, 65535] { R11836 += 1, R11790 += 1, R11757 += 1, R11758 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R11836 += 1, R11790 += 1, R11758 += 1, R7 += 1 };
  s2 -> s5 [88, 88] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s2 -> s1 [89, 65535] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s3 -> s1 [0, 87] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s3 -> s3 [0, 65535] { R11836 += 1, R11790 += 1, R11757 += 1, R11758 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R11836 += 1, R11790 += 1, R11758 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R11836 += 1 };
  s3 -> s5 [88, 88] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s3 -> s1 [89, 65535] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s4 -> s1 [0, 87] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s4 -> s6 [0, 65535] { R11836 += 1, R11790 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R11836 += 1, R11790 += 1, R11758 += 1, R7 += 1 };
  s4 -> s8 [0, 65535] { R11836 += 1 };
  s4 -> s5 [88, 88] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s4 -> s1 [89, 65535] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s5 -> s5 [0, 65535] { R11836 += 1, R11790 += 1, R11758 += 1 };
  s6 -> s6 [0, 65535] { R11836 += 1, R11790 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R11836 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R11836 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s0 -> s2 [0, 65535] { R11838 += 1, R11792 += 1, R11759 += 1, R11760 += 1 };
  s0 -> s0 [0, 65535] { R11837 += 1, R11838 += 1 };
  s0 -> s3 [0, 65535] { R11838 += 1, R11792 += 1, R11760 += 1, R11741 += 1, R11742 += 1 };
  s0 -> s4 [0, 65535] { R11838 += 1, R11791 += 1, R11792 += 1 };
  s0 -> s1 [89, 65535] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s1 -> s1 [0, 87] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11838 += 1, R11792 += 1, R11760 += 1 };
  s1 -> s6 [0, 65535] { R11838 += 1, R11792 += 1 };
  s1 -> s7 [0, 65535] { R11838 += 1 };
  s1 -> s1 [89, 65535] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s2 -> s1 [0, 87] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11838 += 1, R11792 += 1, R11759 += 1, R11760 += 1 };
  s2 -> s3 [0, 65535] { R11838 += 1, R11792 += 1, R11760 += 1, R11741 += 1, R11742 += 1 };
  s2 -> s7 [0, 65535] { R11838 += 1 };
  s2 -> s1 [89, 65535] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s3 -> s1 [0, 87] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11838 += 1, R11792 += 1 };
  s3 -> s3 [0, 65535] { R11838 += 1, R11792 += 1, R11760 += 1, R11741 += 1, R11742 += 1 };
  s3 -> s7 [0, 65535] { R11838 += 1 };
  s3 -> s1 [89, 65535] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s4 -> s1 [0, 87] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R11838 += 1, R11792 += 1, R11759 += 1, R11760 += 1 };
  s4 -> s3 [0, 65535] { R11838 += 1, R11792 += 1, R11760 += 1, R11741 += 1, R11742 += 1 };
  s4 -> s4 [0, 65535] { R11838 += 1, R11791 += 1, R11792 += 1 };
  s4 -> s1 [89, 65535] { R11838 += 1, R11792 += 1, R11760 += 1, R11742 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11838 += 1, R11792 += 1 };
  s6 -> s7 [0, 65535] { R11838 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11838 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R11839 += 1, R11840 += 1 };
  s0 -> s1 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1, R11744 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1, R11743 += 1, R11744 += 1 };
  s0 -> s3 [0, 65535] { R11840 += 1, R11794 += 1, R11761 += 1, R11762 += 1 };
  s0 -> s4 [0, 65535] { R11840 += 1, R11793 += 1, R11794 += 1 };
  s1 -> s7 [0, 65535] { R11840 += 1, R11794 += 1 };
  s1 -> s8 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1 };
  s1 -> s1 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1, R11744 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11840 += 1 };
  s2 -> s7 [0, 65535] { R11840 += 1, R11794 += 1 };
  s2 -> s1 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1, R11744 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1, R11743 += 1, R11744 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11840 += 1 };
  s3 -> s1 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1, R11744 += 1, R5988 += 1 };
  s3 -> s2 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1, R11743 += 1, R11744 += 1 };
  s3 -> s3 [0, 65535] { R11840 += 1, R11794 += 1, R11761 += 1, R11762 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11840 += 1 };
  s4 -> s1 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1, R11744 += 1, R5988 += 1 };
  s4 -> s2 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1, R11743 += 1, R11744 += 1 };
  s4 -> s3 [0, 65535] { R11840 += 1, R11794 += 1, R11761 += 1, R11762 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11840 += 1, R11793 += 1, R11794 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11840 += 1 };
  s7 -> s7 [0, 65535] { R11840 += 1, R11794 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11840 += 1 };
  s8 -> s7 [0, 65535] { R11840 += 1, R11794 += 1 };
  s8 -> s8 [0, 65535] { R11840 += 1, R11794 += 1, R11762 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R11840 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R11842 += 1, R11796 += 1, R11764 += 1, R11745 += 1, R11746 += 1 };
  s0 -> s2 [0, 65535] { R11842 += 1, R11796 += 1, R11763 += 1, R11764 += 1 };
  s0 -> s3 [0, 65535] { R11842 += 1, R11795 += 1, R11796 += 1 };
  s0 -> s0 [0, 65535] { R11841 += 1, R11842 += 1 };
  s0 -> s4 [116, 116] { R11842 += 1, R11796 += 1, R11764 += 1, R11746 += 1 };
  s1 -> s1 [0, 65535] { R11842 += 1, R11796 += 1, R11764 += 1, R11745 += 1, R11746 += 1 };
  s1 -> s4 [116, 116] { R11842 += 1, R11796 += 1, R11764 += 1, R11746 += 1 };
  s2 -> s1 [0, 65535] { R11842 += 1, R11796 += 1, R11764 += 1, R11745 += 1, R11746 += 1 };
  s2 -> s2 [0, 65535] { R11842 += 1, R11796 += 1, R11763 += 1, R11764 += 1 };
  s2 -> s4 [116, 116] { R11842 += 1, R11796 += 1, R11764 += 1, R11746 += 1 };
  s3 -> s1 [0, 65535] { R11842 += 1, R11796 += 1, R11764 += 1, R11745 += 1, R11746 += 1 };
  s3 -> s2 [0, 65535] { R11842 += 1, R11796 += 1, R11763 += 1, R11764 += 1 };
  s3 -> s3 [0, 65535] { R11842 += 1, R11795 += 1, R11796 += 1 };
  s3 -> s4 [116, 116] { R11842 += 1, R11796 += 1, R11764 += 1, R11746 += 1 };
  s4 -> s4 [0, 65535] { R11842 += 1, R11796 += 1, R11764 += 1 };
  s4 -> s5 [0, 65535] { R11842 += 1 };
  s4 -> s6 [0, 65535] { R11842 += 1, R11796 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R11842 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R11842 += 1 };
  s6 -> s6 [0, 65535] { R11842 += 1, R11796 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11844 += 1, R11798 += 1, R11765 += 1, R11766 += 1 };
  s0 -> s2 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1, R11752 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R11843 += 1, R11844 += 1 };
  s0 -> s3 [0, 65535] { R11844 += 1, R11797 += 1, R11798 += 1 };
  s0 -> s4 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1, R11751 += 1, R11752 += 1 };
  s1 -> s1 [0, 65535] { R11844 += 1, R11798 += 1, R11765 += 1, R11766 += 1 };
  s1 -> s5 [0, 65535] { R11844 += 1 };
  s1 -> s2 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1, R11752 += 1, R5989 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1, R11751 += 1, R11752 += 1 };
  s2 -> s5 [0, 65535] { R11844 += 1 };
  s2 -> s2 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1, R11752 += 1, R5989 += 1 };
  s2 -> s6 [0, 65535] { R11844 += 1, R11798 += 1 };
  s2 -> s8 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s1 [0, 65535] { R11844 += 1, R11798 += 1, R11765 += 1, R11766 += 1 };
  s3 -> s2 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1, R11752 += 1, R5989 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R11844 += 1, R11797 += 1, R11798 += 1 };
  s3 -> s4 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1, R11751 += 1, R11752 += 1 };
  s4 -> s5 [0, 65535] { R11844 += 1 };
  s4 -> s2 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1, R11752 += 1, R5989 += 1 };
  s4 -> s6 [0, 65535] { R11844 += 1, R11798 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1, R11751 += 1, R11752 += 1 };
  s5 -> s5 [0, 65535] { R11844 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R11844 += 1 };
  s6 -> s6 [0, 65535] { R11844 += 1, R11798 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R11844 += 1 };
  s8 -> s6 [0, 65535] { R11844 += 1, R11798 += 1 };
  s8 -> s8 [0, 65535] { R11844 += 1, R11798 += 1, R11766 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R11846 += 1, R11799 += 1, R11800 += 1 };
  s0 -> s2 [0, 65535] { R11846 += 1, R11800 += 1, R11768 += 1 };
  s0 -> s0 [0, 65535] { R11845 += 1, R11846 += 1 };
  s0 -> s3 [0, 65535] { R11846 += 1, R11800 += 1, R11767 += 1, R11768 += 1 };
  s1 -> s1 [0, 65535] { R11846 += 1, R11799 += 1, R11800 += 1 };
  s1 -> s2 [0, 65535] { R11846 += 1, R11800 += 1, R11768 += 1 };
  s1 -> s3 [0, 65535] { R11846 += 1, R11800 += 1, R11767 += 1, R11768 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R11846 += 1 };
  s2 -> s2 [0, 65535] { R11846 += 1, R11800 += 1, R11768 += 1 };
  s2 -> s6 [0, 65535] { R11846 += 1, R11800 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R11846 += 1 };
  s3 -> s2 [0, 65535] { R11846 += 1, R11800 += 1, R11768 += 1 };
  s3 -> s3 [0, 65535] { R11846 += 1, R11800 += 1, R11767 += 1, R11768 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11846 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11846 += 1 };
  s6 -> s6 [0, 65535] { R11846 += 1, R11800 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R11746 && R2 = R11768 && R3 = R11634 && R4 = R11846 && R15 = 0 && R16 = R11800 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R11627 - R11800 = 1 && R11628 = R11634 && R11629 - R11800 = 1 && R11630 = R11634 && R11631 - R11800 = 1 && R11632 = R11634 && R11633 - R11800 = 1 && R11745 = 0 && R11749 = 0 && R11750 = 0 && R11753 = 0 && R11754 = R11768 && R11755 = 0 && R11756 = R11768 && R11757 = 0 && R11758 = R11768 && R11759 = 0 && R11760 = R11768 && R11761 = 0 && R11762 = R11768 && R11763 = 0 && R11764 = R11768 && R11765 = 0 && R11766 = R11768 && R11767 = 0 && R11769 = 0 && R11770 = R11800 && R11771 = 0 && R11772 = R11800 && R11773 = 0 && R11774 = R11800 && R11775 = 0 && R11776 = R11800 && R11777 = 0 && R11778 = R11800 && R11779 = 0 && R11780 = R11800 && R11781 = 0 && R11782 = R11800 && R11783 = 0 && R11784 = R11800 && R11785 = 0 && R11786 = R11800 && R11787 = 0 && R11788 = R11800 && R11789 = 0 && R11790 = R11800 && R11791 = 0 && R11792 = R11800 && R11793 = 0 && R11794 = R11800 && R11795 = 0 && R11796 = R11800 && R11797 = 0 && R11798 = R11800 && R11799 = 0 && R11801 = 10 && R11802 = R11846 && R11803 = 10 && R11804 = R11846 && R11805 = 10 && R11806 = R11846 && R11807 = 10 && R11808 = R11846 && R11809 = 10 && R11810 = R11846 && R11811 = 10 && R11812 = R11846 && R11813 = 10 && R11814 = R11846 && R11815 = 10 && R11816 = R11846 && R11817 = 10 && R11818 = R11846 && R11819 = 10 && R11820 = R11846 && R11821 = 10 && R11822 = R11846 && R11823 = 10 && R11824 = R11846 && R11825 = 10 && R11826 = R11846 && R11827 = 10 && R11828 = R11846 && R11829 = 10 && R11830 = R11846 && R11831 = 10 && R11832 = R11846 && R11833 = 10 && R11834 = R11846 && R11835 = 10 && R11836 = R11846 && R11837 = 10 && R11838 = R11846 && R11839 = 10 && R11840 = R11846 && R11841 = 10 && R11842 = R11846 && R11843 = 10 && R11844 = R11846 && R11845 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R11800 < R11634 && -1 < R11746 && 0 < R11768 && -1 < R11800 && 9 < R11846 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R11741 != 0 || R11742 = R11746 || (R5988 = 0 && R11746 = 0)) && (R11743 != 0 || R11744 = R11746 || (R5988 = 0 && R11746 = 0)) && (R5989 = 0 || (R11751 = 0 && R11752 = 0)) && (R5990 = 0 || (R11747 = 0 && R11748 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R11741 = 0 || (R5988 = 0 && R11746 = 0)) && (R11743 = 0 || (R5988 = 0 && R11746 = 0));
// End of Parikh automata intersection problem
