// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10327, R10328, R10329, R10330, R10331, R10332, R10333, R10334, R10335, R10336, R10337, R10338, R10339, R10340, R10341, R10342, R10343, R10344, R10345, R10346, R10347, R10348, R10349, R10350, R10351, R10352, R10353, R10354, R10355, R10356, R10357, R10358, R10359, R10360, R10361, R10362, R10363, R10364, R10365, R10366, R10367, R10368, R10369, R10370, R10371, R10372, R10373, R10374, R10375, R10376, R10377, R10378, R10379, R10380, R10381, R10382, R10383, R10384, R10385, R10386, R10387, R10388, R10389, R10390, R10391, R10392, R10393, R10394, R10395, R10396, R10397, R10398, R10399, R10400, R10401, R10402, R10403, R10404, R10405, R10406, R10407, R10408, R10409, R10410, R10411, R10412, R10413, R10414, R10415, R10416, R10417, R10418, R10419, R10420, R10421, R10422, R10423, R10424, R10425, R10426, R10427, R10428, R10429, R10430, R10431, R10432, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R10388 += 1 };
  s0 -> s0 [0, 65535] { R10387 += 1, R10388 += 1 };
  s0 -> s2 [46, 46] { R10388 += 1 };
  s0 -> s3 [47, 47] { R10388 += 1 };
  s0 -> s1 [48, 65535] { R10388 += 1 };
  s1 -> s1 [0, 45] { R10388 += 1 };
  s1 -> s2 [46, 46] { R10388 += 1 };
  s1 -> s3 [47, 47] { R10388 += 1 };
  s1 -> s1 [48, 65535] { R10388 += 1 };
  s2 -> s1 [0, 45] { R10388 += 1 };
  s2 -> s2 [46, 46] { R10388 += 1 };
  s2 -> s3 [47, 47] { R10388 += 1 };
  s2 -> s1 [48, 114] { R10388 += 1 };
  s2 -> s8 [115, 115] { R10388 += 1 };
  s2 -> s1 [116, 65535] { R10388 += 1 };
  s3 -> s3 [0, 45] { R10388 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R10388 += 1 };
  s3 -> s3 [47, 65535] { R10388 += 1 };
  s4 -> s3 [0, 45] { R10388 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R10388 += 1 };
  s4 -> s3 [47, 114] { R10388 += 1 };
  s4 -> s5 [115, 115] { R10388 += 1 };
  s4 -> s3 [116, 65535] { R10388 += 1 };
  s5 -> s3 [0, 45] { R10388 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R10388 += 1 };
  s5 -> s3 [47, 110] { R10388 += 1 };
  s5 -> s6 [111, 111] { R10388 += 1 };
  s5 -> s3 [112, 65535] { R10388 += 1 };
  s6 -> s3 [0, 45] { R10388 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R10388 += 1 };
  s6 -> s3 [47, 98] { R10388 += 1 };
  s6 -> s7 [99, 99] { R10388 += 1 };
  s6 -> s3 [100, 65535] { R10388 += 1 };
  s7 -> s3 [0, 45] { R10388 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R10388 += 1 };
  s7 -> s3 [47, 106] { R10388 += 1 };
  s7 -> s3 [108, 65535] { R10388 += 1 };
  s8 -> s1 [0, 45] { R10388 += 1 };
  s8 -> s2 [46, 46] { R10388 += 1 };
  s8 -> s3 [47, 47] { R10388 += 1 };
  s8 -> s1 [48, 110] { R10388 += 1 };
  s8 -> s9 [111, 111] { R10388 += 1 };
  s8 -> s1 [112, 65535] { R10388 += 1 };
  s9 -> s1 [0, 45] { R10388 += 1 };
  s9 -> s2 [46, 46] { R10388 += 1 };
  s9 -> s3 [47, 47] { R10388 += 1 };
  s9 -> s1 [48, 98] { R10388 += 1 };
  s9 -> s10 [99, 99] { R10388 += 1 };
  s9 -> s1 [100, 65535] { R10388 += 1 };
  s10 -> s1 [0, 45] { R10388 += 1 };
  s10 -> s2 [46, 46] { R10388 += 1 };
  s10 -> s3 [47, 47] { R10388 += 1 };
  s10 -> s1 [48, 106] { R10388 += 1 };
  s10 -> s1 [108, 65535] { R10388 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10389 += 1, R10390 += 1 };
  s0 -> s1 [0, 65535] { R10390 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10390 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R10392 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10391 += 1, R10392 += 1 };
  s0 -> s2 [0, 65535] { R10392 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R10392 += 1 };
  s0 -> s1 [48, 65535] { R10392 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R10392 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R10392 += 1 };
  s1 -> s1 [48, 65535] { R10392 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R10392 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R10392 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R10392 += 1 };
  s2 -> s1 [48, 65535] { R10392 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R10392 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R10394 += 1, R10320 += 1 };
  s0 -> s0 [0, 65535] { R10393 += 1, R10394 += 1 };
  s0 -> s2 [0, 65535] { R10394 += 1, R10319 += 1, R10320 += 1 };
  s0 -> s1 [38, 42] { R10394 += 1, R10320 += 1 };
  s0 -> s1 [44, 45] { R10394 += 1, R10320 += 1 };
  s0 -> s1 [47, 62] { R10394 += 1, R10320 += 1 };
  s0 -> s1 [64, 65535] { R10394 += 1, R10320 += 1 };
  s1 -> s1 [0, 36] { R10394 += 1, R10320 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10394 += 1 };
  s1 -> s1 [38, 42] { R10394 += 1, R10320 += 1 };
  s1 -> s1 [44, 45] { R10394 += 1, R10320 += 1 };
  s1 -> s1 [47, 62] { R10394 += 1, R10320 += 1 };
  s1 -> s1 [64, 65535] { R10394 += 1, R10320 += 1 };
  s2 -> s1 [0, 36] { R10394 += 1, R10320 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10394 += 1, R10319 += 1, R10320 += 1 };
  s2 -> s1 [38, 42] { R10394 += 1, R10320 += 1 };
  s2 -> s1 [44, 45] { R10394 += 1, R10320 += 1 };
  s2 -> s1 [47, 62] { R10394 += 1, R10320 += 1 };
  s2 -> s1 [64, 65535] { R10394 += 1, R10320 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R10396 += 1, R10322 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R10395 += 1, R10396 += 1 };
  s0 -> s2 [0, 65535] { R10396 += 1, R10321 += 1, R10322 += 1 };
  s1 -> s1 [0, 65535] { R10396 += 1, R10322 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10396 += 1 };
  s2 -> s1 [0, 65535] { R10396 += 1, R10322 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10396 += 1, R10321 += 1, R10322 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10396 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R10398 += 1, R10323 += 1, R10324 += 1 };
  s0 -> s3 [0, 65535] { R10398 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R10397 += 1, R10398 += 1 };
  s0 -> s4 [63, 63] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535] { R10398 += 1 };
  s1 -> s7 [0, 65535] { R10398 += 1, R10324 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R10398 += 1, R10323 += 1, R10324 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10398 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R10398 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10398 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R10398 += 1, R10324 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R10398 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10398 += 1 };
  s7 -> s7 [0, 65535] { R10398 += 1, R10324 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10400 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R10399 += 1, R10400 += 1 };
  s0 -> s2 [0, 65535] { R10400 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R10400 += 1, R10325 += 1, R10326 += 1 };
  s1 -> s5 [0, 65535] { R10400 += 1 };
  s1 -> s1 [0, 65535] { R10400 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R10400 += 1, R10326 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10400 += 1 };
  s2 -> s1 [0, 65535] { R10400 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R10400 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10400 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R10400 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10400 += 1, R10325 += 1, R10326 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10400 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10400 += 1 };
  s6 -> s6 [0, 65535] { R10400 += 1, R10326 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R10402 += 1, R10356 += 1 };
  s0 -> s0 [0, 65535] { R10401 += 1, R10402 += 1 };
  s0 -> s2 [0, 65535] { R10402 += 1, R10355 += 1, R10356 += 1 };
  s0 -> s1 [45, 63] { R10402 += 1, R10356 += 1 };
  s0 -> s3 [88, 88] { R10402 += 1, R10356 += 1 };
  s0 -> s1 [89, 65535] { R10402 += 1, R10356 += 1 };
  s1 -> s1 [0, 43] { R10402 += 1, R10356 += 1 };
  s1 -> s1 [45, 63] { R10402 += 1, R10356 += 1 };
  s1 -> s3 [88, 88] { R10402 += 1, R10356 += 1 };
  s1 -> s1 [89, 65535] { R10402 += 1, R10356 += 1 };
  s2 -> s1 [0, 43] { R10402 += 1, R10356 += 1 };
  s2 -> s2 [0, 65535] { R10402 += 1, R10355 += 1, R10356 += 1 };
  s2 -> s1 [45, 63] { R10402 += 1, R10356 += 1 };
  s2 -> s3 [88, 88] { R10402 += 1, R10356 += 1 };
  s2 -> s1 [89, 65535] { R10402 += 1, R10356 += 1 };
  s3 -> s3 [0, 43] { R10402 += 1, R10356 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10402 += 1 };
  s3 -> s3 [45, 63] { R10402 += 1, R10356 += 1 };
  s3 -> s3 [88, 65535] { R10402 += 1, R10356 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R10404 += 1, R10358 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R10404 += 1, R10357 += 1, R10358 += 1 };
  s0 -> s0 [0, 65535] { R10403 += 1, R10404 += 1 };
  s1 -> s4 [0, 65535] { R10404 += 1 };
  s1 -> s1 [0, 65535] { R10404 += 1, R10358 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10404 += 1, R10358 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R10404 += 1, R10357 += 1, R10358 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10404 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R10406 += 1, R10360 += 1 };
  s0 -> s2 [0, 65535] { R10406 += 1, R10360 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R10406 += 1, R10359 += 1, R10360 += 1 };
  s0 -> s0 [0, 65535] { R10405 += 1, R10406 += 1 };
  s0 -> s4 [58, 58] { R10406 += 1, R10360 += 1 };
  s0 -> s1 [59, 65535] { R10406 += 1, R10360 += 1 };
  s1 -> s1 [0, 57] { R10406 += 1, R10360 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10406 += 1 };
  s1 -> s4 [58, 58] { R10406 += 1, R10360 += 1 };
  s1 -> s1 [59, 65535] { R10406 += 1, R10360 += 1 };
  s2 -> s1 [0, 57] { R10406 += 1, R10360 += 1 };
  s2 -> s2 [0, 65535] { R10406 += 1, R10360 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10406 += 1 };
  s2 -> s4 [58, 58] { R10406 += 1, R10360 += 1 };
  s2 -> s1 [59, 65535] { R10406 += 1, R10360 += 1 };
  s3 -> s1 [0, 57] { R10406 += 1, R10360 += 1 };
  s3 -> s2 [0, 65535] { R10406 += 1, R10360 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10406 += 1, R10359 += 1, R10360 += 1 };
  s3 -> s4 [58, 58] { R10406 += 1, R10360 += 1 };
  s3 -> s1 [59, 65535] { R10406 += 1, R10360 += 1 };
  s4 -> s4 [0, 65535] { R10406 += 1, R10360 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10406 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R10408 += 1, R10362 += 1 };
  s0 -> s2 [0, 65535] { R10408 += 1, R10362 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R10407 += 1, R10408 += 1 };
  s0 -> s3 [0, 65535] { R10408 += 1, R10361 += 1, R10362 += 1 };
  s0 -> s4 [88, 88] { R10408 += 1, R10362 += 1 };
  s0 -> s1 [89, 65535] { R10408 += 1, R10362 += 1 };
  s1 -> s1 [0, 87] { R10408 += 1, R10362 += 1 };
  s1 -> s1 [0, 65535] { R10408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R10408 += 1, R10362 += 1 };
  s1 -> s1 [89, 65535] { R10408 += 1, R10362 += 1 };
  s2 -> s1 [0, 87] { R10408 += 1, R10362 += 1 };
  s2 -> s2 [0, 65535] { R10408 += 1, R10362 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R10408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R10408 += 1, R10362 += 1 };
  s2 -> s1 [89, 65535] { R10408 += 1, R10362 += 1 };
  s3 -> s1 [0, 87] { R10408 += 1, R10362 += 1 };
  s3 -> s2 [0, 65535] { R10408 += 1, R10362 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10408 += 1, R10361 += 1, R10362 += 1 };
  s3 -> s4 [88, 88] { R10408 += 1, R10362 += 1 };
  s3 -> s1 [89, 65535] { R10408 += 1, R10362 += 1 };
  s4 -> s4 [0, 65535] { R10408 += 1, R10362 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10408 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R10409 += 1, R10410 += 1 };
  s0 -> s2 [0, 65535] { R10410 += 1, R10364 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R10410 += 1, R10363 += 1, R10364 += 1 };
  s0 -> s4 [91, 91] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R10410 += 1, R10364 += 1 };
  s1 -> s6 [0, 65535] { R10410 += 1 };
  s1 -> s1 [0, 65535] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10410 += 1, R10364 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R10410 += 1 };
  s2 -> s4 [91, 91] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10410 += 1, R10364 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R10410 += 1, R10363 += 1, R10364 += 1 };
  s3 -> s4 [91, 91] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R10410 += 1, R10364 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10410 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10410 += 1, R10364 += 1 };
  s7 -> s6 [0, 65535] { R10410 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10412 += 1, R10366 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R10412 += 1, R10365 += 1, R10366 += 1 };
  s0 -> s0 [0, 65535] { R10411 += 1, R10412 += 1 };
  s0 -> s3 [0, 65535] { R10412 += 1, R10366 += 1, R5998 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R10412 += 1, R10366 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s5 [0, 65535] { R10412 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R10412 += 1, R10366 += 1, R5998 += 1, R6 += 1 };
  s2 -> s1 [0, 65535] { R10412 += 1, R10366 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s2 [0, 65535] { R10412 += 1, R10365 += 1, R10366 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10412 += 1, R10366 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R10412 += 1, R10366 += 1 };
  s3 -> s5 [0, 65535] { R10412 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10412 += 1, R10366 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R10412 += 1, R10366 += 1 };
  s4 -> s5 [0, 65535] { R10412 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10412 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10414 += 1, R10368 += 1, R10332 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R10414 += 1, R10367 += 1, R10368 += 1 };
  s0 -> s3 [0, 65535] { R10414 += 1, R10368 += 1, R10331 += 1, R10332 += 1 };
  s0 -> s0 [0, 65535] { R10413 += 1, R10414 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10414 += 1 };
  s1 -> s1 [0, 65535] { R10414 += 1, R10368 += 1, R10332 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R10414 += 1, R10368 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10414 += 1, R10368 += 1, R10332 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R10414 += 1, R10367 += 1, R10368 += 1 };
  s2 -> s3 [0, 65535] { R10414 += 1, R10368 += 1, R10331 += 1, R10332 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10414 += 1 };
  s3 -> s1 [0, 65535] { R10414 += 1, R10368 += 1, R10332 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R10414 += 1, R10368 += 1, R10331 += 1, R10332 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10414 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10414 += 1 };
  s6 -> s6 [0, 65535] { R10414 += 1, R10368 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R10415 += 1, R10416 += 1 };
  s0 -> s1 [0, 65535] { R10416 += 1, R10370 += 1, R10333 += 1, R10334 += 1 };
  s0 -> s2 [0, 65535] { R10416 += 1, R10369 += 1, R10370 += 1 };
  s0 -> s3 [108, 108] { R10416 += 1, R10370 += 1, R10334 += 1 };
  s1 -> s1 [0, 65535] { R10416 += 1, R10370 += 1, R10333 += 1, R10334 += 1 };
  s1 -> s3 [108, 108] { R10416 += 1, R10370 += 1, R10334 += 1 };
  s2 -> s1 [0, 65535] { R10416 += 1, R10370 += 1, R10333 += 1, R10334 += 1 };
  s2 -> s2 [0, 65535] { R10416 += 1, R10369 += 1, R10370 += 1 };
  s2 -> s3 [108, 108] { R10416 += 1, R10370 += 1, R10334 += 1 };
  s3 -> s4 [111, 111] { R10416 += 1, R10370 += 1, R10334 += 1 };
  s4 -> s5 [99, 99] { R10416 += 1, R10370 += 1, R10334 += 1 };
  s5 -> s6 [97, 97] { R10416 += 1, R10370 += 1, R10334 += 1 };
  s6 -> s7 [108, 108] { R10416 += 1, R10370 += 1, R10334 += 1 };
  s7 -> s7 [0, 65535] { R10416 += 1, R10370 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R10416 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10416 += 1 };
  accepting s7, s8, s9;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s0 -> s2 [0, 65535] { R10418 += 1, R10371 += 1, R10372 += 1 };
  s0 -> s0 [0, 65535] { R10417 += 1, R10418 += 1 };
  s0 -> s3 [0, 65535] { R10418 += 1, R10372 += 1, R10339 += 1, R10340 += 1 };
  s0 -> s4 [88, 88] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s0 -> s1 [89, 65535] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s1 -> s1 [0, 87] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s1 -> s4 [88, 88] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s1 -> s1 [89, 65535] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s2 -> s1 [0, 87] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s2 -> s2 [0, 65535] { R10418 += 1, R10371 += 1, R10372 += 1 };
  s2 -> s3 [0, 65535] { R10418 += 1, R10372 += 1, R10339 += 1, R10340 += 1 };
  s2 -> s4 [88, 88] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s2 -> s1 [89, 65535] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s3 -> s1 [0, 87] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s3 -> s3 [0, 65535] { R10418 += 1, R10372 += 1, R10339 += 1, R10340 += 1 };
  s3 -> s4 [88, 88] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s3 -> s1 [89, 65535] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s4 -> s4 [0, 65535] { R10418 += 1, R10372 += 1, R10340 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10418 += 1, R10372 += 1 };
  s4 -> s7 [0, 65535] { R10418 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10418 += 1, R10372 += 1 };
  s6 -> s7 [0, 65535] { R10418 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10418 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10420 += 1, R10373 += 1, R10374 += 1 };
  s0 -> s2 [0, 65535] { R10420 += 1, R10374 += 1, R10342 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10419 += 1, R10420 += 1 };
  s0 -> s3 [0, 65535] { R10420 += 1, R10374 += 1, R10341 += 1, R10342 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10420 += 1, R10373 += 1, R10374 += 1 };
  s1 -> s2 [0, 65535] { R10420 += 1, R10374 += 1, R10342 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R10420 += 1, R10374 += 1, R10341 += 1, R10342 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10420 += 1, R10374 += 1, R10342 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R10420 += 1, R10374 += 1 };
  s2 -> s5 [0, 65535] { R10420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10420 += 1, R10374 += 1, R10342 += 1, R1 += 1 };
  s3 -> s5 [0, 65535] { R10420 += 1 };
  s3 -> s3 [0, 65535] { R10420 += 1, R10374 += 1, R10341 += 1, R10342 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10420 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10420 += 1, R10374 += 1 };
  s6 -> s5 [0, 65535] { R10420 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s0 -> s2 [0, 65535] { R10422 += 1, R10376 += 1, R10344 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R10422 += 1, R10375 += 1, R10376 += 1 };
  s0 -> s0 [0, 65535] { R10421 += 1, R10422 += 1 };
  s0 -> s4 [0, 65535] { R10422 += 1, R10376 += 1, R10343 += 1, R10344 += 1 };
  s0 -> s5 [88, 88] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s0 -> s1 [89, 65535] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s1 -> s1 [0, 87] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s1 -> s6 [0, 65535] { R10422 += 1 };
  s1 -> s1 [0, 65535] { R10422 += 1, R10376 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [88, 88] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s1 -> s1 [89, 65535] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s2 -> s1 [0, 87] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s2 -> s6 [0, 65535] { R10422 += 1 };
  s2 -> s2 [0, 65535] { R10422 += 1, R10376 += 1, R10344 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R10422 += 1, R10376 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [88, 88] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s2 -> s1 [89, 65535] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s3 -> s1 [0, 87] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s3 -> s2 [0, 65535] { R10422 += 1, R10376 += 1, R10344 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R10422 += 1, R10375 += 1, R10376 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R10422 += 1, R10376 += 1, R10343 += 1, R10344 += 1 };
  s3 -> s5 [88, 88] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s3 -> s1 [89, 65535] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s4 -> s1 [0, 87] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s4 -> s6 [0, 65535] { R10422 += 1 };
  s4 -> s2 [0, 65535] { R10422 += 1, R10376 += 1, R10344 += 1, R7 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R10422 += 1, R10376 += 1, R10343 += 1, R10344 += 1 };
  s4 -> s5 [88, 88] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s4 -> s1 [89, 65535] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s5 -> s5 [0, 65535] { R10422 += 1, R10376 += 1, R10344 += 1 };
  s6 -> s6 [0, 65535] { R10422 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10422 += 1 };
  s8 -> s8 [0, 65535] { R10422 += 1, R10376 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s0 -> s2 [0, 65535] { R10424 += 1, R10378 += 1, R10346 += 1, R10327 += 1, R10328 += 1 };
  s0 -> s0 [0, 65535] { R10423 += 1, R10424 += 1 };
  s0 -> s3 [0, 65535] { R10424 += 1, R10377 += 1, R10378 += 1 };
  s0 -> s4 [0, 65535] { R10424 += 1, R10378 += 1, R10345 += 1, R10346 += 1 };
  s0 -> s1 [89, 65535] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s1 -> s1 [0, 87] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s1 -> s5 [0, 65535] { R10424 += 1 };
  s1 -> s7 [0, 65535] { R10424 += 1, R10378 += 1 };
  s1 -> s1 [0, 65535] { R10424 += 1, R10378 += 1, R10346 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [89, 65535] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s2 -> s1 [0, 87] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s2 -> s5 [0, 65535] { R10424 += 1 };
  s2 -> s2 [0, 65535] { R10424 += 1, R10378 += 1, R10346 += 1, R10327 += 1, R10328 += 1 };
  s2 -> s7 [0, 65535] { R10424 += 1, R10378 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [89, 65535] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s3 -> s1 [0, 87] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s3 -> s2 [0, 65535] { R10424 += 1, R10378 += 1, R10346 += 1, R10327 += 1, R10328 += 1 };
  s3 -> s3 [0, 65535] { R10424 += 1, R10377 += 1, R10378 += 1 };
  s3 -> s4 [0, 65535] { R10424 += 1, R10378 += 1, R10345 += 1, R10346 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [89, 65535] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s4 -> s1 [0, 87] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s4 -> s5 [0, 65535] { R10424 += 1 };
  s4 -> s2 [0, 65535] { R10424 += 1, R10378 += 1, R10346 += 1, R10327 += 1, R10328 += 1 };
  s4 -> s4 [0, 65535] { R10424 += 1, R10378 += 1, R10345 += 1, R10346 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [89, 65535] { R10424 += 1, R10378 += 1, R10346 += 1, R10328 += 1 };
  s5 -> s5 [0, 65535] { R10424 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10424 += 1 };
  s7 -> s7 [0, 65535] { R10424 += 1, R10378 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10425 += 1, R10426 += 1 };
  s0 -> s1 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1, R10330 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1, R10329 += 1, R10330 += 1 };
  s0 -> s3 [0, 65535] { R10426 += 1, R10380 += 1, R10347 += 1, R10348 += 1 };
  s0 -> s4 [0, 65535] { R10426 += 1, R10379 += 1, R10380 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1, R10330 += 1, R5988 += 1 };
  s1 -> s6 [0, 65535] { R10426 += 1 };
  s1 -> s8 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1 };
  s1 -> s7 [0, 65535] { R10426 += 1, R10380 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1, R10330 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1, R10329 += 1, R10330 += 1 };
  s2 -> s6 [0, 65535] { R10426 += 1 };
  s2 -> s7 [0, 65535] { R10426 += 1, R10380 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1, R10330 += 1, R5988 += 1 };
  s3 -> s2 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1, R10329 += 1, R10330 += 1 };
  s3 -> s6 [0, 65535] { R10426 += 1 };
  s3 -> s3 [0, 65535] { R10426 += 1, R10380 += 1, R10347 += 1, R10348 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1, R10330 += 1, R5988 += 1 };
  s4 -> s2 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1, R10329 += 1, R10330 += 1 };
  s4 -> s3 [0, 65535] { R10426 += 1, R10380 += 1, R10347 += 1, R10348 += 1 };
  s4 -> s4 [0, 65535] { R10426 += 1, R10379 += 1, R10380 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10426 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10426 += 1 };
  s7 -> s7 [0, 65535] { R10426 += 1, R10380 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10426 += 1 };
  s8 -> s8 [0, 65535] { R10426 += 1, R10380 += 1, R10348 += 1 };
  s8 -> s7 [0, 65535] { R10426 += 1, R10380 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10428 += 1, R10382 += 1, R10349 += 1, R10350 += 1 };
  s0 -> s2 [0, 65535] { R10428 += 1, R10382 += 1, R10350 += 1 };
  s0 -> s0 [0, 65535] { R10427 += 1, R10428 += 1 };
  s0 -> s3 [0, 65535] { R10428 += 1, R10381 += 1, R10382 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10428 += 1, R10382 += 1, R10349 += 1, R10350 += 1 };
  s1 -> s2 [0, 65535] { R10428 += 1, R10382 += 1, R10350 += 1 };
  s1 -> s5 [0, 65535] { R10428 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10428 += 1, R10382 += 1, R10350 += 1 };
  s2 -> s5 [0, 65535] { R10428 += 1 };
  s2 -> s6 [0, 65535] { R10428 += 1, R10382 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10428 += 1, R10382 += 1, R10349 += 1, R10350 += 1 };
  s3 -> s2 [0, 65535] { R10428 += 1, R10382 += 1, R10350 += 1 };
  s3 -> s3 [0, 65535] { R10428 += 1, R10381 += 1, R10382 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10428 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10428 += 1 };
  s6 -> s6 [0, 65535] { R10428 += 1, R10382 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10430 += 1, R10384 += 1, R10351 += 1, R10352 += 1 };
  s0 -> s2 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1, R10335 += 1, R10336 += 1 };
  s0 -> s3 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1, R10336 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R10430 += 1, R10383 += 1, R10384 += 1 };
  s0 -> s0 [0, 65535] { R10429 += 1, R10430 += 1 };
  s1 -> s1 [0, 65535] { R10430 += 1, R10384 += 1, R10351 += 1, R10352 += 1 };
  s1 -> s2 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1, R10335 += 1, R10336 += 1 };
  s1 -> s3 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1, R10336 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R10430 += 1 };
  s2 -> s6 [0, 65535] { R10430 += 1, R10384 += 1 };
  s2 -> s2 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1, R10335 += 1, R10336 += 1 };
  s2 -> s3 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1, R10336 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R10430 += 1 };
  s3 -> s6 [0, 65535] { R10430 += 1, R10384 += 1 };
  s3 -> s3 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1, R10336 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R10430 += 1 };
  s3 -> s8 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1 };
  s4 -> s1 [0, 65535] { R10430 += 1, R10384 += 1, R10351 += 1, R10352 += 1 };
  s4 -> s2 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1, R10335 += 1, R10336 += 1 };
  s4 -> s3 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1, R10336 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R10430 += 1, R10383 += 1, R10384 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10430 += 1, R10384 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s7 [0, 65535] { R10430 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10430 += 1 };
  s8 -> s6 [0, 65535] { R10430 += 1, R10384 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R10430 += 1 };
  s8 -> s8 [0, 65535] { R10430 += 1, R10384 += 1, R10352 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10432 += 1, R10386 += 1, R10354 += 1, R10337 += 1, R10338 += 1 };
  s0 -> s0 [0, 65535] { R10431 += 1, R10432 += 1 };
  s0 -> s2 [0, 65535] { R10432 += 1, R10385 += 1, R10386 += 1 };
  s0 -> s3 [0, 65535] { R10432 += 1, R10386 += 1, R10353 += 1, R10354 += 1 };
  s0 -> s4 [104, 104] { R10432 += 1, R10386 += 1, R10354 += 1, R10338 += 1 };
  s1 -> s1 [0, 65535] { R10432 += 1, R10386 += 1, R10354 += 1, R10337 += 1, R10338 += 1 };
  s1 -> s4 [104, 104] { R10432 += 1, R10386 += 1, R10354 += 1, R10338 += 1 };
  s2 -> s1 [0, 65535] { R10432 += 1, R10386 += 1, R10354 += 1, R10337 += 1, R10338 += 1 };
  s2 -> s2 [0, 65535] { R10432 += 1, R10385 += 1, R10386 += 1 };
  s2 -> s3 [0, 65535] { R10432 += 1, R10386 += 1, R10353 += 1, R10354 += 1 };
  s2 -> s4 [104, 104] { R10432 += 1, R10386 += 1, R10354 += 1, R10338 += 1 };
  s3 -> s1 [0, 65535] { R10432 += 1, R10386 += 1, R10354 += 1, R10337 += 1, R10338 += 1 };
  s3 -> s3 [0, 65535] { R10432 += 1, R10386 += 1, R10353 += 1, R10354 += 1 };
  s3 -> s4 [104, 104] { R10432 += 1, R10386 += 1, R10354 += 1, R10338 += 1 };
  s4 -> s5 [111, 111] { R10432 += 1, R10386 += 1, R10354 += 1, R10338 += 1 };
  s5 -> s6 [115, 115] { R10432 += 1, R10386 += 1, R10354 += 1, R10338 += 1 };
  s6 -> s7 [116, 116] { R10432 += 1, R10386 += 1, R10354 += 1, R10338 += 1 };
  s7 -> s8 [0, 65535] { R10432 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s10 [0, 65535] { R10432 += 1, R10386 += 1 };
  s7 -> s7 [0, 65535] { R10432 += 1, R10386 += 1, R10354 += 1 };
  s8 -> s8 [0, 65535] { R10432 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  s10 -> s8 [0, 65535] { R10432 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10432 += 1, R10386 += 1 };
  accepting s7, s8, s9, s10;
};
};
constraint R1 = 0 && R2 = R10354 && R3 = R10326 && R4 = R10432 && R15 = 0 && R16 = R10386 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R10319 - R10386 = 1 && R10320 = R10326 && R10321 - R10386 = 1 && R10322 = R10326 && R10323 - R10386 = 1 && R10324 = R10326 && R10325 - R10386 = 1 && R10333 = 0 && R10334 = 0 && R10337 = 0 && R10338 = 0 && R10339 = 0 && R10340 = R10354 && R10341 = 0 && R10342 = R10354 && R10343 = 0 && R10344 = R10354 && R10345 = 0 && R10346 = R10354 && R10347 = 0 && R10348 = R10354 && R10349 = 0 && R10350 = R10354 && R10351 = 0 && R10352 = R10354 && R10353 = 0 && R10355 = 0 && R10356 = R10386 && R10357 = 0 && R10358 = R10386 && R10359 = 0 && R10360 = R10386 && R10361 = 0 && R10362 = R10386 && R10363 = 0 && R10364 = R10386 && R10365 = 0 && R10366 = R10386 && R10367 = 0 && R10368 = R10386 && R10369 = 0 && R10370 = R10386 && R10371 = 0 && R10372 = R10386 && R10373 = 0 && R10374 = R10386 && R10375 = 0 && R10376 = R10386 && R10377 = 0 && R10378 = R10386 && R10379 = 0 && R10380 = R10386 && R10381 = 0 && R10382 = R10386 && R10383 = 0 && R10384 = R10386 && R10385 = 0 && R10387 = 10 && R10388 = R10432 && R10389 = 10 && R10390 = R10432 && R10391 = 10 && R10392 = R10432 && R10393 = 10 && R10394 = R10432 && R10395 = 10 && R10396 = R10432 && R10397 = 10 && R10398 = R10432 && R10399 = 10 && R10400 = R10432 && R10401 = 10 && R10402 = R10432 && R10403 = 10 && R10404 = R10432 && R10405 = 10 && R10406 = R10432 && R10407 = 10 && R10408 = R10432 && R10409 = 10 && R10410 = R10432 && R10411 = 10 && R10412 = R10432 && R10413 = 10 && R10414 = R10432 && R10415 = 10 && R10416 = R10432 && R10417 = 10 && R10418 = R10432 && R10419 = 10 && R10420 = R10432 && R10421 = 10 && R10422 = R10432 && R10423 = 10 && R10424 = R10432 && R10425 = 10 && R10426 = R10432 && R10427 = 10 && R10428 = R10432 && R10429 = 10 && R10430 = R10432 && R10431 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R10386 < R10326 && 0 < R10354 && -1 < R10386 && 9 < R10432 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R5988 = 0 || (R10327 = 0 && R10328 = 0)) && (R5988 = 0 || (R10329 = 0 && R10330 = 0)) && (R5989 = 0 || (R10335 = 0 && R10336 = 0)) && (R5990 = 0 || (R10331 = 0 && R10332 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
