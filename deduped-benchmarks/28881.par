// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8801, R8802, R8803, R8804, R8805, R8806, R8807, R8808, R8809, R8810, R8811, R8812, R8813, R8814, R8815, R8816, R8817, R8818, R8819, R8820, R8821, R8822, R8823, R8824, R8825, R8826, R8827, R8828, R8829, R8830, R8831, R8832, R8833, R8834, R8835, R8836, R8837, R8838, R8839, R8840, R8841, R8842, R8843, R8844, R8845, R8846, R8847, R8848, R8849, R8850, R8851, R8852, R8853, R8854, R8855, R8856, R8857, R8858, R8859, R8860, R8861, R8862, R8863, R8864, R8865, R8866, R8867, R8868, R8869, R8870, R8871, R8872, R8873, R8874, R8875, R8876, R8877, R8878, R8879, R8880, R8881, R8882, R8883, R8884, R8885, R8886, R8887, R8888, R8889, R8890, R8891, R8892, R8893, R8894, R8895, R8896, R8897, R8898, R8899, R8900, R8901, R8902, R8903, R8904, R8905, R8906;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R8862 += 1 };
  s0 -> s0 [0, 65535] { R8861 += 1, R8862 += 1 };
  s0 -> s2 [46, 46] { R8862 += 1 };
  s0 -> s3 [47, 47] { R8862 += 1 };
  s0 -> s1 [48, 65535] { R8862 += 1 };
  s1 -> s1 [0, 45] { R8862 += 1 };
  s1 -> s2 [46, 46] { R8862 += 1 };
  s1 -> s3 [47, 47] { R8862 += 1 };
  s1 -> s1 [48, 65535] { R8862 += 1 };
  s2 -> s1 [0, 45] { R8862 += 1 };
  s2 -> s2 [46, 46] { R8862 += 1 };
  s2 -> s3 [47, 47] { R8862 += 1 };
  s2 -> s1 [48, 114] { R8862 += 1 };
  s2 -> s8 [115, 115] { R8862 += 1 };
  s2 -> s1 [116, 65535] { R8862 += 1 };
  s3 -> s3 [0, 45] { R8862 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R8862 += 1 };
  s3 -> s3 [47, 65535] { R8862 += 1 };
  s4 -> s3 [0, 45] { R8862 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R8862 += 1 };
  s4 -> s3 [47, 114] { R8862 += 1 };
  s4 -> s5 [115, 115] { R8862 += 1 };
  s4 -> s3 [116, 65535] { R8862 += 1 };
  s5 -> s3 [0, 45] { R8862 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R8862 += 1 };
  s5 -> s3 [47, 110] { R8862 += 1 };
  s5 -> s6 [111, 111] { R8862 += 1 };
  s5 -> s3 [112, 65535] { R8862 += 1 };
  s6 -> s3 [0, 45] { R8862 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R8862 += 1 };
  s6 -> s3 [47, 98] { R8862 += 1 };
  s6 -> s7 [99, 99] { R8862 += 1 };
  s6 -> s3 [100, 65535] { R8862 += 1 };
  s7 -> s3 [0, 45] { R8862 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R8862 += 1 };
  s7 -> s3 [47, 106] { R8862 += 1 };
  s7 -> s3 [108, 65535] { R8862 += 1 };
  s8 -> s1 [0, 45] { R8862 += 1 };
  s8 -> s2 [46, 46] { R8862 += 1 };
  s8 -> s3 [47, 47] { R8862 += 1 };
  s8 -> s1 [48, 110] { R8862 += 1 };
  s8 -> s9 [111, 111] { R8862 += 1 };
  s8 -> s1 [112, 65535] { R8862 += 1 };
  s9 -> s1 [0, 45] { R8862 += 1 };
  s9 -> s2 [46, 46] { R8862 += 1 };
  s9 -> s3 [47, 47] { R8862 += 1 };
  s9 -> s1 [48, 98] { R8862 += 1 };
  s9 -> s10 [99, 99] { R8862 += 1 };
  s9 -> s1 [100, 65535] { R8862 += 1 };
  s10 -> s1 [0, 45] { R8862 += 1 };
  s10 -> s2 [46, 46] { R8862 += 1 };
  s10 -> s3 [47, 47] { R8862 += 1 };
  s10 -> s1 [48, 106] { R8862 += 1 };
  s10 -> s1 [108, 65535] { R8862 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R8863 += 1, R8864 += 1 };
  s0 -> s1 [0, 65535] { R8864 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R8864 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R8866 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8865 += 1, R8866 += 1 };
  s0 -> s2 [0, 65535] { R8866 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R8866 += 1 };
  s0 -> s1 [48, 65535] { R8866 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R8866 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R8866 += 1 };
  s1 -> s1 [48, 65535] { R8866 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R8866 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R8866 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R8866 += 1 };
  s2 -> s1 [48, 65535] { R8866 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8866 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8868 += 1, R8040 += 1 };
  s0 -> s2 [0, 65535] { R8868 += 1, R8039 += 1, R8040 += 1 };
  s0 -> s0 [0, 65535] { R8867 += 1, R8868 += 1 };
  s0 -> s1 [38, 42] { R8868 += 1, R8040 += 1 };
  s0 -> s1 [44, 45] { R8868 += 1, R8040 += 1 };
  s0 -> s1 [47, 62] { R8868 += 1, R8040 += 1 };
  s0 -> s1 [64, 65535] { R8868 += 1, R8040 += 1 };
  s1 -> s1 [0, 36] { R8868 += 1, R8040 += 1 };
  s1 -> s1 [0, 65535] { R8868 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R8868 += 1, R8040 += 1 };
  s1 -> s1 [44, 45] { R8868 += 1, R8040 += 1 };
  s1 -> s1 [47, 62] { R8868 += 1, R8040 += 1 };
  s1 -> s1 [64, 65535] { R8868 += 1, R8040 += 1 };
  s2 -> s1 [0, 36] { R8868 += 1, R8040 += 1 };
  s2 -> s2 [0, 65535] { R8868 += 1, R8039 += 1, R8040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R8868 += 1, R8040 += 1 };
  s2 -> s1 [44, 45] { R8868 += 1, R8040 += 1 };
  s2 -> s1 [47, 62] { R8868 += 1, R8040 += 1 };
  s2 -> s1 [64, 65535] { R8868 += 1, R8040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R8870 += 1, R8041 += 1, R8042 += 1 };
  s0 -> s0 [0, 65535] { R8869 += 1, R8870 += 1 };
  s0 -> s2 [0, 65535] { R8870 += 1, R8042 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8870 += 1, R8041 += 1, R8042 += 1 };
  s1 -> s2 [0, 65535] { R8870 += 1, R8042 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8870 += 1 };
  s2 -> s2 [0, 65535] { R8870 += 1, R8042 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8870 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R8871 += 1, R8872 += 1 };
  s0 -> s2 [0, 65535] { R8872 += 1, R8043 += 1, R8044 += 1 };
  s0 -> s3 [0, 65535] { R8872 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R8872 += 1, R8044 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8872 += 1 };
  s1 -> s1 [0, 65535] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8872 += 1, R8043 += 1, R8044 += 1 };
  s2 -> s3 [0, 65535] { R8872 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8872 += 1 };
  s3 -> s3 [0, 65535] { R8872 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8872 += 1, R8044 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8872 += 1 };
  s7 -> s7 [0, 65535] { R8872 += 1, R8044 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8872 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8874 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s2 [0, 65535] { R8874 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R8874 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R8873 += 1, R8874 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8874 += 1, R8045 += 1, R8046 += 1 };
  s1 -> s2 [0, 65535] { R8874 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s3 [0, 65535] { R8874 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8874 += 1 };
  s2 -> s2 [0, 65535] { R8874 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s3 [0, 65535] { R8874 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R8874 += 1, R8046 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8874 += 1 };
  s3 -> s3 [0, 65535] { R8874 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R8874 += 1, R8046 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8874 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8874 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8876 += 1, R8830 += 1 };
  s0 -> s2 [0, 65535] { R8876 += 1, R8829 += 1, R8830 += 1 };
  s0 -> s0 [0, 65535] { R8875 += 1, R8876 += 1 };
  s0 -> s1 [45, 63] { R8876 += 1, R8830 += 1 };
  s0 -> s3 [88, 88] { R8876 += 1, R8830 += 1 };
  s0 -> s1 [89, 65535] { R8876 += 1, R8830 += 1 };
  s1 -> s1 [0, 43] { R8876 += 1, R8830 += 1 };
  s1 -> s1 [45, 63] { R8876 += 1, R8830 += 1 };
  s1 -> s3 [88, 88] { R8876 += 1, R8830 += 1 };
  s1 -> s1 [89, 65535] { R8876 += 1, R8830 += 1 };
  s2 -> s1 [0, 43] { R8876 += 1, R8830 += 1 };
  s2 -> s2 [0, 65535] { R8876 += 1, R8829 += 1, R8830 += 1 };
  s2 -> s1 [45, 63] { R8876 += 1, R8830 += 1 };
  s2 -> s3 [88, 88] { R8876 += 1, R8830 += 1 };
  s2 -> s1 [89, 65535] { R8876 += 1, R8830 += 1 };
  s3 -> s3 [0, 43] { R8876 += 1, R8830 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8876 += 1 };
  s3 -> s3 [45, 63] { R8876 += 1, R8830 += 1 };
  s3 -> s3 [88, 65535] { R8876 += 1, R8830 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R8877 += 1, R8878 += 1 };
  s0 -> s1 [0, 65535] { R8878 += 1, R8831 += 1, R8832 += 1 };
  s0 -> s2 [0, 65535] { R8878 += 1, R8832 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8878 += 1, R8831 += 1, R8832 += 1 };
  s1 -> s2 [0, 65535] { R8878 += 1, R8832 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R8878 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8878 += 1, R8832 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R8878 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8880 += 1, R8834 += 1 };
  s0 -> s2 [0, 65535] { R8880 += 1, R8833 += 1, R8834 += 1 };
  s0 -> s3 [0, 65535] { R8880 += 1, R8834 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R8879 += 1, R8880 += 1 };
  s0 -> s4 [58, 58] { R8880 += 1, R8834 += 1 };
  s0 -> s1 [59, 65535] { R8880 += 1, R8834 += 1 };
  s1 -> s1 [0, 57] { R8880 += 1, R8834 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8880 += 1 };
  s1 -> s4 [58, 58] { R8880 += 1, R8834 += 1 };
  s1 -> s1 [59, 65535] { R8880 += 1, R8834 += 1 };
  s2 -> s1 [0, 57] { R8880 += 1, R8834 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8880 += 1, R8833 += 1, R8834 += 1 };
  s2 -> s3 [0, 65535] { R8880 += 1, R8834 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R8880 += 1, R8834 += 1 };
  s2 -> s1 [59, 65535] { R8880 += 1, R8834 += 1 };
  s3 -> s1 [0, 57] { R8880 += 1, R8834 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8880 += 1, R8834 += 1, R10 += 1 };
  s3 -> s6 [0, 65535] { R8880 += 1 };
  s3 -> s4 [58, 58] { R8880 += 1, R8834 += 1 };
  s3 -> s1 [59, 65535] { R8880 += 1, R8834 += 1 };
  s4 -> s4 [0, 65535] { R8880 += 1, R8834 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8880 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R8882 += 1, R8836 += 1 };
  s0 -> s2 [0, 65535] { R8882 += 1, R8835 += 1, R8836 += 1 };
  s0 -> s0 [0, 65535] { R8881 += 1, R8882 += 1 };
  s0 -> s3 [0, 65535] { R8882 += 1, R8836 += 1, R11 += 1 };
  s0 -> s4 [88, 88] { R8882 += 1, R8836 += 1 };
  s0 -> s1 [89, 65535] { R8882 += 1, R8836 += 1 };
  s1 -> s1 [0, 87] { R8882 += 1, R8836 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8882 += 1 };
  s1 -> s4 [88, 88] { R8882 += 1, R8836 += 1 };
  s1 -> s1 [89, 65535] { R8882 += 1, R8836 += 1 };
  s2 -> s1 [0, 87] { R8882 += 1, R8836 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8882 += 1, R8835 += 1, R8836 += 1 };
  s2 -> s3 [0, 65535] { R8882 += 1, R8836 += 1, R11 += 1 };
  s2 -> s4 [88, 88] { R8882 += 1, R8836 += 1 };
  s2 -> s1 [89, 65535] { R8882 += 1, R8836 += 1 };
  s3 -> s1 [0, 87] { R8882 += 1, R8836 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8882 += 1 };
  s3 -> s3 [0, 65535] { R8882 += 1, R8836 += 1, R11 += 1 };
  s3 -> s4 [88, 88] { R8882 += 1, R8836 += 1 };
  s3 -> s1 [89, 65535] { R8882 += 1, R8836 += 1 };
  s4 -> s4 [0, 65535] { R8882 += 1, R8836 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8882 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8883 += 1, R8884 += 1 };
  s0 -> s2 [0, 65535] { R8884 += 1, R8838 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R8884 += 1, R8837 += 1, R8838 += 1 };
  s0 -> s4 [91, 91] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R8884 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R8884 += 1, R8838 += 1 };
  s2 -> s1 [0, 90] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R8884 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8884 += 1, R8838 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8884 += 1, R8838 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R8884 += 1, R8837 += 1, R8838 += 1 };
  s3 -> s4 [91, 91] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8884 += 1, R8838 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8884 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8884 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8884 += 1, R8838 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8886 += 1, R8840 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R8885 += 1, R8886 += 1 };
  s0 -> s2 [0, 65535] { R8886 += 1, R8840 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R8886 += 1, R8839 += 1, R8840 += 1 };
  s1 -> s1 [0, 65535] { R8886 += 1, R8840 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s2 [0, 65535] { R8886 += 1, R8840 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R8886 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8886 += 1, R8840 += 1 };
  s2 -> s2 [0, 65535] { R8886 += 1, R8840 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R8886 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8886 += 1, R8840 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R8886 += 1, R8840 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8886 += 1, R8839 += 1, R8840 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8886 += 1, R8840 += 1 };
  s5 -> s6 [0, 65535] { R8886 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8886 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8888 += 1, R8842 += 1, R8808 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R8887 += 1, R8888 += 1 };
  s0 -> s2 [0, 65535] { R8888 += 1, R8841 += 1, R8842 += 1 };
  s0 -> s3 [0, 65535] { R8888 += 1, R8842 += 1, R8807 += 1, R8808 += 1 };
  s1 -> s1 [0, 65535] { R8888 += 1, R8842 += 1, R8808 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R8888 += 1, R8842 += 1 };
  s1 -> s4 [0, 65535] { R8888 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8888 += 1, R8842 += 1, R8808 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R8888 += 1, R8841 += 1, R8842 += 1 };
  s2 -> s3 [0, 65535] { R8888 += 1, R8842 += 1, R8807 += 1, R8808 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R8888 += 1, R8842 += 1, R8808 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R8888 += 1 };
  s3 -> s3 [0, 65535] { R8888 += 1, R8842 += 1, R8807 += 1, R8808 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8888 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8888 += 1, R8842 += 1 };
  s6 -> s4 [0, 65535] { R8888 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R8889 += 1, R8890 += 1 };
  s0 -> s1 [0, 65535] { R8890 += 1, R8843 += 1, R8844 += 1 };
  s0 -> s2 [0, 65535] { R8890 += 1, R8844 += 1, R8809 += 1, R8810 += 1 };
  s0 -> s3 [108, 108] { R8890 += 1, R8844 += 1, R8810 += 1 };
  s1 -> s1 [0, 65535] { R8890 += 1, R8843 += 1, R8844 += 1 };
  s1 -> s2 [0, 65535] { R8890 += 1, R8844 += 1, R8809 += 1, R8810 += 1 };
  s1 -> s3 [108, 108] { R8890 += 1, R8844 += 1, R8810 += 1 };
  s2 -> s2 [0, 65535] { R8890 += 1, R8844 += 1, R8809 += 1, R8810 += 1 };
  s2 -> s3 [108, 108] { R8890 += 1, R8844 += 1, R8810 += 1 };
  s3 -> s4 [111, 111] { R8890 += 1, R8844 += 1, R8810 += 1 };
  s4 -> s4 [0, 65535] { R8890 += 1, R8844 += 1 };
  s4 -> s5 [0, 65535] { R8890 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8890 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s0 -> s2 [0, 65535] { R8892 += 1, R8846 += 1, R8813 += 1, R8814 += 1 };
  s0 -> s3 [0, 65535] { R8892 += 1, R8845 += 1, R8846 += 1 };
  s0 -> s0 [0, 65535] { R8891 += 1, R8892 += 1 };
  s0 -> s4 [88, 88] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s0 -> s1 [89, 65535] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s1 -> s1 [0, 87] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s1 -> s4 [88, 88] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s1 -> s1 [89, 65535] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s2 -> s1 [0, 87] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s2 -> s2 [0, 65535] { R8892 += 1, R8846 += 1, R8813 += 1, R8814 += 1 };
  s2 -> s4 [88, 88] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s2 -> s1 [89, 65535] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s3 -> s1 [0, 87] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s3 -> s2 [0, 65535] { R8892 += 1, R8846 += 1, R8813 += 1, R8814 += 1 };
  s3 -> s3 [0, 65535] { R8892 += 1, R8845 += 1, R8846 += 1 };
  s3 -> s4 [88, 88] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s3 -> s1 [89, 65535] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s4 -> s5 [0, 65535] { R8892 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8892 += 1, R8846 += 1 };
  s4 -> s4 [0, 65535] { R8892 += 1, R8846 += 1, R8814 += 1 };
  s5 -> s5 [0, 65535] { R8892 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8892 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8892 += 1, R8846 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8894 += 1, R8848 += 1, R8816 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R8894 += 1, R8847 += 1, R8848 += 1 };
  s0 -> s0 [0, 65535] { R8893 += 1, R8894 += 1 };
  s0 -> s3 [0, 65535] { R8894 += 1, R8848 += 1, R8815 += 1, R8816 += 1 };
  s1 -> s1 [0, 65535] { R8894 += 1, R8848 += 1, R8816 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R8894 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8894 += 1, R8848 += 1 };
  s2 -> s1 [0, 65535] { R8894 += 1, R8848 += 1, R8816 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8894 += 1, R8847 += 1, R8848 += 1 };
  s2 -> s3 [0, 65535] { R8894 += 1, R8848 += 1, R8815 += 1, R8816 += 1 };
  s3 -> s1 [0, 65535] { R8894 += 1, R8848 += 1, R8816 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R8894 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8894 += 1, R8848 += 1, R8815 += 1, R8816 += 1 };
  s4 -> s4 [0, 65535] { R8894 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8894 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8894 += 1, R8848 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s0 -> s2 [0, 65535] { R8896 += 1, R8850 += 1, R8818 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R8895 += 1, R8896 += 1 };
  s0 -> s3 [0, 65535] { R8896 += 1, R8849 += 1, R8850 += 1 };
  s0 -> s4 [0, 65535] { R8896 += 1, R8850 += 1, R8817 += 1, R8818 += 1 };
  s0 -> s5 [88, 88] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s0 -> s1 [89, 65535] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s1 -> s1 [0, 87] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8896 += 1, R8850 += 1 };
  s1 -> s7 [0, 65535] { R8896 += 1 };
  s1 -> s5 [88, 88] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s1 -> s1 [89, 65535] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s2 -> s1 [0, 87] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s2 -> s8 [0, 65535] { R8896 += 1, R8850 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8896 += 1, R8850 += 1, R8818 += 1, R7 += 1 };
  s2 -> s7 [0, 65535] { R8896 += 1 };
  s2 -> s5 [88, 88] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s2 -> s1 [89, 65535] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s3 -> s1 [0, 87] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R8896 += 1, R8850 += 1, R8818 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R8896 += 1, R8849 += 1, R8850 += 1 };
  s3 -> s4 [0, 65535] { R8896 += 1, R8850 += 1, R8817 += 1, R8818 += 1 };
  s3 -> s5 [88, 88] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s3 -> s1 [89, 65535] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s4 -> s1 [0, 87] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R8896 += 1, R8850 += 1, R8818 += 1, R7 += 1 };
  s4 -> s7 [0, 65535] { R8896 += 1 };
  s4 -> s4 [0, 65535] { R8896 += 1, R8850 += 1, R8817 += 1, R8818 += 1 };
  s4 -> s5 [88, 88] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s4 -> s1 [89, 65535] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s5 -> s5 [0, 65535] { R8896 += 1, R8850 += 1, R8818 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8896 += 1 };
  s8 -> s8 [0, 65535] { R8896 += 1, R8850 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8896 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s0 -> s0 [0, 65535] { R8897 += 1, R8898 += 1 };
  s0 -> s2 [0, 65535] { R8898 += 1, R8851 += 1, R8852 += 1 };
  s0 -> s3 [0, 65535] { R8898 += 1, R8852 += 1, R8820 += 1, R8801 += 1, R8802 += 1 };
  s0 -> s4 [0, 65535] { R8898 += 1, R8852 += 1, R8819 += 1, R8820 += 1 };
  s0 -> s1 [89, 65535] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s1 -> s1 [0, 87] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s1 -> s5 [0, 65535] { R8898 += 1 };
  s1 -> s7 [0, 65535] { R8898 += 1, R8852 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8898 += 1, R8852 += 1, R8820 += 1 };
  s1 -> s1 [89, 65535] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s2 -> s1 [0, 87] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s2 -> s2 [0, 65535] { R8898 += 1, R8851 += 1, R8852 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8898 += 1, R8852 += 1, R8820 += 1, R8801 += 1, R8802 += 1 };
  s2 -> s4 [0, 65535] { R8898 += 1, R8852 += 1, R8819 += 1, R8820 += 1 };
  s2 -> s1 [89, 65535] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s3 -> s1 [0, 87] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s3 -> s5 [0, 65535] { R8898 += 1 };
  s3 -> s7 [0, 65535] { R8898 += 1, R8852 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8898 += 1, R8852 += 1, R8820 += 1, R8801 += 1, R8802 += 1 };
  s3 -> s1 [89, 65535] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s4 -> s1 [0, 87] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s4 -> s5 [0, 65535] { R8898 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R8898 += 1, R8852 += 1, R8820 += 1, R8801 += 1, R8802 += 1 };
  s4 -> s4 [0, 65535] { R8898 += 1, R8852 += 1, R8819 += 1, R8820 += 1 };
  s4 -> s1 [89, 65535] { R8898 += 1, R8852 += 1, R8820 += 1, R8802 += 1 };
  s5 -> s5 [0, 65535] { R8898 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8898 += 1 };
  s7 -> s7 [0, 65535] { R8898 += 1, R8852 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8899 += 1, R8900 += 1 };
  s0 -> s1 [0, 65535] { R8900 += 1, R8853 += 1, R8854 += 1 };
  s0 -> s2 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1, R8804 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R8900 += 1, R8854 += 1, R8821 += 1, R8822 += 1 };
  s0 -> s4 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1, R8803 += 1, R8804 += 1 };
  s1 -> s1 [0, 65535] { R8900 += 1, R8853 += 1, R8854 += 1 };
  s1 -> s2 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1, R8804 += 1, R5988 += 1 };
  s1 -> s3 [0, 65535] { R8900 += 1, R8854 += 1, R8821 += 1, R8822 += 1 };
  s1 -> s4 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1, R8803 += 1, R8804 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1, R8804 += 1, R5988 += 1 };
  s2 -> s8 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1 };
  s2 -> s5 [0, 65535] { R8900 += 1, R8854 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R8900 += 1 };
  s3 -> s2 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1, R8804 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R8900 += 1, R8854 += 1, R8821 += 1, R8822 += 1 };
  s3 -> s4 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1, R8803 += 1, R8804 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R8900 += 1 };
  s4 -> s2 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1, R8804 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R8900 += 1, R8854 += 1 };
  s4 -> s4 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1, R8803 += 1, R8804 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8900 += 1 };
  s5 -> s5 [0, 65535] { R8900 += 1, R8854 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8900 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8900 += 1 };
  s8 -> s8 [0, 65535] { R8900 += 1, R8854 += 1, R8822 += 1 };
  s8 -> s5 [0, 65535] { R8900 += 1, R8854 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8900 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8902 += 1, R8856 += 1, R8824 += 1, R8805 += 1, R8806 += 1 };
  s0 -> s0 [0, 65535] { R8901 += 1, R8902 += 1 };
  s0 -> s2 [0, 65535] { R8902 += 1, R8855 += 1, R8856 += 1 };
  s0 -> s3 [0, 65535] { R8902 += 1, R8856 += 1, R8823 += 1, R8824 += 1 };
  s0 -> s4 [99, 99] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s1 -> s1 [0, 65535] { R8902 += 1, R8856 += 1, R8824 += 1, R8805 += 1, R8806 += 1 };
  s1 -> s4 [99, 99] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s2 -> s1 [0, 65535] { R8902 += 1, R8856 += 1, R8824 += 1, R8805 += 1, R8806 += 1 };
  s2 -> s2 [0, 65535] { R8902 += 1, R8855 += 1, R8856 += 1 };
  s2 -> s3 [0, 65535] { R8902 += 1, R8856 += 1, R8823 += 1, R8824 += 1 };
  s2 -> s4 [99, 99] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s3 -> s1 [0, 65535] { R8902 += 1, R8856 += 1, R8824 += 1, R8805 += 1, R8806 += 1 };
  s3 -> s3 [0, 65535] { R8902 += 1, R8856 += 1, R8823 += 1, R8824 += 1 };
  s3 -> s4 [99, 99] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s4 -> s5 [97, 97] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s5 -> s6 [108, 108] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s6 -> s7 [104, 104] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s7 -> s8 [111, 111] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s8 -> s9 [115, 115] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s9 -> s10 [116, 116] { R8902 += 1, R8856 += 1, R8824 += 1, R8806 += 1 };
  s10 -> s11 [0, 65535] { R8902 += 1 };
  s10 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R8902 += 1, R8856 += 1, R8824 += 1 };
  s10 -> s13 [0, 65535] { R8902 += 1, R8856 += 1 };
  s11 -> s11 [0, 65535] { R8902 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  s13 -> s11 [0, 65535] { R8902 += 1 };
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R8902 += 1, R8856 += 1 };
  accepting s10, s11, s12, s13;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1, R8811 += 1, R8812 += 1 };
  s0 -> s0 [0, 65535] { R8903 += 1, R8904 += 1 };
  s0 -> s2 [0, 65535] { R8904 += 1, R8858 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s3 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1, R8812 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R8904 += 1, R8857 += 1, R8858 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8904 += 1 };
  s1 -> s1 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1, R8811 += 1, R8812 += 1 };
  s1 -> s8 [0, 65535] { R8904 += 1, R8858 += 1 };
  s1 -> s3 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1, R8812 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8904 += 1 };
  s2 -> s1 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1, R8811 += 1, R8812 += 1 };
  s2 -> s2 [0, 65535] { R8904 += 1, R8858 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s3 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1, R8812 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8904 += 1 };
  s3 -> s7 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1 };
  s3 -> s8 [0, 65535] { R8904 += 1, R8858 += 1 };
  s3 -> s3 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1, R8812 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1, R8811 += 1, R8812 += 1 };
  s4 -> s2 [0, 65535] { R8904 += 1, R8858 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s3 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1, R8812 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R8904 += 1, R8857 += 1, R8858 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8904 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8904 += 1 };
  s7 -> s7 [0, 65535] { R8904 += 1, R8858 += 1, R8826 += 1 };
  s7 -> s8 [0, 65535] { R8904 += 1, R8858 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R8904 += 1 };
  s8 -> s8 [0, 65535] { R8904 += 1, R8858 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8906 += 1, R8860 += 1, R8828 += 1 };
  s0 -> s2 [0, 65535] { R8906 += 1, R8860 += 1, R8827 += 1, R8828 += 1 };
  s0 -> s0 [0, 65535] { R8905 += 1, R8906 += 1 };
  s0 -> s3 [0, 65535] { R8906 += 1, R8859 += 1, R8860 += 1 };
  s1 -> s1 [0, 65535] { R8906 += 1, R8860 += 1, R8828 += 1 };
  s1 -> s5 [0, 65535] { R8906 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8906 += 1, R8860 += 1 };
  s2 -> s1 [0, 65535] { R8906 += 1, R8860 += 1, R8828 += 1 };
  s2 -> s5 [0, 65535] { R8906 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8906 += 1, R8860 += 1, R8827 += 1, R8828 += 1 };
  s3 -> s1 [0, 65535] { R8906 += 1, R8860 += 1, R8828 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8906 += 1, R8860 += 1, R8827 += 1, R8828 += 1 };
  s3 -> s3 [0, 65535] { R8906 += 1, R8859 += 1, R8860 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8906 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8906 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8906 += 1, R8860 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R8806 && R2 = R8828 && R3 = R8046 && R4 = R8906 && R15 = 0 && R16 = R8860 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8039 - R8860 = 1 && R8040 = R8046 && R8041 - R8860 = 1 && R8042 = R8046 && R8043 - R8860 = 1 && R8044 = R8046 && R8045 - R8860 = 1 && R8805 = 0 && R8809 = 0 && R8810 = 0 && R8813 = 0 && R8814 = R8828 && R8815 = 0 && R8816 = R8828 && R8817 = 0 && R8818 = R8828 && R8819 = 0 && R8820 = R8828 && R8821 = 0 && R8822 = R8828 && R8823 = 0 && R8824 = R8828 && R8825 = 0 && R8826 = R8828 && R8827 = 0 && R8829 = 0 && R8830 = R8860 && R8831 = 0 && R8832 = R8860 && R8833 = 0 && R8834 = R8860 && R8835 = 0 && R8836 = R8860 && R8837 = 0 && R8838 = R8860 && R8839 = 0 && R8840 = R8860 && R8841 = 0 && R8842 = R8860 && R8843 = 0 && R8844 = R8860 && R8845 = 0 && R8846 = R8860 && R8847 = 0 && R8848 = R8860 && R8849 = 0 && R8850 = R8860 && R8851 = 0 && R8852 = R8860 && R8853 = 0 && R8854 = R8860 && R8855 = 0 && R8856 = R8860 && R8857 = 0 && R8858 = R8860 && R8859 = 0 && R8861 = 10 && R8862 = R8906 && R8863 = 10 && R8864 = R8906 && R8865 = 10 && R8866 = R8906 && R8867 = 10 && R8868 = R8906 && R8869 = 10 && R8870 = R8906 && R8871 = 10 && R8872 = R8906 && R8873 = 10 && R8874 = R8906 && R8875 = 10 && R8876 = R8906 && R8877 = 10 && R8878 = R8906 && R8879 = 10 && R8880 = R8906 && R8881 = 10 && R8882 = R8906 && R8883 = 10 && R8884 = R8906 && R8885 = 10 && R8886 = R8906 && R8887 = 10 && R8888 = R8906 && R8889 = 10 && R8890 = R8906 && R8891 = 10 && R8892 = R8906 && R8893 = 10 && R8894 = R8906 && R8895 = 10 && R8896 = R8906 && R8897 = 10 && R8898 = R8906 && R8899 = 10 && R8900 = R8906 && R8901 = 10 && R8902 = R8906 && R8903 = 10 && R8904 = R8906 && R8905 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R8860 < R8046 && -1 < R8806 && 0 < R8828 && -1 < R8860 && 9 < R8906 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R8801 != 0 || R8802 = R8806 || (R5988 = 0 && R8806 = 0)) && (R8803 != 0 || R8804 = R8806 || (R5988 = 0 && R8806 = 0)) && (R5989 = 0 || (R8811 = 0 && R8812 = 0)) && (R5990 = 0 || (R8807 = 0 && R8808 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R8801 = 0 || (R5988 = 0 && R8806 = 0)) && (R8803 = 0 || (R5988 = 0 && R8806 = 0));
// End of Parikh automata intersection problem
