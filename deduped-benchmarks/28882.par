// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6111, R6112, R6113, R6114, R6115, R6116, R6117, R6118, R6119, R6120, R6121, R6122, R6123, R6124, R6125, R6126, R6127, R6128, R6129, R6130, R6131, R6132, R6133, R6134, R6135, R6136, R6137, R6138, R6139, R6140, R6141, R6142, R6143, R6144, R6145, R6146, R6147, R6148, R6149, R6150, R6151, R6152, R6153, R6154, R6155, R6156, R6157, R6158, R6159, R6160, R6161, R6162, R6163, R6164, R6165, R6166, R6167, R6168, R6169, R6170, R6171, R6172, R6173, R6174, R6175, R6176, R6177, R6178, R6179, R6180, R6181, R6182, R6183, R6184, R6185, R6186, R6187, R6188, R6189, R6190, R6191, R6192, R6193, R6194, R6195, R6196, R6197, R6198, R6199, R6200, R6201, R6202, R6203, R6204, R6205, R6206, R6207, R6208, R6209, R6210, R6211, R6212, R6213, R6214, R6215, R6216, R7;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R6172 += 1 };
  s0 -> s0 [0, 65535] { R6171 += 1, R6172 += 1 };
  s0 -> s2 [46, 46] { R6172 += 1 };
  s0 -> s3 [47, 47] { R6172 += 1 };
  s0 -> s1 [48, 65535] { R6172 += 1 };
  s1 -> s1 [0, 45] { R6172 += 1 };
  s1 -> s2 [46, 46] { R6172 += 1 };
  s1 -> s3 [47, 47] { R6172 += 1 };
  s1 -> s1 [48, 65535] { R6172 += 1 };
  s2 -> s1 [0, 45] { R6172 += 1 };
  s2 -> s2 [46, 46] { R6172 += 1 };
  s2 -> s3 [47, 47] { R6172 += 1 };
  s2 -> s1 [48, 114] { R6172 += 1 };
  s2 -> s8 [115, 115] { R6172 += 1 };
  s2 -> s1 [116, 65535] { R6172 += 1 };
  s3 -> s3 [0, 45] { R6172 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R6172 += 1 };
  s3 -> s3 [47, 65535] { R6172 += 1 };
  s4 -> s3 [0, 45] { R6172 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R6172 += 1 };
  s4 -> s3 [47, 114] { R6172 += 1 };
  s4 -> s5 [115, 115] { R6172 += 1 };
  s4 -> s3 [116, 65535] { R6172 += 1 };
  s5 -> s3 [0, 45] { R6172 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R6172 += 1 };
  s5 -> s3 [47, 110] { R6172 += 1 };
  s5 -> s6 [111, 111] { R6172 += 1 };
  s5 -> s3 [112, 65535] { R6172 += 1 };
  s6 -> s3 [0, 45] { R6172 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R6172 += 1 };
  s6 -> s3 [47, 98] { R6172 += 1 };
  s6 -> s7 [99, 99] { R6172 += 1 };
  s6 -> s3 [100, 65535] { R6172 += 1 };
  s7 -> s3 [0, 45] { R6172 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R6172 += 1 };
  s7 -> s3 [47, 106] { R6172 += 1 };
  s7 -> s3 [108, 65535] { R6172 += 1 };
  s8 -> s1 [0, 45] { R6172 += 1 };
  s8 -> s2 [46, 46] { R6172 += 1 };
  s8 -> s3 [47, 47] { R6172 += 1 };
  s8 -> s1 [48, 110] { R6172 += 1 };
  s8 -> s9 [111, 111] { R6172 += 1 };
  s8 -> s1 [112, 65535] { R6172 += 1 };
  s9 -> s1 [0, 45] { R6172 += 1 };
  s9 -> s2 [46, 46] { R6172 += 1 };
  s9 -> s3 [47, 47] { R6172 += 1 };
  s9 -> s1 [48, 98] { R6172 += 1 };
  s9 -> s10 [99, 99] { R6172 += 1 };
  s9 -> s1 [100, 65535] { R6172 += 1 };
  s10 -> s1 [0, 45] { R6172 += 1 };
  s10 -> s2 [46, 46] { R6172 += 1 };
  s10 -> s3 [47, 47] { R6172 += 1 };
  s10 -> s1 [48, 106] { R6172 += 1 };
  s10 -> s1 [108, 65535] { R6172 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R6174 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R6173 += 1, R6174 += 1 };
  s1 -> s1 [0, 65535] { R6174 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R6176 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R6175 += 1, R6176 += 1 };
  s0 -> s2 [0, 65535] { R6176 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R6176 += 1 };
  s0 -> s1 [48, 65535] { R6176 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R6176 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R6176 += 1 };
  s1 -> s1 [48, 65535] { R6176 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R6176 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R6176 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R6176 += 1 };
  s2 -> s1 [48, 65535] { R6176 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6176 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R6178 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R6177 += 1, R6178 += 1 };
  s0 -> s2 [0, 65535] { R6178 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s1 [38, 42] { R6178 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R6178 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R6178 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R6178 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R6178 += 1, R6000 += 1 };
  s1 -> s1 [0, 65535] { R6178 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R6178 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R6178 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R6178 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R6178 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R6178 += 1, R6000 += 1 };
  s2 -> s2 [0, 65535] { R6178 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R6178 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R6178 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R6178 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R6178 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R6179 += 1, R6180 += 1 };
  s0 -> s1 [0, 65535] { R6180 += 1, R6001 += 1, R6002 += 1 };
  s0 -> s2 [0, 65535] { R6180 += 1, R6002 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R6180 += 1, R6001 += 1, R6002 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6180 += 1, R6002 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R6180 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6180 += 1, R6002 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R6180 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R6182 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R6182 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s0 [0, 65535] { R6181 += 1, R6182 += 1 };
  s0 -> s4 [63, 63] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R6182 += 1 };
  s1 -> s7 [0, 65535] { R6182 += 1, R6004 += 1 };
  s2 -> s1 [0, 62] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R6182 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6182 += 1 };
  s2 -> s4 [63, 63] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R6182 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6182 += 1, R6003 += 1, R6004 += 1 };
  s3 -> s4 [63, 63] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R6182 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6182 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6182 += 1 };
  s7 -> s7 [0, 65535] { R6182 += 1, R6004 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6184 += 1, R6005 += 1, R6006 += 1 };
  s0 -> s2 [0, 65535] { R6184 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R6183 += 1, R6184 += 1 };
  s0 -> s3 [0, 65535] { R6184 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6184 += 1, R6005 += 1, R6006 += 1 };
  s1 -> s2 [0, 65535] { R6184 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s3 [0, 65535] { R6184 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6184 += 1 };
  s2 -> s2 [0, 65535] { R6184 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s3 [0, 65535] { R6184 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6184 += 1 };
  s3 -> s6 [0, 65535] { R6184 += 1, R6006 += 1 };
  s3 -> s3 [0, 65535] { R6184 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6184 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6184 += 1 };
  s6 -> s6 [0, 65535] { R6184 += 1, R6006 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R6186 += 1, R6140 += 1 };
  s0 -> s0 [0, 65535] { R6185 += 1, R6186 += 1 };
  s0 -> s2 [0, 65535] { R6186 += 1, R6139 += 1, R6140 += 1 };
  s0 -> s1 [45, 63] { R6186 += 1, R6140 += 1 };
  s0 -> s3 [88, 88] { R6186 += 1, R6140 += 1 };
  s0 -> s1 [89, 65535] { R6186 += 1, R6140 += 1 };
  s1 -> s1 [0, 43] { R6186 += 1, R6140 += 1 };
  s1 -> s1 [45, 63] { R6186 += 1, R6140 += 1 };
  s1 -> s3 [88, 88] { R6186 += 1, R6140 += 1 };
  s1 -> s1 [89, 65535] { R6186 += 1, R6140 += 1 };
  s2 -> s1 [0, 43] { R6186 += 1, R6140 += 1 };
  s2 -> s2 [0, 65535] { R6186 += 1, R6139 += 1, R6140 += 1 };
  s2 -> s1 [45, 63] { R6186 += 1, R6140 += 1 };
  s2 -> s3 [88, 88] { R6186 += 1, R6140 += 1 };
  s2 -> s1 [89, 65535] { R6186 += 1, R6140 += 1 };
  s3 -> s3 [0, 43] { R6186 += 1, R6140 += 1 };
  s3 -> s3 [0, 65535] { R6186 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R6186 += 1, R6140 += 1 };
  s3 -> s3 [88, 65535] { R6186 += 1, R6140 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R6187 += 1, R6188 += 1 };
  s0 -> s1 [0, 65535] { R6188 += 1, R6142 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R6188 += 1, R6141 += 1, R6142 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6188 += 1 };
  s1 -> s1 [0, 65535] { R6188 += 1, R6142 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6188 += 1, R6142 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R6188 += 1, R6141 += 1, R6142 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6188 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R6190 += 1, R6144 += 1 };
  s0 -> s2 [0, 65535] { R6190 += 1, R6143 += 1, R6144 += 1 };
  s0 -> s0 [0, 65535] { R6189 += 1, R6190 += 1 };
  s0 -> s3 [0, 65535] { R6190 += 1, R6144 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R6190 += 1, R6144 += 1 };
  s0 -> s1 [59, 65535] { R6190 += 1, R6144 += 1 };
  s1 -> s1 [0, 57] { R6190 += 1, R6144 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6190 += 1 };
  s1 -> s4 [58, 58] { R6190 += 1, R6144 += 1 };
  s1 -> s1 [59, 65535] { R6190 += 1, R6144 += 1 };
  s2 -> s1 [0, 57] { R6190 += 1, R6144 += 1 };
  s2 -> s2 [0, 65535] { R6190 += 1, R6143 += 1, R6144 += 1 };
  s2 -> s3 [0, 65535] { R6190 += 1, R6144 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R6190 += 1, R6144 += 1 };
  s2 -> s1 [59, 65535] { R6190 += 1, R6144 += 1 };
  s3 -> s1 [0, 57] { R6190 += 1, R6144 += 1 };
  s3 -> s3 [0, 65535] { R6190 += 1, R6144 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6190 += 1 };
  s3 -> s4 [58, 58] { R6190 += 1, R6144 += 1 };
  s3 -> s1 [59, 65535] { R6190 += 1, R6144 += 1 };
  s4 -> s4 [0, 65535] { R6190 += 1, R6144 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6190 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R6192 += 1, R6146 += 1 };
  s0 -> s0 [0, 65535] { R6191 += 1, R6192 += 1 };
  s0 -> s2 [0, 65535] { R6192 += 1, R6145 += 1, R6146 += 1 };
  s0 -> s3 [0, 65535] { R6192 += 1, R6146 += 1, R11 += 1 };
  s0 -> s4 [88, 88] { R6192 += 1, R6146 += 1 };
  s0 -> s1 [89, 65535] { R6192 += 1, R6146 += 1 };
  s1 -> s1 [0, 87] { R6192 += 1, R6146 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6192 += 1 };
  s1 -> s4 [88, 88] { R6192 += 1, R6146 += 1 };
  s1 -> s1 [89, 65535] { R6192 += 1, R6146 += 1 };
  s2 -> s1 [0, 87] { R6192 += 1, R6146 += 1 };
  s2 -> s2 [0, 65535] { R6192 += 1, R6145 += 1, R6146 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6192 += 1, R6146 += 1, R11 += 1 };
  s2 -> s4 [88, 88] { R6192 += 1, R6146 += 1 };
  s2 -> s1 [89, 65535] { R6192 += 1, R6146 += 1 };
  s3 -> s1 [0, 87] { R6192 += 1, R6146 += 1 };
  s3 -> s5 [0, 65535] { R6192 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6192 += 1, R6146 += 1, R11 += 1 };
  s3 -> s4 [88, 88] { R6192 += 1, R6146 += 1 };
  s3 -> s1 [89, 65535] { R6192 += 1, R6146 += 1 };
  s4 -> s4 [0, 65535] { R6192 += 1, R6146 += 1 };
  s5 -> s5 [0, 65535] { R6192 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R6193 += 1, R6194 += 1 };
  s0 -> s2 [0, 65535] { R6194 += 1, R6148 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R6194 += 1, R6147 += 1, R6148 += 1 };
  s0 -> s4 [91, 91] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R6194 += 1, R6148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6194 += 1 };
  s1 -> s1 [0, 65535] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6194 += 1 };
  s2 -> s2 [0, 65535] { R6194 += 1, R6148 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6194 += 1, R6148 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R6194 += 1, R6147 += 1, R6148 += 1 };
  s3 -> s4 [91, 91] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R6194 += 1, R6148 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6194 += 1 };
  s7 -> s7 [0, 65535] { R6194 += 1, R6148 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6194 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R6196 += 1, R6150 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R6195 += 1, R6196 += 1 };
  s0 -> s2 [0, 65535] { R6196 += 1, R6149 += 1, R6150 += 1 };
  s0 -> s3 [0, 65535] { R6196 += 1, R6150 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6196 += 1 };
  s1 -> s1 [0, 65535] { R6196 += 1, R6150 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R6196 += 1, R6150 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R6196 += 1, R6150 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R6196 += 1, R6149 += 1, R6150 += 1 };
  s2 -> s3 [0, 65535] { R6196 += 1, R6150 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6196 += 1 };
  s3 -> s1 [0, 65535] { R6196 += 1, R6150 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R6196 += 1, R6150 += 1, R5997 += 1, R5998 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6196 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6196 += 1 };
  s6 -> s6 [0, 65535] { R6196 += 1, R6150 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R6197 += 1, R6198 += 1 };
  s0 -> s1 [0, 65535] { R6198 += 1, R6151 += 1, R6152 += 1 };
  s0 -> s2 [0, 65535] { R6198 += 1, R6152 += 1, R6118 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R6198 += 1, R6152 += 1, R6117 += 1, R6118 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6198 += 1, R6151 += 1, R6152 += 1 };
  s1 -> s2 [0, 65535] { R6198 += 1, R6152 += 1, R6118 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R6198 += 1, R6152 += 1, R6117 += 1, R6118 += 1 };
  s2 -> s4 [0, 65535] { R6198 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6198 += 1, R6152 += 1 };
  s2 -> s2 [0, 65535] { R6198 += 1, R6152 += 1, R6118 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R6198 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6198 += 1, R6152 += 1, R6118 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R6198 += 1, R6152 += 1, R6117 += 1, R6118 += 1 };
  s4 -> s4 [0, 65535] { R6198 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6198 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6198 += 1, R6152 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R6200 += 1, R6154 += 1 };
  s0 -> s2 [0, 65535] { R6200 += 1, R6153 += 1, R6154 += 1 };
  s0 -> s0 [0, 65535] { R6199 += 1, R6200 += 1 };
  s1 -> s1 [0, 65535] { R6200 += 1, R6154 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6200 += 1 };
  s2 -> s1 [0, 65535] { R6200 += 1, R6154 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6200 += 1, R6153 += 1, R6154 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6200 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s0 -> s2 [0, 65535] { R6202 += 1, R6156 += 1, R6123 += 1, R6124 += 1 };
  s0 -> s3 [0, 65535] { R6202 += 1, R6155 += 1, R6156 += 1 };
  s0 -> s0 [0, 65535] { R6201 += 1, R6202 += 1 };
  s0 -> s4 [88, 88] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s0 -> s1 [89, 65535] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s1 -> s1 [0, 87] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s1 -> s4 [88, 88] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s1 -> s1 [89, 65535] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s2 -> s1 [0, 87] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s2 -> s2 [0, 65535] { R6202 += 1, R6156 += 1, R6123 += 1, R6124 += 1 };
  s2 -> s4 [88, 88] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s2 -> s1 [89, 65535] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s3 -> s1 [0, 87] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s3 -> s2 [0, 65535] { R6202 += 1, R6156 += 1, R6123 += 1, R6124 += 1 };
  s3 -> s3 [0, 65535] { R6202 += 1, R6155 += 1, R6156 += 1 };
  s3 -> s4 [88, 88] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s3 -> s1 [89, 65535] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s4 -> s5 [0, 65535] { R6202 += 1, R6156 += 1 };
  s4 -> s4 [0, 65535] { R6202 += 1, R6156 += 1, R6124 += 1 };
  s4 -> s6 [0, 65535] { R6202 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R6202 += 1, R6156 += 1 };
  s5 -> s6 [0, 65535] { R6202 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R6202 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6204 += 1, R6158 += 1, R6126 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6203 += 1, R6204 += 1 };
  s0 -> s2 [0, 65535] { R6204 += 1, R6157 += 1, R6158 += 1 };
  s0 -> s3 [0, 65535] { R6204 += 1, R6158 += 1, R6125 += 1, R6126 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6204 += 1, R6158 += 1, R6126 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R6204 += 1, R6158 += 1 };
  s1 -> s5 [0, 65535] { R6204 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R6204 += 1, R6158 += 1, R6126 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R6204 += 1, R6157 += 1, R6158 += 1 };
  s2 -> s3 [0, 65535] { R6204 += 1, R6158 += 1, R6125 += 1, R6126 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6204 += 1, R6158 += 1, R6126 += 1, R1 += 1 };
  s3 -> s5 [0, 65535] { R6204 += 1 };
  s3 -> s3 [0, 65535] { R6204 += 1, R6158 += 1, R6125 += 1, R6126 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6204 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6204 += 1, R6158 += 1 };
  s6 -> s5 [0, 65535] { R6204 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s0 -> s2 [0, 65535] { R6206 += 1, R6159 += 1, R6160 += 1 };
  s0 -> s3 [0, 65535] { R6206 += 1, R6160 += 1, R6127 += 1, R6128 += 1 };
  s0 -> s0 [0, 65535] { R6205 += 1, R6206 += 1 };
  s0 -> s4 [0, 65535] { R6206 += 1, R6160 += 1, R6128 += 1, R7 += 1 };
  s0 -> s5 [88, 88] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s0 -> s1 [89, 65535] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s1 -> s1 [0, 87] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s1 -> s6 [0, 65535] { R6206 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R6206 += 1, R6160 += 1 };
  s1 -> s5 [88, 88] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s1 -> s1 [89, 65535] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s2 -> s1 [0, 87] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R6206 += 1, R6159 += 1, R6160 += 1 };
  s2 -> s3 [0, 65535] { R6206 += 1, R6160 += 1, R6127 += 1, R6128 += 1 };
  s2 -> s4 [0, 65535] { R6206 += 1, R6160 += 1, R6128 += 1, R7 += 1 };
  s2 -> s5 [88, 88] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s2 -> s1 [89, 65535] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s3 -> s1 [0, 87] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s3 -> s6 [0, 65535] { R6206 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R6206 += 1, R6160 += 1, R6127 += 1, R6128 += 1 };
  s3 -> s4 [0, 65535] { R6206 += 1, R6160 += 1, R6128 += 1, R7 += 1 };
  s3 -> s5 [88, 88] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s3 -> s1 [89, 65535] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s4 -> s1 [0, 87] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s4 -> s6 [0, 65535] { R6206 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R6206 += 1, R6160 += 1 };
  s4 -> s4 [0, 65535] { R6206 += 1, R6160 += 1, R6128 += 1, R7 += 1 };
  s4 -> s5 [88, 88] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s4 -> s1 [89, 65535] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s5 -> s5 [0, 65535] { R6206 += 1, R6160 += 1, R6128 += 1 };
  s6 -> s6 [0, 65535] { R6206 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R6206 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R6206 += 1, R6160 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s0 -> s2 [0, 65535] { R6208 += 1, R6162 += 1, R6130 += 1, R6111 += 1, R6112 += 1 };
  s0 -> s3 [0, 65535] { R6208 += 1, R6162 += 1, R6129 += 1, R6130 += 1 };
  s0 -> s4 [0, 65535] { R6208 += 1, R6161 += 1, R6162 += 1 };
  s0 -> s0 [0, 65535] { R6207 += 1, R6208 += 1 };
  s0 -> s1 [89, 65535] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s1 -> s1 [0, 87] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R6208 += 1, R6162 += 1 };
  s1 -> s1 [0, 65535] { R6208 += 1, R6162 += 1, R6130 += 1 };
  s1 -> s6 [0, 65535] { R6208 += 1 };
  s1 -> s1 [89, 65535] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s2 -> s1 [0, 87] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6208 += 1, R6162 += 1, R6130 += 1, R6111 += 1, R6112 += 1 };
  s2 -> s7 [0, 65535] { R6208 += 1, R6162 += 1 };
  s2 -> s6 [0, 65535] { R6208 += 1 };
  s2 -> s1 [89, 65535] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s3 -> s1 [0, 87] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6208 += 1, R6162 += 1, R6130 += 1, R6111 += 1, R6112 += 1 };
  s3 -> s3 [0, 65535] { R6208 += 1, R6162 += 1, R6129 += 1, R6130 += 1 };
  s3 -> s6 [0, 65535] { R6208 += 1 };
  s3 -> s1 [89, 65535] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s4 -> s1 [0, 87] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R6208 += 1, R6162 += 1, R6130 += 1, R6111 += 1, R6112 += 1 };
  s4 -> s3 [0, 65535] { R6208 += 1, R6162 += 1, R6129 += 1, R6130 += 1 };
  s4 -> s4 [0, 65535] { R6208 += 1, R6161 += 1, R6162 += 1 };
  s4 -> s1 [89, 65535] { R6208 += 1, R6162 += 1, R6130 += 1, R6112 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6208 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6208 += 1, R6162 += 1 };
  s7 -> s6 [0, 65535] { R6208 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6210 += 1, R6163 += 1, R6164 += 1 };
  s0 -> s2 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1, R6113 += 1, R6114 += 1 };
  s0 -> s0 [0, 65535] { R6209 += 1, R6210 += 1 };
  s0 -> s3 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1, R6114 += 1, R5988 += 1 };
  s0 -> s4 [0, 65535] { R6210 += 1, R6164 += 1, R6131 += 1, R6132 += 1 };
  s1 -> s1 [0, 65535] { R6210 += 1, R6163 += 1, R6164 += 1 };
  s1 -> s2 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1, R6113 += 1, R6114 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1, R6114 += 1, R5988 += 1 };
  s1 -> s4 [0, 65535] { R6210 += 1, R6164 += 1, R6131 += 1, R6132 += 1 };
  s2 -> s7 [0, 65535] { R6210 += 1, R6164 += 1 };
  s2 -> s2 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1, R6113 += 1, R6114 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1, R6114 += 1, R5988 += 1 };
  s2 -> s6 [0, 65535] { R6210 += 1 };
  s3 -> s7 [0, 65535] { R6210 += 1, R6164 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1, R6114 += 1, R5988 += 1 };
  s3 -> s6 [0, 65535] { R6210 += 1 };
  s3 -> s8 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1 };
  s4 -> s2 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1, R6113 += 1, R6114 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1, R6114 += 1, R5988 += 1 };
  s4 -> s6 [0, 65535] { R6210 += 1 };
  s4 -> s4 [0, 65535] { R6210 += 1, R6164 += 1, R6131 += 1, R6132 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6210 += 1 };
  s7 -> s7 [0, 65535] { R6210 += 1, R6164 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6210 += 1 };
  s8 -> s7 [0, 65535] { R6210 += 1, R6164 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R6210 += 1 };
  s8 -> s8 [0, 65535] { R6210 += 1, R6164 += 1, R6132 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R6212 += 1, R6166 += 1, R6134 += 1, R6115 += 1, R6116 += 1 };
  s0 -> s2 [0, 65535] { R6212 += 1, R6166 += 1, R6133 += 1, R6134 += 1 };
  s0 -> s3 [0, 65535] { R6212 += 1, R6165 += 1, R6166 += 1 };
  s0 -> s0 [0, 65535] { R6211 += 1, R6212 += 1 };
  s0 -> s4 [116, 116] { R6212 += 1, R6166 += 1, R6134 += 1, R6116 += 1 };
  s1 -> s1 [0, 65535] { R6212 += 1, R6166 += 1, R6134 += 1, R6115 += 1, R6116 += 1 };
  s1 -> s4 [116, 116] { R6212 += 1, R6166 += 1, R6134 += 1, R6116 += 1 };
  s2 -> s1 [0, 65535] { R6212 += 1, R6166 += 1, R6134 += 1, R6115 += 1, R6116 += 1 };
  s2 -> s2 [0, 65535] { R6212 += 1, R6166 += 1, R6133 += 1, R6134 += 1 };
  s2 -> s4 [116, 116] { R6212 += 1, R6166 += 1, R6134 += 1, R6116 += 1 };
  s3 -> s1 [0, 65535] { R6212 += 1, R6166 += 1, R6134 += 1, R6115 += 1, R6116 += 1 };
  s3 -> s2 [0, 65535] { R6212 += 1, R6166 += 1, R6133 += 1, R6134 += 1 };
  s3 -> s3 [0, 65535] { R6212 += 1, R6165 += 1, R6166 += 1 };
  s3 -> s4 [116, 116] { R6212 += 1, R6166 += 1, R6134 += 1, R6116 += 1 };
  s4 -> s5 [0, 65535] { R6212 += 1, R6166 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6212 += 1, R6166 += 1, R6134 += 1 };
  s4 -> s7 [0, 65535] { R6212 += 1 };
  s5 -> s5 [0, 65535] { R6212 += 1, R6166 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6212 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6212 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6214 += 1, R6168 += 1, R6135 += 1, R6136 += 1 };
  s0 -> s2 [0, 65535] { R6214 += 1, R6167 += 1, R6168 += 1 };
  s0 -> s3 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1, R6120 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R6213 += 1, R6214 += 1 };
  s0 -> s4 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1, R6119 += 1, R6120 += 1 };
  s1 -> s1 [0, 65535] { R6214 += 1, R6168 += 1, R6135 += 1, R6136 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1, R6120 += 1, R5989 += 1 };
  s1 -> s7 [0, 65535] { R6214 += 1 };
  s1 -> s4 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1, R6119 += 1, R6120 += 1 };
  s2 -> s1 [0, 65535] { R6214 += 1, R6168 += 1, R6135 += 1, R6136 += 1 };
  s2 -> s2 [0, 65535] { R6214 += 1, R6167 += 1, R6168 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1, R6120 += 1, R5989 += 1 };
  s2 -> s4 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1, R6119 += 1, R6120 += 1 };
  s3 -> s5 [0, 65535] { R6214 += 1, R6168 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1, R6120 += 1, R5989 += 1 };
  s3 -> s7 [0, 65535] { R6214 += 1 };
  s3 -> s8 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1 };
  s4 -> s5 [0, 65535] { R6214 += 1, R6168 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1, R6120 += 1, R5989 += 1 };
  s4 -> s7 [0, 65535] { R6214 += 1 };
  s4 -> s4 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1, R6119 += 1, R6120 += 1 };
  s5 -> s5 [0, 65535] { R6214 += 1, R6168 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6214 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6214 += 1 };
  s8 -> s5 [0, 65535] { R6214 += 1, R6168 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R6214 += 1 };
  s8 -> s8 [0, 65535] { R6214 += 1, R6168 += 1, R6136 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6216 += 1, R6170 += 1, R6138 += 1, R6121 += 1, R6122 += 1 };
  s0 -> s2 [0, 65535] { R6216 += 1, R6169 += 1, R6170 += 1 };
  s0 -> s0 [0, 65535] { R6215 += 1, R6216 += 1 };
  s0 -> s3 [0, 65535] { R6216 += 1, R6170 += 1, R6137 += 1, R6138 += 1 };
  s0 -> s4 [108, 108] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s1 -> s1 [0, 65535] { R6216 += 1, R6170 += 1, R6138 += 1, R6121 += 1, R6122 += 1 };
  s1 -> s4 [108, 108] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s2 -> s1 [0, 65535] { R6216 += 1, R6170 += 1, R6138 += 1, R6121 += 1, R6122 += 1 };
  s2 -> s2 [0, 65535] { R6216 += 1, R6169 += 1, R6170 += 1 };
  s2 -> s3 [0, 65535] { R6216 += 1, R6170 += 1, R6137 += 1, R6138 += 1 };
  s2 -> s4 [108, 108] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s3 -> s1 [0, 65535] { R6216 += 1, R6170 += 1, R6138 += 1, R6121 += 1, R6122 += 1 };
  s3 -> s3 [0, 65535] { R6216 += 1, R6170 += 1, R6137 += 1, R6138 += 1 };
  s3 -> s4 [108, 108] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s4 -> s5 [111, 111] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s5 -> s6 [99, 99] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s6 -> s7 [97, 97] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s7 -> s8 [108, 108] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s8 -> s9 [104, 104] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s9 -> s10 [111, 111] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s10 -> s11 [115, 115] { R6216 += 1, R6170 += 1, R6138 += 1, R6122 += 1 };
  s11 -> s11 [0, 65535] { R6216 += 1, R6170 += 1, R6138 += 1 };
  s11 -> s12 [0, 65535] { R6216 += 1, R6170 += 1 };
  s11 -> s13 [0, 65535];
  s11 -> s14 [0, 65535] { R6216 += 1 };
  s12 -> s12 [0, 65535] { R6216 += 1, R6170 += 1 };
  s12 -> s13 [0, 65535];
  s12 -> s14 [0, 65535] { R6216 += 1 };
  s13 -> s13 [0, 65535];
  s14 -> s13 [0, 65535];
  s14 -> s14 [0, 65535] { R6216 += 1 };
  accepting s11, s12, s13, s14;
};
};
constraint R1 = R6116 && R2 = R6138 && R3 = R6006 && R4 = R6216 && R15 = 0 && R16 = R6170 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R6170 = 1 && R6000 = R6006 && R6001 - R6170 = 1 && R6002 = R6006 && R6003 - R6170 = 1 && R6004 = R6006 && R6005 - R6170 = 1 && R6115 = 0 && R6121 = 0 && R6122 = 0 && R6123 = 0 && R6124 = R6138 && R6125 = 0 && R6126 = R6138 && R6127 = 0 && R6128 = R6138 && R6129 = 0 && R6130 = R6138 && R6131 = 0 && R6132 = R6138 && R6133 = 0 && R6134 = R6138 && R6135 = 0 && R6136 = R6138 && R6137 = 0 && R6139 = 0 && R6140 = R6170 && R6141 = 0 && R6142 = R6170 && R6143 = 0 && R6144 = R6170 && R6145 = 0 && R6146 = R6170 && R6147 = 0 && R6148 = R6170 && R6149 = 0 && R6150 = R6170 && R6151 = 0 && R6152 = R6170 && R6153 = 0 && R6154 = R6170 && R6155 = 0 && R6156 = R6170 && R6157 = 0 && R6158 = R6170 && R6159 = 0 && R6160 = R6170 && R6161 = 0 && R6162 = R6170 && R6163 = 0 && R6164 = R6170 && R6165 = 0 && R6166 = R6170 && R6167 = 0 && R6168 = R6170 && R6169 = 0 && R6171 = 10 && R6172 = R6216 && R6173 = 10 && R6174 = R6216 && R6175 = 10 && R6176 = R6216 && R6177 = 10 && R6178 = R6216 && R6179 = 10 && R6180 = R6216 && R6181 = 10 && R6182 = R6216 && R6183 = 10 && R6184 = R6216 && R6185 = 10 && R6186 = R6216 && R6187 = 10 && R6188 = R6216 && R6189 = 10 && R6190 = R6216 && R6191 = 10 && R6192 = R6216 && R6193 = 10 && R6194 = R6216 && R6195 = 10 && R6196 = R6216 && R6197 = 10 && R6198 = R6216 && R6199 = 10 && R6200 = R6216 && R6201 = 10 && R6202 = R6216 && R6203 = 10 && R6204 = R6216 && R6205 = 10 && R6206 = R6216 && R6207 = 10 && R6208 = R6216 && R6209 = 10 && R6210 = R6216 && R6211 = 10 && R6212 = R6216 && R6213 = 10 && R6214 = R6216 && R6215 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R6170 < R6006 && -1 < R6116 && 0 < R6138 && -1 < R6170 && 9 < R6216 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R6111 != 0 || R6112 = R6116 || (R5988 = 0 && R6116 = 0)) && (R6113 != 0 || R6114 = R6116 || (R5988 = 0 && R6116 = 0)) && (R5989 = 0 || (R6119 = 0 && R6120 = 0)) && (R5990 = 0 || (R6117 = 0 && R6118 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R6111 = 0 || (R5988 = 0 && R6116 = 0)) && (R6113 = 0 || (R5988 = 0 && R6116 = 0));
// End of Parikh automata intersection problem
