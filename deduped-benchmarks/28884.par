// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8693, R8694, R8695, R8696, R8697, R8698, R8699, R8700, R8701, R8702, R8703, R8704, R8705, R8706, R8707, R8708, R8709, R8710, R8711, R8712, R8713, R8714, R8715, R8716, R8717, R8718, R8719, R8720, R8721, R8722, R8723, R8724, R8725, R8726, R8727, R8728, R8729, R8730, R8731, R8732, R8733, R8734, R8735, R8736, R8737, R8738, R8739, R8740, R8741, R8742, R8743, R8744, R8745, R8746, R8747, R8748, R8749, R8750, R8751, R8752, R8753, R8754, R8755, R8756, R8757, R8758, R8759, R8760, R8761, R8762, R8763, R8764, R8765, R8766, R8767, R8768, R8769, R8770, R8771, R8772, R8773, R8774, R8775, R8776, R8777, R8778, R8779, R8780, R8781, R8782, R8783, R8784, R8785, R8786, R8787, R8788, R8789, R8790, R8791, R8792, R8793, R8794, R8795, R8796, R8797, R8798, R8799, R8800;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R8756 += 1 };
  s0 -> s0 [0, 65535] { R8755 += 1, R8756 += 1 };
  s0 -> s2 [46, 46] { R8756 += 1 };
  s0 -> s3 [47, 47] { R8756 += 1 };
  s0 -> s1 [48, 65535] { R8756 += 1 };
  s1 -> s1 [0, 45] { R8756 += 1 };
  s1 -> s2 [46, 46] { R8756 += 1 };
  s1 -> s3 [47, 47] { R8756 += 1 };
  s1 -> s1 [48, 65535] { R8756 += 1 };
  s2 -> s1 [0, 45] { R8756 += 1 };
  s2 -> s2 [46, 46] { R8756 += 1 };
  s2 -> s3 [47, 47] { R8756 += 1 };
  s2 -> s1 [48, 114] { R8756 += 1 };
  s2 -> s8 [115, 115] { R8756 += 1 };
  s2 -> s1 [116, 65535] { R8756 += 1 };
  s3 -> s3 [0, 45] { R8756 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R8756 += 1 };
  s3 -> s3 [47, 65535] { R8756 += 1 };
  s4 -> s3 [0, 45] { R8756 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R8756 += 1 };
  s4 -> s3 [47, 114] { R8756 += 1 };
  s4 -> s5 [115, 115] { R8756 += 1 };
  s4 -> s3 [116, 65535] { R8756 += 1 };
  s5 -> s3 [0, 45] { R8756 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R8756 += 1 };
  s5 -> s3 [47, 110] { R8756 += 1 };
  s5 -> s6 [111, 111] { R8756 += 1 };
  s5 -> s3 [112, 65535] { R8756 += 1 };
  s6 -> s3 [0, 45] { R8756 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R8756 += 1 };
  s6 -> s3 [47, 98] { R8756 += 1 };
  s6 -> s7 [99, 99] { R8756 += 1 };
  s6 -> s3 [100, 65535] { R8756 += 1 };
  s7 -> s3 [0, 45] { R8756 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R8756 += 1 };
  s7 -> s3 [47, 106] { R8756 += 1 };
  s7 -> s3 [108, 65535] { R8756 += 1 };
  s8 -> s1 [0, 45] { R8756 += 1 };
  s8 -> s2 [46, 46] { R8756 += 1 };
  s8 -> s3 [47, 47] { R8756 += 1 };
  s8 -> s1 [48, 110] { R8756 += 1 };
  s8 -> s9 [111, 111] { R8756 += 1 };
  s8 -> s1 [112, 65535] { R8756 += 1 };
  s9 -> s1 [0, 45] { R8756 += 1 };
  s9 -> s2 [46, 46] { R8756 += 1 };
  s9 -> s3 [47, 47] { R8756 += 1 };
  s9 -> s1 [48, 98] { R8756 += 1 };
  s9 -> s10 [99, 99] { R8756 += 1 };
  s9 -> s1 [100, 65535] { R8756 += 1 };
  s10 -> s1 [0, 45] { R8756 += 1 };
  s10 -> s2 [46, 46] { R8756 += 1 };
  s10 -> s3 [47, 47] { R8756 += 1 };
  s10 -> s1 [48, 106] { R8756 += 1 };
  s10 -> s1 [108, 65535] { R8756 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R8758 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R8757 += 1, R8758 += 1 };
  s1 -> s1 [0, 65535] { R8758 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R8760 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8759 += 1, R8760 += 1 };
  s0 -> s2 [0, 65535] { R8760 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R8760 += 1 };
  s0 -> s1 [48, 65535] { R8760 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R8760 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R8760 += 1 };
  s1 -> s1 [48, 65535] { R8760 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R8760 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R8760 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R8760 += 1 };
  s2 -> s1 [48, 65535] { R8760 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R8760 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8762 += 1, R8040 += 1 };
  s0 -> s0 [0, 65535] { R8761 += 1, R8762 += 1 };
  s0 -> s2 [0, 65535] { R8762 += 1, R8039 += 1, R8040 += 1 };
  s0 -> s1 [38, 42] { R8762 += 1, R8040 += 1 };
  s0 -> s1 [44, 45] { R8762 += 1, R8040 += 1 };
  s0 -> s1 [47, 62] { R8762 += 1, R8040 += 1 };
  s0 -> s1 [64, 65535] { R8762 += 1, R8040 += 1 };
  s1 -> s1 [0, 36] { R8762 += 1, R8040 += 1 };
  s1 -> s1 [0, 65535] { R8762 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R8762 += 1, R8040 += 1 };
  s1 -> s1 [44, 45] { R8762 += 1, R8040 += 1 };
  s1 -> s1 [47, 62] { R8762 += 1, R8040 += 1 };
  s1 -> s1 [64, 65535] { R8762 += 1, R8040 += 1 };
  s2 -> s1 [0, 36] { R8762 += 1, R8040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8762 += 1, R8039 += 1, R8040 += 1 };
  s2 -> s1 [38, 42] { R8762 += 1, R8040 += 1 };
  s2 -> s1 [44, 45] { R8762 += 1, R8040 += 1 };
  s2 -> s1 [47, 62] { R8762 += 1, R8040 += 1 };
  s2 -> s1 [64, 65535] { R8762 += 1, R8040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R8764 += 1, R8042 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R8763 += 1, R8764 += 1 };
  s0 -> s2 [0, 65535] { R8764 += 1, R8041 += 1, R8042 += 1 };
  s1 -> s4 [0, 65535] { R8764 += 1 };
  s1 -> s1 [0, 65535] { R8764 += 1, R8042 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8764 += 1, R8042 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R8764 += 1, R8041 += 1, R8042 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8764 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R8766 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R8765 += 1, R8766 += 1 };
  s0 -> s3 [0, 65535] { R8766 += 1, R8043 += 1, R8044 += 1 };
  s0 -> s4 [63, 63] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R8766 += 1, R8044 += 1 };
  s1 -> s1 [0, 65535] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8766 += 1 };
  s2 -> s1 [0, 62] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R8766 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8766 += 1 };
  s2 -> s4 [63, 63] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R8766 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R8766 += 1, R8043 += 1, R8044 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8766 += 1, R8044 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8766 += 1 };
  s7 -> s7 [0, 65535] { R8766 += 1, R8044 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8766 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8768 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R8768 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R8768 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s0 [0, 65535] { R8767 += 1, R8768 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8768 += 1 };
  s1 -> s1 [0, 65535] { R8768 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s2 [0, 65535] { R8768 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8768 += 1 };
  s2 -> s2 [0, 65535] { R8768 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R8768 += 1, R8046 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8768 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s2 [0, 65535] { R8768 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R8768 += 1, R8045 += 1, R8046 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8768 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8768 += 1 };
  s6 -> s6 [0, 65535] { R8768 += 1, R8046 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8770 += 1, R8724 += 1 };
  s0 -> s2 [0, 65535] { R8770 += 1, R8723 += 1, R8724 += 1 };
  s0 -> s0 [0, 65535] { R8769 += 1, R8770 += 1 };
  s0 -> s1 [45, 63] { R8770 += 1, R8724 += 1 };
  s0 -> s3 [88, 88] { R8770 += 1, R8724 += 1 };
  s0 -> s1 [89, 65535] { R8770 += 1, R8724 += 1 };
  s1 -> s1 [0, 43] { R8770 += 1, R8724 += 1 };
  s1 -> s1 [45, 63] { R8770 += 1, R8724 += 1 };
  s1 -> s3 [88, 88] { R8770 += 1, R8724 += 1 };
  s1 -> s1 [89, 65535] { R8770 += 1, R8724 += 1 };
  s2 -> s1 [0, 43] { R8770 += 1, R8724 += 1 };
  s2 -> s2 [0, 65535] { R8770 += 1, R8723 += 1, R8724 += 1 };
  s2 -> s1 [45, 63] { R8770 += 1, R8724 += 1 };
  s2 -> s3 [88, 88] { R8770 += 1, R8724 += 1 };
  s2 -> s1 [89, 65535] { R8770 += 1, R8724 += 1 };
  s3 -> s3 [0, 43] { R8770 += 1, R8724 += 1 };
  s3 -> s3 [0, 65535] { R8770 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R8770 += 1, R8724 += 1 };
  s3 -> s3 [88, 65535] { R8770 += 1, R8724 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R8772 += 1, R8725 += 1, R8726 += 1 };
  s0 -> s2 [0, 65535] { R8772 += 1, R8726 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8771 += 1, R8772 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8772 += 1, R8725 += 1, R8726 += 1 };
  s1 -> s2 [0, 65535] { R8772 += 1, R8726 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R8772 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8772 += 1, R8726 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R8772 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8774 += 1, R8728 += 1 };
  s0 -> s0 [0, 65535] { R8773 += 1, R8774 += 1 };
  s0 -> s2 [0, 65535] { R8774 += 1, R8727 += 1, R8728 += 1 };
  s0 -> s3 [0, 65535] { R8774 += 1, R8728 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R8774 += 1, R8728 += 1 };
  s0 -> s1 [59, 65535] { R8774 += 1, R8728 += 1 };
  s1 -> s1 [0, 57] { R8774 += 1, R8728 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8774 += 1 };
  s1 -> s4 [58, 58] { R8774 += 1, R8728 += 1 };
  s1 -> s1 [59, 65535] { R8774 += 1, R8728 += 1 };
  s2 -> s1 [0, 57] { R8774 += 1, R8728 += 1 };
  s2 -> s2 [0, 65535] { R8774 += 1, R8727 += 1, R8728 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8774 += 1, R8728 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R8774 += 1, R8728 += 1 };
  s2 -> s1 [59, 65535] { R8774 += 1, R8728 += 1 };
  s3 -> s1 [0, 57] { R8774 += 1, R8728 += 1 };
  s3 -> s5 [0, 65535] { R8774 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8774 += 1, R8728 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R8774 += 1, R8728 += 1 };
  s3 -> s1 [59, 65535] { R8774 += 1, R8728 += 1 };
  s4 -> s4 [0, 65535] { R8774 += 1, R8728 += 1 };
  s5 -> s5 [0, 65535] { R8774 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R8776 += 1, R8730 += 1 };
  s0 -> s2 [0, 65535] { R8776 += 1, R8730 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R8775 += 1, R8776 += 1 };
  s0 -> s3 [0, 65535] { R8776 += 1, R8729 += 1, R8730 += 1 };
  s0 -> s4 [88, 88] { R8776 += 1, R8730 += 1 };
  s0 -> s1 [89, 65535] { R8776 += 1, R8730 += 1 };
  s1 -> s1 [0, 87] { R8776 += 1, R8730 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8776 += 1 };
  s1 -> s4 [88, 88] { R8776 += 1, R8730 += 1 };
  s1 -> s1 [89, 65535] { R8776 += 1, R8730 += 1 };
  s2 -> s1 [0, 87] { R8776 += 1, R8730 += 1 };
  s2 -> s2 [0, 65535] { R8776 += 1, R8730 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R8776 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R8776 += 1, R8730 += 1 };
  s2 -> s1 [89, 65535] { R8776 += 1, R8730 += 1 };
  s3 -> s1 [0, 87] { R8776 += 1, R8730 += 1 };
  s3 -> s2 [0, 65535] { R8776 += 1, R8730 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8776 += 1, R8729 += 1, R8730 += 1 };
  s3 -> s4 [88, 88] { R8776 += 1, R8730 += 1 };
  s3 -> s1 [89, 65535] { R8776 += 1, R8730 += 1 };
  s4 -> s4 [0, 65535] { R8776 += 1, R8730 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8776 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R8778 += 1, R8731 += 1, R8732 += 1 };
  s0 -> s3 [0, 65535] { R8778 += 1, R8732 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8777 += 1, R8778 += 1 };
  s0 -> s4 [91, 91] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8778 += 1 };
  s1 -> s7 [0, 65535] { R8778 += 1, R8732 += 1 };
  s1 -> s1 [0, 65535] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8778 += 1, R8731 += 1, R8732 += 1 };
  s2 -> s3 [0, 65535] { R8778 += 1, R8732 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8778 += 1 };
  s3 -> s3 [0, 65535] { R8778 += 1, R8732 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8778 += 1, R8732 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8778 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8778 += 1 };
  s7 -> s7 [0, 65535] { R8778 += 1, R8732 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8780 += 1, R8734 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R8780 += 1, R8734 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R8780 += 1, R8733 += 1, R8734 += 1 };
  s0 -> s0 [0, 65535] { R8779 += 1, R8780 += 1 };
  s1 -> s1 [0, 65535] { R8780 += 1, R8734 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R8780 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8780 += 1, R8734 += 1 };
  s2 -> s1 [0, 65535] { R8780 += 1, R8734 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R8780 += 1, R8734 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s5 [0, 65535] { R8780 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8780 += 1, R8734 += 1, R5998 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R8780 += 1, R8734 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s3 [0, 65535] { R8780 += 1, R8733 += 1, R8734 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8780 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8780 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8780 += 1, R8734 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R8781 += 1, R8782 += 1 };
  s0 -> s1 [0, 65535] { R8782 += 1, R8736 += 1, R8700 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R8782 += 1, R8736 += 1, R8699 += 1, R8700 += 1 };
  s0 -> s3 [0, 65535] { R8782 += 1, R8735 += 1, R8736 += 1 };
  s1 -> s1 [0, 65535] { R8782 += 1, R8736 += 1, R8700 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R8782 += 1, R8736 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8782 += 1 };
  s2 -> s1 [0, 65535] { R8782 += 1, R8736 += 1, R8700 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R8782 += 1, R8736 += 1, R8699 += 1, R8700 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8782 += 1 };
  s3 -> s1 [0, 65535] { R8782 += 1, R8736 += 1, R8700 += 1, R5990 += 1 };
  s3 -> s2 [0, 65535] { R8782 += 1, R8736 += 1, R8699 += 1, R8700 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8782 += 1, R8735 += 1, R8736 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8782 += 1 };
  s6 -> s6 [0, 65535] { R8782 += 1, R8736 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8782 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R8783 += 1, R8784 += 1 };
  s0 -> s1 [0, 65535] { R8784 += 1, R8738 += 1, R8701 += 1, R8702 += 1 };
  s0 -> s2 [0, 65535] { R8784 += 1, R8737 += 1, R8738 += 1 };
  s0 -> s3 [108, 108] { R8784 += 1, R8738 += 1, R8702 += 1 };
  s1 -> s1 [0, 65535] { R8784 += 1, R8738 += 1, R8701 += 1, R8702 += 1 };
  s1 -> s3 [108, 108] { R8784 += 1, R8738 += 1, R8702 += 1 };
  s2 -> s1 [0, 65535] { R8784 += 1, R8738 += 1, R8701 += 1, R8702 += 1 };
  s2 -> s2 [0, 65535] { R8784 += 1, R8737 += 1, R8738 += 1 };
  s2 -> s3 [108, 108] { R8784 += 1, R8738 += 1, R8702 += 1 };
  s3 -> s4 [111, 111] { R8784 += 1, R8738 += 1, R8702 += 1 };
  s4 -> s4 [0, 65535] { R8784 += 1, R8738 += 1 };
  s4 -> s5 [0, 65535] { R8784 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8784 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s0 -> s2 [0, 65535] { R8786 += 1, R8740 += 1, R8707 += 1, R8708 += 1 };
  s0 -> s3 [0, 65535] { R8786 += 1, R8739 += 1, R8740 += 1 };
  s0 -> s0 [0, 65535] { R8785 += 1, R8786 += 1 };
  s0 -> s4 [88, 88] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s0 -> s1 [89, 65535] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s1 -> s1 [0, 87] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s1 -> s4 [88, 88] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s1 -> s1 [89, 65535] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s2 -> s1 [0, 87] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s2 -> s2 [0, 65535] { R8786 += 1, R8740 += 1, R8707 += 1, R8708 += 1 };
  s2 -> s4 [88, 88] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s2 -> s1 [89, 65535] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s3 -> s1 [0, 87] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s3 -> s2 [0, 65535] { R8786 += 1, R8740 += 1, R8707 += 1, R8708 += 1 };
  s3 -> s3 [0, 65535] { R8786 += 1, R8739 += 1, R8740 += 1 };
  s3 -> s4 [88, 88] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s3 -> s1 [89, 65535] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s4 -> s5 [0, 65535] { R8786 += 1, R8740 += 1 };
  s4 -> s4 [0, 65535] { R8786 += 1, R8740 += 1, R8708 += 1 };
  s4 -> s6 [0, 65535] { R8786 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8786 += 1, R8740 += 1 };
  s5 -> s6 [0, 65535] { R8786 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R8786 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8788 += 1, R8741 += 1, R8742 += 1 };
  s0 -> s2 [0, 65535] { R8788 += 1, R8742 += 1, R8710 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R8787 += 1, R8788 += 1 };
  s0 -> s3 [0, 65535] { R8788 += 1, R8742 += 1, R8709 += 1, R8710 += 1 };
  s1 -> s1 [0, 65535] { R8788 += 1, R8741 += 1, R8742 += 1 };
  s1 -> s2 [0, 65535] { R8788 += 1, R8742 += 1, R8710 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R8788 += 1, R8742 += 1, R8709 += 1, R8710 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8788 += 1, R8742 += 1 };
  s2 -> s4 [0, 65535] { R8788 += 1 };
  s2 -> s2 [0, 65535] { R8788 += 1, R8742 += 1, R8710 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R8788 += 1 };
  s3 -> s2 [0, 65535] { R8788 += 1, R8742 += 1, R8710 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R8788 += 1, R8742 += 1, R8709 += 1, R8710 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8788 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8788 += 1, R8742 += 1 };
  s6 -> s4 [0, 65535] { R8788 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s0 -> s2 [0, 65535] { R8790 += 1, R8744 += 1, R8712 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R8790 += 1, R8744 += 1, R8711 += 1, R8712 += 1 };
  s0 -> s0 [0, 65535] { R8789 += 1, R8790 += 1 };
  s0 -> s4 [0, 65535] { R8790 += 1, R8743 += 1, R8744 += 1 };
  s0 -> s5 [88, 88] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s0 -> s1 [89, 65535] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s1 -> s1 [0, 87] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8790 += 1 };
  s1 -> s1 [0, 65535] { R8790 += 1, R8744 += 1 };
  s1 -> s5 [88, 88] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s1 -> s1 [89, 65535] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s2 -> s1 [0, 87] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s2 -> s2 [0, 65535] { R8790 += 1, R8744 += 1, R8712 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R8790 += 1, R8744 += 1 };
  s2 -> s7 [0, 65535] { R8790 += 1 };
  s2 -> s5 [88, 88] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s2 -> s1 [89, 65535] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s3 -> s1 [0, 87] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s3 -> s2 [0, 65535] { R8790 += 1, R8744 += 1, R8712 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8790 += 1, R8744 += 1, R8711 += 1, R8712 += 1 };
  s3 -> s7 [0, 65535] { R8790 += 1 };
  s3 -> s5 [88, 88] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s3 -> s1 [89, 65535] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s4 -> s1 [0, 87] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s4 -> s2 [0, 65535] { R8790 += 1, R8744 += 1, R8712 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R8790 += 1, R8744 += 1, R8711 += 1, R8712 += 1 };
  s4 -> s4 [0, 65535] { R8790 += 1, R8743 += 1, R8744 += 1 };
  s4 -> s5 [88, 88] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s4 -> s1 [89, 65535] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s5 -> s5 [0, 65535] { R8790 += 1, R8744 += 1, R8712 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8790 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8790 += 1, R8744 += 1 };
  s8 -> s7 [0, 65535] { R8790 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s0 -> s2 [0, 65535] { R8792 += 1, R8745 += 1, R8746 += 1 };
  s0 -> s0 [0, 65535] { R8791 += 1, R8792 += 1 };
  s0 -> s3 [0, 65535] { R8792 += 1, R8746 += 1, R8714 += 1, R8693 += 1, R8694 += 1 };
  s0 -> s4 [0, 65535] { R8792 += 1, R8746 += 1, R8713 += 1, R8714 += 1 };
  s0 -> s1 [89, 65535] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s1 -> s1 [0, 87] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s1 -> s1 [0, 65535] { R8792 += 1, R8746 += 1, R8714 += 1 };
  s1 -> s7 [0, 65535] { R8792 += 1, R8746 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8792 += 1 };
  s1 -> s1 [89, 65535] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s2 -> s1 [0, 87] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s2 -> s2 [0, 65535] { R8792 += 1, R8745 += 1, R8746 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8792 += 1, R8746 += 1, R8714 += 1, R8693 += 1, R8694 += 1 };
  s2 -> s4 [0, 65535] { R8792 += 1, R8746 += 1, R8713 += 1, R8714 += 1 };
  s2 -> s1 [89, 65535] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s3 -> s1 [0, 87] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s3 -> s7 [0, 65535] { R8792 += 1, R8746 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8792 += 1, R8746 += 1, R8714 += 1, R8693 += 1, R8694 += 1 };
  s3 -> s6 [0, 65535] { R8792 += 1 };
  s3 -> s1 [89, 65535] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s4 -> s1 [0, 87] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R8792 += 1, R8746 += 1, R8714 += 1, R8693 += 1, R8694 += 1 };
  s4 -> s6 [0, 65535] { R8792 += 1 };
  s4 -> s4 [0, 65535] { R8792 += 1, R8746 += 1, R8713 += 1, R8714 += 1 };
  s4 -> s1 [89, 65535] { R8792 += 1, R8746 += 1, R8714 += 1, R8694 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8792 += 1 };
  s7 -> s7 [0, 65535] { R8792 += 1, R8746 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8792 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8794 += 1, R8747 += 1, R8748 += 1 };
  s0 -> s2 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1, R8696 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R8794 += 1, R8748 += 1, R8715 += 1, R8716 += 1 };
  s0 -> s4 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1, R8695 += 1, R8696 += 1 };
  s0 -> s0 [0, 65535] { R8793 += 1, R8794 += 1 };
  s1 -> s1 [0, 65535] { R8794 += 1, R8747 += 1, R8748 += 1 };
  s1 -> s2 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1, R8696 += 1, R5988 += 1 };
  s1 -> s3 [0, 65535] { R8794 += 1, R8748 += 1, R8715 += 1, R8716 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1, R8695 += 1, R8696 += 1 };
  s2 -> s8 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1 };
  s2 -> s5 [0, 65535] { R8794 += 1 };
  s2 -> s2 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1, R8696 += 1, R5988 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R8794 += 1, R8748 += 1 };
  s3 -> s5 [0, 65535] { R8794 += 1 };
  s3 -> s2 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1, R8696 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R8794 += 1, R8748 += 1, R8715 += 1, R8716 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1, R8695 += 1, R8696 += 1 };
  s4 -> s5 [0, 65535] { R8794 += 1 };
  s4 -> s2 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1, R8696 += 1, R5988 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1, R8695 += 1, R8696 += 1 };
  s4 -> s7 [0, 65535] { R8794 += 1, R8748 += 1 };
  s5 -> s5 [0, 65535] { R8794 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8794 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8794 += 1, R8748 += 1 };
  s8 -> s8 [0, 65535] { R8794 += 1, R8748 += 1, R8716 += 1 };
  s8 -> s5 [0, 65535] { R8794 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8794 += 1, R8748 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8796 += 1, R8749 += 1, R8750 += 1 };
  s0 -> s2 [0, 65535] { R8796 += 1, R8750 += 1, R8717 += 1, R8718 += 1 };
  s0 -> s3 [0, 65535] { R8796 += 1, R8750 += 1, R8718 += 1, R8697 += 1, R8698 += 1 };
  s0 -> s0 [0, 65535] { R8795 += 1, R8796 += 1 };
  s0 -> s4 [97, 97] { R8796 += 1, R8750 += 1, R8718 += 1, R8698 += 1 };
  s1 -> s1 [0, 65535] { R8796 += 1, R8749 += 1, R8750 += 1 };
  s1 -> s2 [0, 65535] { R8796 += 1, R8750 += 1, R8717 += 1, R8718 += 1 };
  s1 -> s3 [0, 65535] { R8796 += 1, R8750 += 1, R8718 += 1, R8697 += 1, R8698 += 1 };
  s1 -> s4 [97, 97] { R8796 += 1, R8750 += 1, R8718 += 1, R8698 += 1 };
  s2 -> s2 [0, 65535] { R8796 += 1, R8750 += 1, R8717 += 1, R8718 += 1 };
  s2 -> s3 [0, 65535] { R8796 += 1, R8750 += 1, R8718 += 1, R8697 += 1, R8698 += 1 };
  s2 -> s4 [97, 97] { R8796 += 1, R8750 += 1, R8718 += 1, R8698 += 1 };
  s3 -> s3 [0, 65535] { R8796 += 1, R8750 += 1, R8718 += 1, R8697 += 1, R8698 += 1 };
  s3 -> s4 [97, 97] { R8796 += 1, R8750 += 1, R8718 += 1, R8698 += 1 };
  s4 -> s5 [108, 108] { R8796 += 1, R8750 += 1, R8718 += 1, R8698 += 1 };
  s5 -> s6 [104, 104] { R8796 += 1, R8750 += 1, R8718 += 1, R8698 += 1 };
  s6 -> s7 [111, 111] { R8796 += 1, R8750 += 1, R8718 += 1, R8698 += 1 };
  s7 -> s8 [115, 115] { R8796 += 1, R8750 += 1, R8718 += 1, R8698 += 1 };
  s8 -> s9 [116, 116] { R8796 += 1, R8750 += 1, R8718 += 1, R8698 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R8796 += 1, R8750 += 1 };
  s9 -> s12 [0, 65535] { R8796 += 1 };
  s9 -> s9 [0, 65535] { R8796 += 1, R8750 += 1, R8718 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8796 += 1, R8750 += 1 };
  s11 -> s12 [0, 65535] { R8796 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R8796 += 1 };
  accepting s9, s10, s11, s12;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1, R8704 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R8797 += 1, R8798 += 1 };
  s0 -> s2 [0, 65535] { R8798 += 1, R8752 += 1, R8719 += 1, R8720 += 1 };
  s0 -> s3 [0, 65535] { R8798 += 1, R8751 += 1, R8752 += 1 };
  s0 -> s4 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1, R8703 += 1, R8704 += 1 };
  s1 -> s5 [0, 65535] { R8798 += 1, R8752 += 1 };
  s1 -> s1 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1, R8704 += 1, R5989 += 1 };
  s1 -> s6 [0, 65535] { R8798 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1 };
  s2 -> s1 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1, R8704 += 1, R5989 += 1 };
  s2 -> s6 [0, 65535] { R8798 += 1 };
  s2 -> s2 [0, 65535] { R8798 += 1, R8752 += 1, R8719 += 1, R8720 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1, R8703 += 1, R8704 += 1 };
  s3 -> s1 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1, R8704 += 1, R5989 += 1 };
  s3 -> s2 [0, 65535] { R8798 += 1, R8752 += 1, R8719 += 1, R8720 += 1 };
  s3 -> s3 [0, 65535] { R8798 += 1, R8751 += 1, R8752 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1, R8703 += 1, R8704 += 1 };
  s4 -> s5 [0, 65535] { R8798 += 1, R8752 += 1 };
  s4 -> s1 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1, R8704 += 1, R5989 += 1 };
  s4 -> s6 [0, 65535] { R8798 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1, R8703 += 1, R8704 += 1 };
  s5 -> s5 [0, 65535] { R8798 += 1, R8752 += 1 };
  s5 -> s6 [0, 65535] { R8798 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R8798 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R8798 += 1, R8752 += 1 };
  s8 -> s6 [0, 65535] { R8798 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8798 += 1, R8752 += 1, R8720 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8800 += 1, R8753 += 1, R8754 += 1 };
  s0 -> s2 [0, 65535] { R8800 += 1, R8754 += 1, R8722 += 1, R8705 += 1, R8706 += 1 };
  s0 -> s3 [0, 65535] { R8800 += 1, R8754 += 1, R8721 += 1, R8722 += 1 };
  s0 -> s0 [0, 65535] { R8799 += 1, R8800 += 1 };
  s0 -> s4 [99, 99] { R8800 += 1, R8754 += 1, R8722 += 1, R8706 += 1 };
  s1 -> s1 [0, 65535] { R8800 += 1, R8753 += 1, R8754 += 1 };
  s1 -> s2 [0, 65535] { R8800 += 1, R8754 += 1, R8722 += 1, R8705 += 1, R8706 += 1 };
  s1 -> s3 [0, 65535] { R8800 += 1, R8754 += 1, R8721 += 1, R8722 += 1 };
  s1 -> s4 [99, 99] { R8800 += 1, R8754 += 1, R8722 += 1, R8706 += 1 };
  s2 -> s2 [0, 65535] { R8800 += 1, R8754 += 1, R8722 += 1, R8705 += 1, R8706 += 1 };
  s2 -> s4 [99, 99] { R8800 += 1, R8754 += 1, R8722 += 1, R8706 += 1 };
  s3 -> s2 [0, 65535] { R8800 += 1, R8754 += 1, R8722 += 1, R8705 += 1, R8706 += 1 };
  s3 -> s3 [0, 65535] { R8800 += 1, R8754 += 1, R8721 += 1, R8722 += 1 };
  s3 -> s4 [99, 99] { R8800 += 1, R8754 += 1, R8722 += 1, R8706 += 1 };
  s4 -> s5 [0, 65535] { R8800 += 1, R8754 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8800 += 1 };
  s4 -> s4 [0, 65535] { R8800 += 1, R8754 += 1, R8722 += 1 };
  s5 -> s5 [0, 65535] { R8800 += 1, R8754 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8800 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8800 += 1 };
  accepting s4, s5, s6, s7;
};
};
constraint R1 = R8698 && R2 = R8722 && R3 = R8046 && R4 = R8800 && R15 = 0 && R16 = R8754 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8039 - R8754 = 1 && R8040 = R8046 && R8041 - R8754 = 1 && R8042 = R8046 && R8043 - R8754 = 1 && R8044 = R8046 && R8045 - R8754 = 1 && R8697 = 0 && R8701 = 0 && R8702 = 0 && R8705 = 0 && R8706 = 0 && R8707 = 0 && R8708 = R8722 && R8709 = 0 && R8710 = R8722 && R8711 = 0 && R8712 = R8722 && R8713 = 0 && R8714 = R8722 && R8715 = 0 && R8716 = R8722 && R8717 = 0 && R8718 = R8722 && R8719 = 0 && R8720 = R8722 && R8721 = 0 && R8723 = 0 && R8724 = R8754 && R8725 = 0 && R8726 = R8754 && R8727 = 0 && R8728 = R8754 && R8729 = 0 && R8730 = R8754 && R8731 = 0 && R8732 = R8754 && R8733 = 0 && R8734 = R8754 && R8735 = 0 && R8736 = R8754 && R8737 = 0 && R8738 = R8754 && R8739 = 0 && R8740 = R8754 && R8741 = 0 && R8742 = R8754 && R8743 = 0 && R8744 = R8754 && R8745 = 0 && R8746 = R8754 && R8747 = 0 && R8748 = R8754 && R8749 = 0 && R8750 = R8754 && R8751 = 0 && R8752 = R8754 && R8753 = 0 && R8755 = 10 && R8756 = R8800 && R8757 = 10 && R8758 = R8800 && R8759 = 10 && R8760 = R8800 && R8761 = 10 && R8762 = R8800 && R8763 = 10 && R8764 = R8800 && R8765 = 10 && R8766 = R8800 && R8767 = 10 && R8768 = R8800 && R8769 = 10 && R8770 = R8800 && R8771 = 10 && R8772 = R8800 && R8773 = 10 && R8774 = R8800 && R8775 = 10 && R8776 = R8800 && R8777 = 10 && R8778 = R8800 && R8779 = 10 && R8780 = R8800 && R8781 = 10 && R8782 = R8800 && R8783 = 10 && R8784 = R8800 && R8785 = 10 && R8786 = R8800 && R8787 = 10 && R8788 = R8800 && R8789 = 10 && R8790 = R8800 && R8791 = 10 && R8792 = R8800 && R8793 = 10 && R8794 = R8800 && R8795 = 10 && R8796 = R8800 && R8797 = 10 && R8798 = R8800 && R8799 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R8754 < R8046 && -1 < R8698 && 0 < R8722 && -1 < R8754 && 9 < R8800 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R8693 != 0 || R8694 = R8698 || (R5988 = 0 && R8698 = 0)) && (R8695 != 0 || R8696 = R8698 || (R5988 = 0 && R8698 = 0)) && (R5989 = 0 || (R8703 = 0 && R8704 = 0)) && (R5990 = 0 || (R8699 = 0 && R8700 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R8693 = 0 || (R5988 = 0 && R8698 = 0)) && (R8695 = 0 || (R5988 = 0 && R8698 = 0));
// End of Parikh automata intersection problem
