// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R9667, R9668, R9669, R9670, R9671, R9672, R9673, R9674, R9781, R9782, R9783, R9784, R9785, R9786, R9787, R9788, R9789, R9790, R9791, R9792, R9793, R9794, R9795, R9796, R9797, R9798, R9799, R9800, R9801, R9802, R9803, R9804, R9805, R9806, R9807, R9808, R9809, R9810, R9811, R9812, R9813, R9814, R9815, R9816, R9817, R9818, R9819, R9820, R9821, R9822, R9823, R9824, R9825, R9826, R9827, R9828, R9829, R9830, R9831, R9832, R9833, R9834, R9835, R9836, R9837, R9838, R9839, R9840, R9841, R9842, R9843, R9844, R9845, R9846, R9847, R9848, R9849, R9850, R9851, R9852, R9853, R9854, R9855, R9856, R9857, R9858, R9859, R9860, R9861, R9862, R9863, R9864, R9865, R9866, R9867, R9868, R9869, R9870, R9871, R9872, R9873, R9874, R9875, R9876, R9877, R9878, R9879, R9880, R9881, R9882, R9883, R9884, R9885, R9886, R9887, R9888;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R9844 += 1 };
  s0 -> s0 [0, 65535] { R9843 += 1, R9844 += 1 };
  s0 -> s2 [46, 46] { R9844 += 1 };
  s0 -> s3 [47, 47] { R9844 += 1 };
  s0 -> s1 [48, 65535] { R9844 += 1 };
  s1 -> s1 [0, 45] { R9844 += 1 };
  s1 -> s2 [46, 46] { R9844 += 1 };
  s1 -> s3 [47, 47] { R9844 += 1 };
  s1 -> s1 [48, 65535] { R9844 += 1 };
  s2 -> s1 [0, 45] { R9844 += 1 };
  s2 -> s2 [46, 46] { R9844 += 1 };
  s2 -> s3 [47, 47] { R9844 += 1 };
  s2 -> s1 [48, 114] { R9844 += 1 };
  s2 -> s8 [115, 115] { R9844 += 1 };
  s2 -> s1 [116, 65535] { R9844 += 1 };
  s3 -> s3 [0, 45] { R9844 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R9844 += 1 };
  s3 -> s3 [47, 65535] { R9844 += 1 };
  s4 -> s3 [0, 45] { R9844 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R9844 += 1 };
  s4 -> s3 [47, 114] { R9844 += 1 };
  s4 -> s5 [115, 115] { R9844 += 1 };
  s4 -> s3 [116, 65535] { R9844 += 1 };
  s5 -> s3 [0, 45] { R9844 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R9844 += 1 };
  s5 -> s3 [47, 110] { R9844 += 1 };
  s5 -> s6 [111, 111] { R9844 += 1 };
  s5 -> s3 [112, 65535] { R9844 += 1 };
  s6 -> s3 [0, 45] { R9844 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R9844 += 1 };
  s6 -> s3 [47, 98] { R9844 += 1 };
  s6 -> s7 [99, 99] { R9844 += 1 };
  s6 -> s3 [100, 65535] { R9844 += 1 };
  s7 -> s3 [0, 45] { R9844 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R9844 += 1 };
  s7 -> s3 [47, 106] { R9844 += 1 };
  s7 -> s3 [108, 65535] { R9844 += 1 };
  s8 -> s1 [0, 45] { R9844 += 1 };
  s8 -> s2 [46, 46] { R9844 += 1 };
  s8 -> s3 [47, 47] { R9844 += 1 };
  s8 -> s1 [48, 110] { R9844 += 1 };
  s8 -> s9 [111, 111] { R9844 += 1 };
  s8 -> s1 [112, 65535] { R9844 += 1 };
  s9 -> s1 [0, 45] { R9844 += 1 };
  s9 -> s2 [46, 46] { R9844 += 1 };
  s9 -> s3 [47, 47] { R9844 += 1 };
  s9 -> s1 [48, 98] { R9844 += 1 };
  s9 -> s10 [99, 99] { R9844 += 1 };
  s9 -> s1 [100, 65535] { R9844 += 1 };
  s10 -> s1 [0, 45] { R9844 += 1 };
  s10 -> s2 [46, 46] { R9844 += 1 };
  s10 -> s3 [47, 47] { R9844 += 1 };
  s10 -> s1 [48, 106] { R9844 += 1 };
  s10 -> s1 [108, 65535] { R9844 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R9846 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R9845 += 1, R9846 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9846 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R9848 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R9848 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R9847 += 1, R9848 += 1 };
  s0 -> s3 [47, 47] { R9848 += 1 };
  s0 -> s1 [48, 65535] { R9848 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R9848 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R9848 += 1 };
  s1 -> s1 [48, 65535] { R9848 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R9848 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R9848 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R9848 += 1 };
  s2 -> s1 [48, 65535] { R9848 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9848 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R9850 += 1, R9668 += 1 };
  s0 -> s2 [0, 65535] { R9850 += 1, R9667 += 1, R9668 += 1 };
  s0 -> s0 [0, 65535] { R9849 += 1, R9850 += 1 };
  s0 -> s1 [38, 42] { R9850 += 1, R9668 += 1 };
  s0 -> s1 [44, 45] { R9850 += 1, R9668 += 1 };
  s0 -> s1 [47, 62] { R9850 += 1, R9668 += 1 };
  s0 -> s1 [64, 65535] { R9850 += 1, R9668 += 1 };
  s1 -> s1 [0, 36] { R9850 += 1, R9668 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9850 += 1 };
  s1 -> s1 [38, 42] { R9850 += 1, R9668 += 1 };
  s1 -> s1 [44, 45] { R9850 += 1, R9668 += 1 };
  s1 -> s1 [47, 62] { R9850 += 1, R9668 += 1 };
  s1 -> s1 [64, 65535] { R9850 += 1, R9668 += 1 };
  s2 -> s1 [0, 36] { R9850 += 1, R9668 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9850 += 1, R9667 += 1, R9668 += 1 };
  s2 -> s1 [38, 42] { R9850 += 1, R9668 += 1 };
  s2 -> s1 [44, 45] { R9850 += 1, R9668 += 1 };
  s2 -> s1 [47, 62] { R9850 += 1, R9668 += 1 };
  s2 -> s1 [64, 65535] { R9850 += 1, R9668 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R9852 += 1, R9670 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R9851 += 1, R9852 += 1 };
  s0 -> s2 [0, 65535] { R9852 += 1, R9669 += 1, R9670 += 1 };
  s1 -> s1 [0, 65535] { R9852 += 1, R9670 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R9852 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9852 += 1, R9670 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R9852 += 1, R9669 += 1, R9670 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9852 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R9853 += 1, R9854 += 1 };
  s0 -> s2 [0, 65535] { R9854 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R9854 += 1, R9671 += 1, R9672 += 1 };
  s0 -> s4 [63, 63] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R9854 += 1 };
  s1 -> s1 [0, 65535] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R9854 += 1, R9672 += 1 };
  s2 -> s1 [0, 62] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R9854 += 1 };
  s2 -> s2 [0, 65535] { R9854 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R9854 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9854 += 1, R9671 += 1, R9672 += 1 };
  s3 -> s4 [63, 63] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R9854 += 1, R9672 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9854 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9854 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9854 += 1, R9672 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9856 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R9855 += 1, R9856 += 1 };
  s0 -> s2 [0, 65535] { R9856 += 1, R9673 += 1, R9674 += 1 };
  s0 -> s3 [0, 65535] { R9856 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s6 [0, 65535] { R9856 += 1, R9674 += 1 };
  s1 -> s1 [0, 65535] { R9856 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9856 += 1 };
  s2 -> s1 [0, 65535] { R9856 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9856 += 1, R9673 += 1, R9674 += 1 };
  s2 -> s3 [0, 65535] { R9856 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s1 [0, 65535] { R9856 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9856 += 1 };
  s3 -> s3 [0, 65535] { R9856 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9856 += 1 };
  s6 -> s6 [0, 65535] { R9856 += 1, R9674 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9856 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R9858 += 1, R9812 += 1 };
  s0 -> s2 [0, 65535] { R9858 += 1, R9811 += 1, R9812 += 1 };
  s0 -> s0 [0, 65535] { R9857 += 1, R9858 += 1 };
  s0 -> s1 [45, 63] { R9858 += 1, R9812 += 1 };
  s0 -> s3 [88, 88] { R9858 += 1, R9812 += 1 };
  s0 -> s1 [89, 65535] { R9858 += 1, R9812 += 1 };
  s1 -> s1 [0, 43] { R9858 += 1, R9812 += 1 };
  s1 -> s1 [45, 63] { R9858 += 1, R9812 += 1 };
  s1 -> s3 [88, 88] { R9858 += 1, R9812 += 1 };
  s1 -> s1 [89, 65535] { R9858 += 1, R9812 += 1 };
  s2 -> s1 [0, 43] { R9858 += 1, R9812 += 1 };
  s2 -> s2 [0, 65535] { R9858 += 1, R9811 += 1, R9812 += 1 };
  s2 -> s1 [45, 63] { R9858 += 1, R9812 += 1 };
  s2 -> s3 [88, 88] { R9858 += 1, R9812 += 1 };
  s2 -> s1 [89, 65535] { R9858 += 1, R9812 += 1 };
  s3 -> s3 [0, 43] { R9858 += 1, R9812 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9858 += 1 };
  s3 -> s3 [45, 63] { R9858 += 1, R9812 += 1 };
  s3 -> s3 [88, 65535] { R9858 += 1, R9812 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R9860 += 1, R9813 += 1, R9814 += 1 };
  s0 -> s2 [0, 65535] { R9860 += 1, R9814 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9859 += 1, R9860 += 1 };
  s1 -> s1 [0, 65535] { R9860 += 1, R9813 += 1, R9814 += 1 };
  s1 -> s2 [0, 65535] { R9860 += 1, R9814 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9860 += 1 };
  s2 -> s2 [0, 65535] { R9860 += 1, R9814 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9860 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R9862 += 1, R9816 += 1 };
  s0 -> s0 [0, 65535] { R9861 += 1, R9862 += 1 };
  s0 -> s2 [0, 65535] { R9862 += 1, R9816 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R9862 += 1, R9815 += 1, R9816 += 1 };
  s0 -> s4 [58, 58] { R9862 += 1, R9816 += 1 };
  s0 -> s1 [59, 65535] { R9862 += 1, R9816 += 1 };
  s1 -> s1 [0, 57] { R9862 += 1, R9816 += 1 };
  s1 -> s1 [0, 65535] { R9862 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R9862 += 1, R9816 += 1 };
  s1 -> s1 [59, 65535] { R9862 += 1, R9816 += 1 };
  s2 -> s1 [0, 57] { R9862 += 1, R9816 += 1 };
  s2 -> s2 [0, 65535] { R9862 += 1, R9816 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9862 += 1 };
  s2 -> s4 [58, 58] { R9862 += 1, R9816 += 1 };
  s2 -> s1 [59, 65535] { R9862 += 1, R9816 += 1 };
  s3 -> s1 [0, 57] { R9862 += 1, R9816 += 1 };
  s3 -> s2 [0, 65535] { R9862 += 1, R9816 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9862 += 1, R9815 += 1, R9816 += 1 };
  s3 -> s4 [58, 58] { R9862 += 1, R9816 += 1 };
  s3 -> s1 [59, 65535] { R9862 += 1, R9816 += 1 };
  s4 -> s4 [0, 65535] { R9862 += 1, R9816 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9862 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R9864 += 1, R9818 += 1 };
  s0 -> s0 [0, 65535] { R9863 += 1, R9864 += 1 };
  s0 -> s2 [0, 65535] { R9864 += 1, R9818 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R9864 += 1, R9817 += 1, R9818 += 1 };
  s0 -> s4 [88, 88] { R9864 += 1, R9818 += 1 };
  s0 -> s1 [89, 65535] { R9864 += 1, R9818 += 1 };
  s1 -> s1 [0, 87] { R9864 += 1, R9818 += 1 };
  s1 -> s1 [0, 65535] { R9864 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R9864 += 1, R9818 += 1 };
  s1 -> s1 [89, 65535] { R9864 += 1, R9818 += 1 };
  s2 -> s1 [0, 87] { R9864 += 1, R9818 += 1 };
  s2 -> s6 [0, 65535] { R9864 += 1 };
  s2 -> s2 [0, 65535] { R9864 += 1, R9818 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R9864 += 1, R9818 += 1 };
  s2 -> s1 [89, 65535] { R9864 += 1, R9818 += 1 };
  s3 -> s1 [0, 87] { R9864 += 1, R9818 += 1 };
  s3 -> s2 [0, 65535] { R9864 += 1, R9818 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9864 += 1, R9817 += 1, R9818 += 1 };
  s3 -> s4 [88, 88] { R9864 += 1, R9818 += 1 };
  s3 -> s1 [89, 65535] { R9864 += 1, R9818 += 1 };
  s4 -> s4 [0, 65535] { R9864 += 1, R9818 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9864 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R9865 += 1, R9866 += 1 };
  s0 -> s2 [0, 65535] { R9866 += 1, R9820 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R9866 += 1, R9819 += 1, R9820 += 1 };
  s0 -> s4 [91, 91] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R9866 += 1 };
  s1 -> s7 [0, 65535] { R9866 += 1, R9820 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R9866 += 1 };
  s2 -> s2 [0, 65535] { R9866 += 1, R9820 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R9866 += 1, R9820 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R9866 += 1, R9819 += 1, R9820 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R9866 += 1, R9820 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9866 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9866 += 1 };
  s7 -> s7 [0, 65535] { R9866 += 1, R9820 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9868 += 1, R9822 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R9867 += 1, R9868 += 1 };
  s0 -> s2 [0, 65535] { R9868 += 1, R9821 += 1, R9822 += 1 };
  s0 -> s3 [0, 65535] { R9868 += 1, R9822 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s6 [0, 65535] { R9868 += 1, R9822 += 1 };
  s1 -> s1 [0, 65535] { R9868 += 1, R9822 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R9868 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9868 += 1, R9822 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R9868 += 1, R9821 += 1, R9822 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9868 += 1, R9822 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s1 [0, 65535] { R9868 += 1, R9822 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R9868 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9868 += 1, R9822 += 1, R5997 += 1, R5998 += 1 };
  s4 -> s4 [0, 65535] { R9868 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9868 += 1, R9822 += 1 };
  s6 -> s4 [0, 65535] { R9868 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R9869 += 1, R9870 += 1 };
  s0 -> s1 [0, 65535] { R9870 += 1, R9823 += 1, R9824 += 1 };
  s0 -> s2 [0, 65535] { R9870 += 1, R9824 += 1, R9788 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R9870 += 1, R9824 += 1, R9787 += 1, R9788 += 1 };
  s1 -> s1 [0, 65535] { R9870 += 1, R9823 += 1, R9824 += 1 };
  s1 -> s2 [0, 65535] { R9870 += 1, R9824 += 1, R9788 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R9870 += 1, R9824 += 1, R9787 += 1, R9788 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R9870 += 1, R9824 += 1 };
  s2 -> s2 [0, 65535] { R9870 += 1, R9824 += 1, R9788 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9870 += 1 };
  s3 -> s2 [0, 65535] { R9870 += 1, R9824 += 1, R9788 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R9870 += 1, R9824 += 1, R9787 += 1, R9788 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9870 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9870 += 1 };
  s6 -> s6 [0, 65535] { R9870 += 1, R9824 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9870 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9872 += 1, R9825 += 1, R9826 += 1 };
  s0 -> s2 [0, 65535] { R9872 += 1, R9826 += 1, R9789 += 1, R9790 += 1 };
  s0 -> s0 [0, 65535] { R9871 += 1, R9872 += 1 };
  s0 -> s3 [108, 108] { R9872 += 1, R9826 += 1, R9790 += 1 };
  s1 -> s1 [0, 65535] { R9872 += 1, R9825 += 1, R9826 += 1 };
  s1 -> s2 [0, 65535] { R9872 += 1, R9826 += 1, R9789 += 1, R9790 += 1 };
  s1 -> s3 [108, 108] { R9872 += 1, R9826 += 1, R9790 += 1 };
  s2 -> s2 [0, 65535] { R9872 += 1, R9826 += 1, R9789 += 1, R9790 += 1 };
  s2 -> s3 [108, 108] { R9872 += 1, R9826 += 1, R9790 += 1 };
  s3 -> s4 [111, 111] { R9872 += 1, R9826 += 1, R9790 += 1 };
  s4 -> s5 [99, 99] { R9872 += 1, R9826 += 1, R9790 += 1 };
  s5 -> s6 [97, 97] { R9872 += 1, R9826 += 1, R9790 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9872 += 1, R9826 += 1 };
  s6 -> s8 [0, 65535] { R9872 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9872 += 1 };
  accepting s6, s7, s8;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s0 -> s0 [0, 65535] { R9873 += 1, R9874 += 1 };
  s0 -> s2 [0, 65535] { R9874 += 1, R9828 += 1, R9795 += 1, R9796 += 1 };
  s0 -> s3 [0, 65535] { R9874 += 1, R9827 += 1, R9828 += 1 };
  s0 -> s4 [88, 88] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s0 -> s1 [89, 65535] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s1 -> s1 [0, 87] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s1 -> s4 [88, 88] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s1 -> s1 [89, 65535] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s2 -> s1 [0, 87] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s2 -> s2 [0, 65535] { R9874 += 1, R9828 += 1, R9795 += 1, R9796 += 1 };
  s2 -> s4 [88, 88] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s2 -> s1 [89, 65535] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s3 -> s1 [0, 87] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s3 -> s2 [0, 65535] { R9874 += 1, R9828 += 1, R9795 += 1, R9796 += 1 };
  s3 -> s3 [0, 65535] { R9874 += 1, R9827 += 1, R9828 += 1 };
  s3 -> s4 [88, 88] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s3 -> s1 [89, 65535] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9874 += 1, R9828 += 1 };
  s4 -> s4 [0, 65535] { R9874 += 1, R9828 += 1, R9796 += 1 };
  s4 -> s7 [0, 65535] { R9874 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9874 += 1, R9828 += 1 };
  s6 -> s7 [0, 65535] { R9874 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9874 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9876 += 1, R9829 += 1, R9830 += 1 };
  s0 -> s2 [0, 65535] { R9876 += 1, R9830 += 1, R9797 += 1, R9798 += 1 };
  s0 -> s3 [0, 65535] { R9876 += 1, R9830 += 1, R9798 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R9875 += 1, R9876 += 1 };
  s1 -> s1 [0, 65535] { R9876 += 1, R9829 += 1, R9830 += 1 };
  s1 -> s2 [0, 65535] { R9876 += 1, R9830 += 1, R9797 += 1, R9798 += 1 };
  s1 -> s3 [0, 65535] { R9876 += 1, R9830 += 1, R9798 += 1, R1 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R9876 += 1 };
  s2 -> s2 [0, 65535] { R9876 += 1, R9830 += 1, R9797 += 1, R9798 += 1 };
  s2 -> s3 [0, 65535] { R9876 += 1, R9830 += 1, R9798 += 1, R1 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R9876 += 1 };
  s3 -> s5 [0, 65535] { R9876 += 1, R9830 += 1 };
  s3 -> s3 [0, 65535] { R9876 += 1, R9830 += 1, R9798 += 1, R1 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9876 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R9876 += 1 };
  s5 -> s5 [0, 65535] { R9876 += 1, R9830 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s0 -> s2 [0, 65535] { R9878 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s3 [0, 65535] { R9878 += 1, R9832 += 1, R9800 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R9877 += 1, R9878 += 1 };
  s0 -> s4 [0, 65535] { R9878 += 1, R9832 += 1, R9799 += 1, R9800 += 1 };
  s0 -> s5 [88, 88] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s0 -> s1 [89, 65535] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s1 -> s1 [0, 87] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s1 -> s1 [0, 65535] { R9878 += 1, R9832 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R9878 += 1 };
  s1 -> s5 [88, 88] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s1 -> s1 [89, 65535] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s2 -> s1 [0, 87] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s2 -> s2 [0, 65535] { R9878 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s3 [0, 65535] { R9878 += 1, R9832 += 1, R9800 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R9878 += 1, R9832 += 1, R9799 += 1, R9800 += 1 };
  s2 -> s5 [88, 88] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s2 -> s1 [89, 65535] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s3 -> s1 [0, 87] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s3 -> s8 [0, 65535] { R9878 += 1, R9832 += 1 };
  s3 -> s3 [0, 65535] { R9878 += 1, R9832 += 1, R9800 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R9878 += 1 };
  s3 -> s5 [88, 88] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s3 -> s1 [89, 65535] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s4 -> s1 [0, 87] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s4 -> s3 [0, 65535] { R9878 += 1, R9832 += 1, R9800 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9878 += 1, R9832 += 1, R9799 += 1, R9800 += 1 };
  s4 -> s7 [0, 65535] { R9878 += 1 };
  s4 -> s5 [88, 88] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s4 -> s1 [89, 65535] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s5 -> s5 [0, 65535] { R9878 += 1, R9832 += 1, R9800 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9878 += 1 };
  s8 -> s8 [0, 65535] { R9878 += 1, R9832 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9878 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s0 -> s2 [0, 65535] { R9880 += 1, R9834 += 1, R9802 += 1, R9781 += 1, R9782 += 1 };
  s0 -> s3 [0, 65535] { R9880 += 1, R9833 += 1, R9834 += 1 };
  s0 -> s0 [0, 65535] { R9879 += 1, R9880 += 1 };
  s0 -> s4 [0, 65535] { R9880 += 1, R9834 += 1, R9801 += 1, R9802 += 1 };
  s0 -> s1 [89, 65535] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s1 -> s1 [0, 87] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9880 += 1 };
  s1 -> s7 [0, 65535] { R9880 += 1, R9834 += 1 };
  s1 -> s1 [0, 65535] { R9880 += 1, R9834 += 1, R9802 += 1 };
  s1 -> s1 [89, 65535] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s2 -> s1 [0, 87] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9880 += 1 };
  s2 -> s2 [0, 65535] { R9880 += 1, R9834 += 1, R9802 += 1, R9781 += 1, R9782 += 1 };
  s2 -> s7 [0, 65535] { R9880 += 1, R9834 += 1 };
  s2 -> s1 [89, 65535] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s3 -> s1 [0, 87] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9880 += 1, R9834 += 1, R9802 += 1, R9781 += 1, R9782 += 1 };
  s3 -> s3 [0, 65535] { R9880 += 1, R9833 += 1, R9834 += 1 };
  s3 -> s4 [0, 65535] { R9880 += 1, R9834 += 1, R9801 += 1, R9802 += 1 };
  s3 -> s1 [89, 65535] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s4 -> s1 [0, 87] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9880 += 1 };
  s4 -> s2 [0, 65535] { R9880 += 1, R9834 += 1, R9802 += 1, R9781 += 1, R9782 += 1 };
  s4 -> s4 [0, 65535] { R9880 += 1, R9834 += 1, R9801 += 1, R9802 += 1 };
  s4 -> s1 [89, 65535] { R9880 += 1, R9834 += 1, R9802 += 1, R9782 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9880 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9880 += 1 };
  s7 -> s7 [0, 65535] { R9880 += 1, R9834 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9882 += 1, R9836 += 1, R9803 += 1, R9804 += 1 };
  s0 -> s2 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1, R9783 += 1, R9784 += 1 };
  s0 -> s3 [0, 65535] { R9882 += 1, R9835 += 1, R9836 += 1 };
  s0 -> s0 [0, 65535] { R9881 += 1, R9882 += 1 };
  s0 -> s4 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1, R9784 += 1, R5988 += 1 };
  s1 -> s1 [0, 65535] { R9882 += 1, R9836 += 1, R9803 += 1, R9804 += 1 };
  s1 -> s2 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1, R9783 += 1, R9784 += 1 };
  s1 -> s6 [0, 65535] { R9882 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1, R9784 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1, R9783 += 1, R9784 += 1 };
  s2 -> s6 [0, 65535] { R9882 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1, R9784 += 1, R5988 += 1 };
  s2 -> s8 [0, 65535] { R9882 += 1, R9836 += 1 };
  s3 -> s1 [0, 65535] { R9882 += 1, R9836 += 1, R9803 += 1, R9804 += 1 };
  s3 -> s2 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1, R9783 += 1, R9784 += 1 };
  s3 -> s3 [0, 65535] { R9882 += 1, R9835 += 1, R9836 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1, R9784 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1 };
  s4 -> s6 [0, 65535] { R9882 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1, R9784 += 1, R5988 += 1 };
  s4 -> s8 [0, 65535] { R9882 += 1, R9836 += 1 };
  s5 -> s5 [0, 65535] { R9882 += 1, R9836 += 1, R9804 += 1 };
  s5 -> s6 [0, 65535] { R9882 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R9882 += 1, R9836 += 1 };
  s6 -> s6 [0, 65535] { R9882 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R9882 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9882 += 1, R9836 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R9883 += 1, R9884 += 1 };
  s0 -> s1 [0, 65535] { R9884 += 1, R9837 += 1, R9838 += 1 };
  s0 -> s2 [0, 65535] { R9884 += 1, R9838 += 1, R9805 += 1, R9806 += 1 };
  s0 -> s3 [0, 65535] { R9884 += 1, R9838 += 1, R9806 += 1, R9785 += 1, R9786 += 1 };
  s0 -> s4 [116, 116] { R9884 += 1, R9838 += 1, R9806 += 1, R9786 += 1 };
  s1 -> s1 [0, 65535] { R9884 += 1, R9837 += 1, R9838 += 1 };
  s1 -> s2 [0, 65535] { R9884 += 1, R9838 += 1, R9805 += 1, R9806 += 1 };
  s1 -> s3 [0, 65535] { R9884 += 1, R9838 += 1, R9806 += 1, R9785 += 1, R9786 += 1 };
  s1 -> s4 [116, 116] { R9884 += 1, R9838 += 1, R9806 += 1, R9786 += 1 };
  s2 -> s2 [0, 65535] { R9884 += 1, R9838 += 1, R9805 += 1, R9806 += 1 };
  s2 -> s3 [0, 65535] { R9884 += 1, R9838 += 1, R9806 += 1, R9785 += 1, R9786 += 1 };
  s2 -> s4 [116, 116] { R9884 += 1, R9838 += 1, R9806 += 1, R9786 += 1 };
  s3 -> s3 [0, 65535] { R9884 += 1, R9838 += 1, R9806 += 1, R9785 += 1, R9786 += 1 };
  s3 -> s4 [116, 116] { R9884 += 1, R9838 += 1, R9806 += 1, R9786 += 1 };
  s4 -> s5 [0, 65535] { R9884 += 1 };
  s4 -> s4 [0, 65535] { R9884 += 1, R9838 += 1, R9806 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9884 += 1, R9838 += 1 };
  s5 -> s5 [0, 65535] { R9884 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9884 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9884 += 1, R9838 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1, R9791 += 1, R9792 += 1 };
  s0 -> s2 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1, R9792 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R9886 += 1, R9840 += 1, R9807 += 1, R9808 += 1 };
  s0 -> s4 [0, 65535] { R9886 += 1, R9839 += 1, R9840 += 1 };
  s0 -> s0 [0, 65535] { R9885 += 1, R9886 += 1 };
  s1 -> s7 [0, 65535] { R9886 += 1, R9840 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9886 += 1 };
  s1 -> s1 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1, R9791 += 1, R9792 += 1 };
  s1 -> s2 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1, R9792 += 1, R5989 += 1 };
  s2 -> s7 [0, 65535] { R9886 += 1, R9840 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9886 += 1 };
  s2 -> s2 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1, R9792 += 1, R5989 += 1 };
  s2 -> s8 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9886 += 1 };
  s3 -> s1 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1, R9791 += 1, R9792 += 1 };
  s3 -> s2 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1, R9792 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R9886 += 1, R9840 += 1, R9807 += 1, R9808 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1, R9791 += 1, R9792 += 1 };
  s4 -> s2 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1, R9792 += 1, R5989 += 1 };
  s4 -> s3 [0, 65535] { R9886 += 1, R9840 += 1, R9807 += 1, R9808 += 1 };
  s4 -> s4 [0, 65535] { R9886 += 1, R9839 += 1, R9840 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9886 += 1 };
  s7 -> s7 [0, 65535] { R9886 += 1, R9840 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9886 += 1 };
  s8 -> s7 [0, 65535] { R9886 += 1, R9840 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R9886 += 1 };
  s8 -> s8 [0, 65535] { R9886 += 1, R9840 += 1, R9808 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9888 += 1, R9842 += 1, R9810 += 1, R9793 += 1, R9794 += 1 };
  s0 -> s2 [0, 65535] { R9888 += 1, R9841 += 1, R9842 += 1 };
  s0 -> s3 [0, 65535] { R9888 += 1, R9842 += 1, R9809 += 1, R9810 += 1 };
  s0 -> s0 [0, 65535] { R9887 += 1, R9888 += 1 };
  s0 -> s4 [108, 108] { R9888 += 1, R9842 += 1, R9810 += 1, R9794 += 1 };
  s1 -> s1 [0, 65535] { R9888 += 1, R9842 += 1, R9810 += 1, R9793 += 1, R9794 += 1 };
  s1 -> s4 [108, 108] { R9888 += 1, R9842 += 1, R9810 += 1, R9794 += 1 };
  s2 -> s1 [0, 65535] { R9888 += 1, R9842 += 1, R9810 += 1, R9793 += 1, R9794 += 1 };
  s2 -> s2 [0, 65535] { R9888 += 1, R9841 += 1, R9842 += 1 };
  s2 -> s3 [0, 65535] { R9888 += 1, R9842 += 1, R9809 += 1, R9810 += 1 };
  s2 -> s4 [108, 108] { R9888 += 1, R9842 += 1, R9810 += 1, R9794 += 1 };
  s3 -> s1 [0, 65535] { R9888 += 1, R9842 += 1, R9810 += 1, R9793 += 1, R9794 += 1 };
  s3 -> s3 [0, 65535] { R9888 += 1, R9842 += 1, R9809 += 1, R9810 += 1 };
  s3 -> s4 [108, 108] { R9888 += 1, R9842 += 1, R9810 += 1, R9794 += 1 };
  s4 -> s5 [104, 104] { R9888 += 1, R9842 += 1, R9810 += 1, R9794 += 1 };
  s5 -> s6 [111, 111] { R9888 += 1, R9842 += 1, R9810 += 1, R9794 += 1 };
  s6 -> s7 [115, 115] { R9888 += 1, R9842 += 1, R9810 += 1, R9794 += 1 };
  s7 -> s8 [0, 65535] { R9888 += 1 };
  s7 -> s9 [0, 65535] { R9888 += 1, R9842 += 1 };
  s7 -> s7 [0, 65535] { R9888 += 1, R9842 += 1, R9810 += 1 };
  s7 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R9888 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s8 [0, 65535] { R9888 += 1 };
  s9 -> s9 [0, 65535] { R9888 += 1, R9842 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s7, s8, s9, s10;
};
};
constraint R1 = R9786 && R2 = R9810 && R3 = R9674 && R4 = R9888 && R15 = 0 && R16 = R9842 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R9667 - R9842 = 1 && R9668 = R9674 && R9669 - R9842 = 1 && R9670 = R9674 && R9671 - R9842 = 1 && R9672 = R9674 && R9673 - R9842 = 1 && R9785 = 0 && R9789 = 0 && R9790 = 0 && R9793 = 0 && R9794 = 0 && R9795 = 0 && R9796 = R9810 && R9797 = 0 && R9798 = R9810 && R9799 = 0 && R9800 = R9810 && R9801 = 0 && R9802 = R9810 && R9803 = 0 && R9804 = R9810 && R9805 = 0 && R9806 = R9810 && R9807 = 0 && R9808 = R9810 && R9809 = 0 && R9811 = 0 && R9812 = R9842 && R9813 = 0 && R9814 = R9842 && R9815 = 0 && R9816 = R9842 && R9817 = 0 && R9818 = R9842 && R9819 = 0 && R9820 = R9842 && R9821 = 0 && R9822 = R9842 && R9823 = 0 && R9824 = R9842 && R9825 = 0 && R9826 = R9842 && R9827 = 0 && R9828 = R9842 && R9829 = 0 && R9830 = R9842 && R9831 = 0 && R9832 = R9842 && R9833 = 0 && R9834 = R9842 && R9835 = 0 && R9836 = R9842 && R9837 = 0 && R9838 = R9842 && R9839 = 0 && R9840 = R9842 && R9841 = 0 && R9843 = 10 && R9844 = R9888 && R9845 = 10 && R9846 = R9888 && R9847 = 10 && R9848 = R9888 && R9849 = 10 && R9850 = R9888 && R9851 = 10 && R9852 = R9888 && R9853 = 10 && R9854 = R9888 && R9855 = 10 && R9856 = R9888 && R9857 = 10 && R9858 = R9888 && R9859 = 10 && R9860 = R9888 && R9861 = 10 && R9862 = R9888 && R9863 = 10 && R9864 = R9888 && R9865 = 10 && R9866 = R9888 && R9867 = 10 && R9868 = R9888 && R9869 = 10 && R9870 = R9888 && R9871 = 10 && R9872 = R9888 && R9873 = 10 && R9874 = R9888 && R9875 = 10 && R9876 = R9888 && R9877 = 10 && R9878 = R9888 && R9879 = 10 && R9880 = R9888 && R9881 = 10 && R9882 = R9888 && R9883 = 10 && R9884 = R9888 && R9885 = 10 && R9886 = R9888 && R9887 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R9842 < R9674 && -1 < R9786 && 0 < R9810 && -1 < R9842 && 9 < R9888 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R9781 != 0 || R9782 = R9786 || (R5988 = 0 && R9786 = 0)) && (R9783 != 0 || R9784 = R9786 || (R5988 = 0 && R9786 = 0)) && (R5989 = 0 || (R9791 = 0 && R9792 = 0)) && (R5990 = 0 || (R9787 = 0 && R9788 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R9781 = 0 || (R5988 = 0 && R9786 = 0)) && (R9783 = 0 || (R5988 = 0 && R9786 = 0));
// End of Parikh automata intersection problem
