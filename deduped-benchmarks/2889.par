// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R13, R14, R179, R180, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R179 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R180 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R206 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s2 [9, 13] { R206 += 1 };
  s0 -> s1 [14, 31] { R206 += 1 };
  s0 -> s2 [32, 32] { R206 += 1 };
  s0 -> s1 [33, 65535] { R206 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R206 += 1 };
  s2 -> s1 [0, 65535] { R206 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s1 [0, 65535] { R208 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R208 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R210 += 1 };
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s2 [9, 13] { R210 += 1 };
  s0 -> s1 [14, 31] { R210 += 1 };
  s0 -> s2 [32, 32] { R210 += 1 };
  s0 -> s1 [33, 65535] { R210 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R210 += 1 };
  s2 -> s1 [0, 65535] { R210 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R212 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R212 += 1, R11 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 66] { R232 += 1 };
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s0 -> s1 [68, 65535] { R232 += 1 };
  s1 -> s1 [0, 66] { R232 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [68, 65535] { R232 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R234 += 1, R183 += 1 };
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s1 -> s1 [0, 65535] { R234 += 1, R183 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 67] { R236 += 1 };
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s1 [91, 65535] { R236 += 1 };
  s1 -> s1 [0, 67] { R236 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R236 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R259 += 1, R260 += 1 };
  s0 -> s1 [0, 65535] { R260 += 1, R184 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R260 += 1, R184 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 66] { R262 += 1 };
  s0 -> s0 [0, 65535] { R261 += 1, R262 += 1 };
  s0 -> s2 [67, 67] { R262 += 1 };
  s0 -> s3 [67, 67] { R262 += 1 };
  s0 -> s1 [91, 65535] { R262 += 1 };
  s1 -> s1 [0, 66] { R262 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [67, 67] { R262 += 1 };
  s1 -> s3 [67, 67] { R262 += 1 };
  s1 -> s1 [91, 65535] { R262 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 67] { R262 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R262 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R14 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R14 += 1 };
  s1 -> s1 [0, 60] { R14 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R226 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s1 -> s1 [0, 65535] { R226 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s0 -> s1 [0, 65535] { R228 += 1, R193 += 1, R194 += 1 };
  s0 -> s2 [12, 12] { R228 += 1, R194 += 1 };
  s1 -> s1 [0, 65535] { R228 += 1, R193 += 1, R194 += 1 };
  s1 -> s2 [12, 12] { R228 += 1, R194 += 1 };
  s2 -> s2 [0, 65535] { R228 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R230 += 1, R195 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R230 += 1, R196 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s1 -> s1 [0, 65535] { R230 += 1, R195 += 1, R196 += 1 };
  s1 -> s2 [0, 65535] { R230 += 1, R196 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R230 += 1, R196 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R230 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R230 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R238 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R238 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s1 [0, 65535] { R240 += 1, R197 += 1, R198 += 1 };
  s0 -> s2 [11, 11] { R240 += 1, R198 += 1 };
  s1 -> s1 [0, 65535] { R240 += 1, R197 += 1, R198 += 1 };
  s1 -> s2 [11, 11] { R240 += 1, R198 += 1 };
  s2 -> s2 [0, 65535] { R240 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s0 -> s1 [0, 65535] { R242 += 1, R199 += 1, R200 += 1 };
  s0 -> s2 [0, 65535] { R242 += 1, R200 += 1, R8 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R242 += 1, R199 += 1, R200 += 1 };
  s1 -> s2 [0, 65535] { R242 += 1, R200 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R242 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R242 += 1, R200 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R242 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R244 += 1, R202 += 1 };
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s0 -> s2 [0, 65535] { R244 += 1, R201 += 1, R202 += 1 };
  s0 -> s3 [9, 13] { R244 += 1, R202 += 1 };
  s0 -> s1 [14, 31] { R244 += 1, R202 += 1 };
  s0 -> s3 [32, 32] { R244 += 1, R202 += 1 };
  s0 -> s1 [33, 65535] { R244 += 1, R202 += 1 };
  s1 -> s5 [0, 65535] { R244 += 1 };
  s1 -> s1 [0, 65535] { R244 += 1, R202 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R244 += 1, R202 += 1 };
  s2 -> s2 [0, 65535] { R244 += 1, R201 += 1, R202 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R244 += 1, R202 += 1 };
  s2 -> s1 [14, 31] { R244 += 1, R202 += 1 };
  s2 -> s3 [32, 32] { R244 += 1, R202 += 1 };
  s2 -> s1 [33, 65535] { R244 += 1, R202 += 1 };
  s3 -> s1 [0, 65535] { R244 += 1, R202 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R244 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R246 += 1, R204 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s0 -> s2 [0, 65535] { R246 += 1, R203 += 1, R204 += 1 };
  s1 -> s1 [0, 65535] { R246 += 1, R204 += 1, R9 += 1 };
  s1 -> s4 [0, 65535] { R246 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R246 += 1, R204 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R246 += 1, R203 += 1, R204 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R246 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 64] { R248 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R248 += 1, R213 += 1, R214 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s1 [91, 65535] { R248 += 1, R214 += 1 };
  s1 -> s1 [0, 64] { R248 += 1, R214 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R248 += 1 };
  s1 -> s1 [91, 65535] { R248 += 1, R214 += 1 };
  s2 -> s1 [0, 64] { R248 += 1, R214 += 1 };
  s2 -> s2 [0, 65535] { R248 += 1, R213 += 1, R214 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R248 += 1, R214 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R250 += 1, R216 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R250 += 1, R215 += 1, R216 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s1 -> s4 [0, 65535] { R250 += 1 };
  s1 -> s1 [0, 65535] { R250 += 1, R216 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R250 += 1, R216 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R250 += 1, R215 += 1, R216 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R250 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 8] { R252 += 1, R218 += 1, R186 += 1 };
  s0 -> s2 [0, 65535] { R252 += 1, R217 += 1, R218 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s0 -> s3 [0, 65535] { R252 += 1, R218 += 1, R185 += 1, R186 += 1 };
  s0 -> s4 [9, 13] { R252 += 1, R218 += 1, R186 += 1 };
  s0 -> s1 [14, 31] { R252 += 1, R218 += 1, R186 += 1 };
  s0 -> s4 [32, 32] { R252 += 1, R218 += 1, R186 += 1 };
  s0 -> s1 [33, 65535] { R252 += 1, R218 += 1, R186 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R252 += 1 };
  s1 -> s1 [0, 65535] { R252 += 1, R218 += 1, R186 += 1 };
  s1 -> s7 [0, 65535] { R252 += 1, R218 += 1 };
  s2 -> s1 [0, 8] { R252 += 1, R218 += 1, R186 += 1 };
  s2 -> s2 [0, 65535] { R252 += 1, R217 += 1, R218 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R252 += 1, R218 += 1, R185 += 1, R186 += 1 };
  s2 -> s4 [9, 13] { R252 += 1, R218 += 1, R186 += 1 };
  s2 -> s1 [14, 31] { R252 += 1, R218 += 1, R186 += 1 };
  s2 -> s4 [32, 32] { R252 += 1, R218 += 1, R186 += 1 };
  s2 -> s1 [33, 65535] { R252 += 1, R218 += 1, R186 += 1 };
  s3 -> s1 [0, 8] { R252 += 1, R218 += 1, R186 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R252 += 1, R218 += 1, R185 += 1, R186 += 1 };
  s3 -> s6 [0, 65535] { R252 += 1 };
  s3 -> s4 [9, 13] { R252 += 1, R218 += 1, R186 += 1 };
  s3 -> s1 [14, 31] { R252 += 1, R218 += 1, R186 += 1 };
  s3 -> s4 [32, 32] { R252 += 1, R218 += 1, R186 += 1 };
  s3 -> s1 [33, 65535] { R252 += 1, R218 += 1, R186 += 1 };
  s4 -> s1 [0, 65535] { R252 += 1, R218 += 1, R186 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R252 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R252 += 1 };
  s7 -> s7 [0, 65535] { R252 += 1, R218 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R254 += 1, R219 += 1, R220 += 1 };
  s0 -> s2 [0, 65535] { R254 += 1, R220 += 1, R187 += 1, R188 += 1 };
  s0 -> s0 [0, 65535] { R253 += 1, R254 += 1 };
  s0 -> s3 [0, 65535] { R254 += 1, R220 += 1, R188 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R254 += 1, R219 += 1, R220 += 1 };
  s1 -> s2 [0, 65535] { R254 += 1, R220 += 1, R187 += 1, R188 += 1 };
  s1 -> s3 [0, 65535] { R254 += 1, R220 += 1, R188 += 1, R5 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R254 += 1 };
  s2 -> s2 [0, 65535] { R254 += 1, R220 += 1, R187 += 1, R188 += 1 };
  s2 -> s3 [0, 65535] { R254 += 1, R220 += 1, R188 += 1, R5 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R254 += 1 };
  s3 -> s5 [0, 65535] { R254 += 1, R220 += 1 };
  s3 -> s3 [0, 65535] { R254 += 1, R220 += 1, R188 += 1, R5 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R254 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R254 += 1 };
  s5 -> s5 [0, 65535] { R254 += 1, R220 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R256 += 1, R222 += 1, R190 += 1 };
  s0 -> s0 [0, 65535] { R255 += 1, R256 += 1 };
  s0 -> s2 [0, 65535] { R256 += 1, R222 += 1, R189 += 1, R190 += 1 };
  s0 -> s3 [0, 65535] { R256 += 1, R221 += 1, R222 += 1 };
  s0 -> s4 [9, 13] { R256 += 1, R222 += 1, R190 += 1 };
  s0 -> s1 [14, 31] { R256 += 1, R222 += 1, R190 += 1 };
  s0 -> s4 [32, 32] { R256 += 1, R222 += 1, R190 += 1 };
  s0 -> s1 [33, 65535] { R256 += 1, R222 += 1, R190 += 1 };
  s1 -> s7 [0, 65535] { R256 += 1, R222 += 1 };
  s1 -> s1 [0, 65535] { R256 += 1, R222 += 1, R190 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R256 += 1 };
  s2 -> s1 [0, 8] { R256 += 1, R222 += 1, R190 += 1 };
  s2 -> s2 [0, 65535] { R256 += 1, R222 += 1, R189 += 1, R190 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R256 += 1 };
  s2 -> s4 [9, 13] { R256 += 1, R222 += 1, R190 += 1 };
  s2 -> s1 [14, 31] { R256 += 1, R222 += 1, R190 += 1 };
  s2 -> s4 [32, 32] { R256 += 1, R222 += 1, R190 += 1 };
  s2 -> s1 [33, 65535] { R256 += 1, R222 += 1, R190 += 1 };
  s3 -> s1 [0, 8] { R256 += 1, R222 += 1, R190 += 1 };
  s3 -> s2 [0, 65535] { R256 += 1, R222 += 1, R189 += 1, R190 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R256 += 1, R221 += 1, R222 += 1 };
  s3 -> s4 [9, 13] { R256 += 1, R222 += 1, R190 += 1 };
  s3 -> s1 [14, 31] { R256 += 1, R222 += 1, R190 += 1 };
  s3 -> s4 [32, 32] { R256 += 1, R222 += 1, R190 += 1 };
  s3 -> s1 [33, 65535] { R256 += 1, R222 += 1, R190 += 1 };
  s4 -> s1 [0, 65535] { R256 += 1, R222 += 1, R190 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R256 += 1 };
  s7 -> s7 [0, 65535] { R256 += 1, R222 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R256 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R258 += 1, R223 += 1, R224 += 1 };
  s0 -> s2 [0, 65535] { R258 += 1, R224 += 1, R192 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R258 += 1, R224 += 1, R191 += 1, R192 += 1 };
  s0 -> s0 [0, 65535] { R257 += 1, R258 += 1 };
  s1 -> s1 [0, 65535] { R258 += 1, R223 += 1, R224 += 1 };
  s1 -> s2 [0, 65535] { R258 += 1, R224 += 1, R192 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R258 += 1, R224 += 1, R191 += 1, R192 += 1 };
  s2 -> s2 [0, 65535] { R258 += 1, R224 += 1, R192 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R258 += 1, R224 += 1 };
  s2 -> s5 [0, 65535] { R258 += 1 };
  s3 -> s2 [0, 65535] { R258 += 1, R224 += 1, R192 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R258 += 1, R224 += 1, R191 += 1, R192 += 1 };
  s3 -> s5 [0, 65535] { R258 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R258 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R258 += 1, R224 += 1 };
  s6 -> s5 [0, 65535] { R258 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 - R224 = 1 && R3 = R230 && R4 = R236 && R13 = 0 && R14 = R258 && R193 = 0 && R197 = R224 && R198 - R224 = 1 && R199 = R224 && R200 - R224 = 1 && R201 = 0 && R202 = 1 && R203 = 0 && R204 = 1 && R205 - R236 = -1 && R206 = R236 && R207 - R236 = -1 && R208 = R236 && R209 = 0 && R210 = 1 && R211 = 0 && R212 = 1 && R213 = 0 && R214 = R224 && R215 = 0 && R216 = R224 && R217 = 0 && R218 = R224 && R219 = 0 && R220 = R224 && R221 = 0 && R222 = R224 && R223 = 0 && R225 - R258 = 1 && R226 = R230 && R227 - R258 = 1 && R228 = R230 && R229 - R258 = 1 && R231 = 0 && R232 = R236 && R233 = 0 && R234 = R236 && R235 = 0 && R237 = 0 && R238 = R258 && R239 = 0 && R240 = R258 && R241 = 0 && R242 = R258 && R243 = 0 && R244 = R258 && R245 = 0 && R246 = R258 && R247 = 0 && R248 = R258 && R249 = 0 && R250 = R258 && R251 = 0 && R252 = R258 && R253 = 0 && R254 = R258 && R255 = 0 && R256 = R258 && R257 = 0 && R0 != 0 && R1 != 0 && R179 < 1 && R180 < 1 && -1 < R224 && R258 < R230 && 0 < R236 && -1 < R258 && (R1 != R194 || R194 = 1 || R194 < 0) && (R5 != 0 || ((R0 != R186 || R185 - R186 = -1 || R186 < 0) && (R0 = R186 || R0 < 1))) && (R5 != 0 || ((R0 != R188 || R187 - R188 = -1 || R188 < 0) && (R0 = R188 || R0 < 1))) && (R189 != 0 || ((R6 != 0 || ((R0 != R190 || R190 = 1 || R190 < 0) && (R0 = R190 || R190 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R190 || R190 = 1 || R190 < 0) && (R190 != 1 || -1 < R0) && (R0 = R190 || R190 = 1))))) && (R191 != 0 || ((R6 != 0 || ((R0 != R192 || R192 = 1 || R192 < 0) && (R0 = R192 || R192 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R192 || R192 = 1 || R192 < 0) && (R192 != 1 || -1 < R0) && (R0 = R192 || R192 = 1))))) && (R194 != 1 || -1 < R1) && (R195 != 0 || ((R7 != 0 || ((R1 != R196 || R196 = 1 || R196 < 0) && (R1 = R196 || R196 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R196 || R196 = 1 || R196 < 0) && (R196 != 1 || -1 < R1) && (R1 = R196 || R196 = 1))))) && (R1 = R194 || R194 = 1) && (R5 = 0 || (R0 = R186 && R185 - R186 = -1)) && (R5 = 0 || (R0 = R188 && R187 - R188 = -1)) && (R184 = 0 || (R259 = 0 && R260 = 0 && R261 = 0 && R262 = 0)) && (R189 = 0 || (R6 = 0 && R0 < 0)) && (R191 = 0 || (R6 = 0 && R0 < 0)) && (R195 = 0 || (R7 = 0 && R1 < 0));
// End of Parikh automata intersection problem
