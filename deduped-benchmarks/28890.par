// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R9667, R9668, R9669, R9670, R9671, R9672, R9673, R9674, R9889, R9890, R9891, R9892, R9893, R9894, R9895, R9896, R9897, R9898, R9899, R9900, R9901, R9902, R9903, R9904, R9905, R9906, R9907, R9908, R9909, R9910, R9911, R9912, R9913, R9914, R9915, R9916, R9917, R9918, R9919, R9920, R9921, R9922, R9923, R9924, R9925, R9926, R9927, R9928, R9929, R9930, R9931, R9932, R9933, R9934, R9935, R9936, R9937, R9938, R9939, R9940, R9941, R9942, R9943, R9944, R9945, R9946, R9947, R9948, R9949, R9950, R9951, R9952, R9953, R9954, R9955, R9956, R9957, R9958, R9959, R9960, R9961, R9962, R9963, R9964, R9965, R9966, R9967, R9968, R9969, R9970, R9971, R9972, R9973, R9974, R9975, R9976, R9977, R9978, R9979, R9980, R9981, R9982, R9983, R9984, R9985, R9986, R9987, R9988, R9989, R9990, R9991, R9992, R9993, R9994, R9995, R9996;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R9952 += 1 };
  s0 -> s0 [0, 65535] { R9951 += 1, R9952 += 1 };
  s0 -> s2 [46, 46] { R9952 += 1 };
  s0 -> s3 [47, 47] { R9952 += 1 };
  s0 -> s1 [48, 65535] { R9952 += 1 };
  s1 -> s1 [0, 45] { R9952 += 1 };
  s1 -> s2 [46, 46] { R9952 += 1 };
  s1 -> s3 [47, 47] { R9952 += 1 };
  s1 -> s1 [48, 65535] { R9952 += 1 };
  s2 -> s1 [0, 45] { R9952 += 1 };
  s2 -> s2 [46, 46] { R9952 += 1 };
  s2 -> s3 [47, 47] { R9952 += 1 };
  s2 -> s1 [48, 114] { R9952 += 1 };
  s2 -> s8 [115, 115] { R9952 += 1 };
  s2 -> s1 [116, 65535] { R9952 += 1 };
  s3 -> s3 [0, 45] { R9952 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R9952 += 1 };
  s3 -> s3 [47, 65535] { R9952 += 1 };
  s4 -> s3 [0, 45] { R9952 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R9952 += 1 };
  s4 -> s3 [47, 114] { R9952 += 1 };
  s4 -> s5 [115, 115] { R9952 += 1 };
  s4 -> s3 [116, 65535] { R9952 += 1 };
  s5 -> s3 [0, 45] { R9952 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R9952 += 1 };
  s5 -> s3 [47, 110] { R9952 += 1 };
  s5 -> s6 [111, 111] { R9952 += 1 };
  s5 -> s3 [112, 65535] { R9952 += 1 };
  s6 -> s3 [0, 45] { R9952 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R9952 += 1 };
  s6 -> s3 [47, 98] { R9952 += 1 };
  s6 -> s7 [99, 99] { R9952 += 1 };
  s6 -> s3 [100, 65535] { R9952 += 1 };
  s7 -> s3 [0, 45] { R9952 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R9952 += 1 };
  s7 -> s3 [47, 106] { R9952 += 1 };
  s7 -> s3 [108, 65535] { R9952 += 1 };
  s8 -> s1 [0, 45] { R9952 += 1 };
  s8 -> s2 [46, 46] { R9952 += 1 };
  s8 -> s3 [47, 47] { R9952 += 1 };
  s8 -> s1 [48, 110] { R9952 += 1 };
  s8 -> s9 [111, 111] { R9952 += 1 };
  s8 -> s1 [112, 65535] { R9952 += 1 };
  s9 -> s1 [0, 45] { R9952 += 1 };
  s9 -> s2 [46, 46] { R9952 += 1 };
  s9 -> s3 [47, 47] { R9952 += 1 };
  s9 -> s1 [48, 98] { R9952 += 1 };
  s9 -> s10 [99, 99] { R9952 += 1 };
  s9 -> s1 [100, 65535] { R9952 += 1 };
  s10 -> s1 [0, 45] { R9952 += 1 };
  s10 -> s2 [46, 46] { R9952 += 1 };
  s10 -> s3 [47, 47] { R9952 += 1 };
  s10 -> s1 [48, 106] { R9952 += 1 };
  s10 -> s1 [108, 65535] { R9952 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R9954 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R9953 += 1, R9954 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9954 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R9956 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R9955 += 1, R9956 += 1 };
  s0 -> s2 [0, 65535] { R9956 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R9956 += 1 };
  s0 -> s1 [48, 65535] { R9956 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R9956 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R9956 += 1 };
  s1 -> s1 [48, 65535] { R9956 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R9956 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R9956 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R9956 += 1 };
  s2 -> s1 [48, 65535] { R9956 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9956 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R9958 += 1, R9668 += 1 };
  s0 -> s0 [0, 65535] { R9957 += 1, R9958 += 1 };
  s0 -> s2 [0, 65535] { R9958 += 1, R9667 += 1, R9668 += 1 };
  s0 -> s1 [38, 42] { R9958 += 1, R9668 += 1 };
  s0 -> s1 [44, 45] { R9958 += 1, R9668 += 1 };
  s0 -> s1 [47, 62] { R9958 += 1, R9668 += 1 };
  s0 -> s1 [64, 65535] { R9958 += 1, R9668 += 1 };
  s1 -> s1 [0, 36] { R9958 += 1, R9668 += 1 };
  s1 -> s1 [0, 65535] { R9958 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R9958 += 1, R9668 += 1 };
  s1 -> s1 [44, 45] { R9958 += 1, R9668 += 1 };
  s1 -> s1 [47, 62] { R9958 += 1, R9668 += 1 };
  s1 -> s1 [64, 65535] { R9958 += 1, R9668 += 1 };
  s2 -> s1 [0, 36] { R9958 += 1, R9668 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9958 += 1, R9667 += 1, R9668 += 1 };
  s2 -> s1 [38, 42] { R9958 += 1, R9668 += 1 };
  s2 -> s1 [44, 45] { R9958 += 1, R9668 += 1 };
  s2 -> s1 [47, 62] { R9958 += 1, R9668 += 1 };
  s2 -> s1 [64, 65535] { R9958 += 1, R9668 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R9959 += 1, R9960 += 1 };
  s0 -> s1 [0, 65535] { R9960 += 1, R9669 += 1, R9670 += 1 };
  s0 -> s2 [0, 65535] { R9960 += 1, R9670 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9960 += 1, R9669 += 1, R9670 += 1 };
  s1 -> s2 [0, 65535] { R9960 += 1, R9670 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9960 += 1 };
  s2 -> s2 [0, 65535] { R9960 += 1, R9670 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9960 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R9962 += 1, R9671 += 1, R9672 += 1 };
  s0 -> s3 [0, 65535] { R9962 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R9961 += 1, R9962 += 1 };
  s0 -> s4 [63, 63] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R9962 += 1, R9672 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R9962 += 1 };
  s2 -> s1 [0, 62] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9962 += 1, R9671 += 1, R9672 += 1 };
  s2 -> s3 [0, 65535] { R9962 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9962 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s6 [0, 65535] { R9962 += 1 };
  s3 -> s4 [63, 63] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R9962 += 1, R9672 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9962 += 1 };
  s7 -> s7 [0, 65535] { R9962 += 1, R9672 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9962 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9963 += 1, R9964 += 1 };
  s0 -> s1 [0, 65535] { R9964 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R9964 += 1, R9673 += 1, R9674 += 1 };
  s0 -> s3 [0, 65535] { R9964 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R9964 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s3 [0, 65535] { R9964 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9964 += 1 };
  s2 -> s1 [0, 65535] { R9964 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s2 [0, 65535] { R9964 += 1, R9673 += 1, R9674 += 1 };
  s2 -> s3 [0, 65535] { R9964 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R9964 += 1, R9674 += 1 };
  s3 -> s3 [0, 65535] { R9964 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9964 += 1 };
  s4 -> s4 [0, 65535] { R9964 += 1, R9674 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9964 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9964 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R9966 += 1, R9920 += 1 };
  s0 -> s2 [0, 65535] { R9966 += 1, R9919 += 1, R9920 += 1 };
  s0 -> s0 [0, 65535] { R9965 += 1, R9966 += 1 };
  s0 -> s1 [45, 63] { R9966 += 1, R9920 += 1 };
  s0 -> s3 [88, 88] { R9966 += 1, R9920 += 1 };
  s0 -> s1 [89, 65535] { R9966 += 1, R9920 += 1 };
  s1 -> s1 [0, 43] { R9966 += 1, R9920 += 1 };
  s1 -> s1 [45, 63] { R9966 += 1, R9920 += 1 };
  s1 -> s3 [88, 88] { R9966 += 1, R9920 += 1 };
  s1 -> s1 [89, 65535] { R9966 += 1, R9920 += 1 };
  s2 -> s1 [0, 43] { R9966 += 1, R9920 += 1 };
  s2 -> s2 [0, 65535] { R9966 += 1, R9919 += 1, R9920 += 1 };
  s2 -> s1 [45, 63] { R9966 += 1, R9920 += 1 };
  s2 -> s3 [88, 88] { R9966 += 1, R9920 += 1 };
  s2 -> s1 [89, 65535] { R9966 += 1, R9920 += 1 };
  s3 -> s3 [0, 43] { R9966 += 1, R9920 += 1 };
  s3 -> s3 [0, 65535] { R9966 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R9966 += 1, R9920 += 1 };
  s3 -> s3 [88, 65535] { R9966 += 1, R9920 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R9968 += 1, R9922 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9967 += 1, R9968 += 1 };
  s0 -> s2 [0, 65535] { R9968 += 1, R9921 += 1, R9922 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9968 += 1, R9922 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R9968 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9968 += 1, R9922 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R9968 += 1, R9921 += 1, R9922 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9968 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R9970 += 1, R9924 += 1 };
  s0 -> s2 [0, 65535] { R9970 += 1, R9923 += 1, R9924 += 1 };
  s0 -> s0 [0, 65535] { R9969 += 1, R9970 += 1 };
  s0 -> s3 [0, 65535] { R9970 += 1, R9924 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R9970 += 1, R9924 += 1 };
  s0 -> s1 [59, 65535] { R9970 += 1, R9924 += 1 };
  s1 -> s1 [0, 57] { R9970 += 1, R9924 += 1 };
  s1 -> s1 [0, 65535] { R9970 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R9970 += 1, R9924 += 1 };
  s1 -> s1 [59, 65535] { R9970 += 1, R9924 += 1 };
  s2 -> s1 [0, 57] { R9970 += 1, R9924 += 1 };
  s2 -> s2 [0, 65535] { R9970 += 1, R9923 += 1, R9924 += 1 };
  s2 -> s3 [0, 65535] { R9970 += 1, R9924 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R9970 += 1, R9924 += 1 };
  s2 -> s1 [59, 65535] { R9970 += 1, R9924 += 1 };
  s3 -> s1 [0, 57] { R9970 += 1, R9924 += 1 };
  s3 -> s3 [0, 65535] { R9970 += 1, R9924 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9970 += 1 };
  s3 -> s4 [58, 58] { R9970 += 1, R9924 += 1 };
  s3 -> s1 [59, 65535] { R9970 += 1, R9924 += 1 };
  s4 -> s4 [0, 65535] { R9970 += 1, R9924 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9970 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R9972 += 1, R9926 += 1 };
  s0 -> s2 [0, 65535] { R9972 += 1, R9926 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R9971 += 1, R9972 += 1 };
  s0 -> s3 [0, 65535] { R9972 += 1, R9925 += 1, R9926 += 1 };
  s0 -> s4 [88, 88] { R9972 += 1, R9926 += 1 };
  s0 -> s1 [89, 65535] { R9972 += 1, R9926 += 1 };
  s1 -> s1 [0, 87] { R9972 += 1, R9926 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9972 += 1 };
  s1 -> s4 [88, 88] { R9972 += 1, R9926 += 1 };
  s1 -> s1 [89, 65535] { R9972 += 1, R9926 += 1 };
  s2 -> s1 [0, 87] { R9972 += 1, R9926 += 1 };
  s2 -> s2 [0, 65535] { R9972 += 1, R9926 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9972 += 1 };
  s2 -> s4 [88, 88] { R9972 += 1, R9926 += 1 };
  s2 -> s1 [89, 65535] { R9972 += 1, R9926 += 1 };
  s3 -> s1 [0, 87] { R9972 += 1, R9926 += 1 };
  s3 -> s2 [0, 65535] { R9972 += 1, R9926 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R9972 += 1, R9925 += 1, R9926 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [88, 88] { R9972 += 1, R9926 += 1 };
  s3 -> s1 [89, 65535] { R9972 += 1, R9926 += 1 };
  s4 -> s4 [0, 65535] { R9972 += 1, R9926 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9972 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R9973 += 1, R9974 += 1 };
  s0 -> s2 [0, 65535] { R9974 += 1, R9928 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R9974 += 1, R9927 += 1, R9928 += 1 };
  s0 -> s4 [91, 91] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9974 += 1 };
  s1 -> s7 [0, 65535] { R9974 += 1, R9928 += 1 };
  s1 -> s1 [0, 65535] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9974 += 1 };
  s2 -> s2 [0, 65535] { R9974 += 1, R9928 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9974 += 1, R9928 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R9974 += 1, R9927 += 1, R9928 += 1 };
  s3 -> s4 [91, 91] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R9974 += 1, R9928 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9974 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9974 += 1 };
  s7 -> s7 [0, 65535] { R9974 += 1, R9928 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9976 += 1, R9930 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R9976 += 1, R9930 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R9976 += 1, R9929 += 1, R9930 += 1 };
  s0 -> s0 [0, 65535] { R9975 += 1, R9976 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9976 += 1, R9930 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s5 [0, 65535] { R9976 += 1 };
  s1 -> s2 [0, 65535] { R9976 += 1, R9930 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9976 += 1 };
  s2 -> s2 [0, 65535] { R9976 += 1, R9930 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R9976 += 1, R9930 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9976 += 1, R9930 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R9976 += 1, R9930 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R9976 += 1, R9929 += 1, R9930 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9976 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9976 += 1 };
  s6 -> s6 [0, 65535] { R9976 += 1, R9930 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9978 += 1, R9931 += 1, R9932 += 1 };
  s0 -> s2 [0, 65535] { R9978 += 1, R9932 += 1, R9896 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R9977 += 1, R9978 += 1 };
  s0 -> s3 [0, 65535] { R9978 += 1, R9932 += 1, R9895 += 1, R9896 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9978 += 1, R9931 += 1, R9932 += 1 };
  s1 -> s2 [0, 65535] { R9978 += 1, R9932 += 1, R9896 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R9978 += 1, R9932 += 1, R9895 += 1, R9896 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R9978 += 1, R9932 += 1 };
  s2 -> s2 [0, 65535] { R9978 += 1, R9932 += 1, R9896 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535] { R9978 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9978 += 1, R9932 += 1, R9896 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R9978 += 1, R9932 += 1, R9895 += 1, R9896 += 1 };
  s3 -> s5 [0, 65535] { R9978 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9978 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9978 += 1, R9932 += 1 };
  s6 -> s5 [0, 65535] { R9978 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9980 += 1, R9933 += 1, R9934 += 1 };
  s0 -> s2 [0, 65535] { R9980 += 1, R9934 += 1, R9897 += 1, R9898 += 1 };
  s0 -> s0 [0, 65535] { R9979 += 1, R9980 += 1 };
  s0 -> s3 [108, 108] { R9980 += 1, R9934 += 1, R9898 += 1 };
  s1 -> s1 [0, 65535] { R9980 += 1, R9933 += 1, R9934 += 1 };
  s1 -> s2 [0, 65535] { R9980 += 1, R9934 += 1, R9897 += 1, R9898 += 1 };
  s1 -> s3 [108, 108] { R9980 += 1, R9934 += 1, R9898 += 1 };
  s2 -> s2 [0, 65535] { R9980 += 1, R9934 += 1, R9897 += 1, R9898 += 1 };
  s2 -> s3 [108, 108] { R9980 += 1, R9934 += 1, R9898 += 1 };
  s3 -> s4 [111, 111] { R9980 += 1, R9934 += 1, R9898 += 1 };
  s4 -> s5 [99, 99] { R9980 += 1, R9934 += 1, R9898 += 1 };
  s5 -> s6 [97, 97] { R9980 += 1, R9934 += 1, R9898 += 1 };
  s6 -> s7 [0, 65535] { R9980 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9980 += 1, R9934 += 1 };
  s7 -> s7 [0, 65535] { R9980 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s6, s7, s8;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s0 -> s2 [0, 65535] { R9982 += 1, R9935 += 1, R9936 += 1 };
  s0 -> s0 [0, 65535] { R9981 += 1, R9982 += 1 };
  s0 -> s3 [0, 65535] { R9982 += 1, R9936 += 1, R9903 += 1, R9904 += 1 };
  s0 -> s4 [88, 88] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s0 -> s1 [89, 65535] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s1 -> s1 [0, 87] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s1 -> s4 [88, 88] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s1 -> s1 [89, 65535] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s2 -> s1 [0, 87] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s2 -> s2 [0, 65535] { R9982 += 1, R9935 += 1, R9936 += 1 };
  s2 -> s3 [0, 65535] { R9982 += 1, R9936 += 1, R9903 += 1, R9904 += 1 };
  s2 -> s4 [88, 88] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s2 -> s1 [89, 65535] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s3 -> s1 [0, 87] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s3 -> s3 [0, 65535] { R9982 += 1, R9936 += 1, R9903 += 1, R9904 += 1 };
  s3 -> s4 [88, 88] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s3 -> s1 [89, 65535] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s4 -> s5 [0, 65535] { R9982 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9982 += 1, R9936 += 1 };
  s4 -> s4 [0, 65535] { R9982 += 1, R9936 += 1, R9904 += 1 };
  s5 -> s5 [0, 65535] { R9982 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9982 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9982 += 1, R9936 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9984 += 1, R9938 += 1, R9905 += 1, R9906 += 1 };
  s0 -> s0 [0, 65535] { R9983 += 1, R9984 += 1 };
  s0 -> s2 [0, 65535] { R9984 += 1, R9937 += 1, R9938 += 1 };
  s0 -> s3 [0, 65535] { R9984 += 1, R9938 += 1, R9906 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R9984 += 1, R9938 += 1, R9905 += 1, R9906 += 1 };
  s1 -> s5 [0, 65535] { R9984 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R9984 += 1, R9938 += 1, R9906 += 1, R1 += 1 };
  s2 -> s1 [0, 65535] { R9984 += 1, R9938 += 1, R9905 += 1, R9906 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9984 += 1, R9937 += 1, R9938 += 1 };
  s2 -> s3 [0, 65535] { R9984 += 1, R9938 += 1, R9906 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R9984 += 1, R9938 += 1 };
  s3 -> s5 [0, 65535] { R9984 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9984 += 1, R9938 += 1, R9906 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R9984 += 1, R9938 += 1 };
  s4 -> s5 [0, 65535] { R9984 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9984 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s0 -> s0 [0, 65535] { R9985 += 1, R9986 += 1 };
  s0 -> s2 [0, 65535] { R9986 += 1, R9940 += 1, R9907 += 1, R9908 += 1 };
  s0 -> s3 [0, 65535] { R9986 += 1, R9940 += 1, R9908 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R9986 += 1, R9939 += 1, R9940 += 1 };
  s0 -> s5 [88, 88] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s0 -> s1 [89, 65535] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s1 -> s1 [0, 87] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9986 += 1, R9940 += 1 };
  s1 -> s8 [0, 65535] { R9986 += 1 };
  s1 -> s5 [88, 88] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s1 -> s1 [89, 65535] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s2 -> s1 [0, 87] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s2 -> s2 [0, 65535] { R9986 += 1, R9940 += 1, R9907 += 1, R9908 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R9986 += 1, R9940 += 1, R9908 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R9986 += 1 };
  s2 -> s5 [88, 88] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s2 -> s1 [89, 65535] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s3 -> s1 [0, 87] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s3 -> s7 [0, 65535] { R9986 += 1, R9940 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9986 += 1, R9940 += 1, R9908 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R9986 += 1 };
  s3 -> s5 [88, 88] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s3 -> s1 [89, 65535] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s4 -> s1 [0, 87] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s4 -> s2 [0, 65535] { R9986 += 1, R9940 += 1, R9907 += 1, R9908 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R9986 += 1, R9940 += 1, R9908 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R9986 += 1, R9939 += 1, R9940 += 1 };
  s4 -> s5 [88, 88] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s4 -> s1 [89, 65535] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s5 -> s5 [0, 65535] { R9986 += 1, R9940 += 1, R9908 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9986 += 1, R9940 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [0, 65535] { R9986 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9986 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s0 -> s2 [0, 65535] { R9988 += 1, R9941 += 1, R9942 += 1 };
  s0 -> s3 [0, 65535] { R9988 += 1, R9942 += 1, R9909 += 1, R9910 += 1 };
  s0 -> s4 [0, 65535] { R9988 += 1, R9942 += 1, R9910 += 1, R9889 += 1, R9890 += 1 };
  s0 -> s0 [0, 65535] { R9987 += 1, R9988 += 1 };
  s0 -> s1 [89, 65535] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s1 -> s1 [0, 87] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9988 += 1, R9942 += 1, R9910 += 1 };
  s1 -> s6 [0, 65535] { R9988 += 1 };
  s1 -> s7 [0, 65535] { R9988 += 1, R9942 += 1 };
  s1 -> s1 [89, 65535] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s2 -> s1 [0, 87] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9988 += 1, R9941 += 1, R9942 += 1 };
  s2 -> s3 [0, 65535] { R9988 += 1, R9942 += 1, R9909 += 1, R9910 += 1 };
  s2 -> s4 [0, 65535] { R9988 += 1, R9942 += 1, R9910 += 1, R9889 += 1, R9890 += 1 };
  s2 -> s1 [89, 65535] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s3 -> s1 [0, 87] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9988 += 1 };
  s3 -> s3 [0, 65535] { R9988 += 1, R9942 += 1, R9909 += 1, R9910 += 1 };
  s3 -> s4 [0, 65535] { R9988 += 1, R9942 += 1, R9910 += 1, R9889 += 1, R9890 += 1 };
  s3 -> s1 [89, 65535] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s4 -> s1 [0, 87] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9988 += 1 };
  s4 -> s4 [0, 65535] { R9988 += 1, R9942 += 1, R9910 += 1, R9889 += 1, R9890 += 1 };
  s4 -> s7 [0, 65535] { R9988 += 1, R9942 += 1 };
  s4 -> s1 [89, 65535] { R9988 += 1, R9942 += 1, R9910 += 1, R9890 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9988 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9988 += 1 };
  s7 -> s7 [0, 65535] { R9988 += 1, R9942 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9990 += 1, R9944 += 1, R9911 += 1, R9912 += 1 };
  s0 -> s0 [0, 65535] { R9989 += 1, R9990 += 1 };
  s0 -> s2 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1, R9891 += 1, R9892 += 1 };
  s0 -> s3 [0, 65535] { R9990 += 1, R9943 += 1, R9944 += 1 };
  s0 -> s4 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1, R9892 += 1, R5988 += 1 };
  s1 -> s1 [0, 65535] { R9990 += 1, R9944 += 1, R9911 += 1, R9912 += 1 };
  s1 -> s2 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1, R9891 += 1, R9892 += 1 };
  s1 -> s7 [0, 65535] { R9990 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1, R9892 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1, R9891 += 1, R9892 += 1 };
  s2 -> s6 [0, 65535] { R9990 += 1, R9944 += 1 };
  s2 -> s7 [0, 65535] { R9990 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1, R9892 += 1, R5988 += 1 };
  s3 -> s1 [0, 65535] { R9990 += 1, R9944 += 1, R9911 += 1, R9912 += 1 };
  s3 -> s2 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1, R9891 += 1, R9892 += 1 };
  s3 -> s3 [0, 65535] { R9990 += 1, R9943 += 1, R9944 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1, R9892 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1 };
  s4 -> s6 [0, 65535] { R9990 += 1, R9944 += 1 };
  s4 -> s7 [0, 65535] { R9990 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1, R9892 += 1, R5988 += 1 };
  s5 -> s5 [0, 65535] { R9990 += 1, R9944 += 1, R9912 += 1 };
  s5 -> s6 [0, 65535] { R9990 += 1, R9944 += 1 };
  s5 -> s7 [0, 65535] { R9990 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9990 += 1, R9944 += 1 };
  s6 -> s7 [0, 65535] { R9990 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9990 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9992 += 1, R9945 += 1, R9946 += 1 };
  s0 -> s2 [0, 65535] { R9992 += 1, R9946 += 1, R9913 += 1, R9914 += 1 };
  s0 -> s3 [0, 65535] { R9992 += 1, R9946 += 1, R9914 += 1, R9893 += 1, R9894 += 1 };
  s0 -> s0 [0, 65535] { R9991 += 1, R9992 += 1 };
  s0 -> s4 [115, 115] { R9992 += 1, R9946 += 1, R9914 += 1, R9894 += 1 };
  s1 -> s1 [0, 65535] { R9992 += 1, R9945 += 1, R9946 += 1 };
  s1 -> s2 [0, 65535] { R9992 += 1, R9946 += 1, R9913 += 1, R9914 += 1 };
  s1 -> s3 [0, 65535] { R9992 += 1, R9946 += 1, R9914 += 1, R9893 += 1, R9894 += 1 };
  s1 -> s4 [115, 115] { R9992 += 1, R9946 += 1, R9914 += 1, R9894 += 1 };
  s2 -> s2 [0, 65535] { R9992 += 1, R9946 += 1, R9913 += 1, R9914 += 1 };
  s2 -> s3 [0, 65535] { R9992 += 1, R9946 += 1, R9914 += 1, R9893 += 1, R9894 += 1 };
  s2 -> s4 [115, 115] { R9992 += 1, R9946 += 1, R9914 += 1, R9894 += 1 };
  s3 -> s3 [0, 65535] { R9992 += 1, R9946 += 1, R9914 += 1, R9893 += 1, R9894 += 1 };
  s3 -> s4 [115, 115] { R9992 += 1, R9946 += 1, R9914 += 1, R9894 += 1 };
  s4 -> s5 [116, 116] { R9992 += 1, R9946 += 1, R9914 += 1, R9894 += 1 };
  s5 -> s6 [0, 65535] { R9992 += 1 };
  s5 -> s5 [0, 65535] { R9992 += 1, R9946 += 1, R9914 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R9992 += 1, R9946 += 1 };
  s6 -> s6 [0, 65535] { R9992 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R9992 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9992 += 1, R9946 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9994 += 1, R9948 += 1, R9915 += 1, R9916 += 1 };
  s0 -> s0 [0, 65535] { R9993 += 1, R9994 += 1 };
  s0 -> s2 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1, R9899 += 1, R9900 += 1 };
  s0 -> s3 [0, 65535] { R9994 += 1, R9947 += 1, R9948 += 1 };
  s0 -> s4 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1, R9900 += 1, R5989 += 1 };
  s1 -> s1 [0, 65535] { R9994 += 1, R9948 += 1, R9915 += 1, R9916 += 1 };
  s1 -> s6 [0, 65535] { R9994 += 1 };
  s1 -> s2 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1, R9899 += 1, R9900 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1, R9900 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535] { R9994 += 1, R9948 += 1 };
  s2 -> s6 [0, 65535] { R9994 += 1 };
  s2 -> s2 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1, R9899 += 1, R9900 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1, R9900 += 1, R5989 += 1 };
  s3 -> s1 [0, 65535] { R9994 += 1, R9948 += 1, R9915 += 1, R9916 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s2 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1, R9899 += 1, R9900 += 1 };
  s3 -> s3 [0, 65535] { R9994 += 1, R9947 += 1, R9948 += 1 };
  s3 -> s4 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1, R9900 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535] { R9994 += 1, R9948 += 1 };
  s4 -> s6 [0, 65535] { R9994 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1, R9900 += 1, R5989 += 1 };
  s4 -> s8 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1 };
  s5 -> s5 [0, 65535] { R9994 += 1, R9948 += 1 };
  s5 -> s6 [0, 65535] { R9994 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9994 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R9994 += 1, R9948 += 1 };
  s8 -> s6 [0, 65535] { R9994 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9994 += 1, R9948 += 1, R9916 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9996 += 1, R9950 += 1, R9917 += 1, R9918 += 1 };
  s0 -> s0 [0, 65535] { R9995 += 1, R9996 += 1 };
  s0 -> s2 [0, 65535] { R9996 += 1, R9949 += 1, R9950 += 1 };
  s0 -> s3 [0, 65535] { R9996 += 1, R9950 += 1, R9918 += 1, R9901 += 1, R9902 += 1 };
  s0 -> s4 [108, 108] { R9996 += 1, R9950 += 1, R9918 += 1, R9902 += 1 };
  s1 -> s1 [0, 65535] { R9996 += 1, R9950 += 1, R9917 += 1, R9918 += 1 };
  s1 -> s3 [0, 65535] { R9996 += 1, R9950 += 1, R9918 += 1, R9901 += 1, R9902 += 1 };
  s1 -> s4 [108, 108] { R9996 += 1, R9950 += 1, R9918 += 1, R9902 += 1 };
  s2 -> s1 [0, 65535] { R9996 += 1, R9950 += 1, R9917 += 1, R9918 += 1 };
  s2 -> s2 [0, 65535] { R9996 += 1, R9949 += 1, R9950 += 1 };
  s2 -> s3 [0, 65535] { R9996 += 1, R9950 += 1, R9918 += 1, R9901 += 1, R9902 += 1 };
  s2 -> s4 [108, 108] { R9996 += 1, R9950 += 1, R9918 += 1, R9902 += 1 };
  s3 -> s3 [0, 65535] { R9996 += 1, R9950 += 1, R9918 += 1, R9901 += 1, R9902 += 1 };
  s3 -> s4 [108, 108] { R9996 += 1, R9950 += 1, R9918 += 1, R9902 += 1 };
  s4 -> s5 [104, 104] { R9996 += 1, R9950 += 1, R9918 += 1, R9902 += 1 };
  s5 -> s6 [111, 111] { R9996 += 1, R9950 += 1, R9918 += 1, R9902 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R9996 += 1, R9950 += 1 };
  s6 -> s6 [0, 65535] { R9996 += 1, R9950 += 1, R9918 += 1 };
  s6 -> s9 [0, 65535] { R9996 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9996 += 1, R9950 += 1 };
  s8 -> s9 [0, 65535] { R9996 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R9996 += 1 };
  accepting s6, s7, s8, s9;
};
};
constraint R1 = R9894 && R2 = R9918 && R3 = R9674 && R4 = R9996 && R15 = 0 && R16 = R9950 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R9667 - R9950 = 1 && R9668 = R9674 && R9669 - R9950 = 1 && R9670 = R9674 && R9671 - R9950 = 1 && R9672 = R9674 && R9673 - R9950 = 1 && R9893 = 0 && R9897 = 0 && R9898 = 0 && R9901 = 0 && R9902 = 0 && R9903 = 0 && R9904 = R9918 && R9905 = 0 && R9906 = R9918 && R9907 = 0 && R9908 = R9918 && R9909 = 0 && R9910 = R9918 && R9911 = 0 && R9912 = R9918 && R9913 = 0 && R9914 = R9918 && R9915 = 0 && R9916 = R9918 && R9917 = 0 && R9919 = 0 && R9920 = R9950 && R9921 = 0 && R9922 = R9950 && R9923 = 0 && R9924 = R9950 && R9925 = 0 && R9926 = R9950 && R9927 = 0 && R9928 = R9950 && R9929 = 0 && R9930 = R9950 && R9931 = 0 && R9932 = R9950 && R9933 = 0 && R9934 = R9950 && R9935 = 0 && R9936 = R9950 && R9937 = 0 && R9938 = R9950 && R9939 = 0 && R9940 = R9950 && R9941 = 0 && R9942 = R9950 && R9943 = 0 && R9944 = R9950 && R9945 = 0 && R9946 = R9950 && R9947 = 0 && R9948 = R9950 && R9949 = 0 && R9951 = 10 && R9952 = R9996 && R9953 = 10 && R9954 = R9996 && R9955 = 10 && R9956 = R9996 && R9957 = 10 && R9958 = R9996 && R9959 = 10 && R9960 = R9996 && R9961 = 10 && R9962 = R9996 && R9963 = 10 && R9964 = R9996 && R9965 = 10 && R9966 = R9996 && R9967 = 10 && R9968 = R9996 && R9969 = 10 && R9970 = R9996 && R9971 = 10 && R9972 = R9996 && R9973 = 10 && R9974 = R9996 && R9975 = 10 && R9976 = R9996 && R9977 = 10 && R9978 = R9996 && R9979 = 10 && R9980 = R9996 && R9981 = 10 && R9982 = R9996 && R9983 = 10 && R9984 = R9996 && R9985 = 10 && R9986 = R9996 && R9987 = 10 && R9988 = R9996 && R9989 = 10 && R9990 = R9996 && R9991 = 10 && R9992 = R9996 && R9993 = 10 && R9994 = R9996 && R9995 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R9950 < R9674 && -1 < R9894 && 0 < R9918 && -1 < R9950 && 9 < R9996 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R9889 != 0 || R9890 = R9894 || (R5988 = 0 && R9894 = 0)) && (R9891 != 0 || R9892 = R9894 || (R5988 = 0 && R9894 = 0)) && (R5989 = 0 || (R9899 = 0 && R9900 = 0)) && (R5990 = 0 || (R9895 = 0 && R9896 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R9889 = 0 || (R5988 = 0 && R9894 = 0)) && (R9891 = 0 || (R5988 = 0 && R9894 = 0));
// End of Parikh automata intersection problem
