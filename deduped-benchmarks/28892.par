// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R10187, R10188, R10189, R10190, R10191, R10192, R10193, R10194, R10195, R10196, R10197, R10198, R10199, R10200, R10201, R10202, R10203, R10204, R10205, R10206, R10207, R10208, R10209, R10210, R10211, R10212, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R9667, R9668, R9669, R9670, R9671, R9672, R9673, R9674;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R10168 += 1 };
  s0 -> s0 [0, 65535] { R10167 += 1, R10168 += 1 };
  s0 -> s2 [46, 46] { R10168 += 1 };
  s0 -> s3 [47, 47] { R10168 += 1 };
  s0 -> s1 [48, 65535] { R10168 += 1 };
  s1 -> s1 [0, 45] { R10168 += 1 };
  s1 -> s2 [46, 46] { R10168 += 1 };
  s1 -> s3 [47, 47] { R10168 += 1 };
  s1 -> s1 [48, 65535] { R10168 += 1 };
  s2 -> s1 [0, 45] { R10168 += 1 };
  s2 -> s2 [46, 46] { R10168 += 1 };
  s2 -> s3 [47, 47] { R10168 += 1 };
  s2 -> s1 [48, 114] { R10168 += 1 };
  s2 -> s8 [115, 115] { R10168 += 1 };
  s2 -> s1 [116, 65535] { R10168 += 1 };
  s3 -> s3 [0, 45] { R10168 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R10168 += 1 };
  s3 -> s3 [47, 65535] { R10168 += 1 };
  s4 -> s3 [0, 45] { R10168 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R10168 += 1 };
  s4 -> s3 [47, 114] { R10168 += 1 };
  s4 -> s5 [115, 115] { R10168 += 1 };
  s4 -> s3 [116, 65535] { R10168 += 1 };
  s5 -> s3 [0, 45] { R10168 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R10168 += 1 };
  s5 -> s3 [47, 110] { R10168 += 1 };
  s5 -> s6 [111, 111] { R10168 += 1 };
  s5 -> s3 [112, 65535] { R10168 += 1 };
  s6 -> s3 [0, 45] { R10168 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R10168 += 1 };
  s6 -> s3 [47, 98] { R10168 += 1 };
  s6 -> s7 [99, 99] { R10168 += 1 };
  s6 -> s3 [100, 65535] { R10168 += 1 };
  s7 -> s3 [0, 45] { R10168 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R10168 += 1 };
  s7 -> s3 [47, 106] { R10168 += 1 };
  s7 -> s3 [108, 65535] { R10168 += 1 };
  s8 -> s1 [0, 45] { R10168 += 1 };
  s8 -> s2 [46, 46] { R10168 += 1 };
  s8 -> s3 [47, 47] { R10168 += 1 };
  s8 -> s1 [48, 110] { R10168 += 1 };
  s8 -> s9 [111, 111] { R10168 += 1 };
  s8 -> s1 [112, 65535] { R10168 += 1 };
  s9 -> s1 [0, 45] { R10168 += 1 };
  s9 -> s2 [46, 46] { R10168 += 1 };
  s9 -> s3 [47, 47] { R10168 += 1 };
  s9 -> s1 [48, 98] { R10168 += 1 };
  s9 -> s10 [99, 99] { R10168 += 1 };
  s9 -> s1 [100, 65535] { R10168 += 1 };
  s10 -> s1 [0, 45] { R10168 += 1 };
  s10 -> s2 [46, 46] { R10168 += 1 };
  s10 -> s3 [47, 47] { R10168 += 1 };
  s10 -> s1 [48, 106] { R10168 += 1 };
  s10 -> s1 [108, 65535] { R10168 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10169 += 1, R10170 += 1 };
  s0 -> s1 [0, 65535] { R10170 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10170 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R10172 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10171 += 1, R10172 += 1 };
  s0 -> s2 [0, 65535] { R10172 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R10172 += 1 };
  s0 -> s1 [48, 65535] { R10172 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R10172 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R10172 += 1 };
  s1 -> s1 [48, 65535] { R10172 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R10172 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R10172 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R10172 += 1 };
  s2 -> s1 [48, 65535] { R10172 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R10172 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R10174 += 1, R9668 += 1 };
  s0 -> s0 [0, 65535] { R10173 += 1, R10174 += 1 };
  s0 -> s2 [0, 65535] { R10174 += 1, R9667 += 1, R9668 += 1 };
  s0 -> s1 [38, 42] { R10174 += 1, R9668 += 1 };
  s0 -> s1 [44, 45] { R10174 += 1, R9668 += 1 };
  s0 -> s1 [47, 62] { R10174 += 1, R9668 += 1 };
  s0 -> s1 [64, 65535] { R10174 += 1, R9668 += 1 };
  s1 -> s1 [0, 36] { R10174 += 1, R9668 += 1 };
  s1 -> s1 [0, 65535] { R10174 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R10174 += 1, R9668 += 1 };
  s1 -> s1 [44, 45] { R10174 += 1, R9668 += 1 };
  s1 -> s1 [47, 62] { R10174 += 1, R9668 += 1 };
  s1 -> s1 [64, 65535] { R10174 += 1, R9668 += 1 };
  s2 -> s1 [0, 36] { R10174 += 1, R9668 += 1 };
  s2 -> s2 [0, 65535] { R10174 += 1, R9667 += 1, R9668 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R10174 += 1, R9668 += 1 };
  s2 -> s1 [44, 45] { R10174 += 1, R9668 += 1 };
  s2 -> s1 [47, 62] { R10174 += 1, R9668 += 1 };
  s2 -> s1 [64, 65535] { R10174 += 1, R9668 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R10176 += 1, R9669 += 1, R9670 += 1 };
  s0 -> s0 [0, 65535] { R10175 += 1, R10176 += 1 };
  s0 -> s2 [0, 65535] { R10176 += 1, R9670 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R10176 += 1, R9669 += 1, R9670 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10176 += 1, R9670 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10176 += 1 };
  s2 -> s2 [0, 65535] { R10176 += 1, R9670 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10176 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R10177 += 1, R10178 += 1 };
  s0 -> s2 [0, 65535] { R10178 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R10178 += 1, R9671 += 1, R9672 += 1 };
  s0 -> s4 [63, 63] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R10178 += 1 };
  s1 -> s7 [0, 65535] { R10178 += 1, R9672 += 1 };
  s1 -> s1 [0, 65535] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R10178 += 1 };
  s2 -> s2 [0, 65535] { R10178 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R10178 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R10178 += 1, R9671 += 1, R9672 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R10178 += 1, R9672 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10178 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10178 += 1 };
  s7 -> s7 [0, 65535] { R10178 += 1, R9672 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10180 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R10179 += 1, R10180 += 1 };
  s0 -> s2 [0, 65535] { R10180 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R10180 += 1, R9673 += 1, R9674 += 1 };
  s1 -> s1 [0, 65535] { R10180 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10180 += 1, R9674 += 1 };
  s1 -> s5 [0, 65535] { R10180 += 1 };
  s2 -> s1 [0, 65535] { R10180 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10180 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535] { R10180 += 1 };
  s3 -> s1 [0, 65535] { R10180 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10180 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s3 [0, 65535] { R10180 += 1, R9673 += 1, R9674 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10180 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10180 += 1, R9674 += 1 };
  s6 -> s5 [0, 65535] { R10180 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R10182 += 1, R10136 += 1 };
  s0 -> s2 [0, 65535] { R10182 += 1, R10135 += 1, R10136 += 1 };
  s0 -> s0 [0, 65535] { R10181 += 1, R10182 += 1 };
  s0 -> s1 [45, 63] { R10182 += 1, R10136 += 1 };
  s0 -> s3 [88, 88] { R10182 += 1, R10136 += 1 };
  s0 -> s1 [89, 65535] { R10182 += 1, R10136 += 1 };
  s1 -> s1 [0, 43] { R10182 += 1, R10136 += 1 };
  s1 -> s1 [45, 63] { R10182 += 1, R10136 += 1 };
  s1 -> s3 [88, 88] { R10182 += 1, R10136 += 1 };
  s1 -> s1 [89, 65535] { R10182 += 1, R10136 += 1 };
  s2 -> s1 [0, 43] { R10182 += 1, R10136 += 1 };
  s2 -> s2 [0, 65535] { R10182 += 1, R10135 += 1, R10136 += 1 };
  s2 -> s1 [45, 63] { R10182 += 1, R10136 += 1 };
  s2 -> s3 [88, 88] { R10182 += 1, R10136 += 1 };
  s2 -> s1 [89, 65535] { R10182 += 1, R10136 += 1 };
  s3 -> s3 [0, 43] { R10182 += 1, R10136 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10182 += 1 };
  s3 -> s3 [45, 63] { R10182 += 1, R10136 += 1 };
  s3 -> s3 [88, 65535] { R10182 += 1, R10136 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R10184 += 1, R10137 += 1, R10138 += 1 };
  s0 -> s2 [0, 65535] { R10184 += 1, R10138 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10183 += 1, R10184 += 1 };
  s1 -> s1 [0, 65535] { R10184 += 1, R10137 += 1, R10138 += 1 };
  s1 -> s2 [0, 65535] { R10184 += 1, R10138 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10184 += 1 };
  s2 -> s2 [0, 65535] { R10184 += 1, R10138 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10184 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R10186 += 1, R10140 += 1 };
  s0 -> s0 [0, 65535] { R10185 += 1, R10186 += 1 };
  s0 -> s2 [0, 65535] { R10186 += 1, R10140 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R10186 += 1, R10139 += 1, R10140 += 1 };
  s0 -> s4 [58, 58] { R10186 += 1, R10140 += 1 };
  s0 -> s1 [59, 65535] { R10186 += 1, R10140 += 1 };
  s1 -> s1 [0, 57] { R10186 += 1, R10140 += 1 };
  s1 -> s1 [0, 65535] { R10186 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R10186 += 1, R10140 += 1 };
  s1 -> s1 [59, 65535] { R10186 += 1, R10140 += 1 };
  s2 -> s1 [0, 57] { R10186 += 1, R10140 += 1 };
  s2 -> s6 [0, 65535] { R10186 += 1 };
  s2 -> s2 [0, 65535] { R10186 += 1, R10140 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R10186 += 1, R10140 += 1 };
  s2 -> s1 [59, 65535] { R10186 += 1, R10140 += 1 };
  s3 -> s1 [0, 57] { R10186 += 1, R10140 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10186 += 1, R10140 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R10186 += 1, R10139 += 1, R10140 += 1 };
  s3 -> s4 [58, 58] { R10186 += 1, R10140 += 1 };
  s3 -> s1 [59, 65535] { R10186 += 1, R10140 += 1 };
  s4 -> s4 [0, 65535] { R10186 += 1, R10140 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10186 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R10188 += 1, R10142 += 1 };
  s0 -> s2 [0, 65535] { R10188 += 1, R10142 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R10188 += 1, R10141 += 1, R10142 += 1 };
  s0 -> s0 [0, 65535] { R10187 += 1, R10188 += 1 };
  s0 -> s4 [88, 88] { R10188 += 1, R10142 += 1 };
  s0 -> s1 [89, 65535] { R10188 += 1, R10142 += 1 };
  s1 -> s1 [0, 87] { R10188 += 1, R10142 += 1 };
  s1 -> s1 [0, 65535] { R10188 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R10188 += 1, R10142 += 1 };
  s1 -> s1 [89, 65535] { R10188 += 1, R10142 += 1 };
  s2 -> s1 [0, 87] { R10188 += 1, R10142 += 1 };
  s2 -> s2 [0, 65535] { R10188 += 1, R10142 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10188 += 1 };
  s2 -> s4 [88, 88] { R10188 += 1, R10142 += 1 };
  s2 -> s1 [89, 65535] { R10188 += 1, R10142 += 1 };
  s3 -> s1 [0, 87] { R10188 += 1, R10142 += 1 };
  s3 -> s2 [0, 65535] { R10188 += 1, R10142 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R10188 += 1, R10141 += 1, R10142 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [88, 88] { R10188 += 1, R10142 += 1 };
  s3 -> s1 [89, 65535] { R10188 += 1, R10142 += 1 };
  s4 -> s4 [0, 65535] { R10188 += 1, R10142 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10188 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R10190 += 1, R10143 += 1, R10144 += 1 };
  s0 -> s0 [0, 65535] { R10189 += 1, R10190 += 1 };
  s0 -> s3 [0, 65535] { R10190 += 1, R10144 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R10190 += 1, R10144 += 1 };
  s1 -> s5 [0, 65535] { R10190 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R10190 += 1, R10143 += 1, R10144 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10190 += 1, R10144 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R10190 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10190 += 1, R10144 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R10190 += 1, R10144 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R10190 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10190 += 1, R10144 += 1 };
  s7 -> s5 [0, 65535] { R10190 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10192 += 1, R10146 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R10191 += 1, R10192 += 1 };
  s0 -> s2 [0, 65535] { R10192 += 1, R10146 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R10192 += 1, R10145 += 1, R10146 += 1 };
  s1 -> s1 [0, 65535] { R10192 += 1, R10146 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s5 [0, 65535] { R10192 += 1 };
  s1 -> s2 [0, 65535] { R10192 += 1, R10146 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10192 += 1 };
  s2 -> s6 [0, 65535] { R10192 += 1, R10146 += 1 };
  s2 -> s2 [0, 65535] { R10192 += 1, R10146 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10192 += 1, R10146 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R10192 += 1, R10146 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R10192 += 1, R10145 += 1, R10146 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10192 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10192 += 1 };
  s6 -> s6 [0, 65535] { R10192 += 1, R10146 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10194 += 1, R10147 += 1, R10148 += 1 };
  s0 -> s0 [0, 65535] { R10193 += 1, R10194 += 1 };
  s0 -> s2 [0, 65535] { R10194 += 1, R10148 += 1, R10112 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R10194 += 1, R10148 += 1, R10111 += 1, R10112 += 1 };
  s1 -> s1 [0, 65535] { R10194 += 1, R10147 += 1, R10148 += 1 };
  s1 -> s2 [0, 65535] { R10194 += 1, R10148 += 1, R10112 += 1, R5990 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10194 += 1, R10148 += 1, R10111 += 1, R10112 += 1 };
  s2 -> s6 [0, 65535] { R10194 += 1, R10148 += 1 };
  s2 -> s4 [0, 65535] { R10194 += 1 };
  s2 -> s2 [0, 65535] { R10194 += 1, R10148 += 1, R10112 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10194 += 1 };
  s3 -> s2 [0, 65535] { R10194 += 1, R10148 += 1, R10112 += 1, R5990 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10194 += 1, R10148 += 1, R10111 += 1, R10112 += 1 };
  s4 -> s4 [0, 65535] { R10194 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10194 += 1, R10148 += 1 };
  s6 -> s4 [0, 65535] { R10194 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10196 += 1, R10150 += 1, R10113 += 1, R10114 += 1 };
  s0 -> s2 [0, 65535] { R10196 += 1, R10149 += 1, R10150 += 1 };
  s0 -> s0 [0, 65535] { R10195 += 1, R10196 += 1 };
  s0 -> s3 [108, 108] { R10196 += 1, R10150 += 1, R10114 += 1 };
  s1 -> s1 [0, 65535] { R10196 += 1, R10150 += 1, R10113 += 1, R10114 += 1 };
  s1 -> s3 [108, 108] { R10196 += 1, R10150 += 1, R10114 += 1 };
  s2 -> s1 [0, 65535] { R10196 += 1, R10150 += 1, R10113 += 1, R10114 += 1 };
  s2 -> s2 [0, 65535] { R10196 += 1, R10149 += 1, R10150 += 1 };
  s2 -> s3 [108, 108] { R10196 += 1, R10150 += 1, R10114 += 1 };
  s3 -> s4 [111, 111] { R10196 += 1, R10150 += 1, R10114 += 1 };
  s4 -> s5 [99, 99] { R10196 += 1, R10150 += 1, R10114 += 1 };
  s5 -> s6 [97, 97] { R10196 += 1, R10150 += 1, R10114 += 1 };
  s6 -> s6 [0, 65535] { R10196 += 1, R10150 += 1 };
  s6 -> s7 [0, 65535] { R10196 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10196 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s6, s7, s8;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s0 -> s0 [0, 65535] { R10197 += 1, R10198 += 1 };
  s0 -> s2 [0, 65535] { R10198 += 1, R10151 += 1, R10152 += 1 };
  s0 -> s3 [0, 65535] { R10198 += 1, R10152 += 1, R10119 += 1, R10120 += 1 };
  s0 -> s4 [88, 88] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s0 -> s1 [89, 65535] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s1 -> s1 [0, 87] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s1 -> s4 [88, 88] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s1 -> s1 [89, 65535] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s2 -> s1 [0, 87] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s2 -> s2 [0, 65535] { R10198 += 1, R10151 += 1, R10152 += 1 };
  s2 -> s3 [0, 65535] { R10198 += 1, R10152 += 1, R10119 += 1, R10120 += 1 };
  s2 -> s4 [88, 88] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s2 -> s1 [89, 65535] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s3 -> s1 [0, 87] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s3 -> s3 [0, 65535] { R10198 += 1, R10152 += 1, R10119 += 1, R10120 += 1 };
  s3 -> s4 [88, 88] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s3 -> s1 [89, 65535] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s4 -> s5 [0, 65535] { R10198 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10198 += 1, R10152 += 1 };
  s4 -> s4 [0, 65535] { R10198 += 1, R10152 += 1, R10120 += 1 };
  s5 -> s5 [0, 65535] { R10198 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10198 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10198 += 1, R10152 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10200 += 1, R10154 += 1, R10122 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R10200 += 1, R10153 += 1, R10154 += 1 };
  s0 -> s0 [0, 65535] { R10199 += 1, R10200 += 1 };
  s0 -> s3 [0, 65535] { R10200 += 1, R10154 += 1, R10121 += 1, R10122 += 1 };
  s1 -> s1 [0, 65535] { R10200 += 1, R10154 += 1, R10122 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R10200 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10200 += 1, R10154 += 1 };
  s2 -> s1 [0, 65535] { R10200 += 1, R10154 += 1, R10122 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R10200 += 1, R10153 += 1, R10154 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10200 += 1, R10154 += 1, R10121 += 1, R10122 += 1 };
  s3 -> s1 [0, 65535] { R10200 += 1, R10154 += 1, R10122 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R10200 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10200 += 1, R10154 += 1, R10121 += 1, R10122 += 1 };
  s4 -> s4 [0, 65535] { R10200 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10200 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10200 += 1, R10154 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s0 -> s2 [0, 65535] { R10202 += 1, R10156 += 1, R10124 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R10202 += 1, R10155 += 1, R10156 += 1 };
  s0 -> s0 [0, 65535] { R10201 += 1, R10202 += 1 };
  s0 -> s4 [0, 65535] { R10202 += 1, R10156 += 1, R10123 += 1, R10124 += 1 };
  s0 -> s5 [88, 88] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s0 -> s1 [89, 65535] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s1 -> s1 [0, 87] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10202 += 1 };
  s1 -> s1 [0, 65535] { R10202 += 1, R10156 += 1 };
  s1 -> s5 [88, 88] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s1 -> s1 [89, 65535] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s2 -> s1 [0, 87] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s2 -> s2 [0, 65535] { R10202 += 1, R10156 += 1, R10124 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R10202 += 1 };
  s2 -> s8 [0, 65535] { R10202 += 1, R10156 += 1 };
  s2 -> s5 [88, 88] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s2 -> s1 [89, 65535] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s3 -> s1 [0, 87] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s3 -> s2 [0, 65535] { R10202 += 1, R10156 += 1, R10124 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10202 += 1, R10155 += 1, R10156 += 1 };
  s3 -> s4 [0, 65535] { R10202 += 1, R10156 += 1, R10123 += 1, R10124 += 1 };
  s3 -> s5 [88, 88] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s3 -> s1 [89, 65535] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s4 -> s1 [0, 87] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s4 -> s2 [0, 65535] { R10202 += 1, R10156 += 1, R10124 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10202 += 1 };
  s4 -> s4 [0, 65535] { R10202 += 1, R10156 += 1, R10123 += 1, R10124 += 1 };
  s4 -> s5 [88, 88] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s4 -> s1 [89, 65535] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s5 -> s5 [0, 65535] { R10202 += 1, R10156 += 1, R10124 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10202 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10202 += 1 };
  s8 -> s8 [0, 65535] { R10202 += 1, R10156 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s0 -> s0 [0, 65535] { R10203 += 1, R10204 += 1 };
  s0 -> s2 [0, 65535] { R10204 += 1, R10158 += 1, R10126 += 1, R10105 += 1, R10106 += 1 };
  s0 -> s3 [0, 65535] { R10204 += 1, R10157 += 1, R10158 += 1 };
  s0 -> s4 [0, 65535] { R10204 += 1, R10158 += 1, R10125 += 1, R10126 += 1 };
  s0 -> s1 [89, 65535] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s1 -> s1 [0, 87] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s1 -> s5 [0, 65535] { R10204 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10204 += 1, R10158 += 1 };
  s1 -> s1 [0, 65535] { R10204 += 1, R10158 += 1, R10126 += 1 };
  s1 -> s1 [89, 65535] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s2 -> s1 [0, 87] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s2 -> s5 [0, 65535] { R10204 += 1 };
  s2 -> s2 [0, 65535] { R10204 += 1, R10158 += 1, R10126 += 1, R10105 += 1, R10106 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R10204 += 1, R10158 += 1 };
  s2 -> s1 [89, 65535] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s3 -> s1 [0, 87] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s3 -> s2 [0, 65535] { R10204 += 1, R10158 += 1, R10126 += 1, R10105 += 1, R10106 += 1 };
  s3 -> s3 [0, 65535] { R10204 += 1, R10157 += 1, R10158 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R10204 += 1, R10158 += 1, R10125 += 1, R10126 += 1 };
  s3 -> s1 [89, 65535] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s4 -> s1 [0, 87] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s4 -> s5 [0, 65535] { R10204 += 1 };
  s4 -> s2 [0, 65535] { R10204 += 1, R10158 += 1, R10126 += 1, R10105 += 1, R10106 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10204 += 1, R10158 += 1, R10125 += 1, R10126 += 1 };
  s4 -> s1 [89, 65535] { R10204 += 1, R10158 += 1, R10126 += 1, R10106 += 1 };
  s5 -> s5 [0, 65535] { R10204 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10204 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10204 += 1, R10158 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10205 += 1, R10206 += 1 };
  s0 -> s1 [0, 65535] { R10206 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1, R10107 += 1, R10108 += 1 };
  s0 -> s3 [0, 65535] { R10206 += 1, R10160 += 1, R10127 += 1, R10128 += 1 };
  s0 -> s4 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1, R10108 += 1, R5988 += 1 };
  s1 -> s1 [0, 65535] { R10206 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1, R10107 += 1, R10108 += 1 };
  s1 -> s3 [0, 65535] { R10206 += 1, R10160 += 1, R10127 += 1, R10128 += 1 };
  s1 -> s4 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1, R10108 += 1, R5988 += 1 };
  s1 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1, R10107 += 1, R10108 += 1 };
  s2 -> s4 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1, R10108 += 1, R5988 += 1 };
  s2 -> s6 [0, 65535] { R10206 += 1, R10160 += 1 };
  s2 -> s7 [0, 65535] { R10206 += 1 };
  s2 -> s8 [0, 65535];
  s3 -> s2 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1, R10107 += 1, R10108 += 1 };
  s3 -> s3 [0, 65535] { R10206 += 1, R10160 += 1, R10127 += 1, R10128 += 1 };
  s3 -> s4 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1, R10108 += 1, R5988 += 1 };
  s3 -> s7 [0, 65535] { R10206 += 1 };
  s3 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1, R10108 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1 };
  s4 -> s6 [0, 65535] { R10206 += 1, R10160 += 1 };
  s4 -> s7 [0, 65535] { R10206 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10206 += 1, R10160 += 1, R10128 += 1 };
  s5 -> s6 [0, 65535] { R10206 += 1, R10160 += 1 };
  s5 -> s7 [0, 65535] { R10206 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10206 += 1, R10160 += 1 };
  s6 -> s7 [0, 65535] { R10206 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10206 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10208 += 1, R10162 += 1, R10129 += 1, R10130 += 1 };
  s0 -> s2 [0, 65535] { R10208 += 1, R10161 += 1, R10162 += 1 };
  s0 -> s3 [0, 65535] { R10208 += 1, R10162 += 1, R10130 += 1, R10109 += 1, R10110 += 1 };
  s0 -> s0 [0, 65535] { R10207 += 1, R10208 += 1 };
  s0 -> s4 [104, 104] { R10208 += 1, R10162 += 1, R10130 += 1, R10110 += 1 };
  s1 -> s1 [0, 65535] { R10208 += 1, R10162 += 1, R10129 += 1, R10130 += 1 };
  s1 -> s3 [0, 65535] { R10208 += 1, R10162 += 1, R10130 += 1, R10109 += 1, R10110 += 1 };
  s1 -> s4 [104, 104] { R10208 += 1, R10162 += 1, R10130 += 1, R10110 += 1 };
  s2 -> s1 [0, 65535] { R10208 += 1, R10162 += 1, R10129 += 1, R10130 += 1 };
  s2 -> s2 [0, 65535] { R10208 += 1, R10161 += 1, R10162 += 1 };
  s2 -> s3 [0, 65535] { R10208 += 1, R10162 += 1, R10130 += 1, R10109 += 1, R10110 += 1 };
  s2 -> s4 [104, 104] { R10208 += 1, R10162 += 1, R10130 += 1, R10110 += 1 };
  s3 -> s3 [0, 65535] { R10208 += 1, R10162 += 1, R10130 += 1, R10109 += 1, R10110 += 1 };
  s3 -> s4 [104, 104] { R10208 += 1, R10162 += 1, R10130 += 1, R10110 += 1 };
  s4 -> s5 [111, 111] { R10208 += 1, R10162 += 1, R10130 += 1, R10110 += 1 };
  s5 -> s6 [115, 115] { R10208 += 1, R10162 += 1, R10130 += 1, R10110 += 1 };
  s6 -> s7 [116, 116] { R10208 += 1, R10162 += 1, R10130 += 1, R10110 += 1 };
  s7 -> s8 [0, 65535] { R10208 += 1, R10162 += 1 };
  s7 -> s7 [0, 65535] { R10208 += 1, R10162 += 1, R10130 += 1 };
  s7 -> s9 [0, 65535] { R10208 += 1 };
  s7 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R10208 += 1, R10162 += 1 };
  s8 -> s9 [0, 65535] { R10208 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10208 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s7, s8, s9, s10;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10210 += 1, R10163 += 1, R10164 += 1 };
  s0 -> s2 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1, R10115 += 1, R10116 += 1 };
  s0 -> s3 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1, R10116 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R10210 += 1, R10164 += 1, R10131 += 1, R10132 += 1 };
  s0 -> s0 [0, 65535] { R10209 += 1, R10210 += 1 };
  s1 -> s1 [0, 65535] { R10210 += 1, R10163 += 1, R10164 += 1 };
  s1 -> s2 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1, R10115 += 1, R10116 += 1 };
  s1 -> s3 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1, R10116 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [0, 65535] { R10210 += 1, R10164 += 1, R10131 += 1, R10132 += 1 };
  s2 -> s2 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1, R10115 += 1, R10116 += 1 };
  s2 -> s3 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1, R10116 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s8 [0, 65535] { R10210 += 1, R10164 += 1 };
  s2 -> s6 [0, 65535] { R10210 += 1 };
  s3 -> s3 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1, R10116 += 1, R5989 += 1 };
  s3 -> s7 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s8 [0, 65535] { R10210 += 1, R10164 += 1 };
  s3 -> s6 [0, 65535] { R10210 += 1 };
  s4 -> s2 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1, R10115 += 1, R10116 += 1 };
  s4 -> s3 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1, R10116 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10210 += 1 };
  s4 -> s4 [0, 65535] { R10210 += 1, R10164 += 1, R10131 += 1, R10132 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10210 += 1 };
  s7 -> s7 [0, 65535] { R10210 += 1, R10164 += 1, R10132 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s8 [0, 65535] { R10210 += 1, R10164 += 1 };
  s7 -> s6 [0, 65535] { R10210 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R10210 += 1, R10164 += 1 };
  s8 -> s6 [0, 65535] { R10210 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10212 += 1, R10166 += 1, R10133 += 1, R10134 += 1 };
  s0 -> s2 [0, 65535] { R10212 += 1, R10166 += 1, R10134 += 1, R10117 += 1, R10118 += 1 };
  s0 -> s0 [0, 65535] { R10211 += 1, R10212 += 1 };
  s0 -> s3 [0, 65535] { R10212 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s4 [108, 108] { R10212 += 1, R10166 += 1, R10134 += 1, R10118 += 1 };
  s1 -> s1 [0, 65535] { R10212 += 1, R10166 += 1, R10133 += 1, R10134 += 1 };
  s1 -> s2 [0, 65535] { R10212 += 1, R10166 += 1, R10134 += 1, R10117 += 1, R10118 += 1 };
  s1 -> s4 [108, 108] { R10212 += 1, R10166 += 1, R10134 += 1, R10118 += 1 };
  s2 -> s2 [0, 65535] { R10212 += 1, R10166 += 1, R10134 += 1, R10117 += 1, R10118 += 1 };
  s2 -> s4 [108, 108] { R10212 += 1, R10166 += 1, R10134 += 1, R10118 += 1 };
  s3 -> s1 [0, 65535] { R10212 += 1, R10166 += 1, R10133 += 1, R10134 += 1 };
  s3 -> s2 [0, 65535] { R10212 += 1, R10166 += 1, R10134 += 1, R10117 += 1, R10118 += 1 };
  s3 -> s3 [0, 65535] { R10212 += 1, R10165 += 1, R10166 += 1 };
  s3 -> s4 [108, 108] { R10212 += 1, R10166 += 1, R10134 += 1, R10118 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10212 += 1, R10166 += 1, R10134 += 1 };
  s4 -> s6 [0, 65535] { R10212 += 1, R10166 += 1 };
  s4 -> s7 [0, 65535] { R10212 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10212 += 1, R10166 += 1 };
  s6 -> s7 [0, 65535] { R10212 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10212 += 1 };
  accepting s4, s5, s6, s7;
};
};
constraint R1 = R10110 && R2 = R10134 && R3 = R9674 && R4 = R10212 && R15 = 0 && R16 = R10166 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R9667 - R10166 = 1 && R9668 = R9674 && R9669 - R10166 = 1 && R9670 = R9674 && R9671 - R10166 = 1 && R9672 = R9674 && R9673 - R10166 = 1 && R10109 = 0 && R10113 = 0 && R10114 = 0 && R10117 = 0 && R10118 = 0 && R10119 = 0 && R10120 = R10134 && R10121 = 0 && R10122 = R10134 && R10123 = 0 && R10124 = R10134 && R10125 = 0 && R10126 = R10134 && R10127 = 0 && R10128 = R10134 && R10129 = 0 && R10130 = R10134 && R10131 = 0 && R10132 = R10134 && R10133 = 0 && R10135 = 0 && R10136 = R10166 && R10137 = 0 && R10138 = R10166 && R10139 = 0 && R10140 = R10166 && R10141 = 0 && R10142 = R10166 && R10143 = 0 && R10144 = R10166 && R10145 = 0 && R10146 = R10166 && R10147 = 0 && R10148 = R10166 && R10149 = 0 && R10150 = R10166 && R10151 = 0 && R10152 = R10166 && R10153 = 0 && R10154 = R10166 && R10155 = 0 && R10156 = R10166 && R10157 = 0 && R10158 = R10166 && R10159 = 0 && R10160 = R10166 && R10161 = 0 && R10162 = R10166 && R10163 = 0 && R10164 = R10166 && R10165 = 0 && R10167 = 10 && R10168 = R10212 && R10169 = 10 && R10170 = R10212 && R10171 = 10 && R10172 = R10212 && R10173 = 10 && R10174 = R10212 && R10175 = 10 && R10176 = R10212 && R10177 = 10 && R10178 = R10212 && R10179 = 10 && R10180 = R10212 && R10181 = 10 && R10182 = R10212 && R10183 = 10 && R10184 = R10212 && R10185 = 10 && R10186 = R10212 && R10187 = 10 && R10188 = R10212 && R10189 = 10 && R10190 = R10212 && R10191 = 10 && R10192 = R10212 && R10193 = 10 && R10194 = R10212 && R10195 = 10 && R10196 = R10212 && R10197 = 10 && R10198 = R10212 && R10199 = 10 && R10200 = R10212 && R10201 = 10 && R10202 = R10212 && R10203 = 10 && R10204 = R10212 && R10205 = 10 && R10206 = R10212 && R10207 = 10 && R10208 = R10212 && R10209 = 10 && R10210 = R10212 && R10211 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R10166 < R9674 && -1 < R10110 && 0 < R10134 && -1 < R10166 && 9 < R10212 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R10105 != 0 || R10106 = R10110 || (R5988 = 0 && R10110 = 0)) && (R10107 != 0 || R10108 = R10110 || (R5988 = 0 && R10110 = 0)) && (R5989 = 0 || (R10115 = 0 && R10116 = 0)) && (R5990 = 0 || (R10111 = 0 && R10112 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R10105 = 0 || (R5988 = 0 && R10110 = 0)) && (R10107 = 0 || (R5988 = 0 && R10110 = 0));
// End of Parikh automata intersection problem
