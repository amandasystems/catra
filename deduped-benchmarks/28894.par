// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8585, R8586, R8587, R8588, R8589, R8590, R8591, R8592, R8593, R8594, R8595, R8596, R8597, R8598, R8599, R8600, R8601, R8602, R8603, R8604, R8605, R8606, R8607, R8608, R8609, R8610, R8611, R8612, R8613, R8614, R8615, R8616, R8617, R8618, R8619, R8620, R8621, R8622, R8623, R8624, R8625, R8626, R8627, R8628, R8629, R8630, R8631, R8632, R8633, R8634, R8635, R8636, R8637, R8638, R8639, R8640, R8641, R8642, R8643, R8644, R8645, R8646, R8647, R8648, R8649, R8650, R8651, R8652, R8653, R8654, R8655, R8656, R8657, R8658, R8659, R8660, R8661, R8662, R8663, R8664, R8665, R8666, R8667, R8668, R8669, R8670, R8671, R8672, R8673, R8674, R8675, R8676, R8677, R8678, R8679, R8680, R8681, R8682, R8683, R8684, R8685, R8686, R8687, R8688, R8689, R8690, R8691, R8692;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R8648 += 1 };
  s0 -> s0 [0, 65535] { R8647 += 1, R8648 += 1 };
  s0 -> s2 [46, 46] { R8648 += 1 };
  s0 -> s3 [47, 47] { R8648 += 1 };
  s0 -> s1 [48, 65535] { R8648 += 1 };
  s1 -> s1 [0, 45] { R8648 += 1 };
  s1 -> s2 [46, 46] { R8648 += 1 };
  s1 -> s3 [47, 47] { R8648 += 1 };
  s1 -> s1 [48, 65535] { R8648 += 1 };
  s2 -> s1 [0, 45] { R8648 += 1 };
  s2 -> s2 [46, 46] { R8648 += 1 };
  s2 -> s3 [47, 47] { R8648 += 1 };
  s2 -> s1 [48, 114] { R8648 += 1 };
  s2 -> s8 [115, 115] { R8648 += 1 };
  s2 -> s1 [116, 65535] { R8648 += 1 };
  s3 -> s3 [0, 45] { R8648 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R8648 += 1 };
  s3 -> s3 [47, 65535] { R8648 += 1 };
  s4 -> s3 [0, 45] { R8648 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R8648 += 1 };
  s4 -> s3 [47, 114] { R8648 += 1 };
  s4 -> s5 [115, 115] { R8648 += 1 };
  s4 -> s3 [116, 65535] { R8648 += 1 };
  s5 -> s3 [0, 45] { R8648 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R8648 += 1 };
  s5 -> s3 [47, 110] { R8648 += 1 };
  s5 -> s6 [111, 111] { R8648 += 1 };
  s5 -> s3 [112, 65535] { R8648 += 1 };
  s6 -> s3 [0, 45] { R8648 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R8648 += 1 };
  s6 -> s3 [47, 98] { R8648 += 1 };
  s6 -> s7 [99, 99] { R8648 += 1 };
  s6 -> s3 [100, 65535] { R8648 += 1 };
  s7 -> s3 [0, 45] { R8648 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R8648 += 1 };
  s7 -> s3 [47, 106] { R8648 += 1 };
  s7 -> s3 [108, 65535] { R8648 += 1 };
  s8 -> s1 [0, 45] { R8648 += 1 };
  s8 -> s2 [46, 46] { R8648 += 1 };
  s8 -> s3 [47, 47] { R8648 += 1 };
  s8 -> s1 [48, 110] { R8648 += 1 };
  s8 -> s9 [111, 111] { R8648 += 1 };
  s8 -> s1 [112, 65535] { R8648 += 1 };
  s9 -> s1 [0, 45] { R8648 += 1 };
  s9 -> s2 [46, 46] { R8648 += 1 };
  s9 -> s3 [47, 47] { R8648 += 1 };
  s9 -> s1 [48, 98] { R8648 += 1 };
  s9 -> s10 [99, 99] { R8648 += 1 };
  s9 -> s1 [100, 65535] { R8648 += 1 };
  s10 -> s1 [0, 45] { R8648 += 1 };
  s10 -> s2 [46, 46] { R8648 += 1 };
  s10 -> s3 [47, 47] { R8648 += 1 };
  s10 -> s1 [48, 106] { R8648 += 1 };
  s10 -> s1 [108, 65535] { R8648 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R8650 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R8649 += 1, R8650 += 1 };
  s1 -> s1 [0, 65535] { R8650 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R8652 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R8652 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8651 += 1, R8652 += 1 };
  s0 -> s3 [47, 47] { R8652 += 1 };
  s0 -> s1 [48, 65535] { R8652 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R8652 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R8652 += 1 };
  s1 -> s1 [48, 65535] { R8652 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R8652 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R8652 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R8652 += 1 };
  s2 -> s1 [48, 65535] { R8652 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8652 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8654 += 1, R8040 += 1 };
  s0 -> s0 [0, 65535] { R8653 += 1, R8654 += 1 };
  s0 -> s2 [0, 65535] { R8654 += 1, R8039 += 1, R8040 += 1 };
  s0 -> s1 [38, 42] { R8654 += 1, R8040 += 1 };
  s0 -> s1 [44, 45] { R8654 += 1, R8040 += 1 };
  s0 -> s1 [47, 62] { R8654 += 1, R8040 += 1 };
  s0 -> s1 [64, 65535] { R8654 += 1, R8040 += 1 };
  s1 -> s1 [0, 36] { R8654 += 1, R8040 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8654 += 1 };
  s1 -> s1 [38, 42] { R8654 += 1, R8040 += 1 };
  s1 -> s1 [44, 45] { R8654 += 1, R8040 += 1 };
  s1 -> s1 [47, 62] { R8654 += 1, R8040 += 1 };
  s1 -> s1 [64, 65535] { R8654 += 1, R8040 += 1 };
  s2 -> s1 [0, 36] { R8654 += 1, R8040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8654 += 1, R8039 += 1, R8040 += 1 };
  s2 -> s1 [38, 42] { R8654 += 1, R8040 += 1 };
  s2 -> s1 [44, 45] { R8654 += 1, R8040 += 1 };
  s2 -> s1 [47, 62] { R8654 += 1, R8040 += 1 };
  s2 -> s1 [64, 65535] { R8654 += 1, R8040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R8656 += 1, R8041 += 1, R8042 += 1 };
  s0 -> s0 [0, 65535] { R8655 += 1, R8656 += 1 };
  s0 -> s2 [0, 65535] { R8656 += 1, R8042 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R8656 += 1, R8041 += 1, R8042 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8656 += 1, R8042 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8656 += 1 };
  s2 -> s2 [0, 65535] { R8656 += 1, R8042 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8656 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R8658 += 1, R8043 += 1, R8044 += 1 };
  s0 -> s0 [0, 65535] { R8657 += 1, R8658 += 1 };
  s0 -> s3 [0, 65535] { R8658 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535] { R8658 += 1 };
  s1 -> s1 [0, 65535] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8658 += 1, R8044 += 1 };
  s2 -> s1 [0, 62] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8658 += 1, R8043 += 1, R8044 += 1 };
  s2 -> s3 [0, 65535] { R8658 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R8658 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8658 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8658 += 1, R8044 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R8658 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8658 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8658 += 1, R8044 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8660 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R8660 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s3 [0, 65535] { R8660 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R8659 += 1, R8660 += 1 };
  s1 -> s1 [0, 65535] { R8660 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8660 += 1 };
  s1 -> s6 [0, 65535] { R8660 += 1, R8046 += 1 };
  s2 -> s1 [0, 65535] { R8660 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R8660 += 1, R8045 += 1, R8046 += 1 };
  s2 -> s3 [0, 65535] { R8660 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8660 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R8660 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8660 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8660 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8660 += 1 };
  s6 -> s6 [0, 65535] { R8660 += 1, R8046 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8662 += 1, R8616 += 1 };
  s0 -> s2 [0, 65535] { R8662 += 1, R8615 += 1, R8616 += 1 };
  s0 -> s0 [0, 65535] { R8661 += 1, R8662 += 1 };
  s0 -> s1 [45, 63] { R8662 += 1, R8616 += 1 };
  s0 -> s3 [88, 88] { R8662 += 1, R8616 += 1 };
  s0 -> s1 [89, 65535] { R8662 += 1, R8616 += 1 };
  s1 -> s1 [0, 43] { R8662 += 1, R8616 += 1 };
  s1 -> s1 [45, 63] { R8662 += 1, R8616 += 1 };
  s1 -> s3 [88, 88] { R8662 += 1, R8616 += 1 };
  s1 -> s1 [89, 65535] { R8662 += 1, R8616 += 1 };
  s2 -> s1 [0, 43] { R8662 += 1, R8616 += 1 };
  s2 -> s2 [0, 65535] { R8662 += 1, R8615 += 1, R8616 += 1 };
  s2 -> s1 [45, 63] { R8662 += 1, R8616 += 1 };
  s2 -> s3 [88, 88] { R8662 += 1, R8616 += 1 };
  s2 -> s1 [89, 65535] { R8662 += 1, R8616 += 1 };
  s3 -> s3 [0, 43] { R8662 += 1, R8616 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8662 += 1 };
  s3 -> s3 [45, 63] { R8662 += 1, R8616 += 1 };
  s3 -> s3 [88, 65535] { R8662 += 1, R8616 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R8664 += 1, R8617 += 1, R8618 += 1 };
  s0 -> s2 [0, 65535] { R8664 += 1, R8618 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8663 += 1, R8664 += 1 };
  s1 -> s1 [0, 65535] { R8664 += 1, R8617 += 1, R8618 += 1 };
  s1 -> s2 [0, 65535] { R8664 += 1, R8618 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8664 += 1 };
  s2 -> s2 [0, 65535] { R8664 += 1, R8618 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8664 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8666 += 1, R8620 += 1 };
  s0 -> s2 [0, 65535] { R8666 += 1, R8619 += 1, R8620 += 1 };
  s0 -> s3 [0, 65535] { R8666 += 1, R8620 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R8665 += 1, R8666 += 1 };
  s0 -> s4 [58, 58] { R8666 += 1, R8620 += 1 };
  s0 -> s1 [59, 65535] { R8666 += 1, R8620 += 1 };
  s1 -> s1 [0, 57] { R8666 += 1, R8620 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8666 += 1 };
  s1 -> s4 [58, 58] { R8666 += 1, R8620 += 1 };
  s1 -> s1 [59, 65535] { R8666 += 1, R8620 += 1 };
  s2 -> s1 [0, 57] { R8666 += 1, R8620 += 1 };
  s2 -> s2 [0, 65535] { R8666 += 1, R8619 += 1, R8620 += 1 };
  s2 -> s3 [0, 65535] { R8666 += 1, R8620 += 1, R10 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [58, 58] { R8666 += 1, R8620 += 1 };
  s2 -> s1 [59, 65535] { R8666 += 1, R8620 += 1 };
  s3 -> s1 [0, 57] { R8666 += 1, R8620 += 1 };
  s3 -> s3 [0, 65535] { R8666 += 1, R8620 += 1, R10 += 1 };
  s3 -> s5 [0, 65535] { R8666 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [58, 58] { R8666 += 1, R8620 += 1 };
  s3 -> s1 [59, 65535] { R8666 += 1, R8620 += 1 };
  s4 -> s4 [0, 65535] { R8666 += 1, R8620 += 1 };
  s5 -> s5 [0, 65535] { R8666 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R8668 += 1, R8622 += 1 };
  s0 -> s2 [0, 65535] { R8668 += 1, R8621 += 1, R8622 += 1 };
  s0 -> s0 [0, 65535] { R8667 += 1, R8668 += 1 };
  s0 -> s3 [0, 65535] { R8668 += 1, R8622 += 1, R11 += 1 };
  s0 -> s4 [88, 88] { R8668 += 1, R8622 += 1 };
  s0 -> s1 [89, 65535] { R8668 += 1, R8622 += 1 };
  s1 -> s1 [0, 87] { R8668 += 1, R8622 += 1 };
  s1 -> s1 [0, 65535] { R8668 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [88, 88] { R8668 += 1, R8622 += 1 };
  s1 -> s1 [89, 65535] { R8668 += 1, R8622 += 1 };
  s2 -> s1 [0, 87] { R8668 += 1, R8622 += 1 };
  s2 -> s2 [0, 65535] { R8668 += 1, R8621 += 1, R8622 += 1 };
  s2 -> s3 [0, 65535] { R8668 += 1, R8622 += 1, R11 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [88, 88] { R8668 += 1, R8622 += 1 };
  s2 -> s1 [89, 65535] { R8668 += 1, R8622 += 1 };
  s3 -> s1 [0, 87] { R8668 += 1, R8622 += 1 };
  s3 -> s5 [0, 65535] { R8668 += 1 };
  s3 -> s3 [0, 65535] { R8668 += 1, R8622 += 1, R11 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [88, 88] { R8668 += 1, R8622 += 1 };
  s3 -> s1 [89, 65535] { R8668 += 1, R8622 += 1 };
  s4 -> s4 [0, 65535] { R8668 += 1, R8622 += 1 };
  s5 -> s5 [0, 65535] { R8668 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R8670 += 1, R8624 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8669 += 1, R8670 += 1 };
  s0 -> s3 [0, 65535] { R8670 += 1, R8623 += 1, R8624 += 1 };
  s0 -> s4 [91, 91] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R8670 += 1 };
  s1 -> s7 [0, 65535] { R8670 += 1, R8624 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 90] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R8670 += 1, R8624 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R8670 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R8670 += 1, R8624 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R8670 += 1, R8623 += 1, R8624 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8670 += 1, R8624 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8670 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8670 += 1 };
  s7 -> s7 [0, 65535] { R8670 += 1, R8624 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8672 += 1, R8626 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R8672 += 1, R8626 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R8672 += 1, R8625 += 1, R8626 += 1 };
  s0 -> s0 [0, 65535] { R8671 += 1, R8672 += 1 };
  s1 -> s5 [0, 65535] { R8672 += 1 };
  s1 -> s1 [0, 65535] { R8672 += 1, R8626 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R8672 += 1, R8626 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8672 += 1 };
  s2 -> s1 [0, 65535] { R8672 += 1, R8626 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R8672 += 1, R8626 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8672 += 1, R8626 += 1, R5998 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R8672 += 1, R8626 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s3 [0, 65535] { R8672 += 1, R8625 += 1, R8626 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8672 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8672 += 1 };
  s6 -> s6 [0, 65535] { R8672 += 1, R8626 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8674 += 1, R8628 += 1, R8591 += 1, R8592 += 1 };
  s0 -> s2 [0, 65535] { R8674 += 1, R8627 += 1, R8628 += 1 };
  s0 -> s3 [0, 65535] { R8674 += 1, R8628 += 1, R8592 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R8673 += 1, R8674 += 1 };
  s1 -> s1 [0, 65535] { R8674 += 1, R8628 += 1, R8591 += 1, R8592 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R8674 += 1, R8628 += 1, R8592 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R8674 += 1 };
  s2 -> s1 [0, 65535] { R8674 += 1, R8628 += 1, R8591 += 1, R8592 += 1 };
  s2 -> s2 [0, 65535] { R8674 += 1, R8627 += 1, R8628 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8674 += 1, R8628 += 1, R8592 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8674 += 1, R8628 += 1 };
  s3 -> s3 [0, 65535] { R8674 += 1, R8628 += 1, R8592 += 1, R5990 += 1 };
  s3 -> s6 [0, 65535] { R8674 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8674 += 1, R8628 += 1 };
  s5 -> s6 [0, 65535] { R8674 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8674 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R8676 += 1, R8629 += 1, R8630 += 1 };
  s0 -> s0 [0, 65535] { R8675 += 1, R8676 += 1 };
  s0 -> s2 [0, 65535] { R8676 += 1, R8630 += 1, R8593 += 1, R8594 += 1 };
  s0 -> s3 [108, 108] { R8676 += 1, R8630 += 1, R8594 += 1 };
  s1 -> s1 [0, 65535] { R8676 += 1, R8629 += 1, R8630 += 1 };
  s1 -> s2 [0, 65535] { R8676 += 1, R8630 += 1, R8593 += 1, R8594 += 1 };
  s1 -> s3 [108, 108] { R8676 += 1, R8630 += 1, R8594 += 1 };
  s2 -> s2 [0, 65535] { R8676 += 1, R8630 += 1, R8593 += 1, R8594 += 1 };
  s2 -> s3 [108, 108] { R8676 += 1, R8630 += 1, R8594 += 1 };
  s3 -> s4 [111, 111] { R8676 += 1, R8630 += 1, R8594 += 1 };
  s4 -> s4 [0, 65535] { R8676 += 1, R8630 += 1 };
  s4 -> s5 [0, 65535] { R8676 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8676 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s0 -> s2 [0, 65535] { R8678 += 1, R8632 += 1, R8599 += 1, R8600 += 1 };
  s0 -> s3 [0, 65535] { R8678 += 1, R8631 += 1, R8632 += 1 };
  s0 -> s0 [0, 65535] { R8677 += 1, R8678 += 1 };
  s0 -> s4 [88, 88] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s0 -> s1 [89, 65535] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s1 -> s1 [0, 87] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s1 -> s4 [88, 88] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s1 -> s1 [89, 65535] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s2 -> s1 [0, 87] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s2 -> s2 [0, 65535] { R8678 += 1, R8632 += 1, R8599 += 1, R8600 += 1 };
  s2 -> s4 [88, 88] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s2 -> s1 [89, 65535] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s3 -> s1 [0, 87] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s3 -> s2 [0, 65535] { R8678 += 1, R8632 += 1, R8599 += 1, R8600 += 1 };
  s3 -> s3 [0, 65535] { R8678 += 1, R8631 += 1, R8632 += 1 };
  s3 -> s4 [88, 88] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s3 -> s1 [89, 65535] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s4 -> s5 [0, 65535] { R8678 += 1, R8632 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8678 += 1, R8632 += 1, R8600 += 1 };
  s4 -> s7 [0, 65535] { R8678 += 1 };
  s5 -> s5 [0, 65535] { R8678 += 1, R8632 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8678 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8678 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8680 += 1, R8634 += 1, R8602 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R8680 += 1, R8633 += 1, R8634 += 1 };
  s0 -> s3 [0, 65535] { R8680 += 1, R8634 += 1, R8601 += 1, R8602 += 1 };
  s0 -> s0 [0, 65535] { R8679 += 1, R8680 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8680 += 1, R8634 += 1, R8602 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R8680 += 1 };
  s1 -> s6 [0, 65535] { R8680 += 1, R8634 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R8680 += 1, R8634 += 1, R8602 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R8680 += 1, R8633 += 1, R8634 += 1 };
  s2 -> s3 [0, 65535] { R8680 += 1, R8634 += 1, R8601 += 1, R8602 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8680 += 1, R8634 += 1, R8602 += 1, R1 += 1 };
  s3 -> s5 [0, 65535] { R8680 += 1 };
  s3 -> s3 [0, 65535] { R8680 += 1, R8634 += 1, R8601 += 1, R8602 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8680 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8680 += 1 };
  s6 -> s6 [0, 65535] { R8680 += 1, R8634 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s0 -> s2 [0, 65535] { R8682 += 1, R8636 += 1, R8604 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R8682 += 1, R8636 += 1, R8603 += 1, R8604 += 1 };
  s0 -> s4 [0, 65535] { R8682 += 1, R8635 += 1, R8636 += 1 };
  s0 -> s0 [0, 65535] { R8681 += 1, R8682 += 1 };
  s0 -> s5 [88, 88] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s0 -> s1 [89, 65535] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s1 -> s1 [0, 87] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8682 += 1, R8636 += 1 };
  s1 -> s7 [0, 65535] { R8682 += 1 };
  s1 -> s5 [88, 88] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s1 -> s1 [89, 65535] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s2 -> s1 [0, 87] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s2 -> s2 [0, 65535] { R8682 += 1, R8636 += 1, R8604 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R8682 += 1 };
  s2 -> s8 [0, 65535] { R8682 += 1, R8636 += 1 };
  s2 -> s5 [88, 88] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s2 -> s1 [89, 65535] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s3 -> s1 [0, 87] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s3 -> s2 [0, 65535] { R8682 += 1, R8636 += 1, R8604 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8682 += 1, R8636 += 1, R8603 += 1, R8604 += 1 };
  s3 -> s7 [0, 65535] { R8682 += 1 };
  s3 -> s5 [88, 88] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s3 -> s1 [89, 65535] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s4 -> s1 [0, 87] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s4 -> s2 [0, 65535] { R8682 += 1, R8636 += 1, R8604 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R8682 += 1, R8636 += 1, R8603 += 1, R8604 += 1 };
  s4 -> s4 [0, 65535] { R8682 += 1, R8635 += 1, R8636 += 1 };
  s4 -> s5 [88, 88] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s4 -> s1 [89, 65535] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s5 -> s5 [0, 65535] { R8682 += 1, R8636 += 1, R8604 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8682 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8682 += 1 };
  s8 -> s8 [0, 65535] { R8682 += 1, R8636 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s0 -> s0 [0, 65535] { R8683 += 1, R8684 += 1 };
  s0 -> s2 [0, 65535] { R8684 += 1, R8637 += 1, R8638 += 1 };
  s0 -> s3 [0, 65535] { R8684 += 1, R8638 += 1, R8606 += 1, R8585 += 1, R8586 += 1 };
  s0 -> s4 [0, 65535] { R8684 += 1, R8638 += 1, R8605 += 1, R8606 += 1 };
  s0 -> s1 [89, 65535] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s1 -> s1 [0, 87] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s1 -> s1 [0, 65535] { R8684 += 1, R8638 += 1, R8606 += 1 };
  s1 -> s7 [0, 65535] { R8684 += 1, R8638 += 1 };
  s1 -> s5 [0, 65535] { R8684 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [89, 65535] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s2 -> s1 [0, 87] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s2 -> s2 [0, 65535] { R8684 += 1, R8637 += 1, R8638 += 1 };
  s2 -> s3 [0, 65535] { R8684 += 1, R8638 += 1, R8606 += 1, R8585 += 1, R8586 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R8684 += 1, R8638 += 1, R8605 += 1, R8606 += 1 };
  s2 -> s1 [89, 65535] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s3 -> s1 [0, 87] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s3 -> s7 [0, 65535] { R8684 += 1, R8638 += 1 };
  s3 -> s5 [0, 65535] { R8684 += 1 };
  s3 -> s3 [0, 65535] { R8684 += 1, R8638 += 1, R8606 += 1, R8585 += 1, R8586 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [89, 65535] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s4 -> s1 [0, 87] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s4 -> s5 [0, 65535] { R8684 += 1 };
  s4 -> s3 [0, 65535] { R8684 += 1, R8638 += 1, R8606 += 1, R8585 += 1, R8586 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8684 += 1, R8638 += 1, R8605 += 1, R8606 += 1 };
  s4 -> s1 [89, 65535] { R8684 += 1, R8638 += 1, R8606 += 1, R8586 += 1 };
  s5 -> s5 [0, 65535] { R8684 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8684 += 1, R8638 += 1 };
  s7 -> s5 [0, 65535] { R8684 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1, R8588 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R8685 += 1, R8686 += 1 };
  s0 -> s2 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1, R8587 += 1, R8588 += 1 };
  s0 -> s3 [0, 65535] { R8686 += 1, R8639 += 1, R8640 += 1 };
  s0 -> s4 [0, 65535] { R8686 += 1, R8640 += 1, R8607 += 1, R8608 += 1 };
  s1 -> s1 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1, R8588 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535] { R8686 += 1 };
  s1 -> s7 [0, 65535] { R8686 += 1, R8640 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1 };
  s2 -> s1 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1, R8588 += 1, R5988 += 1 };
  s2 -> s5 [0, 65535] { R8686 += 1 };
  s2 -> s2 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1, R8587 += 1, R8588 += 1 };
  s2 -> s7 [0, 65535] { R8686 += 1, R8640 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1, R8588 += 1, R5988 += 1 };
  s3 -> s2 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1, R8587 += 1, R8588 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8686 += 1, R8639 += 1, R8640 += 1 };
  s3 -> s4 [0, 65535] { R8686 += 1, R8640 += 1, R8607 += 1, R8608 += 1 };
  s4 -> s1 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1, R8588 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R8686 += 1 };
  s4 -> s2 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1, R8587 += 1, R8588 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8686 += 1, R8640 += 1, R8607 += 1, R8608 += 1 };
  s5 -> s5 [0, 65535] { R8686 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8686 += 1 };
  s7 -> s7 [0, 65535] { R8686 += 1, R8640 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s5 [0, 65535] { R8686 += 1 };
  s8 -> s7 [0, 65535] { R8686 += 1, R8640 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8686 += 1, R8640 += 1, R8608 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8688 += 1, R8642 += 1, R8609 += 1, R8610 += 1 };
  s0 -> s2 [0, 65535] { R8688 += 1, R8641 += 1, R8642 += 1 };
  s0 -> s3 [0, 65535] { R8688 += 1, R8642 += 1, R8610 += 1, R8589 += 1, R8590 += 1 };
  s0 -> s0 [0, 65535] { R8687 += 1, R8688 += 1 };
  s0 -> s4 [108, 108] { R8688 += 1, R8642 += 1, R8610 += 1, R8590 += 1 };
  s1 -> s1 [0, 65535] { R8688 += 1, R8642 += 1, R8609 += 1, R8610 += 1 };
  s1 -> s3 [0, 65535] { R8688 += 1, R8642 += 1, R8610 += 1, R8589 += 1, R8590 += 1 };
  s1 -> s4 [108, 108] { R8688 += 1, R8642 += 1, R8610 += 1, R8590 += 1 };
  s2 -> s1 [0, 65535] { R8688 += 1, R8642 += 1, R8609 += 1, R8610 += 1 };
  s2 -> s2 [0, 65535] { R8688 += 1, R8641 += 1, R8642 += 1 };
  s2 -> s3 [0, 65535] { R8688 += 1, R8642 += 1, R8610 += 1, R8589 += 1, R8590 += 1 };
  s2 -> s4 [108, 108] { R8688 += 1, R8642 += 1, R8610 += 1, R8590 += 1 };
  s3 -> s3 [0, 65535] { R8688 += 1, R8642 += 1, R8610 += 1, R8589 += 1, R8590 += 1 };
  s3 -> s4 [108, 108] { R8688 += 1, R8642 += 1, R8610 += 1, R8590 += 1 };
  s4 -> s5 [104, 104] { R8688 += 1, R8642 += 1, R8610 += 1, R8590 += 1 };
  s5 -> s6 [111, 111] { R8688 += 1, R8642 += 1, R8610 += 1, R8590 += 1 };
  s6 -> s7 [115, 115] { R8688 += 1, R8642 += 1, R8610 += 1, R8590 += 1 };
  s7 -> s8 [116, 116] { R8688 += 1, R8642 += 1, R8610 += 1, R8590 += 1 };
  s8 -> s9 [0, 65535] { R8688 += 1, R8642 += 1 };
  s8 -> s10 [0, 65535] { R8688 += 1 };
  s8 -> s8 [0, 65535] { R8688 += 1, R8642 += 1, R8610 += 1 };
  s8 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R8688 += 1, R8642 += 1 };
  s9 -> s10 [0, 65535] { R8688 += 1 };
  s9 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R8688 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s8, s9, s10, s11;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8690 += 1, R8644 += 1, R8611 += 1, R8612 += 1 };
  s0 -> s2 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1, R8595 += 1, R8596 += 1 };
  s0 -> s3 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1, R8596 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R8689 += 1, R8690 += 1 };
  s0 -> s4 [0, 65535] { R8690 += 1, R8643 += 1, R8644 += 1 };
  s1 -> s6 [0, 65535] { R8690 += 1 };
  s1 -> s1 [0, 65535] { R8690 += 1, R8644 += 1, R8611 += 1, R8612 += 1 };
  s1 -> s2 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1, R8595 += 1, R8596 += 1 };
  s1 -> s3 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1, R8596 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8690 += 1 };
  s2 -> s8 [0, 65535] { R8690 += 1, R8644 += 1 };
  s2 -> s2 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1, R8595 += 1, R8596 += 1 };
  s2 -> s3 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1, R8596 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8690 += 1 };
  s3 -> s7 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1 };
  s3 -> s8 [0, 65535] { R8690 += 1, R8644 += 1 };
  s3 -> s3 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1, R8596 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R8690 += 1, R8644 += 1, R8611 += 1, R8612 += 1 };
  s4 -> s2 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1, R8595 += 1, R8596 += 1 };
  s4 -> s3 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1, R8596 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R8690 += 1, R8643 += 1, R8644 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8690 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8690 += 1 };
  s7 -> s7 [0, 65535] { R8690 += 1, R8644 += 1, R8612 += 1 };
  s7 -> s8 [0, 65535] { R8690 += 1, R8644 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R8690 += 1 };
  s8 -> s8 [0, 65535] { R8690 += 1, R8644 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8692 += 1, R8646 += 1, R8613 += 1, R8614 += 1 };
  s0 -> s2 [0, 65535] { R8692 += 1, R8646 += 1, R8614 += 1, R8597 += 1, R8598 += 1 };
  s0 -> s0 [0, 65535] { R8691 += 1, R8692 += 1 };
  s0 -> s3 [0, 65535] { R8692 += 1, R8645 += 1, R8646 += 1 };
  s0 -> s4 [99, 99] { R8692 += 1, R8646 += 1, R8614 += 1, R8598 += 1 };
  s1 -> s1 [0, 65535] { R8692 += 1, R8646 += 1, R8613 += 1, R8614 += 1 };
  s1 -> s2 [0, 65535] { R8692 += 1, R8646 += 1, R8614 += 1, R8597 += 1, R8598 += 1 };
  s1 -> s4 [99, 99] { R8692 += 1, R8646 += 1, R8614 += 1, R8598 += 1 };
  s2 -> s2 [0, 65535] { R8692 += 1, R8646 += 1, R8614 += 1, R8597 += 1, R8598 += 1 };
  s2 -> s4 [99, 99] { R8692 += 1, R8646 += 1, R8614 += 1, R8598 += 1 };
  s3 -> s1 [0, 65535] { R8692 += 1, R8646 += 1, R8613 += 1, R8614 += 1 };
  s3 -> s2 [0, 65535] { R8692 += 1, R8646 += 1, R8614 += 1, R8597 += 1, R8598 += 1 };
  s3 -> s3 [0, 65535] { R8692 += 1, R8645 += 1, R8646 += 1 };
  s3 -> s4 [99, 99] { R8692 += 1, R8646 += 1, R8614 += 1, R8598 += 1 };
  s4 -> s5 [97, 97] { R8692 += 1, R8646 += 1, R8614 += 1, R8598 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8692 += 1, R8646 += 1 };
  s5 -> s8 [0, 65535] { R8692 += 1 };
  s5 -> s5 [0, 65535] { R8692 += 1, R8646 += 1, R8614 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8692 += 1, R8646 += 1 };
  s7 -> s8 [0, 65535] { R8692 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8692 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R1 = R8590 && R2 = R8614 && R3 = R8046 && R4 = R8692 && R15 = 0 && R16 = R8646 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8039 - R8646 = 1 && R8040 = R8046 && R8041 - R8646 = 1 && R8042 = R8046 && R8043 - R8646 = 1 && R8044 = R8046 && R8045 - R8646 = 1 && R8589 = 0 && R8593 = 0 && R8594 = 0 && R8597 = 0 && R8598 = 0 && R8599 = 0 && R8600 = R8614 && R8601 = 0 && R8602 = R8614 && R8603 = 0 && R8604 = R8614 && R8605 = 0 && R8606 = R8614 && R8607 = 0 && R8608 = R8614 && R8609 = 0 && R8610 = R8614 && R8611 = 0 && R8612 = R8614 && R8613 = 0 && R8615 = 0 && R8616 = R8646 && R8617 = 0 && R8618 = R8646 && R8619 = 0 && R8620 = R8646 && R8621 = 0 && R8622 = R8646 && R8623 = 0 && R8624 = R8646 && R8625 = 0 && R8626 = R8646 && R8627 = 0 && R8628 = R8646 && R8629 = 0 && R8630 = R8646 && R8631 = 0 && R8632 = R8646 && R8633 = 0 && R8634 = R8646 && R8635 = 0 && R8636 = R8646 && R8637 = 0 && R8638 = R8646 && R8639 = 0 && R8640 = R8646 && R8641 = 0 && R8642 = R8646 && R8643 = 0 && R8644 = R8646 && R8645 = 0 && R8647 = 10 && R8648 = R8692 && R8649 = 10 && R8650 = R8692 && R8651 = 10 && R8652 = R8692 && R8653 = 10 && R8654 = R8692 && R8655 = 10 && R8656 = R8692 && R8657 = 10 && R8658 = R8692 && R8659 = 10 && R8660 = R8692 && R8661 = 10 && R8662 = R8692 && R8663 = 10 && R8664 = R8692 && R8665 = 10 && R8666 = R8692 && R8667 = 10 && R8668 = R8692 && R8669 = 10 && R8670 = R8692 && R8671 = 10 && R8672 = R8692 && R8673 = 10 && R8674 = R8692 && R8675 = 10 && R8676 = R8692 && R8677 = 10 && R8678 = R8692 && R8679 = 10 && R8680 = R8692 && R8681 = 10 && R8682 = R8692 && R8683 = 10 && R8684 = R8692 && R8685 = 10 && R8686 = R8692 && R8687 = 10 && R8688 = R8692 && R8689 = 10 && R8690 = R8692 && R8691 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R8646 < R8046 && -1 < R8590 && 0 < R8614 && -1 < R8646 && 9 < R8692 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R8585 != 0 || R8586 = R8590 || (R5988 = 0 && R8590 = 0)) && (R8587 != 0 || R8588 = R8590 || (R5988 = 0 && R8590 = 0)) && (R5989 = 0 || (R8595 = 0 && R8596 = 0)) && (R5990 = 0 || (R8591 = 0 && R8592 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R8585 = 0 || (R5988 = 0 && R8590 = 0)) && (R8587 = 0 || (R5988 = 0 && R8590 = 0));
// End of Parikh automata intersection problem
