// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10000, R10001, R10002, R10003, R10004, R10005, R10006, R10007, R10008, R10009, R10010, R10011, R10012, R10013, R10014, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R10100, R10101, R10102, R10103, R10104, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R9667, R9668, R9669, R9670, R9671, R9672, R9673, R9674, R9997, R9998, R9999;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R10060 += 1 };
  s0 -> s0 [0, 65535] { R10059 += 1, R10060 += 1 };
  s0 -> s2 [46, 46] { R10060 += 1 };
  s0 -> s3 [47, 47] { R10060 += 1 };
  s0 -> s1 [48, 65535] { R10060 += 1 };
  s1 -> s1 [0, 45] { R10060 += 1 };
  s1 -> s2 [46, 46] { R10060 += 1 };
  s1 -> s3 [47, 47] { R10060 += 1 };
  s1 -> s1 [48, 65535] { R10060 += 1 };
  s2 -> s1 [0, 45] { R10060 += 1 };
  s2 -> s2 [46, 46] { R10060 += 1 };
  s2 -> s3 [47, 47] { R10060 += 1 };
  s2 -> s1 [48, 114] { R10060 += 1 };
  s2 -> s8 [115, 115] { R10060 += 1 };
  s2 -> s1 [116, 65535] { R10060 += 1 };
  s3 -> s3 [0, 45] { R10060 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R10060 += 1 };
  s3 -> s3 [47, 65535] { R10060 += 1 };
  s4 -> s3 [0, 45] { R10060 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R10060 += 1 };
  s4 -> s3 [47, 114] { R10060 += 1 };
  s4 -> s5 [115, 115] { R10060 += 1 };
  s4 -> s3 [116, 65535] { R10060 += 1 };
  s5 -> s3 [0, 45] { R10060 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R10060 += 1 };
  s5 -> s3 [47, 110] { R10060 += 1 };
  s5 -> s6 [111, 111] { R10060 += 1 };
  s5 -> s3 [112, 65535] { R10060 += 1 };
  s6 -> s3 [0, 45] { R10060 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R10060 += 1 };
  s6 -> s3 [47, 98] { R10060 += 1 };
  s6 -> s7 [99, 99] { R10060 += 1 };
  s6 -> s3 [100, 65535] { R10060 += 1 };
  s7 -> s3 [0, 45] { R10060 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R10060 += 1 };
  s7 -> s3 [47, 106] { R10060 += 1 };
  s7 -> s3 [108, 65535] { R10060 += 1 };
  s8 -> s1 [0, 45] { R10060 += 1 };
  s8 -> s2 [46, 46] { R10060 += 1 };
  s8 -> s3 [47, 47] { R10060 += 1 };
  s8 -> s1 [48, 110] { R10060 += 1 };
  s8 -> s9 [111, 111] { R10060 += 1 };
  s8 -> s1 [112, 65535] { R10060 += 1 };
  s9 -> s1 [0, 45] { R10060 += 1 };
  s9 -> s2 [46, 46] { R10060 += 1 };
  s9 -> s3 [47, 47] { R10060 += 1 };
  s9 -> s1 [48, 98] { R10060 += 1 };
  s9 -> s10 [99, 99] { R10060 += 1 };
  s9 -> s1 [100, 65535] { R10060 += 1 };
  s10 -> s1 [0, 45] { R10060 += 1 };
  s10 -> s2 [46, 46] { R10060 += 1 };
  s10 -> s3 [47, 47] { R10060 += 1 };
  s10 -> s1 [48, 106] { R10060 += 1 };
  s10 -> s1 [108, 65535] { R10060 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10061 += 1, R10062 += 1 };
  s0 -> s1 [0, 65535] { R10062 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R10062 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R10064 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10063 += 1, R10064 += 1 };
  s0 -> s2 [0, 65535] { R10064 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R10064 += 1 };
  s0 -> s1 [48, 65535] { R10064 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R10064 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R10064 += 1 };
  s1 -> s1 [48, 65535] { R10064 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R10064 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R10064 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R10064 += 1 };
  s2 -> s1 [48, 65535] { R10064 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10064 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R10066 += 1, R9668 += 1 };
  s0 -> s2 [0, 65535] { R10066 += 1, R9667 += 1, R9668 += 1 };
  s0 -> s0 [0, 65535] { R10065 += 1, R10066 += 1 };
  s0 -> s1 [38, 42] { R10066 += 1, R9668 += 1 };
  s0 -> s1 [44, 45] { R10066 += 1, R9668 += 1 };
  s0 -> s1 [47, 62] { R10066 += 1, R9668 += 1 };
  s0 -> s1 [64, 65535] { R10066 += 1, R9668 += 1 };
  s1 -> s1 [0, 36] { R10066 += 1, R9668 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10066 += 1 };
  s1 -> s1 [38, 42] { R10066 += 1, R9668 += 1 };
  s1 -> s1 [44, 45] { R10066 += 1, R9668 += 1 };
  s1 -> s1 [47, 62] { R10066 += 1, R9668 += 1 };
  s1 -> s1 [64, 65535] { R10066 += 1, R9668 += 1 };
  s2 -> s1 [0, 36] { R10066 += 1, R9668 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10066 += 1, R9667 += 1, R9668 += 1 };
  s2 -> s1 [38, 42] { R10066 += 1, R9668 += 1 };
  s2 -> s1 [44, 45] { R10066 += 1, R9668 += 1 };
  s2 -> s1 [47, 62] { R10066 += 1, R9668 += 1 };
  s2 -> s1 [64, 65535] { R10066 += 1, R9668 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R10068 += 1, R9669 += 1, R9670 += 1 };
  s0 -> s2 [0, 65535] { R10068 += 1, R9670 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R10067 += 1, R10068 += 1 };
  s1 -> s1 [0, 65535] { R10068 += 1, R9669 += 1, R9670 += 1 };
  s1 -> s2 [0, 65535] { R10068 += 1, R9670 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10068 += 1, R9670 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10068 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10068 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R10070 += 1, R9671 += 1, R9672 += 1 };
  s0 -> s3 [0, 65535] { R10070 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R10069 += 1, R10070 += 1 };
  s0 -> s4 [63, 63] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R10070 += 1, R9672 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10070 += 1 };
  s2 -> s1 [0, 62] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R10070 += 1, R9671 += 1, R9672 += 1 };
  s2 -> s3 [0, 65535] { R10070 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R10070 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10070 += 1 };
  s3 -> s4 [63, 63] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R10070 += 1, R9672 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10070 += 1 };
  s7 -> s7 [0, 65535] { R10070 += 1, R9672 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10070 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10072 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R10072 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R10071 += 1, R10072 += 1 };
  s0 -> s3 [0, 65535] { R10072 += 1, R9673 += 1, R9674 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10072 += 1 };
  s1 -> s1 [0, 65535] { R10072 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R10072 += 1, R9674 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10072 += 1 };
  s2 -> s1 [0, 65535] { R10072 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R10072 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10072 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R10072 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s3 [0, 65535] { R10072 += 1, R9673 += 1, R9674 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10072 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10072 += 1 };
  s6 -> s6 [0, 65535] { R10072 += 1, R9674 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R10074 += 1, R10028 += 1 };
  s0 -> s0 [0, 65535] { R10073 += 1, R10074 += 1 };
  s0 -> s2 [0, 65535] { R10074 += 1, R10027 += 1, R10028 += 1 };
  s0 -> s1 [45, 63] { R10074 += 1, R10028 += 1 };
  s0 -> s3 [88, 88] { R10074 += 1, R10028 += 1 };
  s0 -> s1 [89, 65535] { R10074 += 1, R10028 += 1 };
  s1 -> s1 [0, 43] { R10074 += 1, R10028 += 1 };
  s1 -> s1 [45, 63] { R10074 += 1, R10028 += 1 };
  s1 -> s3 [88, 88] { R10074 += 1, R10028 += 1 };
  s1 -> s1 [89, 65535] { R10074 += 1, R10028 += 1 };
  s2 -> s1 [0, 43] { R10074 += 1, R10028 += 1 };
  s2 -> s2 [0, 65535] { R10074 += 1, R10027 += 1, R10028 += 1 };
  s2 -> s1 [45, 63] { R10074 += 1, R10028 += 1 };
  s2 -> s3 [88, 88] { R10074 += 1, R10028 += 1 };
  s2 -> s1 [89, 65535] { R10074 += 1, R10028 += 1 };
  s3 -> s3 [0, 43] { R10074 += 1, R10028 += 1 };
  s3 -> s3 [0, 65535] { R10074 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R10074 += 1, R10028 += 1 };
  s3 -> s3 [88, 65535] { R10074 += 1, R10028 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R10075 += 1, R10076 += 1 };
  s0 -> s1 [0, 65535] { R10076 += 1, R10030 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R10076 += 1, R10029 += 1, R10030 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10076 += 1, R10030 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R10076 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10076 += 1, R10030 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R10076 += 1, R10029 += 1, R10030 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10076 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R10078 += 1, R10032 += 1 };
  s0 -> s2 [0, 65535] { R10078 += 1, R10032 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R10078 += 1, R10031 += 1, R10032 += 1 };
  s0 -> s0 [0, 65535] { R10077 += 1, R10078 += 1 };
  s0 -> s4 [58, 58] { R10078 += 1, R10032 += 1 };
  s0 -> s1 [59, 65535] { R10078 += 1, R10032 += 1 };
  s1 -> s1 [0, 57] { R10078 += 1, R10032 += 1 };
  s1 -> s1 [0, 65535] { R10078 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R10078 += 1, R10032 += 1 };
  s1 -> s1 [59, 65535] { R10078 += 1, R10032 += 1 };
  s2 -> s1 [0, 57] { R10078 += 1, R10032 += 1 };
  s2 -> s2 [0, 65535] { R10078 += 1, R10032 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R10078 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R10078 += 1, R10032 += 1 };
  s2 -> s1 [59, 65535] { R10078 += 1, R10032 += 1 };
  s3 -> s1 [0, 57] { R10078 += 1, R10032 += 1 };
  s3 -> s2 [0, 65535] { R10078 += 1, R10032 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R10078 += 1, R10031 += 1, R10032 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R10078 += 1, R10032 += 1 };
  s3 -> s1 [59, 65535] { R10078 += 1, R10032 += 1 };
  s4 -> s4 [0, 65535] { R10078 += 1, R10032 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10078 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R10080 += 1, R10034 += 1 };
  s0 -> s2 [0, 65535] { R10080 += 1, R10034 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R10079 += 1, R10080 += 1 };
  s0 -> s3 [0, 65535] { R10080 += 1, R10033 += 1, R10034 += 1 };
  s0 -> s4 [88, 88] { R10080 += 1, R10034 += 1 };
  s0 -> s1 [89, 65535] { R10080 += 1, R10034 += 1 };
  s1 -> s1 [0, 87] { R10080 += 1, R10034 += 1 };
  s1 -> s1 [0, 65535] { R10080 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R10080 += 1, R10034 += 1 };
  s1 -> s1 [89, 65535] { R10080 += 1, R10034 += 1 };
  s2 -> s1 [0, 87] { R10080 += 1, R10034 += 1 };
  s2 -> s2 [0, 65535] { R10080 += 1, R10034 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10080 += 1 };
  s2 -> s4 [88, 88] { R10080 += 1, R10034 += 1 };
  s2 -> s1 [89, 65535] { R10080 += 1, R10034 += 1 };
  s3 -> s1 [0, 87] { R10080 += 1, R10034 += 1 };
  s3 -> s2 [0, 65535] { R10080 += 1, R10034 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10080 += 1, R10033 += 1, R10034 += 1 };
  s3 -> s4 [88, 88] { R10080 += 1, R10034 += 1 };
  s3 -> s1 [89, 65535] { R10080 += 1, R10034 += 1 };
  s4 -> s4 [0, 65535] { R10080 += 1, R10034 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10080 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R10082 += 1, R10036 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R10082 += 1, R10035 += 1, R10036 += 1 };
  s0 -> s0 [0, 65535] { R10081 += 1, R10082 += 1 };
  s0 -> s4 [91, 91] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R10082 += 1, R10036 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10082 += 1 };
  s2 -> s1 [0, 90] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R10082 += 1, R10036 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10082 += 1 };
  s2 -> s4 [91, 91] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R10082 += 1, R10036 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10082 += 1, R10035 += 1, R10036 += 1 };
  s3 -> s4 [91, 91] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R10082 += 1, R10036 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10082 += 1 };
  s7 -> s7 [0, 65535] { R10082 += 1, R10036 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10082 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10084 += 1, R10038 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R10084 += 1, R10038 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R10084 += 1, R10037 += 1, R10038 += 1 };
  s0 -> s0 [0, 65535] { R10083 += 1, R10084 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10084 += 1, R10038 += 1 };
  s1 -> s1 [0, 65535] { R10084 += 1, R10038 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R10084 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10084 += 1, R10038 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R10084 += 1 };
  s2 -> s2 [0, 65535] { R10084 += 1, R10038 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10084 += 1, R10038 += 1, R5998 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R10084 += 1, R10038 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s3 [0, 65535] { R10084 += 1, R10037 += 1, R10038 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10084 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10084 += 1, R10038 += 1 };
  s6 -> s5 [0, 65535] { R10084 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10086 += 1, R10040 += 1, R10004 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R10085 += 1, R10086 += 1 };
  s0 -> s2 [0, 65535] { R10086 += 1, R10040 += 1, R10003 += 1, R10004 += 1 };
  s0 -> s3 [0, 65535] { R10086 += 1, R10039 += 1, R10040 += 1 };
  s1 -> s6 [0, 65535] { R10086 += 1, R10040 += 1 };
  s1 -> s5 [0, 65535] { R10086 += 1 };
  s1 -> s1 [0, 65535] { R10086 += 1, R10040 += 1, R10004 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10086 += 1 };
  s2 -> s1 [0, 65535] { R10086 += 1, R10040 += 1, R10004 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10086 += 1, R10040 += 1, R10003 += 1, R10004 += 1 };
  s3 -> s1 [0, 65535] { R10086 += 1, R10040 += 1, R10004 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10086 += 1, R10040 += 1, R10003 += 1, R10004 += 1 };
  s3 -> s3 [0, 65535] { R10086 += 1, R10039 += 1, R10040 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10086 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10086 += 1, R10040 += 1 };
  s6 -> s5 [0, 65535] { R10086 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10088 += 1, R10042 += 1, R10005 += 1, R10006 += 1 };
  s0 -> s0 [0, 65535] { R10087 += 1, R10088 += 1 };
  s0 -> s2 [0, 65535] { R10088 += 1, R10041 += 1, R10042 += 1 };
  s0 -> s3 [108, 108] { R10088 += 1, R10042 += 1, R10006 += 1 };
  s1 -> s1 [0, 65535] { R10088 += 1, R10042 += 1, R10005 += 1, R10006 += 1 };
  s1 -> s3 [108, 108] { R10088 += 1, R10042 += 1, R10006 += 1 };
  s2 -> s1 [0, 65535] { R10088 += 1, R10042 += 1, R10005 += 1, R10006 += 1 };
  s2 -> s2 [0, 65535] { R10088 += 1, R10041 += 1, R10042 += 1 };
  s2 -> s3 [108, 108] { R10088 += 1, R10042 += 1, R10006 += 1 };
  s3 -> s4 [111, 111] { R10088 += 1, R10042 += 1, R10006 += 1 };
  s4 -> s5 [99, 99] { R10088 += 1, R10042 += 1, R10006 += 1 };
  s5 -> s6 [97, 97] { R10088 += 1, R10042 += 1, R10006 += 1 };
  s6 -> s7 [0, 65535] { R10088 += 1 };
  s6 -> s6 [0, 65535] { R10088 += 1, R10042 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10088 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s6, s7, s8;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s0 -> s0 [0, 65535] { R10089 += 1, R10090 += 1 };
  s0 -> s2 [0, 65535] { R10090 += 1, R10044 += 1, R10011 += 1, R10012 += 1 };
  s0 -> s3 [0, 65535] { R10090 += 1, R10043 += 1, R10044 += 1 };
  s0 -> s4 [88, 88] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s0 -> s1 [89, 65535] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s1 -> s1 [0, 87] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s1 -> s4 [88, 88] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s1 -> s1 [89, 65535] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s2 -> s1 [0, 87] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s2 -> s2 [0, 65535] { R10090 += 1, R10044 += 1, R10011 += 1, R10012 += 1 };
  s2 -> s4 [88, 88] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s2 -> s1 [89, 65535] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s3 -> s1 [0, 87] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s3 -> s2 [0, 65535] { R10090 += 1, R10044 += 1, R10011 += 1, R10012 += 1 };
  s3 -> s3 [0, 65535] { R10090 += 1, R10043 += 1, R10044 += 1 };
  s3 -> s4 [88, 88] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s3 -> s1 [89, 65535] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10090 += 1, R10044 += 1 };
  s4 -> s4 [0, 65535] { R10090 += 1, R10044 += 1, R10012 += 1 };
  s4 -> s7 [0, 65535] { R10090 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10090 += 1, R10044 += 1 };
  s6 -> s7 [0, 65535] { R10090 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10090 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10092 += 1, R10046 += 1, R10014 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R10092 += 1, R10046 += 1, R10013 += 1, R10014 += 1 };
  s0 -> s0 [0, 65535] { R10091 += 1, R10092 += 1 };
  s0 -> s3 [0, 65535] { R10092 += 1, R10045 += 1, R10046 += 1 };
  s1 -> s6 [0, 65535] { R10092 += 1, R10046 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10092 += 1, R10046 += 1, R10014 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R10092 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10092 += 1, R10046 += 1, R10014 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R10092 += 1, R10046 += 1, R10013 += 1, R10014 += 1 };
  s2 -> s5 [0, 65535] { R10092 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10092 += 1, R10046 += 1, R10014 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R10092 += 1, R10046 += 1, R10013 += 1, R10014 += 1 };
  s3 -> s3 [0, 65535] { R10092 += 1, R10045 += 1, R10046 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10092 += 1 };
  s6 -> s6 [0, 65535] { R10092 += 1, R10046 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10092 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s0 -> s2 [0, 65535] { R10094 += 1, R10047 += 1, R10048 += 1 };
  s0 -> s3 [0, 65535] { R10094 += 1, R10048 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s4 [0, 65535] { R10094 += 1, R10048 += 1, R10016 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R10093 += 1, R10094 += 1 };
  s0 -> s5 [88, 88] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s0 -> s1 [89, 65535] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s1 -> s1 [0, 87] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10094 += 1 };
  s1 -> s1 [0, 65535] { R10094 += 1, R10048 += 1 };
  s1 -> s5 [88, 88] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s1 -> s1 [89, 65535] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s2 -> s1 [0, 87] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s2 -> s2 [0, 65535] { R10094 += 1, R10047 += 1, R10048 += 1 };
  s2 -> s3 [0, 65535] { R10094 += 1, R10048 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R10094 += 1, R10048 += 1, R10016 += 1, R7 += 1 };
  s2 -> s5 [88, 88] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s2 -> s1 [89, 65535] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s3 -> s1 [0, 87] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s3 -> s3 [0, 65535] { R10094 += 1, R10048 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R10094 += 1, R10048 += 1, R10016 += 1, R7 += 1 };
  s3 -> s7 [0, 65535] { R10094 += 1 };
  s3 -> s5 [88, 88] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s3 -> s1 [89, 65535] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s4 -> s1 [0, 87] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10094 += 1, R10048 += 1, R10016 += 1, R7 += 1 };
  s4 -> s7 [0, 65535] { R10094 += 1 };
  s4 -> s8 [0, 65535] { R10094 += 1, R10048 += 1 };
  s4 -> s5 [88, 88] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s4 -> s1 [89, 65535] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s5 -> s5 [0, 65535] { R10094 += 1, R10048 += 1, R10016 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10094 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10094 += 1 };
  s8 -> s8 [0, 65535] { R10094 += 1, R10048 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s0 -> s2 [0, 65535] { R10096 += 1, R10050 += 1, R10018 += 1, R9997 += 1, R9998 += 1 };
  s0 -> s0 [0, 65535] { R10095 += 1, R10096 += 1 };
  s0 -> s3 [0, 65535] { R10096 += 1, R10050 += 1, R10017 += 1, R10018 += 1 };
  s0 -> s4 [0, 65535] { R10096 += 1, R10049 += 1, R10050 += 1 };
  s0 -> s1 [89, 65535] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s1 -> s1 [0, 87] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s1 -> s1 [0, 65535] { R10096 += 1, R10050 += 1, R10018 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R10096 += 1, R10050 += 1 };
  s1 -> s6 [0, 65535] { R10096 += 1 };
  s1 -> s1 [89, 65535] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s2 -> s1 [0, 87] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R10096 += 1, R10050 += 1 };
  s2 -> s2 [0, 65535] { R10096 += 1, R10050 += 1, R10018 += 1, R9997 += 1, R9998 += 1 };
  s2 -> s6 [0, 65535] { R10096 += 1 };
  s2 -> s1 [89, 65535] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s3 -> s1 [0, 87] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10096 += 1, R10050 += 1, R10018 += 1, R9997 += 1, R9998 += 1 };
  s3 -> s3 [0, 65535] { R10096 += 1, R10050 += 1, R10017 += 1, R10018 += 1 };
  s3 -> s6 [0, 65535] { R10096 += 1 };
  s3 -> s1 [89, 65535] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s4 -> s1 [0, 87] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R10096 += 1, R10050 += 1, R10018 += 1, R9997 += 1, R9998 += 1 };
  s4 -> s3 [0, 65535] { R10096 += 1, R10050 += 1, R10017 += 1, R10018 += 1 };
  s4 -> s4 [0, 65535] { R10096 += 1, R10049 += 1, R10050 += 1 };
  s4 -> s1 [89, 65535] { R10096 += 1, R10050 += 1, R10018 += 1, R9998 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10096 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10096 += 1, R10050 += 1 };
  s7 -> s6 [0, 65535] { R10096 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1, R10000 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R10098 += 1, R10051 += 1, R10052 += 1 };
  s0 -> s0 [0, 65535] { R10097 += 1, R10098 += 1 };
  s0 -> s3 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1, R9999 += 1, R10000 += 1 };
  s0 -> s4 [0, 65535] { R10098 += 1, R10052 += 1, R10019 += 1, R10020 += 1 };
  s1 -> s1 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1, R10000 += 1, R5988 += 1 };
  s1 -> s7 [0, 65535] { R10098 += 1, R10052 += 1 };
  s1 -> s8 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1 };
  s1 -> s5 [0, 65535] { R10098 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1, R10000 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R10098 += 1, R10051 += 1, R10052 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1, R9999 += 1, R10000 += 1 };
  s2 -> s4 [0, 65535] { R10098 += 1, R10052 += 1, R10019 += 1, R10020 += 1 };
  s3 -> s1 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1, R10000 += 1, R5988 += 1 };
  s3 -> s7 [0, 65535] { R10098 += 1, R10052 += 1 };
  s3 -> s5 [0, 65535] { R10098 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1, R9999 += 1, R10000 += 1 };
  s4 -> s1 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1, R10000 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R10098 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1, R9999 += 1, R10000 += 1 };
  s4 -> s4 [0, 65535] { R10098 += 1, R10052 += 1, R10019 += 1, R10020 += 1 };
  s5 -> s5 [0, 65535] { R10098 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10098 += 1, R10052 += 1 };
  s7 -> s5 [0, 65535] { R10098 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10098 += 1, R10052 += 1 };
  s8 -> s8 [0, 65535] { R10098 += 1, R10052 += 1, R10020 += 1 };
  s8 -> s5 [0, 65535] { R10098 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10100 += 1, R10054 += 1, R10021 += 1, R10022 += 1 };
  s0 -> s2 [0, 65535] { R10100 += 1, R10054 += 1, R10022 += 1, R10001 += 1, R10002 += 1 };
  s0 -> s0 [0, 65535] { R10099 += 1, R10100 += 1 };
  s0 -> s3 [0, 65535] { R10100 += 1, R10053 += 1, R10054 += 1 };
  s0 -> s4 [111, 111] { R10100 += 1, R10054 += 1, R10022 += 1, R10002 += 1 };
  s1 -> s1 [0, 65535] { R10100 += 1, R10054 += 1, R10021 += 1, R10022 += 1 };
  s1 -> s2 [0, 65535] { R10100 += 1, R10054 += 1, R10022 += 1, R10001 += 1, R10002 += 1 };
  s1 -> s4 [111, 111] { R10100 += 1, R10054 += 1, R10022 += 1, R10002 += 1 };
  s2 -> s2 [0, 65535] { R10100 += 1, R10054 += 1, R10022 += 1, R10001 += 1, R10002 += 1 };
  s2 -> s4 [111, 111] { R10100 += 1, R10054 += 1, R10022 += 1, R10002 += 1 };
  s3 -> s1 [0, 65535] { R10100 += 1, R10054 += 1, R10021 += 1, R10022 += 1 };
  s3 -> s2 [0, 65535] { R10100 += 1, R10054 += 1, R10022 += 1, R10001 += 1, R10002 += 1 };
  s3 -> s3 [0, 65535] { R10100 += 1, R10053 += 1, R10054 += 1 };
  s3 -> s4 [111, 111] { R10100 += 1, R10054 += 1, R10022 += 1, R10002 += 1 };
  s4 -> s5 [115, 115] { R10100 += 1, R10054 += 1, R10022 += 1, R10002 += 1 };
  s5 -> s6 [116, 116] { R10100 += 1, R10054 += 1, R10022 += 1, R10002 += 1 };
  s6 -> s7 [0, 65535] { R10100 += 1 };
  s6 -> s8 [0, 65535] { R10100 += 1, R10054 += 1 };
  s6 -> s6 [0, 65535] { R10100 += 1, R10054 += 1, R10022 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R10100 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s7 [0, 65535] { R10100 += 1 };
  s8 -> s8 [0, 65535] { R10100 += 1, R10054 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s6, s7, s8, s9;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1, R10008 += 1, R5989 += 1 };
  s0 -> s2 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1, R10007 += 1, R10008 += 1 };
  s0 -> s3 [0, 65535] { R10102 += 1, R10055 += 1, R10056 += 1 };
  s0 -> s0 [0, 65535] { R10101 += 1, R10102 += 1 };
  s0 -> s4 [0, 65535] { R10102 += 1, R10056 += 1, R10023 += 1, R10024 += 1 };
  s1 -> s1 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1, R10008 += 1, R5989 += 1 };
  s1 -> s8 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1 };
  s1 -> s7 [0, 65535] { R10102 += 1, R10056 += 1 };
  s1 -> s5 [0, 65535] { R10102 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1, R10008 += 1, R5989 += 1 };
  s2 -> s2 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1, R10007 += 1, R10008 += 1 };
  s2 -> s7 [0, 65535] { R10102 += 1, R10056 += 1 };
  s2 -> s5 [0, 65535] { R10102 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1, R10008 += 1, R5989 += 1 };
  s3 -> s2 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1, R10007 += 1, R10008 += 1 };
  s3 -> s3 [0, 65535] { R10102 += 1, R10055 += 1, R10056 += 1 };
  s3 -> s4 [0, 65535] { R10102 += 1, R10056 += 1, R10023 += 1, R10024 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s1 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1, R10008 += 1, R5989 += 1 };
  s4 -> s2 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1, R10007 += 1, R10008 += 1 };
  s4 -> s5 [0, 65535] { R10102 += 1 };
  s4 -> s4 [0, 65535] { R10102 += 1, R10056 += 1, R10023 += 1, R10024 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10102 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10102 += 1, R10056 += 1 };
  s7 -> s5 [0, 65535] { R10102 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10102 += 1, R10056 += 1, R10024 += 1 };
  s8 -> s7 [0, 65535] { R10102 += 1, R10056 += 1 };
  s8 -> s5 [0, 65535] { R10102 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10104 += 1, R10058 += 1, R10026 += 1, R10009 += 1, R10010 += 1 };
  s0 -> s2 [0, 65535] { R10104 += 1, R10058 += 1, R10025 += 1, R10026 += 1 };
  s0 -> s3 [0, 65535] { R10104 += 1, R10057 += 1, R10058 += 1 };
  s0 -> s0 [0, 65535] { R10103 += 1, R10104 += 1 };
  s0 -> s4 [108, 108] { R10104 += 1, R10058 += 1, R10026 += 1, R10010 += 1 };
  s1 -> s1 [0, 65535] { R10104 += 1, R10058 += 1, R10026 += 1, R10009 += 1, R10010 += 1 };
  s1 -> s4 [108, 108] { R10104 += 1, R10058 += 1, R10026 += 1, R10010 += 1 };
  s2 -> s1 [0, 65535] { R10104 += 1, R10058 += 1, R10026 += 1, R10009 += 1, R10010 += 1 };
  s2 -> s2 [0, 65535] { R10104 += 1, R10058 += 1, R10025 += 1, R10026 += 1 };
  s2 -> s4 [108, 108] { R10104 += 1, R10058 += 1, R10026 += 1, R10010 += 1 };
  s3 -> s1 [0, 65535] { R10104 += 1, R10058 += 1, R10026 += 1, R10009 += 1, R10010 += 1 };
  s3 -> s2 [0, 65535] { R10104 += 1, R10058 += 1, R10025 += 1, R10026 += 1 };
  s3 -> s3 [0, 65535] { R10104 += 1, R10057 += 1, R10058 += 1 };
  s3 -> s4 [108, 108] { R10104 += 1, R10058 += 1, R10026 += 1, R10010 += 1 };
  s4 -> s5 [104, 104] { R10104 += 1, R10058 += 1, R10026 += 1, R10010 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10104 += 1, R10058 += 1 };
  s5 -> s8 [0, 65535] { R10104 += 1 };
  s5 -> s5 [0, 65535] { R10104 += 1, R10058 += 1, R10026 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10104 += 1, R10058 += 1 };
  s7 -> s8 [0, 65535] { R10104 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10104 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R1 = R10002 && R2 = R10026 && R3 = R9674 && R4 = R10104 && R15 = 0 && R16 = R10058 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R9667 - R10058 = 1 && R9668 = R9674 && R9669 - R10058 = 1 && R9670 = R9674 && R9671 - R10058 = 1 && R9672 = R9674 && R9673 - R10058 = 1 && R10001 = 0 && R10005 = 0 && R10006 = 0 && R10009 = 0 && R10010 = 0 && R10011 = 0 && R10012 = R10026 && R10013 = 0 && R10014 = R10026 && R10015 = 0 && R10016 = R10026 && R10017 = 0 && R10018 = R10026 && R10019 = 0 && R10020 = R10026 && R10021 = 0 && R10022 = R10026 && R10023 = 0 && R10024 = R10026 && R10025 = 0 && R10027 = 0 && R10028 = R10058 && R10029 = 0 && R10030 = R10058 && R10031 = 0 && R10032 = R10058 && R10033 = 0 && R10034 = R10058 && R10035 = 0 && R10036 = R10058 && R10037 = 0 && R10038 = R10058 && R10039 = 0 && R10040 = R10058 && R10041 = 0 && R10042 = R10058 && R10043 = 0 && R10044 = R10058 && R10045 = 0 && R10046 = R10058 && R10047 = 0 && R10048 = R10058 && R10049 = 0 && R10050 = R10058 && R10051 = 0 && R10052 = R10058 && R10053 = 0 && R10054 = R10058 && R10055 = 0 && R10056 = R10058 && R10057 = 0 && R10059 = 10 && R10060 = R10104 && R10061 = 10 && R10062 = R10104 && R10063 = 10 && R10064 = R10104 && R10065 = 10 && R10066 = R10104 && R10067 = 10 && R10068 = R10104 && R10069 = 10 && R10070 = R10104 && R10071 = 10 && R10072 = R10104 && R10073 = 10 && R10074 = R10104 && R10075 = 10 && R10076 = R10104 && R10077 = 10 && R10078 = R10104 && R10079 = 10 && R10080 = R10104 && R10081 = 10 && R10082 = R10104 && R10083 = 10 && R10084 = R10104 && R10085 = 10 && R10086 = R10104 && R10087 = 10 && R10088 = R10104 && R10089 = 10 && R10090 = R10104 && R10091 = 10 && R10092 = R10104 && R10093 = 10 && R10094 = R10104 && R10095 = 10 && R10096 = R10104 && R10097 = 10 && R10098 = R10104 && R10099 = 10 && R10100 = R10104 && R10101 = 10 && R10102 = R10104 && R10103 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R10058 < R9674 && -1 < R10002 && 0 < R10026 && -1 < R10058 && 9 < R10104 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R9997 != 0 || R9998 = R10002 || (R5988 = 0 && R10002 = 0)) && (R9999 != 0 || R10000 = R10002 || (R5988 = 0 && R10002 = 0)) && (R5989 = 0 || (R10007 = 0 && R10008 = 0)) && (R5990 = 0 || (R10003 = 0 && R10004 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R9997 = 0 || (R5988 = 0 && R10002 = 0)) && (R9999 = 0 || (R5988 = 0 && R10002 = 0));
// End of Parikh automata intersection problem
