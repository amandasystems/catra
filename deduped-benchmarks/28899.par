// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8047, R8048, R8049, R8050, R8051, R8052, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R8069, R8070, R8071, R8072, R8073, R8074, R8075, R8076, R8077, R8078, R8079, R8080, R8081, R8082, R8083, R8084, R8085, R8086, R8087, R8088, R8089, R8090, R8091, R8092, R8093, R8094, R8095, R8096, R8097, R8098, R8099, R8100, R8101, R8102, R8103, R8104, R8105, R8106, R8107, R8108, R8109, R8110, R8111, R8112, R8113, R8114, R8115, R8116, R8117, R8118, R8119, R8120, R8121, R8122, R8123, R8124, R8125, R8126, R8127, R8128, R8129, R8130, R8131, R8132, R8133, R8134, R8135, R8136, R8137, R8138, R8139, R8140, R8141, R8142, R8143, R8144, R8145, R8146, R8147, R8148, R8149, R8150, R8151, R8152;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R8108 += 1 };
  s0 -> s0 [0, 65535] { R8107 += 1, R8108 += 1 };
  s0 -> s2 [46, 46] { R8108 += 1 };
  s0 -> s3 [47, 47] { R8108 += 1 };
  s0 -> s1 [48, 65535] { R8108 += 1 };
  s1 -> s1 [0, 45] { R8108 += 1 };
  s1 -> s2 [46, 46] { R8108 += 1 };
  s1 -> s3 [47, 47] { R8108 += 1 };
  s1 -> s1 [48, 65535] { R8108 += 1 };
  s2 -> s1 [0, 45] { R8108 += 1 };
  s2 -> s2 [46, 46] { R8108 += 1 };
  s2 -> s3 [47, 47] { R8108 += 1 };
  s2 -> s1 [48, 114] { R8108 += 1 };
  s2 -> s8 [115, 115] { R8108 += 1 };
  s2 -> s1 [116, 65535] { R8108 += 1 };
  s3 -> s3 [0, 45] { R8108 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R8108 += 1 };
  s3 -> s3 [47, 65535] { R8108 += 1 };
  s4 -> s3 [0, 45] { R8108 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R8108 += 1 };
  s4 -> s3 [47, 114] { R8108 += 1 };
  s4 -> s5 [115, 115] { R8108 += 1 };
  s4 -> s3 [116, 65535] { R8108 += 1 };
  s5 -> s3 [0, 45] { R8108 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R8108 += 1 };
  s5 -> s3 [47, 110] { R8108 += 1 };
  s5 -> s6 [111, 111] { R8108 += 1 };
  s5 -> s3 [112, 65535] { R8108 += 1 };
  s6 -> s3 [0, 45] { R8108 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R8108 += 1 };
  s6 -> s3 [47, 98] { R8108 += 1 };
  s6 -> s7 [99, 99] { R8108 += 1 };
  s6 -> s3 [100, 65535] { R8108 += 1 };
  s7 -> s3 [0, 45] { R8108 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R8108 += 1 };
  s7 -> s3 [47, 106] { R8108 += 1 };
  s7 -> s3 [108, 65535] { R8108 += 1 };
  s8 -> s1 [0, 45] { R8108 += 1 };
  s8 -> s2 [46, 46] { R8108 += 1 };
  s8 -> s3 [47, 47] { R8108 += 1 };
  s8 -> s1 [48, 110] { R8108 += 1 };
  s8 -> s9 [111, 111] { R8108 += 1 };
  s8 -> s1 [112, 65535] { R8108 += 1 };
  s9 -> s1 [0, 45] { R8108 += 1 };
  s9 -> s2 [46, 46] { R8108 += 1 };
  s9 -> s3 [47, 47] { R8108 += 1 };
  s9 -> s1 [48, 98] { R8108 += 1 };
  s9 -> s10 [99, 99] { R8108 += 1 };
  s9 -> s1 [100, 65535] { R8108 += 1 };
  s10 -> s1 [0, 45] { R8108 += 1 };
  s10 -> s2 [46, 46] { R8108 += 1 };
  s10 -> s3 [47, 47] { R8108 += 1 };
  s10 -> s1 [48, 106] { R8108 += 1 };
  s10 -> s1 [108, 65535] { R8108 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R8109 += 1, R8110 += 1 };
  s0 -> s1 [0, 65535] { R8110 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R8110 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R8112 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8111 += 1, R8112 += 1 };
  s0 -> s2 [0, 65535] { R8112 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R8112 += 1 };
  s0 -> s1 [48, 65535] { R8112 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R8112 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R8112 += 1 };
  s1 -> s1 [48, 65535] { R8112 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R8112 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R8112 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R8112 += 1 };
  s2 -> s1 [48, 65535] { R8112 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8112 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8114 += 1, R8040 += 1 };
  s0 -> s0 [0, 65535] { R8113 += 1, R8114 += 1 };
  s0 -> s2 [0, 65535] { R8114 += 1, R8039 += 1, R8040 += 1 };
  s0 -> s1 [38, 42] { R8114 += 1, R8040 += 1 };
  s0 -> s1 [44, 45] { R8114 += 1, R8040 += 1 };
  s0 -> s1 [47, 62] { R8114 += 1, R8040 += 1 };
  s0 -> s1 [64, 65535] { R8114 += 1, R8040 += 1 };
  s1 -> s1 [0, 36] { R8114 += 1, R8040 += 1 };
  s1 -> s1 [0, 65535] { R8114 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R8114 += 1, R8040 += 1 };
  s1 -> s1 [44, 45] { R8114 += 1, R8040 += 1 };
  s1 -> s1 [47, 62] { R8114 += 1, R8040 += 1 };
  s1 -> s1 [64, 65535] { R8114 += 1, R8040 += 1 };
  s2 -> s1 [0, 36] { R8114 += 1, R8040 += 1 };
  s2 -> s2 [0, 65535] { R8114 += 1, R8039 += 1, R8040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R8114 += 1, R8040 += 1 };
  s2 -> s1 [44, 45] { R8114 += 1, R8040 += 1 };
  s2 -> s1 [47, 62] { R8114 += 1, R8040 += 1 };
  s2 -> s1 [64, 65535] { R8114 += 1, R8040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R8116 += 1, R8041 += 1, R8042 += 1 };
  s0 -> s2 [0, 65535] { R8116 += 1, R8042 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R8115 += 1, R8116 += 1 };
  s1 -> s1 [0, 65535] { R8116 += 1, R8041 += 1, R8042 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8116 += 1, R8042 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8116 += 1, R8042 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R8116 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8116 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R8117 += 1, R8118 += 1 };
  s0 -> s2 [0, 65535] { R8118 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R8118 += 1, R8043 += 1, R8044 += 1 };
  s0 -> s4 [63, 63] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8118 += 1 };
  s1 -> s7 [0, 65535] { R8118 += 1, R8044 += 1 };
  s2 -> s1 [0, 62] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R8118 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8118 += 1 };
  s2 -> s4 [63, 63] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R8118 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8118 += 1, R8043 += 1, R8044 += 1 };
  s3 -> s4 [63, 63] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8118 += 1, R8044 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8118 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8118 += 1 };
  s7 -> s7 [0, 65535] { R8118 += 1, R8044 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8120 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s2 [0, 65535] { R8120 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R8119 += 1, R8120 += 1 };
  s0 -> s3 [0, 65535] { R8120 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R8120 += 1, R8045 += 1, R8046 += 1 };
  s1 -> s2 [0, 65535] { R8120 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s3 [0, 65535] { R8120 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8120 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535] { R8120 += 1 };
  s2 -> s3 [0, 65535] { R8120 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R8120 += 1, R8046 += 1 };
  s3 -> s5 [0, 65535] { R8120 += 1 };
  s3 -> s3 [0, 65535] { R8120 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8120 += 1, R8046 += 1 };
  s4 -> s5 [0, 65535] { R8120 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8120 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8122 += 1, R8076 += 1 };
  s0 -> s2 [0, 65535] { R8122 += 1, R8075 += 1, R8076 += 1 };
  s0 -> s0 [0, 65535] { R8121 += 1, R8122 += 1 };
  s0 -> s1 [45, 63] { R8122 += 1, R8076 += 1 };
  s0 -> s3 [88, 88] { R8122 += 1, R8076 += 1 };
  s0 -> s1 [89, 65535] { R8122 += 1, R8076 += 1 };
  s1 -> s1 [0, 43] { R8122 += 1, R8076 += 1 };
  s1 -> s1 [45, 63] { R8122 += 1, R8076 += 1 };
  s1 -> s3 [88, 88] { R8122 += 1, R8076 += 1 };
  s1 -> s1 [89, 65535] { R8122 += 1, R8076 += 1 };
  s2 -> s1 [0, 43] { R8122 += 1, R8076 += 1 };
  s2 -> s2 [0, 65535] { R8122 += 1, R8075 += 1, R8076 += 1 };
  s2 -> s1 [45, 63] { R8122 += 1, R8076 += 1 };
  s2 -> s3 [88, 88] { R8122 += 1, R8076 += 1 };
  s2 -> s1 [89, 65535] { R8122 += 1, R8076 += 1 };
  s3 -> s3 [0, 43] { R8122 += 1, R8076 += 1 };
  s3 -> s3 [0, 65535] { R8122 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R8122 += 1, R8076 += 1 };
  s3 -> s3 [88, 65535] { R8122 += 1, R8076 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R8124 += 1, R8077 += 1, R8078 += 1 };
  s0 -> s2 [0, 65535] { R8124 += 1, R8078 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8123 += 1, R8124 += 1 };
  s1 -> s1 [0, 65535] { R8124 += 1, R8077 += 1, R8078 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8124 += 1, R8078 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8124 += 1 };
  s2 -> s2 [0, 65535] { R8124 += 1, R8078 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8124 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8126 += 1, R8080 += 1 };
  s0 -> s0 [0, 65535] { R8125 += 1, R8126 += 1 };
  s0 -> s2 [0, 65535] { R8126 += 1, R8079 += 1, R8080 += 1 };
  s0 -> s3 [0, 65535] { R8126 += 1, R8080 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R8126 += 1, R8080 += 1 };
  s0 -> s1 [59, 65535] { R8126 += 1, R8080 += 1 };
  s1 -> s1 [0, 57] { R8126 += 1, R8080 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8126 += 1 };
  s1 -> s4 [58, 58] { R8126 += 1, R8080 += 1 };
  s1 -> s1 [59, 65535] { R8126 += 1, R8080 += 1 };
  s2 -> s1 [0, 57] { R8126 += 1, R8080 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8126 += 1, R8079 += 1, R8080 += 1 };
  s2 -> s3 [0, 65535] { R8126 += 1, R8080 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R8126 += 1, R8080 += 1 };
  s2 -> s1 [59, 65535] { R8126 += 1, R8080 += 1 };
  s3 -> s1 [0, 57] { R8126 += 1, R8080 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8126 += 1 };
  s3 -> s3 [0, 65535] { R8126 += 1, R8080 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R8126 += 1, R8080 += 1 };
  s3 -> s1 [59, 65535] { R8126 += 1, R8080 += 1 };
  s4 -> s4 [0, 65535] { R8126 += 1, R8080 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8126 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R8128 += 1, R8082 += 1 };
  s0 -> s2 [0, 65535] { R8128 += 1, R8082 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R8127 += 1, R8128 += 1 };
  s0 -> s3 [0, 65535] { R8128 += 1, R8081 += 1, R8082 += 1 };
  s0 -> s4 [88, 88] { R8128 += 1, R8082 += 1 };
  s0 -> s1 [89, 65535] { R8128 += 1, R8082 += 1 };
  s1 -> s1 [0, 87] { R8128 += 1, R8082 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8128 += 1 };
  s1 -> s4 [88, 88] { R8128 += 1, R8082 += 1 };
  s1 -> s1 [89, 65535] { R8128 += 1, R8082 += 1 };
  s2 -> s1 [0, 87] { R8128 += 1, R8082 += 1 };
  s2 -> s2 [0, 65535] { R8128 += 1, R8082 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R8128 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R8128 += 1, R8082 += 1 };
  s2 -> s1 [89, 65535] { R8128 += 1, R8082 += 1 };
  s3 -> s1 [0, 87] { R8128 += 1, R8082 += 1 };
  s3 -> s2 [0, 65535] { R8128 += 1, R8082 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8128 += 1, R8081 += 1, R8082 += 1 };
  s3 -> s4 [88, 88] { R8128 += 1, R8082 += 1 };
  s3 -> s1 [89, 65535] { R8128 += 1, R8082 += 1 };
  s4 -> s4 [0, 65535] { R8128 += 1, R8082 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8128 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8129 += 1, R8130 += 1 };
  s0 -> s2 [0, 65535] { R8130 += 1, R8083 += 1, R8084 += 1 };
  s0 -> s3 [0, 65535] { R8130 += 1, R8084 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R8130 += 1, R8084 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8130 += 1 };
  s1 -> s1 [0, 65535] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R8130 += 1, R8083 += 1, R8084 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8130 += 1, R8084 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8130 += 1 };
  s3 -> s3 [0, 65535] { R8130 += 1, R8084 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8130 += 1, R8084 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8130 += 1 };
  s7 -> s7 [0, 65535] { R8130 += 1, R8084 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8130 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8132 += 1, R8086 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R8132 += 1, R8085 += 1, R8086 += 1 };
  s0 -> s0 [0, 65535] { R8131 += 1, R8132 += 1 };
  s0 -> s3 [0, 65535] { R8132 += 1, R8086 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R8132 += 1 };
  s1 -> s1 [0, 65535] { R8132 += 1, R8086 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R8132 += 1, R8086 += 1, R5998 += 1, R6 += 1 };
  s2 -> s1 [0, 65535] { R8132 += 1, R8086 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s2 [0, 65535] { R8132 += 1, R8085 += 1, R8086 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8132 += 1, R8086 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R8132 += 1 };
  s3 -> s5 [0, 65535] { R8132 += 1, R8086 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8132 += 1, R8086 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R8132 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R8132 += 1 };
  s5 -> s5 [0, 65535] { R8132 += 1, R8086 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R8133 += 1, R8134 += 1 };
  s0 -> s1 [0, 65535] { R8134 += 1, R8087 += 1, R8088 += 1 };
  s0 -> s2 [0, 65535] { R8134 += 1, R8088 += 1, R8051 += 1, R8052 += 1 };
  s0 -> s3 [0, 65535] { R8134 += 1, R8088 += 1, R8052 += 1, R5990 += 1 };
  s1 -> s1 [0, 65535] { R8134 += 1, R8087 += 1, R8088 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R8134 += 1, R8088 += 1, R8051 += 1, R8052 += 1 };
  s1 -> s3 [0, 65535] { R8134 += 1, R8088 += 1, R8052 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535] { R8134 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8134 += 1, R8088 += 1, R8051 += 1, R8052 += 1 };
  s2 -> s3 [0, 65535] { R8134 += 1, R8088 += 1, R8052 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R8134 += 1, R8088 += 1 };
  s3 -> s5 [0, 65535] { R8134 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8134 += 1, R8088 += 1, R8052 += 1, R5990 += 1 };
  s4 -> s4 [0, 65535] { R8134 += 1, R8088 += 1 };
  s4 -> s5 [0, 65535] { R8134 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8134 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R8136 += 1, R8089 += 1, R8090 += 1 };
  s0 -> s0 [0, 65535] { R8135 += 1, R8136 += 1 };
  s0 -> s2 [0, 65535] { R8136 += 1, R8090 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s3 [108, 108] { R8136 += 1, R8090 += 1, R8054 += 1 };
  s1 -> s1 [0, 65535] { R8136 += 1, R8089 += 1, R8090 += 1 };
  s1 -> s2 [0, 65535] { R8136 += 1, R8090 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s3 [108, 108] { R8136 += 1, R8090 += 1, R8054 += 1 };
  s2 -> s2 [0, 65535] { R8136 += 1, R8090 += 1, R8053 += 1, R8054 += 1 };
  s2 -> s3 [108, 108] { R8136 += 1, R8090 += 1, R8054 += 1 };
  s3 -> s4 [111, 111] { R8136 += 1, R8090 += 1, R8054 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8136 += 1 };
  s4 -> s4 [0, 65535] { R8136 += 1, R8090 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8136 += 1 };
  accepting s4, s5, s6;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s0 -> s2 [0, 65535] { R8138 += 1, R8091 += 1, R8092 += 1 };
  s0 -> s0 [0, 65535] { R8137 += 1, R8138 += 1 };
  s0 -> s3 [0, 65535] { R8138 += 1, R8092 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s4 [88, 88] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s0 -> s1 [89, 65535] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s1 -> s1 [0, 87] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s1 -> s4 [88, 88] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s1 -> s1 [89, 65535] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s2 -> s1 [0, 87] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s2 -> s2 [0, 65535] { R8138 += 1, R8091 += 1, R8092 += 1 };
  s2 -> s3 [0, 65535] { R8138 += 1, R8092 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s4 [88, 88] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s2 -> s1 [89, 65535] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s3 -> s1 [0, 87] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s3 -> s3 [0, 65535] { R8138 += 1, R8092 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s4 [88, 88] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s3 -> s1 [89, 65535] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s4 -> s5 [0, 65535] { R8138 += 1, R8092 += 1 };
  s4 -> s6 [0, 65535] { R8138 += 1 };
  s4 -> s4 [0, 65535] { R8138 += 1, R8092 += 1, R8060 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8138 += 1, R8092 += 1 };
  s5 -> s6 [0, 65535] { R8138 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R8138 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R8139 += 1, R8140 += 1 };
  s0 -> s1 [0, 65535] { R8140 += 1, R8094 += 1, R8061 += 1, R8062 += 1 };
  s0 -> s2 [0, 65535] { R8140 += 1, R8094 += 1, R8062 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R8140 += 1, R8093 += 1, R8094 += 1 };
  s1 -> s6 [0, 65535] { R8140 += 1 };
  s1 -> s1 [0, 65535] { R8140 += 1, R8094 += 1, R8061 += 1, R8062 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8140 += 1, R8094 += 1, R8062 += 1, R1 += 1 };
  s2 -> s5 [0, 65535] { R8140 += 1, R8094 += 1 };
  s2 -> s6 [0, 65535] { R8140 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8140 += 1, R8094 += 1, R8062 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8140 += 1, R8094 += 1, R8061 += 1, R8062 += 1 };
  s3 -> s2 [0, 65535] { R8140 += 1, R8094 += 1, R8062 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R8140 += 1, R8093 += 1, R8094 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8140 += 1, R8094 += 1 };
  s5 -> s6 [0, 65535] { R8140 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8140 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s0 -> s2 [0, 65535] { R8142 += 1, R8096 += 1, R8064 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R8142 += 1, R8096 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s0 [0, 65535] { R8141 += 1, R8142 += 1 };
  s0 -> s4 [0, 65535] { R8142 += 1, R8095 += 1, R8096 += 1 };
  s0 -> s5 [88, 88] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s0 -> s1 [89, 65535] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s1 -> s1 [0, 87] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s1 -> s7 [0, 65535] { R8142 += 1 };
  s1 -> s1 [0, 65535] { R8142 += 1, R8096 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [88, 88] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s1 -> s1 [89, 65535] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s2 -> s1 [0, 87] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s2 -> s7 [0, 65535] { R8142 += 1 };
  s2 -> s8 [0, 65535] { R8142 += 1, R8096 += 1 };
  s2 -> s2 [0, 65535] { R8142 += 1, R8096 += 1, R8064 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [88, 88] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s2 -> s1 [89, 65535] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s3 -> s1 [0, 87] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s3 -> s7 [0, 65535] { R8142 += 1 };
  s3 -> s2 [0, 65535] { R8142 += 1, R8096 += 1, R8064 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R8142 += 1, R8096 += 1, R8063 += 1, R8064 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [88, 88] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s3 -> s1 [89, 65535] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s4 -> s1 [0, 87] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s4 -> s2 [0, 65535] { R8142 += 1, R8096 += 1, R8064 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R8142 += 1, R8096 += 1, R8063 += 1, R8064 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8142 += 1, R8095 += 1, R8096 += 1 };
  s4 -> s5 [88, 88] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s4 -> s1 [89, 65535] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s5 -> s5 [0, 65535] { R8142 += 1, R8096 += 1, R8064 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8142 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8142 += 1 };
  s8 -> s8 [0, 65535] { R8142 += 1, R8096 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s0 -> s2 [0, 65535] { R8144 += 1, R8098 += 1, R8065 += 1, R8066 += 1 };
  s0 -> s3 [0, 65535] { R8144 += 1, R8097 += 1, R8098 += 1 };
  s0 -> s0 [0, 65535] { R8143 += 1, R8144 += 1 };
  s0 -> s4 [0, 65535] { R8144 += 1, R8098 += 1, R8066 += 1, R8047 += 1, R8048 += 1 };
  s0 -> s1 [89, 65535] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s1 -> s1 [0, 87] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8144 += 1, R8098 += 1, R8066 += 1 };
  s1 -> s7 [0, 65535] { R8144 += 1 };
  s1 -> s5 [0, 65535] { R8144 += 1, R8098 += 1 };
  s1 -> s1 [89, 65535] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s2 -> s1 [0, 87] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8144 += 1, R8098 += 1, R8065 += 1, R8066 += 1 };
  s2 -> s7 [0, 65535] { R8144 += 1 };
  s2 -> s4 [0, 65535] { R8144 += 1, R8098 += 1, R8066 += 1, R8047 += 1, R8048 += 1 };
  s2 -> s1 [89, 65535] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s3 -> s1 [0, 87] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R8144 += 1, R8098 += 1, R8065 += 1, R8066 += 1 };
  s3 -> s3 [0, 65535] { R8144 += 1, R8097 += 1, R8098 += 1 };
  s3 -> s4 [0, 65535] { R8144 += 1, R8098 += 1, R8066 += 1, R8047 += 1, R8048 += 1 };
  s3 -> s1 [89, 65535] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s4 -> s1 [0, 87] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s4 -> s5 [0, 65535] { R8144 += 1, R8098 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8144 += 1 };
  s4 -> s4 [0, 65535] { R8144 += 1, R8098 += 1, R8066 += 1, R8047 += 1, R8048 += 1 };
  s4 -> s1 [89, 65535] { R8144 += 1, R8098 += 1, R8066 += 1, R8048 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8144 += 1 };
  s5 -> s5 [0, 65535] { R8144 += 1, R8098 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8144 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8146 += 1, R8100 += 1, R8067 += 1, R8068 += 1 };
  s0 -> s2 [0, 65535] { R8146 += 1, R8099 += 1, R8100 += 1 };
  s0 -> s3 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1, R8049 += 1, R8050 += 1 };
  s0 -> s4 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1, R8050 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R8145 += 1, R8146 += 1 };
  s1 -> s1 [0, 65535] { R8146 += 1, R8100 += 1, R8067 += 1, R8068 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1, R8049 += 1, R8050 += 1 };
  s1 -> s4 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1, R8050 += 1, R5988 += 1 };
  s1 -> s8 [0, 65535] { R8146 += 1 };
  s2 -> s1 [0, 65535] { R8146 += 1, R8100 += 1, R8067 += 1, R8068 += 1 };
  s2 -> s2 [0, 65535] { R8146 += 1, R8099 += 1, R8100 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1, R8049 += 1, R8050 += 1 };
  s2 -> s4 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1, R8050 += 1, R5988 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R8146 += 1, R8100 += 1 };
  s3 -> s3 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1, R8049 += 1, R8050 += 1 };
  s3 -> s4 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1, R8050 += 1, R5988 += 1 };
  s3 -> s8 [0, 65535] { R8146 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1 };
  s4 -> s7 [0, 65535] { R8146 += 1, R8100 += 1 };
  s4 -> s4 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1, R8050 += 1, R5988 += 1 };
  s4 -> s8 [0, 65535] { R8146 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8146 += 1, R8100 += 1, R8068 += 1 };
  s6 -> s7 [0, 65535] { R8146 += 1, R8100 += 1 };
  s6 -> s8 [0, 65535] { R8146 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8146 += 1, R8100 += 1 };
  s7 -> s8 [0, 65535] { R8146 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R8146 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8148 += 1, R8102 += 1, R8070 += 1 };
  s0 -> s0 [0, 65535] { R8147 += 1, R8148 += 1 };
  s0 -> s2 [0, 65535] { R8148 += 1, R8101 += 1, R8102 += 1 };
  s0 -> s3 [0, 65535] { R8148 += 1, R8102 += 1, R8069 += 1, R8070 += 1 };
  s1 -> s1 [0, 65535] { R8148 += 1, R8102 += 1, R8070 += 1 };
  s1 -> s6 [0, 65535] { R8148 += 1, R8102 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8148 += 1 };
  s2 -> s1 [0, 65535] { R8148 += 1, R8102 += 1, R8070 += 1 };
  s2 -> s2 [0, 65535] { R8148 += 1, R8101 += 1, R8102 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8148 += 1, R8102 += 1, R8069 += 1, R8070 += 1 };
  s3 -> s1 [0, 65535] { R8148 += 1, R8102 += 1, R8070 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8148 += 1 };
  s3 -> s3 [0, 65535] { R8148 += 1, R8102 += 1, R8069 += 1, R8070 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8148 += 1 };
  s6 -> s6 [0, 65535] { R8148 += 1, R8102 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8148 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8150 += 1, R8103 += 1, R8104 += 1 };
  s0 -> s2 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1, R8055 += 1, R8056 += 1 };
  s0 -> s0 [0, 65535] { R8149 += 1, R8150 += 1 };
  s0 -> s3 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1, R8056 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R8150 += 1, R8104 += 1, R8071 += 1, R8072 += 1 };
  s1 -> s1 [0, 65535] { R8150 += 1, R8103 += 1, R8104 += 1 };
  s1 -> s2 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1, R8055 += 1, R8056 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1, R8056 += 1, R5989 += 1 };
  s1 -> s4 [0, 65535] { R8150 += 1, R8104 += 1, R8071 += 1, R8072 += 1 };
  s2 -> s7 [0, 65535] { R8150 += 1, R8104 += 1 };
  s2 -> s2 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1, R8055 += 1, R8056 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1, R8056 += 1, R5989 += 1 };
  s2 -> s6 [0, 65535] { R8150 += 1 };
  s3 -> s7 [0, 65535] { R8150 += 1, R8104 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1, R8056 += 1, R5989 += 1 };
  s3 -> s6 [0, 65535] { R8150 += 1 };
  s3 -> s8 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1 };
  s4 -> s2 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1, R8055 += 1, R8056 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1, R8056 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R8150 += 1, R8104 += 1, R8071 += 1, R8072 += 1 };
  s4 -> s6 [0, 65535] { R8150 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8150 += 1 };
  s7 -> s7 [0, 65535] { R8150 += 1, R8104 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8150 += 1 };
  s8 -> s7 [0, 65535] { R8150 += 1, R8104 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R8150 += 1 };
  s8 -> s8 [0, 65535] { R8150 += 1, R8104 += 1, R8072 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8152 += 1, R8106 += 1, R8073 += 1, R8074 += 1 };
  s0 -> s2 [0, 65535] { R8152 += 1, R8106 += 1, R8074 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s0 [0, 65535] { R8151 += 1, R8152 += 1 };
  s0 -> s3 [0, 65535] { R8152 += 1, R8105 += 1, R8106 += 1 };
  s0 -> s4 [99, 99] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s1 -> s1 [0, 65535] { R8152 += 1, R8106 += 1, R8073 += 1, R8074 += 1 };
  s1 -> s2 [0, 65535] { R8152 += 1, R8106 += 1, R8074 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s4 [99, 99] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s2 -> s2 [0, 65535] { R8152 += 1, R8106 += 1, R8074 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s4 [99, 99] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s3 -> s1 [0, 65535] { R8152 += 1, R8106 += 1, R8073 += 1, R8074 += 1 };
  s3 -> s2 [0, 65535] { R8152 += 1, R8106 += 1, R8074 += 1, R8057 += 1, R8058 += 1 };
  s3 -> s3 [0, 65535] { R8152 += 1, R8105 += 1, R8106 += 1 };
  s3 -> s4 [99, 99] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s4 -> s5 [97, 97] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s5 -> s6 [108, 108] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s6 -> s7 [104, 104] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s7 -> s8 [111, 111] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s8 -> s9 [115, 115] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s9 -> s10 [116, 116] { R8152 += 1, R8106 += 1, R8074 += 1, R8058 += 1 };
  s10 -> s11 [0, 65535] { R8152 += 1 };
  s10 -> s12 [0, 65535] { R8152 += 1, R8106 += 1 };
  s10 -> s13 [0, 65535];
  s10 -> s10 [0, 65535] { R8152 += 1, R8106 += 1, R8074 += 1 };
  s11 -> s11 [0, 65535] { R8152 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s11 [0, 65535] { R8152 += 1 };
  s12 -> s12 [0, 65535] { R8152 += 1, R8106 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  accepting s10, s11, s12, s13;
};
};
constraint R1 = 0 && R2 = R8074 && R3 = R8046 && R4 = R8152 && R15 = 0 && R16 = R8106 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8039 - R8106 = 1 && R8040 = R8046 && R8041 - R8106 = 1 && R8042 = R8046 && R8043 - R8106 = 1 && R8044 = R8046 && R8045 - R8106 = 1 && R8053 = 0 && R8054 = 0 && R8057 = 0 && R8058 = 0 && R8059 = 0 && R8060 = R8074 && R8061 = 0 && R8062 = R8074 && R8063 = 0 && R8064 = R8074 && R8065 = 0 && R8066 = R8074 && R8067 = 0 && R8068 = R8074 && R8069 = 0 && R8070 = R8074 && R8071 = 0 && R8072 = R8074 && R8073 = 0 && R8075 = 0 && R8076 = R8106 && R8077 = 0 && R8078 = R8106 && R8079 = 0 && R8080 = R8106 && R8081 = 0 && R8082 = R8106 && R8083 = 0 && R8084 = R8106 && R8085 = 0 && R8086 = R8106 && R8087 = 0 && R8088 = R8106 && R8089 = 0 && R8090 = R8106 && R8091 = 0 && R8092 = R8106 && R8093 = 0 && R8094 = R8106 && R8095 = 0 && R8096 = R8106 && R8097 = 0 && R8098 = R8106 && R8099 = 0 && R8100 = R8106 && R8101 = 0 && R8102 = R8106 && R8103 = 0 && R8104 = R8106 && R8105 = 0 && R8107 = 10 && R8108 = R8152 && R8109 = 10 && R8110 = R8152 && R8111 = 10 && R8112 = R8152 && R8113 = 10 && R8114 = R8152 && R8115 = 10 && R8116 = R8152 && R8117 = 10 && R8118 = R8152 && R8119 = 10 && R8120 = R8152 && R8121 = 10 && R8122 = R8152 && R8123 = 10 && R8124 = R8152 && R8125 = 10 && R8126 = R8152 && R8127 = 10 && R8128 = R8152 && R8129 = 10 && R8130 = R8152 && R8131 = 10 && R8132 = R8152 && R8133 = 10 && R8134 = R8152 && R8135 = 10 && R8136 = R8152 && R8137 = 10 && R8138 = R8152 && R8139 = 10 && R8140 = R8152 && R8141 = 10 && R8142 = R8152 && R8143 = 10 && R8144 = R8152 && R8145 = 10 && R8146 = R8152 && R8147 = 10 && R8148 = R8152 && R8149 = 10 && R8150 = R8152 && R8151 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R8106 < R8046 && 0 < R8074 && -1 < R8106 && 9 < R8152 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R5988 = 0 || (R8047 = 0 && R8048 = 0)) && (R5988 = 0 || (R8049 = 0 && R8050 = 0)) && (R5989 = 0 || (R8055 = 0 && R8056 = 0)) && (R5990 = 0 || (R8051 = 0 && R8052 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
