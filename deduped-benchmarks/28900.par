// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8153, R8154, R8155, R8156, R8157, R8158, R8159, R8160, R8161, R8162, R8163, R8164, R8165, R8166, R8167, R8168, R8169, R8170, R8171, R8172, R8173, R8174, R8175, R8176, R8177, R8178, R8179, R8180, R8181, R8182, R8183, R8184, R8185, R8186, R8187, R8188, R8189, R8190, R8191, R8192, R8193, R8194, R8195, R8196, R8197, R8198, R8199, R8200, R8201, R8202, R8203, R8204, R8205, R8206, R8207, R8208, R8209, R8210, R8211, R8212, R8213, R8214, R8215, R8216, R8217, R8218, R8219, R8220, R8221, R8222, R8223, R8224, R8225, R8226, R8227, R8228, R8229, R8230, R8231, R8232, R8233, R8234, R8235, R8236, R8237, R8238, R8239, R8240, R8241, R8242, R8243, R8244, R8245, R8246, R8247, R8248, R8249, R8250, R8251, R8252, R8253, R8254, R8255, R8256, R8257, R8258, R8259, R8260;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R8216 += 1 };
  s0 -> s0 [0, 65535] { R8215 += 1, R8216 += 1 };
  s0 -> s2 [46, 46] { R8216 += 1 };
  s0 -> s3 [47, 47] { R8216 += 1 };
  s0 -> s1 [48, 65535] { R8216 += 1 };
  s1 -> s1 [0, 45] { R8216 += 1 };
  s1 -> s2 [46, 46] { R8216 += 1 };
  s1 -> s3 [47, 47] { R8216 += 1 };
  s1 -> s1 [48, 65535] { R8216 += 1 };
  s2 -> s1 [0, 45] { R8216 += 1 };
  s2 -> s2 [46, 46] { R8216 += 1 };
  s2 -> s3 [47, 47] { R8216 += 1 };
  s2 -> s1 [48, 114] { R8216 += 1 };
  s2 -> s8 [115, 115] { R8216 += 1 };
  s2 -> s1 [116, 65535] { R8216 += 1 };
  s3 -> s3 [0, 45] { R8216 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R8216 += 1 };
  s3 -> s3 [47, 65535] { R8216 += 1 };
  s4 -> s3 [0, 45] { R8216 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R8216 += 1 };
  s4 -> s3 [47, 114] { R8216 += 1 };
  s4 -> s5 [115, 115] { R8216 += 1 };
  s4 -> s3 [116, 65535] { R8216 += 1 };
  s5 -> s3 [0, 45] { R8216 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R8216 += 1 };
  s5 -> s3 [47, 110] { R8216 += 1 };
  s5 -> s6 [111, 111] { R8216 += 1 };
  s5 -> s3 [112, 65535] { R8216 += 1 };
  s6 -> s3 [0, 45] { R8216 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R8216 += 1 };
  s6 -> s3 [47, 98] { R8216 += 1 };
  s6 -> s7 [99, 99] { R8216 += 1 };
  s6 -> s3 [100, 65535] { R8216 += 1 };
  s7 -> s3 [0, 45] { R8216 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R8216 += 1 };
  s7 -> s3 [47, 106] { R8216 += 1 };
  s7 -> s3 [108, 65535] { R8216 += 1 };
  s8 -> s1 [0, 45] { R8216 += 1 };
  s8 -> s2 [46, 46] { R8216 += 1 };
  s8 -> s3 [47, 47] { R8216 += 1 };
  s8 -> s1 [48, 110] { R8216 += 1 };
  s8 -> s9 [111, 111] { R8216 += 1 };
  s8 -> s1 [112, 65535] { R8216 += 1 };
  s9 -> s1 [0, 45] { R8216 += 1 };
  s9 -> s2 [46, 46] { R8216 += 1 };
  s9 -> s3 [47, 47] { R8216 += 1 };
  s9 -> s1 [48, 98] { R8216 += 1 };
  s9 -> s10 [99, 99] { R8216 += 1 };
  s9 -> s1 [100, 65535] { R8216 += 1 };
  s10 -> s1 [0, 45] { R8216 += 1 };
  s10 -> s2 [46, 46] { R8216 += 1 };
  s10 -> s3 [47, 47] { R8216 += 1 };
  s10 -> s1 [48, 106] { R8216 += 1 };
  s10 -> s1 [108, 65535] { R8216 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R8218 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R8217 += 1, R8218 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8218 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R8220 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R8220 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8219 += 1, R8220 += 1 };
  s0 -> s3 [47, 47] { R8220 += 1 };
  s0 -> s1 [48, 65535] { R8220 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R8220 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R8220 += 1 };
  s1 -> s1 [48, 65535] { R8220 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R8220 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R8220 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R8220 += 1 };
  s2 -> s1 [48, 65535] { R8220 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8220 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8222 += 1, R8040 += 1 };
  s0 -> s0 [0, 65535] { R8221 += 1, R8222 += 1 };
  s0 -> s2 [0, 65535] { R8222 += 1, R8039 += 1, R8040 += 1 };
  s0 -> s1 [38, 42] { R8222 += 1, R8040 += 1 };
  s0 -> s1 [44, 45] { R8222 += 1, R8040 += 1 };
  s0 -> s1 [47, 62] { R8222 += 1, R8040 += 1 };
  s0 -> s1 [64, 65535] { R8222 += 1, R8040 += 1 };
  s1 -> s1 [0, 36] { R8222 += 1, R8040 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8222 += 1 };
  s1 -> s1 [38, 42] { R8222 += 1, R8040 += 1 };
  s1 -> s1 [44, 45] { R8222 += 1, R8040 += 1 };
  s1 -> s1 [47, 62] { R8222 += 1, R8040 += 1 };
  s1 -> s1 [64, 65535] { R8222 += 1, R8040 += 1 };
  s2 -> s1 [0, 36] { R8222 += 1, R8040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8222 += 1, R8039 += 1, R8040 += 1 };
  s2 -> s1 [38, 42] { R8222 += 1, R8040 += 1 };
  s2 -> s1 [44, 45] { R8222 += 1, R8040 += 1 };
  s2 -> s1 [47, 62] { R8222 += 1, R8040 += 1 };
  s2 -> s1 [64, 65535] { R8222 += 1, R8040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R8224 += 1, R8041 += 1, R8042 += 1 };
  s0 -> s0 [0, 65535] { R8223 += 1, R8224 += 1 };
  s0 -> s2 [0, 65535] { R8224 += 1, R8042 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8224 += 1, R8041 += 1, R8042 += 1 };
  s1 -> s2 [0, 65535] { R8224 += 1, R8042 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8224 += 1, R8042 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R8224 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8224 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R8226 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R8225 += 1, R8226 += 1 };
  s0 -> s3 [0, 65535] { R8226 += 1, R8043 += 1, R8044 += 1 };
  s0 -> s4 [63, 63] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R8226 += 1 };
  s1 -> s1 [0, 65535] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R8226 += 1, R8044 += 1 };
  s2 -> s1 [0, 62] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R8226 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R8226 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R8226 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R8226 += 1, R8043 += 1, R8044 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8226 += 1, R8044 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8226 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8226 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8226 += 1, R8044 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8228 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s0 [0, 65535] { R8227 += 1, R8228 += 1 };
  s0 -> s2 [0, 65535] { R8228 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R8228 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R8228 += 1, R8045 += 1, R8046 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8228 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R8228 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8228 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R8228 += 1 };
  s2 -> s6 [0, 65535] { R8228 += 1, R8046 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8228 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R8228 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s5 [0, 65535] { R8228 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8228 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8228 += 1 };
  s6 -> s6 [0, 65535] { R8228 += 1, R8046 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8230 += 1, R8184 += 1 };
  s0 -> s2 [0, 65535] { R8230 += 1, R8183 += 1, R8184 += 1 };
  s0 -> s0 [0, 65535] { R8229 += 1, R8230 += 1 };
  s0 -> s1 [45, 63] { R8230 += 1, R8184 += 1 };
  s0 -> s3 [88, 88] { R8230 += 1, R8184 += 1 };
  s0 -> s1 [89, 65535] { R8230 += 1, R8184 += 1 };
  s1 -> s1 [0, 43] { R8230 += 1, R8184 += 1 };
  s1 -> s1 [45, 63] { R8230 += 1, R8184 += 1 };
  s1 -> s3 [88, 88] { R8230 += 1, R8184 += 1 };
  s1 -> s1 [89, 65535] { R8230 += 1, R8184 += 1 };
  s2 -> s1 [0, 43] { R8230 += 1, R8184 += 1 };
  s2 -> s2 [0, 65535] { R8230 += 1, R8183 += 1, R8184 += 1 };
  s2 -> s1 [45, 63] { R8230 += 1, R8184 += 1 };
  s2 -> s3 [88, 88] { R8230 += 1, R8184 += 1 };
  s2 -> s1 [89, 65535] { R8230 += 1, R8184 += 1 };
  s3 -> s3 [0, 43] { R8230 += 1, R8184 += 1 };
  s3 -> s3 [0, 65535] { R8230 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R8230 += 1, R8184 += 1 };
  s3 -> s3 [88, 65535] { R8230 += 1, R8184 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R8231 += 1, R8232 += 1 };
  s0 -> s1 [0, 65535] { R8232 += 1, R8185 += 1, R8186 += 1 };
  s0 -> s2 [0, 65535] { R8232 += 1, R8186 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8232 += 1, R8185 += 1, R8186 += 1 };
  s1 -> s2 [0, 65535] { R8232 += 1, R8186 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8232 += 1 };
  s2 -> s2 [0, 65535] { R8232 += 1, R8186 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8232 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8234 += 1, R8188 += 1 };
  s0 -> s0 [0, 65535] { R8233 += 1, R8234 += 1 };
  s0 -> s2 [0, 65535] { R8234 += 1, R8187 += 1, R8188 += 1 };
  s0 -> s3 [0, 65535] { R8234 += 1, R8188 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R8234 += 1, R8188 += 1 };
  s0 -> s1 [59, 65535] { R8234 += 1, R8188 += 1 };
  s1 -> s1 [0, 57] { R8234 += 1, R8188 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8234 += 1 };
  s1 -> s4 [58, 58] { R8234 += 1, R8188 += 1 };
  s1 -> s1 [59, 65535] { R8234 += 1, R8188 += 1 };
  s2 -> s1 [0, 57] { R8234 += 1, R8188 += 1 };
  s2 -> s2 [0, 65535] { R8234 += 1, R8187 += 1, R8188 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8234 += 1, R8188 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R8234 += 1, R8188 += 1 };
  s2 -> s1 [59, 65535] { R8234 += 1, R8188 += 1 };
  s3 -> s1 [0, 57] { R8234 += 1, R8188 += 1 };
  s3 -> s5 [0, 65535] { R8234 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8234 += 1, R8188 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R8234 += 1, R8188 += 1 };
  s3 -> s1 [59, 65535] { R8234 += 1, R8188 += 1 };
  s4 -> s4 [0, 65535] { R8234 += 1, R8188 += 1 };
  s5 -> s5 [0, 65535] { R8234 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R8236 += 1, R8190 += 1 };
  s0 -> s2 [0, 65535] { R8236 += 1, R8189 += 1, R8190 += 1 };
  s0 -> s3 [0, 65535] { R8236 += 1, R8190 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R8235 += 1, R8236 += 1 };
  s0 -> s4 [88, 88] { R8236 += 1, R8190 += 1 };
  s0 -> s1 [89, 65535] { R8236 += 1, R8190 += 1 };
  s1 -> s1 [0, 87] { R8236 += 1, R8190 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8236 += 1 };
  s1 -> s4 [88, 88] { R8236 += 1, R8190 += 1 };
  s1 -> s1 [89, 65535] { R8236 += 1, R8190 += 1 };
  s2 -> s1 [0, 87] { R8236 += 1, R8190 += 1 };
  s2 -> s2 [0, 65535] { R8236 += 1, R8189 += 1, R8190 += 1 };
  s2 -> s3 [0, 65535] { R8236 += 1, R8190 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R8236 += 1, R8190 += 1 };
  s2 -> s1 [89, 65535] { R8236 += 1, R8190 += 1 };
  s3 -> s1 [0, 87] { R8236 += 1, R8190 += 1 };
  s3 -> s3 [0, 65535] { R8236 += 1, R8190 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8236 += 1 };
  s3 -> s4 [88, 88] { R8236 += 1, R8190 += 1 };
  s3 -> s1 [89, 65535] { R8236 += 1, R8190 += 1 };
  s4 -> s4 [0, 65535] { R8236 += 1, R8190 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8236 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R8238 += 1, R8191 += 1, R8192 += 1 };
  s0 -> s3 [0, 65535] { R8238 += 1, R8192 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8237 += 1, R8238 += 1 };
  s0 -> s4 [91, 91] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535] { R8238 += 1 };
  s1 -> s7 [0, 65535] { R8238 += 1, R8192 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R8238 += 1, R8191 += 1, R8192 += 1 };
  s2 -> s3 [0, 65535] { R8238 += 1, R8192 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R8238 += 1 };
  s3 -> s3 [0, 65535] { R8238 += 1, R8192 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8238 += 1, R8192 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R8238 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8238 += 1 };
  s7 -> s7 [0, 65535] { R8238 += 1, R8192 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8240 += 1, R8194 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R8239 += 1, R8240 += 1 };
  s0 -> s2 [0, 65535] { R8240 += 1, R8194 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R8240 += 1, R8193 += 1, R8194 += 1 };
  s1 -> s1 [0, 65535] { R8240 += 1, R8194 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s6 [0, 65535] { R8240 += 1 };
  s1 -> s2 [0, 65535] { R8240 += 1, R8194 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8240 += 1, R8194 += 1 };
  s2 -> s6 [0, 65535] { R8240 += 1 };
  s2 -> s2 [0, 65535] { R8240 += 1, R8194 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8240 += 1, R8194 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R8240 += 1, R8194 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8240 += 1, R8193 += 1, R8194 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8240 += 1, R8194 += 1 };
  s5 -> s6 [0, 65535] { R8240 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8240 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8242 += 1, R8196 += 1, R8160 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R8242 += 1, R8195 += 1, R8196 += 1 };
  s0 -> s0 [0, 65535] { R8241 += 1, R8242 += 1 };
  s0 -> s3 [0, 65535] { R8242 += 1, R8196 += 1, R8159 += 1, R8160 += 1 };
  s1 -> s1 [0, 65535] { R8242 += 1, R8196 += 1, R8160 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8242 += 1, R8196 += 1 };
  s1 -> s5 [0, 65535] { R8242 += 1 };
  s2 -> s1 [0, 65535] { R8242 += 1, R8196 += 1, R8160 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R8242 += 1, R8195 += 1, R8196 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8242 += 1, R8196 += 1, R8159 += 1, R8160 += 1 };
  s3 -> s1 [0, 65535] { R8242 += 1, R8196 += 1, R8160 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8242 += 1, R8196 += 1, R8159 += 1, R8160 += 1 };
  s3 -> s5 [0, 65535] { R8242 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8242 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8242 += 1, R8196 += 1 };
  s6 -> s5 [0, 65535] { R8242 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R8243 += 1, R8244 += 1 };
  s0 -> s1 [0, 65535] { R8244 += 1, R8197 += 1, R8198 += 1 };
  s0 -> s2 [0, 65535] { R8244 += 1, R8198 += 1, R8161 += 1, R8162 += 1 };
  s0 -> s3 [108, 108] { R8244 += 1, R8198 += 1, R8162 += 1 };
  s1 -> s1 [0, 65535] { R8244 += 1, R8197 += 1, R8198 += 1 };
  s1 -> s2 [0, 65535] { R8244 += 1, R8198 += 1, R8161 += 1, R8162 += 1 };
  s1 -> s3 [108, 108] { R8244 += 1, R8198 += 1, R8162 += 1 };
  s2 -> s2 [0, 65535] { R8244 += 1, R8198 += 1, R8161 += 1, R8162 += 1 };
  s2 -> s3 [108, 108] { R8244 += 1, R8198 += 1, R8162 += 1 };
  s3 -> s4 [111, 111] { R8244 += 1, R8198 += 1, R8162 += 1 };
  s4 -> s4 [0, 65535] { R8244 += 1, R8198 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8244 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8244 += 1 };
  accepting s4, s5, s6;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s0 -> s2 [0, 65535] { R8246 += 1, R8200 += 1, R8167 += 1, R8168 += 1 };
  s0 -> s3 [0, 65535] { R8246 += 1, R8199 += 1, R8200 += 1 };
  s0 -> s0 [0, 65535] { R8245 += 1, R8246 += 1 };
  s0 -> s4 [88, 88] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s0 -> s1 [89, 65535] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s1 -> s1 [0, 87] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s1 -> s4 [88, 88] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s1 -> s1 [89, 65535] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s2 -> s1 [0, 87] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s2 -> s2 [0, 65535] { R8246 += 1, R8200 += 1, R8167 += 1, R8168 += 1 };
  s2 -> s4 [88, 88] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s2 -> s1 [89, 65535] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s3 -> s1 [0, 87] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s3 -> s2 [0, 65535] { R8246 += 1, R8200 += 1, R8167 += 1, R8168 += 1 };
  s3 -> s3 [0, 65535] { R8246 += 1, R8199 += 1, R8200 += 1 };
  s3 -> s4 [88, 88] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s3 -> s1 [89, 65535] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8246 += 1, R8200 += 1 };
  s4 -> s4 [0, 65535] { R8246 += 1, R8200 += 1, R8168 += 1 };
  s4 -> s7 [0, 65535] { R8246 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8246 += 1, R8200 += 1 };
  s6 -> s7 [0, 65535] { R8246 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8246 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8248 += 1, R8201 += 1, R8202 += 1 };
  s0 -> s0 [0, 65535] { R8247 += 1, R8248 += 1 };
  s0 -> s2 [0, 65535] { R8248 += 1, R8202 += 1, R8169 += 1, R8170 += 1 };
  s0 -> s3 [0, 65535] { R8248 += 1, R8202 += 1, R8170 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R8248 += 1, R8201 += 1, R8202 += 1 };
  s1 -> s2 [0, 65535] { R8248 += 1, R8202 += 1, R8169 += 1, R8170 += 1 };
  s1 -> s3 [0, 65535] { R8248 += 1, R8202 += 1, R8170 += 1, R1 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R8248 += 1 };
  s2 -> s2 [0, 65535] { R8248 += 1, R8202 += 1, R8169 += 1, R8170 += 1 };
  s2 -> s3 [0, 65535] { R8248 += 1, R8202 += 1, R8170 += 1, R1 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R8248 += 1 };
  s3 -> s5 [0, 65535] { R8248 += 1, R8202 += 1 };
  s3 -> s3 [0, 65535] { R8248 += 1, R8202 += 1, R8170 += 1, R1 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8248 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R8248 += 1 };
  s5 -> s5 [0, 65535] { R8248 += 1, R8202 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s0 -> s2 [0, 65535] { R8250 += 1, R8204 += 1, R8172 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R8249 += 1, R8250 += 1 };
  s0 -> s3 [0, 65535] { R8250 += 1, R8203 += 1, R8204 += 1 };
  s0 -> s4 [0, 65535] { R8250 += 1, R8204 += 1, R8171 += 1, R8172 += 1 };
  s0 -> s5 [88, 88] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s0 -> s1 [89, 65535] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s1 -> s1 [0, 87] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8250 += 1 };
  s1 -> s1 [0, 65535] { R8250 += 1, R8204 += 1 };
  s1 -> s5 [88, 88] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s1 -> s1 [89, 65535] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s2 -> s1 [0, 87] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s2 -> s2 [0, 65535] { R8250 += 1, R8204 += 1, R8172 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R8250 += 1 };
  s2 -> s8 [0, 65535] { R8250 += 1, R8204 += 1 };
  s2 -> s5 [88, 88] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s2 -> s1 [89, 65535] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s3 -> s1 [0, 87] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s3 -> s2 [0, 65535] { R8250 += 1, R8204 += 1, R8172 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8250 += 1, R8203 += 1, R8204 += 1 };
  s3 -> s4 [0, 65535] { R8250 += 1, R8204 += 1, R8171 += 1, R8172 += 1 };
  s3 -> s5 [88, 88] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s3 -> s1 [89, 65535] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s4 -> s1 [0, 87] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s4 -> s2 [0, 65535] { R8250 += 1, R8204 += 1, R8172 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8250 += 1 };
  s4 -> s4 [0, 65535] { R8250 += 1, R8204 += 1, R8171 += 1, R8172 += 1 };
  s4 -> s5 [88, 88] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s4 -> s1 [89, 65535] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s5 -> s5 [0, 65535] { R8250 += 1, R8204 += 1, R8172 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8250 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8250 += 1 };
  s8 -> s8 [0, 65535] { R8250 += 1, R8204 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s0 -> s2 [0, 65535] { R8252 += 1, R8206 += 1, R8174 += 1, R8153 += 1, R8154 += 1 };
  s0 -> s3 [0, 65535] { R8252 += 1, R8205 += 1, R8206 += 1 };
  s0 -> s0 [0, 65535] { R8251 += 1, R8252 += 1 };
  s0 -> s4 [0, 65535] { R8252 += 1, R8206 += 1, R8173 += 1, R8174 += 1 };
  s0 -> s1 [89, 65535] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s1 -> s1 [0, 87] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R8252 += 1, R8206 += 1 };
  s1 -> s6 [0, 65535] { R8252 += 1 };
  s1 -> s1 [0, 65535] { R8252 += 1, R8206 += 1, R8174 += 1 };
  s1 -> s1 [89, 65535] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s2 -> s1 [0, 87] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s2 -> s2 [0, 65535] { R8252 += 1, R8206 += 1, R8174 += 1, R8153 += 1, R8154 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R8252 += 1, R8206 += 1 };
  s2 -> s6 [0, 65535] { R8252 += 1 };
  s2 -> s1 [89, 65535] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s3 -> s1 [0, 87] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s3 -> s2 [0, 65535] { R8252 += 1, R8206 += 1, R8174 += 1, R8153 += 1, R8154 += 1 };
  s3 -> s3 [0, 65535] { R8252 += 1, R8205 += 1, R8206 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R8252 += 1, R8206 += 1, R8173 += 1, R8174 += 1 };
  s3 -> s1 [89, 65535] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s4 -> s1 [0, 87] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s4 -> s2 [0, 65535] { R8252 += 1, R8206 += 1, R8174 += 1, R8153 += 1, R8154 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8252 += 1, R8206 += 1, R8173 += 1, R8174 += 1 };
  s4 -> s6 [0, 65535] { R8252 += 1 };
  s4 -> s1 [89, 65535] { R8252 += 1, R8206 += 1, R8174 += 1, R8154 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8252 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8252 += 1, R8206 += 1 };
  s7 -> s6 [0, 65535] { R8252 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8253 += 1, R8254 += 1 };
  s0 -> s1 [0, 65535] { R8254 += 1, R8208 += 1, R8175 += 1, R8176 += 1 };
  s0 -> s2 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1, R8155 += 1, R8156 += 1 };
  s0 -> s3 [0, 65535] { R8254 += 1, R8207 += 1, R8208 += 1 };
  s0 -> s4 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1, R8156 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8254 += 1, R8208 += 1, R8175 += 1, R8176 += 1 };
  s1 -> s2 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1, R8155 += 1, R8156 += 1 };
  s1 -> s7 [0, 65535] { R8254 += 1 };
  s1 -> s4 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1, R8156 += 1, R5988 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1, R8155 += 1, R8156 += 1 };
  s2 -> s7 [0, 65535] { R8254 += 1 };
  s2 -> s8 [0, 65535] { R8254 += 1, R8208 += 1 };
  s2 -> s4 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1, R8156 += 1, R5988 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R8254 += 1, R8208 += 1, R8175 += 1, R8176 += 1 };
  s3 -> s2 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1, R8155 += 1, R8156 += 1 };
  s3 -> s3 [0, 65535] { R8254 += 1, R8207 += 1, R8208 += 1 };
  s3 -> s4 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1, R8156 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1 };
  s4 -> s7 [0, 65535] { R8254 += 1 };
  s4 -> s8 [0, 65535] { R8254 += 1, R8208 += 1 };
  s4 -> s4 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1, R8156 += 1, R5988 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8254 += 1, R8208 += 1, R8176 += 1 };
  s6 -> s7 [0, 65535] { R8254 += 1 };
  s6 -> s8 [0, 65535] { R8254 += 1, R8208 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8254 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R8254 += 1 };
  s8 -> s8 [0, 65535] { R8254 += 1, R8208 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8256 += 1, R8209 += 1, R8210 += 1 };
  s0 -> s2 [0, 65535] { R8256 += 1, R8210 += 1, R8178 += 1, R8157 += 1, R8158 += 1 };
  s0 -> s3 [0, 65535] { R8256 += 1, R8210 += 1, R8177 += 1, R8178 += 1 };
  s0 -> s0 [0, 65535] { R8255 += 1, R8256 += 1 };
  s0 -> s4 [116, 116] { R8256 += 1, R8210 += 1, R8178 += 1, R8158 += 1 };
  s1 -> s1 [0, 65535] { R8256 += 1, R8209 += 1, R8210 += 1 };
  s1 -> s2 [0, 65535] { R8256 += 1, R8210 += 1, R8178 += 1, R8157 += 1, R8158 += 1 };
  s1 -> s3 [0, 65535] { R8256 += 1, R8210 += 1, R8177 += 1, R8178 += 1 };
  s1 -> s4 [116, 116] { R8256 += 1, R8210 += 1, R8178 += 1, R8158 += 1 };
  s2 -> s2 [0, 65535] { R8256 += 1, R8210 += 1, R8178 += 1, R8157 += 1, R8158 += 1 };
  s2 -> s4 [116, 116] { R8256 += 1, R8210 += 1, R8178 += 1, R8158 += 1 };
  s3 -> s2 [0, 65535] { R8256 += 1, R8210 += 1, R8178 += 1, R8157 += 1, R8158 += 1 };
  s3 -> s3 [0, 65535] { R8256 += 1, R8210 += 1, R8177 += 1, R8178 += 1 };
  s3 -> s4 [116, 116] { R8256 += 1, R8210 += 1, R8178 += 1, R8158 += 1 };
  s4 -> s4 [0, 65535] { R8256 += 1, R8210 += 1, R8178 += 1 };
  s4 -> s5 [0, 65535] { R8256 += 1, R8210 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8256 += 1 };
  s5 -> s5 [0, 65535] { R8256 += 1, R8210 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8256 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8256 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8258 += 1, R8212 += 1, R8179 += 1, R8180 += 1 };
  s0 -> s0 [0, 65535] { R8257 += 1, R8258 += 1 };
  s0 -> s2 [0, 65535] { R8258 += 1, R8211 += 1, R8212 += 1 };
  s0 -> s3 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1, R8164 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1, R8163 += 1, R8164 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8258 += 1, R8212 += 1, R8179 += 1, R8180 += 1 };
  s1 -> s7 [0, 65535] { R8258 += 1 };
  s1 -> s3 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1, R8164 += 1, R5989 += 1 };
  s1 -> s4 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1, R8163 += 1, R8164 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8258 += 1, R8212 += 1, R8179 += 1, R8180 += 1 };
  s2 -> s2 [0, 65535] { R8258 += 1, R8211 += 1, R8212 += 1 };
  s2 -> s3 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1, R8164 += 1, R5989 += 1 };
  s2 -> s4 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1, R8163 += 1, R8164 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8258 += 1, R8212 += 1 };
  s3 -> s8 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1 };
  s3 -> s7 [0, 65535] { R8258 += 1 };
  s3 -> s3 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1, R8164 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8258 += 1, R8212 += 1 };
  s4 -> s7 [0, 65535] { R8258 += 1 };
  s4 -> s3 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1, R8164 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1, R8163 += 1, R8164 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8258 += 1, R8212 += 1 };
  s6 -> s7 [0, 65535] { R8258 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8258 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R8258 += 1, R8212 += 1 };
  s8 -> s8 [0, 65535] { R8258 += 1, R8212 += 1, R8180 += 1 };
  s8 -> s7 [0, 65535] { R8258 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R8259 += 1, R8260 += 1 };
  s0 -> s1 [0, 65535] { R8260 += 1, R8214 += 1, R8182 += 1, R8165 += 1, R8166 += 1 };
  s0 -> s2 [0, 65535] { R8260 += 1, R8213 += 1, R8214 += 1 };
  s0 -> s3 [0, 65535] { R8260 += 1, R8214 += 1, R8181 += 1, R8182 += 1 };
  s0 -> s4 [99, 99] { R8260 += 1, R8214 += 1, R8182 += 1, R8166 += 1 };
  s1 -> s1 [0, 65535] { R8260 += 1, R8214 += 1, R8182 += 1, R8165 += 1, R8166 += 1 };
  s1 -> s4 [99, 99] { R8260 += 1, R8214 += 1, R8182 += 1, R8166 += 1 };
  s2 -> s1 [0, 65535] { R8260 += 1, R8214 += 1, R8182 += 1, R8165 += 1, R8166 += 1 };
  s2 -> s2 [0, 65535] { R8260 += 1, R8213 += 1, R8214 += 1 };
  s2 -> s3 [0, 65535] { R8260 += 1, R8214 += 1, R8181 += 1, R8182 += 1 };
  s2 -> s4 [99, 99] { R8260 += 1, R8214 += 1, R8182 += 1, R8166 += 1 };
  s3 -> s1 [0, 65535] { R8260 += 1, R8214 += 1, R8182 += 1, R8165 += 1, R8166 += 1 };
  s3 -> s3 [0, 65535] { R8260 += 1, R8214 += 1, R8181 += 1, R8182 += 1 };
  s3 -> s4 [99, 99] { R8260 += 1, R8214 += 1, R8182 += 1, R8166 += 1 };
  s4 -> s5 [97, 97] { R8260 += 1, R8214 += 1, R8182 += 1, R8166 += 1 };
  s5 -> s6 [108, 108] { R8260 += 1, R8214 += 1, R8182 += 1, R8166 += 1 };
  s6 -> s7 [104, 104] { R8260 += 1, R8214 += 1, R8182 += 1, R8166 += 1 };
  s7 -> s8 [111, 111] { R8260 += 1, R8214 += 1, R8182 += 1, R8166 += 1 };
  s8 -> s9 [115, 115] { R8260 += 1, R8214 += 1, R8182 += 1, R8166 += 1 };
  s9 -> s9 [0, 65535] { R8260 += 1, R8214 += 1, R8182 += 1 };
  s9 -> s10 [0, 65535] { R8260 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s12 [0, 65535] { R8260 += 1, R8214 += 1 };
  s10 -> s10 [0, 65535] { R8260 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  s12 -> s10 [0, 65535] { R8260 += 1 };
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R8260 += 1, R8214 += 1 };
  accepting s9, s10, s11, s12;
};
};
constraint R1 = R8158 && R2 = R8182 && R3 = R8046 && R4 = R8260 && R15 = 0 && R16 = R8214 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8039 - R8214 = 1 && R8040 = R8046 && R8041 - R8214 = 1 && R8042 = R8046 && R8043 - R8214 = 1 && R8044 = R8046 && R8045 - R8214 = 1 && R8157 = 0 && R8161 = 0 && R8162 = 0 && R8165 = 0 && R8166 = 0 && R8167 = 0 && R8168 = R8182 && R8169 = 0 && R8170 = R8182 && R8171 = 0 && R8172 = R8182 && R8173 = 0 && R8174 = R8182 && R8175 = 0 && R8176 = R8182 && R8177 = 0 && R8178 = R8182 && R8179 = 0 && R8180 = R8182 && R8181 = 0 && R8183 = 0 && R8184 = R8214 && R8185 = 0 && R8186 = R8214 && R8187 = 0 && R8188 = R8214 && R8189 = 0 && R8190 = R8214 && R8191 = 0 && R8192 = R8214 && R8193 = 0 && R8194 = R8214 && R8195 = 0 && R8196 = R8214 && R8197 = 0 && R8198 = R8214 && R8199 = 0 && R8200 = R8214 && R8201 = 0 && R8202 = R8214 && R8203 = 0 && R8204 = R8214 && R8205 = 0 && R8206 = R8214 && R8207 = 0 && R8208 = R8214 && R8209 = 0 && R8210 = R8214 && R8211 = 0 && R8212 = R8214 && R8213 = 0 && R8215 = 10 && R8216 = R8260 && R8217 = 10 && R8218 = R8260 && R8219 = 10 && R8220 = R8260 && R8221 = 10 && R8222 = R8260 && R8223 = 10 && R8224 = R8260 && R8225 = 10 && R8226 = R8260 && R8227 = 10 && R8228 = R8260 && R8229 = 10 && R8230 = R8260 && R8231 = 10 && R8232 = R8260 && R8233 = 10 && R8234 = R8260 && R8235 = 10 && R8236 = R8260 && R8237 = 10 && R8238 = R8260 && R8239 = 10 && R8240 = R8260 && R8241 = 10 && R8242 = R8260 && R8243 = 10 && R8244 = R8260 && R8245 = 10 && R8246 = R8260 && R8247 = 10 && R8248 = R8260 && R8249 = 10 && R8250 = R8260 && R8251 = 10 && R8252 = R8260 && R8253 = 10 && R8254 = R8260 && R8255 = 10 && R8256 = R8260 && R8257 = 10 && R8258 = R8260 && R8259 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R8214 < R8046 && -1 < R8158 && 0 < R8182 && -1 < R8214 && 9 < R8260 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R8153 != 0 || R8154 = R8158 || (R5988 = 0 && R8158 = 0)) && (R8155 != 0 || R8156 = R8158 || (R5988 = 0 && R8158 = 0)) && (R5989 = 0 || (R8163 = 0 && R8164 = 0)) && (R5990 = 0 || (R8159 = 0 && R8160 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R8153 = 0 || (R5988 = 0 && R8158 = 0)) && (R8155 = 0 || (R5988 = 0 && R8158 = 0));
// End of Parikh automata intersection problem
