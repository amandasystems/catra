// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10863, R10864, R10865, R10866, R10867, R10868, R10869, R10870, R10977, R10978, R10979, R10980, R10981, R10982, R10983, R10984, R10985, R10986, R10987, R10988, R10989, R10990, R10991, R10992, R10993, R10994, R10995, R10996, R10997, R10998, R10999, R11, R11000, R11001, R11002, R11003, R11004, R11005, R11006, R11007, R11008, R11009, R11010, R11011, R11012, R11013, R11014, R11015, R11016, R11017, R11018, R11019, R11020, R11021, R11022, R11023, R11024, R11025, R11026, R11027, R11028, R11029, R11030, R11031, R11032, R11033, R11034, R11035, R11036, R11037, R11038, R11039, R11040, R11041, R11042, R11043, R11044, R11045, R11046, R11047, R11048, R11049, R11050, R11051, R11052, R11053, R11054, R11055, R11056, R11057, R11058, R11059, R11060, R11061, R11062, R11063, R11064, R11065, R11066, R11067, R11068, R11069, R11070, R11071, R11072, R11073, R11074, R11075, R11076, R11077, R11078, R11079, R11080, R11081, R11082, R11083, R11084, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R11040 += 1 };
  s0 -> s0 [0, 65535] { R11039 += 1, R11040 += 1 };
  s0 -> s2 [46, 46] { R11040 += 1 };
  s0 -> s3 [47, 47] { R11040 += 1 };
  s0 -> s1 [48, 65535] { R11040 += 1 };
  s1 -> s1 [0, 45] { R11040 += 1 };
  s1 -> s2 [46, 46] { R11040 += 1 };
  s1 -> s3 [47, 47] { R11040 += 1 };
  s1 -> s1 [48, 65535] { R11040 += 1 };
  s2 -> s1 [0, 45] { R11040 += 1 };
  s2 -> s2 [46, 46] { R11040 += 1 };
  s2 -> s3 [47, 47] { R11040 += 1 };
  s2 -> s1 [48, 114] { R11040 += 1 };
  s2 -> s8 [115, 115] { R11040 += 1 };
  s2 -> s1 [116, 65535] { R11040 += 1 };
  s3 -> s3 [0, 45] { R11040 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R11040 += 1 };
  s3 -> s3 [47, 65535] { R11040 += 1 };
  s4 -> s3 [0, 45] { R11040 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R11040 += 1 };
  s4 -> s3 [47, 114] { R11040 += 1 };
  s4 -> s5 [115, 115] { R11040 += 1 };
  s4 -> s3 [116, 65535] { R11040 += 1 };
  s5 -> s3 [0, 45] { R11040 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R11040 += 1 };
  s5 -> s3 [47, 110] { R11040 += 1 };
  s5 -> s6 [111, 111] { R11040 += 1 };
  s5 -> s3 [112, 65535] { R11040 += 1 };
  s6 -> s3 [0, 45] { R11040 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R11040 += 1 };
  s6 -> s3 [47, 98] { R11040 += 1 };
  s6 -> s7 [99, 99] { R11040 += 1 };
  s6 -> s3 [100, 65535] { R11040 += 1 };
  s7 -> s3 [0, 45] { R11040 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R11040 += 1 };
  s7 -> s3 [47, 106] { R11040 += 1 };
  s7 -> s3 [108, 65535] { R11040 += 1 };
  s8 -> s1 [0, 45] { R11040 += 1 };
  s8 -> s2 [46, 46] { R11040 += 1 };
  s8 -> s3 [47, 47] { R11040 += 1 };
  s8 -> s1 [48, 110] { R11040 += 1 };
  s8 -> s9 [111, 111] { R11040 += 1 };
  s8 -> s1 [112, 65535] { R11040 += 1 };
  s9 -> s1 [0, 45] { R11040 += 1 };
  s9 -> s2 [46, 46] { R11040 += 1 };
  s9 -> s3 [47, 47] { R11040 += 1 };
  s9 -> s1 [48, 98] { R11040 += 1 };
  s9 -> s10 [99, 99] { R11040 += 1 };
  s9 -> s1 [100, 65535] { R11040 += 1 };
  s10 -> s1 [0, 45] { R11040 += 1 };
  s10 -> s2 [46, 46] { R11040 += 1 };
  s10 -> s3 [47, 47] { R11040 += 1 };
  s10 -> s1 [48, 106] { R11040 += 1 };
  s10 -> s1 [108, 65535] { R11040 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R11041 += 1, R11042 += 1 };
  s0 -> s1 [0, 65535] { R11042 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11042 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R11044 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R11044 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R11043 += 1, R11044 += 1 };
  s0 -> s3 [47, 47] { R11044 += 1 };
  s0 -> s1 [48, 65535] { R11044 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R11044 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R11044 += 1 };
  s1 -> s1 [48, 65535] { R11044 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R11044 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R11044 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R11044 += 1 };
  s2 -> s1 [48, 65535] { R11044 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R11044 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R11046 += 1, R10864 += 1 };
  s0 -> s2 [0, 65535] { R11046 += 1, R10863 += 1, R10864 += 1 };
  s0 -> s0 [0, 65535] { R11045 += 1, R11046 += 1 };
  s0 -> s1 [38, 42] { R11046 += 1, R10864 += 1 };
  s0 -> s1 [44, 45] { R11046 += 1, R10864 += 1 };
  s0 -> s1 [47, 62] { R11046 += 1, R10864 += 1 };
  s0 -> s1 [64, 65535] { R11046 += 1, R10864 += 1 };
  s1 -> s1 [0, 36] { R11046 += 1, R10864 += 1 };
  s1 -> s1 [0, 65535] { R11046 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R11046 += 1, R10864 += 1 };
  s1 -> s1 [44, 45] { R11046 += 1, R10864 += 1 };
  s1 -> s1 [47, 62] { R11046 += 1, R10864 += 1 };
  s1 -> s1 [64, 65535] { R11046 += 1, R10864 += 1 };
  s2 -> s1 [0, 36] { R11046 += 1, R10864 += 1 };
  s2 -> s2 [0, 65535] { R11046 += 1, R10863 += 1, R10864 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R11046 += 1, R10864 += 1 };
  s2 -> s1 [44, 45] { R11046 += 1, R10864 += 1 };
  s2 -> s1 [47, 62] { R11046 += 1, R10864 += 1 };
  s2 -> s1 [64, 65535] { R11046 += 1, R10864 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R11048 += 1, R10866 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R11048 += 1, R10865 += 1, R10866 += 1 };
  s0 -> s0 [0, 65535] { R11047 += 1, R11048 += 1 };
  s1 -> s1 [0, 65535] { R11048 += 1, R10866 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11048 += 1 };
  s2 -> s1 [0, 65535] { R11048 += 1, R10866 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R11048 += 1, R10865 += 1, R10866 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11048 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R11050 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R11050 += 1, R10867 += 1, R10868 += 1 };
  s0 -> s0 [0, 65535] { R11049 += 1, R11050 += 1 };
  s0 -> s4 [63, 63] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R11050 += 1 };
  s1 -> s7 [0, 65535] { R11050 += 1, R10868 += 1 };
  s2 -> s1 [0, 62] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11050 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R11050 += 1 };
  s2 -> s4 [63, 63] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R11050 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R11050 += 1, R10867 += 1, R10868 += 1 };
  s3 -> s4 [63, 63] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R11050 += 1, R10868 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11050 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11050 += 1 };
  s7 -> s7 [0, 65535] { R11050 += 1, R10868 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11052 += 1, R10869 += 1, R10870 += 1 };
  s0 -> s2 [0, 65535] { R11052 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R11051 += 1, R11052 += 1 };
  s0 -> s3 [0, 65535] { R11052 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R11052 += 1, R10869 += 1, R10870 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11052 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s3 [0, 65535] { R11052 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11052 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s6 [0, 65535] { R11052 += 1 };
  s2 -> s3 [0, 65535] { R11052 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11052 += 1, R10870 += 1 };
  s3 -> s6 [0, 65535] { R11052 += 1 };
  s3 -> s3 [0, 65535] { R11052 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11052 += 1, R10870 += 1 };
  s5 -> s6 [0, 65535] { R11052 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11052 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R11054 += 1, R11008 += 1 };
  s0 -> s2 [0, 65535] { R11054 += 1, R11007 += 1, R11008 += 1 };
  s0 -> s0 [0, 65535] { R11053 += 1, R11054 += 1 };
  s0 -> s1 [45, 63] { R11054 += 1, R11008 += 1 };
  s0 -> s3 [88, 88] { R11054 += 1, R11008 += 1 };
  s0 -> s1 [89, 65535] { R11054 += 1, R11008 += 1 };
  s1 -> s1 [0, 43] { R11054 += 1, R11008 += 1 };
  s1 -> s1 [45, 63] { R11054 += 1, R11008 += 1 };
  s1 -> s3 [88, 88] { R11054 += 1, R11008 += 1 };
  s1 -> s1 [89, 65535] { R11054 += 1, R11008 += 1 };
  s2 -> s1 [0, 43] { R11054 += 1, R11008 += 1 };
  s2 -> s2 [0, 65535] { R11054 += 1, R11007 += 1, R11008 += 1 };
  s2 -> s1 [45, 63] { R11054 += 1, R11008 += 1 };
  s2 -> s3 [88, 88] { R11054 += 1, R11008 += 1 };
  s2 -> s1 [89, 65535] { R11054 += 1, R11008 += 1 };
  s3 -> s3 [0, 43] { R11054 += 1, R11008 += 1 };
  s3 -> s3 [0, 65535] { R11054 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R11054 += 1, R11008 += 1 };
  s3 -> s3 [88, 65535] { R11054 += 1, R11008 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R11055 += 1, R11056 += 1 };
  s0 -> s1 [0, 65535] { R11056 += 1, R11009 += 1, R11010 += 1 };
  s0 -> s2 [0, 65535] { R11056 += 1, R11010 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11056 += 1, R11009 += 1, R11010 += 1 };
  s1 -> s2 [0, 65535] { R11056 += 1, R11010 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11056 += 1 };
  s2 -> s2 [0, 65535] { R11056 += 1, R11010 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11056 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R11058 += 1, R11012 += 1 };
  s0 -> s2 [0, 65535] { R11058 += 1, R11011 += 1, R11012 += 1 };
  s0 -> s0 [0, 65535] { R11057 += 1, R11058 += 1 };
  s0 -> s3 [0, 65535] { R11058 += 1, R11012 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R11058 += 1, R11012 += 1 };
  s0 -> s1 [59, 65535] { R11058 += 1, R11012 += 1 };
  s1 -> s1 [0, 57] { R11058 += 1, R11012 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11058 += 1 };
  s1 -> s4 [58, 58] { R11058 += 1, R11012 += 1 };
  s1 -> s1 [59, 65535] { R11058 += 1, R11012 += 1 };
  s2 -> s1 [0, 57] { R11058 += 1, R11012 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11058 += 1, R11011 += 1, R11012 += 1 };
  s2 -> s3 [0, 65535] { R11058 += 1, R11012 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R11058 += 1, R11012 += 1 };
  s2 -> s1 [59, 65535] { R11058 += 1, R11012 += 1 };
  s3 -> s1 [0, 57] { R11058 += 1, R11012 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11058 += 1 };
  s3 -> s3 [0, 65535] { R11058 += 1, R11012 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R11058 += 1, R11012 += 1 };
  s3 -> s1 [59, 65535] { R11058 += 1, R11012 += 1 };
  s4 -> s4 [0, 65535] { R11058 += 1, R11012 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11058 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R11060 += 1, R11014 += 1 };
  s0 -> s0 [0, 65535] { R11059 += 1, R11060 += 1 };
  s0 -> s2 [0, 65535] { R11060 += 1, R11013 += 1, R11014 += 1 };
  s0 -> s3 [0, 65535] { R11060 += 1, R11014 += 1, R11 += 1 };
  s0 -> s4 [88, 88] { R11060 += 1, R11014 += 1 };
  s0 -> s1 [89, 65535] { R11060 += 1, R11014 += 1 };
  s1 -> s1 [0, 87] { R11060 += 1, R11014 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11060 += 1 };
  s1 -> s4 [88, 88] { R11060 += 1, R11014 += 1 };
  s1 -> s1 [89, 65535] { R11060 += 1, R11014 += 1 };
  s2 -> s1 [0, 87] { R11060 += 1, R11014 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11060 += 1, R11013 += 1, R11014 += 1 };
  s2 -> s3 [0, 65535] { R11060 += 1, R11014 += 1, R11 += 1 };
  s2 -> s4 [88, 88] { R11060 += 1, R11014 += 1 };
  s2 -> s1 [89, 65535] { R11060 += 1, R11014 += 1 };
  s3 -> s1 [0, 87] { R11060 += 1, R11014 += 1 };
  s3 -> s5 [0, 65535] { R11060 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11060 += 1, R11014 += 1, R11 += 1 };
  s3 -> s4 [88, 88] { R11060 += 1, R11014 += 1 };
  s3 -> s1 [89, 65535] { R11060 += 1, R11014 += 1 };
  s4 -> s4 [0, 65535] { R11060 += 1, R11014 += 1 };
  s5 -> s5 [0, 65535] { R11060 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R11062 += 1, R11015 += 1, R11016 += 1 };
  s0 -> s3 [0, 65535] { R11062 += 1, R11016 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R11061 += 1, R11062 += 1 };
  s0 -> s4 [91, 91] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R11062 += 1, R11016 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11062 += 1 };
  s1 -> s1 [0, 65535] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11062 += 1, R11015 += 1, R11016 += 1 };
  s2 -> s3 [0, 65535] { R11062 += 1, R11016 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11062 += 1, R11016 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s6 [0, 65535] { R11062 += 1 };
  s3 -> s4 [91, 91] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R11062 += 1, R11016 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11062 += 1 };
  s7 -> s7 [0, 65535] { R11062 += 1, R11016 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11062 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R11064 += 1, R11018 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R11064 += 1, R11018 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R11063 += 1, R11064 += 1 };
  s0 -> s3 [0, 65535] { R11064 += 1, R11017 += 1, R11018 += 1 };
  s1 -> s1 [0, 65535] { R11064 += 1, R11018 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s2 [0, 65535] { R11064 += 1, R11018 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R11064 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11064 += 1, R11018 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R11064 += 1 };
  s2 -> s6 [0, 65535] { R11064 += 1, R11018 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11064 += 1, R11018 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R11064 += 1, R11018 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R11064 += 1, R11017 += 1, R11018 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11064 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11064 += 1 };
  s6 -> s6 [0, 65535] { R11064 += 1, R11018 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R11065 += 1, R11066 += 1 };
  s0 -> s1 [0, 65535] { R11066 += 1, R11020 += 1, R10984 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R11066 += 1, R11019 += 1, R11020 += 1 };
  s0 -> s3 [0, 65535] { R11066 += 1, R11020 += 1, R10983 += 1, R10984 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R11066 += 1, R11020 += 1 };
  s1 -> s5 [0, 65535] { R11066 += 1 };
  s1 -> s1 [0, 65535] { R11066 += 1, R11020 += 1, R10984 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R11066 += 1, R11020 += 1, R10984 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R11066 += 1, R11019 += 1, R11020 += 1 };
  s2 -> s3 [0, 65535] { R11066 += 1, R11020 += 1, R10983 += 1, R10984 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11066 += 1 };
  s3 -> s1 [0, 65535] { R11066 += 1, R11020 += 1, R10984 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R11066 += 1, R11020 += 1, R10983 += 1, R10984 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11066 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11066 += 1, R11020 += 1 };
  s6 -> s5 [0, 65535] { R11066 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R11068 += 1, R11021 += 1, R11022 += 1 };
  s0 -> s2 [0, 65535] { R11068 += 1, R11022 += 1, R10985 += 1, R10986 += 1 };
  s0 -> s0 [0, 65535] { R11067 += 1, R11068 += 1 };
  s0 -> s3 [108, 108] { R11068 += 1, R11022 += 1, R10986 += 1 };
  s1 -> s1 [0, 65535] { R11068 += 1, R11021 += 1, R11022 += 1 };
  s1 -> s2 [0, 65535] { R11068 += 1, R11022 += 1, R10985 += 1, R10986 += 1 };
  s1 -> s3 [108, 108] { R11068 += 1, R11022 += 1, R10986 += 1 };
  s2 -> s2 [0, 65535] { R11068 += 1, R11022 += 1, R10985 += 1, R10986 += 1 };
  s2 -> s3 [108, 108] { R11068 += 1, R11022 += 1, R10986 += 1 };
  s3 -> s4 [111, 111] { R11068 += 1, R11022 += 1, R10986 += 1 };
  s4 -> s5 [99, 99] { R11068 += 1, R11022 += 1, R10986 += 1 };
  s5 -> s6 [97, 97] { R11068 += 1, R11022 += 1, R10986 += 1 };
  s6 -> s7 [108, 108] { R11068 += 1, R11022 += 1, R10986 += 1 };
  s7 -> s8 [104, 104] { R11068 += 1, R11022 += 1, R10986 += 1 };
  s8 -> s9 [0, 65535] { R11068 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R11068 += 1, R11022 += 1 };
  s9 -> s9 [0, 65535] { R11068 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s8, s9, s10;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s0 -> s0 [0, 65535] { R11069 += 1, R11070 += 1 };
  s0 -> s2 [0, 65535] { R11070 += 1, R11023 += 1, R11024 += 1 };
  s0 -> s3 [0, 65535] { R11070 += 1, R11024 += 1, R10991 += 1, R10992 += 1 };
  s0 -> s4 [88, 88] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s0 -> s1 [89, 65535] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s1 -> s1 [0, 87] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s1 -> s4 [88, 88] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s1 -> s1 [89, 65535] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s2 -> s1 [0, 87] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s2 -> s2 [0, 65535] { R11070 += 1, R11023 += 1, R11024 += 1 };
  s2 -> s3 [0, 65535] { R11070 += 1, R11024 += 1, R10991 += 1, R10992 += 1 };
  s2 -> s4 [88, 88] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s2 -> s1 [89, 65535] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s3 -> s1 [0, 87] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s3 -> s3 [0, 65535] { R11070 += 1, R11024 += 1, R10991 += 1, R10992 += 1 };
  s3 -> s4 [88, 88] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s3 -> s1 [89, 65535] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s4 -> s4 [0, 65535] { R11070 += 1, R11024 += 1, R10992 += 1 };
  s4 -> s5 [0, 65535] { R11070 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11070 += 1, R11024 += 1 };
  s5 -> s5 [0, 65535] { R11070 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R11070 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11070 += 1, R11024 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R11071 += 1, R11072 += 1 };
  s0 -> s1 [0, 65535] { R11072 += 1, R11025 += 1, R11026 += 1 };
  s0 -> s2 [0, 65535] { R11072 += 1, R11026 += 1, R10993 += 1, R10994 += 1 };
  s0 -> s3 [0, 65535] { R11072 += 1, R11026 += 1, R10994 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R11072 += 1, R11025 += 1, R11026 += 1 };
  s1 -> s2 [0, 65535] { R11072 += 1, R11026 += 1, R10993 += 1, R10994 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R11072 += 1, R11026 += 1, R10994 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R11072 += 1, R11026 += 1, R10993 += 1, R10994 += 1 };
  s2 -> s5 [0, 65535] { R11072 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R11072 += 1, R11026 += 1, R10994 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R11072 += 1, R11026 += 1 };
  s3 -> s5 [0, 65535] { R11072 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11072 += 1, R11026 += 1, R10994 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R11072 += 1, R11026 += 1 };
  s4 -> s5 [0, 65535] { R11072 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11072 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s0 -> s0 [0, 65535] { R11073 += 1, R11074 += 1 };
  s0 -> s2 [0, 65535] { R11074 += 1, R11027 += 1, R11028 += 1 };
  s0 -> s3 [0, 65535] { R11074 += 1, R11028 += 1, R10996 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R11074 += 1, R11028 += 1, R10995 += 1, R10996 += 1 };
  s0 -> s5 [88, 88] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s0 -> s1 [89, 65535] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s1 -> s1 [0, 87] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s1 -> s6 [0, 65535] { R11074 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R11074 += 1, R11028 += 1 };
  s1 -> s5 [88, 88] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s1 -> s1 [89, 65535] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s2 -> s1 [0, 87] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s2 -> s2 [0, 65535] { R11074 += 1, R11027 += 1, R11028 += 1 };
  s2 -> s3 [0, 65535] { R11074 += 1, R11028 += 1, R10996 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R11074 += 1, R11028 += 1, R10995 += 1, R10996 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [88, 88] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s2 -> s1 [89, 65535] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s3 -> s1 [0, 87] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s3 -> s6 [0, 65535] { R11074 += 1 };
  s3 -> s3 [0, 65535] { R11074 += 1, R11028 += 1, R10996 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R11074 += 1, R11028 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [88, 88] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s3 -> s1 [89, 65535] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s4 -> s1 [0, 87] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s4 -> s6 [0, 65535] { R11074 += 1 };
  s4 -> s3 [0, 65535] { R11074 += 1, R11028 += 1, R10996 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R11074 += 1, R11028 += 1, R10995 += 1, R10996 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s5 [88, 88] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s4 -> s1 [89, 65535] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s5 -> s5 [0, 65535] { R11074 += 1, R11028 += 1, R10996 += 1 };
  s6 -> s6 [0, 65535] { R11074 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R11074 += 1 };
  s8 -> s8 [0, 65535] { R11074 += 1, R11028 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s0 -> s2 [0, 65535] { R11076 += 1, R11029 += 1, R11030 += 1 };
  s0 -> s3 [0, 65535] { R11076 += 1, R11030 += 1, R10997 += 1, R10998 += 1 };
  s0 -> s0 [0, 65535] { R11075 += 1, R11076 += 1 };
  s0 -> s4 [0, 65535] { R11076 += 1, R11030 += 1, R10998 += 1, R10977 += 1, R10978 += 1 };
  s0 -> s1 [89, 65535] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s1 -> s1 [0, 87] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s1 -> s5 [0, 65535] { R11076 += 1 };
  s1 -> s1 [0, 65535] { R11076 += 1, R11030 += 1, R10998 += 1 };
  s1 -> s6 [0, 65535] { R11076 += 1, R11030 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [89, 65535] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s2 -> s1 [0, 87] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s2 -> s2 [0, 65535] { R11076 += 1, R11029 += 1, R11030 += 1 };
  s2 -> s3 [0, 65535] { R11076 += 1, R11030 += 1, R10997 += 1, R10998 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R11076 += 1, R11030 += 1, R10998 += 1, R10977 += 1, R10978 += 1 };
  s2 -> s1 [89, 65535] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s3 -> s1 [0, 87] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s3 -> s5 [0, 65535] { R11076 += 1 };
  s3 -> s3 [0, 65535] { R11076 += 1, R11030 += 1, R10997 += 1, R10998 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R11076 += 1, R11030 += 1, R10998 += 1, R10977 += 1, R10978 += 1 };
  s3 -> s1 [89, 65535] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s4 -> s1 [0, 87] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s4 -> s5 [0, 65535] { R11076 += 1 };
  s4 -> s6 [0, 65535] { R11076 += 1, R11030 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R11076 += 1, R11030 += 1, R10998 += 1, R10977 += 1, R10978 += 1 };
  s4 -> s1 [89, 65535] { R11076 += 1, R11030 += 1, R10998 += 1, R10978 += 1 };
  s5 -> s5 [0, 65535] { R11076 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R11076 += 1 };
  s6 -> s6 [0, 65535] { R11076 += 1, R11030 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1, R10979 += 1, R10980 += 1 };
  s0 -> s0 [0, 65535] { R11077 += 1, R11078 += 1 };
  s0 -> s2 [0, 65535] { R11078 += 1, R11031 += 1, R11032 += 1 };
  s0 -> s3 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1, R10980 += 1, R5988 += 1 };
  s0 -> s4 [0, 65535] { R11078 += 1, R11032 += 1, R10999 += 1, R11000 += 1 };
  s1 -> s7 [0, 65535] { R11078 += 1, R11032 += 1 };
  s1 -> s1 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1, R10979 += 1, R10980 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1, R10980 += 1, R5988 += 1 };
  s1 -> s6 [0, 65535] { R11078 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1, R10979 += 1, R10980 += 1 };
  s2 -> s2 [0, 65535] { R11078 += 1, R11031 += 1, R11032 += 1 };
  s2 -> s3 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1, R10980 += 1, R5988 += 1 };
  s2 -> s4 [0, 65535] { R11078 += 1, R11032 += 1, R10999 += 1, R11000 += 1 };
  s3 -> s7 [0, 65535] { R11078 += 1, R11032 += 1 };
  s3 -> s8 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1, R10980 += 1, R5988 += 1 };
  s3 -> s6 [0, 65535] { R11078 += 1 };
  s4 -> s4 [0, 65535] { R11078 += 1, R11032 += 1, R10999 += 1, R11000 += 1 };
  s4 -> s1 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1, R10979 += 1, R10980 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1, R10980 += 1, R5988 += 1 };
  s4 -> s6 [0, 65535] { R11078 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11078 += 1 };
  s7 -> s7 [0, 65535] { R11078 += 1, R11032 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11078 += 1 };
  s8 -> s7 [0, 65535] { R11078 += 1, R11032 += 1 };
  s8 -> s8 [0, 65535] { R11078 += 1, R11032 += 1, R11000 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R11078 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R11080 += 1, R11033 += 1, R11034 += 1 };
  s0 -> s2 [0, 65535] { R11080 += 1, R11034 += 1, R11001 += 1, R11002 += 1 };
  s0 -> s3 [0, 65535] { R11080 += 1, R11034 += 1, R11002 += 1, R10981 += 1, R10982 += 1 };
  s0 -> s0 [0, 65535] { R11079 += 1, R11080 += 1 };
  s0 -> s4 [116, 116] { R11080 += 1, R11034 += 1, R11002 += 1, R10982 += 1 };
  s1 -> s1 [0, 65535] { R11080 += 1, R11033 += 1, R11034 += 1 };
  s1 -> s2 [0, 65535] { R11080 += 1, R11034 += 1, R11001 += 1, R11002 += 1 };
  s1 -> s3 [0, 65535] { R11080 += 1, R11034 += 1, R11002 += 1, R10981 += 1, R10982 += 1 };
  s1 -> s4 [116, 116] { R11080 += 1, R11034 += 1, R11002 += 1, R10982 += 1 };
  s2 -> s2 [0, 65535] { R11080 += 1, R11034 += 1, R11001 += 1, R11002 += 1 };
  s2 -> s3 [0, 65535] { R11080 += 1, R11034 += 1, R11002 += 1, R10981 += 1, R10982 += 1 };
  s2 -> s4 [116, 116] { R11080 += 1, R11034 += 1, R11002 += 1, R10982 += 1 };
  s3 -> s3 [0, 65535] { R11080 += 1, R11034 += 1, R11002 += 1, R10981 += 1, R10982 += 1 };
  s3 -> s4 [116, 116] { R11080 += 1, R11034 += 1, R11002 += 1, R10982 += 1 };
  s4 -> s4 [0, 65535] { R11080 += 1, R11034 += 1, R11002 += 1 };
  s4 -> s5 [0, 65535] { R11080 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11080 += 1, R11034 += 1 };
  s5 -> s5 [0, 65535] { R11080 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R11080 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11080 += 1, R11034 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1, R10987 += 1, R10988 += 1 };
  s0 -> s2 [0, 65535] { R11082 += 1, R11036 += 1, R11003 += 1, R11004 += 1 };
  s0 -> s3 [0, 65535] { R11082 += 1, R11035 += 1, R11036 += 1 };
  s0 -> s0 [0, 65535] { R11081 += 1, R11082 += 1 };
  s0 -> s4 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1, R10988 += 1, R5989 += 1 };
  s1 -> s1 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1, R10987 += 1, R10988 += 1 };
  s1 -> s5 [0, 65535] { R11082 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R11082 += 1, R11036 += 1 };
  s1 -> s4 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1, R10988 += 1, R5989 += 1 };
  s2 -> s1 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1, R10987 += 1, R10988 += 1 };
  s2 -> s2 [0, 65535] { R11082 += 1, R11036 += 1, R11003 += 1, R11004 += 1 };
  s2 -> s5 [0, 65535] { R11082 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1, R10988 += 1, R5989 += 1 };
  s3 -> s1 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1, R10987 += 1, R10988 += 1 };
  s3 -> s2 [0, 65535] { R11082 += 1, R11036 += 1, R11003 += 1, R11004 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11082 += 1, R11035 += 1, R11036 += 1 };
  s3 -> s4 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1, R10988 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535] { R11082 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11082 += 1, R11036 += 1 };
  s4 -> s8 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1 };
  s4 -> s4 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1, R10988 += 1, R5989 += 1 };
  s5 -> s5 [0, 65535] { R11082 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R11082 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11082 += 1, R11036 += 1 };
  s8 -> s5 [0, 65535] { R11082 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R11082 += 1, R11036 += 1 };
  s8 -> s8 [0, 65535] { R11082 += 1, R11036 += 1, R11004 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R11083 += 1, R11084 += 1 };
  s0 -> s1 [0, 65535] { R11084 += 1, R11038 += 1, R11005 += 1, R11006 += 1 };
  s0 -> s2 [0, 65535] { R11084 += 1, R11038 += 1, R11006 += 1, R10989 += 1, R10990 += 1 };
  s0 -> s3 [0, 65535] { R11084 += 1, R11037 += 1, R11038 += 1 };
  s0 -> s4 [111, 111] { R11084 += 1, R11038 += 1, R11006 += 1, R10990 += 1 };
  s1 -> s1 [0, 65535] { R11084 += 1, R11038 += 1, R11005 += 1, R11006 += 1 };
  s1 -> s2 [0, 65535] { R11084 += 1, R11038 += 1, R11006 += 1, R10989 += 1, R10990 += 1 };
  s1 -> s4 [111, 111] { R11084 += 1, R11038 += 1, R11006 += 1, R10990 += 1 };
  s2 -> s2 [0, 65535] { R11084 += 1, R11038 += 1, R11006 += 1, R10989 += 1, R10990 += 1 };
  s2 -> s4 [111, 111] { R11084 += 1, R11038 += 1, R11006 += 1, R10990 += 1 };
  s3 -> s1 [0, 65535] { R11084 += 1, R11038 += 1, R11005 += 1, R11006 += 1 };
  s3 -> s2 [0, 65535] { R11084 += 1, R11038 += 1, R11006 += 1, R10989 += 1, R10990 += 1 };
  s3 -> s3 [0, 65535] { R11084 += 1, R11037 += 1, R11038 += 1 };
  s3 -> s4 [111, 111] { R11084 += 1, R11038 += 1, R11006 += 1, R10990 += 1 };
  s4 -> s5 [115, 115] { R11084 += 1, R11038 += 1, R11006 += 1, R10990 += 1 };
  s5 -> s6 [0, 65535] { R11084 += 1, R11038 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R11084 += 1 };
  s5 -> s5 [0, 65535] { R11084 += 1, R11038 += 1, R11006 += 1 };
  s6 -> s6 [0, 65535] { R11084 += 1, R11038 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R11084 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R11084 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R1 = R10982 && R2 = R11006 && R3 = R10870 && R4 = R11084 && R15 = 0 && R16 = R11038 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R10863 - R11038 = 1 && R10864 = R10870 && R10865 - R11038 = 1 && R10866 = R10870 && R10867 - R11038 = 1 && R10868 = R10870 && R10869 - R11038 = 1 && R10981 = 0 && R10985 = 0 && R10986 = 0 && R10989 = 0 && R10990 = 0 && R10991 = 0 && R10992 = R11006 && R10993 = 0 && R10994 = R11006 && R10995 = 0 && R10996 = R11006 && R10997 = 0 && R10998 = R11006 && R10999 = 0 && R11000 = R11006 && R11001 = 0 && R11002 = R11006 && R11003 = 0 && R11004 = R11006 && R11005 = 0 && R11007 = 0 && R11008 = R11038 && R11009 = 0 && R11010 = R11038 && R11011 = 0 && R11012 = R11038 && R11013 = 0 && R11014 = R11038 && R11015 = 0 && R11016 = R11038 && R11017 = 0 && R11018 = R11038 && R11019 = 0 && R11020 = R11038 && R11021 = 0 && R11022 = R11038 && R11023 = 0 && R11024 = R11038 && R11025 = 0 && R11026 = R11038 && R11027 = 0 && R11028 = R11038 && R11029 = 0 && R11030 = R11038 && R11031 = 0 && R11032 = R11038 && R11033 = 0 && R11034 = R11038 && R11035 = 0 && R11036 = R11038 && R11037 = 0 && R11039 = 10 && R11040 = R11084 && R11041 = 10 && R11042 = R11084 && R11043 = 10 && R11044 = R11084 && R11045 = 10 && R11046 = R11084 && R11047 = 10 && R11048 = R11084 && R11049 = 10 && R11050 = R11084 && R11051 = 10 && R11052 = R11084 && R11053 = 10 && R11054 = R11084 && R11055 = 10 && R11056 = R11084 && R11057 = 10 && R11058 = R11084 && R11059 = 10 && R11060 = R11084 && R11061 = 10 && R11062 = R11084 && R11063 = 10 && R11064 = R11084 && R11065 = 10 && R11066 = R11084 && R11067 = 10 && R11068 = R11084 && R11069 = 10 && R11070 = R11084 && R11071 = 10 && R11072 = R11084 && R11073 = 10 && R11074 = R11084 && R11075 = 10 && R11076 = R11084 && R11077 = 10 && R11078 = R11084 && R11079 = 10 && R11080 = R11084 && R11081 = 10 && R11082 = R11084 && R11083 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R11038 < R10870 && -1 < R10982 && 0 < R11006 && -1 < R11038 && 9 < R11084 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R10977 != 0 || R10978 = R10982 || (R5988 = 0 && R10982 = 0)) && (R10979 != 0 || R10980 = R10982 || (R5988 = 0 && R10982 = 0)) && (R5989 = 0 || (R10987 = 0 && R10988 = 0)) && (R5990 = 0 || (R10983 = 0 && R10984 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R10977 = 0 || (R5988 = 0 && R10982 = 0)) && (R10979 = 0 || (R5988 = 0 && R10982 = 0));
// End of Parikh automata intersection problem
