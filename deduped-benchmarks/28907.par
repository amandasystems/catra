// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6747, R6748, R6749, R6750, R6751, R6752, R6753, R6754, R6755, R6756, R6757, R6758, R6759, R6760, R6761, R6762, R6763, R6764, R6765, R6766, R6767, R6768, R6769, R6770, R6771, R6772, R6773, R6774, R6775, R6776, R6777, R6778, R6779, R6780, R6781, R6782, R6783, R6784, R6785, R6786, R6787, R6788, R6789, R6790, R6791, R6792, R6793, R6794, R6795, R6796, R6797, R6798, R6799, R6800, R6801, R6802, R6803, R6804, R6805, R6806, R6807, R6808, R6809, R6810, R6811, R6812, R6813, R6814, R6815, R6816, R6817, R6818, R6819, R6820, R6821, R6822, R6823, R6824, R6825, R6826, R6827, R6828, R6829, R6830, R6831, R6832, R6833, R6834, R6835, R6836, R6837, R6838, R6839, R6840, R6841, R6842, R6843, R6844, R6845, R6846, R6847, R6848, R6849, R6850, R6851, R6852, R7;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R6808 += 1 };
  s0 -> s0 [0, 65535] { R6807 += 1, R6808 += 1 };
  s0 -> s2 [46, 46] { R6808 += 1 };
  s0 -> s3 [47, 47] { R6808 += 1 };
  s0 -> s1 [48, 65535] { R6808 += 1 };
  s1 -> s1 [0, 45] { R6808 += 1 };
  s1 -> s2 [46, 46] { R6808 += 1 };
  s1 -> s3 [47, 47] { R6808 += 1 };
  s1 -> s1 [48, 65535] { R6808 += 1 };
  s2 -> s1 [0, 45] { R6808 += 1 };
  s2 -> s2 [46, 46] { R6808 += 1 };
  s2 -> s3 [47, 47] { R6808 += 1 };
  s2 -> s1 [48, 114] { R6808 += 1 };
  s2 -> s8 [115, 115] { R6808 += 1 };
  s2 -> s1 [116, 65535] { R6808 += 1 };
  s3 -> s3 [0, 45] { R6808 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R6808 += 1 };
  s3 -> s3 [47, 65535] { R6808 += 1 };
  s4 -> s3 [0, 45] { R6808 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R6808 += 1 };
  s4 -> s3 [47, 114] { R6808 += 1 };
  s4 -> s5 [115, 115] { R6808 += 1 };
  s4 -> s3 [116, 65535] { R6808 += 1 };
  s5 -> s3 [0, 45] { R6808 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R6808 += 1 };
  s5 -> s3 [47, 110] { R6808 += 1 };
  s5 -> s6 [111, 111] { R6808 += 1 };
  s5 -> s3 [112, 65535] { R6808 += 1 };
  s6 -> s3 [0, 45] { R6808 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R6808 += 1 };
  s6 -> s3 [47, 98] { R6808 += 1 };
  s6 -> s7 [99, 99] { R6808 += 1 };
  s6 -> s3 [100, 65535] { R6808 += 1 };
  s7 -> s3 [0, 45] { R6808 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R6808 += 1 };
  s7 -> s3 [47, 106] { R6808 += 1 };
  s7 -> s3 [108, 65535] { R6808 += 1 };
  s8 -> s1 [0, 45] { R6808 += 1 };
  s8 -> s2 [46, 46] { R6808 += 1 };
  s8 -> s3 [47, 47] { R6808 += 1 };
  s8 -> s1 [48, 110] { R6808 += 1 };
  s8 -> s9 [111, 111] { R6808 += 1 };
  s8 -> s1 [112, 65535] { R6808 += 1 };
  s9 -> s1 [0, 45] { R6808 += 1 };
  s9 -> s2 [46, 46] { R6808 += 1 };
  s9 -> s3 [47, 47] { R6808 += 1 };
  s9 -> s1 [48, 98] { R6808 += 1 };
  s9 -> s10 [99, 99] { R6808 += 1 };
  s9 -> s1 [100, 65535] { R6808 += 1 };
  s10 -> s1 [0, 45] { R6808 += 1 };
  s10 -> s2 [46, 46] { R6808 += 1 };
  s10 -> s3 [47, 47] { R6808 += 1 };
  s10 -> s1 [48, 106] { R6808 += 1 };
  s10 -> s1 [108, 65535] { R6808 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R6810 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R6809 += 1, R6810 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6810 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R6812 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R6811 += 1, R6812 += 1 };
  s0 -> s2 [0, 65535] { R6812 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R6812 += 1 };
  s0 -> s1 [48, 65535] { R6812 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R6812 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R6812 += 1 };
  s1 -> s1 [48, 65535] { R6812 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R6812 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R6812 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R6812 += 1 };
  s2 -> s1 [48, 65535] { R6812 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R6812 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R6814 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R6813 += 1, R6814 += 1 };
  s0 -> s2 [0, 65535] { R6814 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s1 [38, 42] { R6814 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R6814 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R6814 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R6814 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R6814 += 1, R6000 += 1 };
  s1 -> s1 [0, 65535] { R6814 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R6814 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R6814 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R6814 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R6814 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R6814 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6814 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s1 [38, 42] { R6814 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R6814 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R6814 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R6814 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R6815 += 1, R6816 += 1 };
  s0 -> s1 [0, 65535] { R6816 += 1, R6001 += 1, R6002 += 1 };
  s0 -> s2 [0, 65535] { R6816 += 1, R6002 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R6816 += 1, R6001 += 1, R6002 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6816 += 1, R6002 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R6816 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6816 += 1, R6002 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R6816 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R6818 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s0 [0, 65535] { R6817 += 1, R6818 += 1 };
  s0 -> s3 [0, 65535] { R6818 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R6818 += 1, R6004 += 1 };
  s1 -> s6 [0, 65535] { R6818 += 1 };
  s1 -> s1 [0, 65535] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R6818 += 1, R6003 += 1, R6004 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6818 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6818 += 1 };
  s3 -> s3 [0, 65535] { R6818 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R6818 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6818 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6818 += 1, R6004 += 1 };
  s7 -> s6 [0, 65535] { R6818 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6820 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R6819 += 1, R6820 += 1 };
  s0 -> s2 [0, 65535] { R6820 += 1, R6005 += 1, R6006 += 1 };
  s0 -> s3 [0, 65535] { R6820 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R6820 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R6820 += 1 };
  s1 -> s6 [0, 65535] { R6820 += 1, R6006 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6820 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6820 += 1, R6005 += 1, R6006 += 1 };
  s2 -> s3 [0, 65535] { R6820 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s1 [0, 65535] { R6820 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R6820 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6820 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535] { R6820 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6820 += 1 };
  s6 -> s6 [0, 65535] { R6820 += 1, R6006 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R6822 += 1, R6776 += 1 };
  s0 -> s2 [0, 65535] { R6822 += 1, R6775 += 1, R6776 += 1 };
  s0 -> s0 [0, 65535] { R6821 += 1, R6822 += 1 };
  s0 -> s1 [45, 63] { R6822 += 1, R6776 += 1 };
  s0 -> s3 [88, 88] { R6822 += 1, R6776 += 1 };
  s0 -> s1 [89, 65535] { R6822 += 1, R6776 += 1 };
  s1 -> s1 [0, 43] { R6822 += 1, R6776 += 1 };
  s1 -> s1 [45, 63] { R6822 += 1, R6776 += 1 };
  s1 -> s3 [88, 88] { R6822 += 1, R6776 += 1 };
  s1 -> s1 [89, 65535] { R6822 += 1, R6776 += 1 };
  s2 -> s1 [0, 43] { R6822 += 1, R6776 += 1 };
  s2 -> s2 [0, 65535] { R6822 += 1, R6775 += 1, R6776 += 1 };
  s2 -> s1 [45, 63] { R6822 += 1, R6776 += 1 };
  s2 -> s3 [88, 88] { R6822 += 1, R6776 += 1 };
  s2 -> s1 [89, 65535] { R6822 += 1, R6776 += 1 };
  s3 -> s3 [0, 43] { R6822 += 1, R6776 += 1 };
  s3 -> s3 [0, 65535] { R6822 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R6822 += 1, R6776 += 1 };
  s3 -> s3 [88, 65535] { R6822 += 1, R6776 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R6823 += 1, R6824 += 1 };
  s0 -> s1 [0, 65535] { R6824 += 1, R6777 += 1, R6778 += 1 };
  s0 -> s2 [0, 65535] { R6824 += 1, R6778 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R6824 += 1, R6777 += 1, R6778 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6824 += 1, R6778 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R6824 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6824 += 1, R6778 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R6824 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R6826 += 1, R6780 += 1 };
  s0 -> s2 [0, 65535] { R6826 += 1, R6779 += 1, R6780 += 1 };
  s0 -> s0 [0, 65535] { R6825 += 1, R6826 += 1 };
  s0 -> s3 [0, 65535] { R6826 += 1, R6780 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R6826 += 1, R6780 += 1 };
  s0 -> s1 [59, 65535] { R6826 += 1, R6780 += 1 };
  s1 -> s1 [0, 57] { R6826 += 1, R6780 += 1 };
  s1 -> s1 [0, 65535] { R6826 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [58, 58] { R6826 += 1, R6780 += 1 };
  s1 -> s1 [59, 65535] { R6826 += 1, R6780 += 1 };
  s2 -> s1 [0, 57] { R6826 += 1, R6780 += 1 };
  s2 -> s2 [0, 65535] { R6826 += 1, R6779 += 1, R6780 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6826 += 1, R6780 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R6826 += 1, R6780 += 1 };
  s2 -> s1 [59, 65535] { R6826 += 1, R6780 += 1 };
  s3 -> s1 [0, 57] { R6826 += 1, R6780 += 1 };
  s3 -> s5 [0, 65535] { R6826 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6826 += 1, R6780 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R6826 += 1, R6780 += 1 };
  s3 -> s1 [59, 65535] { R6826 += 1, R6780 += 1 };
  s4 -> s4 [0, 65535] { R6826 += 1, R6780 += 1 };
  s5 -> s5 [0, 65535] { R6826 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R6828 += 1, R6782 += 1 };
  s0 -> s2 [0, 65535] { R6828 += 1, R6782 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R6828 += 1, R6781 += 1, R6782 += 1 };
  s0 -> s0 [0, 65535] { R6827 += 1, R6828 += 1 };
  s0 -> s4 [88, 88] { R6828 += 1, R6782 += 1 };
  s0 -> s1 [89, 65535] { R6828 += 1, R6782 += 1 };
  s1 -> s1 [0, 87] { R6828 += 1, R6782 += 1 };
  s1 -> s1 [0, 65535] { R6828 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R6828 += 1, R6782 += 1 };
  s1 -> s1 [89, 65535] { R6828 += 1, R6782 += 1 };
  s2 -> s1 [0, 87] { R6828 += 1, R6782 += 1 };
  s2 -> s6 [0, 65535] { R6828 += 1 };
  s2 -> s2 [0, 65535] { R6828 += 1, R6782 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R6828 += 1, R6782 += 1 };
  s2 -> s1 [89, 65535] { R6828 += 1, R6782 += 1 };
  s3 -> s1 [0, 87] { R6828 += 1, R6782 += 1 };
  s3 -> s2 [0, 65535] { R6828 += 1, R6782 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R6828 += 1, R6781 += 1, R6782 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [88, 88] { R6828 += 1, R6782 += 1 };
  s3 -> s1 [89, 65535] { R6828 += 1, R6782 += 1 };
  s4 -> s4 [0, 65535] { R6828 += 1, R6782 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6828 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R6830 += 1, R6784 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R6829 += 1, R6830 += 1 };
  s0 -> s3 [0, 65535] { R6830 += 1, R6783 += 1, R6784 += 1 };
  s0 -> s4 [91, 91] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R6830 += 1 };
  s1 -> s7 [0, 65535] { R6830 += 1, R6784 += 1 };
  s1 -> s1 [0, 65535] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 90] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R6830 += 1 };
  s2 -> s2 [0, 65535] { R6830 += 1, R6784 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R6830 += 1, R6784 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6830 += 1, R6783 += 1, R6784 += 1 };
  s3 -> s4 [91, 91] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R6830 += 1, R6784 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6830 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6830 += 1 };
  s7 -> s7 [0, 65535] { R6830 += 1, R6784 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R6832 += 1, R6786 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R6832 += 1, R6786 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R6831 += 1, R6832 += 1 };
  s0 -> s3 [0, 65535] { R6832 += 1, R6785 += 1, R6786 += 1 };
  s1 -> s1 [0, 65535] { R6832 += 1, R6786 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R6832 += 1, R6786 += 1 };
  s1 -> s5 [0, 65535] { R6832 += 1 };
  s2 -> s1 [0, 65535] { R6832 += 1, R6786 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6832 += 1, R6786 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s5 [0, 65535] { R6832 += 1 };
  s3 -> s1 [0, 65535] { R6832 += 1, R6786 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6832 += 1, R6786 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s3 [0, 65535] { R6832 += 1, R6785 += 1, R6786 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6832 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6832 += 1, R6786 += 1 };
  s6 -> s5 [0, 65535] { R6832 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R6834 += 1, R6787 += 1, R6788 += 1 };
  s0 -> s2 [0, 65535] { R6834 += 1, R6788 += 1, R6754 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R6833 += 1, R6834 += 1 };
  s0 -> s3 [0, 65535] { R6834 += 1, R6788 += 1, R6753 += 1, R6754 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6834 += 1, R6787 += 1, R6788 += 1 };
  s1 -> s2 [0, 65535] { R6834 += 1, R6788 += 1, R6754 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R6834 += 1, R6788 += 1, R6753 += 1, R6754 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R6834 += 1, R6788 += 1 };
  s2 -> s5 [0, 65535] { R6834 += 1 };
  s2 -> s2 [0, 65535] { R6834 += 1, R6788 += 1, R6754 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6834 += 1 };
  s3 -> s2 [0, 65535] { R6834 += 1, R6788 += 1, R6754 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R6834 += 1, R6788 += 1, R6753 += 1, R6754 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6834 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6834 += 1, R6788 += 1 };
  s6 -> s5 [0, 65535] { R6834 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R6836 += 1, R6790 += 1 };
  s0 -> s0 [0, 65535] { R6835 += 1, R6836 += 1 };
  s0 -> s2 [0, 65535] { R6836 += 1, R6789 += 1, R6790 += 1 };
  s1 -> s1 [0, 65535] { R6836 += 1, R6790 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6836 += 1 };
  s2 -> s1 [0, 65535] { R6836 += 1, R6790 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6836 += 1, R6789 += 1, R6790 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6836 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s0 -> s0 [0, 65535] { R6837 += 1, R6838 += 1 };
  s0 -> s2 [0, 65535] { R6838 += 1, R6792 += 1, R6759 += 1, R6760 += 1 };
  s0 -> s3 [0, 65535] { R6838 += 1, R6791 += 1, R6792 += 1 };
  s0 -> s4 [88, 88] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s0 -> s1 [89, 65535] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s1 -> s1 [0, 87] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s1 -> s4 [88, 88] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s1 -> s1 [89, 65535] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s2 -> s1 [0, 87] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s2 -> s2 [0, 65535] { R6838 += 1, R6792 += 1, R6759 += 1, R6760 += 1 };
  s2 -> s4 [88, 88] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s2 -> s1 [89, 65535] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s3 -> s1 [0, 87] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s3 -> s2 [0, 65535] { R6838 += 1, R6792 += 1, R6759 += 1, R6760 += 1 };
  s3 -> s3 [0, 65535] { R6838 += 1, R6791 += 1, R6792 += 1 };
  s3 -> s4 [88, 88] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s3 -> s1 [89, 65535] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s4 -> s4 [0, 65535] { R6838 += 1, R6792 += 1, R6760 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6838 += 1, R6792 += 1 };
  s4 -> s7 [0, 65535] { R6838 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6838 += 1, R6792 += 1 };
  s6 -> s7 [0, 65535] { R6838 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6838 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6840 += 1, R6793 += 1, R6794 += 1 };
  s0 -> s2 [0, 65535] { R6840 += 1, R6794 += 1, R6761 += 1, R6762 += 1 };
  s0 -> s0 [0, 65535] { R6839 += 1, R6840 += 1 };
  s0 -> s3 [0, 65535] { R6840 += 1, R6794 += 1, R6762 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R6840 += 1, R6793 += 1, R6794 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6840 += 1, R6794 += 1, R6761 += 1, R6762 += 1 };
  s1 -> s3 [0, 65535] { R6840 += 1, R6794 += 1, R6762 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6840 += 1 };
  s2 -> s2 [0, 65535] { R6840 += 1, R6794 += 1, R6761 += 1, R6762 += 1 };
  s2 -> s3 [0, 65535] { R6840 += 1, R6794 += 1, R6762 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6840 += 1 };
  s3 -> s3 [0, 65535] { R6840 += 1, R6794 += 1, R6762 += 1, R1 += 1 };
  s3 -> s6 [0, 65535] { R6840 += 1, R6794 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6840 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6840 += 1 };
  s6 -> s6 [0, 65535] { R6840 += 1, R6794 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s0 -> s2 [0, 65535] { R6842 += 1, R6796 += 1, R6764 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R6842 += 1, R6796 += 1, R6763 += 1, R6764 += 1 };
  s0 -> s4 [0, 65535] { R6842 += 1, R6795 += 1, R6796 += 1 };
  s0 -> s0 [0, 65535] { R6841 += 1, R6842 += 1 };
  s0 -> s5 [88, 88] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s0 -> s1 [89, 65535] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s1 -> s1 [0, 87] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s1 -> s1 [0, 65535] { R6842 += 1, R6796 += 1 };
  s1 -> s7 [0, 65535] { R6842 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [88, 88] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s1 -> s1 [89, 65535] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s2 -> s1 [0, 87] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s2 -> s2 [0, 65535] { R6842 += 1, R6796 += 1, R6764 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R6842 += 1, R6796 += 1 };
  s2 -> s7 [0, 65535] { R6842 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [88, 88] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s2 -> s1 [89, 65535] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s3 -> s1 [0, 87] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s3 -> s2 [0, 65535] { R6842 += 1, R6796 += 1, R6764 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R6842 += 1, R6796 += 1, R6763 += 1, R6764 += 1 };
  s3 -> s7 [0, 65535] { R6842 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [88, 88] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s3 -> s1 [89, 65535] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s4 -> s1 [0, 87] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s4 -> s2 [0, 65535] { R6842 += 1, R6796 += 1, R6764 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R6842 += 1, R6796 += 1, R6763 += 1, R6764 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6842 += 1, R6795 += 1, R6796 += 1 };
  s4 -> s5 [88, 88] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s4 -> s1 [89, 65535] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s5 -> s5 [0, 65535] { R6842 += 1, R6796 += 1, R6764 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6842 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6842 += 1, R6796 += 1 };
  s8 -> s7 [0, 65535] { R6842 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s0 -> s2 [0, 65535] { R6844 += 1, R6798 += 1, R6765 += 1, R6766 += 1 };
  s0 -> s3 [0, 65535] { R6844 += 1, R6797 += 1, R6798 += 1 };
  s0 -> s4 [0, 65535] { R6844 += 1, R6798 += 1, R6766 += 1, R6747 += 1, R6748 += 1 };
  s0 -> s0 [0, 65535] { R6843 += 1, R6844 += 1 };
  s0 -> s1 [89, 65535] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s1 -> s1 [0, 87] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s1 -> s1 [0, 65535] { R6844 += 1, R6798 += 1, R6766 += 1 };
  s1 -> s5 [0, 65535] { R6844 += 1 };
  s1 -> s6 [0, 65535] { R6844 += 1, R6798 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [89, 65535] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s2 -> s1 [0, 87] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s2 -> s2 [0, 65535] { R6844 += 1, R6798 += 1, R6765 += 1, R6766 += 1 };
  s2 -> s5 [0, 65535] { R6844 += 1 };
  s2 -> s4 [0, 65535] { R6844 += 1, R6798 += 1, R6766 += 1, R6747 += 1, R6748 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [89, 65535] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s3 -> s1 [0, 87] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s3 -> s2 [0, 65535] { R6844 += 1, R6798 += 1, R6765 += 1, R6766 += 1 };
  s3 -> s3 [0, 65535] { R6844 += 1, R6797 += 1, R6798 += 1 };
  s3 -> s4 [0, 65535] { R6844 += 1, R6798 += 1, R6766 += 1, R6747 += 1, R6748 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [89, 65535] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s4 -> s1 [0, 87] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s4 -> s5 [0, 65535] { R6844 += 1 };
  s4 -> s4 [0, 65535] { R6844 += 1, R6798 += 1, R6766 += 1, R6747 += 1, R6748 += 1 };
  s4 -> s6 [0, 65535] { R6844 += 1, R6798 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s1 [89, 65535] { R6844 += 1, R6798 += 1, R6766 += 1, R6748 += 1 };
  s5 -> s5 [0, 65535] { R6844 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R6844 += 1 };
  s6 -> s6 [0, 65535] { R6844 += 1, R6798 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1, R6749 += 1, R6750 += 1 };
  s0 -> s2 [0, 65535] { R6846 += 1, R6799 += 1, R6800 += 1 };
  s0 -> s3 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1, R6750 += 1, R5988 += 1 };
  s0 -> s4 [0, 65535] { R6846 += 1, R6800 += 1, R6767 += 1, R6768 += 1 };
  s0 -> s0 [0, 65535] { R6845 += 1, R6846 += 1 };
  s1 -> s1 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1, R6749 += 1, R6750 += 1 };
  s1 -> s3 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1, R6750 += 1, R5988 += 1 };
  s1 -> s7 [0, 65535] { R6846 += 1, R6800 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6846 += 1 };
  s2 -> s1 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1, R6749 += 1, R6750 += 1 };
  s2 -> s2 [0, 65535] { R6846 += 1, R6799 += 1, R6800 += 1 };
  s2 -> s3 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1, R6750 += 1, R5988 += 1 };
  s2 -> s4 [0, 65535] { R6846 += 1, R6800 += 1, R6767 += 1, R6768 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1, R6750 += 1, R5988 += 1 };
  s3 -> s7 [0, 65535] { R6846 += 1, R6800 += 1 };
  s3 -> s8 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6846 += 1 };
  s4 -> s1 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1, R6749 += 1, R6750 += 1 };
  s4 -> s3 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1, R6750 += 1, R5988 += 1 };
  s4 -> s4 [0, 65535] { R6846 += 1, R6800 += 1, R6767 += 1, R6768 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6846 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6846 += 1 };
  s7 -> s7 [0, 65535] { R6846 += 1, R6800 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6846 += 1 };
  s8 -> s7 [0, 65535] { R6846 += 1, R6800 += 1 };
  s8 -> s8 [0, 65535] { R6846 += 1, R6800 += 1, R6768 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R6846 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R6848 += 1, R6802 += 1, R6769 += 1, R6770 += 1 };
  s0 -> s2 [0, 65535] { R6848 += 1, R6801 += 1, R6802 += 1 };
  s0 -> s0 [0, 65535] { R6847 += 1, R6848 += 1 };
  s0 -> s3 [0, 65535] { R6848 += 1, R6802 += 1, R6770 += 1, R6751 += 1, R6752 += 1 };
  s0 -> s4 [99, 99] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s1 -> s1 [0, 65535] { R6848 += 1, R6802 += 1, R6769 += 1, R6770 += 1 };
  s1 -> s3 [0, 65535] { R6848 += 1, R6802 += 1, R6770 += 1, R6751 += 1, R6752 += 1 };
  s1 -> s4 [99, 99] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s2 -> s1 [0, 65535] { R6848 += 1, R6802 += 1, R6769 += 1, R6770 += 1 };
  s2 -> s2 [0, 65535] { R6848 += 1, R6801 += 1, R6802 += 1 };
  s2 -> s3 [0, 65535] { R6848 += 1, R6802 += 1, R6770 += 1, R6751 += 1, R6752 += 1 };
  s2 -> s4 [99, 99] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s3 -> s3 [0, 65535] { R6848 += 1, R6802 += 1, R6770 += 1, R6751 += 1, R6752 += 1 };
  s3 -> s4 [99, 99] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s4 -> s5 [97, 97] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s5 -> s6 [108, 108] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s6 -> s7 [104, 104] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s7 -> s8 [111, 111] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s8 -> s9 [115, 115] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s9 -> s10 [116, 116] { R6848 += 1, R6802 += 1, R6770 += 1, R6752 += 1 };
  s10 -> s10 [0, 65535] { R6848 += 1, R6802 += 1, R6770 += 1 };
  s10 -> s11 [0, 65535] { R6848 += 1 };
  s10 -> s12 [0, 65535] { R6848 += 1, R6802 += 1 };
  s10 -> s13 [0, 65535];
  s11 -> s11 [0, 65535] { R6848 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s11 [0, 65535] { R6848 += 1 };
  s12 -> s12 [0, 65535] { R6848 += 1, R6802 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  accepting s10, s11, s12, s13;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1, R6755 += 1, R6756 += 1 };
  s0 -> s0 [0, 65535] { R6849 += 1, R6850 += 1 };
  s0 -> s2 [0, 65535] { R6850 += 1, R6804 += 1, R6771 += 1, R6772 += 1 };
  s0 -> s3 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1, R6756 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R6850 += 1, R6803 += 1, R6804 += 1 };
  s1 -> s6 [0, 65535] { R6850 += 1, R6804 += 1 };
  s1 -> s1 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1, R6755 += 1, R6756 += 1 };
  s1 -> s8 [0, 65535] { R6850 += 1 };
  s1 -> s3 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1, R6756 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1, R6755 += 1, R6756 += 1 };
  s2 -> s2 [0, 65535] { R6850 += 1, R6804 += 1, R6771 += 1, R6772 += 1 };
  s2 -> s8 [0, 65535] { R6850 += 1 };
  s2 -> s3 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1, R6756 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6850 += 1, R6804 += 1 };
  s3 -> s7 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1 };
  s3 -> s8 [0, 65535] { R6850 += 1 };
  s3 -> s3 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1, R6756 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1, R6755 += 1, R6756 += 1 };
  s4 -> s2 [0, 65535] { R6850 += 1, R6804 += 1, R6771 += 1, R6772 += 1 };
  s4 -> s3 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1, R6756 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6850 += 1, R6803 += 1, R6804 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6850 += 1, R6804 += 1 };
  s6 -> s8 [0, 65535] { R6850 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6850 += 1, R6804 += 1 };
  s7 -> s7 [0, 65535] { R6850 += 1, R6804 += 1, R6772 += 1 };
  s7 -> s8 [0, 65535] { R6850 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R6850 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6852 += 1, R6806 += 1, R6773 += 1, R6774 += 1 };
  s0 -> s2 [0, 65535] { R6852 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s3 [0, 65535] { R6852 += 1, R6806 += 1, R6774 += 1, R6757 += 1, R6758 += 1 };
  s0 -> s0 [0, 65535] { R6851 += 1, R6852 += 1 };
  s0 -> s4 [108, 108] { R6852 += 1, R6806 += 1, R6774 += 1, R6758 += 1 };
  s1 -> s1 [0, 65535] { R6852 += 1, R6806 += 1, R6773 += 1, R6774 += 1 };
  s1 -> s3 [0, 65535] { R6852 += 1, R6806 += 1, R6774 += 1, R6757 += 1, R6758 += 1 };
  s1 -> s4 [108, 108] { R6852 += 1, R6806 += 1, R6774 += 1, R6758 += 1 };
  s2 -> s1 [0, 65535] { R6852 += 1, R6806 += 1, R6773 += 1, R6774 += 1 };
  s2 -> s2 [0, 65535] { R6852 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s3 [0, 65535] { R6852 += 1, R6806 += 1, R6774 += 1, R6757 += 1, R6758 += 1 };
  s2 -> s4 [108, 108] { R6852 += 1, R6806 += 1, R6774 += 1, R6758 += 1 };
  s3 -> s3 [0, 65535] { R6852 += 1, R6806 += 1, R6774 += 1, R6757 += 1, R6758 += 1 };
  s3 -> s4 [108, 108] { R6852 += 1, R6806 += 1, R6774 += 1, R6758 += 1 };
  s4 -> s5 [111, 111] { R6852 += 1, R6806 += 1, R6774 += 1, R6758 += 1 };
  s5 -> s5 [0, 65535] { R6852 += 1, R6806 += 1, R6774 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6852 += 1, R6806 += 1 };
  s5 -> s8 [0, 65535] { R6852 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6852 += 1, R6806 += 1 };
  s7 -> s8 [0, 65535] { R6852 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6852 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R1 = R6752 && R2 = R6774 && R3 = R6006 && R4 = R6852 && R15 = 0 && R16 = R6806 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R6806 = 1 && R6000 = R6006 && R6001 - R6806 = 1 && R6002 = R6006 && R6003 - R6806 = 1 && R6004 = R6006 && R6005 - R6806 = 1 && R6751 = 0 && R6757 = 0 && R6758 = 0 && R6759 = 0 && R6760 = R6774 && R6761 = 0 && R6762 = R6774 && R6763 = 0 && R6764 = R6774 && R6765 = 0 && R6766 = R6774 && R6767 = 0 && R6768 = R6774 && R6769 = 0 && R6770 = R6774 && R6771 = 0 && R6772 = R6774 && R6773 = 0 && R6775 = 0 && R6776 = R6806 && R6777 = 0 && R6778 = R6806 && R6779 = 0 && R6780 = R6806 && R6781 = 0 && R6782 = R6806 && R6783 = 0 && R6784 = R6806 && R6785 = 0 && R6786 = R6806 && R6787 = 0 && R6788 = R6806 && R6789 = 0 && R6790 = R6806 && R6791 = 0 && R6792 = R6806 && R6793 = 0 && R6794 = R6806 && R6795 = 0 && R6796 = R6806 && R6797 = 0 && R6798 = R6806 && R6799 = 0 && R6800 = R6806 && R6801 = 0 && R6802 = R6806 && R6803 = 0 && R6804 = R6806 && R6805 = 0 && R6807 = 10 && R6808 = R6852 && R6809 = 10 && R6810 = R6852 && R6811 = 10 && R6812 = R6852 && R6813 = 10 && R6814 = R6852 && R6815 = 10 && R6816 = R6852 && R6817 = 10 && R6818 = R6852 && R6819 = 10 && R6820 = R6852 && R6821 = 10 && R6822 = R6852 && R6823 = 10 && R6824 = R6852 && R6825 = 10 && R6826 = R6852 && R6827 = 10 && R6828 = R6852 && R6829 = 10 && R6830 = R6852 && R6831 = 10 && R6832 = R6852 && R6833 = 10 && R6834 = R6852 && R6835 = 10 && R6836 = R6852 && R6837 = 10 && R6838 = R6852 && R6839 = 10 && R6840 = R6852 && R6841 = 10 && R6842 = R6852 && R6843 = 10 && R6844 = R6852 && R6845 = 10 && R6846 = R6852 && R6847 = 10 && R6848 = R6852 && R6849 = 10 && R6850 = R6852 && R6851 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R6806 < R6006 && -1 < R6752 && 0 < R6774 && -1 < R6806 && 9 < R6852 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R6747 != 0 || R6748 = R6752 || (R5988 = 0 && R6752 = 0)) && (R6749 != 0 || R6750 = R6752 || (R5988 = 0 && R6752 = 0)) && (R5989 = 0 || (R6755 = 0 && R6756 = 0)) && (R5990 = 0 || (R6753 = 0 && R6754 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R6747 = 0 || (R5988 = 0 && R6752 = 0)) && (R6749 = 0 || (R5988 = 0 && R6752 = 0));
// End of Parikh automata intersection problem
