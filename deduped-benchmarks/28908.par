// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8261, R8262, R8263, R8264, R8265, R8266, R8267, R8268, R8269, R8270, R8271, R8272, R8273, R8274, R8275, R8276, R8277, R8278, R8279, R8280, R8281, R8282, R8283, R8284, R8285, R8286, R8287, R8288, R8289, R8290, R8291, R8292, R8293, R8294, R8295, R8296, R8297, R8298, R8299, R8300, R8301, R8302, R8303, R8304, R8305, R8306, R8307, R8308, R8309, R8310, R8311, R8312, R8313, R8314, R8315, R8316, R8317, R8318, R8319, R8320, R8321, R8322, R8323, R8324, R8325, R8326, R8327, R8328, R8329, R8330, R8331, R8332, R8333, R8334, R8335, R8336, R8337, R8338, R8339, R8340, R8341, R8342, R8343, R8344, R8345, R8346, R8347, R8348, R8349, R8350, R8351, R8352, R8353, R8354, R8355, R8356, R8357, R8358, R8359, R8360, R8361, R8362, R8363, R8364, R8365, R8366, R8367, R8368;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R8324 += 1 };
  s0 -> s0 [0, 65535] { R8323 += 1, R8324 += 1 };
  s0 -> s2 [46, 46] { R8324 += 1 };
  s0 -> s3 [47, 47] { R8324 += 1 };
  s0 -> s1 [48, 65535] { R8324 += 1 };
  s1 -> s1 [0, 45] { R8324 += 1 };
  s1 -> s2 [46, 46] { R8324 += 1 };
  s1 -> s3 [47, 47] { R8324 += 1 };
  s1 -> s1 [48, 65535] { R8324 += 1 };
  s2 -> s1 [0, 45] { R8324 += 1 };
  s2 -> s2 [46, 46] { R8324 += 1 };
  s2 -> s3 [47, 47] { R8324 += 1 };
  s2 -> s1 [48, 114] { R8324 += 1 };
  s2 -> s8 [115, 115] { R8324 += 1 };
  s2 -> s1 [116, 65535] { R8324 += 1 };
  s3 -> s3 [0, 45] { R8324 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R8324 += 1 };
  s3 -> s3 [47, 65535] { R8324 += 1 };
  s4 -> s3 [0, 45] { R8324 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R8324 += 1 };
  s4 -> s3 [47, 114] { R8324 += 1 };
  s4 -> s5 [115, 115] { R8324 += 1 };
  s4 -> s3 [116, 65535] { R8324 += 1 };
  s5 -> s3 [0, 45] { R8324 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R8324 += 1 };
  s5 -> s3 [47, 110] { R8324 += 1 };
  s5 -> s6 [111, 111] { R8324 += 1 };
  s5 -> s3 [112, 65535] { R8324 += 1 };
  s6 -> s3 [0, 45] { R8324 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R8324 += 1 };
  s6 -> s3 [47, 98] { R8324 += 1 };
  s6 -> s7 [99, 99] { R8324 += 1 };
  s6 -> s3 [100, 65535] { R8324 += 1 };
  s7 -> s3 [0, 45] { R8324 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R8324 += 1 };
  s7 -> s3 [47, 106] { R8324 += 1 };
  s7 -> s3 [108, 65535] { R8324 += 1 };
  s8 -> s1 [0, 45] { R8324 += 1 };
  s8 -> s2 [46, 46] { R8324 += 1 };
  s8 -> s3 [47, 47] { R8324 += 1 };
  s8 -> s1 [48, 110] { R8324 += 1 };
  s8 -> s9 [111, 111] { R8324 += 1 };
  s8 -> s1 [112, 65535] { R8324 += 1 };
  s9 -> s1 [0, 45] { R8324 += 1 };
  s9 -> s2 [46, 46] { R8324 += 1 };
  s9 -> s3 [47, 47] { R8324 += 1 };
  s9 -> s1 [48, 98] { R8324 += 1 };
  s9 -> s10 [99, 99] { R8324 += 1 };
  s9 -> s1 [100, 65535] { R8324 += 1 };
  s10 -> s1 [0, 45] { R8324 += 1 };
  s10 -> s2 [46, 46] { R8324 += 1 };
  s10 -> s3 [47, 47] { R8324 += 1 };
  s10 -> s1 [48, 106] { R8324 += 1 };
  s10 -> s1 [108, 65535] { R8324 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R8325 += 1, R8326 += 1 };
  s0 -> s1 [0, 65535] { R8326 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8326 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R8328 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R8328 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8327 += 1, R8328 += 1 };
  s0 -> s3 [47, 47] { R8328 += 1 };
  s0 -> s1 [48, 65535] { R8328 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R8328 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R8328 += 1 };
  s1 -> s1 [48, 65535] { R8328 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R8328 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R8328 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R8328 += 1 };
  s2 -> s1 [48, 65535] { R8328 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R8328 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8330 += 1, R8040 += 1 };
  s0 -> s2 [0, 65535] { R8330 += 1, R8039 += 1, R8040 += 1 };
  s0 -> s0 [0, 65535] { R8329 += 1, R8330 += 1 };
  s0 -> s1 [38, 42] { R8330 += 1, R8040 += 1 };
  s0 -> s1 [44, 45] { R8330 += 1, R8040 += 1 };
  s0 -> s1 [47, 62] { R8330 += 1, R8040 += 1 };
  s0 -> s1 [64, 65535] { R8330 += 1, R8040 += 1 };
  s1 -> s1 [0, 36] { R8330 += 1, R8040 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8330 += 1 };
  s1 -> s1 [38, 42] { R8330 += 1, R8040 += 1 };
  s1 -> s1 [44, 45] { R8330 += 1, R8040 += 1 };
  s1 -> s1 [47, 62] { R8330 += 1, R8040 += 1 };
  s1 -> s1 [64, 65535] { R8330 += 1, R8040 += 1 };
  s2 -> s1 [0, 36] { R8330 += 1, R8040 += 1 };
  s2 -> s2 [0, 65535] { R8330 += 1, R8039 += 1, R8040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R8330 += 1, R8040 += 1 };
  s2 -> s1 [44, 45] { R8330 += 1, R8040 += 1 };
  s2 -> s1 [47, 62] { R8330 += 1, R8040 += 1 };
  s2 -> s1 [64, 65535] { R8330 += 1, R8040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R8332 += 1, R8042 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R8332 += 1, R8041 += 1, R8042 += 1 };
  s0 -> s0 [0, 65535] { R8331 += 1, R8332 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8332 += 1, R8042 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R8332 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8332 += 1, R8042 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R8332 += 1, R8041 += 1, R8042 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8332 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R8334 += 1, R8043 += 1, R8044 += 1 };
  s0 -> s0 [0, 65535] { R8333 += 1, R8334 += 1 };
  s0 -> s3 [0, 65535] { R8334 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R8334 += 1, R8044 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R8334 += 1 };
  s2 -> s1 [0, 62] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R8334 += 1, R8043 += 1, R8044 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8334 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8334 += 1 };
  s3 -> s3 [0, 65535] { R8334 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8334 += 1, R8044 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8334 += 1 };
  s7 -> s7 [0, 65535] { R8334 += 1, R8044 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8334 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8336 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s2 [0, 65535] { R8336 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R8336 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R8335 += 1, R8336 += 1 };
  s1 -> s1 [0, 65535] { R8336 += 1, R8045 += 1, R8046 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R8336 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R8336 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535] { R8336 += 1 };
  s2 -> s6 [0, 65535] { R8336 += 1, R8046 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8336 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R8336 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8336 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R8336 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535] { R8336 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8336 += 1 };
  s6 -> s6 [0, 65535] { R8336 += 1, R8046 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8338 += 1, R8292 += 1 };
  s0 -> s2 [0, 65535] { R8338 += 1, R8291 += 1, R8292 += 1 };
  s0 -> s0 [0, 65535] { R8337 += 1, R8338 += 1 };
  s0 -> s1 [45, 63] { R8338 += 1, R8292 += 1 };
  s0 -> s3 [88, 88] { R8338 += 1, R8292 += 1 };
  s0 -> s1 [89, 65535] { R8338 += 1, R8292 += 1 };
  s1 -> s1 [0, 43] { R8338 += 1, R8292 += 1 };
  s1 -> s1 [45, 63] { R8338 += 1, R8292 += 1 };
  s1 -> s3 [88, 88] { R8338 += 1, R8292 += 1 };
  s1 -> s1 [89, 65535] { R8338 += 1, R8292 += 1 };
  s2 -> s1 [0, 43] { R8338 += 1, R8292 += 1 };
  s2 -> s2 [0, 65535] { R8338 += 1, R8291 += 1, R8292 += 1 };
  s2 -> s1 [45, 63] { R8338 += 1, R8292 += 1 };
  s2 -> s3 [88, 88] { R8338 += 1, R8292 += 1 };
  s2 -> s1 [89, 65535] { R8338 += 1, R8292 += 1 };
  s3 -> s3 [0, 43] { R8338 += 1, R8292 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8338 += 1 };
  s3 -> s3 [45, 63] { R8338 += 1, R8292 += 1 };
  s3 -> s3 [88, 65535] { R8338 += 1, R8292 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R8340 += 1, R8293 += 1, R8294 += 1 };
  s0 -> s2 [0, 65535] { R8340 += 1, R8294 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8339 += 1, R8340 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8340 += 1, R8293 += 1, R8294 += 1 };
  s1 -> s2 [0, 65535] { R8340 += 1, R8294 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8340 += 1, R8294 += 1, R2 += 1 };
  s2 -> s4 [0, 65535] { R8340 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8340 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8342 += 1, R8296 += 1 };
  s0 -> s2 [0, 65535] { R8342 += 1, R8296 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R8342 += 1, R8295 += 1, R8296 += 1 };
  s0 -> s0 [0, 65535] { R8341 += 1, R8342 += 1 };
  s0 -> s4 [58, 58] { R8342 += 1, R8296 += 1 };
  s0 -> s1 [59, 65535] { R8342 += 1, R8296 += 1 };
  s1 -> s1 [0, 57] { R8342 += 1, R8296 += 1 };
  s1 -> s1 [0, 65535] { R8342 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R8342 += 1, R8296 += 1 };
  s1 -> s1 [59, 65535] { R8342 += 1, R8296 += 1 };
  s2 -> s1 [0, 57] { R8342 += 1, R8296 += 1 };
  s2 -> s2 [0, 65535] { R8342 += 1, R8296 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8342 += 1 };
  s2 -> s4 [58, 58] { R8342 += 1, R8296 += 1 };
  s2 -> s1 [59, 65535] { R8342 += 1, R8296 += 1 };
  s3 -> s1 [0, 57] { R8342 += 1, R8296 += 1 };
  s3 -> s2 [0, 65535] { R8342 += 1, R8296 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R8342 += 1, R8295 += 1, R8296 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R8342 += 1, R8296 += 1 };
  s3 -> s1 [59, 65535] { R8342 += 1, R8296 += 1 };
  s4 -> s4 [0, 65535] { R8342 += 1, R8296 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8342 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R8344 += 1, R8298 += 1 };
  s0 -> s2 [0, 65535] { R8344 += 1, R8297 += 1, R8298 += 1 };
  s0 -> s3 [0, 65535] { R8344 += 1, R8298 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R8343 += 1, R8344 += 1 };
  s0 -> s4 [88, 88] { R8344 += 1, R8298 += 1 };
  s0 -> s1 [89, 65535] { R8344 += 1, R8298 += 1 };
  s1 -> s1 [0, 87] { R8344 += 1, R8298 += 1 };
  s1 -> s1 [0, 65535] { R8344 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [88, 88] { R8344 += 1, R8298 += 1 };
  s1 -> s1 [89, 65535] { R8344 += 1, R8298 += 1 };
  s2 -> s1 [0, 87] { R8344 += 1, R8298 += 1 };
  s2 -> s2 [0, 65535] { R8344 += 1, R8297 += 1, R8298 += 1 };
  s2 -> s3 [0, 65535] { R8344 += 1, R8298 += 1, R11 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [88, 88] { R8344 += 1, R8298 += 1 };
  s2 -> s1 [89, 65535] { R8344 += 1, R8298 += 1 };
  s3 -> s1 [0, 87] { R8344 += 1, R8298 += 1 };
  s3 -> s3 [0, 65535] { R8344 += 1, R8298 += 1, R11 += 1 };
  s3 -> s5 [0, 65535] { R8344 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [88, 88] { R8344 += 1, R8298 += 1 };
  s3 -> s1 [89, 65535] { R8344 += 1, R8298 += 1 };
  s4 -> s4 [0, 65535] { R8344 += 1, R8298 += 1 };
  s5 -> s5 [0, 65535] { R8344 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8345 += 1, R8346 += 1 };
  s0 -> s2 [0, 65535] { R8346 += 1, R8300 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R8346 += 1, R8299 += 1, R8300 += 1 };
  s0 -> s4 [91, 91] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R8346 += 1 };
  s1 -> s7 [0, 65535] { R8346 += 1, R8300 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 90] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R8346 += 1 };
  s2 -> s2 [0, 65535] { R8346 += 1, R8300 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R8346 += 1, R8300 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8346 += 1, R8299 += 1, R8300 += 1 };
  s3 -> s4 [91, 91] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8346 += 1, R8300 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8346 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8346 += 1 };
  s7 -> s7 [0, 65535] { R8346 += 1, R8300 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R8347 += 1, R8348 += 1 };
  s0 -> s1 [0, 65535] { R8348 += 1, R8302 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R8348 += 1, R8302 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R8348 += 1, R8301 += 1, R8302 += 1 };
  s1 -> s1 [0, 65535] { R8348 += 1, R8302 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s2 [0, 65535] { R8348 += 1, R8302 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8348 += 1 };
  s2 -> s2 [0, 65535] { R8348 += 1, R8302 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8348 += 1 };
  s2 -> s6 [0, 65535] { R8348 += 1, R8302 += 1 };
  s3 -> s1 [0, 65535] { R8348 += 1, R8302 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R8348 += 1, R8302 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8348 += 1, R8301 += 1, R8302 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8348 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8348 += 1 };
  s6 -> s6 [0, 65535] { R8348 += 1, R8302 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8350 += 1, R8304 += 1, R8268 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R8350 += 1, R8303 += 1, R8304 += 1 };
  s0 -> s3 [0, 65535] { R8350 += 1, R8304 += 1, R8267 += 1, R8268 += 1 };
  s0 -> s0 [0, 65535] { R8349 += 1, R8350 += 1 };
  s1 -> s1 [0, 65535] { R8350 += 1, R8304 += 1, R8268 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535] { R8350 += 1 };
  s1 -> s6 [0, 65535] { R8350 += 1, R8304 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8350 += 1, R8304 += 1, R8268 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R8350 += 1, R8303 += 1, R8304 += 1 };
  s2 -> s3 [0, 65535] { R8350 += 1, R8304 += 1, R8267 += 1, R8268 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R8350 += 1, R8304 += 1, R8268 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R8350 += 1, R8304 += 1, R8267 += 1, R8268 += 1 };
  s3 -> s4 [0, 65535] { R8350 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8350 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8350 += 1 };
  s6 -> s6 [0, 65535] { R8350 += 1, R8304 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R8351 += 1, R8352 += 1 };
  s0 -> s1 [0, 65535] { R8352 += 1, R8306 += 1, R8269 += 1, R8270 += 1 };
  s0 -> s2 [0, 65535] { R8352 += 1, R8305 += 1, R8306 += 1 };
  s0 -> s3 [108, 108] { R8352 += 1, R8306 += 1, R8270 += 1 };
  s1 -> s1 [0, 65535] { R8352 += 1, R8306 += 1, R8269 += 1, R8270 += 1 };
  s1 -> s3 [108, 108] { R8352 += 1, R8306 += 1, R8270 += 1 };
  s2 -> s1 [0, 65535] { R8352 += 1, R8306 += 1, R8269 += 1, R8270 += 1 };
  s2 -> s2 [0, 65535] { R8352 += 1, R8305 += 1, R8306 += 1 };
  s2 -> s3 [108, 108] { R8352 += 1, R8306 += 1, R8270 += 1 };
  s3 -> s4 [111, 111] { R8352 += 1, R8306 += 1, R8270 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8352 += 1 };
  s4 -> s4 [0, 65535] { R8352 += 1, R8306 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8352 += 1 };
  accepting s4, s5, s6;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s0 -> s0 [0, 65535] { R8353 += 1, R8354 += 1 };
  s0 -> s2 [0, 65535] { R8354 += 1, R8307 += 1, R8308 += 1 };
  s0 -> s3 [0, 65535] { R8354 += 1, R8308 += 1, R8275 += 1, R8276 += 1 };
  s0 -> s4 [88, 88] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s0 -> s1 [89, 65535] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s1 -> s1 [0, 87] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s1 -> s4 [88, 88] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s1 -> s1 [89, 65535] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s2 -> s1 [0, 87] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s2 -> s2 [0, 65535] { R8354 += 1, R8307 += 1, R8308 += 1 };
  s2 -> s3 [0, 65535] { R8354 += 1, R8308 += 1, R8275 += 1, R8276 += 1 };
  s2 -> s4 [88, 88] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s2 -> s1 [89, 65535] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s3 -> s1 [0, 87] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s3 -> s3 [0, 65535] { R8354 += 1, R8308 += 1, R8275 += 1, R8276 += 1 };
  s3 -> s4 [88, 88] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s3 -> s1 [89, 65535] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s4 -> s5 [0, 65535] { R8354 += 1 };
  s4 -> s4 [0, 65535] { R8354 += 1, R8308 += 1, R8276 += 1 };
  s4 -> s6 [0, 65535] { R8354 += 1, R8308 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8354 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R8354 += 1 };
  s6 -> s6 [0, 65535] { R8354 += 1, R8308 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8356 += 1, R8310 += 1, R8277 += 1, R8278 += 1 };
  s0 -> s2 [0, 65535] { R8356 += 1, R8310 += 1, R8278 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R8355 += 1, R8356 += 1 };
  s0 -> s3 [0, 65535] { R8356 += 1, R8309 += 1, R8310 += 1 };
  s1 -> s1 [0, 65535] { R8356 += 1, R8310 += 1, R8277 += 1, R8278 += 1 };
  s1 -> s2 [0, 65535] { R8356 += 1, R8310 += 1, R8278 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R8356 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8356 += 1, R8310 += 1, R8278 += 1, R1 += 1 };
  s2 -> s5 [0, 65535] { R8356 += 1 };
  s2 -> s6 [0, 65535] { R8356 += 1, R8310 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8356 += 1, R8310 += 1, R8277 += 1, R8278 += 1 };
  s3 -> s2 [0, 65535] { R8356 += 1, R8310 += 1, R8278 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R8356 += 1, R8309 += 1, R8310 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8356 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8356 += 1 };
  s6 -> s6 [0, 65535] { R8356 += 1, R8310 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s0 -> s2 [0, 65535] { R8358 += 1, R8312 += 1, R8279 += 1, R8280 += 1 };
  s0 -> s3 [0, 65535] { R8358 += 1, R8311 += 1, R8312 += 1 };
  s0 -> s0 [0, 65535] { R8357 += 1, R8358 += 1 };
  s0 -> s4 [0, 65535] { R8358 += 1, R8312 += 1, R8280 += 1, R7 += 1 };
  s0 -> s5 [88, 88] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s0 -> s1 [89, 65535] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s1 -> s1 [0, 87] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8358 += 1, R8312 += 1 };
  s1 -> s7 [0, 65535] { R8358 += 1 };
  s1 -> s5 [88, 88] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s1 -> s1 [89, 65535] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s2 -> s1 [0, 87] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s2 -> s2 [0, 65535] { R8358 += 1, R8312 += 1, R8279 += 1, R8280 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R8358 += 1, R8312 += 1, R8280 += 1, R7 += 1 };
  s2 -> s7 [0, 65535] { R8358 += 1 };
  s2 -> s5 [88, 88] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s2 -> s1 [89, 65535] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s3 -> s1 [0, 87] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s3 -> s2 [0, 65535] { R8358 += 1, R8312 += 1, R8279 += 1, R8280 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8358 += 1, R8311 += 1, R8312 += 1 };
  s3 -> s4 [0, 65535] { R8358 += 1, R8312 += 1, R8280 += 1, R7 += 1 };
  s3 -> s5 [88, 88] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s3 -> s1 [89, 65535] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s4 -> s1 [0, 87] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8358 += 1, R8312 += 1, R8280 += 1, R7 += 1 };
  s4 -> s7 [0, 65535] { R8358 += 1 };
  s4 -> s8 [0, 65535] { R8358 += 1, R8312 += 1 };
  s4 -> s5 [88, 88] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s4 -> s1 [89, 65535] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s5 -> s5 [0, 65535] { R8358 += 1, R8312 += 1, R8280 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8358 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8358 += 1 };
  s8 -> s8 [0, 65535] { R8358 += 1, R8312 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s0 -> s0 [0, 65535] { R8359 += 1, R8360 += 1 };
  s0 -> s2 [0, 65535] { R8360 += 1, R8313 += 1, R8314 += 1 };
  s0 -> s3 [0, 65535] { R8360 += 1, R8314 += 1, R8282 += 1, R8261 += 1, R8262 += 1 };
  s0 -> s4 [0, 65535] { R8360 += 1, R8314 += 1, R8281 += 1, R8282 += 1 };
  s0 -> s1 [89, 65535] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s1 -> s1 [0, 87] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8360 += 1, R8314 += 1, R8282 += 1 };
  s1 -> s7 [0, 65535] { R8360 += 1, R8314 += 1 };
  s1 -> s6 [0, 65535] { R8360 += 1 };
  s1 -> s1 [89, 65535] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s2 -> s1 [0, 87] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8360 += 1, R8313 += 1, R8314 += 1 };
  s2 -> s3 [0, 65535] { R8360 += 1, R8314 += 1, R8282 += 1, R8261 += 1, R8262 += 1 };
  s2 -> s4 [0, 65535] { R8360 += 1, R8314 += 1, R8281 += 1, R8282 += 1 };
  s2 -> s1 [89, 65535] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s3 -> s1 [0, 87] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R8360 += 1, R8314 += 1 };
  s3 -> s3 [0, 65535] { R8360 += 1, R8314 += 1, R8282 += 1, R8261 += 1, R8262 += 1 };
  s3 -> s6 [0, 65535] { R8360 += 1 };
  s3 -> s1 [89, 65535] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s4 -> s1 [0, 87] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R8360 += 1, R8314 += 1, R8282 += 1, R8261 += 1, R8262 += 1 };
  s4 -> s6 [0, 65535] { R8360 += 1 };
  s4 -> s4 [0, 65535] { R8360 += 1, R8314 += 1, R8281 += 1, R8282 += 1 };
  s4 -> s1 [89, 65535] { R8360 += 1, R8314 += 1, R8282 += 1, R8262 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8360 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8360 += 1, R8314 += 1 };
  s7 -> s6 [0, 65535] { R8360 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1, R8264 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R8362 += 1, R8315 += 1, R8316 += 1 };
  s0 -> s3 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1, R8263 += 1, R8264 += 1 };
  s0 -> s0 [0, 65535] { R8361 += 1, R8362 += 1 };
  s0 -> s4 [0, 65535] { R8362 += 1, R8316 += 1, R8283 += 1, R8284 += 1 };
  s1 -> s1 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1, R8264 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535] { R8362 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8362 += 1, R8316 += 1 };
  s1 -> s8 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1 };
  s2 -> s1 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1, R8264 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R8362 += 1, R8315 += 1, R8316 += 1 };
  s2 -> s3 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1, R8263 += 1, R8264 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R8362 += 1, R8316 += 1, R8283 += 1, R8284 += 1 };
  s3 -> s1 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1, R8264 += 1, R5988 += 1 };
  s3 -> s5 [0, 65535] { R8362 += 1 };
  s3 -> s3 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1, R8263 += 1, R8264 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R8362 += 1, R8316 += 1 };
  s4 -> s1 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1, R8264 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R8362 += 1 };
  s4 -> s3 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1, R8263 += 1, R8264 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8362 += 1, R8316 += 1, R8283 += 1, R8284 += 1 };
  s5 -> s5 [0, 65535] { R8362 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8362 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8362 += 1, R8316 += 1 };
  s8 -> s5 [0, 65535] { R8362 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8362 += 1, R8316 += 1 };
  s8 -> s8 [0, 65535] { R8362 += 1, R8316 += 1, R8284 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R8363 += 1, R8364 += 1 };
  s0 -> s1 [0, 65535] { R8364 += 1, R8318 += 1, R8285 += 1, R8286 += 1 };
  s0 -> s2 [0, 65535] { R8364 += 1, R8318 += 1, R8286 += 1, R8265 += 1, R8266 += 1 };
  s0 -> s3 [0, 65535] { R8364 += 1, R8317 += 1, R8318 += 1 };
  s0 -> s4 [115, 115] { R8364 += 1, R8318 += 1, R8286 += 1, R8266 += 1 };
  s1 -> s1 [0, 65535] { R8364 += 1, R8318 += 1, R8285 += 1, R8286 += 1 };
  s1 -> s2 [0, 65535] { R8364 += 1, R8318 += 1, R8286 += 1, R8265 += 1, R8266 += 1 };
  s1 -> s4 [115, 115] { R8364 += 1, R8318 += 1, R8286 += 1, R8266 += 1 };
  s2 -> s2 [0, 65535] { R8364 += 1, R8318 += 1, R8286 += 1, R8265 += 1, R8266 += 1 };
  s2 -> s4 [115, 115] { R8364 += 1, R8318 += 1, R8286 += 1, R8266 += 1 };
  s3 -> s1 [0, 65535] { R8364 += 1, R8318 += 1, R8285 += 1, R8286 += 1 };
  s3 -> s2 [0, 65535] { R8364 += 1, R8318 += 1, R8286 += 1, R8265 += 1, R8266 += 1 };
  s3 -> s3 [0, 65535] { R8364 += 1, R8317 += 1, R8318 += 1 };
  s3 -> s4 [115, 115] { R8364 += 1, R8318 += 1, R8286 += 1, R8266 += 1 };
  s4 -> s5 [116, 116] { R8364 += 1, R8318 += 1, R8286 += 1, R8266 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8364 += 1, R8318 += 1 };
  s5 -> s5 [0, 65535] { R8364 += 1, R8318 += 1, R8286 += 1 };
  s5 -> s8 [0, 65535] { R8364 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8364 += 1, R8318 += 1 };
  s7 -> s8 [0, 65535] { R8364 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8364 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8366 += 1, R8320 += 1, R8287 += 1, R8288 += 1 };
  s0 -> s2 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1, R8271 += 1, R8272 += 1 };
  s0 -> s0 [0, 65535] { R8365 += 1, R8366 += 1 };
  s0 -> s3 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1, R8272 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R8366 += 1, R8319 += 1, R8320 += 1 };
  s1 -> s8 [0, 65535] { R8366 += 1 };
  s1 -> s1 [0, 65535] { R8366 += 1, R8320 += 1, R8287 += 1, R8288 += 1 };
  s1 -> s2 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1, R8271 += 1, R8272 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1, R8272 += 1, R5989 += 1 };
  s2 -> s7 [0, 65535] { R8366 += 1, R8320 += 1 };
  s2 -> s8 [0, 65535] { R8366 += 1 };
  s2 -> s2 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1, R8271 += 1, R8272 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1, R8272 += 1, R5989 += 1 };
  s3 -> s6 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1 };
  s3 -> s7 [0, 65535] { R8366 += 1, R8320 += 1 };
  s3 -> s8 [0, 65535] { R8366 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1, R8272 += 1, R5989 += 1 };
  s4 -> s1 [0, 65535] { R8366 += 1, R8320 += 1, R8287 += 1, R8288 += 1 };
  s4 -> s2 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1, R8271 += 1, R8272 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1, R8272 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R8366 += 1, R8319 += 1, R8320 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8366 += 1, R8320 += 1, R8288 += 1 };
  s6 -> s7 [0, 65535] { R8366 += 1, R8320 += 1 };
  s6 -> s8 [0, 65535] { R8366 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8366 += 1, R8320 += 1 };
  s7 -> s8 [0, 65535] { R8366 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R8366 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8368 += 1, R8322 += 1, R8290 += 1, R8273 += 1, R8274 += 1 };
  s0 -> s2 [0, 65535] { R8368 += 1, R8322 += 1, R8289 += 1, R8290 += 1 };
  s0 -> s0 [0, 65535] { R8367 += 1, R8368 += 1 };
  s0 -> s3 [0, 65535] { R8368 += 1, R8321 += 1, R8322 += 1 };
  s0 -> s4 [99, 99] { R8368 += 1, R8322 += 1, R8290 += 1, R8274 += 1 };
  s1 -> s1 [0, 65535] { R8368 += 1, R8322 += 1, R8290 += 1, R8273 += 1, R8274 += 1 };
  s1 -> s4 [99, 99] { R8368 += 1, R8322 += 1, R8290 += 1, R8274 += 1 };
  s2 -> s1 [0, 65535] { R8368 += 1, R8322 += 1, R8290 += 1, R8273 += 1, R8274 += 1 };
  s2 -> s2 [0, 65535] { R8368 += 1, R8322 += 1, R8289 += 1, R8290 += 1 };
  s2 -> s4 [99, 99] { R8368 += 1, R8322 += 1, R8290 += 1, R8274 += 1 };
  s3 -> s1 [0, 65535] { R8368 += 1, R8322 += 1, R8290 += 1, R8273 += 1, R8274 += 1 };
  s3 -> s2 [0, 65535] { R8368 += 1, R8322 += 1, R8289 += 1, R8290 += 1 };
  s3 -> s3 [0, 65535] { R8368 += 1, R8321 += 1, R8322 += 1 };
  s3 -> s4 [99, 99] { R8368 += 1, R8322 += 1, R8290 += 1, R8274 += 1 };
  s4 -> s5 [97, 97] { R8368 += 1, R8322 += 1, R8290 += 1, R8274 += 1 };
  s5 -> s6 [108, 108] { R8368 += 1, R8322 += 1, R8290 += 1, R8274 += 1 };
  s6 -> s7 [104, 104] { R8368 += 1, R8322 += 1, R8290 += 1, R8274 += 1 };
  s7 -> s8 [111, 111] { R8368 += 1, R8322 += 1, R8290 += 1, R8274 += 1 };
  s8 -> s9 [0, 65535] { R8368 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R8368 += 1, R8322 += 1, R8290 += 1 };
  s8 -> s11 [0, 65535] { R8368 += 1, R8322 += 1 };
  s9 -> s9 [0, 65535] { R8368 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s9 [0, 65535] { R8368 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8368 += 1, R8322 += 1 };
  accepting s8, s9, s10, s11;
};
};
constraint R1 = R8266 && R2 = R8290 && R3 = R8046 && R4 = R8368 && R15 = 0 && R16 = R8322 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8039 - R8322 = 1 && R8040 = R8046 && R8041 - R8322 = 1 && R8042 = R8046 && R8043 - R8322 = 1 && R8044 = R8046 && R8045 - R8322 = 1 && R8265 = 0 && R8269 = 0 && R8270 = 0 && R8273 = 0 && R8274 = 0 && R8275 = 0 && R8276 = R8290 && R8277 = 0 && R8278 = R8290 && R8279 = 0 && R8280 = R8290 && R8281 = 0 && R8282 = R8290 && R8283 = 0 && R8284 = R8290 && R8285 = 0 && R8286 = R8290 && R8287 = 0 && R8288 = R8290 && R8289 = 0 && R8291 = 0 && R8292 = R8322 && R8293 = 0 && R8294 = R8322 && R8295 = 0 && R8296 = R8322 && R8297 = 0 && R8298 = R8322 && R8299 = 0 && R8300 = R8322 && R8301 = 0 && R8302 = R8322 && R8303 = 0 && R8304 = R8322 && R8305 = 0 && R8306 = R8322 && R8307 = 0 && R8308 = R8322 && R8309 = 0 && R8310 = R8322 && R8311 = 0 && R8312 = R8322 && R8313 = 0 && R8314 = R8322 && R8315 = 0 && R8316 = R8322 && R8317 = 0 && R8318 = R8322 && R8319 = 0 && R8320 = R8322 && R8321 = 0 && R8323 = 10 && R8324 = R8368 && R8325 = 10 && R8326 = R8368 && R8327 = 10 && R8328 = R8368 && R8329 = 10 && R8330 = R8368 && R8331 = 10 && R8332 = R8368 && R8333 = 10 && R8334 = R8368 && R8335 = 10 && R8336 = R8368 && R8337 = 10 && R8338 = R8368 && R8339 = 10 && R8340 = R8368 && R8341 = 10 && R8342 = R8368 && R8343 = 10 && R8344 = R8368 && R8345 = 10 && R8346 = R8368 && R8347 = 10 && R8348 = R8368 && R8349 = 10 && R8350 = R8368 && R8351 = 10 && R8352 = R8368 && R8353 = 10 && R8354 = R8368 && R8355 = 10 && R8356 = R8368 && R8357 = 10 && R8358 = R8368 && R8359 = 10 && R8360 = R8368 && R8361 = 10 && R8362 = R8368 && R8363 = 10 && R8364 = R8368 && R8365 = 10 && R8366 = R8368 && R8367 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R8322 < R8046 && -1 < R8266 && 0 < R8290 && -1 < R8322 && 9 < R8368 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R8261 != 0 || R8262 = R8266 || (R5988 = 0 && R8266 = 0)) && (R8263 != 0 || R8264 = R8266 || (R5988 = 0 && R8266 = 0)) && (R5989 = 0 || (R8271 = 0 && R8272 = 0)) && (R5990 = 0 || (R8267 = 0 && R8268 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R8261 = 0 || (R5988 = 0 && R8266 = 0)) && (R8263 = 0 || (R5988 = 0 && R8266 = 0));
// End of Parikh automata intersection problem
