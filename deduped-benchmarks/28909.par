// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R9667, R9668, R9669, R9670, R9671, R9672, R9673, R9674, R9675, R9676, R9677, R9678, R9679, R9680, R9681, R9682, R9683, R9684, R9685, R9686, R9687, R9688, R9689, R9690, R9691, R9692, R9693, R9694, R9695, R9696, R9697, R9698, R9699, R9700, R9701, R9702, R9703, R9704, R9705, R9706, R9707, R9708, R9709, R9710, R9711, R9712, R9713, R9714, R9715, R9716, R9717, R9718, R9719, R9720, R9721, R9722, R9723, R9724, R9725, R9726, R9727, R9728, R9729, R9730, R9731, R9732, R9733, R9734, R9735, R9736, R9737, R9738, R9739, R9740, R9741, R9742, R9743, R9744, R9745, R9746, R9747, R9748, R9749, R9750, R9751, R9752, R9753, R9754, R9755, R9756, R9757, R9758, R9759, R9760, R9761, R9762, R9763, R9764, R9765, R9766, R9767, R9768, R9769, R9770, R9771, R9772, R9773, R9774, R9775, R9776, R9777, R9778, R9779, R9780;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R9736 += 1 };
  s0 -> s0 [0, 65535] { R9735 += 1, R9736 += 1 };
  s0 -> s2 [46, 46] { R9736 += 1 };
  s0 -> s3 [47, 47] { R9736 += 1 };
  s0 -> s1 [48, 65535] { R9736 += 1 };
  s1 -> s1 [0, 45] { R9736 += 1 };
  s1 -> s2 [46, 46] { R9736 += 1 };
  s1 -> s3 [47, 47] { R9736 += 1 };
  s1 -> s1 [48, 65535] { R9736 += 1 };
  s2 -> s1 [0, 45] { R9736 += 1 };
  s2 -> s2 [46, 46] { R9736 += 1 };
  s2 -> s3 [47, 47] { R9736 += 1 };
  s2 -> s1 [48, 114] { R9736 += 1 };
  s2 -> s8 [115, 115] { R9736 += 1 };
  s2 -> s1 [116, 65535] { R9736 += 1 };
  s3 -> s3 [0, 45] { R9736 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R9736 += 1 };
  s3 -> s3 [47, 65535] { R9736 += 1 };
  s4 -> s3 [0, 45] { R9736 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R9736 += 1 };
  s4 -> s3 [47, 114] { R9736 += 1 };
  s4 -> s5 [115, 115] { R9736 += 1 };
  s4 -> s3 [116, 65535] { R9736 += 1 };
  s5 -> s3 [0, 45] { R9736 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R9736 += 1 };
  s5 -> s3 [47, 110] { R9736 += 1 };
  s5 -> s6 [111, 111] { R9736 += 1 };
  s5 -> s3 [112, 65535] { R9736 += 1 };
  s6 -> s3 [0, 45] { R9736 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R9736 += 1 };
  s6 -> s3 [47, 98] { R9736 += 1 };
  s6 -> s7 [99, 99] { R9736 += 1 };
  s6 -> s3 [100, 65535] { R9736 += 1 };
  s7 -> s3 [0, 45] { R9736 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R9736 += 1 };
  s7 -> s3 [47, 106] { R9736 += 1 };
  s7 -> s3 [108, 65535] { R9736 += 1 };
  s8 -> s1 [0, 45] { R9736 += 1 };
  s8 -> s2 [46, 46] { R9736 += 1 };
  s8 -> s3 [47, 47] { R9736 += 1 };
  s8 -> s1 [48, 110] { R9736 += 1 };
  s8 -> s9 [111, 111] { R9736 += 1 };
  s8 -> s1 [112, 65535] { R9736 += 1 };
  s9 -> s1 [0, 45] { R9736 += 1 };
  s9 -> s2 [46, 46] { R9736 += 1 };
  s9 -> s3 [47, 47] { R9736 += 1 };
  s9 -> s1 [48, 98] { R9736 += 1 };
  s9 -> s10 [99, 99] { R9736 += 1 };
  s9 -> s1 [100, 65535] { R9736 += 1 };
  s10 -> s1 [0, 45] { R9736 += 1 };
  s10 -> s2 [46, 46] { R9736 += 1 };
  s10 -> s3 [47, 47] { R9736 += 1 };
  s10 -> s1 [48, 106] { R9736 += 1 };
  s10 -> s1 [108, 65535] { R9736 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R9737 += 1, R9738 += 1 };
  s0 -> s1 [0, 65535] { R9738 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9738 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R9740 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R9739 += 1, R9740 += 1 };
  s0 -> s2 [0, 65535] { R9740 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R9740 += 1 };
  s0 -> s1 [48, 65535] { R9740 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R9740 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R9740 += 1 };
  s1 -> s1 [48, 65535] { R9740 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R9740 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R9740 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R9740 += 1 };
  s2 -> s1 [48, 65535] { R9740 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R9740 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R9742 += 1, R9668 += 1 };
  s0 -> s0 [0, 65535] { R9741 += 1, R9742 += 1 };
  s0 -> s2 [0, 65535] { R9742 += 1, R9667 += 1, R9668 += 1 };
  s0 -> s1 [38, 42] { R9742 += 1, R9668 += 1 };
  s0 -> s1 [44, 45] { R9742 += 1, R9668 += 1 };
  s0 -> s1 [47, 62] { R9742 += 1, R9668 += 1 };
  s0 -> s1 [64, 65535] { R9742 += 1, R9668 += 1 };
  s1 -> s1 [0, 36] { R9742 += 1, R9668 += 1 };
  s1 -> s1 [0, 65535] { R9742 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R9742 += 1, R9668 += 1 };
  s1 -> s1 [44, 45] { R9742 += 1, R9668 += 1 };
  s1 -> s1 [47, 62] { R9742 += 1, R9668 += 1 };
  s1 -> s1 [64, 65535] { R9742 += 1, R9668 += 1 };
  s2 -> s1 [0, 36] { R9742 += 1, R9668 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9742 += 1, R9667 += 1, R9668 += 1 };
  s2 -> s1 [38, 42] { R9742 += 1, R9668 += 1 };
  s2 -> s1 [44, 45] { R9742 += 1, R9668 += 1 };
  s2 -> s1 [47, 62] { R9742 += 1, R9668 += 1 };
  s2 -> s1 [64, 65535] { R9742 += 1, R9668 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R9744 += 1, R9670 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R9744 += 1, R9669 += 1, R9670 += 1 };
  s0 -> s0 [0, 65535] { R9743 += 1, R9744 += 1 };
  s1 -> s1 [0, 65535] { R9744 += 1, R9670 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R9744 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9744 += 1, R9670 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R9744 += 1, R9669 += 1, R9670 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9744 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R9746 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R9746 += 1, R9671 += 1, R9672 += 1 };
  s0 -> s0 [0, 65535] { R9745 += 1, R9746 += 1 };
  s0 -> s4 [63, 63] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R9746 += 1 };
  s1 -> s1 [0, 65535] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R9746 += 1, R9672 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R9746 += 1 };
  s2 -> s2 [0, 65535] { R9746 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R9746 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R9746 += 1, R9671 += 1, R9672 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R9746 += 1, R9672 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9746 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9746 += 1 };
  s7 -> s7 [0, 65535] { R9746 += 1, R9672 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9748 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R9748 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R9747 += 1, R9748 += 1 };
  s0 -> s3 [0, 65535] { R9748 += 1, R9673 += 1, R9674 += 1 };
  s1 -> s1 [0, 65535] { R9748 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R9748 += 1, R9674 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9748 += 1 };
  s2 -> s1 [0, 65535] { R9748 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9748 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535] { R9748 += 1 };
  s3 -> s1 [0, 65535] { R9748 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9748 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s3 [0, 65535] { R9748 += 1, R9673 += 1, R9674 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9748 += 1 };
  s6 -> s6 [0, 65535] { R9748 += 1, R9674 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9748 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R9750 += 1, R9704 += 1 };
  s0 -> s0 [0, 65535] { R9749 += 1, R9750 += 1 };
  s0 -> s2 [0, 65535] { R9750 += 1, R9703 += 1, R9704 += 1 };
  s0 -> s1 [45, 63] { R9750 += 1, R9704 += 1 };
  s0 -> s3 [88, 88] { R9750 += 1, R9704 += 1 };
  s0 -> s1 [89, 65535] { R9750 += 1, R9704 += 1 };
  s1 -> s1 [0, 43] { R9750 += 1, R9704 += 1 };
  s1 -> s1 [45, 63] { R9750 += 1, R9704 += 1 };
  s1 -> s3 [88, 88] { R9750 += 1, R9704 += 1 };
  s1 -> s1 [89, 65535] { R9750 += 1, R9704 += 1 };
  s2 -> s1 [0, 43] { R9750 += 1, R9704 += 1 };
  s2 -> s2 [0, 65535] { R9750 += 1, R9703 += 1, R9704 += 1 };
  s2 -> s1 [45, 63] { R9750 += 1, R9704 += 1 };
  s2 -> s3 [88, 88] { R9750 += 1, R9704 += 1 };
  s2 -> s1 [89, 65535] { R9750 += 1, R9704 += 1 };
  s3 -> s3 [0, 43] { R9750 += 1, R9704 += 1 };
  s3 -> s3 [0, 65535] { R9750 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R9750 += 1, R9704 += 1 };
  s3 -> s3 [88, 65535] { R9750 += 1, R9704 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R9752 += 1, R9705 += 1, R9706 += 1 };
  s0 -> s2 [0, 65535] { R9752 += 1, R9706 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9751 += 1, R9752 += 1 };
  s1 -> s1 [0, 65535] { R9752 += 1, R9705 += 1, R9706 += 1 };
  s1 -> s2 [0, 65535] { R9752 += 1, R9706 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9752 += 1, R9706 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9752 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9752 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R9754 += 1, R9708 += 1 };
  s0 -> s2 [0, 65535] { R9754 += 1, R9707 += 1, R9708 += 1 };
  s0 -> s0 [0, 65535] { R9753 += 1, R9754 += 1 };
  s0 -> s3 [0, 65535] { R9754 += 1, R9708 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R9754 += 1, R9708 += 1 };
  s0 -> s1 [59, 65535] { R9754 += 1, R9708 += 1 };
  s1 -> s1 [0, 57] { R9754 += 1, R9708 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9754 += 1 };
  s1 -> s4 [58, 58] { R9754 += 1, R9708 += 1 };
  s1 -> s1 [59, 65535] { R9754 += 1, R9708 += 1 };
  s2 -> s1 [0, 57] { R9754 += 1, R9708 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9754 += 1, R9707 += 1, R9708 += 1 };
  s2 -> s3 [0, 65535] { R9754 += 1, R9708 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R9754 += 1, R9708 += 1 };
  s2 -> s1 [59, 65535] { R9754 += 1, R9708 += 1 };
  s3 -> s1 [0, 57] { R9754 += 1, R9708 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9754 += 1, R9708 += 1, R10 += 1 };
  s3 -> s6 [0, 65535] { R9754 += 1 };
  s3 -> s4 [58, 58] { R9754 += 1, R9708 += 1 };
  s3 -> s1 [59, 65535] { R9754 += 1, R9708 += 1 };
  s4 -> s4 [0, 65535] { R9754 += 1, R9708 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9754 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R9756 += 1, R9710 += 1 };
  s0 -> s0 [0, 65535] { R9755 += 1, R9756 += 1 };
  s0 -> s2 [0, 65535] { R9756 += 1, R9709 += 1, R9710 += 1 };
  s0 -> s3 [0, 65535] { R9756 += 1, R9710 += 1, R11 += 1 };
  s0 -> s4 [88, 88] { R9756 += 1, R9710 += 1 };
  s0 -> s1 [89, 65535] { R9756 += 1, R9710 += 1 };
  s1 -> s1 [0, 87] { R9756 += 1, R9710 += 1 };
  s1 -> s1 [0, 65535] { R9756 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [88, 88] { R9756 += 1, R9710 += 1 };
  s1 -> s1 [89, 65535] { R9756 += 1, R9710 += 1 };
  s2 -> s1 [0, 87] { R9756 += 1, R9710 += 1 };
  s2 -> s2 [0, 65535] { R9756 += 1, R9709 += 1, R9710 += 1 };
  s2 -> s3 [0, 65535] { R9756 += 1, R9710 += 1, R11 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [88, 88] { R9756 += 1, R9710 += 1 };
  s2 -> s1 [89, 65535] { R9756 += 1, R9710 += 1 };
  s3 -> s1 [0, 87] { R9756 += 1, R9710 += 1 };
  s3 -> s3 [0, 65535] { R9756 += 1, R9710 += 1, R11 += 1 };
  s3 -> s5 [0, 65535] { R9756 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [88, 88] { R9756 += 1, R9710 += 1 };
  s3 -> s1 [89, 65535] { R9756 += 1, R9710 += 1 };
  s4 -> s4 [0, 65535] { R9756 += 1, R9710 += 1 };
  s5 -> s5 [0, 65535] { R9756 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R9758 += 1, R9712 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R9757 += 1, R9758 += 1 };
  s0 -> s3 [0, 65535] { R9758 += 1, R9711 += 1, R9712 += 1 };
  s0 -> s4 [91, 91] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R9758 += 1 };
  s1 -> s1 [0, 65535] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R9758 += 1, R9712 += 1 };
  s2 -> s1 [0, 90] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R9758 += 1, R9712 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R9758 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R9758 += 1, R9712 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9758 += 1, R9711 += 1, R9712 += 1 };
  s3 -> s4 [91, 91] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R9758 += 1, R9712 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9758 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9758 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9758 += 1, R9712 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9760 += 1, R9714 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R9759 += 1, R9760 += 1 };
  s0 -> s2 [0, 65535] { R9760 += 1, R9714 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R9760 += 1, R9713 += 1, R9714 += 1 };
  s1 -> s1 [0, 65535] { R9760 += 1, R9714 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9760 += 1, R9714 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R9760 += 1 };
  s2 -> s5 [0, 65535] { R9760 += 1, R9714 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9760 += 1, R9714 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R9760 += 1 };
  s3 -> s1 [0, 65535] { R9760 += 1, R9714 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9760 += 1, R9714 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R9760 += 1, R9713 += 1, R9714 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9760 += 1, R9714 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R9760 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9760 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9762 += 1, R9716 += 1, R9680 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R9762 += 1, R9715 += 1, R9716 += 1 };
  s0 -> s0 [0, 65535] { R9761 += 1, R9762 += 1 };
  s0 -> s3 [0, 65535] { R9762 += 1, R9716 += 1, R9679 += 1, R9680 += 1 };
  s1 -> s6 [0, 65535] { R9762 += 1, R9716 += 1 };
  s1 -> s1 [0, 65535] { R9762 += 1, R9716 += 1, R9680 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535] { R9762 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9762 += 1, R9716 += 1, R9680 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R9762 += 1, R9715 += 1, R9716 += 1 };
  s2 -> s3 [0, 65535] { R9762 += 1, R9716 += 1, R9679 += 1, R9680 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R9762 += 1, R9716 += 1, R9680 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R9762 += 1, R9716 += 1, R9679 += 1, R9680 += 1 };
  s3 -> s4 [0, 65535] { R9762 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9762 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9762 += 1, R9716 += 1 };
  s6 -> s4 [0, 65535] { R9762 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R9763 += 1, R9764 += 1 };
  s0 -> s1 [0, 65535] { R9764 += 1, R9717 += 1, R9718 += 1 };
  s0 -> s2 [0, 65535] { R9764 += 1, R9718 += 1, R9681 += 1, R9682 += 1 };
  s0 -> s3 [108, 108] { R9764 += 1, R9718 += 1, R9682 += 1 };
  s1 -> s1 [0, 65535] { R9764 += 1, R9717 += 1, R9718 += 1 };
  s1 -> s2 [0, 65535] { R9764 += 1, R9718 += 1, R9681 += 1, R9682 += 1 };
  s1 -> s3 [108, 108] { R9764 += 1, R9718 += 1, R9682 += 1 };
  s2 -> s2 [0, 65535] { R9764 += 1, R9718 += 1, R9681 += 1, R9682 += 1 };
  s2 -> s3 [108, 108] { R9764 += 1, R9718 += 1, R9682 += 1 };
  s3 -> s4 [111, 111] { R9764 += 1, R9718 += 1, R9682 += 1 };
  s4 -> s5 [99, 99] { R9764 += 1, R9718 += 1, R9682 += 1 };
  s5 -> s6 [97, 97] { R9764 += 1, R9718 += 1, R9682 += 1 };
  s6 -> s6 [0, 65535] { R9764 += 1, R9718 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R9764 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9764 += 1 };
  accepting s6, s7, s8;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s0 -> s2 [0, 65535] { R9766 += 1, R9719 += 1, R9720 += 1 };
  s0 -> s3 [0, 65535] { R9766 += 1, R9720 += 1, R9687 += 1, R9688 += 1 };
  s0 -> s0 [0, 65535] { R9765 += 1, R9766 += 1 };
  s0 -> s4 [88, 88] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s0 -> s1 [89, 65535] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s1 -> s1 [0, 87] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s1 -> s4 [88, 88] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s1 -> s1 [89, 65535] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s2 -> s1 [0, 87] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s2 -> s2 [0, 65535] { R9766 += 1, R9719 += 1, R9720 += 1 };
  s2 -> s3 [0, 65535] { R9766 += 1, R9720 += 1, R9687 += 1, R9688 += 1 };
  s2 -> s4 [88, 88] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s2 -> s1 [89, 65535] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s3 -> s1 [0, 87] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s3 -> s3 [0, 65535] { R9766 += 1, R9720 += 1, R9687 += 1, R9688 += 1 };
  s3 -> s4 [88, 88] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s3 -> s1 [89, 65535] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9766 += 1, R9720 += 1 };
  s4 -> s4 [0, 65535] { R9766 += 1, R9720 += 1, R9688 += 1 };
  s4 -> s7 [0, 65535] { R9766 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9766 += 1, R9720 += 1 };
  s6 -> s7 [0, 65535] { R9766 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9766 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9768 += 1, R9722 += 1, R9690 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R9768 += 1, R9721 += 1, R9722 += 1 };
  s0 -> s0 [0, 65535] { R9767 += 1, R9768 += 1 };
  s0 -> s3 [0, 65535] { R9768 += 1, R9722 += 1, R9689 += 1, R9690 += 1 };
  s1 -> s1 [0, 65535] { R9768 += 1, R9722 += 1, R9690 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R9768 += 1, R9722 += 1 };
  s1 -> s4 [0, 65535] { R9768 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9768 += 1, R9722 += 1, R9690 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R9768 += 1, R9721 += 1, R9722 += 1 };
  s2 -> s3 [0, 65535] { R9768 += 1, R9722 += 1, R9689 += 1, R9690 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R9768 += 1, R9722 += 1, R9690 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R9768 += 1 };
  s3 -> s3 [0, 65535] { R9768 += 1, R9722 += 1, R9689 += 1, R9690 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9768 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9768 += 1, R9722 += 1 };
  s6 -> s4 [0, 65535] { R9768 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s0 -> s0 [0, 65535] { R9769 += 1, R9770 += 1 };
  s0 -> s2 [0, 65535] { R9770 += 1, R9724 += 1, R9692 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R9770 += 1, R9724 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s4 [0, 65535] { R9770 += 1, R9723 += 1, R9724 += 1 };
  s0 -> s5 [88, 88] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s0 -> s1 [89, 65535] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s1 -> s1 [0, 87] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s1 -> s7 [0, 65535] { R9770 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9770 += 1, R9724 += 1 };
  s1 -> s5 [88, 88] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s1 -> s1 [89, 65535] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s2 -> s1 [0, 87] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s2 -> s7 [0, 65535] { R9770 += 1 };
  s2 -> s8 [0, 65535] { R9770 += 1, R9724 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9770 += 1, R9724 += 1, R9692 += 1, R7 += 1 };
  s2 -> s5 [88, 88] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s2 -> s1 [89, 65535] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s3 -> s1 [0, 87] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s3 -> s7 [0, 65535] { R9770 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R9770 += 1, R9724 += 1, R9692 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R9770 += 1, R9724 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s5 [88, 88] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s3 -> s1 [89, 65535] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s4 -> s1 [0, 87] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R9770 += 1, R9724 += 1, R9692 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R9770 += 1, R9724 += 1, R9691 += 1, R9692 += 1 };
  s4 -> s4 [0, 65535] { R9770 += 1, R9723 += 1, R9724 += 1 };
  s4 -> s5 [88, 88] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s4 -> s1 [89, 65535] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s5 -> s5 [0, 65535] { R9770 += 1, R9724 += 1, R9692 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9770 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9770 += 1 };
  s8 -> s8 [0, 65535] { R9770 += 1, R9724 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s0 -> s0 [0, 65535] { R9771 += 1, R9772 += 1 };
  s0 -> s2 [0, 65535] { R9772 += 1, R9726 += 1, R9694 += 1, R9675 += 1, R9676 += 1 };
  s0 -> s3 [0, 65535] { R9772 += 1, R9726 += 1, R9693 += 1, R9694 += 1 };
  s0 -> s4 [0, 65535] { R9772 += 1, R9725 += 1, R9726 += 1 };
  s0 -> s1 [89, 65535] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s1 -> s1 [0, 87] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s1 -> s6 [0, 65535] { R9772 += 1 };
  s1 -> s7 [0, 65535] { R9772 += 1, R9726 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9772 += 1, R9726 += 1, R9694 += 1 };
  s1 -> s1 [89, 65535] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s2 -> s1 [0, 87] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s2 -> s6 [0, 65535] { R9772 += 1 };
  s2 -> s2 [0, 65535] { R9772 += 1, R9726 += 1, R9694 += 1, R9675 += 1, R9676 += 1 };
  s2 -> s7 [0, 65535] { R9772 += 1, R9726 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [89, 65535] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s3 -> s1 [0, 87] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s3 -> s6 [0, 65535] { R9772 += 1 };
  s3 -> s2 [0, 65535] { R9772 += 1, R9726 += 1, R9694 += 1, R9675 += 1, R9676 += 1 };
  s3 -> s3 [0, 65535] { R9772 += 1, R9726 += 1, R9693 += 1, R9694 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [89, 65535] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s4 -> s1 [0, 87] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s4 -> s2 [0, 65535] { R9772 += 1, R9726 += 1, R9694 += 1, R9675 += 1, R9676 += 1 };
  s4 -> s3 [0, 65535] { R9772 += 1, R9726 += 1, R9693 += 1, R9694 += 1 };
  s4 -> s4 [0, 65535] { R9772 += 1, R9725 += 1, R9726 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [89, 65535] { R9772 += 1, R9726 += 1, R9694 += 1, R9676 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9772 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9772 += 1 };
  s7 -> s7 [0, 65535] { R9772 += 1, R9726 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R9773 += 1, R9774 += 1 };
  s0 -> s1 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1, R9678 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R9774 += 1, R9728 += 1, R9695 += 1, R9696 += 1 };
  s0 -> s3 [0, 65535] { R9774 += 1, R9727 += 1, R9728 += 1 };
  s0 -> s4 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1, R9677 += 1, R9678 += 1 };
  s1 -> s5 [0, 65535] { R9774 += 1 };
  s1 -> s1 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1, R9678 += 1, R5988 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1 };
  s1 -> s7 [0, 65535] { R9774 += 1, R9728 += 1 };
  s2 -> s5 [0, 65535] { R9774 += 1 };
  s2 -> s1 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1, R9678 += 1, R5988 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9774 += 1, R9728 += 1, R9695 += 1, R9696 += 1 };
  s2 -> s4 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1, R9677 += 1, R9678 += 1 };
  s3 -> s1 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1, R9678 += 1, R5988 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R9774 += 1, R9728 += 1, R9695 += 1, R9696 += 1 };
  s3 -> s3 [0, 65535] { R9774 += 1, R9727 += 1, R9728 += 1 };
  s3 -> s4 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1, R9677 += 1, R9678 += 1 };
  s4 -> s5 [0, 65535] { R9774 += 1 };
  s4 -> s1 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1, R9678 += 1, R5988 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9774 += 1, R9728 += 1 };
  s4 -> s4 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1, R9677 += 1, R9678 += 1 };
  s5 -> s5 [0, 65535] { R9774 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9774 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9774 += 1, R9728 += 1 };
  s8 -> s5 [0, 65535] { R9774 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9774 += 1, R9728 += 1, R9696 += 1 };
  s8 -> s7 [0, 65535] { R9774 += 1, R9728 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R9775 += 1, R9776 += 1 };
  s0 -> s1 [0, 65535] { R9776 += 1, R9730 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s2 [0, 65535] { R9776 += 1, R9730 += 1, R9698 += 1 };
  s0 -> s3 [0, 65535] { R9776 += 1, R9729 += 1, R9730 += 1 };
  s1 -> s5 [0, 65535] { R9776 += 1 };
  s1 -> s1 [0, 65535] { R9776 += 1, R9730 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s2 [0, 65535] { R9776 += 1, R9730 += 1, R9698 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9776 += 1 };
  s2 -> s2 [0, 65535] { R9776 += 1, R9730 += 1, R9698 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R9776 += 1, R9730 += 1 };
  s3 -> s1 [0, 65535] { R9776 += 1, R9730 += 1, R9697 += 1, R9698 += 1 };
  s3 -> s2 [0, 65535] { R9776 += 1, R9730 += 1, R9698 += 1 };
  s3 -> s3 [0, 65535] { R9776 += 1, R9729 += 1, R9730 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9776 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9776 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9776 += 1, R9730 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9778 += 1, R9732 += 1, R9699 += 1, R9700 += 1 };
  s0 -> s0 [0, 65535] { R9777 += 1, R9778 += 1 };
  s0 -> s2 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1, R9684 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R9778 += 1, R9731 += 1, R9732 += 1 };
  s0 -> s4 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1, R9683 += 1, R9684 += 1 };
  s1 -> s5 [0, 65535] { R9778 += 1 };
  s1 -> s1 [0, 65535] { R9778 += 1, R9732 += 1, R9699 += 1, R9700 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1, R9684 += 1, R5989 += 1 };
  s1 -> s4 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1, R9683 += 1, R9684 += 1 };
  s2 -> s8 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1 };
  s2 -> s5 [0, 65535] { R9778 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1, R9684 += 1, R5989 += 1 };
  s2 -> s7 [0, 65535] { R9778 += 1, R9732 += 1 };
  s3 -> s1 [0, 65535] { R9778 += 1, R9732 += 1, R9699 += 1, R9700 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1, R9684 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R9778 += 1, R9731 += 1, R9732 += 1 };
  s3 -> s4 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1, R9683 += 1, R9684 += 1 };
  s4 -> s5 [0, 65535] { R9778 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1, R9684 += 1, R5989 += 1 };
  s4 -> s7 [0, 65535] { R9778 += 1, R9732 += 1 };
  s4 -> s4 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1, R9683 += 1, R9684 += 1 };
  s5 -> s5 [0, 65535] { R9778 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9778 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9778 += 1, R9732 += 1 };
  s8 -> s8 [0, 65535] { R9778 += 1, R9732 += 1, R9700 += 1 };
  s8 -> s5 [0, 65535] { R9778 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9778 += 1, R9732 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9780 += 1, R9734 += 1, R9702 += 1, R9685 += 1, R9686 += 1 };
  s0 -> s2 [0, 65535] { R9780 += 1, R9734 += 1, R9701 += 1, R9702 += 1 };
  s0 -> s3 [0, 65535] { R9780 += 1, R9733 += 1, R9734 += 1 };
  s0 -> s0 [0, 65535] { R9779 += 1, R9780 += 1 };
  s0 -> s4 [108, 108] { R9780 += 1, R9734 += 1, R9702 += 1, R9686 += 1 };
  s1 -> s1 [0, 65535] { R9780 += 1, R9734 += 1, R9702 += 1, R9685 += 1, R9686 += 1 };
  s1 -> s4 [108, 108] { R9780 += 1, R9734 += 1, R9702 += 1, R9686 += 1 };
  s2 -> s1 [0, 65535] { R9780 += 1, R9734 += 1, R9702 += 1, R9685 += 1, R9686 += 1 };
  s2 -> s2 [0, 65535] { R9780 += 1, R9734 += 1, R9701 += 1, R9702 += 1 };
  s2 -> s4 [108, 108] { R9780 += 1, R9734 += 1, R9702 += 1, R9686 += 1 };
  s3 -> s1 [0, 65535] { R9780 += 1, R9734 += 1, R9702 += 1, R9685 += 1, R9686 += 1 };
  s3 -> s2 [0, 65535] { R9780 += 1, R9734 += 1, R9701 += 1, R9702 += 1 };
  s3 -> s3 [0, 65535] { R9780 += 1, R9733 += 1, R9734 += 1 };
  s3 -> s4 [108, 108] { R9780 += 1, R9734 += 1, R9702 += 1, R9686 += 1 };
  s4 -> s5 [104, 104] { R9780 += 1, R9734 += 1, R9702 += 1, R9686 += 1 };
  s5 -> s6 [111, 111] { R9780 += 1, R9734 += 1, R9702 += 1, R9686 += 1 };
  s6 -> s7 [115, 115] { R9780 += 1, R9734 += 1, R9702 += 1, R9686 += 1 };
  s7 -> s8 [116, 116] { R9780 += 1, R9734 += 1, R9702 += 1, R9686 += 1 };
  s8 -> s8 [0, 65535] { R9780 += 1, R9734 += 1, R9702 += 1 };
  s8 -> s9 [0, 65535] { R9780 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s11 [0, 65535] { R9780 += 1, R9734 += 1 };
  s9 -> s9 [0, 65535] { R9780 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s9 [0, 65535] { R9780 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R9780 += 1, R9734 += 1 };
  accepting s8, s9, s10, s11;
};
};
constraint R1 = 0 && R2 = R9702 && R3 = R9674 && R4 = R9780 && R15 = 0 && R16 = R9734 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R9667 - R9734 = 1 && R9668 = R9674 && R9669 - R9734 = 1 && R9670 = R9674 && R9671 - R9734 = 1 && R9672 = R9674 && R9673 - R9734 = 1 && R9681 = 0 && R9682 = 0 && R9685 = 0 && R9686 = 0 && R9687 = 0 && R9688 = R9702 && R9689 = 0 && R9690 = R9702 && R9691 = 0 && R9692 = R9702 && R9693 = 0 && R9694 = R9702 && R9695 = 0 && R9696 = R9702 && R9697 = 0 && R9698 = R9702 && R9699 = 0 && R9700 = R9702 && R9701 = 0 && R9703 = 0 && R9704 = R9734 && R9705 = 0 && R9706 = R9734 && R9707 = 0 && R9708 = R9734 && R9709 = 0 && R9710 = R9734 && R9711 = 0 && R9712 = R9734 && R9713 = 0 && R9714 = R9734 && R9715 = 0 && R9716 = R9734 && R9717 = 0 && R9718 = R9734 && R9719 = 0 && R9720 = R9734 && R9721 = 0 && R9722 = R9734 && R9723 = 0 && R9724 = R9734 && R9725 = 0 && R9726 = R9734 && R9727 = 0 && R9728 = R9734 && R9729 = 0 && R9730 = R9734 && R9731 = 0 && R9732 = R9734 && R9733 = 0 && R9735 = 10 && R9736 = R9780 && R9737 = 10 && R9738 = R9780 && R9739 = 10 && R9740 = R9780 && R9741 = 10 && R9742 = R9780 && R9743 = 10 && R9744 = R9780 && R9745 = 10 && R9746 = R9780 && R9747 = 10 && R9748 = R9780 && R9749 = 10 && R9750 = R9780 && R9751 = 10 && R9752 = R9780 && R9753 = 10 && R9754 = R9780 && R9755 = 10 && R9756 = R9780 && R9757 = 10 && R9758 = R9780 && R9759 = 10 && R9760 = R9780 && R9761 = 10 && R9762 = R9780 && R9763 = 10 && R9764 = R9780 && R9765 = 10 && R9766 = R9780 && R9767 = 10 && R9768 = R9780 && R9769 = 10 && R9770 = R9780 && R9771 = 10 && R9772 = R9780 && R9773 = 10 && R9774 = R9780 && R9775 = 10 && R9776 = R9780 && R9777 = 10 && R9778 = R9780 && R9779 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R9734 < R9674 && 0 < R9702 && -1 < R9734 && 9 < R9780 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R5988 = 0 || (R9675 = 0 && R9676 = 0)) && (R5988 = 0 || (R9677 = 0 && R9678 = 0)) && (R5989 = 0 || (R9683 = 0 && R9684 = 0)) && (R5990 = 0 || (R9679 = 0 && R9680 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
