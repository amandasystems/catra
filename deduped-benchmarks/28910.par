// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10863, R10864, R10865, R10866, R10867, R10868, R10869, R10870, R10871, R10872, R10873, R10874, R10875, R10876, R10877, R10878, R10879, R10880, R10881, R10882, R10883, R10884, R10885, R10886, R10887, R10888, R10889, R10890, R10891, R10892, R10893, R10894, R10895, R10896, R10897, R10898, R10899, R10900, R10901, R10902, R10903, R10904, R10905, R10906, R10907, R10908, R10909, R10910, R10911, R10912, R10913, R10914, R10915, R10916, R10917, R10918, R10919, R10920, R10921, R10922, R10923, R10924, R10925, R10926, R10927, R10928, R10929, R10930, R10931, R10932, R10933, R10934, R10935, R10936, R10937, R10938, R10939, R10940, R10941, R10942, R10943, R10944, R10945, R10946, R10947, R10948, R10949, R10950, R10951, R10952, R10953, R10954, R10955, R10956, R10957, R10958, R10959, R10960, R10961, R10962, R10963, R10964, R10965, R10966, R10967, R10968, R10969, R10970, R10971, R10972, R10973, R10974, R10975, R10976, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R10932 += 1 };
  s0 -> s0 [0, 65535] { R10931 += 1, R10932 += 1 };
  s0 -> s2 [46, 46] { R10932 += 1 };
  s0 -> s3 [47, 47] { R10932 += 1 };
  s0 -> s1 [48, 65535] { R10932 += 1 };
  s1 -> s1 [0, 45] { R10932 += 1 };
  s1 -> s2 [46, 46] { R10932 += 1 };
  s1 -> s3 [47, 47] { R10932 += 1 };
  s1 -> s1 [48, 65535] { R10932 += 1 };
  s2 -> s1 [0, 45] { R10932 += 1 };
  s2 -> s2 [46, 46] { R10932 += 1 };
  s2 -> s3 [47, 47] { R10932 += 1 };
  s2 -> s1 [48, 114] { R10932 += 1 };
  s2 -> s8 [115, 115] { R10932 += 1 };
  s2 -> s1 [116, 65535] { R10932 += 1 };
  s3 -> s3 [0, 45] { R10932 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R10932 += 1 };
  s3 -> s3 [47, 65535] { R10932 += 1 };
  s4 -> s3 [0, 45] { R10932 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R10932 += 1 };
  s4 -> s3 [47, 114] { R10932 += 1 };
  s4 -> s5 [115, 115] { R10932 += 1 };
  s4 -> s3 [116, 65535] { R10932 += 1 };
  s5 -> s3 [0, 45] { R10932 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R10932 += 1 };
  s5 -> s3 [47, 110] { R10932 += 1 };
  s5 -> s6 [111, 111] { R10932 += 1 };
  s5 -> s3 [112, 65535] { R10932 += 1 };
  s6 -> s3 [0, 45] { R10932 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R10932 += 1 };
  s6 -> s3 [47, 98] { R10932 += 1 };
  s6 -> s7 [99, 99] { R10932 += 1 };
  s6 -> s3 [100, 65535] { R10932 += 1 };
  s7 -> s3 [0, 45] { R10932 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R10932 += 1 };
  s7 -> s3 [47, 106] { R10932 += 1 };
  s7 -> s3 [108, 65535] { R10932 += 1 };
  s8 -> s1 [0, 45] { R10932 += 1 };
  s8 -> s2 [46, 46] { R10932 += 1 };
  s8 -> s3 [47, 47] { R10932 += 1 };
  s8 -> s1 [48, 110] { R10932 += 1 };
  s8 -> s9 [111, 111] { R10932 += 1 };
  s8 -> s1 [112, 65535] { R10932 += 1 };
  s9 -> s1 [0, 45] { R10932 += 1 };
  s9 -> s2 [46, 46] { R10932 += 1 };
  s9 -> s3 [47, 47] { R10932 += 1 };
  s9 -> s1 [48, 98] { R10932 += 1 };
  s9 -> s10 [99, 99] { R10932 += 1 };
  s9 -> s1 [100, 65535] { R10932 += 1 };
  s10 -> s1 [0, 45] { R10932 += 1 };
  s10 -> s2 [46, 46] { R10932 += 1 };
  s10 -> s3 [47, 47] { R10932 += 1 };
  s10 -> s1 [48, 106] { R10932 += 1 };
  s10 -> s1 [108, 65535] { R10932 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10933 += 1, R10934 += 1 };
  s0 -> s1 [0, 65535] { R10934 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R10934 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R10936 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R10936 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10935 += 1, R10936 += 1 };
  s0 -> s3 [47, 47] { R10936 += 1 };
  s0 -> s1 [48, 65535] { R10936 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R10936 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R10936 += 1 };
  s1 -> s1 [48, 65535] { R10936 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R10936 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R10936 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R10936 += 1 };
  s2 -> s1 [48, 65535] { R10936 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10936 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R10938 += 1, R10864 += 1 };
  s0 -> s2 [0, 65535] { R10938 += 1, R10863 += 1, R10864 += 1 };
  s0 -> s0 [0, 65535] { R10937 += 1, R10938 += 1 };
  s0 -> s1 [38, 42] { R10938 += 1, R10864 += 1 };
  s0 -> s1 [44, 45] { R10938 += 1, R10864 += 1 };
  s0 -> s1 [47, 62] { R10938 += 1, R10864 += 1 };
  s0 -> s1 [64, 65535] { R10938 += 1, R10864 += 1 };
  s1 -> s1 [0, 36] { R10938 += 1, R10864 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10938 += 1 };
  s1 -> s1 [38, 42] { R10938 += 1, R10864 += 1 };
  s1 -> s1 [44, 45] { R10938 += 1, R10864 += 1 };
  s1 -> s1 [47, 62] { R10938 += 1, R10864 += 1 };
  s1 -> s1 [64, 65535] { R10938 += 1, R10864 += 1 };
  s2 -> s1 [0, 36] { R10938 += 1, R10864 += 1 };
  s2 -> s2 [0, 65535] { R10938 += 1, R10863 += 1, R10864 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R10938 += 1, R10864 += 1 };
  s2 -> s1 [44, 45] { R10938 += 1, R10864 += 1 };
  s2 -> s1 [47, 62] { R10938 += 1, R10864 += 1 };
  s2 -> s1 [64, 65535] { R10938 += 1, R10864 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R10940 += 1, R10865 += 1, R10866 += 1 };
  s0 -> s0 [0, 65535] { R10939 += 1, R10940 += 1 };
  s0 -> s2 [0, 65535] { R10940 += 1, R10866 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R10940 += 1, R10865 += 1, R10866 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10940 += 1, R10866 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R10940 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10940 += 1, R10866 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R10940 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R10942 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R10942 += 1, R10867 += 1, R10868 += 1 };
  s0 -> s0 [0, 65535] { R10941 += 1, R10942 += 1 };
  s0 -> s4 [63, 63] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R10942 += 1, R10868 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10942 += 1 };
  s2 -> s1 [0, 62] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R10942 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10942 += 1 };
  s2 -> s4 [63, 63] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R10942 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R10942 += 1, R10867 += 1, R10868 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R10942 += 1, R10868 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10942 += 1 };
  s7 -> s7 [0, 65535] { R10942 += 1, R10868 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10942 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10944 += 1, R10869 += 1, R10870 += 1 };
  s0 -> s2 [0, 65535] { R10944 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R10944 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R10943 += 1, R10944 += 1 };
  s1 -> s1 [0, 65535] { R10944 += 1, R10869 += 1, R10870 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10944 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s3 [0, 65535] { R10944 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10944 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535] { R10944 += 1 };
  s2 -> s3 [0, 65535] { R10944 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10944 += 1 };
  s3 -> s6 [0, 65535] { R10944 += 1, R10870 += 1 };
  s3 -> s3 [0, 65535] { R10944 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10944 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10944 += 1 };
  s6 -> s6 [0, 65535] { R10944 += 1, R10870 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R10946 += 1, R10900 += 1 };
  s0 -> s2 [0, 65535] { R10946 += 1, R10899 += 1, R10900 += 1 };
  s0 -> s0 [0, 65535] { R10945 += 1, R10946 += 1 };
  s0 -> s1 [45, 63] { R10946 += 1, R10900 += 1 };
  s0 -> s3 [88, 88] { R10946 += 1, R10900 += 1 };
  s0 -> s1 [89, 65535] { R10946 += 1, R10900 += 1 };
  s1 -> s1 [0, 43] { R10946 += 1, R10900 += 1 };
  s1 -> s1 [45, 63] { R10946 += 1, R10900 += 1 };
  s1 -> s3 [88, 88] { R10946 += 1, R10900 += 1 };
  s1 -> s1 [89, 65535] { R10946 += 1, R10900 += 1 };
  s2 -> s1 [0, 43] { R10946 += 1, R10900 += 1 };
  s2 -> s2 [0, 65535] { R10946 += 1, R10899 += 1, R10900 += 1 };
  s2 -> s1 [45, 63] { R10946 += 1, R10900 += 1 };
  s2 -> s3 [88, 88] { R10946 += 1, R10900 += 1 };
  s2 -> s1 [89, 65535] { R10946 += 1, R10900 += 1 };
  s3 -> s3 [0, 43] { R10946 += 1, R10900 += 1 };
  s3 -> s3 [0, 65535] { R10946 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R10946 += 1, R10900 += 1 };
  s3 -> s3 [88, 65535] { R10946 += 1, R10900 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R10947 += 1, R10948 += 1 };
  s0 -> s1 [0, 65535] { R10948 += 1, R10901 += 1, R10902 += 1 };
  s0 -> s2 [0, 65535] { R10948 += 1, R10902 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10948 += 1, R10901 += 1, R10902 += 1 };
  s1 -> s2 [0, 65535] { R10948 += 1, R10902 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10948 += 1 };
  s2 -> s2 [0, 65535] { R10948 += 1, R10902 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10948 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R10950 += 1, R10904 += 1 };
  s0 -> s2 [0, 65535] { R10950 += 1, R10904 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R10950 += 1, R10903 += 1, R10904 += 1 };
  s0 -> s0 [0, 65535] { R10949 += 1, R10950 += 1 };
  s0 -> s4 [58, 58] { R10950 += 1, R10904 += 1 };
  s0 -> s1 [59, 65535] { R10950 += 1, R10904 += 1 };
  s1 -> s1 [0, 57] { R10950 += 1, R10904 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10950 += 1 };
  s1 -> s4 [58, 58] { R10950 += 1, R10904 += 1 };
  s1 -> s1 [59, 65535] { R10950 += 1, R10904 += 1 };
  s2 -> s1 [0, 57] { R10950 += 1, R10904 += 1 };
  s2 -> s2 [0, 65535] { R10950 += 1, R10904 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R10950 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R10950 += 1, R10904 += 1 };
  s2 -> s1 [59, 65535] { R10950 += 1, R10904 += 1 };
  s3 -> s1 [0, 57] { R10950 += 1, R10904 += 1 };
  s3 -> s2 [0, 65535] { R10950 += 1, R10904 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R10950 += 1, R10903 += 1, R10904 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R10950 += 1, R10904 += 1 };
  s3 -> s1 [59, 65535] { R10950 += 1, R10904 += 1 };
  s4 -> s4 [0, 65535] { R10950 += 1, R10904 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10950 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R10952 += 1, R10906 += 1 };
  s0 -> s2 [0, 65535] { R10952 += 1, R10905 += 1, R10906 += 1 };
  s0 -> s3 [0, 65535] { R10952 += 1, R10906 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R10951 += 1, R10952 += 1 };
  s0 -> s4 [88, 88] { R10952 += 1, R10906 += 1 };
  s0 -> s1 [89, 65535] { R10952 += 1, R10906 += 1 };
  s1 -> s1 [0, 87] { R10952 += 1, R10906 += 1 };
  s1 -> s1 [0, 65535] { R10952 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [88, 88] { R10952 += 1, R10906 += 1 };
  s1 -> s1 [89, 65535] { R10952 += 1, R10906 += 1 };
  s2 -> s1 [0, 87] { R10952 += 1, R10906 += 1 };
  s2 -> s2 [0, 65535] { R10952 += 1, R10905 += 1, R10906 += 1 };
  s2 -> s3 [0, 65535] { R10952 += 1, R10906 += 1, R11 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [88, 88] { R10952 += 1, R10906 += 1 };
  s2 -> s1 [89, 65535] { R10952 += 1, R10906 += 1 };
  s3 -> s1 [0, 87] { R10952 += 1, R10906 += 1 };
  s3 -> s5 [0, 65535] { R10952 += 1 };
  s3 -> s3 [0, 65535] { R10952 += 1, R10906 += 1, R11 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [88, 88] { R10952 += 1, R10906 += 1 };
  s3 -> s1 [89, 65535] { R10952 += 1, R10906 += 1 };
  s4 -> s4 [0, 65535] { R10952 += 1, R10906 += 1 };
  s5 -> s5 [0, 65535] { R10952 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R10954 += 1, R10907 += 1, R10908 += 1 };
  s0 -> s0 [0, 65535] { R10953 += 1, R10954 += 1 };
  s0 -> s3 [0, 65535] { R10954 += 1, R10908 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R10954 += 1, R10908 += 1 };
  s1 -> s1 [0, 65535] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535] { R10954 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R10954 += 1, R10907 += 1, R10908 += 1 };
  s2 -> s3 [0, 65535] { R10954 += 1, R10908 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R10954 += 1 };
  s3 -> s3 [0, 65535] { R10954 += 1, R10908 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R10954 += 1, R10908 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R10954 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10954 += 1, R10908 += 1 };
  s7 -> s5 [0, 65535] { R10954 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10956 += 1, R10910 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R10955 += 1, R10956 += 1 };
  s0 -> s2 [0, 65535] { R10956 += 1, R10910 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R10956 += 1, R10909 += 1, R10910 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10956 += 1, R10910 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s2 [0, 65535] { R10956 += 1, R10910 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R10956 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10956 += 1, R10910 += 1 };
  s2 -> s2 [0, 65535] { R10956 += 1, R10910 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R10956 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10956 += 1, R10910 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R10956 += 1, R10910 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R10956 += 1, R10909 += 1, R10910 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10956 += 1, R10910 += 1 };
  s5 -> s6 [0, 65535] { R10956 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10956 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10958 += 1, R10911 += 1, R10912 += 1 };
  s0 -> s0 [0, 65535] { R10957 += 1, R10958 += 1 };
  s0 -> s2 [0, 65535] { R10958 += 1, R10912 += 1, R10875 += 1, R10876 += 1 };
  s0 -> s3 [0, 65535] { R10958 += 1, R10912 += 1, R10876 += 1, R5990 += 1 };
  s1 -> s1 [0, 65535] { R10958 += 1, R10911 += 1, R10912 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R10958 += 1, R10912 += 1, R10875 += 1, R10876 += 1 };
  s1 -> s3 [0, 65535] { R10958 += 1, R10912 += 1, R10876 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535] { R10958 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10958 += 1, R10912 += 1, R10875 += 1, R10876 += 1 };
  s2 -> s3 [0, 65535] { R10958 += 1, R10912 += 1, R10876 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R10958 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10958 += 1, R10912 += 1 };
  s3 -> s3 [0, 65535] { R10958 += 1, R10912 += 1, R10876 += 1, R5990 += 1 };
  s4 -> s4 [0, 65535] { R10958 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10958 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10958 += 1, R10912 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R10959 += 1, R10960 += 1 };
  s0 -> s1 [0, 65535] { R10960 += 1, R10914 += 1, R10877 += 1, R10878 += 1 };
  s0 -> s2 [0, 65535] { R10960 += 1, R10913 += 1, R10914 += 1 };
  s0 -> s3 [108, 108] { R10960 += 1, R10914 += 1, R10878 += 1 };
  s1 -> s1 [0, 65535] { R10960 += 1, R10914 += 1, R10877 += 1, R10878 += 1 };
  s1 -> s3 [108, 108] { R10960 += 1, R10914 += 1, R10878 += 1 };
  s2 -> s1 [0, 65535] { R10960 += 1, R10914 += 1, R10877 += 1, R10878 += 1 };
  s2 -> s2 [0, 65535] { R10960 += 1, R10913 += 1, R10914 += 1 };
  s2 -> s3 [108, 108] { R10960 += 1, R10914 += 1, R10878 += 1 };
  s3 -> s4 [111, 111] { R10960 += 1, R10914 += 1, R10878 += 1 };
  s4 -> s5 [99, 99] { R10960 += 1, R10914 += 1, R10878 += 1 };
  s5 -> s6 [97, 97] { R10960 += 1, R10914 += 1, R10878 += 1 };
  s6 -> s7 [108, 108] { R10960 += 1, R10914 += 1, R10878 += 1 };
  s7 -> s8 [104, 104] { R10960 += 1, R10914 += 1, R10878 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10960 += 1 };
  s8 -> s8 [0, 65535] { R10960 += 1, R10914 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10960 += 1 };
  accepting s8, s9, s10;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s0 -> s2 [0, 65535] { R10962 += 1, R10916 += 1, R10883 += 1, R10884 += 1 };
  s0 -> s3 [0, 65535] { R10962 += 1, R10915 += 1, R10916 += 1 };
  s0 -> s0 [0, 65535] { R10961 += 1, R10962 += 1 };
  s0 -> s4 [88, 88] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s0 -> s1 [89, 65535] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s1 -> s1 [0, 87] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s1 -> s4 [88, 88] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s1 -> s1 [89, 65535] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s2 -> s1 [0, 87] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s2 -> s2 [0, 65535] { R10962 += 1, R10916 += 1, R10883 += 1, R10884 += 1 };
  s2 -> s4 [88, 88] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s2 -> s1 [89, 65535] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s3 -> s1 [0, 87] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s3 -> s2 [0, 65535] { R10962 += 1, R10916 += 1, R10883 += 1, R10884 += 1 };
  s3 -> s3 [0, 65535] { R10962 += 1, R10915 += 1, R10916 += 1 };
  s3 -> s4 [88, 88] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s3 -> s1 [89, 65535] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s4 -> s4 [0, 65535] { R10962 += 1, R10916 += 1, R10884 += 1 };
  s4 -> s5 [0, 65535] { R10962 += 1, R10916 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10962 += 1 };
  s5 -> s5 [0, 65535] { R10962 += 1, R10916 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10962 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10962 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10964 += 1, R10918 += 1, R10886 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10963 += 1, R10964 += 1 };
  s0 -> s2 [0, 65535] { R10964 += 1, R10917 += 1, R10918 += 1 };
  s0 -> s3 [0, 65535] { R10964 += 1, R10918 += 1, R10885 += 1, R10886 += 1 };
  s1 -> s1 [0, 65535] { R10964 += 1, R10918 += 1, R10886 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R10964 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10964 += 1, R10918 += 1 };
  s2 -> s1 [0, 65535] { R10964 += 1, R10918 += 1, R10886 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R10964 += 1, R10917 += 1, R10918 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10964 += 1, R10918 += 1, R10885 += 1, R10886 += 1 };
  s3 -> s1 [0, 65535] { R10964 += 1, R10918 += 1, R10886 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R10964 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10964 += 1, R10918 += 1, R10885 += 1, R10886 += 1 };
  s4 -> s4 [0, 65535] { R10964 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10964 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10964 += 1, R10918 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s0 -> s2 [0, 65535] { R10966 += 1, R10920 += 1, R10888 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R10965 += 1, R10966 += 1 };
  s0 -> s3 [0, 65535] { R10966 += 1, R10920 += 1, R10887 += 1, R10888 += 1 };
  s0 -> s4 [0, 65535] { R10966 += 1, R10919 += 1, R10920 += 1 };
  s0 -> s5 [88, 88] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s0 -> s1 [89, 65535] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s1 -> s1 [0, 87] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s1 -> s1 [0, 65535] { R10966 += 1, R10920 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10966 += 1 };
  s1 -> s5 [88, 88] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s1 -> s1 [89, 65535] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s2 -> s1 [0, 87] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R10966 += 1, R10920 += 1 };
  s2 -> s2 [0, 65535] { R10966 += 1, R10920 += 1, R10888 += 1, R7 += 1 };
  s2 -> s7 [0, 65535] { R10966 += 1 };
  s2 -> s5 [88, 88] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s2 -> s1 [89, 65535] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s3 -> s1 [0, 87] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R10966 += 1, R10920 += 1, R10888 += 1, R7 += 1 };
  s3 -> s7 [0, 65535] { R10966 += 1 };
  s3 -> s3 [0, 65535] { R10966 += 1, R10920 += 1, R10887 += 1, R10888 += 1 };
  s3 -> s5 [88, 88] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s3 -> s1 [89, 65535] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s4 -> s1 [0, 87] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R10966 += 1, R10920 += 1, R10888 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R10966 += 1, R10920 += 1, R10887 += 1, R10888 += 1 };
  s4 -> s4 [0, 65535] { R10966 += 1, R10919 += 1, R10920 += 1 };
  s4 -> s5 [88, 88] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s4 -> s1 [89, 65535] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s5 -> s5 [0, 65535] { R10966 += 1, R10920 += 1, R10888 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10966 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10966 += 1, R10920 += 1 };
  s8 -> s7 [0, 65535] { R10966 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s0 -> s2 [0, 65535] { R10968 += 1, R10922 += 1, R10889 += 1, R10890 += 1 };
  s0 -> s0 [0, 65535] { R10967 += 1, R10968 += 1 };
  s0 -> s3 [0, 65535] { R10968 += 1, R10921 += 1, R10922 += 1 };
  s0 -> s4 [0, 65535] { R10968 += 1, R10922 += 1, R10890 += 1, R10871 += 1, R10872 += 1 };
  s0 -> s1 [89, 65535] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s1 -> s1 [0, 87] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10968 += 1, R10922 += 1 };
  s1 -> s1 [0, 65535] { R10968 += 1, R10922 += 1, R10890 += 1 };
  s1 -> s7 [0, 65535] { R10968 += 1 };
  s1 -> s1 [89, 65535] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s2 -> s1 [0, 87] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s2 -> s2 [0, 65535] { R10968 += 1, R10922 += 1, R10889 += 1, R10890 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R10968 += 1, R10922 += 1, R10890 += 1, R10871 += 1, R10872 += 1 };
  s2 -> s7 [0, 65535] { R10968 += 1 };
  s2 -> s1 [89, 65535] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s3 -> s1 [0, 87] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s3 -> s2 [0, 65535] { R10968 += 1, R10922 += 1, R10889 += 1, R10890 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10968 += 1, R10921 += 1, R10922 += 1 };
  s3 -> s4 [0, 65535] { R10968 += 1, R10922 += 1, R10890 += 1, R10871 += 1, R10872 += 1 };
  s3 -> s1 [89, 65535] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s4 -> s1 [0, 87] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10968 += 1, R10922 += 1 };
  s4 -> s4 [0, 65535] { R10968 += 1, R10922 += 1, R10890 += 1, R10871 += 1, R10872 += 1 };
  s4 -> s7 [0, 65535] { R10968 += 1 };
  s4 -> s1 [89, 65535] { R10968 += 1, R10922 += 1, R10890 += 1, R10872 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10968 += 1, R10922 += 1 };
  s6 -> s7 [0, 65535] { R10968 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10968 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10969 += 1, R10970 += 1 };
  s0 -> s1 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1, R10874 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1, R10873 += 1, R10874 += 1 };
  s0 -> s3 [0, 65535] { R10970 += 1, R10924 += 1, R10891 += 1, R10892 += 1 };
  s0 -> s4 [0, 65535] { R10970 += 1, R10923 += 1, R10924 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1, R10874 += 1, R5988 += 1 };
  s1 -> s6 [0, 65535] { R10970 += 1 };
  s1 -> s7 [0, 65535] { R10970 += 1, R10924 += 1 };
  s1 -> s8 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1, R10874 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1, R10873 += 1, R10874 += 1 };
  s2 -> s6 [0, 65535] { R10970 += 1 };
  s2 -> s7 [0, 65535] { R10970 += 1, R10924 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1, R10874 += 1, R5988 += 1 };
  s3 -> s2 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1, R10873 += 1, R10874 += 1 };
  s3 -> s6 [0, 65535] { R10970 += 1 };
  s3 -> s3 [0, 65535] { R10970 += 1, R10924 += 1, R10891 += 1, R10892 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1, R10874 += 1, R5988 += 1 };
  s4 -> s2 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1, R10873 += 1, R10874 += 1 };
  s4 -> s3 [0, 65535] { R10970 += 1, R10924 += 1, R10891 += 1, R10892 += 1 };
  s4 -> s4 [0, 65535] { R10970 += 1, R10923 += 1, R10924 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10970 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10970 += 1 };
  s7 -> s7 [0, 65535] { R10970 += 1, R10924 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10970 += 1 };
  s8 -> s7 [0, 65535] { R10970 += 1, R10924 += 1 };
  s8 -> s8 [0, 65535] { R10970 += 1, R10924 += 1, R10892 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10972 += 1, R10926 += 1, R10894 += 1 };
  s0 -> s2 [0, 65535] { R10972 += 1, R10926 += 1, R10893 += 1, R10894 += 1 };
  s0 -> s0 [0, 65535] { R10971 += 1, R10972 += 1 };
  s0 -> s3 [0, 65535] { R10972 += 1, R10925 += 1, R10926 += 1 };
  s1 -> s6 [0, 65535] { R10972 += 1, R10926 += 1 };
  s1 -> s1 [0, 65535] { R10972 += 1, R10926 += 1, R10894 += 1 };
  s1 -> s5 [0, 65535] { R10972 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10972 += 1, R10926 += 1, R10894 += 1 };
  s2 -> s5 [0, 65535] { R10972 += 1 };
  s2 -> s2 [0, 65535] { R10972 += 1, R10926 += 1, R10893 += 1, R10894 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10972 += 1, R10926 += 1, R10894 += 1 };
  s3 -> s2 [0, 65535] { R10972 += 1, R10926 += 1, R10893 += 1, R10894 += 1 };
  s3 -> s3 [0, 65535] { R10972 += 1, R10925 += 1, R10926 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10972 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10972 += 1, R10926 += 1 };
  s6 -> s5 [0, 65535] { R10972 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10974 += 1, R10927 += 1, R10928 += 1 };
  s0 -> s2 [0, 65535] { R10974 += 1, R10928 += 1, R10895 += 1, R10896 += 1 };
  s0 -> s0 [0, 65535] { R10973 += 1, R10974 += 1 };
  s0 -> s3 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1, R10880 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1, R10879 += 1, R10880 += 1 };
  s1 -> s1 [0, 65535] { R10974 += 1, R10927 += 1, R10928 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R10974 += 1, R10928 += 1, R10895 += 1, R10896 += 1 };
  s1 -> s3 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1, R10880 += 1, R5989 += 1 };
  s1 -> s4 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1, R10879 += 1, R10880 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10974 += 1, R10928 += 1, R10895 += 1, R10896 += 1 };
  s2 -> s6 [0, 65535] { R10974 += 1 };
  s2 -> s3 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1, R10880 += 1, R5989 += 1 };
  s2 -> s4 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1, R10879 += 1, R10880 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10974 += 1 };
  s3 -> s3 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1, R10880 += 1, R5989 += 1 };
  s3 -> s8 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1 };
  s3 -> s7 [0, 65535] { R10974 += 1, R10928 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10974 += 1 };
  s4 -> s3 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1, R10880 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1, R10879 += 1, R10880 += 1 };
  s4 -> s7 [0, 65535] { R10974 += 1, R10928 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10974 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10974 += 1 };
  s7 -> s7 [0, 65535] { R10974 += 1, R10928 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10974 += 1 };
  s8 -> s8 [0, 65535] { R10974 += 1, R10928 += 1, R10896 += 1 };
  s8 -> s7 [0, 65535] { R10974 += 1, R10928 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10976 += 1, R10929 += 1, R10930 += 1 };
  s0 -> s2 [0, 65535] { R10976 += 1, R10930 += 1, R10898 += 1, R10881 += 1, R10882 += 1 };
  s0 -> s0 [0, 65535] { R10975 += 1, R10976 += 1 };
  s0 -> s3 [0, 65535] { R10976 += 1, R10930 += 1, R10897 += 1, R10898 += 1 };
  s0 -> s4 [111, 111] { R10976 += 1, R10930 += 1, R10898 += 1, R10882 += 1 };
  s1 -> s1 [0, 65535] { R10976 += 1, R10929 += 1, R10930 += 1 };
  s1 -> s2 [0, 65535] { R10976 += 1, R10930 += 1, R10898 += 1, R10881 += 1, R10882 += 1 };
  s1 -> s3 [0, 65535] { R10976 += 1, R10930 += 1, R10897 += 1, R10898 += 1 };
  s1 -> s4 [111, 111] { R10976 += 1, R10930 += 1, R10898 += 1, R10882 += 1 };
  s2 -> s2 [0, 65535] { R10976 += 1, R10930 += 1, R10898 += 1, R10881 += 1, R10882 += 1 };
  s2 -> s4 [111, 111] { R10976 += 1, R10930 += 1, R10898 += 1, R10882 += 1 };
  s3 -> s2 [0, 65535] { R10976 += 1, R10930 += 1, R10898 += 1, R10881 += 1, R10882 += 1 };
  s3 -> s3 [0, 65535] { R10976 += 1, R10930 += 1, R10897 += 1, R10898 += 1 };
  s3 -> s4 [111, 111] { R10976 += 1, R10930 += 1, R10898 += 1, R10882 += 1 };
  s4 -> s5 [115, 115] { R10976 += 1, R10930 += 1, R10898 += 1, R10882 += 1 };
  s5 -> s6 [116, 116] { R10976 += 1, R10930 += 1, R10898 += 1, R10882 += 1 };
  s6 -> s6 [0, 65535] { R10976 += 1, R10930 += 1, R10898 += 1 };
  s6 -> s7 [0, 65535] { R10976 += 1, R10930 += 1 };
  s6 -> s8 [0, 65535] { R10976 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R10976 += 1, R10930 += 1 };
  s7 -> s8 [0, 65535] { R10976 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10976 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s6, s7, s8, s9;
};
};
constraint R1 = 0 && R2 = R10898 && R3 = R10870 && R4 = R10976 && R15 = 0 && R16 = R10930 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R10863 - R10930 = 1 && R10864 = R10870 && R10865 - R10930 = 1 && R10866 = R10870 && R10867 - R10930 = 1 && R10868 = R10870 && R10869 - R10930 = 1 && R10877 = 0 && R10878 = 0 && R10881 = 0 && R10882 = 0 && R10883 = 0 && R10884 = R10898 && R10885 = 0 && R10886 = R10898 && R10887 = 0 && R10888 = R10898 && R10889 = 0 && R10890 = R10898 && R10891 = 0 && R10892 = R10898 && R10893 = 0 && R10894 = R10898 && R10895 = 0 && R10896 = R10898 && R10897 = 0 && R10899 = 0 && R10900 = R10930 && R10901 = 0 && R10902 = R10930 && R10903 = 0 && R10904 = R10930 && R10905 = 0 && R10906 = R10930 && R10907 = 0 && R10908 = R10930 && R10909 = 0 && R10910 = R10930 && R10911 = 0 && R10912 = R10930 && R10913 = 0 && R10914 = R10930 && R10915 = 0 && R10916 = R10930 && R10917 = 0 && R10918 = R10930 && R10919 = 0 && R10920 = R10930 && R10921 = 0 && R10922 = R10930 && R10923 = 0 && R10924 = R10930 && R10925 = 0 && R10926 = R10930 && R10927 = 0 && R10928 = R10930 && R10929 = 0 && R10931 = 10 && R10932 = R10976 && R10933 = 10 && R10934 = R10976 && R10935 = 10 && R10936 = R10976 && R10937 = 10 && R10938 = R10976 && R10939 = 10 && R10940 = R10976 && R10941 = 10 && R10942 = R10976 && R10943 = 10 && R10944 = R10976 && R10945 = 10 && R10946 = R10976 && R10947 = 10 && R10948 = R10976 && R10949 = 10 && R10950 = R10976 && R10951 = 10 && R10952 = R10976 && R10953 = 10 && R10954 = R10976 && R10955 = 10 && R10956 = R10976 && R10957 = 10 && R10958 = R10976 && R10959 = 10 && R10960 = R10976 && R10961 = 10 && R10962 = R10976 && R10963 = 10 && R10964 = R10976 && R10965 = 10 && R10966 = R10976 && R10967 = 10 && R10968 = R10976 && R10969 = 10 && R10970 = R10976 && R10971 = 10 && R10972 = R10976 && R10973 = 10 && R10974 = R10976 && R10975 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R10930 < R10870 && 0 < R10898 && -1 < R10930 && 9 < R10976 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R5988 = 0 || (R10871 = 0 && R10872 = 0)) && (R5988 = 0 || (R10873 = 0 && R10874 = 0)) && (R5989 = 0 || (R10879 = 0 && R10880 = 0)) && (R5990 = 0 || (R10875 = 0 && R10876 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
