// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10757, R10758, R10759, R10760, R10761, R10762, R10763, R10764, R10765, R10766, R10767, R10768, R10769, R10770, R10771, R10772, R10773, R10774, R10775, R10776, R10777, R10778, R10779, R10780, R10781, R10782, R10783, R10784, R10785, R10786, R10787, R10788, R10789, R10790, R10791, R10792, R10793, R10794, R10795, R10796, R10797, R10798, R10799, R10800, R10801, R10802, R10803, R10804, R10805, R10806, R10807, R10808, R10809, R10810, R10811, R10812, R10813, R10814, R10815, R10816, R10817, R10818, R10819, R10820, R10821, R10822, R10823, R10824, R10825, R10826, R10827, R10828, R10829, R10830, R10831, R10832, R10833, R10834, R10835, R10836, R10837, R10838, R10839, R10840, R10841, R10842, R10843, R10844, R10845, R10846, R10847, R10848, R10849, R10850, R10851, R10852, R10853, R10854, R10855, R10856, R10857, R10858, R10859, R10860, R10861, R10862, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R10818 += 1 };
  s0 -> s0 [0, 65535] { R10817 += 1, R10818 += 1 };
  s0 -> s2 [46, 46] { R10818 += 1 };
  s0 -> s3 [47, 47] { R10818 += 1 };
  s0 -> s1 [48, 65535] { R10818 += 1 };
  s1 -> s1 [0, 45] { R10818 += 1 };
  s1 -> s2 [46, 46] { R10818 += 1 };
  s1 -> s3 [47, 47] { R10818 += 1 };
  s1 -> s1 [48, 65535] { R10818 += 1 };
  s2 -> s1 [0, 45] { R10818 += 1 };
  s2 -> s2 [46, 46] { R10818 += 1 };
  s2 -> s3 [47, 47] { R10818 += 1 };
  s2 -> s1 [48, 114] { R10818 += 1 };
  s2 -> s8 [115, 115] { R10818 += 1 };
  s2 -> s1 [116, 65535] { R10818 += 1 };
  s3 -> s3 [0, 45] { R10818 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R10818 += 1 };
  s3 -> s3 [47, 65535] { R10818 += 1 };
  s4 -> s3 [0, 45] { R10818 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R10818 += 1 };
  s4 -> s3 [47, 114] { R10818 += 1 };
  s4 -> s5 [115, 115] { R10818 += 1 };
  s4 -> s3 [116, 65535] { R10818 += 1 };
  s5 -> s3 [0, 45] { R10818 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R10818 += 1 };
  s5 -> s3 [47, 110] { R10818 += 1 };
  s5 -> s6 [111, 111] { R10818 += 1 };
  s5 -> s3 [112, 65535] { R10818 += 1 };
  s6 -> s3 [0, 45] { R10818 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R10818 += 1 };
  s6 -> s3 [47, 98] { R10818 += 1 };
  s6 -> s7 [99, 99] { R10818 += 1 };
  s6 -> s3 [100, 65535] { R10818 += 1 };
  s7 -> s3 [0, 45] { R10818 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R10818 += 1 };
  s7 -> s3 [47, 106] { R10818 += 1 };
  s7 -> s3 [108, 65535] { R10818 += 1 };
  s8 -> s1 [0, 45] { R10818 += 1 };
  s8 -> s2 [46, 46] { R10818 += 1 };
  s8 -> s3 [47, 47] { R10818 += 1 };
  s8 -> s1 [48, 110] { R10818 += 1 };
  s8 -> s9 [111, 111] { R10818 += 1 };
  s8 -> s1 [112, 65535] { R10818 += 1 };
  s9 -> s1 [0, 45] { R10818 += 1 };
  s9 -> s2 [46, 46] { R10818 += 1 };
  s9 -> s3 [47, 47] { R10818 += 1 };
  s9 -> s1 [48, 98] { R10818 += 1 };
  s9 -> s10 [99, 99] { R10818 += 1 };
  s9 -> s1 [100, 65535] { R10818 += 1 };
  s10 -> s1 [0, 45] { R10818 += 1 };
  s10 -> s2 [46, 46] { R10818 += 1 };
  s10 -> s3 [47, 47] { R10818 += 1 };
  s10 -> s1 [48, 106] { R10818 += 1 };
  s10 -> s1 [108, 65535] { R10818 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10819 += 1, R10820 += 1 };
  s0 -> s1 [0, 65535] { R10820 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10820 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R10822 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10821 += 1, R10822 += 1 };
  s0 -> s2 [0, 65535] { R10822 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R10822 += 1 };
  s0 -> s1 [48, 65535] { R10822 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R10822 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R10822 += 1 };
  s1 -> s1 [48, 65535] { R10822 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R10822 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R10822 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R10822 += 1 };
  s2 -> s1 [48, 65535] { R10822 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10822 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R10824 += 1, R10320 += 1 };
  s0 -> s0 [0, 65535] { R10823 += 1, R10824 += 1 };
  s0 -> s2 [0, 65535] { R10824 += 1, R10319 += 1, R10320 += 1 };
  s0 -> s1 [38, 42] { R10824 += 1, R10320 += 1 };
  s0 -> s1 [44, 45] { R10824 += 1, R10320 += 1 };
  s0 -> s1 [47, 62] { R10824 += 1, R10320 += 1 };
  s0 -> s1 [64, 65535] { R10824 += 1, R10320 += 1 };
  s1 -> s1 [0, 36] { R10824 += 1, R10320 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10824 += 1 };
  s1 -> s1 [38, 42] { R10824 += 1, R10320 += 1 };
  s1 -> s1 [44, 45] { R10824 += 1, R10320 += 1 };
  s1 -> s1 [47, 62] { R10824 += 1, R10320 += 1 };
  s1 -> s1 [64, 65535] { R10824 += 1, R10320 += 1 };
  s2 -> s1 [0, 36] { R10824 += 1, R10320 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10824 += 1, R10319 += 1, R10320 += 1 };
  s2 -> s1 [38, 42] { R10824 += 1, R10320 += 1 };
  s2 -> s1 [44, 45] { R10824 += 1, R10320 += 1 };
  s2 -> s1 [47, 62] { R10824 += 1, R10320 += 1 };
  s2 -> s1 [64, 65535] { R10824 += 1, R10320 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R10825 += 1, R10826 += 1 };
  s0 -> s1 [0, 65535] { R10826 += 1, R10322 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R10826 += 1, R10321 += 1, R10322 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10826 += 1, R10322 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R10826 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10826 += 1, R10322 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R10826 += 1, R10321 += 1, R10322 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10826 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R10827 += 1, R10828 += 1 };
  s0 -> s2 [0, 65535] { R10828 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R10828 += 1, R10323 += 1, R10324 += 1 };
  s0 -> s4 [63, 63] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R10828 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R10828 += 1, R10324 += 1 };
  s1 -> s1 [0, 65535] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R10828 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10828 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10828 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R10828 += 1, R10323 += 1, R10324 += 1 };
  s3 -> s4 [63, 63] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R10828 += 1, R10324 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10828 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10828 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10828 += 1, R10324 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10829 += 1, R10830 += 1 };
  s0 -> s1 [0, 65535] { R10830 += 1, R10325 += 1, R10326 += 1 };
  s0 -> s2 [0, 65535] { R10830 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R10830 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R10830 += 1, R10325 += 1, R10326 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10830 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R10830 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10830 += 1 };
  s2 -> s2 [0, 65535] { R10830 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R10830 += 1, R10326 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10830 += 1 };
  s3 -> s2 [0, 65535] { R10830 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R10830 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10830 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10830 += 1 };
  s6 -> s6 [0, 65535] { R10830 += 1, R10326 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R10832 += 1, R10786 += 1 };
  s0 -> s0 [0, 65535] { R10831 += 1, R10832 += 1 };
  s0 -> s2 [0, 65535] { R10832 += 1, R10785 += 1, R10786 += 1 };
  s0 -> s1 [45, 63] { R10832 += 1, R10786 += 1 };
  s0 -> s3 [88, 88] { R10832 += 1, R10786 += 1 };
  s0 -> s1 [89, 65535] { R10832 += 1, R10786 += 1 };
  s1 -> s1 [0, 43] { R10832 += 1, R10786 += 1 };
  s1 -> s1 [45, 63] { R10832 += 1, R10786 += 1 };
  s1 -> s3 [88, 88] { R10832 += 1, R10786 += 1 };
  s1 -> s1 [89, 65535] { R10832 += 1, R10786 += 1 };
  s2 -> s1 [0, 43] { R10832 += 1, R10786 += 1 };
  s2 -> s2 [0, 65535] { R10832 += 1, R10785 += 1, R10786 += 1 };
  s2 -> s1 [45, 63] { R10832 += 1, R10786 += 1 };
  s2 -> s3 [88, 88] { R10832 += 1, R10786 += 1 };
  s2 -> s1 [89, 65535] { R10832 += 1, R10786 += 1 };
  s3 -> s3 [0, 43] { R10832 += 1, R10786 += 1 };
  s3 -> s3 [0, 65535] { R10832 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R10832 += 1, R10786 += 1 };
  s3 -> s3 [88, 65535] { R10832 += 1, R10786 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R10833 += 1, R10834 += 1 };
  s0 -> s1 [0, 65535] { R10834 += 1, R10787 += 1, R10788 += 1 };
  s0 -> s2 [0, 65535] { R10834 += 1, R10788 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R10834 += 1, R10787 += 1, R10788 += 1 };
  s1 -> s2 [0, 65535] { R10834 += 1, R10788 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10834 += 1, R10788 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10834 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10834 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R10836 += 1, R10790 += 1 };
  s0 -> s0 [0, 65535] { R10835 += 1, R10836 += 1 };
  s0 -> s2 [0, 65535] { R10836 += 1, R10790 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R10836 += 1, R10789 += 1, R10790 += 1 };
  s0 -> s4 [58, 58] { R10836 += 1, R10790 += 1 };
  s0 -> s1 [59, 65535] { R10836 += 1, R10790 += 1 };
  s1 -> s1 [0, 57] { R10836 += 1, R10790 += 1 };
  s1 -> s1 [0, 65535] { R10836 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R10836 += 1, R10790 += 1 };
  s1 -> s1 [59, 65535] { R10836 += 1, R10790 += 1 };
  s2 -> s1 [0, 57] { R10836 += 1, R10790 += 1 };
  s2 -> s6 [0, 65535] { R10836 += 1 };
  s2 -> s2 [0, 65535] { R10836 += 1, R10790 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R10836 += 1, R10790 += 1 };
  s2 -> s1 [59, 65535] { R10836 += 1, R10790 += 1 };
  s3 -> s1 [0, 57] { R10836 += 1, R10790 += 1 };
  s3 -> s2 [0, 65535] { R10836 += 1, R10790 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10836 += 1, R10789 += 1, R10790 += 1 };
  s3 -> s4 [58, 58] { R10836 += 1, R10790 += 1 };
  s3 -> s1 [59, 65535] { R10836 += 1, R10790 += 1 };
  s4 -> s4 [0, 65535] { R10836 += 1, R10790 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10836 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R10838 += 1, R10792 += 1 };
  s0 -> s2 [0, 65535] { R10838 += 1, R10792 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R10838 += 1, R10791 += 1, R10792 += 1 };
  s0 -> s0 [0, 65535] { R10837 += 1, R10838 += 1 };
  s0 -> s4 [88, 88] { R10838 += 1, R10792 += 1 };
  s0 -> s1 [89, 65535] { R10838 += 1, R10792 += 1 };
  s1 -> s1 [0, 87] { R10838 += 1, R10792 += 1 };
  s1 -> s1 [0, 65535] { R10838 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R10838 += 1, R10792 += 1 };
  s1 -> s1 [89, 65535] { R10838 += 1, R10792 += 1 };
  s2 -> s1 [0, 87] { R10838 += 1, R10792 += 1 };
  s2 -> s2 [0, 65535] { R10838 += 1, R10792 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R10838 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R10838 += 1, R10792 += 1 };
  s2 -> s1 [89, 65535] { R10838 += 1, R10792 += 1 };
  s3 -> s1 [0, 87] { R10838 += 1, R10792 += 1 };
  s3 -> s2 [0, 65535] { R10838 += 1, R10792 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10838 += 1, R10791 += 1, R10792 += 1 };
  s3 -> s4 [88, 88] { R10838 += 1, R10792 += 1 };
  s3 -> s1 [89, 65535] { R10838 += 1, R10792 += 1 };
  s4 -> s4 [0, 65535] { R10838 += 1, R10792 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10838 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R10839 += 1, R10840 += 1 };
  s0 -> s2 [0, 65535] { R10840 += 1, R10793 += 1, R10794 += 1 };
  s0 -> s3 [0, 65535] { R10840 += 1, R10794 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R10840 += 1, R10794 += 1 };
  s1 -> s6 [0, 65535] { R10840 += 1 };
  s2 -> s1 [0, 90] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10840 += 1, R10793 += 1, R10794 += 1 };
  s2 -> s3 [0, 65535] { R10840 += 1, R10794 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10840 += 1 };
  s3 -> s3 [0, 65535] { R10840 += 1, R10794 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R10840 += 1, R10794 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10840 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10840 += 1, R10794 += 1 };
  s7 -> s6 [0, 65535] { R10840 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10842 += 1, R10795 += 1, R10796 += 1 };
  s0 -> s2 [0, 65535] { R10842 += 1, R10796 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R10842 += 1, R10796 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R10841 += 1, R10842 += 1 };
  s1 -> s1 [0, 65535] { R10842 += 1, R10795 += 1, R10796 += 1 };
  s1 -> s2 [0, 65535] { R10842 += 1, R10796 += 1, R5998 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R10842 += 1, R10796 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R10842 += 1 };
  s2 -> s6 [0, 65535] { R10842 += 1, R10796 += 1 };
  s2 -> s2 [0, 65535] { R10842 += 1, R10796 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10842 += 1 };
  s3 -> s2 [0, 65535] { R10842 += 1, R10796 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R10842 += 1, R10796 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10842 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10842 += 1 };
  s6 -> s6 [0, 65535] { R10842 += 1, R10796 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10844 += 1, R10797 += 1, R10798 += 1 };
  s0 -> s2 [0, 65535] { R10844 += 1, R10798 += 1, R10764 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R10844 += 1, R10798 += 1, R10763 += 1, R10764 += 1 };
  s0 -> s0 [0, 65535] { R10843 += 1, R10844 += 1 };
  s1 -> s1 [0, 65535] { R10844 += 1, R10797 += 1, R10798 += 1 };
  s1 -> s2 [0, 65535] { R10844 += 1, R10798 += 1, R10764 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R10844 += 1, R10798 += 1, R10763 += 1, R10764 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10844 += 1, R10798 += 1 };
  s2 -> s2 [0, 65535] { R10844 += 1, R10798 += 1, R10764 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10844 += 1 };
  s3 -> s2 [0, 65535] { R10844 += 1, R10798 += 1, R10764 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R10844 += 1, R10798 += 1, R10763 += 1, R10764 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10844 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10844 += 1 };
  s6 -> s6 [0, 65535] { R10844 += 1, R10798 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10844 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10846 += 1, R10800 += 1, R10765 += 1, R10766 += 1 };
  s0 -> s0 [0, 65535] { R10845 += 1, R10846 += 1 };
  s0 -> s2 [0, 65535] { R10846 += 1, R10799 += 1, R10800 += 1 };
  s0 -> s3 [108, 108] { R10846 += 1, R10800 += 1, R10766 += 1 };
  s1 -> s1 [0, 65535] { R10846 += 1, R10800 += 1, R10765 += 1, R10766 += 1 };
  s1 -> s3 [108, 108] { R10846 += 1, R10800 += 1, R10766 += 1 };
  s2 -> s1 [0, 65535] { R10846 += 1, R10800 += 1, R10765 += 1, R10766 += 1 };
  s2 -> s2 [0, 65535] { R10846 += 1, R10799 += 1, R10800 += 1 };
  s2 -> s3 [108, 108] { R10846 += 1, R10800 += 1, R10766 += 1 };
  s3 -> s4 [111, 111] { R10846 += 1, R10800 += 1, R10766 += 1 };
  s4 -> s5 [99, 99] { R10846 += 1, R10800 += 1, R10766 += 1 };
  s5 -> s6 [97, 97] { R10846 += 1, R10800 += 1, R10766 += 1 };
  s6 -> s7 [108, 108] { R10846 += 1, R10800 += 1, R10766 += 1 };
  s7 -> s7 [0, 65535] { R10846 += 1, R10800 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R10846 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10846 += 1 };
  accepting s7, s8, s9;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s0 -> s2 [0, 65535] { R10848 += 1, R10802 += 1, R10769 += 1, R10770 += 1 };
  s0 -> s3 [0, 65535] { R10848 += 1, R10801 += 1, R10802 += 1 };
  s0 -> s0 [0, 65535] { R10847 += 1, R10848 += 1 };
  s0 -> s4 [88, 88] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s0 -> s1 [89, 65535] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s1 -> s1 [0, 87] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s1 -> s4 [88, 88] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s1 -> s1 [89, 65535] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s2 -> s1 [0, 87] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s2 -> s2 [0, 65535] { R10848 += 1, R10802 += 1, R10769 += 1, R10770 += 1 };
  s2 -> s4 [88, 88] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s2 -> s1 [89, 65535] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s3 -> s1 [0, 87] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s3 -> s2 [0, 65535] { R10848 += 1, R10802 += 1, R10769 += 1, R10770 += 1 };
  s3 -> s3 [0, 65535] { R10848 += 1, R10801 += 1, R10802 += 1 };
  s3 -> s4 [88, 88] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s3 -> s1 [89, 65535] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s4 -> s5 [0, 65535] { R10848 += 1, R10802 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10848 += 1, R10802 += 1, R10770 += 1 };
  s4 -> s7 [0, 65535] { R10848 += 1 };
  s5 -> s5 [0, 65535] { R10848 += 1, R10802 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10848 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10848 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10850 += 1, R10804 += 1, R10771 += 1, R10772 += 1 };
  s0 -> s2 [0, 65535] { R10850 += 1, R10803 += 1, R10804 += 1 };
  s0 -> s3 [0, 65535] { R10850 += 1, R10804 += 1, R10772 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10849 += 1, R10850 += 1 };
  s1 -> s1 [0, 65535] { R10850 += 1, R10804 += 1, R10771 += 1, R10772 += 1 };
  s1 -> s3 [0, 65535] { R10850 += 1, R10804 += 1, R10772 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10850 += 1 };
  s2 -> s1 [0, 65535] { R10850 += 1, R10804 += 1, R10771 += 1, R10772 += 1 };
  s2 -> s2 [0, 65535] { R10850 += 1, R10803 += 1, R10804 += 1 };
  s2 -> s3 [0, 65535] { R10850 += 1, R10804 += 1, R10772 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10850 += 1, R10804 += 1, R10772 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10850 += 1, R10804 += 1 };
  s3 -> s6 [0, 65535] { R10850 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10850 += 1, R10804 += 1 };
  s5 -> s6 [0, 65535] { R10850 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10850 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s0 -> s2 [0, 65535] { R10852 += 1, R10805 += 1, R10806 += 1 };
  s0 -> s3 [0, 65535] { R10852 += 1, R10806 += 1, R10774 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R10852 += 1, R10806 += 1, R10773 += 1, R10774 += 1 };
  s0 -> s0 [0, 65535] { R10851 += 1, R10852 += 1 };
  s0 -> s5 [88, 88] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s0 -> s1 [89, 65535] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s1 -> s1 [0, 87] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s1 -> s6 [0, 65535] { R10852 += 1 };
  s1 -> s1 [0, 65535] { R10852 += 1, R10806 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [88, 88] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s1 -> s1 [89, 65535] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s2 -> s1 [0, 87] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s2 -> s2 [0, 65535] { R10852 += 1, R10805 += 1, R10806 += 1 };
  s2 -> s3 [0, 65535] { R10852 += 1, R10806 += 1, R10774 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R10852 += 1, R10806 += 1, R10773 += 1, R10774 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [88, 88] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s2 -> s1 [89, 65535] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s3 -> s1 [0, 87] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s3 -> s3 [0, 65535] { R10852 += 1, R10806 += 1, R10774 += 1, R7 += 1 };
  s3 -> s6 [0, 65535] { R10852 += 1 };
  s3 -> s8 [0, 65535] { R10852 += 1, R10806 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [88, 88] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s3 -> s1 [89, 65535] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s4 -> s1 [0, 87] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s4 -> s3 [0, 65535] { R10852 += 1, R10806 += 1, R10774 += 1, R7 += 1 };
  s4 -> s6 [0, 65535] { R10852 += 1 };
  s4 -> s4 [0, 65535] { R10852 += 1, R10806 += 1, R10773 += 1, R10774 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s5 [88, 88] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s4 -> s1 [89, 65535] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s5 -> s5 [0, 65535] { R10852 += 1, R10806 += 1, R10774 += 1 };
  s6 -> s6 [0, 65535] { R10852 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10852 += 1 };
  s8 -> s8 [0, 65535] { R10852 += 1, R10806 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s0 -> s2 [0, 65535] { R10854 += 1, R10808 += 1, R10776 += 1, R10757 += 1, R10758 += 1 };
  s0 -> s0 [0, 65535] { R10853 += 1, R10854 += 1 };
  s0 -> s3 [0, 65535] { R10854 += 1, R10807 += 1, R10808 += 1 };
  s0 -> s4 [0, 65535] { R10854 += 1, R10808 += 1, R10775 += 1, R10776 += 1 };
  s0 -> s1 [89, 65535] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s1 -> s1 [0, 87] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s1 -> s5 [0, 65535] { R10854 += 1 };
  s1 -> s7 [0, 65535] { R10854 += 1, R10808 += 1 };
  s1 -> s1 [0, 65535] { R10854 += 1, R10808 += 1, R10776 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [89, 65535] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s2 -> s1 [0, 87] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s2 -> s5 [0, 65535] { R10854 += 1 };
  s2 -> s2 [0, 65535] { R10854 += 1, R10808 += 1, R10776 += 1, R10757 += 1, R10758 += 1 };
  s2 -> s7 [0, 65535] { R10854 += 1, R10808 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [89, 65535] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s3 -> s1 [0, 87] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s3 -> s2 [0, 65535] { R10854 += 1, R10808 += 1, R10776 += 1, R10757 += 1, R10758 += 1 };
  s3 -> s3 [0, 65535] { R10854 += 1, R10807 += 1, R10808 += 1 };
  s3 -> s4 [0, 65535] { R10854 += 1, R10808 += 1, R10775 += 1, R10776 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [89, 65535] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s4 -> s1 [0, 87] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s4 -> s5 [0, 65535] { R10854 += 1 };
  s4 -> s2 [0, 65535] { R10854 += 1, R10808 += 1, R10776 += 1, R10757 += 1, R10758 += 1 };
  s4 -> s4 [0, 65535] { R10854 += 1, R10808 += 1, R10775 += 1, R10776 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [89, 65535] { R10854 += 1, R10808 += 1, R10776 += 1, R10758 += 1 };
  s5 -> s5 [0, 65535] { R10854 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10854 += 1 };
  s7 -> s7 [0, 65535] { R10854 += 1, R10808 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1, R10759 += 1, R10760 += 1 };
  s0 -> s0 [0, 65535] { R10855 += 1, R10856 += 1 };
  s0 -> s2 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1, R10760 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R10856 += 1, R10810 += 1, R10777 += 1, R10778 += 1 };
  s0 -> s4 [0, 65535] { R10856 += 1, R10809 += 1, R10810 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1, R10759 += 1, R10760 += 1 };
  s1 -> s2 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1, R10760 += 1, R5988 += 1 };
  s1 -> s6 [0, 65535] { R10856 += 1 };
  s1 -> s8 [0, 65535] { R10856 += 1, R10810 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1 };
  s2 -> s2 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1, R10760 += 1, R5988 += 1 };
  s2 -> s6 [0, 65535] { R10856 += 1 };
  s2 -> s8 [0, 65535] { R10856 += 1, R10810 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1, R10759 += 1, R10760 += 1 };
  s3 -> s2 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1, R10760 += 1, R5988 += 1 };
  s3 -> s6 [0, 65535] { R10856 += 1 };
  s3 -> s3 [0, 65535] { R10856 += 1, R10810 += 1, R10777 += 1, R10778 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1, R10759 += 1, R10760 += 1 };
  s4 -> s2 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1, R10760 += 1, R5988 += 1 };
  s4 -> s3 [0, 65535] { R10856 += 1, R10810 += 1, R10777 += 1, R10778 += 1 };
  s4 -> s4 [0, 65535] { R10856 += 1, R10809 += 1, R10810 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10856 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10856 += 1, R10810 += 1, R10778 += 1 };
  s7 -> s6 [0, 65535] { R10856 += 1 };
  s7 -> s8 [0, 65535] { R10856 += 1, R10810 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10856 += 1 };
  s8 -> s8 [0, 65535] { R10856 += 1, R10810 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10858 += 1, R10812 += 1, R10780 += 1, R10761 += 1, R10762 += 1 };
  s0 -> s0 [0, 65535] { R10857 += 1, R10858 += 1 };
  s0 -> s2 [0, 65535] { R10858 += 1, R10811 += 1, R10812 += 1 };
  s0 -> s3 [0, 65535] { R10858 += 1, R10812 += 1, R10779 += 1, R10780 += 1 };
  s0 -> s4 [104, 104] { R10858 += 1, R10812 += 1, R10780 += 1, R10762 += 1 };
  s1 -> s1 [0, 65535] { R10858 += 1, R10812 += 1, R10780 += 1, R10761 += 1, R10762 += 1 };
  s1 -> s4 [104, 104] { R10858 += 1, R10812 += 1, R10780 += 1, R10762 += 1 };
  s2 -> s1 [0, 65535] { R10858 += 1, R10812 += 1, R10780 += 1, R10761 += 1, R10762 += 1 };
  s2 -> s2 [0, 65535] { R10858 += 1, R10811 += 1, R10812 += 1 };
  s2 -> s3 [0, 65535] { R10858 += 1, R10812 += 1, R10779 += 1, R10780 += 1 };
  s2 -> s4 [104, 104] { R10858 += 1, R10812 += 1, R10780 += 1, R10762 += 1 };
  s3 -> s1 [0, 65535] { R10858 += 1, R10812 += 1, R10780 += 1, R10761 += 1, R10762 += 1 };
  s3 -> s3 [0, 65535] { R10858 += 1, R10812 += 1, R10779 += 1, R10780 += 1 };
  s3 -> s4 [104, 104] { R10858 += 1, R10812 += 1, R10780 += 1, R10762 += 1 };
  s4 -> s5 [111, 111] { R10858 += 1, R10812 += 1, R10780 += 1, R10762 += 1 };
  s5 -> s6 [115, 115] { R10858 += 1, R10812 += 1, R10780 += 1, R10762 += 1 };
  s6 -> s7 [116, 116] { R10858 += 1, R10812 += 1, R10780 += 1, R10762 += 1 };
  s7 -> s8 [0, 65535] { R10858 += 1 };
  s7 -> s9 [0, 65535] { R10858 += 1, R10812 += 1 };
  s7 -> s10 [0, 65535];
  s7 -> s7 [0, 65535] { R10858 += 1, R10812 += 1, R10780 += 1 };
  s8 -> s8 [0, 65535] { R10858 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s8 [0, 65535] { R10858 += 1 };
  s9 -> s9 [0, 65535] { R10858 += 1, R10812 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s7, s8, s9, s10;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10860 += 1, R10813 += 1, R10814 += 1 };
  s0 -> s2 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1, R10768 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1, R10767 += 1, R10768 += 1 };
  s0 -> s0 [0, 65535] { R10859 += 1, R10860 += 1 };
  s0 -> s4 [0, 65535] { R10860 += 1, R10814 += 1, R10781 += 1, R10782 += 1 };
  s1 -> s1 [0, 65535] { R10860 += 1, R10813 += 1, R10814 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1, R10768 += 1, R5989 += 1 };
  s1 -> s3 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1, R10767 += 1, R10768 += 1 };
  s1 -> s4 [0, 65535] { R10860 += 1, R10814 += 1, R10781 += 1, R10782 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R10860 += 1, R10814 += 1 };
  s2 -> s8 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1 };
  s2 -> s2 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1, R10768 += 1, R5989 += 1 };
  s2 -> s6 [0, 65535] { R10860 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R10860 += 1, R10814 += 1 };
  s3 -> s2 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1, R10768 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1, R10767 += 1, R10768 += 1 };
  s3 -> s6 [0, 65535] { R10860 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1, R10768 += 1, R5989 += 1 };
  s4 -> s3 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1, R10767 += 1, R10768 += 1 };
  s4 -> s4 [0, 65535] { R10860 += 1, R10814 += 1, R10781 += 1, R10782 += 1 };
  s4 -> s6 [0, 65535] { R10860 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10860 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10860 += 1, R10814 += 1 };
  s7 -> s6 [0, 65535] { R10860 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R10860 += 1, R10814 += 1 };
  s8 -> s8 [0, 65535] { R10860 += 1, R10814 += 1, R10782 += 1 };
  s8 -> s6 [0, 65535] { R10860 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10862 += 1, R10815 += 1, R10816 += 1 };
  s0 -> s0 [0, 65535] { R10861 += 1, R10862 += 1 };
  s0 -> s2 [0, 65535] { R10862 += 1, R10816 += 1, R10784 += 1 };
  s0 -> s3 [0, 65535] { R10862 += 1, R10816 += 1, R10783 += 1, R10784 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10862 += 1, R10815 += 1, R10816 += 1 };
  s1 -> s2 [0, 65535] { R10862 += 1, R10816 += 1, R10784 += 1 };
  s1 -> s3 [0, 65535] { R10862 += 1, R10816 += 1, R10783 += 1, R10784 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10862 += 1, R10816 += 1 };
  s2 -> s5 [0, 65535] { R10862 += 1 };
  s2 -> s2 [0, 65535] { R10862 += 1, R10816 += 1, R10784 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10862 += 1 };
  s3 -> s2 [0, 65535] { R10862 += 1, R10816 += 1, R10784 += 1 };
  s3 -> s3 [0, 65535] { R10862 += 1, R10816 += 1, R10783 += 1, R10784 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10862 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10862 += 1, R10816 += 1 };
  s6 -> s5 [0, 65535] { R10862 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R10762 && R2 = R10784 && R3 = R10326 && R4 = R10862 && R15 = 0 && R16 = R10816 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R10319 - R10816 = 1 && R10320 = R10326 && R10321 - R10816 = 1 && R10322 = R10326 && R10323 - R10816 = 1 && R10324 = R10326 && R10325 - R10816 = 1 && R10761 = 0 && R10765 = 0 && R10766 = 0 && R10769 = 0 && R10770 = R10784 && R10771 = 0 && R10772 = R10784 && R10773 = 0 && R10774 = R10784 && R10775 = 0 && R10776 = R10784 && R10777 = 0 && R10778 = R10784 && R10779 = 0 && R10780 = R10784 && R10781 = 0 && R10782 = R10784 && R10783 = 0 && R10785 = 0 && R10786 = R10816 && R10787 = 0 && R10788 = R10816 && R10789 = 0 && R10790 = R10816 && R10791 = 0 && R10792 = R10816 && R10793 = 0 && R10794 = R10816 && R10795 = 0 && R10796 = R10816 && R10797 = 0 && R10798 = R10816 && R10799 = 0 && R10800 = R10816 && R10801 = 0 && R10802 = R10816 && R10803 = 0 && R10804 = R10816 && R10805 = 0 && R10806 = R10816 && R10807 = 0 && R10808 = R10816 && R10809 = 0 && R10810 = R10816 && R10811 = 0 && R10812 = R10816 && R10813 = 0 && R10814 = R10816 && R10815 = 0 && R10817 = 10 && R10818 = R10862 && R10819 = 10 && R10820 = R10862 && R10821 = 10 && R10822 = R10862 && R10823 = 10 && R10824 = R10862 && R10825 = 10 && R10826 = R10862 && R10827 = 10 && R10828 = R10862 && R10829 = 10 && R10830 = R10862 && R10831 = 10 && R10832 = R10862 && R10833 = 10 && R10834 = R10862 && R10835 = 10 && R10836 = R10862 && R10837 = 10 && R10838 = R10862 && R10839 = 10 && R10840 = R10862 && R10841 = 10 && R10842 = R10862 && R10843 = 10 && R10844 = R10862 && R10845 = 10 && R10846 = R10862 && R10847 = 10 && R10848 = R10862 && R10849 = 10 && R10850 = R10862 && R10851 = 10 && R10852 = R10862 && R10853 = 10 && R10854 = R10862 && R10855 = 10 && R10856 = R10862 && R10857 = 10 && R10858 = R10862 && R10859 = 10 && R10860 = R10862 && R10861 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R10816 < R10326 && -1 < R10762 && 0 < R10784 && -1 < R10816 && 9 < R10862 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R10757 != 0 || R10758 = R10762 || (R5988 = 0 && R10762 = 0)) && (R10759 != 0 || R10760 = R10762 || (R5988 = 0 && R10762 = 0)) && (R5989 = 0 || (R10767 = 0 && R10768 = 0)) && (R5990 = 0 || (R10763 = 0 && R10764 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R10757 = 0 || (R5988 = 0 && R10762 = 0)) && (R10759 = 0 || (R5988 = 0 && R10762 = 0));
// End of Parikh automata intersection problem
