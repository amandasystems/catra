// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R7063, R7064, R7065, R7066, R7067, R7068, R7069, R7070, R7177, R7178, R7179, R7180, R7181, R7182, R7183, R7184, R7185, R7186, R7187, R7188, R7189, R7190, R7191, R7192, R7193, R7194, R7195, R7196, R7197, R7198, R7199, R7200, R7201, R7202, R7203, R7204, R7205, R7206, R7207, R7208, R7209, R7210, R7211, R7212, R7213, R7214, R7215, R7216, R7217, R7218, R7219, R7220, R7221, R7222, R7223, R7224, R7225, R7226, R7227, R7228, R7229, R7230, R7231, R7232, R7233, R7234, R7235, R7236, R7237, R7238, R7239, R7240, R7241, R7242, R7243, R7244, R7245, R7246, R7247, R7248, R7249, R7250, R7251, R7252, R7253, R7254, R7255, R7256, R7257, R7258, R7259, R7260, R7261, R7262, R7263, R7264, R7265, R7266, R7267, R7268, R7269, R7270, R7271, R7272, R7273, R7274, R7275, R7276, R7277, R7278, R7279, R7280, R7281, R7282, R7283, R7284;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R7240 += 1 };
  s0 -> s0 [0, 65535] { R7239 += 1, R7240 += 1 };
  s0 -> s2 [46, 46] { R7240 += 1 };
  s0 -> s3 [47, 47] { R7240 += 1 };
  s0 -> s1 [48, 65535] { R7240 += 1 };
  s1 -> s1 [0, 45] { R7240 += 1 };
  s1 -> s2 [46, 46] { R7240 += 1 };
  s1 -> s3 [47, 47] { R7240 += 1 };
  s1 -> s1 [48, 65535] { R7240 += 1 };
  s2 -> s1 [0, 45] { R7240 += 1 };
  s2 -> s2 [46, 46] { R7240 += 1 };
  s2 -> s3 [47, 47] { R7240 += 1 };
  s2 -> s1 [48, 114] { R7240 += 1 };
  s2 -> s8 [115, 115] { R7240 += 1 };
  s2 -> s1 [116, 65535] { R7240 += 1 };
  s3 -> s3 [0, 45] { R7240 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R7240 += 1 };
  s3 -> s3 [47, 65535] { R7240 += 1 };
  s4 -> s3 [0, 45] { R7240 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R7240 += 1 };
  s4 -> s3 [47, 114] { R7240 += 1 };
  s4 -> s5 [115, 115] { R7240 += 1 };
  s4 -> s3 [116, 65535] { R7240 += 1 };
  s5 -> s3 [0, 45] { R7240 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R7240 += 1 };
  s5 -> s3 [47, 110] { R7240 += 1 };
  s5 -> s6 [111, 111] { R7240 += 1 };
  s5 -> s3 [112, 65535] { R7240 += 1 };
  s6 -> s3 [0, 45] { R7240 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R7240 += 1 };
  s6 -> s3 [47, 98] { R7240 += 1 };
  s6 -> s7 [99, 99] { R7240 += 1 };
  s6 -> s3 [100, 65535] { R7240 += 1 };
  s7 -> s3 [0, 45] { R7240 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R7240 += 1 };
  s7 -> s3 [47, 106] { R7240 += 1 };
  s7 -> s3 [108, 65535] { R7240 += 1 };
  s8 -> s1 [0, 45] { R7240 += 1 };
  s8 -> s2 [46, 46] { R7240 += 1 };
  s8 -> s3 [47, 47] { R7240 += 1 };
  s8 -> s1 [48, 110] { R7240 += 1 };
  s8 -> s9 [111, 111] { R7240 += 1 };
  s8 -> s1 [112, 65535] { R7240 += 1 };
  s9 -> s1 [0, 45] { R7240 += 1 };
  s9 -> s2 [46, 46] { R7240 += 1 };
  s9 -> s3 [47, 47] { R7240 += 1 };
  s9 -> s1 [48, 98] { R7240 += 1 };
  s9 -> s10 [99, 99] { R7240 += 1 };
  s9 -> s1 [100, 65535] { R7240 += 1 };
  s10 -> s1 [0, 45] { R7240 += 1 };
  s10 -> s2 [46, 46] { R7240 += 1 };
  s10 -> s3 [47, 47] { R7240 += 1 };
  s10 -> s1 [48, 106] { R7240 += 1 };
  s10 -> s1 [108, 65535] { R7240 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R7242 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R7241 += 1, R7242 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7242 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R7244 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R7244 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R7243 += 1, R7244 += 1 };
  s0 -> s3 [47, 47] { R7244 += 1 };
  s0 -> s1 [48, 65535] { R7244 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R7244 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R7244 += 1 };
  s1 -> s1 [48, 65535] { R7244 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R7244 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R7244 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R7244 += 1 };
  s2 -> s1 [48, 65535] { R7244 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R7244 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R7246 += 1, R7064 += 1 };
  s0 -> s0 [0, 65535] { R7245 += 1, R7246 += 1 };
  s0 -> s2 [0, 65535] { R7246 += 1, R7063 += 1, R7064 += 1 };
  s0 -> s1 [38, 42] { R7246 += 1, R7064 += 1 };
  s0 -> s1 [44, 45] { R7246 += 1, R7064 += 1 };
  s0 -> s1 [47, 62] { R7246 += 1, R7064 += 1 };
  s0 -> s1 [64, 65535] { R7246 += 1, R7064 += 1 };
  s1 -> s1 [0, 36] { R7246 += 1, R7064 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7246 += 1 };
  s1 -> s1 [38, 42] { R7246 += 1, R7064 += 1 };
  s1 -> s1 [44, 45] { R7246 += 1, R7064 += 1 };
  s1 -> s1 [47, 62] { R7246 += 1, R7064 += 1 };
  s1 -> s1 [64, 65535] { R7246 += 1, R7064 += 1 };
  s2 -> s1 [0, 36] { R7246 += 1, R7064 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7246 += 1, R7063 += 1, R7064 += 1 };
  s2 -> s1 [38, 42] { R7246 += 1, R7064 += 1 };
  s2 -> s1 [44, 45] { R7246 += 1, R7064 += 1 };
  s2 -> s1 [47, 62] { R7246 += 1, R7064 += 1 };
  s2 -> s1 [64, 65535] { R7246 += 1, R7064 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R7247 += 1, R7248 += 1 };
  s0 -> s1 [0, 65535] { R7248 += 1, R7066 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R7248 += 1, R7065 += 1, R7066 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7248 += 1, R7066 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R7248 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7248 += 1, R7066 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R7248 += 1, R7065 += 1, R7066 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7248 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R7250 += 1, R7067 += 1, R7068 += 1 };
  s0 -> s3 [0, 65535] { R7250 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R7249 += 1, R7250 += 1 };
  s0 -> s4 [63, 63] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7250 += 1 };
  s1 -> s7 [0, 65535] { R7250 += 1, R7068 += 1 };
  s2 -> s1 [0, 62] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R7250 += 1, R7067 += 1, R7068 += 1 };
  s2 -> s3 [0, 65535] { R7250 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R7250 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7250 += 1 };
  s3 -> s4 [63, 63] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R7250 += 1, R7068 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7250 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7250 += 1 };
  s7 -> s7 [0, 65535] { R7250 += 1, R7068 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7252 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R7252 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R7251 += 1, R7252 += 1 };
  s0 -> s3 [0, 65535] { R7252 += 1, R7069 += 1, R7070 += 1 };
  s1 -> s1 [0, 65535] { R7252 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7252 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R7252 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7252 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R7252 += 1, R7070 += 1 };
  s2 -> s6 [0, 65535] { R7252 += 1 };
  s3 -> s1 [0, 65535] { R7252 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7252 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R7252 += 1, R7069 += 1, R7070 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7252 += 1, R7070 += 1 };
  s5 -> s6 [0, 65535] { R7252 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7252 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R7254 += 1, R7208 += 1 };
  s0 -> s2 [0, 65535] { R7254 += 1, R7207 += 1, R7208 += 1 };
  s0 -> s0 [0, 65535] { R7253 += 1, R7254 += 1 };
  s0 -> s1 [45, 63] { R7254 += 1, R7208 += 1 };
  s0 -> s3 [88, 88] { R7254 += 1, R7208 += 1 };
  s0 -> s1 [89, 65535] { R7254 += 1, R7208 += 1 };
  s1 -> s1 [0, 43] { R7254 += 1, R7208 += 1 };
  s1 -> s1 [45, 63] { R7254 += 1, R7208 += 1 };
  s1 -> s3 [88, 88] { R7254 += 1, R7208 += 1 };
  s1 -> s1 [89, 65535] { R7254 += 1, R7208 += 1 };
  s2 -> s1 [0, 43] { R7254 += 1, R7208 += 1 };
  s2 -> s2 [0, 65535] { R7254 += 1, R7207 += 1, R7208 += 1 };
  s2 -> s1 [45, 63] { R7254 += 1, R7208 += 1 };
  s2 -> s3 [88, 88] { R7254 += 1, R7208 += 1 };
  s2 -> s1 [89, 65535] { R7254 += 1, R7208 += 1 };
  s3 -> s3 [0, 43] { R7254 += 1, R7208 += 1 };
  s3 -> s3 [0, 65535] { R7254 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R7254 += 1, R7208 += 1 };
  s3 -> s3 [88, 65535] { R7254 += 1, R7208 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R7256 += 1, R7210 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R7255 += 1, R7256 += 1 };
  s0 -> s2 [0, 65535] { R7256 += 1, R7209 += 1, R7210 += 1 };
  s1 -> s4 [0, 65535] { R7256 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7256 += 1, R7210 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7256 += 1, R7210 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R7256 += 1, R7209 += 1, R7210 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7256 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R7258 += 1, R7212 += 1 };
  s0 -> s2 [0, 65535] { R7258 += 1, R7212 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R7258 += 1, R7211 += 1, R7212 += 1 };
  s0 -> s0 [0, 65535] { R7257 += 1, R7258 += 1 };
  s0 -> s4 [58, 58] { R7258 += 1, R7212 += 1 };
  s0 -> s1 [59, 65535] { R7258 += 1, R7212 += 1 };
  s1 -> s1 [0, 57] { R7258 += 1, R7212 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7258 += 1 };
  s1 -> s4 [58, 58] { R7258 += 1, R7212 += 1 };
  s1 -> s1 [59, 65535] { R7258 += 1, R7212 += 1 };
  s2 -> s1 [0, 57] { R7258 += 1, R7212 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7258 += 1, R7212 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R7258 += 1 };
  s2 -> s4 [58, 58] { R7258 += 1, R7212 += 1 };
  s2 -> s1 [59, 65535] { R7258 += 1, R7212 += 1 };
  s3 -> s1 [0, 57] { R7258 += 1, R7212 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7258 += 1, R7212 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R7258 += 1, R7211 += 1, R7212 += 1 };
  s3 -> s4 [58, 58] { R7258 += 1, R7212 += 1 };
  s3 -> s1 [59, 65535] { R7258 += 1, R7212 += 1 };
  s4 -> s4 [0, 65535] { R7258 += 1, R7212 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7258 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R7260 += 1, R7214 += 1 };
  s0 -> s2 [0, 65535] { R7260 += 1, R7214 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R7259 += 1, R7260 += 1 };
  s0 -> s3 [0, 65535] { R7260 += 1, R7213 += 1, R7214 += 1 };
  s0 -> s4 [88, 88] { R7260 += 1, R7214 += 1 };
  s0 -> s1 [89, 65535] { R7260 += 1, R7214 += 1 };
  s1 -> s1 [0, 87] { R7260 += 1, R7214 += 1 };
  s1 -> s1 [0, 65535] { R7260 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R7260 += 1, R7214 += 1 };
  s1 -> s1 [89, 65535] { R7260 += 1, R7214 += 1 };
  s2 -> s1 [0, 87] { R7260 += 1, R7214 += 1 };
  s2 -> s2 [0, 65535] { R7260 += 1, R7214 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7260 += 1 };
  s2 -> s4 [88, 88] { R7260 += 1, R7214 += 1 };
  s2 -> s1 [89, 65535] { R7260 += 1, R7214 += 1 };
  s3 -> s1 [0, 87] { R7260 += 1, R7214 += 1 };
  s3 -> s2 [0, 65535] { R7260 += 1, R7214 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7260 += 1, R7213 += 1, R7214 += 1 };
  s3 -> s4 [88, 88] { R7260 += 1, R7214 += 1 };
  s3 -> s1 [89, 65535] { R7260 += 1, R7214 += 1 };
  s4 -> s4 [0, 65535] { R7260 += 1, R7214 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7260 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R7261 += 1, R7262 += 1 };
  s0 -> s2 [0, 65535] { R7262 += 1, R7216 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R7262 += 1, R7215 += 1, R7216 += 1 };
  s0 -> s4 [91, 91] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R7262 += 1, R7216 += 1 };
  s1 -> s1 [0, 65535] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R7262 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 90] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R7262 += 1 };
  s2 -> s2 [0, 65535] { R7262 += 1, R7216 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R7262 += 1, R7216 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R7262 += 1, R7215 += 1, R7216 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R7262 += 1, R7216 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7262 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7262 += 1, R7216 += 1 };
  s7 -> s6 [0, 65535] { R7262 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7264 += 1, R7217 += 1, R7218 += 1 };
  s0 -> s2 [0, 65535] { R7264 += 1, R7218 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R7264 += 1, R7218 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R7263 += 1, R7264 += 1 };
  s1 -> s1 [0, 65535] { R7264 += 1, R7217 += 1, R7218 += 1 };
  s1 -> s2 [0, 65535] { R7264 += 1, R7218 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s3 [0, 65535] { R7264 += 1, R7218 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R7264 += 1 };
  s2 -> s2 [0, 65535] { R7264 += 1, R7218 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s3 [0, 65535] { R7264 += 1, R7218 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R7264 += 1 };
  s3 -> s5 [0, 65535] { R7264 += 1, R7218 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7264 += 1, R7218 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R7264 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R7264 += 1 };
  s5 -> s5 [0, 65535] { R7264 += 1, R7218 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7266 += 1, R7219 += 1, R7220 += 1 };
  s0 -> s2 [0, 65535] { R7266 += 1, R7220 += 1, R7183 += 1, R7184 += 1 };
  s0 -> s0 [0, 65535] { R7265 += 1, R7266 += 1 };
  s0 -> s3 [0, 65535] { R7266 += 1, R7220 += 1, R7184 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7266 += 1, R7219 += 1, R7220 += 1 };
  s1 -> s2 [0, 65535] { R7266 += 1, R7220 += 1, R7183 += 1, R7184 += 1 };
  s1 -> s3 [0, 65535] { R7266 += 1, R7220 += 1, R7184 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7266 += 1 };
  s2 -> s2 [0, 65535] { R7266 += 1, R7220 += 1, R7183 += 1, R7184 += 1 };
  s2 -> s3 [0, 65535] { R7266 += 1, R7220 += 1, R7184 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7266 += 1 };
  s3 -> s6 [0, 65535] { R7266 += 1, R7220 += 1 };
  s3 -> s3 [0, 65535] { R7266 += 1, R7220 += 1, R7184 += 1, R5990 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7266 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7266 += 1 };
  s6 -> s6 [0, 65535] { R7266 += 1, R7220 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R7267 += 1, R7268 += 1 };
  s0 -> s1 [0, 65535] { R7268 += 1, R7222 += 1, R7185 += 1, R7186 += 1 };
  s0 -> s2 [0, 65535] { R7268 += 1, R7221 += 1, R7222 += 1 };
  s0 -> s3 [108, 108] { R7268 += 1, R7222 += 1, R7186 += 1 };
  s1 -> s1 [0, 65535] { R7268 += 1, R7222 += 1, R7185 += 1, R7186 += 1 };
  s1 -> s3 [108, 108] { R7268 += 1, R7222 += 1, R7186 += 1 };
  s2 -> s1 [0, 65535] { R7268 += 1, R7222 += 1, R7185 += 1, R7186 += 1 };
  s2 -> s2 [0, 65535] { R7268 += 1, R7221 += 1, R7222 += 1 };
  s2 -> s3 [108, 108] { R7268 += 1, R7222 += 1, R7186 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7268 += 1, R7222 += 1 };
  s3 -> s5 [0, 65535] { R7268 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7268 += 1 };
  accepting s3, s4, s5;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s0 -> s0 [0, 65535] { R7269 += 1, R7270 += 1 };
  s0 -> s2 [0, 65535] { R7270 += 1, R7223 += 1, R7224 += 1 };
  s0 -> s3 [0, 65535] { R7270 += 1, R7224 += 1, R7191 += 1, R7192 += 1 };
  s0 -> s4 [88, 88] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s0 -> s1 [89, 65535] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s1 -> s1 [0, 87] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s1 -> s4 [88, 88] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s1 -> s1 [89, 65535] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s2 -> s1 [0, 87] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s2 -> s2 [0, 65535] { R7270 += 1, R7223 += 1, R7224 += 1 };
  s2 -> s3 [0, 65535] { R7270 += 1, R7224 += 1, R7191 += 1, R7192 += 1 };
  s2 -> s4 [88, 88] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s2 -> s1 [89, 65535] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s3 -> s1 [0, 87] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s3 -> s3 [0, 65535] { R7270 += 1, R7224 += 1, R7191 += 1, R7192 += 1 };
  s3 -> s4 [88, 88] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s3 -> s1 [89, 65535] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s4 -> s5 [0, 65535] { R7270 += 1 };
  s4 -> s4 [0, 65535] { R7270 += 1, R7224 += 1, R7192 += 1 };
  s4 -> s6 [0, 65535] { R7270 += 1, R7224 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R7270 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R7270 += 1 };
  s6 -> s6 [0, 65535] { R7270 += 1, R7224 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7271 += 1, R7272 += 1 };
  s0 -> s1 [0, 65535] { R7272 += 1, R7225 += 1, R7226 += 1 };
  s0 -> s2 [0, 65535] { R7272 += 1, R7226 += 1, R7193 += 1, R7194 += 1 };
  s0 -> s3 [0, 65535] { R7272 += 1, R7226 += 1, R7194 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R7272 += 1, R7225 += 1, R7226 += 1 };
  s1 -> s2 [0, 65535] { R7272 += 1, R7226 += 1, R7193 += 1, R7194 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R7272 += 1, R7226 += 1, R7194 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R7272 += 1, R7226 += 1, R7193 += 1, R7194 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7272 += 1, R7226 += 1, R7194 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R7272 += 1 };
  s3 -> s4 [0, 65535] { R7272 += 1, R7226 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7272 += 1, R7226 += 1, R7194 += 1, R1 += 1 };
  s3 -> s6 [0, 65535] { R7272 += 1 };
  s4 -> s4 [0, 65535] { R7272 += 1, R7226 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7272 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7272 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s0 -> s2 [0, 65535] { R7274 += 1, R7228 += 1, R7196 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R7274 += 1, R7227 += 1, R7228 += 1 };
  s0 -> s0 [0, 65535] { R7273 += 1, R7274 += 1 };
  s0 -> s4 [0, 65535] { R7274 += 1, R7228 += 1, R7195 += 1, R7196 += 1 };
  s0 -> s5 [88, 88] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s0 -> s1 [89, 65535] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s1 -> s1 [0, 87] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s1 -> s6 [0, 65535] { R7274 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R7274 += 1, R7228 += 1 };
  s1 -> s5 [88, 88] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s1 -> s1 [89, 65535] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s2 -> s1 [0, 87] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s2 -> s2 [0, 65535] { R7274 += 1, R7228 += 1, R7196 += 1, R7 += 1 };
  s2 -> s6 [0, 65535] { R7274 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R7274 += 1, R7228 += 1 };
  s2 -> s5 [88, 88] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s2 -> s1 [89, 65535] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s3 -> s1 [0, 87] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s3 -> s2 [0, 65535] { R7274 += 1, R7228 += 1, R7196 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R7274 += 1, R7227 += 1, R7228 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R7274 += 1, R7228 += 1, R7195 += 1, R7196 += 1 };
  s3 -> s5 [88, 88] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s3 -> s1 [89, 65535] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s4 -> s1 [0, 87] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s4 -> s2 [0, 65535] { R7274 += 1, R7228 += 1, R7196 += 1, R7 += 1 };
  s4 -> s6 [0, 65535] { R7274 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R7274 += 1, R7228 += 1, R7195 += 1, R7196 += 1 };
  s4 -> s5 [88, 88] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s4 -> s1 [89, 65535] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s5 -> s5 [0, 65535] { R7274 += 1, R7228 += 1, R7196 += 1 };
  s6 -> s6 [0, 65535] { R7274 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R7274 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R7274 += 1, R7228 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s0 -> s2 [0, 65535] { R7276 += 1, R7229 += 1, R7230 += 1 };
  s0 -> s0 [0, 65535] { R7275 += 1, R7276 += 1 };
  s0 -> s3 [0, 65535] { R7276 += 1, R7230 += 1, R7197 += 1, R7198 += 1 };
  s0 -> s4 [0, 65535] { R7276 += 1, R7230 += 1, R7198 += 1, R7177 += 1, R7178 += 1 };
  s0 -> s1 [89, 65535] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s1 -> s1 [0, 87] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s1 -> s1 [0, 65535] { R7276 += 1, R7230 += 1, R7198 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7276 += 1 };
  s1 -> s7 [0, 65535] { R7276 += 1, R7230 += 1 };
  s1 -> s1 [89, 65535] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s2 -> s1 [0, 87] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s2 -> s2 [0, 65535] { R7276 += 1, R7229 += 1, R7230 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7276 += 1, R7230 += 1, R7197 += 1, R7198 += 1 };
  s2 -> s4 [0, 65535] { R7276 += 1, R7230 += 1, R7198 += 1, R7177 += 1, R7178 += 1 };
  s2 -> s1 [89, 65535] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s3 -> s1 [0, 87] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7276 += 1 };
  s3 -> s3 [0, 65535] { R7276 += 1, R7230 += 1, R7197 += 1, R7198 += 1 };
  s3 -> s4 [0, 65535] { R7276 += 1, R7230 += 1, R7198 += 1, R7177 += 1, R7178 += 1 };
  s3 -> s1 [89, 65535] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s4 -> s1 [0, 87] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7276 += 1 };
  s4 -> s7 [0, 65535] { R7276 += 1, R7230 += 1 };
  s4 -> s4 [0, 65535] { R7276 += 1, R7230 += 1, R7198 += 1, R7177 += 1, R7178 += 1 };
  s4 -> s1 [89, 65535] { R7276 += 1, R7230 += 1, R7198 += 1, R7178 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7276 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7276 += 1 };
  s7 -> s7 [0, 65535] { R7276 += 1, R7230 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1, R7180 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R7278 += 1, R7232 += 1, R7199 += 1, R7200 += 1 };
  s0 -> s3 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1, R7179 += 1, R7180 += 1 };
  s0 -> s4 [0, 65535] { R7278 += 1, R7231 += 1, R7232 += 1 };
  s0 -> s0 [0, 65535] { R7277 += 1, R7278 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7278 += 1 };
  s1 -> s8 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1 };
  s1 -> s1 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1, R7180 += 1, R5988 += 1 };
  s1 -> s7 [0, 65535] { R7278 += 1, R7232 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7278 += 1 };
  s2 -> s1 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1, R7180 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R7278 += 1, R7232 += 1, R7199 += 1, R7200 += 1 };
  s2 -> s3 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1, R7179 += 1, R7180 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7278 += 1 };
  s3 -> s1 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1, R7180 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1, R7179 += 1, R7180 += 1 };
  s3 -> s7 [0, 65535] { R7278 += 1, R7232 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1, R7180 += 1, R5988 += 1 };
  s4 -> s2 [0, 65535] { R7278 += 1, R7232 += 1, R7199 += 1, R7200 += 1 };
  s4 -> s3 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1, R7179 += 1, R7180 += 1 };
  s4 -> s4 [0, 65535] { R7278 += 1, R7231 += 1, R7232 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7278 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7278 += 1 };
  s7 -> s7 [0, 65535] { R7278 += 1, R7232 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R7278 += 1 };
  s8 -> s8 [0, 65535] { R7278 += 1, R7232 += 1, R7200 += 1 };
  s8 -> s7 [0, 65535] { R7278 += 1, R7232 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R7280 += 1, R7234 += 1, R7202 += 1, R7181 += 1, R7182 += 1 };
  s0 -> s2 [0, 65535] { R7280 += 1, R7234 += 1, R7201 += 1, R7202 += 1 };
  s0 -> s3 [0, 65535] { R7280 += 1, R7233 += 1, R7234 += 1 };
  s0 -> s0 [0, 65535] { R7279 += 1, R7280 += 1 };
  s0 -> s4 [116, 116] { R7280 += 1, R7234 += 1, R7202 += 1, R7182 += 1 };
  s1 -> s1 [0, 65535] { R7280 += 1, R7234 += 1, R7202 += 1, R7181 += 1, R7182 += 1 };
  s1 -> s4 [116, 116] { R7280 += 1, R7234 += 1, R7202 += 1, R7182 += 1 };
  s2 -> s1 [0, 65535] { R7280 += 1, R7234 += 1, R7202 += 1, R7181 += 1, R7182 += 1 };
  s2 -> s2 [0, 65535] { R7280 += 1, R7234 += 1, R7201 += 1, R7202 += 1 };
  s2 -> s4 [116, 116] { R7280 += 1, R7234 += 1, R7202 += 1, R7182 += 1 };
  s3 -> s1 [0, 65535] { R7280 += 1, R7234 += 1, R7202 += 1, R7181 += 1, R7182 += 1 };
  s3 -> s2 [0, 65535] { R7280 += 1, R7234 += 1, R7201 += 1, R7202 += 1 };
  s3 -> s3 [0, 65535] { R7280 += 1, R7233 += 1, R7234 += 1 };
  s3 -> s4 [116, 116] { R7280 += 1, R7234 += 1, R7202 += 1, R7182 += 1 };
  s4 -> s4 [0, 65535] { R7280 += 1, R7234 += 1, R7202 += 1 };
  s4 -> s5 [0, 65535] { R7280 += 1 };
  s4 -> s6 [0, 65535] { R7280 += 1, R7234 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R7280 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R7280 += 1 };
  s6 -> s6 [0, 65535] { R7280 += 1, R7234 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1, R7187 += 1, R7188 += 1 };
  s0 -> s2 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1, R7188 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R7282 += 1, R7235 += 1, R7236 += 1 };
  s0 -> s4 [0, 65535] { R7282 += 1, R7236 += 1, R7203 += 1, R7204 += 1 };
  s0 -> s0 [0, 65535] { R7281 += 1, R7282 += 1 };
  s1 -> s1 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1, R7187 += 1, R7188 += 1 };
  s1 -> s2 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1, R7188 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7282 += 1 };
  s1 -> s8 [0, 65535] { R7282 += 1, R7236 += 1 };
  s2 -> s2 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1, R7188 += 1, R5989 += 1 };
  s2 -> s7 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7282 += 1 };
  s2 -> s8 [0, 65535] { R7282 += 1, R7236 += 1 };
  s3 -> s1 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1, R7187 += 1, R7188 += 1 };
  s3 -> s2 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1, R7188 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R7282 += 1, R7235 += 1, R7236 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R7282 += 1, R7236 += 1, R7203 += 1, R7204 += 1 };
  s4 -> s1 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1, R7187 += 1, R7188 += 1 };
  s4 -> s2 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1, R7188 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7282 += 1 };
  s4 -> s4 [0, 65535] { R7282 += 1, R7236 += 1, R7203 += 1, R7204 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7282 += 1 };
  s7 -> s7 [0, 65535] { R7282 += 1, R7236 += 1, R7204 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7282 += 1 };
  s7 -> s8 [0, 65535] { R7282 += 1, R7236 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R7282 += 1 };
  s8 -> s8 [0, 65535] { R7282 += 1, R7236 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R7284 += 1, R7237 += 1, R7238 += 1 };
  s0 -> s0 [0, 65535] { R7283 += 1, R7284 += 1 };
  s0 -> s2 [0, 65535] { R7284 += 1, R7238 += 1, R7206 += 1, R7189 += 1, R7190 += 1 };
  s0 -> s3 [0, 65535] { R7284 += 1, R7238 += 1, R7205 += 1, R7206 += 1 };
  s0 -> s4 [111, 111] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s1 -> s1 [0, 65535] { R7284 += 1, R7237 += 1, R7238 += 1 };
  s1 -> s2 [0, 65535] { R7284 += 1, R7238 += 1, R7206 += 1, R7189 += 1, R7190 += 1 };
  s1 -> s3 [0, 65535] { R7284 += 1, R7238 += 1, R7205 += 1, R7206 += 1 };
  s1 -> s4 [111, 111] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s2 -> s2 [0, 65535] { R7284 += 1, R7238 += 1, R7206 += 1, R7189 += 1, R7190 += 1 };
  s2 -> s4 [111, 111] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s3 -> s2 [0, 65535] { R7284 += 1, R7238 += 1, R7206 += 1, R7189 += 1, R7190 += 1 };
  s3 -> s3 [0, 65535] { R7284 += 1, R7238 += 1, R7205 += 1, R7206 += 1 };
  s3 -> s4 [111, 111] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s4 -> s5 [99, 99] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s5 -> s6 [97, 97] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s6 -> s7 [108, 108] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s7 -> s8 [104, 104] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s8 -> s9 [111, 111] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s9 -> s10 [115, 115] { R7284 += 1, R7238 += 1, R7206 += 1, R7190 += 1 };
  s10 -> s11 [0, 65535] { R7284 += 1, R7238 += 1 };
  s10 -> s12 [0, 65535] { R7284 += 1 };
  s10 -> s10 [0, 65535] { R7284 += 1, R7238 += 1, R7206 += 1 };
  s10 -> s13 [0, 65535];
  s11 -> s11 [0, 65535] { R7284 += 1, R7238 += 1 };
  s11 -> s12 [0, 65535] { R7284 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R7284 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  accepting s10, s11, s12, s13;
};
};
constraint R1 = R7182 && R2 = R7206 && R3 = R7070 && R4 = R7284 && R15 = 0 && R16 = R7238 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R7063 - R7238 = 1 && R7064 = R7070 && R7065 - R7238 = 1 && R7066 = R7070 && R7067 - R7238 = 1 && R7068 = R7070 && R7069 - R7238 = 1 && R7181 = 0 && R7185 = 0 && R7186 = 0 && R7189 = 0 && R7190 = 0 && R7191 = 0 && R7192 = R7206 && R7193 = 0 && R7194 = R7206 && R7195 = 0 && R7196 = R7206 && R7197 = 0 && R7198 = R7206 && R7199 = 0 && R7200 = R7206 && R7201 = 0 && R7202 = R7206 && R7203 = 0 && R7204 = R7206 && R7205 = 0 && R7207 = 0 && R7208 = R7238 && R7209 = 0 && R7210 = R7238 && R7211 = 0 && R7212 = R7238 && R7213 = 0 && R7214 = R7238 && R7215 = 0 && R7216 = R7238 && R7217 = 0 && R7218 = R7238 && R7219 = 0 && R7220 = R7238 && R7221 = 0 && R7222 = R7238 && R7223 = 0 && R7224 = R7238 && R7225 = 0 && R7226 = R7238 && R7227 = 0 && R7228 = R7238 && R7229 = 0 && R7230 = R7238 && R7231 = 0 && R7232 = R7238 && R7233 = 0 && R7234 = R7238 && R7235 = 0 && R7236 = R7238 && R7237 = 0 && R7239 = 10 && R7240 = R7284 && R7241 = 10 && R7242 = R7284 && R7243 = 10 && R7244 = R7284 && R7245 = 10 && R7246 = R7284 && R7247 = 10 && R7248 = R7284 && R7249 = 10 && R7250 = R7284 && R7251 = 10 && R7252 = R7284 && R7253 = 10 && R7254 = R7284 && R7255 = 10 && R7256 = R7284 && R7257 = 10 && R7258 = R7284 && R7259 = 10 && R7260 = R7284 && R7261 = 10 && R7262 = R7284 && R7263 = 10 && R7264 = R7284 && R7265 = 10 && R7266 = R7284 && R7267 = 10 && R7268 = R7284 && R7269 = 10 && R7270 = R7284 && R7271 = 10 && R7272 = R7284 && R7273 = 10 && R7274 = R7284 && R7275 = 10 && R7276 = R7284 && R7277 = 10 && R7278 = R7284 && R7279 = 10 && R7280 = R7284 && R7281 = 10 && R7282 = R7284 && R7283 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R7238 < R7070 && -1 < R7182 && 0 < R7206 && -1 < R7238 && 9 < R7284 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R7177 != 0 || R7178 = R7182 || (R5988 = 0 && R7182 = 0)) && (R7179 != 0 || R7180 = R7182 || (R5988 = 0 && R7182 = 0)) && (R5989 = 0 || (R7187 = 0 && R7188 = 0)) && (R5990 = 0 || (R7183 = 0 && R7184 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R7177 = 0 || (R5988 = 0 && R7182 = 0)) && (R7179 = 0 || (R5988 = 0 && R7182 = 0));
// End of Parikh automata intersection problem
