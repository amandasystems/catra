// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R7063, R7064, R7065, R7066, R7067, R7068, R7069, R7070, R7933, R7934, R7935, R7936, R7937, R7938, R7939, R7940, R7941, R7942, R7943, R7944, R7945, R7946, R7947, R7948, R7949, R7950, R7951, R7952, R7953, R7954, R7955, R7956, R7957, R7958, R7959, R7960, R7961, R7962, R7963, R7964, R7965, R7966, R7967, R7968, R7969, R7970, R7971, R7972, R7973, R7974, R7975, R7976, R7977, R7978, R7979, R7980, R7981, R7982, R7983, R7984, R7985, R7986, R7987, R7988, R7989, R7990, R7991, R7992, R7993, R7994, R7995, R7996, R7997, R7998, R7999, R8000, R8001, R8002, R8003, R8004, R8005, R8006, R8007, R8008, R8009, R8010, R8011, R8012, R8013, R8014, R8015, R8016, R8017, R8018, R8019, R8020, R8021, R8022, R8023, R8024, R8025, R8026, R8027, R8028, R8029, R8030, R8031, R8032, R8033, R8034, R8035, R8036, R8037, R8038;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R7994 += 1 };
  s0 -> s0 [0, 65535] { R7993 += 1, R7994 += 1 };
  s0 -> s2 [46, 46] { R7994 += 1 };
  s0 -> s3 [47, 47] { R7994 += 1 };
  s0 -> s1 [48, 65535] { R7994 += 1 };
  s1 -> s1 [0, 45] { R7994 += 1 };
  s1 -> s2 [46, 46] { R7994 += 1 };
  s1 -> s3 [47, 47] { R7994 += 1 };
  s1 -> s1 [48, 65535] { R7994 += 1 };
  s2 -> s1 [0, 45] { R7994 += 1 };
  s2 -> s2 [46, 46] { R7994 += 1 };
  s2 -> s3 [47, 47] { R7994 += 1 };
  s2 -> s1 [48, 114] { R7994 += 1 };
  s2 -> s8 [115, 115] { R7994 += 1 };
  s2 -> s1 [116, 65535] { R7994 += 1 };
  s3 -> s3 [0, 45] { R7994 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R7994 += 1 };
  s3 -> s3 [47, 65535] { R7994 += 1 };
  s4 -> s3 [0, 45] { R7994 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R7994 += 1 };
  s4 -> s3 [47, 114] { R7994 += 1 };
  s4 -> s5 [115, 115] { R7994 += 1 };
  s4 -> s3 [116, 65535] { R7994 += 1 };
  s5 -> s3 [0, 45] { R7994 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R7994 += 1 };
  s5 -> s3 [47, 110] { R7994 += 1 };
  s5 -> s6 [111, 111] { R7994 += 1 };
  s5 -> s3 [112, 65535] { R7994 += 1 };
  s6 -> s3 [0, 45] { R7994 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R7994 += 1 };
  s6 -> s3 [47, 98] { R7994 += 1 };
  s6 -> s7 [99, 99] { R7994 += 1 };
  s6 -> s3 [100, 65535] { R7994 += 1 };
  s7 -> s3 [0, 45] { R7994 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R7994 += 1 };
  s7 -> s3 [47, 106] { R7994 += 1 };
  s7 -> s3 [108, 65535] { R7994 += 1 };
  s8 -> s1 [0, 45] { R7994 += 1 };
  s8 -> s2 [46, 46] { R7994 += 1 };
  s8 -> s3 [47, 47] { R7994 += 1 };
  s8 -> s1 [48, 110] { R7994 += 1 };
  s8 -> s9 [111, 111] { R7994 += 1 };
  s8 -> s1 [112, 65535] { R7994 += 1 };
  s9 -> s1 [0, 45] { R7994 += 1 };
  s9 -> s2 [46, 46] { R7994 += 1 };
  s9 -> s3 [47, 47] { R7994 += 1 };
  s9 -> s1 [48, 98] { R7994 += 1 };
  s9 -> s10 [99, 99] { R7994 += 1 };
  s9 -> s1 [100, 65535] { R7994 += 1 };
  s10 -> s1 [0, 45] { R7994 += 1 };
  s10 -> s2 [46, 46] { R7994 += 1 };
  s10 -> s3 [47, 47] { R7994 += 1 };
  s10 -> s1 [48, 106] { R7994 += 1 };
  s10 -> s1 [108, 65535] { R7994 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R7996 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R7995 += 1, R7996 += 1 };
  s1 -> s1 [0, 65535] { R7996 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R7998 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R7998 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R7997 += 1, R7998 += 1 };
  s0 -> s3 [47, 47] { R7998 += 1 };
  s0 -> s1 [48, 65535] { R7998 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R7998 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R7998 += 1 };
  s1 -> s1 [48, 65535] { R7998 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R7998 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R7998 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R7998 += 1 };
  s2 -> s1 [48, 65535] { R7998 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R7998 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8000 += 1, R7064 += 1 };
  s0 -> s2 [0, 65535] { R8000 += 1, R7063 += 1, R7064 += 1 };
  s0 -> s0 [0, 65535] { R7999 += 1, R8000 += 1 };
  s0 -> s1 [38, 42] { R8000 += 1, R7064 += 1 };
  s0 -> s1 [44, 45] { R8000 += 1, R7064 += 1 };
  s0 -> s1 [47, 62] { R8000 += 1, R7064 += 1 };
  s0 -> s1 [64, 65535] { R8000 += 1, R7064 += 1 };
  s1 -> s1 [0, 36] { R8000 += 1, R7064 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8000 += 1 };
  s1 -> s1 [38, 42] { R8000 += 1, R7064 += 1 };
  s1 -> s1 [44, 45] { R8000 += 1, R7064 += 1 };
  s1 -> s1 [47, 62] { R8000 += 1, R7064 += 1 };
  s1 -> s1 [64, 65535] { R8000 += 1, R7064 += 1 };
  s2 -> s1 [0, 36] { R8000 += 1, R7064 += 1 };
  s2 -> s2 [0, 65535] { R8000 += 1, R7063 += 1, R7064 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R8000 += 1, R7064 += 1 };
  s2 -> s1 [44, 45] { R8000 += 1, R7064 += 1 };
  s2 -> s1 [47, 62] { R8000 += 1, R7064 += 1 };
  s2 -> s1 [64, 65535] { R8000 += 1, R7064 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R8001 += 1, R8002 += 1 };
  s0 -> s1 [0, 65535] { R8002 += 1, R7065 += 1, R7066 += 1 };
  s0 -> s2 [0, 65535] { R8002 += 1, R7066 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8002 += 1, R7065 += 1, R7066 += 1 };
  s1 -> s2 [0, 65535] { R8002 += 1, R7066 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8002 += 1 };
  s2 -> s2 [0, 65535] { R8002 += 1, R7066 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8002 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R8004 += 1, R7067 += 1, R7068 += 1 };
  s0 -> s0 [0, 65535] { R8003 += 1, R8004 += 1 };
  s0 -> s3 [0, 65535] { R8004 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R8004 += 1, R7068 += 1 };
  s1 -> s5 [0, 65535] { R8004 += 1 };
  s1 -> s1 [0, 65535] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R8004 += 1, R7067 += 1, R7068 += 1 };
  s2 -> s3 [0, 65535] { R8004 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R8004 += 1 };
  s3 -> s3 [0, 65535] { R8004 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8004 += 1, R7068 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R8004 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8004 += 1, R7068 += 1 };
  s7 -> s5 [0, 65535] { R8004 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8006 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R8006 += 1, R7069 += 1, R7070 += 1 };
  s0 -> s3 [0, 65535] { R8006 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R8005 += 1, R8006 += 1 };
  s1 -> s1 [0, 65535] { R8006 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8006 += 1 };
  s1 -> s3 [0, 65535] { R8006 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s2 -> s1 [0, 65535] { R8006 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s2 [0, 65535] { R8006 += 1, R7069 += 1, R7070 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8006 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8006 += 1 };
  s3 -> s6 [0, 65535] { R8006 += 1, R7070 += 1 };
  s3 -> s3 [0, 65535] { R8006 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8006 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8006 += 1 };
  s6 -> s6 [0, 65535] { R8006 += 1, R7070 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8008 += 1, R7962 += 1 };
  s0 -> s0 [0, 65535] { R8007 += 1, R8008 += 1 };
  s0 -> s2 [0, 65535] { R8008 += 1, R7961 += 1, R7962 += 1 };
  s0 -> s1 [45, 63] { R8008 += 1, R7962 += 1 };
  s0 -> s3 [88, 88] { R8008 += 1, R7962 += 1 };
  s0 -> s1 [89, 65535] { R8008 += 1, R7962 += 1 };
  s1 -> s1 [0, 43] { R8008 += 1, R7962 += 1 };
  s1 -> s1 [45, 63] { R8008 += 1, R7962 += 1 };
  s1 -> s3 [88, 88] { R8008 += 1, R7962 += 1 };
  s1 -> s1 [89, 65535] { R8008 += 1, R7962 += 1 };
  s2 -> s1 [0, 43] { R8008 += 1, R7962 += 1 };
  s2 -> s2 [0, 65535] { R8008 += 1, R7961 += 1, R7962 += 1 };
  s2 -> s1 [45, 63] { R8008 += 1, R7962 += 1 };
  s2 -> s3 [88, 88] { R8008 += 1, R7962 += 1 };
  s2 -> s1 [89, 65535] { R8008 += 1, R7962 += 1 };
  s3 -> s3 [0, 43] { R8008 += 1, R7962 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8008 += 1 };
  s3 -> s3 [45, 63] { R8008 += 1, R7962 += 1 };
  s3 -> s3 [88, 65535] { R8008 += 1, R7962 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R8010 += 1, R7964 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R8010 += 1, R7963 += 1, R7964 += 1 };
  s0 -> s0 [0, 65535] { R8009 += 1, R8010 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8010 += 1, R7964 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R8010 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8010 += 1, R7964 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R8010 += 1, R7963 += 1, R7964 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8010 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8012 += 1, R7966 += 1 };
  s0 -> s0 [0, 65535] { R8011 += 1, R8012 += 1 };
  s0 -> s2 [0, 65535] { R8012 += 1, R7966 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R8012 += 1, R7965 += 1, R7966 += 1 };
  s0 -> s4 [58, 58] { R8012 += 1, R7966 += 1 };
  s0 -> s1 [59, 65535] { R8012 += 1, R7966 += 1 };
  s1 -> s1 [0, 57] { R8012 += 1, R7966 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8012 += 1 };
  s1 -> s4 [58, 58] { R8012 += 1, R7966 += 1 };
  s1 -> s1 [59, 65535] { R8012 += 1, R7966 += 1 };
  s2 -> s1 [0, 57] { R8012 += 1, R7966 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8012 += 1 };
  s2 -> s2 [0, 65535] { R8012 += 1, R7966 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R8012 += 1, R7966 += 1 };
  s2 -> s1 [59, 65535] { R8012 += 1, R7966 += 1 };
  s3 -> s1 [0, 57] { R8012 += 1, R7966 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8012 += 1, R7966 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R8012 += 1, R7965 += 1, R7966 += 1 };
  s3 -> s4 [58, 58] { R8012 += 1, R7966 += 1 };
  s3 -> s1 [59, 65535] { R8012 += 1, R7966 += 1 };
  s4 -> s4 [0, 65535] { R8012 += 1, R7966 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8012 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R8014 += 1, R7968 += 1 };
  s0 -> s0 [0, 65535] { R8013 += 1, R8014 += 1 };
  s0 -> s2 [0, 65535] { R8014 += 1, R7967 += 1, R7968 += 1 };
  s0 -> s3 [0, 65535] { R8014 += 1, R7968 += 1, R11 += 1 };
  s0 -> s4 [88, 88] { R8014 += 1, R7968 += 1 };
  s0 -> s1 [89, 65535] { R8014 += 1, R7968 += 1 };
  s1 -> s1 [0, 87] { R8014 += 1, R7968 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8014 += 1 };
  s1 -> s4 [88, 88] { R8014 += 1, R7968 += 1 };
  s1 -> s1 [89, 65535] { R8014 += 1, R7968 += 1 };
  s2 -> s1 [0, 87] { R8014 += 1, R7968 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8014 += 1, R7967 += 1, R7968 += 1 };
  s2 -> s3 [0, 65535] { R8014 += 1, R7968 += 1, R11 += 1 };
  s2 -> s4 [88, 88] { R8014 += 1, R7968 += 1 };
  s2 -> s1 [89, 65535] { R8014 += 1, R7968 += 1 };
  s3 -> s1 [0, 87] { R8014 += 1, R7968 += 1 };
  s3 -> s5 [0, 65535] { R8014 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8014 += 1, R7968 += 1, R11 += 1 };
  s3 -> s4 [88, 88] { R8014 += 1, R7968 += 1 };
  s3 -> s1 [89, 65535] { R8014 += 1, R7968 += 1 };
  s4 -> s4 [0, 65535] { R8014 += 1, R7968 += 1 };
  s5 -> s5 [0, 65535] { R8014 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R8016 += 1, R7969 += 1, R7970 += 1 };
  s0 -> s3 [0, 65535] { R8016 += 1, R7970 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8015 += 1, R8016 += 1 };
  s0 -> s4 [91, 91] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R8016 += 1, R7970 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8016 += 1 };
  s2 -> s1 [0, 90] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R8016 += 1, R7969 += 1, R7970 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8016 += 1, R7970 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8016 += 1, R7970 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s6 [0, 65535] { R8016 += 1 };
  s3 -> s4 [91, 91] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8016 += 1, R7970 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8016 += 1 };
  s7 -> s7 [0, 65535] { R8016 += 1, R7970 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8016 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8018 += 1, R7972 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R8018 += 1, R7971 += 1, R7972 += 1 };
  s0 -> s3 [0, 65535] { R8018 += 1, R7972 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R8017 += 1, R8018 += 1 };
  s1 -> s4 [0, 65535] { R8018 += 1 };
  s1 -> s1 [0, 65535] { R8018 += 1, R7972 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8018 += 1, R7972 += 1 };
  s2 -> s1 [0, 65535] { R8018 += 1, R7972 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8018 += 1, R7971 += 1, R7972 += 1 };
  s2 -> s3 [0, 65535] { R8018 += 1, R7972 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535] { R8018 += 1 };
  s3 -> s1 [0, 65535] { R8018 += 1, R7972 += 1, R5998 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8018 += 1, R7972 += 1, R5997 += 1, R5998 += 1 };
  s4 -> s4 [0, 65535] { R8018 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8018 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8018 += 1, R7972 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8020 += 1, R7974 += 1, R7939 += 1, R7940 += 1 };
  s0 -> s2 [0, 65535] { R8020 += 1, R7974 += 1, R7940 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R8020 += 1, R7973 += 1, R7974 += 1 };
  s0 -> s0 [0, 65535] { R8019 += 1, R8020 += 1 };
  s1 -> s5 [0, 65535] { R8020 += 1 };
  s1 -> s1 [0, 65535] { R8020 += 1, R7974 += 1, R7939 += 1, R7940 += 1 };
  s1 -> s2 [0, 65535] { R8020 += 1, R7974 += 1, R7940 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8020 += 1 };
  s2 -> s2 [0, 65535] { R8020 += 1, R7974 += 1, R7940 += 1, R5990 += 1 };
  s2 -> s6 [0, 65535] { R8020 += 1, R7974 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8020 += 1, R7974 += 1, R7939 += 1, R7940 += 1 };
  s3 -> s2 [0, 65535] { R8020 += 1, R7974 += 1, R7940 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R8020 += 1, R7973 += 1, R7974 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8020 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8020 += 1 };
  s6 -> s6 [0, 65535] { R8020 += 1, R7974 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R8021 += 1, R8022 += 1 };
  s0 -> s1 [0, 65535] { R8022 += 1, R7976 += 1, R7941 += 1, R7942 += 1 };
  s0 -> s2 [0, 65535] { R8022 += 1, R7975 += 1, R7976 += 1 };
  s0 -> s3 [108, 108] { R8022 += 1, R7976 += 1, R7942 += 1 };
  s1 -> s1 [0, 65535] { R8022 += 1, R7976 += 1, R7941 += 1, R7942 += 1 };
  s1 -> s3 [108, 108] { R8022 += 1, R7976 += 1, R7942 += 1 };
  s2 -> s1 [0, 65535] { R8022 += 1, R7976 += 1, R7941 += 1, R7942 += 1 };
  s2 -> s2 [0, 65535] { R8022 += 1, R7975 += 1, R7976 += 1 };
  s2 -> s3 [108, 108] { R8022 += 1, R7976 += 1, R7942 += 1 };
  s3 -> s3 [0, 65535] { R8022 += 1, R7976 += 1 };
  s3 -> s4 [0, 65535] { R8022 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8022 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s0 -> s0 [0, 65535] { R8023 += 1, R8024 += 1 };
  s0 -> s2 [0, 65535] { R8024 += 1, R7978 += 1, R7945 += 1, R7946 += 1 };
  s0 -> s3 [0, 65535] { R8024 += 1, R7977 += 1, R7978 += 1 };
  s0 -> s4 [88, 88] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s0 -> s1 [89, 65535] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s1 -> s1 [0, 87] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s1 -> s4 [88, 88] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s1 -> s1 [89, 65535] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s2 -> s1 [0, 87] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s2 -> s2 [0, 65535] { R8024 += 1, R7978 += 1, R7945 += 1, R7946 += 1 };
  s2 -> s4 [88, 88] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s2 -> s1 [89, 65535] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s3 -> s1 [0, 87] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s3 -> s2 [0, 65535] { R8024 += 1, R7978 += 1, R7945 += 1, R7946 += 1 };
  s3 -> s3 [0, 65535] { R8024 += 1, R7977 += 1, R7978 += 1 };
  s3 -> s4 [88, 88] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s3 -> s1 [89, 65535] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s4 -> s4 [0, 65535] { R8024 += 1, R7978 += 1, R7946 += 1 };
  s4 -> s5 [0, 65535] { R8024 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8024 += 1, R7978 += 1 };
  s5 -> s5 [0, 65535] { R8024 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8024 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8024 += 1, R7978 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8026 += 1, R7980 += 1, R7948 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R8025 += 1, R8026 += 1 };
  s0 -> s2 [0, 65535] { R8026 += 1, R7980 += 1, R7947 += 1, R7948 += 1 };
  s0 -> s3 [0, 65535] { R8026 += 1, R7979 += 1, R7980 += 1 };
  s1 -> s5 [0, 65535] { R8026 += 1 };
  s1 -> s1 [0, 65535] { R8026 += 1, R7980 += 1, R7948 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R8026 += 1, R7980 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8026 += 1 };
  s2 -> s1 [0, 65535] { R8026 += 1, R7980 += 1, R7948 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R8026 += 1, R7980 += 1, R7947 += 1, R7948 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8026 += 1, R7980 += 1, R7948 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R8026 += 1, R7980 += 1, R7947 += 1, R7948 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8026 += 1, R7979 += 1, R7980 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8026 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8026 += 1 };
  s6 -> s6 [0, 65535] { R8026 += 1, R7980 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s0 -> s2 [0, 65535] { R8028 += 1, R7982 += 1, R7949 += 1, R7950 += 1 };
  s0 -> s3 [0, 65535] { R8028 += 1, R7982 += 1, R7950 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R8028 += 1, R7981 += 1, R7982 += 1 };
  s0 -> s0 [0, 65535] { R8027 += 1, R8028 += 1 };
  s0 -> s5 [88, 88] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s0 -> s1 [89, 65535] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s1 -> s1 [0, 87] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8028 += 1 };
  s1 -> s1 [0, 65535] { R8028 += 1, R7982 += 1 };
  s1 -> s5 [88, 88] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s1 -> s1 [89, 65535] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s2 -> s1 [0, 87] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8028 += 1, R7982 += 1, R7949 += 1, R7950 += 1 };
  s2 -> s7 [0, 65535] { R8028 += 1 };
  s2 -> s3 [0, 65535] { R8028 += 1, R7982 += 1, R7950 += 1, R7 += 1 };
  s2 -> s5 [88, 88] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s2 -> s1 [89, 65535] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s3 -> s1 [0, 87] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R8028 += 1 };
  s3 -> s3 [0, 65535] { R8028 += 1, R7982 += 1, R7950 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R8028 += 1, R7982 += 1 };
  s3 -> s5 [88, 88] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s3 -> s1 [89, 65535] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s4 -> s1 [0, 87] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R8028 += 1, R7982 += 1, R7949 += 1, R7950 += 1 };
  s4 -> s3 [0, 65535] { R8028 += 1, R7982 += 1, R7950 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R8028 += 1, R7981 += 1, R7982 += 1 };
  s4 -> s5 [88, 88] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s4 -> s1 [89, 65535] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s5 -> s5 [0, 65535] { R8028 += 1, R7982 += 1, R7950 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8028 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8028 += 1 };
  s8 -> s8 [0, 65535] { R8028 += 1, R7982 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s0 -> s2 [0, 65535] { R8030 += 1, R7984 += 1, R7952 += 1, R7933 += 1, R7934 += 1 };
  s0 -> s3 [0, 65535] { R8030 += 1, R7984 += 1, R7951 += 1, R7952 += 1 };
  s0 -> s4 [0, 65535] { R8030 += 1, R7983 += 1, R7984 += 1 };
  s0 -> s0 [0, 65535] { R8029 += 1, R8030 += 1 };
  s0 -> s1 [89, 65535] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s1 -> s1 [0, 87] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8030 += 1, R7984 += 1, R7952 += 1 };
  s1 -> s7 [0, 65535] { R8030 += 1, R7984 += 1 };
  s1 -> s6 [0, 65535] { R8030 += 1 };
  s1 -> s1 [89, 65535] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s2 -> s1 [0, 87] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s2 -> s2 [0, 65535] { R8030 += 1, R7984 += 1, R7952 += 1, R7933 += 1, R7934 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R8030 += 1, R7984 += 1 };
  s2 -> s6 [0, 65535] { R8030 += 1 };
  s2 -> s1 [89, 65535] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s3 -> s1 [0, 87] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s3 -> s2 [0, 65535] { R8030 += 1, R7984 += 1, R7952 += 1, R7933 += 1, R7934 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8030 += 1, R7984 += 1, R7951 += 1, R7952 += 1 };
  s3 -> s6 [0, 65535] { R8030 += 1 };
  s3 -> s1 [89, 65535] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s4 -> s1 [0, 87] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s4 -> s2 [0, 65535] { R8030 += 1, R7984 += 1, R7952 += 1, R7933 += 1, R7934 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R8030 += 1, R7984 += 1, R7951 += 1, R7952 += 1 };
  s4 -> s4 [0, 65535] { R8030 += 1, R7983 += 1, R7984 += 1 };
  s4 -> s1 [89, 65535] { R8030 += 1, R7984 += 1, R7952 += 1, R7934 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8030 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8030 += 1, R7984 += 1 };
  s7 -> s6 [0, 65535] { R8030 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1, R7936 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1, R7935 += 1, R7936 += 1 };
  s0 -> s3 [0, 65535] { R8032 += 1, R7985 += 1, R7986 += 1 };
  s0 -> s0 [0, 65535] { R8031 += 1, R8032 += 1 };
  s0 -> s4 [0, 65535] { R8032 += 1, R7986 += 1, R7953 += 1, R7954 += 1 };
  s1 -> s1 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1, R7936 += 1, R5988 += 1 };
  s1 -> s8 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1 };
  s1 -> s5 [0, 65535] { R8032 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8032 += 1, R7986 += 1 };
  s2 -> s1 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1, R7936 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1, R7935 += 1, R7936 += 1 };
  s2 -> s5 [0, 65535] { R8032 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R8032 += 1, R7986 += 1 };
  s3 -> s1 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1, R7936 += 1, R5988 += 1 };
  s3 -> s2 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1, R7935 += 1, R7936 += 1 };
  s3 -> s3 [0, 65535] { R8032 += 1, R7985 += 1, R7986 += 1 };
  s3 -> s4 [0, 65535] { R8032 += 1, R7986 += 1, R7953 += 1, R7954 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s1 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1, R7936 += 1, R5988 += 1 };
  s4 -> s2 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1, R7935 += 1, R7936 += 1 };
  s4 -> s4 [0, 65535] { R8032 += 1, R7986 += 1, R7953 += 1, R7954 += 1 };
  s4 -> s5 [0, 65535] { R8032 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8032 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8032 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8032 += 1, R7986 += 1 };
  s8 -> s8 [0, 65535] { R8032 += 1, R7986 += 1, R7954 += 1 };
  s8 -> s5 [0, 65535] { R8032 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8032 += 1, R7986 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8034 += 1, R7988 += 1, R7956 += 1, R7937 += 1, R7938 += 1 };
  s0 -> s2 [0, 65535] { R8034 += 1, R7988 += 1, R7955 += 1, R7956 += 1 };
  s0 -> s0 [0, 65535] { R8033 += 1, R8034 += 1 };
  s0 -> s3 [0, 65535] { R8034 += 1, R7987 += 1, R7988 += 1 };
  s0 -> s4 [111, 111] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s1 -> s1 [0, 65535] { R8034 += 1, R7988 += 1, R7956 += 1, R7937 += 1, R7938 += 1 };
  s1 -> s4 [111, 111] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s2 -> s1 [0, 65535] { R8034 += 1, R7988 += 1, R7956 += 1, R7937 += 1, R7938 += 1 };
  s2 -> s2 [0, 65535] { R8034 += 1, R7988 += 1, R7955 += 1, R7956 += 1 };
  s2 -> s4 [111, 111] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s3 -> s1 [0, 65535] { R8034 += 1, R7988 += 1, R7956 += 1, R7937 += 1, R7938 += 1 };
  s3 -> s2 [0, 65535] { R8034 += 1, R7988 += 1, R7955 += 1, R7956 += 1 };
  s3 -> s3 [0, 65535] { R8034 += 1, R7987 += 1, R7988 += 1 };
  s3 -> s4 [111, 111] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s4 -> s5 [99, 99] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s5 -> s6 [97, 97] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s6 -> s7 [108, 108] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s7 -> s8 [104, 104] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s8 -> s9 [111, 111] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s9 -> s10 [115, 115] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s10 -> s11 [116, 116] { R8034 += 1, R7988 += 1, R7956 += 1, R7938 += 1 };
  s11 -> s12 [0, 65535] { R8034 += 1 };
  s11 -> s13 [0, 65535] { R8034 += 1, R7988 += 1 };
  s11 -> s14 [0, 65535];
  s11 -> s11 [0, 65535] { R8034 += 1, R7988 += 1, R7956 += 1 };
  s12 -> s12 [0, 65535] { R8034 += 1 };
  s12 -> s14 [0, 65535];
  s13 -> s12 [0, 65535] { R8034 += 1 };
  s13 -> s13 [0, 65535] { R8034 += 1, R7988 += 1 };
  s13 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  accepting s11, s12, s13, s14;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8036 += 1, R7989 += 1, R7990 += 1 };
  s0 -> s2 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1, R7944 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R8035 += 1, R8036 += 1 };
  s0 -> s3 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1, R7943 += 1, R7944 += 1 };
  s0 -> s4 [0, 65535] { R8036 += 1, R7990 += 1, R7957 += 1, R7958 += 1 };
  s1 -> s1 [0, 65535] { R8036 += 1, R7989 += 1, R7990 += 1 };
  s1 -> s2 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1, R7944 += 1, R5989 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1, R7943 += 1, R7944 += 1 };
  s1 -> s4 [0, 65535] { R8036 += 1, R7990 += 1, R7957 += 1, R7958 += 1 };
  s2 -> s8 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1 };
  s2 -> s7 [0, 65535] { R8036 += 1, R7990 += 1 };
  s2 -> s5 [0, 65535] { R8036 += 1 };
  s2 -> s2 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1, R7944 += 1, R5989 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R8036 += 1, R7990 += 1 };
  s3 -> s5 [0, 65535] { R8036 += 1 };
  s3 -> s2 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1, R7944 += 1, R5989 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1, R7943 += 1, R7944 += 1 };
  s4 -> s5 [0, 65535] { R8036 += 1 };
  s4 -> s2 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1, R7944 += 1, R5989 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1, R7943 += 1, R7944 += 1 };
  s4 -> s4 [0, 65535] { R8036 += 1, R7990 += 1, R7957 += 1, R7958 += 1 };
  s5 -> s5 [0, 65535] { R8036 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8036 += 1, R7990 += 1 };
  s7 -> s5 [0, 65535] { R8036 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8036 += 1, R7990 += 1, R7958 += 1 };
  s8 -> s7 [0, 65535] { R8036 += 1, R7990 += 1 };
  s8 -> s5 [0, 65535] { R8036 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8038 += 1, R7992 += 1, R7960 += 1 };
  s0 -> s0 [0, 65535] { R8037 += 1, R8038 += 1 };
  s0 -> s2 [0, 65535] { R8038 += 1, R7992 += 1, R7959 += 1, R7960 += 1 };
  s0 -> s3 [0, 65535] { R8038 += 1, R7991 += 1, R7992 += 1 };
  s1 -> s1 [0, 65535] { R8038 += 1, R7992 += 1, R7960 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8038 += 1, R7992 += 1 };
  s1 -> s5 [0, 65535] { R8038 += 1 };
  s2 -> s1 [0, 65535] { R8038 += 1, R7992 += 1, R7960 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8038 += 1 };
  s2 -> s2 [0, 65535] { R8038 += 1, R7992 += 1, R7959 += 1, R7960 += 1 };
  s3 -> s1 [0, 65535] { R8038 += 1, R7992 += 1, R7960 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8038 += 1, R7992 += 1, R7959 += 1, R7960 += 1 };
  s3 -> s3 [0, 65535] { R8038 += 1, R7991 += 1, R7992 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8038 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8038 += 1, R7992 += 1 };
  s6 -> s5 [0, 65535] { R8038 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R7938 && R2 = R7960 && R3 = R7070 && R4 = R8038 && R15 = 0 && R16 = R7992 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R7063 - R7992 = 1 && R7064 = R7070 && R7065 - R7992 = 1 && R7066 = R7070 && R7067 - R7992 = 1 && R7068 = R7070 && R7069 - R7992 = 1 && R7937 = 0 && R7941 = 0 && R7942 = 0 && R7945 = 0 && R7946 = R7960 && R7947 = 0 && R7948 = R7960 && R7949 = 0 && R7950 = R7960 && R7951 = 0 && R7952 = R7960 && R7953 = 0 && R7954 = R7960 && R7955 = 0 && R7956 = R7960 && R7957 = 0 && R7958 = R7960 && R7959 = 0 && R7961 = 0 && R7962 = R7992 && R7963 = 0 && R7964 = R7992 && R7965 = 0 && R7966 = R7992 && R7967 = 0 && R7968 = R7992 && R7969 = 0 && R7970 = R7992 && R7971 = 0 && R7972 = R7992 && R7973 = 0 && R7974 = R7992 && R7975 = 0 && R7976 = R7992 && R7977 = 0 && R7978 = R7992 && R7979 = 0 && R7980 = R7992 && R7981 = 0 && R7982 = R7992 && R7983 = 0 && R7984 = R7992 && R7985 = 0 && R7986 = R7992 && R7987 = 0 && R7988 = R7992 && R7989 = 0 && R7990 = R7992 && R7991 = 0 && R7993 = 10 && R7994 = R8038 && R7995 = 10 && R7996 = R8038 && R7997 = 10 && R7998 = R8038 && R7999 = 10 && R8000 = R8038 && R8001 = 10 && R8002 = R8038 && R8003 = 10 && R8004 = R8038 && R8005 = 10 && R8006 = R8038 && R8007 = 10 && R8008 = R8038 && R8009 = 10 && R8010 = R8038 && R8011 = 10 && R8012 = R8038 && R8013 = 10 && R8014 = R8038 && R8015 = 10 && R8016 = R8038 && R8017 = 10 && R8018 = R8038 && R8019 = 10 && R8020 = R8038 && R8021 = 10 && R8022 = R8038 && R8023 = 10 && R8024 = R8038 && R8025 = 10 && R8026 = R8038 && R8027 = 10 && R8028 = R8038 && R8029 = 10 && R8030 = R8038 && R8031 = 10 && R8032 = R8038 && R8033 = 10 && R8034 = R8038 && R8035 = 10 && R8036 = R8038 && R8037 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R7992 < R7070 && -1 < R7938 && 0 < R7960 && -1 < R7992 && 9 < R8038 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R7933 != 0 || R7934 = R7938 || (R5988 = 0 && R7938 = 0)) && (R7935 != 0 || R7936 = R7938 || (R5988 = 0 && R7938 = 0)) && (R5989 = 0 || (R7943 = 0 && R7944 = 0)) && (R5990 = 0 || (R7939 = 0 && R7940 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R7933 = 0 || (R5988 = 0 && R7938 = 0)) && (R7935 = 0 || (R5988 = 0 && R7938 = 0));
// End of Parikh automata intersection problem
