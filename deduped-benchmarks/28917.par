// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10649, R10650, R10651, R10652, R10653, R10654, R10655, R10656, R10657, R10658, R10659, R10660, R10661, R10662, R10663, R10664, R10665, R10666, R10667, R10668, R10669, R10670, R10671, R10672, R10673, R10674, R10675, R10676, R10677, R10678, R10679, R10680, R10681, R10682, R10683, R10684, R10685, R10686, R10687, R10688, R10689, R10690, R10691, R10692, R10693, R10694, R10695, R10696, R10697, R10698, R10699, R10700, R10701, R10702, R10703, R10704, R10705, R10706, R10707, R10708, R10709, R10710, R10711, R10712, R10713, R10714, R10715, R10716, R10717, R10718, R10719, R10720, R10721, R10722, R10723, R10724, R10725, R10726, R10727, R10728, R10729, R10730, R10731, R10732, R10733, R10734, R10735, R10736, R10737, R10738, R10739, R10740, R10741, R10742, R10743, R10744, R10745, R10746, R10747, R10748, R10749, R10750, R10751, R10752, R10753, R10754, R10755, R10756, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R10712 += 1 };
  s0 -> s0 [0, 65535] { R10711 += 1, R10712 += 1 };
  s0 -> s2 [46, 46] { R10712 += 1 };
  s0 -> s3 [47, 47] { R10712 += 1 };
  s0 -> s1 [48, 65535] { R10712 += 1 };
  s1 -> s1 [0, 45] { R10712 += 1 };
  s1 -> s2 [46, 46] { R10712 += 1 };
  s1 -> s3 [47, 47] { R10712 += 1 };
  s1 -> s1 [48, 65535] { R10712 += 1 };
  s2 -> s1 [0, 45] { R10712 += 1 };
  s2 -> s2 [46, 46] { R10712 += 1 };
  s2 -> s3 [47, 47] { R10712 += 1 };
  s2 -> s1 [48, 114] { R10712 += 1 };
  s2 -> s8 [115, 115] { R10712 += 1 };
  s2 -> s1 [116, 65535] { R10712 += 1 };
  s3 -> s3 [0, 45] { R10712 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R10712 += 1 };
  s3 -> s3 [47, 65535] { R10712 += 1 };
  s4 -> s3 [0, 45] { R10712 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R10712 += 1 };
  s4 -> s3 [47, 114] { R10712 += 1 };
  s4 -> s5 [115, 115] { R10712 += 1 };
  s4 -> s3 [116, 65535] { R10712 += 1 };
  s5 -> s3 [0, 45] { R10712 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R10712 += 1 };
  s5 -> s3 [47, 110] { R10712 += 1 };
  s5 -> s6 [111, 111] { R10712 += 1 };
  s5 -> s3 [112, 65535] { R10712 += 1 };
  s6 -> s3 [0, 45] { R10712 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R10712 += 1 };
  s6 -> s3 [47, 98] { R10712 += 1 };
  s6 -> s7 [99, 99] { R10712 += 1 };
  s6 -> s3 [100, 65535] { R10712 += 1 };
  s7 -> s3 [0, 45] { R10712 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R10712 += 1 };
  s7 -> s3 [47, 106] { R10712 += 1 };
  s7 -> s3 [108, 65535] { R10712 += 1 };
  s8 -> s1 [0, 45] { R10712 += 1 };
  s8 -> s2 [46, 46] { R10712 += 1 };
  s8 -> s3 [47, 47] { R10712 += 1 };
  s8 -> s1 [48, 110] { R10712 += 1 };
  s8 -> s9 [111, 111] { R10712 += 1 };
  s8 -> s1 [112, 65535] { R10712 += 1 };
  s9 -> s1 [0, 45] { R10712 += 1 };
  s9 -> s2 [46, 46] { R10712 += 1 };
  s9 -> s3 [47, 47] { R10712 += 1 };
  s9 -> s1 [48, 98] { R10712 += 1 };
  s9 -> s10 [99, 99] { R10712 += 1 };
  s9 -> s1 [100, 65535] { R10712 += 1 };
  s10 -> s1 [0, 45] { R10712 += 1 };
  s10 -> s2 [46, 46] { R10712 += 1 };
  s10 -> s3 [47, 47] { R10712 += 1 };
  s10 -> s1 [48, 106] { R10712 += 1 };
  s10 -> s1 [108, 65535] { R10712 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10713 += 1, R10714 += 1 };
  s0 -> s1 [0, 65535] { R10714 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R10714 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R10716 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10715 += 1, R10716 += 1 };
  s0 -> s2 [0, 65535] { R10716 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R10716 += 1 };
  s0 -> s1 [48, 65535] { R10716 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R10716 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R10716 += 1 };
  s1 -> s1 [48, 65535] { R10716 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R10716 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R10716 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R10716 += 1 };
  s2 -> s1 [48, 65535] { R10716 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R10716 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R10718 += 1, R10320 += 1 };
  s0 -> s2 [0, 65535] { R10718 += 1, R10319 += 1, R10320 += 1 };
  s0 -> s0 [0, 65535] { R10717 += 1, R10718 += 1 };
  s0 -> s1 [38, 42] { R10718 += 1, R10320 += 1 };
  s0 -> s1 [44, 45] { R10718 += 1, R10320 += 1 };
  s0 -> s1 [47, 62] { R10718 += 1, R10320 += 1 };
  s0 -> s1 [64, 65535] { R10718 += 1, R10320 += 1 };
  s1 -> s1 [0, 36] { R10718 += 1, R10320 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10718 += 1 };
  s1 -> s1 [38, 42] { R10718 += 1, R10320 += 1 };
  s1 -> s1 [44, 45] { R10718 += 1, R10320 += 1 };
  s1 -> s1 [47, 62] { R10718 += 1, R10320 += 1 };
  s1 -> s1 [64, 65535] { R10718 += 1, R10320 += 1 };
  s2 -> s1 [0, 36] { R10718 += 1, R10320 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10718 += 1, R10319 += 1, R10320 += 1 };
  s2 -> s1 [38, 42] { R10718 += 1, R10320 += 1 };
  s2 -> s1 [44, 45] { R10718 += 1, R10320 += 1 };
  s2 -> s1 [47, 62] { R10718 += 1, R10320 += 1 };
  s2 -> s1 [64, 65535] { R10718 += 1, R10320 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R10720 += 1, R10321 += 1, R10322 += 1 };
  s0 -> s0 [0, 65535] { R10719 += 1, R10720 += 1 };
  s0 -> s2 [0, 65535] { R10720 += 1, R10322 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R10720 += 1, R10321 += 1, R10322 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10720 += 1, R10322 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10720 += 1, R10322 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R10720 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10720 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R10722 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R10721 += 1, R10722 += 1 };
  s0 -> s3 [0, 65535] { R10722 += 1, R10323 += 1, R10324 += 1 };
  s0 -> s4 [63, 63] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R10722 += 1, R10324 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10722 += 1 };
  s1 -> s1 [0, 65535] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R10722 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10722 += 1 };
  s2 -> s4 [63, 63] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R10722 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10722 += 1, R10323 += 1, R10324 += 1 };
  s3 -> s4 [63, 63] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R10722 += 1, R10324 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10722 += 1 };
  s7 -> s7 [0, 65535] { R10722 += 1, R10324 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10722 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10724 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R10724 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R10723 += 1, R10724 += 1 };
  s0 -> s3 [0, 65535] { R10724 += 1, R10325 += 1, R10326 += 1 };
  s1 -> s1 [0, 65535] { R10724 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R10724 += 1 };
  s1 -> s6 [0, 65535] { R10724 += 1, R10326 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10724 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R10724 += 1 };
  s2 -> s2 [0, 65535] { R10724 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10724 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R10724 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10724 += 1, R10325 += 1, R10326 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10724 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10724 += 1 };
  s6 -> s6 [0, 65535] { R10724 += 1, R10326 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R10726 += 1, R10680 += 1 };
  s0 -> s2 [0, 65535] { R10726 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s0 [0, 65535] { R10725 += 1, R10726 += 1 };
  s0 -> s1 [45, 63] { R10726 += 1, R10680 += 1 };
  s0 -> s3 [88, 88] { R10726 += 1, R10680 += 1 };
  s0 -> s1 [89, 65535] { R10726 += 1, R10680 += 1 };
  s1 -> s1 [0, 43] { R10726 += 1, R10680 += 1 };
  s1 -> s1 [45, 63] { R10726 += 1, R10680 += 1 };
  s1 -> s3 [88, 88] { R10726 += 1, R10680 += 1 };
  s1 -> s1 [89, 65535] { R10726 += 1, R10680 += 1 };
  s2 -> s1 [0, 43] { R10726 += 1, R10680 += 1 };
  s2 -> s2 [0, 65535] { R10726 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s1 [45, 63] { R10726 += 1, R10680 += 1 };
  s2 -> s3 [88, 88] { R10726 += 1, R10680 += 1 };
  s2 -> s1 [89, 65535] { R10726 += 1, R10680 += 1 };
  s3 -> s3 [0, 43] { R10726 += 1, R10680 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10726 += 1 };
  s3 -> s3 [45, 63] { R10726 += 1, R10680 += 1 };
  s3 -> s3 [88, 65535] { R10726 += 1, R10680 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R10728 += 1, R10682 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10727 += 1, R10728 += 1 };
  s0 -> s2 [0, 65535] { R10728 += 1, R10681 += 1, R10682 += 1 };
  s1 -> s1 [0, 65535] { R10728 += 1, R10682 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R10728 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10728 += 1, R10682 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R10728 += 1, R10681 += 1, R10682 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10728 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R10730 += 1, R10684 += 1 };
  s0 -> s0 [0, 65535] { R10729 += 1, R10730 += 1 };
  s0 -> s2 [0, 65535] { R10730 += 1, R10684 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R10730 += 1, R10683 += 1, R10684 += 1 };
  s0 -> s4 [58, 58] { R10730 += 1, R10684 += 1 };
  s0 -> s1 [59, 65535] { R10730 += 1, R10684 += 1 };
  s1 -> s1 [0, 57] { R10730 += 1, R10684 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10730 += 1 };
  s1 -> s4 [58, 58] { R10730 += 1, R10684 += 1 };
  s1 -> s1 [59, 65535] { R10730 += 1, R10684 += 1 };
  s2 -> s1 [0, 57] { R10730 += 1, R10684 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10730 += 1, R10684 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R10730 += 1 };
  s2 -> s4 [58, 58] { R10730 += 1, R10684 += 1 };
  s2 -> s1 [59, 65535] { R10730 += 1, R10684 += 1 };
  s3 -> s1 [0, 57] { R10730 += 1, R10684 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10730 += 1, R10684 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R10730 += 1, R10683 += 1, R10684 += 1 };
  s3 -> s4 [58, 58] { R10730 += 1, R10684 += 1 };
  s3 -> s1 [59, 65535] { R10730 += 1, R10684 += 1 };
  s4 -> s4 [0, 65535] { R10730 += 1, R10684 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10730 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R10732 += 1, R10686 += 1 };
  s0 -> s2 [0, 65535] { R10732 += 1, R10686 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R10732 += 1, R10685 += 1, R10686 += 1 };
  s0 -> s0 [0, 65535] { R10731 += 1, R10732 += 1 };
  s0 -> s4 [88, 88] { R10732 += 1, R10686 += 1 };
  s0 -> s1 [89, 65535] { R10732 += 1, R10686 += 1 };
  s1 -> s1 [0, 87] { R10732 += 1, R10686 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10732 += 1 };
  s1 -> s4 [88, 88] { R10732 += 1, R10686 += 1 };
  s1 -> s1 [89, 65535] { R10732 += 1, R10686 += 1 };
  s2 -> s1 [0, 87] { R10732 += 1, R10686 += 1 };
  s2 -> s6 [0, 65535] { R10732 += 1 };
  s2 -> s2 [0, 65535] { R10732 += 1, R10686 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R10732 += 1, R10686 += 1 };
  s2 -> s1 [89, 65535] { R10732 += 1, R10686 += 1 };
  s3 -> s1 [0, 87] { R10732 += 1, R10686 += 1 };
  s3 -> s2 [0, 65535] { R10732 += 1, R10686 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10732 += 1, R10685 += 1, R10686 += 1 };
  s3 -> s4 [88, 88] { R10732 += 1, R10686 += 1 };
  s3 -> s1 [89, 65535] { R10732 += 1, R10686 += 1 };
  s4 -> s4 [0, 65535] { R10732 += 1, R10686 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10732 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R10734 += 1, R10688 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R10733 += 1, R10734 += 1 };
  s0 -> s3 [0, 65535] { R10734 += 1, R10687 += 1, R10688 += 1 };
  s0 -> s4 [91, 91] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R10734 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R10734 += 1, R10688 += 1 };
  s2 -> s1 [0, 90] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R10734 += 1, R10688 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R10734 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R10734 += 1, R10688 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10734 += 1, R10687 += 1, R10688 += 1 };
  s3 -> s4 [91, 91] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R10734 += 1, R10688 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10734 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10734 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10734 += 1, R10688 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10736 += 1, R10689 += 1, R10690 += 1 };
  s0 -> s0 [0, 65535] { R10735 += 1, R10736 += 1 };
  s0 -> s2 [0, 65535] { R10736 += 1, R10690 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R10736 += 1, R10690 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s1 [0, 65535] { R10736 += 1, R10689 += 1, R10690 += 1 };
  s1 -> s2 [0, 65535] { R10736 += 1, R10690 += 1, R5998 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R10736 += 1, R10690 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10736 += 1, R10690 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10736 += 1 };
  s2 -> s6 [0, 65535] { R10736 += 1, R10690 += 1 };
  s3 -> s2 [0, 65535] { R10736 += 1, R10690 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R10736 += 1, R10690 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10736 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10736 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10736 += 1 };
  s6 -> s6 [0, 65535] { R10736 += 1, R10690 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10738 += 1, R10692 += 1, R10656 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R10737 += 1, R10738 += 1 };
  s0 -> s2 [0, 65535] { R10738 += 1, R10692 += 1, R10655 += 1, R10656 += 1 };
  s0 -> s3 [0, 65535] { R10738 += 1, R10691 += 1, R10692 += 1 };
  s1 -> s5 [0, 65535] { R10738 += 1 };
  s1 -> s1 [0, 65535] { R10738 += 1, R10692 += 1, R10656 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R10738 += 1, R10692 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10738 += 1 };
  s2 -> s1 [0, 65535] { R10738 += 1, R10692 += 1, R10656 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R10738 += 1, R10692 += 1, R10655 += 1, R10656 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10738 += 1, R10692 += 1, R10656 += 1, R5990 += 1 };
  s3 -> s2 [0, 65535] { R10738 += 1, R10692 += 1, R10655 += 1, R10656 += 1 };
  s3 -> s3 [0, 65535] { R10738 += 1, R10691 += 1, R10692 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10738 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10738 += 1 };
  s6 -> s6 [0, 65535] { R10738 += 1, R10692 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10740 += 1, R10694 += 1, R10657 += 1, R10658 += 1 };
  s0 -> s0 [0, 65535] { R10739 += 1, R10740 += 1 };
  s0 -> s2 [0, 65535] { R10740 += 1, R10693 += 1, R10694 += 1 };
  s0 -> s3 [108, 108] { R10740 += 1, R10694 += 1, R10658 += 1 };
  s1 -> s1 [0, 65535] { R10740 += 1, R10694 += 1, R10657 += 1, R10658 += 1 };
  s1 -> s3 [108, 108] { R10740 += 1, R10694 += 1, R10658 += 1 };
  s2 -> s1 [0, 65535] { R10740 += 1, R10694 += 1, R10657 += 1, R10658 += 1 };
  s2 -> s2 [0, 65535] { R10740 += 1, R10693 += 1, R10694 += 1 };
  s2 -> s3 [108, 108] { R10740 += 1, R10694 += 1, R10658 += 1 };
  s3 -> s4 [111, 111] { R10740 += 1, R10694 += 1, R10658 += 1 };
  s4 -> s5 [99, 99] { R10740 += 1, R10694 += 1, R10658 += 1 };
  s5 -> s6 [97, 97] { R10740 += 1, R10694 += 1, R10658 += 1 };
  s6 -> s7 [108, 108] { R10740 += 1, R10694 += 1, R10658 += 1 };
  s7 -> s8 [0, 65535] { R10740 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R10740 += 1, R10694 += 1 };
  s8 -> s8 [0, 65535] { R10740 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s7, s8, s9;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s0 -> s0 [0, 65535] { R10741 += 1, R10742 += 1 };
  s0 -> s2 [0, 65535] { R10742 += 1, R10695 += 1, R10696 += 1 };
  s0 -> s3 [0, 65535] { R10742 += 1, R10696 += 1, R10663 += 1, R10664 += 1 };
  s0 -> s4 [88, 88] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s0 -> s1 [89, 65535] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s1 -> s1 [0, 87] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s1 -> s4 [88, 88] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s1 -> s1 [89, 65535] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s2 -> s1 [0, 87] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s2 -> s2 [0, 65535] { R10742 += 1, R10695 += 1, R10696 += 1 };
  s2 -> s3 [0, 65535] { R10742 += 1, R10696 += 1, R10663 += 1, R10664 += 1 };
  s2 -> s4 [88, 88] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s2 -> s1 [89, 65535] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s3 -> s1 [0, 87] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s3 -> s3 [0, 65535] { R10742 += 1, R10696 += 1, R10663 += 1, R10664 += 1 };
  s3 -> s4 [88, 88] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s3 -> s1 [89, 65535] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10742 += 1 };
  s4 -> s7 [0, 65535] { R10742 += 1, R10696 += 1 };
  s4 -> s4 [0, 65535] { R10742 += 1, R10696 += 1, R10664 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10742 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10742 += 1 };
  s7 -> s7 [0, 65535] { R10742 += 1, R10696 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10744 += 1, R10698 += 1, R10666 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10743 += 1, R10744 += 1 };
  s0 -> s2 [0, 65535] { R10744 += 1, R10698 += 1, R10665 += 1, R10666 += 1 };
  s0 -> s3 [0, 65535] { R10744 += 1, R10697 += 1, R10698 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10744 += 1 };
  s1 -> s1 [0, 65535] { R10744 += 1, R10698 += 1, R10666 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R10744 += 1, R10698 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10744 += 1 };
  s2 -> s1 [0, 65535] { R10744 += 1, R10698 += 1, R10666 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R10744 += 1, R10698 += 1, R10665 += 1, R10666 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10744 += 1, R10698 += 1, R10666 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R10744 += 1, R10698 += 1, R10665 += 1, R10666 += 1 };
  s3 -> s3 [0, 65535] { R10744 += 1, R10697 += 1, R10698 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10744 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10744 += 1 };
  s6 -> s6 [0, 65535] { R10744 += 1, R10698 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s0 -> s0 [0, 65535] { R10745 += 1, R10746 += 1 };
  s0 -> s2 [0, 65535] { R10746 += 1, R10700 += 1, R10667 += 1, R10668 += 1 };
  s0 -> s3 [0, 65535] { R10746 += 1, R10699 += 1, R10700 += 1 };
  s0 -> s4 [0, 65535] { R10746 += 1, R10700 += 1, R10668 += 1, R7 += 1 };
  s0 -> s5 [88, 88] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s0 -> s1 [89, 65535] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s1 -> s1 [0, 87] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10746 += 1, R10700 += 1 };
  s1 -> s8 [0, 65535] { R10746 += 1 };
  s1 -> s5 [88, 88] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s1 -> s1 [89, 65535] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s2 -> s1 [0, 87] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10746 += 1, R10700 += 1, R10667 += 1, R10668 += 1 };
  s2 -> s8 [0, 65535] { R10746 += 1 };
  s2 -> s4 [0, 65535] { R10746 += 1, R10700 += 1, R10668 += 1, R7 += 1 };
  s2 -> s5 [88, 88] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s2 -> s1 [89, 65535] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s3 -> s1 [0, 87] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R10746 += 1, R10700 += 1, R10667 += 1, R10668 += 1 };
  s3 -> s3 [0, 65535] { R10746 += 1, R10699 += 1, R10700 += 1 };
  s3 -> s4 [0, 65535] { R10746 += 1, R10700 += 1, R10668 += 1, R7 += 1 };
  s3 -> s5 [88, 88] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s3 -> s1 [89, 65535] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s4 -> s1 [0, 87] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10746 += 1, R10700 += 1 };
  s4 -> s8 [0, 65535] { R10746 += 1 };
  s4 -> s4 [0, 65535] { R10746 += 1, R10700 += 1, R10668 += 1, R7 += 1 };
  s4 -> s5 [88, 88] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s4 -> s1 [89, 65535] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s5 -> s5 [0, 65535] { R10746 += 1, R10700 += 1, R10668 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10746 += 1, R10700 += 1 };
  s7 -> s8 [0, 65535] { R10746 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10746 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s0 -> s2 [0, 65535] { R10748 += 1, R10702 += 1, R10669 += 1, R10670 += 1 };
  s0 -> s3 [0, 65535] { R10748 += 1, R10702 += 1, R10670 += 1, R10649 += 1, R10650 += 1 };
  s0 -> s0 [0, 65535] { R10747 += 1, R10748 += 1 };
  s0 -> s4 [0, 65535] { R10748 += 1, R10701 += 1, R10702 += 1 };
  s0 -> s1 [89, 65535] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s1 -> s1 [0, 87] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s1 -> s1 [0, 65535] { R10748 += 1, R10702 += 1, R10670 += 1 };
  s1 -> s6 [0, 65535] { R10748 += 1, R10702 += 1 };
  s1 -> s7 [0, 65535] { R10748 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [89, 65535] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s2 -> s1 [0, 87] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s2 -> s2 [0, 65535] { R10748 += 1, R10702 += 1, R10669 += 1, R10670 += 1 };
  s2 -> s3 [0, 65535] { R10748 += 1, R10702 += 1, R10670 += 1, R10649 += 1, R10650 += 1 };
  s2 -> s7 [0, 65535] { R10748 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [89, 65535] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s3 -> s1 [0, 87] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s3 -> s3 [0, 65535] { R10748 += 1, R10702 += 1, R10670 += 1, R10649 += 1, R10650 += 1 };
  s3 -> s6 [0, 65535] { R10748 += 1, R10702 += 1 };
  s3 -> s7 [0, 65535] { R10748 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [89, 65535] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s4 -> s1 [0, 87] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s4 -> s2 [0, 65535] { R10748 += 1, R10702 += 1, R10669 += 1, R10670 += 1 };
  s4 -> s3 [0, 65535] { R10748 += 1, R10702 += 1, R10670 += 1, R10649 += 1, R10650 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10748 += 1, R10701 += 1, R10702 += 1 };
  s4 -> s1 [89, 65535] { R10748 += 1, R10702 += 1, R10670 += 1, R10650 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10748 += 1, R10702 += 1 };
  s6 -> s7 [0, 65535] { R10748 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10748 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10750 += 1, R10704 += 1, R10671 += 1, R10672 += 1 };
  s0 -> s2 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1, R10651 += 1, R10652 += 1 };
  s0 -> s3 [0, 65535] { R10750 += 1, R10703 += 1, R10704 += 1 };
  s0 -> s4 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1, R10652 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R10749 += 1, R10750 += 1 };
  s1 -> s1 [0, 65535] { R10750 += 1, R10704 += 1, R10671 += 1, R10672 += 1 };
  s1 -> s2 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1, R10651 += 1, R10652 += 1 };
  s1 -> s4 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1, R10652 += 1, R5988 += 1 };
  s1 -> s7 [0, 65535] { R10750 += 1 };
  s1 -> s8 [0, 65535];
  s2 -> s5 [0, 65535] { R10750 += 1, R10704 += 1 };
  s2 -> s2 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1, R10651 += 1, R10652 += 1 };
  s2 -> s4 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1, R10652 += 1, R5988 += 1 };
  s2 -> s7 [0, 65535] { R10750 += 1 };
  s2 -> s8 [0, 65535];
  s3 -> s1 [0, 65535] { R10750 += 1, R10704 += 1, R10671 += 1, R10672 += 1 };
  s3 -> s2 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1, R10651 += 1, R10652 += 1 };
  s3 -> s3 [0, 65535] { R10750 += 1, R10703 += 1, R10704 += 1 };
  s3 -> s4 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1, R10652 += 1, R5988 += 1 };
  s3 -> s8 [0, 65535];
  s4 -> s5 [0, 65535] { R10750 += 1, R10704 += 1 };
  s4 -> s6 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1 };
  s4 -> s4 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1, R10652 += 1, R5988 += 1 };
  s4 -> s7 [0, 65535] { R10750 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10750 += 1, R10704 += 1 };
  s5 -> s7 [0, 65535] { R10750 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s5 [0, 65535] { R10750 += 1, R10704 += 1 };
  s6 -> s6 [0, 65535] { R10750 += 1, R10704 += 1, R10672 += 1 };
  s6 -> s7 [0, 65535] { R10750 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10750 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10752 += 1, R10705 += 1, R10706 += 1 };
  s0 -> s0 [0, 65535] { R10751 += 1, R10752 += 1 };
  s0 -> s2 [0, 65535] { R10752 += 1, R10706 += 1, R10673 += 1, R10674 += 1 };
  s0 -> s3 [0, 65535] { R10752 += 1, R10706 += 1, R10674 += 1, R10653 += 1, R10654 += 1 };
  s0 -> s4 [111, 111] { R10752 += 1, R10706 += 1, R10674 += 1, R10654 += 1 };
  s1 -> s1 [0, 65535] { R10752 += 1, R10705 += 1, R10706 += 1 };
  s1 -> s2 [0, 65535] { R10752 += 1, R10706 += 1, R10673 += 1, R10674 += 1 };
  s1 -> s3 [0, 65535] { R10752 += 1, R10706 += 1, R10674 += 1, R10653 += 1, R10654 += 1 };
  s1 -> s4 [111, 111] { R10752 += 1, R10706 += 1, R10674 += 1, R10654 += 1 };
  s2 -> s2 [0, 65535] { R10752 += 1, R10706 += 1, R10673 += 1, R10674 += 1 };
  s2 -> s3 [0, 65535] { R10752 += 1, R10706 += 1, R10674 += 1, R10653 += 1, R10654 += 1 };
  s2 -> s4 [111, 111] { R10752 += 1, R10706 += 1, R10674 += 1, R10654 += 1 };
  s3 -> s3 [0, 65535] { R10752 += 1, R10706 += 1, R10674 += 1, R10653 += 1, R10654 += 1 };
  s3 -> s4 [111, 111] { R10752 += 1, R10706 += 1, R10674 += 1, R10654 += 1 };
  s4 -> s5 [115, 115] { R10752 += 1, R10706 += 1, R10674 += 1, R10654 += 1 };
  s5 -> s6 [116, 116] { R10752 += 1, R10706 += 1, R10674 += 1, R10654 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R10752 += 1 };
  s6 -> s9 [0, 65535] { R10752 += 1, R10706 += 1 };
  s6 -> s6 [0, 65535] { R10752 += 1, R10706 += 1, R10674 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10752 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R10752 += 1 };
  s9 -> s9 [0, 65535] { R10752 += 1, R10706 += 1 };
  accepting s6, s7, s8, s9;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10754 += 1, R10707 += 1, R10708 += 1 };
  s0 -> s2 [0, 65535] { R10754 += 1, R10708 += 1, R10675 += 1, R10676 += 1 };
  s0 -> s3 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1, R10660 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1, R10659 += 1, R10660 += 1 };
  s0 -> s0 [0, 65535] { R10753 += 1, R10754 += 1 };
  s1 -> s1 [0, 65535] { R10754 += 1, R10707 += 1, R10708 += 1 };
  s1 -> s2 [0, 65535] { R10754 += 1, R10708 += 1, R10675 += 1, R10676 += 1 };
  s1 -> s3 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1, R10660 += 1, R5989 += 1 };
  s1 -> s4 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1, R10659 += 1, R10660 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10754 += 1, R10708 += 1, R10675 += 1, R10676 += 1 };
  s2 -> s3 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1, R10660 += 1, R5989 += 1 };
  s2 -> s4 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1, R10659 += 1, R10660 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10754 += 1 };
  s3 -> s8 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1 };
  s3 -> s3 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1, R10660 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10754 += 1 };
  s3 -> s7 [0, 65535] { R10754 += 1, R10708 += 1 };
  s4 -> s3 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1, R10660 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1, R10659 += 1, R10660 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10754 += 1 };
  s4 -> s7 [0, 65535] { R10754 += 1, R10708 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10754 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10754 += 1 };
  s7 -> s7 [0, 65535] { R10754 += 1, R10708 += 1 };
  s8 -> s8 [0, 65535] { R10754 += 1, R10708 += 1, R10676 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10754 += 1 };
  s8 -> s7 [0, 65535] { R10754 += 1, R10708 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10756 += 1, R10709 += 1, R10710 += 1 };
  s0 -> s2 [0, 65535] { R10756 += 1, R10710 += 1, R10677 += 1, R10678 += 1 };
  s0 -> s3 [0, 65535] { R10756 += 1, R10710 += 1, R10678 += 1, R10661 += 1, R10662 += 1 };
  s0 -> s0 [0, 65535] { R10755 += 1, R10756 += 1 };
  s0 -> s4 [104, 104] { R10756 += 1, R10710 += 1, R10678 += 1, R10662 += 1 };
  s1 -> s1 [0, 65535] { R10756 += 1, R10709 += 1, R10710 += 1 };
  s1 -> s2 [0, 65535] { R10756 += 1, R10710 += 1, R10677 += 1, R10678 += 1 };
  s1 -> s3 [0, 65535] { R10756 += 1, R10710 += 1, R10678 += 1, R10661 += 1, R10662 += 1 };
  s1 -> s4 [104, 104] { R10756 += 1, R10710 += 1, R10678 += 1, R10662 += 1 };
  s2 -> s2 [0, 65535] { R10756 += 1, R10710 += 1, R10677 += 1, R10678 += 1 };
  s2 -> s3 [0, 65535] { R10756 += 1, R10710 += 1, R10678 += 1, R10661 += 1, R10662 += 1 };
  s2 -> s4 [104, 104] { R10756 += 1, R10710 += 1, R10678 += 1, R10662 += 1 };
  s3 -> s3 [0, 65535] { R10756 += 1, R10710 += 1, R10678 += 1, R10661 += 1, R10662 += 1 };
  s3 -> s4 [104, 104] { R10756 += 1, R10710 += 1, R10678 += 1, R10662 += 1 };
  s4 -> s4 [0, 65535] { R10756 += 1, R10710 += 1, R10678 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10756 += 1 };
  s4 -> s7 [0, 65535] { R10756 += 1, R10710 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10756 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10756 += 1 };
  s7 -> s7 [0, 65535] { R10756 += 1, R10710 += 1 };
  accepting s4, s5, s6, s7;
};
};
constraint R1 = R10654 && R2 = R10678 && R3 = R10326 && R4 = R10756 && R15 = 0 && R16 = R10710 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R10319 - R10710 = 1 && R10320 = R10326 && R10321 - R10710 = 1 && R10322 = R10326 && R10323 - R10710 = 1 && R10324 = R10326 && R10325 - R10710 = 1 && R10653 = 0 && R10657 = 0 && R10658 = 0 && R10661 = 0 && R10662 = 0 && R10663 = 0 && R10664 = R10678 && R10665 = 0 && R10666 = R10678 && R10667 = 0 && R10668 = R10678 && R10669 = 0 && R10670 = R10678 && R10671 = 0 && R10672 = R10678 && R10673 = 0 && R10674 = R10678 && R10675 = 0 && R10676 = R10678 && R10677 = 0 && R10679 = 0 && R10680 = R10710 && R10681 = 0 && R10682 = R10710 && R10683 = 0 && R10684 = R10710 && R10685 = 0 && R10686 = R10710 && R10687 = 0 && R10688 = R10710 && R10689 = 0 && R10690 = R10710 && R10691 = 0 && R10692 = R10710 && R10693 = 0 && R10694 = R10710 && R10695 = 0 && R10696 = R10710 && R10697 = 0 && R10698 = R10710 && R10699 = 0 && R10700 = R10710 && R10701 = 0 && R10702 = R10710 && R10703 = 0 && R10704 = R10710 && R10705 = 0 && R10706 = R10710 && R10707 = 0 && R10708 = R10710 && R10709 = 0 && R10711 = 10 && R10712 = R10756 && R10713 = 10 && R10714 = R10756 && R10715 = 10 && R10716 = R10756 && R10717 = 10 && R10718 = R10756 && R10719 = 10 && R10720 = R10756 && R10721 = 10 && R10722 = R10756 && R10723 = 10 && R10724 = R10756 && R10725 = 10 && R10726 = R10756 && R10727 = 10 && R10728 = R10756 && R10729 = 10 && R10730 = R10756 && R10731 = 10 && R10732 = R10756 && R10733 = 10 && R10734 = R10756 && R10735 = 10 && R10736 = R10756 && R10737 = 10 && R10738 = R10756 && R10739 = 10 && R10740 = R10756 && R10741 = 10 && R10742 = R10756 && R10743 = 10 && R10744 = R10756 && R10745 = 10 && R10746 = R10756 && R10747 = 10 && R10748 = R10756 && R10749 = 10 && R10750 = R10756 && R10751 = 10 && R10752 = R10756 && R10753 = 10 && R10754 = R10756 && R10755 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R10710 < R10326 && -1 < R10654 && 0 < R10678 && -1 < R10710 && 9 < R10756 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R10649 != 0 || R10650 = R10654 || (R5988 = 0 && R10654 = 0)) && (R10651 != 0 || R10652 = R10654 || (R5988 = 0 && R10654 = 0)) && (R5989 = 0 || (R10659 = 0 && R10660 = 0)) && (R5990 = 0 || (R10655 = 0 && R10656 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R10649 = 0 || (R5988 = 0 && R10654 = 0)) && (R10651 = 0 || (R5988 = 0 && R10654 = 0));
// End of Parikh automata intersection problem
