// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R7063, R7064, R7065, R7066, R7067, R7068, R7069, R7070, R7609, R7610, R7611, R7612, R7613, R7614, R7615, R7616, R7617, R7618, R7619, R7620, R7621, R7622, R7623, R7624, R7625, R7626, R7627, R7628, R7629, R7630, R7631, R7632, R7633, R7634, R7635, R7636, R7637, R7638, R7639, R7640, R7641, R7642, R7643, R7644, R7645, R7646, R7647, R7648, R7649, R7650, R7651, R7652, R7653, R7654, R7655, R7656, R7657, R7658, R7659, R7660, R7661, R7662, R7663, R7664, R7665, R7666, R7667, R7668, R7669, R7670, R7671, R7672, R7673, R7674, R7675, R7676, R7677, R7678, R7679, R7680, R7681, R7682, R7683, R7684, R7685, R7686, R7687, R7688, R7689, R7690, R7691, R7692, R7693, R7694, R7695, R7696, R7697, R7698, R7699, R7700, R7701, R7702, R7703, R7704, R7705, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R7716;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R7672 += 1 };
  s0 -> s0 [0, 65535] { R7671 += 1, R7672 += 1 };
  s0 -> s2 [46, 46] { R7672 += 1 };
  s0 -> s3 [47, 47] { R7672 += 1 };
  s0 -> s1 [48, 65535] { R7672 += 1 };
  s1 -> s1 [0, 45] { R7672 += 1 };
  s1 -> s2 [46, 46] { R7672 += 1 };
  s1 -> s3 [47, 47] { R7672 += 1 };
  s1 -> s1 [48, 65535] { R7672 += 1 };
  s2 -> s1 [0, 45] { R7672 += 1 };
  s2 -> s2 [46, 46] { R7672 += 1 };
  s2 -> s3 [47, 47] { R7672 += 1 };
  s2 -> s1 [48, 114] { R7672 += 1 };
  s2 -> s8 [115, 115] { R7672 += 1 };
  s2 -> s1 [116, 65535] { R7672 += 1 };
  s3 -> s3 [0, 45] { R7672 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R7672 += 1 };
  s3 -> s3 [47, 65535] { R7672 += 1 };
  s4 -> s3 [0, 45] { R7672 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R7672 += 1 };
  s4 -> s3 [47, 114] { R7672 += 1 };
  s4 -> s5 [115, 115] { R7672 += 1 };
  s4 -> s3 [116, 65535] { R7672 += 1 };
  s5 -> s3 [0, 45] { R7672 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R7672 += 1 };
  s5 -> s3 [47, 110] { R7672 += 1 };
  s5 -> s6 [111, 111] { R7672 += 1 };
  s5 -> s3 [112, 65535] { R7672 += 1 };
  s6 -> s3 [0, 45] { R7672 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R7672 += 1 };
  s6 -> s3 [47, 98] { R7672 += 1 };
  s6 -> s7 [99, 99] { R7672 += 1 };
  s6 -> s3 [100, 65535] { R7672 += 1 };
  s7 -> s3 [0, 45] { R7672 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R7672 += 1 };
  s7 -> s3 [47, 106] { R7672 += 1 };
  s7 -> s3 [108, 65535] { R7672 += 1 };
  s8 -> s1 [0, 45] { R7672 += 1 };
  s8 -> s2 [46, 46] { R7672 += 1 };
  s8 -> s3 [47, 47] { R7672 += 1 };
  s8 -> s1 [48, 110] { R7672 += 1 };
  s8 -> s9 [111, 111] { R7672 += 1 };
  s8 -> s1 [112, 65535] { R7672 += 1 };
  s9 -> s1 [0, 45] { R7672 += 1 };
  s9 -> s2 [46, 46] { R7672 += 1 };
  s9 -> s3 [47, 47] { R7672 += 1 };
  s9 -> s1 [48, 98] { R7672 += 1 };
  s9 -> s10 [99, 99] { R7672 += 1 };
  s9 -> s1 [100, 65535] { R7672 += 1 };
  s10 -> s1 [0, 45] { R7672 += 1 };
  s10 -> s2 [46, 46] { R7672 += 1 };
  s10 -> s3 [47, 47] { R7672 += 1 };
  s10 -> s1 [48, 106] { R7672 += 1 };
  s10 -> s1 [108, 65535] { R7672 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R7673 += 1, R7674 += 1 };
  s0 -> s1 [0, 65535] { R7674 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7674 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R7676 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R7676 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R7675 += 1, R7676 += 1 };
  s0 -> s3 [47, 47] { R7676 += 1 };
  s0 -> s1 [48, 65535] { R7676 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R7676 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R7676 += 1 };
  s1 -> s1 [48, 65535] { R7676 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R7676 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R7676 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R7676 += 1 };
  s2 -> s1 [48, 65535] { R7676 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7676 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R7678 += 1, R7064 += 1 };
  s0 -> s0 [0, 65535] { R7677 += 1, R7678 += 1 };
  s0 -> s2 [0, 65535] { R7678 += 1, R7063 += 1, R7064 += 1 };
  s0 -> s1 [38, 42] { R7678 += 1, R7064 += 1 };
  s0 -> s1 [44, 45] { R7678 += 1, R7064 += 1 };
  s0 -> s1 [47, 62] { R7678 += 1, R7064 += 1 };
  s0 -> s1 [64, 65535] { R7678 += 1, R7064 += 1 };
  s1 -> s1 [0, 36] { R7678 += 1, R7064 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7678 += 1 };
  s1 -> s1 [38, 42] { R7678 += 1, R7064 += 1 };
  s1 -> s1 [44, 45] { R7678 += 1, R7064 += 1 };
  s1 -> s1 [47, 62] { R7678 += 1, R7064 += 1 };
  s1 -> s1 [64, 65535] { R7678 += 1, R7064 += 1 };
  s2 -> s1 [0, 36] { R7678 += 1, R7064 += 1 };
  s2 -> s2 [0, 65535] { R7678 += 1, R7063 += 1, R7064 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R7678 += 1, R7064 += 1 };
  s2 -> s1 [44, 45] { R7678 += 1, R7064 += 1 };
  s2 -> s1 [47, 62] { R7678 += 1, R7064 += 1 };
  s2 -> s1 [64, 65535] { R7678 += 1, R7064 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R7680 += 1, R7066 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R7680 += 1, R7065 += 1, R7066 += 1 };
  s0 -> s0 [0, 65535] { R7679 += 1, R7680 += 1 };
  s1 -> s1 [0, 65535] { R7680 += 1, R7066 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R7680 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7680 += 1, R7066 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R7680 += 1, R7065 += 1, R7066 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7680 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R7682 += 1, R7067 += 1, R7068 += 1 };
  s0 -> s0 [0, 65535] { R7681 += 1, R7682 += 1 };
  s0 -> s3 [0, 65535] { R7682 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R7682 += 1 };
  s1 -> s7 [0, 65535] { R7682 += 1, R7068 += 1 };
  s2 -> s1 [0, 62] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7682 += 1, R7067 += 1, R7068 += 1 };
  s2 -> s3 [0, 65535] { R7682 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7682 += 1 };
  s3 -> s3 [0, 65535] { R7682 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R7682 += 1, R7068 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7682 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7682 += 1 };
  s7 -> s7 [0, 65535] { R7682 += 1, R7068 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7684 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R7683 += 1, R7684 += 1 };
  s0 -> s2 [0, 65535] { R7684 += 1, R7069 += 1, R7070 += 1 };
  s0 -> s3 [0, 65535] { R7684 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R7684 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R7684 += 1, R7070 += 1 };
  s1 -> s5 [0, 65535] { R7684 += 1 };
  s2 -> s1 [0, 65535] { R7684 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R7684 += 1, R7069 += 1, R7070 += 1 };
  s2 -> s3 [0, 65535] { R7684 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7684 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R7684 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7684 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7684 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7684 += 1, R7070 += 1 };
  s6 -> s5 [0, 65535] { R7684 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R7686 += 1, R7640 += 1 };
  s0 -> s2 [0, 65535] { R7686 += 1, R7639 += 1, R7640 += 1 };
  s0 -> s0 [0, 65535] { R7685 += 1, R7686 += 1 };
  s0 -> s1 [45, 63] { R7686 += 1, R7640 += 1 };
  s0 -> s3 [88, 88] { R7686 += 1, R7640 += 1 };
  s0 -> s1 [89, 65535] { R7686 += 1, R7640 += 1 };
  s1 -> s1 [0, 43] { R7686 += 1, R7640 += 1 };
  s1 -> s1 [45, 63] { R7686 += 1, R7640 += 1 };
  s1 -> s3 [88, 88] { R7686 += 1, R7640 += 1 };
  s1 -> s1 [89, 65535] { R7686 += 1, R7640 += 1 };
  s2 -> s1 [0, 43] { R7686 += 1, R7640 += 1 };
  s2 -> s2 [0, 65535] { R7686 += 1, R7639 += 1, R7640 += 1 };
  s2 -> s1 [45, 63] { R7686 += 1, R7640 += 1 };
  s2 -> s3 [88, 88] { R7686 += 1, R7640 += 1 };
  s2 -> s1 [89, 65535] { R7686 += 1, R7640 += 1 };
  s3 -> s3 [0, 43] { R7686 += 1, R7640 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7686 += 1 };
  s3 -> s3 [45, 63] { R7686 += 1, R7640 += 1 };
  s3 -> s3 [88, 65535] { R7686 += 1, R7640 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R7688 += 1, R7642 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R7688 += 1, R7641 += 1, R7642 += 1 };
  s0 -> s0 [0, 65535] { R7687 += 1, R7688 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7688 += 1, R7642 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R7688 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7688 += 1, R7642 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R7688 += 1, R7641 += 1, R7642 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7688 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R7690 += 1, R7644 += 1 };
  s0 -> s0 [0, 65535] { R7689 += 1, R7690 += 1 };
  s0 -> s2 [0, 65535] { R7690 += 1, R7644 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R7690 += 1, R7643 += 1, R7644 += 1 };
  s0 -> s4 [58, 58] { R7690 += 1, R7644 += 1 };
  s0 -> s1 [59, 65535] { R7690 += 1, R7644 += 1 };
  s1 -> s1 [0, 57] { R7690 += 1, R7644 += 1 };
  s1 -> s1 [0, 65535] { R7690 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R7690 += 1, R7644 += 1 };
  s1 -> s1 [59, 65535] { R7690 += 1, R7644 += 1 };
  s2 -> s1 [0, 57] { R7690 += 1, R7644 += 1 };
  s2 -> s6 [0, 65535] { R7690 += 1 };
  s2 -> s2 [0, 65535] { R7690 += 1, R7644 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R7690 += 1, R7644 += 1 };
  s2 -> s1 [59, 65535] { R7690 += 1, R7644 += 1 };
  s3 -> s1 [0, 57] { R7690 += 1, R7644 += 1 };
  s3 -> s2 [0, 65535] { R7690 += 1, R7644 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R7690 += 1, R7643 += 1, R7644 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R7690 += 1, R7644 += 1 };
  s3 -> s1 [59, 65535] { R7690 += 1, R7644 += 1 };
  s4 -> s4 [0, 65535] { R7690 += 1, R7644 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7690 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R7692 += 1, R7646 += 1 };
  s0 -> s0 [0, 65535] { R7691 += 1, R7692 += 1 };
  s0 -> s2 [0, 65535] { R7692 += 1, R7645 += 1, R7646 += 1 };
  s0 -> s3 [0, 65535] { R7692 += 1, R7646 += 1, R11 += 1 };
  s0 -> s4 [88, 88] { R7692 += 1, R7646 += 1 };
  s0 -> s1 [89, 65535] { R7692 += 1, R7646 += 1 };
  s1 -> s1 [0, 87] { R7692 += 1, R7646 += 1 };
  s1 -> s1 [0, 65535] { R7692 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R7692 += 1, R7646 += 1 };
  s1 -> s1 [89, 65535] { R7692 += 1, R7646 += 1 };
  s2 -> s1 [0, 87] { R7692 += 1, R7646 += 1 };
  s2 -> s2 [0, 65535] { R7692 += 1, R7645 += 1, R7646 += 1 };
  s2 -> s3 [0, 65535] { R7692 += 1, R7646 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R7692 += 1, R7646 += 1 };
  s2 -> s1 [89, 65535] { R7692 += 1, R7646 += 1 };
  s3 -> s1 [0, 87] { R7692 += 1, R7646 += 1 };
  s3 -> s3 [0, 65535] { R7692 += 1, R7646 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7692 += 1 };
  s3 -> s4 [88, 88] { R7692 += 1, R7646 += 1 };
  s3 -> s1 [89, 65535] { R7692 += 1, R7646 += 1 };
  s4 -> s4 [0, 65535] { R7692 += 1, R7646 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7692 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R7693 += 1, R7694 += 1 };
  s0 -> s2 [0, 65535] { R7694 += 1, R7648 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R7694 += 1, R7647 += 1, R7648 += 1 };
  s0 -> s4 [91, 91] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R7694 += 1, R7648 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7694 += 1 };
  s2 -> s1 [0, 90] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7694 += 1 };
  s2 -> s2 [0, 65535] { R7694 += 1, R7648 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7694 += 1, R7648 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R7694 += 1, R7647 += 1, R7648 += 1 };
  s3 -> s4 [91, 91] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R7694 += 1, R7648 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7694 += 1 };
  s7 -> s7 [0, 65535] { R7694 += 1, R7648 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7694 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7696 += 1, R7650 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R7696 += 1, R7650 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R7696 += 1, R7649 += 1, R7650 += 1 };
  s0 -> s0 [0, 65535] { R7695 += 1, R7696 += 1 };
  s1 -> s1 [0, 65535] { R7696 += 1, R7650 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s2 [0, 65535] { R7696 += 1, R7650 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R7696 += 1 };
  s2 -> s2 [0, 65535] { R7696 += 1, R7650 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7696 += 1, R7650 += 1 };
  s2 -> s6 [0, 65535] { R7696 += 1 };
  s3 -> s1 [0, 65535] { R7696 += 1, R7650 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R7696 += 1, R7650 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R7696 += 1, R7649 += 1, R7650 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7696 += 1, R7650 += 1 };
  s5 -> s6 [0, 65535] { R7696 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7696 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7698 += 1, R7651 += 1, R7652 += 1 };
  s0 -> s0 [0, 65535] { R7697 += 1, R7698 += 1 };
  s0 -> s2 [0, 65535] { R7698 += 1, R7652 += 1, R7616 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R7698 += 1, R7652 += 1, R7615 += 1, R7616 += 1 };
  s1 -> s1 [0, 65535] { R7698 += 1, R7651 += 1, R7652 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R7698 += 1, R7652 += 1, R7616 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R7698 += 1, R7652 += 1, R7615 += 1, R7616 += 1 };
  s2 -> s4 [0, 65535] { R7698 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7698 += 1, R7652 += 1 };
  s2 -> s2 [0, 65535] { R7698 += 1, R7652 += 1, R7616 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R7698 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7698 += 1, R7652 += 1, R7616 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R7698 += 1, R7652 += 1, R7615 += 1, R7616 += 1 };
  s4 -> s4 [0, 65535] { R7698 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R7698 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7698 += 1, R7652 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R7699 += 1, R7700 += 1 };
  s0 -> s1 [0, 65535] { R7700 += 1, R7653 += 1, R7654 += 1 };
  s0 -> s2 [0, 65535] { R7700 += 1, R7654 += 1, R7617 += 1, R7618 += 1 };
  s0 -> s3 [108, 108] { R7700 += 1, R7654 += 1, R7618 += 1 };
  s1 -> s1 [0, 65535] { R7700 += 1, R7653 += 1, R7654 += 1 };
  s1 -> s2 [0, 65535] { R7700 += 1, R7654 += 1, R7617 += 1, R7618 += 1 };
  s1 -> s3 [108, 108] { R7700 += 1, R7654 += 1, R7618 += 1 };
  s2 -> s2 [0, 65535] { R7700 += 1, R7654 += 1, R7617 += 1, R7618 += 1 };
  s2 -> s3 [108, 108] { R7700 += 1, R7654 += 1, R7618 += 1 };
  s3 -> s4 [0, 65535] { R7700 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7700 += 1, R7654 += 1 };
  s4 -> s4 [0, 65535] { R7700 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s0 -> s2 [0, 65535] { R7702 += 1, R7656 += 1, R7623 += 1, R7624 += 1 };
  s0 -> s0 [0, 65535] { R7701 += 1, R7702 += 1 };
  s0 -> s3 [0, 65535] { R7702 += 1, R7655 += 1, R7656 += 1 };
  s0 -> s4 [88, 88] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s0 -> s1 [89, 65535] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s1 -> s1 [0, 87] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s1 -> s4 [88, 88] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s1 -> s1 [89, 65535] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s2 -> s1 [0, 87] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s2 -> s2 [0, 65535] { R7702 += 1, R7656 += 1, R7623 += 1, R7624 += 1 };
  s2 -> s4 [88, 88] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s2 -> s1 [89, 65535] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s3 -> s1 [0, 87] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s3 -> s2 [0, 65535] { R7702 += 1, R7656 += 1, R7623 += 1, R7624 += 1 };
  s3 -> s3 [0, 65535] { R7702 += 1, R7655 += 1, R7656 += 1 };
  s3 -> s4 [88, 88] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s3 -> s1 [89, 65535] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s4 -> s5 [0, 65535] { R7702 += 1 };
  s4 -> s6 [0, 65535] { R7702 += 1, R7656 += 1 };
  s4 -> s4 [0, 65535] { R7702 += 1, R7656 += 1, R7624 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R7702 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R7702 += 1 };
  s6 -> s6 [0, 65535] { R7702 += 1, R7656 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7703 += 1, R7704 += 1 };
  s0 -> s1 [0, 65535] { R7704 += 1, R7658 += 1, R7626 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R7704 += 1, R7657 += 1, R7658 += 1 };
  s0 -> s3 [0, 65535] { R7704 += 1, R7658 += 1, R7625 += 1, R7626 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7704 += 1 };
  s1 -> s6 [0, 65535] { R7704 += 1, R7658 += 1 };
  s1 -> s1 [0, 65535] { R7704 += 1, R7658 += 1, R7626 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R7704 += 1, R7658 += 1, R7626 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R7704 += 1, R7657 += 1, R7658 += 1 };
  s2 -> s3 [0, 65535] { R7704 += 1, R7658 += 1, R7625 += 1, R7626 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7704 += 1 };
  s3 -> s1 [0, 65535] { R7704 += 1, R7658 += 1, R7626 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R7704 += 1, R7658 += 1, R7625 += 1, R7626 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7704 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7704 += 1 };
  s6 -> s6 [0, 65535] { R7704 += 1, R7658 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s0 -> s0 [0, 65535] { R7705 += 1, R7706 += 1 };
  s0 -> s2 [0, 65535] { R7706 += 1, R7660 += 1, R7628 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R7706 += 1, R7660 += 1, R7627 += 1, R7628 += 1 };
  s0 -> s4 [0, 65535] { R7706 += 1, R7659 += 1, R7660 += 1 };
  s0 -> s5 [88, 88] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s0 -> s1 [89, 65535] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s1 -> s1 [0, 87] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7706 += 1, R7660 += 1 };
  s1 -> s7 [0, 65535] { R7706 += 1 };
  s1 -> s5 [88, 88] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s1 -> s1 [89, 65535] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s2 -> s1 [0, 87] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s2 -> s2 [0, 65535] { R7706 += 1, R7660 += 1, R7628 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R7706 += 1, R7660 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R7706 += 1 };
  s2 -> s5 [88, 88] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s2 -> s1 [89, 65535] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s3 -> s1 [0, 87] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s3 -> s2 [0, 65535] { R7706 += 1, R7660 += 1, R7628 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R7706 += 1, R7660 += 1, R7627 += 1, R7628 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R7706 += 1 };
  s3 -> s5 [88, 88] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s3 -> s1 [89, 65535] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s4 -> s1 [0, 87] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s4 -> s2 [0, 65535] { R7706 += 1, R7660 += 1, R7628 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R7706 += 1, R7660 += 1, R7627 += 1, R7628 += 1 };
  s4 -> s4 [0, 65535] { R7706 += 1, R7659 += 1, R7660 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [88, 88] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s4 -> s1 [89, 65535] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s5 -> s5 [0, 65535] { R7706 += 1, R7660 += 1, R7628 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7706 += 1 };
  s8 -> s8 [0, 65535] { R7706 += 1, R7660 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R7706 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s0 -> s2 [0, 65535] { R7708 += 1, R7662 += 1, R7630 += 1, R7609 += 1, R7610 += 1 };
  s0 -> s3 [0, 65535] { R7708 += 1, R7661 += 1, R7662 += 1 };
  s0 -> s0 [0, 65535] { R7707 += 1, R7708 += 1 };
  s0 -> s4 [0, 65535] { R7708 += 1, R7662 += 1, R7629 += 1, R7630 += 1 };
  s0 -> s1 [89, 65535] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s1 -> s1 [0, 87] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s1 -> s1 [0, 65535] { R7708 += 1, R7662 += 1, R7630 += 1 };
  s1 -> s7 [0, 65535] { R7708 += 1, R7662 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7708 += 1 };
  s1 -> s1 [89, 65535] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s2 -> s1 [0, 87] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s2 -> s2 [0, 65535] { R7708 += 1, R7662 += 1, R7630 += 1, R7609 += 1, R7610 += 1 };
  s2 -> s7 [0, 65535] { R7708 += 1, R7662 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7708 += 1 };
  s2 -> s1 [89, 65535] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s3 -> s1 [0, 87] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s3 -> s2 [0, 65535] { R7708 += 1, R7662 += 1, R7630 += 1, R7609 += 1, R7610 += 1 };
  s3 -> s3 [0, 65535] { R7708 += 1, R7661 += 1, R7662 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R7708 += 1, R7662 += 1, R7629 += 1, R7630 += 1 };
  s3 -> s1 [89, 65535] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s4 -> s1 [0, 87] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s4 -> s2 [0, 65535] { R7708 += 1, R7662 += 1, R7630 += 1, R7609 += 1, R7610 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7708 += 1, R7662 += 1, R7629 += 1, R7630 += 1 };
  s4 -> s6 [0, 65535] { R7708 += 1 };
  s4 -> s1 [89, 65535] { R7708 += 1, R7662 += 1, R7630 += 1, R7610 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7708 += 1 };
  s7 -> s7 [0, 65535] { R7708 += 1, R7662 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7708 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1, R7611 += 1, R7612 += 1 };
  s0 -> s2 [0, 65535] { R7710 += 1, R7664 += 1, R7631 += 1, R7632 += 1 };
  s0 -> s3 [0, 65535] { R7710 += 1, R7663 += 1, R7664 += 1 };
  s0 -> s4 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1, R7612 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R7709 += 1, R7710 += 1 };
  s1 -> s1 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1, R7611 += 1, R7612 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1, R7612 += 1, R5988 += 1 };
  s1 -> s7 [0, 65535] { R7710 += 1, R7664 += 1 };
  s1 -> s8 [0, 65535] { R7710 += 1 };
  s2 -> s1 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1, R7611 += 1, R7612 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7710 += 1, R7664 += 1, R7631 += 1, R7632 += 1 };
  s2 -> s4 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1, R7612 += 1, R5988 += 1 };
  s2 -> s8 [0, 65535] { R7710 += 1 };
  s3 -> s1 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1, R7611 += 1, R7612 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7710 += 1, R7664 += 1, R7631 += 1, R7632 += 1 };
  s3 -> s3 [0, 65535] { R7710 += 1, R7663 += 1, R7664 += 1 };
  s3 -> s4 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1, R7612 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1, R7612 += 1, R5988 += 1 };
  s4 -> s6 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1 };
  s4 -> s7 [0, 65535] { R7710 += 1, R7664 += 1 };
  s4 -> s8 [0, 65535] { R7710 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7710 += 1, R7664 += 1, R7632 += 1 };
  s6 -> s7 [0, 65535] { R7710 += 1, R7664 += 1 };
  s6 -> s8 [0, 65535] { R7710 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7710 += 1, R7664 += 1 };
  s7 -> s8 [0, 65535] { R7710 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R7710 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R7712 += 1, R7666 += 1, R7633 += 1, R7634 += 1 };
  s0 -> s2 [0, 65535] { R7712 += 1, R7665 += 1, R7666 += 1 };
  s0 -> s0 [0, 65535] { R7711 += 1, R7712 += 1 };
  s0 -> s3 [0, 65535] { R7712 += 1, R7666 += 1, R7634 += 1, R7613 += 1, R7614 += 1 };
  s0 -> s4 [108, 108] { R7712 += 1, R7666 += 1, R7634 += 1, R7614 += 1 };
  s1 -> s1 [0, 65535] { R7712 += 1, R7666 += 1, R7633 += 1, R7634 += 1 };
  s1 -> s3 [0, 65535] { R7712 += 1, R7666 += 1, R7634 += 1, R7613 += 1, R7614 += 1 };
  s1 -> s4 [108, 108] { R7712 += 1, R7666 += 1, R7634 += 1, R7614 += 1 };
  s2 -> s1 [0, 65535] { R7712 += 1, R7666 += 1, R7633 += 1, R7634 += 1 };
  s2 -> s2 [0, 65535] { R7712 += 1, R7665 += 1, R7666 += 1 };
  s2 -> s3 [0, 65535] { R7712 += 1, R7666 += 1, R7634 += 1, R7613 += 1, R7614 += 1 };
  s2 -> s4 [108, 108] { R7712 += 1, R7666 += 1, R7634 += 1, R7614 += 1 };
  s3 -> s3 [0, 65535] { R7712 += 1, R7666 += 1, R7634 += 1, R7613 += 1, R7614 += 1 };
  s3 -> s4 [108, 108] { R7712 += 1, R7666 += 1, R7634 += 1, R7614 += 1 };
  s4 -> s5 [104, 104] { R7712 += 1, R7666 += 1, R7634 += 1, R7614 += 1 };
  s5 -> s6 [111, 111] { R7712 += 1, R7666 += 1, R7634 += 1, R7614 += 1 };
  s6 -> s7 [115, 115] { R7712 += 1, R7666 += 1, R7634 += 1, R7614 += 1 };
  s7 -> s8 [116, 116] { R7712 += 1, R7666 += 1, R7634 += 1, R7614 += 1 };
  s8 -> s8 [0, 65535] { R7712 += 1, R7666 += 1, R7634 += 1 };
  s8 -> s9 [0, 65535] { R7712 += 1 };
  s8 -> s10 [0, 65535] { R7712 += 1, R7666 += 1 };
  s8 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R7712 += 1 };
  s9 -> s11 [0, 65535];
  s10 -> s9 [0, 65535] { R7712 += 1 };
  s10 -> s10 [0, 65535] { R7712 += 1, R7666 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s8, s9, s10, s11;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7714 += 1, R7668 += 1, R7635 += 1, R7636 += 1 };
  s0 -> s2 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1, R7620 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1, R7619 += 1, R7620 += 1 };
  s0 -> s4 [0, 65535] { R7714 += 1, R7667 += 1, R7668 += 1 };
  s0 -> s0 [0, 65535] { R7713 += 1, R7714 += 1 };
  s1 -> s1 [0, 65535] { R7714 += 1, R7668 += 1, R7635 += 1, R7636 += 1 };
  s1 -> s6 [0, 65535] { R7714 += 1 };
  s1 -> s2 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1, R7620 += 1, R5989 += 1 };
  s1 -> s3 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1, R7619 += 1, R7620 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s8 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1 };
  s2 -> s6 [0, 65535] { R7714 += 1 };
  s2 -> s2 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1, R7620 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R7714 += 1, R7668 += 1 };
  s3 -> s6 [0, 65535] { R7714 += 1 };
  s3 -> s2 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1, R7620 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1, R7619 += 1, R7620 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R7714 += 1, R7668 += 1 };
  s4 -> s1 [0, 65535] { R7714 += 1, R7668 += 1, R7635 += 1, R7636 += 1 };
  s4 -> s2 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1, R7620 += 1, R5989 += 1 };
  s4 -> s3 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1, R7619 += 1, R7620 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7714 += 1, R7667 += 1, R7668 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7714 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7714 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7714 += 1, R7668 += 1 };
  s8 -> s8 [0, 65535] { R7714 += 1, R7668 += 1, R7636 += 1 };
  s8 -> s6 [0, 65535] { R7714 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R7714 += 1, R7668 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R7716 += 1, R7670 += 1, R7637 += 1, R7638 += 1 };
  s0 -> s2 [0, 65535] { R7716 += 1, R7670 += 1, R7638 += 1, R7621 += 1, R7622 += 1 };
  s0 -> s0 [0, 65535] { R7715 += 1, R7716 += 1 };
  s0 -> s3 [0, 65535] { R7716 += 1, R7669 += 1, R7670 += 1 };
  s0 -> s4 [111, 111] { R7716 += 1, R7670 += 1, R7638 += 1, R7622 += 1 };
  s1 -> s1 [0, 65535] { R7716 += 1, R7670 += 1, R7637 += 1, R7638 += 1 };
  s1 -> s2 [0, 65535] { R7716 += 1, R7670 += 1, R7638 += 1, R7621 += 1, R7622 += 1 };
  s1 -> s4 [111, 111] { R7716 += 1, R7670 += 1, R7638 += 1, R7622 += 1 };
  s2 -> s2 [0, 65535] { R7716 += 1, R7670 += 1, R7638 += 1, R7621 += 1, R7622 += 1 };
  s2 -> s4 [111, 111] { R7716 += 1, R7670 += 1, R7638 += 1, R7622 += 1 };
  s3 -> s1 [0, 65535] { R7716 += 1, R7670 += 1, R7637 += 1, R7638 += 1 };
  s3 -> s2 [0, 65535] { R7716 += 1, R7670 += 1, R7638 += 1, R7621 += 1, R7622 += 1 };
  s3 -> s3 [0, 65535] { R7716 += 1, R7669 += 1, R7670 += 1 };
  s3 -> s4 [111, 111] { R7716 += 1, R7670 += 1, R7638 += 1, R7622 += 1 };
  s4 -> s5 [99, 99] { R7716 += 1, R7670 += 1, R7638 += 1, R7622 += 1 };
  s5 -> s6 [97, 97] { R7716 += 1, R7670 += 1, R7638 += 1, R7622 += 1 };
  s6 -> s6 [0, 65535] { R7716 += 1, R7670 += 1, R7638 += 1 };
  s6 -> s7 [0, 65535] { R7716 += 1, R7670 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R7716 += 1 };
  s7 -> s7 [0, 65535] { R7716 += 1, R7670 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R7716 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7716 += 1 };
  accepting s6, s7, s8, s9;
};
};
constraint R1 = R7614 && R2 = R7638 && R3 = R7070 && R4 = R7716 && R15 = 0 && R16 = R7670 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R7063 - R7670 = 1 && R7064 = R7070 && R7065 - R7670 = 1 && R7066 = R7070 && R7067 - R7670 = 1 && R7068 = R7070 && R7069 - R7670 = 1 && R7613 = 0 && R7617 = 0 && R7618 = 0 && R7621 = 0 && R7622 = 0 && R7623 = 0 && R7624 = R7638 && R7625 = 0 && R7626 = R7638 && R7627 = 0 && R7628 = R7638 && R7629 = 0 && R7630 = R7638 && R7631 = 0 && R7632 = R7638 && R7633 = 0 && R7634 = R7638 && R7635 = 0 && R7636 = R7638 && R7637 = 0 && R7639 = 0 && R7640 = R7670 && R7641 = 0 && R7642 = R7670 && R7643 = 0 && R7644 = R7670 && R7645 = 0 && R7646 = R7670 && R7647 = 0 && R7648 = R7670 && R7649 = 0 && R7650 = R7670 && R7651 = 0 && R7652 = R7670 && R7653 = 0 && R7654 = R7670 && R7655 = 0 && R7656 = R7670 && R7657 = 0 && R7658 = R7670 && R7659 = 0 && R7660 = R7670 && R7661 = 0 && R7662 = R7670 && R7663 = 0 && R7664 = R7670 && R7665 = 0 && R7666 = R7670 && R7667 = 0 && R7668 = R7670 && R7669 = 0 && R7671 = 10 && R7672 = R7716 && R7673 = 10 && R7674 = R7716 && R7675 = 10 && R7676 = R7716 && R7677 = 10 && R7678 = R7716 && R7679 = 10 && R7680 = R7716 && R7681 = 10 && R7682 = R7716 && R7683 = 10 && R7684 = R7716 && R7685 = 10 && R7686 = R7716 && R7687 = 10 && R7688 = R7716 && R7689 = 10 && R7690 = R7716 && R7691 = 10 && R7692 = R7716 && R7693 = 10 && R7694 = R7716 && R7695 = 10 && R7696 = R7716 && R7697 = 10 && R7698 = R7716 && R7699 = 10 && R7700 = R7716 && R7701 = 10 && R7702 = R7716 && R7703 = 10 && R7704 = R7716 && R7705 = 10 && R7706 = R7716 && R7707 = 10 && R7708 = R7716 && R7709 = 10 && R7710 = R7716 && R7711 = 10 && R7712 = R7716 && R7713 = 10 && R7714 = R7716 && R7715 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R7670 < R7070 && -1 < R7614 && 0 < R7638 && -1 < R7670 && 9 < R7716 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R7609 != 0 || R7610 = R7614 || (R5988 = 0 && R7614 = 0)) && (R7611 != 0 || R7612 = R7614 || (R5988 = 0 && R7614 = 0)) && (R5989 = 0 || (R7619 = 0 && R7620 = 0)) && (R5990 = 0 || (R7615 = 0 && R7616 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R7609 = 0 || (R5988 = 0 && R7614 = 0)) && (R7611 = 0 || (R5988 = 0 && R7614 = 0));
// End of Parikh automata intersection problem
