// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6323, R6324, R6325, R6326, R6327, R6328, R6329, R6330, R6331, R6332, R6333, R6334, R6335, R6336, R6337, R6338, R6339, R6340, R6341, R6342, R6343, R6344, R6345, R6346, R6347, R6348, R6349, R6350, R6351, R6352, R6353, R6354, R6355, R6356, R6357, R6358, R6359, R6360, R6361, R6362, R6363, R6364, R6365, R6366, R6367, R6368, R6369, R6370, R6371, R6372, R6373, R6374, R6375, R6376, R6377, R6378, R6379, R6380, R6381, R6382, R6383, R6384, R6385, R6386, R6387, R6388, R6389, R6390, R6391, R6392, R6393, R6394, R6395, R6396, R6397, R6398, R6399, R6400, R6401, R6402, R6403, R6404, R6405, R6406, R6407, R6408, R6409, R6410, R6411, R6412, R6413, R6414, R6415, R6416, R6417, R6418, R6419, R6420, R6421, R6422, R6423, R6424, R6425, R6426, R6427, R6428, R7;
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R6384 += 1 };
  s0 -> s0 [0, 65535] { R6383 += 1, R6384 += 1 };
  s0 -> s2 [46, 46] { R6384 += 1 };
  s0 -> s3 [47, 47] { R6384 += 1 };
  s0 -> s1 [48, 65535] { R6384 += 1 };
  s1 -> s1 [0, 45] { R6384 += 1 };
  s1 -> s2 [46, 46] { R6384 += 1 };
  s1 -> s3 [47, 47] { R6384 += 1 };
  s1 -> s1 [48, 65535] { R6384 += 1 };
  s2 -> s1 [0, 45] { R6384 += 1 };
  s2 -> s2 [46, 46] { R6384 += 1 };
  s2 -> s3 [47, 47] { R6384 += 1 };
  s2 -> s1 [48, 114] { R6384 += 1 };
  s2 -> s8 [115, 115] { R6384 += 1 };
  s2 -> s1 [116, 65535] { R6384 += 1 };
  s3 -> s3 [0, 45] { R6384 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R6384 += 1 };
  s3 -> s3 [47, 65535] { R6384 += 1 };
  s4 -> s3 [0, 45] { R6384 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R6384 += 1 };
  s4 -> s3 [47, 114] { R6384 += 1 };
  s4 -> s5 [115, 115] { R6384 += 1 };
  s4 -> s3 [116, 65535] { R6384 += 1 };
  s5 -> s3 [0, 45] { R6384 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R6384 += 1 };
  s5 -> s3 [47, 110] { R6384 += 1 };
  s5 -> s6 [111, 111] { R6384 += 1 };
  s5 -> s3 [112, 65535] { R6384 += 1 };
  s6 -> s3 [0, 45] { R6384 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R6384 += 1 };
  s6 -> s3 [47, 98] { R6384 += 1 };
  s6 -> s7 [99, 99] { R6384 += 1 };
  s6 -> s3 [100, 65535] { R6384 += 1 };
  s7 -> s3 [0, 45] { R6384 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R6384 += 1 };
  s7 -> s3 [47, 106] { R6384 += 1 };
  s7 -> s3 [108, 65535] { R6384 += 1 };
  s8 -> s1 [0, 45] { R6384 += 1 };
  s8 -> s2 [46, 46] { R6384 += 1 };
  s8 -> s3 [47, 47] { R6384 += 1 };
  s8 -> s1 [48, 110] { R6384 += 1 };
  s8 -> s9 [111, 111] { R6384 += 1 };
  s8 -> s1 [112, 65535] { R6384 += 1 };
  s9 -> s1 [0, 45] { R6384 += 1 };
  s9 -> s2 [46, 46] { R6384 += 1 };
  s9 -> s3 [47, 47] { R6384 += 1 };
  s9 -> s1 [48, 98] { R6384 += 1 };
  s9 -> s10 [99, 99] { R6384 += 1 };
  s9 -> s1 [100, 65535] { R6384 += 1 };
  s10 -> s1 [0, 45] { R6384 += 1 };
  s10 -> s2 [46, 46] { R6384 += 1 };
  s10 -> s3 [47, 47] { R6384 += 1 };
  s10 -> s1 [48, 106] { R6384 += 1 };
  s10 -> s1 [108, 65535] { R6384 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R6385 += 1, R6386 += 1 };
  s0 -> s1 [0, 65535] { R6386 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6386 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R6388 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R6388 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R6387 += 1, R6388 += 1 };
  s0 -> s3 [47, 47] { R6388 += 1 };
  s0 -> s1 [48, 65535] { R6388 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R6388 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R6388 += 1 };
  s1 -> s1 [48, 65535] { R6388 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R6388 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R6388 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R6388 += 1 };
  s2 -> s1 [48, 65535] { R6388 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6388 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R6390 += 1, R6000 += 1 };
  s0 -> s2 [0, 65535] { R6390 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R6389 += 1, R6390 += 1 };
  s0 -> s1 [38, 42] { R6390 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R6390 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R6390 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R6390 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R6390 += 1, R6000 += 1 };
  s1 -> s1 [0, 65535] { R6390 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R6390 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R6390 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R6390 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R6390 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R6390 += 1, R6000 += 1 };
  s2 -> s2 [0, 65535] { R6390 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R6390 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R6390 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R6390 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R6390 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R6391 += 1, R6392 += 1 };
  s0 -> s1 [0, 65535] { R6392 += 1, R6002 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R6392 += 1, R6001 += 1, R6002 += 1 };
  s1 -> s1 [0, 65535] { R6392 += 1, R6002 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6392 += 1 };
  s2 -> s1 [0, 65535] { R6392 += 1, R6002 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6392 += 1, R6001 += 1, R6002 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6392 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R6394 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R6393 += 1, R6394 += 1 };
  s0 -> s3 [0, 65535] { R6394 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s4 [63, 63] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6394 += 1 };
  s1 -> s1 [0, 65535] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R6394 += 1, R6004 += 1 };
  s2 -> s1 [0, 62] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6394 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R6394 += 1 };
  s2 -> s4 [63, 63] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6394 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R6394 += 1, R6003 += 1, R6004 += 1 };
  s3 -> s4 [63, 63] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R6394 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6394 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6394 += 1 };
  s7 -> s7 [0, 65535] { R6394 += 1, R6004 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6396 += 1, R6005 += 1, R6006 += 1 };
  s0 -> s2 [0, 65535] { R6396 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R6396 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R6395 += 1, R6396 += 1 };
  s1 -> s1 [0, 65535] { R6396 += 1, R6005 += 1, R6006 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R6396 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R6396 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535] { R6396 += 1 };
  s2 -> s6 [0, 65535] { R6396 += 1, R6006 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6396 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R6396 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6396 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R6396 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535] { R6396 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6396 += 1 };
  s6 -> s6 [0, 65535] { R6396 += 1, R6006 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R6398 += 1, R6352 += 1 };
  s0 -> s2 [0, 65535] { R6398 += 1, R6351 += 1, R6352 += 1 };
  s0 -> s0 [0, 65535] { R6397 += 1, R6398 += 1 };
  s0 -> s1 [45, 63] { R6398 += 1, R6352 += 1 };
  s0 -> s3 [88, 88] { R6398 += 1, R6352 += 1 };
  s0 -> s1 [89, 65535] { R6398 += 1, R6352 += 1 };
  s1 -> s1 [0, 43] { R6398 += 1, R6352 += 1 };
  s1 -> s1 [45, 63] { R6398 += 1, R6352 += 1 };
  s1 -> s3 [88, 88] { R6398 += 1, R6352 += 1 };
  s1 -> s1 [89, 65535] { R6398 += 1, R6352 += 1 };
  s2 -> s1 [0, 43] { R6398 += 1, R6352 += 1 };
  s2 -> s2 [0, 65535] { R6398 += 1, R6351 += 1, R6352 += 1 };
  s2 -> s1 [45, 63] { R6398 += 1, R6352 += 1 };
  s2 -> s3 [88, 88] { R6398 += 1, R6352 += 1 };
  s2 -> s1 [89, 65535] { R6398 += 1, R6352 += 1 };
  s3 -> s3 [0, 43] { R6398 += 1, R6352 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6398 += 1 };
  s3 -> s3 [45, 63] { R6398 += 1, R6352 += 1 };
  s3 -> s3 [88, 65535] { R6398 += 1, R6352 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R6399 += 1, R6400 += 1 };
  s0 -> s1 [0, 65535] { R6400 += 1, R6354 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R6400 += 1, R6353 += 1, R6354 += 1 };
  s1 -> s4 [0, 65535] { R6400 += 1 };
  s1 -> s1 [0, 65535] { R6400 += 1, R6354 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6400 += 1, R6354 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6400 += 1, R6353 += 1, R6354 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6400 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R6402 += 1, R6356 += 1 };
  s0 -> s2 [0, 65535] { R6402 += 1, R6355 += 1, R6356 += 1 };
  s0 -> s0 [0, 65535] { R6401 += 1, R6402 += 1 };
  s0 -> s3 [0, 65535] { R6402 += 1, R6356 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R6402 += 1, R6356 += 1 };
  s0 -> s1 [59, 65535] { R6402 += 1, R6356 += 1 };
  s1 -> s1 [0, 57] { R6402 += 1, R6356 += 1 };
  s1 -> s1 [0, 65535] { R6402 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [58, 58] { R6402 += 1, R6356 += 1 };
  s1 -> s1 [59, 65535] { R6402 += 1, R6356 += 1 };
  s2 -> s1 [0, 57] { R6402 += 1, R6356 += 1 };
  s2 -> s2 [0, 65535] { R6402 += 1, R6355 += 1, R6356 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6402 += 1, R6356 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R6402 += 1, R6356 += 1 };
  s2 -> s1 [59, 65535] { R6402 += 1, R6356 += 1 };
  s3 -> s1 [0, 57] { R6402 += 1, R6356 += 1 };
  s3 -> s5 [0, 65535] { R6402 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6402 += 1, R6356 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R6402 += 1, R6356 += 1 };
  s3 -> s1 [59, 65535] { R6402 += 1, R6356 += 1 };
  s4 -> s4 [0, 65535] { R6402 += 1, R6356 += 1 };
  s5 -> s5 [0, 65535] { R6402 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R6404 += 1, R6358 += 1 };
  s0 -> s2 [0, 65535] { R6404 += 1, R6358 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R6403 += 1, R6404 += 1 };
  s0 -> s3 [0, 65535] { R6404 += 1, R6357 += 1, R6358 += 1 };
  s0 -> s4 [88, 88] { R6404 += 1, R6358 += 1 };
  s0 -> s1 [89, 65535] { R6404 += 1, R6358 += 1 };
  s1 -> s1 [0, 87] { R6404 += 1, R6358 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6404 += 1 };
  s1 -> s4 [88, 88] { R6404 += 1, R6358 += 1 };
  s1 -> s1 [89, 65535] { R6404 += 1, R6358 += 1 };
  s2 -> s1 [0, 87] { R6404 += 1, R6358 += 1 };
  s2 -> s2 [0, 65535] { R6404 += 1, R6358 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R6404 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R6404 += 1, R6358 += 1 };
  s2 -> s1 [89, 65535] { R6404 += 1, R6358 += 1 };
  s3 -> s1 [0, 87] { R6404 += 1, R6358 += 1 };
  s3 -> s2 [0, 65535] { R6404 += 1, R6358 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6404 += 1, R6357 += 1, R6358 += 1 };
  s3 -> s4 [88, 88] { R6404 += 1, R6358 += 1 };
  s3 -> s1 [89, 65535] { R6404 += 1, R6358 += 1 };
  s4 -> s4 [0, 65535] { R6404 += 1, R6358 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6404 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R6406 += 1, R6359 += 1, R6360 += 1 };
  s0 -> s0 [0, 65535] { R6405 += 1, R6406 += 1 };
  s0 -> s3 [0, 65535] { R6406 += 1, R6360 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6406 += 1 };
  s1 -> s1 [0, 65535] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R6406 += 1, R6360 += 1 };
  s2 -> s1 [0, 90] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6406 += 1, R6359 += 1, R6360 += 1 };
  s2 -> s3 [0, 65535] { R6406 += 1, R6360 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6406 += 1 };
  s3 -> s3 [0, 65535] { R6406 += 1, R6360 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R6406 += 1, R6360 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6406 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6406 += 1 };
  s7 -> s7 [0, 65535] { R6406 += 1, R6360 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R6408 += 1, R6362 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R6408 += 1, R6361 += 1, R6362 += 1 };
  s0 -> s3 [0, 65535] { R6408 += 1, R6362 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R6407 += 1, R6408 += 1 };
  s1 -> s1 [0, 65535] { R6408 += 1, R6362 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R6408 += 1 };
  s1 -> s3 [0, 65535] { R6408 += 1, R6362 += 1, R5998 += 1, R6 += 1 };
  s2 -> s1 [0, 65535] { R6408 += 1, R6362 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s2 [0, 65535] { R6408 += 1, R6361 += 1, R6362 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6408 += 1, R6362 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6408 += 1, R6362 += 1 };
  s3 -> s6 [0, 65535] { R6408 += 1 };
  s3 -> s3 [0, 65535] { R6408 += 1, R6362 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6408 += 1, R6362 += 1 };
  s5 -> s6 [0, 65535] { R6408 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6408 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R6409 += 1, R6410 += 1 };
  s0 -> s1 [0, 65535] { R6410 += 1, R6364 += 1, R6330 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R6410 += 1, R6364 += 1, R6329 += 1, R6330 += 1 };
  s0 -> s3 [0, 65535] { R6410 += 1, R6363 += 1, R6364 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6410 += 1 };
  s1 -> s1 [0, 65535] { R6410 += 1, R6364 += 1, R6330 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R6410 += 1, R6364 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6410 += 1 };
  s2 -> s1 [0, 65535] { R6410 += 1, R6364 += 1, R6330 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R6410 += 1, R6364 += 1, R6329 += 1, R6330 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6410 += 1, R6364 += 1, R6330 += 1, R5990 += 1 };
  s3 -> s2 [0, 65535] { R6410 += 1, R6364 += 1, R6329 += 1, R6330 += 1 };
  s3 -> s3 [0, 65535] { R6410 += 1, R6363 += 1, R6364 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6410 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6410 += 1 };
  s6 -> s6 [0, 65535] { R6410 += 1, R6364 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R6412 += 1, R6366 += 1 };
  s0 -> s2 [0, 65535] { R6412 += 1, R6365 += 1, R6366 += 1 };
  s0 -> s0 [0, 65535] { R6411 += 1, R6412 += 1 };
  s1 -> s4 [0, 65535] { R6412 += 1 };
  s1 -> s1 [0, 65535] { R6412 += 1, R6366 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6412 += 1, R6366 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6412 += 1, R6365 += 1, R6366 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6412 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 87] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s0 -> s2 [0, 65535] { R6414 += 1, R6367 += 1, R6368 += 1 };
  s0 -> s0 [0, 65535] { R6413 += 1, R6414 += 1 };
  s0 -> s3 [0, 65535] { R6414 += 1, R6368 += 1, R6335 += 1, R6336 += 1 };
  s0 -> s4 [88, 88] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s0 -> s1 [89, 65535] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s1 -> s1 [0, 87] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s1 -> s4 [88, 88] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s1 -> s1 [89, 65535] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s2 -> s1 [0, 87] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s2 -> s2 [0, 65535] { R6414 += 1, R6367 += 1, R6368 += 1 };
  s2 -> s3 [0, 65535] { R6414 += 1, R6368 += 1, R6335 += 1, R6336 += 1 };
  s2 -> s4 [88, 88] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s2 -> s1 [89, 65535] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s3 -> s1 [0, 87] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s3 -> s3 [0, 65535] { R6414 += 1, R6368 += 1, R6335 += 1, R6336 += 1 };
  s3 -> s4 [88, 88] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s3 -> s1 [89, 65535] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s4 -> s5 [0, 65535] { R6414 += 1, R6368 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6414 += 1, R6368 += 1, R6336 += 1 };
  s4 -> s7 [0, 65535] { R6414 += 1 };
  s5 -> s5 [0, 65535] { R6414 += 1, R6368 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6414 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6414 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6416 += 1, R6370 += 1, R6338 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R6416 += 1, R6370 += 1, R6337 += 1, R6338 += 1 };
  s0 -> s3 [0, 65535] { R6416 += 1, R6369 += 1, R6370 += 1 };
  s0 -> s0 [0, 65535] { R6415 += 1, R6416 += 1 };
  s1 -> s6 [0, 65535] { R6416 += 1, R6370 += 1 };
  s1 -> s5 [0, 65535] { R6416 += 1 };
  s1 -> s1 [0, 65535] { R6416 += 1, R6370 += 1, R6338 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6416 += 1 };
  s2 -> s1 [0, 65535] { R6416 += 1, R6370 += 1, R6338 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R6416 += 1, R6370 += 1, R6337 += 1, R6338 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6416 += 1, R6370 += 1, R6338 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R6416 += 1, R6370 += 1, R6337 += 1, R6338 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6416 += 1, R6369 += 1, R6370 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6416 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6416 += 1, R6370 += 1 };
  s6 -> s5 [0, 65535] { R6416 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 87] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s0 -> s2 [0, 65535] { R6418 += 1, R6371 += 1, R6372 += 1 };
  s0 -> s3 [0, 65535] { R6418 += 1, R6372 += 1, R6340 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R6418 += 1, R6372 += 1, R6339 += 1, R6340 += 1 };
  s0 -> s0 [0, 65535] { R6417 += 1, R6418 += 1 };
  s0 -> s5 [88, 88] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s0 -> s1 [89, 65535] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s1 -> s1 [0, 87] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s1 -> s1 [0, 65535] { R6418 += 1, R6372 += 1 };
  s1 -> s6 [0, 65535] { R6418 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [88, 88] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s1 -> s1 [89, 65535] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s2 -> s1 [0, 87] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s2 -> s2 [0, 65535] { R6418 += 1, R6371 += 1, R6372 += 1 };
  s2 -> s3 [0, 65535] { R6418 += 1, R6372 += 1, R6340 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R6418 += 1, R6372 += 1, R6339 += 1, R6340 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [88, 88] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s2 -> s1 [89, 65535] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s3 -> s1 [0, 87] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s3 -> s6 [0, 65535] { R6418 += 1 };
  s3 -> s3 [0, 65535] { R6418 += 1, R6372 += 1, R6340 += 1, R7 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R6418 += 1, R6372 += 1 };
  s3 -> s5 [88, 88] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s3 -> s1 [89, 65535] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s4 -> s1 [0, 87] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s4 -> s6 [0, 65535] { R6418 += 1 };
  s4 -> s3 [0, 65535] { R6418 += 1, R6372 += 1, R6340 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R6418 += 1, R6372 += 1, R6339 += 1, R6340 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s5 [88, 88] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s4 -> s1 [89, 65535] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s5 -> s5 [0, 65535] { R6418 += 1, R6372 += 1, R6340 += 1 };
  s6 -> s6 [0, 65535] { R6418 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R6418 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R6418 += 1, R6372 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 87] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s0 -> s0 [0, 65535] { R6419 += 1, R6420 += 1 };
  s0 -> s2 [0, 65535] { R6420 += 1, R6374 += 1, R6342 += 1, R6323 += 1, R6324 += 1 };
  s0 -> s3 [0, 65535] { R6420 += 1, R6373 += 1, R6374 += 1 };
  s0 -> s4 [0, 65535] { R6420 += 1, R6374 += 1, R6341 += 1, R6342 += 1 };
  s0 -> s1 [89, 65535] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s1 -> s1 [0, 87] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R6420 += 1, R6374 += 1 };
  s1 -> s1 [0, 65535] { R6420 += 1, R6374 += 1, R6342 += 1 };
  s1 -> s6 [0, 65535] { R6420 += 1 };
  s1 -> s1 [89, 65535] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s2 -> s1 [0, 87] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6420 += 1, R6374 += 1, R6342 += 1, R6323 += 1, R6324 += 1 };
  s2 -> s7 [0, 65535] { R6420 += 1, R6374 += 1 };
  s2 -> s6 [0, 65535] { R6420 += 1 };
  s2 -> s1 [89, 65535] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s3 -> s1 [0, 87] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6420 += 1, R6374 += 1, R6342 += 1, R6323 += 1, R6324 += 1 };
  s3 -> s3 [0, 65535] { R6420 += 1, R6373 += 1, R6374 += 1 };
  s3 -> s4 [0, 65535] { R6420 += 1, R6374 += 1, R6341 += 1, R6342 += 1 };
  s3 -> s1 [89, 65535] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s4 -> s1 [0, 87] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R6420 += 1, R6374 += 1, R6342 += 1, R6323 += 1, R6324 += 1 };
  s4 -> s4 [0, 65535] { R6420 += 1, R6374 += 1, R6341 += 1, R6342 += 1 };
  s4 -> s6 [0, 65535] { R6420 += 1 };
  s4 -> s1 [89, 65535] { R6420 += 1, R6374 += 1, R6342 += 1, R6324 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6420 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6420 += 1, R6374 += 1 };
  s7 -> s6 [0, 65535] { R6420 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6422 += 1, R6376 += 1, R6343 += 1, R6344 += 1 };
  s0 -> s2 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1, R6326 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R6421 += 1, R6422 += 1 };
  s0 -> s3 [0, 65535] { R6422 += 1, R6375 += 1, R6376 += 1 };
  s0 -> s4 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1, R6325 += 1, R6326 += 1 };
  s1 -> s1 [0, 65535] { R6422 += 1, R6376 += 1, R6343 += 1, R6344 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1, R6326 += 1, R5988 += 1 };
  s1 -> s6 [0, 65535] { R6422 += 1 };
  s1 -> s4 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1, R6325 += 1, R6326 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1, R6326 += 1, R5988 += 1 };
  s2 -> s8 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1 };
  s2 -> s6 [0, 65535] { R6422 += 1 };
  s2 -> s7 [0, 65535] { R6422 += 1, R6376 += 1 };
  s3 -> s1 [0, 65535] { R6422 += 1, R6376 += 1, R6343 += 1, R6344 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1, R6326 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R6422 += 1, R6375 += 1, R6376 += 1 };
  s3 -> s4 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1, R6325 += 1, R6326 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1, R6326 += 1, R5988 += 1 };
  s4 -> s6 [0, 65535] { R6422 += 1 };
  s4 -> s7 [0, 65535] { R6422 += 1, R6376 += 1 };
  s4 -> s4 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1, R6325 += 1, R6326 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6422 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6422 += 1 };
  s7 -> s7 [0, 65535] { R6422 += 1, R6376 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R6422 += 1, R6376 += 1, R6344 += 1 };
  s8 -> s6 [0, 65535] { R6422 += 1 };
  s8 -> s7 [0, 65535] { R6422 += 1, R6376 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R6424 += 1, R6377 += 1, R6378 += 1 };
  s0 -> s0 [0, 65535] { R6423 += 1, R6424 += 1 };
  s0 -> s2 [0, 65535] { R6424 += 1, R6378 += 1, R6345 += 1, R6346 += 1 };
  s0 -> s3 [0, 65535] { R6424 += 1, R6378 += 1, R6346 += 1, R6327 += 1, R6328 += 1 };
  s0 -> s4 [111, 111] { R6424 += 1, R6378 += 1, R6346 += 1, R6328 += 1 };
  s1 -> s1 [0, 65535] { R6424 += 1, R6377 += 1, R6378 += 1 };
  s1 -> s2 [0, 65535] { R6424 += 1, R6378 += 1, R6345 += 1, R6346 += 1 };
  s1 -> s3 [0, 65535] { R6424 += 1, R6378 += 1, R6346 += 1, R6327 += 1, R6328 += 1 };
  s1 -> s4 [111, 111] { R6424 += 1, R6378 += 1, R6346 += 1, R6328 += 1 };
  s2 -> s2 [0, 65535] { R6424 += 1, R6378 += 1, R6345 += 1, R6346 += 1 };
  s2 -> s3 [0, 65535] { R6424 += 1, R6378 += 1, R6346 += 1, R6327 += 1, R6328 += 1 };
  s2 -> s4 [111, 111] { R6424 += 1, R6378 += 1, R6346 += 1, R6328 += 1 };
  s3 -> s3 [0, 65535] { R6424 += 1, R6378 += 1, R6346 += 1, R6327 += 1, R6328 += 1 };
  s3 -> s4 [111, 111] { R6424 += 1, R6378 += 1, R6346 += 1, R6328 += 1 };
  s4 -> s5 [115, 115] { R6424 += 1, R6378 += 1, R6346 += 1, R6328 += 1 };
  s5 -> s6 [116, 116] { R6424 += 1, R6378 += 1, R6346 += 1, R6328 += 1 };
  s6 -> s7 [0, 65535] { R6424 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R6424 += 1, R6378 += 1 };
  s6 -> s6 [0, 65535] { R6424 += 1, R6378 += 1, R6346 += 1 };
  s7 -> s7 [0, 65535] { R6424 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s7 [0, 65535] { R6424 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6424 += 1, R6378 += 1 };
  accepting s6, s7, s8, s9;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1, R6331 += 1, R6332 += 1 };
  s0 -> s0 [0, 65535] { R6425 += 1, R6426 += 1 };
  s0 -> s2 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1, R6332 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R6426 += 1, R6379 += 1, R6380 += 1 };
  s0 -> s4 [0, 65535] { R6426 += 1, R6380 += 1, R6347 += 1, R6348 += 1 };
  s1 -> s1 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1, R6331 += 1, R6332 += 1 };
  s1 -> s8 [0, 65535] { R6426 += 1, R6380 += 1 };
  s1 -> s2 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1, R6332 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535] { R6426 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1 };
  s2 -> s8 [0, 65535] { R6426 += 1, R6380 += 1 };
  s2 -> s2 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1, R6332 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535] { R6426 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1, R6331 += 1, R6332 += 1 };
  s3 -> s2 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1, R6332 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R6426 += 1, R6379 += 1, R6380 += 1 };
  s3 -> s4 [0, 65535] { R6426 += 1, R6380 += 1, R6347 += 1, R6348 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s1 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1, R6331 += 1, R6332 += 1 };
  s4 -> s2 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1, R6332 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535] { R6426 += 1 };
  s4 -> s4 [0, 65535] { R6426 += 1, R6380 += 1, R6347 += 1, R6348 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6426 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6426 += 1, R6380 += 1, R6348 += 1 };
  s7 -> s8 [0, 65535] { R6426 += 1, R6380 += 1 };
  s7 -> s5 [0, 65535] { R6426 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6426 += 1, R6380 += 1 };
  s8 -> s5 [0, 65535] { R6426 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6428 += 1, R6381 += 1, R6382 += 1 };
  s0 -> s2 [0, 65535] { R6428 += 1, R6382 += 1, R6350 += 1, R6333 += 1, R6334 += 1 };
  s0 -> s0 [0, 65535] { R6427 += 1, R6428 += 1 };
  s0 -> s3 [0, 65535] { R6428 += 1, R6382 += 1, R6349 += 1, R6350 += 1 };
  s0 -> s4 [108, 108] { R6428 += 1, R6382 += 1, R6350 += 1, R6334 += 1 };
  s1 -> s1 [0, 65535] { R6428 += 1, R6381 += 1, R6382 += 1 };
  s1 -> s2 [0, 65535] { R6428 += 1, R6382 += 1, R6350 += 1, R6333 += 1, R6334 += 1 };
  s1 -> s3 [0, 65535] { R6428 += 1, R6382 += 1, R6349 += 1, R6350 += 1 };
  s1 -> s4 [108, 108] { R6428 += 1, R6382 += 1, R6350 += 1, R6334 += 1 };
  s2 -> s2 [0, 65535] { R6428 += 1, R6382 += 1, R6350 += 1, R6333 += 1, R6334 += 1 };
  s2 -> s4 [108, 108] { R6428 += 1, R6382 += 1, R6350 += 1, R6334 += 1 };
  s3 -> s2 [0, 65535] { R6428 += 1, R6382 += 1, R6350 += 1, R6333 += 1, R6334 += 1 };
  s3 -> s3 [0, 65535] { R6428 += 1, R6382 += 1, R6349 += 1, R6350 += 1 };
  s3 -> s4 [108, 108] { R6428 += 1, R6382 += 1, R6350 += 1, R6334 += 1 };
  s4 -> s5 [111, 111] { R6428 += 1, R6382 += 1, R6350 += 1, R6334 += 1 };
  s5 -> s6 [99, 99] { R6428 += 1, R6382 += 1, R6350 += 1, R6334 += 1 };
  s6 -> s7 [97, 97] { R6428 += 1, R6382 += 1, R6350 += 1, R6334 += 1 };
  s7 -> s8 [108, 108] { R6428 += 1, R6382 += 1, R6350 += 1, R6334 += 1 };
  s8 -> s9 [104, 104] { R6428 += 1, R6382 += 1, R6350 += 1, R6334 += 1 };
  s9 -> s9 [0, 65535] { R6428 += 1, R6382 += 1, R6350 += 1 };
  s9 -> s10 [0, 65535] { R6428 += 1 };
  s9 -> s11 [0, 65535] { R6428 += 1, R6382 += 1 };
  s9 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R6428 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s10 [0, 65535] { R6428 += 1 };
  s11 -> s11 [0, 65535] { R6428 += 1, R6382 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s9, s10, s11, s12;
};
};
constraint R1 = R6328 && R2 = R6350 && R3 = R6006 && R4 = R6428 && R15 = 0 && R16 = R6382 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R6382 = 1 && R6000 = R6006 && R6001 - R6382 = 1 && R6002 = R6006 && R6003 - R6382 = 1 && R6004 = R6006 && R6005 - R6382 = 1 && R6327 = 0 && R6333 = 0 && R6334 = 0 && R6335 = 0 && R6336 = R6350 && R6337 = 0 && R6338 = R6350 && R6339 = 0 && R6340 = R6350 && R6341 = 0 && R6342 = R6350 && R6343 = 0 && R6344 = R6350 && R6345 = 0 && R6346 = R6350 && R6347 = 0 && R6348 = R6350 && R6349 = 0 && R6351 = 0 && R6352 = R6382 && R6353 = 0 && R6354 = R6382 && R6355 = 0 && R6356 = R6382 && R6357 = 0 && R6358 = R6382 && R6359 = 0 && R6360 = R6382 && R6361 = 0 && R6362 = R6382 && R6363 = 0 && R6364 = R6382 && R6365 = 0 && R6366 = R6382 && R6367 = 0 && R6368 = R6382 && R6369 = 0 && R6370 = R6382 && R6371 = 0 && R6372 = R6382 && R6373 = 0 && R6374 = R6382 && R6375 = 0 && R6376 = R6382 && R6377 = 0 && R6378 = R6382 && R6379 = 0 && R6380 = R6382 && R6381 = 0 && R6383 = 10 && R6384 = R6428 && R6385 = 10 && R6386 = R6428 && R6387 = 10 && R6388 = R6428 && R6389 = 10 && R6390 = R6428 && R6391 = 10 && R6392 = R6428 && R6393 = 10 && R6394 = R6428 && R6395 = 10 && R6396 = R6428 && R6397 = 10 && R6398 = R6428 && R6399 = 10 && R6400 = R6428 && R6401 = 10 && R6402 = R6428 && R6403 = 10 && R6404 = R6428 && R6405 = 10 && R6406 = R6428 && R6407 = 10 && R6408 = R6428 && R6409 = 10 && R6410 = R6428 && R6411 = 10 && R6412 = R6428 && R6413 = 10 && R6414 = R6428 && R6415 = 10 && R6416 = R6428 && R6417 = 10 && R6418 = R6428 && R6419 = 10 && R6420 = R6428 && R6421 = 10 && R6422 = R6428 && R6423 = 10 && R6424 = R6428 && R6425 = 10 && R6426 = R6428 && R6427 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R6382 < R6006 && -1 < R6328 && 0 < R6350 && -1 < R6382 && 9 < R6428 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R6323 != 0 || R6324 = R6328 || (R5988 = 0 && R6328 = 0)) && (R6325 != 0 || R6326 = R6328 || (R5988 = 0 && R6328 = 0)) && (R5989 = 0 || (R6331 = 0 && R6332 = 0)) && (R5990 = 0 || (R6329 = 0 && R6330 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R6323 = 0 || (R5988 = 0 && R6328 = 0)) && (R6325 = 0 || (R5988 = 0 && R6328 = 0));
// End of Parikh automata intersection problem
