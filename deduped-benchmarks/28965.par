// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R1074, R1075, R1076, R1077, R1078, R1079, R1080, R1081, R1082, R1083, R1084, R1085, R1086, R1087, R1088, R1089, R1090, R1091, R1092, R1093, R1094, R1095, R1096, R1097, R1098, R1099, R1100, R1101, R1102, R1103, R1104, R1105, R1106, R1107, R1108, R1109, R1110, R1111, R1112, R1113, R1114, R1115, R1116, R1117, R1118, R1119, R1120, R1121, R1122, R1123, R1124, R1125, R1126, R1127, R1128, R1129, R1130, R1131, R1132, R1133, R1134, R1135, R1136, R1137, R1138, R1139, R1140, R1141, R1142, R1143, R1144, R1145, R14, R15, R2, R3, R4, R5, R582, R583, R6, R7, R8, R866, R867, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1099 += 1 };
  s0 -> s0 [0, 65535] { R1098 += 1, R1099 += 1 };
  s0 -> s2 [46, 46] { R1099 += 1 };
  s0 -> s3 [47, 47] { R1099 += 1 };
  s0 -> s1 [48, 65535] { R1099 += 1 };
  s1 -> s1 [0, 45] { R1099 += 1 };
  s1 -> s2 [46, 46] { R1099 += 1 };
  s1 -> s3 [47, 47] { R1099 += 1 };
  s1 -> s1 [48, 65535] { R1099 += 1 };
  s2 -> s1 [0, 45] { R1099 += 1 };
  s2 -> s2 [46, 46] { R1099 += 1 };
  s2 -> s3 [47, 47] { R1099 += 1 };
  s2 -> s1 [48, 114] { R1099 += 1 };
  s2 -> s8 [115, 115] { R1099 += 1 };
  s2 -> s1 [116, 65535] { R1099 += 1 };
  s3 -> s3 [0, 45] { R1099 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1099 += 1 };
  s3 -> s3 [47, 65535] { R1099 += 1 };
  s4 -> s3 [0, 45] { R1099 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1099 += 1 };
  s4 -> s3 [47, 114] { R1099 += 1 };
  s4 -> s5 [115, 115] { R1099 += 1 };
  s4 -> s3 [116, 65535] { R1099 += 1 };
  s5 -> s3 [0, 45] { R1099 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1099 += 1 };
  s5 -> s3 [47, 110] { R1099 += 1 };
  s5 -> s6 [111, 111] { R1099 += 1 };
  s5 -> s3 [112, 65535] { R1099 += 1 };
  s6 -> s3 [0, 45] { R1099 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1099 += 1 };
  s6 -> s3 [47, 98] { R1099 += 1 };
  s6 -> s7 [99, 99] { R1099 += 1 };
  s6 -> s3 [100, 65535] { R1099 += 1 };
  s7 -> s3 [0, 45] { R1099 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1099 += 1 };
  s7 -> s3 [47, 106] { R1099 += 1 };
  s7 -> s3 [108, 65535] { R1099 += 1 };
  s8 -> s1 [0, 45] { R1099 += 1 };
  s8 -> s2 [46, 46] { R1099 += 1 };
  s8 -> s3 [47, 47] { R1099 += 1 };
  s8 -> s1 [48, 110] { R1099 += 1 };
  s8 -> s9 [111, 111] { R1099 += 1 };
  s8 -> s1 [112, 65535] { R1099 += 1 };
  s9 -> s1 [0, 45] { R1099 += 1 };
  s9 -> s2 [46, 46] { R1099 += 1 };
  s9 -> s3 [47, 47] { R1099 += 1 };
  s9 -> s1 [48, 98] { R1099 += 1 };
  s9 -> s10 [99, 99] { R1099 += 1 };
  s9 -> s1 [100, 65535] { R1099 += 1 };
  s10 -> s1 [0, 45] { R1099 += 1 };
  s10 -> s2 [46, 46] { R1099 += 1 };
  s10 -> s3 [47, 47] { R1099 += 1 };
  s10 -> s1 [48, 106] { R1099 += 1 };
  s10 -> s1 [108, 65535] { R1099 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1100 += 1, R1101 += 1 };
  s0 -> s1 [0, 65535] { R1101 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1101 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1103 += 1, R867 += 1 };
  s0 -> s2 [0, 65535] { R1103 += 1, R866 += 1, R867 += 1 };
  s0 -> s0 [0, 65535] { R1102 += 1, R1103 += 1 };
  s0 -> s3 [47, 47] { R1103 += 1 };
  s0 -> s1 [48, 65535] { R1103 += 1, R867 += 1 };
  s1 -> s1 [0, 46] { R1103 += 1, R867 += 1 };
  s1 -> s3 [47, 47] { R1103 += 1 };
  s1 -> s1 [48, 65535] { R1103 += 1, R867 += 1 };
  s2 -> s1 [0, 46] { R1103 += 1, R867 += 1 };
  s2 -> s2 [0, 65535] { R1103 += 1, R866 += 1, R867 += 1 };
  s2 -> s3 [47, 47] { R1103 += 1 };
  s2 -> s1 [48, 65535] { R1103 += 1, R867 += 1 };
  s3 -> s3 [0, 65535] { R1103 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R1105 += 1, R1057 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R1104 += 1, R1105 += 1 };
  s0 -> s2 [0, 65535] { R1105 += 1, R1056 += 1, R1057 += 1 };
  s1 -> s4 [0, 65535] { R1105 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1105 += 1, R1057 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1105 += 1, R1057 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1105 += 1, R1056 += 1, R1057 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1105 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1106 += 1, R1107 += 1 };
  s0 -> s1 [0, 65535] { R1107 += 1, R1059 += 1, R1008 += 1, R1009 += 1 };
  s0 -> s2 [0, 65535] { R1107 += 1, R1058 += 1, R1059 += 1 };
  s0 -> s3 [63, 63] { R1107 += 1, R1059 += 1, R1009 += 1 };
  s1 -> s1 [0, 65535] { R1107 += 1, R1059 += 1, R1008 += 1, R1009 += 1 };
  s1 -> s3 [63, 63] { R1107 += 1, R1059 += 1, R1009 += 1 };
  s2 -> s1 [0, 65535] { R1107 += 1, R1059 += 1, R1008 += 1, R1009 += 1 };
  s2 -> s2 [0, 65535] { R1107 += 1, R1058 += 1, R1059 += 1 };
  s2 -> s3 [63, 63] { R1107 += 1, R1059 += 1, R1009 += 1 };
  s3 -> s4 [0, 65535] { R1107 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1107 += 1, R1059 += 1 };
  s4 -> s4 [0, 65535] { R1107 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R1109 += 1, R1061 += 1, R1011 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R1109 += 1, R1060 += 1, R1061 += 1 };
  s0 -> s3 [0, 65535] { R1109 += 1, R1061 += 1, R1010 += 1, R1011 += 1 };
  s0 -> s0 [0, 65535] { R1108 += 1, R1109 += 1 };
  s1 -> s1 [0, 65535] { R1109 += 1, R1061 += 1, R1011 += 1, R8 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1109 += 1 };
  s1 -> s6 [0, 65535] { R1109 += 1, R1061 += 1 };
  s2 -> s1 [0, 65535] { R1109 += 1, R1061 += 1, R1011 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R1109 += 1, R1060 += 1, R1061 += 1 };
  s2 -> s3 [0, 65535] { R1109 += 1, R1061 += 1, R1010 += 1, R1011 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1109 += 1, R1061 += 1, R1011 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R1109 += 1, R1061 += 1, R1010 += 1, R1011 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1109 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1109 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1109 += 1 };
  s6 -> s6 [0, 65535] { R1109 += 1, R1061 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 58] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s0 -> s0 [0, 65535] { R1110 += 1, R1111 += 1 };
  s0 -> s2 [0, 65535] { R1111 += 1, R1063 += 1, R1028 += 1, R1029 += 1 };
  s0 -> s3 [0, 65535] { R1111 += 1, R1062 += 1, R1063 += 1 };
  s0 -> s4 [59, 59] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s0 -> s1 [60, 65535] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s1 -> s1 [0, 58] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s1 -> s4 [59, 59] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s1 -> s1 [60, 65535] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s2 -> s1 [0, 58] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s2 -> s2 [0, 65535] { R1111 += 1, R1063 += 1, R1028 += 1, R1029 += 1 };
  s2 -> s4 [59, 59] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s2 -> s1 [60, 65535] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s3 -> s1 [0, 58] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s3 -> s2 [0, 65535] { R1111 += 1, R1063 += 1, R1028 += 1, R1029 += 1 };
  s3 -> s3 [0, 65535] { R1111 += 1, R1062 += 1, R1063 += 1 };
  s3 -> s4 [59, 59] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s3 -> s1 [60, 65535] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s4 -> s5 [0, 65535] { R1111 += 1 };
  s4 -> s4 [0, 65535] { R1111 += 1, R1063 += 1, R1029 += 1 };
  s4 -> s6 [0, 65535] { R1111 += 1, R1063 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1111 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R1111 += 1 };
  s6 -> s6 [0, 65535] { R1111 += 1, R1063 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1113 += 1, R1064 += 1, R1065 += 1 };
  s0 -> s0 [0, 65535] { R1112 += 1, R1113 += 1 };
  s0 -> s2 [0, 65535] { R1113 += 1, R1065 += 1, R1030 += 1, R1031 += 1 };
  s0 -> s3 [0, 65535] { R1113 += 1, R1065 += 1, R1031 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R1113 += 1, R1064 += 1, R1065 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1113 += 1, R1065 += 1, R1030 += 1, R1031 += 1 };
  s1 -> s3 [0, 65535] { R1113 += 1, R1065 += 1, R1031 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1113 += 1, R1065 += 1, R1030 += 1, R1031 += 1 };
  s2 -> s3 [0, 65535] { R1113 += 1, R1065 += 1, R1031 += 1, R2 += 1 };
  s2 -> s6 [0, 65535] { R1113 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1113 += 1, R1065 += 1, R1031 += 1, R2 += 1 };
  s3 -> s5 [0, 65535] { R1113 += 1, R1065 += 1 };
  s3 -> s6 [0, 65535] { R1113 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1113 += 1, R1065 += 1 };
  s5 -> s6 [0, 65535] { R1113 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1113 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 37] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s0 -> s2 [0, 65535] { R1115 += 1, R1067 += 1, R1032 += 1, R1033 += 1 };
  s0 -> s3 [0, 65535] { R1115 += 1, R1066 += 1, R1067 += 1 };
  s0 -> s4 [0, 65535] { R1115 += 1, R1067 += 1, R1033 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R1114 += 1, R1115 += 1 };
  s0 -> s5 [38, 38] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s0 -> s1 [39, 65535] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s1 -> s1 [0, 37] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s1 -> s6 [0, 65535] { R1115 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R1115 += 1, R1067 += 1 };
  s1 -> s5 [38, 38] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s1 -> s1 [39, 65535] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s2 -> s1 [0, 37] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s2 -> s6 [0, 65535] { R1115 += 1 };
  s2 -> s2 [0, 65535] { R1115 += 1, R1067 += 1, R1032 += 1, R1033 += 1 };
  s2 -> s4 [0, 65535] { R1115 += 1, R1067 += 1, R1033 += 1, R10 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [38, 38] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s2 -> s1 [39, 65535] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s3 -> s1 [0, 37] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s3 -> s2 [0, 65535] { R1115 += 1, R1067 += 1, R1032 += 1, R1033 += 1 };
  s3 -> s3 [0, 65535] { R1115 += 1, R1066 += 1, R1067 += 1 };
  s3 -> s4 [0, 65535] { R1115 += 1, R1067 += 1, R1033 += 1, R10 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s5 [38, 38] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s3 -> s1 [39, 65535] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s4 -> s1 [0, 37] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s4 -> s6 [0, 65535] { R1115 += 1 };
  s4 -> s7 [0, 65535] { R1115 += 1, R1067 += 1 };
  s4 -> s4 [0, 65535] { R1115 += 1, R1067 += 1, R1033 += 1, R10 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s5 [38, 38] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s4 -> s1 [39, 65535] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s5 -> s5 [0, 65535] { R1115 += 1, R1067 += 1, R1033 += 1 };
  s6 -> s6 [0, 65535] { R1115 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R1115 += 1 };
  s7 -> s7 [0, 65535] { R1115 += 1, R1067 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 58] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R1117 += 1, R1068 += 1, R1069 += 1 };
  s0 -> s0 [0, 65535] { R1116 += 1, R1117 += 1 };
  s0 -> s3 [0, 65535] { R1117 += 1, R1069 += 1, R1034 += 1, R1035 += 1 };
  s0 -> s4 [0, 65535] { R1117 += 1, R1069 += 1, R1035 += 1, R14 += 1, R15 += 1 };
  s0 -> s5 [59, 59] { R1117 += 1, R1069 += 1, R1035 += 1 };
  s0 -> s1 [60, 65535] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s1 -> s1 [0, 58] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s1 -> s5 [59, 59] { R1117 += 1, R1069 += 1, R1035 += 1 };
  s1 -> s1 [60, 65535] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s2 -> s1 [0, 58] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R1117 += 1, R1068 += 1, R1069 += 1 };
  s2 -> s3 [0, 65535] { R1117 += 1, R1069 += 1, R1034 += 1, R1035 += 1 };
  s2 -> s4 [0, 65535] { R1117 += 1, R1069 += 1, R1035 += 1, R14 += 1, R15 += 1 };
  s2 -> s5 [59, 59] { R1117 += 1, R1069 += 1, R1035 += 1 };
  s2 -> s1 [60, 65535] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s3 -> s1 [0, 58] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s3 -> s3 [0, 65535] { R1117 += 1, R1069 += 1, R1034 += 1, R1035 += 1 };
  s3 -> s4 [0, 65535] { R1117 += 1, R1069 += 1, R1035 += 1, R14 += 1, R15 += 1 };
  s3 -> s5 [59, 59] { R1117 += 1, R1069 += 1, R1035 += 1 };
  s3 -> s1 [60, 65535] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s4 -> s1 [0, 58] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s4 -> s4 [0, 65535] { R1117 += 1, R1069 += 1, R1035 += 1, R14 += 1, R15 += 1 };
  s4 -> s5 [59, 59] { R1117 += 1, R1069 += 1, R1035 += 1 };
  s4 -> s1 [60, 65535] { R1117 += 1, R1069 += 1, R1035 += 1, R15 += 1 };
  s5 -> s6 [0, 65535] { R1117 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1117 += 1, R1069 += 1 };
  s5 -> s5 [0, 65535] { R1117 += 1, R1069 += 1, R1035 += 1 };
  s6 -> s6 [0, 65535] { R1117 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1117 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1117 += 1, R1069 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R1119 += 1, R1071 += 1, R1037 += 1 };
  s0 -> s0 [0, 65535] { R1118 += 1, R1119 += 1 };
  s0 -> s2 [0, 65535] { R1119 += 1, R1071 += 1, R1036 += 1, R1037 += 1 };
  s0 -> s3 [0, 65535] { R1119 += 1, R1070 += 1, R1071 += 1 };
  s1 -> s1 [0, 65535] { R1119 += 1, R1071 += 1, R1037 += 1 };
  s1 -> s5 [0, 65535] { R1119 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1119 += 1, R1071 += 1 };
  s2 -> s1 [0, 65535] { R1119 += 1, R1071 += 1, R1037 += 1 };
  s2 -> s5 [0, 65535] { R1119 += 1 };
  s2 -> s2 [0, 65535] { R1119 += 1, R1071 += 1, R1036 += 1, R1037 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1119 += 1, R1071 += 1, R1037 += 1 };
  s3 -> s2 [0, 65535] { R1119 += 1, R1071 += 1, R1036 += 1, R1037 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1119 += 1, R1070 += 1, R1071 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1119 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1119 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1119 += 1, R1071 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 63] { R1121 += 1, R1073 += 1 };
  s0 -> s0 [0, 65535] { R1120 += 1, R1121 += 1 };
  s0 -> s2 [0, 65535] { R1121 += 1, R1072 += 1, R1073 += 1 };
  s0 -> s3 [64, 64] { R1121 += 1, R1073 += 1 };
  s0 -> s1 [65, 65535] { R1121 += 1, R1073 += 1 };
  s1 -> s1 [0, 63] { R1121 += 1, R1073 += 1 };
  s1 -> s3 [64, 64] { R1121 += 1, R1073 += 1 };
  s1 -> s1 [65, 65535] { R1121 += 1, R1073 += 1 };
  s2 -> s1 [0, 63] { R1121 += 1, R1073 += 1 };
  s2 -> s2 [0, 65535] { R1121 += 1, R1072 += 1, R1073 += 1 };
  s2 -> s3 [64, 64] { R1121 += 1, R1073 += 1 };
  s2 -> s1 [65, 65535] { R1121 += 1, R1073 += 1 };
  s3 -> s3 [0, 65535] { R1121 += 1, R1073 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1121 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1121 += 1 };
  accepting s3, s4, s5;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1122 += 1, R1123 += 1 };
  s0 -> s1 [0, 65535] { R1123 += 1, R1074 += 1, R1075 += 1 };
  s0 -> s2 [0, 65535] { R1123 += 1, R1075 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R1123 += 1, R1074 += 1, R1075 += 1 };
  s1 -> s2 [0, 65535] { R1123 += 1, R1075 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1123 += 1, R1075 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R1123 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1123 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 36] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s0 -> s0 [0, 65535] { R1124 += 1, R1125 += 1 };
  s0 -> s2 [0, 65535] { R1125 += 1, R1077 += 1, R1024 += 1, R1025 += 1 };
  s0 -> s3 [0, 65535] { R1125 += 1, R1076 += 1, R1077 += 1 };
  s0 -> s1 [38, 42] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s0 -> s1 [44, 57] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s0 -> s1 [59, 63] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s0 -> s1 [65, 65535] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s1 -> s1 [0, 36] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1125 += 1 };
  s1 -> s1 [0, 65535] { R1125 += 1, R1077 += 1 };
  s1 -> s1 [38, 42] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s1 -> s1 [44, 57] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s1 -> s1 [59, 63] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s1 -> s1 [65, 65535] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s2 -> s1 [0, 36] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1125 += 1 };
  s2 -> s2 [0, 65535] { R1125 += 1, R1077 += 1, R1024 += 1, R1025 += 1 };
  s2 -> s1 [38, 42] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s2 -> s1 [44, 57] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s2 -> s1 [59, 63] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s2 -> s1 [65, 65535] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s3 -> s1 [0, 36] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1125 += 1, R1077 += 1, R1024 += 1, R1025 += 1 };
  s3 -> s3 [0, 65535] { R1125 += 1, R1076 += 1, R1077 += 1 };
  s3 -> s1 [38, 42] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s3 -> s1 [44, 57] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s3 -> s1 [59, 63] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s3 -> s1 [65, 65535] { R1125 += 1, R1077 += 1, R1025 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1125 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1127 += 1, R1079 += 1, R1026 += 1, R1027 += 1 };
  s0 -> s2 [0, 65535] { R1127 += 1, R1079 += 1, R1027 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1126 += 1, R1127 += 1 };
  s0 -> s3 [0, 65535] { R1127 += 1, R1078 += 1, R1079 += 1 };
  s1 -> s1 [0, 65535] { R1127 += 1, R1079 += 1, R1026 += 1, R1027 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1127 += 1, R1079 += 1, R1027 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R1127 += 1 };
  s2 -> s5 [0, 65535] { R1127 += 1, R1079 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1127 += 1, R1079 += 1, R1027 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R1127 += 1 };
  s3 -> s1 [0, 65535] { R1127 += 1, R1079 += 1, R1026 += 1, R1027 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1127 += 1, R1079 += 1, R1027 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R1127 += 1, R1078 += 1, R1079 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1127 += 1, R1079 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R1127 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1127 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 43] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s0 -> s2 [0, 65535] { R1129 += 1, R1081 += 1, R1038 += 1, R1039 += 1 };
  s0 -> s0 [0, 65535] { R1128 += 1, R1129 += 1 };
  s0 -> s3 [0, 65535] { R1129 += 1, R1080 += 1, R1081 += 1 };
  s0 -> s1 [45, 57] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s0 -> s4 [58, 58] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s0 -> s1 [59, 65535] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s1 -> s1 [0, 43] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s1 -> s1 [45, 57] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s1 -> s4 [58, 58] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s1 -> s1 [59, 65535] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s2 -> s1 [0, 43] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s2 -> s2 [0, 65535] { R1129 += 1, R1081 += 1, R1038 += 1, R1039 += 1 };
  s2 -> s1 [45, 57] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s2 -> s4 [58, 58] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s2 -> s1 [59, 65535] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s3 -> s1 [0, 43] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s3 -> s2 [0, 65535] { R1129 += 1, R1081 += 1, R1038 += 1, R1039 += 1 };
  s3 -> s3 [0, 65535] { R1129 += 1, R1080 += 1, R1081 += 1 };
  s3 -> s1 [45, 57] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s3 -> s4 [58, 58] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s3 -> s1 [59, 65535] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s4 -> s4 [0, 43] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1129 += 1, R1081 += 1 };
  s4 -> s6 [0, 65535] { R1129 += 1 };
  s4 -> s4 [45, 65535] { R1129 += 1, R1081 += 1, R1039 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1129 += 1 };
  accepting s4, s5, s6;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1131 += 1, R1083 += 1, R1041 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1131 += 1, R1082 += 1, R1083 += 1 };
  s0 -> s3 [0, 65535] { R1131 += 1, R1083 += 1, R1040 += 1, R1041 += 1 };
  s0 -> s0 [0, 65535] { R1130 += 1, R1131 += 1 };
  s1 -> s1 [0, 65535] { R1131 += 1, R1083 += 1, R1041 += 1, R4 += 1 };
  s1 -> s6 [0, 65535] { R1131 += 1, R1083 += 1 };
  s1 -> s4 [0, 65535] { R1131 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1131 += 1, R1083 += 1, R1041 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1131 += 1, R1082 += 1, R1083 += 1 };
  s2 -> s3 [0, 65535] { R1131 += 1, R1083 += 1, R1040 += 1, R1041 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1131 += 1, R1083 += 1, R1041 += 1, R4 += 1 };
  s3 -> s4 [0, 65535] { R1131 += 1 };
  s3 -> s3 [0, 65535] { R1131 += 1, R1083 += 1, R1040 += 1, R1041 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1131 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1131 += 1, R1083 += 1 };
  s6 -> s4 [0, 65535] { R1131 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 57] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s0 -> s2 [0, 65535] { R1133 += 1, R1085 += 1, R1042 += 1, R1043 += 1 };
  s0 -> s0 [0, 65535] { R1132 += 1, R1133 += 1 };
  s0 -> s3 [0, 65535] { R1133 += 1, R1084 += 1, R1085 += 1 };
  s0 -> s4 [0, 65535] { R1133 += 1, R1085 += 1, R1043 += 1, R582 += 1, R583 += 1 };
  s0 -> s5 [58, 58] { R1133 += 1, R1085 += 1, R1043 += 1 };
  s0 -> s1 [59, 65535] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s1 -> s1 [0, 57] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s1 -> s5 [58, 58] { R1133 += 1, R1085 += 1, R1043 += 1 };
  s1 -> s1 [59, 65535] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s2 -> s1 [0, 57] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s2 -> s2 [0, 65535] { R1133 += 1, R1085 += 1, R1042 += 1, R1043 += 1 };
  s2 -> s4 [0, 65535] { R1133 += 1, R1085 += 1, R1043 += 1, R582 += 1, R583 += 1 };
  s2 -> s5 [58, 58] { R1133 += 1, R1085 += 1, R1043 += 1 };
  s2 -> s1 [59, 65535] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s3 -> s1 [0, 57] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s3 -> s2 [0, 65535] { R1133 += 1, R1085 += 1, R1042 += 1, R1043 += 1 };
  s3 -> s3 [0, 65535] { R1133 += 1, R1084 += 1, R1085 += 1 };
  s3 -> s4 [0, 65535] { R1133 += 1, R1085 += 1, R1043 += 1, R582 += 1, R583 += 1 };
  s3 -> s5 [58, 58] { R1133 += 1, R1085 += 1, R1043 += 1 };
  s3 -> s1 [59, 65535] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s4 -> s1 [0, 57] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s4 -> s4 [0, 65535] { R1133 += 1, R1085 += 1, R1043 += 1, R582 += 1, R583 += 1 };
  s4 -> s5 [58, 58] { R1133 += 1, R1085 += 1, R1043 += 1 };
  s4 -> s1 [59, 65535] { R1133 += 1, R1085 += 1, R1043 += 1, R583 += 1 };
  s5 -> s5 [0, 65535] { R1133 += 1, R1085 += 1, R1043 += 1 };
  s5 -> s6 [0, 65535] { R1133 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1133 += 1, R1085 += 1 };
  s6 -> s6 [0, 65535] { R1133 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1133 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1133 += 1, R1085 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 90] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s0 -> s0 [0, 65535] { R1134 += 1, R1135 += 1 };
  s0 -> s2 [0, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1012 += 1, R1013 += 1 };
  s0 -> s3 [0, 65535] { R1135 += 1, R1086 += 1, R1087 += 1 };
  s0 -> s4 [0, 65535] { R1135 += 1, R1087 += 1, R1044 += 1, R1045 += 1 };
  s0 -> s5 [91, 91] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s0 -> s1 [92, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s1 -> s6 [0, 65535] { R1135 += 1 };
  s1 -> s1 [0, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s1 -> s9 [0, 65535] { R1135 += 1, R1087 += 1, R1045 += 1 };
  s1 -> s8 [0, 65535] { R1135 += 1, R1087 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 90] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s2 -> s6 [0, 65535] { R1135 += 1 };
  s2 -> s2 [0, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1012 += 1, R1013 += 1 };
  s2 -> s8 [0, 65535] { R1135 += 1, R1087 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [91, 91] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s2 -> s1 [92, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s3 -> s1 [0, 90] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s3 -> s2 [0, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1012 += 1, R1013 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R1135 += 1, R1086 += 1, R1087 += 1 };
  s3 -> s4 [0, 65535] { R1135 += 1, R1087 += 1, R1044 += 1, R1045 += 1 };
  s3 -> s5 [91, 91] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s3 -> s1 [92, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s4 -> s1 [0, 90] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s4 -> s6 [0, 65535] { R1135 += 1 };
  s4 -> s2 [0, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1012 += 1, R1013 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R1135 += 1, R1087 += 1, R1044 += 1, R1045 += 1 };
  s4 -> s5 [91, 91] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s4 -> s1 [92, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s5 -> s1 [0, 65535] { R1135 += 1, R1087 += 1, R1045 += 1, R1013 += 1 };
  s6 -> s6 [0, 65535] { R1135 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1135 += 1 };
  s8 -> s8 [0, 65535] { R1135 += 1, R1087 += 1 };
  s8 -> s7 [0, 65535];
  s9 -> s6 [0, 65535] { R1135 += 1 };
  s9 -> s9 [0, 65535] { R1135 += 1, R1087 += 1, R1045 += 1 };
  s9 -> s8 [0, 65535] { R1135 += 1, R1087 += 1 };
  s9 -> s7 [0, 65535];
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R1136 += 1, R1137 += 1 };
  s0 -> s1 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1, R1015 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R1137 += 1, R1088 += 1, R1089 += 1 };
  s0 -> s3 [0, 65535] { R1137 += 1, R1089 += 1, R1046 += 1, R1047 += 1 };
  s0 -> s4 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1, R1014 += 1, R1015 += 1 };
  s1 -> s1 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1, R1015 += 1, R9 += 1 };
  s1 -> s5 [0, 65535] { R1137 += 1, R1089 += 1 };
  s1 -> s8 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R1137 += 1 };
  s2 -> s1 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1, R1015 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R1137 += 1, R1088 += 1, R1089 += 1 };
  s2 -> s3 [0, 65535] { R1137 += 1, R1089 += 1, R1046 += 1, R1047 += 1 };
  s2 -> s4 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1, R1014 += 1, R1015 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1, R1015 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R1137 += 1, R1089 += 1, R1046 += 1, R1047 += 1 };
  s3 -> s4 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1, R1014 += 1, R1015 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R1137 += 1 };
  s4 -> s1 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1, R1015 += 1, R9 += 1 };
  s4 -> s5 [0, 65535] { R1137 += 1, R1089 += 1 };
  s4 -> s4 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1, R1014 += 1, R1015 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R1137 += 1 };
  s5 -> s5 [0, 65535] { R1137 += 1, R1089 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R1137 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1137 += 1 };
  s8 -> s5 [0, 65535] { R1137 += 1, R1089 += 1 };
  s8 -> s8 [0, 65535] { R1137 += 1, R1089 += 1, R1047 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1137 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 57] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s0 -> s2 [0, 65535] { R1139 += 1, R1091 += 1, R1049 += 1, R1016 += 1, R1017 += 1 };
  s0 -> s3 [0, 65535] { R1139 += 1, R1090 += 1, R1091 += 1 };
  s0 -> s4 [0, 65535] { R1139 += 1, R1091 += 1, R1048 += 1, R1049 += 1 };
  s0 -> s0 [0, 65535] { R1138 += 1, R1139 += 1 };
  s0 -> s1 [59, 65535] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s1 -> s1 [0, 57] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1139 += 1 };
  s1 -> s1 [0, 65535] { R1139 += 1, R1091 += 1, R1049 += 1 };
  s1 -> s7 [0, 65535] { R1139 += 1, R1091 += 1 };
  s1 -> s1 [59, 65535] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s2 -> s1 [0, 57] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1139 += 1, R1091 += 1, R1049 += 1, R1016 += 1, R1017 += 1 };
  s2 -> s6 [0, 65535] { R1139 += 1 };
  s2 -> s7 [0, 65535] { R1139 += 1, R1091 += 1 };
  s2 -> s1 [59, 65535] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s3 -> s1 [0, 57] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1139 += 1, R1091 += 1, R1049 += 1, R1016 += 1, R1017 += 1 };
  s3 -> s3 [0, 65535] { R1139 += 1, R1090 += 1, R1091 += 1 };
  s3 -> s4 [0, 65535] { R1139 += 1, R1091 += 1, R1048 += 1, R1049 += 1 };
  s3 -> s1 [59, 65535] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s4 -> s1 [0, 57] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R1139 += 1, R1091 += 1, R1049 += 1, R1016 += 1, R1017 += 1 };
  s4 -> s6 [0, 65535] { R1139 += 1 };
  s4 -> s4 [0, 65535] { R1139 += 1, R1091 += 1, R1048 += 1, R1049 += 1 };
  s4 -> s1 [59, 65535] { R1139 += 1, R1091 += 1, R1049 += 1, R1017 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1139 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1139 += 1 };
  s7 -> s7 [0, 65535] { R1139 += 1, R1091 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1, R1019 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1, R1018 += 1, R1019 += 1 };
  s0 -> s0 [0, 65535] { R1140 += 1, R1141 += 1 };
  s0 -> s3 [0, 65535] { R1141 += 1, R1092 += 1, R1093 += 1 };
  s0 -> s4 [0, 65535] { R1141 += 1, R1093 += 1, R1050 += 1, R1051 += 1 };
  s1 -> s1 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1, R1019 += 1, R0 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1141 += 1 };
  s1 -> s8 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1 };
  s1 -> s7 [0, 65535] { R1141 += 1, R1093 += 1 };
  s2 -> s1 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1, R1019 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1, R1018 += 1, R1019 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1141 += 1 };
  s2 -> s7 [0, 65535] { R1141 += 1, R1093 += 1 };
  s3 -> s1 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1, R1019 += 1, R0 += 1 };
  s3 -> s2 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1, R1018 += 1, R1019 += 1 };
  s3 -> s3 [0, 65535] { R1141 += 1, R1092 += 1, R1093 += 1 };
  s3 -> s4 [0, 65535] { R1141 += 1, R1093 += 1, R1050 += 1, R1051 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1, R1019 += 1, R0 += 1 };
  s4 -> s2 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1, R1018 += 1, R1019 += 1 };
  s4 -> s4 [0, 65535] { R1141 += 1, R1093 += 1, R1050 += 1, R1051 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1141 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1141 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1141 += 1 };
  s7 -> s7 [0, 65535] { R1141 += 1, R1093 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R1141 += 1 };
  s8 -> s8 [0, 65535] { R1141 += 1, R1093 += 1, R1051 += 1 };
  s8 -> s7 [0, 65535] { R1141 += 1, R1093 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s0 -> s2 [0, 65535] { R1143 += 1, R1095 += 1, R1053 += 1, R1020 += 1, R1021 += 1 };
  s0 -> s3 [0, 65535] { R1143 += 1, R1095 += 1, R1052 += 1, R1053 += 1 };
  s0 -> s4 [0, 65535] { R1143 += 1, R1094 += 1, R1095 += 1 };
  s0 -> s0 [0, 65535] { R1142 += 1, R1143 += 1 };
  s0 -> s1 [91, 65535] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s1 -> s1 [0, 64] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s1 -> s1 [0, 65535] { R1143 += 1, R1095 += 1, R1053 += 1 };
  s1 -> s7 [0, 65535] { R1143 += 1, R1095 += 1 };
  s1 -> s6 [0, 65535] { R1143 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [91, 65535] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s2 -> s1 [0, 64] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s2 -> s2 [0, 65535] { R1143 += 1, R1095 += 1, R1053 += 1, R1020 += 1, R1021 += 1 };
  s2 -> s7 [0, 65535] { R1143 += 1, R1095 += 1 };
  s2 -> s6 [0, 65535] { R1143 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [91, 65535] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s3 -> s1 [0, 64] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s3 -> s2 [0, 65535] { R1143 += 1, R1095 += 1, R1053 += 1, R1020 += 1, R1021 += 1 };
  s3 -> s3 [0, 65535] { R1143 += 1, R1095 += 1, R1052 += 1, R1053 += 1 };
  s3 -> s6 [0, 65535] { R1143 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [91, 65535] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s4 -> s1 [0, 64] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s4 -> s2 [0, 65535] { R1143 += 1, R1095 += 1, R1053 += 1, R1020 += 1, R1021 += 1 };
  s4 -> s3 [0, 65535] { R1143 += 1, R1095 += 1, R1052 += 1, R1053 += 1 };
  s4 -> s4 [0, 65535] { R1143 += 1, R1094 += 1, R1095 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [91, 65535] { R1143 += 1, R1095 += 1, R1053 += 1, R1021 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1143 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1143 += 1, R1095 += 1 };
  s7 -> s6 [0, 65535] { R1143 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1, R1022 += 1, R1023 += 1 };
  s0 -> s2 [0, 65535] { R1145 += 1, R1097 += 1, R1054 += 1, R1055 += 1 };
  s0 -> s3 [0, 65535] { R1145 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s0 [0, 65535] { R1144 += 1, R1145 += 1 };
  s0 -> s4 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1, R1023 += 1, R1007 += 1 };
  s1 -> s5 [0, 65535] { R1145 += 1, R1097 += 1 };
  s1 -> s1 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1, R1022 += 1, R1023 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R1145 += 1 };
  s1 -> s4 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1, R1023 += 1, R1007 += 1 };
  s2 -> s1 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1, R1022 += 1, R1023 += 1 };
  s2 -> s2 [0, 65535] { R1145 += 1, R1097 += 1, R1054 += 1, R1055 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R1145 += 1 };
  s2 -> s4 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1, R1023 += 1, R1007 += 1 };
  s3 -> s1 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1, R1022 += 1, R1023 += 1 };
  s3 -> s2 [0, 65535] { R1145 += 1, R1097 += 1, R1054 += 1, R1055 += 1 };
  s3 -> s3 [0, 65535] { R1145 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1, R1023 += 1, R1007 += 1 };
  s4 -> s5 [0, 65535] { R1145 += 1, R1097 += 1 };
  s4 -> s6 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R1145 += 1 };
  s4 -> s4 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1, R1023 += 1, R1007 += 1 };
  s5 -> s5 [0, 65535] { R1145 += 1, R1097 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1145 += 1 };
  s6 -> s5 [0, 65535] { R1145 += 1, R1097 += 1 };
  s6 -> s6 [0, 65535] { R1145 += 1, R1097 += 1, R1055 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1145 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1145 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R2 - R15 = 1 && R3 = R1037 && R4 = R1019 && R5 = R1055 && R6 = R1071 && R7 = R1145 && R14 = 0 && R582 = 0 && R583 - R1018 = -1 && R866 = 0 && R867 = R1097 && R1008 = 0 && R1009 = 1 && R1010 = 0 && R1011 = 1 && R1012 = 0 && R1013 = 1 && R1014 = 0 && R1015 = 1 && R1016 = R1018 && R1017 = R1019 && R1024 = 0 && R1025 = 4 && R1026 = 0 && R1027 = 4 && R1028 = 1 && R1029 = R1037 && R1030 = 1 && R1031 = R1037 && R1032 = 1 && R1033 = R1037 && R1034 = 1 && R1035 = R1037 && R1036 = 1 && R1038 = 5 && R1039 = R1055 && R1040 = 5 && R1041 = R1055 && R1042 = 5 && R1043 = R1055 && R1044 = 5 && R1045 = R1055 && R1046 = 5 && R1047 = R1055 && R1048 = 5 && R1049 = R1055 && R1050 = 5 && R1051 = R1055 && R1052 = 5 && R1053 = R1055 && R1054 = 5 && R1056 - R1097 = 1 && R1057 = R1071 && R1058 - R1097 = 1 && R1059 = R1071 && R1060 - R1097 = 1 && R1061 = R1071 && R1062 - R1097 = 1 && R1063 = R1071 && R1064 - R1097 = 1 && R1065 = R1071 && R1066 - R1097 = 1 && R1067 = R1071 && R1068 - R1097 = 1 && R1069 = R1071 && R1070 - R1097 = 1 && R1072 = 0 && R1073 = R1097 && R1074 = 0 && R1075 = R1097 && R1076 = 0 && R1077 = R1097 && R1078 = 0 && R1079 = R1097 && R1080 = 0 && R1081 = R1097 && R1082 = 0 && R1083 = R1097 && R1084 = 0 && R1085 = R1097 && R1086 = 0 && R1087 = R1097 && R1088 = 0 && R1089 = R1097 && R1090 = 0 && R1091 = R1097 && R1092 = 0 && R1093 = R1097 && R1094 = 0 && R1095 = R1097 && R1096 = 0 && R1098 = 10 && R1099 = R1145 && R1100 = 10 && R1101 = R1145 && R1102 = 10 && R1103 = R1145 && R1104 = 10 && R1105 = R1145 && R1106 = 10 && R1107 = R1145 && R1108 = 10 && R1109 = R1145 && R1110 = 10 && R1111 = R1145 && R1112 = 10 && R1113 = R1145 && R1114 = 10 && R1115 = R1145 && R1116 = 10 && R1117 = R1145 && R1118 = 10 && R1119 = R1145 && R1120 = 10 && R1121 = R1145 && R1122 = 10 && R1123 = R1145 && R1124 = 10 && R1125 = R1145 && R1126 = 10 && R1127 = R1145 && R1128 = 10 && R1129 = R1145 && R1130 = 10 && R1131 = R1145 && R1132 = 10 && R1133 = R1145 && R1134 = 10 && R1135 = R1145 && R1136 = 10 && R1137 = R1145 && R1138 = 10 && R1139 = R1145 && R1140 = 10 && R1141 = R1145 && R1142 = 10 && R1143 = R1145 && R1144 = 10 && R0 != 0 && R1 != 0 && R10 < 1 && -1 < R15 && R1018 - R1019 < 1 && 0 < R1018 && 0 < R1037 && 4 < R1055 && R1097 < R1071 && -1 < R1097 && 9 < R1145 && (R1020 != 0 || R1018 - R1021 = 1 || (R1007 = 0 && R1018 = 1)) && (R1022 != 0 || R1018 - R1023 = 1 || (R1007 = 0 && R1018 = 1)) && (R1020 = 0 || (R1007 = 0 && R1018 = 1)) && (R1022 = 0 || (R1007 = 0 && R1018 = 1));
// End of Parikh automata intersection problem
