// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R119, R120, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R3, R5, R6;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R208 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s2 [46, 46] { R208 += 1 };
  s0 -> s3 [47, 47] { R208 += 1 };
  s0 -> s1 [48, 65535] { R208 += 1 };
  s1 -> s1 [0, 45] { R208 += 1 };
  s1 -> s2 [46, 46] { R208 += 1 };
  s1 -> s3 [47, 47] { R208 += 1 };
  s1 -> s1 [48, 65535] { R208 += 1 };
  s2 -> s1 [0, 45] { R208 += 1 };
  s2 -> s2 [46, 46] { R208 += 1 };
  s2 -> s3 [47, 47] { R208 += 1 };
  s2 -> s1 [48, 114] { R208 += 1 };
  s2 -> s8 [115, 115] { R208 += 1 };
  s2 -> s1 [116, 65535] { R208 += 1 };
  s3 -> s3 [0, 45] { R208 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R208 += 1 };
  s3 -> s3 [47, 65535] { R208 += 1 };
  s4 -> s3 [0, 45] { R208 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R208 += 1 };
  s4 -> s3 [47, 114] { R208 += 1 };
  s4 -> s5 [115, 115] { R208 += 1 };
  s4 -> s3 [116, 65535] { R208 += 1 };
  s5 -> s3 [0, 45] { R208 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R208 += 1 };
  s5 -> s3 [47, 110] { R208 += 1 };
  s5 -> s6 [111, 111] { R208 += 1 };
  s5 -> s3 [112, 65535] { R208 += 1 };
  s6 -> s3 [0, 45] { R208 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R208 += 1 };
  s6 -> s3 [47, 98] { R208 += 1 };
  s6 -> s7 [99, 99] { R208 += 1 };
  s6 -> s3 [100, 65535] { R208 += 1 };
  s7 -> s3 [0, 45] { R208 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R208 += 1 };
  s7 -> s3 [47, 106] { R208 += 1 };
  s7 -> s3 [108, 65535] { R208 += 1 };
  s8 -> s1 [0, 45] { R208 += 1 };
  s8 -> s2 [46, 46] { R208 += 1 };
  s8 -> s3 [47, 47] { R208 += 1 };
  s8 -> s1 [48, 110] { R208 += 1 };
  s8 -> s9 [111, 111] { R208 += 1 };
  s8 -> s1 [112, 65535] { R208 += 1 };
  s9 -> s1 [0, 45] { R208 += 1 };
  s9 -> s2 [46, 46] { R208 += 1 };
  s9 -> s3 [47, 47] { R208 += 1 };
  s9 -> s1 [48, 98] { R208 += 1 };
  s9 -> s10 [99, 99] { R208 += 1 };
  s9 -> s1 [100, 65535] { R208 += 1 };
  s10 -> s1 [0, 45] { R208 += 1 };
  s10 -> s2 [46, 46] { R208 += 1 };
  s10 -> s3 [47, 47] { R208 += 1 };
  s10 -> s1 [48, 106] { R208 += 1 };
  s10 -> s1 [108, 65535] { R208 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s1 [0, 65535] { R210 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R210 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R212 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [0, 65535] { R212 += 1, R119 += 1, R120 += 1 };
  s0 -> s3 [47, 47] { R212 += 1 };
  s0 -> s1 [48, 65535] { R212 += 1, R120 += 1 };
  s1 -> s1 [0, 46] { R212 += 1, R120 += 1 };
  s1 -> s3 [47, 47] { R212 += 1 };
  s1 -> s1 [48, 65535] { R212 += 1, R120 += 1 };
  s2 -> s1 [0, 46] { R212 += 1, R120 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [47, 47] { R212 += 1 };
  s2 -> s1 [48, 65535] { R212 += 1, R120 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R212 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R214 += 1, R181 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R182 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R181 += 1, R182 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R214 += 1, R182 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R214 += 1 };
  s2 -> s2 [0, 65535] { R214 += 1, R182 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R214 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R216 += 1, R194 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R193 += 1, R194 += 1 };
  s0 -> s3 [64, 64] { R216 += 1, R194 += 1 };
  s0 -> s1 [65, 65535] { R216 += 1, R194 += 1 };
  s1 -> s1 [0, 63] { R216 += 1, R194 += 1 };
  s1 -> s3 [64, 64] { R216 += 1, R194 += 1 };
  s1 -> s1 [65, 65535] { R216 += 1, R194 += 1 };
  s2 -> s1 [0, 63] { R216 += 1, R194 += 1 };
  s2 -> s2 [0, 65535] { R216 += 1, R193 += 1, R194 += 1 };
  s2 -> s3 [64, 64] { R216 += 1, R194 += 1 };
  s2 -> s1 [65, 65535] { R216 += 1, R194 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R216 += 1, R194 += 1 };
  s3 -> s5 [0, 65535] { R216 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R216 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R218 += 1, R195 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R196 += 1, R176 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s1 -> s1 [0, 65535] { R218 += 1, R195 += 1, R196 += 1 };
  s1 -> s2 [0, 65535] { R218 += 1, R196 += 1, R176 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R218 += 1 };
  s2 -> s2 [0, 65535] { R218 += 1, R196 += 1, R176 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R218 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R220 += 1, R198 += 1, R184 += 1 };
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R198 += 1, R183 += 1, R184 += 1 };
  s0 -> s3 [0, 65535] { R220 += 1, R197 += 1, R198 += 1 };
  s0 -> s4 [58, 58] { R220 += 1, R198 += 1, R184 += 1 };
  s0 -> s1 [59, 63] { R220 += 1, R198 += 1, R184 += 1 };
  s0 -> s1 [65, 65535] { R220 += 1, R198 += 1, R184 += 1 };
  s1 -> s1 [0, 57] { R220 += 1, R198 += 1, R184 += 1 };
  s1 -> s4 [58, 58] { R220 += 1, R198 += 1, R184 += 1 };
  s1 -> s1 [59, 63] { R220 += 1, R198 += 1, R184 += 1 };
  s1 -> s1 [65, 65535] { R220 += 1, R198 += 1, R184 += 1 };
  s2 -> s1 [0, 57] { R220 += 1, R198 += 1, R184 += 1 };
  s2 -> s2 [0, 65535] { R220 += 1, R198 += 1, R183 += 1, R184 += 1 };
  s2 -> s4 [58, 58] { R220 += 1, R198 += 1, R184 += 1 };
  s2 -> s1 [59, 63] { R220 += 1, R198 += 1, R184 += 1 };
  s2 -> s1 [65, 65535] { R220 += 1, R198 += 1, R184 += 1 };
  s3 -> s1 [0, 57] { R220 += 1, R198 += 1, R184 += 1 };
  s3 -> s2 [0, 65535] { R220 += 1, R198 += 1, R183 += 1, R184 += 1 };
  s3 -> s3 [0, 65535] { R220 += 1, R197 += 1, R198 += 1 };
  s3 -> s4 [58, 58] { R220 += 1, R198 += 1, R184 += 1 };
  s3 -> s1 [59, 63] { R220 += 1, R198 += 1, R184 += 1 };
  s3 -> s1 [65, 65535] { R220 += 1, R198 += 1, R184 += 1 };
  s4 -> s4 [0, 63] { R220 += 1, R198 += 1, R184 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R220 += 1, R198 += 1 };
  s4 -> s6 [0, 65535] { R220 += 1 };
  s4 -> s4 [65, 65535] { R220 += 1, R198 += 1, R184 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R220 += 1 };
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s0 -> s1 [0, 65535] { R222 += 1, R199 += 1, R200 += 1 };
  s0 -> s2 [0, 65535] { R222 += 1, R200 += 1, R185 += 1, R186 += 1 };
  s0 -> s3 [0, 65535] { R222 += 1, R200 += 1, R186 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R222 += 1, R199 += 1, R200 += 1 };
  s1 -> s2 [0, 65535] { R222 += 1, R200 += 1, R185 += 1, R186 += 1 };
  s1 -> s3 [0, 65535] { R222 += 1, R200 += 1, R186 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R222 += 1 };
  s2 -> s2 [0, 65535] { R222 += 1, R200 += 1, R185 += 1, R186 += 1 };
  s2 -> s3 [0, 65535] { R222 += 1, R200 += 1, R186 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R222 += 1 };
  s3 -> s3 [0, 65535] { R222 += 1, R200 += 1, R186 += 1, R1 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R222 += 1, R200 += 1 };
  s4 -> s4 [0, 65535] { R222 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R222 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R222 += 1, R200 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R224 += 1, R202 += 1, R188 += 1, R5 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R223 += 1, R224 += 1 };
  s0 -> s3 [0, 65535] { R224 += 1, R201 += 1, R202 += 1 };
  s0 -> s4 [0, 65535] { R224 += 1, R202 += 1, R187 += 1, R188 += 1 };
  s0 -> s5 [58, 58] { R224 += 1, R202 += 1, R188 += 1 };
  s0 -> s1 [59, 65535] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s1 -> s1 [0, 57] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s1 -> s5 [58, 58] { R224 += 1, R202 += 1, R188 += 1 };
  s1 -> s1 [59, 65535] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s2 -> s1 [0, 57] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R224 += 1, R202 += 1, R188 += 1, R5 += 1, R6 += 1 };
  s2 -> s5 [58, 58] { R224 += 1, R202 += 1, R188 += 1 };
  s2 -> s1 [59, 65535] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s3 -> s1 [0, 57] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R224 += 1, R202 += 1, R188 += 1, R5 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R224 += 1, R201 += 1, R202 += 1 };
  s3 -> s4 [0, 65535] { R224 += 1, R202 += 1, R187 += 1, R188 += 1 };
  s3 -> s5 [58, 58] { R224 += 1, R202 += 1, R188 += 1 };
  s3 -> s1 [59, 65535] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s4 -> s1 [0, 57] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s4 -> s2 [0, 65535] { R224 += 1, R202 += 1, R188 += 1, R5 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R224 += 1, R202 += 1, R187 += 1, R188 += 1 };
  s4 -> s5 [58, 58] { R224 += 1, R202 += 1, R188 += 1 };
  s4 -> s1 [59, 65535] { R224 += 1, R202 += 1, R188 += 1, R6 += 1 };
  s5 -> s6 [0, 65535] { R224 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R224 += 1, R202 += 1 };
  s5 -> s5 [0, 65535] { R224 += 1, R202 += 1, R188 += 1 };
  s6 -> s6 [0, 65535] { R224 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R224 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R224 += 1, R202 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s0 -> s2 [0, 65535] { R226 += 1, R204 += 1, R189 += 1, R190 += 1 };
  s0 -> s3 [0, 65535] { R226 += 1, R204 += 1, R190 += 1, R177 += 1, R178 += 1 };
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s0 -> s4 [0, 65535] { R226 += 1, R203 += 1, R204 += 1 };
  s0 -> s5 [58, 58] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s0 -> s1 [59, 65535] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s1 -> s1 [0, 57] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s1 -> s5 [58, 58] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s1 -> s1 [59, 65535] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s2 -> s1 [0, 57] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s2 -> s2 [0, 65535] { R226 += 1, R204 += 1, R189 += 1, R190 += 1 };
  s2 -> s3 [0, 65535] { R226 += 1, R204 += 1, R190 += 1, R177 += 1, R178 += 1 };
  s2 -> s5 [58, 58] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s2 -> s1 [59, 65535] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s3 -> s1 [0, 57] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s3 -> s3 [0, 65535] { R226 += 1, R204 += 1, R190 += 1, R177 += 1, R178 += 1 };
  s3 -> s5 [58, 58] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s3 -> s1 [59, 65535] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s4 -> s1 [0, 57] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s4 -> s2 [0, 65535] { R226 += 1, R204 += 1, R189 += 1, R190 += 1 };
  s4 -> s3 [0, 65535] { R226 += 1, R204 += 1, R190 += 1, R177 += 1, R178 += 1 };
  s4 -> s4 [0, 65535] { R226 += 1, R203 += 1, R204 += 1 };
  s4 -> s5 [58, 58] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s4 -> s1 [59, 65535] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s5 -> s6 [0, 65535] { R226 += 1, R204 += 1, R190 += 1 };
  s5 -> s5 [0, 65535] { R226 += 1, R204 += 1, R190 += 1, R178 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R226 += 1 };
  s5 -> s9 [0, 65535] { R226 += 1, R204 += 1 };
  s6 -> s6 [0, 65535] { R226 += 1, R204 += 1, R190 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R226 += 1 };
  s6 -> s9 [0, 65535] { R226 += 1, R204 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R226 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R226 += 1 };
  s9 -> s9 [0, 65535] { R226 += 1, R204 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R228 += 1, R206 += 1, R192 += 1, R179 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R228 += 1, R206 += 1, R192 += 1, R180 += 1, R175 += 1 };
  s0 -> s3 [0, 65535] { R228 += 1, R205 += 1, R206 += 1 };
  s0 -> s4 [0, 65535] { R228 += 1, R206 += 1, R191 += 1, R192 += 1 };
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s1 -> s1 [0, 65535] { R228 += 1, R206 += 1, R192 += 1, R179 += 1, R180 += 1 };
  s1 -> s7 [0, 65535] { R228 += 1, R206 += 1 };
  s1 -> s2 [0, 65535] { R228 += 1, R206 += 1, R192 += 1, R180 += 1, R175 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R228 += 1 };
  s2 -> s7 [0, 65535] { R228 += 1, R206 += 1 };
  s2 -> s2 [0, 65535] { R228 += 1, R206 += 1, R192 += 1, R180 += 1, R175 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s8 [0, 65535] { R228 += 1, R206 += 1, R192 += 1 };
  s2 -> s6 [0, 65535] { R228 += 1 };
  s3 -> s1 [0, 65535] { R228 += 1, R206 += 1, R192 += 1, R179 += 1, R180 += 1 };
  s3 -> s2 [0, 65535] { R228 += 1, R206 += 1, R192 += 1, R180 += 1, R175 += 1 };
  s3 -> s3 [0, 65535] { R228 += 1, R205 += 1, R206 += 1 };
  s3 -> s4 [0, 65535] { R228 += 1, R206 += 1, R191 += 1, R192 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R228 += 1, R206 += 1, R192 += 1, R179 += 1, R180 += 1 };
  s4 -> s2 [0, 65535] { R228 += 1, R206 += 1, R192 += 1, R180 += 1, R175 += 1 };
  s4 -> s4 [0, 65535] { R228 += 1, R206 += 1, R191 += 1, R192 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R228 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R228 += 1 };
  s7 -> s7 [0, 65535] { R228 += 1, R206 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R228 += 1 };
  s8 -> s7 [0, 65535] { R228 += 1, R206 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R228 += 1, R206 += 1, R192 += 1 };
  s8 -> s6 [0, 65535] { R228 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 = R178 && R2 = R182 && R3 = R228 && R5 = 0 && R6 - R177 = -1 && R119 = 0 && R120 = R204 && R181 - R204 = 1 && R183 = 0 && R187 = 0 && R189 = 0 && R193 = 0 && R194 = R204 && R197 = 0 && R198 = R204 && R201 = 0 && R202 = R204 && R203 = 0 && R207 = 10 && R208 = R228 && R209 = 10 && R210 = R228 && R211 = 10 && R212 = R228 && R213 = 10 && R214 = R228 && R215 = 10 && R216 = R228 && R217 = 10 && R218 = R228 && R219 = 10 && R220 = R228 && R221 = 10 && R222 = R228 && R223 = 10 && R224 = R228 && R225 = 10 && R226 = R228 && R227 = 10 && R0 != 0 && R177 - R178 < 1 && -1 < R177 && R204 < R182 && R184 < 9 && R188 < 9 && R190 < 9 && -1 < R204 && 9 < R228 && (R177 != R179 || R178 = R180 || ((R175 != 0 || R178 - R179 < 1 || R179 < 0) && (R175 = 0 || R178 < R179 || R179 < 0))) && (R184 != 8 || 7 < R176) && (R185 != 0 || ((R176 != R186 || R178 < 1 || R186 < 9) && (R177 != 0 || R178 != 0 || ((R176 != R186 || R186 < 9) && (R186 != 8 || 7 < R176 || R176 < 1) && (R176 = R186 || R186 = 8 || R176 < 1))) && (R186 != 8 || 7 < R176 || R178 < 1) && (R176 = R186 || R186 = 8 || R178 < 1))) && (R188 != 8 || 7 < R176) && (R190 != 8 || 7 < R176) && (R191 != 0 || ((R176 != R192 || R178 < 1 || R192 < 9) && (R177 != 0 || R178 != 0 || ((R176 != R192 || R192 < 9) && (R192 != 8 || 7 < R176 || R176 < 1) && (R176 = R192 || R192 = 8 || R176 < 1))) && (R192 != 8 || 7 < R176 || R178 < 1) && (R176 = R192 || R192 = 8 || R178 < 1))) && (R195 != 0 || R196 = R204 || (R176 = 0 && R204 = 0)) && (R199 != 0 || R200 = R204 || (R176 = 0 && R204 = 0)) && (R205 != 0 || R204 = R206 || (R176 = 0 && R204 = 0)) && (R176 = R184 || 7 < R184) && (R176 = R188 || 7 < R188) && (R176 = R190 || 7 < R190) && (R177 = R179 || (R175 = 0 && R177 = R178)) && (R185 = 0 || (R178 = 0 && (R177 != 0 || R176 < 1))) && (R191 = 0 || (R178 = 0 && (R177 != 0 || R176 < 1))) && (R195 = 0 || (R176 = 0 && R204 = 0)) && (R199 = 0 || (R176 = 0 && R204 = 0)) && (R205 = 0 || (R176 = 0 && R204 = 0));
// End of Parikh automata intersection problem
