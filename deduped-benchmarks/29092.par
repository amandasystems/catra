// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R189, R190, R2, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R4, R5, R6, R7, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R334 += 1 };
  s0 -> s0 [0, 65535] { R333 += 1, R334 += 1 };
  s0 -> s2 [46, 46] { R334 += 1 };
  s0 -> s3 [47, 47] { R334 += 1 };
  s0 -> s1 [48, 65535] { R334 += 1 };
  s1 -> s1 [0, 45] { R334 += 1 };
  s1 -> s2 [46, 46] { R334 += 1 };
  s1 -> s3 [47, 47] { R334 += 1 };
  s1 -> s1 [48, 65535] { R334 += 1 };
  s2 -> s1 [0, 45] { R334 += 1 };
  s2 -> s2 [46, 46] { R334 += 1 };
  s2 -> s3 [47, 47] { R334 += 1 };
  s2 -> s1 [48, 114] { R334 += 1 };
  s2 -> s8 [115, 115] { R334 += 1 };
  s2 -> s1 [116, 65535] { R334 += 1 };
  s3 -> s3 [0, 45] { R334 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R334 += 1 };
  s3 -> s3 [47, 65535] { R334 += 1 };
  s4 -> s3 [0, 45] { R334 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R334 += 1 };
  s4 -> s3 [47, 114] { R334 += 1 };
  s4 -> s5 [115, 115] { R334 += 1 };
  s4 -> s3 [116, 65535] { R334 += 1 };
  s5 -> s3 [0, 45] { R334 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R334 += 1 };
  s5 -> s3 [47, 110] { R334 += 1 };
  s5 -> s6 [111, 111] { R334 += 1 };
  s5 -> s3 [112, 65535] { R334 += 1 };
  s6 -> s3 [0, 45] { R334 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R334 += 1 };
  s6 -> s3 [47, 98] { R334 += 1 };
  s6 -> s7 [99, 99] { R334 += 1 };
  s6 -> s3 [100, 65535] { R334 += 1 };
  s7 -> s3 [0, 45] { R334 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R334 += 1 };
  s7 -> s3 [47, 106] { R334 += 1 };
  s7 -> s3 [108, 65535] { R334 += 1 };
  s8 -> s1 [0, 45] { R334 += 1 };
  s8 -> s2 [46, 46] { R334 += 1 };
  s8 -> s3 [47, 47] { R334 += 1 };
  s8 -> s1 [48, 110] { R334 += 1 };
  s8 -> s9 [111, 111] { R334 += 1 };
  s8 -> s1 [112, 65535] { R334 += 1 };
  s9 -> s1 [0, 45] { R334 += 1 };
  s9 -> s2 [46, 46] { R334 += 1 };
  s9 -> s3 [47, 47] { R334 += 1 };
  s9 -> s1 [48, 98] { R334 += 1 };
  s9 -> s10 [99, 99] { R334 += 1 };
  s9 -> s1 [100, 65535] { R334 += 1 };
  s10 -> s1 [0, 45] { R334 += 1 };
  s10 -> s2 [46, 46] { R334 += 1 };
  s10 -> s3 [47, 47] { R334 += 1 };
  s10 -> s1 [48, 106] { R334 += 1 };
  s10 -> s1 [108, 65535] { R334 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R335 += 1, R336 += 1 };
  s0 -> s1 [0, 65535] { R336 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R336 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R338 += 1, R190 += 1 };
  s0 -> s2 [0, 65535] { R338 += 1, R189 += 1, R190 += 1 };
  s0 -> s0 [0, 65535] { R337 += 1, R338 += 1 };
  s0 -> s3 [47, 47] { R338 += 1 };
  s0 -> s1 [48, 65535] { R338 += 1, R190 += 1 };
  s1 -> s1 [0, 46] { R338 += 1, R190 += 1 };
  s1 -> s3 [47, 47] { R338 += 1 };
  s1 -> s1 [48, 65535] { R338 += 1, R190 += 1 };
  s2 -> s1 [0, 46] { R338 += 1, R190 += 1 };
  s2 -> s2 [0, 65535] { R338 += 1, R189 += 1, R190 += 1 };
  s2 -> s3 [47, 47] { R338 += 1 };
  s2 -> s1 [48, 65535] { R338 += 1, R190 += 1 };
  s3 -> s3 [0, 65535] { R338 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R340 += 1, R291 += 1, R292 += 1 };
  s0 -> s0 [0, 65535] { R339 += 1, R340 += 1 };
  s0 -> s2 [0, 65535] { R340 += 1, R292 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R340 += 1, R291 += 1, R292 += 1 };
  s1 -> s2 [0, 65535] { R340 += 1, R292 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R340 += 1 };
  s2 -> s2 [0, 65535] { R340 += 1, R292 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R340 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R342 += 1, R310 += 1 };
  s0 -> s0 [0, 65535] { R341 += 1, R342 += 1 };
  s0 -> s2 [0, 65535] { R342 += 1, R309 += 1, R310 += 1 };
  s0 -> s3 [64, 64] { R342 += 1, R310 += 1 };
  s0 -> s1 [65, 65535] { R342 += 1, R310 += 1 };
  s1 -> s1 [0, 63] { R342 += 1, R310 += 1 };
  s1 -> s3 [64, 64] { R342 += 1, R310 += 1 };
  s1 -> s1 [65, 65535] { R342 += 1, R310 += 1 };
  s2 -> s1 [0, 63] { R342 += 1, R310 += 1 };
  s2 -> s2 [0, 65535] { R342 += 1, R309 += 1, R310 += 1 };
  s2 -> s3 [64, 64] { R342 += 1, R310 += 1 };
  s2 -> s1 [65, 65535] { R342 += 1, R310 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R342 += 1 };
  s3 -> s3 [0, 65535] { R342 += 1, R310 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R342 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R344 += 1, R312 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R344 += 1, R311 += 1, R312 += 1 };
  s0 -> s0 [0, 65535] { R343 += 1, R344 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R344 += 1, R312 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R344 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R344 += 1, R312 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R344 += 1, R311 += 1, R312 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R344 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 36] { R346 += 1, R314 += 1, R288 += 1 };
  s0 -> s0 [0, 65535] { R345 += 1, R346 += 1 };
  s0 -> s2 [0, 65535] { R346 += 1, R313 += 1, R314 += 1 };
  s0 -> s3 [0, 65535] { R346 += 1, R314 += 1, R287 += 1, R288 += 1 };
  s0 -> s1 [38, 42] { R346 += 1, R314 += 1, R288 += 1 };
  s0 -> s1 [44, 57] { R346 += 1, R314 += 1, R288 += 1 };
  s0 -> s1 [59, 63] { R346 += 1, R314 += 1, R288 += 1 };
  s0 -> s1 [65, 65535] { R346 += 1, R314 += 1, R288 += 1 };
  s1 -> s1 [0, 36] { R346 += 1, R314 += 1, R288 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R346 += 1, R314 += 1 };
  s1 -> s5 [0, 65535] { R346 += 1 };
  s1 -> s1 [38, 42] { R346 += 1, R314 += 1, R288 += 1 };
  s1 -> s1 [44, 57] { R346 += 1, R314 += 1, R288 += 1 };
  s1 -> s1 [59, 63] { R346 += 1, R314 += 1, R288 += 1 };
  s1 -> s1 [65, 65535] { R346 += 1, R314 += 1, R288 += 1 };
  s2 -> s1 [0, 36] { R346 += 1, R314 += 1, R288 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R346 += 1, R313 += 1, R314 += 1 };
  s2 -> s3 [0, 65535] { R346 += 1, R314 += 1, R287 += 1, R288 += 1 };
  s2 -> s1 [38, 42] { R346 += 1, R314 += 1, R288 += 1 };
  s2 -> s1 [44, 57] { R346 += 1, R314 += 1, R288 += 1 };
  s2 -> s1 [59, 63] { R346 += 1, R314 += 1, R288 += 1 };
  s2 -> s1 [65, 65535] { R346 += 1, R314 += 1, R288 += 1 };
  s3 -> s1 [0, 36] { R346 += 1, R314 += 1, R288 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R346 += 1, R314 += 1, R287 += 1, R288 += 1 };
  s3 -> s5 [0, 65535] { R346 += 1 };
  s3 -> s1 [38, 42] { R346 += 1, R314 += 1, R288 += 1 };
  s3 -> s1 [44, 57] { R346 += 1, R314 += 1, R288 += 1 };
  s3 -> s1 [59, 63] { R346 += 1, R314 += 1, R288 += 1 };
  s3 -> s1 [65, 65535] { R346 += 1, R314 += 1, R288 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R346 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R348 += 1, R316 += 1, R290 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R347 += 1, R348 += 1 };
  s0 -> s2 [0, 65535] { R348 += 1, R315 += 1, R316 += 1 };
  s0 -> s3 [0, 65535] { R348 += 1, R316 += 1, R289 += 1, R290 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R348 += 1, R316 += 1, R290 += 1, R0 += 1 };
  s1 -> s5 [0, 65535] { R348 += 1 };
  s1 -> s6 [0, 65535] { R348 += 1, R316 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R348 += 1, R316 += 1, R290 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R348 += 1, R315 += 1, R316 += 1 };
  s2 -> s3 [0, 65535] { R348 += 1, R316 += 1, R289 += 1, R290 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R348 += 1, R316 += 1, R290 += 1, R0 += 1 };
  s3 -> s5 [0, 65535] { R348 += 1 };
  s3 -> s3 [0, 65535] { R348 += 1, R316 += 1, R289 += 1, R290 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R348 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R348 += 1 };
  s6 -> s6 [0, 65535] { R348 += 1, R316 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 43] { R350 += 1, R318 += 1, R294 += 1 };
  s0 -> s2 [0, 65535] { R350 += 1, R318 += 1, R293 += 1, R294 += 1 };
  s0 -> s3 [0, 65535] { R350 += 1, R317 += 1, R318 += 1 };
  s0 -> s0 [0, 65535] { R349 += 1, R350 += 1 };
  s0 -> s1 [45, 64] { R350 += 1, R318 += 1, R294 += 1 };
  s0 -> s4 [80, 80] { R350 += 1, R318 += 1, R294 += 1 };
  s0 -> s1 [81, 65535] { R350 += 1, R318 += 1, R294 += 1 };
  s1 -> s1 [0, 43] { R350 += 1, R318 += 1, R294 += 1 };
  s1 -> s1 [45, 64] { R350 += 1, R318 += 1, R294 += 1 };
  s1 -> s4 [80, 80] { R350 += 1, R318 += 1, R294 += 1 };
  s1 -> s1 [81, 65535] { R350 += 1, R318 += 1, R294 += 1 };
  s2 -> s1 [0, 43] { R350 += 1, R318 += 1, R294 += 1 };
  s2 -> s2 [0, 65535] { R350 += 1, R318 += 1, R293 += 1, R294 += 1 };
  s2 -> s1 [45, 64] { R350 += 1, R318 += 1, R294 += 1 };
  s2 -> s4 [80, 80] { R350 += 1, R318 += 1, R294 += 1 };
  s2 -> s1 [81, 65535] { R350 += 1, R318 += 1, R294 += 1 };
  s3 -> s1 [0, 43] { R350 += 1, R318 += 1, R294 += 1 };
  s3 -> s2 [0, 65535] { R350 += 1, R318 += 1, R293 += 1, R294 += 1 };
  s3 -> s3 [0, 65535] { R350 += 1, R317 += 1, R318 += 1 };
  s3 -> s1 [45, 64] { R350 += 1, R318 += 1, R294 += 1 };
  s3 -> s4 [80, 80] { R350 += 1, R318 += 1, R294 += 1 };
  s3 -> s1 [81, 65535] { R350 += 1, R318 += 1, R294 += 1 };
  s4 -> s4 [0, 43] { R350 += 1, R318 += 1, R294 += 1 };
  s4 -> s4 [0, 65535] { R350 += 1, R318 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R350 += 1 };
  s4 -> s4 [45, 64] { R350 += 1, R318 += 1, R294 += 1 };
  s4 -> s4 [80, 65535] { R350 += 1, R318 += 1, R294 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R350 += 1 };
  accepting s4, s5, s6;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R352 += 1, R319 += 1, R320 += 1 };
  s0 -> s0 [0, 65535] { R351 += 1, R352 += 1 };
  s0 -> s2 [0, 65535] { R352 += 1, R320 += 1, R296 += 1, R2 += 1 };
  s0 -> s3 [0, 65535] { R352 += 1, R320 += 1, R295 += 1, R296 += 1 };
  s1 -> s1 [0, 65535] { R352 += 1, R319 += 1, R320 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R352 += 1, R320 += 1, R296 += 1, R2 += 1 };
  s1 -> s3 [0, 65535] { R352 += 1, R320 += 1, R295 += 1, R296 += 1 };
  s2 -> s6 [0, 65535] { R352 += 1, R320 += 1 };
  s2 -> s4 [0, 65535] { R352 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R352 += 1, R320 += 1, R296 += 1, R2 += 1 };
  s3 -> s4 [0, 65535] { R352 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R352 += 1, R320 += 1, R296 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R352 += 1, R320 += 1, R295 += 1, R296 += 1 };
  s4 -> s4 [0, 65535] { R352 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R352 += 1, R320 += 1 };
  s6 -> s4 [0, 65535] { R352 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 57] { R354 += 1, R322 += 1, R298 += 1 };
  s0 -> s0 [0, 65535] { R353 += 1, R354 += 1 };
  s0 -> s2 [0, 65535] { R354 += 1, R322 += 1, R297 += 1, R298 += 1 };
  s0 -> s3 [0, 65535] { R354 += 1, R322 += 1, R298 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R354 += 1, R321 += 1, R322 += 1 };
  s0 -> s5 [58, 58] { R354 += 1, R322 += 1, R298 += 1 };
  s0 -> s1 [59, 65535] { R354 += 1, R322 += 1, R298 += 1 };
  s1 -> s1 [0, 57] { R354 += 1, R322 += 1, R298 += 1 };
  s1 -> s1 [0, 65535] { R354 += 1, R322 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R354 += 1 };
  s1 -> s5 [58, 58] { R354 += 1, R322 += 1, R298 += 1 };
  s1 -> s1 [59, 65535] { R354 += 1, R322 += 1, R298 += 1 };
  s2 -> s1 [0, 57] { R354 += 1, R322 += 1, R298 += 1 };
  s2 -> s2 [0, 65535] { R354 += 1, R322 += 1, R297 += 1, R298 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R354 += 1, R322 += 1, R298 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R354 += 1 };
  s2 -> s5 [58, 58] { R354 += 1, R322 += 1, R298 += 1 };
  s2 -> s1 [59, 65535] { R354 += 1, R322 += 1, R298 += 1 };
  s3 -> s1 [0, 57] { R354 += 1, R322 += 1, R298 += 1 };
  s3 -> s7 [0, 65535] { R354 += 1, R322 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R354 += 1, R322 += 1, R298 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R354 += 1 };
  s3 -> s5 [58, 58] { R354 += 1, R322 += 1, R298 += 1 };
  s3 -> s1 [59, 65535] { R354 += 1, R322 += 1, R298 += 1 };
  s4 -> s1 [0, 57] { R354 += 1, R322 += 1, R298 += 1 };
  s4 -> s2 [0, 65535] { R354 += 1, R322 += 1, R297 += 1, R298 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R354 += 1, R322 += 1, R298 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R354 += 1, R321 += 1, R322 += 1 };
  s4 -> s5 [58, 58] { R354 += 1, R322 += 1, R298 += 1 };
  s4 -> s1 [59, 65535] { R354 += 1, R322 += 1, R298 += 1 };
  s5 -> s5 [0, 65535] { R354 += 1, R322 += 1, R298 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R354 += 1, R322 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [0, 65535] { R354 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R354 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R355 += 1, R356 += 1 };
  s0 -> s2 [0, 65535] { R356 += 1, R324 += 1, R299 += 1, R300 += 1 };
  s0 -> s3 [0, 65535] { R356 += 1, R323 += 1, R324 += 1 };
  s0 -> s4 [0, 65535] { R356 += 1, R324 += 1, R300 += 1, R9 += 1, R10 += 1 };
  s0 -> s5 [80, 80] { R356 += 1, R324 += 1, R300 += 1 };
  s0 -> s1 [81, 65535] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s1 -> s1 [0, 79] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s1 -> s5 [80, 80] { R356 += 1, R324 += 1, R300 += 1 };
  s1 -> s1 [81, 65535] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s2 -> s1 [0, 79] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R356 += 1, R324 += 1, R299 += 1, R300 += 1 };
  s2 -> s4 [0, 65535] { R356 += 1, R324 += 1, R300 += 1, R9 += 1, R10 += 1 };
  s2 -> s5 [80, 80] { R356 += 1, R324 += 1, R300 += 1 };
  s2 -> s1 [81, 65535] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s3 -> s1 [0, 79] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s3 -> s2 [0, 65535] { R356 += 1, R324 += 1, R299 += 1, R300 += 1 };
  s3 -> s3 [0, 65535] { R356 += 1, R323 += 1, R324 += 1 };
  s3 -> s4 [0, 65535] { R356 += 1, R324 += 1, R300 += 1, R9 += 1, R10 += 1 };
  s3 -> s5 [80, 80] { R356 += 1, R324 += 1, R300 += 1 };
  s3 -> s1 [81, 65535] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s4 -> s1 [0, 79] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s4 -> s4 [0, 65535] { R356 += 1, R324 += 1, R300 += 1, R9 += 1, R10 += 1 };
  s4 -> s5 [80, 80] { R356 += 1, R324 += 1, R300 += 1 };
  s4 -> s1 [81, 65535] { R356 += 1, R324 += 1, R300 += 1, R10 += 1 };
  s5 -> s6 [0, 65535] { R356 += 1 };
  s5 -> s5 [0, 65535] { R356 += 1, R324 += 1, R300 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R356 += 1, R324 += 1 };
  s6 -> s6 [0, 65535] { R356 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R356 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R356 += 1, R324 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 90] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s0 -> s2 [0, 65535] { R358 += 1, R326 += 1, R302 += 1, R279 += 1, R280 += 1 };
  s0 -> s3 [0, 65535] { R358 += 1, R325 += 1, R326 += 1 };
  s0 -> s0 [0, 65535] { R357 += 1, R358 += 1 };
  s0 -> s4 [0, 65535] { R358 += 1, R326 += 1, R301 += 1, R302 += 1 };
  s0 -> s5 [91, 91] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s0 -> s1 [92, 65535] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s1 -> s6 [0, 65535] { R358 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R358 += 1, R326 += 1 };
  s1 -> s1 [0, 65535] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s1 -> s9 [0, 65535] { R358 += 1, R326 += 1, R302 += 1 };
  s2 -> s1 [0, 90] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s2 -> s2 [0, 65535] { R358 += 1, R326 += 1, R302 += 1, R279 += 1, R280 += 1 };
  s2 -> s6 [0, 65535] { R358 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R358 += 1, R326 += 1 };
  s2 -> s5 [91, 91] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s2 -> s1 [92, 65535] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s3 -> s1 [0, 90] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s3 -> s2 [0, 65535] { R358 += 1, R326 += 1, R302 += 1, R279 += 1, R280 += 1 };
  s3 -> s3 [0, 65535] { R358 += 1, R325 += 1, R326 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R358 += 1, R326 += 1, R301 += 1, R302 += 1 };
  s3 -> s5 [91, 91] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s3 -> s1 [92, 65535] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s4 -> s1 [0, 90] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s4 -> s2 [0, 65535] { R358 += 1, R326 += 1, R302 += 1, R279 += 1, R280 += 1 };
  s4 -> s6 [0, 65535] { R358 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R358 += 1, R326 += 1, R301 += 1, R302 += 1 };
  s4 -> s5 [91, 91] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s4 -> s1 [92, 65535] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s5 -> s1 [0, 65535] { R358 += 1, R326 += 1, R302 += 1, R280 += 1 };
  s6 -> s6 [0, 65535] { R358 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R358 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R358 += 1, R326 += 1 };
  s9 -> s6 [0, 65535] { R358 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R358 += 1, R326 += 1 };
  s9 -> s9 [0, 65535] { R358 += 1, R326 += 1, R302 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R359 += 1, R360 += 1 };
  s0 -> s1 [0, 65535] { R360 += 1, R328 += 1, R303 += 1, R304 += 1 };
  s0 -> s2 [0, 65535] { R360 += 1, R328 += 1, R304 += 1, R282 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R360 += 1, R327 += 1, R328 += 1 };
  s0 -> s4 [0, 65535] { R360 += 1, R328 += 1, R304 += 1, R281 += 1, R282 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s6 [0, 65535] { R360 += 1 };
  s1 -> s1 [0, 65535] { R360 += 1, R328 += 1, R303 += 1, R304 += 1 };
  s1 -> s2 [0, 65535] { R360 += 1, R328 += 1, R304 += 1, R282 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R360 += 1, R328 += 1, R304 += 1, R281 += 1, R282 += 1 };
  s2 -> s5 [0, 65535] { R360 += 1, R328 += 1 };
  s2 -> s6 [0, 65535] { R360 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R360 += 1, R328 += 1, R304 += 1 };
  s2 -> s2 [0, 65535] { R360 += 1, R328 += 1, R304 += 1, R282 += 1, R6 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [0, 65535] { R360 += 1, R328 += 1, R303 += 1, R304 += 1 };
  s3 -> s2 [0, 65535] { R360 += 1, R328 += 1, R304 += 1, R282 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R360 += 1, R327 += 1, R328 += 1 };
  s3 -> s4 [0, 65535] { R360 += 1, R328 += 1, R304 += 1, R281 += 1, R282 += 1 };
  s4 -> s5 [0, 65535] { R360 += 1, R328 += 1 };
  s4 -> s6 [0, 65535] { R360 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s2 [0, 65535] { R360 += 1, R328 += 1, R304 += 1, R282 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R360 += 1, R328 += 1, R304 += 1, R281 += 1, R282 += 1 };
  s5 -> s5 [0, 65535] { R360 += 1, R328 += 1 };
  s5 -> s6 [0, 65535] { R360 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R360 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R360 += 1, R328 += 1 };
  s8 -> s6 [0, 65535] { R360 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R360 += 1, R328 += 1, R304 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s0 -> s2 [0, 65535] { R362 += 1, R329 += 1, R330 += 1 };
  s0 -> s0 [0, 65535] { R361 += 1, R362 += 1 };
  s0 -> s3 [0, 65535] { R362 += 1, R330 += 1, R305 += 1, R306 += 1 };
  s0 -> s4 [0, 65535] { R362 += 1, R330 += 1, R306 += 1, R283 += 1, R284 += 1 };
  s0 -> s5 [80, 80] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s0 -> s1 [81, 65535] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s1 -> s1 [0, 79] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s1 -> s5 [80, 80] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s1 -> s1 [81, 65535] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s2 -> s1 [0, 79] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s2 -> s2 [0, 65535] { R362 += 1, R329 += 1, R330 += 1 };
  s2 -> s3 [0, 65535] { R362 += 1, R330 += 1, R305 += 1, R306 += 1 };
  s2 -> s4 [0, 65535] { R362 += 1, R330 += 1, R306 += 1, R283 += 1, R284 += 1 };
  s2 -> s5 [80, 80] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s2 -> s1 [81, 65535] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s3 -> s1 [0, 79] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s3 -> s3 [0, 65535] { R362 += 1, R330 += 1, R305 += 1, R306 += 1 };
  s3 -> s4 [0, 65535] { R362 += 1, R330 += 1, R306 += 1, R283 += 1, R284 += 1 };
  s3 -> s5 [80, 80] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s3 -> s1 [81, 65535] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s4 -> s1 [0, 79] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s4 -> s4 [0, 65535] { R362 += 1, R330 += 1, R306 += 1, R283 += 1, R284 += 1 };
  s4 -> s5 [80, 80] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s4 -> s1 [81, 65535] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s5 -> s6 [0, 65535] { R362 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R362 += 1, R330 += 1, R306 += 1 };
  s5 -> s5 [0, 65535] { R362 += 1, R330 += 1, R306 += 1, R284 += 1 };
  s5 -> s9 [0, 65535] { R362 += 1, R330 += 1 };
  s6 -> s6 [0, 65535] { R362 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R362 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R362 += 1, R330 += 1, R306 += 1 };
  s8 -> s9 [0, 65535] { R362 += 1, R330 += 1 };
  s9 -> s6 [0, 65535] { R362 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R362 += 1, R330 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R364 += 1, R332 += 1, R308 += 1, R285 += 1, R286 += 1 };
  s0 -> s0 [0, 65535] { R363 += 1, R364 += 1 };
  s0 -> s2 [0, 65535] { R364 += 1, R332 += 1, R308 += 1, R286 += 1, R278 += 1 };
  s0 -> s3 [0, 65535] { R364 += 1, R331 += 1, R332 += 1 };
  s0 -> s4 [0, 65535] { R364 += 1, R332 += 1, R307 += 1, R308 += 1 };
  s1 -> s1 [0, 65535] { R364 += 1, R332 += 1, R308 += 1, R285 += 1, R286 += 1 };
  s1 -> s5 [0, 65535] { R364 += 1 };
  s1 -> s2 [0, 65535] { R364 += 1, R332 += 1, R308 += 1, R286 += 1, R278 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R364 += 1, R332 += 1 };
  s2 -> s7 [0, 65535] { R364 += 1, R332 += 1, R308 += 1 };
  s2 -> s5 [0, 65535] { R364 += 1 };
  s2 -> s2 [0, 65535] { R364 += 1, R332 += 1, R308 += 1, R286 += 1, R278 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R364 += 1, R332 += 1 };
  s3 -> s1 [0, 65535] { R364 += 1, R332 += 1, R308 += 1, R285 += 1, R286 += 1 };
  s3 -> s2 [0, 65535] { R364 += 1, R332 += 1, R308 += 1, R286 += 1, R278 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R364 += 1, R331 += 1, R332 += 1 };
  s3 -> s4 [0, 65535] { R364 += 1, R332 += 1, R307 += 1, R308 += 1 };
  s4 -> s1 [0, 65535] { R364 += 1, R332 += 1, R308 += 1, R285 += 1, R286 += 1 };
  s4 -> s5 [0, 65535] { R364 += 1 };
  s4 -> s2 [0, 65535] { R364 += 1, R332 += 1, R308 += 1, R286 += 1, R278 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R364 += 1, R332 += 1, R307 += 1, R308 += 1 };
  s5 -> s5 [0, 65535] { R364 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R364 += 1, R332 += 1, R308 += 1 };
  s7 -> s5 [0, 65535] { R364 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [0, 65535] { R364 += 1, R332 += 1 };
  s8 -> s5 [0, 65535] { R364 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R364 += 1, R332 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R2 = R284 && R3 = R308 && R4 = R292 && R5 = R364 && R9 = 0 && R10 - R283 = -1 && R189 = 0 && R190 = R332 && R279 = 0 && R280 = 1 && R281 = 0 && R282 = 1 && R287 = 0 && R288 = 14 && R289 = 0 && R290 = 14 && R291 - R332 = 1 && R293 = 15 && R294 = R308 && R295 = 15 && R296 = R308 && R297 = 15 && R298 = R308 && R299 = 15 && R300 = R308 && R301 = 15 && R302 = R308 && R303 = 15 && R304 = R308 && R305 = 15 && R306 = R308 && R307 = 15 && R309 = 0 && R310 = R332 && R311 = 0 && R312 = R332 && R313 = 0 && R314 = R332 && R315 = 0 && R316 = R332 && R317 = 0 && R318 = R332 && R319 = 0 && R320 = R332 && R321 = 0 && R322 = R332 && R323 = 0 && R324 = R332 && R325 = 0 && R326 = R332 && R327 = 0 && R328 = R332 && R329 = 0 && R330 = R332 && R331 = 0 && R333 = 10 && R334 = R364 && R335 = 10 && R336 = R364 && R337 = 10 && R338 = R364 && R339 = 10 && R340 = R364 && R341 = 10 && R342 = R364 && R343 = 10 && R344 = R364 && R345 = 10 && R346 = R364 && R347 = 10 && R348 = R364 && R349 = 10 && R350 = R364 && R351 = 10 && R352 = R364 && R353 = 10 && R354 = R364 && R355 = 10 && R356 = R364 && R357 = 10 && R358 = R364 && R359 = 10 && R360 = R364 && R361 = 10 && R362 = R364 && R363 = 10 && R0 != 0 && R1 != 0 && R7 < 1 && R283 - R284 < 1 && -1 < R283 && 0 < R284 && R332 < R292 && 14 < R308 && -1 < R332 && 9 < R364 && (R283 != R285 || R284 = R286 || ((R278 != 0 || R284 - R285 < 1 || R285 < 0) && (R278 = 0 || R284 < R285 || R285 < 0))) && (R283 = R285 || (R278 = 0 && R283 = R284));
// End of Parikh automata intersection problem
