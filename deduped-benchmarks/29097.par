// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R115, R116, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R3, R4, R5, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R196 += 1 };
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s2 [46, 46] { R196 += 1 };
  s0 -> s3 [47, 47] { R196 += 1 };
  s0 -> s1 [48, 65535] { R196 += 1 };
  s1 -> s1 [0, 45] { R196 += 1 };
  s1 -> s2 [46, 46] { R196 += 1 };
  s1 -> s3 [47, 47] { R196 += 1 };
  s1 -> s1 [48, 65535] { R196 += 1 };
  s2 -> s1 [0, 45] { R196 += 1 };
  s2 -> s2 [46, 46] { R196 += 1 };
  s2 -> s3 [47, 47] { R196 += 1 };
  s2 -> s1 [48, 114] { R196 += 1 };
  s2 -> s8 [115, 115] { R196 += 1 };
  s2 -> s1 [116, 65535] { R196 += 1 };
  s3 -> s3 [0, 45] { R196 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R196 += 1 };
  s3 -> s3 [47, 65535] { R196 += 1 };
  s4 -> s3 [0, 45] { R196 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R196 += 1 };
  s4 -> s3 [47, 114] { R196 += 1 };
  s4 -> s5 [115, 115] { R196 += 1 };
  s4 -> s3 [116, 65535] { R196 += 1 };
  s5 -> s3 [0, 45] { R196 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R196 += 1 };
  s5 -> s3 [47, 110] { R196 += 1 };
  s5 -> s6 [111, 111] { R196 += 1 };
  s5 -> s3 [112, 65535] { R196 += 1 };
  s6 -> s3 [0, 45] { R196 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R196 += 1 };
  s6 -> s3 [47, 98] { R196 += 1 };
  s6 -> s7 [99, 99] { R196 += 1 };
  s6 -> s3 [100, 65535] { R196 += 1 };
  s7 -> s3 [0, 45] { R196 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R196 += 1 };
  s7 -> s3 [47, 106] { R196 += 1 };
  s7 -> s3 [108, 65535] { R196 += 1 };
  s8 -> s1 [0, 45] { R196 += 1 };
  s8 -> s2 [46, 46] { R196 += 1 };
  s8 -> s3 [47, 47] { R196 += 1 };
  s8 -> s1 [48, 110] { R196 += 1 };
  s8 -> s9 [111, 111] { R196 += 1 };
  s8 -> s1 [112, 65535] { R196 += 1 };
  s9 -> s1 [0, 45] { R196 += 1 };
  s9 -> s2 [46, 46] { R196 += 1 };
  s9 -> s3 [47, 47] { R196 += 1 };
  s9 -> s1 [48, 98] { R196 += 1 };
  s9 -> s10 [99, 99] { R196 += 1 };
  s9 -> s1 [100, 65535] { R196 += 1 };
  s10 -> s1 [0, 45] { R196 += 1 };
  s10 -> s2 [46, 46] { R196 += 1 };
  s10 -> s3 [47, 47] { R196 += 1 };
  s10 -> s1 [48, 106] { R196 += 1 };
  s10 -> s1 [108, 65535] { R196 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R198 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s1 -> s1 [0, 65535] { R198 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R200 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s2 [0, 65535] { R200 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [47, 47] { R200 += 1 };
  s0 -> s1 [48, 65535] { R200 += 1, R116 += 1 };
  s1 -> s1 [0, 46] { R200 += 1, R116 += 1 };
  s1 -> s3 [47, 47] { R200 += 1 };
  s1 -> s1 [48, 65535] { R200 += 1, R116 += 1 };
  s2 -> s1 [0, 46] { R200 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R200 += 1, R115 += 1, R116 += 1 };
  s2 -> s3 [47, 47] { R200 += 1 };
  s2 -> s1 [48, 65535] { R200 += 1, R116 += 1 };
  s3 -> s3 [0, 65535] { R200 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s1 [0, 65535] { R202 += 1, R177 += 1, R178 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R178 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R202 += 1, R177 += 1, R178 += 1 };
  s1 -> s2 [0, 65535] { R202 += 1, R178 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R202 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R202 += 1, R178 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R202 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 43] { R204 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s2 [0, 65535] { R204 += 1, R179 += 1, R180 += 1 };
  s0 -> s1 [45, 63] { R204 += 1, R180 += 1 };
  s0 -> s3 [90, 90] { R204 += 1, R180 += 1 };
  s0 -> s1 [91, 65535] { R204 += 1, R180 += 1 };
  s1 -> s1 [0, 43] { R204 += 1, R180 += 1 };
  s1 -> s1 [45, 63] { R204 += 1, R180 += 1 };
  s1 -> s3 [90, 90] { R204 += 1, R180 += 1 };
  s1 -> s1 [91, 65535] { R204 += 1, R180 += 1 };
  s2 -> s1 [0, 43] { R204 += 1, R180 += 1 };
  s2 -> s2 [0, 65535] { R204 += 1, R179 += 1, R180 += 1 };
  s2 -> s1 [45, 63] { R204 += 1, R180 += 1 };
  s2 -> s3 [90, 90] { R204 += 1, R180 += 1 };
  s2 -> s1 [91, 65535] { R204 += 1, R180 += 1 };
  s3 -> s3 [0, 43] { R204 += 1, R180 += 1 };
  s3 -> s3 [0, 65535] { R204 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R204 += 1, R180 += 1 };
  s3 -> s3 [90, 65535] { R204 += 1, R180 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R206 += 1, R182 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R206 += 1, R181 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s1 -> s1 [0, 65535] { R206 += 1, R182 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R206 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R206 += 1, R182 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R206 += 1, R181 += 1, R182 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R206 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R208 += 1, R184 += 1 };
  s0 -> s2 [0, 65535] { R208 += 1, R184 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s3 [0, 65535] { R208 += 1, R183 += 1, R184 += 1 };
  s0 -> s4 [58, 58] { R208 += 1, R184 += 1 };
  s0 -> s1 [59, 65535] { R208 += 1, R184 += 1 };
  s1 -> s1 [0, 57] { R208 += 1, R184 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R208 += 1 };
  s1 -> s4 [58, 58] { R208 += 1, R184 += 1 };
  s1 -> s1 [59, 65535] { R208 += 1, R184 += 1 };
  s2 -> s1 [0, 57] { R208 += 1, R184 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R208 += 1 };
  s2 -> s2 [0, 65535] { R208 += 1, R184 += 1, R5 += 1 };
  s2 -> s4 [58, 58] { R208 += 1, R184 += 1 };
  s2 -> s1 [59, 65535] { R208 += 1, R184 += 1 };
  s3 -> s1 [0, 57] { R208 += 1, R184 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R208 += 1, R184 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R208 += 1, R183 += 1, R184 += 1 };
  s3 -> s4 [58, 58] { R208 += 1, R184 += 1 };
  s3 -> s1 [59, 65535] { R208 += 1, R184 += 1 };
  s4 -> s4 [0, 65535] { R208 += 1, R184 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R208 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 89] { R210 += 1, R186 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R210 += 1, R186 += 1, R7 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R210 += 1, R185 += 1, R186 += 1 };
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s4 [90, 90] { R210 += 1, R186 += 1 };
  s0 -> s1 [91, 65535] { R210 += 1, R186 += 1, R8 += 1 };
  s1 -> s1 [0, 89] { R210 += 1, R186 += 1, R8 += 1 };
  s1 -> s4 [90, 90] { R210 += 1, R186 += 1 };
  s1 -> s1 [91, 65535] { R210 += 1, R186 += 1, R8 += 1 };
  s2 -> s1 [0, 89] { R210 += 1, R186 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R210 += 1, R186 += 1, R7 += 1, R8 += 1 };
  s2 -> s4 [90, 90] { R210 += 1, R186 += 1 };
  s2 -> s1 [91, 65535] { R210 += 1, R186 += 1, R8 += 1 };
  s3 -> s1 [0, 89] { R210 += 1, R186 += 1, R8 += 1 };
  s3 -> s2 [0, 65535] { R210 += 1, R186 += 1, R7 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R210 += 1, R185 += 1, R186 += 1 };
  s3 -> s4 [90, 90] { R210 += 1, R186 += 1 };
  s3 -> s1 [91, 65535] { R210 += 1, R186 += 1, R8 += 1 };
  s4 -> s4 [0, 65535] { R210 += 1, R186 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R210 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R210 += 1 };
  accepting s4, s5, s6;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 90] { R212 += 1, R188 += 1, R170 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [0, 65535] { R212 += 1, R188 += 1, R169 += 1, R170 += 1 };
  s0 -> s3 [0, 65535] { R212 += 1, R187 += 1, R188 += 1 };
  s0 -> s4 [91, 91] { R212 += 1, R188 += 1, R170 += 1 };
  s0 -> s1 [92, 65535] { R212 += 1, R188 += 1, R170 += 1 };
  s1 -> s6 [0, 65535] { R212 += 1 };
  s1 -> s7 [0, 65535] { R212 += 1, R188 += 1 };
  s1 -> s1 [0, 65535] { R212 += 1, R188 += 1, R170 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 90] { R212 += 1, R188 += 1, R170 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1, R188 += 1, R169 += 1, R170 += 1 };
  s2 -> s6 [0, 65535] { R212 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R212 += 1, R188 += 1, R170 += 1 };
  s2 -> s1 [92, 65535] { R212 += 1, R188 += 1, R170 += 1 };
  s3 -> s1 [0, 90] { R212 += 1, R188 += 1, R170 += 1 };
  s3 -> s2 [0, 65535] { R212 += 1, R188 += 1, R169 += 1, R170 += 1 };
  s3 -> s3 [0, 65535] { R212 += 1, R187 += 1, R188 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R212 += 1, R188 += 1, R170 += 1 };
  s3 -> s1 [92, 65535] { R212 += 1, R188 += 1, R170 += 1 };
  s4 -> s1 [0, 65535] { R212 += 1, R188 += 1, R170 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R212 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R212 += 1 };
  s7 -> s7 [0, 65535] { R212 += 1, R188 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s1 [0, 65535] { R214 += 1, R190 += 1, R171 += 1, R172 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R189 += 1, R190 += 1 };
  s0 -> s3 [0, 65535] { R214 += 1, R190 += 1, R172 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R214 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R190 += 1, R171 += 1, R172 += 1 };
  s1 -> s3 [0, 65535] { R214 += 1, R190 += 1, R172 += 1, R4 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R214 += 1, R190 += 1, R171 += 1, R172 += 1 };
  s2 -> s2 [0, 65535] { R214 += 1, R189 += 1, R190 += 1 };
  s2 -> s3 [0, 65535] { R214 += 1, R190 += 1, R172 += 1, R4 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R214 += 1 };
  s3 -> s3 [0, 65535] { R214 += 1, R190 += 1, R172 += 1, R4 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R214 += 1, R190 += 1 };
  s4 -> s4 [0, 65535] { R214 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R214 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R214 += 1, R190 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 89] { R216 += 1, R192 += 1, R174 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R191 += 1, R192 += 1 };
  s0 -> s3 [0, 65535] { R216 += 1, R192 += 1, R173 += 1, R174 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s4 [90, 90] { R216 += 1, R192 += 1, R174 += 1 };
  s0 -> s1 [91, 65535] { R216 += 1, R192 += 1, R174 += 1 };
  s1 -> s1 [0, 89] { R216 += 1, R192 += 1, R174 += 1 };
  s1 -> s4 [90, 90] { R216 += 1, R192 += 1, R174 += 1 };
  s1 -> s1 [91, 65535] { R216 += 1, R192 += 1, R174 += 1 };
  s2 -> s1 [0, 89] { R216 += 1, R192 += 1, R174 += 1 };
  s2 -> s2 [0, 65535] { R216 += 1, R191 += 1, R192 += 1 };
  s2 -> s3 [0, 65535] { R216 += 1, R192 += 1, R173 += 1, R174 += 1 };
  s2 -> s4 [90, 90] { R216 += 1, R192 += 1, R174 += 1 };
  s2 -> s1 [91, 65535] { R216 += 1, R192 += 1, R174 += 1 };
  s3 -> s1 [0, 89] { R216 += 1, R192 += 1, R174 += 1 };
  s3 -> s3 [0, 65535] { R216 += 1, R192 += 1, R173 += 1, R174 += 1 };
  s3 -> s4 [90, 90] { R216 += 1, R192 += 1, R174 += 1 };
  s3 -> s1 [91, 65535] { R216 += 1, R192 += 1, R174 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R216 += 1, R192 += 1, R174 += 1 };
  s4 -> s6 [0, 65535] { R216 += 1, R192 += 1 };
  s4 -> s7 [0, 65535] { R216 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R216 += 1, R192 += 1 };
  s6 -> s7 [0, 65535] { R216 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R216 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R218 += 1, R193 += 1, R194 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R194 += 1, R175 += 1, R176 += 1 };
  s0 -> s3 [0, 65535] { R218 += 1, R194 += 1, R176 += 1, R168 += 1 };
  s1 -> s1 [0, 65535] { R218 += 1, R193 += 1, R194 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R218 += 1, R194 += 1, R175 += 1, R176 += 1 };
  s1 -> s3 [0, 65535] { R218 += 1, R194 += 1, R176 += 1, R168 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R218 += 1 };
  s2 -> s2 [0, 65535] { R218 += 1, R194 += 1, R175 += 1, R176 += 1 };
  s2 -> s3 [0, 65535] { R218 += 1, R194 += 1, R176 += 1, R168 += 1 };
  s3 -> s4 [0, 65535] { R218 += 1, R194 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R218 += 1 };
  s3 -> s3 [0, 65535] { R218 += 1, R194 += 1, R176 += 1, R168 += 1 };
  s4 -> s4 [0, 65535] { R218 += 1, R194 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R218 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R218 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R174 && R2 = R178 && R3 = R218 && R7 = 0 && R8 - R173 = -1 && R115 = 0 && R116 = R194 && R169 = 0 && R170 = 1 && R171 = 0 && R172 = 1 && R177 - R194 = 1 && R179 = 0 && R180 = R194 && R181 = 0 && R182 = R194 && R183 = 0 && R184 = R194 && R185 = 0 && R186 = R194 && R187 = 0 && R188 = R194 && R189 = 0 && R190 = R194 && R191 = 0 && R192 = R194 && R193 = 0 && R195 = 10 && R196 = R218 && R197 = 10 && R198 = R218 && R199 = 10 && R200 = R218 && R201 = 10 && R202 = R218 && R203 = 10 && R204 = R218 && R205 = 10 && R206 = R218 && R207 = 10 && R208 = R218 && R209 = 10 && R210 = R218 && R211 = 10 && R212 = R218 && R213 = 10 && R214 = R218 && R215 = 10 && R216 = R218 && R217 = 10 && R0 != 0 && R5 < 1 && R173 - R174 < 1 && -1 < R173 && 0 < R174 && R194 < R178 && -1 < R194 && 9 < R218 && (R173 != R175 || R174 = R176 || ((R168 != 0 || R174 - R175 < 1 || R175 < 0) && (R168 = 0 || R174 < R175 || R175 < 0))) && (R173 = R175 || (R168 = 0 && R173 = R174));
// End of Parikh automata intersection problem
