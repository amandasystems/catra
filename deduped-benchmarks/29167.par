// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R311, R312, R316, R317, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R5, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R435 += 1 };
  s0 -> s0 [0, 65535] { R434 += 1, R435 += 1 };
  s0 -> s2 [46, 46] { R435 += 1 };
  s0 -> s3 [47, 47] { R435 += 1 };
  s0 -> s1 [48, 65535] { R435 += 1 };
  s1 -> s1 [0, 45] { R435 += 1 };
  s1 -> s2 [46, 46] { R435 += 1 };
  s1 -> s3 [47, 47] { R435 += 1 };
  s1 -> s1 [48, 65535] { R435 += 1 };
  s2 -> s1 [0, 45] { R435 += 1 };
  s2 -> s2 [46, 46] { R435 += 1 };
  s2 -> s3 [47, 47] { R435 += 1 };
  s2 -> s1 [48, 114] { R435 += 1 };
  s2 -> s8 [115, 115] { R435 += 1 };
  s2 -> s1 [116, 65535] { R435 += 1 };
  s3 -> s3 [0, 45] { R435 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R435 += 1 };
  s3 -> s3 [47, 65535] { R435 += 1 };
  s4 -> s3 [0, 45] { R435 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R435 += 1 };
  s4 -> s3 [47, 114] { R435 += 1 };
  s4 -> s5 [115, 115] { R435 += 1 };
  s4 -> s3 [116, 65535] { R435 += 1 };
  s5 -> s3 [0, 45] { R435 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R435 += 1 };
  s5 -> s3 [47, 110] { R435 += 1 };
  s5 -> s6 [111, 111] { R435 += 1 };
  s5 -> s3 [112, 65535] { R435 += 1 };
  s6 -> s3 [0, 45] { R435 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R435 += 1 };
  s6 -> s3 [47, 98] { R435 += 1 };
  s6 -> s7 [99, 99] { R435 += 1 };
  s6 -> s3 [100, 65535] { R435 += 1 };
  s7 -> s3 [0, 45] { R435 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R435 += 1 };
  s7 -> s3 [47, 106] { R435 += 1 };
  s7 -> s3 [108, 65535] { R435 += 1 };
  s8 -> s1 [0, 45] { R435 += 1 };
  s8 -> s2 [46, 46] { R435 += 1 };
  s8 -> s3 [47, 47] { R435 += 1 };
  s8 -> s1 [48, 110] { R435 += 1 };
  s8 -> s9 [111, 111] { R435 += 1 };
  s8 -> s1 [112, 65535] { R435 += 1 };
  s9 -> s1 [0, 45] { R435 += 1 };
  s9 -> s2 [46, 46] { R435 += 1 };
  s9 -> s3 [47, 47] { R435 += 1 };
  s9 -> s1 [48, 98] { R435 += 1 };
  s9 -> s10 [99, 99] { R435 += 1 };
  s9 -> s1 [100, 65535] { R435 += 1 };
  s10 -> s1 [0, 45] { R435 += 1 };
  s10 -> s2 [46, 46] { R435 += 1 };
  s10 -> s3 [47, 47] { R435 += 1 };
  s10 -> s1 [48, 106] { R435 += 1 };
  s10 -> s1 [108, 65535] { R435 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R437 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R436 += 1, R437 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R437 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R439 += 1, R317 += 1 };
  s0 -> s0 [0, 65535] { R438 += 1, R439 += 1 };
  s0 -> s2 [0, 65535] { R439 += 1, R316 += 1, R317 += 1 };
  s0 -> s3 [47, 47] { R439 += 1 };
  s0 -> s1 [48, 65535] { R439 += 1, R317 += 1 };
  s1 -> s1 [0, 46] { R439 += 1, R317 += 1 };
  s1 -> s3 [47, 47] { R439 += 1 };
  s1 -> s1 [48, 65535] { R439 += 1, R317 += 1 };
  s2 -> s1 [0, 46] { R439 += 1, R317 += 1 };
  s2 -> s2 [0, 65535] { R439 += 1, R316 += 1, R317 += 1 };
  s2 -> s3 [47, 47] { R439 += 1 };
  s2 -> s1 [48, 65535] { R439 += 1, R317 += 1 };
  s3 -> s3 [0, 65535] { R439 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R440 += 1, R441 += 1 };
  s0 -> s1 [0, 65535] { R441 += 1, R401 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R441 += 1, R400 += 1, R401 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R441 += 1, R401 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R441 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R441 += 1, R401 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R441 += 1, R400 += 1, R401 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R441 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 43] { R443 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R443 += 1, R412 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R442 += 1, R443 += 1 };
  s0 -> s1 [45, 63] { R443 += 1, R413 += 1 };
  s0 -> s3 [88, 88] { R443 += 1, R413 += 1 };
  s0 -> s1 [89, 65535] { R443 += 1, R413 += 1 };
  s1 -> s1 [0, 43] { R443 += 1, R413 += 1 };
  s1 -> s1 [45, 63] { R443 += 1, R413 += 1 };
  s1 -> s3 [88, 88] { R443 += 1, R413 += 1 };
  s1 -> s1 [89, 65535] { R443 += 1, R413 += 1 };
  s2 -> s1 [0, 43] { R443 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R443 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [45, 63] { R443 += 1, R413 += 1 };
  s2 -> s3 [88, 88] { R443 += 1, R413 += 1 };
  s2 -> s1 [89, 65535] { R443 += 1, R413 += 1 };
  s3 -> s3 [0, 43] { R443 += 1, R413 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R443 += 1 };
  s3 -> s3 [45, 63] { R443 += 1, R413 += 1 };
  s3 -> s3 [88, 65535] { R443 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R445 += 1, R415 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R445 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R444 += 1, R445 += 1 };
  s1 -> s4 [0, 65535] { R445 += 1 };
  s1 -> s1 [0, 65535] { R445 += 1, R415 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R445 += 1, R415 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R445 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R445 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R447 += 1, R417 += 1 };
  s0 -> s2 [0, 65535] { R447 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R446 += 1, R447 += 1 };
  s0 -> s3 [0, 65535] { R447 += 1, R417 += 1, R311 += 1 };
  s0 -> s4 [58, 58] { R447 += 1, R417 += 1 };
  s0 -> s1 [59, 65535] { R447 += 1, R417 += 1 };
  s1 -> s1 [0, 57] { R447 += 1, R417 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R447 += 1 };
  s1 -> s4 [58, 58] { R447 += 1, R417 += 1 };
  s1 -> s1 [59, 65535] { R447 += 1, R417 += 1 };
  s2 -> s1 [0, 57] { R447 += 1, R417 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R447 += 1, R416 += 1, R417 += 1 };
  s2 -> s3 [0, 65535] { R447 += 1, R417 += 1, R311 += 1 };
  s2 -> s4 [58, 58] { R447 += 1, R417 += 1 };
  s2 -> s1 [59, 65535] { R447 += 1, R417 += 1 };
  s3 -> s1 [0, 57] { R447 += 1, R417 += 1 };
  s3 -> s5 [0, 65535] { R447 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R447 += 1, R417 += 1, R311 += 1 };
  s3 -> s4 [58, 58] { R447 += 1, R417 += 1 };
  s3 -> s1 [59, 65535] { R447 += 1, R417 += 1 };
  s4 -> s4 [0, 65535] { R447 += 1, R417 += 1 };
  s5 -> s5 [0, 65535] { R447 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 87] { R449 += 1, R419 += 1 };
  s0 -> s2 [0, 65535] { R449 += 1, R419 += 1, R312 += 1 };
  s0 -> s0 [0, 65535] { R448 += 1, R449 += 1 };
  s0 -> s3 [0, 65535] { R449 += 1, R418 += 1, R419 += 1 };
  s0 -> s4 [88, 88] { R449 += 1, R419 += 1 };
  s0 -> s1 [89, 65535] { R449 += 1, R419 += 1 };
  s1 -> s1 [0, 87] { R449 += 1, R419 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R449 += 1 };
  s1 -> s4 [88, 88] { R449 += 1, R419 += 1 };
  s1 -> s1 [89, 65535] { R449 += 1, R419 += 1 };
  s2 -> s1 [0, 87] { R449 += 1, R419 += 1 };
  s2 -> s6 [0, 65535] { R449 += 1 };
  s2 -> s2 [0, 65535] { R449 += 1, R419 += 1, R312 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R449 += 1, R419 += 1 };
  s2 -> s1 [89, 65535] { R449 += 1, R419 += 1 };
  s3 -> s1 [0, 87] { R449 += 1, R419 += 1 };
  s3 -> s2 [0, 65535] { R449 += 1, R419 += 1, R312 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R449 += 1, R418 += 1, R419 += 1 };
  s3 -> s4 [88, 88] { R449 += 1, R419 += 1 };
  s3 -> s1 [89, 65535] { R449 += 1, R419 += 1 };
  s4 -> s4 [0, 65535] { R449 += 1, R419 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R449 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 90] { R451 += 1, R421 += 1, R393 += 1 };
  s0 -> s0 [0, 65535] { R450 += 1, R451 += 1 };
  s0 -> s2 [0, 65535] { R451 += 1, R420 += 1, R421 += 1 };
  s0 -> s3 [0, 65535] { R451 += 1, R421 += 1, R392 += 1, R393 += 1 };
  s0 -> s4 [91, 91] { R451 += 1, R421 += 1, R393 += 1 };
  s0 -> s1 [92, 65535] { R451 += 1, R421 += 1, R393 += 1 };
  s1 -> s1 [0, 65535] { R451 += 1, R421 += 1, R393 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R451 += 1, R421 += 1 };
  s1 -> s6 [0, 65535] { R451 += 1 };
  s2 -> s1 [0, 90] { R451 += 1, R421 += 1, R393 += 1 };
  s2 -> s2 [0, 65535] { R451 += 1, R420 += 1, R421 += 1 };
  s2 -> s3 [0, 65535] { R451 += 1, R421 += 1, R392 += 1, R393 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R451 += 1, R421 += 1, R393 += 1 };
  s2 -> s1 [92, 65535] { R451 += 1, R421 += 1, R393 += 1 };
  s3 -> s1 [0, 90] { R451 += 1, R421 += 1, R393 += 1 };
  s3 -> s3 [0, 65535] { R451 += 1, R421 += 1, R392 += 1, R393 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R451 += 1 };
  s3 -> s4 [91, 91] { R451 += 1, R421 += 1, R393 += 1 };
  s3 -> s1 [92, 65535] { R451 += 1, R421 += 1, R393 += 1 };
  s4 -> s1 [0, 65535] { R451 += 1, R421 += 1, R393 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R451 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R451 += 1, R421 += 1 };
  s7 -> s6 [0, 65535] { R451 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R453 += 1, R423 += 1, R395 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R452 += 1, R453 += 1 };
  s0 -> s2 [0, 65535] { R453 += 1, R422 += 1, R423 += 1 };
  s0 -> s3 [0, 65535] { R453 += 1, R423 += 1, R394 += 1, R395 += 1 };
  s1 -> s1 [0, 65535] { R453 += 1, R423 += 1, R395 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R453 += 1 };
  s1 -> s6 [0, 65535] { R453 += 1, R423 += 1 };
  s2 -> s1 [0, 65535] { R453 += 1, R423 += 1, R395 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R453 += 1, R422 += 1, R423 += 1 };
  s2 -> s3 [0, 65535] { R453 += 1, R423 += 1, R394 += 1, R395 += 1 };
  s3 -> s1 [0, 65535] { R453 += 1, R423 += 1, R395 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R453 += 1 };
  s3 -> s3 [0, 65535] { R453 += 1, R423 += 1, R394 += 1, R395 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R453 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R453 += 1 };
  s6 -> s6 [0, 65535] { R453 += 1, R423 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R455 += 1, R425 += 1, R403 += 1 };
  s0 -> s2 [0, 65535] { R455 += 1, R424 += 1, R425 += 1 };
  s0 -> s3 [0, 65535] { R455 += 1, R425 += 1, R402 += 1, R403 += 1 };
  s0 -> s0 [0, 65535] { R454 += 1, R455 += 1 };
  s0 -> s4 [88, 88] { R455 += 1, R425 += 1, R403 += 1 };
  s0 -> s1 [89, 65535] { R455 += 1, R425 += 1, R403 += 1 };
  s1 -> s1 [0, 87] { R455 += 1, R425 += 1, R403 += 1 };
  s1 -> s4 [88, 88] { R455 += 1, R425 += 1, R403 += 1 };
  s1 -> s1 [89, 65535] { R455 += 1, R425 += 1, R403 += 1 };
  s2 -> s1 [0, 87] { R455 += 1, R425 += 1, R403 += 1 };
  s2 -> s2 [0, 65535] { R455 += 1, R424 += 1, R425 += 1 };
  s2 -> s3 [0, 65535] { R455 += 1, R425 += 1, R402 += 1, R403 += 1 };
  s2 -> s4 [88, 88] { R455 += 1, R425 += 1, R403 += 1 };
  s2 -> s1 [89, 65535] { R455 += 1, R425 += 1, R403 += 1 };
  s3 -> s1 [0, 87] { R455 += 1, R425 += 1, R403 += 1 };
  s3 -> s3 [0, 65535] { R455 += 1, R425 += 1, R402 += 1, R403 += 1 };
  s3 -> s4 [88, 88] { R455 += 1, R425 += 1, R403 += 1 };
  s3 -> s1 [89, 65535] { R455 += 1, R425 += 1, R403 += 1 };
  s4 -> s4 [0, 65535] { R455 += 1, R425 += 1, R403 += 1 };
  s4 -> s5 [0, 65535] { R455 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R455 += 1, R425 += 1 };
  s5 -> s5 [0, 65535] { R455 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R455 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R455 += 1, R425 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R457 += 1, R427 += 1, R404 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R457 += 1, R427 += 1, R405 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R457 += 1, R426 += 1, R427 += 1 };
  s0 -> s0 [0, 65535] { R456 += 1, R457 += 1 };
  s1 -> s5 [0, 65535] { R457 += 1 };
  s1 -> s1 [0, 65535] { R457 += 1, R427 += 1, R404 += 1, R405 += 1 };
  s1 -> s2 [0, 65535] { R457 += 1, R427 += 1, R405 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R457 += 1 };
  s2 -> s2 [0, 65535] { R457 += 1, R427 += 1, R405 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R457 += 1, R427 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R457 += 1, R427 += 1, R404 += 1, R405 += 1 };
  s3 -> s2 [0, 65535] { R457 += 1, R427 += 1, R405 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R457 += 1, R426 += 1, R427 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R457 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R457 += 1 };
  s6 -> s6 [0, 65535] { R457 += 1, R427 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 87] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R459 += 1, R429 += 1, R406 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R458 += 1, R459 += 1 };
  s0 -> s3 [0, 65535] { R459 += 1, R429 += 1, R407 += 1, R7 += 1, R8 += 1 };
  s0 -> s4 [0, 65535] { R459 += 1, R428 += 1, R429 += 1 };
  s0 -> s5 [88, 88] { R459 += 1, R429 += 1, R407 += 1 };
  s0 -> s1 [89, 65535] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s1 -> s1 [0, 87] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s1 -> s5 [88, 88] { R459 += 1, R429 += 1, R407 += 1 };
  s1 -> s1 [89, 65535] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s2 -> s1 [0, 87] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R459 += 1, R429 += 1, R406 += 1, R407 += 1 };
  s2 -> s3 [0, 65535] { R459 += 1, R429 += 1, R407 += 1, R7 += 1, R8 += 1 };
  s2 -> s5 [88, 88] { R459 += 1, R429 += 1, R407 += 1 };
  s2 -> s1 [89, 65535] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s3 -> s1 [0, 87] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R459 += 1, R429 += 1, R407 += 1, R7 += 1, R8 += 1 };
  s3 -> s5 [88, 88] { R459 += 1, R429 += 1, R407 += 1 };
  s3 -> s1 [89, 65535] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s4 -> s1 [0, 87] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s4 -> s2 [0, 65535] { R459 += 1, R429 += 1, R406 += 1, R407 += 1 };
  s4 -> s3 [0, 65535] { R459 += 1, R429 += 1, R407 += 1, R7 += 1, R8 += 1 };
  s4 -> s4 [0, 65535] { R459 += 1, R428 += 1, R429 += 1 };
  s4 -> s5 [88, 88] { R459 += 1, R429 += 1, R407 += 1 };
  s4 -> s1 [89, 65535] { R459 += 1, R429 += 1, R407 += 1, R8 += 1 };
  s5 -> s5 [0, 65535] { R459 += 1, R429 += 1, R407 += 1 };
  s5 -> s6 [0, 65535] { R459 += 1, R429 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R459 += 1 };
  s6 -> s6 [0, 65535] { R459 += 1, R429 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R459 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R459 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s0 -> s2 [0, 65535] { R461 += 1, R431 += 1, R408 += 1, R409 += 1 };
  s0 -> s3 [0, 65535] { R461 += 1, R431 += 1, R409 += 1, R396 += 1, R397 += 1 };
  s0 -> s0 [0, 65535] { R460 += 1, R461 += 1 };
  s0 -> s4 [0, 65535] { R461 += 1, R430 += 1, R431 += 1 };
  s0 -> s5 [88, 88] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s0 -> s1 [89, 65535] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s1 -> s1 [0, 87] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s1 -> s5 [88, 88] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s1 -> s1 [89, 65535] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s2 -> s1 [0, 87] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s2 -> s2 [0, 65535] { R461 += 1, R431 += 1, R408 += 1, R409 += 1 };
  s2 -> s3 [0, 65535] { R461 += 1, R431 += 1, R409 += 1, R396 += 1, R397 += 1 };
  s2 -> s5 [88, 88] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s2 -> s1 [89, 65535] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s3 -> s1 [0, 87] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s3 -> s3 [0, 65535] { R461 += 1, R431 += 1, R409 += 1, R396 += 1, R397 += 1 };
  s3 -> s5 [88, 88] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s3 -> s1 [89, 65535] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s4 -> s1 [0, 87] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s4 -> s2 [0, 65535] { R461 += 1, R431 += 1, R408 += 1, R409 += 1 };
  s4 -> s3 [0, 65535] { R461 += 1, R431 += 1, R409 += 1, R396 += 1, R397 += 1 };
  s4 -> s4 [0, 65535] { R461 += 1, R430 += 1, R431 += 1 };
  s4 -> s5 [88, 88] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s4 -> s1 [89, 65535] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s5 -> s6 [0, 65535] { R461 += 1 };
  s5 -> s7 [0, 65535] { R461 += 1, R431 += 1, R409 += 1 };
  s5 -> s8 [0, 65535] { R461 += 1, R431 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R461 += 1, R431 += 1, R409 += 1, R397 += 1 };
  s6 -> s6 [0, 65535] { R461 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R461 += 1 };
  s7 -> s7 [0, 65535] { R461 += 1, R431 += 1, R409 += 1 };
  s7 -> s8 [0, 65535] { R461 += 1, R431 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s6 [0, 65535] { R461 += 1 };
  s8 -> s8 [0, 65535] { R461 += 1, R431 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R462 += 1, R463 += 1 };
  s0 -> s1 [0, 65535] { R463 += 1, R432 += 1, R433 += 1 };
  s0 -> s2 [0, 65535] { R463 += 1, R433 += 1, R410 += 1, R411 += 1 };
  s0 -> s3 [0, 65535] { R463 += 1, R433 += 1, R411 += 1, R399 += 1, R391 += 1 };
  s0 -> s4 [0, 65535] { R463 += 1, R433 += 1, R411 += 1, R398 += 1, R399 += 1 };
  s1 -> s1 [0, 65535] { R463 += 1, R432 += 1, R433 += 1 };
  s1 -> s2 [0, 65535] { R463 += 1, R433 += 1, R410 += 1, R411 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R463 += 1, R433 += 1, R411 += 1, R399 += 1, R391 += 1 };
  s1 -> s4 [0, 65535] { R463 += 1, R433 += 1, R411 += 1, R398 += 1, R399 += 1 };
  s2 -> s2 [0, 65535] { R463 += 1, R433 += 1, R410 += 1, R411 += 1 };
  s2 -> s5 [0, 65535] { R463 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R463 += 1, R433 += 1, R411 += 1, R399 += 1, R391 += 1 };
  s2 -> s4 [0, 65535] { R463 += 1, R433 += 1, R411 += 1, R398 += 1, R399 += 1 };
  s3 -> s8 [0, 65535] { R463 += 1, R433 += 1, R411 += 1 };
  s3 -> s5 [0, 65535] { R463 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R463 += 1, R433 += 1 };
  s3 -> s3 [0, 65535] { R463 += 1, R433 += 1, R411 += 1, R399 += 1, R391 += 1 };
  s4 -> s5 [0, 65535] { R463 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R463 += 1, R433 += 1 };
  s4 -> s3 [0, 65535] { R463 += 1, R433 += 1, R411 += 1, R399 += 1, R391 += 1 };
  s4 -> s4 [0, 65535] { R463 += 1, R433 += 1, R411 += 1, R398 += 1, R399 += 1 };
  s5 -> s5 [0, 65535] { R463 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R463 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R463 += 1, R433 += 1 };
  s8 -> s8 [0, 65535] { R463 += 1, R433 += 1, R411 += 1 };
  s8 -> s5 [0, 65535] { R463 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R463 += 1, R433 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 = R397 && R2 = R411 && R3 = R401 && R4 = R463 && R7 = 0 && R8 - R396 = -1 && R316 = 0 && R317 = R433 && R392 = 0 && R393 = 1 && R394 = 0 && R395 = 1 && R400 - R433 = 1 && R402 = 0 && R403 = R411 && R404 = 0 && R405 = R411 && R406 = 0 && R407 = R411 && R408 = 0 && R409 = R411 && R410 = 0 && R412 = 0 && R413 = R433 && R414 = 0 && R415 = R433 && R416 = 0 && R417 = R433 && R418 = 0 && R419 = R433 && R420 = 0 && R421 = R433 && R422 = 0 && R423 = R433 && R424 = 0 && R425 = R433 && R426 = 0 && R427 = R433 && R428 = 0 && R429 = R433 && R430 = 0 && R431 = R433 && R432 = 0 && R434 = 10 && R435 = R463 && R436 = 10 && R437 = R463 && R438 = 10 && R439 = R463 && R440 = 10 && R441 = R463 && R442 = 10 && R443 = R463 && R444 = 10 && R445 = R463 && R446 = 10 && R447 = R463 && R448 = 10 && R449 = R463 && R450 = 10 && R451 = R463 && R452 = 10 && R453 = R463 && R454 = 10 && R455 = R463 && R456 = 10 && R457 = R463 && R458 = 10 && R459 = R463 && R460 = 10 && R461 = R463 && R462 = 10 && R0 != 0 && R311 < 1 && R312 < 1 && R396 - R397 < 1 && -1 < R396 && R433 < R401 && 0 < R411 && -1 < R433 && 9 < R463 && (R396 != R398 || R397 = R399 || ((R391 != 0 || R397 - R398 < 1 || R398 < 0) && (R391 = 0 || R397 < R398 || R398 < 0))) && (R396 = R398 || (R391 = 0 && R396 = R397));
// End of Parikh automata intersection problem
