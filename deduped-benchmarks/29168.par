// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R311, R313, R314, R4, R465, R466, R5, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R584 += 1 };
  s0 -> s0 [0, 65535] { R583 += 1, R584 += 1 };
  s0 -> s2 [46, 46] { R584 += 1 };
  s0 -> s3 [47, 47] { R584 += 1 };
  s0 -> s1 [48, 65535] { R584 += 1 };
  s1 -> s1 [0, 45] { R584 += 1 };
  s1 -> s2 [46, 46] { R584 += 1 };
  s1 -> s3 [47, 47] { R584 += 1 };
  s1 -> s1 [48, 65535] { R584 += 1 };
  s2 -> s1 [0, 45] { R584 += 1 };
  s2 -> s2 [46, 46] { R584 += 1 };
  s2 -> s3 [47, 47] { R584 += 1 };
  s2 -> s1 [48, 114] { R584 += 1 };
  s2 -> s8 [115, 115] { R584 += 1 };
  s2 -> s1 [116, 65535] { R584 += 1 };
  s3 -> s3 [0, 45] { R584 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R584 += 1 };
  s3 -> s3 [47, 65535] { R584 += 1 };
  s4 -> s3 [0, 45] { R584 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R584 += 1 };
  s4 -> s3 [47, 114] { R584 += 1 };
  s4 -> s5 [115, 115] { R584 += 1 };
  s4 -> s3 [116, 65535] { R584 += 1 };
  s5 -> s3 [0, 45] { R584 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R584 += 1 };
  s5 -> s3 [47, 110] { R584 += 1 };
  s5 -> s6 [111, 111] { R584 += 1 };
  s5 -> s3 [112, 65535] { R584 += 1 };
  s6 -> s3 [0, 45] { R584 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R584 += 1 };
  s6 -> s3 [47, 98] { R584 += 1 };
  s6 -> s7 [99, 99] { R584 += 1 };
  s6 -> s3 [100, 65535] { R584 += 1 };
  s7 -> s3 [0, 45] { R584 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R584 += 1 };
  s7 -> s3 [47, 106] { R584 += 1 };
  s7 -> s3 [108, 65535] { R584 += 1 };
  s8 -> s1 [0, 45] { R584 += 1 };
  s8 -> s2 [46, 46] { R584 += 1 };
  s8 -> s3 [47, 47] { R584 += 1 };
  s8 -> s1 [48, 110] { R584 += 1 };
  s8 -> s9 [111, 111] { R584 += 1 };
  s8 -> s1 [112, 65535] { R584 += 1 };
  s9 -> s1 [0, 45] { R584 += 1 };
  s9 -> s2 [46, 46] { R584 += 1 };
  s9 -> s3 [47, 47] { R584 += 1 };
  s9 -> s1 [48, 98] { R584 += 1 };
  s9 -> s10 [99, 99] { R584 += 1 };
  s9 -> s1 [100, 65535] { R584 += 1 };
  s10 -> s1 [0, 45] { R584 += 1 };
  s10 -> s2 [46, 46] { R584 += 1 };
  s10 -> s3 [47, 47] { R584 += 1 };
  s10 -> s1 [48, 106] { R584 += 1 };
  s10 -> s1 [108, 65535] { R584 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R586 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R585 += 1, R586 += 1 };
  s1 -> s1 [0, 65535] { R586 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R588 += 1, R466 += 1 };
  s0 -> s2 [0, 65535] { R588 += 1, R465 += 1, R466 += 1 };
  s0 -> s0 [0, 65535] { R587 += 1, R588 += 1 };
  s0 -> s3 [47, 47] { R588 += 1 };
  s0 -> s1 [48, 65535] { R588 += 1, R466 += 1 };
  s1 -> s1 [0, 46] { R588 += 1, R466 += 1 };
  s1 -> s3 [47, 47] { R588 += 1 };
  s1 -> s1 [48, 65535] { R588 += 1, R466 += 1 };
  s2 -> s1 [0, 46] { R588 += 1, R466 += 1 };
  s2 -> s2 [0, 65535] { R588 += 1, R465 += 1, R466 += 1 };
  s2 -> s3 [47, 47] { R588 += 1 };
  s2 -> s1 [48, 65535] { R588 += 1, R466 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R588 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R590 += 1, R550 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R590 += 1, R549 += 1, R550 += 1 };
  s0 -> s0 [0, 65535] { R589 += 1, R590 += 1 };
  s1 -> s4 [0, 65535] { R590 += 1 };
  s1 -> s1 [0, 65535] { R590 += 1, R550 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R590 += 1, R550 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R590 += 1, R549 += 1, R550 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R590 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 43] { R592 += 1, R562 += 1 };
  s0 -> s2 [0, 65535] { R592 += 1, R561 += 1, R562 += 1 };
  s0 -> s0 [0, 65535] { R591 += 1, R592 += 1 };
  s0 -> s1 [45, 63] { R592 += 1, R562 += 1 };
  s0 -> s3 [88, 88] { R592 += 1, R562 += 1 };
  s0 -> s1 [89, 65535] { R592 += 1, R562 += 1 };
  s1 -> s1 [0, 43] { R592 += 1, R562 += 1 };
  s1 -> s1 [45, 63] { R592 += 1, R562 += 1 };
  s1 -> s3 [88, 88] { R592 += 1, R562 += 1 };
  s1 -> s1 [89, 65535] { R592 += 1, R562 += 1 };
  s2 -> s1 [0, 43] { R592 += 1, R562 += 1 };
  s2 -> s2 [0, 65535] { R592 += 1, R561 += 1, R562 += 1 };
  s2 -> s1 [45, 63] { R592 += 1, R562 += 1 };
  s2 -> s3 [88, 88] { R592 += 1, R562 += 1 };
  s2 -> s1 [89, 65535] { R592 += 1, R562 += 1 };
  s3 -> s3 [0, 43] { R592 += 1, R562 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R592 += 1 };
  s3 -> s3 [45, 63] { R592 += 1, R562 += 1 };
  s3 -> s3 [88, 65535] { R592 += 1, R562 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R594 += 1, R564 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R593 += 1, R594 += 1 };
  s0 -> s2 [0, 65535] { R594 += 1, R563 += 1, R564 += 1 };
  s1 -> s1 [0, 65535] { R594 += 1, R564 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R594 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R594 += 1, R564 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R594 += 1, R563 += 1, R564 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R594 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R596 += 1, R566 += 1 };
  s0 -> s2 [0, 65535] { R596 += 1, R566 += 1, R311 += 1 };
  s0 -> s0 [0, 65535] { R595 += 1, R596 += 1 };
  s0 -> s3 [0, 65535] { R596 += 1, R565 += 1, R566 += 1 };
  s0 -> s4 [58, 58] { R596 += 1, R566 += 1 };
  s0 -> s1 [59, 65535] { R596 += 1, R566 += 1 };
  s1 -> s1 [0, 57] { R596 += 1, R566 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R596 += 1 };
  s1 -> s4 [58, 58] { R596 += 1, R566 += 1 };
  s1 -> s1 [59, 65535] { R596 += 1, R566 += 1 };
  s2 -> s1 [0, 57] { R596 += 1, R566 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R596 += 1, R566 += 1, R311 += 1 };
  s2 -> s6 [0, 65535] { R596 += 1 };
  s2 -> s4 [58, 58] { R596 += 1, R566 += 1 };
  s2 -> s1 [59, 65535] { R596 += 1, R566 += 1 };
  s3 -> s1 [0, 57] { R596 += 1, R566 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R596 += 1, R566 += 1, R311 += 1 };
  s3 -> s3 [0, 65535] { R596 += 1, R565 += 1, R566 += 1 };
  s3 -> s4 [58, 58] { R596 += 1, R566 += 1 };
  s3 -> s1 [59, 65535] { R596 += 1, R566 += 1 };
  s4 -> s4 [0, 65535] { R596 += 1, R566 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R596 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 87] { R598 += 1, R568 += 1, R314 += 1 };
  s0 -> s0 [0, 65535] { R597 += 1, R598 += 1 };
  s0 -> s2 [0, 65535] { R598 += 1, R567 += 1, R568 += 1 };
  s0 -> s3 [0, 65535] { R598 += 1, R568 += 1, R313 += 1, R314 += 1 };
  s0 -> s4 [88, 88] { R598 += 1, R568 += 1 };
  s0 -> s1 [89, 65535] { R598 += 1, R568 += 1, R314 += 1 };
  s1 -> s1 [0, 87] { R598 += 1, R568 += 1, R314 += 1 };
  s1 -> s4 [88, 88] { R598 += 1, R568 += 1 };
  s1 -> s1 [89, 65535] { R598 += 1, R568 += 1, R314 += 1 };
  s2 -> s1 [0, 87] { R598 += 1, R568 += 1, R314 += 1 };
  s2 -> s2 [0, 65535] { R598 += 1, R567 += 1, R568 += 1 };
  s2 -> s3 [0, 65535] { R598 += 1, R568 += 1, R313 += 1, R314 += 1 };
  s2 -> s4 [88, 88] { R598 += 1, R568 += 1 };
  s2 -> s1 [89, 65535] { R598 += 1, R568 += 1, R314 += 1 };
  s3 -> s1 [0, 87] { R598 += 1, R568 += 1, R314 += 1 };
  s3 -> s3 [0, 65535] { R598 += 1, R568 += 1, R313 += 1, R314 += 1 };
  s3 -> s4 [88, 88] { R598 += 1, R568 += 1 };
  s3 -> s1 [89, 65535] { R598 += 1, R568 += 1, R314 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R598 += 1 };
  s4 -> s4 [0, 65535] { R598 += 1, R568 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R598 += 1 };
  accepting s4, s5, s6;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 90] { R600 += 1, R570 += 1, R542 += 1 };
  s0 -> s2 [0, 65535] { R600 += 1, R570 += 1, R541 += 1, R542 += 1 };
  s0 -> s0 [0, 65535] { R599 += 1, R600 += 1 };
  s0 -> s3 [0, 65535] { R600 += 1, R569 += 1, R570 += 1 };
  s0 -> s4 [91, 91] { R600 += 1, R570 += 1, R542 += 1 };
  s0 -> s1 [92, 65535] { R600 += 1, R570 += 1, R542 += 1 };
  s1 -> s7 [0, 65535] { R600 += 1, R570 += 1 };
  s1 -> s1 [0, 65535] { R600 += 1, R570 += 1, R542 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R600 += 1 };
  s2 -> s1 [0, 90] { R600 += 1, R570 += 1, R542 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R600 += 1, R570 += 1, R541 += 1, R542 += 1 };
  s2 -> s6 [0, 65535] { R600 += 1 };
  s2 -> s4 [91, 91] { R600 += 1, R570 += 1, R542 += 1 };
  s2 -> s1 [92, 65535] { R600 += 1, R570 += 1, R542 += 1 };
  s3 -> s1 [0, 90] { R600 += 1, R570 += 1, R542 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R600 += 1, R570 += 1, R541 += 1, R542 += 1 };
  s3 -> s3 [0, 65535] { R600 += 1, R569 += 1, R570 += 1 };
  s3 -> s4 [91, 91] { R600 += 1, R570 += 1, R542 += 1 };
  s3 -> s1 [92, 65535] { R600 += 1, R570 += 1, R542 += 1 };
  s4 -> s1 [0, 65535] { R600 += 1, R570 += 1, R542 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R600 += 1 };
  s7 -> s7 [0, 65535] { R600 += 1, R570 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R600 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R602 += 1, R572 += 1, R544 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R602 += 1, R572 += 1, R543 += 1, R544 += 1 };
  s0 -> s3 [0, 65535] { R602 += 1, R571 += 1, R572 += 1 };
  s0 -> s0 [0, 65535] { R601 += 1, R602 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R602 += 1, R572 += 1, R544 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R602 += 1, R572 += 1 };
  s1 -> s5 [0, 65535] { R602 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R602 += 1, R572 += 1, R544 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R602 += 1, R572 += 1, R543 += 1, R544 += 1 };
  s2 -> s5 [0, 65535] { R602 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R602 += 1, R572 += 1, R544 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R602 += 1, R572 += 1, R543 += 1, R544 += 1 };
  s3 -> s3 [0, 65535] { R602 += 1, R571 += 1, R572 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R602 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R602 += 1, R572 += 1 };
  s6 -> s5 [0, 65535] { R602 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R604 += 1, R574 += 1, R552 += 1 };
  s0 -> s0 [0, 65535] { R603 += 1, R604 += 1 };
  s0 -> s2 [0, 65535] { R604 += 1, R573 += 1, R574 += 1 };
  s0 -> s3 [0, 65535] { R604 += 1, R574 += 1, R551 += 1, R552 += 1 };
  s0 -> s4 [88, 88] { R604 += 1, R574 += 1, R552 += 1 };
  s0 -> s1 [89, 65535] { R604 += 1, R574 += 1, R552 += 1 };
  s1 -> s1 [0, 87] { R604 += 1, R574 += 1, R552 += 1 };
  s1 -> s4 [88, 88] { R604 += 1, R574 += 1, R552 += 1 };
  s1 -> s1 [89, 65535] { R604 += 1, R574 += 1, R552 += 1 };
  s2 -> s1 [0, 87] { R604 += 1, R574 += 1, R552 += 1 };
  s2 -> s2 [0, 65535] { R604 += 1, R573 += 1, R574 += 1 };
  s2 -> s3 [0, 65535] { R604 += 1, R574 += 1, R551 += 1, R552 += 1 };
  s2 -> s4 [88, 88] { R604 += 1, R574 += 1, R552 += 1 };
  s2 -> s1 [89, 65535] { R604 += 1, R574 += 1, R552 += 1 };
  s3 -> s1 [0, 87] { R604 += 1, R574 += 1, R552 += 1 };
  s3 -> s3 [0, 65535] { R604 += 1, R574 += 1, R551 += 1, R552 += 1 };
  s3 -> s4 [88, 88] { R604 += 1, R574 += 1, R552 += 1 };
  s3 -> s1 [89, 65535] { R604 += 1, R574 += 1, R552 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R604 += 1, R574 += 1, R552 += 1 };
  s4 -> s6 [0, 65535] { R604 += 1, R574 += 1 };
  s4 -> s7 [0, 65535] { R604 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R604 += 1, R574 += 1 };
  s6 -> s7 [0, 65535] { R604 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R604 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R606 += 1, R576 += 1, R554 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R606 += 1, R576 += 1, R553 += 1, R554 += 1 };
  s0 -> s3 [0, 65535] { R606 += 1, R575 += 1, R576 += 1 };
  s0 -> s0 [0, 65535] { R605 += 1, R606 += 1 };
  s1 -> s5 [0, 65535] { R606 += 1 };
  s1 -> s1 [0, 65535] { R606 += 1, R576 += 1, R554 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R606 += 1, R576 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R606 += 1 };
  s2 -> s1 [0, 65535] { R606 += 1, R576 += 1, R554 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R606 += 1, R576 += 1, R553 += 1, R554 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R606 += 1, R576 += 1, R554 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R606 += 1, R576 += 1, R553 += 1, R554 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R606 += 1, R575 += 1, R576 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R606 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R606 += 1 };
  s6 -> s6 [0, 65535] { R606 += 1, R576 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 87] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R607 += 1, R608 += 1 };
  s0 -> s2 [0, 65535] { R608 += 1, R577 += 1, R578 += 1 };
  s0 -> s3 [0, 65535] { R608 += 1, R578 += 1, R555 += 1, R556 += 1 };
  s0 -> s4 [0, 65535] { R608 += 1, R578 += 1, R556 += 1, R7 += 1, R8 += 1 };
  s0 -> s5 [88, 88] { R608 += 1, R578 += 1, R556 += 1 };
  s0 -> s1 [89, 65535] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s1 -> s1 [0, 87] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s1 -> s5 [88, 88] { R608 += 1, R578 += 1, R556 += 1 };
  s1 -> s1 [89, 65535] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s2 -> s1 [0, 87] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R608 += 1, R577 += 1, R578 += 1 };
  s2 -> s3 [0, 65535] { R608 += 1, R578 += 1, R555 += 1, R556 += 1 };
  s2 -> s4 [0, 65535] { R608 += 1, R578 += 1, R556 += 1, R7 += 1, R8 += 1 };
  s2 -> s5 [88, 88] { R608 += 1, R578 += 1, R556 += 1 };
  s2 -> s1 [89, 65535] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s3 -> s1 [0, 87] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R608 += 1, R578 += 1, R555 += 1, R556 += 1 };
  s3 -> s4 [0, 65535] { R608 += 1, R578 += 1, R556 += 1, R7 += 1, R8 += 1 };
  s3 -> s5 [88, 88] { R608 += 1, R578 += 1, R556 += 1 };
  s3 -> s1 [89, 65535] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s4 -> s1 [0, 87] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s4 -> s4 [0, 65535] { R608 += 1, R578 += 1, R556 += 1, R7 += 1, R8 += 1 };
  s4 -> s5 [88, 88] { R608 += 1, R578 += 1, R556 += 1 };
  s4 -> s1 [89, 65535] { R608 += 1, R578 += 1, R556 += 1, R8 += 1 };
  s5 -> s6 [0, 65535] { R608 += 1 };
  s5 -> s5 [0, 65535] { R608 += 1, R578 += 1, R556 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R608 += 1, R578 += 1 };
  s6 -> s6 [0, 65535] { R608 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R608 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R608 += 1, R578 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s0 -> s2 [0, 65535] { R610 += 1, R580 += 1, R558 += 1, R545 += 1, R546 += 1 };
  s0 -> s3 [0, 65535] { R610 += 1, R580 += 1, R557 += 1, R558 += 1 };
  s0 -> s4 [0, 65535] { R610 += 1, R579 += 1, R580 += 1 };
  s0 -> s0 [0, 65535] { R609 += 1, R610 += 1 };
  s0 -> s5 [88, 88] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s0 -> s1 [89, 65535] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s1 -> s1 [0, 87] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s1 -> s5 [88, 88] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s1 -> s1 [89, 65535] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s2 -> s1 [0, 87] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s2 -> s2 [0, 65535] { R610 += 1, R580 += 1, R558 += 1, R545 += 1, R546 += 1 };
  s2 -> s5 [88, 88] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s2 -> s1 [89, 65535] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s3 -> s1 [0, 87] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s3 -> s2 [0, 65535] { R610 += 1, R580 += 1, R558 += 1, R545 += 1, R546 += 1 };
  s3 -> s3 [0, 65535] { R610 += 1, R580 += 1, R557 += 1, R558 += 1 };
  s3 -> s5 [88, 88] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s3 -> s1 [89, 65535] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s4 -> s1 [0, 87] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s4 -> s2 [0, 65535] { R610 += 1, R580 += 1, R558 += 1, R545 += 1, R546 += 1 };
  s4 -> s3 [0, 65535] { R610 += 1, R580 += 1, R557 += 1, R558 += 1 };
  s4 -> s4 [0, 65535] { R610 += 1, R579 += 1, R580 += 1 };
  s4 -> s5 [88, 88] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s4 -> s1 [89, 65535] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s5 -> s6 [0, 65535] { R610 += 1 };
  s5 -> s5 [0, 65535] { R610 += 1, R580 += 1, R558 += 1, R546 += 1 };
  s5 -> s7 [0, 65535] { R610 += 1, R580 += 1, R558 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R610 += 1, R580 += 1 };
  s6 -> s6 [0, 65535] { R610 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R610 += 1 };
  s7 -> s7 [0, 65535] { R610 += 1, R580 += 1, R558 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R610 += 1, R580 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s6 [0, 65535] { R610 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R610 += 1, R580 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R612 += 1, R581 += 1, R582 += 1 };
  s0 -> s2 [0, 65535] { R612 += 1, R582 += 1, R560 += 1, R547 += 1, R548 += 1 };
  s0 -> s0 [0, 65535] { R611 += 1, R612 += 1 };
  s0 -> s3 [0, 65535] { R612 += 1, R582 += 1, R559 += 1, R560 += 1 };
  s0 -> s4 [0, 65535] { R612 += 1, R582 += 1, R560 += 1, R548 += 1, R540 += 1 };
  s1 -> s1 [0, 65535] { R612 += 1, R581 += 1, R582 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R612 += 1, R582 += 1, R560 += 1, R547 += 1, R548 += 1 };
  s1 -> s3 [0, 65535] { R612 += 1, R582 += 1, R559 += 1, R560 += 1 };
  s1 -> s4 [0, 65535] { R612 += 1, R582 += 1, R560 += 1, R548 += 1, R540 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R612 += 1, R582 += 1 };
  s2 -> s2 [0, 65535] { R612 += 1, R582 += 1, R560 += 1, R547 += 1, R548 += 1 };
  s2 -> s7 [0, 65535] { R612 += 1 };
  s2 -> s4 [0, 65535] { R612 += 1, R582 += 1, R560 += 1, R548 += 1, R540 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R612 += 1, R582 += 1, R560 += 1, R547 += 1, R548 += 1 };
  s3 -> s7 [0, 65535] { R612 += 1 };
  s3 -> s3 [0, 65535] { R612 += 1, R582 += 1, R559 += 1, R560 += 1 };
  s3 -> s4 [0, 65535] { R612 += 1, R582 += 1, R560 += 1, R548 += 1, R540 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R612 += 1, R582 += 1 };
  s4 -> s7 [0, 65535] { R612 += 1 };
  s4 -> s8 [0, 65535] { R612 += 1, R582 += 1, R560 += 1 };
  s4 -> s4 [0, 65535] { R612 += 1, R582 += 1, R560 += 1, R548 += 1, R540 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R612 += 1, R582 += 1 };
  s6 -> s7 [0, 65535] { R612 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R612 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R612 += 1, R582 += 1 };
  s8 -> s7 [0, 65535] { R612 += 1 };
  s8 -> s8 [0, 65535] { R612 += 1, R582 += 1, R560 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 = R546 && R2 = R558 && R3 = R550 && R4 = R612 && R7 = 0 && R8 - R545 = -1 && R313 = 0 && R314 - R557 = -1 && R465 = 0 && R466 = R582 && R541 = 0 && R542 = 1 && R543 = 0 && R544 = 1 && R549 - R582 = 1 && R551 = R557 && R552 = R558 && R555 = R557 && R556 = R558 && R561 = 0 && R562 = R582 && R563 = 0 && R564 = R582 && R565 = 0 && R566 = R582 && R567 = 0 && R568 = R582 && R569 = 0 && R570 = R582 && R571 = 0 && R572 = R582 && R573 = 0 && R574 = R582 && R575 = 0 && R576 = R582 && R577 = 0 && R578 = R582 && R579 = 0 && R580 = R582 && R581 = 0 && R583 = 10 && R584 = R612 && R585 = 10 && R586 = R612 && R587 = 10 && R588 = R612 && R589 = 10 && R590 = R612 && R591 = 10 && R592 = R612 && R593 = 10 && R594 = R612 && R595 = 10 && R596 = R612 && R597 = 10 && R598 = R612 && R599 = 10 && R600 = R612 && R601 = 10 && R602 = R612 && R603 = 10 && R604 = R612 && R605 = 10 && R606 = R612 && R607 = 10 && R608 = R612 && R609 = 10 && R610 = R612 && R611 = 10 && R0 != 0 && R311 < 1 && R545 - R546 < 1 && -1 < R545 && R582 < R550 && R557 - R558 < 1 && -1 < R557 && 0 < R558 && -1 < R582 && 9 < R612 && (R545 != R547 || R546 = R548 || ((R540 != 0 || R546 - R547 < 1 || R547 < 0) && (R540 = 0 || R546 < R547 || R547 < 0))) && (R553 != R557 || R554 = R558 || (R546 = 0 && (R545 != 0 || R558 - R557 < 1))) && (R557 != R559 || R558 = R560 || ((R545 != 0 || R546 != 0 || R558 - R559 < 1 || R559 < 0) && (R546 < 1 || R558 < R559 || R559 < 0))) && (R545 = R547 || (R540 = 0 && R545 = R546)) && (R553 = R557 || (R546 = 0 && (R545 != 0 || R558 - R557 < 1))) && (R557 = R559 || (R546 = 0 && (R545 != 0 || R558 - R557 < 1)));
// End of Parikh automata intersection problem
