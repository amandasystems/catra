// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R140, R141, R2, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R241 += 1 };
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s0 -> s2 [46, 46] { R241 += 1 };
  s0 -> s3 [47, 47] { R241 += 1 };
  s0 -> s1 [48, 65535] { R241 += 1 };
  s1 -> s1 [0, 45] { R241 += 1 };
  s1 -> s2 [46, 46] { R241 += 1 };
  s1 -> s3 [47, 47] { R241 += 1 };
  s1 -> s1 [48, 65535] { R241 += 1 };
  s2 -> s1 [0, 45] { R241 += 1 };
  s2 -> s2 [46, 46] { R241 += 1 };
  s2 -> s3 [47, 47] { R241 += 1 };
  s2 -> s1 [48, 114] { R241 += 1 };
  s2 -> s8 [115, 115] { R241 += 1 };
  s2 -> s1 [116, 65535] { R241 += 1 };
  s3 -> s3 [0, 45] { R241 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R241 += 1 };
  s3 -> s3 [47, 65535] { R241 += 1 };
  s4 -> s3 [0, 45] { R241 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R241 += 1 };
  s4 -> s3 [47, 114] { R241 += 1 };
  s4 -> s5 [115, 115] { R241 += 1 };
  s4 -> s3 [116, 65535] { R241 += 1 };
  s5 -> s3 [0, 45] { R241 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R241 += 1 };
  s5 -> s3 [47, 110] { R241 += 1 };
  s5 -> s6 [111, 111] { R241 += 1 };
  s5 -> s3 [112, 65535] { R241 += 1 };
  s6 -> s3 [0, 45] { R241 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R241 += 1 };
  s6 -> s3 [47, 98] { R241 += 1 };
  s6 -> s7 [99, 99] { R241 += 1 };
  s6 -> s3 [100, 65535] { R241 += 1 };
  s7 -> s3 [0, 45] { R241 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R241 += 1 };
  s7 -> s3 [47, 106] { R241 += 1 };
  s7 -> s3 [108, 65535] { R241 += 1 };
  s8 -> s1 [0, 45] { R241 += 1 };
  s8 -> s2 [46, 46] { R241 += 1 };
  s8 -> s3 [47, 47] { R241 += 1 };
  s8 -> s1 [48, 110] { R241 += 1 };
  s8 -> s9 [111, 111] { R241 += 1 };
  s8 -> s1 [112, 65535] { R241 += 1 };
  s9 -> s1 [0, 45] { R241 += 1 };
  s9 -> s2 [46, 46] { R241 += 1 };
  s9 -> s3 [47, 47] { R241 += 1 };
  s9 -> s1 [48, 98] { R241 += 1 };
  s9 -> s10 [99, 99] { R241 += 1 };
  s9 -> s1 [100, 65535] { R241 += 1 };
  s10 -> s1 [0, 45] { R241 += 1 };
  s10 -> s2 [46, 46] { R241 += 1 };
  s10 -> s3 [47, 47] { R241 += 1 };
  s10 -> s1 [48, 106] { R241 += 1 };
  s10 -> s1 [108, 65535] { R241 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s1 [0, 65535] { R243 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R243 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R245 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s2 [0, 65535] { R245 += 1, R140 += 1, R141 += 1 };
  s0 -> s3 [47, 47] { R245 += 1 };
  s0 -> s1 [48, 65535] { R245 += 1, R141 += 1 };
  s1 -> s1 [0, 46] { R245 += 1, R141 += 1 };
  s1 -> s3 [47, 47] { R245 += 1 };
  s1 -> s1 [48, 65535] { R245 += 1, R141 += 1 };
  s2 -> s1 [0, 46] { R245 += 1, R141 += 1 };
  s2 -> s2 [0, 65535] { R245 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [47, 47] { R245 += 1 };
  s2 -> s1 [48, 65535] { R245 += 1, R141 += 1 };
  s3 -> s3 [0, 65535] { R245 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R247 += 1, R218 += 1, R219 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s2 [0, 65535] { R247 += 1, R219 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R247 += 1, R218 += 1, R219 += 1 };
  s1 -> s2 [0, 65535] { R247 += 1, R219 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R247 += 1 };
  s2 -> s2 [0, 65535] { R247 += 1, R219 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R247 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R249 += 1, R221 += 1, R206 += 1, R207 += 1 };
  s0 -> s2 [0, 65535] { R249 += 1, R220 += 1, R221 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s3 [63, 63] { R249 += 1, R221 += 1, R207 += 1 };
  s1 -> s1 [0, 65535] { R249 += 1, R221 += 1, R206 += 1, R207 += 1 };
  s1 -> s3 [63, 63] { R249 += 1, R221 += 1, R207 += 1 };
  s2 -> s1 [0, 65535] { R249 += 1, R221 += 1, R206 += 1, R207 += 1 };
  s2 -> s2 [0, 65535] { R249 += 1, R220 += 1, R221 += 1 };
  s2 -> s3 [63, 63] { R249 += 1, R221 += 1, R207 += 1 };
  s3 -> s4 [0, 65535] { R249 += 1 };
  s3 -> s3 [0, 65535] { R249 += 1, R221 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R249 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R251 += 1, R223 += 1, R208 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s2 [0, 65535] { R251 += 1, R223 += 1, R209 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R251 += 1, R222 += 1, R223 += 1 };
  s1 -> s1 [0, 65535] { R251 += 1, R223 += 1, R208 += 1, R209 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R251 += 1, R223 += 1, R209 += 1, R4 += 1 };
  s1 -> s6 [0, 65535] { R251 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R251 += 1, R223 += 1 };
  s2 -> s2 [0, 65535] { R251 += 1, R223 += 1, R209 += 1, R4 += 1 };
  s2 -> s6 [0, 65535] { R251 += 1 };
  s3 -> s1 [0, 65535] { R251 += 1, R223 += 1, R208 += 1, R209 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R251 += 1, R223 += 1, R209 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R251 += 1, R222 += 1, R223 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R251 += 1, R223 += 1 };
  s5 -> s6 [0, 65535] { R251 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R251 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 43] { R253 += 1, R225 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R224 += 1, R225 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s1 [45, 63] { R253 += 1, R225 += 1 };
  s0 -> s3 [90, 90] { R253 += 1, R225 += 1 };
  s0 -> s1 [91, 65535] { R253 += 1, R225 += 1 };
  s1 -> s1 [0, 43] { R253 += 1, R225 += 1 };
  s1 -> s1 [45, 63] { R253 += 1, R225 += 1 };
  s1 -> s3 [90, 90] { R253 += 1, R225 += 1 };
  s1 -> s1 [91, 65535] { R253 += 1, R225 += 1 };
  s2 -> s1 [0, 43] { R253 += 1, R225 += 1 };
  s2 -> s2 [0, 65535] { R253 += 1, R224 += 1, R225 += 1 };
  s2 -> s1 [45, 63] { R253 += 1, R225 += 1 };
  s2 -> s3 [90, 90] { R253 += 1, R225 += 1 };
  s2 -> s1 [91, 65535] { R253 += 1, R225 += 1 };
  s3 -> s3 [0, 43] { R253 += 1, R225 += 1 };
  s3 -> s3 [0, 65535] { R253 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R253 += 1, R225 += 1 };
  s3 -> s3 [90, 65535] { R253 += 1, R225 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s1 [0, 65535] { R255 += 1, R226 += 1, R227 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R227 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R255 += 1, R226 += 1, R227 += 1 };
  s1 -> s2 [0, 65535] { R255 += 1, R227 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R255 += 1 };
  s2 -> s2 [0, 65535] { R255 += 1, R227 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R255 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R257 += 1, R229 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s2 [0, 65535] { R257 += 1, R228 += 1, R229 += 1 };
  s0 -> s3 [0, 65535] { R257 += 1, R229 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R257 += 1, R229 += 1 };
  s0 -> s1 [59, 65535] { R257 += 1, R229 += 1 };
  s1 -> s1 [0, 57] { R257 += 1, R229 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R257 += 1 };
  s1 -> s4 [58, 58] { R257 += 1, R229 += 1 };
  s1 -> s1 [59, 65535] { R257 += 1, R229 += 1 };
  s2 -> s1 [0, 57] { R257 += 1, R229 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R257 += 1, R228 += 1, R229 += 1 };
  s2 -> s3 [0, 65535] { R257 += 1, R229 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R257 += 1, R229 += 1 };
  s2 -> s1 [59, 65535] { R257 += 1, R229 += 1 };
  s3 -> s1 [0, 57] { R257 += 1, R229 += 1 };
  s3 -> s5 [0, 65535] { R257 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R257 += 1, R229 += 1, R6 += 1 };
  s3 -> s4 [58, 58] { R257 += 1, R229 += 1 };
  s3 -> s1 [59, 65535] { R257 += 1, R229 += 1 };
  s4 -> s4 [0, 65535] { R257 += 1, R229 += 1 };
  s5 -> s5 [0, 65535] { R257 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 89] { R259 += 1, R231 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R259 += 1, R231 += 1, R8 += 1, R9 += 1 };
  s0 -> s3 [0, 65535] { R259 += 1, R230 += 1, R231 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s4 [90, 90] { R259 += 1, R231 += 1 };
  s0 -> s1 [91, 65535] { R259 += 1, R231 += 1, R9 += 1 };
  s1 -> s1 [0, 89] { R259 += 1, R231 += 1, R9 += 1 };
  s1 -> s4 [90, 90] { R259 += 1, R231 += 1 };
  s1 -> s1 [91, 65535] { R259 += 1, R231 += 1, R9 += 1 };
  s2 -> s1 [0, 89] { R259 += 1, R231 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R259 += 1, R231 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [90, 90] { R259 += 1, R231 += 1 };
  s2 -> s1 [91, 65535] { R259 += 1, R231 += 1, R9 += 1 };
  s3 -> s1 [0, 89] { R259 += 1, R231 += 1, R9 += 1 };
  s3 -> s2 [0, 65535] { R259 += 1, R231 += 1, R8 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R259 += 1, R230 += 1, R231 += 1 };
  s3 -> s4 [90, 90] { R259 += 1, R231 += 1 };
  s3 -> s1 [91, 65535] { R259 += 1, R231 += 1, R9 += 1 };
  s4 -> s5 [0, 65535] { R259 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R259 += 1, R231 += 1 };
  s5 -> s5 [0, 65535] { R259 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 90] { R261 += 1, R233 += 1, R211 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R233 += 1, R210 += 1, R211 += 1 };
  s0 -> s3 [0, 65535] { R261 += 1, R232 += 1, R233 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s4 [91, 91] { R261 += 1, R233 += 1, R211 += 1 };
  s0 -> s1 [92, 65535] { R261 += 1, R233 += 1, R211 += 1 };
  s1 -> s6 [0, 65535] { R261 += 1 };
  s1 -> s1 [0, 65535] { R261 += 1, R233 += 1, R211 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R261 += 1, R233 += 1 };
  s2 -> s1 [0, 90] { R261 += 1, R233 += 1, R211 += 1 };
  s2 -> s2 [0, 65535] { R261 += 1, R233 += 1, R210 += 1, R211 += 1 };
  s2 -> s6 [0, 65535] { R261 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R261 += 1, R233 += 1, R211 += 1 };
  s2 -> s1 [92, 65535] { R261 += 1, R233 += 1, R211 += 1 };
  s3 -> s1 [0, 90] { R261 += 1, R233 += 1, R211 += 1 };
  s3 -> s2 [0, 65535] { R261 += 1, R233 += 1, R210 += 1, R211 += 1 };
  s3 -> s3 [0, 65535] { R261 += 1, R232 += 1, R233 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R261 += 1, R233 += 1, R211 += 1 };
  s3 -> s1 [92, 65535] { R261 += 1, R233 += 1, R211 += 1 };
  s4 -> s1 [0, 65535] { R261 += 1, R233 += 1, R211 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R261 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R261 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R261 += 1, R233 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R263 += 1, R234 += 1, R235 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R235 += 1, R212 += 1, R213 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s3 [0, 65535] { R263 += 1, R235 += 1, R213 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R263 += 1, R234 += 1, R235 += 1 };
  s1 -> s2 [0, 65535] { R263 += 1, R235 += 1, R212 += 1, R213 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R263 += 1, R235 += 1, R213 += 1, R5 += 1 };
  s2 -> s4 [0, 65535] { R263 += 1 };
  s2 -> s2 [0, 65535] { R263 += 1, R235 += 1, R212 += 1, R213 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R263 += 1, R235 += 1, R213 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R263 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R263 += 1, R235 += 1 };
  s3 -> s3 [0, 65535] { R263 += 1, R235 += 1, R213 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R263 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R263 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R263 += 1, R235 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 89] { R265 += 1, R237 += 1, R215 += 1 };
  s0 -> s2 [0, 65535] { R265 += 1, R236 += 1, R237 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s3 [0, 65535] { R265 += 1, R237 += 1, R214 += 1, R215 += 1 };
  s0 -> s1 [91, 65535] { R265 += 1, R237 += 1, R215 += 1 };
  s1 -> s1 [0, 89] { R265 += 1, R237 += 1, R215 += 1 };
  s1 -> s1 [0, 65535] { R265 += 1, R237 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R265 += 1 };
  s1 -> s1 [91, 65535] { R265 += 1, R237 += 1, R215 += 1 };
  s2 -> s1 [0, 89] { R265 += 1, R237 += 1, R215 += 1 };
  s2 -> s2 [0, 65535] { R265 += 1, R236 += 1, R237 += 1 };
  s2 -> s3 [0, 65535] { R265 += 1, R237 += 1, R214 += 1, R215 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [91, 65535] { R265 += 1, R237 += 1, R215 += 1 };
  s3 -> s1 [0, 89] { R265 += 1, R237 += 1, R215 += 1 };
  s3 -> s3 [0, 65535] { R265 += 1, R237 += 1, R214 += 1, R215 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R265 += 1 };
  s3 -> s1 [91, 65535] { R265 += 1, R237 += 1, R215 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R265 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R267 += 1, R238 += 1, R239 += 1 };
  s0 -> s2 [0, 65535] { R267 += 1, R239 += 1, R216 += 1, R217 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s3 [0, 65535] { R267 += 1, R239 += 1, R217 += 1, R205 += 1 };
  s1 -> s1 [0, 65535] { R267 += 1, R238 += 1, R239 += 1 };
  s1 -> s2 [0, 65535] { R267 += 1, R239 += 1, R216 += 1, R217 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R267 += 1, R239 += 1, R217 += 1, R205 += 1 };
  s2 -> s2 [0, 65535] { R267 += 1, R239 += 1, R216 += 1, R217 += 1 };
  s2 -> s4 [0, 65535] { R267 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R267 += 1, R239 += 1, R217 += 1, R205 += 1 };
  s3 -> s4 [0, 65535] { R267 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R267 += 1, R239 += 1 };
  s3 -> s3 [0, 65535] { R267 += 1, R239 += 1, R217 += 1, R205 += 1 };
  s4 -> s4 [0, 65535] { R267 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R267 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R267 += 1, R239 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R223 && R3 = R267 && R8 = 0 && R140 = 0 && R141 = R239 && R206 = 0 && R210 = 0 && R211 = 1 && R212 = 0 && R213 = 1 && R218 - R239 = 1 && R219 = R223 && R220 - R239 = 1 && R221 = R223 && R222 - R239 = 1 && R224 = 0 && R225 = R239 && R226 = 0 && R227 = R239 && R228 = 0 && R229 = R239 && R230 = 0 && R231 = R239 && R232 = 0 && R233 = R239 && R234 = 0 && R235 = R239 && R236 = 0 && R237 = R239 && R238 = 0 && R240 = 10 && R241 = R267 && R242 = 10 && R243 = R267 && R244 = 10 && R245 = R267 && R246 = 10 && R247 = R267 && R248 = 10 && R249 = R267 && R250 = 10 && R251 = R267 && R252 = 10 && R253 = R267 && R254 = 10 && R255 = R267 && R256 = 10 && R257 = R267 && R258 = 10 && R259 = R267 && R260 = 10 && R261 = R267 && R262 = 10 && R263 = R267 && R264 = 10 && R265 = R267 && R266 = 10 && R0 != 0 && R9 < R1 && 0 < R1 && R6 < 1 && -2 < R9 && R239 < R223 && -1 < R239 && 9 < R267 && (R0 != R207 || R207 = 1 || R207 < 0) && (R1 != R215 || R9 - R214 = -1 || ((R205 != 0 || R215 - R9 < 2) && (R205 = 0 || R215 - R9 < 1 || R215 < 1))) && (R1 != R217 || R9 - R216 = -1 || ((R205 != 0 || R217 - R9 < 2) && (R205 = 0 || R217 - R9 < 1 || R217 < 1))) && (R207 != 1 || -1 < R0) && (R208 != 0 || ((R4 != 0 || ((R0 != R209 || R209 = 1 || R209 < 0) && (R0 = R209 || R209 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R209 || R209 = 1 || R209 < 0) && (R209 != 1 || -1 < R0) && (R0 = R209 || R209 = 1))))) && (R0 = R207 || R207 = 1) && (R1 = R215 || (R1 - R9 = 1 && R205 = 0)) && (R1 = R217 || (R1 - R9 = 1 && R205 = 0)) && (R208 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
