// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1546, R1547, R2, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2778, R2779, R2780, R2781, R2782, R2783, R2784, R2785, R2786, R2787, R2788, R2789, R2790, R2791, R2792, R2793, R2794, R2795, R2796, R2797, R2798, R2799, R2800, R2801, R2802, R2803, R2804, R2805, R2806, R2807, R2808, R2809, R2810, R2811, R2812, R2813, R2814, R2815, R2816, R2817, R2818, R2819, R2820, R2821, R2822, R2823, R2824, R2825, R2826, R2827, R2828, R2829, R2830, R2831, R2832, R2833, R2834, R2835, R2836, R2837, R2838, R2839, R2840, R2841, R2842, R2843, R2844, R2845, R2846, R2847, R2848, R2849, R2850, R2851, R2852, R2853, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2819 += 1 };
  s0 -> s0 [0, 65535] { R2818 += 1, R2819 += 1 };
  s0 -> s2 [46, 46] { R2819 += 1 };
  s0 -> s3 [47, 47] { R2819 += 1 };
  s0 -> s1 [48, 65535] { R2819 += 1 };
  s1 -> s1 [0, 45] { R2819 += 1 };
  s1 -> s2 [46, 46] { R2819 += 1 };
  s1 -> s3 [47, 47] { R2819 += 1 };
  s1 -> s1 [48, 65535] { R2819 += 1 };
  s2 -> s1 [0, 45] { R2819 += 1 };
  s2 -> s2 [46, 46] { R2819 += 1 };
  s2 -> s3 [47, 47] { R2819 += 1 };
  s2 -> s1 [48, 114] { R2819 += 1 };
  s2 -> s8 [115, 115] { R2819 += 1 };
  s2 -> s1 [116, 65535] { R2819 += 1 };
  s3 -> s3 [0, 45] { R2819 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2819 += 1 };
  s3 -> s3 [47, 65535] { R2819 += 1 };
  s4 -> s3 [0, 45] { R2819 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2819 += 1 };
  s4 -> s3 [47, 114] { R2819 += 1 };
  s4 -> s5 [115, 115] { R2819 += 1 };
  s4 -> s3 [116, 65535] { R2819 += 1 };
  s5 -> s3 [0, 45] { R2819 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2819 += 1 };
  s5 -> s3 [47, 110] { R2819 += 1 };
  s5 -> s6 [111, 111] { R2819 += 1 };
  s5 -> s3 [112, 65535] { R2819 += 1 };
  s6 -> s3 [0, 45] { R2819 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2819 += 1 };
  s6 -> s3 [47, 98] { R2819 += 1 };
  s6 -> s7 [99, 99] { R2819 += 1 };
  s6 -> s3 [100, 65535] { R2819 += 1 };
  s7 -> s3 [0, 45] { R2819 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2819 += 1 };
  s7 -> s3 [47, 106] { R2819 += 1 };
  s7 -> s3 [108, 65535] { R2819 += 1 };
  s8 -> s1 [0, 45] { R2819 += 1 };
  s8 -> s2 [46, 46] { R2819 += 1 };
  s8 -> s3 [47, 47] { R2819 += 1 };
  s8 -> s1 [48, 110] { R2819 += 1 };
  s8 -> s9 [111, 111] { R2819 += 1 };
  s8 -> s1 [112, 65535] { R2819 += 1 };
  s9 -> s1 [0, 45] { R2819 += 1 };
  s9 -> s2 [46, 46] { R2819 += 1 };
  s9 -> s3 [47, 47] { R2819 += 1 };
  s9 -> s1 [48, 98] { R2819 += 1 };
  s9 -> s10 [99, 99] { R2819 += 1 };
  s9 -> s1 [100, 65535] { R2819 += 1 };
  s10 -> s1 [0, 45] { R2819 += 1 };
  s10 -> s2 [46, 46] { R2819 += 1 };
  s10 -> s3 [47, 47] { R2819 += 1 };
  s10 -> s1 [48, 106] { R2819 += 1 };
  s10 -> s1 [108, 65535] { R2819 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2821 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R2820 += 1, R2821 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2821 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2823 += 1, R1547 += 1 };
  s0 -> s0 [0, 65535] { R2822 += 1, R2823 += 1 };
  s0 -> s2 [0, 65535] { R2823 += 1, R1546 += 1, R1547 += 1 };
  s0 -> s3 [47, 47] { R2823 += 1 };
  s0 -> s1 [48, 65535] { R2823 += 1, R1547 += 1 };
  s1 -> s1 [0, 46] { R2823 += 1, R1547 += 1 };
  s1 -> s3 [47, 47] { R2823 += 1 };
  s1 -> s1 [48, 65535] { R2823 += 1, R1547 += 1 };
  s2 -> s1 [0, 46] { R2823 += 1, R1547 += 1 };
  s2 -> s2 [0, 65535] { R2823 += 1, R1546 += 1, R1547 += 1 };
  s2 -> s3 [47, 47] { R2823 += 1 };
  s2 -> s1 [48, 65535] { R2823 += 1, R1547 += 1 };
  s3 -> s3 [0, 65535] { R2823 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R2825 += 1, R2785 += 1 };
  s0 -> s0 [0, 65535] { R2824 += 1, R2825 += 1 };
  s0 -> s2 [0, 65535] { R2825 += 1, R2784 += 1, R2785 += 1 };
  s0 -> s1 [38, 42] { R2825 += 1, R2785 += 1 };
  s0 -> s1 [44, 45] { R2825 += 1, R2785 += 1 };
  s0 -> s1 [47, 62] { R2825 += 1, R2785 += 1 };
  s0 -> s1 [64, 65535] { R2825 += 1, R2785 += 1 };
  s1 -> s1 [0, 36] { R2825 += 1, R2785 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2825 += 1 };
  s1 -> s1 [38, 42] { R2825 += 1, R2785 += 1 };
  s1 -> s1 [44, 45] { R2825 += 1, R2785 += 1 };
  s1 -> s1 [47, 62] { R2825 += 1, R2785 += 1 };
  s1 -> s1 [64, 65535] { R2825 += 1, R2785 += 1 };
  s2 -> s1 [0, 36] { R2825 += 1, R2785 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2825 += 1, R2784 += 1, R2785 += 1 };
  s2 -> s1 [38, 42] { R2825 += 1, R2785 += 1 };
  s2 -> s1 [44, 45] { R2825 += 1, R2785 += 1 };
  s2 -> s1 [47, 62] { R2825 += 1, R2785 += 1 };
  s2 -> s1 [64, 65535] { R2825 += 1, R2785 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R2827 += 1, R2786 += 1, R2787 += 1 };
  s0 -> s2 [0, 65535] { R2827 += 1, R2787 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R2826 += 1, R2827 += 1 };
  s1 -> s1 [0, 65535] { R2827 += 1, R2786 += 1, R2787 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2827 += 1, R2787 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2827 += 1, R2787 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R2827 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2827 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s0 -> s0 [0, 65535] { R2828 += 1, R2829 += 1 };
  s0 -> s2 [0, 65535] { R2829 += 1, R2789 += 1, R2316 += 1, R2317 += 1 };
  s0 -> s3 [0, 65535] { R2829 += 1, R2788 += 1, R2789 += 1 };
  s0 -> s4 [63, 63] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s0 -> s1 [64, 65535] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2829 += 1 };
  s1 -> s7 [0, 65535] { R2829 += 1, R2789 += 1 };
  s1 -> s1 [0, 65535] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s2 -> s1 [0, 62] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2829 += 1 };
  s2 -> s2 [0, 65535] { R2829 += 1, R2789 += 1, R2316 += 1, R2317 += 1 };
  s2 -> s4 [63, 63] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s2 -> s1 [64, 65535] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s3 -> s1 [0, 62] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2829 += 1, R2789 += 1, R2316 += 1, R2317 += 1 };
  s3 -> s3 [0, 65535] { R2829 += 1, R2788 += 1, R2789 += 1 };
  s3 -> s4 [63, 63] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s3 -> s1 [64, 65535] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s4 -> s1 [0, 65535] { R2829 += 1, R2789 += 1, R2317 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2829 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2829 += 1 };
  s7 -> s7 [0, 65535] { R2829 += 1, R2789 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2831 += 1, R2791 += 1, R2319 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2831 += 1, R2790 += 1, R2791 += 1 };
  s0 -> s0 [0, 65535] { R2830 += 1, R2831 += 1 };
  s0 -> s3 [0, 65535] { R2831 += 1, R2791 += 1, R2318 += 1, R2319 += 1 };
  s1 -> s1 [0, 65535] { R2831 += 1, R2791 += 1, R2319 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R2831 += 1 };
  s1 -> s6 [0, 65535] { R2831 += 1, R2791 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2831 += 1, R2791 += 1, R2319 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2831 += 1, R2790 += 1, R2791 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2831 += 1, R2791 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s1 [0, 65535] { R2831 += 1, R2791 += 1, R2319 += 1, R4 += 1 };
  s3 -> s4 [0, 65535] { R2831 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2831 += 1, R2791 += 1, R2318 += 1, R2319 += 1 };
  s4 -> s4 [0, 65535] { R2831 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2831 += 1 };
  s6 -> s6 [0, 65535] { R2831 += 1, R2791 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R2833 += 1, R2797 += 1 };
  s0 -> s2 [0, 65535] { R2833 += 1, R2796 += 1, R2797 += 1 };
  s0 -> s0 [0, 65535] { R2832 += 1, R2833 += 1 };
  s0 -> s1 [45, 63] { R2833 += 1, R2797 += 1 };
  s0 -> s3 [89, 89] { R2833 += 1, R2797 += 1 };
  s0 -> s1 [90, 65535] { R2833 += 1, R2797 += 1 };
  s1 -> s1 [0, 43] { R2833 += 1, R2797 += 1 };
  s1 -> s1 [45, 63] { R2833 += 1, R2797 += 1 };
  s1 -> s3 [89, 89] { R2833 += 1, R2797 += 1 };
  s1 -> s1 [90, 65535] { R2833 += 1, R2797 += 1 };
  s2 -> s1 [0, 43] { R2833 += 1, R2797 += 1 };
  s2 -> s2 [0, 65535] { R2833 += 1, R2796 += 1, R2797 += 1 };
  s2 -> s1 [45, 63] { R2833 += 1, R2797 += 1 };
  s2 -> s3 [89, 89] { R2833 += 1, R2797 += 1 };
  s2 -> s1 [90, 65535] { R2833 += 1, R2797 += 1 };
  s3 -> s3 [0, 43] { R2833 += 1, R2797 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2833 += 1 };
  s3 -> s3 [45, 63] { R2833 += 1, R2797 += 1 };
  s3 -> s3 [89, 65535] { R2833 += 1, R2797 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R2835 += 1, R2799 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R2835 += 1, R2798 += 1, R2799 += 1 };
  s0 -> s0 [0, 65535] { R2834 += 1, R2835 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2835 += 1 };
  s1 -> s1 [0, 65535] { R2835 += 1, R2799 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2835 += 1, R2799 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R2835 += 1, R2798 += 1, R2799 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2835 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R2837 += 1, R2801 += 1 };
  s0 -> s0 [0, 65535] { R2836 += 1, R2837 += 1 };
  s0 -> s2 [0, 65535] { R2837 += 1, R2800 += 1, R2801 += 1 };
  s0 -> s3 [0, 65535] { R2837 += 1, R2801 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R2837 += 1, R2801 += 1 };
  s0 -> s1 [59, 65535] { R2837 += 1, R2801 += 1 };
  s1 -> s1 [0, 57] { R2837 += 1, R2801 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2837 += 1 };
  s1 -> s4 [58, 58] { R2837 += 1, R2801 += 1 };
  s1 -> s1 [59, 65535] { R2837 += 1, R2801 += 1 };
  s2 -> s1 [0, 57] { R2837 += 1, R2801 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2837 += 1, R2800 += 1, R2801 += 1 };
  s2 -> s3 [0, 65535] { R2837 += 1, R2801 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R2837 += 1, R2801 += 1 };
  s2 -> s1 [59, 65535] { R2837 += 1, R2801 += 1 };
  s3 -> s1 [0, 57] { R2837 += 1, R2801 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2837 += 1 };
  s3 -> s3 [0, 65535] { R2837 += 1, R2801 += 1, R6 += 1 };
  s3 -> s4 [58, 58] { R2837 += 1, R2801 += 1 };
  s3 -> s1 [59, 65535] { R2837 += 1, R2801 += 1 };
  s4 -> s4 [0, 65535] { R2837 += 1, R2801 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2837 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R2839 += 1, R2803 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R2838 += 1, R2839 += 1 };
  s0 -> s2 [0, 65535] { R2839 += 1, R2802 += 1, R2803 += 1 };
  s0 -> s3 [0, 65535] { R2839 += 1, R2803 += 1, R8 += 1, R9 += 1 };
  s0 -> s4 [89, 89] { R2839 += 1, R2803 += 1 };
  s0 -> s1 [90, 65535] { R2839 += 1, R2803 += 1, R9 += 1 };
  s1 -> s1 [0, 88] { R2839 += 1, R2803 += 1, R9 += 1 };
  s1 -> s4 [89, 89] { R2839 += 1, R2803 += 1 };
  s1 -> s1 [90, 65535] { R2839 += 1, R2803 += 1, R9 += 1 };
  s2 -> s1 [0, 88] { R2839 += 1, R2803 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R2839 += 1, R2802 += 1, R2803 += 1 };
  s2 -> s3 [0, 65535] { R2839 += 1, R2803 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [89, 89] { R2839 += 1, R2803 += 1 };
  s2 -> s1 [90, 65535] { R2839 += 1, R2803 += 1, R9 += 1 };
  s3 -> s1 [0, 88] { R2839 += 1, R2803 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R2839 += 1, R2803 += 1, R8 += 1, R9 += 1 };
  s3 -> s4 [89, 89] { R2839 += 1, R2803 += 1 };
  s3 -> s1 [90, 65535] { R2839 += 1, R2803 += 1, R9 += 1 };
  s4 -> s5 [0, 65535] { R2839 += 1 };
  s4 -> s4 [0, 65535] { R2839 += 1, R2803 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2839 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s0 -> s0 [0, 65535] { R2840 += 1, R2841 += 1 };
  s0 -> s2 [0, 65535] { R2841 += 1, R2804 += 1, R2805 += 1 };
  s0 -> s3 [0, 65535] { R2841 += 1, R2805 += 1, R2320 += 1, R2321 += 1 };
  s0 -> s4 [91, 91] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s0 -> s1 [92, 65535] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s1 -> s5 [0, 65535] { R2841 += 1 };
  s1 -> s7 [0, 65535] { R2841 += 1, R2805 += 1 };
  s1 -> s1 [0, 65535] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s2 -> s2 [0, 65535] { R2841 += 1, R2804 += 1, R2805 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2841 += 1, R2805 += 1, R2320 += 1, R2321 += 1 };
  s2 -> s4 [91, 91] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s2 -> s1 [92, 65535] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s3 -> s1 [0, 90] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s3 -> s5 [0, 65535] { R2841 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2841 += 1, R2805 += 1, R2320 += 1, R2321 += 1 };
  s3 -> s4 [91, 91] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s3 -> s1 [92, 65535] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s4 -> s1 [0, 65535] { R2841 += 1, R2805 += 1, R2321 += 1 };
  s5 -> s5 [0, 65535] { R2841 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R2841 += 1 };
  s7 -> s7 [0, 65535] { R2841 += 1, R2805 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2843 += 1, R2807 += 1, R2322 += 1, R2323 += 1 };
  s0 -> s2 [0, 65535] { R2843 += 1, R2807 += 1, R2323 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R2843 += 1, R2806 += 1, R2807 += 1 };
  s0 -> s0 [0, 65535] { R2842 += 1, R2843 += 1 };
  s1 -> s1 [0, 65535] { R2843 += 1, R2807 += 1, R2322 += 1, R2323 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2843 += 1, R2807 += 1, R2323 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R2843 += 1 };
  s2 -> s5 [0, 65535] { R2843 += 1, R2807 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2843 += 1, R2807 += 1, R2323 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R2843 += 1 };
  s3 -> s1 [0, 65535] { R2843 += 1, R2807 += 1, R2322 += 1, R2323 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2843 += 1, R2807 += 1, R2323 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R2843 += 1, R2806 += 1, R2807 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2843 += 1, R2807 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R2843 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2843 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R2845 += 1, R2809 += 1, R2779 += 1 };
  s0 -> s2 [0, 65535] { R2845 += 1, R2809 += 1, R2778 += 1, R2779 += 1 };
  s0 -> s0 [0, 65535] { R2844 += 1, R2845 += 1 };
  s0 -> s3 [0, 65535] { R2845 += 1, R2808 += 1, R2809 += 1 };
  s0 -> s1 [90, 65535] { R2845 += 1, R2809 += 1, R2779 += 1 };
  s1 -> s1 [0, 88] { R2845 += 1, R2809 += 1, R2779 += 1 };
  s1 -> s1 [0, 65535] { R2845 += 1, R2809 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2845 += 1 };
  s1 -> s1 [90, 65535] { R2845 += 1, R2809 += 1, R2779 += 1 };
  s2 -> s1 [0, 88] { R2845 += 1, R2809 += 1, R2779 += 1 };
  s2 -> s2 [0, 65535] { R2845 += 1, R2809 += 1, R2778 += 1, R2779 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2845 += 1 };
  s2 -> s1 [90, 65535] { R2845 += 1, R2809 += 1, R2779 += 1 };
  s3 -> s1 [0, 88] { R2845 += 1, R2809 += 1, R2779 += 1 };
  s3 -> s2 [0, 65535] { R2845 += 1, R2809 += 1, R2778 += 1, R2779 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2845 += 1, R2808 += 1, R2809 += 1 };
  s3 -> s1 [90, 65535] { R2845 += 1, R2809 += 1, R2779 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2845 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2847 += 1, R2811 += 1, R2781 += 1, R2314 += 1 };
  s0 -> s2 [0, 65535] { R2847 += 1, R2810 += 1, R2811 += 1 };
  s0 -> s0 [0, 65535] { R2846 += 1, R2847 += 1 };
  s0 -> s3 [0, 65535] { R2847 += 1, R2811 += 1, R2780 += 1, R2781 += 1 };
  s1 -> s1 [0, 65535] { R2847 += 1, R2811 += 1, R2781 += 1, R2314 += 1 };
  s1 -> s4 [0, 65535] { R2847 += 1 };
  s1 -> s6 [0, 65535] { R2847 += 1, R2811 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2847 += 1, R2811 += 1, R2781 += 1, R2314 += 1 };
  s2 -> s2 [0, 65535] { R2847 += 1, R2810 += 1, R2811 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2847 += 1, R2811 += 1, R2780 += 1, R2781 += 1 };
  s3 -> s1 [0, 65535] { R2847 += 1, R2811 += 1, R2781 += 1, R2314 += 1 };
  s3 -> s4 [0, 65535] { R2847 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2847 += 1, R2811 += 1, R2780 += 1, R2781 += 1 };
  s4 -> s4 [0, 65535] { R2847 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2847 += 1 };
  s6 -> s6 [0, 65535] { R2847 += 1, R2811 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2849 += 1, R2812 += 1, R2813 += 1 };
  s0 -> s2 [0, 65535] { R2849 += 1, R2813 += 1, R2782 += 1, R2783 += 1 };
  s0 -> s0 [0, 65535] { R2848 += 1, R2849 += 1 };
  s0 -> s3 [111, 111] { R2849 += 1, R2813 += 1, R2783 += 1 };
  s1 -> s1 [0, 65535] { R2849 += 1, R2812 += 1, R2813 += 1 };
  s1 -> s2 [0, 65535] { R2849 += 1, R2813 += 1, R2782 += 1, R2783 += 1 };
  s1 -> s3 [111, 111] { R2849 += 1, R2813 += 1, R2783 += 1 };
  s2 -> s2 [0, 65535] { R2849 += 1, R2813 += 1, R2782 += 1, R2783 += 1 };
  s2 -> s3 [111, 111] { R2849 += 1, R2813 += 1, R2783 += 1 };
  s3 -> s4 [115, 115] { R2849 += 1, R2813 += 1, R2783 += 1 };
  s4 -> s5 [116, 116] { R2849 += 1, R2813 += 1, R2783 += 1 };
  s5 -> s6 [0, 65535] { R2849 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R2849 += 1, R2813 += 1 };
  s6 -> s6 [0, 65535] { R2849 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2850 += 1, R2851 += 1 };
  s0 -> s1 [0, 65535] { R2851 += 1, R2814 += 1, R2815 += 1 };
  s0 -> s2 [0, 65535] { R2851 += 1, R2815 += 1, R2792 += 1, R2793 += 1 };
  s0 -> s3 [0, 65535] { R2851 += 1, R2815 += 1, R2793 += 1, R2315 += 1 };
  s1 -> s1 [0, 65535] { R2851 += 1, R2814 += 1, R2815 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R2851 += 1, R2815 += 1, R2792 += 1, R2793 += 1 };
  s1 -> s3 [0, 65535] { R2851 += 1, R2815 += 1, R2793 += 1, R2315 += 1 };
  s2 -> s5 [0, 65535] { R2851 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2851 += 1, R2815 += 1, R2792 += 1, R2793 += 1 };
  s2 -> s3 [0, 65535] { R2851 += 1, R2815 += 1, R2793 += 1, R2315 += 1 };
  s3 -> s4 [0, 65535] { R2851 += 1, R2815 += 1 };
  s3 -> s5 [0, 65535] { R2851 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2851 += 1, R2815 += 1, R2793 += 1, R2315 += 1 };
  s4 -> s4 [0, 65535] { R2851 += 1, R2815 += 1 };
  s4 -> s5 [0, 65535] { R2851 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2851 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2853 += 1, R2817 += 1, R2794 += 1, R2795 += 1 };
  s0 -> s2 [0, 65535] { R2853 += 1, R2816 += 1, R2817 += 1 };
  s0 -> s0 [0, 65535] { R2852 += 1, R2853 += 1 };
  s0 -> s3 [108, 108] { R2853 += 1, R2817 += 1, R2795 += 1 };
  s1 -> s1 [0, 65535] { R2853 += 1, R2817 += 1, R2794 += 1, R2795 += 1 };
  s1 -> s3 [108, 108] { R2853 += 1, R2817 += 1, R2795 += 1 };
  s2 -> s1 [0, 65535] { R2853 += 1, R2817 += 1, R2794 += 1, R2795 += 1 };
  s2 -> s2 [0, 65535] { R2853 += 1, R2816 += 1, R2817 += 1 };
  s2 -> s3 [108, 108] { R2853 += 1, R2817 += 1, R2795 += 1 };
  s3 -> s4 [111, 111] { R2853 += 1, R2817 += 1, R2795 += 1 };
  s4 -> s5 [99, 99] { R2853 += 1, R2817 += 1, R2795 += 1 };
  s5 -> s6 [97, 97] { R2853 += 1, R2817 += 1, R2795 += 1 };
  s6 -> s7 [108, 108] { R2853 += 1, R2817 += 1, R2795 += 1 };
  s7 -> s8 [104, 104] { R2853 += 1, R2817 += 1, R2795 += 1 };
  s8 -> s8 [0, 65535] { R2853 += 1, R2817 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R2853 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2853 += 1 };
  accepting s8, s9, s10;
};
};
constraint R1 = R2783 && R2 = R2791 && R3 = R2853 && R8 = 0 && R9 - R2795 = -1 && R1546 = 0 && R1547 = R2817 && R2320 = 0 && R2321 = 1 && R2322 = 0 && R2323 = 1 && R2782 = R2795 && R2784 - R2817 = 1 && R2785 = R2791 && R2786 - R2817 = 1 && R2787 = R2791 && R2788 - R2817 = 1 && R2789 = R2791 && R2790 - R2817 = 1 && R2794 = 0 && R2796 = 0 && R2797 = R2817 && R2798 = 0 && R2799 = R2817 && R2800 = 0 && R2801 = R2817 && R2802 = 0 && R2803 = R2817 && R2804 = 0 && R2805 = R2817 && R2806 = 0 && R2807 = R2817 && R2808 = 0 && R2809 = R2817 && R2810 = 0 && R2811 = R2817 && R2812 = 0 && R2813 = R2817 && R2814 = 0 && R2815 = R2817 && R2816 = 0 && R2818 = 10 && R2819 = R2853 && R2820 = 10 && R2821 = R2853 && R2822 = 10 && R2823 = R2853 && R2824 = 10 && R2825 = R2853 && R2826 = 10 && R2827 = R2853 && R2828 = 10 && R2829 = R2853 && R2830 = 10 && R2831 = R2853 && R2832 = 10 && R2833 = R2853 && R2834 = 10 && R2835 = R2853 && R2836 = 10 && R2837 = R2853 && R2838 = 10 && R2839 = R2853 && R2840 = 10 && R2841 = R2853 && R2842 = 10 && R2843 = R2853 && R2844 = 10 && R2845 = R2853 && R2846 = 10 && R2847 = R2853 && R2848 = 10 && R2849 = R2853 && R2850 = 10 && R2851 = R2853 && R2852 = 10 && R0 != 0 && R6 < 1 && R2795 - R2783 < 1 && 0 < R2783 && R2817 < R2791 && -1 < R2795 && -1 < R2817 && 9 < R2853 && (R2316 != 0 || ((R4 != 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R0 = R2317 || R2317 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R2317 != 1 || -1 < R0) && (R0 = R2317 || R2317 = 1))))) && (R2318 != 0 || ((R4 != 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R0 = R2319 || R2319 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R2319 != 1 || -1 < R0) && (R0 = R2319 || R2319 = 1))))) && (R2778 != R2795 || R2779 = R2783 || (R2314 = 0 && R2783 = R2795)) && (R2780 != R2795 || R2781 = R2783 || (R2314 = 0 && R2783 = R2795)) && (R2792 != 0 || R2793 = R2795 || (R2315 = 0 && R2795 = 0)) && (R2316 = 0 || (R4 = 0 && R0 < 0)) && (R2318 = 0 || (R4 = 0 && R0 < 0)) && (R2778 = R2795 || (R2314 = 0 && R2783 = R2795)) && (R2780 = R2795 || (R2314 = 0 && R2783 = R2795)) && (R2792 = 0 || (R2315 = 0 && R2795 = 0));
// End of Parikh automata intersection problem
