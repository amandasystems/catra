// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1546, R1547, R2, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2626, R2627, R2628, R2629, R2630, R2631, R2632, R2633, R2634, R2635, R2636, R2637, R2638, R2639, R2640, R2641, R2642, R2643, R2644, R2645, R2646, R2647, R2648, R2649, R2650, R2651, R2652, R2653, R2654, R2655, R2656, R2657, R2658, R2659, R2660, R2661, R2662, R2663, R2664, R2665, R2666, R2667, R2668, R2669, R2670, R2671, R2672, R2673, R2674, R2675, R2676, R2677, R2678, R2679, R2680, R2681, R2682, R2683, R2684, R2685, R2686, R2687, R2688, R2689, R2690, R2691, R2692, R2693, R2694, R2695, R2696, R2697, R2698, R2699, R2700, R2701, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2667 += 1 };
  s0 -> s0 [0, 65535] { R2666 += 1, R2667 += 1 };
  s0 -> s2 [46, 46] { R2667 += 1 };
  s0 -> s3 [47, 47] { R2667 += 1 };
  s0 -> s1 [48, 65535] { R2667 += 1 };
  s1 -> s1 [0, 45] { R2667 += 1 };
  s1 -> s2 [46, 46] { R2667 += 1 };
  s1 -> s3 [47, 47] { R2667 += 1 };
  s1 -> s1 [48, 65535] { R2667 += 1 };
  s2 -> s1 [0, 45] { R2667 += 1 };
  s2 -> s2 [46, 46] { R2667 += 1 };
  s2 -> s3 [47, 47] { R2667 += 1 };
  s2 -> s1 [48, 114] { R2667 += 1 };
  s2 -> s8 [115, 115] { R2667 += 1 };
  s2 -> s1 [116, 65535] { R2667 += 1 };
  s3 -> s3 [0, 45] { R2667 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2667 += 1 };
  s3 -> s3 [47, 65535] { R2667 += 1 };
  s4 -> s3 [0, 45] { R2667 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2667 += 1 };
  s4 -> s3 [47, 114] { R2667 += 1 };
  s4 -> s5 [115, 115] { R2667 += 1 };
  s4 -> s3 [116, 65535] { R2667 += 1 };
  s5 -> s3 [0, 45] { R2667 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2667 += 1 };
  s5 -> s3 [47, 110] { R2667 += 1 };
  s5 -> s6 [111, 111] { R2667 += 1 };
  s5 -> s3 [112, 65535] { R2667 += 1 };
  s6 -> s3 [0, 45] { R2667 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2667 += 1 };
  s6 -> s3 [47, 98] { R2667 += 1 };
  s6 -> s7 [99, 99] { R2667 += 1 };
  s6 -> s3 [100, 65535] { R2667 += 1 };
  s7 -> s3 [0, 45] { R2667 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2667 += 1 };
  s7 -> s3 [47, 106] { R2667 += 1 };
  s7 -> s3 [108, 65535] { R2667 += 1 };
  s8 -> s1 [0, 45] { R2667 += 1 };
  s8 -> s2 [46, 46] { R2667 += 1 };
  s8 -> s3 [47, 47] { R2667 += 1 };
  s8 -> s1 [48, 110] { R2667 += 1 };
  s8 -> s9 [111, 111] { R2667 += 1 };
  s8 -> s1 [112, 65535] { R2667 += 1 };
  s9 -> s1 [0, 45] { R2667 += 1 };
  s9 -> s2 [46, 46] { R2667 += 1 };
  s9 -> s3 [47, 47] { R2667 += 1 };
  s9 -> s1 [48, 98] { R2667 += 1 };
  s9 -> s10 [99, 99] { R2667 += 1 };
  s9 -> s1 [100, 65535] { R2667 += 1 };
  s10 -> s1 [0, 45] { R2667 += 1 };
  s10 -> s2 [46, 46] { R2667 += 1 };
  s10 -> s3 [47, 47] { R2667 += 1 };
  s10 -> s1 [48, 106] { R2667 += 1 };
  s10 -> s1 [108, 65535] { R2667 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2669 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R2668 += 1, R2669 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2669 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2671 += 1, R1547 += 1 };
  s0 -> s2 [0, 65535] { R2671 += 1, R1546 += 1, R1547 += 1 };
  s0 -> s0 [0, 65535] { R2670 += 1, R2671 += 1 };
  s0 -> s3 [47, 47] { R2671 += 1 };
  s0 -> s1 [48, 65535] { R2671 += 1, R1547 += 1 };
  s1 -> s1 [0, 46] { R2671 += 1, R1547 += 1 };
  s1 -> s3 [47, 47] { R2671 += 1 };
  s1 -> s1 [48, 65535] { R2671 += 1, R1547 += 1 };
  s2 -> s1 [0, 46] { R2671 += 1, R1547 += 1 };
  s2 -> s2 [0, 65535] { R2671 += 1, R1546 += 1, R1547 += 1 };
  s2 -> s3 [47, 47] { R2671 += 1 };
  s2 -> s1 [48, 65535] { R2671 += 1, R1547 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2671 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R2673 += 1, R2633 += 1 };
  s0 -> s0 [0, 65535] { R2672 += 1, R2673 += 1 };
  s0 -> s2 [0, 65535] { R2673 += 1, R2632 += 1, R2633 += 1 };
  s0 -> s1 [38, 42] { R2673 += 1, R2633 += 1 };
  s0 -> s1 [44, 45] { R2673 += 1, R2633 += 1 };
  s0 -> s1 [47, 62] { R2673 += 1, R2633 += 1 };
  s0 -> s1 [64, 65535] { R2673 += 1, R2633 += 1 };
  s1 -> s1 [0, 36] { R2673 += 1, R2633 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2673 += 1 };
  s1 -> s1 [38, 42] { R2673 += 1, R2633 += 1 };
  s1 -> s1 [44, 45] { R2673 += 1, R2633 += 1 };
  s1 -> s1 [47, 62] { R2673 += 1, R2633 += 1 };
  s1 -> s1 [64, 65535] { R2673 += 1, R2633 += 1 };
  s2 -> s1 [0, 36] { R2673 += 1, R2633 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2673 += 1, R2632 += 1, R2633 += 1 };
  s2 -> s1 [38, 42] { R2673 += 1, R2633 += 1 };
  s2 -> s1 [44, 45] { R2673 += 1, R2633 += 1 };
  s2 -> s1 [47, 62] { R2673 += 1, R2633 += 1 };
  s2 -> s1 [64, 65535] { R2673 += 1, R2633 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R2675 += 1, R2635 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R2675 += 1, R2634 += 1, R2635 += 1 };
  s0 -> s0 [0, 65535] { R2674 += 1, R2675 += 1 };
  s1 -> s1 [0, 65535] { R2675 += 1, R2635 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R2675 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2675 += 1, R2635 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R2675 += 1, R2634 += 1, R2635 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2675 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s0 -> s2 [0, 65535] { R2677 += 1, R2637 += 1, R2316 += 1, R2317 += 1 };
  s0 -> s0 [0, 65535] { R2676 += 1, R2677 += 1 };
  s0 -> s3 [0, 65535] { R2677 += 1, R2636 += 1, R2637 += 1 };
  s0 -> s4 [63, 63] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s0 -> s1 [64, 65535] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s1 -> s7 [0, 65535] { R2677 += 1, R2637 += 1 };
  s1 -> s1 [0, 65535] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2677 += 1 };
  s2 -> s1 [0, 62] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s2 -> s2 [0, 65535] { R2677 += 1, R2637 += 1, R2316 += 1, R2317 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2677 += 1 };
  s2 -> s4 [63, 63] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s2 -> s1 [64, 65535] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s3 -> s1 [0, 62] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s3 -> s2 [0, 65535] { R2677 += 1, R2637 += 1, R2316 += 1, R2317 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2677 += 1, R2636 += 1, R2637 += 1 };
  s3 -> s4 [63, 63] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s3 -> s1 [64, 65535] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s4 -> s1 [0, 65535] { R2677 += 1, R2637 += 1, R2317 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2677 += 1 };
  s7 -> s7 [0, 65535] { R2677 += 1, R2637 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2677 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R2678 += 1, R2679 += 1 };
  s0 -> s1 [0, 65535] { R2679 += 1, R2639 += 1, R2319 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2679 += 1, R2639 += 1, R2318 += 1, R2319 += 1 };
  s0 -> s3 [0, 65535] { R2679 += 1, R2638 += 1, R2639 += 1 };
  s1 -> s1 [0, 65535] { R2679 += 1, R2639 += 1, R2319 += 1, R4 += 1 };
  s1 -> s6 [0, 65535] { R2679 += 1, R2639 += 1 };
  s1 -> s5 [0, 65535] { R2679 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2679 += 1, R2639 += 1, R2319 += 1, R4 += 1 };
  s2 -> s5 [0, 65535] { R2679 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2679 += 1, R2639 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s1 [0, 65535] { R2679 += 1, R2639 += 1, R2319 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2679 += 1, R2639 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s3 [0, 65535] { R2679 += 1, R2638 += 1, R2639 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2679 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2679 += 1, R2639 += 1 };
  s6 -> s5 [0, 65535] { R2679 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R2681 += 1, R2645 += 1 };
  s0 -> s0 [0, 65535] { R2680 += 1, R2681 += 1 };
  s0 -> s2 [0, 65535] { R2681 += 1, R2644 += 1, R2645 += 1 };
  s0 -> s1 [45, 63] { R2681 += 1, R2645 += 1 };
  s0 -> s3 [89, 89] { R2681 += 1, R2645 += 1 };
  s0 -> s1 [90, 65535] { R2681 += 1, R2645 += 1 };
  s1 -> s1 [0, 43] { R2681 += 1, R2645 += 1 };
  s1 -> s1 [45, 63] { R2681 += 1, R2645 += 1 };
  s1 -> s3 [89, 89] { R2681 += 1, R2645 += 1 };
  s1 -> s1 [90, 65535] { R2681 += 1, R2645 += 1 };
  s2 -> s1 [0, 43] { R2681 += 1, R2645 += 1 };
  s2 -> s2 [0, 65535] { R2681 += 1, R2644 += 1, R2645 += 1 };
  s2 -> s1 [45, 63] { R2681 += 1, R2645 += 1 };
  s2 -> s3 [89, 89] { R2681 += 1, R2645 += 1 };
  s2 -> s1 [90, 65535] { R2681 += 1, R2645 += 1 };
  s3 -> s3 [0, 43] { R2681 += 1, R2645 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2681 += 1 };
  s3 -> s3 [45, 63] { R2681 += 1, R2645 += 1 };
  s3 -> s3 [89, 65535] { R2681 += 1, R2645 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R2683 += 1, R2647 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R2683 += 1, R2646 += 1, R2647 += 1 };
  s0 -> s0 [0, 65535] { R2682 += 1, R2683 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2683 += 1 };
  s1 -> s1 [0, 65535] { R2683 += 1, R2647 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2683 += 1, R2647 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R2683 += 1, R2646 += 1, R2647 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2683 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R2685 += 1, R2649 += 1 };
  s0 -> s2 [0, 65535] { R2685 += 1, R2648 += 1, R2649 += 1 };
  s0 -> s0 [0, 65535] { R2684 += 1, R2685 += 1 };
  s0 -> s3 [0, 65535] { R2685 += 1, R2649 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R2685 += 1, R2649 += 1 };
  s0 -> s1 [59, 65535] { R2685 += 1, R2649 += 1 };
  s1 -> s1 [0, 57] { R2685 += 1, R2649 += 1 };
  s1 -> s1 [0, 65535] { R2685 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [58, 58] { R2685 += 1, R2649 += 1 };
  s1 -> s1 [59, 65535] { R2685 += 1, R2649 += 1 };
  s2 -> s1 [0, 57] { R2685 += 1, R2649 += 1 };
  s2 -> s2 [0, 65535] { R2685 += 1, R2648 += 1, R2649 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2685 += 1, R2649 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R2685 += 1, R2649 += 1 };
  s2 -> s1 [59, 65535] { R2685 += 1, R2649 += 1 };
  s3 -> s1 [0, 57] { R2685 += 1, R2649 += 1 };
  s3 -> s5 [0, 65535] { R2685 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2685 += 1, R2649 += 1, R6 += 1 };
  s3 -> s4 [58, 58] { R2685 += 1, R2649 += 1 };
  s3 -> s1 [59, 65535] { R2685 += 1, R2649 += 1 };
  s4 -> s4 [0, 65535] { R2685 += 1, R2649 += 1 };
  s5 -> s5 [0, 65535] { R2685 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R2687 += 1, R2651 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R2687 += 1, R2651 += 1, R8 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R2686 += 1, R2687 += 1 };
  s0 -> s3 [0, 65535] { R2687 += 1, R2650 += 1, R2651 += 1 };
  s0 -> s4 [89, 89] { R2687 += 1, R2651 += 1 };
  s0 -> s1 [90, 65535] { R2687 += 1, R2651 += 1, R9 += 1 };
  s1 -> s1 [0, 88] { R2687 += 1, R2651 += 1, R9 += 1 };
  s1 -> s4 [89, 89] { R2687 += 1, R2651 += 1 };
  s1 -> s1 [90, 65535] { R2687 += 1, R2651 += 1, R9 += 1 };
  s2 -> s1 [0, 88] { R2687 += 1, R2651 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R2687 += 1, R2651 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [89, 89] { R2687 += 1, R2651 += 1 };
  s2 -> s1 [90, 65535] { R2687 += 1, R2651 += 1, R9 += 1 };
  s3 -> s1 [0, 88] { R2687 += 1, R2651 += 1, R9 += 1 };
  s3 -> s2 [0, 65535] { R2687 += 1, R2651 += 1, R8 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R2687 += 1, R2650 += 1, R2651 += 1 };
  s3 -> s4 [89, 89] { R2687 += 1, R2651 += 1 };
  s3 -> s1 [90, 65535] { R2687 += 1, R2651 += 1, R9 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2687 += 1 };
  s4 -> s4 [0, 65535] { R2687 += 1, R2651 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2687 += 1 };
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s0 -> s0 [0, 65535] { R2688 += 1, R2689 += 1 };
  s0 -> s2 [0, 65535] { R2689 += 1, R2652 += 1, R2653 += 1 };
  s0 -> s3 [0, 65535] { R2689 += 1, R2653 += 1, R2320 += 1, R2321 += 1 };
  s0 -> s4 [91, 91] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s0 -> s1 [92, 65535] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s1 -> s7 [0, 65535] { R2689 += 1, R2653 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s1 -> s6 [0, 65535] { R2689 += 1 };
  s2 -> s1 [0, 90] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2689 += 1, R2652 += 1, R2653 += 1 };
  s2 -> s3 [0, 65535] { R2689 += 1, R2653 += 1, R2320 += 1, R2321 += 1 };
  s2 -> s4 [91, 91] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s2 -> s1 [92, 65535] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s3 -> s1 [0, 90] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2689 += 1, R2653 += 1, R2320 += 1, R2321 += 1 };
  s3 -> s6 [0, 65535] { R2689 += 1 };
  s3 -> s4 [91, 91] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s3 -> s1 [92, 65535] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s4 -> s1 [0, 65535] { R2689 += 1, R2653 += 1, R2321 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2689 += 1 };
  s7 -> s7 [0, 65535] { R2689 += 1, R2653 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2689 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2691 += 1, R2654 += 1, R2655 += 1 };
  s0 -> s0 [0, 65535] { R2690 += 1, R2691 += 1 };
  s0 -> s2 [0, 65535] { R2691 += 1, R2655 += 1, R2322 += 1, R2323 += 1 };
  s0 -> s3 [0, 65535] { R2691 += 1, R2655 += 1, R2323 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R2691 += 1, R2654 += 1, R2655 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2691 += 1, R2655 += 1, R2322 += 1, R2323 += 1 };
  s1 -> s3 [0, 65535] { R2691 += 1, R2655 += 1, R2323 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2691 += 1, R2655 += 1, R2322 += 1, R2323 += 1 };
  s2 -> s3 [0, 65535] { R2691 += 1, R2655 += 1, R2323 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R2691 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2691 += 1, R2655 += 1, R2323 += 1, R5 += 1 };
  s3 -> s5 [0, 65535] { R2691 += 1 };
  s3 -> s6 [0, 65535] { R2691 += 1, R2655 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2691 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2691 += 1 };
  s6 -> s6 [0, 65535] { R2691 += 1, R2655 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R2693 += 1, R2657 += 1, R2627 += 1 };
  s0 -> s0 [0, 65535] { R2692 += 1, R2693 += 1 };
  s0 -> s2 [0, 65535] { R2693 += 1, R2657 += 1, R2626 += 1, R2627 += 1 };
  s0 -> s3 [0, 65535] { R2693 += 1, R2656 += 1, R2657 += 1 };
  s0 -> s1 [90, 65535] { R2693 += 1, R2657 += 1, R2627 += 1 };
  s1 -> s1 [0, 88] { R2693 += 1, R2657 += 1, R2627 += 1 };
  s1 -> s5 [0, 65535] { R2693 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2693 += 1, R2657 += 1 };
  s1 -> s1 [90, 65535] { R2693 += 1, R2657 += 1, R2627 += 1 };
  s2 -> s1 [0, 88] { R2693 += 1, R2657 += 1, R2627 += 1 };
  s2 -> s5 [0, 65535] { R2693 += 1 };
  s2 -> s2 [0, 65535] { R2693 += 1, R2657 += 1, R2626 += 1, R2627 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [90, 65535] { R2693 += 1, R2657 += 1, R2627 += 1 };
  s3 -> s1 [0, 88] { R2693 += 1, R2657 += 1, R2627 += 1 };
  s3 -> s2 [0, 65535] { R2693 += 1, R2657 += 1, R2626 += 1, R2627 += 1 };
  s3 -> s3 [0, 65535] { R2693 += 1, R2656 += 1, R2657 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [90, 65535] { R2693 += 1, R2657 += 1, R2627 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2693 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2694 += 1, R2695 += 1 };
  s0 -> s1 [0, 65535] { R2695 += 1, R2659 += 1, R2628 += 1, R2629 += 1 };
  s0 -> s2 [0, 65535] { R2695 += 1, R2659 += 1, R2629 += 1, R2314 += 1 };
  s0 -> s3 [0, 65535] { R2695 += 1, R2658 += 1, R2659 += 1 };
  s1 -> s1 [0, 65535] { R2695 += 1, R2659 += 1, R2628 += 1, R2629 += 1 };
  s1 -> s2 [0, 65535] { R2695 += 1, R2659 += 1, R2629 += 1, R2314 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2695 += 1 };
  s2 -> s2 [0, 65535] { R2695 += 1, R2659 += 1, R2629 += 1, R2314 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2695 += 1 };
  s2 -> s6 [0, 65535] { R2695 += 1, R2659 += 1 };
  s3 -> s1 [0, 65535] { R2695 += 1, R2659 += 1, R2628 += 1, R2629 += 1 };
  s3 -> s2 [0, 65535] { R2695 += 1, R2659 += 1, R2629 += 1, R2314 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2695 += 1, R2658 += 1, R2659 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2695 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2695 += 1 };
  s6 -> s6 [0, 65535] { R2695 += 1, R2659 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2697 += 1, R2661 += 1, R2630 += 1, R2631 += 1 };
  s0 -> s0 [0, 65535] { R2696 += 1, R2697 += 1 };
  s0 -> s2 [0, 65535] { R2697 += 1, R2660 += 1, R2661 += 1 };
  s0 -> s3 [108, 108] { R2697 += 1, R2661 += 1, R2631 += 1 };
  s1 -> s1 [0, 65535] { R2697 += 1, R2661 += 1, R2630 += 1, R2631 += 1 };
  s1 -> s3 [108, 108] { R2697 += 1, R2661 += 1, R2631 += 1 };
  s2 -> s1 [0, 65535] { R2697 += 1, R2661 += 1, R2630 += 1, R2631 += 1 };
  s2 -> s2 [0, 65535] { R2697 += 1, R2660 += 1, R2661 += 1 };
  s2 -> s3 [108, 108] { R2697 += 1, R2661 += 1, R2631 += 1 };
  s3 -> s4 [104, 104] { R2697 += 1, R2661 += 1, R2631 += 1 };
  s4 -> s5 [111, 111] { R2697 += 1, R2661 += 1, R2631 += 1 };
  s5 -> s6 [115, 115] { R2697 += 1, R2661 += 1, R2631 += 1 };
  s6 -> s7 [116, 116] { R2697 += 1, R2661 += 1, R2631 += 1 };
  s7 -> s7 [0, 65535] { R2697 += 1, R2661 += 1 };
  s7 -> s8 [0, 65535] { R2697 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R2697 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s7, s8, s9;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2698 += 1, R2699 += 1 };
  s0 -> s1 [0, 65535] { R2699 += 1, R2663 += 1, R2640 += 1, R2641 += 1 };
  s0 -> s2 [0, 65535] { R2699 += 1, R2663 += 1, R2641 += 1, R2315 += 1 };
  s0 -> s3 [0, 65535] { R2699 += 1, R2662 += 1, R2663 += 1 };
  s1 -> s6 [0, 65535] { R2699 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2699 += 1, R2663 += 1, R2640 += 1, R2641 += 1 };
  s1 -> s2 [0, 65535] { R2699 += 1, R2663 += 1, R2641 += 1, R2315 += 1 };
  s2 -> s5 [0, 65535] { R2699 += 1, R2663 += 1 };
  s2 -> s6 [0, 65535] { R2699 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2699 += 1, R2663 += 1, R2641 += 1, R2315 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2699 += 1, R2663 += 1, R2640 += 1, R2641 += 1 };
  s3 -> s2 [0, 65535] { R2699 += 1, R2663 += 1, R2641 += 1, R2315 += 1 };
  s3 -> s3 [0, 65535] { R2699 += 1, R2662 += 1, R2663 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2699 += 1, R2663 += 1 };
  s5 -> s6 [0, 65535] { R2699 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2699 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R2700 += 1, R2701 += 1 };
  s0 -> s1 [0, 65535] { R2701 += 1, R2665 += 1, R2642 += 1, R2643 += 1 };
  s0 -> s2 [0, 65535] { R2701 += 1, R2664 += 1, R2665 += 1 };
  s0 -> s3 [108, 108] { R2701 += 1, R2665 += 1, R2643 += 1 };
  s1 -> s1 [0, 65535] { R2701 += 1, R2665 += 1, R2642 += 1, R2643 += 1 };
  s1 -> s3 [108, 108] { R2701 += 1, R2665 += 1, R2643 += 1 };
  s2 -> s1 [0, 65535] { R2701 += 1, R2665 += 1, R2642 += 1, R2643 += 1 };
  s2 -> s2 [0, 65535] { R2701 += 1, R2664 += 1, R2665 += 1 };
  s2 -> s3 [108, 108] { R2701 += 1, R2665 += 1, R2643 += 1 };
  s3 -> s4 [111, 111] { R2701 += 1, R2665 += 1, R2643 += 1 };
  s4 -> s5 [99, 99] { R2701 += 1, R2665 += 1, R2643 += 1 };
  s5 -> s6 [97, 97] { R2701 += 1, R2665 += 1, R2643 += 1 };
  s6 -> s6 [0, 65535] { R2701 += 1, R2665 += 1 };
  s6 -> s7 [0, 65535] { R2701 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2701 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s6, s7, s8;
};
};
constraint R1 = R2631 && R2 = R2639 && R3 = R2701 && R8 = 0 && R9 - R2643 = -1 && R1546 = 0 && R1547 = R2665 && R2320 = 0 && R2321 = 1 && R2322 = 0 && R2323 = 1 && R2630 = R2643 && R2632 - R2665 = 1 && R2633 = R2639 && R2634 - R2665 = 1 && R2635 = R2639 && R2636 - R2665 = 1 && R2637 = R2639 && R2638 - R2665 = 1 && R2642 = 0 && R2644 = 0 && R2645 = R2665 && R2646 = 0 && R2647 = R2665 && R2648 = 0 && R2649 = R2665 && R2650 = 0 && R2651 = R2665 && R2652 = 0 && R2653 = R2665 && R2654 = 0 && R2655 = R2665 && R2656 = 0 && R2657 = R2665 && R2658 = 0 && R2659 = R2665 && R2660 = 0 && R2661 = R2665 && R2662 = 0 && R2663 = R2665 && R2664 = 0 && R2666 = 10 && R2667 = R2701 && R2668 = 10 && R2669 = R2701 && R2670 = 10 && R2671 = R2701 && R2672 = 10 && R2673 = R2701 && R2674 = 10 && R2675 = R2701 && R2676 = 10 && R2677 = R2701 && R2678 = 10 && R2679 = R2701 && R2680 = 10 && R2681 = R2701 && R2682 = 10 && R2683 = R2701 && R2684 = 10 && R2685 = R2701 && R2686 = 10 && R2687 = R2701 && R2688 = 10 && R2689 = R2701 && R2690 = 10 && R2691 = R2701 && R2692 = 10 && R2693 = R2701 && R2694 = 10 && R2695 = R2701 && R2696 = 10 && R2697 = R2701 && R2698 = 10 && R2699 = R2701 && R2700 = 10 && R0 != 0 && R6 < 1 && R2643 - R2631 < 1 && 0 < R2631 && R2665 < R2639 && -1 < R2643 && -1 < R2665 && 9 < R2701 && (R2316 != 0 || ((R4 != 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R0 = R2317 || R2317 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R2317 != 1 || -1 < R0) && (R0 = R2317 || R2317 = 1))))) && (R2318 != 0 || ((R4 != 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R0 = R2319 || R2319 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R2319 != 1 || -1 < R0) && (R0 = R2319 || R2319 = 1))))) && (R2626 != R2643 || R2627 = R2631 || (R2314 = 0 && R2631 = R2643)) && (R2628 != R2643 || R2629 = R2631 || (R2314 = 0 && R2631 = R2643)) && (R2640 != 0 || R2641 = R2643 || (R2315 = 0 && R2643 = 0)) && (R2316 = 0 || (R4 = 0 && R0 < 0)) && (R2318 = 0 || (R4 = 0 && R0 < 0)) && (R2626 = R2643 || (R2314 = 0 && R2631 = R2643)) && (R2628 = R2643 || (R2314 = 0 && R2631 = R2643)) && (R2640 = 0 || (R2315 = 0 && R2643 = 0));
// End of Parikh automata intersection problem
