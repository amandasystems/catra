// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1546, R1547, R2, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2324, R2325, R2326, R2327, R2328, R2329, R2330, R2331, R2332, R2333, R2334, R2335, R2336, R2337, R2338, R2339, R2340, R2341, R2342, R2343, R2344, R2345, R2346, R2347, R2348, R2349, R2350, R2351, R2352, R2353, R2354, R2355, R2356, R2357, R2358, R2359, R2360, R2361, R2362, R2363, R2364, R2365, R2366, R2367, R2368, R2369, R2370, R2371, R2372, R2373, R2374, R2375, R2376, R2377, R2378, R2379, R2380, R2381, R2382, R2383, R2384, R2385, R2386, R2387, R2388, R2389, R2390, R2391, R2392, R2393, R2394, R2395, R2396, R2397, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2363 += 1 };
  s0 -> s0 [0, 65535] { R2362 += 1, R2363 += 1 };
  s0 -> s2 [46, 46] { R2363 += 1 };
  s0 -> s3 [47, 47] { R2363 += 1 };
  s0 -> s1 [48, 65535] { R2363 += 1 };
  s1 -> s1 [0, 45] { R2363 += 1 };
  s1 -> s2 [46, 46] { R2363 += 1 };
  s1 -> s3 [47, 47] { R2363 += 1 };
  s1 -> s1 [48, 65535] { R2363 += 1 };
  s2 -> s1 [0, 45] { R2363 += 1 };
  s2 -> s2 [46, 46] { R2363 += 1 };
  s2 -> s3 [47, 47] { R2363 += 1 };
  s2 -> s1 [48, 114] { R2363 += 1 };
  s2 -> s8 [115, 115] { R2363 += 1 };
  s2 -> s1 [116, 65535] { R2363 += 1 };
  s3 -> s3 [0, 45] { R2363 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2363 += 1 };
  s3 -> s3 [47, 65535] { R2363 += 1 };
  s4 -> s3 [0, 45] { R2363 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2363 += 1 };
  s4 -> s3 [47, 114] { R2363 += 1 };
  s4 -> s5 [115, 115] { R2363 += 1 };
  s4 -> s3 [116, 65535] { R2363 += 1 };
  s5 -> s3 [0, 45] { R2363 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2363 += 1 };
  s5 -> s3 [47, 110] { R2363 += 1 };
  s5 -> s6 [111, 111] { R2363 += 1 };
  s5 -> s3 [112, 65535] { R2363 += 1 };
  s6 -> s3 [0, 45] { R2363 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2363 += 1 };
  s6 -> s3 [47, 98] { R2363 += 1 };
  s6 -> s7 [99, 99] { R2363 += 1 };
  s6 -> s3 [100, 65535] { R2363 += 1 };
  s7 -> s3 [0, 45] { R2363 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2363 += 1 };
  s7 -> s3 [47, 106] { R2363 += 1 };
  s7 -> s3 [108, 65535] { R2363 += 1 };
  s8 -> s1 [0, 45] { R2363 += 1 };
  s8 -> s2 [46, 46] { R2363 += 1 };
  s8 -> s3 [47, 47] { R2363 += 1 };
  s8 -> s1 [48, 110] { R2363 += 1 };
  s8 -> s9 [111, 111] { R2363 += 1 };
  s8 -> s1 [112, 65535] { R2363 += 1 };
  s9 -> s1 [0, 45] { R2363 += 1 };
  s9 -> s2 [46, 46] { R2363 += 1 };
  s9 -> s3 [47, 47] { R2363 += 1 };
  s9 -> s1 [48, 98] { R2363 += 1 };
  s9 -> s10 [99, 99] { R2363 += 1 };
  s9 -> s1 [100, 65535] { R2363 += 1 };
  s10 -> s1 [0, 45] { R2363 += 1 };
  s10 -> s2 [46, 46] { R2363 += 1 };
  s10 -> s3 [47, 47] { R2363 += 1 };
  s10 -> s1 [48, 106] { R2363 += 1 };
  s10 -> s1 [108, 65535] { R2363 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2365 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R2364 += 1, R2365 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2365 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2367 += 1, R1547 += 1 };
  s0 -> s0 [0, 65535] { R2366 += 1, R2367 += 1 };
  s0 -> s2 [0, 65535] { R2367 += 1, R1546 += 1, R1547 += 1 };
  s0 -> s3 [47, 47] { R2367 += 1 };
  s0 -> s1 [48, 65535] { R2367 += 1, R1547 += 1 };
  s1 -> s1 [0, 46] { R2367 += 1, R1547 += 1 };
  s1 -> s3 [47, 47] { R2367 += 1 };
  s1 -> s1 [48, 65535] { R2367 += 1, R1547 += 1 };
  s2 -> s1 [0, 46] { R2367 += 1, R1547 += 1 };
  s2 -> s2 [0, 65535] { R2367 += 1, R1546 += 1, R1547 += 1 };
  s2 -> s3 [47, 47] { R2367 += 1 };
  s2 -> s1 [48, 65535] { R2367 += 1, R1547 += 1 };
  s3 -> s3 [0, 65535] { R2367 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R2369 += 1, R2331 += 1 };
  s0 -> s0 [0, 65535] { R2368 += 1, R2369 += 1 };
  s0 -> s2 [0, 65535] { R2369 += 1, R2330 += 1, R2331 += 1 };
  s0 -> s1 [38, 42] { R2369 += 1, R2331 += 1 };
  s0 -> s1 [44, 45] { R2369 += 1, R2331 += 1 };
  s0 -> s1 [47, 62] { R2369 += 1, R2331 += 1 };
  s0 -> s1 [64, 65535] { R2369 += 1, R2331 += 1 };
  s1 -> s1 [0, 36] { R2369 += 1, R2331 += 1 };
  s1 -> s1 [0, 65535] { R2369 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R2369 += 1, R2331 += 1 };
  s1 -> s1 [44, 45] { R2369 += 1, R2331 += 1 };
  s1 -> s1 [47, 62] { R2369 += 1, R2331 += 1 };
  s1 -> s1 [64, 65535] { R2369 += 1, R2331 += 1 };
  s2 -> s1 [0, 36] { R2369 += 1, R2331 += 1 };
  s2 -> s2 [0, 65535] { R2369 += 1, R2330 += 1, R2331 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R2369 += 1, R2331 += 1 };
  s2 -> s1 [44, 45] { R2369 += 1, R2331 += 1 };
  s2 -> s1 [47, 62] { R2369 += 1, R2331 += 1 };
  s2 -> s1 [64, 65535] { R2369 += 1, R2331 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R2371 += 1, R2332 += 1, R2333 += 1 };
  s0 -> s0 [0, 65535] { R2370 += 1, R2371 += 1 };
  s0 -> s2 [0, 65535] { R2371 += 1, R2333 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R2371 += 1, R2332 += 1, R2333 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2371 += 1, R2333 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2371 += 1 };
  s2 -> s2 [0, 65535] { R2371 += 1, R2333 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2371 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s0 -> s2 [0, 65535] { R2373 += 1, R2335 += 1, R2316 += 1, R2317 += 1 };
  s0 -> s0 [0, 65535] { R2372 += 1, R2373 += 1 };
  s0 -> s3 [0, 65535] { R2373 += 1, R2334 += 1, R2335 += 1 };
  s0 -> s4 [63, 63] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s0 -> s1 [64, 65535] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s1 -> s1 [0, 65535] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R2373 += 1, R2335 += 1 };
  s1 -> s6 [0, 65535] { R2373 += 1 };
  s2 -> s1 [0, 62] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s2 -> s2 [0, 65535] { R2373 += 1, R2335 += 1, R2316 += 1, R2317 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2373 += 1 };
  s2 -> s4 [63, 63] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s2 -> s1 [64, 65535] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s3 -> s1 [0, 62] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s3 -> s2 [0, 65535] { R2373 += 1, R2335 += 1, R2316 += 1, R2317 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2373 += 1, R2334 += 1, R2335 += 1 };
  s3 -> s4 [63, 63] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s3 -> s1 [64, 65535] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s4 -> s1 [0, 65535] { R2373 += 1, R2335 += 1, R2317 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2373 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R2373 += 1, R2335 += 1 };
  s7 -> s6 [0, 65535] { R2373 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2375 += 1, R2337 += 1, R2319 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2375 += 1, R2336 += 1, R2337 += 1 };
  s0 -> s0 [0, 65535] { R2374 += 1, R2375 += 1 };
  s0 -> s3 [0, 65535] { R2375 += 1, R2337 += 1, R2318 += 1, R2319 += 1 };
  s1 -> s6 [0, 65535] { R2375 += 1, R2337 += 1 };
  s1 -> s1 [0, 65535] { R2375 += 1, R2337 += 1, R2319 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2375 += 1 };
  s2 -> s1 [0, 65535] { R2375 += 1, R2337 += 1, R2319 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2375 += 1, R2336 += 1, R2337 += 1 };
  s2 -> s3 [0, 65535] { R2375 += 1, R2337 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s1 [0, 65535] { R2375 += 1, R2337 += 1, R2319 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2375 += 1, R2337 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s5 [0, 65535] { R2375 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2375 += 1 };
  s6 -> s6 [0, 65535] { R2375 += 1, R2337 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2375 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R2377 += 1, R2341 += 1 };
  s0 -> s0 [0, 65535] { R2376 += 1, R2377 += 1 };
  s0 -> s2 [0, 65535] { R2377 += 1, R2340 += 1, R2341 += 1 };
  s0 -> s1 [45, 63] { R2377 += 1, R2341 += 1 };
  s0 -> s3 [89, 89] { R2377 += 1, R2341 += 1 };
  s0 -> s1 [90, 65535] { R2377 += 1, R2341 += 1 };
  s1 -> s1 [0, 43] { R2377 += 1, R2341 += 1 };
  s1 -> s1 [45, 63] { R2377 += 1, R2341 += 1 };
  s1 -> s3 [89, 89] { R2377 += 1, R2341 += 1 };
  s1 -> s1 [90, 65535] { R2377 += 1, R2341 += 1 };
  s2 -> s1 [0, 43] { R2377 += 1, R2341 += 1 };
  s2 -> s2 [0, 65535] { R2377 += 1, R2340 += 1, R2341 += 1 };
  s2 -> s1 [45, 63] { R2377 += 1, R2341 += 1 };
  s2 -> s3 [89, 89] { R2377 += 1, R2341 += 1 };
  s2 -> s1 [90, 65535] { R2377 += 1, R2341 += 1 };
  s3 -> s3 [0, 43] { R2377 += 1, R2341 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2377 += 1 };
  s3 -> s3 [45, 63] { R2377 += 1, R2341 += 1 };
  s3 -> s3 [89, 65535] { R2377 += 1, R2341 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R2378 += 1, R2379 += 1 };
  s0 -> s1 [0, 65535] { R2379 += 1, R2343 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R2379 += 1, R2342 += 1, R2343 += 1 };
  s1 -> s4 [0, 65535] { R2379 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2379 += 1, R2343 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2379 += 1, R2343 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R2379 += 1, R2342 += 1, R2343 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2379 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R2381 += 1, R2345 += 1 };
  s0 -> s0 [0, 65535] { R2380 += 1, R2381 += 1 };
  s0 -> s2 [0, 65535] { R2381 += 1, R2345 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R2381 += 1, R2344 += 1, R2345 += 1 };
  s0 -> s4 [58, 58] { R2381 += 1, R2345 += 1 };
  s0 -> s1 [59, 65535] { R2381 += 1, R2345 += 1 };
  s1 -> s1 [0, 57] { R2381 += 1, R2345 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2381 += 1 };
  s1 -> s4 [58, 58] { R2381 += 1, R2345 += 1 };
  s1 -> s1 [59, 65535] { R2381 += 1, R2345 += 1 };
  s2 -> s1 [0, 57] { R2381 += 1, R2345 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2381 += 1, R2345 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R2381 += 1 };
  s2 -> s4 [58, 58] { R2381 += 1, R2345 += 1 };
  s2 -> s1 [59, 65535] { R2381 += 1, R2345 += 1 };
  s3 -> s1 [0, 57] { R2381 += 1, R2345 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2381 += 1, R2345 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R2381 += 1, R2344 += 1, R2345 += 1 };
  s3 -> s4 [58, 58] { R2381 += 1, R2345 += 1 };
  s3 -> s1 [59, 65535] { R2381 += 1, R2345 += 1 };
  s4 -> s4 [0, 65535] { R2381 += 1, R2345 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2381 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R2383 += 1, R2347 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R2383 += 1, R2346 += 1, R2347 += 1 };
  s0 -> s0 [0, 65535] { R2382 += 1, R2383 += 1 };
  s0 -> s3 [0, 65535] { R2383 += 1, R2347 += 1, R8 += 1, R9 += 1 };
  s0 -> s4 [89, 89] { R2383 += 1, R2347 += 1 };
  s0 -> s1 [90, 65535] { R2383 += 1, R2347 += 1, R9 += 1 };
  s1 -> s1 [0, 88] { R2383 += 1, R2347 += 1, R9 += 1 };
  s1 -> s4 [89, 89] { R2383 += 1, R2347 += 1 };
  s1 -> s1 [90, 65535] { R2383 += 1, R2347 += 1, R9 += 1 };
  s2 -> s1 [0, 88] { R2383 += 1, R2347 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R2383 += 1, R2346 += 1, R2347 += 1 };
  s2 -> s3 [0, 65535] { R2383 += 1, R2347 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [89, 89] { R2383 += 1, R2347 += 1 };
  s2 -> s1 [90, 65535] { R2383 += 1, R2347 += 1, R9 += 1 };
  s3 -> s1 [0, 88] { R2383 += 1, R2347 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R2383 += 1, R2347 += 1, R8 += 1, R9 += 1 };
  s3 -> s4 [89, 89] { R2383 += 1, R2347 += 1 };
  s3 -> s1 [90, 65535] { R2383 += 1, R2347 += 1, R9 += 1 };
  s4 -> s4 [0, 65535] { R2383 += 1, R2347 += 1 };
  s4 -> s5 [0, 65535] { R2383 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2383 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s0 -> s2 [0, 65535] { R2385 += 1, R2349 += 1, R2320 += 1, R2321 += 1 };
  s0 -> s0 [0, 65535] { R2384 += 1, R2385 += 1 };
  s0 -> s3 [0, 65535] { R2385 += 1, R2348 += 1, R2349 += 1 };
  s0 -> s4 [91, 91] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s0 -> s1 [92, 65535] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s1 -> s1 [0, 65535] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R2385 += 1, R2349 += 1 };
  s1 -> s6 [0, 65535] { R2385 += 1 };
  s2 -> s1 [0, 90] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s2 -> s2 [0, 65535] { R2385 += 1, R2349 += 1, R2320 += 1, R2321 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2385 += 1 };
  s2 -> s4 [91, 91] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s2 -> s1 [92, 65535] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s3 -> s1 [0, 90] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s3 -> s2 [0, 65535] { R2385 += 1, R2349 += 1, R2320 += 1, R2321 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2385 += 1, R2348 += 1, R2349 += 1 };
  s3 -> s4 [91, 91] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s3 -> s1 [92, 65535] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s4 -> s1 [0, 65535] { R2385 += 1, R2349 += 1, R2321 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2385 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R2385 += 1, R2349 += 1 };
  s7 -> s6 [0, 65535] { R2385 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2387 += 1, R2351 += 1, R2322 += 1, R2323 += 1 };
  s0 -> s2 [0, 65535] { R2387 += 1, R2350 += 1, R2351 += 1 };
  s0 -> s0 [0, 65535] { R2386 += 1, R2387 += 1 };
  s0 -> s3 [0, 65535] { R2387 += 1, R2351 += 1, R2323 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R2387 += 1, R2351 += 1, R2322 += 1, R2323 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R2387 += 1, R2351 += 1, R2323 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R2387 += 1 };
  s2 -> s1 [0, 65535] { R2387 += 1, R2351 += 1, R2322 += 1, R2323 += 1 };
  s2 -> s2 [0, 65535] { R2387 += 1, R2350 += 1, R2351 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2387 += 1, R2351 += 1, R2323 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2387 += 1, R2351 += 1, R2323 += 1, R5 += 1 };
  s3 -> s5 [0, 65535] { R2387 += 1 };
  s3 -> s6 [0, 65535] { R2387 += 1, R2351 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2387 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2387 += 1 };
  s6 -> s6 [0, 65535] { R2387 += 1, R2351 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R2389 += 1, R2353 += 1, R2325 += 1 };
  s0 -> s2 [0, 65535] { R2389 += 1, R2353 += 1, R2324 += 1, R2325 += 1 };
  s0 -> s3 [0, 65535] { R2389 += 1, R2352 += 1, R2353 += 1 };
  s0 -> s0 [0, 65535] { R2388 += 1, R2389 += 1 };
  s0 -> s1 [90, 65535] { R2389 += 1, R2353 += 1, R2325 += 1 };
  s1 -> s1 [0, 88] { R2389 += 1, R2353 += 1, R2325 += 1 };
  s1 -> s1 [0, 65535] { R2389 += 1, R2353 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2389 += 1 };
  s1 -> s1 [90, 65535] { R2389 += 1, R2353 += 1, R2325 += 1 };
  s2 -> s1 [0, 88] { R2389 += 1, R2353 += 1, R2325 += 1 };
  s2 -> s2 [0, 65535] { R2389 += 1, R2353 += 1, R2324 += 1, R2325 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2389 += 1 };
  s2 -> s1 [90, 65535] { R2389 += 1, R2353 += 1, R2325 += 1 };
  s3 -> s1 [0, 88] { R2389 += 1, R2353 += 1, R2325 += 1 };
  s3 -> s2 [0, 65535] { R2389 += 1, R2353 += 1, R2324 += 1, R2325 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2389 += 1, R2352 += 1, R2353 += 1 };
  s3 -> s1 [90, 65535] { R2389 += 1, R2353 += 1, R2325 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2389 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2390 += 1, R2391 += 1 };
  s0 -> s1 [0, 65535] { R2391 += 1, R2355 += 1, R2326 += 1, R2327 += 1 };
  s0 -> s2 [0, 65535] { R2391 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s3 [0, 65535] { R2391 += 1, R2355 += 1, R2327 += 1, R2314 += 1 };
  s1 -> s1 [0, 65535] { R2391 += 1, R2355 += 1, R2326 += 1, R2327 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R2391 += 1, R2355 += 1, R2327 += 1, R2314 += 1 };
  s1 -> s5 [0, 65535] { R2391 += 1 };
  s2 -> s1 [0, 65535] { R2391 += 1, R2355 += 1, R2326 += 1, R2327 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2391 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s3 [0, 65535] { R2391 += 1, R2355 += 1, R2327 += 1, R2314 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2391 += 1, R2355 += 1, R2327 += 1, R2314 += 1 };
  s3 -> s5 [0, 65535] { R2391 += 1 };
  s3 -> s6 [0, 65535] { R2391 += 1, R2355 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2391 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2391 += 1 };
  s6 -> s6 [0, 65535] { R2391 += 1, R2355 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2393 += 1, R2357 += 1, R2328 += 1, R2329 += 1 };
  s0 -> s0 [0, 65535] { R2392 += 1, R2393 += 1 };
  s0 -> s2 [0, 65535] { R2393 += 1, R2356 += 1, R2357 += 1 };
  s0 -> s3 [108, 108] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s1 -> s1 [0, 65535] { R2393 += 1, R2357 += 1, R2328 += 1, R2329 += 1 };
  s1 -> s3 [108, 108] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s2 -> s1 [0, 65535] { R2393 += 1, R2357 += 1, R2328 += 1, R2329 += 1 };
  s2 -> s2 [0, 65535] { R2393 += 1, R2356 += 1, R2357 += 1 };
  s2 -> s3 [108, 108] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s3 -> s4 [111, 111] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s4 -> s5 [99, 99] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s5 -> s6 [97, 97] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s6 -> s7 [108, 108] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s7 -> s8 [104, 104] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s8 -> s9 [111, 111] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s9 -> s10 [115, 115] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s10 -> s11 [116, 116] { R2393 += 1, R2357 += 1, R2329 += 1 };
  s11 -> s12 [0, 65535] { R2393 += 1 };
  s11 -> s13 [0, 65535];
  s11 -> s11 [0, 65535] { R2393 += 1, R2357 += 1 };
  s12 -> s12 [0, 65535] { R2393 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  accepting s11, s12, s13;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2395 += 1, R2359 += 1, R2339 += 1, R2315 += 1 };
  s0 -> s0 [0, 65535] { R2394 += 1, R2395 += 1 };
  s0 -> s2 [0, 65535] { R2395 += 1, R2359 += 1, R2338 += 1, R2339 += 1 };
  s0 -> s3 [0, 65535] { R2395 += 1, R2358 += 1, R2359 += 1 };
  s1 -> s1 [0, 65535] { R2395 += 1, R2359 += 1, R2339 += 1, R2315 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2395 += 1 };
  s1 -> s6 [0, 65535] { R2395 += 1, R2359 += 1 };
  s2 -> s1 [0, 65535] { R2395 += 1, R2359 += 1, R2339 += 1, R2315 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2395 += 1 };
  s2 -> s2 [0, 65535] { R2395 += 1, R2359 += 1, R2338 += 1, R2339 += 1 };
  s3 -> s1 [0, 65535] { R2395 += 1, R2359 += 1, R2339 += 1, R2315 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2395 += 1, R2359 += 1, R2338 += 1, R2339 += 1 };
  s3 -> s3 [0, 65535] { R2395 += 1, R2358 += 1, R2359 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2395 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2395 += 1 };
  s6 -> s6 [0, 65535] { R2395 += 1, R2359 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2397 += 1, R2360 += 1, R2361 += 1 };
  s0 -> s0 [0, 65535] { R2396 += 1, R2397 += 1 };
  s0 -> s2 [0, 65535] { R2397 += 1, R2361 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2397 += 1, R2360 += 1, R2361 += 1 };
  s1 -> s2 [0, 65535] { R2397 += 1, R2361 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2397 += 1 };
  s2 -> s2 [0, 65535] { R2397 += 1, R2361 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2397 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R2329 && R2 = R2337 && R3 = R2397 && R8 = 0 && R9 = -1 && R1546 = 0 && R1547 = R2361 && R2320 = 0 && R2321 = 1 && R2322 = 0 && R2323 = 1 && R2324 = 0 && R2325 = R2329 && R2326 = 0 && R2327 = R2329 && R2328 = 0 && R2330 - R2361 = 1 && R2331 = R2337 && R2332 - R2361 = 1 && R2333 = R2337 && R2334 - R2361 = 1 && R2335 = R2337 && R2336 - R2361 = 1 && R2340 = 0 && R2341 = R2361 && R2342 = 0 && R2343 = R2361 && R2344 = 0 && R2345 = R2361 && R2346 = 0 && R2347 = R2361 && R2348 = 0 && R2349 = R2361 && R2350 = 0 && R2351 = R2361 && R2352 = 0 && R2353 = R2361 && R2354 = 0 && R2355 = R2361 && R2356 = 0 && R2357 = R2361 && R2358 = 0 && R2359 = R2361 && R2360 = 0 && R2362 = 10 && R2363 = R2397 && R2364 = 10 && R2365 = R2397 && R2366 = 10 && R2367 = R2397 && R2368 = 10 && R2369 = R2397 && R2370 = 10 && R2371 = R2397 && R2372 = 10 && R2373 = R2397 && R2374 = 10 && R2375 = R2397 && R2376 = 10 && R2377 = R2397 && R2378 = 10 && R2379 = R2397 && R2380 = 10 && R2381 = R2397 && R2382 = 10 && R2383 = R2397 && R2384 = 10 && R2385 = R2397 && R2386 = 10 && R2387 = R2397 && R2388 = 10 && R2389 = R2397 && R2390 = 10 && R2391 = R2397 && R2392 = 10 && R2393 = R2397 && R2394 = 10 && R2395 = R2397 && R2396 = 10 && R0 != 0 && R6 < 1 && 0 < R2329 && R2361 < R2337 && -1 < R2361 && 9 < R2397 && (R2316 != 0 || ((R4 != 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R0 = R2317 || R2317 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R2317 != 1 || -1 < R0) && (R0 = R2317 || R2317 = 1))))) && (R2318 != 0 || ((R4 != 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R0 = R2319 || R2319 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R2319 != 1 || -1 < R0) && (R0 = R2319 || R2319 = 1))))) && (R2315 = 0 || (R2338 = 0 && R2339 = 0)) && (R2316 = 0 || (R4 = 0 && R0 < 0)) && (R2318 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
