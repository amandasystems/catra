// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1546, R1547, R2, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2398, R2399, R2400, R2401, R2402, R2403, R2404, R2405, R2406, R2407, R2408, R2409, R2410, R2411, R2412, R2413, R2414, R2415, R2416, R2417, R2418, R2419, R2420, R2421, R2422, R2423, R2424, R2425, R2426, R2427, R2428, R2429, R2430, R2431, R2432, R2433, R2434, R2435, R2436, R2437, R2438, R2439, R2440, R2441, R2442, R2443, R2444, R2445, R2446, R2447, R2448, R2449, R2450, R2451, R2452, R2453, R2454, R2455, R2456, R2457, R2458, R2459, R2460, R2461, R2462, R2463, R2464, R2465, R2466, R2467, R2468, R2469, R2470, R2471, R2472, R2473, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2439 += 1 };
  s0 -> s0 [0, 65535] { R2438 += 1, R2439 += 1 };
  s0 -> s2 [46, 46] { R2439 += 1 };
  s0 -> s3 [47, 47] { R2439 += 1 };
  s0 -> s1 [48, 65535] { R2439 += 1 };
  s1 -> s1 [0, 45] { R2439 += 1 };
  s1 -> s2 [46, 46] { R2439 += 1 };
  s1 -> s3 [47, 47] { R2439 += 1 };
  s1 -> s1 [48, 65535] { R2439 += 1 };
  s2 -> s1 [0, 45] { R2439 += 1 };
  s2 -> s2 [46, 46] { R2439 += 1 };
  s2 -> s3 [47, 47] { R2439 += 1 };
  s2 -> s1 [48, 114] { R2439 += 1 };
  s2 -> s8 [115, 115] { R2439 += 1 };
  s2 -> s1 [116, 65535] { R2439 += 1 };
  s3 -> s3 [0, 45] { R2439 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2439 += 1 };
  s3 -> s3 [47, 65535] { R2439 += 1 };
  s4 -> s3 [0, 45] { R2439 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2439 += 1 };
  s4 -> s3 [47, 114] { R2439 += 1 };
  s4 -> s5 [115, 115] { R2439 += 1 };
  s4 -> s3 [116, 65535] { R2439 += 1 };
  s5 -> s3 [0, 45] { R2439 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2439 += 1 };
  s5 -> s3 [47, 110] { R2439 += 1 };
  s5 -> s6 [111, 111] { R2439 += 1 };
  s5 -> s3 [112, 65535] { R2439 += 1 };
  s6 -> s3 [0, 45] { R2439 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2439 += 1 };
  s6 -> s3 [47, 98] { R2439 += 1 };
  s6 -> s7 [99, 99] { R2439 += 1 };
  s6 -> s3 [100, 65535] { R2439 += 1 };
  s7 -> s3 [0, 45] { R2439 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2439 += 1 };
  s7 -> s3 [47, 106] { R2439 += 1 };
  s7 -> s3 [108, 65535] { R2439 += 1 };
  s8 -> s1 [0, 45] { R2439 += 1 };
  s8 -> s2 [46, 46] { R2439 += 1 };
  s8 -> s3 [47, 47] { R2439 += 1 };
  s8 -> s1 [48, 110] { R2439 += 1 };
  s8 -> s9 [111, 111] { R2439 += 1 };
  s8 -> s1 [112, 65535] { R2439 += 1 };
  s9 -> s1 [0, 45] { R2439 += 1 };
  s9 -> s2 [46, 46] { R2439 += 1 };
  s9 -> s3 [47, 47] { R2439 += 1 };
  s9 -> s1 [48, 98] { R2439 += 1 };
  s9 -> s10 [99, 99] { R2439 += 1 };
  s9 -> s1 [100, 65535] { R2439 += 1 };
  s10 -> s1 [0, 45] { R2439 += 1 };
  s10 -> s2 [46, 46] { R2439 += 1 };
  s10 -> s3 [47, 47] { R2439 += 1 };
  s10 -> s1 [48, 106] { R2439 += 1 };
  s10 -> s1 [108, 65535] { R2439 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2440 += 1, R2441 += 1 };
  s0 -> s1 [0, 65535] { R2441 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R2441 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2443 += 1, R1547 += 1 };
  s0 -> s0 [0, 65535] { R2442 += 1, R2443 += 1 };
  s0 -> s2 [0, 65535] { R2443 += 1, R1546 += 1, R1547 += 1 };
  s0 -> s3 [47, 47] { R2443 += 1 };
  s0 -> s1 [48, 65535] { R2443 += 1, R1547 += 1 };
  s1 -> s1 [0, 46] { R2443 += 1, R1547 += 1 };
  s1 -> s3 [47, 47] { R2443 += 1 };
  s1 -> s1 [48, 65535] { R2443 += 1, R1547 += 1 };
  s2 -> s1 [0, 46] { R2443 += 1, R1547 += 1 };
  s2 -> s2 [0, 65535] { R2443 += 1, R1546 += 1, R1547 += 1 };
  s2 -> s3 [47, 47] { R2443 += 1 };
  s2 -> s1 [48, 65535] { R2443 += 1, R1547 += 1 };
  s3 -> s3 [0, 65535] { R2443 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R2445 += 1, R2405 += 1 };
  s0 -> s2 [0, 65535] { R2445 += 1, R2404 += 1, R2405 += 1 };
  s0 -> s0 [0, 65535] { R2444 += 1, R2445 += 1 };
  s0 -> s1 [38, 42] { R2445 += 1, R2405 += 1 };
  s0 -> s1 [44, 45] { R2445 += 1, R2405 += 1 };
  s0 -> s1 [47, 62] { R2445 += 1, R2405 += 1 };
  s0 -> s1 [64, 65535] { R2445 += 1, R2405 += 1 };
  s1 -> s1 [0, 36] { R2445 += 1, R2405 += 1 };
  s1 -> s1 [0, 65535] { R2445 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R2445 += 1, R2405 += 1 };
  s1 -> s1 [44, 45] { R2445 += 1, R2405 += 1 };
  s1 -> s1 [47, 62] { R2445 += 1, R2405 += 1 };
  s1 -> s1 [64, 65535] { R2445 += 1, R2405 += 1 };
  s2 -> s1 [0, 36] { R2445 += 1, R2405 += 1 };
  s2 -> s2 [0, 65535] { R2445 += 1, R2404 += 1, R2405 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R2445 += 1, R2405 += 1 };
  s2 -> s1 [44, 45] { R2445 += 1, R2405 += 1 };
  s2 -> s1 [47, 62] { R2445 += 1, R2405 += 1 };
  s2 -> s1 [64, 65535] { R2445 += 1, R2405 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R2446 += 1, R2447 += 1 };
  s0 -> s1 [0, 65535] { R2447 += 1, R2406 += 1, R2407 += 1 };
  s0 -> s2 [0, 65535] { R2447 += 1, R2407 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2447 += 1, R2406 += 1, R2407 += 1 };
  s1 -> s2 [0, 65535] { R2447 += 1, R2407 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2447 += 1 };
  s2 -> s2 [0, 65535] { R2447 += 1, R2407 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2447 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s0 -> s0 [0, 65535] { R2448 += 1, R2449 += 1 };
  s0 -> s2 [0, 65535] { R2449 += 1, R2409 += 1, R2316 += 1, R2317 += 1 };
  s0 -> s3 [0, 65535] { R2449 += 1, R2408 += 1, R2409 += 1 };
  s0 -> s4 [63, 63] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s0 -> s1 [64, 65535] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s1 -> s7 [0, 65535] { R2449 += 1, R2409 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2449 += 1 };
  s1 -> s1 [0, 65535] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s2 -> s1 [0, 62] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2449 += 1, R2409 += 1, R2316 += 1, R2317 += 1 };
  s2 -> s6 [0, 65535] { R2449 += 1 };
  s2 -> s4 [63, 63] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s2 -> s1 [64, 65535] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s3 -> s1 [0, 62] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2449 += 1, R2409 += 1, R2316 += 1, R2317 += 1 };
  s3 -> s3 [0, 65535] { R2449 += 1, R2408 += 1, R2409 += 1 };
  s3 -> s4 [63, 63] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s3 -> s1 [64, 65535] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s4 -> s1 [0, 65535] { R2449 += 1, R2409 += 1, R2317 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2449 += 1 };
  s7 -> s7 [0, 65535] { R2449 += 1, R2409 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2449 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2451 += 1, R2411 += 1, R2319 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2451 += 1, R2411 += 1, R2318 += 1, R2319 += 1 };
  s0 -> s3 [0, 65535] { R2451 += 1, R2410 += 1, R2411 += 1 };
  s0 -> s0 [0, 65535] { R2450 += 1, R2451 += 1 };
  s1 -> s6 [0, 65535] { R2451 += 1, R2411 += 1 };
  s1 -> s1 [0, 65535] { R2451 += 1, R2411 += 1, R2319 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2451 += 1 };
  s2 -> s1 [0, 65535] { R2451 += 1, R2411 += 1, R2319 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2451 += 1, R2411 += 1, R2318 += 1, R2319 += 1 };
  s2 -> s5 [0, 65535] { R2451 += 1 };
  s3 -> s1 [0, 65535] { R2451 += 1, R2411 += 1, R2319 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2451 += 1, R2411 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s3 [0, 65535] { R2451 += 1, R2410 += 1, R2411 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2451 += 1 };
  s6 -> s6 [0, 65535] { R2451 += 1, R2411 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2451 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R2453 += 1, R2417 += 1 };
  s0 -> s0 [0, 65535] { R2452 += 1, R2453 += 1 };
  s0 -> s2 [0, 65535] { R2453 += 1, R2416 += 1, R2417 += 1 };
  s0 -> s1 [45, 63] { R2453 += 1, R2417 += 1 };
  s0 -> s3 [89, 89] { R2453 += 1, R2417 += 1 };
  s0 -> s1 [90, 65535] { R2453 += 1, R2417 += 1 };
  s1 -> s1 [0, 43] { R2453 += 1, R2417 += 1 };
  s1 -> s1 [45, 63] { R2453 += 1, R2417 += 1 };
  s1 -> s3 [89, 89] { R2453 += 1, R2417 += 1 };
  s1 -> s1 [90, 65535] { R2453 += 1, R2417 += 1 };
  s2 -> s1 [0, 43] { R2453 += 1, R2417 += 1 };
  s2 -> s2 [0, 65535] { R2453 += 1, R2416 += 1, R2417 += 1 };
  s2 -> s1 [45, 63] { R2453 += 1, R2417 += 1 };
  s2 -> s3 [89, 89] { R2453 += 1, R2417 += 1 };
  s2 -> s1 [90, 65535] { R2453 += 1, R2417 += 1 };
  s3 -> s3 [0, 43] { R2453 += 1, R2417 += 1 };
  s3 -> s3 [0, 65535] { R2453 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R2453 += 1, R2417 += 1 };
  s3 -> s3 [89, 65535] { R2453 += 1, R2417 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R2454 += 1, R2455 += 1 };
  s0 -> s1 [0, 65535] { R2455 += 1, R2418 += 1, R2419 += 1 };
  s0 -> s2 [0, 65535] { R2455 += 1, R2419 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2455 += 1, R2418 += 1, R2419 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2455 += 1, R2419 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2455 += 1 };
  s2 -> s2 [0, 65535] { R2455 += 1, R2419 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2455 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R2457 += 1, R2421 += 1 };
  s0 -> s0 [0, 65535] { R2456 += 1, R2457 += 1 };
  s0 -> s2 [0, 65535] { R2457 += 1, R2421 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R2457 += 1, R2420 += 1, R2421 += 1 };
  s0 -> s4 [58, 58] { R2457 += 1, R2421 += 1 };
  s0 -> s1 [59, 65535] { R2457 += 1, R2421 += 1 };
  s1 -> s1 [0, 57] { R2457 += 1, R2421 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2457 += 1 };
  s1 -> s4 [58, 58] { R2457 += 1, R2421 += 1 };
  s1 -> s1 [59, 65535] { R2457 += 1, R2421 += 1 };
  s2 -> s1 [0, 57] { R2457 += 1, R2421 += 1 };
  s2 -> s6 [0, 65535] { R2457 += 1 };
  s2 -> s2 [0, 65535] { R2457 += 1, R2421 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R2457 += 1, R2421 += 1 };
  s2 -> s1 [59, 65535] { R2457 += 1, R2421 += 1 };
  s3 -> s1 [0, 57] { R2457 += 1, R2421 += 1 };
  s3 -> s2 [0, 65535] { R2457 += 1, R2421 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2457 += 1, R2420 += 1, R2421 += 1 };
  s3 -> s4 [58, 58] { R2457 += 1, R2421 += 1 };
  s3 -> s1 [59, 65535] { R2457 += 1, R2421 += 1 };
  s4 -> s4 [0, 65535] { R2457 += 1, R2421 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2457 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R2459 += 1, R2423 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R2458 += 1, R2459 += 1 };
  s0 -> s2 [0, 65535] { R2459 += 1, R2423 += 1, R8 += 1, R9 += 1 };
  s0 -> s3 [0, 65535] { R2459 += 1, R2422 += 1, R2423 += 1 };
  s0 -> s4 [89, 89] { R2459 += 1, R2423 += 1 };
  s0 -> s1 [90, 65535] { R2459 += 1, R2423 += 1, R9 += 1 };
  s1 -> s1 [0, 88] { R2459 += 1, R2423 += 1, R9 += 1 };
  s1 -> s4 [89, 89] { R2459 += 1, R2423 += 1 };
  s1 -> s1 [90, 65535] { R2459 += 1, R2423 += 1, R9 += 1 };
  s2 -> s1 [0, 88] { R2459 += 1, R2423 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R2459 += 1, R2423 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [89, 89] { R2459 += 1, R2423 += 1 };
  s2 -> s1 [90, 65535] { R2459 += 1, R2423 += 1, R9 += 1 };
  s3 -> s1 [0, 88] { R2459 += 1, R2423 += 1, R9 += 1 };
  s3 -> s2 [0, 65535] { R2459 += 1, R2423 += 1, R8 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R2459 += 1, R2422 += 1, R2423 += 1 };
  s3 -> s4 [89, 89] { R2459 += 1, R2423 += 1 };
  s3 -> s1 [90, 65535] { R2459 += 1, R2423 += 1, R9 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2459 += 1 };
  s4 -> s4 [0, 65535] { R2459 += 1, R2423 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2459 += 1 };
  s6 -> s5 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s0 -> s2 [0, 65535] { R2461 += 1, R2424 += 1, R2425 += 1 };
  s0 -> s0 [0, 65535] { R2460 += 1, R2461 += 1 };
  s0 -> s3 [0, 65535] { R2461 += 1, R2425 += 1, R2320 += 1, R2321 += 1 };
  s0 -> s4 [91, 91] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s0 -> s1 [92, 65535] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s1 -> s5 [0, 65535] { R2461 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R2461 += 1, R2425 += 1 };
  s1 -> s1 [0, 65535] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s2 -> s1 [0, 90] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s2 -> s2 [0, 65535] { R2461 += 1, R2424 += 1, R2425 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2461 += 1, R2425 += 1, R2320 += 1, R2321 += 1 };
  s2 -> s4 [91, 91] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s2 -> s1 [92, 65535] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s3 -> s1 [0, 90] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s3 -> s5 [0, 65535] { R2461 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2461 += 1, R2425 += 1, R2320 += 1, R2321 += 1 };
  s3 -> s4 [91, 91] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s3 -> s1 [92, 65535] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s4 -> s1 [0, 65535] { R2461 += 1, R2425 += 1, R2321 += 1 };
  s5 -> s5 [0, 65535] { R2461 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R2461 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2461 += 1, R2425 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2463 += 1, R2427 += 1, R2323 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R2463 += 1, R2426 += 1, R2427 += 1 };
  s0 -> s3 [0, 65535] { R2463 += 1, R2427 += 1, R2322 += 1, R2323 += 1 };
  s0 -> s0 [0, 65535] { R2462 += 1, R2463 += 1 };
  s1 -> s1 [0, 65535] { R2463 += 1, R2427 += 1, R2323 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R2463 += 1 };
  s1 -> s6 [0, 65535] { R2463 += 1, R2427 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2463 += 1, R2427 += 1, R2323 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R2463 += 1, R2426 += 1, R2427 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2463 += 1, R2427 += 1, R2322 += 1, R2323 += 1 };
  s3 -> s1 [0, 65535] { R2463 += 1, R2427 += 1, R2323 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R2463 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2463 += 1, R2427 += 1, R2322 += 1, R2323 += 1 };
  s4 -> s4 [0, 65535] { R2463 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2463 += 1 };
  s6 -> s6 [0, 65535] { R2463 += 1, R2427 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R2465 += 1, R2429 += 1, R2399 += 1 };
  s0 -> s0 [0, 65535] { R2464 += 1, R2465 += 1 };
  s0 -> s2 [0, 65535] { R2465 += 1, R2429 += 1, R2398 += 1, R2399 += 1 };
  s0 -> s3 [0, 65535] { R2465 += 1, R2428 += 1, R2429 += 1 };
  s0 -> s1 [90, 65535] { R2465 += 1, R2429 += 1, R2399 += 1 };
  s1 -> s1 [0, 88] { R2465 += 1, R2429 += 1, R2399 += 1 };
  s1 -> s5 [0, 65535] { R2465 += 1 };
  s1 -> s1 [0, 65535] { R2465 += 1, R2429 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [90, 65535] { R2465 += 1, R2429 += 1, R2399 += 1 };
  s2 -> s1 [0, 88] { R2465 += 1, R2429 += 1, R2399 += 1 };
  s2 -> s5 [0, 65535] { R2465 += 1 };
  s2 -> s2 [0, 65535] { R2465 += 1, R2429 += 1, R2398 += 1, R2399 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [90, 65535] { R2465 += 1, R2429 += 1, R2399 += 1 };
  s3 -> s1 [0, 88] { R2465 += 1, R2429 += 1, R2399 += 1 };
  s3 -> s2 [0, 65535] { R2465 += 1, R2429 += 1, R2398 += 1, R2399 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2465 += 1, R2428 += 1, R2429 += 1 };
  s3 -> s1 [90, 65535] { R2465 += 1, R2429 += 1, R2399 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2465 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2467 += 1, R2430 += 1, R2431 += 1 };
  s0 -> s0 [0, 65535] { R2466 += 1, R2467 += 1 };
  s0 -> s2 [0, 65535] { R2467 += 1, R2431 += 1, R2400 += 1, R2401 += 1 };
  s0 -> s3 [0, 65535] { R2467 += 1, R2431 += 1, R2401 += 1, R2314 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2467 += 1, R2430 += 1, R2431 += 1 };
  s1 -> s2 [0, 65535] { R2467 += 1, R2431 += 1, R2400 += 1, R2401 += 1 };
  s1 -> s3 [0, 65535] { R2467 += 1, R2431 += 1, R2401 += 1, R2314 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2467 += 1, R2431 += 1, R2400 += 1, R2401 += 1 };
  s2 -> s3 [0, 65535] { R2467 += 1, R2431 += 1, R2401 += 1, R2314 += 1 };
  s2 -> s6 [0, 65535] { R2467 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2467 += 1, R2431 += 1 };
  s3 -> s3 [0, 65535] { R2467 += 1, R2431 += 1, R2401 += 1, R2314 += 1 };
  s3 -> s6 [0, 65535] { R2467 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2467 += 1, R2431 += 1 };
  s5 -> s6 [0, 65535] { R2467 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2467 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R2468 += 1, R2469 += 1 };
  s0 -> s1 [0, 65535] { R2469 += 1, R2433 += 1, R2402 += 1, R2403 += 1 };
  s0 -> s2 [0, 65535] { R2469 += 1, R2432 += 1, R2433 += 1 };
  s0 -> s3 [111, 111] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s1 -> s1 [0, 65535] { R2469 += 1, R2433 += 1, R2402 += 1, R2403 += 1 };
  s1 -> s3 [111, 111] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s2 -> s1 [0, 65535] { R2469 += 1, R2433 += 1, R2402 += 1, R2403 += 1 };
  s2 -> s2 [0, 65535] { R2469 += 1, R2432 += 1, R2433 += 1 };
  s2 -> s3 [111, 111] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s3 -> s4 [99, 99] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s4 -> s5 [97, 97] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s5 -> s6 [108, 108] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s6 -> s7 [104, 104] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s7 -> s8 [111, 111] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s8 -> s9 [115, 115] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s9 -> s10 [116, 116] { R2469 += 1, R2433 += 1, R2403 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s12 [0, 65535] { R2469 += 1 };
  s10 -> s10 [0, 65535] { R2469 += 1, R2433 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R2469 += 1 };
  accepting s10, s11, s12;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2471 += 1, R2435 += 1, R2413 += 1, R2315 += 1 };
  s0 -> s0 [0, 65535] { R2470 += 1, R2471 += 1 };
  s0 -> s2 [0, 65535] { R2471 += 1, R2434 += 1, R2435 += 1 };
  s0 -> s3 [0, 65535] { R2471 += 1, R2435 += 1, R2412 += 1, R2413 += 1 };
  s1 -> s1 [0, 65535] { R2471 += 1, R2435 += 1, R2413 += 1, R2315 += 1 };
  s1 -> s4 [0, 65535] { R2471 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2471 += 1, R2435 += 1 };
  s2 -> s1 [0, 65535] { R2471 += 1, R2435 += 1, R2413 += 1, R2315 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2471 += 1, R2434 += 1, R2435 += 1 };
  s2 -> s3 [0, 65535] { R2471 += 1, R2435 += 1, R2412 += 1, R2413 += 1 };
  s3 -> s1 [0, 65535] { R2471 += 1, R2435 += 1, R2413 += 1, R2315 += 1 };
  s3 -> s4 [0, 65535] { R2471 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2471 += 1, R2435 += 1, R2412 += 1, R2413 += 1 };
  s4 -> s4 [0, 65535] { R2471 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2471 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2471 += 1, R2435 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R2472 += 1, R2473 += 1 };
  s0 -> s1 [0, 65535] { R2473 += 1, R2436 += 1, R2437 += 1 };
  s0 -> s2 [0, 65535] { R2473 += 1, R2437 += 1, R2414 += 1, R2415 += 1 };
  s0 -> s3 [108, 108] { R2473 += 1, R2437 += 1, R2415 += 1 };
  s1 -> s1 [0, 65535] { R2473 += 1, R2436 += 1, R2437 += 1 };
  s1 -> s2 [0, 65535] { R2473 += 1, R2437 += 1, R2414 += 1, R2415 += 1 };
  s1 -> s3 [108, 108] { R2473 += 1, R2437 += 1, R2415 += 1 };
  s2 -> s2 [0, 65535] { R2473 += 1, R2437 += 1, R2414 += 1, R2415 += 1 };
  s2 -> s3 [108, 108] { R2473 += 1, R2437 += 1, R2415 += 1 };
  s3 -> s3 [0, 65535] { R2473 += 1, R2437 += 1 };
  s3 -> s4 [0, 65535] { R2473 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2473 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
};
constraint R1 = R2403 && R2 = R2411 && R3 = R2473 && R8 = 0 && R9 - R2415 = -1 && R1546 = 0 && R1547 = R2437 && R2320 = 0 && R2321 = 1 && R2322 = 0 && R2323 = 1 && R2402 = R2415 && R2404 - R2437 = 1 && R2405 = R2411 && R2406 - R2437 = 1 && R2407 = R2411 && R2408 - R2437 = 1 && R2409 = R2411 && R2410 - R2437 = 1 && R2414 = 0 && R2416 = 0 && R2417 = R2437 && R2418 = 0 && R2419 = R2437 && R2420 = 0 && R2421 = R2437 && R2422 = 0 && R2423 = R2437 && R2424 = 0 && R2425 = R2437 && R2426 = 0 && R2427 = R2437 && R2428 = 0 && R2429 = R2437 && R2430 = 0 && R2431 = R2437 && R2432 = 0 && R2433 = R2437 && R2434 = 0 && R2435 = R2437 && R2436 = 0 && R2438 = 10 && R2439 = R2473 && R2440 = 10 && R2441 = R2473 && R2442 = 10 && R2443 = R2473 && R2444 = 10 && R2445 = R2473 && R2446 = 10 && R2447 = R2473 && R2448 = 10 && R2449 = R2473 && R2450 = 10 && R2451 = R2473 && R2452 = 10 && R2453 = R2473 && R2454 = 10 && R2455 = R2473 && R2456 = 10 && R2457 = R2473 && R2458 = 10 && R2459 = R2473 && R2460 = 10 && R2461 = R2473 && R2462 = 10 && R2463 = R2473 && R2464 = 10 && R2465 = R2473 && R2466 = 10 && R2467 = R2473 && R2468 = 10 && R2469 = R2473 && R2470 = 10 && R2471 = R2473 && R2472 = 10 && R0 != 0 && R6 < 1 && R2415 - R2403 < 1 && 0 < R2403 && R2437 < R2411 && -1 < R2415 && -1 < R2437 && 9 < R2473 && (R2316 != 0 || ((R4 != 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R0 = R2317 || R2317 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R2317 != 1 || -1 < R0) && (R0 = R2317 || R2317 = 1))))) && (R2318 != 0 || ((R4 != 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R0 = R2319 || R2319 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R2319 != 1 || -1 < R0) && (R0 = R2319 || R2319 = 1))))) && (R2398 != R2415 || R2399 = R2403 || (R2314 = 0 && R2403 = R2415)) && (R2400 != R2415 || R2401 = R2403 || (R2314 = 0 && R2403 = R2415)) && (R2412 != 0 || R2413 = R2415 || (R2315 = 0 && R2415 = 0)) && (R2316 = 0 || (R4 = 0 && R0 < 0)) && (R2318 = 0 || (R4 = 0 && R0 < 0)) && (R2398 = R2415 || (R2314 = 0 && R2403 = R2415)) && (R2400 = R2415 || (R2314 = 0 && R2403 = R2415)) && (R2412 = 0 || (R2315 = 0 && R2415 = 0));
// End of Parikh automata intersection problem
