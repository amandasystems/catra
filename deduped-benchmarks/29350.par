// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1546, R1547, R2, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2550, R2551, R2552, R2553, R2554, R2555, R2556, R2557, R2558, R2559, R2560, R2561, R2562, R2563, R2564, R2565, R2566, R2567, R2568, R2569, R2570, R2571, R2572, R2573, R2574, R2575, R2576, R2577, R2578, R2579, R2580, R2581, R2582, R2583, R2584, R2585, R2586, R2587, R2588, R2589, R2590, R2591, R2592, R2593, R2594, R2595, R2596, R2597, R2598, R2599, R2600, R2601, R2602, R2603, R2604, R2605, R2606, R2607, R2608, R2609, R2610, R2611, R2612, R2613, R2614, R2615, R2616, R2617, R2618, R2619, R2620, R2621, R2622, R2623, R2624, R2625, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2591 += 1 };
  s0 -> s0 [0, 65535] { R2590 += 1, R2591 += 1 };
  s0 -> s2 [46, 46] { R2591 += 1 };
  s0 -> s3 [47, 47] { R2591 += 1 };
  s0 -> s1 [48, 65535] { R2591 += 1 };
  s1 -> s1 [0, 45] { R2591 += 1 };
  s1 -> s2 [46, 46] { R2591 += 1 };
  s1 -> s3 [47, 47] { R2591 += 1 };
  s1 -> s1 [48, 65535] { R2591 += 1 };
  s2 -> s1 [0, 45] { R2591 += 1 };
  s2 -> s2 [46, 46] { R2591 += 1 };
  s2 -> s3 [47, 47] { R2591 += 1 };
  s2 -> s1 [48, 114] { R2591 += 1 };
  s2 -> s8 [115, 115] { R2591 += 1 };
  s2 -> s1 [116, 65535] { R2591 += 1 };
  s3 -> s3 [0, 45] { R2591 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2591 += 1 };
  s3 -> s3 [47, 65535] { R2591 += 1 };
  s4 -> s3 [0, 45] { R2591 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2591 += 1 };
  s4 -> s3 [47, 114] { R2591 += 1 };
  s4 -> s5 [115, 115] { R2591 += 1 };
  s4 -> s3 [116, 65535] { R2591 += 1 };
  s5 -> s3 [0, 45] { R2591 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2591 += 1 };
  s5 -> s3 [47, 110] { R2591 += 1 };
  s5 -> s6 [111, 111] { R2591 += 1 };
  s5 -> s3 [112, 65535] { R2591 += 1 };
  s6 -> s3 [0, 45] { R2591 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2591 += 1 };
  s6 -> s3 [47, 98] { R2591 += 1 };
  s6 -> s7 [99, 99] { R2591 += 1 };
  s6 -> s3 [100, 65535] { R2591 += 1 };
  s7 -> s3 [0, 45] { R2591 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2591 += 1 };
  s7 -> s3 [47, 106] { R2591 += 1 };
  s7 -> s3 [108, 65535] { R2591 += 1 };
  s8 -> s1 [0, 45] { R2591 += 1 };
  s8 -> s2 [46, 46] { R2591 += 1 };
  s8 -> s3 [47, 47] { R2591 += 1 };
  s8 -> s1 [48, 110] { R2591 += 1 };
  s8 -> s9 [111, 111] { R2591 += 1 };
  s8 -> s1 [112, 65535] { R2591 += 1 };
  s9 -> s1 [0, 45] { R2591 += 1 };
  s9 -> s2 [46, 46] { R2591 += 1 };
  s9 -> s3 [47, 47] { R2591 += 1 };
  s9 -> s1 [48, 98] { R2591 += 1 };
  s9 -> s10 [99, 99] { R2591 += 1 };
  s9 -> s1 [100, 65535] { R2591 += 1 };
  s10 -> s1 [0, 45] { R2591 += 1 };
  s10 -> s2 [46, 46] { R2591 += 1 };
  s10 -> s3 [47, 47] { R2591 += 1 };
  s10 -> s1 [48, 106] { R2591 += 1 };
  s10 -> s1 [108, 65535] { R2591 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2592 += 1, R2593 += 1 };
  s0 -> s1 [0, 65535] { R2593 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2593 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2595 += 1, R1547 += 1 };
  s0 -> s0 [0, 65535] { R2594 += 1, R2595 += 1 };
  s0 -> s2 [0, 65535] { R2595 += 1, R1546 += 1, R1547 += 1 };
  s0 -> s3 [47, 47] { R2595 += 1 };
  s0 -> s1 [48, 65535] { R2595 += 1, R1547 += 1 };
  s1 -> s1 [0, 46] { R2595 += 1, R1547 += 1 };
  s1 -> s3 [47, 47] { R2595 += 1 };
  s1 -> s1 [48, 65535] { R2595 += 1, R1547 += 1 };
  s2 -> s1 [0, 46] { R2595 += 1, R1547 += 1 };
  s2 -> s2 [0, 65535] { R2595 += 1, R1546 += 1, R1547 += 1 };
  s2 -> s3 [47, 47] { R2595 += 1 };
  s2 -> s1 [48, 65535] { R2595 += 1, R1547 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2595 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R2597 += 1, R2557 += 1 };
  s0 -> s0 [0, 65535] { R2596 += 1, R2597 += 1 };
  s0 -> s2 [0, 65535] { R2597 += 1, R2556 += 1, R2557 += 1 };
  s0 -> s1 [38, 42] { R2597 += 1, R2557 += 1 };
  s0 -> s1 [44, 45] { R2597 += 1, R2557 += 1 };
  s0 -> s1 [47, 62] { R2597 += 1, R2557 += 1 };
  s0 -> s1 [64, 65535] { R2597 += 1, R2557 += 1 };
  s1 -> s1 [0, 36] { R2597 += 1, R2557 += 1 };
  s1 -> s1 [0, 65535] { R2597 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R2597 += 1, R2557 += 1 };
  s1 -> s1 [44, 45] { R2597 += 1, R2557 += 1 };
  s1 -> s1 [47, 62] { R2597 += 1, R2557 += 1 };
  s1 -> s1 [64, 65535] { R2597 += 1, R2557 += 1 };
  s2 -> s1 [0, 36] { R2597 += 1, R2557 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2597 += 1, R2556 += 1, R2557 += 1 };
  s2 -> s1 [38, 42] { R2597 += 1, R2557 += 1 };
  s2 -> s1 [44, 45] { R2597 += 1, R2557 += 1 };
  s2 -> s1 [47, 62] { R2597 += 1, R2557 += 1 };
  s2 -> s1 [64, 65535] { R2597 += 1, R2557 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R2599 += 1, R2558 += 1, R2559 += 1 };
  s0 -> s0 [0, 65535] { R2598 += 1, R2599 += 1 };
  s0 -> s2 [0, 65535] { R2599 += 1, R2559 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2599 += 1, R2558 += 1, R2559 += 1 };
  s1 -> s2 [0, 65535] { R2599 += 1, R2559 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2599 += 1 };
  s2 -> s2 [0, 65535] { R2599 += 1, R2559 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2599 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s0 -> s0 [0, 65535] { R2600 += 1, R2601 += 1 };
  s0 -> s2 [0, 65535] { R2601 += 1, R2560 += 1, R2561 += 1 };
  s0 -> s3 [0, 65535] { R2601 += 1, R2561 += 1, R2316 += 1, R2317 += 1 };
  s0 -> s4 [63, 63] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s0 -> s1 [64, 65535] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s1 -> s1 [0, 65535] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2601 += 1 };
  s1 -> s7 [0, 65535] { R2601 += 1, R2561 += 1 };
  s2 -> s1 [0, 62] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2601 += 1, R2560 += 1, R2561 += 1 };
  s2 -> s3 [0, 65535] { R2601 += 1, R2561 += 1, R2316 += 1, R2317 += 1 };
  s2 -> s4 [63, 63] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s2 -> s1 [64, 65535] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s3 -> s1 [0, 62] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2601 += 1 };
  s3 -> s3 [0, 65535] { R2601 += 1, R2561 += 1, R2316 += 1, R2317 += 1 };
  s3 -> s4 [63, 63] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s3 -> s1 [64, 65535] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s4 -> s1 [0, 65535] { R2601 += 1, R2561 += 1, R2317 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2601 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2601 += 1 };
  s7 -> s7 [0, 65535] { R2601 += 1, R2561 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R2602 += 1, R2603 += 1 };
  s0 -> s1 [0, 65535] { R2603 += 1, R2563 += 1, R2319 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2603 += 1, R2562 += 1, R2563 += 1 };
  s0 -> s3 [0, 65535] { R2603 += 1, R2563 += 1, R2318 += 1, R2319 += 1 };
  s1 -> s4 [0, 65535] { R2603 += 1 };
  s1 -> s1 [0, 65535] { R2603 += 1, R2563 += 1, R2319 += 1, R4 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2603 += 1, R2563 += 1 };
  s2 -> s1 [0, 65535] { R2603 += 1, R2563 += 1, R2319 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2603 += 1, R2562 += 1, R2563 += 1 };
  s2 -> s3 [0, 65535] { R2603 += 1, R2563 += 1, R2318 += 1, R2319 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R2603 += 1 };
  s3 -> s1 [0, 65535] { R2603 += 1, R2563 += 1, R2319 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R2603 += 1, R2563 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2603 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2603 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2603 += 1, R2563 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R2605 += 1, R2569 += 1 };
  s0 -> s2 [0, 65535] { R2605 += 1, R2568 += 1, R2569 += 1 };
  s0 -> s0 [0, 65535] { R2604 += 1, R2605 += 1 };
  s0 -> s1 [45, 63] { R2605 += 1, R2569 += 1 };
  s0 -> s3 [89, 89] { R2605 += 1, R2569 += 1 };
  s0 -> s1 [90, 65535] { R2605 += 1, R2569 += 1 };
  s1 -> s1 [0, 43] { R2605 += 1, R2569 += 1 };
  s1 -> s1 [45, 63] { R2605 += 1, R2569 += 1 };
  s1 -> s3 [89, 89] { R2605 += 1, R2569 += 1 };
  s1 -> s1 [90, 65535] { R2605 += 1, R2569 += 1 };
  s2 -> s1 [0, 43] { R2605 += 1, R2569 += 1 };
  s2 -> s2 [0, 65535] { R2605 += 1, R2568 += 1, R2569 += 1 };
  s2 -> s1 [45, 63] { R2605 += 1, R2569 += 1 };
  s2 -> s3 [89, 89] { R2605 += 1, R2569 += 1 };
  s2 -> s1 [90, 65535] { R2605 += 1, R2569 += 1 };
  s3 -> s3 [0, 43] { R2605 += 1, R2569 += 1 };
  s3 -> s3 [0, 65535] { R2605 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R2605 += 1, R2569 += 1 };
  s3 -> s3 [89, 65535] { R2605 += 1, R2569 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R2606 += 1, R2607 += 1 };
  s0 -> s1 [0, 65535] { R2607 += 1, R2571 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R2607 += 1, R2570 += 1, R2571 += 1 };
  s1 -> s4 [0, 65535] { R2607 += 1 };
  s1 -> s1 [0, 65535] { R2607 += 1, R2571 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2607 += 1, R2571 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R2607 += 1, R2570 += 1, R2571 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2607 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R2609 += 1, R2573 += 1 };
  s0 -> s0 [0, 65535] { R2608 += 1, R2609 += 1 };
  s0 -> s2 [0, 65535] { R2609 += 1, R2573 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R2609 += 1, R2572 += 1, R2573 += 1 };
  s0 -> s4 [58, 58] { R2609 += 1, R2573 += 1 };
  s0 -> s1 [59, 65535] { R2609 += 1, R2573 += 1 };
  s1 -> s1 [0, 57] { R2609 += 1, R2573 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2609 += 1 };
  s1 -> s4 [58, 58] { R2609 += 1, R2573 += 1 };
  s1 -> s1 [59, 65535] { R2609 += 1, R2573 += 1 };
  s2 -> s1 [0, 57] { R2609 += 1, R2573 += 1 };
  s2 -> s2 [0, 65535] { R2609 += 1, R2573 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2609 += 1 };
  s2 -> s4 [58, 58] { R2609 += 1, R2573 += 1 };
  s2 -> s1 [59, 65535] { R2609 += 1, R2573 += 1 };
  s3 -> s1 [0, 57] { R2609 += 1, R2573 += 1 };
  s3 -> s2 [0, 65535] { R2609 += 1, R2573 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R2609 += 1, R2572 += 1, R2573 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R2609 += 1, R2573 += 1 };
  s3 -> s1 [59, 65535] { R2609 += 1, R2573 += 1 };
  s4 -> s4 [0, 65535] { R2609 += 1, R2573 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2609 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R2611 += 1, R2575 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R2611 += 1, R2574 += 1, R2575 += 1 };
  s0 -> s0 [0, 65535] { R2610 += 1, R2611 += 1 };
  s0 -> s3 [0, 65535] { R2611 += 1, R2575 += 1, R8 += 1, R9 += 1 };
  s0 -> s4 [89, 89] { R2611 += 1, R2575 += 1 };
  s0 -> s1 [90, 65535] { R2611 += 1, R2575 += 1, R9 += 1 };
  s1 -> s1 [0, 88] { R2611 += 1, R2575 += 1, R9 += 1 };
  s1 -> s4 [89, 89] { R2611 += 1, R2575 += 1 };
  s1 -> s1 [90, 65535] { R2611 += 1, R2575 += 1, R9 += 1 };
  s2 -> s1 [0, 88] { R2611 += 1, R2575 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R2611 += 1, R2574 += 1, R2575 += 1 };
  s2 -> s3 [0, 65535] { R2611 += 1, R2575 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [89, 89] { R2611 += 1, R2575 += 1 };
  s2 -> s1 [90, 65535] { R2611 += 1, R2575 += 1, R9 += 1 };
  s3 -> s1 [0, 88] { R2611 += 1, R2575 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R2611 += 1, R2575 += 1, R8 += 1, R9 += 1 };
  s3 -> s4 [89, 89] { R2611 += 1, R2575 += 1 };
  s3 -> s1 [90, 65535] { R2611 += 1, R2575 += 1, R9 += 1 };
  s4 -> s5 [0, 65535] { R2611 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2611 += 1, R2575 += 1 };
  s5 -> s5 [0, 65535] { R2611 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s0 -> s0 [0, 65535] { R2612 += 1, R2613 += 1 };
  s0 -> s2 [0, 65535] { R2613 += 1, R2577 += 1, R2320 += 1, R2321 += 1 };
  s0 -> s3 [0, 65535] { R2613 += 1, R2576 += 1, R2577 += 1 };
  s0 -> s4 [91, 91] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s0 -> s1 [92, 65535] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s1 -> s7 [0, 65535] { R2613 += 1, R2577 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2613 += 1 };
  s1 -> s1 [0, 65535] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s2 -> s1 [0, 90] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s2 -> s2 [0, 65535] { R2613 += 1, R2577 += 1, R2320 += 1, R2321 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2613 += 1 };
  s2 -> s4 [91, 91] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s2 -> s1 [92, 65535] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s3 -> s1 [0, 90] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s3 -> s2 [0, 65535] { R2613 += 1, R2577 += 1, R2320 += 1, R2321 += 1 };
  s3 -> s3 [0, 65535] { R2613 += 1, R2576 += 1, R2577 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s3 -> s1 [92, 65535] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s4 -> s1 [0, 65535] { R2613 += 1, R2577 += 1, R2321 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2613 += 1 };
  s7 -> s7 [0, 65535] { R2613 += 1, R2577 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2613 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2614 += 1, R2615 += 1 };
  s0 -> s1 [0, 65535] { R2615 += 1, R2578 += 1, R2579 += 1 };
  s0 -> s2 [0, 65535] { R2615 += 1, R2579 += 1, R2323 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R2615 += 1, R2579 += 1, R2322 += 1, R2323 += 1 };
  s1 -> s1 [0, 65535] { R2615 += 1, R2578 += 1, R2579 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R2615 += 1, R2579 += 1, R2323 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R2615 += 1, R2579 += 1, R2322 += 1, R2323 += 1 };
  s2 -> s6 [0, 65535] { R2615 += 1, R2579 += 1 };
  s2 -> s4 [0, 65535] { R2615 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2615 += 1, R2579 += 1, R2323 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R2615 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2615 += 1, R2579 += 1, R2323 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R2615 += 1, R2579 += 1, R2322 += 1, R2323 += 1 };
  s4 -> s4 [0, 65535] { R2615 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2615 += 1, R2579 += 1 };
  s6 -> s4 [0, 65535] { R2615 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R2617 += 1, R2581 += 1, R2551 += 1 };
  s0 -> s2 [0, 65535] { R2617 += 1, R2581 += 1, R2550 += 1, R2551 += 1 };
  s0 -> s0 [0, 65535] { R2616 += 1, R2617 += 1 };
  s0 -> s3 [0, 65535] { R2617 += 1, R2580 += 1, R2581 += 1 };
  s0 -> s1 [90, 65535] { R2617 += 1, R2581 += 1, R2551 += 1 };
  s1 -> s1 [0, 88] { R2617 += 1, R2581 += 1, R2551 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2617 += 1, R2581 += 1 };
  s1 -> s5 [0, 65535] { R2617 += 1 };
  s1 -> s1 [90, 65535] { R2617 += 1, R2581 += 1, R2551 += 1 };
  s2 -> s1 [0, 88] { R2617 += 1, R2581 += 1, R2551 += 1 };
  s2 -> s2 [0, 65535] { R2617 += 1, R2581 += 1, R2550 += 1, R2551 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2617 += 1 };
  s2 -> s1 [90, 65535] { R2617 += 1, R2581 += 1, R2551 += 1 };
  s3 -> s1 [0, 88] { R2617 += 1, R2581 += 1, R2551 += 1 };
  s3 -> s2 [0, 65535] { R2617 += 1, R2581 += 1, R2550 += 1, R2551 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2617 += 1, R2580 += 1, R2581 += 1 };
  s3 -> s1 [90, 65535] { R2617 += 1, R2581 += 1, R2551 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2617 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2619 += 1, R2583 += 1, R2552 += 1, R2553 += 1 };
  s0 -> s0 [0, 65535] { R2618 += 1, R2619 += 1 };
  s0 -> s2 [0, 65535] { R2619 += 1, R2583 += 1, R2553 += 1, R2314 += 1 };
  s0 -> s3 [0, 65535] { R2619 += 1, R2582 += 1, R2583 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2619 += 1, R2583 += 1, R2552 += 1, R2553 += 1 };
  s1 -> s5 [0, 65535] { R2619 += 1 };
  s1 -> s2 [0, 65535] { R2619 += 1, R2583 += 1, R2553 += 1, R2314 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2619 += 1 };
  s2 -> s2 [0, 65535] { R2619 += 1, R2583 += 1, R2553 += 1, R2314 += 1 };
  s2 -> s6 [0, 65535] { R2619 += 1, R2583 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2619 += 1, R2583 += 1, R2552 += 1, R2553 += 1 };
  s3 -> s2 [0, 65535] { R2619 += 1, R2583 += 1, R2553 += 1, R2314 += 1 };
  s3 -> s3 [0, 65535] { R2619 += 1, R2582 += 1, R2583 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2619 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2619 += 1 };
  s6 -> s6 [0, 65535] { R2619 += 1, R2583 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2621 += 1, R2585 += 1, R2554 += 1, R2555 += 1 };
  s0 -> s2 [0, 65535] { R2621 += 1, R2584 += 1, R2585 += 1 };
  s0 -> s0 [0, 65535] { R2620 += 1, R2621 += 1 };
  s0 -> s3 [97, 97] { R2621 += 1, R2585 += 1, R2555 += 1 };
  s1 -> s1 [0, 65535] { R2621 += 1, R2585 += 1, R2554 += 1, R2555 += 1 };
  s1 -> s3 [97, 97] { R2621 += 1, R2585 += 1, R2555 += 1 };
  s2 -> s1 [0, 65535] { R2621 += 1, R2585 += 1, R2554 += 1, R2555 += 1 };
  s2 -> s2 [0, 65535] { R2621 += 1, R2584 += 1, R2585 += 1 };
  s2 -> s3 [97, 97] { R2621 += 1, R2585 += 1, R2555 += 1 };
  s3 -> s4 [108, 108] { R2621 += 1, R2585 += 1, R2555 += 1 };
  s4 -> s5 [104, 104] { R2621 += 1, R2585 += 1, R2555 += 1 };
  s5 -> s6 [111, 111] { R2621 += 1, R2585 += 1, R2555 += 1 };
  s6 -> s7 [115, 115] { R2621 += 1, R2585 += 1, R2555 += 1 };
  s7 -> s8 [116, 116] { R2621 += 1, R2585 += 1, R2555 += 1 };
  s8 -> s8 [0, 65535] { R2621 += 1, R2585 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R2621 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2621 += 1 };
  accepting s8, s9, s10;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2623 += 1, R2587 += 1, R2565 += 1, R2315 += 1 };
  s0 -> s2 [0, 65535] { R2623 += 1, R2587 += 1, R2564 += 1, R2565 += 1 };
  s0 -> s0 [0, 65535] { R2622 += 1, R2623 += 1 };
  s0 -> s3 [0, 65535] { R2623 += 1, R2586 += 1, R2587 += 1 };
  s1 -> s1 [0, 65535] { R2623 += 1, R2587 += 1, R2565 += 1, R2315 += 1 };
  s1 -> s5 [0, 65535] { R2623 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R2623 += 1, R2587 += 1 };
  s2 -> s1 [0, 65535] { R2623 += 1, R2587 += 1, R2565 += 1, R2315 += 1 };
  s2 -> s2 [0, 65535] { R2623 += 1, R2587 += 1, R2564 += 1, R2565 += 1 };
  s2 -> s5 [0, 65535] { R2623 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2623 += 1, R2587 += 1, R2565 += 1, R2315 += 1 };
  s3 -> s2 [0, 65535] { R2623 += 1, R2587 += 1, R2564 += 1, R2565 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2623 += 1, R2586 += 1, R2587 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2623 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2623 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2623 += 1, R2587 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2625 += 1, R2588 += 1, R2589 += 1 };
  s0 -> s2 [0, 65535] { R2625 += 1, R2589 += 1, R2566 += 1, R2567 += 1 };
  s0 -> s0 [0, 65535] { R2624 += 1, R2625 += 1 };
  s0 -> s3 [108, 108] { R2625 += 1, R2589 += 1, R2567 += 1 };
  s1 -> s1 [0, 65535] { R2625 += 1, R2588 += 1, R2589 += 1 };
  s1 -> s2 [0, 65535] { R2625 += 1, R2589 += 1, R2566 += 1, R2567 += 1 };
  s1 -> s3 [108, 108] { R2625 += 1, R2589 += 1, R2567 += 1 };
  s2 -> s2 [0, 65535] { R2625 += 1, R2589 += 1, R2566 += 1, R2567 += 1 };
  s2 -> s3 [108, 108] { R2625 += 1, R2589 += 1, R2567 += 1 };
  s3 -> s4 [111, 111] { R2625 += 1, R2589 += 1, R2567 += 1 };
  s4 -> s5 [99, 99] { R2625 += 1, R2589 += 1, R2567 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R2625 += 1 };
  s5 -> s5 [0, 65535] { R2625 += 1, R2589 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2625 += 1 };
  accepting s5, s6, s7;
};
};
constraint R1 = R2555 && R2 = R2563 && R3 = R2625 && R8 = 0 && R9 - R2567 = -1 && R1546 = 0 && R1547 = R2589 && R2320 = 0 && R2321 = 1 && R2322 = 0 && R2323 = 1 && R2554 = R2567 && R2556 - R2589 = 1 && R2557 = R2563 && R2558 - R2589 = 1 && R2559 = R2563 && R2560 - R2589 = 1 && R2561 = R2563 && R2562 - R2589 = 1 && R2566 = 0 && R2568 = 0 && R2569 = R2589 && R2570 = 0 && R2571 = R2589 && R2572 = 0 && R2573 = R2589 && R2574 = 0 && R2575 = R2589 && R2576 = 0 && R2577 = R2589 && R2578 = 0 && R2579 = R2589 && R2580 = 0 && R2581 = R2589 && R2582 = 0 && R2583 = R2589 && R2584 = 0 && R2585 = R2589 && R2586 = 0 && R2587 = R2589 && R2588 = 0 && R2590 = 10 && R2591 = R2625 && R2592 = 10 && R2593 = R2625 && R2594 = 10 && R2595 = R2625 && R2596 = 10 && R2597 = R2625 && R2598 = 10 && R2599 = R2625 && R2600 = 10 && R2601 = R2625 && R2602 = 10 && R2603 = R2625 && R2604 = 10 && R2605 = R2625 && R2606 = 10 && R2607 = R2625 && R2608 = 10 && R2609 = R2625 && R2610 = 10 && R2611 = R2625 && R2612 = 10 && R2613 = R2625 && R2614 = 10 && R2615 = R2625 && R2616 = 10 && R2617 = R2625 && R2618 = 10 && R2619 = R2625 && R2620 = 10 && R2621 = R2625 && R2622 = 10 && R2623 = R2625 && R2624 = 10 && R0 != 0 && R6 < 1 && R2567 - R2555 < 1 && 0 < R2555 && R2589 < R2563 && -1 < R2567 && -1 < R2589 && 9 < R2625 && (R2316 != 0 || ((R4 != 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R0 = R2317 || R2317 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R2317 != 1 || -1 < R0) && (R0 = R2317 || R2317 = 1))))) && (R2318 != 0 || ((R4 != 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R0 = R2319 || R2319 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R2319 != 1 || -1 < R0) && (R0 = R2319 || R2319 = 1))))) && (R2550 != R2567 || R2551 = R2555 || (R2314 = 0 && R2555 = R2567)) && (R2552 != R2567 || R2553 = R2555 || (R2314 = 0 && R2555 = R2567)) && (R2564 != 0 || R2565 = R2567 || (R2315 = 0 && R2567 = 0)) && (R2316 = 0 || (R4 = 0 && R0 < 0)) && (R2318 = 0 || (R4 = 0 && R0 < 0)) && (R2550 = R2567 || (R2314 = 0 && R2555 = R2567)) && (R2552 = R2567 || (R2314 = 0 && R2555 = R2567)) && (R2564 = 0 || (R2315 = 0 && R2567 = 0));
// End of Parikh automata intersection problem
