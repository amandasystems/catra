// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1546, R1547, R2, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2474, R2475, R2476, R2477, R2478, R2479, R2480, R2481, R2482, R2483, R2484, R2485, R2486, R2487, R2488, R2489, R2490, R2491, R2492, R2493, R2494, R2495, R2496, R2497, R2498, R2499, R2500, R2501, R2502, R2503, R2504, R2505, R2506, R2507, R2508, R2509, R2510, R2511, R2512, R2513, R2514, R2515, R2516, R2517, R2518, R2519, R2520, R2521, R2522, R2523, R2524, R2525, R2526, R2527, R2528, R2529, R2530, R2531, R2532, R2533, R2534, R2535, R2536, R2537, R2538, R2539, R2540, R2541, R2542, R2543, R2544, R2545, R2546, R2547, R2548, R2549, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2515 += 1 };
  s0 -> s0 [0, 65535] { R2514 += 1, R2515 += 1 };
  s0 -> s2 [46, 46] { R2515 += 1 };
  s0 -> s3 [47, 47] { R2515 += 1 };
  s0 -> s1 [48, 65535] { R2515 += 1 };
  s1 -> s1 [0, 45] { R2515 += 1 };
  s1 -> s2 [46, 46] { R2515 += 1 };
  s1 -> s3 [47, 47] { R2515 += 1 };
  s1 -> s1 [48, 65535] { R2515 += 1 };
  s2 -> s1 [0, 45] { R2515 += 1 };
  s2 -> s2 [46, 46] { R2515 += 1 };
  s2 -> s3 [47, 47] { R2515 += 1 };
  s2 -> s1 [48, 114] { R2515 += 1 };
  s2 -> s8 [115, 115] { R2515 += 1 };
  s2 -> s1 [116, 65535] { R2515 += 1 };
  s3 -> s3 [0, 45] { R2515 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2515 += 1 };
  s3 -> s3 [47, 65535] { R2515 += 1 };
  s4 -> s3 [0, 45] { R2515 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2515 += 1 };
  s4 -> s3 [47, 114] { R2515 += 1 };
  s4 -> s5 [115, 115] { R2515 += 1 };
  s4 -> s3 [116, 65535] { R2515 += 1 };
  s5 -> s3 [0, 45] { R2515 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2515 += 1 };
  s5 -> s3 [47, 110] { R2515 += 1 };
  s5 -> s6 [111, 111] { R2515 += 1 };
  s5 -> s3 [112, 65535] { R2515 += 1 };
  s6 -> s3 [0, 45] { R2515 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2515 += 1 };
  s6 -> s3 [47, 98] { R2515 += 1 };
  s6 -> s7 [99, 99] { R2515 += 1 };
  s6 -> s3 [100, 65535] { R2515 += 1 };
  s7 -> s3 [0, 45] { R2515 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2515 += 1 };
  s7 -> s3 [47, 106] { R2515 += 1 };
  s7 -> s3 [108, 65535] { R2515 += 1 };
  s8 -> s1 [0, 45] { R2515 += 1 };
  s8 -> s2 [46, 46] { R2515 += 1 };
  s8 -> s3 [47, 47] { R2515 += 1 };
  s8 -> s1 [48, 110] { R2515 += 1 };
  s8 -> s9 [111, 111] { R2515 += 1 };
  s8 -> s1 [112, 65535] { R2515 += 1 };
  s9 -> s1 [0, 45] { R2515 += 1 };
  s9 -> s2 [46, 46] { R2515 += 1 };
  s9 -> s3 [47, 47] { R2515 += 1 };
  s9 -> s1 [48, 98] { R2515 += 1 };
  s9 -> s10 [99, 99] { R2515 += 1 };
  s9 -> s1 [100, 65535] { R2515 += 1 };
  s10 -> s1 [0, 45] { R2515 += 1 };
  s10 -> s2 [46, 46] { R2515 += 1 };
  s10 -> s3 [47, 47] { R2515 += 1 };
  s10 -> s1 [48, 106] { R2515 += 1 };
  s10 -> s1 [108, 65535] { R2515 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2517 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R2516 += 1, R2517 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2517 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2519 += 1, R1547 += 1 };
  s0 -> s0 [0, 65535] { R2518 += 1, R2519 += 1 };
  s0 -> s2 [0, 65535] { R2519 += 1, R1546 += 1, R1547 += 1 };
  s0 -> s3 [47, 47] { R2519 += 1 };
  s0 -> s1 [48, 65535] { R2519 += 1, R1547 += 1 };
  s1 -> s1 [0, 46] { R2519 += 1, R1547 += 1 };
  s1 -> s3 [47, 47] { R2519 += 1 };
  s1 -> s1 [48, 65535] { R2519 += 1, R1547 += 1 };
  s2 -> s1 [0, 46] { R2519 += 1, R1547 += 1 };
  s2 -> s2 [0, 65535] { R2519 += 1, R1546 += 1, R1547 += 1 };
  s2 -> s3 [47, 47] { R2519 += 1 };
  s2 -> s1 [48, 65535] { R2519 += 1, R1547 += 1 };
  s3 -> s3 [0, 65535] { R2519 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R2521 += 1, R2481 += 1 };
  s0 -> s0 [0, 65535] { R2520 += 1, R2521 += 1 };
  s0 -> s2 [0, 65535] { R2521 += 1, R2480 += 1, R2481 += 1 };
  s0 -> s1 [38, 42] { R2521 += 1, R2481 += 1 };
  s0 -> s1 [44, 45] { R2521 += 1, R2481 += 1 };
  s0 -> s1 [47, 62] { R2521 += 1, R2481 += 1 };
  s0 -> s1 [64, 65535] { R2521 += 1, R2481 += 1 };
  s1 -> s1 [0, 36] { R2521 += 1, R2481 += 1 };
  s1 -> s1 [0, 65535] { R2521 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R2521 += 1, R2481 += 1 };
  s1 -> s1 [44, 45] { R2521 += 1, R2481 += 1 };
  s1 -> s1 [47, 62] { R2521 += 1, R2481 += 1 };
  s1 -> s1 [64, 65535] { R2521 += 1, R2481 += 1 };
  s2 -> s1 [0, 36] { R2521 += 1, R2481 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2521 += 1, R2480 += 1, R2481 += 1 };
  s2 -> s1 [38, 42] { R2521 += 1, R2481 += 1 };
  s2 -> s1 [44, 45] { R2521 += 1, R2481 += 1 };
  s2 -> s1 [47, 62] { R2521 += 1, R2481 += 1 };
  s2 -> s1 [64, 65535] { R2521 += 1, R2481 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R2523 += 1, R2483 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R2523 += 1, R2482 += 1, R2483 += 1 };
  s0 -> s0 [0, 65535] { R2522 += 1, R2523 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2523 += 1, R2483 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R2523 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2523 += 1, R2483 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R2523 += 1, R2482 += 1, R2483 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2523 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s0 -> s2 [0, 65535] { R2525 += 1, R2484 += 1, R2485 += 1 };
  s0 -> s0 [0, 65535] { R2524 += 1, R2525 += 1 };
  s0 -> s3 [0, 65535] { R2525 += 1, R2485 += 1, R2316 += 1, R2317 += 1 };
  s0 -> s4 [63, 63] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s0 -> s1 [64, 65535] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s1 -> s7 [0, 65535] { R2525 += 1, R2485 += 1 };
  s1 -> s5 [0, 65535] { R2525 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s2 -> s1 [0, 62] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2525 += 1, R2484 += 1, R2485 += 1 };
  s2 -> s3 [0, 65535] { R2525 += 1, R2485 += 1, R2316 += 1, R2317 += 1 };
  s2 -> s4 [63, 63] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s2 -> s1 [64, 65535] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s3 -> s1 [0, 62] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s3 -> s5 [0, 65535] { R2525 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2525 += 1, R2485 += 1, R2316 += 1, R2317 += 1 };
  s3 -> s4 [63, 63] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s3 -> s1 [64, 65535] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s4 -> s1 [0, 65535] { R2525 += 1, R2485 += 1, R2317 += 1 };
  s5 -> s5 [0, 65535] { R2525 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2525 += 1, R2485 += 1 };
  s7 -> s5 [0, 65535] { R2525 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2527 += 1, R2487 += 1, R2319 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2527 += 1, R2486 += 1, R2487 += 1 };
  s0 -> s3 [0, 65535] { R2527 += 1, R2487 += 1, R2318 += 1, R2319 += 1 };
  s0 -> s0 [0, 65535] { R2526 += 1, R2527 += 1 };
  s1 -> s6 [0, 65535] { R2527 += 1, R2487 += 1 };
  s1 -> s4 [0, 65535] { R2527 += 1 };
  s1 -> s1 [0, 65535] { R2527 += 1, R2487 += 1, R2319 += 1, R4 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2527 += 1, R2487 += 1, R2319 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2527 += 1, R2486 += 1, R2487 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2527 += 1, R2487 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s4 [0, 65535] { R2527 += 1 };
  s3 -> s1 [0, 65535] { R2527 += 1, R2487 += 1, R2319 += 1, R4 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2527 += 1, R2487 += 1, R2318 += 1, R2319 += 1 };
  s4 -> s4 [0, 65535] { R2527 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2527 += 1, R2487 += 1 };
  s6 -> s4 [0, 65535] { R2527 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R2529 += 1, R2493 += 1 };
  s0 -> s0 [0, 65535] { R2528 += 1, R2529 += 1 };
  s0 -> s2 [0, 65535] { R2529 += 1, R2492 += 1, R2493 += 1 };
  s0 -> s1 [45, 63] { R2529 += 1, R2493 += 1 };
  s0 -> s3 [89, 89] { R2529 += 1, R2493 += 1 };
  s0 -> s1 [90, 65535] { R2529 += 1, R2493 += 1 };
  s1 -> s1 [0, 43] { R2529 += 1, R2493 += 1 };
  s1 -> s1 [45, 63] { R2529 += 1, R2493 += 1 };
  s1 -> s3 [89, 89] { R2529 += 1, R2493 += 1 };
  s1 -> s1 [90, 65535] { R2529 += 1, R2493 += 1 };
  s2 -> s1 [0, 43] { R2529 += 1, R2493 += 1 };
  s2 -> s2 [0, 65535] { R2529 += 1, R2492 += 1, R2493 += 1 };
  s2 -> s1 [45, 63] { R2529 += 1, R2493 += 1 };
  s2 -> s3 [89, 89] { R2529 += 1, R2493 += 1 };
  s2 -> s1 [90, 65535] { R2529 += 1, R2493 += 1 };
  s3 -> s3 [0, 43] { R2529 += 1, R2493 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2529 += 1 };
  s3 -> s3 [45, 63] { R2529 += 1, R2493 += 1 };
  s3 -> s3 [89, 65535] { R2529 += 1, R2493 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R2531 += 1, R2495 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2530 += 1, R2531 += 1 };
  s0 -> s2 [0, 65535] { R2531 += 1, R2494 += 1, R2495 += 1 };
  s1 -> s1 [0, 65535] { R2531 += 1, R2495 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R2531 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2531 += 1, R2495 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R2531 += 1, R2494 += 1, R2495 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2531 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R2533 += 1, R2497 += 1 };
  s0 -> s2 [0, 65535] { R2533 += 1, R2496 += 1, R2497 += 1 };
  s0 -> s0 [0, 65535] { R2532 += 1, R2533 += 1 };
  s0 -> s3 [0, 65535] { R2533 += 1, R2497 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R2533 += 1, R2497 += 1 };
  s0 -> s1 [59, 65535] { R2533 += 1, R2497 += 1 };
  s1 -> s1 [0, 57] { R2533 += 1, R2497 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2533 += 1 };
  s1 -> s4 [58, 58] { R2533 += 1, R2497 += 1 };
  s1 -> s1 [59, 65535] { R2533 += 1, R2497 += 1 };
  s2 -> s1 [0, 57] { R2533 += 1, R2497 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2533 += 1, R2496 += 1, R2497 += 1 };
  s2 -> s3 [0, 65535] { R2533 += 1, R2497 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R2533 += 1, R2497 += 1 };
  s2 -> s1 [59, 65535] { R2533 += 1, R2497 += 1 };
  s3 -> s1 [0, 57] { R2533 += 1, R2497 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2533 += 1, R2497 += 1, R6 += 1 };
  s3 -> s6 [0, 65535] { R2533 += 1 };
  s3 -> s4 [58, 58] { R2533 += 1, R2497 += 1 };
  s3 -> s1 [59, 65535] { R2533 += 1, R2497 += 1 };
  s4 -> s4 [0, 65535] { R2533 += 1, R2497 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2533 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R2535 += 1, R2499 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R2535 += 1, R2498 += 1, R2499 += 1 };
  s0 -> s0 [0, 65535] { R2534 += 1, R2535 += 1 };
  s0 -> s3 [0, 65535] { R2535 += 1, R2499 += 1, R8 += 1, R9 += 1 };
  s0 -> s4 [89, 89] { R2535 += 1, R2499 += 1 };
  s0 -> s1 [90, 65535] { R2535 += 1, R2499 += 1, R9 += 1 };
  s1 -> s1 [0, 88] { R2535 += 1, R2499 += 1, R9 += 1 };
  s1 -> s4 [89, 89] { R2535 += 1, R2499 += 1 };
  s1 -> s1 [90, 65535] { R2535 += 1, R2499 += 1, R9 += 1 };
  s2 -> s1 [0, 88] { R2535 += 1, R2499 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R2535 += 1, R2498 += 1, R2499 += 1 };
  s2 -> s3 [0, 65535] { R2535 += 1, R2499 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [89, 89] { R2535 += 1, R2499 += 1 };
  s2 -> s1 [90, 65535] { R2535 += 1, R2499 += 1, R9 += 1 };
  s3 -> s1 [0, 88] { R2535 += 1, R2499 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R2535 += 1, R2499 += 1, R8 += 1, R9 += 1 };
  s3 -> s4 [89, 89] { R2535 += 1, R2499 += 1 };
  s3 -> s1 [90, 65535] { R2535 += 1, R2499 += 1, R9 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2535 += 1 };
  s4 -> s4 [0, 65535] { R2535 += 1, R2499 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2535 += 1 };
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s0 -> s2 [0, 65535] { R2537 += 1, R2501 += 1, R2320 += 1, R2321 += 1 };
  s0 -> s3 [0, 65535] { R2537 += 1, R2500 += 1, R2501 += 1 };
  s0 -> s0 [0, 65535] { R2536 += 1, R2537 += 1 };
  s0 -> s4 [91, 91] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s0 -> s1 [92, 65535] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s1 -> s6 [0, 65535] { R2537 += 1 };
  s1 -> s7 [0, 65535] { R2537 += 1, R2501 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s2 -> s1 [0, 90] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s2 -> s2 [0, 65535] { R2537 += 1, R2501 += 1, R2320 += 1, R2321 += 1 };
  s2 -> s6 [0, 65535] { R2537 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s2 -> s1 [92, 65535] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s3 -> s1 [0, 90] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s3 -> s2 [0, 65535] { R2537 += 1, R2501 += 1, R2320 += 1, R2321 += 1 };
  s3 -> s3 [0, 65535] { R2537 += 1, R2500 += 1, R2501 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s3 -> s1 [92, 65535] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s4 -> s1 [0, 65535] { R2537 += 1, R2501 += 1, R2321 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2537 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2537 += 1 };
  s7 -> s7 [0, 65535] { R2537 += 1, R2501 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2539 += 1, R2502 += 1, R2503 += 1 };
  s0 -> s2 [0, 65535] { R2539 += 1, R2503 += 1, R2323 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2538 += 1, R2539 += 1 };
  s0 -> s3 [0, 65535] { R2539 += 1, R2503 += 1, R2322 += 1, R2323 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2539 += 1, R2502 += 1, R2503 += 1 };
  s1 -> s2 [0, 65535] { R2539 += 1, R2503 += 1, R2323 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R2539 += 1, R2503 += 1, R2322 += 1, R2323 += 1 };
  s2 -> s6 [0, 65535] { R2539 += 1, R2503 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2539 += 1 };
  s2 -> s2 [0, 65535] { R2539 += 1, R2503 += 1, R2323 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2539 += 1 };
  s3 -> s2 [0, 65535] { R2539 += 1, R2503 += 1, R2323 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R2539 += 1, R2503 += 1, R2322 += 1, R2323 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2539 += 1 };
  s6 -> s6 [0, 65535] { R2539 += 1, R2503 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2539 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R2541 += 1, R2505 += 1, R2475 += 1 };
  s0 -> s2 [0, 65535] { R2541 += 1, R2505 += 1, R2474 += 1, R2475 += 1 };
  s0 -> s3 [0, 65535] { R2541 += 1, R2504 += 1, R2505 += 1 };
  s0 -> s0 [0, 65535] { R2540 += 1, R2541 += 1 };
  s0 -> s1 [90, 65535] { R2541 += 1, R2505 += 1, R2475 += 1 };
  s1 -> s1 [0, 88] { R2541 += 1, R2505 += 1, R2475 += 1 };
  s1 -> s1 [0, 65535] { R2541 += 1, R2505 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2541 += 1 };
  s1 -> s1 [90, 65535] { R2541 += 1, R2505 += 1, R2475 += 1 };
  s2 -> s1 [0, 88] { R2541 += 1, R2505 += 1, R2475 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2541 += 1, R2505 += 1, R2474 += 1, R2475 += 1 };
  s2 -> s5 [0, 65535] { R2541 += 1 };
  s2 -> s1 [90, 65535] { R2541 += 1, R2505 += 1, R2475 += 1 };
  s3 -> s1 [0, 88] { R2541 += 1, R2505 += 1, R2475 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2541 += 1, R2505 += 1, R2474 += 1, R2475 += 1 };
  s3 -> s3 [0, 65535] { R2541 += 1, R2504 += 1, R2505 += 1 };
  s3 -> s1 [90, 65535] { R2541 += 1, R2505 += 1, R2475 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2541 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2543 += 1, R2507 += 1, R2477 += 1, R2314 += 1 };
  s0 -> s2 [0, 65535] { R2543 += 1, R2507 += 1, R2476 += 1, R2477 += 1 };
  s0 -> s3 [0, 65535] { R2543 += 1, R2506 += 1, R2507 += 1 };
  s0 -> s0 [0, 65535] { R2542 += 1, R2543 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2543 += 1, R2507 += 1, R2477 += 1, R2314 += 1 };
  s1 -> s5 [0, 65535] { R2543 += 1 };
  s1 -> s6 [0, 65535] { R2543 += 1, R2507 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2543 += 1, R2507 += 1, R2477 += 1, R2314 += 1 };
  s2 -> s2 [0, 65535] { R2543 += 1, R2507 += 1, R2476 += 1, R2477 += 1 };
  s2 -> s5 [0, 65535] { R2543 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2543 += 1, R2507 += 1, R2477 += 1, R2314 += 1 };
  s3 -> s2 [0, 65535] { R2543 += 1, R2507 += 1, R2476 += 1, R2477 += 1 };
  s3 -> s3 [0, 65535] { R2543 += 1, R2506 += 1, R2507 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2543 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2543 += 1 };
  s6 -> s6 [0, 65535] { R2543 += 1, R2507 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R2544 += 1, R2545 += 1 };
  s0 -> s1 [0, 65535] { R2545 += 1, R2508 += 1, R2509 += 1 };
  s0 -> s2 [0, 65535] { R2545 += 1, R2509 += 1, R2478 += 1, R2479 += 1 };
  s0 -> s3 [99, 99] { R2545 += 1, R2509 += 1, R2479 += 1 };
  s1 -> s1 [0, 65535] { R2545 += 1, R2508 += 1, R2509 += 1 };
  s1 -> s2 [0, 65535] { R2545 += 1, R2509 += 1, R2478 += 1, R2479 += 1 };
  s1 -> s3 [99, 99] { R2545 += 1, R2509 += 1, R2479 += 1 };
  s2 -> s2 [0, 65535] { R2545 += 1, R2509 += 1, R2478 += 1, R2479 += 1 };
  s2 -> s3 [99, 99] { R2545 += 1, R2509 += 1, R2479 += 1 };
  s3 -> s4 [97, 97] { R2545 += 1, R2509 += 1, R2479 += 1 };
  s4 -> s5 [108, 108] { R2545 += 1, R2509 += 1, R2479 += 1 };
  s5 -> s6 [104, 104] { R2545 += 1, R2509 += 1, R2479 += 1 };
  s6 -> s7 [111, 111] { R2545 += 1, R2509 += 1, R2479 += 1 };
  s7 -> s8 [115, 115] { R2545 += 1, R2509 += 1, R2479 += 1 };
  s8 -> s9 [116, 116] { R2545 += 1, R2509 += 1, R2479 += 1 };
  s9 -> s10 [0, 65535] { R2545 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R2545 += 1, R2509 += 1 };
  s10 -> s10 [0, 65535] { R2545 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s9, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2546 += 1, R2547 += 1 };
  s0 -> s1 [0, 65535] { R2547 += 1, R2511 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [0, 65535] { R2547 += 1, R2510 += 1, R2511 += 1 };
  s0 -> s3 [0, 65535] { R2547 += 1, R2511 += 1, R2489 += 1, R2315 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2547 += 1 };
  s1 -> s1 [0, 65535] { R2547 += 1, R2511 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s3 [0, 65535] { R2547 += 1, R2511 += 1, R2489 += 1, R2315 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2547 += 1, R2511 += 1, R2488 += 1, R2489 += 1 };
  s2 -> s2 [0, 65535] { R2547 += 1, R2510 += 1, R2511 += 1 };
  s2 -> s3 [0, 65535] { R2547 += 1, R2511 += 1, R2489 += 1, R2315 += 1 };
  s3 -> s4 [0, 65535] { R2547 += 1, R2511 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2547 += 1 };
  s3 -> s3 [0, 65535] { R2547 += 1, R2511 += 1, R2489 += 1, R2315 += 1 };
  s4 -> s4 [0, 65535] { R2547 += 1, R2511 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2547 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2547 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2549 += 1, R2513 += 1, R2490 += 1, R2491 += 1 };
  s0 -> s2 [0, 65535] { R2549 += 1, R2512 += 1, R2513 += 1 };
  s0 -> s0 [0, 65535] { R2548 += 1, R2549 += 1 };
  s0 -> s3 [108, 108] { R2549 += 1, R2513 += 1, R2491 += 1 };
  s1 -> s1 [0, 65535] { R2549 += 1, R2513 += 1, R2490 += 1, R2491 += 1 };
  s1 -> s3 [108, 108] { R2549 += 1, R2513 += 1, R2491 += 1 };
  s2 -> s1 [0, 65535] { R2549 += 1, R2513 += 1, R2490 += 1, R2491 += 1 };
  s2 -> s2 [0, 65535] { R2549 += 1, R2512 += 1, R2513 += 1 };
  s2 -> s3 [108, 108] { R2549 += 1, R2513 += 1, R2491 += 1 };
  s3 -> s4 [111, 111] { R2549 += 1, R2513 += 1, R2491 += 1 };
  s4 -> s4 [0, 65535] { R2549 += 1, R2513 += 1 };
  s4 -> s5 [0, 65535] { R2549 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2549 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
};
constraint R1 = R2479 && R2 = R2487 && R3 = R2549 && R8 = 0 && R9 - R2491 = -1 && R1546 = 0 && R1547 = R2513 && R2320 = 0 && R2321 = 1 && R2322 = 0 && R2323 = 1 && R2478 = R2491 && R2480 - R2513 = 1 && R2481 = R2487 && R2482 - R2513 = 1 && R2483 = R2487 && R2484 - R2513 = 1 && R2485 = R2487 && R2486 - R2513 = 1 && R2490 = 0 && R2492 = 0 && R2493 = R2513 && R2494 = 0 && R2495 = R2513 && R2496 = 0 && R2497 = R2513 && R2498 = 0 && R2499 = R2513 && R2500 = 0 && R2501 = R2513 && R2502 = 0 && R2503 = R2513 && R2504 = 0 && R2505 = R2513 && R2506 = 0 && R2507 = R2513 && R2508 = 0 && R2509 = R2513 && R2510 = 0 && R2511 = R2513 && R2512 = 0 && R2514 = 10 && R2515 = R2549 && R2516 = 10 && R2517 = R2549 && R2518 = 10 && R2519 = R2549 && R2520 = 10 && R2521 = R2549 && R2522 = 10 && R2523 = R2549 && R2524 = 10 && R2525 = R2549 && R2526 = 10 && R2527 = R2549 && R2528 = 10 && R2529 = R2549 && R2530 = 10 && R2531 = R2549 && R2532 = 10 && R2533 = R2549 && R2534 = 10 && R2535 = R2549 && R2536 = 10 && R2537 = R2549 && R2538 = 10 && R2539 = R2549 && R2540 = 10 && R2541 = R2549 && R2542 = 10 && R2543 = R2549 && R2544 = 10 && R2545 = R2549 && R2546 = 10 && R2547 = R2549 && R2548 = 10 && R0 != 0 && R6 < 1 && R2491 - R2479 < 1 && 0 < R2479 && R2513 < R2487 && -1 < R2491 && -1 < R2513 && 9 < R2549 && (R2316 != 0 || ((R4 != 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R0 = R2317 || R2317 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R2317 != 1 || -1 < R0) && (R0 = R2317 || R2317 = 1))))) && (R2318 != 0 || ((R4 != 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R0 = R2319 || R2319 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R2319 != 1 || -1 < R0) && (R0 = R2319 || R2319 = 1))))) && (R2474 != R2491 || R2475 = R2479 || (R2314 = 0 && R2479 = R2491)) && (R2476 != R2491 || R2477 = R2479 || (R2314 = 0 && R2479 = R2491)) && (R2488 != 0 || R2489 = R2491 || (R2315 = 0 && R2491 = 0)) && (R2316 = 0 || (R4 = 0 && R0 < 0)) && (R2318 = 0 || (R4 = 0 && R0 < 0)) && (R2474 = R2491 || (R2314 = 0 && R2479 = R2491)) && (R2476 = R2491 || (R2314 = 0 && R2479 = R2491)) && (R2488 = 0 || (R2315 = 0 && R2491 = 0));
// End of Parikh automata intersection problem
