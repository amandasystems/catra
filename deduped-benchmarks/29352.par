// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R1319, R1320, R1321, R1322, R1323, R1324, R1325, R1326, R1327, R1328, R1329, R1330, R1331, R1332, R1333, R1334, R1335, R1336, R1337, R1338, R1339, R1340, R1341, R1342, R1343, R1344, R1345, R1346, R1347, R1348, R1349, R1350, R1351, R1352, R1353, R1354, R1355, R1356, R1357, R1358, R1359, R1360, R1361, R1362, R1363, R1364, R1365, R1366, R1367, R1368, R1369, R1370, R1371, R1372, R1373, R1374, R1375, R1376, R1377, R1378, R1379, R1380, R1381, R1382, R1383, R1384, R1385, R1386, R1387, R1388, R1389, R1390, R1391, R1392, R1393, R1394, R2, R3, R4, R5, R6, R7, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1360 += 1 };
  s0 -> s0 [0, 65535] { R1359 += 1, R1360 += 1 };
  s0 -> s2 [46, 46] { R1360 += 1 };
  s0 -> s3 [47, 47] { R1360 += 1 };
  s0 -> s1 [48, 65535] { R1360 += 1 };
  s1 -> s1 [0, 45] { R1360 += 1 };
  s1 -> s2 [46, 46] { R1360 += 1 };
  s1 -> s3 [47, 47] { R1360 += 1 };
  s1 -> s1 [48, 65535] { R1360 += 1 };
  s2 -> s1 [0, 45] { R1360 += 1 };
  s2 -> s2 [46, 46] { R1360 += 1 };
  s2 -> s3 [47, 47] { R1360 += 1 };
  s2 -> s1 [48, 114] { R1360 += 1 };
  s2 -> s8 [115, 115] { R1360 += 1 };
  s2 -> s1 [116, 65535] { R1360 += 1 };
  s3 -> s3 [0, 45] { R1360 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1360 += 1 };
  s3 -> s3 [47, 65535] { R1360 += 1 };
  s4 -> s3 [0, 45] { R1360 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1360 += 1 };
  s4 -> s3 [47, 114] { R1360 += 1 };
  s4 -> s5 [115, 115] { R1360 += 1 };
  s4 -> s3 [116, 65535] { R1360 += 1 };
  s5 -> s3 [0, 45] { R1360 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1360 += 1 };
  s5 -> s3 [47, 110] { R1360 += 1 };
  s5 -> s6 [111, 111] { R1360 += 1 };
  s5 -> s3 [112, 65535] { R1360 += 1 };
  s6 -> s3 [0, 45] { R1360 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1360 += 1 };
  s6 -> s3 [47, 98] { R1360 += 1 };
  s6 -> s7 [99, 99] { R1360 += 1 };
  s6 -> s3 [100, 65535] { R1360 += 1 };
  s7 -> s3 [0, 45] { R1360 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1360 += 1 };
  s7 -> s3 [47, 106] { R1360 += 1 };
  s7 -> s3 [108, 65535] { R1360 += 1 };
  s8 -> s1 [0, 45] { R1360 += 1 };
  s8 -> s2 [46, 46] { R1360 += 1 };
  s8 -> s3 [47, 47] { R1360 += 1 };
  s8 -> s1 [48, 110] { R1360 += 1 };
  s8 -> s9 [111, 111] { R1360 += 1 };
  s8 -> s1 [112, 65535] { R1360 += 1 };
  s9 -> s1 [0, 45] { R1360 += 1 };
  s9 -> s2 [46, 46] { R1360 += 1 };
  s9 -> s3 [47, 47] { R1360 += 1 };
  s9 -> s1 [48, 98] { R1360 += 1 };
  s9 -> s10 [99, 99] { R1360 += 1 };
  s9 -> s1 [100, 65535] { R1360 += 1 };
  s10 -> s1 [0, 45] { R1360 += 1 };
  s10 -> s2 [46, 46] { R1360 += 1 };
  s10 -> s3 [47, 47] { R1360 += 1 };
  s10 -> s1 [48, 106] { R1360 += 1 };
  s10 -> s1 [108, 65535] { R1360 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1362 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1361 += 1, R1362 += 1 };
  s1 -> s1 [0, 65535] { R1362 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1364 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R1364 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R1363 += 1, R1364 += 1 };
  s0 -> s3 [47, 47] { R1364 += 1 };
  s0 -> s1 [48, 65535] { R1364 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R1364 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R1364 += 1 };
  s1 -> s1 [48, 65535] { R1364 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R1364 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R1364 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R1364 += 1 };
  s2 -> s1 [48, 65535] { R1364 += 1, R12 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1364 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R1366 += 1, R1326 += 1 };
  s0 -> s0 [0, 65535] { R1365 += 1, R1366 += 1 };
  s0 -> s2 [0, 65535] { R1366 += 1, R1325 += 1, R1326 += 1 };
  s0 -> s1 [38, 42] { R1366 += 1, R1326 += 1 };
  s0 -> s1 [44, 45] { R1366 += 1, R1326 += 1 };
  s0 -> s1 [47, 62] { R1366 += 1, R1326 += 1 };
  s0 -> s1 [64, 65535] { R1366 += 1, R1326 += 1 };
  s1 -> s1 [0, 36] { R1366 += 1, R1326 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1366 += 1 };
  s1 -> s1 [38, 42] { R1366 += 1, R1326 += 1 };
  s1 -> s1 [44, 45] { R1366 += 1, R1326 += 1 };
  s1 -> s1 [47, 62] { R1366 += 1, R1326 += 1 };
  s1 -> s1 [64, 65535] { R1366 += 1, R1326 += 1 };
  s2 -> s1 [0, 36] { R1366 += 1, R1326 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1366 += 1, R1325 += 1, R1326 += 1 };
  s2 -> s1 [38, 42] { R1366 += 1, R1326 += 1 };
  s2 -> s1 [44, 45] { R1366 += 1, R1326 += 1 };
  s2 -> s1 [47, 62] { R1366 += 1, R1326 += 1 };
  s2 -> s1 [64, 65535] { R1366 += 1, R1326 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1367 += 1, R1368 += 1 };
  s0 -> s1 [0, 65535] { R1368 += 1, R1328 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R1368 += 1, R1327 += 1, R1328 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1368 += 1, R1328 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R1368 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1368 += 1, R1328 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R1368 += 1, R1327 += 1, R1328 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1368 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R1370 += 1, R1330 += 1, R782 += 1 };
  s0 -> s0 [0, 65535] { R1369 += 1, R1370 += 1 };
  s0 -> s2 [0, 65535] { R1370 += 1, R1330 += 1, R781 += 1, R782 += 1 };
  s0 -> s3 [0, 65535] { R1370 += 1, R1329 += 1, R1330 += 1 };
  s0 -> s4 [63, 63] { R1370 += 1, R1330 += 1, R782 += 1 };
  s0 -> s1 [64, 65535] { R1370 += 1, R1330 += 1, R782 += 1 };
  s1 -> s7 [0, 65535] { R1370 += 1, R1330 += 1 };
  s1 -> s6 [0, 65535] { R1370 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1370 += 1, R1330 += 1, R782 += 1 };
  s2 -> s1 [0, 62] { R1370 += 1, R1330 += 1, R782 += 1 };
  s2 -> s2 [0, 65535] { R1370 += 1, R1330 += 1, R781 += 1, R782 += 1 };
  s2 -> s6 [0, 65535] { R1370 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R1370 += 1, R1330 += 1, R782 += 1 };
  s2 -> s1 [64, 65535] { R1370 += 1, R1330 += 1, R782 += 1 };
  s3 -> s1 [0, 62] { R1370 += 1, R1330 += 1, R782 += 1 };
  s3 -> s2 [0, 65535] { R1370 += 1, R1330 += 1, R781 += 1, R782 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1370 += 1, R1329 += 1, R1330 += 1 };
  s3 -> s4 [63, 63] { R1370 += 1, R1330 += 1, R782 += 1 };
  s3 -> s1 [64, 65535] { R1370 += 1, R1330 += 1, R782 += 1 };
  s4 -> s1 [0, 65535] { R1370 += 1, R1330 += 1, R782 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1370 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1370 += 1, R1330 += 1 };
  s7 -> s6 [0, 65535] { R1370 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1372 += 1, R1332 += 1, R784 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1371 += 1, R1372 += 1 };
  s0 -> s2 [0, 65535] { R1372 += 1, R1331 += 1, R1332 += 1 };
  s0 -> s3 [0, 65535] { R1372 += 1, R1332 += 1, R783 += 1, R784 += 1 };
  s1 -> s1 [0, 65535] { R1372 += 1, R1332 += 1, R784 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R1372 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1372 += 1, R1332 += 1 };
  s2 -> s1 [0, 65535] { R1372 += 1, R1332 += 1, R784 += 1, R4 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1372 += 1, R1331 += 1, R1332 += 1 };
  s2 -> s3 [0, 65535] { R1372 += 1, R1332 += 1, R783 += 1, R784 += 1 };
  s3 -> s1 [0, 65535] { R1372 += 1, R1332 += 1, R784 += 1, R4 += 1 };
  s3 -> s4 [0, 65535] { R1372 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1372 += 1, R1332 += 1, R783 += 1, R784 += 1 };
  s4 -> s4 [0, 65535] { R1372 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1372 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1372 += 1, R1332 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R1374 += 1, R1338 += 1 };
  s0 -> s2 [0, 65535] { R1374 += 1, R1337 += 1, R1338 += 1 };
  s0 -> s0 [0, 65535] { R1373 += 1, R1374 += 1 };
  s0 -> s1 [45, 63] { R1374 += 1, R1338 += 1 };
  s0 -> s3 [89, 89] { R1374 += 1, R1338 += 1 };
  s0 -> s1 [90, 65535] { R1374 += 1, R1338 += 1 };
  s1 -> s1 [0, 43] { R1374 += 1, R1338 += 1 };
  s1 -> s1 [45, 63] { R1374 += 1, R1338 += 1 };
  s1 -> s3 [89, 89] { R1374 += 1, R1338 += 1 };
  s1 -> s1 [90, 65535] { R1374 += 1, R1338 += 1 };
  s2 -> s1 [0, 43] { R1374 += 1, R1338 += 1 };
  s2 -> s2 [0, 65535] { R1374 += 1, R1337 += 1, R1338 += 1 };
  s2 -> s1 [45, 63] { R1374 += 1, R1338 += 1 };
  s2 -> s3 [89, 89] { R1374 += 1, R1338 += 1 };
  s2 -> s1 [90, 65535] { R1374 += 1, R1338 += 1 };
  s3 -> s3 [0, 43] { R1374 += 1, R1338 += 1 };
  s3 -> s3 [0, 65535] { R1374 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R1374 += 1, R1338 += 1 };
  s3 -> s3 [89, 65535] { R1374 += 1, R1338 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R1376 += 1, R1340 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R1376 += 1, R1339 += 1, R1340 += 1 };
  s0 -> s0 [0, 65535] { R1375 += 1, R1376 += 1 };
  s1 -> s1 [0, 65535] { R1376 += 1, R1340 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1376 += 1 };
  s2 -> s1 [0, 65535] { R1376 += 1, R1340 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1376 += 1, R1339 += 1, R1340 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1376 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R1378 += 1, R1342 += 1 };
  s0 -> s0 [0, 65535] { R1377 += 1, R1378 += 1 };
  s0 -> s2 [0, 65535] { R1378 += 1, R1342 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R1378 += 1, R1341 += 1, R1342 += 1 };
  s0 -> s4 [58, 58] { R1378 += 1, R1342 += 1 };
  s0 -> s1 [59, 65535] { R1378 += 1, R1342 += 1 };
  s1 -> s1 [0, 57] { R1378 += 1, R1342 += 1 };
  s1 -> s1 [0, 65535] { R1378 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R1378 += 1, R1342 += 1 };
  s1 -> s1 [59, 65535] { R1378 += 1, R1342 += 1 };
  s2 -> s1 [0, 57] { R1378 += 1, R1342 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1378 += 1, R1342 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R1378 += 1 };
  s2 -> s4 [58, 58] { R1378 += 1, R1342 += 1 };
  s2 -> s1 [59, 65535] { R1378 += 1, R1342 += 1 };
  s3 -> s1 [0, 57] { R1378 += 1, R1342 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1378 += 1, R1342 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R1378 += 1, R1341 += 1, R1342 += 1 };
  s3 -> s4 [58, 58] { R1378 += 1, R1342 += 1 };
  s3 -> s1 [59, 65535] { R1378 += 1, R1342 += 1 };
  s4 -> s4 [0, 65535] { R1378 += 1, R1342 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1378 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R1380 += 1, R1344 += 1 };
  s0 -> s2 [0, 65535] { R1380 += 1, R1344 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R1379 += 1, R1380 += 1 };
  s0 -> s3 [0, 65535] { R1380 += 1, R1343 += 1, R1344 += 1 };
  s0 -> s4 [89, 89] { R1380 += 1, R1344 += 1 };
  s0 -> s1 [90, 65535] { R1380 += 1, R1344 += 1 };
  s1 -> s1 [0, 88] { R1380 += 1, R1344 += 1 };
  s1 -> s1 [0, 65535] { R1380 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [89, 89] { R1380 += 1, R1344 += 1 };
  s1 -> s1 [90, 65535] { R1380 += 1, R1344 += 1 };
  s2 -> s1 [0, 88] { R1380 += 1, R1344 += 1 };
  s2 -> s2 [0, 65535] { R1380 += 1, R1344 += 1, R7 += 1 };
  s2 -> s6 [0, 65535] { R1380 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [89, 89] { R1380 += 1, R1344 += 1 };
  s2 -> s1 [90, 65535] { R1380 += 1, R1344 += 1 };
  s3 -> s1 [0, 88] { R1380 += 1, R1344 += 1 };
  s3 -> s2 [0, 65535] { R1380 += 1, R1344 += 1, R7 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1380 += 1, R1343 += 1, R1344 += 1 };
  s3 -> s4 [89, 89] { R1380 += 1, R1344 += 1 };
  s3 -> s1 [90, 65535] { R1380 += 1, R1344 += 1 };
  s4 -> s4 [0, 65535] { R1380 += 1, R1344 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1380 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R1382 += 1, R1346 += 1, R786 += 1 };
  s0 -> s2 [0, 65535] { R1382 += 1, R1345 += 1, R1346 += 1 };
  s0 -> s0 [0, 65535] { R1381 += 1, R1382 += 1 };
  s0 -> s3 [0, 65535] { R1382 += 1, R1346 += 1, R785 += 1, R786 += 1 };
  s0 -> s4 [91, 91] { R1382 += 1, R1346 += 1, R786 += 1 };
  s0 -> s1 [92, 65535] { R1382 += 1, R1346 += 1, R786 += 1 };
  s1 -> s7 [0, 65535] { R1382 += 1, R1346 += 1 };
  s1 -> s1 [0, 65535] { R1382 += 1, R1346 += 1, R786 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1382 += 1 };
  s2 -> s1 [0, 90] { R1382 += 1, R1346 += 1, R786 += 1 };
  s2 -> s2 [0, 65535] { R1382 += 1, R1345 += 1, R1346 += 1 };
  s2 -> s3 [0, 65535] { R1382 += 1, R1346 += 1, R785 += 1, R786 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R1382 += 1, R1346 += 1, R786 += 1 };
  s2 -> s1 [92, 65535] { R1382 += 1, R1346 += 1, R786 += 1 };
  s3 -> s1 [0, 90] { R1382 += 1, R1346 += 1, R786 += 1 };
  s3 -> s3 [0, 65535] { R1382 += 1, R1346 += 1, R785 += 1, R786 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1382 += 1 };
  s3 -> s4 [91, 91] { R1382 += 1, R1346 += 1, R786 += 1 };
  s3 -> s1 [92, 65535] { R1382 += 1, R1346 += 1, R786 += 1 };
  s4 -> s1 [0, 65535] { R1382 += 1, R1346 += 1, R786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1382 += 1 };
  s7 -> s7 [0, 65535] { R1382 += 1, R1346 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1382 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1384 += 1, R1348 += 1, R787 += 1, R788 += 1 };
  s0 -> s2 [0, 65535] { R1384 += 1, R1348 += 1, R788 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R1384 += 1, R1347 += 1, R1348 += 1 };
  s0 -> s0 [0, 65535] { R1383 += 1, R1384 += 1 };
  s1 -> s1 [0, 65535] { R1384 += 1, R1348 += 1, R787 += 1, R788 += 1 };
  s1 -> s2 [0, 65535] { R1384 += 1, R1348 += 1, R788 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1384 += 1 };
  s2 -> s2 [0, 65535] { R1384 += 1, R1348 += 1, R788 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1384 += 1 };
  s2 -> s6 [0, 65535] { R1384 += 1, R1348 += 1 };
  s3 -> s1 [0, 65535] { R1384 += 1, R1348 += 1, R787 += 1, R788 += 1 };
  s3 -> s2 [0, 65535] { R1384 += 1, R1348 += 1, R788 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1384 += 1, R1347 += 1, R1348 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1384 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1384 += 1 };
  s6 -> s6 [0, 65535] { R1384 += 1, R1348 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R1386 += 1, R1350 += 1, R1320 += 1 };
  s0 -> s2 [0, 65535] { R1386 += 1, R1349 += 1, R1350 += 1 };
  s0 -> s0 [0, 65535] { R1385 += 1, R1386 += 1 };
  s0 -> s3 [0, 65535] { R1386 += 1, R1350 += 1, R1319 += 1, R1320 += 1 };
  s0 -> s1 [90, 65535] { R1386 += 1, R1350 += 1, R1320 += 1 };
  s1 -> s1 [0, 88] { R1386 += 1, R1350 += 1, R1320 += 1 };
  s1 -> s4 [0, 65535] { R1386 += 1 };
  s1 -> s1 [0, 65535] { R1386 += 1, R1350 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [90, 65535] { R1386 += 1, R1350 += 1, R1320 += 1 };
  s2 -> s1 [0, 88] { R1386 += 1, R1350 += 1, R1320 += 1 };
  s2 -> s2 [0, 65535] { R1386 += 1, R1349 += 1, R1350 += 1 };
  s2 -> s3 [0, 65535] { R1386 += 1, R1350 += 1, R1319 += 1, R1320 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [90, 65535] { R1386 += 1, R1350 += 1, R1320 += 1 };
  s3 -> s1 [0, 88] { R1386 += 1, R1350 += 1, R1320 += 1 };
  s3 -> s4 [0, 65535] { R1386 += 1 };
  s3 -> s3 [0, 65535] { R1386 += 1, R1350 += 1, R1319 += 1, R1320 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [90, 65535] { R1386 += 1, R1350 += 1, R1320 += 1 };
  s4 -> s4 [0, 65535] { R1386 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1388 += 1, R1352 += 1, R1321 += 1, R1322 += 1 };
  s0 -> s2 [0, 65535] { R1388 += 1, R1352 += 1, R1322 += 1, R779 += 1 };
  s0 -> s3 [0, 65535] { R1388 += 1, R1351 += 1, R1352 += 1 };
  s0 -> s0 [0, 65535] { R1387 += 1, R1388 += 1 };
  s1 -> s1 [0, 65535] { R1388 += 1, R1352 += 1, R1321 += 1, R1322 += 1 };
  s1 -> s2 [0, 65535] { R1388 += 1, R1352 += 1, R1322 += 1, R779 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1388 += 1 };
  s2 -> s2 [0, 65535] { R1388 += 1, R1352 += 1, R1322 += 1, R779 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1388 += 1, R1352 += 1 };
  s2 -> s6 [0, 65535] { R1388 += 1 };
  s3 -> s1 [0, 65535] { R1388 += 1, R1352 += 1, R1321 += 1, R1322 += 1 };
  s3 -> s2 [0, 65535] { R1388 += 1, R1352 += 1, R1322 += 1, R779 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1388 += 1, R1351 += 1, R1352 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1388 += 1, R1352 += 1 };
  s5 -> s6 [0, 65535] { R1388 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1388 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1390 += 1, R1354 += 1, R1323 += 1, R1324 += 1 };
  s0 -> s0 [0, 65535] { R1389 += 1, R1390 += 1 };
  s0 -> s2 [0, 65535] { R1390 += 1, R1353 += 1, R1354 += 1 };
  s0 -> s3 [115, 115] { R1390 += 1, R1354 += 1, R1324 += 1 };
  s1 -> s1 [0, 65535] { R1390 += 1, R1354 += 1, R1323 += 1, R1324 += 1 };
  s1 -> s3 [115, 115] { R1390 += 1, R1354 += 1, R1324 += 1 };
  s2 -> s1 [0, 65535] { R1390 += 1, R1354 += 1, R1323 += 1, R1324 += 1 };
  s2 -> s2 [0, 65535] { R1390 += 1, R1353 += 1, R1354 += 1 };
  s2 -> s3 [115, 115] { R1390 += 1, R1354 += 1, R1324 += 1 };
  s3 -> s4 [116, 116] { R1390 += 1, R1354 += 1, R1324 += 1 };
  s4 -> s4 [0, 65535] { R1390 += 1, R1354 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1390 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1390 += 1 };
  accepting s4, s5, s6;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1392 += 1, R1355 += 1, R1356 += 1 };
  s0 -> s2 [0, 65535] { R1392 += 1, R1356 += 1, R1334 += 1, R780 += 1 };
  s0 -> s0 [0, 65535] { R1391 += 1, R1392 += 1 };
  s0 -> s3 [0, 65535] { R1392 += 1, R1356 += 1, R1333 += 1, R1334 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1392 += 1, R1355 += 1, R1356 += 1 };
  s1 -> s2 [0, 65535] { R1392 += 1, R1356 += 1, R1334 += 1, R780 += 1 };
  s1 -> s3 [0, 65535] { R1392 += 1, R1356 += 1, R1333 += 1, R1334 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1392 += 1, R1356 += 1 };
  s2 -> s5 [0, 65535] { R1392 += 1 };
  s2 -> s2 [0, 65535] { R1392 += 1, R1356 += 1, R1334 += 1, R780 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1392 += 1 };
  s3 -> s2 [0, 65535] { R1392 += 1, R1356 += 1, R1334 += 1, R780 += 1 };
  s3 -> s3 [0, 65535] { R1392 += 1, R1356 += 1, R1333 += 1, R1334 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1392 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1392 += 1, R1356 += 1 };
  s6 -> s5 [0, 65535] { R1392 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1394 += 1, R1358 += 1, R1335 += 1, R1336 += 1 };
  s0 -> s0 [0, 65535] { R1393 += 1, R1394 += 1 };
  s0 -> s2 [0, 65535] { R1394 += 1, R1357 += 1, R1358 += 1 };
  s0 -> s3 [108, 108] { R1394 += 1, R1358 += 1, R1336 += 1 };
  s1 -> s1 [0, 65535] { R1394 += 1, R1358 += 1, R1335 += 1, R1336 += 1 };
  s1 -> s3 [108, 108] { R1394 += 1, R1358 += 1, R1336 += 1 };
  s2 -> s1 [0, 65535] { R1394 += 1, R1358 += 1, R1335 += 1, R1336 += 1 };
  s2 -> s2 [0, 65535] { R1394 += 1, R1357 += 1, R1358 += 1 };
  s2 -> s3 [108, 108] { R1394 += 1, R1358 += 1, R1336 += 1 };
  s3 -> s4 [111, 111] { R1394 += 1, R1358 += 1, R1336 += 1 };
  s4 -> s5 [99, 99] { R1394 += 1, R1358 += 1, R1336 += 1 };
  s5 -> s6 [97, 97] { R1394 += 1, R1358 += 1, R1336 += 1 };
  s6 -> s7 [108, 108] { R1394 += 1, R1358 += 1, R1336 += 1 };
  s7 -> s8 [104, 104] { R1394 += 1, R1358 += 1, R1336 += 1 };
  s8 -> s9 [111, 111] { R1394 += 1, R1358 += 1, R1336 += 1 };
  s9 -> s9 [0, 65535] { R1394 += 1, R1358 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R1394 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R1394 += 1 };
  accepting s9, s10, s11;
};
};
constraint R1 = R1324 && R2 = R1332 && R3 = R1394 && R11 = 0 && R12 = R1358 && R785 = 0 && R786 = 1 && R787 = 0 && R788 = 1 && R1319 = 0 && R1320 = R1324 && R1321 = 0 && R1322 = R1324 && R1323 = 0 && R1325 - R1358 = 1 && R1326 = R1332 && R1327 - R1358 = 1 && R1328 = R1332 && R1329 - R1358 = 1 && R1330 = R1332 && R1331 - R1358 = 1 && R1335 = 0 && R1336 = 0 && R1337 = 0 && R1338 = R1358 && R1339 = 0 && R1340 = R1358 && R1341 = 0 && R1342 = R1358 && R1343 = 0 && R1344 = R1358 && R1345 = 0 && R1346 = R1358 && R1347 = 0 && R1348 = R1358 && R1349 = 0 && R1350 = R1358 && R1351 = 0 && R1352 = R1358 && R1353 = 0 && R1354 = R1358 && R1355 = 0 && R1356 = R1358 && R1357 = 0 && R1359 = 10 && R1360 = R1394 && R1361 = 10 && R1362 = R1394 && R1363 = 10 && R1364 = R1394 && R1365 = 10 && R1366 = R1394 && R1367 = 10 && R1368 = R1394 && R1369 = 10 && R1370 = R1394 && R1371 = 10 && R1372 = R1394 && R1373 = 10 && R1374 = R1394 && R1375 = 10 && R1376 = R1394 && R1377 = 10 && R1378 = R1394 && R1379 = 10 && R1380 = R1394 && R1381 = 10 && R1382 = R1394 && R1383 = 10 && R1384 = R1394 && R1385 = 10 && R1386 = R1394 && R1387 = 10 && R1388 = R1394 && R1389 = 10 && R1390 = R1394 && R1391 = 10 && R1392 = R1394 && R1393 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R1324 && R1358 < R1332 && -1 < R1358 && 9 < R1394 && (R781 != 0 || ((R4 != 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R0 = R782 || R782 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R782 != 1 || -1 < R0) && (R0 = R782 || R782 = 1))))) && (R783 != 0 || ((R4 != 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R0 = R784 || R784 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R784 != 1 || -1 < R0) && (R0 = R784 || R784 = 1))))) && (R780 = 0 || (R1333 = 0 && R1334 = 0)) && (R781 = 0 || (R4 = 0 && R0 < 0)) && (R783 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
