// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R11, R12, R2, R3, R4, R5, R6, R7, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R980 += 1 };
  s0 -> s0 [0, 65535] { R979 += 1, R980 += 1 };
  s0 -> s2 [46, 46] { R980 += 1 };
  s0 -> s3 [47, 47] { R980 += 1 };
  s0 -> s1 [48, 65535] { R980 += 1 };
  s1 -> s1 [0, 45] { R980 += 1 };
  s1 -> s2 [46, 46] { R980 += 1 };
  s1 -> s3 [47, 47] { R980 += 1 };
  s1 -> s1 [48, 65535] { R980 += 1 };
  s2 -> s1 [0, 45] { R980 += 1 };
  s2 -> s2 [46, 46] { R980 += 1 };
  s2 -> s3 [47, 47] { R980 += 1 };
  s2 -> s1 [48, 114] { R980 += 1 };
  s2 -> s8 [115, 115] { R980 += 1 };
  s2 -> s1 [116, 65535] { R980 += 1 };
  s3 -> s3 [0, 45] { R980 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R980 += 1 };
  s3 -> s3 [47, 65535] { R980 += 1 };
  s4 -> s3 [0, 45] { R980 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R980 += 1 };
  s4 -> s3 [47, 114] { R980 += 1 };
  s4 -> s5 [115, 115] { R980 += 1 };
  s4 -> s3 [116, 65535] { R980 += 1 };
  s5 -> s3 [0, 45] { R980 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R980 += 1 };
  s5 -> s3 [47, 110] { R980 += 1 };
  s5 -> s6 [111, 111] { R980 += 1 };
  s5 -> s3 [112, 65535] { R980 += 1 };
  s6 -> s3 [0, 45] { R980 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R980 += 1 };
  s6 -> s3 [47, 98] { R980 += 1 };
  s6 -> s7 [99, 99] { R980 += 1 };
  s6 -> s3 [100, 65535] { R980 += 1 };
  s7 -> s3 [0, 45] { R980 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R980 += 1 };
  s7 -> s3 [47, 106] { R980 += 1 };
  s7 -> s3 [108, 65535] { R980 += 1 };
  s8 -> s1 [0, 45] { R980 += 1 };
  s8 -> s2 [46, 46] { R980 += 1 };
  s8 -> s3 [47, 47] { R980 += 1 };
  s8 -> s1 [48, 110] { R980 += 1 };
  s8 -> s9 [111, 111] { R980 += 1 };
  s8 -> s1 [112, 65535] { R980 += 1 };
  s9 -> s1 [0, 45] { R980 += 1 };
  s9 -> s2 [46, 46] { R980 += 1 };
  s9 -> s3 [47, 47] { R980 += 1 };
  s9 -> s1 [48, 98] { R980 += 1 };
  s9 -> s10 [99, 99] { R980 += 1 };
  s9 -> s1 [100, 65535] { R980 += 1 };
  s10 -> s1 [0, 45] { R980 += 1 };
  s10 -> s2 [46, 46] { R980 += 1 };
  s10 -> s3 [47, 47] { R980 += 1 };
  s10 -> s1 [48, 106] { R980 += 1 };
  s10 -> s1 [108, 65535] { R980 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R982 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R981 += 1, R982 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R982 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R984 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R983 += 1, R984 += 1 };
  s0 -> s2 [0, 65535] { R984 += 1, R11 += 1, R12 += 1 };
  s0 -> s3 [47, 47] { R984 += 1 };
  s0 -> s1 [48, 65535] { R984 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R984 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R984 += 1 };
  s1 -> s1 [48, 65535] { R984 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R984 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R984 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R984 += 1 };
  s2 -> s1 [48, 65535] { R984 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R984 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R986 += 1, R946 += 1 };
  s0 -> s0 [0, 65535] { R985 += 1, R986 += 1 };
  s0 -> s2 [0, 65535] { R986 += 1, R945 += 1, R946 += 1 };
  s0 -> s1 [38, 42] { R986 += 1, R946 += 1 };
  s0 -> s1 [44, 45] { R986 += 1, R946 += 1 };
  s0 -> s1 [47, 62] { R986 += 1, R946 += 1 };
  s0 -> s1 [64, 65535] { R986 += 1, R946 += 1 };
  s1 -> s1 [0, 36] { R986 += 1, R946 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R986 += 1 };
  s1 -> s1 [38, 42] { R986 += 1, R946 += 1 };
  s1 -> s1 [44, 45] { R986 += 1, R946 += 1 };
  s1 -> s1 [47, 62] { R986 += 1, R946 += 1 };
  s1 -> s1 [64, 65535] { R986 += 1, R946 += 1 };
  s2 -> s1 [0, 36] { R986 += 1, R946 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R986 += 1, R945 += 1, R946 += 1 };
  s2 -> s1 [38, 42] { R986 += 1, R946 += 1 };
  s2 -> s1 [44, 45] { R986 += 1, R946 += 1 };
  s2 -> s1 [47, 62] { R986 += 1, R946 += 1 };
  s2 -> s1 [64, 65535] { R986 += 1, R946 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R988 += 1, R948 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R987 += 1, R988 += 1 };
  s0 -> s2 [0, 65535] { R988 += 1, R947 += 1, R948 += 1 };
  s1 -> s4 [0, 65535] { R988 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R988 += 1, R948 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R988 += 1, R948 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R988 += 1, R947 += 1, R948 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R988 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R990 += 1, R950 += 1, R782 += 1 };
  s0 -> s2 [0, 65535] { R990 += 1, R949 += 1, R950 += 1 };
  s0 -> s3 [0, 65535] { R990 += 1, R950 += 1, R781 += 1, R782 += 1 };
  s0 -> s0 [0, 65535] { R989 += 1, R990 += 1 };
  s0 -> s4 [63, 63] { R990 += 1, R950 += 1, R782 += 1 };
  s0 -> s1 [64, 65535] { R990 += 1, R950 += 1, R782 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R990 += 1, R950 += 1, R782 += 1 };
  s1 -> s6 [0, 65535] { R990 += 1 };
  s1 -> s7 [0, 65535] { R990 += 1, R950 += 1 };
  s2 -> s1 [0, 62] { R990 += 1, R950 += 1, R782 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R990 += 1, R949 += 1, R950 += 1 };
  s2 -> s3 [0, 65535] { R990 += 1, R950 += 1, R781 += 1, R782 += 1 };
  s2 -> s4 [63, 63] { R990 += 1, R950 += 1, R782 += 1 };
  s2 -> s1 [64, 65535] { R990 += 1, R950 += 1, R782 += 1 };
  s3 -> s1 [0, 62] { R990 += 1, R950 += 1, R782 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R990 += 1, R950 += 1, R781 += 1, R782 += 1 };
  s3 -> s6 [0, 65535] { R990 += 1 };
  s3 -> s4 [63, 63] { R990 += 1, R950 += 1, R782 += 1 };
  s3 -> s1 [64, 65535] { R990 += 1, R950 += 1, R782 += 1 };
  s4 -> s1 [0, 65535] { R990 += 1, R950 += 1, R782 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R990 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R990 += 1 };
  s7 -> s7 [0, 65535] { R990 += 1, R950 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R992 += 1, R951 += 1, R952 += 1 };
  s0 -> s2 [0, 65535] { R992 += 1, R952 += 1, R784 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R992 += 1, R952 += 1, R783 += 1, R784 += 1 };
  s0 -> s0 [0, 65535] { R991 += 1, R992 += 1 };
  s1 -> s1 [0, 65535] { R992 += 1, R951 += 1, R952 += 1 };
  s1 -> s2 [0, 65535] { R992 += 1, R952 += 1, R784 += 1, R4 += 1 };
  s1 -> s3 [0, 65535] { R992 += 1, R952 += 1, R783 += 1, R784 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R992 += 1, R952 += 1, R784 += 1, R4 += 1 };
  s2 -> s6 [0, 65535] { R992 += 1, R952 += 1 };
  s2 -> s4 [0, 65535] { R992 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R992 += 1, R952 += 1, R784 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R992 += 1, R952 += 1, R783 += 1, R784 += 1 };
  s3 -> s4 [0, 65535] { R992 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R992 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R992 += 1, R952 += 1 };
  s6 -> s4 [0, 65535] { R992 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R994 += 1, R958 += 1 };
  s0 -> s2 [0, 65535] { R994 += 1, R957 += 1, R958 += 1 };
  s0 -> s0 [0, 65535] { R993 += 1, R994 += 1 };
  s0 -> s1 [45, 63] { R994 += 1, R958 += 1 };
  s0 -> s3 [89, 89] { R994 += 1, R958 += 1 };
  s0 -> s1 [90, 65535] { R994 += 1, R958 += 1 };
  s1 -> s1 [0, 43] { R994 += 1, R958 += 1 };
  s1 -> s1 [45, 63] { R994 += 1, R958 += 1 };
  s1 -> s3 [89, 89] { R994 += 1, R958 += 1 };
  s1 -> s1 [90, 65535] { R994 += 1, R958 += 1 };
  s2 -> s1 [0, 43] { R994 += 1, R958 += 1 };
  s2 -> s2 [0, 65535] { R994 += 1, R957 += 1, R958 += 1 };
  s2 -> s1 [45, 63] { R994 += 1, R958 += 1 };
  s2 -> s3 [89, 89] { R994 += 1, R958 += 1 };
  s2 -> s1 [90, 65535] { R994 += 1, R958 += 1 };
  s3 -> s3 [0, 43] { R994 += 1, R958 += 1 };
  s3 -> s3 [0, 65535] { R994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R994 += 1, R958 += 1 };
  s3 -> s3 [89, 65535] { R994 += 1, R958 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R995 += 1, R996 += 1 };
  s0 -> s1 [0, 65535] { R996 += 1, R960 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R996 += 1, R959 += 1, R960 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R996 += 1, R960 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R996 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R996 += 1, R960 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R996 += 1, R959 += 1, R960 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R996 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R998 += 1, R962 += 1 };
  s0 -> s0 [0, 65535] { R997 += 1, R998 += 1 };
  s0 -> s2 [0, 65535] { R998 += 1, R961 += 1, R962 += 1 };
  s0 -> s3 [0, 65535] { R998 += 1, R962 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R998 += 1, R962 += 1 };
  s0 -> s1 [59, 65535] { R998 += 1, R962 += 1 };
  s1 -> s1 [0, 57] { R998 += 1, R962 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R998 += 1 };
  s1 -> s4 [58, 58] { R998 += 1, R962 += 1 };
  s1 -> s1 [59, 65535] { R998 += 1, R962 += 1 };
  s2 -> s1 [0, 57] { R998 += 1, R962 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R998 += 1, R961 += 1, R962 += 1 };
  s2 -> s3 [0, 65535] { R998 += 1, R962 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R998 += 1, R962 += 1 };
  s2 -> s1 [59, 65535] { R998 += 1, R962 += 1 };
  s3 -> s1 [0, 57] { R998 += 1, R962 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R998 += 1, R962 += 1, R6 += 1 };
  s3 -> s6 [0, 65535] { R998 += 1 };
  s3 -> s4 [58, 58] { R998 += 1, R962 += 1 };
  s3 -> s1 [59, 65535] { R998 += 1, R962 += 1 };
  s4 -> s4 [0, 65535] { R998 += 1, R962 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R998 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R1000 += 1, R964 += 1 };
  s0 -> s2 [0, 65535] { R1000 += 1, R963 += 1, R964 += 1 };
  s0 -> s0 [0, 65535] { R999 += 1, R1000 += 1 };
  s0 -> s3 [0, 65535] { R1000 += 1, R964 += 1, R7 += 1 };
  s0 -> s4 [89, 89] { R1000 += 1, R964 += 1 };
  s0 -> s1 [90, 65535] { R1000 += 1, R964 += 1 };
  s1 -> s1 [0, 88] { R1000 += 1, R964 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1000 += 1 };
  s1 -> s4 [89, 89] { R1000 += 1, R964 += 1 };
  s1 -> s1 [90, 65535] { R1000 += 1, R964 += 1 };
  s2 -> s1 [0, 88] { R1000 += 1, R964 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1000 += 1, R963 += 1, R964 += 1 };
  s2 -> s3 [0, 65535] { R1000 += 1, R964 += 1, R7 += 1 };
  s2 -> s4 [89, 89] { R1000 += 1, R964 += 1 };
  s2 -> s1 [90, 65535] { R1000 += 1, R964 += 1 };
  s3 -> s1 [0, 88] { R1000 += 1, R964 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1000 += 1 };
  s3 -> s3 [0, 65535] { R1000 += 1, R964 += 1, R7 += 1 };
  s3 -> s4 [89, 89] { R1000 += 1, R964 += 1 };
  s3 -> s1 [90, 65535] { R1000 += 1, R964 += 1 };
  s4 -> s4 [0, 65535] { R1000 += 1, R964 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1000 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R1002 += 1, R966 += 1, R786 += 1 };
  s0 -> s2 [0, 65535] { R1002 += 1, R965 += 1, R966 += 1 };
  s0 -> s0 [0, 65535] { R1001 += 1, R1002 += 1 };
  s0 -> s3 [0, 65535] { R1002 += 1, R966 += 1, R785 += 1, R786 += 1 };
  s0 -> s4 [91, 91] { R1002 += 1, R966 += 1, R786 += 1 };
  s0 -> s1 [92, 65535] { R1002 += 1, R966 += 1, R786 += 1 };
  s1 -> s1 [0, 65535] { R1002 += 1, R966 += 1, R786 += 1 };
  s1 -> s7 [0, 65535] { R1002 += 1, R966 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1002 += 1 };
  s2 -> s1 [0, 90] { R1002 += 1, R966 += 1, R786 += 1 };
  s2 -> s2 [0, 65535] { R1002 += 1, R965 += 1, R966 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1002 += 1, R966 += 1, R785 += 1, R786 += 1 };
  s2 -> s4 [91, 91] { R1002 += 1, R966 += 1, R786 += 1 };
  s2 -> s1 [92, 65535] { R1002 += 1, R966 += 1, R786 += 1 };
  s3 -> s1 [0, 90] { R1002 += 1, R966 += 1, R786 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1002 += 1 };
  s3 -> s3 [0, 65535] { R1002 += 1, R966 += 1, R785 += 1, R786 += 1 };
  s3 -> s4 [91, 91] { R1002 += 1, R966 += 1, R786 += 1 };
  s3 -> s1 [92, 65535] { R1002 += 1, R966 += 1, R786 += 1 };
  s4 -> s1 [0, 65535] { R1002 += 1, R966 += 1, R786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1002 += 1 };
  s7 -> s7 [0, 65535] { R1002 += 1, R966 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1002 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1004 += 1, R968 += 1, R787 += 1, R788 += 1 };
  s0 -> s2 [0, 65535] { R1004 += 1, R968 += 1, R788 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1003 += 1, R1004 += 1 };
  s0 -> s3 [0, 65535] { R1004 += 1, R967 += 1, R968 += 1 };
  s1 -> s1 [0, 65535] { R1004 += 1, R968 += 1, R787 += 1, R788 += 1 };
  s1 -> s5 [0, 65535] { R1004 += 1 };
  s1 -> s2 [0, 65535] { R1004 += 1, R968 += 1, R788 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1004 += 1 };
  s2 -> s2 [0, 65535] { R1004 += 1, R968 += 1, R788 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1004 += 1, R968 += 1 };
  s3 -> s1 [0, 65535] { R1004 += 1, R968 += 1, R787 += 1, R788 += 1 };
  s3 -> s2 [0, 65535] { R1004 += 1, R968 += 1, R788 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1004 += 1, R967 += 1, R968 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1004 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1004 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1004 += 1, R968 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R1006 += 1, R970 += 1, R940 += 1 };
  s0 -> s0 [0, 65535] { R1005 += 1, R1006 += 1 };
  s0 -> s2 [0, 65535] { R1006 += 1, R969 += 1, R970 += 1 };
  s0 -> s3 [0, 65535] { R1006 += 1, R970 += 1, R939 += 1, R940 += 1 };
  s0 -> s1 [90, 65535] { R1006 += 1, R970 += 1, R940 += 1 };
  s1 -> s1 [0, 88] { R1006 += 1, R970 += 1, R940 += 1 };
  s1 -> s5 [0, 65535] { R1006 += 1 };
  s1 -> s1 [0, 65535] { R1006 += 1, R970 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [90, 65535] { R1006 += 1, R970 += 1, R940 += 1 };
  s2 -> s1 [0, 88] { R1006 += 1, R970 += 1, R940 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1006 += 1, R969 += 1, R970 += 1 };
  s2 -> s3 [0, 65535] { R1006 += 1, R970 += 1, R939 += 1, R940 += 1 };
  s2 -> s1 [90, 65535] { R1006 += 1, R970 += 1, R940 += 1 };
  s3 -> s1 [0, 88] { R1006 += 1, R970 += 1, R940 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1006 += 1 };
  s3 -> s3 [0, 65535] { R1006 += 1, R970 += 1, R939 += 1, R940 += 1 };
  s3 -> s1 [90, 65535] { R1006 += 1, R970 += 1, R940 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1006 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1008 += 1, R972 += 1, R941 += 1, R942 += 1 };
  s0 -> s2 [0, 65535] { R1008 += 1, R972 += 1, R942 += 1, R779 += 1 };
  s0 -> s3 [0, 65535] { R1008 += 1, R971 += 1, R972 += 1 };
  s0 -> s0 [0, 65535] { R1007 += 1, R1008 += 1 };
  s1 -> s1 [0, 65535] { R1008 += 1, R972 += 1, R941 += 1, R942 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1008 += 1 };
  s1 -> s2 [0, 65535] { R1008 += 1, R972 += 1, R942 += 1, R779 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1008 += 1 };
  s2 -> s6 [0, 65535] { R1008 += 1, R972 += 1 };
  s2 -> s2 [0, 65535] { R1008 += 1, R972 += 1, R942 += 1, R779 += 1 };
  s3 -> s1 [0, 65535] { R1008 += 1, R972 += 1, R941 += 1, R942 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1008 += 1, R972 += 1, R942 += 1, R779 += 1 };
  s3 -> s3 [0, 65535] { R1008 += 1, R971 += 1, R972 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1008 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1008 += 1 };
  s6 -> s6 [0, 65535] { R1008 += 1, R972 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1010 += 1, R974 += 1, R943 += 1, R944 += 1 };
  s0 -> s2 [0, 65535] { R1010 += 1, R973 += 1, R974 += 1 };
  s0 -> s0 [0, 65535] { R1009 += 1, R1010 += 1 };
  s0 -> s3 [99, 99] { R1010 += 1, R974 += 1, R944 += 1 };
  s1 -> s1 [0, 65535] { R1010 += 1, R974 += 1, R943 += 1, R944 += 1 };
  s1 -> s3 [99, 99] { R1010 += 1, R974 += 1, R944 += 1 };
  s2 -> s1 [0, 65535] { R1010 += 1, R974 += 1, R943 += 1, R944 += 1 };
  s2 -> s2 [0, 65535] { R1010 += 1, R973 += 1, R974 += 1 };
  s2 -> s3 [99, 99] { R1010 += 1, R974 += 1, R944 += 1 };
  s3 -> s4 [97, 97] { R1010 += 1, R974 += 1, R944 += 1 };
  s4 -> s5 [108, 108] { R1010 += 1, R974 += 1, R944 += 1 };
  s5 -> s6 [104, 104] { R1010 += 1, R974 += 1, R944 += 1 };
  s6 -> s7 [111, 111] { R1010 += 1, R974 += 1, R944 += 1 };
  s7 -> s8 [115, 115] { R1010 += 1, R974 += 1, R944 += 1 };
  s8 -> s9 [116, 116] { R1010 += 1, R974 += 1, R944 += 1 };
  s9 -> s10 [0, 65535] { R1010 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R1010 += 1, R974 += 1 };
  s10 -> s10 [0, 65535] { R1010 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s9, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1012 += 1, R976 += 1, R954 += 1, R780 += 1 };
  s0 -> s2 [0, 65535] { R1012 += 1, R976 += 1, R953 += 1, R954 += 1 };
  s0 -> s0 [0, 65535] { R1011 += 1, R1012 += 1 };
  s0 -> s3 [0, 65535] { R1012 += 1, R975 += 1, R976 += 1 };
  s1 -> s1 [0, 65535] { R1012 += 1, R976 += 1, R954 += 1, R780 += 1 };
  s1 -> s5 [0, 65535] { R1012 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1012 += 1, R976 += 1 };
  s2 -> s1 [0, 65535] { R1012 += 1, R976 += 1, R954 += 1, R780 += 1 };
  s2 -> s5 [0, 65535] { R1012 += 1 };
  s2 -> s2 [0, 65535] { R1012 += 1, R976 += 1, R953 += 1, R954 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1012 += 1, R976 += 1, R954 += 1, R780 += 1 };
  s3 -> s2 [0, 65535] { R1012 += 1, R976 += 1, R953 += 1, R954 += 1 };
  s3 -> s3 [0, 65535] { R1012 += 1, R975 += 1, R976 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1012 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1012 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1012 += 1, R976 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1014 += 1, R978 += 1, R955 += 1, R956 += 1 };
  s0 -> s2 [0, 65535] { R1014 += 1, R977 += 1, R978 += 1 };
  s0 -> s0 [0, 65535] { R1013 += 1, R1014 += 1 };
  s0 -> s3 [108, 108] { R1014 += 1, R978 += 1, R956 += 1 };
  s1 -> s1 [0, 65535] { R1014 += 1, R978 += 1, R955 += 1, R956 += 1 };
  s1 -> s3 [108, 108] { R1014 += 1, R978 += 1, R956 += 1 };
  s2 -> s1 [0, 65535] { R1014 += 1, R978 += 1, R955 += 1, R956 += 1 };
  s2 -> s2 [0, 65535] { R1014 += 1, R977 += 1, R978 += 1 };
  s2 -> s3 [108, 108] { R1014 += 1, R978 += 1, R956 += 1 };
  s3 -> s4 [111, 111] { R1014 += 1, R978 += 1, R956 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1014 += 1 };
  s4 -> s4 [0, 65535] { R1014 += 1, R978 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1014 += 1 };
  accepting s4, s5, s6;
};
};
constraint R1 = R944 && R2 = R952 && R3 = R1014 && R11 = 0 && R12 = R978 && R785 = 0 && R786 = 1 && R787 = 0 && R788 = 1 && R939 = 0 && R940 = R944 && R941 = 0 && R942 = R944 && R943 = 0 && R945 - R978 = 1 && R946 = R952 && R947 - R978 = 1 && R948 = R952 && R949 - R978 = 1 && R950 = R952 && R951 - R978 = 1 && R955 = 0 && R956 = 0 && R957 = 0 && R958 = R978 && R959 = 0 && R960 = R978 && R961 = 0 && R962 = R978 && R963 = 0 && R964 = R978 && R965 = 0 && R966 = R978 && R967 = 0 && R968 = R978 && R969 = 0 && R970 = R978 && R971 = 0 && R972 = R978 && R973 = 0 && R974 = R978 && R975 = 0 && R976 = R978 && R977 = 0 && R979 = 10 && R980 = R1014 && R981 = 10 && R982 = R1014 && R983 = 10 && R984 = R1014 && R985 = 10 && R986 = R1014 && R987 = 10 && R988 = R1014 && R989 = 10 && R990 = R1014 && R991 = 10 && R992 = R1014 && R993 = 10 && R994 = R1014 && R995 = 10 && R996 = R1014 && R997 = 10 && R998 = R1014 && R999 = 10 && R1000 = R1014 && R1001 = 10 && R1002 = R1014 && R1003 = 10 && R1004 = R1014 && R1005 = 10 && R1006 = R1014 && R1007 = 10 && R1008 = R1014 && R1009 = 10 && R1010 = R1014 && R1011 = 10 && R1012 = R1014 && R1013 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R944 && R978 < R952 && -1 < R978 && 9 < R1014 && (R781 != 0 || ((R4 != 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R0 = R782 || R782 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R782 != 1 || -1 < R0) && (R0 = R782 || R782 = 1))))) && (R783 != 0 || ((R4 != 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R0 = R784 || R784 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R784 != 1 || -1 < R0) && (R0 = R784 || R784 = 1))))) && (R780 = 0 || (R953 = 0 && R954 = 0)) && (R781 = 0 || (R4 = 0 && R0 < 0)) && (R783 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
