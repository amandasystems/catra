// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R1074, R1075, R1076, R1077, R1078, R1079, R1080, R1081, R1082, R1083, R1084, R1085, R1086, R1087, R1088, R1089, R1090, R11, R12, R2, R3, R4, R5, R6, R7, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1056 += 1 };
  s0 -> s0 [0, 65535] { R1055 += 1, R1056 += 1 };
  s0 -> s2 [46, 46] { R1056 += 1 };
  s0 -> s3 [47, 47] { R1056 += 1 };
  s0 -> s1 [48, 65535] { R1056 += 1 };
  s1 -> s1 [0, 45] { R1056 += 1 };
  s1 -> s2 [46, 46] { R1056 += 1 };
  s1 -> s3 [47, 47] { R1056 += 1 };
  s1 -> s1 [48, 65535] { R1056 += 1 };
  s2 -> s1 [0, 45] { R1056 += 1 };
  s2 -> s2 [46, 46] { R1056 += 1 };
  s2 -> s3 [47, 47] { R1056 += 1 };
  s2 -> s1 [48, 114] { R1056 += 1 };
  s2 -> s8 [115, 115] { R1056 += 1 };
  s2 -> s1 [116, 65535] { R1056 += 1 };
  s3 -> s3 [0, 45] { R1056 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1056 += 1 };
  s3 -> s3 [47, 65535] { R1056 += 1 };
  s4 -> s3 [0, 45] { R1056 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1056 += 1 };
  s4 -> s3 [47, 114] { R1056 += 1 };
  s4 -> s5 [115, 115] { R1056 += 1 };
  s4 -> s3 [116, 65535] { R1056 += 1 };
  s5 -> s3 [0, 45] { R1056 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1056 += 1 };
  s5 -> s3 [47, 110] { R1056 += 1 };
  s5 -> s6 [111, 111] { R1056 += 1 };
  s5 -> s3 [112, 65535] { R1056 += 1 };
  s6 -> s3 [0, 45] { R1056 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1056 += 1 };
  s6 -> s3 [47, 98] { R1056 += 1 };
  s6 -> s7 [99, 99] { R1056 += 1 };
  s6 -> s3 [100, 65535] { R1056 += 1 };
  s7 -> s3 [0, 45] { R1056 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1056 += 1 };
  s7 -> s3 [47, 106] { R1056 += 1 };
  s7 -> s3 [108, 65535] { R1056 += 1 };
  s8 -> s1 [0, 45] { R1056 += 1 };
  s8 -> s2 [46, 46] { R1056 += 1 };
  s8 -> s3 [47, 47] { R1056 += 1 };
  s8 -> s1 [48, 110] { R1056 += 1 };
  s8 -> s9 [111, 111] { R1056 += 1 };
  s8 -> s1 [112, 65535] { R1056 += 1 };
  s9 -> s1 [0, 45] { R1056 += 1 };
  s9 -> s2 [46, 46] { R1056 += 1 };
  s9 -> s3 [47, 47] { R1056 += 1 };
  s9 -> s1 [48, 98] { R1056 += 1 };
  s9 -> s10 [99, 99] { R1056 += 1 };
  s9 -> s1 [100, 65535] { R1056 += 1 };
  s10 -> s1 [0, 45] { R1056 += 1 };
  s10 -> s2 [46, 46] { R1056 += 1 };
  s10 -> s3 [47, 47] { R1056 += 1 };
  s10 -> s1 [48, 106] { R1056 += 1 };
  s10 -> s1 [108, 65535] { R1056 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1057 += 1, R1058 += 1 };
  s0 -> s1 [0, 65535] { R1058 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1058 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1060 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R1059 += 1, R1060 += 1 };
  s0 -> s2 [0, 65535] { R1060 += 1, R11 += 1, R12 += 1 };
  s0 -> s3 [47, 47] { R1060 += 1 };
  s0 -> s1 [48, 65535] { R1060 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R1060 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R1060 += 1 };
  s1 -> s1 [48, 65535] { R1060 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R1060 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R1060 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R1060 += 1 };
  s2 -> s1 [48, 65535] { R1060 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R1060 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R1062 += 1, R1022 += 1 };
  s0 -> s0 [0, 65535] { R1061 += 1, R1062 += 1 };
  s0 -> s2 [0, 65535] { R1062 += 1, R1021 += 1, R1022 += 1 };
  s0 -> s1 [38, 42] { R1062 += 1, R1022 += 1 };
  s0 -> s1 [44, 45] { R1062 += 1, R1022 += 1 };
  s0 -> s1 [47, 62] { R1062 += 1, R1022 += 1 };
  s0 -> s1 [64, 65535] { R1062 += 1, R1022 += 1 };
  s1 -> s1 [0, 36] { R1062 += 1, R1022 += 1 };
  s1 -> s1 [0, 65535] { R1062 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R1062 += 1, R1022 += 1 };
  s1 -> s1 [44, 45] { R1062 += 1, R1022 += 1 };
  s1 -> s1 [47, 62] { R1062 += 1, R1022 += 1 };
  s1 -> s1 [64, 65535] { R1062 += 1, R1022 += 1 };
  s2 -> s1 [0, 36] { R1062 += 1, R1022 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1062 += 1, R1021 += 1, R1022 += 1 };
  s2 -> s1 [38, 42] { R1062 += 1, R1022 += 1 };
  s2 -> s1 [44, 45] { R1062 += 1, R1022 += 1 };
  s2 -> s1 [47, 62] { R1062 += 1, R1022 += 1 };
  s2 -> s1 [64, 65535] { R1062 += 1, R1022 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1064 += 1, R1024 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R1063 += 1, R1064 += 1 };
  s0 -> s2 [0, 65535] { R1064 += 1, R1023 += 1, R1024 += 1 };
  s1 -> s1 [0, 65535] { R1064 += 1, R1024 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R1064 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1064 += 1, R1024 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1064 += 1, R1023 += 1, R1024 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1064 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R1066 += 1, R1026 += 1, R782 += 1 };
  s0 -> s2 [0, 65535] { R1066 += 1, R1025 += 1, R1026 += 1 };
  s0 -> s3 [0, 65535] { R1066 += 1, R1026 += 1, R781 += 1, R782 += 1 };
  s0 -> s0 [0, 65535] { R1065 += 1, R1066 += 1 };
  s0 -> s4 [63, 63] { R1066 += 1, R1026 += 1, R782 += 1 };
  s0 -> s1 [64, 65535] { R1066 += 1, R1026 += 1, R782 += 1 };
  s1 -> s1 [0, 65535] { R1066 += 1, R1026 += 1, R782 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1066 += 1 };
  s1 -> s7 [0, 65535] { R1066 += 1, R1026 += 1 };
  s2 -> s1 [0, 62] { R1066 += 1, R1026 += 1, R782 += 1 };
  s2 -> s2 [0, 65535] { R1066 += 1, R1025 += 1, R1026 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1066 += 1, R1026 += 1, R781 += 1, R782 += 1 };
  s2 -> s4 [63, 63] { R1066 += 1, R1026 += 1, R782 += 1 };
  s2 -> s1 [64, 65535] { R1066 += 1, R1026 += 1, R782 += 1 };
  s3 -> s1 [0, 62] { R1066 += 1, R1026 += 1, R782 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1066 += 1, R1026 += 1, R781 += 1, R782 += 1 };
  s3 -> s6 [0, 65535] { R1066 += 1 };
  s3 -> s4 [63, 63] { R1066 += 1, R1026 += 1, R782 += 1 };
  s3 -> s1 [64, 65535] { R1066 += 1, R1026 += 1, R782 += 1 };
  s4 -> s1 [0, 65535] { R1066 += 1, R1026 += 1, R782 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1066 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1066 += 1 };
  s7 -> s7 [0, 65535] { R1066 += 1, R1026 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1068 += 1, R1027 += 1, R1028 += 1 };
  s0 -> s2 [0, 65535] { R1068 += 1, R1028 += 1, R784 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R1068 += 1, R1028 += 1, R783 += 1, R784 += 1 };
  s0 -> s0 [0, 65535] { R1067 += 1, R1068 += 1 };
  s1 -> s1 [0, 65535] { R1068 += 1, R1027 += 1, R1028 += 1 };
  s1 -> s2 [0, 65535] { R1068 += 1, R1028 += 1, R784 += 1, R4 += 1 };
  s1 -> s3 [0, 65535] { R1068 += 1, R1028 += 1, R783 += 1, R784 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1068 += 1, R1028 += 1, R784 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R1068 += 1 };
  s2 -> s6 [0, 65535] { R1068 += 1, R1028 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1068 += 1, R1028 += 1, R784 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1068 += 1, R1028 += 1, R783 += 1, R784 += 1 };
  s3 -> s4 [0, 65535] { R1068 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1068 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1068 += 1 };
  s6 -> s6 [0, 65535] { R1068 += 1, R1028 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R1070 += 1, R1034 += 1 };
  s0 -> s2 [0, 65535] { R1070 += 1, R1033 += 1, R1034 += 1 };
  s0 -> s0 [0, 65535] { R1069 += 1, R1070 += 1 };
  s0 -> s1 [45, 63] { R1070 += 1, R1034 += 1 };
  s0 -> s3 [89, 89] { R1070 += 1, R1034 += 1 };
  s0 -> s1 [90, 65535] { R1070 += 1, R1034 += 1 };
  s1 -> s1 [0, 43] { R1070 += 1, R1034 += 1 };
  s1 -> s1 [45, 63] { R1070 += 1, R1034 += 1 };
  s1 -> s3 [89, 89] { R1070 += 1, R1034 += 1 };
  s1 -> s1 [90, 65535] { R1070 += 1, R1034 += 1 };
  s2 -> s1 [0, 43] { R1070 += 1, R1034 += 1 };
  s2 -> s2 [0, 65535] { R1070 += 1, R1033 += 1, R1034 += 1 };
  s2 -> s1 [45, 63] { R1070 += 1, R1034 += 1 };
  s2 -> s3 [89, 89] { R1070 += 1, R1034 += 1 };
  s2 -> s1 [90, 65535] { R1070 += 1, R1034 += 1 };
  s3 -> s3 [0, 43] { R1070 += 1, R1034 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1070 += 1 };
  s3 -> s3 [45, 63] { R1070 += 1, R1034 += 1 };
  s3 -> s3 [89, 65535] { R1070 += 1, R1034 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1071 += 1, R1072 += 1 };
  s0 -> s1 [0, 65535] { R1072 += 1, R1036 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R1072 += 1, R1035 += 1, R1036 += 1 };
  s1 -> s4 [0, 65535] { R1072 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1072 += 1, R1036 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1072 += 1, R1036 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R1072 += 1, R1035 += 1, R1036 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1072 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R1074 += 1, R1038 += 1 };
  s0 -> s0 [0, 65535] { R1073 += 1, R1074 += 1 };
  s0 -> s2 [0, 65535] { R1074 += 1, R1037 += 1, R1038 += 1 };
  s0 -> s3 [0, 65535] { R1074 += 1, R1038 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R1074 += 1, R1038 += 1 };
  s0 -> s1 [59, 65535] { R1074 += 1, R1038 += 1 };
  s1 -> s1 [0, 57] { R1074 += 1, R1038 += 1 };
  s1 -> s1 [0, 65535] { R1074 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R1074 += 1, R1038 += 1 };
  s1 -> s1 [59, 65535] { R1074 += 1, R1038 += 1 };
  s2 -> s1 [0, 57] { R1074 += 1, R1038 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1074 += 1, R1037 += 1, R1038 += 1 };
  s2 -> s3 [0, 65535] { R1074 += 1, R1038 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R1074 += 1, R1038 += 1 };
  s2 -> s1 [59, 65535] { R1074 += 1, R1038 += 1 };
  s3 -> s1 [0, 57] { R1074 += 1, R1038 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1074 += 1 };
  s3 -> s3 [0, 65535] { R1074 += 1, R1038 += 1, R6 += 1 };
  s3 -> s4 [58, 58] { R1074 += 1, R1038 += 1 };
  s3 -> s1 [59, 65535] { R1074 += 1, R1038 += 1 };
  s4 -> s4 [0, 65535] { R1074 += 1, R1038 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1074 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R1076 += 1, R1040 += 1 };
  s0 -> s2 [0, 65535] { R1076 += 1, R1039 += 1, R1040 += 1 };
  s0 -> s0 [0, 65535] { R1075 += 1, R1076 += 1 };
  s0 -> s3 [0, 65535] { R1076 += 1, R1040 += 1, R7 += 1 };
  s0 -> s4 [89, 89] { R1076 += 1, R1040 += 1 };
  s0 -> s1 [90, 65535] { R1076 += 1, R1040 += 1 };
  s1 -> s1 [0, 88] { R1076 += 1, R1040 += 1 };
  s1 -> s1 [0, 65535] { R1076 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [89, 89] { R1076 += 1, R1040 += 1 };
  s1 -> s1 [90, 65535] { R1076 += 1, R1040 += 1 };
  s2 -> s1 [0, 88] { R1076 += 1, R1040 += 1 };
  s2 -> s2 [0, 65535] { R1076 += 1, R1039 += 1, R1040 += 1 };
  s2 -> s3 [0, 65535] { R1076 += 1, R1040 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [89, 89] { R1076 += 1, R1040 += 1 };
  s2 -> s1 [90, 65535] { R1076 += 1, R1040 += 1 };
  s3 -> s1 [0, 88] { R1076 += 1, R1040 += 1 };
  s3 -> s3 [0, 65535] { R1076 += 1, R1040 += 1, R7 += 1 };
  s3 -> s5 [0, 65535] { R1076 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [89, 89] { R1076 += 1, R1040 += 1 };
  s3 -> s1 [90, 65535] { R1076 += 1, R1040 += 1 };
  s4 -> s4 [0, 65535] { R1076 += 1, R1040 += 1 };
  s5 -> s5 [0, 65535] { R1076 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R1078 += 1, R1042 += 1, R786 += 1 };
  s0 -> s0 [0, 65535] { R1077 += 1, R1078 += 1 };
  s0 -> s2 [0, 65535] { R1078 += 1, R1042 += 1, R785 += 1, R786 += 1 };
  s0 -> s3 [0, 65535] { R1078 += 1, R1041 += 1, R1042 += 1 };
  s0 -> s4 [91, 91] { R1078 += 1, R1042 += 1, R786 += 1 };
  s0 -> s1 [92, 65535] { R1078 += 1, R1042 += 1, R786 += 1 };
  s1 -> s1 [0, 65535] { R1078 += 1, R1042 += 1, R786 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R1078 += 1, R1042 += 1 };
  s1 -> s6 [0, 65535] { R1078 += 1 };
  s2 -> s1 [0, 90] { R1078 += 1, R1042 += 1, R786 += 1 };
  s2 -> s2 [0, 65535] { R1078 += 1, R1042 += 1, R785 += 1, R786 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1078 += 1 };
  s2 -> s4 [91, 91] { R1078 += 1, R1042 += 1, R786 += 1 };
  s2 -> s1 [92, 65535] { R1078 += 1, R1042 += 1, R786 += 1 };
  s3 -> s1 [0, 90] { R1078 += 1, R1042 += 1, R786 += 1 };
  s3 -> s2 [0, 65535] { R1078 += 1, R1042 += 1, R785 += 1, R786 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1078 += 1, R1041 += 1, R1042 += 1 };
  s3 -> s4 [91, 91] { R1078 += 1, R1042 += 1, R786 += 1 };
  s3 -> s1 [92, 65535] { R1078 += 1, R1042 += 1, R786 += 1 };
  s4 -> s1 [0, 65535] { R1078 += 1, R1042 += 1, R786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1078 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1078 += 1, R1042 += 1 };
  s7 -> s6 [0, 65535] { R1078 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1080 += 1, R1044 += 1, R788 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1079 += 1, R1080 += 1 };
  s0 -> s2 [0, 65535] { R1080 += 1, R1043 += 1, R1044 += 1 };
  s0 -> s3 [0, 65535] { R1080 += 1, R1044 += 1, R787 += 1, R788 += 1 };
  s1 -> s6 [0, 65535] { R1080 += 1, R1044 += 1 };
  s1 -> s1 [0, 65535] { R1080 += 1, R1044 += 1, R788 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R1080 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1080 += 1, R1044 += 1, R788 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R1080 += 1, R1043 += 1, R1044 += 1 };
  s2 -> s3 [0, 65535] { R1080 += 1, R1044 += 1, R787 += 1, R788 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1080 += 1, R1044 += 1, R788 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1080 += 1, R1044 += 1, R787 += 1, R788 += 1 };
  s3 -> s4 [0, 65535] { R1080 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1080 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1080 += 1, R1044 += 1 };
  s6 -> s4 [0, 65535] { R1080 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R1082 += 1, R1046 += 1, R1016 += 1 };
  s0 -> s0 [0, 65535] { R1081 += 1, R1082 += 1 };
  s0 -> s2 [0, 65535] { R1082 += 1, R1046 += 1, R1015 += 1, R1016 += 1 };
  s0 -> s3 [0, 65535] { R1082 += 1, R1045 += 1, R1046 += 1 };
  s0 -> s1 [90, 65535] { R1082 += 1, R1046 += 1, R1016 += 1 };
  s1 -> s1 [0, 88] { R1082 += 1, R1046 += 1, R1016 += 1 };
  s1 -> s1 [0, 65535] { R1082 += 1, R1046 += 1 };
  s1 -> s5 [0, 65535] { R1082 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [90, 65535] { R1082 += 1, R1046 += 1, R1016 += 1 };
  s2 -> s1 [0, 88] { R1082 += 1, R1046 += 1, R1016 += 1 };
  s2 -> s5 [0, 65535] { R1082 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1082 += 1, R1046 += 1, R1015 += 1, R1016 += 1 };
  s2 -> s1 [90, 65535] { R1082 += 1, R1046 += 1, R1016 += 1 };
  s3 -> s1 [0, 88] { R1082 += 1, R1046 += 1, R1016 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1082 += 1, R1046 += 1, R1015 += 1, R1016 += 1 };
  s3 -> s3 [0, 65535] { R1082 += 1, R1045 += 1, R1046 += 1 };
  s3 -> s1 [90, 65535] { R1082 += 1, R1046 += 1, R1016 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1082 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1084 += 1, R1047 += 1, R1048 += 1 };
  s0 -> s0 [0, 65535] { R1083 += 1, R1084 += 1 };
  s0 -> s2 [0, 65535] { R1084 += 1, R1048 += 1, R1018 += 1, R779 += 1 };
  s0 -> s3 [0, 65535] { R1084 += 1, R1048 += 1, R1017 += 1, R1018 += 1 };
  s1 -> s1 [0, 65535] { R1084 += 1, R1047 += 1, R1048 += 1 };
  s1 -> s2 [0, 65535] { R1084 += 1, R1048 += 1, R1018 += 1, R779 += 1 };
  s1 -> s3 [0, 65535] { R1084 += 1, R1048 += 1, R1017 += 1, R1018 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1084 += 1, R1048 += 1, R1018 += 1, R779 += 1 };
  s2 -> s4 [0, 65535] { R1084 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1084 += 1, R1048 += 1 };
  s3 -> s2 [0, 65535] { R1084 += 1, R1048 += 1, R1018 += 1, R779 += 1 };
  s3 -> s3 [0, 65535] { R1084 += 1, R1048 += 1, R1017 += 1, R1018 += 1 };
  s3 -> s4 [0, 65535] { R1084 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1084 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1084 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1084 += 1, R1048 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1086 += 1, R1050 += 1, R1019 += 1, R1020 += 1 };
  s0 -> s2 [0, 65535] { R1086 += 1, R1049 += 1, R1050 += 1 };
  s0 -> s0 [0, 65535] { R1085 += 1, R1086 += 1 };
  s0 -> s3 [97, 97] { R1086 += 1, R1050 += 1, R1020 += 1 };
  s1 -> s1 [0, 65535] { R1086 += 1, R1050 += 1, R1019 += 1, R1020 += 1 };
  s1 -> s3 [97, 97] { R1086 += 1, R1050 += 1, R1020 += 1 };
  s2 -> s1 [0, 65535] { R1086 += 1, R1050 += 1, R1019 += 1, R1020 += 1 };
  s2 -> s2 [0, 65535] { R1086 += 1, R1049 += 1, R1050 += 1 };
  s2 -> s3 [97, 97] { R1086 += 1, R1050 += 1, R1020 += 1 };
  s3 -> s4 [108, 108] { R1086 += 1, R1050 += 1, R1020 += 1 };
  s4 -> s5 [104, 104] { R1086 += 1, R1050 += 1, R1020 += 1 };
  s5 -> s6 [111, 111] { R1086 += 1, R1050 += 1, R1020 += 1 };
  s6 -> s7 [115, 115] { R1086 += 1, R1050 += 1, R1020 += 1 };
  s7 -> s8 [116, 116] { R1086 += 1, R1050 += 1, R1020 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1086 += 1, R1050 += 1 };
  s8 -> s10 [0, 65535] { R1086 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1086 += 1 };
  accepting s8, s9, s10;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1088 += 1, R1052 += 1, R1029 += 1, R1030 += 1 };
  s0 -> s0 [0, 65535] { R1087 += 1, R1088 += 1 };
  s0 -> s2 [0, 65535] { R1088 += 1, R1051 += 1, R1052 += 1 };
  s0 -> s3 [0, 65535] { R1088 += 1, R1052 += 1, R1030 += 1, R780 += 1 };
  s1 -> s4 [0, 65535] { R1088 += 1 };
  s1 -> s1 [0, 65535] { R1088 += 1, R1052 += 1, R1029 += 1, R1030 += 1 };
  s1 -> s3 [0, 65535] { R1088 += 1, R1052 += 1, R1030 += 1, R780 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R1088 += 1, R1052 += 1, R1029 += 1, R1030 += 1 };
  s2 -> s2 [0, 65535] { R1088 += 1, R1051 += 1, R1052 += 1 };
  s2 -> s3 [0, 65535] { R1088 += 1, R1052 += 1, R1030 += 1, R780 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1088 += 1 };
  s3 -> s3 [0, 65535] { R1088 += 1, R1052 += 1, R1030 += 1, R780 += 1 };
  s3 -> s5 [0, 65535] { R1088 += 1, R1052 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1088 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1088 += 1 };
  s5 -> s5 [0, 65535] { R1088 += 1, R1052 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R1089 += 1, R1090 += 1 };
  s0 -> s1 [0, 65535] { R1090 += 1, R1054 += 1, R1031 += 1, R1032 += 1 };
  s0 -> s2 [0, 65535] { R1090 += 1, R1053 += 1, R1054 += 1 };
  s0 -> s3 [108, 108] { R1090 += 1, R1054 += 1, R1032 += 1 };
  s1 -> s1 [0, 65535] { R1090 += 1, R1054 += 1, R1031 += 1, R1032 += 1 };
  s1 -> s3 [108, 108] { R1090 += 1, R1054 += 1, R1032 += 1 };
  s2 -> s1 [0, 65535] { R1090 += 1, R1054 += 1, R1031 += 1, R1032 += 1 };
  s2 -> s2 [0, 65535] { R1090 += 1, R1053 += 1, R1054 += 1 };
  s2 -> s3 [108, 108] { R1090 += 1, R1054 += 1, R1032 += 1 };
  s3 -> s4 [111, 111] { R1090 += 1, R1054 += 1, R1032 += 1 };
  s4 -> s5 [99, 99] { R1090 += 1, R1054 += 1, R1032 += 1 };
  s5 -> s6 [0, 65535] { R1090 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1090 += 1, R1054 += 1 };
  s6 -> s6 [0, 65535] { R1090 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s5, s6, s7;
};
};
constraint R1 = R1020 && R2 = R1028 && R3 = R1090 && R11 = 0 && R12 = R1054 && R785 = 0 && R786 = 1 && R787 = 0 && R788 = 1 && R1015 = 0 && R1016 = R1020 && R1017 = 0 && R1018 = R1020 && R1019 = 0 && R1021 - R1054 = 1 && R1022 = R1028 && R1023 - R1054 = 1 && R1024 = R1028 && R1025 - R1054 = 1 && R1026 = R1028 && R1027 - R1054 = 1 && R1031 = 0 && R1032 = 0 && R1033 = 0 && R1034 = R1054 && R1035 = 0 && R1036 = R1054 && R1037 = 0 && R1038 = R1054 && R1039 = 0 && R1040 = R1054 && R1041 = 0 && R1042 = R1054 && R1043 = 0 && R1044 = R1054 && R1045 = 0 && R1046 = R1054 && R1047 = 0 && R1048 = R1054 && R1049 = 0 && R1050 = R1054 && R1051 = 0 && R1052 = R1054 && R1053 = 0 && R1055 = 10 && R1056 = R1090 && R1057 = 10 && R1058 = R1090 && R1059 = 10 && R1060 = R1090 && R1061 = 10 && R1062 = R1090 && R1063 = 10 && R1064 = R1090 && R1065 = 10 && R1066 = R1090 && R1067 = 10 && R1068 = R1090 && R1069 = 10 && R1070 = R1090 && R1071 = 10 && R1072 = R1090 && R1073 = 10 && R1074 = R1090 && R1075 = 10 && R1076 = R1090 && R1077 = 10 && R1078 = R1090 && R1079 = 10 && R1080 = R1090 && R1081 = 10 && R1082 = R1090 && R1083 = 10 && R1084 = R1090 && R1085 = 10 && R1086 = R1090 && R1087 = 10 && R1088 = R1090 && R1089 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R1020 && R1054 < R1028 && -1 < R1054 && 9 < R1090 && (R781 != 0 || ((R4 != 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R0 = R782 || R782 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R782 != 1 || -1 < R0) && (R0 = R782 || R782 = 1))))) && (R783 != 0 || ((R4 != 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R0 = R784 || R784 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R784 != 1 || -1 < R0) && (R0 = R784 || R784 = 1))))) && (R780 = 0 || (R1029 = 0 && R1030 = 0)) && (R781 = 0 || (R4 = 0 && R0 < 0)) && (R783 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
