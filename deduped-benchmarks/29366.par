// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R151, R152, R2, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R3, R4, R5, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R266 += 1 };
  s0 -> s0 [0, 65535] { R265 += 1, R266 += 1 };
  s0 -> s2 [46, 46] { R266 += 1 };
  s0 -> s3 [47, 47] { R266 += 1 };
  s0 -> s1 [48, 65535] { R266 += 1 };
  s1 -> s1 [0, 45] { R266 += 1 };
  s1 -> s2 [46, 46] { R266 += 1 };
  s1 -> s3 [47, 47] { R266 += 1 };
  s1 -> s1 [48, 65535] { R266 += 1 };
  s2 -> s1 [0, 45] { R266 += 1 };
  s2 -> s2 [46, 46] { R266 += 1 };
  s2 -> s3 [47, 47] { R266 += 1 };
  s2 -> s1 [48, 114] { R266 += 1 };
  s2 -> s8 [115, 115] { R266 += 1 };
  s2 -> s1 [116, 65535] { R266 += 1 };
  s3 -> s3 [0, 45] { R266 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R266 += 1 };
  s3 -> s3 [47, 65535] { R266 += 1 };
  s4 -> s3 [0, 45] { R266 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R266 += 1 };
  s4 -> s3 [47, 114] { R266 += 1 };
  s4 -> s5 [115, 115] { R266 += 1 };
  s4 -> s3 [116, 65535] { R266 += 1 };
  s5 -> s3 [0, 45] { R266 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R266 += 1 };
  s5 -> s3 [47, 110] { R266 += 1 };
  s5 -> s6 [111, 111] { R266 += 1 };
  s5 -> s3 [112, 65535] { R266 += 1 };
  s6 -> s3 [0, 45] { R266 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R266 += 1 };
  s6 -> s3 [47, 98] { R266 += 1 };
  s6 -> s7 [99, 99] { R266 += 1 };
  s6 -> s3 [100, 65535] { R266 += 1 };
  s7 -> s3 [0, 45] { R266 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R266 += 1 };
  s7 -> s3 [47, 106] { R266 += 1 };
  s7 -> s3 [108, 65535] { R266 += 1 };
  s8 -> s1 [0, 45] { R266 += 1 };
  s8 -> s2 [46, 46] { R266 += 1 };
  s8 -> s3 [47, 47] { R266 += 1 };
  s8 -> s1 [48, 110] { R266 += 1 };
  s8 -> s9 [111, 111] { R266 += 1 };
  s8 -> s1 [112, 65535] { R266 += 1 };
  s9 -> s1 [0, 45] { R266 += 1 };
  s9 -> s2 [46, 46] { R266 += 1 };
  s9 -> s3 [47, 47] { R266 += 1 };
  s9 -> s1 [48, 98] { R266 += 1 };
  s9 -> s10 [99, 99] { R266 += 1 };
  s9 -> s1 [100, 65535] { R266 += 1 };
  s10 -> s1 [0, 45] { R266 += 1 };
  s10 -> s2 [46, 46] { R266 += 1 };
  s10 -> s3 [47, 47] { R266 += 1 };
  s10 -> s1 [48, 106] { R266 += 1 };
  s10 -> s1 [108, 65535] { R266 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R267 += 1, R268 += 1 };
  s0 -> s1 [0, 65535] { R268 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R268 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R270 += 1, R152 += 1 };
  s0 -> s0 [0, 65535] { R269 += 1, R270 += 1 };
  s0 -> s2 [0, 65535] { R270 += 1, R151 += 1, R152 += 1 };
  s0 -> s3 [47, 47] { R270 += 1 };
  s0 -> s1 [48, 65535] { R270 += 1, R152 += 1 };
  s1 -> s1 [0, 46] { R270 += 1, R152 += 1 };
  s1 -> s3 [47, 47] { R270 += 1 };
  s1 -> s1 [48, 65535] { R270 += 1, R152 += 1 };
  s2 -> s1 [0, 46] { R270 += 1, R152 += 1 };
  s2 -> s2 [0, 65535] { R270 += 1, R151 += 1, R152 += 1 };
  s2 -> s3 [47, 47] { R270 += 1 };
  s2 -> s1 [48, 65535] { R270 += 1, R152 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R270 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R272 += 1, R232 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R272 += 1, R231 += 1, R232 += 1 };
  s0 -> s0 [0, 65535] { R271 += 1, R272 += 1 };
  s1 -> s4 [0, 65535] { R272 += 1 };
  s1 -> s1 [0, 65535] { R272 += 1, R232 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R272 += 1, R232 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R272 += 1, R231 += 1, R232 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R272 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R274 += 1, R248 += 1 };
  s0 -> s2 [0, 65535] { R274 += 1, R247 += 1, R248 += 1 };
  s0 -> s0 [0, 65535] { R273 += 1, R274 += 1 };
  s0 -> s3 [64, 64] { R274 += 1, R248 += 1 };
  s0 -> s1 [65, 65535] { R274 += 1, R248 += 1 };
  s1 -> s1 [0, 63] { R274 += 1, R248 += 1 };
  s1 -> s3 [64, 64] { R274 += 1, R248 += 1 };
  s1 -> s1 [65, 65535] { R274 += 1, R248 += 1 };
  s2 -> s1 [0, 63] { R274 += 1, R248 += 1 };
  s2 -> s2 [0, 65535] { R274 += 1, R247 += 1, R248 += 1 };
  s2 -> s3 [64, 64] { R274 += 1, R248 += 1 };
  s2 -> s1 [65, 65535] { R274 += 1, R248 += 1 };
  s3 -> s3 [0, 65535] { R274 += 1, R248 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R274 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R274 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R275 += 1, R276 += 1 };
  s0 -> s1 [0, 65535] { R276 += 1, R250 += 1, R222 += 1 };
  s0 -> s2 [0, 65535] { R276 += 1, R249 += 1, R250 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R276 += 1, R250 += 1, R222 += 1 };
  s1 -> s4 [0, 65535] { R276 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R276 += 1, R250 += 1, R222 += 1 };
  s2 -> s2 [0, 65535] { R276 += 1, R249 += 1, R250 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R276 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R278 += 1, R252 += 1, R234 += 1 };
  s0 -> s2 [0, 65535] { R278 += 1, R251 += 1, R252 += 1 };
  s0 -> s3 [0, 65535] { R278 += 1, R252 += 1, R233 += 1, R234 += 1 };
  s0 -> s0 [0, 65535] { R277 += 1, R278 += 1 };
  s0 -> s4 [58, 58] { R278 += 1, R252 += 1, R234 += 1 };
  s0 -> s1 [59, 63] { R278 += 1, R252 += 1, R234 += 1 };
  s0 -> s1 [65, 65535] { R278 += 1, R252 += 1, R234 += 1 };
  s1 -> s1 [0, 57] { R278 += 1, R252 += 1, R234 += 1 };
  s1 -> s4 [58, 58] { R278 += 1, R252 += 1, R234 += 1 };
  s1 -> s1 [59, 63] { R278 += 1, R252 += 1, R234 += 1 };
  s1 -> s1 [65, 65535] { R278 += 1, R252 += 1, R234 += 1 };
  s2 -> s1 [0, 57] { R278 += 1, R252 += 1, R234 += 1 };
  s2 -> s2 [0, 65535] { R278 += 1, R251 += 1, R252 += 1 };
  s2 -> s3 [0, 65535] { R278 += 1, R252 += 1, R233 += 1, R234 += 1 };
  s2 -> s4 [58, 58] { R278 += 1, R252 += 1, R234 += 1 };
  s2 -> s1 [59, 63] { R278 += 1, R252 += 1, R234 += 1 };
  s2 -> s1 [65, 65535] { R278 += 1, R252 += 1, R234 += 1 };
  s3 -> s1 [0, 57] { R278 += 1, R252 += 1, R234 += 1 };
  s3 -> s3 [0, 65535] { R278 += 1, R252 += 1, R233 += 1, R234 += 1 };
  s3 -> s4 [58, 58] { R278 += 1, R252 += 1, R234 += 1 };
  s3 -> s1 [59, 63] { R278 += 1, R252 += 1, R234 += 1 };
  s3 -> s1 [65, 65535] { R278 += 1, R252 += 1, R234 += 1 };
  s4 -> s4 [0, 63] { R278 += 1, R252 += 1, R234 += 1 };
  s4 -> s4 [0, 65535] { R278 += 1, R252 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R278 += 1 };
  s4 -> s4 [65, 65535] { R278 += 1, R252 += 1, R234 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R278 += 1 };
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R280 += 1, R254 += 1, R236 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R280 += 1, R253 += 1, R254 += 1 };
  s0 -> s3 [0, 65535] { R280 += 1, R254 += 1, R235 += 1, R236 += 1 };
  s0 -> s0 [0, 65535] { R279 += 1, R280 += 1 };
  s1 -> s1 [0, 65535] { R280 += 1, R254 += 1, R236 += 1, R3 += 1 };
  s1 -> s6 [0, 65535] { R280 += 1, R254 += 1 };
  s1 -> s4 [0, 65535] { R280 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R280 += 1, R254 += 1, R236 += 1, R3 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R280 += 1, R253 += 1, R254 += 1 };
  s2 -> s3 [0, 65535] { R280 += 1, R254 += 1, R235 += 1, R236 += 1 };
  s3 -> s1 [0, 65535] { R280 += 1, R254 += 1, R236 += 1, R3 += 1 };
  s3 -> s4 [0, 65535] { R280 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R280 += 1, R254 += 1, R235 += 1, R236 += 1 };
  s4 -> s4 [0, 65535] { R280 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R280 += 1, R254 += 1 };
  s6 -> s4 [0, 65535] { R280 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R282 += 1, R256 += 1, R237 += 1, R238 += 1 };
  s0 -> s0 [0, 65535] { R281 += 1, R282 += 1 };
  s0 -> s3 [0, 65535] { R282 += 1, R255 += 1, R256 += 1 };
  s0 -> s4 [0, 65535] { R282 += 1, R256 += 1, R238 += 1, R7 += 1, R8 += 1 };
  s0 -> s5 [58, 58] { R282 += 1, R256 += 1, R238 += 1 };
  s0 -> s1 [59, 65535] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s1 -> s1 [0, 57] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s1 -> s5 [58, 58] { R282 += 1, R256 += 1, R238 += 1 };
  s1 -> s1 [59, 65535] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s2 -> s1 [0, 57] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R282 += 1, R256 += 1, R237 += 1, R238 += 1 };
  s2 -> s4 [0, 65535] { R282 += 1, R256 += 1, R238 += 1, R7 += 1, R8 += 1 };
  s2 -> s5 [58, 58] { R282 += 1, R256 += 1, R238 += 1 };
  s2 -> s1 [59, 65535] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s3 -> s1 [0, 57] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s3 -> s2 [0, 65535] { R282 += 1, R256 += 1, R237 += 1, R238 += 1 };
  s3 -> s3 [0, 65535] { R282 += 1, R255 += 1, R256 += 1 };
  s3 -> s4 [0, 65535] { R282 += 1, R256 += 1, R238 += 1, R7 += 1, R8 += 1 };
  s3 -> s5 [58, 58] { R282 += 1, R256 += 1, R238 += 1 };
  s3 -> s1 [59, 65535] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s4 -> s1 [0, 57] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s4 -> s4 [0, 65535] { R282 += 1, R256 += 1, R238 += 1, R7 += 1, R8 += 1 };
  s4 -> s5 [58, 58] { R282 += 1, R256 += 1, R238 += 1 };
  s4 -> s1 [59, 65535] { R282 += 1, R256 += 1, R238 += 1, R8 += 1 };
  s5 -> s5 [0, 65535] { R282 += 1, R256 += 1, R238 += 1 };
  s5 -> s6 [0, 65535] { R282 += 1 };
  s5 -> s7 [0, 65535] { R282 += 1, R256 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R282 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R282 += 1 };
  s7 -> s7 [0, 65535] { R282 += 1, R256 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s0 -> s0 [0, 65535] { R283 += 1, R284 += 1 };
  s0 -> s2 [0, 65535] { R284 += 1, R258 += 1, R240 += 1, R223 += 1, R224 += 1 };
  s0 -> s3 [0, 65535] { R284 += 1, R258 += 1, R239 += 1, R240 += 1 };
  s0 -> s4 [0, 65535] { R284 += 1, R257 += 1, R258 += 1 };
  s0 -> s1 [59, 65535] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s1 -> s1 [0, 57] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s1 -> s6 [0, 65535] { R284 += 1 };
  s1 -> s1 [0, 65535] { R284 += 1, R258 += 1, R240 += 1 };
  s1 -> s7 [0, 65535] { R284 += 1, R258 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [59, 65535] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s2 -> s1 [0, 57] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s2 -> s6 [0, 65535] { R284 += 1 };
  s2 -> s7 [0, 65535] { R284 += 1, R258 += 1 };
  s2 -> s2 [0, 65535] { R284 += 1, R258 += 1, R240 += 1, R223 += 1, R224 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [59, 65535] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s3 -> s1 [0, 57] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s3 -> s6 [0, 65535] { R284 += 1 };
  s3 -> s2 [0, 65535] { R284 += 1, R258 += 1, R240 += 1, R223 += 1, R224 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R284 += 1, R258 += 1, R239 += 1, R240 += 1 };
  s3 -> s1 [59, 65535] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s4 -> s1 [0, 57] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s4 -> s2 [0, 65535] { R284 += 1, R258 += 1, R240 += 1, R223 += 1, R224 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R284 += 1, R258 += 1, R239 += 1, R240 += 1 };
  s4 -> s4 [0, 65535] { R284 += 1, R257 += 1, R258 += 1 };
  s4 -> s1 [59, 65535] { R284 += 1, R258 += 1, R240 += 1, R224 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R284 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R284 += 1 };
  s7 -> s7 [0, 65535] { R284 += 1, R258 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R286 += 1, R260 += 1, R242 += 1, R225 += 1, R226 += 1 };
  s0 -> s2 [0, 65535] { R286 += 1, R259 += 1, R260 += 1 };
  s0 -> s0 [0, 65535] { R285 += 1, R286 += 1 };
  s0 -> s3 [0, 65535] { R286 += 1, R260 += 1, R241 += 1, R242 += 1 };
  s0 -> s4 [0, 65535] { R286 += 1, R260 += 1, R242 += 1, R226 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R286 += 1 };
  s1 -> s6 [0, 65535] { R286 += 1, R260 += 1 };
  s1 -> s1 [0, 65535] { R286 += 1, R260 += 1, R242 += 1, R225 += 1, R226 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [0, 65535] { R286 += 1, R260 += 1, R242 += 1, R226 += 1, R1 += 1 };
  s2 -> s1 [0, 65535] { R286 += 1, R260 += 1, R242 += 1, R225 += 1, R226 += 1 };
  s2 -> s2 [0, 65535] { R286 += 1, R259 += 1, R260 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R286 += 1, R260 += 1, R241 += 1, R242 += 1 };
  s2 -> s4 [0, 65535] { R286 += 1, R260 += 1, R242 += 1, R226 += 1, R1 += 1 };
  s3 -> s5 [0, 65535] { R286 += 1 };
  s3 -> s1 [0, 65535] { R286 += 1, R260 += 1, R242 += 1, R225 += 1, R226 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R286 += 1, R260 += 1, R241 += 1, R242 += 1 };
  s3 -> s4 [0, 65535] { R286 += 1, R260 += 1, R242 += 1, R226 += 1, R1 += 1 };
  s4 -> s5 [0, 65535] { R286 += 1 };
  s4 -> s6 [0, 65535] { R286 += 1, R260 += 1 };
  s4 -> s7 [0, 65535] { R286 += 1, R260 += 1, R242 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R286 += 1, R260 += 1, R242 += 1, R226 += 1, R1 += 1 };
  s5 -> s5 [0, 65535] { R286 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s5 [0, 65535] { R286 += 1 };
  s6 -> s6 [0, 65535] { R286 += 1, R260 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R286 += 1 };
  s7 -> s6 [0, 65535] { R286 += 1, R260 += 1 };
  s7 -> s7 [0, 65535] { R286 += 1, R260 += 1, R242 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 36] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s0 -> s2 [0, 65535] { R288 += 1, R262 += 1, R243 += 1, R244 += 1 };
  s0 -> s3 [0, 65535] { R288 += 1, R261 += 1, R262 += 1 };
  s0 -> s0 [0, 65535] { R287 += 1, R288 += 1 };
  s0 -> s4 [0, 65535] { R288 += 1, R262 += 1, R244 += 1, R227 += 1, R228 += 1 };
  s0 -> s5 [37, 37] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s0 -> s1 [38, 42] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s0 -> s1 [44, 65535] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s1 -> s1 [0, 36] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s1 -> s5 [37, 37] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s1 -> s1 [38, 42] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s1 -> s1 [44, 65535] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s2 -> s1 [0, 36] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s2 -> s2 [0, 65535] { R288 += 1, R262 += 1, R243 += 1, R244 += 1 };
  s2 -> s4 [0, 65535] { R288 += 1, R262 += 1, R244 += 1, R227 += 1, R228 += 1 };
  s2 -> s5 [37, 37] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s2 -> s1 [38, 42] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s2 -> s1 [44, 65535] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s3 -> s1 [0, 36] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s3 -> s2 [0, 65535] { R288 += 1, R262 += 1, R243 += 1, R244 += 1 };
  s3 -> s3 [0, 65535] { R288 += 1, R261 += 1, R262 += 1 };
  s3 -> s4 [0, 65535] { R288 += 1, R262 += 1, R244 += 1, R227 += 1, R228 += 1 };
  s3 -> s5 [37, 37] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s3 -> s1 [38, 42] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s3 -> s1 [44, 65535] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s4 -> s1 [0, 36] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s4 -> s4 [0, 65535] { R288 += 1, R262 += 1, R244 += 1, R227 += 1, R228 += 1 };
  s4 -> s5 [37, 37] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s4 -> s1 [38, 42] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s4 -> s1 [44, 65535] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s5 -> s5 [0, 42] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s5 -> s6 [0, 65535] { R288 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R288 += 1, R262 += 1, R244 += 1 };
  s5 -> s8 [0, 65535] { R288 += 1, R262 += 1 };
  s5 -> s5 [44, 65535] { R288 += 1, R262 += 1, R244 += 1, R228 += 1 };
  s6 -> s6 [0, 65535] { R288 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R288 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R288 += 1, R262 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R289 += 1, R290 += 1 };
  s0 -> s1 [0, 65535] { R290 += 1, R263 += 1, R264 += 1 };
  s0 -> s2 [0, 65535] { R290 += 1, R264 += 1, R246 += 1, R229 += 1, R230 += 1 };
  s0 -> s3 [0, 65535] { R290 += 1, R264 += 1, R245 += 1, R246 += 1 };
  s0 -> s4 [0, 65535] { R290 += 1, R264 += 1, R246 += 1, R230 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R290 += 1, R263 += 1, R264 += 1 };
  s1 -> s2 [0, 65535] { R290 += 1, R264 += 1, R246 += 1, R229 += 1, R230 += 1 };
  s1 -> s3 [0, 65535] { R290 += 1, R264 += 1, R245 += 1, R246 += 1 };
  s1 -> s4 [0, 65535] { R290 += 1, R264 += 1, R246 += 1, R230 += 1, R0 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R290 += 1, R264 += 1, R246 += 1, R229 += 1, R230 += 1 };
  s2 -> s4 [0, 65535] { R290 += 1, R264 += 1, R246 += 1, R230 += 1, R0 += 1 };
  s2 -> s5 [0, 65535] { R290 += 1, R264 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R290 += 1 };
  s3 -> s2 [0, 65535] { R290 += 1, R264 += 1, R246 += 1, R229 += 1, R230 += 1 };
  s3 -> s3 [0, 65535] { R290 += 1, R264 += 1, R245 += 1, R246 += 1 };
  s3 -> s4 [0, 65535] { R290 += 1, R264 += 1, R246 += 1, R230 += 1, R0 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R290 += 1 };
  s4 -> s4 [0, 65535] { R290 += 1, R264 += 1, R246 += 1, R230 += 1, R0 += 1 };
  s4 -> s5 [0, 65535] { R290 += 1, R264 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R290 += 1, R264 += 1, R246 += 1 };
  s4 -> s8 [0, 65535] { R290 += 1 };
  s5 -> s5 [0, 65535] { R290 += 1, R264 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s8 [0, 65535] { R290 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R290 += 1, R264 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R290 += 1, R264 += 1, R246 += 1 };
  s7 -> s8 [0, 65535] { R290 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R290 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R226 && R4 = R232 && R5 = R290 && R7 = 0 && R8 = R230 && R151 = 0 && R152 = R262 && R223 - R230 = 1 && R224 = R226 && R225 - R230 = 1 && R227 = 0 && R228 = R230 && R229 = 0 && R231 - R262 = 1 && R233 = 0 && R235 = 0 && R237 = 0 && R239 = 0 && R241 = 0 && R243 = 0 && R245 = 0 && R247 = 0 && R248 = R262 && R251 = 0 && R252 = R262 && R255 = 0 && R256 = R262 && R261 = 0 && R265 = 10 && R266 = R290 && R267 = 10 && R268 = R290 && R269 = 10 && R270 = R290 && R271 = 10 && R272 = R290 && R273 = 10 && R274 = R290 && R275 = 10 && R276 = R290 && R277 = 10 && R278 = R290 && R279 = 10 && R280 = R290 && R281 = 10 && R282 = R290 && R283 = 10 && R284 = R290 && R285 = 10 && R286 = R290 && R287 = 10 && R288 = R290 && R289 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R230 < R226 && -1 < R230 && R262 < R232 && R234 < 11 && R236 < 11 && R238 < 11 && R240 < 11 && R242 < 11 && R244 < 11 && R246 < 11 && -1 < R262 && 9 < R290 && (R234 != 10 || 9 < R222) && (R236 != 10 || 9 < R222) && (R238 != 10 || 9 < R222) && (R240 != 10 || 9 < R222) && (R242 != 10 || 9 < R222) && (R244 != 10 || 9 < R222) && (R246 != 10 || 9 < R222) && (R249 != 0 || R250 = R262 || (R222 = 0 && R262 = 0)) && (R253 != 0 || R254 = R262 || (R222 = 0 && R262 = 0)) && (R257 != 0 || R258 = R262 || (R222 = 0 && R262 = 0)) && (R259 != 0 || R260 = R262 || (R222 = 0 && R262 = 0)) && (R263 != 0 || R262 = R264 || (R222 = 0 && R262 = 0)) && (R222 = R234 || 9 < R234) && (R222 = R236 || 9 < R236) && (R222 = R238 || 9 < R238) && (R222 = R240 || 9 < R240) && (R222 = R242 || 9 < R242) && (R222 = R244 || 9 < R244) && (R222 = R246 || 9 < R246) && (R249 = 0 || (R222 = 0 && R262 = 0)) && (R253 = 0 || (R222 = 0 && R262 = 0)) && (R257 = 0 || (R222 = 0 && R262 = 0)) && (R259 = 0 || (R222 = 0 && R262 = 0)) && (R263 = 0 || (R222 = 0 && R262 = 0));
// End of Parikh automata intersection problem
