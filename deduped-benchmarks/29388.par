// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R2, R3, R4, R5, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R80 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s2 [46, 46] { R80 += 1 };
  s0 -> s3 [47, 47] { R80 += 1 };
  s0 -> s1 [48, 65535] { R80 += 1 };
  s1 -> s1 [0, 45] { R80 += 1 };
  s1 -> s2 [46, 46] { R80 += 1 };
  s1 -> s3 [47, 47] { R80 += 1 };
  s1 -> s1 [48, 65535] { R80 += 1 };
  s2 -> s1 [0, 45] { R80 += 1 };
  s2 -> s2 [46, 46] { R80 += 1 };
  s2 -> s3 [47, 47] { R80 += 1 };
  s2 -> s1 [48, 114] { R80 += 1 };
  s2 -> s8 [115, 115] { R80 += 1 };
  s2 -> s1 [116, 65535] { R80 += 1 };
  s3 -> s3 [0, 45] { R80 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R80 += 1 };
  s3 -> s3 [47, 65535] { R80 += 1 };
  s4 -> s3 [0, 45] { R80 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R80 += 1 };
  s4 -> s3 [47, 114] { R80 += 1 };
  s4 -> s5 [115, 115] { R80 += 1 };
  s4 -> s3 [116, 65535] { R80 += 1 };
  s5 -> s3 [0, 45] { R80 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R80 += 1 };
  s5 -> s3 [47, 110] { R80 += 1 };
  s5 -> s6 [111, 111] { R80 += 1 };
  s5 -> s3 [112, 65535] { R80 += 1 };
  s6 -> s3 [0, 45] { R80 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R80 += 1 };
  s6 -> s3 [47, 98] { R80 += 1 };
  s6 -> s7 [99, 99] { R80 += 1 };
  s6 -> s3 [100, 65535] { R80 += 1 };
  s7 -> s3 [0, 45] { R80 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R80 += 1 };
  s7 -> s3 [47, 106] { R80 += 1 };
  s7 -> s3 [108, 65535] { R80 += 1 };
  s8 -> s1 [0, 45] { R80 += 1 };
  s8 -> s2 [46, 46] { R80 += 1 };
  s8 -> s3 [47, 47] { R80 += 1 };
  s8 -> s1 [48, 110] { R80 += 1 };
  s8 -> s9 [111, 111] { R80 += 1 };
  s8 -> s1 [112, 65535] { R80 += 1 };
  s9 -> s1 [0, 45] { R80 += 1 };
  s9 -> s2 [46, 46] { R80 += 1 };
  s9 -> s3 [47, 47] { R80 += 1 };
  s9 -> s1 [48, 98] { R80 += 1 };
  s9 -> s10 [99, 99] { R80 += 1 };
  s9 -> s1 [100, 65535] { R80 += 1 };
  s10 -> s1 [0, 45] { R80 += 1 };
  s10 -> s2 [46, 46] { R80 += 1 };
  s10 -> s3 [47, 47] { R80 += 1 };
  s10 -> s1 [48, 106] { R80 += 1 };
  s10 -> s1 [108, 65535] { R80 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [0, 65535] { R82 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R84 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R84 += 1, R7 += 1, R8 += 1 };
  s0 -> s3 [47, 47] { R84 += 1 };
  s0 -> s1 [48, 65535] { R84 += 1, R8 += 1 };
  s1 -> s1 [0, 46] { R84 += 1, R8 += 1 };
  s1 -> s3 [47, 47] { R84 += 1 };
  s1 -> s1 [48, 65535] { R84 += 1, R8 += 1 };
  s2 -> s1 [0, 46] { R84 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [47, 47] { R84 += 1 };
  s2 -> s1 [48, 65535] { R84 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R84 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R86 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R86 += 1, R64 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R86 += 1, R63 += 1, R64 += 1 };
  s1 -> s2 [0, 65535] { R86 += 1, R64 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R86 += 1, R64 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R86 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R88 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R88 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s3 [64, 64] { R88 += 1, R66 += 1 };
  s0 -> s1 [65, 65535] { R88 += 1, R66 += 1 };
  s1 -> s1 [0, 63] { R88 += 1, R66 += 1 };
  s1 -> s3 [64, 64] { R88 += 1, R66 += 1 };
  s1 -> s1 [65, 65535] { R88 += 1, R66 += 1 };
  s2 -> s1 [0, 63] { R88 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R88 += 1, R65 += 1, R66 += 1 };
  s2 -> s3 [64, 64] { R88 += 1, R66 += 1 };
  s2 -> s1 [65, 65535] { R88 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R88 += 1 };
  s3 -> s3 [0, 65535] { R88 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R88 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s0 -> s1 [0, 65535] { R90 += 1, R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R90 += 1, R68 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R90 += 1, R67 += 1, R68 += 1 };
  s1 -> s2 [0, 65535] { R90 += 1, R68 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R90 += 1 };
  s2 -> s2 [0, 65535] { R90 += 1, R68 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R90 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R92 += 1, R69 += 1, R70 += 1 };
  s0 -> s2 [0, 65535] { R92 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R92 += 1, R69 += 1, R70 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R92 += 1, R70 += 1 };
  s2 -> s3 [0, 65535] { R92 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R92 += 1, R70 += 1 };
  s3 -> s3 [0, 65535] { R92 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 36] { R94 += 1, R72 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R94 += 1, R71 += 1, R72 += 1 };
  s0 -> s3 [0, 65535] { R94 += 1, R72 += 1, R55 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s0 -> s4 [37, 37] { R94 += 1, R72 += 1, R56 += 1 };
  s0 -> s1 [38, 42] { R94 += 1, R72 += 1, R56 += 1 };
  s0 -> s1 [44, 57] { R94 += 1, R72 += 1, R56 += 1 };
  s0 -> s1 [59, 63] { R94 += 1, R72 += 1, R56 += 1 };
  s0 -> s1 [65, 65535] { R94 += 1, R72 += 1, R56 += 1 };
  s1 -> s1 [0, 36] { R94 += 1, R72 += 1, R56 += 1 };
  s1 -> s4 [37, 37] { R94 += 1, R72 += 1, R56 += 1 };
  s1 -> s1 [38, 42] { R94 += 1, R72 += 1, R56 += 1 };
  s1 -> s1 [44, 57] { R94 += 1, R72 += 1, R56 += 1 };
  s1 -> s1 [59, 63] { R94 += 1, R72 += 1, R56 += 1 };
  s1 -> s1 [65, 65535] { R94 += 1, R72 += 1, R56 += 1 };
  s2 -> s1 [0, 36] { R94 += 1, R72 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R94 += 1, R71 += 1, R72 += 1 };
  s2 -> s3 [0, 65535] { R94 += 1, R72 += 1, R55 += 1, R56 += 1 };
  s2 -> s4 [37, 37] { R94 += 1, R72 += 1, R56 += 1 };
  s2 -> s1 [38, 42] { R94 += 1, R72 += 1, R56 += 1 };
  s2 -> s1 [44, 57] { R94 += 1, R72 += 1, R56 += 1 };
  s2 -> s1 [59, 63] { R94 += 1, R72 += 1, R56 += 1 };
  s2 -> s1 [65, 65535] { R94 += 1, R72 += 1, R56 += 1 };
  s3 -> s1 [0, 36] { R94 += 1, R72 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R94 += 1, R72 += 1, R55 += 1, R56 += 1 };
  s3 -> s4 [37, 37] { R94 += 1, R72 += 1, R56 += 1 };
  s3 -> s1 [38, 42] { R94 += 1, R72 += 1, R56 += 1 };
  s3 -> s1 [44, 57] { R94 += 1, R72 += 1, R56 += 1 };
  s3 -> s1 [59, 63] { R94 += 1, R72 += 1, R56 += 1 };
  s3 -> s1 [65, 65535] { R94 += 1, R72 += 1, R56 += 1 };
  s4 -> s4 [0, 42] { R94 += 1, R72 += 1, R56 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R94 += 1, R72 += 1 };
  s4 -> s6 [0, 65535] { R94 += 1 };
  s4 -> s4 [44, 57] { R94 += 1, R72 += 1, R56 += 1 };
  s4 -> s4 [59, 63] { R94 += 1, R72 += 1, R56 += 1 };
  s4 -> s4 [65, 65535] { R94 += 1, R72 += 1, R56 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R94 += 1 };
  accepting s4, s5, s6;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R96 += 1, R74 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R96 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [0, 65535] { R96 += 1, R74 += 1, R58 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535] { R96 += 1 };
  s1 -> s1 [0, 65535] { R96 += 1, R74 += 1, R57 += 1, R58 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R96 += 1, R74 += 1, R58 += 1, R0 += 1 };
  s2 -> s1 [0, 65535] { R96 += 1, R74 += 1, R57 += 1, R58 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R96 += 1, R73 += 1, R74 += 1 };
  s2 -> s3 [0, 65535] { R96 += 1, R74 += 1, R58 += 1, R0 += 1 };
  s3 -> s4 [0, 65535] { R96 += 1 };
  s3 -> s5 [0, 65535] { R96 += 1, R74 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R96 += 1, R74 += 1, R58 += 1, R0 += 1 };
  s4 -> s4 [0, 65535] { R96 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R96 += 1 };
  s5 -> s5 [0, 65535] { R96 += 1, R74 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 36] { R98 += 1, R76 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R98 += 1, R76 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s3 [0, 65535] { R98 += 1, R75 += 1, R76 += 1 };
  s0 -> s1 [38, 42] { R98 += 1, R76 += 1, R60 += 1 };
  s0 -> s1 [44, 57] { R98 += 1, R76 += 1, R60 += 1 };
  s0 -> s1 [59, 63] { R98 += 1, R76 += 1, R60 += 1 };
  s0 -> s1 [65, 65535] { R98 += 1, R76 += 1, R60 += 1 };
  s1 -> s1 [0, 36] { R98 += 1, R76 += 1, R60 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R98 += 1, R76 += 1 };
  s1 -> s5 [0, 65535] { R98 += 1 };
  s1 -> s1 [38, 42] { R98 += 1, R76 += 1, R60 += 1 };
  s1 -> s1 [44, 57] { R98 += 1, R76 += 1, R60 += 1 };
  s1 -> s1 [59, 63] { R98 += 1, R76 += 1, R60 += 1 };
  s1 -> s1 [65, 65535] { R98 += 1, R76 += 1, R60 += 1 };
  s2 -> s1 [0, 36] { R98 += 1, R76 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R98 += 1, R76 += 1, R59 += 1, R60 += 1 };
  s2 -> s5 [0, 65535] { R98 += 1 };
  s2 -> s1 [38, 42] { R98 += 1, R76 += 1, R60 += 1 };
  s2 -> s1 [44, 57] { R98 += 1, R76 += 1, R60 += 1 };
  s2 -> s1 [59, 63] { R98 += 1, R76 += 1, R60 += 1 };
  s2 -> s1 [65, 65535] { R98 += 1, R76 += 1, R60 += 1 };
  s3 -> s1 [0, 36] { R98 += 1, R76 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R98 += 1, R76 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535] { R98 += 1, R75 += 1, R76 += 1 };
  s3 -> s1 [38, 42] { R98 += 1, R76 += 1, R60 += 1 };
  s3 -> s1 [44, 57] { R98 += 1, R76 += 1, R60 += 1 };
  s3 -> s1 [59, 63] { R98 += 1, R76 += 1, R60 += 1 };
  s3 -> s1 [65, 65535] { R98 += 1, R76 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R98 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s1 [0, 65535] { R100 += 1, R78 += 1, R61 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R100 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R100 += 1, R78 += 1, R62 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R100 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R100 += 1, R78 += 1, R61 += 1, R62 += 1 };
  s1 -> s3 [0, 65535] { R100 += 1, R78 += 1, R62 += 1, R1 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R100 += 1, R78 += 1, R61 += 1, R62 += 1 };
  s2 -> s2 [0, 65535] { R100 += 1, R77 += 1, R78 += 1 };
  s2 -> s3 [0, 65535] { R100 += 1, R78 += 1, R62 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R100 += 1 };
  s3 -> s5 [0, 65535] { R100 += 1, R78 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R100 += 1, R78 += 1, R62 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R100 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R100 += 1 };
  s5 -> s5 [0, 65535] { R100 += 1, R78 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R3 = 21 && R4 = R64 && R5 = R100 && R7 = 0 && R8 = R78 && R55 = 0 && R56 = 21 && R57 = 0 && R58 = 21 && R59 = 0 && R60 = 20 && R61 = 0 && R62 = 20 && R63 - R78 = 1 && R65 = 0 && R66 = R78 && R67 = 0 && R68 = R78 && R69 = 0 && R70 = R78 && R71 = 0 && R72 = R78 && R73 = 0 && R74 = R78 && R75 = 0 && R76 = R78 && R77 = 0 && R79 = 10 && R80 = R100 && R81 = 10 && R82 = R100 && R83 = 10 && R84 = R100 && R85 = 10 && R86 = R100 && R87 = 10 && R88 = R100 && R89 = 10 && R90 = R100 && R91 = 10 && R92 = R100 && R93 = 10 && R94 = R100 && R95 = 10 && R96 = R100 && R97 = 10 && R98 = R100 && R99 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R78 < R64 && -1 < R78 && 9 < R100;
// End of Parikh automata intersection problem
