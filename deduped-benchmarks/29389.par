// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R1997, R2, R2000, R2003, R2005, R2006, R2253, R2254, R2376, R2377, R2378, R2379, R2380, R2381, R2382, R2383, R2384, R2385, R2386, R2387, R2388, R2389, R2390, R2391, R2392, R2393, R2394, R2395, R2396, R2397, R2398, R2399, R2400, R2401, R2402, R2403, R2404, R2405, R2406, R2407, R2408, R2409, R2410, R2411, R2412, R2413, R2414, R2415, R2416, R2417, R2418, R2419, R2420, R2421, R2422, R2423, R2424, R2425, R2426, R2427, R2428, R2429, R2430, R2431, R2432, R2433, R2434, R2435, R2436, R2437, R2438, R2439, R2440, R2441, R2442, R2443, R2444, R2445, R2446, R2447, R2448, R2449, R2450, R2451, R2452, R2453, R2454, R2455, R2456, R2457, R2458, R2459, R2460, R2461, R2462, R2463, R2464, R2465, R2466, R2467, R2468, R2469, R2470, R2471, R2472, R2473, R2474, R2475, R2476, R2477, R2478, R2479, R2480, R2481, R2482, R2483, R2484, R2485, R2486, R2487, R2488, R2489, R2490, R2491, R2492, R2493, R2494, R2495, R2496, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2452 += 1 };
  s0 -> s0 [0, 65535] { R2451 += 1, R2452 += 1 };
  s0 -> s2 [46, 46] { R2452 += 1 };
  s0 -> s3 [47, 47] { R2452 += 1 };
  s0 -> s1 [48, 65535] { R2452 += 1 };
  s1 -> s1 [0, 45] { R2452 += 1 };
  s1 -> s2 [46, 46] { R2452 += 1 };
  s1 -> s3 [47, 47] { R2452 += 1 };
  s1 -> s1 [48, 65535] { R2452 += 1 };
  s2 -> s1 [0, 45] { R2452 += 1 };
  s2 -> s2 [46, 46] { R2452 += 1 };
  s2 -> s3 [47, 47] { R2452 += 1 };
  s2 -> s1 [48, 114] { R2452 += 1 };
  s2 -> s8 [115, 115] { R2452 += 1 };
  s2 -> s1 [116, 65535] { R2452 += 1 };
  s3 -> s3 [0, 45] { R2452 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2452 += 1 };
  s3 -> s3 [47, 65535] { R2452 += 1 };
  s4 -> s3 [0, 45] { R2452 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2452 += 1 };
  s4 -> s3 [47, 114] { R2452 += 1 };
  s4 -> s5 [115, 115] { R2452 += 1 };
  s4 -> s3 [116, 65535] { R2452 += 1 };
  s5 -> s3 [0, 45] { R2452 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2452 += 1 };
  s5 -> s3 [47, 110] { R2452 += 1 };
  s5 -> s6 [111, 111] { R2452 += 1 };
  s5 -> s3 [112, 65535] { R2452 += 1 };
  s6 -> s3 [0, 45] { R2452 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2452 += 1 };
  s6 -> s3 [47, 98] { R2452 += 1 };
  s6 -> s7 [99, 99] { R2452 += 1 };
  s6 -> s3 [100, 65535] { R2452 += 1 };
  s7 -> s3 [0, 45] { R2452 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2452 += 1 };
  s7 -> s3 [47, 106] { R2452 += 1 };
  s7 -> s3 [108, 65535] { R2452 += 1 };
  s8 -> s1 [0, 45] { R2452 += 1 };
  s8 -> s2 [46, 46] { R2452 += 1 };
  s8 -> s3 [47, 47] { R2452 += 1 };
  s8 -> s1 [48, 110] { R2452 += 1 };
  s8 -> s9 [111, 111] { R2452 += 1 };
  s8 -> s1 [112, 65535] { R2452 += 1 };
  s9 -> s1 [0, 45] { R2452 += 1 };
  s9 -> s2 [46, 46] { R2452 += 1 };
  s9 -> s3 [47, 47] { R2452 += 1 };
  s9 -> s1 [48, 98] { R2452 += 1 };
  s9 -> s10 [99, 99] { R2452 += 1 };
  s9 -> s1 [100, 65535] { R2452 += 1 };
  s10 -> s1 [0, 45] { R2452 += 1 };
  s10 -> s2 [46, 46] { R2452 += 1 };
  s10 -> s3 [47, 47] { R2452 += 1 };
  s10 -> s1 [48, 106] { R2452 += 1 };
  s10 -> s1 [108, 65535] { R2452 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2454 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2453 += 1, R2454 += 1 };
  s1 -> s1 [0, 65535] { R2454 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2456 += 1, R2254 += 1 };
  s0 -> s0 [0, 65535] { R2455 += 1, R2456 += 1 };
  s0 -> s2 [0, 65535] { R2456 += 1, R2253 += 1, R2254 += 1 };
  s0 -> s3 [47, 47] { R2456 += 1 };
  s0 -> s1 [48, 65535] { R2456 += 1, R2254 += 1 };
  s1 -> s1 [0, 46] { R2456 += 1, R2254 += 1 };
  s1 -> s3 [47, 47] { R2456 += 1 };
  s1 -> s1 [48, 65535] { R2456 += 1, R2254 += 1 };
  s2 -> s1 [0, 46] { R2456 += 1, R2254 += 1 };
  s2 -> s2 [0, 65535] { R2456 += 1, R2253 += 1, R2254 += 1 };
  s2 -> s3 [47, 47] { R2456 += 1 };
  s2 -> s1 [48, 65535] { R2456 += 1, R2254 += 1 };
  s3 -> s3 [0, 65535] { R2456 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 62] { R2458 += 1, R2412 += 1 };
  s0 -> s2 [0, 65535] { R2458 += 1, R2411 += 1, R2412 += 1 };
  s0 -> s0 [0, 65535] { R2457 += 1, R2458 += 1 };
  s0 -> s3 [63, 63] { R2458 += 1, R2412 += 1 };
  s0 -> s1 [64, 65535] { R2458 += 1, R2412 += 1 };
  s1 -> s1 [0, 62] { R2458 += 1, R2412 += 1 };
  s1 -> s3 [63, 63] { R2458 += 1, R2412 += 1 };
  s1 -> s1 [64, 65535] { R2458 += 1, R2412 += 1 };
  s2 -> s1 [0, 62] { R2458 += 1, R2412 += 1 };
  s2 -> s2 [0, 65535] { R2458 += 1, R2411 += 1, R2412 += 1 };
  s2 -> s3 [63, 63] { R2458 += 1, R2412 += 1 };
  s2 -> s1 [64, 65535] { R2458 += 1, R2412 += 1 };
  s3 -> s3 [0, 65535] { R2458 += 1, R2412 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2458 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2458 += 1 };
  accepting s3, s4, s5;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R2460 += 1, R2414 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R2460 += 1, R2413 += 1, R2414 += 1 };
  s0 -> s0 [0, 65535] { R2459 += 1, R2460 += 1 };
  s1 -> s1 [0, 65535] { R2460 += 1, R2414 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R2460 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2460 += 1, R2414 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R2460 += 1, R2413 += 1, R2414 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2460 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2462 += 1, R2416 += 1, R2006 += 1 };
  s0 -> s2 [0, 65535] { R2462 += 1, R2416 += 1, R2005 += 1, R2006 += 1 };
  s0 -> s3 [0, 65535] { R2462 += 1, R2415 += 1, R2416 += 1 };
  s0 -> s0 [0, 65535] { R2461 += 1, R2462 += 1 };
  s0 -> s4 [63, 63] { R2462 += 1, R2416 += 1 };
  s0 -> s1 [64, 65535] { R2462 += 1, R2416 += 1, R2006 += 1 };
  s1 -> s1 [0, 62] { R2462 += 1, R2416 += 1, R2006 += 1 };
  s1 -> s4 [63, 63] { R2462 += 1, R2416 += 1 };
  s1 -> s1 [64, 65535] { R2462 += 1, R2416 += 1, R2006 += 1 };
  s2 -> s1 [0, 62] { R2462 += 1, R2416 += 1, R2006 += 1 };
  s2 -> s2 [0, 65535] { R2462 += 1, R2416 += 1, R2005 += 1, R2006 += 1 };
  s2 -> s4 [63, 63] { R2462 += 1, R2416 += 1 };
  s2 -> s1 [64, 65535] { R2462 += 1, R2416 += 1, R2006 += 1 };
  s3 -> s1 [0, 62] { R2462 += 1, R2416 += 1, R2006 += 1 };
  s3 -> s2 [0, 65535] { R2462 += 1, R2416 += 1, R2005 += 1, R2006 += 1 };
  s3 -> s3 [0, 65535] { R2462 += 1, R2415 += 1, R2416 += 1 };
  s3 -> s4 [63, 63] { R2462 += 1, R2416 += 1 };
  s3 -> s1 [64, 65535] { R2462 += 1, R2416 += 1, R2006 += 1 };
  s4 -> s5 [0, 65535] { R2462 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2462 += 1, R2416 += 1 };
  s5 -> s5 [0, 65535] { R2462 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 62] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s0 -> s2 [0, 65535] { R2464 += 1, R2417 += 1, R2418 += 1 };
  s0 -> s0 [0, 65535] { R2463 += 1, R2464 += 1 };
  s0 -> s3 [0, 65535] { R2464 += 1, R2418 += 1, R2381 += 1, R2382 += 1 };
  s0 -> s4 [63, 63] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s0 -> s1 [64, 65535] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s1 -> s5 [0, 65535] { R2464 += 1 };
  s1 -> s7 [0, 65535] { R2464 += 1, R2418 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s2 -> s1 [0, 62] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s2 -> s2 [0, 65535] { R2464 += 1, R2417 += 1, R2418 += 1 };
  s2 -> s3 [0, 65535] { R2464 += 1, R2418 += 1, R2381 += 1, R2382 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s2 -> s1 [64, 65535] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s3 -> s1 [0, 62] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s3 -> s5 [0, 65535] { R2464 += 1 };
  s3 -> s3 [0, 65535] { R2464 += 1, R2418 += 1, R2381 += 1, R2382 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s3 -> s1 [64, 65535] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s4 -> s1 [0, 65535] { R2464 += 1, R2418 += 1, R2382 += 1 };
  s5 -> s5 [0, 65535] { R2464 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R2464 += 1 };
  s7 -> s7 [0, 65535] { R2464 += 1, R2418 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2466 += 1, R2420 += 1, R2383 += 1, R2384 += 1 };
  s0 -> s2 [0, 65535] { R2466 += 1, R2419 += 1, R2420 += 1 };
  s0 -> s3 [0, 65535] { R2466 += 1, R2420 += 1, R2384 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2465 += 1, R2466 += 1 };
  s1 -> s1 [0, 65535] { R2466 += 1, R2420 += 1, R2383 += 1, R2384 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2466 += 1 };
  s1 -> s3 [0, 65535] { R2466 += 1, R2420 += 1, R2384 += 1, R8 += 1 };
  s2 -> s1 [0, 65535] { R2466 += 1, R2420 += 1, R2383 += 1, R2384 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2466 += 1, R2419 += 1, R2420 += 1 };
  s2 -> s3 [0, 65535] { R2466 += 1, R2420 += 1, R2384 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2466 += 1 };
  s3 -> s3 [0, 65535] { R2466 += 1, R2420 += 1, R2384 += 1, R8 += 1 };
  s3 -> s6 [0, 65535] { R2466 += 1, R2420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2466 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2466 += 1 };
  s6 -> s6 [0, 65535] { R2466 += 1, R2420 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R2467 += 1, R2468 += 1 };
  s0 -> s1 [0, 65535] { R2468 += 1, R2422 += 1, R2386 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R2468 += 1, R2421 += 1, R2422 += 1 };
  s0 -> s3 [0, 65535] { R2468 += 1, R2422 += 1, R2385 += 1, R2386 += 1 };
  s1 -> s1 [0, 65535] { R2468 += 1, R2422 += 1, R2386 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2468 += 1 };
  s1 -> s6 [0, 65535] { R2468 += 1, R2422 += 1 };
  s2 -> s1 [0, 65535] { R2468 += 1, R2422 += 1, R2386 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R2468 += 1, R2421 += 1, R2422 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2468 += 1, R2422 += 1, R2385 += 1, R2386 += 1 };
  s3 -> s1 [0, 65535] { R2468 += 1, R2422 += 1, R2386 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2468 += 1 };
  s3 -> s3 [0, 65535] { R2468 += 1, R2422 += 1, R2385 += 1, R2386 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2468 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2468 += 1 };
  s6 -> s6 [0, 65535] { R2468 += 1, R2422 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 60] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R2470 += 1, R2424 += 1, R2388 += 1, R10 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R2470 += 1, R2424 += 1, R2387 += 1, R2388 += 1 };
  s0 -> s4 [0, 65535] { R2470 += 1, R2423 += 1, R2424 += 1 };
  s0 -> s0 [0, 65535] { R2469 += 1, R2470 += 1 };
  s0 -> s5 [61, 61] { R2470 += 1, R2424 += 1, R2388 += 1 };
  s0 -> s1 [62, 65535] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s1 -> s1 [0, 60] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s1 -> s5 [61, 61] { R2470 += 1, R2424 += 1, R2388 += 1 };
  s1 -> s1 [62, 65535] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s2 -> s1 [0, 60] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R2470 += 1, R2424 += 1, R2388 += 1, R10 += 1, R11 += 1 };
  s2 -> s5 [61, 61] { R2470 += 1, R2424 += 1, R2388 += 1 };
  s2 -> s1 [62, 65535] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s3 -> s1 [0, 60] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s3 -> s2 [0, 65535] { R2470 += 1, R2424 += 1, R2388 += 1, R10 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R2470 += 1, R2424 += 1, R2387 += 1, R2388 += 1 };
  s3 -> s5 [61, 61] { R2470 += 1, R2424 += 1, R2388 += 1 };
  s3 -> s1 [62, 65535] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s4 -> s1 [0, 60] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s4 -> s2 [0, 65535] { R2470 += 1, R2424 += 1, R2388 += 1, R10 += 1, R11 += 1 };
  s4 -> s3 [0, 65535] { R2470 += 1, R2424 += 1, R2387 += 1, R2388 += 1 };
  s4 -> s4 [0, 65535] { R2470 += 1, R2423 += 1, R2424 += 1 };
  s4 -> s5 [61, 61] { R2470 += 1, R2424 += 1, R2388 += 1 };
  s4 -> s1 [62, 65535] { R2470 += 1, R2424 += 1, R2388 += 1, R11 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R2470 += 1, R2424 += 1 };
  s5 -> s8 [0, 65535] { R2470 += 1 };
  s5 -> s5 [0, 65535] { R2470 += 1, R2424 += 1, R2388 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2470 += 1, R2424 += 1 };
  s7 -> s8 [0, 65535] { R2470 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2470 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 58] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s0 -> s0 [0, 65535] { R2471 += 1, R2472 += 1 };
  s0 -> s2 [0, 65535] { R2472 += 1, R2425 += 1, R2426 += 1 };
  s0 -> s3 [0, 65535] { R2472 += 1, R2426 += 1, R2389 += 1, R2390 += 1 };
  s0 -> s4 [0, 65535] { R2472 += 1, R2426 += 1, R2390 += 1, R1997 += 1 };
  s0 -> s5 [59, 59] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s0 -> s1 [60, 65535] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s1 -> s1 [0, 58] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R2472 += 1, R2426 += 1 };
  s1 -> s8 [0, 65535] { R2472 += 1 };
  s1 -> s5 [59, 59] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s1 -> s1 [60, 65535] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s2 -> s1 [0, 58] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R2472 += 1, R2425 += 1, R2426 += 1 };
  s2 -> s3 [0, 65535] { R2472 += 1, R2426 += 1, R2389 += 1, R2390 += 1 };
  s2 -> s4 [0, 65535] { R2472 += 1, R2426 += 1, R2390 += 1, R1997 += 1 };
  s2 -> s5 [59, 59] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s2 -> s1 [60, 65535] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s3 -> s1 [0, 58] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R2472 += 1 };
  s3 -> s3 [0, 65535] { R2472 += 1, R2426 += 1, R2389 += 1, R2390 += 1 };
  s3 -> s4 [0, 65535] { R2472 += 1, R2426 += 1, R2390 += 1, R1997 += 1 };
  s3 -> s5 [59, 59] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s3 -> s1 [60, 65535] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s4 -> s1 [0, 58] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s4 -> s6 [0, 65535] { R2472 += 1, R2426 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R2472 += 1 };
  s4 -> s4 [0, 65535] { R2472 += 1, R2426 += 1, R2390 += 1, R1997 += 1 };
  s4 -> s5 [59, 59] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s4 -> s1 [60, 65535] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s5 -> s5 [0, 65535] { R2472 += 1, R2426 += 1, R2390 += 1 };
  s6 -> s6 [0, 65535] { R2472 += 1, R2426 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R2472 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R2472 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 37] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s0 -> s2 [0, 65535] { R2474 += 1, R2427 += 1, R2428 += 1 };
  s0 -> s3 [0, 65535] { R2474 += 1, R2428 += 1, R2392 += 1, R2000 += 1 };
  s0 -> s0 [0, 65535] { R2473 += 1, R2474 += 1 };
  s0 -> s4 [0, 65535] { R2474 += 1, R2428 += 1, R2391 += 1, R2392 += 1 };
  s0 -> s5 [38, 38] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s0 -> s1 [39, 65535] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s1 -> s1 [0, 37] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s1 -> s6 [0, 65535] { R2474 += 1 };
  s1 -> s1 [0, 65535] { R2474 += 1, R2428 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [38, 38] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s1 -> s1 [39, 65535] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s2 -> s1 [0, 37] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s2 -> s2 [0, 65535] { R2474 += 1, R2427 += 1, R2428 += 1 };
  s2 -> s3 [0, 65535] { R2474 += 1, R2428 += 1, R2392 += 1, R2000 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R2474 += 1, R2428 += 1, R2391 += 1, R2392 += 1 };
  s2 -> s5 [38, 38] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s2 -> s1 [39, 65535] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s3 -> s1 [0, 37] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s3 -> s6 [0, 65535] { R2474 += 1 };
  s3 -> s8 [0, 65535] { R2474 += 1, R2428 += 1 };
  s3 -> s3 [0, 65535] { R2474 += 1, R2428 += 1, R2392 += 1, R2000 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [38, 38] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s3 -> s1 [39, 65535] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s4 -> s1 [0, 37] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s4 -> s6 [0, 65535] { R2474 += 1 };
  s4 -> s3 [0, 65535] { R2474 += 1, R2428 += 1, R2392 += 1, R2000 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R2474 += 1, R2428 += 1, R2391 += 1, R2392 += 1 };
  s4 -> s5 [38, 38] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s4 -> s1 [39, 65535] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s5 -> s5 [0, 65535] { R2474 += 1, R2428 += 1, R2392 += 1 };
  s6 -> s6 [0, 65535] { R2474 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R2474 += 1 };
  s8 -> s8 [0, 65535] { R2474 += 1, R2428 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 45] { R2476 += 1, R2430 += 1, R2394 += 1 };
  s0 -> s2 [0, 65535] { R2476 += 1, R2429 += 1, R2430 += 1 };
  s0 -> s3 [0, 65535] { R2476 += 1, R2430 += 1, R2393 += 1, R2394 += 1 };
  s0 -> s0 [0, 65535] { R2475 += 1, R2476 += 1 };
  s0 -> s1 [47, 65535] { R2476 += 1, R2430 += 1, R2394 += 1 };
  s1 -> s1 [0, 45] { R2476 += 1, R2430 += 1, R2394 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2476 += 1 };
  s1 -> s1 [0, 65535] { R2476 += 1, R2430 += 1 };
  s1 -> s1 [47, 65535] { R2476 += 1, R2430 += 1, R2394 += 1 };
  s2 -> s1 [0, 45] { R2476 += 1, R2430 += 1, R2394 += 1 };
  s2 -> s2 [0, 65535] { R2476 += 1, R2429 += 1, R2430 += 1 };
  s2 -> s3 [0, 65535] { R2476 += 1, R2430 += 1, R2393 += 1, R2394 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [47, 65535] { R2476 += 1, R2430 += 1, R2394 += 1 };
  s3 -> s1 [0, 45] { R2476 += 1, R2430 += 1, R2394 += 1 };
  s3 -> s3 [0, 65535] { R2476 += 1, R2430 += 1, R2393 += 1, R2394 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2476 += 1 };
  s3 -> s1 [47, 65535] { R2476 += 1, R2430 += 1, R2394 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2476 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2478 += 1, R2431 += 1, R2432 += 1 };
  s0 -> s2 [0, 65535] { R2478 += 1, R2432 += 1, R2395 += 1, R2396 += 1 };
  s0 -> s0 [0, 65535] { R2477 += 1, R2478 += 1 };
  s0 -> s3 [0, 65535] { R2478 += 1, R2432 += 1, R2396 += 1, R2376 += 1 };
  s1 -> s1 [0, 65535] { R2478 += 1, R2431 += 1, R2432 += 1 };
  s1 -> s2 [0, 65535] { R2478 += 1, R2432 += 1, R2395 += 1, R2396 += 1 };
  s1 -> s3 [0, 65535] { R2478 += 1, R2432 += 1, R2396 += 1, R2376 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2478 += 1, R2432 += 1, R2395 += 1, R2396 += 1 };
  s2 -> s3 [0, 65535] { R2478 += 1, R2432 += 1, R2396 += 1, R2376 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R2478 += 1 };
  s3 -> s3 [0, 65535] { R2478 += 1, R2432 += 1, R2396 += 1, R2376 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2478 += 1, R2432 += 1 };
  s3 -> s6 [0, 65535] { R2478 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2478 += 1, R2432 += 1 };
  s5 -> s6 [0, 65535] { R2478 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2478 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 63] { R2480 += 1, R2434 += 1 };
  s0 -> s0 [0, 65535] { R2479 += 1, R2480 += 1 };
  s0 -> s2 [0, 65535] { R2480 += 1, R2433 += 1, R2434 += 1 };
  s0 -> s3 [64, 64] { R2480 += 1, R2434 += 1 };
  s0 -> s1 [65, 65535] { R2480 += 1, R2434 += 1 };
  s1 -> s1 [0, 63] { R2480 += 1, R2434 += 1 };
  s1 -> s3 [64, 64] { R2480 += 1, R2434 += 1 };
  s1 -> s1 [65, 65535] { R2480 += 1, R2434 += 1 };
  s2 -> s1 [0, 63] { R2480 += 1, R2434 += 1 };
  s2 -> s2 [0, 65535] { R2480 += 1, R2433 += 1, R2434 += 1 };
  s2 -> s3 [64, 64] { R2480 += 1, R2434 += 1 };
  s2 -> s1 [65, 65535] { R2480 += 1, R2434 += 1 };
  s3 -> s4 [0, 65535] { R2480 += 1 };
  s3 -> s3 [0, 65535] { R2480 += 1, R2434 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2480 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2482 += 1, R2436 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2482 += 1, R2435 += 1, R2436 += 1 };
  s0 -> s0 [0, 65535] { R2481 += 1, R2482 += 1 };
  s1 -> s1 [0, 65535] { R2482 += 1, R2436 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R2482 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2482 += 1, R2436 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2482 += 1, R2435 += 1, R2436 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2482 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 36] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s0 -> s2 [0, 65535] { R2484 += 1, R2437 += 1, R2438 += 1 };
  s0 -> s3 [0, 65535] { R2484 += 1, R2438 += 1, R2397 += 1, R2398 += 1 };
  s0 -> s0 [0, 65535] { R2483 += 1, R2484 += 1 };
  s0 -> s1 [38, 42] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s0 -> s1 [44, 57] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s0 -> s1 [59, 63] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s0 -> s1 [65, 65535] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s1 -> s1 [0, 36] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2484 += 1 };
  s1 -> s1 [0, 65535] { R2484 += 1, R2438 += 1 };
  s1 -> s1 [38, 42] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s1 -> s1 [44, 57] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s1 -> s1 [59, 63] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s1 -> s1 [65, 65535] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s2 -> s1 [0, 36] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2484 += 1, R2437 += 1, R2438 += 1 };
  s2 -> s3 [0, 65535] { R2484 += 1, R2438 += 1, R2397 += 1, R2398 += 1 };
  s2 -> s1 [38, 42] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s2 -> s1 [44, 57] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s2 -> s1 [59, 63] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s2 -> s1 [65, 65535] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s3 -> s1 [0, 36] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2484 += 1, R2438 += 1, R2397 += 1, R2398 += 1 };
  s3 -> s5 [0, 65535] { R2484 += 1 };
  s3 -> s1 [38, 42] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s3 -> s1 [44, 57] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s3 -> s1 [59, 63] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s3 -> s1 [65, 65535] { R2484 += 1, R2438 += 1, R2398 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2484 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2486 += 1, R2440 += 1, R2400 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R2486 += 1, R2439 += 1, R2440 += 1 };
  s0 -> s3 [0, 65535] { R2486 += 1, R2440 += 1, R2399 += 1, R2400 += 1 };
  s0 -> s0 [0, 65535] { R2485 += 1, R2486 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2486 += 1, R2440 += 1, R2400 += 1, R2 += 1 };
  s1 -> s5 [0, 65535] { R2486 += 1 };
  s1 -> s6 [0, 65535] { R2486 += 1, R2440 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2486 += 1, R2440 += 1, R2400 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R2486 += 1, R2439 += 1, R2440 += 1 };
  s2 -> s3 [0, 65535] { R2486 += 1, R2440 += 1, R2399 += 1, R2400 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2486 += 1, R2440 += 1, R2400 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R2486 += 1, R2440 += 1, R2399 += 1, R2400 += 1 };
  s3 -> s5 [0, 65535] { R2486 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2486 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2486 += 1 };
  s6 -> s6 [0, 65535] { R2486 += 1, R2440 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 43] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s0 -> s0 [0, 65535] { R2487 += 1, R2488 += 1 };
  s0 -> s2 [0, 65535] { R2488 += 1, R2442 += 1, R2401 += 1, R2402 += 1 };
  s0 -> s3 [0, 65535] { R2488 += 1, R2441 += 1, R2442 += 1 };
  s0 -> s1 [45, 64] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s0 -> s1 [91, 65535] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s1 -> s1 [0, 43] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s1 -> s5 [0, 65535] { R2488 += 1 };
  s1 -> s1 [0, 65535] { R2488 += 1, R2442 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [45, 64] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s1 -> s1 [91, 65535] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s2 -> s1 [0, 43] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s2 -> s5 [0, 65535] { R2488 += 1 };
  s2 -> s2 [0, 65535] { R2488 += 1, R2442 += 1, R2401 += 1, R2402 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [45, 64] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s2 -> s1 [91, 65535] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s3 -> s1 [0, 43] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s3 -> s2 [0, 65535] { R2488 += 1, R2442 += 1, R2401 += 1, R2402 += 1 };
  s3 -> s3 [0, 65535] { R2488 += 1, R2441 += 1, R2442 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [45, 64] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s3 -> s1 [91, 65535] { R2488 += 1, R2442 += 1, R2402 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2488 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2490 += 1, R2443 += 1, R2444 += 1 };
  s0 -> s0 [0, 65535] { R2489 += 1, R2490 += 1 };
  s0 -> s2 [0, 65535] { R2490 += 1, R2444 += 1, R2404 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R2490 += 1, R2444 += 1, R2403 += 1, R2404 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2490 += 1, R2443 += 1, R2444 += 1 };
  s1 -> s2 [0, 65535] { R2490 += 1, R2444 += 1, R2404 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R2490 += 1, R2444 += 1, R2403 += 1, R2404 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2490 += 1 };
  s2 -> s2 [0, 65535] { R2490 += 1, R2444 += 1, R2404 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R2490 += 1, R2444 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2490 += 1 };
  s3 -> s2 [0, 65535] { R2490 += 1, R2444 += 1, R2404 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R2490 += 1, R2444 += 1, R2403 += 1, R2404 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2490 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2490 += 1 };
  s6 -> s6 [0, 65535] { R2490 += 1, R2444 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 57] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s0 -> s2 [0, 65535] { R2492 += 1, R2446 += 1, R2406 += 1, R2003 += 1 };
  s0 -> s3 [0, 65535] { R2492 += 1, R2446 += 1, R2405 += 1, R2406 += 1 };
  s0 -> s0 [0, 65535] { R2491 += 1, R2492 += 1 };
  s0 -> s4 [0, 65535] { R2492 += 1, R2445 += 1, R2446 += 1 };
  s0 -> s5 [58, 58] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s0 -> s1 [59, 65535] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s1 -> s1 [0, 57] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s1 -> s1 [0, 65535] { R2492 += 1, R2446 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R2492 += 1 };
  s1 -> s5 [58, 58] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s1 -> s1 [59, 65535] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s2 -> s1 [0, 57] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s2 -> s2 [0, 65535] { R2492 += 1, R2446 += 1, R2406 += 1, R2003 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R2492 += 1 };
  s2 -> s8 [0, 65535] { R2492 += 1, R2446 += 1 };
  s2 -> s5 [58, 58] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s2 -> s1 [59, 65535] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s3 -> s1 [0, 57] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s3 -> s2 [0, 65535] { R2492 += 1, R2446 += 1, R2406 += 1, R2003 += 1 };
  s3 -> s3 [0, 65535] { R2492 += 1, R2446 += 1, R2405 += 1, R2406 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R2492 += 1 };
  s3 -> s5 [58, 58] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s3 -> s1 [59, 65535] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s4 -> s1 [0, 57] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s4 -> s2 [0, 65535] { R2492 += 1, R2446 += 1, R2406 += 1, R2003 += 1 };
  s4 -> s3 [0, 65535] { R2492 += 1, R2446 += 1, R2405 += 1, R2406 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2492 += 1, R2445 += 1, R2446 += 1 };
  s4 -> s5 [58, 58] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s4 -> s1 [59, 65535] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s5 -> s5 [0, 65535] { R2492 += 1, R2446 += 1, R2406 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2492 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R2492 += 1 };
  s8 -> s8 [0, 65535] { R2492 += 1, R2446 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s0 -> s0 [0, 65535] { R2493 += 1, R2494 += 1 };
  s0 -> s2 [0, 65535] { R2494 += 1, R2447 += 1, R2448 += 1 };
  s0 -> s3 [0, 65535] { R2494 += 1, R2448 += 1, R2407 += 1, R2408 += 1 };
  s0 -> s4 [0, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2377 += 1, R2378 += 1 };
  s0 -> s5 [91, 91] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s0 -> s1 [92, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R2494 += 1, R2448 += 1 };
  s1 -> s8 [0, 65535] { R2494 += 1 };
  s1 -> s1 [0, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s1 -> s9 [0, 65535] { R2494 += 1, R2448 += 1, R2408 += 1 };
  s2 -> s1 [0, 90] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2494 += 1, R2447 += 1, R2448 += 1 };
  s2 -> s3 [0, 65535] { R2494 += 1, R2448 += 1, R2407 += 1, R2408 += 1 };
  s2 -> s4 [0, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2377 += 1, R2378 += 1 };
  s2 -> s5 [91, 91] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s2 -> s1 [92, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s3 -> s1 [0, 90] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2494 += 1, R2448 += 1, R2407 += 1, R2408 += 1 };
  s3 -> s8 [0, 65535] { R2494 += 1 };
  s3 -> s4 [0, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2377 += 1, R2378 += 1 };
  s3 -> s5 [91, 91] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s3 -> s1 [92, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s4 -> s1 [0, 90] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R2494 += 1, R2448 += 1 };
  s4 -> s8 [0, 65535] { R2494 += 1 };
  s4 -> s4 [0, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2377 += 1, R2378 += 1 };
  s4 -> s5 [91, 91] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s4 -> s1 [92, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s5 -> s1 [0, 65535] { R2494 += 1, R2448 += 1, R2408 += 1, R2378 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2494 += 1, R2448 += 1 };
  s7 -> s8 [0, 65535] { R2494 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2494 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s7 [0, 65535] { R2494 += 1, R2448 += 1 };
  s9 -> s8 [0, 65535] { R2494 += 1 };
  s9 -> s9 [0, 65535] { R2494 += 1, R2448 += 1, R2408 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R2496 += 1, R2450 += 1, R2409 += 1, R2410 += 1 };
  s0 -> s2 [0, 65535] { R2496 += 1, R2449 += 1, R2450 += 1 };
  s0 -> s3 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1, R2379 += 1, R2380 += 1 };
  s0 -> s4 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1, R2380 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2495 += 1, R2496 += 1 };
  s1 -> s1 [0, 65535] { R2496 += 1, R2450 += 1, R2409 += 1, R2410 += 1 };
  s1 -> s5 [0, 65535] { R2496 += 1 };
  s1 -> s3 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1, R2379 += 1, R2380 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1, R2380 += 1, R7 += 1 };
  s2 -> s1 [0, 65535] { R2496 += 1, R2450 += 1, R2409 += 1, R2410 += 1 };
  s2 -> s2 [0, 65535] { R2496 += 1, R2449 += 1, R2450 += 1 };
  s2 -> s3 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1, R2379 += 1, R2380 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1, R2380 += 1, R7 += 1 };
  s3 -> s5 [0, 65535] { R2496 += 1 };
  s3 -> s3 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1, R2379 += 1, R2380 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1, R2380 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R2496 += 1, R2450 += 1 };
  s4 -> s5 [0, 65535] { R2496 += 1 };
  s4 -> s6 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1, R2380 += 1, R7 += 1 };
  s4 -> s8 [0, 65535] { R2496 += 1, R2450 += 1 };
  s5 -> s5 [0, 65535] { R2496 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R2496 += 1 };
  s6 -> s6 [0, 65535] { R2496 += 1, R2450 += 1, R2410 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R2496 += 1, R2450 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R2496 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R2496 += 1, R2450 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R2392 && R4 = R2410 && R5 = R2432 && R6 = R2496 && R10 = 0 && R2005 = 0 && R2006 - R2391 = -1 && R2253 = 0 && R2254 = R2450 && R2381 = 0 && R2382 = 1 && R2383 = 0 && R2384 = 1 && R2385 = R2391 && R2386 = R2392 && R2387 = R2391 && R2388 = R2392 && R2389 = R2391 && R2390 = R2392 && R2397 = 0 && R2398 = 1 && R2399 = 0 && R2400 = 1 && R2401 = 2 && R2402 = R2410 && R2403 = 2 && R2404 = R2410 && R2405 = 2 && R2406 = R2410 && R2407 = 2 && R2408 = R2410 && R2409 = 2 && R2411 - R2450 = 1 && R2412 = R2432 && R2413 - R2450 = 1 && R2414 = R2432 && R2415 - R2450 = 1 && R2416 = R2432 && R2417 - R2450 = 1 && R2418 = R2432 && R2419 - R2450 = 1 && R2420 = R2432 && R2421 - R2450 = 1 && R2422 = R2432 && R2423 - R2450 = 1 && R2424 = R2432 && R2425 - R2450 = 1 && R2426 = R2432 && R2427 - R2450 = 1 && R2428 = R2432 && R2429 - R2450 = 1 && R2430 = R2432 && R2431 - R2450 = 1 && R2433 = 0 && R2434 = R2450 && R2435 = 0 && R2436 = R2450 && R2437 = 0 && R2438 = R2450 && R2439 = 0 && R2440 = R2450 && R2441 = 0 && R2442 = R2450 && R2443 = 0 && R2444 = R2450 && R2445 = 0 && R2446 = R2450 && R2447 = 0 && R2448 = R2450 && R2449 = 0 && R2451 = 10 && R2452 = R2496 && R2453 = 10 && R2454 = R2496 && R2455 = 10 && R2456 = R2496 && R2457 = 10 && R2458 = R2496 && R2459 = 10 && R2460 = R2496 && R2461 = 10 && R2462 = R2496 && R2463 = 10 && R2464 = R2496 && R2465 = 10 && R2466 = R2496 && R2467 = 10 && R2468 = R2496 && R2469 = 10 && R2470 = R2496 && R2471 = 10 && R2472 = R2496 && R2473 = 10 && R2474 = R2496 && R2475 = 10 && R2476 = R2496 && R2477 = 10 && R2478 = R2496 && R2479 = 10 && R2480 = R2496 && R2481 = 10 && R2482 = R2496 && R2483 = 10 && R2484 = R2496 && R2485 = 10 && R2486 = R2496 && R2487 = 10 && R2488 = R2496 && R2489 = 10 && R2490 = R2496 && R2491 = 10 && R2492 = R2496 && R2493 = 10 && R2494 = R2496 && R2495 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R11 != -1 && R1997 < 1 && R2000 < 1 && R2003 < 1 && R2391 - R2392 < 1 && 0 < R2391 && 1 < R2410 && R2450 < R2432 && -1 < R2450 && 9 < R2496 && (R2377 != 0 || ((R7 != 0 || ((R1 != R2378 || R2378 = 1 || R2378 < 0) && (R1 = R2378 || R2378 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R2378 || R2378 = 1 || R2378 < 0) && (R2378 != 1 || -1 < R1) && (R1 = R2378 || R2378 = 1))))) && (R2379 != 0 || ((R7 != 0 || ((R1 != R2380 || R2380 = 1 || R2380 < 0) && (R1 = R2380 || R2380 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R2380 || R2380 = 1 || R2380 < 0) && (R2380 != 1 || -1 < R1) && (R1 = R2380 || R2380 = 1))))) && (R2393 != 0 || R2391 - R2394 = 1 || (R2376 = 0 && R2391 = 1)) && (R2395 != 0 || R2391 - R2396 = 1 || (R2376 = 0 && R2391 = 1)) && (R2377 = 0 || (R7 = 0 && R1 < 0)) && (R2379 = 0 || (R7 = 0 && R1 < 0)) && (R2393 = 0 || (R2376 = 0 && R2391 = 1)) && (R2395 = 0 || (R2376 = 0 && R2391 = 1));
// End of Parikh automata intersection problem
