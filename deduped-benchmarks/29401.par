// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R176, R177, R2, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R311 += 1 };
  s0 -> s0 [0, 65535] { R310 += 1, R311 += 1 };
  s0 -> s2 [46, 46] { R311 += 1 };
  s0 -> s3 [47, 47] { R311 += 1 };
  s0 -> s1 [48, 65535] { R311 += 1 };
  s1 -> s1 [0, 45] { R311 += 1 };
  s1 -> s2 [46, 46] { R311 += 1 };
  s1 -> s3 [47, 47] { R311 += 1 };
  s1 -> s1 [48, 65535] { R311 += 1 };
  s2 -> s1 [0, 45] { R311 += 1 };
  s2 -> s2 [46, 46] { R311 += 1 };
  s2 -> s3 [47, 47] { R311 += 1 };
  s2 -> s1 [48, 114] { R311 += 1 };
  s2 -> s8 [115, 115] { R311 += 1 };
  s2 -> s1 [116, 65535] { R311 += 1 };
  s3 -> s3 [0, 45] { R311 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R311 += 1 };
  s3 -> s3 [47, 65535] { R311 += 1 };
  s4 -> s3 [0, 45] { R311 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R311 += 1 };
  s4 -> s3 [47, 114] { R311 += 1 };
  s4 -> s5 [115, 115] { R311 += 1 };
  s4 -> s3 [116, 65535] { R311 += 1 };
  s5 -> s3 [0, 45] { R311 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R311 += 1 };
  s5 -> s3 [47, 110] { R311 += 1 };
  s5 -> s6 [111, 111] { R311 += 1 };
  s5 -> s3 [112, 65535] { R311 += 1 };
  s6 -> s3 [0, 45] { R311 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R311 += 1 };
  s6 -> s3 [47, 98] { R311 += 1 };
  s6 -> s7 [99, 99] { R311 += 1 };
  s6 -> s3 [100, 65535] { R311 += 1 };
  s7 -> s3 [0, 45] { R311 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R311 += 1 };
  s7 -> s3 [47, 106] { R311 += 1 };
  s7 -> s3 [108, 65535] { R311 += 1 };
  s8 -> s1 [0, 45] { R311 += 1 };
  s8 -> s2 [46, 46] { R311 += 1 };
  s8 -> s3 [47, 47] { R311 += 1 };
  s8 -> s1 [48, 110] { R311 += 1 };
  s8 -> s9 [111, 111] { R311 += 1 };
  s8 -> s1 [112, 65535] { R311 += 1 };
  s9 -> s1 [0, 45] { R311 += 1 };
  s9 -> s2 [46, 46] { R311 += 1 };
  s9 -> s3 [47, 47] { R311 += 1 };
  s9 -> s1 [48, 98] { R311 += 1 };
  s9 -> s10 [99, 99] { R311 += 1 };
  s9 -> s1 [100, 65535] { R311 += 1 };
  s10 -> s1 [0, 45] { R311 += 1 };
  s10 -> s2 [46, 46] { R311 += 1 };
  s10 -> s3 [47, 47] { R311 += 1 };
  s10 -> s1 [48, 106] { R311 += 1 };
  s10 -> s1 [108, 65535] { R311 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R313 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R312 += 1, R313 += 1 };
  s1 -> s1 [0, 65535] { R313 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R315 += 1, R177 += 1 };
  s0 -> s2 [0, 65535] { R315 += 1, R176 += 1, R177 += 1 };
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s3 [47, 47] { R315 += 1 };
  s0 -> s1 [48, 65535] { R315 += 1, R177 += 1 };
  s1 -> s1 [0, 46] { R315 += 1, R177 += 1 };
  s1 -> s3 [47, 47] { R315 += 1 };
  s1 -> s1 [48, 65535] { R315 += 1, R177 += 1 };
  s2 -> s1 [0, 46] { R315 += 1, R177 += 1 };
  s2 -> s2 [0, 65535] { R315 += 1, R176 += 1, R177 += 1 };
  s2 -> s3 [47, 47] { R315 += 1 };
  s2 -> s1 [48, 65535] { R315 += 1, R177 += 1 };
  s3 -> s3 [0, 65535] { R315 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R316 += 1, R317 += 1 };
  s0 -> s1 [0, 65535] { R317 += 1, R273 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R317 += 1, R272 += 1, R273 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R317 += 1, R273 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R317 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R317 += 1, R273 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R317 += 1, R272 += 1, R273 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R317 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R319 += 1, R289 += 1 };
  s0 -> s2 [0, 65535] { R319 += 1, R288 += 1, R289 += 1 };
  s0 -> s0 [0, 65535] { R318 += 1, R319 += 1 };
  s0 -> s3 [64, 64] { R319 += 1, R289 += 1 };
  s0 -> s1 [65, 65535] { R319 += 1, R289 += 1 };
  s1 -> s1 [0, 63] { R319 += 1, R289 += 1 };
  s1 -> s3 [64, 64] { R319 += 1, R289 += 1 };
  s1 -> s1 [65, 65535] { R319 += 1, R289 += 1 };
  s2 -> s1 [0, 63] { R319 += 1, R289 += 1 };
  s2 -> s2 [0, 65535] { R319 += 1, R288 += 1, R289 += 1 };
  s2 -> s3 [64, 64] { R319 += 1, R289 += 1 };
  s2 -> s1 [65, 65535] { R319 += 1, R289 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R319 += 1, R289 += 1 };
  s3 -> s5 [0, 65535] { R319 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R319 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R321 += 1, R290 += 1, R291 += 1 };
  s0 -> s2 [0, 65535] { R321 += 1, R291 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R320 += 1, R321 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R321 += 1, R290 += 1, R291 += 1 };
  s1 -> s2 [0, 65535] { R321 += 1, R291 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R321 += 1, R291 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R321 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R321 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 36] { R323 += 1, R293 += 1, R269 += 1 };
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s0 -> s2 [0, 65535] { R323 += 1, R293 += 1, R268 += 1, R269 += 1 };
  s0 -> s3 [0, 65535] { R323 += 1, R292 += 1, R293 += 1 };
  s0 -> s1 [38, 42] { R323 += 1, R293 += 1, R269 += 1 };
  s0 -> s1 [44, 57] { R323 += 1, R293 += 1, R269 += 1 };
  s0 -> s1 [59, 63] { R323 += 1, R293 += 1, R269 += 1 };
  s0 -> s1 [65, 65535] { R323 += 1, R293 += 1, R269 += 1 };
  s1 -> s1 [0, 36] { R323 += 1, R293 += 1, R269 += 1 };
  s1 -> s1 [0, 65535] { R323 += 1, R293 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R323 += 1 };
  s1 -> s1 [38, 42] { R323 += 1, R293 += 1, R269 += 1 };
  s1 -> s1 [44, 57] { R323 += 1, R293 += 1, R269 += 1 };
  s1 -> s1 [59, 63] { R323 += 1, R293 += 1, R269 += 1 };
  s1 -> s1 [65, 65535] { R323 += 1, R293 += 1, R269 += 1 };
  s2 -> s1 [0, 36] { R323 += 1, R293 += 1, R269 += 1 };
  s2 -> s2 [0, 65535] { R323 += 1, R293 += 1, R268 += 1, R269 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R323 += 1 };
  s2 -> s1 [38, 42] { R323 += 1, R293 += 1, R269 += 1 };
  s2 -> s1 [44, 57] { R323 += 1, R293 += 1, R269 += 1 };
  s2 -> s1 [59, 63] { R323 += 1, R293 += 1, R269 += 1 };
  s2 -> s1 [65, 65535] { R323 += 1, R293 += 1, R269 += 1 };
  s3 -> s1 [0, 36] { R323 += 1, R293 += 1, R269 += 1 };
  s3 -> s2 [0, 65535] { R323 += 1, R293 += 1, R268 += 1, R269 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R323 += 1, R292 += 1, R293 += 1 };
  s3 -> s1 [38, 42] { R323 += 1, R293 += 1, R269 += 1 };
  s3 -> s1 [44, 57] { R323 += 1, R293 += 1, R269 += 1 };
  s3 -> s1 [59, 63] { R323 += 1, R293 += 1, R269 += 1 };
  s3 -> s1 [65, 65535] { R323 += 1, R293 += 1, R269 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R323 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R325 += 1, R294 += 1, R295 += 1 };
  s0 -> s0 [0, 65535] { R324 += 1, R325 += 1 };
  s0 -> s2 [0, 65535] { R325 += 1, R295 += 1, R271 += 1, R0 += 1 };
  s0 -> s3 [0, 65535] { R325 += 1, R295 += 1, R270 += 1, R271 += 1 };
  s1 -> s1 [0, 65535] { R325 += 1, R294 += 1, R295 += 1 };
  s1 -> s2 [0, 65535] { R325 += 1, R295 += 1, R271 += 1, R0 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R325 += 1, R295 += 1, R270 += 1, R271 += 1 };
  s2 -> s6 [0, 65535] { R325 += 1, R295 += 1 };
  s2 -> s2 [0, 65535] { R325 += 1, R295 += 1, R271 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R325 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R325 += 1, R295 += 1, R271 += 1, R0 += 1 };
  s3 -> s4 [0, 65535] { R325 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R325 += 1, R295 += 1, R270 += 1, R271 += 1 };
  s4 -> s4 [0, 65535] { R325 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R325 += 1, R295 += 1 };
  s6 -> s4 [0, 65535] { R325 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 43] { R327 += 1, R297 += 1, R275 += 1 };
  s0 -> s2 [0, 65535] { R327 += 1, R296 += 1, R297 += 1 };
  s0 -> s3 [0, 65535] { R327 += 1, R297 += 1, R274 += 1, R275 += 1 };
  s0 -> s0 [0, 65535] { R326 += 1, R327 += 1 };
  s0 -> s1 [45, 57] { R327 += 1, R297 += 1, R275 += 1 };
  s0 -> s4 [58, 58] { R327 += 1, R297 += 1, R275 += 1 };
  s0 -> s1 [59, 65535] { R327 += 1, R297 += 1, R275 += 1 };
  s1 -> s1 [0, 43] { R327 += 1, R297 += 1, R275 += 1 };
  s1 -> s1 [45, 57] { R327 += 1, R297 += 1, R275 += 1 };
  s1 -> s4 [58, 58] { R327 += 1, R297 += 1, R275 += 1 };
  s1 -> s1 [59, 65535] { R327 += 1, R297 += 1, R275 += 1 };
  s2 -> s1 [0, 43] { R327 += 1, R297 += 1, R275 += 1 };
  s2 -> s2 [0, 65535] { R327 += 1, R296 += 1, R297 += 1 };
  s2 -> s3 [0, 65535] { R327 += 1, R297 += 1, R274 += 1, R275 += 1 };
  s2 -> s1 [45, 57] { R327 += 1, R297 += 1, R275 += 1 };
  s2 -> s4 [58, 58] { R327 += 1, R297 += 1, R275 += 1 };
  s2 -> s1 [59, 65535] { R327 += 1, R297 += 1, R275 += 1 };
  s3 -> s1 [0, 43] { R327 += 1, R297 += 1, R275 += 1 };
  s3 -> s3 [0, 65535] { R327 += 1, R297 += 1, R274 += 1, R275 += 1 };
  s3 -> s1 [45, 57] { R327 += 1, R297 += 1, R275 += 1 };
  s3 -> s4 [58, 58] { R327 += 1, R297 += 1, R275 += 1 };
  s3 -> s1 [59, 65535] { R327 += 1, R297 += 1, R275 += 1 };
  s4 -> s4 [0, 43] { R327 += 1, R297 += 1, R275 += 1 };
  s4 -> s5 [0, 65535] { R327 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R327 += 1, R297 += 1 };
  s4 -> s4 [45, 65535] { R327 += 1, R297 += 1, R275 += 1 };
  s5 -> s5 [0, 65535] { R327 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R329 += 1, R299 += 1, R276 += 1, R277 += 1 };
  s0 -> s2 [0, 65535] { R329 += 1, R298 += 1, R299 += 1 };
  s0 -> s0 [0, 65535] { R328 += 1, R329 += 1 };
  s0 -> s3 [0, 65535] { R329 += 1, R299 += 1, R277 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R329 += 1, R299 += 1, R276 += 1, R277 += 1 };
  s1 -> s3 [0, 65535] { R329 += 1, R299 += 1, R277 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R329 += 1 };
  s2 -> s1 [0, 65535] { R329 += 1, R299 += 1, R276 += 1, R277 += 1 };
  s2 -> s2 [0, 65535] { R329 += 1, R298 += 1, R299 += 1 };
  s2 -> s3 [0, 65535] { R329 += 1, R299 += 1, R277 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R329 += 1, R299 += 1, R277 += 1, R2 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R329 += 1 };
  s3 -> s6 [0, 65535] { R329 += 1, R299 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R329 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R329 += 1 };
  s6 -> s6 [0, 65535] { R329 += 1, R299 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 57] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R331 += 1, R300 += 1, R301 += 1 };
  s0 -> s3 [0, 65535] { R331 += 1, R301 += 1, R279 += 1, R8 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R330 += 1, R331 += 1 };
  s0 -> s4 [0, 65535] { R331 += 1, R301 += 1, R278 += 1, R279 += 1 };
  s0 -> s5 [58, 58] { R331 += 1, R301 += 1, R279 += 1 };
  s0 -> s1 [59, 65535] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s1 -> s1 [0, 57] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s1 -> s5 [58, 58] { R331 += 1, R301 += 1, R279 += 1 };
  s1 -> s1 [59, 65535] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s2 -> s1 [0, 57] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R331 += 1, R300 += 1, R301 += 1 };
  s2 -> s3 [0, 65535] { R331 += 1, R301 += 1, R279 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [0, 65535] { R331 += 1, R301 += 1, R278 += 1, R279 += 1 };
  s2 -> s5 [58, 58] { R331 += 1, R301 += 1, R279 += 1 };
  s2 -> s1 [59, 65535] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s3 -> s1 [0, 57] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R331 += 1, R301 += 1, R279 += 1, R8 += 1, R9 += 1 };
  s3 -> s5 [58, 58] { R331 += 1, R301 += 1, R279 += 1 };
  s3 -> s1 [59, 65535] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s4 -> s1 [0, 57] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s4 -> s3 [0, 65535] { R331 += 1, R301 += 1, R279 += 1, R8 += 1, R9 += 1 };
  s4 -> s4 [0, 65535] { R331 += 1, R301 += 1, R278 += 1, R279 += 1 };
  s4 -> s5 [58, 58] { R331 += 1, R301 += 1, R279 += 1 };
  s4 -> s1 [59, 65535] { R331 += 1, R301 += 1, R279 += 1, R9 += 1 };
  s5 -> s6 [0, 65535] { R331 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R331 += 1, R301 += 1, R279 += 1 };
  s5 -> s8 [0, 65535] { R331 += 1, R301 += 1 };
  s6 -> s6 [0, 65535] { R331 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R331 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R331 += 1, R301 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s0 -> s2 [0, 65535] { R333 += 1, R303 += 1, R280 += 1, R281 += 1 };
  s0 -> s0 [0, 65535] { R332 += 1, R333 += 1 };
  s0 -> s3 [0, 65535] { R333 += 1, R302 += 1, R303 += 1 };
  s0 -> s4 [0, 65535] { R333 += 1, R303 += 1, R281 += 1, R260 += 1, R261 += 1 };
  s0 -> s5 [91, 91] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s0 -> s1 [92, 65535] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s1 -> s6 [0, 65535] { R333 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s1 -> s8 [0, 65535] { R333 += 1, R303 += 1 };
  s1 -> s9 [0, 65535] { R333 += 1, R303 += 1, R281 += 1 };
  s2 -> s1 [0, 90] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s2 -> s6 [0, 65535] { R333 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R333 += 1, R303 += 1, R280 += 1, R281 += 1 };
  s2 -> s4 [0, 65535] { R333 += 1, R303 += 1, R281 += 1, R260 += 1, R261 += 1 };
  s2 -> s5 [91, 91] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s2 -> s1 [92, 65535] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s3 -> s1 [0, 90] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s2 [0, 65535] { R333 += 1, R303 += 1, R280 += 1, R281 += 1 };
  s3 -> s3 [0, 65535] { R333 += 1, R302 += 1, R303 += 1 };
  s3 -> s4 [0, 65535] { R333 += 1, R303 += 1, R281 += 1, R260 += 1, R261 += 1 };
  s3 -> s5 [91, 91] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s3 -> s1 [92, 65535] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s4 -> s1 [0, 90] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s4 -> s6 [0, 65535] { R333 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R333 += 1, R303 += 1 };
  s4 -> s4 [0, 65535] { R333 += 1, R303 += 1, R281 += 1, R260 += 1, R261 += 1 };
  s4 -> s5 [91, 91] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s4 -> s1 [92, 65535] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s5 -> s1 [0, 65535] { R333 += 1, R303 += 1, R281 += 1, R261 += 1 };
  s6 -> s6 [0, 65535] { R333 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R333 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R333 += 1, R303 += 1 };
  s9 -> s6 [0, 65535] { R333 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R333 += 1, R303 += 1 };
  s9 -> s9 [0, 65535] { R333 += 1, R303 += 1, R281 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R334 += 1, R335 += 1 };
  s0 -> s1 [0, 65535] { R335 += 1, R305 += 1, R283 += 1, R262 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R335 += 1, R305 += 1, R283 += 1, R263 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R335 += 1, R304 += 1, R305 += 1 };
  s0 -> s4 [0, 65535] { R335 += 1, R305 += 1, R282 += 1, R283 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R335 += 1, R305 += 1, R283 += 1, R262 += 1, R263 += 1 };
  s1 -> s2 [0, 65535] { R335 += 1, R305 += 1, R283 += 1, R263 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R335 += 1 };
  s1 -> s8 [0, 65535] { R335 += 1, R305 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R335 += 1, R305 += 1, R283 += 1, R263 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R335 += 1 };
  s2 -> s7 [0, 65535] { R335 += 1, R305 += 1, R283 += 1 };
  s2 -> s8 [0, 65535] { R335 += 1, R305 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R335 += 1, R305 += 1, R283 += 1, R262 += 1, R263 += 1 };
  s3 -> s2 [0, 65535] { R335 += 1, R305 += 1, R283 += 1, R263 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R335 += 1, R304 += 1, R305 += 1 };
  s3 -> s4 [0, 65535] { R335 += 1, R305 += 1, R282 += 1, R283 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R335 += 1, R305 += 1, R283 += 1, R262 += 1, R263 += 1 };
  s4 -> s2 [0, 65535] { R335 += 1, R305 += 1, R283 += 1, R263 += 1, R6 += 1 };
  s4 -> s6 [0, 65535] { R335 += 1 };
  s4 -> s4 [0, 65535] { R335 += 1, R305 += 1, R282 += 1, R283 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R335 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R335 += 1 };
  s7 -> s7 [0, 65535] { R335 += 1, R305 += 1, R283 += 1 };
  s7 -> s8 [0, 65535] { R335 += 1, R305 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R335 += 1 };
  s8 -> s8 [0, 65535] { R335 += 1, R305 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 57] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s0 -> s2 [0, 65535] { R337 += 1, R307 += 1, R284 += 1, R285 += 1 };
  s0 -> s0 [0, 65535] { R336 += 1, R337 += 1 };
  s0 -> s3 [0, 65535] { R337 += 1, R307 += 1, R285 += 1, R264 += 1, R265 += 1 };
  s0 -> s4 [0, 65535] { R337 += 1, R306 += 1, R307 += 1 };
  s0 -> s5 [58, 58] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s0 -> s1 [59, 65535] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s1 -> s1 [0, 57] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s1 -> s5 [58, 58] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s1 -> s1 [59, 65535] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s2 -> s1 [0, 57] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s2 -> s2 [0, 65535] { R337 += 1, R307 += 1, R284 += 1, R285 += 1 };
  s2 -> s3 [0, 65535] { R337 += 1, R307 += 1, R285 += 1, R264 += 1, R265 += 1 };
  s2 -> s5 [58, 58] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s2 -> s1 [59, 65535] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s3 -> s1 [0, 57] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s3 -> s3 [0, 65535] { R337 += 1, R307 += 1, R285 += 1, R264 += 1, R265 += 1 };
  s3 -> s5 [58, 58] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s3 -> s1 [59, 65535] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s4 -> s1 [0, 57] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s4 -> s2 [0, 65535] { R337 += 1, R307 += 1, R284 += 1, R285 += 1 };
  s4 -> s3 [0, 65535] { R337 += 1, R307 += 1, R285 += 1, R264 += 1, R265 += 1 };
  s4 -> s4 [0, 65535] { R337 += 1, R306 += 1, R307 += 1 };
  s4 -> s5 [58, 58] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s4 -> s1 [59, 65535] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s5 -> s5 [0, 65535] { R337 += 1, R307 += 1, R285 += 1, R265 += 1 };
  s5 -> s6 [0, 65535] { R337 += 1, R307 += 1 };
  s5 -> s7 [0, 65535] { R337 += 1 };
  s5 -> s8 [0, 65535] { R337 += 1, R307 += 1, R285 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R337 += 1, R307 += 1 };
  s6 -> s7 [0, 65535] { R337 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R337 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s6 [0, 65535] { R337 += 1, R307 += 1 };
  s8 -> s7 [0, 65535] { R337 += 1 };
  s8 -> s8 [0, 65535] { R337 += 1, R307 += 1, R285 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R339 += 1, R309 += 1, R287 += 1, R266 += 1, R267 += 1 };
  s0 -> s2 [0, 65535] { R339 += 1, R309 += 1, R287 += 1, R267 += 1, R259 += 1 };
  s0 -> s3 [0, 65535] { R339 += 1, R308 += 1, R309 += 1 };
  s0 -> s4 [0, 65535] { R339 += 1, R309 += 1, R286 += 1, R287 += 1 };
  s0 -> s0 [0, 65535] { R338 += 1, R339 += 1 };
  s1 -> s5 [0, 65535] { R339 += 1 };
  s1 -> s1 [0, 65535] { R339 += 1, R309 += 1, R287 += 1, R266 += 1, R267 += 1 };
  s1 -> s2 [0, 65535] { R339 += 1, R309 += 1, R287 += 1, R267 += 1, R259 += 1 };
  s1 -> s7 [0, 65535] { R339 += 1, R309 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s5 [0, 65535] { R339 += 1 };
  s2 -> s2 [0, 65535] { R339 += 1, R309 += 1, R287 += 1, R267 += 1, R259 += 1 };
  s2 -> s7 [0, 65535] { R339 += 1, R309 += 1 };
  s2 -> s8 [0, 65535] { R339 += 1, R309 += 1, R287 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R339 += 1, R309 += 1, R287 += 1, R266 += 1, R267 += 1 };
  s3 -> s2 [0, 65535] { R339 += 1, R309 += 1, R287 += 1, R267 += 1, R259 += 1 };
  s3 -> s3 [0, 65535] { R339 += 1, R308 += 1, R309 += 1 };
  s3 -> s4 [0, 65535] { R339 += 1, R309 += 1, R286 += 1, R287 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R339 += 1 };
  s4 -> s1 [0, 65535] { R339 += 1, R309 += 1, R287 += 1, R266 += 1, R267 += 1 };
  s4 -> s2 [0, 65535] { R339 += 1, R309 += 1, R287 += 1, R267 += 1, R259 += 1 };
  s4 -> s4 [0, 65535] { R339 += 1, R309 += 1, R286 += 1, R287 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R339 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R339 += 1 };
  s7 -> s7 [0, 65535] { R339 += 1, R309 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s5 [0, 65535] { R339 += 1 };
  s8 -> s7 [0, 65535] { R339 += 1, R309 += 1 };
  s8 -> s8 [0, 65535] { R339 += 1, R309 += 1, R287 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R2 = R265 && R3 = R287 && R4 = R273 && R5 = R339 && R8 = 0 && R9 - R264 = -1 && R176 = 0 && R177 = R309 && R260 = 0 && R261 = 1 && R262 = 0 && R263 = 1 && R268 = 0 && R269 = 7 && R270 = 0 && R271 = 7 && R272 - R309 = 1 && R274 = 8 && R275 = R287 && R276 = 8 && R277 = R287 && R278 = 8 && R279 = R287 && R280 = 8 && R281 = R287 && R282 = 8 && R283 = R287 && R284 = 8 && R285 = R287 && R286 = 8 && R288 = 0 && R289 = R309 && R290 = 0 && R291 = R309 && R292 = 0 && R293 = R309 && R294 = 0 && R295 = R309 && R296 = 0 && R297 = R309 && R298 = 0 && R299 = R309 && R300 = 0 && R301 = R309 && R302 = 0 && R303 = R309 && R304 = 0 && R305 = R309 && R306 = 0 && R307 = R309 && R308 = 0 && R310 = 10 && R311 = R339 && R312 = 10 && R313 = R339 && R314 = 10 && R315 = R339 && R316 = 10 && R317 = R339 && R318 = 10 && R319 = R339 && R320 = 10 && R321 = R339 && R322 = 10 && R323 = R339 && R324 = 10 && R325 = R339 && R326 = 10 && R327 = R339 && R328 = 10 && R329 = R339 && R330 = 10 && R331 = R339 && R332 = 10 && R333 = R339 && R334 = 10 && R335 = R339 && R336 = 10 && R337 = R339 && R338 = 10 && R0 != 0 && R1 != 0 && R264 - R265 < 1 && 0 < R264 && R309 < R273 && 7 < R287 && -1 < R309 && 9 < R339 && (R264 != R266 || R265 = R267 || ((R259 != 0 || R265 - R266 < 1 || R266 < 1) && (R259 = 0 || R265 < R266 || R266 < 1))) && (R264 = R266 || (R259 = 0 && R264 = R265));
// End of Parikh automata intersection problem
