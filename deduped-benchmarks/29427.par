// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R2, R3, R4, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R81 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s2 [46, 46] { R81 += 1 };
  s0 -> s3 [47, 47] { R81 += 1 };
  s0 -> s1 [48, 65535] { R81 += 1 };
  s1 -> s1 [0, 45] { R81 += 1 };
  s1 -> s2 [46, 46] { R81 += 1 };
  s1 -> s3 [47, 47] { R81 += 1 };
  s1 -> s1 [48, 65535] { R81 += 1 };
  s2 -> s1 [0, 45] { R81 += 1 };
  s2 -> s2 [46, 46] { R81 += 1 };
  s2 -> s3 [47, 47] { R81 += 1 };
  s2 -> s1 [48, 114] { R81 += 1 };
  s2 -> s8 [115, 115] { R81 += 1 };
  s2 -> s1 [116, 65535] { R81 += 1 };
  s3 -> s3 [0, 45] { R81 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R81 += 1 };
  s3 -> s3 [47, 65535] { R81 += 1 };
  s4 -> s3 [0, 45] { R81 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R81 += 1 };
  s4 -> s3 [47, 114] { R81 += 1 };
  s4 -> s5 [115, 115] { R81 += 1 };
  s4 -> s3 [116, 65535] { R81 += 1 };
  s5 -> s3 [0, 45] { R81 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R81 += 1 };
  s5 -> s3 [47, 110] { R81 += 1 };
  s5 -> s6 [111, 111] { R81 += 1 };
  s5 -> s3 [112, 65535] { R81 += 1 };
  s6 -> s3 [0, 45] { R81 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R81 += 1 };
  s6 -> s3 [47, 98] { R81 += 1 };
  s6 -> s7 [99, 99] { R81 += 1 };
  s6 -> s3 [100, 65535] { R81 += 1 };
  s7 -> s3 [0, 45] { R81 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R81 += 1 };
  s7 -> s3 [47, 106] { R81 += 1 };
  s7 -> s3 [108, 65535] { R81 += 1 };
  s8 -> s1 [0, 45] { R81 += 1 };
  s8 -> s2 [46, 46] { R81 += 1 };
  s8 -> s3 [47, 47] { R81 += 1 };
  s8 -> s1 [48, 110] { R81 += 1 };
  s8 -> s9 [111, 111] { R81 += 1 };
  s8 -> s1 [112, 65535] { R81 += 1 };
  s9 -> s1 [0, 45] { R81 += 1 };
  s9 -> s2 [46, 46] { R81 += 1 };
  s9 -> s3 [47, 47] { R81 += 1 };
  s9 -> s1 [48, 98] { R81 += 1 };
  s9 -> s10 [99, 99] { R81 += 1 };
  s9 -> s1 [100, 65535] { R81 += 1 };
  s10 -> s1 [0, 45] { R81 += 1 };
  s10 -> s2 [46, 46] { R81 += 1 };
  s10 -> s3 [47, 47] { R81 += 1 };
  s10 -> s1 [48, 106] { R81 += 1 };
  s10 -> s1 [108, 65535] { R81 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R83 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R83 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R85 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R8 += 1, R9 += 1 };
  s0 -> s3 [47, 47] { R85 += 1 };
  s0 -> s1 [48, 65535] { R85 += 1, R9 += 1 };
  s1 -> s1 [0, 46] { R85 += 1, R9 += 1 };
  s1 -> s3 [47, 47] { R85 += 1 };
  s1 -> s1 [48, 65535] { R85 += 1, R9 += 1 };
  s2 -> s1 [0, 46] { R85 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R85 += 1, R8 += 1, R9 += 1 };
  s2 -> s3 [47, 47] { R85 += 1 };
  s2 -> s1 [48, 65535] { R85 += 1, R9 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R85 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R87 += 1, R65 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R64 += 1, R65 += 1 };
  s1 -> s1 [0, 65535] { R87 += 1, R65 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R87 += 1 };
  s2 -> s1 [0, 65535] { R87 += 1, R65 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R87 += 1, R64 += 1, R65 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R87 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R66 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R89 += 1, R67 += 1, R60 += 1, R61 += 1 };
  s0 -> s3 [63, 63] { R89 += 1, R67 += 1, R61 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535] { R89 += 1, R67 += 1, R60 += 1, R61 += 1 };
  s1 -> s3 [63, 63] { R89 += 1, R67 += 1, R61 += 1 };
  s2 -> s2 [0, 65535] { R89 += 1, R67 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [63, 63] { R89 += 1, R67 += 1, R61 += 1 };
  s3 -> s3 [0, 65535] { R89 += 1, R67 += 1 };
  s3 -> s4 [0, 65535] { R89 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R89 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R91 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [0, 65535] { R91 += 1, R69 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [0, 65535] { R91 += 1, R69 += 1, R63 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R91 += 1, R68 += 1, R69 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R91 += 1, R69 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [0, 65535] { R91 += 1, R69 += 1, R63 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R91 += 1, R69 += 1, R63 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R91 += 1, R69 += 1, R62 += 1, R63 += 1 };
  s2 -> s6 [0, 65535] { R91 += 1 };
  s3 -> s3 [0, 65535] { R91 += 1, R69 += 1, R63 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R91 += 1, R69 += 1 };
  s3 -> s6 [0, 65535] { R91 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R91 += 1, R69 += 1 };
  s5 -> s6 [0, 65535] { R91 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R91 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 43] { R93 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R93 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s1 [45, 63] { R93 += 1, R71 += 1 };
  s0 -> s1 [91, 65535] { R93 += 1, R71 += 1 };
  s1 -> s1 [0, 43] { R93 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [45, 63] { R93 += 1, R71 += 1 };
  s1 -> s1 [91, 65535] { R93 += 1, R71 += 1 };
  s2 -> s1 [0, 43] { R93 += 1, R71 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R93 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [45, 63] { R93 += 1, R71 += 1 };
  s2 -> s1 [91, 65535] { R93 += 1, R71 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s1 [0, 65535] { R95 += 1, R73 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R95 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R95 += 1, R73 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R95 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R95 += 1, R73 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R95 += 1, R72 += 1, R73 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R95 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R97 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s2 [0, 65535] { R97 += 1, R75 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R97 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [58, 58] { R97 += 1, R75 += 1 };
  s0 -> s1 [59, 65535] { R97 += 1, R75 += 1 };
  s1 -> s1 [0, 57] { R97 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R97 += 1 };
  s1 -> s4 [58, 58] { R97 += 1, R75 += 1 };
  s1 -> s1 [59, 65535] { R97 += 1, R75 += 1 };
  s2 -> s1 [0, 57] { R97 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R97 += 1, R75 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R97 += 1 };
  s2 -> s4 [58, 58] { R97 += 1, R75 += 1 };
  s2 -> s1 [59, 65535] { R97 += 1, R75 += 1 };
  s3 -> s1 [0, 57] { R97 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R97 += 1, R75 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R97 += 1, R74 += 1, R75 += 1 };
  s3 -> s4 [58, 58] { R97 += 1, R75 += 1 };
  s3 -> s1 [59, 65535] { R97 += 1, R75 += 1 };
  s4 -> s4 [0, 65535] { R97 += 1, R75 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R97 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R99 += 1, R77 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R99 += 1, R77 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [0, 65535] { R99 += 1, R76 += 1, R77 += 1 };
  s0 -> s4 [91, 91] { R99 += 1, R77 += 1, R57 += 1 };
  s0 -> s1 [92, 65535] { R99 += 1, R77 += 1, R57 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R99 += 1 };
  s1 -> s1 [0, 65535] { R99 += 1, R77 += 1, R57 += 1 };
  s1 -> s7 [0, 65535] { R99 += 1, R77 += 1 };
  s2 -> s1 [0, 90] { R99 += 1, R77 += 1, R57 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R99 += 1 };
  s2 -> s2 [0, 65535] { R99 += 1, R77 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [91, 91] { R99 += 1, R77 += 1, R57 += 1 };
  s2 -> s1 [92, 65535] { R99 += 1, R77 += 1, R57 += 1 };
  s3 -> s1 [0, 90] { R99 += 1, R77 += 1, R57 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R99 += 1, R77 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535] { R99 += 1, R76 += 1, R77 += 1 };
  s3 -> s4 [91, 91] { R99 += 1, R77 += 1, R57 += 1 };
  s3 -> s1 [92, 65535] { R99 += 1, R77 += 1, R57 += 1 };
  s4 -> s1 [0, 65535] { R99 += 1, R77 += 1, R57 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R99 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R99 += 1 };
  s7 -> s7 [0, 65535] { R99 += 1, R77 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R101 += 1, R79 += 1, R59 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R101 += 1, R79 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s3 [0, 65535] { R101 += 1, R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R101 += 1, R79 += 1, R59 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R101 += 1 };
  s1 -> s6 [0, 65535] { R101 += 1, R79 += 1 };
  s2 -> s1 [0, 65535] { R101 += 1, R79 += 1, R59 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R101 += 1, R79 += 1, R58 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R101 += 1 };
  s3 -> s1 [0, 65535] { R101 += 1, R79 += 1, R59 += 1, R4 += 1 };
  s3 -> s2 [0, 65535] { R101 += 1, R79 += 1, R58 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R101 += 1, R78 += 1, R79 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R101 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R101 += 1 };
  s6 -> s6 [0, 65535] { R101 += 1, R79 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R69 && R3 = R101 && R8 = 0 && R9 = R79 && R60 = 0 && R64 - R79 = 1 && R65 = R69 && R66 - R79 = 1 && R67 = R69 && R68 - R79 = 1 && R70 = 0 && R71 = R79 && R72 = 0 && R73 = R79 && R74 = 0 && R75 = R79 && R76 = 0 && R77 = R79 && R78 = 0 && R80 = 10 && R81 = R101 && R82 = 10 && R83 = R101 && R84 = 10 && R85 = R101 && R86 = 10 && R87 = R101 && R88 = 10 && R89 = R101 && R90 = 10 && R91 = R101 && R92 = 10 && R93 = R101 && R94 = 10 && R95 = R101 && R96 = 10 && R97 = R101 && R98 = 10 && R99 = R101 && R100 = 10 && R0 != 0 && R1 != 0 && R6 < 1 && R79 < R69 && -1 < R79 && 9 < R101 && (R1 != R61 || R61 = 1 || R61 < 0) && (R56 != 0 || ((R4 != 0 || ((R0 != R57 || R57 = 1 || R57 < 0) && (R0 = R57 || R57 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R57 || R57 = 1 || R57 < 0) && (R57 != 1 || -1 < R0) && (R0 = R57 || R57 = 1))))) && (R58 != 0 || ((R4 != 0 || ((R0 != R59 || R59 = 1 || R59 < 0) && (R0 = R59 || R59 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R59 || R59 = 1 || R59 < 0) && (R59 != 1 || -1 < R0) && (R0 = R59 || R59 = 1))))) && (R61 != 1 || -1 < R1) && (R62 != 0 || ((R5 != 0 || ((R1 != R63 || R63 = 1 || R63 < 0) && (R1 = R63 || R63 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R63 || R63 = 1 || R63 < 0) && (R63 != 1 || -1 < R1) && (R1 = R63 || R63 = 1))))) && (R1 = R61 || R61 = 1) && (R56 = 0 || (R4 = 0 && R0 < 0)) && (R58 = 0 || (R4 = 0 && R0 < 0)) && (R62 = 0 || (R5 = 0 && R1 < 0));
// End of Parikh automata intersection problem
