// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R13, R14, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P55
automaton P55_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R228 += 1 };
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s0 -> s2 [46, 46] { R228 += 1 };
  s0 -> s3 [47, 47] { R228 += 1 };
  s0 -> s1 [48, 65535] { R228 += 1 };
  s1 -> s1 [0, 45] { R228 += 1 };
  s1 -> s2 [46, 46] { R228 += 1 };
  s1 -> s3 [47, 47] { R228 += 1 };
  s1 -> s1 [48, 65535] { R228 += 1 };
  s2 -> s1 [0, 45] { R228 += 1 };
  s2 -> s2 [46, 46] { R228 += 1 };
  s2 -> s3 [47, 47] { R228 += 1 };
  s2 -> s1 [48, 114] { R228 += 1 };
  s2 -> s8 [115, 115] { R228 += 1 };
  s2 -> s1 [116, 65535] { R228 += 1 };
  s3 -> s3 [0, 45] { R228 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R228 += 1 };
  s3 -> s3 [47, 65535] { R228 += 1 };
  s4 -> s3 [0, 45] { R228 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R228 += 1 };
  s4 -> s3 [47, 114] { R228 += 1 };
  s4 -> s5 [115, 115] { R228 += 1 };
  s4 -> s3 [116, 65535] { R228 += 1 };
  s5 -> s3 [0, 45] { R228 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R228 += 1 };
  s5 -> s3 [47, 110] { R228 += 1 };
  s5 -> s6 [111, 111] { R228 += 1 };
  s5 -> s3 [112, 65535] { R228 += 1 };
  s6 -> s3 [0, 45] { R228 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R228 += 1 };
  s6 -> s3 [47, 98] { R228 += 1 };
  s6 -> s7 [99, 99] { R228 += 1 };
  s6 -> s3 [100, 65535] { R228 += 1 };
  s7 -> s3 [0, 45] { R228 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R228 += 1 };
  s7 -> s3 [47, 106] { R228 += 1 };
  s7 -> s3 [108, 65535] { R228 += 1 };
  s8 -> s1 [0, 45] { R228 += 1 };
  s8 -> s2 [46, 46] { R228 += 1 };
  s8 -> s3 [47, 47] { R228 += 1 };
  s8 -> s1 [48, 110] { R228 += 1 };
  s8 -> s9 [111, 111] { R228 += 1 };
  s8 -> s1 [112, 65535] { R228 += 1 };
  s9 -> s1 [0, 45] { R228 += 1 };
  s9 -> s2 [46, 46] { R228 += 1 };
  s9 -> s3 [47, 47] { R228 += 1 };
  s9 -> s1 [48, 98] { R228 += 1 };
  s9 -> s10 [99, 99] { R228 += 1 };
  s9 -> s1 [100, 65535] { R228 += 1 };
  s10 -> s1 [0, 45] { R228 += 1 };
  s10 -> s2 [46, 46] { R228 += 1 };
  s10 -> s3 [47, 47] { R228 += 1 };
  s10 -> s1 [48, 106] { R228 += 1 };
  s10 -> s1 [108, 65535] { R228 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s0 -> s1 [0, 65535] { R230 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R230 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R232 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R232 += 1, R13 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s0 -> s3 [47, 47] { R232 += 1 };
  s0 -> s1 [48, 65535] { R232 += 1, R14 += 1 };
  s1 -> s1 [0, 46] { R232 += 1, R14 += 1 };
  s1 -> s3 [47, 47] { R232 += 1 };
  s1 -> s1 [48, 65535] { R232 += 1, R14 += 1 };
  s2 -> s1 [0, 46] { R232 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R232 += 1, R13 += 1, R14 += 1 };
  s2 -> s3 [47, 47] { R232 += 1 };
  s2 -> s1 [48, 65535] { R232 += 1, R14 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R232 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 45] { R234 += 1, R164 += 1 };
  s0 -> s2 [0, 65535] { R234 += 1, R163 += 1, R164 += 1 };
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s0 -> s3 [46, 46] { R234 += 1, R164 += 1 };
  s0 -> s1 [47, 62] { R234 += 1, R164 += 1 };
  s0 -> s1 [64, 65535] { R234 += 1, R164 += 1 };
  s1 -> s1 [0, 45] { R234 += 1, R164 += 1 };
  s1 -> s3 [46, 46] { R234 += 1, R164 += 1 };
  s1 -> s1 [47, 62] { R234 += 1, R164 += 1 };
  s1 -> s1 [64, 65535] { R234 += 1, R164 += 1 };
  s2 -> s1 [0, 45] { R234 += 1, R164 += 1 };
  s2 -> s2 [0, 65535] { R234 += 1, R163 += 1, R164 += 1 };
  s2 -> s3 [46, 46] { R234 += 1, R164 += 1 };
  s2 -> s1 [47, 62] { R234 += 1, R164 += 1 };
  s2 -> s1 [64, 65535] { R234 += 1, R164 += 1 };
  s3 -> s3 [0, 62] { R234 += 1, R164 += 1 };
  s3 -> s3 [0, 65535] { R234 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [64, 65535] { R234 += 1, R164 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s1 [0, 65535] { R236 += 1, R166 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R236 += 1, R165 += 1, R166 += 1 };
  s1 -> s4 [0, 65535] { R236 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R236 += 1, R166 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R236 += 1, R166 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R236 += 1, R165 += 1, R166 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R236 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R238 += 1, R168 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s0 -> s2 [0, 65535] { R238 += 1, R168 += 1, R145 += 1, R146 += 1 };
  s0 -> s3 [0, 65535] { R238 += 1, R167 += 1, R168 += 1 };
  s0 -> s4 [63, 63] { R238 += 1, R168 += 1, R146 += 1 };
  s0 -> s1 [64, 65535] { R238 += 1, R168 += 1, R146 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R238 += 1 };
  s1 -> s1 [0, 65535] { R238 += 1, R168 += 1, R146 += 1 };
  s1 -> s7 [0, 65535] { R238 += 1, R168 += 1 };
  s2 -> s1 [0, 62] { R238 += 1, R168 += 1, R146 += 1 };
  s2 -> s2 [0, 65535] { R238 += 1, R168 += 1, R145 += 1, R146 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R238 += 1 };
  s2 -> s4 [63, 63] { R238 += 1, R168 += 1, R146 += 1 };
  s2 -> s1 [64, 65535] { R238 += 1, R168 += 1, R146 += 1 };
  s3 -> s1 [0, 62] { R238 += 1, R168 += 1, R146 += 1 };
  s3 -> s2 [0, 65535] { R238 += 1, R168 += 1, R145 += 1, R146 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R238 += 1, R167 += 1, R168 += 1 };
  s3 -> s4 [63, 63] { R238 += 1, R168 += 1, R146 += 1 };
  s3 -> s1 [64, 65535] { R238 += 1, R168 += 1, R146 += 1 };
  s4 -> s1 [0, 65535] { R238 += 1, R168 += 1, R146 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R238 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R238 += 1 };
  s7 -> s7 [0, 65535] { R238 += 1, R168 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R240 += 1, R170 += 1, R147 += 1, R148 += 1 };
  s0 -> s2 [0, 65535] { R240 += 1, R170 += 1, R148 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s3 [0, 65535] { R240 += 1, R169 += 1, R170 += 1 };
  s1 -> s1 [0, 65535] { R240 += 1, R170 += 1, R147 += 1, R148 += 1 };
  s1 -> s2 [0, 65535] { R240 += 1, R170 += 1, R148 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R240 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R240 += 1, R170 += 1, R148 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R240 += 1, R170 += 1 };
  s2 -> s6 [0, 65535] { R240 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R240 += 1, R170 += 1, R147 += 1, R148 += 1 };
  s3 -> s2 [0, 65535] { R240 += 1, R170 += 1, R148 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R240 += 1, R169 += 1, R170 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R240 += 1, R170 += 1 };
  s5 -> s6 [0, 65535] { R240 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R240 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 63] { R242 += 1, R198 += 1 };
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s0 -> s2 [0, 65535] { R242 += 1, R197 += 1, R198 += 1 };
  s0 -> s3 [64, 64] { R242 += 1, R198 += 1 };
  s0 -> s1 [65, 65535] { R242 += 1, R198 += 1 };
  s1 -> s1 [0, 63] { R242 += 1, R198 += 1 };
  s1 -> s3 [64, 64] { R242 += 1, R198 += 1 };
  s1 -> s1 [65, 65535] { R242 += 1, R198 += 1 };
  s2 -> s1 [0, 63] { R242 += 1, R198 += 1 };
  s2 -> s2 [0, 65535] { R242 += 1, R197 += 1, R198 += 1 };
  s2 -> s3 [64, 64] { R242 += 1, R198 += 1 };
  s2 -> s1 [65, 65535] { R242 += 1, R198 += 1 };
  s3 -> s4 [0, 65535] { R242 += 1 };
  s3 -> s3 [0, 65535] { R242 += 1, R198 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R242 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R244 += 1, R199 += 1, R200 += 1 };
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s0 -> s2 [0, 65535] { R244 += 1, R200 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R244 += 1, R199 += 1, R200 += 1 };
  s1 -> s2 [0, 65535] { R244 += 1, R200 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R244 += 1, R200 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R244 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R244 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 36] { R246 += 1, R202 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s0 -> s2 [0, 65535] { R246 += 1, R202 += 1, R153 += 1, R154 += 1 };
  s0 -> s3 [0, 65535] { R246 += 1, R201 += 1, R202 += 1 };
  s0 -> s1 [38, 42] { R246 += 1, R202 += 1, R154 += 1 };
  s0 -> s1 [44, 57] { R246 += 1, R202 += 1, R154 += 1 };
  s0 -> s1 [59, 63] { R246 += 1, R202 += 1, R154 += 1 };
  s0 -> s1 [65, 65535] { R246 += 1, R202 += 1, R154 += 1 };
  s1 -> s1 [0, 36] { R246 += 1, R202 += 1, R154 += 1 };
  s1 -> s1 [0, 65535] { R246 += 1, R202 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R246 += 1 };
  s1 -> s1 [38, 42] { R246 += 1, R202 += 1, R154 += 1 };
  s1 -> s1 [44, 57] { R246 += 1, R202 += 1, R154 += 1 };
  s1 -> s1 [59, 63] { R246 += 1, R202 += 1, R154 += 1 };
  s1 -> s1 [65, 65535] { R246 += 1, R202 += 1, R154 += 1 };
  s2 -> s1 [0, 36] { R246 += 1, R202 += 1, R154 += 1 };
  s2 -> s2 [0, 65535] { R246 += 1, R202 += 1, R153 += 1, R154 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R246 += 1 };
  s2 -> s1 [38, 42] { R246 += 1, R202 += 1, R154 += 1 };
  s2 -> s1 [44, 57] { R246 += 1, R202 += 1, R154 += 1 };
  s2 -> s1 [59, 63] { R246 += 1, R202 += 1, R154 += 1 };
  s2 -> s1 [65, 65535] { R246 += 1, R202 += 1, R154 += 1 };
  s3 -> s1 [0, 36] { R246 += 1, R202 += 1, R154 += 1 };
  s3 -> s2 [0, 65535] { R246 += 1, R202 += 1, R153 += 1, R154 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R246 += 1, R201 += 1, R202 += 1 };
  s3 -> s1 [38, 42] { R246 += 1, R202 += 1, R154 += 1 };
  s3 -> s1 [44, 57] { R246 += 1, R202 += 1, R154 += 1 };
  s3 -> s1 [59, 63] { R246 += 1, R202 += 1, R154 += 1 };
  s3 -> s1 [65, 65535] { R246 += 1, R202 += 1, R154 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R246 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R248 += 1, R204 += 1, R156 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R248 += 1, R204 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [0, 65535] { R248 += 1, R203 += 1, R204 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s1 -> s5 [0, 65535] { R248 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R248 += 1, R204 += 1 };
  s1 -> s1 [0, 65535] { R248 += 1, R204 += 1, R156 += 1, R0 += 1 };
  s2 -> s5 [0, 65535] { R248 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R248 += 1, R204 += 1, R156 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R248 += 1, R204 += 1, R155 += 1, R156 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R248 += 1, R204 += 1, R156 += 1, R0 += 1 };
  s3 -> s2 [0, 65535] { R248 += 1, R204 += 1, R155 += 1, R156 += 1 };
  s3 -> s3 [0, 65535] { R248 += 1, R203 += 1, R204 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R248 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R248 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R248 += 1, R204 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 43] { R250 += 1, R206 += 1, R176 += 1 };
  s0 -> s2 [0, 65535] { R250 += 1, R206 += 1, R175 += 1, R176 += 1 };
  s0 -> s3 [0, 65535] { R250 += 1, R205 += 1, R206 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s0 -> s1 [45, 64] { R250 += 1, R206 += 1, R176 += 1 };
  s0 -> s4 [81, 81] { R250 += 1, R206 += 1, R176 += 1 };
  s0 -> s1 [82, 65535] { R250 += 1, R206 += 1, R176 += 1 };
  s1 -> s1 [0, 43] { R250 += 1, R206 += 1, R176 += 1 };
  s1 -> s1 [45, 64] { R250 += 1, R206 += 1, R176 += 1 };
  s1 -> s4 [81, 81] { R250 += 1, R206 += 1, R176 += 1 };
  s1 -> s1 [82, 65535] { R250 += 1, R206 += 1, R176 += 1 };
  s2 -> s1 [0, 43] { R250 += 1, R206 += 1, R176 += 1 };
  s2 -> s2 [0, 65535] { R250 += 1, R206 += 1, R175 += 1, R176 += 1 };
  s2 -> s1 [45, 64] { R250 += 1, R206 += 1, R176 += 1 };
  s2 -> s4 [81, 81] { R250 += 1, R206 += 1, R176 += 1 };
  s2 -> s1 [82, 65535] { R250 += 1, R206 += 1, R176 += 1 };
  s3 -> s1 [0, 43] { R250 += 1, R206 += 1, R176 += 1 };
  s3 -> s2 [0, 65535] { R250 += 1, R206 += 1, R175 += 1, R176 += 1 };
  s3 -> s3 [0, 65535] { R250 += 1, R205 += 1, R206 += 1 };
  s3 -> s1 [45, 64] { R250 += 1, R206 += 1, R176 += 1 };
  s3 -> s4 [81, 81] { R250 += 1, R206 += 1, R176 += 1 };
  s3 -> s1 [82, 65535] { R250 += 1, R206 += 1, R176 += 1 };
  s4 -> s4 [0, 43] { R250 += 1, R206 += 1, R176 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R250 += 1, R206 += 1 };
  s4 -> s6 [0, 65535] { R250 += 1 };
  s4 -> s4 [45, 64] { R250 += 1, R206 += 1, R176 += 1 };
  s4 -> s4 [81, 65535] { R250 += 1, R206 += 1, R176 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R250 += 1 };
  accepting s4, s5, s6;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R252 += 1, R208 += 1, R178 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R252 += 1, R208 += 1, R177 += 1, R178 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s0 -> s3 [0, 65535] { R252 += 1, R207 += 1, R208 += 1 };
  s1 -> s6 [0, 65535] { R252 += 1, R208 += 1 };
  s1 -> s1 [0, 65535] { R252 += 1, R208 += 1, R178 += 1, R2 += 1 };
  s1 -> s5 [0, 65535] { R252 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R252 += 1, R208 += 1, R178 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R252 += 1, R208 += 1, R177 += 1, R178 += 1 };
  s2 -> s5 [0, 65535] { R252 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R252 += 1, R208 += 1, R178 += 1, R2 += 1 };
  s3 -> s2 [0, 65535] { R252 += 1, R208 += 1, R177 += 1, R178 += 1 };
  s3 -> s3 [0, 65535] { R252 += 1, R207 += 1, R208 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R252 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R252 += 1, R208 += 1 };
  s6 -> s5 [0, 65535] { R252 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 57] { R254 += 1, R210 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R253 += 1, R254 += 1 };
  s0 -> s2 [0, 65535] { R254 += 1, R210 += 1, R179 += 1, R180 += 1 };
  s0 -> s3 [0, 65535] { R254 += 1, R209 += 1, R210 += 1 };
  s0 -> s4 [0, 65535] { R254 += 1, R210 += 1, R180 += 1, R8 += 1 };
  s0 -> s5 [58, 58] { R254 += 1, R210 += 1, R180 += 1 };
  s0 -> s1 [59, 65535] { R254 += 1, R210 += 1, R180 += 1 };
  s1 -> s1 [0, 57] { R254 += 1, R210 += 1, R180 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R254 += 1 };
  s1 -> s1 [0, 65535] { R254 += 1, R210 += 1 };
  s1 -> s5 [58, 58] { R254 += 1, R210 += 1, R180 += 1 };
  s1 -> s1 [59, 65535] { R254 += 1, R210 += 1, R180 += 1 };
  s2 -> s1 [0, 57] { R254 += 1, R210 += 1, R180 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R254 += 1 };
  s2 -> s2 [0, 65535] { R254 += 1, R210 += 1, R179 += 1, R180 += 1 };
  s2 -> s4 [0, 65535] { R254 += 1, R210 += 1, R180 += 1, R8 += 1 };
  s2 -> s5 [58, 58] { R254 += 1, R210 += 1, R180 += 1 };
  s2 -> s1 [59, 65535] { R254 += 1, R210 += 1, R180 += 1 };
  s3 -> s1 [0, 57] { R254 += 1, R210 += 1, R180 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R254 += 1, R210 += 1, R179 += 1, R180 += 1 };
  s3 -> s3 [0, 65535] { R254 += 1, R209 += 1, R210 += 1 };
  s3 -> s4 [0, 65535] { R254 += 1, R210 += 1, R180 += 1, R8 += 1 };
  s3 -> s5 [58, 58] { R254 += 1, R210 += 1, R180 += 1 };
  s3 -> s1 [59, 65535] { R254 += 1, R210 += 1, R180 += 1 };
  s4 -> s1 [0, 57] { R254 += 1, R210 += 1, R180 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R254 += 1 };
  s4 -> s4 [0, 65535] { R254 += 1, R210 += 1, R180 += 1, R8 += 1 };
  s4 -> s8 [0, 65535] { R254 += 1, R210 += 1 };
  s4 -> s5 [58, 58] { R254 += 1, R210 += 1, R180 += 1 };
  s4 -> s1 [59, 65535] { R254 += 1, R210 += 1, R180 += 1 };
  s5 -> s5 [0, 65535] { R254 += 1, R210 += 1, R180 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R254 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R254 += 1 };
  s8 -> s8 [0, 65535] { R254 += 1, R210 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 80] { R256 += 1, R212 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R255 += 1, R256 += 1 };
  s0 -> s2 [0, 65535] { R256 += 1, R212 += 1, R181 += 1, R182 += 1 };
  s0 -> s3 [0, 65535] { R256 += 1, R211 += 1, R212 += 1 };
  s0 -> s4 [0, 65535] { R256 += 1, R212 += 1, R182 += 1, R9 += 1 };
  s0 -> s5 [81, 81] { R256 += 1, R212 += 1, R182 += 1 };
  s0 -> s1 [82, 65535] { R256 += 1, R212 += 1, R182 += 1 };
  s1 -> s1 [0, 80] { R256 += 1, R212 += 1, R182 += 1 };
  s1 -> s7 [0, 65535] { R256 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R256 += 1, R212 += 1 };
  s1 -> s5 [81, 81] { R256 += 1, R212 += 1, R182 += 1 };
  s1 -> s1 [82, 65535] { R256 += 1, R212 += 1, R182 += 1 };
  s2 -> s1 [0, 80] { R256 += 1, R212 += 1, R182 += 1 };
  s2 -> s7 [0, 65535] { R256 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R256 += 1, R212 += 1, R181 += 1, R182 += 1 };
  s2 -> s4 [0, 65535] { R256 += 1, R212 += 1, R182 += 1, R9 += 1 };
  s2 -> s5 [81, 81] { R256 += 1, R212 += 1, R182 += 1 };
  s2 -> s1 [82, 65535] { R256 += 1, R212 += 1, R182 += 1 };
  s3 -> s1 [0, 80] { R256 += 1, R212 += 1, R182 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s2 [0, 65535] { R256 += 1, R212 += 1, R181 += 1, R182 += 1 };
  s3 -> s3 [0, 65535] { R256 += 1, R211 += 1, R212 += 1 };
  s3 -> s4 [0, 65535] { R256 += 1, R212 += 1, R182 += 1, R9 += 1 };
  s3 -> s5 [81, 81] { R256 += 1, R212 += 1, R182 += 1 };
  s3 -> s1 [82, 65535] { R256 += 1, R212 += 1, R182 += 1 };
  s4 -> s1 [0, 80] { R256 += 1, R212 += 1, R182 += 1 };
  s4 -> s6 [0, 65535] { R256 += 1, R212 += 1 };
  s4 -> s7 [0, 65535] { R256 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R256 += 1, R212 += 1, R182 += 1, R9 += 1 };
  s4 -> s5 [81, 81] { R256 += 1, R212 += 1, R182 += 1 };
  s4 -> s1 [82, 65535] { R256 += 1, R212 += 1, R182 += 1 };
  s5 -> s5 [0, 65535] { R256 += 1, R212 += 1, R182 += 1 };
  s6 -> s6 [0, 65535] { R256 += 1, R212 += 1 };
  s6 -> s7 [0, 65535] { R256 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R256 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 90] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s0 -> s2 [0, 65535] { R258 += 1, R214 += 1, R183 += 1, R184 += 1 };
  s0 -> s3 [0, 65535] { R258 += 1, R213 += 1, R214 += 1 };
  s0 -> s0 [0, 65535] { R257 += 1, R258 += 1 };
  s0 -> s4 [0, 65535] { R258 += 1, R214 += 1, R184 += 1, R149 += 1, R150 += 1 };
  s0 -> s5 [91, 91] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s0 -> s1 [92, 65535] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s1 -> s1 [0, 65535] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s1 -> s6 [0, 65535] { R258 += 1 };
  s1 -> s9 [0, 65535] { R258 += 1, R214 += 1, R184 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R258 += 1, R214 += 1 };
  s2 -> s1 [0, 90] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s2 -> s6 [0, 65535] { R258 += 1 };
  s2 -> s2 [0, 65535] { R258 += 1, R214 += 1, R183 += 1, R184 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R258 += 1, R214 += 1, R184 += 1, R149 += 1, R150 += 1 };
  s2 -> s5 [91, 91] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s2 -> s1 [92, 65535] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s3 -> s1 [0, 90] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s3 -> s2 [0, 65535] { R258 += 1, R214 += 1, R183 += 1, R184 += 1 };
  s3 -> s3 [0, 65535] { R258 += 1, R213 += 1, R214 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R258 += 1, R214 += 1, R184 += 1, R149 += 1, R150 += 1 };
  s3 -> s5 [91, 91] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s3 -> s1 [92, 65535] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s4 -> s1 [0, 90] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s4 -> s6 [0, 65535] { R258 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R258 += 1, R214 += 1, R184 += 1, R149 += 1, R150 += 1 };
  s4 -> s8 [0, 65535] { R258 += 1, R214 += 1 };
  s4 -> s5 [91, 91] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s4 -> s1 [92, 65535] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s5 -> s1 [0, 65535] { R258 += 1, R214 += 1, R184 += 1, R150 += 1 };
  s6 -> s6 [0, 65535] { R258 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R258 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R258 += 1, R214 += 1 };
  s9 -> s6 [0, 65535] { R258 += 1 };
  s9 -> s9 [0, 65535] { R258 += 1, R214 += 1, R184 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R258 += 1, R214 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R260 += 1, R216 += 1, R186 += 1, R151 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R260 += 1, R215 += 1, R216 += 1 };
  s0 -> s3 [0, 65535] { R260 += 1, R216 += 1, R186 += 1, R152 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R259 += 1, R260 += 1 };
  s0 -> s4 [0, 65535] { R260 += 1, R216 += 1, R185 += 1, R186 += 1 };
  s1 -> s5 [0, 65535] { R260 += 1 };
  s1 -> s1 [0, 65535] { R260 += 1, R216 += 1, R186 += 1, R151 += 1, R152 += 1 };
  s1 -> s3 [0, 65535] { R260 += 1, R216 += 1, R186 += 1, R152 += 1, R7 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R260 += 1, R216 += 1 };
  s2 -> s1 [0, 65535] { R260 += 1, R216 += 1, R186 += 1, R151 += 1, R152 += 1 };
  s2 -> s2 [0, 65535] { R260 += 1, R215 += 1, R216 += 1 };
  s2 -> s3 [0, 65535] { R260 += 1, R216 += 1, R186 += 1, R152 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R260 += 1, R216 += 1, R185 += 1, R186 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s5 [0, 65535] { R260 += 1 };
  s3 -> s3 [0, 65535] { R260 += 1, R216 += 1, R186 += 1, R152 += 1, R7 += 1 };
  s3 -> s7 [0, 65535] { R260 += 1, R216 += 1, R186 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R260 += 1, R216 += 1 };
  s4 -> s5 [0, 65535] { R260 += 1 };
  s4 -> s1 [0, 65535] { R260 += 1, R216 += 1, R186 += 1, R151 += 1, R152 += 1 };
  s4 -> s3 [0, 65535] { R260 += 1, R216 += 1, R186 += 1, R152 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R260 += 1, R216 += 1, R185 += 1, R186 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R260 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R260 += 1 };
  s7 -> s7 [0, 65535] { R260 += 1, R216 += 1, R186 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [0, 65535] { R260 += 1, R216 += 1 };
  s8 -> s5 [0, 65535] { R260 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R260 += 1, R216 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 80] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R262 += 1, R218 += 1, R188 += 1, R157 += 1, R158 += 1 };
  s0 -> s3 [0, 65535] { R262 += 1, R218 += 1, R187 += 1, R188 += 1 };
  s0 -> s0 [0, 65535] { R261 += 1, R262 += 1 };
  s0 -> s4 [0, 65535] { R262 += 1, R217 += 1, R218 += 1 };
  s0 -> s1 [82, 65535] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s1 -> s1 [0, 80] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R262 += 1 };
  s1 -> s7 [0, 65535] { R262 += 1, R218 += 1 };
  s1 -> s1 [0, 65535] { R262 += 1, R218 += 1, R188 += 1 };
  s1 -> s1 [82, 65535] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s2 -> s1 [0, 80] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R262 += 1, R218 += 1, R188 += 1, R157 += 1, R158 += 1 };
  s2 -> s6 [0, 65535] { R262 += 1 };
  s2 -> s7 [0, 65535] { R262 += 1, R218 += 1 };
  s2 -> s1 [82, 65535] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s3 -> s1 [0, 80] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R262 += 1, R218 += 1, R188 += 1, R157 += 1, R158 += 1 };
  s3 -> s3 [0, 65535] { R262 += 1, R218 += 1, R187 += 1, R188 += 1 };
  s3 -> s6 [0, 65535] { R262 += 1 };
  s3 -> s1 [82, 65535] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s4 -> s1 [0, 80] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R262 += 1, R218 += 1, R188 += 1, R157 += 1, R158 += 1 };
  s4 -> s3 [0, 65535] { R262 += 1, R218 += 1, R187 += 1, R188 += 1 };
  s4 -> s4 [0, 65535] { R262 += 1, R217 += 1, R218 += 1 };
  s4 -> s1 [82, 65535] { R262 += 1, R218 += 1, R188 += 1, R158 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R262 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R262 += 1 };
  s7 -> s7 [0, 65535] { R262 += 1, R218 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R264 += 1, R220 += 1, R190 += 1, R159 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R264 += 1, R220 += 1, R190 += 1, R160 += 1, R143 += 1 };
  s0 -> s3 [0, 65535] { R264 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s0 -> s4 [0, 65535] { R264 += 1, R219 += 1, R220 += 1 };
  s0 -> s0 [0, 65535] { R263 += 1, R264 += 1 };
  s1 -> s1 [0, 65535] { R264 += 1, R220 += 1, R190 += 1, R159 += 1, R160 += 1 };
  s1 -> s2 [0, 65535] { R264 += 1, R220 += 1, R190 += 1, R160 += 1, R143 += 1 };
  s1 -> s7 [0, 65535] { R264 += 1, R220 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R264 += 1 };
  s2 -> s7 [0, 65535] { R264 += 1, R220 += 1 };
  s2 -> s2 [0, 65535] { R264 += 1, R220 += 1, R190 += 1, R160 += 1, R143 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s8 [0, 65535] { R264 += 1, R220 += 1, R190 += 1 };
  s2 -> s6 [0, 65535] { R264 += 1 };
  s3 -> s1 [0, 65535] { R264 += 1, R220 += 1, R190 += 1, R159 += 1, R160 += 1 };
  s3 -> s2 [0, 65535] { R264 += 1, R220 += 1, R190 += 1, R160 += 1, R143 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R264 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s3 -> s6 [0, 65535] { R264 += 1 };
  s4 -> s1 [0, 65535] { R264 += 1, R220 += 1, R190 += 1, R159 += 1, R160 += 1 };
  s4 -> s2 [0, 65535] { R264 += 1, R220 += 1, R190 += 1, R160 += 1, R143 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R264 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s4 -> s4 [0, 65535] { R264 += 1, R219 += 1, R220 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R264 += 1 };
  s7 -> s7 [0, 65535] { R264 += 1, R220 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R264 += 1 };
  s8 -> s7 [0, 65535] { R264 += 1, R220 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R264 += 1, R220 += 1, R190 += 1 };
  s8 -> s6 [0, 65535] { R264 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 81] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s0 -> s0 [0, 65535] { R265 += 1, R266 += 1 };
  s0 -> s2 [0, 65535] { R266 += 1, R222 += 1, R191 += 1, R192 += 1 };
  s0 -> s3 [0, 65535] { R266 += 1, R221 += 1, R222 += 1 };
  s0 -> s4 [0, 65535] { R266 += 1, R222 += 1, R192 += 1, R161 += 1, R162 += 1 };
  s0 -> s1 [91, 65535] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s1 -> s1 [0, 81] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s1 -> s5 [0, 65535] { R266 += 1, R222 += 1 };
  s1 -> s1 [0, 65535] { R266 += 1, R222 += 1, R192 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R266 += 1 };
  s1 -> s1 [91, 65535] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s2 -> s1 [0, 81] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s2 -> s2 [0, 65535] { R266 += 1, R222 += 1, R191 += 1, R192 += 1 };
  s2 -> s4 [0, 65535] { R266 += 1, R222 += 1, R192 += 1, R161 += 1, R162 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R266 += 1 };
  s2 -> s1 [91, 65535] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s3 -> s1 [0, 81] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s3 -> s2 [0, 65535] { R266 += 1, R222 += 1, R191 += 1, R192 += 1 };
  s3 -> s3 [0, 65535] { R266 += 1, R221 += 1, R222 += 1 };
  s3 -> s4 [0, 65535] { R266 += 1, R222 += 1, R192 += 1, R161 += 1, R162 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 65535] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s4 -> s1 [0, 81] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s4 -> s5 [0, 65535] { R266 += 1, R222 += 1 };
  s4 -> s4 [0, 65535] { R266 += 1, R222 += 1, R192 += 1, R161 += 1, R162 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R266 += 1 };
  s4 -> s1 [91, 65535] { R266 += 1, R222 += 1, R192 += 1, R162 += 1 };
  s5 -> s5 [0, 65535] { R266 += 1, R222 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R266 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R266 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R268 += 1, R223 += 1, R224 += 1 };
  s0 -> s2 [0, 65535] { R268 += 1, R224 += 1, R194 += 1, R171 += 1, R172 += 1 };
  s0 -> s3 [0, 65535] { R268 += 1, R224 += 1, R194 += 1, R172 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R267 += 1, R268 += 1 };
  s0 -> s4 [0, 65535] { R268 += 1, R224 += 1, R193 += 1, R194 += 1 };
  s1 -> s1 [0, 65535] { R268 += 1, R223 += 1, R224 += 1 };
  s1 -> s2 [0, 65535] { R268 += 1, R224 += 1, R194 += 1, R171 += 1, R172 += 1 };
  s1 -> s3 [0, 65535] { R268 += 1, R224 += 1, R194 += 1, R172 += 1, R144 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [0, 65535] { R268 += 1, R224 += 1, R193 += 1, R194 += 1 };
  s2 -> s7 [0, 65535] { R268 += 1, R224 += 1 };
  s2 -> s2 [0, 65535] { R268 += 1, R224 += 1, R194 += 1, R171 += 1, R172 += 1 };
  s2 -> s3 [0, 65535] { R268 += 1, R224 += 1, R194 += 1, R172 += 1, R144 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R268 += 1 };
  s3 -> s7 [0, 65535] { R268 += 1, R224 += 1 };
  s3 -> s8 [0, 65535] { R268 += 1, R224 += 1, R194 += 1 };
  s3 -> s3 [0, 65535] { R268 += 1, R224 += 1, R194 += 1, R172 += 1, R144 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R268 += 1 };
  s4 -> s2 [0, 65535] { R268 += 1, R224 += 1, R194 += 1, R171 += 1, R172 += 1 };
  s4 -> s3 [0, 65535] { R268 += 1, R224 += 1, R194 += 1, R172 += 1, R144 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R268 += 1 };
  s4 -> s4 [0, 65535] { R268 += 1, R224 += 1, R193 += 1, R194 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R268 += 1 };
  s7 -> s7 [0, 65535] { R268 += 1, R224 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R268 += 1 };
  s8 -> s7 [0, 65535] { R268 += 1, R224 += 1 };
  s8 -> s8 [0, 65535] { R268 += 1, R224 += 1, R194 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R268 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 80] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s0 -> s2 [0, 65535] { R270 += 1, R226 += 1, R195 += 1, R196 += 1 };
  s0 -> s0 [0, 65535] { R269 += 1, R270 += 1 };
  s0 -> s3 [0, 65535] { R270 += 1, R225 += 1, R226 += 1 };
  s0 -> s4 [0, 65535] { R270 += 1, R226 += 1, R196 += 1, R173 += 1, R174 += 1 };
  s0 -> s5 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s0 -> s6 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s0 -> s1 [91, 65535] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s1 -> s1 [0, 80] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R270 += 1 };
  s1 -> s1 [0, 65535] { R270 += 1, R226 += 1, R196 += 1 };
  s1 -> s9 [0, 65535] { R270 += 1, R226 += 1 };
  s1 -> s5 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s1 -> s6 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s1 -> s1 [91, 65535] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s2 -> s1 [0, 80] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s2 -> s2 [0, 65535] { R270 += 1, R226 += 1, R195 += 1, R196 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R270 += 1 };
  s2 -> s4 [0, 65535] { R270 += 1, R226 += 1, R196 += 1, R173 += 1, R174 += 1 };
  s2 -> s5 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s2 -> s6 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s2 -> s1 [91, 65535] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s3 -> s1 [0, 80] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s3 -> s2 [0, 65535] { R270 += 1, R226 += 1, R195 += 1, R196 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R270 += 1, R225 += 1, R226 += 1 };
  s3 -> s4 [0, 65535] { R270 += 1, R226 += 1, R196 += 1, R173 += 1, R174 += 1 };
  s3 -> s5 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s3 -> s6 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s3 -> s1 [91, 65535] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s4 -> s1 [0, 80] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R270 += 1 };
  s4 -> s9 [0, 65535] { R270 += 1, R226 += 1 };
  s4 -> s4 [0, 65535] { R270 += 1, R226 += 1, R196 += 1, R173 += 1, R174 += 1 };
  s4 -> s5 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s4 -> s6 [81, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s4 -> s1 [91, 65535] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R270 += 1 };
  s5 -> s5 [0, 65535] { R270 += 1, R226 += 1, R196 += 1 };
  s5 -> s9 [0, 65535] { R270 += 1, R226 += 1 };
  s6 -> s6 [0, 81] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R270 += 1 };
  s6 -> s6 [0, 65535] { R270 += 1, R226 += 1, R196 += 1 };
  s6 -> s9 [0, 65535] { R270 += 1, R226 += 1 };
  s6 -> s6 [91, 65535] { R270 += 1, R226 += 1, R196 += 1, R174 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R270 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R270 += 1 };
  s9 -> s9 [0, 65535] { R270 += 1, R226 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
};
constraint R2 = R162 && R3 = R196 && R4 = R170 && R5 = R270 && R13 = 0 && R14 = R226 && R149 = 0 && R150 = 1 && R151 = 0 && R152 = 1 && R153 = 0 && R154 = 14 && R155 = 0 && R156 = 14 && R157 = 0 && R158 = R162 && R159 = 0 && R160 = R162 && R161 = 0 && R163 - R226 = 1 && R164 = R170 && R165 - R226 = 1 && R166 = R170 && R167 - R226 = 1 && R168 = R170 && R169 - R226 = 1 && R175 = 15 && R176 = R196 && R177 = 15 && R178 = R196 && R179 = 15 && R180 = R196 && R181 = 15 && R182 = R196 && R183 = 15 && R184 = R196 && R185 = 15 && R186 = R196 && R187 = 15 && R188 = R196 && R189 = 15 && R190 = R196 && R191 = 15 && R192 = R196 && R193 = 15 && R194 = R196 && R195 = 15 && R197 = 0 && R198 = R226 && R199 = 0 && R200 = R226 && R201 = 0 && R202 = R226 && R203 = 0 && R204 = R226 && R205 = 0 && R206 = R226 && R207 = 0 && R208 = R226 && R209 = 0 && R210 = R226 && R211 = 0 && R212 = R226 && R213 = 0 && R214 = R226 && R215 = 0 && R216 = R226 && R217 = 0 && R218 = R226 && R219 = 0 && R220 = R226 && R221 = 0 && R222 = R226 && R223 = 0 && R224 = R226 && R225 = 0 && R227 = 10 && R228 = R270 && R229 = 10 && R230 = R270 && R231 = 10 && R232 = R270 && R233 = 10 && R234 = R270 && R235 = 10 && R236 = R270 && R237 = 10 && R238 = R270 && R239 = 10 && R240 = R270 && R241 = 10 && R242 = R270 && R243 = 10 && R244 = R270 && R245 = 10 && R246 = R270 && R247 = 10 && R248 = R270 && R249 = 10 && R250 = R270 && R251 = 10 && R252 = R270 && R253 = 10 && R254 = R270 && R255 = 10 && R256 = R270 && R257 = 10 && R258 = R270 && R259 = 10 && R260 = R270 && R261 = 10 && R262 = R270 && R263 = 10 && R264 = R270 && R265 = 10 && R266 = R270 && R267 = 10 && R268 = R270 && R269 = 10 && R0 != 0 && R1 != 0 && R8 < 1 && R9 < 1 && 0 < R162 && R226 < R170 && 14 < R196 && -1 < R226 && 9 < R270 && (R145 != 0 || ((R6 != 0 || ((R1 != R146 || R146 = 1 || R146 < 0) && (R1 = R146 || R146 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R146 || R146 = 1 || R146 < 0) && (R146 != 1 || -1 < R1) && (R1 = R146 || R146 = 1))))) && (R147 != 0 || ((R6 != 0 || ((R1 != R148 || R148 = 1 || R148 < 0) && (R1 = R148 || R148 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R148 || R148 = 1 || R148 < 0) && (R148 != 1 || -1 < R1) && (R1 = R148 || R148 = 1))))) && (R144 = 0 || (R171 = 0 && R172 = 0)) && (R144 = 0 || (R173 = 0 && R174 = 0)) && (R145 = 0 || (R6 = 0 && R1 < 0)) && (R147 = 0 || (R6 = 0 && R1 < 0));
// End of Parikh automata intersection problem
