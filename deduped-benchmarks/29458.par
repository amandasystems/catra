// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R2, R3, R4, R5, R6, R7, R8, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R135 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s0 -> s2 [46, 46] { R135 += 1 };
  s0 -> s3 [47, 47] { R135 += 1 };
  s0 -> s1 [48, 65535] { R135 += 1 };
  s1 -> s1 [0, 45] { R135 += 1 };
  s1 -> s2 [46, 46] { R135 += 1 };
  s1 -> s3 [47, 47] { R135 += 1 };
  s1 -> s1 [48, 65535] { R135 += 1 };
  s2 -> s1 [0, 45] { R135 += 1 };
  s2 -> s2 [46, 46] { R135 += 1 };
  s2 -> s3 [47, 47] { R135 += 1 };
  s2 -> s1 [48, 114] { R135 += 1 };
  s2 -> s8 [115, 115] { R135 += 1 };
  s2 -> s1 [116, 65535] { R135 += 1 };
  s3 -> s3 [0, 45] { R135 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R135 += 1 };
  s3 -> s3 [47, 65535] { R135 += 1 };
  s4 -> s3 [0, 45] { R135 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R135 += 1 };
  s4 -> s3 [47, 114] { R135 += 1 };
  s4 -> s5 [115, 115] { R135 += 1 };
  s4 -> s3 [116, 65535] { R135 += 1 };
  s5 -> s3 [0, 45] { R135 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R135 += 1 };
  s5 -> s3 [47, 110] { R135 += 1 };
  s5 -> s6 [111, 111] { R135 += 1 };
  s5 -> s3 [112, 65535] { R135 += 1 };
  s6 -> s3 [0, 45] { R135 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R135 += 1 };
  s6 -> s3 [47, 98] { R135 += 1 };
  s6 -> s7 [99, 99] { R135 += 1 };
  s6 -> s3 [100, 65535] { R135 += 1 };
  s7 -> s3 [0, 45] { R135 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R135 += 1 };
  s7 -> s3 [47, 106] { R135 += 1 };
  s7 -> s3 [108, 65535] { R135 += 1 };
  s8 -> s1 [0, 45] { R135 += 1 };
  s8 -> s2 [46, 46] { R135 += 1 };
  s8 -> s3 [47, 47] { R135 += 1 };
  s8 -> s1 [48, 110] { R135 += 1 };
  s8 -> s9 [111, 111] { R135 += 1 };
  s8 -> s1 [112, 65535] { R135 += 1 };
  s9 -> s1 [0, 45] { R135 += 1 };
  s9 -> s2 [46, 46] { R135 += 1 };
  s9 -> s3 [47, 47] { R135 += 1 };
  s9 -> s1 [48, 98] { R135 += 1 };
  s9 -> s10 [99, 99] { R135 += 1 };
  s9 -> s1 [100, 65535] { R135 += 1 };
  s10 -> s1 [0, 45] { R135 += 1 };
  s10 -> s2 [46, 46] { R135 += 1 };
  s10 -> s3 [47, 47] { R135 += 1 };
  s10 -> s1 [48, 106] { R135 += 1 };
  s10 -> s1 [108, 65535] { R135 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R137 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535] { R137 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R139 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R139 += 1, R10 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s3 [47, 47] { R139 += 1 };
  s0 -> s1 [48, 65535] { R139 += 1, R11 += 1 };
  s1 -> s1 [0, 46] { R139 += 1, R11 += 1 };
  s1 -> s3 [47, 47] { R139 += 1 };
  s1 -> s1 [48, 65535] { R139 += 1, R11 += 1 };
  s2 -> s1 [0, 46] { R139 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R139 += 1, R10 += 1, R11 += 1 };
  s2 -> s3 [47, 47] { R139 += 1 };
  s2 -> s1 [48, 65535] { R139 += 1, R11 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R139 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R141 += 1, R111 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R110 += 1, R111 += 1 };
  s1 -> s1 [0, 65535] { R141 += 1, R111 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R141 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R141 += 1, R111 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R141 += 1, R110 += 1, R111 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R141 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R143 += 1, R112 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R113 += 1, R92 += 1, R93 += 1 };
  s0 -> s3 [63, 63] { R143 += 1, R113 += 1, R93 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R112 += 1, R113 += 1 };
  s1 -> s2 [0, 65535] { R143 += 1, R113 += 1, R92 += 1, R93 += 1 };
  s1 -> s3 [63, 63] { R143 += 1, R113 += 1, R93 += 1 };
  s2 -> s2 [0, 65535] { R143 += 1, R113 += 1, R92 += 1, R93 += 1 };
  s2 -> s3 [63, 63] { R143 += 1, R113 += 1, R93 += 1 };
  s3 -> s3 [0, 65535] { R143 += 1, R113 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R143 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R143 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R145 += 1, R114 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R115 += 1, R95 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R145 += 1, R115 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s1 -> s1 [0, 65535] { R145 += 1, R114 += 1, R115 += 1 };
  s1 -> s2 [0, 65535] { R145 += 1, R115 += 1, R95 += 1, R7 += 1 };
  s1 -> s3 [0, 65535] { R145 += 1, R115 += 1, R94 += 1, R95 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R145 += 1, R115 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R115 += 1, R95 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R145 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R145 += 1, R115 += 1, R95 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R145 += 1, R115 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535] { R145 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R145 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R145 += 1, R115 += 1 };
  s6 -> s4 [0, 65535] { R145 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 63] { R147 += 1, R117 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R116 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s3 [64, 64] { R147 += 1, R117 += 1 };
  s0 -> s1 [65, 65535] { R147 += 1, R117 += 1 };
  s1 -> s1 [0, 63] { R147 += 1, R117 += 1 };
  s1 -> s3 [64, 64] { R147 += 1, R117 += 1 };
  s1 -> s1 [65, 65535] { R147 += 1, R117 += 1 };
  s2 -> s1 [0, 63] { R147 += 1, R117 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R116 += 1, R117 += 1 };
  s2 -> s3 [64, 64] { R147 += 1, R117 += 1 };
  s2 -> s1 [65, 65535] { R147 += 1, R117 += 1 };
  s3 -> s3 [0, 65535] { R147 += 1, R117 += 1 };
  s3 -> s4 [0, 65535] { R147 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R147 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s1 [0, 65535] { R149 += 1, R118 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R119 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R149 += 1, R118 += 1, R119 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R149 += 1, R119 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R149 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R149 += 1, R119 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R149 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 36] { R151 += 1, R121 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [0, 65535] { R151 += 1, R121 += 1, R96 += 1, R97 += 1 };
  s0 -> s1 [38, 42] { R151 += 1, R121 += 1, R97 += 1 };
  s0 -> s1 [44, 57] { R151 += 1, R121 += 1, R97 += 1 };
  s0 -> s1 [59, 63] { R151 += 1, R121 += 1, R97 += 1 };
  s0 -> s1 [65, 65535] { R151 += 1, R121 += 1, R97 += 1 };
  s1 -> s1 [0, 36] { R151 += 1, R121 += 1, R97 += 1 };
  s1 -> s1 [0, 65535] { R151 += 1, R121 += 1 };
  s1 -> s4 [0, 65535] { R151 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [38, 42] { R151 += 1, R121 += 1, R97 += 1 };
  s1 -> s1 [44, 57] { R151 += 1, R121 += 1, R97 += 1 };
  s1 -> s1 [59, 63] { R151 += 1, R121 += 1, R97 += 1 };
  s1 -> s1 [65, 65535] { R151 += 1, R121 += 1, R97 += 1 };
  s2 -> s1 [0, 36] { R151 += 1, R121 += 1, R97 += 1 };
  s2 -> s2 [0, 65535] { R151 += 1, R120 += 1, R121 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R151 += 1, R121 += 1, R96 += 1, R97 += 1 };
  s2 -> s1 [38, 42] { R151 += 1, R121 += 1, R97 += 1 };
  s2 -> s1 [44, 57] { R151 += 1, R121 += 1, R97 += 1 };
  s2 -> s1 [59, 63] { R151 += 1, R121 += 1, R97 += 1 };
  s2 -> s1 [65, 65535] { R151 += 1, R121 += 1, R97 += 1 };
  s3 -> s1 [0, 36] { R151 += 1, R121 += 1, R97 += 1 };
  s3 -> s4 [0, 65535] { R151 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R151 += 1, R121 += 1, R96 += 1, R97 += 1 };
  s3 -> s1 [38, 42] { R151 += 1, R121 += 1, R97 += 1 };
  s3 -> s1 [44, 57] { R151 += 1, R121 += 1, R97 += 1 };
  s3 -> s1 [59, 63] { R151 += 1, R121 += 1, R97 += 1 };
  s3 -> s1 [65, 65535] { R151 += 1, R121 += 1, R97 += 1 };
  s4 -> s4 [0, 65535] { R151 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R153 += 1, R123 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R153 += 1, R123 += 1, R99 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s3 [0, 65535] { R153 += 1, R122 += 1, R123 += 1 };
  s1 -> s1 [0, 65535] { R153 += 1, R123 += 1, R98 += 1, R99 += 1 };
  s1 -> s5 [0, 65535] { R153 += 1 };
  s1 -> s2 [0, 65535] { R153 += 1, R123 += 1, R99 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R153 += 1 };
  s2 -> s2 [0, 65535] { R153 += 1, R123 += 1, R99 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R153 += 1, R123 += 1 };
  s3 -> s1 [0, 65535] { R153 += 1, R123 += 1, R98 += 1, R99 += 1 };
  s3 -> s2 [0, 65535] { R153 += 1, R123 += 1, R99 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R153 += 1, R122 += 1, R123 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R153 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R153 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R153 += 1, R123 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 43] { R155 += 1, R125 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R125 += 1, R100 += 1, R101 += 1 };
  s0 -> s3 [0, 65535] { R155 += 1, R124 += 1, R125 += 1 };
  s0 -> s1 [45, 64] { R155 += 1, R125 += 1, R101 += 1 };
  s0 -> s1 [91, 65535] { R155 += 1, R125 += 1, R101 += 1 };
  s1 -> s1 [0, 43] { R155 += 1, R125 += 1, R101 += 1 };
  s1 -> s5 [0, 65535] { R155 += 1 };
  s1 -> s1 [0, 65535] { R155 += 1, R125 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [45, 64] { R155 += 1, R125 += 1, R101 += 1 };
  s1 -> s1 [91, 65535] { R155 += 1, R125 += 1, R101 += 1 };
  s2 -> s1 [0, 43] { R155 += 1, R125 += 1, R101 += 1 };
  s2 -> s5 [0, 65535] { R155 += 1 };
  s2 -> s2 [0, 65535] { R155 += 1, R125 += 1, R100 += 1, R101 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [45, 64] { R155 += 1, R125 += 1, R101 += 1 };
  s2 -> s1 [91, 65535] { R155 += 1, R125 += 1, R101 += 1 };
  s3 -> s1 [0, 43] { R155 += 1, R125 += 1, R101 += 1 };
  s3 -> s2 [0, 65535] { R155 += 1, R125 += 1, R100 += 1, R101 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R155 += 1, R124 += 1, R125 += 1 };
  s3 -> s1 [45, 64] { R155 += 1, R125 += 1, R101 += 1 };
  s3 -> s1 [91, 65535] { R155 += 1, R125 += 1, R101 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R155 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s1 [0, 65535] { R157 += 1, R127 += 1, R103 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R157 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [0, 65535] { R157 += 1, R127 += 1, R102 += 1, R103 += 1 };
  s1 -> s4 [0, 65535] { R157 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R157 += 1, R127 += 1 };
  s1 -> s1 [0, 65535] { R157 += 1, R127 += 1, R103 += 1, R0 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R157 += 1, R127 += 1, R103 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R157 += 1, R126 += 1, R127 += 1 };
  s2 -> s3 [0, 65535] { R157 += 1, R127 += 1, R102 += 1, R103 += 1 };
  s3 -> s4 [0, 65535] { R157 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R157 += 1, R127 += 1, R103 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R157 += 1, R127 += 1, R102 += 1, R103 += 1 };
  s4 -> s4 [0, 65535] { R157 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R157 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R157 += 1, R127 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 57] { R159 += 1, R129 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R159 += 1, R129 += 1, R104 += 1, R105 += 1 };
  s0 -> s3 [0, 65535] { R159 += 1, R129 += 1, R105 += 1, R8 += 1 };
  s0 -> s4 [0, 65535] { R159 += 1, R128 += 1, R129 += 1 };
  s0 -> s5 [58, 58] { R159 += 1, R129 += 1, R105 += 1 };
  s0 -> s1 [59, 65535] { R159 += 1, R129 += 1, R105 += 1 };
  s1 -> s1 [0, 57] { R159 += 1, R129 += 1, R105 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R159 += 1 };
  s1 -> s1 [0, 65535] { R159 += 1, R129 += 1 };
  s1 -> s5 [58, 58] { R159 += 1, R129 += 1, R105 += 1 };
  s1 -> s1 [59, 65535] { R159 += 1, R129 += 1, R105 += 1 };
  s2 -> s1 [0, 57] { R159 += 1, R129 += 1, R105 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R159 += 1, R129 += 1, R104 += 1, R105 += 1 };
  s2 -> s3 [0, 65535] { R159 += 1, R129 += 1, R105 += 1, R8 += 1 };
  s2 -> s7 [0, 65535] { R159 += 1 };
  s2 -> s5 [58, 58] { R159 += 1, R129 += 1, R105 += 1 };
  s2 -> s1 [59, 65535] { R159 += 1, R129 += 1, R105 += 1 };
  s3 -> s1 [0, 57] { R159 += 1, R129 += 1, R105 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R159 += 1, R129 += 1, R105 += 1, R8 += 1 };
  s3 -> s7 [0, 65535] { R159 += 1 };
  s3 -> s8 [0, 65535] { R159 += 1, R129 += 1 };
  s3 -> s5 [58, 58] { R159 += 1, R129 += 1, R105 += 1 };
  s3 -> s1 [59, 65535] { R159 += 1, R129 += 1, R105 += 1 };
  s4 -> s1 [0, 57] { R159 += 1, R129 += 1, R105 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R159 += 1, R129 += 1, R104 += 1, R105 += 1 };
  s4 -> s3 [0, 65535] { R159 += 1, R129 += 1, R105 += 1, R8 += 1 };
  s4 -> s4 [0, 65535] { R159 += 1, R128 += 1, R129 += 1 };
  s4 -> s5 [58, 58] { R159 += 1, R129 += 1, R105 += 1 };
  s4 -> s1 [59, 65535] { R159 += 1, R129 += 1, R105 += 1 };
  s5 -> s5 [0, 65535] { R159 += 1, R129 += 1, R105 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R159 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R159 += 1 };
  s8 -> s8 [0, 65535] { R159 += 1, R129 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 90] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R161 += 1, R130 += 1, R131 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s3 [0, 65535] { R161 += 1, R131 += 1, R106 += 1, R107 += 1 };
  s0 -> s4 [0, 65535] { R161 += 1, R131 += 1, R107 += 1, R88 += 1, R89 += 1 };
  s0 -> s5 [91, 91] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s0 -> s1 [92, 65535] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s1 -> s9 [0, 65535] { R161 += 1, R131 += 1, R107 += 1 };
  s1 -> s6 [0, 65535] { R161 += 1 };
  s1 -> s7 [0, 65535] { R161 += 1, R131 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s2 -> s1 [0, 90] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R161 += 1, R130 += 1, R131 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R161 += 1, R131 += 1, R106 += 1, R107 += 1 };
  s2 -> s4 [0, 65535] { R161 += 1, R131 += 1, R107 += 1, R88 += 1, R89 += 1 };
  s2 -> s5 [91, 91] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s2 -> s1 [92, 65535] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s3 -> s1 [0, 90] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s3 -> s6 [0, 65535] { R161 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R161 += 1, R131 += 1, R106 += 1, R107 += 1 };
  s3 -> s4 [0, 65535] { R161 += 1, R131 += 1, R107 += 1, R88 += 1, R89 += 1 };
  s3 -> s5 [91, 91] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s3 -> s1 [92, 65535] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s4 -> s1 [0, 90] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s4 -> s6 [0, 65535] { R161 += 1 };
  s4 -> s7 [0, 65535] { R161 += 1, R131 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R161 += 1, R131 += 1, R107 += 1, R88 += 1, R89 += 1 };
  s4 -> s5 [91, 91] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s4 -> s1 [92, 65535] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s5 -> s1 [0, 65535] { R161 += 1, R131 += 1, R107 += 1, R89 += 1 };
  s6 -> s6 [0, 65535] { R161 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R161 += 1 };
  s7 -> s7 [0, 65535] { R161 += 1, R131 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R161 += 1, R131 += 1, R107 += 1 };
  s9 -> s6 [0, 65535] { R161 += 1 };
  s9 -> s7 [0, 65535] { R161 += 1, R131 += 1 };
  s9 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R163 += 1, R133 += 1, R109 += 1, R91 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s2 [0, 65535] { R163 += 1, R133 += 1, R109 += 1, R90 += 1, R91 += 1 };
  s0 -> s3 [0, 65535] { R163 += 1, R132 += 1, R133 += 1 };
  s0 -> s4 [0, 65535] { R163 += 1, R133 += 1, R108 += 1, R109 += 1 };
  s1 -> s1 [0, 65535] { R163 += 1, R133 += 1, R109 += 1, R91 += 1, R6 += 1 };
  s1 -> s8 [0, 65535] { R163 += 1, R133 += 1, R109 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R163 += 1, R133 += 1 };
  s1 -> s6 [0, 65535] { R163 += 1 };
  s2 -> s1 [0, 65535] { R163 += 1, R133 += 1, R109 += 1, R91 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R163 += 1, R133 += 1, R109 += 1, R90 += 1, R91 += 1 };
  s2 -> s7 [0, 65535] { R163 += 1, R133 += 1 };
  s2 -> s6 [0, 65535] { R163 += 1 };
  s3 -> s1 [0, 65535] { R163 += 1, R133 += 1, R109 += 1, R91 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R163 += 1, R133 += 1, R109 += 1, R90 += 1, R91 += 1 };
  s3 -> s3 [0, 65535] { R163 += 1, R132 += 1, R133 += 1 };
  s3 -> s4 [0, 65535] { R163 += 1, R133 += 1, R108 += 1, R109 += 1 };
  s4 -> s1 [0, 65535] { R163 += 1, R133 += 1, R109 += 1, R91 += 1, R6 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R163 += 1, R133 += 1, R109 += 1, R90 += 1, R91 += 1 };
  s4 -> s4 [0, 65535] { R163 += 1, R133 += 1, R108 += 1, R109 += 1 };
  s4 -> s6 [0, 65535] { R163 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R163 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R163 += 1, R133 += 1 };
  s7 -> s6 [0, 65535] { R163 += 1 };
  s8 -> s8 [0, 65535] { R163 += 1, R133 += 1, R109 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R163 += 1, R133 += 1 };
  s8 -> s6 [0, 65535] { R163 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R109 && R4 = R115 && R5 = R163 && R10 = 0 && R11 = R133 && R92 = 0 && R96 = 0 && R97 = 3 && R98 = 0 && R99 = 3 && R100 = 4 && R101 = R109 && R102 = 4 && R103 = R109 && R104 = 4 && R105 = R109 && R106 = 4 && R107 = R109 && R108 = 4 && R110 - R133 = 1 && R111 = R115 && R112 - R133 = 1 && R113 = R115 && R114 - R133 = 1 && R116 = 0 && R117 = R133 && R118 = 0 && R119 = R133 && R120 = 0 && R121 = R133 && R122 = 0 && R123 = R133 && R124 = 0 && R125 = R133 && R126 = 0 && R127 = R133 && R128 = 0 && R129 = R133 && R130 = 0 && R131 = R133 && R132 = 0 && R134 = 10 && R135 = R163 && R136 = 10 && R137 = R163 && R138 = 10 && R139 = R163 && R140 = 10 && R141 = R163 && R142 = 10 && R143 = R163 && R144 = 10 && R145 = R163 && R146 = 10 && R147 = R163 && R148 = 10 && R149 = R163 && R150 = 10 && R151 = R163 && R152 = 10 && R153 = R163 && R154 = 10 && R155 = R163 && R156 = 10 && R157 = R163 && R158 = 10 && R159 = R163 && R160 = 10 && R161 = R163 && R162 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R8 < 1 && 3 < R109 && R133 < R115 && -1 < R133 && 9 < R163 && (R2 != R93 || R93 = 1 || R93 < 0) && (R88 != 0 || ((R6 != 0 || ((R0 != R89 || R89 = 1 || R89 < 0) && (R0 = R89 || R89 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R89 || R89 = 1 || R89 < 0) && (R89 != 1 || -1 < R0) && (R0 = R89 || R89 = 1))))) && (R90 != 0 || ((R6 != 0 || ((R0 != R91 || R91 = 1 || R91 < 0) && (R0 = R91 || R91 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R91 || R91 = 1 || R91 < 0) && (R91 != 1 || -1 < R0) && (R0 = R91 || R91 = 1))))) && (R93 != 1 || -1 < R2) && (R94 != 0 || ((R7 != 0 || ((R2 != R95 || R95 = 1 || R95 < 0) && (R2 = R95 || R95 = 1 || R2 < 1))) && (R7 = 0 || ((R2 != R95 || R95 = 1 || R95 < 0) && (R95 != 1 || -1 < R2) && (R2 = R95 || R95 = 1))))) && (R2 = R93 || R93 = 1) && (R88 = 0 || (R6 = 0 && R0 < 0)) && (R90 = 0 || (R6 = 0 && R0 < 0)) && (R94 = 0 || (R7 = 0 && R2 < 0));
// End of Parikh automata intersection problem
