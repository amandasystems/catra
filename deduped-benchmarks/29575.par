// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R3, R389, R390, R4, R5, R579, R580, R6, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R705, R706, R707, R708, R709, R710, R711, R712, R713, R714, R715, R716, R717, R718, R719, R720, R721, R722, R723, R724, R725, R726, R727, R728, R729, R730, R731, R732, R733, R734, R735, R736, R737, R738, R739, R740, R741, R742, R743, R744, R745, R746, R747, R748, R749, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R760, R761, R762, R763, R764, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R732 += 1 };
  s0 -> s0 [0, 65535] { R731 += 1, R732 += 1 };
  s0 -> s2 [46, 46] { R732 += 1 };
  s0 -> s3 [47, 47] { R732 += 1 };
  s0 -> s1 [48, 65535] { R732 += 1 };
  s1 -> s1 [0, 45] { R732 += 1 };
  s1 -> s2 [46, 46] { R732 += 1 };
  s1 -> s3 [47, 47] { R732 += 1 };
  s1 -> s1 [48, 65535] { R732 += 1 };
  s2 -> s1 [0, 45] { R732 += 1 };
  s2 -> s2 [46, 46] { R732 += 1 };
  s2 -> s3 [47, 47] { R732 += 1 };
  s2 -> s1 [48, 114] { R732 += 1 };
  s2 -> s8 [115, 115] { R732 += 1 };
  s2 -> s1 [116, 65535] { R732 += 1 };
  s3 -> s3 [0, 45] { R732 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R732 += 1 };
  s3 -> s3 [47, 65535] { R732 += 1 };
  s4 -> s3 [0, 45] { R732 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R732 += 1 };
  s4 -> s3 [47, 114] { R732 += 1 };
  s4 -> s5 [115, 115] { R732 += 1 };
  s4 -> s3 [116, 65535] { R732 += 1 };
  s5 -> s3 [0, 45] { R732 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R732 += 1 };
  s5 -> s3 [47, 110] { R732 += 1 };
  s5 -> s6 [111, 111] { R732 += 1 };
  s5 -> s3 [112, 65535] { R732 += 1 };
  s6 -> s3 [0, 45] { R732 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R732 += 1 };
  s6 -> s3 [47, 98] { R732 += 1 };
  s6 -> s7 [99, 99] { R732 += 1 };
  s6 -> s3 [100, 65535] { R732 += 1 };
  s7 -> s3 [0, 45] { R732 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R732 += 1 };
  s7 -> s3 [47, 106] { R732 += 1 };
  s7 -> s3 [108, 65535] { R732 += 1 };
  s8 -> s1 [0, 45] { R732 += 1 };
  s8 -> s2 [46, 46] { R732 += 1 };
  s8 -> s3 [47, 47] { R732 += 1 };
  s8 -> s1 [48, 110] { R732 += 1 };
  s8 -> s9 [111, 111] { R732 += 1 };
  s8 -> s1 [112, 65535] { R732 += 1 };
  s9 -> s1 [0, 45] { R732 += 1 };
  s9 -> s2 [46, 46] { R732 += 1 };
  s9 -> s3 [47, 47] { R732 += 1 };
  s9 -> s1 [48, 98] { R732 += 1 };
  s9 -> s10 [99, 99] { R732 += 1 };
  s9 -> s1 [100, 65535] { R732 += 1 };
  s10 -> s1 [0, 45] { R732 += 1 };
  s10 -> s2 [46, 46] { R732 += 1 };
  s10 -> s3 [47, 47] { R732 += 1 };
  s10 -> s1 [48, 106] { R732 += 1 };
  s10 -> s1 [108, 65535] { R732 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R734 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R733 += 1, R734 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R734 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R736 += 1, R580 += 1 };
  s0 -> s2 [0, 65535] { R736 += 1, R579 += 1, R580 += 1 };
  s0 -> s0 [0, 65535] { R735 += 1, R736 += 1 };
  s0 -> s3 [47, 47] { R736 += 1 };
  s0 -> s1 [48, 65535] { R736 += 1, R580 += 1 };
  s1 -> s1 [0, 46] { R736 += 1, R580 += 1 };
  s1 -> s3 [47, 47] { R736 += 1 };
  s1 -> s1 [48, 65535] { R736 += 1, R580 += 1 };
  s2 -> s1 [0, 46] { R736 += 1, R580 += 1 };
  s2 -> s2 [0, 65535] { R736 += 1, R579 += 1, R580 += 1 };
  s2 -> s3 [47, 47] { R736 += 1 };
  s2 -> s1 [48, 65535] { R736 += 1, R580 += 1 };
  s3 -> s3 [0, 65535] { R736 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R737 += 1, R738 += 1 };
  s0 -> s1 [0, 65535] { R738 += 1, R682 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R738 += 1, R681 += 1, R682 += 1 };
  s1 -> s1 [0, 65535] { R738 += 1, R682 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R738 += 1 };
  s2 -> s1 [0, 65535] { R738 += 1, R682 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R738 += 1, R681 += 1, R682 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R738 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R740 += 1, R706 += 1 };
  s0 -> s0 [0, 65535] { R739 += 1, R740 += 1 };
  s0 -> s2 [0, 65535] { R740 += 1, R705 += 1, R706 += 1 };
  s0 -> s3 [64, 64] { R740 += 1, R706 += 1 };
  s0 -> s1 [65, 65535] { R740 += 1, R706 += 1 };
  s1 -> s1 [0, 63] { R740 += 1, R706 += 1 };
  s1 -> s3 [64, 64] { R740 += 1, R706 += 1 };
  s1 -> s1 [65, 65535] { R740 += 1, R706 += 1 };
  s2 -> s1 [0, 63] { R740 += 1, R706 += 1 };
  s2 -> s2 [0, 65535] { R740 += 1, R705 += 1, R706 += 1 };
  s2 -> s3 [64, 64] { R740 += 1, R706 += 1 };
  s2 -> s1 [65, 65535] { R740 += 1, R706 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R740 += 1 };
  s3 -> s3 [0, 65535] { R740 += 1, R706 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R740 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R741 += 1, R742 += 1 };
  s0 -> s1 [0, 65535] { R742 += 1, R707 += 1, R708 += 1 };
  s0 -> s2 [0, 65535] { R742 += 1, R708 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R742 += 1, R707 += 1, R708 += 1 };
  s1 -> s2 [0, 65535] { R742 += 1, R708 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R742 += 1 };
  s2 -> s2 [0, 65535] { R742 += 1, R708 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R742 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 43] { R744 += 1, R710 += 1, R684 += 1 };
  s0 -> s0 [0, 65535] { R743 += 1, R744 += 1 };
  s0 -> s2 [0, 65535] { R744 += 1, R709 += 1, R710 += 1 };
  s0 -> s3 [0, 65535] { R744 += 1, R710 += 1, R683 += 1, R684 += 1 };
  s0 -> s1 [45, 65535] { R744 += 1, R710 += 1, R684 += 1 };
  s1 -> s1 [0, 43] { R744 += 1, R710 += 1, R684 += 1 };
  s1 -> s1 [0, 65535] { R744 += 1, R710 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R744 += 1 };
  s1 -> s1 [45, 65535] { R744 += 1, R710 += 1, R684 += 1 };
  s2 -> s1 [0, 43] { R744 += 1, R710 += 1, R684 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R744 += 1, R709 += 1, R710 += 1 };
  s2 -> s3 [0, 65535] { R744 += 1, R710 += 1, R683 += 1, R684 += 1 };
  s2 -> s1 [45, 65535] { R744 += 1, R710 += 1, R684 += 1 };
  s3 -> s1 [0, 43] { R744 += 1, R710 += 1, R684 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R744 += 1, R710 += 1, R683 += 1, R684 += 1 };
  s3 -> s5 [0, 65535] { R744 += 1 };
  s3 -> s1 [45, 65535] { R744 += 1, R710 += 1, R684 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R744 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R746 += 1, R712 += 1, R685 += 1, R686 += 1 };
  s0 -> s2 [0, 65535] { R746 += 1, R711 += 1, R712 += 1 };
  s0 -> s3 [0, 65535] { R746 += 1, R712 += 1, R686 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R745 += 1, R746 += 1 };
  s1 -> s4 [0, 65535] { R746 += 1 };
  s1 -> s1 [0, 65535] { R746 += 1, R712 += 1, R685 += 1, R686 += 1 };
  s1 -> s3 [0, 65535] { R746 += 1, R712 += 1, R686 += 1, R0 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R746 += 1, R712 += 1, R685 += 1, R686 += 1 };
  s2 -> s2 [0, 65535] { R746 += 1, R711 += 1, R712 += 1 };
  s2 -> s3 [0, 65535] { R746 += 1, R712 += 1, R686 += 1, R0 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R746 += 1 };
  s3 -> s5 [0, 65535] { R746 += 1, R712 += 1 };
  s3 -> s3 [0, 65535] { R746 += 1, R712 += 1, R686 += 1, R0 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R746 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R746 += 1 };
  s5 -> s5 [0, 65535] { R746 += 1, R712 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R748 += 1, R714 += 1, R688 += 1, R9 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R748 += 1, R714 += 1, R687 += 1, R688 += 1 };
  s0 -> s4 [0, 65535] { R748 += 1, R713 += 1, R714 += 1 };
  s0 -> s0 [0, 65535] { R747 += 1, R748 += 1 };
  s0 -> s5 [58, 58] { R748 += 1, R714 += 1, R688 += 1 };
  s0 -> s1 [59, 65535] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s1 -> s1 [0, 57] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s1 -> s5 [58, 58] { R748 += 1, R714 += 1, R688 += 1 };
  s1 -> s1 [59, 65535] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s2 -> s1 [0, 57] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R748 += 1, R714 += 1, R688 += 1, R9 += 1, R10 += 1 };
  s2 -> s5 [58, 58] { R748 += 1, R714 += 1, R688 += 1 };
  s2 -> s1 [59, 65535] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s3 -> s1 [0, 57] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s3 -> s2 [0, 65535] { R748 += 1, R714 += 1, R688 += 1, R9 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R748 += 1, R714 += 1, R687 += 1, R688 += 1 };
  s3 -> s5 [58, 58] { R748 += 1, R714 += 1, R688 += 1 };
  s3 -> s1 [59, 65535] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s4 -> s1 [0, 57] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s4 -> s2 [0, 65535] { R748 += 1, R714 += 1, R688 += 1, R9 += 1, R10 += 1 };
  s4 -> s3 [0, 65535] { R748 += 1, R714 += 1, R687 += 1, R688 += 1 };
  s4 -> s4 [0, 65535] { R748 += 1, R713 += 1, R714 += 1 };
  s4 -> s5 [58, 58] { R748 += 1, R714 += 1, R688 += 1 };
  s4 -> s1 [59, 65535] { R748 += 1, R714 += 1, R688 += 1, R10 += 1 };
  s5 -> s6 [0, 65535] { R748 += 1, R714 += 1 };
  s5 -> s5 [0, 65535] { R748 += 1, R714 += 1, R688 += 1 };
  s5 -> s7 [0, 65535] { R748 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R748 += 1, R714 += 1 };
  s6 -> s7 [0, 65535] { R748 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R748 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s0 -> s0 [0, 65535] { R749 += 1, R750 += 1 };
  s0 -> s2 [0, 65535] { R750 += 1, R716 += 1, R690 += 1, R673 += 1, R674 += 1 };
  s0 -> s3 [0, 65535] { R750 += 1, R716 += 1, R689 += 1, R690 += 1 };
  s0 -> s4 [0, 65535] { R750 += 1, R715 += 1, R716 += 1 };
  s0 -> s5 [91, 91] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s0 -> s1 [92, 65535] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s1 -> s1 [0, 65535] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R750 += 1, R716 += 1 };
  s1 -> s7 [0, 65535] { R750 += 1 };
  s1 -> s9 [0, 65535] { R750 += 1, R716 += 1, R690 += 1 };
  s2 -> s1 [0, 90] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R750 += 1, R716 += 1, R690 += 1, R673 += 1, R674 += 1 };
  s2 -> s8 [0, 65535] { R750 += 1, R716 += 1 };
  s2 -> s7 [0, 65535] { R750 += 1 };
  s2 -> s5 [91, 91] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s2 -> s1 [92, 65535] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s3 -> s1 [0, 90] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R750 += 1, R716 += 1, R690 += 1, R673 += 1, R674 += 1 };
  s3 -> s3 [0, 65535] { R750 += 1, R716 += 1, R689 += 1, R690 += 1 };
  s3 -> s7 [0, 65535] { R750 += 1 };
  s3 -> s5 [91, 91] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s3 -> s1 [92, 65535] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s4 -> s1 [0, 90] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R750 += 1, R716 += 1, R690 += 1, R673 += 1, R674 += 1 };
  s4 -> s3 [0, 65535] { R750 += 1, R716 += 1, R689 += 1, R690 += 1 };
  s4 -> s4 [0, 65535] { R750 += 1, R715 += 1, R716 += 1 };
  s4 -> s5 [91, 91] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s4 -> s1 [92, 65535] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s5 -> s1 [0, 65535] { R750 += 1, R716 += 1, R690 += 1, R674 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R750 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R750 += 1, R716 += 1 };
  s8 -> s7 [0, 65535] { R750 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s8 [0, 65535] { R750 += 1, R716 += 1 };
  s9 -> s7 [0, 65535] { R750 += 1 };
  s9 -> s9 [0, 65535] { R750 += 1, R716 += 1, R690 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R752 += 1, R718 += 1, R692 += 1, R675 += 1, R676 += 1 };
  s0 -> s2 [0, 65535] { R752 += 1, R717 += 1, R718 += 1 };
  s0 -> s3 [0, 65535] { R752 += 1, R718 += 1, R692 += 1, R676 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R751 += 1, R752 += 1 };
  s0 -> s4 [0, 65535] { R752 += 1, R718 += 1, R691 += 1, R692 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R752 += 1, R718 += 1, R692 += 1, R675 += 1, R676 += 1 };
  s1 -> s3 [0, 65535] { R752 += 1, R718 += 1, R692 += 1, R676 += 1, R7 += 1 };
  s1 -> s8 [0, 65535] { R752 += 1, R718 += 1 };
  s1 -> s6 [0, 65535] { R752 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R752 += 1, R718 += 1, R692 += 1, R675 += 1, R676 += 1 };
  s2 -> s2 [0, 65535] { R752 += 1, R717 += 1, R718 += 1 };
  s2 -> s3 [0, 65535] { R752 += 1, R718 += 1, R692 += 1, R676 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R752 += 1, R718 += 1, R691 += 1, R692 += 1 };
  s3 -> s7 [0, 65535] { R752 += 1, R718 += 1, R692 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R752 += 1, R718 += 1, R692 += 1, R676 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R752 += 1, R718 += 1 };
  s3 -> s6 [0, 65535] { R752 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R752 += 1, R718 += 1, R692 += 1, R675 += 1, R676 += 1 };
  s4 -> s3 [0, 65535] { R752 += 1, R718 += 1, R692 += 1, R676 += 1, R7 += 1 };
  s4 -> s6 [0, 65535] { R752 += 1 };
  s4 -> s4 [0, 65535] { R752 += 1, R718 += 1, R691 += 1, R692 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R752 += 1 };
  s7 -> s7 [0, 65535] { R752 += 1, R718 += 1, R692 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s8 [0, 65535] { R752 += 1, R718 += 1 };
  s7 -> s6 [0, 65535] { R752 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R752 += 1, R718 += 1 };
  s8 -> s6 [0, 65535] { R752 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 57] { R754 += 1, R720 += 1, R694 += 1 };
  s0 -> s2 [0, 65535] { R754 += 1, R720 += 1, R693 += 1, R694 += 1 };
  s0 -> s3 [0, 65535] { R754 += 1, R719 += 1, R720 += 1 };
  s0 -> s0 [0, 65535] { R753 += 1, R754 += 1 };
  s0 -> s4 [58, 58] { R754 += 1, R720 += 1, R694 += 1 };
  s0 -> s1 [59, 63] { R754 += 1, R720 += 1, R694 += 1 };
  s0 -> s1 [65, 65535] { R754 += 1, R720 += 1, R694 += 1 };
  s1 -> s1 [0, 57] { R754 += 1, R720 += 1, R694 += 1 };
  s1 -> s4 [58, 58] { R754 += 1, R720 += 1, R694 += 1 };
  s1 -> s1 [59, 63] { R754 += 1, R720 += 1, R694 += 1 };
  s1 -> s1 [65, 65535] { R754 += 1, R720 += 1, R694 += 1 };
  s2 -> s1 [0, 57] { R754 += 1, R720 += 1, R694 += 1 };
  s2 -> s2 [0, 65535] { R754 += 1, R720 += 1, R693 += 1, R694 += 1 };
  s2 -> s4 [58, 58] { R754 += 1, R720 += 1, R694 += 1 };
  s2 -> s1 [59, 63] { R754 += 1, R720 += 1, R694 += 1 };
  s2 -> s1 [65, 65535] { R754 += 1, R720 += 1, R694 += 1 };
  s3 -> s1 [0, 57] { R754 += 1, R720 += 1, R694 += 1 };
  s3 -> s2 [0, 65535] { R754 += 1, R720 += 1, R693 += 1, R694 += 1 };
  s3 -> s3 [0, 65535] { R754 += 1, R719 += 1, R720 += 1 };
  s3 -> s4 [58, 58] { R754 += 1, R720 += 1, R694 += 1 };
  s3 -> s1 [59, 63] { R754 += 1, R720 += 1, R694 += 1 };
  s3 -> s1 [65, 65535] { R754 += 1, R720 += 1, R694 += 1 };
  s4 -> s4 [0, 63] { R754 += 1, R720 += 1, R694 += 1 };
  s4 -> s5 [0, 65535] { R754 += 1 };
  s4 -> s4 [0, 65535] { R754 += 1, R720 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [65, 65535] { R754 += 1, R720 += 1, R694 += 1 };
  s5 -> s5 [0, 65535] { R754 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R756 += 1, R722 += 1, R695 += 1, R696 += 1 };
  s0 -> s0 [0, 65535] { R755 += 1, R756 += 1 };
  s0 -> s2 [0, 65535] { R756 += 1, R722 += 1, R696 += 1, R3 += 1 };
  s0 -> s3 [0, 65535] { R756 += 1, R721 += 1, R722 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R756 += 1, R722 += 1, R695 += 1, R696 += 1 };
  s1 -> s5 [0, 65535] { R756 += 1 };
  s1 -> s2 [0, 65535] { R756 += 1, R722 += 1, R696 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R756 += 1 };
  s2 -> s2 [0, 65535] { R756 += 1, R722 += 1, R696 += 1, R3 += 1 };
  s2 -> s6 [0, 65535] { R756 += 1, R722 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R756 += 1, R722 += 1, R695 += 1, R696 += 1 };
  s3 -> s2 [0, 65535] { R756 += 1, R722 += 1, R696 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R756 += 1, R721 += 1, R722 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R756 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R756 += 1 };
  s6 -> s6 [0, 65535] { R756 += 1, R722 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 57] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s0 -> s2 [0, 65535] { R758 += 1, R723 += 1, R724 += 1 };
  s0 -> s3 [0, 65535] { R758 += 1, R724 += 1, R697 += 1, R698 += 1 };
  s0 -> s4 [0, 65535] { R758 += 1, R724 += 1, R698 += 1, R389 += 1, R390 += 1 };
  s0 -> s0 [0, 65535] { R757 += 1, R758 += 1 };
  s0 -> s5 [58, 58] { R758 += 1, R724 += 1, R698 += 1 };
  s0 -> s1 [59, 65535] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s1 -> s1 [0, 57] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s1 -> s5 [58, 58] { R758 += 1, R724 += 1, R698 += 1 };
  s1 -> s1 [59, 65535] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s2 -> s1 [0, 57] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s2 -> s2 [0, 65535] { R758 += 1, R723 += 1, R724 += 1 };
  s2 -> s3 [0, 65535] { R758 += 1, R724 += 1, R697 += 1, R698 += 1 };
  s2 -> s4 [0, 65535] { R758 += 1, R724 += 1, R698 += 1, R389 += 1, R390 += 1 };
  s2 -> s5 [58, 58] { R758 += 1, R724 += 1, R698 += 1 };
  s2 -> s1 [59, 65535] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s3 -> s1 [0, 57] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s3 -> s3 [0, 65535] { R758 += 1, R724 += 1, R697 += 1, R698 += 1 };
  s3 -> s4 [0, 65535] { R758 += 1, R724 += 1, R698 += 1, R389 += 1, R390 += 1 };
  s3 -> s5 [58, 58] { R758 += 1, R724 += 1, R698 += 1 };
  s3 -> s1 [59, 65535] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s4 -> s1 [0, 57] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s4 -> s4 [0, 65535] { R758 += 1, R724 += 1, R698 += 1, R389 += 1, R390 += 1 };
  s4 -> s5 [58, 58] { R758 += 1, R724 += 1, R698 += 1 };
  s4 -> s1 [59, 65535] { R758 += 1, R724 += 1, R698 += 1, R390 += 1 };
  s5 -> s5 [0, 65535] { R758 += 1, R724 += 1, R698 += 1 };
  s5 -> s6 [0, 65535] { R758 += 1, R724 += 1 };
  s5 -> s7 [0, 65535] { R758 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R758 += 1, R724 += 1 };
  s6 -> s7 [0, 65535] { R758 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R758 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R760 += 1, R726 += 1, R700 += 1 };
  s0 -> s0 [0, 65535] { R759 += 1, R760 += 1 };
  s0 -> s2 [0, 65535] { R760 += 1, R726 += 1, R699 += 1, R700 += 1 };
  s0 -> s3 [0, 65535] { R760 += 1, R725 += 1, R726 += 1 };
  s1 -> s5 [0, 65535] { R760 += 1 };
  s1 -> s1 [0, 65535] { R760 += 1, R726 += 1, R700 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R760 += 1, R726 += 1 };
  s2 -> s5 [0, 65535] { R760 += 1 };
  s2 -> s1 [0, 65535] { R760 += 1, R726 += 1, R700 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R760 += 1, R726 += 1, R699 += 1, R700 += 1 };
  s3 -> s1 [0, 65535] { R760 += 1, R726 += 1, R700 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R760 += 1, R726 += 1, R699 += 1, R700 += 1 };
  s3 -> s3 [0, 65535] { R760 += 1, R725 += 1, R726 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R760 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R760 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R760 += 1, R726 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 36] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s0 -> s2 [0, 65535] { R762 += 1, R728 += 1, R701 += 1, R702 += 1 };
  s0 -> s0 [0, 65535] { R761 += 1, R762 += 1 };
  s0 -> s3 [0, 65535] { R762 += 1, R728 += 1, R702 += 1, R677 += 1, R678 += 1 };
  s0 -> s4 [0, 65535] { R762 += 1, R727 += 1, R728 += 1 };
  s0 -> s1 [38, 42] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s0 -> s1 [44, 65535] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s1 -> s1 [0, 36] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s1 -> s6 [0, 65535] { R762 += 1, R728 += 1 };
  s1 -> s1 [0, 65535] { R762 += 1, R728 += 1, R702 += 1 };
  s1 -> s7 [0, 65535] { R762 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [38, 42] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s1 -> s1 [44, 65535] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s2 -> s1 [0, 36] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s2 -> s2 [0, 65535] { R762 += 1, R728 += 1, R701 += 1, R702 += 1 };
  s2 -> s3 [0, 65535] { R762 += 1, R728 += 1, R702 += 1, R677 += 1, R678 += 1 };
  s2 -> s7 [0, 65535] { R762 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [38, 42] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s2 -> s1 [44, 65535] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s3 -> s1 [0, 36] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s3 -> s6 [0, 65535] { R762 += 1, R728 += 1 };
  s3 -> s3 [0, 65535] { R762 += 1, R728 += 1, R702 += 1, R677 += 1, R678 += 1 };
  s3 -> s7 [0, 65535] { R762 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [38, 42] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s3 -> s1 [44, 65535] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s4 -> s1 [0, 36] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s4 -> s2 [0, 65535] { R762 += 1, R728 += 1, R701 += 1, R702 += 1 };
  s4 -> s3 [0, 65535] { R762 += 1, R728 += 1, R702 += 1, R677 += 1, R678 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R762 += 1, R727 += 1, R728 += 1 };
  s4 -> s1 [38, 42] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s4 -> s1 [44, 65535] { R762 += 1, R728 += 1, R702 += 1, R678 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R762 += 1, R728 += 1 };
  s6 -> s7 [0, 65535] { R762 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R762 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R764 += 1, R730 += 1, R704 += 1, R679 += 1, R680 += 1 };
  s0 -> s2 [0, 65535] { R764 += 1, R730 += 1, R703 += 1, R704 += 1 };
  s0 -> s0 [0, 65535] { R763 += 1, R764 += 1 };
  s0 -> s3 [0, 65535] { R764 += 1, R730 += 1, R704 += 1, R680 += 1, R1 += 1 };
  s0 -> s4 [0, 65535] { R764 += 1, R729 += 1, R730 += 1 };
  s1 -> s7 [0, 65535] { R764 += 1 };
  s1 -> s8 [0, 65535] { R764 += 1, R730 += 1 };
  s1 -> s1 [0, 65535] { R764 += 1, R730 += 1, R704 += 1, R679 += 1, R680 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R764 += 1, R730 += 1, R704 += 1, R680 += 1, R1 += 1 };
  s2 -> s7 [0, 65535] { R764 += 1 };
  s2 -> s1 [0, 65535] { R764 += 1, R730 += 1, R704 += 1, R679 += 1, R680 += 1 };
  s2 -> s2 [0, 65535] { R764 += 1, R730 += 1, R703 += 1, R704 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R764 += 1, R730 += 1, R704 += 1, R680 += 1, R1 += 1 };
  s3 -> s6 [0, 65535] { R764 += 1, R730 += 1, R704 += 1 };
  s3 -> s7 [0, 65535] { R764 += 1 };
  s3 -> s8 [0, 65535] { R764 += 1, R730 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R764 += 1, R730 += 1, R704 += 1, R680 += 1, R1 += 1 };
  s4 -> s1 [0, 65535] { R764 += 1, R730 += 1, R704 += 1, R679 += 1, R680 += 1 };
  s4 -> s2 [0, 65535] { R764 += 1, R730 += 1, R703 += 1, R704 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R764 += 1, R730 += 1, R704 += 1, R680 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R764 += 1, R729 += 1, R730 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R764 += 1, R730 += 1, R704 += 1 };
  s6 -> s7 [0, 65535] { R764 += 1 };
  s6 -> s8 [0, 65535] { R764 += 1, R730 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R764 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R764 += 1 };
  s8 -> s8 [0, 65535] { R764 += 1, R730 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 - R680 = 1 && R4 = R692 && R5 = R682 && R6 = R764 && R9 = 0 && R389 = 0 && R390 = R680 && R579 = 0 && R580 = R730 && R677 = 0 && R678 = R680 && R679 = 0 && R681 - R730 = 1 && R683 = 9 && R684 = R692 && R685 = 9 && R686 = R692 && R687 = 9 && R688 = R692 && R689 = 9 && R690 = R692 && R691 = 9 && R693 = 0 && R694 = 8 && R695 = 0 && R696 = 8 && R697 = 0 && R698 = 8 && R699 = 0 && R700 = 8 && R701 = 0 && R702 = 8 && R703 = 0 && R704 = 8 && R705 = 0 && R706 = R730 && R707 = 0 && R708 = R730 && R709 = 0 && R710 = R730 && R711 = 0 && R712 = R730 && R713 = 0 && R714 = R730 && R715 = 0 && R716 = R730 && R717 = 0 && R718 = R730 && R719 = 0 && R720 = R730 && R721 = 0 && R722 = R730 && R723 = 0 && R724 = R730 && R725 = 0 && R726 = R730 && R727 = 0 && R728 = R730 && R729 = 0 && R731 = 10 && R732 = R764 && R733 = 10 && R734 = R764 && R735 = 10 && R736 = R764 && R737 = 10 && R738 = R764 && R739 = 10 && R740 = R764 && R741 = 10 && R742 = R764 && R743 = 10 && R744 = R764 && R745 = 10 && R746 = R764 && R747 = 10 && R748 = R764 && R749 = 10 && R750 = R764 && R751 = 10 && R752 = R764 && R753 = 10 && R754 = R764 && R755 = 10 && R756 = R764 && R757 = 10 && R758 = R764 && R759 = 10 && R760 = R764 && R761 = 10 && R762 = R764 && R763 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R10 != -1 && -1 < R680 && R730 < R682 && 8 < R692 && -1 < R730 && 9 < R764 && (R673 != 0 || ((R7 != 0 || ((R0 != R674 || R674 = 1 || R674 < 0) && (R0 = R674 || R674 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R674 || R674 = 1 || R674 < 0) && (R674 != 1 || -1 < R0) && (R0 = R674 || R674 = 1))))) && (R675 != 0 || ((R7 != 0 || ((R0 != R676 || R676 = 1 || R676 < 0) && (R0 = R676 || R676 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R676 || R676 = 1 || R676 < 0) && (R676 != 1 || -1 < R0) && (R0 = R676 || R676 = 1))))) && (R673 = 0 || (R7 = 0 && R0 < 0)) && (R675 = 0 || (R7 = 0 && R0 < 0));
// End of Parikh automata intersection problem
