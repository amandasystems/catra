// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R118, R119, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R3, R4, R6, R7;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R205 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s0 -> s2 [46, 46] { R205 += 1 };
  s0 -> s3 [47, 47] { R205 += 1 };
  s0 -> s1 [48, 65535] { R205 += 1 };
  s1 -> s1 [0, 45] { R205 += 1 };
  s1 -> s2 [46, 46] { R205 += 1 };
  s1 -> s3 [47, 47] { R205 += 1 };
  s1 -> s1 [48, 65535] { R205 += 1 };
  s2 -> s1 [0, 45] { R205 += 1 };
  s2 -> s2 [46, 46] { R205 += 1 };
  s2 -> s3 [47, 47] { R205 += 1 };
  s2 -> s1 [48, 114] { R205 += 1 };
  s2 -> s8 [115, 115] { R205 += 1 };
  s2 -> s1 [116, 65535] { R205 += 1 };
  s3 -> s3 [0, 45] { R205 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R205 += 1 };
  s3 -> s3 [47, 65535] { R205 += 1 };
  s4 -> s3 [0, 45] { R205 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R205 += 1 };
  s4 -> s3 [47, 114] { R205 += 1 };
  s4 -> s5 [115, 115] { R205 += 1 };
  s4 -> s3 [116, 65535] { R205 += 1 };
  s5 -> s3 [0, 45] { R205 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R205 += 1 };
  s5 -> s3 [47, 110] { R205 += 1 };
  s5 -> s6 [111, 111] { R205 += 1 };
  s5 -> s3 [112, 65535] { R205 += 1 };
  s6 -> s3 [0, 45] { R205 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R205 += 1 };
  s6 -> s3 [47, 98] { R205 += 1 };
  s6 -> s7 [99, 99] { R205 += 1 };
  s6 -> s3 [100, 65535] { R205 += 1 };
  s7 -> s3 [0, 45] { R205 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R205 += 1 };
  s7 -> s3 [47, 106] { R205 += 1 };
  s7 -> s3 [108, 65535] { R205 += 1 };
  s8 -> s1 [0, 45] { R205 += 1 };
  s8 -> s2 [46, 46] { R205 += 1 };
  s8 -> s3 [47, 47] { R205 += 1 };
  s8 -> s1 [48, 110] { R205 += 1 };
  s8 -> s9 [111, 111] { R205 += 1 };
  s8 -> s1 [112, 65535] { R205 += 1 };
  s9 -> s1 [0, 45] { R205 += 1 };
  s9 -> s2 [46, 46] { R205 += 1 };
  s9 -> s3 [47, 47] { R205 += 1 };
  s9 -> s1 [48, 98] { R205 += 1 };
  s9 -> s10 [99, 99] { R205 += 1 };
  s9 -> s1 [100, 65535] { R205 += 1 };
  s10 -> s1 [0, 45] { R205 += 1 };
  s10 -> s2 [46, 46] { R205 += 1 };
  s10 -> s3 [47, 47] { R205 += 1 };
  s10 -> s1 [48, 106] { R205 += 1 };
  s10 -> s1 [108, 65535] { R205 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R206 += 1, R207 += 1 };
  s0 -> s1 [0, 65535] { R207 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R207 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R209 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R209 += 1, R118 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R208 += 1, R209 += 1 };
  s0 -> s3 [47, 47] { R209 += 1 };
  s0 -> s1 [48, 65535] { R209 += 1, R119 += 1 };
  s1 -> s1 [0, 46] { R209 += 1, R119 += 1 };
  s1 -> s3 [47, 47] { R209 += 1 };
  s1 -> s1 [48, 65535] { R209 += 1, R119 += 1 };
  s2 -> s1 [0, 46] { R209 += 1, R119 += 1 };
  s2 -> s2 [0, 65535] { R209 += 1, R118 += 1, R119 += 1 };
  s2 -> s3 [47, 47] { R209 += 1 };
  s2 -> s1 [48, 65535] { R209 += 1, R119 += 1 };
  s3 -> s3 [0, 65535] { R209 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R211 += 1, R179 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R210 += 1, R211 += 1 };
  s0 -> s2 [0, 65535] { R211 += 1, R178 += 1, R179 += 1 };
  s1 -> s1 [0, 65535] { R211 += 1, R179 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R211 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R211 += 1, R179 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R211 += 1, R178 += 1, R179 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R211 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R213 += 1, R191 += 1 };
  s0 -> s2 [0, 65535] { R213 += 1, R190 += 1, R191 += 1 };
  s0 -> s0 [0, 65535] { R212 += 1, R213 += 1 };
  s0 -> s3 [64, 64] { R213 += 1, R191 += 1 };
  s0 -> s1 [65, 65535] { R213 += 1, R191 += 1 };
  s1 -> s1 [0, 63] { R213 += 1, R191 += 1 };
  s1 -> s3 [64, 64] { R213 += 1, R191 += 1 };
  s1 -> s1 [65, 65535] { R213 += 1, R191 += 1 };
  s2 -> s1 [0, 63] { R213 += 1, R191 += 1 };
  s2 -> s2 [0, 65535] { R213 += 1, R190 += 1, R191 += 1 };
  s2 -> s3 [64, 64] { R213 += 1, R191 += 1 };
  s2 -> s1 [65, 65535] { R213 += 1, R191 += 1 };
  s3 -> s3 [0, 65535] { R213 += 1, R191 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R213 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R213 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R215 += 1, R193 += 1, R173 += 1 };
  s0 -> s0 [0, 65535] { R214 += 1, R215 += 1 };
  s0 -> s2 [0, 65535] { R215 += 1, R192 += 1, R193 += 1 };
  s1 -> s1 [0, 65535] { R215 += 1, R193 += 1, R173 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R215 += 1 };
  s2 -> s1 [0, 65535] { R215 += 1, R193 += 1, R173 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R215 += 1, R192 += 1, R193 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R215 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R217 += 1, R195 += 1, R181 += 1 };
  s0 -> s2 [0, 65535] { R217 += 1, R195 += 1, R180 += 1, R181 += 1 };
  s0 -> s3 [0, 65535] { R217 += 1, R194 += 1, R195 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s4 [58, 58] { R217 += 1, R195 += 1, R181 += 1 };
  s0 -> s1 [59, 63] { R217 += 1, R195 += 1, R181 += 1 };
  s0 -> s1 [65, 65535] { R217 += 1, R195 += 1, R181 += 1 };
  s1 -> s1 [0, 57] { R217 += 1, R195 += 1, R181 += 1 };
  s1 -> s4 [58, 58] { R217 += 1, R195 += 1, R181 += 1 };
  s1 -> s1 [59, 63] { R217 += 1, R195 += 1, R181 += 1 };
  s1 -> s1 [65, 65535] { R217 += 1, R195 += 1, R181 += 1 };
  s2 -> s1 [0, 57] { R217 += 1, R195 += 1, R181 += 1 };
  s2 -> s2 [0, 65535] { R217 += 1, R195 += 1, R180 += 1, R181 += 1 };
  s2 -> s4 [58, 58] { R217 += 1, R195 += 1, R181 += 1 };
  s2 -> s1 [59, 63] { R217 += 1, R195 += 1, R181 += 1 };
  s2 -> s1 [65, 65535] { R217 += 1, R195 += 1, R181 += 1 };
  s3 -> s1 [0, 57] { R217 += 1, R195 += 1, R181 += 1 };
  s3 -> s2 [0, 65535] { R217 += 1, R195 += 1, R180 += 1, R181 += 1 };
  s3 -> s3 [0, 65535] { R217 += 1, R194 += 1, R195 += 1 };
  s3 -> s4 [58, 58] { R217 += 1, R195 += 1, R181 += 1 };
  s3 -> s1 [59, 63] { R217 += 1, R195 += 1, R181 += 1 };
  s3 -> s1 [65, 65535] { R217 += 1, R195 += 1, R181 += 1 };
  s4 -> s4 [0, 63] { R217 += 1, R195 += 1, R181 += 1 };
  s4 -> s5 [0, 65535] { R217 += 1 };
  s4 -> s4 [0, 65535] { R217 += 1, R195 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [65, 65535] { R217 += 1, R195 += 1, R181 += 1 };
  s5 -> s5 [0, 65535] { R217 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R219 += 1, R197 += 1, R183 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R219 += 1, R197 += 1, R182 += 1, R183 += 1 };
  s0 -> s3 [0, 65535] { R219 += 1, R196 += 1, R197 += 1 };
  s0 -> s0 [0, 65535] { R218 += 1, R219 += 1 };
  s1 -> s1 [0, 65535] { R219 += 1, R197 += 1, R183 += 1, R2 += 1 };
  s1 -> s6 [0, 65535] { R219 += 1, R197 += 1 };
  s1 -> s5 [0, 65535] { R219 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R219 += 1, R197 += 1, R183 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R219 += 1, R197 += 1, R182 += 1, R183 += 1 };
  s2 -> s5 [0, 65535] { R219 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R219 += 1, R197 += 1, R183 += 1, R2 += 1 };
  s3 -> s2 [0, 65535] { R219 += 1, R197 += 1, R182 += 1, R183 += 1 };
  s3 -> s3 [0, 65535] { R219 += 1, R196 += 1, R197 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R219 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R219 += 1, R197 += 1 };
  s6 -> s5 [0, 65535] { R219 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R221 += 1, R198 += 1, R199 += 1 };
  s0 -> s3 [0, 65535] { R221 += 1, R199 += 1, R184 += 1, R185 += 1 };
  s0 -> s0 [0, 65535] { R220 += 1, R221 += 1 };
  s0 -> s4 [0, 65535] { R221 += 1, R199 += 1, R185 += 1, R6 += 1, R7 += 1 };
  s0 -> s5 [58, 58] { R221 += 1, R199 += 1, R185 += 1 };
  s0 -> s1 [59, 65535] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s1 -> s1 [0, 57] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s1 -> s5 [58, 58] { R221 += 1, R199 += 1, R185 += 1 };
  s1 -> s1 [59, 65535] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s2 -> s1 [0, 57] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R221 += 1, R198 += 1, R199 += 1 };
  s2 -> s3 [0, 65535] { R221 += 1, R199 += 1, R184 += 1, R185 += 1 };
  s2 -> s4 [0, 65535] { R221 += 1, R199 += 1, R185 += 1, R6 += 1, R7 += 1 };
  s2 -> s5 [58, 58] { R221 += 1, R199 += 1, R185 += 1 };
  s2 -> s1 [59, 65535] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s3 -> s1 [0, 57] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R221 += 1, R199 += 1, R184 += 1, R185 += 1 };
  s3 -> s4 [0, 65535] { R221 += 1, R199 += 1, R185 += 1, R6 += 1, R7 += 1 };
  s3 -> s5 [58, 58] { R221 += 1, R199 += 1, R185 += 1 };
  s3 -> s1 [59, 65535] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s4 -> s1 [0, 57] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R221 += 1, R199 += 1, R185 += 1, R6 += 1, R7 += 1 };
  s4 -> s5 [58, 58] { R221 += 1, R199 += 1, R185 += 1 };
  s4 -> s1 [59, 65535] { R221 += 1, R199 += 1, R185 += 1, R7 += 1 };
  s5 -> s6 [0, 65535] { R221 += 1, R199 += 1 };
  s5 -> s7 [0, 65535] { R221 += 1 };
  s5 -> s5 [0, 65535] { R221 += 1, R199 += 1, R185 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R221 += 1, R199 += 1 };
  s6 -> s7 [0, 65535] { R221 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R221 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s0 -> s2 [0, 65535] { R223 += 1, R200 += 1, R201 += 1 };
  s0 -> s3 [0, 65535] { R223 += 1, R201 += 1, R187 += 1, R174 += 1, R175 += 1 };
  s0 -> s4 [0, 65535] { R223 += 1, R201 += 1, R186 += 1, R187 += 1 };
  s0 -> s0 [0, 65535] { R222 += 1, R223 += 1 };
  s0 -> s1 [59, 65535] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s1 -> s1 [0, 57] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s1 -> s7 [0, 65535] { R223 += 1, R201 += 1 };
  s1 -> s5 [0, 65535] { R223 += 1 };
  s1 -> s1 [0, 65535] { R223 += 1, R201 += 1, R187 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [59, 65535] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s2 -> s1 [0, 57] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s2 -> s2 [0, 65535] { R223 += 1, R200 += 1, R201 += 1 };
  s2 -> s3 [0, 65535] { R223 += 1, R201 += 1, R187 += 1, R174 += 1, R175 += 1 };
  s2 -> s4 [0, 65535] { R223 += 1, R201 += 1, R186 += 1, R187 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [59, 65535] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s3 -> s1 [0, 57] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s3 -> s7 [0, 65535] { R223 += 1, R201 += 1 };
  s3 -> s3 [0, 65535] { R223 += 1, R201 += 1, R187 += 1, R174 += 1, R175 += 1 };
  s3 -> s5 [0, 65535] { R223 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [59, 65535] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s4 -> s1 [0, 57] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s4 -> s3 [0, 65535] { R223 += 1, R201 += 1, R187 += 1, R174 += 1, R175 += 1 };
  s4 -> s4 [0, 65535] { R223 += 1, R201 += 1, R186 += 1, R187 += 1 };
  s4 -> s5 [0, 65535] { R223 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [59, 65535] { R223 += 1, R201 += 1, R187 += 1, R175 += 1 };
  s5 -> s5 [0, 65535] { R223 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R223 += 1, R201 += 1 };
  s7 -> s5 [0, 65535] { R223 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R225 += 1, R202 += 1, R203 += 1 };
  s0 -> s2 [0, 65535] { R225 += 1, R203 += 1, R189 += 1, R176 += 1, R177 += 1 };
  s0 -> s3 [0, 65535] { R225 += 1, R203 += 1, R188 += 1, R189 += 1 };
  s0 -> s4 [0, 65535] { R225 += 1, R203 += 1, R189 += 1, R177 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R224 += 1, R225 += 1 };
  s1 -> s1 [0, 65535] { R225 += 1, R202 += 1, R203 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R225 += 1, R203 += 1, R189 += 1, R176 += 1, R177 += 1 };
  s1 -> s3 [0, 65535] { R225 += 1, R203 += 1, R188 += 1, R189 += 1 };
  s1 -> s4 [0, 65535] { R225 += 1, R203 += 1, R189 += 1, R177 += 1, R0 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R225 += 1 };
  s2 -> s8 [0, 65535] { R225 += 1, R203 += 1 };
  s2 -> s2 [0, 65535] { R225 += 1, R203 += 1, R189 += 1, R176 += 1, R177 += 1 };
  s2 -> s4 [0, 65535] { R225 += 1, R203 += 1, R189 += 1, R177 += 1, R0 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R225 += 1 };
  s3 -> s2 [0, 65535] { R225 += 1, R203 += 1, R189 += 1, R176 += 1, R177 += 1 };
  s3 -> s3 [0, 65535] { R225 += 1, R203 += 1, R188 += 1, R189 += 1 };
  s3 -> s4 [0, 65535] { R225 += 1, R203 += 1, R189 += 1, R177 += 1, R0 += 1 };
  s4 -> s5 [0, 65535] { R225 += 1, R203 += 1, R189 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R225 += 1 };
  s4 -> s8 [0, 65535] { R225 += 1, R203 += 1 };
  s4 -> s4 [0, 65535] { R225 += 1, R203 += 1, R189 += 1, R177 += 1, R0 += 1 };
  s5 -> s5 [0, 65535] { R225 += 1, R203 += 1, R189 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R225 += 1 };
  s5 -> s8 [0, 65535] { R225 += 1, R203 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R225 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R225 += 1 };
  s8 -> s8 [0, 65535] { R225 += 1, R203 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R2 = R177 && R3 = R179 && R4 = R225 && R6 = 0 && R7 - R176 = -1 && R118 = 0 && R119 = R199 && R174 = R176 && R175 = R177 && R178 - R199 = 1 && R180 = 0 && R182 = 0 && R184 = 0 && R186 = 0 && R188 = 0 && R190 = 0 && R191 = R199 && R194 = 0 && R195 = R199 && R198 = 0 && R204 = 10 && R205 = R225 && R206 = 10 && R207 = R225 && R208 = 10 && R209 = R225 && R210 = 10 && R211 = R225 && R212 = 10 && R213 = R225 && R214 = 10 && R215 = R225 && R216 = 10 && R217 = R225 && R218 = 10 && R219 = R225 && R220 = 10 && R221 = R225 && R222 = 10 && R223 = R225 && R224 = 10 && R0 != 0 && R1 != 0 && R176 - R177 < 1 && -1 < R176 && 0 < R177 && R199 < R179 && R181 < 9 && R183 < 9 && R185 < 9 && R187 < 9 && R189 < 9 && -1 < R199 && 9 < R225 && (R181 != 8 || 7 < R173) && (R183 != 8 || 7 < R173) && (R185 != 8 || 7 < R173) && (R187 != 8 || 7 < R173) && (R189 != 8 || 7 < R173) && (R192 != 0 || R193 = R199 || (R173 = 0 && R199 = 0)) && (R196 != 0 || R197 = R199 || (R173 = 0 && R199 = 0)) && (R200 != 0 || R199 = R201 || (R173 = 0 && R199 = 0)) && (R202 != 0 || R199 = R203 || (R173 = 0 && R199 = 0)) && (R173 = R181 || 7 < R181) && (R173 = R183 || 7 < R183) && (R173 = R185 || 7 < R185) && (R173 = R187 || 7 < R187) && (R173 = R189 || 7 < R189) && (R192 = 0 || (R173 = 0 && R199 = 0)) && (R196 = 0 || (R173 = 0 && R199 = 0)) && (R200 = 0 || (R173 = 0 && R199 = 0)) && (R202 = 0 || (R173 = 0 && R199 = 0));
// End of Parikh automata intersection problem
