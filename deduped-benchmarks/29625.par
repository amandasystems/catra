// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R130, R131, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R3, R4, R6, R7;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R227 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s2 [46, 46] { R227 += 1 };
  s0 -> s3 [47, 47] { R227 += 1 };
  s0 -> s1 [48, 65535] { R227 += 1 };
  s1 -> s1 [0, 45] { R227 += 1 };
  s1 -> s2 [46, 46] { R227 += 1 };
  s1 -> s3 [47, 47] { R227 += 1 };
  s1 -> s1 [48, 65535] { R227 += 1 };
  s2 -> s1 [0, 45] { R227 += 1 };
  s2 -> s2 [46, 46] { R227 += 1 };
  s2 -> s3 [47, 47] { R227 += 1 };
  s2 -> s1 [48, 114] { R227 += 1 };
  s2 -> s8 [115, 115] { R227 += 1 };
  s2 -> s1 [116, 65535] { R227 += 1 };
  s3 -> s3 [0, 45] { R227 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R227 += 1 };
  s3 -> s3 [47, 65535] { R227 += 1 };
  s4 -> s3 [0, 45] { R227 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R227 += 1 };
  s4 -> s3 [47, 114] { R227 += 1 };
  s4 -> s5 [115, 115] { R227 += 1 };
  s4 -> s3 [116, 65535] { R227 += 1 };
  s5 -> s3 [0, 45] { R227 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R227 += 1 };
  s5 -> s3 [47, 110] { R227 += 1 };
  s5 -> s6 [111, 111] { R227 += 1 };
  s5 -> s3 [112, 65535] { R227 += 1 };
  s6 -> s3 [0, 45] { R227 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R227 += 1 };
  s6 -> s3 [47, 98] { R227 += 1 };
  s6 -> s7 [99, 99] { R227 += 1 };
  s6 -> s3 [100, 65535] { R227 += 1 };
  s7 -> s3 [0, 45] { R227 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R227 += 1 };
  s7 -> s3 [47, 106] { R227 += 1 };
  s7 -> s3 [108, 65535] { R227 += 1 };
  s8 -> s1 [0, 45] { R227 += 1 };
  s8 -> s2 [46, 46] { R227 += 1 };
  s8 -> s3 [47, 47] { R227 += 1 };
  s8 -> s1 [48, 110] { R227 += 1 };
  s8 -> s9 [111, 111] { R227 += 1 };
  s8 -> s1 [112, 65535] { R227 += 1 };
  s9 -> s1 [0, 45] { R227 += 1 };
  s9 -> s2 [46, 46] { R227 += 1 };
  s9 -> s3 [47, 47] { R227 += 1 };
  s9 -> s1 [48, 98] { R227 += 1 };
  s9 -> s10 [99, 99] { R227 += 1 };
  s9 -> s1 [100, 65535] { R227 += 1 };
  s10 -> s1 [0, 45] { R227 += 1 };
  s10 -> s2 [46, 46] { R227 += 1 };
  s10 -> s3 [47, 47] { R227 += 1 };
  s10 -> s1 [48, 106] { R227 += 1 };
  s10 -> s1 [108, 65535] { R227 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s0 -> s1 [0, 65535] { R229 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R229 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R231 += 1, R131 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s2 [0, 65535] { R231 += 1, R130 += 1, R131 += 1 };
  s0 -> s3 [47, 47] { R231 += 1 };
  s0 -> s1 [48, 65535] { R231 += 1, R131 += 1 };
  s1 -> s1 [0, 46] { R231 += 1, R131 += 1 };
  s1 -> s3 [47, 47] { R231 += 1 };
  s1 -> s1 [48, 65535] { R231 += 1, R131 += 1 };
  s2 -> s1 [0, 46] { R231 += 1, R131 += 1 };
  s2 -> s2 [0, 65535] { R231 += 1, R130 += 1, R131 += 1 };
  s2 -> s3 [47, 47] { R231 += 1 };
  s2 -> s1 [48, 65535] { R231 += 1, R131 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R231 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s1 [0, 65535] { R233 += 1, R197 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R233 += 1, R196 += 1, R197 += 1 };
  s1 -> s1 [0, 65535] { R233 += 1, R197 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R233 += 1 };
  s2 -> s1 [0, 65535] { R233 += 1, R197 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R233 += 1, R196 += 1, R197 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R233 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R235 += 1, R211 += 1 };
  s0 -> s2 [0, 65535] { R235 += 1, R210 += 1, R211 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s3 [64, 64] { R235 += 1, R211 += 1 };
  s0 -> s1 [65, 65535] { R235 += 1, R211 += 1 };
  s1 -> s1 [0, 63] { R235 += 1, R211 += 1 };
  s1 -> s3 [64, 64] { R235 += 1, R211 += 1 };
  s1 -> s1 [65, 65535] { R235 += 1, R211 += 1 };
  s2 -> s1 [0, 63] { R235 += 1, R211 += 1 };
  s2 -> s2 [0, 65535] { R235 += 1, R210 += 1, R211 += 1 };
  s2 -> s3 [64, 64] { R235 += 1, R211 += 1 };
  s2 -> s1 [65, 65535] { R235 += 1, R211 += 1 };
  s3 -> s4 [0, 65535] { R235 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R235 += 1, R211 += 1 };
  s4 -> s4 [0, 65535] { R235 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R237 += 1, R212 += 1, R213 += 1 };
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s0 -> s2 [0, 65535] { R237 += 1, R213 += 1, R191 += 1 };
  s1 -> s1 [0, 65535] { R237 += 1, R212 += 1, R213 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R237 += 1, R213 += 1, R191 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R237 += 1, R213 += 1, R191 += 1 };
  s2 -> s4 [0, 65535] { R237 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R237 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R239 += 1, R215 += 1, R199 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s0 -> s2 [0, 65535] { R239 += 1, R214 += 1, R215 += 1 };
  s0 -> s3 [0, 65535] { R239 += 1, R215 += 1, R198 += 1, R199 += 1 };
  s0 -> s4 [58, 58] { R239 += 1, R215 += 1, R199 += 1 };
  s0 -> s1 [59, 63] { R239 += 1, R215 += 1, R199 += 1 };
  s0 -> s1 [65, 65535] { R239 += 1, R215 += 1, R199 += 1 };
  s1 -> s1 [0, 57] { R239 += 1, R215 += 1, R199 += 1 };
  s1 -> s4 [58, 58] { R239 += 1, R215 += 1, R199 += 1 };
  s1 -> s1 [59, 63] { R239 += 1, R215 += 1, R199 += 1 };
  s1 -> s1 [65, 65535] { R239 += 1, R215 += 1, R199 += 1 };
  s2 -> s1 [0, 57] { R239 += 1, R215 += 1, R199 += 1 };
  s2 -> s2 [0, 65535] { R239 += 1, R214 += 1, R215 += 1 };
  s2 -> s3 [0, 65535] { R239 += 1, R215 += 1, R198 += 1, R199 += 1 };
  s2 -> s4 [58, 58] { R239 += 1, R215 += 1, R199 += 1 };
  s2 -> s1 [59, 63] { R239 += 1, R215 += 1, R199 += 1 };
  s2 -> s1 [65, 65535] { R239 += 1, R215 += 1, R199 += 1 };
  s3 -> s1 [0, 57] { R239 += 1, R215 += 1, R199 += 1 };
  s3 -> s3 [0, 65535] { R239 += 1, R215 += 1, R198 += 1, R199 += 1 };
  s3 -> s4 [58, 58] { R239 += 1, R215 += 1, R199 += 1 };
  s3 -> s1 [59, 63] { R239 += 1, R215 += 1, R199 += 1 };
  s3 -> s1 [65, 65535] { R239 += 1, R215 += 1, R199 += 1 };
  s4 -> s4 [0, 63] { R239 += 1, R215 += 1, R199 += 1 };
  s4 -> s4 [0, 65535] { R239 += 1, R215 += 1 };
  s4 -> s5 [0, 65535] { R239 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [65, 65535] { R239 += 1, R215 += 1, R199 += 1 };
  s5 -> s5 [0, 65535] { R239 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R241 += 1, R217 += 1, R201 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s0 -> s2 [0, 65535] { R241 += 1, R217 += 1, R200 += 1, R201 += 1 };
  s0 -> s3 [0, 65535] { R241 += 1, R216 += 1, R217 += 1 };
  s1 -> s5 [0, 65535] { R241 += 1 };
  s1 -> s1 [0, 65535] { R241 += 1, R217 += 1, R201 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R241 += 1, R217 += 1 };
  s2 -> s5 [0, 65535] { R241 += 1 };
  s2 -> s1 [0, 65535] { R241 += 1, R217 += 1, R201 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R241 += 1, R217 += 1, R200 += 1, R201 += 1 };
  s3 -> s1 [0, 65535] { R241 += 1, R217 += 1, R201 += 1, R2 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R241 += 1, R217 += 1, R200 += 1, R201 += 1 };
  s3 -> s3 [0, 65535] { R241 += 1, R216 += 1, R217 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R241 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R241 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R241 += 1, R217 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R243 += 1, R219 += 1, R203 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R243 += 1, R219 += 1, R202 += 1, R203 += 1 };
  s0 -> s4 [0, 65535] { R243 += 1, R218 += 1, R219 += 1 };
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s5 [58, 58] { R243 += 1, R219 += 1, R203 += 1 };
  s0 -> s1 [59, 65535] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s1 -> s1 [0, 57] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s1 -> s5 [58, 58] { R243 += 1, R219 += 1, R203 += 1 };
  s1 -> s1 [59, 65535] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s2 -> s1 [0, 57] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R243 += 1, R219 += 1, R203 += 1, R6 += 1, R7 += 1 };
  s2 -> s5 [58, 58] { R243 += 1, R219 += 1, R203 += 1 };
  s2 -> s1 [59, 65535] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s3 -> s1 [0, 57] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s3 -> s2 [0, 65535] { R243 += 1, R219 += 1, R203 += 1, R6 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R243 += 1, R219 += 1, R202 += 1, R203 += 1 };
  s3 -> s5 [58, 58] { R243 += 1, R219 += 1, R203 += 1 };
  s3 -> s1 [59, 65535] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s4 -> s1 [0, 57] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s4 -> s2 [0, 65535] { R243 += 1, R219 += 1, R203 += 1, R6 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R243 += 1, R219 += 1, R202 += 1, R203 += 1 };
  s4 -> s4 [0, 65535] { R243 += 1, R218 += 1, R219 += 1 };
  s4 -> s5 [58, 58] { R243 += 1, R219 += 1, R203 += 1 };
  s4 -> s1 [59, 65535] { R243 += 1, R219 += 1, R203 += 1, R7 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R243 += 1 };
  s5 -> s8 [0, 65535] { R243 += 1, R219 += 1 };
  s5 -> s5 [0, 65535] { R243 += 1, R219 += 1, R203 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R243 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R243 += 1 };
  s8 -> s8 [0, 65535] { R243 += 1, R219 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s0 -> s2 [0, 65535] { R245 += 1, R221 += 1, R205 += 1, R192 += 1, R193 += 1 };
  s0 -> s3 [0, 65535] { R245 += 1, R221 += 1, R204 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s4 [0, 65535] { R245 += 1, R220 += 1, R221 += 1 };
  s0 -> s1 [59, 65535] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s1 -> s1 [0, 57] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s1 -> s7 [0, 65535] { R245 += 1, R221 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R245 += 1, R221 += 1, R205 += 1 };
  s1 -> s6 [0, 65535] { R245 += 1 };
  s1 -> s1 [59, 65535] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s2 -> s1 [0, 57] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s2 -> s2 [0, 65535] { R245 += 1, R221 += 1, R205 += 1, R192 += 1, R193 += 1 };
  s2 -> s7 [0, 65535] { R245 += 1, R221 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R245 += 1 };
  s2 -> s1 [59, 65535] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s3 -> s1 [0, 57] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s3 -> s2 [0, 65535] { R245 += 1, R221 += 1, R205 += 1, R192 += 1, R193 += 1 };
  s3 -> s3 [0, 65535] { R245 += 1, R221 += 1, R204 += 1, R205 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R245 += 1 };
  s3 -> s1 [59, 65535] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s4 -> s1 [0, 57] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s4 -> s2 [0, 65535] { R245 += 1, R221 += 1, R205 += 1, R192 += 1, R193 += 1 };
  s4 -> s3 [0, 65535] { R245 += 1, R221 += 1, R204 += 1, R205 += 1 };
  s4 -> s4 [0, 65535] { R245 += 1, R220 += 1, R221 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [59, 65535] { R245 += 1, R221 += 1, R205 += 1, R193 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R245 += 1 };
  s7 -> s7 [0, 65535] { R245 += 1, R221 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R245 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R247 += 1, R222 += 1, R223 += 1 };
  s0 -> s2 [0, 65535] { R247 += 1, R223 += 1, R206 += 1, R207 += 1 };
  s0 -> s3 [0, 65535] { R247 += 1, R223 += 1, R207 += 1, R195 += 1, R0 += 1 };
  s0 -> s4 [0, 65535] { R247 += 1, R223 += 1, R207 += 1, R194 += 1, R195 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R247 += 1, R222 += 1, R223 += 1 };
  s1 -> s2 [0, 65535] { R247 += 1, R223 += 1, R206 += 1, R207 += 1 };
  s1 -> s3 [0, 65535] { R247 += 1, R223 += 1, R207 += 1, R195 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R247 += 1, R223 += 1, R207 += 1, R194 += 1, R195 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R247 += 1, R223 += 1, R206 += 1, R207 += 1 };
  s2 -> s3 [0, 65535] { R247 += 1, R223 += 1, R207 += 1, R195 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R247 += 1, R223 += 1, R207 += 1, R194 += 1, R195 += 1 };
  s2 -> s7 [0, 65535] { R247 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s8 [0, 65535] { R247 += 1, R223 += 1, R207 += 1 };
  s3 -> s6 [0, 65535] { R247 += 1, R223 += 1 };
  s3 -> s3 [0, 65535] { R247 += 1, R223 += 1, R207 += 1, R195 += 1, R0 += 1 };
  s3 -> s7 [0, 65535] { R247 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R247 += 1, R223 += 1 };
  s4 -> s3 [0, 65535] { R247 += 1, R223 += 1, R207 += 1, R195 += 1, R0 += 1 };
  s4 -> s4 [0, 65535] { R247 += 1, R223 += 1, R207 += 1, R194 += 1, R195 += 1 };
  s4 -> s7 [0, 65535] { R247 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R247 += 1, R223 += 1 };
  s6 -> s7 [0, 65535] { R247 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R247 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R247 += 1, R223 += 1, R207 += 1 };
  s8 -> s6 [0, 65535] { R247 += 1, R223 += 1 };
  s8 -> s7 [0, 65535] { R247 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R249 += 1, R224 += 1, R225 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s2 [0, 65535] { R249 += 1, R225 += 1, R208 += 1, R209 += 1 };
  s0 -> s3 [0, 65535] { R249 += 1, R225 += 1, R209 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R249 += 1, R224 += 1, R225 += 1 };
  s1 -> s2 [0, 65535] { R249 += 1, R225 += 1, R208 += 1, R209 += 1 };
  s1 -> s3 [0, 65535] { R249 += 1, R225 += 1, R209 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R249 += 1 };
  s2 -> s2 [0, 65535] { R249 += 1, R225 += 1, R208 += 1, R209 += 1 };
  s2 -> s3 [0, 65535] { R249 += 1, R225 += 1, R209 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R249 += 1 };
  s3 -> s6 [0, 65535] { R249 += 1, R225 += 1 };
  s3 -> s3 [0, 65535] { R249 += 1, R225 += 1, R209 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R249 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R249 += 1 };
  s6 -> s6 [0, 65535] { R249 += 1, R225 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R195 && R3 = R197 && R4 = R249 && R6 = 0 && R7 = 0 && R130 = 0 && R131 = R219 && R192 = 1 && R193 = R195 && R194 = 1 && R196 - R219 = 1 && R198 = 0 && R200 = 0 && R202 = 0 && R204 = 0 && R206 = 0 && R208 = 0 && R210 = 0 && R211 = R219 && R214 = 0 && R215 = R219 && R218 = 0 && R226 = 10 && R227 = R249 && R228 = 10 && R229 = R249 && R230 = 10 && R231 = R249 && R232 = 10 && R233 = R249 && R234 = 10 && R235 = R249 && R236 = 10 && R237 = R249 && R238 = 10 && R239 = R249 && R240 = 10 && R241 = R249 && R242 = 10 && R243 = R249 && R244 = 10 && R245 = R249 && R246 = 10 && R247 = R249 && R248 = 10 && R0 != 0 && R1 != 0 && 0 < R195 && R219 < R197 && R199 < 12 && R201 < 12 && R203 < 12 && R205 < 12 && R207 < 12 && R209 < 12 && -1 < R219 && 9 < R249 && (R199 != 11 || 10 < R191) && (R201 != 11 || 10 < R191) && (R203 != 11 || 10 < R191) && (R205 != 11 || 10 < R191) && (R207 != 11 || 10 < R191) && (R209 != 11 || 10 < R191) && (R212 != 0 || R213 = R219 || (R191 = 0 && R219 = 0)) && (R216 != 0 || R217 = R219 || (R191 = 0 && R219 = 0)) && (R220 != 0 || R219 = R221 || (R191 = 0 && R219 = 0)) && (R222 != 0 || R219 = R223 || (R191 = 0 && R219 = 0)) && (R224 != 0 || R219 = R225 || (R191 = 0 && R219 = 0)) && (R191 = R199 || 10 < R199) && (R191 = R201 || 10 < R201) && (R191 = R203 || 10 < R203) && (R191 = R205 || 10 < R205) && (R191 = R207 || 10 < R207) && (R191 = R209 || 10 < R209) && (R212 = 0 || (R191 = 0 && R219 = 0)) && (R216 = 0 || (R191 = 0 && R219 = 0)) && (R220 = 0 || (R191 = 0 && R219 = 0)) && (R222 = 0 || (R191 = 0 && R219 = 0)) && (R224 = 0 || (R191 = 0 && R219 = 0));
// End of Parikh automata intersection problem
