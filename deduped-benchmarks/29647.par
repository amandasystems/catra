// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R2, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R157 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s2 [46, 46] { R157 += 1 };
  s0 -> s3 [47, 47] { R157 += 1 };
  s0 -> s1 [48, 65535] { R157 += 1 };
  s1 -> s1 [0, 45] { R157 += 1 };
  s1 -> s2 [46, 46] { R157 += 1 };
  s1 -> s3 [47, 47] { R157 += 1 };
  s1 -> s1 [48, 65535] { R157 += 1 };
  s2 -> s1 [0, 45] { R157 += 1 };
  s2 -> s2 [46, 46] { R157 += 1 };
  s2 -> s3 [47, 47] { R157 += 1 };
  s2 -> s1 [48, 114] { R157 += 1 };
  s2 -> s8 [115, 115] { R157 += 1 };
  s2 -> s1 [116, 65535] { R157 += 1 };
  s3 -> s3 [0, 45] { R157 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R157 += 1 };
  s3 -> s3 [47, 65535] { R157 += 1 };
  s4 -> s3 [0, 45] { R157 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R157 += 1 };
  s4 -> s3 [47, 114] { R157 += 1 };
  s4 -> s5 [115, 115] { R157 += 1 };
  s4 -> s3 [116, 65535] { R157 += 1 };
  s5 -> s3 [0, 45] { R157 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R157 += 1 };
  s5 -> s3 [47, 110] { R157 += 1 };
  s5 -> s6 [111, 111] { R157 += 1 };
  s5 -> s3 [112, 65535] { R157 += 1 };
  s6 -> s3 [0, 45] { R157 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R157 += 1 };
  s6 -> s3 [47, 98] { R157 += 1 };
  s6 -> s7 [99, 99] { R157 += 1 };
  s6 -> s3 [100, 65535] { R157 += 1 };
  s7 -> s3 [0, 45] { R157 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R157 += 1 };
  s7 -> s3 [47, 106] { R157 += 1 };
  s7 -> s3 [108, 65535] { R157 += 1 };
  s8 -> s1 [0, 45] { R157 += 1 };
  s8 -> s2 [46, 46] { R157 += 1 };
  s8 -> s3 [47, 47] { R157 += 1 };
  s8 -> s1 [48, 110] { R157 += 1 };
  s8 -> s9 [111, 111] { R157 += 1 };
  s8 -> s1 [112, 65535] { R157 += 1 };
  s9 -> s1 [0, 45] { R157 += 1 };
  s9 -> s2 [46, 46] { R157 += 1 };
  s9 -> s3 [47, 47] { R157 += 1 };
  s9 -> s1 [48, 98] { R157 += 1 };
  s9 -> s10 [99, 99] { R157 += 1 };
  s9 -> s1 [100, 65535] { R157 += 1 };
  s10 -> s1 [0, 45] { R157 += 1 };
  s10 -> s2 [46, 46] { R157 += 1 };
  s10 -> s3 [47, 47] { R157 += 1 };
  s10 -> s1 [48, 106] { R157 += 1 };
  s10 -> s1 [108, 65535] { R157 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R159 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R159 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R161 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R161 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s3 [47, 47] { R161 += 1 };
  s0 -> s1 [48, 65535] { R161 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R161 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R161 += 1 };
  s1 -> s1 [48, 65535] { R161 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R161 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R161 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R161 += 1 };
  s2 -> s1 [48, 65535] { R161 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R161 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R163 += 1, R114 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R163 += 1, R115 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s1 -> s1 [0, 65535] { R163 += 1, R114 += 1, R115 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R163 += 1, R115 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R163 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R163 += 1, R115 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R163 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R165 += 1, R133 += 1 };
  s0 -> s2 [0, 65535] { R165 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s3 [64, 64] { R165 += 1, R133 += 1 };
  s0 -> s1 [65, 65535] { R165 += 1, R133 += 1 };
  s1 -> s1 [0, 63] { R165 += 1, R133 += 1 };
  s1 -> s3 [64, 64] { R165 += 1, R133 += 1 };
  s1 -> s1 [65, 65535] { R165 += 1, R133 += 1 };
  s2 -> s1 [0, 63] { R165 += 1, R133 += 1 };
  s2 -> s2 [0, 65535] { R165 += 1, R132 += 1, R133 += 1 };
  s2 -> s3 [64, 64] { R165 += 1, R133 += 1 };
  s2 -> s1 [65, 65535] { R165 += 1, R133 += 1 };
  s3 -> s3 [0, 65535] { R165 += 1, R133 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R165 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R165 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R167 += 1, R134 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R167 += 1, R135 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s1 -> s1 [0, 65535] { R167 += 1, R134 += 1, R135 += 1 };
  s1 -> s2 [0, 65535] { R167 += 1, R135 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R167 += 1, R135 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R167 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R167 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 36] { R169 += 1, R137 += 1, R111 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s3 [0, 65535] { R169 += 1, R137 += 1, R110 += 1, R111 += 1 };
  s0 -> s1 [38, 42] { R169 += 1, R137 += 1, R111 += 1 };
  s0 -> s1 [44, 57] { R169 += 1, R137 += 1, R111 += 1 };
  s0 -> s1 [59, 63] { R169 += 1, R137 += 1, R111 += 1 };
  s0 -> s1 [65, 65535] { R169 += 1, R137 += 1, R111 += 1 };
  s1 -> s1 [0, 36] { R169 += 1, R137 += 1, R111 += 1 };
  s1 -> s4 [0, 65535] { R169 += 1 };
  s1 -> s1 [0, 65535] { R169 += 1, R137 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [38, 42] { R169 += 1, R137 += 1, R111 += 1 };
  s1 -> s1 [44, 57] { R169 += 1, R137 += 1, R111 += 1 };
  s1 -> s1 [59, 63] { R169 += 1, R137 += 1, R111 += 1 };
  s1 -> s1 [65, 65535] { R169 += 1, R137 += 1, R111 += 1 };
  s2 -> s1 [0, 36] { R169 += 1, R137 += 1, R111 += 1 };
  s2 -> s2 [0, 65535] { R169 += 1, R136 += 1, R137 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R169 += 1, R137 += 1, R110 += 1, R111 += 1 };
  s2 -> s1 [38, 42] { R169 += 1, R137 += 1, R111 += 1 };
  s2 -> s1 [44, 57] { R169 += 1, R137 += 1, R111 += 1 };
  s2 -> s1 [59, 63] { R169 += 1, R137 += 1, R111 += 1 };
  s2 -> s1 [65, 65535] { R169 += 1, R137 += 1, R111 += 1 };
  s3 -> s1 [0, 36] { R169 += 1, R137 += 1, R111 += 1 };
  s3 -> s4 [0, 65535] { R169 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R169 += 1, R137 += 1, R110 += 1, R111 += 1 };
  s3 -> s1 [38, 42] { R169 += 1, R137 += 1, R111 += 1 };
  s3 -> s1 [44, 57] { R169 += 1, R137 += 1, R111 += 1 };
  s3 -> s1 [59, 63] { R169 += 1, R137 += 1, R111 += 1 };
  s3 -> s1 [65, 65535] { R169 += 1, R137 += 1, R111 += 1 };
  s4 -> s4 [0, 65535] { R169 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R171 += 1, R139 += 1, R113 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R139 += 1, R112 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s3 [0, 65535] { R171 += 1, R138 += 1, R139 += 1 };
  s1 -> s1 [0, 65535] { R171 += 1, R139 += 1, R113 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R171 += 1, R139 += 1 };
  s1 -> s5 [0, 65535] { R171 += 1 };
  s2 -> s1 [0, 65535] { R171 += 1, R139 += 1, R113 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R171 += 1, R139 += 1, R112 += 1, R113 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R171 += 1 };
  s3 -> s1 [0, 65535] { R171 += 1, R139 += 1, R113 += 1, R0 += 1 };
  s3 -> s2 [0, 65535] { R171 += 1, R139 += 1, R112 += 1, R113 += 1 };
  s3 -> s3 [0, 65535] { R171 += 1, R138 += 1, R139 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R171 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R171 += 1, R139 += 1 };
  s6 -> s5 [0, 65535] { R171 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 43] { R173 += 1, R141 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R140 += 1, R141 += 1 };
  s0 -> s3 [0, 65535] { R173 += 1, R141 += 1, R116 += 1, R117 += 1 };
  s0 -> s1 [45, 64] { R173 += 1, R141 += 1, R117 += 1 };
  s0 -> s4 [90, 90] { R173 += 1, R141 += 1, R117 += 1 };
  s0 -> s1 [91, 65535] { R173 += 1, R141 += 1, R117 += 1 };
  s1 -> s1 [0, 43] { R173 += 1, R141 += 1, R117 += 1 };
  s1 -> s1 [45, 64] { R173 += 1, R141 += 1, R117 += 1 };
  s1 -> s4 [90, 90] { R173 += 1, R141 += 1, R117 += 1 };
  s1 -> s1 [91, 65535] { R173 += 1, R141 += 1, R117 += 1 };
  s2 -> s1 [0, 43] { R173 += 1, R141 += 1, R117 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [0, 65535] { R173 += 1, R141 += 1, R116 += 1, R117 += 1 };
  s2 -> s1 [45, 64] { R173 += 1, R141 += 1, R117 += 1 };
  s2 -> s4 [90, 90] { R173 += 1, R141 += 1, R117 += 1 };
  s2 -> s1 [91, 65535] { R173 += 1, R141 += 1, R117 += 1 };
  s3 -> s1 [0, 43] { R173 += 1, R141 += 1, R117 += 1 };
  s3 -> s3 [0, 65535] { R173 += 1, R141 += 1, R116 += 1, R117 += 1 };
  s3 -> s1 [45, 64] { R173 += 1, R141 += 1, R117 += 1 };
  s3 -> s4 [90, 90] { R173 += 1, R141 += 1, R117 += 1 };
  s3 -> s1 [91, 65535] { R173 += 1, R141 += 1, R117 += 1 };
  s4 -> s4 [0, 43] { R173 += 1, R141 += 1, R117 += 1 };
  s4 -> s5 [0, 65535] { R173 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R173 += 1, R141 += 1 };
  s4 -> s4 [45, 64] { R173 += 1, R141 += 1, R117 += 1 };
  s4 -> s4 [90, 65535] { R173 += 1, R141 += 1, R117 += 1 };
  s5 -> s5 [0, 65535] { R173 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s0 -> s1 [0, 65535] { R175 += 1, R143 += 1, R118 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R175 += 1, R143 += 1, R119 += 1, R2 += 1 };
  s0 -> s3 [0, 65535] { R175 += 1, R142 += 1, R143 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R175 += 1, R143 += 1, R118 += 1, R119 += 1 };
  s1 -> s2 [0, 65535] { R175 += 1, R143 += 1, R119 += 1, R2 += 1 };
  s1 -> s6 [0, 65535] { R175 += 1 };
  s2 -> s5 [0, 65535] { R175 += 1, R143 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R175 += 1, R143 += 1, R119 += 1, R2 += 1 };
  s2 -> s6 [0, 65535] { R175 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R175 += 1, R143 += 1, R118 += 1, R119 += 1 };
  s3 -> s2 [0, 65535] { R175 += 1, R143 += 1, R119 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R175 += 1, R142 += 1, R143 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R175 += 1, R143 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R175 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R175 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 57] { R177 += 1, R145 += 1, R121 += 1 };
  s0 -> s2 [0, 65535] { R177 += 1, R145 += 1, R121 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R177 += 1, R145 += 1, R120 += 1, R121 += 1 };
  s0 -> s4 [0, 65535] { R177 += 1, R144 += 1, R145 += 1 };
  s0 -> s0 [0, 65535] { R176 += 1, R177 += 1 };
  s0 -> s5 [58, 58] { R177 += 1, R145 += 1, R121 += 1 };
  s0 -> s1 [59, 65535] { R177 += 1, R145 += 1, R121 += 1 };
  s1 -> s1 [0, 57] { R177 += 1, R145 += 1, R121 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R177 += 1 };
  s1 -> s1 [0, 65535] { R177 += 1, R145 += 1 };
  s1 -> s5 [58, 58] { R177 += 1, R145 += 1, R121 += 1 };
  s1 -> s1 [59, 65535] { R177 += 1, R145 += 1, R121 += 1 };
  s2 -> s1 [0, 57] { R177 += 1, R145 += 1, R121 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R177 += 1 };
  s2 -> s8 [0, 65535] { R177 += 1, R145 += 1 };
  s2 -> s2 [0, 65535] { R177 += 1, R145 += 1, R121 += 1, R7 += 1 };
  s2 -> s5 [58, 58] { R177 += 1, R145 += 1, R121 += 1 };
  s2 -> s1 [59, 65535] { R177 += 1, R145 += 1, R121 += 1 };
  s3 -> s1 [0, 57] { R177 += 1, R145 += 1, R121 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R177 += 1 };
  s3 -> s2 [0, 65535] { R177 += 1, R145 += 1, R121 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R177 += 1, R145 += 1, R120 += 1, R121 += 1 };
  s3 -> s5 [58, 58] { R177 += 1, R145 += 1, R121 += 1 };
  s3 -> s1 [59, 65535] { R177 += 1, R145 += 1, R121 += 1 };
  s4 -> s1 [0, 57] { R177 += 1, R145 += 1, R121 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R177 += 1, R145 += 1, R121 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R177 += 1, R145 += 1, R120 += 1, R121 += 1 };
  s4 -> s4 [0, 65535] { R177 += 1, R144 += 1, R145 += 1 };
  s4 -> s5 [58, 58] { R177 += 1, R145 += 1, R121 += 1 };
  s4 -> s1 [59, 65535] { R177 += 1, R145 += 1, R121 += 1 };
  s5 -> s5 [0, 65535] { R177 += 1, R145 += 1, R121 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R177 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R177 += 1 };
  s8 -> s8 [0, 65535] { R177 += 1, R145 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 89] { R179 += 1, R147 += 1, R123 += 1 };
  s0 -> s2 [0, 65535] { R179 += 1, R146 += 1, R147 += 1 };
  s0 -> s3 [0, 65535] { R179 += 1, R147 += 1, R122 += 1, R123 += 1 };
  s0 -> s4 [0, 65535] { R179 += 1, R147 += 1, R123 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R178 += 1, R179 += 1 };
  s0 -> s5 [90, 90] { R179 += 1, R147 += 1, R123 += 1 };
  s0 -> s1 [91, 65535] { R179 += 1, R147 += 1, R123 += 1 };
  s1 -> s1 [0, 89] { R179 += 1, R147 += 1, R123 += 1 };
  s1 -> s1 [0, 65535] { R179 += 1, R147 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R179 += 1 };
  s1 -> s5 [90, 90] { R179 += 1, R147 += 1, R123 += 1 };
  s1 -> s1 [91, 65535] { R179 += 1, R147 += 1, R123 += 1 };
  s2 -> s1 [0, 89] { R179 += 1, R147 += 1, R123 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R179 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [0, 65535] { R179 += 1, R147 += 1, R122 += 1, R123 += 1 };
  s2 -> s4 [0, 65535] { R179 += 1, R147 += 1, R123 += 1, R8 += 1 };
  s2 -> s5 [90, 90] { R179 += 1, R147 += 1, R123 += 1 };
  s2 -> s1 [91, 65535] { R179 += 1, R147 += 1, R123 += 1 };
  s3 -> s1 [0, 89] { R179 += 1, R147 += 1, R123 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R179 += 1 };
  s3 -> s3 [0, 65535] { R179 += 1, R147 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [0, 65535] { R179 += 1, R147 += 1, R123 += 1, R8 += 1 };
  s3 -> s5 [90, 90] { R179 += 1, R147 += 1, R123 += 1 };
  s3 -> s1 [91, 65535] { R179 += 1, R147 += 1, R123 += 1 };
  s4 -> s1 [0, 89] { R179 += 1, R147 += 1, R123 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R179 += 1 };
  s4 -> s8 [0, 65535] { R179 += 1, R147 += 1 };
  s4 -> s4 [0, 65535] { R179 += 1, R147 += 1, R123 += 1, R8 += 1 };
  s4 -> s5 [90, 90] { R179 += 1, R147 += 1, R123 += 1 };
  s4 -> s1 [91, 65535] { R179 += 1, R147 += 1, R123 += 1 };
  s5 -> s5 [0, 65535] { R179 += 1, R147 += 1, R123 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R179 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R179 += 1 };
  s8 -> s8 [0, 65535] { R179 += 1, R147 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 90] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s0 -> s2 [0, 65535] { R181 += 1, R149 += 1, R125 += 1, R102 += 1, R103 += 1 };
  s0 -> s3 [0, 65535] { R181 += 1, R149 += 1, R124 += 1, R125 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s4 [0, 65535] { R181 += 1, R148 += 1, R149 += 1 };
  s0 -> s5 [91, 91] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s0 -> s1 [92, 65535] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s1 -> s8 [0, 65535] { R181 += 1, R149 += 1 };
  s1 -> s7 [0, 65535] { R181 += 1 };
  s1 -> s9 [0, 65535] { R181 += 1, R149 += 1, R125 += 1 };
  s2 -> s1 [0, 90] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s2 -> s2 [0, 65535] { R181 += 1, R149 += 1, R125 += 1, R102 += 1, R103 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R181 += 1, R149 += 1 };
  s2 -> s7 [0, 65535] { R181 += 1 };
  s2 -> s5 [91, 91] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s2 -> s1 [92, 65535] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s3 -> s1 [0, 90] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s3 -> s2 [0, 65535] { R181 += 1, R149 += 1, R125 += 1, R102 += 1, R103 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R181 += 1, R149 += 1, R124 += 1, R125 += 1 };
  s3 -> s7 [0, 65535] { R181 += 1 };
  s3 -> s5 [91, 91] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s3 -> s1 [92, 65535] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s4 -> s1 [0, 90] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s4 -> s2 [0, 65535] { R181 += 1, R149 += 1, R125 += 1, R102 += 1, R103 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R181 += 1, R149 += 1, R124 += 1, R125 += 1 };
  s4 -> s4 [0, 65535] { R181 += 1, R148 += 1, R149 += 1 };
  s4 -> s5 [91, 91] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s4 -> s1 [92, 65535] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s5 -> s1 [0, 65535] { R181 += 1, R149 += 1, R125 += 1, R103 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R181 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R181 += 1, R149 += 1 };
  s8 -> s7 [0, 65535] { R181 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s8 [0, 65535] { R181 += 1, R149 += 1 };
  s9 -> s7 [0, 65535] { R181 += 1 };
  s9 -> s9 [0, 65535] { R181 += 1, R149 += 1, R125 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R183 += 1, R151 += 1, R126 += 1, R127 += 1 };
  s0 -> s2 [0, 65535] { R183 += 1, R150 += 1, R151 += 1 };
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s0 -> s3 [0, 65535] { R183 += 1, R151 += 1, R127 += 1, R104 += 1, R105 += 1 };
  s0 -> s4 [0, 65535] { R183 += 1, R151 += 1, R127 += 1, R105 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R183 += 1, R151 += 1, R126 += 1, R127 += 1 };
  s1 -> s5 [0, 65535] { R183 += 1 };
  s1 -> s3 [0, 65535] { R183 += 1, R151 += 1, R127 += 1, R104 += 1, R105 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R183 += 1, R151 += 1, R127 += 1, R105 += 1, R6 += 1 };
  s2 -> s1 [0, 65535] { R183 += 1, R151 += 1, R126 += 1, R127 += 1 };
  s2 -> s2 [0, 65535] { R183 += 1, R150 += 1, R151 += 1 };
  s2 -> s3 [0, 65535] { R183 += 1, R151 += 1, R127 += 1, R104 += 1, R105 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R183 += 1, R151 += 1, R127 += 1, R105 += 1, R6 += 1 };
  s3 -> s5 [0, 65535] { R183 += 1 };
  s3 -> s3 [0, 65535] { R183 += 1, R151 += 1, R127 += 1, R104 += 1, R105 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R183 += 1, R151 += 1 };
  s3 -> s4 [0, 65535] { R183 += 1, R151 += 1, R127 += 1, R105 += 1, R6 += 1 };
  s4 -> s5 [0, 65535] { R183 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R183 += 1, R151 += 1 };
  s4 -> s8 [0, 65535] { R183 += 1, R151 += 1, R127 += 1 };
  s4 -> s4 [0, 65535] { R183 += 1, R151 += 1, R127 += 1, R105 += 1, R6 += 1 };
  s5 -> s5 [0, 65535] { R183 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R183 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R183 += 1, R151 += 1 };
  s8 -> s5 [0, 65535] { R183 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R183 += 1, R151 += 1 };
  s8 -> s8 [0, 65535] { R183 += 1, R151 += 1, R127 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 89] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s0 -> s2 [0, 65535] { R185 += 1, R152 += 1, R153 += 1 };
  s0 -> s3 [0, 65535] { R185 += 1, R153 += 1, R129 += 1, R106 += 1, R107 += 1 };
  s0 -> s4 [0, 65535] { R185 += 1, R153 += 1, R128 += 1, R129 += 1 };
  s0 -> s5 [90, 90] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s0 -> s1 [91, 65535] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s1 -> s1 [0, 89] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s1 -> s5 [90, 90] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s1 -> s1 [91, 65535] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s2 -> s1 [0, 89] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s2 -> s2 [0, 65535] { R185 += 1, R152 += 1, R153 += 1 };
  s2 -> s3 [0, 65535] { R185 += 1, R153 += 1, R129 += 1, R106 += 1, R107 += 1 };
  s2 -> s4 [0, 65535] { R185 += 1, R153 += 1, R128 += 1, R129 += 1 };
  s2 -> s5 [90, 90] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s2 -> s1 [91, 65535] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s3 -> s1 [0, 89] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s3 -> s3 [0, 65535] { R185 += 1, R153 += 1, R129 += 1, R106 += 1, R107 += 1 };
  s3 -> s5 [90, 90] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s3 -> s1 [91, 65535] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s4 -> s1 [0, 89] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s4 -> s3 [0, 65535] { R185 += 1, R153 += 1, R129 += 1, R106 += 1, R107 += 1 };
  s4 -> s4 [0, 65535] { R185 += 1, R153 += 1, R128 += 1, R129 += 1 };
  s4 -> s5 [90, 90] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s4 -> s1 [91, 65535] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s5 -> s6 [0, 65535] { R185 += 1 };
  s5 -> s7 [0, 65535] { R185 += 1, R153 += 1 };
  s5 -> s8 [0, 65535] { R185 += 1, R153 += 1, R129 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R185 += 1, R153 += 1, R129 += 1, R107 += 1 };
  s6 -> s6 [0, 65535] { R185 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R185 += 1 };
  s7 -> s7 [0, 65535] { R185 += 1, R153 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s6 [0, 65535] { R185 += 1 };
  s8 -> s7 [0, 65535] { R185 += 1, R153 += 1 };
  s8 -> s8 [0, 65535] { R185 += 1, R153 += 1, R129 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R187 += 1, R155 += 1, R130 += 1, R131 += 1 };
  s0 -> s2 [0, 65535] { R187 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [0, 65535] { R187 += 1, R155 += 1, R131 += 1, R109 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s4 [0, 65535] { R187 += 1, R155 += 1, R131 += 1, R108 += 1, R109 += 1 };
  s1 -> s1 [0, 65535] { R187 += 1, R155 += 1, R130 += 1, R131 += 1 };
  s1 -> s5 [0, 65535] { R187 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R187 += 1, R155 += 1, R131 += 1, R109 += 1, R101 += 1 };
  s1 -> s4 [0, 65535] { R187 += 1, R155 += 1, R131 += 1, R108 += 1, R109 += 1 };
  s2 -> s1 [0, 65535] { R187 += 1, R155 += 1, R130 += 1, R131 += 1 };
  s2 -> s2 [0, 65535] { R187 += 1, R154 += 1, R155 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R187 += 1, R155 += 1, R131 += 1, R109 += 1, R101 += 1 };
  s2 -> s4 [0, 65535] { R187 += 1, R155 += 1, R131 += 1, R108 += 1, R109 += 1 };
  s3 -> s5 [0, 65535] { R187 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R187 += 1, R155 += 1, R131 += 1, R109 += 1, R101 += 1 };
  s3 -> s8 [0, 65535] { R187 += 1, R155 += 1, R131 += 1 };
  s3 -> s7 [0, 65535] { R187 += 1, R155 += 1 };
  s4 -> s5 [0, 65535] { R187 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R187 += 1, R155 += 1, R131 += 1, R109 += 1, R101 += 1 };
  s4 -> s4 [0, 65535] { R187 += 1, R155 += 1, R131 += 1, R108 += 1, R109 += 1 };
  s4 -> s7 [0, 65535] { R187 += 1, R155 += 1 };
  s5 -> s5 [0, 65535] { R187 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R187 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R187 += 1, R155 += 1 };
  s8 -> s5 [0, 65535] { R187 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R187 += 1, R155 += 1, R131 += 1 };
  s8 -> s7 [0, 65535] { R187 += 1, R155 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R2 = R109 && R3 = R131 && R4 = R115 && R5 = R187 && R12 = 0 && R13 = R155 && R102 = 0 && R103 = 1 && R104 = 0 && R105 = 1 && R106 = 0 && R107 = R109 && R108 = 0 && R110 = 0 && R111 = 5 && R112 = 0 && R113 = 5 && R114 - R155 = 1 && R116 = 6 && R117 = R131 && R118 = 6 && R119 = R131 && R120 = 6 && R121 = R131 && R122 = 6 && R123 = R131 && R124 = 6 && R125 = R131 && R126 = 6 && R127 = R131 && R128 = 6 && R129 = R131 && R130 = 6 && R132 = 0 && R133 = R155 && R134 = 0 && R135 = R155 && R136 = 0 && R137 = R155 && R138 = 0 && R139 = R155 && R140 = 0 && R141 = R155 && R142 = 0 && R143 = R155 && R144 = 0 && R145 = R155 && R146 = 0 && R147 = R155 && R148 = 0 && R149 = R155 && R150 = 0 && R151 = R155 && R152 = 0 && R153 = R155 && R154 = 0 && R156 = 10 && R157 = R187 && R158 = 10 && R159 = R187 && R160 = 10 && R161 = R187 && R162 = 10 && R163 = R187 && R164 = 10 && R165 = R187 && R166 = 10 && R167 = R187 && R168 = 10 && R169 = R187 && R170 = 10 && R171 = R187 && R172 = 10 && R173 = R187 && R174 = 10 && R175 = R187 && R176 = 10 && R177 = R187 && R178 = 10 && R179 = R187 && R180 = 10 && R181 = R187 && R182 = 10 && R183 = R187 && R184 = 10 && R185 = R187 && R186 = 10 && R0 != 0 && R1 != 0 && R7 < 1 && R8 < 1 && 0 < R109 && R155 < R115 && 5 < R131 && -1 < R155 && 9 < R187;
// End of Parikh automata intersection problem
