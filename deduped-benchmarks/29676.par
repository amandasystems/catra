// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R192, R194, R195, R2, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R339 += 1 };
  s0 -> s0 [0, 65535] { R338 += 1, R339 += 1 };
  s0 -> s2 [46, 46] { R339 += 1 };
  s0 -> s3 [47, 47] { R339 += 1 };
  s0 -> s1 [48, 65535] { R339 += 1 };
  s1 -> s1 [0, 45] { R339 += 1 };
  s1 -> s2 [46, 46] { R339 += 1 };
  s1 -> s3 [47, 47] { R339 += 1 };
  s1 -> s1 [48, 65535] { R339 += 1 };
  s2 -> s1 [0, 45] { R339 += 1 };
  s2 -> s2 [46, 46] { R339 += 1 };
  s2 -> s3 [47, 47] { R339 += 1 };
  s2 -> s1 [48, 114] { R339 += 1 };
  s2 -> s8 [115, 115] { R339 += 1 };
  s2 -> s1 [116, 65535] { R339 += 1 };
  s3 -> s3 [0, 45] { R339 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R339 += 1 };
  s3 -> s3 [47, 65535] { R339 += 1 };
  s4 -> s3 [0, 45] { R339 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R339 += 1 };
  s4 -> s3 [47, 114] { R339 += 1 };
  s4 -> s5 [115, 115] { R339 += 1 };
  s4 -> s3 [116, 65535] { R339 += 1 };
  s5 -> s3 [0, 45] { R339 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R339 += 1 };
  s5 -> s3 [47, 110] { R339 += 1 };
  s5 -> s6 [111, 111] { R339 += 1 };
  s5 -> s3 [112, 65535] { R339 += 1 };
  s6 -> s3 [0, 45] { R339 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R339 += 1 };
  s6 -> s3 [47, 98] { R339 += 1 };
  s6 -> s7 [99, 99] { R339 += 1 };
  s6 -> s3 [100, 65535] { R339 += 1 };
  s7 -> s3 [0, 45] { R339 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R339 += 1 };
  s7 -> s3 [47, 106] { R339 += 1 };
  s7 -> s3 [108, 65535] { R339 += 1 };
  s8 -> s1 [0, 45] { R339 += 1 };
  s8 -> s2 [46, 46] { R339 += 1 };
  s8 -> s3 [47, 47] { R339 += 1 };
  s8 -> s1 [48, 110] { R339 += 1 };
  s8 -> s9 [111, 111] { R339 += 1 };
  s8 -> s1 [112, 65535] { R339 += 1 };
  s9 -> s1 [0, 45] { R339 += 1 };
  s9 -> s2 [46, 46] { R339 += 1 };
  s9 -> s3 [47, 47] { R339 += 1 };
  s9 -> s1 [48, 98] { R339 += 1 };
  s9 -> s10 [99, 99] { R339 += 1 };
  s9 -> s1 [100, 65535] { R339 += 1 };
  s10 -> s1 [0, 45] { R339 += 1 };
  s10 -> s2 [46, 46] { R339 += 1 };
  s10 -> s3 [47, 47] { R339 += 1 };
  s10 -> s1 [48, 106] { R339 += 1 };
  s10 -> s1 [108, 65535] { R339 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R340 += 1, R341 += 1 };
  s0 -> s1 [0, 65535] { R341 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R341 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R343 += 1, R195 += 1 };
  s0 -> s0 [0, 65535] { R342 += 1, R343 += 1 };
  s0 -> s2 [0, 65535] { R343 += 1, R194 += 1, R195 += 1 };
  s0 -> s3 [47, 47] { R343 += 1 };
  s0 -> s1 [48, 65535] { R343 += 1, R195 += 1 };
  s1 -> s1 [0, 46] { R343 += 1, R195 += 1 };
  s1 -> s3 [47, 47] { R343 += 1 };
  s1 -> s1 [48, 65535] { R343 += 1, R195 += 1 };
  s2 -> s1 [0, 46] { R343 += 1, R195 += 1 };
  s2 -> s2 [0, 65535] { R343 += 1, R194 += 1, R195 += 1 };
  s2 -> s3 [47, 47] { R343 += 1 };
  s2 -> s1 [48, 65535] { R343 += 1, R195 += 1 };
  s3 -> s3 [0, 65535] { R343 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R345 += 1, R311 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R344 += 1, R345 += 1 };
  s0 -> s2 [0, 65535] { R345 += 1, R310 += 1, R311 += 1 };
  s1 -> s1 [0, 65535] { R345 += 1, R311 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R345 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R345 += 1, R311 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R345 += 1, R310 += 1, R311 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R345 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R347 += 1, R312 += 1, R313 += 1 };
  s0 -> s2 [0, 65535] { R347 += 1, R313 += 1, R288 += 1, R289 += 1 };
  s0 -> s0 [0, 65535] { R346 += 1, R347 += 1 };
  s0 -> s3 [63, 63] { R347 += 1, R313 += 1, R289 += 1 };
  s1 -> s1 [0, 65535] { R347 += 1, R312 += 1, R313 += 1 };
  s1 -> s2 [0, 65535] { R347 += 1, R313 += 1, R288 += 1, R289 += 1 };
  s1 -> s3 [63, 63] { R347 += 1, R313 += 1, R289 += 1 };
  s2 -> s2 [0, 65535] { R347 += 1, R313 += 1, R288 += 1, R289 += 1 };
  s2 -> s3 [63, 63] { R347 += 1, R313 += 1, R289 += 1 };
  s3 -> s3 [0, 65535] { R347 += 1, R313 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R347 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R347 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R349 += 1, R314 += 1, R315 += 1 };
  s0 -> s2 [0, 65535] { R349 += 1, R315 += 1, R291 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R348 += 1, R349 += 1 };
  s0 -> s3 [0, 65535] { R349 += 1, R315 += 1, R290 += 1, R291 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R349 += 1, R314 += 1, R315 += 1 };
  s1 -> s2 [0, 65535] { R349 += 1, R315 += 1, R291 += 1, R8 += 1 };
  s1 -> s3 [0, 65535] { R349 += 1, R315 += 1, R290 += 1, R291 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R349 += 1 };
  s2 -> s6 [0, 65535] { R349 += 1, R315 += 1 };
  s2 -> s2 [0, 65535] { R349 += 1, R315 += 1, R291 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R349 += 1 };
  s3 -> s2 [0, 65535] { R349 += 1, R315 += 1, R291 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R349 += 1, R315 += 1, R290 += 1, R291 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R349 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R349 += 1 };
  s6 -> s6 [0, 65535] { R349 += 1, R315 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R351 += 1, R317 += 1, R293 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R350 += 1, R351 += 1 };
  s0 -> s2 [0, 65535] { R351 += 1, R317 += 1, R292 += 1, R293 += 1 };
  s0 -> s3 [0, 65535] { R351 += 1, R316 += 1, R317 += 1 };
  s1 -> s6 [0, 65535] { R351 += 1, R317 += 1 };
  s1 -> s5 [0, 65535] { R351 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R351 += 1, R317 += 1, R293 += 1, R0 += 1 };
  s2 -> s5 [0, 65535] { R351 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R351 += 1, R317 += 1, R293 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R351 += 1, R317 += 1, R292 += 1, R293 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R351 += 1, R317 += 1, R293 += 1, R0 += 1 };
  s3 -> s2 [0, 65535] { R351 += 1, R317 += 1, R292 += 1, R293 += 1 };
  s3 -> s3 [0, 65535] { R351 += 1, R316 += 1, R317 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R351 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R351 += 1, R317 += 1 };
  s6 -> s5 [0, 65535] { R351 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 37] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R353 += 1, R318 += 1, R319 += 1 };
  s0 -> s3 [0, 65535] { R353 += 1, R319 += 1, R295 += 1, R10 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R352 += 1, R353 += 1 };
  s0 -> s4 [0, 65535] { R353 += 1, R319 += 1, R294 += 1, R295 += 1 };
  s0 -> s5 [38, 38] { R353 += 1, R319 += 1, R295 += 1 };
  s0 -> s1 [39, 65535] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s1 -> s1 [0, 37] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s1 -> s5 [38, 38] { R353 += 1, R319 += 1, R295 += 1 };
  s1 -> s1 [39, 65535] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s2 -> s1 [0, 37] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R353 += 1, R318 += 1, R319 += 1 };
  s2 -> s3 [0, 65535] { R353 += 1, R319 += 1, R295 += 1, R10 += 1, R11 += 1 };
  s2 -> s4 [0, 65535] { R353 += 1, R319 += 1, R294 += 1, R295 += 1 };
  s2 -> s5 [38, 38] { R353 += 1, R319 += 1, R295 += 1 };
  s2 -> s1 [39, 65535] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s3 -> s1 [0, 37] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R353 += 1, R319 += 1, R295 += 1, R10 += 1, R11 += 1 };
  s3 -> s5 [38, 38] { R353 += 1, R319 += 1, R295 += 1 };
  s3 -> s1 [39, 65535] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s4 -> s1 [0, 37] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s4 -> s3 [0, 65535] { R353 += 1, R319 += 1, R295 += 1, R10 += 1, R11 += 1 };
  s4 -> s4 [0, 65535] { R353 += 1, R319 += 1, R294 += 1, R295 += 1 };
  s4 -> s5 [38, 38] { R353 += 1, R319 += 1, R295 += 1 };
  s4 -> s1 [39, 65535] { R353 += 1, R319 += 1, R295 += 1, R11 += 1 };
  s5 -> s6 [0, 65535] { R353 += 1, R319 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R353 += 1 };
  s5 -> s5 [0, 65535] { R353 += 1, R319 += 1, R295 += 1 };
  s6 -> s6 [0, 65535] { R353 += 1, R319 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R353 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R353 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 63] { R355 += 1, R321 += 1 };
  s0 -> s0 [0, 65535] { R354 += 1, R355 += 1 };
  s0 -> s2 [0, 65535] { R355 += 1, R320 += 1, R321 += 1 };
  s0 -> s3 [64, 64] { R355 += 1, R321 += 1 };
  s0 -> s1 [65, 65535] { R355 += 1, R321 += 1 };
  s1 -> s1 [0, 63] { R355 += 1, R321 += 1 };
  s1 -> s3 [64, 64] { R355 += 1, R321 += 1 };
  s1 -> s1 [65, 65535] { R355 += 1, R321 += 1 };
  s2 -> s1 [0, 63] { R355 += 1, R321 += 1 };
  s2 -> s2 [0, 65535] { R355 += 1, R320 += 1, R321 += 1 };
  s2 -> s3 [64, 64] { R355 += 1, R321 += 1 };
  s2 -> s1 [65, 65535] { R355 += 1, R321 += 1 };
  s3 -> s3 [0, 65535] { R355 += 1, R321 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R355 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R355 += 1 };
  accepting s3, s4, s5;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R357 += 1, R323 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R356 += 1, R357 += 1 };
  s0 -> s2 [0, 65535] { R357 += 1, R322 += 1, R323 += 1 };
  s1 -> s1 [0, 65535] { R357 += 1, R323 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R357 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R357 += 1, R323 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R357 += 1, R322 += 1, R323 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R357 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 36] { R359 += 1, R325 += 1, R297 += 1 };
  s0 -> s2 [0, 65535] { R359 += 1, R324 += 1, R325 += 1 };
  s0 -> s0 [0, 65535] { R358 += 1, R359 += 1 };
  s0 -> s3 [0, 65535] { R359 += 1, R325 += 1, R296 += 1, R297 += 1 };
  s0 -> s1 [38, 42] { R359 += 1, R325 += 1, R297 += 1 };
  s0 -> s1 [44, 57] { R359 += 1, R325 += 1, R297 += 1 };
  s0 -> s1 [59, 63] { R359 += 1, R325 += 1, R297 += 1 };
  s0 -> s1 [65, 65535] { R359 += 1, R325 += 1, R297 += 1 };
  s1 -> s1 [0, 36] { R359 += 1, R325 += 1, R297 += 1 };
  s1 -> s4 [0, 65535] { R359 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R359 += 1, R325 += 1 };
  s1 -> s1 [38, 42] { R359 += 1, R325 += 1, R297 += 1 };
  s1 -> s1 [44, 57] { R359 += 1, R325 += 1, R297 += 1 };
  s1 -> s1 [59, 63] { R359 += 1, R325 += 1, R297 += 1 };
  s1 -> s1 [65, 65535] { R359 += 1, R325 += 1, R297 += 1 };
  s2 -> s1 [0, 36] { R359 += 1, R325 += 1, R297 += 1 };
  s2 -> s2 [0, 65535] { R359 += 1, R324 += 1, R325 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R359 += 1, R325 += 1, R296 += 1, R297 += 1 };
  s2 -> s1 [38, 42] { R359 += 1, R325 += 1, R297 += 1 };
  s2 -> s1 [44, 57] { R359 += 1, R325 += 1, R297 += 1 };
  s2 -> s1 [59, 63] { R359 += 1, R325 += 1, R297 += 1 };
  s2 -> s1 [65, 65535] { R359 += 1, R325 += 1, R297 += 1 };
  s3 -> s1 [0, 36] { R359 += 1, R325 += 1, R297 += 1 };
  s3 -> s4 [0, 65535] { R359 += 1 };
  s3 -> s3 [0, 65535] { R359 += 1, R325 += 1, R296 += 1, R297 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [38, 42] { R359 += 1, R325 += 1, R297 += 1 };
  s3 -> s1 [44, 57] { R359 += 1, R325 += 1, R297 += 1 };
  s3 -> s1 [59, 63] { R359 += 1, R325 += 1, R297 += 1 };
  s3 -> s1 [65, 65535] { R359 += 1, R325 += 1, R297 += 1 };
  s4 -> s4 [0, 65535] { R359 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R361 += 1, R326 += 1, R327 += 1 };
  s0 -> s2 [0, 65535] { R361 += 1, R327 += 1, R299 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R360 += 1, R361 += 1 };
  s0 -> s3 [0, 65535] { R361 += 1, R327 += 1, R298 += 1, R299 += 1 };
  s1 -> s1 [0, 65535] { R361 += 1, R326 += 1, R327 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R361 += 1, R327 += 1, R299 += 1, R2 += 1 };
  s1 -> s3 [0, 65535] { R361 += 1, R327 += 1, R298 += 1, R299 += 1 };
  s2 -> s6 [0, 65535] { R361 += 1, R327 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R361 += 1, R327 += 1, R299 += 1, R2 += 1 };
  s2 -> s5 [0, 65535] { R361 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R361 += 1, R327 += 1, R299 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R361 += 1, R327 += 1, R298 += 1, R299 += 1 };
  s3 -> s5 [0, 65535] { R361 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R361 += 1 };
  s6 -> s6 [0, 65535] { R361 += 1, R327 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R361 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 43] { R363 += 1, R329 += 1, R301 += 1 };
  s0 -> s2 [0, 65535] { R363 += 1, R328 += 1, R329 += 1 };
  s0 -> s0 [0, 65535] { R362 += 1, R363 += 1 };
  s0 -> s3 [0, 65535] { R363 += 1, R329 += 1, R300 += 1, R301 += 1 };
  s0 -> s1 [45, 64] { R363 += 1, R329 += 1, R301 += 1 };
  s0 -> s1 [91, 65535] { R363 += 1, R329 += 1, R301 += 1 };
  s1 -> s1 [0, 43] { R363 += 1, R329 += 1, R301 += 1 };
  s1 -> s4 [0, 65535] { R363 += 1 };
  s1 -> s1 [0, 65535] { R363 += 1, R329 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [45, 64] { R363 += 1, R329 += 1, R301 += 1 };
  s1 -> s1 [91, 65535] { R363 += 1, R329 += 1, R301 += 1 };
  s2 -> s1 [0, 43] { R363 += 1, R329 += 1, R301 += 1 };
  s2 -> s2 [0, 65535] { R363 += 1, R328 += 1, R329 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R363 += 1, R329 += 1, R300 += 1, R301 += 1 };
  s2 -> s1 [45, 64] { R363 += 1, R329 += 1, R301 += 1 };
  s2 -> s1 [91, 65535] { R363 += 1, R329 += 1, R301 += 1 };
  s3 -> s1 [0, 43] { R363 += 1, R329 += 1, R301 += 1 };
  s3 -> s4 [0, 65535] { R363 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R363 += 1, R329 += 1, R300 += 1, R301 += 1 };
  s3 -> s1 [45, 64] { R363 += 1, R329 += 1, R301 += 1 };
  s3 -> s1 [91, 65535] { R363 += 1, R329 += 1, R301 += 1 };
  s4 -> s4 [0, 65535] { R363 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R365 += 1, R330 += 1, R331 += 1 };
  s0 -> s2 [0, 65535] { R365 += 1, R331 += 1, R303 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R364 += 1, R365 += 1 };
  s0 -> s3 [0, 65535] { R365 += 1, R331 += 1, R302 += 1, R303 += 1 };
  s1 -> s1 [0, 65535] { R365 += 1, R330 += 1, R331 += 1 };
  s1 -> s2 [0, 65535] { R365 += 1, R331 += 1, R303 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R365 += 1, R331 += 1, R302 += 1, R303 += 1 };
  s2 -> s2 [0, 65535] { R365 += 1, R331 += 1, R303 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R365 += 1, R331 += 1 };
  s2 -> s4 [0, 65535] { R365 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R365 += 1, R331 += 1, R303 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R365 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R365 += 1, R331 += 1, R302 += 1, R303 += 1 };
  s4 -> s4 [0, 65535] { R365 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R365 += 1, R331 += 1 };
  s6 -> s4 [0, 65535] { R365 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 57] { R367 += 1, R333 += 1, R305 += 1 };
  s0 -> s2 [0, 65535] { R367 += 1, R333 += 1, R305 += 1, R192 += 1 };
  s0 -> s3 [0, 65535] { R367 += 1, R332 += 1, R333 += 1 };
  s0 -> s4 [0, 65535] { R367 += 1, R333 += 1, R304 += 1, R305 += 1 };
  s0 -> s0 [0, 65535] { R366 += 1, R367 += 1 };
  s0 -> s5 [58, 58] { R367 += 1, R333 += 1, R305 += 1 };
  s0 -> s1 [59, 65535] { R367 += 1, R333 += 1, R305 += 1 };
  s1 -> s1 [0, 57] { R367 += 1, R333 += 1, R305 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R367 += 1, R333 += 1 };
  s1 -> s7 [0, 65535] { R367 += 1 };
  s1 -> s5 [58, 58] { R367 += 1, R333 += 1, R305 += 1 };
  s1 -> s1 [59, 65535] { R367 += 1, R333 += 1, R305 += 1 };
  s2 -> s1 [0, 57] { R367 += 1, R333 += 1, R305 += 1 };
  s2 -> s2 [0, 65535] { R367 += 1, R333 += 1, R305 += 1, R192 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R367 += 1, R333 += 1 };
  s2 -> s7 [0, 65535] { R367 += 1 };
  s2 -> s5 [58, 58] { R367 += 1, R333 += 1, R305 += 1 };
  s2 -> s1 [59, 65535] { R367 += 1, R333 += 1, R305 += 1 };
  s3 -> s1 [0, 57] { R367 += 1, R333 += 1, R305 += 1 };
  s3 -> s2 [0, 65535] { R367 += 1, R333 += 1, R305 += 1, R192 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R367 += 1, R332 += 1, R333 += 1 };
  s3 -> s4 [0, 65535] { R367 += 1, R333 += 1, R304 += 1, R305 += 1 };
  s3 -> s5 [58, 58] { R367 += 1, R333 += 1, R305 += 1 };
  s3 -> s1 [59, 65535] { R367 += 1, R333 += 1, R305 += 1 };
  s4 -> s1 [0, 57] { R367 += 1, R333 += 1, R305 += 1 };
  s4 -> s2 [0, 65535] { R367 += 1, R333 += 1, R305 += 1, R192 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R367 += 1, R333 += 1, R304 += 1, R305 += 1 };
  s4 -> s7 [0, 65535] { R367 += 1 };
  s4 -> s5 [58, 58] { R367 += 1, R333 += 1, R305 += 1 };
  s4 -> s1 [59, 65535] { R367 += 1, R333 += 1, R305 += 1 };
  s5 -> s5 [0, 65535] { R367 += 1, R333 += 1, R305 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R367 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R367 += 1, R333 += 1 };
  s8 -> s7 [0, 65535] { R367 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 90] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s0 -> s2 [0, 65535] { R369 += 1, R334 += 1, R335 += 1 };
  s0 -> s0 [0, 65535] { R368 += 1, R369 += 1 };
  s0 -> s3 [0, 65535] { R369 += 1, R335 += 1, R306 += 1, R307 += 1 };
  s0 -> s4 [0, 65535] { R369 += 1, R335 += 1, R307 += 1, R284 += 1, R285 += 1 };
  s0 -> s5 [91, 91] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s0 -> s1 [92, 65535] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s1 -> s6 [0, 65535] { R369 += 1 };
  s1 -> s1 [0, 65535] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s1 -> s9 [0, 65535] { R369 += 1, R335 += 1, R307 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R369 += 1, R335 += 1 };
  s2 -> s1 [0, 90] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s2 -> s2 [0, 65535] { R369 += 1, R334 += 1, R335 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R369 += 1, R335 += 1, R306 += 1, R307 += 1 };
  s2 -> s4 [0, 65535] { R369 += 1, R335 += 1, R307 += 1, R284 += 1, R285 += 1 };
  s2 -> s5 [91, 91] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s2 -> s1 [92, 65535] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s3 -> s1 [0, 90] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s3 -> s6 [0, 65535] { R369 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R369 += 1, R335 += 1, R306 += 1, R307 += 1 };
  s3 -> s4 [0, 65535] { R369 += 1, R335 += 1, R307 += 1, R284 += 1, R285 += 1 };
  s3 -> s5 [91, 91] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s3 -> s1 [92, 65535] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s4 -> s1 [0, 90] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s4 -> s6 [0, 65535] { R369 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R369 += 1, R335 += 1 };
  s4 -> s4 [0, 65535] { R369 += 1, R335 += 1, R307 += 1, R284 += 1, R285 += 1 };
  s4 -> s5 [91, 91] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s4 -> s1 [92, 65535] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s5 -> s1 [0, 65535] { R369 += 1, R335 += 1, R307 += 1, R285 += 1 };
  s6 -> s6 [0, 65535] { R369 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R369 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R369 += 1, R335 += 1 };
  s9 -> s6 [0, 65535] { R369 += 1 };
  s9 -> s9 [0, 65535] { R369 += 1, R335 += 1, R307 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R369 += 1, R335 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R371 += 1, R336 += 1, R337 += 1 };
  s0 -> s0 [0, 65535] { R370 += 1, R371 += 1 };
  s0 -> s2 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R287 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R286 += 1, R287 += 1 };
  s0 -> s4 [0, 65535] { R371 += 1, R337 += 1, R308 += 1, R309 += 1 };
  s1 -> s1 [0, 65535] { R371 += 1, R336 += 1, R337 += 1 };
  s1 -> s2 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R287 += 1, R7 += 1 };
  s1 -> s3 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R286 += 1, R287 += 1 };
  s1 -> s4 [0, 65535] { R371 += 1, R337 += 1, R308 += 1, R309 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R287 += 1, R7 += 1 };
  s2 -> s7 [0, 65535] { R371 += 1, R337 += 1 };
  s2 -> s5 [0, 65535] { R371 += 1 };
  s2 -> s8 [0, 65535] { R371 += 1, R337 += 1, R309 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R287 += 1, R7 += 1 };
  s3 -> s7 [0, 65535] { R371 += 1, R337 += 1 };
  s3 -> s5 [0, 65535] { R371 += 1 };
  s3 -> s3 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R286 += 1, R287 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R287 += 1, R7 += 1 };
  s4 -> s5 [0, 65535] { R371 += 1 };
  s4 -> s4 [0, 65535] { R371 += 1, R337 += 1, R308 += 1, R309 += 1 };
  s4 -> s3 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R286 += 1, R287 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R371 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R371 += 1, R337 += 1 };
  s7 -> s5 [0, 65535] { R371 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R371 += 1, R337 += 1 };
  s8 -> s5 [0, 65535] { R371 += 1 };
  s8 -> s8 [0, 65535] { R371 += 1, R337 += 1, R309 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R295 && R4 = R309 && R5 = R319 && R6 = R371 && R10 = 0 && R194 = 0 && R195 = R337 && R288 = 0 && R289 = 1 && R290 = 0 && R291 = 1 && R292 = 1 && R293 = R295 && R294 = 1 && R296 = 0 && R297 = 9 && R298 = 0 && R299 = 9 && R300 = 10 && R301 = R309 && R302 = 10 && R303 = R309 && R304 = 10 && R305 = R309 && R306 = 10 && R307 = R309 && R308 = 10 && R310 - R337 = 1 && R311 = R319 && R312 - R337 = 1 && R313 = R319 && R314 - R337 = 1 && R315 = R319 && R316 - R337 = 1 && R317 = R319 && R318 - R337 = 1 && R320 = 0 && R321 = R337 && R322 = 0 && R323 = R337 && R324 = 0 && R325 = R337 && R326 = 0 && R327 = R337 && R328 = 0 && R329 = R337 && R330 = 0 && R331 = R337 && R332 = 0 && R333 = R337 && R334 = 0 && R335 = R337 && R336 = 0 && R338 = 10 && R339 = R371 && R340 = 10 && R341 = R371 && R342 = 10 && R343 = R371 && R344 = 10 && R345 = R371 && R346 = 10 && R347 = R371 && R348 = 10 && R349 = R371 && R350 = 10 && R351 = R371 && R352 = 10 && R353 = R371 && R354 = 10 && R355 = R371 && R356 = 10 && R357 = R371 && R358 = 10 && R359 = R371 && R360 = 10 && R361 = R371 && R362 = 10 && R363 = R371 && R364 = 10 && R365 = R371 && R366 = 10 && R367 = R371 && R368 = 10 && R369 = R371 && R370 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && -1 < R11 && R192 < 1 && 0 < R295 && 9 < R309 && R337 < R319 && -1 < R337 && 9 < R371 && (R284 != 0 || ((R7 != 0 || ((R1 != R285 || R285 = 1 || R285 < 0) && (R1 = R285 || R285 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R285 || R285 = 1 || R285 < 0) && (R285 != 1 || -1 < R1) && (R1 = R285 || R285 = 1))))) && (R286 != 0 || ((R7 != 0 || ((R1 != R287 || R287 = 1 || R287 < 0) && (R1 = R287 || R287 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R287 || R287 = 1 || R287 < 0) && (R287 != 1 || -1 < R1) && (R1 = R287 || R287 = 1))))) && (R284 = 0 || (R7 = 0 && R1 < 0)) && (R286 = 0 || (R7 = 0 && R1 < 0));
// End of Parikh automata intersection problem
