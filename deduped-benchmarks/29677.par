// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R2, R3, R399, R4, R402, R404, R405, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R559 += 1 };
  s0 -> s0 [0, 65535] { R558 += 1, R559 += 1 };
  s0 -> s2 [46, 46] { R559 += 1 };
  s0 -> s3 [47, 47] { R559 += 1 };
  s0 -> s1 [48, 65535] { R559 += 1 };
  s1 -> s1 [0, 45] { R559 += 1 };
  s1 -> s2 [46, 46] { R559 += 1 };
  s1 -> s3 [47, 47] { R559 += 1 };
  s1 -> s1 [48, 65535] { R559 += 1 };
  s2 -> s1 [0, 45] { R559 += 1 };
  s2 -> s2 [46, 46] { R559 += 1 };
  s2 -> s3 [47, 47] { R559 += 1 };
  s2 -> s1 [48, 114] { R559 += 1 };
  s2 -> s8 [115, 115] { R559 += 1 };
  s2 -> s1 [116, 65535] { R559 += 1 };
  s3 -> s3 [0, 45] { R559 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R559 += 1 };
  s3 -> s3 [47, 65535] { R559 += 1 };
  s4 -> s3 [0, 45] { R559 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R559 += 1 };
  s4 -> s3 [47, 114] { R559 += 1 };
  s4 -> s5 [115, 115] { R559 += 1 };
  s4 -> s3 [116, 65535] { R559 += 1 };
  s5 -> s3 [0, 45] { R559 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R559 += 1 };
  s5 -> s3 [47, 110] { R559 += 1 };
  s5 -> s6 [111, 111] { R559 += 1 };
  s5 -> s3 [112, 65535] { R559 += 1 };
  s6 -> s3 [0, 45] { R559 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R559 += 1 };
  s6 -> s3 [47, 98] { R559 += 1 };
  s6 -> s7 [99, 99] { R559 += 1 };
  s6 -> s3 [100, 65535] { R559 += 1 };
  s7 -> s3 [0, 45] { R559 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R559 += 1 };
  s7 -> s3 [47, 106] { R559 += 1 };
  s7 -> s3 [108, 65535] { R559 += 1 };
  s8 -> s1 [0, 45] { R559 += 1 };
  s8 -> s2 [46, 46] { R559 += 1 };
  s8 -> s3 [47, 47] { R559 += 1 };
  s8 -> s1 [48, 110] { R559 += 1 };
  s8 -> s9 [111, 111] { R559 += 1 };
  s8 -> s1 [112, 65535] { R559 += 1 };
  s9 -> s1 [0, 45] { R559 += 1 };
  s9 -> s2 [46, 46] { R559 += 1 };
  s9 -> s3 [47, 47] { R559 += 1 };
  s9 -> s1 [48, 98] { R559 += 1 };
  s9 -> s10 [99, 99] { R559 += 1 };
  s9 -> s1 [100, 65535] { R559 += 1 };
  s10 -> s1 [0, 45] { R559 += 1 };
  s10 -> s2 [46, 46] { R559 += 1 };
  s10 -> s3 [47, 47] { R559 += 1 };
  s10 -> s1 [48, 106] { R559 += 1 };
  s10 -> s1 [108, 65535] { R559 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R561 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R560 += 1, R561 += 1 };
  s1 -> s1 [0, 65535] { R561 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R563 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R563 += 1, R404 += 1, R405 += 1 };
  s0 -> s0 [0, 65535] { R562 += 1, R563 += 1 };
  s0 -> s3 [47, 47] { R563 += 1 };
  s0 -> s1 [48, 65535] { R563 += 1, R405 += 1 };
  s1 -> s1 [0, 46] { R563 += 1, R405 += 1 };
  s1 -> s3 [47, 47] { R563 += 1 };
  s1 -> s1 [48, 65535] { R563 += 1, R405 += 1 };
  s2 -> s1 [0, 46] { R563 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R563 += 1, R404 += 1, R405 += 1 };
  s2 -> s3 [47, 47] { R563 += 1 };
  s2 -> s1 [48, 65535] { R563 += 1, R405 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R563 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R564 += 1, R565 += 1 };
  s0 -> s1 [0, 65535] { R565 += 1, R528 += 1, R529 += 1 };
  s0 -> s2 [0, 65535] { R565 += 1, R529 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R565 += 1, R528 += 1, R529 += 1 };
  s1 -> s2 [0, 65535] { R565 += 1, R529 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R565 += 1, R529 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R565 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R565 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R567 += 1, R530 += 1, R531 += 1 };
  s0 -> s0 [0, 65535] { R566 += 1, R567 += 1 };
  s0 -> s2 [0, 65535] { R567 += 1, R531 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [63, 63] { R567 += 1, R531 += 1, R505 += 1 };
  s1 -> s1 [0, 65535] { R567 += 1, R530 += 1, R531 += 1 };
  s1 -> s2 [0, 65535] { R567 += 1, R531 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [63, 63] { R567 += 1, R531 += 1, R505 += 1 };
  s2 -> s2 [0, 65535] { R567 += 1, R531 += 1, R504 += 1, R505 += 1 };
  s2 -> s3 [63, 63] { R567 += 1, R531 += 1, R505 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R567 += 1, R531 += 1 };
  s3 -> s5 [0, 65535] { R567 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R567 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R569 += 1, R532 += 1, R533 += 1 };
  s0 -> s2 [0, 65535] { R569 += 1, R533 += 1, R507 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R568 += 1, R569 += 1 };
  s0 -> s3 [0, 65535] { R569 += 1, R533 += 1, R506 += 1, R507 += 1 };
  s1 -> s1 [0, 65535] { R569 += 1, R532 += 1, R533 += 1 };
  s1 -> s2 [0, 65535] { R569 += 1, R533 += 1, R507 += 1, R8 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R569 += 1, R533 += 1, R506 += 1, R507 += 1 };
  s2 -> s2 [0, 65535] { R569 += 1, R533 += 1, R507 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R569 += 1 };
  s2 -> s6 [0, 65535] { R569 += 1, R533 += 1 };
  s3 -> s2 [0, 65535] { R569 += 1, R533 += 1, R507 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R569 += 1 };
  s3 -> s3 [0, 65535] { R569 += 1, R533 += 1, R506 += 1, R507 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R569 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R569 += 1 };
  s6 -> s6 [0, 65535] { R569 += 1, R533 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R571 += 1, R535 += 1, R508 += 1, R509 += 1 };
  s0 -> s0 [0, 65535] { R570 += 1, R571 += 1 };
  s0 -> s2 [0, 65535] { R571 += 1, R535 += 1, R509 += 1, R0 += 1 };
  s0 -> s3 [0, 65535] { R571 += 1, R534 += 1, R535 += 1 };
  s1 -> s5 [0, 65535] { R571 += 1 };
  s1 -> s1 [0, 65535] { R571 += 1, R535 += 1, R508 += 1, R509 += 1 };
  s1 -> s2 [0, 65535] { R571 += 1, R535 += 1, R509 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R571 += 1 };
  s2 -> s6 [0, 65535] { R571 += 1, R535 += 1 };
  s2 -> s2 [0, 65535] { R571 += 1, R535 += 1, R509 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R571 += 1, R535 += 1, R508 += 1, R509 += 1 };
  s3 -> s2 [0, 65535] { R571 += 1, R535 += 1, R509 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R571 += 1, R534 += 1, R535 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R571 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R571 += 1 };
  s6 -> s6 [0, 65535] { R571 += 1, R535 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 58] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R573 += 1, R537 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R572 += 1, R573 += 1 };
  s0 -> s3 [0, 65535] { R573 += 1, R537 += 1, R511 += 1, R10 += 1, R11 += 1 };
  s0 -> s4 [0, 65535] { R573 += 1, R536 += 1, R537 += 1 };
  s0 -> s5 [59, 59] { R573 += 1, R537 += 1, R511 += 1 };
  s0 -> s1 [60, 65535] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s1 -> s1 [0, 58] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s1 -> s5 [59, 59] { R573 += 1, R537 += 1, R511 += 1 };
  s1 -> s1 [60, 65535] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s2 -> s1 [0, 58] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R573 += 1, R537 += 1, R510 += 1, R511 += 1 };
  s2 -> s3 [0, 65535] { R573 += 1, R537 += 1, R511 += 1, R10 += 1, R11 += 1 };
  s2 -> s5 [59, 59] { R573 += 1, R537 += 1, R511 += 1 };
  s2 -> s1 [60, 65535] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s3 -> s1 [0, 58] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R573 += 1, R537 += 1, R511 += 1, R10 += 1, R11 += 1 };
  s3 -> s5 [59, 59] { R573 += 1, R537 += 1, R511 += 1 };
  s3 -> s1 [60, 65535] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s4 -> s1 [0, 58] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s4 -> s2 [0, 65535] { R573 += 1, R537 += 1, R510 += 1, R511 += 1 };
  s4 -> s3 [0, 65535] { R573 += 1, R537 += 1, R511 += 1, R10 += 1, R11 += 1 };
  s4 -> s4 [0, 65535] { R573 += 1, R536 += 1, R537 += 1 };
  s4 -> s5 [59, 59] { R573 += 1, R537 += 1, R511 += 1 };
  s4 -> s1 [60, 65535] { R573 += 1, R537 += 1, R511 += 1, R11 += 1 };
  s5 -> s5 [0, 65535] { R573 += 1, R537 += 1, R511 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R573 += 1, R537 += 1 };
  s5 -> s8 [0, 65535] { R573 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R573 += 1, R537 += 1 };
  s7 -> s8 [0, 65535] { R573 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R573 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 37] { R575 += 1, R539 += 1, R513 += 1 };
  s0 -> s2 [0, 65535] { R575 += 1, R539 += 1, R512 += 1, R513 += 1 };
  s0 -> s3 [0, 65535] { R575 += 1, R538 += 1, R539 += 1 };
  s0 -> s0 [0, 65535] { R574 += 1, R575 += 1 };
  s0 -> s4 [0, 65535] { R575 += 1, R539 += 1, R513 += 1, R399 += 1 };
  s0 -> s5 [38, 38] { R575 += 1, R539 += 1, R513 += 1 };
  s0 -> s1 [39, 65535] { R575 += 1, R539 += 1, R513 += 1 };
  s1 -> s1 [0, 37] { R575 += 1, R539 += 1, R513 += 1 };
  s1 -> s6 [0, 65535] { R575 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R575 += 1, R539 += 1 };
  s1 -> s5 [38, 38] { R575 += 1, R539 += 1, R513 += 1 };
  s1 -> s1 [39, 65535] { R575 += 1, R539 += 1, R513 += 1 };
  s2 -> s1 [0, 37] { R575 += 1, R539 += 1, R513 += 1 };
  s2 -> s6 [0, 65535] { R575 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R575 += 1, R539 += 1, R512 += 1, R513 += 1 };
  s2 -> s4 [0, 65535] { R575 += 1, R539 += 1, R513 += 1, R399 += 1 };
  s2 -> s5 [38, 38] { R575 += 1, R539 += 1, R513 += 1 };
  s2 -> s1 [39, 65535] { R575 += 1, R539 += 1, R513 += 1 };
  s3 -> s1 [0, 37] { R575 += 1, R539 += 1, R513 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s2 [0, 65535] { R575 += 1, R539 += 1, R512 += 1, R513 += 1 };
  s3 -> s3 [0, 65535] { R575 += 1, R538 += 1, R539 += 1 };
  s3 -> s4 [0, 65535] { R575 += 1, R539 += 1, R513 += 1, R399 += 1 };
  s3 -> s5 [38, 38] { R575 += 1, R539 += 1, R513 += 1 };
  s3 -> s1 [39, 65535] { R575 += 1, R539 += 1, R513 += 1 };
  s4 -> s1 [0, 37] { R575 += 1, R539 += 1, R513 += 1 };
  s4 -> s6 [0, 65535] { R575 += 1 };
  s4 -> s7 [0, 65535] { R575 += 1, R539 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R575 += 1, R539 += 1, R513 += 1, R399 += 1 };
  s4 -> s5 [38, 38] { R575 += 1, R539 += 1, R513 += 1 };
  s4 -> s1 [39, 65535] { R575 += 1, R539 += 1, R513 += 1 };
  s5 -> s5 [0, 65535] { R575 += 1, R539 += 1, R513 += 1 };
  s6 -> s6 [0, 65535] { R575 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R575 += 1 };
  s7 -> s7 [0, 65535] { R575 += 1, R539 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 63] { R577 += 1, R541 += 1 };
  s0 -> s2 [0, 65535] { R577 += 1, R540 += 1, R541 += 1 };
  s0 -> s0 [0, 65535] { R576 += 1, R577 += 1 };
  s0 -> s3 [64, 64] { R577 += 1, R541 += 1 };
  s0 -> s1 [65, 65535] { R577 += 1, R541 += 1 };
  s1 -> s1 [0, 63] { R577 += 1, R541 += 1 };
  s1 -> s3 [64, 64] { R577 += 1, R541 += 1 };
  s1 -> s1 [65, 65535] { R577 += 1, R541 += 1 };
  s2 -> s1 [0, 63] { R577 += 1, R541 += 1 };
  s2 -> s2 [0, 65535] { R577 += 1, R540 += 1, R541 += 1 };
  s2 -> s3 [64, 64] { R577 += 1, R541 += 1 };
  s2 -> s1 [65, 65535] { R577 += 1, R541 += 1 };
  s3 -> s3 [0, 65535] { R577 += 1, R541 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R577 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R577 += 1 };
  accepting s3, s4, s5;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R578 += 1, R579 += 1 };
  s0 -> s1 [0, 65535] { R579 += 1, R542 += 1, R543 += 1 };
  s0 -> s2 [0, 65535] { R579 += 1, R543 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R579 += 1, R542 += 1, R543 += 1 };
  s1 -> s2 [0, 65535] { R579 += 1, R543 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R579 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R579 += 1, R543 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R579 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 36] { R581 += 1, R545 += 1, R515 += 1 };
  s0 -> s0 [0, 65535] { R580 += 1, R581 += 1 };
  s0 -> s2 [0, 65535] { R581 += 1, R544 += 1, R545 += 1 };
  s0 -> s3 [0, 65535] { R581 += 1, R545 += 1, R514 += 1, R515 += 1 };
  s0 -> s1 [38, 42] { R581 += 1, R545 += 1, R515 += 1 };
  s0 -> s1 [44, 57] { R581 += 1, R545 += 1, R515 += 1 };
  s0 -> s1 [59, 63] { R581 += 1, R545 += 1, R515 += 1 };
  s0 -> s1 [65, 65535] { R581 += 1, R545 += 1, R515 += 1 };
  s1 -> s1 [0, 36] { R581 += 1, R545 += 1, R515 += 1 };
  s1 -> s1 [0, 65535] { R581 += 1, R545 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R581 += 1 };
  s1 -> s1 [38, 42] { R581 += 1, R545 += 1, R515 += 1 };
  s1 -> s1 [44, 57] { R581 += 1, R545 += 1, R515 += 1 };
  s1 -> s1 [59, 63] { R581 += 1, R545 += 1, R515 += 1 };
  s1 -> s1 [65, 65535] { R581 += 1, R545 += 1, R515 += 1 };
  s2 -> s1 [0, 36] { R581 += 1, R545 += 1, R515 += 1 };
  s2 -> s2 [0, 65535] { R581 += 1, R544 += 1, R545 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R581 += 1, R545 += 1, R514 += 1, R515 += 1 };
  s2 -> s1 [38, 42] { R581 += 1, R545 += 1, R515 += 1 };
  s2 -> s1 [44, 57] { R581 += 1, R545 += 1, R515 += 1 };
  s2 -> s1 [59, 63] { R581 += 1, R545 += 1, R515 += 1 };
  s2 -> s1 [65, 65535] { R581 += 1, R545 += 1, R515 += 1 };
  s3 -> s1 [0, 36] { R581 += 1, R545 += 1, R515 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R581 += 1 };
  s3 -> s3 [0, 65535] { R581 += 1, R545 += 1, R514 += 1, R515 += 1 };
  s3 -> s1 [38, 42] { R581 += 1, R545 += 1, R515 += 1 };
  s3 -> s1 [44, 57] { R581 += 1, R545 += 1, R515 += 1 };
  s3 -> s1 [59, 63] { R581 += 1, R545 += 1, R515 += 1 };
  s3 -> s1 [65, 65535] { R581 += 1, R545 += 1, R515 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R581 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R583 += 1, R547 += 1, R516 += 1, R517 += 1 };
  s0 -> s2 [0, 65535] { R583 += 1, R547 += 1, R517 += 1, R2 += 1 };
  s0 -> s3 [0, 65535] { R583 += 1, R546 += 1, R547 += 1 };
  s0 -> s0 [0, 65535] { R582 += 1, R583 += 1 };
  s1 -> s1 [0, 65535] { R583 += 1, R547 += 1, R516 += 1, R517 += 1 };
  s1 -> s2 [0, 65535] { R583 += 1, R547 += 1, R517 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R583 += 1 };
  s2 -> s5 [0, 65535] { R583 += 1, R547 += 1 };
  s2 -> s2 [0, 65535] { R583 += 1, R547 += 1, R517 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R583 += 1 };
  s3 -> s1 [0, 65535] { R583 += 1, R547 += 1, R516 += 1, R517 += 1 };
  s3 -> s2 [0, 65535] { R583 += 1, R547 += 1, R517 += 1, R2 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R583 += 1, R546 += 1, R547 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R583 += 1, R547 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R583 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R583 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 43] { R585 += 1, R549 += 1, R519 += 1 };
  s0 -> s0 [0, 65535] { R584 += 1, R585 += 1 };
  s0 -> s2 [0, 65535] { R585 += 1, R548 += 1, R549 += 1 };
  s0 -> s3 [0, 65535] { R585 += 1, R549 += 1, R518 += 1, R519 += 1 };
  s0 -> s1 [45, 64] { R585 += 1, R549 += 1, R519 += 1 };
  s0 -> s1 [91, 65535] { R585 += 1, R549 += 1, R519 += 1 };
  s1 -> s1 [0, 43] { R585 += 1, R549 += 1, R519 += 1 };
  s1 -> s4 [0, 65535] { R585 += 1 };
  s1 -> s1 [0, 65535] { R585 += 1, R549 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [45, 64] { R585 += 1, R549 += 1, R519 += 1 };
  s1 -> s1 [91, 65535] { R585 += 1, R549 += 1, R519 += 1 };
  s2 -> s1 [0, 43] { R585 += 1, R549 += 1, R519 += 1 };
  s2 -> s2 [0, 65535] { R585 += 1, R548 += 1, R549 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R585 += 1, R549 += 1, R518 += 1, R519 += 1 };
  s2 -> s1 [45, 64] { R585 += 1, R549 += 1, R519 += 1 };
  s2 -> s1 [91, 65535] { R585 += 1, R549 += 1, R519 += 1 };
  s3 -> s1 [0, 43] { R585 += 1, R549 += 1, R519 += 1 };
  s3 -> s4 [0, 65535] { R585 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R585 += 1, R549 += 1, R518 += 1, R519 += 1 };
  s3 -> s1 [45, 64] { R585 += 1, R549 += 1, R519 += 1 };
  s3 -> s1 [91, 65535] { R585 += 1, R549 += 1, R519 += 1 };
  s4 -> s4 [0, 65535] { R585 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R586 += 1, R587 += 1 };
  s0 -> s1 [0, 65535] { R587 += 1, R551 += 1, R521 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R587 += 1, R550 += 1, R551 += 1 };
  s0 -> s3 [0, 65535] { R587 += 1, R551 += 1, R520 += 1, R521 += 1 };
  s1 -> s6 [0, 65535] { R587 += 1, R551 += 1 };
  s1 -> s1 [0, 65535] { R587 += 1, R551 += 1, R521 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R587 += 1 };
  s2 -> s1 [0, 65535] { R587 += 1, R551 += 1, R521 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R587 += 1, R550 += 1, R551 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R587 += 1, R551 += 1, R520 += 1, R521 += 1 };
  s3 -> s1 [0, 65535] { R587 += 1, R551 += 1, R521 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R587 += 1, R551 += 1, R520 += 1, R521 += 1 };
  s3 -> s5 [0, 65535] { R587 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R587 += 1 };
  s6 -> s6 [0, 65535] { R587 += 1, R551 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R587 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 57] { R589 += 1, R553 += 1, R523 += 1 };
  s0 -> s0 [0, 65535] { R588 += 1, R589 += 1 };
  s0 -> s2 [0, 65535] { R589 += 1, R553 += 1, R523 += 1, R402 += 1 };
  s0 -> s3 [0, 65535] { R589 += 1, R553 += 1, R522 += 1, R523 += 1 };
  s0 -> s4 [0, 65535] { R589 += 1, R552 += 1, R553 += 1 };
  s0 -> s5 [58, 58] { R589 += 1, R553 += 1, R523 += 1 };
  s0 -> s1 [59, 65535] { R589 += 1, R553 += 1, R523 += 1 };
  s1 -> s1 [0, 57] { R589 += 1, R553 += 1, R523 += 1 };
  s1 -> s1 [0, 65535] { R589 += 1, R553 += 1 };
  s1 -> s7 [0, 65535] { R589 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [58, 58] { R589 += 1, R553 += 1, R523 += 1 };
  s1 -> s1 [59, 65535] { R589 += 1, R553 += 1, R523 += 1 };
  s2 -> s1 [0, 57] { R589 += 1, R553 += 1, R523 += 1 };
  s2 -> s8 [0, 65535] { R589 += 1, R553 += 1 };
  s2 -> s2 [0, 65535] { R589 += 1, R553 += 1, R523 += 1, R402 += 1 };
  s2 -> s7 [0, 65535] { R589 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [58, 58] { R589 += 1, R553 += 1, R523 += 1 };
  s2 -> s1 [59, 65535] { R589 += 1, R553 += 1, R523 += 1 };
  s3 -> s1 [0, 57] { R589 += 1, R553 += 1, R523 += 1 };
  s3 -> s2 [0, 65535] { R589 += 1, R553 += 1, R523 += 1, R402 += 1 };
  s3 -> s3 [0, 65535] { R589 += 1, R553 += 1, R522 += 1, R523 += 1 };
  s3 -> s7 [0, 65535] { R589 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [58, 58] { R589 += 1, R553 += 1, R523 += 1 };
  s3 -> s1 [59, 65535] { R589 += 1, R553 += 1, R523 += 1 };
  s4 -> s1 [0, 57] { R589 += 1, R553 += 1, R523 += 1 };
  s4 -> s2 [0, 65535] { R589 += 1, R553 += 1, R523 += 1, R402 += 1 };
  s4 -> s3 [0, 65535] { R589 += 1, R553 += 1, R522 += 1, R523 += 1 };
  s4 -> s4 [0, 65535] { R589 += 1, R552 += 1, R553 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [58, 58] { R589 += 1, R553 += 1, R523 += 1 };
  s4 -> s1 [59, 65535] { R589 += 1, R553 += 1, R523 += 1 };
  s5 -> s5 [0, 65535] { R589 += 1, R553 += 1, R523 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R589 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R589 += 1, R553 += 1 };
  s8 -> s7 [0, 65535] { R589 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 90] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s0 -> s2 [0, 65535] { R591 += 1, R555 += 1, R525 += 1, R500 += 1, R501 += 1 };
  s0 -> s3 [0, 65535] { R591 += 1, R555 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R590 += 1, R591 += 1 };
  s0 -> s4 [0, 65535] { R591 += 1, R554 += 1, R555 += 1 };
  s0 -> s5 [91, 91] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s0 -> s1 [92, 65535] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s1 -> s9 [0, 65535] { R591 += 1, R555 += 1, R525 += 1 };
  s1 -> s8 [0, 65535] { R591 += 1, R555 += 1 };
  s1 -> s7 [0, 65535] { R591 += 1 };
  s1 -> s1 [0, 65535] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R591 += 1, R555 += 1 };
  s2 -> s7 [0, 65535] { R591 += 1 };
  s2 -> s2 [0, 65535] { R591 += 1, R555 += 1, R525 += 1, R500 += 1, R501 += 1 };
  s2 -> s5 [91, 91] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s2 -> s1 [92, 65535] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s3 -> s1 [0, 90] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R591 += 1, R555 += 1, R524 += 1, R525 += 1 };
  s3 -> s7 [0, 65535] { R591 += 1 };
  s3 -> s2 [0, 65535] { R591 += 1, R555 += 1, R525 += 1, R500 += 1, R501 += 1 };
  s3 -> s5 [91, 91] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s3 -> s1 [92, 65535] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s4 -> s1 [0, 90] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s4 -> s2 [0, 65535] { R591 += 1, R555 += 1, R525 += 1, R500 += 1, R501 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R591 += 1, R555 += 1, R524 += 1, R525 += 1 };
  s4 -> s4 [0, 65535] { R591 += 1, R554 += 1, R555 += 1 };
  s4 -> s5 [91, 91] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s4 -> s1 [92, 65535] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s5 -> s1 [0, 65535] { R591 += 1, R555 += 1, R525 += 1, R501 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R591 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R591 += 1, R555 += 1 };
  s8 -> s7 [0, 65535] { R591 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R591 += 1, R555 += 1, R525 += 1 };
  s9 -> s8 [0, 65535] { R591 += 1, R555 += 1 };
  s9 -> s7 [0, 65535] { R591 += 1 };
  s9 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R593 += 1, R556 += 1, R557 += 1 };
  s0 -> s0 [0, 65535] { R592 += 1, R593 += 1 };
  s0 -> s2 [0, 65535] { R593 += 1, R557 += 1, R527 += 1, R503 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R593 += 1, R557 += 1, R526 += 1, R527 += 1 };
  s0 -> s4 [0, 65535] { R593 += 1, R557 += 1, R527 += 1, R502 += 1, R503 += 1 };
  s1 -> s1 [0, 65535] { R593 += 1, R556 += 1, R557 += 1 };
  s1 -> s2 [0, 65535] { R593 += 1, R557 += 1, R527 += 1, R503 += 1, R7 += 1 };
  s1 -> s3 [0, 65535] { R593 += 1, R557 += 1, R526 += 1, R527 += 1 };
  s1 -> s4 [0, 65535] { R593 += 1, R557 += 1, R527 += 1, R502 += 1, R503 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R593 += 1, R557 += 1, R527 += 1, R503 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R593 += 1, R557 += 1, R527 += 1 };
  s2 -> s5 [0, 65535] { R593 += 1, R557 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R593 += 1 };
  s3 -> s2 [0, 65535] { R593 += 1, R557 += 1, R527 += 1, R503 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R593 += 1, R557 += 1, R526 += 1, R527 += 1 };
  s3 -> s4 [0, 65535] { R593 += 1, R557 += 1, R527 += 1, R502 += 1, R503 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R593 += 1 };
  s4 -> s2 [0, 65535] { R593 += 1, R557 += 1, R527 += 1, R503 += 1, R7 += 1 };
  s4 -> s5 [0, 65535] { R593 += 1, R557 += 1 };
  s4 -> s4 [0, 65535] { R593 += 1, R557 += 1, R527 += 1, R502 += 1, R503 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R593 += 1 };
  s5 -> s5 [0, 65535] { R593 += 1, R557 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R593 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R593 += 1 };
  s8 -> s8 [0, 65535] { R593 += 1, R557 += 1, R527 += 1 };
  s8 -> s5 [0, 65535] { R593 += 1, R557 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R593 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R513 && R4 = R527 && R5 = R539 && R6 = R593 && R10 = 0 && R404 = 0 && R405 = R557 && R504 = 0 && R505 = 1 && R506 = 0 && R507 = 1 && R508 = 1 && R509 = R513 && R510 = 1 && R511 = R513 && R512 = 1 && R514 = 0 && R515 = 9 && R516 = 0 && R517 = 9 && R518 = 10 && R519 = R527 && R520 = 10 && R521 = R527 && R522 = 10 && R523 = R527 && R524 = 10 && R525 = R527 && R526 = 10 && R528 - R557 = 1 && R529 = R539 && R530 - R557 = 1 && R531 = R539 && R532 - R557 = 1 && R533 = R539 && R534 - R557 = 1 && R535 = R539 && R536 - R557 = 1 && R537 = R539 && R538 - R557 = 1 && R540 = 0 && R541 = R557 && R542 = 0 && R543 = R557 && R544 = 0 && R545 = R557 && R546 = 0 && R547 = R557 && R548 = 0 && R549 = R557 && R550 = 0 && R551 = R557 && R552 = 0 && R553 = R557 && R554 = 0 && R555 = R557 && R556 = 0 && R558 = 10 && R559 = R593 && R560 = 10 && R561 = R593 && R562 = 10 && R563 = R593 && R564 = 10 && R565 = R593 && R566 = 10 && R567 = R593 && R568 = 10 && R569 = R593 && R570 = 10 && R571 = R593 && R572 = 10 && R573 = R593 && R574 = 10 && R575 = R593 && R576 = 10 && R577 = R593 && R578 = 10 && R579 = R593 && R580 = 10 && R581 = R593 && R582 = 10 && R583 = R593 && R584 = 10 && R585 = R593 && R586 = 10 && R587 = R593 && R588 = 10 && R589 = R593 && R590 = 10 && R591 = R593 && R592 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && -1 < R11 && R399 < 1 && R402 < 1 && 0 < R513 && 9 < R527 && R557 < R539 && -1 < R557 && 9 < R593 && (R500 != 0 || ((R7 != 0 || ((R1 != R501 || R501 = 1 || R501 < 0) && (R1 = R501 || R501 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R501 || R501 = 1 || R501 < 0) && (R501 != 1 || -1 < R1) && (R1 = R501 || R501 = 1))))) && (R502 != 0 || ((R7 != 0 || ((R1 != R503 || R503 = 1 || R503 < 0) && (R1 = R503 || R503 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R503 || R503 = 1 || R503 < 0) && (R503 != 1 || -1 < R1) && (R1 = R503 || R503 = 1))))) && (R500 = 0 || (R7 = 0 && R1 < 0)) && (R502 = 0 || (R7 = 0 && R1 < 0));
// End of Parikh automata intersection problem
