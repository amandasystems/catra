// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R2, R2269, R2273, R2274, R2837, R2838, R2842, R2843, R2982, R2983, R2984, R2985, R2986, R2987, R2988, R2989, R2990, R2991, R2992, R2993, R2994, R2995, R2996, R2997, R2998, R2999, R3, R3000, R3001, R3002, R3003, R3004, R3005, R3006, R3007, R3008, R3009, R3010, R3011, R3012, R3013, R3014, R3015, R3016, R3017, R3018, R3019, R3020, R3021, R3022, R3023, R3024, R3025, R3026, R3027, R3028, R3029, R3030, R3031, R3032, R3033, R3034, R3035, R3036, R3037, R3038, R3039, R3040, R3041, R3042, R3043, R3044, R3045, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R3091, R3092, R3093, R3094, R3095, R3096, R3097, R3098, R3099, R3100, R3101, R3102, R3103, R3104, R3105, R3106, R3107, R3108, R3109, R3110, R3111, R3112, R3113, R3114, R3115, R3116, R3117, R3118, R3119, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R3071 += 1 };
  s0 -> s0 [0, 65535] { R3070 += 1, R3071 += 1 };
  s0 -> s2 [46, 46] { R3071 += 1 };
  s0 -> s3 [47, 47] { R3071 += 1 };
  s0 -> s1 [48, 65535] { R3071 += 1 };
  s1 -> s1 [0, 45] { R3071 += 1 };
  s1 -> s2 [46, 46] { R3071 += 1 };
  s1 -> s3 [47, 47] { R3071 += 1 };
  s1 -> s1 [48, 65535] { R3071 += 1 };
  s2 -> s1 [0, 45] { R3071 += 1 };
  s2 -> s2 [46, 46] { R3071 += 1 };
  s2 -> s3 [47, 47] { R3071 += 1 };
  s2 -> s1 [48, 114] { R3071 += 1 };
  s2 -> s8 [115, 115] { R3071 += 1 };
  s2 -> s1 [116, 65535] { R3071 += 1 };
  s3 -> s3 [0, 45] { R3071 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R3071 += 1 };
  s3 -> s3 [47, 65535] { R3071 += 1 };
  s4 -> s3 [0, 45] { R3071 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R3071 += 1 };
  s4 -> s3 [47, 114] { R3071 += 1 };
  s4 -> s5 [115, 115] { R3071 += 1 };
  s4 -> s3 [116, 65535] { R3071 += 1 };
  s5 -> s3 [0, 45] { R3071 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R3071 += 1 };
  s5 -> s3 [47, 110] { R3071 += 1 };
  s5 -> s6 [111, 111] { R3071 += 1 };
  s5 -> s3 [112, 65535] { R3071 += 1 };
  s6 -> s3 [0, 45] { R3071 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R3071 += 1 };
  s6 -> s3 [47, 98] { R3071 += 1 };
  s6 -> s7 [99, 99] { R3071 += 1 };
  s6 -> s3 [100, 65535] { R3071 += 1 };
  s7 -> s3 [0, 45] { R3071 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R3071 += 1 };
  s7 -> s3 [47, 106] { R3071 += 1 };
  s7 -> s3 [108, 65535] { R3071 += 1 };
  s8 -> s1 [0, 45] { R3071 += 1 };
  s8 -> s2 [46, 46] { R3071 += 1 };
  s8 -> s3 [47, 47] { R3071 += 1 };
  s8 -> s1 [48, 110] { R3071 += 1 };
  s8 -> s9 [111, 111] { R3071 += 1 };
  s8 -> s1 [112, 65535] { R3071 += 1 };
  s9 -> s1 [0, 45] { R3071 += 1 };
  s9 -> s2 [46, 46] { R3071 += 1 };
  s9 -> s3 [47, 47] { R3071 += 1 };
  s9 -> s1 [48, 98] { R3071 += 1 };
  s9 -> s10 [99, 99] { R3071 += 1 };
  s9 -> s1 [100, 65535] { R3071 += 1 };
  s10 -> s1 [0, 45] { R3071 += 1 };
  s10 -> s2 [46, 46] { R3071 += 1 };
  s10 -> s3 [47, 47] { R3071 += 1 };
  s10 -> s1 [48, 106] { R3071 += 1 };
  s10 -> s1 [108, 65535] { R3071 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3073 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R3072 += 1, R3073 += 1 };
  s1 -> s1 [0, 65535] { R3073 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R3075 += 1, R2843 += 1 };
  s0 -> s2 [0, 65535] { R3075 += 1, R2842 += 1, R2843 += 1 };
  s0 -> s0 [0, 65535] { R3074 += 1, R3075 += 1 };
  s0 -> s3 [47, 47] { R3075 += 1 };
  s0 -> s1 [48, 65535] { R3075 += 1, R2843 += 1 };
  s1 -> s1 [0, 46] { R3075 += 1, R2843 += 1 };
  s1 -> s3 [47, 47] { R3075 += 1 };
  s1 -> s1 [48, 65535] { R3075 += 1, R2843 += 1 };
  s2 -> s1 [0, 46] { R3075 += 1, R2843 += 1 };
  s2 -> s2 [0, 65535] { R3075 += 1, R2842 += 1, R2843 += 1 };
  s2 -> s3 [47, 47] { R3075 += 1 };
  s2 -> s1 [48, 65535] { R3075 += 1, R2843 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3075 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 62] { R3077 += 1, R3027 += 1 };
  s0 -> s2 [0, 65535] { R3077 += 1, R3026 += 1, R3027 += 1 };
  s0 -> s0 [0, 65535] { R3076 += 1, R3077 += 1 };
  s0 -> s3 [63, 63] { R3077 += 1, R3027 += 1 };
  s0 -> s1 [64, 65535] { R3077 += 1, R3027 += 1 };
  s1 -> s1 [0, 62] { R3077 += 1, R3027 += 1 };
  s1 -> s3 [63, 63] { R3077 += 1, R3027 += 1 };
  s1 -> s1 [64, 65535] { R3077 += 1, R3027 += 1 };
  s2 -> s1 [0, 62] { R3077 += 1, R3027 += 1 };
  s2 -> s2 [0, 65535] { R3077 += 1, R3026 += 1, R3027 += 1 };
  s2 -> s3 [63, 63] { R3077 += 1, R3027 += 1 };
  s2 -> s1 [64, 65535] { R3077 += 1, R3027 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3077 += 1 };
  s3 -> s3 [0, 65535] { R3077 += 1, R3027 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3077 += 1 };
  accepting s3, s4, s5;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R3078 += 1, R3079 += 1 };
  s0 -> s1 [0, 65535] { R3079 += 1, R3028 += 1, R3029 += 1 };
  s0 -> s2 [0, 65535] { R3079 += 1, R3029 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3079 += 1, R3028 += 1, R3029 += 1 };
  s1 -> s2 [0, 65535] { R3079 += 1, R3029 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3079 += 1 };
  s2 -> s2 [0, 65535] { R3079 += 1, R3029 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3079 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R3081 += 1, R3031 += 1, R2274 += 1 };
  s0 -> s2 [0, 65535] { R3081 += 1, R3030 += 1, R3031 += 1 };
  s0 -> s3 [0, 65535] { R3081 += 1, R3031 += 1, R2273 += 1, R2274 += 1 };
  s0 -> s0 [0, 65535] { R3080 += 1, R3081 += 1 };
  s0 -> s4 [63, 63] { R3081 += 1, R3031 += 1 };
  s0 -> s1 [64, 65535] { R3081 += 1, R3031 += 1, R2274 += 1 };
  s1 -> s1 [0, 62] { R3081 += 1, R3031 += 1, R2274 += 1 };
  s1 -> s4 [63, 63] { R3081 += 1, R3031 += 1 };
  s1 -> s1 [64, 65535] { R3081 += 1, R3031 += 1, R2274 += 1 };
  s2 -> s1 [0, 62] { R3081 += 1, R3031 += 1, R2274 += 1 };
  s2 -> s2 [0, 65535] { R3081 += 1, R3030 += 1, R3031 += 1 };
  s2 -> s3 [0, 65535] { R3081 += 1, R3031 += 1, R2273 += 1, R2274 += 1 };
  s2 -> s4 [63, 63] { R3081 += 1, R3031 += 1 };
  s2 -> s1 [64, 65535] { R3081 += 1, R3031 += 1, R2274 += 1 };
  s3 -> s1 [0, 62] { R3081 += 1, R3031 += 1, R2274 += 1 };
  s3 -> s3 [0, 65535] { R3081 += 1, R3031 += 1, R2273 += 1, R2274 += 1 };
  s3 -> s4 [63, 63] { R3081 += 1, R3031 += 1 };
  s3 -> s1 [64, 65535] { R3081 += 1, R3031 += 1, R2274 += 1 };
  s4 -> s5 [0, 65535] { R3081 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3081 += 1, R3031 += 1 };
  s5 -> s5 [0, 65535] { R3081 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 62] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s0 -> s2 [0, 65535] { R3083 += 1, R3032 += 1, R3033 += 1 };
  s0 -> s3 [0, 65535] { R3083 += 1, R3033 += 1, R2984 += 1, R2985 += 1 };
  s0 -> s0 [0, 65535] { R3082 += 1, R3083 += 1 };
  s0 -> s4 [63, 63] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s0 -> s1 [64, 65535] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s1 -> s7 [0, 65535] { R3083 += 1, R3033 += 1 };
  s1 -> s5 [0, 65535] { R3083 += 1 };
  s1 -> s1 [0, 65535] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s2 -> s2 [0, 65535] { R3083 += 1, R3032 += 1, R3033 += 1 };
  s2 -> s3 [0, 65535] { R3083 += 1, R3033 += 1, R2984 += 1, R2985 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s2 -> s1 [64, 65535] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s3 -> s1 [0, 62] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s3 -> s5 [0, 65535] { R3083 += 1 };
  s3 -> s3 [0, 65535] { R3083 += 1, R3033 += 1, R2984 += 1, R2985 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s3 -> s1 [64, 65535] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s4 -> s1 [0, 65535] { R3083 += 1, R3033 += 1, R2985 += 1 };
  s5 -> s5 [0, 65535] { R3083 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3083 += 1, R3033 += 1 };
  s7 -> s5 [0, 65535] { R3083 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3085 += 1, R3035 += 1, R2986 += 1, R2987 += 1 };
  s0 -> s2 [0, 65535] { R3085 += 1, R3035 += 1, R2987 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R3085 += 1, R3034 += 1, R3035 += 1 };
  s0 -> s0 [0, 65535] { R3084 += 1, R3085 += 1 };
  s1 -> s5 [0, 65535] { R3085 += 1 };
  s1 -> s1 [0, 65535] { R3085 += 1, R3035 += 1, R2986 += 1, R2987 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3085 += 1, R3035 += 1, R2987 += 1, R7 += 1 };
  s2 -> s5 [0, 65535] { R3085 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R3085 += 1, R3035 += 1 };
  s2 -> s2 [0, 65535] { R3085 += 1, R3035 += 1, R2987 += 1, R7 += 1 };
  s3 -> s1 [0, 65535] { R3085 += 1, R3035 += 1, R2986 += 1, R2987 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3085 += 1, R3035 += 1, R2987 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R3085 += 1, R3034 += 1, R3035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3085 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3085 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3085 += 1, R3035 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R3087 += 1, R3037 += 1, R2992 += 1, R2993 += 1 };
  s0 -> s2 [0, 65535] { R3087 += 1, R3036 += 1, R3037 += 1 };
  s0 -> s3 [0, 65535] { R3087 += 1, R3037 += 1, R2993 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R3086 += 1, R3087 += 1 };
  s1 -> s1 [0, 65535] { R3087 += 1, R3037 += 1, R2992 += 1, R2993 += 1 };
  s1 -> s4 [0, 65535] { R3087 += 1 };
  s1 -> s3 [0, 65535] { R3087 += 1, R3037 += 1, R2993 += 1, R0 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R3087 += 1, R3037 += 1, R2992 += 1, R2993 += 1 };
  s2 -> s2 [0, 65535] { R3087 += 1, R3036 += 1, R3037 += 1 };
  s2 -> s3 [0, 65535] { R3087 += 1, R3037 += 1, R2993 += 1, R0 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R3087 += 1 };
  s3 -> s5 [0, 65535] { R3087 += 1, R3037 += 1 };
  s3 -> s3 [0, 65535] { R3087 += 1, R3037 += 1, R2993 += 1, R0 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3087 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R3087 += 1 };
  s5 -> s5 [0, 65535] { R3087 += 1, R3037 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 58] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R3088 += 1, R3089 += 1 };
  s0 -> s2 [0, 65535] { R3089 += 1, R3039 += 1, R2994 += 1, R2995 += 1 };
  s0 -> s3 [0, 65535] { R3089 += 1, R3038 += 1, R3039 += 1 };
  s0 -> s4 [0, 65535] { R3089 += 1, R3039 += 1, R2995 += 1, R10 += 1, R11 += 1 };
  s0 -> s5 [59, 59] { R3089 += 1, R3039 += 1, R2995 += 1 };
  s0 -> s1 [60, 65535] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s1 -> s1 [0, 58] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s1 -> s5 [59, 59] { R3089 += 1, R3039 += 1, R2995 += 1 };
  s1 -> s1 [60, 65535] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s2 -> s1 [0, 58] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R3089 += 1, R3039 += 1, R2994 += 1, R2995 += 1 };
  s2 -> s4 [0, 65535] { R3089 += 1, R3039 += 1, R2995 += 1, R10 += 1, R11 += 1 };
  s2 -> s5 [59, 59] { R3089 += 1, R3039 += 1, R2995 += 1 };
  s2 -> s1 [60, 65535] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s3 -> s1 [0, 58] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s3 -> s2 [0, 65535] { R3089 += 1, R3039 += 1, R2994 += 1, R2995 += 1 };
  s3 -> s3 [0, 65535] { R3089 += 1, R3038 += 1, R3039 += 1 };
  s3 -> s4 [0, 65535] { R3089 += 1, R3039 += 1, R2995 += 1, R10 += 1, R11 += 1 };
  s3 -> s5 [59, 59] { R3089 += 1, R3039 += 1, R2995 += 1 };
  s3 -> s1 [60, 65535] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s4 -> s1 [0, 58] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s4 -> s4 [0, 65535] { R3089 += 1, R3039 += 1, R2995 += 1, R10 += 1, R11 += 1 };
  s4 -> s5 [59, 59] { R3089 += 1, R3039 += 1, R2995 += 1 };
  s4 -> s1 [60, 65535] { R3089 += 1, R3039 += 1, R2995 += 1, R11 += 1 };
  s5 -> s6 [0, 65535] { R3089 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R3089 += 1, R3039 += 1 };
  s5 -> s5 [0, 65535] { R3089 += 1, R3039 += 1, R2995 += 1 };
  s6 -> s6 [0, 65535] { R3089 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R3089 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R3089 += 1, R3039 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 37] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s0 -> s2 [0, 65535] { R3091 += 1, R3041 += 1, R2997 += 1, R2269 += 1 };
  s0 -> s3 [0, 65535] { R3091 += 1, R3041 += 1, R2996 += 1, R2997 += 1 };
  s0 -> s4 [0, 65535] { R3091 += 1, R3040 += 1, R3041 += 1 };
  s0 -> s0 [0, 65535] { R3090 += 1, R3091 += 1 };
  s0 -> s5 [38, 38] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s0 -> s1 [39, 65535] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s1 -> s1 [0, 37] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s1 -> s7 [0, 65535] { R3091 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3091 += 1, R3041 += 1 };
  s1 -> s5 [38, 38] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s1 -> s1 [39, 65535] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s2 -> s1 [0, 37] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s2 -> s8 [0, 65535] { R3091 += 1, R3041 += 1 };
  s2 -> s7 [0, 65535] { R3091 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3091 += 1, R3041 += 1, R2997 += 1, R2269 += 1 };
  s2 -> s5 [38, 38] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s2 -> s1 [39, 65535] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s3 -> s1 [0, 37] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s3 -> s7 [0, 65535] { R3091 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R3091 += 1, R3041 += 1, R2997 += 1, R2269 += 1 };
  s3 -> s3 [0, 65535] { R3091 += 1, R3041 += 1, R2996 += 1, R2997 += 1 };
  s3 -> s5 [38, 38] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s3 -> s1 [39, 65535] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s4 -> s1 [0, 37] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R3091 += 1, R3041 += 1, R2997 += 1, R2269 += 1 };
  s4 -> s3 [0, 65535] { R3091 += 1, R3041 += 1, R2996 += 1, R2997 += 1 };
  s4 -> s4 [0, 65535] { R3091 += 1, R3040 += 1, R3041 += 1 };
  s4 -> s5 [38, 38] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s4 -> s1 [39, 65535] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s5 -> s5 [0, 65535] { R3091 += 1, R3041 += 1, R2997 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3091 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3091 += 1, R3041 += 1 };
  s8 -> s7 [0, 65535] { R3091 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 45] { R3093 += 1, R3043 += 1, R2999 += 1 };
  s0 -> s2 [0, 65535] { R3093 += 1, R3042 += 1, R3043 += 1 };
  s0 -> s3 [0, 65535] { R3093 += 1, R3043 += 1, R2998 += 1, R2999 += 1 };
  s0 -> s0 [0, 65535] { R3092 += 1, R3093 += 1 };
  s0 -> s1 [47, 65535] { R3093 += 1, R3043 += 1, R2999 += 1 };
  s1 -> s1 [0, 45] { R3093 += 1, R3043 += 1, R2999 += 1 };
  s1 -> s1 [0, 65535] { R3093 += 1, R3043 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3093 += 1 };
  s1 -> s1 [47, 65535] { R3093 += 1, R3043 += 1, R2999 += 1 };
  s2 -> s1 [0, 45] { R3093 += 1, R3043 += 1, R2999 += 1 };
  s2 -> s2 [0, 65535] { R3093 += 1, R3042 += 1, R3043 += 1 };
  s2 -> s3 [0, 65535] { R3093 += 1, R3043 += 1, R2998 += 1, R2999 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [47, 65535] { R3093 += 1, R3043 += 1, R2999 += 1 };
  s3 -> s1 [0, 45] { R3093 += 1, R3043 += 1, R2999 += 1 };
  s3 -> s3 [0, 65535] { R3093 += 1, R3043 += 1, R2998 += 1, R2999 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3093 += 1 };
  s3 -> s1 [47, 65535] { R3093 += 1, R3043 += 1, R2999 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3093 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3095 += 1, R3044 += 1, R3045 += 1 };
  s0 -> s2 [0, 65535] { R3095 += 1, R3045 += 1, R3001 += 1, R2982 += 1 };
  s0 -> s3 [0, 65535] { R3095 += 1, R3045 += 1, R3000 += 1, R3001 += 1 };
  s0 -> s0 [0, 65535] { R3094 += 1, R3095 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3095 += 1, R3044 += 1, R3045 += 1 };
  s1 -> s2 [0, 65535] { R3095 += 1, R3045 += 1, R3001 += 1, R2982 += 1 };
  s1 -> s3 [0, 65535] { R3095 += 1, R3045 += 1, R3000 += 1, R3001 += 1 };
  s2 -> s6 [0, 65535] { R3095 += 1, R3045 += 1 };
  s2 -> s4 [0, 65535] { R3095 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3095 += 1, R3045 += 1, R3001 += 1, R2982 += 1 };
  s3 -> s4 [0, 65535] { R3095 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3095 += 1, R3045 += 1, R3001 += 1, R2982 += 1 };
  s3 -> s3 [0, 65535] { R3095 += 1, R3045 += 1, R3000 += 1, R3001 += 1 };
  s4 -> s4 [0, 65535] { R3095 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3095 += 1, R3045 += 1 };
  s6 -> s4 [0, 65535] { R3095 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 63] { R3097 += 1, R3047 += 1 };
  s0 -> s0 [0, 65535] { R3096 += 1, R3097 += 1 };
  s0 -> s2 [0, 65535] { R3097 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s3 [64, 64] { R3097 += 1, R3047 += 1 };
  s0 -> s1 [65, 65535] { R3097 += 1, R3047 += 1 };
  s1 -> s1 [0, 63] { R3097 += 1, R3047 += 1 };
  s1 -> s3 [64, 64] { R3097 += 1, R3047 += 1 };
  s1 -> s1 [65, 65535] { R3097 += 1, R3047 += 1 };
  s2 -> s1 [0, 63] { R3097 += 1, R3047 += 1 };
  s2 -> s2 [0, 65535] { R3097 += 1, R3046 += 1, R3047 += 1 };
  s2 -> s3 [64, 64] { R3097 += 1, R3047 += 1 };
  s2 -> s1 [65, 65535] { R3097 += 1, R3047 += 1 };
  s3 -> s4 [0, 65535] { R3097 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3097 += 1, R3047 += 1 };
  s4 -> s4 [0, 65535] { R3097 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R3098 += 1, R3099 += 1 };
  s0 -> s1 [0, 65535] { R3099 += 1, R3048 += 1, R3049 += 1 };
  s0 -> s2 [0, 65535] { R3099 += 1, R3049 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R3099 += 1, R3048 += 1, R3049 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3099 += 1, R3049 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R3099 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3099 += 1, R3049 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R3099 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 36] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s0 -> s2 [0, 65535] { R3101 += 1, R3050 += 1, R3051 += 1 };
  s0 -> s3 [0, 65535] { R3101 += 1, R3051 += 1, R3006 += 1, R3007 += 1 };
  s0 -> s0 [0, 65535] { R3100 += 1, R3101 += 1 };
  s0 -> s1 [38, 42] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s0 -> s1 [44, 57] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s0 -> s1 [59, 63] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s0 -> s1 [65, 65535] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s1 -> s1 [0, 36] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s1 -> s1 [0, 65535] { R3101 += 1, R3051 += 1 };
  s1 -> s4 [0, 65535] { R3101 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [38, 42] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s1 -> s1 [44, 57] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s1 -> s1 [59, 63] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s1 -> s1 [65, 65535] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s2 -> s1 [0, 36] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3101 += 1, R3050 += 1, R3051 += 1 };
  s2 -> s3 [0, 65535] { R3101 += 1, R3051 += 1, R3006 += 1, R3007 += 1 };
  s2 -> s1 [38, 42] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s2 -> s1 [44, 57] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s2 -> s1 [59, 63] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s2 -> s1 [65, 65535] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s3 -> s1 [0, 36] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s3 -> s4 [0, 65535] { R3101 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3101 += 1, R3051 += 1, R3006 += 1, R3007 += 1 };
  s3 -> s1 [38, 42] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s3 -> s1 [44, 57] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s3 -> s1 [59, 63] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s3 -> s1 [65, 65535] { R3101 += 1, R3051 += 1, R3007 += 1 };
  s4 -> s4 [0, 65535] { R3101 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3102 += 1, R3103 += 1 };
  s0 -> s1 [0, 65535] { R3103 += 1, R3052 += 1, R3053 += 1 };
  s0 -> s2 [0, 65535] { R3103 += 1, R3053 += 1, R3009 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R3103 += 1, R3053 += 1, R3008 += 1, R3009 += 1 };
  s1 -> s1 [0, 65535] { R3103 += 1, R3052 += 1, R3053 += 1 };
  s1 -> s2 [0, 65535] { R3103 += 1, R3053 += 1, R3009 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R3103 += 1, R3053 += 1, R3008 += 1, R3009 += 1 };
  s2 -> s4 [0, 65535] { R3103 += 1 };
  s2 -> s2 [0, 65535] { R3103 += 1, R3053 += 1, R3009 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R3103 += 1, R3053 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R3103 += 1 };
  s3 -> s2 [0, 65535] { R3103 += 1, R3053 += 1, R3009 += 1, R1 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3103 += 1, R3053 += 1, R3008 += 1, R3009 += 1 };
  s4 -> s4 [0, 65535] { R3103 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3103 += 1 };
  s6 -> s6 [0, 65535] { R3103 += 1, R3053 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 43] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s0 -> s2 [0, 65535] { R3105 += 1, R3055 += 1, R3010 += 1, R3011 += 1 };
  s0 -> s0 [0, 65535] { R3104 += 1, R3105 += 1 };
  s0 -> s3 [0, 65535] { R3105 += 1, R3054 += 1, R3055 += 1 };
  s0 -> s1 [45, 64] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s0 -> s4 [90, 90] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s0 -> s1 [91, 65535] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s1 -> s1 [0, 43] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s1 -> s1 [45, 64] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s1 -> s4 [90, 90] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s1 -> s1 [91, 65535] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s2 -> s1 [0, 43] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s2 -> s2 [0, 65535] { R3105 += 1, R3055 += 1, R3010 += 1, R3011 += 1 };
  s2 -> s1 [45, 64] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s2 -> s4 [90, 90] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s2 -> s1 [91, 65535] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s3 -> s1 [0, 43] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s3 -> s2 [0, 65535] { R3105 += 1, R3055 += 1, R3010 += 1, R3011 += 1 };
  s3 -> s3 [0, 65535] { R3105 += 1, R3054 += 1, R3055 += 1 };
  s3 -> s1 [45, 64] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s3 -> s4 [90, 90] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s3 -> s1 [91, 65535] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s4 -> s4 [0, 43] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3105 += 1 };
  s4 -> s4 [0, 65535] { R3105 += 1, R3055 += 1 };
  s4 -> s4 [45, 64] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s4 -> s4 [90, 65535] { R3105 += 1, R3055 += 1, R3011 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3105 += 1 };
  accepting s4, s5, s6;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R3107 += 1, R3056 += 1, R3057 += 1 };
  s0 -> s2 [0, 65535] { R3107 += 1, R3057 += 1, R3012 += 1, R3013 += 1 };
  s0 -> s3 [0, 65535] { R3107 += 1, R3057 += 1, R3013 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R3106 += 1, R3107 += 1 };
  s1 -> s1 [0, 65535] { R3107 += 1, R3056 += 1, R3057 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3107 += 1, R3057 += 1, R3012 += 1, R3013 += 1 };
  s1 -> s3 [0, 65535] { R3107 += 1, R3057 += 1, R3013 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3107 += 1, R3057 += 1, R3012 += 1, R3013 += 1 };
  s2 -> s6 [0, 65535] { R3107 += 1 };
  s2 -> s3 [0, 65535] { R3107 += 1, R3057 += 1, R3013 += 1, R3 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3107 += 1, R3057 += 1 };
  s3 -> s6 [0, 65535] { R3107 += 1 };
  s3 -> s3 [0, 65535] { R3107 += 1, R3057 += 1, R3013 += 1, R3 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3107 += 1, R3057 += 1 };
  s5 -> s6 [0, 65535] { R3107 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3107 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 57] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s0 -> s0 [0, 65535] { R3108 += 1, R3109 += 1 };
  s0 -> s2 [0, 65535] { R3109 += 1, R3058 += 1, R3059 += 1 };
  s0 -> s3 [0, 65535] { R3109 += 1, R3059 += 1, R3015 += 1, R2837 += 1 };
  s0 -> s4 [0, 65535] { R3109 += 1, R3059 += 1, R3014 += 1, R3015 += 1 };
  s0 -> s5 [58, 58] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s0 -> s1 [59, 65535] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s1 -> s1 [0, 57] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3109 += 1, R3059 += 1 };
  s1 -> s7 [0, 65535] { R3109 += 1 };
  s1 -> s5 [58, 58] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s1 -> s1 [59, 65535] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s2 -> s1 [0, 57] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s2 -> s2 [0, 65535] { R3109 += 1, R3058 += 1, R3059 += 1 };
  s2 -> s3 [0, 65535] { R3109 += 1, R3059 += 1, R3015 += 1, R2837 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R3109 += 1, R3059 += 1, R3014 += 1, R3015 += 1 };
  s2 -> s5 [58, 58] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s2 -> s1 [59, 65535] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s3 -> s1 [0, 57] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s3 -> s8 [0, 65535] { R3109 += 1, R3059 += 1 };
  s3 -> s3 [0, 65535] { R3109 += 1, R3059 += 1, R3015 += 1, R2837 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R3109 += 1 };
  s3 -> s5 [58, 58] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s3 -> s1 [59, 65535] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s4 -> s1 [0, 57] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s4 -> s3 [0, 65535] { R3109 += 1, R3059 += 1, R3015 += 1, R2837 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3109 += 1, R3059 += 1, R3014 += 1, R3015 += 1 };
  s4 -> s7 [0, 65535] { R3109 += 1 };
  s4 -> s5 [58, 58] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s4 -> s1 [59, 65535] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s5 -> s5 [0, 65535] { R3109 += 1, R3059 += 1, R3015 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3109 += 1 };
  s8 -> s8 [0, 65535] { R3109 += 1, R3059 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R3109 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 89] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s0 -> s0 [0, 65535] { R3110 += 1, R3111 += 1 };
  s0 -> s2 [0, 65535] { R3111 += 1, R3061 += 1, R3016 += 1, R3017 += 1 };
  s0 -> s3 [0, 65535] { R3111 += 1, R3061 += 1, R3017 += 1, R2838 += 1 };
  s0 -> s4 [0, 65535] { R3111 += 1, R3060 += 1, R3061 += 1 };
  s0 -> s5 [90, 90] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s0 -> s1 [91, 65535] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s1 -> s1 [0, 89] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s1 -> s1 [0, 65535] { R3111 += 1, R3061 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R3111 += 1 };
  s1 -> s5 [90, 90] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s1 -> s1 [91, 65535] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s2 -> s1 [0, 89] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s2 -> s2 [0, 65535] { R3111 += 1, R3061 += 1, R3016 += 1, R3017 += 1 };
  s2 -> s3 [0, 65535] { R3111 += 1, R3061 += 1, R3017 += 1, R2838 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R3111 += 1 };
  s2 -> s5 [90, 90] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s2 -> s1 [91, 65535] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s3 -> s1 [0, 89] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s3 -> s3 [0, 65535] { R3111 += 1, R3061 += 1, R3017 += 1, R2838 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R3111 += 1 };
  s3 -> s8 [0, 65535] { R3111 += 1, R3061 += 1 };
  s3 -> s5 [90, 90] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s3 -> s1 [91, 65535] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s4 -> s1 [0, 89] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s4 -> s2 [0, 65535] { R3111 += 1, R3061 += 1, R3016 += 1, R3017 += 1 };
  s4 -> s3 [0, 65535] { R3111 += 1, R3061 += 1, R3017 += 1, R2838 += 1 };
  s4 -> s4 [0, 65535] { R3111 += 1, R3060 += 1, R3061 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [90, 90] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s4 -> s1 [91, 65535] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s5 -> s5 [0, 65535] { R3111 += 1, R3061 += 1, R3017 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3111 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R3111 += 1 };
  s8 -> s8 [0, 65535] { R3111 += 1, R3061 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s0 -> s2 [0, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2988 += 1, R2989 += 1 };
  s0 -> s3 [0, 65535] { R3113 += 1, R3062 += 1, R3063 += 1 };
  s0 -> s0 [0, 65535] { R3112 += 1, R3113 += 1 };
  s0 -> s4 [0, 65535] { R3113 += 1, R3063 += 1, R3018 += 1, R3019 += 1 };
  s0 -> s5 [91, 91] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s0 -> s1 [92, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s1 -> s1 [0, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s9 [0, 65535] { R3113 += 1, R3063 += 1, R3019 += 1 };
  s1 -> s8 [0, 65535] { R3113 += 1, R3063 += 1 };
  s1 -> s7 [0, 65535] { R3113 += 1 };
  s2 -> s1 [0, 90] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s2 -> s2 [0, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2988 += 1, R2989 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R3113 += 1, R3063 += 1 };
  s2 -> s7 [0, 65535] { R3113 += 1 };
  s2 -> s5 [91, 91] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s2 -> s1 [92, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s3 -> s1 [0, 90] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s3 -> s2 [0, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2988 += 1, R2989 += 1 };
  s3 -> s3 [0, 65535] { R3113 += 1, R3062 += 1, R3063 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R3113 += 1, R3063 += 1, R3018 += 1, R3019 += 1 };
  s3 -> s5 [91, 91] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s3 -> s1 [92, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s4 -> s1 [0, 90] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s4 -> s2 [0, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2988 += 1, R2989 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R3113 += 1 };
  s4 -> s4 [0, 65535] { R3113 += 1, R3063 += 1, R3018 += 1, R3019 += 1 };
  s4 -> s5 [91, 91] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s4 -> s1 [92, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s5 -> s1 [0, 65535] { R3113 += 1, R3063 += 1, R3019 += 1, R2989 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3113 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3113 += 1, R3063 += 1 };
  s8 -> s7 [0, 65535] { R3113 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R3113 += 1, R3063 += 1, R3019 += 1 };
  s9 -> s8 [0, 65535] { R3113 += 1, R3063 += 1 };
  s9 -> s7 [0, 65535] { R3113 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R3115 += 1, R3065 += 1, R3020 += 1, R3021 += 1 };
  s0 -> s2 [0, 65535] { R3115 += 1, R3064 += 1, R3065 += 1 };
  s0 -> s0 [0, 65535] { R3114 += 1, R3115 += 1 };
  s0 -> s3 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1, R2991 += 1, R8 += 1 };
  s0 -> s4 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1, R2990 += 1, R2991 += 1 };
  s1 -> s1 [0, 65535] { R3115 += 1, R3065 += 1, R3020 += 1, R3021 += 1 };
  s1 -> s5 [0, 65535] { R3115 += 1 };
  s1 -> s3 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1, R2991 += 1, R8 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1, R2990 += 1, R2991 += 1 };
  s2 -> s1 [0, 65535] { R3115 += 1, R3065 += 1, R3020 += 1, R3021 += 1 };
  s2 -> s2 [0, 65535] { R3115 += 1, R3064 += 1, R3065 += 1 };
  s2 -> s3 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1, R2991 += 1, R8 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1, R2990 += 1, R2991 += 1 };
  s3 -> s5 [0, 65535] { R3115 += 1 };
  s3 -> s3 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1, R2991 += 1, R8 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1 };
  s3 -> s7 [0, 65535] { R3115 += 1, R3065 += 1 };
  s4 -> s5 [0, 65535] { R3115 += 1 };
  s4 -> s3 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1, R2991 += 1, R8 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1, R2990 += 1, R2991 += 1 };
  s4 -> s7 [0, 65535] { R3115 += 1, R3065 += 1 };
  s5 -> s5 [0, 65535] { R3115 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R3115 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3115 += 1, R3065 += 1 };
  s8 -> s5 [0, 65535] { R3115 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3115 += 1, R3065 += 1, R3021 += 1 };
  s8 -> s7 [0, 65535] { R3115 += 1, R3065 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 89] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s0 -> s2 [0, 65535] { R3117 += 1, R3066 += 1, R3067 += 1 };
  s0 -> s3 [0, 65535] { R3117 += 1, R3067 += 1, R3022 += 1, R3023 += 1 };
  s0 -> s0 [0, 65535] { R3116 += 1, R3117 += 1 };
  s0 -> s4 [0, 65535] { R3117 += 1, R3067 += 1, R3023 += 1, R3002 += 1, R3003 += 1 };
  s0 -> s1 [91, 65535] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s1 -> s1 [0, 89] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s1 -> s5 [0, 65535] { R3117 += 1, R3067 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3117 += 1, R3067 += 1, R3023 += 1 };
  s1 -> s7 [0, 65535] { R3117 += 1 };
  s1 -> s1 [91, 65535] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s2 -> s1 [0, 89] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s2 -> s2 [0, 65535] { R3117 += 1, R3066 += 1, R3067 += 1 };
  s2 -> s3 [0, 65535] { R3117 += 1, R3067 += 1, R3022 += 1, R3023 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R3117 += 1, R3067 += 1, R3023 += 1, R3002 += 1, R3003 += 1 };
  s2 -> s1 [91, 65535] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s3 -> s1 [0, 89] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s3 -> s3 [0, 65535] { R3117 += 1, R3067 += 1, R3022 += 1, R3023 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R3117 += 1, R3067 += 1, R3023 += 1, R3002 += 1, R3003 += 1 };
  s3 -> s7 [0, 65535] { R3117 += 1 };
  s3 -> s1 [91, 65535] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s4 -> s1 [0, 89] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s4 -> s5 [0, 65535] { R3117 += 1, R3067 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3117 += 1, R3067 += 1, R3023 += 1, R3002 += 1, R3003 += 1 };
  s4 -> s7 [0, 65535] { R3117 += 1 };
  s4 -> s1 [91, 65535] { R3117 += 1, R3067 += 1, R3023 += 1, R3003 += 1 };
  s5 -> s5 [0, 65535] { R3117 += 1, R3067 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R3117 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3117 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3119 += 1, R3068 += 1, R3069 += 1 };
  s0 -> s2 [0, 65535] { R3119 += 1, R3069 += 1, R3024 += 1, R3025 += 1 };
  s0 -> s0 [0, 65535] { R3118 += 1, R3119 += 1 };
  s0 -> s3 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1, R3005 += 1, R2983 += 1 };
  s0 -> s4 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1, R3004 += 1, R3005 += 1 };
  s1 -> s1 [0, 65535] { R3119 += 1, R3068 += 1, R3069 += 1 };
  s1 -> s2 [0, 65535] { R3119 += 1, R3069 += 1, R3024 += 1, R3025 += 1 };
  s1 -> s3 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1, R3005 += 1, R2983 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1, R3004 += 1, R3005 += 1 };
  s2 -> s2 [0, 65535] { R3119 += 1, R3069 += 1, R3024 += 1, R3025 += 1 };
  s2 -> s3 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1, R3005 += 1, R2983 += 1 };
  s2 -> s5 [0, 65535] { R3119 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1, R3004 += 1, R3005 += 1 };
  s3 -> s8 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1 };
  s3 -> s3 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1, R3005 += 1, R2983 += 1 };
  s3 -> s5 [0, 65535] { R3119 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R3119 += 1, R3069 += 1 };
  s4 -> s3 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1, R3005 += 1, R2983 += 1 };
  s4 -> s5 [0, 65535] { R3119 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1, R3004 += 1, R3005 += 1 };
  s4 -> s7 [0, 65535] { R3119 += 1, R3069 += 1 };
  s5 -> s5 [0, 65535] { R3119 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R3119 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3119 += 1, R3069 += 1 };
  s8 -> s8 [0, 65535] { R3119 += 1, R3069 += 1, R3025 += 1 };
  s8 -> s5 [0, 65535] { R3119 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R3119 += 1, R3069 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R2 = R2997 && R3 = R3005 && R4 = R3025 && R5 = R3045 && R6 = R3119 && R10 = 0 && R2273 = 0 && R2274 - R2996 = -1 && R2842 = 0 && R2843 = R3069 && R2984 = 0 && R2985 = 1 && R2986 = 0 && R2987 = 1 && R2988 = 0 && R2989 = 1 && R2990 = 0 && R2991 = 1 && R2992 = R2996 && R2993 = R2997 && R2994 = R2996 && R2995 = R2997 && R3002 = 0 && R3003 = R3005 && R3004 = 0 && R3006 = 0 && R3007 = 1 && R3008 = 0 && R3009 = 1 && R3010 = 2 && R3011 = R3025 && R3012 = 2 && R3013 = R3025 && R3014 = 2 && R3015 = R3025 && R3016 = 2 && R3017 = R3025 && R3018 = 2 && R3019 = R3025 && R3020 = 2 && R3021 = R3025 && R3022 = 2 && R3023 = R3025 && R3024 = 2 && R3026 - R3069 = 1 && R3027 = R3045 && R3028 - R3069 = 1 && R3029 = R3045 && R3030 - R3069 = 1 && R3031 = R3045 && R3032 - R3069 = 1 && R3033 = R3045 && R3034 - R3069 = 1 && R3035 = R3045 && R3036 - R3069 = 1 && R3037 = R3045 && R3038 - R3069 = 1 && R3039 = R3045 && R3040 - R3069 = 1 && R3041 = R3045 && R3042 - R3069 = 1 && R3043 = R3045 && R3044 - R3069 = 1 && R3046 = 0 && R3047 = R3069 && R3048 = 0 && R3049 = R3069 && R3050 = 0 && R3051 = R3069 && R3052 = 0 && R3053 = R3069 && R3054 = 0 && R3055 = R3069 && R3056 = 0 && R3057 = R3069 && R3058 = 0 && R3059 = R3069 && R3060 = 0 && R3061 = R3069 && R3062 = 0 && R3063 = R3069 && R3064 = 0 && R3065 = R3069 && R3066 = 0 && R3067 = R3069 && R3068 = 0 && R3070 = 10 && R3071 = R3119 && R3072 = 10 && R3073 = R3119 && R3074 = 10 && R3075 = R3119 && R3076 = 10 && R3077 = R3119 && R3078 = 10 && R3079 = R3119 && R3080 = 10 && R3081 = R3119 && R3082 = 10 && R3083 = R3119 && R3084 = 10 && R3085 = R3119 && R3086 = 10 && R3087 = R3119 && R3088 = 10 && R3089 = R3119 && R3090 = 10 && R3091 = R3119 && R3092 = 10 && R3093 = R3119 && R3094 = 10 && R3095 = R3119 && R3096 = 10 && R3097 = R3119 && R3098 = 10 && R3099 = R3119 && R3100 = 10 && R3101 = R3119 && R3102 = 10 && R3103 = R3119 && R3104 = 10 && R3105 = R3119 && R3106 = 10 && R3107 = R3119 && R3108 = 10 && R3109 = R3119 && R3110 = 10 && R3111 = R3119 && R3112 = 10 && R3113 = R3119 && R3114 = 10 && R3115 = R3119 && R3116 = 10 && R3117 = R3119 && R3118 = 10 && R0 != 0 && R1 != 0 && -1 < R11 && R2269 < 1 && R2837 < 1 && R2838 < 1 && R2996 - R2997 < 1 && 0 < R2996 && 0 < R3005 && 1 < R3025 && R3069 < R3045 && -1 < R3069 && 9 < R3119 && (R2998 != 0 || R2996 - R2999 = 1 || (R2982 = 0 && R2996 = 1)) && (R3000 != 0 || R2996 - R3001 = 1 || (R2982 = 0 && R2996 = 1)) && (R2998 = 0 || (R2982 = 0 && R2996 = 1)) && (R3000 = 0 || (R2982 = 0 && R2996 = 1));
// End of Parikh automata intersection problem
