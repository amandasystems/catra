// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R2, R3, R4, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R97 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s2 [46, 46] { R97 += 1 };
  s0 -> s3 [47, 47] { R97 += 1 };
  s0 -> s1 [48, 65535] { R97 += 1 };
  s1 -> s1 [0, 45] { R97 += 1 };
  s1 -> s2 [46, 46] { R97 += 1 };
  s1 -> s3 [47, 47] { R97 += 1 };
  s1 -> s1 [48, 65535] { R97 += 1 };
  s2 -> s1 [0, 45] { R97 += 1 };
  s2 -> s2 [46, 46] { R97 += 1 };
  s2 -> s3 [47, 47] { R97 += 1 };
  s2 -> s1 [48, 114] { R97 += 1 };
  s2 -> s8 [115, 115] { R97 += 1 };
  s2 -> s1 [116, 65535] { R97 += 1 };
  s3 -> s3 [0, 45] { R97 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R97 += 1 };
  s3 -> s3 [47, 65535] { R97 += 1 };
  s4 -> s3 [0, 45] { R97 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R97 += 1 };
  s4 -> s3 [47, 114] { R97 += 1 };
  s4 -> s5 [115, 115] { R97 += 1 };
  s4 -> s3 [116, 65535] { R97 += 1 };
  s5 -> s3 [0, 45] { R97 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R97 += 1 };
  s5 -> s3 [47, 110] { R97 += 1 };
  s5 -> s6 [111, 111] { R97 += 1 };
  s5 -> s3 [112, 65535] { R97 += 1 };
  s6 -> s3 [0, 45] { R97 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R97 += 1 };
  s6 -> s3 [47, 98] { R97 += 1 };
  s6 -> s7 [99, 99] { R97 += 1 };
  s6 -> s3 [100, 65535] { R97 += 1 };
  s7 -> s3 [0, 45] { R97 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R97 += 1 };
  s7 -> s3 [47, 106] { R97 += 1 };
  s7 -> s3 [108, 65535] { R97 += 1 };
  s8 -> s1 [0, 45] { R97 += 1 };
  s8 -> s2 [46, 46] { R97 += 1 };
  s8 -> s3 [47, 47] { R97 += 1 };
  s8 -> s1 [48, 110] { R97 += 1 };
  s8 -> s9 [111, 111] { R97 += 1 };
  s8 -> s1 [112, 65535] { R97 += 1 };
  s9 -> s1 [0, 45] { R97 += 1 };
  s9 -> s2 [46, 46] { R97 += 1 };
  s9 -> s3 [47, 47] { R97 += 1 };
  s9 -> s1 [48, 98] { R97 += 1 };
  s9 -> s10 [99, 99] { R97 += 1 };
  s9 -> s1 [100, 65535] { R97 += 1 };
  s10 -> s1 [0, 45] { R97 += 1 };
  s10 -> s2 [46, 46] { R97 += 1 };
  s10 -> s3 [47, 47] { R97 += 1 };
  s10 -> s1 [48, 106] { R97 += 1 };
  s10 -> s1 [108, 65535] { R97 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R99 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s1 -> s1 [0, 65535] { R99 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R101 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R101 += 1, R8 += 1, R9 += 1 };
  s0 -> s3 [47, 47] { R101 += 1 };
  s0 -> s1 [48, 65535] { R101 += 1, R9 += 1 };
  s1 -> s1 [0, 46] { R101 += 1, R9 += 1 };
  s1 -> s3 [47, 47] { R101 += 1 };
  s1 -> s1 [48, 65535] { R101 += 1, R9 += 1 };
  s2 -> s1 [0, 46] { R101 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R101 += 1, R8 += 1, R9 += 1 };
  s2 -> s3 [47, 47] { R101 += 1 };
  s2 -> s1 [48, 65535] { R101 += 1, R9 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R101 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s1 [0, 65535] { R103 += 1, R71 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R103 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R103 += 1, R71 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R103 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R103 += 1, R71 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R103 += 1, R70 += 1, R71 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R103 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R105 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R105 += 1, R82 += 1, R83 += 1 };
  s0 -> s3 [64, 64] { R105 += 1, R83 += 1 };
  s0 -> s1 [65, 65535] { R105 += 1, R83 += 1 };
  s1 -> s1 [0, 63] { R105 += 1, R83 += 1 };
  s1 -> s3 [64, 64] { R105 += 1, R83 += 1 };
  s1 -> s1 [65, 65535] { R105 += 1, R83 += 1 };
  s2 -> s1 [0, 63] { R105 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R105 += 1, R82 += 1, R83 += 1 };
  s2 -> s3 [64, 64] { R105 += 1, R83 += 1 };
  s2 -> s1 [65, 65535] { R105 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R105 += 1, R83 += 1 };
  s3 -> s4 [0, 65535] { R105 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R105 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R107 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R107 += 1, R85 += 1, R65 += 1 };
  s1 -> s1 [0, 65535] { R107 += 1, R84 += 1, R85 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R107 += 1, R85 += 1, R65 += 1 };
  s2 -> s3 [0, 65535] { R107 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R107 += 1, R85 += 1, R65 += 1 };
  s3 -> s3 [0, 65535] { R107 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R109 += 1, R87 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R109 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R108 += 1, R109 += 1 };
  s0 -> s3 [0, 65535] { R109 += 1, R87 += 1, R72 += 1, R73 += 1 };
  s0 -> s4 [58, 58] { R109 += 1, R87 += 1, R73 += 1 };
  s0 -> s1 [59, 63] { R109 += 1, R87 += 1, R73 += 1 };
  s0 -> s1 [65, 65535] { R109 += 1, R87 += 1, R73 += 1 };
  s1 -> s1 [0, 57] { R109 += 1, R87 += 1, R73 += 1 };
  s1 -> s4 [58, 58] { R109 += 1, R87 += 1, R73 += 1 };
  s1 -> s1 [59, 63] { R109 += 1, R87 += 1, R73 += 1 };
  s1 -> s1 [65, 65535] { R109 += 1, R87 += 1, R73 += 1 };
  s2 -> s1 [0, 57] { R109 += 1, R87 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R109 += 1, R86 += 1, R87 += 1 };
  s2 -> s3 [0, 65535] { R109 += 1, R87 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [58, 58] { R109 += 1, R87 += 1, R73 += 1 };
  s2 -> s1 [59, 63] { R109 += 1, R87 += 1, R73 += 1 };
  s2 -> s1 [65, 65535] { R109 += 1, R87 += 1, R73 += 1 };
  s3 -> s1 [0, 57] { R109 += 1, R87 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R109 += 1, R87 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [58, 58] { R109 += 1, R87 += 1, R73 += 1 };
  s3 -> s1 [59, 63] { R109 += 1, R87 += 1, R73 += 1 };
  s3 -> s1 [65, 65535] { R109 += 1, R87 += 1, R73 += 1 };
  s4 -> s4 [0, 63] { R109 += 1, R87 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R109 += 1, R87 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R109 += 1 };
  s4 -> s4 [65, 65535] { R109 += 1, R87 += 1, R73 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R109 += 1 };
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R111 += 1, R89 += 1, R75 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R111 += 1, R89 += 1, R74 += 1, R75 += 1 };
  s0 -> s3 [0, 65535] { R111 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s1 -> s1 [0, 65535] { R111 += 1, R89 += 1, R75 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R111 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R111 += 1, R89 += 1 };
  s2 -> s1 [0, 65535] { R111 += 1, R89 += 1, R75 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R111 += 1, R89 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535] { R111 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R111 += 1, R89 += 1, R75 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R111 += 1, R89 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R111 += 1, R88 += 1, R89 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R111 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R111 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R111 += 1, R89 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R113 += 1, R91 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R113 += 1, R91 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [0, 65535] { R113 += 1, R90 += 1, R91 += 1 };
  s0 -> s4 [0, 65535] { R113 += 1, R91 += 1, R77 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s5 [58, 58] { R113 += 1, R91 += 1, R77 += 1 };
  s0 -> s1 [59, 65535] { R113 += 1, R91 += 1, R77 += 1 };
  s1 -> s1 [0, 57] { R113 += 1, R91 += 1, R77 += 1 };
  s1 -> s1 [0, 65535] { R113 += 1, R91 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R113 += 1 };
  s1 -> s5 [58, 58] { R113 += 1, R91 += 1, R77 += 1 };
  s1 -> s1 [59, 65535] { R113 += 1, R91 += 1, R77 += 1 };
  s2 -> s1 [0, 57] { R113 += 1, R91 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R113 += 1, R91 += 1, R76 += 1, R77 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R113 += 1, R91 += 1, R77 += 1, R4 += 1 };
  s2 -> s8 [0, 65535] { R113 += 1 };
  s2 -> s5 [58, 58] { R113 += 1, R91 += 1, R77 += 1 };
  s2 -> s1 [59, 65535] { R113 += 1, R91 += 1, R77 += 1 };
  s3 -> s1 [0, 57] { R113 += 1, R91 += 1, R77 += 1 };
  s3 -> s2 [0, 65535] { R113 += 1, R91 += 1, R76 += 1, R77 += 1 };
  s3 -> s3 [0, 65535] { R113 += 1, R90 += 1, R91 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R113 += 1, R91 += 1, R77 += 1, R4 += 1 };
  s3 -> s5 [58, 58] { R113 += 1, R91 += 1, R77 += 1 };
  s3 -> s1 [59, 65535] { R113 += 1, R91 += 1, R77 += 1 };
  s4 -> s1 [0, 57] { R113 += 1, R91 += 1, R77 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R113 += 1, R91 += 1 };
  s4 -> s4 [0, 65535] { R113 += 1, R91 += 1, R77 += 1, R4 += 1 };
  s4 -> s8 [0, 65535] { R113 += 1 };
  s4 -> s5 [58, 58] { R113 += 1, R91 += 1, R77 += 1 };
  s4 -> s1 [59, 65535] { R113 += 1, R91 += 1, R77 += 1 };
  s5 -> s5 [0, 65535] { R113 += 1, R91 += 1, R77 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R113 += 1, R91 += 1 };
  s7 -> s8 [0, 65535] { R113 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R113 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R115 += 1, R93 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R115 += 1, R92 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s0 -> s4 [0, 65535] { R115 += 1, R93 += 1, R79 += 1, R66 += 1, R67 += 1 };
  s0 -> s5 [58, 58] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s0 -> s1 [59, 65535] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s1 -> s1 [0, 57] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s1 -> s5 [58, 58] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s1 -> s1 [59, 65535] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s2 -> s1 [0, 57] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R115 += 1, R93 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535] { R115 += 1, R93 += 1, R79 += 1, R66 += 1, R67 += 1 };
  s2 -> s5 [58, 58] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s2 -> s1 [59, 65535] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s3 -> s1 [0, 57] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s3 -> s2 [0, 65535] { R115 += 1, R93 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R115 += 1, R92 += 1, R93 += 1 };
  s3 -> s4 [0, 65535] { R115 += 1, R93 += 1, R79 += 1, R66 += 1, R67 += 1 };
  s3 -> s5 [58, 58] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s3 -> s1 [59, 65535] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s4 -> s1 [0, 57] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s4 -> s4 [0, 65535] { R115 += 1, R93 += 1, R79 += 1, R66 += 1, R67 += 1 };
  s4 -> s5 [58, 58] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s4 -> s1 [59, 65535] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s5 -> s6 [0, 65535] { R115 += 1, R93 += 1, R79 += 1 };
  s5 -> s7 [0, 65535] { R115 += 1, R93 += 1 };
  s5 -> s8 [0, 65535] { R115 += 1 };
  s5 -> s5 [0, 65535] { R115 += 1, R93 += 1, R79 += 1, R67 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R115 += 1, R93 += 1, R79 += 1 };
  s6 -> s7 [0, 65535] { R115 += 1, R93 += 1 };
  s6 -> s8 [0, 65535] { R115 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R115 += 1, R93 += 1 };
  s7 -> s8 [0, 65535] { R115 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R115 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R117 += 1, R95 += 1, R81 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R117 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R117 += 1, R95 += 1, R80 += 1, R81 += 1 };
  s0 -> s4 [0, 65535] { R117 += 1, R95 += 1, R81 += 1, R69 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R116 += 1, R117 += 1 };
  s1 -> s1 [0, 65535] { R117 += 1, R95 += 1, R81 += 1, R68 += 1, R69 += 1 };
  s1 -> s5 [0, 65535] { R117 += 1 };
  s1 -> s7 [0, 65535] { R117 += 1, R95 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [0, 65535] { R117 += 1, R95 += 1, R81 += 1, R69 += 1, R64 += 1 };
  s2 -> s1 [0, 65535] { R117 += 1, R95 += 1, R81 += 1, R68 += 1, R69 += 1 };
  s2 -> s2 [0, 65535] { R117 += 1, R94 += 1, R95 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R117 += 1, R95 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [0, 65535] { R117 += 1, R95 += 1, R81 += 1, R69 += 1, R64 += 1 };
  s3 -> s1 [0, 65535] { R117 += 1, R95 += 1, R81 += 1, R68 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R117 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R117 += 1, R95 += 1, R80 += 1, R81 += 1 };
  s3 -> s4 [0, 65535] { R117 += 1, R95 += 1, R81 += 1, R69 += 1, R64 += 1 };
  s4 -> s5 [0, 65535] { R117 += 1 };
  s4 -> s6 [0, 65535] { R117 += 1, R95 += 1, R81 += 1 };
  s4 -> s7 [0, 65535] { R117 += 1, R95 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R117 += 1, R95 += 1, R81 += 1, R69 += 1, R64 += 1 };
  s5 -> s5 [0, 65535] { R117 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s5 [0, 65535] { R117 += 1 };
  s6 -> s6 [0, 65535] { R117 += 1, R95 += 1, R81 += 1 };
  s6 -> s7 [0, 65535] { R117 += 1, R95 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R117 += 1 };
  s7 -> s7 [0, 65535] { R117 += 1, R95 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 = R67 && R2 = R71 && R3 = R117 && R8 = 0 && R9 = R93 && R66 = 0 && R70 - R93 = 1 && R72 = 0 && R78 = 0 && R82 = 0 && R83 = R93 && R86 = 0 && R87 = R93 && R92 = 0 && R96 = 10 && R97 = R117 && R98 = 10 && R99 = R117 && R100 = 10 && R101 = R117 && R102 = 10 && R103 = R117 && R104 = 10 && R105 = R117 && R106 = 10 && R107 = R117 && R108 = 10 && R109 = R117 && R110 = 10 && R111 = R117 && R112 = 10 && R113 = R117 && R114 = 10 && R115 = R117 && R116 = 10 && R0 != 0 && R4 < 1 && -1 < R67 && R93 < R71 && R73 < 12 && R79 < 12 && -1 < R93 && 9 < R117 && (R68 != 0 || R67 = R69 || (R64 = 0 && R67 = 0)) && (R73 != 11 || 10 < R65) && (R74 != 0 || ((R65 != R75 || R67 < 1 || R75 < 12) && (R67 != 0 || ((R65 != R75 || R75 < 12) && (R75 != 11 || 10 < R65 || R65 < 1) && (R65 = R75 || R75 = 11 || R65 < 1))) && (R75 != 11 || 10 < R65 || R67 < 1) && (R65 = R75 || R75 = 11 || R67 < 1))) && (R76 != 0 || ((R65 != R77 || R67 < 1 || R77 < 12) && (R67 != 0 || ((R65 != R77 || R77 < 12) && (R77 != 11 || 10 < R65 || R65 < 1) && (R65 = R77 || R77 = 11 || R65 < 1))) && (R77 != 11 || 10 < R65 || R67 < 1) && (R65 = R77 || R77 = 11 || R67 < 1))) && (R79 != 11 || 10 < R65) && (R80 != 0 || ((R65 != R81 || R67 < 1 || R81 < 12) && (R67 != 0 || ((R65 != R81 || R81 < 12) && (R81 != 11 || 10 < R65 || R65 < 1) && (R65 = R81 || R81 = 11 || R65 < 1))) && (R81 != 11 || 10 < R65 || R67 < 1) && (R65 = R81 || R81 = 11 || R67 < 1))) && (R84 != 0 || R85 = R93 || (R65 = 0 && R93 = 0)) && (R88 != 0 || R89 = R93 || (R65 = 0 && R93 = 0)) && (R90 != 0 || R91 = R93 || (R65 = 0 && R93 = 0)) && (R94 != 0 || R93 = R95 || (R65 = 0 && R93 = 0)) && (R65 = R73 || 10 < R73) && (R65 = R79 || 10 < R79) && (R68 = 0 || (R64 = 0 && R67 = 0)) && (R74 = 0 || (R67 = 0 && R65 < 1)) && (R76 = 0 || (R67 = 0 && R65 < 1)) && (R80 = 0 || (R67 = 0 && R65 < 1)) && (R84 = 0 || (R65 = 0 && R93 = 0)) && (R88 = 0 || (R65 = 0 && R93 = 0)) && (R90 = 0 || (R65 = 0 && R93 = 0)) && (R94 = 0 || (R65 = 0 && R93 = 0));
// End of Parikh automata intersection problem
