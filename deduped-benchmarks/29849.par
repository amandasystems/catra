// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10433, R10434, R10435, R10436, R10437, R10438, R10439, R10440, R10441, R10442, R10443, R10444, R10445, R10446, R10447, R10448, R10449, R10450, R10451, R10452, R10453, R10454, R10455, R10456, R10457, R10458, R10459, R10460, R10461, R10462, R10463, R10464, R10465, R10466, R10467, R10468, R10469, R10470, R10471, R10472, R10473, R10474, R10475, R10476, R10477, R10478, R10479, R10480, R10481, R10482, R10483, R10484, R10485, R10486, R10487, R10488, R10489, R10490, R10491, R10492, R10493, R10494, R10495, R10496, R10497, R10498, R10499, R10500, R10501, R10502, R10503, R10504, R10505, R10506, R10507, R10508, R10509, R10510, R10511, R10512, R10513, R10514, R10515, R10516, R10517, R10518, R10519, R10520, R10521, R10522, R10523, R10524, R10525, R10526, R10527, R10528, R10529, R10530, R10531, R10532, R10533, R10534, R10535, R10536, R10537, R10538, R10539, R10540, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R10496 += 1 };
  s0 -> s0 [0, 65535] { R10495 += 1, R10496 += 1 };
  s0 -> s2 [46, 46] { R10496 += 1 };
  s0 -> s3 [47, 47] { R10496 += 1 };
  s0 -> s1 [48, 65535] { R10496 += 1 };
  s1 -> s1 [0, 45] { R10496 += 1 };
  s1 -> s2 [46, 46] { R10496 += 1 };
  s1 -> s3 [47, 47] { R10496 += 1 };
  s1 -> s1 [48, 65535] { R10496 += 1 };
  s2 -> s1 [0, 45] { R10496 += 1 };
  s2 -> s2 [46, 46] { R10496 += 1 };
  s2 -> s3 [47, 47] { R10496 += 1 };
  s2 -> s1 [48, 114] { R10496 += 1 };
  s2 -> s8 [115, 115] { R10496 += 1 };
  s2 -> s1 [116, 65535] { R10496 += 1 };
  s3 -> s3 [0, 45] { R10496 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R10496 += 1 };
  s3 -> s3 [47, 65535] { R10496 += 1 };
  s4 -> s3 [0, 45] { R10496 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R10496 += 1 };
  s4 -> s3 [47, 114] { R10496 += 1 };
  s4 -> s5 [115, 115] { R10496 += 1 };
  s4 -> s3 [116, 65535] { R10496 += 1 };
  s5 -> s3 [0, 45] { R10496 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R10496 += 1 };
  s5 -> s3 [47, 110] { R10496 += 1 };
  s5 -> s6 [111, 111] { R10496 += 1 };
  s5 -> s3 [112, 65535] { R10496 += 1 };
  s6 -> s3 [0, 45] { R10496 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R10496 += 1 };
  s6 -> s3 [47, 98] { R10496 += 1 };
  s6 -> s7 [99, 99] { R10496 += 1 };
  s6 -> s3 [100, 65535] { R10496 += 1 };
  s7 -> s3 [0, 45] { R10496 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R10496 += 1 };
  s7 -> s3 [47, 106] { R10496 += 1 };
  s7 -> s3 [108, 65535] { R10496 += 1 };
  s8 -> s1 [0, 45] { R10496 += 1 };
  s8 -> s2 [46, 46] { R10496 += 1 };
  s8 -> s3 [47, 47] { R10496 += 1 };
  s8 -> s1 [48, 110] { R10496 += 1 };
  s8 -> s9 [111, 111] { R10496 += 1 };
  s8 -> s1 [112, 65535] { R10496 += 1 };
  s9 -> s1 [0, 45] { R10496 += 1 };
  s9 -> s2 [46, 46] { R10496 += 1 };
  s9 -> s3 [47, 47] { R10496 += 1 };
  s9 -> s1 [48, 98] { R10496 += 1 };
  s9 -> s10 [99, 99] { R10496 += 1 };
  s9 -> s1 [100, 65535] { R10496 += 1 };
  s10 -> s1 [0, 45] { R10496 += 1 };
  s10 -> s2 [46, 46] { R10496 += 1 };
  s10 -> s3 [47, 47] { R10496 += 1 };
  s10 -> s1 [48, 106] { R10496 += 1 };
  s10 -> s1 [108, 65535] { R10496 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R10498 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R10497 += 1, R10498 += 1 };
  s1 -> s1 [0, 65535] { R10498 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R10500 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10499 += 1, R10500 += 1 };
  s0 -> s2 [0, 65535] { R10500 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R10500 += 1 };
  s0 -> s1 [48, 65535] { R10500 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R10500 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R10500 += 1 };
  s1 -> s1 [48, 65535] { R10500 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R10500 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R10500 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R10500 += 1 };
  s2 -> s1 [48, 65535] { R10500 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10500 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R10502 += 1, R10320 += 1 };
  s0 -> s0 [0, 65535] { R10501 += 1, R10502 += 1 };
  s0 -> s2 [0, 65535] { R10502 += 1, R10319 += 1, R10320 += 1 };
  s0 -> s1 [38, 42] { R10502 += 1, R10320 += 1 };
  s0 -> s1 [44, 45] { R10502 += 1, R10320 += 1 };
  s0 -> s1 [47, 62] { R10502 += 1, R10320 += 1 };
  s0 -> s1 [64, 65535] { R10502 += 1, R10320 += 1 };
  s1 -> s1 [0, 36] { R10502 += 1, R10320 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10502 += 1 };
  s1 -> s1 [38, 42] { R10502 += 1, R10320 += 1 };
  s1 -> s1 [44, 45] { R10502 += 1, R10320 += 1 };
  s1 -> s1 [47, 62] { R10502 += 1, R10320 += 1 };
  s1 -> s1 [64, 65535] { R10502 += 1, R10320 += 1 };
  s2 -> s1 [0, 36] { R10502 += 1, R10320 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10502 += 1, R10319 += 1, R10320 += 1 };
  s2 -> s1 [38, 42] { R10502 += 1, R10320 += 1 };
  s2 -> s1 [44, 45] { R10502 += 1, R10320 += 1 };
  s2 -> s1 [47, 62] { R10502 += 1, R10320 += 1 };
  s2 -> s1 [64, 65535] { R10502 += 1, R10320 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R10504 += 1, R10321 += 1, R10322 += 1 };
  s0 -> s0 [0, 65535] { R10503 += 1, R10504 += 1 };
  s0 -> s2 [0, 65535] { R10504 += 1, R10322 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10504 += 1, R10321 += 1, R10322 += 1 };
  s1 -> s2 [0, 65535] { R10504 += 1, R10322 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R10504 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10504 += 1, R10322 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R10504 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R10506 += 1, R10323 += 1, R10324 += 1 };
  s0 -> s0 [0, 65535] { R10505 += 1, R10506 += 1 };
  s0 -> s3 [0, 65535] { R10506 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10506 += 1 };
  s1 -> s7 [0, 65535] { R10506 += 1, R10324 += 1 };
  s1 -> s1 [0, 65535] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10506 += 1, R10323 += 1, R10324 += 1 };
  s2 -> s3 [0, 65535] { R10506 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10506 += 1 };
  s3 -> s3 [0, 65535] { R10506 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R10506 += 1, R10324 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10506 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10506 += 1 };
  s7 -> s7 [0, 65535] { R10506 += 1, R10324 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10508 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R10508 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R10507 += 1, R10508 += 1 };
  s0 -> s3 [0, 65535] { R10508 += 1, R10325 += 1, R10326 += 1 };
  s1 -> s1 [0, 65535] { R10508 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s2 [0, 65535] { R10508 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R10508 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10508 += 1, R10326 += 1 };
  s2 -> s2 [0, 65535] { R10508 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R10508 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10508 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s2 [0, 65535] { R10508 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R10508 += 1, R10325 += 1, R10326 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10508 += 1, R10326 += 1 };
  s5 -> s6 [0, 65535] { R10508 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10508 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R10510 += 1, R10464 += 1 };
  s0 -> s2 [0, 65535] { R10510 += 1, R10463 += 1, R10464 += 1 };
  s0 -> s0 [0, 65535] { R10509 += 1, R10510 += 1 };
  s0 -> s1 [45, 63] { R10510 += 1, R10464 += 1 };
  s0 -> s3 [87, 87] { R10510 += 1, R10464 += 1 };
  s0 -> s1 [88, 65535] { R10510 += 1, R10464 += 1 };
  s1 -> s1 [0, 43] { R10510 += 1, R10464 += 1 };
  s1 -> s1 [45, 63] { R10510 += 1, R10464 += 1 };
  s1 -> s3 [87, 87] { R10510 += 1, R10464 += 1 };
  s1 -> s1 [88, 65535] { R10510 += 1, R10464 += 1 };
  s2 -> s1 [0, 43] { R10510 += 1, R10464 += 1 };
  s2 -> s2 [0, 65535] { R10510 += 1, R10463 += 1, R10464 += 1 };
  s2 -> s1 [45, 63] { R10510 += 1, R10464 += 1 };
  s2 -> s3 [87, 87] { R10510 += 1, R10464 += 1 };
  s2 -> s1 [88, 65535] { R10510 += 1, R10464 += 1 };
  s3 -> s3 [0, 43] { R10510 += 1, R10464 += 1 };
  s3 -> s3 [0, 65535] { R10510 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R10510 += 1, R10464 += 1 };
  s3 -> s3 [87, 65535] { R10510 += 1, R10464 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R10512 += 1, R10466 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R10512 += 1, R10465 += 1, R10466 += 1 };
  s0 -> s0 [0, 65535] { R10511 += 1, R10512 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10512 += 1, R10466 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R10512 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10512 += 1, R10466 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R10512 += 1, R10465 += 1, R10466 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10512 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R10514 += 1, R10468 += 1 };
  s0 -> s2 [0, 65535] { R10514 += 1, R10468 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R10513 += 1, R10514 += 1 };
  s0 -> s3 [0, 65535] { R10514 += 1, R10467 += 1, R10468 += 1 };
  s0 -> s4 [58, 58] { R10514 += 1, R10468 += 1 };
  s0 -> s1 [59, 65535] { R10514 += 1, R10468 += 1 };
  s1 -> s1 [0, 57] { R10514 += 1, R10468 += 1 };
  s1 -> s1 [0, 65535] { R10514 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R10514 += 1, R10468 += 1 };
  s1 -> s1 [59, 65535] { R10514 += 1, R10468 += 1 };
  s2 -> s1 [0, 57] { R10514 += 1, R10468 += 1 };
  s2 -> s2 [0, 65535] { R10514 += 1, R10468 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10514 += 1 };
  s2 -> s4 [58, 58] { R10514 += 1, R10468 += 1 };
  s2 -> s1 [59, 65535] { R10514 += 1, R10468 += 1 };
  s3 -> s1 [0, 57] { R10514 += 1, R10468 += 1 };
  s3 -> s2 [0, 65535] { R10514 += 1, R10468 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10514 += 1, R10467 += 1, R10468 += 1 };
  s3 -> s4 [58, 58] { R10514 += 1, R10468 += 1 };
  s3 -> s1 [59, 65535] { R10514 += 1, R10468 += 1 };
  s4 -> s4 [0, 65535] { R10514 += 1, R10468 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10514 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R10516 += 1, R10470 += 1 };
  s0 -> s2 [0, 65535] { R10516 += 1, R10469 += 1, R10470 += 1 };
  s0 -> s0 [0, 65535] { R10515 += 1, R10516 += 1 };
  s0 -> s3 [0, 65535] { R10516 += 1, R10470 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R10516 += 1, R10470 += 1 };
  s0 -> s1 [88, 65535] { R10516 += 1, R10470 += 1 };
  s1 -> s1 [0, 86] { R10516 += 1, R10470 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10516 += 1 };
  s1 -> s4 [87, 87] { R10516 += 1, R10470 += 1 };
  s1 -> s1 [88, 65535] { R10516 += 1, R10470 += 1 };
  s2 -> s1 [0, 86] { R10516 += 1, R10470 += 1 };
  s2 -> s2 [0, 65535] { R10516 += 1, R10469 += 1, R10470 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10516 += 1, R10470 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R10516 += 1, R10470 += 1 };
  s2 -> s1 [88, 65535] { R10516 += 1, R10470 += 1 };
  s3 -> s1 [0, 86] { R10516 += 1, R10470 += 1 };
  s3 -> s5 [0, 65535] { R10516 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10516 += 1, R10470 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R10516 += 1, R10470 += 1 };
  s3 -> s1 [88, 65535] { R10516 += 1, R10470 += 1 };
  s4 -> s4 [0, 65535] { R10516 += 1, R10470 += 1 };
  s5 -> s5 [0, 65535] { R10516 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R10517 += 1, R10518 += 1 };
  s0 -> s2 [0, 65535] { R10518 += 1, R10472 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R10518 += 1, R10471 += 1, R10472 += 1 };
  s0 -> s4 [91, 91] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R10518 += 1, R10472 += 1 };
  s1 -> s6 [0, 65535] { R10518 += 1 };
  s2 -> s1 [0, 90] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R10518 += 1, R10472 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10518 += 1 };
  s2 -> s4 [91, 91] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R10518 += 1, R10472 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10518 += 1, R10471 += 1, R10472 += 1 };
  s3 -> s4 [91, 91] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R10518 += 1, R10472 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10518 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10518 += 1, R10472 += 1 };
  s7 -> s6 [0, 65535] { R10518 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10520 += 1, R10474 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R10520 += 1, R10474 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R10520 += 1, R10473 += 1, R10474 += 1 };
  s0 -> s0 [0, 65535] { R10519 += 1, R10520 += 1 };
  s1 -> s1 [0, 65535] { R10520 += 1, R10474 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10520 += 1, R10474 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R10520 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10520 += 1, R10474 += 1 };
  s2 -> s2 [0, 65535] { R10520 += 1, R10474 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R10520 += 1 };
  s3 -> s1 [0, 65535] { R10520 += 1, R10474 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10520 += 1, R10474 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R10520 += 1, R10473 += 1, R10474 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10520 += 1, R10474 += 1 };
  s5 -> s6 [0, 65535] { R10520 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10520 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10522 += 1, R10475 += 1, R10476 += 1 };
  s0 -> s2 [0, 65535] { R10522 += 1, R10476 += 1, R10440 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R10521 += 1, R10522 += 1 };
  s0 -> s3 [0, 65535] { R10522 += 1, R10476 += 1, R10439 += 1, R10440 += 1 };
  s1 -> s1 [0, 65535] { R10522 += 1, R10475 += 1, R10476 += 1 };
  s1 -> s2 [0, 65535] { R10522 += 1, R10476 += 1, R10440 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R10522 += 1, R10476 += 1, R10439 += 1, R10440 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10522 += 1, R10476 += 1 };
  s2 -> s2 [0, 65535] { R10522 += 1, R10476 += 1, R10440 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10522 += 1 };
  s3 -> s2 [0, 65535] { R10522 += 1, R10476 += 1, R10440 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R10522 += 1, R10476 += 1, R10439 += 1, R10440 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10522 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10522 += 1 };
  s6 -> s6 [0, 65535] { R10522 += 1, R10476 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10522 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10524 += 1, R10478 += 1, R10441 += 1, R10442 += 1 };
  s0 -> s0 [0, 65535] { R10523 += 1, R10524 += 1 };
  s0 -> s2 [0, 65535] { R10524 += 1, R10477 += 1, R10478 += 1 };
  s0 -> s3 [108, 108] { R10524 += 1, R10478 += 1, R10442 += 1 };
  s1 -> s1 [0, 65535] { R10524 += 1, R10478 += 1, R10441 += 1, R10442 += 1 };
  s1 -> s3 [108, 108] { R10524 += 1, R10478 += 1, R10442 += 1 };
  s2 -> s1 [0, 65535] { R10524 += 1, R10478 += 1, R10441 += 1, R10442 += 1 };
  s2 -> s2 [0, 65535] { R10524 += 1, R10477 += 1, R10478 += 1 };
  s2 -> s3 [108, 108] { R10524 += 1, R10478 += 1, R10442 += 1 };
  s3 -> s4 [111, 111] { R10524 += 1, R10478 += 1, R10442 += 1 };
  s4 -> s5 [99, 99] { R10524 += 1, R10478 += 1, R10442 += 1 };
  s5 -> s6 [97, 97] { R10524 += 1, R10478 += 1, R10442 += 1 };
  s6 -> s7 [108, 108] { R10524 += 1, R10478 += 1, R10442 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10524 += 1, R10478 += 1 };
  s7 -> s9 [0, 65535] { R10524 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10524 += 1 };
  accepting s7, s8, s9;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s0 -> s0 [0, 65535] { R10525 += 1, R10526 += 1 };
  s0 -> s2 [0, 65535] { R10526 += 1, R10479 += 1, R10480 += 1 };
  s0 -> s3 [0, 65535] { R10526 += 1, R10480 += 1, R10447 += 1, R10448 += 1 };
  s0 -> s4 [87, 87] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s0 -> s1 [88, 65535] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s1 -> s1 [0, 86] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s1 -> s4 [87, 87] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s1 -> s1 [88, 65535] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s2 -> s1 [0, 86] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s2 -> s2 [0, 65535] { R10526 += 1, R10479 += 1, R10480 += 1 };
  s2 -> s3 [0, 65535] { R10526 += 1, R10480 += 1, R10447 += 1, R10448 += 1 };
  s2 -> s4 [87, 87] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s2 -> s1 [88, 65535] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s3 -> s1 [0, 86] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s3 -> s3 [0, 65535] { R10526 += 1, R10480 += 1, R10447 += 1, R10448 += 1 };
  s3 -> s4 [87, 87] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s3 -> s1 [88, 65535] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s4 -> s4 [0, 65535] { R10526 += 1, R10480 += 1, R10448 += 1 };
  s4 -> s5 [0, 65535] { R10526 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10526 += 1, R10480 += 1 };
  s5 -> s5 [0, 65535] { R10526 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10526 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10526 += 1, R10480 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10528 += 1, R10481 += 1, R10482 += 1 };
  s0 -> s0 [0, 65535] { R10527 += 1, R10528 += 1 };
  s0 -> s2 [0, 65535] { R10528 += 1, R10482 += 1, R10450 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R10528 += 1, R10482 += 1, R10449 += 1, R10450 += 1 };
  s1 -> s1 [0, 65535] { R10528 += 1, R10481 += 1, R10482 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10528 += 1, R10482 += 1, R10450 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R10528 += 1, R10482 += 1, R10449 += 1, R10450 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10528 += 1, R10482 += 1, R10450 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R10528 += 1, R10482 += 1 };
  s2 -> s5 [0, 65535] { R10528 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10528 += 1, R10482 += 1, R10450 += 1, R1 += 1 };
  s3 -> s5 [0, 65535] { R10528 += 1 };
  s3 -> s3 [0, 65535] { R10528 += 1, R10482 += 1, R10449 += 1, R10450 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10528 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10528 += 1, R10482 += 1 };
  s6 -> s5 [0, 65535] { R10528 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s0 -> s0 [0, 65535] { R10529 += 1, R10530 += 1 };
  s0 -> s2 [0, 65535] { R10530 += 1, R10484 += 1, R10452 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R10530 += 1, R10484 += 1, R10451 += 1, R10452 += 1 };
  s0 -> s4 [0, 65535] { R10530 += 1, R10483 += 1, R10484 += 1 };
  s0 -> s5 [87, 87] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s0 -> s1 [88, 65535] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s1 -> s1 [0, 86] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10530 += 1 };
  s1 -> s1 [0, 65535] { R10530 += 1, R10484 += 1 };
  s1 -> s5 [87, 87] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s1 -> s1 [88, 65535] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s2 -> s1 [0, 86] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10530 += 1, R10484 += 1, R10452 += 1, R7 += 1 };
  s2 -> s7 [0, 65535] { R10530 += 1 };
  s2 -> s8 [0, 65535] { R10530 += 1, R10484 += 1 };
  s2 -> s5 [87, 87] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s2 -> s1 [88, 65535] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s3 -> s1 [0, 86] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R10530 += 1, R10484 += 1, R10452 += 1, R7 += 1 };
  s3 -> s7 [0, 65535] { R10530 += 1 };
  s3 -> s3 [0, 65535] { R10530 += 1, R10484 += 1, R10451 += 1, R10452 += 1 };
  s3 -> s5 [87, 87] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s3 -> s1 [88, 65535] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s4 -> s1 [0, 86] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R10530 += 1, R10484 += 1, R10452 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R10530 += 1, R10484 += 1, R10451 += 1, R10452 += 1 };
  s4 -> s4 [0, 65535] { R10530 += 1, R10483 += 1, R10484 += 1 };
  s4 -> s5 [87, 87] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s4 -> s1 [88, 65535] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s5 -> s5 [0, 65535] { R10530 += 1, R10484 += 1, R10452 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10530 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10530 += 1 };
  s8 -> s8 [0, 65535] { R10530 += 1, R10484 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s0 -> s0 [0, 65535] { R10531 += 1, R10532 += 1 };
  s0 -> s2 [0, 65535] { R10532 += 1, R10486 += 1, R10454 += 1, R10433 += 1, R10434 += 1 };
  s0 -> s3 [0, 65535] { R10532 += 1, R10485 += 1, R10486 += 1 };
  s0 -> s4 [0, 65535] { R10532 += 1, R10486 += 1, R10453 += 1, R10454 += 1 };
  s0 -> s1 [88, 65535] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s1 -> s1 [0, 86] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10532 += 1 };
  s1 -> s7 [0, 65535] { R10532 += 1, R10486 += 1 };
  s1 -> s1 [0, 65535] { R10532 += 1, R10486 += 1, R10454 += 1 };
  s1 -> s1 [88, 65535] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s2 -> s1 [0, 86] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s2 -> s2 [0, 65535] { R10532 += 1, R10486 += 1, R10454 += 1, R10433 += 1, R10434 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10532 += 1 };
  s2 -> s7 [0, 65535] { R10532 += 1, R10486 += 1 };
  s2 -> s1 [88, 65535] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s3 -> s1 [0, 86] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s3 -> s2 [0, 65535] { R10532 += 1, R10486 += 1, R10454 += 1, R10433 += 1, R10434 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10532 += 1, R10485 += 1, R10486 += 1 };
  s3 -> s4 [0, 65535] { R10532 += 1, R10486 += 1, R10453 += 1, R10454 += 1 };
  s3 -> s1 [88, 65535] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s4 -> s1 [0, 86] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s4 -> s2 [0, 65535] { R10532 += 1, R10486 += 1, R10454 += 1, R10433 += 1, R10434 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10532 += 1 };
  s4 -> s4 [0, 65535] { R10532 += 1, R10486 += 1, R10453 += 1, R10454 += 1 };
  s4 -> s1 [88, 65535] { R10532 += 1, R10486 += 1, R10454 += 1, R10434 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10532 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10532 += 1 };
  s7 -> s7 [0, 65535] { R10532 += 1, R10486 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10534 += 1, R10488 += 1, R10455 += 1, R10456 += 1 };
  s0 -> s0 [0, 65535] { R10533 += 1, R10534 += 1 };
  s0 -> s2 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1, R10436 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1, R10435 += 1, R10436 += 1 };
  s0 -> s4 [0, 65535] { R10534 += 1, R10487 += 1, R10488 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10534 += 1, R10488 += 1, R10455 += 1, R10456 += 1 };
  s1 -> s6 [0, 65535] { R10534 += 1 };
  s1 -> s2 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1, R10436 += 1, R5988 += 1 };
  s1 -> s3 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1, R10435 += 1, R10436 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10534 += 1 };
  s2 -> s2 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1, R10436 += 1, R5988 += 1 };
  s2 -> s7 [0, 65535] { R10534 += 1, R10488 += 1 };
  s2 -> s8 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10534 += 1 };
  s3 -> s2 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1, R10436 += 1, R5988 += 1 };
  s3 -> s7 [0, 65535] { R10534 += 1, R10488 += 1 };
  s3 -> s3 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1, R10435 += 1, R10436 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R10534 += 1, R10488 += 1, R10455 += 1, R10456 += 1 };
  s4 -> s2 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1, R10436 += 1, R5988 += 1 };
  s4 -> s3 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1, R10435 += 1, R10436 += 1 };
  s4 -> s4 [0, 65535] { R10534 += 1, R10487 += 1, R10488 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10534 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10534 += 1 };
  s7 -> s7 [0, 65535] { R10534 += 1, R10488 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10534 += 1 };
  s8 -> s7 [0, 65535] { R10534 += 1, R10488 += 1 };
  s8 -> s8 [0, 65535] { R10534 += 1, R10488 += 1, R10456 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10536 += 1, R10489 += 1, R10490 += 1 };
  s0 -> s0 [0, 65535] { R10535 += 1, R10536 += 1 };
  s0 -> s2 [0, 65535] { R10536 += 1, R10490 += 1, R10458 += 1, R10437 += 1, R10438 += 1 };
  s0 -> s3 [0, 65535] { R10536 += 1, R10490 += 1, R10457 += 1, R10458 += 1 };
  s0 -> s4 [116, 116] { R10536 += 1, R10490 += 1, R10458 += 1, R10438 += 1 };
  s1 -> s1 [0, 65535] { R10536 += 1, R10489 += 1, R10490 += 1 };
  s1 -> s2 [0, 65535] { R10536 += 1, R10490 += 1, R10458 += 1, R10437 += 1, R10438 += 1 };
  s1 -> s3 [0, 65535] { R10536 += 1, R10490 += 1, R10457 += 1, R10458 += 1 };
  s1 -> s4 [116, 116] { R10536 += 1, R10490 += 1, R10458 += 1, R10438 += 1 };
  s2 -> s2 [0, 65535] { R10536 += 1, R10490 += 1, R10458 += 1, R10437 += 1, R10438 += 1 };
  s2 -> s4 [116, 116] { R10536 += 1, R10490 += 1, R10458 += 1, R10438 += 1 };
  s3 -> s2 [0, 65535] { R10536 += 1, R10490 += 1, R10458 += 1, R10437 += 1, R10438 += 1 };
  s3 -> s3 [0, 65535] { R10536 += 1, R10490 += 1, R10457 += 1, R10458 += 1 };
  s3 -> s4 [116, 116] { R10536 += 1, R10490 += 1, R10458 += 1, R10438 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10536 += 1 };
  s4 -> s4 [0, 65535] { R10536 += 1, R10490 += 1, R10458 += 1 };
  s4 -> s7 [0, 65535] { R10536 += 1, R10490 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10536 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10536 += 1 };
  s7 -> s7 [0, 65535] { R10536 += 1, R10490 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10538 += 1, R10491 += 1, R10492 += 1 };
  s0 -> s2 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1, R10444 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R10538 += 1, R10492 += 1, R10459 += 1, R10460 += 1 };
  s0 -> s4 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1, R10443 += 1, R10444 += 1 };
  s0 -> s0 [0, 65535] { R10537 += 1, R10538 += 1 };
  s1 -> s1 [0, 65535] { R10538 += 1, R10491 += 1, R10492 += 1 };
  s1 -> s2 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1, R10444 += 1, R5989 += 1 };
  s1 -> s3 [0, 65535] { R10538 += 1, R10492 += 1, R10459 += 1, R10460 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1, R10443 += 1, R10444 += 1 };
  s2 -> s8 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1 };
  s2 -> s5 [0, 65535] { R10538 += 1, R10492 += 1 };
  s2 -> s2 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1, R10444 += 1, R5989 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R10538 += 1 };
  s3 -> s2 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1, R10444 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R10538 += 1, R10492 += 1, R10459 += 1, R10460 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R10538 += 1 };
  s3 -> s4 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1, R10443 += 1, R10444 += 1 };
  s4 -> s5 [0, 65535] { R10538 += 1, R10492 += 1 };
  s4 -> s2 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1, R10444 += 1, R5989 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10538 += 1 };
  s4 -> s4 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1, R10443 += 1, R10444 += 1 };
  s5 -> s5 [0, 65535] { R10538 += 1, R10492 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10538 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10538 += 1 };
  s8 -> s8 [0, 65535] { R10538 += 1, R10492 += 1, R10460 += 1 };
  s8 -> s5 [0, 65535] { R10538 += 1, R10492 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10538 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10540 += 1, R10494 += 1, R10461 += 1, R10462 += 1 };
  s0 -> s0 [0, 65535] { R10539 += 1, R10540 += 1 };
  s0 -> s2 [0, 65535] { R10540 += 1, R10494 += 1, R10462 += 1, R10445 += 1, R10446 += 1 };
  s0 -> s3 [0, 65535] { R10540 += 1, R10493 += 1, R10494 += 1 };
  s0 -> s4 [104, 104] { R10540 += 1, R10494 += 1, R10462 += 1, R10446 += 1 };
  s1 -> s1 [0, 65535] { R10540 += 1, R10494 += 1, R10461 += 1, R10462 += 1 };
  s1 -> s2 [0, 65535] { R10540 += 1, R10494 += 1, R10462 += 1, R10445 += 1, R10446 += 1 };
  s1 -> s4 [104, 104] { R10540 += 1, R10494 += 1, R10462 += 1, R10446 += 1 };
  s2 -> s2 [0, 65535] { R10540 += 1, R10494 += 1, R10462 += 1, R10445 += 1, R10446 += 1 };
  s2 -> s4 [104, 104] { R10540 += 1, R10494 += 1, R10462 += 1, R10446 += 1 };
  s3 -> s1 [0, 65535] { R10540 += 1, R10494 += 1, R10461 += 1, R10462 += 1 };
  s3 -> s2 [0, 65535] { R10540 += 1, R10494 += 1, R10462 += 1, R10445 += 1, R10446 += 1 };
  s3 -> s3 [0, 65535] { R10540 += 1, R10493 += 1, R10494 += 1 };
  s3 -> s4 [104, 104] { R10540 += 1, R10494 += 1, R10462 += 1, R10446 += 1 };
  s4 -> s5 [111, 111] { R10540 += 1, R10494 += 1, R10462 += 1, R10446 += 1 };
  s5 -> s6 [115, 115] { R10540 += 1, R10494 += 1, R10462 += 1, R10446 += 1 };
  s6 -> s7 [0, 65535] { R10540 += 1, R10494 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10540 += 1, R10494 += 1, R10462 += 1 };
  s6 -> s9 [0, 65535] { R10540 += 1 };
  s7 -> s7 [0, 65535] { R10540 += 1, R10494 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R10540 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10540 += 1 };
  accepting s6, s7, s8, s9;
};
};
constraint R1 = R10438 && R2 = R10462 && R3 = R10326 && R4 = R10540 && R15 = 0 && R16 = R10494 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R10319 - R10494 = 1 && R10320 = R10326 && R10321 - R10494 = 1 && R10322 = R10326 && R10323 - R10494 = 1 && R10324 = R10326 && R10325 - R10494 = 1 && R10437 = 0 && R10441 = 0 && R10442 = 0 && R10445 = 0 && R10446 = 0 && R10447 = 0 && R10448 = R10462 && R10449 = 0 && R10450 = R10462 && R10451 = 0 && R10452 = R10462 && R10453 = 0 && R10454 = R10462 && R10455 = 0 && R10456 = R10462 && R10457 = 0 && R10458 = R10462 && R10459 = 0 && R10460 = R10462 && R10461 = 0 && R10463 = 0 && R10464 = R10494 && R10465 = 0 && R10466 = R10494 && R10467 = 0 && R10468 = R10494 && R10469 = 0 && R10470 = R10494 && R10471 = 0 && R10472 = R10494 && R10473 = 0 && R10474 = R10494 && R10475 = 0 && R10476 = R10494 && R10477 = 0 && R10478 = R10494 && R10479 = 0 && R10480 = R10494 && R10481 = 0 && R10482 = R10494 && R10483 = 0 && R10484 = R10494 && R10485 = 0 && R10486 = R10494 && R10487 = 0 && R10488 = R10494 && R10489 = 0 && R10490 = R10494 && R10491 = 0 && R10492 = R10494 && R10493 = 0 && R10495 = 10 && R10496 = R10540 && R10497 = 10 && R10498 = R10540 && R10499 = 10 && R10500 = R10540 && R10501 = 10 && R10502 = R10540 && R10503 = 10 && R10504 = R10540 && R10505 = 10 && R10506 = R10540 && R10507 = 10 && R10508 = R10540 && R10509 = 10 && R10510 = R10540 && R10511 = 10 && R10512 = R10540 && R10513 = 10 && R10514 = R10540 && R10515 = 10 && R10516 = R10540 && R10517 = 10 && R10518 = R10540 && R10519 = 10 && R10520 = R10540 && R10521 = 10 && R10522 = R10540 && R10523 = 10 && R10524 = R10540 && R10525 = 10 && R10526 = R10540 && R10527 = 10 && R10528 = R10540 && R10529 = 10 && R10530 = R10540 && R10531 = 10 && R10532 = R10540 && R10533 = 10 && R10534 = R10540 && R10535 = 10 && R10536 = R10540 && R10537 = 10 && R10538 = R10540 && R10539 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R10494 < R10326 && -1 < R10438 && 0 < R10462 && -1 < R10494 && 9 < R10540 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R10433 != 0 || R10434 = R10438 || (R5988 = 0 && R10438 = 0)) && (R10435 != 0 || R10436 = R10438 || (R5988 = 0 && R10438 = 0)) && (R5989 = 0 || (R10443 = 0 && R10444 = 0)) && (R5990 = 0 || (R10439 = 0 && R10440 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R10433 = 0 || (R5988 = 0 && R10438 = 0)) && (R10435 = 0 || (R5988 = 0 && R10438 = 0));
// End of Parikh automata intersection problem
