// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6007, R6008, R6009, R6010, R6011, R6012, R6013, R6014, R6015, R6016, R6017, R6018, R6019, R6020, R6021, R6022, R6023, R6024, R6025, R6026, R6027, R6028, R6029, R6030, R6031, R6032, R6033, R6034, R6035, R6036, R6037, R6038, R6039, R6040, R6041, R6042, R6043, R6044, R6045, R6046, R6047, R6048, R6049, R6050, R6051, R6052, R6053, R6054, R6055, R6056, R6057, R6058, R6059, R6060, R6061, R6062, R6063, R6064, R6065, R6066, R6067, R6068, R6069, R6070, R6071, R6072, R6073, R6074, R6075, R6076, R6077, R6078, R6079, R6080, R6081, R6082, R6083, R6084, R6085, R6086, R6087, R6088, R6089, R6090, R6091, R6092, R6093, R6094, R6095, R6096, R6097, R6098, R6099, R6100, R6101, R6102, R6103, R6104, R6105, R6106, R6107, R6108, R6109, R6110, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R6066 += 1 };
  s0 -> s0 [0, 65535] { R6065 += 1, R6066 += 1 };
  s0 -> s2 [46, 46] { R6066 += 1 };
  s0 -> s3 [47, 47] { R6066 += 1 };
  s0 -> s1 [48, 65535] { R6066 += 1 };
  s1 -> s1 [0, 45] { R6066 += 1 };
  s1 -> s2 [46, 46] { R6066 += 1 };
  s1 -> s3 [47, 47] { R6066 += 1 };
  s1 -> s1 [48, 65535] { R6066 += 1 };
  s2 -> s1 [0, 45] { R6066 += 1 };
  s2 -> s2 [46, 46] { R6066 += 1 };
  s2 -> s3 [47, 47] { R6066 += 1 };
  s2 -> s1 [48, 114] { R6066 += 1 };
  s2 -> s8 [115, 115] { R6066 += 1 };
  s2 -> s1 [116, 65535] { R6066 += 1 };
  s3 -> s3 [0, 45] { R6066 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R6066 += 1 };
  s3 -> s3 [47, 65535] { R6066 += 1 };
  s4 -> s3 [0, 45] { R6066 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R6066 += 1 };
  s4 -> s3 [47, 114] { R6066 += 1 };
  s4 -> s5 [115, 115] { R6066 += 1 };
  s4 -> s3 [116, 65535] { R6066 += 1 };
  s5 -> s3 [0, 45] { R6066 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R6066 += 1 };
  s5 -> s3 [47, 110] { R6066 += 1 };
  s5 -> s6 [111, 111] { R6066 += 1 };
  s5 -> s3 [112, 65535] { R6066 += 1 };
  s6 -> s3 [0, 45] { R6066 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R6066 += 1 };
  s6 -> s3 [47, 98] { R6066 += 1 };
  s6 -> s7 [99, 99] { R6066 += 1 };
  s6 -> s3 [100, 65535] { R6066 += 1 };
  s7 -> s3 [0, 45] { R6066 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R6066 += 1 };
  s7 -> s3 [47, 106] { R6066 += 1 };
  s7 -> s3 [108, 65535] { R6066 += 1 };
  s8 -> s1 [0, 45] { R6066 += 1 };
  s8 -> s2 [46, 46] { R6066 += 1 };
  s8 -> s3 [47, 47] { R6066 += 1 };
  s8 -> s1 [48, 110] { R6066 += 1 };
  s8 -> s9 [111, 111] { R6066 += 1 };
  s8 -> s1 [112, 65535] { R6066 += 1 };
  s9 -> s1 [0, 45] { R6066 += 1 };
  s9 -> s2 [46, 46] { R6066 += 1 };
  s9 -> s3 [47, 47] { R6066 += 1 };
  s9 -> s1 [48, 98] { R6066 += 1 };
  s9 -> s10 [99, 99] { R6066 += 1 };
  s9 -> s1 [100, 65535] { R6066 += 1 };
  s10 -> s1 [0, 45] { R6066 += 1 };
  s10 -> s2 [46, 46] { R6066 += 1 };
  s10 -> s3 [47, 47] { R6066 += 1 };
  s10 -> s1 [48, 106] { R6066 += 1 };
  s10 -> s1 [108, 65535] { R6066 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R6068 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R6067 += 1, R6068 += 1 };
  s1 -> s1 [0, 65535] { R6068 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R6070 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R6069 += 1, R6070 += 1 };
  s0 -> s2 [0, 65535] { R6070 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R6070 += 1 };
  s0 -> s1 [48, 65535] { R6070 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R6070 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R6070 += 1 };
  s1 -> s1 [48, 65535] { R6070 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R6070 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R6070 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R6070 += 1 };
  s2 -> s1 [48, 65535] { R6070 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6070 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R6072 += 1, R6000 += 1 };
  s0 -> s2 [0, 65535] { R6072 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R6071 += 1, R6072 += 1 };
  s0 -> s1 [38, 42] { R6072 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R6072 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R6072 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R6072 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R6072 += 1, R6000 += 1 };
  s1 -> s1 [0, 65535] { R6072 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R6072 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R6072 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R6072 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R6072 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R6072 += 1, R6000 += 1 };
  s2 -> s2 [0, 65535] { R6072 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R6072 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R6072 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R6072 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R6072 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R6073 += 1, R6074 += 1 };
  s0 -> s1 [0, 65535] { R6074 += 1, R6001 += 1, R6002 += 1 };
  s0 -> s2 [0, 65535] { R6074 += 1, R6002 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6074 += 1, R6001 += 1, R6002 += 1 };
  s1 -> s2 [0, 65535] { R6074 += 1, R6002 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R6074 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6074 += 1, R6002 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R6074 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R6075 += 1, R6076 += 1 };
  s0 -> s2 [0, 65535] { R6076 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s3 [0, 65535] { R6076 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R6076 += 1, R6004 += 1 };
  s1 -> s6 [0, 65535] { R6076 += 1 };
  s2 -> s1 [0, 62] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6076 += 1, R6003 += 1, R6004 += 1 };
  s2 -> s3 [0, 65535] { R6076 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6076 += 1 };
  s3 -> s3 [0, 65535] { R6076 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R6076 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6076 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6076 += 1, R6004 += 1 };
  s7 -> s6 [0, 65535] { R6076 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6078 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R6077 += 1, R6078 += 1 };
  s0 -> s2 [0, 65535] { R6078 += 1, R6005 += 1, R6006 += 1 };
  s0 -> s3 [0, 65535] { R6078 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R6078 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6078 += 1 };
  s1 -> s3 [0, 65535] { R6078 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s2 -> s1 [0, 65535] { R6078 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6078 += 1, R6005 += 1, R6006 += 1 };
  s2 -> s3 [0, 65535] { R6078 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R6078 += 1, R6006 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6078 += 1 };
  s3 -> s3 [0, 65535] { R6078 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R6078 += 1, R6006 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6078 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6078 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R6080 += 1, R6034 += 1 };
  s0 -> s0 [0, 65535] { R6079 += 1, R6080 += 1 };
  s0 -> s2 [0, 65535] { R6080 += 1, R6033 += 1, R6034 += 1 };
  s0 -> s1 [45, 63] { R6080 += 1, R6034 += 1 };
  s0 -> s3 [87, 87] { R6080 += 1, R6034 += 1 };
  s0 -> s1 [88, 65535] { R6080 += 1, R6034 += 1 };
  s1 -> s1 [0, 43] { R6080 += 1, R6034 += 1 };
  s1 -> s1 [45, 63] { R6080 += 1, R6034 += 1 };
  s1 -> s3 [87, 87] { R6080 += 1, R6034 += 1 };
  s1 -> s1 [88, 65535] { R6080 += 1, R6034 += 1 };
  s2 -> s1 [0, 43] { R6080 += 1, R6034 += 1 };
  s2 -> s2 [0, 65535] { R6080 += 1, R6033 += 1, R6034 += 1 };
  s2 -> s1 [45, 63] { R6080 += 1, R6034 += 1 };
  s2 -> s3 [87, 87] { R6080 += 1, R6034 += 1 };
  s2 -> s1 [88, 65535] { R6080 += 1, R6034 += 1 };
  s3 -> s3 [0, 43] { R6080 += 1, R6034 += 1 };
  s3 -> s3 [0, 65535] { R6080 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R6080 += 1, R6034 += 1 };
  s3 -> s3 [87, 65535] { R6080 += 1, R6034 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R6081 += 1, R6082 += 1 };
  s0 -> s1 [0, 65535] { R6082 += 1, R6035 += 1, R6036 += 1 };
  s0 -> s2 [0, 65535] { R6082 += 1, R6036 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R6082 += 1, R6035 += 1, R6036 += 1 };
  s1 -> s2 [0, 65535] { R6082 += 1, R6036 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6082 += 1 };
  s2 -> s2 [0, 65535] { R6082 += 1, R6036 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6082 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R6084 += 1, R6038 += 1 };
  s0 -> s2 [0, 65535] { R6084 += 1, R6038 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R6083 += 1, R6084 += 1 };
  s0 -> s3 [0, 65535] { R6084 += 1, R6037 += 1, R6038 += 1 };
  s0 -> s4 [58, 58] { R6084 += 1, R6038 += 1 };
  s0 -> s1 [59, 65535] { R6084 += 1, R6038 += 1 };
  s1 -> s1 [0, 57] { R6084 += 1, R6038 += 1 };
  s1 -> s1 [0, 65535] { R6084 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R6084 += 1, R6038 += 1 };
  s1 -> s1 [59, 65535] { R6084 += 1, R6038 += 1 };
  s2 -> s1 [0, 57] { R6084 += 1, R6038 += 1 };
  s2 -> s2 [0, 65535] { R6084 += 1, R6038 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R6084 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R6084 += 1, R6038 += 1 };
  s2 -> s1 [59, 65535] { R6084 += 1, R6038 += 1 };
  s3 -> s1 [0, 57] { R6084 += 1, R6038 += 1 };
  s3 -> s2 [0, 65535] { R6084 += 1, R6038 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6084 += 1, R6037 += 1, R6038 += 1 };
  s3 -> s4 [58, 58] { R6084 += 1, R6038 += 1 };
  s3 -> s1 [59, 65535] { R6084 += 1, R6038 += 1 };
  s4 -> s4 [0, 65535] { R6084 += 1, R6038 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6084 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R6086 += 1, R6040 += 1 };
  s0 -> s0 [0, 65535] { R6085 += 1, R6086 += 1 };
  s0 -> s2 [0, 65535] { R6086 += 1, R6039 += 1, R6040 += 1 };
  s0 -> s3 [0, 65535] { R6086 += 1, R6040 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R6086 += 1, R6040 += 1 };
  s0 -> s1 [88, 65535] { R6086 += 1, R6040 += 1 };
  s1 -> s1 [0, 86] { R6086 += 1, R6040 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6086 += 1 };
  s1 -> s4 [87, 87] { R6086 += 1, R6040 += 1 };
  s1 -> s1 [88, 65535] { R6086 += 1, R6040 += 1 };
  s2 -> s1 [0, 86] { R6086 += 1, R6040 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6086 += 1, R6039 += 1, R6040 += 1 };
  s2 -> s3 [0, 65535] { R6086 += 1, R6040 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R6086 += 1, R6040 += 1 };
  s2 -> s1 [88, 65535] { R6086 += 1, R6040 += 1 };
  s3 -> s1 [0, 86] { R6086 += 1, R6040 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6086 += 1 };
  s3 -> s3 [0, 65535] { R6086 += 1, R6040 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R6086 += 1, R6040 += 1 };
  s3 -> s1 [88, 65535] { R6086 += 1, R6040 += 1 };
  s4 -> s4 [0, 65535] { R6086 += 1, R6040 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6086 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R6088 += 1, R6041 += 1, R6042 += 1 };
  s0 -> s0 [0, 65535] { R6087 += 1, R6088 += 1 };
  s0 -> s3 [0, 65535] { R6088 += 1, R6042 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R6088 += 1, R6042 += 1 };
  s1 -> s1 [0, 65535] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6088 += 1 };
  s2 -> s1 [0, 90] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R6088 += 1, R6041 += 1, R6042 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6088 += 1, R6042 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6088 += 1 };
  s3 -> s3 [0, 65535] { R6088 += 1, R6042 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R6088 += 1, R6042 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6088 += 1 };
  s7 -> s7 [0, 65535] { R6088 += 1, R6042 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6088 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R6090 += 1, R6043 += 1, R6044 += 1 };
  s0 -> s0 [0, 65535] { R6089 += 1, R6090 += 1 };
  s0 -> s2 [0, 65535] { R6090 += 1, R6044 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R6090 += 1, R6044 += 1, R5998 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R6090 += 1, R6043 += 1, R6044 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R6090 += 1, R6044 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s3 [0, 65535] { R6090 += 1, R6044 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535] { R6090 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6090 += 1, R6044 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s3 [0, 65535] { R6090 += 1, R6044 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R6090 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6090 += 1, R6044 += 1 };
  s3 -> s3 [0, 65535] { R6090 += 1, R6044 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R6090 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6090 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6090 += 1, R6044 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R6092 += 1, R6046 += 1, R6011 += 1, R6012 += 1 };
  s0 -> s2 [0, 65535] { R6092 += 1, R6046 += 1, R6012 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R6092 += 1, R6045 += 1, R6046 += 1 };
  s0 -> s0 [0, 65535] { R6091 += 1, R6092 += 1 };
  s1 -> s1 [0, 65535] { R6092 += 1, R6046 += 1, R6011 += 1, R6012 += 1 };
  s1 -> s5 [0, 65535] { R6092 += 1 };
  s1 -> s2 [0, 65535] { R6092 += 1, R6046 += 1, R6012 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6092 += 1 };
  s2 -> s2 [0, 65535] { R6092 += 1, R6046 += 1, R6012 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R6092 += 1, R6046 += 1 };
  s3 -> s1 [0, 65535] { R6092 += 1, R6046 += 1, R6011 += 1, R6012 += 1 };
  s3 -> s2 [0, 65535] { R6092 += 1, R6046 += 1, R6012 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6092 += 1, R6045 += 1, R6046 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6092 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6092 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6092 += 1, R6046 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R6094 += 1, R6047 += 1, R6048 += 1 };
  s0 -> s0 [0, 65535] { R6093 += 1, R6094 += 1 };
  s0 -> s2 [0, 65535] { R6094 += 1, R6048 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6094 += 1, R6047 += 1, R6048 += 1 };
  s1 -> s2 [0, 65535] { R6094 += 1, R6048 += 1 };
  s2 -> s3 [0, 65535] { R6094 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6094 += 1, R6048 += 1 };
  s3 -> s3 [0, 65535] { R6094 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s0 -> s2 [0, 65535] { R6096 += 1, R6049 += 1, R6050 += 1 };
  s0 -> s3 [0, 65535] { R6096 += 1, R6050 += 1, R6017 += 1, R6018 += 1 };
  s0 -> s0 [0, 65535] { R6095 += 1, R6096 += 1 };
  s0 -> s4 [87, 87] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s0 -> s1 [88, 65535] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s1 -> s1 [0, 86] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s1 -> s4 [87, 87] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s1 -> s1 [88, 65535] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s2 -> s1 [0, 86] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s2 -> s2 [0, 65535] { R6096 += 1, R6049 += 1, R6050 += 1 };
  s2 -> s3 [0, 65535] { R6096 += 1, R6050 += 1, R6017 += 1, R6018 += 1 };
  s2 -> s4 [87, 87] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s2 -> s1 [88, 65535] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s3 -> s1 [0, 86] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s3 -> s3 [0, 65535] { R6096 += 1, R6050 += 1, R6017 += 1, R6018 += 1 };
  s3 -> s4 [87, 87] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s3 -> s1 [88, 65535] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6096 += 1 };
  s4 -> s7 [0, 65535] { R6096 += 1, R6050 += 1 };
  s4 -> s4 [0, 65535] { R6096 += 1, R6050 += 1, R6018 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6096 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6096 += 1 };
  s7 -> s7 [0, 65535] { R6096 += 1, R6050 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6097 += 1, R6098 += 1 };
  s0 -> s1 [0, 65535] { R6098 += 1, R6052 += 1, R6019 += 1, R6020 += 1 };
  s0 -> s2 [0, 65535] { R6098 += 1, R6052 += 1, R6020 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R6098 += 1, R6051 += 1, R6052 += 1 };
  s1 -> s1 [0, 65535] { R6098 += 1, R6052 += 1, R6019 += 1, R6020 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6098 += 1, R6052 += 1, R6020 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R6098 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6098 += 1, R6052 += 1, R6020 += 1, R1 += 1 };
  s2 -> s5 [0, 65535] { R6098 += 1 };
  s2 -> s6 [0, 65535] { R6098 += 1, R6052 += 1 };
  s3 -> s1 [0, 65535] { R6098 += 1, R6052 += 1, R6019 += 1, R6020 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6098 += 1, R6052 += 1, R6020 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R6098 += 1, R6051 += 1, R6052 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6098 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6098 += 1 };
  s6 -> s6 [0, 65535] { R6098 += 1, R6052 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s0 -> s0 [0, 65535] { R6099 += 1, R6100 += 1 };
  s0 -> s2 [0, 65535] { R6100 += 1, R6053 += 1, R6054 += 1 };
  s0 -> s3 [0, 65535] { R6100 += 1, R6054 += 1, R6022 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R6100 += 1, R6054 += 1, R6021 += 1, R6022 += 1 };
  s0 -> s5 [87, 87] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s0 -> s1 [88, 65535] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s1 -> s1 [0, 86] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R6100 += 1 };
  s1 -> s1 [0, 65535] { R6100 += 1, R6054 += 1 };
  s1 -> s5 [87, 87] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s1 -> s1 [88, 65535] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s2 -> s1 [0, 86] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s2 -> s2 [0, 65535] { R6100 += 1, R6053 += 1, R6054 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6100 += 1, R6054 += 1, R6022 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R6100 += 1, R6054 += 1, R6021 += 1, R6022 += 1 };
  s2 -> s5 [87, 87] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s2 -> s1 [88, 65535] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s3 -> s1 [0, 86] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s3 -> s8 [0, 65535] { R6100 += 1, R6054 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6100 += 1, R6054 += 1, R6022 += 1, R7 += 1 };
  s3 -> s7 [0, 65535] { R6100 += 1 };
  s3 -> s5 [87, 87] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s3 -> s1 [88, 65535] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s4 -> s1 [0, 86] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R6100 += 1, R6054 += 1, R6022 += 1, R7 += 1 };
  s4 -> s7 [0, 65535] { R6100 += 1 };
  s4 -> s4 [0, 65535] { R6100 += 1, R6054 += 1, R6021 += 1, R6022 += 1 };
  s4 -> s5 [87, 87] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s4 -> s1 [88, 65535] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s5 -> s5 [0, 65535] { R6100 += 1, R6054 += 1, R6022 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6100 += 1 };
  s8 -> s8 [0, 65535] { R6100 += 1, R6054 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R6100 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s0 -> s2 [0, 65535] { R6102 += 1, R6056 += 1, R6023 += 1, R6024 += 1 };
  s0 -> s3 [0, 65535] { R6102 += 1, R6055 += 1, R6056 += 1 };
  s0 -> s0 [0, 65535] { R6101 += 1, R6102 += 1 };
  s0 -> s4 [0, 65535] { R6102 += 1, R6056 += 1, R6024 += 1, R6007 += 1, R6008 += 1 };
  s0 -> s1 [88, 65535] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s1 -> s1 [0, 86] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s1 -> s5 [0, 65535] { R6102 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6102 += 1, R6056 += 1, R6024 += 1 };
  s1 -> s7 [0, 65535] { R6102 += 1, R6056 += 1 };
  s1 -> s1 [88, 65535] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s2 -> s1 [0, 86] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s2 -> s2 [0, 65535] { R6102 += 1, R6056 += 1, R6023 += 1, R6024 += 1 };
  s2 -> s5 [0, 65535] { R6102 += 1 };
  s2 -> s4 [0, 65535] { R6102 += 1, R6056 += 1, R6024 += 1, R6007 += 1, R6008 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [88, 65535] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s3 -> s1 [0, 86] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s3 -> s2 [0, 65535] { R6102 += 1, R6056 += 1, R6023 += 1, R6024 += 1 };
  s3 -> s3 [0, 65535] { R6102 += 1, R6055 += 1, R6056 += 1 };
  s3 -> s4 [0, 65535] { R6102 += 1, R6056 += 1, R6024 += 1, R6007 += 1, R6008 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [88, 65535] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s4 -> s1 [0, 86] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s4 -> s5 [0, 65535] { R6102 += 1 };
  s4 -> s4 [0, 65535] { R6102 += 1, R6056 += 1, R6024 += 1, R6007 += 1, R6008 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6102 += 1, R6056 += 1 };
  s4 -> s1 [88, 65535] { R6102 += 1, R6056 += 1, R6024 += 1, R6008 += 1 };
  s5 -> s5 [0, 65535] { R6102 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R6102 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6102 += 1, R6056 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6104 += 1, R6058 += 1, R6025 += 1, R6026 += 1 };
  s0 -> s2 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1, R6010 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R6104 += 1, R6057 += 1, R6058 += 1 };
  s0 -> s4 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1, R6009 += 1, R6010 += 1 };
  s0 -> s0 [0, 65535] { R6103 += 1, R6104 += 1 };
  s1 -> s1 [0, 65535] { R6104 += 1, R6058 += 1, R6025 += 1, R6026 += 1 };
  s1 -> s2 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1, R6010 += 1, R5988 += 1 };
  s1 -> s4 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1, R6009 += 1, R6010 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R6104 += 1 };
  s2 -> s5 [0, 65535] { R6104 += 1, R6058 += 1 };
  s2 -> s2 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1, R6010 += 1, R5988 += 1 };
  s2 -> s8 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R6104 += 1 };
  s3 -> s1 [0, 65535] { R6104 += 1, R6058 += 1, R6025 += 1, R6026 += 1 };
  s3 -> s2 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1, R6010 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R6104 += 1, R6057 += 1, R6058 += 1 };
  s3 -> s4 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1, R6009 += 1, R6010 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6104 += 1, R6058 += 1 };
  s4 -> s2 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1, R6010 += 1, R5988 += 1 };
  s4 -> s4 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1, R6009 += 1, R6010 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6104 += 1 };
  s5 -> s5 [0, 65535] { R6104 += 1, R6058 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6104 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6104 += 1 };
  s8 -> s5 [0, 65535] { R6104 += 1, R6058 += 1 };
  s8 -> s8 [0, 65535] { R6104 += 1, R6058 += 1, R6026 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R6104 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R6106 += 1, R6060 += 1, R6028 += 1 };
  s0 -> s2 [0, 65535] { R6106 += 1, R6060 += 1, R6027 += 1, R6028 += 1 };
  s0 -> s3 [0, 65535] { R6106 += 1, R6059 += 1, R6060 += 1 };
  s0 -> s0 [0, 65535] { R6105 += 1, R6106 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6106 += 1, R6060 += 1, R6028 += 1 };
  s1 -> s5 [0, 65535] { R6106 += 1 };
  s1 -> s6 [0, 65535] { R6106 += 1, R6060 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R6106 += 1, R6060 += 1, R6028 += 1 };
  s2 -> s5 [0, 65535] { R6106 += 1 };
  s2 -> s2 [0, 65535] { R6106 += 1, R6060 += 1, R6027 += 1, R6028 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6106 += 1, R6060 += 1, R6028 += 1 };
  s3 -> s2 [0, 65535] { R6106 += 1, R6060 += 1, R6027 += 1, R6028 += 1 };
  s3 -> s3 [0, 65535] { R6106 += 1, R6059 += 1, R6060 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6106 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6106 += 1 };
  s6 -> s6 [0, 65535] { R6106 += 1, R6060 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R6107 += 1, R6108 += 1 };
  s0 -> s1 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1, R6014 += 1, R5989 += 1 };
  s0 -> s2 [0, 65535] { R6108 += 1, R6061 += 1, R6062 += 1 };
  s0 -> s3 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1, R6013 += 1, R6014 += 1 };
  s0 -> s4 [0, 65535] { R6108 += 1, R6062 += 1, R6029 += 1, R6030 += 1 };
  s1 -> s8 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1 };
  s1 -> s1 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1, R6014 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6108 += 1 };
  s1 -> s7 [0, 65535] { R6108 += 1, R6062 += 1 };
  s2 -> s1 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1, R6014 += 1, R5989 += 1 };
  s2 -> s2 [0, 65535] { R6108 += 1, R6061 += 1, R6062 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1, R6013 += 1, R6014 += 1 };
  s2 -> s4 [0, 65535] { R6108 += 1, R6062 += 1, R6029 += 1, R6030 += 1 };
  s3 -> s1 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1, R6014 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6108 += 1 };
  s3 -> s3 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1, R6013 += 1, R6014 += 1 };
  s3 -> s7 [0, 65535] { R6108 += 1, R6062 += 1 };
  s4 -> s1 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1, R6014 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6108 += 1 };
  s4 -> s3 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1, R6013 += 1, R6014 += 1 };
  s4 -> s4 [0, 65535] { R6108 += 1, R6062 += 1, R6029 += 1, R6030 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6108 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6108 += 1 };
  s7 -> s7 [0, 65535] { R6108 += 1, R6062 += 1 };
  s8 -> s8 [0, 65535] { R6108 += 1, R6062 += 1, R6030 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R6108 += 1 };
  s8 -> s7 [0, 65535] { R6108 += 1, R6062 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R6109 += 1, R6110 += 1 };
  s0 -> s1 [0, 65535] { R6110 += 1, R6064 += 1, R6031 += 1, R6032 += 1 };
  s0 -> s2 [0, 65535] { R6110 += 1, R6063 += 1, R6064 += 1 };
  s0 -> s3 [0, 65535] { R6110 += 1, R6064 += 1, R6032 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s4 [108, 108] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s1 -> s1 [0, 65535] { R6110 += 1, R6064 += 1, R6031 += 1, R6032 += 1 };
  s1 -> s3 [0, 65535] { R6110 += 1, R6064 += 1, R6032 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s4 [108, 108] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s2 -> s1 [0, 65535] { R6110 += 1, R6064 += 1, R6031 += 1, R6032 += 1 };
  s2 -> s2 [0, 65535] { R6110 += 1, R6063 += 1, R6064 += 1 };
  s2 -> s3 [0, 65535] { R6110 += 1, R6064 += 1, R6032 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s4 [108, 108] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s3 -> s3 [0, 65535] { R6110 += 1, R6064 += 1, R6032 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s4 [108, 108] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s4 -> s5 [111, 111] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s5 -> s6 [99, 99] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s6 -> s7 [97, 97] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s7 -> s8 [108, 108] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s8 -> s9 [104, 104] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s9 -> s10 [111, 111] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s10 -> s11 [115, 115] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s11 -> s12 [116, 116] { R6110 += 1, R6064 += 1, R6032 += 1, R6016 += 1 };
  s12 -> s13 [0, 65535] { R6110 += 1, R6064 += 1 };
  s12 -> s14 [0, 65535];
  s12 -> s12 [0, 65535] { R6110 += 1, R6064 += 1, R6032 += 1 };
  s12 -> s15 [0, 65535] { R6110 += 1 };
  s13 -> s13 [0, 65535] { R6110 += 1, R6064 += 1 };
  s13 -> s14 [0, 65535];
  s13 -> s15 [0, 65535] { R6110 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R6110 += 1 };
  accepting s12, s13, s14, s15;
};
};
constraint R1 = 0 && R2 = R6032 && R3 = R6006 && R4 = R6110 && R15 = 0 && R16 = R6064 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R6064 = 1 && R6000 = R6006 && R6001 - R6064 = 1 && R6002 = R6006 && R6003 - R6064 = 1 && R6004 = R6006 && R6005 - R6064 = 1 && R6015 = 0 && R6016 = 0 && R6017 = 0 && R6018 = R6032 && R6019 = 0 && R6020 = R6032 && R6021 = 0 && R6022 = R6032 && R6023 = 0 && R6024 = R6032 && R6025 = 0 && R6026 = R6032 && R6027 = 0 && R6028 = R6032 && R6029 = 0 && R6030 = R6032 && R6031 = 0 && R6033 = 0 && R6034 = R6064 && R6035 = 0 && R6036 = R6064 && R6037 = 0 && R6038 = R6064 && R6039 = 0 && R6040 = R6064 && R6041 = 0 && R6042 = R6064 && R6043 = 0 && R6044 = R6064 && R6045 = 0 && R6046 = R6064 && R6047 = 0 && R6048 = R6064 && R6049 = 0 && R6050 = R6064 && R6051 = 0 && R6052 = R6064 && R6053 = 0 && R6054 = R6064 && R6055 = 0 && R6056 = R6064 && R6057 = 0 && R6058 = R6064 && R6059 = 0 && R6060 = R6064 && R6061 = 0 && R6062 = R6064 && R6063 = 0 && R6065 = 10 && R6066 = R6110 && R6067 = 10 && R6068 = R6110 && R6069 = 10 && R6070 = R6110 && R6071 = 10 && R6072 = R6110 && R6073 = 10 && R6074 = R6110 && R6075 = 10 && R6076 = R6110 && R6077 = 10 && R6078 = R6110 && R6079 = 10 && R6080 = R6110 && R6081 = 10 && R6082 = R6110 && R6083 = 10 && R6084 = R6110 && R6085 = 10 && R6086 = R6110 && R6087 = 10 && R6088 = R6110 && R6089 = 10 && R6090 = R6110 && R6091 = 10 && R6092 = R6110 && R6093 = 10 && R6094 = R6110 && R6095 = 10 && R6096 = R6110 && R6097 = 10 && R6098 = R6110 && R6099 = 10 && R6100 = R6110 && R6101 = 10 && R6102 = R6110 && R6103 = 10 && R6104 = R6110 && R6105 = 10 && R6106 = R6110 && R6107 = 10 && R6108 = R6110 && R6109 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R6064 < R6006 && 0 < R6032 && -1 < R6064 && 9 < R6110 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R5988 = 0 || (R6007 = 0 && R6008 = 0)) && (R5988 = 0 || (R6009 = 0 && R6010 = 0)) && (R5989 = 0 || (R6013 = 0 && R6014 = 0)) && (R5990 = 0 || (R6011 = 0 && R6012 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
