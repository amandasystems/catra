// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R7063, R7064, R7065, R7066, R7067, R7068, R7069, R7070, R7393, R7394, R7395, R7396, R7397, R7398, R7399, R7400, R7401, R7402, R7403, R7404, R7405, R7406, R7407, R7408, R7409, R7410, R7411, R7412, R7413, R7414, R7415, R7416, R7417, R7418, R7419, R7420, R7421, R7422, R7423, R7424, R7425, R7426, R7427, R7428, R7429, R7430, R7431, R7432, R7433, R7434, R7435, R7436, R7437, R7438, R7439, R7440, R7441, R7442, R7443, R7444, R7445, R7446, R7447, R7448, R7449, R7450, R7451, R7452, R7453, R7454, R7455, R7456, R7457, R7458, R7459, R7460, R7461, R7462, R7463, R7464, R7465, R7466, R7467, R7468, R7469, R7470, R7471, R7472, R7473, R7474, R7475, R7476, R7477, R7478, R7479, R7480, R7481, R7482, R7483, R7484, R7485, R7486, R7487, R7488, R7489, R7490, R7491, R7492, R7493, R7494, R7495, R7496, R7497, R7498, R7499, R7500;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R7456 += 1 };
  s0 -> s0 [0, 65535] { R7455 += 1, R7456 += 1 };
  s0 -> s2 [46, 46] { R7456 += 1 };
  s0 -> s3 [47, 47] { R7456 += 1 };
  s0 -> s1 [48, 65535] { R7456 += 1 };
  s1 -> s1 [0, 45] { R7456 += 1 };
  s1 -> s2 [46, 46] { R7456 += 1 };
  s1 -> s3 [47, 47] { R7456 += 1 };
  s1 -> s1 [48, 65535] { R7456 += 1 };
  s2 -> s1 [0, 45] { R7456 += 1 };
  s2 -> s2 [46, 46] { R7456 += 1 };
  s2 -> s3 [47, 47] { R7456 += 1 };
  s2 -> s1 [48, 114] { R7456 += 1 };
  s2 -> s8 [115, 115] { R7456 += 1 };
  s2 -> s1 [116, 65535] { R7456 += 1 };
  s3 -> s3 [0, 45] { R7456 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R7456 += 1 };
  s3 -> s3 [47, 65535] { R7456 += 1 };
  s4 -> s3 [0, 45] { R7456 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R7456 += 1 };
  s4 -> s3 [47, 114] { R7456 += 1 };
  s4 -> s5 [115, 115] { R7456 += 1 };
  s4 -> s3 [116, 65535] { R7456 += 1 };
  s5 -> s3 [0, 45] { R7456 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R7456 += 1 };
  s5 -> s3 [47, 110] { R7456 += 1 };
  s5 -> s6 [111, 111] { R7456 += 1 };
  s5 -> s3 [112, 65535] { R7456 += 1 };
  s6 -> s3 [0, 45] { R7456 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R7456 += 1 };
  s6 -> s3 [47, 98] { R7456 += 1 };
  s6 -> s7 [99, 99] { R7456 += 1 };
  s6 -> s3 [100, 65535] { R7456 += 1 };
  s7 -> s3 [0, 45] { R7456 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R7456 += 1 };
  s7 -> s3 [47, 106] { R7456 += 1 };
  s7 -> s3 [108, 65535] { R7456 += 1 };
  s8 -> s1 [0, 45] { R7456 += 1 };
  s8 -> s2 [46, 46] { R7456 += 1 };
  s8 -> s3 [47, 47] { R7456 += 1 };
  s8 -> s1 [48, 110] { R7456 += 1 };
  s8 -> s9 [111, 111] { R7456 += 1 };
  s8 -> s1 [112, 65535] { R7456 += 1 };
  s9 -> s1 [0, 45] { R7456 += 1 };
  s9 -> s2 [46, 46] { R7456 += 1 };
  s9 -> s3 [47, 47] { R7456 += 1 };
  s9 -> s1 [48, 98] { R7456 += 1 };
  s9 -> s10 [99, 99] { R7456 += 1 };
  s9 -> s1 [100, 65535] { R7456 += 1 };
  s10 -> s1 [0, 45] { R7456 += 1 };
  s10 -> s2 [46, 46] { R7456 += 1 };
  s10 -> s3 [47, 47] { R7456 += 1 };
  s10 -> s1 [48, 106] { R7456 += 1 };
  s10 -> s1 [108, 65535] { R7456 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R7457 += 1, R7458 += 1 };
  s0 -> s1 [0, 65535] { R7458 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7458 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R7460 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R7460 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R7459 += 1, R7460 += 1 };
  s0 -> s3 [47, 47] { R7460 += 1 };
  s0 -> s1 [48, 65535] { R7460 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R7460 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R7460 += 1 };
  s1 -> s1 [48, 65535] { R7460 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R7460 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R7460 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R7460 += 1 };
  s2 -> s1 [48, 65535] { R7460 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R7460 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R7462 += 1, R7064 += 1 };
  s0 -> s2 [0, 65535] { R7462 += 1, R7063 += 1, R7064 += 1 };
  s0 -> s0 [0, 65535] { R7461 += 1, R7462 += 1 };
  s0 -> s1 [38, 42] { R7462 += 1, R7064 += 1 };
  s0 -> s1 [44, 45] { R7462 += 1, R7064 += 1 };
  s0 -> s1 [47, 62] { R7462 += 1, R7064 += 1 };
  s0 -> s1 [64, 65535] { R7462 += 1, R7064 += 1 };
  s1 -> s1 [0, 36] { R7462 += 1, R7064 += 1 };
  s1 -> s1 [0, 65535] { R7462 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R7462 += 1, R7064 += 1 };
  s1 -> s1 [44, 45] { R7462 += 1, R7064 += 1 };
  s1 -> s1 [47, 62] { R7462 += 1, R7064 += 1 };
  s1 -> s1 [64, 65535] { R7462 += 1, R7064 += 1 };
  s2 -> s1 [0, 36] { R7462 += 1, R7064 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7462 += 1, R7063 += 1, R7064 += 1 };
  s2 -> s1 [38, 42] { R7462 += 1, R7064 += 1 };
  s2 -> s1 [44, 45] { R7462 += 1, R7064 += 1 };
  s2 -> s1 [47, 62] { R7462 += 1, R7064 += 1 };
  s2 -> s1 [64, 65535] { R7462 += 1, R7064 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R7463 += 1, R7464 += 1 };
  s0 -> s1 [0, 65535] { R7464 += 1, R7065 += 1, R7066 += 1 };
  s0 -> s2 [0, 65535] { R7464 += 1, R7066 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7464 += 1, R7065 += 1, R7066 += 1 };
  s1 -> s2 [0, 65535] { R7464 += 1, R7066 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R7464 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7464 += 1, R7066 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R7464 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R7465 += 1, R7466 += 1 };
  s0 -> s2 [0, 65535] { R7466 += 1, R7067 += 1, R7068 += 1 };
  s0 -> s3 [0, 65535] { R7466 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R7466 += 1, R7068 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7466 += 1 };
  s1 -> s1 [0, 65535] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R7466 += 1, R7067 += 1, R7068 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7466 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7466 += 1 };
  s3 -> s3 [0, 65535] { R7466 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R7466 += 1, R7068 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7466 += 1 };
  s7 -> s7 [0, 65535] { R7466 += 1, R7068 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7466 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7468 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R7468 += 1, R7069 += 1, R7070 += 1 };
  s0 -> s3 [0, 65535] { R7468 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R7467 += 1, R7468 += 1 };
  s1 -> s1 [0, 65535] { R7468 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R7468 += 1 };
  s1 -> s6 [0, 65535] { R7468 += 1, R7070 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7468 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R7468 += 1, R7069 += 1, R7070 += 1 };
  s2 -> s3 [0, 65535] { R7468 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R7468 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R7468 += 1 };
  s3 -> s3 [0, 65535] { R7468 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7468 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R7468 += 1 };
  s6 -> s6 [0, 65535] { R7468 += 1, R7070 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R7470 += 1, R7424 += 1 };
  s0 -> s0 [0, 65535] { R7469 += 1, R7470 += 1 };
  s0 -> s2 [0, 65535] { R7470 += 1, R7423 += 1, R7424 += 1 };
  s0 -> s1 [45, 63] { R7470 += 1, R7424 += 1 };
  s0 -> s3 [87, 87] { R7470 += 1, R7424 += 1 };
  s0 -> s1 [88, 65535] { R7470 += 1, R7424 += 1 };
  s1 -> s1 [0, 43] { R7470 += 1, R7424 += 1 };
  s1 -> s1 [45, 63] { R7470 += 1, R7424 += 1 };
  s1 -> s3 [87, 87] { R7470 += 1, R7424 += 1 };
  s1 -> s1 [88, 65535] { R7470 += 1, R7424 += 1 };
  s2 -> s1 [0, 43] { R7470 += 1, R7424 += 1 };
  s2 -> s2 [0, 65535] { R7470 += 1, R7423 += 1, R7424 += 1 };
  s2 -> s1 [45, 63] { R7470 += 1, R7424 += 1 };
  s2 -> s3 [87, 87] { R7470 += 1, R7424 += 1 };
  s2 -> s1 [88, 65535] { R7470 += 1, R7424 += 1 };
  s3 -> s3 [0, 43] { R7470 += 1, R7424 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7470 += 1 };
  s3 -> s3 [45, 63] { R7470 += 1, R7424 += 1 };
  s3 -> s3 [87, 65535] { R7470 += 1, R7424 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R7471 += 1, R7472 += 1 };
  s0 -> s1 [0, 65535] { R7472 += 1, R7425 += 1, R7426 += 1 };
  s0 -> s2 [0, 65535] { R7472 += 1, R7426 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7472 += 1, R7425 += 1, R7426 += 1 };
  s1 -> s2 [0, 65535] { R7472 += 1, R7426 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7472 += 1 };
  s2 -> s2 [0, 65535] { R7472 += 1, R7426 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7472 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R7474 += 1, R7428 += 1 };
  s0 -> s2 [0, 65535] { R7474 += 1, R7427 += 1, R7428 += 1 };
  s0 -> s3 [0, 65535] { R7474 += 1, R7428 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R7473 += 1, R7474 += 1 };
  s0 -> s4 [58, 58] { R7474 += 1, R7428 += 1 };
  s0 -> s1 [59, 65535] { R7474 += 1, R7428 += 1 };
  s1 -> s1 [0, 57] { R7474 += 1, R7428 += 1 };
  s1 -> s1 [0, 65535] { R7474 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [58, 58] { R7474 += 1, R7428 += 1 };
  s1 -> s1 [59, 65535] { R7474 += 1, R7428 += 1 };
  s2 -> s1 [0, 57] { R7474 += 1, R7428 += 1 };
  s2 -> s2 [0, 65535] { R7474 += 1, R7427 += 1, R7428 += 1 };
  s2 -> s3 [0, 65535] { R7474 += 1, R7428 += 1, R10 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [58, 58] { R7474 += 1, R7428 += 1 };
  s2 -> s1 [59, 65535] { R7474 += 1, R7428 += 1 };
  s3 -> s1 [0, 57] { R7474 += 1, R7428 += 1 };
  s3 -> s3 [0, 65535] { R7474 += 1, R7428 += 1, R10 += 1 };
  s3 -> s5 [0, 65535] { R7474 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [58, 58] { R7474 += 1, R7428 += 1 };
  s3 -> s1 [59, 65535] { R7474 += 1, R7428 += 1 };
  s4 -> s4 [0, 65535] { R7474 += 1, R7428 += 1 };
  s5 -> s5 [0, 65535] { R7474 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R7476 += 1, R7430 += 1 };
  s0 -> s2 [0, 65535] { R7476 += 1, R7429 += 1, R7430 += 1 };
  s0 -> s3 [0, 65535] { R7476 += 1, R7430 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R7475 += 1, R7476 += 1 };
  s0 -> s4 [87, 87] { R7476 += 1, R7430 += 1 };
  s0 -> s1 [88, 65535] { R7476 += 1, R7430 += 1 };
  s1 -> s1 [0, 86] { R7476 += 1, R7430 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7476 += 1 };
  s1 -> s4 [87, 87] { R7476 += 1, R7430 += 1 };
  s1 -> s1 [88, 65535] { R7476 += 1, R7430 += 1 };
  s2 -> s1 [0, 86] { R7476 += 1, R7430 += 1 };
  s2 -> s2 [0, 65535] { R7476 += 1, R7429 += 1, R7430 += 1 };
  s2 -> s3 [0, 65535] { R7476 += 1, R7430 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [87, 87] { R7476 += 1, R7430 += 1 };
  s2 -> s1 [88, 65535] { R7476 += 1, R7430 += 1 };
  s3 -> s1 [0, 86] { R7476 += 1, R7430 += 1 };
  s3 -> s3 [0, 65535] { R7476 += 1, R7430 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7476 += 1 };
  s3 -> s4 [87, 87] { R7476 += 1, R7430 += 1 };
  s3 -> s1 [88, 65535] { R7476 += 1, R7430 += 1 };
  s4 -> s4 [0, 65535] { R7476 += 1, R7430 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7476 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R7477 += 1, R7478 += 1 };
  s0 -> s2 [0, 65535] { R7478 += 1, R7432 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R7478 += 1, R7431 += 1, R7432 += 1 };
  s0 -> s4 [91, 91] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R7478 += 1, R7432 += 1 };
  s1 -> s1 [0, 65535] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R7478 += 1 };
  s2 -> s1 [0, 90] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7478 += 1, R7432 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R7478 += 1 };
  s2 -> s4 [91, 91] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7478 += 1, R7432 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R7478 += 1, R7431 += 1, R7432 += 1 };
  s3 -> s4 [91, 91] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R7478 += 1, R7432 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7478 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7478 += 1, R7432 += 1 };
  s7 -> s6 [0, 65535] { R7478 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7480 += 1, R7433 += 1, R7434 += 1 };
  s0 -> s2 [0, 65535] { R7480 += 1, R7434 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R7480 += 1, R7434 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R7479 += 1, R7480 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7480 += 1, R7433 += 1, R7434 += 1 };
  s1 -> s2 [0, 65535] { R7480 += 1, R7434 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s3 [0, 65535] { R7480 += 1, R7434 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7480 += 1, R7434 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s3 [0, 65535] { R7480 += 1, R7434 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R7480 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7480 += 1, R7434 += 1 };
  s3 -> s3 [0, 65535] { R7480 += 1, R7434 += 1, R5998 += 1, R6 += 1 };
  s3 -> s6 [0, 65535] { R7480 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7480 += 1, R7434 += 1 };
  s5 -> s6 [0, 65535] { R7480 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7480 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7482 += 1, R7435 += 1, R7436 += 1 };
  s0 -> s2 [0, 65535] { R7482 += 1, R7436 += 1, R7400 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R7481 += 1, R7482 += 1 };
  s0 -> s3 [0, 65535] { R7482 += 1, R7436 += 1, R7399 += 1, R7400 += 1 };
  s1 -> s1 [0, 65535] { R7482 += 1, R7435 += 1, R7436 += 1 };
  s1 -> s2 [0, 65535] { R7482 += 1, R7436 += 1, R7400 += 1, R5990 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R7482 += 1, R7436 += 1, R7399 += 1, R7400 += 1 };
  s2 -> s4 [0, 65535] { R7482 += 1 };
  s2 -> s6 [0, 65535] { R7482 += 1, R7436 += 1 };
  s2 -> s2 [0, 65535] { R7482 += 1, R7436 += 1, R7400 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R7482 += 1 };
  s3 -> s2 [0, 65535] { R7482 += 1, R7436 += 1, R7400 += 1, R5990 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7482 += 1, R7436 += 1, R7399 += 1, R7400 += 1 };
  s4 -> s4 [0, 65535] { R7482 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R7482 += 1 };
  s6 -> s6 [0, 65535] { R7482 += 1, R7436 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R7484 += 1, R7437 += 1, R7438 += 1 };
  s0 -> s0 [0, 65535] { R7483 += 1, R7484 += 1 };
  s0 -> s2 [0, 65535] { R7484 += 1, R7438 += 1, R7401 += 1, R7402 += 1 };
  s0 -> s3 [108, 108] { R7484 += 1, R7438 += 1, R7402 += 1 };
  s1 -> s1 [0, 65535] { R7484 += 1, R7437 += 1, R7438 += 1 };
  s1 -> s2 [0, 65535] { R7484 += 1, R7438 += 1, R7401 += 1, R7402 += 1 };
  s1 -> s3 [108, 108] { R7484 += 1, R7438 += 1, R7402 += 1 };
  s2 -> s2 [0, 65535] { R7484 += 1, R7438 += 1, R7401 += 1, R7402 += 1 };
  s2 -> s3 [108, 108] { R7484 += 1, R7438 += 1, R7402 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7484 += 1, R7438 += 1 };
  s3 -> s5 [0, 65535] { R7484 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7484 += 1 };
  accepting s3, s4, s5;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s0 -> s2 [0, 65535] { R7486 += 1, R7440 += 1, R7407 += 1, R7408 += 1 };
  s0 -> s3 [0, 65535] { R7486 += 1, R7439 += 1, R7440 += 1 };
  s0 -> s0 [0, 65535] { R7485 += 1, R7486 += 1 };
  s0 -> s4 [87, 87] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s0 -> s1 [88, 65535] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s1 -> s1 [0, 86] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s1 -> s4 [87, 87] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s1 -> s1 [88, 65535] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s2 -> s1 [0, 86] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s2 -> s2 [0, 65535] { R7486 += 1, R7440 += 1, R7407 += 1, R7408 += 1 };
  s2 -> s4 [87, 87] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s2 -> s1 [88, 65535] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s3 -> s1 [0, 86] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s3 -> s2 [0, 65535] { R7486 += 1, R7440 += 1, R7407 += 1, R7408 += 1 };
  s3 -> s3 [0, 65535] { R7486 += 1, R7439 += 1, R7440 += 1 };
  s3 -> s4 [87, 87] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s3 -> s1 [88, 65535] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s4 -> s5 [0, 65535] { R7486 += 1 };
  s4 -> s6 [0, 65535] { R7486 += 1, R7440 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R7486 += 1, R7440 += 1, R7408 += 1 };
  s5 -> s5 [0, 65535] { R7486 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R7486 += 1 };
  s6 -> s6 [0, 65535] { R7486 += 1, R7440 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R7488 += 1, R7442 += 1, R7410 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R7488 += 1, R7442 += 1, R7409 += 1, R7410 += 1 };
  s0 -> s0 [0, 65535] { R7487 += 1, R7488 += 1 };
  s0 -> s3 [0, 65535] { R7488 += 1, R7441 += 1, R7442 += 1 };
  s1 -> s1 [0, 65535] { R7488 += 1, R7442 += 1, R7410 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R7488 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R7488 += 1, R7442 += 1 };
  s2 -> s1 [0, 65535] { R7488 += 1, R7442 += 1, R7410 += 1, R1 += 1 };
  s2 -> s5 [0, 65535] { R7488 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7488 += 1, R7442 += 1, R7409 += 1, R7410 += 1 };
  s3 -> s1 [0, 65535] { R7488 += 1, R7442 += 1, R7410 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7488 += 1, R7442 += 1, R7409 += 1, R7410 += 1 };
  s3 -> s3 [0, 65535] { R7488 += 1, R7441 += 1, R7442 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7488 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7488 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7488 += 1, R7442 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s0 -> s2 [0, 65535] { R7490 += 1, R7444 += 1, R7411 += 1, R7412 += 1 };
  s0 -> s3 [0, 65535] { R7490 += 1, R7444 += 1, R7412 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R7490 += 1, R7443 += 1, R7444 += 1 };
  s0 -> s0 [0, 65535] { R7489 += 1, R7490 += 1 };
  s0 -> s5 [87, 87] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s0 -> s1 [88, 65535] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s1 -> s1 [0, 86] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s1 -> s1 [0, 65535] { R7490 += 1, R7444 += 1 };
  s1 -> s7 [0, 65535] { R7490 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [87, 87] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s1 -> s1 [88, 65535] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s2 -> s1 [0, 86] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s2 -> s2 [0, 65535] { R7490 += 1, R7444 += 1, R7411 += 1, R7412 += 1 };
  s2 -> s3 [0, 65535] { R7490 += 1, R7444 += 1, R7412 += 1, R7 += 1 };
  s2 -> s7 [0, 65535] { R7490 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [87, 87] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s2 -> s1 [88, 65535] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s3 -> s1 [0, 86] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s3 -> s3 [0, 65535] { R7490 += 1, R7444 += 1, R7412 += 1, R7 += 1 };
  s3 -> s7 [0, 65535] { R7490 += 1 };
  s3 -> s8 [0, 65535] { R7490 += 1, R7444 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [87, 87] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s3 -> s1 [88, 65535] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s4 -> s1 [0, 86] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s4 -> s2 [0, 65535] { R7490 += 1, R7444 += 1, R7411 += 1, R7412 += 1 };
  s4 -> s3 [0, 65535] { R7490 += 1, R7444 += 1, R7412 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R7490 += 1, R7443 += 1, R7444 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [87, 87] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s4 -> s1 [88, 65535] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s5 -> s5 [0, 65535] { R7490 += 1, R7444 += 1, R7412 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7490 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R7490 += 1 };
  s8 -> s8 [0, 65535] { R7490 += 1, R7444 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s0 -> s2 [0, 65535] { R7492 += 1, R7445 += 1, R7446 += 1 };
  s0 -> s0 [0, 65535] { R7491 += 1, R7492 += 1 };
  s0 -> s3 [0, 65535] { R7492 += 1, R7446 += 1, R7413 += 1, R7414 += 1 };
  s0 -> s4 [0, 65535] { R7492 += 1, R7446 += 1, R7414 += 1, R7393 += 1, R7394 += 1 };
  s0 -> s1 [88, 65535] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s1 -> s1 [0, 86] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s1 -> s5 [0, 65535] { R7492 += 1, R7446 += 1 };
  s1 -> s1 [0, 65535] { R7492 += 1, R7446 += 1, R7414 += 1 };
  s1 -> s6 [0, 65535] { R7492 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [88, 65535] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s2 -> s1 [0, 86] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s2 -> s2 [0, 65535] { R7492 += 1, R7445 += 1, R7446 += 1 };
  s2 -> s3 [0, 65535] { R7492 += 1, R7446 += 1, R7413 += 1, R7414 += 1 };
  s2 -> s4 [0, 65535] { R7492 += 1, R7446 += 1, R7414 += 1, R7393 += 1, R7394 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [88, 65535] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s3 -> s1 [0, 86] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s3 -> s3 [0, 65535] { R7492 += 1, R7446 += 1, R7413 += 1, R7414 += 1 };
  s3 -> s4 [0, 65535] { R7492 += 1, R7446 += 1, R7414 += 1, R7393 += 1, R7394 += 1 };
  s3 -> s6 [0, 65535] { R7492 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [88, 65535] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s4 -> s1 [0, 86] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s4 -> s5 [0, 65535] { R7492 += 1, R7446 += 1 };
  s4 -> s4 [0, 65535] { R7492 += 1, R7446 += 1, R7414 += 1, R7393 += 1, R7394 += 1 };
  s4 -> s6 [0, 65535] { R7492 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s1 [88, 65535] { R7492 += 1, R7446 += 1, R7414 += 1, R7394 += 1 };
  s5 -> s5 [0, 65535] { R7492 += 1, R7446 += 1 };
  s5 -> s6 [0, 65535] { R7492 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R7492 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7494 += 1, R7447 += 1, R7448 += 1 };
  s0 -> s0 [0, 65535] { R7493 += 1, R7494 += 1 };
  s0 -> s2 [0, 65535] { R7494 += 1, R7448 += 1, R7415 += 1, R7416 += 1 };
  s0 -> s3 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1, R7395 += 1, R7396 += 1 };
  s0 -> s4 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1, R7396 += 1, R5988 += 1 };
  s1 -> s1 [0, 65535] { R7494 += 1, R7447 += 1, R7448 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s2 [0, 65535] { R7494 += 1, R7448 += 1, R7415 += 1, R7416 += 1 };
  s1 -> s3 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1, R7395 += 1, R7396 += 1 };
  s1 -> s4 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1, R7396 += 1, R5988 += 1 };
  s2 -> s6 [0, 65535] { R7494 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R7494 += 1, R7448 += 1, R7415 += 1, R7416 += 1 };
  s2 -> s3 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1, R7395 += 1, R7396 += 1 };
  s2 -> s4 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1, R7396 += 1, R5988 += 1 };
  s3 -> s5 [0, 65535] { R7494 += 1, R7448 += 1 };
  s3 -> s6 [0, 65535] { R7494 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1, R7395 += 1, R7396 += 1 };
  s3 -> s4 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1, R7396 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R7494 += 1, R7448 += 1 };
  s4 -> s6 [0, 65535] { R7494 += 1 };
  s4 -> s7 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1, R7396 += 1, R5988 += 1 };
  s5 -> s5 [0, 65535] { R7494 += 1, R7448 += 1 };
  s5 -> s6 [0, 65535] { R7494 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R7494 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R7494 += 1, R7448 += 1 };
  s7 -> s6 [0, 65535] { R7494 += 1 };
  s7 -> s7 [0, 65535] { R7494 += 1, R7448 += 1, R7416 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R7495 += 1, R7496 += 1 };
  s0 -> s1 [0, 65535] { R7496 += 1, R7449 += 1, R7450 += 1 };
  s0 -> s2 [0, 65535] { R7496 += 1, R7450 += 1, R7417 += 1, R7418 += 1 };
  s0 -> s3 [0, 65535] { R7496 += 1, R7450 += 1, R7418 += 1, R7397 += 1, R7398 += 1 };
  s0 -> s4 [111, 111] { R7496 += 1, R7450 += 1, R7418 += 1, R7398 += 1 };
  s1 -> s1 [0, 65535] { R7496 += 1, R7449 += 1, R7450 += 1 };
  s1 -> s2 [0, 65535] { R7496 += 1, R7450 += 1, R7417 += 1, R7418 += 1 };
  s1 -> s3 [0, 65535] { R7496 += 1, R7450 += 1, R7418 += 1, R7397 += 1, R7398 += 1 };
  s1 -> s4 [111, 111] { R7496 += 1, R7450 += 1, R7418 += 1, R7398 += 1 };
  s2 -> s2 [0, 65535] { R7496 += 1, R7450 += 1, R7417 += 1, R7418 += 1 };
  s2 -> s3 [0, 65535] { R7496 += 1, R7450 += 1, R7418 += 1, R7397 += 1, R7398 += 1 };
  s2 -> s4 [111, 111] { R7496 += 1, R7450 += 1, R7418 += 1, R7398 += 1 };
  s3 -> s3 [0, 65535] { R7496 += 1, R7450 += 1, R7418 += 1, R7397 += 1, R7398 += 1 };
  s3 -> s4 [111, 111] { R7496 += 1, R7450 += 1, R7418 += 1, R7398 += 1 };
  s4 -> s5 [115, 115] { R7496 += 1, R7450 += 1, R7418 += 1, R7398 += 1 };
  s5 -> s6 [116, 116] { R7496 += 1, R7450 += 1, R7418 += 1, R7398 += 1 };
  s6 -> s6 [0, 65535] { R7496 += 1, R7450 += 1, R7418 += 1 };
  s6 -> s7 [0, 65535] { R7496 += 1, R7450 += 1 };
  s6 -> s8 [0, 65535] { R7496 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R7496 += 1, R7450 += 1 };
  s7 -> s8 [0, 65535] { R7496 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7496 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s6, s7, s8, s9;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1, R7403 += 1, R7404 += 1 };
  s0 -> s2 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1, R7404 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R7497 += 1, R7498 += 1 };
  s0 -> s3 [0, 65535] { R7498 += 1, R7451 += 1, R7452 += 1 };
  s0 -> s4 [0, 65535] { R7498 += 1, R7452 += 1, R7419 += 1, R7420 += 1 };
  s1 -> s1 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1, R7403 += 1, R7404 += 1 };
  s1 -> s7 [0, 65535] { R7498 += 1, R7452 += 1 };
  s1 -> s5 [0, 65535] { R7498 += 1 };
  s1 -> s2 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1, R7404 += 1, R5989 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R7498 += 1, R7452 += 1 };
  s2 -> s5 [0, 65535] { R7498 += 1 };
  s2 -> s2 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1, R7404 += 1, R5989 += 1 };
  s2 -> s8 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1, R7403 += 1, R7404 += 1 };
  s3 -> s2 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1, R7404 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R7498 += 1, R7451 += 1, R7452 += 1 };
  s3 -> s4 [0, 65535] { R7498 += 1, R7452 += 1, R7419 += 1, R7420 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s1 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1, R7403 += 1, R7404 += 1 };
  s4 -> s5 [0, 65535] { R7498 += 1 };
  s4 -> s2 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1, R7404 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R7498 += 1, R7452 += 1, R7419 += 1, R7420 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7498 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7498 += 1, R7452 += 1 };
  s7 -> s5 [0, 65535] { R7498 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R7498 += 1, R7452 += 1 };
  s8 -> s5 [0, 65535] { R7498 += 1 };
  s8 -> s8 [0, 65535] { R7498 += 1, R7452 += 1, R7420 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R7500 += 1, R7454 += 1, R7422 += 1, R7405 += 1, R7406 += 1 };
  s0 -> s2 [0, 65535] { R7500 += 1, R7454 += 1, R7421 += 1, R7422 += 1 };
  s0 -> s0 [0, 65535] { R7499 += 1, R7500 += 1 };
  s0 -> s3 [0, 65535] { R7500 += 1, R7453 += 1, R7454 += 1 };
  s0 -> s4 [111, 111] { R7500 += 1, R7454 += 1, R7422 += 1, R7406 += 1 };
  s1 -> s1 [0, 65535] { R7500 += 1, R7454 += 1, R7422 += 1, R7405 += 1, R7406 += 1 };
  s1 -> s4 [111, 111] { R7500 += 1, R7454 += 1, R7422 += 1, R7406 += 1 };
  s2 -> s1 [0, 65535] { R7500 += 1, R7454 += 1, R7422 += 1, R7405 += 1, R7406 += 1 };
  s2 -> s2 [0, 65535] { R7500 += 1, R7454 += 1, R7421 += 1, R7422 += 1 };
  s2 -> s4 [111, 111] { R7500 += 1, R7454 += 1, R7422 += 1, R7406 += 1 };
  s3 -> s1 [0, 65535] { R7500 += 1, R7454 += 1, R7422 += 1, R7405 += 1, R7406 += 1 };
  s3 -> s2 [0, 65535] { R7500 += 1, R7454 += 1, R7421 += 1, R7422 += 1 };
  s3 -> s3 [0, 65535] { R7500 += 1, R7453 += 1, R7454 += 1 };
  s3 -> s4 [111, 111] { R7500 += 1, R7454 += 1, R7422 += 1, R7406 += 1 };
  s4 -> s5 [99, 99] { R7500 += 1, R7454 += 1, R7422 += 1, R7406 += 1 };
  s5 -> s6 [97, 97] { R7500 += 1, R7454 += 1, R7422 += 1, R7406 += 1 };
  s6 -> s7 [108, 108] { R7500 += 1, R7454 += 1, R7422 += 1, R7406 += 1 };
  s7 -> s8 [104, 104] { R7500 += 1, R7454 += 1, R7422 += 1, R7406 += 1 };
  s8 -> s9 [0, 65535] { R7500 += 1 };
  s8 -> s8 [0, 65535] { R7500 += 1, R7454 += 1, R7422 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s11 [0, 65535] { R7500 += 1, R7454 += 1 };
  s9 -> s9 [0, 65535] { R7500 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s9 [0, 65535] { R7500 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R7500 += 1, R7454 += 1 };
  accepting s8, s9, s10, s11;
};
};
constraint R1 = R7398 && R2 = R7422 && R3 = R7070 && R4 = R7500 && R15 = 0 && R16 = R7454 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R7063 - R7454 = 1 && R7064 = R7070 && R7065 - R7454 = 1 && R7066 = R7070 && R7067 - R7454 = 1 && R7068 = R7070 && R7069 - R7454 = 1 && R7397 = 0 && R7401 = 0 && R7402 = 0 && R7405 = 0 && R7406 = 0 && R7407 = 0 && R7408 = R7422 && R7409 = 0 && R7410 = R7422 && R7411 = 0 && R7412 = R7422 && R7413 = 0 && R7414 = R7422 && R7415 = 0 && R7416 = R7422 && R7417 = 0 && R7418 = R7422 && R7419 = 0 && R7420 = R7422 && R7421 = 0 && R7423 = 0 && R7424 = R7454 && R7425 = 0 && R7426 = R7454 && R7427 = 0 && R7428 = R7454 && R7429 = 0 && R7430 = R7454 && R7431 = 0 && R7432 = R7454 && R7433 = 0 && R7434 = R7454 && R7435 = 0 && R7436 = R7454 && R7437 = 0 && R7438 = R7454 && R7439 = 0 && R7440 = R7454 && R7441 = 0 && R7442 = R7454 && R7443 = 0 && R7444 = R7454 && R7445 = 0 && R7446 = R7454 && R7447 = 0 && R7448 = R7454 && R7449 = 0 && R7450 = R7454 && R7451 = 0 && R7452 = R7454 && R7453 = 0 && R7455 = 10 && R7456 = R7500 && R7457 = 10 && R7458 = R7500 && R7459 = 10 && R7460 = R7500 && R7461 = 10 && R7462 = R7500 && R7463 = 10 && R7464 = R7500 && R7465 = 10 && R7466 = R7500 && R7467 = 10 && R7468 = R7500 && R7469 = 10 && R7470 = R7500 && R7471 = 10 && R7472 = R7500 && R7473 = 10 && R7474 = R7500 && R7475 = 10 && R7476 = R7500 && R7477 = 10 && R7478 = R7500 && R7479 = 10 && R7480 = R7500 && R7481 = 10 && R7482 = R7500 && R7483 = 10 && R7484 = R7500 && R7485 = 10 && R7486 = R7500 && R7487 = 10 && R7488 = R7500 && R7489 = 10 && R7490 = R7500 && R7491 = 10 && R7492 = R7500 && R7493 = 10 && R7494 = R7500 && R7495 = 10 && R7496 = R7500 && R7497 = 10 && R7498 = R7500 && R7499 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R7454 < R7070 && -1 < R7398 && 0 < R7422 && -1 < R7454 && 9 < R7500 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R7393 != 0 || R7394 = R7398 || (R5988 = 0 && R7398 = 0)) && (R7395 != 0 || R7396 = R7398 || (R5988 = 0 && R7398 = 0)) && (R5989 = 0 || (R7403 = 0 && R7404 = 0)) && (R5990 = 0 || (R7399 = 0 && R7400 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R7393 = 0 || (R5988 = 0 && R7398 = 0)) && (R7395 = 0 || (R5988 = 0 && R7398 = 0));
// End of Parikh automata intersection problem
