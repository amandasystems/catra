// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10541, R10542, R10543, R10544, R10545, R10546, R10547, R10548, R10549, R10550, R10551, R10552, R10553, R10554, R10555, R10556, R10557, R10558, R10559, R10560, R10561, R10562, R10563, R10564, R10565, R10566, R10567, R10568, R10569, R10570, R10571, R10572, R10573, R10574, R10575, R10576, R10577, R10578, R10579, R10580, R10581, R10582, R10583, R10584, R10585, R10586, R10587, R10588, R10589, R10590, R10591, R10592, R10593, R10594, R10595, R10596, R10597, R10598, R10599, R10600, R10601, R10602, R10603, R10604, R10605, R10606, R10607, R10608, R10609, R10610, R10611, R10612, R10613, R10614, R10615, R10616, R10617, R10618, R10619, R10620, R10621, R10622, R10623, R10624, R10625, R10626, R10627, R10628, R10629, R10630, R10631, R10632, R10633, R10634, R10635, R10636, R10637, R10638, R10639, R10640, R10641, R10642, R10643, R10644, R10645, R10646, R10647, R10648, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R10604 += 1 };
  s0 -> s0 [0, 65535] { R10603 += 1, R10604 += 1 };
  s0 -> s2 [46, 46] { R10604 += 1 };
  s0 -> s3 [47, 47] { R10604 += 1 };
  s0 -> s1 [48, 65535] { R10604 += 1 };
  s1 -> s1 [0, 45] { R10604 += 1 };
  s1 -> s2 [46, 46] { R10604 += 1 };
  s1 -> s3 [47, 47] { R10604 += 1 };
  s1 -> s1 [48, 65535] { R10604 += 1 };
  s2 -> s1 [0, 45] { R10604 += 1 };
  s2 -> s2 [46, 46] { R10604 += 1 };
  s2 -> s3 [47, 47] { R10604 += 1 };
  s2 -> s1 [48, 114] { R10604 += 1 };
  s2 -> s8 [115, 115] { R10604 += 1 };
  s2 -> s1 [116, 65535] { R10604 += 1 };
  s3 -> s3 [0, 45] { R10604 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R10604 += 1 };
  s3 -> s3 [47, 65535] { R10604 += 1 };
  s4 -> s3 [0, 45] { R10604 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R10604 += 1 };
  s4 -> s3 [47, 114] { R10604 += 1 };
  s4 -> s5 [115, 115] { R10604 += 1 };
  s4 -> s3 [116, 65535] { R10604 += 1 };
  s5 -> s3 [0, 45] { R10604 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R10604 += 1 };
  s5 -> s3 [47, 110] { R10604 += 1 };
  s5 -> s6 [111, 111] { R10604 += 1 };
  s5 -> s3 [112, 65535] { R10604 += 1 };
  s6 -> s3 [0, 45] { R10604 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R10604 += 1 };
  s6 -> s3 [47, 98] { R10604 += 1 };
  s6 -> s7 [99, 99] { R10604 += 1 };
  s6 -> s3 [100, 65535] { R10604 += 1 };
  s7 -> s3 [0, 45] { R10604 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R10604 += 1 };
  s7 -> s3 [47, 106] { R10604 += 1 };
  s7 -> s3 [108, 65535] { R10604 += 1 };
  s8 -> s1 [0, 45] { R10604 += 1 };
  s8 -> s2 [46, 46] { R10604 += 1 };
  s8 -> s3 [47, 47] { R10604 += 1 };
  s8 -> s1 [48, 110] { R10604 += 1 };
  s8 -> s9 [111, 111] { R10604 += 1 };
  s8 -> s1 [112, 65535] { R10604 += 1 };
  s9 -> s1 [0, 45] { R10604 += 1 };
  s9 -> s2 [46, 46] { R10604 += 1 };
  s9 -> s3 [47, 47] { R10604 += 1 };
  s9 -> s1 [48, 98] { R10604 += 1 };
  s9 -> s10 [99, 99] { R10604 += 1 };
  s9 -> s1 [100, 65535] { R10604 += 1 };
  s10 -> s1 [0, 45] { R10604 += 1 };
  s10 -> s2 [46, 46] { R10604 += 1 };
  s10 -> s3 [47, 47] { R10604 += 1 };
  s10 -> s1 [48, 106] { R10604 += 1 };
  s10 -> s1 [108, 65535] { R10604 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R10606 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R10605 += 1, R10606 += 1 };
  s1 -> s1 [0, 65535] { R10606 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R10608 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R10608 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10607 += 1, R10608 += 1 };
  s0 -> s3 [47, 47] { R10608 += 1 };
  s0 -> s1 [48, 65535] { R10608 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R10608 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R10608 += 1 };
  s1 -> s1 [48, 65535] { R10608 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R10608 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R10608 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R10608 += 1 };
  s2 -> s1 [48, 65535] { R10608 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R10608 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R10610 += 1, R10320 += 1 };
  s0 -> s2 [0, 65535] { R10610 += 1, R10319 += 1, R10320 += 1 };
  s0 -> s0 [0, 65535] { R10609 += 1, R10610 += 1 };
  s0 -> s1 [38, 42] { R10610 += 1, R10320 += 1 };
  s0 -> s1 [44, 45] { R10610 += 1, R10320 += 1 };
  s0 -> s1 [47, 62] { R10610 += 1, R10320 += 1 };
  s0 -> s1 [64, 65535] { R10610 += 1, R10320 += 1 };
  s1 -> s1 [0, 36] { R10610 += 1, R10320 += 1 };
  s1 -> s1 [0, 65535] { R10610 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R10610 += 1, R10320 += 1 };
  s1 -> s1 [44, 45] { R10610 += 1, R10320 += 1 };
  s1 -> s1 [47, 62] { R10610 += 1, R10320 += 1 };
  s1 -> s1 [64, 65535] { R10610 += 1, R10320 += 1 };
  s2 -> s1 [0, 36] { R10610 += 1, R10320 += 1 };
  s2 -> s2 [0, 65535] { R10610 += 1, R10319 += 1, R10320 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R10610 += 1, R10320 += 1 };
  s2 -> s1 [44, 45] { R10610 += 1, R10320 += 1 };
  s2 -> s1 [47, 62] { R10610 += 1, R10320 += 1 };
  s2 -> s1 [64, 65535] { R10610 += 1, R10320 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R10612 += 1, R10322 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R10611 += 1, R10612 += 1 };
  s0 -> s2 [0, 65535] { R10612 += 1, R10321 += 1, R10322 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10612 += 1, R10322 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R10612 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10612 += 1, R10322 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R10612 += 1, R10321 += 1, R10322 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10612 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R10613 += 1, R10614 += 1 };
  s0 -> s2 [0, 65535] { R10614 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R10614 += 1, R10323 += 1, R10324 += 1 };
  s0 -> s4 [63, 63] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R10614 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R10614 += 1, R10324 += 1 };
  s2 -> s1 [0, 62] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R10614 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10614 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10614 += 1, R10324 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R10614 += 1, R10323 += 1, R10324 += 1 };
  s3 -> s4 [63, 63] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R10614 += 1, R10324 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10614 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10614 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10614 += 1, R10324 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10616 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R10616 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R10615 += 1, R10616 += 1 };
  s0 -> s3 [0, 65535] { R10616 += 1, R10325 += 1, R10326 += 1 };
  s1 -> s6 [0, 65535] { R10616 += 1, R10326 += 1 };
  s1 -> s1 [0, 65535] { R10616 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R10616 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10616 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R10616 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535] { R10616 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10616 += 1, R10326 += 1, R5994 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R10616 += 1, R10326 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s3 [0, 65535] { R10616 += 1, R10325 += 1, R10326 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10616 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10616 += 1, R10326 += 1 };
  s6 -> s5 [0, 65535] { R10616 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R10618 += 1, R10572 += 1 };
  s0 -> s2 [0, 65535] { R10618 += 1, R10571 += 1, R10572 += 1 };
  s0 -> s0 [0, 65535] { R10617 += 1, R10618 += 1 };
  s0 -> s1 [45, 63] { R10618 += 1, R10572 += 1 };
  s0 -> s3 [87, 87] { R10618 += 1, R10572 += 1 };
  s0 -> s1 [88, 65535] { R10618 += 1, R10572 += 1 };
  s1 -> s1 [0, 43] { R10618 += 1, R10572 += 1 };
  s1 -> s1 [45, 63] { R10618 += 1, R10572 += 1 };
  s1 -> s3 [87, 87] { R10618 += 1, R10572 += 1 };
  s1 -> s1 [88, 65535] { R10618 += 1, R10572 += 1 };
  s2 -> s1 [0, 43] { R10618 += 1, R10572 += 1 };
  s2 -> s2 [0, 65535] { R10618 += 1, R10571 += 1, R10572 += 1 };
  s2 -> s1 [45, 63] { R10618 += 1, R10572 += 1 };
  s2 -> s3 [87, 87] { R10618 += 1, R10572 += 1 };
  s2 -> s1 [88, 65535] { R10618 += 1, R10572 += 1 };
  s3 -> s3 [0, 43] { R10618 += 1, R10572 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10618 += 1 };
  s3 -> s3 [45, 63] { R10618 += 1, R10572 += 1 };
  s3 -> s3 [87, 65535] { R10618 += 1, R10572 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R10619 += 1, R10620 += 1 };
  s0 -> s1 [0, 65535] { R10620 += 1, R10574 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R10620 += 1, R10573 += 1, R10574 += 1 };
  s1 -> s4 [0, 65535] { R10620 += 1 };
  s1 -> s1 [0, 65535] { R10620 += 1, R10574 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10620 += 1, R10574 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10620 += 1, R10573 += 1, R10574 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10620 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R10622 += 1, R10576 += 1 };
  s0 -> s0 [0, 65535] { R10621 += 1, R10622 += 1 };
  s0 -> s2 [0, 65535] { R10622 += 1, R10576 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R10622 += 1, R10575 += 1, R10576 += 1 };
  s0 -> s4 [58, 58] { R10622 += 1, R10576 += 1 };
  s0 -> s1 [59, 65535] { R10622 += 1, R10576 += 1 };
  s1 -> s1 [0, 57] { R10622 += 1, R10576 += 1 };
  s1 -> s1 [0, 65535] { R10622 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R10622 += 1, R10576 += 1 };
  s1 -> s1 [59, 65535] { R10622 += 1, R10576 += 1 };
  s2 -> s1 [0, 57] { R10622 += 1, R10576 += 1 };
  s2 -> s6 [0, 65535] { R10622 += 1 };
  s2 -> s2 [0, 65535] { R10622 += 1, R10576 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R10622 += 1, R10576 += 1 };
  s2 -> s1 [59, 65535] { R10622 += 1, R10576 += 1 };
  s3 -> s1 [0, 57] { R10622 += 1, R10576 += 1 };
  s3 -> s2 [0, 65535] { R10622 += 1, R10576 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10622 += 1, R10575 += 1, R10576 += 1 };
  s3 -> s4 [58, 58] { R10622 += 1, R10576 += 1 };
  s3 -> s1 [59, 65535] { R10622 += 1, R10576 += 1 };
  s4 -> s4 [0, 65535] { R10622 += 1, R10576 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10622 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R10624 += 1, R10578 += 1 };
  s0 -> s2 [0, 65535] { R10624 += 1, R10578 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R10624 += 1, R10577 += 1, R10578 += 1 };
  s0 -> s0 [0, 65535] { R10623 += 1, R10624 += 1 };
  s0 -> s4 [87, 87] { R10624 += 1, R10578 += 1 };
  s0 -> s1 [88, 65535] { R10624 += 1, R10578 += 1 };
  s1 -> s1 [0, 86] { R10624 += 1, R10578 += 1 };
  s1 -> s1 [0, 65535] { R10624 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R10624 += 1, R10578 += 1 };
  s1 -> s1 [88, 65535] { R10624 += 1, R10578 += 1 };
  s2 -> s1 [0, 86] { R10624 += 1, R10578 += 1 };
  s2 -> s2 [0, 65535] { R10624 += 1, R10578 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R10624 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [87, 87] { R10624 += 1, R10578 += 1 };
  s2 -> s1 [88, 65535] { R10624 += 1, R10578 += 1 };
  s3 -> s1 [0, 86] { R10624 += 1, R10578 += 1 };
  s3 -> s2 [0, 65535] { R10624 += 1, R10578 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R10624 += 1, R10577 += 1, R10578 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [87, 87] { R10624 += 1, R10578 += 1 };
  s3 -> s1 [88, 65535] { R10624 += 1, R10578 += 1 };
  s4 -> s4 [0, 65535] { R10624 += 1, R10578 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10624 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R10626 += 1, R10580 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R10625 += 1, R10626 += 1 };
  s0 -> s3 [0, 65535] { R10626 += 1, R10579 += 1, R10580 += 1 };
  s0 -> s4 [91, 91] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R10626 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R10626 += 1, R10580 += 1 };
  s2 -> s1 [0, 90] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R10626 += 1 };
  s2 -> s2 [0, 65535] { R10626 += 1, R10580 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R10626 += 1, R10580 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10626 += 1, R10579 += 1, R10580 += 1 };
  s3 -> s4 [91, 91] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R10626 += 1, R10580 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10626 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10626 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10626 += 1, R10580 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10628 += 1, R10581 += 1, R10582 += 1 };
  s0 -> s2 [0, 65535] { R10628 += 1, R10582 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R10627 += 1, R10628 += 1 };
  s0 -> s3 [0, 65535] { R10628 += 1, R10582 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10628 += 1, R10581 += 1, R10582 += 1 };
  s1 -> s2 [0, 65535] { R10628 += 1, R10582 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s3 [0, 65535] { R10628 += 1, R10582 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10628 += 1 };
  s2 -> s2 [0, 65535] { R10628 += 1, R10582 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s3 [0, 65535] { R10628 += 1, R10582 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10628 += 1 };
  s3 -> s6 [0, 65535] { R10628 += 1, R10582 += 1 };
  s3 -> s3 [0, 65535] { R10628 += 1, R10582 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10628 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10628 += 1 };
  s6 -> s6 [0, 65535] { R10628 += 1, R10582 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10630 += 1, R10583 += 1, R10584 += 1 };
  s0 -> s2 [0, 65535] { R10630 += 1, R10584 += 1, R10547 += 1, R10548 += 1 };
  s0 -> s0 [0, 65535] { R10629 += 1, R10630 += 1 };
  s0 -> s3 [0, 65535] { R10630 += 1, R10584 += 1, R10548 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10630 += 1, R10583 += 1, R10584 += 1 };
  s1 -> s2 [0, 65535] { R10630 += 1, R10584 += 1, R10547 += 1, R10548 += 1 };
  s1 -> s3 [0, 65535] { R10630 += 1, R10584 += 1, R10548 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10630 += 1, R10584 += 1, R10547 += 1, R10548 += 1 };
  s2 -> s6 [0, 65535] { R10630 += 1 };
  s2 -> s3 [0, 65535] { R10630 += 1, R10584 += 1, R10548 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10630 += 1, R10584 += 1 };
  s3 -> s6 [0, 65535] { R10630 += 1 };
  s3 -> s3 [0, 65535] { R10630 += 1, R10584 += 1, R10548 += 1, R5990 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10630 += 1, R10584 += 1 };
  s5 -> s6 [0, 65535] { R10630 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10630 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10632 += 1, R10585 += 1, R10586 += 1 };
  s0 -> s2 [0, 65535] { R10632 += 1, R10586 += 1, R10549 += 1, R10550 += 1 };
  s0 -> s0 [0, 65535] { R10631 += 1, R10632 += 1 };
  s0 -> s3 [108, 108] { R10632 += 1, R10586 += 1, R10550 += 1 };
  s1 -> s1 [0, 65535] { R10632 += 1, R10585 += 1, R10586 += 1 };
  s1 -> s2 [0, 65535] { R10632 += 1, R10586 += 1, R10549 += 1, R10550 += 1 };
  s1 -> s3 [108, 108] { R10632 += 1, R10586 += 1, R10550 += 1 };
  s2 -> s2 [0, 65535] { R10632 += 1, R10586 += 1, R10549 += 1, R10550 += 1 };
  s2 -> s3 [108, 108] { R10632 += 1, R10586 += 1, R10550 += 1 };
  s3 -> s4 [111, 111] { R10632 += 1, R10586 += 1, R10550 += 1 };
  s4 -> s5 [99, 99] { R10632 += 1, R10586 += 1, R10550 += 1 };
  s5 -> s6 [97, 97] { R10632 += 1, R10586 += 1, R10550 += 1 };
  s6 -> s7 [108, 108] { R10632 += 1, R10586 += 1, R10550 += 1 };
  s7 -> s7 [0, 65535] { R10632 += 1, R10586 += 1 };
  s7 -> s8 [0, 65535] { R10632 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10632 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s7, s8, s9;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s0 -> s0 [0, 65535] { R10633 += 1, R10634 += 1 };
  s0 -> s2 [0, 65535] { R10634 += 1, R10588 += 1, R10555 += 1, R10556 += 1 };
  s0 -> s3 [0, 65535] { R10634 += 1, R10587 += 1, R10588 += 1 };
  s0 -> s4 [87, 87] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s0 -> s1 [88, 65535] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s1 -> s1 [0, 86] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s1 -> s4 [87, 87] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s1 -> s1 [88, 65535] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s2 -> s1 [0, 86] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s2 -> s2 [0, 65535] { R10634 += 1, R10588 += 1, R10555 += 1, R10556 += 1 };
  s2 -> s4 [87, 87] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s2 -> s1 [88, 65535] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s3 -> s1 [0, 86] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s3 -> s2 [0, 65535] { R10634 += 1, R10588 += 1, R10555 += 1, R10556 += 1 };
  s3 -> s3 [0, 65535] { R10634 += 1, R10587 += 1, R10588 += 1 };
  s3 -> s4 [87, 87] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s3 -> s1 [88, 65535] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10634 += 1, R10588 += 1, R10556 += 1 };
  s4 -> s6 [0, 65535] { R10634 += 1 };
  s4 -> s7 [0, 65535] { R10634 += 1, R10588 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10634 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10634 += 1 };
  s7 -> s7 [0, 65535] { R10634 += 1, R10588 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10636 += 1, R10590 += 1, R10557 += 1, R10558 += 1 };
  s0 -> s2 [0, 65535] { R10636 += 1, R10590 += 1, R10558 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10635 += 1, R10636 += 1 };
  s0 -> s3 [0, 65535] { R10636 += 1, R10589 += 1, R10590 += 1 };
  s1 -> s1 [0, 65535] { R10636 += 1, R10590 += 1, R10557 += 1, R10558 += 1 };
  s1 -> s2 [0, 65535] { R10636 += 1, R10590 += 1, R10558 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R10636 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10636 += 1, R10590 += 1 };
  s2 -> s2 [0, 65535] { R10636 += 1, R10590 += 1, R10558 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R10636 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10636 += 1, R10590 += 1, R10557 += 1, R10558 += 1 };
  s3 -> s2 [0, 65535] { R10636 += 1, R10590 += 1, R10558 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10636 += 1, R10589 += 1, R10590 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10636 += 1, R10590 += 1 };
  s5 -> s6 [0, 65535] { R10636 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10636 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s0 -> s2 [0, 65535] { R10638 += 1, R10592 += 1, R10559 += 1, R10560 += 1 };
  s0 -> s0 [0, 65535] { R10637 += 1, R10638 += 1 };
  s0 -> s3 [0, 65535] { R10638 += 1, R10591 += 1, R10592 += 1 };
  s0 -> s4 [0, 65535] { R10638 += 1, R10592 += 1, R10560 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s0 -> s1 [88, 65535] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s1 -> s1 [0, 86] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s1 -> s1 [0, 65535] { R10638 += 1, R10592 += 1 };
  s1 -> s7 [0, 65535] { R10638 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [87, 87] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s1 -> s1 [88, 65535] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s2 -> s1 [0, 86] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s2 -> s2 [0, 65535] { R10638 += 1, R10592 += 1, R10559 += 1, R10560 += 1 };
  s2 -> s7 [0, 65535] { R10638 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [0, 65535] { R10638 += 1, R10592 += 1, R10560 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s2 -> s1 [88, 65535] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s3 -> s1 [0, 86] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s3 -> s2 [0, 65535] { R10638 += 1, R10592 += 1, R10559 += 1, R10560 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R10638 += 1, R10591 += 1, R10592 += 1 };
  s3 -> s4 [0, 65535] { R10638 += 1, R10592 += 1, R10560 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s3 -> s1 [88, 65535] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s4 -> s1 [0, 86] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s4 -> s6 [0, 65535] { R10638 += 1, R10592 += 1 };
  s4 -> s7 [0, 65535] { R10638 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R10638 += 1, R10592 += 1, R10560 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s4 -> s1 [88, 65535] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s5 -> s5 [0, 65535] { R10638 += 1, R10592 += 1, R10560 += 1 };
  s6 -> s6 [0, 65535] { R10638 += 1, R10592 += 1 };
  s6 -> s7 [0, 65535] { R10638 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10638 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s0 -> s2 [0, 65535] { R10640 += 1, R10594 += 1, R10561 += 1, R10562 += 1 };
  s0 -> s3 [0, 65535] { R10640 += 1, R10594 += 1, R10562 += 1, R10541 += 1, R10542 += 1 };
  s0 -> s0 [0, 65535] { R10639 += 1, R10640 += 1 };
  s0 -> s4 [0, 65535] { R10640 += 1, R10593 += 1, R10594 += 1 };
  s0 -> s1 [88, 65535] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s1 -> s1 [0, 86] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s1 -> s1 [0, 65535] { R10640 += 1, R10594 += 1, R10562 += 1 };
  s1 -> s6 [0, 65535] { R10640 += 1 };
  s1 -> s7 [0, 65535] { R10640 += 1, R10594 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s2 -> s1 [0, 86] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s2 -> s2 [0, 65535] { R10640 += 1, R10594 += 1, R10561 += 1, R10562 += 1 };
  s2 -> s6 [0, 65535] { R10640 += 1 };
  s2 -> s3 [0, 65535] { R10640 += 1, R10594 += 1, R10562 += 1, R10541 += 1, R10542 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s3 -> s1 [0, 86] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s3 -> s6 [0, 65535] { R10640 += 1 };
  s3 -> s7 [0, 65535] { R10640 += 1, R10594 += 1 };
  s3 -> s3 [0, 65535] { R10640 += 1, R10594 += 1, R10562 += 1, R10541 += 1, R10542 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s4 -> s1 [0, 86] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s4 -> s2 [0, 65535] { R10640 += 1, R10594 += 1, R10561 += 1, R10562 += 1 };
  s4 -> s3 [0, 65535] { R10640 += 1, R10594 += 1, R10562 += 1, R10541 += 1, R10542 += 1 };
  s4 -> s4 [0, 65535] { R10640 += 1, R10593 += 1, R10594 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [88, 65535] { R10640 += 1, R10594 += 1, R10562 += 1, R10542 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10640 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10640 += 1 };
  s7 -> s7 [0, 65535] { R10640 += 1, R10594 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1, R10543 += 1, R10544 += 1 };
  s0 -> s2 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1, R10544 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R10641 += 1, R10642 += 1 };
  s0 -> s3 [0, 65535] { R10642 += 1, R10596 += 1, R10563 += 1, R10564 += 1 };
  s0 -> s4 [0, 65535] { R10642 += 1, R10595 += 1, R10596 += 1 };
  s1 -> s7 [0, 65535] { R10642 += 1, R10596 += 1 };
  s1 -> s1 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1, R10543 += 1, R10544 += 1 };
  s1 -> s2 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1, R10544 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10642 += 1 };
  s2 -> s7 [0, 65535] { R10642 += 1, R10596 += 1 };
  s2 -> s8 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1 };
  s2 -> s2 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1, R10544 += 1, R5988 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10642 += 1 };
  s3 -> s1 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1, R10543 += 1, R10544 += 1 };
  s3 -> s2 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1, R10544 += 1, R5988 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10642 += 1, R10596 += 1, R10563 += 1, R10564 += 1 };
  s3 -> s6 [0, 65535] { R10642 += 1 };
  s4 -> s1 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1, R10543 += 1, R10544 += 1 };
  s4 -> s2 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1, R10544 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R10642 += 1, R10596 += 1, R10563 += 1, R10564 += 1 };
  s4 -> s4 [0, 65535] { R10642 += 1, R10595 += 1, R10596 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10642 += 1 };
  s7 -> s7 [0, 65535] { R10642 += 1, R10596 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10642 += 1 };
  s8 -> s7 [0, 65535] { R10642 += 1, R10596 += 1 };
  s8 -> s8 [0, 65535] { R10642 += 1, R10596 += 1, R10564 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10642 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10644 += 1, R10598 += 1, R10565 += 1, R10566 += 1 };
  s0 -> s2 [0, 65535] { R10644 += 1, R10598 += 1, R10566 += 1, R10545 += 1, R10546 += 1 };
  s0 -> s0 [0, 65535] { R10643 += 1, R10644 += 1 };
  s0 -> s3 [0, 65535] { R10644 += 1, R10597 += 1, R10598 += 1 };
  s0 -> s4 [115, 115] { R10644 += 1, R10598 += 1, R10566 += 1, R10546 += 1 };
  s1 -> s1 [0, 65535] { R10644 += 1, R10598 += 1, R10565 += 1, R10566 += 1 };
  s1 -> s2 [0, 65535] { R10644 += 1, R10598 += 1, R10566 += 1, R10545 += 1, R10546 += 1 };
  s1 -> s4 [115, 115] { R10644 += 1, R10598 += 1, R10566 += 1, R10546 += 1 };
  s2 -> s2 [0, 65535] { R10644 += 1, R10598 += 1, R10566 += 1, R10545 += 1, R10546 += 1 };
  s2 -> s4 [115, 115] { R10644 += 1, R10598 += 1, R10566 += 1, R10546 += 1 };
  s3 -> s1 [0, 65535] { R10644 += 1, R10598 += 1, R10565 += 1, R10566 += 1 };
  s3 -> s2 [0, 65535] { R10644 += 1, R10598 += 1, R10566 += 1, R10545 += 1, R10546 += 1 };
  s3 -> s3 [0, 65535] { R10644 += 1, R10597 += 1, R10598 += 1 };
  s3 -> s4 [115, 115] { R10644 += 1, R10598 += 1, R10566 += 1, R10546 += 1 };
  s4 -> s5 [116, 116] { R10644 += 1, R10598 += 1, R10566 += 1, R10546 += 1 };
  s5 -> s6 [0, 65535] { R10644 += 1 };
  s5 -> s7 [0, 65535] { R10644 += 1, R10598 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10644 += 1, R10598 += 1, R10566 += 1 };
  s6 -> s6 [0, 65535] { R10644 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R10644 += 1 };
  s7 -> s7 [0, 65535] { R10644 += 1, R10598 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R10645 += 1, R10646 += 1 };
  s0 -> s1 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1, R10552 += 1, R5989 += 1 };
  s0 -> s2 [0, 65535] { R10646 += 1, R10600 += 1, R10567 += 1, R10568 += 1 };
  s0 -> s3 [0, 65535] { R10646 += 1, R10599 += 1, R10600 += 1 };
  s0 -> s4 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1, R10551 += 1, R10552 += 1 };
  s1 -> s5 [0, 65535] { R10646 += 1 };
  s1 -> s8 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1 };
  s1 -> s1 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1, R10552 += 1, R5989 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10646 += 1, R10600 += 1 };
  s2 -> s5 [0, 65535] { R10646 += 1 };
  s2 -> s1 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1, R10552 += 1, R5989 += 1 };
  s2 -> s2 [0, 65535] { R10646 += 1, R10600 += 1, R10567 += 1, R10568 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1, R10551 += 1, R10552 += 1 };
  s3 -> s1 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1, R10552 += 1, R5989 += 1 };
  s3 -> s2 [0, 65535] { R10646 += 1, R10600 += 1, R10567 += 1, R10568 += 1 };
  s3 -> s3 [0, 65535] { R10646 += 1, R10599 += 1, R10600 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1, R10551 += 1, R10552 += 1 };
  s4 -> s5 [0, 65535] { R10646 += 1 };
  s4 -> s1 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1, R10552 += 1, R5989 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10646 += 1, R10600 += 1 };
  s4 -> s4 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1, R10551 += 1, R10552 += 1 };
  s5 -> s5 [0, 65535] { R10646 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10646 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10646 += 1, R10600 += 1 };
  s8 -> s5 [0, 65535] { R10646 += 1 };
  s8 -> s8 [0, 65535] { R10646 += 1, R10600 += 1, R10568 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10646 += 1, R10600 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10648 += 1, R10601 += 1, R10602 += 1 };
  s0 -> s0 [0, 65535] { R10647 += 1, R10648 += 1 };
  s0 -> s2 [0, 65535] { R10648 += 1, R10602 += 1, R10569 += 1, R10570 += 1 };
  s0 -> s3 [0, 65535] { R10648 += 1, R10602 += 1, R10570 += 1, R10553 += 1, R10554 += 1 };
  s0 -> s4 [104, 104] { R10648 += 1, R10602 += 1, R10570 += 1, R10554 += 1 };
  s1 -> s1 [0, 65535] { R10648 += 1, R10601 += 1, R10602 += 1 };
  s1 -> s2 [0, 65535] { R10648 += 1, R10602 += 1, R10569 += 1, R10570 += 1 };
  s1 -> s3 [0, 65535] { R10648 += 1, R10602 += 1, R10570 += 1, R10553 += 1, R10554 += 1 };
  s1 -> s4 [104, 104] { R10648 += 1, R10602 += 1, R10570 += 1, R10554 += 1 };
  s2 -> s2 [0, 65535] { R10648 += 1, R10602 += 1, R10569 += 1, R10570 += 1 };
  s2 -> s3 [0, 65535] { R10648 += 1, R10602 += 1, R10570 += 1, R10553 += 1, R10554 += 1 };
  s2 -> s4 [104, 104] { R10648 += 1, R10602 += 1, R10570 += 1, R10554 += 1 };
  s3 -> s3 [0, 65535] { R10648 += 1, R10602 += 1, R10570 += 1, R10553 += 1, R10554 += 1 };
  s3 -> s4 [104, 104] { R10648 += 1, R10602 += 1, R10570 += 1, R10554 += 1 };
  s4 -> s5 [111, 111] { R10648 += 1, R10602 += 1, R10570 += 1, R10554 += 1 };
  s5 -> s6 [0, 65535] { R10648 += 1 };
  s5 -> s5 [0, 65535] { R10648 += 1, R10602 += 1, R10570 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R10648 += 1, R10602 += 1 };
  s6 -> s6 [0, 65535] { R10648 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10648 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10648 += 1, R10602 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R1 = R10546 && R2 = R10570 && R3 = R10326 && R4 = R10648 && R15 = 0 && R16 = R10602 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R10319 - R10602 = 1 && R10320 = R10326 && R10321 - R10602 = 1 && R10322 = R10326 && R10323 - R10602 = 1 && R10324 = R10326 && R10325 - R10602 = 1 && R10545 = 0 && R10549 = 0 && R10550 = 0 && R10553 = 0 && R10554 = 0 && R10555 = 0 && R10556 = R10570 && R10557 = 0 && R10558 = R10570 && R10559 = 0 && R10560 = R10570 && R10561 = 0 && R10562 = R10570 && R10563 = 0 && R10564 = R10570 && R10565 = 0 && R10566 = R10570 && R10567 = 0 && R10568 = R10570 && R10569 = 0 && R10571 = 0 && R10572 = R10602 && R10573 = 0 && R10574 = R10602 && R10575 = 0 && R10576 = R10602 && R10577 = 0 && R10578 = R10602 && R10579 = 0 && R10580 = R10602 && R10581 = 0 && R10582 = R10602 && R10583 = 0 && R10584 = R10602 && R10585 = 0 && R10586 = R10602 && R10587 = 0 && R10588 = R10602 && R10589 = 0 && R10590 = R10602 && R10591 = 0 && R10592 = R10602 && R10593 = 0 && R10594 = R10602 && R10595 = 0 && R10596 = R10602 && R10597 = 0 && R10598 = R10602 && R10599 = 0 && R10600 = R10602 && R10601 = 0 && R10603 = 10 && R10604 = R10648 && R10605 = 10 && R10606 = R10648 && R10607 = 10 && R10608 = R10648 && R10609 = 10 && R10610 = R10648 && R10611 = 10 && R10612 = R10648 && R10613 = 10 && R10614 = R10648 && R10615 = 10 && R10616 = R10648 && R10617 = 10 && R10618 = R10648 && R10619 = 10 && R10620 = R10648 && R10621 = 10 && R10622 = R10648 && R10623 = 10 && R10624 = R10648 && R10625 = 10 && R10626 = R10648 && R10627 = 10 && R10628 = R10648 && R10629 = 10 && R10630 = R10648 && R10631 = 10 && R10632 = R10648 && R10633 = 10 && R10634 = R10648 && R10635 = 10 && R10636 = R10648 && R10637 = 10 && R10638 = R10648 && R10639 = 10 && R10640 = R10648 && R10641 = 10 && R10642 = R10648 && R10643 = 10 && R10644 = R10648 && R10645 = 10 && R10646 = R10648 && R10647 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R10602 < R10326 && -1 < R10546 && 0 < R10570 && -1 < R10602 && 9 < R10648 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R10541 != 0 || R10542 = R10546 || (R5988 = 0 && R10546 = 0)) && (R10543 != 0 || R10544 = R10546 || (R5988 = 0 && R10546 = 0)) && (R5989 = 0 || (R10551 = 0 && R10552 = 0)) && (R5990 = 0 || (R10547 = 0 && R10548 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R10541 = 0 || (R5988 = 0 && R10546 = 0)) && (R10543 = 0 || (R5988 = 0 && R10546 = 0));
// End of Parikh automata intersection problem
