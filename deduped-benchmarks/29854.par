// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R9021, R9022, R9023, R9024, R9025, R9026, R9027, R9028, R9029, R9030, R9031, R9032, R9033, R9034, R9035, R9036, R9037, R9038, R9039, R9040, R9041, R9042, R9043, R9044, R9045, R9046, R9047, R9048, R9049, R9050, R9051, R9052, R9053, R9054, R9055, R9056, R9057, R9058, R9059, R9060, R9061, R9062, R9063, R9064, R9065, R9066, R9067, R9068, R9069, R9070, R9071, R9072, R9073, R9074, R9075, R9076, R9077, R9078, R9079, R9080, R9081, R9082, R9083, R9084, R9085, R9086, R9087, R9088, R9089, R9090, R9091, R9092, R9093, R9094, R9095, R9096, R9097, R9098, R9099, R9100, R9101, R9102, R9103, R9104, R9105, R9106, R9107, R9108, R9109, R9110, R9111, R9112, R9113, R9114, R9115, R9116, R9117, R9118, R9119, R9120, R9121, R9122, R9123, R9124, R9125, R9126, R9127, R9128;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R9084 += 1 };
  s0 -> s0 [0, 65535] { R9083 += 1, R9084 += 1 };
  s0 -> s2 [46, 46] { R9084 += 1 };
  s0 -> s3 [47, 47] { R9084 += 1 };
  s0 -> s1 [48, 65535] { R9084 += 1 };
  s1 -> s1 [0, 45] { R9084 += 1 };
  s1 -> s2 [46, 46] { R9084 += 1 };
  s1 -> s3 [47, 47] { R9084 += 1 };
  s1 -> s1 [48, 65535] { R9084 += 1 };
  s2 -> s1 [0, 45] { R9084 += 1 };
  s2 -> s2 [46, 46] { R9084 += 1 };
  s2 -> s3 [47, 47] { R9084 += 1 };
  s2 -> s1 [48, 114] { R9084 += 1 };
  s2 -> s8 [115, 115] { R9084 += 1 };
  s2 -> s1 [116, 65535] { R9084 += 1 };
  s3 -> s3 [0, 45] { R9084 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R9084 += 1 };
  s3 -> s3 [47, 65535] { R9084 += 1 };
  s4 -> s3 [0, 45] { R9084 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R9084 += 1 };
  s4 -> s3 [47, 114] { R9084 += 1 };
  s4 -> s5 [115, 115] { R9084 += 1 };
  s4 -> s3 [116, 65535] { R9084 += 1 };
  s5 -> s3 [0, 45] { R9084 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R9084 += 1 };
  s5 -> s3 [47, 110] { R9084 += 1 };
  s5 -> s6 [111, 111] { R9084 += 1 };
  s5 -> s3 [112, 65535] { R9084 += 1 };
  s6 -> s3 [0, 45] { R9084 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R9084 += 1 };
  s6 -> s3 [47, 98] { R9084 += 1 };
  s6 -> s7 [99, 99] { R9084 += 1 };
  s6 -> s3 [100, 65535] { R9084 += 1 };
  s7 -> s3 [0, 45] { R9084 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R9084 += 1 };
  s7 -> s3 [47, 106] { R9084 += 1 };
  s7 -> s3 [108, 65535] { R9084 += 1 };
  s8 -> s1 [0, 45] { R9084 += 1 };
  s8 -> s2 [46, 46] { R9084 += 1 };
  s8 -> s3 [47, 47] { R9084 += 1 };
  s8 -> s1 [48, 110] { R9084 += 1 };
  s8 -> s9 [111, 111] { R9084 += 1 };
  s8 -> s1 [112, 65535] { R9084 += 1 };
  s9 -> s1 [0, 45] { R9084 += 1 };
  s9 -> s2 [46, 46] { R9084 += 1 };
  s9 -> s3 [47, 47] { R9084 += 1 };
  s9 -> s1 [48, 98] { R9084 += 1 };
  s9 -> s10 [99, 99] { R9084 += 1 };
  s9 -> s1 [100, 65535] { R9084 += 1 };
  s10 -> s1 [0, 45] { R9084 += 1 };
  s10 -> s2 [46, 46] { R9084 += 1 };
  s10 -> s3 [47, 47] { R9084 += 1 };
  s10 -> s1 [48, 106] { R9084 += 1 };
  s10 -> s1 [108, 65535] { R9084 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R9086 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R9085 += 1, R9086 += 1 };
  s1 -> s1 [0, 65535] { R9086 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R9088 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R9087 += 1, R9088 += 1 };
  s0 -> s2 [0, 65535] { R9088 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R9088 += 1 };
  s0 -> s1 [48, 65535] { R9088 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R9088 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R9088 += 1 };
  s1 -> s1 [48, 65535] { R9088 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R9088 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R9088 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R9088 += 1 };
  s2 -> s1 [48, 65535] { R9088 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R9088 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R9090 += 1, R8908 += 1 };
  s0 -> s2 [0, 65535] { R9090 += 1, R8907 += 1, R8908 += 1 };
  s0 -> s0 [0, 65535] { R9089 += 1, R9090 += 1 };
  s0 -> s1 [38, 42] { R9090 += 1, R8908 += 1 };
  s0 -> s1 [44, 45] { R9090 += 1, R8908 += 1 };
  s0 -> s1 [47, 62] { R9090 += 1, R8908 += 1 };
  s0 -> s1 [64, 65535] { R9090 += 1, R8908 += 1 };
  s1 -> s1 [0, 36] { R9090 += 1, R8908 += 1 };
  s1 -> s1 [0, 65535] { R9090 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R9090 += 1, R8908 += 1 };
  s1 -> s1 [44, 45] { R9090 += 1, R8908 += 1 };
  s1 -> s1 [47, 62] { R9090 += 1, R8908 += 1 };
  s1 -> s1 [64, 65535] { R9090 += 1, R8908 += 1 };
  s2 -> s1 [0, 36] { R9090 += 1, R8908 += 1 };
  s2 -> s2 [0, 65535] { R9090 += 1, R8907 += 1, R8908 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R9090 += 1, R8908 += 1 };
  s2 -> s1 [44, 45] { R9090 += 1, R8908 += 1 };
  s2 -> s1 [47, 62] { R9090 += 1, R8908 += 1 };
  s2 -> s1 [64, 65535] { R9090 += 1, R8908 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R9091 += 1, R9092 += 1 };
  s0 -> s1 [0, 65535] { R9092 += 1, R8909 += 1, R8910 += 1 };
  s0 -> s2 [0, 65535] { R9092 += 1, R8910 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9092 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s2 [0, 65535] { R9092 += 1, R8910 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R9092 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9092 += 1, R8910 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R9092 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R9094 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R9094 += 1, R8911 += 1, R8912 += 1 };
  s0 -> s0 [0, 65535] { R9093 += 1, R9094 += 1 };
  s0 -> s4 [63, 63] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R9094 += 1 };
  s1 -> s7 [0, 65535] { R9094 += 1, R8912 += 1 };
  s1 -> s1 [0, 65535] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R9094 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R9094 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R9094 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R9094 += 1, R8911 += 1, R8912 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R9094 += 1, R8912 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9094 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9094 += 1 };
  s7 -> s7 [0, 65535] { R9094 += 1, R8912 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9096 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R9095 += 1, R9096 += 1 };
  s0 -> s2 [0, 65535] { R9096 += 1, R8913 += 1, R8914 += 1 };
  s0 -> s3 [0, 65535] { R9096 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R9096 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R9096 += 1, R8914 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9096 += 1 };
  s2 -> s1 [0, 65535] { R9096 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R9096 += 1, R8913 += 1, R8914 += 1 };
  s2 -> s3 [0, 65535] { R9096 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9096 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R9096 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9096 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9096 += 1 };
  s6 -> s6 [0, 65535] { R9096 += 1, R8914 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9096 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R9098 += 1, R9052 += 1 };
  s0 -> s0 [0, 65535] { R9097 += 1, R9098 += 1 };
  s0 -> s2 [0, 65535] { R9098 += 1, R9051 += 1, R9052 += 1 };
  s0 -> s1 [45, 63] { R9098 += 1, R9052 += 1 };
  s0 -> s3 [87, 87] { R9098 += 1, R9052 += 1 };
  s0 -> s1 [88, 65535] { R9098 += 1, R9052 += 1 };
  s1 -> s1 [0, 43] { R9098 += 1, R9052 += 1 };
  s1 -> s1 [45, 63] { R9098 += 1, R9052 += 1 };
  s1 -> s3 [87, 87] { R9098 += 1, R9052 += 1 };
  s1 -> s1 [88, 65535] { R9098 += 1, R9052 += 1 };
  s2 -> s1 [0, 43] { R9098 += 1, R9052 += 1 };
  s2 -> s2 [0, 65535] { R9098 += 1, R9051 += 1, R9052 += 1 };
  s2 -> s1 [45, 63] { R9098 += 1, R9052 += 1 };
  s2 -> s3 [87, 87] { R9098 += 1, R9052 += 1 };
  s2 -> s1 [88, 65535] { R9098 += 1, R9052 += 1 };
  s3 -> s3 [0, 43] { R9098 += 1, R9052 += 1 };
  s3 -> s3 [0, 65535] { R9098 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R9098 += 1, R9052 += 1 };
  s3 -> s3 [87, 65535] { R9098 += 1, R9052 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R9100 += 1, R9053 += 1, R9054 += 1 };
  s0 -> s0 [0, 65535] { R9099 += 1, R9100 += 1 };
  s0 -> s2 [0, 65535] { R9100 += 1, R9054 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R9100 += 1, R9053 += 1, R9054 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9100 += 1, R9054 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9100 += 1 };
  s2 -> s2 [0, 65535] { R9100 += 1, R9054 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9100 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R9102 += 1, R9056 += 1 };
  s0 -> s2 [0, 65535] { R9102 += 1, R9055 += 1, R9056 += 1 };
  s0 -> s3 [0, 65535] { R9102 += 1, R9056 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R9101 += 1, R9102 += 1 };
  s0 -> s4 [58, 58] { R9102 += 1, R9056 += 1 };
  s0 -> s1 [59, 65535] { R9102 += 1, R9056 += 1 };
  s1 -> s1 [0, 57] { R9102 += 1, R9056 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9102 += 1 };
  s1 -> s4 [58, 58] { R9102 += 1, R9056 += 1 };
  s1 -> s1 [59, 65535] { R9102 += 1, R9056 += 1 };
  s2 -> s1 [0, 57] { R9102 += 1, R9056 += 1 };
  s2 -> s2 [0, 65535] { R9102 += 1, R9055 += 1, R9056 += 1 };
  s2 -> s3 [0, 65535] { R9102 += 1, R9056 += 1, R10 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [58, 58] { R9102 += 1, R9056 += 1 };
  s2 -> s1 [59, 65535] { R9102 += 1, R9056 += 1 };
  s3 -> s1 [0, 57] { R9102 += 1, R9056 += 1 };
  s3 -> s3 [0, 65535] { R9102 += 1, R9056 += 1, R10 += 1 };
  s3 -> s5 [0, 65535] { R9102 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [58, 58] { R9102 += 1, R9056 += 1 };
  s3 -> s1 [59, 65535] { R9102 += 1, R9056 += 1 };
  s4 -> s4 [0, 65535] { R9102 += 1, R9056 += 1 };
  s5 -> s5 [0, 65535] { R9102 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R9104 += 1, R9058 += 1 };
  s0 -> s2 [0, 65535] { R9104 += 1, R9058 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R9103 += 1, R9104 += 1 };
  s0 -> s3 [0, 65535] { R9104 += 1, R9057 += 1, R9058 += 1 };
  s0 -> s4 [87, 87] { R9104 += 1, R9058 += 1 };
  s0 -> s1 [88, 65535] { R9104 += 1, R9058 += 1 };
  s1 -> s1 [0, 86] { R9104 += 1, R9058 += 1 };
  s1 -> s1 [0, 65535] { R9104 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R9104 += 1, R9058 += 1 };
  s1 -> s1 [88, 65535] { R9104 += 1, R9058 += 1 };
  s2 -> s1 [0, 86] { R9104 += 1, R9058 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9104 += 1, R9058 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R9104 += 1 };
  s2 -> s4 [87, 87] { R9104 += 1, R9058 += 1 };
  s2 -> s1 [88, 65535] { R9104 += 1, R9058 += 1 };
  s3 -> s1 [0, 86] { R9104 += 1, R9058 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9104 += 1, R9058 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R9104 += 1, R9057 += 1, R9058 += 1 };
  s3 -> s4 [87, 87] { R9104 += 1, R9058 += 1 };
  s3 -> s1 [88, 65535] { R9104 += 1, R9058 += 1 };
  s4 -> s4 [0, 65535] { R9104 += 1, R9058 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9104 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R9106 += 1, R9060 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R9106 += 1, R9059 += 1, R9060 += 1 };
  s0 -> s0 [0, 65535] { R9105 += 1, R9106 += 1 };
  s0 -> s4 [91, 91] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R9106 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R9106 += 1, R9060 += 1 };
  s1 -> s1 [0, 65535] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R9106 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9106 += 1, R9060 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9106 += 1, R9060 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R9106 += 1, R9059 += 1, R9060 += 1 };
  s3 -> s4 [91, 91] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R9106 += 1, R9060 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9106 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9106 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9106 += 1, R9060 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R9107 += 1, R9108 += 1 };
  s0 -> s1 [0, 65535] { R9108 += 1, R9061 += 1, R9062 += 1 };
  s0 -> s2 [0, 65535] { R9108 += 1, R9062 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R9108 += 1, R9062 += 1, R5998 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R9108 += 1, R9061 += 1, R9062 += 1 };
  s1 -> s2 [0, 65535] { R9108 += 1, R9062 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R9108 += 1, R9062 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R9108 += 1, R9062 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9108 += 1 };
  s2 -> s3 [0, 65535] { R9108 += 1, R9062 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R9108 += 1, R9062 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9108 += 1 };
  s3 -> s3 [0, 65535] { R9108 += 1, R9062 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R9108 += 1, R9062 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9108 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9108 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9110 += 1, R9064 += 1, R9028 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R9110 += 1, R9064 += 1, R9027 += 1, R9028 += 1 };
  s0 -> s3 [0, 65535] { R9110 += 1, R9063 += 1, R9064 += 1 };
  s0 -> s0 [0, 65535] { R9109 += 1, R9110 += 1 };
  s1 -> s1 [0, 65535] { R9110 += 1, R9064 += 1, R9028 += 1, R5990 += 1 };
  s1 -> s5 [0, 65535] { R9110 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R9110 += 1, R9064 += 1 };
  s2 -> s1 [0, 65535] { R9110 += 1, R9064 += 1, R9028 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535] { R9110 += 1 };
  s2 -> s2 [0, 65535] { R9110 += 1, R9064 += 1, R9027 += 1, R9028 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9110 += 1, R9064 += 1, R9028 += 1, R5990 += 1 };
  s3 -> s2 [0, 65535] { R9110 += 1, R9064 += 1, R9027 += 1, R9028 += 1 };
  s3 -> s3 [0, 65535] { R9110 += 1, R9063 += 1, R9064 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9110 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9110 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9110 += 1, R9064 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9112 += 1, R9066 += 1, R9029 += 1, R9030 += 1 };
  s0 -> s0 [0, 65535] { R9111 += 1, R9112 += 1 };
  s0 -> s2 [0, 65535] { R9112 += 1, R9065 += 1, R9066 += 1 };
  s0 -> s3 [108, 108] { R9112 += 1, R9066 += 1, R9030 += 1 };
  s1 -> s1 [0, 65535] { R9112 += 1, R9066 += 1, R9029 += 1, R9030 += 1 };
  s1 -> s3 [108, 108] { R9112 += 1, R9066 += 1, R9030 += 1 };
  s2 -> s1 [0, 65535] { R9112 += 1, R9066 += 1, R9029 += 1, R9030 += 1 };
  s2 -> s2 [0, 65535] { R9112 += 1, R9065 += 1, R9066 += 1 };
  s2 -> s3 [108, 108] { R9112 += 1, R9066 += 1, R9030 += 1 };
  s3 -> s4 [111, 111] { R9112 += 1, R9066 += 1, R9030 += 1 };
  s4 -> s5 [99, 99] { R9112 += 1, R9066 += 1, R9030 += 1 };
  s5 -> s6 [0, 65535] { R9112 += 1 };
  s5 -> s5 [0, 65535] { R9112 += 1, R9066 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9112 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s5, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s0 -> s2 [0, 65535] { R9114 += 1, R9068 += 1, R9035 += 1, R9036 += 1 };
  s0 -> s3 [0, 65535] { R9114 += 1, R9067 += 1, R9068 += 1 };
  s0 -> s0 [0, 65535] { R9113 += 1, R9114 += 1 };
  s0 -> s4 [87, 87] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s0 -> s1 [88, 65535] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s1 -> s1 [0, 86] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s1 -> s4 [87, 87] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s1 -> s1 [88, 65535] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s2 -> s1 [0, 86] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s2 -> s2 [0, 65535] { R9114 += 1, R9068 += 1, R9035 += 1, R9036 += 1 };
  s2 -> s4 [87, 87] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s2 -> s1 [88, 65535] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s3 -> s1 [0, 86] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s3 -> s2 [0, 65535] { R9114 += 1, R9068 += 1, R9035 += 1, R9036 += 1 };
  s3 -> s3 [0, 65535] { R9114 += 1, R9067 += 1, R9068 += 1 };
  s3 -> s4 [87, 87] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s3 -> s1 [88, 65535] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s4 -> s5 [0, 65535] { R9114 += 1, R9068 += 1 };
  s4 -> s4 [0, 65535] { R9114 += 1, R9068 += 1, R9036 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9114 += 1 };
  s5 -> s5 [0, 65535] { R9114 += 1, R9068 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9114 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9114 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9116 += 1, R9070 += 1, R9038 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R9116 += 1, R9069 += 1, R9070 += 1 };
  s0 -> s0 [0, 65535] { R9115 += 1, R9116 += 1 };
  s0 -> s3 [0, 65535] { R9116 += 1, R9070 += 1, R9037 += 1, R9038 += 1 };
  s1 -> s6 [0, 65535] { R9116 += 1, R9070 += 1 };
  s1 -> s1 [0, 65535] { R9116 += 1, R9070 += 1, R9038 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R9116 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9116 += 1, R9070 += 1, R9038 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R9116 += 1, R9069 += 1, R9070 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9116 += 1, R9070 += 1, R9037 += 1, R9038 += 1 };
  s3 -> s1 [0, 65535] { R9116 += 1, R9070 += 1, R9038 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R9116 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9116 += 1, R9070 += 1, R9037 += 1, R9038 += 1 };
  s4 -> s4 [0, 65535] { R9116 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9116 += 1, R9070 += 1 };
  s6 -> s4 [0, 65535] { R9116 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s0 -> s2 [0, 65535] { R9118 += 1, R9072 += 1, R9040 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R9118 += 1, R9072 += 1, R9039 += 1, R9040 += 1 };
  s0 -> s0 [0, 65535] { R9117 += 1, R9118 += 1 };
  s0 -> s4 [0, 65535] { R9118 += 1, R9071 += 1, R9072 += 1 };
  s0 -> s5 [87, 87] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s0 -> s1 [88, 65535] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s1 -> s1 [0, 86] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9118 += 1, R9072 += 1 };
  s1 -> s7 [0, 65535] { R9118 += 1 };
  s1 -> s5 [87, 87] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s1 -> s1 [88, 65535] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s2 -> s1 [0, 86] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s2 -> s8 [0, 65535] { R9118 += 1, R9072 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9118 += 1, R9072 += 1, R9040 += 1, R7 += 1 };
  s2 -> s7 [0, 65535] { R9118 += 1 };
  s2 -> s5 [87, 87] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s2 -> s1 [88, 65535] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s3 -> s1 [0, 86] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R9118 += 1, R9072 += 1, R9040 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R9118 += 1, R9072 += 1, R9039 += 1, R9040 += 1 };
  s3 -> s7 [0, 65535] { R9118 += 1 };
  s3 -> s5 [87, 87] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s3 -> s1 [88, 65535] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s4 -> s1 [0, 86] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R9118 += 1, R9072 += 1, R9040 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R9118 += 1, R9072 += 1, R9039 += 1, R9040 += 1 };
  s4 -> s4 [0, 65535] { R9118 += 1, R9071 += 1, R9072 += 1 };
  s4 -> s5 [87, 87] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s4 -> s1 [88, 65535] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s5 -> s5 [0, 65535] { R9118 += 1, R9072 += 1, R9040 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9118 += 1 };
  s8 -> s8 [0, 65535] { R9118 += 1, R9072 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9118 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s0 -> s2 [0, 65535] { R9120 += 1, R9073 += 1, R9074 += 1 };
  s0 -> s3 [0, 65535] { R9120 += 1, R9074 += 1, R9041 += 1, R9042 += 1 };
  s0 -> s4 [0, 65535] { R9120 += 1, R9074 += 1, R9042 += 1, R9021 += 1, R9022 += 1 };
  s0 -> s0 [0, 65535] { R9119 += 1, R9120 += 1 };
  s0 -> s1 [88, 65535] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s1 -> s1 [0, 86] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s1 -> s1 [0, 65535] { R9120 += 1, R9074 += 1, R9042 += 1 };
  s1 -> s5 [0, 65535] { R9120 += 1, R9074 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R9120 += 1 };
  s1 -> s1 [88, 65535] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s2 -> s1 [0, 86] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s2 -> s2 [0, 65535] { R9120 += 1, R9073 += 1, R9074 += 1 };
  s2 -> s3 [0, 65535] { R9120 += 1, R9074 += 1, R9041 += 1, R9042 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R9120 += 1, R9074 += 1, R9042 += 1, R9021 += 1, R9022 += 1 };
  s2 -> s1 [88, 65535] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s3 -> s1 [0, 86] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s3 -> s3 [0, 65535] { R9120 += 1, R9074 += 1, R9041 += 1, R9042 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R9120 += 1, R9074 += 1, R9042 += 1, R9021 += 1, R9022 += 1 };
  s3 -> s7 [0, 65535] { R9120 += 1 };
  s3 -> s1 [88, 65535] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s4 -> s1 [0, 86] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s4 -> s5 [0, 65535] { R9120 += 1, R9074 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9120 += 1, R9074 += 1, R9042 += 1, R9021 += 1, R9022 += 1 };
  s4 -> s7 [0, 65535] { R9120 += 1 };
  s4 -> s1 [88, 65535] { R9120 += 1, R9074 += 1, R9042 += 1, R9022 += 1 };
  s5 -> s5 [0, 65535] { R9120 += 1, R9074 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9120 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9120 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9122 += 1, R9075 += 1, R9076 += 1 };
  s0 -> s0 [0, 65535] { R9121 += 1, R9122 += 1 };
  s0 -> s2 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1, R9023 += 1, R9024 += 1 };
  s0 -> s3 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1, R9024 += 1, R5988 += 1 };
  s0 -> s4 [0, 65535] { R9122 += 1, R9076 += 1, R9043 += 1, R9044 += 1 };
  s1 -> s1 [0, 65535] { R9122 += 1, R9075 += 1, R9076 += 1 };
  s1 -> s2 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1, R9023 += 1, R9024 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1, R9024 += 1, R5988 += 1 };
  s1 -> s4 [0, 65535] { R9122 += 1, R9076 += 1, R9043 += 1, R9044 += 1 };
  s2 -> s7 [0, 65535] { R9122 += 1, R9076 += 1 };
  s2 -> s2 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1, R9023 += 1, R9024 += 1 };
  s2 -> s5 [0, 65535] { R9122 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1, R9024 += 1, R5988 += 1 };
  s3 -> s7 [0, 65535] { R9122 += 1, R9076 += 1 };
  s3 -> s5 [0, 65535] { R9122 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1 };
  s3 -> s3 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1, R9024 += 1, R5988 += 1 };
  s4 -> s2 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1, R9023 += 1, R9024 += 1 };
  s4 -> s5 [0, 65535] { R9122 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1, R9024 += 1, R5988 += 1 };
  s4 -> s4 [0, 65535] { R9122 += 1, R9076 += 1, R9043 += 1, R9044 += 1 };
  s5 -> s5 [0, 65535] { R9122 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9122 += 1, R9076 += 1 };
  s7 -> s5 [0, 65535] { R9122 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9122 += 1, R9076 += 1 };
  s8 -> s5 [0, 65535] { R9122 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9122 += 1, R9076 += 1, R9044 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9124 += 1, R9077 += 1, R9078 += 1 };
  s0 -> s0 [0, 65535] { R9123 += 1, R9124 += 1 };
  s0 -> s2 [0, 65535] { R9124 += 1, R9078 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s3 [0, 65535] { R9124 += 1, R9078 += 1, R9046 += 1, R9025 += 1, R9026 += 1 };
  s0 -> s4 [116, 116] { R9124 += 1, R9078 += 1, R9046 += 1, R9026 += 1 };
  s1 -> s1 [0, 65535] { R9124 += 1, R9077 += 1, R9078 += 1 };
  s1 -> s2 [0, 65535] { R9124 += 1, R9078 += 1, R9045 += 1, R9046 += 1 };
  s1 -> s3 [0, 65535] { R9124 += 1, R9078 += 1, R9046 += 1, R9025 += 1, R9026 += 1 };
  s1 -> s4 [116, 116] { R9124 += 1, R9078 += 1, R9046 += 1, R9026 += 1 };
  s2 -> s2 [0, 65535] { R9124 += 1, R9078 += 1, R9045 += 1, R9046 += 1 };
  s2 -> s3 [0, 65535] { R9124 += 1, R9078 += 1, R9046 += 1, R9025 += 1, R9026 += 1 };
  s2 -> s4 [116, 116] { R9124 += 1, R9078 += 1, R9046 += 1, R9026 += 1 };
  s3 -> s3 [0, 65535] { R9124 += 1, R9078 += 1, R9046 += 1, R9025 += 1, R9026 += 1 };
  s3 -> s4 [116, 116] { R9124 += 1, R9078 += 1, R9046 += 1, R9026 += 1 };
  s4 -> s5 [0, 65535] { R9124 += 1, R9078 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9124 += 1 };
  s4 -> s4 [0, 65535] { R9124 += 1, R9078 += 1, R9046 += 1 };
  s5 -> s5 [0, 65535] { R9124 += 1, R9078 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9124 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9124 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1, R9031 += 1, R9032 += 1 };
  s0 -> s0 [0, 65535] { R9125 += 1, R9126 += 1 };
  s0 -> s2 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1, R9032 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R9126 += 1, R9080 += 1, R9047 += 1, R9048 += 1 };
  s0 -> s4 [0, 65535] { R9126 += 1, R9079 += 1, R9080 += 1 };
  s1 -> s1 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1, R9031 += 1, R9032 += 1 };
  s1 -> s2 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1, R9032 += 1, R5989 += 1 };
  s1 -> s8 [0, 65535] { R9126 += 1, R9080 += 1 };
  s1 -> s6 [0, 65535] { R9126 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1 };
  s2 -> s2 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1, R9032 += 1, R5989 += 1 };
  s2 -> s8 [0, 65535] { R9126 += 1, R9080 += 1 };
  s2 -> s6 [0, 65535] { R9126 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1, R9031 += 1, R9032 += 1 };
  s3 -> s2 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1, R9032 += 1, R5989 += 1 };
  s3 -> s6 [0, 65535] { R9126 += 1 };
  s3 -> s3 [0, 65535] { R9126 += 1, R9080 += 1, R9047 += 1, R9048 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1, R9031 += 1, R9032 += 1 };
  s4 -> s2 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1, R9032 += 1, R5989 += 1 };
  s4 -> s3 [0, 65535] { R9126 += 1, R9080 += 1, R9047 += 1, R9048 += 1 };
  s4 -> s4 [0, 65535] { R9126 += 1, R9079 += 1, R9080 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9126 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9126 += 1, R9080 += 1, R9048 += 1 };
  s7 -> s8 [0, 65535] { R9126 += 1, R9080 += 1 };
  s7 -> s6 [0, 65535] { R9126 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R9126 += 1, R9080 += 1 };
  s8 -> s6 [0, 65535] { R9126 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9128 += 1, R9082 += 1, R9049 += 1, R9050 += 1 };
  s0 -> s2 [0, 65535] { R9128 += 1, R9082 += 1, R9050 += 1, R9033 += 1, R9034 += 1 };
  s0 -> s0 [0, 65535] { R9127 += 1, R9128 += 1 };
  s0 -> s3 [0, 65535] { R9128 += 1, R9081 += 1, R9082 += 1 };
  s0 -> s4 [97, 97] { R9128 += 1, R9082 += 1, R9050 += 1, R9034 += 1 };
  s1 -> s1 [0, 65535] { R9128 += 1, R9082 += 1, R9049 += 1, R9050 += 1 };
  s1 -> s2 [0, 65535] { R9128 += 1, R9082 += 1, R9050 += 1, R9033 += 1, R9034 += 1 };
  s1 -> s4 [97, 97] { R9128 += 1, R9082 += 1, R9050 += 1, R9034 += 1 };
  s2 -> s2 [0, 65535] { R9128 += 1, R9082 += 1, R9050 += 1, R9033 += 1, R9034 += 1 };
  s2 -> s4 [97, 97] { R9128 += 1, R9082 += 1, R9050 += 1, R9034 += 1 };
  s3 -> s1 [0, 65535] { R9128 += 1, R9082 += 1, R9049 += 1, R9050 += 1 };
  s3 -> s2 [0, 65535] { R9128 += 1, R9082 += 1, R9050 += 1, R9033 += 1, R9034 += 1 };
  s3 -> s3 [0, 65535] { R9128 += 1, R9081 += 1, R9082 += 1 };
  s3 -> s4 [97, 97] { R9128 += 1, R9082 += 1, R9050 += 1, R9034 += 1 };
  s4 -> s5 [108, 108] { R9128 += 1, R9082 += 1, R9050 += 1, R9034 += 1 };
  s5 -> s6 [104, 104] { R9128 += 1, R9082 += 1, R9050 += 1, R9034 += 1 };
  s6 -> s7 [111, 111] { R9128 += 1, R9082 += 1, R9050 += 1, R9034 += 1 };
  s7 -> s8 [115, 115] { R9128 += 1, R9082 += 1, R9050 += 1, R9034 += 1 };
  s8 -> s9 [0, 65535] { R9128 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R9128 += 1, R9082 += 1, R9050 += 1 };
  s8 -> s11 [0, 65535] { R9128 += 1, R9082 += 1 };
  s9 -> s9 [0, 65535] { R9128 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s9 [0, 65535] { R9128 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R9128 += 1, R9082 += 1 };
  accepting s8, s9, s10, s11;
};
};
constraint R1 = R9026 && R2 = R9050 && R3 = R8914 && R4 = R9128 && R15 = 0 && R16 = R9082 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8907 - R9082 = 1 && R8908 = R8914 && R8909 - R9082 = 1 && R8910 = R8914 && R8911 - R9082 = 1 && R8912 = R8914 && R8913 - R9082 = 1 && R9025 = 0 && R9029 = 0 && R9030 = 0 && R9033 = 0 && R9034 = 0 && R9035 = 0 && R9036 = R9050 && R9037 = 0 && R9038 = R9050 && R9039 = 0 && R9040 = R9050 && R9041 = 0 && R9042 = R9050 && R9043 = 0 && R9044 = R9050 && R9045 = 0 && R9046 = R9050 && R9047 = 0 && R9048 = R9050 && R9049 = 0 && R9051 = 0 && R9052 = R9082 && R9053 = 0 && R9054 = R9082 && R9055 = 0 && R9056 = R9082 && R9057 = 0 && R9058 = R9082 && R9059 = 0 && R9060 = R9082 && R9061 = 0 && R9062 = R9082 && R9063 = 0 && R9064 = R9082 && R9065 = 0 && R9066 = R9082 && R9067 = 0 && R9068 = R9082 && R9069 = 0 && R9070 = R9082 && R9071 = 0 && R9072 = R9082 && R9073 = 0 && R9074 = R9082 && R9075 = 0 && R9076 = R9082 && R9077 = 0 && R9078 = R9082 && R9079 = 0 && R9080 = R9082 && R9081 = 0 && R9083 = 10 && R9084 = R9128 && R9085 = 10 && R9086 = R9128 && R9087 = 10 && R9088 = R9128 && R9089 = 10 && R9090 = R9128 && R9091 = 10 && R9092 = R9128 && R9093 = 10 && R9094 = R9128 && R9095 = 10 && R9096 = R9128 && R9097 = 10 && R9098 = R9128 && R9099 = 10 && R9100 = R9128 && R9101 = 10 && R9102 = R9128 && R9103 = 10 && R9104 = R9128 && R9105 = 10 && R9106 = R9128 && R9107 = 10 && R9108 = R9128 && R9109 = 10 && R9110 = R9128 && R9111 = 10 && R9112 = R9128 && R9113 = 10 && R9114 = R9128 && R9115 = 10 && R9116 = R9128 && R9117 = 10 && R9118 = R9128 && R9119 = 10 && R9120 = R9128 && R9121 = 10 && R9122 = R9128 && R9123 = 10 && R9124 = R9128 && R9125 = 10 && R9126 = R9128 && R9127 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R9082 < R8914 && -1 < R9026 && 0 < R9050 && -1 < R9082 && 9 < R9128 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R9021 != 0 || R9022 = R9026 || (R5988 = 0 && R9026 = 0)) && (R9023 != 0 || R9024 = R9026 || (R5988 = 0 && R9026 = 0)) && (R5989 = 0 || (R9031 = 0 && R9032 = 0)) && (R5990 = 0 || (R9027 = 0 && R9028 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R9021 = 0 || (R5988 = 0 && R9026 = 0)) && (R9023 = 0 || (R5988 = 0 && R9026 = 0));
// End of Parikh automata intersection problem
