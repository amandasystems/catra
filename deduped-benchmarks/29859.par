// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6217, R6218, R6219, R6220, R6221, R6222, R6223, R6224, R6225, R6226, R6227, R6228, R6229, R6230, R6231, R6232, R6233, R6234, R6235, R6236, R6237, R6238, R6239, R6240, R6241, R6242, R6243, R6244, R6245, R6246, R6247, R6248, R6249, R6250, R6251, R6252, R6253, R6254, R6255, R6256, R6257, R6258, R6259, R6260, R6261, R6262, R6263, R6264, R6265, R6266, R6267, R6268, R6269, R6270, R6271, R6272, R6273, R6274, R6275, R6276, R6277, R6278, R6279, R6280, R6281, R6282, R6283, R6284, R6285, R6286, R6287, R6288, R6289, R6290, R6291, R6292, R6293, R6294, R6295, R6296, R6297, R6298, R6299, R6300, R6301, R6302, R6303, R6304, R6305, R6306, R6307, R6308, R6309, R6310, R6311, R6312, R6313, R6314, R6315, R6316, R6317, R6318, R6319, R6320, R6321, R6322, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R6278 += 1 };
  s0 -> s0 [0, 65535] { R6277 += 1, R6278 += 1 };
  s0 -> s2 [46, 46] { R6278 += 1 };
  s0 -> s3 [47, 47] { R6278 += 1 };
  s0 -> s1 [48, 65535] { R6278 += 1 };
  s1 -> s1 [0, 45] { R6278 += 1 };
  s1 -> s2 [46, 46] { R6278 += 1 };
  s1 -> s3 [47, 47] { R6278 += 1 };
  s1 -> s1 [48, 65535] { R6278 += 1 };
  s2 -> s1 [0, 45] { R6278 += 1 };
  s2 -> s2 [46, 46] { R6278 += 1 };
  s2 -> s3 [47, 47] { R6278 += 1 };
  s2 -> s1 [48, 114] { R6278 += 1 };
  s2 -> s8 [115, 115] { R6278 += 1 };
  s2 -> s1 [116, 65535] { R6278 += 1 };
  s3 -> s3 [0, 45] { R6278 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R6278 += 1 };
  s3 -> s3 [47, 65535] { R6278 += 1 };
  s4 -> s3 [0, 45] { R6278 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R6278 += 1 };
  s4 -> s3 [47, 114] { R6278 += 1 };
  s4 -> s5 [115, 115] { R6278 += 1 };
  s4 -> s3 [116, 65535] { R6278 += 1 };
  s5 -> s3 [0, 45] { R6278 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R6278 += 1 };
  s5 -> s3 [47, 110] { R6278 += 1 };
  s5 -> s6 [111, 111] { R6278 += 1 };
  s5 -> s3 [112, 65535] { R6278 += 1 };
  s6 -> s3 [0, 45] { R6278 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R6278 += 1 };
  s6 -> s3 [47, 98] { R6278 += 1 };
  s6 -> s7 [99, 99] { R6278 += 1 };
  s6 -> s3 [100, 65535] { R6278 += 1 };
  s7 -> s3 [0, 45] { R6278 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R6278 += 1 };
  s7 -> s3 [47, 106] { R6278 += 1 };
  s7 -> s3 [108, 65535] { R6278 += 1 };
  s8 -> s1 [0, 45] { R6278 += 1 };
  s8 -> s2 [46, 46] { R6278 += 1 };
  s8 -> s3 [47, 47] { R6278 += 1 };
  s8 -> s1 [48, 110] { R6278 += 1 };
  s8 -> s9 [111, 111] { R6278 += 1 };
  s8 -> s1 [112, 65535] { R6278 += 1 };
  s9 -> s1 [0, 45] { R6278 += 1 };
  s9 -> s2 [46, 46] { R6278 += 1 };
  s9 -> s3 [47, 47] { R6278 += 1 };
  s9 -> s1 [48, 98] { R6278 += 1 };
  s9 -> s10 [99, 99] { R6278 += 1 };
  s9 -> s1 [100, 65535] { R6278 += 1 };
  s10 -> s1 [0, 45] { R6278 += 1 };
  s10 -> s2 [46, 46] { R6278 += 1 };
  s10 -> s3 [47, 47] { R6278 += 1 };
  s10 -> s1 [48, 106] { R6278 += 1 };
  s10 -> s1 [108, 65535] { R6278 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R6279 += 1, R6280 += 1 };
  s0 -> s1 [0, 65535] { R6280 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R6280 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R6282 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R6282 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R6281 += 1, R6282 += 1 };
  s0 -> s3 [47, 47] { R6282 += 1 };
  s0 -> s1 [48, 65535] { R6282 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R6282 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R6282 += 1 };
  s1 -> s1 [48, 65535] { R6282 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R6282 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R6282 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R6282 += 1 };
  s2 -> s1 [48, 65535] { R6282 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R6282 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R6284 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R6283 += 1, R6284 += 1 };
  s0 -> s2 [0, 65535] { R6284 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s1 [38, 42] { R6284 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R6284 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R6284 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R6284 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R6284 += 1, R6000 += 1 };
  s1 -> s1 [0, 65535] { R6284 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R6284 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R6284 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R6284 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R6284 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R6284 += 1, R6000 += 1 };
  s2 -> s2 [0, 65535] { R6284 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R6284 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R6284 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R6284 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R6284 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R6286 += 1, R6002 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R6286 += 1, R6001 += 1, R6002 += 1 };
  s0 -> s0 [0, 65535] { R6285 += 1, R6286 += 1 };
  s1 -> s4 [0, 65535] { R6286 += 1 };
  s1 -> s1 [0, 65535] { R6286 += 1, R6002 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6286 += 1, R6002 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6286 += 1, R6001 += 1, R6002 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6286 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R6288 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R6287 += 1, R6288 += 1 };
  s0 -> s3 [0, 65535] { R6288 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s4 [63, 63] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R6288 += 1 };
  s1 -> s7 [0, 65535] { R6288 += 1, R6004 += 1 };
  s2 -> s1 [0, 62] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6288 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R6288 += 1 };
  s2 -> s4 [63, 63] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6288 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R6288 += 1, R6003 += 1, R6004 += 1 };
  s3 -> s4 [63, 63] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R6288 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6288 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6288 += 1 };
  s7 -> s7 [0, 65535] { R6288 += 1, R6004 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6290 += 1, R6005 += 1, R6006 += 1 };
  s0 -> s2 [0, 65535] { R6290 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R6290 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R6289 += 1, R6290 += 1 };
  s1 -> s1 [0, 65535] { R6290 += 1, R6005 += 1, R6006 += 1 };
  s1 -> s2 [0, 65535] { R6290 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R6290 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6290 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535] { R6290 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6290 += 1, R6006 += 1 };
  s3 -> s2 [0, 65535] { R6290 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R6290 += 1 };
  s3 -> s3 [0, 65535] { R6290 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6290 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6290 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6290 += 1, R6006 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R6292 += 1, R6246 += 1 };
  s0 -> s0 [0, 65535] { R6291 += 1, R6292 += 1 };
  s0 -> s2 [0, 65535] { R6292 += 1, R6245 += 1, R6246 += 1 };
  s0 -> s1 [45, 63] { R6292 += 1, R6246 += 1 };
  s0 -> s3 [87, 87] { R6292 += 1, R6246 += 1 };
  s0 -> s1 [88, 65535] { R6292 += 1, R6246 += 1 };
  s1 -> s1 [0, 43] { R6292 += 1, R6246 += 1 };
  s1 -> s1 [45, 63] { R6292 += 1, R6246 += 1 };
  s1 -> s3 [87, 87] { R6292 += 1, R6246 += 1 };
  s1 -> s1 [88, 65535] { R6292 += 1, R6246 += 1 };
  s2 -> s1 [0, 43] { R6292 += 1, R6246 += 1 };
  s2 -> s2 [0, 65535] { R6292 += 1, R6245 += 1, R6246 += 1 };
  s2 -> s1 [45, 63] { R6292 += 1, R6246 += 1 };
  s2 -> s3 [87, 87] { R6292 += 1, R6246 += 1 };
  s2 -> s1 [88, 65535] { R6292 += 1, R6246 += 1 };
  s3 -> s3 [0, 43] { R6292 += 1, R6246 += 1 };
  s3 -> s3 [0, 65535] { R6292 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R6292 += 1, R6246 += 1 };
  s3 -> s3 [87, 65535] { R6292 += 1, R6246 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R6294 += 1, R6248 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R6293 += 1, R6294 += 1 };
  s0 -> s2 [0, 65535] { R6294 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s4 [0, 65535] { R6294 += 1 };
  s1 -> s1 [0, 65535] { R6294 += 1, R6248 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6294 += 1, R6248 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6294 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6294 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R6296 += 1, R6250 += 1 };
  s0 -> s2 [0, 65535] { R6296 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s0 [0, 65535] { R6295 += 1, R6296 += 1 };
  s0 -> s3 [0, 65535] { R6296 += 1, R6250 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R6296 += 1, R6250 += 1 };
  s0 -> s1 [59, 65535] { R6296 += 1, R6250 += 1 };
  s1 -> s1 [0, 57] { R6296 += 1, R6250 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6296 += 1 };
  s1 -> s4 [58, 58] { R6296 += 1, R6250 += 1 };
  s1 -> s1 [59, 65535] { R6296 += 1, R6250 += 1 };
  s2 -> s1 [0, 57] { R6296 += 1, R6250 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6296 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s3 [0, 65535] { R6296 += 1, R6250 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R6296 += 1, R6250 += 1 };
  s2 -> s1 [59, 65535] { R6296 += 1, R6250 += 1 };
  s3 -> s1 [0, 57] { R6296 += 1, R6250 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6296 += 1 };
  s3 -> s3 [0, 65535] { R6296 += 1, R6250 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R6296 += 1, R6250 += 1 };
  s3 -> s1 [59, 65535] { R6296 += 1, R6250 += 1 };
  s4 -> s4 [0, 65535] { R6296 += 1, R6250 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6296 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R6298 += 1, R6252 += 1 };
  s0 -> s2 [0, 65535] { R6298 += 1, R6252 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R6298 += 1, R6251 += 1, R6252 += 1 };
  s0 -> s0 [0, 65535] { R6297 += 1, R6298 += 1 };
  s0 -> s4 [87, 87] { R6298 += 1, R6252 += 1 };
  s0 -> s1 [88, 65535] { R6298 += 1, R6252 += 1 };
  s1 -> s1 [0, 86] { R6298 += 1, R6252 += 1 };
  s1 -> s1 [0, 65535] { R6298 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R6298 += 1, R6252 += 1 };
  s1 -> s1 [88, 65535] { R6298 += 1, R6252 += 1 };
  s2 -> s1 [0, 86] { R6298 += 1, R6252 += 1 };
  s2 -> s2 [0, 65535] { R6298 += 1, R6252 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6298 += 1 };
  s2 -> s4 [87, 87] { R6298 += 1, R6252 += 1 };
  s2 -> s1 [88, 65535] { R6298 += 1, R6252 += 1 };
  s3 -> s1 [0, 86] { R6298 += 1, R6252 += 1 };
  s3 -> s2 [0, 65535] { R6298 += 1, R6252 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6298 += 1, R6251 += 1, R6252 += 1 };
  s3 -> s4 [87, 87] { R6298 += 1, R6252 += 1 };
  s3 -> s1 [88, 65535] { R6298 += 1, R6252 += 1 };
  s4 -> s4 [0, 65535] { R6298 += 1, R6252 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6298 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R6299 += 1, R6300 += 1 };
  s0 -> s2 [0, 65535] { R6300 += 1, R6253 += 1, R6254 += 1 };
  s0 -> s3 [0, 65535] { R6300 += 1, R6254 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R6300 += 1, R6254 += 1 };
  s1 -> s5 [0, 65535] { R6300 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R6300 += 1, R6253 += 1, R6254 += 1 };
  s2 -> s3 [0, 65535] { R6300 += 1, R6254 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R6300 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6300 += 1, R6254 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R6300 += 1, R6254 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R6300 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6300 += 1, R6254 += 1 };
  s7 -> s5 [0, 65535] { R6300 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R6302 += 1, R6255 += 1, R6256 += 1 };
  s0 -> s2 [0, 65535] { R6302 += 1, R6256 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R6302 += 1, R6256 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R6301 += 1, R6302 += 1 };
  s1 -> s1 [0, 65535] { R6302 += 1, R6255 += 1, R6256 += 1 };
  s1 -> s2 [0, 65535] { R6302 += 1, R6256 += 1, R5998 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R6302 += 1, R6256 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6302 += 1, R6256 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R6302 += 1, R6256 += 1 };
  s2 -> s4 [0, 65535] { R6302 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6302 += 1, R6256 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R6302 += 1 };
  s3 -> s3 [0, 65535] { R6302 += 1, R6256 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6302 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6302 += 1, R6256 += 1 };
  s6 -> s4 [0, 65535] { R6302 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R6304 += 1, R6257 += 1, R6258 += 1 };
  s0 -> s2 [0, 65535] { R6304 += 1, R6258 += 1, R6224 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R6304 += 1, R6258 += 1, R6223 += 1, R6224 += 1 };
  s0 -> s0 [0, 65535] { R6303 += 1, R6304 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6304 += 1, R6257 += 1, R6258 += 1 };
  s1 -> s2 [0, 65535] { R6304 += 1, R6258 += 1, R6224 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R6304 += 1, R6258 += 1, R6223 += 1, R6224 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6304 += 1, R6258 += 1, R6224 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535] { R6304 += 1 };
  s2 -> s6 [0, 65535] { R6304 += 1, R6258 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6304 += 1, R6258 += 1, R6224 += 1, R5990 += 1 };
  s3 -> s5 [0, 65535] { R6304 += 1 };
  s3 -> s3 [0, 65535] { R6304 += 1, R6258 += 1, R6223 += 1, R6224 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6304 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6304 += 1 };
  s6 -> s6 [0, 65535] { R6304 += 1, R6258 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R6306 += 1, R6260 += 1 };
  s0 -> s0 [0, 65535] { R6305 += 1, R6306 += 1 };
  s0 -> s2 [0, 65535] { R6306 += 1, R6259 += 1, R6260 += 1 };
  s1 -> s4 [0, 65535] { R6306 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6306 += 1, R6260 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6306 += 1, R6260 += 1 };
  s2 -> s2 [0, 65535] { R6306 += 1, R6259 += 1, R6260 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6306 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s0 -> s0 [0, 65535] { R6307 += 1, R6308 += 1 };
  s0 -> s2 [0, 65535] { R6308 += 1, R6261 += 1, R6262 += 1 };
  s0 -> s3 [0, 65535] { R6308 += 1, R6262 += 1, R6229 += 1, R6230 += 1 };
  s0 -> s4 [87, 87] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s0 -> s1 [88, 65535] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s1 -> s1 [0, 86] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s1 -> s4 [87, 87] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s1 -> s1 [88, 65535] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s2 -> s1 [0, 86] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s2 -> s2 [0, 65535] { R6308 += 1, R6261 += 1, R6262 += 1 };
  s2 -> s3 [0, 65535] { R6308 += 1, R6262 += 1, R6229 += 1, R6230 += 1 };
  s2 -> s4 [87, 87] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s2 -> s1 [88, 65535] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s3 -> s1 [0, 86] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s3 -> s3 [0, 65535] { R6308 += 1, R6262 += 1, R6229 += 1, R6230 += 1 };
  s3 -> s4 [87, 87] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s3 -> s1 [88, 65535] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s4 -> s4 [0, 65535] { R6308 += 1, R6262 += 1, R6230 += 1 };
  s4 -> s5 [0, 65535] { R6308 += 1, R6262 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6308 += 1 };
  s5 -> s5 [0, 65535] { R6308 += 1, R6262 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6308 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6308 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6310 += 1, R6264 += 1, R6232 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R6310 += 1, R6264 += 1, R6231 += 1, R6232 += 1 };
  s0 -> s3 [0, 65535] { R6310 += 1, R6263 += 1, R6264 += 1 };
  s0 -> s0 [0, 65535] { R6309 += 1, R6310 += 1 };
  s1 -> s5 [0, 65535] { R6310 += 1 };
  s1 -> s1 [0, 65535] { R6310 += 1, R6264 += 1, R6232 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R6310 += 1, R6264 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6310 += 1 };
  s2 -> s1 [0, 65535] { R6310 += 1, R6264 += 1, R6232 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R6310 += 1, R6264 += 1, R6231 += 1, R6232 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6310 += 1, R6264 += 1, R6232 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R6310 += 1, R6264 += 1, R6231 += 1, R6232 += 1 };
  s3 -> s3 [0, 65535] { R6310 += 1, R6263 += 1, R6264 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6310 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6310 += 1 };
  s6 -> s6 [0, 65535] { R6310 += 1, R6264 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s0 -> s2 [0, 65535] { R6312 += 1, R6265 += 1, R6266 += 1 };
  s0 -> s0 [0, 65535] { R6311 += 1, R6312 += 1 };
  s0 -> s3 [0, 65535] { R6312 += 1, R6266 += 1, R6233 += 1, R6234 += 1 };
  s0 -> s4 [0, 65535] { R6312 += 1, R6266 += 1, R6234 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s0 -> s1 [88, 65535] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s1 -> s1 [0, 86] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s1 -> s1 [0, 65535] { R6312 += 1, R6266 += 1 };
  s1 -> s7 [0, 65535] { R6312 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [87, 87] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s1 -> s1 [88, 65535] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s2 -> s1 [0, 86] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R6312 += 1, R6265 += 1, R6266 += 1 };
  s2 -> s3 [0, 65535] { R6312 += 1, R6266 += 1, R6233 += 1, R6234 += 1 };
  s2 -> s4 [0, 65535] { R6312 += 1, R6266 += 1, R6234 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s2 -> s1 [88, 65535] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s3 -> s1 [0, 86] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s3 -> s7 [0, 65535] { R6312 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R6312 += 1, R6266 += 1, R6233 += 1, R6234 += 1 };
  s3 -> s4 [0, 65535] { R6312 += 1, R6266 += 1, R6234 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s3 -> s1 [88, 65535] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s4 -> s1 [0, 86] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s4 -> s6 [0, 65535] { R6312 += 1, R6266 += 1 };
  s4 -> s7 [0, 65535] { R6312 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R6312 += 1, R6266 += 1, R6234 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s4 -> s1 [88, 65535] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s5 -> s5 [0, 65535] { R6312 += 1, R6266 += 1, R6234 += 1 };
  s6 -> s6 [0, 65535] { R6312 += 1, R6266 += 1 };
  s6 -> s7 [0, 65535] { R6312 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6312 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s0 -> s2 [0, 65535] { R6314 += 1, R6267 += 1, R6268 += 1 };
  s0 -> s0 [0, 65535] { R6313 += 1, R6314 += 1 };
  s0 -> s3 [0, 65535] { R6314 += 1, R6268 += 1, R6235 += 1, R6236 += 1 };
  s0 -> s4 [0, 65535] { R6314 += 1, R6268 += 1, R6236 += 1, R6217 += 1, R6218 += 1 };
  s0 -> s1 [88, 65535] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s1 -> s1 [0, 86] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s1 -> s1 [0, 65535] { R6314 += 1, R6268 += 1, R6236 += 1 };
  s1 -> s5 [0, 65535] { R6314 += 1, R6268 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R6314 += 1 };
  s1 -> s1 [88, 65535] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s2 -> s1 [0, 86] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s2 -> s2 [0, 65535] { R6314 += 1, R6267 += 1, R6268 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6314 += 1, R6268 += 1, R6235 += 1, R6236 += 1 };
  s2 -> s4 [0, 65535] { R6314 += 1, R6268 += 1, R6236 += 1, R6217 += 1, R6218 += 1 };
  s2 -> s1 [88, 65535] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s3 -> s1 [0, 86] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R6314 += 1 };
  s3 -> s3 [0, 65535] { R6314 += 1, R6268 += 1, R6235 += 1, R6236 += 1 };
  s3 -> s4 [0, 65535] { R6314 += 1, R6268 += 1, R6236 += 1, R6217 += 1, R6218 += 1 };
  s3 -> s1 [88, 65535] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s4 -> s1 [0, 86] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s4 -> s5 [0, 65535] { R6314 += 1, R6268 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6314 += 1 };
  s4 -> s4 [0, 65535] { R6314 += 1, R6268 += 1, R6236 += 1, R6217 += 1, R6218 += 1 };
  s4 -> s1 [88, 65535] { R6314 += 1, R6268 += 1, R6236 += 1, R6218 += 1 };
  s5 -> s5 [0, 65535] { R6314 += 1, R6268 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6314 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6314 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1, R6219 += 1, R6220 += 1 };
  s0 -> s2 [0, 65535] { R6316 += 1, R6269 += 1, R6270 += 1 };
  s0 -> s3 [0, 65535] { R6316 += 1, R6270 += 1, R6237 += 1, R6238 += 1 };
  s0 -> s4 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1, R6220 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R6315 += 1, R6316 += 1 };
  s1 -> s1 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1, R6219 += 1, R6220 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R6316 += 1, R6270 += 1 };
  s1 -> s8 [0, 65535] { R6316 += 1 };
  s1 -> s4 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1, R6220 += 1, R5988 += 1 };
  s2 -> s1 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1, R6219 += 1, R6220 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6316 += 1, R6269 += 1, R6270 += 1 };
  s2 -> s3 [0, 65535] { R6316 += 1, R6270 += 1, R6237 += 1, R6238 += 1 };
  s2 -> s4 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1, R6220 += 1, R5988 += 1 };
  s3 -> s1 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1, R6219 += 1, R6220 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6316 += 1, R6270 += 1, R6237 += 1, R6238 += 1 };
  s3 -> s8 [0, 65535] { R6316 += 1 };
  s3 -> s4 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1, R6220 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1 };
  s4 -> s7 [0, 65535] { R6316 += 1, R6270 += 1 };
  s4 -> s8 [0, 65535] { R6316 += 1 };
  s4 -> s4 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1, R6220 += 1, R5988 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6316 += 1, R6270 += 1, R6238 += 1 };
  s6 -> s7 [0, 65535] { R6316 += 1, R6270 += 1 };
  s6 -> s8 [0, 65535] { R6316 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6316 += 1, R6270 += 1 };
  s7 -> s8 [0, 65535] { R6316 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R6316 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R6317 += 1, R6318 += 1 };
  s0 -> s1 [0, 65535] { R6318 += 1, R6272 += 1, R6239 += 1, R6240 += 1 };
  s0 -> s2 [0, 65535] { R6318 += 1, R6272 += 1, R6240 += 1, R6221 += 1, R6222 += 1 };
  s0 -> s3 [0, 65535] { R6318 += 1, R6271 += 1, R6272 += 1 };
  s0 -> s4 [115, 115] { R6318 += 1, R6272 += 1, R6240 += 1, R6222 += 1 };
  s1 -> s1 [0, 65535] { R6318 += 1, R6272 += 1, R6239 += 1, R6240 += 1 };
  s1 -> s2 [0, 65535] { R6318 += 1, R6272 += 1, R6240 += 1, R6221 += 1, R6222 += 1 };
  s1 -> s4 [115, 115] { R6318 += 1, R6272 += 1, R6240 += 1, R6222 += 1 };
  s2 -> s2 [0, 65535] { R6318 += 1, R6272 += 1, R6240 += 1, R6221 += 1, R6222 += 1 };
  s2 -> s4 [115, 115] { R6318 += 1, R6272 += 1, R6240 += 1, R6222 += 1 };
  s3 -> s1 [0, 65535] { R6318 += 1, R6272 += 1, R6239 += 1, R6240 += 1 };
  s3 -> s2 [0, 65535] { R6318 += 1, R6272 += 1, R6240 += 1, R6221 += 1, R6222 += 1 };
  s3 -> s3 [0, 65535] { R6318 += 1, R6271 += 1, R6272 += 1 };
  s3 -> s4 [115, 115] { R6318 += 1, R6272 += 1, R6240 += 1, R6222 += 1 };
  s4 -> s5 [116, 116] { R6318 += 1, R6272 += 1, R6240 += 1, R6222 += 1 };
  s5 -> s5 [0, 65535] { R6318 += 1, R6272 += 1, R6240 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6318 += 1, R6272 += 1 };
  s5 -> s8 [0, 65535] { R6318 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6318 += 1, R6272 += 1 };
  s7 -> s8 [0, 65535] { R6318 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6318 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1, R6225 += 1, R6226 += 1 };
  s0 -> s2 [0, 65535] { R6320 += 1, R6274 += 1, R6241 += 1, R6242 += 1 };
  s0 -> s3 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1, R6226 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R6319 += 1, R6320 += 1 };
  s0 -> s4 [0, 65535] { R6320 += 1, R6273 += 1, R6274 += 1 };
  s1 -> s3 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1, R6226 += 1, R5989 += 1 };
  s1 -> s6 [0, 65535] { R6320 += 1 };
  s1 -> s7 [0, 65535] { R6320 += 1, R6274 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1, R6225 += 1, R6226 += 1 };
  s2 -> s2 [0, 65535] { R6320 += 1, R6274 += 1, R6241 += 1, R6242 += 1 };
  s2 -> s3 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1, R6226 += 1, R5989 += 1 };
  s2 -> s6 [0, 65535] { R6320 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1, R6225 += 1, R6226 += 1 };
  s3 -> s3 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1, R6226 += 1, R5989 += 1 };
  s3 -> s6 [0, 65535] { R6320 += 1 };
  s3 -> s7 [0, 65535] { R6320 += 1, R6274 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s8 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1 };
  s4 -> s1 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1, R6225 += 1, R6226 += 1 };
  s4 -> s2 [0, 65535] { R6320 += 1, R6274 += 1, R6241 += 1, R6242 += 1 };
  s4 -> s3 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1, R6226 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6320 += 1, R6273 += 1, R6274 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6320 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6320 += 1 };
  s7 -> s7 [0, 65535] { R6320 += 1, R6274 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R6320 += 1 };
  s8 -> s7 [0, 65535] { R6320 += 1, R6274 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R6320 += 1, R6274 += 1, R6242 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6322 += 1, R6276 += 1, R6243 += 1, R6244 += 1 };
  s0 -> s2 [0, 65535] { R6322 += 1, R6275 += 1, R6276 += 1 };
  s0 -> s3 [0, 65535] { R6322 += 1, R6276 += 1, R6244 += 1, R6227 += 1, R6228 += 1 };
  s0 -> s0 [0, 65535] { R6321 += 1, R6322 += 1 };
  s0 -> s4 [108, 108] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s1 -> s1 [0, 65535] { R6322 += 1, R6276 += 1, R6243 += 1, R6244 += 1 };
  s1 -> s3 [0, 65535] { R6322 += 1, R6276 += 1, R6244 += 1, R6227 += 1, R6228 += 1 };
  s1 -> s4 [108, 108] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s2 -> s1 [0, 65535] { R6322 += 1, R6276 += 1, R6243 += 1, R6244 += 1 };
  s2 -> s2 [0, 65535] { R6322 += 1, R6275 += 1, R6276 += 1 };
  s2 -> s3 [0, 65535] { R6322 += 1, R6276 += 1, R6244 += 1, R6227 += 1, R6228 += 1 };
  s2 -> s4 [108, 108] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s3 -> s3 [0, 65535] { R6322 += 1, R6276 += 1, R6244 += 1, R6227 += 1, R6228 += 1 };
  s3 -> s4 [108, 108] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s4 -> s5 [111, 111] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s5 -> s6 [99, 99] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s6 -> s7 [97, 97] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s7 -> s8 [108, 108] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s8 -> s9 [104, 104] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s9 -> s10 [111, 111] { R6322 += 1, R6276 += 1, R6244 += 1, R6228 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s12 [0, 65535] { R6322 += 1 };
  s10 -> s10 [0, 65535] { R6322 += 1, R6276 += 1, R6244 += 1 };
  s10 -> s13 [0, 65535] { R6322 += 1, R6276 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R6322 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s12 [0, 65535] { R6322 += 1 };
  s13 -> s13 [0, 65535] { R6322 += 1, R6276 += 1 };
  accepting s10, s11, s12, s13;
};
};
constraint R1 = R6222 && R2 = R6244 && R3 = R6006 && R4 = R6322 && R15 = 0 && R16 = R6276 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R6276 = 1 && R6000 = R6006 && R6001 - R6276 = 1 && R6002 = R6006 && R6003 - R6276 = 1 && R6004 = R6006 && R6005 - R6276 = 1 && R6221 = 0 && R6227 = 0 && R6228 = 0 && R6229 = 0 && R6230 = R6244 && R6231 = 0 && R6232 = R6244 && R6233 = 0 && R6234 = R6244 && R6235 = 0 && R6236 = R6244 && R6237 = 0 && R6238 = R6244 && R6239 = 0 && R6240 = R6244 && R6241 = 0 && R6242 = R6244 && R6243 = 0 && R6245 = 0 && R6246 = R6276 && R6247 = 0 && R6248 = R6276 && R6249 = 0 && R6250 = R6276 && R6251 = 0 && R6252 = R6276 && R6253 = 0 && R6254 = R6276 && R6255 = 0 && R6256 = R6276 && R6257 = 0 && R6258 = R6276 && R6259 = 0 && R6260 = R6276 && R6261 = 0 && R6262 = R6276 && R6263 = 0 && R6264 = R6276 && R6265 = 0 && R6266 = R6276 && R6267 = 0 && R6268 = R6276 && R6269 = 0 && R6270 = R6276 && R6271 = 0 && R6272 = R6276 && R6273 = 0 && R6274 = R6276 && R6275 = 0 && R6277 = 10 && R6278 = R6322 && R6279 = 10 && R6280 = R6322 && R6281 = 10 && R6282 = R6322 && R6283 = 10 && R6284 = R6322 && R6285 = 10 && R6286 = R6322 && R6287 = 10 && R6288 = R6322 && R6289 = 10 && R6290 = R6322 && R6291 = 10 && R6292 = R6322 && R6293 = 10 && R6294 = R6322 && R6295 = 10 && R6296 = R6322 && R6297 = 10 && R6298 = R6322 && R6299 = 10 && R6300 = R6322 && R6301 = 10 && R6302 = R6322 && R6303 = 10 && R6304 = R6322 && R6305 = 10 && R6306 = R6322 && R6307 = 10 && R6308 = R6322 && R6309 = 10 && R6310 = R6322 && R6311 = 10 && R6312 = R6322 && R6313 = 10 && R6314 = R6322 && R6315 = 10 && R6316 = R6322 && R6317 = 10 && R6318 = R6322 && R6319 = 10 && R6320 = R6322 && R6321 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R6276 < R6006 && -1 < R6222 && 0 < R6244 && -1 < R6276 && 9 < R6322 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R6217 != 0 || R6218 = R6222 || (R5988 = 0 && R6222 = 0)) && (R6219 != 0 || R6220 = R6222 || (R5988 = 0 && R6222 = 0)) && (R5989 = 0 || (R6225 = 0 && R6226 = 0)) && (R5990 = 0 || (R6223 = 0 && R6224 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R6217 = 0 || (R5988 = 0 && R6222 = 0)) && (R6219 = 0 || (R5988 = 0 && R6222 = 0));
// End of Parikh automata intersection problem
