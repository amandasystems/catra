// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10213, R10214, R10215, R10216, R10217, R10218, R10219, R10220, R10221, R10222, R10223, R10224, R10225, R10226, R10227, R10228, R10229, R10230, R10231, R10232, R10233, R10234, R10235, R10236, R10237, R10238, R10239, R10240, R10241, R10242, R10243, R10244, R10245, R10246, R10247, R10248, R10249, R10250, R10251, R10252, R10253, R10254, R10255, R10256, R10257, R10258, R10259, R10260, R10261, R10262, R10263, R10264, R10265, R10266, R10267, R10268, R10269, R10270, R10271, R10272, R10273, R10274, R10275, R10276, R10277, R10278, R10279, R10280, R10281, R10282, R10283, R10284, R10285, R10286, R10287, R10288, R10289, R10290, R10291, R10292, R10293, R10294, R10295, R10296, R10297, R10298, R10299, R10300, R10301, R10302, R10303, R10304, R10305, R10306, R10307, R10308, R10309, R10310, R10311, R10312, R10313, R10314, R10315, R10316, R10317, R10318, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R9667, R9668, R9669, R9670, R9671, R9672, R9673, R9674;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R10274 += 1 };
  s0 -> s0 [0, 65535] { R10273 += 1, R10274 += 1 };
  s0 -> s2 [46, 46] { R10274 += 1 };
  s0 -> s3 [47, 47] { R10274 += 1 };
  s0 -> s1 [48, 65535] { R10274 += 1 };
  s1 -> s1 [0, 45] { R10274 += 1 };
  s1 -> s2 [46, 46] { R10274 += 1 };
  s1 -> s3 [47, 47] { R10274 += 1 };
  s1 -> s1 [48, 65535] { R10274 += 1 };
  s2 -> s1 [0, 45] { R10274 += 1 };
  s2 -> s2 [46, 46] { R10274 += 1 };
  s2 -> s3 [47, 47] { R10274 += 1 };
  s2 -> s1 [48, 114] { R10274 += 1 };
  s2 -> s8 [115, 115] { R10274 += 1 };
  s2 -> s1 [116, 65535] { R10274 += 1 };
  s3 -> s3 [0, 45] { R10274 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R10274 += 1 };
  s3 -> s3 [47, 65535] { R10274 += 1 };
  s4 -> s3 [0, 45] { R10274 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R10274 += 1 };
  s4 -> s3 [47, 114] { R10274 += 1 };
  s4 -> s5 [115, 115] { R10274 += 1 };
  s4 -> s3 [116, 65535] { R10274 += 1 };
  s5 -> s3 [0, 45] { R10274 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R10274 += 1 };
  s5 -> s3 [47, 110] { R10274 += 1 };
  s5 -> s6 [111, 111] { R10274 += 1 };
  s5 -> s3 [112, 65535] { R10274 += 1 };
  s6 -> s3 [0, 45] { R10274 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R10274 += 1 };
  s6 -> s3 [47, 98] { R10274 += 1 };
  s6 -> s7 [99, 99] { R10274 += 1 };
  s6 -> s3 [100, 65535] { R10274 += 1 };
  s7 -> s3 [0, 45] { R10274 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R10274 += 1 };
  s7 -> s3 [47, 106] { R10274 += 1 };
  s7 -> s3 [108, 65535] { R10274 += 1 };
  s8 -> s1 [0, 45] { R10274 += 1 };
  s8 -> s2 [46, 46] { R10274 += 1 };
  s8 -> s3 [47, 47] { R10274 += 1 };
  s8 -> s1 [48, 110] { R10274 += 1 };
  s8 -> s9 [111, 111] { R10274 += 1 };
  s8 -> s1 [112, 65535] { R10274 += 1 };
  s9 -> s1 [0, 45] { R10274 += 1 };
  s9 -> s2 [46, 46] { R10274 += 1 };
  s9 -> s3 [47, 47] { R10274 += 1 };
  s9 -> s1 [48, 98] { R10274 += 1 };
  s9 -> s10 [99, 99] { R10274 += 1 };
  s9 -> s1 [100, 65535] { R10274 += 1 };
  s10 -> s1 [0, 45] { R10274 += 1 };
  s10 -> s2 [46, 46] { R10274 += 1 };
  s10 -> s3 [47, 47] { R10274 += 1 };
  s10 -> s1 [48, 106] { R10274 += 1 };
  s10 -> s1 [108, 65535] { R10274 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10275 += 1, R10276 += 1 };
  s0 -> s1 [0, 65535] { R10276 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10276 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R10278 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R10278 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10277 += 1, R10278 += 1 };
  s0 -> s3 [47, 47] { R10278 += 1 };
  s0 -> s1 [48, 65535] { R10278 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R10278 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R10278 += 1 };
  s1 -> s1 [48, 65535] { R10278 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R10278 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R10278 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R10278 += 1 };
  s2 -> s1 [48, 65535] { R10278 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R10278 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R10280 += 1, R9668 += 1 };
  s0 -> s0 [0, 65535] { R10279 += 1, R10280 += 1 };
  s0 -> s2 [0, 65535] { R10280 += 1, R9667 += 1, R9668 += 1 };
  s0 -> s1 [38, 42] { R10280 += 1, R9668 += 1 };
  s0 -> s1 [44, 45] { R10280 += 1, R9668 += 1 };
  s0 -> s1 [47, 62] { R10280 += 1, R9668 += 1 };
  s0 -> s1 [64, 65535] { R10280 += 1, R9668 += 1 };
  s1 -> s1 [0, 36] { R10280 += 1, R9668 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10280 += 1 };
  s1 -> s1 [38, 42] { R10280 += 1, R9668 += 1 };
  s1 -> s1 [44, 45] { R10280 += 1, R9668 += 1 };
  s1 -> s1 [47, 62] { R10280 += 1, R9668 += 1 };
  s1 -> s1 [64, 65535] { R10280 += 1, R9668 += 1 };
  s2 -> s1 [0, 36] { R10280 += 1, R9668 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10280 += 1, R9667 += 1, R9668 += 1 };
  s2 -> s1 [38, 42] { R10280 += 1, R9668 += 1 };
  s2 -> s1 [44, 45] { R10280 += 1, R9668 += 1 };
  s2 -> s1 [47, 62] { R10280 += 1, R9668 += 1 };
  s2 -> s1 [64, 65535] { R10280 += 1, R9668 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R10281 += 1, R10282 += 1 };
  s0 -> s1 [0, 65535] { R10282 += 1, R9670 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R10282 += 1, R9669 += 1, R9670 += 1 };
  s1 -> s1 [0, 65535] { R10282 += 1, R9670 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10282 += 1 };
  s2 -> s1 [0, 65535] { R10282 += 1, R9670 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R10282 += 1, R9669 += 1, R9670 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10282 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R10283 += 1, R10284 += 1 };
  s0 -> s2 [0, 65535] { R10284 += 1, R9671 += 1, R9672 += 1 };
  s0 -> s3 [0, 65535] { R10284 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R10284 += 1, R9672 += 1 };
  s1 -> s1 [0, 65535] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535] { R10284 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R10284 += 1, R9671 += 1, R9672 += 1 };
  s2 -> s3 [0, 65535] { R10284 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R10284 += 1, R9672 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R10284 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R10284 += 1, R9672 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R10284 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10284 += 1, R9672 += 1 };
  s7 -> s5 [0, 65535] { R10284 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10286 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R10286 += 1, R9673 += 1, R9674 += 1 };
  s0 -> s0 [0, 65535] { R10285 += 1, R10286 += 1 };
  s0 -> s3 [0, 65535] { R10286 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R10286 += 1 };
  s1 -> s1 [0, 65535] { R10286 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R10286 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s2 -> s1 [0, 65535] { R10286 += 1, R9674 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s2 [0, 65535] { R10286 += 1, R9673 += 1, R9674 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10286 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R10286 += 1, R9674 += 1 };
  s3 -> s5 [0, 65535] { R10286 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10286 += 1, R9674 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R10286 += 1, R9674 += 1 };
  s4 -> s5 [0, 65535] { R10286 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10286 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R10288 += 1, R10242 += 1 };
  s0 -> s0 [0, 65535] { R10287 += 1, R10288 += 1 };
  s0 -> s2 [0, 65535] { R10288 += 1, R10241 += 1, R10242 += 1 };
  s0 -> s1 [45, 63] { R10288 += 1, R10242 += 1 };
  s0 -> s3 [87, 87] { R10288 += 1, R10242 += 1 };
  s0 -> s1 [88, 65535] { R10288 += 1, R10242 += 1 };
  s1 -> s1 [0, 43] { R10288 += 1, R10242 += 1 };
  s1 -> s1 [45, 63] { R10288 += 1, R10242 += 1 };
  s1 -> s3 [87, 87] { R10288 += 1, R10242 += 1 };
  s1 -> s1 [88, 65535] { R10288 += 1, R10242 += 1 };
  s2 -> s1 [0, 43] { R10288 += 1, R10242 += 1 };
  s2 -> s2 [0, 65535] { R10288 += 1, R10241 += 1, R10242 += 1 };
  s2 -> s1 [45, 63] { R10288 += 1, R10242 += 1 };
  s2 -> s3 [87, 87] { R10288 += 1, R10242 += 1 };
  s2 -> s1 [88, 65535] { R10288 += 1, R10242 += 1 };
  s3 -> s3 [0, 43] { R10288 += 1, R10242 += 1 };
  s3 -> s3 [0, 65535] { R10288 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R10288 += 1, R10242 += 1 };
  s3 -> s3 [87, 65535] { R10288 += 1, R10242 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R10289 += 1, R10290 += 1 };
  s0 -> s1 [0, 65535] { R10290 += 1, R10243 += 1, R10244 += 1 };
  s0 -> s2 [0, 65535] { R10290 += 1, R10244 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R10290 += 1, R10243 += 1, R10244 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10290 += 1, R10244 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R10290 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10290 += 1, R10244 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R10290 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R10292 += 1, R10246 += 1 };
  s0 -> s0 [0, 65535] { R10291 += 1, R10292 += 1 };
  s0 -> s2 [0, 65535] { R10292 += 1, R10246 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R10292 += 1, R10245 += 1, R10246 += 1 };
  s0 -> s4 [58, 58] { R10292 += 1, R10246 += 1 };
  s0 -> s1 [59, 65535] { R10292 += 1, R10246 += 1 };
  s1 -> s1 [0, 57] { R10292 += 1, R10246 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10292 += 1 };
  s1 -> s4 [58, 58] { R10292 += 1, R10246 += 1 };
  s1 -> s1 [59, 65535] { R10292 += 1, R10246 += 1 };
  s2 -> s1 [0, 57] { R10292 += 1, R10246 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10292 += 1 };
  s2 -> s2 [0, 65535] { R10292 += 1, R10246 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R10292 += 1, R10246 += 1 };
  s2 -> s1 [59, 65535] { R10292 += 1, R10246 += 1 };
  s3 -> s1 [0, 57] { R10292 += 1, R10246 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10292 += 1, R10246 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R10292 += 1, R10245 += 1, R10246 += 1 };
  s3 -> s4 [58, 58] { R10292 += 1, R10246 += 1 };
  s3 -> s1 [59, 65535] { R10292 += 1, R10246 += 1 };
  s4 -> s4 [0, 65535] { R10292 += 1, R10246 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10292 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R10294 += 1, R10248 += 1 };
  s0 -> s2 [0, 65535] { R10294 += 1, R10248 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R10294 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s0 [0, 65535] { R10293 += 1, R10294 += 1 };
  s0 -> s4 [87, 87] { R10294 += 1, R10248 += 1 };
  s0 -> s1 [88, 65535] { R10294 += 1, R10248 += 1 };
  s1 -> s1 [0, 86] { R10294 += 1, R10248 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10294 += 1 };
  s1 -> s4 [87, 87] { R10294 += 1, R10248 += 1 };
  s1 -> s1 [88, 65535] { R10294 += 1, R10248 += 1 };
  s2 -> s1 [0, 86] { R10294 += 1, R10248 += 1 };
  s2 -> s2 [0, 65535] { R10294 += 1, R10248 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10294 += 1 };
  s2 -> s4 [87, 87] { R10294 += 1, R10248 += 1 };
  s2 -> s1 [88, 65535] { R10294 += 1, R10248 += 1 };
  s3 -> s1 [0, 86] { R10294 += 1, R10248 += 1 };
  s3 -> s2 [0, 65535] { R10294 += 1, R10248 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R10294 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [87, 87] { R10294 += 1, R10248 += 1 };
  s3 -> s1 [88, 65535] { R10294 += 1, R10248 += 1 };
  s4 -> s4 [0, 65535] { R10294 += 1, R10248 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10294 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R10295 += 1, R10296 += 1 };
  s0 -> s2 [0, 65535] { R10296 += 1, R10249 += 1, R10250 += 1 };
  s0 -> s3 [0, 65535] { R10296 += 1, R10250 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R10296 += 1, R10250 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10296 += 1 };
  s1 -> s1 [0, 65535] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10296 += 1, R10249 += 1, R10250 += 1 };
  s2 -> s3 [0, 65535] { R10296 += 1, R10250 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10296 += 1 };
  s3 -> s3 [0, 65535] { R10296 += 1, R10250 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R10296 += 1, R10250 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10296 += 1 };
  s7 -> s7 [0, 65535] { R10296 += 1, R10250 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10296 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10298 += 1, R10251 += 1, R10252 += 1 };
  s0 -> s2 [0, 65535] { R10298 += 1, R10252 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R10297 += 1, R10298 += 1 };
  s0 -> s3 [0, 65535] { R10298 += 1, R10252 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s1 [0, 65535] { R10298 += 1, R10251 += 1, R10252 += 1 };
  s1 -> s2 [0, 65535] { R10298 += 1, R10252 += 1, R5998 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R10298 += 1, R10252 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10298 += 1, R10252 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R10298 += 1, R10252 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10298 += 1 };
  s3 -> s2 [0, 65535] { R10298 += 1, R10252 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R10298 += 1, R10252 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10298 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10298 += 1 };
  s6 -> s6 [0, 65535] { R10298 += 1, R10252 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10298 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10299 += 1, R10300 += 1 };
  s0 -> s1 [0, 65535] { R10300 += 1, R10254 += 1, R10220 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R10300 += 1, R10253 += 1, R10254 += 1 };
  s0 -> s3 [0, 65535] { R10300 += 1, R10254 += 1, R10219 += 1, R10220 += 1 };
  s1 -> s1 [0, 65535] { R10300 += 1, R10254 += 1, R10220 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R10300 += 1, R10254 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10300 += 1 };
  s2 -> s1 [0, 65535] { R10300 += 1, R10254 += 1, R10220 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10300 += 1, R10253 += 1, R10254 += 1 };
  s2 -> s3 [0, 65535] { R10300 += 1, R10254 += 1, R10219 += 1, R10220 += 1 };
  s3 -> s1 [0, 65535] { R10300 += 1, R10254 += 1, R10220 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10300 += 1, R10254 += 1, R10219 += 1, R10220 += 1 };
  s3 -> s5 [0, 65535] { R10300 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10300 += 1 };
  s6 -> s6 [0, 65535] { R10300 += 1, R10254 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10300 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10302 += 1, R10255 += 1, R10256 += 1 };
  s0 -> s2 [0, 65535] { R10302 += 1, R10256 += 1, R10221 += 1, R10222 += 1 };
  s0 -> s0 [0, 65535] { R10301 += 1, R10302 += 1 };
  s0 -> s3 [108, 108] { R10302 += 1, R10256 += 1, R10222 += 1 };
  s1 -> s1 [0, 65535] { R10302 += 1, R10255 += 1, R10256 += 1 };
  s1 -> s2 [0, 65535] { R10302 += 1, R10256 += 1, R10221 += 1, R10222 += 1 };
  s1 -> s3 [108, 108] { R10302 += 1, R10256 += 1, R10222 += 1 };
  s2 -> s2 [0, 65535] { R10302 += 1, R10256 += 1, R10221 += 1, R10222 += 1 };
  s2 -> s3 [108, 108] { R10302 += 1, R10256 += 1, R10222 += 1 };
  s3 -> s4 [111, 111] { R10302 += 1, R10256 += 1, R10222 += 1 };
  s4 -> s5 [99, 99] { R10302 += 1, R10256 += 1, R10222 += 1 };
  s5 -> s6 [97, 97] { R10302 += 1, R10256 += 1, R10222 += 1 };
  s6 -> s6 [0, 65535] { R10302 += 1, R10256 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R10302 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10302 += 1 };
  accepting s6, s7, s8;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s0 -> s2 [0, 65535] { R10304 += 1, R10258 += 1, R10225 += 1, R10226 += 1 };
  s0 -> s0 [0, 65535] { R10303 += 1, R10304 += 1 };
  s0 -> s3 [0, 65535] { R10304 += 1, R10257 += 1, R10258 += 1 };
  s0 -> s4 [87, 87] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s0 -> s1 [88, 65535] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s1 -> s1 [0, 86] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s1 -> s4 [87, 87] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s1 -> s1 [88, 65535] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s2 -> s1 [0, 86] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s2 -> s2 [0, 65535] { R10304 += 1, R10258 += 1, R10225 += 1, R10226 += 1 };
  s2 -> s4 [87, 87] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s2 -> s1 [88, 65535] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s3 -> s1 [0, 86] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s3 -> s2 [0, 65535] { R10304 += 1, R10258 += 1, R10225 += 1, R10226 += 1 };
  s3 -> s3 [0, 65535] { R10304 += 1, R10257 += 1, R10258 += 1 };
  s3 -> s4 [87, 87] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s3 -> s1 [88, 65535] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s4 -> s5 [0, 65535] { R10304 += 1 };
  s4 -> s6 [0, 65535] { R10304 += 1, R10258 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R10304 += 1, R10258 += 1, R10226 += 1 };
  s5 -> s5 [0, 65535] { R10304 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R10304 += 1 };
  s6 -> s6 [0, 65535] { R10304 += 1, R10258 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10305 += 1, R10306 += 1 };
  s0 -> s1 [0, 65535] { R10306 += 1, R10260 += 1, R10228 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R10306 += 1, R10260 += 1, R10227 += 1, R10228 += 1 };
  s0 -> s3 [0, 65535] { R10306 += 1, R10259 += 1, R10260 += 1 };
  s1 -> s5 [0, 65535] { R10306 += 1 };
  s1 -> s6 [0, 65535] { R10306 += 1, R10260 += 1 };
  s1 -> s1 [0, 65535] { R10306 += 1, R10260 += 1, R10228 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10306 += 1 };
  s2 -> s1 [0, 65535] { R10306 += 1, R10260 += 1, R10228 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R10306 += 1, R10260 += 1, R10227 += 1, R10228 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10306 += 1, R10260 += 1, R10228 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R10306 += 1, R10260 += 1, R10227 += 1, R10228 += 1 };
  s3 -> s3 [0, 65535] { R10306 += 1, R10259 += 1, R10260 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10306 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10306 += 1 };
  s6 -> s6 [0, 65535] { R10306 += 1, R10260 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s0 -> s2 [0, 65535] { R10308 += 1, R10262 += 1, R10229 += 1, R10230 += 1 };
  s0 -> s0 [0, 65535] { R10307 += 1, R10308 += 1 };
  s0 -> s3 [0, 65535] { R10308 += 1, R10261 += 1, R10262 += 1 };
  s0 -> s4 [0, 65535] { R10308 += 1, R10262 += 1, R10230 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s0 -> s1 [88, 65535] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s1 -> s1 [0, 86] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10308 += 1, R10262 += 1 };
  s1 -> s7 [0, 65535] { R10308 += 1 };
  s1 -> s5 [87, 87] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s1 -> s1 [88, 65535] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s2 -> s1 [0, 86] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10308 += 1, R10262 += 1, R10229 += 1, R10230 += 1 };
  s2 -> s7 [0, 65535] { R10308 += 1 };
  s2 -> s4 [0, 65535] { R10308 += 1, R10262 += 1, R10230 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s2 -> s1 [88, 65535] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s3 -> s1 [0, 86] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R10308 += 1, R10262 += 1, R10229 += 1, R10230 += 1 };
  s3 -> s3 [0, 65535] { R10308 += 1, R10261 += 1, R10262 += 1 };
  s3 -> s4 [0, 65535] { R10308 += 1, R10262 += 1, R10230 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s3 -> s1 [88, 65535] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s4 -> s1 [0, 86] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10308 += 1 };
  s4 -> s8 [0, 65535] { R10308 += 1, R10262 += 1 };
  s4 -> s4 [0, 65535] { R10308 += 1, R10262 += 1, R10230 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s4 -> s1 [88, 65535] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s5 -> s5 [0, 65535] { R10308 += 1, R10262 += 1, R10230 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10308 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10308 += 1 };
  s8 -> s8 [0, 65535] { R10308 += 1, R10262 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s0 -> s2 [0, 65535] { R10310 += 1, R10264 += 1, R10232 += 1, R10213 += 1, R10214 += 1 };
  s0 -> s0 [0, 65535] { R10309 += 1, R10310 += 1 };
  s0 -> s3 [0, 65535] { R10310 += 1, R10263 += 1, R10264 += 1 };
  s0 -> s4 [0, 65535] { R10310 += 1, R10264 += 1, R10231 += 1, R10232 += 1 };
  s0 -> s1 [88, 65535] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s1 -> s1 [0, 86] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s1 -> s5 [0, 65535] { R10310 += 1 };
  s1 -> s1 [0, 65535] { R10310 += 1, R10264 += 1, R10232 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10310 += 1, R10264 += 1 };
  s1 -> s1 [88, 65535] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s2 -> s1 [0, 86] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s2 -> s5 [0, 65535] { R10310 += 1 };
  s2 -> s2 [0, 65535] { R10310 += 1, R10264 += 1, R10232 += 1, R10213 += 1, R10214 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R10310 += 1, R10264 += 1 };
  s2 -> s1 [88, 65535] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s3 -> s1 [0, 86] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s3 -> s2 [0, 65535] { R10310 += 1, R10264 += 1, R10232 += 1, R10213 += 1, R10214 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10310 += 1, R10263 += 1, R10264 += 1 };
  s3 -> s4 [0, 65535] { R10310 += 1, R10264 += 1, R10231 += 1, R10232 += 1 };
  s3 -> s1 [88, 65535] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s4 -> s1 [0, 86] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s4 -> s5 [0, 65535] { R10310 += 1 };
  s4 -> s2 [0, 65535] { R10310 += 1, R10264 += 1, R10232 += 1, R10213 += 1, R10214 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10310 += 1, R10264 += 1, R10231 += 1, R10232 += 1 };
  s4 -> s1 [88, 65535] { R10310 += 1, R10264 += 1, R10232 += 1, R10214 += 1 };
  s5 -> s5 [0, 65535] { R10310 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10310 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10310 += 1, R10264 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1, R10215 += 1, R10216 += 1 };
  s0 -> s2 [0, 65535] { R10312 += 1, R10265 += 1, R10266 += 1 };
  s0 -> s3 [0, 65535] { R10312 += 1, R10266 += 1, R10233 += 1, R10234 += 1 };
  s0 -> s0 [0, 65535] { R10311 += 1, R10312 += 1 };
  s0 -> s4 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1, R10216 += 1, R5988 += 1 };
  s1 -> s1 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1, R10215 += 1, R10216 += 1 };
  s1 -> s5 [0, 65535] { R10312 += 1, R10266 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10312 += 1 };
  s1 -> s4 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1, R10216 += 1, R5988 += 1 };
  s2 -> s1 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1, R10215 += 1, R10216 += 1 };
  s2 -> s2 [0, 65535] { R10312 += 1, R10265 += 1, R10266 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10312 += 1, R10266 += 1, R10233 += 1, R10234 += 1 };
  s2 -> s4 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1, R10216 += 1, R5988 += 1 };
  s3 -> s1 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1, R10215 += 1, R10216 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R10312 += 1 };
  s3 -> s3 [0, 65535] { R10312 += 1, R10266 += 1, R10233 += 1, R10234 += 1 };
  s3 -> s4 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1, R10216 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R10312 += 1, R10266 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10312 += 1 };
  s4 -> s8 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1 };
  s4 -> s4 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1, R10216 += 1, R5988 += 1 };
  s5 -> s5 [0, 65535] { R10312 += 1, R10266 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10312 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10312 += 1 };
  s8 -> s5 [0, 65535] { R10312 += 1, R10266 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10312 += 1 };
  s8 -> s8 [0, 65535] { R10312 += 1, R10266 += 1, R10234 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R10313 += 1, R10314 += 1 };
  s0 -> s1 [0, 65535] { R10314 += 1, R10267 += 1, R10268 += 1 };
  s0 -> s2 [0, 65535] { R10314 += 1, R10268 += 1, R10235 += 1, R10236 += 1 };
  s0 -> s3 [0, 65535] { R10314 += 1, R10268 += 1, R10236 += 1, R10217 += 1, R10218 += 1 };
  s0 -> s4 [108, 108] { R10314 += 1, R10268 += 1, R10236 += 1, R10218 += 1 };
  s1 -> s1 [0, 65535] { R10314 += 1, R10267 += 1, R10268 += 1 };
  s1 -> s2 [0, 65535] { R10314 += 1, R10268 += 1, R10235 += 1, R10236 += 1 };
  s1 -> s3 [0, 65535] { R10314 += 1, R10268 += 1, R10236 += 1, R10217 += 1, R10218 += 1 };
  s1 -> s4 [108, 108] { R10314 += 1, R10268 += 1, R10236 += 1, R10218 += 1 };
  s2 -> s2 [0, 65535] { R10314 += 1, R10268 += 1, R10235 += 1, R10236 += 1 };
  s2 -> s3 [0, 65535] { R10314 += 1, R10268 += 1, R10236 += 1, R10217 += 1, R10218 += 1 };
  s2 -> s4 [108, 108] { R10314 += 1, R10268 += 1, R10236 += 1, R10218 += 1 };
  s3 -> s3 [0, 65535] { R10314 += 1, R10268 += 1, R10236 += 1, R10217 += 1, R10218 += 1 };
  s3 -> s4 [108, 108] { R10314 += 1, R10268 += 1, R10236 += 1, R10218 += 1 };
  s4 -> s5 [104, 104] { R10314 += 1, R10268 += 1, R10236 += 1, R10218 += 1 };
  s5 -> s6 [111, 111] { R10314 += 1, R10268 += 1, R10236 += 1, R10218 += 1 };
  s6 -> s7 [115, 115] { R10314 += 1, R10268 += 1, R10236 += 1, R10218 += 1 };
  s7 -> s8 [116, 116] { R10314 += 1, R10268 += 1, R10236 += 1, R10218 += 1 };
  s8 -> s8 [0, 65535] { R10314 += 1, R10268 += 1, R10236 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10314 += 1, R10268 += 1 };
  s8 -> s11 [0, 65535] { R10314 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10314 += 1, R10268 += 1 };
  s10 -> s11 [0, 65535] { R10314 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10314 += 1 };
  accepting s8, s9, s10, s11;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1, R10224 += 1, R5989 += 1 };
  s0 -> s2 [0, 65535] { R10316 += 1, R10270 += 1, R10237 += 1, R10238 += 1 };
  s0 -> s3 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1, R10223 += 1, R10224 += 1 };
  s0 -> s4 [0, 65535] { R10316 += 1, R10269 += 1, R10270 += 1 };
  s0 -> s0 [0, 65535] { R10315 += 1, R10316 += 1 };
  s1 -> s1 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1, R10224 += 1, R5989 += 1 };
  s1 -> s8 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1 };
  s1 -> s6 [0, 65535] { R10316 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R10316 += 1, R10270 += 1 };
  s2 -> s1 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1, R10224 += 1, R5989 += 1 };
  s2 -> s2 [0, 65535] { R10316 += 1, R10270 += 1, R10237 += 1, R10238 += 1 };
  s2 -> s3 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1, R10223 += 1, R10224 += 1 };
  s2 -> s6 [0, 65535] { R10316 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1, R10224 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1, R10223 += 1, R10224 += 1 };
  s3 -> s6 [0, 65535] { R10316 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R10316 += 1, R10270 += 1 };
  s4 -> s1 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1, R10224 += 1, R5989 += 1 };
  s4 -> s2 [0, 65535] { R10316 += 1, R10270 += 1, R10237 += 1, R10238 += 1 };
  s4 -> s3 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1, R10223 += 1, R10224 += 1 };
  s4 -> s4 [0, 65535] { R10316 += 1, R10269 += 1, R10270 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10316 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10316 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10316 += 1, R10270 += 1 };
  s8 -> s8 [0, 65535] { R10316 += 1, R10270 += 1, R10238 += 1 };
  s8 -> s6 [0, 65535] { R10316 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R10316 += 1, R10270 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10318 += 1, R10272 += 1, R10240 += 1 };
  s0 -> s0 [0, 65535] { R10317 += 1, R10318 += 1 };
  s0 -> s2 [0, 65535] { R10318 += 1, R10271 += 1, R10272 += 1 };
  s0 -> s3 [0, 65535] { R10318 += 1, R10272 += 1, R10239 += 1, R10240 += 1 };
  s1 -> s1 [0, 65535] { R10318 += 1, R10272 += 1, R10240 += 1 };
  s1 -> s4 [0, 65535] { R10318 += 1 };
  s1 -> s6 [0, 65535] { R10318 += 1, R10272 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10318 += 1, R10272 += 1, R10240 += 1 };
  s2 -> s2 [0, 65535] { R10318 += 1, R10271 += 1, R10272 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10318 += 1, R10272 += 1, R10239 += 1, R10240 += 1 };
  s3 -> s1 [0, 65535] { R10318 += 1, R10272 += 1, R10240 += 1 };
  s3 -> s4 [0, 65535] { R10318 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10318 += 1, R10272 += 1, R10239 += 1, R10240 += 1 };
  s4 -> s4 [0, 65535] { R10318 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10318 += 1 };
  s6 -> s6 [0, 65535] { R10318 += 1, R10272 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R10218 && R2 = R10240 && R3 = R9674 && R4 = R10318 && R15 = 0 && R16 = R10272 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R9667 - R10272 = 1 && R9668 = R9674 && R9669 - R10272 = 1 && R9670 = R9674 && R9671 - R10272 = 1 && R9672 = R9674 && R9673 - R10272 = 1 && R10217 = 0 && R10221 = 0 && R10222 = 0 && R10225 = 0 && R10226 = R10240 && R10227 = 0 && R10228 = R10240 && R10229 = 0 && R10230 = R10240 && R10231 = 0 && R10232 = R10240 && R10233 = 0 && R10234 = R10240 && R10235 = 0 && R10236 = R10240 && R10237 = 0 && R10238 = R10240 && R10239 = 0 && R10241 = 0 && R10242 = R10272 && R10243 = 0 && R10244 = R10272 && R10245 = 0 && R10246 = R10272 && R10247 = 0 && R10248 = R10272 && R10249 = 0 && R10250 = R10272 && R10251 = 0 && R10252 = R10272 && R10253 = 0 && R10254 = R10272 && R10255 = 0 && R10256 = R10272 && R10257 = 0 && R10258 = R10272 && R10259 = 0 && R10260 = R10272 && R10261 = 0 && R10262 = R10272 && R10263 = 0 && R10264 = R10272 && R10265 = 0 && R10266 = R10272 && R10267 = 0 && R10268 = R10272 && R10269 = 0 && R10270 = R10272 && R10271 = 0 && R10273 = 10 && R10274 = R10318 && R10275 = 10 && R10276 = R10318 && R10277 = 10 && R10278 = R10318 && R10279 = 10 && R10280 = R10318 && R10281 = 10 && R10282 = R10318 && R10283 = 10 && R10284 = R10318 && R10285 = 10 && R10286 = R10318 && R10287 = 10 && R10288 = R10318 && R10289 = 10 && R10290 = R10318 && R10291 = 10 && R10292 = R10318 && R10293 = 10 && R10294 = R10318 && R10295 = 10 && R10296 = R10318 && R10297 = 10 && R10298 = R10318 && R10299 = 10 && R10300 = R10318 && R10301 = 10 && R10302 = R10318 && R10303 = 10 && R10304 = R10318 && R10305 = 10 && R10306 = R10318 && R10307 = 10 && R10308 = R10318 && R10309 = 10 && R10310 = R10318 && R10311 = 10 && R10312 = R10318 && R10313 = 10 && R10314 = R10318 && R10315 = 10 && R10316 = R10318 && R10317 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R10272 < R9674 && -1 < R10218 && 0 < R10240 && -1 < R10272 && 9 < R10318 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R10213 != 0 || R10214 = R10218 || (R5988 = 0 && R10218 = 0)) && (R10215 != 0 || R10216 = R10218 || (R5988 = 0 && R10218 = 0)) && (R5989 = 0 || (R10223 = 0 && R10224 = 0)) && (R5990 = 0 || (R10219 = 0 && R10220 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R10213 = 0 || (R5988 = 0 && R10218 = 0)) && (R10215 = 0 || (R5988 = 0 && R10218 = 0));
// End of Parikh automata intersection problem
