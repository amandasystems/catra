// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R9129, R9130, R9131, R9132, R9133, R9134, R9135, R9136, R9137, R9138, R9139, R9140, R9141, R9142, R9143, R9144, R9145, R9146, R9147, R9148, R9149, R9150, R9151, R9152, R9153, R9154, R9155, R9156, R9157, R9158, R9159, R9160, R9161, R9162, R9163, R9164, R9165, R9166, R9167, R9168, R9169, R9170, R9171, R9172, R9173, R9174, R9175, R9176, R9177, R9178, R9179, R9180, R9181, R9182, R9183, R9184, R9185, R9186, R9187, R9188, R9189, R9190, R9191, R9192, R9193, R9194, R9195, R9196, R9197, R9198, R9199, R9200, R9201, R9202, R9203, R9204, R9205, R9206, R9207, R9208, R9209, R9210, R9211, R9212, R9213, R9214, R9215, R9216, R9217, R9218, R9219, R9220, R9221, R9222, R9223, R9224, R9225, R9226, R9227, R9228, R9229, R9230, R9231, R9232, R9233, R9234, R9235, R9236;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R9192 += 1 };
  s0 -> s0 [0, 65535] { R9191 += 1, R9192 += 1 };
  s0 -> s2 [46, 46] { R9192 += 1 };
  s0 -> s3 [47, 47] { R9192 += 1 };
  s0 -> s1 [48, 65535] { R9192 += 1 };
  s1 -> s1 [0, 45] { R9192 += 1 };
  s1 -> s2 [46, 46] { R9192 += 1 };
  s1 -> s3 [47, 47] { R9192 += 1 };
  s1 -> s1 [48, 65535] { R9192 += 1 };
  s2 -> s1 [0, 45] { R9192 += 1 };
  s2 -> s2 [46, 46] { R9192 += 1 };
  s2 -> s3 [47, 47] { R9192 += 1 };
  s2 -> s1 [48, 114] { R9192 += 1 };
  s2 -> s8 [115, 115] { R9192 += 1 };
  s2 -> s1 [116, 65535] { R9192 += 1 };
  s3 -> s3 [0, 45] { R9192 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R9192 += 1 };
  s3 -> s3 [47, 65535] { R9192 += 1 };
  s4 -> s3 [0, 45] { R9192 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R9192 += 1 };
  s4 -> s3 [47, 114] { R9192 += 1 };
  s4 -> s5 [115, 115] { R9192 += 1 };
  s4 -> s3 [116, 65535] { R9192 += 1 };
  s5 -> s3 [0, 45] { R9192 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R9192 += 1 };
  s5 -> s3 [47, 110] { R9192 += 1 };
  s5 -> s6 [111, 111] { R9192 += 1 };
  s5 -> s3 [112, 65535] { R9192 += 1 };
  s6 -> s3 [0, 45] { R9192 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R9192 += 1 };
  s6 -> s3 [47, 98] { R9192 += 1 };
  s6 -> s7 [99, 99] { R9192 += 1 };
  s6 -> s3 [100, 65535] { R9192 += 1 };
  s7 -> s3 [0, 45] { R9192 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R9192 += 1 };
  s7 -> s3 [47, 106] { R9192 += 1 };
  s7 -> s3 [108, 65535] { R9192 += 1 };
  s8 -> s1 [0, 45] { R9192 += 1 };
  s8 -> s2 [46, 46] { R9192 += 1 };
  s8 -> s3 [47, 47] { R9192 += 1 };
  s8 -> s1 [48, 110] { R9192 += 1 };
  s8 -> s9 [111, 111] { R9192 += 1 };
  s8 -> s1 [112, 65535] { R9192 += 1 };
  s9 -> s1 [0, 45] { R9192 += 1 };
  s9 -> s2 [46, 46] { R9192 += 1 };
  s9 -> s3 [47, 47] { R9192 += 1 };
  s9 -> s1 [48, 98] { R9192 += 1 };
  s9 -> s10 [99, 99] { R9192 += 1 };
  s9 -> s1 [100, 65535] { R9192 += 1 };
  s10 -> s1 [0, 45] { R9192 += 1 };
  s10 -> s2 [46, 46] { R9192 += 1 };
  s10 -> s3 [47, 47] { R9192 += 1 };
  s10 -> s1 [48, 106] { R9192 += 1 };
  s10 -> s1 [108, 65535] { R9192 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R9193 += 1, R9194 += 1 };
  s0 -> s1 [0, 65535] { R9194 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R9194 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R9196 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R9196 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R9195 += 1, R9196 += 1 };
  s0 -> s3 [47, 47] { R9196 += 1 };
  s0 -> s1 [48, 65535] { R9196 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R9196 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R9196 += 1 };
  s1 -> s1 [48, 65535] { R9196 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R9196 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R9196 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R9196 += 1 };
  s2 -> s1 [48, 65535] { R9196 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R9196 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R9198 += 1, R8908 += 1 };
  s0 -> s2 [0, 65535] { R9198 += 1, R8907 += 1, R8908 += 1 };
  s0 -> s0 [0, 65535] { R9197 += 1, R9198 += 1 };
  s0 -> s1 [38, 42] { R9198 += 1, R8908 += 1 };
  s0 -> s1 [44, 45] { R9198 += 1, R8908 += 1 };
  s0 -> s1 [47, 62] { R9198 += 1, R8908 += 1 };
  s0 -> s1 [64, 65535] { R9198 += 1, R8908 += 1 };
  s1 -> s1 [0, 36] { R9198 += 1, R8908 += 1 };
  s1 -> s1 [0, 65535] { R9198 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R9198 += 1, R8908 += 1 };
  s1 -> s1 [44, 45] { R9198 += 1, R8908 += 1 };
  s1 -> s1 [47, 62] { R9198 += 1, R8908 += 1 };
  s1 -> s1 [64, 65535] { R9198 += 1, R8908 += 1 };
  s2 -> s1 [0, 36] { R9198 += 1, R8908 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9198 += 1, R8907 += 1, R8908 += 1 };
  s2 -> s1 [38, 42] { R9198 += 1, R8908 += 1 };
  s2 -> s1 [44, 45] { R9198 += 1, R8908 += 1 };
  s2 -> s1 [47, 62] { R9198 += 1, R8908 += 1 };
  s2 -> s1 [64, 65535] { R9198 += 1, R8908 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R9200 += 1, R8909 += 1, R8910 += 1 };
  s0 -> s0 [0, 65535] { R9199 += 1, R9200 += 1 };
  s0 -> s2 [0, 65535] { R9200 += 1, R8910 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R9200 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s2 [0, 65535] { R9200 += 1, R8910 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9200 += 1, R8910 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9200 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9200 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R9201 += 1, R9202 += 1 };
  s0 -> s2 [0, 65535] { R9202 += 1, R8911 += 1, R8912 += 1 };
  s0 -> s3 [0, 65535] { R9202 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535] { R9202 += 1 };
  s1 -> s7 [0, 65535] { R9202 += 1, R8912 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R9202 += 1, R8911 += 1, R8912 += 1 };
  s2 -> s3 [0, 65535] { R9202 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R9202 += 1 };
  s3 -> s3 [0, 65535] { R9202 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R9202 += 1, R8912 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R9202 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9202 += 1 };
  s7 -> s7 [0, 65535] { R9202 += 1, R8912 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9204 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R9204 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R9203 += 1, R9204 += 1 };
  s0 -> s3 [0, 65535] { R9204 += 1, R8913 += 1, R8914 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9204 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R9204 += 1, R8914 += 1 };
  s1 -> s5 [0, 65535] { R9204 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9204 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R9204 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535] { R9204 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9204 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R9204 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s3 [0, 65535] { R9204 += 1, R8913 += 1, R8914 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9204 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9204 += 1, R8914 += 1 };
  s6 -> s5 [0, 65535] { R9204 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R9206 += 1, R9160 += 1 };
  s0 -> s2 [0, 65535] { R9206 += 1, R9159 += 1, R9160 += 1 };
  s0 -> s0 [0, 65535] { R9205 += 1, R9206 += 1 };
  s0 -> s1 [45, 63] { R9206 += 1, R9160 += 1 };
  s0 -> s3 [87, 87] { R9206 += 1, R9160 += 1 };
  s0 -> s1 [88, 65535] { R9206 += 1, R9160 += 1 };
  s1 -> s1 [0, 43] { R9206 += 1, R9160 += 1 };
  s1 -> s1 [45, 63] { R9206 += 1, R9160 += 1 };
  s1 -> s3 [87, 87] { R9206 += 1, R9160 += 1 };
  s1 -> s1 [88, 65535] { R9206 += 1, R9160 += 1 };
  s2 -> s1 [0, 43] { R9206 += 1, R9160 += 1 };
  s2 -> s2 [0, 65535] { R9206 += 1, R9159 += 1, R9160 += 1 };
  s2 -> s1 [45, 63] { R9206 += 1, R9160 += 1 };
  s2 -> s3 [87, 87] { R9206 += 1, R9160 += 1 };
  s2 -> s1 [88, 65535] { R9206 += 1, R9160 += 1 };
  s3 -> s3 [0, 43] { R9206 += 1, R9160 += 1 };
  s3 -> s3 [0, 65535] { R9206 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R9206 += 1, R9160 += 1 };
  s3 -> s3 [87, 65535] { R9206 += 1, R9160 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R9208 += 1, R9162 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9207 += 1, R9208 += 1 };
  s0 -> s2 [0, 65535] { R9208 += 1, R9161 += 1, R9162 += 1 };
  s1 -> s1 [0, 65535] { R9208 += 1, R9162 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R9208 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9208 += 1, R9162 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9208 += 1, R9161 += 1, R9162 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9208 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R9210 += 1, R9164 += 1 };
  s0 -> s0 [0, 65535] { R9209 += 1, R9210 += 1 };
  s0 -> s2 [0, 65535] { R9210 += 1, R9163 += 1, R9164 += 1 };
  s0 -> s3 [0, 65535] { R9210 += 1, R9164 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R9210 += 1, R9164 += 1 };
  s0 -> s1 [59, 65535] { R9210 += 1, R9164 += 1 };
  s1 -> s1 [0, 57] { R9210 += 1, R9164 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9210 += 1 };
  s1 -> s4 [58, 58] { R9210 += 1, R9164 += 1 };
  s1 -> s1 [59, 65535] { R9210 += 1, R9164 += 1 };
  s2 -> s1 [0, 57] { R9210 += 1, R9164 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9210 += 1, R9163 += 1, R9164 += 1 };
  s2 -> s3 [0, 65535] { R9210 += 1, R9164 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R9210 += 1, R9164 += 1 };
  s2 -> s1 [59, 65535] { R9210 += 1, R9164 += 1 };
  s3 -> s1 [0, 57] { R9210 += 1, R9164 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9210 += 1 };
  s3 -> s3 [0, 65535] { R9210 += 1, R9164 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R9210 += 1, R9164 += 1 };
  s3 -> s1 [59, 65535] { R9210 += 1, R9164 += 1 };
  s4 -> s4 [0, 65535] { R9210 += 1, R9164 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9210 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R9212 += 1, R9166 += 1 };
  s0 -> s2 [0, 65535] { R9212 += 1, R9166 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R9211 += 1, R9212 += 1 };
  s0 -> s3 [0, 65535] { R9212 += 1, R9165 += 1, R9166 += 1 };
  s0 -> s4 [87, 87] { R9212 += 1, R9166 += 1 };
  s0 -> s1 [88, 65535] { R9212 += 1, R9166 += 1 };
  s1 -> s1 [0, 86] { R9212 += 1, R9166 += 1 };
  s1 -> s1 [0, 65535] { R9212 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R9212 += 1, R9166 += 1 };
  s1 -> s1 [88, 65535] { R9212 += 1, R9166 += 1 };
  s2 -> s1 [0, 86] { R9212 += 1, R9166 += 1 };
  s2 -> s2 [0, 65535] { R9212 += 1, R9166 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R9212 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [87, 87] { R9212 += 1, R9166 += 1 };
  s2 -> s1 [88, 65535] { R9212 += 1, R9166 += 1 };
  s3 -> s1 [0, 86] { R9212 += 1, R9166 += 1 };
  s3 -> s2 [0, 65535] { R9212 += 1, R9166 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R9212 += 1, R9165 += 1, R9166 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [87, 87] { R9212 += 1, R9166 += 1 };
  s3 -> s1 [88, 65535] { R9212 += 1, R9166 += 1 };
  s4 -> s4 [0, 65535] { R9212 += 1, R9166 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9212 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R9214 += 1, R9167 += 1, R9168 += 1 };
  s0 -> s0 [0, 65535] { R9213 += 1, R9214 += 1 };
  s0 -> s3 [0, 65535] { R9214 += 1, R9168 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535] { R9214 += 1 };
  s1 -> s7 [0, 65535] { R9214 += 1, R9168 += 1 };
  s1 -> s1 [0, 65535] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R9214 += 1, R9167 += 1, R9168 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R9214 += 1, R9168 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R9214 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9214 += 1, R9168 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R9214 += 1, R9168 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R9214 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9214 += 1 };
  s7 -> s7 [0, 65535] { R9214 += 1, R9168 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9216 += 1, R9169 += 1, R9170 += 1 };
  s0 -> s2 [0, 65535] { R9216 += 1, R9170 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R9215 += 1, R9216 += 1 };
  s0 -> s3 [0, 65535] { R9216 += 1, R9170 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9216 += 1, R9169 += 1, R9170 += 1 };
  s1 -> s2 [0, 65535] { R9216 += 1, R9170 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s3 [0, 65535] { R9216 += 1, R9170 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R9216 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9216 += 1, R9170 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s3 [0, 65535] { R9216 += 1, R9170 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R9216 += 1, R9170 += 1 };
  s3 -> s5 [0, 65535] { R9216 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9216 += 1, R9170 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R9216 += 1, R9170 += 1 };
  s4 -> s5 [0, 65535] { R9216 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9216 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9218 += 1, R9172 += 1, R9136 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R9217 += 1, R9218 += 1 };
  s0 -> s2 [0, 65535] { R9218 += 1, R9172 += 1, R9135 += 1, R9136 += 1 };
  s0 -> s3 [0, 65535] { R9218 += 1, R9171 += 1, R9172 += 1 };
  s1 -> s1 [0, 65535] { R9218 += 1, R9172 += 1, R9136 += 1, R5990 += 1 };
  s1 -> s5 [0, 65535] { R9218 += 1 };
  s1 -> s6 [0, 65535] { R9218 += 1, R9172 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9218 += 1, R9172 += 1, R9136 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R9218 += 1, R9172 += 1, R9135 += 1, R9136 += 1 };
  s2 -> s5 [0, 65535] { R9218 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9218 += 1, R9172 += 1, R9136 += 1, R5990 += 1 };
  s3 -> s2 [0, 65535] { R9218 += 1, R9172 += 1, R9135 += 1, R9136 += 1 };
  s3 -> s3 [0, 65535] { R9218 += 1, R9171 += 1, R9172 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9218 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9218 += 1 };
  s6 -> s6 [0, 65535] { R9218 += 1, R9172 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9220 += 1, R9173 += 1, R9174 += 1 };
  s0 -> s2 [0, 65535] { R9220 += 1, R9174 += 1, R9137 += 1, R9138 += 1 };
  s0 -> s0 [0, 65535] { R9219 += 1, R9220 += 1 };
  s0 -> s3 [108, 108] { R9220 += 1, R9174 += 1, R9138 += 1 };
  s1 -> s1 [0, 65535] { R9220 += 1, R9173 += 1, R9174 += 1 };
  s1 -> s2 [0, 65535] { R9220 += 1, R9174 += 1, R9137 += 1, R9138 += 1 };
  s1 -> s3 [108, 108] { R9220 += 1, R9174 += 1, R9138 += 1 };
  s2 -> s2 [0, 65535] { R9220 += 1, R9174 += 1, R9137 += 1, R9138 += 1 };
  s2 -> s3 [108, 108] { R9220 += 1, R9174 += 1, R9138 += 1 };
  s3 -> s4 [111, 111] { R9220 += 1, R9174 += 1, R9138 += 1 };
  s4 -> s5 [99, 99] { R9220 += 1, R9174 += 1, R9138 += 1 };
  s5 -> s5 [0, 65535] { R9220 += 1, R9174 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9220 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9220 += 1 };
  accepting s5, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s0 -> s2 [0, 65535] { R9222 += 1, R9176 += 1, R9143 += 1, R9144 += 1 };
  s0 -> s0 [0, 65535] { R9221 += 1, R9222 += 1 };
  s0 -> s3 [0, 65535] { R9222 += 1, R9175 += 1, R9176 += 1 };
  s0 -> s4 [87, 87] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s0 -> s1 [88, 65535] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s1 -> s1 [0, 86] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s1 -> s4 [87, 87] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s1 -> s1 [88, 65535] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s2 -> s1 [0, 86] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s2 -> s2 [0, 65535] { R9222 += 1, R9176 += 1, R9143 += 1, R9144 += 1 };
  s2 -> s4 [87, 87] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s2 -> s1 [88, 65535] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s3 -> s1 [0, 86] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s3 -> s2 [0, 65535] { R9222 += 1, R9176 += 1, R9143 += 1, R9144 += 1 };
  s3 -> s3 [0, 65535] { R9222 += 1, R9175 += 1, R9176 += 1 };
  s3 -> s4 [87, 87] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s3 -> s1 [88, 65535] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9222 += 1, R9176 += 1 };
  s4 -> s4 [0, 65535] { R9222 += 1, R9176 += 1, R9144 += 1 };
  s4 -> s7 [0, 65535] { R9222 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9222 += 1, R9176 += 1 };
  s6 -> s7 [0, 65535] { R9222 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9222 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9224 += 1, R9178 += 1, R9146 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R9224 += 1, R9178 += 1, R9145 += 1, R9146 += 1 };
  s0 -> s0 [0, 65535] { R9223 += 1, R9224 += 1 };
  s0 -> s3 [0, 65535] { R9224 += 1, R9177 += 1, R9178 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9224 += 1 };
  s1 -> s1 [0, 65535] { R9224 += 1, R9178 += 1, R9146 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R9224 += 1, R9178 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9224 += 1 };
  s2 -> s1 [0, 65535] { R9224 += 1, R9178 += 1, R9146 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R9224 += 1, R9178 += 1, R9145 += 1, R9146 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9224 += 1, R9178 += 1, R9146 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R9224 += 1, R9178 += 1, R9145 += 1, R9146 += 1 };
  s3 -> s3 [0, 65535] { R9224 += 1, R9177 += 1, R9178 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9224 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9224 += 1 };
  s6 -> s6 [0, 65535] { R9224 += 1, R9178 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s0 -> s2 [0, 65535] { R9226 += 1, R9180 += 1, R9147 += 1, R9148 += 1 };
  s0 -> s3 [0, 65535] { R9226 += 1, R9179 += 1, R9180 += 1 };
  s0 -> s0 [0, 65535] { R9225 += 1, R9226 += 1 };
  s0 -> s4 [0, 65535] { R9226 += 1, R9180 += 1, R9148 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s0 -> s1 [88, 65535] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s1 -> s1 [0, 86] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s1 -> s7 [0, 65535] { R9226 += 1 };
  s1 -> s1 [0, 65535] { R9226 += 1, R9180 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [87, 87] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s1 -> s1 [88, 65535] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s2 -> s1 [0, 86] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s2 -> s2 [0, 65535] { R9226 += 1, R9180 += 1, R9147 += 1, R9148 += 1 };
  s2 -> s7 [0, 65535] { R9226 += 1 };
  s2 -> s4 [0, 65535] { R9226 += 1, R9180 += 1, R9148 += 1, R7 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [87, 87] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s2 -> s1 [88, 65535] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s3 -> s1 [0, 86] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s3 -> s2 [0, 65535] { R9226 += 1, R9180 += 1, R9147 += 1, R9148 += 1 };
  s3 -> s3 [0, 65535] { R9226 += 1, R9179 += 1, R9180 += 1 };
  s3 -> s4 [0, 65535] { R9226 += 1, R9180 += 1, R9148 += 1, R7 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s5 [87, 87] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s3 -> s1 [88, 65535] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s4 -> s1 [0, 86] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s4 -> s6 [0, 65535] { R9226 += 1, R9180 += 1 };
  s4 -> s7 [0, 65535] { R9226 += 1 };
  s4 -> s4 [0, 65535] { R9226 += 1, R9180 += 1, R9148 += 1, R7 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s5 [87, 87] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s4 -> s1 [88, 65535] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s5 -> s5 [0, 65535] { R9226 += 1, R9180 += 1, R9148 += 1 };
  s6 -> s6 [0, 65535] { R9226 += 1, R9180 += 1 };
  s6 -> s7 [0, 65535] { R9226 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9226 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s0 -> s2 [0, 65535] { R9228 += 1, R9181 += 1, R9182 += 1 };
  s0 -> s3 [0, 65535] { R9228 += 1, R9182 += 1, R9150 += 1, R9129 += 1, R9130 += 1 };
  s0 -> s4 [0, 65535] { R9228 += 1, R9182 += 1, R9149 += 1, R9150 += 1 };
  s0 -> s0 [0, 65535] { R9227 += 1, R9228 += 1 };
  s0 -> s1 [88, 65535] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s1 -> s1 [0, 86] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R9228 += 1, R9182 += 1 };
  s1 -> s1 [0, 65535] { R9228 += 1, R9182 += 1, R9150 += 1 };
  s1 -> s6 [0, 65535] { R9228 += 1 };
  s1 -> s1 [88, 65535] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s2 -> s1 [0, 86] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9228 += 1, R9181 += 1, R9182 += 1 };
  s2 -> s3 [0, 65535] { R9228 += 1, R9182 += 1, R9150 += 1, R9129 += 1, R9130 += 1 };
  s2 -> s4 [0, 65535] { R9228 += 1, R9182 += 1, R9149 += 1, R9150 += 1 };
  s2 -> s1 [88, 65535] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s3 -> s1 [0, 86] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9228 += 1, R9182 += 1, R9150 += 1, R9129 += 1, R9130 += 1 };
  s3 -> s7 [0, 65535] { R9228 += 1, R9182 += 1 };
  s3 -> s6 [0, 65535] { R9228 += 1 };
  s3 -> s1 [88, 65535] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s4 -> s1 [0, 86] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R9228 += 1, R9182 += 1, R9150 += 1, R9129 += 1, R9130 += 1 };
  s4 -> s4 [0, 65535] { R9228 += 1, R9182 += 1, R9149 += 1, R9150 += 1 };
  s4 -> s6 [0, 65535] { R9228 += 1 };
  s4 -> s1 [88, 65535] { R9228 += 1, R9182 += 1, R9150 += 1, R9130 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9228 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9228 += 1, R9182 += 1 };
  s7 -> s6 [0, 65535] { R9228 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9230 += 1, R9184 += 1, R9151 += 1, R9152 += 1 };
  s0 -> s2 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1, R9131 += 1, R9132 += 1 };
  s0 -> s0 [0, 65535] { R9229 += 1, R9230 += 1 };
  s0 -> s3 [0, 65535] { R9230 += 1, R9183 += 1, R9184 += 1 };
  s0 -> s4 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1, R9132 += 1, R5988 += 1 };
  s1 -> s1 [0, 65535] { R9230 += 1, R9184 += 1, R9151 += 1, R9152 += 1 };
  s1 -> s6 [0, 65535] { R9230 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s2 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1, R9131 += 1, R9132 += 1 };
  s1 -> s4 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1, R9132 += 1, R5988 += 1 };
  s2 -> s6 [0, 65535] { R9230 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1, R9131 += 1, R9132 += 1 };
  s2 -> s8 [0, 65535] { R9230 += 1, R9184 += 1 };
  s2 -> s4 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1, R9132 += 1, R5988 += 1 };
  s3 -> s1 [0, 65535] { R9230 += 1, R9184 += 1, R9151 += 1, R9152 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s2 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1, R9131 += 1, R9132 += 1 };
  s3 -> s3 [0, 65535] { R9230 += 1, R9183 += 1, R9184 += 1 };
  s3 -> s4 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1, R9132 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1 };
  s4 -> s6 [0, 65535] { R9230 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R9230 += 1, R9184 += 1 };
  s4 -> s4 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1, R9132 += 1, R5988 += 1 };
  s5 -> s5 [0, 65535] { R9230 += 1, R9184 += 1, R9152 += 1 };
  s5 -> s6 [0, 65535] { R9230 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R9230 += 1, R9184 += 1 };
  s6 -> s6 [0, 65535] { R9230 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R9230 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9230 += 1, R9184 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9232 += 1, R9185 += 1, R9186 += 1 };
  s0 -> s0 [0, 65535] { R9231 += 1, R9232 += 1 };
  s0 -> s2 [0, 65535] { R9232 += 1, R9186 += 1, R9153 += 1, R9154 += 1 };
  s0 -> s3 [0, 65535] { R9232 += 1, R9186 += 1, R9154 += 1, R9133 += 1, R9134 += 1 };
  s0 -> s4 [115, 115] { R9232 += 1, R9186 += 1, R9154 += 1, R9134 += 1 };
  s1 -> s1 [0, 65535] { R9232 += 1, R9185 += 1, R9186 += 1 };
  s1 -> s2 [0, 65535] { R9232 += 1, R9186 += 1, R9153 += 1, R9154 += 1 };
  s1 -> s3 [0, 65535] { R9232 += 1, R9186 += 1, R9154 += 1, R9133 += 1, R9134 += 1 };
  s1 -> s4 [115, 115] { R9232 += 1, R9186 += 1, R9154 += 1, R9134 += 1 };
  s2 -> s2 [0, 65535] { R9232 += 1, R9186 += 1, R9153 += 1, R9154 += 1 };
  s2 -> s3 [0, 65535] { R9232 += 1, R9186 += 1, R9154 += 1, R9133 += 1, R9134 += 1 };
  s2 -> s4 [115, 115] { R9232 += 1, R9186 += 1, R9154 += 1, R9134 += 1 };
  s3 -> s3 [0, 65535] { R9232 += 1, R9186 += 1, R9154 += 1, R9133 += 1, R9134 += 1 };
  s3 -> s4 [115, 115] { R9232 += 1, R9186 += 1, R9154 += 1, R9134 += 1 };
  s4 -> s5 [116, 116] { R9232 += 1, R9186 += 1, R9154 += 1, R9134 += 1 };
  s5 -> s6 [0, 65535] { R9232 += 1, R9186 += 1 };
  s5 -> s5 [0, 65535] { R9232 += 1, R9186 += 1, R9154 += 1 };
  s5 -> s7 [0, 65535] { R9232 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9232 += 1, R9186 += 1 };
  s6 -> s7 [0, 65535] { R9232 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9232 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R9233 += 1, R9234 += 1 };
  s0 -> s1 [0, 65535] { R9234 += 1, R9187 += 1, R9188 += 1 };
  s0 -> s2 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1, R9140 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R9234 += 1, R9188 += 1, R9155 += 1, R9156 += 1 };
  s0 -> s4 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1, R9139 += 1, R9140 += 1 };
  s1 -> s1 [0, 65535] { R9234 += 1, R9187 += 1, R9188 += 1 };
  s1 -> s2 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1, R9140 += 1, R5989 += 1 };
  s1 -> s3 [0, 65535] { R9234 += 1, R9188 += 1, R9155 += 1, R9156 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1, R9139 += 1, R9140 += 1 };
  s2 -> s5 [0, 65535] { R9234 += 1, R9188 += 1 };
  s2 -> s6 [0, 65535] { R9234 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1, R9140 += 1, R5989 += 1 };
  s2 -> s8 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1 };
  s3 -> s6 [0, 65535] { R9234 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s2 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1, R9140 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R9234 += 1, R9188 += 1, R9155 += 1, R9156 += 1 };
  s3 -> s4 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1, R9139 += 1, R9140 += 1 };
  s4 -> s5 [0, 65535] { R9234 += 1, R9188 += 1 };
  s4 -> s6 [0, 65535] { R9234 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s2 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1, R9140 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1, R9139 += 1, R9140 += 1 };
  s5 -> s5 [0, 65535] { R9234 += 1, R9188 += 1 };
  s5 -> s6 [0, 65535] { R9234 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9234 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R9234 += 1, R9188 += 1 };
  s8 -> s6 [0, 65535] { R9234 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9234 += 1, R9188 += 1, R9156 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9236 += 1, R9190 += 1, R9158 += 1, R9141 += 1, R9142 += 1 };
  s0 -> s0 [0, 65535] { R9235 += 1, R9236 += 1 };
  s0 -> s2 [0, 65535] { R9236 += 1, R9190 += 1, R9157 += 1, R9158 += 1 };
  s0 -> s3 [0, 65535] { R9236 += 1, R9189 += 1, R9190 += 1 };
  s0 -> s4 [97, 97] { R9236 += 1, R9190 += 1, R9158 += 1, R9142 += 1 };
  s1 -> s1 [0, 65535] { R9236 += 1, R9190 += 1, R9158 += 1, R9141 += 1, R9142 += 1 };
  s1 -> s4 [97, 97] { R9236 += 1, R9190 += 1, R9158 += 1, R9142 += 1 };
  s2 -> s1 [0, 65535] { R9236 += 1, R9190 += 1, R9158 += 1, R9141 += 1, R9142 += 1 };
  s2 -> s2 [0, 65535] { R9236 += 1, R9190 += 1, R9157 += 1, R9158 += 1 };
  s2 -> s4 [97, 97] { R9236 += 1, R9190 += 1, R9158 += 1, R9142 += 1 };
  s3 -> s1 [0, 65535] { R9236 += 1, R9190 += 1, R9158 += 1, R9141 += 1, R9142 += 1 };
  s3 -> s2 [0, 65535] { R9236 += 1, R9190 += 1, R9157 += 1, R9158 += 1 };
  s3 -> s3 [0, 65535] { R9236 += 1, R9189 += 1, R9190 += 1 };
  s3 -> s4 [97, 97] { R9236 += 1, R9190 += 1, R9158 += 1, R9142 += 1 };
  s4 -> s5 [108, 108] { R9236 += 1, R9190 += 1, R9158 += 1, R9142 += 1 };
  s5 -> s6 [104, 104] { R9236 += 1, R9190 += 1, R9158 += 1, R9142 += 1 };
  s6 -> s7 [111, 111] { R9236 += 1, R9190 += 1, R9158 += 1, R9142 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9236 += 1, R9190 += 1, R9158 += 1 };
  s7 -> s9 [0, 65535] { R9236 += 1 };
  s7 -> s10 [0, 65535] { R9236 += 1, R9190 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9236 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s9 [0, 65535] { R9236 += 1 };
  s10 -> s10 [0, 65535] { R9236 += 1, R9190 += 1 };
  accepting s7, s8, s9, s10;
};
};
constraint R1 = R9134 && R2 = R9158 && R3 = R8914 && R4 = R9236 && R15 = 0 && R16 = R9190 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8907 - R9190 = 1 && R8908 = R8914 && R8909 - R9190 = 1 && R8910 = R8914 && R8911 - R9190 = 1 && R8912 = R8914 && R8913 - R9190 = 1 && R9133 = 0 && R9137 = 0 && R9138 = 0 && R9141 = 0 && R9142 = 0 && R9143 = 0 && R9144 = R9158 && R9145 = 0 && R9146 = R9158 && R9147 = 0 && R9148 = R9158 && R9149 = 0 && R9150 = R9158 && R9151 = 0 && R9152 = R9158 && R9153 = 0 && R9154 = R9158 && R9155 = 0 && R9156 = R9158 && R9157 = 0 && R9159 = 0 && R9160 = R9190 && R9161 = 0 && R9162 = R9190 && R9163 = 0 && R9164 = R9190 && R9165 = 0 && R9166 = R9190 && R9167 = 0 && R9168 = R9190 && R9169 = 0 && R9170 = R9190 && R9171 = 0 && R9172 = R9190 && R9173 = 0 && R9174 = R9190 && R9175 = 0 && R9176 = R9190 && R9177 = 0 && R9178 = R9190 && R9179 = 0 && R9180 = R9190 && R9181 = 0 && R9182 = R9190 && R9183 = 0 && R9184 = R9190 && R9185 = 0 && R9186 = R9190 && R9187 = 0 && R9188 = R9190 && R9189 = 0 && R9191 = 10 && R9192 = R9236 && R9193 = 10 && R9194 = R9236 && R9195 = 10 && R9196 = R9236 && R9197 = 10 && R9198 = R9236 && R9199 = 10 && R9200 = R9236 && R9201 = 10 && R9202 = R9236 && R9203 = 10 && R9204 = R9236 && R9205 = 10 && R9206 = R9236 && R9207 = 10 && R9208 = R9236 && R9209 = 10 && R9210 = R9236 && R9211 = 10 && R9212 = R9236 && R9213 = 10 && R9214 = R9236 && R9215 = 10 && R9216 = R9236 && R9217 = 10 && R9218 = R9236 && R9219 = 10 && R9220 = R9236 && R9221 = 10 && R9222 = R9236 && R9223 = 10 && R9224 = R9236 && R9225 = 10 && R9226 = R9236 && R9227 = 10 && R9228 = R9236 && R9229 = 10 && R9230 = R9236 && R9231 = 10 && R9232 = R9236 && R9233 = 10 && R9234 = R9236 && R9235 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R9190 < R8914 && -1 < R9134 && 0 < R9158 && -1 < R9190 && 9 < R9236 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R9129 != 0 || R9130 = R9134 || (R5988 = 0 && R9134 = 0)) && (R9131 != 0 || R9132 = R9134 || (R5988 = 0 && R9134 = 0)) && (R5989 = 0 || (R9139 = 0 && R9140 = 0)) && (R5990 = 0 || (R9135 = 0 && R9136 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R9129 = 0 || (R5988 = 0 && R9134 = 0)) && (R9131 = 0 || (R5988 = 0 && R9134 = 0));
// End of Parikh automata intersection problem
