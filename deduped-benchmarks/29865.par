// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R9237, R9238, R9239, R9240, R9241, R9242, R9243, R9244, R9245, R9246, R9247, R9248, R9249, R9250, R9251, R9252, R9253, R9254, R9255, R9256, R9257, R9258, R9259, R9260, R9261, R9262, R9263, R9264, R9265, R9266, R9267, R9268, R9269, R9270, R9271, R9272, R9273, R9274, R9275, R9276, R9277, R9278, R9279, R9280, R9281, R9282, R9283, R9284, R9285, R9286, R9287, R9288, R9289, R9290, R9291, R9292, R9293, R9294, R9295, R9296, R9297, R9298, R9299, R9300, R9301, R9302, R9303, R9304, R9305, R9306, R9307, R9308, R9309, R9310, R9311, R9312, R9313, R9314, R9315, R9316, R9317, R9318, R9319, R9320, R9321, R9322, R9323, R9324, R9325, R9326, R9327, R9328, R9329, R9330, R9331, R9332, R9333, R9334, R9335, R9336, R9337, R9338, R9339, R9340, R9341, R9342, R9343, R9344;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R9300 += 1 };
  s0 -> s0 [0, 65535] { R9299 += 1, R9300 += 1 };
  s0 -> s2 [46, 46] { R9300 += 1 };
  s0 -> s3 [47, 47] { R9300 += 1 };
  s0 -> s1 [48, 65535] { R9300 += 1 };
  s1 -> s1 [0, 45] { R9300 += 1 };
  s1 -> s2 [46, 46] { R9300 += 1 };
  s1 -> s3 [47, 47] { R9300 += 1 };
  s1 -> s1 [48, 65535] { R9300 += 1 };
  s2 -> s1 [0, 45] { R9300 += 1 };
  s2 -> s2 [46, 46] { R9300 += 1 };
  s2 -> s3 [47, 47] { R9300 += 1 };
  s2 -> s1 [48, 114] { R9300 += 1 };
  s2 -> s8 [115, 115] { R9300 += 1 };
  s2 -> s1 [116, 65535] { R9300 += 1 };
  s3 -> s3 [0, 45] { R9300 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R9300 += 1 };
  s3 -> s3 [47, 65535] { R9300 += 1 };
  s4 -> s3 [0, 45] { R9300 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R9300 += 1 };
  s4 -> s3 [47, 114] { R9300 += 1 };
  s4 -> s5 [115, 115] { R9300 += 1 };
  s4 -> s3 [116, 65535] { R9300 += 1 };
  s5 -> s3 [0, 45] { R9300 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R9300 += 1 };
  s5 -> s3 [47, 110] { R9300 += 1 };
  s5 -> s6 [111, 111] { R9300 += 1 };
  s5 -> s3 [112, 65535] { R9300 += 1 };
  s6 -> s3 [0, 45] { R9300 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R9300 += 1 };
  s6 -> s3 [47, 98] { R9300 += 1 };
  s6 -> s7 [99, 99] { R9300 += 1 };
  s6 -> s3 [100, 65535] { R9300 += 1 };
  s7 -> s3 [0, 45] { R9300 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R9300 += 1 };
  s7 -> s3 [47, 106] { R9300 += 1 };
  s7 -> s3 [108, 65535] { R9300 += 1 };
  s8 -> s1 [0, 45] { R9300 += 1 };
  s8 -> s2 [46, 46] { R9300 += 1 };
  s8 -> s3 [47, 47] { R9300 += 1 };
  s8 -> s1 [48, 110] { R9300 += 1 };
  s8 -> s9 [111, 111] { R9300 += 1 };
  s8 -> s1 [112, 65535] { R9300 += 1 };
  s9 -> s1 [0, 45] { R9300 += 1 };
  s9 -> s2 [46, 46] { R9300 += 1 };
  s9 -> s3 [47, 47] { R9300 += 1 };
  s9 -> s1 [48, 98] { R9300 += 1 };
  s9 -> s10 [99, 99] { R9300 += 1 };
  s9 -> s1 [100, 65535] { R9300 += 1 };
  s10 -> s1 [0, 45] { R9300 += 1 };
  s10 -> s2 [46, 46] { R9300 += 1 };
  s10 -> s3 [47, 47] { R9300 += 1 };
  s10 -> s1 [48, 106] { R9300 += 1 };
  s10 -> s1 [108, 65535] { R9300 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R9302 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R9301 += 1, R9302 += 1 };
  s1 -> s1 [0, 65535] { R9302 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R9304 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R9303 += 1, R9304 += 1 };
  s0 -> s2 [0, 65535] { R9304 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R9304 += 1 };
  s0 -> s1 [48, 65535] { R9304 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R9304 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R9304 += 1 };
  s1 -> s1 [48, 65535] { R9304 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R9304 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R9304 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R9304 += 1 };
  s2 -> s1 [48, 65535] { R9304 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R9304 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R9306 += 1, R8908 += 1 };
  s0 -> s2 [0, 65535] { R9306 += 1, R8907 += 1, R8908 += 1 };
  s0 -> s0 [0, 65535] { R9305 += 1, R9306 += 1 };
  s0 -> s1 [38, 42] { R9306 += 1, R8908 += 1 };
  s0 -> s1 [44, 45] { R9306 += 1, R8908 += 1 };
  s0 -> s1 [47, 62] { R9306 += 1, R8908 += 1 };
  s0 -> s1 [64, 65535] { R9306 += 1, R8908 += 1 };
  s1 -> s1 [0, 36] { R9306 += 1, R8908 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9306 += 1 };
  s1 -> s1 [38, 42] { R9306 += 1, R8908 += 1 };
  s1 -> s1 [44, 45] { R9306 += 1, R8908 += 1 };
  s1 -> s1 [47, 62] { R9306 += 1, R8908 += 1 };
  s1 -> s1 [64, 65535] { R9306 += 1, R8908 += 1 };
  s2 -> s1 [0, 36] { R9306 += 1, R8908 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9306 += 1, R8907 += 1, R8908 += 1 };
  s2 -> s1 [38, 42] { R9306 += 1, R8908 += 1 };
  s2 -> s1 [44, 45] { R9306 += 1, R8908 += 1 };
  s2 -> s1 [47, 62] { R9306 += 1, R8908 += 1 };
  s2 -> s1 [64, 65535] { R9306 += 1, R8908 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R9307 += 1, R9308 += 1 };
  s0 -> s1 [0, 65535] { R9308 += 1, R8910 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R9308 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s4 [0, 65535] { R9308 += 1 };
  s1 -> s1 [0, 65535] { R9308 += 1, R8910 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9308 += 1, R8910 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R9308 += 1, R8909 += 1, R8910 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9308 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R9310 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R9310 += 1, R8911 += 1, R8912 += 1 };
  s0 -> s0 [0, 65535] { R9309 += 1, R9310 += 1 };
  s0 -> s4 [63, 63] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R9310 += 1, R8912 += 1 };
  s1 -> s6 [0, 65535] { R9310 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R9310 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R9310 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R9310 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R9310 += 1, R8911 += 1, R8912 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R9310 += 1, R8912 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9310 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9310 += 1, R8912 += 1 };
  s7 -> s6 [0, 65535] { R9310 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9311 += 1, R9312 += 1 };
  s0 -> s1 [0, 65535] { R9312 += 1, R8913 += 1, R8914 += 1 };
  s0 -> s2 [0, 65535] { R9312 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R9312 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R9312 += 1, R8913 += 1, R8914 += 1 };
  s1 -> s2 [0, 65535] { R9312 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R9312 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9312 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535] { R9312 += 1 };
  s2 -> s6 [0, 65535] { R9312 += 1, R8914 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9312 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R9312 += 1 };
  s3 -> s3 [0, 65535] { R9312 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9312 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R9312 += 1 };
  s6 -> s6 [0, 65535] { R9312 += 1, R8914 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R9314 += 1, R9268 += 1 };
  s0 -> s2 [0, 65535] { R9314 += 1, R9267 += 1, R9268 += 1 };
  s0 -> s0 [0, 65535] { R9313 += 1, R9314 += 1 };
  s0 -> s1 [45, 63] { R9314 += 1, R9268 += 1 };
  s0 -> s3 [87, 87] { R9314 += 1, R9268 += 1 };
  s0 -> s1 [88, 65535] { R9314 += 1, R9268 += 1 };
  s1 -> s1 [0, 43] { R9314 += 1, R9268 += 1 };
  s1 -> s1 [45, 63] { R9314 += 1, R9268 += 1 };
  s1 -> s3 [87, 87] { R9314 += 1, R9268 += 1 };
  s1 -> s1 [88, 65535] { R9314 += 1, R9268 += 1 };
  s2 -> s1 [0, 43] { R9314 += 1, R9268 += 1 };
  s2 -> s2 [0, 65535] { R9314 += 1, R9267 += 1, R9268 += 1 };
  s2 -> s1 [45, 63] { R9314 += 1, R9268 += 1 };
  s2 -> s3 [87, 87] { R9314 += 1, R9268 += 1 };
  s2 -> s1 [88, 65535] { R9314 += 1, R9268 += 1 };
  s3 -> s3 [0, 43] { R9314 += 1, R9268 += 1 };
  s3 -> s3 [0, 65535] { R9314 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R9314 += 1, R9268 += 1 };
  s3 -> s3 [87, 65535] { R9314 += 1, R9268 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R9316 += 1, R9269 += 1, R9270 += 1 };
  s0 -> s0 [0, 65535] { R9315 += 1, R9316 += 1 };
  s0 -> s2 [0, 65535] { R9316 += 1, R9270 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R9316 += 1, R9269 += 1, R9270 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9316 += 1, R9270 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R9316 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9316 += 1, R9270 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R9316 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R9318 += 1, R9272 += 1 };
  s0 -> s2 [0, 65535] { R9318 += 1, R9272 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R9318 += 1, R9271 += 1, R9272 += 1 };
  s0 -> s0 [0, 65535] { R9317 += 1, R9318 += 1 };
  s0 -> s4 [58, 58] { R9318 += 1, R9272 += 1 };
  s0 -> s1 [59, 65535] { R9318 += 1, R9272 += 1 };
  s1 -> s1 [0, 57] { R9318 += 1, R9272 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9318 += 1 };
  s1 -> s4 [58, 58] { R9318 += 1, R9272 += 1 };
  s1 -> s1 [59, 65535] { R9318 += 1, R9272 += 1 };
  s2 -> s1 [0, 57] { R9318 += 1, R9272 += 1 };
  s2 -> s2 [0, 65535] { R9318 += 1, R9272 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9318 += 1 };
  s2 -> s4 [58, 58] { R9318 += 1, R9272 += 1 };
  s2 -> s1 [59, 65535] { R9318 += 1, R9272 += 1 };
  s3 -> s1 [0, 57] { R9318 += 1, R9272 += 1 };
  s3 -> s2 [0, 65535] { R9318 += 1, R9272 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9318 += 1, R9271 += 1, R9272 += 1 };
  s3 -> s4 [58, 58] { R9318 += 1, R9272 += 1 };
  s3 -> s1 [59, 65535] { R9318 += 1, R9272 += 1 };
  s4 -> s4 [0, 65535] { R9318 += 1, R9272 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9318 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R9320 += 1, R9274 += 1 };
  s0 -> s2 [0, 65535] { R9320 += 1, R9274 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R9320 += 1, R9273 += 1, R9274 += 1 };
  s0 -> s0 [0, 65535] { R9319 += 1, R9320 += 1 };
  s0 -> s4 [87, 87] { R9320 += 1, R9274 += 1 };
  s0 -> s1 [88, 65535] { R9320 += 1, R9274 += 1 };
  s1 -> s1 [0, 86] { R9320 += 1, R9274 += 1 };
  s1 -> s1 [0, 65535] { R9320 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R9320 += 1, R9274 += 1 };
  s1 -> s1 [88, 65535] { R9320 += 1, R9274 += 1 };
  s2 -> s1 [0, 86] { R9320 += 1, R9274 += 1 };
  s2 -> s2 [0, 65535] { R9320 += 1, R9274 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9320 += 1 };
  s2 -> s4 [87, 87] { R9320 += 1, R9274 += 1 };
  s2 -> s1 [88, 65535] { R9320 += 1, R9274 += 1 };
  s3 -> s1 [0, 86] { R9320 += 1, R9274 += 1 };
  s3 -> s2 [0, 65535] { R9320 += 1, R9274 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R9320 += 1, R9273 += 1, R9274 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [87, 87] { R9320 += 1, R9274 += 1 };
  s3 -> s1 [88, 65535] { R9320 += 1, R9274 += 1 };
  s4 -> s4 [0, 65535] { R9320 += 1, R9274 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9320 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R9322 += 1, R9275 += 1, R9276 += 1 };
  s0 -> s0 [0, 65535] { R9321 += 1, R9322 += 1 };
  s0 -> s3 [0, 65535] { R9322 += 1, R9276 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9322 += 1 };
  s1 -> s7 [0, 65535] { R9322 += 1, R9276 += 1 };
  s1 -> s1 [0, 65535] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R9322 += 1, R9275 += 1, R9276 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9322 += 1, R9276 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9322 += 1 };
  s3 -> s3 [0, 65535] { R9322 += 1, R9276 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R9322 += 1, R9276 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9322 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9322 += 1 };
  s7 -> s7 [0, 65535] { R9322 += 1, R9276 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9324 += 1, R9278 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R9323 += 1, R9324 += 1 };
  s0 -> s2 [0, 65535] { R9324 += 1, R9278 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R9324 += 1, R9277 += 1, R9278 += 1 };
  s1 -> s1 [0, 65535] { R9324 += 1, R9278 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R9324 += 1 };
  s1 -> s6 [0, 65535] { R9324 += 1, R9278 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9324 += 1, R9278 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R9324 += 1 };
  s2 -> s2 [0, 65535] { R9324 += 1, R9278 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9324 += 1, R9278 += 1, R5998 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R9324 += 1, R9278 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s3 [0, 65535] { R9324 += 1, R9277 += 1, R9278 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9324 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9324 += 1 };
  s6 -> s6 [0, 65535] { R9324 += 1, R9278 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R9325 += 1, R9326 += 1 };
  s0 -> s1 [0, 65535] { R9326 += 1, R9280 += 1, R9243 += 1, R9244 += 1 };
  s0 -> s2 [0, 65535] { R9326 += 1, R9279 += 1, R9280 += 1 };
  s0 -> s3 [0, 65535] { R9326 += 1, R9280 += 1, R9244 += 1, R5990 += 1 };
  s1 -> s1 [0, 65535] { R9326 += 1, R9280 += 1, R9243 += 1, R9244 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R9326 += 1, R9280 += 1, R9244 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R9326 += 1 };
  s2 -> s1 [0, 65535] { R9326 += 1, R9280 += 1, R9243 += 1, R9244 += 1 };
  s2 -> s2 [0, 65535] { R9326 += 1, R9279 += 1, R9280 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9326 += 1, R9280 += 1, R9244 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R9326 += 1, R9280 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9326 += 1, R9280 += 1, R9244 += 1, R5990 += 1 };
  s3 -> s6 [0, 65535] { R9326 += 1 };
  s4 -> s4 [0, 65535] { R9326 += 1, R9280 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9326 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9326 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9328 += 1, R9281 += 1, R9282 += 1 };
  s0 -> s0 [0, 65535] { R9327 += 1, R9328 += 1 };
  s0 -> s2 [0, 65535] { R9328 += 1, R9282 += 1, R9245 += 1, R9246 += 1 };
  s0 -> s3 [108, 108] { R9328 += 1, R9282 += 1, R9246 += 1 };
  s1 -> s1 [0, 65535] { R9328 += 1, R9281 += 1, R9282 += 1 };
  s1 -> s2 [0, 65535] { R9328 += 1, R9282 += 1, R9245 += 1, R9246 += 1 };
  s1 -> s3 [108, 108] { R9328 += 1, R9282 += 1, R9246 += 1 };
  s2 -> s2 [0, 65535] { R9328 += 1, R9282 += 1, R9245 += 1, R9246 += 1 };
  s2 -> s3 [108, 108] { R9328 += 1, R9282 += 1, R9246 += 1 };
  s3 -> s4 [111, 111] { R9328 += 1, R9282 += 1, R9246 += 1 };
  s4 -> s5 [99, 99] { R9328 += 1, R9282 += 1, R9246 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9328 += 1 };
  s5 -> s5 [0, 65535] { R9328 += 1, R9282 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9328 += 1 };
  accepting s5, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s0 -> s2 [0, 65535] { R9330 += 1, R9284 += 1, R9251 += 1, R9252 += 1 };
  s0 -> s3 [0, 65535] { R9330 += 1, R9283 += 1, R9284 += 1 };
  s0 -> s0 [0, 65535] { R9329 += 1, R9330 += 1 };
  s0 -> s4 [87, 87] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s0 -> s1 [88, 65535] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s1 -> s1 [0, 86] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s1 -> s4 [87, 87] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s1 -> s1 [88, 65535] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s2 -> s1 [0, 86] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s2 -> s2 [0, 65535] { R9330 += 1, R9284 += 1, R9251 += 1, R9252 += 1 };
  s2 -> s4 [87, 87] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s2 -> s1 [88, 65535] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s3 -> s1 [0, 86] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s3 -> s2 [0, 65535] { R9330 += 1, R9284 += 1, R9251 += 1, R9252 += 1 };
  s3 -> s3 [0, 65535] { R9330 += 1, R9283 += 1, R9284 += 1 };
  s3 -> s4 [87, 87] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s3 -> s1 [88, 65535] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9330 += 1, R9284 += 1 };
  s4 -> s7 [0, 65535] { R9330 += 1 };
  s4 -> s4 [0, 65535] { R9330 += 1, R9284 += 1, R9252 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9330 += 1, R9284 += 1 };
  s6 -> s7 [0, 65535] { R9330 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9330 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9332 += 1, R9286 += 1, R9253 += 1, R9254 += 1 };
  s0 -> s2 [0, 65535] { R9332 += 1, R9285 += 1, R9286 += 1 };
  s0 -> s3 [0, 65535] { R9332 += 1, R9286 += 1, R9254 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R9331 += 1, R9332 += 1 };
  s1 -> s1 [0, 65535] { R9332 += 1, R9286 += 1, R9253 += 1, R9254 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R9332 += 1, R9286 += 1, R9254 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R9332 += 1 };
  s2 -> s1 [0, 65535] { R9332 += 1, R9286 += 1, R9253 += 1, R9254 += 1 };
  s2 -> s2 [0, 65535] { R9332 += 1, R9285 += 1, R9286 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9332 += 1, R9286 += 1, R9254 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R9332 += 1, R9286 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9332 += 1, R9286 += 1, R9254 += 1, R1 += 1 };
  s3 -> s6 [0, 65535] { R9332 += 1 };
  s4 -> s4 [0, 65535] { R9332 += 1, R9286 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9332 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9332 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s0 -> s2 [0, 65535] { R9334 += 1, R9288 += 1, R9255 += 1, R9256 += 1 };
  s0 -> s0 [0, 65535] { R9333 += 1, R9334 += 1 };
  s0 -> s3 [0, 65535] { R9334 += 1, R9287 += 1, R9288 += 1 };
  s0 -> s4 [0, 65535] { R9334 += 1, R9288 += 1, R9256 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s0 -> s1 [88, 65535] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s1 -> s1 [0, 86] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R9334 += 1 };
  s1 -> s1 [0, 65535] { R9334 += 1, R9288 += 1 };
  s1 -> s5 [87, 87] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s1 -> s1 [88, 65535] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s2 -> s1 [0, 86] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s2 -> s2 [0, 65535] { R9334 += 1, R9288 += 1, R9255 += 1, R9256 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R9334 += 1 };
  s2 -> s4 [0, 65535] { R9334 += 1, R9288 += 1, R9256 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s2 -> s1 [88, 65535] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s3 -> s1 [0, 86] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s3 -> s2 [0, 65535] { R9334 += 1, R9288 += 1, R9255 += 1, R9256 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9334 += 1, R9287 += 1, R9288 += 1 };
  s3 -> s4 [0, 65535] { R9334 += 1, R9288 += 1, R9256 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s3 -> s1 [88, 65535] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s4 -> s1 [0, 86] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9334 += 1, R9288 += 1 };
  s4 -> s8 [0, 65535] { R9334 += 1 };
  s4 -> s4 [0, 65535] { R9334 += 1, R9288 += 1, R9256 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s4 -> s1 [88, 65535] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s5 -> s5 [0, 65535] { R9334 += 1, R9288 += 1, R9256 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9334 += 1, R9288 += 1 };
  s7 -> s8 [0, 65535] { R9334 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9334 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s0 -> s2 [0, 65535] { R9336 += 1, R9290 += 1, R9258 += 1, R9237 += 1, R9238 += 1 };
  s0 -> s3 [0, 65535] { R9336 += 1, R9289 += 1, R9290 += 1 };
  s0 -> s0 [0, 65535] { R9335 += 1, R9336 += 1 };
  s0 -> s4 [0, 65535] { R9336 += 1, R9290 += 1, R9257 += 1, R9258 += 1 };
  s0 -> s1 [88, 65535] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s1 -> s1 [0, 86] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s1 -> s1 [0, 65535] { R9336 += 1, R9290 += 1, R9258 += 1 };
  s1 -> s7 [0, 65535] { R9336 += 1, R9290 += 1 };
  s1 -> s5 [0, 65535] { R9336 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [88, 65535] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s2 -> s1 [0, 86] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s2 -> s2 [0, 65535] { R9336 += 1, R9290 += 1, R9258 += 1, R9237 += 1, R9238 += 1 };
  s2 -> s7 [0, 65535] { R9336 += 1, R9290 += 1 };
  s2 -> s5 [0, 65535] { R9336 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [88, 65535] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s3 -> s1 [0, 86] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s3 -> s2 [0, 65535] { R9336 += 1, R9290 += 1, R9258 += 1, R9237 += 1, R9238 += 1 };
  s3 -> s3 [0, 65535] { R9336 += 1, R9289 += 1, R9290 += 1 };
  s3 -> s4 [0, 65535] { R9336 += 1, R9290 += 1, R9257 += 1, R9258 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [88, 65535] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s4 -> s1 [0, 86] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s4 -> s2 [0, 65535] { R9336 += 1, R9290 += 1, R9258 += 1, R9237 += 1, R9238 += 1 };
  s4 -> s4 [0, 65535] { R9336 += 1, R9290 += 1, R9257 += 1, R9258 += 1 };
  s4 -> s5 [0, 65535] { R9336 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [88, 65535] { R9336 += 1, R9290 += 1, R9258 += 1, R9238 += 1 };
  s5 -> s5 [0, 65535] { R9336 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9336 += 1, R9290 += 1 };
  s7 -> s5 [0, 65535] { R9336 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1, R9240 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R9338 += 1, R9292 += 1, R9259 += 1, R9260 += 1 };
  s0 -> s0 [0, 65535] { R9337 += 1, R9338 += 1 };
  s0 -> s3 [0, 65535] { R9338 += 1, R9291 += 1, R9292 += 1 };
  s0 -> s4 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1, R9239 += 1, R9240 += 1 };
  s1 -> s6 [0, 65535] { R9338 += 1 };
  s1 -> s8 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1, R9240 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535] { R9338 += 1, R9292 += 1 };
  s2 -> s6 [0, 65535] { R9338 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1, R9240 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R9338 += 1, R9292 += 1, R9259 += 1, R9260 += 1 };
  s2 -> s4 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1, R9239 += 1, R9240 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1, R9240 += 1, R5988 += 1 };
  s3 -> s2 [0, 65535] { R9338 += 1, R9292 += 1, R9259 += 1, R9260 += 1 };
  s3 -> s3 [0, 65535] { R9338 += 1, R9291 += 1, R9292 += 1 };
  s3 -> s4 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1, R9239 += 1, R9240 += 1 };
  s4 -> s5 [0, 65535] { R9338 += 1, R9292 += 1 };
  s4 -> s6 [0, 65535] { R9338 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s1 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1, R9240 += 1, R5988 += 1 };
  s4 -> s4 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1, R9239 += 1, R9240 += 1 };
  s5 -> s6 [0, 65535] { R9338 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R9338 += 1, R9292 += 1 };
  s6 -> s6 [0, 65535] { R9338 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R9338 += 1 };
  s8 -> s8 [0, 65535] { R9338 += 1, R9292 += 1, R9260 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R9338 += 1, R9292 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9340 += 1, R9293 += 1, R9294 += 1 };
  s0 -> s0 [0, 65535] { R9339 += 1, R9340 += 1 };
  s0 -> s2 [0, 65535] { R9340 += 1, R9294 += 1, R9262 += 1, R9241 += 1, R9242 += 1 };
  s0 -> s3 [0, 65535] { R9340 += 1, R9294 += 1, R9261 += 1, R9262 += 1 };
  s0 -> s4 [111, 111] { R9340 += 1, R9294 += 1, R9262 += 1, R9242 += 1 };
  s1 -> s1 [0, 65535] { R9340 += 1, R9293 += 1, R9294 += 1 };
  s1 -> s2 [0, 65535] { R9340 += 1, R9294 += 1, R9262 += 1, R9241 += 1, R9242 += 1 };
  s1 -> s3 [0, 65535] { R9340 += 1, R9294 += 1, R9261 += 1, R9262 += 1 };
  s1 -> s4 [111, 111] { R9340 += 1, R9294 += 1, R9262 += 1, R9242 += 1 };
  s2 -> s2 [0, 65535] { R9340 += 1, R9294 += 1, R9262 += 1, R9241 += 1, R9242 += 1 };
  s2 -> s4 [111, 111] { R9340 += 1, R9294 += 1, R9262 += 1, R9242 += 1 };
  s3 -> s2 [0, 65535] { R9340 += 1, R9294 += 1, R9262 += 1, R9241 += 1, R9242 += 1 };
  s3 -> s3 [0, 65535] { R9340 += 1, R9294 += 1, R9261 += 1, R9262 += 1 };
  s3 -> s4 [111, 111] { R9340 += 1, R9294 += 1, R9262 += 1, R9242 += 1 };
  s4 -> s5 [115, 115] { R9340 += 1, R9294 += 1, R9262 += 1, R9242 += 1 };
  s5 -> s6 [116, 116] { R9340 += 1, R9294 += 1, R9262 += 1, R9242 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9340 += 1, R9294 += 1, R9262 += 1 };
  s6 -> s8 [0, 65535] { R9340 += 1 };
  s6 -> s9 [0, 65535] { R9340 += 1, R9294 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9340 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R9340 += 1 };
  s9 -> s9 [0, 65535] { R9340 += 1, R9294 += 1 };
  accepting s6, s7, s8, s9;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1, R9247 += 1, R9248 += 1 };
  s0 -> s0 [0, 65535] { R9341 += 1, R9342 += 1 };
  s0 -> s2 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1, R9248 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R9342 += 1, R9296 += 1, R9263 += 1, R9264 += 1 };
  s0 -> s4 [0, 65535] { R9342 += 1, R9295 += 1, R9296 += 1 };
  s1 -> s1 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1, R9247 += 1, R9248 += 1 };
  s1 -> s7 [0, 65535] { R9342 += 1, R9296 += 1 };
  s1 -> s6 [0, 65535] { R9342 += 1 };
  s1 -> s2 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1, R9248 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R9342 += 1, R9296 += 1 };
  s2 -> s6 [0, 65535] { R9342 += 1 };
  s2 -> s2 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1, R9248 += 1, R5989 += 1 };
  s2 -> s8 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1, R9247 += 1, R9248 += 1 };
  s3 -> s6 [0, 65535] { R9342 += 1 };
  s3 -> s2 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1, R9248 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R9342 += 1, R9296 += 1, R9263 += 1, R9264 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1, R9247 += 1, R9248 += 1 };
  s4 -> s2 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1, R9248 += 1, R5989 += 1 };
  s4 -> s3 [0, 65535] { R9342 += 1, R9296 += 1, R9263 += 1, R9264 += 1 };
  s4 -> s4 [0, 65535] { R9342 += 1, R9295 += 1, R9296 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9342 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9342 += 1, R9296 += 1 };
  s7 -> s6 [0, 65535] { R9342 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R9342 += 1, R9296 += 1 };
  s8 -> s6 [0, 65535] { R9342 += 1 };
  s8 -> s8 [0, 65535] { R9342 += 1, R9296 += 1, R9264 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R9343 += 1, R9344 += 1 };
  s0 -> s1 [0, 65535] { R9344 += 1, R9297 += 1, R9298 += 1 };
  s0 -> s2 [0, 65535] { R9344 += 1, R9298 += 1, R9265 += 1, R9266 += 1 };
  s0 -> s3 [0, 65535] { R9344 += 1, R9298 += 1, R9266 += 1, R9249 += 1, R9250 += 1 };
  s0 -> s4 [97, 97] { R9344 += 1, R9298 += 1, R9266 += 1, R9250 += 1 };
  s1 -> s1 [0, 65535] { R9344 += 1, R9297 += 1, R9298 += 1 };
  s1 -> s2 [0, 65535] { R9344 += 1, R9298 += 1, R9265 += 1, R9266 += 1 };
  s1 -> s3 [0, 65535] { R9344 += 1, R9298 += 1, R9266 += 1, R9249 += 1, R9250 += 1 };
  s1 -> s4 [97, 97] { R9344 += 1, R9298 += 1, R9266 += 1, R9250 += 1 };
  s2 -> s2 [0, 65535] { R9344 += 1, R9298 += 1, R9265 += 1, R9266 += 1 };
  s2 -> s3 [0, 65535] { R9344 += 1, R9298 += 1, R9266 += 1, R9249 += 1, R9250 += 1 };
  s2 -> s4 [97, 97] { R9344 += 1, R9298 += 1, R9266 += 1, R9250 += 1 };
  s3 -> s3 [0, 65535] { R9344 += 1, R9298 += 1, R9266 += 1, R9249 += 1, R9250 += 1 };
  s3 -> s4 [97, 97] { R9344 += 1, R9298 += 1, R9266 += 1, R9250 += 1 };
  s4 -> s5 [108, 108] { R9344 += 1, R9298 += 1, R9266 += 1, R9250 += 1 };
  s5 -> s6 [104, 104] { R9344 += 1, R9298 += 1, R9266 += 1, R9250 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R9344 += 1, R9298 += 1 };
  s6 -> s9 [0, 65535] { R9344 += 1 };
  s6 -> s6 [0, 65535] { R9344 += 1, R9298 += 1, R9266 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9344 += 1, R9298 += 1 };
  s8 -> s9 [0, 65535] { R9344 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R9344 += 1 };
  accepting s6, s7, s8, s9;
};
};
constraint R1 = R9242 && R2 = R9266 && R3 = R8914 && R4 = R9344 && R15 = 0 && R16 = R9298 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8907 - R9298 = 1 && R8908 = R8914 && R8909 - R9298 = 1 && R8910 = R8914 && R8911 - R9298 = 1 && R8912 = R8914 && R8913 - R9298 = 1 && R9241 = 0 && R9245 = 0 && R9246 = 0 && R9249 = 0 && R9250 = 0 && R9251 = 0 && R9252 = R9266 && R9253 = 0 && R9254 = R9266 && R9255 = 0 && R9256 = R9266 && R9257 = 0 && R9258 = R9266 && R9259 = 0 && R9260 = R9266 && R9261 = 0 && R9262 = R9266 && R9263 = 0 && R9264 = R9266 && R9265 = 0 && R9267 = 0 && R9268 = R9298 && R9269 = 0 && R9270 = R9298 && R9271 = 0 && R9272 = R9298 && R9273 = 0 && R9274 = R9298 && R9275 = 0 && R9276 = R9298 && R9277 = 0 && R9278 = R9298 && R9279 = 0 && R9280 = R9298 && R9281 = 0 && R9282 = R9298 && R9283 = 0 && R9284 = R9298 && R9285 = 0 && R9286 = R9298 && R9287 = 0 && R9288 = R9298 && R9289 = 0 && R9290 = R9298 && R9291 = 0 && R9292 = R9298 && R9293 = 0 && R9294 = R9298 && R9295 = 0 && R9296 = R9298 && R9297 = 0 && R9299 = 10 && R9300 = R9344 && R9301 = 10 && R9302 = R9344 && R9303 = 10 && R9304 = R9344 && R9305 = 10 && R9306 = R9344 && R9307 = 10 && R9308 = R9344 && R9309 = 10 && R9310 = R9344 && R9311 = 10 && R9312 = R9344 && R9313 = 10 && R9314 = R9344 && R9315 = 10 && R9316 = R9344 && R9317 = 10 && R9318 = R9344 && R9319 = 10 && R9320 = R9344 && R9321 = 10 && R9322 = R9344 && R9323 = 10 && R9324 = R9344 && R9325 = 10 && R9326 = R9344 && R9327 = 10 && R9328 = R9344 && R9329 = 10 && R9330 = R9344 && R9331 = 10 && R9332 = R9344 && R9333 = 10 && R9334 = R9344 && R9335 = 10 && R9336 = R9344 && R9337 = 10 && R9338 = R9344 && R9339 = 10 && R9340 = R9344 && R9341 = 10 && R9342 = R9344 && R9343 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R9298 < R8914 && -1 < R9242 && 0 < R9266 && -1 < R9298 && 9 < R9344 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R9237 != 0 || R9238 = R9242 || (R5988 = 0 && R9242 = 0)) && (R9239 != 0 || R9240 = R9242 || (R5988 = 0 && R9242 = 0)) && (R5989 = 0 || (R9247 = 0 && R9248 = 0)) && (R5990 = 0 || (R9243 = 0 && R9244 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R9237 = 0 || (R5988 = 0 && R9242 = 0)) && (R9239 = 0 || (R5988 = 0 && R9242 = 0));
// End of Parikh automata intersection problem
