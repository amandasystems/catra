// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R9453, R9454, R9455, R9456, R9457, R9458, R9459, R9460, R9461, R9462, R9463, R9464, R9465, R9466, R9467, R9468, R9469, R9470, R9471, R9472, R9473, R9474, R9475, R9476, R9477, R9478, R9479, R9480, R9481, R9482, R9483, R9484, R9485, R9486, R9487, R9488, R9489, R9490, R9491, R9492, R9493, R9494, R9495, R9496, R9497, R9498, R9499, R9500, R9501, R9502, R9503, R9504, R9505, R9506, R9507, R9508, R9509, R9510, R9511, R9512, R9513, R9514, R9515, R9516, R9517, R9518, R9519, R9520, R9521, R9522, R9523, R9524, R9525, R9526, R9527, R9528, R9529, R9530, R9531, R9532, R9533, R9534, R9535, R9536, R9537, R9538, R9539, R9540, R9541, R9542, R9543, R9544, R9545, R9546, R9547, R9548, R9549, R9550, R9551, R9552, R9553, R9554, R9555, R9556, R9557, R9558, R9559, R9560;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R9516 += 1 };
  s0 -> s0 [0, 65535] { R9515 += 1, R9516 += 1 };
  s0 -> s2 [46, 46] { R9516 += 1 };
  s0 -> s3 [47, 47] { R9516 += 1 };
  s0 -> s1 [48, 65535] { R9516 += 1 };
  s1 -> s1 [0, 45] { R9516 += 1 };
  s1 -> s2 [46, 46] { R9516 += 1 };
  s1 -> s3 [47, 47] { R9516 += 1 };
  s1 -> s1 [48, 65535] { R9516 += 1 };
  s2 -> s1 [0, 45] { R9516 += 1 };
  s2 -> s2 [46, 46] { R9516 += 1 };
  s2 -> s3 [47, 47] { R9516 += 1 };
  s2 -> s1 [48, 114] { R9516 += 1 };
  s2 -> s8 [115, 115] { R9516 += 1 };
  s2 -> s1 [116, 65535] { R9516 += 1 };
  s3 -> s3 [0, 45] { R9516 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R9516 += 1 };
  s3 -> s3 [47, 65535] { R9516 += 1 };
  s4 -> s3 [0, 45] { R9516 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R9516 += 1 };
  s4 -> s3 [47, 114] { R9516 += 1 };
  s4 -> s5 [115, 115] { R9516 += 1 };
  s4 -> s3 [116, 65535] { R9516 += 1 };
  s5 -> s3 [0, 45] { R9516 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R9516 += 1 };
  s5 -> s3 [47, 110] { R9516 += 1 };
  s5 -> s6 [111, 111] { R9516 += 1 };
  s5 -> s3 [112, 65535] { R9516 += 1 };
  s6 -> s3 [0, 45] { R9516 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R9516 += 1 };
  s6 -> s3 [47, 98] { R9516 += 1 };
  s6 -> s7 [99, 99] { R9516 += 1 };
  s6 -> s3 [100, 65535] { R9516 += 1 };
  s7 -> s3 [0, 45] { R9516 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R9516 += 1 };
  s7 -> s3 [47, 106] { R9516 += 1 };
  s7 -> s3 [108, 65535] { R9516 += 1 };
  s8 -> s1 [0, 45] { R9516 += 1 };
  s8 -> s2 [46, 46] { R9516 += 1 };
  s8 -> s3 [47, 47] { R9516 += 1 };
  s8 -> s1 [48, 110] { R9516 += 1 };
  s8 -> s9 [111, 111] { R9516 += 1 };
  s8 -> s1 [112, 65535] { R9516 += 1 };
  s9 -> s1 [0, 45] { R9516 += 1 };
  s9 -> s2 [46, 46] { R9516 += 1 };
  s9 -> s3 [47, 47] { R9516 += 1 };
  s9 -> s1 [48, 98] { R9516 += 1 };
  s9 -> s10 [99, 99] { R9516 += 1 };
  s9 -> s1 [100, 65535] { R9516 += 1 };
  s10 -> s1 [0, 45] { R9516 += 1 };
  s10 -> s2 [46, 46] { R9516 += 1 };
  s10 -> s3 [47, 47] { R9516 += 1 };
  s10 -> s1 [48, 106] { R9516 += 1 };
  s10 -> s1 [108, 65535] { R9516 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R9517 += 1, R9518 += 1 };
  s0 -> s1 [0, 65535] { R9518 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R9518 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R9520 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R9520 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R9519 += 1, R9520 += 1 };
  s0 -> s3 [47, 47] { R9520 += 1 };
  s0 -> s1 [48, 65535] { R9520 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R9520 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R9520 += 1 };
  s1 -> s1 [48, 65535] { R9520 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R9520 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R9520 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R9520 += 1 };
  s2 -> s1 [48, 65535] { R9520 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R9520 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R9522 += 1, R8908 += 1 };
  s0 -> s0 [0, 65535] { R9521 += 1, R9522 += 1 };
  s0 -> s2 [0, 65535] { R9522 += 1, R8907 += 1, R8908 += 1 };
  s0 -> s1 [38, 42] { R9522 += 1, R8908 += 1 };
  s0 -> s1 [44, 45] { R9522 += 1, R8908 += 1 };
  s0 -> s1 [47, 62] { R9522 += 1, R8908 += 1 };
  s0 -> s1 [64, 65535] { R9522 += 1, R8908 += 1 };
  s1 -> s1 [0, 36] { R9522 += 1, R8908 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9522 += 1 };
  s1 -> s1 [38, 42] { R9522 += 1, R8908 += 1 };
  s1 -> s1 [44, 45] { R9522 += 1, R8908 += 1 };
  s1 -> s1 [47, 62] { R9522 += 1, R8908 += 1 };
  s1 -> s1 [64, 65535] { R9522 += 1, R8908 += 1 };
  s2 -> s1 [0, 36] { R9522 += 1, R8908 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9522 += 1, R8907 += 1, R8908 += 1 };
  s2 -> s1 [38, 42] { R9522 += 1, R8908 += 1 };
  s2 -> s1 [44, 45] { R9522 += 1, R8908 += 1 };
  s2 -> s1 [47, 62] { R9522 += 1, R8908 += 1 };
  s2 -> s1 [64, 65535] { R9522 += 1, R8908 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R9524 += 1, R8910 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R9523 += 1, R9524 += 1 };
  s0 -> s2 [0, 65535] { R9524 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s1 [0, 65535] { R9524 += 1, R8910 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9524 += 1 };
  s2 -> s1 [0, 65535] { R9524 += 1, R8910 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9524 += 1, R8909 += 1, R8910 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9524 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R9526 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R9525 += 1, R9526 += 1 };
  s0 -> s3 [0, 65535] { R9526 += 1, R8911 += 1, R8912 += 1 };
  s0 -> s4 [63, 63] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R9526 += 1, R8912 += 1 };
  s1 -> s6 [0, 65535] { R9526 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R9526 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R9526 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R9526 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9526 += 1, R8911 += 1, R8912 += 1 };
  s3 -> s4 [63, 63] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R9526 += 1, R8912 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9526 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9526 += 1, R8912 += 1 };
  s7 -> s6 [0, 65535] { R9526 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9528 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R9528 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R9528 += 1, R8913 += 1, R8914 += 1 };
  s0 -> s0 [0, 65535] { R9527 += 1, R9528 += 1 };
  s1 -> s1 [0, 65535] { R9528 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R9528 += 1, R8914 += 1 };
  s1 -> s5 [0, 65535] { R9528 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9528 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R9528 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535] { R9528 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9528 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R9528 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s3 [0, 65535] { R9528 += 1, R8913 += 1, R8914 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9528 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9528 += 1, R8914 += 1 };
  s6 -> s5 [0, 65535] { R9528 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R9530 += 1, R9484 += 1 };
  s0 -> s2 [0, 65535] { R9530 += 1, R9483 += 1, R9484 += 1 };
  s0 -> s0 [0, 65535] { R9529 += 1, R9530 += 1 };
  s0 -> s1 [45, 63] { R9530 += 1, R9484 += 1 };
  s0 -> s3 [87, 87] { R9530 += 1, R9484 += 1 };
  s0 -> s1 [88, 65535] { R9530 += 1, R9484 += 1 };
  s1 -> s1 [0, 43] { R9530 += 1, R9484 += 1 };
  s1 -> s1 [45, 63] { R9530 += 1, R9484 += 1 };
  s1 -> s3 [87, 87] { R9530 += 1, R9484 += 1 };
  s1 -> s1 [88, 65535] { R9530 += 1, R9484 += 1 };
  s2 -> s1 [0, 43] { R9530 += 1, R9484 += 1 };
  s2 -> s2 [0, 65535] { R9530 += 1, R9483 += 1, R9484 += 1 };
  s2 -> s1 [45, 63] { R9530 += 1, R9484 += 1 };
  s2 -> s3 [87, 87] { R9530 += 1, R9484 += 1 };
  s2 -> s1 [88, 65535] { R9530 += 1, R9484 += 1 };
  s3 -> s3 [0, 43] { R9530 += 1, R9484 += 1 };
  s3 -> s3 [0, 65535] { R9530 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R9530 += 1, R9484 += 1 };
  s3 -> s3 [87, 65535] { R9530 += 1, R9484 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R9531 += 1, R9532 += 1 };
  s0 -> s1 [0, 65535] { R9532 += 1, R9485 += 1, R9486 += 1 };
  s0 -> s2 [0, 65535] { R9532 += 1, R9486 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R9532 += 1, R9485 += 1, R9486 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9532 += 1, R9486 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R9532 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9532 += 1, R9486 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R9532 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R9534 += 1, R9488 += 1 };
  s0 -> s2 [0, 65535] { R9534 += 1, R9487 += 1, R9488 += 1 };
  s0 -> s0 [0, 65535] { R9533 += 1, R9534 += 1 };
  s0 -> s3 [0, 65535] { R9534 += 1, R9488 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R9534 += 1, R9488 += 1 };
  s0 -> s1 [59, 65535] { R9534 += 1, R9488 += 1 };
  s1 -> s1 [0, 57] { R9534 += 1, R9488 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9534 += 1 };
  s1 -> s4 [58, 58] { R9534 += 1, R9488 += 1 };
  s1 -> s1 [59, 65535] { R9534 += 1, R9488 += 1 };
  s2 -> s1 [0, 57] { R9534 += 1, R9488 += 1 };
  s2 -> s2 [0, 65535] { R9534 += 1, R9487 += 1, R9488 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9534 += 1, R9488 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R9534 += 1, R9488 += 1 };
  s2 -> s1 [59, 65535] { R9534 += 1, R9488 += 1 };
  s3 -> s1 [0, 57] { R9534 += 1, R9488 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9534 += 1, R9488 += 1, R10 += 1 };
  s3 -> s6 [0, 65535] { R9534 += 1 };
  s3 -> s4 [58, 58] { R9534 += 1, R9488 += 1 };
  s3 -> s1 [59, 65535] { R9534 += 1, R9488 += 1 };
  s4 -> s4 [0, 65535] { R9534 += 1, R9488 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9534 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R9536 += 1, R9490 += 1 };
  s0 -> s2 [0, 65535] { R9536 += 1, R9490 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R9535 += 1, R9536 += 1 };
  s0 -> s3 [0, 65535] { R9536 += 1, R9489 += 1, R9490 += 1 };
  s0 -> s4 [87, 87] { R9536 += 1, R9490 += 1 };
  s0 -> s1 [88, 65535] { R9536 += 1, R9490 += 1 };
  s1 -> s1 [0, 86] { R9536 += 1, R9490 += 1 };
  s1 -> s1 [0, 65535] { R9536 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R9536 += 1, R9490 += 1 };
  s1 -> s1 [88, 65535] { R9536 += 1, R9490 += 1 };
  s2 -> s1 [0, 86] { R9536 += 1, R9490 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9536 += 1, R9490 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R9536 += 1 };
  s2 -> s4 [87, 87] { R9536 += 1, R9490 += 1 };
  s2 -> s1 [88, 65535] { R9536 += 1, R9490 += 1 };
  s3 -> s1 [0, 86] { R9536 += 1, R9490 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9536 += 1, R9490 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R9536 += 1, R9489 += 1, R9490 += 1 };
  s3 -> s4 [87, 87] { R9536 += 1, R9490 += 1 };
  s3 -> s1 [88, 65535] { R9536 += 1, R9490 += 1 };
  s4 -> s4 [0, 65535] { R9536 += 1, R9490 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9536 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R9538 += 1, R9492 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R9538 += 1, R9491 += 1, R9492 += 1 };
  s0 -> s0 [0, 65535] { R9537 += 1, R9538 += 1 };
  s0 -> s4 [91, 91] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9538 += 1 };
  s1 -> s7 [0, 65535] { R9538 += 1, R9492 += 1 };
  s1 -> s1 [0, 65535] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R9538 += 1, R9492 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9538 += 1 };
  s2 -> s4 [91, 91] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R9538 += 1, R9492 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9538 += 1, R9491 += 1, R9492 += 1 };
  s3 -> s4 [91, 91] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R9538 += 1, R9492 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9538 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9538 += 1 };
  s7 -> s7 [0, 65535] { R9538 += 1, R9492 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9540 += 1, R9494 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R9539 += 1, R9540 += 1 };
  s0 -> s2 [0, 65535] { R9540 += 1, R9494 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R9540 += 1, R9493 += 1, R9494 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9540 += 1, R9494 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R9540 += 1 };
  s1 -> s6 [0, 65535] { R9540 += 1, R9494 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9540 += 1, R9494 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R9540 += 1, R9494 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s5 [0, 65535] { R9540 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9540 += 1, R9494 += 1, R5998 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R9540 += 1, R9494 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s3 [0, 65535] { R9540 += 1, R9493 += 1, R9494 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9540 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9540 += 1 };
  s6 -> s6 [0, 65535] { R9540 += 1, R9494 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9542 += 1, R9495 += 1, R9496 += 1 };
  s0 -> s2 [0, 65535] { R9542 += 1, R9496 += 1, R9460 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R9542 += 1, R9496 += 1, R9459 += 1, R9460 += 1 };
  s0 -> s0 [0, 65535] { R9541 += 1, R9542 += 1 };
  s1 -> s1 [0, 65535] { R9542 += 1, R9495 += 1, R9496 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9542 += 1, R9496 += 1, R9460 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R9542 += 1, R9496 += 1, R9459 += 1, R9460 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9542 += 1, R9496 += 1, R9460 += 1, R5990 += 1 };
  s2 -> s6 [0, 65535] { R9542 += 1, R9496 += 1 };
  s2 -> s5 [0, 65535] { R9542 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9542 += 1, R9496 += 1, R9460 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R9542 += 1, R9496 += 1, R9459 += 1, R9460 += 1 };
  s3 -> s5 [0, 65535] { R9542 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9542 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9542 += 1, R9496 += 1 };
  s6 -> s5 [0, 65535] { R9542 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9544 += 1, R9498 += 1, R9461 += 1, R9462 += 1 };
  s0 -> s0 [0, 65535] { R9543 += 1, R9544 += 1 };
  s0 -> s2 [0, 65535] { R9544 += 1, R9497 += 1, R9498 += 1 };
  s0 -> s3 [108, 108] { R9544 += 1, R9498 += 1, R9462 += 1 };
  s1 -> s1 [0, 65535] { R9544 += 1, R9498 += 1, R9461 += 1, R9462 += 1 };
  s1 -> s3 [108, 108] { R9544 += 1, R9498 += 1, R9462 += 1 };
  s2 -> s1 [0, 65535] { R9544 += 1, R9498 += 1, R9461 += 1, R9462 += 1 };
  s2 -> s2 [0, 65535] { R9544 += 1, R9497 += 1, R9498 += 1 };
  s2 -> s3 [108, 108] { R9544 += 1, R9498 += 1, R9462 += 1 };
  s3 -> s4 [111, 111] { R9544 += 1, R9498 += 1, R9462 += 1 };
  s4 -> s5 [99, 99] { R9544 += 1, R9498 += 1, R9462 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9544 += 1, R9498 += 1 };
  s5 -> s7 [0, 65535] { R9544 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9544 += 1 };
  accepting s5, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s0 -> s2 [0, 65535] { R9546 += 1, R9500 += 1, R9467 += 1, R9468 += 1 };
  s0 -> s3 [0, 65535] { R9546 += 1, R9499 += 1, R9500 += 1 };
  s0 -> s0 [0, 65535] { R9545 += 1, R9546 += 1 };
  s0 -> s4 [87, 87] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s0 -> s1 [88, 65535] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s1 -> s1 [0, 86] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s1 -> s4 [87, 87] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s1 -> s1 [88, 65535] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s2 -> s1 [0, 86] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s2 -> s2 [0, 65535] { R9546 += 1, R9500 += 1, R9467 += 1, R9468 += 1 };
  s2 -> s4 [87, 87] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s2 -> s1 [88, 65535] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s3 -> s1 [0, 86] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s3 -> s2 [0, 65535] { R9546 += 1, R9500 += 1, R9467 += 1, R9468 += 1 };
  s3 -> s3 [0, 65535] { R9546 += 1, R9499 += 1, R9500 += 1 };
  s3 -> s4 [87, 87] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s3 -> s1 [88, 65535] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s4 -> s5 [0, 65535] { R9546 += 1, R9500 += 1 };
  s4 -> s6 [0, 65535] { R9546 += 1 };
  s4 -> s4 [0, 65535] { R9546 += 1, R9500 += 1, R9468 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R9546 += 1, R9500 += 1 };
  s5 -> s6 [0, 65535] { R9546 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9546 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9548 += 1, R9502 += 1, R9469 += 1, R9470 += 1 };
  s0 -> s2 [0, 65535] { R9548 += 1, R9501 += 1, R9502 += 1 };
  s0 -> s0 [0, 65535] { R9547 += 1, R9548 += 1 };
  s0 -> s3 [0, 65535] { R9548 += 1, R9502 += 1, R9470 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R9548 += 1 };
  s1 -> s1 [0, 65535] { R9548 += 1, R9502 += 1, R9469 += 1, R9470 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R9548 += 1, R9502 += 1, R9470 += 1, R1 += 1 };
  s2 -> s1 [0, 65535] { R9548 += 1, R9502 += 1, R9469 += 1, R9470 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9548 += 1, R9501 += 1, R9502 += 1 };
  s2 -> s3 [0, 65535] { R9548 += 1, R9502 += 1, R9470 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R9548 += 1, R9502 += 1 };
  s3 -> s5 [0, 65535] { R9548 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9548 += 1, R9502 += 1, R9470 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R9548 += 1, R9502 += 1 };
  s4 -> s5 [0, 65535] { R9548 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9548 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s0 -> s2 [0, 65535] { R9550 += 1, R9504 += 1, R9472 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R9550 += 1, R9504 += 1, R9471 += 1, R9472 += 1 };
  s0 -> s0 [0, 65535] { R9549 += 1, R9550 += 1 };
  s0 -> s4 [0, 65535] { R9550 += 1, R9503 += 1, R9504 += 1 };
  s0 -> s5 [87, 87] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s0 -> s1 [88, 65535] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s1 -> s1 [0, 86] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s1 -> s7 [0, 65535] { R9550 += 1 };
  s1 -> s1 [0, 65535] { R9550 += 1, R9504 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [87, 87] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s1 -> s1 [88, 65535] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s2 -> s1 [0, 86] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s2 -> s7 [0, 65535] { R9550 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R9550 += 1, R9504 += 1 };
  s2 -> s2 [0, 65535] { R9550 += 1, R9504 += 1, R9472 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s2 -> s1 [88, 65535] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s3 -> s1 [0, 86] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s3 -> s7 [0, 65535] { R9550 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R9550 += 1, R9504 += 1, R9472 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R9550 += 1, R9504 += 1, R9471 += 1, R9472 += 1 };
  s3 -> s5 [87, 87] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s3 -> s1 [88, 65535] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s4 -> s1 [0, 86] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R9550 += 1, R9504 += 1, R9472 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R9550 += 1, R9504 += 1, R9471 += 1, R9472 += 1 };
  s4 -> s4 [0, 65535] { R9550 += 1, R9503 += 1, R9504 += 1 };
  s4 -> s5 [87, 87] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s4 -> s1 [88, 65535] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s5 -> s5 [0, 65535] { R9550 += 1, R9504 += 1, R9472 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9550 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9550 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9550 += 1, R9504 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s0 -> s0 [0, 65535] { R9551 += 1, R9552 += 1 };
  s0 -> s2 [0, 65535] { R9552 += 1, R9505 += 1, R9506 += 1 };
  s0 -> s3 [0, 65535] { R9552 += 1, R9506 += 1, R9473 += 1, R9474 += 1 };
  s0 -> s4 [0, 65535] { R9552 += 1, R9506 += 1, R9474 += 1, R9453 += 1, R9454 += 1 };
  s0 -> s1 [88, 65535] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s1 -> s1 [0, 86] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s1 -> s1 [0, 65535] { R9552 += 1, R9506 += 1, R9474 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9552 += 1, R9506 += 1 };
  s1 -> s7 [0, 65535] { R9552 += 1 };
  s1 -> s1 [88, 65535] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s2 -> s1 [0, 86] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9552 += 1, R9505 += 1, R9506 += 1 };
  s2 -> s3 [0, 65535] { R9552 += 1, R9506 += 1, R9473 += 1, R9474 += 1 };
  s2 -> s4 [0, 65535] { R9552 += 1, R9506 += 1, R9474 += 1, R9453 += 1, R9454 += 1 };
  s2 -> s1 [88, 65535] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s3 -> s1 [0, 86] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9552 += 1, R9506 += 1, R9473 += 1, R9474 += 1 };
  s3 -> s4 [0, 65535] { R9552 += 1, R9506 += 1, R9474 += 1, R9453 += 1, R9454 += 1 };
  s3 -> s7 [0, 65535] { R9552 += 1 };
  s3 -> s1 [88, 65535] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s4 -> s1 [0, 86] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9552 += 1, R9506 += 1, R9474 += 1, R9453 += 1, R9454 += 1 };
  s4 -> s6 [0, 65535] { R9552 += 1, R9506 += 1 };
  s4 -> s7 [0, 65535] { R9552 += 1 };
  s4 -> s1 [88, 65535] { R9552 += 1, R9506 += 1, R9474 += 1, R9454 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9552 += 1, R9506 += 1 };
  s6 -> s7 [0, 65535] { R9552 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9552 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1, R9455 += 1, R9456 += 1 };
  s0 -> s0 [0, 65535] { R9553 += 1, R9554 += 1 };
  s0 -> s2 [0, 65535] { R9554 += 1, R9507 += 1, R9508 += 1 };
  s0 -> s3 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1, R9456 += 1, R5988 += 1 };
  s0 -> s4 [0, 65535] { R9554 += 1, R9508 += 1, R9475 += 1, R9476 += 1 };
  s1 -> s5 [0, 65535] { R9554 += 1 };
  s1 -> s7 [0, 65535] { R9554 += 1, R9508 += 1 };
  s1 -> s1 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1, R9455 += 1, R9456 += 1 };
  s1 -> s3 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1, R9456 += 1, R5988 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1, R9455 += 1, R9456 += 1 };
  s2 -> s2 [0, 65535] { R9554 += 1, R9507 += 1, R9508 += 1 };
  s2 -> s3 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1, R9456 += 1, R5988 += 1 };
  s2 -> s4 [0, 65535] { R9554 += 1, R9508 += 1, R9475 += 1, R9476 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s5 [0, 65535] { R9554 += 1 };
  s3 -> s7 [0, 65535] { R9554 += 1, R9508 += 1 };
  s3 -> s8 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1 };
  s3 -> s3 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1, R9456 += 1, R5988 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9554 += 1 };
  s4 -> s1 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1, R9455 += 1, R9456 += 1 };
  s4 -> s3 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1, R9456 += 1, R5988 += 1 };
  s4 -> s4 [0, 65535] { R9554 += 1, R9508 += 1, R9475 += 1, R9476 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9554 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9554 += 1 };
  s7 -> s7 [0, 65535] { R9554 += 1, R9508 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s5 [0, 65535] { R9554 += 1 };
  s8 -> s7 [0, 65535] { R9554 += 1, R9508 += 1 };
  s8 -> s8 [0, 65535] { R9554 += 1, R9508 += 1, R9476 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9556 += 1, R9510 += 1, R9477 += 1, R9478 += 1 };
  s0 -> s2 [0, 65535] { R9556 += 1, R9510 += 1, R9478 += 1, R9457 += 1, R9458 += 1 };
  s0 -> s0 [0, 65535] { R9555 += 1, R9556 += 1 };
  s0 -> s3 [0, 65535] { R9556 += 1, R9509 += 1, R9510 += 1 };
  s0 -> s4 [108, 108] { R9556 += 1, R9510 += 1, R9478 += 1, R9458 += 1 };
  s1 -> s1 [0, 65535] { R9556 += 1, R9510 += 1, R9477 += 1, R9478 += 1 };
  s1 -> s2 [0, 65535] { R9556 += 1, R9510 += 1, R9478 += 1, R9457 += 1, R9458 += 1 };
  s1 -> s4 [108, 108] { R9556 += 1, R9510 += 1, R9478 += 1, R9458 += 1 };
  s2 -> s2 [0, 65535] { R9556 += 1, R9510 += 1, R9478 += 1, R9457 += 1, R9458 += 1 };
  s2 -> s4 [108, 108] { R9556 += 1, R9510 += 1, R9478 += 1, R9458 += 1 };
  s3 -> s1 [0, 65535] { R9556 += 1, R9510 += 1, R9477 += 1, R9478 += 1 };
  s3 -> s2 [0, 65535] { R9556 += 1, R9510 += 1, R9478 += 1, R9457 += 1, R9458 += 1 };
  s3 -> s3 [0, 65535] { R9556 += 1, R9509 += 1, R9510 += 1 };
  s3 -> s4 [108, 108] { R9556 += 1, R9510 += 1, R9478 += 1, R9458 += 1 };
  s4 -> s5 [104, 104] { R9556 += 1, R9510 += 1, R9478 += 1, R9458 += 1 };
  s5 -> s6 [111, 111] { R9556 += 1, R9510 += 1, R9478 += 1, R9458 += 1 };
  s6 -> s7 [115, 115] { R9556 += 1, R9510 += 1, R9478 += 1, R9458 += 1 };
  s7 -> s8 [116, 116] { R9556 += 1, R9510 += 1, R9478 += 1, R9458 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R9556 += 1, R9510 += 1, R9478 += 1 };
  s8 -> s10 [0, 65535] { R9556 += 1 };
  s8 -> s11 [0, 65535] { R9556 += 1, R9510 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9556 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s10 [0, 65535] { R9556 += 1 };
  s11 -> s11 [0, 65535] { R9556 += 1, R9510 += 1 };
  accepting s8, s9, s10, s11;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1, R9463 += 1, R9464 += 1 };
  s0 -> s2 [0, 65535] { R9558 += 1, R9511 += 1, R9512 += 1 };
  s0 -> s3 [0, 65535] { R9558 += 1, R9512 += 1, R9479 += 1, R9480 += 1 };
  s0 -> s4 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1, R9464 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R9557 += 1, R9558 += 1 };
  s1 -> s1 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1, R9463 += 1, R9464 += 1 };
  s1 -> s5 [0, 65535] { R9558 += 1, R9512 += 1 };
  s1 -> s6 [0, 65535] { R9558 += 1 };
  s1 -> s4 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1, R9464 += 1, R5989 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1, R9463 += 1, R9464 += 1 };
  s2 -> s2 [0, 65535] { R9558 += 1, R9511 += 1, R9512 += 1 };
  s2 -> s3 [0, 65535] { R9558 += 1, R9512 += 1, R9479 += 1, R9480 += 1 };
  s2 -> s4 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1, R9464 += 1, R5989 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s1 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1, R9463 += 1, R9464 += 1 };
  s3 -> s6 [0, 65535] { R9558 += 1 };
  s3 -> s3 [0, 65535] { R9558 += 1, R9512 += 1, R9479 += 1, R9480 += 1 };
  s3 -> s4 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1, R9464 += 1, R5989 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R9558 += 1, R9512 += 1 };
  s4 -> s6 [0, 65535] { R9558 += 1 };
  s4 -> s4 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1, R9464 += 1, R5989 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1 };
  s5 -> s5 [0, 65535] { R9558 += 1, R9512 += 1 };
  s5 -> s6 [0, 65535] { R9558 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9558 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R9558 += 1, R9512 += 1 };
  s8 -> s6 [0, 65535] { R9558 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9558 += 1, R9512 += 1, R9480 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9560 += 1, R9514 += 1, R9481 += 1, R9482 += 1 };
  s0 -> s2 [0, 65535] { R9560 += 1, R9514 += 1, R9482 += 1, R9465 += 1, R9466 += 1 };
  s0 -> s3 [0, 65535] { R9560 += 1, R9513 += 1, R9514 += 1 };
  s0 -> s0 [0, 65535] { R9559 += 1, R9560 += 1 };
  s0 -> s4 [97, 97] { R9560 += 1, R9514 += 1, R9482 += 1, R9466 += 1 };
  s1 -> s1 [0, 65535] { R9560 += 1, R9514 += 1, R9481 += 1, R9482 += 1 };
  s1 -> s2 [0, 65535] { R9560 += 1, R9514 += 1, R9482 += 1, R9465 += 1, R9466 += 1 };
  s1 -> s4 [97, 97] { R9560 += 1, R9514 += 1, R9482 += 1, R9466 += 1 };
  s2 -> s2 [0, 65535] { R9560 += 1, R9514 += 1, R9482 += 1, R9465 += 1, R9466 += 1 };
  s2 -> s4 [97, 97] { R9560 += 1, R9514 += 1, R9482 += 1, R9466 += 1 };
  s3 -> s1 [0, 65535] { R9560 += 1, R9514 += 1, R9481 += 1, R9482 += 1 };
  s3 -> s2 [0, 65535] { R9560 += 1, R9514 += 1, R9482 += 1, R9465 += 1, R9466 += 1 };
  s3 -> s3 [0, 65535] { R9560 += 1, R9513 += 1, R9514 += 1 };
  s3 -> s4 [97, 97] { R9560 += 1, R9514 += 1, R9482 += 1, R9466 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9560 += 1, R9514 += 1, R9482 += 1 };
  s4 -> s6 [0, 65535] { R9560 += 1, R9514 += 1 };
  s4 -> s7 [0, 65535] { R9560 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9560 += 1, R9514 += 1 };
  s6 -> s7 [0, 65535] { R9560 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9560 += 1 };
  accepting s4, s5, s6, s7;
};
};
constraint R1 = R9458 && R2 = R9482 && R3 = R8914 && R4 = R9560 && R15 = 0 && R16 = R9514 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8907 - R9514 = 1 && R8908 = R8914 && R8909 - R9514 = 1 && R8910 = R8914 && R8911 - R9514 = 1 && R8912 = R8914 && R8913 - R9514 = 1 && R9457 = 0 && R9461 = 0 && R9462 = 0 && R9465 = 0 && R9466 = 0 && R9467 = 0 && R9468 = R9482 && R9469 = 0 && R9470 = R9482 && R9471 = 0 && R9472 = R9482 && R9473 = 0 && R9474 = R9482 && R9475 = 0 && R9476 = R9482 && R9477 = 0 && R9478 = R9482 && R9479 = 0 && R9480 = R9482 && R9481 = 0 && R9483 = 0 && R9484 = R9514 && R9485 = 0 && R9486 = R9514 && R9487 = 0 && R9488 = R9514 && R9489 = 0 && R9490 = R9514 && R9491 = 0 && R9492 = R9514 && R9493 = 0 && R9494 = R9514 && R9495 = 0 && R9496 = R9514 && R9497 = 0 && R9498 = R9514 && R9499 = 0 && R9500 = R9514 && R9501 = 0 && R9502 = R9514 && R9503 = 0 && R9504 = R9514 && R9505 = 0 && R9506 = R9514 && R9507 = 0 && R9508 = R9514 && R9509 = 0 && R9510 = R9514 && R9511 = 0 && R9512 = R9514 && R9513 = 0 && R9515 = 10 && R9516 = R9560 && R9517 = 10 && R9518 = R9560 && R9519 = 10 && R9520 = R9560 && R9521 = 10 && R9522 = R9560 && R9523 = 10 && R9524 = R9560 && R9525 = 10 && R9526 = R9560 && R9527 = 10 && R9528 = R9560 && R9529 = 10 && R9530 = R9560 && R9531 = 10 && R9532 = R9560 && R9533 = 10 && R9534 = R9560 && R9535 = 10 && R9536 = R9560 && R9537 = 10 && R9538 = R9560 && R9539 = 10 && R9540 = R9560 && R9541 = 10 && R9542 = R9560 && R9543 = 10 && R9544 = R9560 && R9545 = 10 && R9546 = R9560 && R9547 = 10 && R9548 = R9560 && R9549 = 10 && R9550 = R9560 && R9551 = 10 && R9552 = R9560 && R9553 = 10 && R9554 = R9560 && R9555 = 10 && R9556 = R9560 && R9557 = 10 && R9558 = R9560 && R9559 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R9514 < R8914 && -1 < R9458 && 0 < R9482 && -1 < R9514 && 9 < R9560 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R9453 != 0 || R9454 = R9458 || (R5988 = 0 && R9458 = 0)) && (R9455 != 0 || R9456 = R9458 || (R5988 = 0 && R9458 = 0)) && (R5989 = 0 || (R9463 = 0 && R9464 = 0)) && (R5990 = 0 || (R9459 = 0 && R9460 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R9453 = 0 || (R5988 = 0 && R9458 = 0)) && (R9455 = 0 || (R5988 = 0 && R9458 = 0));
// End of Parikh automata intersection problem
