// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8477, R8478, R8479, R8480, R8481, R8482, R8483, R8484, R8485, R8486, R8487, R8488, R8489, R8490, R8491, R8492, R8493, R8494, R8495, R8496, R8497, R8498, R8499, R8500, R8501, R8502, R8503, R8504, R8505, R8506, R8507, R8508, R8509, R8510, R8511, R8512, R8513, R8514, R8515, R8516, R8517, R8518, R8519, R8520, R8521, R8522, R8523, R8524, R8525, R8526, R8527, R8528, R8529, R8530, R8531, R8532, R8533, R8534, R8535, R8536, R8537, R8538, R8539, R8540, R8541, R8542, R8543, R8544, R8545, R8546, R8547, R8548, R8549, R8550, R8551, R8552, R8553, R8554, R8555, R8556, R8557, R8558, R8559, R8560, R8561, R8562, R8563, R8564, R8565, R8566, R8567, R8568, R8569, R8570, R8571, R8572, R8573, R8574, R8575, R8576, R8577, R8578, R8579, R8580, R8581, R8582, R8583, R8584;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R8540 += 1 };
  s0 -> s0 [0, 65535] { R8539 += 1, R8540 += 1 };
  s0 -> s2 [46, 46] { R8540 += 1 };
  s0 -> s3 [47, 47] { R8540 += 1 };
  s0 -> s1 [48, 65535] { R8540 += 1 };
  s1 -> s1 [0, 45] { R8540 += 1 };
  s1 -> s2 [46, 46] { R8540 += 1 };
  s1 -> s3 [47, 47] { R8540 += 1 };
  s1 -> s1 [48, 65535] { R8540 += 1 };
  s2 -> s1 [0, 45] { R8540 += 1 };
  s2 -> s2 [46, 46] { R8540 += 1 };
  s2 -> s3 [47, 47] { R8540 += 1 };
  s2 -> s1 [48, 114] { R8540 += 1 };
  s2 -> s8 [115, 115] { R8540 += 1 };
  s2 -> s1 [116, 65535] { R8540 += 1 };
  s3 -> s3 [0, 45] { R8540 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R8540 += 1 };
  s3 -> s3 [47, 65535] { R8540 += 1 };
  s4 -> s3 [0, 45] { R8540 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R8540 += 1 };
  s4 -> s3 [47, 114] { R8540 += 1 };
  s4 -> s5 [115, 115] { R8540 += 1 };
  s4 -> s3 [116, 65535] { R8540 += 1 };
  s5 -> s3 [0, 45] { R8540 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R8540 += 1 };
  s5 -> s3 [47, 110] { R8540 += 1 };
  s5 -> s6 [111, 111] { R8540 += 1 };
  s5 -> s3 [112, 65535] { R8540 += 1 };
  s6 -> s3 [0, 45] { R8540 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R8540 += 1 };
  s6 -> s3 [47, 98] { R8540 += 1 };
  s6 -> s7 [99, 99] { R8540 += 1 };
  s6 -> s3 [100, 65535] { R8540 += 1 };
  s7 -> s3 [0, 45] { R8540 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R8540 += 1 };
  s7 -> s3 [47, 106] { R8540 += 1 };
  s7 -> s3 [108, 65535] { R8540 += 1 };
  s8 -> s1 [0, 45] { R8540 += 1 };
  s8 -> s2 [46, 46] { R8540 += 1 };
  s8 -> s3 [47, 47] { R8540 += 1 };
  s8 -> s1 [48, 110] { R8540 += 1 };
  s8 -> s9 [111, 111] { R8540 += 1 };
  s8 -> s1 [112, 65535] { R8540 += 1 };
  s9 -> s1 [0, 45] { R8540 += 1 };
  s9 -> s2 [46, 46] { R8540 += 1 };
  s9 -> s3 [47, 47] { R8540 += 1 };
  s9 -> s1 [48, 98] { R8540 += 1 };
  s9 -> s10 [99, 99] { R8540 += 1 };
  s9 -> s1 [100, 65535] { R8540 += 1 };
  s10 -> s1 [0, 45] { R8540 += 1 };
  s10 -> s2 [46, 46] { R8540 += 1 };
  s10 -> s3 [47, 47] { R8540 += 1 };
  s10 -> s1 [48, 106] { R8540 += 1 };
  s10 -> s1 [108, 65535] { R8540 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R8542 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R8541 += 1, R8542 += 1 };
  s1 -> s1 [0, 65535] { R8542 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R8544 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R8544 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8543 += 1, R8544 += 1 };
  s0 -> s3 [47, 47] { R8544 += 1 };
  s0 -> s1 [48, 65535] { R8544 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R8544 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R8544 += 1 };
  s1 -> s1 [48, 65535] { R8544 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R8544 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R8544 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R8544 += 1 };
  s2 -> s1 [48, 65535] { R8544 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8544 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8546 += 1, R8040 += 1 };
  s0 -> s0 [0, 65535] { R8545 += 1, R8546 += 1 };
  s0 -> s2 [0, 65535] { R8546 += 1, R8039 += 1, R8040 += 1 };
  s0 -> s1 [38, 42] { R8546 += 1, R8040 += 1 };
  s0 -> s1 [44, 45] { R8546 += 1, R8040 += 1 };
  s0 -> s1 [47, 62] { R8546 += 1, R8040 += 1 };
  s0 -> s1 [64, 65535] { R8546 += 1, R8040 += 1 };
  s1 -> s1 [0, 36] { R8546 += 1, R8040 += 1 };
  s1 -> s1 [0, 65535] { R8546 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R8546 += 1, R8040 += 1 };
  s1 -> s1 [44, 45] { R8546 += 1, R8040 += 1 };
  s1 -> s1 [47, 62] { R8546 += 1, R8040 += 1 };
  s1 -> s1 [64, 65535] { R8546 += 1, R8040 += 1 };
  s2 -> s1 [0, 36] { R8546 += 1, R8040 += 1 };
  s2 -> s2 [0, 65535] { R8546 += 1, R8039 += 1, R8040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R8546 += 1, R8040 += 1 };
  s2 -> s1 [44, 45] { R8546 += 1, R8040 += 1 };
  s2 -> s1 [47, 62] { R8546 += 1, R8040 += 1 };
  s2 -> s1 [64, 65535] { R8546 += 1, R8040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R8548 += 1, R8041 += 1, R8042 += 1 };
  s0 -> s2 [0, 65535] { R8548 += 1, R8042 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R8547 += 1, R8548 += 1 };
  s1 -> s1 [0, 65535] { R8548 += 1, R8041 += 1, R8042 += 1 };
  s1 -> s2 [0, 65535] { R8548 += 1, R8042 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8548 += 1 };
  s2 -> s2 [0, 65535] { R8548 += 1, R8042 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8548 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R8550 += 1, R8043 += 1, R8044 += 1 };
  s0 -> s3 [0, 65535] { R8550 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R8549 += 1, R8550 += 1 };
  s0 -> s4 [63, 63] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R8550 += 1, R8044 += 1 };
  s1 -> s6 [0, 65535] { R8550 += 1 };
  s2 -> s1 [0, 62] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R8550 += 1, R8043 += 1, R8044 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8550 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8550 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s6 [0, 65535] { R8550 += 1 };
  s3 -> s4 [63, 63] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8550 += 1, R8044 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8550 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8550 += 1, R8044 += 1 };
  s7 -> s6 [0, 65535] { R8550 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8552 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R8552 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s0 [0, 65535] { R8551 += 1, R8552 += 1 };
  s0 -> s3 [0, 65535] { R8552 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8552 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s6 [0, 65535] { R8552 += 1 };
  s1 -> s3 [0, 65535] { R8552 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8552 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s2 [0, 65535] { R8552 += 1, R8045 += 1, R8046 += 1 };
  s2 -> s3 [0, 65535] { R8552 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R8552 += 1, R8046 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8552 += 1 };
  s3 -> s3 [0, 65535] { R8552 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R8552 += 1, R8046 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8552 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8552 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8554 += 1, R8508 += 1 };
  s0 -> s2 [0, 65535] { R8554 += 1, R8507 += 1, R8508 += 1 };
  s0 -> s0 [0, 65535] { R8553 += 1, R8554 += 1 };
  s0 -> s1 [45, 63] { R8554 += 1, R8508 += 1 };
  s0 -> s3 [87, 87] { R8554 += 1, R8508 += 1 };
  s0 -> s1 [88, 65535] { R8554 += 1, R8508 += 1 };
  s1 -> s1 [0, 43] { R8554 += 1, R8508 += 1 };
  s1 -> s1 [45, 63] { R8554 += 1, R8508 += 1 };
  s1 -> s3 [87, 87] { R8554 += 1, R8508 += 1 };
  s1 -> s1 [88, 65535] { R8554 += 1, R8508 += 1 };
  s2 -> s1 [0, 43] { R8554 += 1, R8508 += 1 };
  s2 -> s2 [0, 65535] { R8554 += 1, R8507 += 1, R8508 += 1 };
  s2 -> s1 [45, 63] { R8554 += 1, R8508 += 1 };
  s2 -> s3 [87, 87] { R8554 += 1, R8508 += 1 };
  s2 -> s1 [88, 65535] { R8554 += 1, R8508 += 1 };
  s3 -> s3 [0, 43] { R8554 += 1, R8508 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8554 += 1 };
  s3 -> s3 [45, 63] { R8554 += 1, R8508 += 1 };
  s3 -> s3 [87, 65535] { R8554 += 1, R8508 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R8555 += 1, R8556 += 1 };
  s0 -> s1 [0, 65535] { R8556 += 1, R8509 += 1, R8510 += 1 };
  s0 -> s2 [0, 65535] { R8556 += 1, R8510 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8556 += 1, R8509 += 1, R8510 += 1 };
  s1 -> s2 [0, 65535] { R8556 += 1, R8510 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8556 += 1 };
  s2 -> s2 [0, 65535] { R8556 += 1, R8510 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8556 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8558 += 1, R8512 += 1 };
  s0 -> s0 [0, 65535] { R8557 += 1, R8558 += 1 };
  s0 -> s2 [0, 65535] { R8558 += 1, R8512 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R8558 += 1, R8511 += 1, R8512 += 1 };
  s0 -> s4 [58, 58] { R8558 += 1, R8512 += 1 };
  s0 -> s1 [59, 65535] { R8558 += 1, R8512 += 1 };
  s1 -> s1 [0, 57] { R8558 += 1, R8512 += 1 };
  s1 -> s1 [0, 65535] { R8558 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R8558 += 1, R8512 += 1 };
  s1 -> s1 [59, 65535] { R8558 += 1, R8512 += 1 };
  s2 -> s1 [0, 57] { R8558 += 1, R8512 += 1 };
  s2 -> s2 [0, 65535] { R8558 += 1, R8512 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R8558 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R8558 += 1, R8512 += 1 };
  s2 -> s1 [59, 65535] { R8558 += 1, R8512 += 1 };
  s3 -> s1 [0, 57] { R8558 += 1, R8512 += 1 };
  s3 -> s2 [0, 65535] { R8558 += 1, R8512 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R8558 += 1, R8511 += 1, R8512 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R8558 += 1, R8512 += 1 };
  s3 -> s1 [59, 65535] { R8558 += 1, R8512 += 1 };
  s4 -> s4 [0, 65535] { R8558 += 1, R8512 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8558 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R8560 += 1, R8514 += 1 };
  s0 -> s0 [0, 65535] { R8559 += 1, R8560 += 1 };
  s0 -> s2 [0, 65535] { R8560 += 1, R8513 += 1, R8514 += 1 };
  s0 -> s3 [0, 65535] { R8560 += 1, R8514 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R8560 += 1, R8514 += 1 };
  s0 -> s1 [88, 65535] { R8560 += 1, R8514 += 1 };
  s1 -> s1 [0, 86] { R8560 += 1, R8514 += 1 };
  s1 -> s1 [0, 65535] { R8560 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R8560 += 1, R8514 += 1 };
  s1 -> s1 [88, 65535] { R8560 += 1, R8514 += 1 };
  s2 -> s1 [0, 86] { R8560 += 1, R8514 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8560 += 1, R8513 += 1, R8514 += 1 };
  s2 -> s3 [0, 65535] { R8560 += 1, R8514 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R8560 += 1, R8514 += 1 };
  s2 -> s1 [88, 65535] { R8560 += 1, R8514 += 1 };
  s3 -> s1 [0, 86] { R8560 += 1, R8514 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8560 += 1 };
  s3 -> s3 [0, 65535] { R8560 += 1, R8514 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R8560 += 1, R8514 += 1 };
  s3 -> s1 [88, 65535] { R8560 += 1, R8514 += 1 };
  s4 -> s4 [0, 65535] { R8560 += 1, R8514 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8560 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8561 += 1, R8562 += 1 };
  s0 -> s2 [0, 65535] { R8562 += 1, R8515 += 1, R8516 += 1 };
  s0 -> s3 [0, 65535] { R8562 += 1, R8516 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R8562 += 1, R8516 += 1 };
  s1 -> s6 [0, 65535] { R8562 += 1 };
  s1 -> s1 [0, 65535] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8562 += 1, R8515 += 1, R8516 += 1 };
  s2 -> s3 [0, 65535] { R8562 += 1, R8516 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8562 += 1, R8516 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s6 [0, 65535] { R8562 += 1 };
  s3 -> s4 [91, 91] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8562 += 1, R8516 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8562 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8562 += 1, R8516 += 1 };
  s7 -> s6 [0, 65535] { R8562 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8564 += 1, R8518 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R8563 += 1, R8564 += 1 };
  s0 -> s2 [0, 65535] { R8564 += 1, R8517 += 1, R8518 += 1 };
  s0 -> s3 [0, 65535] { R8564 += 1, R8518 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s1 [0, 65535] { R8564 += 1, R8518 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R8564 += 1, R8518 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8564 += 1 };
  s2 -> s1 [0, 65535] { R8564 += 1, R8518 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R8564 += 1, R8517 += 1, R8518 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8564 += 1, R8518 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s1 [0, 65535] { R8564 += 1, R8518 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8564 += 1, R8518 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s5 [0, 65535] { R8564 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8564 += 1 };
  s6 -> s6 [0, 65535] { R8564 += 1, R8518 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8564 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8566 += 1, R8519 += 1, R8520 += 1 };
  s0 -> s2 [0, 65535] { R8566 += 1, R8520 += 1, R8483 += 1, R8484 += 1 };
  s0 -> s3 [0, 65535] { R8566 += 1, R8520 += 1, R8484 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R8565 += 1, R8566 += 1 };
  s1 -> s1 [0, 65535] { R8566 += 1, R8519 += 1, R8520 += 1 };
  s1 -> s2 [0, 65535] { R8566 += 1, R8520 += 1, R8483 += 1, R8484 += 1 };
  s1 -> s3 [0, 65535] { R8566 += 1, R8520 += 1, R8484 += 1, R5990 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R8566 += 1 };
  s2 -> s2 [0, 65535] { R8566 += 1, R8520 += 1, R8483 += 1, R8484 += 1 };
  s2 -> s3 [0, 65535] { R8566 += 1, R8520 += 1, R8484 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R8566 += 1 };
  s3 -> s3 [0, 65535] { R8566 += 1, R8520 += 1, R8484 += 1, R5990 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8566 += 1, R8520 += 1 };
  s4 -> s4 [0, 65535] { R8566 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8566 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8566 += 1, R8520 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R8568 += 1, R8522 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s0 [0, 65535] { R8567 += 1, R8568 += 1 };
  s0 -> s2 [0, 65535] { R8568 += 1, R8521 += 1, R8522 += 1 };
  s0 -> s3 [108, 108] { R8568 += 1, R8522 += 1, R8486 += 1 };
  s1 -> s1 [0, 65535] { R8568 += 1, R8522 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s3 [108, 108] { R8568 += 1, R8522 += 1, R8486 += 1 };
  s2 -> s1 [0, 65535] { R8568 += 1, R8522 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s2 [0, 65535] { R8568 += 1, R8521 += 1, R8522 += 1 };
  s2 -> s3 [108, 108] { R8568 += 1, R8522 += 1, R8486 += 1 };
  s3 -> s4 [111, 111] { R8568 += 1, R8522 += 1, R8486 += 1 };
  s4 -> s4 [0, 65535] { R8568 += 1, R8522 += 1 };
  s4 -> s5 [0, 65535] { R8568 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8568 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s0 -> s2 [0, 65535] { R8570 += 1, R8524 += 1, R8491 += 1, R8492 += 1 };
  s0 -> s0 [0, 65535] { R8569 += 1, R8570 += 1 };
  s0 -> s3 [0, 65535] { R8570 += 1, R8523 += 1, R8524 += 1 };
  s0 -> s4 [87, 87] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s0 -> s1 [88, 65535] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s1 -> s1 [0, 86] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s1 -> s4 [87, 87] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s1 -> s1 [88, 65535] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s2 -> s1 [0, 86] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s2 -> s2 [0, 65535] { R8570 += 1, R8524 += 1, R8491 += 1, R8492 += 1 };
  s2 -> s4 [87, 87] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s2 -> s1 [88, 65535] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s3 -> s1 [0, 86] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s3 -> s2 [0, 65535] { R8570 += 1, R8524 += 1, R8491 += 1, R8492 += 1 };
  s3 -> s3 [0, 65535] { R8570 += 1, R8523 += 1, R8524 += 1 };
  s3 -> s4 [87, 87] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s3 -> s1 [88, 65535] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s4 -> s4 [0, 65535] { R8570 += 1, R8524 += 1, R8492 += 1 };
  s4 -> s5 [0, 65535] { R8570 += 1, R8524 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8570 += 1 };
  s5 -> s5 [0, 65535] { R8570 += 1, R8524 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8570 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8570 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8572 += 1, R8526 += 1, R8493 += 1, R8494 += 1 };
  s0 -> s2 [0, 65535] { R8572 += 1, R8526 += 1, R8494 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R8572 += 1, R8525 += 1, R8526 += 1 };
  s0 -> s0 [0, 65535] { R8571 += 1, R8572 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8572 += 1, R8526 += 1, R8493 += 1, R8494 += 1 };
  s1 -> s2 [0, 65535] { R8572 += 1, R8526 += 1, R8494 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R8572 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8572 += 1, R8526 += 1 };
  s2 -> s2 [0, 65535] { R8572 += 1, R8526 += 1, R8494 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R8572 += 1 };
  s3 -> s1 [0, 65535] { R8572 += 1, R8526 += 1, R8493 += 1, R8494 += 1 };
  s3 -> s2 [0, 65535] { R8572 += 1, R8526 += 1, R8494 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R8572 += 1, R8525 += 1, R8526 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8572 += 1, R8526 += 1 };
  s5 -> s6 [0, 65535] { R8572 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8572 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s0 -> s2 [0, 65535] { R8574 += 1, R8527 += 1, R8528 += 1 };
  s0 -> s3 [0, 65535] { R8574 += 1, R8528 += 1, R8496 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R8574 += 1, R8528 += 1, R8495 += 1, R8496 += 1 };
  s0 -> s0 [0, 65535] { R8573 += 1, R8574 += 1 };
  s0 -> s5 [87, 87] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s0 -> s1 [88, 65535] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s1 -> s1 [0, 86] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8574 += 1, R8528 += 1 };
  s1 -> s7 [0, 65535] { R8574 += 1 };
  s1 -> s5 [87, 87] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s1 -> s1 [88, 65535] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s2 -> s1 [0, 86] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8574 += 1, R8527 += 1, R8528 += 1 };
  s2 -> s3 [0, 65535] { R8574 += 1, R8528 += 1, R8496 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R8574 += 1, R8528 += 1, R8495 += 1, R8496 += 1 };
  s2 -> s5 [87, 87] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s2 -> s1 [88, 65535] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s3 -> s1 [0, 86] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R8574 += 1, R8528 += 1 };
  s3 -> s3 [0, 65535] { R8574 += 1, R8528 += 1, R8496 += 1, R7 += 1 };
  s3 -> s7 [0, 65535] { R8574 += 1 };
  s3 -> s5 [87, 87] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s3 -> s1 [88, 65535] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s4 -> s1 [0, 86] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R8574 += 1, R8528 += 1, R8496 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R8574 += 1, R8528 += 1, R8495 += 1, R8496 += 1 };
  s4 -> s7 [0, 65535] { R8574 += 1 };
  s4 -> s5 [87, 87] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s4 -> s1 [88, 65535] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s5 -> s5 [0, 65535] { R8574 += 1, R8528 += 1, R8496 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8574 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8574 += 1, R8528 += 1 };
  s8 -> s7 [0, 65535] { R8574 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s0 -> s2 [0, 65535] { R8576 += 1, R8530 += 1, R8498 += 1, R8477 += 1, R8478 += 1 };
  s0 -> s0 [0, 65535] { R8575 += 1, R8576 += 1 };
  s0 -> s3 [0, 65535] { R8576 += 1, R8530 += 1, R8497 += 1, R8498 += 1 };
  s0 -> s4 [0, 65535] { R8576 += 1, R8529 += 1, R8530 += 1 };
  s0 -> s1 [88, 65535] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s1 -> s1 [0, 86] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s1 -> s6 [0, 65535] { R8576 += 1 };
  s1 -> s7 [0, 65535] { R8576 += 1, R8530 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8576 += 1, R8530 += 1, R8498 += 1 };
  s1 -> s1 [88, 65535] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s2 -> s1 [0, 86] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s2 -> s6 [0, 65535] { R8576 += 1 };
  s2 -> s7 [0, 65535] { R8576 += 1, R8530 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8576 += 1, R8530 += 1, R8498 += 1, R8477 += 1, R8478 += 1 };
  s2 -> s1 [88, 65535] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s3 -> s1 [0, 86] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s3 -> s6 [0, 65535] { R8576 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8576 += 1, R8530 += 1, R8498 += 1, R8477 += 1, R8478 += 1 };
  s3 -> s3 [0, 65535] { R8576 += 1, R8530 += 1, R8497 += 1, R8498 += 1 };
  s3 -> s1 [88, 65535] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s4 -> s1 [0, 86] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R8576 += 1, R8530 += 1, R8498 += 1, R8477 += 1, R8478 += 1 };
  s4 -> s3 [0, 65535] { R8576 += 1, R8530 += 1, R8497 += 1, R8498 += 1 };
  s4 -> s4 [0, 65535] { R8576 += 1, R8529 += 1, R8530 += 1 };
  s4 -> s1 [88, 65535] { R8576 += 1, R8530 += 1, R8498 += 1, R8478 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8576 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8576 += 1 };
  s7 -> s7 [0, 65535] { R8576 += 1, R8530 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8578 += 1, R8531 += 1, R8532 += 1 };
  s0 -> s2 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1, R8479 += 1, R8480 += 1 };
  s0 -> s3 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1, R8480 += 1, R5988 += 1 };
  s0 -> s4 [0, 65535] { R8578 += 1, R8532 += 1, R8499 += 1, R8500 += 1 };
  s0 -> s0 [0, 65535] { R8577 += 1, R8578 += 1 };
  s1 -> s1 [0, 65535] { R8578 += 1, R8531 += 1, R8532 += 1 };
  s1 -> s2 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1, R8479 += 1, R8480 += 1 };
  s1 -> s3 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1, R8480 += 1, R5988 += 1 };
  s1 -> s4 [0, 65535] { R8578 += 1, R8532 += 1, R8499 += 1, R8500 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R8578 += 1, R8532 += 1 };
  s2 -> s2 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1, R8479 += 1, R8480 += 1 };
  s2 -> s3 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1, R8480 += 1, R5988 += 1 };
  s2 -> s5 [0, 65535] { R8578 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R8578 += 1, R8532 += 1 };
  s3 -> s8 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1 };
  s3 -> s3 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1, R8480 += 1, R5988 += 1 };
  s3 -> s5 [0, 65535] { R8578 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1, R8479 += 1, R8480 += 1 };
  s4 -> s3 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1, R8480 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R8578 += 1 };
  s4 -> s4 [0, 65535] { R8578 += 1, R8532 += 1, R8499 += 1, R8500 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8578 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8578 += 1, R8532 += 1 };
  s7 -> s5 [0, 65535] { R8578 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8578 += 1, R8532 += 1 };
  s8 -> s8 [0, 65535] { R8578 += 1, R8532 += 1, R8500 += 1 };
  s8 -> s5 [0, 65535] { R8578 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8580 += 1, R8533 += 1, R8534 += 1 };
  s0 -> s2 [0, 65535] { R8580 += 1, R8534 += 1, R8502 += 1, R8481 += 1, R8482 += 1 };
  s0 -> s3 [0, 65535] { R8580 += 1, R8534 += 1, R8501 += 1, R8502 += 1 };
  s0 -> s0 [0, 65535] { R8579 += 1, R8580 += 1 };
  s0 -> s4 [104, 104] { R8580 += 1, R8534 += 1, R8502 += 1, R8482 += 1 };
  s1 -> s1 [0, 65535] { R8580 += 1, R8533 += 1, R8534 += 1 };
  s1 -> s2 [0, 65535] { R8580 += 1, R8534 += 1, R8502 += 1, R8481 += 1, R8482 += 1 };
  s1 -> s3 [0, 65535] { R8580 += 1, R8534 += 1, R8501 += 1, R8502 += 1 };
  s1 -> s4 [104, 104] { R8580 += 1, R8534 += 1, R8502 += 1, R8482 += 1 };
  s2 -> s2 [0, 65535] { R8580 += 1, R8534 += 1, R8502 += 1, R8481 += 1, R8482 += 1 };
  s2 -> s4 [104, 104] { R8580 += 1, R8534 += 1, R8502 += 1, R8482 += 1 };
  s3 -> s2 [0, 65535] { R8580 += 1, R8534 += 1, R8502 += 1, R8481 += 1, R8482 += 1 };
  s3 -> s3 [0, 65535] { R8580 += 1, R8534 += 1, R8501 += 1, R8502 += 1 };
  s3 -> s4 [104, 104] { R8580 += 1, R8534 += 1, R8502 += 1, R8482 += 1 };
  s4 -> s5 [111, 111] { R8580 += 1, R8534 += 1, R8502 += 1, R8482 += 1 };
  s5 -> s6 [115, 115] { R8580 += 1, R8534 += 1, R8502 += 1, R8482 += 1 };
  s6 -> s7 [116, 116] { R8580 += 1, R8534 += 1, R8502 += 1, R8482 += 1 };
  s7 -> s8 [0, 65535] { R8580 += 1, R8534 += 1 };
  s7 -> s7 [0, 65535] { R8580 += 1, R8534 += 1, R8502 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s10 [0, 65535] { R8580 += 1 };
  s8 -> s8 [0, 65535] { R8580 += 1, R8534 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8580 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8580 += 1 };
  accepting s7, s8, s9, s10;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1, R8488 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R8581 += 1, R8582 += 1 };
  s0 -> s2 [0, 65535] { R8582 += 1, R8536 += 1, R8503 += 1, R8504 += 1 };
  s0 -> s3 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1, R8487 += 1, R8488 += 1 };
  s0 -> s4 [0, 65535] { R8582 += 1, R8535 += 1, R8536 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1, R8488 += 1, R5989 += 1 };
  s1 -> s6 [0, 65535] { R8582 += 1 };
  s1 -> s8 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1 };
  s1 -> s7 [0, 65535] { R8582 += 1, R8536 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1, R8488 += 1, R5989 += 1 };
  s2 -> s6 [0, 65535] { R8582 += 1 };
  s2 -> s2 [0, 65535] { R8582 += 1, R8536 += 1, R8503 += 1, R8504 += 1 };
  s2 -> s3 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1, R8487 += 1, R8488 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1, R8488 += 1, R5989 += 1 };
  s3 -> s6 [0, 65535] { R8582 += 1 };
  s3 -> s7 [0, 65535] { R8582 += 1, R8536 += 1 };
  s3 -> s3 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1, R8487 += 1, R8488 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1, R8488 += 1, R5989 += 1 };
  s4 -> s2 [0, 65535] { R8582 += 1, R8536 += 1, R8503 += 1, R8504 += 1 };
  s4 -> s3 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1, R8487 += 1, R8488 += 1 };
  s4 -> s4 [0, 65535] { R8582 += 1, R8535 += 1, R8536 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8582 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8582 += 1 };
  s7 -> s7 [0, 65535] { R8582 += 1, R8536 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R8582 += 1 };
  s8 -> s8 [0, 65535] { R8582 += 1, R8536 += 1, R8504 += 1 };
  s8 -> s7 [0, 65535] { R8582 += 1, R8536 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8584 += 1, R8537 += 1, R8538 += 1 };
  s0 -> s2 [0, 65535] { R8584 += 1, R8538 += 1, R8505 += 1, R8506 += 1 };
  s0 -> s0 [0, 65535] { R8583 += 1, R8584 += 1 };
  s0 -> s3 [0, 65535] { R8584 += 1, R8538 += 1, R8506 += 1, R8489 += 1, R8490 += 1 };
  s0 -> s4 [99, 99] { R8584 += 1, R8538 += 1, R8506 += 1, R8490 += 1 };
  s1 -> s1 [0, 65535] { R8584 += 1, R8537 += 1, R8538 += 1 };
  s1 -> s2 [0, 65535] { R8584 += 1, R8538 += 1, R8505 += 1, R8506 += 1 };
  s1 -> s3 [0, 65535] { R8584 += 1, R8538 += 1, R8506 += 1, R8489 += 1, R8490 += 1 };
  s1 -> s4 [99, 99] { R8584 += 1, R8538 += 1, R8506 += 1, R8490 += 1 };
  s2 -> s2 [0, 65535] { R8584 += 1, R8538 += 1, R8505 += 1, R8506 += 1 };
  s2 -> s3 [0, 65535] { R8584 += 1, R8538 += 1, R8506 += 1, R8489 += 1, R8490 += 1 };
  s2 -> s4 [99, 99] { R8584 += 1, R8538 += 1, R8506 += 1, R8490 += 1 };
  s3 -> s3 [0, 65535] { R8584 += 1, R8538 += 1, R8506 += 1, R8489 += 1, R8490 += 1 };
  s3 -> s4 [99, 99] { R8584 += 1, R8538 += 1, R8506 += 1, R8490 += 1 };
  s4 -> s5 [97, 97] { R8584 += 1, R8538 += 1, R8506 += 1, R8490 += 1 };
  s5 -> s6 [108, 108] { R8584 += 1, R8538 += 1, R8506 += 1, R8490 += 1 };
  s6 -> s7 [0, 65535] { R8584 += 1 };
  s6 -> s6 [0, 65535] { R8584 += 1, R8538 += 1, R8506 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R8584 += 1, R8538 += 1 };
  s7 -> s7 [0, 65535] { R8584 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s7 [0, 65535] { R8584 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8584 += 1, R8538 += 1 };
  accepting s6, s7, s8, s9;
};
};
constraint R1 = R8482 && R2 = R8506 && R3 = R8046 && R4 = R8584 && R15 = 0 && R16 = R8538 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8039 - R8538 = 1 && R8040 = R8046 && R8041 - R8538 = 1 && R8042 = R8046 && R8043 - R8538 = 1 && R8044 = R8046 && R8045 - R8538 = 1 && R8481 = 0 && R8485 = 0 && R8486 = 0 && R8489 = 0 && R8490 = 0 && R8491 = 0 && R8492 = R8506 && R8493 = 0 && R8494 = R8506 && R8495 = 0 && R8496 = R8506 && R8497 = 0 && R8498 = R8506 && R8499 = 0 && R8500 = R8506 && R8501 = 0 && R8502 = R8506 && R8503 = 0 && R8504 = R8506 && R8505 = 0 && R8507 = 0 && R8508 = R8538 && R8509 = 0 && R8510 = R8538 && R8511 = 0 && R8512 = R8538 && R8513 = 0 && R8514 = R8538 && R8515 = 0 && R8516 = R8538 && R8517 = 0 && R8518 = R8538 && R8519 = 0 && R8520 = R8538 && R8521 = 0 && R8522 = R8538 && R8523 = 0 && R8524 = R8538 && R8525 = 0 && R8526 = R8538 && R8527 = 0 && R8528 = R8538 && R8529 = 0 && R8530 = R8538 && R8531 = 0 && R8532 = R8538 && R8533 = 0 && R8534 = R8538 && R8535 = 0 && R8536 = R8538 && R8537 = 0 && R8539 = 10 && R8540 = R8584 && R8541 = 10 && R8542 = R8584 && R8543 = 10 && R8544 = R8584 && R8545 = 10 && R8546 = R8584 && R8547 = 10 && R8548 = R8584 && R8549 = 10 && R8550 = R8584 && R8551 = 10 && R8552 = R8584 && R8553 = 10 && R8554 = R8584 && R8555 = 10 && R8556 = R8584 && R8557 = 10 && R8558 = R8584 && R8559 = 10 && R8560 = R8584 && R8561 = 10 && R8562 = R8584 && R8563 = 10 && R8564 = R8584 && R8565 = 10 && R8566 = R8584 && R8567 = 10 && R8568 = R8584 && R8569 = 10 && R8570 = R8584 && R8571 = 10 && R8572 = R8584 && R8573 = 10 && R8574 = R8584 && R8575 = 10 && R8576 = R8584 && R8577 = 10 && R8578 = R8584 && R8579 = 10 && R8580 = R8584 && R8581 = 10 && R8582 = R8584 && R8583 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R8538 < R8046 && -1 < R8482 && 0 < R8506 && -1 < R8538 && 9 < R8584 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R8477 != 0 || R8478 = R8482 || (R5988 = 0 && R8482 = 0)) && (R8479 != 0 || R8480 = R8482 || (R5988 = 0 && R8482 = 0)) && (R5989 = 0 || (R8487 = 0 && R8488 = 0)) && (R5990 = 0 || (R8483 = 0 && R8484 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R8477 = 0 || (R5988 = 0 && R8482 = 0)) && (R8479 = 0 || (R5988 = 0 && R8482 = 0));
// End of Parikh automata intersection problem
