// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R9345, R9346, R9347, R9348, R9349, R9350, R9351, R9352, R9353, R9354, R9355, R9356, R9357, R9358, R9359, R9360, R9361, R9362, R9363, R9364, R9365, R9366, R9367, R9368, R9369, R9370, R9371, R9372, R9373, R9374, R9375, R9376, R9377, R9378, R9379, R9380, R9381, R9382, R9383, R9384, R9385, R9386, R9387, R9388, R9389, R9390, R9391, R9392, R9393, R9394, R9395, R9396, R9397, R9398, R9399, R9400, R9401, R9402, R9403, R9404, R9405, R9406, R9407, R9408, R9409, R9410, R9411, R9412, R9413, R9414, R9415, R9416, R9417, R9418, R9419, R9420, R9421, R9422, R9423, R9424, R9425, R9426, R9427, R9428, R9429, R9430, R9431, R9432, R9433, R9434, R9435, R9436, R9437, R9438, R9439, R9440, R9441, R9442, R9443, R9444, R9445, R9446, R9447, R9448, R9449, R9450, R9451, R9452;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R9408 += 1 };
  s0 -> s0 [0, 65535] { R9407 += 1, R9408 += 1 };
  s0 -> s2 [46, 46] { R9408 += 1 };
  s0 -> s3 [47, 47] { R9408 += 1 };
  s0 -> s1 [48, 65535] { R9408 += 1 };
  s1 -> s1 [0, 45] { R9408 += 1 };
  s1 -> s2 [46, 46] { R9408 += 1 };
  s1 -> s3 [47, 47] { R9408 += 1 };
  s1 -> s1 [48, 65535] { R9408 += 1 };
  s2 -> s1 [0, 45] { R9408 += 1 };
  s2 -> s2 [46, 46] { R9408 += 1 };
  s2 -> s3 [47, 47] { R9408 += 1 };
  s2 -> s1 [48, 114] { R9408 += 1 };
  s2 -> s8 [115, 115] { R9408 += 1 };
  s2 -> s1 [116, 65535] { R9408 += 1 };
  s3 -> s3 [0, 45] { R9408 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R9408 += 1 };
  s3 -> s3 [47, 65535] { R9408 += 1 };
  s4 -> s3 [0, 45] { R9408 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R9408 += 1 };
  s4 -> s3 [47, 114] { R9408 += 1 };
  s4 -> s5 [115, 115] { R9408 += 1 };
  s4 -> s3 [116, 65535] { R9408 += 1 };
  s5 -> s3 [0, 45] { R9408 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R9408 += 1 };
  s5 -> s3 [47, 110] { R9408 += 1 };
  s5 -> s6 [111, 111] { R9408 += 1 };
  s5 -> s3 [112, 65535] { R9408 += 1 };
  s6 -> s3 [0, 45] { R9408 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R9408 += 1 };
  s6 -> s3 [47, 98] { R9408 += 1 };
  s6 -> s7 [99, 99] { R9408 += 1 };
  s6 -> s3 [100, 65535] { R9408 += 1 };
  s7 -> s3 [0, 45] { R9408 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R9408 += 1 };
  s7 -> s3 [47, 106] { R9408 += 1 };
  s7 -> s3 [108, 65535] { R9408 += 1 };
  s8 -> s1 [0, 45] { R9408 += 1 };
  s8 -> s2 [46, 46] { R9408 += 1 };
  s8 -> s3 [47, 47] { R9408 += 1 };
  s8 -> s1 [48, 110] { R9408 += 1 };
  s8 -> s9 [111, 111] { R9408 += 1 };
  s8 -> s1 [112, 65535] { R9408 += 1 };
  s9 -> s1 [0, 45] { R9408 += 1 };
  s9 -> s2 [46, 46] { R9408 += 1 };
  s9 -> s3 [47, 47] { R9408 += 1 };
  s9 -> s1 [48, 98] { R9408 += 1 };
  s9 -> s10 [99, 99] { R9408 += 1 };
  s9 -> s1 [100, 65535] { R9408 += 1 };
  s10 -> s1 [0, 45] { R9408 += 1 };
  s10 -> s2 [46, 46] { R9408 += 1 };
  s10 -> s3 [47, 47] { R9408 += 1 };
  s10 -> s1 [48, 106] { R9408 += 1 };
  s10 -> s1 [108, 65535] { R9408 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R9409 += 1, R9410 += 1 };
  s0 -> s1 [0, 65535] { R9410 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R9410 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R9412 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R9411 += 1, R9412 += 1 };
  s0 -> s2 [0, 65535] { R9412 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R9412 += 1 };
  s0 -> s1 [48, 65535] { R9412 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R9412 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R9412 += 1 };
  s1 -> s1 [48, 65535] { R9412 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R9412 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R9412 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R9412 += 1 };
  s2 -> s1 [48, 65535] { R9412 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9412 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R9414 += 1, R8908 += 1 };
  s0 -> s0 [0, 65535] { R9413 += 1, R9414 += 1 };
  s0 -> s2 [0, 65535] { R9414 += 1, R8907 += 1, R8908 += 1 };
  s0 -> s1 [38, 42] { R9414 += 1, R8908 += 1 };
  s0 -> s1 [44, 45] { R9414 += 1, R8908 += 1 };
  s0 -> s1 [47, 62] { R9414 += 1, R8908 += 1 };
  s0 -> s1 [64, 65535] { R9414 += 1, R8908 += 1 };
  s1 -> s1 [0, 36] { R9414 += 1, R8908 += 1 };
  s1 -> s1 [0, 65535] { R9414 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R9414 += 1, R8908 += 1 };
  s1 -> s1 [44, 45] { R9414 += 1, R8908 += 1 };
  s1 -> s1 [47, 62] { R9414 += 1, R8908 += 1 };
  s1 -> s1 [64, 65535] { R9414 += 1, R8908 += 1 };
  s2 -> s1 [0, 36] { R9414 += 1, R8908 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9414 += 1, R8907 += 1, R8908 += 1 };
  s2 -> s1 [38, 42] { R9414 += 1, R8908 += 1 };
  s2 -> s1 [44, 45] { R9414 += 1, R8908 += 1 };
  s2 -> s1 [47, 62] { R9414 += 1, R8908 += 1 };
  s2 -> s1 [64, 65535] { R9414 += 1, R8908 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R9415 += 1, R9416 += 1 };
  s0 -> s1 [0, 65535] { R9416 += 1, R8909 += 1, R8910 += 1 };
  s0 -> s2 [0, 65535] { R9416 += 1, R8910 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9416 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s2 [0, 65535] { R9416 += 1, R8910 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9416 += 1 };
  s2 -> s2 [0, 65535] { R9416 += 1, R8910 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9416 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R9418 += 1, R8911 += 1, R8912 += 1 };
  s0 -> s0 [0, 65535] { R9417 += 1, R9418 += 1 };
  s0 -> s3 [0, 65535] { R9418 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R9418 += 1, R8912 += 1 };
  s1 -> s1 [0, 65535] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9418 += 1 };
  s2 -> s1 [0, 62] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R9418 += 1, R8911 += 1, R8912 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9418 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9418 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s6 [0, 65535] { R9418 += 1 };
  s3 -> s4 [63, 63] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R9418 += 1, R8912 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9418 += 1 };
  s7 -> s7 [0, 65535] { R9418 += 1, R8912 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9418 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9419 += 1, R9420 += 1 };
  s0 -> s1 [0, 65535] { R9420 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R9420 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R9420 += 1, R8913 += 1, R8914 += 1 };
  s1 -> s1 [0, 65535] { R9420 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R9420 += 1, R8914 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9420 += 1 };
  s2 -> s1 [0, 65535] { R9420 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R9420 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9420 += 1 };
  s3 -> s1 [0, 65535] { R9420 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R9420 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s3 [0, 65535] { R9420 += 1, R8913 += 1, R8914 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9420 += 1 };
  s6 -> s6 [0, 65535] { R9420 += 1, R8914 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9420 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R9422 += 1, R9376 += 1 };
  s0 -> s2 [0, 65535] { R9422 += 1, R9375 += 1, R9376 += 1 };
  s0 -> s0 [0, 65535] { R9421 += 1, R9422 += 1 };
  s0 -> s1 [45, 63] { R9422 += 1, R9376 += 1 };
  s0 -> s3 [87, 87] { R9422 += 1, R9376 += 1 };
  s0 -> s1 [88, 65535] { R9422 += 1, R9376 += 1 };
  s1 -> s1 [0, 43] { R9422 += 1, R9376 += 1 };
  s1 -> s1 [45, 63] { R9422 += 1, R9376 += 1 };
  s1 -> s3 [87, 87] { R9422 += 1, R9376 += 1 };
  s1 -> s1 [88, 65535] { R9422 += 1, R9376 += 1 };
  s2 -> s1 [0, 43] { R9422 += 1, R9376 += 1 };
  s2 -> s2 [0, 65535] { R9422 += 1, R9375 += 1, R9376 += 1 };
  s2 -> s1 [45, 63] { R9422 += 1, R9376 += 1 };
  s2 -> s3 [87, 87] { R9422 += 1, R9376 += 1 };
  s2 -> s1 [88, 65535] { R9422 += 1, R9376 += 1 };
  s3 -> s3 [0, 43] { R9422 += 1, R9376 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9422 += 1 };
  s3 -> s3 [45, 63] { R9422 += 1, R9376 += 1 };
  s3 -> s3 [87, 65535] { R9422 += 1, R9376 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R9424 += 1, R9378 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R9424 += 1, R9377 += 1, R9378 += 1 };
  s0 -> s0 [0, 65535] { R9423 += 1, R9424 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9424 += 1, R9378 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R9424 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9424 += 1, R9378 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R9424 += 1, R9377 += 1, R9378 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9424 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R9426 += 1, R9380 += 1 };
  s0 -> s2 [0, 65535] { R9426 += 1, R9380 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R9426 += 1, R9379 += 1, R9380 += 1 };
  s0 -> s0 [0, 65535] { R9425 += 1, R9426 += 1 };
  s0 -> s4 [58, 58] { R9426 += 1, R9380 += 1 };
  s0 -> s1 [59, 65535] { R9426 += 1, R9380 += 1 };
  s1 -> s1 [0, 57] { R9426 += 1, R9380 += 1 };
  s1 -> s1 [0, 65535] { R9426 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R9426 += 1, R9380 += 1 };
  s1 -> s1 [59, 65535] { R9426 += 1, R9380 += 1 };
  s2 -> s1 [0, 57] { R9426 += 1, R9380 += 1 };
  s2 -> s2 [0, 65535] { R9426 += 1, R9380 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R9426 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R9426 += 1, R9380 += 1 };
  s2 -> s1 [59, 65535] { R9426 += 1, R9380 += 1 };
  s3 -> s1 [0, 57] { R9426 += 1, R9380 += 1 };
  s3 -> s2 [0, 65535] { R9426 += 1, R9380 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R9426 += 1, R9379 += 1, R9380 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R9426 += 1, R9380 += 1 };
  s3 -> s1 [59, 65535] { R9426 += 1, R9380 += 1 };
  s4 -> s4 [0, 65535] { R9426 += 1, R9380 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9426 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R9428 += 1, R9382 += 1 };
  s0 -> s2 [0, 65535] { R9428 += 1, R9382 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R9428 += 1, R9381 += 1, R9382 += 1 };
  s0 -> s0 [0, 65535] { R9427 += 1, R9428 += 1 };
  s0 -> s4 [87, 87] { R9428 += 1, R9382 += 1 };
  s0 -> s1 [88, 65535] { R9428 += 1, R9382 += 1 };
  s1 -> s1 [0, 86] { R9428 += 1, R9382 += 1 };
  s1 -> s1 [0, 65535] { R9428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R9428 += 1, R9382 += 1 };
  s1 -> s1 [88, 65535] { R9428 += 1, R9382 += 1 };
  s2 -> s1 [0, 86] { R9428 += 1, R9382 += 1 };
  s2 -> s6 [0, 65535] { R9428 += 1 };
  s2 -> s2 [0, 65535] { R9428 += 1, R9382 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [87, 87] { R9428 += 1, R9382 += 1 };
  s2 -> s1 [88, 65535] { R9428 += 1, R9382 += 1 };
  s3 -> s1 [0, 86] { R9428 += 1, R9382 += 1 };
  s3 -> s2 [0, 65535] { R9428 += 1, R9382 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R9428 += 1, R9381 += 1, R9382 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [87, 87] { R9428 += 1, R9382 += 1 };
  s3 -> s1 [88, 65535] { R9428 += 1, R9382 += 1 };
  s4 -> s4 [0, 65535] { R9428 += 1, R9382 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9428 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R9430 += 1, R9384 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R9430 += 1, R9383 += 1, R9384 += 1 };
  s0 -> s0 [0, 65535] { R9429 += 1, R9430 += 1 };
  s0 -> s4 [91, 91] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R9430 += 1 };
  s1 -> s7 [0, 65535] { R9430 += 1, R9384 += 1 };
  s1 -> s1 [0, 65535] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 90] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R9430 += 1 };
  s2 -> s2 [0, 65535] { R9430 += 1, R9384 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R9430 += 1, R9384 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R9430 += 1, R9383 += 1, R9384 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R9430 += 1, R9384 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9430 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9430 += 1 };
  s7 -> s7 [0, 65535] { R9430 += 1, R9384 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9432 += 1, R9386 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R9432 += 1, R9386 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R9431 += 1, R9432 += 1 };
  s0 -> s3 [0, 65535] { R9432 += 1, R9385 += 1, R9386 += 1 };
  s1 -> s1 [0, 65535] { R9432 += 1, R9386 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s5 [0, 65535] { R9432 += 1 };
  s1 -> s2 [0, 65535] { R9432 += 1, R9386 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9432 += 1 };
  s2 -> s6 [0, 65535] { R9432 += 1, R9386 += 1 };
  s2 -> s2 [0, 65535] { R9432 += 1, R9386 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9432 += 1, R9386 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R9432 += 1, R9386 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9432 += 1, R9385 += 1, R9386 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9432 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9432 += 1 };
  s6 -> s6 [0, 65535] { R9432 += 1, R9386 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9434 += 1, R9388 += 1, R9351 += 1, R9352 += 1 };
  s0 -> s2 [0, 65535] { R9434 += 1, R9387 += 1, R9388 += 1 };
  s0 -> s0 [0, 65535] { R9433 += 1, R9434 += 1 };
  s0 -> s3 [0, 65535] { R9434 += 1, R9388 += 1, R9352 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535] { R9434 += 1 };
  s1 -> s1 [0, 65535] { R9434 += 1, R9388 += 1, R9351 += 1, R9352 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R9434 += 1, R9388 += 1, R9352 += 1, R5990 += 1 };
  s2 -> s1 [0, 65535] { R9434 += 1, R9388 += 1, R9351 += 1, R9352 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9434 += 1, R9387 += 1, R9388 += 1 };
  s2 -> s3 [0, 65535] { R9434 += 1, R9388 += 1, R9352 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R9434 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9434 += 1, R9388 += 1 };
  s3 -> s3 [0, 65535] { R9434 += 1, R9388 += 1, R9352 += 1, R5990 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9434 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9434 += 1, R9388 += 1 };
  s6 -> s4 [0, 65535] { R9434 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9436 += 1, R9389 += 1, R9390 += 1 };
  s0 -> s2 [0, 65535] { R9436 += 1, R9390 += 1, R9353 += 1, R9354 += 1 };
  s0 -> s0 [0, 65535] { R9435 += 1, R9436 += 1 };
  s0 -> s3 [108, 108] { R9436 += 1, R9390 += 1, R9354 += 1 };
  s1 -> s1 [0, 65535] { R9436 += 1, R9389 += 1, R9390 += 1 };
  s1 -> s2 [0, 65535] { R9436 += 1, R9390 += 1, R9353 += 1, R9354 += 1 };
  s1 -> s3 [108, 108] { R9436 += 1, R9390 += 1, R9354 += 1 };
  s2 -> s2 [0, 65535] { R9436 += 1, R9390 += 1, R9353 += 1, R9354 += 1 };
  s2 -> s3 [108, 108] { R9436 += 1, R9390 += 1, R9354 += 1 };
  s3 -> s4 [111, 111] { R9436 += 1, R9390 += 1, R9354 += 1 };
  s4 -> s5 [99, 99] { R9436 += 1, R9390 += 1, R9354 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9436 += 1, R9390 += 1 };
  s5 -> s7 [0, 65535] { R9436 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9436 += 1 };
  accepting s5, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s0 -> s0 [0, 65535] { R9437 += 1, R9438 += 1 };
  s0 -> s2 [0, 65535] { R9438 += 1, R9392 += 1, R9359 += 1, R9360 += 1 };
  s0 -> s3 [0, 65535] { R9438 += 1, R9391 += 1, R9392 += 1 };
  s0 -> s4 [87, 87] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s0 -> s1 [88, 65535] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s1 -> s1 [0, 86] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s1 -> s4 [87, 87] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s1 -> s1 [88, 65535] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s2 -> s1 [0, 86] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s2 -> s2 [0, 65535] { R9438 += 1, R9392 += 1, R9359 += 1, R9360 += 1 };
  s2 -> s4 [87, 87] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s2 -> s1 [88, 65535] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s3 -> s1 [0, 86] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s3 -> s2 [0, 65535] { R9438 += 1, R9392 += 1, R9359 += 1, R9360 += 1 };
  s3 -> s3 [0, 65535] { R9438 += 1, R9391 += 1, R9392 += 1 };
  s3 -> s4 [87, 87] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s3 -> s1 [88, 65535] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s4 -> s5 [0, 65535] { R9438 += 1 };
  s4 -> s6 [0, 65535] { R9438 += 1, R9392 += 1 };
  s4 -> s4 [0, 65535] { R9438 += 1, R9392 += 1, R9360 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R9438 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R9438 += 1 };
  s6 -> s6 [0, 65535] { R9438 += 1, R9392 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9440 += 1, R9394 += 1, R9361 += 1, R9362 += 1 };
  s0 -> s0 [0, 65535] { R9439 += 1, R9440 += 1 };
  s0 -> s2 [0, 65535] { R9440 += 1, R9393 += 1, R9394 += 1 };
  s0 -> s3 [0, 65535] { R9440 += 1, R9394 += 1, R9362 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R9440 += 1 };
  s1 -> s1 [0, 65535] { R9440 += 1, R9394 += 1, R9361 += 1, R9362 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R9440 += 1, R9394 += 1, R9362 += 1, R1 += 1 };
  s2 -> s1 [0, 65535] { R9440 += 1, R9394 += 1, R9361 += 1, R9362 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9440 += 1, R9393 += 1, R9394 += 1 };
  s2 -> s3 [0, 65535] { R9440 += 1, R9394 += 1, R9362 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R9440 += 1 };
  s3 -> s5 [0, 65535] { R9440 += 1, R9394 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9440 += 1, R9394 += 1, R9362 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R9440 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R9440 += 1 };
  s5 -> s5 [0, 65535] { R9440 += 1, R9394 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s0 -> s2 [0, 65535] { R9442 += 1, R9395 += 1, R9396 += 1 };
  s0 -> s3 [0, 65535] { R9442 += 1, R9396 += 1, R9363 += 1, R9364 += 1 };
  s0 -> s4 [0, 65535] { R9442 += 1, R9396 += 1, R9364 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R9441 += 1, R9442 += 1 };
  s0 -> s5 [87, 87] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s0 -> s1 [88, 65535] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s1 -> s1 [0, 86] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s1 -> s6 [0, 65535] { R9442 += 1 };
  s1 -> s1 [0, 65535] { R9442 += 1, R9396 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [87, 87] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s1 -> s1 [88, 65535] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s2 -> s1 [0, 86] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s2 -> s2 [0, 65535] { R9442 += 1, R9395 += 1, R9396 += 1 };
  s2 -> s3 [0, 65535] { R9442 += 1, R9396 += 1, R9363 += 1, R9364 += 1 };
  s2 -> s4 [0, 65535] { R9442 += 1, R9396 += 1, R9364 += 1, R7 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [87, 87] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s2 -> s1 [88, 65535] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s3 -> s1 [0, 86] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s3 -> s3 [0, 65535] { R9442 += 1, R9396 += 1, R9363 += 1, R9364 += 1 };
  s3 -> s4 [0, 65535] { R9442 += 1, R9396 += 1, R9364 += 1, R7 += 1 };
  s3 -> s6 [0, 65535] { R9442 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [87, 87] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s3 -> s1 [88, 65535] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s4 -> s1 [0, 86] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s4 -> s4 [0, 65535] { R9442 += 1, R9396 += 1, R9364 += 1, R7 += 1 };
  s4 -> s6 [0, 65535] { R9442 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R9442 += 1, R9396 += 1 };
  s4 -> s5 [87, 87] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s4 -> s1 [88, 65535] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s5 -> s5 [0, 65535] { R9442 += 1, R9396 += 1, R9364 += 1 };
  s6 -> s6 [0, 65535] { R9442 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R9442 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9442 += 1, R9396 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s0 -> s2 [0, 65535] { R9444 += 1, R9398 += 1, R9366 += 1, R9345 += 1, R9346 += 1 };
  s0 -> s3 [0, 65535] { R9444 += 1, R9397 += 1, R9398 += 1 };
  s0 -> s4 [0, 65535] { R9444 += 1, R9398 += 1, R9365 += 1, R9366 += 1 };
  s0 -> s0 [0, 65535] { R9443 += 1, R9444 += 1 };
  s0 -> s1 [88, 65535] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s1 -> s1 [0, 86] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s1 -> s1 [0, 65535] { R9444 += 1, R9398 += 1, R9366 += 1 };
  s1 -> s7 [0, 65535] { R9444 += 1, R9398 += 1 };
  s1 -> s5 [0, 65535] { R9444 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [88, 65535] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s2 -> s1 [0, 86] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s2 -> s2 [0, 65535] { R9444 += 1, R9398 += 1, R9366 += 1, R9345 += 1, R9346 += 1 };
  s2 -> s7 [0, 65535] { R9444 += 1, R9398 += 1 };
  s2 -> s5 [0, 65535] { R9444 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [88, 65535] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s3 -> s1 [0, 86] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s3 -> s2 [0, 65535] { R9444 += 1, R9398 += 1, R9366 += 1, R9345 += 1, R9346 += 1 };
  s3 -> s3 [0, 65535] { R9444 += 1, R9397 += 1, R9398 += 1 };
  s3 -> s4 [0, 65535] { R9444 += 1, R9398 += 1, R9365 += 1, R9366 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [88, 65535] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s4 -> s1 [0, 86] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s4 -> s2 [0, 65535] { R9444 += 1, R9398 += 1, R9366 += 1, R9345 += 1, R9346 += 1 };
  s4 -> s4 [0, 65535] { R9444 += 1, R9398 += 1, R9365 += 1, R9366 += 1 };
  s4 -> s5 [0, 65535] { R9444 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [88, 65535] { R9444 += 1, R9398 += 1, R9366 += 1, R9346 += 1 };
  s5 -> s5 [0, 65535] { R9444 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9444 += 1, R9398 += 1 };
  s7 -> s5 [0, 65535] { R9444 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1, R9347 += 1, R9348 += 1 };
  s0 -> s2 [0, 65535] { R9446 += 1, R9400 += 1, R9367 += 1, R9368 += 1 };
  s0 -> s3 [0, 65535] { R9446 += 1, R9399 += 1, R9400 += 1 };
  s0 -> s0 [0, 65535] { R9445 += 1, R9446 += 1 };
  s0 -> s4 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1, R9348 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535] { R9446 += 1, R9400 += 1 };
  s1 -> s1 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1, R9347 += 1, R9348 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R9446 += 1 };
  s1 -> s4 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1, R9348 += 1, R5988 += 1 };
  s2 -> s1 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1, R9347 += 1, R9348 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R9446 += 1 };
  s2 -> s2 [0, 65535] { R9446 += 1, R9400 += 1, R9367 += 1, R9368 += 1 };
  s2 -> s4 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1, R9348 += 1, R5988 += 1 };
  s3 -> s1 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1, R9347 += 1, R9348 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R9446 += 1, R9400 += 1, R9367 += 1, R9368 += 1 };
  s3 -> s3 [0, 65535] { R9446 += 1, R9399 += 1, R9400 += 1 };
  s3 -> s4 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1, R9348 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R9446 += 1, R9400 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9446 += 1 };
  s4 -> s8 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1 };
  s4 -> s4 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1, R9348 += 1, R5988 += 1 };
  s5 -> s5 [0, 65535] { R9446 += 1, R9400 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9446 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9446 += 1 };
  s8 -> s5 [0, 65535] { R9446 += 1, R9400 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9446 += 1 };
  s8 -> s8 [0, 65535] { R9446 += 1, R9400 += 1, R9368 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9448 += 1, R9402 += 1, R9369 += 1, R9370 += 1 };
  s0 -> s2 [0, 65535] { R9448 += 1, R9401 += 1, R9402 += 1 };
  s0 -> s0 [0, 65535] { R9447 += 1, R9448 += 1 };
  s0 -> s3 [0, 65535] { R9448 += 1, R9402 += 1, R9370 += 1, R9349 += 1, R9350 += 1 };
  s0 -> s4 [104, 104] { R9448 += 1, R9402 += 1, R9370 += 1, R9350 += 1 };
  s1 -> s1 [0, 65535] { R9448 += 1, R9402 += 1, R9369 += 1, R9370 += 1 };
  s1 -> s3 [0, 65535] { R9448 += 1, R9402 += 1, R9370 += 1, R9349 += 1, R9350 += 1 };
  s1 -> s4 [104, 104] { R9448 += 1, R9402 += 1, R9370 += 1, R9350 += 1 };
  s2 -> s1 [0, 65535] { R9448 += 1, R9402 += 1, R9369 += 1, R9370 += 1 };
  s2 -> s2 [0, 65535] { R9448 += 1, R9401 += 1, R9402 += 1 };
  s2 -> s3 [0, 65535] { R9448 += 1, R9402 += 1, R9370 += 1, R9349 += 1, R9350 += 1 };
  s2 -> s4 [104, 104] { R9448 += 1, R9402 += 1, R9370 += 1, R9350 += 1 };
  s3 -> s3 [0, 65535] { R9448 += 1, R9402 += 1, R9370 += 1, R9349 += 1, R9350 += 1 };
  s3 -> s4 [104, 104] { R9448 += 1, R9402 += 1, R9370 += 1, R9350 += 1 };
  s4 -> s5 [111, 111] { R9448 += 1, R9402 += 1, R9370 += 1, R9350 += 1 };
  s5 -> s6 [115, 115] { R9448 += 1, R9402 += 1, R9370 += 1, R9350 += 1 };
  s6 -> s7 [116, 116] { R9448 += 1, R9402 += 1, R9370 += 1, R9350 += 1 };
  s7 -> s8 [0, 65535] { R9448 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R9448 += 1, R9402 += 1, R9370 += 1 };
  s7 -> s10 [0, 65535] { R9448 += 1, R9402 += 1 };
  s8 -> s8 [0, 65535] { R9448 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  s10 -> s8 [0, 65535] { R9448 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9448 += 1, R9402 += 1 };
  accepting s7, s8, s9, s10;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9450 += 1, R9403 += 1, R9404 += 1 };
  s0 -> s0 [0, 65535] { R9449 += 1, R9450 += 1 };
  s0 -> s2 [0, 65535] { R9450 += 1, R9404 += 1, R9371 += 1, R9372 += 1 };
  s0 -> s3 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1, R9355 += 1, R9356 += 1 };
  s0 -> s4 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1, R9356 += 1, R5989 += 1 };
  s1 -> s1 [0, 65535] { R9450 += 1, R9403 += 1, R9404 += 1 };
  s1 -> s2 [0, 65535] { R9450 += 1, R9404 += 1, R9371 += 1, R9372 += 1 };
  s1 -> s3 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1, R9355 += 1, R9356 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1, R9356 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535] { R9450 += 1 };
  s2 -> s2 [0, 65535] { R9450 += 1, R9404 += 1, R9371 += 1, R9372 += 1 };
  s2 -> s3 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1, R9355 += 1, R9356 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1, R9356 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535] { R9450 += 1 };
  s3 -> s3 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1, R9355 += 1, R9356 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R9450 += 1, R9404 += 1 };
  s3 -> s4 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1, R9356 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535] { R9450 += 1 };
  s4 -> s6 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R9450 += 1, R9404 += 1 };
  s4 -> s4 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1, R9356 += 1, R5989 += 1 };
  s5 -> s5 [0, 65535] { R9450 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R9450 += 1 };
  s6 -> s6 [0, 65535] { R9450 += 1, R9404 += 1, R9372 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R9450 += 1, R9404 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R9450 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9450 += 1, R9404 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9452 += 1, R9406 += 1, R9373 += 1, R9374 += 1 };
  s0 -> s0 [0, 65535] { R9451 += 1, R9452 += 1 };
  s0 -> s2 [0, 65535] { R9452 += 1, R9405 += 1, R9406 += 1 };
  s0 -> s3 [0, 65535] { R9452 += 1, R9406 += 1, R9374 += 1, R9357 += 1, R9358 += 1 };
  s0 -> s4 [97, 97] { R9452 += 1, R9406 += 1, R9374 += 1, R9358 += 1 };
  s1 -> s1 [0, 65535] { R9452 += 1, R9406 += 1, R9373 += 1, R9374 += 1 };
  s1 -> s3 [0, 65535] { R9452 += 1, R9406 += 1, R9374 += 1, R9357 += 1, R9358 += 1 };
  s1 -> s4 [97, 97] { R9452 += 1, R9406 += 1, R9374 += 1, R9358 += 1 };
  s2 -> s1 [0, 65535] { R9452 += 1, R9406 += 1, R9373 += 1, R9374 += 1 };
  s2 -> s2 [0, 65535] { R9452 += 1, R9405 += 1, R9406 += 1 };
  s2 -> s3 [0, 65535] { R9452 += 1, R9406 += 1, R9374 += 1, R9357 += 1, R9358 += 1 };
  s2 -> s4 [97, 97] { R9452 += 1, R9406 += 1, R9374 += 1, R9358 += 1 };
  s3 -> s3 [0, 65535] { R9452 += 1, R9406 += 1, R9374 += 1, R9357 += 1, R9358 += 1 };
  s3 -> s4 [97, 97] { R9452 += 1, R9406 += 1, R9374 += 1, R9358 += 1 };
  s4 -> s5 [108, 108] { R9452 += 1, R9406 += 1, R9374 += 1, R9358 += 1 };
  s5 -> s5 [0, 65535] { R9452 += 1, R9406 += 1, R9374 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9452 += 1, R9406 += 1 };
  s5 -> s8 [0, 65535] { R9452 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9452 += 1, R9406 += 1 };
  s7 -> s8 [0, 65535] { R9452 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9452 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R1 = R9350 && R2 = R9374 && R3 = R8914 && R4 = R9452 && R15 = 0 && R16 = R9406 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8907 - R9406 = 1 && R8908 = R8914 && R8909 - R9406 = 1 && R8910 = R8914 && R8911 - R9406 = 1 && R8912 = R8914 && R8913 - R9406 = 1 && R9349 = 0 && R9353 = 0 && R9354 = 0 && R9357 = 0 && R9358 = 0 && R9359 = 0 && R9360 = R9374 && R9361 = 0 && R9362 = R9374 && R9363 = 0 && R9364 = R9374 && R9365 = 0 && R9366 = R9374 && R9367 = 0 && R9368 = R9374 && R9369 = 0 && R9370 = R9374 && R9371 = 0 && R9372 = R9374 && R9373 = 0 && R9375 = 0 && R9376 = R9406 && R9377 = 0 && R9378 = R9406 && R9379 = 0 && R9380 = R9406 && R9381 = 0 && R9382 = R9406 && R9383 = 0 && R9384 = R9406 && R9385 = 0 && R9386 = R9406 && R9387 = 0 && R9388 = R9406 && R9389 = 0 && R9390 = R9406 && R9391 = 0 && R9392 = R9406 && R9393 = 0 && R9394 = R9406 && R9395 = 0 && R9396 = R9406 && R9397 = 0 && R9398 = R9406 && R9399 = 0 && R9400 = R9406 && R9401 = 0 && R9402 = R9406 && R9403 = 0 && R9404 = R9406 && R9405 = 0 && R9407 = 10 && R9408 = R9452 && R9409 = 10 && R9410 = R9452 && R9411 = 10 && R9412 = R9452 && R9413 = 10 && R9414 = R9452 && R9415 = 10 && R9416 = R9452 && R9417 = 10 && R9418 = R9452 && R9419 = 10 && R9420 = R9452 && R9421 = 10 && R9422 = R9452 && R9423 = 10 && R9424 = R9452 && R9425 = 10 && R9426 = R9452 && R9427 = 10 && R9428 = R9452 && R9429 = 10 && R9430 = R9452 && R9431 = 10 && R9432 = R9452 && R9433 = 10 && R9434 = R9452 && R9435 = 10 && R9436 = R9452 && R9437 = 10 && R9438 = R9452 && R9439 = 10 && R9440 = R9452 && R9441 = 10 && R9442 = R9452 && R9443 = 10 && R9444 = R9452 && R9445 = 10 && R9446 = R9452 && R9447 = 10 && R9448 = R9452 && R9449 = 10 && R9450 = R9452 && R9451 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R9406 < R8914 && -1 < R9350 && 0 < R9374 && -1 < R9406 && 9 < R9452 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R9345 != 0 || R9346 = R9350 || (R5988 = 0 && R9350 = 0)) && (R9347 != 0 || R9348 = R9350 || (R5988 = 0 && R9350 = 0)) && (R5989 = 0 || (R9355 = 0 && R9356 = 0)) && (R5990 = 0 || (R9351 = 0 && R9352 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R9345 = 0 || (R5988 = 0 && R9350 = 0)) && (R9347 = 0 || (R5988 = 0 && R9350 = 0));
// End of Parikh automata intersection problem
