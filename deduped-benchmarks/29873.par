// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11960, R11961, R12, R13, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R18268, R18269, R18270, R18271, R18272, R18273, R18274, R18275, R18276, R18277, R18278, R18279, R18280, R18281, R18282, R18283, R18284, R18285, R18286, R18287, R18288, R18289, R18290, R18291, R18292, R18293, R18294, R18295, R18296, R18297, R18298, R18299, R18300, R18301, R18302, R18303, R18304, R18305, R18306, R18307, R18308, R18309, R18310, R18311, R18312, R18313, R18314, R18315, R18316, R18317, R18318, R18319, R18320, R18321, R18322, R18323, R18324, R18325, R18326, R18327, R18328, R18329, R18330, R18331, R18332, R18333, R18334, R18335, R18336, R18337, R18338, R18339, R18340, R18341, R18342, R18343, R18344, R18345, R18346, R18347, R18348, R18349, R18350, R18351, R18352, R18353, R18354, R18355, R18356, R18357, R18358, R18359, R18360, R18361, R18362, R18363, R18364, R18365, R18366, R18367, R18368, R18369, R18370, R18371, R18372, R18373, R2, R3, R4, R5, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18329 += 1 };
  s0 -> s0 [0, 65535] { R18328 += 1, R18329 += 1 };
  s0 -> s2 [46, 46] { R18329 += 1 };
  s0 -> s3 [47, 47] { R18329 += 1 };
  s0 -> s1 [48, 65535] { R18329 += 1 };
  s1 -> s1 [0, 45] { R18329 += 1 };
  s1 -> s2 [46, 46] { R18329 += 1 };
  s1 -> s3 [47, 47] { R18329 += 1 };
  s1 -> s1 [48, 65535] { R18329 += 1 };
  s2 -> s1 [0, 45] { R18329 += 1 };
  s2 -> s2 [46, 46] { R18329 += 1 };
  s2 -> s3 [47, 47] { R18329 += 1 };
  s2 -> s1 [48, 114] { R18329 += 1 };
  s2 -> s8 [115, 115] { R18329 += 1 };
  s2 -> s1 [116, 65535] { R18329 += 1 };
  s3 -> s3 [0, 45] { R18329 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18329 += 1 };
  s3 -> s3 [47, 65535] { R18329 += 1 };
  s4 -> s3 [0, 45] { R18329 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18329 += 1 };
  s4 -> s3 [47, 114] { R18329 += 1 };
  s4 -> s5 [115, 115] { R18329 += 1 };
  s4 -> s3 [116, 65535] { R18329 += 1 };
  s5 -> s3 [0, 45] { R18329 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18329 += 1 };
  s5 -> s3 [47, 110] { R18329 += 1 };
  s5 -> s6 [111, 111] { R18329 += 1 };
  s5 -> s3 [112, 65535] { R18329 += 1 };
  s6 -> s3 [0, 45] { R18329 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18329 += 1 };
  s6 -> s3 [47, 98] { R18329 += 1 };
  s6 -> s7 [99, 99] { R18329 += 1 };
  s6 -> s3 [100, 65535] { R18329 += 1 };
  s7 -> s3 [0, 45] { R18329 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18329 += 1 };
  s7 -> s3 [47, 106] { R18329 += 1 };
  s7 -> s3 [108, 65535] { R18329 += 1 };
  s8 -> s1 [0, 45] { R18329 += 1 };
  s8 -> s2 [46, 46] { R18329 += 1 };
  s8 -> s3 [47, 47] { R18329 += 1 };
  s8 -> s1 [48, 110] { R18329 += 1 };
  s8 -> s9 [111, 111] { R18329 += 1 };
  s8 -> s1 [112, 65535] { R18329 += 1 };
  s9 -> s1 [0, 45] { R18329 += 1 };
  s9 -> s2 [46, 46] { R18329 += 1 };
  s9 -> s3 [47, 47] { R18329 += 1 };
  s9 -> s1 [48, 98] { R18329 += 1 };
  s9 -> s10 [99, 99] { R18329 += 1 };
  s9 -> s1 [100, 65535] { R18329 += 1 };
  s10 -> s1 [0, 45] { R18329 += 1 };
  s10 -> s2 [46, 46] { R18329 += 1 };
  s10 -> s3 [47, 47] { R18329 += 1 };
  s10 -> s1 [48, 106] { R18329 += 1 };
  s10 -> s1 [108, 65535] { R18329 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R18330 += 1, R18331 += 1 };
  s0 -> s1 [0, 65535] { R18331 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R18331 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18333 += 1, R11961 += 1 };
  s0 -> s0 [0, 65535] { R18332 += 1, R18333 += 1 };
  s0 -> s2 [0, 65535] { R18333 += 1, R11960 += 1, R11961 += 1 };
  s0 -> s3 [47, 47] { R18333 += 1 };
  s0 -> s1 [48, 65535] { R18333 += 1, R11961 += 1 };
  s1 -> s1 [0, 46] { R18333 += 1, R11961 += 1 };
  s1 -> s3 [47, 47] { R18333 += 1 };
  s1 -> s1 [48, 65535] { R18333 += 1, R11961 += 1 };
  s2 -> s1 [0, 46] { R18333 += 1, R11961 += 1 };
  s2 -> s2 [0, 65535] { R18333 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [47, 47] { R18333 += 1 };
  s2 -> s1 [48, 65535] { R18333 += 1, R11961 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18333 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18335 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R18334 += 1, R18335 += 1 };
  s0 -> s2 [0, 65535] { R18335 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s1 [38, 42] { R18335 += 1, R17945 += 1 };
  s0 -> s1 [44, 45] { R18335 += 1, R17945 += 1 };
  s0 -> s1 [47, 62] { R18335 += 1, R17945 += 1 };
  s0 -> s1 [64, 65535] { R18335 += 1, R17945 += 1 };
  s1 -> s1 [0, 36] { R18335 += 1, R17945 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18335 += 1 };
  s1 -> s1 [38, 42] { R18335 += 1, R17945 += 1 };
  s1 -> s1 [44, 45] { R18335 += 1, R17945 += 1 };
  s1 -> s1 [47, 62] { R18335 += 1, R17945 += 1 };
  s1 -> s1 [64, 65535] { R18335 += 1, R17945 += 1 };
  s2 -> s1 [0, 36] { R18335 += 1, R17945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18335 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s1 [38, 42] { R18335 += 1, R17945 += 1 };
  s2 -> s1 [44, 45] { R18335 += 1, R17945 += 1 };
  s2 -> s1 [47, 62] { R18335 += 1, R17945 += 1 };
  s2 -> s1 [64, 65535] { R18335 += 1, R17945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R18337 += 1, R17946 += 1, R17947 += 1 };
  s0 -> s2 [0, 65535] { R18337 += 1, R17947 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R18336 += 1, R18337 += 1 };
  s1 -> s1 [0, 65535] { R18337 += 1, R17946 += 1, R17947 += 1 };
  s1 -> s2 [0, 65535] { R18337 += 1, R17947 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18337 += 1, R17947 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18337 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18337 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s2 [0, 65535] { R18339 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s3 [0, 65535] { R18339 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s0 [0, 65535] { R18338 += 1, R18339 += 1 };
  s0 -> s4 [63, 63] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s1 [64, 65535] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s5 [0, 65535] { R18339 += 1 };
  s1 -> s1 [0, 65535] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R18339 += 1, R17949 += 1 };
  s2 -> s1 [0, 62] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s2 [0, 65535] { R18339 += 1, R17948 += 1, R17949 += 1 };
  s2 -> s3 [0, 65535] { R18339 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [64, 65535] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [0, 62] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s5 [0, 65535] { R18339 += 1 };
  s3 -> s3 [0, 65535] { R18339 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [64, 65535] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s4 -> s1 [0, 65535] { R18339 += 1, R17949 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535] { R18339 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R18339 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18339 += 1, R17949 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18341 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R18341 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s0 -> s3 [0, 65535] { R18341 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s0 [0, 65535] { R18340 += 1, R18341 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18341 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R18341 += 1 };
  s1 -> s6 [0, 65535] { R18341 += 1, R17951 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R18341 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R18341 += 1 };
  s2 -> s2 [0, 65535] { R18341 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18341 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R18341 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s3 -> s3 [0, 65535] { R18341 += 1, R17950 += 1, R17951 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18341 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18341 += 1 };
  s6 -> s6 [0, 65535] { R18341 += 1, R17951 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R18343 += 1, R18297 += 1 };
  s0 -> s2 [0, 65535] { R18343 += 1, R18296 += 1, R18297 += 1 };
  s0 -> s0 [0, 65535] { R18342 += 1, R18343 += 1 };
  s0 -> s1 [45, 63] { R18343 += 1, R18297 += 1 };
  s0 -> s3 [87, 87] { R18343 += 1, R18297 += 1 };
  s0 -> s1 [88, 65535] { R18343 += 1, R18297 += 1 };
  s1 -> s1 [0, 43] { R18343 += 1, R18297 += 1 };
  s1 -> s1 [45, 63] { R18343 += 1, R18297 += 1 };
  s1 -> s3 [87, 87] { R18343 += 1, R18297 += 1 };
  s1 -> s1 [88, 65535] { R18343 += 1, R18297 += 1 };
  s2 -> s1 [0, 43] { R18343 += 1, R18297 += 1 };
  s2 -> s2 [0, 65535] { R18343 += 1, R18296 += 1, R18297 += 1 };
  s2 -> s1 [45, 63] { R18343 += 1, R18297 += 1 };
  s2 -> s3 [87, 87] { R18343 += 1, R18297 += 1 };
  s2 -> s1 [88, 65535] { R18343 += 1, R18297 += 1 };
  s3 -> s3 [0, 43] { R18343 += 1, R18297 += 1 };
  s3 -> s3 [0, 65535] { R18343 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R18343 += 1, R18297 += 1 };
  s3 -> s3 [87, 65535] { R18343 += 1, R18297 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R18345 += 1, R18299 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R18344 += 1, R18345 += 1 };
  s0 -> s2 [0, 65535] { R18345 += 1, R18298 += 1, R18299 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18345 += 1, R18299 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R18345 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18345 += 1, R18299 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R18345 += 1, R18298 += 1, R18299 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18345 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R18347 += 1, R18301 += 1 };
  s0 -> s2 [0, 65535] { R18347 += 1, R18301 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R18346 += 1, R18347 += 1 };
  s0 -> s3 [0, 65535] { R18347 += 1, R18300 += 1, R18301 += 1 };
  s0 -> s4 [58, 58] { R18347 += 1, R18301 += 1 };
  s0 -> s1 [59, 65535] { R18347 += 1, R18301 += 1 };
  s1 -> s1 [0, 57] { R18347 += 1, R18301 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18347 += 1 };
  s1 -> s4 [58, 58] { R18347 += 1, R18301 += 1 };
  s1 -> s1 [59, 65535] { R18347 += 1, R18301 += 1 };
  s2 -> s1 [0, 57] { R18347 += 1, R18301 += 1 };
  s2 -> s2 [0, 65535] { R18347 += 1, R18301 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R18347 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R18347 += 1, R18301 += 1 };
  s2 -> s1 [59, 65535] { R18347 += 1, R18301 += 1 };
  s3 -> s1 [0, 57] { R18347 += 1, R18301 += 1 };
  s3 -> s2 [0, 65535] { R18347 += 1, R18301 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18347 += 1, R18300 += 1, R18301 += 1 };
  s3 -> s4 [58, 58] { R18347 += 1, R18301 += 1 };
  s3 -> s1 [59, 65535] { R18347 += 1, R18301 += 1 };
  s4 -> s4 [0, 65535] { R18347 += 1, R18301 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18347 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R18349 += 1, R18303 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R18349 += 1, R18303 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [0, 65535] { R18349 += 1, R18302 += 1, R18303 += 1 };
  s0 -> s0 [0, 65535] { R18348 += 1, R18349 += 1 };
  s0 -> s4 [87, 87] { R18349 += 1, R18303 += 1 };
  s0 -> s1 [88, 65535] { R18349 += 1, R18303 += 1, R13 += 1 };
  s1 -> s1 [0, 86] { R18349 += 1, R18303 += 1, R13 += 1 };
  s1 -> s4 [87, 87] { R18349 += 1, R18303 += 1 };
  s1 -> s1 [88, 65535] { R18349 += 1, R18303 += 1, R13 += 1 };
  s2 -> s1 [0, 86] { R18349 += 1, R18303 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R18349 += 1, R18303 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [87, 87] { R18349 += 1, R18303 += 1 };
  s2 -> s1 [88, 65535] { R18349 += 1, R18303 += 1, R13 += 1 };
  s3 -> s1 [0, 86] { R18349 += 1, R18303 += 1, R13 += 1 };
  s3 -> s2 [0, 65535] { R18349 += 1, R18303 += 1, R12 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R18349 += 1, R18302 += 1, R18303 += 1 };
  s3 -> s4 [87, 87] { R18349 += 1, R18303 += 1 };
  s3 -> s1 [88, 65535] { R18349 += 1, R18303 += 1, R13 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18349 += 1 };
  s4 -> s4 [0, 65535] { R18349 += 1, R18303 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18349 += 1 };
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s0 -> s0 [0, 65535] { R18350 += 1, R18351 += 1 };
  s0 -> s2 [0, 65535] { R18351 += 1, R18305 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s3 [0, 65535] { R18351 += 1, R18304 += 1, R18305 += 1 };
  s0 -> s4 [91, 91] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s0 -> s1 [92, 65535] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s1 -> s1 [0, 65535] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s1 -> s6 [0, 65535] { R18351 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R18351 += 1, R18305 += 1 };
  s2 -> s1 [0, 90] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s2 -> s6 [0, 65535] { R18351 += 1 };
  s2 -> s2 [0, 65535] { R18351 += 1, R18305 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s2 -> s1 [92, 65535] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s3 -> s1 [0, 90] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s3 -> s2 [0, 65535] { R18351 += 1, R18305 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s3 [0, 65535] { R18351 += 1, R18304 += 1, R18305 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s3 -> s1 [92, 65535] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s4 -> s1 [0, 65535] { R18351 += 1, R18305 += 1, R17941 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18351 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18351 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18351 += 1, R18305 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R18352 += 1, R18353 += 1 };
  s0 -> s1 [0, 65535] { R18353 += 1, R18307 += 1, R17943 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R18353 += 1, R18306 += 1, R18307 += 1 };
  s0 -> s3 [0, 65535] { R18353 += 1, R18307 += 1, R17942 += 1, R17943 += 1 };
  s1 -> s6 [0, 65535] { R18353 += 1, R18307 += 1 };
  s1 -> s1 [0, 65535] { R18353 += 1, R18307 += 1, R17943 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R18353 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18353 += 1, R18307 += 1, R17943 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R18353 += 1, R18306 += 1, R18307 += 1 };
  s2 -> s3 [0, 65535] { R18353 += 1, R18307 += 1, R17942 += 1, R17943 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R18353 += 1, R18307 += 1, R17943 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R18353 += 1, R18307 += 1, R17942 += 1, R17943 += 1 };
  s3 -> s4 [0, 65535] { R18353 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18353 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18353 += 1, R18307 += 1 };
  s6 -> s4 [0, 65535] { R18353 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R18354 += 1, R18355 += 1 };
  s0 -> s1 [0, 65535] { R18355 += 1, R18309 += 1, R18274 += 1, R18275 += 1 };
  s0 -> s2 [0, 65535] { R18355 += 1, R18308 += 1, R18309 += 1 };
  s0 -> s3 [0, 65535] { R18355 += 1, R18309 += 1, R18275 += 1, R17935 += 1 };
  s1 -> s4 [0, 65535] { R18355 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18355 += 1, R18309 += 1, R18274 += 1, R18275 += 1 };
  s1 -> s3 [0, 65535] { R18355 += 1, R18309 += 1, R18275 += 1, R17935 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18355 += 1, R18309 += 1, R18274 += 1, R18275 += 1 };
  s2 -> s2 [0, 65535] { R18355 += 1, R18308 += 1, R18309 += 1 };
  s2 -> s3 [0, 65535] { R18355 += 1, R18309 += 1, R18275 += 1, R17935 += 1 };
  s3 -> s4 [0, 65535] { R18355 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18355 += 1, R18309 += 1, R18275 += 1, R17935 += 1 };
  s3 -> s6 [0, 65535] { R18355 += 1, R18309 += 1 };
  s4 -> s4 [0, 65535] { R18355 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18355 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18355 += 1, R18309 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R18357 += 1, R18310 += 1, R18311 += 1 };
  s0 -> s2 [0, 65535] { R18357 += 1, R18311 += 1 };
  s0 -> s0 [0, 65535] { R18356 += 1, R18357 += 1 };
  s1 -> s1 [0, 65535] { R18357 += 1, R18310 += 1, R18311 += 1 };
  s1 -> s2 [0, 65535] { R18357 += 1, R18311 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R18357 += 1 };
  s2 -> s2 [0, 65535] { R18357 += 1, R18311 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18357 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s0 -> s2 [0, 65535] { R18359 += 1, R18312 += 1, R18313 += 1 };
  s0 -> s3 [0, 65535] { R18359 += 1, R18313 += 1, R18280 += 1, R18281 += 1 };
  s0 -> s0 [0, 65535] { R18358 += 1, R18359 += 1 };
  s0 -> s4 [87, 87] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s0 -> s1 [88, 65535] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s1 -> s1 [0, 86] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s1 -> s4 [87, 87] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s1 -> s1 [88, 65535] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s2 -> s1 [0, 86] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s2 -> s2 [0, 65535] { R18359 += 1, R18312 += 1, R18313 += 1 };
  s2 -> s3 [0, 65535] { R18359 += 1, R18313 += 1, R18280 += 1, R18281 += 1 };
  s2 -> s4 [87, 87] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s2 -> s1 [88, 65535] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s3 -> s1 [0, 86] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s3 -> s3 [0, 65535] { R18359 += 1, R18313 += 1, R18280 += 1, R18281 += 1 };
  s3 -> s4 [87, 87] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s3 -> s1 [88, 65535] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s4 -> s5 [0, 65535] { R18359 += 1, R18313 += 1 };
  s4 -> s6 [0, 65535] { R18359 += 1 };
  s4 -> s4 [0, 65535] { R18359 += 1, R18313 += 1, R18281 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R18359 += 1, R18313 += 1 };
  s5 -> s6 [0, 65535] { R18359 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R18359 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R18360 += 1, R18361 += 1 };
  s0 -> s1 [0, 65535] { R18361 += 1, R18315 += 1, R18282 += 1, R18283 += 1 };
  s0 -> s2 [0, 65535] { R18361 += 1, R18315 += 1, R18283 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R18361 += 1, R18314 += 1, R18315 += 1 };
  s1 -> s5 [0, 65535] { R18361 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18361 += 1, R18315 += 1, R18282 += 1, R18283 += 1 };
  s1 -> s2 [0, 65535] { R18361 += 1, R18315 += 1, R18283 += 1, R1 += 1 };
  s2 -> s5 [0, 65535] { R18361 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R18361 += 1, R18315 += 1 };
  s2 -> s2 [0, 65535] { R18361 += 1, R18315 += 1, R18283 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18361 += 1, R18315 += 1, R18282 += 1, R18283 += 1 };
  s3 -> s2 [0, 65535] { R18361 += 1, R18315 += 1, R18283 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R18361 += 1, R18314 += 1, R18315 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18361 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18361 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18361 += 1, R18315 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s0 -> s0 [0, 65535] { R18362 += 1, R18363 += 1 };
  s0 -> s2 [0, 65535] { R18363 += 1, R18317 += 1, R18285 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R18363 += 1, R18317 += 1, R18284 += 1, R18285 += 1 };
  s0 -> s4 [0, 65535] { R18363 += 1, R18316 += 1, R18317 += 1 };
  s0 -> s5 [87, 87] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s0 -> s1 [88, 65535] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s1 -> s1 [0, 86] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18363 += 1, R18317 += 1 };
  s1 -> s7 [0, 65535] { R18363 += 1 };
  s1 -> s5 [87, 87] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s1 -> s1 [88, 65535] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s2 -> s1 [0, 86] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s2 -> s2 [0, 65535] { R18363 += 1, R18317 += 1, R18285 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R18363 += 1, R18317 += 1 };
  s2 -> s7 [0, 65535] { R18363 += 1 };
  s2 -> s5 [87, 87] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s2 -> s1 [88, 65535] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s3 -> s1 [0, 86] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s3 -> s2 [0, 65535] { R18363 += 1, R18317 += 1, R18285 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R18363 += 1, R18317 += 1, R18284 += 1, R18285 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R18363 += 1 };
  s3 -> s5 [87, 87] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s3 -> s1 [88, 65535] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s4 -> s1 [0, 86] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s4 -> s2 [0, 65535] { R18363 += 1, R18317 += 1, R18285 += 1, R7 += 1 };
  s4 -> s3 [0, 65535] { R18363 += 1, R18317 += 1, R18284 += 1, R18285 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18363 += 1, R18316 += 1, R18317 += 1 };
  s4 -> s5 [87, 87] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s4 -> s1 [88, 65535] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s5 -> s5 [0, 65535] { R18363 += 1, R18317 += 1, R18285 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18363 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18363 += 1, R18317 += 1 };
  s8 -> s7 [0, 65535] { R18363 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s0 -> s2 [0, 65535] { R18365 += 1, R18319 += 1, R18286 += 1, R18287 += 1 };
  s0 -> s0 [0, 65535] { R18364 += 1, R18365 += 1 };
  s0 -> s3 [0, 65535] { R18365 += 1, R18318 += 1, R18319 += 1 };
  s0 -> s4 [0, 65535] { R18365 += 1, R18319 += 1, R18287 += 1, R18268 += 1, R18269 += 1 };
  s0 -> s1 [88, 65535] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s1 -> s1 [0, 86] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s1 -> s1 [0, 65535] { R18365 += 1, R18319 += 1, R18287 += 1 };
  s1 -> s5 [0, 65535] { R18365 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R18365 += 1, R18319 += 1 };
  s1 -> s1 [88, 65535] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s2 -> s1 [0, 86] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s2 -> s2 [0, 65535] { R18365 += 1, R18319 += 1, R18286 += 1, R18287 += 1 };
  s2 -> s5 [0, 65535] { R18365 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R18365 += 1, R18319 += 1, R18287 += 1, R18268 += 1, R18269 += 1 };
  s2 -> s1 [88, 65535] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s3 -> s1 [0, 86] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s3 -> s2 [0, 65535] { R18365 += 1, R18319 += 1, R18286 += 1, R18287 += 1 };
  s3 -> s3 [0, 65535] { R18365 += 1, R18318 += 1, R18319 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R18365 += 1, R18319 += 1, R18287 += 1, R18268 += 1, R18269 += 1 };
  s3 -> s1 [88, 65535] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s4 -> s1 [0, 86] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s4 -> s5 [0, 65535] { R18365 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R18365 += 1, R18319 += 1 };
  s4 -> s4 [0, 65535] { R18365 += 1, R18319 += 1, R18287 += 1, R18268 += 1, R18269 += 1 };
  s4 -> s1 [88, 65535] { R18365 += 1, R18319 += 1, R18287 += 1, R18269 += 1 };
  s5 -> s5 [0, 65535] { R18365 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R18365 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18365 += 1, R18319 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18367 += 1, R18320 += 1, R18321 += 1 };
  s0 -> s2 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1, R18270 += 1, R18271 += 1 };
  s0 -> s0 [0, 65535] { R18366 += 1, R18367 += 1 };
  s0 -> s3 [0, 65535] { R18367 += 1, R18321 += 1, R18288 += 1, R18289 += 1 };
  s0 -> s4 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1, R18271 += 1, R17933 += 1 };
  s1 -> s1 [0, 65535] { R18367 += 1, R18320 += 1, R18321 += 1 };
  s1 -> s2 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1, R18270 += 1, R18271 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s3 [0, 65535] { R18367 += 1, R18321 += 1, R18288 += 1, R18289 += 1 };
  s1 -> s4 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1, R18271 += 1, R17933 += 1 };
  s2 -> s2 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1, R18270 += 1, R18271 += 1 };
  s2 -> s5 [0, 65535] { R18367 += 1, R18321 += 1 };
  s2 -> s7 [0, 65535] { R18367 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1, R18271 += 1, R17933 += 1 };
  s3 -> s2 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1, R18270 += 1, R18271 += 1 };
  s3 -> s7 [0, 65535] { R18367 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R18367 += 1, R18321 += 1, R18288 += 1, R18289 += 1 };
  s3 -> s4 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1, R18271 += 1, R17933 += 1 };
  s4 -> s5 [0, 65535] { R18367 += 1, R18321 += 1 };
  s4 -> s6 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1 };
  s4 -> s7 [0, 65535] { R18367 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1, R18271 += 1, R17933 += 1 };
  s5 -> s5 [0, 65535] { R18367 += 1, R18321 += 1 };
  s5 -> s7 [0, 65535] { R18367 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s5 [0, 65535] { R18367 += 1, R18321 += 1 };
  s6 -> s6 [0, 65535] { R18367 += 1, R18321 += 1, R18289 += 1 };
  s6 -> s7 [0, 65535] { R18367 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R18367 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R18369 += 1, R18322 += 1, R18323 += 1 };
  s0 -> s2 [0, 65535] { R18369 += 1, R18323 += 1, R18290 += 1, R18291 += 1 };
  s0 -> s0 [0, 65535] { R18368 += 1, R18369 += 1 };
  s0 -> s3 [0, 65535] { R18369 += 1, R18323 += 1, R18291 += 1, R18272 += 1, R18273 += 1 };
  s0 -> s4 [111, 111] { R18369 += 1, R18323 += 1, R18291 += 1, R18273 += 1 };
  s1 -> s1 [0, 65535] { R18369 += 1, R18322 += 1, R18323 += 1 };
  s1 -> s2 [0, 65535] { R18369 += 1, R18323 += 1, R18290 += 1, R18291 += 1 };
  s1 -> s3 [0, 65535] { R18369 += 1, R18323 += 1, R18291 += 1, R18272 += 1, R18273 += 1 };
  s1 -> s4 [111, 111] { R18369 += 1, R18323 += 1, R18291 += 1, R18273 += 1 };
  s2 -> s2 [0, 65535] { R18369 += 1, R18323 += 1, R18290 += 1, R18291 += 1 };
  s2 -> s3 [0, 65535] { R18369 += 1, R18323 += 1, R18291 += 1, R18272 += 1, R18273 += 1 };
  s2 -> s4 [111, 111] { R18369 += 1, R18323 += 1, R18291 += 1, R18273 += 1 };
  s3 -> s3 [0, 65535] { R18369 += 1, R18323 += 1, R18291 += 1, R18272 += 1, R18273 += 1 };
  s3 -> s4 [111, 111] { R18369 += 1, R18323 += 1, R18291 += 1, R18273 += 1 };
  s4 -> s5 [115, 115] { R18369 += 1, R18323 += 1, R18291 += 1, R18273 += 1 };
  s5 -> s6 [116, 116] { R18369 += 1, R18323 += 1, R18291 += 1, R18273 += 1 };
  s6 -> s7 [0, 65535] { R18369 += 1, R18323 += 1 };
  s6 -> s6 [0, 65535] { R18369 += 1, R18323 += 1, R18291 += 1 };
  s6 -> s8 [0, 65535] { R18369 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R18369 += 1, R18323 += 1 };
  s7 -> s8 [0, 65535] { R18369 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R18369 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s6, s7, s8, s9;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1, R18277 += 1, R17934 += 1 };
  s0 -> s2 [0, 65535] { R18371 += 1, R18324 += 1, R18325 += 1 };
  s0 -> s0 [0, 65535] { R18370 += 1, R18371 += 1 };
  s0 -> s3 [0, 65535] { R18371 += 1, R18325 += 1, R18292 += 1, R18293 += 1 };
  s0 -> s4 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1, R18276 += 1, R18277 += 1 };
  s1 -> s5 [0, 65535] { R18371 += 1 };
  s1 -> s1 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1, R18277 += 1, R17934 += 1 };
  s1 -> s8 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1 };
  s1 -> s6 [0, 65535] { R18371 += 1, R18325 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1, R18277 += 1, R17934 += 1 };
  s2 -> s2 [0, 65535] { R18371 += 1, R18324 += 1, R18325 += 1 };
  s2 -> s3 [0, 65535] { R18371 += 1, R18325 += 1, R18292 += 1, R18293 += 1 };
  s2 -> s4 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1, R18276 += 1, R18277 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s5 [0, 65535] { R18371 += 1 };
  s3 -> s1 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1, R18277 += 1, R17934 += 1 };
  s3 -> s3 [0, 65535] { R18371 += 1, R18325 += 1, R18292 += 1, R18293 += 1 };
  s3 -> s4 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1, R18276 += 1, R18277 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R18371 += 1 };
  s4 -> s1 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1, R18277 += 1, R17934 += 1 };
  s4 -> s6 [0, 65535] { R18371 += 1, R18325 += 1 };
  s4 -> s4 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1, R18276 += 1, R18277 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R18371 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R18371 += 1 };
  s6 -> s6 [0, 65535] { R18371 += 1, R18325 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R18371 += 1 };
  s8 -> s8 [0, 65535] { R18371 += 1, R18325 += 1, R18293 += 1 };
  s8 -> s6 [0, 65535] { R18371 += 1, R18325 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R18372 += 1, R18373 += 1 };
  s0 -> s1 [0, 65535] { R18373 += 1, R18327 += 1, R18295 += 1, R18278 += 1, R18279 += 1 };
  s0 -> s2 [0, 65535] { R18373 += 1, R18327 += 1, R18294 += 1, R18295 += 1 };
  s0 -> s3 [0, 65535] { R18373 += 1, R18326 += 1, R18327 += 1 };
  s0 -> s4 [108, 108] { R18373 += 1, R18327 += 1, R18295 += 1, R18279 += 1 };
  s1 -> s1 [0, 65535] { R18373 += 1, R18327 += 1, R18295 += 1, R18278 += 1, R18279 += 1 };
  s1 -> s4 [108, 108] { R18373 += 1, R18327 += 1, R18295 += 1, R18279 += 1 };
  s2 -> s1 [0, 65535] { R18373 += 1, R18327 += 1, R18295 += 1, R18278 += 1, R18279 += 1 };
  s2 -> s2 [0, 65535] { R18373 += 1, R18327 += 1, R18294 += 1, R18295 += 1 };
  s2 -> s4 [108, 108] { R18373 += 1, R18327 += 1, R18295 += 1, R18279 += 1 };
  s3 -> s1 [0, 65535] { R18373 += 1, R18327 += 1, R18295 += 1, R18278 += 1, R18279 += 1 };
  s3 -> s2 [0, 65535] { R18373 += 1, R18327 += 1, R18294 += 1, R18295 += 1 };
  s3 -> s3 [0, 65535] { R18373 += 1, R18326 += 1, R18327 += 1 };
  s3 -> s4 [108, 108] { R18373 += 1, R18327 += 1, R18295 += 1, R18279 += 1 };
  s4 -> s5 [111, 111] { R18373 += 1, R18327 += 1, R18295 += 1, R18279 += 1 };
  s5 -> s6 [99, 99] { R18373 += 1, R18327 += 1, R18295 += 1, R18279 += 1 };
  s6 -> s7 [97, 97] { R18373 += 1, R18327 += 1, R18295 += 1, R18279 += 1 };
  s7 -> s8 [108, 108] { R18373 += 1, R18327 += 1, R18295 += 1, R18279 += 1 };
  s8 -> s9 [104, 104] { R18373 += 1, R18327 += 1, R18295 += 1, R18279 += 1 };
  s9 -> s10 [0, 65535] { R18373 += 1 };
  s9 -> s11 [0, 65535] { R18373 += 1, R18327 += 1 };
  s9 -> s9 [0, 65535] { R18373 += 1, R18327 += 1, R18295 += 1 };
  s9 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R18373 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s10 [0, 65535] { R18373 += 1 };
  s11 -> s11 [0, 65535] { R18373 += 1, R18327 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s9, s10, s11, s12;
};
};
constraint R1 = R18273 && R2 = R18295 && R3 = R17951 && R4 = R18373 && R12 = 0 && R13 = -1 && R11960 = 0 && R11961 = R18327 && R17940 = 0 && R17941 = 1 && R17942 = 0 && R17943 = 1 && R17944 - R18327 = 1 && R17945 = R17951 && R17946 - R18327 = 1 && R17947 = R17951 && R17948 - R18327 = 1 && R17949 = R17951 && R17950 - R18327 = 1 && R18272 = 0 && R18278 = 0 && R18279 = 0 && R18280 = 0 && R18281 = R18295 && R18282 = 0 && R18283 = R18295 && R18284 = 0 && R18285 = R18295 && R18286 = 0 && R18287 = R18295 && R18288 = 0 && R18289 = R18295 && R18290 = 0 && R18291 = R18295 && R18292 = 0 && R18293 = R18295 && R18294 = 0 && R18296 = 0 && R18297 = R18327 && R18298 = 0 && R18299 = R18327 && R18300 = 0 && R18301 = R18327 && R18302 = 0 && R18303 = R18327 && R18304 = 0 && R18305 = R18327 && R18306 = 0 && R18307 = R18327 && R18308 = 0 && R18309 = R18327 && R18310 = 0 && R18311 = R18327 && R18312 = 0 && R18313 = R18327 && R18314 = 0 && R18315 = R18327 && R18316 = 0 && R18317 = R18327 && R18318 = 0 && R18319 = R18327 && R18320 = 0 && R18321 = R18327 && R18322 = 0 && R18323 = R18327 && R18324 = 0 && R18325 = R18327 && R18326 = 0 && R18328 = 10 && R18329 = R18373 && R18330 = 10 && R18331 = R18373 && R18332 = 10 && R18333 = R18373 && R18334 = 10 && R18335 = R18373 && R18336 = 10 && R18337 = R18373 && R18338 = 10 && R18339 = R18373 && R18340 = 10 && R18341 = R18373 && R18342 = 10 && R18343 = R18373 && R18344 = 10 && R18345 = R18373 && R18346 = 10 && R18347 = R18373 && R18348 = 10 && R18349 = R18373 && R18350 = 10 && R18351 = R18373 && R18352 = 10 && R18353 = R18373 && R18354 = 10 && R18355 = R18373 && R18356 = 10 && R18357 = R18373 && R18358 = 10 && R18359 = R18373 && R18360 = 10 && R18361 = R18373 && R18362 = 10 && R18363 = R18373 && R18364 = 10 && R18365 = R18373 && R18366 = 10 && R18367 = R18373 && R18368 = 10 && R18369 = R18373 && R18370 = 10 && R18371 = R18373 && R18372 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R18327 < R17951 && -1 < R18273 && 0 < R18295 && -1 < R18327 && 9 < R18373 && (R17936 != 0 || ((R5 != 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R0 = R17937 || R17937 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R17937 != 1 || -1 < R0) && (R0 = R17937 || R17937 = 1))))) && (R17938 != 0 || ((R5 != 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R0 = R17939 || R17939 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R17939 != 1 || -1 < R0) && (R0 = R17939 || R17939 = 1))))) && (R18268 != 0 || R18269 = R18273 || (R17933 = 0 && R18273 = 0)) && (R18270 != 0 || R18271 = R18273 || (R17933 = 0 && R18273 = 0)) && (R17934 = 0 || (R18276 = 0 && R18277 = 0)) && (R17935 = 0 || (R18274 = 0 && R18275 = 0)) && (R17936 = 0 || (R5 = 0 && R0 < 0)) && (R17938 = 0 || (R5 = 0 && R0 < 0)) && (R18268 = 0 || (R17933 = 0 && R18273 = 0)) && (R18270 = 0 || (R17933 = 0 && R18273 = 0));
// End of Parikh automata intersection problem
