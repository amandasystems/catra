// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11960, R11961, R12, R13, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R18374, R18375, R18376, R18377, R18378, R18379, R18380, R18381, R18382, R18383, R18384, R18385, R18386, R18387, R18388, R18389, R18390, R18391, R18392, R18393, R18394, R18395, R18396, R18397, R18398, R18399, R18400, R18401, R18402, R18403, R18404, R18405, R18406, R18407, R18408, R18409, R18410, R18411, R18412, R18413, R18414, R18415, R18416, R18417, R18418, R18419, R18420, R18421, R18422, R18423, R18424, R18425, R18426, R18427, R18428, R18429, R18430, R18431, R18432, R18433, R18434, R18435, R18436, R18437, R18438, R18439, R18440, R18441, R18442, R18443, R18444, R18445, R18446, R18447, R18448, R18449, R18450, R18451, R18452, R18453, R18454, R18455, R18456, R18457, R18458, R18459, R18460, R18461, R18462, R18463, R18464, R18465, R18466, R18467, R18468, R18469, R18470, R18471, R18472, R18473, R18474, R18475, R18476, R18477, R18478, R18479, R2, R3, R4, R5, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18435 += 1 };
  s0 -> s0 [0, 65535] { R18434 += 1, R18435 += 1 };
  s0 -> s2 [46, 46] { R18435 += 1 };
  s0 -> s3 [47, 47] { R18435 += 1 };
  s0 -> s1 [48, 65535] { R18435 += 1 };
  s1 -> s1 [0, 45] { R18435 += 1 };
  s1 -> s2 [46, 46] { R18435 += 1 };
  s1 -> s3 [47, 47] { R18435 += 1 };
  s1 -> s1 [48, 65535] { R18435 += 1 };
  s2 -> s1 [0, 45] { R18435 += 1 };
  s2 -> s2 [46, 46] { R18435 += 1 };
  s2 -> s3 [47, 47] { R18435 += 1 };
  s2 -> s1 [48, 114] { R18435 += 1 };
  s2 -> s8 [115, 115] { R18435 += 1 };
  s2 -> s1 [116, 65535] { R18435 += 1 };
  s3 -> s3 [0, 45] { R18435 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18435 += 1 };
  s3 -> s3 [47, 65535] { R18435 += 1 };
  s4 -> s3 [0, 45] { R18435 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18435 += 1 };
  s4 -> s3 [47, 114] { R18435 += 1 };
  s4 -> s5 [115, 115] { R18435 += 1 };
  s4 -> s3 [116, 65535] { R18435 += 1 };
  s5 -> s3 [0, 45] { R18435 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18435 += 1 };
  s5 -> s3 [47, 110] { R18435 += 1 };
  s5 -> s6 [111, 111] { R18435 += 1 };
  s5 -> s3 [112, 65535] { R18435 += 1 };
  s6 -> s3 [0, 45] { R18435 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18435 += 1 };
  s6 -> s3 [47, 98] { R18435 += 1 };
  s6 -> s7 [99, 99] { R18435 += 1 };
  s6 -> s3 [100, 65535] { R18435 += 1 };
  s7 -> s3 [0, 45] { R18435 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18435 += 1 };
  s7 -> s3 [47, 106] { R18435 += 1 };
  s7 -> s3 [108, 65535] { R18435 += 1 };
  s8 -> s1 [0, 45] { R18435 += 1 };
  s8 -> s2 [46, 46] { R18435 += 1 };
  s8 -> s3 [47, 47] { R18435 += 1 };
  s8 -> s1 [48, 110] { R18435 += 1 };
  s8 -> s9 [111, 111] { R18435 += 1 };
  s8 -> s1 [112, 65535] { R18435 += 1 };
  s9 -> s1 [0, 45] { R18435 += 1 };
  s9 -> s2 [46, 46] { R18435 += 1 };
  s9 -> s3 [47, 47] { R18435 += 1 };
  s9 -> s1 [48, 98] { R18435 += 1 };
  s9 -> s10 [99, 99] { R18435 += 1 };
  s9 -> s1 [100, 65535] { R18435 += 1 };
  s10 -> s1 [0, 45] { R18435 += 1 };
  s10 -> s2 [46, 46] { R18435 += 1 };
  s10 -> s3 [47, 47] { R18435 += 1 };
  s10 -> s1 [48, 106] { R18435 += 1 };
  s10 -> s1 [108, 65535] { R18435 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R18436 += 1, R18437 += 1 };
  s0 -> s1 [0, 65535] { R18437 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R18437 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18439 += 1, R11961 += 1 };
  s0 -> s0 [0, 65535] { R18438 += 1, R18439 += 1 };
  s0 -> s2 [0, 65535] { R18439 += 1, R11960 += 1, R11961 += 1 };
  s0 -> s3 [47, 47] { R18439 += 1 };
  s0 -> s1 [48, 65535] { R18439 += 1, R11961 += 1 };
  s1 -> s1 [0, 46] { R18439 += 1, R11961 += 1 };
  s1 -> s3 [47, 47] { R18439 += 1 };
  s1 -> s1 [48, 65535] { R18439 += 1, R11961 += 1 };
  s2 -> s1 [0, 46] { R18439 += 1, R11961 += 1 };
  s2 -> s2 [0, 65535] { R18439 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [47, 47] { R18439 += 1 };
  s2 -> s1 [48, 65535] { R18439 += 1, R11961 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18439 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18441 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R18440 += 1, R18441 += 1 };
  s0 -> s2 [0, 65535] { R18441 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s1 [38, 42] { R18441 += 1, R17945 += 1 };
  s0 -> s1 [44, 45] { R18441 += 1, R17945 += 1 };
  s0 -> s1 [47, 62] { R18441 += 1, R17945 += 1 };
  s0 -> s1 [64, 65535] { R18441 += 1, R17945 += 1 };
  s1 -> s1 [0, 36] { R18441 += 1, R17945 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18441 += 1 };
  s1 -> s1 [38, 42] { R18441 += 1, R17945 += 1 };
  s1 -> s1 [44, 45] { R18441 += 1, R17945 += 1 };
  s1 -> s1 [47, 62] { R18441 += 1, R17945 += 1 };
  s1 -> s1 [64, 65535] { R18441 += 1, R17945 += 1 };
  s2 -> s1 [0, 36] { R18441 += 1, R17945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18441 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s1 [38, 42] { R18441 += 1, R17945 += 1 };
  s2 -> s1 [44, 45] { R18441 += 1, R17945 += 1 };
  s2 -> s1 [47, 62] { R18441 += 1, R17945 += 1 };
  s2 -> s1 [64, 65535] { R18441 += 1, R17945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R18442 += 1, R18443 += 1 };
  s0 -> s1 [0, 65535] { R18443 += 1, R17946 += 1, R17947 += 1 };
  s0 -> s2 [0, 65535] { R18443 += 1, R17947 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R18443 += 1, R17946 += 1, R17947 += 1 };
  s1 -> s2 [0, 65535] { R18443 += 1, R17947 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R18443 += 1 };
  s2 -> s2 [0, 65535] { R18443 += 1, R17947 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18443 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s2 [0, 65535] { R18445 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s0 [0, 65535] { R18444 += 1, R18445 += 1 };
  s0 -> s3 [0, 65535] { R18445 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s4 [63, 63] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s1 [64, 65535] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s1 [0, 65535] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s7 [0, 65535] { R18445 += 1, R17949 += 1 };
  s1 -> s6 [0, 65535] { R18445 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s2 [0, 65535] { R18445 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s6 [0, 65535] { R18445 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [64, 65535] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [0, 62] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s2 [0, 65535] { R18445 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s3 -> s3 [0, 65535] { R18445 += 1, R17948 += 1, R17949 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [64, 65535] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s4 -> s1 [0, 65535] { R18445 += 1, R17949 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18445 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18445 += 1, R17949 += 1 };
  s7 -> s6 [0, 65535] { R18445 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18447 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R18447 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s0 -> s3 [0, 65535] { R18447 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s0 [0, 65535] { R18446 += 1, R18447 += 1 };
  s1 -> s6 [0, 65535] { R18447 += 1, R17951 += 1 };
  s1 -> s5 [0, 65535] { R18447 += 1 };
  s1 -> s1 [0, 65535] { R18447 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18447 += 1 };
  s2 -> s1 [0, 65535] { R18447 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R18447 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18447 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R18447 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s3 -> s3 [0, 65535] { R18447 += 1, R17950 += 1, R17951 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18447 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18447 += 1, R17951 += 1 };
  s6 -> s5 [0, 65535] { R18447 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R18449 += 1, R18403 += 1 };
  s0 -> s2 [0, 65535] { R18449 += 1, R18402 += 1, R18403 += 1 };
  s0 -> s0 [0, 65535] { R18448 += 1, R18449 += 1 };
  s0 -> s1 [45, 63] { R18449 += 1, R18403 += 1 };
  s0 -> s3 [87, 87] { R18449 += 1, R18403 += 1 };
  s0 -> s1 [88, 65535] { R18449 += 1, R18403 += 1 };
  s1 -> s1 [0, 43] { R18449 += 1, R18403 += 1 };
  s1 -> s1 [45, 63] { R18449 += 1, R18403 += 1 };
  s1 -> s3 [87, 87] { R18449 += 1, R18403 += 1 };
  s1 -> s1 [88, 65535] { R18449 += 1, R18403 += 1 };
  s2 -> s1 [0, 43] { R18449 += 1, R18403 += 1 };
  s2 -> s2 [0, 65535] { R18449 += 1, R18402 += 1, R18403 += 1 };
  s2 -> s1 [45, 63] { R18449 += 1, R18403 += 1 };
  s2 -> s3 [87, 87] { R18449 += 1, R18403 += 1 };
  s2 -> s1 [88, 65535] { R18449 += 1, R18403 += 1 };
  s3 -> s3 [0, 43] { R18449 += 1, R18403 += 1 };
  s3 -> s3 [0, 65535] { R18449 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R18449 += 1, R18403 += 1 };
  s3 -> s3 [87, 65535] { R18449 += 1, R18403 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R18451 += 1, R18405 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R18450 += 1, R18451 += 1 };
  s0 -> s2 [0, 65535] { R18451 += 1, R18404 += 1, R18405 += 1 };
  s1 -> s4 [0, 65535] { R18451 += 1 };
  s1 -> s1 [0, 65535] { R18451 += 1, R18405 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18451 += 1, R18405 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R18451 += 1, R18404 += 1, R18405 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18451 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R18453 += 1, R18407 += 1 };
  s0 -> s2 [0, 65535] { R18453 += 1, R18407 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R18452 += 1, R18453 += 1 };
  s0 -> s3 [0, 65535] { R18453 += 1, R18406 += 1, R18407 += 1 };
  s0 -> s4 [58, 58] { R18453 += 1, R18407 += 1 };
  s0 -> s1 [59, 65535] { R18453 += 1, R18407 += 1 };
  s1 -> s1 [0, 57] { R18453 += 1, R18407 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18453 += 1 };
  s1 -> s4 [58, 58] { R18453 += 1, R18407 += 1 };
  s1 -> s1 [59, 65535] { R18453 += 1, R18407 += 1 };
  s2 -> s1 [0, 57] { R18453 += 1, R18407 += 1 };
  s2 -> s2 [0, 65535] { R18453 += 1, R18407 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18453 += 1 };
  s2 -> s4 [58, 58] { R18453 += 1, R18407 += 1 };
  s2 -> s1 [59, 65535] { R18453 += 1, R18407 += 1 };
  s3 -> s1 [0, 57] { R18453 += 1, R18407 += 1 };
  s3 -> s2 [0, 65535] { R18453 += 1, R18407 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18453 += 1, R18406 += 1, R18407 += 1 };
  s3 -> s4 [58, 58] { R18453 += 1, R18407 += 1 };
  s3 -> s1 [59, 65535] { R18453 += 1, R18407 += 1 };
  s4 -> s4 [0, 65535] { R18453 += 1, R18407 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18453 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R18455 += 1, R18409 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R18455 += 1, R18409 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [0, 65535] { R18455 += 1, R18408 += 1, R18409 += 1 };
  s0 -> s0 [0, 65535] { R18454 += 1, R18455 += 1 };
  s0 -> s4 [87, 87] { R18455 += 1, R18409 += 1 };
  s0 -> s1 [88, 65535] { R18455 += 1, R18409 += 1, R13 += 1 };
  s1 -> s1 [0, 86] { R18455 += 1, R18409 += 1, R13 += 1 };
  s1 -> s4 [87, 87] { R18455 += 1, R18409 += 1 };
  s1 -> s1 [88, 65535] { R18455 += 1, R18409 += 1, R13 += 1 };
  s2 -> s1 [0, 86] { R18455 += 1, R18409 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R18455 += 1, R18409 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [87, 87] { R18455 += 1, R18409 += 1 };
  s2 -> s1 [88, 65535] { R18455 += 1, R18409 += 1, R13 += 1 };
  s3 -> s1 [0, 86] { R18455 += 1, R18409 += 1, R13 += 1 };
  s3 -> s2 [0, 65535] { R18455 += 1, R18409 += 1, R12 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R18455 += 1, R18408 += 1, R18409 += 1 };
  s3 -> s4 [87, 87] { R18455 += 1, R18409 += 1 };
  s3 -> s1 [88, 65535] { R18455 += 1, R18409 += 1, R13 += 1 };
  s4 -> s4 [0, 65535] { R18455 += 1, R18409 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18455 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18455 += 1 };
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s0 -> s2 [0, 65535] { R18457 += 1, R18410 += 1, R18411 += 1 };
  s0 -> s3 [0, 65535] { R18457 += 1, R18411 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s0 [0, 65535] { R18456 += 1, R18457 += 1 };
  s0 -> s4 [91, 91] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s0 -> s1 [92, 65535] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s1 -> s7 [0, 65535] { R18457 += 1, R18411 += 1 };
  s1 -> s5 [0, 65535] { R18457 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s2 -> s1 [0, 90] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s2 -> s2 [0, 65535] { R18457 += 1, R18410 += 1, R18411 += 1 };
  s2 -> s3 [0, 65535] { R18457 += 1, R18411 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s2 -> s1 [92, 65535] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s3 -> s1 [0, 90] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s3 -> s3 [0, 65535] { R18457 += 1, R18411 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s5 [0, 65535] { R18457 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s3 -> s1 [92, 65535] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s4 -> s1 [0, 65535] { R18457 += 1, R18411 += 1, R17941 += 1 };
  s5 -> s5 [0, 65535] { R18457 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18457 += 1, R18411 += 1 };
  s7 -> s5 [0, 65535] { R18457 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R18459 += 1, R18413 += 1, R17943 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R18458 += 1, R18459 += 1 };
  s0 -> s2 [0, 65535] { R18459 += 1, R18413 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s3 [0, 65535] { R18459 += 1, R18412 += 1, R18413 += 1 };
  s1 -> s5 [0, 65535] { R18459 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18459 += 1, R18413 += 1, R17943 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R18459 += 1, R18413 += 1 };
  s2 -> s5 [0, 65535] { R18459 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R18459 += 1, R18413 += 1, R17943 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R18459 += 1, R18413 += 1, R17942 += 1, R17943 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18459 += 1, R18413 += 1, R17943 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R18459 += 1, R18413 += 1, R17942 += 1, R17943 += 1 };
  s3 -> s3 [0, 65535] { R18459 += 1, R18412 += 1, R18413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18459 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18459 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18459 += 1, R18413 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R18461 += 1, R18415 += 1, R18380 += 1, R18381 += 1 };
  s0 -> s2 [0, 65535] { R18461 += 1, R18414 += 1, R18415 += 1 };
  s0 -> s0 [0, 65535] { R18460 += 1, R18461 += 1 };
  s0 -> s3 [0, 65535] { R18461 += 1, R18415 += 1, R18381 += 1, R17935 += 1 };
  s1 -> s1 [0, 65535] { R18461 += 1, R18415 += 1, R18380 += 1, R18381 += 1 };
  s1 -> s4 [0, 65535] { R18461 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R18461 += 1, R18415 += 1, R18381 += 1, R17935 += 1 };
  s2 -> s1 [0, 65535] { R18461 += 1, R18415 += 1, R18380 += 1, R18381 += 1 };
  s2 -> s2 [0, 65535] { R18461 += 1, R18414 += 1, R18415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18461 += 1, R18415 += 1, R18381 += 1, R17935 += 1 };
  s3 -> s4 [0, 65535] { R18461 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18461 += 1, R18415 += 1 };
  s3 -> s3 [0, 65535] { R18461 += 1, R18415 += 1, R18381 += 1, R17935 += 1 };
  s4 -> s4 [0, 65535] { R18461 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18461 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18461 += 1, R18415 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R18462 += 1, R18463 += 1 };
  s0 -> s1 [0, 65535] { R18463 += 1, R18417 += 1 };
  s0 -> s2 [0, 65535] { R18463 += 1, R18416 += 1, R18417 += 1 };
  s1 -> s1 [0, 65535] { R18463 += 1, R18417 += 1 };
  s1 -> s4 [0, 65535] { R18463 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18463 += 1, R18417 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18463 += 1, R18416 += 1, R18417 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18463 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s0 -> s2 [0, 65535] { R18465 += 1, R18418 += 1, R18419 += 1 };
  s0 -> s0 [0, 65535] { R18464 += 1, R18465 += 1 };
  s0 -> s3 [0, 65535] { R18465 += 1, R18419 += 1, R18386 += 1, R18387 += 1 };
  s0 -> s4 [87, 87] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s0 -> s1 [88, 65535] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s1 -> s1 [0, 86] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s1 -> s4 [87, 87] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s1 -> s1 [88, 65535] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s2 -> s1 [0, 86] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s2 -> s2 [0, 65535] { R18465 += 1, R18418 += 1, R18419 += 1 };
  s2 -> s3 [0, 65535] { R18465 += 1, R18419 += 1, R18386 += 1, R18387 += 1 };
  s2 -> s4 [87, 87] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s2 -> s1 [88, 65535] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s3 -> s1 [0, 86] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s3 -> s3 [0, 65535] { R18465 += 1, R18419 += 1, R18386 += 1, R18387 += 1 };
  s3 -> s4 [87, 87] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s3 -> s1 [88, 65535] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18465 += 1, R18419 += 1, R18387 += 1 };
  s4 -> s6 [0, 65535] { R18465 += 1, R18419 += 1 };
  s4 -> s7 [0, 65535] { R18465 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18465 += 1, R18419 += 1 };
  s6 -> s7 [0, 65535] { R18465 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18465 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18467 += 1, R18421 += 1, R18389 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R18467 += 1, R18420 += 1, R18421 += 1 };
  s0 -> s0 [0, 65535] { R18466 += 1, R18467 += 1 };
  s0 -> s3 [0, 65535] { R18467 += 1, R18421 += 1, R18388 += 1, R18389 += 1 };
  s1 -> s4 [0, 65535] { R18467 += 1 };
  s1 -> s1 [0, 65535] { R18467 += 1, R18421 += 1, R18389 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R18467 += 1, R18421 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18467 += 1, R18421 += 1, R18389 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R18467 += 1, R18420 += 1, R18421 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18467 += 1, R18421 += 1, R18388 += 1, R18389 += 1 };
  s3 -> s4 [0, 65535] { R18467 += 1 };
  s3 -> s1 [0, 65535] { R18467 += 1, R18421 += 1, R18389 += 1, R1 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18467 += 1, R18421 += 1, R18388 += 1, R18389 += 1 };
  s4 -> s4 [0, 65535] { R18467 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18467 += 1 };
  s6 -> s6 [0, 65535] { R18467 += 1, R18421 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s0 -> s2 [0, 65535] { R18469 += 1, R18423 += 1, R18391 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R18469 += 1, R18422 += 1, R18423 += 1 };
  s0 -> s4 [0, 65535] { R18469 += 1, R18423 += 1, R18390 += 1, R18391 += 1 };
  s0 -> s0 [0, 65535] { R18468 += 1, R18469 += 1 };
  s0 -> s5 [87, 87] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s0 -> s1 [88, 65535] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s1 -> s1 [0, 86] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s1 -> s1 [0, 65535] { R18469 += 1, R18423 += 1 };
  s1 -> s6 [0, 65535] { R18469 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [87, 87] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s1 -> s1 [88, 65535] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s2 -> s1 [0, 86] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s2 -> s2 [0, 65535] { R18469 += 1, R18423 += 1, R18391 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R18469 += 1, R18423 += 1 };
  s2 -> s6 [0, 65535] { R18469 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [87, 87] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s2 -> s1 [88, 65535] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s3 -> s1 [0, 86] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s3 -> s2 [0, 65535] { R18469 += 1, R18423 += 1, R18391 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R18469 += 1, R18422 += 1, R18423 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R18469 += 1, R18423 += 1, R18390 += 1, R18391 += 1 };
  s3 -> s5 [87, 87] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s3 -> s1 [88, 65535] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s4 -> s1 [0, 86] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s4 -> s2 [0, 65535] { R18469 += 1, R18423 += 1, R18391 += 1, R7 += 1 };
  s4 -> s6 [0, 65535] { R18469 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R18469 += 1, R18423 += 1, R18390 += 1, R18391 += 1 };
  s4 -> s5 [87, 87] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s4 -> s1 [88, 65535] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s5 -> s5 [0, 65535] { R18469 += 1, R18423 += 1, R18391 += 1 };
  s6 -> s6 [0, 65535] { R18469 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R18469 += 1, R18423 += 1 };
  s8 -> s6 [0, 65535] { R18469 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s0 -> s2 [0, 65535] { R18471 += 1, R18425 += 1, R18392 += 1, R18393 += 1 };
  s0 -> s3 [0, 65535] { R18471 += 1, R18425 += 1, R18393 += 1, R18374 += 1, R18375 += 1 };
  s0 -> s4 [0, 65535] { R18471 += 1, R18424 += 1, R18425 += 1 };
  s0 -> s0 [0, 65535] { R18470 += 1, R18471 += 1 };
  s0 -> s1 [88, 65535] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s1 -> s1 [0, 86] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s1 -> s6 [0, 65535] { R18471 += 1 };
  s1 -> s7 [0, 65535] { R18471 += 1, R18425 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18471 += 1, R18425 += 1, R18393 += 1 };
  s1 -> s1 [88, 65535] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s2 -> s1 [0, 86] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s2 -> s2 [0, 65535] { R18471 += 1, R18425 += 1, R18392 += 1, R18393 += 1 };
  s2 -> s3 [0, 65535] { R18471 += 1, R18425 += 1, R18393 += 1, R18374 += 1, R18375 += 1 };
  s2 -> s6 [0, 65535] { R18471 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s3 -> s1 [0, 86] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s3 -> s3 [0, 65535] { R18471 += 1, R18425 += 1, R18393 += 1, R18374 += 1, R18375 += 1 };
  s3 -> s6 [0, 65535] { R18471 += 1 };
  s3 -> s7 [0, 65535] { R18471 += 1, R18425 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s4 -> s1 [0, 86] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s4 -> s2 [0, 65535] { R18471 += 1, R18425 += 1, R18392 += 1, R18393 += 1 };
  s4 -> s3 [0, 65535] { R18471 += 1, R18425 += 1, R18393 += 1, R18374 += 1, R18375 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18471 += 1, R18424 += 1, R18425 += 1 };
  s4 -> s1 [88, 65535] { R18471 += 1, R18425 += 1, R18393 += 1, R18375 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18471 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18471 += 1 };
  s7 -> s7 [0, 65535] { R18471 += 1, R18425 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1, R18377 += 1, R17933 += 1 };
  s0 -> s2 [0, 65535] { R18473 += 1, R18426 += 1, R18427 += 1 };
  s0 -> s0 [0, 65535] { R18472 += 1, R18473 += 1 };
  s0 -> s3 [0, 65535] { R18473 += 1, R18427 += 1, R18394 += 1, R18395 += 1 };
  s0 -> s4 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1, R18376 += 1, R18377 += 1 };
  s1 -> s8 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1 };
  s1 -> s1 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1, R18377 += 1, R17933 += 1 };
  s1 -> s5 [0, 65535] { R18473 += 1, R18427 += 1 };
  s1 -> s6 [0, 65535] { R18473 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1, R18377 += 1, R17933 += 1 };
  s2 -> s2 [0, 65535] { R18473 += 1, R18426 += 1, R18427 += 1 };
  s2 -> s3 [0, 65535] { R18473 += 1, R18427 += 1, R18394 += 1, R18395 += 1 };
  s2 -> s4 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1, R18376 += 1, R18377 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s1 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1, R18377 += 1, R17933 += 1 };
  s3 -> s6 [0, 65535] { R18473 += 1 };
  s3 -> s3 [0, 65535] { R18473 += 1, R18427 += 1, R18394 += 1, R18395 += 1 };
  s3 -> s4 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1, R18376 += 1, R18377 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s1 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1, R18377 += 1, R17933 += 1 };
  s4 -> s5 [0, 65535] { R18473 += 1, R18427 += 1 };
  s4 -> s6 [0, 65535] { R18473 += 1 };
  s4 -> s4 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1, R18376 += 1, R18377 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R18473 += 1, R18427 += 1 };
  s5 -> s6 [0, 65535] { R18473 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R18473 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R18473 += 1, R18427 += 1, R18395 += 1 };
  s8 -> s5 [0, 65535] { R18473 += 1, R18427 += 1 };
  s8 -> s6 [0, 65535] { R18473 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R18475 += 1, R18429 += 1, R18396 += 1, R18397 += 1 };
  s0 -> s2 [0, 65535] { R18475 += 1, R18428 += 1, R18429 += 1 };
  s0 -> s3 [0, 65535] { R18475 += 1, R18429 += 1, R18397 += 1, R18378 += 1, R18379 += 1 };
  s0 -> s0 [0, 65535] { R18474 += 1, R18475 += 1 };
  s0 -> s4 [104, 104] { R18475 += 1, R18429 += 1, R18397 += 1, R18379 += 1 };
  s1 -> s1 [0, 65535] { R18475 += 1, R18429 += 1, R18396 += 1, R18397 += 1 };
  s1 -> s3 [0, 65535] { R18475 += 1, R18429 += 1, R18397 += 1, R18378 += 1, R18379 += 1 };
  s1 -> s4 [104, 104] { R18475 += 1, R18429 += 1, R18397 += 1, R18379 += 1 };
  s2 -> s1 [0, 65535] { R18475 += 1, R18429 += 1, R18396 += 1, R18397 += 1 };
  s2 -> s2 [0, 65535] { R18475 += 1, R18428 += 1, R18429 += 1 };
  s2 -> s3 [0, 65535] { R18475 += 1, R18429 += 1, R18397 += 1, R18378 += 1, R18379 += 1 };
  s2 -> s4 [104, 104] { R18475 += 1, R18429 += 1, R18397 += 1, R18379 += 1 };
  s3 -> s3 [0, 65535] { R18475 += 1, R18429 += 1, R18397 += 1, R18378 += 1, R18379 += 1 };
  s3 -> s4 [104, 104] { R18475 += 1, R18429 += 1, R18397 += 1, R18379 += 1 };
  s4 -> s5 [111, 111] { R18475 += 1, R18429 += 1, R18397 += 1, R18379 += 1 };
  s5 -> s6 [115, 115] { R18475 += 1, R18429 += 1, R18397 += 1, R18379 += 1 };
  s6 -> s7 [116, 116] { R18475 += 1, R18429 += 1, R18397 += 1, R18379 += 1 };
  s7 -> s8 [0, 65535] { R18475 += 1 };
  s7 -> s9 [0, 65535] { R18475 += 1, R18429 += 1 };
  s7 -> s10 [0, 65535];
  s7 -> s7 [0, 65535] { R18475 += 1, R18429 += 1, R18397 += 1 };
  s8 -> s8 [0, 65535] { R18475 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s8 [0, 65535] { R18475 += 1 };
  s9 -> s9 [0, 65535] { R18475 += 1, R18429 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s7, s8, s9, s10;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1, R18382 += 1, R18383 += 1 };
  s0 -> s0 [0, 65535] { R18476 += 1, R18477 += 1 };
  s0 -> s2 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1, R18383 += 1, R17934 += 1 };
  s0 -> s3 [0, 65535] { R18477 += 1, R18430 += 1, R18431 += 1 };
  s0 -> s4 [0, 65535] { R18477 += 1, R18431 += 1, R18398 += 1, R18399 += 1 };
  s1 -> s1 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1, R18382 += 1, R18383 += 1 };
  s1 -> s2 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1, R18383 += 1, R17934 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18477 += 1 };
  s1 -> s8 [0, 65535] { R18477 += 1, R18431 += 1 };
  s2 -> s2 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1, R18383 += 1, R17934 += 1 };
  s2 -> s7 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18477 += 1 };
  s2 -> s8 [0, 65535] { R18477 += 1, R18431 += 1 };
  s3 -> s1 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1, R18382 += 1, R18383 += 1 };
  s3 -> s2 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1, R18383 += 1, R17934 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18477 += 1, R18430 += 1, R18431 += 1 };
  s3 -> s4 [0, 65535] { R18477 += 1, R18431 += 1, R18398 += 1, R18399 += 1 };
  s4 -> s1 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1, R18382 += 1, R18383 += 1 };
  s4 -> s2 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1, R18383 += 1, R17934 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18477 += 1 };
  s4 -> s4 [0, 65535] { R18477 += 1, R18431 += 1, R18398 += 1, R18399 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18477 += 1 };
  s7 -> s7 [0, 65535] { R18477 += 1, R18431 += 1, R18399 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18477 += 1 };
  s7 -> s8 [0, 65535] { R18477 += 1, R18431 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R18477 += 1 };
  s8 -> s8 [0, 65535] { R18477 += 1, R18431 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R18479 += 1, R18432 += 1, R18433 += 1 };
  s0 -> s2 [0, 65535] { R18479 += 1, R18433 += 1, R18400 += 1, R18401 += 1 };
  s0 -> s3 [0, 65535] { R18479 += 1, R18433 += 1, R18401 += 1, R18384 += 1, R18385 += 1 };
  s0 -> s0 [0, 65535] { R18478 += 1, R18479 += 1 };
  s0 -> s4 [108, 108] { R18479 += 1, R18433 += 1, R18401 += 1, R18385 += 1 };
  s1 -> s1 [0, 65535] { R18479 += 1, R18432 += 1, R18433 += 1 };
  s1 -> s2 [0, 65535] { R18479 += 1, R18433 += 1, R18400 += 1, R18401 += 1 };
  s1 -> s3 [0, 65535] { R18479 += 1, R18433 += 1, R18401 += 1, R18384 += 1, R18385 += 1 };
  s1 -> s4 [108, 108] { R18479 += 1, R18433 += 1, R18401 += 1, R18385 += 1 };
  s2 -> s2 [0, 65535] { R18479 += 1, R18433 += 1, R18400 += 1, R18401 += 1 };
  s2 -> s3 [0, 65535] { R18479 += 1, R18433 += 1, R18401 += 1, R18384 += 1, R18385 += 1 };
  s2 -> s4 [108, 108] { R18479 += 1, R18433 += 1, R18401 += 1, R18385 += 1 };
  s3 -> s3 [0, 65535] { R18479 += 1, R18433 += 1, R18401 += 1, R18384 += 1, R18385 += 1 };
  s3 -> s4 [108, 108] { R18479 += 1, R18433 += 1, R18401 += 1, R18385 += 1 };
  s4 -> s5 [111, 111] { R18479 += 1, R18433 += 1, R18401 += 1, R18385 += 1 };
  s5 -> s6 [99, 99] { R18479 += 1, R18433 += 1, R18401 += 1, R18385 += 1 };
  s6 -> s7 [97, 97] { R18479 += 1, R18433 += 1, R18401 += 1, R18385 += 1 };
  s7 -> s8 [108, 108] { R18479 += 1, R18433 += 1, R18401 += 1, R18385 += 1 };
  s8 -> s9 [0, 65535] { R18479 += 1, R18433 += 1 };
  s8 -> s8 [0, 65535] { R18479 += 1, R18433 += 1, R18401 += 1 };
  s8 -> s10 [0, 65535] { R18479 += 1 };
  s8 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R18479 += 1, R18433 += 1 };
  s9 -> s10 [0, 65535] { R18479 += 1 };
  s9 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R18479 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s8, s9, s10, s11;
};
};
constraint R1 = R18379 && R2 = R18401 && R3 = R17951 && R4 = R18479 && R12 = 0 && R13 = -1 && R11960 = 0 && R11961 = R18433 && R17940 = 0 && R17941 = 1 && R17942 = 0 && R17943 = 1 && R17944 - R18433 = 1 && R17945 = R17951 && R17946 - R18433 = 1 && R17947 = R17951 && R17948 - R18433 = 1 && R17949 = R17951 && R17950 - R18433 = 1 && R18378 = 0 && R18384 = 0 && R18385 = 0 && R18386 = 0 && R18387 = R18401 && R18388 = 0 && R18389 = R18401 && R18390 = 0 && R18391 = R18401 && R18392 = 0 && R18393 = R18401 && R18394 = 0 && R18395 = R18401 && R18396 = 0 && R18397 = R18401 && R18398 = 0 && R18399 = R18401 && R18400 = 0 && R18402 = 0 && R18403 = R18433 && R18404 = 0 && R18405 = R18433 && R18406 = 0 && R18407 = R18433 && R18408 = 0 && R18409 = R18433 && R18410 = 0 && R18411 = R18433 && R18412 = 0 && R18413 = R18433 && R18414 = 0 && R18415 = R18433 && R18416 = 0 && R18417 = R18433 && R18418 = 0 && R18419 = R18433 && R18420 = 0 && R18421 = R18433 && R18422 = 0 && R18423 = R18433 && R18424 = 0 && R18425 = R18433 && R18426 = 0 && R18427 = R18433 && R18428 = 0 && R18429 = R18433 && R18430 = 0 && R18431 = R18433 && R18432 = 0 && R18434 = 10 && R18435 = R18479 && R18436 = 10 && R18437 = R18479 && R18438 = 10 && R18439 = R18479 && R18440 = 10 && R18441 = R18479 && R18442 = 10 && R18443 = R18479 && R18444 = 10 && R18445 = R18479 && R18446 = 10 && R18447 = R18479 && R18448 = 10 && R18449 = R18479 && R18450 = 10 && R18451 = R18479 && R18452 = 10 && R18453 = R18479 && R18454 = 10 && R18455 = R18479 && R18456 = 10 && R18457 = R18479 && R18458 = 10 && R18459 = R18479 && R18460 = 10 && R18461 = R18479 && R18462 = 10 && R18463 = R18479 && R18464 = 10 && R18465 = R18479 && R18466 = 10 && R18467 = R18479 && R18468 = 10 && R18469 = R18479 && R18470 = 10 && R18471 = R18479 && R18472 = 10 && R18473 = R18479 && R18474 = 10 && R18475 = R18479 && R18476 = 10 && R18477 = R18479 && R18478 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R18433 < R17951 && -1 < R18379 && 0 < R18401 && -1 < R18433 && 9 < R18479 && (R17936 != 0 || ((R5 != 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R0 = R17937 || R17937 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R17937 != 1 || -1 < R0) && (R0 = R17937 || R17937 = 1))))) && (R17938 != 0 || ((R5 != 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R0 = R17939 || R17939 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R17939 != 1 || -1 < R0) && (R0 = R17939 || R17939 = 1))))) && (R18374 != 0 || R18375 = R18379 || (R17933 = 0 && R18379 = 0)) && (R18376 != 0 || R18377 = R18379 || (R17933 = 0 && R18379 = 0)) && (R17934 = 0 || (R18382 = 0 && R18383 = 0)) && (R17935 = 0 || (R18380 = 0 && R18381 = 0)) && (R17936 = 0 || (R5 = 0 && R0 < 0)) && (R17938 = 0 || (R5 = 0 && R0 < 0)) && (R18374 = 0 || (R17933 = 0 && R18379 = 0)) && (R18376 = 0 || (R17933 = 0 && R18379 = 0));
// End of Parikh automata intersection problem
