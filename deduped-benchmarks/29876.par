// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11960, R11961, R12, R13, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R18798, R18799, R18800, R18801, R18802, R18803, R18804, R18805, R18806, R18807, R18808, R18809, R18810, R18811, R18812, R18813, R18814, R18815, R18816, R18817, R18818, R18819, R18820, R18821, R18822, R18823, R18824, R18825, R18826, R18827, R18828, R18829, R18830, R18831, R18832, R18833, R18834, R18835, R18836, R18837, R18838, R18839, R18840, R18841, R18842, R18843, R18844, R18845, R18846, R18847, R18848, R18849, R18850, R18851, R18852, R18853, R18854, R18855, R18856, R18857, R18858, R18859, R18860, R18861, R18862, R18863, R18864, R18865, R18866, R18867, R18868, R18869, R18870, R18871, R18872, R18873, R18874, R18875, R18876, R18877, R18878, R18879, R18880, R18881, R18882, R18883, R18884, R18885, R18886, R18887, R18888, R18889, R18890, R18891, R18892, R18893, R18894, R18895, R18896, R18897, R18898, R18899, R18900, R18901, R18902, R18903, R2, R3, R4, R5, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18859 += 1 };
  s0 -> s0 [0, 65535] { R18858 += 1, R18859 += 1 };
  s0 -> s2 [46, 46] { R18859 += 1 };
  s0 -> s3 [47, 47] { R18859 += 1 };
  s0 -> s1 [48, 65535] { R18859 += 1 };
  s1 -> s1 [0, 45] { R18859 += 1 };
  s1 -> s2 [46, 46] { R18859 += 1 };
  s1 -> s3 [47, 47] { R18859 += 1 };
  s1 -> s1 [48, 65535] { R18859 += 1 };
  s2 -> s1 [0, 45] { R18859 += 1 };
  s2 -> s2 [46, 46] { R18859 += 1 };
  s2 -> s3 [47, 47] { R18859 += 1 };
  s2 -> s1 [48, 114] { R18859 += 1 };
  s2 -> s8 [115, 115] { R18859 += 1 };
  s2 -> s1 [116, 65535] { R18859 += 1 };
  s3 -> s3 [0, 45] { R18859 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18859 += 1 };
  s3 -> s3 [47, 65535] { R18859 += 1 };
  s4 -> s3 [0, 45] { R18859 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18859 += 1 };
  s4 -> s3 [47, 114] { R18859 += 1 };
  s4 -> s5 [115, 115] { R18859 += 1 };
  s4 -> s3 [116, 65535] { R18859 += 1 };
  s5 -> s3 [0, 45] { R18859 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18859 += 1 };
  s5 -> s3 [47, 110] { R18859 += 1 };
  s5 -> s6 [111, 111] { R18859 += 1 };
  s5 -> s3 [112, 65535] { R18859 += 1 };
  s6 -> s3 [0, 45] { R18859 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18859 += 1 };
  s6 -> s3 [47, 98] { R18859 += 1 };
  s6 -> s7 [99, 99] { R18859 += 1 };
  s6 -> s3 [100, 65535] { R18859 += 1 };
  s7 -> s3 [0, 45] { R18859 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18859 += 1 };
  s7 -> s3 [47, 106] { R18859 += 1 };
  s7 -> s3 [108, 65535] { R18859 += 1 };
  s8 -> s1 [0, 45] { R18859 += 1 };
  s8 -> s2 [46, 46] { R18859 += 1 };
  s8 -> s3 [47, 47] { R18859 += 1 };
  s8 -> s1 [48, 110] { R18859 += 1 };
  s8 -> s9 [111, 111] { R18859 += 1 };
  s8 -> s1 [112, 65535] { R18859 += 1 };
  s9 -> s1 [0, 45] { R18859 += 1 };
  s9 -> s2 [46, 46] { R18859 += 1 };
  s9 -> s3 [47, 47] { R18859 += 1 };
  s9 -> s1 [48, 98] { R18859 += 1 };
  s9 -> s10 [99, 99] { R18859 += 1 };
  s9 -> s1 [100, 65535] { R18859 += 1 };
  s10 -> s1 [0, 45] { R18859 += 1 };
  s10 -> s2 [46, 46] { R18859 += 1 };
  s10 -> s3 [47, 47] { R18859 += 1 };
  s10 -> s1 [48, 106] { R18859 += 1 };
  s10 -> s1 [108, 65535] { R18859 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R18861 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R18860 += 1, R18861 += 1 };
  s1 -> s1 [0, 65535] { R18861 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18863 += 1, R11961 += 1 };
  s0 -> s0 [0, 65535] { R18862 += 1, R18863 += 1 };
  s0 -> s2 [0, 65535] { R18863 += 1, R11960 += 1, R11961 += 1 };
  s0 -> s3 [47, 47] { R18863 += 1 };
  s0 -> s1 [48, 65535] { R18863 += 1, R11961 += 1 };
  s1 -> s1 [0, 46] { R18863 += 1, R11961 += 1 };
  s1 -> s3 [47, 47] { R18863 += 1 };
  s1 -> s1 [48, 65535] { R18863 += 1, R11961 += 1 };
  s2 -> s1 [0, 46] { R18863 += 1, R11961 += 1 };
  s2 -> s2 [0, 65535] { R18863 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [47, 47] { R18863 += 1 };
  s2 -> s1 [48, 65535] { R18863 += 1, R11961 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18863 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18865 += 1, R17945 += 1 };
  s0 -> s2 [0, 65535] { R18865 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R18864 += 1, R18865 += 1 };
  s0 -> s1 [38, 42] { R18865 += 1, R17945 += 1 };
  s0 -> s1 [44, 45] { R18865 += 1, R17945 += 1 };
  s0 -> s1 [47, 62] { R18865 += 1, R17945 += 1 };
  s0 -> s1 [64, 65535] { R18865 += 1, R17945 += 1 };
  s1 -> s1 [0, 36] { R18865 += 1, R17945 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18865 += 1 };
  s1 -> s1 [38, 42] { R18865 += 1, R17945 += 1 };
  s1 -> s1 [44, 45] { R18865 += 1, R17945 += 1 };
  s1 -> s1 [47, 62] { R18865 += 1, R17945 += 1 };
  s1 -> s1 [64, 65535] { R18865 += 1, R17945 += 1 };
  s2 -> s1 [0, 36] { R18865 += 1, R17945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18865 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s1 [38, 42] { R18865 += 1, R17945 += 1 };
  s2 -> s1 [44, 45] { R18865 += 1, R17945 += 1 };
  s2 -> s1 [47, 62] { R18865 += 1, R17945 += 1 };
  s2 -> s1 [64, 65535] { R18865 += 1, R17945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R18867 += 1, R17947 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R18866 += 1, R18867 += 1 };
  s0 -> s2 [0, 65535] { R18867 += 1, R17946 += 1, R17947 += 1 };
  s1 -> s1 [0, 65535] { R18867 += 1, R17947 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18867 += 1 };
  s2 -> s1 [0, 65535] { R18867 += 1, R17947 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18867 += 1, R17946 += 1, R17947 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18867 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s2 [0, 65535] { R18869 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s3 [0, 65535] { R18869 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s0 [0, 65535] { R18868 += 1, R18869 += 1 };
  s0 -> s4 [63, 63] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s1 [64, 65535] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s7 [0, 65535] { R18869 += 1, R17949 += 1 };
  s1 -> s6 [0, 65535] { R18869 += 1 };
  s1 -> s1 [0, 65535] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s2 [0, 65535] { R18869 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s6 [0, 65535] { R18869 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [64, 65535] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [0, 62] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s2 [0, 65535] { R18869 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s3 -> s3 [0, 65535] { R18869 += 1, R17948 += 1, R17949 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [64, 65535] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s4 -> s1 [0, 65535] { R18869 += 1, R17949 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18869 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18869 += 1, R17949 += 1 };
  s7 -> s6 [0, 65535] { R18869 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18871 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s0 [0, 65535] { R18870 += 1, R18871 += 1 };
  s0 -> s2 [0, 65535] { R18871 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s0 -> s3 [0, 65535] { R18871 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R18871 += 1, R17950 += 1, R17951 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R18871 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s1 -> s3 [0, 65535] { R18871 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18871 += 1 };
  s2 -> s2 [0, 65535] { R18871 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s2 -> s3 [0, 65535] { R18871 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18871 += 1 };
  s3 -> s6 [0, 65535] { R18871 += 1, R17951 += 1 };
  s3 -> s3 [0, 65535] { R18871 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18871 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18871 += 1 };
  s6 -> s6 [0, 65535] { R18871 += 1, R17951 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R18873 += 1, R18827 += 1 };
  s0 -> s0 [0, 65535] { R18872 += 1, R18873 += 1 };
  s0 -> s2 [0, 65535] { R18873 += 1, R18826 += 1, R18827 += 1 };
  s0 -> s1 [45, 63] { R18873 += 1, R18827 += 1 };
  s0 -> s3 [87, 87] { R18873 += 1, R18827 += 1 };
  s0 -> s1 [88, 65535] { R18873 += 1, R18827 += 1 };
  s1 -> s1 [0, 43] { R18873 += 1, R18827 += 1 };
  s1 -> s1 [45, 63] { R18873 += 1, R18827 += 1 };
  s1 -> s3 [87, 87] { R18873 += 1, R18827 += 1 };
  s1 -> s1 [88, 65535] { R18873 += 1, R18827 += 1 };
  s2 -> s1 [0, 43] { R18873 += 1, R18827 += 1 };
  s2 -> s2 [0, 65535] { R18873 += 1, R18826 += 1, R18827 += 1 };
  s2 -> s1 [45, 63] { R18873 += 1, R18827 += 1 };
  s2 -> s3 [87, 87] { R18873 += 1, R18827 += 1 };
  s2 -> s1 [88, 65535] { R18873 += 1, R18827 += 1 };
  s3 -> s3 [0, 43] { R18873 += 1, R18827 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18873 += 1 };
  s3 -> s3 [45, 63] { R18873 += 1, R18827 += 1 };
  s3 -> s3 [87, 65535] { R18873 += 1, R18827 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R18874 += 1, R18875 += 1 };
  s0 -> s1 [0, 65535] { R18875 += 1, R18829 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R18875 += 1, R18828 += 1, R18829 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18875 += 1 };
  s1 -> s1 [0, 65535] { R18875 += 1, R18829 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18875 += 1, R18829 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R18875 += 1, R18828 += 1, R18829 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18875 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R18877 += 1, R18831 += 1 };
  s0 -> s2 [0, 65535] { R18877 += 1, R18830 += 1, R18831 += 1 };
  s0 -> s0 [0, 65535] { R18876 += 1, R18877 += 1 };
  s0 -> s3 [0, 65535] { R18877 += 1, R18831 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R18877 += 1, R18831 += 1 };
  s0 -> s1 [59, 65535] { R18877 += 1, R18831 += 1 };
  s1 -> s1 [0, 57] { R18877 += 1, R18831 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18877 += 1 };
  s1 -> s4 [58, 58] { R18877 += 1, R18831 += 1 };
  s1 -> s1 [59, 65535] { R18877 += 1, R18831 += 1 };
  s2 -> s1 [0, 57] { R18877 += 1, R18831 += 1 };
  s2 -> s2 [0, 65535] { R18877 += 1, R18830 += 1, R18831 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18877 += 1, R18831 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R18877 += 1, R18831 += 1 };
  s2 -> s1 [59, 65535] { R18877 += 1, R18831 += 1 };
  s3 -> s1 [0, 57] { R18877 += 1, R18831 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18877 += 1, R18831 += 1, R10 += 1 };
  s3 -> s6 [0, 65535] { R18877 += 1 };
  s3 -> s4 [58, 58] { R18877 += 1, R18831 += 1 };
  s3 -> s1 [59, 65535] { R18877 += 1, R18831 += 1 };
  s4 -> s4 [0, 65535] { R18877 += 1, R18831 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18877 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R18879 += 1, R18833 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R18879 += 1, R18833 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R18878 += 1, R18879 += 1 };
  s0 -> s3 [0, 65535] { R18879 += 1, R18832 += 1, R18833 += 1 };
  s0 -> s4 [87, 87] { R18879 += 1, R18833 += 1 };
  s0 -> s1 [88, 65535] { R18879 += 1, R18833 += 1, R13 += 1 };
  s1 -> s1 [0, 86] { R18879 += 1, R18833 += 1, R13 += 1 };
  s1 -> s4 [87, 87] { R18879 += 1, R18833 += 1 };
  s1 -> s1 [88, 65535] { R18879 += 1, R18833 += 1, R13 += 1 };
  s2 -> s1 [0, 86] { R18879 += 1, R18833 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R18879 += 1, R18833 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [87, 87] { R18879 += 1, R18833 += 1 };
  s2 -> s1 [88, 65535] { R18879 += 1, R18833 += 1, R13 += 1 };
  s3 -> s1 [0, 86] { R18879 += 1, R18833 += 1, R13 += 1 };
  s3 -> s2 [0, 65535] { R18879 += 1, R18833 += 1, R12 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R18879 += 1, R18832 += 1, R18833 += 1 };
  s3 -> s4 [87, 87] { R18879 += 1, R18833 += 1 };
  s3 -> s1 [88, 65535] { R18879 += 1, R18833 += 1, R13 += 1 };
  s4 -> s5 [0, 65535] { R18879 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18879 += 1, R18833 += 1 };
  s5 -> s5 [0, 65535] { R18879 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s0 -> s0 [0, 65535] { R18880 += 1, R18881 += 1 };
  s0 -> s2 [0, 65535] { R18881 += 1, R18835 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s3 [0, 65535] { R18881 += 1, R18834 += 1, R18835 += 1 };
  s0 -> s4 [91, 91] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s0 -> s1 [92, 65535] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s1 -> s6 [0, 65535] { R18881 += 1 };
  s1 -> s7 [0, 65535] { R18881 += 1, R18835 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s2 -> s1 [0, 90] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s2 -> s6 [0, 65535] { R18881 += 1 };
  s2 -> s2 [0, 65535] { R18881 += 1, R18835 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s2 -> s1 [92, 65535] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s3 -> s1 [0, 90] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s3 -> s2 [0, 65535] { R18881 += 1, R18835 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18881 += 1, R18834 += 1, R18835 += 1 };
  s3 -> s4 [91, 91] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s3 -> s1 [92, 65535] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s4 -> s1 [0, 65535] { R18881 += 1, R18835 += 1, R17941 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18881 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18881 += 1 };
  s7 -> s7 [0, 65535] { R18881 += 1, R18835 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R18883 += 1, R18837 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s0 [0, 65535] { R18882 += 1, R18883 += 1 };
  s0 -> s2 [0, 65535] { R18883 += 1, R18836 += 1, R18837 += 1 };
  s0 -> s3 [0, 65535] { R18883 += 1, R18837 += 1, R17943 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R18883 += 1, R18837 += 1, R17942 += 1, R17943 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R18883 += 1, R18837 += 1, R17943 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R18883 += 1 };
  s2 -> s1 [0, 65535] { R18883 += 1, R18837 += 1, R17942 += 1, R17943 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18883 += 1, R18836 += 1, R18837 += 1 };
  s2 -> s3 [0, 65535] { R18883 += 1, R18837 += 1, R17943 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18883 += 1, R18837 += 1 };
  s3 -> s3 [0, 65535] { R18883 += 1, R18837 += 1, R17943 += 1, R6 += 1 };
  s3 -> s6 [0, 65535] { R18883 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18883 += 1, R18837 += 1 };
  s5 -> s6 [0, 65535] { R18883 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18883 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R18884 += 1, R18885 += 1 };
  s0 -> s1 [0, 65535] { R18885 += 1, R18839 += 1, R18805 += 1, R17935 += 1 };
  s0 -> s2 [0, 65535] { R18885 += 1, R18838 += 1, R18839 += 1 };
  s0 -> s3 [0, 65535] { R18885 += 1, R18839 += 1, R18804 += 1, R18805 += 1 };
  s1 -> s6 [0, 65535] { R18885 += 1, R18839 += 1 };
  s1 -> s1 [0, 65535] { R18885 += 1, R18839 += 1, R18805 += 1, R17935 += 1 };
  s1 -> s4 [0, 65535] { R18885 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18885 += 1, R18839 += 1, R18805 += 1, R17935 += 1 };
  s2 -> s2 [0, 65535] { R18885 += 1, R18838 += 1, R18839 += 1 };
  s2 -> s3 [0, 65535] { R18885 += 1, R18839 += 1, R18804 += 1, R18805 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R18885 += 1, R18839 += 1, R18805 += 1, R17935 += 1 };
  s3 -> s4 [0, 65535] { R18885 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18885 += 1, R18839 += 1, R18804 += 1, R18805 += 1 };
  s4 -> s4 [0, 65535] { R18885 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18885 += 1, R18839 += 1 };
  s6 -> s4 [0, 65535] { R18885 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R18887 += 1, R18840 += 1, R18841 += 1 };
  s0 -> s2 [0, 65535] { R18887 += 1, R18841 += 1 };
  s0 -> s0 [0, 65535] { R18886 += 1, R18887 += 1 };
  s1 -> s1 [0, 65535] { R18887 += 1, R18840 += 1, R18841 += 1 };
  s1 -> s2 [0, 65535] { R18887 += 1, R18841 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18887 += 1, R18841 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18887 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18887 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s0 -> s0 [0, 65535] { R18888 += 1, R18889 += 1 };
  s0 -> s2 [0, 65535] { R18889 += 1, R18842 += 1, R18843 += 1 };
  s0 -> s3 [0, 65535] { R18889 += 1, R18843 += 1, R18810 += 1, R18811 += 1 };
  s0 -> s4 [87, 87] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s0 -> s1 [88, 65535] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s1 -> s1 [0, 86] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s1 -> s4 [87, 87] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s1 -> s1 [88, 65535] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s2 -> s1 [0, 86] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s2 -> s2 [0, 65535] { R18889 += 1, R18842 += 1, R18843 += 1 };
  s2 -> s3 [0, 65535] { R18889 += 1, R18843 += 1, R18810 += 1, R18811 += 1 };
  s2 -> s4 [87, 87] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s2 -> s1 [88, 65535] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s3 -> s1 [0, 86] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s3 -> s3 [0, 65535] { R18889 += 1, R18843 += 1, R18810 += 1, R18811 += 1 };
  s3 -> s4 [87, 87] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s3 -> s1 [88, 65535] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s4 -> s5 [0, 65535] { R18889 += 1, R18843 += 1 };
  s4 -> s4 [0, 65535] { R18889 += 1, R18843 += 1, R18811 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R18889 += 1 };
  s5 -> s5 [0, 65535] { R18889 += 1, R18843 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R18889 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18889 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R18890 += 1, R18891 += 1 };
  s0 -> s1 [0, 65535] { R18891 += 1, R18845 += 1, R18812 += 1, R18813 += 1 };
  s0 -> s2 [0, 65535] { R18891 += 1, R18844 += 1, R18845 += 1 };
  s0 -> s3 [0, 65535] { R18891 += 1, R18845 += 1, R18813 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18891 += 1 };
  s1 -> s1 [0, 65535] { R18891 += 1, R18845 += 1, R18812 += 1, R18813 += 1 };
  s1 -> s3 [0, 65535] { R18891 += 1, R18845 += 1, R18813 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18891 += 1, R18845 += 1, R18812 += 1, R18813 += 1 };
  s2 -> s2 [0, 65535] { R18891 += 1, R18844 += 1, R18845 += 1 };
  s2 -> s3 [0, 65535] { R18891 += 1, R18845 += 1, R18813 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R18891 += 1, R18845 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18891 += 1 };
  s3 -> s3 [0, 65535] { R18891 += 1, R18845 += 1, R18813 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R18891 += 1, R18845 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18891 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18891 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s0 -> s2 [0, 65535] { R18893 += 1, R18847 += 1, R18815 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R18893 += 1, R18846 += 1, R18847 += 1 };
  s0 -> s0 [0, 65535] { R18892 += 1, R18893 += 1 };
  s0 -> s4 [0, 65535] { R18893 += 1, R18847 += 1, R18814 += 1, R18815 += 1 };
  s0 -> s5 [87, 87] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s0 -> s1 [88, 65535] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s1 -> s1 [0, 86] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s1 -> s1 [0, 65535] { R18893 += 1, R18847 += 1 };
  s1 -> s6 [0, 65535] { R18893 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [87, 87] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s1 -> s1 [88, 65535] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s2 -> s1 [0, 86] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s2 -> s2 [0, 65535] { R18893 += 1, R18847 += 1, R18815 += 1, R7 += 1 };
  s2 -> s6 [0, 65535] { R18893 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R18893 += 1, R18847 += 1 };
  s2 -> s5 [87, 87] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s2 -> s1 [88, 65535] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s3 -> s1 [0, 86] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s3 -> s2 [0, 65535] { R18893 += 1, R18847 += 1, R18815 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R18893 += 1, R18846 += 1, R18847 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R18893 += 1, R18847 += 1, R18814 += 1, R18815 += 1 };
  s3 -> s5 [87, 87] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s3 -> s1 [88, 65535] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s4 -> s1 [0, 86] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s4 -> s2 [0, 65535] { R18893 += 1, R18847 += 1, R18815 += 1, R7 += 1 };
  s4 -> s6 [0, 65535] { R18893 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R18893 += 1, R18847 += 1, R18814 += 1, R18815 += 1 };
  s4 -> s5 [87, 87] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s4 -> s1 [88, 65535] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s5 -> s5 [0, 65535] { R18893 += 1, R18847 += 1, R18815 += 1 };
  s6 -> s6 [0, 65535] { R18893 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R18893 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R18893 += 1, R18847 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s0 -> s2 [0, 65535] { R18895 += 1, R18849 += 1, R18816 += 1, R18817 += 1 };
  s0 -> s3 [0, 65535] { R18895 += 1, R18848 += 1, R18849 += 1 };
  s0 -> s4 [0, 65535] { R18895 += 1, R18849 += 1, R18817 += 1, R18798 += 1, R18799 += 1 };
  s0 -> s0 [0, 65535] { R18894 += 1, R18895 += 1 };
  s0 -> s1 [88, 65535] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s1 -> s1 [0, 86] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s1 -> s5 [0, 65535] { R18895 += 1, R18849 += 1 };
  s1 -> s6 [0, 65535] { R18895 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R18895 += 1, R18849 += 1, R18817 += 1 };
  s1 -> s1 [88, 65535] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s2 -> s1 [0, 86] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s2 -> s6 [0, 65535] { R18895 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R18895 += 1, R18849 += 1, R18816 += 1, R18817 += 1 };
  s2 -> s4 [0, 65535] { R18895 += 1, R18849 += 1, R18817 += 1, R18798 += 1, R18799 += 1 };
  s2 -> s1 [88, 65535] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s3 -> s1 [0, 86] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s2 [0, 65535] { R18895 += 1, R18849 += 1, R18816 += 1, R18817 += 1 };
  s3 -> s3 [0, 65535] { R18895 += 1, R18848 += 1, R18849 += 1 };
  s3 -> s4 [0, 65535] { R18895 += 1, R18849 += 1, R18817 += 1, R18798 += 1, R18799 += 1 };
  s3 -> s1 [88, 65535] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s4 -> s1 [0, 86] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s4 -> s5 [0, 65535] { R18895 += 1, R18849 += 1 };
  s4 -> s6 [0, 65535] { R18895 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R18895 += 1, R18849 += 1, R18817 += 1, R18798 += 1, R18799 += 1 };
  s4 -> s1 [88, 65535] { R18895 += 1, R18849 += 1, R18817 += 1, R18799 += 1 };
  s5 -> s5 [0, 65535] { R18895 += 1, R18849 += 1 };
  s5 -> s6 [0, 65535] { R18895 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R18895 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1, R18801 += 1, R17933 += 1 };
  s0 -> s2 [0, 65535] { R18897 += 1, R18851 += 1, R18818 += 1, R18819 += 1 };
  s0 -> s3 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1, R18800 += 1, R18801 += 1 };
  s0 -> s4 [0, 65535] { R18897 += 1, R18850 += 1, R18851 += 1 };
  s0 -> s0 [0, 65535] { R18896 += 1, R18897 += 1 };
  s1 -> s8 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1, R18801 += 1, R17933 += 1 };
  s1 -> s6 [0, 65535] { R18897 += 1 };
  s1 -> s7 [0, 65535] { R18897 += 1, R18851 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1, R18801 += 1, R17933 += 1 };
  s2 -> s2 [0, 65535] { R18897 += 1, R18851 += 1, R18818 += 1, R18819 += 1 };
  s2 -> s6 [0, 65535] { R18897 += 1 };
  s2 -> s3 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1, R18800 += 1, R18801 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1, R18801 += 1, R17933 += 1 };
  s3 -> s6 [0, 65535] { R18897 += 1 };
  s3 -> s3 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1, R18800 += 1, R18801 += 1 };
  s3 -> s7 [0, 65535] { R18897 += 1, R18851 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1, R18801 += 1, R17933 += 1 };
  s4 -> s2 [0, 65535] { R18897 += 1, R18851 += 1, R18818 += 1, R18819 += 1 };
  s4 -> s3 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1, R18800 += 1, R18801 += 1 };
  s4 -> s4 [0, 65535] { R18897 += 1, R18850 += 1, R18851 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18897 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18897 += 1 };
  s7 -> s7 [0, 65535] { R18897 += 1, R18851 += 1 };
  s8 -> s8 [0, 65535] { R18897 += 1, R18851 += 1, R18819 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R18897 += 1 };
  s8 -> s7 [0, 65535] { R18897 += 1, R18851 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R18898 += 1, R18899 += 1 };
  s0 -> s1 [0, 65535] { R18899 += 1, R18853 += 1, R18820 += 1, R18821 += 1 };
  s0 -> s2 [0, 65535] { R18899 += 1, R18853 += 1, R18821 += 1, R18802 += 1, R18803 += 1 };
  s0 -> s3 [0, 65535] { R18899 += 1, R18852 += 1, R18853 += 1 };
  s0 -> s4 [111, 111] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s1 -> s1 [0, 65535] { R18899 += 1, R18853 += 1, R18820 += 1, R18821 += 1 };
  s1 -> s2 [0, 65535] { R18899 += 1, R18853 += 1, R18821 += 1, R18802 += 1, R18803 += 1 };
  s1 -> s4 [111, 111] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s2 -> s2 [0, 65535] { R18899 += 1, R18853 += 1, R18821 += 1, R18802 += 1, R18803 += 1 };
  s2 -> s4 [111, 111] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s3 -> s1 [0, 65535] { R18899 += 1, R18853 += 1, R18820 += 1, R18821 += 1 };
  s3 -> s2 [0, 65535] { R18899 += 1, R18853 += 1, R18821 += 1, R18802 += 1, R18803 += 1 };
  s3 -> s3 [0, 65535] { R18899 += 1, R18852 += 1, R18853 += 1 };
  s3 -> s4 [111, 111] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s4 -> s5 [99, 99] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s5 -> s6 [97, 97] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s6 -> s7 [108, 108] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s7 -> s8 [104, 104] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s8 -> s9 [111, 111] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s9 -> s10 [115, 115] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s10 -> s11 [116, 116] { R18899 += 1, R18853 += 1, R18821 += 1, R18803 += 1 };
  s11 -> s12 [0, 65535] { R18899 += 1 };
  s11 -> s13 [0, 65535];
  s11 -> s11 [0, 65535] { R18899 += 1, R18853 += 1, R18821 += 1 };
  s11 -> s14 [0, 65535] { R18899 += 1, R18853 += 1 };
  s12 -> s12 [0, 65535] { R18899 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s12 [0, 65535] { R18899 += 1 };
  s14 -> s13 [0, 65535];
  s14 -> s14 [0, 65535] { R18899 += 1, R18853 += 1 };
  accepting s11, s12, s13, s14;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1, R18806 += 1, R18807 += 1 };
  s0 -> s2 [0, 65535] { R18901 += 1, R18855 += 1, R18822 += 1, R18823 += 1 };
  s0 -> s3 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1, R18807 += 1, R17934 += 1 };
  s0 -> s4 [0, 65535] { R18901 += 1, R18854 += 1, R18855 += 1 };
  s0 -> s0 [0, 65535] { R18900 += 1, R18901 += 1 };
  s1 -> s6 [0, 65535] { R18901 += 1, R18855 += 1 };
  s1 -> s1 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1, R18806 += 1, R18807 += 1 };
  s1 -> s7 [0, 65535] { R18901 += 1 };
  s1 -> s3 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1, R18807 += 1, R17934 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1, R18806 += 1, R18807 += 1 };
  s2 -> s7 [0, 65535] { R18901 += 1 };
  s2 -> s2 [0, 65535] { R18901 += 1, R18855 += 1, R18822 += 1, R18823 += 1 };
  s2 -> s3 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1, R18807 += 1, R17934 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18901 += 1, R18855 += 1 };
  s3 -> s7 [0, 65535] { R18901 += 1 };
  s3 -> s3 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1, R18807 += 1, R17934 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s8 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1 };
  s4 -> s1 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1, R18806 += 1, R18807 += 1 };
  s4 -> s2 [0, 65535] { R18901 += 1, R18855 += 1, R18822 += 1, R18823 += 1 };
  s4 -> s3 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1, R18807 += 1, R17934 += 1 };
  s4 -> s4 [0, 65535] { R18901 += 1, R18854 += 1, R18855 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18901 += 1, R18855 += 1 };
  s6 -> s7 [0, 65535] { R18901 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18901 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R18901 += 1, R18855 += 1 };
  s8 -> s7 [0, 65535] { R18901 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R18901 += 1, R18855 += 1, R18823 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R18902 += 1, R18903 += 1 };
  s0 -> s1 [0, 65535] { R18903 += 1, R18857 += 1, R18824 += 1, R18825 += 1 };
  s0 -> s2 [0, 65535] { R18903 += 1, R18856 += 1, R18857 += 1 };
  s0 -> s3 [0, 65535] { R18903 += 1, R18857 += 1, R18825 += 1, R18808 += 1, R18809 += 1 };
  s0 -> s4 [108, 108] { R18903 += 1, R18857 += 1, R18825 += 1, R18809 += 1 };
  s1 -> s1 [0, 65535] { R18903 += 1, R18857 += 1, R18824 += 1, R18825 += 1 };
  s1 -> s3 [0, 65535] { R18903 += 1, R18857 += 1, R18825 += 1, R18808 += 1, R18809 += 1 };
  s1 -> s4 [108, 108] { R18903 += 1, R18857 += 1, R18825 += 1, R18809 += 1 };
  s2 -> s1 [0, 65535] { R18903 += 1, R18857 += 1, R18824 += 1, R18825 += 1 };
  s2 -> s2 [0, 65535] { R18903 += 1, R18856 += 1, R18857 += 1 };
  s2 -> s3 [0, 65535] { R18903 += 1, R18857 += 1, R18825 += 1, R18808 += 1, R18809 += 1 };
  s2 -> s4 [108, 108] { R18903 += 1, R18857 += 1, R18825 += 1, R18809 += 1 };
  s3 -> s3 [0, 65535] { R18903 += 1, R18857 += 1, R18825 += 1, R18808 += 1, R18809 += 1 };
  s3 -> s4 [108, 108] { R18903 += 1, R18857 += 1, R18825 += 1, R18809 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18903 += 1 };
  s4 -> s7 [0, 65535] { R18903 += 1, R18857 += 1 };
  s4 -> s4 [0, 65535] { R18903 += 1, R18857 += 1, R18825 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18903 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18903 += 1 };
  s7 -> s7 [0, 65535] { R18903 += 1, R18857 += 1 };
  accepting s4, s5, s6, s7;
};
};
constraint R1 = R18803 && R2 = R18825 && R3 = R17951 && R4 = R18903 && R12 = 0 && R13 = -1 && R11960 = 0 && R11961 = R18857 && R17940 = 0 && R17941 = 1 && R17942 = 0 && R17943 = 1 && R17944 - R18857 = 1 && R17945 = R17951 && R17946 - R18857 = 1 && R17947 = R17951 && R17948 - R18857 = 1 && R17949 = R17951 && R17950 - R18857 = 1 && R18802 = 0 && R18808 = 0 && R18809 = 0 && R18810 = 0 && R18811 = R18825 && R18812 = 0 && R18813 = R18825 && R18814 = 0 && R18815 = R18825 && R18816 = 0 && R18817 = R18825 && R18818 = 0 && R18819 = R18825 && R18820 = 0 && R18821 = R18825 && R18822 = 0 && R18823 = R18825 && R18824 = 0 && R18826 = 0 && R18827 = R18857 && R18828 = 0 && R18829 = R18857 && R18830 = 0 && R18831 = R18857 && R18832 = 0 && R18833 = R18857 && R18834 = 0 && R18835 = R18857 && R18836 = 0 && R18837 = R18857 && R18838 = 0 && R18839 = R18857 && R18840 = 0 && R18841 = R18857 && R18842 = 0 && R18843 = R18857 && R18844 = 0 && R18845 = R18857 && R18846 = 0 && R18847 = R18857 && R18848 = 0 && R18849 = R18857 && R18850 = 0 && R18851 = R18857 && R18852 = 0 && R18853 = R18857 && R18854 = 0 && R18855 = R18857 && R18856 = 0 && R18858 = 10 && R18859 = R18903 && R18860 = 10 && R18861 = R18903 && R18862 = 10 && R18863 = R18903 && R18864 = 10 && R18865 = R18903 && R18866 = 10 && R18867 = R18903 && R18868 = 10 && R18869 = R18903 && R18870 = 10 && R18871 = R18903 && R18872 = 10 && R18873 = R18903 && R18874 = 10 && R18875 = R18903 && R18876 = 10 && R18877 = R18903 && R18878 = 10 && R18879 = R18903 && R18880 = 10 && R18881 = R18903 && R18882 = 10 && R18883 = R18903 && R18884 = 10 && R18885 = R18903 && R18886 = 10 && R18887 = R18903 && R18888 = 10 && R18889 = R18903 && R18890 = 10 && R18891 = R18903 && R18892 = 10 && R18893 = R18903 && R18894 = 10 && R18895 = R18903 && R18896 = 10 && R18897 = R18903 && R18898 = 10 && R18899 = R18903 && R18900 = 10 && R18901 = R18903 && R18902 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R18857 < R17951 && -1 < R18803 && 0 < R18825 && -1 < R18857 && 9 < R18903 && (R17936 != 0 || ((R5 != 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R0 = R17937 || R17937 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R17937 != 1 || -1 < R0) && (R0 = R17937 || R17937 = 1))))) && (R17938 != 0 || ((R5 != 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R0 = R17939 || R17939 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R17939 != 1 || -1 < R0) && (R0 = R17939 || R17939 = 1))))) && (R18798 != 0 || R18799 = R18803 || (R17933 = 0 && R18803 = 0)) && (R18800 != 0 || R18801 = R18803 || (R17933 = 0 && R18803 = 0)) && (R17934 = 0 || (R18806 = 0 && R18807 = 0)) && (R17935 = 0 || (R18804 = 0 && R18805 = 0)) && (R17936 = 0 || (R5 = 0 && R0 < 0)) && (R17938 = 0 || (R5 = 0 && R0 < 0)) && (R18798 = 0 || (R17933 = 0 && R18803 = 0)) && (R18800 = 0 || (R17933 = 0 && R18803 = 0));
// End of Parikh automata intersection problem
