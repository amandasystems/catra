// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11960, R11961, R12, R13, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R18162, R18163, R18164, R18165, R18166, R18167, R18168, R18169, R18170, R18171, R18172, R18173, R18174, R18175, R18176, R18177, R18178, R18179, R18180, R18181, R18182, R18183, R18184, R18185, R18186, R18187, R18188, R18189, R18190, R18191, R18192, R18193, R18194, R18195, R18196, R18197, R18198, R18199, R18200, R18201, R18202, R18203, R18204, R18205, R18206, R18207, R18208, R18209, R18210, R18211, R18212, R18213, R18214, R18215, R18216, R18217, R18218, R18219, R18220, R18221, R18222, R18223, R18224, R18225, R18226, R18227, R18228, R18229, R18230, R18231, R18232, R18233, R18234, R18235, R18236, R18237, R18238, R18239, R18240, R18241, R18242, R18243, R18244, R18245, R18246, R18247, R18248, R18249, R18250, R18251, R18252, R18253, R18254, R18255, R18256, R18257, R18258, R18259, R18260, R18261, R18262, R18263, R18264, R18265, R18266, R18267, R2, R3, R4, R5, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18223 += 1 };
  s0 -> s0 [0, 65535] { R18222 += 1, R18223 += 1 };
  s0 -> s2 [46, 46] { R18223 += 1 };
  s0 -> s3 [47, 47] { R18223 += 1 };
  s0 -> s1 [48, 65535] { R18223 += 1 };
  s1 -> s1 [0, 45] { R18223 += 1 };
  s1 -> s2 [46, 46] { R18223 += 1 };
  s1 -> s3 [47, 47] { R18223 += 1 };
  s1 -> s1 [48, 65535] { R18223 += 1 };
  s2 -> s1 [0, 45] { R18223 += 1 };
  s2 -> s2 [46, 46] { R18223 += 1 };
  s2 -> s3 [47, 47] { R18223 += 1 };
  s2 -> s1 [48, 114] { R18223 += 1 };
  s2 -> s8 [115, 115] { R18223 += 1 };
  s2 -> s1 [116, 65535] { R18223 += 1 };
  s3 -> s3 [0, 45] { R18223 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18223 += 1 };
  s3 -> s3 [47, 65535] { R18223 += 1 };
  s4 -> s3 [0, 45] { R18223 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18223 += 1 };
  s4 -> s3 [47, 114] { R18223 += 1 };
  s4 -> s5 [115, 115] { R18223 += 1 };
  s4 -> s3 [116, 65535] { R18223 += 1 };
  s5 -> s3 [0, 45] { R18223 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18223 += 1 };
  s5 -> s3 [47, 110] { R18223 += 1 };
  s5 -> s6 [111, 111] { R18223 += 1 };
  s5 -> s3 [112, 65535] { R18223 += 1 };
  s6 -> s3 [0, 45] { R18223 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18223 += 1 };
  s6 -> s3 [47, 98] { R18223 += 1 };
  s6 -> s7 [99, 99] { R18223 += 1 };
  s6 -> s3 [100, 65535] { R18223 += 1 };
  s7 -> s3 [0, 45] { R18223 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18223 += 1 };
  s7 -> s3 [47, 106] { R18223 += 1 };
  s7 -> s3 [108, 65535] { R18223 += 1 };
  s8 -> s1 [0, 45] { R18223 += 1 };
  s8 -> s2 [46, 46] { R18223 += 1 };
  s8 -> s3 [47, 47] { R18223 += 1 };
  s8 -> s1 [48, 110] { R18223 += 1 };
  s8 -> s9 [111, 111] { R18223 += 1 };
  s8 -> s1 [112, 65535] { R18223 += 1 };
  s9 -> s1 [0, 45] { R18223 += 1 };
  s9 -> s2 [46, 46] { R18223 += 1 };
  s9 -> s3 [47, 47] { R18223 += 1 };
  s9 -> s1 [48, 98] { R18223 += 1 };
  s9 -> s10 [99, 99] { R18223 += 1 };
  s9 -> s1 [100, 65535] { R18223 += 1 };
  s10 -> s1 [0, 45] { R18223 += 1 };
  s10 -> s2 [46, 46] { R18223 += 1 };
  s10 -> s3 [47, 47] { R18223 += 1 };
  s10 -> s1 [48, 106] { R18223 += 1 };
  s10 -> s1 [108, 65535] { R18223 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R18224 += 1, R18225 += 1 };
  s0 -> s1 [0, 65535] { R18225 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18225 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18227 += 1, R11961 += 1 };
  s0 -> s2 [0, 65535] { R18227 += 1, R11960 += 1, R11961 += 1 };
  s0 -> s0 [0, 65535] { R18226 += 1, R18227 += 1 };
  s0 -> s3 [47, 47] { R18227 += 1 };
  s0 -> s1 [48, 65535] { R18227 += 1, R11961 += 1 };
  s1 -> s1 [0, 46] { R18227 += 1, R11961 += 1 };
  s1 -> s3 [47, 47] { R18227 += 1 };
  s1 -> s1 [48, 65535] { R18227 += 1, R11961 += 1 };
  s2 -> s1 [0, 46] { R18227 += 1, R11961 += 1 };
  s2 -> s2 [0, 65535] { R18227 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [47, 47] { R18227 += 1 };
  s2 -> s1 [48, 65535] { R18227 += 1, R11961 += 1 };
  s3 -> s3 [0, 65535] { R18227 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18229 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R18228 += 1, R18229 += 1 };
  s0 -> s2 [0, 65535] { R18229 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s1 [38, 42] { R18229 += 1, R17945 += 1 };
  s0 -> s1 [44, 45] { R18229 += 1, R17945 += 1 };
  s0 -> s1 [47, 62] { R18229 += 1, R17945 += 1 };
  s0 -> s1 [64, 65535] { R18229 += 1, R17945 += 1 };
  s1 -> s1 [0, 36] { R18229 += 1, R17945 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18229 += 1 };
  s1 -> s1 [38, 42] { R18229 += 1, R17945 += 1 };
  s1 -> s1 [44, 45] { R18229 += 1, R17945 += 1 };
  s1 -> s1 [47, 62] { R18229 += 1, R17945 += 1 };
  s1 -> s1 [64, 65535] { R18229 += 1, R17945 += 1 };
  s2 -> s1 [0, 36] { R18229 += 1, R17945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18229 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s1 [38, 42] { R18229 += 1, R17945 += 1 };
  s2 -> s1 [44, 45] { R18229 += 1, R17945 += 1 };
  s2 -> s1 [47, 62] { R18229 += 1, R17945 += 1 };
  s2 -> s1 [64, 65535] { R18229 += 1, R17945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R18231 += 1, R17946 += 1, R17947 += 1 };
  s0 -> s0 [0, 65535] { R18230 += 1, R18231 += 1 };
  s0 -> s2 [0, 65535] { R18231 += 1, R17947 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R18231 += 1, R17946 += 1, R17947 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R18231 += 1, R17947 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18231 += 1 };
  s2 -> s2 [0, 65535] { R18231 += 1, R17947 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18231 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s0 [0, 65535] { R18232 += 1, R18233 += 1 };
  s0 -> s2 [0, 65535] { R18233 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s3 [0, 65535] { R18233 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s4 [63, 63] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s1 [64, 65535] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s1 [0, 65535] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R18233 += 1, R17949 += 1 };
  s1 -> s6 [0, 65535] { R18233 += 1 };
  s2 -> s1 [0, 62] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18233 += 1, R17948 += 1, R17949 += 1 };
  s2 -> s3 [0, 65535] { R18233 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s4 [63, 63] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [64, 65535] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [0, 62] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18233 += 1 };
  s3 -> s3 [0, 65535] { R18233 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s3 -> s4 [63, 63] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [64, 65535] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s4 -> s1 [0, 65535] { R18233 += 1, R17949 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18233 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18233 += 1, R17949 += 1 };
  s7 -> s6 [0, 65535] { R18233 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18235 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R18234 += 1, R18235 += 1 };
  s0 -> s2 [0, 65535] { R18235 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s3 [0, 65535] { R18235 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s1 -> s6 [0, 65535] { R18235 += 1, R17951 += 1 };
  s1 -> s1 [0, 65535] { R18235 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R18235 += 1 };
  s2 -> s1 [0, 65535] { R18235 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18235 += 1, R17950 += 1, R17951 += 1 };
  s2 -> s3 [0, 65535] { R18235 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s3 -> s1 [0, 65535] { R18235 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18235 += 1 };
  s3 -> s3 [0, 65535] { R18235 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18235 += 1 };
  s6 -> s6 [0, 65535] { R18235 += 1, R17951 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18235 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R18237 += 1, R18191 += 1 };
  s0 -> s0 [0, 65535] { R18236 += 1, R18237 += 1 };
  s0 -> s2 [0, 65535] { R18237 += 1, R18190 += 1, R18191 += 1 };
  s0 -> s1 [45, 63] { R18237 += 1, R18191 += 1 };
  s0 -> s3 [87, 87] { R18237 += 1, R18191 += 1 };
  s0 -> s1 [88, 65535] { R18237 += 1, R18191 += 1 };
  s1 -> s1 [0, 43] { R18237 += 1, R18191 += 1 };
  s1 -> s1 [45, 63] { R18237 += 1, R18191 += 1 };
  s1 -> s3 [87, 87] { R18237 += 1, R18191 += 1 };
  s1 -> s1 [88, 65535] { R18237 += 1, R18191 += 1 };
  s2 -> s1 [0, 43] { R18237 += 1, R18191 += 1 };
  s2 -> s2 [0, 65535] { R18237 += 1, R18190 += 1, R18191 += 1 };
  s2 -> s1 [45, 63] { R18237 += 1, R18191 += 1 };
  s2 -> s3 [87, 87] { R18237 += 1, R18191 += 1 };
  s2 -> s1 [88, 65535] { R18237 += 1, R18191 += 1 };
  s3 -> s3 [0, 43] { R18237 += 1, R18191 += 1 };
  s3 -> s3 [0, 65535] { R18237 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R18237 += 1, R18191 += 1 };
  s3 -> s3 [87, 65535] { R18237 += 1, R18191 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R18239 += 1, R18192 += 1, R18193 += 1 };
  s0 -> s0 [0, 65535] { R18238 += 1, R18239 += 1 };
  s0 -> s2 [0, 65535] { R18239 += 1, R18193 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R18239 += 1, R18192 += 1, R18193 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R18239 += 1, R18193 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18239 += 1 };
  s2 -> s2 [0, 65535] { R18239 += 1, R18193 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18239 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R18241 += 1, R18195 += 1 };
  s0 -> s0 [0, 65535] { R18240 += 1, R18241 += 1 };
  s0 -> s2 [0, 65535] { R18241 += 1, R18194 += 1, R18195 += 1 };
  s0 -> s3 [0, 65535] { R18241 += 1, R18195 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R18241 += 1, R18195 += 1 };
  s0 -> s1 [59, 65535] { R18241 += 1, R18195 += 1 };
  s1 -> s1 [0, 57] { R18241 += 1, R18195 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18241 += 1 };
  s1 -> s4 [58, 58] { R18241 += 1, R18195 += 1 };
  s1 -> s1 [59, 65535] { R18241 += 1, R18195 += 1 };
  s2 -> s1 [0, 57] { R18241 += 1, R18195 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R18241 += 1, R18194 += 1, R18195 += 1 };
  s2 -> s3 [0, 65535] { R18241 += 1, R18195 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R18241 += 1, R18195 += 1 };
  s2 -> s1 [59, 65535] { R18241 += 1, R18195 += 1 };
  s3 -> s1 [0, 57] { R18241 += 1, R18195 += 1 };
  s3 -> s5 [0, 65535] { R18241 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18241 += 1, R18195 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R18241 += 1, R18195 += 1 };
  s3 -> s1 [59, 65535] { R18241 += 1, R18195 += 1 };
  s4 -> s4 [0, 65535] { R18241 += 1, R18195 += 1 };
  s5 -> s5 [0, 65535] { R18241 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R18243 += 1, R18197 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R18242 += 1, R18243 += 1 };
  s0 -> s2 [0, 65535] { R18243 += 1, R18197 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [0, 65535] { R18243 += 1, R18196 += 1, R18197 += 1 };
  s0 -> s4 [87, 87] { R18243 += 1, R18197 += 1 };
  s0 -> s1 [88, 65535] { R18243 += 1, R18197 += 1, R13 += 1 };
  s1 -> s1 [0, 86] { R18243 += 1, R18197 += 1, R13 += 1 };
  s1 -> s4 [87, 87] { R18243 += 1, R18197 += 1 };
  s1 -> s1 [88, 65535] { R18243 += 1, R18197 += 1, R13 += 1 };
  s2 -> s1 [0, 86] { R18243 += 1, R18197 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R18243 += 1, R18197 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [87, 87] { R18243 += 1, R18197 += 1 };
  s2 -> s1 [88, 65535] { R18243 += 1, R18197 += 1, R13 += 1 };
  s3 -> s1 [0, 86] { R18243 += 1, R18197 += 1, R13 += 1 };
  s3 -> s2 [0, 65535] { R18243 += 1, R18197 += 1, R12 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R18243 += 1, R18196 += 1, R18197 += 1 };
  s3 -> s4 [87, 87] { R18243 += 1, R18197 += 1 };
  s3 -> s1 [88, 65535] { R18243 += 1, R18197 += 1, R13 += 1 };
  s4 -> s5 [0, 65535] { R18243 += 1 };
  s4 -> s4 [0, 65535] { R18243 += 1, R18197 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18243 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s0 -> s2 [0, 65535] { R18245 += 1, R18198 += 1, R18199 += 1 };
  s0 -> s0 [0, 65535] { R18244 += 1, R18245 += 1 };
  s0 -> s3 [0, 65535] { R18245 += 1, R18199 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s4 [91, 91] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s0 -> s1 [92, 65535] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s1 -> s7 [0, 65535] { R18245 += 1, R18199 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18245 += 1 };
  s1 -> s1 [0, 65535] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s2 -> s1 [0, 90] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18245 += 1, R18198 += 1, R18199 += 1 };
  s2 -> s3 [0, 65535] { R18245 += 1, R18199 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s4 [91, 91] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s2 -> s1 [92, 65535] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s3 -> s1 [0, 90] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18245 += 1 };
  s3 -> s3 [0, 65535] { R18245 += 1, R18199 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s4 [91, 91] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s3 -> s1 [92, 65535] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s4 -> s1 [0, 65535] { R18245 += 1, R18199 += 1, R17941 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18245 += 1 };
  s7 -> s7 [0, 65535] { R18245 += 1, R18199 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18245 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R18247 += 1, R18201 += 1, R17943 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R18247 += 1, R18200 += 1, R18201 += 1 };
  s0 -> s3 [0, 65535] { R18247 += 1, R18201 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s0 [0, 65535] { R18246 += 1, R18247 += 1 };
  s1 -> s1 [0, 65535] { R18247 += 1, R18201 += 1, R17943 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R18247 += 1, R18201 += 1 };
  s1 -> s4 [0, 65535] { R18247 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18247 += 1, R18201 += 1, R17943 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R18247 += 1, R18200 += 1, R18201 += 1 };
  s2 -> s3 [0, 65535] { R18247 += 1, R18201 += 1, R17942 += 1, R17943 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R18247 += 1, R18201 += 1, R17943 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R18247 += 1, R18201 += 1, R17942 += 1, R17943 += 1 };
  s3 -> s4 [0, 65535] { R18247 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18247 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18247 += 1, R18201 += 1 };
  s6 -> s4 [0, 65535] { R18247 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R18249 += 1, R18203 += 1, R18169 += 1, R17935 += 1 };
  s0 -> s2 [0, 65535] { R18249 += 1, R18202 += 1, R18203 += 1 };
  s0 -> s0 [0, 65535] { R18248 += 1, R18249 += 1 };
  s0 -> s3 [0, 65535] { R18249 += 1, R18203 += 1, R18168 += 1, R18169 += 1 };
  s1 -> s1 [0, 65535] { R18249 += 1, R18203 += 1, R18169 += 1, R17935 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R18249 += 1, R18203 += 1 };
  s1 -> s5 [0, 65535] { R18249 += 1 };
  s2 -> s1 [0, 65535] { R18249 += 1, R18203 += 1, R18169 += 1, R17935 += 1 };
  s2 -> s2 [0, 65535] { R18249 += 1, R18202 += 1, R18203 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R18249 += 1, R18203 += 1, R18168 += 1, R18169 += 1 };
  s3 -> s1 [0, 65535] { R18249 += 1, R18203 += 1, R18169 += 1, R17935 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18249 += 1 };
  s3 -> s3 [0, 65535] { R18249 += 1, R18203 += 1, R18168 += 1, R18169 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18249 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18249 += 1, R18203 += 1 };
  s6 -> s5 [0, 65535] { R18249 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R18251 += 1, R18204 += 1, R18205 += 1 };
  s0 -> s2 [0, 65535] { R18251 += 1, R18205 += 1 };
  s0 -> s0 [0, 65535] { R18250 += 1, R18251 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18251 += 1, R18204 += 1, R18205 += 1 };
  s1 -> s2 [0, 65535] { R18251 += 1, R18205 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18251 += 1, R18205 += 1 };
  s2 -> s4 [0, 65535] { R18251 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18251 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s0 -> s2 [0, 65535] { R18253 += 1, R18206 += 1, R18207 += 1 };
  s0 -> s3 [0, 65535] { R18253 += 1, R18207 += 1, R18174 += 1, R18175 += 1 };
  s0 -> s0 [0, 65535] { R18252 += 1, R18253 += 1 };
  s0 -> s4 [87, 87] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s0 -> s1 [88, 65535] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s1 -> s1 [0, 86] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s1 -> s4 [87, 87] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s1 -> s1 [88, 65535] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s2 -> s1 [0, 86] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s2 -> s2 [0, 65535] { R18253 += 1, R18206 += 1, R18207 += 1 };
  s2 -> s3 [0, 65535] { R18253 += 1, R18207 += 1, R18174 += 1, R18175 += 1 };
  s2 -> s4 [87, 87] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s2 -> s1 [88, 65535] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s3 -> s1 [0, 86] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s3 -> s3 [0, 65535] { R18253 += 1, R18207 += 1, R18174 += 1, R18175 += 1 };
  s3 -> s4 [87, 87] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s3 -> s1 [88, 65535] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s4 -> s5 [0, 65535] { R18253 += 1 };
  s4 -> s4 [0, 65535] { R18253 += 1, R18207 += 1, R18175 += 1 };
  s4 -> s6 [0, 65535] { R18253 += 1, R18207 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R18253 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R18253 += 1 };
  s6 -> s6 [0, 65535] { R18253 += 1, R18207 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18255 += 1, R18208 += 1, R18209 += 1 };
  s0 -> s2 [0, 65535] { R18255 += 1, R18209 += 1, R18176 += 1, R18177 += 1 };
  s0 -> s3 [0, 65535] { R18255 += 1, R18209 += 1, R18177 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R18254 += 1, R18255 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18255 += 1, R18208 += 1, R18209 += 1 };
  s1 -> s2 [0, 65535] { R18255 += 1, R18209 += 1, R18176 += 1, R18177 += 1 };
  s1 -> s3 [0, 65535] { R18255 += 1, R18209 += 1, R18177 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18255 += 1, R18209 += 1, R18176 += 1, R18177 += 1 };
  s2 -> s3 [0, 65535] { R18255 += 1, R18209 += 1, R18177 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R18255 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18255 += 1, R18209 += 1 };
  s3 -> s3 [0, 65535] { R18255 += 1, R18209 += 1, R18177 += 1, R1 += 1 };
  s3 -> s6 [0, 65535] { R18255 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18255 += 1, R18209 += 1 };
  s5 -> s6 [0, 65535] { R18255 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18255 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s0 -> s2 [0, 65535] { R18257 += 1, R18210 += 1, R18211 += 1 };
  s0 -> s3 [0, 65535] { R18257 += 1, R18211 += 1, R18179 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R18257 += 1, R18211 += 1, R18178 += 1, R18179 += 1 };
  s0 -> s0 [0, 65535] { R18256 += 1, R18257 += 1 };
  s0 -> s5 [87, 87] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s0 -> s1 [88, 65535] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s1 -> s1 [0, 86] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s1 -> s1 [0, 65535] { R18257 += 1, R18211 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R18257 += 1 };
  s1 -> s5 [87, 87] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s1 -> s1 [88, 65535] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s2 -> s1 [0, 86] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s2 -> s2 [0, 65535] { R18257 += 1, R18210 += 1, R18211 += 1 };
  s2 -> s3 [0, 65535] { R18257 += 1, R18211 += 1, R18179 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R18257 += 1, R18211 += 1, R18178 += 1, R18179 += 1 };
  s2 -> s5 [87, 87] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s2 -> s1 [88, 65535] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s3 -> s1 [0, 86] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s3 -> s3 [0, 65535] { R18257 += 1, R18211 += 1, R18179 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R18257 += 1 };
  s3 -> s8 [0, 65535] { R18257 += 1, R18211 += 1 };
  s3 -> s5 [87, 87] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s3 -> s1 [88, 65535] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s4 -> s1 [0, 86] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s4 -> s3 [0, 65535] { R18257 += 1, R18211 += 1, R18179 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18257 += 1, R18211 += 1, R18178 += 1, R18179 += 1 };
  s4 -> s7 [0, 65535] { R18257 += 1 };
  s4 -> s5 [87, 87] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s4 -> s1 [88, 65535] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s5 -> s5 [0, 65535] { R18257 += 1, R18211 += 1, R18179 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18257 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R18257 += 1 };
  s8 -> s8 [0, 65535] { R18257 += 1, R18211 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s0 -> s2 [0, 65535] { R18259 += 1, R18213 += 1, R18180 += 1, R18181 += 1 };
  s0 -> s3 [0, 65535] { R18259 += 1, R18213 += 1, R18181 += 1, R18162 += 1, R18163 += 1 };
  s0 -> s0 [0, 65535] { R18258 += 1, R18259 += 1 };
  s0 -> s4 [0, 65535] { R18259 += 1, R18212 += 1, R18213 += 1 };
  s0 -> s1 [88, 65535] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s1 -> s1 [0, 86] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s1 -> s6 [0, 65535] { R18259 += 1, R18213 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R18259 += 1 };
  s1 -> s1 [0, 65535] { R18259 += 1, R18213 += 1, R18181 += 1 };
  s1 -> s1 [88, 65535] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s2 -> s1 [0, 86] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s2 -> s2 [0, 65535] { R18259 += 1, R18213 += 1, R18180 += 1, R18181 += 1 };
  s2 -> s3 [0, 65535] { R18259 += 1, R18213 += 1, R18181 += 1, R18162 += 1, R18163 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R18259 += 1 };
  s2 -> s1 [88, 65535] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s3 -> s1 [0, 86] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s3 -> s6 [0, 65535] { R18259 += 1, R18213 += 1 };
  s3 -> s3 [0, 65535] { R18259 += 1, R18213 += 1, R18181 += 1, R18162 += 1, R18163 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R18259 += 1 };
  s3 -> s1 [88, 65535] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s4 -> s1 [0, 86] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s4 -> s2 [0, 65535] { R18259 += 1, R18213 += 1, R18180 += 1, R18181 += 1 };
  s4 -> s3 [0, 65535] { R18259 += 1, R18213 += 1, R18181 += 1, R18162 += 1, R18163 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18259 += 1, R18212 += 1, R18213 += 1 };
  s4 -> s1 [88, 65535] { R18259 += 1, R18213 += 1, R18181 += 1, R18163 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18259 += 1, R18213 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s7 [0, 65535] { R18259 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18259 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18261 += 1, R18214 += 1, R18215 += 1 };
  s0 -> s2 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1, R18164 += 1, R18165 += 1 };
  s0 -> s3 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1, R18165 += 1, R17933 += 1 };
  s0 -> s4 [0, 65535] { R18261 += 1, R18215 += 1, R18182 += 1, R18183 += 1 };
  s0 -> s0 [0, 65535] { R18260 += 1, R18261 += 1 };
  s1 -> s1 [0, 65535] { R18261 += 1, R18214 += 1, R18215 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1, R18164 += 1, R18165 += 1 };
  s1 -> s3 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1, R18165 += 1, R17933 += 1 };
  s1 -> s4 [0, 65535] { R18261 += 1, R18215 += 1, R18182 += 1, R18183 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1, R18164 += 1, R18165 += 1 };
  s2 -> s7 [0, 65535] { R18261 += 1, R18215 += 1 };
  s2 -> s3 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1, R18165 += 1, R17933 += 1 };
  s2 -> s6 [0, 65535] { R18261 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R18261 += 1, R18215 += 1 };
  s3 -> s3 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1, R18165 += 1, R17933 += 1 };
  s3 -> s8 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1 };
  s3 -> s6 [0, 65535] { R18261 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1, R18164 += 1, R18165 += 1 };
  s4 -> s3 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1, R18165 += 1, R17933 += 1 };
  s4 -> s4 [0, 65535] { R18261 += 1, R18215 += 1, R18182 += 1, R18183 += 1 };
  s4 -> s6 [0, 65535] { R18261 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18261 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18261 += 1, R18215 += 1 };
  s7 -> s6 [0, 65535] { R18261 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R18261 += 1, R18215 += 1 };
  s8 -> s8 [0, 65535] { R18261 += 1, R18215 += 1, R18183 += 1 };
  s8 -> s6 [0, 65535] { R18261 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R18263 += 1, R18217 += 1, R18185 += 1, R18166 += 1, R18167 += 1 };
  s0 -> s2 [0, 65535] { R18263 += 1, R18216 += 1, R18217 += 1 };
  s0 -> s0 [0, 65535] { R18262 += 1, R18263 += 1 };
  s0 -> s3 [0, 65535] { R18263 += 1, R18217 += 1, R18184 += 1, R18185 += 1 };
  s0 -> s4 [115, 115] { R18263 += 1, R18217 += 1, R18185 += 1, R18167 += 1 };
  s1 -> s1 [0, 65535] { R18263 += 1, R18217 += 1, R18185 += 1, R18166 += 1, R18167 += 1 };
  s1 -> s4 [115, 115] { R18263 += 1, R18217 += 1, R18185 += 1, R18167 += 1 };
  s2 -> s1 [0, 65535] { R18263 += 1, R18217 += 1, R18185 += 1, R18166 += 1, R18167 += 1 };
  s2 -> s2 [0, 65535] { R18263 += 1, R18216 += 1, R18217 += 1 };
  s2 -> s3 [0, 65535] { R18263 += 1, R18217 += 1, R18184 += 1, R18185 += 1 };
  s2 -> s4 [115, 115] { R18263 += 1, R18217 += 1, R18185 += 1, R18167 += 1 };
  s3 -> s1 [0, 65535] { R18263 += 1, R18217 += 1, R18185 += 1, R18166 += 1, R18167 += 1 };
  s3 -> s3 [0, 65535] { R18263 += 1, R18217 += 1, R18184 += 1, R18185 += 1 };
  s3 -> s4 [115, 115] { R18263 += 1, R18217 += 1, R18185 += 1, R18167 += 1 };
  s4 -> s5 [116, 116] { R18263 += 1, R18217 += 1, R18185 += 1, R18167 += 1 };
  s5 -> s5 [0, 65535] { R18263 += 1, R18217 += 1, R18185 += 1 };
  s5 -> s6 [0, 65535] { R18263 += 1, R18217 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R18263 += 1 };
  s6 -> s6 [0, 65535] { R18263 += 1, R18217 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R18263 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R18263 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1, R18170 += 1, R18171 += 1 };
  s0 -> s2 [0, 65535] { R18265 += 1, R18218 += 1, R18219 += 1 };
  s0 -> s0 [0, 65535] { R18264 += 1, R18265 += 1 };
  s0 -> s3 [0, 65535] { R18265 += 1, R18219 += 1, R18186 += 1, R18187 += 1 };
  s0 -> s4 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1, R18171 += 1, R17934 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1, R18170 += 1, R18171 += 1 };
  s1 -> s7 [0, 65535] { R18265 += 1, R18219 += 1 };
  s1 -> s8 [0, 65535] { R18265 += 1 };
  s1 -> s4 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1, R18171 += 1, R17934 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1, R18170 += 1, R18171 += 1 };
  s2 -> s2 [0, 65535] { R18265 += 1, R18218 += 1, R18219 += 1 };
  s2 -> s3 [0, 65535] { R18265 += 1, R18219 += 1, R18186 += 1, R18187 += 1 };
  s2 -> s4 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1, R18171 += 1, R17934 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1, R18170 += 1, R18171 += 1 };
  s3 -> s8 [0, 65535] { R18265 += 1 };
  s3 -> s3 [0, 65535] { R18265 += 1, R18219 += 1, R18186 += 1, R18187 += 1 };
  s3 -> s4 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1, R18171 += 1, R17934 += 1 };
  s4 -> s5 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R18265 += 1, R18219 += 1 };
  s4 -> s8 [0, 65535] { R18265 += 1 };
  s4 -> s4 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1, R18171 += 1, R17934 += 1 };
  s5 -> s5 [0, 65535] { R18265 += 1, R18219 += 1, R18187 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R18265 += 1, R18219 += 1 };
  s5 -> s8 [0, 65535] { R18265 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18265 += 1, R18219 += 1 };
  s7 -> s8 [0, 65535] { R18265 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18265 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R18267 += 1, R18221 += 1, R18188 += 1, R18189 += 1 };
  s0 -> s0 [0, 65535] { R18266 += 1, R18267 += 1 };
  s0 -> s2 [0, 65535] { R18267 += 1, R18221 += 1, R18189 += 1, R18172 += 1, R18173 += 1 };
  s0 -> s3 [0, 65535] { R18267 += 1, R18220 += 1, R18221 += 1 };
  s0 -> s4 [108, 108] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s1 -> s1 [0, 65535] { R18267 += 1, R18221 += 1, R18188 += 1, R18189 += 1 };
  s1 -> s2 [0, 65535] { R18267 += 1, R18221 += 1, R18189 += 1, R18172 += 1, R18173 += 1 };
  s1 -> s4 [108, 108] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s2 -> s2 [0, 65535] { R18267 += 1, R18221 += 1, R18189 += 1, R18172 += 1, R18173 += 1 };
  s2 -> s4 [108, 108] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s3 -> s1 [0, 65535] { R18267 += 1, R18221 += 1, R18188 += 1, R18189 += 1 };
  s3 -> s2 [0, 65535] { R18267 += 1, R18221 += 1, R18189 += 1, R18172 += 1, R18173 += 1 };
  s3 -> s3 [0, 65535] { R18267 += 1, R18220 += 1, R18221 += 1 };
  s3 -> s4 [108, 108] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s4 -> s5 [111, 111] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s5 -> s6 [99, 99] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s6 -> s7 [97, 97] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s7 -> s8 [108, 108] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s8 -> s9 [104, 104] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s9 -> s10 [111, 111] { R18267 += 1, R18221 += 1, R18189 += 1, R18173 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s12 [0, 65535] { R18267 += 1, R18221 += 1 };
  s10 -> s10 [0, 65535] { R18267 += 1, R18221 += 1, R18189 += 1 };
  s10 -> s13 [0, 65535] { R18267 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R18267 += 1, R18221 += 1 };
  s12 -> s13 [0, 65535] { R18267 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s13 [0, 65535] { R18267 += 1 };
  accepting s10, s11, s12, s13;
};
};
constraint R1 = R18167 && R2 = R18189 && R3 = R17951 && R4 = R18267 && R12 = 0 && R13 = -1 && R11960 = 0 && R11961 = R18221 && R17940 = 0 && R17941 = 1 && R17942 = 0 && R17943 = 1 && R17944 - R18221 = 1 && R17945 = R17951 && R17946 - R18221 = 1 && R17947 = R17951 && R17948 - R18221 = 1 && R17949 = R17951 && R17950 - R18221 = 1 && R18166 = 0 && R18172 = 0 && R18173 = 0 && R18174 = 0 && R18175 = R18189 && R18176 = 0 && R18177 = R18189 && R18178 = 0 && R18179 = R18189 && R18180 = 0 && R18181 = R18189 && R18182 = 0 && R18183 = R18189 && R18184 = 0 && R18185 = R18189 && R18186 = 0 && R18187 = R18189 && R18188 = 0 && R18190 = 0 && R18191 = R18221 && R18192 = 0 && R18193 = R18221 && R18194 = 0 && R18195 = R18221 && R18196 = 0 && R18197 = R18221 && R18198 = 0 && R18199 = R18221 && R18200 = 0 && R18201 = R18221 && R18202 = 0 && R18203 = R18221 && R18204 = 0 && R18205 = R18221 && R18206 = 0 && R18207 = R18221 && R18208 = 0 && R18209 = R18221 && R18210 = 0 && R18211 = R18221 && R18212 = 0 && R18213 = R18221 && R18214 = 0 && R18215 = R18221 && R18216 = 0 && R18217 = R18221 && R18218 = 0 && R18219 = R18221 && R18220 = 0 && R18222 = 10 && R18223 = R18267 && R18224 = 10 && R18225 = R18267 && R18226 = 10 && R18227 = R18267 && R18228 = 10 && R18229 = R18267 && R18230 = 10 && R18231 = R18267 && R18232 = 10 && R18233 = R18267 && R18234 = 10 && R18235 = R18267 && R18236 = 10 && R18237 = R18267 && R18238 = 10 && R18239 = R18267 && R18240 = 10 && R18241 = R18267 && R18242 = 10 && R18243 = R18267 && R18244 = 10 && R18245 = R18267 && R18246 = 10 && R18247 = R18267 && R18248 = 10 && R18249 = R18267 && R18250 = 10 && R18251 = R18267 && R18252 = 10 && R18253 = R18267 && R18254 = 10 && R18255 = R18267 && R18256 = 10 && R18257 = R18267 && R18258 = 10 && R18259 = R18267 && R18260 = 10 && R18261 = R18267 && R18262 = 10 && R18263 = R18267 && R18264 = 10 && R18265 = R18267 && R18266 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R18221 < R17951 && -1 < R18167 && 0 < R18189 && -1 < R18221 && 9 < R18267 && (R17936 != 0 || ((R5 != 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R0 = R17937 || R17937 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R17937 != 1 || -1 < R0) && (R0 = R17937 || R17937 = 1))))) && (R17938 != 0 || ((R5 != 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R0 = R17939 || R17939 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R17939 != 1 || -1 < R0) && (R0 = R17939 || R17939 = 1))))) && (R18162 != 0 || R18163 = R18167 || (R17933 = 0 && R18167 = 0)) && (R18164 != 0 || R18165 = R18167 || (R17933 = 0 && R18167 = 0)) && (R17934 = 0 || (R18170 = 0 && R18171 = 0)) && (R17935 = 0 || (R18168 = 0 && R18169 = 0)) && (R17936 = 0 || (R5 = 0 && R0 < 0)) && (R17938 = 0 || (R5 = 0 && R0 < 0)) && (R18162 = 0 || (R17933 = 0 && R18167 = 0)) && (R18164 = 0 || (R17933 = 0 && R18167 = 0));
// End of Parikh automata intersection problem
