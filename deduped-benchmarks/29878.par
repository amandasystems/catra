// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11960, R11961, R12, R13, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R18056, R18057, R18058, R18059, R18060, R18061, R18062, R18063, R18064, R18065, R18066, R18067, R18068, R18069, R18070, R18071, R18072, R18073, R18074, R18075, R18076, R18077, R18078, R18079, R18080, R18081, R18082, R18083, R18084, R18085, R18086, R18087, R18088, R18089, R18090, R18091, R18092, R18093, R18094, R18095, R18096, R18097, R18098, R18099, R18100, R18101, R18102, R18103, R18104, R18105, R18106, R18107, R18108, R18109, R18110, R18111, R18112, R18113, R18114, R18115, R18116, R18117, R18118, R18119, R18120, R18121, R18122, R18123, R18124, R18125, R18126, R18127, R18128, R18129, R18130, R18131, R18132, R18133, R18134, R18135, R18136, R18137, R18138, R18139, R18140, R18141, R18142, R18143, R18144, R18145, R18146, R18147, R18148, R18149, R18150, R18151, R18152, R18153, R18154, R18155, R18156, R18157, R18158, R18159, R18160, R18161, R2, R3, R4, R5, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18117 += 1 };
  s0 -> s0 [0, 65535] { R18116 += 1, R18117 += 1 };
  s0 -> s2 [46, 46] { R18117 += 1 };
  s0 -> s3 [47, 47] { R18117 += 1 };
  s0 -> s1 [48, 65535] { R18117 += 1 };
  s1 -> s1 [0, 45] { R18117 += 1 };
  s1 -> s2 [46, 46] { R18117 += 1 };
  s1 -> s3 [47, 47] { R18117 += 1 };
  s1 -> s1 [48, 65535] { R18117 += 1 };
  s2 -> s1 [0, 45] { R18117 += 1 };
  s2 -> s2 [46, 46] { R18117 += 1 };
  s2 -> s3 [47, 47] { R18117 += 1 };
  s2 -> s1 [48, 114] { R18117 += 1 };
  s2 -> s8 [115, 115] { R18117 += 1 };
  s2 -> s1 [116, 65535] { R18117 += 1 };
  s3 -> s3 [0, 45] { R18117 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18117 += 1 };
  s3 -> s3 [47, 65535] { R18117 += 1 };
  s4 -> s3 [0, 45] { R18117 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18117 += 1 };
  s4 -> s3 [47, 114] { R18117 += 1 };
  s4 -> s5 [115, 115] { R18117 += 1 };
  s4 -> s3 [116, 65535] { R18117 += 1 };
  s5 -> s3 [0, 45] { R18117 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18117 += 1 };
  s5 -> s3 [47, 110] { R18117 += 1 };
  s5 -> s6 [111, 111] { R18117 += 1 };
  s5 -> s3 [112, 65535] { R18117 += 1 };
  s6 -> s3 [0, 45] { R18117 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18117 += 1 };
  s6 -> s3 [47, 98] { R18117 += 1 };
  s6 -> s7 [99, 99] { R18117 += 1 };
  s6 -> s3 [100, 65535] { R18117 += 1 };
  s7 -> s3 [0, 45] { R18117 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18117 += 1 };
  s7 -> s3 [47, 106] { R18117 += 1 };
  s7 -> s3 [108, 65535] { R18117 += 1 };
  s8 -> s1 [0, 45] { R18117 += 1 };
  s8 -> s2 [46, 46] { R18117 += 1 };
  s8 -> s3 [47, 47] { R18117 += 1 };
  s8 -> s1 [48, 110] { R18117 += 1 };
  s8 -> s9 [111, 111] { R18117 += 1 };
  s8 -> s1 [112, 65535] { R18117 += 1 };
  s9 -> s1 [0, 45] { R18117 += 1 };
  s9 -> s2 [46, 46] { R18117 += 1 };
  s9 -> s3 [47, 47] { R18117 += 1 };
  s9 -> s1 [48, 98] { R18117 += 1 };
  s9 -> s10 [99, 99] { R18117 += 1 };
  s9 -> s1 [100, 65535] { R18117 += 1 };
  s10 -> s1 [0, 45] { R18117 += 1 };
  s10 -> s2 [46, 46] { R18117 += 1 };
  s10 -> s3 [47, 47] { R18117 += 1 };
  s10 -> s1 [48, 106] { R18117 += 1 };
  s10 -> s1 [108, 65535] { R18117 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R18118 += 1, R18119 += 1 };
  s0 -> s1 [0, 65535] { R18119 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18119 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18121 += 1, R11961 += 1 };
  s0 -> s0 [0, 65535] { R18120 += 1, R18121 += 1 };
  s0 -> s2 [0, 65535] { R18121 += 1, R11960 += 1, R11961 += 1 };
  s0 -> s3 [47, 47] { R18121 += 1 };
  s0 -> s1 [48, 65535] { R18121 += 1, R11961 += 1 };
  s1 -> s1 [0, 46] { R18121 += 1, R11961 += 1 };
  s1 -> s3 [47, 47] { R18121 += 1 };
  s1 -> s1 [48, 65535] { R18121 += 1, R11961 += 1 };
  s2 -> s1 [0, 46] { R18121 += 1, R11961 += 1 };
  s2 -> s2 [0, 65535] { R18121 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [47, 47] { R18121 += 1 };
  s2 -> s1 [48, 65535] { R18121 += 1, R11961 += 1 };
  s3 -> s3 [0, 65535] { R18121 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18123 += 1, R17945 += 1 };
  s0 -> s2 [0, 65535] { R18123 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R18122 += 1, R18123 += 1 };
  s0 -> s1 [38, 42] { R18123 += 1, R17945 += 1 };
  s0 -> s1 [44, 45] { R18123 += 1, R17945 += 1 };
  s0 -> s1 [47, 62] { R18123 += 1, R17945 += 1 };
  s0 -> s1 [64, 65535] { R18123 += 1, R17945 += 1 };
  s1 -> s1 [0, 36] { R18123 += 1, R17945 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18123 += 1 };
  s1 -> s1 [38, 42] { R18123 += 1, R17945 += 1 };
  s1 -> s1 [44, 45] { R18123 += 1, R17945 += 1 };
  s1 -> s1 [47, 62] { R18123 += 1, R17945 += 1 };
  s1 -> s1 [64, 65535] { R18123 += 1, R17945 += 1 };
  s2 -> s1 [0, 36] { R18123 += 1, R17945 += 1 };
  s2 -> s2 [0, 65535] { R18123 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R18123 += 1, R17945 += 1 };
  s2 -> s1 [44, 45] { R18123 += 1, R17945 += 1 };
  s2 -> s1 [47, 62] { R18123 += 1, R17945 += 1 };
  s2 -> s1 [64, 65535] { R18123 += 1, R17945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R18125 += 1, R17947 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R18125 += 1, R17946 += 1, R17947 += 1 };
  s0 -> s0 [0, 65535] { R18124 += 1, R18125 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18125 += 1 };
  s1 -> s1 [0, 65535] { R18125 += 1, R17947 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18125 += 1, R17947 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R18125 += 1, R17946 += 1, R17947 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18125 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s2 [0, 65535] { R18127 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s0 [0, 65535] { R18126 += 1, R18127 += 1 };
  s0 -> s3 [0, 65535] { R18127 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s4 [63, 63] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s1 [64, 65535] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s6 [0, 65535] { R18127 += 1 };
  s1 -> s7 [0, 65535] { R18127 += 1, R17949 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [0, 62] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s6 [0, 65535] { R18127 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18127 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s4 [63, 63] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [64, 65535] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [0, 62] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R18127 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s3 -> s3 [0, 65535] { R18127 += 1, R17948 += 1, R17949 += 1 };
  s3 -> s4 [63, 63] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [64, 65535] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s4 -> s1 [0, 65535] { R18127 += 1, R17949 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18127 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18127 += 1 };
  s7 -> s7 [0, 65535] { R18127 += 1, R17949 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R18128 += 1, R18129 += 1 };
  s0 -> s1 [0, 65535] { R18129 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s2 [0, 65535] { R18129 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R18129 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18129 += 1, R17950 += 1, R17951 += 1 };
  s1 -> s2 [0, 65535] { R18129 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R18129 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s2 -> s6 [0, 65535] { R18129 += 1, R17951 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18129 += 1 };
  s2 -> s2 [0, 65535] { R18129 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18129 += 1 };
  s3 -> s2 [0, 65535] { R18129 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R18129 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18129 += 1 };
  s6 -> s6 [0, 65535] { R18129 += 1, R17951 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18129 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R18131 += 1, R18085 += 1 };
  s0 -> s2 [0, 65535] { R18131 += 1, R18084 += 1, R18085 += 1 };
  s0 -> s0 [0, 65535] { R18130 += 1, R18131 += 1 };
  s0 -> s1 [45, 63] { R18131 += 1, R18085 += 1 };
  s0 -> s3 [87, 87] { R18131 += 1, R18085 += 1 };
  s0 -> s1 [88, 65535] { R18131 += 1, R18085 += 1 };
  s1 -> s1 [0, 43] { R18131 += 1, R18085 += 1 };
  s1 -> s1 [45, 63] { R18131 += 1, R18085 += 1 };
  s1 -> s3 [87, 87] { R18131 += 1, R18085 += 1 };
  s1 -> s1 [88, 65535] { R18131 += 1, R18085 += 1 };
  s2 -> s1 [0, 43] { R18131 += 1, R18085 += 1 };
  s2 -> s2 [0, 65535] { R18131 += 1, R18084 += 1, R18085 += 1 };
  s2 -> s1 [45, 63] { R18131 += 1, R18085 += 1 };
  s2 -> s3 [87, 87] { R18131 += 1, R18085 += 1 };
  s2 -> s1 [88, 65535] { R18131 += 1, R18085 += 1 };
  s3 -> s3 [0, 43] { R18131 += 1, R18085 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18131 += 1 };
  s3 -> s3 [45, 63] { R18131 += 1, R18085 += 1 };
  s3 -> s3 [87, 65535] { R18131 += 1, R18085 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R18132 += 1, R18133 += 1 };
  s0 -> s1 [0, 65535] { R18133 += 1, R18086 += 1, R18087 += 1 };
  s0 -> s2 [0, 65535] { R18133 += 1, R18087 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18133 += 1, R18086 += 1, R18087 += 1 };
  s1 -> s2 [0, 65535] { R18133 += 1, R18087 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18133 += 1 };
  s2 -> s2 [0, 65535] { R18133 += 1, R18087 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18133 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R18135 += 1, R18089 += 1 };
  s0 -> s2 [0, 65535] { R18135 += 1, R18089 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R18135 += 1, R18088 += 1, R18089 += 1 };
  s0 -> s0 [0, 65535] { R18134 += 1, R18135 += 1 };
  s0 -> s4 [58, 58] { R18135 += 1, R18089 += 1 };
  s0 -> s1 [59, 65535] { R18135 += 1, R18089 += 1 };
  s1 -> s1 [0, 57] { R18135 += 1, R18089 += 1 };
  s1 -> s1 [0, 65535] { R18135 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R18135 += 1, R18089 += 1 };
  s1 -> s1 [59, 65535] { R18135 += 1, R18089 += 1 };
  s2 -> s1 [0, 57] { R18135 += 1, R18089 += 1 };
  s2 -> s2 [0, 65535] { R18135 += 1, R18089 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18135 += 1 };
  s2 -> s4 [58, 58] { R18135 += 1, R18089 += 1 };
  s2 -> s1 [59, 65535] { R18135 += 1, R18089 += 1 };
  s3 -> s1 [0, 57] { R18135 += 1, R18089 += 1 };
  s3 -> s2 [0, 65535] { R18135 += 1, R18089 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R18135 += 1, R18088 += 1, R18089 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R18135 += 1, R18089 += 1 };
  s3 -> s1 [59, 65535] { R18135 += 1, R18089 += 1 };
  s4 -> s4 [0, 65535] { R18135 += 1, R18089 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18135 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R18137 += 1, R18091 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R18137 += 1, R18090 += 1, R18091 += 1 };
  s0 -> s3 [0, 65535] { R18137 += 1, R18091 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R18136 += 1, R18137 += 1 };
  s0 -> s4 [87, 87] { R18137 += 1, R18091 += 1 };
  s0 -> s1 [88, 65535] { R18137 += 1, R18091 += 1, R13 += 1 };
  s1 -> s1 [0, 86] { R18137 += 1, R18091 += 1, R13 += 1 };
  s1 -> s4 [87, 87] { R18137 += 1, R18091 += 1 };
  s1 -> s1 [88, 65535] { R18137 += 1, R18091 += 1, R13 += 1 };
  s2 -> s1 [0, 86] { R18137 += 1, R18091 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R18137 += 1, R18090 += 1, R18091 += 1 };
  s2 -> s3 [0, 65535] { R18137 += 1, R18091 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [87, 87] { R18137 += 1, R18091 += 1 };
  s2 -> s1 [88, 65535] { R18137 += 1, R18091 += 1, R13 += 1 };
  s3 -> s1 [0, 86] { R18137 += 1, R18091 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R18137 += 1, R18091 += 1, R12 += 1, R13 += 1 };
  s3 -> s4 [87, 87] { R18137 += 1, R18091 += 1 };
  s3 -> s1 [88, 65535] { R18137 += 1, R18091 += 1, R13 += 1 };
  s4 -> s5 [0, 65535] { R18137 += 1 };
  s4 -> s4 [0, 65535] { R18137 += 1, R18091 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18137 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s0 -> s2 [0, 65535] { R18139 += 1, R18092 += 1, R18093 += 1 };
  s0 -> s0 [0, 65535] { R18138 += 1, R18139 += 1 };
  s0 -> s3 [0, 65535] { R18139 += 1, R18093 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s4 [91, 91] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s0 -> s1 [92, 65535] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s1 -> s7 [0, 65535] { R18139 += 1, R18093 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18139 += 1 };
  s1 -> s1 [0, 65535] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s2 -> s1 [0, 90] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s2 -> s2 [0, 65535] { R18139 += 1, R18092 += 1, R18093 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18139 += 1, R18093 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s4 [91, 91] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s2 -> s1 [92, 65535] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s3 -> s1 [0, 90] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18139 += 1 };
  s3 -> s3 [0, 65535] { R18139 += 1, R18093 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s4 [91, 91] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s3 -> s1 [92, 65535] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s4 -> s1 [0, 65535] { R18139 += 1, R18093 += 1, R17941 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18139 += 1 };
  s7 -> s7 [0, 65535] { R18139 += 1, R18093 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18139 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R18141 += 1, R18094 += 1, R18095 += 1 };
  s0 -> s0 [0, 65535] { R18140 += 1, R18141 += 1 };
  s0 -> s2 [0, 65535] { R18141 += 1, R18095 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s3 [0, 65535] { R18141 += 1, R18095 += 1, R17943 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R18141 += 1, R18094 += 1, R18095 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R18141 += 1, R18095 += 1, R17942 += 1, R17943 += 1 };
  s1 -> s3 [0, 65535] { R18141 += 1, R18095 += 1, R17943 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18141 += 1 };
  s2 -> s2 [0, 65535] { R18141 += 1, R18095 += 1, R17942 += 1, R17943 += 1 };
  s2 -> s3 [0, 65535] { R18141 += 1, R18095 += 1, R17943 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R18141 += 1, R18095 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18141 += 1 };
  s3 -> s3 [0, 65535] { R18141 += 1, R18095 += 1, R17943 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R18141 += 1, R18095 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18141 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18141 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R18143 += 1, R18097 += 1, R18063 += 1, R17935 += 1 };
  s0 -> s2 [0, 65535] { R18143 += 1, R18096 += 1, R18097 += 1 };
  s0 -> s3 [0, 65535] { R18143 += 1, R18097 += 1, R18062 += 1, R18063 += 1 };
  s0 -> s0 [0, 65535] { R18142 += 1, R18143 += 1 };
  s1 -> s6 [0, 65535] { R18143 += 1, R18097 += 1 };
  s1 -> s1 [0, 65535] { R18143 += 1, R18097 += 1, R18063 += 1, R17935 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R18143 += 1 };
  s2 -> s1 [0, 65535] { R18143 += 1, R18097 += 1, R18063 += 1, R17935 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18143 += 1, R18096 += 1, R18097 += 1 };
  s2 -> s3 [0, 65535] { R18143 += 1, R18097 += 1, R18062 += 1, R18063 += 1 };
  s3 -> s1 [0, 65535] { R18143 += 1, R18097 += 1, R18063 += 1, R17935 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18143 += 1 };
  s3 -> s3 [0, 65535] { R18143 += 1, R18097 += 1, R18062 += 1, R18063 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18143 += 1 };
  s6 -> s6 [0, 65535] { R18143 += 1, R18097 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18143 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R18144 += 1, R18145 += 1 };
  s0 -> s1 [0, 65535] { R18145 += 1, R18098 += 1, R18099 += 1 };
  s0 -> s2 [0, 65535] { R18145 += 1, R18099 += 1 };
  s1 -> s1 [0, 65535] { R18145 += 1, R18098 += 1, R18099 += 1 };
  s1 -> s2 [0, 65535] { R18145 += 1, R18099 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18145 += 1, R18099 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18145 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18145 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s0 -> s2 [0, 65535] { R18147 += 1, R18101 += 1, R18068 += 1, R18069 += 1 };
  s0 -> s0 [0, 65535] { R18146 += 1, R18147 += 1 };
  s0 -> s3 [0, 65535] { R18147 += 1, R18100 += 1, R18101 += 1 };
  s0 -> s4 [87, 87] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s0 -> s1 [88, 65535] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s1 -> s1 [0, 86] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s1 -> s4 [87, 87] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s1 -> s1 [88, 65535] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s2 -> s1 [0, 86] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s2 -> s2 [0, 65535] { R18147 += 1, R18101 += 1, R18068 += 1, R18069 += 1 };
  s2 -> s4 [87, 87] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s2 -> s1 [88, 65535] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s3 -> s1 [0, 86] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s3 -> s2 [0, 65535] { R18147 += 1, R18101 += 1, R18068 += 1, R18069 += 1 };
  s3 -> s3 [0, 65535] { R18147 += 1, R18100 += 1, R18101 += 1 };
  s3 -> s4 [87, 87] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s3 -> s1 [88, 65535] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s4 -> s5 [0, 65535] { R18147 += 1 };
  s4 -> s6 [0, 65535] { R18147 += 1, R18101 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R18147 += 1, R18101 += 1, R18069 += 1 };
  s5 -> s5 [0, 65535] { R18147 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R18147 += 1 };
  s6 -> s6 [0, 65535] { R18147 += 1, R18101 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18149 += 1, R18103 += 1, R18071 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R18148 += 1, R18149 += 1 };
  s0 -> s2 [0, 65535] { R18149 += 1, R18103 += 1, R18070 += 1, R18071 += 1 };
  s0 -> s3 [0, 65535] { R18149 += 1, R18102 += 1, R18103 += 1 };
  s1 -> s1 [0, 65535] { R18149 += 1, R18103 += 1, R18071 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R18149 += 1, R18103 += 1 };
  s1 -> s5 [0, 65535] { R18149 += 1 };
  s2 -> s1 [0, 65535] { R18149 += 1, R18103 += 1, R18071 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18149 += 1 };
  s2 -> s2 [0, 65535] { R18149 += 1, R18103 += 1, R18070 += 1, R18071 += 1 };
  s3 -> s1 [0, 65535] { R18149 += 1, R18103 += 1, R18071 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R18149 += 1, R18103 += 1, R18070 += 1, R18071 += 1 };
  s3 -> s3 [0, 65535] { R18149 += 1, R18102 += 1, R18103 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18149 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18149 += 1, R18103 += 1 };
  s6 -> s5 [0, 65535] { R18149 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s0 -> s2 [0, 65535] { R18151 += 1, R18105 += 1, R18072 += 1, R18073 += 1 };
  s0 -> s3 [0, 65535] { R18151 += 1, R18104 += 1, R18105 += 1 };
  s0 -> s0 [0, 65535] { R18150 += 1, R18151 += 1 };
  s0 -> s4 [0, 65535] { R18151 += 1, R18105 += 1, R18073 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s0 -> s1 [88, 65535] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s1 -> s1 [0, 86] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s1 -> s1 [0, 65535] { R18151 += 1, R18105 += 1 };
  s1 -> s7 [0, 65535] { R18151 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [87, 87] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s1 -> s1 [88, 65535] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s2 -> s1 [0, 86] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s2 -> s2 [0, 65535] { R18151 += 1, R18105 += 1, R18072 += 1, R18073 += 1 };
  s2 -> s7 [0, 65535] { R18151 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [0, 65535] { R18151 += 1, R18105 += 1, R18073 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s2 -> s1 [88, 65535] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s3 -> s1 [0, 86] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s3 -> s2 [0, 65535] { R18151 += 1, R18105 += 1, R18072 += 1, R18073 += 1 };
  s3 -> s3 [0, 65535] { R18151 += 1, R18104 += 1, R18105 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [0, 65535] { R18151 += 1, R18105 += 1, R18073 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s3 -> s1 [88, 65535] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s4 -> s1 [0, 86] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s4 -> s6 [0, 65535] { R18151 += 1, R18105 += 1 };
  s4 -> s7 [0, 65535] { R18151 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R18151 += 1, R18105 += 1, R18073 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s4 -> s1 [88, 65535] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s5 -> s5 [0, 65535] { R18151 += 1, R18105 += 1, R18073 += 1 };
  s6 -> s6 [0, 65535] { R18151 += 1, R18105 += 1 };
  s6 -> s7 [0, 65535] { R18151 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R18151 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s0 -> s0 [0, 65535] { R18152 += 1, R18153 += 1 };
  s0 -> s2 [0, 65535] { R18153 += 1, R18106 += 1, R18107 += 1 };
  s0 -> s3 [0, 65535] { R18153 += 1, R18107 += 1, R18075 += 1, R18056 += 1, R18057 += 1 };
  s0 -> s4 [0, 65535] { R18153 += 1, R18107 += 1, R18074 += 1, R18075 += 1 };
  s0 -> s1 [88, 65535] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s1 -> s1 [0, 86] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R18153 += 1, R18107 += 1 };
  s1 -> s1 [0, 65535] { R18153 += 1, R18107 += 1, R18075 += 1 };
  s1 -> s6 [0, 65535] { R18153 += 1 };
  s1 -> s1 [88, 65535] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s2 -> s1 [0, 86] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18153 += 1, R18106 += 1, R18107 += 1 };
  s2 -> s3 [0, 65535] { R18153 += 1, R18107 += 1, R18075 += 1, R18056 += 1, R18057 += 1 };
  s2 -> s4 [0, 65535] { R18153 += 1, R18107 += 1, R18074 += 1, R18075 += 1 };
  s2 -> s1 [88, 65535] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s3 -> s1 [0, 86] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R18153 += 1, R18107 += 1 };
  s3 -> s3 [0, 65535] { R18153 += 1, R18107 += 1, R18075 += 1, R18056 += 1, R18057 += 1 };
  s3 -> s6 [0, 65535] { R18153 += 1 };
  s3 -> s1 [88, 65535] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s4 -> s1 [0, 86] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R18153 += 1, R18107 += 1, R18075 += 1, R18056 += 1, R18057 += 1 };
  s4 -> s6 [0, 65535] { R18153 += 1 };
  s4 -> s4 [0, 65535] { R18153 += 1, R18107 += 1, R18074 += 1, R18075 += 1 };
  s4 -> s1 [88, 65535] { R18153 += 1, R18107 += 1, R18075 += 1, R18057 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18153 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18153 += 1, R18107 += 1 };
  s7 -> s6 [0, 65535] { R18153 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1, R18058 += 1, R18059 += 1 };
  s0 -> s2 [0, 65535] { R18155 += 1, R18108 += 1, R18109 += 1 };
  s0 -> s3 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1, R18059 += 1, R17933 += 1 };
  s0 -> s4 [0, 65535] { R18155 += 1, R18109 += 1, R18076 += 1, R18077 += 1 };
  s0 -> s0 [0, 65535] { R18154 += 1, R18155 += 1 };
  s1 -> s1 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1, R18058 += 1, R18059 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1, R18059 += 1, R17933 += 1 };
  s1 -> s7 [0, 65535] { R18155 += 1, R18109 += 1 };
  s1 -> s6 [0, 65535] { R18155 += 1 };
  s2 -> s1 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1, R18058 += 1, R18059 += 1 };
  s2 -> s2 [0, 65535] { R18155 += 1, R18108 += 1, R18109 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1, R18059 += 1, R17933 += 1 };
  s2 -> s4 [0, 65535] { R18155 += 1, R18109 += 1, R18076 += 1, R18077 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1, R18059 += 1, R17933 += 1 };
  s3 -> s7 [0, 65535] { R18155 += 1, R18109 += 1 };
  s3 -> s8 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1 };
  s3 -> s6 [0, 65535] { R18155 += 1 };
  s4 -> s1 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1, R18058 += 1, R18059 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1, R18059 += 1, R17933 += 1 };
  s4 -> s4 [0, 65535] { R18155 += 1, R18109 += 1, R18076 += 1, R18077 += 1 };
  s4 -> s6 [0, 65535] { R18155 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18155 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18155 += 1, R18109 += 1 };
  s7 -> s6 [0, 65535] { R18155 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R18155 += 1, R18109 += 1 };
  s8 -> s8 [0, 65535] { R18155 += 1, R18109 += 1, R18077 += 1 };
  s8 -> s6 [0, 65535] { R18155 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R18156 += 1, R18157 += 1 };
  s0 -> s1 [0, 65535] { R18157 += 1, R18111 += 1, R18079 += 1, R18060 += 1, R18061 += 1 };
  s0 -> s2 [0, 65535] { R18157 += 1, R18110 += 1, R18111 += 1 };
  s0 -> s3 [0, 65535] { R18157 += 1, R18111 += 1, R18078 += 1, R18079 += 1 };
  s0 -> s4 [116, 116] { R18157 += 1, R18111 += 1, R18079 += 1, R18061 += 1 };
  s1 -> s1 [0, 65535] { R18157 += 1, R18111 += 1, R18079 += 1, R18060 += 1, R18061 += 1 };
  s1 -> s4 [116, 116] { R18157 += 1, R18111 += 1, R18079 += 1, R18061 += 1 };
  s2 -> s1 [0, 65535] { R18157 += 1, R18111 += 1, R18079 += 1, R18060 += 1, R18061 += 1 };
  s2 -> s2 [0, 65535] { R18157 += 1, R18110 += 1, R18111 += 1 };
  s2 -> s3 [0, 65535] { R18157 += 1, R18111 += 1, R18078 += 1, R18079 += 1 };
  s2 -> s4 [116, 116] { R18157 += 1, R18111 += 1, R18079 += 1, R18061 += 1 };
  s3 -> s1 [0, 65535] { R18157 += 1, R18111 += 1, R18079 += 1, R18060 += 1, R18061 += 1 };
  s3 -> s3 [0, 65535] { R18157 += 1, R18111 += 1, R18078 += 1, R18079 += 1 };
  s3 -> s4 [116, 116] { R18157 += 1, R18111 += 1, R18079 += 1, R18061 += 1 };
  s4 -> s5 [0, 65535] { R18157 += 1, R18111 += 1 };
  s4 -> s4 [0, 65535] { R18157 += 1, R18111 += 1, R18079 += 1 };
  s4 -> s6 [0, 65535] { R18157 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R18157 += 1, R18111 += 1 };
  s5 -> s6 [0, 65535] { R18157 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R18157 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1, R18064 += 1, R18065 += 1 };
  s0 -> s0 [0, 65535] { R18158 += 1, R18159 += 1 };
  s0 -> s2 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1, R18065 += 1, R17934 += 1 };
  s0 -> s3 [0, 65535] { R18159 += 1, R18112 += 1, R18113 += 1 };
  s0 -> s4 [0, 65535] { R18159 += 1, R18113 += 1, R18080 += 1, R18081 += 1 };
  s1 -> s1 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1, R18064 += 1, R18065 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18159 += 1 };
  s1 -> s2 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1, R18065 += 1, R17934 += 1 };
  s1 -> s8 [0, 65535] { R18159 += 1, R18113 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18159 += 1 };
  s2 -> s7 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1 };
  s2 -> s2 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1, R18065 += 1, R17934 += 1 };
  s2 -> s8 [0, 65535] { R18159 += 1, R18113 += 1 };
  s3 -> s1 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1, R18064 += 1, R18065 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1, R18065 += 1, R17934 += 1 };
  s3 -> s3 [0, 65535] { R18159 += 1, R18112 += 1, R18113 += 1 };
  s3 -> s4 [0, 65535] { R18159 += 1, R18113 += 1, R18080 += 1, R18081 += 1 };
  s4 -> s1 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1, R18064 += 1, R18065 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18159 += 1 };
  s4 -> s2 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1, R18065 += 1, R17934 += 1 };
  s4 -> s4 [0, 65535] { R18159 += 1, R18113 += 1, R18080 += 1, R18081 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18159 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18159 += 1 };
  s7 -> s7 [0, 65535] { R18159 += 1, R18113 += 1, R18081 += 1 };
  s7 -> s8 [0, 65535] { R18159 += 1, R18113 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R18159 += 1 };
  s8 -> s8 [0, 65535] { R18159 += 1, R18113 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R18161 += 1, R18115 += 1, R18082 += 1, R18083 += 1 };
  s0 -> s2 [0, 65535] { R18161 += 1, R18114 += 1, R18115 += 1 };
  s0 -> s0 [0, 65535] { R18160 += 1, R18161 += 1 };
  s0 -> s3 [0, 65535] { R18161 += 1, R18115 += 1, R18083 += 1, R18066 += 1, R18067 += 1 };
  s0 -> s4 [108, 108] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s1 -> s1 [0, 65535] { R18161 += 1, R18115 += 1, R18082 += 1, R18083 += 1 };
  s1 -> s3 [0, 65535] { R18161 += 1, R18115 += 1, R18083 += 1, R18066 += 1, R18067 += 1 };
  s1 -> s4 [108, 108] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s2 -> s1 [0, 65535] { R18161 += 1, R18115 += 1, R18082 += 1, R18083 += 1 };
  s2 -> s2 [0, 65535] { R18161 += 1, R18114 += 1, R18115 += 1 };
  s2 -> s3 [0, 65535] { R18161 += 1, R18115 += 1, R18083 += 1, R18066 += 1, R18067 += 1 };
  s2 -> s4 [108, 108] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s3 -> s3 [0, 65535] { R18161 += 1, R18115 += 1, R18083 += 1, R18066 += 1, R18067 += 1 };
  s3 -> s4 [108, 108] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s4 -> s5 [111, 111] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s5 -> s6 [99, 99] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s6 -> s7 [97, 97] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s7 -> s8 [108, 108] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s8 -> s9 [104, 104] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s9 -> s10 [111, 111] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s10 -> s11 [115, 115] { R18161 += 1, R18115 += 1, R18083 += 1, R18067 += 1 };
  s11 -> s12 [0, 65535] { R18161 += 1, R18115 += 1 };
  s11 -> s13 [0, 65535] { R18161 += 1 };
  s11 -> s11 [0, 65535] { R18161 += 1, R18115 += 1, R18083 += 1 };
  s11 -> s14 [0, 65535];
  s12 -> s12 [0, 65535] { R18161 += 1, R18115 += 1 };
  s12 -> s13 [0, 65535] { R18161 += 1 };
  s12 -> s14 [0, 65535];
  s13 -> s13 [0, 65535] { R18161 += 1 };
  s13 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  accepting s11, s12, s13, s14;
};
};
constraint R1 = R18061 && R2 = R18083 && R3 = R17951 && R4 = R18161 && R12 = 0 && R13 = -1 && R11960 = 0 && R11961 = R18115 && R17940 = 0 && R17941 = 1 && R17942 = 0 && R17943 = 1 && R17944 - R18115 = 1 && R17945 = R17951 && R17946 - R18115 = 1 && R17947 = R17951 && R17948 - R18115 = 1 && R17949 = R17951 && R17950 - R18115 = 1 && R18060 = 0 && R18066 = 0 && R18067 = 0 && R18068 = 0 && R18069 = R18083 && R18070 = 0 && R18071 = R18083 && R18072 = 0 && R18073 = R18083 && R18074 = 0 && R18075 = R18083 && R18076 = 0 && R18077 = R18083 && R18078 = 0 && R18079 = R18083 && R18080 = 0 && R18081 = R18083 && R18082 = 0 && R18084 = 0 && R18085 = R18115 && R18086 = 0 && R18087 = R18115 && R18088 = 0 && R18089 = R18115 && R18090 = 0 && R18091 = R18115 && R18092 = 0 && R18093 = R18115 && R18094 = 0 && R18095 = R18115 && R18096 = 0 && R18097 = R18115 && R18098 = 0 && R18099 = R18115 && R18100 = 0 && R18101 = R18115 && R18102 = 0 && R18103 = R18115 && R18104 = 0 && R18105 = R18115 && R18106 = 0 && R18107 = R18115 && R18108 = 0 && R18109 = R18115 && R18110 = 0 && R18111 = R18115 && R18112 = 0 && R18113 = R18115 && R18114 = 0 && R18116 = 10 && R18117 = R18161 && R18118 = 10 && R18119 = R18161 && R18120 = 10 && R18121 = R18161 && R18122 = 10 && R18123 = R18161 && R18124 = 10 && R18125 = R18161 && R18126 = 10 && R18127 = R18161 && R18128 = 10 && R18129 = R18161 && R18130 = 10 && R18131 = R18161 && R18132 = 10 && R18133 = R18161 && R18134 = 10 && R18135 = R18161 && R18136 = 10 && R18137 = R18161 && R18138 = 10 && R18139 = R18161 && R18140 = 10 && R18141 = R18161 && R18142 = 10 && R18143 = R18161 && R18144 = 10 && R18145 = R18161 && R18146 = 10 && R18147 = R18161 && R18148 = 10 && R18149 = R18161 && R18150 = 10 && R18151 = R18161 && R18152 = 10 && R18153 = R18161 && R18154 = 10 && R18155 = R18161 && R18156 = 10 && R18157 = R18161 && R18158 = 10 && R18159 = R18161 && R18160 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R18115 < R17951 && -1 < R18061 && 0 < R18083 && -1 < R18115 && 9 < R18161 && (R17936 != 0 || ((R5 != 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R0 = R17937 || R17937 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R17937 != 1 || -1 < R0) && (R0 = R17937 || R17937 = 1))))) && (R17938 != 0 || ((R5 != 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R0 = R17939 || R17939 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R17939 != 1 || -1 < R0) && (R0 = R17939 || R17939 = 1))))) && (R18056 != 0 || R18057 = R18061 || (R17933 = 0 && R18061 = 0)) && (R18058 != 0 || R18059 = R18061 || (R17933 = 0 && R18061 = 0)) && (R17934 = 0 || (R18064 = 0 && R18065 = 0)) && (R17935 = 0 || (R18062 = 0 && R18063 = 0)) && (R17936 = 0 || (R5 = 0 && R0 < 0)) && (R17938 = 0 || (R5 = 0 && R0 < 0)) && (R18056 = 0 || (R17933 = 0 && R18061 = 0)) && (R18058 = 0 || (R17933 = 0 && R18061 = 0));
// End of Parikh automata intersection problem
