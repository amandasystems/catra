// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11960, R11961, R12, R13, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R18692, R18693, R18694, R18695, R18696, R18697, R18698, R18699, R18700, R18701, R18702, R18703, R18704, R18705, R18706, R18707, R18708, R18709, R18710, R18711, R18712, R18713, R18714, R18715, R18716, R18717, R18718, R18719, R18720, R18721, R18722, R18723, R18724, R18725, R18726, R18727, R18728, R18729, R18730, R18731, R18732, R18733, R18734, R18735, R18736, R18737, R18738, R18739, R18740, R18741, R18742, R18743, R18744, R18745, R18746, R18747, R18748, R18749, R18750, R18751, R18752, R18753, R18754, R18755, R18756, R18757, R18758, R18759, R18760, R18761, R18762, R18763, R18764, R18765, R18766, R18767, R18768, R18769, R18770, R18771, R18772, R18773, R18774, R18775, R18776, R18777, R18778, R18779, R18780, R18781, R18782, R18783, R18784, R18785, R18786, R18787, R18788, R18789, R18790, R18791, R18792, R18793, R18794, R18795, R18796, R18797, R2, R3, R4, R5, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18753 += 1 };
  s0 -> s0 [0, 65535] { R18752 += 1, R18753 += 1 };
  s0 -> s2 [46, 46] { R18753 += 1 };
  s0 -> s3 [47, 47] { R18753 += 1 };
  s0 -> s1 [48, 65535] { R18753 += 1 };
  s1 -> s1 [0, 45] { R18753 += 1 };
  s1 -> s2 [46, 46] { R18753 += 1 };
  s1 -> s3 [47, 47] { R18753 += 1 };
  s1 -> s1 [48, 65535] { R18753 += 1 };
  s2 -> s1 [0, 45] { R18753 += 1 };
  s2 -> s2 [46, 46] { R18753 += 1 };
  s2 -> s3 [47, 47] { R18753 += 1 };
  s2 -> s1 [48, 114] { R18753 += 1 };
  s2 -> s8 [115, 115] { R18753 += 1 };
  s2 -> s1 [116, 65535] { R18753 += 1 };
  s3 -> s3 [0, 45] { R18753 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18753 += 1 };
  s3 -> s3 [47, 65535] { R18753 += 1 };
  s4 -> s3 [0, 45] { R18753 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18753 += 1 };
  s4 -> s3 [47, 114] { R18753 += 1 };
  s4 -> s5 [115, 115] { R18753 += 1 };
  s4 -> s3 [116, 65535] { R18753 += 1 };
  s5 -> s3 [0, 45] { R18753 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18753 += 1 };
  s5 -> s3 [47, 110] { R18753 += 1 };
  s5 -> s6 [111, 111] { R18753 += 1 };
  s5 -> s3 [112, 65535] { R18753 += 1 };
  s6 -> s3 [0, 45] { R18753 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18753 += 1 };
  s6 -> s3 [47, 98] { R18753 += 1 };
  s6 -> s7 [99, 99] { R18753 += 1 };
  s6 -> s3 [100, 65535] { R18753 += 1 };
  s7 -> s3 [0, 45] { R18753 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18753 += 1 };
  s7 -> s3 [47, 106] { R18753 += 1 };
  s7 -> s3 [108, 65535] { R18753 += 1 };
  s8 -> s1 [0, 45] { R18753 += 1 };
  s8 -> s2 [46, 46] { R18753 += 1 };
  s8 -> s3 [47, 47] { R18753 += 1 };
  s8 -> s1 [48, 110] { R18753 += 1 };
  s8 -> s9 [111, 111] { R18753 += 1 };
  s8 -> s1 [112, 65535] { R18753 += 1 };
  s9 -> s1 [0, 45] { R18753 += 1 };
  s9 -> s2 [46, 46] { R18753 += 1 };
  s9 -> s3 [47, 47] { R18753 += 1 };
  s9 -> s1 [48, 98] { R18753 += 1 };
  s9 -> s10 [99, 99] { R18753 += 1 };
  s9 -> s1 [100, 65535] { R18753 += 1 };
  s10 -> s1 [0, 45] { R18753 += 1 };
  s10 -> s2 [46, 46] { R18753 += 1 };
  s10 -> s3 [47, 47] { R18753 += 1 };
  s10 -> s1 [48, 106] { R18753 += 1 };
  s10 -> s1 [108, 65535] { R18753 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R18755 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R18754 += 1, R18755 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18755 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18757 += 1, R11961 += 1 };
  s0 -> s0 [0, 65535] { R18756 += 1, R18757 += 1 };
  s0 -> s2 [0, 65535] { R18757 += 1, R11960 += 1, R11961 += 1 };
  s0 -> s3 [47, 47] { R18757 += 1 };
  s0 -> s1 [48, 65535] { R18757 += 1, R11961 += 1 };
  s1 -> s1 [0, 46] { R18757 += 1, R11961 += 1 };
  s1 -> s3 [47, 47] { R18757 += 1 };
  s1 -> s1 [48, 65535] { R18757 += 1, R11961 += 1 };
  s2 -> s1 [0, 46] { R18757 += 1, R11961 += 1 };
  s2 -> s2 [0, 65535] { R18757 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [47, 47] { R18757 += 1 };
  s2 -> s1 [48, 65535] { R18757 += 1, R11961 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18757 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18759 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R18758 += 1, R18759 += 1 };
  s0 -> s2 [0, 65535] { R18759 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s1 [38, 42] { R18759 += 1, R17945 += 1 };
  s0 -> s1 [44, 45] { R18759 += 1, R17945 += 1 };
  s0 -> s1 [47, 62] { R18759 += 1, R17945 += 1 };
  s0 -> s1 [64, 65535] { R18759 += 1, R17945 += 1 };
  s1 -> s1 [0, 36] { R18759 += 1, R17945 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18759 += 1 };
  s1 -> s1 [38, 42] { R18759 += 1, R17945 += 1 };
  s1 -> s1 [44, 45] { R18759 += 1, R17945 += 1 };
  s1 -> s1 [47, 62] { R18759 += 1, R17945 += 1 };
  s1 -> s1 [64, 65535] { R18759 += 1, R17945 += 1 };
  s2 -> s1 [0, 36] { R18759 += 1, R17945 += 1 };
  s2 -> s2 [0, 65535] { R18759 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R18759 += 1, R17945 += 1 };
  s2 -> s1 [44, 45] { R18759 += 1, R17945 += 1 };
  s2 -> s1 [47, 62] { R18759 += 1, R17945 += 1 };
  s2 -> s1 [64, 65535] { R18759 += 1, R17945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R18760 += 1, R18761 += 1 };
  s0 -> s1 [0, 65535] { R18761 += 1, R17946 += 1, R17947 += 1 };
  s0 -> s2 [0, 65535] { R18761 += 1, R17947 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R18761 += 1, R17946 += 1, R17947 += 1 };
  s1 -> s2 [0, 65535] { R18761 += 1, R17947 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18761 += 1, R17947 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18761 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18761 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s2 [0, 65535] { R18763 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s0 [0, 65535] { R18762 += 1, R18763 += 1 };
  s0 -> s3 [0, 65535] { R18763 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s4 [63, 63] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s1 [64, 65535] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s1 [0, 65535] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s6 [0, 65535] { R18763 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R18763 += 1, R17949 += 1 };
  s2 -> s1 [0, 62] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s2 [0, 65535] { R18763 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s6 [0, 65535] { R18763 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [64, 65535] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [0, 62] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s2 [0, 65535] { R18763 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18763 += 1, R17948 += 1, R17949 += 1 };
  s3 -> s4 [63, 63] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [64, 65535] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s4 -> s1 [0, 65535] { R18763 += 1, R17949 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18763 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18763 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18763 += 1, R17949 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R18764 += 1, R18765 += 1 };
  s0 -> s1 [0, 65535] { R18765 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s2 [0, 65535] { R18765 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R18765 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18765 += 1, R17950 += 1, R17951 += 1 };
  s1 -> s2 [0, 65535] { R18765 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R18765 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R18765 += 1, R17951 += 1 };
  s2 -> s2 [0, 65535] { R18765 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R18765 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R18765 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s5 [0, 65535] { R18765 += 1 };
  s3 -> s3 [0, 65535] { R18765 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18765 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18765 += 1, R17951 += 1 };
  s6 -> s5 [0, 65535] { R18765 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R18767 += 1, R18721 += 1 };
  s0 -> s2 [0, 65535] { R18767 += 1, R18720 += 1, R18721 += 1 };
  s0 -> s0 [0, 65535] { R18766 += 1, R18767 += 1 };
  s0 -> s1 [45, 63] { R18767 += 1, R18721 += 1 };
  s0 -> s3 [87, 87] { R18767 += 1, R18721 += 1 };
  s0 -> s1 [88, 65535] { R18767 += 1, R18721 += 1 };
  s1 -> s1 [0, 43] { R18767 += 1, R18721 += 1 };
  s1 -> s1 [45, 63] { R18767 += 1, R18721 += 1 };
  s1 -> s3 [87, 87] { R18767 += 1, R18721 += 1 };
  s1 -> s1 [88, 65535] { R18767 += 1, R18721 += 1 };
  s2 -> s1 [0, 43] { R18767 += 1, R18721 += 1 };
  s2 -> s2 [0, 65535] { R18767 += 1, R18720 += 1, R18721 += 1 };
  s2 -> s1 [45, 63] { R18767 += 1, R18721 += 1 };
  s2 -> s3 [87, 87] { R18767 += 1, R18721 += 1 };
  s2 -> s1 [88, 65535] { R18767 += 1, R18721 += 1 };
  s3 -> s3 [0, 43] { R18767 += 1, R18721 += 1 };
  s3 -> s3 [0, 65535] { R18767 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R18767 += 1, R18721 += 1 };
  s3 -> s3 [87, 65535] { R18767 += 1, R18721 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R18769 += 1, R18723 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R18769 += 1, R18722 += 1, R18723 += 1 };
  s0 -> s0 [0, 65535] { R18768 += 1, R18769 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18769 += 1, R18723 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R18769 += 1 };
  s2 -> s1 [0, 65535] { R18769 += 1, R18723 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R18769 += 1, R18722 += 1, R18723 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18769 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R18771 += 1, R18725 += 1 };
  s0 -> s2 [0, 65535] { R18771 += 1, R18725 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R18771 += 1, R18724 += 1, R18725 += 1 };
  s0 -> s0 [0, 65535] { R18770 += 1, R18771 += 1 };
  s0 -> s4 [58, 58] { R18771 += 1, R18725 += 1 };
  s0 -> s1 [59, 65535] { R18771 += 1, R18725 += 1 };
  s1 -> s1 [0, 57] { R18771 += 1, R18725 += 1 };
  s1 -> s1 [0, 65535] { R18771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R18771 += 1, R18725 += 1 };
  s1 -> s1 [59, 65535] { R18771 += 1, R18725 += 1 };
  s2 -> s1 [0, 57] { R18771 += 1, R18725 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18771 += 1 };
  s2 -> s2 [0, 65535] { R18771 += 1, R18725 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R18771 += 1, R18725 += 1 };
  s2 -> s1 [59, 65535] { R18771 += 1, R18725 += 1 };
  s3 -> s1 [0, 57] { R18771 += 1, R18725 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R18771 += 1, R18725 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R18771 += 1, R18724 += 1, R18725 += 1 };
  s3 -> s4 [58, 58] { R18771 += 1, R18725 += 1 };
  s3 -> s1 [59, 65535] { R18771 += 1, R18725 += 1 };
  s4 -> s4 [0, 65535] { R18771 += 1, R18725 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18771 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R18773 += 1, R18727 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R18773 += 1, R18726 += 1, R18727 += 1 };
  s0 -> s0 [0, 65535] { R18772 += 1, R18773 += 1 };
  s0 -> s3 [0, 65535] { R18773 += 1, R18727 += 1, R12 += 1, R13 += 1 };
  s0 -> s4 [87, 87] { R18773 += 1, R18727 += 1 };
  s0 -> s1 [88, 65535] { R18773 += 1, R18727 += 1, R13 += 1 };
  s1 -> s1 [0, 86] { R18773 += 1, R18727 += 1, R13 += 1 };
  s1 -> s4 [87, 87] { R18773 += 1, R18727 += 1 };
  s1 -> s1 [88, 65535] { R18773 += 1, R18727 += 1, R13 += 1 };
  s2 -> s1 [0, 86] { R18773 += 1, R18727 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R18773 += 1, R18726 += 1, R18727 += 1 };
  s2 -> s3 [0, 65535] { R18773 += 1, R18727 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [87, 87] { R18773 += 1, R18727 += 1 };
  s2 -> s1 [88, 65535] { R18773 += 1, R18727 += 1, R13 += 1 };
  s3 -> s1 [0, 86] { R18773 += 1, R18727 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R18773 += 1, R18727 += 1, R12 += 1, R13 += 1 };
  s3 -> s4 [87, 87] { R18773 += 1, R18727 += 1 };
  s3 -> s1 [88, 65535] { R18773 += 1, R18727 += 1, R13 += 1 };
  s4 -> s4 [0, 65535] { R18773 += 1, R18727 += 1 };
  s4 -> s5 [0, 65535] { R18773 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18773 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s0 -> s2 [0, 65535] { R18775 += 1, R18728 += 1, R18729 += 1 };
  s0 -> s3 [0, 65535] { R18775 += 1, R18729 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s0 [0, 65535] { R18774 += 1, R18775 += 1 };
  s0 -> s4 [91, 91] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s0 -> s1 [92, 65535] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R18775 += 1, R18729 += 1 };
  s1 -> s6 [0, 65535] { R18775 += 1 };
  s1 -> s1 [0, 65535] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s2 -> s1 [0, 90] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18775 += 1, R18728 += 1, R18729 += 1 };
  s2 -> s3 [0, 65535] { R18775 += 1, R18729 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s4 [91, 91] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s2 -> s1 [92, 65535] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s3 -> s1 [0, 90] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18775 += 1 };
  s3 -> s3 [0, 65535] { R18775 += 1, R18729 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s4 [91, 91] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s3 -> s1 [92, 65535] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s4 -> s1 [0, 65535] { R18775 += 1, R18729 += 1, R17941 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18775 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18775 += 1, R18729 += 1 };
  s7 -> s6 [0, 65535] { R18775 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R18776 += 1, R18777 += 1 };
  s0 -> s1 [0, 65535] { R18777 += 1, R18731 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s2 [0, 65535] { R18777 += 1, R18730 += 1, R18731 += 1 };
  s0 -> s3 [0, 65535] { R18777 += 1, R18731 += 1, R17943 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R18777 += 1, R18731 += 1, R17942 += 1, R17943 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18777 += 1 };
  s1 -> s3 [0, 65535] { R18777 += 1, R18731 += 1, R17943 += 1, R6 += 1 };
  s2 -> s1 [0, 65535] { R18777 += 1, R18731 += 1, R17942 += 1, R17943 += 1 };
  s2 -> s2 [0, 65535] { R18777 += 1, R18730 += 1, R18731 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18777 += 1, R18731 += 1, R17943 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R18777 += 1, R18731 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18777 += 1 };
  s3 -> s3 [0, 65535] { R18777 += 1, R18731 += 1, R17943 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R18777 += 1, R18731 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18777 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18777 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R18779 += 1, R18733 += 1, R18699 += 1, R17935 += 1 };
  s0 -> s0 [0, 65535] { R18778 += 1, R18779 += 1 };
  s0 -> s2 [0, 65535] { R18779 += 1, R18733 += 1, R18698 += 1, R18699 += 1 };
  s0 -> s3 [0, 65535] { R18779 += 1, R18732 += 1, R18733 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18779 += 1, R18733 += 1, R18699 += 1, R17935 += 1 };
  s1 -> s6 [0, 65535] { R18779 += 1, R18733 += 1 };
  s1 -> s5 [0, 65535] { R18779 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R18779 += 1, R18733 += 1, R18699 += 1, R17935 += 1 };
  s2 -> s5 [0, 65535] { R18779 += 1 };
  s2 -> s2 [0, 65535] { R18779 += 1, R18733 += 1, R18698 += 1, R18699 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18779 += 1, R18733 += 1, R18699 += 1, R17935 += 1 };
  s3 -> s2 [0, 65535] { R18779 += 1, R18733 += 1, R18698 += 1, R18699 += 1 };
  s3 -> s3 [0, 65535] { R18779 += 1, R18732 += 1, R18733 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18779 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18779 += 1, R18733 += 1 };
  s6 -> s5 [0, 65535] { R18779 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R18781 += 1, R18735 += 1 };
  s0 -> s2 [0, 65535] { R18781 += 1, R18734 += 1, R18735 += 1 };
  s0 -> s0 [0, 65535] { R18780 += 1, R18781 += 1 };
  s1 -> s1 [0, 65535] { R18781 += 1, R18735 += 1 };
  s1 -> s4 [0, 65535] { R18781 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18781 += 1, R18735 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18781 += 1, R18734 += 1, R18735 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18781 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s0 -> s2 [0, 65535] { R18783 += 1, R18737 += 1, R18704 += 1, R18705 += 1 };
  s0 -> s0 [0, 65535] { R18782 += 1, R18783 += 1 };
  s0 -> s3 [0, 65535] { R18783 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s4 [87, 87] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s0 -> s1 [88, 65535] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s1 -> s1 [0, 86] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s1 -> s4 [87, 87] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s1 -> s1 [88, 65535] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s2 -> s1 [0, 86] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s2 -> s2 [0, 65535] { R18783 += 1, R18737 += 1, R18704 += 1, R18705 += 1 };
  s2 -> s4 [87, 87] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s2 -> s1 [88, 65535] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s3 -> s1 [0, 86] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s3 -> s2 [0, 65535] { R18783 += 1, R18737 += 1, R18704 += 1, R18705 += 1 };
  s3 -> s3 [0, 65535] { R18783 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s4 [87, 87] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s3 -> s1 [88, 65535] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s4 -> s5 [0, 65535] { R18783 += 1, R18737 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18783 += 1, R18737 += 1, R18705 += 1 };
  s4 -> s7 [0, 65535] { R18783 += 1 };
  s5 -> s5 [0, 65535] { R18783 += 1, R18737 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R18783 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18783 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18785 += 1, R18739 += 1, R18706 += 1, R18707 += 1 };
  s0 -> s0 [0, 65535] { R18784 += 1, R18785 += 1 };
  s0 -> s2 [0, 65535] { R18785 += 1, R18739 += 1, R18707 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R18785 += 1, R18738 += 1, R18739 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18785 += 1, R18739 += 1, R18706 += 1, R18707 += 1 };
  s1 -> s2 [0, 65535] { R18785 += 1, R18739 += 1, R18707 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R18785 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18785 += 1, R18739 += 1 };
  s2 -> s2 [0, 65535] { R18785 += 1, R18739 += 1, R18707 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R18785 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18785 += 1, R18739 += 1, R18706 += 1, R18707 += 1 };
  s3 -> s2 [0, 65535] { R18785 += 1, R18739 += 1, R18707 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R18785 += 1, R18738 += 1, R18739 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18785 += 1, R18739 += 1 };
  s5 -> s6 [0, 65535] { R18785 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18785 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s0 -> s2 [0, 65535] { R18787 += 1, R18740 += 1, R18741 += 1 };
  s0 -> s0 [0, 65535] { R18786 += 1, R18787 += 1 };
  s0 -> s3 [0, 65535] { R18787 += 1, R18741 += 1, R18708 += 1, R18709 += 1 };
  s0 -> s4 [0, 65535] { R18787 += 1, R18741 += 1, R18709 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s0 -> s1 [88, 65535] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s1 -> s1 [0, 86] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s1 -> s6 [0, 65535] { R18787 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R18787 += 1, R18741 += 1 };
  s1 -> s5 [87, 87] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s1 -> s1 [88, 65535] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s2 -> s1 [0, 86] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s2 -> s2 [0, 65535] { R18787 += 1, R18740 += 1, R18741 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R18787 += 1, R18741 += 1, R18708 += 1, R18709 += 1 };
  s2 -> s4 [0, 65535] { R18787 += 1, R18741 += 1, R18709 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s2 -> s1 [88, 65535] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s3 -> s1 [0, 86] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s3 -> s6 [0, 65535] { R18787 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R18787 += 1, R18741 += 1, R18708 += 1, R18709 += 1 };
  s3 -> s4 [0, 65535] { R18787 += 1, R18741 += 1, R18709 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s3 -> s1 [88, 65535] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s4 -> s1 [0, 86] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s4 -> s6 [0, 65535] { R18787 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R18787 += 1, R18741 += 1 };
  s4 -> s4 [0, 65535] { R18787 += 1, R18741 += 1, R18709 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s4 -> s1 [88, 65535] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s5 -> s5 [0, 65535] { R18787 += 1, R18741 += 1, R18709 += 1 };
  s6 -> s6 [0, 65535] { R18787 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R18787 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R18787 += 1, R18741 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s0 -> s2 [0, 65535] { R18789 += 1, R18743 += 1, R18711 += 1, R18692 += 1, R18693 += 1 };
  s0 -> s3 [0, 65535] { R18789 += 1, R18743 += 1, R18710 += 1, R18711 += 1 };
  s0 -> s4 [0, 65535] { R18789 += 1, R18742 += 1, R18743 += 1 };
  s0 -> s0 [0, 65535] { R18788 += 1, R18789 += 1 };
  s0 -> s1 [88, 65535] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s1 -> s1 [0, 86] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s1 -> s1 [0, 65535] { R18789 += 1, R18743 += 1, R18711 += 1 };
  s1 -> s6 [0, 65535] { R18789 += 1 };
  s1 -> s7 [0, 65535] { R18789 += 1, R18743 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s2 -> s1 [0, 86] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s2 -> s2 [0, 65535] { R18789 += 1, R18743 += 1, R18711 += 1, R18692 += 1, R18693 += 1 };
  s2 -> s6 [0, 65535] { R18789 += 1 };
  s2 -> s7 [0, 65535] { R18789 += 1, R18743 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s3 -> s1 [0, 86] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s3 -> s2 [0, 65535] { R18789 += 1, R18743 += 1, R18711 += 1, R18692 += 1, R18693 += 1 };
  s3 -> s3 [0, 65535] { R18789 += 1, R18743 += 1, R18710 += 1, R18711 += 1 };
  s3 -> s6 [0, 65535] { R18789 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s4 -> s1 [0, 86] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s4 -> s2 [0, 65535] { R18789 += 1, R18743 += 1, R18711 += 1, R18692 += 1, R18693 += 1 };
  s4 -> s3 [0, 65535] { R18789 += 1, R18743 += 1, R18710 += 1, R18711 += 1 };
  s4 -> s4 [0, 65535] { R18789 += 1, R18742 += 1, R18743 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [88, 65535] { R18789 += 1, R18743 += 1, R18711 += 1, R18693 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18789 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18789 += 1 };
  s7 -> s7 [0, 65535] { R18789 += 1, R18743 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1, R18694 += 1, R18695 += 1 };
  s0 -> s0 [0, 65535] { R18790 += 1, R18791 += 1 };
  s0 -> s2 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1, R18695 += 1, R17933 += 1 };
  s0 -> s3 [0, 65535] { R18791 += 1, R18744 += 1, R18745 += 1 };
  s0 -> s4 [0, 65535] { R18791 += 1, R18745 += 1, R18712 += 1, R18713 += 1 };
  s1 -> s5 [0, 65535] { R18791 += 1 };
  s1 -> s1 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1, R18694 += 1, R18695 += 1 };
  s1 -> s2 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1, R18695 += 1, R17933 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R18791 += 1, R18745 += 1 };
  s2 -> s5 [0, 65535] { R18791 += 1 };
  s2 -> s2 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1, R18695 += 1, R17933 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1 };
  s2 -> s8 [0, 65535] { R18791 += 1, R18745 += 1 };
  s3 -> s1 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1, R18694 += 1, R18695 += 1 };
  s3 -> s2 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1, R18695 += 1, R17933 += 1 };
  s3 -> s3 [0, 65535] { R18791 += 1, R18744 += 1, R18745 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R18791 += 1, R18745 += 1, R18712 += 1, R18713 += 1 };
  s4 -> s5 [0, 65535] { R18791 += 1 };
  s4 -> s1 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1, R18694 += 1, R18695 += 1 };
  s4 -> s2 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1, R18695 += 1, R17933 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18791 += 1, R18745 += 1, R18712 += 1, R18713 += 1 };
  s5 -> s5 [0, 65535] { R18791 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R18791 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18791 += 1, R18745 += 1, R18713 += 1 };
  s7 -> s8 [0, 65535] { R18791 += 1, R18745 += 1 };
  s8 -> s5 [0, 65535] { R18791 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18791 += 1, R18745 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R18793 += 1, R18747 += 1, R18714 += 1, R18715 += 1 };
  s0 -> s2 [0, 65535] { R18793 += 1, R18746 += 1, R18747 += 1 };
  s0 -> s0 [0, 65535] { R18792 += 1, R18793 += 1 };
  s0 -> s3 [0, 65535] { R18793 += 1, R18747 += 1, R18715 += 1, R18696 += 1, R18697 += 1 };
  s0 -> s4 [99, 99] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s1 -> s1 [0, 65535] { R18793 += 1, R18747 += 1, R18714 += 1, R18715 += 1 };
  s1 -> s3 [0, 65535] { R18793 += 1, R18747 += 1, R18715 += 1, R18696 += 1, R18697 += 1 };
  s1 -> s4 [99, 99] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s2 -> s1 [0, 65535] { R18793 += 1, R18747 += 1, R18714 += 1, R18715 += 1 };
  s2 -> s2 [0, 65535] { R18793 += 1, R18746 += 1, R18747 += 1 };
  s2 -> s3 [0, 65535] { R18793 += 1, R18747 += 1, R18715 += 1, R18696 += 1, R18697 += 1 };
  s2 -> s4 [99, 99] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s3 -> s3 [0, 65535] { R18793 += 1, R18747 += 1, R18715 += 1, R18696 += 1, R18697 += 1 };
  s3 -> s4 [99, 99] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s4 -> s5 [97, 97] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s5 -> s6 [108, 108] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s6 -> s7 [104, 104] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s7 -> s8 [111, 111] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s8 -> s9 [115, 115] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s9 -> s10 [116, 116] { R18793 += 1, R18747 += 1, R18715 += 1, R18697 += 1 };
  s10 -> s10 [0, 65535] { R18793 += 1, R18747 += 1, R18715 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s12 [0, 65535] { R18793 += 1 };
  s10 -> s13 [0, 65535] { R18793 += 1, R18747 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R18793 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s12 [0, 65535] { R18793 += 1 };
  s13 -> s13 [0, 65535] { R18793 += 1, R18747 += 1 };
  accepting s10, s11, s12, s13;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18795 += 1, R18749 += 1, R18716 += 1, R18717 += 1 };
  s0 -> s0 [0, 65535] { R18794 += 1, R18795 += 1 };
  s0 -> s2 [0, 65535] { R18795 += 1, R18748 += 1, R18749 += 1 };
  s0 -> s3 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1, R18701 += 1, R17934 += 1 };
  s0 -> s4 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1, R18700 += 1, R18701 += 1 };
  s1 -> s1 [0, 65535] { R18795 += 1, R18749 += 1, R18716 += 1, R18717 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1, R18701 += 1, R17934 += 1 };
  s1 -> s4 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1, R18700 += 1, R18701 += 1 };
  s1 -> s7 [0, 65535] { R18795 += 1 };
  s2 -> s1 [0, 65535] { R18795 += 1, R18749 += 1, R18716 += 1, R18717 += 1 };
  s2 -> s2 [0, 65535] { R18795 += 1, R18748 += 1, R18749 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1, R18701 += 1, R17934 += 1 };
  s2 -> s4 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1, R18700 += 1, R18701 += 1 };
  s3 -> s8 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1 };
  s3 -> s5 [0, 65535] { R18795 += 1, R18749 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1, R18701 += 1, R17934 += 1 };
  s3 -> s7 [0, 65535] { R18795 += 1 };
  s4 -> s5 [0, 65535] { R18795 += 1, R18749 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1, R18701 += 1, R17934 += 1 };
  s4 -> s4 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1, R18700 += 1, R18701 += 1 };
  s4 -> s7 [0, 65535] { R18795 += 1 };
  s5 -> s5 [0, 65535] { R18795 += 1, R18749 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R18795 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18795 += 1 };
  s8 -> s8 [0, 65535] { R18795 += 1, R18749 += 1, R18717 += 1 };
  s8 -> s5 [0, 65535] { R18795 += 1, R18749 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R18795 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R18797 += 1, R18751 += 1, R18718 += 1, R18719 += 1 };
  s0 -> s0 [0, 65535] { R18796 += 1, R18797 += 1 };
  s0 -> s2 [0, 65535] { R18797 += 1, R18751 += 1, R18719 += 1, R18702 += 1, R18703 += 1 };
  s0 -> s3 [0, 65535] { R18797 += 1, R18750 += 1, R18751 += 1 };
  s0 -> s4 [108, 108] { R18797 += 1, R18751 += 1, R18719 += 1, R18703 += 1 };
  s1 -> s1 [0, 65535] { R18797 += 1, R18751 += 1, R18718 += 1, R18719 += 1 };
  s1 -> s2 [0, 65535] { R18797 += 1, R18751 += 1, R18719 += 1, R18702 += 1, R18703 += 1 };
  s1 -> s4 [108, 108] { R18797 += 1, R18751 += 1, R18719 += 1, R18703 += 1 };
  s2 -> s2 [0, 65535] { R18797 += 1, R18751 += 1, R18719 += 1, R18702 += 1, R18703 += 1 };
  s2 -> s4 [108, 108] { R18797 += 1, R18751 += 1, R18719 += 1, R18703 += 1 };
  s3 -> s1 [0, 65535] { R18797 += 1, R18751 += 1, R18718 += 1, R18719 += 1 };
  s3 -> s2 [0, 65535] { R18797 += 1, R18751 += 1, R18719 += 1, R18702 += 1, R18703 += 1 };
  s3 -> s3 [0, 65535] { R18797 += 1, R18750 += 1, R18751 += 1 };
  s3 -> s4 [108, 108] { R18797 += 1, R18751 += 1, R18719 += 1, R18703 += 1 };
  s4 -> s5 [111, 111] { R18797 += 1, R18751 += 1, R18719 += 1, R18703 += 1 };
  s5 -> s6 [0, 65535] { R18797 += 1, R18751 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R18797 += 1, R18751 += 1, R18719 += 1 };
  s5 -> s8 [0, 65535] { R18797 += 1 };
  s6 -> s6 [0, 65535] { R18797 += 1, R18751 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R18797 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R18797 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R1 = R18697 && R2 = R18719 && R3 = R17951 && R4 = R18797 && R12 = 0 && R13 = -1 && R11960 = 0 && R11961 = R18751 && R17940 = 0 && R17941 = 1 && R17942 = 0 && R17943 = 1 && R17944 - R18751 = 1 && R17945 = R17951 && R17946 - R18751 = 1 && R17947 = R17951 && R17948 - R18751 = 1 && R17949 = R17951 && R17950 - R18751 = 1 && R18696 = 0 && R18702 = 0 && R18703 = 0 && R18704 = 0 && R18705 = R18719 && R18706 = 0 && R18707 = R18719 && R18708 = 0 && R18709 = R18719 && R18710 = 0 && R18711 = R18719 && R18712 = 0 && R18713 = R18719 && R18714 = 0 && R18715 = R18719 && R18716 = 0 && R18717 = R18719 && R18718 = 0 && R18720 = 0 && R18721 = R18751 && R18722 = 0 && R18723 = R18751 && R18724 = 0 && R18725 = R18751 && R18726 = 0 && R18727 = R18751 && R18728 = 0 && R18729 = R18751 && R18730 = 0 && R18731 = R18751 && R18732 = 0 && R18733 = R18751 && R18734 = 0 && R18735 = R18751 && R18736 = 0 && R18737 = R18751 && R18738 = 0 && R18739 = R18751 && R18740 = 0 && R18741 = R18751 && R18742 = 0 && R18743 = R18751 && R18744 = 0 && R18745 = R18751 && R18746 = 0 && R18747 = R18751 && R18748 = 0 && R18749 = R18751 && R18750 = 0 && R18752 = 10 && R18753 = R18797 && R18754 = 10 && R18755 = R18797 && R18756 = 10 && R18757 = R18797 && R18758 = 10 && R18759 = R18797 && R18760 = 10 && R18761 = R18797 && R18762 = 10 && R18763 = R18797 && R18764 = 10 && R18765 = R18797 && R18766 = 10 && R18767 = R18797 && R18768 = 10 && R18769 = R18797 && R18770 = 10 && R18771 = R18797 && R18772 = 10 && R18773 = R18797 && R18774 = 10 && R18775 = R18797 && R18776 = 10 && R18777 = R18797 && R18778 = 10 && R18779 = R18797 && R18780 = 10 && R18781 = R18797 && R18782 = 10 && R18783 = R18797 && R18784 = 10 && R18785 = R18797 && R18786 = 10 && R18787 = R18797 && R18788 = 10 && R18789 = R18797 && R18790 = 10 && R18791 = R18797 && R18792 = 10 && R18793 = R18797 && R18794 = 10 && R18795 = R18797 && R18796 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R18751 < R17951 && -1 < R18697 && 0 < R18719 && -1 < R18751 && 9 < R18797 && (R17936 != 0 || ((R5 != 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R0 = R17937 || R17937 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R17937 != 1 || -1 < R0) && (R0 = R17937 || R17937 = 1))))) && (R17938 != 0 || ((R5 != 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R0 = R17939 || R17939 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R17939 != 1 || -1 < R0) && (R0 = R17939 || R17939 = 1))))) && (R18692 != 0 || R18693 = R18697 || (R17933 = 0 && R18697 = 0)) && (R18694 != 0 || R18695 = R18697 || (R17933 = 0 && R18697 = 0)) && (R17934 = 0 || (R18700 = 0 && R18701 = 0)) && (R17935 = 0 || (R18698 = 0 && R18699 = 0)) && (R17936 = 0 || (R5 = 0 && R0 < 0)) && (R17938 = 0 || (R5 = 0 && R0 < 0)) && (R18692 = 0 || (R17933 = 0 && R18697 = 0)) && (R18694 = 0 || (R17933 = 0 && R18697 = 0));
// End of Parikh automata intersection problem
