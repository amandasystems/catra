// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11960, R11961, R12, R13, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R18586, R18587, R18588, R18589, R18590, R18591, R18592, R18593, R18594, R18595, R18596, R18597, R18598, R18599, R18600, R18601, R18602, R18603, R18604, R18605, R18606, R18607, R18608, R18609, R18610, R18611, R18612, R18613, R18614, R18615, R18616, R18617, R18618, R18619, R18620, R18621, R18622, R18623, R18624, R18625, R18626, R18627, R18628, R18629, R18630, R18631, R18632, R18633, R18634, R18635, R18636, R18637, R18638, R18639, R18640, R18641, R18642, R18643, R18644, R18645, R18646, R18647, R18648, R18649, R18650, R18651, R18652, R18653, R18654, R18655, R18656, R18657, R18658, R18659, R18660, R18661, R18662, R18663, R18664, R18665, R18666, R18667, R18668, R18669, R18670, R18671, R18672, R18673, R18674, R18675, R18676, R18677, R18678, R18679, R18680, R18681, R18682, R18683, R18684, R18685, R18686, R18687, R18688, R18689, R18690, R18691, R2, R3, R4, R5, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18647 += 1 };
  s0 -> s0 [0, 65535] { R18646 += 1, R18647 += 1 };
  s0 -> s2 [46, 46] { R18647 += 1 };
  s0 -> s3 [47, 47] { R18647 += 1 };
  s0 -> s1 [48, 65535] { R18647 += 1 };
  s1 -> s1 [0, 45] { R18647 += 1 };
  s1 -> s2 [46, 46] { R18647 += 1 };
  s1 -> s3 [47, 47] { R18647 += 1 };
  s1 -> s1 [48, 65535] { R18647 += 1 };
  s2 -> s1 [0, 45] { R18647 += 1 };
  s2 -> s2 [46, 46] { R18647 += 1 };
  s2 -> s3 [47, 47] { R18647 += 1 };
  s2 -> s1 [48, 114] { R18647 += 1 };
  s2 -> s8 [115, 115] { R18647 += 1 };
  s2 -> s1 [116, 65535] { R18647 += 1 };
  s3 -> s3 [0, 45] { R18647 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18647 += 1 };
  s3 -> s3 [47, 65535] { R18647 += 1 };
  s4 -> s3 [0, 45] { R18647 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18647 += 1 };
  s4 -> s3 [47, 114] { R18647 += 1 };
  s4 -> s5 [115, 115] { R18647 += 1 };
  s4 -> s3 [116, 65535] { R18647 += 1 };
  s5 -> s3 [0, 45] { R18647 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18647 += 1 };
  s5 -> s3 [47, 110] { R18647 += 1 };
  s5 -> s6 [111, 111] { R18647 += 1 };
  s5 -> s3 [112, 65535] { R18647 += 1 };
  s6 -> s3 [0, 45] { R18647 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18647 += 1 };
  s6 -> s3 [47, 98] { R18647 += 1 };
  s6 -> s7 [99, 99] { R18647 += 1 };
  s6 -> s3 [100, 65535] { R18647 += 1 };
  s7 -> s3 [0, 45] { R18647 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18647 += 1 };
  s7 -> s3 [47, 106] { R18647 += 1 };
  s7 -> s3 [108, 65535] { R18647 += 1 };
  s8 -> s1 [0, 45] { R18647 += 1 };
  s8 -> s2 [46, 46] { R18647 += 1 };
  s8 -> s3 [47, 47] { R18647 += 1 };
  s8 -> s1 [48, 110] { R18647 += 1 };
  s8 -> s9 [111, 111] { R18647 += 1 };
  s8 -> s1 [112, 65535] { R18647 += 1 };
  s9 -> s1 [0, 45] { R18647 += 1 };
  s9 -> s2 [46, 46] { R18647 += 1 };
  s9 -> s3 [47, 47] { R18647 += 1 };
  s9 -> s1 [48, 98] { R18647 += 1 };
  s9 -> s10 [99, 99] { R18647 += 1 };
  s9 -> s1 [100, 65535] { R18647 += 1 };
  s10 -> s1 [0, 45] { R18647 += 1 };
  s10 -> s2 [46, 46] { R18647 += 1 };
  s10 -> s3 [47, 47] { R18647 += 1 };
  s10 -> s1 [48, 106] { R18647 += 1 };
  s10 -> s1 [108, 65535] { R18647 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R18649 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R18648 += 1, R18649 += 1 };
  s1 -> s1 [0, 65535] { R18649 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18651 += 1, R11961 += 1 };
  s0 -> s2 [0, 65535] { R18651 += 1, R11960 += 1, R11961 += 1 };
  s0 -> s0 [0, 65535] { R18650 += 1, R18651 += 1 };
  s0 -> s3 [47, 47] { R18651 += 1 };
  s0 -> s1 [48, 65535] { R18651 += 1, R11961 += 1 };
  s1 -> s1 [0, 46] { R18651 += 1, R11961 += 1 };
  s1 -> s3 [47, 47] { R18651 += 1 };
  s1 -> s1 [48, 65535] { R18651 += 1, R11961 += 1 };
  s2 -> s1 [0, 46] { R18651 += 1, R11961 += 1 };
  s2 -> s2 [0, 65535] { R18651 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [47, 47] { R18651 += 1 };
  s2 -> s1 [48, 65535] { R18651 += 1, R11961 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18651 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18653 += 1, R17945 += 1 };
  s0 -> s2 [0, 65535] { R18653 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R18652 += 1, R18653 += 1 };
  s0 -> s1 [38, 42] { R18653 += 1, R17945 += 1 };
  s0 -> s1 [44, 45] { R18653 += 1, R17945 += 1 };
  s0 -> s1 [47, 62] { R18653 += 1, R17945 += 1 };
  s0 -> s1 [64, 65535] { R18653 += 1, R17945 += 1 };
  s1 -> s1 [0, 36] { R18653 += 1, R17945 += 1 };
  s1 -> s1 [0, 65535] { R18653 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R18653 += 1, R17945 += 1 };
  s1 -> s1 [44, 45] { R18653 += 1, R17945 += 1 };
  s1 -> s1 [47, 62] { R18653 += 1, R17945 += 1 };
  s1 -> s1 [64, 65535] { R18653 += 1, R17945 += 1 };
  s2 -> s1 [0, 36] { R18653 += 1, R17945 += 1 };
  s2 -> s2 [0, 65535] { R18653 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R18653 += 1, R17945 += 1 };
  s2 -> s1 [44, 45] { R18653 += 1, R17945 += 1 };
  s2 -> s1 [47, 62] { R18653 += 1, R17945 += 1 };
  s2 -> s1 [64, 65535] { R18653 += 1, R17945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R18654 += 1, R18655 += 1 };
  s0 -> s1 [0, 65535] { R18655 += 1, R17947 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R18655 += 1, R17946 += 1, R17947 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18655 += 1 };
  s1 -> s1 [0, 65535] { R18655 += 1, R17947 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18655 += 1, R17947 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R18655 += 1, R17946 += 1, R17947 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18655 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s2 [0, 65535] { R18657 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s0 [0, 65535] { R18656 += 1, R18657 += 1 };
  s0 -> s3 [0, 65535] { R18657 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s4 [63, 63] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s1 [64, 65535] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s7 [0, 65535] { R18657 += 1, R17949 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s6 [0, 65535] { R18657 += 1 };
  s2 -> s1 [0, 62] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s2 [0, 65535] { R18657 += 1, R17948 += 1, R17949 += 1 };
  s2 -> s3 [0, 65535] { R18657 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [64, 65535] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [0, 62] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s3 [0, 65535] { R18657 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18657 += 1 };
  s3 -> s4 [63, 63] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [64, 65535] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s4 -> s1 [0, 65535] { R18657 += 1, R17949 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18657 += 1 };
  s7 -> s7 [0, 65535] { R18657 += 1, R17949 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18657 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18659 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s0 -> s0 [0, 65535] { R18658 += 1, R18659 += 1 };
  s0 -> s2 [0, 65535] { R18659 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s3 [0, 65535] { R18659 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R18659 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18659 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s1 -> s3 [0, 65535] { R18659 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18659 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s2 -> s2 [0, 65535] { R18659 += 1, R17950 += 1, R17951 += 1 };
  s2 -> s3 [0, 65535] { R18659 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R18659 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18659 += 1, R17951 += 1 };
  s3 -> s3 [0, 65535] { R18659 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R18659 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18659 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18659 += 1, R17951 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R18661 += 1, R18615 += 1 };
  s0 -> s0 [0, 65535] { R18660 += 1, R18661 += 1 };
  s0 -> s2 [0, 65535] { R18661 += 1, R18614 += 1, R18615 += 1 };
  s0 -> s1 [45, 63] { R18661 += 1, R18615 += 1 };
  s0 -> s3 [87, 87] { R18661 += 1, R18615 += 1 };
  s0 -> s1 [88, 65535] { R18661 += 1, R18615 += 1 };
  s1 -> s1 [0, 43] { R18661 += 1, R18615 += 1 };
  s1 -> s1 [45, 63] { R18661 += 1, R18615 += 1 };
  s1 -> s3 [87, 87] { R18661 += 1, R18615 += 1 };
  s1 -> s1 [88, 65535] { R18661 += 1, R18615 += 1 };
  s2 -> s1 [0, 43] { R18661 += 1, R18615 += 1 };
  s2 -> s2 [0, 65535] { R18661 += 1, R18614 += 1, R18615 += 1 };
  s2 -> s1 [45, 63] { R18661 += 1, R18615 += 1 };
  s2 -> s3 [87, 87] { R18661 += 1, R18615 += 1 };
  s2 -> s1 [88, 65535] { R18661 += 1, R18615 += 1 };
  s3 -> s3 [0, 43] { R18661 += 1, R18615 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18661 += 1 };
  s3 -> s3 [45, 63] { R18661 += 1, R18615 += 1 };
  s3 -> s3 [87, 65535] { R18661 += 1, R18615 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R18663 += 1, R18617 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R18662 += 1, R18663 += 1 };
  s0 -> s2 [0, 65535] { R18663 += 1, R18616 += 1, R18617 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18663 += 1, R18617 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R18663 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18663 += 1, R18617 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R18663 += 1, R18616 += 1, R18617 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18663 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R18665 += 1, R18619 += 1 };
  s0 -> s2 [0, 65535] { R18665 += 1, R18618 += 1, R18619 += 1 };
  s0 -> s0 [0, 65535] { R18664 += 1, R18665 += 1 };
  s0 -> s3 [0, 65535] { R18665 += 1, R18619 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R18665 += 1, R18619 += 1 };
  s0 -> s1 [59, 65535] { R18665 += 1, R18619 += 1 };
  s1 -> s1 [0, 57] { R18665 += 1, R18619 += 1 };
  s1 -> s1 [0, 65535] { R18665 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R18665 += 1, R18619 += 1 };
  s1 -> s1 [59, 65535] { R18665 += 1, R18619 += 1 };
  s2 -> s1 [0, 57] { R18665 += 1, R18619 += 1 };
  s2 -> s2 [0, 65535] { R18665 += 1, R18618 += 1, R18619 += 1 };
  s2 -> s3 [0, 65535] { R18665 += 1, R18619 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R18665 += 1, R18619 += 1 };
  s2 -> s1 [59, 65535] { R18665 += 1, R18619 += 1 };
  s3 -> s1 [0, 57] { R18665 += 1, R18619 += 1 };
  s3 -> s3 [0, 65535] { R18665 += 1, R18619 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18665 += 1 };
  s3 -> s4 [58, 58] { R18665 += 1, R18619 += 1 };
  s3 -> s1 [59, 65535] { R18665 += 1, R18619 += 1 };
  s4 -> s4 [0, 65535] { R18665 += 1, R18619 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18665 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R18667 += 1, R18621 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R18666 += 1, R18667 += 1 };
  s0 -> s2 [0, 65535] { R18667 += 1, R18620 += 1, R18621 += 1 };
  s0 -> s3 [0, 65535] { R18667 += 1, R18621 += 1, R12 += 1, R13 += 1 };
  s0 -> s4 [87, 87] { R18667 += 1, R18621 += 1 };
  s0 -> s1 [88, 65535] { R18667 += 1, R18621 += 1, R13 += 1 };
  s1 -> s1 [0, 86] { R18667 += 1, R18621 += 1, R13 += 1 };
  s1 -> s4 [87, 87] { R18667 += 1, R18621 += 1 };
  s1 -> s1 [88, 65535] { R18667 += 1, R18621 += 1, R13 += 1 };
  s2 -> s1 [0, 86] { R18667 += 1, R18621 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R18667 += 1, R18620 += 1, R18621 += 1 };
  s2 -> s3 [0, 65535] { R18667 += 1, R18621 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [87, 87] { R18667 += 1, R18621 += 1 };
  s2 -> s1 [88, 65535] { R18667 += 1, R18621 += 1, R13 += 1 };
  s3 -> s1 [0, 86] { R18667 += 1, R18621 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R18667 += 1, R18621 += 1, R12 += 1, R13 += 1 };
  s3 -> s4 [87, 87] { R18667 += 1, R18621 += 1 };
  s3 -> s1 [88, 65535] { R18667 += 1, R18621 += 1, R13 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18667 += 1 };
  s4 -> s4 [0, 65535] { R18667 += 1, R18621 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18667 += 1 };
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s0 -> s2 [0, 65535] { R18669 += 1, R18622 += 1, R18623 += 1 };
  s0 -> s3 [0, 65535] { R18669 += 1, R18623 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s0 [0, 65535] { R18668 += 1, R18669 += 1 };
  s0 -> s4 [91, 91] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s0 -> s1 [92, 65535] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s1 -> s1 [0, 65535] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s1 -> s7 [0, 65535] { R18669 += 1, R18623 += 1 };
  s1 -> s5 [0, 65535] { R18669 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s2 -> s2 [0, 65535] { R18669 += 1, R18622 += 1, R18623 += 1 };
  s2 -> s3 [0, 65535] { R18669 += 1, R18623 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s2 -> s1 [92, 65535] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s3 -> s1 [0, 90] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s3 -> s5 [0, 65535] { R18669 += 1 };
  s3 -> s3 [0, 65535] { R18669 += 1, R18623 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s3 -> s1 [92, 65535] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s4 -> s1 [0, 65535] { R18669 += 1, R18623 += 1, R17941 += 1 };
  s5 -> s5 [0, 65535] { R18669 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18669 += 1, R18623 += 1 };
  s7 -> s5 [0, 65535] { R18669 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R18670 += 1, R18671 += 1 };
  s0 -> s1 [0, 65535] { R18671 += 1, R18625 += 1, R17943 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R18671 += 1, R18625 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s3 [0, 65535] { R18671 += 1, R18624 += 1, R18625 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R18671 += 1 };
  s1 -> s1 [0, 65535] { R18671 += 1, R18625 += 1, R17943 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R18671 += 1, R18625 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18671 += 1 };
  s2 -> s1 [0, 65535] { R18671 += 1, R18625 += 1, R17943 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R18671 += 1, R18625 += 1, R17942 += 1, R17943 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18671 += 1, R18625 += 1, R17943 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R18671 += 1, R18625 += 1, R17942 += 1, R17943 += 1 };
  s3 -> s3 [0, 65535] { R18671 += 1, R18624 += 1, R18625 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18671 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18671 += 1 };
  s6 -> s6 [0, 65535] { R18671 += 1, R18625 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R18672 += 1, R18673 += 1 };
  s0 -> s1 [0, 65535] { R18673 += 1, R18627 += 1, R18592 += 1, R18593 += 1 };
  s0 -> s2 [0, 65535] { R18673 += 1, R18626 += 1, R18627 += 1 };
  s0 -> s3 [0, 65535] { R18673 += 1, R18627 += 1, R18593 += 1, R17935 += 1 };
  s1 -> s1 [0, 65535] { R18673 += 1, R18627 += 1, R18592 += 1, R18593 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18673 += 1 };
  s1 -> s3 [0, 65535] { R18673 += 1, R18627 += 1, R18593 += 1, R17935 += 1 };
  s2 -> s1 [0, 65535] { R18673 += 1, R18627 += 1, R18592 += 1, R18593 += 1 };
  s2 -> s2 [0, 65535] { R18673 += 1, R18626 += 1, R18627 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18673 += 1, R18627 += 1, R18593 += 1, R17935 += 1 };
  s3 -> s4 [0, 65535] { R18673 += 1, R18627 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18673 += 1 };
  s3 -> s3 [0, 65535] { R18673 += 1, R18627 += 1, R18593 += 1, R17935 += 1 };
  s4 -> s4 [0, 65535] { R18673 += 1, R18627 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18673 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18673 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R18675 += 1, R18628 += 1, R18629 += 1 };
  s0 -> s0 [0, 65535] { R18674 += 1, R18675 += 1 };
  s0 -> s2 [0, 65535] { R18675 += 1, R18629 += 1 };
  s1 -> s1 [0, 65535] { R18675 += 1, R18628 += 1, R18629 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R18675 += 1, R18629 += 1 };
  s2 -> s3 [0, 65535] { R18675 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18675 += 1, R18629 += 1 };
  s3 -> s3 [0, 65535] { R18675 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s0 -> s2 [0, 65535] { R18677 += 1, R18630 += 1, R18631 += 1 };
  s0 -> s3 [0, 65535] { R18677 += 1, R18631 += 1, R18598 += 1, R18599 += 1 };
  s0 -> s0 [0, 65535] { R18676 += 1, R18677 += 1 };
  s0 -> s4 [87, 87] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s0 -> s1 [88, 65535] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s1 -> s1 [0, 86] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s1 -> s4 [87, 87] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s1 -> s1 [88, 65535] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s2 -> s1 [0, 86] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s2 -> s2 [0, 65535] { R18677 += 1, R18630 += 1, R18631 += 1 };
  s2 -> s3 [0, 65535] { R18677 += 1, R18631 += 1, R18598 += 1, R18599 += 1 };
  s2 -> s4 [87, 87] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s2 -> s1 [88, 65535] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s3 -> s1 [0, 86] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s3 -> s3 [0, 65535] { R18677 += 1, R18631 += 1, R18598 += 1, R18599 += 1 };
  s3 -> s4 [87, 87] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s3 -> s1 [88, 65535] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s4 -> s4 [0, 65535] { R18677 += 1, R18631 += 1, R18599 += 1 };
  s4 -> s5 [0, 65535] { R18677 += 1 };
  s4 -> s6 [0, 65535] { R18677 += 1, R18631 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R18677 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R18677 += 1 };
  s6 -> s6 [0, 65535] { R18677 += 1, R18631 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18679 += 1, R18633 += 1, R18601 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R18679 += 1, R18633 += 1, R18600 += 1, R18601 += 1 };
  s0 -> s3 [0, 65535] { R18679 += 1, R18632 += 1, R18633 += 1 };
  s0 -> s0 [0, 65535] { R18678 += 1, R18679 += 1 };
  s1 -> s1 [0, 65535] { R18679 += 1, R18633 += 1, R18601 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R18679 += 1 };
  s1 -> s6 [0, 65535] { R18679 += 1, R18633 += 1 };
  s2 -> s1 [0, 65535] { R18679 += 1, R18633 += 1, R18601 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18679 += 1, R18633 += 1, R18600 += 1, R18601 += 1 };
  s2 -> s5 [0, 65535] { R18679 += 1 };
  s3 -> s1 [0, 65535] { R18679 += 1, R18633 += 1, R18601 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R18679 += 1, R18633 += 1, R18600 += 1, R18601 += 1 };
  s3 -> s3 [0, 65535] { R18679 += 1, R18632 += 1, R18633 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18679 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18679 += 1 };
  s6 -> s6 [0, 65535] { R18679 += 1, R18633 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s0 -> s2 [0, 65535] { R18681 += 1, R18634 += 1, R18635 += 1 };
  s0 -> s3 [0, 65535] { R18681 += 1, R18635 += 1, R18603 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R18680 += 1, R18681 += 1 };
  s0 -> s4 [0, 65535] { R18681 += 1, R18635 += 1, R18602 += 1, R18603 += 1 };
  s0 -> s5 [87, 87] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s0 -> s1 [88, 65535] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s1 -> s1 [0, 86] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s1 -> s1 [0, 65535] { R18681 += 1, R18635 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R18681 += 1 };
  s1 -> s5 [87, 87] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s1 -> s1 [88, 65535] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s2 -> s1 [0, 86] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s2 -> s2 [0, 65535] { R18681 += 1, R18634 += 1, R18635 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R18681 += 1, R18635 += 1, R18603 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R18681 += 1, R18635 += 1, R18602 += 1, R18603 += 1 };
  s2 -> s5 [87, 87] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s2 -> s1 [88, 65535] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s3 -> s1 [0, 86] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s3 -> s8 [0, 65535] { R18681 += 1, R18635 += 1 };
  s3 -> s3 [0, 65535] { R18681 += 1, R18635 += 1, R18603 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R18681 += 1 };
  s3 -> s5 [87, 87] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s3 -> s1 [88, 65535] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s4 -> s1 [0, 86] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R18681 += 1, R18635 += 1, R18603 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R18681 += 1, R18635 += 1, R18602 += 1, R18603 += 1 };
  s4 -> s7 [0, 65535] { R18681 += 1 };
  s4 -> s5 [87, 87] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s4 -> s1 [88, 65535] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s5 -> s5 [0, 65535] { R18681 += 1, R18635 += 1, R18603 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18681 += 1 };
  s8 -> s8 [0, 65535] { R18681 += 1, R18635 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R18681 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s0 -> s2 [0, 65535] { R18683 += 1, R18637 += 1, R18605 += 1, R18586 += 1, R18587 += 1 };
  s0 -> s0 [0, 65535] { R18682 += 1, R18683 += 1 };
  s0 -> s3 [0, 65535] { R18683 += 1, R18636 += 1, R18637 += 1 };
  s0 -> s4 [0, 65535] { R18683 += 1, R18637 += 1, R18604 += 1, R18605 += 1 };
  s0 -> s1 [88, 65535] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s1 -> s1 [0, 86] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s1 -> s1 [0, 65535] { R18683 += 1, R18637 += 1, R18605 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18683 += 1 };
  s1 -> s7 [0, 65535] { R18683 += 1, R18637 += 1 };
  s1 -> s1 [88, 65535] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s2 -> s1 [0, 86] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s2 -> s2 [0, 65535] { R18683 += 1, R18637 += 1, R18605 += 1, R18586 += 1, R18587 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18683 += 1 };
  s2 -> s7 [0, 65535] { R18683 += 1, R18637 += 1 };
  s2 -> s1 [88, 65535] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s3 -> s1 [0, 86] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s3 -> s2 [0, 65535] { R18683 += 1, R18637 += 1, R18605 += 1, R18586 += 1, R18587 += 1 };
  s3 -> s3 [0, 65535] { R18683 += 1, R18636 += 1, R18637 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R18683 += 1, R18637 += 1, R18604 += 1, R18605 += 1 };
  s3 -> s1 [88, 65535] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s4 -> s1 [0, 86] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s4 -> s2 [0, 65535] { R18683 += 1, R18637 += 1, R18605 += 1, R18586 += 1, R18587 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18683 += 1 };
  s4 -> s4 [0, 65535] { R18683 += 1, R18637 += 1, R18604 += 1, R18605 += 1 };
  s4 -> s1 [88, 65535] { R18683 += 1, R18637 += 1, R18605 += 1, R18587 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18683 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18683 += 1 };
  s7 -> s7 [0, 65535] { R18683 += 1, R18637 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18685 += 1, R18639 += 1, R18606 += 1, R18607 += 1 };
  s0 -> s2 [0, 65535] { R18685 += 1, R18638 += 1, R18639 += 1 };
  s0 -> s3 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1, R18589 += 1, R17933 += 1 };
  s0 -> s0 [0, 65535] { R18684 += 1, R18685 += 1 };
  s0 -> s4 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1, R18588 += 1, R18589 += 1 };
  s1 -> s1 [0, 65535] { R18685 += 1, R18639 += 1, R18606 += 1, R18607 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18685 += 1 };
  s1 -> s3 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1, R18589 += 1, R17933 += 1 };
  s1 -> s4 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1, R18588 += 1, R18589 += 1 };
  s2 -> s1 [0, 65535] { R18685 += 1, R18639 += 1, R18606 += 1, R18607 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18685 += 1, R18638 += 1, R18639 += 1 };
  s2 -> s3 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1, R18589 += 1, R17933 += 1 };
  s2 -> s4 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1, R18588 += 1, R18589 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18685 += 1 };
  s3 -> s3 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1, R18589 += 1, R17933 += 1 };
  s3 -> s8 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1 };
  s3 -> s7 [0, 65535] { R18685 += 1, R18639 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18685 += 1 };
  s4 -> s3 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1, R18589 += 1, R17933 += 1 };
  s4 -> s4 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1, R18588 += 1, R18589 += 1 };
  s4 -> s7 [0, 65535] { R18685 += 1, R18639 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18685 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18685 += 1 };
  s7 -> s7 [0, 65535] { R18685 += 1, R18639 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R18685 += 1 };
  s8 -> s8 [0, 65535] { R18685 += 1, R18639 += 1, R18607 += 1 };
  s8 -> s7 [0, 65535] { R18685 += 1, R18639 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R18687 += 1, R18641 += 1, R18609 += 1, R18590 += 1, R18591 += 1 };
  s0 -> s0 [0, 65535] { R18686 += 1, R18687 += 1 };
  s0 -> s2 [0, 65535] { R18687 += 1, R18640 += 1, R18641 += 1 };
  s0 -> s3 [0, 65535] { R18687 += 1, R18641 += 1, R18608 += 1, R18609 += 1 };
  s0 -> s4 [97, 97] { R18687 += 1, R18641 += 1, R18609 += 1, R18591 += 1 };
  s1 -> s1 [0, 65535] { R18687 += 1, R18641 += 1, R18609 += 1, R18590 += 1, R18591 += 1 };
  s1 -> s4 [97, 97] { R18687 += 1, R18641 += 1, R18609 += 1, R18591 += 1 };
  s2 -> s1 [0, 65535] { R18687 += 1, R18641 += 1, R18609 += 1, R18590 += 1, R18591 += 1 };
  s2 -> s2 [0, 65535] { R18687 += 1, R18640 += 1, R18641 += 1 };
  s2 -> s3 [0, 65535] { R18687 += 1, R18641 += 1, R18608 += 1, R18609 += 1 };
  s2 -> s4 [97, 97] { R18687 += 1, R18641 += 1, R18609 += 1, R18591 += 1 };
  s3 -> s1 [0, 65535] { R18687 += 1, R18641 += 1, R18609 += 1, R18590 += 1, R18591 += 1 };
  s3 -> s3 [0, 65535] { R18687 += 1, R18641 += 1, R18608 += 1, R18609 += 1 };
  s3 -> s4 [97, 97] { R18687 += 1, R18641 += 1, R18609 += 1, R18591 += 1 };
  s4 -> s5 [108, 108] { R18687 += 1, R18641 += 1, R18609 += 1, R18591 += 1 };
  s5 -> s6 [104, 104] { R18687 += 1, R18641 += 1, R18609 += 1, R18591 += 1 };
  s6 -> s7 [111, 111] { R18687 += 1, R18641 += 1, R18609 += 1, R18591 += 1 };
  s7 -> s8 [115, 115] { R18687 += 1, R18641 += 1, R18609 += 1, R18591 += 1 };
  s8 -> s9 [116, 116] { R18687 += 1, R18641 += 1, R18609 += 1, R18591 += 1 };
  s9 -> s9 [0, 65535] { R18687 += 1, R18641 += 1, R18609 += 1 };
  s9 -> s10 [0, 65535] { R18687 += 1 };
  s9 -> s11 [0, 65535] { R18687 += 1, R18641 += 1 };
  s9 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R18687 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s10 [0, 65535] { R18687 += 1 };
  s11 -> s11 [0, 65535] { R18687 += 1, R18641 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s9, s10, s11, s12;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R18688 += 1, R18689 += 1 };
  s0 -> s1 [0, 65535] { R18689 += 1, R18643 += 1, R18610 += 1, R18611 += 1 };
  s0 -> s2 [0, 65535] { R18689 += 1, R18642 += 1, R18643 += 1 };
  s0 -> s3 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1, R18595 += 1, R17934 += 1 };
  s0 -> s4 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1, R18594 += 1, R18595 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18689 += 1, R18643 += 1, R18610 += 1, R18611 += 1 };
  s1 -> s6 [0, 65535] { R18689 += 1 };
  s1 -> s3 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1, R18595 += 1, R17934 += 1 };
  s1 -> s4 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1, R18594 += 1, R18595 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18689 += 1, R18643 += 1, R18610 += 1, R18611 += 1 };
  s2 -> s2 [0, 65535] { R18689 += 1, R18642 += 1, R18643 += 1 };
  s2 -> s3 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1, R18595 += 1, R17934 += 1 };
  s2 -> s4 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1, R18594 += 1, R18595 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18689 += 1 };
  s3 -> s3 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1, R18595 += 1, R17934 += 1 };
  s3 -> s7 [0, 65535] { R18689 += 1, R18643 += 1 };
  s3 -> s8 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18689 += 1 };
  s4 -> s3 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1, R18595 += 1, R17934 += 1 };
  s4 -> s7 [0, 65535] { R18689 += 1, R18643 += 1 };
  s4 -> s4 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1, R18594 += 1, R18595 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18689 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18689 += 1 };
  s7 -> s7 [0, 65535] { R18689 += 1, R18643 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R18689 += 1 };
  s8 -> s7 [0, 65535] { R18689 += 1, R18643 += 1 };
  s8 -> s8 [0, 65535] { R18689 += 1, R18643 += 1, R18611 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R18691 += 1, R18645 += 1, R18612 += 1, R18613 += 1 };
  s0 -> s2 [0, 65535] { R18691 += 1, R18644 += 1, R18645 += 1 };
  s0 -> s3 [0, 65535] { R18691 += 1, R18645 += 1, R18613 += 1, R18596 += 1, R18597 += 1 };
  s0 -> s0 [0, 65535] { R18690 += 1, R18691 += 1 };
  s0 -> s4 [108, 108] { R18691 += 1, R18645 += 1, R18613 += 1, R18597 += 1 };
  s1 -> s1 [0, 65535] { R18691 += 1, R18645 += 1, R18612 += 1, R18613 += 1 };
  s1 -> s3 [0, 65535] { R18691 += 1, R18645 += 1, R18613 += 1, R18596 += 1, R18597 += 1 };
  s1 -> s4 [108, 108] { R18691 += 1, R18645 += 1, R18613 += 1, R18597 += 1 };
  s2 -> s1 [0, 65535] { R18691 += 1, R18645 += 1, R18612 += 1, R18613 += 1 };
  s2 -> s2 [0, 65535] { R18691 += 1, R18644 += 1, R18645 += 1 };
  s2 -> s3 [0, 65535] { R18691 += 1, R18645 += 1, R18613 += 1, R18596 += 1, R18597 += 1 };
  s2 -> s4 [108, 108] { R18691 += 1, R18645 += 1, R18613 += 1, R18597 += 1 };
  s3 -> s3 [0, 65535] { R18691 += 1, R18645 += 1, R18613 += 1, R18596 += 1, R18597 += 1 };
  s3 -> s4 [108, 108] { R18691 += 1, R18645 += 1, R18613 += 1, R18597 += 1 };
  s4 -> s5 [111, 111] { R18691 += 1, R18645 += 1, R18613 += 1, R18597 += 1 };
  s5 -> s6 [99, 99] { R18691 += 1, R18645 += 1, R18613 += 1, R18597 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R18691 += 1, R18645 += 1, R18613 += 1 };
  s6 -> s8 [0, 65535] { R18691 += 1, R18645 += 1 };
  s6 -> s9 [0, 65535] { R18691 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R18691 += 1, R18645 += 1 };
  s8 -> s9 [0, 65535] { R18691 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R18691 += 1 };
  accepting s6, s7, s8, s9;
};
};
constraint R1 = R18591 && R2 = R18613 && R3 = R17951 && R4 = R18691 && R12 = 0 && R13 = -1 && R11960 = 0 && R11961 = R18645 && R17940 = 0 && R17941 = 1 && R17942 = 0 && R17943 = 1 && R17944 - R18645 = 1 && R17945 = R17951 && R17946 - R18645 = 1 && R17947 = R17951 && R17948 - R18645 = 1 && R17949 = R17951 && R17950 - R18645 = 1 && R18590 = 0 && R18596 = 0 && R18597 = 0 && R18598 = 0 && R18599 = R18613 && R18600 = 0 && R18601 = R18613 && R18602 = 0 && R18603 = R18613 && R18604 = 0 && R18605 = R18613 && R18606 = 0 && R18607 = R18613 && R18608 = 0 && R18609 = R18613 && R18610 = 0 && R18611 = R18613 && R18612 = 0 && R18614 = 0 && R18615 = R18645 && R18616 = 0 && R18617 = R18645 && R18618 = 0 && R18619 = R18645 && R18620 = 0 && R18621 = R18645 && R18622 = 0 && R18623 = R18645 && R18624 = 0 && R18625 = R18645 && R18626 = 0 && R18627 = R18645 && R18628 = 0 && R18629 = R18645 && R18630 = 0 && R18631 = R18645 && R18632 = 0 && R18633 = R18645 && R18634 = 0 && R18635 = R18645 && R18636 = 0 && R18637 = R18645 && R18638 = 0 && R18639 = R18645 && R18640 = 0 && R18641 = R18645 && R18642 = 0 && R18643 = R18645 && R18644 = 0 && R18646 = 10 && R18647 = R18691 && R18648 = 10 && R18649 = R18691 && R18650 = 10 && R18651 = R18691 && R18652 = 10 && R18653 = R18691 && R18654 = 10 && R18655 = R18691 && R18656 = 10 && R18657 = R18691 && R18658 = 10 && R18659 = R18691 && R18660 = 10 && R18661 = R18691 && R18662 = 10 && R18663 = R18691 && R18664 = 10 && R18665 = R18691 && R18666 = 10 && R18667 = R18691 && R18668 = 10 && R18669 = R18691 && R18670 = 10 && R18671 = R18691 && R18672 = 10 && R18673 = R18691 && R18674 = 10 && R18675 = R18691 && R18676 = 10 && R18677 = R18691 && R18678 = 10 && R18679 = R18691 && R18680 = 10 && R18681 = R18691 && R18682 = 10 && R18683 = R18691 && R18684 = 10 && R18685 = R18691 && R18686 = 10 && R18687 = R18691 && R18688 = 10 && R18689 = R18691 && R18690 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R18645 < R17951 && -1 < R18591 && 0 < R18613 && -1 < R18645 && 9 < R18691 && (R17936 != 0 || ((R5 != 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R0 = R17937 || R17937 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R17937 != 1 || -1 < R0) && (R0 = R17937 || R17937 = 1))))) && (R17938 != 0 || ((R5 != 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R0 = R17939 || R17939 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R17939 != 1 || -1 < R0) && (R0 = R17939 || R17939 = 1))))) && (R18586 != 0 || R18587 = R18591 || (R17933 = 0 && R18591 = 0)) && (R18588 != 0 || R18589 = R18591 || (R17933 = 0 && R18591 = 0)) && (R17934 = 0 || (R18594 = 0 && R18595 = 0)) && (R17935 = 0 || (R18592 = 0 && R18593 = 0)) && (R17936 = 0 || (R5 = 0 && R0 < 0)) && (R17938 = 0 || (R5 = 0 && R0 < 0)) && (R18586 = 0 || (R17933 = 0 && R18591 = 0)) && (R18588 = 0 || (R17933 = 0 && R18591 = 0));
// End of Parikh automata intersection problem
