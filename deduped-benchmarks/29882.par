// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11960, R11961, R12, R13, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R17952, R17953, R17954, R17955, R17956, R17957, R17958, R17959, R17960, R17961, R17962, R17963, R17964, R17965, R17966, R17967, R17968, R17969, R17970, R17971, R17972, R17973, R17974, R17975, R17976, R17977, R17978, R17979, R17980, R17981, R17982, R17983, R17984, R17985, R17986, R17987, R17988, R17989, R17990, R17991, R17992, R17993, R17994, R17995, R17996, R17997, R17998, R17999, R18000, R18001, R18002, R18003, R18004, R18005, R18006, R18007, R18008, R18009, R18010, R18011, R18012, R18013, R18014, R18015, R18016, R18017, R18018, R18019, R18020, R18021, R18022, R18023, R18024, R18025, R18026, R18027, R18028, R18029, R18030, R18031, R18032, R18033, R18034, R18035, R18036, R18037, R18038, R18039, R18040, R18041, R18042, R18043, R18044, R18045, R18046, R18047, R18048, R18049, R18050, R18051, R18052, R18053, R18054, R18055, R2, R3, R4, R5, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18011 += 1 };
  s0 -> s0 [0, 65535] { R18010 += 1, R18011 += 1 };
  s0 -> s2 [46, 46] { R18011 += 1 };
  s0 -> s3 [47, 47] { R18011 += 1 };
  s0 -> s1 [48, 65535] { R18011 += 1 };
  s1 -> s1 [0, 45] { R18011 += 1 };
  s1 -> s2 [46, 46] { R18011 += 1 };
  s1 -> s3 [47, 47] { R18011 += 1 };
  s1 -> s1 [48, 65535] { R18011 += 1 };
  s2 -> s1 [0, 45] { R18011 += 1 };
  s2 -> s2 [46, 46] { R18011 += 1 };
  s2 -> s3 [47, 47] { R18011 += 1 };
  s2 -> s1 [48, 114] { R18011 += 1 };
  s2 -> s8 [115, 115] { R18011 += 1 };
  s2 -> s1 [116, 65535] { R18011 += 1 };
  s3 -> s3 [0, 45] { R18011 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18011 += 1 };
  s3 -> s3 [47, 65535] { R18011 += 1 };
  s4 -> s3 [0, 45] { R18011 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18011 += 1 };
  s4 -> s3 [47, 114] { R18011 += 1 };
  s4 -> s5 [115, 115] { R18011 += 1 };
  s4 -> s3 [116, 65535] { R18011 += 1 };
  s5 -> s3 [0, 45] { R18011 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18011 += 1 };
  s5 -> s3 [47, 110] { R18011 += 1 };
  s5 -> s6 [111, 111] { R18011 += 1 };
  s5 -> s3 [112, 65535] { R18011 += 1 };
  s6 -> s3 [0, 45] { R18011 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18011 += 1 };
  s6 -> s3 [47, 98] { R18011 += 1 };
  s6 -> s7 [99, 99] { R18011 += 1 };
  s6 -> s3 [100, 65535] { R18011 += 1 };
  s7 -> s3 [0, 45] { R18011 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18011 += 1 };
  s7 -> s3 [47, 106] { R18011 += 1 };
  s7 -> s3 [108, 65535] { R18011 += 1 };
  s8 -> s1 [0, 45] { R18011 += 1 };
  s8 -> s2 [46, 46] { R18011 += 1 };
  s8 -> s3 [47, 47] { R18011 += 1 };
  s8 -> s1 [48, 110] { R18011 += 1 };
  s8 -> s9 [111, 111] { R18011 += 1 };
  s8 -> s1 [112, 65535] { R18011 += 1 };
  s9 -> s1 [0, 45] { R18011 += 1 };
  s9 -> s2 [46, 46] { R18011 += 1 };
  s9 -> s3 [47, 47] { R18011 += 1 };
  s9 -> s1 [48, 98] { R18011 += 1 };
  s9 -> s10 [99, 99] { R18011 += 1 };
  s9 -> s1 [100, 65535] { R18011 += 1 };
  s10 -> s1 [0, 45] { R18011 += 1 };
  s10 -> s2 [46, 46] { R18011 += 1 };
  s10 -> s3 [47, 47] { R18011 += 1 };
  s10 -> s1 [48, 106] { R18011 += 1 };
  s10 -> s1 [108, 65535] { R18011 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R18013 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R18012 += 1, R18013 += 1 };
  s1 -> s1 [0, 65535] { R18013 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18015 += 1, R11961 += 1 };
  s0 -> s2 [0, 65535] { R18015 += 1, R11960 += 1, R11961 += 1 };
  s0 -> s0 [0, 65535] { R18014 += 1, R18015 += 1 };
  s0 -> s3 [47, 47] { R18015 += 1 };
  s0 -> s1 [48, 65535] { R18015 += 1, R11961 += 1 };
  s1 -> s1 [0, 46] { R18015 += 1, R11961 += 1 };
  s1 -> s3 [47, 47] { R18015 += 1 };
  s1 -> s1 [48, 65535] { R18015 += 1, R11961 += 1 };
  s2 -> s1 [0, 46] { R18015 += 1, R11961 += 1 };
  s2 -> s2 [0, 65535] { R18015 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [47, 47] { R18015 += 1 };
  s2 -> s1 [48, 65535] { R18015 += 1, R11961 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18015 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18017 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R18016 += 1, R18017 += 1 };
  s0 -> s2 [0, 65535] { R18017 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s1 [38, 42] { R18017 += 1, R17945 += 1 };
  s0 -> s1 [44, 45] { R18017 += 1, R17945 += 1 };
  s0 -> s1 [47, 62] { R18017 += 1, R17945 += 1 };
  s0 -> s1 [64, 65535] { R18017 += 1, R17945 += 1 };
  s1 -> s1 [0, 36] { R18017 += 1, R17945 += 1 };
  s1 -> s1 [0, 65535] { R18017 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R18017 += 1, R17945 += 1 };
  s1 -> s1 [44, 45] { R18017 += 1, R17945 += 1 };
  s1 -> s1 [47, 62] { R18017 += 1, R17945 += 1 };
  s1 -> s1 [64, 65535] { R18017 += 1, R17945 += 1 };
  s2 -> s1 [0, 36] { R18017 += 1, R17945 += 1 };
  s2 -> s2 [0, 65535] { R18017 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R18017 += 1, R17945 += 1 };
  s2 -> s1 [44, 45] { R18017 += 1, R17945 += 1 };
  s2 -> s1 [47, 62] { R18017 += 1, R17945 += 1 };
  s2 -> s1 [64, 65535] { R18017 += 1, R17945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R18019 += 1, R17946 += 1, R17947 += 1 };
  s0 -> s0 [0, 65535] { R18018 += 1, R18019 += 1 };
  s0 -> s2 [0, 65535] { R18019 += 1, R17947 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R18019 += 1, R17946 += 1, R17947 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R18019 += 1, R17947 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R18019 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18019 += 1, R17947 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R18019 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s2 [0, 65535] { R18021 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s3 [0, 65535] { R18021 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s0 [0, 65535] { R18020 += 1, R18021 += 1 };
  s0 -> s4 [63, 63] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s1 [64, 65535] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s1 [0, 65535] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s6 [0, 65535] { R18021 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R18021 += 1, R17949 += 1 };
  s2 -> s1 [0, 62] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s2 [0, 65535] { R18021 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s6 [0, 65535] { R18021 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [64, 65535] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [0, 62] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s2 [0, 65535] { R18021 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18021 += 1, R17948 += 1, R17949 += 1 };
  s3 -> s4 [63, 63] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [64, 65535] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s4 -> s1 [0, 65535] { R18021 += 1, R17949 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18021 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18021 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18021 += 1, R17949 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18023 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R18023 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s0 -> s0 [0, 65535] { R18022 += 1, R18023 += 1 };
  s0 -> s3 [0, 65535] { R18023 += 1, R17950 += 1, R17951 += 1 };
  s1 -> s1 [0, 65535] { R18023 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R18023 += 1 };
  s1 -> s6 [0, 65535] { R18023 += 1, R17951 += 1 };
  s2 -> s1 [0, 65535] { R18023 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R18023 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18023 += 1 };
  s3 -> s1 [0, 65535] { R18023 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R18023 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18023 += 1, R17950 += 1, R17951 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18023 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18023 += 1 };
  s6 -> s6 [0, 65535] { R18023 += 1, R17951 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R18025 += 1, R17979 += 1 };
  s0 -> s2 [0, 65535] { R18025 += 1, R17978 += 1, R17979 += 1 };
  s0 -> s0 [0, 65535] { R18024 += 1, R18025 += 1 };
  s0 -> s1 [45, 63] { R18025 += 1, R17979 += 1 };
  s0 -> s3 [87, 87] { R18025 += 1, R17979 += 1 };
  s0 -> s1 [88, 65535] { R18025 += 1, R17979 += 1 };
  s1 -> s1 [0, 43] { R18025 += 1, R17979 += 1 };
  s1 -> s1 [45, 63] { R18025 += 1, R17979 += 1 };
  s1 -> s3 [87, 87] { R18025 += 1, R17979 += 1 };
  s1 -> s1 [88, 65535] { R18025 += 1, R17979 += 1 };
  s2 -> s1 [0, 43] { R18025 += 1, R17979 += 1 };
  s2 -> s2 [0, 65535] { R18025 += 1, R17978 += 1, R17979 += 1 };
  s2 -> s1 [45, 63] { R18025 += 1, R17979 += 1 };
  s2 -> s3 [87, 87] { R18025 += 1, R17979 += 1 };
  s2 -> s1 [88, 65535] { R18025 += 1, R17979 += 1 };
  s3 -> s3 [0, 43] { R18025 += 1, R17979 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18025 += 1 };
  s3 -> s3 [45, 63] { R18025 += 1, R17979 += 1 };
  s3 -> s3 [87, 65535] { R18025 += 1, R17979 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R18026 += 1, R18027 += 1 };
  s0 -> s1 [0, 65535] { R18027 += 1, R17980 += 1, R17981 += 1 };
  s0 -> s2 [0, 65535] { R18027 += 1, R17981 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R18027 += 1, R17980 += 1, R17981 += 1 };
  s1 -> s2 [0, 65535] { R18027 += 1, R17981 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R18027 += 1 };
  s2 -> s2 [0, 65535] { R18027 += 1, R17981 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18027 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R18029 += 1, R17983 += 1 };
  s0 -> s0 [0, 65535] { R18028 += 1, R18029 += 1 };
  s0 -> s2 [0, 65535] { R18029 += 1, R17983 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R18029 += 1, R17982 += 1, R17983 += 1 };
  s0 -> s4 [58, 58] { R18029 += 1, R17983 += 1 };
  s0 -> s1 [59, 65535] { R18029 += 1, R17983 += 1 };
  s1 -> s1 [0, 57] { R18029 += 1, R17983 += 1 };
  s1 -> s1 [0, 65535] { R18029 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R18029 += 1, R17983 += 1 };
  s1 -> s1 [59, 65535] { R18029 += 1, R17983 += 1 };
  s2 -> s1 [0, 57] { R18029 += 1, R17983 += 1 };
  s2 -> s6 [0, 65535] { R18029 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18029 += 1, R17983 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R18029 += 1, R17983 += 1 };
  s2 -> s1 [59, 65535] { R18029 += 1, R17983 += 1 };
  s3 -> s1 [0, 57] { R18029 += 1, R17983 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R18029 += 1, R17983 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R18029 += 1, R17982 += 1, R17983 += 1 };
  s3 -> s4 [58, 58] { R18029 += 1, R17983 += 1 };
  s3 -> s1 [59, 65535] { R18029 += 1, R17983 += 1 };
  s4 -> s4 [0, 65535] { R18029 += 1, R17983 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18029 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R18031 += 1, R17985 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R18030 += 1, R18031 += 1 };
  s0 -> s2 [0, 65535] { R18031 += 1, R17984 += 1, R17985 += 1 };
  s0 -> s3 [0, 65535] { R18031 += 1, R17985 += 1, R12 += 1, R13 += 1 };
  s0 -> s4 [87, 87] { R18031 += 1, R17985 += 1 };
  s0 -> s1 [88, 65535] { R18031 += 1, R17985 += 1, R13 += 1 };
  s1 -> s1 [0, 86] { R18031 += 1, R17985 += 1, R13 += 1 };
  s1 -> s4 [87, 87] { R18031 += 1, R17985 += 1 };
  s1 -> s1 [88, 65535] { R18031 += 1, R17985 += 1, R13 += 1 };
  s2 -> s1 [0, 86] { R18031 += 1, R17985 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R18031 += 1, R17984 += 1, R17985 += 1 };
  s2 -> s3 [0, 65535] { R18031 += 1, R17985 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [87, 87] { R18031 += 1, R17985 += 1 };
  s2 -> s1 [88, 65535] { R18031 += 1, R17985 += 1, R13 += 1 };
  s3 -> s1 [0, 86] { R18031 += 1, R17985 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R18031 += 1, R17985 += 1, R12 += 1, R13 += 1 };
  s3 -> s4 [87, 87] { R18031 += 1, R17985 += 1 };
  s3 -> s1 [88, 65535] { R18031 += 1, R17985 += 1, R13 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18031 += 1 };
  s4 -> s4 [0, 65535] { R18031 += 1, R17985 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18031 += 1 };
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s0 -> s0 [0, 65535] { R18032 += 1, R18033 += 1 };
  s0 -> s2 [0, 65535] { R18033 += 1, R17986 += 1, R17987 += 1 };
  s0 -> s3 [0, 65535] { R18033 += 1, R17987 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s4 [91, 91] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s0 -> s1 [92, 65535] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s1 -> s7 [0, 65535] { R18033 += 1, R17987 += 1 };
  s1 -> s1 [0, 65535] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s1 -> s5 [0, 65535] { R18033 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s2 -> s2 [0, 65535] { R18033 += 1, R17986 += 1, R17987 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R18033 += 1, R17987 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s4 [91, 91] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s2 -> s1 [92, 65535] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s3 -> s1 [0, 90] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s3 -> s5 [0, 65535] { R18033 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18033 += 1, R17987 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s4 [91, 91] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s3 -> s1 [92, 65535] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s4 -> s1 [0, 65535] { R18033 += 1, R17987 += 1, R17941 += 1 };
  s5 -> s5 [0, 65535] { R18033 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18033 += 1, R17987 += 1 };
  s7 -> s5 [0, 65535] { R18033 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R18035 += 1, R17989 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s2 [0, 65535] { R18035 += 1, R17988 += 1, R17989 += 1 };
  s0 -> s3 [0, 65535] { R18035 += 1, R17989 += 1, R17943 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R18034 += 1, R18035 += 1 };
  s1 -> s4 [0, 65535] { R18035 += 1 };
  s1 -> s1 [0, 65535] { R18035 += 1, R17989 += 1, R17942 += 1, R17943 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R18035 += 1, R17989 += 1, R17943 += 1, R6 += 1 };
  s2 -> s1 [0, 65535] { R18035 += 1, R17989 += 1, R17942 += 1, R17943 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R18035 += 1, R17988 += 1, R17989 += 1 };
  s2 -> s3 [0, 65535] { R18035 += 1, R17989 += 1, R17943 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R18035 += 1 };
  s3 -> s5 [0, 65535] { R18035 += 1, R17989 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18035 += 1, R17989 += 1, R17943 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R18035 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R18035 += 1 };
  s5 -> s5 [0, 65535] { R18035 += 1, R17989 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R18037 += 1, R17991 += 1, R17957 += 1, R17935 += 1 };
  s0 -> s2 [0, 65535] { R18037 += 1, R17991 += 1, R17956 += 1, R17957 += 1 };
  s0 -> s0 [0, 65535] { R18036 += 1, R18037 += 1 };
  s0 -> s3 [0, 65535] { R18037 += 1, R17990 += 1, R17991 += 1 };
  s1 -> s1 [0, 65535] { R18037 += 1, R17991 += 1, R17957 += 1, R17935 += 1 };
  s1 -> s5 [0, 65535] { R18037 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R18037 += 1, R17991 += 1 };
  s2 -> s1 [0, 65535] { R18037 += 1, R17991 += 1, R17957 += 1, R17935 += 1 };
  s2 -> s5 [0, 65535] { R18037 += 1 };
  s2 -> s2 [0, 65535] { R18037 += 1, R17991 += 1, R17956 += 1, R17957 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18037 += 1, R17991 += 1, R17957 += 1, R17935 += 1 };
  s3 -> s2 [0, 65535] { R18037 += 1, R17991 += 1, R17956 += 1, R17957 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18037 += 1, R17990 += 1, R17991 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18037 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18037 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18037 += 1, R17991 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R18039 += 1, R17993 += 1 };
  s0 -> s2 [0, 65535] { R18039 += 1, R17992 += 1, R17993 += 1 };
  s0 -> s0 [0, 65535] { R18038 += 1, R18039 += 1 };
  s1 -> s1 [0, 65535] { R18039 += 1, R17993 += 1 };
  s1 -> s4 [0, 65535] { R18039 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18039 += 1, R17993 += 1 };
  s2 -> s2 [0, 65535] { R18039 += 1, R17992 += 1, R17993 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18039 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s0 -> s0 [0, 65535] { R18040 += 1, R18041 += 1 };
  s0 -> s2 [0, 65535] { R18041 += 1, R17995 += 1, R17962 += 1, R17963 += 1 };
  s0 -> s3 [0, 65535] { R18041 += 1, R17994 += 1, R17995 += 1 };
  s0 -> s4 [87, 87] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s0 -> s1 [88, 65535] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s1 -> s1 [0, 86] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s1 -> s4 [87, 87] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s1 -> s1 [88, 65535] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s2 -> s1 [0, 86] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s2 -> s2 [0, 65535] { R18041 += 1, R17995 += 1, R17962 += 1, R17963 += 1 };
  s2 -> s4 [87, 87] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s2 -> s1 [88, 65535] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s3 -> s1 [0, 86] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s3 -> s2 [0, 65535] { R18041 += 1, R17995 += 1, R17962 += 1, R17963 += 1 };
  s3 -> s3 [0, 65535] { R18041 += 1, R17994 += 1, R17995 += 1 };
  s3 -> s4 [87, 87] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s3 -> s1 [88, 65535] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s4 -> s5 [0, 65535] { R18041 += 1 };
  s4 -> s6 [0, 65535] { R18041 += 1, R17995 += 1 };
  s4 -> s4 [0, 65535] { R18041 += 1, R17995 += 1, R17963 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R18041 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R18041 += 1 };
  s6 -> s6 [0, 65535] { R18041 += 1, R17995 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18043 += 1, R17996 += 1, R17997 += 1 };
  s0 -> s0 [0, 65535] { R18042 += 1, R18043 += 1 };
  s0 -> s2 [0, 65535] { R18043 += 1, R17997 += 1, R17965 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R18043 += 1, R17997 += 1, R17964 += 1, R17965 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18043 += 1, R17996 += 1, R17997 += 1 };
  s1 -> s2 [0, 65535] { R18043 += 1, R17997 += 1, R17965 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R18043 += 1, R17997 += 1, R17964 += 1, R17965 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18043 += 1 };
  s2 -> s6 [0, 65535] { R18043 += 1, R17997 += 1 };
  s2 -> s2 [0, 65535] { R18043 += 1, R17997 += 1, R17965 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18043 += 1 };
  s3 -> s2 [0, 65535] { R18043 += 1, R17997 += 1, R17965 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R18043 += 1, R17997 += 1, R17964 += 1, R17965 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18043 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18043 += 1 };
  s6 -> s6 [0, 65535] { R18043 += 1, R17997 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s0 -> s2 [0, 65535] { R18045 += 1, R17998 += 1, R17999 += 1 };
  s0 -> s3 [0, 65535] { R18045 += 1, R17999 += 1, R17966 += 1, R17967 += 1 };
  s0 -> s0 [0, 65535] { R18044 += 1, R18045 += 1 };
  s0 -> s4 [0, 65535] { R18045 += 1, R17999 += 1, R17967 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s0 -> s1 [88, 65535] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s1 -> s1 [0, 86] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18045 += 1, R17999 += 1 };
  s1 -> s8 [0, 65535] { R18045 += 1 };
  s1 -> s5 [87, 87] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s1 -> s1 [88, 65535] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s2 -> s1 [0, 86] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s2 -> s2 [0, 65535] { R18045 += 1, R17998 += 1, R17999 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R18045 += 1, R17999 += 1, R17966 += 1, R17967 += 1 };
  s2 -> s4 [0, 65535] { R18045 += 1, R17999 += 1, R17967 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s2 -> s1 [88, 65535] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s3 -> s1 [0, 86] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R18045 += 1, R17999 += 1, R17966 += 1, R17967 += 1 };
  s3 -> s8 [0, 65535] { R18045 += 1 };
  s3 -> s4 [0, 65535] { R18045 += 1, R17999 += 1, R17967 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s3 -> s1 [88, 65535] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s4 -> s1 [0, 86] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R18045 += 1, R17999 += 1 };
  s4 -> s8 [0, 65535] { R18045 += 1 };
  s4 -> s4 [0, 65535] { R18045 += 1, R17999 += 1, R17967 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s4 -> s1 [88, 65535] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s5 -> s5 [0, 65535] { R18045 += 1, R17999 += 1, R17967 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18045 += 1, R17999 += 1 };
  s7 -> s8 [0, 65535] { R18045 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18045 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s0 -> s2 [0, 65535] { R18047 += 1, R18001 += 1, R17968 += 1, R17969 += 1 };
  s0 -> s0 [0, 65535] { R18046 += 1, R18047 += 1 };
  s0 -> s3 [0, 65535] { R18047 += 1, R18001 += 1, R17969 += 1, R17952 += 1, R17953 += 1 };
  s0 -> s4 [0, 65535] { R18047 += 1, R18000 += 1, R18001 += 1 };
  s0 -> s1 [88, 65535] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s1 -> s1 [0, 86] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s1 -> s1 [0, 65535] { R18047 += 1, R18001 += 1, R17969 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18047 += 1 };
  s1 -> s7 [0, 65535] { R18047 += 1, R18001 += 1 };
  s1 -> s1 [88, 65535] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s2 -> s1 [0, 86] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s2 -> s2 [0, 65535] { R18047 += 1, R18001 += 1, R17968 += 1, R17969 += 1 };
  s2 -> s3 [0, 65535] { R18047 += 1, R18001 += 1, R17969 += 1, R17952 += 1, R17953 += 1 };
  s2 -> s6 [0, 65535] { R18047 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s3 -> s1 [0, 86] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s3 -> s3 [0, 65535] { R18047 += 1, R18001 += 1, R17969 += 1, R17952 += 1, R17953 += 1 };
  s3 -> s6 [0, 65535] { R18047 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R18047 += 1, R18001 += 1 };
  s3 -> s1 [88, 65535] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s4 -> s1 [0, 86] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s4 -> s2 [0, 65535] { R18047 += 1, R18001 += 1, R17968 += 1, R17969 += 1 };
  s4 -> s3 [0, 65535] { R18047 += 1, R18001 += 1, R17969 += 1, R17952 += 1, R17953 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18047 += 1, R18000 += 1, R18001 += 1 };
  s4 -> s1 [88, 65535] { R18047 += 1, R18001 += 1, R17969 += 1, R17953 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18047 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18047 += 1 };
  s7 -> s7 [0, 65535] { R18047 += 1, R18001 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1, R17955 += 1, R17933 += 1 };
  s0 -> s2 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1, R17954 += 1, R17955 += 1 };
  s0 -> s3 [0, 65535] { R18049 += 1, R18002 += 1, R18003 += 1 };
  s0 -> s0 [0, 65535] { R18048 += 1, R18049 += 1 };
  s0 -> s4 [0, 65535] { R18049 += 1, R18003 += 1, R17970 += 1, R17971 += 1 };
  s1 -> s1 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1, R17955 += 1, R17933 += 1 };
  s1 -> s7 [0, 65535] { R18049 += 1, R18003 += 1 };
  s1 -> s5 [0, 65535] { R18049 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1 };
  s2 -> s1 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1, R17955 += 1, R17933 += 1 };
  s2 -> s2 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1, R17954 += 1, R17955 += 1 };
  s2 -> s7 [0, 65535] { R18049 += 1, R18003 += 1 };
  s2 -> s5 [0, 65535] { R18049 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1, R17955 += 1, R17933 += 1 };
  s3 -> s2 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1, R17954 += 1, R17955 += 1 };
  s3 -> s3 [0, 65535] { R18049 += 1, R18002 += 1, R18003 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R18049 += 1, R18003 += 1, R17970 += 1, R17971 += 1 };
  s4 -> s1 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1, R17955 += 1, R17933 += 1 };
  s4 -> s2 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1, R17954 += 1, R17955 += 1 };
  s4 -> s5 [0, 65535] { R18049 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18049 += 1, R18003 += 1, R17970 += 1, R17971 += 1 };
  s5 -> s5 [0, 65535] { R18049 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18049 += 1, R18003 += 1 };
  s7 -> s5 [0, 65535] { R18049 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R18049 += 1, R18003 += 1 };
  s8 -> s5 [0, 65535] { R18049 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18049 += 1, R18003 += 1, R17971 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R18051 += 1, R18005 += 1, R17972 += 1, R17973 += 1 };
  s0 -> s2 [0, 65535] { R18051 += 1, R18005 += 1, R17973 += 1 };
  s0 -> s3 [0, 65535] { R18051 += 1, R18004 += 1, R18005 += 1 };
  s0 -> s0 [0, 65535] { R18050 += 1, R18051 += 1 };
  s1 -> s1 [0, 65535] { R18051 += 1, R18005 += 1, R17972 += 1, R17973 += 1 };
  s1 -> s2 [0, 65535] { R18051 += 1, R18005 += 1, R17973 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R18051 += 1 };
  s2 -> s2 [0, 65535] { R18051 += 1, R18005 += 1, R17973 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18051 += 1, R18005 += 1 };
  s2 -> s6 [0, 65535] { R18051 += 1 };
  s3 -> s1 [0, 65535] { R18051 += 1, R18005 += 1, R17972 += 1, R17973 += 1 };
  s3 -> s2 [0, 65535] { R18051 += 1, R18005 += 1, R17973 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18051 += 1, R18004 += 1, R18005 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18051 += 1, R18005 += 1 };
  s5 -> s6 [0, 65535] { R18051 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18051 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1, R17959 += 1, R17934 += 1 };
  s0 -> s2 [0, 65535] { R18053 += 1, R18006 += 1, R18007 += 1 };
  s0 -> s0 [0, 65535] { R18052 += 1, R18053 += 1 };
  s0 -> s3 [0, 65535] { R18053 += 1, R18007 += 1, R17974 += 1, R17975 += 1 };
  s0 -> s4 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1, R17958 += 1, R17959 += 1 };
  s1 -> s1 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1, R17959 += 1, R17934 += 1 };
  s1 -> s8 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18053 += 1 };
  s1 -> s7 [0, 65535] { R18053 += 1, R18007 += 1 };
  s2 -> s1 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1, R17959 += 1, R17934 += 1 };
  s2 -> s2 [0, 65535] { R18053 += 1, R18006 += 1, R18007 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18053 += 1, R18007 += 1, R17974 += 1, R17975 += 1 };
  s2 -> s4 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1, R17958 += 1, R17959 += 1 };
  s3 -> s1 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1, R17959 += 1, R17934 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18053 += 1, R18007 += 1, R17974 += 1, R17975 += 1 };
  s3 -> s4 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1, R17958 += 1, R17959 += 1 };
  s3 -> s6 [0, 65535] { R18053 += 1 };
  s4 -> s1 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1, R17959 += 1, R17934 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1, R17958 += 1, R17959 += 1 };
  s4 -> s6 [0, 65535] { R18053 += 1 };
  s4 -> s7 [0, 65535] { R18053 += 1, R18007 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18053 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18053 += 1 };
  s7 -> s7 [0, 65535] { R18053 += 1, R18007 += 1 };
  s8 -> s8 [0, 65535] { R18053 += 1, R18007 += 1, R17975 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R18053 += 1 };
  s8 -> s7 [0, 65535] { R18053 += 1, R18007 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R18055 += 1, R18009 += 1, R17977 += 1, R17960 += 1, R17961 += 1 };
  s0 -> s2 [0, 65535] { R18055 += 1, R18009 += 1, R17976 += 1, R17977 += 1 };
  s0 -> s0 [0, 65535] { R18054 += 1, R18055 += 1 };
  s0 -> s3 [0, 65535] { R18055 += 1, R18008 += 1, R18009 += 1 };
  s0 -> s4 [108, 108] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s1 -> s1 [0, 65535] { R18055 += 1, R18009 += 1, R17977 += 1, R17960 += 1, R17961 += 1 };
  s1 -> s4 [108, 108] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s2 -> s1 [0, 65535] { R18055 += 1, R18009 += 1, R17977 += 1, R17960 += 1, R17961 += 1 };
  s2 -> s2 [0, 65535] { R18055 += 1, R18009 += 1, R17976 += 1, R17977 += 1 };
  s2 -> s4 [108, 108] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s3 -> s1 [0, 65535] { R18055 += 1, R18009 += 1, R17977 += 1, R17960 += 1, R17961 += 1 };
  s3 -> s2 [0, 65535] { R18055 += 1, R18009 += 1, R17976 += 1, R17977 += 1 };
  s3 -> s3 [0, 65535] { R18055 += 1, R18008 += 1, R18009 += 1 };
  s3 -> s4 [108, 108] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s4 -> s5 [111, 111] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s5 -> s6 [99, 99] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s6 -> s7 [97, 97] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s7 -> s8 [108, 108] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s8 -> s9 [104, 104] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s9 -> s10 [111, 111] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s10 -> s11 [115, 115] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s11 -> s12 [116, 116] { R18055 += 1, R18009 += 1, R17977 += 1, R17961 += 1 };
  s12 -> s13 [0, 65535] { R18055 += 1, R18009 += 1 };
  s12 -> s14 [0, 65535] { R18055 += 1 };
  s12 -> s12 [0, 65535] { R18055 += 1, R18009 += 1, R17977 += 1 };
  s12 -> s15 [0, 65535];
  s13 -> s13 [0, 65535] { R18055 += 1, R18009 += 1 };
  s13 -> s14 [0, 65535] { R18055 += 1 };
  s13 -> s15 [0, 65535];
  s14 -> s14 [0, 65535] { R18055 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s12, s13, s14, s15;
};
};
constraint R1 = 0 && R2 = R17977 && R3 = R17951 && R4 = R18055 && R12 = 0 && R13 = -1 && R11960 = 0 && R11961 = R18009 && R17940 = 0 && R17941 = 1 && R17942 = 0 && R17943 = 1 && R17944 - R18009 = 1 && R17945 = R17951 && R17946 - R18009 = 1 && R17947 = R17951 && R17948 - R18009 = 1 && R17949 = R17951 && R17950 - R18009 = 1 && R17960 = 0 && R17961 = 0 && R17962 = 0 && R17963 = R17977 && R17964 = 0 && R17965 = R17977 && R17966 = 0 && R17967 = R17977 && R17968 = 0 && R17969 = R17977 && R17970 = 0 && R17971 = R17977 && R17972 = 0 && R17973 = R17977 && R17974 = 0 && R17975 = R17977 && R17976 = 0 && R17978 = 0 && R17979 = R18009 && R17980 = 0 && R17981 = R18009 && R17982 = 0 && R17983 = R18009 && R17984 = 0 && R17985 = R18009 && R17986 = 0 && R17987 = R18009 && R17988 = 0 && R17989 = R18009 && R17990 = 0 && R17991 = R18009 && R17992 = 0 && R17993 = R18009 && R17994 = 0 && R17995 = R18009 && R17996 = 0 && R17997 = R18009 && R17998 = 0 && R17999 = R18009 && R18000 = 0 && R18001 = R18009 && R18002 = 0 && R18003 = R18009 && R18004 = 0 && R18005 = R18009 && R18006 = 0 && R18007 = R18009 && R18008 = 0 && R18010 = 10 && R18011 = R18055 && R18012 = 10 && R18013 = R18055 && R18014 = 10 && R18015 = R18055 && R18016 = 10 && R18017 = R18055 && R18018 = 10 && R18019 = R18055 && R18020 = 10 && R18021 = R18055 && R18022 = 10 && R18023 = R18055 && R18024 = 10 && R18025 = R18055 && R18026 = 10 && R18027 = R18055 && R18028 = 10 && R18029 = R18055 && R18030 = 10 && R18031 = R18055 && R18032 = 10 && R18033 = R18055 && R18034 = 10 && R18035 = R18055 && R18036 = 10 && R18037 = R18055 && R18038 = 10 && R18039 = R18055 && R18040 = 10 && R18041 = R18055 && R18042 = 10 && R18043 = R18055 && R18044 = 10 && R18045 = R18055 && R18046 = 10 && R18047 = R18055 && R18048 = 10 && R18049 = R18055 && R18050 = 10 && R18051 = R18055 && R18052 = 10 && R18053 = R18055 && R18054 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R18009 < R17951 && 0 < R17977 && -1 < R18009 && 9 < R18055 && (R17936 != 0 || ((R5 != 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R0 = R17937 || R17937 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R17937 != 1 || -1 < R0) && (R0 = R17937 || R17937 = 1))))) && (R17938 != 0 || ((R5 != 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R0 = R17939 || R17939 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R17939 != 1 || -1 < R0) && (R0 = R17939 || R17939 = 1))))) && (R17933 = 0 || (R17952 = 0 && R17953 = 0)) && (R17933 = 0 || (R17954 = 0 && R17955 = 0)) && (R17934 = 0 || (R17958 = 0 && R17959 = 0)) && (R17935 = 0 || (R17956 = 0 && R17957 = 0)) && (R17936 = 0 || (R5 = 0 && R0 < 0)) && (R17938 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
