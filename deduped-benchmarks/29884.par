// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6535, R6536, R6537, R6538, R6539, R6540, R6541, R6542, R6543, R6544, R6545, R6546, R6547, R6548, R6549, R6550, R6551, R6552, R6553, R6554, R6555, R6556, R6557, R6558, R6559, R6560, R6561, R6562, R6563, R6564, R6565, R6566, R6567, R6568, R6569, R6570, R6571, R6572, R6573, R6574, R6575, R6576, R6577, R6578, R6579, R6580, R6581, R6582, R6583, R6584, R6585, R6586, R6587, R6588, R6589, R6590, R6591, R6592, R6593, R6594, R6595, R6596, R6597, R6598, R6599, R6600, R6601, R6602, R6603, R6604, R6605, R6606, R6607, R6608, R6609, R6610, R6611, R6612, R6613, R6614, R6615, R6616, R6617, R6618, R6619, R6620, R6621, R6622, R6623, R6624, R6625, R6626, R6627, R6628, R6629, R6630, R6631, R6632, R6633, R6634, R6635, R6636, R6637, R6638, R6639, R6640, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R6596 += 1 };
  s0 -> s0 [0, 65535] { R6595 += 1, R6596 += 1 };
  s0 -> s2 [46, 46] { R6596 += 1 };
  s0 -> s3 [47, 47] { R6596 += 1 };
  s0 -> s1 [48, 65535] { R6596 += 1 };
  s1 -> s1 [0, 45] { R6596 += 1 };
  s1 -> s2 [46, 46] { R6596 += 1 };
  s1 -> s3 [47, 47] { R6596 += 1 };
  s1 -> s1 [48, 65535] { R6596 += 1 };
  s2 -> s1 [0, 45] { R6596 += 1 };
  s2 -> s2 [46, 46] { R6596 += 1 };
  s2 -> s3 [47, 47] { R6596 += 1 };
  s2 -> s1 [48, 114] { R6596 += 1 };
  s2 -> s8 [115, 115] { R6596 += 1 };
  s2 -> s1 [116, 65535] { R6596 += 1 };
  s3 -> s3 [0, 45] { R6596 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R6596 += 1 };
  s3 -> s3 [47, 65535] { R6596 += 1 };
  s4 -> s3 [0, 45] { R6596 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R6596 += 1 };
  s4 -> s3 [47, 114] { R6596 += 1 };
  s4 -> s5 [115, 115] { R6596 += 1 };
  s4 -> s3 [116, 65535] { R6596 += 1 };
  s5 -> s3 [0, 45] { R6596 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R6596 += 1 };
  s5 -> s3 [47, 110] { R6596 += 1 };
  s5 -> s6 [111, 111] { R6596 += 1 };
  s5 -> s3 [112, 65535] { R6596 += 1 };
  s6 -> s3 [0, 45] { R6596 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R6596 += 1 };
  s6 -> s3 [47, 98] { R6596 += 1 };
  s6 -> s7 [99, 99] { R6596 += 1 };
  s6 -> s3 [100, 65535] { R6596 += 1 };
  s7 -> s3 [0, 45] { R6596 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R6596 += 1 };
  s7 -> s3 [47, 106] { R6596 += 1 };
  s7 -> s3 [108, 65535] { R6596 += 1 };
  s8 -> s1 [0, 45] { R6596 += 1 };
  s8 -> s2 [46, 46] { R6596 += 1 };
  s8 -> s3 [47, 47] { R6596 += 1 };
  s8 -> s1 [48, 110] { R6596 += 1 };
  s8 -> s9 [111, 111] { R6596 += 1 };
  s8 -> s1 [112, 65535] { R6596 += 1 };
  s9 -> s1 [0, 45] { R6596 += 1 };
  s9 -> s2 [46, 46] { R6596 += 1 };
  s9 -> s3 [47, 47] { R6596 += 1 };
  s9 -> s1 [48, 98] { R6596 += 1 };
  s9 -> s10 [99, 99] { R6596 += 1 };
  s9 -> s1 [100, 65535] { R6596 += 1 };
  s10 -> s1 [0, 45] { R6596 += 1 };
  s10 -> s2 [46, 46] { R6596 += 1 };
  s10 -> s3 [47, 47] { R6596 += 1 };
  s10 -> s1 [48, 106] { R6596 += 1 };
  s10 -> s1 [108, 65535] { R6596 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R6597 += 1, R6598 += 1 };
  s0 -> s1 [0, 65535] { R6598 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6598 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R6600 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R6599 += 1, R6600 += 1 };
  s0 -> s2 [0, 65535] { R6600 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R6600 += 1 };
  s0 -> s1 [48, 65535] { R6600 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R6600 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R6600 += 1 };
  s1 -> s1 [48, 65535] { R6600 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R6600 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R6600 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R6600 += 1 };
  s2 -> s1 [48, 65535] { R6600 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R6600 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R6602 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R6601 += 1, R6602 += 1 };
  s0 -> s2 [0, 65535] { R6602 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s1 [38, 42] { R6602 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R6602 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R6602 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R6602 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R6602 += 1, R6000 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6602 += 1 };
  s1 -> s1 [38, 42] { R6602 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R6602 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R6602 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R6602 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R6602 += 1, R6000 += 1 };
  s2 -> s2 [0, 65535] { R6602 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R6602 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R6602 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R6602 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R6602 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R6604 += 1, R6001 += 1, R6002 += 1 };
  s0 -> s2 [0, 65535] { R6604 += 1, R6002 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R6603 += 1, R6604 += 1 };
  s1 -> s1 [0, 65535] { R6604 += 1, R6001 += 1, R6002 += 1 };
  s1 -> s2 [0, 65535] { R6604 += 1, R6002 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6604 += 1, R6002 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R6604 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6604 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R6605 += 1, R6606 += 1 };
  s0 -> s2 [0, 65535] { R6606 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R6606 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s4 [63, 63] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R6606 += 1, R6004 += 1 };
  s1 -> s6 [0, 65535] { R6606 += 1 };
  s1 -> s1 [0, 65535] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6606 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R6606 += 1 };
  s2 -> s4 [63, 63] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6606 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R6606 += 1, R6003 += 1, R6004 += 1 };
  s3 -> s4 [63, 63] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R6606 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6606 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6606 += 1, R6004 += 1 };
  s7 -> s6 [0, 65535] { R6606 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6607 += 1, R6608 += 1 };
  s0 -> s1 [0, 65535] { R6608 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R6608 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R6608 += 1, R6005 += 1, R6006 += 1 };
  s1 -> s1 [0, 65535] { R6608 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s6 [0, 65535] { R6608 += 1 };
  s1 -> s2 [0, 65535] { R6608 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6608 += 1, R6006 += 1 };
  s2 -> s6 [0, 65535] { R6608 += 1 };
  s2 -> s2 [0, 65535] { R6608 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6608 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6608 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R6608 += 1, R6005 += 1, R6006 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6608 += 1, R6006 += 1 };
  s5 -> s6 [0, 65535] { R6608 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6608 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R6610 += 1, R6564 += 1 };
  s0 -> s0 [0, 65535] { R6609 += 1, R6610 += 1 };
  s0 -> s2 [0, 65535] { R6610 += 1, R6563 += 1, R6564 += 1 };
  s0 -> s1 [45, 63] { R6610 += 1, R6564 += 1 };
  s0 -> s3 [87, 87] { R6610 += 1, R6564 += 1 };
  s0 -> s1 [88, 65535] { R6610 += 1, R6564 += 1 };
  s1 -> s1 [0, 43] { R6610 += 1, R6564 += 1 };
  s1 -> s1 [45, 63] { R6610 += 1, R6564 += 1 };
  s1 -> s3 [87, 87] { R6610 += 1, R6564 += 1 };
  s1 -> s1 [88, 65535] { R6610 += 1, R6564 += 1 };
  s2 -> s1 [0, 43] { R6610 += 1, R6564 += 1 };
  s2 -> s2 [0, 65535] { R6610 += 1, R6563 += 1, R6564 += 1 };
  s2 -> s1 [45, 63] { R6610 += 1, R6564 += 1 };
  s2 -> s3 [87, 87] { R6610 += 1, R6564 += 1 };
  s2 -> s1 [88, 65535] { R6610 += 1, R6564 += 1 };
  s3 -> s3 [0, 43] { R6610 += 1, R6564 += 1 };
  s3 -> s3 [0, 65535] { R6610 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R6610 += 1, R6564 += 1 };
  s3 -> s3 [87, 65535] { R6610 += 1, R6564 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R6612 += 1, R6565 += 1, R6566 += 1 };
  s0 -> s2 [0, 65535] { R6612 += 1, R6566 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R6611 += 1, R6612 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6612 += 1, R6565 += 1, R6566 += 1 };
  s1 -> s2 [0, 65535] { R6612 += 1, R6566 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6612 += 1 };
  s2 -> s2 [0, 65535] { R6612 += 1, R6566 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6612 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R6614 += 1, R6568 += 1 };
  s0 -> s2 [0, 65535] { R6614 += 1, R6567 += 1, R6568 += 1 };
  s0 -> s3 [0, 65535] { R6614 += 1, R6568 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R6613 += 1, R6614 += 1 };
  s0 -> s4 [58, 58] { R6614 += 1, R6568 += 1 };
  s0 -> s1 [59, 65535] { R6614 += 1, R6568 += 1 };
  s1 -> s1 [0, 57] { R6614 += 1, R6568 += 1 };
  s1 -> s1 [0, 65535] { R6614 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R6614 += 1, R6568 += 1 };
  s1 -> s1 [59, 65535] { R6614 += 1, R6568 += 1 };
  s2 -> s1 [0, 57] { R6614 += 1, R6568 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6614 += 1, R6567 += 1, R6568 += 1 };
  s2 -> s3 [0, 65535] { R6614 += 1, R6568 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R6614 += 1, R6568 += 1 };
  s2 -> s1 [59, 65535] { R6614 += 1, R6568 += 1 };
  s3 -> s1 [0, 57] { R6614 += 1, R6568 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6614 += 1, R6568 += 1, R10 += 1 };
  s3 -> s6 [0, 65535] { R6614 += 1 };
  s3 -> s4 [58, 58] { R6614 += 1, R6568 += 1 };
  s3 -> s1 [59, 65535] { R6614 += 1, R6568 += 1 };
  s4 -> s4 [0, 65535] { R6614 += 1, R6568 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6614 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R6616 += 1, R6570 += 1 };
  s0 -> s2 [0, 65535] { R6616 += 1, R6569 += 1, R6570 += 1 };
  s0 -> s0 [0, 65535] { R6615 += 1, R6616 += 1 };
  s0 -> s3 [0, 65535] { R6616 += 1, R6570 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R6616 += 1, R6570 += 1 };
  s0 -> s1 [88, 65535] { R6616 += 1, R6570 += 1 };
  s1 -> s1 [0, 86] { R6616 += 1, R6570 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6616 += 1 };
  s1 -> s4 [87, 87] { R6616 += 1, R6570 += 1 };
  s1 -> s1 [88, 65535] { R6616 += 1, R6570 += 1 };
  s2 -> s1 [0, 86] { R6616 += 1, R6570 += 1 };
  s2 -> s2 [0, 65535] { R6616 += 1, R6569 += 1, R6570 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6616 += 1, R6570 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R6616 += 1, R6570 += 1 };
  s2 -> s1 [88, 65535] { R6616 += 1, R6570 += 1 };
  s3 -> s1 [0, 86] { R6616 += 1, R6570 += 1 };
  s3 -> s5 [0, 65535] { R6616 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6616 += 1, R6570 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R6616 += 1, R6570 += 1 };
  s3 -> s1 [88, 65535] { R6616 += 1, R6570 += 1 };
  s4 -> s4 [0, 65535] { R6616 += 1, R6570 += 1 };
  s5 -> s5 [0, 65535] { R6616 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R6618 += 1, R6572 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R6617 += 1, R6618 += 1 };
  s0 -> s3 [0, 65535] { R6618 += 1, R6571 += 1, R6572 += 1 };
  s0 -> s4 [91, 91] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6618 += 1 };
  s1 -> s7 [0, 65535] { R6618 += 1, R6572 += 1 };
  s2 -> s1 [0, 90] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R6618 += 1, R6572 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6618 += 1 };
  s2 -> s4 [91, 91] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R6618 += 1, R6572 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6618 += 1, R6571 += 1, R6572 += 1 };
  s3 -> s4 [91, 91] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R6618 += 1, R6572 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6618 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6618 += 1 };
  s7 -> s7 [0, 65535] { R6618 += 1, R6572 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R6619 += 1, R6620 += 1 };
  s0 -> s1 [0, 65535] { R6620 += 1, R6574 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R6620 += 1, R6574 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R6620 += 1, R6573 += 1, R6574 += 1 };
  s1 -> s6 [0, 65535] { R6620 += 1, R6574 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6620 += 1, R6574 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R6620 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R6620 += 1, R6574 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R6620 += 1, R6574 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s5 [0, 65535] { R6620 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6620 += 1, R6574 += 1, R5998 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R6620 += 1, R6574 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s3 [0, 65535] { R6620 += 1, R6573 += 1, R6574 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6620 += 1 };
  s6 -> s6 [0, 65535] { R6620 += 1, R6574 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6620 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R6622 += 1, R6575 += 1, R6576 += 1 };
  s0 -> s2 [0, 65535] { R6622 += 1, R6576 += 1, R6542 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R6622 += 1, R6576 += 1, R6541 += 1, R6542 += 1 };
  s0 -> s0 [0, 65535] { R6621 += 1, R6622 += 1 };
  s1 -> s1 [0, 65535] { R6622 += 1, R6575 += 1, R6576 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6622 += 1, R6576 += 1, R6542 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R6622 += 1, R6576 += 1, R6541 += 1, R6542 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6622 += 1, R6576 += 1, R6542 += 1, R5990 += 1 };
  s2 -> s6 [0, 65535] { R6622 += 1, R6576 += 1 };
  s2 -> s5 [0, 65535] { R6622 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6622 += 1, R6576 += 1, R6542 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R6622 += 1, R6576 += 1, R6541 += 1, R6542 += 1 };
  s3 -> s5 [0, 65535] { R6622 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6622 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6622 += 1, R6576 += 1 };
  s6 -> s5 [0, 65535] { R6622 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R6623 += 1, R6624 += 1 };
  s0 -> s1 [0, 65535] { R6624 += 1, R6578 += 1 };
  s0 -> s2 [0, 65535] { R6624 += 1, R6577 += 1, R6578 += 1 };
  s1 -> s4 [0, 65535] { R6624 += 1 };
  s1 -> s1 [0, 65535] { R6624 += 1, R6578 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6624 += 1, R6578 += 1 };
  s2 -> s2 [0, 65535] { R6624 += 1, R6577 += 1, R6578 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6624 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s0 -> s0 [0, 65535] { R6625 += 1, R6626 += 1 };
  s0 -> s2 [0, 65535] { R6626 += 1, R6580 += 1, R6547 += 1, R6548 += 1 };
  s0 -> s3 [0, 65535] { R6626 += 1, R6579 += 1, R6580 += 1 };
  s0 -> s4 [87, 87] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s0 -> s1 [88, 65535] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s1 -> s1 [0, 86] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s1 -> s4 [87, 87] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s1 -> s1 [88, 65535] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s2 -> s1 [0, 86] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s2 -> s2 [0, 65535] { R6626 += 1, R6580 += 1, R6547 += 1, R6548 += 1 };
  s2 -> s4 [87, 87] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s2 -> s1 [88, 65535] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s3 -> s1 [0, 86] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s3 -> s2 [0, 65535] { R6626 += 1, R6580 += 1, R6547 += 1, R6548 += 1 };
  s3 -> s3 [0, 65535] { R6626 += 1, R6579 += 1, R6580 += 1 };
  s3 -> s4 [87, 87] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s3 -> s1 [88, 65535] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s4 -> s5 [0, 65535] { R6626 += 1, R6580 += 1 };
  s4 -> s6 [0, 65535] { R6626 += 1 };
  s4 -> s4 [0, 65535] { R6626 += 1, R6580 += 1, R6548 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R6626 += 1, R6580 += 1 };
  s5 -> s6 [0, 65535] { R6626 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R6626 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6627 += 1, R6628 += 1 };
  s0 -> s1 [0, 65535] { R6628 += 1, R6582 += 1, R6550 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R6628 += 1, R6581 += 1, R6582 += 1 };
  s0 -> s3 [0, 65535] { R6628 += 1, R6582 += 1, R6549 += 1, R6550 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6628 += 1 };
  s1 -> s1 [0, 65535] { R6628 += 1, R6582 += 1, R6550 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R6628 += 1, R6582 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R6628 += 1, R6582 += 1, R6550 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R6628 += 1, R6581 += 1, R6582 += 1 };
  s2 -> s3 [0, 65535] { R6628 += 1, R6582 += 1, R6549 += 1, R6550 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6628 += 1 };
  s3 -> s1 [0, 65535] { R6628 += 1, R6582 += 1, R6550 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R6628 += 1, R6582 += 1, R6549 += 1, R6550 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6628 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6628 += 1 };
  s6 -> s6 [0, 65535] { R6628 += 1, R6582 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s0 -> s2 [0, 65535] { R6630 += 1, R6584 += 1, R6551 += 1, R6552 += 1 };
  s0 -> s0 [0, 65535] { R6629 += 1, R6630 += 1 };
  s0 -> s3 [0, 65535] { R6630 += 1, R6583 += 1, R6584 += 1 };
  s0 -> s4 [0, 65535] { R6630 += 1, R6584 += 1, R6552 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s0 -> s1 [88, 65535] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s1 -> s1 [0, 86] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s1 -> s7 [0, 65535] { R6630 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R6630 += 1, R6584 += 1 };
  s1 -> s5 [87, 87] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s1 -> s1 [88, 65535] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s2 -> s1 [0, 86] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s2 -> s7 [0, 65535] { R6630 += 1 };
  s2 -> s2 [0, 65535] { R6630 += 1, R6584 += 1, R6551 += 1, R6552 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [0, 65535] { R6630 += 1, R6584 += 1, R6552 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s2 -> s1 [88, 65535] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s3 -> s1 [0, 86] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s3 -> s2 [0, 65535] { R6630 += 1, R6584 += 1, R6551 += 1, R6552 += 1 };
  s3 -> s3 [0, 65535] { R6630 += 1, R6583 += 1, R6584 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [0, 65535] { R6630 += 1, R6584 += 1, R6552 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s3 -> s1 [88, 65535] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s4 -> s1 [0, 86] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s4 -> s6 [0, 65535] { R6630 += 1, R6584 += 1 };
  s4 -> s7 [0, 65535] { R6630 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R6630 += 1, R6584 += 1, R6552 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s4 -> s1 [88, 65535] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s5 -> s5 [0, 65535] { R6630 += 1, R6584 += 1, R6552 += 1 };
  s6 -> s6 [0, 65535] { R6630 += 1, R6584 += 1 };
  s6 -> s7 [0, 65535] { R6630 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6630 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s0 -> s2 [0, 65535] { R6632 += 1, R6586 += 1, R6554 += 1, R6535 += 1, R6536 += 1 };
  s0 -> s3 [0, 65535] { R6632 += 1, R6586 += 1, R6553 += 1, R6554 += 1 };
  s0 -> s4 [0, 65535] { R6632 += 1, R6585 += 1, R6586 += 1 };
  s0 -> s0 [0, 65535] { R6631 += 1, R6632 += 1 };
  s0 -> s1 [88, 65535] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s1 -> s1 [0, 86] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6632 += 1, R6586 += 1, R6554 += 1 };
  s1 -> s7 [0, 65535] { R6632 += 1, R6586 += 1 };
  s1 -> s6 [0, 65535] { R6632 += 1 };
  s1 -> s1 [88, 65535] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s2 -> s1 [0, 86] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s2 -> s2 [0, 65535] { R6632 += 1, R6586 += 1, R6554 += 1, R6535 += 1, R6536 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R6632 += 1, R6586 += 1 };
  s2 -> s6 [0, 65535] { R6632 += 1 };
  s2 -> s1 [88, 65535] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s3 -> s1 [0, 86] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s3 -> s2 [0, 65535] { R6632 += 1, R6586 += 1, R6554 += 1, R6535 += 1, R6536 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6632 += 1, R6586 += 1, R6553 += 1, R6554 += 1 };
  s3 -> s6 [0, 65535] { R6632 += 1 };
  s3 -> s1 [88, 65535] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s4 -> s1 [0, 86] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s4 -> s2 [0, 65535] { R6632 += 1, R6586 += 1, R6554 += 1, R6535 += 1, R6536 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R6632 += 1, R6586 += 1, R6553 += 1, R6554 += 1 };
  s4 -> s4 [0, 65535] { R6632 += 1, R6585 += 1, R6586 += 1 };
  s4 -> s1 [88, 65535] { R6632 += 1, R6586 += 1, R6554 += 1, R6536 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6632 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6632 += 1, R6586 += 1 };
  s7 -> s6 [0, 65535] { R6632 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1, R6538 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R6634 += 1, R6587 += 1, R6588 += 1 };
  s0 -> s3 [0, 65535] { R6634 += 1, R6588 += 1, R6555 += 1, R6556 += 1 };
  s0 -> s0 [0, 65535] { R6633 += 1, R6634 += 1 };
  s0 -> s4 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1, R6537 += 1, R6538 += 1 };
  s1 -> s1 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1, R6538 += 1, R5988 += 1 };
  s1 -> s8 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6634 += 1, R6588 += 1 };
  s1 -> s7 [0, 65535] { R6634 += 1 };
  s2 -> s1 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1, R6538 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R6634 += 1, R6587 += 1, R6588 += 1 };
  s2 -> s3 [0, 65535] { R6634 += 1, R6588 += 1, R6555 += 1, R6556 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1, R6537 += 1, R6538 += 1 };
  s3 -> s1 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1, R6538 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R6634 += 1, R6588 += 1, R6555 += 1, R6556 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R6634 += 1 };
  s3 -> s4 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1, R6537 += 1, R6538 += 1 };
  s4 -> s1 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1, R6538 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6634 += 1, R6588 += 1 };
  s4 -> s7 [0, 65535] { R6634 += 1 };
  s4 -> s4 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1, R6537 += 1, R6538 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6634 += 1, R6588 += 1 };
  s6 -> s7 [0, 65535] { R6634 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6634 += 1 };
  s8 -> s8 [0, 65535] { R6634 += 1, R6588 += 1, R6556 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R6634 += 1, R6588 += 1 };
  s8 -> s7 [0, 65535] { R6634 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R6636 += 1, R6589 += 1, R6590 += 1 };
  s0 -> s2 [0, 65535] { R6636 += 1, R6590 += 1, R6558 += 1, R6539 += 1, R6540 += 1 };
  s0 -> s0 [0, 65535] { R6635 += 1, R6636 += 1 };
  s0 -> s3 [0, 65535] { R6636 += 1, R6590 += 1, R6557 += 1, R6558 += 1 };
  s0 -> s4 [108, 108] { R6636 += 1, R6590 += 1, R6558 += 1, R6540 += 1 };
  s1 -> s1 [0, 65535] { R6636 += 1, R6589 += 1, R6590 += 1 };
  s1 -> s2 [0, 65535] { R6636 += 1, R6590 += 1, R6558 += 1, R6539 += 1, R6540 += 1 };
  s1 -> s3 [0, 65535] { R6636 += 1, R6590 += 1, R6557 += 1, R6558 += 1 };
  s1 -> s4 [108, 108] { R6636 += 1, R6590 += 1, R6558 += 1, R6540 += 1 };
  s2 -> s2 [0, 65535] { R6636 += 1, R6590 += 1, R6558 += 1, R6539 += 1, R6540 += 1 };
  s2 -> s4 [108, 108] { R6636 += 1, R6590 += 1, R6558 += 1, R6540 += 1 };
  s3 -> s2 [0, 65535] { R6636 += 1, R6590 += 1, R6558 += 1, R6539 += 1, R6540 += 1 };
  s3 -> s3 [0, 65535] { R6636 += 1, R6590 += 1, R6557 += 1, R6558 += 1 };
  s3 -> s4 [108, 108] { R6636 += 1, R6590 += 1, R6558 += 1, R6540 += 1 };
  s4 -> s5 [104, 104] { R6636 += 1, R6590 += 1, R6558 += 1, R6540 += 1 };
  s5 -> s6 [111, 111] { R6636 += 1, R6590 += 1, R6558 += 1, R6540 += 1 };
  s6 -> s7 [115, 115] { R6636 += 1, R6590 += 1, R6558 += 1, R6540 += 1 };
  s7 -> s8 [116, 116] { R6636 += 1, R6590 += 1, R6558 += 1, R6540 += 1 };
  s8 -> s9 [0, 65535] { R6636 += 1 };
  s8 -> s8 [0, 65535] { R6636 += 1, R6590 += 1, R6558 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s11 [0, 65535] { R6636 += 1, R6590 += 1 };
  s9 -> s9 [0, 65535] { R6636 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s9 [0, 65535] { R6636 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R6636 += 1, R6590 += 1 };
  accepting s8, s9, s10, s11;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6638 += 1, R6591 += 1, R6592 += 1 };
  s0 -> s2 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1, R6543 += 1, R6544 += 1 };
  s0 -> s0 [0, 65535] { R6637 += 1, R6638 += 1 };
  s0 -> s3 [0, 65535] { R6638 += 1, R6592 += 1, R6559 += 1, R6560 += 1 };
  s0 -> s4 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1, R6544 += 1, R5989 += 1 };
  s1 -> s1 [0, 65535] { R6638 += 1, R6591 += 1, R6592 += 1 };
  s1 -> s2 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1, R6543 += 1, R6544 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [0, 65535] { R6638 += 1, R6592 += 1, R6559 += 1, R6560 += 1 };
  s1 -> s4 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1, R6544 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535] { R6638 += 1, R6592 += 1 };
  s2 -> s6 [0, 65535] { R6638 += 1 };
  s2 -> s2 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1, R6543 += 1, R6544 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1, R6544 += 1, R5989 += 1 };
  s3 -> s6 [0, 65535] { R6638 += 1 };
  s3 -> s2 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1, R6543 += 1, R6544 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R6638 += 1, R6592 += 1, R6559 += 1, R6560 += 1 };
  s3 -> s4 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1, R6544 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535] { R6638 += 1, R6592 += 1 };
  s4 -> s6 [0, 65535] { R6638 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1 };
  s4 -> s4 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1, R6544 += 1, R5989 += 1 };
  s5 -> s5 [0, 65535] { R6638 += 1, R6592 += 1 };
  s5 -> s6 [0, 65535] { R6638 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R6638 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R6638 += 1, R6592 += 1 };
  s8 -> s6 [0, 65535] { R6638 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R6638 += 1, R6592 += 1, R6560 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6640 += 1, R6594 += 1, R6561 += 1, R6562 += 1 };
  s0 -> s0 [0, 65535] { R6639 += 1, R6640 += 1 };
  s0 -> s2 [0, 65535] { R6640 += 1, R6594 += 1, R6562 += 1, R6545 += 1, R6546 += 1 };
  s0 -> s3 [0, 65535] { R6640 += 1, R6593 += 1, R6594 += 1 };
  s0 -> s4 [108, 108] { R6640 += 1, R6594 += 1, R6562 += 1, R6546 += 1 };
  s1 -> s1 [0, 65535] { R6640 += 1, R6594 += 1, R6561 += 1, R6562 += 1 };
  s1 -> s2 [0, 65535] { R6640 += 1, R6594 += 1, R6562 += 1, R6545 += 1, R6546 += 1 };
  s1 -> s4 [108, 108] { R6640 += 1, R6594 += 1, R6562 += 1, R6546 += 1 };
  s2 -> s2 [0, 65535] { R6640 += 1, R6594 += 1, R6562 += 1, R6545 += 1, R6546 += 1 };
  s2 -> s4 [108, 108] { R6640 += 1, R6594 += 1, R6562 += 1, R6546 += 1 };
  s3 -> s1 [0, 65535] { R6640 += 1, R6594 += 1, R6561 += 1, R6562 += 1 };
  s3 -> s2 [0, 65535] { R6640 += 1, R6594 += 1, R6562 += 1, R6545 += 1, R6546 += 1 };
  s3 -> s3 [0, 65535] { R6640 += 1, R6593 += 1, R6594 += 1 };
  s3 -> s4 [108, 108] { R6640 += 1, R6594 += 1, R6562 += 1, R6546 += 1 };
  s4 -> s5 [111, 111] { R6640 += 1, R6594 += 1, R6562 += 1, R6546 += 1 };
  s5 -> s6 [99, 99] { R6640 += 1, R6594 += 1, R6562 += 1, R6546 += 1 };
  s6 -> s7 [97, 97] { R6640 += 1, R6594 += 1, R6562 += 1, R6546 += 1 };
  s7 -> s8 [0, 65535] { R6640 += 1, R6594 += 1 };
  s7 -> s9 [0, 65535] { R6640 += 1 };
  s7 -> s10 [0, 65535];
  s7 -> s7 [0, 65535] { R6640 += 1, R6594 += 1, R6562 += 1 };
  s8 -> s8 [0, 65535] { R6640 += 1, R6594 += 1 };
  s8 -> s9 [0, 65535] { R6640 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R6640 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s7, s8, s9, s10;
};
};
constraint R1 = R6540 && R2 = R6562 && R3 = R6006 && R4 = R6640 && R15 = 0 && R16 = R6594 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R6594 = 1 && R6000 = R6006 && R6001 - R6594 = 1 && R6002 = R6006 && R6003 - R6594 = 1 && R6004 = R6006 && R6005 - R6594 = 1 && R6539 = 0 && R6545 = 0 && R6546 = 0 && R6547 = 0 && R6548 = R6562 && R6549 = 0 && R6550 = R6562 && R6551 = 0 && R6552 = R6562 && R6553 = 0 && R6554 = R6562 && R6555 = 0 && R6556 = R6562 && R6557 = 0 && R6558 = R6562 && R6559 = 0 && R6560 = R6562 && R6561 = 0 && R6563 = 0 && R6564 = R6594 && R6565 = 0 && R6566 = R6594 && R6567 = 0 && R6568 = R6594 && R6569 = 0 && R6570 = R6594 && R6571 = 0 && R6572 = R6594 && R6573 = 0 && R6574 = R6594 && R6575 = 0 && R6576 = R6594 && R6577 = 0 && R6578 = R6594 && R6579 = 0 && R6580 = R6594 && R6581 = 0 && R6582 = R6594 && R6583 = 0 && R6584 = R6594 && R6585 = 0 && R6586 = R6594 && R6587 = 0 && R6588 = R6594 && R6589 = 0 && R6590 = R6594 && R6591 = 0 && R6592 = R6594 && R6593 = 0 && R6595 = 10 && R6596 = R6640 && R6597 = 10 && R6598 = R6640 && R6599 = 10 && R6600 = R6640 && R6601 = 10 && R6602 = R6640 && R6603 = 10 && R6604 = R6640 && R6605 = 10 && R6606 = R6640 && R6607 = 10 && R6608 = R6640 && R6609 = 10 && R6610 = R6640 && R6611 = 10 && R6612 = R6640 && R6613 = 10 && R6614 = R6640 && R6615 = 10 && R6616 = R6640 && R6617 = 10 && R6618 = R6640 && R6619 = 10 && R6620 = R6640 && R6621 = 10 && R6622 = R6640 && R6623 = 10 && R6624 = R6640 && R6625 = 10 && R6626 = R6640 && R6627 = 10 && R6628 = R6640 && R6629 = 10 && R6630 = R6640 && R6631 = 10 && R6632 = R6640 && R6633 = 10 && R6634 = R6640 && R6635 = 10 && R6636 = R6640 && R6637 = 10 && R6638 = R6640 && R6639 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R6594 < R6006 && -1 < R6540 && 0 < R6562 && -1 < R6594 && 9 < R6640 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R6535 != 0 || R6536 = R6540 || (R5988 = 0 && R6540 = 0)) && (R6537 != 0 || R6538 = R6540 || (R5988 = 0 && R6540 = 0)) && (R5989 = 0 || (R6543 = 0 && R6544 = 0)) && (R5990 = 0 || (R6541 = 0 && R6542 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R6535 = 0 || (R5988 = 0 && R6540 = 0)) && (R6537 = 0 || (R5988 = 0 && R6540 = 0));
// End of Parikh automata intersection problem
