// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6641, R6642, R6643, R6644, R6645, R6646, R6647, R6648, R6649, R6650, R6651, R6652, R6653, R6654, R6655, R6656, R6657, R6658, R6659, R6660, R6661, R6662, R6663, R6664, R6665, R6666, R6667, R6668, R6669, R6670, R6671, R6672, R6673, R6674, R6675, R6676, R6677, R6678, R6679, R6680, R6681, R6682, R6683, R6684, R6685, R6686, R6687, R6688, R6689, R6690, R6691, R6692, R6693, R6694, R6695, R6696, R6697, R6698, R6699, R6700, R6701, R6702, R6703, R6704, R6705, R6706, R6707, R6708, R6709, R6710, R6711, R6712, R6713, R6714, R6715, R6716, R6717, R6718, R6719, R6720, R6721, R6722, R6723, R6724, R6725, R6726, R6727, R6728, R6729, R6730, R6731, R6732, R6733, R6734, R6735, R6736, R6737, R6738, R6739, R6740, R6741, R6742, R6743, R6744, R6745, R6746, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R6702 += 1 };
  s0 -> s0 [0, 65535] { R6701 += 1, R6702 += 1 };
  s0 -> s2 [46, 46] { R6702 += 1 };
  s0 -> s3 [47, 47] { R6702 += 1 };
  s0 -> s1 [48, 65535] { R6702 += 1 };
  s1 -> s1 [0, 45] { R6702 += 1 };
  s1 -> s2 [46, 46] { R6702 += 1 };
  s1 -> s3 [47, 47] { R6702 += 1 };
  s1 -> s1 [48, 65535] { R6702 += 1 };
  s2 -> s1 [0, 45] { R6702 += 1 };
  s2 -> s2 [46, 46] { R6702 += 1 };
  s2 -> s3 [47, 47] { R6702 += 1 };
  s2 -> s1 [48, 114] { R6702 += 1 };
  s2 -> s8 [115, 115] { R6702 += 1 };
  s2 -> s1 [116, 65535] { R6702 += 1 };
  s3 -> s3 [0, 45] { R6702 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R6702 += 1 };
  s3 -> s3 [47, 65535] { R6702 += 1 };
  s4 -> s3 [0, 45] { R6702 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R6702 += 1 };
  s4 -> s3 [47, 114] { R6702 += 1 };
  s4 -> s5 [115, 115] { R6702 += 1 };
  s4 -> s3 [116, 65535] { R6702 += 1 };
  s5 -> s3 [0, 45] { R6702 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R6702 += 1 };
  s5 -> s3 [47, 110] { R6702 += 1 };
  s5 -> s6 [111, 111] { R6702 += 1 };
  s5 -> s3 [112, 65535] { R6702 += 1 };
  s6 -> s3 [0, 45] { R6702 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R6702 += 1 };
  s6 -> s3 [47, 98] { R6702 += 1 };
  s6 -> s7 [99, 99] { R6702 += 1 };
  s6 -> s3 [100, 65535] { R6702 += 1 };
  s7 -> s3 [0, 45] { R6702 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R6702 += 1 };
  s7 -> s3 [47, 106] { R6702 += 1 };
  s7 -> s3 [108, 65535] { R6702 += 1 };
  s8 -> s1 [0, 45] { R6702 += 1 };
  s8 -> s2 [46, 46] { R6702 += 1 };
  s8 -> s3 [47, 47] { R6702 += 1 };
  s8 -> s1 [48, 110] { R6702 += 1 };
  s8 -> s9 [111, 111] { R6702 += 1 };
  s8 -> s1 [112, 65535] { R6702 += 1 };
  s9 -> s1 [0, 45] { R6702 += 1 };
  s9 -> s2 [46, 46] { R6702 += 1 };
  s9 -> s3 [47, 47] { R6702 += 1 };
  s9 -> s1 [48, 98] { R6702 += 1 };
  s9 -> s10 [99, 99] { R6702 += 1 };
  s9 -> s1 [100, 65535] { R6702 += 1 };
  s10 -> s1 [0, 45] { R6702 += 1 };
  s10 -> s2 [46, 46] { R6702 += 1 };
  s10 -> s3 [47, 47] { R6702 += 1 };
  s10 -> s1 [48, 106] { R6702 += 1 };
  s10 -> s1 [108, 65535] { R6702 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R6703 += 1, R6704 += 1 };
  s0 -> s1 [0, 65535] { R6704 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6704 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R6706 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R6706 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R6705 += 1, R6706 += 1 };
  s0 -> s3 [47, 47] { R6706 += 1 };
  s0 -> s1 [48, 65535] { R6706 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R6706 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R6706 += 1 };
  s1 -> s1 [48, 65535] { R6706 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R6706 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R6706 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R6706 += 1 };
  s2 -> s1 [48, 65535] { R6706 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R6706 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R6708 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R6707 += 1, R6708 += 1 };
  s0 -> s2 [0, 65535] { R6708 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s1 [38, 42] { R6708 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R6708 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R6708 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R6708 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R6708 += 1, R6000 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6708 += 1 };
  s1 -> s1 [38, 42] { R6708 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R6708 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R6708 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R6708 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R6708 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6708 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s1 [38, 42] { R6708 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R6708 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R6708 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R6708 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R6709 += 1, R6710 += 1 };
  s0 -> s1 [0, 65535] { R6710 += 1, R6001 += 1, R6002 += 1 };
  s0 -> s2 [0, 65535] { R6710 += 1, R6002 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R6710 += 1, R6001 += 1, R6002 += 1 };
  s1 -> s2 [0, 65535] { R6710 += 1, R6002 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6710 += 1 };
  s2 -> s2 [0, 65535] { R6710 += 1, R6002 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6710 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R6712 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s3 [0, 65535] { R6712 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R6711 += 1, R6712 += 1 };
  s0 -> s4 [63, 63] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R6712 += 1, R6004 += 1 };
  s1 -> s1 [0, 65535] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R6712 += 1 };
  s2 -> s1 [0, 62] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R6712 += 1, R6003 += 1, R6004 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6712 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6712 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s6 [0, 65535] { R6712 += 1 };
  s3 -> s4 [63, 63] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R6712 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6712 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6712 += 1, R6004 += 1 };
  s7 -> s6 [0, 65535] { R6712 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6713 += 1, R6714 += 1 };
  s0 -> s1 [0, 65535] { R6714 += 1, R6005 += 1, R6006 += 1 };
  s0 -> s2 [0, 65535] { R6714 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R6714 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R6714 += 1, R6005 += 1, R6006 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R6714 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R6714 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535] { R6714 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6714 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R6714 += 1, R6006 += 1 };
  s3 -> s4 [0, 65535] { R6714 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6714 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R6714 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535] { R6714 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6714 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6714 += 1, R6006 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R6716 += 1, R6670 += 1 };
  s0 -> s2 [0, 65535] { R6716 += 1, R6669 += 1, R6670 += 1 };
  s0 -> s0 [0, 65535] { R6715 += 1, R6716 += 1 };
  s0 -> s1 [45, 63] { R6716 += 1, R6670 += 1 };
  s0 -> s3 [87, 87] { R6716 += 1, R6670 += 1 };
  s0 -> s1 [88, 65535] { R6716 += 1, R6670 += 1 };
  s1 -> s1 [0, 43] { R6716 += 1, R6670 += 1 };
  s1 -> s1 [45, 63] { R6716 += 1, R6670 += 1 };
  s1 -> s3 [87, 87] { R6716 += 1, R6670 += 1 };
  s1 -> s1 [88, 65535] { R6716 += 1, R6670 += 1 };
  s2 -> s1 [0, 43] { R6716 += 1, R6670 += 1 };
  s2 -> s2 [0, 65535] { R6716 += 1, R6669 += 1, R6670 += 1 };
  s2 -> s1 [45, 63] { R6716 += 1, R6670 += 1 };
  s2 -> s3 [87, 87] { R6716 += 1, R6670 += 1 };
  s2 -> s1 [88, 65535] { R6716 += 1, R6670 += 1 };
  s3 -> s3 [0, 43] { R6716 += 1, R6670 += 1 };
  s3 -> s3 [0, 65535] { R6716 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R6716 += 1, R6670 += 1 };
  s3 -> s3 [87, 65535] { R6716 += 1, R6670 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R6718 += 1, R6671 += 1, R6672 += 1 };
  s0 -> s2 [0, 65535] { R6718 += 1, R6672 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R6717 += 1, R6718 += 1 };
  s1 -> s1 [0, 65535] { R6718 += 1, R6671 += 1, R6672 += 1 };
  s1 -> s2 [0, 65535] { R6718 += 1, R6672 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6718 += 1, R6672 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6718 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6718 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R6720 += 1, R6674 += 1 };
  s0 -> s2 [0, 65535] { R6720 += 1, R6673 += 1, R6674 += 1 };
  s0 -> s3 [0, 65535] { R6720 += 1, R6674 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R6719 += 1, R6720 += 1 };
  s0 -> s4 [58, 58] { R6720 += 1, R6674 += 1 };
  s0 -> s1 [59, 65535] { R6720 += 1, R6674 += 1 };
  s1 -> s1 [0, 57] { R6720 += 1, R6674 += 1 };
  s1 -> s1 [0, 65535] { R6720 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R6720 += 1, R6674 += 1 };
  s1 -> s1 [59, 65535] { R6720 += 1, R6674 += 1 };
  s2 -> s1 [0, 57] { R6720 += 1, R6674 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6720 += 1, R6673 += 1, R6674 += 1 };
  s2 -> s3 [0, 65535] { R6720 += 1, R6674 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R6720 += 1, R6674 += 1 };
  s2 -> s1 [59, 65535] { R6720 += 1, R6674 += 1 };
  s3 -> s1 [0, 57] { R6720 += 1, R6674 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6720 += 1 };
  s3 -> s3 [0, 65535] { R6720 += 1, R6674 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R6720 += 1, R6674 += 1 };
  s3 -> s1 [59, 65535] { R6720 += 1, R6674 += 1 };
  s4 -> s4 [0, 65535] { R6720 += 1, R6674 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6720 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R6722 += 1, R6676 += 1 };
  s0 -> s2 [0, 65535] { R6722 += 1, R6675 += 1, R6676 += 1 };
  s0 -> s0 [0, 65535] { R6721 += 1, R6722 += 1 };
  s0 -> s3 [0, 65535] { R6722 += 1, R6676 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R6722 += 1, R6676 += 1 };
  s0 -> s1 [88, 65535] { R6722 += 1, R6676 += 1 };
  s1 -> s1 [0, 86] { R6722 += 1, R6676 += 1 };
  s1 -> s1 [0, 65535] { R6722 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [87, 87] { R6722 += 1, R6676 += 1 };
  s1 -> s1 [88, 65535] { R6722 += 1, R6676 += 1 };
  s2 -> s1 [0, 86] { R6722 += 1, R6676 += 1 };
  s2 -> s2 [0, 65535] { R6722 += 1, R6675 += 1, R6676 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6722 += 1, R6676 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R6722 += 1, R6676 += 1 };
  s2 -> s1 [88, 65535] { R6722 += 1, R6676 += 1 };
  s3 -> s1 [0, 86] { R6722 += 1, R6676 += 1 };
  s3 -> s5 [0, 65535] { R6722 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6722 += 1, R6676 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R6722 += 1, R6676 += 1 };
  s3 -> s1 [88, 65535] { R6722 += 1, R6676 += 1 };
  s4 -> s4 [0, 65535] { R6722 += 1, R6676 += 1 };
  s5 -> s5 [0, 65535] { R6722 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R6723 += 1, R6724 += 1 };
  s0 -> s2 [0, 65535] { R6724 += 1, R6678 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R6724 += 1, R6677 += 1, R6678 += 1 };
  s0 -> s4 [91, 91] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R6724 += 1 };
  s1 -> s7 [0, 65535] { R6724 += 1, R6678 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R6724 += 1 };
  s2 -> s2 [0, 65535] { R6724 += 1, R6678 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R6724 += 1, R6678 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6724 += 1, R6677 += 1, R6678 += 1 };
  s3 -> s4 [91, 91] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R6724 += 1, R6678 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6724 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6724 += 1 };
  s7 -> s7 [0, 65535] { R6724 += 1, R6678 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R6725 += 1, R6726 += 1 };
  s0 -> s1 [0, 65535] { R6726 += 1, R6680 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R6726 += 1, R6680 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R6726 += 1, R6679 += 1, R6680 += 1 };
  s1 -> s5 [0, 65535] { R6726 += 1 };
  s1 -> s1 [0, 65535] { R6726 += 1, R6680 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s2 [0, 65535] { R6726 += 1, R6680 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6726 += 1 };
  s2 -> s6 [0, 65535] { R6726 += 1, R6680 += 1 };
  s2 -> s2 [0, 65535] { R6726 += 1, R6680 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6726 += 1, R6680 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R6726 += 1, R6680 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6726 += 1, R6679 += 1, R6680 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6726 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6726 += 1 };
  s6 -> s6 [0, 65535] { R6726 += 1, R6680 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R6728 += 1, R6682 += 1, R6648 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R6727 += 1, R6728 += 1 };
  s0 -> s2 [0, 65535] { R6728 += 1, R6681 += 1, R6682 += 1 };
  s0 -> s3 [0, 65535] { R6728 += 1, R6682 += 1, R6647 += 1, R6648 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6728 += 1, R6682 += 1, R6648 += 1, R5990 += 1 };
  s1 -> s6 [0, 65535] { R6728 += 1, R6682 += 1 };
  s1 -> s4 [0, 65535] { R6728 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6728 += 1, R6682 += 1, R6648 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R6728 += 1, R6681 += 1, R6682 += 1 };
  s2 -> s3 [0, 65535] { R6728 += 1, R6682 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s4 [0, 65535] { R6728 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R6728 += 1, R6682 += 1, R6648 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R6728 += 1, R6682 += 1, R6647 += 1, R6648 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6728 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6728 += 1, R6682 += 1 };
  s6 -> s4 [0, 65535] { R6728 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R6730 += 1, R6684 += 1 };
  s0 -> s2 [0, 65535] { R6730 += 1, R6683 += 1, R6684 += 1 };
  s0 -> s0 [0, 65535] { R6729 += 1, R6730 += 1 };
  s1 -> s1 [0, 65535] { R6730 += 1, R6684 += 1 };
  s1 -> s4 [0, 65535] { R6730 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6730 += 1, R6684 += 1 };
  s2 -> s2 [0, 65535] { R6730 += 1, R6683 += 1, R6684 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6730 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s0 -> s2 [0, 65535] { R6732 += 1, R6686 += 1, R6653 += 1, R6654 += 1 };
  s0 -> s0 [0, 65535] { R6731 += 1, R6732 += 1 };
  s0 -> s3 [0, 65535] { R6732 += 1, R6685 += 1, R6686 += 1 };
  s0 -> s4 [87, 87] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s0 -> s1 [88, 65535] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s1 -> s1 [0, 86] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s1 -> s4 [87, 87] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s1 -> s1 [88, 65535] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s2 -> s1 [0, 86] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s2 -> s2 [0, 65535] { R6732 += 1, R6686 += 1, R6653 += 1, R6654 += 1 };
  s2 -> s4 [87, 87] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s2 -> s1 [88, 65535] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s3 -> s1 [0, 86] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s3 -> s2 [0, 65535] { R6732 += 1, R6686 += 1, R6653 += 1, R6654 += 1 };
  s3 -> s3 [0, 65535] { R6732 += 1, R6685 += 1, R6686 += 1 };
  s3 -> s4 [87, 87] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s3 -> s1 [88, 65535] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s4 -> s4 [0, 65535] { R6732 += 1, R6686 += 1, R6654 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6732 += 1 };
  s4 -> s7 [0, 65535] { R6732 += 1, R6686 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6732 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6732 += 1 };
  s7 -> s7 [0, 65535] { R6732 += 1, R6686 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6734 += 1, R6688 += 1, R6656 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6733 += 1, R6734 += 1 };
  s0 -> s2 [0, 65535] { R6734 += 1, R6687 += 1, R6688 += 1 };
  s0 -> s3 [0, 65535] { R6734 += 1, R6688 += 1, R6655 += 1, R6656 += 1 };
  s1 -> s1 [0, 65535] { R6734 += 1, R6688 += 1, R6656 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6734 += 1 };
  s1 -> s6 [0, 65535] { R6734 += 1, R6688 += 1 };
  s2 -> s1 [0, 65535] { R6734 += 1, R6688 += 1, R6656 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6734 += 1, R6687 += 1, R6688 += 1 };
  s2 -> s3 [0, 65535] { R6734 += 1, R6688 += 1, R6655 += 1, R6656 += 1 };
  s3 -> s1 [0, 65535] { R6734 += 1, R6688 += 1, R6656 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6734 += 1 };
  s3 -> s3 [0, 65535] { R6734 += 1, R6688 += 1, R6655 += 1, R6656 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6734 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6734 += 1 };
  s6 -> s6 [0, 65535] { R6734 += 1, R6688 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s0 -> s2 [0, 65535] { R6736 += 1, R6690 += 1, R6657 += 1, R6658 += 1 };
  s0 -> s3 [0, 65535] { R6736 += 1, R6690 += 1, R6658 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R6735 += 1, R6736 += 1 };
  s0 -> s4 [0, 65535] { R6736 += 1, R6689 += 1, R6690 += 1 };
  s0 -> s5 [87, 87] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s0 -> s1 [88, 65535] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s1 -> s1 [0, 86] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s1 -> s8 [0, 65535] { R6736 += 1 };
  s1 -> s1 [0, 65535] { R6736 += 1, R6690 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [87, 87] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s1 -> s1 [88, 65535] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s2 -> s1 [0, 86] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s2 -> s2 [0, 65535] { R6736 += 1, R6690 += 1, R6657 += 1, R6658 += 1 };
  s2 -> s3 [0, 65535] { R6736 += 1, R6690 += 1, R6658 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R6736 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [87, 87] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s2 -> s1 [88, 65535] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s3 -> s1 [0, 86] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s3 -> s7 [0, 65535] { R6736 += 1, R6690 += 1 };
  s3 -> s3 [0, 65535] { R6736 += 1, R6690 += 1, R6658 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R6736 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [87, 87] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s3 -> s1 [88, 65535] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s4 -> s1 [0, 86] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s4 -> s2 [0, 65535] { R6736 += 1, R6690 += 1, R6657 += 1, R6658 += 1 };
  s4 -> s3 [0, 65535] { R6736 += 1, R6690 += 1, R6658 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R6736 += 1, R6689 += 1, R6690 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [87, 87] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s4 -> s1 [88, 65535] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s5 -> s5 [0, 65535] { R6736 += 1, R6690 += 1, R6658 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6736 += 1, R6690 += 1 };
  s7 -> s8 [0, 65535] { R6736 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6736 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s0 -> s2 [0, 65535] { R6738 += 1, R6692 += 1, R6659 += 1, R6660 += 1 };
  s0 -> s3 [0, 65535] { R6738 += 1, R6692 += 1, R6660 += 1, R6641 += 1, R6642 += 1 };
  s0 -> s0 [0, 65535] { R6737 += 1, R6738 += 1 };
  s0 -> s4 [0, 65535] { R6738 += 1, R6691 += 1, R6692 += 1 };
  s0 -> s1 [88, 65535] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s1 -> s1 [0, 86] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s1 -> s6 [0, 65535] { R6738 += 1 };
  s1 -> s1 [0, 65535] { R6738 += 1, R6692 += 1, R6660 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R6738 += 1, R6692 += 1 };
  s1 -> s1 [88, 65535] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s2 -> s1 [0, 86] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s2 -> s6 [0, 65535] { R6738 += 1 };
  s2 -> s2 [0, 65535] { R6738 += 1, R6692 += 1, R6659 += 1, R6660 += 1 };
  s2 -> s3 [0, 65535] { R6738 += 1, R6692 += 1, R6660 += 1, R6641 += 1, R6642 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s3 -> s1 [0, 86] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s3 -> s6 [0, 65535] { R6738 += 1 };
  s3 -> s3 [0, 65535] { R6738 += 1, R6692 += 1, R6660 += 1, R6641 += 1, R6642 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R6738 += 1, R6692 += 1 };
  s3 -> s1 [88, 65535] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s4 -> s1 [0, 86] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s4 -> s2 [0, 65535] { R6738 += 1, R6692 += 1, R6659 += 1, R6660 += 1 };
  s4 -> s3 [0, 65535] { R6738 += 1, R6692 += 1, R6660 += 1, R6641 += 1, R6642 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6738 += 1, R6691 += 1, R6692 += 1 };
  s4 -> s1 [88, 65535] { R6738 += 1, R6692 += 1, R6660 += 1, R6642 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6738 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6738 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6738 += 1, R6692 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R6739 += 1, R6740 += 1 };
  s0 -> s1 [0, 65535] { R6740 += 1, R6694 += 1, R6661 += 1, R6662 += 1 };
  s0 -> s2 [0, 65535] { R6740 += 1, R6693 += 1, R6694 += 1 };
  s0 -> s3 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1, R6644 += 1, R5988 += 1 };
  s0 -> s4 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1, R6643 += 1, R6644 += 1 };
  s1 -> s1 [0, 65535] { R6740 += 1, R6694 += 1, R6661 += 1, R6662 += 1 };
  s1 -> s3 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1, R6644 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535] { R6740 += 1 };
  s1 -> s4 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1, R6643 += 1, R6644 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R6740 += 1, R6694 += 1, R6661 += 1, R6662 += 1 };
  s2 -> s2 [0, 65535] { R6740 += 1, R6693 += 1, R6694 += 1 };
  s2 -> s3 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1, R6644 += 1, R5988 += 1 };
  s2 -> s4 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1 };
  s3 -> s3 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1, R6644 += 1, R5988 += 1 };
  s3 -> s5 [0, 65535] { R6740 += 1 };
  s3 -> s6 [0, 65535] { R6740 += 1, R6694 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s3 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1, R6644 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R6740 += 1 };
  s4 -> s4 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s6 [0, 65535] { R6740 += 1, R6694 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R6740 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R6740 += 1 };
  s6 -> s6 [0, 65535] { R6740 += 1, R6694 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R6740 += 1, R6694 += 1, R6662 += 1 };
  s8 -> s5 [0, 65535] { R6740 += 1 };
  s8 -> s6 [0, 65535] { R6740 += 1, R6694 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R6741 += 1, R6742 += 1 };
  s0 -> s1 [0, 65535] { R6742 += 1, R6696 += 1, R6663 += 1, R6664 += 1 };
  s0 -> s2 [0, 65535] { R6742 += 1, R6696 += 1, R6664 += 1, R6645 += 1, R6646 += 1 };
  s0 -> s3 [0, 65535] { R6742 += 1, R6695 += 1, R6696 += 1 };
  s0 -> s4 [97, 97] { R6742 += 1, R6696 += 1, R6664 += 1, R6646 += 1 };
  s1 -> s1 [0, 65535] { R6742 += 1, R6696 += 1, R6663 += 1, R6664 += 1 };
  s1 -> s2 [0, 65535] { R6742 += 1, R6696 += 1, R6664 += 1, R6645 += 1, R6646 += 1 };
  s1 -> s4 [97, 97] { R6742 += 1, R6696 += 1, R6664 += 1, R6646 += 1 };
  s2 -> s2 [0, 65535] { R6742 += 1, R6696 += 1, R6664 += 1, R6645 += 1, R6646 += 1 };
  s2 -> s4 [97, 97] { R6742 += 1, R6696 += 1, R6664 += 1, R6646 += 1 };
  s3 -> s1 [0, 65535] { R6742 += 1, R6696 += 1, R6663 += 1, R6664 += 1 };
  s3 -> s2 [0, 65535] { R6742 += 1, R6696 += 1, R6664 += 1, R6645 += 1, R6646 += 1 };
  s3 -> s3 [0, 65535] { R6742 += 1, R6695 += 1, R6696 += 1 };
  s3 -> s4 [97, 97] { R6742 += 1, R6696 += 1, R6664 += 1, R6646 += 1 };
  s4 -> s5 [108, 108] { R6742 += 1, R6696 += 1, R6664 += 1, R6646 += 1 };
  s5 -> s6 [104, 104] { R6742 += 1, R6696 += 1, R6664 += 1, R6646 += 1 };
  s6 -> s7 [111, 111] { R6742 += 1, R6696 += 1, R6664 += 1, R6646 += 1 };
  s7 -> s8 [115, 115] { R6742 += 1, R6696 += 1, R6664 += 1, R6646 += 1 };
  s8 -> s9 [116, 116] { R6742 += 1, R6696 += 1, R6664 += 1, R6646 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R6742 += 1 };
  s9 -> s9 [0, 65535] { R6742 += 1, R6696 += 1, R6664 += 1 };
  s9 -> s12 [0, 65535] { R6742 += 1, R6696 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R6742 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s11 [0, 65535] { R6742 += 1 };
  s12 -> s12 [0, 65535] { R6742 += 1, R6696 += 1 };
  accepting s9, s10, s11, s12;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1, R6649 += 1, R6650 += 1 };
  s0 -> s0 [0, 65535] { R6743 += 1, R6744 += 1 };
  s0 -> s2 [0, 65535] { R6744 += 1, R6698 += 1, R6665 += 1, R6666 += 1 };
  s0 -> s3 [0, 65535] { R6744 += 1, R6697 += 1, R6698 += 1 };
  s0 -> s4 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1, R6650 += 1, R5989 += 1 };
  s1 -> s1 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1, R6649 += 1, R6650 += 1 };
  s1 -> s6 [0, 65535] { R6744 += 1 };
  s1 -> s7 [0, 65535] { R6744 += 1, R6698 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1, R6650 += 1, R5989 += 1 };
  s2 -> s1 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1, R6649 += 1, R6650 += 1 };
  s2 -> s2 [0, 65535] { R6744 += 1, R6698 += 1, R6665 += 1, R6666 += 1 };
  s2 -> s6 [0, 65535] { R6744 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1, R6650 += 1, R5989 += 1 };
  s3 -> s1 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1, R6649 += 1, R6650 += 1 };
  s3 -> s2 [0, 65535] { R6744 += 1, R6698 += 1, R6665 += 1, R6666 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R6744 += 1, R6697 += 1, R6698 += 1 };
  s3 -> s4 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1, R6650 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1 };
  s4 -> s6 [0, 65535] { R6744 += 1 };
  s4 -> s7 [0, 65535] { R6744 += 1, R6698 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1, R6650 += 1, R5989 += 1 };
  s5 -> s5 [0, 65535] { R6744 += 1, R6698 += 1, R6666 += 1 };
  s5 -> s6 [0, 65535] { R6744 += 1 };
  s5 -> s7 [0, 65535] { R6744 += 1, R6698 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6744 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R6744 += 1 };
  s7 -> s7 [0, 65535] { R6744 += 1, R6698 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6746 += 1, R6700 += 1, R6668 += 1, R6651 += 1, R6652 += 1 };
  s0 -> s0 [0, 65535] { R6745 += 1, R6746 += 1 };
  s0 -> s2 [0, 65535] { R6746 += 1, R6700 += 1, R6667 += 1, R6668 += 1 };
  s0 -> s3 [0, 65535] { R6746 += 1, R6699 += 1, R6700 += 1 };
  s0 -> s4 [108, 108] { R6746 += 1, R6700 += 1, R6668 += 1, R6652 += 1 };
  s1 -> s1 [0, 65535] { R6746 += 1, R6700 += 1, R6668 += 1, R6651 += 1, R6652 += 1 };
  s1 -> s4 [108, 108] { R6746 += 1, R6700 += 1, R6668 += 1, R6652 += 1 };
  s2 -> s1 [0, 65535] { R6746 += 1, R6700 += 1, R6668 += 1, R6651 += 1, R6652 += 1 };
  s2 -> s2 [0, 65535] { R6746 += 1, R6700 += 1, R6667 += 1, R6668 += 1 };
  s2 -> s4 [108, 108] { R6746 += 1, R6700 += 1, R6668 += 1, R6652 += 1 };
  s3 -> s1 [0, 65535] { R6746 += 1, R6700 += 1, R6668 += 1, R6651 += 1, R6652 += 1 };
  s3 -> s2 [0, 65535] { R6746 += 1, R6700 += 1, R6667 += 1, R6668 += 1 };
  s3 -> s3 [0, 65535] { R6746 += 1, R6699 += 1, R6700 += 1 };
  s3 -> s4 [108, 108] { R6746 += 1, R6700 += 1, R6668 += 1, R6652 += 1 };
  s4 -> s5 [111, 111] { R6746 += 1, R6700 += 1, R6668 += 1, R6652 += 1 };
  s5 -> s6 [99, 99] { R6746 += 1, R6700 += 1, R6668 += 1, R6652 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R6746 += 1 };
  s6 -> s9 [0, 65535] { R6746 += 1, R6700 += 1 };
  s6 -> s6 [0, 65535] { R6746 += 1, R6700 += 1, R6668 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R6746 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R6746 += 1 };
  s9 -> s9 [0, 65535] { R6746 += 1, R6700 += 1 };
  accepting s6, s7, s8, s9;
};
};
constraint R1 = R6646 && R2 = R6668 && R3 = R6006 && R4 = R6746 && R15 = 0 && R16 = R6700 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R6700 = 1 && R6000 = R6006 && R6001 - R6700 = 1 && R6002 = R6006 && R6003 - R6700 = 1 && R6004 = R6006 && R6005 - R6700 = 1 && R6645 = 0 && R6651 = 0 && R6652 = 0 && R6653 = 0 && R6654 = R6668 && R6655 = 0 && R6656 = R6668 && R6657 = 0 && R6658 = R6668 && R6659 = 0 && R6660 = R6668 && R6661 = 0 && R6662 = R6668 && R6663 = 0 && R6664 = R6668 && R6665 = 0 && R6666 = R6668 && R6667 = 0 && R6669 = 0 && R6670 = R6700 && R6671 = 0 && R6672 = R6700 && R6673 = 0 && R6674 = R6700 && R6675 = 0 && R6676 = R6700 && R6677 = 0 && R6678 = R6700 && R6679 = 0 && R6680 = R6700 && R6681 = 0 && R6682 = R6700 && R6683 = 0 && R6684 = R6700 && R6685 = 0 && R6686 = R6700 && R6687 = 0 && R6688 = R6700 && R6689 = 0 && R6690 = R6700 && R6691 = 0 && R6692 = R6700 && R6693 = 0 && R6694 = R6700 && R6695 = 0 && R6696 = R6700 && R6697 = 0 && R6698 = R6700 && R6699 = 0 && R6701 = 10 && R6702 = R6746 && R6703 = 10 && R6704 = R6746 && R6705 = 10 && R6706 = R6746 && R6707 = 10 && R6708 = R6746 && R6709 = 10 && R6710 = R6746 && R6711 = 10 && R6712 = R6746 && R6713 = 10 && R6714 = R6746 && R6715 = 10 && R6716 = R6746 && R6717 = 10 && R6718 = R6746 && R6719 = 10 && R6720 = R6746 && R6721 = 10 && R6722 = R6746 && R6723 = 10 && R6724 = R6746 && R6725 = 10 && R6726 = R6746 && R6727 = 10 && R6728 = R6746 && R6729 = 10 && R6730 = R6746 && R6731 = 10 && R6732 = R6746 && R6733 = 10 && R6734 = R6746 && R6735 = 10 && R6736 = R6746 && R6737 = 10 && R6738 = R6746 && R6739 = 10 && R6740 = R6746 && R6741 = 10 && R6742 = R6746 && R6743 = 10 && R6744 = R6746 && R6745 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R6700 < R6006 && -1 < R6646 && 0 < R6668 && -1 < R6700 && 9 < R6746 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R6641 != 0 || R6642 = R6646 || (R5988 = 0 && R6646 = 0)) && (R6643 != 0 || R6644 = R6646 || (R5988 = 0 && R6646 = 0)) && (R5989 = 0 || (R6649 = 0 && R6650 = 0)) && (R5990 = 0 || (R6647 = 0 && R6648 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R6641 = 0 || (R5988 = 0 && R6646 = 0)) && (R6643 = 0 || (R5988 = 0 && R6646 = 0));
// End of Parikh automata intersection problem
