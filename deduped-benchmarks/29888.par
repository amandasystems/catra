// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10863, R10864, R10865, R10866, R10867, R10868, R10869, R10870, R11, R11193, R11194, R11195, R11196, R11197, R11198, R11199, R11200, R11201, R11202, R11203, R11204, R11205, R11206, R11207, R11208, R11209, R11210, R11211, R11212, R11213, R11214, R11215, R11216, R11217, R11218, R11219, R11220, R11221, R11222, R11223, R11224, R11225, R11226, R11227, R11228, R11229, R11230, R11231, R11232, R11233, R11234, R11235, R11236, R11237, R11238, R11239, R11240, R11241, R11242, R11243, R11244, R11245, R11246, R11247, R11248, R11249, R11250, R11251, R11252, R11253, R11254, R11255, R11256, R11257, R11258, R11259, R11260, R11261, R11262, R11263, R11264, R11265, R11266, R11267, R11268, R11269, R11270, R11271, R11272, R11273, R11274, R11275, R11276, R11277, R11278, R11279, R11280, R11281, R11282, R11283, R11284, R11285, R11286, R11287, R11288, R11289, R11290, R11291, R11292, R11293, R11294, R11295, R11296, R11297, R11298, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R11254 += 1 };
  s0 -> s0 [0, 65535] { R11253 += 1, R11254 += 1 };
  s0 -> s2 [46, 46] { R11254 += 1 };
  s0 -> s3 [47, 47] { R11254 += 1 };
  s0 -> s1 [48, 65535] { R11254 += 1 };
  s1 -> s1 [0, 45] { R11254 += 1 };
  s1 -> s2 [46, 46] { R11254 += 1 };
  s1 -> s3 [47, 47] { R11254 += 1 };
  s1 -> s1 [48, 65535] { R11254 += 1 };
  s2 -> s1 [0, 45] { R11254 += 1 };
  s2 -> s2 [46, 46] { R11254 += 1 };
  s2 -> s3 [47, 47] { R11254 += 1 };
  s2 -> s1 [48, 114] { R11254 += 1 };
  s2 -> s8 [115, 115] { R11254 += 1 };
  s2 -> s1 [116, 65535] { R11254 += 1 };
  s3 -> s3 [0, 45] { R11254 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R11254 += 1 };
  s3 -> s3 [47, 65535] { R11254 += 1 };
  s4 -> s3 [0, 45] { R11254 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R11254 += 1 };
  s4 -> s3 [47, 114] { R11254 += 1 };
  s4 -> s5 [115, 115] { R11254 += 1 };
  s4 -> s3 [116, 65535] { R11254 += 1 };
  s5 -> s3 [0, 45] { R11254 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R11254 += 1 };
  s5 -> s3 [47, 110] { R11254 += 1 };
  s5 -> s6 [111, 111] { R11254 += 1 };
  s5 -> s3 [112, 65535] { R11254 += 1 };
  s6 -> s3 [0, 45] { R11254 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R11254 += 1 };
  s6 -> s3 [47, 98] { R11254 += 1 };
  s6 -> s7 [99, 99] { R11254 += 1 };
  s6 -> s3 [100, 65535] { R11254 += 1 };
  s7 -> s3 [0, 45] { R11254 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R11254 += 1 };
  s7 -> s3 [47, 106] { R11254 += 1 };
  s7 -> s3 [108, 65535] { R11254 += 1 };
  s8 -> s1 [0, 45] { R11254 += 1 };
  s8 -> s2 [46, 46] { R11254 += 1 };
  s8 -> s3 [47, 47] { R11254 += 1 };
  s8 -> s1 [48, 110] { R11254 += 1 };
  s8 -> s9 [111, 111] { R11254 += 1 };
  s8 -> s1 [112, 65535] { R11254 += 1 };
  s9 -> s1 [0, 45] { R11254 += 1 };
  s9 -> s2 [46, 46] { R11254 += 1 };
  s9 -> s3 [47, 47] { R11254 += 1 };
  s9 -> s1 [48, 98] { R11254 += 1 };
  s9 -> s10 [99, 99] { R11254 += 1 };
  s9 -> s1 [100, 65535] { R11254 += 1 };
  s10 -> s1 [0, 45] { R11254 += 1 };
  s10 -> s2 [46, 46] { R11254 += 1 };
  s10 -> s3 [47, 47] { R11254 += 1 };
  s10 -> s1 [48, 106] { R11254 += 1 };
  s10 -> s1 [108, 65535] { R11254 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R11256 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R11255 += 1, R11256 += 1 };
  s1 -> s1 [0, 65535] { R11256 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R11258 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R11258 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R11257 += 1, R11258 += 1 };
  s0 -> s3 [47, 47] { R11258 += 1 };
  s0 -> s1 [48, 65535] { R11258 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R11258 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R11258 += 1 };
  s1 -> s1 [48, 65535] { R11258 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R11258 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R11258 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R11258 += 1 };
  s2 -> s1 [48, 65535] { R11258 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R11258 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R11260 += 1, R10864 += 1 };
  s0 -> s2 [0, 65535] { R11260 += 1, R10863 += 1, R10864 += 1 };
  s0 -> s0 [0, 65535] { R11259 += 1, R11260 += 1 };
  s0 -> s1 [38, 42] { R11260 += 1, R10864 += 1 };
  s0 -> s1 [44, 45] { R11260 += 1, R10864 += 1 };
  s0 -> s1 [47, 62] { R11260 += 1, R10864 += 1 };
  s0 -> s1 [64, 65535] { R11260 += 1, R10864 += 1 };
  s1 -> s1 [0, 36] { R11260 += 1, R10864 += 1 };
  s1 -> s1 [0, 65535] { R11260 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R11260 += 1, R10864 += 1 };
  s1 -> s1 [44, 45] { R11260 += 1, R10864 += 1 };
  s1 -> s1 [47, 62] { R11260 += 1, R10864 += 1 };
  s1 -> s1 [64, 65535] { R11260 += 1, R10864 += 1 };
  s2 -> s1 [0, 36] { R11260 += 1, R10864 += 1 };
  s2 -> s2 [0, 65535] { R11260 += 1, R10863 += 1, R10864 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R11260 += 1, R10864 += 1 };
  s2 -> s1 [44, 45] { R11260 += 1, R10864 += 1 };
  s2 -> s1 [47, 62] { R11260 += 1, R10864 += 1 };
  s2 -> s1 [64, 65535] { R11260 += 1, R10864 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R11262 += 1, R10865 += 1, R10866 += 1 };
  s0 -> s2 [0, 65535] { R11262 += 1, R10866 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R11261 += 1, R11262 += 1 };
  s1 -> s1 [0, 65535] { R11262 += 1, R10865 += 1, R10866 += 1 };
  s1 -> s2 [0, 65535] { R11262 += 1, R10866 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11262 += 1 };
  s2 -> s2 [0, 65535] { R11262 += 1, R10866 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11262 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R11264 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R11264 += 1, R10867 += 1, R10868 += 1 };
  s0 -> s0 [0, 65535] { R11263 += 1, R11264 += 1 };
  s0 -> s4 [63, 63] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R11264 += 1 };
  s1 -> s1 [0, 65535] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R11264 += 1, R10868 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R11264 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R11264 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R11264 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R11264 += 1, R10867 += 1, R10868 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R11264 += 1, R10868 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11264 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11264 += 1 };
  s7 -> s7 [0, 65535] { R11264 += 1, R10868 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11266 += 1, R10869 += 1, R10870 += 1 };
  s0 -> s2 [0, 65535] { R11266 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R11265 += 1, R11266 += 1 };
  s0 -> s3 [0, 65535] { R11266 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R11266 += 1, R10869 += 1, R10870 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R11266 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R11266 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535] { R11266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11266 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R11266 += 1, R10870 += 1 };
  s3 -> s4 [0, 65535] { R11266 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R11266 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R11266 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535] { R11266 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11266 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11266 += 1, R10870 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R11268 += 1, R11222 += 1 };
  s0 -> s2 [0, 65535] { R11268 += 1, R11221 += 1, R11222 += 1 };
  s0 -> s0 [0, 65535] { R11267 += 1, R11268 += 1 };
  s0 -> s1 [45, 63] { R11268 += 1, R11222 += 1 };
  s0 -> s3 [87, 87] { R11268 += 1, R11222 += 1 };
  s0 -> s1 [88, 65535] { R11268 += 1, R11222 += 1 };
  s1 -> s1 [0, 43] { R11268 += 1, R11222 += 1 };
  s1 -> s1 [45, 63] { R11268 += 1, R11222 += 1 };
  s1 -> s3 [87, 87] { R11268 += 1, R11222 += 1 };
  s1 -> s1 [88, 65535] { R11268 += 1, R11222 += 1 };
  s2 -> s1 [0, 43] { R11268 += 1, R11222 += 1 };
  s2 -> s2 [0, 65535] { R11268 += 1, R11221 += 1, R11222 += 1 };
  s2 -> s1 [45, 63] { R11268 += 1, R11222 += 1 };
  s2 -> s3 [87, 87] { R11268 += 1, R11222 += 1 };
  s2 -> s1 [88, 65535] { R11268 += 1, R11222 += 1 };
  s3 -> s3 [0, 43] { R11268 += 1, R11222 += 1 };
  s3 -> s3 [0, 65535] { R11268 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R11268 += 1, R11222 += 1 };
  s3 -> s3 [87, 65535] { R11268 += 1, R11222 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R11270 += 1, R11224 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R11270 += 1, R11223 += 1, R11224 += 1 };
  s0 -> s0 [0, 65535] { R11269 += 1, R11270 += 1 };
  s1 -> s4 [0, 65535] { R11270 += 1 };
  s1 -> s1 [0, 65535] { R11270 += 1, R11224 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11270 += 1, R11224 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11270 += 1, R11223 += 1, R11224 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11270 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R11272 += 1, R11226 += 1 };
  s0 -> s2 [0, 65535] { R11272 += 1, R11226 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R11272 += 1, R11225 += 1, R11226 += 1 };
  s0 -> s0 [0, 65535] { R11271 += 1, R11272 += 1 };
  s0 -> s4 [58, 58] { R11272 += 1, R11226 += 1 };
  s0 -> s1 [59, 65535] { R11272 += 1, R11226 += 1 };
  s1 -> s1 [0, 57] { R11272 += 1, R11226 += 1 };
  s1 -> s1 [0, 65535] { R11272 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R11272 += 1, R11226 += 1 };
  s1 -> s1 [59, 65535] { R11272 += 1, R11226 += 1 };
  s2 -> s1 [0, 57] { R11272 += 1, R11226 += 1 };
  s2 -> s2 [0, 65535] { R11272 += 1, R11226 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R11272 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R11272 += 1, R11226 += 1 };
  s2 -> s1 [59, 65535] { R11272 += 1, R11226 += 1 };
  s3 -> s1 [0, 57] { R11272 += 1, R11226 += 1 };
  s3 -> s2 [0, 65535] { R11272 += 1, R11226 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11272 += 1, R11225 += 1, R11226 += 1 };
  s3 -> s4 [58, 58] { R11272 += 1, R11226 += 1 };
  s3 -> s1 [59, 65535] { R11272 += 1, R11226 += 1 };
  s4 -> s4 [0, 65535] { R11272 += 1, R11226 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11272 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R11274 += 1, R11228 += 1 };
  s0 -> s2 [0, 65535] { R11274 += 1, R11227 += 1, R11228 += 1 };
  s0 -> s0 [0, 65535] { R11273 += 1, R11274 += 1 };
  s0 -> s3 [0, 65535] { R11274 += 1, R11228 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R11274 += 1, R11228 += 1 };
  s0 -> s1 [88, 65535] { R11274 += 1, R11228 += 1 };
  s1 -> s1 [0, 86] { R11274 += 1, R11228 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11274 += 1 };
  s1 -> s4 [87, 87] { R11274 += 1, R11228 += 1 };
  s1 -> s1 [88, 65535] { R11274 += 1, R11228 += 1 };
  s2 -> s1 [0, 86] { R11274 += 1, R11228 += 1 };
  s2 -> s2 [0, 65535] { R11274 += 1, R11227 += 1, R11228 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R11274 += 1, R11228 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R11274 += 1, R11228 += 1 };
  s2 -> s1 [88, 65535] { R11274 += 1, R11228 += 1 };
  s3 -> s1 [0, 86] { R11274 += 1, R11228 += 1 };
  s3 -> s5 [0, 65535] { R11274 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11274 += 1, R11228 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R11274 += 1, R11228 += 1 };
  s3 -> s1 [88, 65535] { R11274 += 1, R11228 += 1 };
  s4 -> s4 [0, 65535] { R11274 += 1, R11228 += 1 };
  s5 -> s5 [0, 65535] { R11274 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R11276 += 1, R11229 += 1, R11230 += 1 };
  s0 -> s0 [0, 65535] { R11275 += 1, R11276 += 1 };
  s0 -> s3 [0, 65535] { R11276 += 1, R11230 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11276 += 1 };
  s1 -> s7 [0, 65535] { R11276 += 1, R11230 += 1 };
  s2 -> s1 [0, 90] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R11276 += 1, R11229 += 1, R11230 += 1 };
  s2 -> s3 [0, 65535] { R11276 += 1, R11230 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R11276 += 1, R11230 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11276 += 1 };
  s3 -> s4 [91, 91] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R11276 += 1, R11230 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11276 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11276 += 1 };
  s7 -> s7 [0, 65535] { R11276 += 1, R11230 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R11277 += 1, R11278 += 1 };
  s0 -> s1 [0, 65535] { R11278 += 1, R11232 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R11278 += 1, R11231 += 1, R11232 += 1 };
  s0 -> s3 [0, 65535] { R11278 += 1, R11232 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R11278 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11278 += 1, R11232 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s3 [0, 65535] { R11278 += 1, R11232 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R11278 += 1, R11232 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s2 [0, 65535] { R11278 += 1, R11231 += 1, R11232 += 1 };
  s2 -> s3 [0, 65535] { R11278 += 1, R11232 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R11278 += 1, R11232 += 1 };
  s3 -> s5 [0, 65535] { R11278 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11278 += 1, R11232 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R11278 += 1, R11232 += 1 };
  s4 -> s5 [0, 65535] { R11278 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11278 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R11280 += 1, R11234 += 1, R11199 += 1, R11200 += 1 };
  s0 -> s2 [0, 65535] { R11280 += 1, R11233 += 1, R11234 += 1 };
  s0 -> s0 [0, 65535] { R11279 += 1, R11280 += 1 };
  s0 -> s3 [0, 65535] { R11280 += 1, R11234 += 1, R11200 += 1, R5990 += 1 };
  s1 -> s1 [0, 65535] { R11280 += 1, R11234 += 1, R11199 += 1, R11200 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11280 += 1 };
  s1 -> s3 [0, 65535] { R11280 += 1, R11234 += 1, R11200 += 1, R5990 += 1 };
  s2 -> s1 [0, 65535] { R11280 += 1, R11234 += 1, R11199 += 1, R11200 += 1 };
  s2 -> s2 [0, 65535] { R11280 += 1, R11233 += 1, R11234 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11280 += 1, R11234 += 1, R11200 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11280 += 1 };
  s3 -> s6 [0, 65535] { R11280 += 1, R11234 += 1 };
  s3 -> s3 [0, 65535] { R11280 += 1, R11234 += 1, R11200 += 1, R5990 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11280 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11280 += 1 };
  s6 -> s6 [0, 65535] { R11280 += 1, R11234 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R11282 += 1, R11236 += 1, R11201 += 1, R11202 += 1 };
  s0 -> s0 [0, 65535] { R11281 += 1, R11282 += 1 };
  s0 -> s2 [0, 65535] { R11282 += 1, R11235 += 1, R11236 += 1 };
  s0 -> s3 [108, 108] { R11282 += 1, R11236 += 1, R11202 += 1 };
  s1 -> s1 [0, 65535] { R11282 += 1, R11236 += 1, R11201 += 1, R11202 += 1 };
  s1 -> s3 [108, 108] { R11282 += 1, R11236 += 1, R11202 += 1 };
  s2 -> s1 [0, 65535] { R11282 += 1, R11236 += 1, R11201 += 1, R11202 += 1 };
  s2 -> s2 [0, 65535] { R11282 += 1, R11235 += 1, R11236 += 1 };
  s2 -> s3 [108, 108] { R11282 += 1, R11236 += 1, R11202 += 1 };
  s3 -> s4 [111, 111] { R11282 += 1, R11236 += 1, R11202 += 1 };
  s4 -> s5 [99, 99] { R11282 += 1, R11236 += 1, R11202 += 1 };
  s5 -> s6 [97, 97] { R11282 += 1, R11236 += 1, R11202 += 1 };
  s6 -> s7 [108, 108] { R11282 += 1, R11236 += 1, R11202 += 1 };
  s7 -> s8 [104, 104] { R11282 += 1, R11236 += 1, R11202 += 1 };
  s8 -> s8 [0, 65535] { R11282 += 1, R11236 += 1 };
  s8 -> s9 [0, 65535] { R11282 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R11282 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s8, s9, s10;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s0 -> s2 [0, 65535] { R11284 += 1, R11238 += 1, R11205 += 1, R11206 += 1 };
  s0 -> s3 [0, 65535] { R11284 += 1, R11237 += 1, R11238 += 1 };
  s0 -> s0 [0, 65535] { R11283 += 1, R11284 += 1 };
  s0 -> s4 [87, 87] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s0 -> s1 [88, 65535] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s1 -> s1 [0, 86] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s1 -> s4 [87, 87] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s1 -> s1 [88, 65535] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s2 -> s1 [0, 86] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s2 -> s2 [0, 65535] { R11284 += 1, R11238 += 1, R11205 += 1, R11206 += 1 };
  s2 -> s4 [87, 87] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s2 -> s1 [88, 65535] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s3 -> s1 [0, 86] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s3 -> s2 [0, 65535] { R11284 += 1, R11238 += 1, R11205 += 1, R11206 += 1 };
  s3 -> s3 [0, 65535] { R11284 += 1, R11237 += 1, R11238 += 1 };
  s3 -> s4 [87, 87] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s3 -> s1 [88, 65535] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s4 -> s5 [0, 65535] { R11284 += 1, R11238 += 1 };
  s4 -> s4 [0, 65535] { R11284 += 1, R11238 += 1, R11206 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11284 += 1 };
  s5 -> s5 [0, 65535] { R11284 += 1, R11238 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R11284 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11284 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R11285 += 1, R11286 += 1 };
  s0 -> s1 [0, 65535] { R11286 += 1, R11239 += 1, R11240 += 1 };
  s0 -> s2 [0, 65535] { R11286 += 1, R11240 += 1, R11208 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R11286 += 1, R11240 += 1, R11207 += 1, R11208 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11286 += 1, R11239 += 1, R11240 += 1 };
  s1 -> s2 [0, 65535] { R11286 += 1, R11240 += 1, R11208 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R11286 += 1, R11240 += 1, R11207 += 1, R11208 += 1 };
  s2 -> s6 [0, 65535] { R11286 += 1, R11240 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11286 += 1 };
  s2 -> s2 [0, 65535] { R11286 += 1, R11240 += 1, R11208 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11286 += 1 };
  s3 -> s2 [0, 65535] { R11286 += 1, R11240 += 1, R11208 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R11286 += 1, R11240 += 1, R11207 += 1, R11208 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11286 += 1 };
  s6 -> s6 [0, 65535] { R11286 += 1, R11240 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11286 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s0 -> s2 [0, 65535] { R11288 += 1, R11242 += 1, R11210 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R11287 += 1, R11288 += 1 };
  s0 -> s3 [0, 65535] { R11288 += 1, R11241 += 1, R11242 += 1 };
  s0 -> s4 [0, 65535] { R11288 += 1, R11242 += 1, R11209 += 1, R11210 += 1 };
  s0 -> s5 [87, 87] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s0 -> s1 [88, 65535] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s1 -> s1 [0, 86] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R11288 += 1 };
  s1 -> s1 [0, 65535] { R11288 += 1, R11242 += 1 };
  s1 -> s5 [87, 87] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s1 -> s1 [88, 65535] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s2 -> s1 [0, 86] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s2 -> s2 [0, 65535] { R11288 += 1, R11242 += 1, R11210 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R11288 += 1, R11242 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R11288 += 1 };
  s2 -> s5 [87, 87] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s2 -> s1 [88, 65535] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s3 -> s1 [0, 86] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s3 -> s2 [0, 65535] { R11288 += 1, R11242 += 1, R11210 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11288 += 1, R11241 += 1, R11242 += 1 };
  s3 -> s4 [0, 65535] { R11288 += 1, R11242 += 1, R11209 += 1, R11210 += 1 };
  s3 -> s5 [87, 87] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s3 -> s1 [88, 65535] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s4 -> s1 [0, 86] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s4 -> s2 [0, 65535] { R11288 += 1, R11242 += 1, R11210 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11288 += 1 };
  s4 -> s4 [0, 65535] { R11288 += 1, R11242 += 1, R11209 += 1, R11210 += 1 };
  s4 -> s5 [87, 87] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s4 -> s1 [88, 65535] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s5 -> s5 [0, 65535] { R11288 += 1, R11242 += 1, R11210 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11288 += 1 };
  s8 -> s8 [0, 65535] { R11288 += 1, R11242 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R11288 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s0 -> s2 [0, 65535] { R11290 += 1, R11244 += 1, R11212 += 1, R11193 += 1, R11194 += 1 };
  s0 -> s0 [0, 65535] { R11289 += 1, R11290 += 1 };
  s0 -> s3 [0, 65535] { R11290 += 1, R11244 += 1, R11211 += 1, R11212 += 1 };
  s0 -> s4 [0, 65535] { R11290 += 1, R11243 += 1, R11244 += 1 };
  s0 -> s1 [88, 65535] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s1 -> s1 [0, 86] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s1 -> s1 [0, 65535] { R11290 += 1, R11244 += 1, R11212 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11290 += 1 };
  s1 -> s7 [0, 65535] { R11290 += 1, R11244 += 1 };
  s1 -> s1 [88, 65535] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s2 -> s1 [0, 86] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s2 -> s2 [0, 65535] { R11290 += 1, R11244 += 1, R11212 += 1, R11193 += 1, R11194 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11290 += 1 };
  s2 -> s7 [0, 65535] { R11290 += 1, R11244 += 1 };
  s2 -> s1 [88, 65535] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s3 -> s1 [0, 86] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s3 -> s2 [0, 65535] { R11290 += 1, R11244 += 1, R11212 += 1, R11193 += 1, R11194 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11290 += 1 };
  s3 -> s3 [0, 65535] { R11290 += 1, R11244 += 1, R11211 += 1, R11212 += 1 };
  s3 -> s1 [88, 65535] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s4 -> s1 [0, 86] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s4 -> s2 [0, 65535] { R11290 += 1, R11244 += 1, R11212 += 1, R11193 += 1, R11194 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R11290 += 1, R11244 += 1, R11211 += 1, R11212 += 1 };
  s4 -> s4 [0, 65535] { R11290 += 1, R11243 += 1, R11244 += 1 };
  s4 -> s1 [88, 65535] { R11290 += 1, R11244 += 1, R11212 += 1, R11194 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11290 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11290 += 1 };
  s7 -> s7 [0, 65535] { R11290 += 1, R11244 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11292 += 1, R11245 += 1, R11246 += 1 };
  s0 -> s2 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1, R11196 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1, R11195 += 1, R11196 += 1 };
  s0 -> s0 [0, 65535] { R11291 += 1, R11292 += 1 };
  s0 -> s4 [0, 65535] { R11292 += 1, R11246 += 1, R11213 += 1, R11214 += 1 };
  s1 -> s1 [0, 65535] { R11292 += 1, R11245 += 1, R11246 += 1 };
  s1 -> s2 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1, R11196 += 1, R5988 += 1 };
  s1 -> s3 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1, R11195 += 1, R11196 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R11292 += 1, R11246 += 1, R11213 += 1, R11214 += 1 };
  s2 -> s2 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1, R11196 += 1, R5988 += 1 };
  s2 -> s5 [0, 65535] { R11292 += 1 };
  s2 -> s8 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R11292 += 1, R11246 += 1 };
  s3 -> s2 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1, R11196 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1, R11195 += 1, R11196 += 1 };
  s3 -> s5 [0, 65535] { R11292 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R11292 += 1, R11246 += 1 };
  s4 -> s2 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1, R11196 += 1, R5988 += 1 };
  s4 -> s3 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1, R11195 += 1, R11196 += 1 };
  s4 -> s5 [0, 65535] { R11292 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11292 += 1, R11246 += 1, R11213 += 1, R11214 += 1 };
  s5 -> s5 [0, 65535] { R11292 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R11292 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11292 += 1, R11246 += 1 };
  s8 -> s5 [0, 65535] { R11292 += 1 };
  s8 -> s8 [0, 65535] { R11292 += 1, R11246 += 1, R11214 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R11292 += 1, R11246 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R11294 += 1, R11247 += 1, R11248 += 1 };
  s0 -> s0 [0, 65535] { R11293 += 1, R11294 += 1 };
  s0 -> s2 [0, 65535] { R11294 += 1, R11248 += 1, R11215 += 1, R11216 += 1 };
  s0 -> s3 [0, 65535] { R11294 += 1, R11248 += 1, R11216 += 1, R11197 += 1, R11198 += 1 };
  s0 -> s4 [111, 111] { R11294 += 1, R11248 += 1, R11216 += 1, R11198 += 1 };
  s1 -> s1 [0, 65535] { R11294 += 1, R11247 += 1, R11248 += 1 };
  s1 -> s2 [0, 65535] { R11294 += 1, R11248 += 1, R11215 += 1, R11216 += 1 };
  s1 -> s3 [0, 65535] { R11294 += 1, R11248 += 1, R11216 += 1, R11197 += 1, R11198 += 1 };
  s1 -> s4 [111, 111] { R11294 += 1, R11248 += 1, R11216 += 1, R11198 += 1 };
  s2 -> s2 [0, 65535] { R11294 += 1, R11248 += 1, R11215 += 1, R11216 += 1 };
  s2 -> s3 [0, 65535] { R11294 += 1, R11248 += 1, R11216 += 1, R11197 += 1, R11198 += 1 };
  s2 -> s4 [111, 111] { R11294 += 1, R11248 += 1, R11216 += 1, R11198 += 1 };
  s3 -> s3 [0, 65535] { R11294 += 1, R11248 += 1, R11216 += 1, R11197 += 1, R11198 += 1 };
  s3 -> s4 [111, 111] { R11294 += 1, R11248 += 1, R11216 += 1, R11198 += 1 };
  s4 -> s5 [115, 115] { R11294 += 1, R11248 += 1, R11216 += 1, R11198 += 1 };
  s5 -> s6 [116, 116] { R11294 += 1, R11248 += 1, R11216 += 1, R11198 += 1 };
  s6 -> s7 [0, 65535] { R11294 += 1, R11248 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R11294 += 1, R11248 += 1, R11216 += 1 };
  s6 -> s9 [0, 65535] { R11294 += 1 };
  s7 -> s7 [0, 65535] { R11294 += 1, R11248 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R11294 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11294 += 1 };
  accepting s6, s7, s8, s9;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11296 += 1, R11249 += 1, R11250 += 1 };
  s0 -> s2 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1, R11203 += 1, R11204 += 1 };
  s0 -> s3 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1, R11204 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R11296 += 1, R11250 += 1, R11217 += 1, R11218 += 1 };
  s0 -> s0 [0, 65535] { R11295 += 1, R11296 += 1 };
  s1 -> s1 [0, 65535] { R11296 += 1, R11249 += 1, R11250 += 1 };
  s1 -> s2 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1, R11203 += 1, R11204 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1, R11204 += 1, R5989 += 1 };
  s1 -> s4 [0, 65535] { R11296 += 1, R11250 += 1, R11217 += 1, R11218 += 1 };
  s2 -> s7 [0, 65535] { R11296 += 1, R11250 += 1 };
  s2 -> s5 [0, 65535] { R11296 += 1 };
  s2 -> s2 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1, R11203 += 1, R11204 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1, R11204 += 1, R5989 += 1 };
  s3 -> s7 [0, 65535] { R11296 += 1, R11250 += 1 };
  s3 -> s8 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1 };
  s3 -> s5 [0, 65535] { R11296 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1, R11204 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535] { R11296 += 1 };
  s4 -> s2 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1, R11203 += 1, R11204 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1, R11204 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R11296 += 1, R11250 += 1, R11217 += 1, R11218 += 1 };
  s5 -> s5 [0, 65535] { R11296 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11296 += 1, R11250 += 1 };
  s7 -> s5 [0, 65535] { R11296 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R11296 += 1, R11250 += 1 };
  s8 -> s8 [0, 65535] { R11296 += 1, R11250 += 1, R11218 += 1 };
  s8 -> s5 [0, 65535] { R11296 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R11298 += 1, R11252 += 1, R11219 += 1, R11220 += 1 };
  s0 -> s0 [0, 65535] { R11297 += 1, R11298 += 1 };
  s0 -> s2 [0, 65535] { R11298 += 1, R11252 += 1, R11220 += 1 };
  s0 -> s3 [0, 65535] { R11298 += 1, R11251 += 1, R11252 += 1 };
  s1 -> s5 [0, 65535] { R11298 += 1 };
  s1 -> s1 [0, 65535] { R11298 += 1, R11252 += 1, R11219 += 1, R11220 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11298 += 1, R11252 += 1, R11220 += 1 };
  s2 -> s5 [0, 65535] { R11298 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11298 += 1, R11252 += 1, R11220 += 1 };
  s2 -> s6 [0, 65535] { R11298 += 1, R11252 += 1 };
  s3 -> s1 [0, 65535] { R11298 += 1, R11252 += 1, R11219 += 1, R11220 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11298 += 1, R11252 += 1, R11220 += 1 };
  s3 -> s3 [0, 65535] { R11298 += 1, R11251 += 1, R11252 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11298 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11298 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11298 += 1, R11252 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R11198 && R2 = R11220 && R3 = R10870 && R4 = R11298 && R15 = 0 && R16 = R11252 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R10863 - R11252 = 1 && R10864 = R10870 && R10865 - R11252 = 1 && R10866 = R10870 && R10867 - R11252 = 1 && R10868 = R10870 && R10869 - R11252 = 1 && R11197 = 0 && R11201 = 0 && R11202 = 0 && R11205 = 0 && R11206 = R11220 && R11207 = 0 && R11208 = R11220 && R11209 = 0 && R11210 = R11220 && R11211 = 0 && R11212 = R11220 && R11213 = 0 && R11214 = R11220 && R11215 = 0 && R11216 = R11220 && R11217 = 0 && R11218 = R11220 && R11219 = 0 && R11221 = 0 && R11222 = R11252 && R11223 = 0 && R11224 = R11252 && R11225 = 0 && R11226 = R11252 && R11227 = 0 && R11228 = R11252 && R11229 = 0 && R11230 = R11252 && R11231 = 0 && R11232 = R11252 && R11233 = 0 && R11234 = R11252 && R11235 = 0 && R11236 = R11252 && R11237 = 0 && R11238 = R11252 && R11239 = 0 && R11240 = R11252 && R11241 = 0 && R11242 = R11252 && R11243 = 0 && R11244 = R11252 && R11245 = 0 && R11246 = R11252 && R11247 = 0 && R11248 = R11252 && R11249 = 0 && R11250 = R11252 && R11251 = 0 && R11253 = 10 && R11254 = R11298 && R11255 = 10 && R11256 = R11298 && R11257 = 10 && R11258 = R11298 && R11259 = 10 && R11260 = R11298 && R11261 = 10 && R11262 = R11298 && R11263 = 10 && R11264 = R11298 && R11265 = 10 && R11266 = R11298 && R11267 = 10 && R11268 = R11298 && R11269 = 10 && R11270 = R11298 && R11271 = 10 && R11272 = R11298 && R11273 = 10 && R11274 = R11298 && R11275 = 10 && R11276 = R11298 && R11277 = 10 && R11278 = R11298 && R11279 = 10 && R11280 = R11298 && R11281 = 10 && R11282 = R11298 && R11283 = 10 && R11284 = R11298 && R11285 = 10 && R11286 = R11298 && R11287 = 10 && R11288 = R11298 && R11289 = 10 && R11290 = R11298 && R11291 = 10 && R11292 = R11298 && R11293 = 10 && R11294 = R11298 && R11295 = 10 && R11296 = R11298 && R11297 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R11252 < R10870 && -1 < R11198 && 0 < R11220 && -1 < R11252 && 9 < R11298 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R11193 != 0 || R11194 = R11198 || (R5988 = 0 && R11198 = 0)) && (R11195 != 0 || R11196 = R11198 || (R5988 = 0 && R11198 = 0)) && (R5989 = 0 || (R11203 = 0 && R11204 = 0)) && (R5990 = 0 || (R11199 = 0 && R11200 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R11193 = 0 || (R5988 = 0 && R11198 = 0)) && (R11195 = 0 || (R5988 = 0 && R11198 = 0));
// End of Parikh automata intersection problem
