// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R9561, R9562, R9563, R9564, R9565, R9566, R9567, R9568, R9569, R9570, R9571, R9572, R9573, R9574, R9575, R9576, R9577, R9578, R9579, R9580, R9581, R9582, R9583, R9584, R9585, R9586, R9587, R9588, R9589, R9590, R9591, R9592, R9593, R9594, R9595, R9596, R9597, R9598, R9599, R9600, R9601, R9602, R9603, R9604, R9605, R9606, R9607, R9608, R9609, R9610, R9611, R9612, R9613, R9614, R9615, R9616, R9617, R9618, R9619, R9620, R9621, R9622, R9623, R9624, R9625, R9626, R9627, R9628, R9629, R9630, R9631, R9632, R9633, R9634, R9635, R9636, R9637, R9638, R9639, R9640, R9641, R9642, R9643, R9644, R9645, R9646, R9647, R9648, R9649, R9650, R9651, R9652, R9653, R9654, R9655, R9656, R9657, R9658, R9659, R9660, R9661, R9662, R9663, R9664, R9665, R9666;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R9622 += 1 };
  s0 -> s0 [0, 65535] { R9621 += 1, R9622 += 1 };
  s0 -> s2 [46, 46] { R9622 += 1 };
  s0 -> s3 [47, 47] { R9622 += 1 };
  s0 -> s1 [48, 65535] { R9622 += 1 };
  s1 -> s1 [0, 45] { R9622 += 1 };
  s1 -> s2 [46, 46] { R9622 += 1 };
  s1 -> s3 [47, 47] { R9622 += 1 };
  s1 -> s1 [48, 65535] { R9622 += 1 };
  s2 -> s1 [0, 45] { R9622 += 1 };
  s2 -> s2 [46, 46] { R9622 += 1 };
  s2 -> s3 [47, 47] { R9622 += 1 };
  s2 -> s1 [48, 114] { R9622 += 1 };
  s2 -> s8 [115, 115] { R9622 += 1 };
  s2 -> s1 [116, 65535] { R9622 += 1 };
  s3 -> s3 [0, 45] { R9622 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R9622 += 1 };
  s3 -> s3 [47, 65535] { R9622 += 1 };
  s4 -> s3 [0, 45] { R9622 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R9622 += 1 };
  s4 -> s3 [47, 114] { R9622 += 1 };
  s4 -> s5 [115, 115] { R9622 += 1 };
  s4 -> s3 [116, 65535] { R9622 += 1 };
  s5 -> s3 [0, 45] { R9622 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R9622 += 1 };
  s5 -> s3 [47, 110] { R9622 += 1 };
  s5 -> s6 [111, 111] { R9622 += 1 };
  s5 -> s3 [112, 65535] { R9622 += 1 };
  s6 -> s3 [0, 45] { R9622 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R9622 += 1 };
  s6 -> s3 [47, 98] { R9622 += 1 };
  s6 -> s7 [99, 99] { R9622 += 1 };
  s6 -> s3 [100, 65535] { R9622 += 1 };
  s7 -> s3 [0, 45] { R9622 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R9622 += 1 };
  s7 -> s3 [47, 106] { R9622 += 1 };
  s7 -> s3 [108, 65535] { R9622 += 1 };
  s8 -> s1 [0, 45] { R9622 += 1 };
  s8 -> s2 [46, 46] { R9622 += 1 };
  s8 -> s3 [47, 47] { R9622 += 1 };
  s8 -> s1 [48, 110] { R9622 += 1 };
  s8 -> s9 [111, 111] { R9622 += 1 };
  s8 -> s1 [112, 65535] { R9622 += 1 };
  s9 -> s1 [0, 45] { R9622 += 1 };
  s9 -> s2 [46, 46] { R9622 += 1 };
  s9 -> s3 [47, 47] { R9622 += 1 };
  s9 -> s1 [48, 98] { R9622 += 1 };
  s9 -> s10 [99, 99] { R9622 += 1 };
  s9 -> s1 [100, 65535] { R9622 += 1 };
  s10 -> s1 [0, 45] { R9622 += 1 };
  s10 -> s2 [46, 46] { R9622 += 1 };
  s10 -> s3 [47, 47] { R9622 += 1 };
  s10 -> s1 [48, 106] { R9622 += 1 };
  s10 -> s1 [108, 65535] { R9622 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R9623 += 1, R9624 += 1 };
  s0 -> s1 [0, 65535] { R9624 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9624 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R9626 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R9625 += 1, R9626 += 1 };
  s0 -> s2 [0, 65535] { R9626 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R9626 += 1 };
  s0 -> s1 [48, 65535] { R9626 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R9626 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R9626 += 1 };
  s1 -> s1 [48, 65535] { R9626 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R9626 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R9626 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R9626 += 1 };
  s2 -> s1 [48, 65535] { R9626 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9626 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R9628 += 1, R8908 += 1 };
  s0 -> s0 [0, 65535] { R9627 += 1, R9628 += 1 };
  s0 -> s2 [0, 65535] { R9628 += 1, R8907 += 1, R8908 += 1 };
  s0 -> s1 [38, 42] { R9628 += 1, R8908 += 1 };
  s0 -> s1 [44, 45] { R9628 += 1, R8908 += 1 };
  s0 -> s1 [47, 62] { R9628 += 1, R8908 += 1 };
  s0 -> s1 [64, 65535] { R9628 += 1, R8908 += 1 };
  s1 -> s1 [0, 36] { R9628 += 1, R8908 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9628 += 1 };
  s1 -> s1 [38, 42] { R9628 += 1, R8908 += 1 };
  s1 -> s1 [44, 45] { R9628 += 1, R8908 += 1 };
  s1 -> s1 [47, 62] { R9628 += 1, R8908 += 1 };
  s1 -> s1 [64, 65535] { R9628 += 1, R8908 += 1 };
  s2 -> s1 [0, 36] { R9628 += 1, R8908 += 1 };
  s2 -> s2 [0, 65535] { R9628 += 1, R8907 += 1, R8908 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R9628 += 1, R8908 += 1 };
  s2 -> s1 [44, 45] { R9628 += 1, R8908 += 1 };
  s2 -> s1 [47, 62] { R9628 += 1, R8908 += 1 };
  s2 -> s1 [64, 65535] { R9628 += 1, R8908 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R9629 += 1, R9630 += 1 };
  s0 -> s1 [0, 65535] { R9630 += 1, R8909 += 1, R8910 += 1 };
  s0 -> s2 [0, 65535] { R9630 += 1, R8910 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R9630 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s2 [0, 65535] { R9630 += 1, R8910 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9630 += 1 };
  s2 -> s2 [0, 65535] { R9630 += 1, R8910 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9630 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R9631 += 1, R9632 += 1 };
  s0 -> s2 [0, 65535] { R9632 += 1, R8911 += 1, R8912 += 1 };
  s0 -> s3 [0, 65535] { R9632 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R9632 += 1, R8912 += 1 };
  s1 -> s1 [0, 65535] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535] { R9632 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R9632 += 1, R8911 += 1, R8912 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R9632 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R9632 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9632 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R9632 += 1, R8912 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R9632 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9632 += 1, R8912 += 1 };
  s7 -> s5 [0, 65535] { R9632 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9634 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R9634 += 1, R8913 += 1, R8914 += 1 };
  s0 -> s3 [0, 65535] { R9634 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R9633 += 1, R9634 += 1 };
  s1 -> s1 [0, 65535] { R9634 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9634 += 1 };
  s1 -> s3 [0, 65535] { R9634 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s2 -> s1 [0, 65535] { R9634 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9634 += 1, R8913 += 1, R8914 += 1 };
  s2 -> s3 [0, 65535] { R9634 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9634 += 1 };
  s3 -> s6 [0, 65535] { R9634 += 1, R8914 += 1 };
  s3 -> s3 [0, 65535] { R9634 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9634 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9634 += 1 };
  s6 -> s6 [0, 65535] { R9634 += 1, R8914 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R9636 += 1, R9590 += 1 };
  s0 -> s0 [0, 65535] { R9635 += 1, R9636 += 1 };
  s0 -> s2 [0, 65535] { R9636 += 1, R9589 += 1, R9590 += 1 };
  s0 -> s1 [45, 63] { R9636 += 1, R9590 += 1 };
  s0 -> s3 [87, 87] { R9636 += 1, R9590 += 1 };
  s0 -> s1 [88, 65535] { R9636 += 1, R9590 += 1 };
  s1 -> s1 [0, 43] { R9636 += 1, R9590 += 1 };
  s1 -> s1 [45, 63] { R9636 += 1, R9590 += 1 };
  s1 -> s3 [87, 87] { R9636 += 1, R9590 += 1 };
  s1 -> s1 [88, 65535] { R9636 += 1, R9590 += 1 };
  s2 -> s1 [0, 43] { R9636 += 1, R9590 += 1 };
  s2 -> s2 [0, 65535] { R9636 += 1, R9589 += 1, R9590 += 1 };
  s2 -> s1 [45, 63] { R9636 += 1, R9590 += 1 };
  s2 -> s3 [87, 87] { R9636 += 1, R9590 += 1 };
  s2 -> s1 [88, 65535] { R9636 += 1, R9590 += 1 };
  s3 -> s3 [0, 43] { R9636 += 1, R9590 += 1 };
  s3 -> s3 [0, 65535] { R9636 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R9636 += 1, R9590 += 1 };
  s3 -> s3 [87, 65535] { R9636 += 1, R9590 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R9637 += 1, R9638 += 1 };
  s0 -> s1 [0, 65535] { R9638 += 1, R9591 += 1, R9592 += 1 };
  s0 -> s2 [0, 65535] { R9638 += 1, R9592 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9638 += 1, R9591 += 1, R9592 += 1 };
  s1 -> s2 [0, 65535] { R9638 += 1, R9592 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9638 += 1 };
  s2 -> s2 [0, 65535] { R9638 += 1, R9592 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9638 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R9640 += 1, R9594 += 1 };
  s0 -> s2 [0, 65535] { R9640 += 1, R9593 += 1, R9594 += 1 };
  s0 -> s3 [0, 65535] { R9640 += 1, R9594 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R9639 += 1, R9640 += 1 };
  s0 -> s4 [58, 58] { R9640 += 1, R9594 += 1 };
  s0 -> s1 [59, 65535] { R9640 += 1, R9594 += 1 };
  s1 -> s1 [0, 57] { R9640 += 1, R9594 += 1 };
  s1 -> s1 [0, 65535] { R9640 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R9640 += 1, R9594 += 1 };
  s1 -> s1 [59, 65535] { R9640 += 1, R9594 += 1 };
  s2 -> s1 [0, 57] { R9640 += 1, R9594 += 1 };
  s2 -> s2 [0, 65535] { R9640 += 1, R9593 += 1, R9594 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9640 += 1, R9594 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R9640 += 1, R9594 += 1 };
  s2 -> s1 [59, 65535] { R9640 += 1, R9594 += 1 };
  s3 -> s1 [0, 57] { R9640 += 1, R9594 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9640 += 1 };
  s3 -> s3 [0, 65535] { R9640 += 1, R9594 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R9640 += 1, R9594 += 1 };
  s3 -> s1 [59, 65535] { R9640 += 1, R9594 += 1 };
  s4 -> s4 [0, 65535] { R9640 += 1, R9594 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9640 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R9642 += 1, R9596 += 1 };
  s0 -> s2 [0, 65535] { R9642 += 1, R9595 += 1, R9596 += 1 };
  s0 -> s3 [0, 65535] { R9642 += 1, R9596 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R9641 += 1, R9642 += 1 };
  s0 -> s4 [87, 87] { R9642 += 1, R9596 += 1 };
  s0 -> s1 [88, 65535] { R9642 += 1, R9596 += 1 };
  s1 -> s1 [0, 86] { R9642 += 1, R9596 += 1 };
  s1 -> s1 [0, 65535] { R9642 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [87, 87] { R9642 += 1, R9596 += 1 };
  s1 -> s1 [88, 65535] { R9642 += 1, R9596 += 1 };
  s2 -> s1 [0, 86] { R9642 += 1, R9596 += 1 };
  s2 -> s2 [0, 65535] { R9642 += 1, R9595 += 1, R9596 += 1 };
  s2 -> s3 [0, 65535] { R9642 += 1, R9596 += 1, R11 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [87, 87] { R9642 += 1, R9596 += 1 };
  s2 -> s1 [88, 65535] { R9642 += 1, R9596 += 1 };
  s3 -> s1 [0, 86] { R9642 += 1, R9596 += 1 };
  s3 -> s3 [0, 65535] { R9642 += 1, R9596 += 1, R11 += 1 };
  s3 -> s5 [0, 65535] { R9642 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [87, 87] { R9642 += 1, R9596 += 1 };
  s3 -> s1 [88, 65535] { R9642 += 1, R9596 += 1 };
  s4 -> s4 [0, 65535] { R9642 += 1, R9596 += 1 };
  s5 -> s5 [0, 65535] { R9642 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R9644 += 1, R9597 += 1, R9598 += 1 };
  s0 -> s0 [0, 65535] { R9643 += 1, R9644 += 1 };
  s0 -> s3 [0, 65535] { R9644 += 1, R9598 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535] { R9644 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R9644 += 1, R9598 += 1 };
  s1 -> s1 [0, 65535] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R9644 += 1, R9597 += 1, R9598 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R9644 += 1, R9598 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R9644 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9644 += 1, R9598 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R9644 += 1, R9598 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R9644 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9644 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9644 += 1, R9598 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9646 += 1, R9600 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R9646 += 1, R9600 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R9645 += 1, R9646 += 1 };
  s0 -> s3 [0, 65535] { R9646 += 1, R9599 += 1, R9600 += 1 };
  s1 -> s1 [0, 65535] { R9646 += 1, R9600 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9646 += 1, R9600 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R9646 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9646 += 1, R9600 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R9646 += 1 };
  s2 -> s6 [0, 65535] { R9646 += 1, R9600 += 1 };
  s3 -> s1 [0, 65535] { R9646 += 1, R9600 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9646 += 1, R9600 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R9646 += 1, R9599 += 1, R9600 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9646 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9646 += 1 };
  s6 -> s6 [0, 65535] { R9646 += 1, R9600 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9648 += 1, R9602 += 1, R9567 += 1, R9568 += 1 };
  s0 -> s0 [0, 65535] { R9647 += 1, R9648 += 1 };
  s0 -> s2 [0, 65535] { R9648 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s3 [0, 65535] { R9648 += 1, R9602 += 1, R9568 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9648 += 1, R9602 += 1, R9567 += 1, R9568 += 1 };
  s1 -> s3 [0, 65535] { R9648 += 1, R9602 += 1, R9568 += 1, R5990 += 1 };
  s1 -> s5 [0, 65535] { R9648 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9648 += 1, R9602 += 1, R9567 += 1, R9568 += 1 };
  s2 -> s2 [0, 65535] { R9648 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s3 [0, 65535] { R9648 += 1, R9602 += 1, R9568 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9648 += 1, R9602 += 1, R9568 += 1, R5990 += 1 };
  s3 -> s5 [0, 65535] { R9648 += 1 };
  s3 -> s6 [0, 65535] { R9648 += 1, R9602 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9648 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9648 += 1 };
  s6 -> s6 [0, 65535] { R9648 += 1, R9602 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R9649 += 1, R9650 += 1 };
  s0 -> s1 [0, 65535] { R9650 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s2 [0, 65535] { R9650 += 1, R9604 += 1, R9569 += 1, R9570 += 1 };
  s0 -> s3 [108, 108] { R9650 += 1, R9604 += 1, R9570 += 1 };
  s1 -> s1 [0, 65535] { R9650 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s2 [0, 65535] { R9650 += 1, R9604 += 1, R9569 += 1, R9570 += 1 };
  s1 -> s3 [108, 108] { R9650 += 1, R9604 += 1, R9570 += 1 };
  s2 -> s2 [0, 65535] { R9650 += 1, R9604 += 1, R9569 += 1, R9570 += 1 };
  s2 -> s3 [108, 108] { R9650 += 1, R9604 += 1, R9570 += 1 };
  s3 -> s4 [111, 111] { R9650 += 1, R9604 += 1, R9570 += 1 };
  s4 -> s5 [99, 99] { R9650 += 1, R9604 += 1, R9570 += 1 };
  s5 -> s6 [0, 65535] { R9650 += 1 };
  s5 -> s5 [0, 65535] { R9650 += 1, R9604 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9650 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s5, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s0 -> s2 [0, 65535] { R9652 += 1, R9606 += 1, R9573 += 1, R9574 += 1 };
  s0 -> s0 [0, 65535] { R9651 += 1, R9652 += 1 };
  s0 -> s3 [0, 65535] { R9652 += 1, R9605 += 1, R9606 += 1 };
  s0 -> s4 [87, 87] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s0 -> s1 [88, 65535] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s1 -> s1 [0, 86] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s1 -> s4 [87, 87] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s1 -> s1 [88, 65535] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s2 -> s1 [0, 86] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s2 -> s2 [0, 65535] { R9652 += 1, R9606 += 1, R9573 += 1, R9574 += 1 };
  s2 -> s4 [87, 87] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s2 -> s1 [88, 65535] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s3 -> s1 [0, 86] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s3 -> s2 [0, 65535] { R9652 += 1, R9606 += 1, R9573 += 1, R9574 += 1 };
  s3 -> s3 [0, 65535] { R9652 += 1, R9605 += 1, R9606 += 1 };
  s3 -> s4 [87, 87] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s3 -> s1 [88, 65535] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s4 -> s5 [0, 65535] { R9652 += 1 };
  s4 -> s4 [0, 65535] { R9652 += 1, R9606 += 1, R9574 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9652 += 1, R9606 += 1 };
  s5 -> s5 [0, 65535] { R9652 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9652 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9652 += 1, R9606 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9654 += 1, R9607 += 1, R9608 += 1 };
  s0 -> s2 [0, 65535] { R9654 += 1, R9608 += 1, R9575 += 1, R9576 += 1 };
  s0 -> s0 [0, 65535] { R9653 += 1, R9654 += 1 };
  s0 -> s3 [0, 65535] { R9654 += 1, R9608 += 1, R9576 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R9654 += 1, R9607 += 1, R9608 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R9654 += 1, R9608 += 1, R9575 += 1, R9576 += 1 };
  s1 -> s3 [0, 65535] { R9654 += 1, R9608 += 1, R9576 += 1, R1 += 1 };
  s2 -> s4 [0, 65535] { R9654 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9654 += 1, R9608 += 1, R9575 += 1, R9576 += 1 };
  s2 -> s3 [0, 65535] { R9654 += 1, R9608 += 1, R9576 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R9654 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9654 += 1, R9608 += 1, R9576 += 1, R1 += 1 };
  s3 -> s6 [0, 65535] { R9654 += 1, R9608 += 1 };
  s4 -> s4 [0, 65535] { R9654 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R9654 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9654 += 1, R9608 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s0 -> s2 [0, 65535] { R9656 += 1, R9610 += 1, R9577 += 1, R9578 += 1 };
  s0 -> s3 [0, 65535] { R9656 += 1, R9610 += 1, R9578 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R9656 += 1, R9609 += 1, R9610 += 1 };
  s0 -> s0 [0, 65535] { R9655 += 1, R9656 += 1 };
  s0 -> s5 [87, 87] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s0 -> s1 [88, 65535] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s1 -> s1 [0, 86] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s1 -> s7 [0, 65535] { R9656 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9656 += 1, R9610 += 1 };
  s1 -> s5 [87, 87] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s1 -> s1 [88, 65535] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s2 -> s1 [0, 86] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s2 -> s2 [0, 65535] { R9656 += 1, R9610 += 1, R9577 += 1, R9578 += 1 };
  s2 -> s7 [0, 65535] { R9656 += 1 };
  s2 -> s3 [0, 65535] { R9656 += 1, R9610 += 1, R9578 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [87, 87] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s2 -> s1 [88, 65535] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s3 -> s1 [0, 86] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s3 -> s7 [0, 65535] { R9656 += 1 };
  s3 -> s3 [0, 65535] { R9656 += 1, R9610 += 1, R9578 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R9656 += 1, R9610 += 1 };
  s3 -> s5 [87, 87] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s3 -> s1 [88, 65535] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s4 -> s1 [0, 86] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s4 -> s2 [0, 65535] { R9656 += 1, R9610 += 1, R9577 += 1, R9578 += 1 };
  s4 -> s3 [0, 65535] { R9656 += 1, R9610 += 1, R9578 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9656 += 1, R9609 += 1, R9610 += 1 };
  s4 -> s5 [87, 87] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s4 -> s1 [88, 65535] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s5 -> s5 [0, 65535] { R9656 += 1, R9610 += 1, R9578 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9656 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9656 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9656 += 1, R9610 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s0 -> s2 [0, 65535] { R9658 += 1, R9611 += 1, R9612 += 1 };
  s0 -> s0 [0, 65535] { R9657 += 1, R9658 += 1 };
  s0 -> s3 [0, 65535] { R9658 += 1, R9612 += 1, R9579 += 1, R9580 += 1 };
  s0 -> s4 [0, 65535] { R9658 += 1, R9612 += 1, R9580 += 1, R9561 += 1, R9562 += 1 };
  s0 -> s1 [88, 65535] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s1 -> s1 [0, 86] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s1 -> s5 [0, 65535] { R9658 += 1 };
  s1 -> s1 [0, 65535] { R9658 += 1, R9612 += 1, R9580 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R9658 += 1, R9612 += 1 };
  s1 -> s1 [88, 65535] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s2 -> s1 [0, 86] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s2 -> s2 [0, 65535] { R9658 += 1, R9611 += 1, R9612 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R9658 += 1, R9612 += 1, R9579 += 1, R9580 += 1 };
  s2 -> s4 [0, 65535] { R9658 += 1, R9612 += 1, R9580 += 1, R9561 += 1, R9562 += 1 };
  s2 -> s1 [88, 65535] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s3 -> s1 [0, 86] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s3 -> s5 [0, 65535] { R9658 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9658 += 1, R9612 += 1, R9579 += 1, R9580 += 1 };
  s3 -> s4 [0, 65535] { R9658 += 1, R9612 += 1, R9580 += 1, R9561 += 1, R9562 += 1 };
  s3 -> s1 [88, 65535] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s4 -> s1 [0, 86] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s4 -> s5 [0, 65535] { R9658 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9658 += 1, R9612 += 1 };
  s4 -> s4 [0, 65535] { R9658 += 1, R9612 += 1, R9580 += 1, R9561 += 1, R9562 += 1 };
  s4 -> s1 [88, 65535] { R9658 += 1, R9612 += 1, R9580 += 1, R9562 += 1 };
  s5 -> s5 [0, 65535] { R9658 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9658 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9658 += 1, R9612 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9660 += 1, R9614 += 1, R9581 += 1, R9582 += 1 };
  s0 -> s2 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1, R9564 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R9660 += 1, R9613 += 1, R9614 += 1 };
  s0 -> s0 [0, 65535] { R9659 += 1, R9660 += 1 };
  s0 -> s4 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1, R9563 += 1, R9564 += 1 };
  s1 -> s1 [0, 65535] { R9660 += 1, R9614 += 1, R9581 += 1, R9582 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9660 += 1 };
  s1 -> s2 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1, R9564 += 1, R5988 += 1 };
  s1 -> s4 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1, R9563 += 1, R9564 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9660 += 1 };
  s2 -> s7 [0, 65535] { R9660 += 1, R9614 += 1 };
  s2 -> s2 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1, R9564 += 1, R5988 += 1 };
  s2 -> s8 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1 };
  s3 -> s1 [0, 65535] { R9660 += 1, R9614 += 1, R9581 += 1, R9582 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1, R9564 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R9660 += 1, R9613 += 1, R9614 += 1 };
  s3 -> s4 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1, R9563 += 1, R9564 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9660 += 1 };
  s4 -> s7 [0, 65535] { R9660 += 1, R9614 += 1 };
  s4 -> s2 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1, R9564 += 1, R5988 += 1 };
  s4 -> s4 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1, R9563 += 1, R9564 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9660 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9660 += 1 };
  s7 -> s7 [0, 65535] { R9660 += 1, R9614 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R9660 += 1 };
  s8 -> s7 [0, 65535] { R9660 += 1, R9614 += 1 };
  s8 -> s8 [0, 65535] { R9660 += 1, R9614 += 1, R9582 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9662 += 1, R9615 += 1, R9616 += 1 };
  s0 -> s0 [0, 65535] { R9661 += 1, R9662 += 1 };
  s0 -> s2 [0, 65535] { R9662 += 1, R9616 += 1, R9584 += 1, R9565 += 1, R9566 += 1 };
  s0 -> s3 [0, 65535] { R9662 += 1, R9616 += 1, R9583 += 1, R9584 += 1 };
  s0 -> s4 [97, 97] { R9662 += 1, R9616 += 1, R9584 += 1, R9566 += 1 };
  s1 -> s1 [0, 65535] { R9662 += 1, R9615 += 1, R9616 += 1 };
  s1 -> s2 [0, 65535] { R9662 += 1, R9616 += 1, R9584 += 1, R9565 += 1, R9566 += 1 };
  s1 -> s3 [0, 65535] { R9662 += 1, R9616 += 1, R9583 += 1, R9584 += 1 };
  s1 -> s4 [97, 97] { R9662 += 1, R9616 += 1, R9584 += 1, R9566 += 1 };
  s2 -> s2 [0, 65535] { R9662 += 1, R9616 += 1, R9584 += 1, R9565 += 1, R9566 += 1 };
  s2 -> s4 [97, 97] { R9662 += 1, R9616 += 1, R9584 += 1, R9566 += 1 };
  s3 -> s2 [0, 65535] { R9662 += 1, R9616 += 1, R9584 += 1, R9565 += 1, R9566 += 1 };
  s3 -> s3 [0, 65535] { R9662 += 1, R9616 += 1, R9583 += 1, R9584 += 1 };
  s3 -> s4 [97, 97] { R9662 += 1, R9616 += 1, R9584 += 1, R9566 += 1 };
  s4 -> s5 [108, 108] { R9662 += 1, R9616 += 1, R9584 += 1, R9566 += 1 };
  s5 -> s6 [104, 104] { R9662 += 1, R9616 += 1, R9584 += 1, R9566 += 1 };
  s6 -> s7 [111, 111] { R9662 += 1, R9616 += 1, R9584 += 1, R9566 += 1 };
  s7 -> s8 [115, 115] { R9662 += 1, R9616 += 1, R9584 += 1, R9566 += 1 };
  s8 -> s9 [116, 116] { R9662 += 1, R9616 += 1, R9584 += 1, R9566 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R9662 += 1, R9616 += 1 };
  s9 -> s9 [0, 65535] { R9662 += 1, R9616 += 1, R9584 += 1 };
  s9 -> s12 [0, 65535] { R9662 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R9662 += 1, R9616 += 1 };
  s11 -> s12 [0, 65535] { R9662 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R9662 += 1 };
  accepting s9, s10, s11, s12;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9664 += 1, R9618 += 1, R9585 += 1, R9586 += 1 };
  s0 -> s0 [0, 65535] { R9663 += 1, R9664 += 1 };
  s0 -> s2 [0, 65535] { R9664 += 1, R9617 += 1, R9618 += 1 };
  s0 -> s3 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1, R9571 += 1, R9572 += 1 };
  s0 -> s4 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1, R9572 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535] { R9664 += 1 };
  s1 -> s1 [0, 65535] { R9664 += 1, R9618 += 1, R9585 += 1, R9586 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1, R9571 += 1, R9572 += 1 };
  s1 -> s4 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1, R9572 += 1, R5989 += 1 };
  s2 -> s1 [0, 65535] { R9664 += 1, R9618 += 1, R9585 += 1, R9586 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R9664 += 1, R9617 += 1, R9618 += 1 };
  s2 -> s3 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1, R9571 += 1, R9572 += 1 };
  s2 -> s4 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1, R9572 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535] { R9664 += 1 };
  s3 -> s6 [0, 65535] { R9664 += 1, R9618 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1, R9571 += 1, R9572 += 1 };
  s3 -> s4 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1, R9572 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535] { R9664 += 1 };
  s4 -> s6 [0, 65535] { R9664 += 1, R9618 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1, R9572 += 1, R5989 += 1 };
  s4 -> s8 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1 };
  s5 -> s5 [0, 65535] { R9664 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R9664 += 1 };
  s6 -> s6 [0, 65535] { R9664 += 1, R9618 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R9664 += 1 };
  s8 -> s6 [0, 65535] { R9664 += 1, R9618 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9664 += 1, R9618 += 1, R9586 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R9665 += 1, R9666 += 1 };
  s0 -> s1 [0, 65535] { R9666 += 1, R9619 += 1, R9620 += 1 };
  s0 -> s2 [0, 65535] { R9666 += 1, R9620 += 1, R9587 += 1, R9588 += 1 };
  s0 -> s3 [0, 65535] { R9666 += 1, R9620 += 1, R9588 += 1 };
  s1 -> s1 [0, 65535] { R9666 += 1, R9619 += 1, R9620 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R9666 += 1, R9620 += 1, R9587 += 1, R9588 += 1 };
  s1 -> s3 [0, 65535] { R9666 += 1, R9620 += 1, R9588 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9666 += 1, R9620 += 1, R9587 += 1, R9588 += 1 };
  s2 -> s3 [0, 65535] { R9666 += 1, R9620 += 1, R9588 += 1 };
  s2 -> s6 [0, 65535] { R9666 += 1 };
  s3 -> s4 [0, 65535] { R9666 += 1, R9620 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9666 += 1, R9620 += 1, R9588 += 1 };
  s3 -> s6 [0, 65535] { R9666 += 1 };
  s4 -> s4 [0, 65535] { R9666 += 1, R9620 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9666 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9666 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R9566 && R2 = R9588 && R3 = R8914 && R4 = R9666 && R15 = 0 && R16 = R9620 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8907 - R9620 = 1 && R8908 = R8914 && R8909 - R9620 = 1 && R8910 = R8914 && R8911 - R9620 = 1 && R8912 = R8914 && R8913 - R9620 = 1 && R9565 = 0 && R9569 = 0 && R9570 = 0 && R9573 = 0 && R9574 = R9588 && R9575 = 0 && R9576 = R9588 && R9577 = 0 && R9578 = R9588 && R9579 = 0 && R9580 = R9588 && R9581 = 0 && R9582 = R9588 && R9583 = 0 && R9584 = R9588 && R9585 = 0 && R9586 = R9588 && R9587 = 0 && R9589 = 0 && R9590 = R9620 && R9591 = 0 && R9592 = R9620 && R9593 = 0 && R9594 = R9620 && R9595 = 0 && R9596 = R9620 && R9597 = 0 && R9598 = R9620 && R9599 = 0 && R9600 = R9620 && R9601 = 0 && R9602 = R9620 && R9603 = 0 && R9604 = R9620 && R9605 = 0 && R9606 = R9620 && R9607 = 0 && R9608 = R9620 && R9609 = 0 && R9610 = R9620 && R9611 = 0 && R9612 = R9620 && R9613 = 0 && R9614 = R9620 && R9615 = 0 && R9616 = R9620 && R9617 = 0 && R9618 = R9620 && R9619 = 0 && R9621 = 10 && R9622 = R9666 && R9623 = 10 && R9624 = R9666 && R9625 = 10 && R9626 = R9666 && R9627 = 10 && R9628 = R9666 && R9629 = 10 && R9630 = R9666 && R9631 = 10 && R9632 = R9666 && R9633 = 10 && R9634 = R9666 && R9635 = 10 && R9636 = R9666 && R9637 = 10 && R9638 = R9666 && R9639 = 10 && R9640 = R9666 && R9641 = 10 && R9642 = R9666 && R9643 = 10 && R9644 = R9666 && R9645 = 10 && R9646 = R9666 && R9647 = 10 && R9648 = R9666 && R9649 = 10 && R9650 = R9666 && R9651 = 10 && R9652 = R9666 && R9653 = 10 && R9654 = R9666 && R9655 = 10 && R9656 = R9666 && R9657 = 10 && R9658 = R9666 && R9659 = 10 && R9660 = R9666 && R9661 = 10 && R9662 = R9666 && R9663 = 10 && R9664 = R9666 && R9665 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R9620 < R8914 && -1 < R9566 && 0 < R9588 && -1 < R9620 && 9 < R9666 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R9561 != 0 || R9562 = R9566 || (R5988 = 0 && R9566 = 0)) && (R9563 != 0 || R9564 = R9566 || (R5988 = 0 && R9566 = 0)) && (R5989 = 0 || (R9571 = 0 && R9572 = 0)) && (R5990 = 0 || (R9567 = 0 && R9568 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R9561 = 0 || (R5988 = 0 && R9566 = 0)) && (R9563 = 0 || (R5988 = 0 && R9566 = 0));
// End of Parikh automata intersection problem
