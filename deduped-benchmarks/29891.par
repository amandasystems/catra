// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8369, R8370, R8371, R8372, R8373, R8374, R8375, R8376, R8377, R8378, R8379, R8380, R8381, R8382, R8383, R8384, R8385, R8386, R8387, R8388, R8389, R8390, R8391, R8392, R8393, R8394, R8395, R8396, R8397, R8398, R8399, R8400, R8401, R8402, R8403, R8404, R8405, R8406, R8407, R8408, R8409, R8410, R8411, R8412, R8413, R8414, R8415, R8416, R8417, R8418, R8419, R8420, R8421, R8422, R8423, R8424, R8425, R8426, R8427, R8428, R8429, R8430, R8431, R8432, R8433, R8434, R8435, R8436, R8437, R8438, R8439, R8440, R8441, R8442, R8443, R8444, R8445, R8446, R8447, R8448, R8449, R8450, R8451, R8452, R8453, R8454, R8455, R8456, R8457, R8458, R8459, R8460, R8461, R8462, R8463, R8464, R8465, R8466, R8467, R8468, R8469, R8470, R8471, R8472, R8473, R8474, R8475, R8476;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R8432 += 1 };
  s0 -> s0 [0, 65535] { R8431 += 1, R8432 += 1 };
  s0 -> s2 [46, 46] { R8432 += 1 };
  s0 -> s3 [47, 47] { R8432 += 1 };
  s0 -> s1 [48, 65535] { R8432 += 1 };
  s1 -> s1 [0, 45] { R8432 += 1 };
  s1 -> s2 [46, 46] { R8432 += 1 };
  s1 -> s3 [47, 47] { R8432 += 1 };
  s1 -> s1 [48, 65535] { R8432 += 1 };
  s2 -> s1 [0, 45] { R8432 += 1 };
  s2 -> s2 [46, 46] { R8432 += 1 };
  s2 -> s3 [47, 47] { R8432 += 1 };
  s2 -> s1 [48, 114] { R8432 += 1 };
  s2 -> s8 [115, 115] { R8432 += 1 };
  s2 -> s1 [116, 65535] { R8432 += 1 };
  s3 -> s3 [0, 45] { R8432 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R8432 += 1 };
  s3 -> s3 [47, 65535] { R8432 += 1 };
  s4 -> s3 [0, 45] { R8432 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R8432 += 1 };
  s4 -> s3 [47, 114] { R8432 += 1 };
  s4 -> s5 [115, 115] { R8432 += 1 };
  s4 -> s3 [116, 65535] { R8432 += 1 };
  s5 -> s3 [0, 45] { R8432 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R8432 += 1 };
  s5 -> s3 [47, 110] { R8432 += 1 };
  s5 -> s6 [111, 111] { R8432 += 1 };
  s5 -> s3 [112, 65535] { R8432 += 1 };
  s6 -> s3 [0, 45] { R8432 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R8432 += 1 };
  s6 -> s3 [47, 98] { R8432 += 1 };
  s6 -> s7 [99, 99] { R8432 += 1 };
  s6 -> s3 [100, 65535] { R8432 += 1 };
  s7 -> s3 [0, 45] { R8432 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R8432 += 1 };
  s7 -> s3 [47, 106] { R8432 += 1 };
  s7 -> s3 [108, 65535] { R8432 += 1 };
  s8 -> s1 [0, 45] { R8432 += 1 };
  s8 -> s2 [46, 46] { R8432 += 1 };
  s8 -> s3 [47, 47] { R8432 += 1 };
  s8 -> s1 [48, 110] { R8432 += 1 };
  s8 -> s9 [111, 111] { R8432 += 1 };
  s8 -> s1 [112, 65535] { R8432 += 1 };
  s9 -> s1 [0, 45] { R8432 += 1 };
  s9 -> s2 [46, 46] { R8432 += 1 };
  s9 -> s3 [47, 47] { R8432 += 1 };
  s9 -> s1 [48, 98] { R8432 += 1 };
  s9 -> s10 [99, 99] { R8432 += 1 };
  s9 -> s1 [100, 65535] { R8432 += 1 };
  s10 -> s1 [0, 45] { R8432 += 1 };
  s10 -> s2 [46, 46] { R8432 += 1 };
  s10 -> s3 [47, 47] { R8432 += 1 };
  s10 -> s1 [48, 106] { R8432 += 1 };
  s10 -> s1 [108, 65535] { R8432 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R8434 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R8433 += 1, R8434 += 1 };
  s1 -> s1 [0, 65535] { R8434 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R8436 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8435 += 1, R8436 += 1 };
  s0 -> s2 [0, 65535] { R8436 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R8436 += 1 };
  s0 -> s1 [48, 65535] { R8436 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R8436 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R8436 += 1 };
  s1 -> s1 [48, 65535] { R8436 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R8436 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R8436 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R8436 += 1 };
  s2 -> s1 [48, 65535] { R8436 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8436 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8438 += 1, R8040 += 1 };
  s0 -> s0 [0, 65535] { R8437 += 1, R8438 += 1 };
  s0 -> s2 [0, 65535] { R8438 += 1, R8039 += 1, R8040 += 1 };
  s0 -> s1 [38, 42] { R8438 += 1, R8040 += 1 };
  s0 -> s1 [44, 45] { R8438 += 1, R8040 += 1 };
  s0 -> s1 [47, 62] { R8438 += 1, R8040 += 1 };
  s0 -> s1 [64, 65535] { R8438 += 1, R8040 += 1 };
  s1 -> s1 [0, 36] { R8438 += 1, R8040 += 1 };
  s1 -> s1 [0, 65535] { R8438 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R8438 += 1, R8040 += 1 };
  s1 -> s1 [44, 45] { R8438 += 1, R8040 += 1 };
  s1 -> s1 [47, 62] { R8438 += 1, R8040 += 1 };
  s1 -> s1 [64, 65535] { R8438 += 1, R8040 += 1 };
  s2 -> s1 [0, 36] { R8438 += 1, R8040 += 1 };
  s2 -> s2 [0, 65535] { R8438 += 1, R8039 += 1, R8040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R8438 += 1, R8040 += 1 };
  s2 -> s1 [44, 45] { R8438 += 1, R8040 += 1 };
  s2 -> s1 [47, 62] { R8438 += 1, R8040 += 1 };
  s2 -> s1 [64, 65535] { R8438 += 1, R8040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R8440 += 1, R8042 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R8440 += 1, R8041 += 1, R8042 += 1 };
  s0 -> s0 [0, 65535] { R8439 += 1, R8440 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8440 += 1 };
  s1 -> s1 [0, 65535] { R8440 += 1, R8042 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8440 += 1, R8042 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R8440 += 1, R8041 += 1, R8042 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8440 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R8442 += 1, R8043 += 1, R8044 += 1 };
  s0 -> s0 [0, 65535] { R8441 += 1, R8442 += 1 };
  s0 -> s3 [0, 65535] { R8442 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535] { R8442 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R8442 += 1, R8044 += 1 };
  s2 -> s1 [0, 62] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R8442 += 1, R8043 += 1, R8044 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8442 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R8442 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8442 += 1, R8044 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8442 += 1, R8044 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R8442 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8442 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8442 += 1, R8044 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8443 += 1, R8444 += 1 };
  s0 -> s1 [0, 65535] { R8444 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s2 [0, 65535] { R8444 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R8444 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8444 += 1, R8045 += 1, R8046 += 1 };
  s1 -> s2 [0, 65535] { R8444 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R8444 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s6 [0, 65535] { R8444 += 1, R8046 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8444 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R8444 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8444 += 1, R8046 += 1, R5994 += 1, R5 += 1 };
  s3 -> s5 [0, 65535] { R8444 += 1 };
  s3 -> s3 [0, 65535] { R8444 += 1, R8046 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8444 += 1 };
  s6 -> s6 [0, 65535] { R8444 += 1, R8046 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8444 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8446 += 1, R8400 += 1 };
  s0 -> s2 [0, 65535] { R8446 += 1, R8399 += 1, R8400 += 1 };
  s0 -> s0 [0, 65535] { R8445 += 1, R8446 += 1 };
  s0 -> s1 [45, 63] { R8446 += 1, R8400 += 1 };
  s0 -> s3 [87, 87] { R8446 += 1, R8400 += 1 };
  s0 -> s1 [88, 65535] { R8446 += 1, R8400 += 1 };
  s1 -> s1 [0, 43] { R8446 += 1, R8400 += 1 };
  s1 -> s1 [45, 63] { R8446 += 1, R8400 += 1 };
  s1 -> s3 [87, 87] { R8446 += 1, R8400 += 1 };
  s1 -> s1 [88, 65535] { R8446 += 1, R8400 += 1 };
  s2 -> s1 [0, 43] { R8446 += 1, R8400 += 1 };
  s2 -> s2 [0, 65535] { R8446 += 1, R8399 += 1, R8400 += 1 };
  s2 -> s1 [45, 63] { R8446 += 1, R8400 += 1 };
  s2 -> s3 [87, 87] { R8446 += 1, R8400 += 1 };
  s2 -> s1 [88, 65535] { R8446 += 1, R8400 += 1 };
  s3 -> s3 [0, 43] { R8446 += 1, R8400 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8446 += 1 };
  s3 -> s3 [45, 63] { R8446 += 1, R8400 += 1 };
  s3 -> s3 [87, 65535] { R8446 += 1, R8400 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R8447 += 1, R8448 += 1 };
  s0 -> s1 [0, 65535] { R8448 += 1, R8402 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R8448 += 1, R8401 += 1, R8402 += 1 };
  s1 -> s4 [0, 65535] { R8448 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8448 += 1, R8402 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8448 += 1, R8402 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R8448 += 1, R8401 += 1, R8402 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8448 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8450 += 1, R8404 += 1 };
  s0 -> s2 [0, 65535] { R8450 += 1, R8404 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R8449 += 1, R8450 += 1 };
  s0 -> s3 [0, 65535] { R8450 += 1, R8403 += 1, R8404 += 1 };
  s0 -> s4 [58, 58] { R8450 += 1, R8404 += 1 };
  s0 -> s1 [59, 65535] { R8450 += 1, R8404 += 1 };
  s1 -> s1 [0, 57] { R8450 += 1, R8404 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8450 += 1 };
  s1 -> s4 [58, 58] { R8450 += 1, R8404 += 1 };
  s1 -> s1 [59, 65535] { R8450 += 1, R8404 += 1 };
  s2 -> s1 [0, 57] { R8450 += 1, R8404 += 1 };
  s2 -> s2 [0, 65535] { R8450 += 1, R8404 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R8450 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R8450 += 1, R8404 += 1 };
  s2 -> s1 [59, 65535] { R8450 += 1, R8404 += 1 };
  s3 -> s1 [0, 57] { R8450 += 1, R8404 += 1 };
  s3 -> s2 [0, 65535] { R8450 += 1, R8404 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R8450 += 1, R8403 += 1, R8404 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R8450 += 1, R8404 += 1 };
  s3 -> s1 [59, 65535] { R8450 += 1, R8404 += 1 };
  s4 -> s4 [0, 65535] { R8450 += 1, R8404 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8450 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R8452 += 1, R8406 += 1 };
  s0 -> s2 [0, 65535] { R8452 += 1, R8406 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R8452 += 1, R8405 += 1, R8406 += 1 };
  s0 -> s0 [0, 65535] { R8451 += 1, R8452 += 1 };
  s0 -> s4 [87, 87] { R8452 += 1, R8406 += 1 };
  s0 -> s1 [88, 65535] { R8452 += 1, R8406 += 1 };
  s1 -> s1 [0, 86] { R8452 += 1, R8406 += 1 };
  s1 -> s1 [0, 65535] { R8452 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R8452 += 1, R8406 += 1 };
  s1 -> s1 [88, 65535] { R8452 += 1, R8406 += 1 };
  s2 -> s1 [0, 86] { R8452 += 1, R8406 += 1 };
  s2 -> s2 [0, 65535] { R8452 += 1, R8406 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8452 += 1 };
  s2 -> s4 [87, 87] { R8452 += 1, R8406 += 1 };
  s2 -> s1 [88, 65535] { R8452 += 1, R8406 += 1 };
  s3 -> s1 [0, 86] { R8452 += 1, R8406 += 1 };
  s3 -> s2 [0, 65535] { R8452 += 1, R8406 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8452 += 1, R8405 += 1, R8406 += 1 };
  s3 -> s4 [87, 87] { R8452 += 1, R8406 += 1 };
  s3 -> s1 [88, 65535] { R8452 += 1, R8406 += 1 };
  s4 -> s4 [0, 65535] { R8452 += 1, R8406 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8452 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8453 += 1, R8454 += 1 };
  s0 -> s2 [0, 65535] { R8454 += 1, R8407 += 1, R8408 += 1 };
  s0 -> s3 [0, 65535] { R8454 += 1, R8408 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535] { R8454 += 1 };
  s1 -> s7 [0, 65535] { R8454 += 1, R8408 += 1 };
  s2 -> s1 [0, 90] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R8454 += 1, R8407 += 1, R8408 += 1 };
  s2 -> s3 [0, 65535] { R8454 += 1, R8408 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R8454 += 1 };
  s3 -> s3 [0, 65535] { R8454 += 1, R8408 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8454 += 1, R8408 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R8454 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8454 += 1 };
  s7 -> s7 [0, 65535] { R8454 += 1, R8408 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8456 += 1, R8410 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R8456 += 1, R8410 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R8456 += 1, R8409 += 1, R8410 += 1 };
  s0 -> s0 [0, 65535] { R8455 += 1, R8456 += 1 };
  s1 -> s6 [0, 65535] { R8456 += 1, R8410 += 1 };
  s1 -> s1 [0, 65535] { R8456 += 1, R8410 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R8456 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R8456 += 1, R8410 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R8456 += 1 };
  s2 -> s2 [0, 65535] { R8456 += 1, R8410 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8456 += 1, R8410 += 1, R5998 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R8456 += 1, R8410 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s3 [0, 65535] { R8456 += 1, R8409 += 1, R8410 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8456 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8456 += 1, R8410 += 1 };
  s6 -> s5 [0, 65535] { R8456 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8458 += 1, R8411 += 1, R8412 += 1 };
  s0 -> s0 [0, 65535] { R8457 += 1, R8458 += 1 };
  s0 -> s2 [0, 65535] { R8458 += 1, R8412 += 1, R8376 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R8458 += 1, R8412 += 1, R8375 += 1, R8376 += 1 };
  s1 -> s1 [0, 65535] { R8458 += 1, R8411 += 1, R8412 += 1 };
  s1 -> s2 [0, 65535] { R8458 += 1, R8412 += 1, R8376 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R8458 += 1, R8412 += 1, R8375 += 1, R8376 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8458 += 1, R8412 += 1 };
  s2 -> s4 [0, 65535] { R8458 += 1 };
  s2 -> s2 [0, 65535] { R8458 += 1, R8412 += 1, R8376 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R8458 += 1 };
  s3 -> s2 [0, 65535] { R8458 += 1, R8412 += 1, R8376 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R8458 += 1, R8412 += 1, R8375 += 1, R8376 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8458 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8458 += 1, R8412 += 1 };
  s6 -> s4 [0, 65535] { R8458 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R8460 += 1, R8413 += 1, R8414 += 1 };
  s0 -> s2 [0, 65535] { R8460 += 1, R8414 += 1, R8377 += 1, R8378 += 1 };
  s0 -> s0 [0, 65535] { R8459 += 1, R8460 += 1 };
  s0 -> s3 [108, 108] { R8460 += 1, R8414 += 1, R8378 += 1 };
  s1 -> s1 [0, 65535] { R8460 += 1, R8413 += 1, R8414 += 1 };
  s1 -> s2 [0, 65535] { R8460 += 1, R8414 += 1, R8377 += 1, R8378 += 1 };
  s1 -> s3 [108, 108] { R8460 += 1, R8414 += 1, R8378 += 1 };
  s2 -> s2 [0, 65535] { R8460 += 1, R8414 += 1, R8377 += 1, R8378 += 1 };
  s2 -> s3 [108, 108] { R8460 += 1, R8414 += 1, R8378 += 1 };
  s3 -> s4 [111, 111] { R8460 += 1, R8414 += 1, R8378 += 1 };
  s4 -> s5 [0, 65535] { R8460 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8460 += 1, R8414 += 1 };
  s5 -> s5 [0, 65535] { R8460 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s0 -> s2 [0, 65535] { R8462 += 1, R8415 += 1, R8416 += 1 };
  s0 -> s3 [0, 65535] { R8462 += 1, R8416 += 1, R8383 += 1, R8384 += 1 };
  s0 -> s0 [0, 65535] { R8461 += 1, R8462 += 1 };
  s0 -> s4 [87, 87] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s0 -> s1 [88, 65535] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s1 -> s1 [0, 86] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s1 -> s4 [87, 87] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s1 -> s1 [88, 65535] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s2 -> s1 [0, 86] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s2 -> s2 [0, 65535] { R8462 += 1, R8415 += 1, R8416 += 1 };
  s2 -> s3 [0, 65535] { R8462 += 1, R8416 += 1, R8383 += 1, R8384 += 1 };
  s2 -> s4 [87, 87] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s2 -> s1 [88, 65535] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s3 -> s1 [0, 86] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s3 -> s3 [0, 65535] { R8462 += 1, R8416 += 1, R8383 += 1, R8384 += 1 };
  s3 -> s4 [87, 87] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s3 -> s1 [88, 65535] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8462 += 1, R8416 += 1, R8384 += 1 };
  s4 -> s6 [0, 65535] { R8462 += 1 };
  s4 -> s7 [0, 65535] { R8462 += 1, R8416 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8462 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8462 += 1 };
  s7 -> s7 [0, 65535] { R8462 += 1, R8416 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8464 += 1, R8418 += 1, R8385 += 1, R8386 += 1 };
  s0 -> s0 [0, 65535] { R8463 += 1, R8464 += 1 };
  s0 -> s2 [0, 65535] { R8464 += 1, R8418 += 1, R8386 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R8464 += 1, R8417 += 1, R8418 += 1 };
  s1 -> s1 [0, 65535] { R8464 += 1, R8418 += 1, R8385 += 1, R8386 += 1 };
  s1 -> s6 [0, 65535] { R8464 += 1 };
  s1 -> s2 [0, 65535] { R8464 += 1, R8418 += 1, R8386 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8464 += 1, R8418 += 1 };
  s2 -> s6 [0, 65535] { R8464 += 1 };
  s2 -> s2 [0, 65535] { R8464 += 1, R8418 += 1, R8386 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8464 += 1, R8418 += 1, R8385 += 1, R8386 += 1 };
  s3 -> s2 [0, 65535] { R8464 += 1, R8418 += 1, R8386 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R8464 += 1, R8417 += 1, R8418 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8464 += 1, R8418 += 1 };
  s5 -> s6 [0, 65535] { R8464 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8464 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s0 -> s2 [0, 65535] { R8466 += 1, R8420 += 1, R8387 += 1, R8388 += 1 };
  s0 -> s3 [0, 65535] { R8466 += 1, R8420 += 1, R8388 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R8466 += 1, R8419 += 1, R8420 += 1 };
  s0 -> s0 [0, 65535] { R8465 += 1, R8466 += 1 };
  s0 -> s5 [87, 87] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s0 -> s1 [88, 65535] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s1 -> s1 [0, 86] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s1 -> s7 [0, 65535] { R8466 += 1 };
  s1 -> s1 [0, 65535] { R8466 += 1, R8420 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [87, 87] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s1 -> s1 [88, 65535] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s2 -> s1 [0, 86] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s2 -> s2 [0, 65535] { R8466 += 1, R8420 += 1, R8387 += 1, R8388 += 1 };
  s2 -> s3 [0, 65535] { R8466 += 1, R8420 += 1, R8388 += 1, R7 += 1 };
  s2 -> s7 [0, 65535] { R8466 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [87, 87] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s2 -> s1 [88, 65535] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s3 -> s1 [0, 86] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s3 -> s3 [0, 65535] { R8466 += 1, R8420 += 1, R8388 += 1, R7 += 1 };
  s3 -> s7 [0, 65535] { R8466 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R8466 += 1, R8420 += 1 };
  s3 -> s5 [87, 87] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s3 -> s1 [88, 65535] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s4 -> s1 [0, 86] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s4 -> s2 [0, 65535] { R8466 += 1, R8420 += 1, R8387 += 1, R8388 += 1 };
  s4 -> s3 [0, 65535] { R8466 += 1, R8420 += 1, R8388 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R8466 += 1, R8419 += 1, R8420 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [87, 87] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s4 -> s1 [88, 65535] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s5 -> s5 [0, 65535] { R8466 += 1, R8420 += 1, R8388 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8466 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8466 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8466 += 1, R8420 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s0 -> s2 [0, 65535] { R8468 += 1, R8422 += 1, R8390 += 1, R8369 += 1, R8370 += 1 };
  s0 -> s3 [0, 65535] { R8468 += 1, R8421 += 1, R8422 += 1 };
  s0 -> s0 [0, 65535] { R8467 += 1, R8468 += 1 };
  s0 -> s4 [0, 65535] { R8468 += 1, R8422 += 1, R8389 += 1, R8390 += 1 };
  s0 -> s1 [88, 65535] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s1 -> s1 [0, 86] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s1 -> s5 [0, 65535] { R8468 += 1 };
  s1 -> s1 [0, 65535] { R8468 += 1, R8422 += 1, R8390 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8468 += 1, R8422 += 1 };
  s1 -> s1 [88, 65535] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s2 -> s1 [0, 86] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s2 -> s2 [0, 65535] { R8468 += 1, R8422 += 1, R8390 += 1, R8369 += 1, R8370 += 1 };
  s2 -> s5 [0, 65535] { R8468 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R8468 += 1, R8422 += 1 };
  s2 -> s1 [88, 65535] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s3 -> s1 [0, 86] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s3 -> s2 [0, 65535] { R8468 += 1, R8422 += 1, R8390 += 1, R8369 += 1, R8370 += 1 };
  s3 -> s3 [0, 65535] { R8468 += 1, R8421 += 1, R8422 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R8468 += 1, R8422 += 1, R8389 += 1, R8390 += 1 };
  s3 -> s1 [88, 65535] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s4 -> s1 [0, 86] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s4 -> s2 [0, 65535] { R8468 += 1, R8422 += 1, R8390 += 1, R8369 += 1, R8370 += 1 };
  s4 -> s5 [0, 65535] { R8468 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8468 += 1, R8422 += 1, R8389 += 1, R8390 += 1 };
  s4 -> s1 [88, 65535] { R8468 += 1, R8422 += 1, R8390 += 1, R8370 += 1 };
  s5 -> s5 [0, 65535] { R8468 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8468 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8468 += 1, R8422 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8469 += 1, R8470 += 1 };
  s0 -> s1 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1, R8371 += 1, R8372 += 1 };
  s0 -> s2 [0, 65535] { R8470 += 1, R8424 += 1, R8391 += 1, R8392 += 1 };
  s0 -> s3 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1, R8372 += 1, R5988 += 1 };
  s0 -> s4 [0, 65535] { R8470 += 1, R8423 += 1, R8424 += 1 };
  s1 -> s6 [0, 65535] { R8470 += 1, R8424 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1, R8371 += 1, R8372 += 1 };
  s1 -> s7 [0, 65535] { R8470 += 1 };
  s1 -> s3 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1, R8372 += 1, R5988 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1, R8371 += 1, R8372 += 1 };
  s2 -> s7 [0, 65535] { R8470 += 1 };
  s2 -> s2 [0, 65535] { R8470 += 1, R8424 += 1, R8391 += 1, R8392 += 1 };
  s2 -> s3 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1, R8372 += 1, R5988 += 1 };
  s3 -> s6 [0, 65535] { R8470 += 1, R8424 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R8470 += 1 };
  s3 -> s3 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1, R8372 += 1, R5988 += 1 };
  s3 -> s8 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1, R8371 += 1, R8372 += 1 };
  s4 -> s2 [0, 65535] { R8470 += 1, R8424 += 1, R8391 += 1, R8392 += 1 };
  s4 -> s3 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1, R8372 += 1, R5988 += 1 };
  s4 -> s4 [0, 65535] { R8470 += 1, R8423 += 1, R8424 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8470 += 1, R8424 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s7 [0, 65535] { R8470 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8470 += 1 };
  s8 -> s6 [0, 65535] { R8470 += 1, R8424 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R8470 += 1 };
  s8 -> s8 [0, 65535] { R8470 += 1, R8424 += 1, R8392 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8472 += 1, R8426 += 1, R8394 += 1, R8373 += 1, R8374 += 1 };
  s0 -> s2 [0, 65535] { R8472 += 1, R8425 += 1, R8426 += 1 };
  s0 -> s0 [0, 65535] { R8471 += 1, R8472 += 1 };
  s0 -> s3 [0, 65535] { R8472 += 1, R8426 += 1, R8393 += 1, R8394 += 1 };
  s0 -> s4 [111, 111] { R8472 += 1, R8426 += 1, R8394 += 1, R8374 += 1 };
  s1 -> s1 [0, 65535] { R8472 += 1, R8426 += 1, R8394 += 1, R8373 += 1, R8374 += 1 };
  s1 -> s4 [111, 111] { R8472 += 1, R8426 += 1, R8394 += 1, R8374 += 1 };
  s2 -> s1 [0, 65535] { R8472 += 1, R8426 += 1, R8394 += 1, R8373 += 1, R8374 += 1 };
  s2 -> s2 [0, 65535] { R8472 += 1, R8425 += 1, R8426 += 1 };
  s2 -> s3 [0, 65535] { R8472 += 1, R8426 += 1, R8393 += 1, R8394 += 1 };
  s2 -> s4 [111, 111] { R8472 += 1, R8426 += 1, R8394 += 1, R8374 += 1 };
  s3 -> s1 [0, 65535] { R8472 += 1, R8426 += 1, R8394 += 1, R8373 += 1, R8374 += 1 };
  s3 -> s3 [0, 65535] { R8472 += 1, R8426 += 1, R8393 += 1, R8394 += 1 };
  s3 -> s4 [111, 111] { R8472 += 1, R8426 += 1, R8394 += 1, R8374 += 1 };
  s4 -> s5 [115, 115] { R8472 += 1, R8426 += 1, R8394 += 1, R8374 += 1 };
  s5 -> s6 [116, 116] { R8472 += 1, R8426 += 1, R8394 += 1, R8374 += 1 };
  s6 -> s6 [0, 65535] { R8472 += 1, R8426 += 1, R8394 += 1 };
  s6 -> s7 [0, 65535] { R8472 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R8472 += 1, R8426 += 1 };
  s7 -> s7 [0, 65535] { R8472 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s7 [0, 65535] { R8472 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8472 += 1, R8426 += 1 };
  accepting s6, s7, s8, s9;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1, R8379 += 1, R8380 += 1 };
  s0 -> s2 [0, 65535] { R8474 += 1, R8427 += 1, R8428 += 1 };
  s0 -> s3 [0, 65535] { R8474 += 1, R8428 += 1, R8395 += 1, R8396 += 1 };
  s0 -> s4 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1, R8380 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R8473 += 1, R8474 += 1 };
  s1 -> s5 [0, 65535] { R8474 += 1, R8428 += 1 };
  s1 -> s1 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1, R8379 += 1, R8380 += 1 };
  s1 -> s6 [0, 65535] { R8474 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1, R8380 += 1, R5989 += 1 };
  s2 -> s1 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1, R8379 += 1, R8380 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R8474 += 1, R8427 += 1, R8428 += 1 };
  s2 -> s3 [0, 65535] { R8474 += 1, R8428 += 1, R8395 += 1, R8396 += 1 };
  s2 -> s4 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1, R8380 += 1, R5989 += 1 };
  s3 -> s6 [0, 65535] { R8474 += 1 };
  s3 -> s1 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1, R8379 += 1, R8380 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R8474 += 1, R8428 += 1, R8395 += 1, R8396 += 1 };
  s3 -> s4 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1, R8380 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535] { R8474 += 1, R8428 += 1 };
  s4 -> s6 [0, 65535] { R8474 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1, R8380 += 1, R5989 += 1 };
  s4 -> s8 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1 };
  s5 -> s5 [0, 65535] { R8474 += 1, R8428 += 1 };
  s5 -> s6 [0, 65535] { R8474 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R8474 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R8474 += 1, R8428 += 1 };
  s8 -> s6 [0, 65535] { R8474 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8474 += 1, R8428 += 1, R8396 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8476 += 1, R8430 += 1, R8397 += 1, R8398 += 1 };
  s0 -> s2 [0, 65535] { R8476 += 1, R8430 += 1, R8398 += 1, R8381 += 1, R8382 += 1 };
  s0 -> s3 [0, 65535] { R8476 += 1, R8429 += 1, R8430 += 1 };
  s0 -> s0 [0, 65535] { R8475 += 1, R8476 += 1 };
  s0 -> s4 [99, 99] { R8476 += 1, R8430 += 1, R8398 += 1, R8382 += 1 };
  s1 -> s1 [0, 65535] { R8476 += 1, R8430 += 1, R8397 += 1, R8398 += 1 };
  s1 -> s2 [0, 65535] { R8476 += 1, R8430 += 1, R8398 += 1, R8381 += 1, R8382 += 1 };
  s1 -> s4 [99, 99] { R8476 += 1, R8430 += 1, R8398 += 1, R8382 += 1 };
  s2 -> s2 [0, 65535] { R8476 += 1, R8430 += 1, R8398 += 1, R8381 += 1, R8382 += 1 };
  s2 -> s4 [99, 99] { R8476 += 1, R8430 += 1, R8398 += 1, R8382 += 1 };
  s3 -> s1 [0, 65535] { R8476 += 1, R8430 += 1, R8397 += 1, R8398 += 1 };
  s3 -> s2 [0, 65535] { R8476 += 1, R8430 += 1, R8398 += 1, R8381 += 1, R8382 += 1 };
  s3 -> s3 [0, 65535] { R8476 += 1, R8429 += 1, R8430 += 1 };
  s3 -> s4 [99, 99] { R8476 += 1, R8430 += 1, R8398 += 1, R8382 += 1 };
  s4 -> s5 [97, 97] { R8476 += 1, R8430 += 1, R8398 += 1, R8382 += 1 };
  s5 -> s6 [108, 108] { R8476 += 1, R8430 += 1, R8398 += 1, R8382 += 1 };
  s6 -> s7 [104, 104] { R8476 += 1, R8430 += 1, R8398 += 1, R8382 += 1 };
  s7 -> s8 [0, 65535] { R8476 += 1 };
  s7 -> s7 [0, 65535] { R8476 += 1, R8430 += 1, R8398 += 1 };
  s7 -> s9 [0, 65535] { R8476 += 1, R8430 += 1 };
  s7 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R8476 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s8 [0, 65535] { R8476 += 1 };
  s9 -> s9 [0, 65535] { R8476 += 1, R8430 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s7, s8, s9, s10;
};
};
constraint R1 = R8374 && R2 = R8398 && R3 = R8046 && R4 = R8476 && R15 = 0 && R16 = R8430 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8039 - R8430 = 1 && R8040 = R8046 && R8041 - R8430 = 1 && R8042 = R8046 && R8043 - R8430 = 1 && R8044 = R8046 && R8045 - R8430 = 1 && R8373 = 0 && R8377 = 0 && R8378 = 0 && R8381 = 0 && R8382 = 0 && R8383 = 0 && R8384 = R8398 && R8385 = 0 && R8386 = R8398 && R8387 = 0 && R8388 = R8398 && R8389 = 0 && R8390 = R8398 && R8391 = 0 && R8392 = R8398 && R8393 = 0 && R8394 = R8398 && R8395 = 0 && R8396 = R8398 && R8397 = 0 && R8399 = 0 && R8400 = R8430 && R8401 = 0 && R8402 = R8430 && R8403 = 0 && R8404 = R8430 && R8405 = 0 && R8406 = R8430 && R8407 = 0 && R8408 = R8430 && R8409 = 0 && R8410 = R8430 && R8411 = 0 && R8412 = R8430 && R8413 = 0 && R8414 = R8430 && R8415 = 0 && R8416 = R8430 && R8417 = 0 && R8418 = R8430 && R8419 = 0 && R8420 = R8430 && R8421 = 0 && R8422 = R8430 && R8423 = 0 && R8424 = R8430 && R8425 = 0 && R8426 = R8430 && R8427 = 0 && R8428 = R8430 && R8429 = 0 && R8431 = 10 && R8432 = R8476 && R8433 = 10 && R8434 = R8476 && R8435 = 10 && R8436 = R8476 && R8437 = 10 && R8438 = R8476 && R8439 = 10 && R8440 = R8476 && R8441 = 10 && R8442 = R8476 && R8443 = 10 && R8444 = R8476 && R8445 = 10 && R8446 = R8476 && R8447 = 10 && R8448 = R8476 && R8449 = 10 && R8450 = R8476 && R8451 = 10 && R8452 = R8476 && R8453 = 10 && R8454 = R8476 && R8455 = 10 && R8456 = R8476 && R8457 = 10 && R8458 = R8476 && R8459 = 10 && R8460 = R8476 && R8461 = 10 && R8462 = R8476 && R8463 = 10 && R8464 = R8476 && R8465 = 10 && R8466 = R8476 && R8467 = 10 && R8468 = R8476 && R8469 = 10 && R8470 = R8476 && R8471 = 10 && R8472 = R8476 && R8473 = 10 && R8474 = R8476 && R8475 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R8430 < R8046 && -1 < R8374 && 0 < R8398 && -1 < R8430 && 9 < R8476 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R8369 != 0 || R8370 = R8374 || (R5988 = 0 && R8374 = 0)) && (R8371 != 0 || R8372 = R8374 || (R5988 = 0 && R8374 = 0)) && (R5989 = 0 || (R8379 = 0 && R8380 = 0)) && (R5990 = 0 || (R8375 = 0 && R8376 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R8369 = 0 || (R5988 = 0 && R8374 = 0)) && (R8371 = 0 || (R5988 = 0 && R8374 = 0));
// End of Parikh automata intersection problem
