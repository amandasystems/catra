// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6853, R6854, R6855, R6856, R6857, R6858, R6859, R6860, R6861, R6862, R6863, R6864, R6865, R6866, R6867, R6868, R6869, R6870, R6871, R6872, R6873, R6874, R6875, R6876, R6877, R6878, R6879, R6880, R6881, R6882, R6883, R6884, R6885, R6886, R6887, R6888, R6889, R6890, R6891, R6892, R6893, R6894, R6895, R6896, R6897, R6898, R6899, R6900, R6901, R6902, R6903, R6904, R6905, R6906, R6907, R6908, R6909, R6910, R6911, R6912, R6913, R6914, R6915, R6916, R6917, R6918, R6919, R6920, R6921, R6922, R6923, R6924, R6925, R6926, R6927, R6928, R6929, R6930, R6931, R6932, R6933, R6934, R6935, R6936, R6937, R6938, R6939, R6940, R6941, R6942, R6943, R6944, R6945, R6946, R6947, R6948, R6949, R6950, R6951, R6952, R6953, R6954, R6955, R6956, R6957, R6958, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R6914 += 1 };
  s0 -> s0 [0, 65535] { R6913 += 1, R6914 += 1 };
  s0 -> s2 [46, 46] { R6914 += 1 };
  s0 -> s3 [47, 47] { R6914 += 1 };
  s0 -> s1 [48, 65535] { R6914 += 1 };
  s1 -> s1 [0, 45] { R6914 += 1 };
  s1 -> s2 [46, 46] { R6914 += 1 };
  s1 -> s3 [47, 47] { R6914 += 1 };
  s1 -> s1 [48, 65535] { R6914 += 1 };
  s2 -> s1 [0, 45] { R6914 += 1 };
  s2 -> s2 [46, 46] { R6914 += 1 };
  s2 -> s3 [47, 47] { R6914 += 1 };
  s2 -> s1 [48, 114] { R6914 += 1 };
  s2 -> s8 [115, 115] { R6914 += 1 };
  s2 -> s1 [116, 65535] { R6914 += 1 };
  s3 -> s3 [0, 45] { R6914 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R6914 += 1 };
  s3 -> s3 [47, 65535] { R6914 += 1 };
  s4 -> s3 [0, 45] { R6914 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R6914 += 1 };
  s4 -> s3 [47, 114] { R6914 += 1 };
  s4 -> s5 [115, 115] { R6914 += 1 };
  s4 -> s3 [116, 65535] { R6914 += 1 };
  s5 -> s3 [0, 45] { R6914 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R6914 += 1 };
  s5 -> s3 [47, 110] { R6914 += 1 };
  s5 -> s6 [111, 111] { R6914 += 1 };
  s5 -> s3 [112, 65535] { R6914 += 1 };
  s6 -> s3 [0, 45] { R6914 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R6914 += 1 };
  s6 -> s3 [47, 98] { R6914 += 1 };
  s6 -> s7 [99, 99] { R6914 += 1 };
  s6 -> s3 [100, 65535] { R6914 += 1 };
  s7 -> s3 [0, 45] { R6914 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R6914 += 1 };
  s7 -> s3 [47, 106] { R6914 += 1 };
  s7 -> s3 [108, 65535] { R6914 += 1 };
  s8 -> s1 [0, 45] { R6914 += 1 };
  s8 -> s2 [46, 46] { R6914 += 1 };
  s8 -> s3 [47, 47] { R6914 += 1 };
  s8 -> s1 [48, 110] { R6914 += 1 };
  s8 -> s9 [111, 111] { R6914 += 1 };
  s8 -> s1 [112, 65535] { R6914 += 1 };
  s9 -> s1 [0, 45] { R6914 += 1 };
  s9 -> s2 [46, 46] { R6914 += 1 };
  s9 -> s3 [47, 47] { R6914 += 1 };
  s9 -> s1 [48, 98] { R6914 += 1 };
  s9 -> s10 [99, 99] { R6914 += 1 };
  s9 -> s1 [100, 65535] { R6914 += 1 };
  s10 -> s1 [0, 45] { R6914 += 1 };
  s10 -> s2 [46, 46] { R6914 += 1 };
  s10 -> s3 [47, 47] { R6914 += 1 };
  s10 -> s1 [48, 106] { R6914 += 1 };
  s10 -> s1 [108, 65535] { R6914 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R6915 += 1, R6916 += 1 };
  s0 -> s1 [0, 65535] { R6916 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R6916 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R6918 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R6918 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R6917 += 1, R6918 += 1 };
  s0 -> s3 [47, 47] { R6918 += 1 };
  s0 -> s1 [48, 65535] { R6918 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R6918 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R6918 += 1 };
  s1 -> s1 [48, 65535] { R6918 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R6918 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R6918 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R6918 += 1 };
  s2 -> s1 [48, 65535] { R6918 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6918 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R6920 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R6919 += 1, R6920 += 1 };
  s0 -> s2 [0, 65535] { R6920 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s1 [38, 42] { R6920 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R6920 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R6920 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R6920 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R6920 += 1, R6000 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6920 += 1 };
  s1 -> s1 [38, 42] { R6920 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R6920 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R6920 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R6920 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R6920 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6920 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s1 [38, 42] { R6920 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R6920 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R6920 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R6920 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R6922 += 1, R6001 += 1, R6002 += 1 };
  s0 -> s0 [0, 65535] { R6921 += 1, R6922 += 1 };
  s0 -> s2 [0, 65535] { R6922 += 1, R6002 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R6922 += 1, R6001 += 1, R6002 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6922 += 1, R6002 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R6922 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6922 += 1, R6002 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R6922 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R6924 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s3 [0, 65535] { R6924 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R6923 += 1, R6924 += 1 };
  s0 -> s4 [63, 63] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535] { R6924 += 1 };
  s1 -> s7 [0, 65535] { R6924 += 1, R6004 += 1 };
  s1 -> s1 [0, 65535] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R6924 += 1, R6003 += 1, R6004 += 1 };
  s2 -> s3 [0, 65535] { R6924 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R6924 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R6924 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R6924 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R6924 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R6924 += 1 };
  s7 -> s7 [0, 65535] { R6924 += 1, R6004 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6926 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R6926 += 1, R6005 += 1, R6006 += 1 };
  s0 -> s0 [0, 65535] { R6925 += 1, R6926 += 1 };
  s0 -> s3 [0, 65535] { R6926 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R6926 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R6926 += 1 };
  s1 -> s6 [0, 65535] { R6926 += 1, R6006 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6926 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6926 += 1, R6005 += 1, R6006 += 1 };
  s2 -> s3 [0, 65535] { R6926 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s1 [0, 65535] { R6926 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R6926 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6926 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535] { R6926 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6926 += 1 };
  s6 -> s6 [0, 65535] { R6926 += 1, R6006 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R6928 += 1, R6882 += 1 };
  s0 -> s2 [0, 65535] { R6928 += 1, R6881 += 1, R6882 += 1 };
  s0 -> s0 [0, 65535] { R6927 += 1, R6928 += 1 };
  s0 -> s1 [45, 63] { R6928 += 1, R6882 += 1 };
  s0 -> s3 [87, 87] { R6928 += 1, R6882 += 1 };
  s0 -> s1 [88, 65535] { R6928 += 1, R6882 += 1 };
  s1 -> s1 [0, 43] { R6928 += 1, R6882 += 1 };
  s1 -> s1 [45, 63] { R6928 += 1, R6882 += 1 };
  s1 -> s3 [87, 87] { R6928 += 1, R6882 += 1 };
  s1 -> s1 [88, 65535] { R6928 += 1, R6882 += 1 };
  s2 -> s1 [0, 43] { R6928 += 1, R6882 += 1 };
  s2 -> s2 [0, 65535] { R6928 += 1, R6881 += 1, R6882 += 1 };
  s2 -> s1 [45, 63] { R6928 += 1, R6882 += 1 };
  s2 -> s3 [87, 87] { R6928 += 1, R6882 += 1 };
  s2 -> s1 [88, 65535] { R6928 += 1, R6882 += 1 };
  s3 -> s3 [0, 43] { R6928 += 1, R6882 += 1 };
  s3 -> s3 [0, 65535] { R6928 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R6928 += 1, R6882 += 1 };
  s3 -> s3 [87, 65535] { R6928 += 1, R6882 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R6930 += 1, R6883 += 1, R6884 += 1 };
  s0 -> s0 [0, 65535] { R6929 += 1, R6930 += 1 };
  s0 -> s2 [0, 65535] { R6930 += 1, R6884 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R6930 += 1, R6883 += 1, R6884 += 1 };
  s1 -> s2 [0, 65535] { R6930 += 1, R6884 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6930 += 1 };
  s2 -> s2 [0, 65535] { R6930 += 1, R6884 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6930 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R6932 += 1, R6886 += 1 };
  s0 -> s2 [0, 65535] { R6932 += 1, R6885 += 1, R6886 += 1 };
  s0 -> s0 [0, 65535] { R6931 += 1, R6932 += 1 };
  s0 -> s3 [0, 65535] { R6932 += 1, R6886 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R6932 += 1, R6886 += 1 };
  s0 -> s1 [59, 65535] { R6932 += 1, R6886 += 1 };
  s1 -> s1 [0, 57] { R6932 += 1, R6886 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6932 += 1 };
  s1 -> s4 [58, 58] { R6932 += 1, R6886 += 1 };
  s1 -> s1 [59, 65535] { R6932 += 1, R6886 += 1 };
  s2 -> s1 [0, 57] { R6932 += 1, R6886 += 1 };
  s2 -> s2 [0, 65535] { R6932 += 1, R6885 += 1, R6886 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6932 += 1, R6886 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R6932 += 1, R6886 += 1 };
  s2 -> s1 [59, 65535] { R6932 += 1, R6886 += 1 };
  s3 -> s1 [0, 57] { R6932 += 1, R6886 += 1 };
  s3 -> s5 [0, 65535] { R6932 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6932 += 1, R6886 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R6932 += 1, R6886 += 1 };
  s3 -> s1 [59, 65535] { R6932 += 1, R6886 += 1 };
  s4 -> s4 [0, 65535] { R6932 += 1, R6886 += 1 };
  s5 -> s5 [0, 65535] { R6932 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R6934 += 1, R6888 += 1 };
  s0 -> s2 [0, 65535] { R6934 += 1, R6887 += 1, R6888 += 1 };
  s0 -> s0 [0, 65535] { R6933 += 1, R6934 += 1 };
  s0 -> s3 [0, 65535] { R6934 += 1, R6888 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R6934 += 1, R6888 += 1 };
  s0 -> s1 [88, 65535] { R6934 += 1, R6888 += 1 };
  s1 -> s1 [0, 86] { R6934 += 1, R6888 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6934 += 1 };
  s1 -> s4 [87, 87] { R6934 += 1, R6888 += 1 };
  s1 -> s1 [88, 65535] { R6934 += 1, R6888 += 1 };
  s2 -> s1 [0, 86] { R6934 += 1, R6888 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6934 += 1, R6887 += 1, R6888 += 1 };
  s2 -> s3 [0, 65535] { R6934 += 1, R6888 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R6934 += 1, R6888 += 1 };
  s2 -> s1 [88, 65535] { R6934 += 1, R6888 += 1 };
  s3 -> s1 [0, 86] { R6934 += 1, R6888 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6934 += 1 };
  s3 -> s3 [0, 65535] { R6934 += 1, R6888 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R6934 += 1, R6888 += 1 };
  s3 -> s1 [88, 65535] { R6934 += 1, R6888 += 1 };
  s4 -> s4 [0, 65535] { R6934 += 1, R6888 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6934 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R6935 += 1, R6936 += 1 };
  s0 -> s2 [0, 65535] { R6936 += 1, R6890 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R6936 += 1, R6889 += 1, R6890 += 1 };
  s0 -> s4 [91, 91] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R6936 += 1, R6890 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R6936 += 1 };
  s2 -> s1 [0, 90] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6936 += 1 };
  s2 -> s2 [0, 65535] { R6936 += 1, R6890 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6936 += 1, R6890 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R6936 += 1, R6889 += 1, R6890 += 1 };
  s3 -> s4 [91, 91] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R6936 += 1, R6890 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6936 += 1 };
  s7 -> s7 [0, 65535] { R6936 += 1, R6890 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6936 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R6938 += 1, R6892 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R6938 += 1, R6891 += 1, R6892 += 1 };
  s0 -> s0 [0, 65535] { R6937 += 1, R6938 += 1 };
  s0 -> s3 [0, 65535] { R6938 += 1, R6892 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535] { R6938 += 1 };
  s1 -> s1 [0, 65535] { R6938 += 1, R6892 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6938 += 1, R6892 += 1 };
  s2 -> s1 [0, 65535] { R6938 += 1, R6892 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6938 += 1, R6891 += 1, R6892 += 1 };
  s2 -> s3 [0, 65535] { R6938 += 1, R6892 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535] { R6938 += 1 };
  s3 -> s1 [0, 65535] { R6938 += 1, R6892 += 1, R5998 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6938 += 1, R6892 += 1, R5997 += 1, R5998 += 1 };
  s4 -> s4 [0, 65535] { R6938 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6938 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6938 += 1, R6892 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R6940 += 1, R6894 += 1, R6860 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R6940 += 1, R6894 += 1, R6859 += 1, R6860 += 1 };
  s0 -> s3 [0, 65535] { R6940 += 1, R6893 += 1, R6894 += 1 };
  s0 -> s0 [0, 65535] { R6939 += 1, R6940 += 1 };
  s1 -> s5 [0, 65535] { R6940 += 1 };
  s1 -> s1 [0, 65535] { R6940 += 1, R6894 += 1, R6860 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R6940 += 1, R6894 += 1 };
  s2 -> s5 [0, 65535] { R6940 += 1 };
  s2 -> s1 [0, 65535] { R6940 += 1, R6894 += 1, R6860 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6940 += 1, R6894 += 1, R6859 += 1, R6860 += 1 };
  s3 -> s1 [0, 65535] { R6940 += 1, R6894 += 1, R6860 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6940 += 1, R6894 += 1, R6859 += 1, R6860 += 1 };
  s3 -> s3 [0, 65535] { R6940 += 1, R6893 += 1, R6894 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6940 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6940 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6940 += 1, R6894 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R6942 += 1, R6896 += 1 };
  s0 -> s2 [0, 65535] { R6942 += 1, R6895 += 1, R6896 += 1 };
  s0 -> s0 [0, 65535] { R6941 += 1, R6942 += 1 };
  s1 -> s4 [0, 65535] { R6942 += 1 };
  s1 -> s1 [0, 65535] { R6942 += 1, R6896 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6942 += 1, R6896 += 1 };
  s2 -> s2 [0, 65535] { R6942 += 1, R6895 += 1, R6896 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6942 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s0 -> s2 [0, 65535] { R6944 += 1, R6898 += 1, R6865 += 1, R6866 += 1 };
  s0 -> s0 [0, 65535] { R6943 += 1, R6944 += 1 };
  s0 -> s3 [0, 65535] { R6944 += 1, R6897 += 1, R6898 += 1 };
  s0 -> s4 [87, 87] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s0 -> s1 [88, 65535] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s1 -> s1 [0, 86] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s1 -> s4 [87, 87] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s1 -> s1 [88, 65535] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s2 -> s1 [0, 86] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s2 -> s2 [0, 65535] { R6944 += 1, R6898 += 1, R6865 += 1, R6866 += 1 };
  s2 -> s4 [87, 87] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s2 -> s1 [88, 65535] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s3 -> s1 [0, 86] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s3 -> s2 [0, 65535] { R6944 += 1, R6898 += 1, R6865 += 1, R6866 += 1 };
  s3 -> s3 [0, 65535] { R6944 += 1, R6897 += 1, R6898 += 1 };
  s3 -> s4 [87, 87] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s3 -> s1 [88, 65535] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s4 -> s5 [0, 65535] { R6944 += 1, R6898 += 1 };
  s4 -> s4 [0, 65535] { R6944 += 1, R6898 += 1, R6866 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6944 += 1 };
  s5 -> s5 [0, 65535] { R6944 += 1, R6898 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6944 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6944 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6946 += 1, R6900 += 1, R6867 += 1, R6868 += 1 };
  s0 -> s2 [0, 65535] { R6946 += 1, R6899 += 1, R6900 += 1 };
  s0 -> s3 [0, 65535] { R6946 += 1, R6900 += 1, R6868 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6945 += 1, R6946 += 1 };
  s1 -> s1 [0, 65535] { R6946 += 1, R6900 += 1, R6867 += 1, R6868 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6946 += 1 };
  s1 -> s3 [0, 65535] { R6946 += 1, R6900 += 1, R6868 += 1, R1 += 1 };
  s2 -> s1 [0, 65535] { R6946 += 1, R6900 += 1, R6867 += 1, R6868 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6946 += 1, R6899 += 1, R6900 += 1 };
  s2 -> s3 [0, 65535] { R6946 += 1, R6900 += 1, R6868 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R6946 += 1, R6900 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6946 += 1 };
  s3 -> s3 [0, 65535] { R6946 += 1, R6900 += 1, R6868 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R6946 += 1, R6900 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6946 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6946 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s0 -> s2 [0, 65535] { R6948 += 1, R6901 += 1, R6902 += 1 };
  s0 -> s3 [0, 65535] { R6948 += 1, R6902 += 1, R6869 += 1, R6870 += 1 };
  s0 -> s4 [0, 65535] { R6948 += 1, R6902 += 1, R6870 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R6947 += 1, R6948 += 1 };
  s0 -> s5 [87, 87] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s0 -> s1 [88, 65535] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s1 -> s1 [0, 86] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s1 -> s6 [0, 65535] { R6948 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R6948 += 1, R6902 += 1 };
  s1 -> s5 [87, 87] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s1 -> s1 [88, 65535] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s2 -> s1 [0, 86] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R6948 += 1, R6901 += 1, R6902 += 1 };
  s2 -> s3 [0, 65535] { R6948 += 1, R6902 += 1, R6869 += 1, R6870 += 1 };
  s2 -> s4 [0, 65535] { R6948 += 1, R6902 += 1, R6870 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s2 -> s1 [88, 65535] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s3 -> s1 [0, 86] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s3 -> s6 [0, 65535] { R6948 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R6948 += 1, R6902 += 1, R6869 += 1, R6870 += 1 };
  s3 -> s4 [0, 65535] { R6948 += 1, R6902 += 1, R6870 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s3 -> s1 [88, 65535] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s4 -> s1 [0, 86] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s4 -> s6 [0, 65535] { R6948 += 1 };
  s4 -> s7 [0, 65535] { R6948 += 1, R6902 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R6948 += 1, R6902 += 1, R6870 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s4 -> s1 [88, 65535] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s5 -> s5 [0, 65535] { R6948 += 1, R6902 += 1, R6870 += 1 };
  s6 -> s6 [0, 65535] { R6948 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R6948 += 1 };
  s7 -> s7 [0, 65535] { R6948 += 1, R6902 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s0 -> s2 [0, 65535] { R6950 += 1, R6903 += 1, R6904 += 1 };
  s0 -> s3 [0, 65535] { R6950 += 1, R6904 += 1, R6872 += 1, R6853 += 1, R6854 += 1 };
  s0 -> s0 [0, 65535] { R6949 += 1, R6950 += 1 };
  s0 -> s4 [0, 65535] { R6950 += 1, R6904 += 1, R6871 += 1, R6872 += 1 };
  s0 -> s1 [88, 65535] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s1 -> s1 [0, 86] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6950 += 1, R6904 += 1, R6872 += 1 };
  s1 -> s7 [0, 65535] { R6950 += 1, R6904 += 1 };
  s1 -> s6 [0, 65535] { R6950 += 1 };
  s1 -> s1 [88, 65535] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s2 -> s1 [0, 86] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s2 -> s2 [0, 65535] { R6950 += 1, R6903 += 1, R6904 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6950 += 1, R6904 += 1, R6872 += 1, R6853 += 1, R6854 += 1 };
  s2 -> s4 [0, 65535] { R6950 += 1, R6904 += 1, R6871 += 1, R6872 += 1 };
  s2 -> s1 [88, 65535] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s3 -> s1 [0, 86] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R6950 += 1, R6904 += 1 };
  s3 -> s6 [0, 65535] { R6950 += 1 };
  s3 -> s3 [0, 65535] { R6950 += 1, R6904 += 1, R6872 += 1, R6853 += 1, R6854 += 1 };
  s3 -> s1 [88, 65535] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s4 -> s1 [0, 86] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6950 += 1 };
  s4 -> s3 [0, 65535] { R6950 += 1, R6904 += 1, R6872 += 1, R6853 += 1, R6854 += 1 };
  s4 -> s4 [0, 65535] { R6950 += 1, R6904 += 1, R6871 += 1, R6872 += 1 };
  s4 -> s1 [88, 65535] { R6950 += 1, R6904 += 1, R6872 += 1, R6854 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6950 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6950 += 1, R6904 += 1 };
  s7 -> s6 [0, 65535] { R6950 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1, R6855 += 1, R6856 += 1 };
  s0 -> s0 [0, 65535] { R6951 += 1, R6952 += 1 };
  s0 -> s2 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1, R6856 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R6952 += 1, R6905 += 1, R6906 += 1 };
  s0 -> s4 [0, 65535] { R6952 += 1, R6906 += 1, R6873 += 1, R6874 += 1 };
  s1 -> s1 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1, R6855 += 1, R6856 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6952 += 1 };
  s1 -> s2 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1, R6856 += 1, R5988 += 1 };
  s1 -> s7 [0, 65535] { R6952 += 1, R6906 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6952 += 1 };
  s2 -> s2 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1, R6856 += 1, R5988 += 1 };
  s2 -> s7 [0, 65535] { R6952 += 1, R6906 += 1 };
  s2 -> s8 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1 };
  s3 -> s1 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1, R6855 += 1, R6856 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1, R6856 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R6952 += 1, R6905 += 1, R6906 += 1 };
  s3 -> s4 [0, 65535] { R6952 += 1, R6906 += 1, R6873 += 1, R6874 += 1 };
  s4 -> s1 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1, R6855 += 1, R6856 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6952 += 1 };
  s4 -> s2 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1, R6856 += 1, R5988 += 1 };
  s4 -> s4 [0, 65535] { R6952 += 1, R6906 += 1, R6873 += 1, R6874 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6952 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6952 += 1 };
  s7 -> s7 [0, 65535] { R6952 += 1, R6906 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R6952 += 1 };
  s8 -> s7 [0, 65535] { R6952 += 1, R6906 += 1 };
  s8 -> s8 [0, 65535] { R6952 += 1, R6906 += 1, R6874 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R6954 += 1, R6907 += 1, R6908 += 1 };
  s0 -> s2 [0, 65535] { R6954 += 1, R6908 += 1, R6876 += 1, R6857 += 1, R6858 += 1 };
  s0 -> s3 [0, 65535] { R6954 += 1, R6908 += 1, R6875 += 1, R6876 += 1 };
  s0 -> s0 [0, 65535] { R6953 += 1, R6954 += 1 };
  s0 -> s4 [111, 111] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s1 -> s1 [0, 65535] { R6954 += 1, R6907 += 1, R6908 += 1 };
  s1 -> s2 [0, 65535] { R6954 += 1, R6908 += 1, R6876 += 1, R6857 += 1, R6858 += 1 };
  s1 -> s3 [0, 65535] { R6954 += 1, R6908 += 1, R6875 += 1, R6876 += 1 };
  s1 -> s4 [111, 111] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s2 -> s2 [0, 65535] { R6954 += 1, R6908 += 1, R6876 += 1, R6857 += 1, R6858 += 1 };
  s2 -> s4 [111, 111] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s3 -> s2 [0, 65535] { R6954 += 1, R6908 += 1, R6876 += 1, R6857 += 1, R6858 += 1 };
  s3 -> s3 [0, 65535] { R6954 += 1, R6908 += 1, R6875 += 1, R6876 += 1 };
  s3 -> s4 [111, 111] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s4 -> s5 [99, 99] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s5 -> s6 [97, 97] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s6 -> s7 [108, 108] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s7 -> s8 [104, 104] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s8 -> s9 [111, 111] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s9 -> s10 [115, 115] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s10 -> s11 [116, 116] { R6954 += 1, R6908 += 1, R6876 += 1, R6858 += 1 };
  s11 -> s11 [0, 65535] { R6954 += 1, R6908 += 1, R6876 += 1 };
  s11 -> s12 [0, 65535] { R6954 += 1, R6908 += 1 };
  s11 -> s13 [0, 65535];
  s11 -> s14 [0, 65535] { R6954 += 1 };
  s12 -> s12 [0, 65535] { R6954 += 1, R6908 += 1 };
  s12 -> s13 [0, 65535];
  s12 -> s14 [0, 65535] { R6954 += 1 };
  s13 -> s13 [0, 65535];
  s14 -> s13 [0, 65535];
  s14 -> s14 [0, 65535] { R6954 += 1 };
  accepting s11, s12, s13, s14;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6956 += 1, R6909 += 1, R6910 += 1 };
  s0 -> s0 [0, 65535] { R6955 += 1, R6956 += 1 };
  s0 -> s2 [0, 65535] { R6956 += 1, R6910 += 1, R6877 += 1, R6878 += 1 };
  s0 -> s3 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1, R6861 += 1, R6862 += 1 };
  s0 -> s4 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1, R6862 += 1, R5989 += 1 };
  s1 -> s1 [0, 65535] { R6956 += 1, R6909 += 1, R6910 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R6956 += 1, R6910 += 1, R6877 += 1, R6878 += 1 };
  s1 -> s3 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1, R6861 += 1, R6862 += 1 };
  s1 -> s4 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1, R6862 += 1, R5989 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R6956 += 1 };
  s2 -> s2 [0, 65535] { R6956 += 1, R6910 += 1, R6877 += 1, R6878 += 1 };
  s2 -> s3 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1, R6861 += 1, R6862 += 1 };
  s2 -> s4 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1, R6862 += 1, R5989 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R6956 += 1 };
  s3 -> s3 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1, R6861 += 1, R6862 += 1 };
  s3 -> s4 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1, R6862 += 1, R5989 += 1 };
  s3 -> s8 [0, 65535] { R6956 += 1, R6910 += 1 };
  s4 -> s5 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6956 += 1 };
  s4 -> s4 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1, R6862 += 1, R5989 += 1 };
  s4 -> s8 [0, 65535] { R6956 += 1, R6910 += 1 };
  s5 -> s5 [0, 65535] { R6956 += 1, R6910 += 1, R6878 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6956 += 1 };
  s5 -> s8 [0, 65535] { R6956 += 1, R6910 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6956 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R6956 += 1 };
  s8 -> s8 [0, 65535] { R6956 += 1, R6910 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6958 += 1, R6911 += 1, R6912 += 1 };
  s0 -> s0 [0, 65535] { R6957 += 1, R6958 += 1 };
  s0 -> s2 [0, 65535] { R6958 += 1, R6912 += 1, R6880 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s3 [0, 65535] { R6958 += 1, R6912 += 1, R6879 += 1, R6880 += 1 };
  s0 -> s4 [108, 108] { R6958 += 1, R6912 += 1, R6880 += 1, R6864 += 1 };
  s1 -> s1 [0, 65535] { R6958 += 1, R6911 += 1, R6912 += 1 };
  s1 -> s2 [0, 65535] { R6958 += 1, R6912 += 1, R6880 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s3 [0, 65535] { R6958 += 1, R6912 += 1, R6879 += 1, R6880 += 1 };
  s1 -> s4 [108, 108] { R6958 += 1, R6912 += 1, R6880 += 1, R6864 += 1 };
  s2 -> s2 [0, 65535] { R6958 += 1, R6912 += 1, R6880 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s4 [108, 108] { R6958 += 1, R6912 += 1, R6880 += 1, R6864 += 1 };
  s3 -> s2 [0, 65535] { R6958 += 1, R6912 += 1, R6880 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s3 [0, 65535] { R6958 += 1, R6912 += 1, R6879 += 1, R6880 += 1 };
  s3 -> s4 [108, 108] { R6958 += 1, R6912 += 1, R6880 += 1, R6864 += 1 };
  s4 -> s5 [0, 65535] { R6958 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6958 += 1, R6912 += 1 };
  s4 -> s4 [0, 65535] { R6958 += 1, R6912 += 1, R6880 += 1 };
  s5 -> s5 [0, 65535] { R6958 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R6958 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6958 += 1, R6912 += 1 };
  accepting s4, s5, s6, s7;
};
};
constraint R1 = R6858 && R2 = R6880 && R3 = R6006 && R4 = R6958 && R15 = 0 && R16 = R6912 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R6912 = 1 && R6000 = R6006 && R6001 - R6912 = 1 && R6002 = R6006 && R6003 - R6912 = 1 && R6004 = R6006 && R6005 - R6912 = 1 && R6857 = 0 && R6863 = 0 && R6864 = 0 && R6865 = 0 && R6866 = R6880 && R6867 = 0 && R6868 = R6880 && R6869 = 0 && R6870 = R6880 && R6871 = 0 && R6872 = R6880 && R6873 = 0 && R6874 = R6880 && R6875 = 0 && R6876 = R6880 && R6877 = 0 && R6878 = R6880 && R6879 = 0 && R6881 = 0 && R6882 = R6912 && R6883 = 0 && R6884 = R6912 && R6885 = 0 && R6886 = R6912 && R6887 = 0 && R6888 = R6912 && R6889 = 0 && R6890 = R6912 && R6891 = 0 && R6892 = R6912 && R6893 = 0 && R6894 = R6912 && R6895 = 0 && R6896 = R6912 && R6897 = 0 && R6898 = R6912 && R6899 = 0 && R6900 = R6912 && R6901 = 0 && R6902 = R6912 && R6903 = 0 && R6904 = R6912 && R6905 = 0 && R6906 = R6912 && R6907 = 0 && R6908 = R6912 && R6909 = 0 && R6910 = R6912 && R6911 = 0 && R6913 = 10 && R6914 = R6958 && R6915 = 10 && R6916 = R6958 && R6917 = 10 && R6918 = R6958 && R6919 = 10 && R6920 = R6958 && R6921 = 10 && R6922 = R6958 && R6923 = 10 && R6924 = R6958 && R6925 = 10 && R6926 = R6958 && R6927 = 10 && R6928 = R6958 && R6929 = 10 && R6930 = R6958 && R6931 = 10 && R6932 = R6958 && R6933 = 10 && R6934 = R6958 && R6935 = 10 && R6936 = R6958 && R6937 = 10 && R6938 = R6958 && R6939 = 10 && R6940 = R6958 && R6941 = 10 && R6942 = R6958 && R6943 = 10 && R6944 = R6958 && R6945 = 10 && R6946 = R6958 && R6947 = 10 && R6948 = R6958 && R6949 = 10 && R6950 = R6958 && R6951 = 10 && R6952 = R6958 && R6953 = 10 && R6954 = R6958 && R6955 = 10 && R6956 = R6958 && R6957 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R6912 < R6006 && -1 < R6858 && 0 < R6880 && -1 < R6912 && 9 < R6958 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R6853 != 0 || R6854 = R6858 || (R5988 = 0 && R6858 = 0)) && (R6855 != 0 || R6856 = R6858 || (R5988 = 0 && R6858 = 0)) && (R5989 = 0 || (R6861 = 0 && R6862 = 0)) && (R5990 = 0 || (R6859 = 0 && R6860 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R6853 = 0 || (R5988 = 0 && R6858 = 0)) && (R6855 = 0 || (R5988 = 0 && R6858 = 0));
// End of Parikh automata intersection problem
