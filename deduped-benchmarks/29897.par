// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R11299, R11300, R11301, R11302, R11303, R11304, R11305, R11306, R11307, R11308, R11309, R11310, R11311, R11312, R11313, R11314, R11315, R11316, R11317, R11318, R11319, R11320, R11321, R11322, R11323, R11324, R11325, R11326, R11327, R11328, R11329, R11330, R11331, R11332, R11333, R11334, R11335, R11336, R11337, R11338, R11339, R11340, R11341, R11342, R11343, R11344, R11345, R11346, R11347, R11348, R11349, R11350, R11351, R11352, R11353, R11354, R11355, R11356, R11357, R11358, R11359, R11360, R11361, R11362, R11363, R11364, R11365, R11366, R11367, R11368, R11369, R11370, R11371, R11372, R11373, R11374, R11375, R11376, R11377, R11378, R11379, R11380, R11381, R11382, R11383, R11384, R11385, R11386, R11387, R11388, R11389, R11390, R11391, R11392, R11393, R11394, R11395, R11396, R11397, R11398, R11399, R11400, R11401, R11402, R11403, R11404, R11405, R11406, R11407, R11408, R11409, R11410, R11411, R11412, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R11368 += 1 };
  s0 -> s0 [0, 65535] { R11367 += 1, R11368 += 1 };
  s0 -> s2 [46, 46] { R11368 += 1 };
  s0 -> s3 [47, 47] { R11368 += 1 };
  s0 -> s1 [48, 65535] { R11368 += 1 };
  s1 -> s1 [0, 45] { R11368 += 1 };
  s1 -> s2 [46, 46] { R11368 += 1 };
  s1 -> s3 [47, 47] { R11368 += 1 };
  s1 -> s1 [48, 65535] { R11368 += 1 };
  s2 -> s1 [0, 45] { R11368 += 1 };
  s2 -> s2 [46, 46] { R11368 += 1 };
  s2 -> s3 [47, 47] { R11368 += 1 };
  s2 -> s1 [48, 114] { R11368 += 1 };
  s2 -> s8 [115, 115] { R11368 += 1 };
  s2 -> s1 [116, 65535] { R11368 += 1 };
  s3 -> s3 [0, 45] { R11368 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R11368 += 1 };
  s3 -> s3 [47, 65535] { R11368 += 1 };
  s4 -> s3 [0, 45] { R11368 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R11368 += 1 };
  s4 -> s3 [47, 114] { R11368 += 1 };
  s4 -> s5 [115, 115] { R11368 += 1 };
  s4 -> s3 [116, 65535] { R11368 += 1 };
  s5 -> s3 [0, 45] { R11368 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R11368 += 1 };
  s5 -> s3 [47, 110] { R11368 += 1 };
  s5 -> s6 [111, 111] { R11368 += 1 };
  s5 -> s3 [112, 65535] { R11368 += 1 };
  s6 -> s3 [0, 45] { R11368 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R11368 += 1 };
  s6 -> s3 [47, 98] { R11368 += 1 };
  s6 -> s7 [99, 99] { R11368 += 1 };
  s6 -> s3 [100, 65535] { R11368 += 1 };
  s7 -> s3 [0, 45] { R11368 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R11368 += 1 };
  s7 -> s3 [47, 106] { R11368 += 1 };
  s7 -> s3 [108, 65535] { R11368 += 1 };
  s8 -> s1 [0, 45] { R11368 += 1 };
  s8 -> s2 [46, 46] { R11368 += 1 };
  s8 -> s3 [47, 47] { R11368 += 1 };
  s8 -> s1 [48, 110] { R11368 += 1 };
  s8 -> s9 [111, 111] { R11368 += 1 };
  s8 -> s1 [112, 65535] { R11368 += 1 };
  s9 -> s1 [0, 45] { R11368 += 1 };
  s9 -> s2 [46, 46] { R11368 += 1 };
  s9 -> s3 [47, 47] { R11368 += 1 };
  s9 -> s1 [48, 98] { R11368 += 1 };
  s9 -> s10 [99, 99] { R11368 += 1 };
  s9 -> s1 [100, 65535] { R11368 += 1 };
  s10 -> s1 [0, 45] { R11368 += 1 };
  s10 -> s2 [46, 46] { R11368 += 1 };
  s10 -> s3 [47, 47] { R11368 += 1 };
  s10 -> s1 [48, 106] { R11368 += 1 };
  s10 -> s1 [108, 65535] { R11368 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R11370 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R11369 += 1, R11370 += 1 };
  s1 -> s1 [0, 65535] { R11370 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R11372 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R11372 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R11371 += 1, R11372 += 1 };
  s0 -> s3 [47, 47] { R11372 += 1 };
  s0 -> s1 [48, 65535] { R11372 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R11372 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R11372 += 1 };
  s1 -> s1 [48, 65535] { R11372 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R11372 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R11372 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R11372 += 1 };
  s2 -> s1 [48, 65535] { R11372 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R11372 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R11374 += 1, R11300 += 1 };
  s0 -> s0 [0, 65535] { R11373 += 1, R11374 += 1 };
  s0 -> s2 [0, 65535] { R11374 += 1, R11299 += 1, R11300 += 1 };
  s0 -> s1 [38, 42] { R11374 += 1, R11300 += 1 };
  s0 -> s1 [44, 45] { R11374 += 1, R11300 += 1 };
  s0 -> s1 [47, 62] { R11374 += 1, R11300 += 1 };
  s0 -> s1 [64, 65535] { R11374 += 1, R11300 += 1 };
  s1 -> s1 [0, 36] { R11374 += 1, R11300 += 1 };
  s1 -> s1 [0, 65535] { R11374 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R11374 += 1, R11300 += 1 };
  s1 -> s1 [44, 45] { R11374 += 1, R11300 += 1 };
  s1 -> s1 [47, 62] { R11374 += 1, R11300 += 1 };
  s1 -> s1 [64, 65535] { R11374 += 1, R11300 += 1 };
  s2 -> s1 [0, 36] { R11374 += 1, R11300 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11374 += 1, R11299 += 1, R11300 += 1 };
  s2 -> s1 [38, 42] { R11374 += 1, R11300 += 1 };
  s2 -> s1 [44, 45] { R11374 += 1, R11300 += 1 };
  s2 -> s1 [47, 62] { R11374 += 1, R11300 += 1 };
  s2 -> s1 [64, 65535] { R11374 += 1, R11300 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R11375 += 1, R11376 += 1 };
  s0 -> s1 [0, 65535] { R11376 += 1, R11302 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R11376 += 1, R11301 += 1, R11302 += 1 };
  s1 -> s1 [0, 65535] { R11376 += 1, R11302 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R11376 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11376 += 1, R11302 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R11376 += 1, R11301 += 1, R11302 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11376 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R11378 += 1, R11304 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R11378 += 1, R11303 += 1, R11304 += 1 };
  s0 -> s0 [0, 65535] { R11377 += 1, R11378 += 1 };
  s0 -> s4 [63, 63] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R11378 += 1, R11304 += 1 };
  s1 -> s6 [0, 65535] { R11378 += 1 };
  s2 -> s1 [0, 62] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11378 += 1, R11304 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R11378 += 1 };
  s2 -> s4 [63, 63] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R11378 += 1, R11304 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R11378 += 1, R11303 += 1, R11304 += 1 };
  s3 -> s4 [63, 63] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R11378 += 1, R11304 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11378 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11378 += 1, R11304 += 1 };
  s7 -> s6 [0, 65535] { R11378 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11380 += 1, R11306 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s2 [0, 65535] { R11380 += 1, R11305 += 1, R11306 += 1 };
  s0 -> s3 [0, 65535] { R11380 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R11379 += 1, R11380 += 1 };
  s1 -> s1 [0, 65535] { R11380 += 1, R11306 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s4 [0, 65535] { R11380 += 1 };
  s1 -> s3 [0, 65535] { R11380 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R11380 += 1, R11306 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s2 [0, 65535] { R11380 += 1, R11305 += 1, R11306 += 1 };
  s2 -> s3 [0, 65535] { R11380 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R11380 += 1 };
  s3 -> s3 [0, 65535] { R11380 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s3 -> s5 [0, 65535] { R11380 += 1, R11306 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11380 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R11380 += 1 };
  s5 -> s5 [0, 65535] { R11380 += 1, R11306 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R11382 += 1, R11336 += 1 };
  s0 -> s0 [0, 65535] { R11381 += 1, R11382 += 1 };
  s0 -> s2 [0, 65535] { R11382 += 1, R11335 += 1, R11336 += 1 };
  s0 -> s1 [45, 63] { R11382 += 1, R11336 += 1 };
  s0 -> s3 [87, 87] { R11382 += 1, R11336 += 1 };
  s0 -> s1 [88, 65535] { R11382 += 1, R11336 += 1 };
  s1 -> s1 [0, 43] { R11382 += 1, R11336 += 1 };
  s1 -> s1 [45, 63] { R11382 += 1, R11336 += 1 };
  s1 -> s3 [87, 87] { R11382 += 1, R11336 += 1 };
  s1 -> s1 [88, 65535] { R11382 += 1, R11336 += 1 };
  s2 -> s1 [0, 43] { R11382 += 1, R11336 += 1 };
  s2 -> s2 [0, 65535] { R11382 += 1, R11335 += 1, R11336 += 1 };
  s2 -> s1 [45, 63] { R11382 += 1, R11336 += 1 };
  s2 -> s3 [87, 87] { R11382 += 1, R11336 += 1 };
  s2 -> s1 [88, 65535] { R11382 += 1, R11336 += 1 };
  s3 -> s3 [0, 43] { R11382 += 1, R11336 += 1 };
  s3 -> s3 [0, 65535] { R11382 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R11382 += 1, R11336 += 1 };
  s3 -> s3 [87, 65535] { R11382 += 1, R11336 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R11383 += 1, R11384 += 1 };
  s0 -> s1 [0, 65535] { R11384 += 1, R11338 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R11384 += 1, R11337 += 1, R11338 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11384 += 1, R11338 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R11384 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11384 += 1, R11338 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R11384 += 1, R11337 += 1, R11338 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11384 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R11386 += 1, R11340 += 1 };
  s0 -> s2 [0, 65535] { R11386 += 1, R11340 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R11385 += 1, R11386 += 1 };
  s0 -> s3 [0, 65535] { R11386 += 1, R11339 += 1, R11340 += 1 };
  s0 -> s4 [58, 58] { R11386 += 1, R11340 += 1 };
  s0 -> s1 [59, 65535] { R11386 += 1, R11340 += 1 };
  s1 -> s1 [0, 57] { R11386 += 1, R11340 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11386 += 1 };
  s1 -> s4 [58, 58] { R11386 += 1, R11340 += 1 };
  s1 -> s1 [59, 65535] { R11386 += 1, R11340 += 1 };
  s2 -> s1 [0, 57] { R11386 += 1, R11340 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11386 += 1, R11340 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R11386 += 1 };
  s2 -> s4 [58, 58] { R11386 += 1, R11340 += 1 };
  s2 -> s1 [59, 65535] { R11386 += 1, R11340 += 1 };
  s3 -> s1 [0, 57] { R11386 += 1, R11340 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R11386 += 1, R11340 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R11386 += 1, R11339 += 1, R11340 += 1 };
  s3 -> s4 [58, 58] { R11386 += 1, R11340 += 1 };
  s3 -> s1 [59, 65535] { R11386 += 1, R11340 += 1 };
  s4 -> s4 [0, 65535] { R11386 += 1, R11340 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11386 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R11388 += 1, R11342 += 1 };
  s0 -> s2 [0, 65535] { R11388 += 1, R11342 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R11388 += 1, R11341 += 1, R11342 += 1 };
  s0 -> s0 [0, 65535] { R11387 += 1, R11388 += 1 };
  s0 -> s4 [87, 87] { R11388 += 1, R11342 += 1 };
  s0 -> s1 [88, 65535] { R11388 += 1, R11342 += 1 };
  s1 -> s1 [0, 86] { R11388 += 1, R11342 += 1 };
  s1 -> s1 [0, 65535] { R11388 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R11388 += 1, R11342 += 1 };
  s1 -> s1 [88, 65535] { R11388 += 1, R11342 += 1 };
  s2 -> s1 [0, 86] { R11388 += 1, R11342 += 1 };
  s2 -> s2 [0, 65535] { R11388 += 1, R11342 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R11388 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [87, 87] { R11388 += 1, R11342 += 1 };
  s2 -> s1 [88, 65535] { R11388 += 1, R11342 += 1 };
  s3 -> s1 [0, 86] { R11388 += 1, R11342 += 1 };
  s3 -> s2 [0, 65535] { R11388 += 1, R11342 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R11388 += 1, R11341 += 1, R11342 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [87, 87] { R11388 += 1, R11342 += 1 };
  s3 -> s1 [88, 65535] { R11388 += 1, R11342 += 1 };
  s4 -> s4 [0, 65535] { R11388 += 1, R11342 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11388 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R11390 += 1, R11344 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R11390 += 1, R11343 += 1, R11344 += 1 };
  s0 -> s0 [0, 65535] { R11389 += 1, R11390 += 1 };
  s0 -> s4 [91, 91] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R11390 += 1 };
  s1 -> s7 [0, 65535] { R11390 += 1, R11344 += 1 };
  s2 -> s1 [0, 90] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R11390 += 1, R11344 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11390 += 1 };
  s2 -> s4 [91, 91] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R11390 += 1, R11344 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11390 += 1, R11343 += 1, R11344 += 1 };
  s3 -> s4 [91, 91] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R11390 += 1, R11344 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11390 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11390 += 1 };
  s7 -> s7 [0, 65535] { R11390 += 1, R11344 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R11392 += 1, R11346 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s2 [0, 65535] { R11392 += 1, R11345 += 1, R11346 += 1 };
  s0 -> s3 [0, 65535] { R11392 += 1, R11346 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R11391 += 1, R11392 += 1 };
  s1 -> s1 [0, 65535] { R11392 += 1, R11346 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535] { R11392 += 1 };
  s1 -> s3 [0, 65535] { R11392 += 1, R11346 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R11392 += 1, R11346 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s2 [0, 65535] { R11392 += 1, R11345 += 1, R11346 += 1 };
  s2 -> s3 [0, 65535] { R11392 += 1, R11346 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R11392 += 1 };
  s3 -> s5 [0, 65535] { R11392 += 1, R11346 += 1 };
  s3 -> s3 [0, 65535] { R11392 += 1, R11346 += 1, R5998 += 1, R6 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11392 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R11392 += 1 };
  s5 -> s5 [0, 65535] { R11392 += 1, R11346 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R11394 += 1, R11347 += 1, R11348 += 1 };
  s0 -> s0 [0, 65535] { R11393 += 1, R11394 += 1 };
  s0 -> s2 [0, 65535] { R11394 += 1, R11348 += 1, R11312 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R11394 += 1, R11348 += 1, R11311 += 1, R11312 += 1 };
  s1 -> s1 [0, 65535] { R11394 += 1, R11347 += 1, R11348 += 1 };
  s1 -> s2 [0, 65535] { R11394 += 1, R11348 += 1, R11312 += 1, R5990 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R11394 += 1, R11348 += 1, R11311 += 1, R11312 += 1 };
  s2 -> s4 [0, 65535] { R11394 += 1 };
  s2 -> s2 [0, 65535] { R11394 += 1, R11348 += 1, R11312 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11394 += 1, R11348 += 1 };
  s3 -> s4 [0, 65535] { R11394 += 1 };
  s3 -> s2 [0, 65535] { R11394 += 1, R11348 += 1, R11312 += 1, R5990 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11394 += 1, R11348 += 1, R11311 += 1, R11312 += 1 };
  s4 -> s4 [0, 65535] { R11394 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11394 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11394 += 1, R11348 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R11396 += 1, R11350 += 1, R11313 += 1, R11314 += 1 };
  s0 -> s0 [0, 65535] { R11395 += 1, R11396 += 1 };
  s0 -> s2 [0, 65535] { R11396 += 1, R11349 += 1, R11350 += 1 };
  s0 -> s3 [108, 108] { R11396 += 1, R11350 += 1, R11314 += 1 };
  s1 -> s1 [0, 65535] { R11396 += 1, R11350 += 1, R11313 += 1, R11314 += 1 };
  s1 -> s3 [108, 108] { R11396 += 1, R11350 += 1, R11314 += 1 };
  s2 -> s1 [0, 65535] { R11396 += 1, R11350 += 1, R11313 += 1, R11314 += 1 };
  s2 -> s2 [0, 65535] { R11396 += 1, R11349 += 1, R11350 += 1 };
  s2 -> s3 [108, 108] { R11396 += 1, R11350 += 1, R11314 += 1 };
  s3 -> s4 [111, 111] { R11396 += 1, R11350 += 1, R11314 += 1 };
  s4 -> s5 [99, 99] { R11396 += 1, R11350 += 1, R11314 += 1 };
  s5 -> s6 [97, 97] { R11396 += 1, R11350 += 1, R11314 += 1 };
  s6 -> s7 [108, 108] { R11396 += 1, R11350 += 1, R11314 += 1 };
  s7 -> s8 [104, 104] { R11396 += 1, R11350 += 1, R11314 += 1 };
  s8 -> s9 [111, 111] { R11396 += 1, R11350 += 1, R11314 += 1 };
  s9 -> s9 [0, 65535] { R11396 += 1, R11350 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R11396 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R11396 += 1 };
  accepting s9, s10, s11;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s0 -> s0 [0, 65535] { R11397 += 1, R11398 += 1 };
  s0 -> s2 [0, 65535] { R11398 += 1, R11351 += 1, R11352 += 1 };
  s0 -> s3 [0, 65535] { R11398 += 1, R11352 += 1, R11319 += 1, R11320 += 1 };
  s0 -> s4 [87, 87] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s0 -> s1 [88, 65535] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s1 -> s1 [0, 86] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s1 -> s4 [87, 87] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s1 -> s1 [88, 65535] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s2 -> s1 [0, 86] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s2 -> s2 [0, 65535] { R11398 += 1, R11351 += 1, R11352 += 1 };
  s2 -> s3 [0, 65535] { R11398 += 1, R11352 += 1, R11319 += 1, R11320 += 1 };
  s2 -> s4 [87, 87] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s2 -> s1 [88, 65535] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s3 -> s1 [0, 86] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s3 -> s3 [0, 65535] { R11398 += 1, R11352 += 1, R11319 += 1, R11320 += 1 };
  s3 -> s4 [87, 87] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s3 -> s1 [88, 65535] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s4 -> s5 [0, 65535] { R11398 += 1, R11352 += 1 };
  s4 -> s6 [0, 65535] { R11398 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R11398 += 1, R11352 += 1, R11320 += 1 };
  s5 -> s5 [0, 65535] { R11398 += 1, R11352 += 1 };
  s5 -> s6 [0, 65535] { R11398 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R11398 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11400 += 1, R11353 += 1, R11354 += 1 };
  s0 -> s2 [0, 65535] { R11400 += 1, R11354 += 1, R11322 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R11399 += 1, R11400 += 1 };
  s0 -> s3 [0, 65535] { R11400 += 1, R11354 += 1, R11321 += 1, R11322 += 1 };
  s1 -> s1 [0, 65535] { R11400 += 1, R11353 += 1, R11354 += 1 };
  s1 -> s2 [0, 65535] { R11400 += 1, R11354 += 1, R11322 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R11400 += 1, R11354 += 1, R11321 += 1, R11322 += 1 };
  s2 -> s2 [0, 65535] { R11400 += 1, R11354 += 1, R11322 += 1, R1 += 1 };
  s2 -> s4 [0, 65535] { R11400 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11400 += 1, R11354 += 1 };
  s3 -> s2 [0, 65535] { R11400 += 1, R11354 += 1, R11322 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R11400 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11400 += 1, R11354 += 1, R11321 += 1, R11322 += 1 };
  s4 -> s4 [0, 65535] { R11400 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11400 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11400 += 1, R11354 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s0 -> s2 [0, 65535] { R11402 += 1, R11355 += 1, R11356 += 1 };
  s0 -> s0 [0, 65535] { R11401 += 1, R11402 += 1 };
  s0 -> s3 [0, 65535] { R11402 += 1, R11356 += 1, R11323 += 1, R11324 += 1 };
  s0 -> s4 [0, 65535] { R11402 += 1, R11356 += 1, R11324 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s0 -> s1 [88, 65535] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s1 -> s1 [0, 86] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R11402 += 1, R11356 += 1 };
  s1 -> s8 [0, 65535] { R11402 += 1 };
  s1 -> s5 [87, 87] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s1 -> s1 [88, 65535] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s2 -> s1 [0, 86] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s2 -> s2 [0, 65535] { R11402 += 1, R11355 += 1, R11356 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R11402 += 1, R11356 += 1, R11323 += 1, R11324 += 1 };
  s2 -> s4 [0, 65535] { R11402 += 1, R11356 += 1, R11324 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s2 -> s1 [88, 65535] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s3 -> s1 [0, 86] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R11402 += 1, R11356 += 1, R11323 += 1, R11324 += 1 };
  s3 -> s4 [0, 65535] { R11402 += 1, R11356 += 1, R11324 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R11402 += 1 };
  s3 -> s5 [87, 87] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s3 -> s1 [88, 65535] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s4 -> s1 [0, 86] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s4 -> s6 [0, 65535] { R11402 += 1, R11356 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R11402 += 1, R11356 += 1, R11324 += 1, R7 += 1 };
  s4 -> s8 [0, 65535] { R11402 += 1 };
  s4 -> s5 [87, 87] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s4 -> s1 [88, 65535] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s5 -> s5 [0, 65535] { R11402 += 1, R11356 += 1, R11324 += 1 };
  s6 -> s6 [0, 65535] { R11402 += 1, R11356 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R11402 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R11402 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s0 -> s2 [0, 65535] { R11404 += 1, R11358 += 1, R11325 += 1, R11326 += 1 };
  s0 -> s0 [0, 65535] { R11403 += 1, R11404 += 1 };
  s0 -> s3 [0, 65535] { R11404 += 1, R11358 += 1, R11326 += 1, R11307 += 1, R11308 += 1 };
  s0 -> s4 [0, 65535] { R11404 += 1, R11357 += 1, R11358 += 1 };
  s0 -> s1 [88, 65535] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s1 -> s1 [0, 86] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s1 -> s6 [0, 65535] { R11404 += 1, R11358 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R11404 += 1 };
  s1 -> s1 [0, 65535] { R11404 += 1, R11358 += 1, R11326 += 1 };
  s1 -> s1 [88, 65535] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s2 -> s1 [0, 86] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R11404 += 1 };
  s2 -> s2 [0, 65535] { R11404 += 1, R11358 += 1, R11325 += 1, R11326 += 1 };
  s2 -> s3 [0, 65535] { R11404 += 1, R11358 += 1, R11326 += 1, R11307 += 1, R11308 += 1 };
  s2 -> s1 [88, 65535] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s3 -> s1 [0, 86] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s3 -> s6 [0, 65535] { R11404 += 1, R11358 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R11404 += 1 };
  s3 -> s3 [0, 65535] { R11404 += 1, R11358 += 1, R11326 += 1, R11307 += 1, R11308 += 1 };
  s3 -> s1 [88, 65535] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s4 -> s1 [0, 86] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R11404 += 1, R11358 += 1, R11325 += 1, R11326 += 1 };
  s4 -> s3 [0, 65535] { R11404 += 1, R11358 += 1, R11326 += 1, R11307 += 1, R11308 += 1 };
  s4 -> s4 [0, 65535] { R11404 += 1, R11357 += 1, R11358 += 1 };
  s4 -> s1 [88, 65535] { R11404 += 1, R11358 += 1, R11326 += 1, R11308 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11404 += 1, R11358 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s7 [0, 65535] { R11404 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11404 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11406 += 1, R11360 += 1, R11327 += 1, R11328 += 1 };
  s0 -> s2 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1, R11310 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1, R11309 += 1, R11310 += 1 };
  s0 -> s4 [0, 65535] { R11406 += 1, R11359 += 1, R11360 += 1 };
  s0 -> s0 [0, 65535] { R11405 += 1, R11406 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11406 += 1, R11360 += 1, R11327 += 1, R11328 += 1 };
  s1 -> s2 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1, R11310 += 1, R5988 += 1 };
  s1 -> s3 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1, R11309 += 1, R11310 += 1 };
  s1 -> s6 [0, 65535] { R11406 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1, R11310 += 1, R5988 += 1 };
  s2 -> s6 [0, 65535] { R11406 += 1 };
  s2 -> s8 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1 };
  s2 -> s7 [0, 65535] { R11406 += 1, R11360 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1, R11310 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1, R11309 += 1, R11310 += 1 };
  s3 -> s6 [0, 65535] { R11406 += 1 };
  s3 -> s7 [0, 65535] { R11406 += 1, R11360 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R11406 += 1, R11360 += 1, R11327 += 1, R11328 += 1 };
  s4 -> s2 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1, R11310 += 1, R5988 += 1 };
  s4 -> s3 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1, R11309 += 1, R11310 += 1 };
  s4 -> s4 [0, 65535] { R11406 += 1, R11359 += 1, R11360 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11406 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11406 += 1 };
  s7 -> s7 [0, 65535] { R11406 += 1, R11360 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R11406 += 1 };
  s8 -> s8 [0, 65535] { R11406 += 1, R11360 += 1, R11328 += 1 };
  s8 -> s7 [0, 65535] { R11406 += 1, R11360 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R11408 += 1, R11362 += 1, R11329 += 1, R11330 += 1 };
  s0 -> s2 [0, 65535] { R11408 += 1, R11361 += 1, R11362 += 1 };
  s0 -> s0 [0, 65535] { R11407 += 1, R11408 += 1 };
  s0 -> s3 [0, 65535] { R11408 += 1, R11362 += 1, R11330 += 1 };
  s1 -> s4 [0, 65535] { R11408 += 1 };
  s1 -> s1 [0, 65535] { R11408 += 1, R11362 += 1, R11329 += 1, R11330 += 1 };
  s1 -> s3 [0, 65535] { R11408 += 1, R11362 += 1, R11330 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R11408 += 1, R11362 += 1, R11329 += 1, R11330 += 1 };
  s2 -> s2 [0, 65535] { R11408 += 1, R11361 += 1, R11362 += 1 };
  s2 -> s3 [0, 65535] { R11408 += 1, R11362 += 1, R11330 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R11408 += 1 };
  s3 -> s5 [0, 65535] { R11408 += 1, R11362 += 1 };
  s3 -> s3 [0, 65535] { R11408 += 1, R11362 += 1, R11330 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11408 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R11408 += 1 };
  s5 -> s5 [0, 65535] { R11408 += 1, R11362 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11410 += 1, R11363 += 1, R11364 += 1 };
  s0 -> s2 [0, 65535] { R11410 += 1, R11364 += 1, R11331 += 1, R11332 += 1 };
  s0 -> s3 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1, R11316 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R11409 += 1, R11410 += 1 };
  s0 -> s4 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1, R11315 += 1, R11316 += 1 };
  s1 -> s1 [0, 65535] { R11410 += 1, R11363 += 1, R11364 += 1 };
  s1 -> s2 [0, 65535] { R11410 += 1, R11364 += 1, R11331 += 1, R11332 += 1 };
  s1 -> s3 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1, R11316 += 1, R5989 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1, R11315 += 1, R11316 += 1 };
  s2 -> s2 [0, 65535] { R11410 += 1, R11364 += 1, R11331 += 1, R11332 += 1 };
  s2 -> s6 [0, 65535] { R11410 += 1 };
  s2 -> s3 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1, R11316 += 1, R5989 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1, R11315 += 1, R11316 += 1 };
  s3 -> s5 [0, 65535] { R11410 += 1, R11364 += 1 };
  s3 -> s6 [0, 65535] { R11410 += 1 };
  s3 -> s3 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1, R11316 += 1, R5989 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1 };
  s4 -> s5 [0, 65535] { R11410 += 1, R11364 += 1 };
  s4 -> s6 [0, 65535] { R11410 += 1 };
  s4 -> s3 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1, R11316 += 1, R5989 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1, R11315 += 1, R11316 += 1 };
  s5 -> s5 [0, 65535] { R11410 += 1, R11364 += 1 };
  s5 -> s6 [0, 65535] { R11410 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R11410 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R11410 += 1, R11364 += 1 };
  s8 -> s6 [0, 65535] { R11410 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R11410 += 1, R11364 += 1, R11332 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R11412 += 1, R11366 += 1, R11333 += 1, R11334 += 1 };
  s0 -> s2 [0, 65535] { R11412 += 1, R11365 += 1, R11366 += 1 };
  s0 -> s3 [0, 65535] { R11412 += 1, R11366 += 1, R11334 += 1, R11317 += 1, R11318 += 1 };
  s0 -> s0 [0, 65535] { R11411 += 1, R11412 += 1 };
  s0 -> s4 [115, 115] { R11412 += 1, R11366 += 1, R11334 += 1, R11318 += 1 };
  s1 -> s1 [0, 65535] { R11412 += 1, R11366 += 1, R11333 += 1, R11334 += 1 };
  s1 -> s3 [0, 65535] { R11412 += 1, R11366 += 1, R11334 += 1, R11317 += 1, R11318 += 1 };
  s1 -> s4 [115, 115] { R11412 += 1, R11366 += 1, R11334 += 1, R11318 += 1 };
  s2 -> s1 [0, 65535] { R11412 += 1, R11366 += 1, R11333 += 1, R11334 += 1 };
  s2 -> s2 [0, 65535] { R11412 += 1, R11365 += 1, R11366 += 1 };
  s2 -> s3 [0, 65535] { R11412 += 1, R11366 += 1, R11334 += 1, R11317 += 1, R11318 += 1 };
  s2 -> s4 [115, 115] { R11412 += 1, R11366 += 1, R11334 += 1, R11318 += 1 };
  s3 -> s3 [0, 65535] { R11412 += 1, R11366 += 1, R11334 += 1, R11317 += 1, R11318 += 1 };
  s3 -> s4 [115, 115] { R11412 += 1, R11366 += 1, R11334 += 1, R11318 += 1 };
  s4 -> s5 [116, 116] { R11412 += 1, R11366 += 1, R11334 += 1, R11318 += 1 };
  s5 -> s6 [0, 65535] { R11412 += 1 };
  s5 -> s7 [0, 65535] { R11412 += 1, R11366 += 1 };
  s5 -> s5 [0, 65535] { R11412 += 1, R11366 += 1, R11334 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R11412 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R11412 += 1 };
  s7 -> s7 [0, 65535] { R11412 += 1, R11366 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
};
constraint R1 = 0 && R2 = R11334 && R3 = R11306 && R4 = R11412 && R15 = 0 && R16 = R11366 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R11299 - R11366 = 1 && R11300 = R11306 && R11301 - R11366 = 1 && R11302 = R11306 && R11303 - R11366 = 1 && R11304 = R11306 && R11305 - R11366 = 1 && R11313 = 0 && R11314 = 0 && R11317 = 0 && R11318 = 0 && R11319 = 0 && R11320 = R11334 && R11321 = 0 && R11322 = R11334 && R11323 = 0 && R11324 = R11334 && R11325 = 0 && R11326 = R11334 && R11327 = 0 && R11328 = R11334 && R11329 = 0 && R11330 = R11334 && R11331 = 0 && R11332 = R11334 && R11333 = 0 && R11335 = 0 && R11336 = R11366 && R11337 = 0 && R11338 = R11366 && R11339 = 0 && R11340 = R11366 && R11341 = 0 && R11342 = R11366 && R11343 = 0 && R11344 = R11366 && R11345 = 0 && R11346 = R11366 && R11347 = 0 && R11348 = R11366 && R11349 = 0 && R11350 = R11366 && R11351 = 0 && R11352 = R11366 && R11353 = 0 && R11354 = R11366 && R11355 = 0 && R11356 = R11366 && R11357 = 0 && R11358 = R11366 && R11359 = 0 && R11360 = R11366 && R11361 = 0 && R11362 = R11366 && R11363 = 0 && R11364 = R11366 && R11365 = 0 && R11367 = 10 && R11368 = R11412 && R11369 = 10 && R11370 = R11412 && R11371 = 10 && R11372 = R11412 && R11373 = 10 && R11374 = R11412 && R11375 = 10 && R11376 = R11412 && R11377 = 10 && R11378 = R11412 && R11379 = 10 && R11380 = R11412 && R11381 = 10 && R11382 = R11412 && R11383 = 10 && R11384 = R11412 && R11385 = 10 && R11386 = R11412 && R11387 = 10 && R11388 = R11412 && R11389 = 10 && R11390 = R11412 && R11391 = 10 && R11392 = R11412 && R11393 = 10 && R11394 = R11412 && R11395 = 10 && R11396 = R11412 && R11397 = 10 && R11398 = R11412 && R11399 = 10 && R11400 = R11412 && R11401 = 10 && R11402 = R11412 && R11403 = 10 && R11404 = R11412 && R11405 = 10 && R11406 = R11412 && R11407 = 10 && R11408 = R11412 && R11409 = 10 && R11410 = R11412 && R11411 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R11366 < R11306 && 0 < R11334 && -1 < R11366 && 9 < R11412 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R5988 = 0 || (R11307 = 0 && R11308 = 0)) && (R5988 = 0 || (R11309 = 0 && R11310 = 0)) && (R5989 = 0 || (R11315 = 0 && R11316 = 0)) && (R5990 = 0 || (R11311 = 0 && R11312 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
