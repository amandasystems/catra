// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R7063, R7064, R7065, R7066, R7067, R7068, R7069, R7070, R7285, R7286, R7287, R7288, R7289, R7290, R7291, R7292, R7293, R7294, R7295, R7296, R7297, R7298, R7299, R7300, R7301, R7302, R7303, R7304, R7305, R7306, R7307, R7308, R7309, R7310, R7311, R7312, R7313, R7314, R7315, R7316, R7317, R7318, R7319, R7320, R7321, R7322, R7323, R7324, R7325, R7326, R7327, R7328, R7329, R7330, R7331, R7332, R7333, R7334, R7335, R7336, R7337, R7338, R7339, R7340, R7341, R7342, R7343, R7344, R7345, R7346, R7347, R7348, R7349, R7350, R7351, R7352, R7353, R7354, R7355, R7356, R7357, R7358, R7359, R7360, R7361, R7362, R7363, R7364, R7365, R7366, R7367, R7368, R7369, R7370, R7371, R7372, R7373, R7374, R7375, R7376, R7377, R7378, R7379, R7380, R7381, R7382, R7383, R7384, R7385, R7386, R7387, R7388, R7389, R7390, R7391, R7392;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R7348 += 1 };
  s0 -> s0 [0, 65535] { R7347 += 1, R7348 += 1 };
  s0 -> s2 [46, 46] { R7348 += 1 };
  s0 -> s3 [47, 47] { R7348 += 1 };
  s0 -> s1 [48, 65535] { R7348 += 1 };
  s1 -> s1 [0, 45] { R7348 += 1 };
  s1 -> s2 [46, 46] { R7348 += 1 };
  s1 -> s3 [47, 47] { R7348 += 1 };
  s1 -> s1 [48, 65535] { R7348 += 1 };
  s2 -> s1 [0, 45] { R7348 += 1 };
  s2 -> s2 [46, 46] { R7348 += 1 };
  s2 -> s3 [47, 47] { R7348 += 1 };
  s2 -> s1 [48, 114] { R7348 += 1 };
  s2 -> s8 [115, 115] { R7348 += 1 };
  s2 -> s1 [116, 65535] { R7348 += 1 };
  s3 -> s3 [0, 45] { R7348 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R7348 += 1 };
  s3 -> s3 [47, 65535] { R7348 += 1 };
  s4 -> s3 [0, 45] { R7348 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R7348 += 1 };
  s4 -> s3 [47, 114] { R7348 += 1 };
  s4 -> s5 [115, 115] { R7348 += 1 };
  s4 -> s3 [116, 65535] { R7348 += 1 };
  s5 -> s3 [0, 45] { R7348 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R7348 += 1 };
  s5 -> s3 [47, 110] { R7348 += 1 };
  s5 -> s6 [111, 111] { R7348 += 1 };
  s5 -> s3 [112, 65535] { R7348 += 1 };
  s6 -> s3 [0, 45] { R7348 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R7348 += 1 };
  s6 -> s3 [47, 98] { R7348 += 1 };
  s6 -> s7 [99, 99] { R7348 += 1 };
  s6 -> s3 [100, 65535] { R7348 += 1 };
  s7 -> s3 [0, 45] { R7348 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R7348 += 1 };
  s7 -> s3 [47, 106] { R7348 += 1 };
  s7 -> s3 [108, 65535] { R7348 += 1 };
  s8 -> s1 [0, 45] { R7348 += 1 };
  s8 -> s2 [46, 46] { R7348 += 1 };
  s8 -> s3 [47, 47] { R7348 += 1 };
  s8 -> s1 [48, 110] { R7348 += 1 };
  s8 -> s9 [111, 111] { R7348 += 1 };
  s8 -> s1 [112, 65535] { R7348 += 1 };
  s9 -> s1 [0, 45] { R7348 += 1 };
  s9 -> s2 [46, 46] { R7348 += 1 };
  s9 -> s3 [47, 47] { R7348 += 1 };
  s9 -> s1 [48, 98] { R7348 += 1 };
  s9 -> s10 [99, 99] { R7348 += 1 };
  s9 -> s1 [100, 65535] { R7348 += 1 };
  s10 -> s1 [0, 45] { R7348 += 1 };
  s10 -> s2 [46, 46] { R7348 += 1 };
  s10 -> s3 [47, 47] { R7348 += 1 };
  s10 -> s1 [48, 106] { R7348 += 1 };
  s10 -> s1 [108, 65535] { R7348 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R7350 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R7349 += 1, R7350 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7350 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R7352 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R7351 += 1, R7352 += 1 };
  s0 -> s2 [0, 65535] { R7352 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R7352 += 1 };
  s0 -> s1 [48, 65535] { R7352 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R7352 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R7352 += 1 };
  s1 -> s1 [48, 65535] { R7352 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R7352 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R7352 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R7352 += 1 };
  s2 -> s1 [48, 65535] { R7352 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7352 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R7354 += 1, R7064 += 1 };
  s0 -> s0 [0, 65535] { R7353 += 1, R7354 += 1 };
  s0 -> s2 [0, 65535] { R7354 += 1, R7063 += 1, R7064 += 1 };
  s0 -> s1 [38, 42] { R7354 += 1, R7064 += 1 };
  s0 -> s1 [44, 45] { R7354 += 1, R7064 += 1 };
  s0 -> s1 [47, 62] { R7354 += 1, R7064 += 1 };
  s0 -> s1 [64, 65535] { R7354 += 1, R7064 += 1 };
  s1 -> s1 [0, 36] { R7354 += 1, R7064 += 1 };
  s1 -> s1 [0, 65535] { R7354 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R7354 += 1, R7064 += 1 };
  s1 -> s1 [44, 45] { R7354 += 1, R7064 += 1 };
  s1 -> s1 [47, 62] { R7354 += 1, R7064 += 1 };
  s1 -> s1 [64, 65535] { R7354 += 1, R7064 += 1 };
  s2 -> s1 [0, 36] { R7354 += 1, R7064 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7354 += 1, R7063 += 1, R7064 += 1 };
  s2 -> s1 [38, 42] { R7354 += 1, R7064 += 1 };
  s2 -> s1 [44, 45] { R7354 += 1, R7064 += 1 };
  s2 -> s1 [47, 62] { R7354 += 1, R7064 += 1 };
  s2 -> s1 [64, 65535] { R7354 += 1, R7064 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R7356 += 1, R7065 += 1, R7066 += 1 };
  s0 -> s2 [0, 65535] { R7356 += 1, R7066 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R7355 += 1, R7356 += 1 };
  s1 -> s1 [0, 65535] { R7356 += 1, R7065 += 1, R7066 += 1 };
  s1 -> s2 [0, 65535] { R7356 += 1, R7066 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7356 += 1 };
  s2 -> s2 [0, 65535] { R7356 += 1, R7066 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7356 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R7357 += 1, R7358 += 1 };
  s0 -> s2 [0, 65535] { R7358 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R7358 += 1, R7067 += 1, R7068 += 1 };
  s0 -> s4 [63, 63] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R7358 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R7358 += 1, R7068 += 1 };
  s2 -> s1 [0, 62] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R7358 += 1 };
  s2 -> s2 [0, 65535] { R7358 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R7358 += 1, R7068 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7358 += 1, R7067 += 1, R7068 += 1 };
  s3 -> s4 [63, 63] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R7358 += 1, R7068 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7358 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7358 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7358 += 1, R7068 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7360 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R7360 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R7360 += 1, R7069 += 1, R7070 += 1 };
  s0 -> s0 [0, 65535] { R7359 += 1, R7360 += 1 };
  s1 -> s1 [0, 65535] { R7360 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R7360 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R7360 += 1, R7070 += 1 };
  s2 -> s1 [0, 65535] { R7360 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R7360 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7360 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s1 [0, 65535] { R7360 += 1, R7070 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7360 += 1, R7070 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s3 [0, 65535] { R7360 += 1, R7069 += 1, R7070 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7360 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7360 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7360 += 1, R7070 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R7362 += 1, R7316 += 1 };
  s0 -> s2 [0, 65535] { R7362 += 1, R7315 += 1, R7316 += 1 };
  s0 -> s0 [0, 65535] { R7361 += 1, R7362 += 1 };
  s0 -> s1 [45, 63] { R7362 += 1, R7316 += 1 };
  s0 -> s3 [87, 87] { R7362 += 1, R7316 += 1 };
  s0 -> s1 [88, 65535] { R7362 += 1, R7316 += 1 };
  s1 -> s1 [0, 43] { R7362 += 1, R7316 += 1 };
  s1 -> s1 [45, 63] { R7362 += 1, R7316 += 1 };
  s1 -> s3 [87, 87] { R7362 += 1, R7316 += 1 };
  s1 -> s1 [88, 65535] { R7362 += 1, R7316 += 1 };
  s2 -> s1 [0, 43] { R7362 += 1, R7316 += 1 };
  s2 -> s2 [0, 65535] { R7362 += 1, R7315 += 1, R7316 += 1 };
  s2 -> s1 [45, 63] { R7362 += 1, R7316 += 1 };
  s2 -> s3 [87, 87] { R7362 += 1, R7316 += 1 };
  s2 -> s1 [88, 65535] { R7362 += 1, R7316 += 1 };
  s3 -> s3 [0, 43] { R7362 += 1, R7316 += 1 };
  s3 -> s3 [0, 65535] { R7362 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R7362 += 1, R7316 += 1 };
  s3 -> s3 [87, 65535] { R7362 += 1, R7316 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R7364 += 1, R7318 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R7363 += 1, R7364 += 1 };
  s0 -> s2 [0, 65535] { R7364 += 1, R7317 += 1, R7318 += 1 };
  s1 -> s1 [0, 65535] { R7364 += 1, R7318 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R7364 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7364 += 1, R7318 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7364 += 1, R7317 += 1, R7318 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7364 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R7366 += 1, R7320 += 1 };
  s0 -> s2 [0, 65535] { R7366 += 1, R7319 += 1, R7320 += 1 };
  s0 -> s0 [0, 65535] { R7365 += 1, R7366 += 1 };
  s0 -> s3 [0, 65535] { R7366 += 1, R7320 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R7366 += 1, R7320 += 1 };
  s0 -> s1 [59, 65535] { R7366 += 1, R7320 += 1 };
  s1 -> s1 [0, 57] { R7366 += 1, R7320 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7366 += 1 };
  s1 -> s4 [58, 58] { R7366 += 1, R7320 += 1 };
  s1 -> s1 [59, 65535] { R7366 += 1, R7320 += 1 };
  s2 -> s1 [0, 57] { R7366 += 1, R7320 += 1 };
  s2 -> s2 [0, 65535] { R7366 += 1, R7319 += 1, R7320 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R7366 += 1, R7320 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R7366 += 1, R7320 += 1 };
  s2 -> s1 [59, 65535] { R7366 += 1, R7320 += 1 };
  s3 -> s1 [0, 57] { R7366 += 1, R7320 += 1 };
  s3 -> s5 [0, 65535] { R7366 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7366 += 1, R7320 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R7366 += 1, R7320 += 1 };
  s3 -> s1 [59, 65535] { R7366 += 1, R7320 += 1 };
  s4 -> s4 [0, 65535] { R7366 += 1, R7320 += 1 };
  s5 -> s5 [0, 65535] { R7366 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R7368 += 1, R7322 += 1 };
  s0 -> s0 [0, 65535] { R7367 += 1, R7368 += 1 };
  s0 -> s2 [0, 65535] { R7368 += 1, R7321 += 1, R7322 += 1 };
  s0 -> s3 [0, 65535] { R7368 += 1, R7322 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R7368 += 1, R7322 += 1 };
  s0 -> s1 [88, 65535] { R7368 += 1, R7322 += 1 };
  s1 -> s1 [0, 86] { R7368 += 1, R7322 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7368 += 1 };
  s1 -> s4 [87, 87] { R7368 += 1, R7322 += 1 };
  s1 -> s1 [88, 65535] { R7368 += 1, R7322 += 1 };
  s2 -> s1 [0, 86] { R7368 += 1, R7322 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7368 += 1, R7321 += 1, R7322 += 1 };
  s2 -> s3 [0, 65535] { R7368 += 1, R7322 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R7368 += 1, R7322 += 1 };
  s2 -> s1 [88, 65535] { R7368 += 1, R7322 += 1 };
  s3 -> s1 [0, 86] { R7368 += 1, R7322 += 1 };
  s3 -> s5 [0, 65535] { R7368 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7368 += 1, R7322 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R7368 += 1, R7322 += 1 };
  s3 -> s1 [88, 65535] { R7368 += 1, R7322 += 1 };
  s4 -> s4 [0, 65535] { R7368 += 1, R7322 += 1 };
  s5 -> s5 [0, 65535] { R7368 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R7370 += 1, R7323 += 1, R7324 += 1 };
  s0 -> s0 [0, 65535] { R7369 += 1, R7370 += 1 };
  s0 -> s3 [0, 65535] { R7370 += 1, R7324 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R7370 += 1, R7324 += 1 };
  s1 -> s1 [0, 65535] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7370 += 1 };
  s2 -> s1 [0, 90] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7370 += 1, R7323 += 1, R7324 += 1 };
  s2 -> s3 [0, 65535] { R7370 += 1, R7324 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7370 += 1 };
  s3 -> s3 [0, 65535] { R7370 += 1, R7324 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R7370 += 1, R7324 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7370 += 1 };
  s7 -> s7 [0, 65535] { R7370 += 1, R7324 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7370 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7372 += 1, R7326 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R7372 += 1, R7325 += 1, R7326 += 1 };
  s0 -> s3 [0, 65535] { R7372 += 1, R7326 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R7371 += 1, R7372 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7372 += 1, R7326 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R7372 += 1 };
  s1 -> s6 [0, 65535] { R7372 += 1, R7326 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R7372 += 1, R7326 += 1, R5998 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R7372 += 1, R7325 += 1, R7326 += 1 };
  s2 -> s3 [0, 65535] { R7372 += 1, R7326 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7372 += 1, R7326 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R7372 += 1, R7326 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s5 [0, 65535] { R7372 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7372 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7372 += 1 };
  s6 -> s6 [0, 65535] { R7372 += 1, R7326 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7374 += 1, R7328 += 1, R7292 += 1, R5990 += 1 };
  s0 -> s0 [0, 65535] { R7373 += 1, R7374 += 1 };
  s0 -> s2 [0, 65535] { R7374 += 1, R7328 += 1, R7291 += 1, R7292 += 1 };
  s0 -> s3 [0, 65535] { R7374 += 1, R7327 += 1, R7328 += 1 };
  s1 -> s1 [0, 65535] { R7374 += 1, R7328 += 1, R7292 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7374 += 1 };
  s1 -> s6 [0, 65535] { R7374 += 1, R7328 += 1 };
  s2 -> s1 [0, 65535] { R7374 += 1, R7328 += 1, R7292 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R7374 += 1, R7328 += 1, R7291 += 1, R7292 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7374 += 1 };
  s3 -> s1 [0, 65535] { R7374 += 1, R7328 += 1, R7292 += 1, R5990 += 1 };
  s3 -> s2 [0, 65535] { R7374 += 1, R7328 += 1, R7291 += 1, R7292 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7374 += 1, R7327 += 1, R7328 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7374 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7374 += 1 };
  s6 -> s6 [0, 65535] { R7374 += 1, R7328 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R7376 += 1, R7330 += 1, R7293 += 1, R7294 += 1 };
  s0 -> s2 [0, 65535] { R7376 += 1, R7329 += 1, R7330 += 1 };
  s0 -> s0 [0, 65535] { R7375 += 1, R7376 += 1 };
  s0 -> s3 [108, 108] { R7376 += 1, R7330 += 1, R7294 += 1 };
  s1 -> s1 [0, 65535] { R7376 += 1, R7330 += 1, R7293 += 1, R7294 += 1 };
  s1 -> s3 [108, 108] { R7376 += 1, R7330 += 1, R7294 += 1 };
  s2 -> s1 [0, 65535] { R7376 += 1, R7330 += 1, R7293 += 1, R7294 += 1 };
  s2 -> s2 [0, 65535] { R7376 += 1, R7329 += 1, R7330 += 1 };
  s2 -> s3 [108, 108] { R7376 += 1, R7330 += 1, R7294 += 1 };
  s3 -> s4 [0, 65535] { R7376 += 1 };
  s3 -> s3 [0, 65535] { R7376 += 1, R7330 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7376 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s0 -> s2 [0, 65535] { R7378 += 1, R7331 += 1, R7332 += 1 };
  s0 -> s3 [0, 65535] { R7378 += 1, R7332 += 1, R7299 += 1, R7300 += 1 };
  s0 -> s0 [0, 65535] { R7377 += 1, R7378 += 1 };
  s0 -> s4 [87, 87] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s0 -> s1 [88, 65535] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s1 -> s1 [0, 86] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s1 -> s4 [87, 87] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s1 -> s1 [88, 65535] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s2 -> s1 [0, 86] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s2 -> s2 [0, 65535] { R7378 += 1, R7331 += 1, R7332 += 1 };
  s2 -> s3 [0, 65535] { R7378 += 1, R7332 += 1, R7299 += 1, R7300 += 1 };
  s2 -> s4 [87, 87] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s2 -> s1 [88, 65535] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s3 -> s1 [0, 86] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s3 -> s3 [0, 65535] { R7378 += 1, R7332 += 1, R7299 += 1, R7300 += 1 };
  s3 -> s4 [87, 87] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s3 -> s1 [88, 65535] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s4 -> s5 [0, 65535] { R7378 += 1 };
  s4 -> s4 [0, 65535] { R7378 += 1, R7332 += 1, R7300 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R7378 += 1, R7332 += 1 };
  s5 -> s5 [0, 65535] { R7378 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R7378 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7378 += 1, R7332 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R7380 += 1, R7334 += 1, R7301 += 1, R7302 += 1 };
  s0 -> s2 [0, 65535] { R7380 += 1, R7333 += 1, R7334 += 1 };
  s0 -> s3 [0, 65535] { R7380 += 1, R7334 += 1, R7302 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R7379 += 1, R7380 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7380 += 1, R7334 += 1, R7301 += 1, R7302 += 1 };
  s1 -> s3 [0, 65535] { R7380 += 1, R7334 += 1, R7302 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R7380 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R7380 += 1, R7334 += 1, R7301 += 1, R7302 += 1 };
  s2 -> s2 [0, 65535] { R7380 += 1, R7333 += 1, R7334 += 1 };
  s2 -> s3 [0, 65535] { R7380 += 1, R7334 += 1, R7302 += 1, R1 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7380 += 1, R7334 += 1 };
  s3 -> s3 [0, 65535] { R7380 += 1, R7334 += 1, R7302 += 1, R1 += 1 };
  s3 -> s6 [0, 65535] { R7380 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7380 += 1, R7334 += 1 };
  s5 -> s6 [0, 65535] { R7380 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7380 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s0 -> s2 [0, 65535] { R7382 += 1, R7335 += 1, R7336 += 1 };
  s0 -> s3 [0, 65535] { R7382 += 1, R7336 += 1, R7304 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R7382 += 1, R7336 += 1, R7303 += 1, R7304 += 1 };
  s0 -> s0 [0, 65535] { R7381 += 1, R7382 += 1 };
  s0 -> s5 [87, 87] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s0 -> s1 [88, 65535] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s1 -> s1 [0, 86] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s1 -> s6 [0, 65535] { R7382 += 1 };
  s1 -> s1 [0, 65535] { R7382 += 1, R7336 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s5 [87, 87] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s1 -> s1 [88, 65535] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s2 -> s1 [0, 86] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s2 -> s2 [0, 65535] { R7382 += 1, R7335 += 1, R7336 += 1 };
  s2 -> s3 [0, 65535] { R7382 += 1, R7336 += 1, R7304 += 1, R7 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R7382 += 1, R7336 += 1, R7303 += 1, R7304 += 1 };
  s2 -> s5 [87, 87] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s2 -> s1 [88, 65535] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s3 -> s1 [0, 86] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s3 -> s6 [0, 65535] { R7382 += 1 };
  s3 -> s3 [0, 65535] { R7382 += 1, R7336 += 1, R7304 += 1, R7 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R7382 += 1, R7336 += 1 };
  s3 -> s5 [87, 87] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s3 -> s1 [88, 65535] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s4 -> s1 [0, 86] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s4 -> s6 [0, 65535] { R7382 += 1 };
  s4 -> s3 [0, 65535] { R7382 += 1, R7336 += 1, R7304 += 1, R7 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R7382 += 1, R7336 += 1, R7303 += 1, R7304 += 1 };
  s4 -> s5 [87, 87] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s4 -> s1 [88, 65535] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s5 -> s5 [0, 65535] { R7382 += 1, R7336 += 1, R7304 += 1 };
  s6 -> s6 [0, 65535] { R7382 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R7382 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R7382 += 1, R7336 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s0 -> s0 [0, 65535] { R7383 += 1, R7384 += 1 };
  s0 -> s2 [0, 65535] { R7384 += 1, R7338 += 1, R7306 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s3 [0, 65535] { R7384 += 1, R7338 += 1, R7305 += 1, R7306 += 1 };
  s0 -> s4 [0, 65535] { R7384 += 1, R7337 += 1, R7338 += 1 };
  s0 -> s1 [88, 65535] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s1 -> s1 [0, 86] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s1 -> s6 [0, 65535] { R7384 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R7384 += 1, R7338 += 1 };
  s1 -> s1 [0, 65535] { R7384 += 1, R7338 += 1, R7306 += 1 };
  s1 -> s1 [88, 65535] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s2 -> s1 [0, 86] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s2 -> s2 [0, 65535] { R7384 += 1, R7338 += 1, R7306 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s6 [0, 65535] { R7384 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R7384 += 1, R7338 += 1 };
  s2 -> s1 [88, 65535] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s3 -> s1 [0, 86] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s3 -> s2 [0, 65535] { R7384 += 1, R7338 += 1, R7306 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s6 [0, 65535] { R7384 += 1 };
  s3 -> s3 [0, 65535] { R7384 += 1, R7338 += 1, R7305 += 1, R7306 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s4 -> s1 [0, 86] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s4 -> s2 [0, 65535] { R7384 += 1, R7338 += 1, R7306 += 1, R7285 += 1, R7286 += 1 };
  s4 -> s3 [0, 65535] { R7384 += 1, R7338 += 1, R7305 += 1, R7306 += 1 };
  s4 -> s4 [0, 65535] { R7384 += 1, R7337 += 1, R7338 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [88, 65535] { R7384 += 1, R7338 += 1, R7306 += 1, R7286 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7384 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7384 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7384 += 1, R7338 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1, R7288 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R7386 += 1, R7340 += 1, R7307 += 1, R7308 += 1 };
  s0 -> s3 [0, 65535] { R7386 += 1, R7339 += 1, R7340 += 1 };
  s0 -> s0 [0, 65535] { R7385 += 1, R7386 += 1 };
  s0 -> s4 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1, R7287 += 1, R7288 += 1 };
  s1 -> s8 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1 };
  s1 -> s1 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1, R7288 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535] { R7386 += 1, R7340 += 1 };
  s1 -> s6 [0, 65535] { R7386 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1, R7288 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R7386 += 1, R7340 += 1, R7307 += 1, R7308 += 1 };
  s2 -> s4 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1, R7287 += 1, R7288 += 1 };
  s2 -> s6 [0, 65535] { R7386 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s1 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1, R7288 += 1, R5988 += 1 };
  s3 -> s2 [0, 65535] { R7386 += 1, R7340 += 1, R7307 += 1, R7308 += 1 };
  s3 -> s3 [0, 65535] { R7386 += 1, R7339 += 1, R7340 += 1 };
  s3 -> s4 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1, R7287 += 1, R7288 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s1 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1, R7288 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R7386 += 1, R7340 += 1 };
  s4 -> s4 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1, R7287 += 1, R7288 += 1 };
  s4 -> s6 [0, 65535] { R7386 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R7386 += 1, R7340 += 1 };
  s5 -> s6 [0, 65535] { R7386 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R7386 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R7386 += 1, R7340 += 1, R7308 += 1 };
  s8 -> s5 [0, 65535] { R7386 += 1, R7340 += 1 };
  s8 -> s6 [0, 65535] { R7386 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R7388 += 1, R7342 += 1, R7309 += 1, R7310 += 1 };
  s0 -> s2 [0, 65535] { R7388 += 1, R7342 += 1, R7310 += 1, R7289 += 1, R7290 += 1 };
  s0 -> s0 [0, 65535] { R7387 += 1, R7388 += 1 };
  s0 -> s3 [0, 65535] { R7388 += 1, R7341 += 1, R7342 += 1 };
  s0 -> s4 [115, 115] { R7388 += 1, R7342 += 1, R7310 += 1, R7290 += 1 };
  s1 -> s1 [0, 65535] { R7388 += 1, R7342 += 1, R7309 += 1, R7310 += 1 };
  s1 -> s2 [0, 65535] { R7388 += 1, R7342 += 1, R7310 += 1, R7289 += 1, R7290 += 1 };
  s1 -> s4 [115, 115] { R7388 += 1, R7342 += 1, R7310 += 1, R7290 += 1 };
  s2 -> s2 [0, 65535] { R7388 += 1, R7342 += 1, R7310 += 1, R7289 += 1, R7290 += 1 };
  s2 -> s4 [115, 115] { R7388 += 1, R7342 += 1, R7310 += 1, R7290 += 1 };
  s3 -> s1 [0, 65535] { R7388 += 1, R7342 += 1, R7309 += 1, R7310 += 1 };
  s3 -> s2 [0, 65535] { R7388 += 1, R7342 += 1, R7310 += 1, R7289 += 1, R7290 += 1 };
  s3 -> s3 [0, 65535] { R7388 += 1, R7341 += 1, R7342 += 1 };
  s3 -> s4 [115, 115] { R7388 += 1, R7342 += 1, R7310 += 1, R7290 += 1 };
  s4 -> s5 [116, 116] { R7388 += 1, R7342 += 1, R7310 += 1, R7290 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R7388 += 1 };
  s5 -> s5 [0, 65535] { R7388 += 1, R7342 += 1, R7310 += 1 };
  s5 -> s8 [0, 65535] { R7388 += 1, R7342 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7388 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R7388 += 1 };
  s8 -> s8 [0, 65535] { R7388 += 1, R7342 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R7389 += 1, R7390 += 1 };
  s0 -> s1 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1, R7295 += 1, R7296 += 1 };
  s0 -> s2 [0, 65535] { R7390 += 1, R7343 += 1, R7344 += 1 };
  s0 -> s3 [0, 65535] { R7390 += 1, R7344 += 1, R7311 += 1, R7312 += 1 };
  s0 -> s4 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1, R7296 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535] { R7390 += 1 };
  s1 -> s6 [0, 65535] { R7390 += 1, R7344 += 1 };
  s1 -> s1 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1, R7295 += 1, R7296 += 1 };
  s1 -> s4 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1, R7296 += 1, R5989 += 1 };
  s1 -> s8 [0, 65535];
  s2 -> s1 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1, R7295 += 1, R7296 += 1 };
  s2 -> s2 [0, 65535] { R7390 += 1, R7343 += 1, R7344 += 1 };
  s2 -> s3 [0, 65535] { R7390 += 1, R7344 += 1, R7311 += 1, R7312 += 1 };
  s2 -> s4 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1, R7296 += 1, R5989 += 1 };
  s2 -> s8 [0, 65535];
  s3 -> s5 [0, 65535] { R7390 += 1 };
  s3 -> s1 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1, R7295 += 1, R7296 += 1 };
  s3 -> s3 [0, 65535] { R7390 += 1, R7344 += 1, R7311 += 1, R7312 += 1 };
  s3 -> s4 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1, R7296 += 1, R5989 += 1 };
  s3 -> s8 [0, 65535];
  s4 -> s5 [0, 65535] { R7390 += 1 };
  s4 -> s6 [0, 65535] { R7390 += 1, R7344 += 1 };
  s4 -> s7 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1 };
  s4 -> s4 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1, R7296 += 1, R5989 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R7390 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s5 [0, 65535] { R7390 += 1 };
  s6 -> s6 [0, 65535] { R7390 += 1, R7344 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R7390 += 1 };
  s7 -> s6 [0, 65535] { R7390 += 1, R7344 += 1 };
  s7 -> s7 [0, 65535] { R7390 += 1, R7344 += 1, R7312 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R7391 += 1, R7392 += 1 };
  s0 -> s1 [0, 65535] { R7392 += 1, R7345 += 1, R7346 += 1 };
  s0 -> s2 [0, 65535] { R7392 += 1, R7346 += 1, R7314 += 1, R7297 += 1, R7298 += 1 };
  s0 -> s3 [0, 65535] { R7392 += 1, R7346 += 1, R7313 += 1, R7314 += 1 };
  s0 -> s4 [111, 111] { R7392 += 1, R7346 += 1, R7314 += 1, R7298 += 1 };
  s1 -> s1 [0, 65535] { R7392 += 1, R7345 += 1, R7346 += 1 };
  s1 -> s2 [0, 65535] { R7392 += 1, R7346 += 1, R7314 += 1, R7297 += 1, R7298 += 1 };
  s1 -> s3 [0, 65535] { R7392 += 1, R7346 += 1, R7313 += 1, R7314 += 1 };
  s1 -> s4 [111, 111] { R7392 += 1, R7346 += 1, R7314 += 1, R7298 += 1 };
  s2 -> s2 [0, 65535] { R7392 += 1, R7346 += 1, R7314 += 1, R7297 += 1, R7298 += 1 };
  s2 -> s4 [111, 111] { R7392 += 1, R7346 += 1, R7314 += 1, R7298 += 1 };
  s3 -> s2 [0, 65535] { R7392 += 1, R7346 += 1, R7314 += 1, R7297 += 1, R7298 += 1 };
  s3 -> s3 [0, 65535] { R7392 += 1, R7346 += 1, R7313 += 1, R7314 += 1 };
  s3 -> s4 [111, 111] { R7392 += 1, R7346 += 1, R7314 += 1, R7298 += 1 };
  s4 -> s5 [99, 99] { R7392 += 1, R7346 += 1, R7314 += 1, R7298 += 1 };
  s5 -> s6 [97, 97] { R7392 += 1, R7346 += 1, R7314 += 1, R7298 += 1 };
  s6 -> s7 [108, 108] { R7392 += 1, R7346 += 1, R7314 += 1, R7298 += 1 };
  s7 -> s8 [104, 104] { R7392 += 1, R7346 += 1, R7314 += 1, R7298 += 1 };
  s8 -> s9 [111, 111] { R7392 += 1, R7346 += 1, R7314 += 1, R7298 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R7392 += 1, R7346 += 1 };
  s9 -> s9 [0, 65535] { R7392 += 1, R7346 += 1, R7314 += 1 };
  s9 -> s12 [0, 65535] { R7392 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R7392 += 1, R7346 += 1 };
  s11 -> s12 [0, 65535] { R7392 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R7392 += 1 };
  accepting s9, s10, s11, s12;
};
};
constraint R1 = R7290 && R2 = R7314 && R3 = R7070 && R4 = R7392 && R15 = 0 && R16 = R7346 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R7063 - R7346 = 1 && R7064 = R7070 && R7065 - R7346 = 1 && R7066 = R7070 && R7067 - R7346 = 1 && R7068 = R7070 && R7069 - R7346 = 1 && R7289 = 0 && R7293 = 0 && R7294 = 0 && R7297 = 0 && R7298 = 0 && R7299 = 0 && R7300 = R7314 && R7301 = 0 && R7302 = R7314 && R7303 = 0 && R7304 = R7314 && R7305 = 0 && R7306 = R7314 && R7307 = 0 && R7308 = R7314 && R7309 = 0 && R7310 = R7314 && R7311 = 0 && R7312 = R7314 && R7313 = 0 && R7315 = 0 && R7316 = R7346 && R7317 = 0 && R7318 = R7346 && R7319 = 0 && R7320 = R7346 && R7321 = 0 && R7322 = R7346 && R7323 = 0 && R7324 = R7346 && R7325 = 0 && R7326 = R7346 && R7327 = 0 && R7328 = R7346 && R7329 = 0 && R7330 = R7346 && R7331 = 0 && R7332 = R7346 && R7333 = 0 && R7334 = R7346 && R7335 = 0 && R7336 = R7346 && R7337 = 0 && R7338 = R7346 && R7339 = 0 && R7340 = R7346 && R7341 = 0 && R7342 = R7346 && R7343 = 0 && R7344 = R7346 && R7345 = 0 && R7347 = 10 && R7348 = R7392 && R7349 = 10 && R7350 = R7392 && R7351 = 10 && R7352 = R7392 && R7353 = 10 && R7354 = R7392 && R7355 = 10 && R7356 = R7392 && R7357 = 10 && R7358 = R7392 && R7359 = 10 && R7360 = R7392 && R7361 = 10 && R7362 = R7392 && R7363 = 10 && R7364 = R7392 && R7365 = 10 && R7366 = R7392 && R7367 = 10 && R7368 = R7392 && R7369 = 10 && R7370 = R7392 && R7371 = 10 && R7372 = R7392 && R7373 = 10 && R7374 = R7392 && R7375 = 10 && R7376 = R7392 && R7377 = 10 && R7378 = R7392 && R7379 = 10 && R7380 = R7392 && R7381 = 10 && R7382 = R7392 && R7383 = 10 && R7384 = R7392 && R7385 = 10 && R7386 = R7392 && R7387 = 10 && R7388 = R7392 && R7389 = 10 && R7390 = R7392 && R7391 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R7346 < R7070 && -1 < R7290 && 0 < R7314 && -1 < R7346 && 9 < R7392 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R7285 != 0 || R7286 = R7290 || (R5988 = 0 && R7290 = 0)) && (R7287 != 0 || R7288 = R7290 || (R5988 = 0 && R7290 = 0)) && (R5989 = 0 || (R7295 = 0 && R7296 = 0)) && (R5990 = 0 || (R7291 = 0 && R7292 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R7285 = 0 || (R5988 = 0 && R7290 = 0)) && (R7287 = 0 || (R5988 = 0 && R7290 = 0));
// End of Parikh automata intersection problem
