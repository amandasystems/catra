// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R11299, R11300, R11301, R11302, R11303, R11304, R11305, R11306, R11413, R11414, R11415, R11416, R11417, R11418, R11419, R11420, R11421, R11422, R11423, R11424, R11425, R11426, R11427, R11428, R11429, R11430, R11431, R11432, R11433, R11434, R11435, R11436, R11437, R11438, R11439, R11440, R11441, R11442, R11443, R11444, R11445, R11446, R11447, R11448, R11449, R11450, R11451, R11452, R11453, R11454, R11455, R11456, R11457, R11458, R11459, R11460, R11461, R11462, R11463, R11464, R11465, R11466, R11467, R11468, R11469, R11470, R11471, R11472, R11473, R11474, R11475, R11476, R11477, R11478, R11479, R11480, R11481, R11482, R11483, R11484, R11485, R11486, R11487, R11488, R11489, R11490, R11491, R11492, R11493, R11494, R11495, R11496, R11497, R11498, R11499, R11500, R11501, R11502, R11503, R11504, R11505, R11506, R11507, R11508, R11509, R11510, R11511, R11512, R11513, R11514, R11515, R11516, R11517, R11518, R11519, R11520, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R11476 += 1 };
  s0 -> s0 [0, 65535] { R11475 += 1, R11476 += 1 };
  s0 -> s2 [46, 46] { R11476 += 1 };
  s0 -> s3 [47, 47] { R11476 += 1 };
  s0 -> s1 [48, 65535] { R11476 += 1 };
  s1 -> s1 [0, 45] { R11476 += 1 };
  s1 -> s2 [46, 46] { R11476 += 1 };
  s1 -> s3 [47, 47] { R11476 += 1 };
  s1 -> s1 [48, 65535] { R11476 += 1 };
  s2 -> s1 [0, 45] { R11476 += 1 };
  s2 -> s2 [46, 46] { R11476 += 1 };
  s2 -> s3 [47, 47] { R11476 += 1 };
  s2 -> s1 [48, 114] { R11476 += 1 };
  s2 -> s8 [115, 115] { R11476 += 1 };
  s2 -> s1 [116, 65535] { R11476 += 1 };
  s3 -> s3 [0, 45] { R11476 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R11476 += 1 };
  s3 -> s3 [47, 65535] { R11476 += 1 };
  s4 -> s3 [0, 45] { R11476 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R11476 += 1 };
  s4 -> s3 [47, 114] { R11476 += 1 };
  s4 -> s5 [115, 115] { R11476 += 1 };
  s4 -> s3 [116, 65535] { R11476 += 1 };
  s5 -> s3 [0, 45] { R11476 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R11476 += 1 };
  s5 -> s3 [47, 110] { R11476 += 1 };
  s5 -> s6 [111, 111] { R11476 += 1 };
  s5 -> s3 [112, 65535] { R11476 += 1 };
  s6 -> s3 [0, 45] { R11476 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R11476 += 1 };
  s6 -> s3 [47, 98] { R11476 += 1 };
  s6 -> s7 [99, 99] { R11476 += 1 };
  s6 -> s3 [100, 65535] { R11476 += 1 };
  s7 -> s3 [0, 45] { R11476 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R11476 += 1 };
  s7 -> s3 [47, 106] { R11476 += 1 };
  s7 -> s3 [108, 65535] { R11476 += 1 };
  s8 -> s1 [0, 45] { R11476 += 1 };
  s8 -> s2 [46, 46] { R11476 += 1 };
  s8 -> s3 [47, 47] { R11476 += 1 };
  s8 -> s1 [48, 110] { R11476 += 1 };
  s8 -> s9 [111, 111] { R11476 += 1 };
  s8 -> s1 [112, 65535] { R11476 += 1 };
  s9 -> s1 [0, 45] { R11476 += 1 };
  s9 -> s2 [46, 46] { R11476 += 1 };
  s9 -> s3 [47, 47] { R11476 += 1 };
  s9 -> s1 [48, 98] { R11476 += 1 };
  s9 -> s10 [99, 99] { R11476 += 1 };
  s9 -> s1 [100, 65535] { R11476 += 1 };
  s10 -> s1 [0, 45] { R11476 += 1 };
  s10 -> s2 [46, 46] { R11476 += 1 };
  s10 -> s3 [47, 47] { R11476 += 1 };
  s10 -> s1 [48, 106] { R11476 += 1 };
  s10 -> s1 [108, 65535] { R11476 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R11478 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R11477 += 1, R11478 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11478 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R11480 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R11479 += 1, R11480 += 1 };
  s0 -> s2 [0, 65535] { R11480 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R11480 += 1 };
  s0 -> s1 [48, 65535] { R11480 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R11480 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R11480 += 1 };
  s1 -> s1 [48, 65535] { R11480 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R11480 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R11480 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R11480 += 1 };
  s2 -> s1 [48, 65535] { R11480 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11480 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R11482 += 1, R11300 += 1 };
  s0 -> s2 [0, 65535] { R11482 += 1, R11299 += 1, R11300 += 1 };
  s0 -> s0 [0, 65535] { R11481 += 1, R11482 += 1 };
  s0 -> s1 [38, 42] { R11482 += 1, R11300 += 1 };
  s0 -> s1 [44, 45] { R11482 += 1, R11300 += 1 };
  s0 -> s1 [47, 62] { R11482 += 1, R11300 += 1 };
  s0 -> s1 [64, 65535] { R11482 += 1, R11300 += 1 };
  s1 -> s1 [0, 36] { R11482 += 1, R11300 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11482 += 1 };
  s1 -> s1 [38, 42] { R11482 += 1, R11300 += 1 };
  s1 -> s1 [44, 45] { R11482 += 1, R11300 += 1 };
  s1 -> s1 [47, 62] { R11482 += 1, R11300 += 1 };
  s1 -> s1 [64, 65535] { R11482 += 1, R11300 += 1 };
  s2 -> s1 [0, 36] { R11482 += 1, R11300 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11482 += 1, R11299 += 1, R11300 += 1 };
  s2 -> s1 [38, 42] { R11482 += 1, R11300 += 1 };
  s2 -> s1 [44, 45] { R11482 += 1, R11300 += 1 };
  s2 -> s1 [47, 62] { R11482 += 1, R11300 += 1 };
  s2 -> s1 [64, 65535] { R11482 += 1, R11300 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R11484 += 1, R11301 += 1, R11302 += 1 };
  s0 -> s2 [0, 65535] { R11484 += 1, R11302 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R11483 += 1, R11484 += 1 };
  s1 -> s1 [0, 65535] { R11484 += 1, R11301 += 1, R11302 += 1 };
  s1 -> s2 [0, 65535] { R11484 += 1, R11302 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11484 += 1, R11302 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R11484 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11484 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R11486 += 1, R11303 += 1, R11304 += 1 };
  s0 -> s0 [0, 65535] { R11485 += 1, R11486 += 1 };
  s0 -> s3 [0, 65535] { R11486 += 1, R11304 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11486 += 1 };
  s1 -> s7 [0, 65535] { R11486 += 1, R11304 += 1 };
  s1 -> s1 [0, 65535] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11486 += 1, R11303 += 1, R11304 += 1 };
  s2 -> s3 [0, 65535] { R11486 += 1, R11304 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s4 [63, 63] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11486 += 1 };
  s3 -> s3 [0, 65535] { R11486 += 1, R11304 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s4 [63, 63] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R11486 += 1, R11304 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11486 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11486 += 1 };
  s7 -> s7 [0, 65535] { R11486 += 1, R11304 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11488 += 1, R11306 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R11487 += 1, R11488 += 1 };
  s0 -> s2 [0, 65535] { R11488 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R11488 += 1, R11305 += 1, R11306 += 1 };
  s1 -> s1 [0, 65535] { R11488 += 1, R11306 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11488 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R11488 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11488 += 1, R11306 += 1 };
  s2 -> s2 [0, 65535] { R11488 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R11488 += 1 };
  s3 -> s1 [0, 65535] { R11488 += 1, R11306 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11488 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R11488 += 1, R11305 += 1, R11306 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11488 += 1, R11306 += 1 };
  s5 -> s6 [0, 65535] { R11488 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11488 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R11490 += 1, R11444 += 1 };
  s0 -> s0 [0, 65535] { R11489 += 1, R11490 += 1 };
  s0 -> s2 [0, 65535] { R11490 += 1, R11443 += 1, R11444 += 1 };
  s0 -> s1 [45, 63] { R11490 += 1, R11444 += 1 };
  s0 -> s3 [87, 87] { R11490 += 1, R11444 += 1 };
  s0 -> s1 [88, 65535] { R11490 += 1, R11444 += 1 };
  s1 -> s1 [0, 43] { R11490 += 1, R11444 += 1 };
  s1 -> s1 [45, 63] { R11490 += 1, R11444 += 1 };
  s1 -> s3 [87, 87] { R11490 += 1, R11444 += 1 };
  s1 -> s1 [88, 65535] { R11490 += 1, R11444 += 1 };
  s2 -> s1 [0, 43] { R11490 += 1, R11444 += 1 };
  s2 -> s2 [0, 65535] { R11490 += 1, R11443 += 1, R11444 += 1 };
  s2 -> s1 [45, 63] { R11490 += 1, R11444 += 1 };
  s2 -> s3 [87, 87] { R11490 += 1, R11444 += 1 };
  s2 -> s1 [88, 65535] { R11490 += 1, R11444 += 1 };
  s3 -> s3 [0, 43] { R11490 += 1, R11444 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11490 += 1 };
  s3 -> s3 [45, 63] { R11490 += 1, R11444 += 1 };
  s3 -> s3 [87, 65535] { R11490 += 1, R11444 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R11492 += 1, R11446 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R11491 += 1, R11492 += 1 };
  s0 -> s2 [0, 65535] { R11492 += 1, R11445 += 1, R11446 += 1 };
  s1 -> s1 [0, 65535] { R11492 += 1, R11446 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11492 += 1 };
  s2 -> s1 [0, 65535] { R11492 += 1, R11446 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11492 += 1, R11445 += 1, R11446 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11492 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R11494 += 1, R11448 += 1 };
  s0 -> s2 [0, 65535] { R11494 += 1, R11447 += 1, R11448 += 1 };
  s0 -> s0 [0, 65535] { R11493 += 1, R11494 += 1 };
  s0 -> s3 [0, 65535] { R11494 += 1, R11448 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R11494 += 1, R11448 += 1 };
  s0 -> s1 [59, 65535] { R11494 += 1, R11448 += 1 };
  s1 -> s1 [0, 57] { R11494 += 1, R11448 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11494 += 1 };
  s1 -> s4 [58, 58] { R11494 += 1, R11448 += 1 };
  s1 -> s1 [59, 65535] { R11494 += 1, R11448 += 1 };
  s2 -> s1 [0, 57] { R11494 += 1, R11448 += 1 };
  s2 -> s2 [0, 65535] { R11494 += 1, R11447 += 1, R11448 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R11494 += 1, R11448 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R11494 += 1, R11448 += 1 };
  s2 -> s1 [59, 65535] { R11494 += 1, R11448 += 1 };
  s3 -> s1 [0, 57] { R11494 += 1, R11448 += 1 };
  s3 -> s5 [0, 65535] { R11494 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11494 += 1, R11448 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R11494 += 1, R11448 += 1 };
  s3 -> s1 [59, 65535] { R11494 += 1, R11448 += 1 };
  s4 -> s4 [0, 65535] { R11494 += 1, R11448 += 1 };
  s5 -> s5 [0, 65535] { R11494 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R11496 += 1, R11450 += 1 };
  s0 -> s0 [0, 65535] { R11495 += 1, R11496 += 1 };
  s0 -> s2 [0, 65535] { R11496 += 1, R11449 += 1, R11450 += 1 };
  s0 -> s3 [0, 65535] { R11496 += 1, R11450 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R11496 += 1, R11450 += 1 };
  s0 -> s1 [88, 65535] { R11496 += 1, R11450 += 1 };
  s1 -> s1 [0, 86] { R11496 += 1, R11450 += 1 };
  s1 -> s1 [0, 65535] { R11496 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R11496 += 1, R11450 += 1 };
  s1 -> s1 [88, 65535] { R11496 += 1, R11450 += 1 };
  s2 -> s1 [0, 86] { R11496 += 1, R11450 += 1 };
  s2 -> s2 [0, 65535] { R11496 += 1, R11449 += 1, R11450 += 1 };
  s2 -> s3 [0, 65535] { R11496 += 1, R11450 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [87, 87] { R11496 += 1, R11450 += 1 };
  s2 -> s1 [88, 65535] { R11496 += 1, R11450 += 1 };
  s3 -> s1 [0, 86] { R11496 += 1, R11450 += 1 };
  s3 -> s3 [0, 65535] { R11496 += 1, R11450 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11496 += 1 };
  s3 -> s4 [87, 87] { R11496 += 1, R11450 += 1 };
  s3 -> s1 [88, 65535] { R11496 += 1, R11450 += 1 };
  s4 -> s4 [0, 65535] { R11496 += 1, R11450 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11496 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R11498 += 1, R11451 += 1, R11452 += 1 };
  s0 -> s3 [0, 65535] { R11498 += 1, R11452 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R11497 += 1, R11498 += 1 };
  s0 -> s4 [91, 91] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R11498 += 1, R11452 += 1 };
  s1 -> s5 [0, 65535] { R11498 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R11498 += 1, R11451 += 1, R11452 += 1 };
  s2 -> s3 [0, 65535] { R11498 += 1, R11452 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R11498 += 1, R11452 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R11498 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R11498 += 1, R11452 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R11498 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11498 += 1, R11452 += 1 };
  s7 -> s5 [0, 65535] { R11498 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R11499 += 1, R11500 += 1 };
  s0 -> s1 [0, 65535] { R11500 += 1, R11453 += 1, R11454 += 1 };
  s0 -> s2 [0, 65535] { R11500 += 1, R11454 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R11500 += 1, R11454 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11500 += 1, R11453 += 1, R11454 += 1 };
  s1 -> s2 [0, 65535] { R11500 += 1, R11454 += 1, R5998 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R11500 += 1, R11454 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11500 += 1 };
  s2 -> s6 [0, 65535] { R11500 += 1, R11454 += 1 };
  s2 -> s2 [0, 65535] { R11500 += 1, R11454 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11500 += 1 };
  s3 -> s2 [0, 65535] { R11500 += 1, R11454 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R11500 += 1, R11454 += 1, R5997 += 1, R5998 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11500 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11500 += 1 };
  s6 -> s6 [0, 65535] { R11500 += 1, R11454 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R11502 += 1, R11456 += 1, R11420 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R11502 += 1, R11455 += 1, R11456 += 1 };
  s0 -> s3 [0, 65535] { R11502 += 1, R11456 += 1, R11419 += 1, R11420 += 1 };
  s0 -> s0 [0, 65535] { R11501 += 1, R11502 += 1 };
  s1 -> s6 [0, 65535] { R11502 += 1, R11456 += 1 };
  s1 -> s1 [0, 65535] { R11502 += 1, R11456 += 1, R11420 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535] { R11502 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R11502 += 1, R11456 += 1, R11420 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R11502 += 1, R11455 += 1, R11456 += 1 };
  s2 -> s3 [0, 65535] { R11502 += 1, R11456 += 1, R11419 += 1, R11420 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R11502 += 1, R11456 += 1, R11420 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R11502 += 1 };
  s3 -> s3 [0, 65535] { R11502 += 1, R11456 += 1, R11419 += 1, R11420 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11502 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11502 += 1, R11456 += 1 };
  s6 -> s4 [0, 65535] { R11502 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R11503 += 1, R11504 += 1 };
  s0 -> s1 [0, 65535] { R11504 += 1, R11458 += 1, R11421 += 1, R11422 += 1 };
  s0 -> s2 [0, 65535] { R11504 += 1, R11457 += 1, R11458 += 1 };
  s0 -> s3 [108, 108] { R11504 += 1, R11458 += 1, R11422 += 1 };
  s1 -> s1 [0, 65535] { R11504 += 1, R11458 += 1, R11421 += 1, R11422 += 1 };
  s1 -> s3 [108, 108] { R11504 += 1, R11458 += 1, R11422 += 1 };
  s2 -> s1 [0, 65535] { R11504 += 1, R11458 += 1, R11421 += 1, R11422 += 1 };
  s2 -> s2 [0, 65535] { R11504 += 1, R11457 += 1, R11458 += 1 };
  s2 -> s3 [108, 108] { R11504 += 1, R11458 += 1, R11422 += 1 };
  s3 -> s4 [111, 111] { R11504 += 1, R11458 += 1, R11422 += 1 };
  s4 -> s5 [99, 99] { R11504 += 1, R11458 += 1, R11422 += 1 };
  s5 -> s6 [97, 97] { R11504 += 1, R11458 += 1, R11422 += 1 };
  s6 -> s7 [108, 108] { R11504 += 1, R11458 += 1, R11422 += 1 };
  s7 -> s8 [104, 104] { R11504 += 1, R11458 += 1, R11422 += 1 };
  s8 -> s9 [111, 111] { R11504 += 1, R11458 += 1, R11422 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R11504 += 1, R11458 += 1 };
  s9 -> s11 [0, 65535] { R11504 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R11504 += 1 };
  accepting s9, s10, s11;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s0 -> s0 [0, 65535] { R11505 += 1, R11506 += 1 };
  s0 -> s2 [0, 65535] { R11506 += 1, R11459 += 1, R11460 += 1 };
  s0 -> s3 [0, 65535] { R11506 += 1, R11460 += 1, R11427 += 1, R11428 += 1 };
  s0 -> s4 [87, 87] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s0 -> s1 [88, 65535] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s1 -> s1 [0, 86] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s1 -> s4 [87, 87] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s1 -> s1 [88, 65535] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s2 -> s1 [0, 86] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s2 -> s2 [0, 65535] { R11506 += 1, R11459 += 1, R11460 += 1 };
  s2 -> s3 [0, 65535] { R11506 += 1, R11460 += 1, R11427 += 1, R11428 += 1 };
  s2 -> s4 [87, 87] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s2 -> s1 [88, 65535] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s3 -> s1 [0, 86] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s3 -> s3 [0, 65535] { R11506 += 1, R11460 += 1, R11427 += 1, R11428 += 1 };
  s3 -> s4 [87, 87] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s3 -> s1 [88, 65535] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s4 -> s5 [0, 65535] { R11506 += 1 };
  s4 -> s4 [0, 65535] { R11506 += 1, R11460 += 1, R11428 += 1 };
  s4 -> s6 [0, 65535] { R11506 += 1, R11460 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R11506 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R11506 += 1 };
  s6 -> s6 [0, 65535] { R11506 += 1, R11460 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11508 += 1, R11462 += 1, R11429 += 1, R11430 += 1 };
  s0 -> s2 [0, 65535] { R11508 += 1, R11462 += 1, R11430 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R11508 += 1, R11461 += 1, R11462 += 1 };
  s0 -> s0 [0, 65535] { R11507 += 1, R11508 += 1 };
  s1 -> s1 [0, 65535] { R11508 += 1, R11462 += 1, R11429 += 1, R11430 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11508 += 1 };
  s1 -> s2 [0, 65535] { R11508 += 1, R11462 += 1, R11430 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11508 += 1 };
  s2 -> s2 [0, 65535] { R11508 += 1, R11462 += 1, R11430 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R11508 += 1, R11462 += 1 };
  s3 -> s1 [0, 65535] { R11508 += 1, R11462 += 1, R11429 += 1, R11430 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11508 += 1, R11462 += 1, R11430 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R11508 += 1, R11461 += 1, R11462 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11508 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11508 += 1 };
  s6 -> s6 [0, 65535] { R11508 += 1, R11462 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s0 -> s2 [0, 65535] { R11510 += 1, R11464 += 1, R11432 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R11509 += 1, R11510 += 1 };
  s0 -> s3 [0, 65535] { R11510 += 1, R11464 += 1, R11431 += 1, R11432 += 1 };
  s0 -> s4 [0, 65535] { R11510 += 1, R11463 += 1, R11464 += 1 };
  s0 -> s5 [87, 87] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s0 -> s1 [88, 65535] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s1 -> s1 [0, 86] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R11510 += 1 };
  s1 -> s1 [0, 65535] { R11510 += 1, R11464 += 1 };
  s1 -> s5 [87, 87] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s1 -> s1 [88, 65535] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s2 -> s1 [0, 86] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s2 -> s2 [0, 65535] { R11510 += 1, R11464 += 1, R11432 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R11510 += 1 };
  s2 -> s8 [0, 65535] { R11510 += 1, R11464 += 1 };
  s2 -> s5 [87, 87] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s2 -> s1 [88, 65535] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s3 -> s1 [0, 86] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s3 -> s2 [0, 65535] { R11510 += 1, R11464 += 1, R11432 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R11510 += 1 };
  s3 -> s3 [0, 65535] { R11510 += 1, R11464 += 1, R11431 += 1, R11432 += 1 };
  s3 -> s5 [87, 87] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s3 -> s1 [88, 65535] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s4 -> s1 [0, 86] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s4 -> s2 [0, 65535] { R11510 += 1, R11464 += 1, R11432 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R11510 += 1, R11464 += 1, R11431 += 1, R11432 += 1 };
  s4 -> s4 [0, 65535] { R11510 += 1, R11463 += 1, R11464 += 1 };
  s4 -> s5 [87, 87] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s4 -> s1 [88, 65535] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s5 -> s5 [0, 65535] { R11510 += 1, R11464 += 1, R11432 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11510 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R11510 += 1 };
  s8 -> s8 [0, 65535] { R11510 += 1, R11464 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s0 -> s2 [0, 65535] { R11512 += 1, R11466 += 1, R11433 += 1, R11434 += 1 };
  s0 -> s3 [0, 65535] { R11512 += 1, R11465 += 1, R11466 += 1 };
  s0 -> s4 [0, 65535] { R11512 += 1, R11466 += 1, R11434 += 1, R11413 += 1, R11414 += 1 };
  s0 -> s0 [0, 65535] { R11511 += 1, R11512 += 1 };
  s0 -> s1 [88, 65535] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s1 -> s1 [0, 86] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s1 -> s5 [0, 65535] { R11512 += 1, R11466 += 1 };
  s1 -> s1 [0, 65535] { R11512 += 1, R11466 += 1, R11434 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R11512 += 1 };
  s1 -> s1 [88, 65535] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s2 -> s1 [0, 86] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s2 -> s2 [0, 65535] { R11512 += 1, R11466 += 1, R11433 += 1, R11434 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R11512 += 1, R11466 += 1, R11434 += 1, R11413 += 1, R11414 += 1 };
  s2 -> s7 [0, 65535] { R11512 += 1 };
  s2 -> s1 [88, 65535] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s3 -> s1 [0, 86] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s3 -> s2 [0, 65535] { R11512 += 1, R11466 += 1, R11433 += 1, R11434 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11512 += 1, R11465 += 1, R11466 += 1 };
  s3 -> s4 [0, 65535] { R11512 += 1, R11466 += 1, R11434 += 1, R11413 += 1, R11414 += 1 };
  s3 -> s1 [88, 65535] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s4 -> s1 [0, 86] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s4 -> s5 [0, 65535] { R11512 += 1, R11466 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11512 += 1, R11466 += 1, R11434 += 1, R11413 += 1, R11414 += 1 };
  s4 -> s7 [0, 65535] { R11512 += 1 };
  s4 -> s1 [88, 65535] { R11512 += 1, R11466 += 1, R11434 += 1, R11414 += 1 };
  s5 -> s5 [0, 65535] { R11512 += 1, R11466 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R11512 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11512 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11514 += 1, R11467 += 1, R11468 += 1 };
  s0 -> s2 [0, 65535] { R11514 += 1, R11468 += 1, R11435 += 1, R11436 += 1 };
  s0 -> s3 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1, R11415 += 1, R11416 += 1 };
  s0 -> s4 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1, R11416 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R11513 += 1, R11514 += 1 };
  s1 -> s1 [0, 65535] { R11514 += 1, R11467 += 1, R11468 += 1 };
  s1 -> s2 [0, 65535] { R11514 += 1, R11468 += 1, R11435 += 1, R11436 += 1 };
  s1 -> s3 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1, R11415 += 1, R11416 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1, R11416 += 1, R5988 += 1 };
  s2 -> s2 [0, 65535] { R11514 += 1, R11468 += 1, R11435 += 1, R11436 += 1 };
  s2 -> s3 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1, R11415 += 1, R11416 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1, R11416 += 1, R5988 += 1 };
  s2 -> s8 [0, 65535] { R11514 += 1 };
  s3 -> s3 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1, R11415 += 1, R11416 += 1 };
  s3 -> s6 [0, 65535] { R11514 += 1, R11468 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1, R11416 += 1, R5988 += 1 };
  s3 -> s8 [0, 65535] { R11514 += 1 };
  s4 -> s5 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1 };
  s4 -> s6 [0, 65535] { R11514 += 1, R11468 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1, R11416 += 1, R5988 += 1 };
  s4 -> s8 [0, 65535] { R11514 += 1 };
  s5 -> s5 [0, 65535] { R11514 += 1, R11468 += 1, R11436 += 1 };
  s5 -> s6 [0, 65535] { R11514 += 1, R11468 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R11514 += 1 };
  s6 -> s6 [0, 65535] { R11514 += 1, R11468 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R11514 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R11514 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R11516 += 1, R11469 += 1, R11470 += 1 };
  s0 -> s0 [0, 65535] { R11515 += 1, R11516 += 1 };
  s0 -> s2 [0, 65535] { R11516 += 1, R11470 += 1, R11438 += 1, R11417 += 1, R11418 += 1 };
  s0 -> s3 [0, 65535] { R11516 += 1, R11470 += 1, R11437 += 1, R11438 += 1 };
  s0 -> s4 [116, 116] { R11516 += 1, R11470 += 1, R11438 += 1, R11418 += 1 };
  s1 -> s1 [0, 65535] { R11516 += 1, R11469 += 1, R11470 += 1 };
  s1 -> s2 [0, 65535] { R11516 += 1, R11470 += 1, R11438 += 1, R11417 += 1, R11418 += 1 };
  s1 -> s3 [0, 65535] { R11516 += 1, R11470 += 1, R11437 += 1, R11438 += 1 };
  s1 -> s4 [116, 116] { R11516 += 1, R11470 += 1, R11438 += 1, R11418 += 1 };
  s2 -> s2 [0, 65535] { R11516 += 1, R11470 += 1, R11438 += 1, R11417 += 1, R11418 += 1 };
  s2 -> s4 [116, 116] { R11516 += 1, R11470 += 1, R11438 += 1, R11418 += 1 };
  s3 -> s2 [0, 65535] { R11516 += 1, R11470 += 1, R11438 += 1, R11417 += 1, R11418 += 1 };
  s3 -> s3 [0, 65535] { R11516 += 1, R11470 += 1, R11437 += 1, R11438 += 1 };
  s3 -> s4 [116, 116] { R11516 += 1, R11470 += 1, R11438 += 1, R11418 += 1 };
  s4 -> s4 [0, 65535] { R11516 += 1, R11470 += 1, R11438 += 1 };
  s4 -> s5 [0, 65535] { R11516 += 1, R11470 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11516 += 1 };
  s5 -> s5 [0, 65535] { R11516 += 1, R11470 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R11516 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11516 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11518 += 1, R11472 += 1, R11439 += 1, R11440 += 1 };
  s0 -> s0 [0, 65535] { R11517 += 1, R11518 += 1 };
  s0 -> s2 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1, R11423 += 1, R11424 += 1 };
  s0 -> s3 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1, R11424 += 1, R5989 += 1 };
  s0 -> s4 [0, 65535] { R11518 += 1, R11471 += 1, R11472 += 1 };
  s1 -> s1 [0, 65535] { R11518 += 1, R11472 += 1, R11439 += 1, R11440 += 1 };
  s1 -> s2 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1, R11423 += 1, R11424 += 1 };
  s1 -> s3 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1, R11424 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R11518 += 1 };
  s2 -> s6 [0, 65535] { R11518 += 1, R11472 += 1 };
  s2 -> s2 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1, R11423 += 1, R11424 += 1 };
  s2 -> s3 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1, R11424 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s8 [0, 65535] { R11518 += 1 };
  s3 -> s6 [0, 65535] { R11518 += 1, R11472 += 1 };
  s3 -> s3 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1, R11424 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1 };
  s3 -> s8 [0, 65535] { R11518 += 1 };
  s4 -> s1 [0, 65535] { R11518 += 1, R11472 += 1, R11439 += 1, R11440 += 1 };
  s4 -> s2 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1, R11423 += 1, R11424 += 1 };
  s4 -> s3 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1, R11424 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11518 += 1, R11471 += 1, R11472 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11518 += 1, R11472 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s8 [0, 65535] { R11518 += 1 };
  s7 -> s6 [0, 65535] { R11518 += 1, R11472 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11518 += 1, R11472 += 1, R11440 += 1 };
  s7 -> s8 [0, 65535] { R11518 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R11518 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R11520 += 1, R11474 += 1, R11442 += 1, R11425 += 1, R11426 += 1 };
  s0 -> s0 [0, 65535] { R11519 += 1, R11520 += 1 };
  s0 -> s2 [0, 65535] { R11520 += 1, R11474 += 1, R11441 += 1, R11442 += 1 };
  s0 -> s3 [0, 65535] { R11520 += 1, R11473 += 1, R11474 += 1 };
  s0 -> s4 [115, 115] { R11520 += 1, R11474 += 1, R11442 += 1, R11426 += 1 };
  s1 -> s1 [0, 65535] { R11520 += 1, R11474 += 1, R11442 += 1, R11425 += 1, R11426 += 1 };
  s1 -> s4 [115, 115] { R11520 += 1, R11474 += 1, R11442 += 1, R11426 += 1 };
  s2 -> s1 [0, 65535] { R11520 += 1, R11474 += 1, R11442 += 1, R11425 += 1, R11426 += 1 };
  s2 -> s2 [0, 65535] { R11520 += 1, R11474 += 1, R11441 += 1, R11442 += 1 };
  s2 -> s4 [115, 115] { R11520 += 1, R11474 += 1, R11442 += 1, R11426 += 1 };
  s3 -> s1 [0, 65535] { R11520 += 1, R11474 += 1, R11442 += 1, R11425 += 1, R11426 += 1 };
  s3 -> s2 [0, 65535] { R11520 += 1, R11474 += 1, R11441 += 1, R11442 += 1 };
  s3 -> s3 [0, 65535] { R11520 += 1, R11473 += 1, R11474 += 1 };
  s3 -> s4 [115, 115] { R11520 += 1, R11474 += 1, R11442 += 1, R11426 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11520 += 1 };
  s4 -> s4 [0, 65535] { R11520 += 1, R11474 += 1, R11442 += 1 };
  s4 -> s7 [0, 65535] { R11520 += 1, R11474 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11520 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11520 += 1 };
  s7 -> s7 [0, 65535] { R11520 += 1, R11474 += 1 };
  accepting s4, s5, s6, s7;
};
};
constraint R1 = R11418 && R2 = R11442 && R3 = R11306 && R4 = R11520 && R15 = 0 && R16 = R11474 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R11299 - R11474 = 1 && R11300 = R11306 && R11301 - R11474 = 1 && R11302 = R11306 && R11303 - R11474 = 1 && R11304 = R11306 && R11305 - R11474 = 1 && R11417 = 0 && R11421 = 0 && R11422 = 0 && R11425 = 0 && R11426 = 0 && R11427 = 0 && R11428 = R11442 && R11429 = 0 && R11430 = R11442 && R11431 = 0 && R11432 = R11442 && R11433 = 0 && R11434 = R11442 && R11435 = 0 && R11436 = R11442 && R11437 = 0 && R11438 = R11442 && R11439 = 0 && R11440 = R11442 && R11441 = 0 && R11443 = 0 && R11444 = R11474 && R11445 = 0 && R11446 = R11474 && R11447 = 0 && R11448 = R11474 && R11449 = 0 && R11450 = R11474 && R11451 = 0 && R11452 = R11474 && R11453 = 0 && R11454 = R11474 && R11455 = 0 && R11456 = R11474 && R11457 = 0 && R11458 = R11474 && R11459 = 0 && R11460 = R11474 && R11461 = 0 && R11462 = R11474 && R11463 = 0 && R11464 = R11474 && R11465 = 0 && R11466 = R11474 && R11467 = 0 && R11468 = R11474 && R11469 = 0 && R11470 = R11474 && R11471 = 0 && R11472 = R11474 && R11473 = 0 && R11475 = 10 && R11476 = R11520 && R11477 = 10 && R11478 = R11520 && R11479 = 10 && R11480 = R11520 && R11481 = 10 && R11482 = R11520 && R11483 = 10 && R11484 = R11520 && R11485 = 10 && R11486 = R11520 && R11487 = 10 && R11488 = R11520 && R11489 = 10 && R11490 = R11520 && R11491 = 10 && R11492 = R11520 && R11493 = 10 && R11494 = R11520 && R11495 = 10 && R11496 = R11520 && R11497 = 10 && R11498 = R11520 && R11499 = 10 && R11500 = R11520 && R11501 = 10 && R11502 = R11520 && R11503 = 10 && R11504 = R11520 && R11505 = 10 && R11506 = R11520 && R11507 = 10 && R11508 = R11520 && R11509 = 10 && R11510 = R11520 && R11511 = 10 && R11512 = R11520 && R11513 = 10 && R11514 = R11520 && R11515 = 10 && R11516 = R11520 && R11517 = 10 && R11518 = R11520 && R11519 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R11474 < R11306 && -1 < R11418 && 0 < R11442 && -1 < R11474 && 9 < R11520 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R11413 != 0 || R11414 = R11418 || (R5988 = 0 && R11418 = 0)) && (R11415 != 0 || R11416 = R11418 || (R5988 = 0 && R11418 = 0)) && (R5989 = 0 || (R11423 = 0 && R11424 = 0)) && (R5990 = 0 || (R11419 = 0 && R11420 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R11413 = 0 || (R5988 = 0 && R11418 = 0)) && (R11415 = 0 || (R5988 = 0 && R11418 = 0));
// End of Parikh automata intersection problem
