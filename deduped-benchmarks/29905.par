// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R11627, R11628, R11629, R11630, R11631, R11632, R11633, R11634, R11635, R11636, R11637, R11638, R11639, R11640, R11641, R11642, R11643, R11644, R11645, R11646, R11647, R11648, R11649, R11650, R11651, R11652, R11653, R11654, R11655, R11656, R11657, R11658, R11659, R11660, R11661, R11662, R11663, R11664, R11665, R11666, R11667, R11668, R11669, R11670, R11671, R11672, R11673, R11674, R11675, R11676, R11677, R11678, R11679, R11680, R11681, R11682, R11683, R11684, R11685, R11686, R11687, R11688, R11689, R11690, R11691, R11692, R11693, R11694, R11695, R11696, R11697, R11698, R11699, R11700, R11701, R11702, R11703, R11704, R11705, R11706, R11707, R11708, R11709, R11710, R11711, R11712, R11713, R11714, R11715, R11716, R11717, R11718, R11719, R11720, R11721, R11722, R11723, R11724, R11725, R11726, R11727, R11728, R11729, R11730, R11731, R11732, R11733, R11734, R11735, R11736, R11737, R11738, R11739, R11740, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R11696 += 1 };
  s0 -> s0 [0, 65535] { R11695 += 1, R11696 += 1 };
  s0 -> s2 [46, 46] { R11696 += 1 };
  s0 -> s3 [47, 47] { R11696 += 1 };
  s0 -> s1 [48, 65535] { R11696 += 1 };
  s1 -> s1 [0, 45] { R11696 += 1 };
  s1 -> s2 [46, 46] { R11696 += 1 };
  s1 -> s3 [47, 47] { R11696 += 1 };
  s1 -> s1 [48, 65535] { R11696 += 1 };
  s2 -> s1 [0, 45] { R11696 += 1 };
  s2 -> s2 [46, 46] { R11696 += 1 };
  s2 -> s3 [47, 47] { R11696 += 1 };
  s2 -> s1 [48, 114] { R11696 += 1 };
  s2 -> s8 [115, 115] { R11696 += 1 };
  s2 -> s1 [116, 65535] { R11696 += 1 };
  s3 -> s3 [0, 45] { R11696 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R11696 += 1 };
  s3 -> s3 [47, 65535] { R11696 += 1 };
  s4 -> s3 [0, 45] { R11696 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R11696 += 1 };
  s4 -> s3 [47, 114] { R11696 += 1 };
  s4 -> s5 [115, 115] { R11696 += 1 };
  s4 -> s3 [116, 65535] { R11696 += 1 };
  s5 -> s3 [0, 45] { R11696 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R11696 += 1 };
  s5 -> s3 [47, 110] { R11696 += 1 };
  s5 -> s6 [111, 111] { R11696 += 1 };
  s5 -> s3 [112, 65535] { R11696 += 1 };
  s6 -> s3 [0, 45] { R11696 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R11696 += 1 };
  s6 -> s3 [47, 98] { R11696 += 1 };
  s6 -> s7 [99, 99] { R11696 += 1 };
  s6 -> s3 [100, 65535] { R11696 += 1 };
  s7 -> s3 [0, 45] { R11696 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R11696 += 1 };
  s7 -> s3 [47, 106] { R11696 += 1 };
  s7 -> s3 [108, 65535] { R11696 += 1 };
  s8 -> s1 [0, 45] { R11696 += 1 };
  s8 -> s2 [46, 46] { R11696 += 1 };
  s8 -> s3 [47, 47] { R11696 += 1 };
  s8 -> s1 [48, 110] { R11696 += 1 };
  s8 -> s9 [111, 111] { R11696 += 1 };
  s8 -> s1 [112, 65535] { R11696 += 1 };
  s9 -> s1 [0, 45] { R11696 += 1 };
  s9 -> s2 [46, 46] { R11696 += 1 };
  s9 -> s3 [47, 47] { R11696 += 1 };
  s9 -> s1 [48, 98] { R11696 += 1 };
  s9 -> s10 [99, 99] { R11696 += 1 };
  s9 -> s1 [100, 65535] { R11696 += 1 };
  s10 -> s1 [0, 45] { R11696 += 1 };
  s10 -> s2 [46, 46] { R11696 += 1 };
  s10 -> s3 [47, 47] { R11696 += 1 };
  s10 -> s1 [48, 106] { R11696 += 1 };
  s10 -> s1 [108, 65535] { R11696 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R11698 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R11697 += 1, R11698 += 1 };
  s1 -> s1 [0, 65535] { R11698 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R11700 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R11699 += 1, R11700 += 1 };
  s0 -> s2 [0, 65535] { R11700 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R11700 += 1 };
  s0 -> s1 [48, 65535] { R11700 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R11700 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R11700 += 1 };
  s1 -> s1 [48, 65535] { R11700 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R11700 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R11700 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R11700 += 1 };
  s2 -> s1 [48, 65535] { R11700 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11700 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R11702 += 1, R11628 += 1 };
  s0 -> s0 [0, 65535] { R11701 += 1, R11702 += 1 };
  s0 -> s2 [0, 65535] { R11702 += 1, R11627 += 1, R11628 += 1 };
  s0 -> s1 [38, 42] { R11702 += 1, R11628 += 1 };
  s0 -> s1 [44, 45] { R11702 += 1, R11628 += 1 };
  s0 -> s1 [47, 62] { R11702 += 1, R11628 += 1 };
  s0 -> s1 [64, 65535] { R11702 += 1, R11628 += 1 };
  s1 -> s1 [0, 36] { R11702 += 1, R11628 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11702 += 1 };
  s1 -> s1 [38, 42] { R11702 += 1, R11628 += 1 };
  s1 -> s1 [44, 45] { R11702 += 1, R11628 += 1 };
  s1 -> s1 [47, 62] { R11702 += 1, R11628 += 1 };
  s1 -> s1 [64, 65535] { R11702 += 1, R11628 += 1 };
  s2 -> s1 [0, 36] { R11702 += 1, R11628 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11702 += 1, R11627 += 1, R11628 += 1 };
  s2 -> s1 [38, 42] { R11702 += 1, R11628 += 1 };
  s2 -> s1 [44, 45] { R11702 += 1, R11628 += 1 };
  s2 -> s1 [47, 62] { R11702 += 1, R11628 += 1 };
  s2 -> s1 [64, 65535] { R11702 += 1, R11628 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R11704 += 1, R11630 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R11703 += 1, R11704 += 1 };
  s0 -> s2 [0, 65535] { R11704 += 1, R11629 += 1, R11630 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11704 += 1 };
  s1 -> s1 [0, 65535] { R11704 += 1, R11630 += 1, R0 += 1 };
  s2 -> s1 [0, 65535] { R11704 += 1, R11630 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11704 += 1, R11629 += 1, R11630 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11704 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R11706 += 1, R11632 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R11706 += 1, R11631 += 1, R11632 += 1 };
  s0 -> s0 [0, 65535] { R11705 += 1, R11706 += 1 };
  s0 -> s4 [63, 63] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R11706 += 1, R11632 += 1 };
  s1 -> s6 [0, 65535] { R11706 += 1 };
  s1 -> s1 [0, 65535] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s2 -> s1 [0, 62] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R11706 += 1, R11632 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11706 += 1 };
  s2 -> s4 [63, 63] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R11706 += 1, R11632 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11706 += 1, R11631 += 1, R11632 += 1 };
  s3 -> s4 [63, 63] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R11706 += 1, R11632 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11706 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11706 += 1, R11632 += 1 };
  s7 -> s6 [0, 65535] { R11706 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11708 += 1, R11634 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R11708 += 1, R11634 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R11708 += 1, R11633 += 1, R11634 += 1 };
  s0 -> s0 [0, 65535] { R11707 += 1, R11708 += 1 };
  s1 -> s1 [0, 65535] { R11708 += 1, R11634 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R11708 += 1, R11634 += 1 };
  s1 -> s5 [0, 65535] { R11708 += 1 };
  s2 -> s1 [0, 65535] { R11708 += 1, R11634 += 1, R5994 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11708 += 1, R11634 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535] { R11708 += 1 };
  s3 -> s1 [0, 65535] { R11708 += 1, R11634 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11708 += 1, R11634 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s3 [0, 65535] { R11708 += 1, R11633 += 1, R11634 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11708 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11708 += 1, R11634 += 1 };
  s6 -> s5 [0, 65535] { R11708 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R11710 += 1, R11664 += 1 };
  s0 -> s0 [0, 65535] { R11709 += 1, R11710 += 1 };
  s0 -> s2 [0, 65535] { R11710 += 1, R11663 += 1, R11664 += 1 };
  s0 -> s1 [45, 63] { R11710 += 1, R11664 += 1 };
  s0 -> s3 [87, 87] { R11710 += 1, R11664 += 1 };
  s0 -> s1 [88, 65535] { R11710 += 1, R11664 += 1 };
  s1 -> s1 [0, 43] { R11710 += 1, R11664 += 1 };
  s1 -> s1 [45, 63] { R11710 += 1, R11664 += 1 };
  s1 -> s3 [87, 87] { R11710 += 1, R11664 += 1 };
  s1 -> s1 [88, 65535] { R11710 += 1, R11664 += 1 };
  s2 -> s1 [0, 43] { R11710 += 1, R11664 += 1 };
  s2 -> s2 [0, 65535] { R11710 += 1, R11663 += 1, R11664 += 1 };
  s2 -> s1 [45, 63] { R11710 += 1, R11664 += 1 };
  s2 -> s3 [87, 87] { R11710 += 1, R11664 += 1 };
  s2 -> s1 [88, 65535] { R11710 += 1, R11664 += 1 };
  s3 -> s3 [0, 43] { R11710 += 1, R11664 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11710 += 1 };
  s3 -> s3 [45, 63] { R11710 += 1, R11664 += 1 };
  s3 -> s3 [87, 65535] { R11710 += 1, R11664 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R11712 += 1, R11666 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R11711 += 1, R11712 += 1 };
  s0 -> s2 [0, 65535] { R11712 += 1, R11665 += 1, R11666 += 1 };
  s1 -> s1 [0, 65535] { R11712 += 1, R11666 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R11712 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11712 += 1, R11666 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R11712 += 1, R11665 += 1, R11666 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11712 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R11714 += 1, R11668 += 1 };
  s0 -> s0 [0, 65535] { R11713 += 1, R11714 += 1 };
  s0 -> s2 [0, 65535] { R11714 += 1, R11667 += 1, R11668 += 1 };
  s0 -> s3 [0, 65535] { R11714 += 1, R11668 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R11714 += 1, R11668 += 1 };
  s0 -> s1 [59, 65535] { R11714 += 1, R11668 += 1 };
  s1 -> s1 [0, 57] { R11714 += 1, R11668 += 1 };
  s1 -> s1 [0, 65535] { R11714 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [58, 58] { R11714 += 1, R11668 += 1 };
  s1 -> s1 [59, 65535] { R11714 += 1, R11668 += 1 };
  s2 -> s1 [0, 57] { R11714 += 1, R11668 += 1 };
  s2 -> s2 [0, 65535] { R11714 += 1, R11667 += 1, R11668 += 1 };
  s2 -> s3 [0, 65535] { R11714 += 1, R11668 += 1, R10 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [58, 58] { R11714 += 1, R11668 += 1 };
  s2 -> s1 [59, 65535] { R11714 += 1, R11668 += 1 };
  s3 -> s1 [0, 57] { R11714 += 1, R11668 += 1 };
  s3 -> s5 [0, 65535] { R11714 += 1 };
  s3 -> s3 [0, 65535] { R11714 += 1, R11668 += 1, R10 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [58, 58] { R11714 += 1, R11668 += 1 };
  s3 -> s1 [59, 65535] { R11714 += 1, R11668 += 1 };
  s4 -> s4 [0, 65535] { R11714 += 1, R11668 += 1 };
  s5 -> s5 [0, 65535] { R11714 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R11716 += 1, R11670 += 1 };
  s0 -> s2 [0, 65535] { R11716 += 1, R11669 += 1, R11670 += 1 };
  s0 -> s3 [0, 65535] { R11716 += 1, R11670 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R11715 += 1, R11716 += 1 };
  s0 -> s4 [87, 87] { R11716 += 1, R11670 += 1 };
  s0 -> s1 [88, 65535] { R11716 += 1, R11670 += 1 };
  s1 -> s1 [0, 86] { R11716 += 1, R11670 += 1 };
  s1 -> s1 [0, 65535] { R11716 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R11716 += 1, R11670 += 1 };
  s1 -> s1 [88, 65535] { R11716 += 1, R11670 += 1 };
  s2 -> s1 [0, 86] { R11716 += 1, R11670 += 1 };
  s2 -> s2 [0, 65535] { R11716 += 1, R11669 += 1, R11670 += 1 };
  s2 -> s3 [0, 65535] { R11716 += 1, R11670 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [87, 87] { R11716 += 1, R11670 += 1 };
  s2 -> s1 [88, 65535] { R11716 += 1, R11670 += 1 };
  s3 -> s1 [0, 86] { R11716 += 1, R11670 += 1 };
  s3 -> s3 [0, 65535] { R11716 += 1, R11670 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11716 += 1 };
  s3 -> s4 [87, 87] { R11716 += 1, R11670 += 1 };
  s3 -> s1 [88, 65535] { R11716 += 1, R11670 += 1 };
  s4 -> s4 [0, 65535] { R11716 += 1, R11670 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11716 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R11718 += 1, R11672 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R11718 += 1, R11671 += 1, R11672 += 1 };
  s0 -> s0 [0, 65535] { R11717 += 1, R11718 += 1 };
  s0 -> s4 [91, 91] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535] { R11718 += 1 };
  s1 -> s7 [0, 65535] { R11718 += 1, R11672 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 90] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R11718 += 1, R11672 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535] { R11718 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R11718 += 1, R11672 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R11718 += 1, R11671 += 1, R11672 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R11718 += 1, R11672 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11718 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11718 += 1 };
  s7 -> s7 [0, 65535] { R11718 += 1, R11672 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R11720 += 1, R11674 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s0 [0, 65535] { R11719 += 1, R11720 += 1 };
  s0 -> s2 [0, 65535] { R11720 += 1, R11674 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R11720 += 1, R11673 += 1, R11674 += 1 };
  s1 -> s1 [0, 65535] { R11720 += 1, R11674 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s2 [0, 65535] { R11720 += 1, R11674 += 1, R5998 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R11720 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11720 += 1, R11674 += 1 };
  s2 -> s2 [0, 65535] { R11720 += 1, R11674 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R11720 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11720 += 1, R11674 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s2 [0, 65535] { R11720 += 1, R11674 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R11720 += 1, R11673 += 1, R11674 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11720 += 1, R11674 += 1 };
  s5 -> s6 [0, 65535] { R11720 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11720 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R11722 += 1, R11676 += 1, R11640 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R11722 += 1, R11675 += 1, R11676 += 1 };
  s0 -> s0 [0, 65535] { R11721 += 1, R11722 += 1 };
  s0 -> s3 [0, 65535] { R11722 += 1, R11676 += 1, R11639 += 1, R11640 += 1 };
  s1 -> s6 [0, 65535] { R11722 += 1, R11676 += 1 };
  s1 -> s1 [0, 65535] { R11722 += 1, R11676 += 1, R11640 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535] { R11722 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R11722 += 1, R11676 += 1, R11640 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R11722 += 1, R11675 += 1, R11676 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R11722 += 1, R11676 += 1, R11639 += 1, R11640 += 1 };
  s3 -> s1 [0, 65535] { R11722 += 1, R11676 += 1, R11640 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535] { R11722 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11722 += 1, R11676 += 1, R11639 += 1, R11640 += 1 };
  s4 -> s4 [0, 65535] { R11722 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11722 += 1, R11676 += 1 };
  s6 -> s4 [0, 65535] { R11722 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R11723 += 1, R11724 += 1 };
  s0 -> s1 [0, 65535] { R11724 += 1, R11677 += 1, R11678 += 1 };
  s0 -> s2 [0, 65535] { R11724 += 1, R11678 += 1, R11641 += 1, R11642 += 1 };
  s0 -> s3 [108, 108] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s1 -> s1 [0, 65535] { R11724 += 1, R11677 += 1, R11678 += 1 };
  s1 -> s2 [0, 65535] { R11724 += 1, R11678 += 1, R11641 += 1, R11642 += 1 };
  s1 -> s3 [108, 108] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s2 -> s2 [0, 65535] { R11724 += 1, R11678 += 1, R11641 += 1, R11642 += 1 };
  s2 -> s3 [108, 108] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s3 -> s4 [111, 111] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s4 -> s5 [99, 99] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s5 -> s6 [97, 97] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s6 -> s7 [108, 108] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s7 -> s8 [104, 104] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s8 -> s9 [111, 111] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s9 -> s10 [115, 115] { R11724 += 1, R11678 += 1, R11642 += 1 };
  s10 -> s10 [0, 65535] { R11724 += 1, R11678 += 1 };
  s10 -> s11 [0, 65535] { R11724 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R11724 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s10, s11, s12;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s0 -> s0 [0, 65535] { R11725 += 1, R11726 += 1 };
  s0 -> s2 [0, 65535] { R11726 += 1, R11680 += 1, R11647 += 1, R11648 += 1 };
  s0 -> s3 [0, 65535] { R11726 += 1, R11679 += 1, R11680 += 1 };
  s0 -> s4 [87, 87] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s0 -> s1 [88, 65535] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s1 -> s1 [0, 86] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s1 -> s4 [87, 87] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s1 -> s1 [88, 65535] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s2 -> s1 [0, 86] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s2 -> s2 [0, 65535] { R11726 += 1, R11680 += 1, R11647 += 1, R11648 += 1 };
  s2 -> s4 [87, 87] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s2 -> s1 [88, 65535] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s3 -> s1 [0, 86] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s3 -> s2 [0, 65535] { R11726 += 1, R11680 += 1, R11647 += 1, R11648 += 1 };
  s3 -> s3 [0, 65535] { R11726 += 1, R11679 += 1, R11680 += 1 };
  s3 -> s4 [87, 87] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s3 -> s1 [88, 65535] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s4 -> s5 [0, 65535] { R11726 += 1, R11680 += 1 };
  s4 -> s4 [0, 65535] { R11726 += 1, R11680 += 1, R11648 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11726 += 1 };
  s5 -> s5 [0, 65535] { R11726 += 1, R11680 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R11726 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11726 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R11727 += 1, R11728 += 1 };
  s0 -> s1 [0, 65535] { R11728 += 1, R11681 += 1, R11682 += 1 };
  s0 -> s2 [0, 65535] { R11728 += 1, R11682 += 1, R11649 += 1, R11650 += 1 };
  s0 -> s3 [0, 65535] { R11728 += 1, R11682 += 1, R11650 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R11728 += 1, R11681 += 1, R11682 += 1 };
  s1 -> s2 [0, 65535] { R11728 += 1, R11682 += 1, R11649 += 1, R11650 += 1 };
  s1 -> s3 [0, 65535] { R11728 += 1, R11682 += 1, R11650 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11728 += 1, R11682 += 1, R11649 += 1, R11650 += 1 };
  s2 -> s3 [0, 65535] { R11728 += 1, R11682 += 1, R11650 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R11728 += 1 };
  s3 -> s4 [0, 65535] { R11728 += 1 };
  s3 -> s3 [0, 65535] { R11728 += 1, R11682 += 1, R11650 += 1, R1 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11728 += 1, R11682 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11728 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11728 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11728 += 1, R11682 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s0 -> s2 [0, 65535] { R11730 += 1, R11683 += 1, R11684 += 1 };
  s0 -> s3 [0, 65535] { R11730 += 1, R11684 += 1, R11651 += 1, R11652 += 1 };
  s0 -> s4 [0, 65535] { R11730 += 1, R11684 += 1, R11652 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R11729 += 1, R11730 += 1 };
  s0 -> s5 [87, 87] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s0 -> s1 [88, 65535] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s1 -> s1 [0, 86] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s1 -> s7 [0, 65535] { R11730 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R11730 += 1, R11684 += 1 };
  s1 -> s5 [87, 87] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s1 -> s1 [88, 65535] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s2 -> s1 [0, 86] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s2 -> s2 [0, 65535] { R11730 += 1, R11683 += 1, R11684 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R11730 += 1, R11684 += 1, R11651 += 1, R11652 += 1 };
  s2 -> s4 [0, 65535] { R11730 += 1, R11684 += 1, R11652 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s2 -> s1 [88, 65535] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s3 -> s1 [0, 86] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s3 -> s7 [0, 65535] { R11730 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R11730 += 1, R11684 += 1, R11651 += 1, R11652 += 1 };
  s3 -> s4 [0, 65535] { R11730 += 1, R11684 += 1, R11652 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s3 -> s1 [88, 65535] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s4 -> s1 [0, 86] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s4 -> s6 [0, 65535] { R11730 += 1, R11684 += 1 };
  s4 -> s7 [0, 65535] { R11730 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R11730 += 1, R11684 += 1, R11652 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s4 -> s1 [88, 65535] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s5 -> s5 [0, 65535] { R11730 += 1, R11684 += 1, R11652 += 1 };
  s6 -> s6 [0, 65535] { R11730 += 1, R11684 += 1 };
  s6 -> s7 [0, 65535] { R11730 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R11730 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s0 -> s2 [0, 65535] { R11732 += 1, R11686 += 1, R11654 += 1, R11635 += 1, R11636 += 1 };
  s0 -> s3 [0, 65535] { R11732 += 1, R11685 += 1, R11686 += 1 };
  s0 -> s0 [0, 65535] { R11731 += 1, R11732 += 1 };
  s0 -> s4 [0, 65535] { R11732 += 1, R11686 += 1, R11653 += 1, R11654 += 1 };
  s0 -> s1 [88, 65535] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s1 -> s1 [0, 86] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s1 -> s1 [0, 65535] { R11732 += 1, R11686 += 1, R11654 += 1 };
  s1 -> s5 [0, 65535] { R11732 += 1 };
  s1 -> s7 [0, 65535] { R11732 += 1, R11686 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [88, 65535] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s2 -> s1 [0, 86] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s2 -> s2 [0, 65535] { R11732 += 1, R11686 += 1, R11654 += 1, R11635 += 1, R11636 += 1 };
  s2 -> s5 [0, 65535] { R11732 += 1 };
  s2 -> s7 [0, 65535] { R11732 += 1, R11686 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [88, 65535] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s3 -> s1 [0, 86] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s3 -> s2 [0, 65535] { R11732 += 1, R11686 += 1, R11654 += 1, R11635 += 1, R11636 += 1 };
  s3 -> s3 [0, 65535] { R11732 += 1, R11685 += 1, R11686 += 1 };
  s3 -> s4 [0, 65535] { R11732 += 1, R11686 += 1, R11653 += 1, R11654 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [88, 65535] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s4 -> s1 [0, 86] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s4 -> s2 [0, 65535] { R11732 += 1, R11686 += 1, R11654 += 1, R11635 += 1, R11636 += 1 };
  s4 -> s5 [0, 65535] { R11732 += 1 };
  s4 -> s4 [0, 65535] { R11732 += 1, R11686 += 1, R11653 += 1, R11654 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [88, 65535] { R11732 += 1, R11686 += 1, R11654 += 1, R11636 += 1 };
  s5 -> s5 [0, 65535] { R11732 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R11732 += 1 };
  s7 -> s7 [0, 65535] { R11732 += 1, R11686 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1, R11638 += 1, R5988 += 1 };
  s0 -> s2 [0, 65535] { R11734 += 1, R11688 += 1, R11655 += 1, R11656 += 1 };
  s0 -> s3 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1, R11637 += 1, R11638 += 1 };
  s0 -> s4 [0, 65535] { R11734 += 1, R11687 += 1, R11688 += 1 };
  s0 -> s0 [0, 65535] { R11733 += 1, R11734 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11734 += 1, R11688 += 1 };
  s1 -> s1 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1, R11638 += 1, R5988 += 1 };
  s1 -> s8 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1 };
  s1 -> s7 [0, 65535] { R11734 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1, R11638 += 1, R5988 += 1 };
  s2 -> s7 [0, 65535] { R11734 += 1 };
  s2 -> s2 [0, 65535] { R11734 += 1, R11688 += 1, R11655 += 1, R11656 += 1 };
  s2 -> s3 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1, R11637 += 1, R11638 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11734 += 1, R11688 += 1 };
  s3 -> s1 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1, R11638 += 1, R5988 += 1 };
  s3 -> s7 [0, 65535] { R11734 += 1 };
  s3 -> s3 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1, R11637 += 1, R11638 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1, R11638 += 1, R5988 += 1 };
  s4 -> s2 [0, 65535] { R11734 += 1, R11688 += 1, R11655 += 1, R11656 += 1 };
  s4 -> s3 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1, R11637 += 1, R11638 += 1 };
  s4 -> s4 [0, 65535] { R11734 += 1, R11687 += 1, R11688 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11734 += 1, R11688 += 1 };
  s6 -> s7 [0, 65535] { R11734 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11734 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R11734 += 1, R11688 += 1 };
  s8 -> s8 [0, 65535] { R11734 += 1, R11688 += 1, R11656 += 1 };
  s8 -> s7 [0, 65535] { R11734 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R11735 += 1, R11736 += 1 };
  s0 -> s1 [0, 65535] { R11736 += 1, R11690 += 1, R11658 += 1 };
  s0 -> s2 [0, 65535] { R11736 += 1, R11690 += 1, R11657 += 1, R11658 += 1 };
  s0 -> s3 [0, 65535] { R11736 += 1, R11689 += 1, R11690 += 1 };
  s1 -> s5 [0, 65535] { R11736 += 1 };
  s1 -> s6 [0, 65535] { R11736 += 1, R11690 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11736 += 1, R11690 += 1, R11658 += 1 };
  s2 -> s5 [0, 65535] { R11736 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R11736 += 1, R11690 += 1, R11658 += 1 };
  s2 -> s2 [0, 65535] { R11736 += 1, R11690 += 1, R11657 += 1, R11658 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11736 += 1, R11690 += 1, R11658 += 1 };
  s3 -> s2 [0, 65535] { R11736 += 1, R11690 += 1, R11657 += 1, R11658 += 1 };
  s3 -> s3 [0, 65535] { R11736 += 1, R11689 += 1, R11690 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11736 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11736 += 1 };
  s6 -> s6 [0, 65535] { R11736 += 1, R11690 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1, R11643 += 1, R11644 += 1 };
  s0 -> s0 [0, 65535] { R11737 += 1, R11738 += 1 };
  s0 -> s2 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1, R11644 += 1, R5989 += 1 };
  s0 -> s3 [0, 65535] { R11738 += 1, R11691 += 1, R11692 += 1 };
  s0 -> s4 [0, 65535] { R11738 += 1, R11692 += 1, R11659 += 1, R11660 += 1 };
  s1 -> s1 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1, R11643 += 1, R11644 += 1 };
  s1 -> s5 [0, 65535] { R11738 += 1 };
  s1 -> s7 [0, 65535] { R11738 += 1, R11692 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1, R11644 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535] { R11738 += 1 };
  s2 -> s7 [0, 65535] { R11738 += 1, R11692 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1 };
  s2 -> s2 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1, R11644 += 1, R5989 += 1 };
  s3 -> s1 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1, R11643 += 1, R11644 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1, R11644 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R11738 += 1, R11691 += 1, R11692 += 1 };
  s3 -> s4 [0, 65535] { R11738 += 1, R11692 += 1, R11659 += 1, R11660 += 1 };
  s4 -> s1 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1, R11643 += 1, R11644 += 1 };
  s4 -> s5 [0, 65535] { R11738 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1, R11644 += 1, R5989 += 1 };
  s4 -> s4 [0, 65535] { R11738 += 1, R11692 += 1, R11659 += 1, R11660 += 1 };
  s5 -> s5 [0, 65535] { R11738 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R11738 += 1 };
  s7 -> s7 [0, 65535] { R11738 += 1, R11692 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s5 [0, 65535] { R11738 += 1 };
  s8 -> s7 [0, 65535] { R11738 += 1, R11692 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11738 += 1, R11692 += 1, R11660 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R11740 += 1, R11694 += 1, R11661 += 1, R11662 += 1 };
  s0 -> s0 [0, 65535] { R11739 += 1, R11740 += 1 };
  s0 -> s2 [0, 65535] { R11740 += 1, R11693 += 1, R11694 += 1 };
  s0 -> s3 [0, 65535] { R11740 += 1, R11694 += 1, R11662 += 1, R11645 += 1, R11646 += 1 };
  s0 -> s4 [116, 116] { R11740 += 1, R11694 += 1, R11662 += 1, R11646 += 1 };
  s1 -> s1 [0, 65535] { R11740 += 1, R11694 += 1, R11661 += 1, R11662 += 1 };
  s1 -> s3 [0, 65535] { R11740 += 1, R11694 += 1, R11662 += 1, R11645 += 1, R11646 += 1 };
  s1 -> s4 [116, 116] { R11740 += 1, R11694 += 1, R11662 += 1, R11646 += 1 };
  s2 -> s1 [0, 65535] { R11740 += 1, R11694 += 1, R11661 += 1, R11662 += 1 };
  s2 -> s2 [0, 65535] { R11740 += 1, R11693 += 1, R11694 += 1 };
  s2 -> s3 [0, 65535] { R11740 += 1, R11694 += 1, R11662 += 1, R11645 += 1, R11646 += 1 };
  s2 -> s4 [116, 116] { R11740 += 1, R11694 += 1, R11662 += 1, R11646 += 1 };
  s3 -> s3 [0, 65535] { R11740 += 1, R11694 += 1, R11662 += 1, R11645 += 1, R11646 += 1 };
  s3 -> s4 [116, 116] { R11740 += 1, R11694 += 1, R11662 += 1, R11646 += 1 };
  s4 -> s4 [0, 65535] { R11740 += 1, R11694 += 1, R11662 += 1 };
  s4 -> s5 [0, 65535] { R11740 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11740 += 1, R11694 += 1 };
  s5 -> s5 [0, 65535] { R11740 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R11740 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11740 += 1, R11694 += 1 };
  accepting s4, s5, s6, s7;
};
};
constraint R1 = 0 && R2 = R11662 && R3 = R11634 && R4 = R11740 && R15 = 0 && R16 = R11694 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R11627 - R11694 = 1 && R11628 = R11634 && R11629 - R11694 = 1 && R11630 = R11634 && R11631 - R11694 = 1 && R11632 = R11634 && R11633 - R11694 = 1 && R11641 = 0 && R11642 = 0 && R11645 = 0 && R11646 = 0 && R11647 = 0 && R11648 = R11662 && R11649 = 0 && R11650 = R11662 && R11651 = 0 && R11652 = R11662 && R11653 = 0 && R11654 = R11662 && R11655 = 0 && R11656 = R11662 && R11657 = 0 && R11658 = R11662 && R11659 = 0 && R11660 = R11662 && R11661 = 0 && R11663 = 0 && R11664 = R11694 && R11665 = 0 && R11666 = R11694 && R11667 = 0 && R11668 = R11694 && R11669 = 0 && R11670 = R11694 && R11671 = 0 && R11672 = R11694 && R11673 = 0 && R11674 = R11694 && R11675 = 0 && R11676 = R11694 && R11677 = 0 && R11678 = R11694 && R11679 = 0 && R11680 = R11694 && R11681 = 0 && R11682 = R11694 && R11683 = 0 && R11684 = R11694 && R11685 = 0 && R11686 = R11694 && R11687 = 0 && R11688 = R11694 && R11689 = 0 && R11690 = R11694 && R11691 = 0 && R11692 = R11694 && R11693 = 0 && R11695 = 10 && R11696 = R11740 && R11697 = 10 && R11698 = R11740 && R11699 = 10 && R11700 = R11740 && R11701 = 10 && R11702 = R11740 && R11703 = 10 && R11704 = R11740 && R11705 = 10 && R11706 = R11740 && R11707 = 10 && R11708 = R11740 && R11709 = 10 && R11710 = R11740 && R11711 = 10 && R11712 = R11740 && R11713 = 10 && R11714 = R11740 && R11715 = 10 && R11716 = R11740 && R11717 = 10 && R11718 = R11740 && R11719 = 10 && R11720 = R11740 && R11721 = 10 && R11722 = R11740 && R11723 = 10 && R11724 = R11740 && R11725 = 10 && R11726 = R11740 && R11727 = 10 && R11728 = R11740 && R11729 = 10 && R11730 = R11740 && R11731 = 10 && R11732 = R11740 && R11733 = 10 && R11734 = R11740 && R11735 = 10 && R11736 = R11740 && R11737 = 10 && R11738 = R11740 && R11739 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R11694 < R11634 && 0 < R11662 && -1 < R11694 && 9 < R11740 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R5988 = 0 || (R11635 = 0 && R11636 = 0)) && (R5988 = 0 || (R11637 = 0 && R11638 = 0)) && (R5989 = 0 || (R11643 = 0 && R11644 = 0)) && (R5990 = 0 || (R11639 = 0 && R11640 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
