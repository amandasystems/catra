// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6429, R6430, R6431, R6432, R6433, R6434, R6435, R6436, R6437, R6438, R6439, R6440, R6441, R6442, R6443, R6444, R6445, R6446, R6447, R6448, R6449, R6450, R6451, R6452, R6453, R6454, R6455, R6456, R6457, R6458, R6459, R6460, R6461, R6462, R6463, R6464, R6465, R6466, R6467, R6468, R6469, R6470, R6471, R6472, R6473, R6474, R6475, R6476, R6477, R6478, R6479, R6480, R6481, R6482, R6483, R6484, R6485, R6486, R6487, R6488, R6489, R6490, R6491, R6492, R6493, R6494, R6495, R6496, R6497, R6498, R6499, R6500, R6501, R6502, R6503, R6504, R6505, R6506, R6507, R6508, R6509, R6510, R6511, R6512, R6513, R6514, R6515, R6516, R6517, R6518, R6519, R6520, R6521, R6522, R6523, R6524, R6525, R6526, R6527, R6528, R6529, R6530, R6531, R6532, R6533, R6534, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R6490 += 1 };
  s0 -> s0 [0, 65535] { R6489 += 1, R6490 += 1 };
  s0 -> s2 [46, 46] { R6490 += 1 };
  s0 -> s3 [47, 47] { R6490 += 1 };
  s0 -> s1 [48, 65535] { R6490 += 1 };
  s1 -> s1 [0, 45] { R6490 += 1 };
  s1 -> s2 [46, 46] { R6490 += 1 };
  s1 -> s3 [47, 47] { R6490 += 1 };
  s1 -> s1 [48, 65535] { R6490 += 1 };
  s2 -> s1 [0, 45] { R6490 += 1 };
  s2 -> s2 [46, 46] { R6490 += 1 };
  s2 -> s3 [47, 47] { R6490 += 1 };
  s2 -> s1 [48, 114] { R6490 += 1 };
  s2 -> s8 [115, 115] { R6490 += 1 };
  s2 -> s1 [116, 65535] { R6490 += 1 };
  s3 -> s3 [0, 45] { R6490 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R6490 += 1 };
  s3 -> s3 [47, 65535] { R6490 += 1 };
  s4 -> s3 [0, 45] { R6490 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R6490 += 1 };
  s4 -> s3 [47, 114] { R6490 += 1 };
  s4 -> s5 [115, 115] { R6490 += 1 };
  s4 -> s3 [116, 65535] { R6490 += 1 };
  s5 -> s3 [0, 45] { R6490 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R6490 += 1 };
  s5 -> s3 [47, 110] { R6490 += 1 };
  s5 -> s6 [111, 111] { R6490 += 1 };
  s5 -> s3 [112, 65535] { R6490 += 1 };
  s6 -> s3 [0, 45] { R6490 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R6490 += 1 };
  s6 -> s3 [47, 98] { R6490 += 1 };
  s6 -> s7 [99, 99] { R6490 += 1 };
  s6 -> s3 [100, 65535] { R6490 += 1 };
  s7 -> s3 [0, 45] { R6490 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R6490 += 1 };
  s7 -> s3 [47, 106] { R6490 += 1 };
  s7 -> s3 [108, 65535] { R6490 += 1 };
  s8 -> s1 [0, 45] { R6490 += 1 };
  s8 -> s2 [46, 46] { R6490 += 1 };
  s8 -> s3 [47, 47] { R6490 += 1 };
  s8 -> s1 [48, 110] { R6490 += 1 };
  s8 -> s9 [111, 111] { R6490 += 1 };
  s8 -> s1 [112, 65535] { R6490 += 1 };
  s9 -> s1 [0, 45] { R6490 += 1 };
  s9 -> s2 [46, 46] { R6490 += 1 };
  s9 -> s3 [47, 47] { R6490 += 1 };
  s9 -> s1 [48, 98] { R6490 += 1 };
  s9 -> s10 [99, 99] { R6490 += 1 };
  s9 -> s1 [100, 65535] { R6490 += 1 };
  s10 -> s1 [0, 45] { R6490 += 1 };
  s10 -> s2 [46, 46] { R6490 += 1 };
  s10 -> s3 [47, 47] { R6490 += 1 };
  s10 -> s1 [48, 106] { R6490 += 1 };
  s10 -> s1 [108, 65535] { R6490 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R6492 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R6491 += 1, R6492 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6492 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R6494 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R6493 += 1, R6494 += 1 };
  s0 -> s2 [0, 65535] { R6494 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R6494 += 1 };
  s0 -> s1 [48, 65535] { R6494 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R6494 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R6494 += 1 };
  s1 -> s1 [48, 65535] { R6494 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R6494 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R6494 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R6494 += 1 };
  s2 -> s1 [48, 65535] { R6494 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6494 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R6496 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R6495 += 1, R6496 += 1 };
  s0 -> s2 [0, 65535] { R6496 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s1 [38, 42] { R6496 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R6496 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R6496 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R6496 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R6496 += 1, R6000 += 1 };
  s1 -> s1 [0, 65535] { R6496 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R6496 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R6496 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R6496 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R6496 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R6496 += 1, R6000 += 1 };
  s2 -> s2 [0, 65535] { R6496 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R6496 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R6496 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R6496 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R6496 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R6498 += 1, R6002 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R6497 += 1, R6498 += 1 };
  s0 -> s2 [0, 65535] { R6498 += 1, R6001 += 1, R6002 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6498 += 1, R6002 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R6498 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6498 += 1, R6002 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R6498 += 1, R6001 += 1, R6002 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6498 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R6500 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R6500 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s0 [0, 65535] { R6499 += 1, R6500 += 1 };
  s0 -> s4 [63, 63] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R6500 += 1, R6004 += 1 };
  s1 -> s6 [0, 65535] { R6500 += 1 };
  s1 -> s1 [0, 65535] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R6500 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R6500 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R6500 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R6500 += 1, R6003 += 1, R6004 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R6500 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6500 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6500 += 1, R6004 += 1 };
  s7 -> s6 [0, 65535] { R6500 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6502 += 1, R6005 += 1, R6006 += 1 };
  s0 -> s2 [0, 65535] { R6502 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R6502 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R6501 += 1, R6502 += 1 };
  s1 -> s1 [0, 65535] { R6502 += 1, R6005 += 1, R6006 += 1 };
  s1 -> s2 [0, 65535] { R6502 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s3 [0, 65535] { R6502 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6502 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s3 [0, 65535] { R6502 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6502 += 1 };
  s3 -> s3 [0, 65535] { R6502 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R6502 += 1, R6006 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6502 += 1 };
  s4 -> s4 [0, 65535] { R6502 += 1, R6006 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6502 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6502 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R6504 += 1, R6458 += 1 };
  s0 -> s2 [0, 65535] { R6504 += 1, R6457 += 1, R6458 += 1 };
  s0 -> s0 [0, 65535] { R6503 += 1, R6504 += 1 };
  s0 -> s1 [45, 63] { R6504 += 1, R6458 += 1 };
  s0 -> s3 [87, 87] { R6504 += 1, R6458 += 1 };
  s0 -> s1 [88, 65535] { R6504 += 1, R6458 += 1 };
  s1 -> s1 [0, 43] { R6504 += 1, R6458 += 1 };
  s1 -> s1 [45, 63] { R6504 += 1, R6458 += 1 };
  s1 -> s3 [87, 87] { R6504 += 1, R6458 += 1 };
  s1 -> s1 [88, 65535] { R6504 += 1, R6458 += 1 };
  s2 -> s1 [0, 43] { R6504 += 1, R6458 += 1 };
  s2 -> s2 [0, 65535] { R6504 += 1, R6457 += 1, R6458 += 1 };
  s2 -> s1 [45, 63] { R6504 += 1, R6458 += 1 };
  s2 -> s3 [87, 87] { R6504 += 1, R6458 += 1 };
  s2 -> s1 [88, 65535] { R6504 += 1, R6458 += 1 };
  s3 -> s3 [0, 43] { R6504 += 1, R6458 += 1 };
  s3 -> s3 [0, 65535] { R6504 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R6504 += 1, R6458 += 1 };
  s3 -> s3 [87, 65535] { R6504 += 1, R6458 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R6506 += 1, R6459 += 1, R6460 += 1 };
  s0 -> s0 [0, 65535] { R6505 += 1, R6506 += 1 };
  s0 -> s2 [0, 65535] { R6506 += 1, R6460 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R6506 += 1, R6459 += 1, R6460 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R6506 += 1, R6460 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6506 += 1 };
  s2 -> s2 [0, 65535] { R6506 += 1, R6460 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6506 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R6508 += 1, R6462 += 1 };
  s0 -> s2 [0, 65535] { R6508 += 1, R6461 += 1, R6462 += 1 };
  s0 -> s3 [0, 65535] { R6508 += 1, R6462 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R6507 += 1, R6508 += 1 };
  s0 -> s4 [58, 58] { R6508 += 1, R6462 += 1 };
  s0 -> s1 [59, 65535] { R6508 += 1, R6462 += 1 };
  s1 -> s1 [0, 57] { R6508 += 1, R6462 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6508 += 1 };
  s1 -> s4 [58, 58] { R6508 += 1, R6462 += 1 };
  s1 -> s1 [59, 65535] { R6508 += 1, R6462 += 1 };
  s2 -> s1 [0, 57] { R6508 += 1, R6462 += 1 };
  s2 -> s2 [0, 65535] { R6508 += 1, R6461 += 1, R6462 += 1 };
  s2 -> s3 [0, 65535] { R6508 += 1, R6462 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R6508 += 1, R6462 += 1 };
  s2 -> s1 [59, 65535] { R6508 += 1, R6462 += 1 };
  s3 -> s1 [0, 57] { R6508 += 1, R6462 += 1 };
  s3 -> s3 [0, 65535] { R6508 += 1, R6462 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6508 += 1 };
  s3 -> s4 [58, 58] { R6508 += 1, R6462 += 1 };
  s3 -> s1 [59, 65535] { R6508 += 1, R6462 += 1 };
  s4 -> s4 [0, 65535] { R6508 += 1, R6462 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6508 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R6510 += 1, R6464 += 1 };
  s0 -> s2 [0, 65535] { R6510 += 1, R6463 += 1, R6464 += 1 };
  s0 -> s3 [0, 65535] { R6510 += 1, R6464 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R6509 += 1, R6510 += 1 };
  s0 -> s4 [87, 87] { R6510 += 1, R6464 += 1 };
  s0 -> s1 [88, 65535] { R6510 += 1, R6464 += 1 };
  s1 -> s1 [0, 86] { R6510 += 1, R6464 += 1 };
  s1 -> s1 [0, 65535] { R6510 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R6510 += 1, R6464 += 1 };
  s1 -> s1 [88, 65535] { R6510 += 1, R6464 += 1 };
  s2 -> s1 [0, 86] { R6510 += 1, R6464 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6510 += 1, R6463 += 1, R6464 += 1 };
  s2 -> s3 [0, 65535] { R6510 += 1, R6464 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R6510 += 1, R6464 += 1 };
  s2 -> s1 [88, 65535] { R6510 += 1, R6464 += 1 };
  s3 -> s1 [0, 86] { R6510 += 1, R6464 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6510 += 1 };
  s3 -> s3 [0, 65535] { R6510 += 1, R6464 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R6510 += 1, R6464 += 1 };
  s3 -> s1 [88, 65535] { R6510 += 1, R6464 += 1 };
  s4 -> s4 [0, 65535] { R6510 += 1, R6464 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6510 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R6512 += 1, R6466 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s3 [0, 65535] { R6512 += 1, R6465 += 1, R6466 += 1 };
  s0 -> s0 [0, 65535] { R6511 += 1, R6512 += 1 };
  s0 -> s4 [91, 91] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R6512 += 1, R6466 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6512 += 1 };
  s2 -> s1 [0, 90] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R6512 += 1, R6466 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6512 += 1 };
  s2 -> s4 [91, 91] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s3 -> s2 [0, 65535] { R6512 += 1, R6466 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R6512 += 1, R6465 += 1, R6466 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R6512 += 1, R6466 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6512 += 1 };
  s7 -> s7 [0, 65535] { R6512 += 1, R6466 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6512 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R6514 += 1, R6467 += 1, R6468 += 1 };
  s0 -> s0 [0, 65535] { R6513 += 1, R6514 += 1 };
  s0 -> s2 [0, 65535] { R6514 += 1, R6468 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R6514 += 1, R6468 += 1, R5998 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6514 += 1, R6467 += 1, R6468 += 1 };
  s1 -> s2 [0, 65535] { R6514 += 1, R6468 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s3 [0, 65535] { R6514 += 1, R6468 += 1, R5998 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6514 += 1, R6468 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s6 [0, 65535] { R6514 += 1 };
  s2 -> s3 [0, 65535] { R6514 += 1, R6468 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6514 += 1, R6468 += 1 };
  s3 -> s6 [0, 65535] { R6514 += 1 };
  s3 -> s3 [0, 65535] { R6514 += 1, R6468 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6514 += 1, R6468 += 1 };
  s5 -> s6 [0, 65535] { R6514 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6514 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R6516 += 1, R6469 += 1, R6470 += 1 };
  s0 -> s2 [0, 65535] { R6516 += 1, R6470 += 1, R6435 += 1, R6436 += 1 };
  s0 -> s0 [0, 65535] { R6515 += 1, R6516 += 1 };
  s0 -> s3 [0, 65535] { R6516 += 1, R6470 += 1, R6436 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6516 += 1, R6469 += 1, R6470 += 1 };
  s1 -> s2 [0, 65535] { R6516 += 1, R6470 += 1, R6435 += 1, R6436 += 1 };
  s1 -> s3 [0, 65535] { R6516 += 1, R6470 += 1, R6436 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6516 += 1, R6470 += 1, R6435 += 1, R6436 += 1 };
  s2 -> s3 [0, 65535] { R6516 += 1, R6470 += 1, R6436 += 1, R5990 += 1 };
  s2 -> s6 [0, 65535] { R6516 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6516 += 1, R6470 += 1, R6436 += 1, R5990 += 1 };
  s3 -> s5 [0, 65535] { R6516 += 1, R6470 += 1 };
  s3 -> s6 [0, 65535] { R6516 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6516 += 1, R6470 += 1 };
  s5 -> s6 [0, 65535] { R6516 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6516 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R6518 += 1, R6471 += 1, R6472 += 1 };
  s0 -> s2 [0, 65535] { R6518 += 1, R6472 += 1 };
  s0 -> s0 [0, 65535] { R6517 += 1, R6518 += 1 };
  s1 -> s1 [0, 65535] { R6518 += 1, R6471 += 1, R6472 += 1 };
  s1 -> s2 [0, 65535] { R6518 += 1, R6472 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6518 += 1, R6472 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6518 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6518 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s0 -> s2 [0, 65535] { R6520 += 1, R6473 += 1, R6474 += 1 };
  s0 -> s0 [0, 65535] { R6519 += 1, R6520 += 1 };
  s0 -> s3 [0, 65535] { R6520 += 1, R6474 += 1, R6441 += 1, R6442 += 1 };
  s0 -> s4 [87, 87] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s0 -> s1 [88, 65535] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s1 -> s1 [0, 86] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s1 -> s4 [87, 87] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s1 -> s1 [88, 65535] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s2 -> s1 [0, 86] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s2 -> s2 [0, 65535] { R6520 += 1, R6473 += 1, R6474 += 1 };
  s2 -> s3 [0, 65535] { R6520 += 1, R6474 += 1, R6441 += 1, R6442 += 1 };
  s2 -> s4 [87, 87] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s2 -> s1 [88, 65535] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s3 -> s1 [0, 86] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s3 -> s3 [0, 65535] { R6520 += 1, R6474 += 1, R6441 += 1, R6442 += 1 };
  s3 -> s4 [87, 87] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s3 -> s1 [88, 65535] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s4 -> s5 [0, 65535] { R6520 += 1 };
  s4 -> s6 [0, 65535] { R6520 += 1, R6474 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R6520 += 1, R6474 += 1, R6442 += 1 };
  s5 -> s5 [0, 65535] { R6520 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R6520 += 1 };
  s6 -> s6 [0, 65535] { R6520 += 1, R6474 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6521 += 1, R6522 += 1 };
  s0 -> s1 [0, 65535] { R6522 += 1, R6475 += 1, R6476 += 1 };
  s0 -> s2 [0, 65535] { R6522 += 1, R6476 += 1, R6443 += 1, R6444 += 1 };
  s0 -> s3 [0, 65535] { R6522 += 1, R6476 += 1, R6444 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R6522 += 1, R6475 += 1, R6476 += 1 };
  s1 -> s2 [0, 65535] { R6522 += 1, R6476 += 1, R6443 += 1, R6444 += 1 };
  s1 -> s3 [0, 65535] { R6522 += 1, R6476 += 1, R6444 += 1, R1 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s5 [0, 65535] { R6522 += 1 };
  s2 -> s2 [0, 65535] { R6522 += 1, R6476 += 1, R6443 += 1, R6444 += 1 };
  s2 -> s3 [0, 65535] { R6522 += 1, R6476 += 1, R6444 += 1, R1 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R6522 += 1, R6476 += 1 };
  s3 -> s5 [0, 65535] { R6522 += 1 };
  s3 -> s3 [0, 65535] { R6522 += 1, R6476 += 1, R6444 += 1, R1 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6522 += 1, R6476 += 1 };
  s4 -> s5 [0, 65535] { R6522 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6522 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s0 -> s2 [0, 65535] { R6524 += 1, R6478 += 1, R6445 += 1, R6446 += 1 };
  s0 -> s3 [0, 65535] { R6524 += 1, R6478 += 1, R6446 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R6524 += 1, R6477 += 1, R6478 += 1 };
  s0 -> s0 [0, 65535] { R6523 += 1, R6524 += 1 };
  s0 -> s5 [87, 87] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s0 -> s1 [88, 65535] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s1 -> s1 [0, 86] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s1 -> s1 [0, 65535] { R6524 += 1, R6478 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R6524 += 1 };
  s1 -> s5 [87, 87] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s1 -> s1 [88, 65535] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s2 -> s1 [0, 86] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s2 -> s2 [0, 65535] { R6524 += 1, R6478 += 1, R6445 += 1, R6446 += 1 };
  s2 -> s3 [0, 65535] { R6524 += 1, R6478 += 1, R6446 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R6524 += 1 };
  s2 -> s5 [87, 87] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s2 -> s1 [88, 65535] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s3 -> s1 [0, 86] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s3 -> s3 [0, 65535] { R6524 += 1, R6478 += 1, R6446 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R6524 += 1, R6478 += 1 };
  s3 -> s8 [0, 65535] { R6524 += 1 };
  s3 -> s5 [87, 87] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s3 -> s1 [88, 65535] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s4 -> s1 [0, 86] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s4 -> s2 [0, 65535] { R6524 += 1, R6478 += 1, R6445 += 1, R6446 += 1 };
  s4 -> s3 [0, 65535] { R6524 += 1, R6478 += 1, R6446 += 1, R7 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6524 += 1, R6477 += 1, R6478 += 1 };
  s4 -> s5 [87, 87] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s4 -> s1 [88, 65535] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s5 -> s5 [0, 65535] { R6524 += 1, R6478 += 1, R6446 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6524 += 1, R6478 += 1 };
  s7 -> s8 [0, 65535] { R6524 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6524 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s0 -> s2 [0, 65535] { R6526 += 1, R6480 += 1, R6447 += 1, R6448 += 1 };
  s0 -> s0 [0, 65535] { R6525 += 1, R6526 += 1 };
  s0 -> s3 [0, 65535] { R6526 += 1, R6480 += 1, R6448 += 1, R6429 += 1, R6430 += 1 };
  s0 -> s4 [0, 65535] { R6526 += 1, R6479 += 1, R6480 += 1 };
  s0 -> s1 [88, 65535] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s1 -> s1 [0, 86] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s1 -> s6 [0, 65535] { R6526 += 1, R6480 += 1 };
  s1 -> s1 [0, 65535] { R6526 += 1, R6480 += 1, R6448 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R6526 += 1 };
  s1 -> s1 [88, 65535] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s2 -> s1 [0, 86] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s2 -> s2 [0, 65535] { R6526 += 1, R6480 += 1, R6447 += 1, R6448 += 1 };
  s2 -> s3 [0, 65535] { R6526 += 1, R6480 += 1, R6448 += 1, R6429 += 1, R6430 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R6526 += 1 };
  s2 -> s1 [88, 65535] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s3 -> s1 [0, 86] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s3 -> s6 [0, 65535] { R6526 += 1, R6480 += 1 };
  s3 -> s3 [0, 65535] { R6526 += 1, R6480 += 1, R6448 += 1, R6429 += 1, R6430 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R6526 += 1 };
  s3 -> s1 [88, 65535] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s4 -> s1 [0, 86] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s4 -> s2 [0, 65535] { R6526 += 1, R6480 += 1, R6447 += 1, R6448 += 1 };
  s4 -> s3 [0, 65535] { R6526 += 1, R6480 += 1, R6448 += 1, R6429 += 1, R6430 += 1 };
  s4 -> s4 [0, 65535] { R6526 += 1, R6479 += 1, R6480 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [88, 65535] { R6526 += 1, R6480 += 1, R6448 += 1, R6430 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6526 += 1, R6480 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s7 [0, 65535] { R6526 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6526 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1, R6432 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R6527 += 1, R6528 += 1 };
  s0 -> s2 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1, R6431 += 1, R6432 += 1 };
  s0 -> s3 [0, 65535] { R6528 += 1, R6482 += 1, R6449 += 1, R6450 += 1 };
  s0 -> s4 [0, 65535] { R6528 += 1, R6481 += 1, R6482 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1 };
  s1 -> s7 [0, 65535] { R6528 += 1, R6482 += 1 };
  s1 -> s1 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1, R6432 += 1, R5988 += 1 };
  s1 -> s6 [0, 65535] { R6528 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R6528 += 1, R6482 += 1 };
  s2 -> s1 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1, R6432 += 1, R5988 += 1 };
  s2 -> s6 [0, 65535] { R6528 += 1 };
  s2 -> s2 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1, R6431 += 1, R6432 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1, R6432 += 1, R5988 += 1 };
  s3 -> s6 [0, 65535] { R6528 += 1 };
  s3 -> s2 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1, R6431 += 1, R6432 += 1 };
  s3 -> s3 [0, 65535] { R6528 += 1, R6482 += 1, R6449 += 1, R6450 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1, R6432 += 1, R5988 += 1 };
  s4 -> s2 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1, R6431 += 1, R6432 += 1 };
  s4 -> s3 [0, 65535] { R6528 += 1, R6482 += 1, R6449 += 1, R6450 += 1 };
  s4 -> s4 [0, 65535] { R6528 += 1, R6481 += 1, R6482 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6528 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6528 += 1, R6482 += 1 };
  s7 -> s6 [0, 65535] { R6528 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R6528 += 1, R6482 += 1, R6450 += 1 };
  s8 -> s7 [0, 65535] { R6528 += 1, R6482 += 1 };
  s8 -> s6 [0, 65535] { R6528 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R6530 += 1, R6484 += 1, R6451 += 1, R6452 += 1 };
  s0 -> s2 [0, 65535] { R6530 += 1, R6483 += 1, R6484 += 1 };
  s0 -> s0 [0, 65535] { R6529 += 1, R6530 += 1 };
  s0 -> s3 [0, 65535] { R6530 += 1, R6484 += 1, R6452 += 1, R6433 += 1, R6434 += 1 };
  s0 -> s4 [104, 104] { R6530 += 1, R6484 += 1, R6452 += 1, R6434 += 1 };
  s1 -> s1 [0, 65535] { R6530 += 1, R6484 += 1, R6451 += 1, R6452 += 1 };
  s1 -> s3 [0, 65535] { R6530 += 1, R6484 += 1, R6452 += 1, R6433 += 1, R6434 += 1 };
  s1 -> s4 [104, 104] { R6530 += 1, R6484 += 1, R6452 += 1, R6434 += 1 };
  s2 -> s1 [0, 65535] { R6530 += 1, R6484 += 1, R6451 += 1, R6452 += 1 };
  s2 -> s2 [0, 65535] { R6530 += 1, R6483 += 1, R6484 += 1 };
  s2 -> s3 [0, 65535] { R6530 += 1, R6484 += 1, R6452 += 1, R6433 += 1, R6434 += 1 };
  s2 -> s4 [104, 104] { R6530 += 1, R6484 += 1, R6452 += 1, R6434 += 1 };
  s3 -> s3 [0, 65535] { R6530 += 1, R6484 += 1, R6452 += 1, R6433 += 1, R6434 += 1 };
  s3 -> s4 [104, 104] { R6530 += 1, R6484 += 1, R6452 += 1, R6434 += 1 };
  s4 -> s5 [111, 111] { R6530 += 1, R6484 += 1, R6452 += 1, R6434 += 1 };
  s5 -> s6 [115, 115] { R6530 += 1, R6484 += 1, R6452 += 1, R6434 += 1 };
  s6 -> s7 [116, 116] { R6530 += 1, R6484 += 1, R6452 += 1, R6434 += 1 };
  s7 -> s8 [0, 65535] { R6530 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R6530 += 1, R6484 += 1, R6452 += 1 };
  s7 -> s10 [0, 65535] { R6530 += 1, R6484 += 1 };
  s8 -> s8 [0, 65535] { R6530 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  s10 -> s8 [0, 65535] { R6530 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6530 += 1, R6484 += 1 };
  accepting s7, s8, s9, s10;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1, R6438 += 1, R5989 += 1 };
  s0 -> s2 [0, 65535] { R6532 += 1, R6485 += 1, R6486 += 1 };
  s0 -> s3 [0, 65535] { R6532 += 1, R6486 += 1, R6453 += 1, R6454 += 1 };
  s0 -> s4 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1, R6437 += 1, R6438 += 1 };
  s0 -> s0 [0, 65535] { R6531 += 1, R6532 += 1 };
  s1 -> s5 [0, 65535] { R6532 += 1, R6486 += 1 };
  s1 -> s1 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1, R6438 += 1, R5989 += 1 };
  s1 -> s8 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R6532 += 1 };
  s2 -> s1 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1, R6438 += 1, R5989 += 1 };
  s2 -> s2 [0, 65535] { R6532 += 1, R6485 += 1, R6486 += 1 };
  s2 -> s3 [0, 65535] { R6532 += 1, R6486 += 1, R6453 += 1, R6454 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1, R6437 += 1, R6438 += 1 };
  s3 -> s1 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1, R6438 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R6532 += 1, R6486 += 1, R6453 += 1, R6454 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1, R6437 += 1, R6438 += 1 };
  s3 -> s7 [0, 65535] { R6532 += 1 };
  s4 -> s5 [0, 65535] { R6532 += 1, R6486 += 1 };
  s4 -> s1 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1, R6438 += 1, R5989 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1, R6437 += 1, R6438 += 1 };
  s4 -> s7 [0, 65535] { R6532 += 1 };
  s5 -> s5 [0, 65535] { R6532 += 1, R6486 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6532 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6532 += 1 };
  s8 -> s5 [0, 65535] { R6532 += 1, R6486 += 1 };
  s8 -> s8 [0, 65535] { R6532 += 1, R6486 += 1, R6454 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R6532 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6534 += 1, R6488 += 1, R6456 += 1, R6439 += 1, R6440 += 1 };
  s0 -> s2 [0, 65535] { R6534 += 1, R6487 += 1, R6488 += 1 };
  s0 -> s0 [0, 65535] { R6533 += 1, R6534 += 1 };
  s0 -> s3 [0, 65535] { R6534 += 1, R6488 += 1, R6455 += 1, R6456 += 1 };
  s0 -> s4 [108, 108] { R6534 += 1, R6488 += 1, R6456 += 1, R6440 += 1 };
  s1 -> s1 [0, 65535] { R6534 += 1, R6488 += 1, R6456 += 1, R6439 += 1, R6440 += 1 };
  s1 -> s4 [108, 108] { R6534 += 1, R6488 += 1, R6456 += 1, R6440 += 1 };
  s2 -> s1 [0, 65535] { R6534 += 1, R6488 += 1, R6456 += 1, R6439 += 1, R6440 += 1 };
  s2 -> s2 [0, 65535] { R6534 += 1, R6487 += 1, R6488 += 1 };
  s2 -> s3 [0, 65535] { R6534 += 1, R6488 += 1, R6455 += 1, R6456 += 1 };
  s2 -> s4 [108, 108] { R6534 += 1, R6488 += 1, R6456 += 1, R6440 += 1 };
  s3 -> s1 [0, 65535] { R6534 += 1, R6488 += 1, R6456 += 1, R6439 += 1, R6440 += 1 };
  s3 -> s3 [0, 65535] { R6534 += 1, R6488 += 1, R6455 += 1, R6456 += 1 };
  s3 -> s4 [108, 108] { R6534 += 1, R6488 += 1, R6456 += 1, R6440 += 1 };
  s4 -> s5 [111, 111] { R6534 += 1, R6488 += 1, R6456 += 1, R6440 += 1 };
  s5 -> s6 [99, 99] { R6534 += 1, R6488 += 1, R6456 += 1, R6440 += 1 };
  s6 -> s7 [97, 97] { R6534 += 1, R6488 += 1, R6456 += 1, R6440 += 1 };
  s7 -> s8 [108, 108] { R6534 += 1, R6488 += 1, R6456 += 1, R6440 += 1 };
  s8 -> s9 [0, 65535] { R6534 += 1, R6488 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R6534 += 1, R6488 += 1, R6456 += 1 };
  s8 -> s11 [0, 65535] { R6534 += 1 };
  s9 -> s9 [0, 65535] { R6534 += 1, R6488 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R6534 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R6534 += 1 };
  accepting s8, s9, s10, s11;
};
};
constraint R1 = R6434 && R2 = R6456 && R3 = R6006 && R4 = R6534 && R15 = 0 && R16 = R6488 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R6488 = 1 && R6000 = R6006 && R6001 - R6488 = 1 && R6002 = R6006 && R6003 - R6488 = 1 && R6004 = R6006 && R6005 - R6488 = 1 && R6433 = 0 && R6439 = 0 && R6440 = 0 && R6441 = 0 && R6442 = R6456 && R6443 = 0 && R6444 = R6456 && R6445 = 0 && R6446 = R6456 && R6447 = 0 && R6448 = R6456 && R6449 = 0 && R6450 = R6456 && R6451 = 0 && R6452 = R6456 && R6453 = 0 && R6454 = R6456 && R6455 = 0 && R6457 = 0 && R6458 = R6488 && R6459 = 0 && R6460 = R6488 && R6461 = 0 && R6462 = R6488 && R6463 = 0 && R6464 = R6488 && R6465 = 0 && R6466 = R6488 && R6467 = 0 && R6468 = R6488 && R6469 = 0 && R6470 = R6488 && R6471 = 0 && R6472 = R6488 && R6473 = 0 && R6474 = R6488 && R6475 = 0 && R6476 = R6488 && R6477 = 0 && R6478 = R6488 && R6479 = 0 && R6480 = R6488 && R6481 = 0 && R6482 = R6488 && R6483 = 0 && R6484 = R6488 && R6485 = 0 && R6486 = R6488 && R6487 = 0 && R6489 = 10 && R6490 = R6534 && R6491 = 10 && R6492 = R6534 && R6493 = 10 && R6494 = R6534 && R6495 = 10 && R6496 = R6534 && R6497 = 10 && R6498 = R6534 && R6499 = 10 && R6500 = R6534 && R6501 = 10 && R6502 = R6534 && R6503 = 10 && R6504 = R6534 && R6505 = 10 && R6506 = R6534 && R6507 = 10 && R6508 = R6534 && R6509 = 10 && R6510 = R6534 && R6511 = 10 && R6512 = R6534 && R6513 = 10 && R6514 = R6534 && R6515 = 10 && R6516 = R6534 && R6517 = 10 && R6518 = R6534 && R6519 = 10 && R6520 = R6534 && R6521 = 10 && R6522 = R6534 && R6523 = 10 && R6524 = R6534 && R6525 = 10 && R6526 = R6534 && R6527 = 10 && R6528 = R6534 && R6529 = 10 && R6530 = R6534 && R6531 = 10 && R6532 = R6534 && R6533 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R6488 < R6006 && -1 < R6434 && 0 < R6456 && -1 < R6488 && 9 < R6534 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R6429 != 0 || R6430 = R6434 || (R5988 = 0 && R6434 = 0)) && (R6431 != 0 || R6432 = R6434 || (R5988 = 0 && R6434 = 0)) && (R5989 = 0 || (R6437 = 0 && R6438 = 0)) && (R5990 = 0 || (R6435 = 0 && R6436 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R6429 = 0 || (R5988 = 0 && R6434 = 0)) && (R6431 = 0 || (R5988 = 0 && R6434 = 0));
// End of Parikh automata intersection problem
