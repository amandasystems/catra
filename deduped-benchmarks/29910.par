// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6959, R6960, R6961, R6962, R6963, R6964, R6965, R6966, R6967, R6968, R6969, R6970, R6971, R6972, R6973, R6974, R6975, R6976, R6977, R6978, R6979, R6980, R6981, R6982, R6983, R6984, R6985, R6986, R6987, R6988, R6989, R6990, R6991, R6992, R6993, R6994, R6995, R6996, R6997, R6998, R6999, R7, R7000, R7001, R7002, R7003, R7004, R7005, R7006, R7007, R7008, R7009, R7010, R7011, R7012, R7013, R7014, R7015, R7016, R7017, R7018, R7019, R7020, R7021, R7022, R7023, R7024, R7025, R7026, R7027, R7028, R7029, R7030, R7031, R7032, R7033, R7034, R7035, R7036, R7037, R7038, R7039, R7040, R7041, R7042, R7043, R7044, R7045, R7046, R7047, R7048, R7049, R7050, R7051, R7052, R7053, R7054, R7055, R7056, R7057, R7058, R7059, R7060, R7061, R7062;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R7018 += 1 };
  s0 -> s0 [0, 65535] { R7017 += 1, R7018 += 1 };
  s0 -> s2 [46, 46] { R7018 += 1 };
  s0 -> s3 [47, 47] { R7018 += 1 };
  s0 -> s1 [48, 65535] { R7018 += 1 };
  s1 -> s1 [0, 45] { R7018 += 1 };
  s1 -> s2 [46, 46] { R7018 += 1 };
  s1 -> s3 [47, 47] { R7018 += 1 };
  s1 -> s1 [48, 65535] { R7018 += 1 };
  s2 -> s1 [0, 45] { R7018 += 1 };
  s2 -> s2 [46, 46] { R7018 += 1 };
  s2 -> s3 [47, 47] { R7018 += 1 };
  s2 -> s1 [48, 114] { R7018 += 1 };
  s2 -> s8 [115, 115] { R7018 += 1 };
  s2 -> s1 [116, 65535] { R7018 += 1 };
  s3 -> s3 [0, 45] { R7018 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R7018 += 1 };
  s3 -> s3 [47, 65535] { R7018 += 1 };
  s4 -> s3 [0, 45] { R7018 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R7018 += 1 };
  s4 -> s3 [47, 114] { R7018 += 1 };
  s4 -> s5 [115, 115] { R7018 += 1 };
  s4 -> s3 [116, 65535] { R7018 += 1 };
  s5 -> s3 [0, 45] { R7018 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R7018 += 1 };
  s5 -> s3 [47, 110] { R7018 += 1 };
  s5 -> s6 [111, 111] { R7018 += 1 };
  s5 -> s3 [112, 65535] { R7018 += 1 };
  s6 -> s3 [0, 45] { R7018 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R7018 += 1 };
  s6 -> s3 [47, 98] { R7018 += 1 };
  s6 -> s7 [99, 99] { R7018 += 1 };
  s6 -> s3 [100, 65535] { R7018 += 1 };
  s7 -> s3 [0, 45] { R7018 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R7018 += 1 };
  s7 -> s3 [47, 106] { R7018 += 1 };
  s7 -> s3 [108, 65535] { R7018 += 1 };
  s8 -> s1 [0, 45] { R7018 += 1 };
  s8 -> s2 [46, 46] { R7018 += 1 };
  s8 -> s3 [47, 47] { R7018 += 1 };
  s8 -> s1 [48, 110] { R7018 += 1 };
  s8 -> s9 [111, 111] { R7018 += 1 };
  s8 -> s1 [112, 65535] { R7018 += 1 };
  s9 -> s1 [0, 45] { R7018 += 1 };
  s9 -> s2 [46, 46] { R7018 += 1 };
  s9 -> s3 [47, 47] { R7018 += 1 };
  s9 -> s1 [48, 98] { R7018 += 1 };
  s9 -> s10 [99, 99] { R7018 += 1 };
  s9 -> s1 [100, 65535] { R7018 += 1 };
  s10 -> s1 [0, 45] { R7018 += 1 };
  s10 -> s2 [46, 46] { R7018 += 1 };
  s10 -> s3 [47, 47] { R7018 += 1 };
  s10 -> s1 [48, 106] { R7018 += 1 };
  s10 -> s1 [108, 65535] { R7018 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R7020 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R7019 += 1, R7020 += 1 };
  s1 -> s1 [0, 65535] { R7020 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R7022 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R7021 += 1, R7022 += 1 };
  s0 -> s2 [0, 65535] { R7022 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R7022 += 1 };
  s0 -> s1 [48, 65535] { R7022 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R7022 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R7022 += 1 };
  s1 -> s1 [48, 65535] { R7022 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R7022 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R7022 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R7022 += 1 };
  s2 -> s1 [48, 65535] { R7022 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R7022 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R7024 += 1, R6000 += 1 };
  s0 -> s2 [0, 65535] { R7024 += 1, R5999 += 1, R6000 += 1 };
  s0 -> s0 [0, 65535] { R7023 += 1, R7024 += 1 };
  s0 -> s1 [38, 42] { R7024 += 1, R6000 += 1 };
  s0 -> s1 [44, 45] { R7024 += 1, R6000 += 1 };
  s0 -> s1 [47, 62] { R7024 += 1, R6000 += 1 };
  s0 -> s1 [64, 65535] { R7024 += 1, R6000 += 1 };
  s1 -> s1 [0, 36] { R7024 += 1, R6000 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7024 += 1 };
  s1 -> s1 [38, 42] { R7024 += 1, R6000 += 1 };
  s1 -> s1 [44, 45] { R7024 += 1, R6000 += 1 };
  s1 -> s1 [47, 62] { R7024 += 1, R6000 += 1 };
  s1 -> s1 [64, 65535] { R7024 += 1, R6000 += 1 };
  s2 -> s1 [0, 36] { R7024 += 1, R6000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7024 += 1, R5999 += 1, R6000 += 1 };
  s2 -> s1 [38, 42] { R7024 += 1, R6000 += 1 };
  s2 -> s1 [44, 45] { R7024 += 1, R6000 += 1 };
  s2 -> s1 [47, 62] { R7024 += 1, R6000 += 1 };
  s2 -> s1 [64, 65535] { R7024 += 1, R6000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R7026 += 1, R6002 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R7025 += 1, R7026 += 1 };
  s0 -> s2 [0, 65535] { R7026 += 1, R6001 += 1, R6002 += 1 };
  s1 -> s1 [0, 65535] { R7026 += 1, R6002 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R7026 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7026 += 1, R6002 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R7026 += 1, R6001 += 1, R6002 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7026 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R7028 += 1, R6003 += 1, R6004 += 1 };
  s0 -> s3 [0, 65535] { R7028 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R7027 += 1, R7028 += 1 };
  s0 -> s4 [63, 63] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R7028 += 1, R6004 += 1 };
  s1 -> s1 [0, 65535] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535] { R7028 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R7028 += 1, R6003 += 1, R6004 += 1 };
  s2 -> s3 [0, 65535] { R7028 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R7028 += 1 };
  s3 -> s3 [0, 65535] { R7028 += 1, R6004 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R7028 += 1, R6004 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R7028 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7028 += 1, R6004 += 1 };
  s7 -> s5 [0, 65535] { R7028 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7030 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R7029 += 1, R7030 += 1 };
  s0 -> s2 [0, 65535] { R7030 += 1, R6005 += 1, R6006 += 1 };
  s0 -> s3 [0, 65535] { R7030 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7030 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s6 [0, 65535] { R7030 += 1 };
  s1 -> s3 [0, 65535] { R7030 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7030 += 1, R6006 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s2 [0, 65535] { R7030 += 1, R6005 += 1, R6006 += 1 };
  s2 -> s3 [0, 65535] { R7030 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R7030 += 1, R6006 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7030 += 1 };
  s3 -> s3 [0, 65535] { R7030 += 1, R6006 += 1, R5994 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R7030 += 1, R6006 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7030 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7030 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R7032 += 1, R6986 += 1 };
  s0 -> s0 [0, 65535] { R7031 += 1, R7032 += 1 };
  s0 -> s2 [0, 65535] { R7032 += 1, R6985 += 1, R6986 += 1 };
  s0 -> s1 [45, 63] { R7032 += 1, R6986 += 1 };
  s0 -> s3 [87, 87] { R7032 += 1, R6986 += 1 };
  s0 -> s1 [88, 65535] { R7032 += 1, R6986 += 1 };
  s1 -> s1 [0, 43] { R7032 += 1, R6986 += 1 };
  s1 -> s1 [45, 63] { R7032 += 1, R6986 += 1 };
  s1 -> s3 [87, 87] { R7032 += 1, R6986 += 1 };
  s1 -> s1 [88, 65535] { R7032 += 1, R6986 += 1 };
  s2 -> s1 [0, 43] { R7032 += 1, R6986 += 1 };
  s2 -> s2 [0, 65535] { R7032 += 1, R6985 += 1, R6986 += 1 };
  s2 -> s1 [45, 63] { R7032 += 1, R6986 += 1 };
  s2 -> s3 [87, 87] { R7032 += 1, R6986 += 1 };
  s2 -> s1 [88, 65535] { R7032 += 1, R6986 += 1 };
  s3 -> s3 [0, 43] { R7032 += 1, R6986 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7032 += 1 };
  s3 -> s3 [45, 63] { R7032 += 1, R6986 += 1 };
  s3 -> s3 [87, 65535] { R7032 += 1, R6986 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R7034 += 1, R6988 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R7033 += 1, R7034 += 1 };
  s0 -> s2 [0, 65535] { R7034 += 1, R6987 += 1, R6988 += 1 };
  s1 -> s4 [0, 65535] { R7034 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7034 += 1, R6988 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7034 += 1, R6988 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R7034 += 1, R6987 += 1, R6988 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7034 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R7036 += 1, R6990 += 1 };
  s0 -> s0 [0, 65535] { R7035 += 1, R7036 += 1 };
  s0 -> s2 [0, 65535] { R7036 += 1, R6990 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R7036 += 1, R6989 += 1, R6990 += 1 };
  s0 -> s4 [58, 58] { R7036 += 1, R6990 += 1 };
  s0 -> s1 [59, 65535] { R7036 += 1, R6990 += 1 };
  s1 -> s1 [0, 57] { R7036 += 1, R6990 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7036 += 1 };
  s1 -> s4 [58, 58] { R7036 += 1, R6990 += 1 };
  s1 -> s1 [59, 65535] { R7036 += 1, R6990 += 1 };
  s2 -> s1 [0, 57] { R7036 += 1, R6990 += 1 };
  s2 -> s2 [0, 65535] { R7036 += 1, R6990 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R7036 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R7036 += 1, R6990 += 1 };
  s2 -> s1 [59, 65535] { R7036 += 1, R6990 += 1 };
  s3 -> s1 [0, 57] { R7036 += 1, R6990 += 1 };
  s3 -> s2 [0, 65535] { R7036 += 1, R6990 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R7036 += 1, R6989 += 1, R6990 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R7036 += 1, R6990 += 1 };
  s3 -> s1 [59, 65535] { R7036 += 1, R6990 += 1 };
  s4 -> s4 [0, 65535] { R7036 += 1, R6990 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7036 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R7038 += 1, R6992 += 1 };
  s0 -> s2 [0, 65535] { R7038 += 1, R6991 += 1, R6992 += 1 };
  s0 -> s3 [0, 65535] { R7038 += 1, R6992 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R7037 += 1, R7038 += 1 };
  s0 -> s4 [87, 87] { R7038 += 1, R6992 += 1 };
  s0 -> s1 [88, 65535] { R7038 += 1, R6992 += 1 };
  s1 -> s1 [0, 86] { R7038 += 1, R6992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7038 += 1 };
  s1 -> s4 [87, 87] { R7038 += 1, R6992 += 1 };
  s1 -> s1 [88, 65535] { R7038 += 1, R6992 += 1 };
  s2 -> s1 [0, 86] { R7038 += 1, R6992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7038 += 1, R6991 += 1, R6992 += 1 };
  s2 -> s3 [0, 65535] { R7038 += 1, R6992 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R7038 += 1, R6992 += 1 };
  s2 -> s1 [88, 65535] { R7038 += 1, R6992 += 1 };
  s3 -> s1 [0, 86] { R7038 += 1, R6992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7038 += 1, R6992 += 1, R11 += 1 };
  s3 -> s6 [0, 65535] { R7038 += 1 };
  s3 -> s4 [87, 87] { R7038 += 1, R6992 += 1 };
  s3 -> s1 [88, 65535] { R7038 += 1, R6992 += 1 };
  s4 -> s4 [0, 65535] { R7038 += 1, R6992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7038 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R7040 += 1, R6993 += 1, R6994 += 1 };
  s0 -> s3 [0, 65535] { R7040 += 1, R6994 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R7039 += 1, R7040 += 1 };
  s0 -> s4 [91, 91] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R7040 += 1, R6994 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7040 += 1 };
  s2 -> s1 [0, 90] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R7040 += 1, R6993 += 1, R6994 += 1 };
  s2 -> s3 [0, 65535] { R7040 += 1, R6994 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R7040 += 1, R6994 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7040 += 1 };
  s3 -> s4 [91, 91] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R7040 += 1, R6994 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7040 += 1 };
  s7 -> s7 [0, 65535] { R7040 += 1, R6994 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7040 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R7041 += 1, R7042 += 1 };
  s0 -> s1 [0, 65535] { R7042 += 1, R6995 += 1, R6996 += 1 };
  s0 -> s2 [0, 65535] { R7042 += 1, R6996 += 1, R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R7042 += 1, R6996 += 1, R5998 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R7042 += 1, R6995 += 1, R6996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R7042 += 1, R6996 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s3 [0, 65535] { R7042 += 1, R6996 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7042 += 1 };
  s2 -> s2 [0, 65535] { R7042 += 1, R6996 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s3 [0, 65535] { R7042 += 1, R6996 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R7042 += 1, R6996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7042 += 1 };
  s3 -> s3 [0, 65535] { R7042 += 1, R6996 += 1, R5998 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R7042 += 1, R6996 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7042 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7042 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7044 += 1, R6998 += 1, R6966 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R7044 += 1, R6998 += 1, R6965 += 1, R6966 += 1 };
  s0 -> s3 [0, 65535] { R7044 += 1, R6997 += 1, R6998 += 1 };
  s0 -> s0 [0, 65535] { R7043 += 1, R7044 += 1 };
  s1 -> s6 [0, 65535] { R7044 += 1, R6998 += 1 };
  s1 -> s1 [0, 65535] { R7044 += 1, R6998 += 1, R6966 += 1, R5990 += 1 };
  s1 -> s5 [0, 65535] { R7044 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R7044 += 1, R6998 += 1, R6966 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R7044 += 1, R6998 += 1, R6965 += 1, R6966 += 1 };
  s2 -> s5 [0, 65535] { R7044 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7044 += 1, R6998 += 1, R6966 += 1, R5990 += 1 };
  s3 -> s2 [0, 65535] { R7044 += 1, R6998 += 1, R6965 += 1, R6966 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7044 += 1, R6997 += 1, R6998 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7044 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7044 += 1, R6998 += 1 };
  s6 -> s5 [0, 65535] { R7044 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R7046 += 1, R6999 += 1, R7000 += 1 };
  s0 -> s0 [0, 65535] { R7045 += 1, R7046 += 1 };
  s0 -> s2 [0, 65535] { R7046 += 1, R7000 += 1 };
  s1 -> s1 [0, 65535] { R7046 += 1, R6999 += 1, R7000 += 1 };
  s1 -> s2 [0, 65535] { R7046 += 1, R7000 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7046 += 1 };
  s2 -> s2 [0, 65535] { R7046 += 1, R7000 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7046 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s0 -> s2 [0, 65535] { R7048 += 1, R7001 += 1, R7002 += 1 };
  s0 -> s3 [0, 65535] { R7048 += 1, R7002 += 1, R6969 += 1, R6970 += 1 };
  s0 -> s0 [0, 65535] { R7047 += 1, R7048 += 1 };
  s0 -> s4 [87, 87] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s0 -> s1 [88, 65535] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s1 -> s1 [0, 86] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s1 -> s4 [87, 87] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s1 -> s1 [88, 65535] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s2 -> s1 [0, 86] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s2 -> s2 [0, 65535] { R7048 += 1, R7001 += 1, R7002 += 1 };
  s2 -> s3 [0, 65535] { R7048 += 1, R7002 += 1, R6969 += 1, R6970 += 1 };
  s2 -> s4 [87, 87] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s2 -> s1 [88, 65535] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s3 -> s1 [0, 86] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s3 -> s3 [0, 65535] { R7048 += 1, R7002 += 1, R6969 += 1, R6970 += 1 };
  s3 -> s4 [87, 87] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s3 -> s1 [88, 65535] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s4 -> s5 [0, 65535] { R7048 += 1, R7002 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R7048 += 1 };
  s4 -> s4 [0, 65535] { R7048 += 1, R7002 += 1, R6970 += 1 };
  s5 -> s5 [0, 65535] { R7048 += 1, R7002 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R7048 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7048 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7049 += 1, R7050 += 1 };
  s0 -> s1 [0, 65535] { R7050 += 1, R7003 += 1, R7004 += 1 };
  s0 -> s2 [0, 65535] { R7050 += 1, R7004 += 1, R6971 += 1, R6972 += 1 };
  s0 -> s3 [0, 65535] { R7050 += 1, R7004 += 1, R6972 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7050 += 1, R7003 += 1, R7004 += 1 };
  s1 -> s2 [0, 65535] { R7050 += 1, R7004 += 1, R6971 += 1, R6972 += 1 };
  s1 -> s3 [0, 65535] { R7050 += 1, R7004 += 1, R6972 += 1, R1 += 1 };
  s2 -> s4 [0, 65535] { R7050 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7050 += 1, R7004 += 1, R6971 += 1, R6972 += 1 };
  s2 -> s3 [0, 65535] { R7050 += 1, R7004 += 1, R6972 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R7050 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7050 += 1, R7004 += 1 };
  s3 -> s3 [0, 65535] { R7050 += 1, R7004 += 1, R6972 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R7050 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R7050 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7050 += 1, R7004 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s0 -> s2 [0, 65535] { R7052 += 1, R7006 += 1, R6973 += 1, R6974 += 1 };
  s0 -> s3 [0, 65535] { R7052 += 1, R7006 += 1, R6974 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R7052 += 1, R7005 += 1, R7006 += 1 };
  s0 -> s0 [0, 65535] { R7051 += 1, R7052 += 1 };
  s0 -> s5 [87, 87] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s0 -> s1 [88, 65535] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s1 -> s1 [0, 86] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s1 -> s1 [0, 65535] { R7052 += 1, R7006 += 1 };
  s1 -> s7 [0, 65535] { R7052 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [87, 87] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s1 -> s1 [88, 65535] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s2 -> s1 [0, 86] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s2 -> s7 [0, 65535] { R7052 += 1 };
  s2 -> s2 [0, 65535] { R7052 += 1, R7006 += 1, R6973 += 1, R6974 += 1 };
  s2 -> s3 [0, 65535] { R7052 += 1, R7006 += 1, R6974 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [87, 87] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s2 -> s1 [88, 65535] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s3 -> s1 [0, 86] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s3 -> s7 [0, 65535] { R7052 += 1 };
  s3 -> s3 [0, 65535] { R7052 += 1, R7006 += 1, R6974 += 1, R7 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R7052 += 1, R7006 += 1 };
  s3 -> s5 [87, 87] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s3 -> s1 [88, 65535] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s4 -> s1 [0, 86] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s4 -> s2 [0, 65535] { R7052 += 1, R7006 += 1, R6973 += 1, R6974 += 1 };
  s4 -> s3 [0, 65535] { R7052 += 1, R7006 += 1, R6974 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R7052 += 1, R7005 += 1, R7006 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [87, 87] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s4 -> s1 [88, 65535] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s5 -> s5 [0, 65535] { R7052 += 1, R7006 += 1, R6974 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7052 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R7052 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7052 += 1, R7006 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s0 -> s2 [0, 65535] { R7054 += 1, R7008 += 1, R6975 += 1, R6976 += 1 };
  s0 -> s3 [0, 65535] { R7054 += 1, R7008 += 1, R6976 += 1, R6959 += 1, R6960 += 1 };
  s0 -> s0 [0, 65535] { R7053 += 1, R7054 += 1 };
  s0 -> s4 [0, 65535] { R7054 += 1, R7007 += 1, R7008 += 1 };
  s0 -> s1 [88, 65535] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s1 -> s1 [0, 86] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s1 -> s6 [0, 65535] { R7054 += 1 };
  s1 -> s1 [0, 65535] { R7054 += 1, R7008 += 1, R6976 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R7054 += 1, R7008 += 1 };
  s1 -> s1 [88, 65535] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s2 -> s1 [0, 86] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s2 -> s6 [0, 65535] { R7054 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7054 += 1, R7008 += 1, R6975 += 1, R6976 += 1 };
  s2 -> s3 [0, 65535] { R7054 += 1, R7008 += 1, R6976 += 1, R6959 += 1, R6960 += 1 };
  s2 -> s1 [88, 65535] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s3 -> s1 [0, 86] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s3 -> s6 [0, 65535] { R7054 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7054 += 1, R7008 += 1, R6976 += 1, R6959 += 1, R6960 += 1 };
  s3 -> s7 [0, 65535] { R7054 += 1, R7008 += 1 };
  s3 -> s1 [88, 65535] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s4 -> s1 [0, 86] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R7054 += 1, R7008 += 1, R6975 += 1, R6976 += 1 };
  s4 -> s3 [0, 65535] { R7054 += 1, R7008 += 1, R6976 += 1, R6959 += 1, R6960 += 1 };
  s4 -> s4 [0, 65535] { R7054 += 1, R7007 += 1, R7008 += 1 };
  s4 -> s1 [88, 65535] { R7054 += 1, R7008 += 1, R6976 += 1, R6960 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7054 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7054 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7054 += 1, R7008 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7056 += 1, R7010 += 1, R6977 += 1, R6978 += 1 };
  s0 -> s2 [0, 65535] { R7056 += 1, R7009 += 1, R7010 += 1 };
  s0 -> s3 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1, R6962 += 1, R5988 += 1 };
  s0 -> s4 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1, R6961 += 1, R6962 += 1 };
  s0 -> s0 [0, 65535] { R7055 += 1, R7056 += 1 };
  s1 -> s6 [0, 65535] { R7056 += 1 };
  s1 -> s1 [0, 65535] { R7056 += 1, R7010 += 1, R6977 += 1, R6978 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1, R6962 += 1, R5988 += 1 };
  s1 -> s4 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1, R6961 += 1, R6962 += 1 };
  s2 -> s1 [0, 65535] { R7056 += 1, R7010 += 1, R6977 += 1, R6978 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R7056 += 1, R7009 += 1, R7010 += 1 };
  s2 -> s3 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1, R6962 += 1, R5988 += 1 };
  s2 -> s4 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1, R6961 += 1, R6962 += 1 };
  s3 -> s5 [0, 65535] { R7056 += 1, R7010 += 1 };
  s3 -> s8 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1 };
  s3 -> s6 [0, 65535] { R7056 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1, R6962 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R7056 += 1, R7010 += 1 };
  s4 -> s6 [0, 65535] { R7056 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s3 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1, R6962 += 1, R5988 += 1 };
  s4 -> s4 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1, R6961 += 1, R6962 += 1 };
  s5 -> s5 [0, 65535] { R7056 += 1, R7010 += 1 };
  s5 -> s6 [0, 65535] { R7056 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R7056 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R7056 += 1, R7010 += 1 };
  s8 -> s8 [0, 65535] { R7056 += 1, R7010 += 1, R6978 += 1 };
  s8 -> s6 [0, 65535] { R7056 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R7058 += 1, R7012 += 1, R6980 += 1, R6963 += 1, R6964 += 1 };
  s0 -> s2 [0, 65535] { R7058 += 1, R7011 += 1, R7012 += 1 };
  s0 -> s0 [0, 65535] { R7057 += 1, R7058 += 1 };
  s0 -> s3 [0, 65535] { R7058 += 1, R7012 += 1, R6979 += 1, R6980 += 1 };
  s0 -> s4 [108, 108] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s1 -> s1 [0, 65535] { R7058 += 1, R7012 += 1, R6980 += 1, R6963 += 1, R6964 += 1 };
  s1 -> s4 [108, 108] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s2 -> s1 [0, 65535] { R7058 += 1, R7012 += 1, R6980 += 1, R6963 += 1, R6964 += 1 };
  s2 -> s2 [0, 65535] { R7058 += 1, R7011 += 1, R7012 += 1 };
  s2 -> s3 [0, 65535] { R7058 += 1, R7012 += 1, R6979 += 1, R6980 += 1 };
  s2 -> s4 [108, 108] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s3 -> s1 [0, 65535] { R7058 += 1, R7012 += 1, R6980 += 1, R6963 += 1, R6964 += 1 };
  s3 -> s3 [0, 65535] { R7058 += 1, R7012 += 1, R6979 += 1, R6980 += 1 };
  s3 -> s4 [108, 108] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s4 -> s5 [111, 111] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s5 -> s6 [99, 99] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s6 -> s7 [97, 97] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s7 -> s8 [108, 108] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s8 -> s9 [104, 104] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s9 -> s10 [111, 111] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s10 -> s11 [115, 115] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s11 -> s12 [116, 116] { R7058 += 1, R7012 += 1, R6980 += 1, R6964 += 1 };
  s12 -> s13 [0, 65535] { R7058 += 1, R7012 += 1 };
  s12 -> s12 [0, 65535] { R7058 += 1, R7012 += 1, R6980 += 1 };
  s12 -> s14 [0, 65535] { R7058 += 1 };
  s12 -> s15 [0, 65535];
  s13 -> s13 [0, 65535] { R7058 += 1, R7012 += 1 };
  s13 -> s14 [0, 65535] { R7058 += 1 };
  s13 -> s15 [0, 65535];
  s14 -> s14 [0, 65535] { R7058 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s12, s13, s14, s15;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R7059 += 1, R7060 += 1 };
  s0 -> s1 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1, R6968 += 1, R5989 += 1 };
  s0 -> s2 [0, 65535] { R7060 += 1, R7014 += 1, R6981 += 1, R6982 += 1 };
  s0 -> s3 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1, R6967 += 1, R6968 += 1 };
  s0 -> s4 [0, 65535] { R7060 += 1, R7013 += 1, R7014 += 1 };
  s1 -> s6 [0, 65535] { R7060 += 1, R7014 += 1 };
  s1 -> s1 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1, R6968 += 1, R5989 += 1 };
  s1 -> s7 [0, 65535] { R7060 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1 };
  s2 -> s1 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1, R6968 += 1, R5989 += 1 };
  s2 -> s2 [0, 65535] { R7060 += 1, R7014 += 1, R6981 += 1, R6982 += 1 };
  s2 -> s3 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1, R6967 += 1, R6968 += 1 };
  s2 -> s7 [0, 65535] { R7060 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7060 += 1, R7014 += 1 };
  s3 -> s1 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1, R6968 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1, R6967 += 1, R6968 += 1 };
  s3 -> s7 [0, 65535] { R7060 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1, R6968 += 1, R5989 += 1 };
  s4 -> s2 [0, 65535] { R7060 += 1, R7014 += 1, R6981 += 1, R6982 += 1 };
  s4 -> s3 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1, R6967 += 1, R6968 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7060 += 1, R7013 += 1, R7014 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7060 += 1, R7014 += 1 };
  s6 -> s7 [0, 65535] { R7060 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7060 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R7060 += 1, R7014 += 1 };
  s8 -> s7 [0, 65535] { R7060 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R7060 += 1, R7014 += 1, R6982 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R7062 += 1, R7015 += 1, R7016 += 1 };
  s0 -> s0 [0, 65535] { R7061 += 1, R7062 += 1 };
  s0 -> s2 [0, 65535] { R7062 += 1, R7016 += 1, R6984 += 1 };
  s0 -> s3 [0, 65535] { R7062 += 1, R7016 += 1, R6983 += 1, R6984 += 1 };
  s1 -> s1 [0, 65535] { R7062 += 1, R7015 += 1, R7016 += 1 };
  s1 -> s2 [0, 65535] { R7062 += 1, R7016 += 1, R6984 += 1 };
  s1 -> s3 [0, 65535] { R7062 += 1, R7016 += 1, R6983 += 1, R6984 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7062 += 1, R7016 += 1, R6984 += 1 };
  s2 -> s6 [0, 65535] { R7062 += 1, R7016 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7062 += 1 };
  s3 -> s2 [0, 65535] { R7062 += 1, R7016 += 1, R6984 += 1 };
  s3 -> s3 [0, 65535] { R7062 += 1, R7016 += 1, R6983 += 1, R6984 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7062 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7062 += 1 };
  s6 -> s6 [0, 65535] { R7062 += 1, R7016 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7062 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R6964 && R2 = R6984 && R3 = R6006 && R4 = R7062 && R15 = 0 && R16 = R7016 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R5999 - R7016 = 1 && R6000 = R6006 && R6001 - R7016 = 1 && R6002 = R6006 && R6003 - R7016 = 1 && R6004 = R6006 && R6005 - R7016 = 1 && R6963 = 0 && R6969 = 0 && R6970 = R6984 && R6971 = 0 && R6972 = R6984 && R6973 = 0 && R6974 = R6984 && R6975 = 0 && R6976 = R6984 && R6977 = 0 && R6978 = R6984 && R6979 = 0 && R6980 = R6984 && R6981 = 0 && R6982 = R6984 && R6983 = 0 && R6985 = 0 && R6986 = R7016 && R6987 = 0 && R6988 = R7016 && R6989 = 0 && R6990 = R7016 && R6991 = 0 && R6992 = R7016 && R6993 = 0 && R6994 = R7016 && R6995 = 0 && R6996 = R7016 && R6997 = 0 && R6998 = R7016 && R6999 = 0 && R7000 = R7016 && R7001 = 0 && R7002 = R7016 && R7003 = 0 && R7004 = R7016 && R7005 = 0 && R7006 = R7016 && R7007 = 0 && R7008 = R7016 && R7009 = 0 && R7010 = R7016 && R7011 = 0 && R7012 = R7016 && R7013 = 0 && R7014 = R7016 && R7015 = 0 && R7017 = 10 && R7018 = R7062 && R7019 = 10 && R7020 = R7062 && R7021 = 10 && R7022 = R7062 && R7023 = 10 && R7024 = R7062 && R7025 = 10 && R7026 = R7062 && R7027 = 10 && R7028 = R7062 && R7029 = 10 && R7030 = R7062 && R7031 = 10 && R7032 = R7062 && R7033 = 10 && R7034 = R7062 && R7035 = 10 && R7036 = R7062 && R7037 = 10 && R7038 = R7062 && R7039 = 10 && R7040 = R7062 && R7041 = 10 && R7042 = R7062 && R7043 = 10 && R7044 = R7062 && R7045 = 10 && R7046 = R7062 && R7047 = 10 && R7048 = R7062 && R7049 = 10 && R7050 = R7062 && R7051 = 10 && R7052 = R7062 && R7053 = 10 && R7054 = R7062 && R7055 = 10 && R7056 = R7062 && R7057 = 10 && R7058 = R7062 && R7059 = 10 && R7060 = R7062 && R7061 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R7016 < R6006 && -1 < R6964 && 0 < R6984 && -1 < R7016 && 9 < R7062 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R6959 != 0 || R6960 = R6964 || (R5988 = 0 && R6964 = 0)) && (R6961 != 0 || R6962 = R6964 || (R5988 = 0 && R6964 = 0)) && (R5989 = 0 || (R6967 = 0 && R6968 = 0)) && (R5990 = 0 || (R6965 = 0 && R6966 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R6959 = 0 || (R5988 = 0 && R6964 = 0)) && (R6961 = 0 || (R5988 = 0 && R6964 = 0));
// End of Parikh automata intersection problem
