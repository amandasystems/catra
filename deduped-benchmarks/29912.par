// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R11299, R11300, R11301, R11302, R11303, R11304, R11305, R11306, R11521, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R11536, R11537, R11538, R11539, R11540, R11541, R11542, R11543, R11544, R11545, R11546, R11547, R11548, R11549, R11550, R11551, R11552, R11553, R11554, R11555, R11556, R11557, R11558, R11559, R11560, R11561, R11562, R11563, R11564, R11565, R11566, R11567, R11568, R11569, R11570, R11571, R11572, R11573, R11574, R11575, R11576, R11577, R11578, R11579, R11580, R11581, R11582, R11583, R11584, R11585, R11586, R11587, R11588, R11589, R11590, R11591, R11592, R11593, R11594, R11595, R11596, R11597, R11598, R11599, R11600, R11601, R11602, R11603, R11604, R11605, R11606, R11607, R11608, R11609, R11610, R11611, R11612, R11613, R11614, R11615, R11616, R11617, R11618, R11619, R11620, R11621, R11622, R11623, R11624, R11625, R11626, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R11582 += 1 };
  s0 -> s0 [0, 65535] { R11581 += 1, R11582 += 1 };
  s0 -> s2 [46, 46] { R11582 += 1 };
  s0 -> s3 [47, 47] { R11582 += 1 };
  s0 -> s1 [48, 65535] { R11582 += 1 };
  s1 -> s1 [0, 45] { R11582 += 1 };
  s1 -> s2 [46, 46] { R11582 += 1 };
  s1 -> s3 [47, 47] { R11582 += 1 };
  s1 -> s1 [48, 65535] { R11582 += 1 };
  s2 -> s1 [0, 45] { R11582 += 1 };
  s2 -> s2 [46, 46] { R11582 += 1 };
  s2 -> s3 [47, 47] { R11582 += 1 };
  s2 -> s1 [48, 114] { R11582 += 1 };
  s2 -> s8 [115, 115] { R11582 += 1 };
  s2 -> s1 [116, 65535] { R11582 += 1 };
  s3 -> s3 [0, 45] { R11582 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R11582 += 1 };
  s3 -> s3 [47, 65535] { R11582 += 1 };
  s4 -> s3 [0, 45] { R11582 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R11582 += 1 };
  s4 -> s3 [47, 114] { R11582 += 1 };
  s4 -> s5 [115, 115] { R11582 += 1 };
  s4 -> s3 [116, 65535] { R11582 += 1 };
  s5 -> s3 [0, 45] { R11582 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R11582 += 1 };
  s5 -> s3 [47, 110] { R11582 += 1 };
  s5 -> s6 [111, 111] { R11582 += 1 };
  s5 -> s3 [112, 65535] { R11582 += 1 };
  s6 -> s3 [0, 45] { R11582 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R11582 += 1 };
  s6 -> s3 [47, 98] { R11582 += 1 };
  s6 -> s7 [99, 99] { R11582 += 1 };
  s6 -> s3 [100, 65535] { R11582 += 1 };
  s7 -> s3 [0, 45] { R11582 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R11582 += 1 };
  s7 -> s3 [47, 106] { R11582 += 1 };
  s7 -> s3 [108, 65535] { R11582 += 1 };
  s8 -> s1 [0, 45] { R11582 += 1 };
  s8 -> s2 [46, 46] { R11582 += 1 };
  s8 -> s3 [47, 47] { R11582 += 1 };
  s8 -> s1 [48, 110] { R11582 += 1 };
  s8 -> s9 [111, 111] { R11582 += 1 };
  s8 -> s1 [112, 65535] { R11582 += 1 };
  s9 -> s1 [0, 45] { R11582 += 1 };
  s9 -> s2 [46, 46] { R11582 += 1 };
  s9 -> s3 [47, 47] { R11582 += 1 };
  s9 -> s1 [48, 98] { R11582 += 1 };
  s9 -> s10 [99, 99] { R11582 += 1 };
  s9 -> s1 [100, 65535] { R11582 += 1 };
  s10 -> s1 [0, 45] { R11582 += 1 };
  s10 -> s2 [46, 46] { R11582 += 1 };
  s10 -> s3 [47, 47] { R11582 += 1 };
  s10 -> s1 [48, 106] { R11582 += 1 };
  s10 -> s1 [108, 65535] { R11582 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R11584 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R11583 += 1, R11584 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11584 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R11586 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R11585 += 1, R11586 += 1 };
  s0 -> s2 [0, 65535] { R11586 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R11586 += 1 };
  s0 -> s1 [48, 65535] { R11586 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R11586 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R11586 += 1 };
  s1 -> s1 [48, 65535] { R11586 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R11586 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R11586 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R11586 += 1 };
  s2 -> s1 [48, 65535] { R11586 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R11586 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R11588 += 1, R11300 += 1 };
  s0 -> s2 [0, 65535] { R11588 += 1, R11299 += 1, R11300 += 1 };
  s0 -> s0 [0, 65535] { R11587 += 1, R11588 += 1 };
  s0 -> s1 [38, 42] { R11588 += 1, R11300 += 1 };
  s0 -> s1 [44, 45] { R11588 += 1, R11300 += 1 };
  s0 -> s1 [47, 62] { R11588 += 1, R11300 += 1 };
  s0 -> s1 [64, 65535] { R11588 += 1, R11300 += 1 };
  s1 -> s1 [0, 36] { R11588 += 1, R11300 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11588 += 1 };
  s1 -> s1 [38, 42] { R11588 += 1, R11300 += 1 };
  s1 -> s1 [44, 45] { R11588 += 1, R11300 += 1 };
  s1 -> s1 [47, 62] { R11588 += 1, R11300 += 1 };
  s1 -> s1 [64, 65535] { R11588 += 1, R11300 += 1 };
  s2 -> s1 [0, 36] { R11588 += 1, R11300 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11588 += 1, R11299 += 1, R11300 += 1 };
  s2 -> s1 [38, 42] { R11588 += 1, R11300 += 1 };
  s2 -> s1 [44, 45] { R11588 += 1, R11300 += 1 };
  s2 -> s1 [47, 62] { R11588 += 1, R11300 += 1 };
  s2 -> s1 [64, 65535] { R11588 += 1, R11300 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R11589 += 1, R11590 += 1 };
  s0 -> s1 [0, 65535] { R11590 += 1, R11301 += 1, R11302 += 1 };
  s0 -> s2 [0, 65535] { R11590 += 1, R11302 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R11590 += 1, R11301 += 1, R11302 += 1 };
  s1 -> s2 [0, 65535] { R11590 += 1, R11302 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11590 += 1 };
  s2 -> s2 [0, 65535] { R11590 += 1, R11302 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11590 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R11592 += 1, R11304 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R11592 += 1, R11303 += 1, R11304 += 1 };
  s0 -> s0 [0, 65535] { R11591 += 1, R11592 += 1 };
  s0 -> s4 [63, 63] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535] { R11592 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R11592 += 1, R11304 += 1 };
  s2 -> s1 [0, 62] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R11592 += 1, R11304 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535] { R11592 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R11592 += 1, R11304 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R11592 += 1, R11303 += 1, R11304 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R11592 += 1, R11304 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11592 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11592 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11592 += 1, R11304 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11594 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R11594 += 1, R11306 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s3 [0, 65535] { R11594 += 1, R11305 += 1, R11306 += 1 };
  s0 -> s0 [0, 65535] { R11593 += 1, R11594 += 1 };
  s1 -> s1 [0, 65535] { R11594 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R11594 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R11594 += 1, R11306 += 1 };
  s2 -> s1 [0, 65535] { R11594 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R11594 += 1, R11306 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s5 [0, 65535] { R11594 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11594 += 1, R11306 += 1, R5994 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R11594 += 1, R11306 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11594 += 1, R11305 += 1, R11306 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11594 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11594 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11594 += 1, R11306 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R11596 += 1, R11550 += 1 };
  s0 -> s2 [0, 65535] { R11596 += 1, R11549 += 1, R11550 += 1 };
  s0 -> s0 [0, 65535] { R11595 += 1, R11596 += 1 };
  s0 -> s1 [45, 63] { R11596 += 1, R11550 += 1 };
  s0 -> s3 [87, 87] { R11596 += 1, R11550 += 1 };
  s0 -> s1 [88, 65535] { R11596 += 1, R11550 += 1 };
  s1 -> s1 [0, 43] { R11596 += 1, R11550 += 1 };
  s1 -> s1 [45, 63] { R11596 += 1, R11550 += 1 };
  s1 -> s3 [87, 87] { R11596 += 1, R11550 += 1 };
  s1 -> s1 [88, 65535] { R11596 += 1, R11550 += 1 };
  s2 -> s1 [0, 43] { R11596 += 1, R11550 += 1 };
  s2 -> s2 [0, 65535] { R11596 += 1, R11549 += 1, R11550 += 1 };
  s2 -> s1 [45, 63] { R11596 += 1, R11550 += 1 };
  s2 -> s3 [87, 87] { R11596 += 1, R11550 += 1 };
  s2 -> s1 [88, 65535] { R11596 += 1, R11550 += 1 };
  s3 -> s3 [0, 43] { R11596 += 1, R11550 += 1 };
  s3 -> s3 [0, 65535] { R11596 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R11596 += 1, R11550 += 1 };
  s3 -> s3 [87, 65535] { R11596 += 1, R11550 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R11598 += 1, R11552 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R11597 += 1, R11598 += 1 };
  s0 -> s2 [0, 65535] { R11598 += 1, R11551 += 1, R11552 += 1 };
  s1 -> s1 [0, 65535] { R11598 += 1, R11552 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11598 += 1 };
  s2 -> s1 [0, 65535] { R11598 += 1, R11552 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11598 += 1, R11551 += 1, R11552 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11598 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R11600 += 1, R11554 += 1 };
  s0 -> s2 [0, 65535] { R11600 += 1, R11554 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R11600 += 1, R11553 += 1, R11554 += 1 };
  s0 -> s0 [0, 65535] { R11599 += 1, R11600 += 1 };
  s0 -> s4 [58, 58] { R11600 += 1, R11554 += 1 };
  s0 -> s1 [59, 65535] { R11600 += 1, R11554 += 1 };
  s1 -> s1 [0, 57] { R11600 += 1, R11554 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11600 += 1 };
  s1 -> s4 [58, 58] { R11600 += 1, R11554 += 1 };
  s1 -> s1 [59, 65535] { R11600 += 1, R11554 += 1 };
  s2 -> s1 [0, 57] { R11600 += 1, R11554 += 1 };
  s2 -> s2 [0, 65535] { R11600 += 1, R11554 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11600 += 1 };
  s2 -> s4 [58, 58] { R11600 += 1, R11554 += 1 };
  s2 -> s1 [59, 65535] { R11600 += 1, R11554 += 1 };
  s3 -> s1 [0, 57] { R11600 += 1, R11554 += 1 };
  s3 -> s2 [0, 65535] { R11600 += 1, R11554 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11600 += 1, R11553 += 1, R11554 += 1 };
  s3 -> s4 [58, 58] { R11600 += 1, R11554 += 1 };
  s3 -> s1 [59, 65535] { R11600 += 1, R11554 += 1 };
  s4 -> s4 [0, 65535] { R11600 += 1, R11554 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11600 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R11602 += 1, R11556 += 1 };
  s0 -> s2 [0, 65535] { R11602 += 1, R11556 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R11601 += 1, R11602 += 1 };
  s0 -> s3 [0, 65535] { R11602 += 1, R11555 += 1, R11556 += 1 };
  s0 -> s4 [87, 87] { R11602 += 1, R11556 += 1 };
  s0 -> s1 [88, 65535] { R11602 += 1, R11556 += 1 };
  s1 -> s1 [0, 86] { R11602 += 1, R11556 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11602 += 1 };
  s1 -> s4 [87, 87] { R11602 += 1, R11556 += 1 };
  s1 -> s1 [88, 65535] { R11602 += 1, R11556 += 1 };
  s2 -> s1 [0, 86] { R11602 += 1, R11556 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11602 += 1, R11556 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R11602 += 1 };
  s2 -> s4 [87, 87] { R11602 += 1, R11556 += 1 };
  s2 -> s1 [88, 65535] { R11602 += 1, R11556 += 1 };
  s3 -> s1 [0, 86] { R11602 += 1, R11556 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R11602 += 1, R11556 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R11602 += 1, R11555 += 1, R11556 += 1 };
  s3 -> s4 [87, 87] { R11602 += 1, R11556 += 1 };
  s3 -> s1 [88, 65535] { R11602 += 1, R11556 += 1 };
  s4 -> s4 [0, 65535] { R11602 += 1, R11556 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11602 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R11604 += 1, R11557 += 1, R11558 += 1 };
  s0 -> s3 [0, 65535] { R11604 += 1, R11558 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R11603 += 1, R11604 += 1 };
  s0 -> s4 [91, 91] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535] { R11604 += 1 };
  s1 -> s1 [0, 65535] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R11604 += 1, R11558 += 1 };
  s2 -> s1 [0, 90] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11604 += 1, R11557 += 1, R11558 += 1 };
  s2 -> s3 [0, 65535] { R11604 += 1, R11558 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R11604 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11604 += 1, R11558 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s4 [91, 91] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R11604 += 1, R11558 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R11604 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R11604 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11604 += 1, R11558 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R11606 += 1, R11559 += 1, R11560 += 1 };
  s0 -> s2 [0, 65535] { R11606 += 1, R11560 += 1, R5998 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R11605 += 1, R11606 += 1 };
  s0 -> s3 [0, 65535] { R11606 += 1, R11560 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s1 [0, 65535] { R11606 += 1, R11559 += 1, R11560 += 1 };
  s1 -> s2 [0, 65535] { R11606 += 1, R11560 += 1, R5998 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R11606 += 1, R11560 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11606 += 1, R11560 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R11606 += 1, R11560 += 1 };
  s2 -> s4 [0, 65535] { R11606 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R11606 += 1, R11560 += 1, R5998 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R11606 += 1 };
  s3 -> s3 [0, 65535] { R11606 += 1, R11560 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11606 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11606 += 1, R11560 += 1 };
  s6 -> s4 [0, 65535] { R11606 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R11608 += 1, R11562 += 1, R11528 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R11608 += 1, R11562 += 1, R11527 += 1, R11528 += 1 };
  s0 -> s3 [0, 65535] { R11608 += 1, R11561 += 1, R11562 += 1 };
  s0 -> s0 [0, 65535] { R11607 += 1, R11608 += 1 };
  s1 -> s1 [0, 65535] { R11608 += 1, R11562 += 1, R11528 += 1, R5990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11608 += 1 };
  s1 -> s6 [0, 65535] { R11608 += 1, R11562 += 1 };
  s2 -> s1 [0, 65535] { R11608 += 1, R11562 += 1, R11528 += 1, R5990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11608 += 1, R11562 += 1, R11527 += 1, R11528 += 1 };
  s2 -> s5 [0, 65535] { R11608 += 1 };
  s3 -> s1 [0, 65535] { R11608 += 1, R11562 += 1, R11528 += 1, R5990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11608 += 1, R11562 += 1, R11527 += 1, R11528 += 1 };
  s3 -> s3 [0, 65535] { R11608 += 1, R11561 += 1, R11562 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11608 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11608 += 1 };
  s6 -> s6 [0, 65535] { R11608 += 1, R11562 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R11610 += 1, R11563 += 1, R11564 += 1 };
  s0 -> s2 [0, 65535] { R11610 += 1, R11564 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s0 [0, 65535] { R11609 += 1, R11610 += 1 };
  s0 -> s3 [108, 108] { R11610 += 1, R11564 += 1, R11530 += 1 };
  s1 -> s1 [0, 65535] { R11610 += 1, R11563 += 1, R11564 += 1 };
  s1 -> s2 [0, 65535] { R11610 += 1, R11564 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s3 [108, 108] { R11610 += 1, R11564 += 1, R11530 += 1 };
  s2 -> s2 [0, 65535] { R11610 += 1, R11564 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s3 [108, 108] { R11610 += 1, R11564 += 1, R11530 += 1 };
  s3 -> s4 [111, 111] { R11610 += 1, R11564 += 1, R11530 += 1 };
  s4 -> s5 [99, 99] { R11610 += 1, R11564 += 1, R11530 += 1 };
  s5 -> s6 [97, 97] { R11610 += 1, R11564 += 1, R11530 += 1 };
  s6 -> s7 [108, 108] { R11610 += 1, R11564 += 1, R11530 += 1 };
  s7 -> s8 [104, 104] { R11610 += 1, R11564 += 1, R11530 += 1 };
  s8 -> s9 [111, 111] { R11610 += 1, R11564 += 1, R11530 += 1 };
  s9 -> s9 [0, 65535] { R11610 += 1, R11564 += 1 };
  s9 -> s10 [0, 65535] { R11610 += 1 };
  s9 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R11610 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s9, s10, s11;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s0 -> s2 [0, 65535] { R11612 += 1, R11565 += 1, R11566 += 1 };
  s0 -> s3 [0, 65535] { R11612 += 1, R11566 += 1, R11533 += 1, R11534 += 1 };
  s0 -> s0 [0, 65535] { R11611 += 1, R11612 += 1 };
  s0 -> s4 [87, 87] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s0 -> s1 [88, 65535] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s1 -> s1 [0, 86] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s1 -> s4 [87, 87] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s1 -> s1 [88, 65535] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s2 -> s1 [0, 86] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s2 -> s2 [0, 65535] { R11612 += 1, R11565 += 1, R11566 += 1 };
  s2 -> s3 [0, 65535] { R11612 += 1, R11566 += 1, R11533 += 1, R11534 += 1 };
  s2 -> s4 [87, 87] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s2 -> s1 [88, 65535] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s3 -> s1 [0, 86] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s3 -> s3 [0, 65535] { R11612 += 1, R11566 += 1, R11533 += 1, R11534 += 1 };
  s3 -> s4 [87, 87] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s3 -> s1 [88, 65535] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s4 -> s5 [0, 65535] { R11612 += 1, R11566 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11612 += 1 };
  s4 -> s4 [0, 65535] { R11612 += 1, R11566 += 1, R11534 += 1 };
  s5 -> s5 [0, 65535] { R11612 += 1, R11566 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R11612 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11612 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11614 += 1, R11568 += 1, R11536 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R11614 += 1, R11568 += 1, R11535 += 1, R11536 += 1 };
  s0 -> s0 [0, 65535] { R11613 += 1, R11614 += 1 };
  s0 -> s3 [0, 65535] { R11614 += 1, R11567 += 1, R11568 += 1 };
  s1 -> s1 [0, 65535] { R11614 += 1, R11568 += 1, R11536 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R11614 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R11614 += 1, R11568 += 1 };
  s2 -> s1 [0, 65535] { R11614 += 1, R11568 += 1, R11536 += 1, R1 += 1 };
  s2 -> s5 [0, 65535] { R11614 += 1 };
  s2 -> s2 [0, 65535] { R11614 += 1, R11568 += 1, R11535 += 1, R11536 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11614 += 1, R11568 += 1, R11536 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R11614 += 1, R11568 += 1, R11535 += 1, R11536 += 1 };
  s3 -> s3 [0, 65535] { R11614 += 1, R11567 += 1, R11568 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11614 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11614 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11614 += 1, R11568 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s0 -> s0 [0, 65535] { R11615 += 1, R11616 += 1 };
  s0 -> s2 [0, 65535] { R11616 += 1, R11569 += 1, R11570 += 1 };
  s0 -> s3 [0, 65535] { R11616 += 1, R11570 += 1, R11537 += 1, R11538 += 1 };
  s0 -> s4 [0, 65535] { R11616 += 1, R11570 += 1, R11538 += 1, R7 += 1 };
  s0 -> s5 [87, 87] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s0 -> s1 [88, 65535] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s1 -> s1 [0, 86] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11616 += 1, R11570 += 1 };
  s1 -> s8 [0, 65535] { R11616 += 1 };
  s1 -> s5 [87, 87] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s1 -> s1 [88, 65535] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s2 -> s1 [0, 86] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s2 -> s2 [0, 65535] { R11616 += 1, R11569 += 1, R11570 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R11616 += 1, R11570 += 1, R11537 += 1, R11538 += 1 };
  s2 -> s4 [0, 65535] { R11616 += 1, R11570 += 1, R11538 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s2 -> s1 [88, 65535] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s3 -> s1 [0, 86] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11616 += 1, R11570 += 1, R11537 += 1, R11538 += 1 };
  s3 -> s8 [0, 65535] { R11616 += 1 };
  s3 -> s4 [0, 65535] { R11616 += 1, R11570 += 1, R11538 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s3 -> s1 [88, 65535] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s4 -> s1 [0, 86] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11616 += 1, R11570 += 1 };
  s4 -> s8 [0, 65535] { R11616 += 1 };
  s4 -> s4 [0, 65535] { R11616 += 1, R11570 += 1, R11538 += 1, R7 += 1 };
  s4 -> s5 [87, 87] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s4 -> s1 [88, 65535] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s5 -> s5 [0, 65535] { R11616 += 1, R11570 += 1, R11538 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11616 += 1, R11570 += 1 };
  s7 -> s8 [0, 65535] { R11616 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11616 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s0 -> s2 [0, 65535] { R11618 += 1, R11572 += 1, R11539 += 1, R11540 += 1 };
  s0 -> s3 [0, 65535] { R11618 += 1, R11571 += 1, R11572 += 1 };
  s0 -> s0 [0, 65535] { R11617 += 1, R11618 += 1 };
  s0 -> s4 [0, 65535] { R11618 += 1, R11572 += 1, R11540 += 1, R11521 += 1, R11522 += 1 };
  s0 -> s1 [88, 65535] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s1 -> s1 [0, 86] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s1 -> s5 [0, 65535] { R11618 += 1 };
  s1 -> s6 [0, 65535] { R11618 += 1, R11572 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R11618 += 1, R11572 += 1, R11540 += 1 };
  s1 -> s1 [88, 65535] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s2 -> s1 [0, 86] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s2 -> s2 [0, 65535] { R11618 += 1, R11572 += 1, R11539 += 1, R11540 += 1 };
  s2 -> s5 [0, 65535] { R11618 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R11618 += 1, R11572 += 1, R11540 += 1, R11521 += 1, R11522 += 1 };
  s2 -> s1 [88, 65535] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s3 -> s1 [0, 86] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s3 -> s2 [0, 65535] { R11618 += 1, R11572 += 1, R11539 += 1, R11540 += 1 };
  s3 -> s3 [0, 65535] { R11618 += 1, R11571 += 1, R11572 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R11618 += 1, R11572 += 1, R11540 += 1, R11521 += 1, R11522 += 1 };
  s3 -> s1 [88, 65535] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s4 -> s1 [0, 86] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s4 -> s5 [0, 65535] { R11618 += 1 };
  s4 -> s6 [0, 65535] { R11618 += 1, R11572 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R11618 += 1, R11572 += 1, R11540 += 1, R11521 += 1, R11522 += 1 };
  s4 -> s1 [88, 65535] { R11618 += 1, R11572 += 1, R11540 += 1, R11522 += 1 };
  s5 -> s5 [0, 65535] { R11618 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R11618 += 1 };
  s6 -> s6 [0, 65535] { R11618 += 1, R11572 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11620 += 1, R11574 += 1, R11541 += 1, R11542 += 1 };
  s0 -> s2 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1, R11524 += 1, R5988 += 1 };
  s0 -> s3 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1, R11523 += 1, R11524 += 1 };
  s0 -> s4 [0, 65535] { R11620 += 1, R11573 += 1, R11574 += 1 };
  s0 -> s0 [0, 65535] { R11619 += 1, R11620 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R11620 += 1 };
  s1 -> s1 [0, 65535] { R11620 += 1, R11574 += 1, R11541 += 1, R11542 += 1 };
  s1 -> s2 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1, R11524 += 1, R5988 += 1 };
  s1 -> s3 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1, R11523 += 1, R11524 += 1 };
  s2 -> s6 [0, 65535] { R11620 += 1, R11574 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R11620 += 1 };
  s2 -> s2 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1, R11524 += 1, R5988 += 1 };
  s2 -> s8 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1 };
  s3 -> s6 [0, 65535] { R11620 += 1, R11574 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R11620 += 1 };
  s3 -> s2 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1, R11524 += 1, R5988 += 1 };
  s3 -> s3 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1, R11523 += 1, R11524 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R11620 += 1, R11574 += 1, R11541 += 1, R11542 += 1 };
  s4 -> s2 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1, R11524 += 1, R5988 += 1 };
  s4 -> s3 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1, R11523 += 1, R11524 += 1 };
  s4 -> s4 [0, 65535] { R11620 += 1, R11573 += 1, R11574 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11620 += 1, R11574 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s7 [0, 65535] { R11620 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11620 += 1 };
  s8 -> s6 [0, 65535] { R11620 += 1, R11574 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R11620 += 1 };
  s8 -> s8 [0, 65535] { R11620 += 1, R11574 += 1, R11542 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R11622 += 1, R11575 += 1, R11576 += 1 };
  s0 -> s0 [0, 65535] { R11621 += 1, R11622 += 1 };
  s0 -> s2 [0, 65535] { R11622 += 1, R11576 += 1, R11544 += 1, R11525 += 1, R11526 += 1 };
  s0 -> s3 [0, 65535] { R11622 += 1, R11576 += 1, R11543 += 1, R11544 += 1 };
  s0 -> s4 [115, 115] { R11622 += 1, R11576 += 1, R11544 += 1, R11526 += 1 };
  s1 -> s1 [0, 65535] { R11622 += 1, R11575 += 1, R11576 += 1 };
  s1 -> s2 [0, 65535] { R11622 += 1, R11576 += 1, R11544 += 1, R11525 += 1, R11526 += 1 };
  s1 -> s3 [0, 65535] { R11622 += 1, R11576 += 1, R11543 += 1, R11544 += 1 };
  s1 -> s4 [115, 115] { R11622 += 1, R11576 += 1, R11544 += 1, R11526 += 1 };
  s2 -> s2 [0, 65535] { R11622 += 1, R11576 += 1, R11544 += 1, R11525 += 1, R11526 += 1 };
  s2 -> s4 [115, 115] { R11622 += 1, R11576 += 1, R11544 += 1, R11526 += 1 };
  s3 -> s2 [0, 65535] { R11622 += 1, R11576 += 1, R11544 += 1, R11525 += 1, R11526 += 1 };
  s3 -> s3 [0, 65535] { R11622 += 1, R11576 += 1, R11543 += 1, R11544 += 1 };
  s3 -> s4 [115, 115] { R11622 += 1, R11576 += 1, R11544 += 1, R11526 += 1 };
  s4 -> s5 [116, 116] { R11622 += 1, R11576 += 1, R11544 += 1, R11526 += 1 };
  s5 -> s6 [0, 65535] { R11622 += 1 };
  s5 -> s5 [0, 65535] { R11622 += 1, R11576 += 1, R11544 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R11622 += 1, R11576 += 1 };
  s6 -> s6 [0, 65535] { R11622 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R11622 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R11622 += 1, R11576 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11624 += 1, R11578 += 1, R11545 += 1, R11546 += 1 };
  s0 -> s2 [0, 65535] { R11624 += 1, R11577 += 1, R11578 += 1 };
  s0 -> s3 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1, R11531 += 1, R11532 += 1 };
  s0 -> s0 [0, 65535] { R11623 += 1, R11624 += 1 };
  s0 -> s4 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1, R11532 += 1, R5989 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R11624 += 1 };
  s1 -> s1 [0, 65535] { R11624 += 1, R11578 += 1, R11545 += 1, R11546 += 1 };
  s1 -> s3 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1, R11531 += 1, R11532 += 1 };
  s1 -> s4 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1, R11532 += 1, R5989 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R11624 += 1, R11578 += 1, R11545 += 1, R11546 += 1 };
  s2 -> s2 [0, 65535] { R11624 += 1, R11577 += 1, R11578 += 1 };
  s2 -> s3 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1, R11531 += 1, R11532 += 1 };
  s2 -> s4 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1, R11532 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R11624 += 1 };
  s3 -> s3 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1, R11531 += 1, R11532 += 1 };
  s3 -> s8 [0, 65535] { R11624 += 1, R11578 += 1 };
  s3 -> s4 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1, R11532 += 1, R5989 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1 };
  s4 -> s7 [0, 65535] { R11624 += 1 };
  s4 -> s8 [0, 65535] { R11624 += 1, R11578 += 1 };
  s4 -> s4 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1, R11532 += 1, R5989 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11624 += 1, R11578 += 1, R11546 += 1 };
  s6 -> s7 [0, 65535] { R11624 += 1 };
  s6 -> s8 [0, 65535] { R11624 += 1, R11578 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11624 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R11624 += 1 };
  s8 -> s8 [0, 65535] { R11624 += 1, R11578 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R11626 += 1, R11579 += 1, R11580 += 1 };
  s0 -> s2 [0, 65535] { R11626 += 1, R11580 += 1, R11547 += 1, R11548 += 1 };
  s0 -> s0 [0, 65535] { R11625 += 1, R11626 += 1 };
  s0 -> s3 [0, 65535] { R11626 += 1, R11580 += 1, R11548 += 1 };
  s1 -> s1 [0, 65535] { R11626 += 1, R11579 += 1, R11580 += 1 };
  s1 -> s2 [0, 65535] { R11626 += 1, R11580 += 1, R11547 += 1, R11548 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R11626 += 1, R11580 += 1, R11548 += 1 };
  s2 -> s2 [0, 65535] { R11626 += 1, R11580 += 1, R11547 += 1, R11548 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R11626 += 1, R11580 += 1, R11548 += 1 };
  s2 -> s6 [0, 65535] { R11626 += 1 };
  s3 -> s4 [0, 65535] { R11626 += 1, R11580 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11626 += 1, R11580 += 1, R11548 += 1 };
  s3 -> s6 [0, 65535] { R11626 += 1 };
  s4 -> s4 [0, 65535] { R11626 += 1, R11580 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11626 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11626 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R11526 && R2 = R11548 && R3 = R11306 && R4 = R11626 && R15 = 0 && R16 = R11580 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R11299 - R11580 = 1 && R11300 = R11306 && R11301 - R11580 = 1 && R11302 = R11306 && R11303 - R11580 = 1 && R11304 = R11306 && R11305 - R11580 = 1 && R11525 = 0 && R11529 = 0 && R11530 = 0 && R11533 = 0 && R11534 = R11548 && R11535 = 0 && R11536 = R11548 && R11537 = 0 && R11538 = R11548 && R11539 = 0 && R11540 = R11548 && R11541 = 0 && R11542 = R11548 && R11543 = 0 && R11544 = R11548 && R11545 = 0 && R11546 = R11548 && R11547 = 0 && R11549 = 0 && R11550 = R11580 && R11551 = 0 && R11552 = R11580 && R11553 = 0 && R11554 = R11580 && R11555 = 0 && R11556 = R11580 && R11557 = 0 && R11558 = R11580 && R11559 = 0 && R11560 = R11580 && R11561 = 0 && R11562 = R11580 && R11563 = 0 && R11564 = R11580 && R11565 = 0 && R11566 = R11580 && R11567 = 0 && R11568 = R11580 && R11569 = 0 && R11570 = R11580 && R11571 = 0 && R11572 = R11580 && R11573 = 0 && R11574 = R11580 && R11575 = 0 && R11576 = R11580 && R11577 = 0 && R11578 = R11580 && R11579 = 0 && R11581 = 10 && R11582 = R11626 && R11583 = 10 && R11584 = R11626 && R11585 = 10 && R11586 = R11626 && R11587 = 10 && R11588 = R11626 && R11589 = 10 && R11590 = R11626 && R11591 = 10 && R11592 = R11626 && R11593 = 10 && R11594 = R11626 && R11595 = 10 && R11596 = R11626 && R11597 = 10 && R11598 = R11626 && R11599 = 10 && R11600 = R11626 && R11601 = 10 && R11602 = R11626 && R11603 = 10 && R11604 = R11626 && R11605 = 10 && R11606 = R11626 && R11607 = 10 && R11608 = R11626 && R11609 = 10 && R11610 = R11626 && R11611 = 10 && R11612 = R11626 && R11613 = 10 && R11614 = R11626 && R11615 = 10 && R11616 = R11626 && R11617 = 10 && R11618 = R11626 && R11619 = 10 && R11620 = R11626 && R11621 = 10 && R11622 = R11626 && R11623 = 10 && R11624 = R11626 && R11625 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R11580 < R11306 && -1 < R11526 && 0 < R11548 && -1 < R11580 && 9 < R11626 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R11521 != 0 || R11522 = R11526 || (R5988 = 0 && R11526 = 0)) && (R11523 != 0 || R11524 = R11526 || (R5988 = 0 && R11526 = 0)) && (R5989 = 0 || (R11531 = 0 && R11532 = 0)) && (R5990 = 0 || (R11527 = 0 && R11528 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R11521 = 0 || (R5988 = 0 && R11526 = 0)) && (R11523 = 0 || (R5988 = 0 && R11526 = 0));
// End of Parikh automata intersection problem
