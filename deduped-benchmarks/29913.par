// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R2, R208, R209, R3, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R369 += 1 };
  s0 -> s0 [0, 65535] { R368 += 1, R369 += 1 };
  s0 -> s2 [46, 46] { R369 += 1 };
  s0 -> s3 [47, 47] { R369 += 1 };
  s0 -> s1 [48, 65535] { R369 += 1 };
  s1 -> s1 [0, 45] { R369 += 1 };
  s1 -> s2 [46, 46] { R369 += 1 };
  s1 -> s3 [47, 47] { R369 += 1 };
  s1 -> s1 [48, 65535] { R369 += 1 };
  s2 -> s1 [0, 45] { R369 += 1 };
  s2 -> s2 [46, 46] { R369 += 1 };
  s2 -> s3 [47, 47] { R369 += 1 };
  s2 -> s1 [48, 114] { R369 += 1 };
  s2 -> s8 [115, 115] { R369 += 1 };
  s2 -> s1 [116, 65535] { R369 += 1 };
  s3 -> s3 [0, 45] { R369 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R369 += 1 };
  s3 -> s3 [47, 65535] { R369 += 1 };
  s4 -> s3 [0, 45] { R369 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R369 += 1 };
  s4 -> s3 [47, 114] { R369 += 1 };
  s4 -> s5 [115, 115] { R369 += 1 };
  s4 -> s3 [116, 65535] { R369 += 1 };
  s5 -> s3 [0, 45] { R369 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R369 += 1 };
  s5 -> s3 [47, 110] { R369 += 1 };
  s5 -> s6 [111, 111] { R369 += 1 };
  s5 -> s3 [112, 65535] { R369 += 1 };
  s6 -> s3 [0, 45] { R369 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R369 += 1 };
  s6 -> s3 [47, 98] { R369 += 1 };
  s6 -> s7 [99, 99] { R369 += 1 };
  s6 -> s3 [100, 65535] { R369 += 1 };
  s7 -> s3 [0, 45] { R369 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R369 += 1 };
  s7 -> s3 [47, 106] { R369 += 1 };
  s7 -> s3 [108, 65535] { R369 += 1 };
  s8 -> s1 [0, 45] { R369 += 1 };
  s8 -> s2 [46, 46] { R369 += 1 };
  s8 -> s3 [47, 47] { R369 += 1 };
  s8 -> s1 [48, 110] { R369 += 1 };
  s8 -> s9 [111, 111] { R369 += 1 };
  s8 -> s1 [112, 65535] { R369 += 1 };
  s9 -> s1 [0, 45] { R369 += 1 };
  s9 -> s2 [46, 46] { R369 += 1 };
  s9 -> s3 [47, 47] { R369 += 1 };
  s9 -> s1 [48, 98] { R369 += 1 };
  s9 -> s10 [99, 99] { R369 += 1 };
  s9 -> s1 [100, 65535] { R369 += 1 };
  s10 -> s1 [0, 45] { R369 += 1 };
  s10 -> s2 [46, 46] { R369 += 1 };
  s10 -> s3 [47, 47] { R369 += 1 };
  s10 -> s1 [48, 106] { R369 += 1 };
  s10 -> s1 [108, 65535] { R369 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R370 += 1, R371 += 1 };
  s0 -> s1 [0, 65535] { R371 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R371 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R373 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R372 += 1, R373 += 1 };
  s0 -> s2 [0, 65535] { R373 += 1, R208 += 1, R209 += 1 };
  s0 -> s3 [47, 47] { R373 += 1 };
  s0 -> s1 [48, 65535] { R373 += 1, R209 += 1 };
  s1 -> s1 [0, 46] { R373 += 1, R209 += 1 };
  s1 -> s3 [47, 47] { R373 += 1 };
  s1 -> s1 [48, 65535] { R373 += 1, R209 += 1 };
  s2 -> s1 [0, 46] { R373 += 1, R209 += 1 };
  s2 -> s2 [0, 65535] { R373 += 1, R208 += 1, R209 += 1 };
  s2 -> s3 [47, 47] { R373 += 1 };
  s2 -> s1 [48, 65535] { R373 += 1, R209 += 1 };
  s3 -> s3 [0, 65535] { R373 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R375 += 1, R318 += 1, R319 += 1 };
  s0 -> s2 [0, 65535] { R375 += 1, R319 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R374 += 1, R375 += 1 };
  s1 -> s1 [0, 65535] { R375 += 1, R318 += 1, R319 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R375 += 1, R319 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R375 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R375 += 1, R319 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R375 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R377 += 1, R343 += 1 };
  s0 -> s0 [0, 65535] { R376 += 1, R377 += 1 };
  s0 -> s2 [0, 65535] { R377 += 1, R342 += 1, R343 += 1 };
  s0 -> s3 [64, 64] { R377 += 1, R343 += 1 };
  s0 -> s1 [65, 65535] { R377 += 1, R343 += 1 };
  s1 -> s1 [0, 63] { R377 += 1, R343 += 1 };
  s1 -> s3 [64, 64] { R377 += 1, R343 += 1 };
  s1 -> s1 [65, 65535] { R377 += 1, R343 += 1 };
  s2 -> s1 [0, 63] { R377 += 1, R343 += 1 };
  s2 -> s2 [0, 65535] { R377 += 1, R342 += 1, R343 += 1 };
  s2 -> s3 [64, 64] { R377 += 1, R343 += 1 };
  s2 -> s1 [65, 65535] { R377 += 1, R343 += 1 };
  s3 -> s4 [0, 65535] { R377 += 1 };
  s3 -> s3 [0, 65535] { R377 += 1, R343 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R377 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R379 += 1, R345 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R378 += 1, R379 += 1 };
  s0 -> s2 [0, 65535] { R379 += 1, R344 += 1, R345 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R379 += 1, R345 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R379 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R379 += 1, R345 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R379 += 1, R344 += 1, R345 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R379 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 43] { R381 += 1, R347 += 1, R321 += 1 };
  s0 -> s2 [0, 65535] { R381 += 1, R346 += 1, R347 += 1 };
  s0 -> s3 [0, 65535] { R381 += 1, R347 += 1, R320 += 1, R321 += 1 };
  s0 -> s0 [0, 65535] { R380 += 1, R381 += 1 };
  s0 -> s1 [45, 65535] { R381 += 1, R347 += 1, R321 += 1 };
  s1 -> s1 [0, 43] { R381 += 1, R347 += 1, R321 += 1 };
  s1 -> s1 [0, 65535] { R381 += 1, R347 += 1 };
  s1 -> s4 [0, 65535] { R381 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [45, 65535] { R381 += 1, R347 += 1, R321 += 1 };
  s2 -> s1 [0, 43] { R381 += 1, R347 += 1, R321 += 1 };
  s2 -> s2 [0, 65535] { R381 += 1, R346 += 1, R347 += 1 };
  s2 -> s3 [0, 65535] { R381 += 1, R347 += 1, R320 += 1, R321 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [45, 65535] { R381 += 1, R347 += 1, R321 += 1 };
  s3 -> s1 [0, 43] { R381 += 1, R347 += 1, R321 += 1 };
  s3 -> s3 [0, 65535] { R381 += 1, R347 += 1, R320 += 1, R321 += 1 };
  s3 -> s4 [0, 65535] { R381 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [45, 65535] { R381 += 1, R347 += 1, R321 += 1 };
  s4 -> s4 [0, 65535] { R381 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R383 += 1, R349 += 1, R323 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R383 += 1, R349 += 1, R322 += 1, R323 += 1 };
  s0 -> s3 [0, 65535] { R383 += 1, R348 += 1, R349 += 1 };
  s0 -> s0 [0, 65535] { R382 += 1, R383 += 1 };
  s1 -> s6 [0, 65535] { R383 += 1, R349 += 1 };
  s1 -> s5 [0, 65535] { R383 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R383 += 1, R349 += 1, R323 += 1, R0 += 1 };
  s2 -> s5 [0, 65535] { R383 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R383 += 1, R349 += 1, R323 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R383 += 1, R349 += 1, R322 += 1, R323 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R383 += 1, R349 += 1, R323 += 1, R0 += 1 };
  s3 -> s2 [0, 65535] { R383 += 1, R349 += 1, R322 += 1, R323 += 1 };
  s3 -> s3 [0, 65535] { R383 += 1, R348 += 1, R349 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R383 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R383 += 1, R349 += 1 };
  s6 -> s5 [0, 65535] { R383 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R385 += 1, R350 += 1, R351 += 1 };
  s0 -> s0 [0, 65535] { R384 += 1, R385 += 1 };
  s0 -> s2 [0, 65535] { R385 += 1, R351 += 1, R324 += 1, R325 += 1 };
  s0 -> s3 [0, 65535] { R385 += 1, R351 += 1, R325 += 1, R306 += 1, R307 += 1 };
  s0 -> s4 [91, 91] { R385 += 1, R351 += 1, R325 += 1, R307 += 1 };
  s1 -> s1 [0, 65535] { R385 += 1, R350 += 1, R351 += 1 };
  s1 -> s2 [0, 65535] { R385 += 1, R351 += 1, R324 += 1, R325 += 1 };
  s1 -> s3 [0, 65535] { R385 += 1, R351 += 1, R325 += 1, R306 += 1, R307 += 1 };
  s1 -> s4 [91, 91] { R385 += 1, R351 += 1, R325 += 1, R307 += 1 };
  s2 -> s2 [0, 65535] { R385 += 1, R351 += 1, R324 += 1, R325 += 1 };
  s2 -> s3 [0, 65535] { R385 += 1, R351 += 1, R325 += 1, R306 += 1, R307 += 1 };
  s2 -> s4 [91, 91] { R385 += 1, R351 += 1, R325 += 1, R307 += 1 };
  s3 -> s3 [0, 65535] { R385 += 1, R351 += 1, R325 += 1, R306 += 1, R307 += 1 };
  s3 -> s4 [91, 91] { R385 += 1, R351 += 1, R325 += 1, R307 += 1 };
  s4 -> s5 [0, 65535] { R385 += 1, R351 += 1 };
  s4 -> s4 [0, 65535] { R385 += 1, R351 += 1, R325 += 1 };
  s4 -> s6 [0, 65535] { R385 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R385 += 1, R351 += 1 };
  s5 -> s6 [0, 65535] { R385 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R385 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R387 += 1, R352 += 1, R353 += 1 };
  s0 -> s2 [0, 65535] { R387 += 1, R353 += 1, R327 += 1, R309 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R387 += 1, R353 += 1, R327 += 1, R308 += 1, R309 += 1 };
  s0 -> s4 [0, 65535] { R387 += 1, R353 += 1, R326 += 1, R327 += 1 };
  s0 -> s0 [0, 65535] { R386 += 1, R387 += 1 };
  s1 -> s1 [0, 65535] { R387 += 1, R352 += 1, R353 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R387 += 1, R353 += 1, R327 += 1, R309 += 1, R8 += 1 };
  s1 -> s3 [0, 65535] { R387 += 1, R353 += 1, R327 += 1, R308 += 1, R309 += 1 };
  s1 -> s4 [0, 65535] { R387 += 1, R353 += 1, R326 += 1, R327 += 1 };
  s2 -> s5 [0, 65535] { R387 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R387 += 1, R353 += 1, R327 += 1, R309 += 1, R8 += 1 };
  s2 -> s7 [0, 65535] { R387 += 1, R353 += 1 };
  s2 -> s8 [0, 65535] { R387 += 1, R353 += 1, R327 += 1 };
  s3 -> s5 [0, 65535] { R387 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R387 += 1, R353 += 1, R327 += 1, R309 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R387 += 1, R353 += 1, R327 += 1, R308 += 1, R309 += 1 };
  s3 -> s7 [0, 65535] { R387 += 1, R353 += 1 };
  s4 -> s5 [0, 65535] { R387 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R387 += 1, R353 += 1, R327 += 1, R309 += 1, R8 += 1 };
  s4 -> s3 [0, 65535] { R387 += 1, R353 += 1, R327 += 1, R308 += 1, R309 += 1 };
  s4 -> s4 [0, 65535] { R387 += 1, R353 += 1, R326 += 1, R327 += 1 };
  s5 -> s5 [0, 65535] { R387 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R387 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R387 += 1, R353 += 1 };
  s8 -> s5 [0, 65535] { R387 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R387 += 1, R353 += 1 };
  s8 -> s8 [0, 65535] { R387 += 1, R353 += 1, R327 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 57] { R389 += 1, R355 += 1, R329 += 1 };
  s0 -> s0 [0, 65535] { R388 += 1, R389 += 1 };
  s0 -> s2 [0, 65535] { R389 += 1, R355 += 1, R328 += 1, R329 += 1 };
  s0 -> s3 [0, 65535] { R389 += 1, R354 += 1, R355 += 1 };
  s0 -> s4 [58, 58] { R389 += 1, R355 += 1, R329 += 1 };
  s0 -> s1 [59, 63] { R389 += 1, R355 += 1, R329 += 1 };
  s0 -> s1 [65, 65535] { R389 += 1, R355 += 1, R329 += 1 };
  s1 -> s1 [0, 57] { R389 += 1, R355 += 1, R329 += 1 };
  s1 -> s4 [58, 58] { R389 += 1, R355 += 1, R329 += 1 };
  s1 -> s1 [59, 63] { R389 += 1, R355 += 1, R329 += 1 };
  s1 -> s1 [65, 65535] { R389 += 1, R355 += 1, R329 += 1 };
  s2 -> s1 [0, 57] { R389 += 1, R355 += 1, R329 += 1 };
  s2 -> s2 [0, 65535] { R389 += 1, R355 += 1, R328 += 1, R329 += 1 };
  s2 -> s4 [58, 58] { R389 += 1, R355 += 1, R329 += 1 };
  s2 -> s1 [59, 63] { R389 += 1, R355 += 1, R329 += 1 };
  s2 -> s1 [65, 65535] { R389 += 1, R355 += 1, R329 += 1 };
  s3 -> s1 [0, 57] { R389 += 1, R355 += 1, R329 += 1 };
  s3 -> s2 [0, 65535] { R389 += 1, R355 += 1, R328 += 1, R329 += 1 };
  s3 -> s3 [0, 65535] { R389 += 1, R354 += 1, R355 += 1 };
  s3 -> s4 [58, 58] { R389 += 1, R355 += 1, R329 += 1 };
  s3 -> s1 [59, 63] { R389 += 1, R355 += 1, R329 += 1 };
  s3 -> s1 [65, 65535] { R389 += 1, R355 += 1, R329 += 1 };
  s4 -> s4 [0, 63] { R389 += 1, R355 += 1, R329 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R389 += 1 };
  s4 -> s4 [0, 65535] { R389 += 1, R355 += 1 };
  s4 -> s4 [65, 65535] { R389 += 1, R355 += 1, R329 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R389 += 1 };
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R391 += 1, R356 += 1, R357 += 1 };
  s0 -> s2 [0, 65535] { R391 += 1, R357 += 1, R330 += 1, R331 += 1 };
  s0 -> s3 [0, 65535] { R391 += 1, R357 += 1, R331 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R390 += 1, R391 += 1 };
  s1 -> s1 [0, 65535] { R391 += 1, R356 += 1, R357 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R391 += 1, R357 += 1, R330 += 1, R331 += 1 };
  s1 -> s3 [0, 65535] { R391 += 1, R357 += 1, R331 += 1, R4 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R391 += 1, R357 += 1, R330 += 1, R331 += 1 };
  s2 -> s3 [0, 65535] { R391 += 1, R357 += 1, R331 += 1, R4 += 1 };
  s2 -> s6 [0, 65535] { R391 += 1 };
  s3 -> s4 [0, 65535] { R391 += 1, R357 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R391 += 1, R357 += 1, R331 += 1, R4 += 1 };
  s3 -> s6 [0, 65535] { R391 += 1 };
  s4 -> s4 [0, 65535] { R391 += 1, R357 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R391 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R391 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 57] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R392 += 1, R393 += 1 };
  s0 -> s2 [0, 65535] { R393 += 1, R358 += 1, R359 += 1 };
  s0 -> s3 [0, 65535] { R393 += 1, R359 += 1, R332 += 1, R333 += 1 };
  s0 -> s4 [0, 65535] { R393 += 1, R359 += 1, R333 += 1, R10 += 1, R11 += 1 };
  s0 -> s5 [58, 58] { R393 += 1, R359 += 1, R333 += 1 };
  s0 -> s1 [59, 65535] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s1 -> s1 [0, 57] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s1 -> s5 [58, 58] { R393 += 1, R359 += 1, R333 += 1 };
  s1 -> s1 [59, 65535] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s2 -> s1 [0, 57] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R393 += 1, R358 += 1, R359 += 1 };
  s2 -> s3 [0, 65535] { R393 += 1, R359 += 1, R332 += 1, R333 += 1 };
  s2 -> s4 [0, 65535] { R393 += 1, R359 += 1, R333 += 1, R10 += 1, R11 += 1 };
  s2 -> s5 [58, 58] { R393 += 1, R359 += 1, R333 += 1 };
  s2 -> s1 [59, 65535] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s3 -> s1 [0, 57] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R393 += 1, R359 += 1, R332 += 1, R333 += 1 };
  s3 -> s4 [0, 65535] { R393 += 1, R359 += 1, R333 += 1, R10 += 1, R11 += 1 };
  s3 -> s5 [58, 58] { R393 += 1, R359 += 1, R333 += 1 };
  s3 -> s1 [59, 65535] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s4 -> s1 [0, 57] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s4 -> s4 [0, 65535] { R393 += 1, R359 += 1, R333 += 1, R10 += 1, R11 += 1 };
  s4 -> s5 [58, 58] { R393 += 1, R359 += 1, R333 += 1 };
  s4 -> s1 [59, 65535] { R393 += 1, R359 += 1, R333 += 1, R11 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R393 += 1, R359 += 1, R333 += 1 };
  s5 -> s7 [0, 65535] { R393 += 1 };
  s5 -> s8 [0, 65535] { R393 += 1, R359 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R393 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R393 += 1 };
  s8 -> s8 [0, 65535] { R393 += 1, R359 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 36] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s0 -> s2 [0, 65535] { R395 += 1, R360 += 1, R361 += 1 };
  s0 -> s3 [0, 65535] { R395 += 1, R361 += 1, R335 += 1, R310 += 1, R311 += 1 };
  s0 -> s4 [0, 65535] { R395 += 1, R361 += 1, R334 += 1, R335 += 1 };
  s0 -> s0 [0, 65535] { R394 += 1, R395 += 1 };
  s0 -> s1 [38, 42] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s0 -> s1 [44, 57] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s0 -> s1 [59, 65535] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s1 -> s1 [0, 36] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s1 -> s7 [0, 65535] { R395 += 1, R361 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R395 += 1, R361 += 1, R335 += 1 };
  s1 -> s6 [0, 65535] { R395 += 1 };
  s1 -> s1 [38, 42] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s1 -> s1 [44, 57] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s1 -> s1 [59, 65535] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s2 -> s1 [0, 36] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s2 -> s2 [0, 65535] { R395 += 1, R360 += 1, R361 += 1 };
  s2 -> s3 [0, 65535] { R395 += 1, R361 += 1, R335 += 1, R310 += 1, R311 += 1 };
  s2 -> s4 [0, 65535] { R395 += 1, R361 += 1, R334 += 1, R335 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [38, 42] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s2 -> s1 [44, 57] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s2 -> s1 [59, 65535] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s3 -> s1 [0, 36] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s3 -> s7 [0, 65535] { R395 += 1, R361 += 1 };
  s3 -> s3 [0, 65535] { R395 += 1, R361 += 1, R335 += 1, R310 += 1, R311 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R395 += 1 };
  s3 -> s1 [38, 42] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s3 -> s1 [44, 57] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s3 -> s1 [59, 65535] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s4 -> s1 [0, 36] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s4 -> s3 [0, 65535] { R395 += 1, R361 += 1, R335 += 1, R310 += 1, R311 += 1 };
  s4 -> s4 [0, 65535] { R395 += 1, R361 += 1, R334 += 1, R335 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R395 += 1 };
  s4 -> s1 [38, 42] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s4 -> s1 [44, 57] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s4 -> s1 [59, 65535] { R395 += 1, R361 += 1, R335 += 1, R311 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R395 += 1 };
  s7 -> s7 [0, 65535] { R395 += 1, R361 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R395 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R397 += 1, R362 += 1, R363 += 1 };
  s0 -> s2 [0, 65535] { R397 += 1, R363 += 1, R337 += 1, R313 += 1, R2 += 1 };
  s0 -> s3 [0, 65535] { R397 += 1, R363 += 1, R336 += 1, R337 += 1 };
  s0 -> s4 [0, 65535] { R397 += 1, R363 += 1, R337 += 1, R312 += 1, R313 += 1 };
  s0 -> s0 [0, 65535] { R396 += 1, R397 += 1 };
  s1 -> s1 [0, 65535] { R397 += 1, R362 += 1, R363 += 1 };
  s1 -> s2 [0, 65535] { R397 += 1, R363 += 1, R337 += 1, R313 += 1, R2 += 1 };
  s1 -> s3 [0, 65535] { R397 += 1, R363 += 1, R336 += 1, R337 += 1 };
  s1 -> s4 [0, 65535] { R397 += 1, R363 += 1, R337 += 1, R312 += 1, R313 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R397 += 1, R363 += 1, R337 += 1, R313 += 1, R2 += 1 };
  s2 -> s5 [0, 65535] { R397 += 1, R363 += 1 };
  s2 -> s6 [0, 65535] { R397 += 1 };
  s2 -> s8 [0, 65535] { R397 += 1, R363 += 1, R337 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s2 [0, 65535] { R397 += 1, R363 += 1, R337 += 1, R313 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R397 += 1, R363 += 1, R336 += 1, R337 += 1 };
  s3 -> s4 [0, 65535] { R397 += 1, R363 += 1, R337 += 1, R312 += 1, R313 += 1 };
  s3 -> s6 [0, 65535] { R397 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s2 [0, 65535] { R397 += 1, R363 += 1, R337 += 1, R313 += 1, R2 += 1 };
  s4 -> s4 [0, 65535] { R397 += 1, R363 += 1, R337 += 1, R312 += 1, R313 += 1 };
  s4 -> s5 [0, 65535] { R397 += 1, R363 += 1 };
  s4 -> s6 [0, 65535] { R397 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R397 += 1, R363 += 1 };
  s5 -> s6 [0, 65535] { R397 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R397 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R397 += 1, R363 += 1 };
  s8 -> s6 [0, 65535] { R397 += 1 };
  s8 -> s8 [0, 65535] { R397 += 1, R363 += 1, R337 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 36] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s0 -> s2 [0, 65535] { R399 += 1, R364 += 1, R365 += 1 };
  s0 -> s0 [0, 65535] { R398 += 1, R399 += 1 };
  s0 -> s3 [0, 65535] { R399 += 1, R365 += 1, R339 += 1, R314 += 1, R315 += 1 };
  s0 -> s4 [0, 65535] { R399 += 1, R365 += 1, R338 += 1, R339 += 1 };
  s0 -> s1 [38, 42] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s0 -> s1 [44, 65535] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s1 -> s1 [0, 36] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s1 -> s7 [0, 65535] { R399 += 1, R365 += 1 };
  s1 -> s1 [0, 65535] { R399 += 1, R365 += 1, R339 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R399 += 1 };
  s1 -> s1 [38, 42] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s1 -> s1 [44, 65535] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s2 -> s1 [0, 36] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s2 -> s2 [0, 65535] { R399 += 1, R364 += 1, R365 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R399 += 1, R365 += 1, R339 += 1, R314 += 1, R315 += 1 };
  s2 -> s4 [0, 65535] { R399 += 1, R365 += 1, R338 += 1, R339 += 1 };
  s2 -> s1 [38, 42] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s2 -> s1 [44, 65535] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s3 -> s1 [0, 36] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s3 -> s7 [0, 65535] { R399 += 1, R365 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R399 += 1 };
  s3 -> s3 [0, 65535] { R399 += 1, R365 += 1, R339 += 1, R314 += 1, R315 += 1 };
  s3 -> s1 [38, 42] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s3 -> s1 [44, 65535] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s4 -> s1 [0, 36] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R399 += 1 };
  s4 -> s3 [0, 65535] { R399 += 1, R365 += 1, R339 += 1, R314 += 1, R315 += 1 };
  s4 -> s4 [0, 65535] { R399 += 1, R365 += 1, R338 += 1, R339 += 1 };
  s4 -> s1 [38, 42] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s4 -> s1 [44, 65535] { R399 += 1, R365 += 1, R339 += 1, R315 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R399 += 1 };
  s7 -> s7 [0, 65535] { R399 += 1, R365 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R399 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R401 += 1, R367 += 1, R341 += 1, R317 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R401 += 1, R367 += 1, R341 += 1, R316 += 1, R317 += 1 };
  s0 -> s0 [0, 65535] { R400 += 1, R401 += 1 };
  s0 -> s3 [0, 65535] { R401 += 1, R367 += 1, R340 += 1, R341 += 1 };
  s0 -> s4 [0, 65535] { R401 += 1, R366 += 1, R367 += 1 };
  s1 -> s1 [0, 65535] { R401 += 1, R367 += 1, R341 += 1, R317 += 1, R1 += 1 };
  s1 -> s8 [0, 65535] { R401 += 1, R367 += 1, R341 += 1 };
  s1 -> s6 [0, 65535] { R401 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R401 += 1, R367 += 1 };
  s2 -> s1 [0, 65535] { R401 += 1, R367 += 1, R341 += 1, R317 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R401 += 1, R367 += 1, R341 += 1, R316 += 1, R317 += 1 };
  s2 -> s6 [0, 65535] { R401 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R401 += 1, R367 += 1 };
  s3 -> s1 [0, 65535] { R401 += 1, R367 += 1, R341 += 1, R317 += 1, R1 += 1 };
  s3 -> s2 [0, 65535] { R401 += 1, R367 += 1, R341 += 1, R316 += 1, R317 += 1 };
  s3 -> s6 [0, 65535] { R401 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R401 += 1, R367 += 1, R340 += 1, R341 += 1 };
  s4 -> s1 [0, 65535] { R401 += 1, R367 += 1, R341 += 1, R317 += 1, R1 += 1 };
  s4 -> s2 [0, 65535] { R401 += 1, R367 += 1, R341 += 1, R316 += 1, R317 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R401 += 1, R367 += 1, R340 += 1, R341 += 1 };
  s4 -> s4 [0, 65535] { R401 += 1, R366 += 1, R367 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R401 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R401 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R401 += 1, R367 += 1 };
  s8 -> s8 [0, 65535] { R401 += 1, R367 += 1, R341 += 1 };
  s8 -> s6 [0, 65535] { R401 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R401 += 1, R367 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R4 = R313 && R5 = R327 && R6 = R319 && R7 = R401 && R10 = 0 && R11 = R317 && R208 = 0 && R209 = R367 && R306 = 0 && R310 - R317 = 1 && R311 = R313 && R312 - R317 = 1 && R314 = 0 && R315 = R317 && R316 = 0 && R318 - R367 = 1 && R320 = 12 && R321 = R327 && R322 = 12 && R323 = R327 && R324 = 12 && R325 = R327 && R326 = 12 && R328 = 0 && R329 = 11 && R330 = 0 && R331 = 11 && R332 = 0 && R333 = 11 && R334 = 0 && R335 = 11 && R336 = 0 && R337 = 11 && R338 = 0 && R339 = 11 && R340 = 0 && R341 = 11 && R342 = 0 && R343 = R367 && R344 = 0 && R345 = R367 && R346 = 0 && R347 = R367 && R348 = 0 && R349 = R367 && R350 = 0 && R351 = R367 && R352 = 0 && R353 = R367 && R354 = 0 && R355 = R367 && R356 = 0 && R357 = R367 && R358 = 0 && R359 = R367 && R360 = 0 && R361 = R367 && R362 = 0 && R363 = R367 && R364 = 0 && R365 = R367 && R366 = 0 && R368 = 10 && R369 = R401 && R370 = 10 && R371 = R401 && R372 = 10 && R373 = R401 && R374 = 10 && R375 = R401 && R376 = 10 && R377 = R401 && R378 = 10 && R379 = R401 && R380 = 10 && R381 = R401 && R382 = 10 && R383 = R401 && R384 = 10 && R385 = R401 && R386 = 10 && R387 = R401 && R388 = 10 && R389 = R401 && R390 = 10 && R391 = R401 && R392 = 10 && R393 = R401 && R394 = 10 && R395 = R401 && R396 = 10 && R397 = R401 && R398 = 10 && R399 = R401 && R400 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R3 != 0 && R317 < R313 && -1 < R317 && R367 < R319 && 11 < R327 && -1 < R367 && 9 < R401 && (R0 != R307 || R307 = 1 || R307 < 0) && (R307 != 1 || -1 < R0) && (R308 != 0 || ((R8 != 0 || ((R0 != R309 || R309 = 1 || R309 < 0) && (R0 = R309 || R309 = 1 || R0 < 1))) && (R8 = 0 || ((R0 != R309 || R309 = 1 || R309 < 0) && (R309 != 1 || -1 < R0) && (R0 = R309 || R309 = 1))))) && (R0 = R307 || R307 = 1) && (R308 = 0 || (R8 = 0 && R0 < 0));
// End of Parikh automata intersection problem
