// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1546, R1547, R2, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2854, R2855, R2856, R2857, R2858, R2859, R2860, R2861, R2862, R2863, R2864, R2865, R2866, R2867, R2868, R2869, R2870, R2871, R2872, R2873, R2874, R2875, R2876, R2877, R2878, R2879, R2880, R2881, R2882, R2883, R2884, R2885, R2886, R2887, R2888, R2889, R2890, R2891, R2892, R2893, R2894, R2895, R2896, R2897, R2898, R2899, R2900, R2901, R2902, R2903, R2904, R2905, R2906, R2907, R2908, R2909, R2910, R2911, R2912, R2913, R2914, R2915, R2916, R2917, R2918, R2919, R2920, R2921, R2922, R2923, R2924, R2925, R2926, R2927, R2928, R2929, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2895 += 1 };
  s0 -> s0 [0, 65535] { R2894 += 1, R2895 += 1 };
  s0 -> s2 [46, 46] { R2895 += 1 };
  s0 -> s3 [47, 47] { R2895 += 1 };
  s0 -> s1 [48, 65535] { R2895 += 1 };
  s1 -> s1 [0, 45] { R2895 += 1 };
  s1 -> s2 [46, 46] { R2895 += 1 };
  s1 -> s3 [47, 47] { R2895 += 1 };
  s1 -> s1 [48, 65535] { R2895 += 1 };
  s2 -> s1 [0, 45] { R2895 += 1 };
  s2 -> s2 [46, 46] { R2895 += 1 };
  s2 -> s3 [47, 47] { R2895 += 1 };
  s2 -> s1 [48, 114] { R2895 += 1 };
  s2 -> s8 [115, 115] { R2895 += 1 };
  s2 -> s1 [116, 65535] { R2895 += 1 };
  s3 -> s3 [0, 45] { R2895 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2895 += 1 };
  s3 -> s3 [47, 65535] { R2895 += 1 };
  s4 -> s3 [0, 45] { R2895 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2895 += 1 };
  s4 -> s3 [47, 114] { R2895 += 1 };
  s4 -> s5 [115, 115] { R2895 += 1 };
  s4 -> s3 [116, 65535] { R2895 += 1 };
  s5 -> s3 [0, 45] { R2895 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2895 += 1 };
  s5 -> s3 [47, 110] { R2895 += 1 };
  s5 -> s6 [111, 111] { R2895 += 1 };
  s5 -> s3 [112, 65535] { R2895 += 1 };
  s6 -> s3 [0, 45] { R2895 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2895 += 1 };
  s6 -> s3 [47, 98] { R2895 += 1 };
  s6 -> s7 [99, 99] { R2895 += 1 };
  s6 -> s3 [100, 65535] { R2895 += 1 };
  s7 -> s3 [0, 45] { R2895 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2895 += 1 };
  s7 -> s3 [47, 106] { R2895 += 1 };
  s7 -> s3 [108, 65535] { R2895 += 1 };
  s8 -> s1 [0, 45] { R2895 += 1 };
  s8 -> s2 [46, 46] { R2895 += 1 };
  s8 -> s3 [47, 47] { R2895 += 1 };
  s8 -> s1 [48, 110] { R2895 += 1 };
  s8 -> s9 [111, 111] { R2895 += 1 };
  s8 -> s1 [112, 65535] { R2895 += 1 };
  s9 -> s1 [0, 45] { R2895 += 1 };
  s9 -> s2 [46, 46] { R2895 += 1 };
  s9 -> s3 [47, 47] { R2895 += 1 };
  s9 -> s1 [48, 98] { R2895 += 1 };
  s9 -> s10 [99, 99] { R2895 += 1 };
  s9 -> s1 [100, 65535] { R2895 += 1 };
  s10 -> s1 [0, 45] { R2895 += 1 };
  s10 -> s2 [46, 46] { R2895 += 1 };
  s10 -> s3 [47, 47] { R2895 += 1 };
  s10 -> s1 [48, 106] { R2895 += 1 };
  s10 -> s1 [108, 65535] { R2895 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2896 += 1, R2897 += 1 };
  s0 -> s1 [0, 65535] { R2897 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R2897 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2899 += 1, R1547 += 1 };
  s0 -> s2 [0, 65535] { R2899 += 1, R1546 += 1, R1547 += 1 };
  s0 -> s0 [0, 65535] { R2898 += 1, R2899 += 1 };
  s0 -> s3 [47, 47] { R2899 += 1 };
  s0 -> s1 [48, 65535] { R2899 += 1, R1547 += 1 };
  s1 -> s1 [0, 46] { R2899 += 1, R1547 += 1 };
  s1 -> s3 [47, 47] { R2899 += 1 };
  s1 -> s1 [48, 65535] { R2899 += 1, R1547 += 1 };
  s2 -> s1 [0, 46] { R2899 += 1, R1547 += 1 };
  s2 -> s2 [0, 65535] { R2899 += 1, R1546 += 1, R1547 += 1 };
  s2 -> s3 [47, 47] { R2899 += 1 };
  s2 -> s1 [48, 65535] { R2899 += 1, R1547 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2899 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R2901 += 1, R2861 += 1 };
  s0 -> s2 [0, 65535] { R2901 += 1, R2860 += 1, R2861 += 1 };
  s0 -> s0 [0, 65535] { R2900 += 1, R2901 += 1 };
  s0 -> s1 [38, 42] { R2901 += 1, R2861 += 1 };
  s0 -> s1 [44, 45] { R2901 += 1, R2861 += 1 };
  s0 -> s1 [47, 62] { R2901 += 1, R2861 += 1 };
  s0 -> s1 [64, 65535] { R2901 += 1, R2861 += 1 };
  s1 -> s1 [0, 36] { R2901 += 1, R2861 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2901 += 1 };
  s1 -> s1 [38, 42] { R2901 += 1, R2861 += 1 };
  s1 -> s1 [44, 45] { R2901 += 1, R2861 += 1 };
  s1 -> s1 [47, 62] { R2901 += 1, R2861 += 1 };
  s1 -> s1 [64, 65535] { R2901 += 1, R2861 += 1 };
  s2 -> s1 [0, 36] { R2901 += 1, R2861 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2901 += 1, R2860 += 1, R2861 += 1 };
  s2 -> s1 [38, 42] { R2901 += 1, R2861 += 1 };
  s2 -> s1 [44, 45] { R2901 += 1, R2861 += 1 };
  s2 -> s1 [47, 62] { R2901 += 1, R2861 += 1 };
  s2 -> s1 [64, 65535] { R2901 += 1, R2861 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R2902 += 1, R2903 += 1 };
  s0 -> s1 [0, 65535] { R2903 += 1, R2863 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R2903 += 1, R2862 += 1, R2863 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2903 += 1 };
  s1 -> s1 [0, 65535] { R2903 += 1, R2863 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2903 += 1, R2863 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R2903 += 1, R2862 += 1, R2863 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2903 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s0 -> s0 [0, 65535] { R2904 += 1, R2905 += 1 };
  s0 -> s2 [0, 65535] { R2905 += 1, R2865 += 1, R2316 += 1, R2317 += 1 };
  s0 -> s3 [0, 65535] { R2905 += 1, R2864 += 1, R2865 += 1 };
  s0 -> s4 [63, 63] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s0 -> s1 [64, 65535] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2905 += 1 };
  s1 -> s7 [0, 65535] { R2905 += 1, R2865 += 1 };
  s1 -> s1 [0, 65535] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s2 -> s1 [0, 62] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2905 += 1 };
  s2 -> s2 [0, 65535] { R2905 += 1, R2865 += 1, R2316 += 1, R2317 += 1 };
  s2 -> s4 [63, 63] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s2 -> s1 [64, 65535] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s3 -> s1 [0, 62] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2905 += 1, R2865 += 1, R2316 += 1, R2317 += 1 };
  s3 -> s3 [0, 65535] { R2905 += 1, R2864 += 1, R2865 += 1 };
  s3 -> s4 [63, 63] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s3 -> s1 [64, 65535] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s4 -> s1 [0, 65535] { R2905 += 1, R2865 += 1, R2317 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2905 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2905 += 1 };
  s7 -> s7 [0, 65535] { R2905 += 1, R2865 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2907 += 1, R2867 += 1, R2319 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R2906 += 1, R2907 += 1 };
  s0 -> s2 [0, 65535] { R2907 += 1, R2866 += 1, R2867 += 1 };
  s0 -> s3 [0, 65535] { R2907 += 1, R2867 += 1, R2318 += 1, R2319 += 1 };
  s1 -> s6 [0, 65535] { R2907 += 1, R2867 += 1 };
  s1 -> s4 [0, 65535] { R2907 += 1 };
  s1 -> s1 [0, 65535] { R2907 += 1, R2867 += 1, R2319 += 1, R4 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2907 += 1, R2867 += 1, R2319 += 1, R4 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2907 += 1, R2866 += 1, R2867 += 1 };
  s2 -> s3 [0, 65535] { R2907 += 1, R2867 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s4 [0, 65535] { R2907 += 1 };
  s3 -> s1 [0, 65535] { R2907 += 1, R2867 += 1, R2319 += 1, R4 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2907 += 1, R2867 += 1, R2318 += 1, R2319 += 1 };
  s4 -> s4 [0, 65535] { R2907 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2907 += 1, R2867 += 1 };
  s6 -> s4 [0, 65535] { R2907 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R2909 += 1, R2873 += 1 };
  s0 -> s2 [0, 65535] { R2909 += 1, R2872 += 1, R2873 += 1 };
  s0 -> s0 [0, 65535] { R2908 += 1, R2909 += 1 };
  s0 -> s1 [45, 63] { R2909 += 1, R2873 += 1 };
  s0 -> s3 [88, 88] { R2909 += 1, R2873 += 1 };
  s0 -> s1 [89, 65535] { R2909 += 1, R2873 += 1 };
  s1 -> s1 [0, 43] { R2909 += 1, R2873 += 1 };
  s1 -> s1 [45, 63] { R2909 += 1, R2873 += 1 };
  s1 -> s3 [88, 88] { R2909 += 1, R2873 += 1 };
  s1 -> s1 [89, 65535] { R2909 += 1, R2873 += 1 };
  s2 -> s1 [0, 43] { R2909 += 1, R2873 += 1 };
  s2 -> s2 [0, 65535] { R2909 += 1, R2872 += 1, R2873 += 1 };
  s2 -> s1 [45, 63] { R2909 += 1, R2873 += 1 };
  s2 -> s3 [88, 88] { R2909 += 1, R2873 += 1 };
  s2 -> s1 [89, 65535] { R2909 += 1, R2873 += 1 };
  s3 -> s3 [0, 43] { R2909 += 1, R2873 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2909 += 1 };
  s3 -> s3 [45, 63] { R2909 += 1, R2873 += 1 };
  s3 -> s3 [88, 65535] { R2909 += 1, R2873 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R2911 += 1, R2874 += 1, R2875 += 1 };
  s0 -> s0 [0, 65535] { R2910 += 1, R2911 += 1 };
  s0 -> s2 [0, 65535] { R2911 += 1, R2875 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2911 += 1, R2874 += 1, R2875 += 1 };
  s1 -> s2 [0, 65535] { R2911 += 1, R2875 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2911 += 1 };
  s2 -> s2 [0, 65535] { R2911 += 1, R2875 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2911 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R2913 += 1, R2877 += 1 };
  s0 -> s2 [0, 65535] { R2913 += 1, R2877 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R2912 += 1, R2913 += 1 };
  s0 -> s3 [0, 65535] { R2913 += 1, R2876 += 1, R2877 += 1 };
  s0 -> s4 [58, 58] { R2913 += 1, R2877 += 1 };
  s0 -> s1 [59, 65535] { R2913 += 1, R2877 += 1 };
  s1 -> s1 [0, 57] { R2913 += 1, R2877 += 1 };
  s1 -> s1 [0, 65535] { R2913 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R2913 += 1, R2877 += 1 };
  s1 -> s1 [59, 65535] { R2913 += 1, R2877 += 1 };
  s2 -> s1 [0, 57] { R2913 += 1, R2877 += 1 };
  s2 -> s2 [0, 65535] { R2913 += 1, R2877 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R2913 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R2913 += 1, R2877 += 1 };
  s2 -> s1 [59, 65535] { R2913 += 1, R2877 += 1 };
  s3 -> s1 [0, 57] { R2913 += 1, R2877 += 1 };
  s3 -> s2 [0, 65535] { R2913 += 1, R2877 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2913 += 1, R2876 += 1, R2877 += 1 };
  s3 -> s4 [58, 58] { R2913 += 1, R2877 += 1 };
  s3 -> s1 [59, 65535] { R2913 += 1, R2877 += 1 };
  s4 -> s4 [0, 65535] { R2913 += 1, R2877 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2913 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R2915 += 1, R2879 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R2915 += 1, R2879 += 1, R8 += 1, R9 += 1 };
  s0 -> s3 [0, 65535] { R2915 += 1, R2878 += 1, R2879 += 1 };
  s0 -> s0 [0, 65535] { R2914 += 1, R2915 += 1 };
  s0 -> s4 [88, 88] { R2915 += 1, R2879 += 1 };
  s0 -> s1 [89, 65535] { R2915 += 1, R2879 += 1, R9 += 1 };
  s1 -> s1 [0, 87] { R2915 += 1, R2879 += 1, R9 += 1 };
  s1 -> s4 [88, 88] { R2915 += 1, R2879 += 1 };
  s1 -> s1 [89, 65535] { R2915 += 1, R2879 += 1, R9 += 1 };
  s2 -> s1 [0, 87] { R2915 += 1, R2879 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R2915 += 1, R2879 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [88, 88] { R2915 += 1, R2879 += 1 };
  s2 -> s1 [89, 65535] { R2915 += 1, R2879 += 1, R9 += 1 };
  s3 -> s1 [0, 87] { R2915 += 1, R2879 += 1, R9 += 1 };
  s3 -> s2 [0, 65535] { R2915 += 1, R2879 += 1, R8 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R2915 += 1, R2878 += 1, R2879 += 1 };
  s3 -> s4 [88, 88] { R2915 += 1, R2879 += 1 };
  s3 -> s1 [89, 65535] { R2915 += 1, R2879 += 1, R9 += 1 };
  s4 -> s5 [0, 65535] { R2915 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2915 += 1, R2879 += 1 };
  s5 -> s5 [0, 65535] { R2915 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s0 -> s0 [0, 65535] { R2916 += 1, R2917 += 1 };
  s0 -> s2 [0, 65535] { R2917 += 1, R2881 += 1, R2320 += 1, R2321 += 1 };
  s0 -> s3 [0, 65535] { R2917 += 1, R2880 += 1, R2881 += 1 };
  s0 -> s4 [91, 91] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s0 -> s1 [92, 65535] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2917 += 1 };
  s1 -> s7 [0, 65535] { R2917 += 1, R2881 += 1 };
  s1 -> s1 [0, 65535] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s2 -> s1 [0, 90] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s2 -> s2 [0, 65535] { R2917 += 1, R2881 += 1, R2320 += 1, R2321 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2917 += 1 };
  s2 -> s4 [91, 91] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s2 -> s1 [92, 65535] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s3 -> s1 [0, 90] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s3 -> s2 [0, 65535] { R2917 += 1, R2881 += 1, R2320 += 1, R2321 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2917 += 1, R2880 += 1, R2881 += 1 };
  s3 -> s4 [91, 91] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s3 -> s1 [92, 65535] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s4 -> s1 [0, 65535] { R2917 += 1, R2881 += 1, R2321 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2917 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2917 += 1 };
  s7 -> s7 [0, 65535] { R2917 += 1, R2881 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2919 += 1, R2883 += 1, R2323 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2918 += 1, R2919 += 1 };
  s0 -> s2 [0, 65535] { R2919 += 1, R2883 += 1, R2322 += 1, R2323 += 1 };
  s0 -> s3 [0, 65535] { R2919 += 1, R2882 += 1, R2883 += 1 };
  s1 -> s1 [0, 65535] { R2919 += 1, R2883 += 1, R2323 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R2919 += 1, R2883 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2919 += 1 };
  s2 -> s1 [0, 65535] { R2919 += 1, R2883 += 1, R2323 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2919 += 1, R2883 += 1, R2322 += 1, R2323 += 1 };
  s2 -> s5 [0, 65535] { R2919 += 1 };
  s3 -> s1 [0, 65535] { R2919 += 1, R2883 += 1, R2323 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2919 += 1, R2883 += 1, R2322 += 1, R2323 += 1 };
  s3 -> s3 [0, 65535] { R2919 += 1, R2882 += 1, R2883 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2919 += 1 };
  s6 -> s6 [0, 65535] { R2919 += 1, R2883 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2919 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R2921 += 1, R2885 += 1, R2855 += 1 };
  s0 -> s2 [0, 65535] { R2921 += 1, R2884 += 1, R2885 += 1 };
  s0 -> s3 [0, 65535] { R2921 += 1, R2885 += 1, R2854 += 1, R2855 += 1 };
  s0 -> s0 [0, 65535] { R2920 += 1, R2921 += 1 };
  s0 -> s1 [89, 65535] { R2921 += 1, R2885 += 1, R2855 += 1 };
  s1 -> s1 [0, 87] { R2921 += 1, R2885 += 1, R2855 += 1 };
  s1 -> s4 [0, 65535] { R2921 += 1 };
  s1 -> s1 [0, 65535] { R2921 += 1, R2885 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [89, 65535] { R2921 += 1, R2885 += 1, R2855 += 1 };
  s2 -> s1 [0, 87] { R2921 += 1, R2885 += 1, R2855 += 1 };
  s2 -> s2 [0, 65535] { R2921 += 1, R2884 += 1, R2885 += 1 };
  s2 -> s3 [0, 65535] { R2921 += 1, R2885 += 1, R2854 += 1, R2855 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [89, 65535] { R2921 += 1, R2885 += 1, R2855 += 1 };
  s3 -> s1 [0, 87] { R2921 += 1, R2885 += 1, R2855 += 1 };
  s3 -> s3 [0, 65535] { R2921 += 1, R2885 += 1, R2854 += 1, R2855 += 1 };
  s3 -> s4 [0, 65535] { R2921 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [89, 65535] { R2921 += 1, R2885 += 1, R2855 += 1 };
  s4 -> s4 [0, 65535] { R2921 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2922 += 1, R2923 += 1 };
  s0 -> s1 [0, 65535] { R2923 += 1, R2886 += 1, R2887 += 1 };
  s0 -> s2 [0, 65535] { R2923 += 1, R2887 += 1, R2857 += 1, R2314 += 1 };
  s0 -> s3 [0, 65535] { R2923 += 1, R2887 += 1, R2856 += 1, R2857 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2923 += 1, R2886 += 1, R2887 += 1 };
  s1 -> s2 [0, 65535] { R2923 += 1, R2887 += 1, R2857 += 1, R2314 += 1 };
  s1 -> s3 [0, 65535] { R2923 += 1, R2887 += 1, R2856 += 1, R2857 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R2923 += 1, R2887 += 1 };
  s2 -> s5 [0, 65535] { R2923 += 1 };
  s2 -> s2 [0, 65535] { R2923 += 1, R2887 += 1, R2857 += 1, R2314 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2923 += 1 };
  s3 -> s2 [0, 65535] { R2923 += 1, R2887 += 1, R2857 += 1, R2314 += 1 };
  s3 -> s3 [0, 65535] { R2923 += 1, R2887 += 1, R2856 += 1, R2857 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2923 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2923 += 1, R2887 += 1 };
  s6 -> s5 [0, 65535] { R2923 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2925 += 1, R2889 += 1, R2858 += 1, R2859 += 1 };
  s0 -> s2 [0, 65535] { R2925 += 1, R2888 += 1, R2889 += 1 };
  s0 -> s0 [0, 65535] { R2924 += 1, R2925 += 1 };
  s0 -> s3 [115, 115] { R2925 += 1, R2889 += 1, R2859 += 1 };
  s1 -> s1 [0, 65535] { R2925 += 1, R2889 += 1, R2858 += 1, R2859 += 1 };
  s1 -> s3 [115, 115] { R2925 += 1, R2889 += 1, R2859 += 1 };
  s2 -> s1 [0, 65535] { R2925 += 1, R2889 += 1, R2858 += 1, R2859 += 1 };
  s2 -> s2 [0, 65535] { R2925 += 1, R2888 += 1, R2889 += 1 };
  s2 -> s3 [115, 115] { R2925 += 1, R2889 += 1, R2859 += 1 };
  s3 -> s4 [116, 116] { R2925 += 1, R2889 += 1, R2859 += 1 };
  s4 -> s5 [0, 65535] { R2925 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2925 += 1, R2889 += 1 };
  s5 -> s5 [0, 65535] { R2925 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2927 += 1, R2891 += 1, R2869 += 1, R2315 += 1 };
  s0 -> s0 [0, 65535] { R2926 += 1, R2927 += 1 };
  s0 -> s2 [0, 65535] { R2927 += 1, R2890 += 1, R2891 += 1 };
  s0 -> s3 [0, 65535] { R2927 += 1, R2891 += 1, R2868 += 1, R2869 += 1 };
  s1 -> s6 [0, 65535] { R2927 += 1, R2891 += 1 };
  s1 -> s1 [0, 65535] { R2927 += 1, R2891 += 1, R2869 += 1, R2315 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2927 += 1 };
  s2 -> s1 [0, 65535] { R2927 += 1, R2891 += 1, R2869 += 1, R2315 += 1 };
  s2 -> s2 [0, 65535] { R2927 += 1, R2890 += 1, R2891 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2927 += 1, R2891 += 1, R2868 += 1, R2869 += 1 };
  s3 -> s1 [0, 65535] { R2927 += 1, R2891 += 1, R2869 += 1, R2315 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2927 += 1 };
  s3 -> s3 [0, 65535] { R2927 += 1, R2891 += 1, R2868 += 1, R2869 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2927 += 1 };
  s6 -> s6 [0, 65535] { R2927 += 1, R2891 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2927 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2929 += 1, R2892 += 1, R2893 += 1 };
  s0 -> s2 [0, 65535] { R2929 += 1, R2893 += 1, R2870 += 1, R2871 += 1 };
  s0 -> s0 [0, 65535] { R2928 += 1, R2929 += 1 };
  s0 -> s3 [108, 108] { R2929 += 1, R2893 += 1, R2871 += 1 };
  s1 -> s1 [0, 65535] { R2929 += 1, R2892 += 1, R2893 += 1 };
  s1 -> s2 [0, 65535] { R2929 += 1, R2893 += 1, R2870 += 1, R2871 += 1 };
  s1 -> s3 [108, 108] { R2929 += 1, R2893 += 1, R2871 += 1 };
  s2 -> s2 [0, 65535] { R2929 += 1, R2893 += 1, R2870 += 1, R2871 += 1 };
  s2 -> s3 [108, 108] { R2929 += 1, R2893 += 1, R2871 += 1 };
  s3 -> s4 [111, 111] { R2929 += 1, R2893 += 1, R2871 += 1 };
  s4 -> s5 [99, 99] { R2929 += 1, R2893 += 1, R2871 += 1 };
  s5 -> s6 [97, 97] { R2929 += 1, R2893 += 1, R2871 += 1 };
  s6 -> s7 [108, 108] { R2929 += 1, R2893 += 1, R2871 += 1 };
  s7 -> s8 [104, 104] { R2929 += 1, R2893 += 1, R2871 += 1 };
  s8 -> s9 [111, 111] { R2929 += 1, R2893 += 1, R2871 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R2929 += 1 };
  s9 -> s9 [0, 65535] { R2929 += 1, R2893 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R2929 += 1 };
  accepting s9, s10, s11;
};
};
synchronised {  // Automata constraining P56
automaton P56_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
constraint R1 = R2859 && R2 = R2867 && R3 = R2929 && R8 = 0 && R9 - R2871 = -1 && R1546 = 0 && R1547 = R2893 && R2320 = 0 && R2321 = 1 && R2322 = 0 && R2323 = 1 && R2858 = R2871 && R2860 - R2893 = 1 && R2861 = R2867 && R2862 - R2893 = 1 && R2863 = R2867 && R2864 - R2893 = 1 && R2865 = R2867 && R2866 - R2893 = 1 && R2870 = 0 && R2872 = 0 && R2873 = R2893 && R2874 = 0 && R2875 = R2893 && R2876 = 0 && R2877 = R2893 && R2878 = 0 && R2879 = R2893 && R2880 = 0 && R2881 = R2893 && R2882 = 0 && R2883 = R2893 && R2884 = 0 && R2885 = R2893 && R2886 = 0 && R2887 = R2893 && R2888 = 0 && R2889 = R2893 && R2890 = 0 && R2891 = R2893 && R2892 = 0 && R2894 = 10 && R2895 = R2929 && R2896 = 10 && R2897 = R2929 && R2898 = 10 && R2899 = R2929 && R2900 = 10 && R2901 = R2929 && R2902 = 10 && R2903 = R2929 && R2904 = 10 && R2905 = R2929 && R2906 = 10 && R2907 = R2929 && R2908 = 10 && R2909 = R2929 && R2910 = 10 && R2911 = R2929 && R2912 = 10 && R2913 = R2929 && R2914 = 10 && R2915 = R2929 && R2916 = 10 && R2917 = R2929 && R2918 = 10 && R2919 = R2929 && R2920 = 10 && R2921 = R2929 && R2922 = 10 && R2923 = R2929 && R2924 = 10 && R2925 = R2929 && R2926 = 10 && R2927 = R2929 && R2928 = 10 && R0 != 0 && R6 < 1 && R2871 - R2859 < 1 && 0 < R2859 && R2893 < R2867 && -1 < R2871 && -1 < R2893 && 9 < R2929 && (R2316 != 0 || ((R4 != 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R0 = R2317 || R2317 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R2317 != 1 || -1 < R0) && (R0 = R2317 || R2317 = 1))))) && (R2318 != 0 || ((R4 != 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R0 = R2319 || R2319 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R2319 != 1 || -1 < R0) && (R0 = R2319 || R2319 = 1))))) && (R2854 != R2871 || R2855 = R2859 || (R2314 = 0 && R2859 = R2871)) && (R2856 != R2871 || R2857 = R2859 || (R2314 = 0 && R2859 = R2871)) && (R2868 != 0 || R2869 = R2871 || (R2315 = 0 && R2871 = 0)) && (R2316 = 0 || (R4 = 0 && R0 < 0)) && (R2318 = 0 || (R4 = 0 && R0 < 0)) && (R2854 = R2871 || (R2314 = 0 && R2859 = R2871)) && (R2856 = R2871 || (R2314 = 0 && R2859 = R2871)) && (R2868 = 0 || (R2315 = 0 && R2871 = 0));
// End of Parikh automata intersection problem
