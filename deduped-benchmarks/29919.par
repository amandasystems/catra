// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1546, R1547, R2, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2702, R2703, R2704, R2705, R2706, R2707, R2708, R2709, R2710, R2711, R2712, R2713, R2714, R2715, R2716, R2717, R2718, R2719, R2720, R2721, R2722, R2723, R2724, R2725, R2726, R2727, R2728, R2729, R2730, R2731, R2732, R2733, R2734, R2735, R2736, R2737, R2738, R2739, R2740, R2741, R2742, R2743, R2744, R2745, R2746, R2747, R2748, R2749, R2750, R2751, R2752, R2753, R2754, R2755, R2756, R2757, R2758, R2759, R2760, R2761, R2762, R2763, R2764, R2765, R2766, R2767, R2768, R2769, R2770, R2771, R2772, R2773, R2774, R2775, R2776, R2777, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2743 += 1 };
  s0 -> s0 [0, 65535] { R2742 += 1, R2743 += 1 };
  s0 -> s2 [46, 46] { R2743 += 1 };
  s0 -> s3 [47, 47] { R2743 += 1 };
  s0 -> s1 [48, 65535] { R2743 += 1 };
  s1 -> s1 [0, 45] { R2743 += 1 };
  s1 -> s2 [46, 46] { R2743 += 1 };
  s1 -> s3 [47, 47] { R2743 += 1 };
  s1 -> s1 [48, 65535] { R2743 += 1 };
  s2 -> s1 [0, 45] { R2743 += 1 };
  s2 -> s2 [46, 46] { R2743 += 1 };
  s2 -> s3 [47, 47] { R2743 += 1 };
  s2 -> s1 [48, 114] { R2743 += 1 };
  s2 -> s8 [115, 115] { R2743 += 1 };
  s2 -> s1 [116, 65535] { R2743 += 1 };
  s3 -> s3 [0, 45] { R2743 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2743 += 1 };
  s3 -> s3 [47, 65535] { R2743 += 1 };
  s4 -> s3 [0, 45] { R2743 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2743 += 1 };
  s4 -> s3 [47, 114] { R2743 += 1 };
  s4 -> s5 [115, 115] { R2743 += 1 };
  s4 -> s3 [116, 65535] { R2743 += 1 };
  s5 -> s3 [0, 45] { R2743 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2743 += 1 };
  s5 -> s3 [47, 110] { R2743 += 1 };
  s5 -> s6 [111, 111] { R2743 += 1 };
  s5 -> s3 [112, 65535] { R2743 += 1 };
  s6 -> s3 [0, 45] { R2743 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2743 += 1 };
  s6 -> s3 [47, 98] { R2743 += 1 };
  s6 -> s7 [99, 99] { R2743 += 1 };
  s6 -> s3 [100, 65535] { R2743 += 1 };
  s7 -> s3 [0, 45] { R2743 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2743 += 1 };
  s7 -> s3 [47, 106] { R2743 += 1 };
  s7 -> s3 [108, 65535] { R2743 += 1 };
  s8 -> s1 [0, 45] { R2743 += 1 };
  s8 -> s2 [46, 46] { R2743 += 1 };
  s8 -> s3 [47, 47] { R2743 += 1 };
  s8 -> s1 [48, 110] { R2743 += 1 };
  s8 -> s9 [111, 111] { R2743 += 1 };
  s8 -> s1 [112, 65535] { R2743 += 1 };
  s9 -> s1 [0, 45] { R2743 += 1 };
  s9 -> s2 [46, 46] { R2743 += 1 };
  s9 -> s3 [47, 47] { R2743 += 1 };
  s9 -> s1 [48, 98] { R2743 += 1 };
  s9 -> s10 [99, 99] { R2743 += 1 };
  s9 -> s1 [100, 65535] { R2743 += 1 };
  s10 -> s1 [0, 45] { R2743 += 1 };
  s10 -> s2 [46, 46] { R2743 += 1 };
  s10 -> s3 [47, 47] { R2743 += 1 };
  s10 -> s1 [48, 106] { R2743 += 1 };
  s10 -> s1 [108, 65535] { R2743 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2745 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R2744 += 1, R2745 += 1 };
  s1 -> s1 [0, 65535] { R2745 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2747 += 1, R1547 += 1 };
  s0 -> s0 [0, 65535] { R2746 += 1, R2747 += 1 };
  s0 -> s2 [0, 65535] { R2747 += 1, R1546 += 1, R1547 += 1 };
  s0 -> s3 [47, 47] { R2747 += 1 };
  s0 -> s1 [48, 65535] { R2747 += 1, R1547 += 1 };
  s1 -> s1 [0, 46] { R2747 += 1, R1547 += 1 };
  s1 -> s3 [47, 47] { R2747 += 1 };
  s1 -> s1 [48, 65535] { R2747 += 1, R1547 += 1 };
  s2 -> s1 [0, 46] { R2747 += 1, R1547 += 1 };
  s2 -> s2 [0, 65535] { R2747 += 1, R1546 += 1, R1547 += 1 };
  s2 -> s3 [47, 47] { R2747 += 1 };
  s2 -> s1 [48, 65535] { R2747 += 1, R1547 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2747 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R2749 += 1, R2709 += 1 };
  s0 -> s2 [0, 65535] { R2749 += 1, R2708 += 1, R2709 += 1 };
  s0 -> s0 [0, 65535] { R2748 += 1, R2749 += 1 };
  s0 -> s1 [38, 42] { R2749 += 1, R2709 += 1 };
  s0 -> s1 [44, 45] { R2749 += 1, R2709 += 1 };
  s0 -> s1 [47, 62] { R2749 += 1, R2709 += 1 };
  s0 -> s1 [64, 65535] { R2749 += 1, R2709 += 1 };
  s1 -> s1 [0, 36] { R2749 += 1, R2709 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2749 += 1 };
  s1 -> s1 [38, 42] { R2749 += 1, R2709 += 1 };
  s1 -> s1 [44, 45] { R2749 += 1, R2709 += 1 };
  s1 -> s1 [47, 62] { R2749 += 1, R2709 += 1 };
  s1 -> s1 [64, 65535] { R2749 += 1, R2709 += 1 };
  s2 -> s1 [0, 36] { R2749 += 1, R2709 += 1 };
  s2 -> s2 [0, 65535] { R2749 += 1, R2708 += 1, R2709 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R2749 += 1, R2709 += 1 };
  s2 -> s1 [44, 45] { R2749 += 1, R2709 += 1 };
  s2 -> s1 [47, 62] { R2749 += 1, R2709 += 1 };
  s2 -> s1 [64, 65535] { R2749 += 1, R2709 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R2751 += 1, R2711 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R2751 += 1, R2710 += 1, R2711 += 1 };
  s0 -> s0 [0, 65535] { R2750 += 1, R2751 += 1 };
  s1 -> s1 [0, 65535] { R2751 += 1, R2711 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R2751 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2751 += 1, R2711 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R2751 += 1, R2710 += 1, R2711 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2751 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s0 -> s2 [0, 65535] { R2753 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s0 [0, 65535] { R2752 += 1, R2753 += 1 };
  s0 -> s3 [0, 65535] { R2753 += 1, R2713 += 1, R2316 += 1, R2317 += 1 };
  s0 -> s4 [63, 63] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s0 -> s1 [64, 65535] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s1 -> s1 [0, 65535] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s1 -> s5 [0, 65535] { R2753 += 1 };
  s1 -> s7 [0, 65535] { R2753 += 1, R2713 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s2 -> s2 [0, 65535] { R2753 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2753 += 1, R2713 += 1, R2316 += 1, R2317 += 1 };
  s2 -> s4 [63, 63] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s2 -> s1 [64, 65535] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s3 -> s1 [0, 62] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s3 -> s5 [0, 65535] { R2753 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2753 += 1, R2713 += 1, R2316 += 1, R2317 += 1 };
  s3 -> s4 [63, 63] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s3 -> s1 [64, 65535] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s4 -> s1 [0, 65535] { R2753 += 1, R2713 += 1, R2317 += 1 };
  s5 -> s5 [0, 65535] { R2753 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R2753 += 1 };
  s7 -> s7 [0, 65535] { R2753 += 1, R2713 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2755 += 1, R2715 += 1, R2319 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2755 += 1, R2715 += 1, R2318 += 1, R2319 += 1 };
  s0 -> s0 [0, 65535] { R2754 += 1, R2755 += 1 };
  s0 -> s3 [0, 65535] { R2755 += 1, R2714 += 1, R2715 += 1 };
  s1 -> s1 [0, 65535] { R2755 += 1, R2715 += 1, R2319 += 1, R4 += 1 };
  s1 -> s5 [0, 65535] { R2755 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R2755 += 1, R2715 += 1 };
  s2 -> s1 [0, 65535] { R2755 += 1, R2715 += 1, R2319 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2755 += 1, R2715 += 1, R2318 += 1, R2319 += 1 };
  s2 -> s5 [0, 65535] { R2755 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2755 += 1, R2715 += 1, R2319 += 1, R4 += 1 };
  s3 -> s2 [0, 65535] { R2755 += 1, R2715 += 1, R2318 += 1, R2319 += 1 };
  s3 -> s3 [0, 65535] { R2755 += 1, R2714 += 1, R2715 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2755 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2755 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2755 += 1, R2715 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R2757 += 1, R2721 += 1 };
  s0 -> s2 [0, 65535] { R2757 += 1, R2720 += 1, R2721 += 1 };
  s0 -> s0 [0, 65535] { R2756 += 1, R2757 += 1 };
  s0 -> s1 [45, 63] { R2757 += 1, R2721 += 1 };
  s0 -> s3 [88, 88] { R2757 += 1, R2721 += 1 };
  s0 -> s1 [89, 65535] { R2757 += 1, R2721 += 1 };
  s1 -> s1 [0, 43] { R2757 += 1, R2721 += 1 };
  s1 -> s1 [45, 63] { R2757 += 1, R2721 += 1 };
  s1 -> s3 [88, 88] { R2757 += 1, R2721 += 1 };
  s1 -> s1 [89, 65535] { R2757 += 1, R2721 += 1 };
  s2 -> s1 [0, 43] { R2757 += 1, R2721 += 1 };
  s2 -> s2 [0, 65535] { R2757 += 1, R2720 += 1, R2721 += 1 };
  s2 -> s1 [45, 63] { R2757 += 1, R2721 += 1 };
  s2 -> s3 [88, 88] { R2757 += 1, R2721 += 1 };
  s2 -> s1 [89, 65535] { R2757 += 1, R2721 += 1 };
  s3 -> s3 [0, 43] { R2757 += 1, R2721 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2757 += 1 };
  s3 -> s3 [45, 63] { R2757 += 1, R2721 += 1 };
  s3 -> s3 [88, 65535] { R2757 += 1, R2721 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R2758 += 1, R2759 += 1 };
  s0 -> s1 [0, 65535] { R2759 += 1, R2722 += 1, R2723 += 1 };
  s0 -> s2 [0, 65535] { R2759 += 1, R2723 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2759 += 1, R2722 += 1, R2723 += 1 };
  s1 -> s2 [0, 65535] { R2759 += 1, R2723 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R2759 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2759 += 1, R2723 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R2759 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R2761 += 1, R2725 += 1 };
  s0 -> s2 [0, 65535] { R2761 += 1, R2724 += 1, R2725 += 1 };
  s0 -> s0 [0, 65535] { R2760 += 1, R2761 += 1 };
  s0 -> s3 [0, 65535] { R2761 += 1, R2725 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R2761 += 1, R2725 += 1 };
  s0 -> s1 [59, 65535] { R2761 += 1, R2725 += 1 };
  s1 -> s1 [0, 57] { R2761 += 1, R2725 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2761 += 1 };
  s1 -> s4 [58, 58] { R2761 += 1, R2725 += 1 };
  s1 -> s1 [59, 65535] { R2761 += 1, R2725 += 1 };
  s2 -> s1 [0, 57] { R2761 += 1, R2725 += 1 };
  s2 -> s2 [0, 65535] { R2761 += 1, R2724 += 1, R2725 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2761 += 1, R2725 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R2761 += 1, R2725 += 1 };
  s2 -> s1 [59, 65535] { R2761 += 1, R2725 += 1 };
  s3 -> s1 [0, 57] { R2761 += 1, R2725 += 1 };
  s3 -> s5 [0, 65535] { R2761 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2761 += 1, R2725 += 1, R6 += 1 };
  s3 -> s4 [58, 58] { R2761 += 1, R2725 += 1 };
  s3 -> s1 [59, 65535] { R2761 += 1, R2725 += 1 };
  s4 -> s4 [0, 65535] { R2761 += 1, R2725 += 1 };
  s5 -> s5 [0, 65535] { R2761 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R2763 += 1, R2727 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R2763 += 1, R2726 += 1, R2727 += 1 };
  s0 -> s0 [0, 65535] { R2762 += 1, R2763 += 1 };
  s0 -> s3 [0, 65535] { R2763 += 1, R2727 += 1, R8 += 1, R9 += 1 };
  s0 -> s4 [88, 88] { R2763 += 1, R2727 += 1 };
  s0 -> s1 [89, 65535] { R2763 += 1, R2727 += 1, R9 += 1 };
  s1 -> s1 [0, 87] { R2763 += 1, R2727 += 1, R9 += 1 };
  s1 -> s4 [88, 88] { R2763 += 1, R2727 += 1 };
  s1 -> s1 [89, 65535] { R2763 += 1, R2727 += 1, R9 += 1 };
  s2 -> s1 [0, 87] { R2763 += 1, R2727 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R2763 += 1, R2726 += 1, R2727 += 1 };
  s2 -> s3 [0, 65535] { R2763 += 1, R2727 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [88, 88] { R2763 += 1, R2727 += 1 };
  s2 -> s1 [89, 65535] { R2763 += 1, R2727 += 1, R9 += 1 };
  s3 -> s1 [0, 87] { R2763 += 1, R2727 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R2763 += 1, R2727 += 1, R8 += 1, R9 += 1 };
  s3 -> s4 [88, 88] { R2763 += 1, R2727 += 1 };
  s3 -> s1 [89, 65535] { R2763 += 1, R2727 += 1, R9 += 1 };
  s4 -> s4 [0, 65535] { R2763 += 1, R2727 += 1 };
  s4 -> s5 [0, 65535] { R2763 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2763 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s0 -> s0 [0, 65535] { R2764 += 1, R2765 += 1 };
  s0 -> s2 [0, 65535] { R2765 += 1, R2728 += 1, R2729 += 1 };
  s0 -> s3 [0, 65535] { R2765 += 1, R2729 += 1, R2320 += 1, R2321 += 1 };
  s0 -> s4 [91, 91] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s0 -> s1 [92, 65535] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R2765 += 1, R2729 += 1 };
  s1 -> s6 [0, 65535] { R2765 += 1 };
  s1 -> s1 [0, 65535] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s2 -> s1 [0, 90] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2765 += 1, R2728 += 1, R2729 += 1 };
  s2 -> s3 [0, 65535] { R2765 += 1, R2729 += 1, R2320 += 1, R2321 += 1 };
  s2 -> s4 [91, 91] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s2 -> s1 [92, 65535] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s3 -> s1 [0, 90] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2765 += 1, R2729 += 1, R2320 += 1, R2321 += 1 };
  s3 -> s6 [0, 65535] { R2765 += 1 };
  s3 -> s4 [91, 91] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s3 -> s1 [92, 65535] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s4 -> s1 [0, 65535] { R2765 += 1, R2729 += 1, R2321 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2765 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R2765 += 1, R2729 += 1 };
  s7 -> s6 [0, 65535] { R2765 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2766 += 1, R2767 += 1 };
  s0 -> s1 [0, 65535] { R2767 += 1, R2731 += 1, R2322 += 1, R2323 += 1 };
  s0 -> s2 [0, 65535] { R2767 += 1, R2731 += 1, R2323 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R2767 += 1, R2730 += 1, R2731 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R2767 += 1 };
  s1 -> s1 [0, 65535] { R2767 += 1, R2731 += 1, R2322 += 1, R2323 += 1 };
  s1 -> s2 [0, 65535] { R2767 += 1, R2731 += 1, R2323 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R2767 += 1, R2731 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R2767 += 1 };
  s2 -> s2 [0, 65535] { R2767 += 1, R2731 += 1, R2323 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2767 += 1, R2731 += 1, R2322 += 1, R2323 += 1 };
  s3 -> s2 [0, 65535] { R2767 += 1, R2731 += 1, R2323 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R2767 += 1, R2730 += 1, R2731 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2767 += 1, R2731 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R2767 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2767 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R2769 += 1, R2733 += 1, R2703 += 1 };
  s0 -> s0 [0, 65535] { R2768 += 1, R2769 += 1 };
  s0 -> s2 [0, 65535] { R2769 += 1, R2733 += 1, R2702 += 1, R2703 += 1 };
  s0 -> s3 [0, 65535] { R2769 += 1, R2732 += 1, R2733 += 1 };
  s0 -> s1 [89, 65535] { R2769 += 1, R2733 += 1, R2703 += 1 };
  s1 -> s1 [0, 87] { R2769 += 1, R2733 += 1, R2703 += 1 };
  s1 -> s5 [0, 65535] { R2769 += 1 };
  s1 -> s1 [0, 65535] { R2769 += 1, R2733 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [89, 65535] { R2769 += 1, R2733 += 1, R2703 += 1 };
  s2 -> s1 [0, 87] { R2769 += 1, R2733 += 1, R2703 += 1 };
  s2 -> s5 [0, 65535] { R2769 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2769 += 1, R2733 += 1, R2702 += 1, R2703 += 1 };
  s2 -> s1 [89, 65535] { R2769 += 1, R2733 += 1, R2703 += 1 };
  s3 -> s1 [0, 87] { R2769 += 1, R2733 += 1, R2703 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2769 += 1, R2733 += 1, R2702 += 1, R2703 += 1 };
  s3 -> s3 [0, 65535] { R2769 += 1, R2732 += 1, R2733 += 1 };
  s3 -> s1 [89, 65535] { R2769 += 1, R2733 += 1, R2703 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2769 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2771 += 1, R2735 += 1, R2704 += 1, R2705 += 1 };
  s0 -> s2 [0, 65535] { R2771 += 1, R2734 += 1, R2735 += 1 };
  s0 -> s0 [0, 65535] { R2770 += 1, R2771 += 1 };
  s0 -> s3 [0, 65535] { R2771 += 1, R2735 += 1, R2705 += 1, R2314 += 1 };
  s1 -> s4 [0, 65535] { R2771 += 1 };
  s1 -> s1 [0, 65535] { R2771 += 1, R2735 += 1, R2704 += 1, R2705 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R2771 += 1, R2735 += 1, R2705 += 1, R2314 += 1 };
  s2 -> s1 [0, 65535] { R2771 += 1, R2735 += 1, R2704 += 1, R2705 += 1 };
  s2 -> s2 [0, 65535] { R2771 += 1, R2734 += 1, R2735 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2771 += 1, R2735 += 1, R2705 += 1, R2314 += 1 };
  s3 -> s4 [0, 65535] { R2771 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2771 += 1, R2735 += 1, R2705 += 1, R2314 += 1 };
  s3 -> s6 [0, 65535] { R2771 += 1, R2735 += 1 };
  s4 -> s4 [0, 65535] { R2771 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2771 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2771 += 1, R2735 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2773 += 1, R2737 += 1, R2706 += 1, R2707 += 1 };
  s0 -> s2 [0, 65535] { R2773 += 1, R2736 += 1, R2737 += 1 };
  s0 -> s0 [0, 65535] { R2772 += 1, R2773 += 1 };
  s0 -> s3 [104, 104] { R2773 += 1, R2737 += 1, R2707 += 1 };
  s1 -> s1 [0, 65535] { R2773 += 1, R2737 += 1, R2706 += 1, R2707 += 1 };
  s1 -> s3 [104, 104] { R2773 += 1, R2737 += 1, R2707 += 1 };
  s2 -> s1 [0, 65535] { R2773 += 1, R2737 += 1, R2706 += 1, R2707 += 1 };
  s2 -> s2 [0, 65535] { R2773 += 1, R2736 += 1, R2737 += 1 };
  s2 -> s3 [104, 104] { R2773 += 1, R2737 += 1, R2707 += 1 };
  s3 -> s4 [111, 111] { R2773 += 1, R2737 += 1, R2707 += 1 };
  s4 -> s5 [115, 115] { R2773 += 1, R2737 += 1, R2707 += 1 };
  s5 -> s6 [116, 116] { R2773 += 1, R2737 += 1, R2707 += 1 };
  s6 -> s6 [0, 65535] { R2773 += 1, R2737 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R2773 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R2773 += 1 };
  accepting s6, s7, s8;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2774 += 1, R2775 += 1 };
  s0 -> s1 [0, 65535] { R2775 += 1, R2739 += 1, R2716 += 1, R2717 += 1 };
  s0 -> s2 [0, 65535] { R2775 += 1, R2738 += 1, R2739 += 1 };
  s0 -> s3 [0, 65535] { R2775 += 1, R2739 += 1, R2717 += 1, R2315 += 1 };
  s1 -> s1 [0, 65535] { R2775 += 1, R2739 += 1, R2716 += 1, R2717 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R2775 += 1, R2739 += 1, R2717 += 1, R2315 += 1 };
  s1 -> s6 [0, 65535] { R2775 += 1 };
  s2 -> s1 [0, 65535] { R2775 += 1, R2739 += 1, R2716 += 1, R2717 += 1 };
  s2 -> s2 [0, 65535] { R2775 += 1, R2738 += 1, R2739 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2775 += 1, R2739 += 1, R2717 += 1, R2315 += 1 };
  s3 -> s4 [0, 65535] { R2775 += 1, R2739 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2775 += 1, R2739 += 1, R2717 += 1, R2315 += 1 };
  s3 -> s6 [0, 65535] { R2775 += 1 };
  s4 -> s4 [0, 65535] { R2775 += 1, R2739 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2775 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2775 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R2776 += 1, R2777 += 1 };
  s0 -> s1 [0, 65535] { R2777 += 1, R2740 += 1, R2741 += 1 };
  s0 -> s2 [0, 65535] { R2777 += 1, R2741 += 1, R2718 += 1, R2719 += 1 };
  s0 -> s3 [108, 108] { R2777 += 1, R2741 += 1, R2719 += 1 };
  s1 -> s1 [0, 65535] { R2777 += 1, R2740 += 1, R2741 += 1 };
  s1 -> s2 [0, 65535] { R2777 += 1, R2741 += 1, R2718 += 1, R2719 += 1 };
  s1 -> s3 [108, 108] { R2777 += 1, R2741 += 1, R2719 += 1 };
  s2 -> s2 [0, 65535] { R2777 += 1, R2741 += 1, R2718 += 1, R2719 += 1 };
  s2 -> s3 [108, 108] { R2777 += 1, R2741 += 1, R2719 += 1 };
  s3 -> s4 [111, 111] { R2777 += 1, R2741 += 1, R2719 += 1 };
  s4 -> s5 [99, 99] { R2777 += 1, R2741 += 1, R2719 += 1 };
  s5 -> s6 [97, 97] { R2777 += 1, R2741 += 1, R2719 += 1 };
  s6 -> s7 [108, 108] { R2777 += 1, R2741 += 1, R2719 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R2777 += 1 };
  s7 -> s7 [0, 65535] { R2777 += 1, R2741 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2777 += 1 };
  accepting s7, s8, s9;
};
};
synchronised {  // Automata constraining P56
automaton P56_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
constraint R1 = R2707 && R2 = R2715 && R3 = R2777 && R8 = 0 && R9 - R2719 = -1 && R1546 = 0 && R1547 = R2741 && R2320 = 0 && R2321 = 1 && R2322 = 0 && R2323 = 1 && R2706 = R2719 && R2708 - R2741 = 1 && R2709 = R2715 && R2710 - R2741 = 1 && R2711 = R2715 && R2712 - R2741 = 1 && R2713 = R2715 && R2714 - R2741 = 1 && R2718 = 0 && R2720 = 0 && R2721 = R2741 && R2722 = 0 && R2723 = R2741 && R2724 = 0 && R2725 = R2741 && R2726 = 0 && R2727 = R2741 && R2728 = 0 && R2729 = R2741 && R2730 = 0 && R2731 = R2741 && R2732 = 0 && R2733 = R2741 && R2734 = 0 && R2735 = R2741 && R2736 = 0 && R2737 = R2741 && R2738 = 0 && R2739 = R2741 && R2740 = 0 && R2742 = 10 && R2743 = R2777 && R2744 = 10 && R2745 = R2777 && R2746 = 10 && R2747 = R2777 && R2748 = 10 && R2749 = R2777 && R2750 = 10 && R2751 = R2777 && R2752 = 10 && R2753 = R2777 && R2754 = 10 && R2755 = R2777 && R2756 = 10 && R2757 = R2777 && R2758 = 10 && R2759 = R2777 && R2760 = 10 && R2761 = R2777 && R2762 = 10 && R2763 = R2777 && R2764 = 10 && R2765 = R2777 && R2766 = 10 && R2767 = R2777 && R2768 = 10 && R2769 = R2777 && R2770 = 10 && R2771 = R2777 && R2772 = 10 && R2773 = R2777 && R2774 = 10 && R2775 = R2777 && R2776 = 10 && R0 != 0 && R6 < 1 && R2719 - R2707 < 1 && 0 < R2707 && R2741 < R2715 && -1 < R2719 && -1 < R2741 && 9 < R2777 && (R2316 != 0 || ((R4 != 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R0 = R2317 || R2317 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2317 || R2317 = 1 || R2317 < 0) && (R2317 != 1 || -1 < R0) && (R0 = R2317 || R2317 = 1))))) && (R2318 != 0 || ((R4 != 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R0 = R2319 || R2319 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2319 || R2319 = 1 || R2319 < 0) && (R2319 != 1 || -1 < R0) && (R0 = R2319 || R2319 = 1))))) && (R2702 != R2719 || R2703 = R2707 || (R2314 = 0 && R2707 = R2719)) && (R2704 != R2719 || R2705 = R2707 || (R2314 = 0 && R2707 = R2719)) && (R2716 != 0 || R2717 = R2719 || (R2315 = 0 && R2719 = 0)) && (R2316 = 0 || (R4 = 0 && R0 < 0)) && (R2318 = 0 || (R4 = 0 && R0 < 0)) && (R2702 = R2719 || (R2314 = 0 && R2707 = R2719)) && (R2704 = R2719 || (R2314 = 0 && R2707 = R2719)) && (R2716 = 0 || (R2315 = 0 && R2719 = 0));
// End of Parikh automata intersection problem
