// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R1395, R1396, R1397, R1398, R1399, R1400, R1401, R1402, R1403, R1404, R1405, R1406, R1407, R1408, R1409, R1410, R1411, R1412, R1413, R1414, R1415, R1416, R1417, R1418, R1419, R1420, R1421, R1422, R1423, R1424, R1425, R1426, R1427, R1428, R1429, R1430, R1431, R1432, R1433, R1434, R1435, R1436, R1437, R1438, R1439, R1440, R1441, R1442, R1443, R1444, R1445, R1446, R1447, R1448, R1449, R1450, R1451, R1452, R1453, R1454, R1455, R1456, R1457, R1458, R1459, R1460, R1461, R1462, R1463, R1464, R1465, R1466, R1467, R1468, R1469, R1470, R2, R3, R4, R5, R6, R7, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1436 += 1 };
  s0 -> s0 [0, 65535] { R1435 += 1, R1436 += 1 };
  s0 -> s2 [46, 46] { R1436 += 1 };
  s0 -> s3 [47, 47] { R1436 += 1 };
  s0 -> s1 [48, 65535] { R1436 += 1 };
  s1 -> s1 [0, 45] { R1436 += 1 };
  s1 -> s2 [46, 46] { R1436 += 1 };
  s1 -> s3 [47, 47] { R1436 += 1 };
  s1 -> s1 [48, 65535] { R1436 += 1 };
  s2 -> s1 [0, 45] { R1436 += 1 };
  s2 -> s2 [46, 46] { R1436 += 1 };
  s2 -> s3 [47, 47] { R1436 += 1 };
  s2 -> s1 [48, 114] { R1436 += 1 };
  s2 -> s8 [115, 115] { R1436 += 1 };
  s2 -> s1 [116, 65535] { R1436 += 1 };
  s3 -> s3 [0, 45] { R1436 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1436 += 1 };
  s3 -> s3 [47, 65535] { R1436 += 1 };
  s4 -> s3 [0, 45] { R1436 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1436 += 1 };
  s4 -> s3 [47, 114] { R1436 += 1 };
  s4 -> s5 [115, 115] { R1436 += 1 };
  s4 -> s3 [116, 65535] { R1436 += 1 };
  s5 -> s3 [0, 45] { R1436 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1436 += 1 };
  s5 -> s3 [47, 110] { R1436 += 1 };
  s5 -> s6 [111, 111] { R1436 += 1 };
  s5 -> s3 [112, 65535] { R1436 += 1 };
  s6 -> s3 [0, 45] { R1436 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1436 += 1 };
  s6 -> s3 [47, 98] { R1436 += 1 };
  s6 -> s7 [99, 99] { R1436 += 1 };
  s6 -> s3 [100, 65535] { R1436 += 1 };
  s7 -> s3 [0, 45] { R1436 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1436 += 1 };
  s7 -> s3 [47, 106] { R1436 += 1 };
  s7 -> s3 [108, 65535] { R1436 += 1 };
  s8 -> s1 [0, 45] { R1436 += 1 };
  s8 -> s2 [46, 46] { R1436 += 1 };
  s8 -> s3 [47, 47] { R1436 += 1 };
  s8 -> s1 [48, 110] { R1436 += 1 };
  s8 -> s9 [111, 111] { R1436 += 1 };
  s8 -> s1 [112, 65535] { R1436 += 1 };
  s9 -> s1 [0, 45] { R1436 += 1 };
  s9 -> s2 [46, 46] { R1436 += 1 };
  s9 -> s3 [47, 47] { R1436 += 1 };
  s9 -> s1 [48, 98] { R1436 += 1 };
  s9 -> s10 [99, 99] { R1436 += 1 };
  s9 -> s1 [100, 65535] { R1436 += 1 };
  s10 -> s1 [0, 45] { R1436 += 1 };
  s10 -> s2 [46, 46] { R1436 += 1 };
  s10 -> s3 [47, 47] { R1436 += 1 };
  s10 -> s1 [48, 106] { R1436 += 1 };
  s10 -> s1 [108, 65535] { R1436 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1437 += 1, R1438 += 1 };
  s0 -> s1 [0, 65535] { R1438 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1438 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1440 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R1439 += 1, R1440 += 1 };
  s0 -> s2 [0, 65535] { R1440 += 1, R11 += 1, R12 += 1 };
  s0 -> s3 [47, 47] { R1440 += 1 };
  s0 -> s1 [48, 65535] { R1440 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R1440 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R1440 += 1 };
  s1 -> s1 [48, 65535] { R1440 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R1440 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R1440 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R1440 += 1 };
  s2 -> s1 [48, 65535] { R1440 += 1, R12 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1440 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R1442 += 1, R1402 += 1 };
  s0 -> s2 [0, 65535] { R1442 += 1, R1401 += 1, R1402 += 1 };
  s0 -> s0 [0, 65535] { R1441 += 1, R1442 += 1 };
  s0 -> s1 [38, 42] { R1442 += 1, R1402 += 1 };
  s0 -> s1 [44, 45] { R1442 += 1, R1402 += 1 };
  s0 -> s1 [47, 62] { R1442 += 1, R1402 += 1 };
  s0 -> s1 [64, 65535] { R1442 += 1, R1402 += 1 };
  s1 -> s1 [0, 36] { R1442 += 1, R1402 += 1 };
  s1 -> s1 [0, 65535] { R1442 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R1442 += 1, R1402 += 1 };
  s1 -> s1 [44, 45] { R1442 += 1, R1402 += 1 };
  s1 -> s1 [47, 62] { R1442 += 1, R1402 += 1 };
  s1 -> s1 [64, 65535] { R1442 += 1, R1402 += 1 };
  s2 -> s1 [0, 36] { R1442 += 1, R1402 += 1 };
  s2 -> s2 [0, 65535] { R1442 += 1, R1401 += 1, R1402 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R1442 += 1, R1402 += 1 };
  s2 -> s1 [44, 45] { R1442 += 1, R1402 += 1 };
  s2 -> s1 [47, 62] { R1442 += 1, R1402 += 1 };
  s2 -> s1 [64, 65535] { R1442 += 1, R1402 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1443 += 1, R1444 += 1 };
  s0 -> s1 [0, 65535] { R1444 += 1, R1403 += 1, R1404 += 1 };
  s0 -> s2 [0, 65535] { R1444 += 1, R1404 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1444 += 1, R1403 += 1, R1404 += 1 };
  s1 -> s2 [0, 65535] { R1444 += 1, R1404 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R1444 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1444 += 1, R1404 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R1444 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R1446 += 1, R1406 += 1, R782 += 1 };
  s0 -> s0 [0, 65535] { R1445 += 1, R1446 += 1 };
  s0 -> s2 [0, 65535] { R1446 += 1, R1405 += 1, R1406 += 1 };
  s0 -> s3 [0, 65535] { R1446 += 1, R1406 += 1, R781 += 1, R782 += 1 };
  s0 -> s4 [63, 63] { R1446 += 1, R1406 += 1, R782 += 1 };
  s0 -> s1 [64, 65535] { R1446 += 1, R1406 += 1, R782 += 1 };
  s1 -> s5 [0, 65535] { R1446 += 1 };
  s1 -> s7 [0, 65535] { R1446 += 1, R1406 += 1 };
  s1 -> s1 [0, 65535] { R1446 += 1, R1406 += 1, R782 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R1446 += 1, R1406 += 1, R782 += 1 };
  s2 -> s2 [0, 65535] { R1446 += 1, R1405 += 1, R1406 += 1 };
  s2 -> s3 [0, 65535] { R1446 += 1, R1406 += 1, R781 += 1, R782 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R1446 += 1, R1406 += 1, R782 += 1 };
  s2 -> s1 [64, 65535] { R1446 += 1, R1406 += 1, R782 += 1 };
  s3 -> s1 [0, 62] { R1446 += 1, R1406 += 1, R782 += 1 };
  s3 -> s5 [0, 65535] { R1446 += 1 };
  s3 -> s3 [0, 65535] { R1446 += 1, R1406 += 1, R781 += 1, R782 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R1446 += 1, R1406 += 1, R782 += 1 };
  s3 -> s1 [64, 65535] { R1446 += 1, R1406 += 1, R782 += 1 };
  s4 -> s1 [0, 65535] { R1446 += 1, R1406 += 1, R782 += 1 };
  s5 -> s5 [0, 65535] { R1446 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1446 += 1 };
  s7 -> s7 [0, 65535] { R1446 += 1, R1406 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1447 += 1, R1448 += 1 };
  s0 -> s1 [0, 65535] { R1448 += 1, R1408 += 1, R784 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1448 += 1, R1407 += 1, R1408 += 1 };
  s0 -> s3 [0, 65535] { R1448 += 1, R1408 += 1, R783 += 1, R784 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1448 += 1, R1408 += 1 };
  s1 -> s5 [0, 65535] { R1448 += 1 };
  s1 -> s1 [0, 65535] { R1448 += 1, R1408 += 1, R784 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1448 += 1, R1408 += 1, R784 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1448 += 1, R1407 += 1, R1408 += 1 };
  s2 -> s3 [0, 65535] { R1448 += 1, R1408 += 1, R783 += 1, R784 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1448 += 1 };
  s3 -> s1 [0, 65535] { R1448 += 1, R1408 += 1, R784 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1448 += 1, R1408 += 1, R783 += 1, R784 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1448 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1448 += 1, R1408 += 1 };
  s6 -> s5 [0, 65535] { R1448 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R1450 += 1, R1414 += 1 };
  s0 -> s0 [0, 65535] { R1449 += 1, R1450 += 1 };
  s0 -> s2 [0, 65535] { R1450 += 1, R1413 += 1, R1414 += 1 };
  s0 -> s1 [45, 63] { R1450 += 1, R1414 += 1 };
  s0 -> s3 [88, 88] { R1450 += 1, R1414 += 1 };
  s0 -> s1 [89, 65535] { R1450 += 1, R1414 += 1 };
  s1 -> s1 [0, 43] { R1450 += 1, R1414 += 1 };
  s1 -> s1 [45, 63] { R1450 += 1, R1414 += 1 };
  s1 -> s3 [88, 88] { R1450 += 1, R1414 += 1 };
  s1 -> s1 [89, 65535] { R1450 += 1, R1414 += 1 };
  s2 -> s1 [0, 43] { R1450 += 1, R1414 += 1 };
  s2 -> s2 [0, 65535] { R1450 += 1, R1413 += 1, R1414 += 1 };
  s2 -> s1 [45, 63] { R1450 += 1, R1414 += 1 };
  s2 -> s3 [88, 88] { R1450 += 1, R1414 += 1 };
  s2 -> s1 [89, 65535] { R1450 += 1, R1414 += 1 };
  s3 -> s3 [0, 43] { R1450 += 1, R1414 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1450 += 1 };
  s3 -> s3 [45, 63] { R1450 += 1, R1414 += 1 };
  s3 -> s3 [88, 65535] { R1450 += 1, R1414 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1451 += 1, R1452 += 1 };
  s0 -> s1 [0, 65535] { R1452 += 1, R1416 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R1452 += 1, R1415 += 1, R1416 += 1 };
  s1 -> s1 [0, 65535] { R1452 += 1, R1416 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R1452 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1452 += 1, R1416 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1452 += 1, R1415 += 1, R1416 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1452 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R1454 += 1, R1418 += 1 };
  s0 -> s2 [0, 65535] { R1454 += 1, R1418 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R1454 += 1, R1417 += 1, R1418 += 1 };
  s0 -> s0 [0, 65535] { R1453 += 1, R1454 += 1 };
  s0 -> s4 [58, 58] { R1454 += 1, R1418 += 1 };
  s0 -> s1 [59, 65535] { R1454 += 1, R1418 += 1 };
  s1 -> s1 [0, 57] { R1454 += 1, R1418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1454 += 1 };
  s1 -> s4 [58, 58] { R1454 += 1, R1418 += 1 };
  s1 -> s1 [59, 65535] { R1454 += 1, R1418 += 1 };
  s2 -> s1 [0, 57] { R1454 += 1, R1418 += 1 };
  s2 -> s2 [0, 65535] { R1454 += 1, R1418 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R1454 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R1454 += 1, R1418 += 1 };
  s2 -> s1 [59, 65535] { R1454 += 1, R1418 += 1 };
  s3 -> s1 [0, 57] { R1454 += 1, R1418 += 1 };
  s3 -> s2 [0, 65535] { R1454 += 1, R1418 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R1454 += 1, R1417 += 1, R1418 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R1454 += 1, R1418 += 1 };
  s3 -> s1 [59, 65535] { R1454 += 1, R1418 += 1 };
  s4 -> s4 [0, 65535] { R1454 += 1, R1418 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1454 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R1456 += 1, R1420 += 1 };
  s0 -> s0 [0, 65535] { R1455 += 1, R1456 += 1 };
  s0 -> s2 [0, 65535] { R1456 += 1, R1420 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R1456 += 1, R1419 += 1, R1420 += 1 };
  s0 -> s4 [88, 88] { R1456 += 1, R1420 += 1 };
  s0 -> s1 [89, 65535] { R1456 += 1, R1420 += 1 };
  s1 -> s1 [0, 87] { R1456 += 1, R1420 += 1 };
  s1 -> s1 [0, 65535] { R1456 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R1456 += 1, R1420 += 1 };
  s1 -> s1 [89, 65535] { R1456 += 1, R1420 += 1 };
  s2 -> s1 [0, 87] { R1456 += 1, R1420 += 1 };
  s2 -> s6 [0, 65535] { R1456 += 1 };
  s2 -> s2 [0, 65535] { R1456 += 1, R1420 += 1, R7 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R1456 += 1, R1420 += 1 };
  s2 -> s1 [89, 65535] { R1456 += 1, R1420 += 1 };
  s3 -> s1 [0, 87] { R1456 += 1, R1420 += 1 };
  s3 -> s2 [0, 65535] { R1456 += 1, R1420 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R1456 += 1, R1419 += 1, R1420 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [88, 88] { R1456 += 1, R1420 += 1 };
  s3 -> s1 [89, 65535] { R1456 += 1, R1420 += 1 };
  s4 -> s4 [0, 65535] { R1456 += 1, R1420 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1456 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R1458 += 1, R1422 += 1, R786 += 1 };
  s0 -> s2 [0, 65535] { R1458 += 1, R1421 += 1, R1422 += 1 };
  s0 -> s0 [0, 65535] { R1457 += 1, R1458 += 1 };
  s0 -> s3 [0, 65535] { R1458 += 1, R1422 += 1, R785 += 1, R786 += 1 };
  s0 -> s4 [91, 91] { R1458 += 1, R1422 += 1, R786 += 1 };
  s0 -> s1 [92, 65535] { R1458 += 1, R1422 += 1, R786 += 1 };
  s1 -> s1 [0, 65535] { R1458 += 1, R1422 += 1, R786 += 1 };
  s1 -> s5 [0, 65535] { R1458 += 1 };
  s1 -> s7 [0, 65535] { R1458 += 1, R1422 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R1458 += 1, R1422 += 1, R786 += 1 };
  s2 -> s2 [0, 65535] { R1458 += 1, R1421 += 1, R1422 += 1 };
  s2 -> s3 [0, 65535] { R1458 += 1, R1422 += 1, R785 += 1, R786 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R1458 += 1, R1422 += 1, R786 += 1 };
  s2 -> s1 [92, 65535] { R1458 += 1, R1422 += 1, R786 += 1 };
  s3 -> s1 [0, 90] { R1458 += 1, R1422 += 1, R786 += 1 };
  s3 -> s5 [0, 65535] { R1458 += 1 };
  s3 -> s3 [0, 65535] { R1458 += 1, R1422 += 1, R785 += 1, R786 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R1458 += 1, R1422 += 1, R786 += 1 };
  s3 -> s1 [92, 65535] { R1458 += 1, R1422 += 1, R786 += 1 };
  s4 -> s1 [0, 65535] { R1458 += 1, R1422 += 1, R786 += 1 };
  s5 -> s5 [0, 65535] { R1458 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1458 += 1 };
  s7 -> s7 [0, 65535] { R1458 += 1, R1422 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1460 += 1, R1423 += 1, R1424 += 1 };
  s0 -> s2 [0, 65535] { R1460 += 1, R1424 += 1, R788 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1459 += 1, R1460 += 1 };
  s0 -> s3 [0, 65535] { R1460 += 1, R1424 += 1, R787 += 1, R788 += 1 };
  s1 -> s1 [0, 65535] { R1460 += 1, R1423 += 1, R1424 += 1 };
  s1 -> s2 [0, 65535] { R1460 += 1, R1424 += 1, R788 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R1460 += 1, R1424 += 1, R787 += 1, R788 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1460 += 1, R1424 += 1, R788 += 1, R5 += 1 };
  s2 -> s4 [0, 65535] { R1460 += 1 };
  s2 -> s6 [0, 65535] { R1460 += 1, R1424 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1460 += 1, R1424 += 1, R788 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1460 += 1, R1424 += 1, R787 += 1, R788 += 1 };
  s3 -> s4 [0, 65535] { R1460 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1460 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1460 += 1 };
  s6 -> s6 [0, 65535] { R1460 += 1, R1424 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R1462 += 1, R1426 += 1, R1396 += 1 };
  s0 -> s0 [0, 65535] { R1461 += 1, R1462 += 1 };
  s0 -> s2 [0, 65535] { R1462 += 1, R1425 += 1, R1426 += 1 };
  s0 -> s3 [0, 65535] { R1462 += 1, R1426 += 1, R1395 += 1, R1396 += 1 };
  s0 -> s1 [89, 65535] { R1462 += 1, R1426 += 1, R1396 += 1 };
  s1 -> s1 [0, 87] { R1462 += 1, R1426 += 1, R1396 += 1 };
  s1 -> s1 [0, 65535] { R1462 += 1, R1426 += 1 };
  s1 -> s4 [0, 65535] { R1462 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [89, 65535] { R1462 += 1, R1426 += 1, R1396 += 1 };
  s2 -> s1 [0, 87] { R1462 += 1, R1426 += 1, R1396 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1462 += 1, R1425 += 1, R1426 += 1 };
  s2 -> s3 [0, 65535] { R1462 += 1, R1426 += 1, R1395 += 1, R1396 += 1 };
  s2 -> s1 [89, 65535] { R1462 += 1, R1426 += 1, R1396 += 1 };
  s3 -> s1 [0, 87] { R1462 += 1, R1426 += 1, R1396 += 1 };
  s3 -> s4 [0, 65535] { R1462 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1462 += 1, R1426 += 1, R1395 += 1, R1396 += 1 };
  s3 -> s1 [89, 65535] { R1462 += 1, R1426 += 1, R1396 += 1 };
  s4 -> s4 [0, 65535] { R1462 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1464 += 1, R1428 += 1, R1398 += 1, R779 += 1 };
  s0 -> s2 [0, 65535] { R1464 += 1, R1427 += 1, R1428 += 1 };
  s0 -> s0 [0, 65535] { R1463 += 1, R1464 += 1 };
  s0 -> s3 [0, 65535] { R1464 += 1, R1428 += 1, R1397 += 1, R1398 += 1 };
  s1 -> s1 [0, 65535] { R1464 += 1, R1428 += 1, R1398 += 1, R779 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1464 += 1, R1428 += 1 };
  s1 -> s5 [0, 65535] { R1464 += 1 };
  s2 -> s1 [0, 65535] { R1464 += 1, R1428 += 1, R1398 += 1, R779 += 1 };
  s2 -> s2 [0, 65535] { R1464 += 1, R1427 += 1, R1428 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1464 += 1, R1428 += 1, R1397 += 1, R1398 += 1 };
  s3 -> s1 [0, 65535] { R1464 += 1, R1428 += 1, R1398 += 1, R779 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1464 += 1, R1428 += 1, R1397 += 1, R1398 += 1 };
  s3 -> s5 [0, 65535] { R1464 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1464 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1464 += 1, R1428 += 1 };
  s6 -> s5 [0, 65535] { R1464 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1465 += 1, R1466 += 1 };
  s0 -> s1 [0, 65535] { R1466 += 1, R1430 += 1, R1399 += 1, R1400 += 1 };
  s0 -> s2 [0, 65535] { R1466 += 1, R1429 += 1, R1430 += 1 };
  s0 -> s3 [116, 116] { R1466 += 1, R1430 += 1, R1400 += 1 };
  s1 -> s1 [0, 65535] { R1466 += 1, R1430 += 1, R1399 += 1, R1400 += 1 };
  s1 -> s3 [116, 116] { R1466 += 1, R1430 += 1, R1400 += 1 };
  s2 -> s1 [0, 65535] { R1466 += 1, R1430 += 1, R1399 += 1, R1400 += 1 };
  s2 -> s2 [0, 65535] { R1466 += 1, R1429 += 1, R1430 += 1 };
  s2 -> s3 [116, 116] { R1466 += 1, R1430 += 1, R1400 += 1 };
  s3 -> s3 [0, 65535] { R1466 += 1, R1430 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1466 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1466 += 1 };
  accepting s3, s4, s5;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1468 += 1, R1432 += 1, R1410 += 1, R780 += 1 };
  s0 -> s2 [0, 65535] { R1468 += 1, R1432 += 1, R1409 += 1, R1410 += 1 };
  s0 -> s3 [0, 65535] { R1468 += 1, R1431 += 1, R1432 += 1 };
  s0 -> s0 [0, 65535] { R1467 += 1, R1468 += 1 };
  s1 -> s5 [0, 65535] { R1468 += 1 };
  s1 -> s6 [0, 65535] { R1468 += 1, R1432 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1468 += 1, R1432 += 1, R1410 += 1, R780 += 1 };
  s2 -> s5 [0, 65535] { R1468 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1468 += 1, R1432 += 1, R1410 += 1, R780 += 1 };
  s2 -> s2 [0, 65535] { R1468 += 1, R1432 += 1, R1409 += 1, R1410 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1468 += 1, R1432 += 1, R1410 += 1, R780 += 1 };
  s3 -> s2 [0, 65535] { R1468 += 1, R1432 += 1, R1409 += 1, R1410 += 1 };
  s3 -> s3 [0, 65535] { R1468 += 1, R1431 += 1, R1432 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1468 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1468 += 1 };
  s6 -> s6 [0, 65535] { R1468 += 1, R1432 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1470 += 1, R1433 += 1, R1434 += 1 };
  s0 -> s2 [0, 65535] { R1470 += 1, R1434 += 1, R1411 += 1, R1412 += 1 };
  s0 -> s0 [0, 65535] { R1469 += 1, R1470 += 1 };
  s0 -> s3 [108, 108] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s1 -> s1 [0, 65535] { R1470 += 1, R1433 += 1, R1434 += 1 };
  s1 -> s2 [0, 65535] { R1470 += 1, R1434 += 1, R1411 += 1, R1412 += 1 };
  s1 -> s3 [108, 108] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s2 -> s2 [0, 65535] { R1470 += 1, R1434 += 1, R1411 += 1, R1412 += 1 };
  s2 -> s3 [108, 108] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s3 -> s4 [111, 111] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s4 -> s5 [99, 99] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s5 -> s6 [97, 97] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s6 -> s7 [108, 108] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s7 -> s8 [104, 104] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s8 -> s9 [111, 111] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s9 -> s10 [115, 115] { R1470 += 1, R1434 += 1, R1412 += 1 };
  s10 -> s10 [0, 65535] { R1470 += 1, R1434 += 1 };
  s10 -> s11 [0, 65535] { R1470 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R1470 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s10, s11, s12;
};
};
synchronised {  // Automata constraining P56
automaton P56_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
constraint R1 = R1400 && R2 = R1408 && R3 = R1470 && R11 = 0 && R12 = R1434 && R785 = 0 && R786 = 1 && R787 = 0 && R788 = 1 && R1395 = 0 && R1396 = R1400 && R1397 = 0 && R1398 = R1400 && R1399 = 0 && R1401 - R1434 = 1 && R1402 = R1408 && R1403 - R1434 = 1 && R1404 = R1408 && R1405 - R1434 = 1 && R1406 = R1408 && R1407 - R1434 = 1 && R1411 = 0 && R1412 = 0 && R1413 = 0 && R1414 = R1434 && R1415 = 0 && R1416 = R1434 && R1417 = 0 && R1418 = R1434 && R1419 = 0 && R1420 = R1434 && R1421 = 0 && R1422 = R1434 && R1423 = 0 && R1424 = R1434 && R1425 = 0 && R1426 = R1434 && R1427 = 0 && R1428 = R1434 && R1429 = 0 && R1430 = R1434 && R1431 = 0 && R1432 = R1434 && R1433 = 0 && R1435 = 10 && R1436 = R1470 && R1437 = 10 && R1438 = R1470 && R1439 = 10 && R1440 = R1470 && R1441 = 10 && R1442 = R1470 && R1443 = 10 && R1444 = R1470 && R1445 = 10 && R1446 = R1470 && R1447 = 10 && R1448 = R1470 && R1449 = 10 && R1450 = R1470 && R1451 = 10 && R1452 = R1470 && R1453 = 10 && R1454 = R1470 && R1455 = 10 && R1456 = R1470 && R1457 = 10 && R1458 = R1470 && R1459 = 10 && R1460 = R1470 && R1461 = 10 && R1462 = R1470 && R1463 = 10 && R1464 = R1470 && R1465 = 10 && R1466 = R1470 && R1467 = 10 && R1468 = R1470 && R1469 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R1400 && R1434 < R1408 && -1 < R1434 && 9 < R1470 && (R781 != 0 || ((R4 != 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R0 = R782 || R782 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R782 != 1 || -1 < R0) && (R0 = R782 || R782 = 1))))) && (R783 != 0 || ((R4 != 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R0 = R784 || R784 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R784 != 1 || -1 < R0) && (R0 = R784 || R784 = 1))))) && (R780 = 0 || (R1409 = 0 && R1410 = 0)) && (R781 = 0 || (R4 = 0 && R0 < 0)) && (R783 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
