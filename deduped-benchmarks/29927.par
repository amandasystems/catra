// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R1243, R1244, R1245, R1246, R1247, R1248, R1249, R1250, R1251, R1252, R1253, R1254, R1255, R1256, R1257, R1258, R1259, R1260, R1261, R1262, R1263, R1264, R1265, R1266, R1267, R1268, R1269, R1270, R1271, R1272, R1273, R1274, R1275, R1276, R1277, R1278, R1279, R1280, R1281, R1282, R1283, R1284, R1285, R1286, R1287, R1288, R1289, R1290, R1291, R1292, R1293, R1294, R1295, R1296, R1297, R1298, R1299, R1300, R1301, R1302, R1303, R1304, R1305, R1306, R1307, R1308, R1309, R1310, R1311, R1312, R1313, R1314, R1315, R1316, R1317, R1318, R2, R3, R4, R5, R6, R7, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1284 += 1 };
  s0 -> s0 [0, 65535] { R1283 += 1, R1284 += 1 };
  s0 -> s2 [46, 46] { R1284 += 1 };
  s0 -> s3 [47, 47] { R1284 += 1 };
  s0 -> s1 [48, 65535] { R1284 += 1 };
  s1 -> s1 [0, 45] { R1284 += 1 };
  s1 -> s2 [46, 46] { R1284 += 1 };
  s1 -> s3 [47, 47] { R1284 += 1 };
  s1 -> s1 [48, 65535] { R1284 += 1 };
  s2 -> s1 [0, 45] { R1284 += 1 };
  s2 -> s2 [46, 46] { R1284 += 1 };
  s2 -> s3 [47, 47] { R1284 += 1 };
  s2 -> s1 [48, 114] { R1284 += 1 };
  s2 -> s8 [115, 115] { R1284 += 1 };
  s2 -> s1 [116, 65535] { R1284 += 1 };
  s3 -> s3 [0, 45] { R1284 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1284 += 1 };
  s3 -> s3 [47, 65535] { R1284 += 1 };
  s4 -> s3 [0, 45] { R1284 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1284 += 1 };
  s4 -> s3 [47, 114] { R1284 += 1 };
  s4 -> s5 [115, 115] { R1284 += 1 };
  s4 -> s3 [116, 65535] { R1284 += 1 };
  s5 -> s3 [0, 45] { R1284 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1284 += 1 };
  s5 -> s3 [47, 110] { R1284 += 1 };
  s5 -> s6 [111, 111] { R1284 += 1 };
  s5 -> s3 [112, 65535] { R1284 += 1 };
  s6 -> s3 [0, 45] { R1284 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1284 += 1 };
  s6 -> s3 [47, 98] { R1284 += 1 };
  s6 -> s7 [99, 99] { R1284 += 1 };
  s6 -> s3 [100, 65535] { R1284 += 1 };
  s7 -> s3 [0, 45] { R1284 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1284 += 1 };
  s7 -> s3 [47, 106] { R1284 += 1 };
  s7 -> s3 [108, 65535] { R1284 += 1 };
  s8 -> s1 [0, 45] { R1284 += 1 };
  s8 -> s2 [46, 46] { R1284 += 1 };
  s8 -> s3 [47, 47] { R1284 += 1 };
  s8 -> s1 [48, 110] { R1284 += 1 };
  s8 -> s9 [111, 111] { R1284 += 1 };
  s8 -> s1 [112, 65535] { R1284 += 1 };
  s9 -> s1 [0, 45] { R1284 += 1 };
  s9 -> s2 [46, 46] { R1284 += 1 };
  s9 -> s3 [47, 47] { R1284 += 1 };
  s9 -> s1 [48, 98] { R1284 += 1 };
  s9 -> s10 [99, 99] { R1284 += 1 };
  s9 -> s1 [100, 65535] { R1284 += 1 };
  s10 -> s1 [0, 45] { R1284 += 1 };
  s10 -> s2 [46, 46] { R1284 += 1 };
  s10 -> s3 [47, 47] { R1284 += 1 };
  s10 -> s1 [48, 106] { R1284 += 1 };
  s10 -> s1 [108, 65535] { R1284 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1286 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1285 += 1, R1286 += 1 };
  s1 -> s1 [0, 65535] { R1286 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1288 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R1288 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R1287 += 1, R1288 += 1 };
  s0 -> s3 [47, 47] { R1288 += 1 };
  s0 -> s1 [48, 65535] { R1288 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R1288 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R1288 += 1 };
  s1 -> s1 [48, 65535] { R1288 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R1288 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R1288 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R1288 += 1 };
  s2 -> s1 [48, 65535] { R1288 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R1288 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R1290 += 1, R1250 += 1 };
  s0 -> s2 [0, 65535] { R1290 += 1, R1249 += 1, R1250 += 1 };
  s0 -> s0 [0, 65535] { R1289 += 1, R1290 += 1 };
  s0 -> s1 [38, 42] { R1290 += 1, R1250 += 1 };
  s0 -> s1 [44, 45] { R1290 += 1, R1250 += 1 };
  s0 -> s1 [47, 62] { R1290 += 1, R1250 += 1 };
  s0 -> s1 [64, 65535] { R1290 += 1, R1250 += 1 };
  s1 -> s1 [0, 36] { R1290 += 1, R1250 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1290 += 1 };
  s1 -> s1 [38, 42] { R1290 += 1, R1250 += 1 };
  s1 -> s1 [44, 45] { R1290 += 1, R1250 += 1 };
  s1 -> s1 [47, 62] { R1290 += 1, R1250 += 1 };
  s1 -> s1 [64, 65535] { R1290 += 1, R1250 += 1 };
  s2 -> s1 [0, 36] { R1290 += 1, R1250 += 1 };
  s2 -> s2 [0, 65535] { R1290 += 1, R1249 += 1, R1250 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R1290 += 1, R1250 += 1 };
  s2 -> s1 [44, 45] { R1290 += 1, R1250 += 1 };
  s2 -> s1 [47, 62] { R1290 += 1, R1250 += 1 };
  s2 -> s1 [64, 65535] { R1290 += 1, R1250 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1292 += 1, R1251 += 1, R1252 += 1 };
  s0 -> s0 [0, 65535] { R1291 += 1, R1292 += 1 };
  s0 -> s2 [0, 65535] { R1292 += 1, R1252 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1292 += 1, R1251 += 1, R1252 += 1 };
  s1 -> s2 [0, 65535] { R1292 += 1, R1252 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R1292 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1292 += 1, R1252 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R1292 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R1294 += 1, R1254 += 1, R782 += 1 };
  s0 -> s2 [0, 65535] { R1294 += 1, R1253 += 1, R1254 += 1 };
  s0 -> s0 [0, 65535] { R1293 += 1, R1294 += 1 };
  s0 -> s3 [0, 65535] { R1294 += 1, R1254 += 1, R781 += 1, R782 += 1 };
  s0 -> s4 [63, 63] { R1294 += 1, R1254 += 1, R782 += 1 };
  s0 -> s1 [64, 65535] { R1294 += 1, R1254 += 1, R782 += 1 };
  s1 -> s5 [0, 65535] { R1294 += 1 };
  s1 -> s1 [0, 65535] { R1294 += 1, R1254 += 1, R782 += 1 };
  s1 -> s7 [0, 65535] { R1294 += 1, R1254 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R1294 += 1, R1254 += 1, R782 += 1 };
  s2 -> s2 [0, 65535] { R1294 += 1, R1253 += 1, R1254 += 1 };
  s2 -> s3 [0, 65535] { R1294 += 1, R1254 += 1, R781 += 1, R782 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R1294 += 1, R1254 += 1, R782 += 1 };
  s2 -> s1 [64, 65535] { R1294 += 1, R1254 += 1, R782 += 1 };
  s3 -> s1 [0, 62] { R1294 += 1, R1254 += 1, R782 += 1 };
  s3 -> s5 [0, 65535] { R1294 += 1 };
  s3 -> s3 [0, 65535] { R1294 += 1, R1254 += 1, R781 += 1, R782 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R1294 += 1, R1254 += 1, R782 += 1 };
  s3 -> s1 [64, 65535] { R1294 += 1, R1254 += 1, R782 += 1 };
  s4 -> s1 [0, 65535] { R1294 += 1, R1254 += 1, R782 += 1 };
  s5 -> s5 [0, 65535] { R1294 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1294 += 1 };
  s7 -> s7 [0, 65535] { R1294 += 1, R1254 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1296 += 1, R1255 += 1, R1256 += 1 };
  s0 -> s2 [0, 65535] { R1296 += 1, R1256 += 1, R784 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R1296 += 1, R1256 += 1, R783 += 1, R784 += 1 };
  s0 -> s0 [0, 65535] { R1295 += 1, R1296 += 1 };
  s1 -> s1 [0, 65535] { R1296 += 1, R1255 += 1, R1256 += 1 };
  s1 -> s2 [0, 65535] { R1296 += 1, R1256 += 1, R784 += 1, R4 += 1 };
  s1 -> s3 [0, 65535] { R1296 += 1, R1256 += 1, R783 += 1, R784 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R1296 += 1 };
  s2 -> s2 [0, 65535] { R1296 += 1, R1256 += 1, R784 += 1, R4 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1296 += 1, R1256 += 1 };
  s3 -> s4 [0, 65535] { R1296 += 1 };
  s3 -> s2 [0, 65535] { R1296 += 1, R1256 += 1, R784 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1296 += 1, R1256 += 1, R783 += 1, R784 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1296 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1296 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1296 += 1, R1256 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R1298 += 1, R1262 += 1 };
  s0 -> s2 [0, 65535] { R1298 += 1, R1261 += 1, R1262 += 1 };
  s0 -> s0 [0, 65535] { R1297 += 1, R1298 += 1 };
  s0 -> s1 [45, 63] { R1298 += 1, R1262 += 1 };
  s0 -> s3 [88, 88] { R1298 += 1, R1262 += 1 };
  s0 -> s1 [89, 65535] { R1298 += 1, R1262 += 1 };
  s1 -> s1 [0, 43] { R1298 += 1, R1262 += 1 };
  s1 -> s1 [45, 63] { R1298 += 1, R1262 += 1 };
  s1 -> s3 [88, 88] { R1298 += 1, R1262 += 1 };
  s1 -> s1 [89, 65535] { R1298 += 1, R1262 += 1 };
  s2 -> s1 [0, 43] { R1298 += 1, R1262 += 1 };
  s2 -> s2 [0, 65535] { R1298 += 1, R1261 += 1, R1262 += 1 };
  s2 -> s1 [45, 63] { R1298 += 1, R1262 += 1 };
  s2 -> s3 [88, 88] { R1298 += 1, R1262 += 1 };
  s2 -> s1 [89, 65535] { R1298 += 1, R1262 += 1 };
  s3 -> s3 [0, 43] { R1298 += 1, R1262 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1298 += 1 };
  s3 -> s3 [45, 63] { R1298 += 1, R1262 += 1 };
  s3 -> s3 [88, 65535] { R1298 += 1, R1262 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R1300 += 1, R1264 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1299 += 1, R1300 += 1 };
  s0 -> s2 [0, 65535] { R1300 += 1, R1263 += 1, R1264 += 1 };
  s1 -> s1 [0, 65535] { R1300 += 1, R1264 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R1300 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1300 += 1, R1264 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1300 += 1, R1263 += 1, R1264 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1300 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R1302 += 1, R1266 += 1 };
  s0 -> s0 [0, 65535] { R1301 += 1, R1302 += 1 };
  s0 -> s2 [0, 65535] { R1302 += 1, R1265 += 1, R1266 += 1 };
  s0 -> s3 [0, 65535] { R1302 += 1, R1266 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R1302 += 1, R1266 += 1 };
  s0 -> s1 [59, 65535] { R1302 += 1, R1266 += 1 };
  s1 -> s1 [0, 57] { R1302 += 1, R1266 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1302 += 1 };
  s1 -> s4 [58, 58] { R1302 += 1, R1266 += 1 };
  s1 -> s1 [59, 65535] { R1302 += 1, R1266 += 1 };
  s2 -> s1 [0, 57] { R1302 += 1, R1266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1302 += 1, R1265 += 1, R1266 += 1 };
  s2 -> s3 [0, 65535] { R1302 += 1, R1266 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R1302 += 1, R1266 += 1 };
  s2 -> s1 [59, 65535] { R1302 += 1, R1266 += 1 };
  s3 -> s1 [0, 57] { R1302 += 1, R1266 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1302 += 1 };
  s3 -> s3 [0, 65535] { R1302 += 1, R1266 += 1, R6 += 1 };
  s3 -> s4 [58, 58] { R1302 += 1, R1266 += 1 };
  s3 -> s1 [59, 65535] { R1302 += 1, R1266 += 1 };
  s4 -> s4 [0, 65535] { R1302 += 1, R1266 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1302 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R1304 += 1, R1268 += 1 };
  s0 -> s2 [0, 65535] { R1304 += 1, R1268 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R1303 += 1, R1304 += 1 };
  s0 -> s3 [0, 65535] { R1304 += 1, R1267 += 1, R1268 += 1 };
  s0 -> s4 [88, 88] { R1304 += 1, R1268 += 1 };
  s0 -> s1 [89, 65535] { R1304 += 1, R1268 += 1 };
  s1 -> s1 [0, 87] { R1304 += 1, R1268 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1304 += 1 };
  s1 -> s4 [88, 88] { R1304 += 1, R1268 += 1 };
  s1 -> s1 [89, 65535] { R1304 += 1, R1268 += 1 };
  s2 -> s1 [0, 87] { R1304 += 1, R1268 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1304 += 1, R1268 += 1, R7 += 1 };
  s2 -> s6 [0, 65535] { R1304 += 1 };
  s2 -> s4 [88, 88] { R1304 += 1, R1268 += 1 };
  s2 -> s1 [89, 65535] { R1304 += 1, R1268 += 1 };
  s3 -> s1 [0, 87] { R1304 += 1, R1268 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1304 += 1, R1268 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R1304 += 1, R1267 += 1, R1268 += 1 };
  s3 -> s4 [88, 88] { R1304 += 1, R1268 += 1 };
  s3 -> s1 [89, 65535] { R1304 += 1, R1268 += 1 };
  s4 -> s4 [0, 65535] { R1304 += 1, R1268 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1304 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R1306 += 1, R1270 += 1, R786 += 1 };
  s0 -> s2 [0, 65535] { R1306 += 1, R1270 += 1, R785 += 1, R786 += 1 };
  s0 -> s3 [0, 65535] { R1306 += 1, R1269 += 1, R1270 += 1 };
  s0 -> s0 [0, 65535] { R1305 += 1, R1306 += 1 };
  s0 -> s4 [91, 91] { R1306 += 1, R1270 += 1, R786 += 1 };
  s0 -> s1 [92, 65535] { R1306 += 1, R1270 += 1, R786 += 1 };
  s1 -> s6 [0, 65535] { R1306 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1306 += 1, R1270 += 1, R786 += 1 };
  s1 -> s7 [0, 65535] { R1306 += 1, R1270 += 1 };
  s2 -> s1 [0, 90] { R1306 += 1, R1270 += 1, R786 += 1 };
  s2 -> s6 [0, 65535] { R1306 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1306 += 1, R1270 += 1, R785 += 1, R786 += 1 };
  s2 -> s4 [91, 91] { R1306 += 1, R1270 += 1, R786 += 1 };
  s2 -> s1 [92, 65535] { R1306 += 1, R1270 += 1, R786 += 1 };
  s3 -> s1 [0, 90] { R1306 += 1, R1270 += 1, R786 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1306 += 1, R1270 += 1, R785 += 1, R786 += 1 };
  s3 -> s3 [0, 65535] { R1306 += 1, R1269 += 1, R1270 += 1 };
  s3 -> s4 [91, 91] { R1306 += 1, R1270 += 1, R786 += 1 };
  s3 -> s1 [92, 65535] { R1306 += 1, R1270 += 1, R786 += 1 };
  s4 -> s1 [0, 65535] { R1306 += 1, R1270 += 1, R786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1306 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1306 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1306 += 1, R1270 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1307 += 1, R1308 += 1 };
  s0 -> s1 [0, 65535] { R1308 += 1, R1272 += 1, R788 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R1308 += 1, R1271 += 1, R1272 += 1 };
  s0 -> s3 [0, 65535] { R1308 += 1, R1272 += 1, R787 += 1, R788 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1308 += 1, R1272 += 1 };
  s1 -> s1 [0, 65535] { R1308 += 1, R1272 += 1, R788 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R1308 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1308 += 1, R1272 += 1, R788 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R1308 += 1, R1271 += 1, R1272 += 1 };
  s2 -> s3 [0, 65535] { R1308 += 1, R1272 += 1, R787 += 1, R788 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1308 += 1, R1272 += 1, R788 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1308 += 1, R1272 += 1, R787 += 1, R788 += 1 };
  s3 -> s5 [0, 65535] { R1308 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1308 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1308 += 1, R1272 += 1 };
  s6 -> s5 [0, 65535] { R1308 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R1310 += 1, R1274 += 1, R1244 += 1 };
  s0 -> s0 [0, 65535] { R1309 += 1, R1310 += 1 };
  s0 -> s2 [0, 65535] { R1310 += 1, R1274 += 1, R1243 += 1, R1244 += 1 };
  s0 -> s3 [0, 65535] { R1310 += 1, R1273 += 1, R1274 += 1 };
  s0 -> s1 [89, 65535] { R1310 += 1, R1274 += 1, R1244 += 1 };
  s1 -> s1 [0, 87] { R1310 += 1, R1274 += 1, R1244 += 1 };
  s1 -> s5 [0, 65535] { R1310 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1310 += 1, R1274 += 1 };
  s1 -> s1 [89, 65535] { R1310 += 1, R1274 += 1, R1244 += 1 };
  s2 -> s1 [0, 87] { R1310 += 1, R1274 += 1, R1244 += 1 };
  s2 -> s5 [0, 65535] { R1310 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1310 += 1, R1274 += 1, R1243 += 1, R1244 += 1 };
  s2 -> s1 [89, 65535] { R1310 += 1, R1274 += 1, R1244 += 1 };
  s3 -> s1 [0, 87] { R1310 += 1, R1274 += 1, R1244 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1310 += 1, R1274 += 1, R1243 += 1, R1244 += 1 };
  s3 -> s3 [0, 65535] { R1310 += 1, R1273 += 1, R1274 += 1 };
  s3 -> s1 [89, 65535] { R1310 += 1, R1274 += 1, R1244 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1310 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1312 += 1, R1276 += 1, R1245 += 1, R1246 += 1 };
  s0 -> s0 [0, 65535] { R1311 += 1, R1312 += 1 };
  s0 -> s2 [0, 65535] { R1312 += 1, R1275 += 1, R1276 += 1 };
  s0 -> s3 [0, 65535] { R1312 += 1, R1276 += 1, R1246 += 1, R779 += 1 };
  s1 -> s1 [0, 65535] { R1312 += 1, R1276 += 1, R1245 += 1, R1246 += 1 };
  s1 -> s3 [0, 65535] { R1312 += 1, R1276 += 1, R1246 += 1, R779 += 1 };
  s1 -> s4 [0, 65535] { R1312 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R1312 += 1, R1276 += 1, R1245 += 1, R1246 += 1 };
  s2 -> s2 [0, 65535] { R1312 += 1, R1275 += 1, R1276 += 1 };
  s2 -> s3 [0, 65535] { R1312 += 1, R1276 += 1, R1246 += 1, R779 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1312 += 1, R1276 += 1, R1246 += 1, R779 += 1 };
  s3 -> s4 [0, 65535] { R1312 += 1 };
  s3 -> s5 [0, 65535] { R1312 += 1, R1276 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1312 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1312 += 1 };
  s5 -> s5 [0, 65535] { R1312 += 1, R1276 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1314 += 1, R1277 += 1, R1278 += 1 };
  s0 -> s0 [0, 65535] { R1313 += 1, R1314 += 1 };
  s0 -> s2 [0, 65535] { R1314 += 1, R1278 += 1, R1247 += 1, R1248 += 1 };
  s0 -> s3 [111, 111] { R1314 += 1, R1278 += 1, R1248 += 1 };
  s1 -> s1 [0, 65535] { R1314 += 1, R1277 += 1, R1278 += 1 };
  s1 -> s2 [0, 65535] { R1314 += 1, R1278 += 1, R1247 += 1, R1248 += 1 };
  s1 -> s3 [111, 111] { R1314 += 1, R1278 += 1, R1248 += 1 };
  s2 -> s2 [0, 65535] { R1314 += 1, R1278 += 1, R1247 += 1, R1248 += 1 };
  s2 -> s3 [111, 111] { R1314 += 1, R1278 += 1, R1248 += 1 };
  s3 -> s4 [115, 115] { R1314 += 1, R1278 += 1, R1248 += 1 };
  s4 -> s5 [116, 116] { R1314 += 1, R1278 += 1, R1248 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1314 += 1, R1278 += 1 };
  s5 -> s7 [0, 65535] { R1314 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1314 += 1 };
  accepting s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1316 += 1, R1279 += 1, R1280 += 1 };
  s0 -> s2 [0, 65535] { R1316 += 1, R1280 += 1, R1257 += 1, R1258 += 1 };
  s0 -> s3 [0, 65535] { R1316 += 1, R1280 += 1, R1258 += 1, R780 += 1 };
  s0 -> s0 [0, 65535] { R1315 += 1, R1316 += 1 };
  s1 -> s1 [0, 65535] { R1316 += 1, R1279 += 1, R1280 += 1 };
  s1 -> s2 [0, 65535] { R1316 += 1, R1280 += 1, R1257 += 1, R1258 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1316 += 1, R1280 += 1, R1258 += 1, R780 += 1 };
  s2 -> s2 [0, 65535] { R1316 += 1, R1280 += 1, R1257 += 1, R1258 += 1 };
  s2 -> s4 [0, 65535] { R1316 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1316 += 1, R1280 += 1, R1258 += 1, R780 += 1 };
  s3 -> s4 [0, 65535] { R1316 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1316 += 1, R1280 += 1, R1258 += 1, R780 += 1 };
  s3 -> s6 [0, 65535] { R1316 += 1, R1280 += 1 };
  s4 -> s4 [0, 65535] { R1316 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1316 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1316 += 1, R1280 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1318 += 1, R1281 += 1, R1282 += 1 };
  s0 -> s2 [0, 65535] { R1318 += 1, R1282 += 1, R1259 += 1, R1260 += 1 };
  s0 -> s0 [0, 65535] { R1317 += 1, R1318 += 1 };
  s0 -> s3 [108, 108] { R1318 += 1, R1282 += 1, R1260 += 1 };
  s1 -> s1 [0, 65535] { R1318 += 1, R1281 += 1, R1282 += 1 };
  s1 -> s2 [0, 65535] { R1318 += 1, R1282 += 1, R1259 += 1, R1260 += 1 };
  s1 -> s3 [108, 108] { R1318 += 1, R1282 += 1, R1260 += 1 };
  s2 -> s2 [0, 65535] { R1318 += 1, R1282 += 1, R1259 += 1, R1260 += 1 };
  s2 -> s3 [108, 108] { R1318 += 1, R1282 += 1, R1260 += 1 };
  s3 -> s4 [111, 111] { R1318 += 1, R1282 += 1, R1260 += 1 };
  s4 -> s5 [99, 99] { R1318 += 1, R1282 += 1, R1260 += 1 };
  s5 -> s6 [97, 97] { R1318 += 1, R1282 += 1, R1260 += 1 };
  s6 -> s7 [108, 108] { R1318 += 1, R1282 += 1, R1260 += 1 };
  s7 -> s8 [104, 104] { R1318 += 1, R1282 += 1, R1260 += 1 };
  s8 -> s9 [0, 65535] { R1318 += 1 };
  s8 -> s8 [0, 65535] { R1318 += 1, R1282 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R1318 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s8, s9, s10;
};
};
synchronised {  // Automata constraining P56
automaton P56_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
constraint R1 = R1248 && R2 = R1256 && R3 = R1318 && R11 = 0 && R12 = R1282 && R785 = 0 && R786 = 1 && R787 = 0 && R788 = 1 && R1243 = 0 && R1244 = R1248 && R1245 = 0 && R1246 = R1248 && R1247 = 0 && R1249 - R1282 = 1 && R1250 = R1256 && R1251 - R1282 = 1 && R1252 = R1256 && R1253 - R1282 = 1 && R1254 = R1256 && R1255 - R1282 = 1 && R1259 = 0 && R1260 = 0 && R1261 = 0 && R1262 = R1282 && R1263 = 0 && R1264 = R1282 && R1265 = 0 && R1266 = R1282 && R1267 = 0 && R1268 = R1282 && R1269 = 0 && R1270 = R1282 && R1271 = 0 && R1272 = R1282 && R1273 = 0 && R1274 = R1282 && R1275 = 0 && R1276 = R1282 && R1277 = 0 && R1278 = R1282 && R1279 = 0 && R1280 = R1282 && R1281 = 0 && R1283 = 10 && R1284 = R1318 && R1285 = 10 && R1286 = R1318 && R1287 = 10 && R1288 = R1318 && R1289 = 10 && R1290 = R1318 && R1291 = 10 && R1292 = R1318 && R1293 = 10 && R1294 = R1318 && R1295 = 10 && R1296 = R1318 && R1297 = 10 && R1298 = R1318 && R1299 = 10 && R1300 = R1318 && R1301 = 10 && R1302 = R1318 && R1303 = 10 && R1304 = R1318 && R1305 = 10 && R1306 = R1318 && R1307 = 10 && R1308 = R1318 && R1309 = 10 && R1310 = R1318 && R1311 = 10 && R1312 = R1318 && R1313 = 10 && R1314 = R1318 && R1315 = 10 && R1316 = R1318 && R1317 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R1248 && R1282 < R1256 && -1 < R1282 && 9 < R1318 && (R781 != 0 || ((R4 != 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R0 = R782 || R782 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R782 != 1 || -1 < R0) && (R0 = R782 || R782 = 1))))) && (R783 != 0 || ((R4 != 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R0 = R784 || R784 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R784 != 1 || -1 < R0) && (R0 = R784 || R784 = 1))))) && (R780 = 0 || (R1257 = 0 && R1258 = 0)) && (R781 = 0 || (R4 = 0 && R0 < 0)) && (R783 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
