// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1091, R1092, R1093, R1094, R1095, R1096, R1097, R1098, R1099, R11, R1100, R1101, R1102, R1103, R1104, R1105, R1106, R1107, R1108, R1109, R1110, R1111, R1112, R1113, R1114, R1115, R1116, R1117, R1118, R1119, R1120, R1121, R1122, R1123, R1124, R1125, R1126, R1127, R1128, R1129, R1130, R1131, R1132, R1133, R1134, R1135, R1136, R1137, R1138, R1139, R1140, R1141, R1142, R1143, R1144, R1145, R1146, R1147, R1148, R1149, R1150, R1151, R1152, R1153, R1154, R1155, R1156, R1157, R1158, R1159, R1160, R1161, R1162, R1163, R1164, R1165, R1166, R12, R2, R3, R4, R5, R6, R7, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1132 += 1 };
  s0 -> s0 [0, 65535] { R1131 += 1, R1132 += 1 };
  s0 -> s2 [46, 46] { R1132 += 1 };
  s0 -> s3 [47, 47] { R1132 += 1 };
  s0 -> s1 [48, 65535] { R1132 += 1 };
  s1 -> s1 [0, 45] { R1132 += 1 };
  s1 -> s2 [46, 46] { R1132 += 1 };
  s1 -> s3 [47, 47] { R1132 += 1 };
  s1 -> s1 [48, 65535] { R1132 += 1 };
  s2 -> s1 [0, 45] { R1132 += 1 };
  s2 -> s2 [46, 46] { R1132 += 1 };
  s2 -> s3 [47, 47] { R1132 += 1 };
  s2 -> s1 [48, 114] { R1132 += 1 };
  s2 -> s8 [115, 115] { R1132 += 1 };
  s2 -> s1 [116, 65535] { R1132 += 1 };
  s3 -> s3 [0, 45] { R1132 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1132 += 1 };
  s3 -> s3 [47, 65535] { R1132 += 1 };
  s4 -> s3 [0, 45] { R1132 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1132 += 1 };
  s4 -> s3 [47, 114] { R1132 += 1 };
  s4 -> s5 [115, 115] { R1132 += 1 };
  s4 -> s3 [116, 65535] { R1132 += 1 };
  s5 -> s3 [0, 45] { R1132 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1132 += 1 };
  s5 -> s3 [47, 110] { R1132 += 1 };
  s5 -> s6 [111, 111] { R1132 += 1 };
  s5 -> s3 [112, 65535] { R1132 += 1 };
  s6 -> s3 [0, 45] { R1132 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1132 += 1 };
  s6 -> s3 [47, 98] { R1132 += 1 };
  s6 -> s7 [99, 99] { R1132 += 1 };
  s6 -> s3 [100, 65535] { R1132 += 1 };
  s7 -> s3 [0, 45] { R1132 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1132 += 1 };
  s7 -> s3 [47, 106] { R1132 += 1 };
  s7 -> s3 [108, 65535] { R1132 += 1 };
  s8 -> s1 [0, 45] { R1132 += 1 };
  s8 -> s2 [46, 46] { R1132 += 1 };
  s8 -> s3 [47, 47] { R1132 += 1 };
  s8 -> s1 [48, 110] { R1132 += 1 };
  s8 -> s9 [111, 111] { R1132 += 1 };
  s8 -> s1 [112, 65535] { R1132 += 1 };
  s9 -> s1 [0, 45] { R1132 += 1 };
  s9 -> s2 [46, 46] { R1132 += 1 };
  s9 -> s3 [47, 47] { R1132 += 1 };
  s9 -> s1 [48, 98] { R1132 += 1 };
  s9 -> s10 [99, 99] { R1132 += 1 };
  s9 -> s1 [100, 65535] { R1132 += 1 };
  s10 -> s1 [0, 45] { R1132 += 1 };
  s10 -> s2 [46, 46] { R1132 += 1 };
  s10 -> s3 [47, 47] { R1132 += 1 };
  s10 -> s1 [48, 106] { R1132 += 1 };
  s10 -> s1 [108, 65535] { R1132 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1134 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1133 += 1, R1134 += 1 };
  s1 -> s1 [0, 65535] { R1134 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1136 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R1135 += 1, R1136 += 1 };
  s0 -> s2 [0, 65535] { R1136 += 1, R11 += 1, R12 += 1 };
  s0 -> s3 [47, 47] { R1136 += 1 };
  s0 -> s1 [48, 65535] { R1136 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R1136 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R1136 += 1 };
  s1 -> s1 [48, 65535] { R1136 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R1136 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R1136 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R1136 += 1 };
  s2 -> s1 [48, 65535] { R1136 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R1136 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R1138 += 1, R1098 += 1 };
  s0 -> s2 [0, 65535] { R1138 += 1, R1097 += 1, R1098 += 1 };
  s0 -> s0 [0, 65535] { R1137 += 1, R1138 += 1 };
  s0 -> s1 [38, 42] { R1138 += 1, R1098 += 1 };
  s0 -> s1 [44, 45] { R1138 += 1, R1098 += 1 };
  s0 -> s1 [47, 62] { R1138 += 1, R1098 += 1 };
  s0 -> s1 [64, 65535] { R1138 += 1, R1098 += 1 };
  s1 -> s1 [0, 36] { R1138 += 1, R1098 += 1 };
  s1 -> s1 [0, 65535] { R1138 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R1138 += 1, R1098 += 1 };
  s1 -> s1 [44, 45] { R1138 += 1, R1098 += 1 };
  s1 -> s1 [47, 62] { R1138 += 1, R1098 += 1 };
  s1 -> s1 [64, 65535] { R1138 += 1, R1098 += 1 };
  s2 -> s1 [0, 36] { R1138 += 1, R1098 += 1 };
  s2 -> s2 [0, 65535] { R1138 += 1, R1097 += 1, R1098 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R1138 += 1, R1098 += 1 };
  s2 -> s1 [44, 45] { R1138 += 1, R1098 += 1 };
  s2 -> s1 [47, 62] { R1138 += 1, R1098 += 1 };
  s2 -> s1 [64, 65535] { R1138 += 1, R1098 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1140 += 1, R1099 += 1, R1100 += 1 };
  s0 -> s0 [0, 65535] { R1139 += 1, R1140 += 1 };
  s0 -> s2 [0, 65535] { R1140 += 1, R1100 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1140 += 1, R1099 += 1, R1100 += 1 };
  s1 -> s2 [0, 65535] { R1140 += 1, R1100 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1140 += 1, R1100 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R1140 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1140 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R1142 += 1, R1102 += 1, R782 += 1 };
  s0 -> s2 [0, 65535] { R1142 += 1, R1102 += 1, R781 += 1, R782 += 1 };
  s0 -> s3 [0, 65535] { R1142 += 1, R1101 += 1, R1102 += 1 };
  s0 -> s0 [0, 65535] { R1141 += 1, R1142 += 1 };
  s0 -> s4 [63, 63] { R1142 += 1, R1102 += 1, R782 += 1 };
  s0 -> s1 [64, 65535] { R1142 += 1, R1102 += 1, R782 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1142 += 1, R1102 += 1, R782 += 1 };
  s1 -> s7 [0, 65535] { R1142 += 1, R1102 += 1 };
  s1 -> s6 [0, 65535] { R1142 += 1 };
  s2 -> s1 [0, 62] { R1142 += 1, R1102 += 1, R782 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1142 += 1, R1102 += 1, R781 += 1, R782 += 1 };
  s2 -> s6 [0, 65535] { R1142 += 1 };
  s2 -> s4 [63, 63] { R1142 += 1, R1102 += 1, R782 += 1 };
  s2 -> s1 [64, 65535] { R1142 += 1, R1102 += 1, R782 += 1 };
  s3 -> s1 [0, 62] { R1142 += 1, R1102 += 1, R782 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1142 += 1, R1102 += 1, R781 += 1, R782 += 1 };
  s3 -> s3 [0, 65535] { R1142 += 1, R1101 += 1, R1102 += 1 };
  s3 -> s4 [63, 63] { R1142 += 1, R1102 += 1, R782 += 1 };
  s3 -> s1 [64, 65535] { R1142 += 1, R1102 += 1, R782 += 1 };
  s4 -> s1 [0, 65535] { R1142 += 1, R1102 += 1, R782 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1142 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1142 += 1, R1102 += 1 };
  s7 -> s6 [0, 65535] { R1142 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1143 += 1, R1144 += 1 };
  s0 -> s1 [0, 65535] { R1144 += 1, R1104 += 1, R784 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1144 += 1, R1103 += 1, R1104 += 1 };
  s0 -> s3 [0, 65535] { R1144 += 1, R1104 += 1, R783 += 1, R784 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1144 += 1, R1104 += 1, R784 += 1, R4 += 1 };
  s1 -> s5 [0, 65535] { R1144 += 1 };
  s1 -> s6 [0, 65535] { R1144 += 1, R1104 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1144 += 1, R1104 += 1, R784 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1144 += 1, R1103 += 1, R1104 += 1 };
  s2 -> s3 [0, 65535] { R1144 += 1, R1104 += 1, R783 += 1, R784 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1144 += 1, R1104 += 1, R784 += 1, R4 += 1 };
  s3 -> s5 [0, 65535] { R1144 += 1 };
  s3 -> s3 [0, 65535] { R1144 += 1, R1104 += 1, R783 += 1, R784 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1144 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1144 += 1 };
  s6 -> s6 [0, 65535] { R1144 += 1, R1104 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R1146 += 1, R1110 += 1 };
  s0 -> s2 [0, 65535] { R1146 += 1, R1109 += 1, R1110 += 1 };
  s0 -> s0 [0, 65535] { R1145 += 1, R1146 += 1 };
  s0 -> s1 [45, 63] { R1146 += 1, R1110 += 1 };
  s0 -> s3 [88, 88] { R1146 += 1, R1110 += 1 };
  s0 -> s1 [89, 65535] { R1146 += 1, R1110 += 1 };
  s1 -> s1 [0, 43] { R1146 += 1, R1110 += 1 };
  s1 -> s1 [45, 63] { R1146 += 1, R1110 += 1 };
  s1 -> s3 [88, 88] { R1146 += 1, R1110 += 1 };
  s1 -> s1 [89, 65535] { R1146 += 1, R1110 += 1 };
  s2 -> s1 [0, 43] { R1146 += 1, R1110 += 1 };
  s2 -> s2 [0, 65535] { R1146 += 1, R1109 += 1, R1110 += 1 };
  s2 -> s1 [45, 63] { R1146 += 1, R1110 += 1 };
  s2 -> s3 [88, 88] { R1146 += 1, R1110 += 1 };
  s2 -> s1 [89, 65535] { R1146 += 1, R1110 += 1 };
  s3 -> s3 [0, 43] { R1146 += 1, R1110 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1146 += 1 };
  s3 -> s3 [45, 63] { R1146 += 1, R1110 += 1 };
  s3 -> s3 [88, 65535] { R1146 += 1, R1110 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R1148 += 1, R1112 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R1148 += 1, R1111 += 1, R1112 += 1 };
  s0 -> s0 [0, 65535] { R1147 += 1, R1148 += 1 };
  s1 -> s4 [0, 65535] { R1148 += 1 };
  s1 -> s1 [0, 65535] { R1148 += 1, R1112 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1148 += 1, R1112 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1148 += 1, R1111 += 1, R1112 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1148 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R1150 += 1, R1114 += 1 };
  s0 -> s0 [0, 65535] { R1149 += 1, R1150 += 1 };
  s0 -> s2 [0, 65535] { R1150 += 1, R1114 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R1150 += 1, R1113 += 1, R1114 += 1 };
  s0 -> s4 [58, 58] { R1150 += 1, R1114 += 1 };
  s0 -> s1 [59, 65535] { R1150 += 1, R1114 += 1 };
  s1 -> s1 [0, 57] { R1150 += 1, R1114 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1150 += 1 };
  s1 -> s4 [58, 58] { R1150 += 1, R1114 += 1 };
  s1 -> s1 [59, 65535] { R1150 += 1, R1114 += 1 };
  s2 -> s1 [0, 57] { R1150 += 1, R1114 += 1 };
  s2 -> s2 [0, 65535] { R1150 += 1, R1114 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1150 += 1 };
  s2 -> s4 [58, 58] { R1150 += 1, R1114 += 1 };
  s2 -> s1 [59, 65535] { R1150 += 1, R1114 += 1 };
  s3 -> s1 [0, 57] { R1150 += 1, R1114 += 1 };
  s3 -> s2 [0, 65535] { R1150 += 1, R1114 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1150 += 1, R1113 += 1, R1114 += 1 };
  s3 -> s4 [58, 58] { R1150 += 1, R1114 += 1 };
  s3 -> s1 [59, 65535] { R1150 += 1, R1114 += 1 };
  s4 -> s4 [0, 65535] { R1150 += 1, R1114 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1150 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R1152 += 1, R1116 += 1 };
  s0 -> s2 [0, 65535] { R1152 += 1, R1116 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R1152 += 1, R1115 += 1, R1116 += 1 };
  s0 -> s0 [0, 65535] { R1151 += 1, R1152 += 1 };
  s0 -> s4 [88, 88] { R1152 += 1, R1116 += 1 };
  s0 -> s1 [89, 65535] { R1152 += 1, R1116 += 1 };
  s1 -> s1 [0, 87] { R1152 += 1, R1116 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1152 += 1 };
  s1 -> s4 [88, 88] { R1152 += 1, R1116 += 1 };
  s1 -> s1 [89, 65535] { R1152 += 1, R1116 += 1 };
  s2 -> s1 [0, 87] { R1152 += 1, R1116 += 1 };
  s2 -> s2 [0, 65535] { R1152 += 1, R1116 += 1, R7 += 1 };
  s2 -> s6 [0, 65535] { R1152 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R1152 += 1, R1116 += 1 };
  s2 -> s1 [89, 65535] { R1152 += 1, R1116 += 1 };
  s3 -> s1 [0, 87] { R1152 += 1, R1116 += 1 };
  s3 -> s2 [0, 65535] { R1152 += 1, R1116 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R1152 += 1, R1115 += 1, R1116 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [88, 88] { R1152 += 1, R1116 += 1 };
  s3 -> s1 [89, 65535] { R1152 += 1, R1116 += 1 };
  s4 -> s4 [0, 65535] { R1152 += 1, R1116 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1152 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R1154 += 1, R1118 += 1, R786 += 1 };
  s0 -> s2 [0, 65535] { R1154 += 1, R1118 += 1, R785 += 1, R786 += 1 };
  s0 -> s0 [0, 65535] { R1153 += 1, R1154 += 1 };
  s0 -> s3 [0, 65535] { R1154 += 1, R1117 += 1, R1118 += 1 };
  s0 -> s4 [91, 91] { R1154 += 1, R1118 += 1, R786 += 1 };
  s0 -> s1 [92, 65535] { R1154 += 1, R1118 += 1, R786 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1154 += 1, R1118 += 1, R786 += 1 };
  s1 -> s7 [0, 65535] { R1154 += 1, R1118 += 1 };
  s1 -> s6 [0, 65535] { R1154 += 1 };
  s2 -> s1 [0, 90] { R1154 += 1, R1118 += 1, R786 += 1 };
  s2 -> s2 [0, 65535] { R1154 += 1, R1118 += 1, R785 += 1, R786 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1154 += 1 };
  s2 -> s4 [91, 91] { R1154 += 1, R1118 += 1, R786 += 1 };
  s2 -> s1 [92, 65535] { R1154 += 1, R1118 += 1, R786 += 1 };
  s3 -> s1 [0, 90] { R1154 += 1, R1118 += 1, R786 += 1 };
  s3 -> s2 [0, 65535] { R1154 += 1, R1118 += 1, R785 += 1, R786 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1154 += 1, R1117 += 1, R1118 += 1 };
  s3 -> s4 [91, 91] { R1154 += 1, R1118 += 1, R786 += 1 };
  s3 -> s1 [92, 65535] { R1154 += 1, R1118 += 1, R786 += 1 };
  s4 -> s1 [0, 65535] { R1154 += 1, R1118 += 1, R786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1154 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1154 += 1, R1118 += 1 };
  s7 -> s6 [0, 65535] { R1154 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1155 += 1, R1156 += 1 };
  s0 -> s1 [0, 65535] { R1156 += 1, R1120 += 1, R788 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R1156 += 1, R1120 += 1, R787 += 1, R788 += 1 };
  s0 -> s3 [0, 65535] { R1156 += 1, R1119 += 1, R1120 += 1 };
  s1 -> s6 [0, 65535] { R1156 += 1, R1120 += 1 };
  s1 -> s5 [0, 65535] { R1156 += 1 };
  s1 -> s1 [0, 65535] { R1156 += 1, R1120 += 1, R788 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1156 += 1 };
  s2 -> s1 [0, 65535] { R1156 += 1, R1120 += 1, R788 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R1156 += 1, R1120 += 1, R787 += 1, R788 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1156 += 1, R1120 += 1, R788 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R1156 += 1, R1120 += 1, R787 += 1, R788 += 1 };
  s3 -> s3 [0, 65535] { R1156 += 1, R1119 += 1, R1120 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1156 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1156 += 1, R1120 += 1 };
  s6 -> s5 [0, 65535] { R1156 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R1158 += 1, R1122 += 1, R1092 += 1 };
  s0 -> s2 [0, 65535] { R1158 += 1, R1122 += 1, R1091 += 1, R1092 += 1 };
  s0 -> s0 [0, 65535] { R1157 += 1, R1158 += 1 };
  s0 -> s3 [0, 65535] { R1158 += 1, R1121 += 1, R1122 += 1 };
  s0 -> s1 [89, 65535] { R1158 += 1, R1122 += 1, R1092 += 1 };
  s1 -> s1 [0, 87] { R1158 += 1, R1122 += 1, R1092 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1158 += 1 };
  s1 -> s1 [0, 65535] { R1158 += 1, R1122 += 1 };
  s1 -> s1 [89, 65535] { R1158 += 1, R1122 += 1, R1092 += 1 };
  s2 -> s1 [0, 87] { R1158 += 1, R1122 += 1, R1092 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1158 += 1, R1122 += 1, R1091 += 1, R1092 += 1 };
  s2 -> s5 [0, 65535] { R1158 += 1 };
  s2 -> s1 [89, 65535] { R1158 += 1, R1122 += 1, R1092 += 1 };
  s3 -> s1 [0, 87] { R1158 += 1, R1122 += 1, R1092 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1158 += 1, R1122 += 1, R1091 += 1, R1092 += 1 };
  s3 -> s3 [0, 65535] { R1158 += 1, R1121 += 1, R1122 += 1 };
  s3 -> s1 [89, 65535] { R1158 += 1, R1122 += 1, R1092 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1158 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1160 += 1, R1124 += 1, R1093 += 1, R1094 += 1 };
  s0 -> s0 [0, 65535] { R1159 += 1, R1160 += 1 };
  s0 -> s2 [0, 65535] { R1160 += 1, R1123 += 1, R1124 += 1 };
  s0 -> s3 [0, 65535] { R1160 += 1, R1124 += 1, R1094 += 1, R779 += 1 };
  s1 -> s5 [0, 65535] { R1160 += 1 };
  s1 -> s1 [0, 65535] { R1160 += 1, R1124 += 1, R1093 += 1, R1094 += 1 };
  s1 -> s3 [0, 65535] { R1160 += 1, R1124 += 1, R1094 += 1, R779 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R1160 += 1, R1124 += 1, R1093 += 1, R1094 += 1 };
  s2 -> s2 [0, 65535] { R1160 += 1, R1123 += 1, R1124 += 1 };
  s2 -> s3 [0, 65535] { R1160 += 1, R1124 += 1, R1094 += 1, R779 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1160 += 1, R1124 += 1 };
  s3 -> s5 [0, 65535] { R1160 += 1 };
  s3 -> s3 [0, 65535] { R1160 += 1, R1124 += 1, R1094 += 1, R779 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1160 += 1, R1124 += 1 };
  s4 -> s5 [0, 65535] { R1160 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1160 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1161 += 1, R1162 += 1 };
  s0 -> s1 [0, 65535] { R1162 += 1, R1126 += 1, R1095 += 1, R1096 += 1 };
  s0 -> s2 [0, 65535] { R1162 += 1, R1125 += 1, R1126 += 1 };
  s0 -> s3 [108, 108] { R1162 += 1, R1126 += 1, R1096 += 1 };
  s1 -> s1 [0, 65535] { R1162 += 1, R1126 += 1, R1095 += 1, R1096 += 1 };
  s1 -> s3 [108, 108] { R1162 += 1, R1126 += 1, R1096 += 1 };
  s2 -> s1 [0, 65535] { R1162 += 1, R1126 += 1, R1095 += 1, R1096 += 1 };
  s2 -> s2 [0, 65535] { R1162 += 1, R1125 += 1, R1126 += 1 };
  s2 -> s3 [108, 108] { R1162 += 1, R1126 += 1, R1096 += 1 };
  s3 -> s4 [104, 104] { R1162 += 1, R1126 += 1, R1096 += 1 };
  s4 -> s5 [111, 111] { R1162 += 1, R1126 += 1, R1096 += 1 };
  s5 -> s6 [115, 115] { R1162 += 1, R1126 += 1, R1096 += 1 };
  s6 -> s7 [116, 116] { R1162 += 1, R1126 += 1, R1096 += 1 };
  s7 -> s7 [0, 65535] { R1162 += 1, R1126 += 1 };
  s7 -> s8 [0, 65535] { R1162 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1162 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s7, s8, s9;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1164 += 1, R1128 += 1, R1106 += 1, R780 += 1 };
  s0 -> s0 [0, 65535] { R1163 += 1, R1164 += 1 };
  s0 -> s2 [0, 65535] { R1164 += 1, R1128 += 1, R1105 += 1, R1106 += 1 };
  s0 -> s3 [0, 65535] { R1164 += 1, R1127 += 1, R1128 += 1 };
  s1 -> s1 [0, 65535] { R1164 += 1, R1128 += 1, R1106 += 1, R780 += 1 };
  s1 -> s6 [0, 65535] { R1164 += 1, R1128 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1164 += 1 };
  s2 -> s1 [0, 65535] { R1164 += 1, R1128 += 1, R1106 += 1, R780 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1164 += 1, R1128 += 1, R1105 += 1, R1106 += 1 };
  s2 -> s5 [0, 65535] { R1164 += 1 };
  s3 -> s1 [0, 65535] { R1164 += 1, R1128 += 1, R1106 += 1, R780 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1164 += 1, R1128 += 1, R1105 += 1, R1106 += 1 };
  s3 -> s3 [0, 65535] { R1164 += 1, R1127 += 1, R1128 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1164 += 1 };
  s6 -> s6 [0, 65535] { R1164 += 1, R1128 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1164 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1166 += 1, R1130 += 1, R1107 += 1, R1108 += 1 };
  s0 -> s0 [0, 65535] { R1165 += 1, R1166 += 1 };
  s0 -> s2 [0, 65535] { R1166 += 1, R1129 += 1, R1130 += 1 };
  s0 -> s3 [108, 108] { R1166 += 1, R1130 += 1, R1108 += 1 };
  s1 -> s1 [0, 65535] { R1166 += 1, R1130 += 1, R1107 += 1, R1108 += 1 };
  s1 -> s3 [108, 108] { R1166 += 1, R1130 += 1, R1108 += 1 };
  s2 -> s1 [0, 65535] { R1166 += 1, R1130 += 1, R1107 += 1, R1108 += 1 };
  s2 -> s2 [0, 65535] { R1166 += 1, R1129 += 1, R1130 += 1 };
  s2 -> s3 [108, 108] { R1166 += 1, R1130 += 1, R1108 += 1 };
  s3 -> s4 [111, 111] { R1166 += 1, R1130 += 1, R1108 += 1 };
  s4 -> s5 [99, 99] { R1166 += 1, R1130 += 1, R1108 += 1 };
  s5 -> s6 [97, 97] { R1166 += 1, R1130 += 1, R1108 += 1 };
  s6 -> s6 [0, 65535] { R1166 += 1, R1130 += 1 };
  s6 -> s7 [0, 65535] { R1166 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1166 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s6, s7, s8;
};
};
synchronised {  // Automata constraining P56
automaton P56_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
constraint R1 = R1096 && R2 = R1104 && R3 = R1166 && R11 = 0 && R12 = R1130 && R785 = 0 && R786 = 1 && R787 = 0 && R788 = 1 && R1091 = 0 && R1092 = R1096 && R1093 = 0 && R1094 = R1096 && R1095 = 0 && R1097 - R1130 = 1 && R1098 = R1104 && R1099 - R1130 = 1 && R1100 = R1104 && R1101 - R1130 = 1 && R1102 = R1104 && R1103 - R1130 = 1 && R1107 = 0 && R1108 = 0 && R1109 = 0 && R1110 = R1130 && R1111 = 0 && R1112 = R1130 && R1113 = 0 && R1114 = R1130 && R1115 = 0 && R1116 = R1130 && R1117 = 0 && R1118 = R1130 && R1119 = 0 && R1120 = R1130 && R1121 = 0 && R1122 = R1130 && R1123 = 0 && R1124 = R1130 && R1125 = 0 && R1126 = R1130 && R1127 = 0 && R1128 = R1130 && R1129 = 0 && R1131 = 10 && R1132 = R1166 && R1133 = 10 && R1134 = R1166 && R1135 = 10 && R1136 = R1166 && R1137 = 10 && R1138 = R1166 && R1139 = 10 && R1140 = R1166 && R1141 = 10 && R1142 = R1166 && R1143 = 10 && R1144 = R1166 && R1145 = 10 && R1146 = R1166 && R1147 = 10 && R1148 = R1166 && R1149 = 10 && R1150 = R1166 && R1151 = 10 && R1152 = R1166 && R1153 = 10 && R1154 = R1166 && R1155 = 10 && R1156 = R1166 && R1157 = 10 && R1158 = R1166 && R1159 = 10 && R1160 = R1166 && R1161 = 10 && R1162 = R1166 && R1163 = 10 && R1164 = R1166 && R1165 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R1096 && R1130 < R1104 && -1 < R1130 && 9 < R1166 && (R781 != 0 || ((R4 != 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R0 = R782 || R782 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R782 != 1 || -1 < R0) && (R0 = R782 || R782 = 1))))) && (R783 != 0 || ((R4 != 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R0 = R784 || R784 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R784 != 1 || -1 < R0) && (R0 = R784 || R784 = 1))))) && (R780 = 0 || (R1105 = 0 && R1106 = 0)) && (R781 = 0 || (R4 = 0 && R0 < 0)) && (R783 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
