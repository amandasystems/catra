// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R1167, R1168, R1169, R1170, R1171, R1172, R1173, R1174, R1175, R1176, R1177, R1178, R1179, R1180, R1181, R1182, R1183, R1184, R1185, R1186, R1187, R1188, R1189, R1190, R1191, R1192, R1193, R1194, R1195, R1196, R1197, R1198, R1199, R12, R1200, R1201, R1202, R1203, R1204, R1205, R1206, R1207, R1208, R1209, R1210, R1211, R1212, R1213, R1214, R1215, R1216, R1217, R1218, R1219, R1220, R1221, R1222, R1223, R1224, R1225, R1226, R1227, R1228, R1229, R1230, R1231, R1232, R1233, R1234, R1235, R1236, R1237, R1238, R1239, R1240, R1241, R1242, R2, R3, R4, R5, R6, R7, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1208 += 1 };
  s0 -> s0 [0, 65535] { R1207 += 1, R1208 += 1 };
  s0 -> s2 [46, 46] { R1208 += 1 };
  s0 -> s3 [47, 47] { R1208 += 1 };
  s0 -> s1 [48, 65535] { R1208 += 1 };
  s1 -> s1 [0, 45] { R1208 += 1 };
  s1 -> s2 [46, 46] { R1208 += 1 };
  s1 -> s3 [47, 47] { R1208 += 1 };
  s1 -> s1 [48, 65535] { R1208 += 1 };
  s2 -> s1 [0, 45] { R1208 += 1 };
  s2 -> s2 [46, 46] { R1208 += 1 };
  s2 -> s3 [47, 47] { R1208 += 1 };
  s2 -> s1 [48, 114] { R1208 += 1 };
  s2 -> s8 [115, 115] { R1208 += 1 };
  s2 -> s1 [116, 65535] { R1208 += 1 };
  s3 -> s3 [0, 45] { R1208 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1208 += 1 };
  s3 -> s3 [47, 65535] { R1208 += 1 };
  s4 -> s3 [0, 45] { R1208 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1208 += 1 };
  s4 -> s3 [47, 114] { R1208 += 1 };
  s4 -> s5 [115, 115] { R1208 += 1 };
  s4 -> s3 [116, 65535] { R1208 += 1 };
  s5 -> s3 [0, 45] { R1208 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1208 += 1 };
  s5 -> s3 [47, 110] { R1208 += 1 };
  s5 -> s6 [111, 111] { R1208 += 1 };
  s5 -> s3 [112, 65535] { R1208 += 1 };
  s6 -> s3 [0, 45] { R1208 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1208 += 1 };
  s6 -> s3 [47, 98] { R1208 += 1 };
  s6 -> s7 [99, 99] { R1208 += 1 };
  s6 -> s3 [100, 65535] { R1208 += 1 };
  s7 -> s3 [0, 45] { R1208 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1208 += 1 };
  s7 -> s3 [47, 106] { R1208 += 1 };
  s7 -> s3 [108, 65535] { R1208 += 1 };
  s8 -> s1 [0, 45] { R1208 += 1 };
  s8 -> s2 [46, 46] { R1208 += 1 };
  s8 -> s3 [47, 47] { R1208 += 1 };
  s8 -> s1 [48, 110] { R1208 += 1 };
  s8 -> s9 [111, 111] { R1208 += 1 };
  s8 -> s1 [112, 65535] { R1208 += 1 };
  s9 -> s1 [0, 45] { R1208 += 1 };
  s9 -> s2 [46, 46] { R1208 += 1 };
  s9 -> s3 [47, 47] { R1208 += 1 };
  s9 -> s1 [48, 98] { R1208 += 1 };
  s9 -> s10 [99, 99] { R1208 += 1 };
  s9 -> s1 [100, 65535] { R1208 += 1 };
  s10 -> s1 [0, 45] { R1208 += 1 };
  s10 -> s2 [46, 46] { R1208 += 1 };
  s10 -> s3 [47, 47] { R1208 += 1 };
  s10 -> s1 [48, 106] { R1208 += 1 };
  s10 -> s1 [108, 65535] { R1208 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1210 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1209 += 1, R1210 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1210 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1212 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R1211 += 1, R1212 += 1 };
  s0 -> s2 [0, 65535] { R1212 += 1, R11 += 1, R12 += 1 };
  s0 -> s3 [47, 47] { R1212 += 1 };
  s0 -> s1 [48, 65535] { R1212 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R1212 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R1212 += 1 };
  s1 -> s1 [48, 65535] { R1212 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R1212 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R1212 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R1212 += 1 };
  s2 -> s1 [48, 65535] { R1212 += 1, R12 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1212 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R1214 += 1, R1174 += 1 };
  s0 -> s2 [0, 65535] { R1214 += 1, R1173 += 1, R1174 += 1 };
  s0 -> s0 [0, 65535] { R1213 += 1, R1214 += 1 };
  s0 -> s1 [38, 42] { R1214 += 1, R1174 += 1 };
  s0 -> s1 [44, 45] { R1214 += 1, R1174 += 1 };
  s0 -> s1 [47, 62] { R1214 += 1, R1174 += 1 };
  s0 -> s1 [64, 65535] { R1214 += 1, R1174 += 1 };
  s1 -> s1 [0, 36] { R1214 += 1, R1174 += 1 };
  s1 -> s1 [0, 65535] { R1214 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R1214 += 1, R1174 += 1 };
  s1 -> s1 [44, 45] { R1214 += 1, R1174 += 1 };
  s1 -> s1 [47, 62] { R1214 += 1, R1174 += 1 };
  s1 -> s1 [64, 65535] { R1214 += 1, R1174 += 1 };
  s2 -> s1 [0, 36] { R1214 += 1, R1174 += 1 };
  s2 -> s2 [0, 65535] { R1214 += 1, R1173 += 1, R1174 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R1214 += 1, R1174 += 1 };
  s2 -> s1 [44, 45] { R1214 += 1, R1174 += 1 };
  s2 -> s1 [47, 62] { R1214 += 1, R1174 += 1 };
  s2 -> s1 [64, 65535] { R1214 += 1, R1174 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1216 += 1, R1176 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R1215 += 1, R1216 += 1 };
  s0 -> s2 [0, 65535] { R1216 += 1, R1175 += 1, R1176 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1216 += 1, R1176 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R1216 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1216 += 1, R1176 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R1216 += 1, R1175 += 1, R1176 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1216 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R1218 += 1, R1178 += 1, R782 += 1 };
  s0 -> s2 [0, 65535] { R1218 += 1, R1177 += 1, R1178 += 1 };
  s0 -> s3 [0, 65535] { R1218 += 1, R1178 += 1, R781 += 1, R782 += 1 };
  s0 -> s0 [0, 65535] { R1217 += 1, R1218 += 1 };
  s0 -> s4 [63, 63] { R1218 += 1, R1178 += 1, R782 += 1 };
  s0 -> s1 [64, 65535] { R1218 += 1, R1178 += 1, R782 += 1 };
  s1 -> s1 [0, 65535] { R1218 += 1, R1178 += 1, R782 += 1 };
  s1 -> s5 [0, 65535] { R1218 += 1 };
  s1 -> s7 [0, 65535] { R1218 += 1, R1178 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R1218 += 1, R1178 += 1, R782 += 1 };
  s2 -> s2 [0, 65535] { R1218 += 1, R1177 += 1, R1178 += 1 };
  s2 -> s3 [0, 65535] { R1218 += 1, R1178 += 1, R781 += 1, R782 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R1218 += 1, R1178 += 1, R782 += 1 };
  s2 -> s1 [64, 65535] { R1218 += 1, R1178 += 1, R782 += 1 };
  s3 -> s1 [0, 62] { R1218 += 1, R1178 += 1, R782 += 1 };
  s3 -> s5 [0, 65535] { R1218 += 1 };
  s3 -> s3 [0, 65535] { R1218 += 1, R1178 += 1, R781 += 1, R782 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R1218 += 1, R1178 += 1, R782 += 1 };
  s3 -> s1 [64, 65535] { R1218 += 1, R1178 += 1, R782 += 1 };
  s4 -> s1 [0, 65535] { R1218 += 1, R1178 += 1, R782 += 1 };
  s5 -> s5 [0, 65535] { R1218 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1218 += 1 };
  s7 -> s7 [0, 65535] { R1218 += 1, R1178 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1219 += 1, R1220 += 1 };
  s0 -> s1 [0, 65535] { R1220 += 1, R1180 += 1, R783 += 1, R784 += 1 };
  s0 -> s2 [0, 65535] { R1220 += 1, R1179 += 1, R1180 += 1 };
  s0 -> s3 [0, 65535] { R1220 += 1, R1180 += 1, R784 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R1220 += 1, R1180 += 1, R783 += 1, R784 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1220 += 1 };
  s1 -> s3 [0, 65535] { R1220 += 1, R1180 += 1, R784 += 1, R4 += 1 };
  s2 -> s1 [0, 65535] { R1220 += 1, R1180 += 1, R783 += 1, R784 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1220 += 1, R1179 += 1, R1180 += 1 };
  s2 -> s3 [0, 65535] { R1220 += 1, R1180 += 1, R784 += 1, R4 += 1 };
  s3 -> s4 [0, 65535] { R1220 += 1, R1180 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1220 += 1 };
  s3 -> s3 [0, 65535] { R1220 += 1, R1180 += 1, R784 += 1, R4 += 1 };
  s4 -> s4 [0, 65535] { R1220 += 1, R1180 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1220 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1220 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R1222 += 1, R1186 += 1 };
  s0 -> s2 [0, 65535] { R1222 += 1, R1185 += 1, R1186 += 1 };
  s0 -> s0 [0, 65535] { R1221 += 1, R1222 += 1 };
  s0 -> s1 [45, 63] { R1222 += 1, R1186 += 1 };
  s0 -> s3 [88, 88] { R1222 += 1, R1186 += 1 };
  s0 -> s1 [89, 65535] { R1222 += 1, R1186 += 1 };
  s1 -> s1 [0, 43] { R1222 += 1, R1186 += 1 };
  s1 -> s1 [45, 63] { R1222 += 1, R1186 += 1 };
  s1 -> s3 [88, 88] { R1222 += 1, R1186 += 1 };
  s1 -> s1 [89, 65535] { R1222 += 1, R1186 += 1 };
  s2 -> s1 [0, 43] { R1222 += 1, R1186 += 1 };
  s2 -> s2 [0, 65535] { R1222 += 1, R1185 += 1, R1186 += 1 };
  s2 -> s1 [45, 63] { R1222 += 1, R1186 += 1 };
  s2 -> s3 [88, 88] { R1222 += 1, R1186 += 1 };
  s2 -> s1 [89, 65535] { R1222 += 1, R1186 += 1 };
  s3 -> s3 [0, 43] { R1222 += 1, R1186 += 1 };
  s3 -> s3 [0, 65535] { R1222 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R1222 += 1, R1186 += 1 };
  s3 -> s3 [88, 65535] { R1222 += 1, R1186 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1223 += 1, R1224 += 1 };
  s0 -> s1 [0, 65535] { R1224 += 1, R1187 += 1, R1188 += 1 };
  s0 -> s2 [0, 65535] { R1224 += 1, R1188 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R1224 += 1, R1187 += 1, R1188 += 1 };
  s1 -> s2 [0, 65535] { R1224 += 1, R1188 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1224 += 1 };
  s2 -> s2 [0, 65535] { R1224 += 1, R1188 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1224 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R1226 += 1, R1190 += 1 };
  s0 -> s2 [0, 65535] { R1226 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s0 [0, 65535] { R1225 += 1, R1226 += 1 };
  s0 -> s3 [0, 65535] { R1226 += 1, R1190 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R1226 += 1, R1190 += 1 };
  s0 -> s1 [59, 65535] { R1226 += 1, R1190 += 1 };
  s1 -> s1 [0, 57] { R1226 += 1, R1190 += 1 };
  s1 -> s1 [0, 65535] { R1226 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [58, 58] { R1226 += 1, R1190 += 1 };
  s1 -> s1 [59, 65535] { R1226 += 1, R1190 += 1 };
  s2 -> s1 [0, 57] { R1226 += 1, R1190 += 1 };
  s2 -> s2 [0, 65535] { R1226 += 1, R1189 += 1, R1190 += 1 };
  s2 -> s3 [0, 65535] { R1226 += 1, R1190 += 1, R6 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [58, 58] { R1226 += 1, R1190 += 1 };
  s2 -> s1 [59, 65535] { R1226 += 1, R1190 += 1 };
  s3 -> s1 [0, 57] { R1226 += 1, R1190 += 1 };
  s3 -> s5 [0, 65535] { R1226 += 1 };
  s3 -> s3 [0, 65535] { R1226 += 1, R1190 += 1, R6 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [58, 58] { R1226 += 1, R1190 += 1 };
  s3 -> s1 [59, 65535] { R1226 += 1, R1190 += 1 };
  s4 -> s4 [0, 65535] { R1226 += 1, R1190 += 1 };
  s5 -> s5 [0, 65535] { R1226 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R1228 += 1, R1192 += 1 };
  s0 -> s0 [0, 65535] { R1227 += 1, R1228 += 1 };
  s0 -> s2 [0, 65535] { R1228 += 1, R1192 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R1228 += 1, R1191 += 1, R1192 += 1 };
  s0 -> s4 [88, 88] { R1228 += 1, R1192 += 1 };
  s0 -> s1 [89, 65535] { R1228 += 1, R1192 += 1 };
  s1 -> s1 [0, 87] { R1228 += 1, R1192 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1228 += 1 };
  s1 -> s4 [88, 88] { R1228 += 1, R1192 += 1 };
  s1 -> s1 [89, 65535] { R1228 += 1, R1192 += 1 };
  s2 -> s1 [0, 87] { R1228 += 1, R1192 += 1 };
  s2 -> s2 [0, 65535] { R1228 += 1, R1192 += 1, R7 += 1 };
  s2 -> s6 [0, 65535] { R1228 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R1228 += 1, R1192 += 1 };
  s2 -> s1 [89, 65535] { R1228 += 1, R1192 += 1 };
  s3 -> s1 [0, 87] { R1228 += 1, R1192 += 1 };
  s3 -> s2 [0, 65535] { R1228 += 1, R1192 += 1, R7 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1228 += 1, R1191 += 1, R1192 += 1 };
  s3 -> s4 [88, 88] { R1228 += 1, R1192 += 1 };
  s3 -> s1 [89, 65535] { R1228 += 1, R1192 += 1 };
  s4 -> s4 [0, 65535] { R1228 += 1, R1192 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1228 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R1230 += 1, R1194 += 1, R786 += 1 };
  s0 -> s2 [0, 65535] { R1230 += 1, R1193 += 1, R1194 += 1 };
  s0 -> s0 [0, 65535] { R1229 += 1, R1230 += 1 };
  s0 -> s3 [0, 65535] { R1230 += 1, R1194 += 1, R785 += 1, R786 += 1 };
  s0 -> s4 [91, 91] { R1230 += 1, R1194 += 1, R786 += 1 };
  s0 -> s1 [92, 65535] { R1230 += 1, R1194 += 1, R786 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1230 += 1 };
  s1 -> s7 [0, 65535] { R1230 += 1, R1194 += 1 };
  s1 -> s1 [0, 65535] { R1230 += 1, R1194 += 1, R786 += 1 };
  s2 -> s1 [0, 90] { R1230 += 1, R1194 += 1, R786 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1230 += 1, R1193 += 1, R1194 += 1 };
  s2 -> s3 [0, 65535] { R1230 += 1, R1194 += 1, R785 += 1, R786 += 1 };
  s2 -> s4 [91, 91] { R1230 += 1, R1194 += 1, R786 += 1 };
  s2 -> s1 [92, 65535] { R1230 += 1, R1194 += 1, R786 += 1 };
  s3 -> s1 [0, 90] { R1230 += 1, R1194 += 1, R786 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1230 += 1 };
  s3 -> s3 [0, 65535] { R1230 += 1, R1194 += 1, R785 += 1, R786 += 1 };
  s3 -> s4 [91, 91] { R1230 += 1, R1194 += 1, R786 += 1 };
  s3 -> s1 [92, 65535] { R1230 += 1, R1194 += 1, R786 += 1 };
  s4 -> s1 [0, 65535] { R1230 += 1, R1194 += 1, R786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1230 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1230 += 1 };
  s7 -> s7 [0, 65535] { R1230 += 1, R1194 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1232 += 1, R1195 += 1, R1196 += 1 };
  s0 -> s2 [0, 65535] { R1232 += 1, R1196 += 1, R788 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R1232 += 1, R1196 += 1, R787 += 1, R788 += 1 };
  s0 -> s0 [0, 65535] { R1231 += 1, R1232 += 1 };
  s1 -> s1 [0, 65535] { R1232 += 1, R1195 += 1, R1196 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R1232 += 1, R1196 += 1, R788 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R1232 += 1, R1196 += 1, R787 += 1, R788 += 1 };
  s2 -> s4 [0, 65535] { R1232 += 1 };
  s2 -> s6 [0, 65535] { R1232 += 1, R1196 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1232 += 1, R1196 += 1, R788 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R1232 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1232 += 1, R1196 += 1, R788 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1232 += 1, R1196 += 1, R787 += 1, R788 += 1 };
  s4 -> s4 [0, 65535] { R1232 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1232 += 1 };
  s6 -> s6 [0, 65535] { R1232 += 1, R1196 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R1234 += 1, R1198 += 1, R1168 += 1 };
  s0 -> s2 [0, 65535] { R1234 += 1, R1198 += 1, R1167 += 1, R1168 += 1 };
  s0 -> s0 [0, 65535] { R1233 += 1, R1234 += 1 };
  s0 -> s3 [0, 65535] { R1234 += 1, R1197 += 1, R1198 += 1 };
  s0 -> s1 [89, 65535] { R1234 += 1, R1198 += 1, R1168 += 1 };
  s1 -> s1 [0, 87] { R1234 += 1, R1198 += 1, R1168 += 1 };
  s1 -> s5 [0, 65535] { R1234 += 1 };
  s1 -> s1 [0, 65535] { R1234 += 1, R1198 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [89, 65535] { R1234 += 1, R1198 += 1, R1168 += 1 };
  s2 -> s1 [0, 87] { R1234 += 1, R1198 += 1, R1168 += 1 };
  s2 -> s5 [0, 65535] { R1234 += 1 };
  s2 -> s2 [0, 65535] { R1234 += 1, R1198 += 1, R1167 += 1, R1168 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [89, 65535] { R1234 += 1, R1198 += 1, R1168 += 1 };
  s3 -> s1 [0, 87] { R1234 += 1, R1198 += 1, R1168 += 1 };
  s3 -> s2 [0, 65535] { R1234 += 1, R1198 += 1, R1167 += 1, R1168 += 1 };
  s3 -> s3 [0, 65535] { R1234 += 1, R1197 += 1, R1198 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [89, 65535] { R1234 += 1, R1198 += 1, R1168 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1234 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R1235 += 1, R1236 += 1 };
  s0 -> s1 [0, 65535] { R1236 += 1, R1200 += 1, R1169 += 1, R1170 += 1 };
  s0 -> s2 [0, 65535] { R1236 += 1, R1200 += 1, R1170 += 1, R779 += 1 };
  s0 -> s3 [0, 65535] { R1236 += 1, R1199 += 1, R1200 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1236 += 1 };
  s1 -> s1 [0, 65535] { R1236 += 1, R1200 += 1, R1169 += 1, R1170 += 1 };
  s1 -> s2 [0, 65535] { R1236 += 1, R1200 += 1, R1170 += 1, R779 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1236 += 1 };
  s2 -> s6 [0, 65535] { R1236 += 1, R1200 += 1 };
  s2 -> s2 [0, 65535] { R1236 += 1, R1200 += 1, R1170 += 1, R779 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1236 += 1, R1200 += 1, R1169 += 1, R1170 += 1 };
  s3 -> s2 [0, 65535] { R1236 += 1, R1200 += 1, R1170 += 1, R779 += 1 };
  s3 -> s3 [0, 65535] { R1236 += 1, R1199 += 1, R1200 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1236 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1236 += 1 };
  s6 -> s6 [0, 65535] { R1236 += 1, R1200 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1238 += 1, R1201 += 1, R1202 += 1 };
  s0 -> s0 [0, 65535] { R1237 += 1, R1238 += 1 };
  s0 -> s2 [0, 65535] { R1238 += 1, R1202 += 1, R1171 += 1, R1172 += 1 };
  s0 -> s3 [104, 104] { R1238 += 1, R1202 += 1, R1172 += 1 };
  s1 -> s1 [0, 65535] { R1238 += 1, R1201 += 1, R1202 += 1 };
  s1 -> s2 [0, 65535] { R1238 += 1, R1202 += 1, R1171 += 1, R1172 += 1 };
  s1 -> s3 [104, 104] { R1238 += 1, R1202 += 1, R1172 += 1 };
  s2 -> s2 [0, 65535] { R1238 += 1, R1202 += 1, R1171 += 1, R1172 += 1 };
  s2 -> s3 [104, 104] { R1238 += 1, R1202 += 1, R1172 += 1 };
  s3 -> s4 [111, 111] { R1238 += 1, R1202 += 1, R1172 += 1 };
  s4 -> s5 [115, 115] { R1238 += 1, R1202 += 1, R1172 += 1 };
  s5 -> s6 [116, 116] { R1238 += 1, R1202 += 1, R1172 += 1 };
  s6 -> s6 [0, 65535] { R1238 += 1, R1202 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1238 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1238 += 1 };
  accepting s6, s7, s8;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1240 += 1, R1204 += 1, R1182 += 1, R780 += 1 };
  s0 -> s2 [0, 65535] { R1240 += 1, R1204 += 1, R1181 += 1, R1182 += 1 };
  s0 -> s0 [0, 65535] { R1239 += 1, R1240 += 1 };
  s0 -> s3 [0, 65535] { R1240 += 1, R1203 += 1, R1204 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1240 += 1, R1204 += 1, R1182 += 1, R780 += 1 };
  s1 -> s5 [0, 65535] { R1240 += 1 };
  s1 -> s6 [0, 65535] { R1240 += 1, R1204 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1240 += 1, R1204 += 1, R1182 += 1, R780 += 1 };
  s2 -> s2 [0, 65535] { R1240 += 1, R1204 += 1, R1181 += 1, R1182 += 1 };
  s2 -> s5 [0, 65535] { R1240 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1240 += 1, R1204 += 1, R1182 += 1, R780 += 1 };
  s3 -> s2 [0, 65535] { R1240 += 1, R1204 += 1, R1181 += 1, R1182 += 1 };
  s3 -> s3 [0, 65535] { R1240 += 1, R1203 += 1, R1204 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1240 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1240 += 1 };
  s6 -> s6 [0, 65535] { R1240 += 1, R1204 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1242 += 1, R1206 += 1, R1183 += 1, R1184 += 1 };
  s0 -> s2 [0, 65535] { R1242 += 1, R1205 += 1, R1206 += 1 };
  s0 -> s0 [0, 65535] { R1241 += 1, R1242 += 1 };
  s0 -> s3 [108, 108] { R1242 += 1, R1206 += 1, R1184 += 1 };
  s1 -> s1 [0, 65535] { R1242 += 1, R1206 += 1, R1183 += 1, R1184 += 1 };
  s1 -> s3 [108, 108] { R1242 += 1, R1206 += 1, R1184 += 1 };
  s2 -> s1 [0, 65535] { R1242 += 1, R1206 += 1, R1183 += 1, R1184 += 1 };
  s2 -> s2 [0, 65535] { R1242 += 1, R1205 += 1, R1206 += 1 };
  s2 -> s3 [108, 108] { R1242 += 1, R1206 += 1, R1184 += 1 };
  s3 -> s4 [111, 111] { R1242 += 1, R1206 += 1, R1184 += 1 };
  s4 -> s5 [99, 99] { R1242 += 1, R1206 += 1, R1184 += 1 };
  s5 -> s6 [97, 97] { R1242 += 1, R1206 += 1, R1184 += 1 };
  s6 -> s7 [108, 108] { R1242 += 1, R1206 += 1, R1184 += 1 };
  s7 -> s8 [0, 65535] { R1242 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R1242 += 1, R1206 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1242 += 1 };
  s9 -> s9 [0, 65535];
  accepting s7, s8, s9;
};
};
synchronised {  // Automata constraining P56
automaton P56_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
constraint R1 = R1172 && R2 = R1180 && R3 = R1242 && R11 = 0 && R12 = R1206 && R785 = 0 && R786 = 1 && R787 = 0 && R788 = 1 && R1167 = 0 && R1168 = R1172 && R1169 = 0 && R1170 = R1172 && R1171 = 0 && R1173 - R1206 = 1 && R1174 = R1180 && R1175 - R1206 = 1 && R1176 = R1180 && R1177 - R1206 = 1 && R1178 = R1180 && R1179 - R1206 = 1 && R1183 = 0 && R1184 = 0 && R1185 = 0 && R1186 = R1206 && R1187 = 0 && R1188 = R1206 && R1189 = 0 && R1190 = R1206 && R1191 = 0 && R1192 = R1206 && R1193 = 0 && R1194 = R1206 && R1195 = 0 && R1196 = R1206 && R1197 = 0 && R1198 = R1206 && R1199 = 0 && R1200 = R1206 && R1201 = 0 && R1202 = R1206 && R1203 = 0 && R1204 = R1206 && R1205 = 0 && R1207 = 10 && R1208 = R1242 && R1209 = 10 && R1210 = R1242 && R1211 = 10 && R1212 = R1242 && R1213 = 10 && R1214 = R1242 && R1215 = 10 && R1216 = R1242 && R1217 = 10 && R1218 = R1242 && R1219 = 10 && R1220 = R1242 && R1221 = 10 && R1222 = R1242 && R1223 = 10 && R1224 = R1242 && R1225 = 10 && R1226 = R1242 && R1227 = 10 && R1228 = R1242 && R1229 = 10 && R1230 = R1242 && R1231 = 10 && R1232 = R1242 && R1233 = 10 && R1234 = R1242 && R1235 = 10 && R1236 = R1242 && R1237 = 10 && R1238 = R1242 && R1239 = 10 && R1240 = R1242 && R1241 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R1172 && R1206 < R1180 && -1 < R1206 && 9 < R1242 && (R781 != 0 || ((R4 != 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R0 = R782 || R782 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R782 != 1 || -1 < R0) && (R0 = R782 || R782 = 1))))) && (R783 != 0 || ((R4 != 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R0 = R784 || R784 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R784 != 1 || -1 < R0) && (R0 = R784 || R784 = 1))))) && (R780 = 0 || (R1181 = 0 && R1182 = 0)) && (R781 = 0 || (R4 = 0 && R0 < 0)) && (R783 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
