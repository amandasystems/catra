// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R2, R3, R4, R5, R6, R7, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R904 += 1 };
  s0 -> s0 [0, 65535] { R903 += 1, R904 += 1 };
  s0 -> s2 [46, 46] { R904 += 1 };
  s0 -> s3 [47, 47] { R904 += 1 };
  s0 -> s1 [48, 65535] { R904 += 1 };
  s1 -> s1 [0, 45] { R904 += 1 };
  s1 -> s2 [46, 46] { R904 += 1 };
  s1 -> s3 [47, 47] { R904 += 1 };
  s1 -> s1 [48, 65535] { R904 += 1 };
  s2 -> s1 [0, 45] { R904 += 1 };
  s2 -> s2 [46, 46] { R904 += 1 };
  s2 -> s3 [47, 47] { R904 += 1 };
  s2 -> s1 [48, 114] { R904 += 1 };
  s2 -> s8 [115, 115] { R904 += 1 };
  s2 -> s1 [116, 65535] { R904 += 1 };
  s3 -> s3 [0, 45] { R904 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R904 += 1 };
  s3 -> s3 [47, 65535] { R904 += 1 };
  s4 -> s3 [0, 45] { R904 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R904 += 1 };
  s4 -> s3 [47, 114] { R904 += 1 };
  s4 -> s5 [115, 115] { R904 += 1 };
  s4 -> s3 [116, 65535] { R904 += 1 };
  s5 -> s3 [0, 45] { R904 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R904 += 1 };
  s5 -> s3 [47, 110] { R904 += 1 };
  s5 -> s6 [111, 111] { R904 += 1 };
  s5 -> s3 [112, 65535] { R904 += 1 };
  s6 -> s3 [0, 45] { R904 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R904 += 1 };
  s6 -> s3 [47, 98] { R904 += 1 };
  s6 -> s7 [99, 99] { R904 += 1 };
  s6 -> s3 [100, 65535] { R904 += 1 };
  s7 -> s3 [0, 45] { R904 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R904 += 1 };
  s7 -> s3 [47, 106] { R904 += 1 };
  s7 -> s3 [108, 65535] { R904 += 1 };
  s8 -> s1 [0, 45] { R904 += 1 };
  s8 -> s2 [46, 46] { R904 += 1 };
  s8 -> s3 [47, 47] { R904 += 1 };
  s8 -> s1 [48, 110] { R904 += 1 };
  s8 -> s9 [111, 111] { R904 += 1 };
  s8 -> s1 [112, 65535] { R904 += 1 };
  s9 -> s1 [0, 45] { R904 += 1 };
  s9 -> s2 [46, 46] { R904 += 1 };
  s9 -> s3 [47, 47] { R904 += 1 };
  s9 -> s1 [48, 98] { R904 += 1 };
  s9 -> s10 [99, 99] { R904 += 1 };
  s9 -> s1 [100, 65535] { R904 += 1 };
  s10 -> s1 [0, 45] { R904 += 1 };
  s10 -> s2 [46, 46] { R904 += 1 };
  s10 -> s3 [47, 47] { R904 += 1 };
  s10 -> s1 [48, 106] { R904 += 1 };
  s10 -> s1 [108, 65535] { R904 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R905 += 1, R906 += 1 };
  s0 -> s1 [0, 65535] { R906 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R906 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R908 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R908 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R907 += 1, R908 += 1 };
  s0 -> s3 [47, 47] { R908 += 1 };
  s0 -> s1 [48, 65535] { R908 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R908 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R908 += 1 };
  s1 -> s1 [48, 65535] { R908 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R908 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R908 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R908 += 1 };
  s2 -> s1 [48, 65535] { R908 += 1, R12 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R908 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R910 += 1, R870 += 1 };
  s0 -> s0 [0, 65535] { R909 += 1, R910 += 1 };
  s0 -> s2 [0, 65535] { R910 += 1, R869 += 1, R870 += 1 };
  s0 -> s1 [38, 42] { R910 += 1, R870 += 1 };
  s0 -> s1 [44, 45] { R910 += 1, R870 += 1 };
  s0 -> s1 [47, 62] { R910 += 1, R870 += 1 };
  s0 -> s1 [64, 65535] { R910 += 1, R870 += 1 };
  s1 -> s1 [0, 36] { R910 += 1, R870 += 1 };
  s1 -> s1 [0, 65535] { R910 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R910 += 1, R870 += 1 };
  s1 -> s1 [44, 45] { R910 += 1, R870 += 1 };
  s1 -> s1 [47, 62] { R910 += 1, R870 += 1 };
  s1 -> s1 [64, 65535] { R910 += 1, R870 += 1 };
  s2 -> s1 [0, 36] { R910 += 1, R870 += 1 };
  s2 -> s2 [0, 65535] { R910 += 1, R869 += 1, R870 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R910 += 1, R870 += 1 };
  s2 -> s1 [44, 45] { R910 += 1, R870 += 1 };
  s2 -> s1 [47, 62] { R910 += 1, R870 += 1 };
  s2 -> s1 [64, 65535] { R910 += 1, R870 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R911 += 1, R912 += 1 };
  s0 -> s1 [0, 65535] { R912 += 1, R871 += 1, R872 += 1 };
  s0 -> s2 [0, 65535] { R912 += 1, R872 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R912 += 1, R871 += 1, R872 += 1 };
  s1 -> s2 [0, 65535] { R912 += 1, R872 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R912 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R912 += 1, R872 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R912 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R914 += 1, R874 += 1, R782 += 1 };
  s0 -> s2 [0, 65535] { R914 += 1, R873 += 1, R874 += 1 };
  s0 -> s0 [0, 65535] { R913 += 1, R914 += 1 };
  s0 -> s3 [0, 65535] { R914 += 1, R874 += 1, R781 += 1, R782 += 1 };
  s0 -> s4 [63, 63] { R914 += 1, R874 += 1, R782 += 1 };
  s0 -> s1 [64, 65535] { R914 += 1, R874 += 1, R782 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R914 += 1, R874 += 1 };
  s1 -> s1 [0, 65535] { R914 += 1, R874 += 1, R782 += 1 };
  s1 -> s6 [0, 65535] { R914 += 1 };
  s2 -> s1 [0, 62] { R914 += 1, R874 += 1, R782 += 1 };
  s2 -> s2 [0, 65535] { R914 += 1, R873 += 1, R874 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R914 += 1, R874 += 1, R781 += 1, R782 += 1 };
  s2 -> s4 [63, 63] { R914 += 1, R874 += 1, R782 += 1 };
  s2 -> s1 [64, 65535] { R914 += 1, R874 += 1, R782 += 1 };
  s3 -> s1 [0, 62] { R914 += 1, R874 += 1, R782 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R914 += 1 };
  s3 -> s3 [0, 65535] { R914 += 1, R874 += 1, R781 += 1, R782 += 1 };
  s3 -> s4 [63, 63] { R914 += 1, R874 += 1, R782 += 1 };
  s3 -> s1 [64, 65535] { R914 += 1, R874 += 1, R782 += 1 };
  s4 -> s1 [0, 65535] { R914 += 1, R874 += 1, R782 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R914 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R914 += 1, R874 += 1 };
  s7 -> s6 [0, 65535] { R914 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R916 += 1, R876 += 1, R783 += 1, R784 += 1 };
  s0 -> s2 [0, 65535] { R916 += 1, R876 += 1, R784 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R916 += 1, R875 += 1, R876 += 1 };
  s0 -> s0 [0, 65535] { R915 += 1, R916 += 1 };
  s1 -> s1 [0, 65535] { R916 += 1, R876 += 1, R783 += 1, R784 += 1 };
  s1 -> s2 [0, 65535] { R916 += 1, R876 += 1, R784 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R916 += 1 };
  s2 -> s2 [0, 65535] { R916 += 1, R876 += 1, R784 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R916 += 1 };
  s2 -> s6 [0, 65535] { R916 += 1, R876 += 1 };
  s3 -> s1 [0, 65535] { R916 += 1, R876 += 1, R783 += 1, R784 += 1 };
  s3 -> s2 [0, 65535] { R916 += 1, R876 += 1, R784 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R916 += 1, R875 += 1, R876 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R916 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R916 += 1 };
  s6 -> s6 [0, 65535] { R916 += 1, R876 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R918 += 1, R882 += 1 };
  s0 -> s0 [0, 65535] { R917 += 1, R918 += 1 };
  s0 -> s2 [0, 65535] { R918 += 1, R881 += 1, R882 += 1 };
  s0 -> s1 [45, 63] { R918 += 1, R882 += 1 };
  s0 -> s3 [88, 88] { R918 += 1, R882 += 1 };
  s0 -> s1 [89, 65535] { R918 += 1, R882 += 1 };
  s1 -> s1 [0, 43] { R918 += 1, R882 += 1 };
  s1 -> s1 [45, 63] { R918 += 1, R882 += 1 };
  s1 -> s3 [88, 88] { R918 += 1, R882 += 1 };
  s1 -> s1 [89, 65535] { R918 += 1, R882 += 1 };
  s2 -> s1 [0, 43] { R918 += 1, R882 += 1 };
  s2 -> s2 [0, 65535] { R918 += 1, R881 += 1, R882 += 1 };
  s2 -> s1 [45, 63] { R918 += 1, R882 += 1 };
  s2 -> s3 [88, 88] { R918 += 1, R882 += 1 };
  s2 -> s1 [89, 65535] { R918 += 1, R882 += 1 };
  s3 -> s3 [0, 43] { R918 += 1, R882 += 1 };
  s3 -> s3 [0, 65535] { R918 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R918 += 1, R882 += 1 };
  s3 -> s3 [88, 65535] { R918 += 1, R882 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R920 += 1, R883 += 1, R884 += 1 };
  s0 -> s2 [0, 65535] { R920 += 1, R884 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R919 += 1, R920 += 1 };
  s1 -> s1 [0, 65535] { R920 += 1, R883 += 1, R884 += 1 };
  s1 -> s2 [0, 65535] { R920 += 1, R884 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R920 += 1, R884 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R920 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R920 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R922 += 1, R886 += 1 };
  s0 -> s2 [0, 65535] { R922 += 1, R886 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R922 += 1, R885 += 1, R886 += 1 };
  s0 -> s0 [0, 65535] { R921 += 1, R922 += 1 };
  s0 -> s4 [58, 58] { R922 += 1, R886 += 1 };
  s0 -> s1 [59, 65535] { R922 += 1, R886 += 1 };
  s1 -> s1 [0, 57] { R922 += 1, R886 += 1 };
  s1 -> s1 [0, 65535] { R922 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R922 += 1, R886 += 1 };
  s1 -> s1 [59, 65535] { R922 += 1, R886 += 1 };
  s2 -> s1 [0, 57] { R922 += 1, R886 += 1 };
  s2 -> s2 [0, 65535] { R922 += 1, R886 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R922 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R922 += 1, R886 += 1 };
  s2 -> s1 [59, 65535] { R922 += 1, R886 += 1 };
  s3 -> s1 [0, 57] { R922 += 1, R886 += 1 };
  s3 -> s2 [0, 65535] { R922 += 1, R886 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R922 += 1, R885 += 1, R886 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R922 += 1, R886 += 1 };
  s3 -> s1 [59, 65535] { R922 += 1, R886 += 1 };
  s4 -> s4 [0, 65535] { R922 += 1, R886 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R922 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R924 += 1, R888 += 1 };
  s0 -> s2 [0, 65535] { R924 += 1, R888 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R924 += 1, R887 += 1, R888 += 1 };
  s0 -> s0 [0, 65535] { R923 += 1, R924 += 1 };
  s0 -> s4 [88, 88] { R924 += 1, R888 += 1 };
  s0 -> s1 [89, 65535] { R924 += 1, R888 += 1 };
  s1 -> s1 [0, 87] { R924 += 1, R888 += 1 };
  s1 -> s1 [0, 65535] { R924 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R924 += 1, R888 += 1 };
  s1 -> s1 [89, 65535] { R924 += 1, R888 += 1 };
  s2 -> s1 [0, 87] { R924 += 1, R888 += 1 };
  s2 -> s2 [0, 65535] { R924 += 1, R888 += 1, R7 += 1 };
  s2 -> s6 [0, 65535] { R924 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R924 += 1, R888 += 1 };
  s2 -> s1 [89, 65535] { R924 += 1, R888 += 1 };
  s3 -> s1 [0, 87] { R924 += 1, R888 += 1 };
  s3 -> s2 [0, 65535] { R924 += 1, R888 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R924 += 1, R887 += 1, R888 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [88, 88] { R924 += 1, R888 += 1 };
  s3 -> s1 [89, 65535] { R924 += 1, R888 += 1 };
  s4 -> s4 [0, 65535] { R924 += 1, R888 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R924 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R926 += 1, R890 += 1, R786 += 1 };
  s0 -> s2 [0, 65535] { R926 += 1, R890 += 1, R785 += 1, R786 += 1 };
  s0 -> s3 [0, 65535] { R926 += 1, R889 += 1, R890 += 1 };
  s0 -> s0 [0, 65535] { R925 += 1, R926 += 1 };
  s0 -> s4 [91, 91] { R926 += 1, R890 += 1, R786 += 1 };
  s0 -> s1 [92, 65535] { R926 += 1, R890 += 1, R786 += 1 };
  s1 -> s6 [0, 65535] { R926 += 1 };
  s1 -> s1 [0, 65535] { R926 += 1, R890 += 1, R786 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R926 += 1, R890 += 1 };
  s2 -> s1 [0, 90] { R926 += 1, R890 += 1, R786 += 1 };
  s2 -> s6 [0, 65535] { R926 += 1 };
  s2 -> s2 [0, 65535] { R926 += 1, R890 += 1, R785 += 1, R786 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R926 += 1, R890 += 1, R786 += 1 };
  s2 -> s1 [92, 65535] { R926 += 1, R890 += 1, R786 += 1 };
  s3 -> s1 [0, 90] { R926 += 1, R890 += 1, R786 += 1 };
  s3 -> s2 [0, 65535] { R926 += 1, R890 += 1, R785 += 1, R786 += 1 };
  s3 -> s3 [0, 65535] { R926 += 1, R889 += 1, R890 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R926 += 1, R890 += 1, R786 += 1 };
  s3 -> s1 [92, 65535] { R926 += 1, R890 += 1, R786 += 1 };
  s4 -> s1 [0, 65535] { R926 += 1, R890 += 1, R786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R926 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R926 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R926 += 1, R890 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R928 += 1, R892 += 1, R787 += 1, R788 += 1 };
  s0 -> s2 [0, 65535] { R928 += 1, R891 += 1, R892 += 1 };
  s0 -> s0 [0, 65535] { R927 += 1, R928 += 1 };
  s0 -> s3 [0, 65535] { R928 += 1, R892 += 1, R788 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R928 += 1 };
  s1 -> s1 [0, 65535] { R928 += 1, R892 += 1, R787 += 1, R788 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R928 += 1, R892 += 1, R788 += 1, R5 += 1 };
  s2 -> s1 [0, 65535] { R928 += 1, R892 += 1, R787 += 1, R788 += 1 };
  s2 -> s2 [0, 65535] { R928 += 1, R891 += 1, R892 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R928 += 1, R892 += 1, R788 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R928 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R928 += 1, R892 += 1, R788 += 1, R5 += 1 };
  s3 -> s6 [0, 65535] { R928 += 1, R892 += 1 };
  s4 -> s4 [0, 65535] { R928 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R928 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R928 += 1, R892 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R930 += 1, R894 += 1, R864 += 1 };
  s0 -> s0 [0, 65535] { R929 += 1, R930 += 1 };
  s0 -> s2 [0, 65535] { R930 += 1, R894 += 1, R863 += 1, R864 += 1 };
  s0 -> s3 [0, 65535] { R930 += 1, R893 += 1, R894 += 1 };
  s0 -> s1 [89, 65535] { R930 += 1, R894 += 1, R864 += 1 };
  s1 -> s1 [0, 87] { R930 += 1, R894 += 1, R864 += 1 };
  s1 -> s1 [0, 65535] { R930 += 1, R894 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R930 += 1 };
  s1 -> s1 [89, 65535] { R930 += 1, R894 += 1, R864 += 1 };
  s2 -> s1 [0, 87] { R930 += 1, R894 += 1, R864 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R930 += 1, R894 += 1, R863 += 1, R864 += 1 };
  s2 -> s5 [0, 65535] { R930 += 1 };
  s2 -> s1 [89, 65535] { R930 += 1, R894 += 1, R864 += 1 };
  s3 -> s1 [0, 87] { R930 += 1, R894 += 1, R864 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R930 += 1, R894 += 1, R863 += 1, R864 += 1 };
  s3 -> s3 [0, 65535] { R930 += 1, R893 += 1, R894 += 1 };
  s3 -> s1 [89, 65535] { R930 += 1, R894 += 1, R864 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R930 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R932 += 1, R896 += 1, R866 += 1, R779 += 1 };
  s0 -> s0 [0, 65535] { R931 += 1, R932 += 1 };
  s0 -> s2 [0, 65535] { R932 += 1, R895 += 1, R896 += 1 };
  s0 -> s3 [0, 65535] { R932 += 1, R896 += 1, R865 += 1, R866 += 1 };
  s1 -> s6 [0, 65535] { R932 += 1, R896 += 1 };
  s1 -> s1 [0, 65535] { R932 += 1, R896 += 1, R866 += 1, R779 += 1 };
  s1 -> s4 [0, 65535] { R932 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R932 += 1, R896 += 1, R866 += 1, R779 += 1 };
  s2 -> s2 [0, 65535] { R932 += 1, R895 += 1, R896 += 1 };
  s2 -> s3 [0, 65535] { R932 += 1, R896 += 1, R865 += 1, R866 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R932 += 1, R896 += 1, R866 += 1, R779 += 1 };
  s3 -> s4 [0, 65535] { R932 += 1 };
  s3 -> s3 [0, 65535] { R932 += 1, R896 += 1, R865 += 1, R866 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R932 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R932 += 1, R896 += 1 };
  s6 -> s4 [0, 65535] { R932 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R933 += 1, R934 += 1 };
  s0 -> s1 [0, 65535] { R934 += 1, R898 += 1, R867 += 1, R868 += 1 };
  s0 -> s2 [0, 65535] { R934 += 1, R897 += 1, R898 += 1 };
  s0 -> s3 [111, 111] { R934 += 1, R898 += 1, R868 += 1 };
  s1 -> s1 [0, 65535] { R934 += 1, R898 += 1, R867 += 1, R868 += 1 };
  s1 -> s3 [111, 111] { R934 += 1, R898 += 1, R868 += 1 };
  s2 -> s1 [0, 65535] { R934 += 1, R898 += 1, R867 += 1, R868 += 1 };
  s2 -> s2 [0, 65535] { R934 += 1, R897 += 1, R898 += 1 };
  s2 -> s3 [111, 111] { R934 += 1, R898 += 1, R868 += 1 };
  s3 -> s4 [99, 99] { R934 += 1, R898 += 1, R868 += 1 };
  s4 -> s5 [97, 97] { R934 += 1, R898 += 1, R868 += 1 };
  s5 -> s6 [108, 108] { R934 += 1, R898 += 1, R868 += 1 };
  s6 -> s7 [104, 104] { R934 += 1, R898 += 1, R868 += 1 };
  s7 -> s8 [111, 111] { R934 += 1, R898 += 1, R868 += 1 };
  s8 -> s9 [115, 115] { R934 += 1, R898 += 1, R868 += 1 };
  s9 -> s10 [116, 116] { R934 += 1, R898 += 1, R868 += 1 };
  s10 -> s10 [0, 65535] { R934 += 1, R898 += 1 };
  s10 -> s11 [0, 65535] { R934 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R934 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s10, s11, s12;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R935 += 1, R936 += 1 };
  s0 -> s1 [0, 65535] { R936 += 1, R899 += 1, R900 += 1 };
  s0 -> s2 [0, 65535] { R936 += 1, R900 += 1, R878 += 1, R780 += 1 };
  s0 -> s3 [0, 65535] { R936 += 1, R900 += 1, R877 += 1, R878 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R936 += 1, R899 += 1, R900 += 1 };
  s1 -> s2 [0, 65535] { R936 += 1, R900 += 1, R878 += 1, R780 += 1 };
  s1 -> s3 [0, 65535] { R936 += 1, R900 += 1, R877 += 1, R878 += 1 };
  s2 -> s6 [0, 65535] { R936 += 1, R900 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R936 += 1 };
  s2 -> s2 [0, 65535] { R936 += 1, R900 += 1, R878 += 1, R780 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R936 += 1 };
  s3 -> s2 [0, 65535] { R936 += 1, R900 += 1, R878 += 1, R780 += 1 };
  s3 -> s3 [0, 65535] { R936 += 1, R900 += 1, R877 += 1, R878 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R936 += 1 };
  s6 -> s6 [0, 65535] { R936 += 1, R900 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R936 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R938 += 1, R901 += 1, R902 += 1 };
  s0 -> s2 [0, 65535] { R938 += 1, R902 += 1, R879 += 1, R880 += 1 };
  s0 -> s0 [0, 65535] { R937 += 1, R938 += 1 };
  s0 -> s3 [108, 108] { R938 += 1, R902 += 1, R880 += 1 };
  s1 -> s1 [0, 65535] { R938 += 1, R901 += 1, R902 += 1 };
  s1 -> s2 [0, 65535] { R938 += 1, R902 += 1, R879 += 1, R880 += 1 };
  s1 -> s3 [108, 108] { R938 += 1, R902 += 1, R880 += 1 };
  s2 -> s2 [0, 65535] { R938 += 1, R902 += 1, R879 += 1, R880 += 1 };
  s2 -> s3 [108, 108] { R938 += 1, R902 += 1, R880 += 1 };
  s3 -> s3 [0, 65535] { R938 += 1, R902 += 1 };
  s3 -> s4 [0, 65535] { R938 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R938 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
};
synchronised {  // Automata constraining P56
automaton P56_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
constraint R1 = R868 && R2 = R876 && R3 = R938 && R11 = 0 && R12 = R902 && R785 = 0 && R786 = 1 && R787 = 0 && R788 = 1 && R863 = 0 && R864 = R868 && R865 = 0 && R866 = R868 && R867 = 0 && R869 - R902 = 1 && R870 = R876 && R871 - R902 = 1 && R872 = R876 && R873 - R902 = 1 && R874 = R876 && R875 - R902 = 1 && R879 = 0 && R880 = 0 && R881 = 0 && R882 = R902 && R883 = 0 && R884 = R902 && R885 = 0 && R886 = R902 && R887 = 0 && R888 = R902 && R889 = 0 && R890 = R902 && R891 = 0 && R892 = R902 && R893 = 0 && R894 = R902 && R895 = 0 && R896 = R902 && R897 = 0 && R898 = R902 && R899 = 0 && R900 = R902 && R901 = 0 && R903 = 10 && R904 = R938 && R905 = 10 && R906 = R938 && R907 = 10 && R908 = R938 && R909 = 10 && R910 = R938 && R911 = 10 && R912 = R938 && R913 = 10 && R914 = R938 && R915 = 10 && R916 = R938 && R917 = 10 && R918 = R938 && R919 = 10 && R920 = R938 && R921 = 10 && R922 = R938 && R923 = 10 && R924 = R938 && R925 = 10 && R926 = R938 && R927 = 10 && R928 = R938 && R929 = 10 && R930 = R938 && R931 = 10 && R932 = R938 && R933 = 10 && R934 = R938 && R935 = 10 && R936 = R938 && R937 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R868 && R902 < R876 && -1 < R902 && 9 < R938 && (R781 != 0 || ((R4 != 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R0 = R782 || R782 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R782 != 1 || -1 < R0) && (R0 = R782 || R782 = 1))))) && (R783 != 0 || ((R4 != 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R0 = R784 || R784 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R784 != 1 || -1 < R0) && (R0 = R784 || R784 = 1))))) && (R780 = 0 || (R877 = 0 && R878 = 0)) && (R781 = 0 || (R4 = 0 && R0 < 0)) && (R783 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
