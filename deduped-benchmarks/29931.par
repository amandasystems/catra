// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R2, R3, R4, R5, R6, R7, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788, R789, R790, R791, R792, R793, R794, R795, R796, R797, R798, R799, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R820, R821, R822, R823, R824, R825, R826, R827, R828, R829, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R860, R861, R862;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R828 += 1 };
  s0 -> s0 [0, 65535] { R827 += 1, R828 += 1 };
  s0 -> s2 [46, 46] { R828 += 1 };
  s0 -> s3 [47, 47] { R828 += 1 };
  s0 -> s1 [48, 65535] { R828 += 1 };
  s1 -> s1 [0, 45] { R828 += 1 };
  s1 -> s2 [46, 46] { R828 += 1 };
  s1 -> s3 [47, 47] { R828 += 1 };
  s1 -> s1 [48, 65535] { R828 += 1 };
  s2 -> s1 [0, 45] { R828 += 1 };
  s2 -> s2 [46, 46] { R828 += 1 };
  s2 -> s3 [47, 47] { R828 += 1 };
  s2 -> s1 [48, 114] { R828 += 1 };
  s2 -> s8 [115, 115] { R828 += 1 };
  s2 -> s1 [116, 65535] { R828 += 1 };
  s3 -> s3 [0, 45] { R828 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R828 += 1 };
  s3 -> s3 [47, 65535] { R828 += 1 };
  s4 -> s3 [0, 45] { R828 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R828 += 1 };
  s4 -> s3 [47, 114] { R828 += 1 };
  s4 -> s5 [115, 115] { R828 += 1 };
  s4 -> s3 [116, 65535] { R828 += 1 };
  s5 -> s3 [0, 45] { R828 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R828 += 1 };
  s5 -> s3 [47, 110] { R828 += 1 };
  s5 -> s6 [111, 111] { R828 += 1 };
  s5 -> s3 [112, 65535] { R828 += 1 };
  s6 -> s3 [0, 45] { R828 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R828 += 1 };
  s6 -> s3 [47, 98] { R828 += 1 };
  s6 -> s7 [99, 99] { R828 += 1 };
  s6 -> s3 [100, 65535] { R828 += 1 };
  s7 -> s3 [0, 45] { R828 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R828 += 1 };
  s7 -> s3 [47, 106] { R828 += 1 };
  s7 -> s3 [108, 65535] { R828 += 1 };
  s8 -> s1 [0, 45] { R828 += 1 };
  s8 -> s2 [46, 46] { R828 += 1 };
  s8 -> s3 [47, 47] { R828 += 1 };
  s8 -> s1 [48, 110] { R828 += 1 };
  s8 -> s9 [111, 111] { R828 += 1 };
  s8 -> s1 [112, 65535] { R828 += 1 };
  s9 -> s1 [0, 45] { R828 += 1 };
  s9 -> s2 [46, 46] { R828 += 1 };
  s9 -> s3 [47, 47] { R828 += 1 };
  s9 -> s1 [48, 98] { R828 += 1 };
  s9 -> s10 [99, 99] { R828 += 1 };
  s9 -> s1 [100, 65535] { R828 += 1 };
  s10 -> s1 [0, 45] { R828 += 1 };
  s10 -> s2 [46, 46] { R828 += 1 };
  s10 -> s3 [47, 47] { R828 += 1 };
  s10 -> s1 [48, 106] { R828 += 1 };
  s10 -> s1 [108, 65535] { R828 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R829 += 1, R830 += 1 };
  s0 -> s1 [0, 65535] { R830 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R830 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R832 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R832 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R831 += 1, R832 += 1 };
  s0 -> s3 [47, 47] { R832 += 1 };
  s0 -> s1 [48, 65535] { R832 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R832 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R832 += 1 };
  s1 -> s1 [48, 65535] { R832 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R832 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R832 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R832 += 1 };
  s2 -> s1 [48, 65535] { R832 += 1, R12 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R832 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R834 += 1, R796 += 1 };
  s0 -> s2 [0, 65535] { R834 += 1, R795 += 1, R796 += 1 };
  s0 -> s0 [0, 65535] { R833 += 1, R834 += 1 };
  s0 -> s1 [38, 42] { R834 += 1, R796 += 1 };
  s0 -> s1 [44, 45] { R834 += 1, R796 += 1 };
  s0 -> s1 [47, 62] { R834 += 1, R796 += 1 };
  s0 -> s1 [64, 65535] { R834 += 1, R796 += 1 };
  s1 -> s1 [0, 36] { R834 += 1, R796 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R834 += 1 };
  s1 -> s1 [38, 42] { R834 += 1, R796 += 1 };
  s1 -> s1 [44, 45] { R834 += 1, R796 += 1 };
  s1 -> s1 [47, 62] { R834 += 1, R796 += 1 };
  s1 -> s1 [64, 65535] { R834 += 1, R796 += 1 };
  s2 -> s1 [0, 36] { R834 += 1, R796 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R834 += 1, R795 += 1, R796 += 1 };
  s2 -> s1 [38, 42] { R834 += 1, R796 += 1 };
  s2 -> s1 [44, 45] { R834 += 1, R796 += 1 };
  s2 -> s1 [47, 62] { R834 += 1, R796 += 1 };
  s2 -> s1 [64, 65535] { R834 += 1, R796 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R836 += 1, R797 += 1, R798 += 1 };
  s0 -> s0 [0, 65535] { R835 += 1, R836 += 1 };
  s0 -> s2 [0, 65535] { R836 += 1, R798 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R836 += 1, R797 += 1, R798 += 1 };
  s1 -> s2 [0, 65535] { R836 += 1, R798 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R836 += 1 };
  s2 -> s2 [0, 65535] { R836 += 1, R798 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R836 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R838 += 1, R800 += 1, R782 += 1 };
  s0 -> s2 [0, 65535] { R838 += 1, R799 += 1, R800 += 1 };
  s0 -> s3 [0, 65535] { R838 += 1, R800 += 1, R781 += 1, R782 += 1 };
  s0 -> s0 [0, 65535] { R837 += 1, R838 += 1 };
  s0 -> s4 [63, 63] { R838 += 1, R800 += 1, R782 += 1 };
  s0 -> s1 [64, 65535] { R838 += 1, R800 += 1, R782 += 1 };
  s1 -> s5 [0, 65535] { R838 += 1 };
  s1 -> s1 [0, 65535] { R838 += 1, R800 += 1, R782 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R838 += 1, R800 += 1 };
  s2 -> s1 [0, 62] { R838 += 1, R800 += 1, R782 += 1 };
  s2 -> s2 [0, 65535] { R838 += 1, R799 += 1, R800 += 1 };
  s2 -> s3 [0, 65535] { R838 += 1, R800 += 1, R781 += 1, R782 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R838 += 1, R800 += 1, R782 += 1 };
  s2 -> s1 [64, 65535] { R838 += 1, R800 += 1, R782 += 1 };
  s3 -> s1 [0, 62] { R838 += 1, R800 += 1, R782 += 1 };
  s3 -> s3 [0, 65535] { R838 += 1, R800 += 1, R781 += 1, R782 += 1 };
  s3 -> s5 [0, 65535] { R838 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R838 += 1, R800 += 1, R782 += 1 };
  s3 -> s1 [64, 65535] { R838 += 1, R800 += 1, R782 += 1 };
  s4 -> s1 [0, 65535] { R838 += 1, R800 += 1, R782 += 1 };
  s5 -> s5 [0, 65535] { R838 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R838 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R838 += 1, R800 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R840 += 1, R801 += 1, R802 += 1 };
  s0 -> s2 [0, 65535] { R840 += 1, R802 += 1, R783 += 1, R784 += 1 };
  s0 -> s0 [0, 65535] { R839 += 1, R840 += 1 };
  s0 -> s3 [0, 65535] { R840 += 1, R802 += 1, R784 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R840 += 1, R801 += 1, R802 += 1 };
  s1 -> s2 [0, 65535] { R840 += 1, R802 += 1, R783 += 1, R784 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R840 += 1, R802 += 1, R784 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R840 += 1, R802 += 1, R783 += 1, R784 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R840 += 1, R802 += 1, R784 += 1, R4 += 1 };
  s2 -> s6 [0, 65535] { R840 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R840 += 1, R802 += 1, R784 += 1, R4 += 1 };
  s3 -> s5 [0, 65535] { R840 += 1, R802 += 1 };
  s3 -> s6 [0, 65535] { R840 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R840 += 1, R802 += 1 };
  s5 -> s6 [0, 65535] { R840 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R840 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R842 += 1, R806 += 1 };
  s0 -> s2 [0, 65535] { R842 += 1, R805 += 1, R806 += 1 };
  s0 -> s0 [0, 65535] { R841 += 1, R842 += 1 };
  s0 -> s1 [45, 63] { R842 += 1, R806 += 1 };
  s0 -> s3 [88, 88] { R842 += 1, R806 += 1 };
  s0 -> s1 [89, 65535] { R842 += 1, R806 += 1 };
  s1 -> s1 [0, 43] { R842 += 1, R806 += 1 };
  s1 -> s1 [45, 63] { R842 += 1, R806 += 1 };
  s1 -> s3 [88, 88] { R842 += 1, R806 += 1 };
  s1 -> s1 [89, 65535] { R842 += 1, R806 += 1 };
  s2 -> s1 [0, 43] { R842 += 1, R806 += 1 };
  s2 -> s2 [0, 65535] { R842 += 1, R805 += 1, R806 += 1 };
  s2 -> s1 [45, 63] { R842 += 1, R806 += 1 };
  s2 -> s3 [88, 88] { R842 += 1, R806 += 1 };
  s2 -> s1 [89, 65535] { R842 += 1, R806 += 1 };
  s3 -> s3 [0, 43] { R842 += 1, R806 += 1 };
  s3 -> s3 [0, 65535] { R842 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R842 += 1, R806 += 1 };
  s3 -> s3 [88, 65535] { R842 += 1, R806 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R843 += 1, R844 += 1 };
  s0 -> s1 [0, 65535] { R844 += 1, R808 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R844 += 1, R807 += 1, R808 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R844 += 1, R808 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R844 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R844 += 1, R808 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R844 += 1, R807 += 1, R808 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R844 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R846 += 1, R810 += 1 };
  s0 -> s0 [0, 65535] { R845 += 1, R846 += 1 };
  s0 -> s2 [0, 65535] { R846 += 1, R810 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R846 += 1, R809 += 1, R810 += 1 };
  s0 -> s4 [58, 58] { R846 += 1, R810 += 1 };
  s0 -> s1 [59, 65535] { R846 += 1, R810 += 1 };
  s1 -> s1 [0, 57] { R846 += 1, R810 += 1 };
  s1 -> s1 [0, 65535] { R846 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R846 += 1, R810 += 1 };
  s1 -> s1 [59, 65535] { R846 += 1, R810 += 1 };
  s2 -> s1 [0, 57] { R846 += 1, R810 += 1 };
  s2 -> s2 [0, 65535] { R846 += 1, R810 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R846 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R846 += 1, R810 += 1 };
  s2 -> s1 [59, 65535] { R846 += 1, R810 += 1 };
  s3 -> s1 [0, 57] { R846 += 1, R810 += 1 };
  s3 -> s2 [0, 65535] { R846 += 1, R810 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R846 += 1, R809 += 1, R810 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R846 += 1, R810 += 1 };
  s3 -> s1 [59, 65535] { R846 += 1, R810 += 1 };
  s4 -> s4 [0, 65535] { R846 += 1, R810 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R846 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 87] { R848 += 1, R812 += 1 };
  s0 -> s0 [0, 65535] { R847 += 1, R848 += 1 };
  s0 -> s2 [0, 65535] { R848 += 1, R812 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R848 += 1, R811 += 1, R812 += 1 };
  s0 -> s4 [88, 88] { R848 += 1, R812 += 1 };
  s0 -> s1 [89, 65535] { R848 += 1, R812 += 1 };
  s1 -> s1 [0, 87] { R848 += 1, R812 += 1 };
  s1 -> s1 [0, 65535] { R848 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [88, 88] { R848 += 1, R812 += 1 };
  s1 -> s1 [89, 65535] { R848 += 1, R812 += 1 };
  s2 -> s1 [0, 87] { R848 += 1, R812 += 1 };
  s2 -> s6 [0, 65535] { R848 += 1 };
  s2 -> s2 [0, 65535] { R848 += 1, R812 += 1, R7 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [88, 88] { R848 += 1, R812 += 1 };
  s2 -> s1 [89, 65535] { R848 += 1, R812 += 1 };
  s3 -> s1 [0, 87] { R848 += 1, R812 += 1 };
  s3 -> s2 [0, 65535] { R848 += 1, R812 += 1, R7 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R848 += 1, R811 += 1, R812 += 1 };
  s3 -> s4 [88, 88] { R848 += 1, R812 += 1 };
  s3 -> s1 [89, 65535] { R848 += 1, R812 += 1 };
  s4 -> s4 [0, 65535] { R848 += 1, R812 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R848 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R850 += 1, R814 += 1, R786 += 1 };
  s0 -> s0 [0, 65535] { R849 += 1, R850 += 1 };
  s0 -> s2 [0, 65535] { R850 += 1, R814 += 1, R785 += 1, R786 += 1 };
  s0 -> s3 [0, 65535] { R850 += 1, R813 += 1, R814 += 1 };
  s0 -> s4 [91, 91] { R850 += 1, R814 += 1, R786 += 1 };
  s0 -> s1 [92, 65535] { R850 += 1, R814 += 1, R786 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R850 += 1, R814 += 1 };
  s1 -> s6 [0, 65535] { R850 += 1 };
  s1 -> s1 [0, 65535] { R850 += 1, R814 += 1, R786 += 1 };
  s2 -> s1 [0, 90] { R850 += 1, R814 += 1, R786 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R850 += 1, R814 += 1, R785 += 1, R786 += 1 };
  s2 -> s6 [0, 65535] { R850 += 1 };
  s2 -> s4 [91, 91] { R850 += 1, R814 += 1, R786 += 1 };
  s2 -> s1 [92, 65535] { R850 += 1, R814 += 1, R786 += 1 };
  s3 -> s1 [0, 90] { R850 += 1, R814 += 1, R786 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R850 += 1, R814 += 1, R785 += 1, R786 += 1 };
  s3 -> s3 [0, 65535] { R850 += 1, R813 += 1, R814 += 1 };
  s3 -> s4 [91, 91] { R850 += 1, R814 += 1, R786 += 1 };
  s3 -> s1 [92, 65535] { R850 += 1, R814 += 1, R786 += 1 };
  s4 -> s1 [0, 65535] { R850 += 1, R814 += 1, R786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R850 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R850 += 1, R814 += 1 };
  s7 -> s6 [0, 65535] { R850 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R851 += 1, R852 += 1 };
  s0 -> s1 [0, 65535] { R852 += 1, R816 += 1, R787 += 1, R788 += 1 };
  s0 -> s2 [0, 65535] { R852 += 1, R815 += 1, R816 += 1 };
  s0 -> s3 [0, 65535] { R852 += 1, R816 += 1, R788 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R852 += 1, R816 += 1, R787 += 1, R788 += 1 };
  s1 -> s5 [0, 65535] { R852 += 1 };
  s1 -> s3 [0, 65535] { R852 += 1, R816 += 1, R788 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R852 += 1, R816 += 1, R787 += 1, R788 += 1 };
  s2 -> s2 [0, 65535] { R852 += 1, R815 += 1, R816 += 1 };
  s2 -> s3 [0, 65535] { R852 += 1, R816 += 1, R788 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R852 += 1 };
  s3 -> s3 [0, 65535] { R852 += 1, R816 += 1, R788 += 1, R5 += 1 };
  s3 -> s6 [0, 65535] { R852 += 1, R816 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R852 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R852 += 1 };
  s6 -> s6 [0, 65535] { R852 += 1, R816 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 87] { R854 += 1, R818 += 1, R790 += 1 };
  s0 -> s2 [0, 65535] { R854 += 1, R818 += 1, R789 += 1, R790 += 1 };
  s0 -> s3 [0, 65535] { R854 += 1, R817 += 1, R818 += 1 };
  s0 -> s0 [0, 65535] { R853 += 1, R854 += 1 };
  s0 -> s1 [89, 65535] { R854 += 1, R818 += 1, R790 += 1 };
  s1 -> s1 [0, 87] { R854 += 1, R818 += 1, R790 += 1 };
  s1 -> s5 [0, 65535] { R854 += 1 };
  s1 -> s1 [0, 65535] { R854 += 1, R818 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [89, 65535] { R854 += 1, R818 += 1, R790 += 1 };
  s2 -> s1 [0, 87] { R854 += 1, R818 += 1, R790 += 1 };
  s2 -> s2 [0, 65535] { R854 += 1, R818 += 1, R789 += 1, R790 += 1 };
  s2 -> s5 [0, 65535] { R854 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [89, 65535] { R854 += 1, R818 += 1, R790 += 1 };
  s3 -> s1 [0, 87] { R854 += 1, R818 += 1, R790 += 1 };
  s3 -> s2 [0, 65535] { R854 += 1, R818 += 1, R789 += 1, R790 += 1 };
  s3 -> s3 [0, 65535] { R854 += 1, R817 += 1, R818 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [89, 65535] { R854 += 1, R818 += 1, R790 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R854 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R855 += 1, R856 += 1 };
  s0 -> s1 [0, 65535] { R856 += 1, R820 += 1, R792 += 1, R779 += 1 };
  s0 -> s2 [0, 65535] { R856 += 1, R820 += 1, R791 += 1, R792 += 1 };
  s0 -> s3 [0, 65535] { R856 += 1, R819 += 1, R820 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R856 += 1, R820 += 1, R792 += 1, R779 += 1 };
  s1 -> s6 [0, 65535] { R856 += 1, R820 += 1 };
  s1 -> s5 [0, 65535] { R856 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R856 += 1, R820 += 1, R792 += 1, R779 += 1 };
  s2 -> s2 [0, 65535] { R856 += 1, R820 += 1, R791 += 1, R792 += 1 };
  s2 -> s5 [0, 65535] { R856 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R856 += 1, R820 += 1, R792 += 1, R779 += 1 };
  s3 -> s2 [0, 65535] { R856 += 1, R820 += 1, R791 += 1, R792 += 1 };
  s3 -> s3 [0, 65535] { R856 += 1, R819 += 1, R820 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R856 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R856 += 1, R820 += 1 };
  s6 -> s5 [0, 65535] { R856 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R858 += 1, R821 += 1, R822 += 1 };
  s0 -> s0 [0, 65535] { R857 += 1, R858 += 1 };
  s0 -> s2 [0, 65535] { R858 += 1, R822 += 1, R793 += 1, R794 += 1 };
  s0 -> s3 [108, 108] { R858 += 1, R822 += 1, R794 += 1 };
  s1 -> s1 [0, 65535] { R858 += 1, R821 += 1, R822 += 1 };
  s1 -> s2 [0, 65535] { R858 += 1, R822 += 1, R793 += 1, R794 += 1 };
  s1 -> s3 [108, 108] { R858 += 1, R822 += 1, R794 += 1 };
  s2 -> s2 [0, 65535] { R858 += 1, R822 += 1, R793 += 1, R794 += 1 };
  s2 -> s3 [108, 108] { R858 += 1, R822 += 1, R794 += 1 };
  s3 -> s4 [111, 111] { R858 += 1, R822 += 1, R794 += 1 };
  s4 -> s5 [99, 99] { R858 += 1, R822 += 1, R794 += 1 };
  s5 -> s6 [97, 97] { R858 += 1, R822 += 1, R794 += 1 };
  s6 -> s7 [108, 108] { R858 += 1, R822 += 1, R794 += 1 };
  s7 -> s8 [104, 104] { R858 += 1, R822 += 1, R794 += 1 };
  s8 -> s9 [111, 111] { R858 += 1, R822 += 1, R794 += 1 };
  s9 -> s10 [115, 115] { R858 += 1, R822 += 1, R794 += 1 };
  s10 -> s11 [116, 116] { R858 += 1, R822 += 1, R794 += 1 };
  s11 -> s11 [0, 65535] { R858 += 1, R822 += 1 };
  s11 -> s12 [0, 65535] { R858 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R858 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  accepting s11, s12, s13;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R859 += 1, R860 += 1 };
  s0 -> s1 [0, 65535] { R860 += 1, R823 += 1, R824 += 1 };
  s0 -> s2 [0, 65535] { R860 += 1, R824 += 1, R804 += 1, R780 += 1 };
  s0 -> s3 [0, 65535] { R860 += 1, R824 += 1, R803 += 1, R804 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R860 += 1, R823 += 1, R824 += 1 };
  s1 -> s2 [0, 65535] { R860 += 1, R824 += 1, R804 += 1, R780 += 1 };
  s1 -> s3 [0, 65535] { R860 += 1, R824 += 1, R803 += 1, R804 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R860 += 1 };
  s2 -> s2 [0, 65535] { R860 += 1, R824 += 1, R804 += 1, R780 += 1 };
  s2 -> s6 [0, 65535] { R860 += 1, R824 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R860 += 1 };
  s3 -> s2 [0, 65535] { R860 += 1, R824 += 1, R804 += 1, R780 += 1 };
  s3 -> s3 [0, 65535] { R860 += 1, R824 += 1, R803 += 1, R804 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R860 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R860 += 1 };
  s6 -> s6 [0, 65535] { R860 += 1, R824 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R862 += 1, R825 += 1, R826 += 1 };
  s0 -> s0 [0, 65535] { R861 += 1, R862 += 1 };
  s0 -> s2 [0, 65535] { R862 += 1, R826 += 1 };
  s1 -> s1 [0, 65535] { R862 += 1, R825 += 1, R826 += 1 };
  s1 -> s2 [0, 65535] { R862 += 1, R826 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R862 += 1, R826 += 1 };
  s2 -> s3 [0, 65535] { R862 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R862 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P56
automaton P56_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
constraint R1 = R794 && R2 = R802 && R3 = R862 && R11 = 0 && R12 = R826 && R785 = 0 && R786 = 1 && R787 = 0 && R788 = 1 && R789 = 0 && R790 = R794 && R791 = 0 && R792 = R794 && R793 = 0 && R795 - R826 = 1 && R796 = R802 && R797 - R826 = 1 && R798 = R802 && R799 - R826 = 1 && R800 = R802 && R801 - R826 = 1 && R805 = 0 && R806 = R826 && R807 = 0 && R808 = R826 && R809 = 0 && R810 = R826 && R811 = 0 && R812 = R826 && R813 = 0 && R814 = R826 && R815 = 0 && R816 = R826 && R817 = 0 && R818 = R826 && R819 = 0 && R820 = R826 && R821 = 0 && R822 = R826 && R823 = 0 && R824 = R826 && R825 = 0 && R827 = 10 && R828 = R862 && R829 = 10 && R830 = R862 && R831 = 10 && R832 = R862 && R833 = 10 && R834 = R862 && R835 = 10 && R836 = R862 && R837 = 10 && R838 = R862 && R839 = 10 && R840 = R862 && R841 = 10 && R842 = R862 && R843 = 10 && R844 = R862 && R845 = 10 && R846 = R862 && R847 = 10 && R848 = R862 && R849 = 10 && R850 = R862 && R851 = 10 && R852 = R862 && R853 = 10 && R854 = R862 && R855 = 10 && R856 = R862 && R857 = 10 && R858 = R862 && R859 = 10 && R860 = R862 && R861 = 10 && R0 != 0 && R6 < 1 && R7 < 1 && 0 < R794 && R826 < R802 && -1 < R826 && 9 < R862 && (R781 != 0 || ((R4 != 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R0 = R782 || R782 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R782 || R782 = 1 || R782 < 0) && (R782 != 1 || -1 < R0) && (R0 = R782 || R782 = 1))))) && (R783 != 0 || ((R4 != 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R0 = R784 || R784 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R784 || R784 = 1 || R784 < 0) && (R784 != 1 || -1 < R0) && (R0 = R784 || R784 = 1))))) && (R780 = 0 || (R803 = 0 && R804 = 0)) && (R781 = 0 || (R4 = 0 && R0 < 0)) && (R783 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
