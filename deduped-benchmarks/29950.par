// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R3, R4, R465, R466, R470, R471, R5, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R7, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R653 += 1 };
  s0 -> s0 [0, 65535] { R652 += 1, R653 += 1 };
  s0 -> s2 [46, 46] { R653 += 1 };
  s0 -> s3 [47, 47] { R653 += 1 };
  s0 -> s1 [48, 65535] { R653 += 1 };
  s1 -> s1 [0, 45] { R653 += 1 };
  s1 -> s2 [46, 46] { R653 += 1 };
  s1 -> s3 [47, 47] { R653 += 1 };
  s1 -> s1 [48, 65535] { R653 += 1 };
  s2 -> s1 [0, 45] { R653 += 1 };
  s2 -> s2 [46, 46] { R653 += 1 };
  s2 -> s3 [47, 47] { R653 += 1 };
  s2 -> s1 [48, 114] { R653 += 1 };
  s2 -> s8 [115, 115] { R653 += 1 };
  s2 -> s1 [116, 65535] { R653 += 1 };
  s3 -> s3 [0, 45] { R653 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R653 += 1 };
  s3 -> s3 [47, 65535] { R653 += 1 };
  s4 -> s3 [0, 45] { R653 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R653 += 1 };
  s4 -> s3 [47, 114] { R653 += 1 };
  s4 -> s5 [115, 115] { R653 += 1 };
  s4 -> s3 [116, 65535] { R653 += 1 };
  s5 -> s3 [0, 45] { R653 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R653 += 1 };
  s5 -> s3 [47, 110] { R653 += 1 };
  s5 -> s6 [111, 111] { R653 += 1 };
  s5 -> s3 [112, 65535] { R653 += 1 };
  s6 -> s3 [0, 45] { R653 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R653 += 1 };
  s6 -> s3 [47, 98] { R653 += 1 };
  s6 -> s7 [99, 99] { R653 += 1 };
  s6 -> s3 [100, 65535] { R653 += 1 };
  s7 -> s3 [0, 45] { R653 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R653 += 1 };
  s7 -> s3 [47, 106] { R653 += 1 };
  s7 -> s3 [108, 65535] { R653 += 1 };
  s8 -> s1 [0, 45] { R653 += 1 };
  s8 -> s2 [46, 46] { R653 += 1 };
  s8 -> s3 [47, 47] { R653 += 1 };
  s8 -> s1 [48, 110] { R653 += 1 };
  s8 -> s9 [111, 111] { R653 += 1 };
  s8 -> s1 [112, 65535] { R653 += 1 };
  s9 -> s1 [0, 45] { R653 += 1 };
  s9 -> s2 [46, 46] { R653 += 1 };
  s9 -> s3 [47, 47] { R653 += 1 };
  s9 -> s1 [48, 98] { R653 += 1 };
  s9 -> s10 [99, 99] { R653 += 1 };
  s9 -> s1 [100, 65535] { R653 += 1 };
  s10 -> s1 [0, 45] { R653 += 1 };
  s10 -> s2 [46, 46] { R653 += 1 };
  s10 -> s3 [47, 47] { R653 += 1 };
  s10 -> s1 [48, 106] { R653 += 1 };
  s10 -> s1 [108, 65535] { R653 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R654 += 1, R655 += 1 };
  s0 -> s1 [0, 65535] { R655 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R655 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R657 += 1, R471 += 1 };
  s0 -> s0 [0, 65535] { R656 += 1, R657 += 1 };
  s0 -> s2 [0, 65535] { R657 += 1, R470 += 1, R471 += 1 };
  s0 -> s3 [47, 47] { R657 += 1 };
  s0 -> s1 [48, 65535] { R657 += 1, R471 += 1 };
  s1 -> s1 [0, 46] { R657 += 1, R471 += 1 };
  s1 -> s3 [47, 47] { R657 += 1 };
  s1 -> s1 [48, 65535] { R657 += 1, R471 += 1 };
  s2 -> s1 [0, 46] { R657 += 1, R471 += 1 };
  s2 -> s2 [0, 65535] { R657 += 1, R470 += 1, R471 += 1 };
  s2 -> s3 [47, 47] { R657 += 1 };
  s2 -> s1 [48, 65535] { R657 += 1, R471 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R657 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 62] { R659 += 1, R617 += 1 };
  s0 -> s0 [0, 65535] { R658 += 1, R659 += 1 };
  s0 -> s2 [0, 65535] { R659 += 1, R616 += 1, R617 += 1 };
  s0 -> s3 [63, 63] { R659 += 1, R617 += 1 };
  s0 -> s1 [64, 65535] { R659 += 1, R617 += 1 };
  s1 -> s1 [0, 62] { R659 += 1, R617 += 1 };
  s1 -> s3 [63, 63] { R659 += 1, R617 += 1 };
  s1 -> s1 [64, 65535] { R659 += 1, R617 += 1 };
  s2 -> s1 [0, 62] { R659 += 1, R617 += 1 };
  s2 -> s2 [0, 65535] { R659 += 1, R616 += 1, R617 += 1 };
  s2 -> s3 [63, 63] { R659 += 1, R617 += 1 };
  s2 -> s1 [64, 65535] { R659 += 1, R617 += 1 };
  s3 -> s3 [0, 65535] { R659 += 1, R617 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R659 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R659 += 1 };
  accepting s3, s4, s5;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R661 += 1, R619 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R660 += 1, R661 += 1 };
  s0 -> s2 [0, 65535] { R661 += 1, R618 += 1, R619 += 1 };
  s1 -> s1 [0, 65535] { R661 += 1, R619 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R661 += 1 };
  s2 -> s1 [0, 65535] { R661 += 1, R619 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R661 += 1, R618 += 1, R619 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R661 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R663 += 1, R621 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R663 += 1, R621 += 1, R9 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R662 += 1, R663 += 1 };
  s0 -> s3 [0, 65535] { R663 += 1, R620 += 1, R621 += 1 };
  s0 -> s4 [63, 63] { R663 += 1, R621 += 1 };
  s0 -> s1 [64, 65535] { R663 += 1, R621 += 1, R10 += 1 };
  s1 -> s1 [0, 62] { R663 += 1, R621 += 1, R10 += 1 };
  s1 -> s4 [63, 63] { R663 += 1, R621 += 1 };
  s1 -> s1 [64, 65535] { R663 += 1, R621 += 1, R10 += 1 };
  s2 -> s1 [0, 62] { R663 += 1, R621 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R663 += 1, R621 += 1, R9 += 1, R10 += 1 };
  s2 -> s4 [63, 63] { R663 += 1, R621 += 1 };
  s2 -> s1 [64, 65535] { R663 += 1, R621 += 1, R10 += 1 };
  s3 -> s1 [0, 62] { R663 += 1, R621 += 1, R10 += 1 };
  s3 -> s2 [0, 65535] { R663 += 1, R621 += 1, R9 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R663 += 1, R620 += 1, R621 += 1 };
  s3 -> s4 [63, 63] { R663 += 1, R621 += 1 };
  s3 -> s1 [64, 65535] { R663 += 1, R621 += 1, R10 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R663 += 1 };
  s4 -> s4 [0, 65535] { R663 += 1, R621 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R663 += 1 };
  accepting s4, s5, s6;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 62] { R665 += 1, R623 += 1, R585 += 1 };
  s0 -> s2 [0, 65535] { R665 += 1, R622 += 1, R623 += 1 };
  s0 -> s3 [0, 65535] { R665 += 1, R623 += 1, R584 += 1, R585 += 1 };
  s0 -> s0 [0, 65535] { R664 += 1, R665 += 1 };
  s0 -> s4 [63, 63] { R665 += 1, R623 += 1, R585 += 1 };
  s0 -> s1 [64, 65535] { R665 += 1, R623 += 1, R585 += 1 };
  s1 -> s5 [0, 65535] { R665 += 1 };
  s1 -> s1 [0, 65535] { R665 += 1, R623 += 1, R585 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R665 += 1, R623 += 1 };
  s2 -> s1 [0, 62] { R665 += 1, R623 += 1, R585 += 1 };
  s2 -> s2 [0, 65535] { R665 += 1, R622 += 1, R623 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R665 += 1, R623 += 1, R584 += 1, R585 += 1 };
  s2 -> s4 [63, 63] { R665 += 1, R623 += 1, R585 += 1 };
  s2 -> s1 [64, 65535] { R665 += 1, R623 += 1, R585 += 1 };
  s3 -> s1 [0, 62] { R665 += 1, R623 += 1, R585 += 1 };
  s3 -> s5 [0, 65535] { R665 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R665 += 1, R623 += 1, R584 += 1, R585 += 1 };
  s3 -> s4 [63, 63] { R665 += 1, R623 += 1, R585 += 1 };
  s3 -> s1 [64, 65535] { R665 += 1, R623 += 1, R585 += 1 };
  s4 -> s1 [0, 65535] { R665 += 1, R623 += 1, R585 += 1 };
  s5 -> s5 [0, 65535] { R665 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R665 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R665 += 1, R623 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R667 += 1, R624 += 1, R625 += 1 };
  s0 -> s2 [0, 65535] { R667 += 1, R625 += 1, R586 += 1, R587 += 1 };
  s0 -> s3 [0, 65535] { R667 += 1, R625 += 1, R587 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R666 += 1, R667 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R667 += 1, R624 += 1, R625 += 1 };
  s1 -> s2 [0, 65535] { R667 += 1, R625 += 1, R586 += 1, R587 += 1 };
  s1 -> s3 [0, 65535] { R667 += 1, R625 += 1, R587 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R667 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R667 += 1, R625 += 1, R586 += 1, R587 += 1 };
  s2 -> s3 [0, 65535] { R667 += 1, R625 += 1, R587 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R667 += 1, R625 += 1 };
  s3 -> s5 [0, 65535] { R667 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R667 += 1, R625 += 1, R587 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R667 += 1, R625 += 1 };
  s4 -> s5 [0, 65535] { R667 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R667 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R669 += 1, R627 += 1 };
  s0 -> s0 [0, 65535] { R668 += 1, R669 += 1 };
  s0 -> s2 [0, 65535] { R669 += 1, R626 += 1, R627 += 1 };
  s1 -> s1 [0, 65535] { R669 += 1, R627 += 1 };
  s1 -> s4 [0, 65535] { R669 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R669 += 1, R627 += 1 };
  s2 -> s2 [0, 65535] { R669 += 1, R626 += 1, R627 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R669 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 63] { R671 += 1, R629 += 1 };
  s0 -> s2 [0, 65535] { R671 += 1, R628 += 1, R629 += 1 };
  s0 -> s0 [0, 65535] { R670 += 1, R671 += 1 };
  s0 -> s3 [64, 64] { R671 += 1, R629 += 1 };
  s0 -> s1 [65, 65535] { R671 += 1, R629 += 1 };
  s1 -> s1 [0, 63] { R671 += 1, R629 += 1 };
  s1 -> s3 [64, 64] { R671 += 1, R629 += 1 };
  s1 -> s1 [65, 65535] { R671 += 1, R629 += 1 };
  s2 -> s1 [0, 63] { R671 += 1, R629 += 1 };
  s2 -> s2 [0, 65535] { R671 += 1, R628 += 1, R629 += 1 };
  s2 -> s3 [64, 64] { R671 += 1, R629 += 1 };
  s2 -> s1 [65, 65535] { R671 += 1, R629 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R671 += 1, R629 += 1 };
  s3 -> s5 [0, 65535] { R671 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R671 += 1 };
  accepting s3, s4, s5;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R673 += 1, R631 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R672 += 1, R673 += 1 };
  s0 -> s2 [0, 65535] { R673 += 1, R630 += 1, R631 += 1 };
  s1 -> s4 [0, 65535] { R673 += 1 };
  s1 -> s1 [0, 65535] { R673 += 1, R631 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R673 += 1, R631 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R673 += 1, R630 += 1, R631 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R673 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 36] { R675 += 1, R633 += 1, R597 += 1 };
  s0 -> s2 [0, 65535] { R675 += 1, R633 += 1, R596 += 1, R597 += 1 };
  s0 -> s0 [0, 65535] { R674 += 1, R675 += 1 };
  s0 -> s3 [0, 65535] { R675 += 1, R632 += 1, R633 += 1 };
  s0 -> s1 [38, 42] { R675 += 1, R633 += 1, R597 += 1 };
  s0 -> s1 [44, 57] { R675 += 1, R633 += 1, R597 += 1 };
  s0 -> s1 [59, 63] { R675 += 1, R633 += 1, R597 += 1 };
  s0 -> s1 [65, 65535] { R675 += 1, R633 += 1, R597 += 1 };
  s1 -> s1 [0, 36] { R675 += 1, R633 += 1, R597 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R675 += 1 };
  s1 -> s1 [0, 65535] { R675 += 1, R633 += 1 };
  s1 -> s1 [38, 42] { R675 += 1, R633 += 1, R597 += 1 };
  s1 -> s1 [44, 57] { R675 += 1, R633 += 1, R597 += 1 };
  s1 -> s1 [59, 63] { R675 += 1, R633 += 1, R597 += 1 };
  s1 -> s1 [65, 65535] { R675 += 1, R633 += 1, R597 += 1 };
  s2 -> s1 [0, 36] { R675 += 1, R633 += 1, R597 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R675 += 1 };
  s2 -> s2 [0, 65535] { R675 += 1, R633 += 1, R596 += 1, R597 += 1 };
  s2 -> s1 [38, 42] { R675 += 1, R633 += 1, R597 += 1 };
  s2 -> s1 [44, 57] { R675 += 1, R633 += 1, R597 += 1 };
  s2 -> s1 [59, 63] { R675 += 1, R633 += 1, R597 += 1 };
  s2 -> s1 [65, 65535] { R675 += 1, R633 += 1, R597 += 1 };
  s3 -> s1 [0, 36] { R675 += 1, R633 += 1, R597 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R675 += 1, R633 += 1, R596 += 1, R597 += 1 };
  s3 -> s3 [0, 65535] { R675 += 1, R632 += 1, R633 += 1 };
  s3 -> s1 [38, 42] { R675 += 1, R633 += 1, R597 += 1 };
  s3 -> s1 [44, 57] { R675 += 1, R633 += 1, R597 += 1 };
  s3 -> s1 [59, 63] { R675 += 1, R633 += 1, R597 += 1 };
  s3 -> s1 [65, 65535] { R675 += 1, R633 += 1, R597 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R675 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R677 += 1, R635 += 1, R598 += 1, R599 += 1 };
  s0 -> s0 [0, 65535] { R676 += 1, R677 += 1 };
  s0 -> s2 [0, 65535] { R677 += 1, R634 += 1, R635 += 1 };
  s0 -> s3 [0, 65535] { R677 += 1, R635 += 1, R599 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R677 += 1, R635 += 1, R598 += 1, R599 += 1 };
  s1 -> s5 [0, 65535] { R677 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R677 += 1, R635 += 1, R599 += 1, R0 += 1 };
  s2 -> s1 [0, 65535] { R677 += 1, R635 += 1, R598 += 1, R599 += 1 };
  s2 -> s2 [0, 65535] { R677 += 1, R634 += 1, R635 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R677 += 1, R635 += 1, R599 += 1, R0 += 1 };
  s3 -> s4 [0, 65535] { R677 += 1, R635 += 1 };
  s3 -> s5 [0, 65535] { R677 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R677 += 1, R635 += 1, R599 += 1, R0 += 1 };
  s4 -> s4 [0, 65535] { R677 += 1, R635 += 1 };
  s4 -> s5 [0, 65535] { R677 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R677 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 43] { R679 += 1, R637 += 1, R601 += 1 };
  s0 -> s2 [0, 65535] { R679 += 1, R636 += 1, R637 += 1 };
  s0 -> s3 [0, 65535] { R679 += 1, R637 += 1, R600 += 1, R601 += 1 };
  s0 -> s0 [0, 65535] { R678 += 1, R679 += 1 };
  s0 -> s1 [45, 64] { R679 += 1, R637 += 1, R601 += 1 };
  s0 -> s4 [90, 90] { R679 += 1, R637 += 1, R601 += 1 };
  s0 -> s1 [91, 65535] { R679 += 1, R637 += 1, R601 += 1 };
  s1 -> s1 [0, 43] { R679 += 1, R637 += 1, R601 += 1 };
  s1 -> s1 [45, 64] { R679 += 1, R637 += 1, R601 += 1 };
  s1 -> s4 [90, 90] { R679 += 1, R637 += 1, R601 += 1 };
  s1 -> s1 [91, 65535] { R679 += 1, R637 += 1, R601 += 1 };
  s2 -> s1 [0, 43] { R679 += 1, R637 += 1, R601 += 1 };
  s2 -> s2 [0, 65535] { R679 += 1, R636 += 1, R637 += 1 };
  s2 -> s3 [0, 65535] { R679 += 1, R637 += 1, R600 += 1, R601 += 1 };
  s2 -> s1 [45, 64] { R679 += 1, R637 += 1, R601 += 1 };
  s2 -> s4 [90, 90] { R679 += 1, R637 += 1, R601 += 1 };
  s2 -> s1 [91, 65535] { R679 += 1, R637 += 1, R601 += 1 };
  s3 -> s1 [0, 43] { R679 += 1, R637 += 1, R601 += 1 };
  s3 -> s3 [0, 65535] { R679 += 1, R637 += 1, R600 += 1, R601 += 1 };
  s3 -> s1 [45, 64] { R679 += 1, R637 += 1, R601 += 1 };
  s3 -> s4 [90, 90] { R679 += 1, R637 += 1, R601 += 1 };
  s3 -> s1 [91, 65535] { R679 += 1, R637 += 1, R601 += 1 };
  s4 -> s4 [0, 43] { R679 += 1, R637 += 1, R601 += 1 };
  s4 -> s4 [0, 65535] { R679 += 1, R637 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R679 += 1 };
  s4 -> s4 [45, 64] { R679 += 1, R637 += 1, R601 += 1 };
  s4 -> s4 [90, 65535] { R679 += 1, R637 += 1, R601 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R679 += 1 };
  accepting s4, s5, s6;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R681 += 1, R639 += 1, R602 += 1, R603 += 1 };
  s0 -> s0 [0, 65535] { R680 += 1, R681 += 1 };
  s0 -> s2 [0, 65535] { R681 += 1, R638 += 1, R639 += 1 };
  s0 -> s3 [0, 65535] { R681 += 1, R639 += 1, R603 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R681 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R681 += 1, R639 += 1, R602 += 1, R603 += 1 };
  s1 -> s3 [0, 65535] { R681 += 1, R639 += 1, R603 += 1, R2 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R681 += 1, R639 += 1, R602 += 1, R603 += 1 };
  s2 -> s2 [0, 65535] { R681 += 1, R638 += 1, R639 += 1 };
  s2 -> s3 [0, 65535] { R681 += 1, R639 += 1, R603 += 1, R2 += 1 };
  s3 -> s4 [0, 65535] { R681 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R681 += 1, R639 += 1 };
  s3 -> s3 [0, 65535] { R681 += 1, R639 += 1, R603 += 1, R2 += 1 };
  s4 -> s4 [0, 65535] { R681 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R681 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R681 += 1, R639 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 57] { R683 += 1, R641 += 1, R605 += 1 };
  s0 -> s2 [0, 65535] { R683 += 1, R641 += 1, R605 += 1, R465 += 1 };
  s0 -> s0 [0, 65535] { R682 += 1, R683 += 1 };
  s0 -> s3 [0, 65535] { R683 += 1, R641 += 1, R604 += 1, R605 += 1 };
  s0 -> s4 [0, 65535] { R683 += 1, R640 += 1, R641 += 1 };
  s0 -> s5 [58, 58] { R683 += 1, R641 += 1, R605 += 1 };
  s0 -> s1 [59, 65535] { R683 += 1, R641 += 1, R605 += 1 };
  s1 -> s1 [0, 57] { R683 += 1, R641 += 1, R605 += 1 };
  s1 -> s1 [0, 65535] { R683 += 1, R641 += 1 };
  s1 -> s7 [0, 65535] { R683 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [58, 58] { R683 += 1, R641 += 1, R605 += 1 };
  s1 -> s1 [59, 65535] { R683 += 1, R641 += 1, R605 += 1 };
  s2 -> s1 [0, 57] { R683 += 1, R641 += 1, R605 += 1 };
  s2 -> s2 [0, 65535] { R683 += 1, R641 += 1, R605 += 1, R465 += 1 };
  s2 -> s7 [0, 65535] { R683 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R683 += 1, R641 += 1 };
  s2 -> s5 [58, 58] { R683 += 1, R641 += 1, R605 += 1 };
  s2 -> s1 [59, 65535] { R683 += 1, R641 += 1, R605 += 1 };
  s3 -> s1 [0, 57] { R683 += 1, R641 += 1, R605 += 1 };
  s3 -> s2 [0, 65535] { R683 += 1, R641 += 1, R605 += 1, R465 += 1 };
  s3 -> s7 [0, 65535] { R683 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R683 += 1, R641 += 1, R604 += 1, R605 += 1 };
  s3 -> s5 [58, 58] { R683 += 1, R641 += 1, R605 += 1 };
  s3 -> s1 [59, 65535] { R683 += 1, R641 += 1, R605 += 1 };
  s4 -> s1 [0, 57] { R683 += 1, R641 += 1, R605 += 1 };
  s4 -> s2 [0, 65535] { R683 += 1, R641 += 1, R605 += 1, R465 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R683 += 1, R641 += 1, R604 += 1, R605 += 1 };
  s4 -> s4 [0, 65535] { R683 += 1, R640 += 1, R641 += 1 };
  s4 -> s5 [58, 58] { R683 += 1, R641 += 1, R605 += 1 };
  s4 -> s1 [59, 65535] { R683 += 1, R641 += 1, R605 += 1 };
  s5 -> s5 [0, 65535] { R683 += 1, R641 += 1, R605 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R683 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R683 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R683 += 1, R641 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 89] { R685 += 1, R643 += 1, R607 += 1 };
  s0 -> s0 [0, 65535] { R684 += 1, R685 += 1 };
  s0 -> s2 [0, 65535] { R685 += 1, R643 += 1, R606 += 1, R607 += 1 };
  s0 -> s3 [0, 65535] { R685 += 1, R642 += 1, R643 += 1 };
  s0 -> s4 [0, 65535] { R685 += 1, R643 += 1, R607 += 1, R466 += 1 };
  s0 -> s5 [90, 90] { R685 += 1, R643 += 1, R607 += 1 };
  s0 -> s1 [91, 65535] { R685 += 1, R643 += 1, R607 += 1 };
  s1 -> s1 [0, 89] { R685 += 1, R643 += 1, R607 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R685 += 1, R643 += 1 };
  s1 -> s7 [0, 65535] { R685 += 1 };
  s1 -> s5 [90, 90] { R685 += 1, R643 += 1, R607 += 1 };
  s1 -> s1 [91, 65535] { R685 += 1, R643 += 1, R607 += 1 };
  s2 -> s1 [0, 89] { R685 += 1, R643 += 1, R607 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R685 += 1, R643 += 1, R606 += 1, R607 += 1 };
  s2 -> s7 [0, 65535] { R685 += 1 };
  s2 -> s4 [0, 65535] { R685 += 1, R643 += 1, R607 += 1, R466 += 1 };
  s2 -> s5 [90, 90] { R685 += 1, R643 += 1, R607 += 1 };
  s2 -> s1 [91, 65535] { R685 += 1, R643 += 1, R607 += 1 };
  s3 -> s1 [0, 89] { R685 += 1, R643 += 1, R607 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R685 += 1, R643 += 1, R606 += 1, R607 += 1 };
  s3 -> s3 [0, 65535] { R685 += 1, R642 += 1, R643 += 1 };
  s3 -> s4 [0, 65535] { R685 += 1, R643 += 1, R607 += 1, R466 += 1 };
  s3 -> s5 [90, 90] { R685 += 1, R643 += 1, R607 += 1 };
  s3 -> s1 [91, 65535] { R685 += 1, R643 += 1, R607 += 1 };
  s4 -> s1 [0, 89] { R685 += 1, R643 += 1, R607 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R685 += 1 };
  s4 -> s8 [0, 65535] { R685 += 1, R643 += 1 };
  s4 -> s4 [0, 65535] { R685 += 1, R643 += 1, R607 += 1, R466 += 1 };
  s4 -> s5 [90, 90] { R685 += 1, R643 += 1, R607 += 1 };
  s4 -> s1 [91, 65535] { R685 += 1, R643 += 1, R607 += 1 };
  s5 -> s5 [0, 65535] { R685 += 1, R643 += 1, R607 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R685 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R685 += 1 };
  s8 -> s8 [0, 65535] { R685 += 1, R643 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 90] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s0 -> s2 [0, 65535] { R687 += 1, R645 += 1, R609 += 1, R588 += 1, R589 += 1 };
  s0 -> s3 [0, 65535] { R687 += 1, R644 += 1, R645 += 1 };
  s0 -> s0 [0, 65535] { R686 += 1, R687 += 1 };
  s0 -> s4 [0, 65535] { R687 += 1, R645 += 1, R608 += 1, R609 += 1 };
  s0 -> s5 [91, 91] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s0 -> s1 [92, 65535] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s1 -> s9 [0, 65535] { R687 += 1, R645 += 1, R609 += 1 };
  s1 -> s6 [0, 65535] { R687 += 1 };
  s1 -> s1 [0, 65535] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R687 += 1, R645 += 1 };
  s2 -> s1 [0, 90] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s2 -> s2 [0, 65535] { R687 += 1, R645 += 1, R609 += 1, R588 += 1, R589 += 1 };
  s2 -> s6 [0, 65535] { R687 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R687 += 1, R645 += 1 };
  s2 -> s5 [91, 91] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s2 -> s1 [92, 65535] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s3 -> s1 [0, 90] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s3 -> s2 [0, 65535] { R687 += 1, R645 += 1, R609 += 1, R588 += 1, R589 += 1 };
  s3 -> s3 [0, 65535] { R687 += 1, R644 += 1, R645 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R687 += 1, R645 += 1, R608 += 1, R609 += 1 };
  s3 -> s5 [91, 91] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s3 -> s1 [92, 65535] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s4 -> s1 [0, 90] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s4 -> s2 [0, 65535] { R687 += 1, R645 += 1, R609 += 1, R588 += 1, R589 += 1 };
  s4 -> s6 [0, 65535] { R687 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R687 += 1, R645 += 1, R608 += 1, R609 += 1 };
  s4 -> s5 [91, 91] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s4 -> s1 [92, 65535] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s5 -> s1 [0, 65535] { R687 += 1, R645 += 1, R609 += 1, R589 += 1 };
  s6 -> s6 [0, 65535] { R687 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R687 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R687 += 1, R645 += 1 };
  s9 -> s9 [0, 65535] { R687 += 1, R645 += 1, R609 += 1 };
  s9 -> s6 [0, 65535] { R687 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R687 += 1, R645 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R689 += 1, R646 += 1, R647 += 1 };
  s0 -> s0 [0, 65535] { R688 += 1, R689 += 1 };
  s0 -> s2 [0, 65535] { R689 += 1, R647 += 1, R611 += 1, R591 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R689 += 1, R647 += 1, R610 += 1, R611 += 1 };
  s0 -> s4 [0, 65535] { R689 += 1, R647 += 1, R611 += 1, R590 += 1, R591 += 1 };
  s1 -> s1 [0, 65535] { R689 += 1, R646 += 1, R647 += 1 };
  s1 -> s2 [0, 65535] { R689 += 1, R647 += 1, R611 += 1, R591 += 1, R7 += 1 };
  s1 -> s3 [0, 65535] { R689 += 1, R647 += 1, R610 += 1, R611 += 1 };
  s1 -> s4 [0, 65535] { R689 += 1, R647 += 1, R611 += 1, R590 += 1, R591 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s5 [0, 65535] { R689 += 1 };
  s2 -> s6 [0, 65535] { R689 += 1, R647 += 1 };
  s2 -> s2 [0, 65535] { R689 += 1, R647 += 1, R611 += 1, R591 += 1, R7 += 1 };
  s2 -> s8 [0, 65535] { R689 += 1, R647 += 1, R611 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s5 [0, 65535] { R689 += 1 };
  s3 -> s2 [0, 65535] { R689 += 1, R647 += 1, R611 += 1, R591 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R689 += 1, R647 += 1, R610 += 1, R611 += 1 };
  s3 -> s4 [0, 65535] { R689 += 1, R647 += 1, R611 += 1, R590 += 1, R591 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R689 += 1 };
  s4 -> s6 [0, 65535] { R689 += 1, R647 += 1 };
  s4 -> s2 [0, 65535] { R689 += 1, R647 += 1, R611 += 1, R591 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R689 += 1, R647 += 1, R611 += 1, R590 += 1, R591 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R689 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R689 += 1 };
  s6 -> s6 [0, 65535] { R689 += 1, R647 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R689 += 1 };
  s8 -> s6 [0, 65535] { R689 += 1, R647 += 1 };
  s8 -> s8 [0, 65535] { R689 += 1, R647 += 1, R611 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 89] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s0 -> s2 [0, 65535] { R691 += 1, R648 += 1, R649 += 1 };
  s0 -> s0 [0, 65535] { R690 += 1, R691 += 1 };
  s0 -> s3 [0, 65535] { R691 += 1, R649 += 1, R612 += 1, R613 += 1 };
  s0 -> s4 [0, 65535] { R691 += 1, R649 += 1, R613 += 1, R592 += 1, R593 += 1 };
  s0 -> s1 [91, 65535] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s1 -> s1 [0, 89] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s1 -> s5 [0, 65535] { R691 += 1 };
  s1 -> s1 [0, 65535] { R691 += 1, R649 += 1, R613 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R691 += 1, R649 += 1 };
  s1 -> s1 [91, 65535] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s2 -> s1 [0, 89] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s2 -> s2 [0, 65535] { R691 += 1, R648 += 1, R649 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R691 += 1, R649 += 1, R612 += 1, R613 += 1 };
  s2 -> s4 [0, 65535] { R691 += 1, R649 += 1, R613 += 1, R592 += 1, R593 += 1 };
  s2 -> s1 [91, 65535] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s3 -> s1 [0, 89] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s3 -> s5 [0, 65535] { R691 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R691 += 1, R649 += 1, R612 += 1, R613 += 1 };
  s3 -> s4 [0, 65535] { R691 += 1, R649 += 1, R613 += 1, R592 += 1, R593 += 1 };
  s3 -> s1 [91, 65535] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s4 -> s1 [0, 89] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s4 -> s5 [0, 65535] { R691 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R691 += 1, R649 += 1, R613 += 1, R592 += 1, R593 += 1 };
  s4 -> s7 [0, 65535] { R691 += 1, R649 += 1 };
  s4 -> s1 [91, 65535] { R691 += 1, R649 += 1, R613 += 1, R593 += 1 };
  s5 -> s5 [0, 65535] { R691 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R691 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R691 += 1, R649 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R693 += 1, R651 += 1, R615 += 1, R595 += 1, R583 += 1 };
  s0 -> s0 [0, 65535] { R692 += 1, R693 += 1 };
  s0 -> s2 [0, 65535] { R693 += 1, R650 += 1, R651 += 1 };
  s0 -> s3 [0, 65535] { R693 += 1, R651 += 1, R615 += 1, R594 += 1, R595 += 1 };
  s0 -> s4 [0, 65535] { R693 += 1, R651 += 1, R614 += 1, R615 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R693 += 1, R651 += 1 };
  s1 -> s6 [0, 65535] { R693 += 1 };
  s1 -> s8 [0, 65535] { R693 += 1, R651 += 1, R615 += 1 };
  s1 -> s1 [0, 65535] { R693 += 1, R651 += 1, R615 += 1, R595 += 1, R583 += 1 };
  s2 -> s1 [0, 65535] { R693 += 1, R651 += 1, R615 += 1, R595 += 1, R583 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R693 += 1, R650 += 1, R651 += 1 };
  s2 -> s3 [0, 65535] { R693 += 1, R651 += 1, R615 += 1, R594 += 1, R595 += 1 };
  s2 -> s4 [0, 65535] { R693 += 1, R651 += 1, R614 += 1, R615 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R693 += 1, R651 += 1 };
  s3 -> s6 [0, 65535] { R693 += 1 };
  s3 -> s3 [0, 65535] { R693 += 1, R651 += 1, R615 += 1, R594 += 1, R595 += 1 };
  s3 -> s1 [0, 65535] { R693 += 1, R651 += 1, R615 += 1, R595 += 1, R583 += 1 };
  s4 -> s1 [0, 65535] { R693 += 1, R651 += 1, R615 += 1, R595 += 1, R583 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R693 += 1 };
  s4 -> s3 [0, 65535] { R693 += 1, R651 += 1, R615 += 1, R594 += 1, R595 += 1 };
  s4 -> s4 [0, 65535] { R693 += 1, R651 += 1, R614 += 1, R615 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R693 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R693 += 1, R651 += 1 };
  s7 -> s6 [0, 65535] { R693 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R693 += 1, R651 += 1 };
  s8 -> s6 [0, 65535] { R693 += 1 };
  s8 -> s8 [0, 65535] { R693 += 1, R651 += 1, R615 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 - R10 = 1 && R2 = R595 && R3 = R615 && R4 = R627 && R5 = R693 && R9 = 0 && R470 = 0 && R471 = R651 && R584 = 0 && R585 = 1 && R586 = 0 && R587 = 1 && R588 = 0 && R589 = 1 && R590 = 0 && R591 = 1 && R592 = 0 && R593 = R595 && R594 = 0 && R596 = 0 && R597 = 1 && R598 = 0 && R599 = 1 && R600 = 2 && R601 = R615 && R602 = 2 && R603 = R615 && R604 = 2 && R605 = R615 && R606 = 2 && R607 = R615 && R608 = 2 && R609 = R615 && R610 = 2 && R611 = R615 && R612 = 2 && R613 = R615 && R614 = 2 && R616 - R651 = 1 && R617 = R627 && R618 - R651 = 1 && R619 = R627 && R620 - R651 = 1 && R621 = R627 && R622 - R651 = 1 && R623 = R627 && R624 - R651 = 1 && R625 = R627 && R626 - R651 = 1 && R628 = 0 && R629 = R651 && R630 = 0 && R631 = R651 && R632 = 0 && R633 = R651 && R634 = 0 && R635 = R651 && R636 = 0 && R637 = R651 && R638 = 0 && R639 = R651 && R640 = 0 && R641 = R651 && R642 = 0 && R643 = R651 && R644 = 0 && R645 = R651 && R646 = 0 && R647 = R651 && R648 = 0 && R649 = R651 && R650 = 0 && R652 = 10 && R653 = R693 && R654 = 10 && R655 = R693 && R656 = 10 && R657 = R693 && R658 = 10 && R659 = R693 && R660 = 10 && R661 = R693 && R662 = 10 && R663 = R693 && R664 = 10 && R665 = R693 && R666 = 10 && R667 = R693 && R668 = 10 && R669 = R693 && R670 = 10 && R671 = R693 && R672 = 10 && R673 = R693 && R674 = 10 && R675 = R693 && R676 = 10 && R677 = R693 && R678 = 10 && R679 = R693 && R680 = 10 && R681 = R693 && R682 = 10 && R683 = R693 && R684 = 10 && R685 = R693 && R686 = 10 && R687 = R693 && R688 = 10 && R689 = R693 && R690 = 10 && R691 = R693 && R692 = 10 && R0 != 0 && -1 < R10 && R465 < 1 && R466 < 1 && 0 < R595 && 1 < R615 && R651 < R627 && -1 < R651 && 9 < R693;
// End of Parikh automata intersection problem
