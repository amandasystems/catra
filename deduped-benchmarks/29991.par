// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R14, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R2, R3, R4, R5, R6, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R133 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s2 [46, 46] { R133 += 1 };
  s0 -> s3 [47, 47] { R133 += 1 };
  s0 -> s1 [48, 65535] { R133 += 1 };
  s1 -> s1 [0, 45] { R133 += 1 };
  s1 -> s2 [46, 46] { R133 += 1 };
  s1 -> s3 [47, 47] { R133 += 1 };
  s1 -> s1 [48, 65535] { R133 += 1 };
  s2 -> s1 [0, 45] { R133 += 1 };
  s2 -> s2 [46, 46] { R133 += 1 };
  s2 -> s3 [47, 47] { R133 += 1 };
  s2 -> s1 [48, 114] { R133 += 1 };
  s2 -> s8 [115, 115] { R133 += 1 };
  s2 -> s1 [116, 65535] { R133 += 1 };
  s3 -> s3 [0, 45] { R133 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R133 += 1 };
  s3 -> s3 [47, 65535] { R133 += 1 };
  s4 -> s3 [0, 45] { R133 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R133 += 1 };
  s4 -> s3 [47, 114] { R133 += 1 };
  s4 -> s5 [115, 115] { R133 += 1 };
  s4 -> s3 [116, 65535] { R133 += 1 };
  s5 -> s3 [0, 45] { R133 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R133 += 1 };
  s5 -> s3 [47, 110] { R133 += 1 };
  s5 -> s6 [111, 111] { R133 += 1 };
  s5 -> s3 [112, 65535] { R133 += 1 };
  s6 -> s3 [0, 45] { R133 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R133 += 1 };
  s6 -> s3 [47, 98] { R133 += 1 };
  s6 -> s7 [99, 99] { R133 += 1 };
  s6 -> s3 [100, 65535] { R133 += 1 };
  s7 -> s3 [0, 45] { R133 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R133 += 1 };
  s7 -> s3 [47, 106] { R133 += 1 };
  s7 -> s3 [108, 65535] { R133 += 1 };
  s8 -> s1 [0, 45] { R133 += 1 };
  s8 -> s2 [46, 46] { R133 += 1 };
  s8 -> s3 [47, 47] { R133 += 1 };
  s8 -> s1 [48, 110] { R133 += 1 };
  s8 -> s9 [111, 111] { R133 += 1 };
  s8 -> s1 [112, 65535] { R133 += 1 };
  s9 -> s1 [0, 45] { R133 += 1 };
  s9 -> s2 [46, 46] { R133 += 1 };
  s9 -> s3 [47, 47] { R133 += 1 };
  s9 -> s1 [48, 98] { R133 += 1 };
  s9 -> s10 [99, 99] { R133 += 1 };
  s9 -> s1 [100, 65535] { R133 += 1 };
  s10 -> s1 [0, 45] { R133 += 1 };
  s10 -> s2 [46, 46] { R133 += 1 };
  s10 -> s3 [47, 47] { R133 += 1 };
  s10 -> s1 [48, 106] { R133 += 1 };
  s10 -> s1 [108, 65535] { R133 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R135 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R135 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R137 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R137 += 1, R14 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s3 [47, 47] { R137 += 1 };
  s0 -> s1 [48, 65535] { R137 += 1, R15 += 1 };
  s1 -> s1 [0, 46] { R137 += 1, R15 += 1 };
  s1 -> s3 [47, 47] { R137 += 1 };
  s1 -> s1 [48, 65535] { R137 += 1, R15 += 1 };
  s2 -> s1 [0, 46] { R137 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R137 += 1, R14 += 1, R15 += 1 };
  s2 -> s3 [47, 47] { R137 += 1 };
  s2 -> s1 [48, 65535] { R137 += 1, R15 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R137 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R139 += 1, R99 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s2 [0, 65535] { R139 += 1, R98 += 1, R99 += 1 };
  s1 -> s1 [0, 65535] { R139 += 1, R99 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R139 += 1 };
  s2 -> s1 [0, 65535] { R139 += 1, R99 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R139 += 1, R98 += 1, R99 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R139 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 43] { R141 += 1, R111 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s1 [45, 63] { R141 += 1, R111 += 1 };
  s0 -> s3 [89, 89] { R141 += 1, R111 += 1 };
  s0 -> s1 [90, 65535] { R141 += 1, R111 += 1 };
  s1 -> s1 [0, 43] { R141 += 1, R111 += 1 };
  s1 -> s1 [45, 63] { R141 += 1, R111 += 1 };
  s1 -> s3 [89, 89] { R141 += 1, R111 += 1 };
  s1 -> s1 [90, 65535] { R141 += 1, R111 += 1 };
  s2 -> s1 [0, 43] { R141 += 1, R111 += 1 };
  s2 -> s2 [0, 65535] { R141 += 1, R110 += 1, R111 += 1 };
  s2 -> s1 [45, 63] { R141 += 1, R111 += 1 };
  s2 -> s3 [89, 89] { R141 += 1, R111 += 1 };
  s2 -> s1 [90, 65535] { R141 += 1, R111 += 1 };
  s3 -> s3 [0, 43] { R141 += 1, R111 += 1 };
  s3 -> s3 [0, 65535] { R141 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R141 += 1, R111 += 1 };
  s3 -> s3 [89, 65535] { R141 += 1, R111 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R143 += 1, R113 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R112 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R113 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R143 += 1 };
  s2 -> s1 [0, 65535] { R143 += 1, R113 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R143 += 1, R112 += 1, R113 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R143 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R145 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R115 += 1, R9 += 1 };
  s0 -> s3 [0, 65535] { R145 += 1, R114 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s4 [58, 58] { R145 += 1, R115 += 1 };
  s0 -> s1 [59, 65535] { R145 += 1, R115 += 1 };
  s1 -> s1 [0, 57] { R145 += 1, R115 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R145 += 1 };
  s1 -> s4 [58, 58] { R145 += 1, R115 += 1 };
  s1 -> s1 [59, 65535] { R145 += 1, R115 += 1 };
  s2 -> s1 [0, 57] { R145 += 1, R115 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R115 += 1, R9 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R145 += 1 };
  s2 -> s4 [58, 58] { R145 += 1, R115 += 1 };
  s2 -> s1 [59, 65535] { R145 += 1, R115 += 1 };
  s3 -> s1 [0, 57] { R145 += 1, R115 += 1 };
  s3 -> s2 [0, 65535] { R145 += 1, R115 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R145 += 1, R114 += 1, R115 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R145 += 1, R115 += 1 };
  s3 -> s1 [59, 65535] { R145 += 1, R115 += 1 };
  s4 -> s4 [0, 65535] { R145 += 1, R115 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R145 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 88] { R147 += 1, R117 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R117 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s3 [0, 65535] { R147 += 1, R116 += 1, R117 += 1 };
  s0 -> s4 [89, 89] { R147 += 1, R117 += 1 };
  s0 -> s1 [90, 65535] { R147 += 1, R117 += 1 };
  s1 -> s1 [0, 88] { R147 += 1, R117 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R147 += 1 };
  s1 -> s4 [89, 89] { R147 += 1, R117 += 1 };
  s1 -> s1 [90, 65535] { R147 += 1, R117 += 1 };
  s2 -> s1 [0, 88] { R147 += 1, R117 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R117 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R147 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [89, 89] { R147 += 1, R117 += 1 };
  s2 -> s1 [90, 65535] { R147 += 1, R117 += 1 };
  s3 -> s1 [0, 88] { R147 += 1, R117 += 1 };
  s3 -> s2 [0, 65535] { R147 += 1, R117 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R147 += 1, R116 += 1, R117 += 1 };
  s3 -> s4 [89, 89] { R147 += 1, R117 += 1 };
  s3 -> s1 [90, 65535] { R147 += 1, R117 += 1 };
  s4 -> s4 [0, 65535] { R147 += 1, R117 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R147 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 90] { R149 += 1, R119 += 1, R91 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R118 += 1, R119 += 1 };
  s0 -> s3 [0, 65535] { R149 += 1, R119 += 1, R90 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s4 [91, 91] { R149 += 1, R119 += 1, R91 += 1 };
  s0 -> s1 [92, 65535] { R149 += 1, R119 += 1, R91 += 1 };
  s1 -> s1 [0, 65535] { R149 += 1, R119 += 1, R91 += 1 };
  s1 -> s5 [0, 65535] { R149 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R149 += 1, R119 += 1 };
  s2 -> s1 [0, 90] { R149 += 1, R119 += 1, R91 += 1 };
  s2 -> s2 [0, 65535] { R149 += 1, R118 += 1, R119 += 1 };
  s2 -> s3 [0, 65535] { R149 += 1, R119 += 1, R90 += 1, R91 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R149 += 1, R119 += 1, R91 += 1 };
  s2 -> s1 [92, 65535] { R149 += 1, R119 += 1, R91 += 1 };
  s3 -> s1 [0, 90] { R149 += 1, R119 += 1, R91 += 1 };
  s3 -> s5 [0, 65535] { R149 += 1 };
  s3 -> s3 [0, 65535] { R149 += 1, R119 += 1, R90 += 1, R91 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R149 += 1, R119 += 1, R91 += 1 };
  s3 -> s1 [92, 65535] { R149 += 1, R119 += 1, R91 += 1 };
  s4 -> s1 [0, 65535] { R149 += 1, R119 += 1, R91 += 1 };
  s5 -> s5 [0, 65535] { R149 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R149 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R149 += 1, R119 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s1 [0, 65535] { R151 += 1, R121 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R121 += 1, R93 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R151 += 1, R120 += 1, R121 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R151 += 1 };
  s1 -> s1 [0, 65535] { R151 += 1, R121 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [0, 65535] { R151 += 1, R121 += 1, R93 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R151 += 1, R121 += 1 };
  s2 -> s6 [0, 65535] { R151 += 1 };
  s2 -> s2 [0, 65535] { R151 += 1, R121 += 1, R93 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R151 += 1, R121 += 1, R92 += 1, R93 += 1 };
  s3 -> s2 [0, 65535] { R151 += 1, R121 += 1, R93 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R151 += 1, R120 += 1, R121 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R151 += 1, R121 += 1 };
  s5 -> s6 [0, 65535] { R151 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R151 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 88] { R153 += 1, R123 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s2 [0, 65535] { R153 += 1, R123 += 1, R100 += 1, R101 += 1 };
  s0 -> s3 [0, 65535] { R153 += 1, R122 += 1, R123 += 1 };
  s0 -> s4 [89, 89] { R153 += 1, R123 += 1, R101 += 1 };
  s0 -> s1 [90, 65535] { R153 += 1, R123 += 1, R101 += 1 };
  s1 -> s1 [0, 88] { R153 += 1, R123 += 1, R101 += 1 };
  s1 -> s4 [89, 89] { R153 += 1, R123 += 1, R101 += 1 };
  s1 -> s1 [90, 65535] { R153 += 1, R123 += 1, R101 += 1 };
  s2 -> s1 [0, 88] { R153 += 1, R123 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R153 += 1, R123 += 1, R100 += 1, R101 += 1 };
  s2 -> s4 [89, 89] { R153 += 1, R123 += 1, R101 += 1 };
  s2 -> s1 [90, 65535] { R153 += 1, R123 += 1, R101 += 1 };
  s3 -> s1 [0, 88] { R153 += 1, R123 += 1, R101 += 1 };
  s3 -> s2 [0, 65535] { R153 += 1, R123 += 1, R100 += 1, R101 += 1 };
  s3 -> s3 [0, 65535] { R153 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [89, 89] { R153 += 1, R123 += 1, R101 += 1 };
  s3 -> s1 [90, 65535] { R153 += 1, R123 += 1, R101 += 1 };
  s4 -> s5 [0, 65535] { R153 += 1, R123 += 1 };
  s4 -> s6 [0, 65535] { R153 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R153 += 1, R123 += 1, R101 += 1 };
  s5 -> s5 [0, 65535] { R153 += 1, R123 += 1 };
  s5 -> s6 [0, 65535] { R153 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R153 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R155 += 1, R124 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R125 += 1, R103 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R155 += 1, R125 += 1, R102 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R155 += 1, R124 += 1, R125 += 1 };
  s1 -> s2 [0, 65535] { R155 += 1, R125 += 1, R103 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R155 += 1, R125 += 1, R102 += 1, R103 += 1 };
  s2 -> s4 [0, 65535] { R155 += 1 };
  s2 -> s6 [0, 65535] { R155 += 1, R125 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R155 += 1, R125 += 1, R103 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R155 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R155 += 1, R125 += 1, R103 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R155 += 1, R125 += 1, R102 += 1, R103 += 1 };
  s4 -> s4 [0, 65535] { R155 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R155 += 1 };
  s6 -> s6 [0, 65535] { R155 += 1, R125 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 88] { R157 += 1, R127 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R157 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s3 [0, 65535] { R157 += 1, R127 += 1, R105 += 1, R6 += 1 };
  s0 -> s4 [0, 65535] { R157 += 1, R127 += 1, R104 += 1, R105 += 1 };
  s0 -> s5 [89, 89] { R157 += 1, R127 += 1, R105 += 1 };
  s0 -> s1 [90, 65535] { R157 += 1, R127 += 1, R105 += 1 };
  s1 -> s1 [0, 88] { R157 += 1, R127 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R157 += 1, R127 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R157 += 1 };
  s1 -> s5 [89, 89] { R157 += 1, R127 += 1, R105 += 1 };
  s1 -> s1 [90, 65535] { R157 += 1, R127 += 1, R105 += 1 };
  s2 -> s1 [0, 88] { R157 += 1, R127 += 1, R105 += 1 };
  s2 -> s2 [0, 65535] { R157 += 1, R126 += 1, R127 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R157 += 1, R127 += 1, R105 += 1, R6 += 1 };
  s2 -> s4 [0, 65535] { R157 += 1, R127 += 1, R104 += 1, R105 += 1 };
  s2 -> s5 [89, 89] { R157 += 1, R127 += 1, R105 += 1 };
  s2 -> s1 [90, 65535] { R157 += 1, R127 += 1, R105 += 1 };
  s3 -> s1 [0, 88] { R157 += 1, R127 += 1, R105 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R157 += 1, R127 += 1 };
  s3 -> s3 [0, 65535] { R157 += 1, R127 += 1, R105 += 1, R6 += 1 };
  s3 -> s7 [0, 65535] { R157 += 1 };
  s3 -> s5 [89, 89] { R157 += 1, R127 += 1, R105 += 1 };
  s3 -> s1 [90, 65535] { R157 += 1, R127 += 1, R105 += 1 };
  s4 -> s1 [0, 88] { R157 += 1, R127 += 1, R105 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R157 += 1, R127 += 1, R105 += 1, R6 += 1 };
  s4 -> s7 [0, 65535] { R157 += 1 };
  s4 -> s4 [0, 65535] { R157 += 1, R127 += 1, R104 += 1, R105 += 1 };
  s4 -> s5 [89, 89] { R157 += 1, R127 += 1, R105 += 1 };
  s4 -> s1 [90, 65535] { R157 += 1, R127 += 1, R105 += 1 };
  s5 -> s5 [0, 65535] { R157 += 1, R127 += 1, R105 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R157 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R157 += 1, R127 += 1 };
  s8 -> s7 [0, 65535] { R157 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 88] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R159 += 1, R129 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s0 -> s3 [0, 65535] { R159 += 1, R128 += 1, R129 += 1 };
  s0 -> s4 [0, 65535] { R159 += 1, R129 += 1, R107 += 1, R94 += 1, R95 += 1 };
  s0 -> s5 [89, 89] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s0 -> s1 [90, 65535] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s1 -> s1 [0, 88] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s1 -> s5 [89, 89] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s1 -> s1 [90, 65535] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s2 -> s1 [0, 88] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R159 += 1, R129 += 1, R106 += 1, R107 += 1 };
  s2 -> s4 [0, 65535] { R159 += 1, R129 += 1, R107 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [89, 89] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s2 -> s1 [90, 65535] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s3 -> s1 [0, 88] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s3 -> s2 [0, 65535] { R159 += 1, R129 += 1, R106 += 1, R107 += 1 };
  s3 -> s3 [0, 65535] { R159 += 1, R128 += 1, R129 += 1 };
  s3 -> s4 [0, 65535] { R159 += 1, R129 += 1, R107 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [89, 89] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s3 -> s1 [90, 65535] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s4 -> s1 [0, 88] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s4 -> s4 [0, 65535] { R159 += 1, R129 += 1, R107 += 1, R94 += 1, R95 += 1 };
  s4 -> s5 [89, 89] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s4 -> s1 [90, 65535] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s5 -> s6 [0, 65535] { R159 += 1 };
  s5 -> s7 [0, 65535] { R159 += 1, R129 += 1 };
  s5 -> s8 [0, 65535] { R159 += 1, R129 += 1, R107 += 1 };
  s5 -> s5 [0, 65535] { R159 += 1, R129 += 1, R107 += 1, R95 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R159 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R159 += 1 };
  s7 -> s7 [0, 65535] { R159 += 1, R129 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s6 [0, 65535] { R159 += 1 };
  s8 -> s7 [0, 65535] { R159 += 1, R129 += 1 };
  s8 -> s8 [0, 65535] { R159 += 1, R129 += 1, R107 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R161 += 1, R131 += 1, R108 += 1, R109 += 1 };
  s0 -> s2 [0, 65535] { R161 += 1, R131 += 1, R109 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s3 [0, 65535] { R161 += 1, R130 += 1, R131 += 1 };
  s0 -> s4 [0, 65535] { R161 += 1, R131 += 1, R109 += 1, R97 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R161 += 1, R131 += 1, R108 += 1, R109 += 1 };
  s1 -> s2 [0, 65535] { R161 += 1, R131 += 1, R109 += 1, R96 += 1, R97 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R161 += 1 };
  s1 -> s4 [0, 65535] { R161 += 1, R131 += 1, R109 += 1, R97 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R161 += 1, R131 += 1, R109 += 1, R96 += 1, R97 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R161 += 1, R131 += 1 };
  s2 -> s8 [0, 65535] { R161 += 1 };
  s2 -> s4 [0, 65535] { R161 += 1, R131 += 1, R109 += 1, R97 += 1, R89 += 1 };
  s3 -> s1 [0, 65535] { R161 += 1, R131 += 1, R108 += 1, R109 += 1 };
  s3 -> s2 [0, 65535] { R161 += 1, R131 += 1, R109 += 1, R96 += 1, R97 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R161 += 1, R130 += 1, R131 += 1 };
  s3 -> s4 [0, 65535] { R161 += 1, R131 += 1, R109 += 1, R97 += 1, R89 += 1 };
  s4 -> s5 [0, 65535] { R161 += 1, R131 += 1, R109 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R161 += 1, R131 += 1 };
  s4 -> s8 [0, 65535] { R161 += 1 };
  s4 -> s4 [0, 65535] { R161 += 1, R131 += 1, R109 += 1, R97 += 1, R89 += 1 };
  s5 -> s5 [0, 65535] { R161 += 1, R131 += 1, R109 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R161 += 1, R131 += 1 };
  s5 -> s8 [0, 65535] { R161 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R161 += 1, R131 += 1 };
  s7 -> s8 [0, 65535] { R161 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R161 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 = R95 && R2 = R109 && R3 = R99 && R4 = R161 && R14 = 0 && R15 = R131 && R90 = 0 && R91 = 1 && R92 = 0 && R93 = 1 && R94 = 0 && R98 - R131 = 1 && R100 = 0 && R101 = R109 && R102 = 0 && R103 = R109 && R104 = 0 && R105 = R109 && R106 = 0 && R107 = R109 && R108 = 0 && R110 = 0 && R111 = R131 && R112 = 0 && R113 = R131 && R114 = 0 && R115 = R131 && R116 = 0 && R117 = R131 && R118 = 0 && R119 = R131 && R120 = 0 && R121 = R131 && R122 = 0 && R123 = R131 && R124 = 0 && R125 = R131 && R126 = 0 && R127 = R131 && R128 = 0 && R129 = R131 && R130 = 0 && R132 = 10 && R133 = R161 && R134 = 10 && R135 = R161 && R136 = 10 && R137 = R161 && R138 = 10 && R139 = R161 && R140 = 10 && R141 = R161 && R142 = 10 && R143 = R161 && R144 = 10 && R145 = R161 && R146 = 10 && R147 = R161 && R148 = 10 && R149 = R161 && R150 = 10 && R151 = R161 && R152 = 10 && R153 = R161 && R154 = 10 && R155 = R161 && R156 = 10 && R157 = R161 && R158 = 10 && R159 = R161 && R160 = 10 && R0 != 0 && R6 < 1 && R9 < 1 && R10 < 1 && -1 < R95 && R131 < R99 && 0 < R109 && -1 < R131 && 9 < R161 && (R96 != 0 || R95 = R97 || (R89 = 0 && R95 = 0)) && (R96 = 0 || (R89 = 0 && R95 = 0));
// End of Parikh automata intersection problem
