// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R12, R13, R3, R4, R5, R6, R7, R8, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1035 += 1 };
  s0 -> s0 [0, 65535] { R1034 += 1, R1035 += 1 };
  s0 -> s2 [46, 46] { R1035 += 1 };
  s0 -> s3 [47, 47] { R1035 += 1 };
  s0 -> s1 [48, 65535] { R1035 += 1 };
  s1 -> s1 [0, 45] { R1035 += 1 };
  s1 -> s2 [46, 46] { R1035 += 1 };
  s1 -> s3 [47, 47] { R1035 += 1 };
  s1 -> s1 [48, 65535] { R1035 += 1 };
  s2 -> s1 [0, 45] { R1035 += 1 };
  s2 -> s2 [46, 46] { R1035 += 1 };
  s2 -> s3 [47, 47] { R1035 += 1 };
  s2 -> s1 [48, 114] { R1035 += 1 };
  s2 -> s8 [115, 115] { R1035 += 1 };
  s2 -> s1 [116, 65535] { R1035 += 1 };
  s3 -> s3 [0, 45] { R1035 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1035 += 1 };
  s3 -> s3 [47, 65535] { R1035 += 1 };
  s4 -> s3 [0, 45] { R1035 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1035 += 1 };
  s4 -> s3 [47, 114] { R1035 += 1 };
  s4 -> s5 [115, 115] { R1035 += 1 };
  s4 -> s3 [116, 65535] { R1035 += 1 };
  s5 -> s3 [0, 45] { R1035 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1035 += 1 };
  s5 -> s3 [47, 110] { R1035 += 1 };
  s5 -> s6 [111, 111] { R1035 += 1 };
  s5 -> s3 [112, 65535] { R1035 += 1 };
  s6 -> s3 [0, 45] { R1035 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1035 += 1 };
  s6 -> s3 [47, 98] { R1035 += 1 };
  s6 -> s7 [99, 99] { R1035 += 1 };
  s6 -> s3 [100, 65535] { R1035 += 1 };
  s7 -> s3 [0, 45] { R1035 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1035 += 1 };
  s7 -> s3 [47, 106] { R1035 += 1 };
  s7 -> s3 [108, 65535] { R1035 += 1 };
  s8 -> s1 [0, 45] { R1035 += 1 };
  s8 -> s2 [46, 46] { R1035 += 1 };
  s8 -> s3 [47, 47] { R1035 += 1 };
  s8 -> s1 [48, 110] { R1035 += 1 };
  s8 -> s9 [111, 111] { R1035 += 1 };
  s8 -> s1 [112, 65535] { R1035 += 1 };
  s9 -> s1 [0, 45] { R1035 += 1 };
  s9 -> s2 [46, 46] { R1035 += 1 };
  s9 -> s3 [47, 47] { R1035 += 1 };
  s9 -> s1 [48, 98] { R1035 += 1 };
  s9 -> s10 [99, 99] { R1035 += 1 };
  s9 -> s1 [100, 65535] { R1035 += 1 };
  s10 -> s1 [0, 45] { R1035 += 1 };
  s10 -> s2 [46, 46] { R1035 += 1 };
  s10 -> s3 [47, 47] { R1035 += 1 };
  s10 -> s1 [48, 106] { R1035 += 1 };
  s10 -> s1 [108, 65535] { R1035 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1036 += 1, R1037 += 1 };
  s0 -> s1 [0, 65535] { R1037 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1037 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1039 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R1038 += 1, R1039 += 1 };
  s0 -> s2 [0, 65535] { R1039 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [47, 47] { R1039 += 1 };
  s0 -> s1 [48, 65535] { R1039 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R1039 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R1039 += 1 };
  s1 -> s1 [48, 65535] { R1039 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R1039 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R1039 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R1039 += 1 };
  s2 -> s1 [48, 65535] { R1039 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R1039 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R1041 += 1, R988 += 1, R989 += 1 };
  s0 -> s0 [0, 65535] { R1040 += 1, R1041 += 1 };
  s0 -> s2 [0, 65535] { R1041 += 1, R989 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R1041 += 1, R988 += 1, R989 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1041 += 1, R989 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R1041 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1041 += 1, R989 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1041 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R1043 += 1, R1003 += 1 };
  s0 -> s2 [0, 65535] { R1043 += 1, R1002 += 1, R1003 += 1 };
  s0 -> s0 [0, 65535] { R1042 += 1, R1043 += 1 };
  s0 -> s3 [64, 64] { R1043 += 1, R1003 += 1 };
  s0 -> s1 [65, 65535] { R1043 += 1, R1003 += 1 };
  s1 -> s1 [0, 63] { R1043 += 1, R1003 += 1 };
  s1 -> s3 [64, 64] { R1043 += 1, R1003 += 1 };
  s1 -> s1 [65, 65535] { R1043 += 1, R1003 += 1 };
  s2 -> s1 [0, 63] { R1043 += 1, R1003 += 1 };
  s2 -> s2 [0, 65535] { R1043 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s3 [64, 64] { R1043 += 1, R1003 += 1 };
  s2 -> s1 [65, 65535] { R1043 += 1, R1003 += 1 };
  s3 -> s4 [0, 65535] { R1043 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1043 += 1, R1003 += 1 };
  s4 -> s4 [0, 65535] { R1043 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R1044 += 1, R1045 += 1 };
  s0 -> s1 [0, 65535] { R1045 += 1, R1005 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R1045 += 1, R1004 += 1, R1005 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1045 += 1 };
  s1 -> s1 [0, 65535] { R1045 += 1, R1005 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1045 += 1, R1005 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R1045 += 1, R1004 += 1, R1005 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1045 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 89] { R1047 += 1, R1007 += 1 };
  s0 -> s0 [0, 65535] { R1046 += 1, R1047 += 1 };
  s0 -> s2 [0, 65535] { R1047 += 1, R1007 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R1047 += 1, R1006 += 1, R1007 += 1 };
  s0 -> s4 [90, 90] { R1047 += 1, R1007 += 1 };
  s0 -> s1 [91, 65535] { R1047 += 1, R1007 += 1 };
  s1 -> s1 [0, 89] { R1047 += 1, R1007 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1047 += 1 };
  s1 -> s4 [90, 90] { R1047 += 1, R1007 += 1 };
  s1 -> s1 [91, 65535] { R1047 += 1, R1007 += 1 };
  s2 -> s1 [0, 89] { R1047 += 1, R1007 += 1 };
  s2 -> s6 [0, 65535] { R1047 += 1 };
  s2 -> s2 [0, 65535] { R1047 += 1, R1007 += 1, R8 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [90, 90] { R1047 += 1, R1007 += 1 };
  s2 -> s1 [91, 65535] { R1047 += 1, R1007 += 1 };
  s3 -> s1 [0, 89] { R1047 += 1, R1007 += 1 };
  s3 -> s2 [0, 65535] { R1047 += 1, R1007 += 1, R8 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1047 += 1, R1006 += 1, R1007 += 1 };
  s3 -> s4 [90, 90] { R1047 += 1, R1007 += 1 };
  s3 -> s1 [91, 65535] { R1047 += 1, R1007 += 1 };
  s4 -> s4 [0, 65535] { R1047 += 1, R1007 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1047 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1049 += 1, R1008 += 1, R1009 += 1 };
  s0 -> s0 [0, 65535] { R1048 += 1, R1049 += 1 };
  s0 -> s2 [0, 65535] { R1049 += 1, R1009 += 1 };
  s1 -> s1 [0, 65535] { R1049 += 1, R1008 += 1, R1009 += 1 };
  s1 -> s2 [0, 65535] { R1049 += 1, R1009 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1049 += 1, R1009 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1049 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1049 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R1051 += 1, R1011 += 1, R977 += 1 };
  s0 -> s2 [0, 65535] { R1051 += 1, R1010 += 1, R1011 += 1 };
  s0 -> s0 [0, 65535] { R1050 += 1, R1051 += 1 };
  s0 -> s3 [0, 65535] { R1051 += 1, R1011 += 1, R976 += 1, R977 += 1 };
  s0 -> s4 [108, 108] { R1051 += 1, R1011 += 1, R977 += 1 };
  s0 -> s1 [109, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s1 -> s5 [0, 65535] { R1051 += 1 };
  s1 -> s1 [0, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s15 [0, 65535] { R1051 += 1, R1011 += 1 };
  s2 -> s1 [0, 107] { R1051 += 1, R1011 += 1, R977 += 1 };
  s2 -> s2 [0, 65535] { R1051 += 1, R1010 += 1, R1011 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R1051 += 1, R1011 += 1, R976 += 1, R977 += 1 };
  s2 -> s4 [108, 108] { R1051 += 1, R1011 += 1, R977 += 1 };
  s2 -> s1 [109, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s3 -> s1 [0, 107] { R1051 += 1, R1011 += 1, R977 += 1 };
  s3 -> s5 [0, 65535] { R1051 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1051 += 1, R1011 += 1, R976 += 1, R977 += 1 };
  s3 -> s4 [108, 108] { R1051 += 1, R1011 += 1, R977 += 1 };
  s3 -> s1 [109, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s4 -> s1 [0, 110] { R1051 += 1, R1011 += 1, R977 += 1 };
  s4 -> s5 [0, 65535] { R1051 += 1 };
  s4 -> s4 [0, 65535] { R1051 += 1, R1011 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [111, 111] { R1051 += 1, R1011 += 1, R977 += 1 };
  s4 -> s1 [112, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s5 -> s5 [0, 65535] { R1051 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R1051 += 1, R1011 += 1, R977 += 1 };
  s7 -> s5 [0, 65535] { R1051 += 1 };
  s7 -> s7 [0, 65535] { R1051 += 1, R1011 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [99, 99] { R1051 += 1, R1011 += 1, R977 += 1 };
  s7 -> s1 [100, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s8 -> s1 [0, 96] { R1051 += 1, R1011 += 1, R977 += 1 };
  s8 -> s5 [0, 65535] { R1051 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1051 += 1, R1011 += 1 };
  s8 -> s9 [97, 97] { R1051 += 1, R1011 += 1, R977 += 1 };
  s8 -> s1 [98, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s9 -> s1 [0, 107] { R1051 += 1, R1011 += 1, R977 += 1 };
  s9 -> s5 [0, 65535] { R1051 += 1 };
  s9 -> s9 [0, 65535] { R1051 += 1, R1011 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s10 [108, 108] { R1051 += 1, R1011 += 1, R977 += 1 };
  s9 -> s1 [109, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s10 -> s1 [0, 103] { R1051 += 1, R1011 += 1, R977 += 1 };
  s10 -> s5 [0, 65535] { R1051 += 1 };
  s10 -> s10 [0, 65535] { R1051 += 1, R1011 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s11 [104, 104] { R1051 += 1, R1011 += 1, R977 += 1 };
  s10 -> s1 [105, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s11 -> s1 [0, 110] { R1051 += 1, R1011 += 1, R977 += 1 };
  s11 -> s5 [0, 65535] { R1051 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R1051 += 1, R1011 += 1 };
  s11 -> s12 [111, 111] { R1051 += 1, R1011 += 1, R977 += 1 };
  s11 -> s1 [112, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s12 -> s1 [0, 114] { R1051 += 1, R1011 += 1, R977 += 1 };
  s12 -> s5 [0, 65535] { R1051 += 1 };
  s12 -> s12 [0, 65535] { R1051 += 1, R1011 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s13 [115, 115] { R1051 += 1, R1011 += 1, R977 += 1 };
  s12 -> s1 [116, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s13 -> s1 [0, 115] { R1051 += 1, R1011 += 1, R977 += 1 };
  s13 -> s5 [0, 65535] { R1051 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R1051 += 1, R1011 += 1 };
  s13 -> s14 [116, 116] { R1051 += 1, R1011 += 1, R977 += 1 };
  s13 -> s1 [117, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s14 -> s1 [0, 65535] { R1051 += 1, R1011 += 1, R977 += 1 };
  s15 -> s5 [0, 65535] { R1051 += 1 };
  s15 -> s6 [0, 65535];
  s15 -> s15 [0, 65535] { R1051 += 1, R1011 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1053 += 1, R1012 += 1, R1013 += 1 };
  s0 -> s2 [0, 65535] { R1053 += 1, R1013 += 1, R978 += 1, R979 += 1 };
  s0 -> s3 [0, 65535] { R1053 += 1, R1013 += 1, R979 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1052 += 1, R1053 += 1 };
  s1 -> s1 [0, 65535] { R1053 += 1, R1012 += 1, R1013 += 1 };
  s1 -> s2 [0, 65535] { R1053 += 1, R1013 += 1, R978 += 1, R979 += 1 };
  s1 -> s3 [0, 65535] { R1053 += 1, R1013 += 1, R979 += 1, R1 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R1053 += 1 };
  s2 -> s2 [0, 65535] { R1053 += 1, R1013 += 1, R978 += 1, R979 += 1 };
  s2 -> s3 [0, 65535] { R1053 += 1, R1013 += 1, R979 += 1, R1 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1053 += 1 };
  s3 -> s3 [0, 65535] { R1053 += 1, R1013 += 1, R979 += 1, R1 += 1 };
  s3 -> s5 [0, 65535] { R1053 += 1, R1013 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1053 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1053 += 1 };
  s5 -> s5 [0, 65535] { R1053 += 1, R1013 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 42] { R1055 += 1, R1015 += 1, R981 += 1 };
  s0 -> s2 [0, 65535] { R1055 += 1, R1014 += 1, R1015 += 1 };
  s0 -> s3 [0, 65535] { R1055 += 1, R1015 += 1, R980 += 1, R981 += 1 };
  s0 -> s0 [0, 65535] { R1054 += 1, R1055 += 1 };
  s0 -> s4 [43, 43] { R1055 += 1, R1015 += 1, R981 += 1 };
  s0 -> s1 [44, 57] { R1055 += 1, R1015 += 1, R981 += 1 };
  s0 -> s1 [59, 63] { R1055 += 1, R1015 += 1, R981 += 1 };
  s0 -> s1 [65, 65535] { R1055 += 1, R1015 += 1, R981 += 1 };
  s1 -> s1 [0, 42] { R1055 += 1, R1015 += 1, R981 += 1 };
  s1 -> s4 [43, 43] { R1055 += 1, R1015 += 1, R981 += 1 };
  s1 -> s1 [44, 57] { R1055 += 1, R1015 += 1, R981 += 1 };
  s1 -> s1 [59, 63] { R1055 += 1, R1015 += 1, R981 += 1 };
  s1 -> s1 [65, 65535] { R1055 += 1, R1015 += 1, R981 += 1 };
  s2 -> s1 [0, 42] { R1055 += 1, R1015 += 1, R981 += 1 };
  s2 -> s2 [0, 65535] { R1055 += 1, R1014 += 1, R1015 += 1 };
  s2 -> s3 [0, 65535] { R1055 += 1, R1015 += 1, R980 += 1, R981 += 1 };
  s2 -> s4 [43, 43] { R1055 += 1, R1015 += 1, R981 += 1 };
  s2 -> s1 [44, 57] { R1055 += 1, R1015 += 1, R981 += 1 };
  s2 -> s1 [59, 63] { R1055 += 1, R1015 += 1, R981 += 1 };
  s2 -> s1 [65, 65535] { R1055 += 1, R1015 += 1, R981 += 1 };
  s3 -> s1 [0, 42] { R1055 += 1, R1015 += 1, R981 += 1 };
  s3 -> s3 [0, 65535] { R1055 += 1, R1015 += 1, R980 += 1, R981 += 1 };
  s3 -> s4 [43, 43] { R1055 += 1, R1015 += 1, R981 += 1 };
  s3 -> s1 [44, 57] { R1055 += 1, R1015 += 1, R981 += 1 };
  s3 -> s1 [59, 63] { R1055 += 1, R1015 += 1, R981 += 1 };
  s3 -> s1 [65, 65535] { R1055 += 1, R1015 += 1, R981 += 1 };
  s4 -> s4 [0, 57] { R1055 += 1, R1015 += 1, R981 += 1 };
  s4 -> s5 [0, 65535] { R1055 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1055 += 1, R1015 += 1 };
  s4 -> s4 [59, 63] { R1055 += 1, R1015 += 1, R981 += 1 };
  s4 -> s4 [65, 65535] { R1055 += 1, R1015 += 1, R981 += 1 };
  s5 -> s5 [0, 65535] { R1055 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1057 += 1, R1017 += 1, R983 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R1057 += 1, R1017 += 1, R982 += 1, R983 += 1 };
  s0 -> s3 [0, 65535] { R1057 += 1, R1016 += 1, R1017 += 1 };
  s0 -> s0 [0, 65535] { R1056 += 1, R1057 += 1 };
  s1 -> s1 [0, 65535] { R1057 += 1, R1017 += 1, R983 += 1, R0 += 1 };
  s1 -> s5 [0, 65535] { R1057 += 1 };
  s1 -> s6 [0, 65535] { R1057 += 1, R1017 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1057 += 1, R1017 += 1, R983 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R1057 += 1, R1017 += 1, R982 += 1, R983 += 1 };
  s2 -> s5 [0, 65535] { R1057 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1057 += 1, R1017 += 1, R983 += 1, R0 += 1 };
  s3 -> s2 [0, 65535] { R1057 += 1, R1017 += 1, R982 += 1, R983 += 1 };
  s3 -> s3 [0, 65535] { R1057 += 1, R1016 += 1, R1017 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1057 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1057 += 1 };
  s6 -> s6 [0, 65535] { R1057 += 1, R1017 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 36] { R1059 += 1, R1019 += 1, R985 += 1 };
  s0 -> s2 [0, 65535] { R1059 += 1, R1018 += 1, R1019 += 1 };
  s0 -> s3 [0, 65535] { R1059 += 1, R1019 += 1, R984 += 1, R985 += 1 };
  s0 -> s0 [0, 65535] { R1058 += 1, R1059 += 1 };
  s0 -> s1 [38, 42] { R1059 += 1, R1019 += 1, R985 += 1 };
  s0 -> s1 [44, 57] { R1059 += 1, R1019 += 1, R985 += 1 };
  s0 -> s1 [59, 63] { R1059 += 1, R1019 += 1, R985 += 1 };
  s0 -> s1 [65, 65535] { R1059 += 1, R1019 += 1, R985 += 1 };
  s1 -> s1 [0, 36] { R1059 += 1, R1019 += 1, R985 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1059 += 1, R1019 += 1 };
  s1 -> s5 [0, 65535] { R1059 += 1 };
  s1 -> s1 [38, 42] { R1059 += 1, R1019 += 1, R985 += 1 };
  s1 -> s1 [44, 57] { R1059 += 1, R1019 += 1, R985 += 1 };
  s1 -> s1 [59, 63] { R1059 += 1, R1019 += 1, R985 += 1 };
  s1 -> s1 [65, 65535] { R1059 += 1, R1019 += 1, R985 += 1 };
  s2 -> s1 [0, 36] { R1059 += 1, R1019 += 1, R985 += 1 };
  s2 -> s2 [0, 65535] { R1059 += 1, R1018 += 1, R1019 += 1 };
  s2 -> s3 [0, 65535] { R1059 += 1, R1019 += 1, R984 += 1, R985 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [38, 42] { R1059 += 1, R1019 += 1, R985 += 1 };
  s2 -> s1 [44, 57] { R1059 += 1, R1019 += 1, R985 += 1 };
  s2 -> s1 [59, 63] { R1059 += 1, R1019 += 1, R985 += 1 };
  s2 -> s1 [65, 65535] { R1059 += 1, R1019 += 1, R985 += 1 };
  s3 -> s1 [0, 36] { R1059 += 1, R1019 += 1, R985 += 1 };
  s3 -> s3 [0, 65535] { R1059 += 1, R1019 += 1, R984 += 1, R985 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1059 += 1 };
  s3 -> s1 [38, 42] { R1059 += 1, R1019 += 1, R985 += 1 };
  s3 -> s1 [44, 57] { R1059 += 1, R1019 += 1, R985 += 1 };
  s3 -> s1 [59, 63] { R1059 += 1, R1019 += 1, R985 += 1 };
  s3 -> s1 [65, 65535] { R1059 += 1, R1019 += 1, R985 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1059 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1061 += 1, R1020 += 1, R1021 += 1 };
  s0 -> s0 [0, 65535] { R1060 += 1, R1061 += 1 };
  s0 -> s2 [0, 65535] { R1061 += 1, R1021 += 1, R987 += 1, R3 += 1 };
  s0 -> s3 [0, 65535] { R1061 += 1, R1021 += 1, R986 += 1, R987 += 1 };
  s1 -> s1 [0, 65535] { R1061 += 1, R1020 += 1, R1021 += 1 };
  s1 -> s2 [0, 65535] { R1061 += 1, R1021 += 1, R987 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R1061 += 1, R1021 += 1, R986 += 1, R987 += 1 };
  s2 -> s6 [0, 65535] { R1061 += 1, R1021 += 1 };
  s2 -> s2 [0, 65535] { R1061 += 1, R1021 += 1, R987 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1061 += 1 };
  s3 -> s2 [0, 65535] { R1061 += 1, R1021 += 1, R987 += 1, R3 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1061 += 1, R1021 += 1, R986 += 1, R987 += 1 };
  s3 -> s5 [0, 65535] { R1061 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1061 += 1 };
  s6 -> s6 [0, 65535] { R1061 += 1, R1021 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1061 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1063 += 1, R1023 += 1, R993 += 1, R974 += 1 };
  s0 -> s2 [0, 65535] { R1063 += 1, R1023 += 1, R992 += 1, R993 += 1 };
  s0 -> s3 [0, 65535] { R1063 += 1, R1022 += 1, R1023 += 1 };
  s0 -> s0 [0, 65535] { R1062 += 1, R1063 += 1 };
  s1 -> s5 [0, 65535] { R1063 += 1 };
  s1 -> s1 [0, 65535] { R1063 += 1, R1023 += 1, R993 += 1, R974 += 1 };
  s1 -> s6 [0, 65535] { R1063 += 1, R1023 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1063 += 1 };
  s2 -> s1 [0, 65535] { R1063 += 1, R1023 += 1, R993 += 1, R974 += 1 };
  s2 -> s2 [0, 65535] { R1063 += 1, R1023 += 1, R992 += 1, R993 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1063 += 1, R1023 += 1, R993 += 1, R974 += 1 };
  s3 -> s2 [0, 65535] { R1063 += 1, R1023 += 1, R992 += 1, R993 += 1 };
  s3 -> s3 [0, 65535] { R1063 += 1, R1022 += 1, R1023 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1063 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1063 += 1 };
  s6 -> s6 [0, 65535] { R1063 += 1, R1023 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R1065 += 1, R1025 += 1, R995 += 1 };
  s0 -> s2 [0, 65535] { R1065 += 1, R1025 += 1, R994 += 1, R995 += 1 };
  s0 -> s0 [0, 65535] { R1064 += 1, R1065 += 1 };
  s0 -> s3 [0, 65535] { R1065 += 1, R1024 += 1, R1025 += 1 };
  s0 -> s4 [108, 108] { R1065 += 1, R1025 += 1, R995 += 1 };
  s0 -> s1 [109, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s1 -> s1 [0, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s1 -> s5 [0, 65535] { R1065 += 1 };
  s1 -> s15 [0, 65535] { R1065 += 1, R1025 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 107] { R1065 += 1, R1025 += 1, R995 += 1 };
  s2 -> s2 [0, 65535] { R1065 += 1, R1025 += 1, R994 += 1, R995 += 1 };
  s2 -> s5 [0, 65535] { R1065 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [108, 108] { R1065 += 1, R1025 += 1, R995 += 1 };
  s2 -> s1 [109, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s3 -> s1 [0, 107] { R1065 += 1, R1025 += 1, R995 += 1 };
  s3 -> s2 [0, 65535] { R1065 += 1, R1025 += 1, R994 += 1, R995 += 1 };
  s3 -> s3 [0, 65535] { R1065 += 1, R1024 += 1, R1025 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [108, 108] { R1065 += 1, R1025 += 1, R995 += 1 };
  s3 -> s1 [109, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s4 -> s1 [0, 110] { R1065 += 1, R1025 += 1, R995 += 1 };
  s4 -> s4 [0, 65535] { R1065 += 1, R1025 += 1 };
  s4 -> s5 [0, 65535] { R1065 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [111, 111] { R1065 += 1, R1025 += 1, R995 += 1 };
  s4 -> s1 [112, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s5 -> s5 [0, 65535] { R1065 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R1065 += 1, R1025 += 1, R995 += 1 };
  s7 -> s5 [0, 65535] { R1065 += 1 };
  s7 -> s7 [0, 65535] { R1065 += 1, R1025 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [99, 99] { R1065 += 1, R1025 += 1, R995 += 1 };
  s7 -> s1 [100, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s8 -> s1 [0, 96] { R1065 += 1, R1025 += 1, R995 += 1 };
  s8 -> s8 [0, 65535] { R1065 += 1, R1025 += 1 };
  s8 -> s5 [0, 65535] { R1065 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [97, 97] { R1065 += 1, R1025 += 1, R995 += 1 };
  s8 -> s1 [98, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s9 -> s1 [0, 107] { R1065 += 1, R1025 += 1, R995 += 1 };
  s9 -> s5 [0, 65535] { R1065 += 1 };
  s9 -> s9 [0, 65535] { R1065 += 1, R1025 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s10 [108, 108] { R1065 += 1, R1025 += 1, R995 += 1 };
  s9 -> s1 [109, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s10 -> s1 [0, 103] { R1065 += 1, R1025 += 1, R995 += 1 };
  s10 -> s5 [0, 65535] { R1065 += 1 };
  s10 -> s10 [0, 65535] { R1065 += 1, R1025 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s11 [104, 104] { R1065 += 1, R1025 += 1, R995 += 1 };
  s10 -> s1 [105, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s11 -> s1 [0, 110] { R1065 += 1, R1025 += 1, R995 += 1 };
  s11 -> s5 [0, 65535] { R1065 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R1065 += 1, R1025 += 1 };
  s11 -> s12 [111, 111] { R1065 += 1, R1025 += 1, R995 += 1 };
  s11 -> s1 [112, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s12 -> s1 [0, 114] { R1065 += 1, R1025 += 1, R995 += 1 };
  s12 -> s5 [0, 65535] { R1065 += 1 };
  s12 -> s12 [0, 65535] { R1065 += 1, R1025 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s13 [115, 115] { R1065 += 1, R1025 += 1, R995 += 1 };
  s12 -> s1 [116, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s13 -> s1 [0, 115] { R1065 += 1, R1025 += 1, R995 += 1 };
  s13 -> s5 [0, 65535] { R1065 += 1 };
  s13 -> s13 [0, 65535] { R1065 += 1, R1025 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s14 [116, 116] { R1065 += 1, R1025 += 1, R995 += 1 };
  s13 -> s1 [117, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s14 -> s1 [0, 65535] { R1065 += 1, R1025 += 1, R995 += 1 };
  s15 -> s5 [0, 65535] { R1065 += 1 };
  s15 -> s15 [0, 65535] { R1065 += 1, R1025 += 1 };
  s15 -> s6 [0, 65535];
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1067 += 1, R1027 += 1, R996 += 1, R997 += 1 };
  s0 -> s2 [0, 65535] { R1067 += 1, R1027 += 1, R997 += 1, R991 += 1 };
  s0 -> s3 [0, 65535] { R1067 += 1, R1026 += 1, R1027 += 1 };
  s0 -> s0 [0, 65535] { R1066 += 1, R1067 += 1 };
  s1 -> s1 [0, 65535] { R1067 += 1, R1027 += 1, R996 += 1, R997 += 1 };
  s1 -> s2 [0, 65535] { R1067 += 1, R1027 += 1, R997 += 1, R991 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1067 += 1 };
  s2 -> s2 [0, 65535] { R1067 += 1, R1027 += 1, R997 += 1, R991 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1067 += 1, R1027 += 1 };
  s2 -> s6 [0, 65535] { R1067 += 1 };
  s3 -> s1 [0, 65535] { R1067 += 1, R1027 += 1, R996 += 1, R997 += 1 };
  s3 -> s2 [0, 65535] { R1067 += 1, R1027 += 1, R997 += 1, R991 += 1 };
  s3 -> s3 [0, 65535] { R1067 += 1, R1026 += 1, R1027 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1067 += 1, R1027 += 1 };
  s5 -> s6 [0, 65535] { R1067 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1067 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1069 += 1, R1029 += 1, R998 += 1, R999 += 1 };
  s0 -> s2 [0, 65535] { R1069 += 1, R1029 += 1, R999 += 1, R975 += 1 };
  s0 -> s3 [0, 65535] { R1069 += 1, R1028 += 1, R1029 += 1 };
  s0 -> s0 [0, 65535] { R1068 += 1, R1069 += 1 };
  s1 -> s1 [0, 65535] { R1069 += 1, R1029 += 1, R998 += 1, R999 += 1 };
  s1 -> s2 [0, 65535] { R1069 += 1, R1029 += 1, R999 += 1, R975 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1069 += 1 };
  s2 -> s2 [0, 65535] { R1069 += 1, R1029 += 1, R999 += 1, R975 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1069 += 1 };
  s2 -> s6 [0, 65535] { R1069 += 1, R1029 += 1 };
  s3 -> s1 [0, 65535] { R1069 += 1, R1029 += 1, R998 += 1, R999 += 1 };
  s3 -> s2 [0, 65535] { R1069 += 1, R1029 += 1, R999 += 1, R975 += 1 };
  s3 -> s3 [0, 65535] { R1069 += 1, R1028 += 1, R1029 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1069 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1069 += 1 };
  s6 -> s6 [0, 65535] { R1069 += 1, R1029 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R1070 += 1, R1071 += 1 };
  s0 -> s1 [0, 65535] { R1071 += 1, R1030 += 1, R1031 += 1 };
  s0 -> s2 [0, 65535] { R1071 += 1, R1031 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1071 += 1, R1030 += 1, R1031 += 1 };
  s1 -> s2 [0, 65535] { R1071 += 1, R1031 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1071 += 1 };
  s2 -> s2 [0, 65535] { R1071 += 1, R1031 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1071 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 89] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s0 -> s2 [0, 65535] { R1073 += 1, R1032 += 1, R1033 += 1 };
  s0 -> s3 [0, 65535] { R1073 += 1, R1033 += 1, R1000 += 1, R1001 += 1 };
  s0 -> s0 [0, 65535] { R1072 += 1, R1073 += 1 };
  s0 -> s4 [90, 90] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s0 -> s5 [90, 90] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s0 -> s1 [91, 65535] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s1 -> s1 [0, 89] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s1 -> s6 [0, 65535] { R1073 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R1073 += 1, R1033 += 1 };
  s1 -> s4 [90, 90] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s1 -> s5 [90, 90] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s1 -> s1 [91, 65535] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s2 -> s1 [0, 89] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R1073 += 1, R1032 += 1, R1033 += 1 };
  s2 -> s3 [0, 65535] { R1073 += 1, R1033 += 1, R1000 += 1, R1001 += 1 };
  s2 -> s4 [90, 90] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s2 -> s5 [90, 90] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s2 -> s1 [91, 65535] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s3 -> s1 [0, 89] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s3 -> s6 [0, 65535] { R1073 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R1073 += 1, R1033 += 1, R1000 += 1, R1001 += 1 };
  s3 -> s4 [90, 90] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s3 -> s5 [90, 90] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s3 -> s1 [91, 65535] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s4 -> s6 [0, 65535] { R1073 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R1073 += 1, R1033 += 1, R1001 += 1, R990 += 1 };
  s4 -> s8 [0, 65535] { R1073 += 1, R1033 += 1 };
  s5 -> s6 [0, 65535] { R1073 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1073 += 1, R1033 += 1 };
  s6 -> s6 [0, 65535] { R1073 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1073 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1073 += 1, R1033 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R5 = 16 && R6 = R989 && R7 = R1073 && R12 = 0 && R13 = R1033 && R976 = 11 && R977 = 16 && R978 = 11 && R979 = 16 && R980 = 0 && R981 = 16 && R982 = 0 && R983 = 16 && R984 = 0 && R985 = 15 && R986 = 0 && R987 = 15 && R988 - R1033 = 1 && R992 = 0 && R993 = 16 && R994 = 0 && R995 = 16 && R996 = 0 && R997 = 16 && R1002 = 0 && R1003 = R1033 && R1004 = 0 && R1005 = R1033 && R1006 = 0 && R1007 = R1033 && R1008 = 0 && R1009 = R1033 && R1010 = 0 && R1011 = R1033 && R1012 = 0 && R1013 = R1033 && R1014 = 0 && R1015 = R1033 && R1016 = 0 && R1017 = R1033 && R1018 = 0 && R1019 = R1033 && R1020 = 0 && R1021 = R1033 && R1022 = 0 && R1023 = R1033 && R1024 = 0 && R1025 = R1033 && R1026 = 0 && R1027 = R1033 && R1028 = 0 && R1029 = R1033 && R1030 = 0 && R1031 = R1033 && R1032 = 0 && R1034 = 10 && R1035 = R1073 && R1036 = 10 && R1037 = R1073 && R1038 = 10 && R1039 = R1073 && R1040 = 10 && R1041 = R1073 && R1042 = 10 && R1043 = R1073 && R1044 = 10 && R1045 = R1073 && R1046 = 10 && R1047 = R1073 && R1048 = 10 && R1049 = R1073 && R1050 = 10 && R1051 = R1073 && R1052 = 10 && R1053 = R1073 && R1054 = 10 && R1055 = R1073 && R1056 = 10 && R1057 = R1073 && R1058 = 10 && R1059 = R1073 && R1060 = 10 && R1061 = R1073 && R1062 = 10 && R1063 = R1073 && R1064 = 10 && R1065 = R1073 && R1066 = 10 && R1067 = R1073 && R1068 = 10 && R1069 = R1073 && R1070 = 10 && R1071 = R1073 && R1072 = 10 && R0 != 0 && R1 != 0 && R3 != 0 && R4 != 0 && R991 + R990 != 0 && R8 < 1 && R1033 < R989 && -1 < R1033 && 9 < R1073 && (R975 = 0 || (R998 = 0 && R999 = 0)) && (R975 = 0 || (R1000 = 0 && R1001 = 0));
// End of Parikh automata intersection problem
