// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R2, R2093, R2096, R2099, R2101, R2102, R2361, R2362, R2490, R2491, R2492, R2493, R2494, R2495, R2496, R2497, R2498, R2499, R2500, R2501, R2502, R2503, R2504, R2505, R2506, R2507, R2508, R2509, R2510, R2511, R2512, R2513, R2514, R2515, R2516, R2517, R2518, R2519, R2520, R2521, R2522, R2523, R2524, R2525, R2526, R2527, R2528, R2529, R2530, R2531, R2532, R2533, R2534, R2535, R2536, R2537, R2538, R2539, R2540, R2541, R2542, R2543, R2544, R2545, R2546, R2547, R2548, R2549, R2550, R2551, R2552, R2553, R2554, R2555, R2556, R2557, R2558, R2559, R2560, R2561, R2562, R2563, R2564, R2565, R2566, R2567, R2568, R2569, R2570, R2571, R2572, R2573, R2574, R2575, R2576, R2577, R2578, R2579, R2580, R2581, R2582, R2583, R2584, R2585, R2586, R2587, R2588, R2589, R2590, R2591, R2592, R2593, R2594, R2595, R2596, R2597, R2598, R2599, R2600, R2601, R2602, R2603, R2604, R2605, R2606, R2607, R2608, R2609, R2610, R2611, R2612, R2613, R2614, R2615, R2616, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R2570 += 1 };
  s0 -> s0 [0, 65535] { R2569 += 1, R2570 += 1 };
  s0 -> s2 [46, 46] { R2570 += 1 };
  s0 -> s3 [47, 47] { R2570 += 1 };
  s0 -> s1 [48, 65535] { R2570 += 1 };
  s1 -> s1 [0, 45] { R2570 += 1 };
  s1 -> s2 [46, 46] { R2570 += 1 };
  s1 -> s3 [47, 47] { R2570 += 1 };
  s1 -> s1 [48, 65535] { R2570 += 1 };
  s2 -> s1 [0, 45] { R2570 += 1 };
  s2 -> s2 [46, 46] { R2570 += 1 };
  s2 -> s3 [47, 47] { R2570 += 1 };
  s2 -> s1 [48, 114] { R2570 += 1 };
  s2 -> s8 [115, 115] { R2570 += 1 };
  s2 -> s1 [116, 65535] { R2570 += 1 };
  s3 -> s3 [0, 45] { R2570 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R2570 += 1 };
  s3 -> s3 [47, 65535] { R2570 += 1 };
  s4 -> s3 [0, 45] { R2570 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R2570 += 1 };
  s4 -> s3 [47, 114] { R2570 += 1 };
  s4 -> s5 [115, 115] { R2570 += 1 };
  s4 -> s3 [116, 65535] { R2570 += 1 };
  s5 -> s3 [0, 45] { R2570 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R2570 += 1 };
  s5 -> s3 [47, 110] { R2570 += 1 };
  s5 -> s6 [111, 111] { R2570 += 1 };
  s5 -> s3 [112, 65535] { R2570 += 1 };
  s6 -> s3 [0, 45] { R2570 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R2570 += 1 };
  s6 -> s3 [47, 98] { R2570 += 1 };
  s6 -> s7 [99, 99] { R2570 += 1 };
  s6 -> s3 [100, 65535] { R2570 += 1 };
  s7 -> s3 [0, 45] { R2570 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R2570 += 1 };
  s7 -> s3 [47, 106] { R2570 += 1 };
  s7 -> s3 [108, 65535] { R2570 += 1 };
  s8 -> s1 [0, 45] { R2570 += 1 };
  s8 -> s2 [46, 46] { R2570 += 1 };
  s8 -> s3 [47, 47] { R2570 += 1 };
  s8 -> s1 [48, 110] { R2570 += 1 };
  s8 -> s9 [111, 111] { R2570 += 1 };
  s8 -> s1 [112, 65535] { R2570 += 1 };
  s9 -> s1 [0, 45] { R2570 += 1 };
  s9 -> s2 [46, 46] { R2570 += 1 };
  s9 -> s3 [47, 47] { R2570 += 1 };
  s9 -> s1 [48, 98] { R2570 += 1 };
  s9 -> s10 [99, 99] { R2570 += 1 };
  s9 -> s1 [100, 65535] { R2570 += 1 };
  s10 -> s1 [0, 45] { R2570 += 1 };
  s10 -> s2 [46, 46] { R2570 += 1 };
  s10 -> s3 [47, 47] { R2570 += 1 };
  s10 -> s1 [48, 106] { R2570 += 1 };
  s10 -> s1 [108, 65535] { R2570 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2572 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2571 += 1, R2572 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2572 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R2574 += 1, R2362 += 1 };
  s0 -> s2 [0, 65535] { R2574 += 1, R2361 += 1, R2362 += 1 };
  s0 -> s0 [0, 65535] { R2573 += 1, R2574 += 1 };
  s0 -> s3 [47, 47] { R2574 += 1 };
  s0 -> s1 [48, 65535] { R2574 += 1, R2362 += 1 };
  s1 -> s1 [0, 46] { R2574 += 1, R2362 += 1 };
  s1 -> s3 [47, 47] { R2574 += 1 };
  s1 -> s1 [48, 65535] { R2574 += 1, R2362 += 1 };
  s2 -> s1 [0, 46] { R2574 += 1, R2362 += 1 };
  s2 -> s2 [0, 65535] { R2574 += 1, R2361 += 1, R2362 += 1 };
  s2 -> s3 [47, 47] { R2574 += 1 };
  s2 -> s1 [48, 65535] { R2574 += 1, R2362 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2574 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 62] { R2576 += 1, R2528 += 1 };
  s0 -> s2 [0, 65535] { R2576 += 1, R2527 += 1, R2528 += 1 };
  s0 -> s0 [0, 65535] { R2575 += 1, R2576 += 1 };
  s0 -> s3 [63, 63] { R2576 += 1, R2528 += 1 };
  s0 -> s1 [64, 65535] { R2576 += 1, R2528 += 1 };
  s1 -> s1 [0, 62] { R2576 += 1, R2528 += 1 };
  s1 -> s3 [63, 63] { R2576 += 1, R2528 += 1 };
  s1 -> s1 [64, 65535] { R2576 += 1, R2528 += 1 };
  s2 -> s1 [0, 62] { R2576 += 1, R2528 += 1 };
  s2 -> s2 [0, 65535] { R2576 += 1, R2527 += 1, R2528 += 1 };
  s2 -> s3 [63, 63] { R2576 += 1, R2528 += 1 };
  s2 -> s1 [64, 65535] { R2576 += 1, R2528 += 1 };
  s3 -> s4 [0, 65535] { R2576 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2576 += 1, R2528 += 1 };
  s4 -> s4 [0, 65535] { R2576 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R2577 += 1, R2578 += 1 };
  s0 -> s1 [0, 65535] { R2578 += 1, R2529 += 1, R2530 += 1 };
  s0 -> s2 [0, 65535] { R2578 += 1, R2530 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R2578 += 1, R2529 += 1, R2530 += 1 };
  s1 -> s2 [0, 65535] { R2578 += 1, R2530 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2578 += 1 };
  s2 -> s2 [0, 65535] { R2578 += 1, R2530 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2578 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R2580 += 1, R2532 += 1, R2102 += 1 };
  s0 -> s2 [0, 65535] { R2580 += 1, R2531 += 1, R2532 += 1 };
  s0 -> s3 [0, 65535] { R2580 += 1, R2532 += 1, R2101 += 1, R2102 += 1 };
  s0 -> s0 [0, 65535] { R2579 += 1, R2580 += 1 };
  s0 -> s4 [63, 63] { R2580 += 1, R2532 += 1 };
  s0 -> s1 [64, 65535] { R2580 += 1, R2532 += 1, R2102 += 1 };
  s1 -> s1 [0, 62] { R2580 += 1, R2532 += 1, R2102 += 1 };
  s1 -> s4 [63, 63] { R2580 += 1, R2532 += 1 };
  s1 -> s1 [64, 65535] { R2580 += 1, R2532 += 1, R2102 += 1 };
  s2 -> s1 [0, 62] { R2580 += 1, R2532 += 1, R2102 += 1 };
  s2 -> s2 [0, 65535] { R2580 += 1, R2531 += 1, R2532 += 1 };
  s2 -> s3 [0, 65535] { R2580 += 1, R2532 += 1, R2101 += 1, R2102 += 1 };
  s2 -> s4 [63, 63] { R2580 += 1, R2532 += 1 };
  s2 -> s1 [64, 65535] { R2580 += 1, R2532 += 1, R2102 += 1 };
  s3 -> s1 [0, 62] { R2580 += 1, R2532 += 1, R2102 += 1 };
  s3 -> s3 [0, 65535] { R2580 += 1, R2532 += 1, R2101 += 1, R2102 += 1 };
  s3 -> s4 [63, 63] { R2580 += 1, R2532 += 1 };
  s3 -> s1 [64, 65535] { R2580 += 1, R2532 += 1, R2102 += 1 };
  s4 -> s4 [0, 65535] { R2580 += 1, R2532 += 1 };
  s4 -> s5 [0, 65535] { R2580 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2580 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 62] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s0 -> s0 [0, 65535] { R2581 += 1, R2582 += 1 };
  s0 -> s2 [0, 65535] { R2582 += 1, R2534 += 1, R2495 += 1, R2496 += 1 };
  s0 -> s3 [0, 65535] { R2582 += 1, R2533 += 1, R2534 += 1 };
  s0 -> s4 [63, 63] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s0 -> s1 [64, 65535] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s1 -> s7 [0, 65535] { R2582 += 1, R2534 += 1 };
  s1 -> s6 [0, 65535] { R2582 += 1 };
  s1 -> s1 [0, 65535] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 62] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s2 -> s6 [0, 65535] { R2582 += 1 };
  s2 -> s2 [0, 65535] { R2582 += 1, R2534 += 1, R2495 += 1, R2496 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [63, 63] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s2 -> s1 [64, 65535] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s3 -> s1 [0, 62] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s3 -> s2 [0, 65535] { R2582 += 1, R2534 += 1, R2495 += 1, R2496 += 1 };
  s3 -> s3 [0, 65535] { R2582 += 1, R2533 += 1, R2534 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s3 -> s1 [64, 65535] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s4 -> s1 [0, 65535] { R2582 += 1, R2534 += 1, R2496 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2582 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R2582 += 1, R2534 += 1 };
  s7 -> s6 [0, 65535] { R2582 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2584 += 1, R2535 += 1, R2536 += 1 };
  s0 -> s0 [0, 65535] { R2583 += 1, R2584 += 1 };
  s0 -> s2 [0, 65535] { R2584 += 1, R2536 += 1, R2497 += 1, R2498 += 1 };
  s0 -> s3 [0, 65535] { R2584 += 1, R2536 += 1, R2498 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R2584 += 1, R2535 += 1, R2536 += 1 };
  s1 -> s2 [0, 65535] { R2584 += 1, R2536 += 1, R2497 += 1, R2498 += 1 };
  s1 -> s3 [0, 65535] { R2584 += 1, R2536 += 1, R2498 += 1, R8 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R2584 += 1 };
  s2 -> s2 [0, 65535] { R2584 += 1, R2536 += 1, R2497 += 1, R2498 += 1 };
  s2 -> s3 [0, 65535] { R2584 += 1, R2536 += 1, R2498 += 1, R8 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R2584 += 1 };
  s3 -> s5 [0, 65535] { R2584 += 1, R2536 += 1 };
  s3 -> s3 [0, 65535] { R2584 += 1, R2536 += 1, R2498 += 1, R8 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2584 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R2584 += 1 };
  s5 -> s5 [0, 65535] { R2584 += 1, R2536 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 31] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s0 -> s2 [0, 65535] { R2586 += 1, R2538 += 1, R2499 += 1, R2500 += 1 };
  s0 -> s0 [0, 65535] { R2585 += 1, R2586 += 1 };
  s0 -> s3 [0, 65535] { R2586 += 1, R2537 += 1, R2538 += 1 };
  s0 -> s4 [32, 32] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s0 -> s1 [33, 65535] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s1 -> s1 [0, 31] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s1 -> s4 [32, 32] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s1 -> s1 [33, 65535] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s2 -> s1 [0, 31] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s2 -> s2 [0, 65535] { R2586 += 1, R2538 += 1, R2499 += 1, R2500 += 1 };
  s2 -> s4 [32, 32] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s2 -> s1 [33, 65535] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s3 -> s1 [0, 31] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s3 -> s2 [0, 65535] { R2586 += 1, R2538 += 1, R2499 += 1, R2500 += 1 };
  s3 -> s3 [0, 65535] { R2586 += 1, R2537 += 1, R2538 += 1 };
  s3 -> s4 [32, 32] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s3 -> s1 [33, 65535] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s4 -> s5 [0, 65535] { R2586 += 1 };
  s4 -> s4 [0, 65535] { R2586 += 1, R2538 += 1, R2500 += 1 };
  s4 -> s6 [0, 65535] { R2586 += 1, R2538 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R2586 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R2586 += 1 };
  s6 -> s6 [0, 65535] { R2586 += 1, R2538 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2588 += 1, R2540 += 1, R2501 += 1, R2502 += 1 };
  s0 -> s2 [0, 65535] { R2588 += 1, R2540 += 1, R2502 += 1, R0 += 1 };
  s0 -> s3 [0, 65535] { R2588 += 1, R2539 += 1, R2540 += 1 };
  s0 -> s0 [0, 65535] { R2587 += 1, R2588 += 1 };
  s1 -> s1 [0, 65535] { R2588 += 1, R2540 += 1, R2501 += 1, R2502 += 1 };
  s1 -> s2 [0, 65535] { R2588 += 1, R2540 += 1, R2502 += 1, R0 += 1 };
  s1 -> s6 [0, 65535] { R2588 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2588 += 1, R2540 += 1 };
  s2 -> s2 [0, 65535] { R2588 += 1, R2540 += 1, R2502 += 1, R0 += 1 };
  s2 -> s6 [0, 65535] { R2588 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2588 += 1, R2540 += 1, R2501 += 1, R2502 += 1 };
  s3 -> s2 [0, 65535] { R2588 += 1, R2540 += 1, R2502 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R2588 += 1, R2539 += 1, R2540 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2588 += 1, R2540 += 1 };
  s5 -> s6 [0, 65535] { R2588 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2588 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 60] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R2590 += 1, R2541 += 1, R2542 += 1 };
  s0 -> s3 [0, 65535] { R2590 += 1, R2542 += 1, R2504 += 1, R10 += 1, R11 += 1 };
  s0 -> s4 [0, 65535] { R2590 += 1, R2542 += 1, R2503 += 1, R2504 += 1 };
  s0 -> s0 [0, 65535] { R2589 += 1, R2590 += 1 };
  s0 -> s5 [61, 61] { R2590 += 1, R2542 += 1, R2504 += 1 };
  s0 -> s1 [62, 65535] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s1 -> s1 [0, 60] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s1 -> s5 [61, 61] { R2590 += 1, R2542 += 1, R2504 += 1 };
  s1 -> s1 [62, 65535] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s2 -> s1 [0, 60] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R2590 += 1, R2541 += 1, R2542 += 1 };
  s2 -> s3 [0, 65535] { R2590 += 1, R2542 += 1, R2504 += 1, R10 += 1, R11 += 1 };
  s2 -> s4 [0, 65535] { R2590 += 1, R2542 += 1, R2503 += 1, R2504 += 1 };
  s2 -> s5 [61, 61] { R2590 += 1, R2542 += 1, R2504 += 1 };
  s2 -> s1 [62, 65535] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s3 -> s1 [0, 60] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R2590 += 1, R2542 += 1, R2504 += 1, R10 += 1, R11 += 1 };
  s3 -> s5 [61, 61] { R2590 += 1, R2542 += 1, R2504 += 1 };
  s3 -> s1 [62, 65535] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s4 -> s1 [0, 60] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s4 -> s3 [0, 65535] { R2590 += 1, R2542 += 1, R2504 += 1, R10 += 1, R11 += 1 };
  s4 -> s4 [0, 65535] { R2590 += 1, R2542 += 1, R2503 += 1, R2504 += 1 };
  s4 -> s5 [61, 61] { R2590 += 1, R2542 += 1, R2504 += 1 };
  s4 -> s1 [62, 65535] { R2590 += 1, R2542 += 1, R2504 += 1, R11 += 1 };
  s5 -> s6 [0, 65535] { R2590 += 1, R2542 += 1 };
  s5 -> s7 [0, 65535] { R2590 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R2590 += 1, R2542 += 1, R2504 += 1 };
  s6 -> s6 [0, 65535] { R2590 += 1, R2542 += 1 };
  s6 -> s7 [0, 65535] { R2590 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2590 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 58] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s0 -> s2 [0, 65535] { R2592 += 1, R2544 += 1, R2505 += 1, R2506 += 1 };
  s0 -> s0 [0, 65535] { R2591 += 1, R2592 += 1 };
  s0 -> s3 [0, 65535] { R2592 += 1, R2544 += 1, R2506 += 1, R2093 += 1 };
  s0 -> s4 [0, 65535] { R2592 += 1, R2543 += 1, R2544 += 1 };
  s0 -> s5 [59, 59] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s0 -> s1 [60, 65535] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s1 -> s1 [0, 58] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s1 -> s7 [0, 65535] { R2592 += 1 };
  s1 -> s1 [0, 65535] { R2592 += 1, R2544 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [59, 59] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s1 -> s1 [60, 65535] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s2 -> s1 [0, 58] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s2 -> s7 [0, 65535] { R2592 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2592 += 1, R2544 += 1, R2506 += 1, R2093 += 1 };
  s2 -> s2 [0, 65535] { R2592 += 1, R2544 += 1, R2505 += 1, R2506 += 1 };
  s2 -> s5 [59, 59] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s2 -> s1 [60, 65535] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s3 -> s1 [0, 58] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s3 -> s7 [0, 65535] { R2592 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R2592 += 1, R2544 += 1 };
  s3 -> s3 [0, 65535] { R2592 += 1, R2544 += 1, R2506 += 1, R2093 += 1 };
  s3 -> s5 [59, 59] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s3 -> s1 [60, 65535] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s4 -> s1 [0, 58] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s4 -> s2 [0, 65535] { R2592 += 1, R2544 += 1, R2505 += 1, R2506 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R2592 += 1, R2544 += 1, R2506 += 1, R2093 += 1 };
  s4 -> s4 [0, 65535] { R2592 += 1, R2543 += 1, R2544 += 1 };
  s4 -> s5 [59, 59] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s4 -> s1 [60, 65535] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s5 -> s5 [0, 65535] { R2592 += 1, R2544 += 1, R2506 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2592 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R2592 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2592 += 1, R2544 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 37] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s0 -> s2 [0, 65535] { R2594 += 1, R2545 += 1, R2546 += 1 };
  s0 -> s3 [0, 65535] { R2594 += 1, R2546 += 1, R2507 += 1, R2508 += 1 };
  s0 -> s0 [0, 65535] { R2593 += 1, R2594 += 1 };
  s0 -> s4 [0, 65535] { R2594 += 1, R2546 += 1, R2508 += 1, R2096 += 1 };
  s0 -> s5 [38, 38] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s0 -> s1 [39, 65535] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s1 -> s1 [0, 37] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R2594 += 1 };
  s1 -> s1 [0, 65535] { R2594 += 1, R2546 += 1 };
  s1 -> s5 [38, 38] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s1 -> s1 [39, 65535] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s2 -> s1 [0, 37] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s2 -> s2 [0, 65535] { R2594 += 1, R2545 += 1, R2546 += 1 };
  s2 -> s3 [0, 65535] { R2594 += 1, R2546 += 1, R2507 += 1, R2508 += 1 };
  s2 -> s4 [0, 65535] { R2594 += 1, R2546 += 1, R2508 += 1, R2096 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [38, 38] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s2 -> s1 [39, 65535] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s3 -> s1 [0, 37] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s3 -> s3 [0, 65535] { R2594 += 1, R2546 += 1, R2507 += 1, R2508 += 1 };
  s3 -> s4 [0, 65535] { R2594 += 1, R2546 += 1, R2508 += 1, R2096 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R2594 += 1 };
  s3 -> s5 [38, 38] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s3 -> s1 [39, 65535] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s4 -> s1 [0, 37] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s4 -> s4 [0, 65535] { R2594 += 1, R2546 += 1, R2508 += 1, R2096 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R2594 += 1 };
  s4 -> s8 [0, 65535] { R2594 += 1, R2546 += 1 };
  s4 -> s5 [38, 38] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s4 -> s1 [39, 65535] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s5 -> s5 [0, 65535] { R2594 += 1, R2546 += 1, R2508 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2594 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R2594 += 1 };
  s8 -> s8 [0, 65535] { R2594 += 1, R2546 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 45] { R2596 += 1, R2548 += 1, R2510 += 1 };
  s0 -> s0 [0, 65535] { R2595 += 1, R2596 += 1 };
  s0 -> s2 [0, 65535] { R2596 += 1, R2548 += 1, R2509 += 1, R2510 += 1 };
  s0 -> s3 [0, 65535] { R2596 += 1, R2547 += 1, R2548 += 1 };
  s0 -> s1 [47, 65535] { R2596 += 1, R2548 += 1, R2510 += 1 };
  s1 -> s1 [0, 45] { R2596 += 1, R2548 += 1, R2510 += 1 };
  s1 -> s1 [0, 65535] { R2596 += 1, R2548 += 1 };
  s1 -> s5 [0, 65535] { R2596 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [47, 65535] { R2596 += 1, R2548 += 1, R2510 += 1 };
  s2 -> s1 [0, 45] { R2596 += 1, R2548 += 1, R2510 += 1 };
  s2 -> s5 [0, 65535] { R2596 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2596 += 1, R2548 += 1, R2509 += 1, R2510 += 1 };
  s2 -> s1 [47, 65535] { R2596 += 1, R2548 += 1, R2510 += 1 };
  s3 -> s1 [0, 45] { R2596 += 1, R2548 += 1, R2510 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2596 += 1, R2548 += 1, R2509 += 1, R2510 += 1 };
  s3 -> s3 [0, 65535] { R2596 += 1, R2547 += 1, R2548 += 1 };
  s3 -> s1 [47, 65535] { R2596 += 1, R2548 += 1, R2510 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2596 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2597 += 1, R2598 += 1 };
  s0 -> s1 [0, 65535] { R2598 += 1, R2550 += 1, R2511 += 1, R2512 += 1 };
  s0 -> s2 [0, 65535] { R2598 += 1, R2549 += 1, R2550 += 1 };
  s0 -> s3 [0, 65535] { R2598 += 1, R2550 += 1, R2512 += 1, R2490 += 1 };
  s1 -> s1 [0, 65535] { R2598 += 1, R2550 += 1, R2511 += 1, R2512 += 1 };
  s1 -> s4 [0, 65535] { R2598 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R2598 += 1, R2550 += 1, R2512 += 1, R2490 += 1 };
  s2 -> s1 [0, 65535] { R2598 += 1, R2550 += 1, R2511 += 1, R2512 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2598 += 1, R2549 += 1, R2550 += 1 };
  s2 -> s3 [0, 65535] { R2598 += 1, R2550 += 1, R2512 += 1, R2490 += 1 };
  s3 -> s4 [0, 65535] { R2598 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2598 += 1, R2550 += 1 };
  s3 -> s3 [0, 65535] { R2598 += 1, R2550 += 1, R2512 += 1, R2490 += 1 };
  s4 -> s4 [0, 65535] { R2598 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2598 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2598 += 1, R2550 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 63] { R2600 += 1, R2552 += 1 };
  s0 -> s0 [0, 65535] { R2599 += 1, R2600 += 1 };
  s0 -> s2 [0, 65535] { R2600 += 1, R2551 += 1, R2552 += 1 };
  s0 -> s3 [64, 64] { R2600 += 1, R2552 += 1 };
  s0 -> s1 [65, 65535] { R2600 += 1, R2552 += 1 };
  s1 -> s1 [0, 63] { R2600 += 1, R2552 += 1 };
  s1 -> s3 [64, 64] { R2600 += 1, R2552 += 1 };
  s1 -> s1 [65, 65535] { R2600 += 1, R2552 += 1 };
  s2 -> s1 [0, 63] { R2600 += 1, R2552 += 1 };
  s2 -> s2 [0, 65535] { R2600 += 1, R2551 += 1, R2552 += 1 };
  s2 -> s3 [64, 64] { R2600 += 1, R2552 += 1 };
  s2 -> s1 [65, 65535] { R2600 += 1, R2552 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2600 += 1 };
  s3 -> s3 [0, 65535] { R2600 += 1, R2552 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2600 += 1 };
  accepting s3, s4, s5;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2602 += 1, R2553 += 1, R2554 += 1 };
  s0 -> s2 [0, 65535] { R2602 += 1, R2554 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R2601 += 1, R2602 += 1 };
  s1 -> s1 [0, 65535] { R2602 += 1, R2553 += 1, R2554 += 1 };
  s1 -> s2 [0, 65535] { R2602 += 1, R2554 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2602 += 1, R2554 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R2602 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2602 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 36] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s0 -> s2 [0, 65535] { R2604 += 1, R2555 += 1, R2556 += 1 };
  s0 -> s3 [0, 65535] { R2604 += 1, R2556 += 1, R2513 += 1, R2514 += 1 };
  s0 -> s0 [0, 65535] { R2603 += 1, R2604 += 1 };
  s0 -> s1 [38, 42] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s0 -> s1 [44, 57] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s0 -> s1 [59, 63] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s0 -> s1 [65, 65535] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s1 -> s1 [0, 36] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2604 += 1, R2556 += 1 };
  s1 -> s5 [0, 65535] { R2604 += 1 };
  s1 -> s1 [38, 42] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s1 -> s1 [44, 57] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s1 -> s1 [59, 63] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s1 -> s1 [65, 65535] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s2 -> s1 [0, 36] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2604 += 1, R2555 += 1, R2556 += 1 };
  s2 -> s3 [0, 65535] { R2604 += 1, R2556 += 1, R2513 += 1, R2514 += 1 };
  s2 -> s1 [38, 42] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s2 -> s1 [44, 57] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s2 -> s1 [59, 63] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s2 -> s1 [65, 65535] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s3 -> s1 [0, 36] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2604 += 1 };
  s3 -> s3 [0, 65535] { R2604 += 1, R2556 += 1, R2513 += 1, R2514 += 1 };
  s3 -> s1 [38, 42] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s3 -> s1 [44, 57] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s3 -> s1 [59, 63] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s3 -> s1 [65, 65535] { R2604 += 1, R2556 += 1, R2514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2604 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R2605 += 1, R2606 += 1 };
  s0 -> s1 [0, 65535] { R2606 += 1, R2558 += 1, R2516 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R2606 += 1, R2558 += 1, R2515 += 1, R2516 += 1 };
  s0 -> s3 [0, 65535] { R2606 += 1, R2557 += 1, R2558 += 1 };
  s1 -> s5 [0, 65535] { R2606 += 1 };
  s1 -> s6 [0, 65535] { R2606 += 1, R2558 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2606 += 1, R2558 += 1, R2516 += 1, R2 += 1 };
  s2 -> s5 [0, 65535] { R2606 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2606 += 1, R2558 += 1, R2516 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R2606 += 1, R2558 += 1, R2515 += 1, R2516 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2606 += 1, R2558 += 1, R2516 += 1, R2 += 1 };
  s3 -> s2 [0, 65535] { R2606 += 1, R2558 += 1, R2515 += 1, R2516 += 1 };
  s3 -> s3 [0, 65535] { R2606 += 1, R2557 += 1, R2558 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2606 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2606 += 1 };
  s6 -> s6 [0, 65535] { R2606 += 1, R2558 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 43] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s0 -> s0 [0, 65535] { R2607 += 1, R2608 += 1 };
  s0 -> s2 [0, 65535] { R2608 += 1, R2560 += 1, R2517 += 1, R2518 += 1 };
  s0 -> s3 [0, 65535] { R2608 += 1, R2559 += 1, R2560 += 1 };
  s0 -> s1 [45, 64] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s0 -> s1 [91, 65535] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s1 -> s1 [0, 43] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2608 += 1, R2560 += 1 };
  s1 -> s5 [0, 65535] { R2608 += 1 };
  s1 -> s1 [45, 64] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s1 -> s1 [91, 65535] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s2 -> s1 [0, 43] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2608 += 1, R2560 += 1, R2517 += 1, R2518 += 1 };
  s2 -> s5 [0, 65535] { R2608 += 1 };
  s2 -> s1 [45, 64] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s2 -> s1 [91, 65535] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s3 -> s1 [0, 43] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2608 += 1, R2560 += 1, R2517 += 1, R2518 += 1 };
  s3 -> s3 [0, 65535] { R2608 += 1, R2559 += 1, R2560 += 1 };
  s3 -> s1 [45, 64] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s3 -> s1 [91, 65535] { R2608 += 1, R2560 += 1, R2518 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2608 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R2610 += 1, R2561 += 1, R2562 += 1 };
  s0 -> s2 [0, 65535] { R2610 += 1, R2562 += 1, R2519 += 1, R2520 += 1 };
  s0 -> s3 [0, 65535] { R2610 += 1, R2562 += 1, R2520 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2609 += 1, R2610 += 1 };
  s1 -> s1 [0, 65535] { R2610 += 1, R2561 += 1, R2562 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R2610 += 1, R2562 += 1, R2519 += 1, R2520 += 1 };
  s1 -> s3 [0, 65535] { R2610 += 1, R2562 += 1, R2520 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2610 += 1 };
  s2 -> s2 [0, 65535] { R2610 += 1, R2562 += 1, R2519 += 1, R2520 += 1 };
  s2 -> s3 [0, 65535] { R2610 += 1, R2562 += 1, R2520 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R2610 += 1, R2562 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2610 += 1 };
  s3 -> s3 [0, 65535] { R2610 += 1, R2562 += 1, R2520 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R2610 += 1, R2562 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2610 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2610 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 57] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s0 -> s2 [0, 65535] { R2612 += 1, R2563 += 1, R2564 += 1 };
  s0 -> s0 [0, 65535] { R2611 += 1, R2612 += 1 };
  s0 -> s3 [0, 65535] { R2612 += 1, R2564 += 1, R2522 += 1, R2099 += 1 };
  s0 -> s4 [0, 65535] { R2612 += 1, R2564 += 1, R2521 += 1, R2522 += 1 };
  s0 -> s5 [58, 58] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s0 -> s1 [59, 65535] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s1 -> s1 [0, 57] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s1 -> s1 [0, 65535] { R2612 += 1, R2564 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s6 [0, 65535] { R2612 += 1 };
  s1 -> s5 [58, 58] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s1 -> s1 [59, 65535] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s2 -> s1 [0, 57] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s2 -> s2 [0, 65535] { R2612 += 1, R2563 += 1, R2564 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R2612 += 1, R2564 += 1, R2522 += 1, R2099 += 1 };
  s2 -> s4 [0, 65535] { R2612 += 1, R2564 += 1, R2521 += 1, R2522 += 1 };
  s2 -> s5 [58, 58] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s2 -> s1 [59, 65535] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s3 -> s1 [0, 57] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s3 -> s8 [0, 65535] { R2612 += 1, R2564 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R2612 += 1, R2564 += 1, R2522 += 1, R2099 += 1 };
  s3 -> s6 [0, 65535] { R2612 += 1 };
  s3 -> s5 [58, 58] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s3 -> s1 [59, 65535] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s4 -> s1 [0, 57] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s4 -> s6 [0, 65535] { R2612 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s3 [0, 65535] { R2612 += 1, R2564 += 1, R2522 += 1, R2099 += 1 };
  s4 -> s4 [0, 65535] { R2612 += 1, R2564 += 1, R2521 += 1, R2522 += 1 };
  s4 -> s5 [58, 58] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s4 -> s1 [59, 65535] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s5 -> s5 [0, 65535] { R2612 += 1, R2564 += 1, R2522 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R2612 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R2612 += 1, R2564 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R2612 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 90] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s0 -> s2 [0, 65535] { R2614 += 1, R2565 += 1, R2566 += 1 };
  s0 -> s3 [0, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2491 += 1, R2492 += 1 };
  s0 -> s4 [0, 65535] { R2614 += 1, R2566 += 1, R2523 += 1, R2524 += 1 };
  s0 -> s0 [0, 65535] { R2613 += 1, R2614 += 1 };
  s0 -> s5 [91, 91] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s0 -> s1 [92, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s1 -> s9 [0, 65535] { R2614 += 1, R2566 += 1, R2524 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s1 -> s8 [0, 65535] { R2614 += 1, R2566 += 1 };
  s1 -> s7 [0, 65535] { R2614 += 1 };
  s2 -> s1 [0, 90] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s2 -> s2 [0, 65535] { R2614 += 1, R2565 += 1, R2566 += 1 };
  s2 -> s3 [0, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2491 += 1, R2492 += 1 };
  s2 -> s4 [0, 65535] { R2614 += 1, R2566 += 1, R2523 += 1, R2524 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [91, 91] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s2 -> s1 [92, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s3 -> s1 [0, 90] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s3 -> s3 [0, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2491 += 1, R2492 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R2614 += 1, R2566 += 1 };
  s3 -> s7 [0, 65535] { R2614 += 1 };
  s3 -> s5 [91, 91] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s3 -> s1 [92, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s4 -> s1 [0, 90] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s4 -> s3 [0, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2491 += 1, R2492 += 1 };
  s4 -> s4 [0, 65535] { R2614 += 1, R2566 += 1, R2523 += 1, R2524 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R2614 += 1 };
  s4 -> s5 [91, 91] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s4 -> s1 [92, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s5 -> s1 [0, 65535] { R2614 += 1, R2566 += 1, R2524 += 1, R2492 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2614 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2614 += 1, R2566 += 1 };
  s8 -> s7 [0, 65535] { R2614 += 1 };
  s9 -> s9 [0, 65535] { R2614 += 1, R2566 += 1, R2524 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s8 [0, 65535] { R2614 += 1, R2566 += 1 };
  s9 -> s7 [0, 65535] { R2614 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1, R2493 += 1, R2494 += 1 };
  s0 -> s2 [0, 65535] { R2616 += 1, R2568 += 1, R2525 += 1, R2526 += 1 };
  s0 -> s3 [0, 65535] { R2616 += 1, R2567 += 1, R2568 += 1 };
  s0 -> s4 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1, R2494 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2615 += 1, R2616 += 1 };
  s1 -> s1 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1, R2493 += 1, R2494 += 1 };
  s1 -> s6 [0, 65535] { R2616 += 1, R2568 += 1 };
  s1 -> s4 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1, R2494 += 1, R7 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R2616 += 1 };
  s2 -> s1 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1, R2493 += 1, R2494 += 1 };
  s2 -> s2 [0, 65535] { R2616 += 1, R2568 += 1, R2525 += 1, R2526 += 1 };
  s2 -> s4 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1, R2494 += 1, R7 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R2616 += 1 };
  s3 -> s1 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1, R2493 += 1, R2494 += 1 };
  s3 -> s2 [0, 65535] { R2616 += 1, R2568 += 1, R2525 += 1, R2526 += 1 };
  s3 -> s3 [0, 65535] { R2616 += 1, R2567 += 1, R2568 += 1 };
  s3 -> s4 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1, R2494 += 1, R7 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1 };
  s4 -> s6 [0, 65535] { R2616 += 1, R2568 += 1 };
  s4 -> s4 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1, R2494 += 1, R7 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R2616 += 1 };
  s5 -> s5 [0, 65535] { R2616 += 1, R2568 += 1, R2526 += 1 };
  s5 -> s6 [0, 65535] { R2616 += 1, R2568 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R2616 += 1 };
  s6 -> s6 [0, 65535] { R2616 += 1, R2568 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R2616 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R2616 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R2508 && R4 = R2526 && R5 = R2550 && R6 = R2616 && R10 = 0 && R2101 = 0 && R2102 - R2507 = -1 && R2361 = 0 && R2362 = R2568 && R2495 = 0 && R2496 = 1 && R2497 = 0 && R2498 = 1 && R2499 = R2507 && R2500 = R2508 && R2501 = R2507 && R2502 = R2508 && R2503 = R2507 && R2504 = R2508 && R2505 = R2507 && R2506 = R2508 && R2513 = 0 && R2514 = 1 && R2515 = 0 && R2516 = 1 && R2517 = 2 && R2518 = R2526 && R2519 = 2 && R2520 = R2526 && R2521 = 2 && R2522 = R2526 && R2523 = 2 && R2524 = R2526 && R2525 = 2 && R2527 - R2568 = 1 && R2528 = R2550 && R2529 - R2568 = 1 && R2530 = R2550 && R2531 - R2568 = 1 && R2532 = R2550 && R2533 - R2568 = 1 && R2534 = R2550 && R2535 - R2568 = 1 && R2536 = R2550 && R2537 - R2568 = 1 && R2538 = R2550 && R2539 - R2568 = 1 && R2540 = R2550 && R2541 - R2568 = 1 && R2542 = R2550 && R2543 - R2568 = 1 && R2544 = R2550 && R2545 - R2568 = 1 && R2546 = R2550 && R2547 - R2568 = 1 && R2548 = R2550 && R2549 - R2568 = 1 && R2551 = 0 && R2552 = R2568 && R2553 = 0 && R2554 = R2568 && R2555 = 0 && R2556 = R2568 && R2557 = 0 && R2558 = R2568 && R2559 = 0 && R2560 = R2568 && R2561 = 0 && R2562 = R2568 && R2563 = 0 && R2564 = R2568 && R2565 = 0 && R2566 = R2568 && R2567 = 0 && R2569 = 10 && R2570 = R2616 && R2571 = 10 && R2572 = R2616 && R2573 = 10 && R2574 = R2616 && R2575 = 10 && R2576 = R2616 && R2577 = 10 && R2578 = R2616 && R2579 = 10 && R2580 = R2616 && R2581 = 10 && R2582 = R2616 && R2583 = 10 && R2584 = R2616 && R2585 = 10 && R2586 = R2616 && R2587 = 10 && R2588 = R2616 && R2589 = 10 && R2590 = R2616 && R2591 = 10 && R2592 = R2616 && R2593 = 10 && R2594 = R2616 && R2595 = 10 && R2596 = R2616 && R2597 = 10 && R2598 = R2616 && R2599 = 10 && R2600 = R2616 && R2601 = 10 && R2602 = R2616 && R2603 = 10 && R2604 = R2616 && R2605 = 10 && R2606 = R2616 && R2607 = 10 && R2608 = R2616 && R2609 = 10 && R2610 = R2616 && R2611 = 10 && R2612 = R2616 && R2613 = 10 && R2614 = R2616 && R2615 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R11 != -1 && R2093 < 1 && R2096 < 1 && R2099 < 1 && R2507 - R2508 < 1 && 0 < R2507 && 1 < R2526 && R2568 < R2550 && -1 < R2568 && 9 < R2616 && (R2491 != 0 || ((R7 != 0 || ((R1 != R2492 || R2492 = 1 || R2492 < 0) && (R1 = R2492 || R2492 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R2492 || R2492 = 1 || R2492 < 0) && (R2492 != 1 || -1 < R1) && (R1 = R2492 || R2492 = 1))))) && (R2493 != 0 || ((R7 != 0 || ((R1 != R2494 || R2494 = 1 || R2494 < 0) && (R1 = R2494 || R2494 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R2494 || R2494 = 1 || R2494 < 0) && (R2494 != 1 || -1 < R1) && (R1 = R2494 || R2494 = 1))))) && (R2509 != 0 || R2507 - R2510 = 1 || (R2490 = 0 && R2507 = 1)) && (R2511 != 0 || R2507 - R2512 = 1 || (R2490 = 0 && R2507 = 1)) && (R2491 = 0 || (R7 = 0 && R1 < 0)) && (R2493 = 0 || (R7 = 0 && R1 < 0)) && (R2509 = 0 || (R2490 = 0 && R2507 = 1)) && (R2511 = 0 || (R2490 = 0 && R2507 = 1));
// End of Parikh automata intersection problem
