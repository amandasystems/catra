// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R2, R3, R5, R6, R97, R98;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R166 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s2 [46, 46] { R166 += 1 };
  s0 -> s3 [47, 47] { R166 += 1 };
  s0 -> s1 [48, 65535] { R166 += 1 };
  s1 -> s1 [0, 45] { R166 += 1 };
  s1 -> s2 [46, 46] { R166 += 1 };
  s1 -> s3 [47, 47] { R166 += 1 };
  s1 -> s1 [48, 65535] { R166 += 1 };
  s2 -> s1 [0, 45] { R166 += 1 };
  s2 -> s2 [46, 46] { R166 += 1 };
  s2 -> s3 [47, 47] { R166 += 1 };
  s2 -> s1 [48, 114] { R166 += 1 };
  s2 -> s8 [115, 115] { R166 += 1 };
  s2 -> s1 [116, 65535] { R166 += 1 };
  s3 -> s3 [0, 45] { R166 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R166 += 1 };
  s3 -> s3 [47, 65535] { R166 += 1 };
  s4 -> s3 [0, 45] { R166 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R166 += 1 };
  s4 -> s3 [47, 114] { R166 += 1 };
  s4 -> s5 [115, 115] { R166 += 1 };
  s4 -> s3 [116, 65535] { R166 += 1 };
  s5 -> s3 [0, 45] { R166 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R166 += 1 };
  s5 -> s3 [47, 110] { R166 += 1 };
  s5 -> s6 [111, 111] { R166 += 1 };
  s5 -> s3 [112, 65535] { R166 += 1 };
  s6 -> s3 [0, 45] { R166 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R166 += 1 };
  s6 -> s3 [47, 98] { R166 += 1 };
  s6 -> s7 [99, 99] { R166 += 1 };
  s6 -> s3 [100, 65535] { R166 += 1 };
  s7 -> s3 [0, 45] { R166 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R166 += 1 };
  s7 -> s3 [47, 106] { R166 += 1 };
  s7 -> s3 [108, 65535] { R166 += 1 };
  s8 -> s1 [0, 45] { R166 += 1 };
  s8 -> s2 [46, 46] { R166 += 1 };
  s8 -> s3 [47, 47] { R166 += 1 };
  s8 -> s1 [48, 110] { R166 += 1 };
  s8 -> s9 [111, 111] { R166 += 1 };
  s8 -> s1 [112, 65535] { R166 += 1 };
  s9 -> s1 [0, 45] { R166 += 1 };
  s9 -> s2 [46, 46] { R166 += 1 };
  s9 -> s3 [47, 47] { R166 += 1 };
  s9 -> s1 [48, 98] { R166 += 1 };
  s9 -> s10 [99, 99] { R166 += 1 };
  s9 -> s1 [100, 65535] { R166 += 1 };
  s10 -> s1 [0, 45] { R166 += 1 };
  s10 -> s2 [46, 46] { R166 += 1 };
  s10 -> s3 [47, 47] { R166 += 1 };
  s10 -> s1 [48, 106] { R166 += 1 };
  s10 -> s1 [108, 65535] { R166 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s1 [0, 65535] { R168 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R168 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R170 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s3 [47, 47] { R170 += 1 };
  s0 -> s1 [48, 65535] { R170 += 1, R98 += 1 };
  s1 -> s1 [0, 46] { R170 += 1, R98 += 1 };
  s1 -> s3 [47, 47] { R170 += 1 };
  s1 -> s1 [48, 65535] { R170 += 1, R98 += 1 };
  s2 -> s1 [0, 46] { R170 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R170 += 1, R97 += 1, R98 += 1 };
  s2 -> s3 [47, 47] { R170 += 1 };
  s2 -> s1 [48, 65535] { R170 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R170 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R172 += 1, R143 += 1, R144 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R144 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s1 -> s1 [0, 65535] { R172 += 1, R143 += 1, R144 += 1 };
  s1 -> s2 [0, 65535] { R172 += 1, R144 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R172 += 1, R144 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R172 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R172 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R174 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R153 += 1, R154 += 1 };
  s0 -> s3 [64, 64] { R174 += 1, R154 += 1 };
  s0 -> s1 [65, 65535] { R174 += 1, R154 += 1 };
  s1 -> s1 [0, 63] { R174 += 1, R154 += 1 };
  s1 -> s3 [64, 64] { R174 += 1, R154 += 1 };
  s1 -> s1 [65, 65535] { R174 += 1, R154 += 1 };
  s2 -> s1 [0, 63] { R174 += 1, R154 += 1 };
  s2 -> s2 [0, 65535] { R174 += 1, R153 += 1, R154 += 1 };
  s2 -> s3 [64, 64] { R174 += 1, R154 += 1 };
  s2 -> s1 [65, 65535] { R174 += 1, R154 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R174 += 1 };
  s3 -> s3 [0, 65535] { R174 += 1, R154 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R174 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R176 += 1, R156 += 1, R142 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R155 += 1, R156 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1, R156 += 1, R142 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R176 += 1 };
  s2 -> s1 [0, 65535] { R176 += 1, R156 += 1, R142 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R176 += 1, R155 += 1, R156 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R176 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R178 += 1, R158 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R157 += 1, R158 += 1 };
  s0 -> s3 [0, 65535] { R178 += 1, R158 += 1, R145 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s4 [58, 58] { R178 += 1, R158 += 1, R146 += 1 };
  s0 -> s1 [59, 63] { R178 += 1, R158 += 1, R146 += 1 };
  s0 -> s1 [65, 65535] { R178 += 1, R158 += 1, R146 += 1 };
  s1 -> s1 [0, 57] { R178 += 1, R158 += 1, R146 += 1 };
  s1 -> s4 [58, 58] { R178 += 1, R158 += 1, R146 += 1 };
  s1 -> s1 [59, 63] { R178 += 1, R158 += 1, R146 += 1 };
  s1 -> s1 [65, 65535] { R178 += 1, R158 += 1, R146 += 1 };
  s2 -> s1 [0, 57] { R178 += 1, R158 += 1, R146 += 1 };
  s2 -> s2 [0, 65535] { R178 += 1, R157 += 1, R158 += 1 };
  s2 -> s3 [0, 65535] { R178 += 1, R158 += 1, R145 += 1, R146 += 1 };
  s2 -> s4 [58, 58] { R178 += 1, R158 += 1, R146 += 1 };
  s2 -> s1 [59, 63] { R178 += 1, R158 += 1, R146 += 1 };
  s2 -> s1 [65, 65535] { R178 += 1, R158 += 1, R146 += 1 };
  s3 -> s1 [0, 57] { R178 += 1, R158 += 1, R146 += 1 };
  s3 -> s3 [0, 65535] { R178 += 1, R158 += 1, R145 += 1, R146 += 1 };
  s3 -> s4 [58, 58] { R178 += 1, R158 += 1, R146 += 1 };
  s3 -> s1 [59, 63] { R178 += 1, R158 += 1, R146 += 1 };
  s3 -> s1 [65, 65535] { R178 += 1, R158 += 1, R146 += 1 };
  s4 -> s4 [0, 63] { R178 += 1, R158 += 1, R146 += 1 };
  s4 -> s5 [0, 65535] { R178 += 1 };
  s4 -> s4 [0, 65535] { R178 += 1, R158 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [65, 65535] { R178 += 1, R158 += 1, R146 += 1 };
  s5 -> s5 [0, 65535] { R178 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R180 += 1, R159 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R160 += 1, R148 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R180 += 1, R160 += 1, R147 += 1, R148 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1, R159 += 1, R160 += 1 };
  s1 -> s2 [0, 65535] { R180 += 1, R160 += 1, R148 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R180 += 1, R160 += 1, R147 += 1, R148 += 1 };
  s2 -> s4 [0, 65535] { R180 += 1 };
  s2 -> s6 [0, 65535] { R180 += 1, R160 += 1 };
  s2 -> s2 [0, 65535] { R180 += 1, R160 += 1, R148 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R180 += 1 };
  s3 -> s2 [0, 65535] { R180 += 1, R160 += 1, R148 += 1, R1 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R180 += 1, R160 += 1, R147 += 1, R148 += 1 };
  s4 -> s4 [0, 65535] { R180 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R180 += 1 };
  s6 -> s6 [0, 65535] { R180 += 1, R160 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R162 += 1, R150 += 1, R5 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s3 [0, 65535] { R182 += 1, R161 += 1, R162 += 1 };
  s0 -> s4 [0, 65535] { R182 += 1, R162 += 1, R149 += 1, R150 += 1 };
  s0 -> s5 [58, 58] { R182 += 1, R162 += 1, R150 += 1 };
  s0 -> s1 [59, 65535] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s1 -> s1 [0, 57] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s1 -> s5 [58, 58] { R182 += 1, R162 += 1, R150 += 1 };
  s1 -> s1 [59, 65535] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s2 -> s1 [0, 57] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R182 += 1, R162 += 1, R150 += 1, R5 += 1, R6 += 1 };
  s2 -> s5 [58, 58] { R182 += 1, R162 += 1, R150 += 1 };
  s2 -> s1 [59, 65535] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s3 -> s1 [0, 57] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R182 += 1, R162 += 1, R150 += 1, R5 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R182 += 1, R161 += 1, R162 += 1 };
  s3 -> s4 [0, 65535] { R182 += 1, R162 += 1, R149 += 1, R150 += 1 };
  s3 -> s5 [58, 58] { R182 += 1, R162 += 1, R150 += 1 };
  s3 -> s1 [59, 65535] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s4 -> s1 [0, 57] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s4 -> s2 [0, 65535] { R182 += 1, R162 += 1, R150 += 1, R5 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R182 += 1, R162 += 1, R149 += 1, R150 += 1 };
  s4 -> s5 [58, 58] { R182 += 1, R162 += 1, R150 += 1 };
  s4 -> s1 [59, 65535] { R182 += 1, R162 += 1, R150 += 1, R6 += 1 };
  s5 -> s6 [0, 65535] { R182 += 1, R162 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R182 += 1 };
  s5 -> s5 [0, 65535] { R182 += 1, R162 += 1, R150 += 1 };
  s6 -> s6 [0, 65535] { R182 += 1, R162 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R182 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R182 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R184 += 1, R164 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R184 += 1, R164 += 1, R151 += 1, R152 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s0 -> s3 [0, 65535] { R184 += 1, R163 += 1, R164 += 1 };
  s1 -> s6 [0, 65535] { R184 += 1, R164 += 1 };
  s1 -> s5 [0, 65535] { R184 += 1 };
  s1 -> s1 [0, 65535] { R184 += 1, R164 += 1, R152 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R184 += 1 };
  s2 -> s1 [0, 65535] { R184 += 1, R164 += 1, R152 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R184 += 1, R164 += 1, R151 += 1, R152 += 1 };
  s3 -> s1 [0, 65535] { R184 += 1, R164 += 1, R152 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R184 += 1, R164 += 1, R151 += 1, R152 += 1 };
  s3 -> s3 [0, 65535] { R184 += 1, R163 += 1, R164 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R184 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R184 += 1, R164 += 1 };
  s6 -> s5 [0, 65535] { R184 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 - R6 = 1 && R2 = R144 && R3 = R184 && R5 = 0 && R97 = 0 && R98 = R162 && R143 - R162 = 1 && R145 = 0 && R147 = 0 && R149 = 0 && R151 = 0 && R153 = 0 && R154 = R162 && R157 = 0 && R158 = R162 && R161 = 0 && R165 = 10 && R166 = R184 && R167 = 10 && R168 = R184 && R169 = 10 && R170 = R184 && R171 = 10 && R172 = R184 && R173 = 10 && R174 = R184 && R175 = 10 && R176 = R184 && R177 = 10 && R178 = R184 && R179 = 10 && R180 = R184 && R181 = 10 && R182 = R184 && R183 = 10 && R0 != 0 && -1 < R6 && R162 < R144 && R146 < 11 && R148 < 11 && R150 < 11 && R152 < 11 && -1 < R162 && 9 < R184 && (R146 != 10 || 9 < R142) && (R148 != 10 || 9 < R142) && (R150 != 10 || 9 < R142) && (R152 != 10 || 9 < R142) && (R155 != 0 || R156 = R162 || (R142 = 0 && R162 = 0)) && (R159 != 0 || R160 = R162 || (R142 = 0 && R162 = 0)) && (R163 != 0 || R162 = R164 || (R142 = 0 && R162 = 0)) && (R142 = R146 || 9 < R146) && (R142 = R148 || 9 < R148) && (R142 = R150 || 9 < R150) && (R142 = R152 || 9 < R152) && (R155 = 0 || (R142 = 0 && R162 = 0)) && (R159 = 0 || (R142 = 0 && R162 = 0)) && (R163 = 0 || (R142 = 0 && R162 = 0));
// End of Parikh automata intersection problem
