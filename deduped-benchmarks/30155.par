// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R13, R14, R2, R3, R361, R362, R4, R5, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R8, R9;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R656 += 1 };
  s0 -> s0 [0, 65535] { R655 += 1, R656 += 1 };
  s0 -> s2 [46, 46] { R656 += 1 };
  s0 -> s3 [47, 47] { R656 += 1 };
  s0 -> s1 [48, 65535] { R656 += 1 };
  s1 -> s1 [0, 45] { R656 += 1 };
  s1 -> s2 [46, 46] { R656 += 1 };
  s1 -> s3 [47, 47] { R656 += 1 };
  s1 -> s1 [48, 65535] { R656 += 1 };
  s2 -> s1 [0, 45] { R656 += 1 };
  s2 -> s2 [46, 46] { R656 += 1 };
  s2 -> s3 [47, 47] { R656 += 1 };
  s2 -> s1 [48, 114] { R656 += 1 };
  s2 -> s8 [115, 115] { R656 += 1 };
  s2 -> s1 [116, 65535] { R656 += 1 };
  s3 -> s3 [0, 45] { R656 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R656 += 1 };
  s3 -> s3 [47, 65535] { R656 += 1 };
  s4 -> s3 [0, 45] { R656 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R656 += 1 };
  s4 -> s3 [47, 114] { R656 += 1 };
  s4 -> s5 [115, 115] { R656 += 1 };
  s4 -> s3 [116, 65535] { R656 += 1 };
  s5 -> s3 [0, 45] { R656 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R656 += 1 };
  s5 -> s3 [47, 110] { R656 += 1 };
  s5 -> s6 [111, 111] { R656 += 1 };
  s5 -> s3 [112, 65535] { R656 += 1 };
  s6 -> s3 [0, 45] { R656 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R656 += 1 };
  s6 -> s3 [47, 98] { R656 += 1 };
  s6 -> s7 [99, 99] { R656 += 1 };
  s6 -> s3 [100, 65535] { R656 += 1 };
  s7 -> s3 [0, 45] { R656 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R656 += 1 };
  s7 -> s3 [47, 106] { R656 += 1 };
  s7 -> s3 [108, 65535] { R656 += 1 };
  s8 -> s1 [0, 45] { R656 += 1 };
  s8 -> s2 [46, 46] { R656 += 1 };
  s8 -> s3 [47, 47] { R656 += 1 };
  s8 -> s1 [48, 110] { R656 += 1 };
  s8 -> s9 [111, 111] { R656 += 1 };
  s8 -> s1 [112, 65535] { R656 += 1 };
  s9 -> s1 [0, 45] { R656 += 1 };
  s9 -> s2 [46, 46] { R656 += 1 };
  s9 -> s3 [47, 47] { R656 += 1 };
  s9 -> s1 [48, 98] { R656 += 1 };
  s9 -> s10 [99, 99] { R656 += 1 };
  s9 -> s1 [100, 65535] { R656 += 1 };
  s10 -> s1 [0, 45] { R656 += 1 };
  s10 -> s2 [46, 46] { R656 += 1 };
  s10 -> s3 [47, 47] { R656 += 1 };
  s10 -> s1 [48, 106] { R656 += 1 };
  s10 -> s1 [108, 65535] { R656 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R657 += 1, R658 += 1 };
  s0 -> s1 [0, 65535] { R658 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R658 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R660 += 1, R362 += 1 };
  s0 -> s0 [0, 65535] { R659 += 1, R660 += 1 };
  s0 -> s2 [0, 65535] { R660 += 1, R361 += 1, R362 += 1 };
  s0 -> s3 [47, 47] { R660 += 1 };
  s0 -> s1 [48, 65535] { R660 += 1, R362 += 1 };
  s1 -> s1 [0, 46] { R660 += 1, R362 += 1 };
  s1 -> s3 [47, 47] { R660 += 1 };
  s1 -> s1 [48, 65535] { R660 += 1, R362 += 1 };
  s2 -> s1 [0, 46] { R660 += 1, R362 += 1 };
  s2 -> s2 [0, 65535] { R660 += 1, R361 += 1, R362 += 1 };
  s2 -> s3 [47, 47] { R660 += 1 };
  s2 -> s1 [48, 65535] { R660 += 1, R362 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R660 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R662 += 1, R550 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R662 += 1, R549 += 1, R550 += 1 };
  s0 -> s0 [0, 65535] { R661 += 1, R662 += 1 };
  s1 -> s1 [0, 65535] { R662 += 1, R550 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R662 += 1 };
  s2 -> s1 [0, 65535] { R662 += 1, R550 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R662 += 1, R549 += 1, R550 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R662 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R664 += 1, R614 += 1 };
  s0 -> s0 [0, 65535] { R663 += 1, R664 += 1 };
  s0 -> s2 [0, 65535] { R664 += 1, R613 += 1, R614 += 1 };
  s0 -> s3 [64, 64] { R664 += 1, R614 += 1 };
  s0 -> s1 [65, 65535] { R664 += 1, R614 += 1 };
  s1 -> s1 [0, 63] { R664 += 1, R614 += 1 };
  s1 -> s3 [64, 64] { R664 += 1, R614 += 1 };
  s1 -> s1 [65, 65535] { R664 += 1, R614 += 1 };
  s2 -> s1 [0, 63] { R664 += 1, R614 += 1 };
  s2 -> s2 [0, 65535] { R664 += 1, R613 += 1, R614 += 1 };
  s2 -> s3 [64, 64] { R664 += 1, R614 += 1 };
  s2 -> s1 [65, 65535] { R664 += 1, R614 += 1 };
  s3 -> s3 [0, 65535] { R664 += 1, R614 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R664 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R664 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R665 += 1, R666 += 1 };
  s0 -> s1 [0, 65535] { R666 += 1, R615 += 1, R616 += 1 };
  s0 -> s2 [0, 65535] { R666 += 1, R616 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R666 += 1, R615 += 1, R616 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R666 += 1, R616 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R666 += 1 };
  s2 -> s2 [0, 65535] { R666 += 1, R616 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R666 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R668 += 1, R618 += 1, R542 += 1 };
  s0 -> s2 [0, 65535] { R668 += 1, R617 += 1, R618 += 1 };
  s0 -> s0 [0, 65535] { R667 += 1, R668 += 1 };
  s0 -> s3 [0, 65535] { R668 += 1, R618 += 1, R541 += 1, R542 += 1 };
  s0 -> s4 [58, 58] { R668 += 1, R618 += 1, R542 += 1 };
  s0 -> s1 [59, 63] { R668 += 1, R618 += 1, R542 += 1 };
  s0 -> s1 [65, 65535] { R668 += 1, R618 += 1, R542 += 1 };
  s1 -> s1 [0, 57] { R668 += 1, R618 += 1, R542 += 1 };
  s1 -> s4 [58, 58] { R668 += 1, R618 += 1, R542 += 1 };
  s1 -> s1 [59, 63] { R668 += 1, R618 += 1, R542 += 1 };
  s1 -> s1 [65, 65535] { R668 += 1, R618 += 1, R542 += 1 };
  s2 -> s1 [0, 57] { R668 += 1, R618 += 1, R542 += 1 };
  s2 -> s2 [0, 65535] { R668 += 1, R617 += 1, R618 += 1 };
  s2 -> s3 [0, 65535] { R668 += 1, R618 += 1, R541 += 1, R542 += 1 };
  s2 -> s4 [58, 58] { R668 += 1, R618 += 1, R542 += 1 };
  s2 -> s1 [59, 63] { R668 += 1, R618 += 1, R542 += 1 };
  s2 -> s1 [65, 65535] { R668 += 1, R618 += 1, R542 += 1 };
  s3 -> s1 [0, 57] { R668 += 1, R618 += 1, R542 += 1 };
  s3 -> s3 [0, 65535] { R668 += 1, R618 += 1, R541 += 1, R542 += 1 };
  s3 -> s4 [58, 58] { R668 += 1, R618 += 1, R542 += 1 };
  s3 -> s1 [59, 63] { R668 += 1, R618 += 1, R542 += 1 };
  s3 -> s1 [65, 65535] { R668 += 1, R618 += 1, R542 += 1 };
  s4 -> s4 [0, 63] { R668 += 1, R618 += 1, R542 += 1 };
  s4 -> s4 [0, 65535] { R668 += 1, R618 += 1 };
  s4 -> s5 [0, 65535] { R668 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [65, 65535] { R668 += 1, R618 += 1, R542 += 1 };
  s5 -> s5 [0, 65535] { R668 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R669 += 1, R670 += 1 };
  s0 -> s1 [0, 65535] { R670 += 1, R620 += 1, R544 += 1, R536 += 1 };
  s0 -> s2 [0, 65535] { R670 += 1, R620 += 1, R543 += 1, R544 += 1 };
  s0 -> s3 [0, 65535] { R670 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [0, 65535] { R670 += 1, R620 += 1, R544 += 1, R536 += 1 };
  s1 -> s6 [0, 65535] { R670 += 1, R620 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R670 += 1 };
  s2 -> s1 [0, 65535] { R670 += 1, R620 += 1, R544 += 1, R536 += 1 };
  s2 -> s2 [0, 65535] { R670 += 1, R620 += 1, R543 += 1, R544 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R670 += 1 };
  s3 -> s1 [0, 65535] { R670 += 1, R620 += 1, R544 += 1, R536 += 1 };
  s3 -> s2 [0, 65535] { R670 += 1, R620 += 1, R543 += 1, R544 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R670 += 1, R619 += 1, R620 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R670 += 1 };
  s6 -> s6 [0, 65535] { R670 += 1, R620 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R670 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 36] { R672 += 1, R622 += 1, R546 += 1 };
  s0 -> s2 [0, 65535] { R672 += 1, R621 += 1, R622 += 1 };
  s0 -> s0 [0, 65535] { R671 += 1, R672 += 1 };
  s0 -> s3 [0, 65535] { R672 += 1, R622 += 1, R545 += 1, R546 += 1 };
  s0 -> s1 [38, 42] { R672 += 1, R622 += 1, R546 += 1 };
  s0 -> s1 [44, 57] { R672 += 1, R622 += 1, R546 += 1 };
  s0 -> s1 [59, 63] { R672 += 1, R622 += 1, R546 += 1 };
  s0 -> s1 [65, 65535] { R672 += 1, R622 += 1, R546 += 1 };
  s1 -> s1 [0, 36] { R672 += 1, R622 += 1, R546 += 1 };
  s1 -> s4 [0, 65535] { R672 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R672 += 1, R622 += 1 };
  s1 -> s1 [38, 42] { R672 += 1, R622 += 1, R546 += 1 };
  s1 -> s1 [44, 57] { R672 += 1, R622 += 1, R546 += 1 };
  s1 -> s1 [59, 63] { R672 += 1, R622 += 1, R546 += 1 };
  s1 -> s1 [65, 65535] { R672 += 1, R622 += 1, R546 += 1 };
  s2 -> s1 [0, 36] { R672 += 1, R622 += 1, R546 += 1 };
  s2 -> s2 [0, 65535] { R672 += 1, R621 += 1, R622 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R672 += 1, R622 += 1, R545 += 1, R546 += 1 };
  s2 -> s1 [38, 42] { R672 += 1, R622 += 1, R546 += 1 };
  s2 -> s1 [44, 57] { R672 += 1, R622 += 1, R546 += 1 };
  s2 -> s1 [59, 63] { R672 += 1, R622 += 1, R546 += 1 };
  s2 -> s1 [65, 65535] { R672 += 1, R622 += 1, R546 += 1 };
  s3 -> s1 [0, 36] { R672 += 1, R622 += 1, R546 += 1 };
  s3 -> s4 [0, 65535] { R672 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R672 += 1, R622 += 1, R545 += 1, R546 += 1 };
  s3 -> s1 [38, 42] { R672 += 1, R622 += 1, R546 += 1 };
  s3 -> s1 [44, 57] { R672 += 1, R622 += 1, R546 += 1 };
  s3 -> s1 [59, 63] { R672 += 1, R622 += 1, R546 += 1 };
  s3 -> s1 [65, 65535] { R672 += 1, R622 += 1, R546 += 1 };
  s4 -> s4 [0, 65535] { R672 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R674 += 1, R624 += 1, R548 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R673 += 1, R674 += 1 };
  s0 -> s2 [0, 65535] { R674 += 1, R623 += 1, R624 += 1 };
  s0 -> s3 [0, 65535] { R674 += 1, R624 += 1, R547 += 1, R548 += 1 };
  s1 -> s1 [0, 65535] { R674 += 1, R624 += 1, R548 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R674 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R674 += 1, R624 += 1 };
  s2 -> s1 [0, 65535] { R674 += 1, R624 += 1, R548 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R674 += 1, R623 += 1, R624 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R674 += 1, R624 += 1, R547 += 1, R548 += 1 };
  s3 -> s1 [0, 65535] { R674 += 1, R624 += 1, R548 += 1, R0 += 1 };
  s3 -> s4 [0, 65535] { R674 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R674 += 1, R624 += 1, R547 += 1, R548 += 1 };
  s4 -> s4 [0, 65535] { R674 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R674 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R674 += 1, R624 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 43] { R676 += 1, R626 += 1, R584 += 1 };
  s0 -> s0 [0, 65535] { R675 += 1, R676 += 1 };
  s0 -> s2 [0, 65535] { R676 += 1, R626 += 1, R583 += 1, R584 += 1 };
  s0 -> s3 [0, 65535] { R676 += 1, R625 += 1, R626 += 1 };
  s0 -> s4 [44, 44] { R676 += 1, R626 += 1, R584 += 1 };
  s0 -> s1 [45, 65535] { R676 += 1, R626 += 1, R584 += 1 };
  s1 -> s1 [0, 43] { R676 += 1, R626 += 1, R584 += 1 };
  s1 -> s4 [44, 44] { R676 += 1, R626 += 1, R584 += 1 };
  s1 -> s1 [45, 65535] { R676 += 1, R626 += 1, R584 += 1 };
  s2 -> s1 [0, 43] { R676 += 1, R626 += 1, R584 += 1 };
  s2 -> s2 [0, 65535] { R676 += 1, R626 += 1, R583 += 1, R584 += 1 };
  s2 -> s4 [44, 44] { R676 += 1, R626 += 1, R584 += 1 };
  s2 -> s1 [45, 65535] { R676 += 1, R626 += 1, R584 += 1 };
  s3 -> s1 [0, 43] { R676 += 1, R626 += 1, R584 += 1 };
  s3 -> s2 [0, 65535] { R676 += 1, R626 += 1, R583 += 1, R584 += 1 };
  s3 -> s3 [0, 65535] { R676 += 1, R625 += 1, R626 += 1 };
  s3 -> s4 [44, 44] { R676 += 1, R626 += 1, R584 += 1 };
  s3 -> s1 [45, 65535] { R676 += 1, R626 += 1, R584 += 1 };
  s4 -> s5 [0, 65535] { R676 += 1, R626 += 1 };
  s4 -> s4 [0, 65535] { R676 += 1, R626 += 1, R584 += 1 };
  s4 -> s6 [0, 65535] { R676 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R676 += 1, R626 += 1 };
  s5 -> s6 [0, 65535] { R676 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R676 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R678 += 1, R628 += 1, R586 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R678 += 1, R628 += 1, R585 += 1, R586 += 1 };
  s0 -> s0 [0, 65535] { R677 += 1, R678 += 1 };
  s0 -> s3 [0, 65535] { R678 += 1, R627 += 1, R628 += 1 };
  s1 -> s6 [0, 65535] { R678 += 1, R628 += 1 };
  s1 -> s5 [0, 65535] { R678 += 1 };
  s1 -> s1 [0, 65535] { R678 += 1, R628 += 1, R586 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R678 += 1 };
  s2 -> s1 [0, 65535] { R678 += 1, R628 += 1, R586 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R678 += 1, R628 += 1, R585 += 1, R586 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R678 += 1, R628 += 1, R586 += 1, R3 += 1 };
  s3 -> s2 [0, 65535] { R678 += 1, R628 += 1, R585 += 1, R586 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R678 += 1, R627 += 1, R628 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R678 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R678 += 1, R628 += 1 };
  s6 -> s5 [0, 65535] { R678 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 43] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R679 += 1, R680 += 1 };
  s0 -> s2 [0, 65535] { R680 += 1, R630 += 1, R587 += 1, R588 += 1 };
  s0 -> s3 [0, 65535] { R680 += 1, R629 += 1, R630 += 1 };
  s0 -> s4 [0, 65535] { R680 += 1, R630 += 1, R588 += 1, R13 += 1, R14 += 1 };
  s0 -> s5 [44, 44] { R680 += 1, R630 += 1, R588 += 1 };
  s0 -> s1 [45, 65535] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s1 -> s1 [0, 43] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s1 -> s5 [44, 44] { R680 += 1, R630 += 1, R588 += 1 };
  s1 -> s1 [45, 65535] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s2 -> s1 [0, 43] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R680 += 1, R630 += 1, R587 += 1, R588 += 1 };
  s2 -> s4 [0, 65535] { R680 += 1, R630 += 1, R588 += 1, R13 += 1, R14 += 1 };
  s2 -> s5 [44, 44] { R680 += 1, R630 += 1, R588 += 1 };
  s2 -> s1 [45, 65535] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s3 -> s1 [0, 43] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s3 -> s2 [0, 65535] { R680 += 1, R630 += 1, R587 += 1, R588 += 1 };
  s3 -> s3 [0, 65535] { R680 += 1, R629 += 1, R630 += 1 };
  s3 -> s4 [0, 65535] { R680 += 1, R630 += 1, R588 += 1, R13 += 1, R14 += 1 };
  s3 -> s5 [44, 44] { R680 += 1, R630 += 1, R588 += 1 };
  s3 -> s1 [45, 65535] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s4 -> s1 [0, 43] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s4 -> s4 [0, 65535] { R680 += 1, R630 += 1, R588 += 1, R13 += 1, R14 += 1 };
  s4 -> s5 [44, 44] { R680 += 1, R630 += 1, R588 += 1 };
  s4 -> s1 [45, 65535] { R680 += 1, R630 += 1, R588 += 1, R14 += 1 };
  s5 -> s6 [0, 65535] { R680 += 1, R630 += 1 };
  s5 -> s7 [0, 65535] { R680 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R680 += 1, R630 += 1, R588 += 1 };
  s6 -> s6 [0, 65535] { R680 += 1, R630 += 1 };
  s6 -> s7 [0, 65535] { R680 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R680 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R682 += 1, R632 += 1, R589 += 1, R590 += 1 };
  s0 -> s2 [0, 65535] { R682 += 1, R631 += 1, R632 += 1 };
  s0 -> s0 [0, 65535] { R681 += 1, R682 += 1 };
  s0 -> s3 [0, 65535] { R682 += 1, R632 += 1, R590 += 1 };
  s1 -> s1 [0, 65535] { R682 += 1, R632 += 1, R589 += 1, R590 += 1 };
  s1 -> s5 [0, 65535] { R682 += 1 };
  s1 -> s3 [0, 65535] { R682 += 1, R632 += 1, R590 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R682 += 1, R632 += 1, R589 += 1, R590 += 1 };
  s2 -> s2 [0, 65535] { R682 += 1, R631 += 1, R632 += 1 };
  s2 -> s3 [0, 65535] { R682 += 1, R632 += 1, R590 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R682 += 1, R632 += 1 };
  s3 -> s5 [0, 65535] { R682 += 1 };
  s3 -> s3 [0, 65535] { R682 += 1, R632 += 1, R590 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R682 += 1, R632 += 1 };
  s4 -> s5 [0, 65535] { R682 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R682 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 64] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s0 -> s2 [0, 65535] { R684 += 1, R634 += 1, R592 += 1, R561 += 1, R562 += 1 };
  s0 -> s3 [0, 65535] { R684 += 1, R634 += 1, R591 += 1, R592 += 1 };
  s0 -> s4 [0, 65535] { R684 += 1, R633 += 1, R634 += 1 };
  s0 -> s0 [0, 65535] { R683 += 1, R684 += 1 };
  s0 -> s5 [85, 85] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s0 -> s1 [86, 65535] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s1 -> s1 [0, 64] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s1 -> s5 [85, 85] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s1 -> s1 [86, 65535] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s2 -> s1 [0, 64] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s2 -> s2 [0, 65535] { R684 += 1, R634 += 1, R592 += 1, R561 += 1, R562 += 1 };
  s2 -> s5 [85, 85] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s2 -> s1 [86, 65535] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s3 -> s1 [0, 64] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s3 -> s2 [0, 65535] { R684 += 1, R634 += 1, R592 += 1, R561 += 1, R562 += 1 };
  s3 -> s3 [0, 65535] { R684 += 1, R634 += 1, R591 += 1, R592 += 1 };
  s3 -> s5 [85, 85] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s3 -> s1 [86, 65535] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s4 -> s1 [0, 64] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s4 -> s2 [0, 65535] { R684 += 1, R634 += 1, R592 += 1, R561 += 1, R562 += 1 };
  s4 -> s3 [0, 65535] { R684 += 1, R634 += 1, R591 += 1, R592 += 1 };
  s4 -> s4 [0, 65535] { R684 += 1, R633 += 1, R634 += 1 };
  s4 -> s5 [85, 85] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s4 -> s1 [86, 65535] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s5 -> s5 [0, 64] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s5 -> s6 [0, 65535] { R684 += 1 };
  s5 -> s5 [0, 65535] { R684 += 1, R634 += 1, R592 += 1 };
  s5 -> s7 [0, 65535] { R684 += 1, R634 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [85, 65535] { R684 += 1, R634 += 1, R592 += 1, R562 += 1 };
  s6 -> s6 [0, 65535] { R684 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R684 += 1 };
  s7 -> s7 [0, 65535] { R684 += 1, R634 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R686 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s0 -> s2 [0, 65535] { R686 += 1, R636 += 1, R594 += 1, R563 += 1, R564 += 1 };
  s0 -> s3 [0, 65535] { R686 += 1, R636 += 1, R594 += 1, R564 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R685 += 1, R686 += 1 };
  s0 -> s4 [0, 65535] { R686 += 1, R635 += 1, R636 += 1 };
  s1 -> s1 [0, 65535] { R686 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s1 -> s2 [0, 65535] { R686 += 1, R636 += 1, R594 += 1, R563 += 1, R564 += 1 };
  s1 -> s3 [0, 65535] { R686 += 1, R636 += 1, R594 += 1, R564 += 1, R2 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R686 += 1 };
  s2 -> s2 [0, 65535] { R686 += 1, R636 += 1, R594 += 1, R563 += 1, R564 += 1 };
  s2 -> s3 [0, 65535] { R686 += 1, R636 += 1, R594 += 1, R564 += 1, R2 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R686 += 1, R636 += 1 };
  s2 -> s8 [0, 65535] { R686 += 1 };
  s3 -> s6 [0, 65535] { R686 += 1, R636 += 1, R594 += 1 };
  s3 -> s3 [0, 65535] { R686 += 1, R636 += 1, R594 += 1, R564 += 1, R2 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R686 += 1, R636 += 1 };
  s3 -> s8 [0, 65535] { R686 += 1 };
  s4 -> s1 [0, 65535] { R686 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s4 -> s2 [0, 65535] { R686 += 1, R636 += 1, R594 += 1, R563 += 1, R564 += 1 };
  s4 -> s3 [0, 65535] { R686 += 1, R636 += 1, R594 += 1, R564 += 1, R2 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R686 += 1, R635 += 1, R636 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R686 += 1, R636 += 1, R594 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s7 [0, 65535] { R686 += 1, R636 += 1 };
  s6 -> s8 [0, 65535] { R686 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R686 += 1, R636 += 1 };
  s7 -> s8 [0, 65535] { R686 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R686 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 57] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s0 -> s2 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R687 += 1, R688 += 1 };
  s0 -> s3 [0, 65535] { R688 += 1, R638 += 1, R595 += 1, R596 += 1 };
  s0 -> s4 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s0 -> s5 [0, 65535] { R688 += 1, R637 += 1, R638 += 1 };
  s0 -> s6 [58, 58] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s0 -> s1 [59, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s1 -> s1 [0, 57] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s1 -> s8 [0, 65535] { R688 += 1, R638 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R688 += 1, R638 += 1, R596 += 1 };
  s1 -> s9 [0, 65535] { R688 += 1 };
  s1 -> s6 [58, 58] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s1 -> s1 [59, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s2 -> s1 [0, 57] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s2 -> s8 [0, 65535] { R688 += 1, R638 += 1 };
  s2 -> s2 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1, R8 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s9 [0, 65535] { R688 += 1 };
  s2 -> s10 [0, 65535] { R688 += 1, R638 += 1, R596 += 1 };
  s2 -> s6 [58, 58] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s2 -> s1 [59, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s3 -> s1 [0, 57] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s3 -> s2 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1, R8 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R688 += 1, R638 += 1, R595 += 1, R596 += 1 };
  s3 -> s9 [0, 65535] { R688 += 1 };
  s3 -> s4 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s3 -> s6 [58, 58] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s3 -> s1 [59, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s4 -> s1 [0, 57] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s4 -> s8 [0, 65535] { R688 += 1, R638 += 1 };
  s4 -> s2 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1, R8 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s9 [0, 65535] { R688 += 1 };
  s4 -> s4 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s4 -> s6 [58, 58] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s4 -> s1 [59, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s5 -> s1 [0, 57] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s5 -> s2 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1, R8 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s3 [0, 65535] { R688 += 1, R638 += 1, R595 += 1, R596 += 1 };
  s5 -> s4 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s5 -> s5 [0, 65535] { R688 += 1, R637 += 1, R638 += 1 };
  s5 -> s6 [58, 58] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s5 -> s1 [59, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s6 -> s6 [0, 65535] { R688 += 1, R638 += 1, R596 += 1, R566 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R688 += 1, R638 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s9 [0, 65535] { R688 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R688 += 1 };
  s10 -> s8 [0, 65535] { R688 += 1, R638 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s9 [0, 65535] { R688 += 1 };
  s10 -> s10 [0, 65535] { R688 += 1, R638 += 1, R596 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s1, s7, s0, s10;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 84] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s0 -> s0 [0, 65535] { R689 += 1, R690 += 1 };
  s0 -> s2 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1, R9 += 1 };
  s0 -> s3 [0, 65535] { R690 += 1, R639 += 1, R640 += 1 };
  s0 -> s4 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R567 += 1, R568 += 1 };
  s0 -> s5 [0, 65535] { R690 += 1, R640 += 1, R597 += 1, R598 += 1 };
  s0 -> s6 [85, 85] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s0 -> s1 [86, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s1 -> s1 [0, 84] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s1 -> s7 [0, 65535] { R690 += 1 };
  s1 -> s1 [0, 65535] { R690 += 1, R640 += 1, R598 += 1 };
  s1 -> s9 [0, 65535] { R690 += 1, R640 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [85, 85] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s1 -> s1 [86, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s2 -> s1 [0, 84] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s2 -> s7 [0, 65535] { R690 += 1 };
  s2 -> s2 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1, R9 += 1 };
  s2 -> s10 [0, 65535] { R690 += 1, R640 += 1, R598 += 1 };
  s2 -> s9 [0, 65535] { R690 += 1, R640 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [85, 85] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s2 -> s1 [86, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s3 -> s1 [0, 84] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s3 -> s2 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R690 += 1, R639 += 1, R640 += 1 };
  s3 -> s4 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R567 += 1, R568 += 1 };
  s3 -> s5 [0, 65535] { R690 += 1, R640 += 1, R597 += 1, R598 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s6 [85, 85] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s3 -> s1 [86, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s4 -> s1 [0, 84] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s4 -> s7 [0, 65535] { R690 += 1 };
  s4 -> s2 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1, R9 += 1 };
  s4 -> s4 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R567 += 1, R568 += 1 };
  s4 -> s9 [0, 65535] { R690 += 1, R640 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s6 [85, 85] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s4 -> s1 [86, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s5 -> s1 [0, 84] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s5 -> s7 [0, 65535] { R690 += 1 };
  s5 -> s2 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1, R9 += 1 };
  s5 -> s4 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R567 += 1, R568 += 1 };
  s5 -> s5 [0, 65535] { R690 += 1, R640 += 1, R597 += 1, R598 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s6 [85, 85] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s5 -> s1 [86, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s6 -> s6 [0, 65535] { R690 += 1, R640 += 1, R598 += 1, R568 += 1 };
  s7 -> s7 [0, 65535] { R690 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s7 [0, 65535] { R690 += 1 };
  s9 -> s9 [0, 65535] { R690 += 1, R640 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s7 [0, 65535] { R690 += 1 };
  s10 -> s10 [0, 65535] { R690 += 1, R640 += 1, R598 += 1 };
  s10 -> s9 [0, 65535] { R690 += 1, R640 += 1 };
  s10 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s1, s7, s0, s10;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 90] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s0 -> s2 [0, 65535] { R692 += 1, R642 += 1, R599 += 1, R600 += 1 };
  s0 -> s3 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R537 += 1, R538 += 1 };
  s0 -> s4 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R569 += 1, R570 += 1 };
  s0 -> s5 [0, 65535] { R692 += 1, R641 += 1, R642 += 1 };
  s0 -> s0 [0, 65535] { R691 += 1, R692 += 1 };
  s0 -> s6 [91, 91] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s0 -> s1 [92, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s1 -> s8 [0, 65535] { R692 += 1, R642 += 1 };
  s1 -> s11 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1 };
  s1 -> s1 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s1 -> s10 [0, 65535] { R692 += 1, R642 += 1, R600 += 1 };
  s1 -> s9 [0, 65535] { R692 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 90] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s2 -> s2 [0, 65535] { R692 += 1, R642 += 1, R599 += 1, R600 += 1 };
  s2 -> s3 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R537 += 1, R538 += 1 };
  s2 -> s4 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R569 += 1, R570 += 1 };
  s2 -> s9 [0, 65535] { R692 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s6 [91, 91] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s2 -> s1 [92, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s3 -> s1 [0, 90] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s3 -> s3 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R537 += 1, R538 += 1 };
  s3 -> s8 [0, 65535] { R692 += 1, R642 += 1 };
  s3 -> s10 [0, 65535] { R692 += 1, R642 += 1, R600 += 1 };
  s3 -> s9 [0, 65535] { R692 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s6 [91, 91] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s3 -> s1 [92, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s4 -> s1 [0, 90] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s4 -> s3 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R537 += 1, R538 += 1 };
  s4 -> s8 [0, 65535] { R692 += 1, R642 += 1 };
  s4 -> s4 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R569 += 1, R570 += 1 };
  s4 -> s9 [0, 65535] { R692 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s6 [91, 91] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s4 -> s1 [92, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s5 -> s1 [0, 90] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s5 -> s2 [0, 65535] { R692 += 1, R642 += 1, R599 += 1, R600 += 1 };
  s5 -> s3 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R537 += 1, R538 += 1 };
  s5 -> s4 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R569 += 1, R570 += 1 };
  s5 -> s5 [0, 65535] { R692 += 1, R641 += 1, R642 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s6 [91, 91] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s5 -> s1 [92, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s6 -> s1 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1, R538 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R692 += 1, R642 += 1 };
  s8 -> s9 [0, 65535] { R692 += 1 };
  s8 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R692 += 1 };
  s9 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R692 += 1, R642 += 1 };
  s10 -> s10 [0, 65535] { R692 += 1, R642 += 1, R600 += 1 };
  s10 -> s9 [0, 65535] { R692 += 1 };
  s10 -> s7 [0, 65535];
  s11 -> s8 [0, 65535] { R692 += 1, R642 += 1 };
  s11 -> s11 [0, 65535] { R692 += 1, R642 += 1, R600 += 1, R570 += 1 };
  s11 -> s10 [0, 65535] { R692 += 1, R642 += 1, R600 += 1 };
  s11 -> s9 [0, 65535] { R692 += 1 };
  s11 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s1, s7, s0, s10, s11;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R539 += 1, R540 += 1 };
  s0 -> s2 [0, 65535] { R694 += 1, R644 += 1, R601 += 1, R602 += 1 };
  s0 -> s0 [0, 65535] { R693 += 1, R694 += 1 };
  s0 -> s3 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R571 += 1, R572 += 1 };
  s0 -> s4 [0, 65535] { R694 += 1, R643 += 1, R644 += 1 };
  s0 -> s5 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R540 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R539 += 1, R540 += 1 };
  s1 -> s6 [0, 65535] { R694 += 1, R644 += 1 };
  s1 -> s8 [0, 65535] { R694 += 1, R644 += 1, R602 += 1 };
  s1 -> s9 [0, 65535] { R694 += 1 };
  s1 -> s5 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R540 += 1, R7 += 1 };
  s1 -> s10 [0, 65535];
  s2 -> s1 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R539 += 1, R540 += 1 };
  s2 -> s2 [0, 65535] { R694 += 1, R644 += 1, R601 += 1, R602 += 1 };
  s2 -> s3 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R571 += 1, R572 += 1 };
  s2 -> s9 [0, 65535] { R694 += 1 };
  s2 -> s5 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R540 += 1, R7 += 1 };
  s2 -> s10 [0, 65535];
  s3 -> s1 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R539 += 1, R540 += 1 };
  s3 -> s6 [0, 65535] { R694 += 1, R644 += 1 };
  s3 -> s3 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R571 += 1, R572 += 1 };
  s3 -> s9 [0, 65535] { R694 += 1 };
  s3 -> s5 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R540 += 1, R7 += 1 };
  s3 -> s10 [0, 65535];
  s4 -> s1 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R539 += 1, R540 += 1 };
  s4 -> s2 [0, 65535] { R694 += 1, R644 += 1, R601 += 1, R602 += 1 };
  s4 -> s3 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R571 += 1, R572 += 1 };
  s4 -> s4 [0, 65535] { R694 += 1, R643 += 1, R644 += 1 };
  s4 -> s5 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R540 += 1, R7 += 1 };
  s4 -> s10 [0, 65535];
  s5 -> s6 [0, 65535] { R694 += 1, R644 += 1 };
  s5 -> s7 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1 };
  s5 -> s8 [0, 65535] { R694 += 1, R644 += 1, R602 += 1 };
  s5 -> s9 [0, 65535] { R694 += 1 };
  s5 -> s5 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1, R540 += 1, R7 += 1 };
  s5 -> s10 [0, 65535];
  s6 -> s6 [0, 65535] { R694 += 1, R644 += 1 };
  s6 -> s9 [0, 65535] { R694 += 1 };
  s6 -> s10 [0, 65535];
  s7 -> s6 [0, 65535] { R694 += 1, R644 += 1 };
  s7 -> s7 [0, 65535] { R694 += 1, R644 += 1, R602 += 1, R572 += 1 };
  s7 -> s8 [0, 65535] { R694 += 1, R644 += 1, R602 += 1 };
  s7 -> s9 [0, 65535] { R694 += 1 };
  s7 -> s10 [0, 65535];
  s8 -> s6 [0, 65535] { R694 += 1, R644 += 1 };
  s8 -> s8 [0, 65535] { R694 += 1, R644 += 1, R602 += 1 };
  s8 -> s9 [0, 65535] { R694 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R694 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s10;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 84] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s0 -> s0 [0, 65535] { R695 += 1, R696 += 1 };
  s0 -> s2 [0, 65535] { R696 += 1, R646 += 1, R603 += 1, R604 += 1 };
  s0 -> s3 [0, 65535] { R696 += 1, R645 += 1, R646 += 1 };
  s0 -> s4 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R573 += 1, R574 += 1 };
  s0 -> s5 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R551 += 1, R552 += 1 };
  s0 -> s1 [86, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s1 -> s1 [0, 84] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s1 -> s6 [0, 65535] { R696 += 1 };
  s1 -> s7 [0, 65535] { R696 += 1, R646 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1 };
  s1 -> s9 [0, 65535] { R696 += 1, R646 += 1, R604 += 1 };
  s1 -> s1 [86, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s2 -> s1 [0, 84] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s2 -> s6 [0, 65535] { R696 += 1 };
  s2 -> s2 [0, 65535] { R696 += 1, R646 += 1, R603 += 1, R604 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R573 += 1, R574 += 1 };
  s2 -> s5 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R551 += 1, R552 += 1 };
  s2 -> s1 [86, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s3 -> s1 [0, 84] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s3 -> s2 [0, 65535] { R696 += 1, R646 += 1, R603 += 1, R604 += 1 };
  s3 -> s3 [0, 65535] { R696 += 1, R645 += 1, R646 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R573 += 1, R574 += 1 };
  s3 -> s5 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R551 += 1, R552 += 1 };
  s3 -> s1 [86, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s4 -> s1 [0, 84] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s4 -> s6 [0, 65535] { R696 += 1 };
  s4 -> s7 [0, 65535] { R696 += 1, R646 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R573 += 1, R574 += 1 };
  s4 -> s5 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R551 += 1, R552 += 1 };
  s4 -> s1 [86, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s5 -> s1 [0, 84] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s5 -> s6 [0, 65535] { R696 += 1 };
  s5 -> s7 [0, 65535] { R696 += 1, R646 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R696 += 1, R646 += 1, R604 += 1 };
  s5 -> s5 [0, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R551 += 1, R552 += 1 };
  s5 -> s1 [86, 65535] { R696 += 1, R646 += 1, R604 += 1, R574 += 1, R552 += 1 };
  s6 -> s6 [0, 65535] { R696 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R696 += 1 };
  s7 -> s7 [0, 65535] { R696 += 1, R646 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s6 [0, 65535] { R696 += 1 };
  s9 -> s7 [0, 65535] { R696 += 1, R646 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R696 += 1, R646 += 1, R604 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R553 += 1, R554 += 1 };
  s0 -> s2 [0, 65535] { R698 += 1, R648 += 1, R605 += 1, R606 += 1 };
  s0 -> s3 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R575 += 1, R576 += 1 };
  s0 -> s0 [0, 65535] { R697 += 1, R698 += 1 };
  s0 -> s4 [0, 65535] { R698 += 1, R647 += 1, R648 += 1 };
  s0 -> s5 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R554 += 1, R534 += 1 };
  s1 -> s1 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R553 += 1, R554 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R698 += 1 };
  s1 -> s9 [0, 65535] { R698 += 1, R648 += 1, R606 += 1 };
  s1 -> s10 [0, 65535] { R698 += 1, R648 += 1 };
  s1 -> s5 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R554 += 1, R534 += 1 };
  s2 -> s1 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R553 += 1, R554 += 1 };
  s2 -> s2 [0, 65535] { R698 += 1, R648 += 1, R605 += 1, R606 += 1 };
  s2 -> s3 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R575 += 1, R576 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R698 += 1 };
  s2 -> s5 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R554 += 1, R534 += 1 };
  s3 -> s1 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R553 += 1, R554 += 1 };
  s3 -> s3 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R575 += 1, R576 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R698 += 1 };
  s3 -> s10 [0, 65535] { R698 += 1, R648 += 1 };
  s3 -> s5 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R554 += 1, R534 += 1 };
  s4 -> s1 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R553 += 1, R554 += 1 };
  s4 -> s2 [0, 65535] { R698 += 1, R648 += 1, R605 += 1, R606 += 1 };
  s4 -> s3 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R575 += 1, R576 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R698 += 1, R647 += 1, R648 += 1 };
  s4 -> s5 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R554 += 1, R534 += 1 };
  s5 -> s6 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R698 += 1 };
  s5 -> s9 [0, 65535] { R698 += 1, R648 += 1, R606 += 1 };
  s5 -> s10 [0, 65535] { R698 += 1, R648 += 1 };
  s5 -> s5 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1, R554 += 1, R534 += 1 };
  s6 -> s6 [0, 65535] { R698 += 1, R648 += 1, R606 += 1, R576 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R698 += 1 };
  s6 -> s9 [0, 65535] { R698 += 1, R648 += 1, R606 += 1 };
  s6 -> s10 [0, 65535] { R698 += 1, R648 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R698 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R698 += 1 };
  s9 -> s9 [0, 65535] { R698 += 1, R648 += 1, R606 += 1 };
  s9 -> s10 [0, 65535] { R698 += 1, R648 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R698 += 1 };
  s10 -> s10 [0, 65535] { R698 += 1, R648 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s10;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 85] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s0 -> s2 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R577 += 1, R578 += 1 };
  s0 -> s0 [0, 65535] { R699 += 1, R700 += 1 };
  s0 -> s3 [0, 65535] { R700 += 1, R649 += 1, R650 += 1 };
  s0 -> s4 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R555 += 1, R556 += 1 };
  s0 -> s5 [0, 65535] { R700 += 1, R650 += 1, R607 += 1, R608 += 1 };
  s0 -> s1 [91, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s1 -> s1 [0, 85] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s1 -> s8 [0, 65535] { R700 += 1, R650 += 1, R608 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R700 += 1 };
  s1 -> s9 [0, 65535] { R700 += 1, R650 += 1 };
  s1 -> s1 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1 };
  s1 -> s1 [91, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s2 -> s1 [0, 85] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R577 += 1, R578 += 1 };
  s2 -> s7 [0, 65535] { R700 += 1 };
  s2 -> s9 [0, 65535] { R700 += 1, R650 += 1 };
  s2 -> s4 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R555 += 1, R556 += 1 };
  s2 -> s1 [91, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s3 -> s1 [0, 85] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R577 += 1, R578 += 1 };
  s3 -> s3 [0, 65535] { R700 += 1, R649 += 1, R650 += 1 };
  s3 -> s4 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R555 += 1, R556 += 1 };
  s3 -> s5 [0, 65535] { R700 += 1, R650 += 1, R607 += 1, R608 += 1 };
  s3 -> s1 [91, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s4 -> s1 [0, 85] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s4 -> s8 [0, 65535] { R700 += 1, R650 += 1, R608 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R700 += 1 };
  s4 -> s9 [0, 65535] { R700 += 1, R650 += 1 };
  s4 -> s4 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R555 += 1, R556 += 1 };
  s4 -> s1 [91, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s5 -> s1 [0, 85] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s2 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R577 += 1, R578 += 1 };
  s5 -> s7 [0, 65535] { R700 += 1 };
  s5 -> s4 [0, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R555 += 1, R556 += 1 };
  s5 -> s5 [0, 65535] { R700 += 1, R650 += 1, R607 += 1, R608 += 1 };
  s5 -> s1 [91, 65535] { R700 += 1, R650 += 1, R608 += 1, R578 += 1, R556 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R700 += 1 };
  s8 -> s8 [0, 65535] { R700 += 1, R650 += 1, R608 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R700 += 1 };
  s8 -> s9 [0, 65535] { R700 += 1, R650 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s7 [0, 65535] { R700 += 1 };
  s9 -> s9 [0, 65535] { R700 += 1, R650 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R558 += 1, R535 += 1 };
  s0 -> s0 [0, 65535] { R701 += 1, R702 += 1 };
  s0 -> s2 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R557 += 1, R558 += 1 };
  s0 -> s3 [0, 65535] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s0 -> s4 [0, 65535] { R702 += 1, R651 += 1, R652 += 1 };
  s0 -> s5 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R579 += 1, R580 += 1 };
  s1 -> s1 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R558 += 1, R535 += 1 };
  s1 -> s9 [0, 65535] { R702 += 1, R652 += 1, R610 += 1 };
  s1 -> s6 [0, 65535] { R702 += 1 };
  s1 -> s7 [0, 65535] { R702 += 1, R652 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s10 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1 };
  s2 -> s1 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R558 += 1, R535 += 1 };
  s2 -> s9 [0, 65535] { R702 += 1, R652 += 1, R610 += 1 };
  s2 -> s6 [0, 65535] { R702 += 1 };
  s2 -> s7 [0, 65535] { R702 += 1, R652 += 1 };
  s2 -> s2 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R557 += 1, R558 += 1 };
  s2 -> s8 [0, 65535];
  s3 -> s1 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R558 += 1, R535 += 1 };
  s3 -> s6 [0, 65535] { R702 += 1 };
  s3 -> s2 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R557 += 1, R558 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R579 += 1, R580 += 1 };
  s4 -> s1 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R558 += 1, R535 += 1 };
  s4 -> s2 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R557 += 1, R558 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s3 [0, 65535] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s4 -> s4 [0, 65535] { R702 += 1, R651 += 1, R652 += 1 };
  s4 -> s5 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R579 += 1, R580 += 1 };
  s5 -> s1 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R558 += 1, R535 += 1 };
  s5 -> s6 [0, 65535] { R702 += 1 };
  s5 -> s7 [0, 65535] { R702 += 1, R652 += 1 };
  s5 -> s2 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1, R557 += 1, R558 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R579 += 1, R580 += 1 };
  s6 -> s6 [0, 65535] { R702 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R702 += 1 };
  s7 -> s7 [0, 65535] { R702 += 1, R652 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R702 += 1, R652 += 1, R610 += 1 };
  s9 -> s6 [0, 65535] { R702 += 1 };
  s9 -> s7 [0, 65535] { R702 += 1, R652 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s9 [0, 65535] { R702 += 1, R652 += 1, R610 += 1 };
  s10 -> s6 [0, 65535] { R702 += 1 };
  s10 -> s7 [0, 65535] { R702 += 1, R652 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R580 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s10;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 84] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s0 -> s2 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R581 += 1, R582 += 1 };
  s0 -> s0 [0, 65535] { R703 += 1, R704 += 1 };
  s0 -> s3 [0, 65535] { R704 += 1, R654 += 1, R611 += 1, R612 += 1 };
  s0 -> s4 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R559 += 1, R560 += 1 };
  s0 -> s5 [0, 65535] { R704 += 1, R653 += 1, R654 += 1 };
  s0 -> s6 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s0 -> s7 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s0 -> s1 [91, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s1 -> s1 [0, 84] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s1 -> s1 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s9 [0, 65535] { R704 += 1, R654 += 1, R612 += 1 };
  s1 -> s10 [0, 65535] { R704 += 1 };
  s1 -> s11 [0, 65535] { R704 += 1, R654 += 1 };
  s1 -> s6 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s1 -> s7 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s1 -> s1 [91, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s2 -> s1 [0, 84] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R581 += 1, R582 += 1 };
  s2 -> s10 [0, 65535] { R704 += 1 };
  s2 -> s4 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R559 += 1, R560 += 1 };
  s2 -> s11 [0, 65535] { R704 += 1, R654 += 1 };
  s2 -> s6 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s2 -> s7 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s2 -> s1 [91, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s3 -> s1 [0, 84] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s2 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R581 += 1, R582 += 1 };
  s3 -> s3 [0, 65535] { R704 += 1, R654 += 1, R611 += 1, R612 += 1 };
  s3 -> s10 [0, 65535] { R704 += 1 };
  s3 -> s4 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R559 += 1, R560 += 1 };
  s3 -> s6 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s3 -> s7 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s3 -> s1 [91, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s4 -> s1 [0, 84] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R704 += 1, R654 += 1, R612 += 1 };
  s4 -> s10 [0, 65535] { R704 += 1 };
  s4 -> s4 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R559 += 1, R560 += 1 };
  s4 -> s11 [0, 65535] { R704 += 1, R654 += 1 };
  s4 -> s6 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s4 -> s7 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s4 -> s1 [91, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s5 -> s1 [0, 84] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s2 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R581 += 1, R582 += 1 };
  s5 -> s3 [0, 65535] { R704 += 1, R654 += 1, R611 += 1, R612 += 1 };
  s5 -> s4 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R559 += 1, R560 += 1 };
  s5 -> s5 [0, 65535] { R704 += 1, R653 += 1, R654 += 1 };
  s5 -> s6 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s5 -> s7 [85, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s5 -> s1 [91, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s6 -> s6 [0, 85] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R704 += 1, R654 += 1, R612 += 1 };
  s6 -> s10 [0, 65535] { R704 += 1 };
  s6 -> s11 [0, 65535] { R704 += 1, R654 += 1 };
  s6 -> s6 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1 };
  s6 -> s6 [91, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1, R560 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R704 += 1, R654 += 1, R612 += 1 };
  s7 -> s10 [0, 65535] { R704 += 1 };
  s7 -> s11 [0, 65535] { R704 += 1, R654 += 1 };
  s7 -> s7 [0, 65535] { R704 += 1, R654 += 1, R612 += 1, R582 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R704 += 1, R654 += 1, R612 += 1 };
  s9 -> s10 [0, 65535] { R704 += 1 };
  s9 -> s11 [0, 65535] { R704 += 1, R654 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [0, 65535] { R704 += 1 };
  s11 -> s8 [0, 65535];
  s11 -> s10 [0, 65535] { R704 += 1 };
  s11 -> s11 [0, 65535] { R704 += 1, R654 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
};
constraint R2 = R556 && R3 - R582 = 1 && R4 = R612 && R5 = R550 && R6 = R704 && R13 = 0 && R14 = R582 && R361 = 0 && R362 = R654 && R537 = 0 && R538 = 1 && R539 = 0 && R540 = 1 && R541 = 0 && R543 = 0 && R545 = 0 && R546 = 14 && R547 = 0 && R548 = 14 && R549 - R654 = 1 && R551 = 0 && R552 = R556 && R553 = 0 && R554 = R556 && R555 = 0 && R561 = 0 && R562 = R582 && R563 = 0 && R564 = R582 && R565 = 0 && R566 = R582 && R567 = 0 && R568 = R582 && R569 = 0 && R570 = R582 && R571 = 0 && R572 = R582 && R573 = 0 && R574 = R582 && R575 = 0 && R576 = R582 && R577 = 0 && R578 = R582 && R579 = 0 && R580 = R582 && R581 = 0 && R583 = 15 && R584 = R612 && R585 = 15 && R586 = R612 && R587 = 15 && R588 = R612 && R589 = 15 && R590 = R612 && R591 = 15 && R592 = R612 && R593 = 15 && R594 = R612 && R595 = 15 && R596 = R612 && R597 = 15 && R598 = R612 && R599 = 15 && R600 = R612 && R601 = 15 && R602 = R612 && R603 = 15 && R604 = R612 && R605 = 15 && R606 = R612 && R607 = 15 && R608 = R612 && R609 = 15 && R610 = R612 && R611 = 15 && R613 = 0 && R614 = R654 && R615 = 0 && R616 = R654 && R617 = 0 && R618 = R654 && R619 = 0 && R620 = R654 && R621 = 0 && R622 = R654 && R623 = 0 && R624 = R654 && R625 = 0 && R626 = R654 && R627 = 0 && R628 = R654 && R629 = 0 && R630 = R654 && R631 = 0 && R632 = R654 && R633 = 0 && R634 = R654 && R635 = 0 && R636 = R654 && R637 = 0 && R638 = R654 && R639 = 0 && R640 = R654 && R641 = 0 && R642 = R654 && R643 = 0 && R644 = R654 && R645 = 0 && R646 = R654 && R647 = 0 && R648 = R654 && R649 = 0 && R650 = R654 && R651 = 0 && R652 = R654 && R653 = 0 && R655 = 10 && R656 = R704 && R657 = 10 && R658 = R704 && R659 = 10 && R660 = R704 && R661 = 10 && R662 = R704 && R663 = 10 && R664 = R704 && R665 = 10 && R666 = R704 && R667 = 10 && R668 = R704 && R669 = 10 && R670 = R704 && R671 = 10 && R672 = R704 && R673 = 10 && R674 = R704 && R675 = 10 && R676 = R704 && R677 = 10 && R678 = R704 && R679 = 10 && R680 = R704 && R681 = 10 && R682 = R704 && R683 = 10 && R684 = R704 && R685 = 10 && R686 = R704 && R687 = 10 && R688 = R704 && R689 = 10 && R690 = R704 && R691 = 10 && R692 = R704 && R693 = 10 && R694 = R704 && R695 = 10 && R696 = R704 && R697 = 10 && R698 = R704 && R699 = 10 && R700 = R704 && R701 = 10 && R702 = R704 && R703 = 10 && R0 != 0 && R1 != 0 && R8 < 1 && R9 < 1 && R654 < R550 && 0 < R556 && -1 < R582 && 14 < R612 && -1 < R654 && 9 < R704 && (R542 != R612 || R612 < 25) && (R542 != 24 || 23 < R612) && (R544 != R612 || R612 < 25) && (R544 != 24 || 23 < R612) && (R535 = 0 || (R557 = 0 && R558 = 0)) && (R535 = 0 || (R559 = 0 && R560 = 0)) && (R542 = R612 || R542 = 24) && (R544 = R612 || R544 = 24);
// End of Parikh automata intersection problem
