// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R137, R138, R2, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R3, R4, R5, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R238 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s0 -> s2 [46, 46] { R238 += 1 };
  s0 -> s3 [47, 47] { R238 += 1 };
  s0 -> s1 [48, 65535] { R238 += 1 };
  s1 -> s1 [0, 45] { R238 += 1 };
  s1 -> s2 [46, 46] { R238 += 1 };
  s1 -> s3 [47, 47] { R238 += 1 };
  s1 -> s1 [48, 65535] { R238 += 1 };
  s2 -> s1 [0, 45] { R238 += 1 };
  s2 -> s2 [46, 46] { R238 += 1 };
  s2 -> s3 [47, 47] { R238 += 1 };
  s2 -> s1 [48, 114] { R238 += 1 };
  s2 -> s8 [115, 115] { R238 += 1 };
  s2 -> s1 [116, 65535] { R238 += 1 };
  s3 -> s3 [0, 45] { R238 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R238 += 1 };
  s3 -> s3 [47, 65535] { R238 += 1 };
  s4 -> s3 [0, 45] { R238 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R238 += 1 };
  s4 -> s3 [47, 114] { R238 += 1 };
  s4 -> s5 [115, 115] { R238 += 1 };
  s4 -> s3 [116, 65535] { R238 += 1 };
  s5 -> s3 [0, 45] { R238 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R238 += 1 };
  s5 -> s3 [47, 110] { R238 += 1 };
  s5 -> s6 [111, 111] { R238 += 1 };
  s5 -> s3 [112, 65535] { R238 += 1 };
  s6 -> s3 [0, 45] { R238 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R238 += 1 };
  s6 -> s3 [47, 98] { R238 += 1 };
  s6 -> s7 [99, 99] { R238 += 1 };
  s6 -> s3 [100, 65535] { R238 += 1 };
  s7 -> s3 [0, 45] { R238 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R238 += 1 };
  s7 -> s3 [47, 106] { R238 += 1 };
  s7 -> s3 [108, 65535] { R238 += 1 };
  s8 -> s1 [0, 45] { R238 += 1 };
  s8 -> s2 [46, 46] { R238 += 1 };
  s8 -> s3 [47, 47] { R238 += 1 };
  s8 -> s1 [48, 110] { R238 += 1 };
  s8 -> s9 [111, 111] { R238 += 1 };
  s8 -> s1 [112, 65535] { R238 += 1 };
  s9 -> s1 [0, 45] { R238 += 1 };
  s9 -> s2 [46, 46] { R238 += 1 };
  s9 -> s3 [47, 47] { R238 += 1 };
  s9 -> s1 [48, 98] { R238 += 1 };
  s9 -> s10 [99, 99] { R238 += 1 };
  s9 -> s1 [100, 65535] { R238 += 1 };
  s10 -> s1 [0, 45] { R238 += 1 };
  s10 -> s2 [46, 46] { R238 += 1 };
  s10 -> s3 [47, 47] { R238 += 1 };
  s10 -> s1 [48, 106] { R238 += 1 };
  s10 -> s1 [108, 65535] { R238 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R240 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s1 -> s1 [0, 65535] { R240 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R242 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s0 -> s2 [0, 65535] { R242 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [47, 47] { R242 += 1 };
  s0 -> s1 [48, 65535] { R242 += 1, R138 += 1 };
  s1 -> s1 [0, 46] { R242 += 1, R138 += 1 };
  s1 -> s3 [47, 47] { R242 += 1 };
  s1 -> s1 [48, 65535] { R242 += 1, R138 += 1 };
  s2 -> s1 [0, 46] { R242 += 1, R138 += 1 };
  s2 -> s2 [0, 65535] { R242 += 1, R137 += 1, R138 += 1 };
  s2 -> s3 [47, 47] { R242 += 1 };
  s2 -> s1 [48, 65535] { R242 += 1, R138 += 1 };
  s3 -> s3 [0, 65535] { R242 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R244 += 1, R205 += 1, R206 += 1 };
  s0 -> s2 [0, 65535] { R244 += 1, R206 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s1 -> s1 [0, 65535] { R244 += 1, R205 += 1, R206 += 1 };
  s1 -> s2 [0, 65535] { R244 += 1, R206 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R244 += 1, R206 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R244 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R244 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R246 += 1, R220 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s0 -> s2 [0, 65535] { R246 += 1, R219 += 1, R220 += 1 };
  s0 -> s3 [64, 64] { R246 += 1, R220 += 1 };
  s0 -> s1 [65, 65535] { R246 += 1, R220 += 1 };
  s1 -> s1 [0, 63] { R246 += 1, R220 += 1 };
  s1 -> s3 [64, 64] { R246 += 1, R220 += 1 };
  s1 -> s1 [65, 65535] { R246 += 1, R220 += 1 };
  s2 -> s1 [0, 63] { R246 += 1, R220 += 1 };
  s2 -> s2 [0, 65535] { R246 += 1, R219 += 1, R220 += 1 };
  s2 -> s3 [64, 64] { R246 += 1, R220 += 1 };
  s2 -> s1 [65, 65535] { R246 += 1, R220 += 1 };
  s3 -> s4 [0, 65535] { R246 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R246 += 1, R220 += 1 };
  s4 -> s4 [0, 65535] { R246 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R248 += 1, R222 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s2 [0, 65535] { R248 += 1, R221 += 1, R222 += 1 };
  s1 -> s4 [0, 65535] { R248 += 1 };
  s1 -> s1 [0, 65535] { R248 += 1, R222 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R248 += 1, R222 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R248 += 1, R221 += 1, R222 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R248 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R250 += 1, R224 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s0 -> s2 [0, 65535] { R250 += 1, R223 += 1, R224 += 1 };
  s1 -> s4 [0, 65535] { R250 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R250 += 1, R224 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R250 += 1, R224 += 1 };
  s2 -> s2 [0, 65535] { R250 += 1, R223 += 1, R224 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R250 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 57] { R252 += 1, R226 += 1, R208 += 1 };
  s0 -> s2 [0, 65535] { R252 += 1, R226 += 1, R207 += 1, R208 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s0 -> s3 [0, 65535] { R252 += 1, R225 += 1, R226 += 1 };
  s0 -> s4 [58, 58] { R252 += 1, R226 += 1, R208 += 1 };
  s0 -> s1 [59, 63] { R252 += 1, R226 += 1, R208 += 1 };
  s0 -> s1 [65, 65535] { R252 += 1, R226 += 1, R208 += 1 };
  s1 -> s1 [0, 57] { R252 += 1, R226 += 1, R208 += 1 };
  s1 -> s4 [58, 58] { R252 += 1, R226 += 1, R208 += 1 };
  s1 -> s1 [59, 63] { R252 += 1, R226 += 1, R208 += 1 };
  s1 -> s1 [65, 65535] { R252 += 1, R226 += 1, R208 += 1 };
  s2 -> s1 [0, 57] { R252 += 1, R226 += 1, R208 += 1 };
  s2 -> s2 [0, 65535] { R252 += 1, R226 += 1, R207 += 1, R208 += 1 };
  s2 -> s4 [58, 58] { R252 += 1, R226 += 1, R208 += 1 };
  s2 -> s1 [59, 63] { R252 += 1, R226 += 1, R208 += 1 };
  s2 -> s1 [65, 65535] { R252 += 1, R226 += 1, R208 += 1 };
  s3 -> s1 [0, 57] { R252 += 1, R226 += 1, R208 += 1 };
  s3 -> s2 [0, 65535] { R252 += 1, R226 += 1, R207 += 1, R208 += 1 };
  s3 -> s3 [0, 65535] { R252 += 1, R225 += 1, R226 += 1 };
  s3 -> s4 [58, 58] { R252 += 1, R226 += 1, R208 += 1 };
  s3 -> s1 [59, 63] { R252 += 1, R226 += 1, R208 += 1 };
  s3 -> s1 [65, 65535] { R252 += 1, R226 += 1, R208 += 1 };
  s4 -> s4 [0, 63] { R252 += 1, R226 += 1, R208 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R252 += 1, R226 += 1 };
  s4 -> s6 [0, 65535] { R252 += 1 };
  s4 -> s4 [65, 65535] { R252 += 1, R226 += 1, R208 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R252 += 1 };
  accepting s4, s5, s6;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R254 += 1, R228 += 1, R210 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R253 += 1, R254 += 1 };
  s0 -> s2 [0, 65535] { R254 += 1, R227 += 1, R228 += 1 };
  s0 -> s3 [0, 65535] { R254 += 1, R228 += 1, R209 += 1, R210 += 1 };
  s1 -> s6 [0, 65535] { R254 += 1, R228 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R254 += 1 };
  s1 -> s1 [0, 65535] { R254 += 1, R228 += 1, R210 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R254 += 1, R228 += 1, R210 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R254 += 1, R227 += 1, R228 += 1 };
  s2 -> s3 [0, 65535] { R254 += 1, R228 += 1, R209 += 1, R210 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R254 += 1 };
  s3 -> s1 [0, 65535] { R254 += 1, R228 += 1, R210 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R254 += 1, R228 += 1, R209 += 1, R210 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R254 += 1 };
  s6 -> s6 [0, 65535] { R254 += 1, R228 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R254 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R255 += 1, R256 += 1 };
  s0 -> s2 [0, 65535] { R256 += 1, R230 += 1, R211 += 1, R212 += 1 };
  s0 -> s3 [0, 65535] { R256 += 1, R230 += 1, R212 += 1, R7 += 1, R8 += 1 };
  s0 -> s4 [0, 65535] { R256 += 1, R229 += 1, R230 += 1 };
  s0 -> s5 [58, 58] { R256 += 1, R230 += 1, R212 += 1 };
  s0 -> s1 [59, 65535] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s1 -> s1 [0, 57] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s1 -> s5 [58, 58] { R256 += 1, R230 += 1, R212 += 1 };
  s1 -> s1 [59, 65535] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s2 -> s1 [0, 57] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R256 += 1, R230 += 1, R211 += 1, R212 += 1 };
  s2 -> s3 [0, 65535] { R256 += 1, R230 += 1, R212 += 1, R7 += 1, R8 += 1 };
  s2 -> s5 [58, 58] { R256 += 1, R230 += 1, R212 += 1 };
  s2 -> s1 [59, 65535] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s3 -> s1 [0, 57] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R256 += 1, R230 += 1, R212 += 1, R7 += 1, R8 += 1 };
  s3 -> s5 [58, 58] { R256 += 1, R230 += 1, R212 += 1 };
  s3 -> s1 [59, 65535] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s4 -> s1 [0, 57] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s4 -> s2 [0, 65535] { R256 += 1, R230 += 1, R211 += 1, R212 += 1 };
  s4 -> s3 [0, 65535] { R256 += 1, R230 += 1, R212 += 1, R7 += 1, R8 += 1 };
  s4 -> s4 [0, 65535] { R256 += 1, R229 += 1, R230 += 1 };
  s4 -> s5 [58, 58] { R256 += 1, R230 += 1, R212 += 1 };
  s4 -> s1 [59, 65535] { R256 += 1, R230 += 1, R212 += 1, R8 += 1 };
  s5 -> s5 [0, 65535] { R256 += 1, R230 += 1, R212 += 1 };
  s5 -> s6 [0, 65535] { R256 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R256 += 1, R230 += 1 };
  s6 -> s6 [0, 65535] { R256 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R256 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R256 += 1, R230 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R257 += 1, R258 += 1 };
  s0 -> s1 [0, 65535] { R258 += 1, R232 += 1, R213 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R258 += 1, R231 += 1, R232 += 1 };
  s0 -> s3 [0, 65535] { R258 += 1, R232 += 1, R214 += 1 };
  s1 -> s5 [0, 65535] { R258 += 1 };
  s1 -> s1 [0, 65535] { R258 += 1, R232 += 1, R213 += 1, R214 += 1 };
  s1 -> s3 [0, 65535] { R258 += 1, R232 += 1, R214 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R258 += 1, R232 += 1, R213 += 1, R214 += 1 };
  s2 -> s2 [0, 65535] { R258 += 1, R231 += 1, R232 += 1 };
  s2 -> s3 [0, 65535] { R258 += 1, R232 += 1, R214 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R258 += 1, R232 += 1 };
  s3 -> s5 [0, 65535] { R258 += 1 };
  s3 -> s3 [0, 65535] { R258 += 1, R232 += 1, R214 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R258 += 1, R232 += 1 };
  s4 -> s5 [0, 65535] { R258 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R258 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 36] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s0 -> s2 [0, 65535] { R260 += 1, R234 += 1, R216 += 1, R201 += 1, R202 += 1 };
  s0 -> s3 [0, 65535] { R260 += 1, R233 += 1, R234 += 1 };
  s0 -> s0 [0, 65535] { R259 += 1, R260 += 1 };
  s0 -> s4 [0, 65535] { R260 += 1, R234 += 1, R215 += 1, R216 += 1 };
  s0 -> s1 [38, 42] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s0 -> s1 [44, 65535] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s1 -> s1 [0, 36] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s1 -> s1 [0, 65535] { R260 += 1, R234 += 1, R216 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R260 += 1, R234 += 1 };
  s1 -> s6 [0, 65535] { R260 += 1 };
  s1 -> s1 [38, 42] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s1 -> s1 [44, 65535] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s2 -> s1 [0, 36] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R260 += 1, R234 += 1, R216 += 1, R201 += 1, R202 += 1 };
  s2 -> s7 [0, 65535] { R260 += 1, R234 += 1 };
  s2 -> s6 [0, 65535] { R260 += 1 };
  s2 -> s1 [38, 42] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s2 -> s1 [44, 65535] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s3 -> s1 [0, 36] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R260 += 1, R234 += 1, R216 += 1, R201 += 1, R202 += 1 };
  s3 -> s3 [0, 65535] { R260 += 1, R233 += 1, R234 += 1 };
  s3 -> s4 [0, 65535] { R260 += 1, R234 += 1, R215 += 1, R216 += 1 };
  s3 -> s1 [38, 42] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s3 -> s1 [44, 65535] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s4 -> s1 [0, 36] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R260 += 1, R234 += 1, R216 += 1, R201 += 1, R202 += 1 };
  s4 -> s4 [0, 65535] { R260 += 1, R234 += 1, R215 += 1, R216 += 1 };
  s4 -> s6 [0, 65535] { R260 += 1 };
  s4 -> s1 [38, 42] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s4 -> s1 [44, 65535] { R260 += 1, R234 += 1, R216 += 1, R202 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R260 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R260 += 1, R234 += 1 };
  s7 -> s6 [0, 65535] { R260 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R261 += 1, R262 += 1 };
  s0 -> s1 [0, 65535] { R262 += 1, R236 += 1, R218 += 1, R204 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R262 += 1, R236 += 1, R218 += 1, R203 += 1, R204 += 1 };
  s0 -> s3 [0, 65535] { R262 += 1, R236 += 1, R217 += 1, R218 += 1 };
  s0 -> s4 [0, 65535] { R262 += 1, R235 += 1, R236 += 1 };
  s1 -> s6 [0, 65535] { R262 += 1 };
  s1 -> s8 [0, 65535] { R262 += 1, R236 += 1, R218 += 1 };
  s1 -> s1 [0, 65535] { R262 += 1, R236 += 1, R218 += 1, R204 += 1, R0 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R262 += 1, R236 += 1 };
  s2 -> s6 [0, 65535] { R262 += 1 };
  s2 -> s1 [0, 65535] { R262 += 1, R236 += 1, R218 += 1, R204 += 1, R0 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R262 += 1, R236 += 1 };
  s2 -> s2 [0, 65535] { R262 += 1, R236 += 1, R218 += 1, R203 += 1, R204 += 1 };
  s3 -> s6 [0, 65535] { R262 += 1 };
  s3 -> s1 [0, 65535] { R262 += 1, R236 += 1, R218 += 1, R204 += 1, R0 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R262 += 1, R236 += 1, R218 += 1, R203 += 1, R204 += 1 };
  s3 -> s3 [0, 65535] { R262 += 1, R236 += 1, R217 += 1, R218 += 1 };
  s4 -> s1 [0, 65535] { R262 += 1, R236 += 1, R218 += 1, R204 += 1, R0 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R262 += 1, R236 += 1, R218 += 1, R203 += 1, R204 += 1 };
  s4 -> s3 [0, 65535] { R262 += 1, R236 += 1, R217 += 1, R218 += 1 };
  s4 -> s4 [0, 65535] { R262 += 1, R235 += 1, R236 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R262 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R262 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R262 += 1, R236 += 1 };
  s8 -> s6 [0, 65535] { R262 += 1 };
  s8 -> s8 [0, 65535] { R262 += 1, R236 += 1, R218 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R262 += 1, R236 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R2 - R204 = 1 && R3 = 9 && R4 = R206 && R5 = R262 && R7 = 0 && R8 = R204 && R137 = 0 && R138 = R236 && R201 = 0 && R202 = R204 && R203 = 0 && R205 - R236 = 1 && R207 = 0 && R208 = 8 && R209 = 0 && R210 = 8 && R211 = 0 && R212 = 8 && R213 = 0 && R214 = 8 && R215 = 0 && R216 = 8 && R217 = 0 && R218 = 8 && R219 = 0 && R220 = R236 && R221 = 0 && R222 = R236 && R223 = 0 && R224 = R236 && R225 = 0 && R226 = R236 && R227 = 0 && R228 = R236 && R229 = 0 && R230 = R236 && R231 = 0 && R232 = R236 && R233 = 0 && R234 = R236 && R235 = 0 && R237 = 10 && R238 = R262 && R239 = 10 && R240 = R262 && R241 = 10 && R242 = R262 && R243 = 10 && R244 = R262 && R245 = 10 && R246 = R262 && R247 = 10 && R248 = R262 && R249 = 10 && R250 = R262 && R251 = 10 && R252 = R262 && R253 = 10 && R254 = R262 && R255 = 10 && R256 = R262 && R257 = 10 && R258 = R262 && R259 = 10 && R260 = R262 && R261 = 10 && R0 != 0 && R1 != 0 && -1 < R204 && R236 < R206 && -1 < R236 && 9 < R262;
// End of Parikh automata intersection problem
