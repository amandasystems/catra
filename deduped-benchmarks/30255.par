// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R14, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R172 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [46, 46] { R172 += 1 };
  s0 -> s3 [47, 47] { R172 += 1 };
  s0 -> s1 [48, 65535] { R172 += 1 };
  s1 -> s1 [0, 45] { R172 += 1 };
  s1 -> s2 [46, 46] { R172 += 1 };
  s1 -> s3 [47, 47] { R172 += 1 };
  s1 -> s1 [48, 65535] { R172 += 1 };
  s2 -> s1 [0, 45] { R172 += 1 };
  s2 -> s2 [46, 46] { R172 += 1 };
  s2 -> s3 [47, 47] { R172 += 1 };
  s2 -> s1 [48, 114] { R172 += 1 };
  s2 -> s8 [115, 115] { R172 += 1 };
  s2 -> s1 [116, 65535] { R172 += 1 };
  s3 -> s3 [0, 45] { R172 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R172 += 1 };
  s3 -> s3 [47, 65535] { R172 += 1 };
  s4 -> s3 [0, 45] { R172 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R172 += 1 };
  s4 -> s3 [47, 114] { R172 += 1 };
  s4 -> s5 [115, 115] { R172 += 1 };
  s4 -> s3 [116, 65535] { R172 += 1 };
  s5 -> s3 [0, 45] { R172 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R172 += 1 };
  s5 -> s3 [47, 110] { R172 += 1 };
  s5 -> s6 [111, 111] { R172 += 1 };
  s5 -> s3 [112, 65535] { R172 += 1 };
  s6 -> s3 [0, 45] { R172 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R172 += 1 };
  s6 -> s3 [47, 98] { R172 += 1 };
  s6 -> s7 [99, 99] { R172 += 1 };
  s6 -> s3 [100, 65535] { R172 += 1 };
  s7 -> s3 [0, 45] { R172 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R172 += 1 };
  s7 -> s3 [47, 106] { R172 += 1 };
  s7 -> s3 [108, 65535] { R172 += 1 };
  s8 -> s1 [0, 45] { R172 += 1 };
  s8 -> s2 [46, 46] { R172 += 1 };
  s8 -> s3 [47, 47] { R172 += 1 };
  s8 -> s1 [48, 110] { R172 += 1 };
  s8 -> s9 [111, 111] { R172 += 1 };
  s8 -> s1 [112, 65535] { R172 += 1 };
  s9 -> s1 [0, 45] { R172 += 1 };
  s9 -> s2 [46, 46] { R172 += 1 };
  s9 -> s3 [47, 47] { R172 += 1 };
  s9 -> s1 [48, 98] { R172 += 1 };
  s9 -> s10 [99, 99] { R172 += 1 };
  s9 -> s1 [100, 65535] { R172 += 1 };
  s10 -> s1 [0, 45] { R172 += 1 };
  s10 -> s2 [46, 46] { R172 += 1 };
  s10 -> s3 [47, 47] { R172 += 1 };
  s10 -> s1 [48, 106] { R172 += 1 };
  s10 -> s1 [108, 65535] { R172 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R174 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s1 -> s1 [0, 65535] { R174 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R176 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R13 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s3 [47, 47] { R176 += 1 };
  s0 -> s1 [48, 65535] { R176 += 1, R14 += 1 };
  s1 -> s1 [0, 46] { R176 += 1, R14 += 1 };
  s1 -> s3 [47, 47] { R176 += 1 };
  s1 -> s1 [48, 65535] { R176 += 1, R14 += 1 };
  s2 -> s1 [0, 46] { R176 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R176 += 1, R13 += 1, R14 += 1 };
  s2 -> s3 [47, 47] { R176 += 1 };
  s2 -> s1 [48, 65535] { R176 += 1, R14 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R176 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 42] { R178 += 1, R140 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R139 += 1, R140 += 1 };
  s0 -> s3 [43, 43] { R178 += 1, R140 += 1 };
  s0 -> s1 [44, 45] { R178 += 1, R140 += 1 };
  s0 -> s1 [47, 62] { R178 += 1, R140 += 1 };
  s0 -> s1 [64, 65535] { R178 += 1, R140 += 1 };
  s1 -> s1 [0, 42] { R178 += 1, R140 += 1 };
  s1 -> s3 [43, 43] { R178 += 1, R140 += 1 };
  s1 -> s1 [44, 45] { R178 += 1, R140 += 1 };
  s1 -> s1 [47, 62] { R178 += 1, R140 += 1 };
  s1 -> s1 [64, 65535] { R178 += 1, R140 += 1 };
  s2 -> s1 [0, 42] { R178 += 1, R140 += 1 };
  s2 -> s2 [0, 65535] { R178 += 1, R139 += 1, R140 += 1 };
  s2 -> s3 [43, 43] { R178 += 1, R140 += 1 };
  s2 -> s1 [44, 45] { R178 += 1, R140 += 1 };
  s2 -> s1 [47, 62] { R178 += 1, R140 += 1 };
  s2 -> s1 [64, 65535] { R178 += 1, R140 += 1 };
  s3 -> s3 [0, 45] { R178 += 1, R140 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R178 += 1 };
  s3 -> s3 [47, 62] { R178 += 1, R140 += 1 };
  s3 -> s3 [64, 65535] { R178 += 1, R140 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R180 += 1, R141 += 1, R142 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R142 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1, R141 += 1, R142 += 1 };
  s1 -> s2 [0, 65535] { R180 += 1, R142 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R180 += 1, R142 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R180 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R180 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 42] { R182 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R143 += 1, R144 += 1 };
  s0 -> s3 [0, 65535] { R182 += 1, R144 += 1, R9 += 1 };
  s0 -> s4 [43, 43] { R182 += 1, R144 += 1 };
  s0 -> s1 [44, 65535] { R182 += 1, R144 += 1 };
  s1 -> s1 [0, 42] { R182 += 1, R144 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R182 += 1 };
  s1 -> s4 [43, 43] { R182 += 1, R144 += 1 };
  s1 -> s1 [44, 65535] { R182 += 1, R144 += 1 };
  s2 -> s1 [0, 42] { R182 += 1, R144 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R182 += 1, R143 += 1, R144 += 1 };
  s2 -> s3 [0, 65535] { R182 += 1, R144 += 1, R9 += 1 };
  s2 -> s4 [43, 43] { R182 += 1, R144 += 1 };
  s2 -> s1 [44, 65535] { R182 += 1, R144 += 1 };
  s3 -> s1 [0, 42] { R182 += 1, R144 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R182 += 1 };
  s3 -> s3 [0, 65535] { R182 += 1, R144 += 1, R9 += 1 };
  s3 -> s4 [43, 43] { R182 += 1, R144 += 1 };
  s3 -> s1 [44, 65535] { R182 += 1, R144 += 1 };
  s4 -> s4 [0, 65535] { R182 += 1, R144 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R182 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 62] { R184 += 1, R146 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s0 -> s2 [0, 65535] { R184 += 1, R145 += 1, R146 += 1 };
  s0 -> s3 [0, 65535] { R184 += 1, R146 += 1, R117 += 1, R118 += 1 };
  s0 -> s4 [63, 63] { R184 += 1, R146 += 1, R118 += 1 };
  s0 -> s1 [64, 65535] { R184 += 1, R146 += 1, R118 += 1 };
  s1 -> s7 [0, 65535] { R184 += 1, R146 += 1 };
  s1 -> s5 [0, 65535] { R184 += 1 };
  s1 -> s1 [0, 65535] { R184 += 1, R146 += 1, R118 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R184 += 1, R146 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R184 += 1, R145 += 1, R146 += 1 };
  s2 -> s3 [0, 65535] { R184 += 1, R146 += 1, R117 += 1, R118 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R184 += 1, R146 += 1, R118 += 1 };
  s2 -> s1 [64, 65535] { R184 += 1, R146 += 1, R118 += 1 };
  s3 -> s1 [0, 62] { R184 += 1, R146 += 1, R118 += 1 };
  s3 -> s3 [0, 65535] { R184 += 1, R146 += 1, R117 += 1, R118 += 1 };
  s3 -> s5 [0, 65535] { R184 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R184 += 1, R146 += 1, R118 += 1 };
  s3 -> s1 [64, 65535] { R184 += 1, R146 += 1, R118 += 1 };
  s4 -> s1 [0, 65535] { R184 += 1, R146 += 1, R118 += 1 };
  s5 -> s5 [0, 65535] { R184 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R184 += 1, R146 += 1 };
  s7 -> s5 [0, 65535] { R184 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s1 [0, 65535] { R186 += 1, R147 += 1, R148 += 1 };
  s0 -> s2 [0, 65535] { R186 += 1, R148 += 1, R119 += 1, R120 += 1 };
  s0 -> s3 [0, 65535] { R186 += 1, R148 += 1, R120 += 1, R7 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R186 += 1, R147 += 1, R148 += 1 };
  s1 -> s2 [0, 65535] { R186 += 1, R148 += 1, R119 += 1, R120 += 1 };
  s1 -> s3 [0, 65535] { R186 += 1, R148 += 1, R120 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R186 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R186 += 1, R148 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535] { R186 += 1, R148 += 1, R120 += 1, R7 += 1 };
  s3 -> s4 [0, 65535] { R186 += 1 };
  s3 -> s5 [0, 65535] { R186 += 1, R148 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R186 += 1, R148 += 1, R120 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R186 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R186 += 1 };
  s5 -> s5 [0, 65535] { R186 += 1, R148 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 42] { R188 += 1, R150 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R188 += 1, R150 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s3 [0, 65535] { R188 += 1, R149 += 1, R150 += 1 };
  s0 -> s4 [43, 43] { R188 += 1, R150 += 1, R122 += 1 };
  s0 -> s1 [44, 65535] { R188 += 1, R150 += 1, R122 += 1 };
  s1 -> s1 [0, 42] { R188 += 1, R150 += 1, R122 += 1 };
  s1 -> s4 [43, 43] { R188 += 1, R150 += 1, R122 += 1 };
  s1 -> s1 [44, 65535] { R188 += 1, R150 += 1, R122 += 1 };
  s2 -> s1 [0, 42] { R188 += 1, R150 += 1, R122 += 1 };
  s2 -> s2 [0, 65535] { R188 += 1, R150 += 1, R121 += 1, R122 += 1 };
  s2 -> s4 [43, 43] { R188 += 1, R150 += 1, R122 += 1 };
  s2 -> s1 [44, 65535] { R188 += 1, R150 += 1, R122 += 1 };
  s3 -> s1 [0, 42] { R188 += 1, R150 += 1, R122 += 1 };
  s3 -> s2 [0, 65535] { R188 += 1, R150 += 1, R121 += 1, R122 += 1 };
  s3 -> s3 [0, 65535] { R188 += 1, R149 += 1, R150 += 1 };
  s3 -> s4 [43, 43] { R188 += 1, R150 += 1, R122 += 1 };
  s3 -> s1 [44, 65535] { R188 += 1, R150 += 1, R122 += 1 };
  s4 -> s4 [0, 65535] { R188 += 1, R150 += 1, R122 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R188 += 1 };
  s4 -> s7 [0, 65535] { R188 += 1, R150 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R188 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R188 += 1 };
  s7 -> s7 [0, 65535] { R188 += 1, R150 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s1 [0, 65535] { R190 += 1, R152 += 1, R124 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R190 += 1, R152 += 1, R123 += 1, R124 += 1 };
  s0 -> s3 [0, 65535] { R190 += 1, R151 += 1, R152 += 1 };
  s1 -> s5 [0, 65535] { R190 += 1 };
  s1 -> s1 [0, 65535] { R190 += 1, R152 += 1, R124 += 1, R112 += 1 };
  s1 -> s6 [0, 65535] { R190 += 1, R152 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R190 += 1 };
  s2 -> s1 [0, 65535] { R190 += 1, R152 += 1, R124 += 1, R112 += 1 };
  s2 -> s2 [0, 65535] { R190 += 1, R152 += 1, R123 += 1, R124 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R190 += 1, R152 += 1, R124 += 1, R112 += 1 };
  s3 -> s2 [0, 65535] { R190 += 1, R152 += 1, R123 += 1, R124 += 1 };
  s3 -> s3 [0, 65535] { R190 += 1, R151 += 1, R152 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R190 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R190 += 1 };
  s6 -> s6 [0, 65535] { R190 += 1, R152 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 63] { R192 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s2 [0, 65535] { R192 += 1, R153 += 1, R154 += 1 };
  s0 -> s3 [64, 64] { R192 += 1, R154 += 1 };
  s0 -> s1 [65, 65535] { R192 += 1, R154 += 1 };
  s1 -> s1 [0, 63] { R192 += 1, R154 += 1 };
  s1 -> s3 [64, 64] { R192 += 1, R154 += 1 };
  s1 -> s1 [65, 65535] { R192 += 1, R154 += 1 };
  s2 -> s1 [0, 63] { R192 += 1, R154 += 1 };
  s2 -> s2 [0, 65535] { R192 += 1, R153 += 1, R154 += 1 };
  s2 -> s3 [64, 64] { R192 += 1, R154 += 1 };
  s2 -> s1 [65, 65535] { R192 += 1, R154 += 1 };
  s3 -> s4 [0, 65535] { R192 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R192 += 1, R154 += 1 };
  s4 -> s4 [0, 65535] { R192 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R194 += 1, R156 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s0 -> s2 [0, 65535] { R194 += 1, R155 += 1, R156 += 1 };
  s1 -> s4 [0, 65535] { R194 += 1 };
  s1 -> s1 [0, 65535] { R194 += 1, R156 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R194 += 1, R156 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R194 += 1, R155 += 1, R156 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R194 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 36] { R196 += 1, R158 += 1, R126 += 1 };
  s0 -> s2 [0, 65535] { R196 += 1, R157 += 1, R158 += 1 };
  s0 -> s3 [0, 65535] { R196 += 1, R158 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s1 [38, 42] { R196 += 1, R158 += 1, R126 += 1 };
  s0 -> s1 [44, 57] { R196 += 1, R158 += 1, R126 += 1 };
  s0 -> s1 [59, 63] { R196 += 1, R158 += 1, R126 += 1 };
  s0 -> s1 [65, 65535] { R196 += 1, R158 += 1, R126 += 1 };
  s1 -> s1 [0, 36] { R196 += 1, R158 += 1, R126 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R196 += 1 };
  s1 -> s1 [0, 65535] { R196 += 1, R158 += 1 };
  s1 -> s1 [38, 42] { R196 += 1, R158 += 1, R126 += 1 };
  s1 -> s1 [44, 57] { R196 += 1, R158 += 1, R126 += 1 };
  s1 -> s1 [59, 63] { R196 += 1, R158 += 1, R126 += 1 };
  s1 -> s1 [65, 65535] { R196 += 1, R158 += 1, R126 += 1 };
  s2 -> s1 [0, 36] { R196 += 1, R158 += 1, R126 += 1 };
  s2 -> s2 [0, 65535] { R196 += 1, R157 += 1, R158 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R196 += 1, R158 += 1, R125 += 1, R126 += 1 };
  s2 -> s1 [38, 42] { R196 += 1, R158 += 1, R126 += 1 };
  s2 -> s1 [44, 57] { R196 += 1, R158 += 1, R126 += 1 };
  s2 -> s1 [59, 63] { R196 += 1, R158 += 1, R126 += 1 };
  s2 -> s1 [65, 65535] { R196 += 1, R158 += 1, R126 += 1 };
  s3 -> s1 [0, 36] { R196 += 1, R158 += 1, R126 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R196 += 1, R158 += 1, R125 += 1, R126 += 1 };
  s3 -> s5 [0, 65535] { R196 += 1 };
  s3 -> s1 [38, 42] { R196 += 1, R158 += 1, R126 += 1 };
  s3 -> s1 [44, 57] { R196 += 1, R158 += 1, R126 += 1 };
  s3 -> s1 [59, 63] { R196 += 1, R158 += 1, R126 += 1 };
  s3 -> s1 [65, 65535] { R196 += 1, R158 += 1, R126 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R196 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R198 += 1, R160 += 1, R128 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s2 [0, 65535] { R198 += 1, R159 += 1, R160 += 1 };
  s0 -> s3 [0, 65535] { R198 += 1, R160 += 1, R127 += 1, R128 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R198 += 1 };
  s1 -> s6 [0, 65535] { R198 += 1, R160 += 1 };
  s1 -> s1 [0, 65535] { R198 += 1, R160 += 1, R128 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R198 += 1, R160 += 1, R128 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R198 += 1, R159 += 1, R160 += 1 };
  s2 -> s3 [0, 65535] { R198 += 1, R160 += 1, R127 += 1, R128 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R198 += 1 };
  s3 -> s1 [0, 65535] { R198 += 1, R160 += 1, R128 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R198 += 1, R160 += 1, R127 += 1, R128 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R198 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R198 += 1 };
  s6 -> s6 [0, 65535] { R198 += 1, R160 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 43] { R200 += 1, R162 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R200 += 1, R161 += 1, R162 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s3 [0, 65535] { R200 += 1, R162 += 1, R129 += 1, R130 += 1 };
  s0 -> s1 [45, 64] { R200 += 1, R162 += 1, R130 += 1 };
  s0 -> s1 [91, 65535] { R200 += 1, R162 += 1, R130 += 1 };
  s1 -> s1 [0, 43] { R200 += 1, R162 += 1, R130 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R200 += 1, R162 += 1 };
  s1 -> s5 [0, 65535] { R200 += 1 };
  s1 -> s1 [45, 64] { R200 += 1, R162 += 1, R130 += 1 };
  s1 -> s1 [91, 65535] { R200 += 1, R162 += 1, R130 += 1 };
  s2 -> s1 [0, 43] { R200 += 1, R162 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R200 += 1, R161 += 1, R162 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R200 += 1, R162 += 1, R129 += 1, R130 += 1 };
  s2 -> s1 [45, 64] { R200 += 1, R162 += 1, R130 += 1 };
  s2 -> s1 [91, 65535] { R200 += 1, R162 += 1, R130 += 1 };
  s3 -> s1 [0, 43] { R200 += 1, R162 += 1, R130 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R200 += 1 };
  s3 -> s3 [0, 65535] { R200 += 1, R162 += 1, R129 += 1, R130 += 1 };
  s3 -> s1 [45, 64] { R200 += 1, R162 += 1, R130 += 1 };
  s3 -> s1 [91, 65535] { R200 += 1, R162 += 1, R130 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R200 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R202 += 1, R164 += 1, R132 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R163 += 1, R164 += 1 };
  s0 -> s3 [0, 65535] { R202 += 1, R164 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535] { R202 += 1, R164 += 1, R132 += 1, R0 += 1 };
  s1 -> s6 [0, 65535] { R202 += 1, R164 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R202 += 1 };
  s2 -> s1 [0, 65535] { R202 += 1, R164 += 1, R132 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R202 += 1, R163 += 1, R164 += 1 };
  s2 -> s3 [0, 65535] { R202 += 1, R164 += 1, R131 += 1, R132 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R202 += 1, R164 += 1, R132 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R202 += 1, R164 += 1, R131 += 1, R132 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R202 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R202 += 1 };
  s6 -> s6 [0, 65535] { R202 += 1, R164 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R202 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 57] { R204 += 1, R166 += 1, R134 += 1 };
  s0 -> s2 [0, 65535] { R204 += 1, R165 += 1, R166 += 1 };
  s0 -> s3 [0, 65535] { R204 += 1, R166 += 1, R134 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s4 [0, 65535] { R204 += 1, R166 += 1, R133 += 1, R134 += 1 };
  s0 -> s5 [58, 58] { R204 += 1, R166 += 1, R134 += 1 };
  s0 -> s1 [59, 65535] { R204 += 1, R166 += 1, R134 += 1 };
  s1 -> s1 [0, 57] { R204 += 1, R166 += 1, R134 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R204 += 1 };
  s1 -> s1 [0, 65535] { R204 += 1, R166 += 1 };
  s1 -> s5 [58, 58] { R204 += 1, R166 += 1, R134 += 1 };
  s1 -> s1 [59, 65535] { R204 += 1, R166 += 1, R134 += 1 };
  s2 -> s1 [0, 57] { R204 += 1, R166 += 1, R134 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R204 += 1, R165 += 1, R166 += 1 };
  s2 -> s3 [0, 65535] { R204 += 1, R166 += 1, R134 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R204 += 1, R166 += 1, R133 += 1, R134 += 1 };
  s2 -> s5 [58, 58] { R204 += 1, R166 += 1, R134 += 1 };
  s2 -> s1 [59, 65535] { R204 += 1, R166 += 1, R134 += 1 };
  s3 -> s1 [0, 57] { R204 += 1, R166 += 1, R134 += 1 };
  s3 -> s8 [0, 65535] { R204 += 1, R166 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R204 += 1, R166 += 1, R134 += 1, R8 += 1 };
  s3 -> s7 [0, 65535] { R204 += 1 };
  s3 -> s5 [58, 58] { R204 += 1, R166 += 1, R134 += 1 };
  s3 -> s1 [59, 65535] { R204 += 1, R166 += 1, R134 += 1 };
  s4 -> s1 [0, 57] { R204 += 1, R166 += 1, R134 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R204 += 1, R166 += 1, R134 += 1, R8 += 1 };
  s4 -> s7 [0, 65535] { R204 += 1 };
  s4 -> s4 [0, 65535] { R204 += 1, R166 += 1, R133 += 1, R134 += 1 };
  s4 -> s5 [58, 58] { R204 += 1, R166 += 1, R134 += 1 };
  s4 -> s1 [59, 65535] { R204 += 1, R166 += 1, R134 += 1 };
  s5 -> s5 [0, 65535] { R204 += 1, R166 += 1, R134 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R204 += 1 };
  s8 -> s8 [0, 65535] { R204 += 1, R166 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R204 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 90] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s0 -> s2 [0, 65535] { R206 += 1, R167 += 1, R168 += 1 };
  s0 -> s3 [0, 65535] { R206 += 1, R168 += 1, R136 += 1, R113 += 1, R114 += 1 };
  s0 -> s4 [0, 65535] { R206 += 1, R168 += 1, R135 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s5 [91, 91] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s0 -> s1 [92, 65535] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s1 -> s8 [0, 65535] { R206 += 1, R168 += 1 };
  s1 -> s1 [0, 65535] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s6 [0, 65535] { R206 += 1 };
  s1 -> s9 [0, 65535] { R206 += 1, R168 += 1, R136 += 1 };
  s2 -> s1 [0, 90] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R206 += 1, R167 += 1, R168 += 1 };
  s2 -> s3 [0, 65535] { R206 += 1, R168 += 1, R136 += 1, R113 += 1, R114 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R206 += 1, R168 += 1, R135 += 1, R136 += 1 };
  s2 -> s5 [91, 91] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s2 -> s1 [92, 65535] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s3 -> s1 [0, 90] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s3 -> s8 [0, 65535] { R206 += 1, R168 += 1 };
  s3 -> s3 [0, 65535] { R206 += 1, R168 += 1, R136 += 1, R113 += 1, R114 += 1 };
  s3 -> s6 [0, 65535] { R206 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [91, 91] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s3 -> s1 [92, 65535] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s4 -> s1 [0, 90] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s4 -> s3 [0, 65535] { R206 += 1, R168 += 1, R136 += 1, R113 += 1, R114 += 1 };
  s4 -> s6 [0, 65535] { R206 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R206 += 1, R168 += 1, R135 += 1, R136 += 1 };
  s4 -> s5 [91, 91] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s4 -> s1 [92, 65535] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s5 -> s1 [0, 65535] { R206 += 1, R168 += 1, R136 += 1, R114 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R206 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R206 += 1, R168 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R206 += 1 };
  s9 -> s8 [0, 65535] { R206 += 1, R168 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s6 [0, 65535] { R206 += 1 };
  s9 -> s9 [0, 65535] { R206 += 1, R168 += 1, R136 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R208 += 1, R170 += 1, R137 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s2 [0, 65535] { R208 += 1, R169 += 1, R170 += 1 };
  s0 -> s3 [0, 65535] { R208 += 1, R170 += 1, R138 += 1, R116 += 1, R6 += 1 };
  s0 -> s4 [0, 65535] { R208 += 1, R170 += 1, R138 += 1, R115 += 1, R116 += 1 };
  s1 -> s4 [0, 65535] { R208 += 1, R170 += 1, R138 += 1, R115 += 1, R116 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R208 += 1, R170 += 1, R137 += 1, R138 += 1 };
  s1 -> s3 [0, 65535] { R208 += 1, R170 += 1, R138 += 1, R116 += 1, R6 += 1 };
  s1 -> s7 [0, 65535] { R208 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R208 += 1, R170 += 1, R137 += 1, R138 += 1 };
  s2 -> s2 [0, 65535] { R208 += 1, R169 += 1, R170 += 1 };
  s2 -> s3 [0, 65535] { R208 += 1, R170 += 1, R138 += 1, R116 += 1, R6 += 1 };
  s2 -> s4 [0, 65535] { R208 += 1, R170 += 1, R138 += 1, R115 += 1, R116 += 1 };
  s3 -> s8 [0, 65535] { R208 += 1, R170 += 1, R138 += 1 };
  s3 -> s5 [0, 65535] { R208 += 1, R170 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R208 += 1, R170 += 1, R138 += 1, R116 += 1, R6 += 1 };
  s3 -> s7 [0, 65535] { R208 += 1 };
  s4 -> s4 [0, 65535] { R208 += 1, R170 += 1, R138 += 1, R115 += 1, R116 += 1 };
  s4 -> s5 [0, 65535] { R208 += 1, R170 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R208 += 1, R170 += 1, R138 += 1, R116 += 1, R6 += 1 };
  s4 -> s7 [0, 65535] { R208 += 1 };
  s5 -> s5 [0, 65535] { R208 += 1, R170 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R208 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R208 += 1 };
  s8 -> s8 [0, 65535] { R208 += 1, R170 += 1, R138 += 1 };
  s8 -> s5 [0, 65535] { R208 += 1, R170 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R208 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R2 = R124 && R3 = R138 && R4 = R152 && R5 = R208 && R13 = 0 && R14 = R170 && R117 = 0 && R118 = 1 && R119 = 0 && R120 = 1 && R121 = 0 && R122 = R124 && R123 = 0 && R125 = 0 && R126 = 3 && R127 = 0 && R128 = 3 && R129 = 4 && R130 = R138 && R131 = 4 && R132 = R138 && R133 = 4 && R134 = R138 && R135 = 4 && R136 = R138 && R137 = 4 && R139 - R170 = 1 && R140 = R152 && R141 - R170 = 1 && R142 = R152 && R143 - R170 = 1 && R144 = R152 && R145 - R170 = 1 && R146 = R152 && R147 - R170 = 1 && R148 = R152 && R149 - R170 = 1 && R150 = R152 && R151 - R170 = 1 && R153 = 0 && R154 = R170 && R155 = 0 && R156 = R170 && R157 = 0 && R158 = R170 && R159 = 0 && R160 = R170 && R161 = 0 && R162 = R170 && R163 = 0 && R164 = R170 && R165 = 0 && R166 = R170 && R167 = 0 && R168 = R170 && R169 = 0 && R171 = 10 && R172 = R208 && R173 = 10 && R174 = R208 && R175 = 10 && R176 = R208 && R177 = 10 && R178 = R208 && R179 = 10 && R180 = R208 && R181 = 10 && R182 = R208 && R183 = 10 && R184 = R208 && R185 = 10 && R186 = R208 && R187 = 10 && R188 = R208 && R189 = 10 && R190 = R208 && R191 = 10 && R192 = R208 && R193 = 10 && R194 = R208 && R195 = 10 && R196 = R208 && R197 = 10 && R198 = R208 && R199 = 10 && R200 = R208 && R201 = 10 && R202 = R208 && R203 = 10 && R204 = R208 && R205 = 10 && R206 = R208 && R207 = 10 && R0 != 0 && R1 != 0 && R8 < 1 && R9 < 1 && 0 < R124 && 3 < R138 && R170 < R152 && -1 < R170 && 9 < R208 && (R113 != 0 || ((R6 != 0 || ((R0 != R114 || R114 = 1 || R114 < 0) && (R0 = R114 || R114 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R114 || R114 = 1 || R114 < 0) && (R114 != 1 || -1 < R0) && (R0 = R114 || R114 = 1))))) && (R115 != 0 || ((R6 != 0 || ((R0 != R116 || R116 = 1 || R116 < 0) && (R0 = R116 || R116 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R116 || R116 = 1 || R116 < 0) && (R116 != 1 || -1 < R0) && (R0 = R116 || R116 = 1))))) && (R113 = 0 || (R6 = 0 && R0 < 0)) && (R115 = 0 || (R6 = 0 && R0 < 0));
// End of Parikh automata intersection problem
