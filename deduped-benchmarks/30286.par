// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R10, R13, R16711, R16712, R16713, R16714, R16715, R16716, R16717, R16718, R16719, R16720, R16721, R16722, R16723, R16724, R16725, R16726, R16727, R16728, R16729, R16730, R16731, R16732, R16733, R16734, R16735, R16736, R16737, R16738, R16739, R16740, R16741, R16742, R16743, R16744, R16745, R16746, R16747, R16748, R16749, R16750, R16751, R16752, R16753, R16754, R16755, R16756, R16757, R16758, R16759, R16760, R16761, R16762, R16763, R16764, R16765, R16766, R16767, R16768, R16769, R16770, R16771, R16772, R16773, R16774, R16775, R16776, R16777, R16778, R16779, R16780, R16781, R16782, R16783, R16784, R16785, R16786, R16787, R16788, R16789, R16790, R16791, R16792, R16793, R16794, R16795, R16796, R16797, R16798, R16799, R16800, R16801, R16802, R16803, R16804, R16805, R16806, R16807, R16808, R16809, R16810, R16811, R16812, R16813, R16814, R16815, R16816, R16817, R16818, R16819, R16820, R16821, R16822, R16823, R16824, R16825, R16826, R16827, R16828, R16829, R16830, R16831, R16832, R16833, R16834, R16835, R16836, R16837, R16838, R16839, R16840, R16841, R16842, R16843, R16844, R16845, R16846, R16847, R16848, R16849, R16850, R16851, R16852, R16853, R16854, R16855, R16856, R16857, R16858, R16859, R16860, R16861, R16862, R17, R18, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P77
automaton P77_0 {
  init s0;
  s0 -> s1 [118, 118];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R16806 += 1 };
  s0 -> s0 [0, 65535] { R16805 += 1, R16806 += 1 };
  s0 -> s2 [46, 46] { R16806 += 1 };
  s0 -> s3 [47, 47] { R16806 += 1 };
  s0 -> s1 [48, 65535] { R16806 += 1 };
  s1 -> s1 [0, 45] { R16806 += 1 };
  s1 -> s2 [46, 46] { R16806 += 1 };
  s1 -> s3 [47, 47] { R16806 += 1 };
  s1 -> s1 [48, 65535] { R16806 += 1 };
  s2 -> s1 [0, 45] { R16806 += 1 };
  s2 -> s2 [46, 46] { R16806 += 1 };
  s2 -> s3 [47, 47] { R16806 += 1 };
  s2 -> s1 [48, 114] { R16806 += 1 };
  s2 -> s8 [115, 115] { R16806 += 1 };
  s2 -> s1 [116, 65535] { R16806 += 1 };
  s3 -> s3 [0, 45] { R16806 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R16806 += 1 };
  s3 -> s3 [47, 65535] { R16806 += 1 };
  s4 -> s3 [0, 45] { R16806 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R16806 += 1 };
  s4 -> s3 [47, 114] { R16806 += 1 };
  s4 -> s5 [115, 115] { R16806 += 1 };
  s4 -> s3 [116, 65535] { R16806 += 1 };
  s5 -> s3 [0, 45] { R16806 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R16806 += 1 };
  s5 -> s3 [47, 110] { R16806 += 1 };
  s5 -> s6 [111, 111] { R16806 += 1 };
  s5 -> s3 [112, 65535] { R16806 += 1 };
  s6 -> s3 [0, 45] { R16806 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R16806 += 1 };
  s6 -> s3 [47, 98] { R16806 += 1 };
  s6 -> s7 [99, 99] { R16806 += 1 };
  s6 -> s3 [100, 65535] { R16806 += 1 };
  s7 -> s3 [0, 45] { R16806 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R16806 += 1 };
  s7 -> s3 [47, 106] { R16806 += 1 };
  s7 -> s3 [108, 65535] { R16806 += 1 };
  s8 -> s1 [0, 45] { R16806 += 1 };
  s8 -> s2 [46, 46] { R16806 += 1 };
  s8 -> s3 [47, 47] { R16806 += 1 };
  s8 -> s1 [48, 110] { R16806 += 1 };
  s8 -> s9 [111, 111] { R16806 += 1 };
  s8 -> s1 [112, 65535] { R16806 += 1 };
  s9 -> s1 [0, 45] { R16806 += 1 };
  s9 -> s2 [46, 46] { R16806 += 1 };
  s9 -> s3 [47, 47] { R16806 += 1 };
  s9 -> s1 [48, 98] { R16806 += 1 };
  s9 -> s10 [99, 99] { R16806 += 1 };
  s9 -> s1 [100, 65535] { R16806 += 1 };
  s10 -> s1 [0, 45] { R16806 += 1 };
  s10 -> s2 [46, 46] { R16806 += 1 };
  s10 -> s3 [47, 47] { R16806 += 1 };
  s10 -> s1 [48, 106] { R16806 += 1 };
  s10 -> s1 [108, 65535] { R16806 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R16807 += 1, R16808 += 1 };
  s0 -> s1 [0, 65535] { R16808 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16808 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R16810 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R16809 += 1, R16810 += 1 };
  s0 -> s2 [0, 65535] { R16810 += 1, R17 += 1, R18 += 1 };
  s0 -> s3 [47, 47] { R16810 += 1 };
  s0 -> s1 [48, 65535] { R16810 += 1, R18 += 1 };
  s1 -> s1 [0, 46] { R16810 += 1, R18 += 1 };
  s1 -> s3 [47, 47] { R16810 += 1 };
  s1 -> s1 [48, 65535] { R16810 += 1, R18 += 1 };
  s2 -> s1 [0, 46] { R16810 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R16810 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [47, 47] { R16810 += 1 };
  s2 -> s1 [48, 65535] { R16810 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R16810 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R16812 += 1, R16746 += 1 };
  s0 -> s2 [0, 65535] { R16812 += 1, R16745 += 1, R16746 += 1 };
  s0 -> s0 [0, 65535] { R16811 += 1, R16812 += 1 };
  s0 -> s1 [38, 42] { R16812 += 1, R16746 += 1 };
  s0 -> s1 [44, 45] { R16812 += 1, R16746 += 1 };
  s0 -> s1 [47, 62] { R16812 += 1, R16746 += 1 };
  s0 -> s1 [64, 65535] { R16812 += 1, R16746 += 1 };
  s1 -> s1 [0, 36] { R16812 += 1, R16746 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16812 += 1 };
  s1 -> s1 [38, 42] { R16812 += 1, R16746 += 1 };
  s1 -> s1 [44, 45] { R16812 += 1, R16746 += 1 };
  s1 -> s1 [47, 62] { R16812 += 1, R16746 += 1 };
  s1 -> s1 [64, 65535] { R16812 += 1, R16746 += 1 };
  s2 -> s1 [0, 36] { R16812 += 1, R16746 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16812 += 1, R16745 += 1, R16746 += 1 };
  s2 -> s1 [38, 42] { R16812 += 1, R16746 += 1 };
  s2 -> s1 [44, 45] { R16812 += 1, R16746 += 1 };
  s2 -> s1 [47, 62] { R16812 += 1, R16746 += 1 };
  s2 -> s1 [64, 65535] { R16812 += 1, R16746 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R16814 += 1, R16748 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R16814 += 1, R16747 += 1, R16748 += 1 };
  s0 -> s0 [0, 65535] { R16813 += 1, R16814 += 1 };
  s1 -> s1 [0, 65535] { R16814 += 1, R16748 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16814 += 1 };
  s2 -> s1 [0, 65535] { R16814 += 1, R16748 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16814 += 1, R16747 += 1, R16748 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16814 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s0 -> s2 [0, 65535] { R16816 += 1, R16749 += 1, R16750 += 1 };
  s0 -> s0 [0, 65535] { R16815 += 1, R16816 += 1 };
  s0 -> s3 [0, 65535] { R16816 += 1, R16750 += 1, R16715 += 1, R16716 += 1 };
  s0 -> s4 [63, 63] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s0 -> s1 [64, 65535] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s1 -> s7 [0, 65535] { R16816 += 1, R16750 += 1 };
  s1 -> s1 [0, 65535] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s1 -> s5 [0, 65535] { R16816 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s2 -> s2 [0, 65535] { R16816 += 1, R16749 += 1, R16750 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R16816 += 1, R16750 += 1, R16715 += 1, R16716 += 1 };
  s2 -> s4 [63, 63] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s2 -> s1 [64, 65535] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s3 -> s1 [0, 62] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s3 -> s5 [0, 65535] { R16816 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R16816 += 1, R16750 += 1, R16715 += 1, R16716 += 1 };
  s3 -> s4 [63, 63] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s3 -> s1 [64, 65535] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s4 -> s1 [0, 65535] { R16816 += 1, R16750 += 1, R16716 += 1 };
  s5 -> s5 [0, 65535] { R16816 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R16816 += 1, R16750 += 1 };
  s7 -> s5 [0, 65535] { R16816 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R16817 += 1, R16818 += 1 };
  s0 -> s1 [0, 65535] { R16818 += 1, R16751 += 1, R16752 += 1 };
  s0 -> s2 [0, 65535] { R16818 += 1, R16752 += 1, R16717 += 1, R16718 += 1 };
  s0 -> s3 [0, 65535] { R16818 += 1, R16752 += 1, R16718 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R16818 += 1, R16751 += 1, R16752 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R16818 += 1, R16752 += 1, R16717 += 1, R16718 += 1 };
  s1 -> s3 [0, 65535] { R16818 += 1, R16752 += 1, R16718 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R16818 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16818 += 1, R16752 += 1, R16717 += 1, R16718 += 1 };
  s2 -> s3 [0, 65535] { R16818 += 1, R16752 += 1, R16718 += 1, R7 += 1 };
  s3 -> s4 [0, 65535] { R16818 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16818 += 1, R16752 += 1, R16718 += 1, R7 += 1 };
  s3 -> s6 [0, 65535] { R16818 += 1, R16752 += 1 };
  s4 -> s4 [0, 65535] { R16818 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R16818 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16818 += 1, R16752 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R16820 += 1, R16762 += 1 };
  s0 -> s0 [0, 65535] { R16819 += 1, R16820 += 1 };
  s0 -> s2 [0, 65535] { R16820 += 1, R16761 += 1, R16762 += 1 };
  s0 -> s1 [45, 63] { R16820 += 1, R16762 += 1 };
  s0 -> s3 [84, 84] { R16820 += 1, R16762 += 1 };
  s0 -> s1 [85, 65535] { R16820 += 1, R16762 += 1 };
  s1 -> s1 [0, 43] { R16820 += 1, R16762 += 1 };
  s1 -> s1 [45, 63] { R16820 += 1, R16762 += 1 };
  s1 -> s3 [84, 84] { R16820 += 1, R16762 += 1 };
  s1 -> s1 [85, 65535] { R16820 += 1, R16762 += 1 };
  s2 -> s1 [0, 43] { R16820 += 1, R16762 += 1 };
  s2 -> s2 [0, 65535] { R16820 += 1, R16761 += 1, R16762 += 1 };
  s2 -> s1 [45, 63] { R16820 += 1, R16762 += 1 };
  s2 -> s3 [84, 84] { R16820 += 1, R16762 += 1 };
  s2 -> s1 [85, 65535] { R16820 += 1, R16762 += 1 };
  s3 -> s3 [0, 43] { R16820 += 1, R16762 += 1 };
  s3 -> s3 [0, 65535] { R16820 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R16820 += 1, R16762 += 1 };
  s3 -> s3 [84, 65535] { R16820 += 1, R16762 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R16822 += 1, R16763 += 1, R16764 += 1 };
  s0 -> s0 [0, 65535] { R16821 += 1, R16822 += 1 };
  s0 -> s2 [0, 65535] { R16822 += 1, R16764 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R16822 += 1, R16763 += 1, R16764 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R16822 += 1, R16764 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16822 += 1, R16764 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R16822 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16822 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R16824 += 1, R16766 += 1 };
  s0 -> s0 [0, 65535] { R16823 += 1, R16824 += 1 };
  s0 -> s2 [0, 65535] { R16824 += 1, R16765 += 1, R16766 += 1 };
  s0 -> s3 [0, 65535] { R16824 += 1, R16766 += 1, R9 += 1 };
  s0 -> s4 [58, 58] { R16824 += 1, R16766 += 1 };
  s0 -> s1 [59, 65535] { R16824 += 1, R16766 += 1 };
  s1 -> s1 [0, 57] { R16824 += 1, R16766 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16824 += 1 };
  s1 -> s4 [58, 58] { R16824 += 1, R16766 += 1 };
  s1 -> s1 [59, 65535] { R16824 += 1, R16766 += 1 };
  s2 -> s1 [0, 57] { R16824 += 1, R16766 += 1 };
  s2 -> s2 [0, 65535] { R16824 += 1, R16765 += 1, R16766 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R16824 += 1, R16766 += 1, R9 += 1 };
  s2 -> s4 [58, 58] { R16824 += 1, R16766 += 1 };
  s2 -> s1 [59, 65535] { R16824 += 1, R16766 += 1 };
  s3 -> s1 [0, 57] { R16824 += 1, R16766 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R16824 += 1 };
  s3 -> s3 [0, 65535] { R16824 += 1, R16766 += 1, R9 += 1 };
  s3 -> s4 [58, 58] { R16824 += 1, R16766 += 1 };
  s3 -> s1 [59, 65535] { R16824 += 1, R16766 += 1 };
  s4 -> s4 [0, 65535] { R16824 += 1, R16766 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16824 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 85] { R16826 += 1, R16768 += 1 };
  s0 -> s0 [0, 65535] { R16825 += 1, R16826 += 1 };
  s0 -> s2 [0, 65535] { R16826 += 1, R16767 += 1, R16768 += 1 };
  s0 -> s3 [0, 65535] { R16826 += 1, R16768 += 1, R10 += 1 };
  s0 -> s4 [86, 86] { R16826 += 1, R16768 += 1 };
  s0 -> s1 [87, 65535] { R16826 += 1, R16768 += 1 };
  s1 -> s1 [0, 85] { R16826 += 1, R16768 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16826 += 1 };
  s1 -> s4 [86, 86] { R16826 += 1, R16768 += 1 };
  s1 -> s1 [87, 65535] { R16826 += 1, R16768 += 1 };
  s2 -> s1 [0, 85] { R16826 += 1, R16768 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16826 += 1, R16767 += 1, R16768 += 1 };
  s2 -> s3 [0, 65535] { R16826 += 1, R16768 += 1, R10 += 1 };
  s2 -> s4 [86, 86] { R16826 += 1, R16768 += 1 };
  s2 -> s1 [87, 65535] { R16826 += 1, R16768 += 1 };
  s3 -> s1 [0, 85] { R16826 += 1, R16768 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16826 += 1, R16768 += 1, R10 += 1 };
  s3 -> s6 [0, 65535] { R16826 += 1 };
  s3 -> s4 [86, 86] { R16826 += 1, R16768 += 1 };
  s3 -> s1 [87, 65535] { R16826 += 1, R16768 += 1 };
  s4 -> s4 [0, 65535] { R16826 += 1, R16768 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16826 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 83] { R16828 += 1, R16770 += 1 };
  s0 -> s2 [0, 65535] { R16828 += 1, R16770 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R16827 += 1, R16828 += 1 };
  s0 -> s3 [0, 65535] { R16828 += 1, R16769 += 1, R16770 += 1 };
  s0 -> s4 [84, 84] { R16828 += 1, R16770 += 1 };
  s0 -> s1 [85, 65535] { R16828 += 1, R16770 += 1 };
  s1 -> s1 [0, 83] { R16828 += 1, R16770 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16828 += 1 };
  s1 -> s4 [84, 84] { R16828 += 1, R16770 += 1 };
  s1 -> s1 [85, 65535] { R16828 += 1, R16770 += 1 };
  s2 -> s1 [0, 83] { R16828 += 1, R16770 += 1 };
  s2 -> s2 [0, 65535] { R16828 += 1, R16770 += 1, R13 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R16828 += 1 };
  s2 -> s4 [84, 84] { R16828 += 1, R16770 += 1 };
  s2 -> s1 [85, 65535] { R16828 += 1, R16770 += 1 };
  s3 -> s1 [0, 83] { R16828 += 1, R16770 += 1 };
  s3 -> s2 [0, 65535] { R16828 += 1, R16770 += 1, R13 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16828 += 1, R16769 += 1, R16770 += 1 };
  s3 -> s4 [84, 84] { R16828 += 1, R16770 += 1 };
  s3 -> s1 [85, 65535] { R16828 += 1, R16770 += 1 };
  s4 -> s4 [0, 65535] { R16828 += 1, R16770 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16828 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 90] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s0 -> s2 [0, 65535] { R16830 += 1, R16771 += 1, R16772 += 1 };
  s0 -> s0 [0, 65535] { R16829 += 1, R16830 += 1 };
  s0 -> s3 [0, 65535] { R16830 += 1, R16772 += 1, R16719 += 1, R16720 += 1 };
  s0 -> s4 [91, 91] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s0 -> s1 [92, 65535] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s1 -> s7 [0, 65535] { R16830 += 1, R16772 += 1 };
  s1 -> s5 [0, 65535] { R16830 += 1 };
  s1 -> s1 [0, 65535] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s2 -> s2 [0, 65535] { R16830 += 1, R16771 += 1, R16772 += 1 };
  s2 -> s3 [0, 65535] { R16830 += 1, R16772 += 1, R16719 += 1, R16720 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s2 -> s1 [92, 65535] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s3 -> s1 [0, 90] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s3 -> s5 [0, 65535] { R16830 += 1 };
  s3 -> s3 [0, 65535] { R16830 += 1, R16772 += 1, R16719 += 1, R16720 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s3 -> s1 [92, 65535] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s4 -> s1 [0, 65535] { R16830 += 1, R16772 += 1, R16720 += 1 };
  s5 -> s5 [0, 65535] { R16830 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R16830 += 1, R16772 += 1 };
  s7 -> s5 [0, 65535] { R16830 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R16832 += 1, R16774 += 1, R16722 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R16832 += 1, R16773 += 1, R16774 += 1 };
  s0 -> s0 [0, 65535] { R16831 += 1, R16832 += 1 };
  s0 -> s3 [0, 65535] { R16832 += 1, R16774 += 1, R16721 += 1, R16722 += 1 };
  s1 -> s1 [0, 65535] { R16832 += 1, R16774 += 1, R16722 += 1, R8 += 1 };
  s1 -> s6 [0, 65535] { R16832 += 1, R16774 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R16832 += 1 };
  s2 -> s1 [0, 65535] { R16832 += 1, R16774 += 1, R16722 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R16832 += 1, R16773 += 1, R16774 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R16832 += 1, R16774 += 1, R16721 += 1, R16722 += 1 };
  s3 -> s1 [0, 65535] { R16832 += 1, R16774 += 1, R16722 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R16832 += 1 };
  s3 -> s3 [0, 65535] { R16832 += 1, R16774 += 1, R16721 += 1, R16722 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16832 += 1 };
  s6 -> s6 [0, 65535] { R16832 += 1, R16774 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R16832 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 107] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s0 -> s2 [0, 65535] { R16834 += 1, R16776 += 1, R16723 += 1, R16724 += 1 };
  s0 -> s0 [0, 65535] { R16833 += 1, R16834 += 1 };
  s0 -> s3 [0, 65535] { R16834 += 1, R16775 += 1, R16776 += 1 };
  s0 -> s4 [108, 108] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s0 -> s1 [109, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R16834 += 1 };
  s1 -> s15 [0, 65535] { R16834 += 1, R16776 += 1 };
  s1 -> s1 [0, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s2 -> s1 [0, 107] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16834 += 1, R16776 += 1, R16723 += 1, R16724 += 1 };
  s2 -> s6 [0, 65535] { R16834 += 1 };
  s2 -> s4 [108, 108] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s2 -> s1 [109, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s3 -> s1 [0, 107] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R16834 += 1, R16776 += 1, R16723 += 1, R16724 += 1 };
  s3 -> s3 [0, 65535] { R16834 += 1, R16775 += 1, R16776 += 1 };
  s3 -> s4 [108, 108] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s3 -> s1 [109, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s4 -> s1 [0, 110] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R16834 += 1 };
  s4 -> s4 [0, 65535] { R16834 += 1, R16776 += 1 };
  s4 -> s7 [111, 111] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s4 -> s1 [112, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16834 += 1 };
  s7 -> s1 [0, 98] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R16834 += 1, R16776 += 1 };
  s7 -> s6 [0, 65535] { R16834 += 1 };
  s7 -> s8 [99, 99] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s7 -> s1 [100, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s8 -> s1 [0, 96] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R16834 += 1 };
  s8 -> s8 [0, 65535] { R16834 += 1, R16776 += 1 };
  s8 -> s9 [97, 97] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s8 -> s1 [98, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s9 -> s1 [0, 107] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s9 -> s9 [0, 65535] { R16834 += 1, R16776 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R16834 += 1 };
  s9 -> s10 [108, 108] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s9 -> s1 [109, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s10 -> s1 [0, 103] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R16834 += 1 };
  s10 -> s10 [0, 65535] { R16834 += 1, R16776 += 1 };
  s10 -> s11 [104, 104] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s10 -> s1 [105, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s11 -> s1 [0, 110] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R16834 += 1 };
  s11 -> s11 [0, 65535] { R16834 += 1, R16776 += 1 };
  s11 -> s12 [111, 111] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s11 -> s1 [112, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s12 -> s1 [0, 114] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R16834 += 1 };
  s12 -> s12 [0, 65535] { R16834 += 1, R16776 += 1 };
  s12 -> s13 [115, 115] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s12 -> s1 [116, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s13 -> s1 [0, 115] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R16834 += 1 };
  s13 -> s13 [0, 65535] { R16834 += 1, R16776 += 1 };
  s13 -> s14 [116, 116] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s13 -> s1 [117, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s14 -> s1 [0, 65535] { R16834 += 1, R16776 += 1, R16724 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s6 [0, 65535] { R16834 += 1 };
  s15 -> s15 [0, 65535] { R16834 += 1, R16776 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R16836 += 1, R16777 += 1, R16778 += 1 };
  s0 -> s2 [0, 65535] { R16836 += 1, R16778 += 1, R16726 += 1, R0 += 1 };
  s0 -> s3 [0, 65535] { R16836 += 1, R16778 += 1, R16725 += 1, R16726 += 1 };
  s0 -> s0 [0, 65535] { R16835 += 1, R16836 += 1 };
  s1 -> s1 [0, 65535] { R16836 += 1, R16777 += 1, R16778 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R16836 += 1, R16778 += 1, R16726 += 1, R0 += 1 };
  s1 -> s3 [0, 65535] { R16836 += 1, R16778 += 1, R16725 += 1, R16726 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16836 += 1, R16778 += 1, R16726 += 1, R0 += 1 };
  s2 -> s5 [0, 65535] { R16836 += 1 };
  s2 -> s6 [0, 65535] { R16836 += 1, R16778 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R16836 += 1, R16778 += 1, R16726 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R16836 += 1, R16778 += 1, R16725 += 1, R16726 += 1 };
  s3 -> s5 [0, 65535] { R16836 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16836 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R16836 += 1 };
  s6 -> s6 [0, 65535] { R16836 += 1, R16778 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R16838 += 1, R16780 += 1, R16732 += 1, R16711 += 1 };
  s0 -> s2 [0, 65535] { R16838 += 1, R16779 += 1, R16780 += 1 };
  s0 -> s0 [0, 65535] { R16837 += 1, R16838 += 1 };
  s0 -> s3 [0, 65535] { R16838 += 1, R16780 += 1, R16731 += 1, R16732 += 1 };
  s1 -> s1 [0, 65535] { R16838 += 1, R16780 += 1, R16732 += 1, R16711 += 1 };
  s1 -> s4 [0, 65535] { R16838 += 1 };
  s1 -> s6 [0, 65535] { R16838 += 1, R16780 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R16838 += 1, R16780 += 1, R16732 += 1, R16711 += 1 };
  s2 -> s2 [0, 65535] { R16838 += 1, R16779 += 1, R16780 += 1 };
  s2 -> s3 [0, 65535] { R16838 += 1, R16780 += 1, R16731 += 1, R16732 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R16838 += 1, R16780 += 1, R16732 += 1, R16711 += 1 };
  s3 -> s4 [0, 65535] { R16838 += 1 };
  s3 -> s3 [0, 65535] { R16838 += 1, R16780 += 1, R16731 += 1, R16732 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16838 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R16838 += 1 };
  s6 -> s6 [0, 65535] { R16838 += 1, R16780 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 107] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s0 -> s2 [0, 65535] { R16840 += 1, R16782 += 1, R16733 += 1, R16734 += 1 };
  s0 -> s0 [0, 65535] { R16839 += 1, R16840 += 1 };
  s0 -> s3 [0, 65535] { R16840 += 1, R16781 += 1, R16782 += 1 };
  s0 -> s4 [108, 108] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s0 -> s1 [109, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s1 -> s5 [0, 65535] { R16840 += 1 };
  s1 -> s1 [0, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s15 [0, 65535] { R16840 += 1, R16782 += 1 };
  s2 -> s1 [0, 107] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s2 -> s2 [0, 65535] { R16840 += 1, R16782 += 1, R16733 += 1, R16734 += 1 };
  s2 -> s5 [0, 65535] { R16840 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [108, 108] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s2 -> s1 [109, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s3 -> s1 [0, 107] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s3 -> s2 [0, 65535] { R16840 += 1, R16782 += 1, R16733 += 1, R16734 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R16840 += 1, R16781 += 1, R16782 += 1 };
  s3 -> s4 [108, 108] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s3 -> s1 [109, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s4 -> s1 [0, 110] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s4 -> s5 [0, 65535] { R16840 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R16840 += 1, R16782 += 1 };
  s4 -> s7 [111, 111] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s4 -> s1 [112, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s5 -> s5 [0, 65535] { R16840 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s7 -> s7 [0, 65535] { R16840 += 1, R16782 += 1 };
  s7 -> s5 [0, 65535] { R16840 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [99, 99] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s7 -> s1 [100, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s8 -> s1 [0, 96] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s8 -> s5 [0, 65535] { R16840 += 1 };
  s8 -> s8 [0, 65535] { R16840 += 1, R16782 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [97, 97] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s8 -> s1 [98, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s9 -> s1 [0, 107] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s9 -> s5 [0, 65535] { R16840 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R16840 += 1, R16782 += 1 };
  s9 -> s10 [108, 108] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s9 -> s1 [109, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s10 -> s1 [0, 103] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s10 -> s5 [0, 65535] { R16840 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R16840 += 1, R16782 += 1 };
  s10 -> s11 [104, 104] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s10 -> s1 [105, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s11 -> s1 [0, 110] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s11 -> s11 [0, 65535] { R16840 += 1, R16782 += 1 };
  s11 -> s5 [0, 65535] { R16840 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s12 [111, 111] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s11 -> s1 [112, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s12 -> s1 [0, 114] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s12 -> s5 [0, 65535] { R16840 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R16840 += 1, R16782 += 1 };
  s12 -> s13 [115, 115] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s12 -> s1 [116, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s13 -> s1 [0, 115] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s13 -> s5 [0, 65535] { R16840 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R16840 += 1, R16782 += 1 };
  s13 -> s14 [116, 116] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s13 -> s1 [117, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s14 -> s1 [0, 65535] { R16840 += 1, R16782 += 1, R16734 += 1 };
  s15 -> s5 [0, 65535] { R16840 += 1 };
  s15 -> s6 [0, 65535];
  s15 -> s15 [0, 65535] { R16840 += 1, R16782 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R16842 += 1, R16783 += 1, R16784 += 1 };
  s0 -> s0 [0, 65535] { R16841 += 1, R16842 += 1 };
  s0 -> s2 [0, 65535] { R16842 += 1, R16784 += 1, R16736 += 1, R16728 += 1 };
  s0 -> s3 [0, 65535] { R16842 += 1, R16784 += 1, R16735 += 1, R16736 += 1 };
  s1 -> s1 [0, 65535] { R16842 += 1, R16783 += 1, R16784 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R16842 += 1, R16784 += 1, R16736 += 1, R16728 += 1 };
  s1 -> s3 [0, 65535] { R16842 += 1, R16784 += 1, R16735 += 1, R16736 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R16842 += 1, R16784 += 1 };
  s2 -> s2 [0, 65535] { R16842 += 1, R16784 += 1, R16736 += 1, R16728 += 1 };
  s2 -> s4 [0, 65535] { R16842 += 1 };
  s3 -> s4 [0, 65535] { R16842 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R16842 += 1, R16784 += 1, R16736 += 1, R16728 += 1 };
  s3 -> s3 [0, 65535] { R16842 += 1, R16784 += 1, R16735 += 1, R16736 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16842 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16842 += 1, R16784 += 1 };
  s6 -> s4 [0, 65535] { R16842 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 83] { R16844 += 1, R16786 += 1, R16738 += 1 };
  s0 -> s2 [0, 65535] { R16844 += 1, R16786 += 1, R16737 += 1, R16738 += 1 };
  s0 -> s0 [0, 65535] { R16843 += 1, R16844 += 1 };
  s0 -> s3 [0, 65535] { R16844 += 1, R16785 += 1, R16786 += 1 };
  s0 -> s1 [85, 65535] { R16844 += 1, R16786 += 1, R16738 += 1 };
  s1 -> s1 [0, 83] { R16844 += 1, R16786 += 1, R16738 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R16844 += 1 };
  s1 -> s1 [0, 65535] { R16844 += 1, R16786 += 1 };
  s1 -> s1 [85, 65535] { R16844 += 1, R16786 += 1, R16738 += 1 };
  s2 -> s1 [0, 83] { R16844 += 1, R16786 += 1, R16738 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16844 += 1, R16786 += 1, R16737 += 1, R16738 += 1 };
  s2 -> s5 [0, 65535] { R16844 += 1 };
  s2 -> s1 [85, 65535] { R16844 += 1, R16786 += 1, R16738 += 1 };
  s3 -> s1 [0, 83] { R16844 += 1, R16786 += 1, R16738 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R16844 += 1, R16786 += 1, R16737 += 1, R16738 += 1 };
  s3 -> s3 [0, 65535] { R16844 += 1, R16785 += 1, R16786 += 1 };
  s3 -> s1 [85, 65535] { R16844 += 1, R16786 += 1, R16738 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16844 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R16846 += 1, R16788 += 1, R16739 += 1, R16740 += 1 };
  s0 -> s2 [0, 65535] { R16846 += 1, R16787 += 1, R16788 += 1 };
  s0 -> s0 [0, 65535] { R16845 += 1, R16846 += 1 };
  s0 -> s3 [0, 65535] { R16846 += 1, R16788 += 1, R16740 += 1, R16712 += 1 };
  s1 -> s1 [0, 65535] { R16846 += 1, R16788 += 1, R16739 += 1, R16740 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R16846 += 1 };
  s1 -> s3 [0, 65535] { R16846 += 1, R16788 += 1, R16740 += 1, R16712 += 1 };
  s2 -> s1 [0, 65535] { R16846 += 1, R16788 += 1, R16739 += 1, R16740 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16846 += 1, R16787 += 1, R16788 += 1 };
  s2 -> s3 [0, 65535] { R16846 += 1, R16788 += 1, R16740 += 1, R16712 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R16846 += 1, R16788 += 1 };
  s3 -> s6 [0, 65535] { R16846 += 1 };
  s3 -> s3 [0, 65535] { R16846 += 1, R16788 += 1, R16740 += 1, R16712 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16846 += 1, R16788 += 1 };
  s5 -> s6 [0, 65535] { R16846 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R16846 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s0 -> s2 [0, 65535] { R16848 += 1, R16789 += 1, R16790 += 1 };
  s0 -> s0 [0, 65535] { R16847 += 1, R16848 += 1 };
  s0 -> s3 [0, 65535] { R16848 += 1, R16790 += 1, R16741 += 1, R16742 += 1 };
  s0 -> s1 [91, 107] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s0 -> s4 [108, 108] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s0 -> s1 [109, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s1 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R16848 += 1 };
  s1 -> s1 [0, 65535] { R16848 += 1, R16790 += 1 };
  s1 -> s1 [91, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s2 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16848 += 1, R16789 += 1, R16790 += 1 };
  s2 -> s3 [0, 65535] { R16848 += 1, R16790 += 1, R16741 += 1, R16742 += 1 };
  s2 -> s1 [91, 107] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s2 -> s4 [108, 108] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s2 -> s1 [109, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s3 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R16848 += 1 };
  s3 -> s3 [0, 65535] { R16848 += 1, R16790 += 1, R16741 += 1, R16742 += 1 };
  s3 -> s1 [91, 107] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s3 -> s4 [108, 108] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s3 -> s1 [109, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s4 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R16848 += 1 };
  s4 -> s4 [0, 65535] { R16848 += 1, R16790 += 1 };
  s4 -> s1 [91, 110] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s4 -> s7 [111, 111] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s4 -> s1 [112, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16848 += 1 };
  s7 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R16848 += 1 };
  s7 -> s7 [0, 65535] { R16848 += 1, R16790 += 1 };
  s7 -> s1 [91, 98] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s7 -> s8 [99, 99] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s7 -> s1 [100, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s8 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s8 -> s8 [0, 65535] { R16848 += 1, R16790 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R16848 += 1 };
  s8 -> s1 [91, 96] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s8 -> s9 [97, 97] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s8 -> s1 [98, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s9 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R16848 += 1 };
  s9 -> s9 [0, 65535] { R16848 += 1, R16790 += 1 };
  s9 -> s1 [91, 107] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s9 -> s10 [108, 108] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s9 -> s1 [109, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s10 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R16848 += 1 };
  s10 -> s10 [0, 65535] { R16848 += 1, R16790 += 1 };
  s10 -> s1 [91, 103] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s10 -> s11 [104, 104] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s10 -> s1 [105, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s11 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R16848 += 1, R16790 += 1 };
  s11 -> s6 [0, 65535] { R16848 += 1 };
  s11 -> s1 [91, 110] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s11 -> s12 [111, 111] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s11 -> s1 [112, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s12 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R16848 += 1 };
  s12 -> s12 [0, 65535] { R16848 += 1, R16790 += 1 };
  s12 -> s1 [91, 114] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s12 -> s13 [115, 115] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s12 -> s1 [116, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s13 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R16848 += 1 };
  s13 -> s13 [0, 65535] { R16848 += 1, R16790 += 1 };
  s13 -> s1 [91, 115] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s13 -> s14 [116, 116] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s13 -> s1 [117, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s14 -> s1 [0, 84] { R16848 += 1, R16790 += 1, R16742 += 1 };
  s14 -> s1 [91, 65535] { R16848 += 1, R16790 += 1, R16742 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R16850 += 1, R16791 += 1, R16792 += 1 };
  s0 -> s2 [0, 65535] { R16850 += 1, R16792 += 1, R16744 += 1, R16730 += 1 };
  s0 -> s3 [0, 65535] { R16850 += 1, R16792 += 1, R16743 += 1, R16744 += 1 };
  s0 -> s0 [0, 65535] { R16849 += 1, R16850 += 1 };
  s1 -> s1 [0, 65535] { R16850 += 1, R16791 += 1, R16792 += 1 };
  s1 -> s2 [0, 65535] { R16850 += 1, R16792 += 1, R16744 += 1, R16730 += 1 };
  s1 -> s3 [0, 65535] { R16850 += 1, R16792 += 1, R16743 += 1, R16744 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R16850 += 1, R16792 += 1 };
  s2 -> s4 [0, 65535] { R16850 += 1 };
  s2 -> s2 [0, 65535] { R16850 += 1, R16792 += 1, R16744 += 1, R16730 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R16850 += 1 };
  s3 -> s2 [0, 65535] { R16850 += 1, R16792 += 1, R16744 += 1, R16730 += 1 };
  s3 -> s3 [0, 65535] { R16850 += 1, R16792 += 1, R16743 += 1, R16744 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16850 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16850 += 1, R16792 += 1 };
  s6 -> s4 [0, 65535] { R16850 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R16852 += 1, R16794 += 1, R16753 += 1, R16754 += 1 };
  s0 -> s2 [0, 65535] { R16852 += 1, R16793 += 1, R16794 += 1 };
  s0 -> s3 [0, 65535] { R16852 += 1, R16794 += 1, R16754 += 1, R16713 += 1 };
  s0 -> s0 [0, 65535] { R16851 += 1, R16852 += 1 };
  s1 -> s1 [0, 65535] { R16852 += 1, R16794 += 1, R16753 += 1, R16754 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R16852 += 1, R16794 += 1, R16754 += 1, R16713 += 1 };
  s1 -> s5 [0, 65535] { R16852 += 1 };
  s2 -> s1 [0, 65535] { R16852 += 1, R16794 += 1, R16753 += 1, R16754 += 1 };
  s2 -> s2 [0, 65535] { R16852 += 1, R16793 += 1, R16794 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R16852 += 1, R16794 += 1, R16754 += 1, R16713 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16852 += 1, R16794 += 1, R16754 += 1, R16713 += 1 };
  s3 -> s5 [0, 65535] { R16852 += 1 };
  s3 -> s6 [0, 65535] { R16852 += 1, R16794 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16852 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R16852 += 1 };
  s6 -> s6 [0, 65535] { R16852 += 1, R16794 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 65535] { R16854 += 1, R16796 += 1 };
  s0 -> s0 [0, 65535] { R16853 += 1, R16854 += 1 };
  s0 -> s2 [0, 65535] { R16854 += 1, R16795 += 1, R16796 += 1 };
  s1 -> s1 [0, 65535] { R16854 += 1, R16796 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16854 += 1 };
  s2 -> s1 [0, 65535] { R16854 += 1, R16796 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16854 += 1, R16795 += 1, R16796 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16854 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 85] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s0 -> s2 [0, 65535] { R16856 += 1, R16797 += 1, R16798 += 1 };
  s0 -> s3 [0, 65535] { R16856 += 1, R16798 += 1, R16755 += 1, R16756 += 1 };
  s0 -> s0 [0, 65535] { R16855 += 1, R16856 += 1 };
  s0 -> s4 [86, 86] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s0 -> s5 [86, 86] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s0 -> s1 [87, 65535] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s1 -> s1 [0, 85] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s1 -> s6 [0, 65535] { R16856 += 1 };
  s1 -> s1 [0, 65535] { R16856 += 1, R16798 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [86, 86] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s1 -> s5 [86, 86] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s1 -> s1 [87, 65535] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s2 -> s1 [0, 85] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s2 -> s2 [0, 65535] { R16856 += 1, R16797 += 1, R16798 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R16856 += 1, R16798 += 1, R16755 += 1, R16756 += 1 };
  s2 -> s4 [86, 86] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s2 -> s5 [86, 86] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s2 -> s1 [87, 65535] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s3 -> s1 [0, 85] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s3 -> s6 [0, 65535] { R16856 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R16856 += 1, R16798 += 1, R16755 += 1, R16756 += 1 };
  s3 -> s4 [86, 86] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s3 -> s5 [86, 86] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s3 -> s1 [87, 65535] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s4 -> s6 [0, 65535] { R16856 += 1 };
  s4 -> s4 [0, 65535] { R16856 += 1, R16798 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 65535] { R16856 += 1 };
  s5 -> s7 [0, 65535] { R16856 += 1, R16798 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R16856 += 1, R16798 += 1, R16756 += 1, R16727 += 1 };
  s6 -> s6 [0, 65535] { R16856 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R16856 += 1 };
  s7 -> s7 [0, 65535] { R16856 += 1, R16798 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R16858 += 1, R16800 += 1, R16758 += 1, R16714 += 1 };
  s0 -> s2 [0, 65535] { R16858 += 1, R16799 += 1, R16800 += 1 };
  s0 -> s0 [0, 65535] { R16857 += 1, R16858 += 1 };
  s0 -> s3 [0, 65535] { R16858 += 1, R16800 += 1, R16757 += 1, R16758 += 1 };
  s1 -> s1 [0, 65535] { R16858 += 1, R16800 += 1, R16758 += 1, R16714 += 1 };
  s1 -> s4 [0, 65535] { R16858 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R16858 += 1, R16800 += 1 };
  s2 -> s1 [0, 65535] { R16858 += 1, R16800 += 1, R16758 += 1, R16714 += 1 };
  s2 -> s2 [0, 65535] { R16858 += 1, R16799 += 1, R16800 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R16858 += 1, R16800 += 1, R16757 += 1, R16758 += 1 };
  s3 -> s1 [0, 65535] { R16858 += 1, R16800 += 1, R16758 += 1, R16714 += 1 };
  s3 -> s4 [0, 65535] { R16858 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16858 += 1, R16800 += 1, R16757 += 1, R16758 += 1 };
  s4 -> s4 [0, 65535] { R16858 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R16858 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16858 += 1, R16800 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R16860 += 1, R16802 += 1 };
  s0 -> s0 [0, 65535] { R16859 += 1, R16860 += 1 };
  s0 -> s2 [0, 65535] { R16860 += 1, R16801 += 1, R16802 += 1 };
  s1 -> s4 [0, 65535] { R16860 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16860 += 1, R16802 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16860 += 1, R16802 += 1 };
  s2 -> s2 [0, 65535] { R16860 += 1, R16801 += 1, R16802 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16860 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 83] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s0 -> s0 [0, 65535] { R16861 += 1, R16862 += 1 };
  s0 -> s2 [0, 65535] { R16862 += 1, R16803 += 1, R16804 += 1 };
  s0 -> s3 [0, 65535] { R16862 += 1, R16804 += 1, R16759 += 1, R16760 += 1 };
  s0 -> s4 [84, 84] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s0 -> s5 [84, 84] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s0 -> s1 [85, 65535] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s1 -> s1 [0, 83] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s1 -> s1 [0, 65535] { R16862 += 1, R16804 += 1 };
  s1 -> s6 [0, 65535] { R16862 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [84, 84] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s1 -> s5 [84, 84] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s1 -> s1 [85, 65535] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s2 -> s1 [0, 83] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s2 -> s2 [0, 65535] { R16862 += 1, R16803 += 1, R16804 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R16862 += 1, R16804 += 1, R16759 += 1, R16760 += 1 };
  s2 -> s4 [84, 84] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s2 -> s5 [84, 84] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s2 -> s1 [85, 65535] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s3 -> s1 [0, 83] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s3 -> s6 [0, 65535] { R16862 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R16862 += 1, R16804 += 1, R16759 += 1, R16760 += 1 };
  s3 -> s4 [84, 84] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s3 -> s5 [84, 84] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s3 -> s1 [85, 65535] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s4 -> s4 [0, 65535] { R16862 += 1, R16804 += 1, R16760 += 1, R16729 += 1 };
  s4 -> s6 [0, 65535] { R16862 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R16862 += 1, R16804 += 1 };
  s5 -> s6 [0, 65535] { R16862 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R16862 += 1, R16804 += 1 };
  s6 -> s6 [0, 65535] { R16862 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R16862 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R16862 += 1, R16804 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R4 = R16744 && R5 = R16752 && R6 = R16862 && R17 = 0 && R18 = R16804 && R16719 = 0 && R16720 = 1 && R16721 = 0 && R16722 = 1 && R16723 = 11 && R16724 = R16744 && R16725 = 11 && R16726 = R16744 && R16731 = 0 && R16732 = R16744 && R16733 = 0 && R16734 = R16744 && R16735 = 0 && R16736 = R16744 && R16737 = 0 && R16738 = R16744 && R16739 = 0 && R16740 = R16744 && R16741 = 0 && R16742 = R16744 && R16743 = 0 && R16745 - R16804 = 1 && R16746 = R16752 && R16747 - R16804 = 1 && R16748 = R16752 && R16749 - R16804 = 1 && R16750 = R16752 && R16751 - R16804 = 1 && R16761 = 0 && R16762 = R16804 && R16763 = 0 && R16764 = R16804 && R16765 = 0 && R16766 = R16804 && R16767 = 0 && R16768 = R16804 && R16769 = 0 && R16770 = R16804 && R16771 = 0 && R16772 = R16804 && R16773 = 0 && R16774 = R16804 && R16775 = 0 && R16776 = R16804 && R16777 = 0 && R16778 = R16804 && R16779 = 0 && R16780 = R16804 && R16781 = 0 && R16782 = R16804 && R16783 = 0 && R16784 = R16804 && R16785 = 0 && R16786 = R16804 && R16787 = 0 && R16788 = R16804 && R16789 = 0 && R16790 = R16804 && R16791 = 0 && R16792 = R16804 && R16793 = 0 && R16794 = R16804 && R16795 = 0 && R16796 = R16804 && R16797 = 0 && R16798 = R16804 && R16799 = 0 && R16800 = R16804 && R16801 = 0 && R16802 = R16804 && R16803 = 0 && R16805 = 10 && R16806 = R16862 && R16807 = 10 && R16808 = R16862 && R16809 = 10 && R16810 = R16862 && R16811 = 10 && R16812 = R16862 && R16813 = 10 && R16814 = R16862 && R16815 = 10 && R16816 = R16862 && R16817 = 10 && R16818 = R16862 && R16819 = 10 && R16820 = R16862 && R16821 = 10 && R16822 = R16862 && R16823 = 10 && R16824 = R16862 && R16825 = 10 && R16826 = R16862 && R16827 = 10 && R16828 = R16862 && R16829 = 10 && R16830 = R16862 && R16831 = 10 && R16832 = R16862 && R16833 = 10 && R16834 = R16862 && R16835 = 10 && R16836 = R16862 && R16837 = 10 && R16838 = R16862 && R16839 = 10 && R16840 = R16862 && R16841 = 10 && R16842 = R16862 && R16843 = 10 && R16844 = R16862 && R16845 = 10 && R16846 = R16862 && R16847 = 10 && R16848 = R16862 && R16849 = 10 && R16850 = R16862 && R16851 = 10 && R16852 = R16862 && R16853 = 10 && R16854 = R16862 && R16855 = 10 && R16856 = R16862 && R16857 = 10 && R16858 = R16862 && R16859 = 10 && R16860 = R16862 && R16861 = 10 && R0 != 0 && R3 != 0 && R16728 + R16727 != 0 && R16730 + R16729 != 0 && R9 < 1 && R10 < 1 && R13 < 1 && 10 < R16744 && R16804 < R16752 && -1 < R16804 && 9 < R16862 && (R16715 != 0 || ((R7 != 0 || ((R3 != R16716 || R16716 = 1 || R16716 < 0) && (R3 = R16716 || R16716 = 1 || R3 < 1))) && (R7 = 0 || ((R3 != R16716 || R16716 = 1 || R16716 < 0) && (R16716 != 1 || -1 < R3) && (R3 = R16716 || R16716 = 1))))) && (R16717 != 0 || ((R7 != 0 || ((R3 != R16718 || R16718 = 1 || R16718 < 0) && (R3 = R16718 || R16718 = 1 || R3 < 1))) && (R7 = 0 || ((R3 != R16718 || R16718 = 1 || R16718 < 0) && (R16718 != 1 || -1 < R3) && (R3 = R16718 || R16718 = 1))))) && (R16713 = 0 || (R16753 = 0 && R16754 = 0)) && (R16713 = 0 || (R16755 = 0 && R16756 = 0)) && (R16714 = 0 || (R16757 = 0 && R16758 = 0)) && (R16714 = 0 || (R16759 = 0 && R16760 = 0)) && (R16715 = 0 || (R7 = 0 && R3 < 0)) && (R16717 = 0 || (R7 = 0 && R3 < 0));
// End of Parikh automata intersection problem
