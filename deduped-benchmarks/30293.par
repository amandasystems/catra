// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R5, R8, R9;
synchronised {  // Automata constraining address
automaton address_0 {
  init s0;
  s0 -> s0 [0, 46];
  s0 -> s1 [47, 47];
  s0 -> s0 [48, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton address_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton address_2 {
  init s0;
  s0 -> s1 [0, 46];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [47, 47];
  s0 -> s1 [48, 65535];
  s1 -> s1 [0, 46];
  s1 -> s2 [47, 47];
  s1 -> s1 [48, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton address_3 {
  init s0;
  s0 -> s1 [0, 46] { R14 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s2 [47, 47] { R14 += 1 };
  s0 -> s1 [48, 65535] { R14 += 1 };
  s1 -> s1 [0, 46] { R14 += 1 };
  s1 -> s2 [47, 47] { R14 += 1 };
  s1 -> s1 [48, 65535] { R14 += 1 };
  s2 -> s2 [0, 65535] { R14 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton address_4 {
  init s0;
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s1 [0, 65535] { R16 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton address_5 {
  init s0;
  s0 -> s1 [0, 46] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R18 += 1, R2 += 1 };
  s0 -> s3 [47, 47] { R18 += 1 };
  s0 -> s1 [48, 65535] { R18 += 1 };
  s1 -> s1 [0, 46] { R18 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [47, 47] { R18 += 1 };
  s1 -> s1 [48, 65535] { R18 += 1 };
  s2 -> s1 [0, 46] { R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18 += 1, R2 += 1 };
  s2 -> s3 [47, 47] { R18 += 1 };
  s2 -> s1 [48, 65535] { R18 += 1 };
  s3 -> s3 [0, 65535] { R18 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton address_6 {
  init s0;
  s0 -> s1 [0, 46] { R20 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R20 += 1, R9 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s3 [47, 47] { R20 += 1, R10 += 1 };
  s0 -> s1 [48, 65535] { R20 += 1, R10 += 1 };
  s1 -> s1 [0, 46] { R20 += 1, R10 += 1 };
  s1 -> s3 [47, 47] { R20 += 1, R10 += 1 };
  s1 -> s1 [48, 65535] { R20 += 1, R10 += 1 };
  s2 -> s1 [0, 46] { R20 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R20 += 1, R9 += 1, R10 += 1 };
  s2 -> s3 [47, 47] { R20 += 1, R10 += 1 };
  s2 -> s1 [48, 65535] { R20 += 1, R10 += 1 };
  s3 -> s4 [0, 65535] { R20 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R20 += 1, R10 += 1 };
  s4 -> s4 [0, 65535] { R20 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton address_7 {
  init s0;
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s1 [0, 65535] { R22 += 1, R12 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R22 += 1, R11 += 1, R12 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R22 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1, R12 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R22 += 1, R12 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R22 += 1, R11 += 1, R12 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R22 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R10 && R1 = R20 && R9 = 0 && R13 = 0 && R14 = R20 && R19 = 0 && R2 < 1 && R5 < 1 && -1 < R10 && -1 < R20 && (R11 != 0 || R10 = R12 || (R8 = 0 && R10 = 0)) && (R15 != 0 || R16 = R20 || (R10 = 0 && R20 = 0)) && (R17 != 0 || R18 = R20 || (R10 = 0 && R20 = 0)) && (R21 != 0 || R20 = R22 || (R10 = 0 && R20 = 0)) && (R11 = 0 || (R8 = 0 && R10 = 0)) && (R15 = 0 || (R10 = 0 && R20 = 0)) && (R17 = 0 || (R10 = 0 && R20 = 0)) && (R21 = 0 || (R10 = 0 && R20 = 0));
// End of Parikh automata intersection problem
