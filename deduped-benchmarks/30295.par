// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R10, R11, R12, R13, R2, R3, R9;
synchronised {  // Automata constraining address
automaton address_0 {
  init s0;
  s0 -> s0 [0, 46];
  s0 -> s1 [47, 47];
  s0 -> s0 [48, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton address_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton address_2 {
  init s0;
  s0 -> s1 [0, 46] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [47, 47];
  s0 -> s1 [48, 65535] { R3 += 1 };
  s1 -> s1 [0, 46] { R3 += 1 };
  s1 -> s2 [47, 47];
  s1 -> s1 [48, 65535] { R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton address_3 {
  init s0;
  s0 -> s1 [0, 46] { R11 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s0 -> s2 [47, 47] { R11 += 1 };
  s0 -> s1 [48, 65535] { R11 += 1 };
  s1 -> s1 [0, 46] { R11 += 1 };
  s1 -> s2 [47, 47] { R11 += 1 };
  s1 -> s1 [48, 65535] { R11 += 1 };
  s2 -> s2 [0, 65535] { R11 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton address_4 {
  init s0;
  s0 -> s1 [0, 65535] { R13 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R13 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R11 && R2 = 0 && R3 - R10 = -1 && R10 - R11 < 1 && -1 < R10 && (R10 != R12 || R11 = R13 || ((R9 != 0 || R11 - R12 < 1 || R12 < 0) && (R9 = 0 || R11 < R12 || R12 < 0))) && (R10 = R12 || (R9 = 0 && R10 = R11));
// End of Parikh automata intersection problem
