// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R4, R47, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 36];
  s0 -> s1 [37, 37];
  s0 -> s0 [38, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 36];
  s0 -> s0 [0, 65535] { R47 += 1 };
  s0 -> s2 [37, 37];
  s0 -> s1 [38, 65535];
  s1 -> s1 [0, 36];
  s1 -> s2 [37, 37];
  s1 -> s1 [38, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 36] { R58 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s2 [37, 37] { R58 += 1 };
  s0 -> s1 [38, 65535] { R58 += 1 };
  s1 -> s1 [0, 36] { R58 += 1 };
  s1 -> s2 [37, 37] { R58 += 1 };
  s1 -> s1 [38, 65535] { R58 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R58 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R60 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535] { R60 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R62 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R62 += 1, R4 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s3 [37, 37] { R62 += 1 };
  s0 -> s1 [38, 65535] { R62 += 1, R5 += 1 };
  s1 -> s1 [0, 36] { R62 += 1, R5 += 1 };
  s1 -> s3 [37, 37] { R62 += 1 };
  s1 -> s1 [38, 65535] { R62 += 1, R5 += 1 };
  s2 -> s1 [0, 36] { R62 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R62 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [37, 37] { R62 += 1 };
  s2 -> s1 [38, 65535] { R62 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R62 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s0 -> s1 [0, 65535] { R64 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R64 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R66 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R66 += 1, R54 += 1, R50 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R66 += 1, R54 += 1, R50 += 1 };
  s2 -> s3 [0, 65535] { R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R66 += 1, R54 += 1, R50 += 1 };
  s3 -> s3 [0, 65535] { R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R68 += 1, R55 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R68 += 1, R56 += 1, R51 += 1, R52 += 1 };
  s0 -> s3 [0, 65535] { R68 += 1, R56 += 1, R52 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1, R55 += 1, R56 += 1 };
  s1 -> s2 [0, 65535] { R68 += 1, R56 += 1, R51 += 1, R52 += 1 };
  s1 -> s3 [0, 65535] { R68 += 1, R56 += 1, R52 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R68 += 1, R56 += 1, R51 += 1, R52 += 1 };
  s2 -> s3 [0, 65535] { R68 += 1, R56 += 1, R52 += 1, R0 += 1 };
  s2 -> s6 [0, 65535] { R68 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R68 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R68 += 1, R56 += 1, R52 += 1, R0 += 1 };
  s3 -> s6 [0, 65535] { R68 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R68 += 1, R56 += 1 };
  s5 -> s6 [0, 65535] { R68 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R68 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = 2 && R1 - R5 = 1 && R2 = R68 && R4 = 0 && R51 = 0 && R57 = 0 && R58 = R68 && R59 = 0 && R60 = R68 && R61 = 0 && R62 = R68 && R63 = 0 && R64 = R68 && R65 = 0 && R66 = R68 && R67 = 0 && -1 < R5 && R47 < 1 && R52 < 3 && 0 < R68 && (R5 != 0 || R50 = 0 || (R53 = 0 && R54 = 0)) && (R5 != 0 || R50 = 0 || (R55 = 0 && R56 = 0)) && (R52 != 2 || 1 < R50) && (R53 != 0 || R5 = R54 || R5 < 1) && (R55 != 0 || R5 = R56 || R5 < 1) && (R50 = R52 || 1 < R52) && (R53 = 0 || R5 < 1) && (R55 = 0 || R5 < 1);
// End of Parikh automata intersection problem
