// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R29, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R5;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 36];
  s0 -> s1 [37, 37];
  s0 -> s0 [38, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 36];
  s0 -> s0 [0, 65535] { R29 += 1 };
  s0 -> s2 [37, 37];
  s0 -> s1 [38, 65535];
  s1 -> s1 [0, 36];
  s1 -> s2 [37, 37];
  s1 -> s1 [38, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 36] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [37, 37] { R35 += 1 };
  s0 -> s1 [38, 65535] { R35 += 1 };
  s1 -> s1 [0, 36] { R35 += 1 };
  s1 -> s2 [37, 37] { R35 += 1 };
  s1 -> s1 [38, 65535] { R35 += 1 };
  s2 -> s2 [0, 65535] { R35 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R37 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R39 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R39 += 1, R4 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s0 -> s3 [37, 37] { R39 += 1 };
  s0 -> s1 [38, 65535] { R39 += 1, R5 += 1 };
  s1 -> s1 [0, 36] { R39 += 1, R5 += 1 };
  s1 -> s3 [37, 37] { R39 += 1 };
  s1 -> s1 [38, 65535] { R39 += 1, R5 += 1 };
  s2 -> s1 [0, 36] { R39 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R39 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [37, 37] { R39 += 1 };
  s2 -> s1 [38, 65535] { R39 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R39 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s1 [0, 65535] { R41 += 1, R33 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R41 += 1, R32 += 1, R33 += 1 };
  s1 -> s4 [0, 65535] { R41 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R41 += 1, R33 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R41 += 1, R33 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R41 += 1, R32 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R41 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R33 && R2 = R41 && R4 = 0 && R5 - R32 = -1 && R34 = 0 && R35 = R41 && R36 = 0 && R37 = R41 && R38 = 0 && R39 = R41 && R40 = 0 && R0 != 0 && R29 < 1 && R32 - R33 < 1 && -1 < R32 && 0 < R33 && 0 < R41;
// End of Parikh automata intersection problem
