// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R30, R31, R4, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 36];
  s0 -> s1 [37, 37];
  s0 -> s0 [38, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 36] { R31 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s2 [37, 37];
  s0 -> s1 [38, 65535] { R31 += 1 };
  s1 -> s1 [0, 36] { R31 += 1 };
  s1 -> s2 [37, 37];
  s1 -> s1 [38, 65535] { R31 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 36] { R45 += 1 };
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s0 -> s2 [37, 37] { R45 += 1 };
  s0 -> s1 [38, 65535] { R45 += 1 };
  s1 -> s1 [0, 36] { R45 += 1 };
  s1 -> s2 [37, 37] { R45 += 1 };
  s1 -> s1 [38, 65535] { R45 += 1 };
  s2 -> s2 [0, 65535] { R45 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s1 [0, 65535] { R47 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R47 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R49 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R49 += 1, R4 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s3 [37, 37] { R49 += 1 };
  s0 -> s1 [38, 65535] { R49 += 1, R5 += 1 };
  s1 -> s1 [0, 36] { R49 += 1, R5 += 1 };
  s1 -> s3 [37, 37] { R49 += 1 };
  s1 -> s1 [38, 65535] { R49 += 1, R5 += 1 };
  s2 -> s1 [0, 36] { R49 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R49 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [37, 37] { R49 += 1 };
  s2 -> s1 [38, 65535] { R49 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R49 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R51 += 1, R42 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R51 += 1, R43 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R51 += 1, R42 += 1, R43 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R51 += 1, R43 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R51 += 1, R43 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R51 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R43 && R2 = R51 && R4 = 0 && R5 - R42 = -1 && R30 = 0 && R31 - R50 = -1 && R44 = R50 && R45 = R51 && R46 = R50 && R47 = R51 && R48 = R50 && R49 = R51 && R0 != 0 && R42 - R43 < 1 && -1 < R42 && 0 < R43 && R50 - R51 < 1 && -1 < R50 && 0 < R51;
// End of Parikh automata intersection problem
