// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R3, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 36];
  s0 -> s1 [37, 37];
  s0 -> s0 [38, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 36] { R8 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s2 [37, 37];
  s0 -> s1 [38, 65535] { R8 += 1 };
  s1 -> s1 [0, 36] { R8 += 1 };
  s1 -> s2 [37, 37];
  s1 -> s1 [38, 65535] { R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 36] { R22 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s2 [37, 37] { R22 += 1 };
  s0 -> s1 [38, 65535] { R22 += 1 };
  s1 -> s1 [0, 36] { R22 += 1 };
  s1 -> s2 [37, 37] { R22 += 1 };
  s1 -> s1 [38, 65535] { R22 += 1 };
  s2 -> s2 [0, 65535] { R22 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s1 [0, 65535] { R24 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R26 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R26 += 1, R3 += 1 };
  s0 -> s3 [37, 37] { R26 += 1 };
  s0 -> s1 [38, 65535] { R26 += 1 };
  s1 -> s1 [0, 36] { R26 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [37, 37] { R26 += 1 };
  s1 -> s1 [38, 65535] { R26 += 1 };
  s2 -> s1 [0, 36] { R26 += 1 };
  s2 -> s2 [0, 65535] { R26 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [37, 37] { R26 += 1 };
  s2 -> s1 [38, 65535] { R26 += 1 };
  s3 -> s3 [0, 65535] { R26 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R28 += 1, R19 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R28 += 1, R20 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R28 += 1, R19 += 1, R20 += 1 };
  s1 -> s2 [0, 65535] { R28 += 1, R20 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R28 += 1 };
  s2 -> s2 [0, 65535] { R28 += 1, R20 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R28 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R20 && R2 = R28 && R7 = 0 && R8 - R27 = -1 && R19 = 0 && R21 = R27 && R22 = R28 && R23 = R27 && R24 = R28 && R25 = R27 && R26 = R28 && R0 != 0 && R3 < 1 && 0 < R20 && R27 - R28 < 1 && -1 < R27 && 0 < R28;
// End of Parikh automata intersection problem
