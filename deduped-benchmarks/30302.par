// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R2, R3, R6, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 36];
  s0 -> s1 [37, 37];
  s0 -> s0 [38, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 36];
  s0 -> s0 [0, 65535] { R6 += 1 };
  s0 -> s2 [37, 37];
  s0 -> s1 [38, 65535];
  s1 -> s1 [0, 36];
  s1 -> s2 [37, 37];
  s1 -> s1 [38, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 36] { R12 += 1 };
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s2 [37, 37] { R12 += 1 };
  s0 -> s1 [38, 65535] { R12 += 1 };
  s1 -> s1 [0, 36] { R12 += 1 };
  s1 -> s2 [37, 37] { R12 += 1 };
  s1 -> s1 [38, 65535] { R12 += 1 };
  s2 -> s2 [0, 65535] { R12 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s1 [0, 65535] { R14 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R16 += 1, R3 += 1 };
  s0 -> s3 [37, 37] { R16 += 1 };
  s0 -> s1 [38, 65535] { R16 += 1 };
  s1 -> s1 [0, 36] { R16 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [37, 37] { R16 += 1 };
  s1 -> s1 [38, 65535] { R16 += 1 };
  s2 -> s1 [0, 36] { R16 += 1 };
  s2 -> s2 [0, 65535] { R16 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [37, 37] { R16 += 1 };
  s2 -> s1 [38, 65535] { R16 += 1 };
  s3 -> s3 [0, 65535] { R16 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R18 += 1, R10 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R18 += 1, R9 += 1, R10 += 1 };
  s1 -> s4 [0, 65535] { R18 += 1 };
  s1 -> s1 [0, 65535] { R18 += 1, R10 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18 += 1, R10 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18 += 1, R9 += 1, R10 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R10 && R2 = R18 && R9 = 0 && R11 = 0 && R12 = R18 && R13 = 0 && R14 = R18 && R15 = 0 && R16 = R18 && R17 = 0 && R0 != 0 && R3 < 1 && R6 < 1 && 0 < R10 && 0 < R18;
// End of Parikh automata intersection problem
