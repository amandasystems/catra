// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 34];
  s0 -> s1 [35, 35];
  s0 -> s0 [36, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R2 += 1 };
  s0 -> s0 [0, 65535] { R1 += 1, R2 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R2 += 1 };
  s1 -> s1 [0, 57] { R2 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R14 += 1 };
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 103] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [104, 104] { R18 += 1 };
  s0 -> s1 [105, 65535] { R18 += 1 };
  s1 -> s1 [0, 65535] { R18 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 115] { R18 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [116, 116] { R18 += 1 };
  s2 -> s1 [117, 65535] { R18 += 1 };
  s3 -> s1 [0, 115] { R18 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [116, 116] { R18 += 1 };
  s3 -> s1 [117, 65535] { R18 += 1 };
  s4 -> s1 [0, 111] { R18 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [112, 112] { R18 += 1 };
  s4 -> s1 [113, 65535] { R18 += 1 };
  s5 -> s1 [0, 65535] { R18 += 1 };
  s6 -> s6 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R20 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R20 += 1, R15 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 46] { R22 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s2 [47, 47] { R22 += 1 };
  s0 -> s1 [48, 65535] { R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R22 += 1 };
  s2 -> s1 [0, 46] { R22 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [47, 47] { R22 += 1 };
  s2 -> s1 [48, 65535] { R22 += 1 };
  s3 -> s1 [0, 65535] { R22 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 65535] { R24 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1, R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = 0 && 0 < R2 && (R16 != 0 || ((R21 != 0 || ((R23 != 0 || ((R14 != R22 || R22 < 3) && (R14 != R24 || R24 < 3) && (R14 != 1 || R22 != 2) && (R14 != 1 || R24 != 2) && (R14 = R22 || R22 = 2 || R14 < 1) && (R14 = R24 || R24 = 2 || R14 < 1))) && (R23 = 0 || R14 < 1))) && (R21 = 0 || R14 < 1))) && (R17 != 0 || ((R15 != 0 || ((R2 != R18 || R18 - R14 < 1 || R14 < 1) && (R14 != R18 || R18 - R2 < 1) && (R2 = R18 || R14 = R18 || R14 < 1))) && (R15 = 0 || (R18 - R2 < 1 && (R2 != R18 || R18 - R14 < 1 || R18 < 1) && (R14 = R18 || R2 - R18 < 1))))) && (R19 != 0 || ((R15 != 0 || ((R2 != R20 || R20 - R14 < 1 || R14 < 1) && (R14 != R20 || R20 - R2 < 1) && (R2 = R20 || R14 = R20 || R14 < 1))) && (R15 = 0 || (R20 - R2 < 1 && (R2 != R20 || R20 - R14 < 1 || R20 < 1) && (R14 = R20 || R2 - R20 < 1))))) && (R16 = 0 || (R21 = 0 && R23 = 0 && R22 < 3 && R24 < 3 && (R22 != 2 || 1 < R14) && (R24 != 2 || 1 < R14) && (R14 = R22 || 1 < R22) && (R14 = R24 || 1 < R24))) && (R17 = 0 || (R15 = 0 && R14 < 1)) && (R19 = 0 || (R15 = 0 && R14 < 1));
// End of Parikh automata intersection problem
