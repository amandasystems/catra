// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R106, R107, R158, R159, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R3;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R159 += 1 };
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R159 += 1 };
  s1 -> s1 [0, 57] { R159 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R159 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R192 += 1, R193 += 1 };
  s0 -> s1 [104, 104] { R193 += 1 };
  s1 -> s2 [116, 116] { R193 += 1 };
  s2 -> s3 [116, 116] { R193 += 1 };
  s3 -> s4 [112, 112] { R193 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R195 += 1, R185 += 1 };
  s0 -> s0 [0, 65535] { R194 += 1, R195 += 1 };
  s1 -> s1 [0, 65535] { R195 += 1, R185 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 62] { R197 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R197 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R196 += 1, R197 += 1 };
  s0 -> s3 [63, 63] { R197 += 1 };
  s0 -> s1 [64, 65535] { R197 += 1, R107 += 1 };
  s1 -> s1 [0, 62] { R197 += 1, R107 += 1 };
  s1 -> s3 [63, 63] { R197 += 1 };
  s1 -> s1 [64, 65535] { R197 += 1, R107 += 1 };
  s2 -> s1 [0, 62] { R197 += 1, R107 += 1 };
  s2 -> s2 [0, 65535] { R197 += 1, R106 += 1, R107 += 1 };
  s2 -> s3 [63, 63] { R197 += 1 };
  s2 -> s1 [64, 65535] { R197 += 1, R107 += 1 };
  s3 -> s3 [0, 65535] { R197 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 65535] { R199 += 1, R183 += 1 };
  s0 -> s0 [0, 65535] { R198 += 1, R199 += 1 };
  s1 -> s1 [0, 65535] { R199 += 1, R183 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R201 += 1, R187 += 1 };
  s0 -> s2 [0, 65535] { R201 += 1, R186 += 1, R187 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s3 [47, 47] { R201 += 1, R187 += 1 };
  s0 -> s1 [48, 58] { R201 += 1, R187 += 1 };
  s0 -> s4 [59, 59] { R201 += 1, R187 += 1 };
  s0 -> s1 [60, 65535] { R201 += 1, R187 += 1 };
  s1 -> s1 [0, 46] { R201 += 1, R187 += 1 };
  s1 -> s3 [47, 47] { R201 += 1, R187 += 1 };
  s1 -> s1 [48, 58] { R201 += 1, R187 += 1 };
  s1 -> s4 [59, 59] { R201 += 1, R187 += 1 };
  s1 -> s1 [60, 65535] { R201 += 1, R187 += 1 };
  s2 -> s1 [0, 46] { R201 += 1, R187 += 1 };
  s2 -> s2 [0, 65535] { R201 += 1, R186 += 1, R187 += 1 };
  s2 -> s3 [47, 47] { R201 += 1, R187 += 1 };
  s2 -> s1 [48, 58] { R201 += 1, R187 += 1 };
  s2 -> s4 [59, 59] { R201 += 1, R187 += 1 };
  s2 -> s1 [60, 65535] { R201 += 1, R187 += 1 };
  s3 -> s3 [0, 58] { R201 += 1, R187 += 1 };
  s3 -> s5 [59, 59] { R201 += 1, R187 += 1 };
  s3 -> s3 [60, 65535] { R201 += 1, R187 += 1 };
  s4 -> s4 [0, 46] { R201 += 1, R187 += 1 };
  s4 -> s5 [47, 47] { R201 += 1, R187 += 1 };
  s4 -> s4 [48, 65535] { R201 += 1, R187 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R201 += 1 };
  s5 -> s5 [0, 65535] { R201 += 1, R187 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R201 += 1 };
  accepting s5, s6, s7;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 58] { R203 += 1, R189 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R203 += 1, R189 += 1, R2 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R202 += 1, R203 += 1 };
  s0 -> s3 [0, 65535] { R203 += 1, R188 += 1, R189 += 1 };
  s0 -> s4 [59, 59] { R203 += 1, R189 += 1 };
  s0 -> s1 [60, 65535] { R203 += 1, R189 += 1, R3 += 1 };
  s1 -> s1 [0, 58] { R203 += 1, R189 += 1, R3 += 1 };
  s1 -> s4 [59, 59] { R203 += 1, R189 += 1 };
  s1 -> s1 [60, 65535] { R203 += 1, R189 += 1, R3 += 1 };
  s2 -> s1 [0, 58] { R203 += 1, R189 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R203 += 1, R189 += 1, R2 += 1, R3 += 1 };
  s2 -> s4 [59, 59] { R203 += 1, R189 += 1 };
  s2 -> s1 [60, 65535] { R203 += 1, R189 += 1, R3 += 1 };
  s3 -> s1 [0, 58] { R203 += 1, R189 += 1, R3 += 1 };
  s3 -> s2 [0, 65535] { R203 += 1, R189 += 1, R2 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R203 += 1, R188 += 1, R189 += 1 };
  s3 -> s4 [59, 59] { R203 += 1, R189 += 1 };
  s3 -> s1 [60, 65535] { R203 += 1, R189 += 1, R3 += 1 };
  s4 -> s4 [0, 65535] { R203 += 1, R189 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R203 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R203 += 1 };
  accepting s4, s5, s6;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 65535] { R205 += 1, R190 += 1, R191 += 1 };
  s0 -> s2 [0, 65535] { R205 += 1, R191 += 1, R184 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s1 -> s1 [0, 65535] { R205 += 1, R190 += 1, R191 += 1 };
  s1 -> s2 [0, 65535] { R205 += 1, R191 += 1, R184 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R205 += 1, R191 += 1, R184 += 1 };
  s2 -> s3 [0, 65535] { R205 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R205 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R203 && R2 = 3 && R106 = 0 && R158 = 0 && R159 - R202 = -1 && R186 = 0 && R188 = 0 && R192 = 0 && R193 - R202 = -1 && R196 = R202 && R197 = R203 && R200 = R202 && R201 = R203 && R3 < 0 && R187 - R107 < 1 && R189 - R107 < 1 && -1 < R107 && R187 - R183 < 1 && R189 - R183 < 1 && R202 - R203 < 1 && 0 < R202 && (R190 != 0 || ((R184 != 0 || ((R107 != R191 || R191 - R183 < 1 || R183 < 1) && (R183 != R191 || R191 - R107 < 1 || R107 < 1) && (R107 = R191 || R183 = R191 || R107 < 1 || R183 < 1))) && (R184 = 0 || (R191 - R107 < 1 && (R107 != R191 || R191 - R183 < 1 || R191 < 0) && (R183 = R191 || R107 - R191 < 1))))) && (R194 != 0 || R195 - R202 = -1 || (R185 = 0 && R202 = 1)) && (R198 != R202 || R199 = R203 || (R183 = 0 && R202 = R203)) && (R202 != R204 || R203 = R205 || ((R183 != 0 || R203 - R204 < 1 || R204 < 1) && (R183 = 0 || R203 < R204 || R204 < 1))) && (R190 = 0 || (R184 = 0 && (R107 < 1 || R183 < 1))) && (R194 = 0 || (R185 = 0 && R202 = 1)) && (R198 = R202 || (R183 = 0 && R202 = R203)) && (R202 = R204 || (R183 = 0 && R202 = R203)) && (R107 - R187 < 1 || R183 - R187 < 1) && (R107 - R189 < 1 || R183 - R189 < 1);
// End of Parikh automata intersection problem
