// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R5, R57, R58, R6, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R58 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R58 += 1 };
  s1 -> s1 [0, 57] { R58 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R58 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s0 -> s1 [104, 104] { R92 += 1 };
  s1 -> s2 [116, 116] { R92 += 1 };
  s2 -> s3 [116, 116] { R92 += 1 };
  s3 -> s4 [112, 112] { R92 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s0 -> s1 [0, 65535] { R94 += 1, R84 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R94 += 1, R84 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 62] { R96 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R96 += 1, R5 += 1, R6 += 1 };
  s0 -> s3 [63, 63] { R96 += 1 };
  s0 -> s1 [64, 65535] { R96 += 1, R6 += 1 };
  s1 -> s1 [0, 62] { R96 += 1, R6 += 1 };
  s1 -> s3 [63, 63] { R96 += 1 };
  s1 -> s1 [64, 65535] { R96 += 1, R6 += 1 };
  s2 -> s1 [0, 62] { R96 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R96 += 1, R5 += 1, R6 += 1 };
  s2 -> s3 [63, 63] { R96 += 1 };
  s2 -> s1 [64, 65535] { R96 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R96 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_5 {
  init s0;
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s1 [0, 65535] { R98 += 1, R82 += 1 };
  s1 -> s1 [0, 65535] { R98 += 1, R82 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R100 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R100 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [47, 47] { R100 += 1, R86 += 1 };
  s0 -> s1 [48, 58] { R100 += 1, R86 += 1 };
  s0 -> s4 [59, 59] { R100 += 1, R86 += 1 };
  s0 -> s1 [60, 65535] { R100 += 1, R86 += 1 };
  s1 -> s1 [0, 46] { R100 += 1, R86 += 1 };
  s1 -> s3 [47, 47] { R100 += 1, R86 += 1 };
  s1 -> s1 [48, 58] { R100 += 1, R86 += 1 };
  s1 -> s4 [59, 59] { R100 += 1, R86 += 1 };
  s1 -> s1 [60, 65535] { R100 += 1, R86 += 1 };
  s2 -> s1 [0, 46] { R100 += 1, R86 += 1 };
  s2 -> s2 [0, 65535] { R100 += 1, R85 += 1, R86 += 1 };
  s2 -> s3 [47, 47] { R100 += 1, R86 += 1 };
  s2 -> s1 [48, 58] { R100 += 1, R86 += 1 };
  s2 -> s4 [59, 59] { R100 += 1, R86 += 1 };
  s2 -> s1 [60, 65535] { R100 += 1, R86 += 1 };
  s3 -> s3 [0, 58] { R100 += 1, R86 += 1 };
  s3 -> s5 [59, 59] { R100 += 1, R86 += 1 };
  s3 -> s3 [60, 65535] { R100 += 1, R86 += 1 };
  s4 -> s4 [0, 46] { R100 += 1, R86 += 1 };
  s4 -> s5 [47, 47] { R100 += 1, R86 += 1 };
  s4 -> s4 [48, 65535] { R100 += 1, R86 += 1 };
  s5 -> s6 [0, 65535] { R100 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R100 += 1, R86 += 1 };
  s6 -> s6 [0, 65535] { R100 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s5, s6, s7;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 58] { R102 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R102 += 1, R88 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s3 [0, 65535] { R102 += 1, R87 += 1, R88 += 1 };
  s0 -> s4 [59, 59] { R102 += 1, R88 += 1 };
  s0 -> s1 [60, 65535] { R102 += 1, R88 += 1 };
  s1 -> s1 [0, 58] { R102 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R102 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [59, 59] { R102 += 1, R88 += 1 };
  s1 -> s1 [60, 65535] { R102 += 1, R88 += 1 };
  s2 -> s1 [0, 58] { R102 += 1, R88 += 1 };
  s2 -> s2 [0, 65535] { R102 += 1, R88 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R102 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [59, 59] { R102 += 1, R88 += 1 };
  s2 -> s1 [60, 65535] { R102 += 1, R88 += 1 };
  s3 -> s1 [0, 58] { R102 += 1, R88 += 1 };
  s3 -> s2 [0, 65535] { R102 += 1, R88 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R102 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [59, 59] { R102 += 1, R88 += 1 };
  s3 -> s1 [60, 65535] { R102 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R102 += 1, R88 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R102 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 65535] { R104 += 1, R90 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R104 += 1, R89 += 1, R90 += 1 };
  s1 -> s4 [0, 65535] { R104 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R104 += 1, R90 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R104 += 1, R90 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R104 += 1, R89 += 1, R90 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R104 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R100 && R5 = 0 && R57 = 0 && R58 - R99 = -1 && R85 = 0 && R91 = 0 && R92 - R99 = -1 && R95 = R99 && R96 = R100 && R1 < 4 && R86 - R6 < 1 && -1 < R6 && R86 - R82 < 1 && R99 - R100 < 1 && 0 < R99 && (R82 != 0 || ((R99 != R103 || ((R100 != R104 || ((R101 != R103 || R102 = R104 || R104 - R103 < 1 || R103 < 1) && (R101 = R103 || R104 - R103 < 1 || R103 < 1))) && (R100 = R104 || R100 - R103 < 1 || R103 < 1))) && (R99 = R103 || R100 - R99 < 1))) && (R87 != 0 || ((R83 != 0 || ((R6 != R88 || R88 - R82 < 1 || R82 < 1) && (R82 != R88 || R88 - R6 < 1 || R6 < 1) && (R6 = R88 || R82 = R88 || R6 < 1 || R82 < 1))) && (R83 = 0 || (R88 - R6 < 1 && (R6 != R88 || R88 - R82 < 1 || R88 < 0) && (R82 = R88 || R6 - R88 < 1))))) && (R89 != 0 || ((R83 != 0 || ((R6 != R90 || R90 - R82 < 1 || R82 < 1) && (R82 != R90 || R90 - R6 < 1 || R6 < 1) && (R6 = R90 || R82 = R90 || R6 < 1 || R82 < 1))) && (R83 = 0 || (R90 - R6 < 1 && (R6 != R90 || R90 - R82 < 1 || R90 < 0) && (R82 = R90 || R6 - R90 < 1))))) && (R93 != 0 || R94 - R99 = -1 || (R84 = 0 && R99 = 1)) && (R97 != R99 || R98 = R100 || (R82 = 0 && R99 = R100)) && (R82 = 0 || (R99 = R103 && (R100 != R104 || ((R101 != R103 || R102 = R104 || R104 < R103 || R103 < 1) && (R101 = R103 || R104 < R103 || R103 < 1))) && (R100 = R104 || R100 < R103 || R103 < 1))) && (R87 = 0 || (R83 = 0 && (R6 < 1 || R82 < 1))) && (R89 = 0 || (R83 = 0 && (R6 < 1 || R82 < 1))) && (R93 = 0 || (R84 = 0 && R99 = 1)) && (R97 = R99 || (R82 = 0 && R99 = R100)) && (R6 - R86 < 1 || R82 - R86 < 1);
// End of Parikh automata intersection problem
