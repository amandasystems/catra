// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R5, R6;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R6 += 1 };
  s1 -> s1 [0, 57] { R6 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [104, 104] { R34 += 1 };
  s1 -> s2 [116, 116] { R34 += 1 };
  s2 -> s3 [116, 116] { R34 += 1 };
  s3 -> s4 [112, 112] { R34 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R36 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R36 += 1, R28 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 46] { R38 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s0 -> s2 [0, 65535] { R38 += 1, R1 += 1 };
  s0 -> s3 [47, 47] { R38 += 1 };
  s0 -> s1 [48, 65535] { R38 += 1 };
  s1 -> s1 [0, 46] { R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [47, 47] { R38 += 1 };
  s1 -> s1 [48, 65535] { R38 += 1 };
  s2 -> s1 [0, 46] { R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R38 += 1, R1 += 1 };
  s2 -> s3 [47, 47] { R38 += 1 };
  s2 -> s1 [48, 65535] { R38 += 1 };
  s3 -> s3 [0, 65535] { R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 65535] { R40 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R40 += 1, R26 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 65535] { R42 += 1, R29 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s2 [47, 47] { R42 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R42 += 1, R29 += 1, R30 += 1 };
  s1 -> s2 [47, 47] { R42 += 1, R30 += 1 };
  s2 -> s3 [47, 47] { R42 += 1, R30 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R42 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R44 += 1, R32 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R44 += 1, R31 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R44 += 1, R32 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R44 += 1 };
  s2 -> s1 [0, 65535] { R44 += 1, R32 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R44 += 1, R31 += 1, R32 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R44 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R42 && R5 = 0 && R6 - R41 = -1 && R29 = 0 && R33 = 0 && R34 - R41 = -1 && R35 = 0 && R36 - R41 = -1 && R1 < 3 && R30 < 3 && R41 - R42 < 1 && 1 < R41 && (R30 != 2 || 1 < R26) && (R31 != 0 || ((R27 != 0 || ((R26 != R32 || R32 < 3) && (R26 != 1 || R32 != 2) && (R26 = R32 || R32 = 2 || R26 < 1))) && (R27 = 0 || (R32 < 3 && (R32 != 2 || 1 < R26) && (R26 = R32 || 1 < R32))))) && (R37 != R41 || R38 = R42 || (R26 = 0 && R41 = R42)) && (R39 != R41 || R40 = R42 || (R26 = 0 && R41 = R42)) && (R41 != R43 || R42 = R44 || ((R26 != 0 || R42 - R43 < 1 || R43 < 2) && (R26 = 0 || R42 < R43 || R43 < 2))) && (R26 = R30 || 1 < R30) && (R31 = 0 || (R27 = 0 && R26 < 1)) && (R37 = R41 || (R26 = 0 && R41 = R42)) && (R39 = R41 || (R26 = 0 && R41 = R42)) && (R41 = R43 || (R26 = 0 && R41 = R42));
// End of Parikh automata intersection problem
