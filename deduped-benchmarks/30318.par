// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R323, R324, R4, R483, R484, R563, R564, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R564 += 1 };
  s0 -> s0 [0, 65535] { R563 += 1, R564 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R564 += 1 };
  s1 -> s1 [0, 57] { R564 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R564 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R611 += 1, R612 += 1 };
  s0 -> s1 [104, 104] { R612 += 1 };
  s1 -> s2 [116, 116] { R612 += 1 };
  s2 -> s3 [116, 116] { R612 += 1 };
  s3 -> s4 [112, 112] { R612 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R613 += 1, R614 += 1 };
  s0 -> s1 [0, 65535] { R614 += 1, R604 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R614 += 1, R604 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R626 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R625 += 1, R626 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R626 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 46] { R628 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R628 += 1, R483 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R627 += 1, R628 += 1 };
  s0 -> s3 [47, 47] { R628 += 1 };
  s0 -> s1 [48, 65535] { R628 += 1, R484 += 1 };
  s1 -> s1 [0, 46] { R628 += 1, R484 += 1 };
  s1 -> s3 [47, 47] { R628 += 1 };
  s1 -> s1 [48, 65535] { R628 += 1, R484 += 1 };
  s2 -> s1 [0, 46] { R628 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R628 += 1, R483 += 1, R484 += 1 };
  s2 -> s3 [47, 47] { R628 += 1 };
  s2 -> s1 [48, 65535] { R628 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R628 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R630 += 1, R616 += 1, R324 += 1 };
  s0 -> s2 [0, 65535] { R630 += 1, R615 += 1, R616 += 1 };
  s0 -> s0 [0, 65535] { R629 += 1, R630 += 1 };
  s0 -> s3 [0, 65535] { R630 += 1, R616 += 1, R323 += 1, R324 += 1 };
  s0 -> s4 [63, 63] { R630 += 1, R616 += 1 };
  s0 -> s1 [64, 65535] { R630 += 1, R616 += 1, R324 += 1 };
  s1 -> s1 [0, 62] { R630 += 1, R616 += 1, R324 += 1 };
  s1 -> s4 [63, 63] { R630 += 1, R616 += 1 };
  s1 -> s1 [64, 65535] { R630 += 1, R616 += 1, R324 += 1 };
  s2 -> s1 [0, 62] { R630 += 1, R616 += 1, R324 += 1 };
  s2 -> s2 [0, 65535] { R630 += 1, R615 += 1, R616 += 1 };
  s2 -> s3 [0, 65535] { R630 += 1, R616 += 1, R323 += 1, R324 += 1 };
  s2 -> s4 [63, 63] { R630 += 1, R616 += 1 };
  s2 -> s1 [64, 65535] { R630 += 1, R616 += 1, R324 += 1 };
  s3 -> s1 [0, 62] { R630 += 1, R616 += 1, R324 += 1 };
  s3 -> s3 [0, 65535] { R630 += 1, R616 += 1, R323 += 1, R324 += 1 };
  s3 -> s4 [63, 63] { R630 += 1, R616 += 1 };
  s3 -> s1 [64, 65535] { R630 += 1, R616 += 1, R324 += 1 };
  s4 -> s4 [0, 65535] { R630 += 1, R616 += 1 };
  s4 -> s5 [0, 65535] { R630 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R630 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R632 += 1, R618 += 1, R602 += 1 };
  s0 -> s0 [0, 65535] { R631 += 1, R632 += 1 };
  s0 -> s2 [0, 65535] { R632 += 1, R617 += 1, R618 += 1 };
  s1 -> s4 [0, 65535] { R632 += 1 };
  s1 -> s1 [0, 65535] { R632 += 1, R618 += 1, R602 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R632 += 1, R618 += 1, R602 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R632 += 1, R617 += 1, R618 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R632 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 46] { R634 += 1, R620 += 1, R606 += 1 };
  s0 -> s2 [0, 65535] { R634 += 1, R620 += 1, R605 += 1, R606 += 1 };
  s0 -> s3 [0, 65535] { R634 += 1, R619 += 1, R620 += 1 };
  s0 -> s0 [0, 65535] { R633 += 1, R634 += 1 };
  s0 -> s4 [47, 47] { R634 += 1, R620 += 1, R606 += 1 };
  s0 -> s1 [48, 58] { R634 += 1, R620 += 1, R606 += 1 };
  s0 -> s5 [59, 59] { R634 += 1, R620 += 1, R606 += 1 };
  s0 -> s1 [60, 65535] { R634 += 1, R620 += 1, R606 += 1 };
  s1 -> s1 [0, 46] { R634 += 1, R620 += 1, R606 += 1 };
  s1 -> s4 [47, 47] { R634 += 1, R620 += 1, R606 += 1 };
  s1 -> s1 [48, 58] { R634 += 1, R620 += 1, R606 += 1 };
  s1 -> s5 [59, 59] { R634 += 1, R620 += 1, R606 += 1 };
  s1 -> s1 [60, 65535] { R634 += 1, R620 += 1, R606 += 1 };
  s2 -> s1 [0, 46] { R634 += 1, R620 += 1, R606 += 1 };
  s2 -> s2 [0, 65535] { R634 += 1, R620 += 1, R605 += 1, R606 += 1 };
  s2 -> s4 [47, 47] { R634 += 1, R620 += 1, R606 += 1 };
  s2 -> s1 [48, 58] { R634 += 1, R620 += 1, R606 += 1 };
  s2 -> s5 [59, 59] { R634 += 1, R620 += 1, R606 += 1 };
  s2 -> s1 [60, 65535] { R634 += 1, R620 += 1, R606 += 1 };
  s3 -> s1 [0, 46] { R634 += 1, R620 += 1, R606 += 1 };
  s3 -> s2 [0, 65535] { R634 += 1, R620 += 1, R605 += 1, R606 += 1 };
  s3 -> s3 [0, 65535] { R634 += 1, R619 += 1, R620 += 1 };
  s3 -> s4 [47, 47] { R634 += 1, R620 += 1, R606 += 1 };
  s3 -> s1 [48, 58] { R634 += 1, R620 += 1, R606 += 1 };
  s3 -> s5 [59, 59] { R634 += 1, R620 += 1, R606 += 1 };
  s3 -> s1 [60, 65535] { R634 += 1, R620 += 1, R606 += 1 };
  s4 -> s4 [0, 58] { R634 += 1, R620 += 1, R606 += 1 };
  s4 -> s6 [59, 59] { R634 += 1, R620 += 1, R606 += 1 };
  s4 -> s4 [60, 65535] { R634 += 1, R620 += 1, R606 += 1 };
  s5 -> s5 [0, 46] { R634 += 1, R620 += 1, R606 += 1 };
  s5 -> s6 [47, 47] { R634 += 1, R620 += 1, R606 += 1 };
  s5 -> s5 [48, 65535] { R634 += 1, R620 += 1, R606 += 1 };
  s6 -> s7 [0, 65535] { R634 += 1 };
  s6 -> s8 [0, 65535] { R634 += 1, R620 += 1 };
  s6 -> s6 [0, 65535] { R634 += 1, R620 += 1, R606 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R634 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s7 [0, 65535] { R634 += 1 };
  s8 -> s8 [0, 65535] { R634 += 1, R620 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s6, s7, s8, s9;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 58] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R635 += 1, R636 += 1 };
  s0 -> s2 [0, 65535] { R636 += 1, R621 += 1, R622 += 1 };
  s0 -> s3 [0, 65535] { R636 += 1, R622 += 1, R607 += 1, R608 += 1 };
  s0 -> s4 [0, 65535] { R636 += 1, R622 += 1, R608 += 1, R3 += 1, R4 += 1 };
  s0 -> s5 [59, 59] { R636 += 1, R622 += 1, R608 += 1 };
  s0 -> s1 [60, 65535] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s1 -> s1 [0, 58] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s1 -> s5 [59, 59] { R636 += 1, R622 += 1, R608 += 1 };
  s1 -> s1 [60, 65535] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s2 -> s1 [0, 58] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R636 += 1, R621 += 1, R622 += 1 };
  s2 -> s3 [0, 65535] { R636 += 1, R622 += 1, R607 += 1, R608 += 1 };
  s2 -> s4 [0, 65535] { R636 += 1, R622 += 1, R608 += 1, R3 += 1, R4 += 1 };
  s2 -> s5 [59, 59] { R636 += 1, R622 += 1, R608 += 1 };
  s2 -> s1 [60, 65535] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s3 -> s1 [0, 58] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R636 += 1, R622 += 1, R607 += 1, R608 += 1 };
  s3 -> s4 [0, 65535] { R636 += 1, R622 += 1, R608 += 1, R3 += 1, R4 += 1 };
  s3 -> s5 [59, 59] { R636 += 1, R622 += 1, R608 += 1 };
  s3 -> s1 [60, 65535] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s4 -> s1 [0, 58] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s4 -> s4 [0, 65535] { R636 += 1, R622 += 1, R608 += 1, R3 += 1, R4 += 1 };
  s4 -> s5 [59, 59] { R636 += 1, R622 += 1, R608 += 1 };
  s4 -> s1 [60, 65535] { R636 += 1, R622 += 1, R608 += 1, R4 += 1 };
  s5 -> s6 [0, 65535] { R636 += 1, R622 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R636 += 1, R622 += 1, R608 += 1 };
  s5 -> s8 [0, 65535] { R636 += 1 };
  s6 -> s6 [0, 65535] { R636 += 1, R622 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R636 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R636 += 1 };
  accepting s5, s6, s7, s8;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R638 += 1, R623 += 1, R624 += 1 };
  s0 -> s2 [0, 65535] { R638 += 1, R624 += 1, R610 += 1, R603 += 1 };
  s0 -> s0 [0, 65535] { R637 += 1, R638 += 1 };
  s0 -> s3 [0, 65535] { R638 += 1, R624 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 65535] { R638 += 1, R623 += 1, R624 += 1 };
  s1 -> s2 [0, 65535] { R638 += 1, R624 += 1, R610 += 1, R603 += 1 };
  s1 -> s3 [0, 65535] { R638 += 1, R624 += 1, R609 += 1, R610 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R638 += 1, R624 += 1 };
  s2 -> s4 [0, 65535] { R638 += 1 };
  s2 -> s2 [0, 65535] { R638 += 1, R624 += 1, R610 += 1, R603 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R638 += 1 };
  s3 -> s2 [0, 65535] { R638 += 1, R624 += 1, R610 += 1, R603 += 1 };
  s3 -> s3 [0, 65535] { R638 += 1, R624 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R638 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R638 += 1, R624 += 1 };
  s6 -> s4 [0, 65535] { R638 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R622 && R1 = R636 && R3 = 0 && R323 = 0 && R483 = 2 && R484 = R621 && R563 = 0 && R564 - R635 = -1 && R605 = 0 && R607 = 0 && R611 = 0 && R612 - R635 = -1 && R615 = R621 && R616 = R622 && R619 = R621 && R620 = R622 && R627 = R635 && R628 = R636 && R629 = R635 && R630 = R636 && R633 = R635 && R634 = R636 && R4 < 0 && R606 - R324 < 1 && R608 - R324 < 1 && -1 < R324 && R606 - R602 < 1 && R608 - R602 < 1 && R621 - R622 < 1 && -1 < R621 && R635 - R636 < 1 && 0 < R635 && (R609 != 0 || ((R603 != 0 || ((R324 != R610 || R610 - R602 < 1 || R602 < 1) && (R602 != R610 || R610 - R324 < 1 || R324 < 1) && (R324 = R610 || R602 = R610 || R324 < 1 || R602 < 1))) && (R603 = 0 || (R610 - R324 < 1 && (R324 != R610 || R610 - R602 < 1 || R610 < 0) && (R602 = R610 || R324 - R610 < 1))))) && (R613 != 0 || R614 - R635 = -1 || (R604 = 0 && R635 = 1)) && (R617 != R621 || R618 = R622 || (R602 = 0 && R621 = R622)) && (R621 != R623 || R622 = R624 || ((R602 != 0 || R622 - R623 < 1 || R623 < 0) && (R602 = 0 || R622 < R623 || R623 < 0))) && (R625 != R635 || R626 = R636 || (R622 = 0 && (R621 != 0 || R636 - R635 < 1))) && (R631 != R635 || R632 = R636 || (R622 = 0 && (R621 != 0 || R636 - R635 < 1))) && (R635 != R637 || R636 = R638 || ((R621 != 0 || R622 != 0 || R636 - R637 < 1 || R637 < 1) && (R622 < 1 || R636 < R637 || R637 < 1))) && (R609 = 0 || (R603 = 0 && (R324 < 1 || R602 < 1))) && (R613 = 0 || (R604 = 0 && R635 = 1)) && (R617 = R621 || (R602 = 0 && R621 = R622)) && (R621 = R623 || (R602 = 0 && R621 = R622)) && (R625 = R635 || (R622 = 0 && (R621 != 0 || R636 - R635 < 1))) && (R631 = R635 || (R622 = 0 && (R621 != 0 || R636 - R635 < 1))) && (R635 = R637 || (R622 = 0 && (R621 != 0 || R636 - R635 < 1))) && (R324 - R606 < 1 || R602 - R606 < 1) && (R324 - R608 < 1 || R602 - R608 < 1);
// End of Parikh automata intersection problem
