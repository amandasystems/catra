// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R166, R167, R2, R246, R247, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R6, R7;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R247 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R247 += 1 };
  s1 -> s1 [0, 57] { R247 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R247 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R294 += 1, R295 += 1 };
  s0 -> s1 [104, 104] { R295 += 1 };
  s1 -> s2 [116, 116] { R295 += 1 };
  s2 -> s3 [116, 116] { R295 += 1 };
  s3 -> s4 [112, 112] { R295 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R297 += 1, R287 += 1 };
  s0 -> s0 [0, 65535] { R296 += 1, R297 += 1 };
  s1 -> s1 [0, 65535] { R297 += 1, R287 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R309 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R308 += 1, R309 += 1 };
  s1 -> s1 [0, 65535] { R309 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 46] { R311 += 1, R167 += 1 };
  s0 -> s2 [0, 65535] { R311 += 1, R166 += 1, R167 += 1 };
  s0 -> s0 [0, 65535] { R310 += 1, R311 += 1 };
  s0 -> s3 [47, 47] { R311 += 1 };
  s0 -> s1 [48, 65535] { R311 += 1, R167 += 1 };
  s1 -> s1 [0, 46] { R311 += 1, R167 += 1 };
  s1 -> s3 [47, 47] { R311 += 1 };
  s1 -> s1 [48, 65535] { R311 += 1, R167 += 1 };
  s2 -> s1 [0, 46] { R311 += 1, R167 += 1 };
  s2 -> s2 [0, 65535] { R311 += 1, R166 += 1, R167 += 1 };
  s2 -> s3 [47, 47] { R311 += 1 };
  s2 -> s1 [48, 65535] { R311 += 1, R167 += 1 };
  s3 -> s3 [0, 65535] { R311 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R313 += 1, R299 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R313 += 1, R299 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R312 += 1, R313 += 1 };
  s0 -> s3 [0, 65535] { R313 += 1, R298 += 1, R299 += 1 };
  s0 -> s4 [63, 63] { R313 += 1, R299 += 1 };
  s0 -> s1 [64, 65535] { R313 += 1, R299 += 1, R7 += 1 };
  s1 -> s1 [0, 62] { R313 += 1, R299 += 1, R7 += 1 };
  s1 -> s4 [63, 63] { R313 += 1, R299 += 1 };
  s1 -> s1 [64, 65535] { R313 += 1, R299 += 1, R7 += 1 };
  s2 -> s1 [0, 62] { R313 += 1, R299 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R313 += 1, R299 += 1, R6 += 1, R7 += 1 };
  s2 -> s4 [63, 63] { R313 += 1, R299 += 1 };
  s2 -> s1 [64, 65535] { R313 += 1, R299 += 1, R7 += 1 };
  s3 -> s1 [0, 62] { R313 += 1, R299 += 1, R7 += 1 };
  s3 -> s2 [0, 65535] { R313 += 1, R299 += 1, R6 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R313 += 1, R298 += 1, R299 += 1 };
  s3 -> s4 [63, 63] { R313 += 1, R299 += 1 };
  s3 -> s1 [64, 65535] { R313 += 1, R299 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R313 += 1, R299 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R313 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R313 += 1 };
  accepting s4, s5, s6;
};
automaton url_7 {
  init s0;
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s1 [0, 65535] { R315 += 1, R301 += 1, R285 += 1 };
  s0 -> s2 [0, 65535] { R315 += 1, R300 += 1, R301 += 1 };
  s1 -> s1 [0, 65535] { R315 += 1, R301 += 1, R285 += 1 };
  s1 -> s4 [0, 65535] { R315 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R315 += 1, R301 += 1, R285 += 1 };
  s2 -> s2 [0, 65535] { R315 += 1, R300 += 1, R301 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R315 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 46] { R317 += 1, R303 += 1, R289 += 1 };
  s0 -> s2 [0, 65535] { R317 += 1, R303 += 1, R288 += 1, R289 += 1 };
  s0 -> s3 [0, 65535] { R317 += 1, R302 += 1, R303 += 1 };
  s0 -> s0 [0, 65535] { R316 += 1, R317 += 1 };
  s0 -> s4 [47, 47] { R317 += 1, R303 += 1, R289 += 1 };
  s0 -> s1 [48, 58] { R317 += 1, R303 += 1, R289 += 1 };
  s0 -> s5 [59, 59] { R317 += 1, R303 += 1, R289 += 1 };
  s0 -> s1 [60, 65535] { R317 += 1, R303 += 1, R289 += 1 };
  s1 -> s1 [0, 46] { R317 += 1, R303 += 1, R289 += 1 };
  s1 -> s4 [47, 47] { R317 += 1, R303 += 1, R289 += 1 };
  s1 -> s1 [48, 58] { R317 += 1, R303 += 1, R289 += 1 };
  s1 -> s5 [59, 59] { R317 += 1, R303 += 1, R289 += 1 };
  s1 -> s1 [60, 65535] { R317 += 1, R303 += 1, R289 += 1 };
  s2 -> s1 [0, 46] { R317 += 1, R303 += 1, R289 += 1 };
  s2 -> s2 [0, 65535] { R317 += 1, R303 += 1, R288 += 1, R289 += 1 };
  s2 -> s4 [47, 47] { R317 += 1, R303 += 1, R289 += 1 };
  s2 -> s1 [48, 58] { R317 += 1, R303 += 1, R289 += 1 };
  s2 -> s5 [59, 59] { R317 += 1, R303 += 1, R289 += 1 };
  s2 -> s1 [60, 65535] { R317 += 1, R303 += 1, R289 += 1 };
  s3 -> s1 [0, 46] { R317 += 1, R303 += 1, R289 += 1 };
  s3 -> s2 [0, 65535] { R317 += 1, R303 += 1, R288 += 1, R289 += 1 };
  s3 -> s3 [0, 65535] { R317 += 1, R302 += 1, R303 += 1 };
  s3 -> s4 [47, 47] { R317 += 1, R303 += 1, R289 += 1 };
  s3 -> s1 [48, 58] { R317 += 1, R303 += 1, R289 += 1 };
  s3 -> s5 [59, 59] { R317 += 1, R303 += 1, R289 += 1 };
  s3 -> s1 [60, 65535] { R317 += 1, R303 += 1, R289 += 1 };
  s4 -> s4 [0, 58] { R317 += 1, R303 += 1, R289 += 1 };
  s4 -> s6 [59, 59] { R317 += 1, R303 += 1, R289 += 1 };
  s4 -> s4 [60, 65535] { R317 += 1, R303 += 1, R289 += 1 };
  s5 -> s5 [0, 46] { R317 += 1, R303 += 1, R289 += 1 };
  s5 -> s6 [47, 47] { R317 += 1, R303 += 1, R289 += 1 };
  s5 -> s5 [48, 65535] { R317 += 1, R303 += 1, R289 += 1 };
  s6 -> s7 [0, 65535] { R317 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R317 += 1, R303 += 1, R289 += 1 };
  s6 -> s9 [0, 65535] { R317 += 1, R303 += 1 };
  s7 -> s7 [0, 65535] { R317 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s7 [0, 65535] { R317 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R317 += 1, R303 += 1 };
  accepting s6, s7, s8, s9;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 58] { R319 += 1, R305 += 1, R291 += 1 };
  s0 -> s2 [0, 65535] { R319 += 1, R304 += 1, R305 += 1 };
  s0 -> s0 [0, 65535] { R318 += 1, R319 += 1 };
  s0 -> s3 [0, 65535] { R319 += 1, R305 += 1, R290 += 1, R291 += 1 };
  s0 -> s4 [0, 65535] { R319 += 1, R305 += 1, R291 += 1, R2 += 1 };
  s0 -> s5 [59, 59] { R319 += 1, R305 += 1, R291 += 1 };
  s0 -> s1 [60, 65535] { R319 += 1, R305 += 1, R291 += 1 };
  s1 -> s1 [0, 58] { R319 += 1, R305 += 1, R291 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R319 += 1, R305 += 1 };
  s1 -> s8 [0, 65535] { R319 += 1 };
  s1 -> s5 [59, 59] { R319 += 1, R305 += 1, R291 += 1 };
  s1 -> s1 [60, 65535] { R319 += 1, R305 += 1, R291 += 1 };
  s2 -> s1 [0, 58] { R319 += 1, R305 += 1, R291 += 1 };
  s2 -> s2 [0, 65535] { R319 += 1, R304 += 1, R305 += 1 };
  s2 -> s3 [0, 65535] { R319 += 1, R305 += 1, R290 += 1, R291 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R319 += 1, R305 += 1, R291 += 1, R2 += 1 };
  s2 -> s5 [59, 59] { R319 += 1, R305 += 1, R291 += 1 };
  s2 -> s1 [60, 65535] { R319 += 1, R305 += 1, R291 += 1 };
  s3 -> s1 [0, 58] { R319 += 1, R305 += 1, R291 += 1 };
  s3 -> s3 [0, 65535] { R319 += 1, R305 += 1, R290 += 1, R291 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R319 += 1, R305 += 1, R291 += 1, R2 += 1 };
  s3 -> s8 [0, 65535] { R319 += 1 };
  s3 -> s5 [59, 59] { R319 += 1, R305 += 1, R291 += 1 };
  s3 -> s1 [60, 65535] { R319 += 1, R305 += 1, R291 += 1 };
  s4 -> s1 [0, 58] { R319 += 1, R305 += 1, R291 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R319 += 1, R305 += 1 };
  s4 -> s4 [0, 65535] { R319 += 1, R305 += 1, R291 += 1, R2 += 1 };
  s4 -> s8 [0, 65535] { R319 += 1 };
  s4 -> s5 [59, 59] { R319 += 1, R305 += 1, R291 += 1 };
  s4 -> s1 [60, 65535] { R319 += 1, R305 += 1, R291 += 1 };
  s5 -> s5 [0, 65535] { R319 += 1, R305 += 1, R291 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R319 += 1, R305 += 1 };
  s7 -> s8 [0, 65535] { R319 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R319 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R321 += 1, R307 += 1, R292 += 1, R293 += 1 };
  s0 -> s2 [0, 65535] { R321 += 1, R306 += 1, R307 += 1 };
  s0 -> s3 [0, 65535] { R321 += 1, R307 += 1, R293 += 1, R286 += 1 };
  s0 -> s0 [0, 65535] { R320 += 1, R321 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R321 += 1, R307 += 1, R292 += 1, R293 += 1 };
  s1 -> s3 [0, 65535] { R321 += 1, R307 += 1, R293 += 1, R286 += 1 };
  s1 -> s6 [0, 65535] { R321 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R321 += 1, R307 += 1, R292 += 1, R293 += 1 };
  s2 -> s2 [0, 65535] { R321 += 1, R306 += 1, R307 += 1 };
  s2 -> s3 [0, 65535] { R321 += 1, R307 += 1, R293 += 1, R286 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R321 += 1, R307 += 1, R293 += 1, R286 += 1 };
  s3 -> s5 [0, 65535] { R321 += 1, R307 += 1 };
  s3 -> s6 [0, 65535] { R321 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R321 += 1, R307 += 1 };
  s5 -> s6 [0, 65535] { R321 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R321 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R303 && R1 = R317 && R6 = 0 && R166 = 2 && R167 = R302 && R246 = 0 && R247 - R316 = -1 && R288 = 0 && R294 = 0 && R295 - R316 = -1 && R298 = R302 && R299 = R303 && R310 = R316 && R311 = R317 && R312 = R316 && R313 = R317 && R2 < 1 && R289 - R7 < 1 && -1 < R7 && R289 - R285 < 1 && R302 - R303 < 1 && -1 < R302 && R316 - R317 < 1 && 0 < R316 && (R290 != 0 || ((R286 != 0 || ((R7 != R291 || R291 - R285 < 1 || R285 < 1) && (R285 != R291 || R291 - R7 < 1 || R7 < 1) && (R7 = R291 || R285 = R291 || R7 < 1 || R285 < 1))) && (R286 = 0 || (R291 - R7 < 1 && (R7 != R291 || R291 - R285 < 1 || R291 < 0) && (R285 = R291 || R7 - R291 < 1))))) && (R292 != 0 || ((R286 != 0 || ((R7 != R293 || R293 - R285 < 1 || R285 < 1) && (R285 != R293 || R293 - R7 < 1 || R7 < 1) && (R7 = R293 || R285 = R293 || R7 < 1 || R285 < 1))) && (R286 = 0 || (R293 - R7 < 1 && (R7 != R293 || R293 - R285 < 1 || R293 < 0) && (R285 = R293 || R7 - R293 < 1))))) && (R296 != 0 || R297 - R316 = -1 || (R287 = 0 && R316 = 1)) && (R300 != R302 || R301 = R303 || (R285 = 0 && R302 = R303)) && (R302 != R304 || R303 = R305 || ((R285 != 0 || R303 - R304 < 1 || R304 < 0) && (R285 = 0 || R303 < R304 || R304 < 0))) && (R302 != R306 || R303 = R307 || ((R285 != 0 || R303 - R306 < 1 || R306 < 0) && (R285 = 0 || R303 < R306 || R306 < 0))) && (R302 != 0 || R303 != 0 || ((R316 != R320 || ((R317 != R321 || ((R318 != R320 || R319 = R321 || R321 - R320 < 1 || R320 < 1) && (R318 = R320 || R321 - R320 < 1 || R320 < 1))) && (R317 = R321 || R317 - R320 < 1 || R320 < 1))) && (R316 = R320 || R317 - R316 < 1))) && (R308 != R316 || R309 = R317 || (R303 = 0 && (R302 != 0 || R317 - R316 < 1))) && (R314 != R316 || R315 = R317 || (R303 = 0 && (R302 != 0 || R317 - R316 < 1))) && (R316 != R320 || ((R317 != R321 || ((R318 != R320 || R319 = R321 || R303 < 1 || R321 < R320 || R320 < 1) && (R318 = R320 || R303 < 1 || R321 < R320 || R320 < 1))) && (R317 = R321 || R303 < 1 || R317 < R320 || R320 < 1))) && (R290 = 0 || (R286 = 0 && (R7 < 1 || R285 < 1))) && (R292 = 0 || (R286 = 0 && (R7 < 1 || R285 < 1))) && (R296 = 0 || (R287 = 0 && R316 = 1)) && (R300 = R302 || (R285 = 0 && R302 = R303)) && (R302 = R304 || (R285 = 0 && R302 = R303)) && (R302 = R306 || (R285 = 0 && R302 = R303)) && (R308 = R316 || (R303 = 0 && (R302 != 0 || R317 - R316 < 1))) && (R314 = R316 || (R303 = 0 && (R302 != 0 || R317 - R316 < 1))) && (R316 = R320 || R303 < 1) && (R7 - R289 < 1 || R285 - R289 < 1);
// End of Parikh automata intersection problem
