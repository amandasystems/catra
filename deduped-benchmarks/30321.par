// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R103, R104, R153, R154, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R3, R4;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R154 += 1 };
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R154 += 1 };
  s1 -> s1 [0, 57] { R154 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R154 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s1 [104, 104] { R186 += 1 };
  s1 -> s2 [116, 116] { R186 += 1 };
  s2 -> s3 [116, 116] { R186 += 1 };
  s3 -> s4 [112, 112] { R186 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R188 += 1, R178 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s1 -> s1 [0, 65535] { R188 += 1, R178 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s1 [0, 65535] { R190 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R190 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 46] { R192 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s2 [0, 65535] { R192 += 1, R103 += 1, R104 += 1 };
  s0 -> s3 [47, 47] { R192 += 1 };
  s0 -> s1 [48, 65535] { R192 += 1, R104 += 1 };
  s1 -> s1 [0, 46] { R192 += 1, R104 += 1 };
  s1 -> s3 [47, 47] { R192 += 1 };
  s1 -> s1 [48, 65535] { R192 += 1, R104 += 1 };
  s2 -> s1 [0, 46] { R192 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R192 += 1, R103 += 1, R104 += 1 };
  s2 -> s3 [47, 47] { R192 += 1 };
  s2 -> s1 [48, 65535] { R192 += 1, R104 += 1 };
  s3 -> s3 [0, 65535] { R192 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R194 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R194 += 1, R179 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s0 -> s3 [47, 47] { R194 += 1, R180 += 1 };
  s0 -> s1 [48, 58] { R194 += 1, R180 += 1 };
  s0 -> s4 [59, 59] { R194 += 1, R180 += 1 };
  s0 -> s1 [60, 65535] { R194 += 1, R180 += 1 };
  s1 -> s1 [0, 46] { R194 += 1, R180 += 1 };
  s1 -> s3 [47, 47] { R194 += 1, R180 += 1 };
  s1 -> s1 [48, 58] { R194 += 1, R180 += 1 };
  s1 -> s4 [59, 59] { R194 += 1, R180 += 1 };
  s1 -> s1 [60, 65535] { R194 += 1, R180 += 1 };
  s2 -> s1 [0, 46] { R194 += 1, R180 += 1 };
  s2 -> s2 [0, 65535] { R194 += 1, R179 += 1, R180 += 1 };
  s2 -> s3 [47, 47] { R194 += 1, R180 += 1 };
  s2 -> s1 [48, 58] { R194 += 1, R180 += 1 };
  s2 -> s4 [59, 59] { R194 += 1, R180 += 1 };
  s2 -> s1 [60, 65535] { R194 += 1, R180 += 1 };
  s3 -> s3 [0, 58] { R194 += 1, R180 += 1 };
  s3 -> s5 [59, 59] { R194 += 1, R180 += 1 };
  s3 -> s3 [60, 65535] { R194 += 1, R180 += 1 };
  s4 -> s4 [0, 46] { R194 += 1, R180 += 1 };
  s4 -> s5 [47, 47] { R194 += 1, R180 += 1 };
  s4 -> s4 [48, 65535] { R194 += 1, R180 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R194 += 1 };
  s5 -> s5 [0, 65535] { R194 += 1, R180 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R194 += 1 };
  accepting s5, s6, s7;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 58] { R196 += 1, R182 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R196 += 1, R181 += 1, R182 += 1 };
  s0 -> s3 [0, 65535] { R196 += 1, R182 += 1, R3 += 1, R4 += 1 };
  s0 -> s4 [59, 59] { R196 += 1, R182 += 1 };
  s0 -> s1 [60, 65535] { R196 += 1, R182 += 1, R4 += 1 };
  s1 -> s1 [0, 58] { R196 += 1, R182 += 1, R4 += 1 };
  s1 -> s4 [59, 59] { R196 += 1, R182 += 1 };
  s1 -> s1 [60, 65535] { R196 += 1, R182 += 1, R4 += 1 };
  s2 -> s1 [0, 58] { R196 += 1, R182 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R196 += 1, R181 += 1, R182 += 1 };
  s2 -> s3 [0, 65535] { R196 += 1, R182 += 1, R3 += 1, R4 += 1 };
  s2 -> s4 [59, 59] { R196 += 1, R182 += 1 };
  s2 -> s1 [60, 65535] { R196 += 1, R182 += 1, R4 += 1 };
  s3 -> s1 [0, 58] { R196 += 1, R182 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R196 += 1, R182 += 1, R3 += 1, R4 += 1 };
  s3 -> s4 [59, 59] { R196 += 1, R182 += 1 };
  s3 -> s1 [60, 65535] { R196 += 1, R182 += 1, R4 += 1 };
  s4 -> s4 [0, 65535] { R196 += 1, R182 += 1 };
  s4 -> s5 [0, 65535] { R196 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R196 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton url_8 {
  init s0;
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s1 [0, 65535] { R198 += 1, R184 += 1, R177 += 1 };
  s0 -> s2 [0, 65535] { R198 += 1, R183 += 1, R184 += 1 };
  s1 -> s4 [0, 65535] { R198 += 1 };
  s1 -> s1 [0, 65535] { R198 += 1, R184 += 1, R177 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R198 += 1, R184 += 1, R177 += 1 };
  s2 -> s2 [0, 65535] { R198 += 1, R183 += 1, R184 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R198 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R182 && R1 = R196 && R3 = 0 && R103 = 2 && R104 = R181 && R153 = 0 && R154 - R195 = -1 && R179 = R181 && R180 = R182 && R185 = 0 && R186 - R195 = -1 && R191 = R195 && R192 = R196 && R193 = R195 && R194 = R196 && R4 < 0 && R181 - R182 < 1 && -1 < R181 && R195 - R196 < 1 && 0 < R195 && (R181 != R183 || R182 = R184 || ((R177 != 0 || R182 - R183 < 1 || R183 < 0) && (R177 = 0 || R182 < R183 || R183 < 0))) && (R187 != 0 || R188 - R195 = -1 || (R178 = 0 && R195 = 1)) && (R189 != R195 || R190 = R196 || (R182 = 0 && (R181 != 0 || R196 - R195 < 1))) && (R195 != R197 || R196 = R198 || ((R181 != 0 || R182 != 0 || R196 - R197 < 1 || R197 < 1) && (R182 < 1 || R196 < R197 || R197 < 1))) && (R181 = R183 || (R177 = 0 && R181 = R182)) && (R187 = 0 || (R178 = 0 && R195 = 1)) && (R189 = R195 || (R182 = 0 && (R181 != 0 || R196 - R195 < 1))) && (R195 = R197 || (R182 = 0 && (R181 != 0 || R196 - R195 < 1)));
// End of Parikh automata intersection problem
