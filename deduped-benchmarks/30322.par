// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R2, R56, R57, R6, R7, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R57 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R57 += 1 };
  s1 -> s1 [0, 57] { R57 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R57 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s0 -> s1 [104, 104] { R89 += 1 };
  s1 -> s2 [116, 116] { R89 += 1 };
  s2 -> s3 [116, 116] { R89 += 1 };
  s3 -> s4 [112, 112] { R89 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R91 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s1 -> s1 [0, 65535] { R91 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R93 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 46] { R95 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R95 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s3 [47, 47] { R95 += 1 };
  s0 -> s1 [48, 65535] { R95 += 1, R7 += 1 };
  s1 -> s1 [0, 46] { R95 += 1, R7 += 1 };
  s1 -> s3 [47, 47] { R95 += 1 };
  s1 -> s1 [48, 65535] { R95 += 1, R7 += 1 };
  s2 -> s1 [0, 46] { R95 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R95 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [47, 47] { R95 += 1 };
  s2 -> s1 [48, 65535] { R95 += 1, R7 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R95 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R97 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R97 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s3 [47, 47] { R97 += 1, R83 += 1 };
  s0 -> s1 [48, 58] { R97 += 1, R83 += 1 };
  s0 -> s4 [59, 59] { R97 += 1, R83 += 1 };
  s0 -> s1 [60, 65535] { R97 += 1, R83 += 1 };
  s1 -> s1 [0, 46] { R97 += 1, R83 += 1 };
  s1 -> s3 [47, 47] { R97 += 1, R83 += 1 };
  s1 -> s1 [48, 58] { R97 += 1, R83 += 1 };
  s1 -> s4 [59, 59] { R97 += 1, R83 += 1 };
  s1 -> s1 [60, 65535] { R97 += 1, R83 += 1 };
  s2 -> s1 [0, 46] { R97 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R97 += 1, R82 += 1, R83 += 1 };
  s2 -> s3 [47, 47] { R97 += 1, R83 += 1 };
  s2 -> s1 [48, 58] { R97 += 1, R83 += 1 };
  s2 -> s4 [59, 59] { R97 += 1, R83 += 1 };
  s2 -> s1 [60, 65535] { R97 += 1, R83 += 1 };
  s3 -> s3 [0, 58] { R97 += 1, R83 += 1 };
  s3 -> s5 [59, 59] { R97 += 1, R83 += 1 };
  s3 -> s3 [60, 65535] { R97 += 1, R83 += 1 };
  s4 -> s4 [0, 46] { R97 += 1, R83 += 1 };
  s4 -> s5 [47, 47] { R97 += 1, R83 += 1 };
  s4 -> s4 [48, 65535] { R97 += 1, R83 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R97 += 1 };
  s5 -> s5 [0, 65535] { R97 += 1, R83 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R97 += 1 };
  accepting s5, s6, s7;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 58] { R99 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R99 += 1, R85 += 1, R2 += 1 };
  s0 -> s3 [0, 65535] { R99 += 1, R84 += 1, R85 += 1 };
  s0 -> s4 [59, 59] { R99 += 1, R85 += 1 };
  s0 -> s1 [60, 65535] { R99 += 1, R85 += 1 };
  s1 -> s1 [0, 58] { R99 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R99 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [59, 59] { R99 += 1, R85 += 1 };
  s1 -> s1 [60, 65535] { R99 += 1, R85 += 1 };
  s2 -> s1 [0, 58] { R99 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R99 += 1, R85 += 1, R2 += 1 };
  s2 -> s6 [0, 65535] { R99 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [59, 59] { R99 += 1, R85 += 1 };
  s2 -> s1 [60, 65535] { R99 += 1, R85 += 1 };
  s3 -> s1 [0, 58] { R99 += 1, R85 += 1 };
  s3 -> s2 [0, 65535] { R99 += 1, R85 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R99 += 1, R84 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [59, 59] { R99 += 1, R85 += 1 };
  s3 -> s1 [60, 65535] { R99 += 1, R85 += 1 };
  s4 -> s4 [0, 65535] { R99 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R99 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton url_8 {
  init s0;
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s1 [0, 65535] { R101 += 1, R87 += 1, R80 += 1 };
  s0 -> s2 [0, 65535] { R101 += 1, R86 += 1, R87 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R101 += 1 };
  s1 -> s1 [0, 65535] { R101 += 1, R87 += 1, R80 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R101 += 1, R87 += 1, R80 += 1 };
  s2 -> s2 [0, 65535] { R101 += 1, R86 += 1, R87 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R101 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R83 && R1 = R97 && R6 = 2 && R7 = R82 && R56 = 0 && R57 - R96 = -1 && R88 = 0 && R89 - R96 = -1 && R94 = R96 && R95 = R97 && R2 < 1 && R82 - R83 < 1 && -1 < R82 && R96 - R97 < 1 && 0 < R96 && (R82 != R84 || R83 = R85 || ((R80 != 0 || R83 - R84 < 1 || R84 < 0) && (R80 = 0 || R83 < R84 || R84 < 0))) && (R82 != R86 || R83 = R87 || ((R80 != 0 || R83 - R86 < 1 || R86 < 0) && (R80 = 0 || R83 < R86 || R86 < 0))) && (R82 != 0 || R83 != 0 || ((R96 != R100 || ((R97 != R101 || ((R98 != R100 || R99 = R101 || R101 - R100 < 1 || R100 < 1) && (R98 = R100 || R101 - R100 < 1 || R100 < 1))) && (R97 = R101 || R97 - R100 < 1 || R100 < 1))) && (R96 = R100 || R97 - R96 < 1))) && (R90 != 0 || R91 - R96 = -1 || (R81 = 0 && R96 = 1)) && (R92 != R96 || R93 = R97 || (R83 = 0 && (R82 != 0 || R97 - R96 < 1))) && (R96 != R100 || ((R97 != R101 || ((R98 != R100 || R99 = R101 || R83 < 1 || R101 < R100 || R100 < 1) && (R98 = R100 || R83 < 1 || R101 < R100 || R100 < 1))) && (R97 = R101 || R83 < 1 || R97 < R100 || R100 < 1))) && (R82 = R84 || (R80 = 0 && R82 = R83)) && (R82 = R86 || (R80 = 0 && R82 = R83)) && (R90 = 0 || (R81 = 0 && R96 = 1)) && (R92 = R96 || (R83 = 0 && (R82 != 0 || R97 - R96 < 1))) && (R96 = R100 || R83 < 1);
// End of Parikh automata intersection problem
