// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R139, R140, R207, R208, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R3, R4;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R208 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R208 += 1 };
  s1 -> s1 [0, 57] { R208 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R208 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s1 [104, 104] { R248 += 1 };
  s1 -> s2 [116, 116] { R248 += 1 };
  s2 -> s3 [116, 116] { R248 += 1 };
  s3 -> s4 [112, 112] { R248 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R250 += 1, R242 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R250 += 1, R242 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R259 += 1, R260 += 1 };
  s0 -> s1 [0, 65535] { R260 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R260 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 46] { R262 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R262 += 1, R139 += 1, R140 += 1 };
  s0 -> s0 [0, 65535] { R261 += 1, R262 += 1 };
  s0 -> s3 [47, 47] { R262 += 1 };
  s0 -> s1 [48, 65535] { R262 += 1, R140 += 1 };
  s1 -> s1 [0, 46] { R262 += 1, R140 += 1 };
  s1 -> s3 [47, 47] { R262 += 1 };
  s1 -> s1 [48, 65535] { R262 += 1, R140 += 1 };
  s2 -> s1 [0, 46] { R262 += 1, R140 += 1 };
  s2 -> s2 [0, 65535] { R262 += 1, R139 += 1, R140 += 1 };
  s2 -> s3 [47, 47] { R262 += 1 };
  s2 -> s1 [48, 65535] { R262 += 1, R140 += 1 };
  s3 -> s3 [0, 65535] { R262 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R264 += 1, R252 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R264 += 1, R252 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R264 += 1, R251 += 1, R252 += 1 };
  s0 -> s0 [0, 65535] { R263 += 1, R264 += 1 };
  s0 -> s4 [63, 63] { R264 += 1, R252 += 1 };
  s0 -> s1 [64, 65535] { R264 += 1, R252 += 1, R4 += 1 };
  s1 -> s1 [0, 62] { R264 += 1, R252 += 1, R4 += 1 };
  s1 -> s4 [63, 63] { R264 += 1, R252 += 1 };
  s1 -> s1 [64, 65535] { R264 += 1, R252 += 1, R4 += 1 };
  s2 -> s1 [0, 62] { R264 += 1, R252 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R264 += 1, R252 += 1, R3 += 1, R4 += 1 };
  s2 -> s4 [63, 63] { R264 += 1, R252 += 1 };
  s2 -> s1 [64, 65535] { R264 += 1, R252 += 1, R4 += 1 };
  s3 -> s1 [0, 62] { R264 += 1, R252 += 1, R4 += 1 };
  s3 -> s2 [0, 65535] { R264 += 1, R252 += 1, R3 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R264 += 1, R251 += 1, R252 += 1 };
  s3 -> s4 [63, 63] { R264 += 1, R252 += 1 };
  s3 -> s1 [64, 65535] { R264 += 1, R252 += 1, R4 += 1 };
  s4 -> s5 [0, 65535] { R264 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R264 += 1, R252 += 1 };
  s5 -> s5 [0, 65535] { R264 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton url_7 {
  init s0;
  s0 -> s0 [0, 65535] { R265 += 1, R266 += 1 };
  s0 -> s1 [0, 65535] { R266 += 1, R253 += 1, R254 += 1 };
  s0 -> s2 [0, 65535] { R266 += 1, R254 += 1, R240 += 1 };
  s1 -> s1 [0, 65535] { R266 += 1, R253 += 1, R254 += 1 };
  s1 -> s2 [0, 65535] { R266 += 1, R254 += 1, R240 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R266 += 1 };
  s2 -> s2 [0, 65535] { R266 += 1, R254 += 1, R240 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R266 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 46] { R268 += 1, R256 += 1, R244 += 1 };
  s0 -> s2 [0, 65535] { R268 += 1, R256 += 1, R243 += 1, R244 += 1 };
  s0 -> s0 [0, 65535] { R267 += 1, R268 += 1 };
  s0 -> s3 [0, 65535] { R268 += 1, R255 += 1, R256 += 1 };
  s0 -> s1 [48, 58] { R268 += 1, R256 += 1, R244 += 1 };
  s0 -> s4 [59, 59] { R268 += 1, R256 += 1, R244 += 1 };
  s0 -> s1 [60, 65535] { R268 += 1, R256 += 1, R244 += 1 };
  s1 -> s1 [0, 46] { R268 += 1, R256 += 1, R244 += 1 };
  s1 -> s1 [48, 58] { R268 += 1, R256 += 1, R244 += 1 };
  s1 -> s4 [59, 59] { R268 += 1, R256 += 1, R244 += 1 };
  s1 -> s1 [60, 65535] { R268 += 1, R256 += 1, R244 += 1 };
  s2 -> s1 [0, 46] { R268 += 1, R256 += 1, R244 += 1 };
  s2 -> s2 [0, 65535] { R268 += 1, R256 += 1, R243 += 1, R244 += 1 };
  s2 -> s1 [48, 58] { R268 += 1, R256 += 1, R244 += 1 };
  s2 -> s4 [59, 59] { R268 += 1, R256 += 1, R244 += 1 };
  s2 -> s1 [60, 65535] { R268 += 1, R256 += 1, R244 += 1 };
  s3 -> s1 [0, 46] { R268 += 1, R256 += 1, R244 += 1 };
  s3 -> s2 [0, 65535] { R268 += 1, R256 += 1, R243 += 1, R244 += 1 };
  s3 -> s3 [0, 65535] { R268 += 1, R255 += 1, R256 += 1 };
  s3 -> s1 [48, 58] { R268 += 1, R256 += 1, R244 += 1 };
  s3 -> s4 [59, 59] { R268 += 1, R256 += 1, R244 += 1 };
  s3 -> s1 [60, 65535] { R268 += 1, R256 += 1, R244 += 1 };
  s4 -> s4 [0, 46] { R268 += 1, R256 += 1, R244 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R268 += 1, R256 += 1 };
  s4 -> s6 [0, 65535] { R268 += 1 };
  s4 -> s4 [48, 65535] { R268 += 1, R256 += 1, R244 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R268 += 1 };
  accepting s4, s5, s6;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R270 += 1, R258 += 1, R245 += 1, R246 += 1 };
  s0 -> s2 [0, 65535] { R270 += 1, R257 += 1, R258 += 1 };
  s0 -> s3 [0, 65535] { R270 += 1, R258 += 1, R246 += 1, R241 += 1 };
  s0 -> s0 [0, 65535] { R269 += 1, R270 += 1 };
  s1 -> s1 [0, 65535] { R270 += 1, R258 += 1, R245 += 1, R246 += 1 };
  s1 -> s4 [0, 65535] { R270 += 1 };
  s1 -> s3 [0, 65535] { R270 += 1, R258 += 1, R246 += 1, R241 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R270 += 1, R258 += 1, R245 += 1, R246 += 1 };
  s2 -> s2 [0, 65535] { R270 += 1, R257 += 1, R258 += 1 };
  s2 -> s3 [0, 65535] { R270 += 1, R258 += 1, R246 += 1, R241 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R270 += 1 };
  s3 -> s3 [0, 65535] { R270 += 1, R258 += 1, R246 += 1, R241 += 1 };
  s3 -> s5 [0, 65535] { R270 += 1, R258 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R270 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R270 += 1 };
  s5 -> s5 [0, 65535] { R270 += 1, R258 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R256 && R1 = R268 && R3 = 0 && R139 = 2 && R140 = R255 && R207 = 0 && R208 - R267 = -1 && R243 = 0 && R247 = 0 && R248 - R267 = -1 && R251 = R255 && R252 = R256 && R261 = R267 && R262 = R268 && R263 = R267 && R264 = R268 && R244 - R4 < 1 && -1 < R4 && R244 - R240 < 1 && R255 - R256 < 1 && -1 < R255 && R267 - R268 < 1 && 0 < R267 && (R245 != 0 || ((R241 != 0 || ((R4 != R246 || R246 - R240 < 1 || R240 < 1) && (R240 != R246 || R246 - R4 < 1 || R4 < 1) && (R4 = R246 || R240 = R246 || R4 < 1 || R240 < 1))) && (R241 = 0 || (R246 - R4 < 1 && (R4 != R246 || R246 - R240 < 1 || R246 < 0) && (R240 = R246 || R4 - R246 < 1))))) && (R249 != 0 || R250 - R267 = -1 || (R242 = 0 && R267 = 1)) && (R253 != R255 || R254 = R256 || (R240 = 0 && R255 = R256)) && (R255 != R257 || R256 = R258 || ((R240 != 0 || R256 - R257 < 1 || R257 < 0) && (R240 = 0 || R256 < R257 || R257 < 0))) && (R259 != R267 || R260 = R268 || (R256 = 0 && (R255 != 0 || R268 - R267 < 1))) && (R265 != R267 || R266 = R268 || (R256 = 0 && (R255 != 0 || R268 - R267 < 1))) && (R267 != R269 || R268 = R270 || ((R255 != 0 || R256 != 0 || R268 - R269 < 1 || R269 < 1) && (R256 < 1 || R268 < R269 || R269 < 1))) && (R245 = 0 || (R241 = 0 && (R4 < 1 || R240 < 1))) && (R249 = 0 || (R242 = 0 && R267 = 1)) && (R253 = R255 || (R240 = 0 && R255 = R256)) && (R255 = R257 || (R240 = 0 && R255 = R256)) && (R259 = R267 || (R256 = 0 && (R255 != 0 || R268 - R267 < 1))) && (R265 = R267 || (R256 = 0 && (R255 != 0 || R268 - R267 < 1))) && (R267 = R269 || (R256 = 0 && (R255 != 0 || R268 - R267 < 1))) && (R4 - R244 < 1 || R240 - R244 < 1);
// End of Parikh automata intersection problem
