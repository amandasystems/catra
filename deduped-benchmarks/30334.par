// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s1 [0, 57];
  s0 -> s0 [0, 65535] { R0 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton url_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s1 [47, 47] { R6 += 1 };
  s1 -> s2 [47, 47] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R8 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R8 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R5 = 0 && R0 < 1 && R6 < 3 && (R6 != 2 || 1 < R3) && (R7 != 0 || ((R4 != 0 || ((R3 != R8 || R8 < 3) && (R3 != 1 || R8 != 2) && (R3 = R8 || R8 = 2 || R3 < 1))) && (R4 = 0 || (R8 < 3 && (R8 != 2 || 1 < R3) && (R3 = R8 || 1 < R8))))) && (R3 = R6 || 1 < R6) && (R7 = 0 || (R4 = 0 && R3 < 1));
// End of Parikh automata intersection problem
