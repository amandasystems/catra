// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R11, R12, R13, R14, R2, R9;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s1 [0, 57] { R2 += 1 };
  s0 -> s0 [0, 65535] { R1 += 1, R2 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R2 += 1 };
  s1 -> s1 [0, 57] { R2 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_1 {
  init s0;
  s0 -> s0 [0, 65535] { R9 += 1 };
  accepting s0;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s1 [102, 102] { R12 += 1 };
  s1 -> s2 [116, 116] { R12 += 1 };
  s2 -> s3 [112, 112] { R12 += 1 };
  s3 -> s3 [0, 65535];
  accepting s3;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s1 [0, 65535] { R14 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14 += 1, R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = 0 && R11 = 0 && R12 - R2 < 1 && -1 < R2 && R12 - R9 < 1 && (R13 != 0 || ((R10 != 0 || ((R2 != R14 || R14 - R9 < 1 || R9 < 1) && (R9 != R14 || R14 - R2 < 1 || R2 < 1) && (R2 = R14 || R9 = R14 || R2 < 1 || R9 < 1))) && (R10 = 0 || (R14 - R2 < 1 && (R2 != R14 || R14 - R9 < 1 || R14 < 0) && (R9 = R14 || R2 - R14 < 1))))) && (R13 = 0 || (R10 = 0 && (R2 < 1 || R9 < 1))) && (R2 - R12 < 1 || R9 - R12 < 1);
// End of Parikh automata intersection problem
