// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R3;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R3 += 1 };
  s1 -> s1 [0, 57] { R3 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s1 [0, 46] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [47, 47] { R17 += 1 };
  s0 -> s1 [48, 58] { R17 += 1 };
  s0 -> s3 [59, 59] { R17 += 1 };
  s0 -> s1 [60, 65535] { R17 += 1 };
  s1 -> s1 [0, 46] { R17 += 1 };
  s1 -> s2 [47, 47] { R17 += 1 };
  s1 -> s1 [48, 58] { R17 += 1 };
  s1 -> s3 [59, 59] { R17 += 1 };
  s1 -> s1 [60, 65535] { R17 += 1 };
  s2 -> s2 [0, 58] { R17 += 1 };
  s2 -> s4 [59, 59] { R17 += 1 };
  s2 -> s2 [60, 65535] { R17 += 1 };
  s3 -> s3 [0, 46] { R17 += 1 };
  s3 -> s4 [47, 47] { R17 += 1 };
  s3 -> s3 [48, 65535] { R17 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17 += 1 };
  s5 -> s5 [0, 65535];
  accepting s4, s5;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s1 [0, 65535] { R19 += 1, R14 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19 += 1, R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s1 [104, 104] { R21 += 1 };
  s1 -> s2 [116, 116] { R21 += 1 };
  s2 -> s3 [116, 116] { R21 += 1 };
  s3 -> s4 [112, 112] { R21 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R15 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R17 && R2 = 0 && R3 = R21 && R16 - R21 = 1 && R20 = 0 && R21 < R17 && -1 < R21 && (R17 != R19 || R18 - R21 = 1 || (R19 - R21 < 2 && (R19 - R21 != 1 || R14 = 0))) && (R22 != 0 || R21 = R23 || (R15 = 0 && R21 = 0)) && (R17 = R19 || (R14 = 0 && R17 - R21 = 1)) && (R22 = 0 || (R15 = 0 && R21 = 0));
// End of Parikh automata intersection problem
