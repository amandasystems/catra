// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R11, R12, R13, R14, R2, R9;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s1 [0, 57] { R2 += 1 };
  s0 -> s0 [0, 65535] { R1 += 1, R2 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R2 += 1 };
  s1 -> s1 [0, 57] { R2 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_1 {
  init s0;
  s0 -> s0 [0, 65535] { R9 += 1 };
  accepting s0;
};
automaton url_2 {
  init s0;
  s0 -> s1 [0, 101] { R12 += 1 };
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s2 [102, 102] { R12 += 1 };
  s0 -> s1 [103, 103] { R12 += 1 };
  s0 -> s3 [104, 104] { R12 += 1 };
  s0 -> s1 [105, 111] { R12 += 1 };
  s0 -> s4 [112, 112] { R12 += 1 };
  s0 -> s1 [113, 65535] { R12 += 1 };
  s1 -> s1 [0, 65535] { R12 += 1 };
  s1 -> s14 [0, 65535];
  s2 -> s1 [0, 115] { R12 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s13 [116, 116] { R12 += 1 };
  s2 -> s1 [117, 65535] { R12 += 1 };
  s3 -> s1 [0, 99] { R12 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s12 [100, 100] { R12 += 1 };
  s3 -> s1 [101, 115] { R12 += 1 };
  s3 -> s2 [116, 116] { R12 += 1 };
  s3 -> s1 [117, 65535] { R12 += 1 };
  s4 -> s1 [0, 113] { R12 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [114, 114] { R12 += 1 };
  s4 -> s1 [115, 65535] { R12 += 1 };
  s5 -> s1 [0, 110] { R12 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [111, 111] { R12 += 1 };
  s5 -> s1 [112, 65535] { R12 += 1 };
  s6 -> s1 [0, 114] { R12 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [115, 115] { R12 += 1 };
  s6 -> s1 [116, 65535] { R12 += 1 };
  s7 -> s1 [0, 111] { R12 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [112, 112] { R12 += 1 };
  s7 -> s1 [113, 65535] { R12 += 1 };
  s8 -> s1 [0, 100] { R12 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [101, 101] { R12 += 1 };
  s8 -> s1 [102, 65535] { R12 += 1 };
  s9 -> s1 [0, 113] { R12 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [114, 114] { R12 += 1 };
  s9 -> s1 [115, 65535] { R12 += 1 };
  s10 -> s1 [0, 110] { R12 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s11 [111, 111] { R12 += 1 };
  s10 -> s1 [112, 65535] { R12 += 1 };
  s11 -> s1 [0, 65535] { R12 += 1 };
  s12 -> s1 [0, 107] { R12 += 1 };
  s12 -> s12 [0, 65535];
  s12 -> s11 [108, 108] { R12 += 1 };
  s12 -> s1 [109, 65535] { R12 += 1 };
  s13 -> s1 [0, 111] { R12 += 1 };
  s13 -> s13 [0, 65535];
  s13 -> s11 [112, 112] { R12 += 1 };
  s13 -> s1 [113, 65535] { R12 += 1 };
  s14 -> s14 [0, 65535];
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s14, s6, s1, s7, s0, s10;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s1 [0, 65535] { R14 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R14 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = 0 && -1 < R2 && (R10 != 0 || ((R11 != 0 || ((R13 != 0 || ((R2 != R12 || R12 - R9 < 1 || R9 < 1) && (R2 != R14 || R14 - R9 < 1 || R9 < 1) && (R9 != R12 || R12 - R2 < 1 || R2 < 1) && (R9 != R14 || R14 - R2 < 1 || R2 < 1) && (R2 = R12 || R9 = R12 || R2 < 1 || R9 < 1) && (R2 = R14 || R9 = R14 || R2 < 1 || R9 < 1))) && (R13 = 0 || R2 < 1 || R9 < 1))) && (R11 = 0 || R2 < 1 || R9 < 1))) && (R10 = 0 || (R11 = 0 && R13 = 0 && R12 - R2 < 1 && R14 - R2 < 1 && (R2 != R12 || R12 - R9 < 1 || R12 < 0) && (R2 != R14 || R14 - R9 < 1 || R14 < 0) && (R9 = R12 || R2 - R12 < 1) && (R9 = R14 || R2 - R14 < 1)));
// End of Parikh automata intersection problem
