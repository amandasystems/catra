// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R2, R3, R46, R47, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R47 += 1 };
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R47 += 1 };
  s1 -> s1 [0, 57] { R47 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R47 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s1 [104, 104] { R75 += 1 };
  s1 -> s2 [116, 116] { R75 += 1 };
  s2 -> s3 [116, 116] { R75 += 1 };
  s3 -> s4 [112, 112] { R75 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R77 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R77 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 62] { R79 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R79 += 1, R2 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s3 [63, 63] { R79 += 1 };
  s0 -> s1 [64, 65535] { R79 += 1, R3 += 1 };
  s1 -> s1 [0, 62] { R79 += 1, R3 += 1 };
  s1 -> s3 [63, 63] { R79 += 1 };
  s1 -> s1 [64, 65535] { R79 += 1, R3 += 1 };
  s2 -> s1 [0, 62] { R79 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R79 += 1, R2 += 1, R3 += 1 };
  s2 -> s3 [63, 63] { R79 += 1 };
  s2 -> s1 [64, 65535] { R79 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R79 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_5 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R81 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R83 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R83 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s1 [48, 58] { R83 += 1, R71 += 1 };
  s0 -> s3 [59, 59] { R83 += 1, R71 += 1 };
  s0 -> s1 [60, 65535] { R83 += 1, R71 += 1 };
  s1 -> s1 [0, 46] { R83 += 1, R71 += 1 };
  s1 -> s1 [48, 58] { R83 += 1, R71 += 1 };
  s1 -> s3 [59, 59] { R83 += 1, R71 += 1 };
  s1 -> s1 [60, 65535] { R83 += 1, R71 += 1 };
  s2 -> s1 [0, 46] { R83 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R83 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [48, 58] { R83 += 1, R71 += 1 };
  s2 -> s3 [59, 59] { R83 += 1, R71 += 1 };
  s2 -> s1 [60, 65535] { R83 += 1, R71 += 1 };
  s3 -> s3 [0, 46] { R83 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R83 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [48, 65535] { R83 += 1, R71 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R85 += 1, R73 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R85 += 1, R73 += 1, R68 += 1 };
  s1 -> s4 [0, 65535] { R85 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R85 += 1, R73 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R85 += 1, R72 += 1, R73 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R85 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R83 && R2 = 0 && R46 = 0 && R47 - R82 = -1 && R70 = 0 && R74 = 0 && R75 - R82 = -1 && R78 = R82 && R79 = R83 && R71 - R3 < 1 && -1 < R3 && R71 - R67 < 1 && R82 - R83 < 1 && 0 < R82 && (R72 != 0 || ((R68 != 0 || ((R3 != R73 || R73 - R67 < 1 || R67 < 1) && (R67 != R73 || R73 - R3 < 1 || R3 < 1) && (R3 = R73 || R67 = R73 || R3 < 1 || R67 < 1))) && (R68 = 0 || (R73 - R3 < 1 && (R3 != R73 || R73 - R67 < 1 || R73 < 0) && (R67 = R73 || R3 - R73 < 1))))) && (R76 != 0 || R77 - R82 = -1 || (R69 = 0 && R82 = 1)) && (R80 != R82 || R81 = R83 || (R67 = 0 && R82 = R83)) && (R82 != R84 || R83 = R85 || ((R67 != 0 || R83 - R84 < 1 || R84 < 1) && (R67 = 0 || R83 < R84 || R84 < 1))) && (R72 = 0 || (R68 = 0 && (R3 < 1 || R67 < 1))) && (R76 = 0 || (R69 = 0 && R82 = 1)) && (R80 = R82 || (R67 = 0 && R82 = R83)) && (R82 = R84 || (R67 = 0 && R82 = R83)) && (R3 - R71 < 1 || R67 - R71 < 1);
// End of Parikh automata intersection problem
