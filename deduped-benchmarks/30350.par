// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R178, R179, R2, R264, R265, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R6, R7;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R265 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R265 += 1 };
  s1 -> s1 [0, 57] { R265 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R265 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s0 -> s1 [104, 104] { R323 += 1 };
  s1 -> s2 [116, 116] { R323 += 1 };
  s2 -> s3 [116, 116] { R323 += 1 };
  s3 -> s4 [112, 112] { R323 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R324 += 1, R325 += 1 };
  s0 -> s1 [0, 65535] { R325 += 1, R309 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R325 += 1, R309 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R326 += 1, R327 += 1 };
  s0 -> s1 [0, 65535] { R327 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R327 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R329 += 1 };
  s0 -> s0 [0, 65535] { R328 += 1, R329 += 1 };
  s0 -> s2 [0, 65535] { R329 += 1, R2 += 1 };
  s0 -> s3 [35, 35] { R329 += 1 };
  s0 -> s1 [36, 65535] { R329 += 1 };
  s1 -> s1 [0, 34] { R329 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R329 += 1 };
  s1 -> s1 [36, 65535] { R329 += 1 };
  s2 -> s1 [0, 34] { R329 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R329 += 1, R2 += 1 };
  s2 -> s3 [35, 35] { R329 += 1 };
  s2 -> s1 [36, 65535] { R329 += 1 };
  s3 -> s3 [0, 65535] { R329 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R331 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R330 += 1, R331 += 1 };
  s0 -> s2 [0, 65535] { R331 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [47, 47] { R331 += 1 };
  s0 -> s1 [48, 65535] { R331 += 1, R7 += 1 };
  s1 -> s1 [0, 46] { R331 += 1, R7 += 1 };
  s1 -> s3 [47, 47] { R331 += 1 };
  s1 -> s1 [48, 65535] { R331 += 1, R7 += 1 };
  s2 -> s1 [0, 46] { R331 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R331 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [47, 47] { R331 += 1 };
  s2 -> s1 [48, 65535] { R331 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R331 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 62] { R333 += 1, R179 += 1 };
  s0 -> s2 [0, 65535] { R333 += 1, R178 += 1, R179 += 1 };
  s0 -> s0 [0, 65535] { R332 += 1, R333 += 1 };
  s0 -> s3 [63, 63] { R333 += 1 };
  s0 -> s1 [64, 65535] { R333 += 1, R179 += 1 };
  s1 -> s1 [0, 62] { R333 += 1, R179 += 1 };
  s1 -> s3 [63, 63] { R333 += 1 };
  s1 -> s1 [64, 65535] { R333 += 1, R179 += 1 };
  s2 -> s1 [0, 62] { R333 += 1, R179 += 1 };
  s2 -> s2 [0, 65535] { R333 += 1, R178 += 1, R179 += 1 };
  s2 -> s3 [63, 63] { R333 += 1 };
  s2 -> s1 [64, 65535] { R333 += 1, R179 += 1 };
  s3 -> s3 [0, 65535] { R333 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 34] { R335 += 1, R311 += 1 };
  s0 -> s0 [0, 65535] { R334 += 1, R335 += 1 };
  s0 -> s2 [0, 65535] { R335 += 1, R310 += 1, R311 += 1 };
  s0 -> s3 [35, 35] { R335 += 1, R311 += 1 };
  s0 -> s1 [36, 65535] { R335 += 1, R311 += 1 };
  s1 -> s1 [0, 34] { R335 += 1, R311 += 1 };
  s1 -> s3 [35, 35] { R335 += 1, R311 += 1 };
  s1 -> s1 [36, 65535] { R335 += 1, R311 += 1 };
  s2 -> s1 [0, 34] { R335 += 1, R311 += 1 };
  s2 -> s2 [0, 65535] { R335 += 1, R310 += 1, R311 += 1 };
  s2 -> s3 [35, 35] { R335 += 1, R311 += 1 };
  s2 -> s1 [36, 65535] { R335 += 1, R311 += 1 };
  s3 -> s4 [0, 65535] { R335 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R335 += 1, R311 += 1 };
  s4 -> s4 [0, 65535] { R335 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R337 += 1, R313 += 1, R306 += 1 };
  s0 -> s0 [0, 65535] { R336 += 1, R337 += 1 };
  s0 -> s2 [0, 65535] { R337 += 1, R312 += 1, R313 += 1 };
  s1 -> s1 [0, 65535] { R337 += 1, R313 += 1, R306 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R337 += 1 };
  s2 -> s1 [0, 65535] { R337 += 1, R313 += 1, R306 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R337 += 1, R312 += 1, R313 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R337 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 90] { R339 += 1, R315 += 1 };
  s0 -> s2 [0, 65535] { R339 += 1, R314 += 1, R315 += 1 };
  s0 -> s0 [0, 65535] { R338 += 1, R339 += 1 };
  s0 -> s1 [92, 92] { R339 += 1, R315 += 1 };
  s0 -> s1 [94, 65535] { R339 += 1, R315 += 1 };
  s1 -> s1 [0, 90] { R339 += 1, R315 += 1 };
  s1 -> s1 [0, 65535] { R339 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [92, 92] { R339 += 1, R315 += 1 };
  s1 -> s1 [94, 65535] { R339 += 1, R315 += 1 };
  s2 -> s1 [0, 90] { R339 += 1, R315 += 1 };
  s2 -> s2 [0, 65535] { R339 += 1, R314 += 1, R315 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [92, 92] { R339 += 1, R315 += 1 };
  s2 -> s1 [94, 65535] { R339 += 1, R315 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R341 += 1, R317 += 1, R307 += 1 };
  s0 -> s2 [0, 65535] { R341 += 1, R316 += 1, R317 += 1 };
  s0 -> s0 [0, 65535] { R340 += 1, R341 += 1 };
  s1 -> s1 [0, 65535] { R341 += 1, R317 += 1, R307 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R341 += 1 };
  s2 -> s1 [0, 65535] { R341 += 1, R317 += 1, R307 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R341 += 1, R316 += 1, R317 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R341 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s0 [0, 65535] { R342 += 1, R343 += 1 };
  s0 -> s1 [0, 65535] { R343 += 1, R318 += 1, R319 += 1 };
  s0 -> s2 [47, 47] { R343 += 1, R319 += 1 };
  s1 -> s1 [0, 65535] { R343 += 1, R318 += 1, R319 += 1 };
  s1 -> s2 [47, 47] { R343 += 1, R319 += 1 };
  s2 -> s3 [47, 47] { R343 += 1, R319 += 1 };
  s3 -> s3 [0, 65535] { R343 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_13 {
  init s0;
  s0 -> s0 [0, 65535] { R344 += 1, R345 += 1 };
  s0 -> s1 [0, 65535] { R345 += 1, R321 += 1, R308 += 1 };
  s0 -> s2 [0, 65535] { R345 += 1, R320 += 1, R321 += 1 };
  s1 -> s1 [0, 65535] { R345 += 1, R321 += 1, R308 += 1 };
  s1 -> s4 [0, 65535] { R345 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R345 += 1, R321 += 1, R308 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R345 += 1, R320 += 1, R321 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R345 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R313 && R1 = R345 && R6 = 2 && R178 = 2 && R179 = R312 && R264 = 0 && R265 - R344 = -1 && R310 = R312 && R311 = R313 && R318 = 0 && R319 = 2 && R320 = 0 && R321 = 2 && R322 = 0 && R323 - R344 = -1 && R324 = 0 && R325 - R344 = -1 && R326 = R344 && R327 = R345 && R328 = R344 && R329 = R345 && R330 = R344 && R331 = R345 && R332 = R344 && R333 = R345 && R334 = R344 && R335 = R345 && R336 = R344 && R337 = R345 && R338 = R344 && R339 = R345 && R340 = R344 && R341 = R345 && R342 = R344 && R343 = R345 && R2 < 3 && R7 < R313 && R312 < R7 && 1 < R312 && R344 - R345 < 1 && 1 < R344 && (R312 != R315 || R314 = 2 || ((R307 != 0 || R7 - R315 < 1 || R315 < 3) && (R307 = 0 || R7 - R315 < 1 || R315 < 2))) && (R312 != R317 || R316 = 2 || ((R307 != 0 || R7 - R317 < 1 || R317 < 3) && (R307 = 0 || R7 - R317 < 1 || R317 < 2))) && (R312 = R315 || (R307 = 0 && R312 = 2)) && (R312 = R317 || (R307 = 0 && R312 = 2));
// End of Parikh automata intersection problem
