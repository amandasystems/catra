// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R4, R45, R46, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R46 += 1 };
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R46 += 1 };
  s1 -> s1 [0, 57] { R46 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s1 [104, 104] { R72 += 1 };
  s1 -> s2 [116, 116] { R72 += 1 };
  s2 -> s3 [116, 116] { R72 += 1 };
  s3 -> s4 [112, 112] { R72 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s1 [0, 65535] { R74 += 1, R66 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R74 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s1 [0, 65535] { R76 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R76 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 46] { R78 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [47, 47] { R78 += 1 };
  s0 -> s1 [48, 65535] { R78 += 1, R4 += 1 };
  s1 -> s1 [0, 46] { R78 += 1, R4 += 1 };
  s1 -> s3 [47, 47] { R78 += 1 };
  s1 -> s1 [48, 65535] { R78 += 1, R4 += 1 };
  s2 -> s1 [0, 46] { R78 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R78 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [47, 47] { R78 += 1 };
  s2 -> s1 [48, 65535] { R78 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R78 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R80 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R80 += 1, R67 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s1 [48, 58] { R80 += 1, R68 += 1 };
  s0 -> s3 [59, 59] { R80 += 1, R68 += 1 };
  s0 -> s1 [60, 65535] { R80 += 1, R68 += 1 };
  s1 -> s1 [0, 46] { R80 += 1, R68 += 1 };
  s1 -> s1 [48, 58] { R80 += 1, R68 += 1 };
  s1 -> s3 [59, 59] { R80 += 1, R68 += 1 };
  s1 -> s1 [60, 65535] { R80 += 1, R68 += 1 };
  s2 -> s1 [0, 46] { R80 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R80 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [48, 58] { R80 += 1, R68 += 1 };
  s2 -> s3 [59, 59] { R80 += 1, R68 += 1 };
  s2 -> s1 [60, 65535] { R80 += 1, R68 += 1 };
  s3 -> s3 [0, 46] { R80 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R80 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [48, 65535] { R80 += 1, R68 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R82 += 1, R69 += 1, R70 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R70 += 1, R65 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1, R69 += 1, R70 += 1 };
  s1 -> s2 [0, 65535] { R82 += 1, R70 += 1, R65 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R82 += 1, R70 += 1, R65 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R82 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R82 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R68 && R1 = R80 && R3 = 2 && R4 = R67 && R45 = 0 && R46 - R79 = -1 && R71 = 0 && R72 - R79 = -1 && R77 = R79 && R78 = R80 && R67 - R68 < 1 && -1 < R67 && R79 - R80 < 1 && 0 < R79 && (R67 != R69 || R68 = R70 || ((R65 != 0 || R68 - R69 < 1 || R69 < 0) && (R65 = 0 || R68 < R69 || R69 < 0))) && (R73 != 0 || R74 - R79 = -1 || (R66 = 0 && R79 = 1)) && (R75 != R79 || R76 = R80 || (R68 = 0 && (R67 != 0 || R80 - R79 < 1))) && (R79 != R81 || R80 = R82 || ((R67 != 0 || R68 != 0 || R80 - R81 < 1 || R81 < 1) && (R68 < 1 || R80 < R81 || R81 < 1))) && (R67 = R69 || (R65 = 0 && R67 = R68)) && (R73 = 0 || (R66 = 0 && R79 = 1)) && (R75 = R79 || (R68 = 0 && (R67 != 0 || R80 - R79 < 1))) && (R79 = R81 || (R68 = 0 && (R67 != 0 || R80 - R79 < 1)));
// End of Parikh automata intersection problem
