// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R2, R3, R4, R5, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 31];
  s0 -> s1 [32, 32];
  s0 -> s0 [33, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_2 {
  init s0;
  s0 -> s1 [0, 31] { R10 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s2 [32, 32];
  s0 -> s1 [33, 65535] { R10 += 1 };
  s1 -> s1 [0, 31] { R10 += 1 };
  s1 -> s2 [32, 32];
  s1 -> s1 [33, 65535] { R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 8] { R78 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [9, 13] { R78 += 1 };
  s0 -> s1 [14, 31] { R78 += 1 };
  s0 -> s2 [32, 32] { R78 += 1 };
  s0 -> s1 [33, 65535] { R78 += 1 };
  s1 -> s1 [0, 65535] { R78 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R78 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_4 {
  init s0;
  s0 -> s1 [0, 65535] { R80 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535] { R80 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 8] { R82 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [9, 13] { R82 += 1 };
  s0 -> s1 [14, 31] { R82 += 1 };
  s0 -> s2 [32, 32] { R82 += 1 };
  s0 -> s1 [33, 65535] { R82 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R82 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_6 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R84 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_7 {
  init s0;
  s0 -> s1 [0, 65535] { R86 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535] { R86 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 64] { R98 += 1 };
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s2 [84, 84] { R98 += 1 };
  s0 -> s1 [85, 65535] { R98 += 1 };
  s1 -> s1 [0, 64] { R98 += 1 };
  s1 -> s2 [84, 84] { R98 += 1 };
  s1 -> s1 [85, 65535] { R98 += 1 };
  s2 -> s2 [0, 64] { R98 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [84, 65535] { R98 += 1 };
  accepting s2;
};
automaton value_9 {
  init s0;
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s1 [0, 65535] { R100 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R100 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 83] { R102 += 1 };
  s0 -> s2 [0, 65535] { R102 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s3 [84, 84] { R102 += 1 };
  s0 -> s1 [85, 65535] { R102 += 1 };
  s1 -> s1 [0, 83] { R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R102 += 1 };
  s1 -> s1 [85, 65535] { R102 += 1 };
  s2 -> s1 [0, 83] { R102 += 1 };
  s2 -> s2 [0, 65535] { R102 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [84, 84] { R102 += 1 };
  s2 -> s1 [85, 65535] { R102 += 1 };
  s3 -> s3 [0, 65535] { R102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 83] { R104 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R104 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s1 [85, 65535] { R104 += 1, R88 += 1 };
  s1 -> s1 [0, 83] { R104 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R104 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R104 += 1, R88 += 1 };
  s2 -> s1 [0, 83] { R104 += 1, R88 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R104 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [85, 65535] { R104 += 1, R88 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_12 {
  init s0;
  s0 -> s1 [0, 65535] { R106 += 1, R89 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R106 += 1, R90 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R106 += 1, R89 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R106 += 1, R90 += 1, R75 += 1 };
  s2 -> s3 [0, 65535] { R106 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R106 += 1, R90 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R106 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_13 {
  init s0;
  s0 -> s1 [0, 84] { R108 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s2 [0, 65535] { R108 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [86, 86] { R108 += 1, R92 += 1 };
  s0 -> s1 [87, 65535] { R108 += 1, R92 += 1 };
  s1 -> s1 [0, 84] { R108 += 1, R92 += 1 };
  s1 -> s3 [86, 86] { R108 += 1, R92 += 1 };
  s1 -> s1 [87, 65535] { R108 += 1, R92 += 1 };
  s2 -> s1 [0, 84] { R108 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R108 += 1, R91 += 1, R92 += 1 };
  s2 -> s3 [86, 86] { R108 += 1, R92 += 1 };
  s2 -> s1 [87, 65535] { R108 += 1, R92 += 1 };
  s3 -> s3 [0, 84] { R108 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R108 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [86, 65535] { R108 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_14 {
  init s0;
  s0 -> s1 [0, 65535] { R110 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [0, 65535] { R110 += 1, R94 += 1, R76 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R110 += 1, R94 += 1, R76 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R110 += 1, R94 += 1, R76 += 1 };
  s2 -> s4 [0, 65535] { R110 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R110 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value_15 {
  init s0;
  s0 -> s1 [0, 83] { R112 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [84, 84] { R112 += 1, R96 += 1 };
  s0 -> s4 [84, 84] { R112 += 1, R96 += 1 };
  s0 -> s1 [87, 65535] { R112 += 1, R96 += 1 };
  s1 -> s1 [0, 83] { R112 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R112 += 1, R96 += 1 };
  s1 -> s4 [84, 84] { R112 += 1, R96 += 1 };
  s1 -> s1 [87, 65535] { R112 += 1, R96 += 1 };
  s2 -> s1 [0, 83] { R112 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R112 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R112 += 1, R96 += 1 };
  s2 -> s4 [84, 84] { R112 += 1, R96 += 1 };
  s2 -> s1 [87, 65535] { R112 += 1, R96 += 1 };
  s3 -> s3 [0, 84] { R112 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R112 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [87, 65535] { R112 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R112 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining c0
automaton c0_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
constraint R1 = R92 && R2 = R86 && R9 = 0 && R10 = R108 && R77 - R86 = -1 && R78 = R86 && R79 - R86 = -1 && R80 = R86 && R81 = 0 && R82 = 1 && R83 = 0 && R84 = 1 && R85 - R108 = 1 && R91 = 0 && R97 = 0 && R98 = R108 && R107 = 0 && R0 != 0 && R5 < 1 && R108 < R86 && -1 < R92 && -1 < R108 && (R87 != 0 || R88 = R92 || (R75 = 0 && R92 = 0)) && (R89 != 0 || R90 = R92 || (R75 = 0 && R92 = 0)) && (R92 != 0 || ((R109 != 0 || ((R111 != 0 || ((R108 != R112 || R110 = R112 || R86 - R112 < 1 || R112 < 1) && (R108 = R112 || R108 < 1))) && (R111 = 0 || R108 < 1))) && (R109 = 0 || R108 < 1))) && (R99 != 0 || R100 = R108 || (R92 = 0 && R108 = 0)) && (R101 != 0 || R102 = R108 || (R92 = 0 && R108 = 0)) && (R103 != 0 || R104 = R108 || (R92 = 0 && R108 = 0)) && (R105 != 0 || R106 = R108 || (R92 = 0 && R108 = 0)) && (R109 != 0 || ((R111 != 0 || ((R108 != R112 || R110 = R112 || R86 - R112 < 1 || R92 < 1 || R112 < 0) && (R108 = R112 || R92 < 1))) && (R111 = 0 || R92 < 1))) && (R76 = 0 || (R93 = 0 && R94 = 0)) && (R76 = 0 || (R95 = 0 && R96 = 0)) && (R87 = 0 || (R75 = 0 && R92 = 0)) && (R89 = 0 || (R75 = 0 && R92 = 0)) && (R99 = 0 || (R92 = 0 && R108 = 0)) && (R101 = 0 || (R92 = 0 && R108 = 0)) && (R103 = 0 || (R92 = 0 && R108 = 0)) && (R105 = 0 || (R92 = 0 && R108 = 0)) && (R109 = 0 || R92 < 1);
// End of Parikh automata intersection problem
