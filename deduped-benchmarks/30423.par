// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R5, R6;
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 31];
  s0 -> s1 [32, 32];
  s0 -> s0 [33, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value_2 {
  init s0;
  s0 -> s1 [0, 31] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [32, 32];
  s0 -> s1 [33, 65535] { R6 += 1 };
  s1 -> s1 [0, 31] { R6 += 1 };
  s1 -> s2 [32, 32];
  s1 -> s1 [33, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s1 [0, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_4 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s1 [0, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_6 {
  init s0;
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s1 [0, 65535] { R30 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R30 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_7 {
  init s0;
  s0 -> s1 [0, 65535] { R32 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 64] { R34 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s2 [65, 65] { R34 += 1 };
  s0 -> s1 [66, 65535] { R34 += 1 };
  s1 -> s1 [0, 64] { R34 += 1 };
  s1 -> s2 [65, 65] { R34 += 1 };
  s1 -> s1 [66, 65535] { R34 += 1 };
  s2 -> s2 [0, 65535] { R34 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value_9 {
  init s0;
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s1 [0, 65535] { R36 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = R32 && R5 = 0 && R6 = R34 && R23 - R32 = -1 && R24 = R32 && R25 - R32 = -1 && R26 = R32 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 - R34 = 1 && R33 = 0 && R0 != 0 && R34 < R32 && -1 < R34 && (R35 != 0 || R34 = R36 || (R22 = 0 && R34 = 0)) && (R35 = 0 || (R22 = 0 && R34 = 0));
// End of Parikh automata intersection problem
