// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R2, R3, R4, R5, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R9;
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 31];
  s0 -> s1 [32, 32];
  s0 -> s0 [33, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_2 {
  init s0;
  s0 -> s1 [0, 31] { R10 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s2 [32, 32];
  s0 -> s1 [33, 65535] { R10 += 1 };
  s1 -> s1 [0, 31] { R10 += 1 };
  s1 -> s2 [32, 32];
  s1 -> s1 [33, 65535] { R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 8] { R78 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [9, 13] { R78 += 1 };
  s0 -> s1 [14, 31] { R78 += 1 };
  s0 -> s2 [32, 32] { R78 += 1 };
  s0 -> s1 [33, 65535] { R78 += 1 };
  s1 -> s1 [0, 65535] { R78 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R78 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_4 {
  init s0;
  s0 -> s1 [0, 65535] { R80 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535] { R80 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 8] { R82 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [9, 13] { R82 += 1 };
  s0 -> s1 [14, 31] { R82 += 1 };
  s0 -> s2 [32, 32] { R82 += 1 };
  s0 -> s1 [33, 65535] { R82 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1 };
  s2 -> s1 [0, 65535] { R82 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_6 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R84 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_7 {
  init s0;
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s1 [0, 65535] { R86 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R86 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 64] { R124 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s2 [84, 84] { R124 += 1 };
  s0 -> s1 [85, 65535] { R124 += 1 };
  s1 -> s1 [0, 64] { R124 += 1 };
  s1 -> s2 [84, 84] { R124 += 1 };
  s1 -> s1 [85, 65535] { R124 += 1 };
  s2 -> s2 [0, 64] { R124 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [84, 65535] { R124 += 1 };
  accepting s2;
};
automaton value_9 {
  init s0;
  s0 -> s1 [0, 65535] { R126 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s1 -> s1 [0, 65535] { R126 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 83] { R128 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R5 += 1 };
  s0 -> s3 [84, 84] { R128 += 1 };
  s0 -> s1 [85, 65535] { R128 += 1 };
  s1 -> s1 [0, 83] { R128 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R128 += 1 };
  s1 -> s1 [85, 65535] { R128 += 1 };
  s2 -> s1 [0, 83] { R128 += 1 };
  s2 -> s2 [0, 65535] { R128 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [84, 84] { R128 += 1 };
  s2 -> s1 [85, 65535] { R128 += 1 };
  s3 -> s3 [0, 65535] { R128 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 83] { R130 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [85, 65535] { R130 += 1, R114 += 1 };
  s1 -> s1 [0, 83] { R130 += 1, R114 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R130 += 1 };
  s1 -> s1 [85, 65535] { R130 += 1, R114 += 1 };
  s2 -> s1 [0, 83] { R130 += 1, R114 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R130 += 1, R113 += 1, R114 += 1 };
  s2 -> s1 [85, 65535] { R130 += 1, R114 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_12 {
  init s0;
  s0 -> s1 [0, 65535] { R132 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R116 += 1, R75 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R132 += 1, R115 += 1, R116 += 1 };
  s1 -> s2 [0, 65535] { R132 += 1, R116 += 1, R75 += 1 };
  s2 -> s3 [0, 65535] { R132 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R132 += 1, R116 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R132 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_13 {
  init s0;
  s0 -> s1 [0, 84] { R134 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s2 [0, 65535] { R134 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [88, 65535] { R134 += 1, R118 += 1 };
  s1 -> s1 [0, 84] { R134 += 1, R118 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R134 += 1 };
  s1 -> s1 [88, 65535] { R134 += 1, R118 += 1 };
  s2 -> s1 [0, 84] { R134 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R134 += 1, R117 += 1, R118 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R134 += 1, R118 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_14 {
  init s0;
  s0 -> s1 [0, 65535] { R136 += 1, R120 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R119 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s1 -> s1 [0, 65535] { R136 += 1, R120 += 1, R76 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R136 += 1 };
  s2 -> s1 [0, 65535] { R136 += 1, R120 += 1, R76 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R136 += 1, R119 += 1, R120 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R136 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value_15 {
  init s0;
  s0 -> s1 [0, 83] { R138 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R138 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s3 [84, 84] { R138 += 1, R122 += 1 };
  s0 -> s4 [84, 84] { R138 += 1, R122 += 1 };
  s0 -> s5 [88, 88] { R138 += 1, R122 += 1 };
  s0 -> s1 [89, 65535] { R138 += 1, R122 += 1 };
  s1 -> s1 [0, 83] { R138 += 1, R122 += 1 };
  s1 -> s3 [84, 84] { R138 += 1, R122 += 1 };
  s1 -> s4 [84, 84] { R138 += 1, R122 += 1 };
  s1 -> s5 [88, 88] { R138 += 1, R122 += 1 };
  s1 -> s1 [89, 65535] { R138 += 1, R122 += 1 };
  s2 -> s1 [0, 83] { R138 += 1, R122 += 1 };
  s2 -> s2 [0, 65535] { R138 += 1, R121 += 1, R122 += 1 };
  s2 -> s3 [84, 84] { R138 += 1, R122 += 1 };
  s2 -> s4 [84, 84] { R138 += 1, R122 += 1 };
  s2 -> s5 [88, 88] { R138 += 1, R122 += 1 };
  s2 -> s1 [89, 65535] { R138 += 1, R122 += 1 };
  s4 -> s4 [0, 84] { R138 += 1, R122 += 1 };
  s4 -> s7 [88, 88] { R138 += 1, R122 += 1 };
  s4 -> s4 [89, 65535] { R138 += 1, R122 += 1 };
  s5 -> s5 [0, 83] { R138 += 1, R122 += 1 };
  s5 -> s5 [0, 65535] { R138 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R138 += 1, R122 += 1 };
  s5 -> s8 [84, 84] { R138 += 1, R122 += 1 };
  s5 -> s5 [88, 65535] { R138 += 1, R122 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 84] { R138 += 1, R122 += 1 };
  s7 -> s7 [0, 65535] { R138 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [88, 65535] { R138 += 1, R122 += 1 };
  s8 -> s8 [0, 65535] { R138 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining c0
automaton c0_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
constraint R2 = R86 && R9 = 0 && R10 = R138 && R77 - R86 = -1 && R78 = R86 && R79 - R86 = -1 && R80 = R86 && R81 = 0 && R82 = 1 && R83 = 0 && R84 = 1 && R85 - R138 = 1 && R121 = 0 && R122 = 0 && R123 = 0 && R124 = R138 && R137 = 0 && R0 != 0 && -1 < R1 && R5 < 1 && R138 < R86 && -1 < R138 && (R1 != 0 || R75 = 0 || (R113 = 0 && R114 = 0)) && (R1 != 0 || R75 = 0 || (R115 = 0 && R116 = 0)) && (R1 != 0 || R75 = 0 || (R117 = 0 && R118 = 0)) && (R113 != 0 || R1 = R114 || R1 < 1) && (R115 != 0 || R1 = R116 || R1 < 1) && (R117 != 0 || R1 = R118 || R1 < 1) && (R125 != 0 || R126 = R138 || (R1 = 0 && R138 = 0)) && (R127 != 0 || R128 = R138 || (R1 = 0 && R138 = 0)) && (R129 != 0 || R130 = R138 || (R1 = 0 && R138 = 0)) && (R131 != 0 || R132 = R138 || (R1 = 0 && R138 = 0)) && (R133 != 0 || R134 = R138 || (R1 = 0 && R138 = 0)) && (R135 != 0 || R136 = R138 || (R1 = 0 && R138 = 0)) && (R76 = 0 || (R119 = 0 && R120 = 0)) && (R113 = 0 || R1 < 1) && (R115 = 0 || R1 < 1) && (R117 = 0 || R1 < 1) && (R125 = 0 || (R1 = 0 && R138 = 0)) && (R127 = 0 || (R1 = 0 && R138 = 0)) && (R129 = 0 || (R1 = 0 && R138 = 0)) && (R131 = 0 || (R1 = 0 && R138 = 0)) && (R133 = 0 || (R1 = 0 && R138 = 0)) && (R135 = 0 || (R1 = 0 && R138 = 0));
// End of Parikh automata intersection problem
