// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s1 [0, 43];
  s0 -> s1 [45, 98];
  s0 -> s2 [99, 99];
  s0 -> s1 [100, 106];
  s0 -> s3 [107, 107];
  s0 -> s1 [108, 111];
  s0 -> s4 [112, 112];
  s0 -> s1 [113, 115];
  s0 -> s5 [116, 116];
  s0 -> s6 [117, 117];
  s0 -> s1 [118, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  s2 -> s1 [0, 43];
  s2 -> s1 [45, 110];
  s2 -> s62 [111, 111];
  s2 -> s1 [112, 65535];
  s3 -> s1 [0, 43];
  s3 -> s1 [45, 100];
  s3 -> s55 [101, 101];
  s3 -> s1 [102, 65535];
  s4 -> s1 [0, 43];
  s4 -> s1 [45, 113];
  s4 -> s32 [114, 114];
  s4 -> s1 [115, 65535];
  s5 -> s1 [0, 43];
  s5 -> s1 [45, 100];
  s5 -> s12 [101, 101];
  s5 -> s1 [102, 113];
  s5 -> s13 [114, 114];
  s5 -> s1 [115, 65535];
  s6 -> s1 [0, 43];
  s6 -> s1 [45, 111];
  s6 -> s7 [112, 112];
  s6 -> s1 [113, 65535];
  s7 -> s1 [0, 43];
  s7 -> s1 [45, 102];
  s7 -> s8 [103, 103];
  s7 -> s1 [104, 65535];
  s8 -> s1 [0, 43];
  s8 -> s1 [45, 113];
  s8 -> s9 [114, 114];
  s8 -> s1 [115, 65535];
  s9 -> s1 [0, 43];
  s9 -> s1 [45, 96];
  s9 -> s10 [97, 97];
  s9 -> s1 [98, 65535];
  s10 -> s1 [0, 43];
  s10 -> s1 [45, 99];
  s10 -> s11 [100, 100];
  s10 -> s1 [101, 65535];
  s11 -> s1 [0, 43];
  s11 -> s1 [45, 100];
  s11 -> s12 [101, 101];
  s11 -> s1 [102, 65535];
  s12 -> s1 [0, 43];
  s12 -> s1 [45, 65535];
  s13 -> s1 [0, 43];
  s13 -> s1 [45, 96];
  s13 -> s14 [97, 97];
  s13 -> s1 [98, 65535];
  s14 -> s1 [0, 43];
  s14 -> s1 [45, 104];
  s14 -> s15 [105, 105];
  s14 -> s1 [106, 109];
  s14 -> s16 [110, 110];
  s14 -> s1 [111, 65535];
  s15 -> s1 [0, 43];
  s15 -> s1 [45, 107];
  s15 -> s29 [108, 108];
  s15 -> s1 [109, 65535];
  s16 -> s1 [0, 43];
  s16 -> s1 [45, 114];
  s16 -> s17 [115, 115];
  s16 -> s1 [116, 65535];
  s17 -> s1 [0, 43];
  s17 -> s1 [45, 101];
  s17 -> s18 [102, 102];
  s17 -> s1 [103, 65535];
  s18 -> s1 [0, 43];
  s18 -> s1 [45, 100];
  s18 -> s19 [101, 101];
  s18 -> s1 [102, 65535];
  s19 -> s1 [0, 43];
  s19 -> s1 [45, 113];
  s19 -> s20 [114, 114];
  s19 -> s1 [115, 65535];
  s20 -> s1 [0, 43];
  s20 -> s21 [45, 45];
  s20 -> s1 [46, 65535];
  s21 -> s1 [0, 43];
  s21 -> s1 [45, 100];
  s21 -> s22 [101, 101];
  s21 -> s1 [102, 65535];
  s22 -> s1 [0, 43];
  s22 -> s1 [45, 109];
  s22 -> s23 [110, 110];
  s22 -> s1 [111, 65535];
  s23 -> s1 [0, 43];
  s23 -> s1 [45, 98];
  s23 -> s24 [99, 99];
  s23 -> s1 [100, 65535];
  s24 -> s1 [0, 43];
  s24 -> s1 [45, 110];
  s24 -> s25 [111, 111];
  s24 -> s1 [112, 65535];
  s25 -> s1 [0, 43];
  s25 -> s1 [45, 99];
  s25 -> s26 [100, 100];
  s25 -> s1 [101, 65535];
  s26 -> s1 [0, 43];
  s26 -> s1 [45, 104];
  s26 -> s27 [105, 105];
  s26 -> s1 [106, 65535];
  s27 -> s1 [0, 43];
  s27 -> s1 [45, 109];
  s27 -> s28 [110, 110];
  s27 -> s1 [111, 65535];
  s28 -> s1 [0, 43];
  s28 -> s1 [45, 102];
  s28 -> s12 [103, 103];
  s28 -> s1 [104, 65535];
  s29 -> s1 [0, 43];
  s29 -> s1 [45, 100];
  s29 -> s30 [101, 101];
  s29 -> s1 [102, 65535];
  s30 -> s1 [0, 43];
  s30 -> s1 [45, 113];
  s30 -> s31 [114, 114];
  s30 -> s1 [115, 65535];
  s31 -> s1 [0, 43];
  s31 -> s1 [45, 114];
  s31 -> s12 [115, 115];
  s31 -> s1 [116, 65535];
  s32 -> s1 [0, 43];
  s32 -> s1 [45, 110];
  s32 -> s33 [111, 111];
  s32 -> s1 [112, 65535];
  s33 -> s1 [0, 43];
  s33 -> s1 [45, 119];
  s33 -> s34 [120, 120];
  s33 -> s1 [121, 65535];
  s34 -> s1 [0, 43];
  s34 -> s1 [45, 120];
  s34 -> s35 [121, 121];
  s34 -> s1 [122, 65535];
  s35 -> s1 [0, 43];
  s35 -> s36 [45, 45];
  s35 -> s1 [46, 65535];
  s36 -> s1 [0, 43];
  s36 -> s1 [45, 96];
  s36 -> s37 [97, 97];
  s36 -> s1 [98, 65535];
  s37 -> s1 [0, 43];
  s37 -> s1 [45, 116];
  s37 -> s38 [117, 117];
  s37 -> s1 [118, 65535];
  s38 -> s1 [0, 43];
  s38 -> s1 [45, 115];
  s38 -> s39 [116, 116];
  s38 -> s1 [117, 65535];
  s39 -> s1 [0, 43];
  s39 -> s1 [45, 103];
  s39 -> s40 [104, 104];
  s39 -> s1 [105, 65535];
  s40 -> s1 [0, 43];
  s40 -> s1 [45, 100];
  s40 -> s41 [101, 101];
  s40 -> s1 [102, 110];
  s40 -> s42 [111, 111];
  s40 -> s1 [112, 65535];
  s41 -> s1 [0, 43];
  s41 -> s1 [45, 109];
  s41 -> s50 [110, 110];
  s41 -> s1 [111, 65535];
  s42 -> s1 [0, 43];
  s42 -> s1 [45, 113];
  s42 -> s43 [114, 114];
  s42 -> s1 [115, 65535];
  s43 -> s1 [0, 43];
  s43 -> s1 [45, 104];
  s43 -> s44 [105, 105];
  s43 -> s1 [106, 65535];
  s44 -> s1 [0, 43];
  s44 -> s1 [45, 121];
  s44 -> s45 [122, 122];
  s44 -> s1 [123, 65535];
  s45 -> s1 [0, 43];
  s45 -> s1 [45, 96];
  s45 -> s46 [97, 97];
  s45 -> s1 [98, 65535];
  s46 -> s1 [0, 43];
  s46 -> s1 [45, 115];
  s46 -> s47 [116, 116];
  s46 -> s1 [117, 65535];
  s47 -> s1 [0, 43];
  s47 -> s1 [45, 104];
  s47 -> s48 [105, 105];
  s47 -> s1 [106, 65535];
  s48 -> s1 [0, 43];
  s48 -> s1 [45, 110];
  s48 -> s49 [111, 111];
  s48 -> s1 [112, 65535];
  s49 -> s1 [0, 43];
  s49 -> s1 [45, 109];
  s49 -> s12 [110, 110];
  s49 -> s1 [111, 65535];
  s50 -> s1 [0, 43];
  s50 -> s1 [45, 115];
  s50 -> s51 [116, 116];
  s50 -> s1 [117, 65535];
  s51 -> s1 [0, 43];
  s51 -> s1 [45, 104];
  s51 -> s52 [105, 105];
  s51 -> s1 [106, 65535];
  s52 -> s1 [0, 43];
  s52 -> s1 [45, 98];
  s52 -> s53 [99, 99];
  s52 -> s1 [100, 65535];
  s53 -> s1 [0, 43];
  s53 -> s1 [45, 96];
  s53 -> s54 [97, 97];
  s53 -> s1 [98, 65535];
  s54 -> s1 [0, 43];
  s54 -> s1 [45, 115];
  s54 -> s11 [116, 116];
  s54 -> s1 [117, 65535];
  s55 -> s1 [0, 43];
  s55 -> s1 [45, 100];
  s55 -> s56 [101, 101];
  s55 -> s1 [102, 65535];
  s56 -> s1 [0, 43];
  s56 -> s1 [45, 111];
  s56 -> s57 [112, 112];
  s56 -> s1 [113, 65535];
  s57 -> s1 [0, 43];
  s57 -> s58 [45, 45];
  s57 -> s1 [46, 65535];
  s58 -> s1 [0, 43];
  s58 -> s1 [45, 96];
  s58 -> s59 [97, 97];
  s58 -> s1 [98, 65535];
  s59 -> s1 [0, 43];
  s59 -> s1 [45, 107];
  s59 -> s60 [108, 108];
  s59 -> s1 [109, 65535];
  s60 -> s1 [0, 43];
  s60 -> s1 [45, 104];
  s60 -> s61 [105, 105];
  s60 -> s1 [106, 65535];
  s61 -> s1 [0, 43];
  s61 -> s1 [45, 117];
  s61 -> s11 [118, 118];
  s61 -> s1 [119, 65535];
  s62 -> s1 [0, 43];
  s62 -> s1 [45, 109];
  s62 -> s63 [110, 110];
  s62 -> s1 [111, 65535];
  s63 -> s1 [0, 43];
  s63 -> s1 [45, 109];
  s63 -> s64 [110, 110];
  s63 -> s1 [111, 65535];
  s64 -> s1 [0, 43];
  s64 -> s1 [45, 100];
  s64 -> s65 [101, 101];
  s64 -> s1 [102, 65535];
  s65 -> s1 [0, 43];
  s65 -> s1 [45, 98];
  s65 -> s46 [99, 99];
  s65 -> s1 [100, 65535];
  accepting s41, s52, s17, s3, s16, s30, s4, s59, s19, s44, s63, s33, s34, s45, s8, s55, s24, s37, s13, s65, s5, s23, s48, s2, s60, s9, s28, s36, s27, s54, s43, s32, s58, s47, s14, s22, s21, s64, s6, s26, s50, s1, s31, s29, s61, s53, s42, s57, s39, s46, s56, s20, s51, s7, s0, s35, s18, s49, s15, s62, s10, s40, s38, s11, s25;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 8] { R4 += 1 };
  s0 -> s0 [0, 65535] { R3 += 1, R4 += 1 };
  s0 -> s2 [9, 13] { R4 += 1 };
  s0 -> s1 [14, 31] { R4 += 1 };
  s0 -> s2 [32, 32] { R4 += 1 };
  s0 -> s1 [33, 65535] { R4 += 1 };
  s1 -> s1 [0, 65535] { R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 65535] { R6 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R8 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s2 [9, 13] { R8 += 1 };
  s0 -> s1 [14, 31] { R8 += 1 };
  s0 -> s2 [32, 32] { R8 += 1 };
  s0 -> s1 [33, 65535] { R8 += 1 };
  s1 -> s1 [0, 65535] { R8 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R10 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R10 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 != 0 && (R1 != 0 || ((R0 != R4 || R3 - R4 = -1 || R4 < 0) && (R0 = R4 || R0 < 1))) && (R1 != 0 || ((R0 != R6 || R5 - R6 = -1 || R6 < 0) && (R0 = R6 || R0 < 1))) && (R2 != 0 || ((R7 != 0 || ((R9 != 0 || ((R0 != R8 || R8 = 1 || R8 < 0) && (R0 != R10 || R10 = 1 || R10 < 0) && (R0 = R8 || R8 = 1 || R0 < 1) && (R0 = R10 || R10 = 1 || R0 < 1))) && (R9 = 0 || R0 < 1))) && (R7 = 0 || R0 < 1))) && (R1 = 0 || (R0 = R4 && R3 - R4 = -1)) && (R1 = 0 || (R0 = R6 && R5 - R6 = -1)) && (R2 = 0 || (R7 = 0 && R9 = 0 && (R0 != R8 || R8 = 1 || R8 < 0) && (R0 != R10 || R10 = 1 || R10 < 0) && (R8 != 1 || -1 < R0) && (R10 != 1 || -1 < R0) && (R0 = R8 || R8 = 1) && (R0 = R10 || R10 = 1)));
// End of Parikh automata intersection problem
