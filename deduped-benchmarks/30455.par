// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P29
automaton P29_0 {
  init s0;
  s0 -> s1 [107, 107];
  s1 -> s2 [101, 101];
  s2 -> s3 [101, 101];
  s3 -> s4 [112, 112];
  s4 -> s5 [45, 45];
  s5 -> s6 [97, 97];
  s6 -> s7 [108, 108];
  s7 -> s8 [105, 105];
  s8 -> s9 [118, 118];
  s9 -> s10 [101, 101];
  accepting s10;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 8] { R4 += 1 };
  s0 -> s0 [0, 65535] { R3 += 1, R4 += 1 };
  s0 -> s2 [9, 13] { R4 += 1 };
  s0 -> s1 [14, 31] { R4 += 1 };
  s0 -> s2 [32, 32] { R4 += 1 };
  s0 -> s1 [33, 65535] { R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4 += 1 };
  s2 -> s1 [0, 65535] { R4 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s1 [0, 65535] { R6 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R8 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s2 [9, 13] { R8 += 1 };
  s0 -> s1 [14, 31] { R8 += 1 };
  s0 -> s2 [32, 32] { R8 += 1 };
  s0 -> s1 [33, 65535] { R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8 += 1 };
  s2 -> s1 [0, 65535] { R8 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R10 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P19
automaton P19_0 {
  init s0;
  s0 -> s1 [99, 99];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [110, 110];
  s4 -> s5 [101, 101];
  s5 -> s6 [99, 99];
  s6 -> s7 [116, 116];
  s7 -> s8 [105, 105];
  s8 -> s9 [111, 111];
  s9 -> s10 [110, 110];
  accepting s10;
};
};
constraint R0 != 0 && (R1 != 0 || ((R0 != R4 || R3 - R4 = -1 || R4 < 0) && (R0 = R4 || R0 < 1))) && (R1 != 0 || ((R0 != R6 || R5 - R6 = -1 || R6 < 0) && (R0 = R6 || R0 < 1))) && (R2 != 0 || ((R7 != 0 || ((R9 != 0 || ((R0 != R8 || R8 = 1 || R8 < 0) && (R0 != R10 || R10 = 1 || R10 < 0) && (R0 = R8 || R8 = 1 || R0 < 1) && (R0 = R10 || R10 = 1 || R0 < 1))) && (R9 = 0 || R0 < 1))) && (R7 = 0 || R0 < 1))) && (R1 = 0 || (R0 = R4 && R3 - R4 = -1)) && (R1 = 0 || (R0 = R6 && R5 - R6 = -1)) && (R2 = 0 || (R7 = 0 && R9 = 0 && (R0 != R8 || R8 = 1 || R8 < 0) && (R0 != R10 || R10 = 1 || R10 < 0) && (R8 != 1 || -1 < R0) && (R10 != 1 || -1 < R0) && (R0 = R8 || R8 = 1) && (R0 = R10 || R10 = 1)));
// End of Parikh automata intersection problem
