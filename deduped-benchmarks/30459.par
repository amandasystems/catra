// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R5;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s1 [32, 32] { R3 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1, R5 += 1 };
  s0 -> s1 [0, 65535] { R5 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R5 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = 0 && R0 != 0 && (R0 != R3 || R3 = 1 || R3 < 0) && (R3 != 1 || -1 < R0) && (R4 != 0 || ((R1 != 0 || ((R0 != R5 || R5 = 1 || R5 < 0) && (R0 = R5 || R5 = 1 || R0 < 1))) && (R1 = 0 || ((R0 != R5 || R5 = 1 || R5 < 0) && (R5 != 1 || -1 < R0) && (R0 = R5 || R5 = 1))))) && (R0 = R3 || R3 = 1) && (R4 = 0 || (R1 = 0 && R0 < 0));
// End of Parikh automata intersection problem
