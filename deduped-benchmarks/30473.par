// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R118, R119, R12, R13, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R3, R4, R5, R8;
synchronised {  // Automata constraining headerkey
automaton headerkey_0 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s1 [91, 98];
  s0 -> s2 [99, 99];
  s0 -> s1 [100, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [91, 65535];
  s2 -> s1 [0, 64];
  s2 -> s1 [91, 96];
  s2 -> s3 [97, 97];
  s2 -> s1 [98, 65535];
  s3 -> s1 [0, 64];
  s3 -> s1 [91, 98];
  s3 -> s4 [99, 99];
  s3 -> s1 [100, 65535];
  s4 -> s1 [0, 64];
  s4 -> s1 [91, 103];
  s4 -> s5 [104, 104];
  s4 -> s1 [105, 65535];
  s5 -> s1 [0, 64];
  s5 -> s1 [91, 100];
  s5 -> s6 [101, 101];
  s5 -> s1 [102, 65535];
  s6 -> s1 [0, 44];
  s6 -> s7 [45, 45];
  s6 -> s1 [46, 64];
  s6 -> s1 [91, 65535];
  s7 -> s1 [0, 64];
  s7 -> s1 [91, 98];
  s7 -> s8 [99, 99];
  s7 -> s1 [100, 65535];
  s8 -> s1 [0, 64];
  s8 -> s1 [91, 110];
  s8 -> s9 [111, 111];
  s8 -> s1 [112, 65535];
  s9 -> s1 [0, 64];
  s9 -> s1 [91, 109];
  s9 -> s10 [110, 110];
  s9 -> s1 [111, 65535];
  s10 -> s1 [0, 64];
  s10 -> s1 [91, 115];
  s10 -> s11 [116, 116];
  s10 -> s1 [117, 65535];
  s11 -> s1 [0, 64];
  s11 -> s1 [91, 113];
  s11 -> s12 [114, 114];
  s11 -> s1 [115, 65535];
  s12 -> s1 [0, 64];
  s12 -> s1 [91, 110];
  s12 -> s13 [111, 111];
  s12 -> s1 [112, 65535];
  s13 -> s1 [0, 64];
  s13 -> s1 [91, 107];
  s13 -> s14 [108, 108];
  s13 -> s1 [109, 65535];
  s14 -> s1 [0, 64];
  s14 -> s1 [91, 65535];
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [80, 80];
  s1 -> s2 [85, 85];
  s2 -> s3 [84, 84];
  accepting s3;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [80, 80];
  s1 -> s2 [65, 65];
  s2 -> s3 [84, 84];
  s3 -> s4 [67, 67];
  s4 -> s5 [72, 72];
  accepting s5;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R119 += 1 };
  s0 -> s0 [0, 65535] { R118 += 1, R119 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R119 += 1 };
  s1 -> s1 [0, 57] { R119 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R119 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s0 -> s1 [104, 104] { R185 += 1 };
  s1 -> s2 [116, 116] { R185 += 1 };
  s2 -> s3 [116, 116] { R185 += 1 };
  s3 -> s4 [112, 112] { R185 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s1 [0, 65535] { R187 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R187 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R196 += 1, R197 += 1 };
  s0 -> s1 [0, 65535] { R197 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R197 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R199 += 1 };
  s0 -> s2 [0, 65535] { R199 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R198 += 1, R199 += 1 };
  s0 -> s3 [35, 35] { R199 += 1 };
  s0 -> s1 [36, 65535] { R199 += 1 };
  s1 -> s1 [0, 34] { R199 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R199 += 1 };
  s1 -> s1 [36, 65535] { R199 += 1 };
  s2 -> s1 [0, 34] { R199 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R199 += 1, R5 += 1 };
  s2 -> s3 [35, 35] { R199 += 1 };
  s2 -> s1 [36, 65535] { R199 += 1 };
  s3 -> s3 [0, 65535] { R199 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R201 += 1 };
  s0 -> s2 [0, 65535] { R201 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s3 [63, 63] { R201 += 1 };
  s0 -> s1 [64, 65535] { R201 += 1 };
  s1 -> s1 [0, 62] { R201 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [63, 63] { R201 += 1 };
  s1 -> s1 [64, 65535] { R201 += 1 };
  s2 -> s1 [0, 62] { R201 += 1 };
  s2 -> s2 [0, 65535] { R201 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [63, 63] { R201 += 1 };
  s2 -> s1 [64, 65535] { R201 += 1 };
  s3 -> s3 [0, 65535] { R201 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R203 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R203 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R202 += 1, R203 += 1 };
  s0 -> s3 [47, 47] { R203 += 1 };
  s0 -> s1 [48, 65535] { R203 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R203 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R203 += 1 };
  s1 -> s1 [48, 65535] { R203 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R203 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R203 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R203 += 1 };
  s2 -> s1 [48, 65535] { R203 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R203 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R205 += 1, R177 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s0 -> s2 [0, 65535] { R205 += 1, R176 += 1, R177 += 1 };
  s0 -> s1 [92, 92] { R205 += 1, R177 += 1 };
  s0 -> s1 [94, 65535] { R205 += 1, R177 += 1 };
  s1 -> s1 [0, 90] { R205 += 1, R177 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R205 += 1 };
  s1 -> s1 [92, 92] { R205 += 1, R177 += 1 };
  s1 -> s1 [94, 65535] { R205 += 1, R177 += 1 };
  s2 -> s1 [0, 90] { R205 += 1, R177 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R205 += 1, R176 += 1, R177 += 1 };
  s2 -> s1 [92, 92] { R205 += 1, R177 += 1 };
  s2 -> s1 [94, 65535] { R205 += 1, R177 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R207 += 1, R178 += 1, R179 += 1 };
  s0 -> s2 [0, 65535] { R207 += 1, R179 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R206 += 1, R207 += 1 };
  s1 -> s1 [0, 65535] { R207 += 1, R178 += 1, R179 += 1 };
  s1 -> s2 [0, 65535] { R207 += 1, R179 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R207 += 1, R179 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R207 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R207 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R209 += 1, R180 += 1, R181 += 1 };
  s0 -> s0 [0, 65535] { R208 += 1, R209 += 1 };
  s0 -> s2 [47, 47] { R209 += 1, R181 += 1 };
  s1 -> s1 [0, 65535] { R209 += 1, R180 += 1, R181 += 1 };
  s1 -> s2 [47, 47] { R209 += 1, R181 += 1 };
  s2 -> s3 [47, 47] { R209 += 1, R181 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R209 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s0 [0, 65535] { R210 += 1, R211 += 1 };
  s0 -> s1 [0, 65535] { R211 += 1, R182 += 1, R183 += 1 };
  s0 -> s2 [0, 65535] { R211 += 1, R183 += 1, R171 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R211 += 1, R182 += 1, R183 += 1 };
  s1 -> s2 [0, 65535] { R211 += 1, R183 += 1, R171 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R211 += 1 };
  s2 -> s2 [0, 65535] { R211 += 1, R183 += 1, R171 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R211 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 34] { R213 += 1, R189 += 1 };
  s0 -> s0 [0, 65535] { R212 += 1, R213 += 1 };
  s0 -> s2 [0, 65535] { R213 += 1, R188 += 1, R189 += 1 };
  s0 -> s1 [36, 62] { R213 += 1, R189 += 1 };
  s0 -> s1 [64, 65535] { R213 += 1, R189 += 1 };
  s1 -> s1 [0, 34] { R213 += 1, R189 += 1 };
  s1 -> s1 [0, 65535] { R213 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [36, 62] { R213 += 1, R189 += 1 };
  s1 -> s1 [64, 65535] { R213 += 1, R189 += 1 };
  s2 -> s1 [0, 34] { R213 += 1, R189 += 1 };
  s2 -> s2 [0, 65535] { R213 += 1, R188 += 1, R189 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [36, 62] { R213 += 1, R189 += 1 };
  s2 -> s1 [64, 65535] { R213 += 1, R189 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_13 {
  init s0;
  s0 -> s0 [0, 65535] { R214 += 1, R215 += 1 };
  s0 -> s1 [0, 65535] { R215 += 1, R190 += 1, R191 += 1 };
  s0 -> s2 [0, 65535] { R215 += 1, R191 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R215 += 1, R190 += 1, R191 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R215 += 1, R191 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R215 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R215 += 1, R191 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R215 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_14 {
  init s0;
  s0 -> s1 [0, 65535] { R217 += 1, R192 += 1, R193 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s2 [0, 65535] { R217 += 1, R193 += 1, R172 += 1, R173 += 1 };
  s0 -> s3 [47, 47] { R217 += 1, R193 += 1, R173 += 1 };
  s1 -> s1 [0, 65535] { R217 += 1, R192 += 1, R193 += 1 };
  s1 -> s2 [0, 65535] { R217 += 1, R193 += 1, R172 += 1, R173 += 1 };
  s1 -> s3 [47, 47] { R217 += 1, R193 += 1, R173 += 1 };
  s2 -> s2 [0, 65535] { R217 += 1, R193 += 1, R172 += 1, R173 += 1 };
  s2 -> s3 [47, 47] { R217 += 1, R193 += 1, R173 += 1 };
  s3 -> s4 [0, 65535] { R217 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R217 += 1, R193 += 1 };
  s4 -> s4 [0, 65535] { R217 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton url_15 {
  init s0;
  s0 -> s1 [0, 65535] { R219 += 1, R195 += 1, R175 += 1, R170 += 1 };
  s0 -> s0 [0, 65535] { R218 += 1, R219 += 1 };
  s0 -> s2 [0, 65535] { R219 += 1, R194 += 1, R195 += 1 };
  s0 -> s3 [0, 65535] { R219 += 1, R195 += 1, R174 += 1, R175 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R219 += 1, R195 += 1, R175 += 1, R170 += 1 };
  s1 -> s6 [0, 65535] { R219 += 1, R195 += 1 };
  s1 -> s5 [0, 65535] { R219 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R219 += 1, R195 += 1, R175 += 1, R170 += 1 };
  s2 -> s2 [0, 65535] { R219 += 1, R194 += 1, R195 += 1 };
  s2 -> s3 [0, 65535] { R219 += 1, R195 += 1, R174 += 1, R175 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R219 += 1, R195 += 1, R175 += 1, R170 += 1 };
  s3 -> s3 [0, 65535] { R219 += 1, R195 += 1, R174 += 1, R175 += 1 };
  s3 -> s5 [0, 65535] { R219 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R219 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R219 += 1, R195 += 1 };
  s6 -> s5 [0, 65535] { R219 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R3 = R195 && R4 = R219 && R12 = 2 && R13 = R194 && R118 = 0 && R119 - R218 = -1 && R172 = 0 && R176 = 2 && R177 = R194 && R178 = 2 && R179 = R194 && R180 = 0 && R181 = 2 && R182 = 0 && R183 = 2 && R184 = 0 && R185 - R218 = -1 && R186 = 0 && R187 - R218 = -1 && R188 = R194 && R189 = R195 && R190 = R194 && R191 = R195 && R192 = R194 && R193 = R195 && R196 = R218 && R197 = R219 && R198 = R218 && R199 = R219 && R200 = R218 && R201 = R219 && R202 = R218 && R203 = R219 && R204 = R218 && R205 = R219 && R206 = R218 && R207 = R219 && R208 = R218 && R209 = R219 && R210 = R218 && R211 = R219 && R212 = R218 && R213 = R219 && R214 = R218 && R215 = R219 && R216 = R218 && R217 = R219 && R0 != 0 && R1 != 0 && R2 != 0 && R5 < 3 && R8 < 3 && R194 < R195 && 1 < R194 && R218 - R219 < 1 && 1 < R218 && (R0 != R173 || R173 = 1 || R173 < 0) && (R173 != 1 || -1 < R0) && (R174 != 0 || ((R170 != 0 || ((R0 != R175 || R175 = 1 || R175 < 0) && (R0 = R175 || R175 = 1 || R0 < 1))) && (R170 = 0 || ((R0 != R175 || R175 = 1 || R175 < 0) && (R175 != 1 || -1 < R0) && (R0 = R175 || R175 = 1))))) && (R0 = R173 || R173 = 1) && (R174 = 0 || (R170 = 0 && R0 < 0));
// End of Parikh automata intersection problem
