// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R119, R12, R120, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R3, R4, R7;
synchronised {  // Automata constraining headerkey
automaton headerkey_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R120 += 1 };
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R120 += 1 };
  s1 -> s1 [0, 57] { R120 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R120 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s1 [104, 104] { R188 += 1 };
  s1 -> s2 [116, 116] { R188 += 1 };
  s2 -> s3 [116, 116] { R188 += 1 };
  s3 -> s4 [112, 112] { R188 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s1 [0, 65535] { R190 += 1, R174 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R190 += 1, R174 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R200 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s1 -> s1 [0, 65535] { R200 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R202 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s3 [35, 35] { R202 += 1 };
  s0 -> s1 [36, 65535] { R202 += 1 };
  s1 -> s1 [0, 34] { R202 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R202 += 1 };
  s1 -> s1 [36, 65535] { R202 += 1 };
  s2 -> s1 [0, 34] { R202 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R202 += 1, R4 += 1 };
  s2 -> s3 [35, 35] { R202 += 1 };
  s2 -> s1 [36, 65535] { R202 += 1 };
  s3 -> s3 [0, 65535] { R202 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R204 += 1 };
  s0 -> s2 [0, 65535] { R204 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s3 [63, 63] { R204 += 1 };
  s0 -> s1 [64, 65535] { R204 += 1 };
  s1 -> s1 [0, 62] { R204 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [63, 63] { R204 += 1 };
  s1 -> s1 [64, 65535] { R204 += 1 };
  s2 -> s1 [0, 62] { R204 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R204 += 1, R7 += 1 };
  s2 -> s3 [63, 63] { R204 += 1 };
  s2 -> s1 [64, 65535] { R204 += 1 };
  s3 -> s3 [0, 65535] { R204 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R206 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R206 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s3 [47, 47] { R206 += 1 };
  s0 -> s1 [48, 65535] { R206 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R206 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R206 += 1 };
  s1 -> s1 [48, 65535] { R206 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R206 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R206 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R206 += 1 };
  s2 -> s1 [48, 65535] { R206 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R206 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R208 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s2 [0, 65535] { R208 += 1, R179 += 1, R180 += 1 };
  s0 -> s1 [92, 92] { R208 += 1, R180 += 1 };
  s0 -> s1 [94, 65535] { R208 += 1, R180 += 1 };
  s1 -> s1 [0, 90] { R208 += 1, R180 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R208 += 1 };
  s1 -> s1 [92, 92] { R208 += 1, R180 += 1 };
  s1 -> s1 [94, 65535] { R208 += 1, R180 += 1 };
  s2 -> s1 [0, 90] { R208 += 1, R180 += 1 };
  s2 -> s2 [0, 65535] { R208 += 1, R179 += 1, R180 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [92, 92] { R208 += 1, R180 += 1 };
  s2 -> s1 [94, 65535] { R208 += 1, R180 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R210 += 1, R181 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s2 [0, 65535] { R210 += 1, R182 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R210 += 1, R181 += 1, R182 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R210 += 1, R182 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R210 += 1, R182 += 1, R1 += 1 };
  s2 -> s4 [0, 65535] { R210 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R210 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s1 [0, 65535] { R212 += 1, R183 += 1, R184 += 1 };
  s0 -> s2 [47, 47] { R212 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R212 += 1, R183 += 1, R184 += 1 };
  s1 -> s2 [47, 47] { R212 += 1, R184 += 1 };
  s2 -> s3 [47, 47] { R212 += 1, R184 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R212 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s1 [0, 65535] { R214 += 1, R185 += 1, R186 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R186 += 1, R173 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R214 += 1, R185 += 1, R186 += 1 };
  s1 -> s2 [0, 65535] { R214 += 1, R186 += 1, R173 += 1 };
  s2 -> s3 [0, 65535] { R214 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R214 += 1, R186 += 1, R173 += 1 };
  s3 -> s3 [0, 65535] { R214 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 34] { R216 += 1, R192 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R191 += 1, R192 += 1 };
  s0 -> s1 [36, 62] { R216 += 1, R192 += 1 };
  s0 -> s1 [64, 65535] { R216 += 1, R192 += 1 };
  s1 -> s1 [0, 34] { R216 += 1, R192 += 1 };
  s1 -> s1 [0, 65535] { R216 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [36, 62] { R216 += 1, R192 += 1 };
  s1 -> s1 [64, 65535] { R216 += 1, R192 += 1 };
  s2 -> s1 [0, 34] { R216 += 1, R192 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R216 += 1, R191 += 1, R192 += 1 };
  s2 -> s1 [36, 62] { R216 += 1, R192 += 1 };
  s2 -> s1 [64, 65535] { R216 += 1, R192 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_13 {
  init s0;
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s1 [0, 65535] { R218 += 1, R193 += 1, R194 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R194 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R218 += 1, R193 += 1, R194 += 1 };
  s1 -> s2 [0, 65535] { R218 += 1, R194 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R218 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R218 += 1, R194 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R218 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_14 {
  init s0;
  s0 -> s1 [0, 46] { R220 += 1, R196 += 1, R176 += 1 };
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R196 += 1, R175 += 1, R176 += 1 };
  s0 -> s3 [0, 65535] { R220 += 1, R195 += 1, R196 += 1 };
  s0 -> s4 [47, 47] { R220 += 1, R196 += 1, R176 += 1 };
  s0 -> s1 [48, 65535] { R220 += 1, R196 += 1, R176 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R220 += 1, R196 += 1 };
  s1 -> s6 [0, 65535] { R220 += 1 };
  s1 -> s1 [0, 65535] { R220 += 1, R196 += 1, R176 += 1 };
  s2 -> s1 [0, 46] { R220 += 1, R196 += 1, R176 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R220 += 1, R196 += 1, R175 += 1, R176 += 1 };
  s2 -> s6 [0, 65535] { R220 += 1 };
  s2 -> s4 [47, 47] { R220 += 1, R196 += 1, R176 += 1 };
  s2 -> s1 [48, 65535] { R220 += 1, R196 += 1, R176 += 1 };
  s3 -> s1 [0, 46] { R220 += 1, R196 += 1, R176 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R220 += 1, R196 += 1, R175 += 1, R176 += 1 };
  s3 -> s3 [0, 65535] { R220 += 1, R195 += 1, R196 += 1 };
  s3 -> s4 [47, 47] { R220 += 1, R196 += 1, R176 += 1 };
  s3 -> s1 [48, 65535] { R220 += 1, R196 += 1, R176 += 1 };
  s4 -> s1 [0, 65535] { R220 += 1, R196 += 1, R176 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R220 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R220 += 1, R196 += 1 };
  s7 -> s6 [0, 65535] { R220 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton url_15 {
  init s0;
  s0 -> s1 [0, 65535] { R222 += 1, R198 += 1, R178 += 1, R172 += 1 };
  s0 -> s2 [0, 65535] { R222 += 1, R198 += 1, R177 += 1, R178 += 1 };
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s0 -> s3 [0, 65535] { R222 += 1, R197 += 1, R198 += 1 };
  s1 -> s1 [0, 65535] { R222 += 1, R198 += 1, R178 += 1, R172 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R222 += 1, R198 += 1 };
  s1 -> s5 [0, 65535] { R222 += 1 };
  s2 -> s1 [0, 65535] { R222 += 1, R198 += 1, R178 += 1, R172 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R222 += 1, R198 += 1, R177 += 1, R178 += 1 };
  s2 -> s5 [0, 65535] { R222 += 1 };
  s3 -> s1 [0, 65535] { R222 += 1, R198 += 1, R178 += 1, R172 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R222 += 1, R198 += 1, R177 += 1, R178 += 1 };
  s3 -> s3 [0, 65535] { R222 += 1, R197 += 1, R198 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R222 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R222 += 1, R198 += 1 };
  s6 -> s5 [0, 65535] { R222 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R198 && R3 = R222 && R11 = 2 && R12 = R197 && R119 = 0 && R120 - R221 = -1 && R179 = 2 && R180 = R197 && R181 = 2 && R182 = R197 && R183 = 0 && R184 = 2 && R185 = 0 && R186 = 2 && R187 = 0 && R188 - R221 = -1 && R189 = 0 && R190 - R221 = -1 && R191 = R197 && R192 = R198 && R193 = R197 && R194 = R198 && R195 = R197 && R196 = R198 && R199 = R221 && R200 = R222 && R201 = R221 && R202 = R222 && R203 = R221 && R204 = R222 && R205 = R221 && R206 = R222 && R207 = R221 && R208 = R222 && R209 = R221 && R210 = R222 && R211 = R221 && R212 = R222 && R213 = R221 && R214 = R222 && R215 = R221 && R216 = R222 && R217 = R221 && R218 = R222 && R219 = R221 && R220 = R222 && R0 != 0 && R1 != 0 && R4 < 3 && R7 < 3 && R197 < R198 && 1 < R197 && R221 - R222 < 1 && 1 < R221 && (R175 != 0 || ((R172 != 0 || ((R0 != R176 || R176 = 1 || R176 < 0) && (R0 = R176 || R176 = 1 || R0 < 1))) && (R172 = 0 || ((R0 != R176 || R176 = 1 || R176 < 0) && (R176 != 1 || -1 < R0) && (R0 = R176 || R176 = 1))))) && (R177 != 0 || ((R172 != 0 || ((R0 != R178 || R178 = 1 || R178 < 0) && (R0 = R178 || R178 = 1 || R0 < 1))) && (R172 = 0 || ((R0 != R178 || R178 = 1 || R178 < 0) && (R178 != 1 || -1 < R0) && (R0 = R178 || R178 = 1))))) && (R175 = 0 || (R172 = 0 && R0 < 0)) && (R177 = 0 || (R172 = 0 && R0 < 0));
// End of Parikh automata intersection problem
