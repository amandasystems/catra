// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R12, R15, R16, R17, R18, R19, R2, R20, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 64] { R60 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s1 [66, 65535] { R60 += 1 };
  s1 -> s1 [0, 64] { R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R60 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R62 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R62 += 1, R15 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 65] { R64 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s0 -> s2 [79, 79] { R64 += 1 };
  s0 -> s1 [80, 65535] { R64 += 1 };
  s1 -> s1 [0, 65] { R64 += 1 };
  s1 -> s2 [79, 79] { R64 += 1 };
  s1 -> s1 [80, 65535] { R64 += 1 };
  s2 -> s2 [0, 65] { R64 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [79, 65535] { R64 += 1 };
  accepting s2;
};
automaton key2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R66 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R66 += 1, R32 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R68 += 1, R34 += 1 };
  s0 -> s1 [80, 65535] { R68 += 1 };
  s1 -> s1 [0, 78] { R68 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R68 += 1 };
  s2 -> s1 [0, 78] { R68 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R68 += 1, R34 += 1 };
  s2 -> s1 [80, 65535] { R68 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_8 {
  init s0;
  s0 -> s1 [0, 78] { R70 += 1, R38 += 1 };
  s0 -> s2 [0, 65535] { R70 += 1, R37 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s1 [80, 65535] { R70 += 1, R38 += 1 };
  s1 -> s1 [0, 78] { R70 += 1, R38 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1 };
  s1 -> s1 [80, 65535] { R70 += 1, R38 += 1 };
  s2 -> s1 [0, 78] { R70 += 1, R38 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R70 += 1, R37 += 1, R38 += 1 };
  s2 -> s1 [80, 65535] { R70 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R72 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R43 += 1, R44 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R72 += 1, R42 += 1, R43 += 1 };
  s1 -> s2 [0, 65535] { R72 += 1, R43 += 1, R44 += 1 };
  s2 -> s3 [0, 65535] { R72 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R72 += 1, R43 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R72 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_10 {
  init s0;
  s0 -> s1 [0, 79] { R74 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R47 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s1 [91, 65535] { R74 += 1, R48 += 1 };
  s1 -> s1 [0, 79] { R74 += 1, R48 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R74 += 1 };
  s1 -> s1 [91, 65535] { R74 += 1, R48 += 1 };
  s2 -> s1 [0, 79] { R74 += 1, R48 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R74 += 1, R47 += 1, R48 += 1 };
  s2 -> s1 [91, 65535] { R74 += 1, R48 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R76 += 1, R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s1 -> s1 [0, 65535] { R76 += 1, R52 += 1, R53 += 1 };
  s1 -> s2 [0, 65535] { R76 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R76 += 1, R53 += 1, R54 += 1 };
  s2 -> s3 [0, 65535] { R76 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R76 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_12 {
  init s0;
  s0 -> s1 [0, 78] { R78 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R57 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s3 [79, 79] { R78 += 1, R58 += 1 };
  s0 -> s4 [79, 79] { R78 += 1, R58 += 1 };
  s0 -> s1 [91, 65535] { R78 += 1, R58 += 1 };
  s1 -> s1 [0, 78] { R78 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R78 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [79, 79] { R78 += 1, R58 += 1 };
  s1 -> s4 [79, 79] { R78 += 1, R58 += 1 };
  s1 -> s1 [91, 65535] { R78 += 1, R58 += 1 };
  s2 -> s1 [0, 78] { R78 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R78 += 1, R57 += 1, R58 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [79, 79] { R78 += 1, R58 += 1 };
  s2 -> s4 [79, 79] { R78 += 1, R58 += 1 };
  s2 -> s1 [91, 65535] { R78 += 1, R58 += 1 };
  s3 -> s3 [0, 65535] { R78 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 79] { R78 += 1, R58 += 1 };
  s4 -> s4 [0, 65535] { R78 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [91, 65535] { R78 += 1, R58 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R80 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535] { R80 += 1, R16 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_14 {
  init s0;
  s0 -> s1 [0, 64] { R82 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [65, 65] { R82 += 1 };
  s0 -> s3 [65, 65] { R82 += 1 };
  s0 -> s1 [80, 65535] { R82 += 1 };
  s1 -> s1 [0, 64] { R82 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R82 += 1 };
  s1 -> s3 [65, 65] { R82 += 1 };
  s1 -> s1 [80, 65535] { R82 += 1 };
  s2 -> s2 [0, 65] { R82 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [80, 65535] { R82 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_15 {
  init s0;
  s0 -> s1 [0, 64] { R84 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [65, 65] { R84 += 1, R31 += 1 };
  s0 -> s3 [65, 65] { R84 += 1, R31 += 1 };
  s0 -> s1 [66, 65535] { R84 += 1, R31 += 1 };
  s1 -> s1 [0, 64] { R84 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R84 += 1, R31 += 1 };
  s1 -> s3 [65, 65] { R84 += 1, R31 += 1 };
  s1 -> s1 [66, 65535] { R84 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R31 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_16 {
  init s0;
  s0 -> s1 [0, 64] { R86 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s2 [65, 65] { R86 += 1, R33 += 1 };
  s0 -> s3 [65, 65] { R86 += 1, R33 += 1 };
  s0 -> s1 [66, 65535] { R86 += 1, R33 += 1 };
  s1 -> s1 [0, 64] { R86 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R86 += 1, R33 += 1 };
  s1 -> s3 [65, 65] { R86 += 1, R33 += 1 };
  s1 -> s1 [66, 65535] { R86 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R86 += 1, R33 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_17 {
  init s0;
  s0 -> s1 [0, 64] { R88 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s2 [65, 65] { R88 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [65, 65] { R88 += 1, R35 += 1, R36 += 1 };
  s0 -> s1 [66, 65535] { R88 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 64] { R88 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R88 += 1, R35 += 1, R36 += 1 };
  s1 -> s3 [65, 65] { R88 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [66, 65535] { R88 += 1, R35 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R88 += 1, R35 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_18 {
  init s0;
  s0 -> s1 [0, 64] { R90 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s0 -> s2 [65, 65] { R90 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [65, 65] { R90 += 1, R39 += 1, R40 += 1 };
  s0 -> s1 [66, 65535] { R90 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 64] { R90 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R90 += 1, R39 += 1, R40 += 1 };
  s1 -> s3 [65, 65] { R90 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [66, 65535] { R90 += 1, R39 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R90 += 1, R39 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_19 {
  init s0;
  s0 -> s1 [0, 64] { R92 += 1, R45 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s0 -> s2 [65, 65] { R92 += 1, R45 += 1, R46 += 1 };
  s0 -> s3 [65, 65] { R92 += 1, R45 += 1, R46 += 1 };
  s0 -> s1 [66, 65535] { R92 += 1, R45 += 1, R46 += 1 };
  s1 -> s1 [0, 64] { R92 += 1, R45 += 1, R46 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R92 += 1, R45 += 1, R46 += 1 };
  s1 -> s3 [65, 65] { R92 += 1, R45 += 1, R46 += 1 };
  s1 -> s1 [66, 65535] { R92 += 1, R45 += 1, R46 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R92 += 1, R45 += 1, R46 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_20 {
  init s0;
  s0 -> s1 [0, 64] { R94 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s0 -> s2 [65, 65] { R94 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [65, 65] { R94 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [66, 65535] { R94 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 64] { R94 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R94 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [65, 65] { R94 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [66, 65535] { R94 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R94 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_21 {
  init s0;
  s0 -> s1 [0, 64] { R96 += 1, R55 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s2 [65, 65] { R96 += 1, R55 += 1, R56 += 1 };
  s0 -> s3 [65, 65] { R96 += 1, R55 += 1, R56 += 1 };
  s0 -> s1 [66, 65535] { R96 += 1, R55 += 1, R56 += 1 };
  s1 -> s1 [0, 64] { R96 += 1, R55 += 1, R56 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R96 += 1, R55 += 1, R56 += 1 };
  s1 -> s3 [65, 65] { R96 += 1, R55 += 1, R56 += 1 };
  s1 -> s1 [66, 65535] { R96 += 1, R55 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R96 += 1, R55 += 1, R56 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R3 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 64] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [65, 65] { R18 += 1 };
  s0 -> s1 [66, 65535] { R18 += 1 };
  s1 -> s1 [0, 64] { R18 += 1 };
  s1 -> s2 [65, 65] { R18 += 1 };
  s1 -> s1 [66, 65535] { R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R20 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R20 += 1, R12 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
constraint R0 = R18 && R2 = R64 && R17 = 0 && R63 = 0 && R3 < 1 && R9 < 1 && -1 < R18 && -1*R32 + -1*R31 < 1 && R34 + R33 < 1 && -1 < R64 && (R19 != 0 || R18 = R20 || (R12 = 0 && R18 = 0)) && (R32 + R31 != 0 || R44 + R41 = 0 || (R37 + R35 = 0 && R38 + R36 = 0)) && (R32 + R31 != 0 || R44 + R41 = 0 || (R42 + R39 = 0 && R43 + R40 = 0)) && (R32 + R31 != 0 || R44 + R41 = 0 || (R47 + R45 = 0 && R48 + R46 = 0)) && (R37 + R35 != 0 || R32 + R31 + -1*R38 + -1*R36 = 0 || R32 + R31 < 1) && (R42 + R39 != 0 || R32 + R31 + -1*R43 + -1*R40 = 0 || R32 + R31 < 1) && (R47 + R45 != 0 || R32 + R31 + -1*R48 + -1*R46 = 0 || R32 + R31 < 1) && (R59 != 0 || R60 = R64 || (R15 = 0 && R64 = 0)) && (R61 != 0 || R62 = R64 || (R15 = 0 && R64 = 0)) && (R65 != 0 || R64 = R66 || (R15 = 0 && R64 = 0)) && (R67 != 0 || R64 = R68 || (R15 = 0 && R64 = 0)) && (R69 != 0 || R64 = R70 || (R15 = 0 && R64 = 0)) && (R71 != 0 || R64 = R72 || (R15 = 0 && R64 = 0)) && (R73 != 0 || R64 = R74 || (R15 = 0 && R64 = 0)) && (R75 != 0 || R64 = R76 || (R15 = 0 && R64 = 0)) && (R77 != 0 || R64 = R78 || (R15 = 0 && R64 = 0)) && (R16 = 0 || (R79 = 0 && R80 = 0 && R81 = 0 && R82 = 0 && R83 = 0 && R84 = 0 && R85 = 0 && R86 = 0 && R87 = 0 && R88 = 0 && R89 = 0 && R90 = 0 && R91 = 0 && R92 = 0 && R93 = 0 && R94 = 0 && R95 = 0 && R96 = 0)) && (R19 = 0 || (R12 = 0 && R18 = 0)) && (R37 + R35 = 0 || R32 + R31 < 1) && (R42 + R39 = 0 || R32 + R31 < 1) && (R47 + R45 = 0 || R32 + R31 < 1) && (R54 + R51 = 0 || (R52 + R49 = 0 && R53 + R50 = 0)) && (R54 + R51 = 0 || (R57 + R55 = 0 && R58 + R56 = 0)) && (R59 = 0 || (R15 = 0 && R64 = 0)) && (R61 = 0 || (R15 = 0 && R64 = 0)) && (R65 = 0 || (R15 = 0 && R64 = 0)) && (R67 = 0 || (R15 = 0 && R64 = 0)) && (R69 = 0 || (R15 = 0 && R64 = 0)) && (R71 = 0 || (R15 = 0 && R64 = 0)) && (R73 = 0 || (R15 = 0 && R64 = 0)) && (R75 = 0 || (R15 = 0 && R64 = 0)) && (R77 = 0 || (R15 = 0 && R64 = 0));
// End of Parikh automata intersection problem
