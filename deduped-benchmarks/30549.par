// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R6, R7;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 64] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535] { R7 += 1 };
  s1 -> s1 [0, 64] { R7 += 1 };
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535] { R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 64] { R33 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [66, 65535] { R33 += 1 };
  s1 -> s1 [0, 64] { R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R33 += 1 };
  accepting s0, s1;
};
automaton key1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s1 [0, 65535] { R35 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R35 += 1, R26 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 65] { R37 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s0 -> s1 [91, 65535] { R37 += 1 };
  s1 -> s1 [0, 65] { R37 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R37 += 1 };
  accepting s0, s1;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R39 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R39 += 1, R27 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 64] { R41 += 1 };
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s2 [65, 65] { R41 += 1 };
  s0 -> s3 [65, 65] { R41 += 1 };
  s0 -> s1 [91, 65535] { R41 += 1 };
  s1 -> s1 [0, 64] { R41 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R41 += 1 };
  s1 -> s3 [65, 65] { R41 += 1 };
  s1 -> s1 [91, 65535] { R41 += 1 };
  s2 -> s2 [0, 65] { R41 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R41 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P8
automaton P8_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [79, 79];
  s0 -> s0 [80, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [79, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 78];
  s0 -> s0 [0, 65535] { R2 += 1 };
  s0 -> s2 [79, 79];
  s0 -> s1 [80, 65535];
  s1 -> s1 [0, 78];
  s1 -> s2 [79, 79];
  s1 -> s1 [80, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 78] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s2 [79, 79] { R29 += 1 };
  s0 -> s1 [80, 65535] { R29 += 1 };
  s1 -> s1 [0, 78] { R29 += 1 };
  s1 -> s2 [79, 79] { R29 += 1 };
  s1 -> s1 [80, 65535] { R29 += 1 };
  s2 -> s2 [0, 65535] { R29 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [0, 65535] { R31 += 1, R25 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R31 += 1, R25 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R29 && R6 = 0 && R28 = 0 && R7 < R1 && R2 < 1 && -2 < R7 && -1 < R29 && (R1 != R33 || R7 - R32 = -1 || (R33 - R7 < 2 && (R7 - R33 != -1 || R26 = 0))) && (R1 != R35 || R7 - R34 = -1 || (R35 - R7 < 2 && (R7 - R35 != -1 || R26 = 0))) && (R1 != R37 || R7 - R36 = -1 || (R37 - R7 < 2 && (R7 - R37 != -1 || R26 = 0))) && (R27 != 0 || ((R38 != 0 || ((R40 != 0 || ((R39 != R41 || R7 - R41 = -1 || R1 < 1 || R7 < 0) && (R39 = R41 || R1 < 1 || R7 < 0))) && (R40 = 0 || R1 < 1 || R7 < 0))) && (R38 = 0 || R1 < 1 || R7 < 0))) && (R30 != 0 || R29 = R31 || (R25 = 0 && R29 = 0)) && (R1 = R33 || (R1 - R7 = 1 && R26 = 0)) && (R1 = R35 || (R1 - R7 = 1 && R26 = 0)) && (R1 = R37 || (R1 - R7 = 1 && R26 = 0)) && (R27 = 0 || (R7 - R41 = -1 && R38 = 0 && R39 = R41 && R40 = 0)) && (R30 = 0 || (R25 = 0 && R29 = 0));
// End of Parikh automata intersection problem
