// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R100, R101, R102, R103, R12, R13, R16, R17, R18, R19, R2, R20, R21, R22, R23, R3, R30, R31, R32, R33, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 64] { R67 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [66, 65535] { R67 += 1 };
  s1 -> s1 [0, 64] { R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R67 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s1 [0, 65535] { R69 += 1, R16 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R69 += 1, R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 65] { R71 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s2 [79, 79] { R71 += 1 };
  s0 -> s1 [80, 65535] { R71 += 1 };
  s1 -> s1 [0, 65] { R71 += 1 };
  s1 -> s2 [79, 79] { R71 += 1 };
  s1 -> s1 [80, 65535] { R71 += 1 };
  s2 -> s2 [0, 65] { R71 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [79, 65535] { R71 += 1 };
  accepting s2;
};
automaton key2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R73 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R73 += 1, R39 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R75 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R75 += 1, R41 += 1 };
  s0 -> s1 [80, 65535] { R75 += 1 };
  s1 -> s1 [0, 78] { R75 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R75 += 1 };
  s2 -> s1 [0, 78] { R75 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R75 += 1, R41 += 1 };
  s2 -> s1 [80, 65535] { R75 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_8 {
  init s0;
  s0 -> s1 [0, 78] { R77 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R77 += 1, R44 += 1, R45 += 1 };
  s0 -> s1 [80, 65535] { R77 += 1, R45 += 1 };
  s1 -> s1 [0, 78] { R77 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R77 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R77 += 1, R45 += 1 };
  s2 -> s1 [0, 78] { R77 += 1, R45 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R77 += 1, R44 += 1, R45 += 1 };
  s2 -> s1 [80, 65535] { R77 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s1 [0, 65535] { R79 += 1, R49 += 1, R50 += 1 };
  s0 -> s2 [0, 65535] { R79 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R49 += 1, R50 += 1 };
  s1 -> s2 [0, 65535] { R79 += 1, R50 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R79 += 1 };
  s2 -> s2 [0, 65535] { R79 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R79 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_10 {
  init s0;
  s0 -> s1 [0, 79] { R81 += 1, R55 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s2 [0, 65535] { R81 += 1, R54 += 1, R55 += 1 };
  s0 -> s1 [91, 65535] { R81 += 1, R55 += 1 };
  s1 -> s1 [0, 79] { R81 += 1, R55 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1 };
  s1 -> s1 [91, 65535] { R81 += 1, R55 += 1 };
  s2 -> s1 [0, 79] { R81 += 1, R55 += 1 };
  s2 -> s2 [0, 65535] { R81 += 1, R54 += 1, R55 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R81 += 1, R55 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R83 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R83 += 1, R60 += 1, R61 += 1 };
  s1 -> s1 [0, 65535] { R83 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R83 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R83 += 1, R60 += 1, R61 += 1 };
  s2 -> s4 [0, 65535] { R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R83 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key2_12 {
  init s0;
  s0 -> s1 [0, 78] { R85 += 1, R65 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R64 += 1, R65 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s3 [79, 79] { R85 += 1, R65 += 1 };
  s0 -> s4 [79, 79] { R85 += 1, R65 += 1 };
  s0 -> s1 [91, 65535] { R85 += 1, R65 += 1 };
  s1 -> s1 [0, 78] { R85 += 1, R65 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R85 += 1 };
  s1 -> s3 [79, 79] { R85 += 1, R65 += 1 };
  s1 -> s4 [79, 79] { R85 += 1, R65 += 1 };
  s1 -> s1 [91, 65535] { R85 += 1, R65 += 1 };
  s2 -> s1 [0, 78] { R85 += 1, R65 += 1 };
  s2 -> s2 [0, 65535] { R85 += 1, R64 += 1, R65 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [79, 79] { R85 += 1, R65 += 1 };
  s2 -> s4 [79, 79] { R85 += 1, R65 += 1 };
  s2 -> s1 [91, 65535] { R85 += 1, R65 += 1 };
  s3 -> s3 [0, 79] { R85 += 1, R65 += 1 };
  s3 -> s3 [0, 65535] { R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R85 += 1, R65 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R85 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s1 [0, 65535] { R87 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R87 += 1, R17 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_14 {
  init s0;
  s0 -> s1 [0, 64] { R89 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s0 -> s2 [65, 65] { R89 += 1 };
  s0 -> s3 [65, 65] { R89 += 1 };
  s0 -> s1 [80, 65535] { R89 += 1 };
  s1 -> s1 [0, 64] { R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R89 += 1 };
  s1 -> s3 [65, 65] { R89 += 1 };
  s1 -> s1 [80, 65535] { R89 += 1 };
  s2 -> s2 [0, 65] { R89 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [80, 65535] { R89 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_15 {
  init s0;
  s0 -> s1 [0, 64] { R91 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [65, 65] { R91 += 1, R38 += 1 };
  s0 -> s3 [65, 65] { R91 += 1, R38 += 1 };
  s0 -> s1 [66, 65535] { R91 += 1, R38 += 1 };
  s1 -> s1 [0, 64] { R91 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R91 += 1, R38 += 1 };
  s1 -> s3 [65, 65] { R91 += 1, R38 += 1 };
  s1 -> s1 [66, 65535] { R91 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R91 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_16 {
  init s0;
  s0 -> s1 [0, 64] { R93 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s2 [65, 65] { R93 += 1, R40 += 1 };
  s0 -> s3 [65, 65] { R93 += 1, R40 += 1 };
  s0 -> s1 [66, 65535] { R93 += 1, R40 += 1 };
  s1 -> s1 [0, 64] { R93 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R93 += 1, R40 += 1 };
  s1 -> s3 [65, 65] { R93 += 1, R40 += 1 };
  s1 -> s1 [66, 65535] { R93 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R93 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_17 {
  init s0;
  s0 -> s1 [0, 64] { R95 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s2 [65, 65] { R95 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [65, 65] { R95 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [66, 65535] { R95 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 64] { R95 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R95 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [65, 65] { R95 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [66, 65535] { R95 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R95 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_18 {
  init s0;
  s0 -> s1 [0, 64] { R97 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s2 [65, 65] { R97 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [65, 65] { R97 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [66, 65535] { R97 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 64] { R97 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R97 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [65, 65] { R97 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [66, 65535] { R97 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R97 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_19 {
  init s0;
  s0 -> s1 [0, 64] { R99 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s2 [65, 65] { R99 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [65, 65] { R99 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [66, 65535] { R99 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 64] { R99 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R99 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [65, 65] { R99 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [66, 65535] { R99 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R99 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_20 {
  init s0;
  s0 -> s1 [0, 64] { R101 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s2 [65, 65] { R101 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [65, 65] { R101 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [66, 65535] { R101 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 64] { R101 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R101 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [65, 65] { R101 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [66, 65535] { R101 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R101 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_21 {
  init s0;
  s0 -> s1 [0, 64] { R103 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s2 [65, 65] { R103 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [65, 65] { R103 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [66, 65535] { R103 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 64] { R103 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R103 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [65, 65] { R103 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [66, 65535] { R103 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R103 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R3 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 64] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s1 [66, 65535] { R19 += 1 };
  s1 -> s1 [0, 64] { R19 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R19 += 1 };
  accepting s0, s1;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R21 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1, R12 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 65] { R23 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s2 [68, 68] { R23 += 1 };
  s0 -> s1 [69, 65535] { R23 += 1 };
  s1 -> s1 [0, 65] { R23 += 1 };
  s1 -> s2 [68, 68] { R23 += 1 };
  s1 -> s1 [69, 65535] { R23 += 1 };
  s2 -> s2 [0, 65] { R23 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R23 += 1 };
  accepting s2;
};
automaton key1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [0, 65535] { R31 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R13 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 64] { R33 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s2 [65, 65] { R33 += 1 };
  s0 -> s3 [65, 65] { R33 += 1 };
  s0 -> s1 [69, 65535] { R33 += 1 };
  s1 -> s1 [0, 64] { R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R33 += 1 };
  s1 -> s3 [65, 65] { R33 += 1 };
  s1 -> s1 [69, 65535] { R33 += 1 };
  s2 -> s2 [0, 65] { R33 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [69, 65535] { R33 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
constraint R0 = R23 && R2 = R71 && R22 = 0 && R70 = 0 && R3 < 1 && R9 < 1 && -1 < R23 && -1*R39 + -1*R38 < 1 && R41 + R40 < 1 && -1 < R71 && (R18 != 0 || R19 = R23 || (R12 = 0 && R23 = 0)) && (R20 != 0 || R21 = R23 || (R12 = 0 && R23 = 0)) && (R39 + R38 != 0 || R51 + R48 = 0 || (R44 + R42 = 0 && R45 + R43 = 0)) && (R39 + R38 != 0 || R51 + R48 = 0 || (R49 + R46 = 0 && R50 + R47 = 0)) && (R39 + R38 != 0 || R51 + R48 = 0 || (R54 + R52 = 0 && R55 + R53 = 0)) && (R44 + R42 != 0 || R39 + R38 + -1*R45 + -1*R43 = 0 || R39 + R38 < 1) && (R49 + R46 != 0 || R39 + R38 + -1*R50 + -1*R47 = 0 || R39 + R38 < 1) && (R54 + R52 != 0 || R39 + R38 + -1*R55 + -1*R53 = 0 || R39 + R38 < 1) && (R66 != 0 || R67 = R71 || (R16 = 0 && R71 = 0)) && (R68 != 0 || R69 = R71 || (R16 = 0 && R71 = 0)) && (R72 != 0 || R71 = R73 || (R16 = 0 && R71 = 0)) && (R74 != 0 || R71 = R75 || (R16 = 0 && R71 = 0)) && (R76 != 0 || R71 = R77 || (R16 = 0 && R71 = 0)) && (R78 != 0 || R71 = R79 || (R16 = 0 && R71 = 0)) && (R80 != 0 || R71 = R81 || (R16 = 0 && R71 = 0)) && (R82 != 0 || R71 = R83 || (R16 = 0 && R71 = 0)) && (R84 != 0 || R71 = R85 || (R16 = 0 && R71 = 0)) && (R13 = 0 || (R30 = 0 && R31 = 0)) && (R13 = 0 || (R32 = 0 && R33 = 0)) && (R17 = 0 || (R86 = 0 && R87 = 0 && R88 = 0 && R89 = 0 && R90 = 0 && R91 = 0 && R92 = 0 && R93 = 0 && R94 = 0 && R95 = 0 && R96 = 0 && R97 = 0 && R98 = 0 && R99 = 0 && R100 = 0 && R101 = 0 && R102 = 0 && R103 = 0)) && (R18 = 0 || (R12 = 0 && R23 = 0)) && (R20 = 0 || (R12 = 0 && R23 = 0)) && (R44 + R42 = 0 || R39 + R38 < 1) && (R49 + R46 = 0 || R39 + R38 < 1) && (R54 + R52 = 0 || R39 + R38 < 1) && (R61 + R58 = 0 || (R59 + R56 = 0 && R60 + R57 = 0)) && (R61 + R58 = 0 || (R64 + R62 = 0 && R65 + R63 = 0)) && (R66 = 0 || (R16 = 0 && R71 = 0)) && (R68 = 0 || (R16 = 0 && R71 = 0)) && (R72 = 0 || (R16 = 0 && R71 = 0)) && (R74 = 0 || (R16 = 0 && R71 = 0)) && (R76 = 0 || (R16 = 0 && R71 = 0)) && (R78 = 0 || (R16 = 0 && R71 = 0)) && (R80 = 0 || (R16 = 0 && R71 = 0)) && (R82 = 0 || (R16 = 0 && R71 = 0)) && (R84 = 0 || (R16 = 0 && R71 = 0));
// End of Parikh automata intersection problem
