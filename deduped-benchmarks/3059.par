// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R6, R7;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R7 += 1 };
  s1 -> s1 [0, 60] { R7 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s0 -> s1 [0, 65535] { R39 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R39 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 64] { R41 += 1 };
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s2 [66, 66] { R41 += 1 };
  s0 -> s1 [67, 65535] { R41 += 1 };
  s1 -> s1 [0, 64] { R41 += 1 };
  s1 -> s2 [66, 66] { R41 += 1 };
  s1 -> s1 [67, 65535] { R41 += 1 };
  s2 -> s2 [0, 64] { R41 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R41 += 1 };
  accepting s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s0 -> s1 [0, 65535] { R43 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R43 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R45 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R45 += 1, R30 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s0 -> s3 [9, 13] { R45 += 1, R31 += 1 };
  s0 -> s1 [14, 31] { R45 += 1, R31 += 1 };
  s0 -> s3 [32, 32] { R45 += 1, R31 += 1 };
  s0 -> s1 [33, 65535] { R45 += 1, R31 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R45 += 1 };
  s1 -> s1 [0, 65535] { R45 += 1, R31 += 1 };
  s2 -> s1 [0, 8] { R45 += 1, R31 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R45 += 1, R30 += 1, R31 += 1 };
  s2 -> s3 [9, 13] { R45 += 1, R31 += 1 };
  s2 -> s1 [14, 31] { R45 += 1, R31 += 1 };
  s2 -> s3 [32, 32] { R45 += 1, R31 += 1 };
  s2 -> s1 [33, 65535] { R45 += 1, R31 += 1 };
  s3 -> s1 [0, 65535] { R45 += 1, R31 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R45 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s1 [0, 65535] { R47 += 1, R32 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R47 += 1, R33 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R47 += 1, R32 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R47 += 1, R33 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R47 += 1, R33 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R47 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R49 += 1, R35 += 1 };
  s0 -> s2 [0, 65535] { R49 += 1, R34 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s3 [9, 13] { R49 += 1, R35 += 1 };
  s0 -> s1 [14, 31] { R49 += 1, R35 += 1 };
  s0 -> s3 [32, 32] { R49 += 1, R35 += 1 };
  s0 -> s1 [33, 65535] { R49 += 1, R35 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R49 += 1 };
  s1 -> s1 [0, 65535] { R49 += 1, R35 += 1 };
  s2 -> s1 [0, 8] { R49 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R49 += 1, R34 += 1, R35 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R49 += 1, R35 += 1 };
  s2 -> s1 [14, 31] { R49 += 1, R35 += 1 };
  s2 -> s3 [32, 32] { R49 += 1, R35 += 1 };
  s2 -> s1 [33, 65535] { R49 += 1, R35 += 1 };
  s3 -> s1 [0, 65535] { R49 += 1, R35 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R49 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R51 += 1, R37 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R51 += 1, R36 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R51 += 1, R37 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R51 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R51 += 1, R37 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R51 += 1, R36 += 1, R37 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R51 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R39 && R6 = 0 && R7 = R51 && R38 - R51 = 1 && R40 = 0 && R41 = R51 && R42 = 0 && R43 = R51 && R44 = 0 && R45 = R51 && R46 = 0 && R47 = R51 && R48 = 0 && R49 = R51 && R50 = 0 && R0 != 0 && R1 != 0 && R51 < R39 && -1 < R51 && (R3 != 0 || ((R0 != R31 || R30 - R31 = -1 || R31 < 0) && (R0 = R31 || R0 < 1))) && (R3 != 0 || ((R0 != R33 || R32 - R33 = -1 || R33 < 0) && (R0 = R33 || R0 < 1))) && (R34 != 0 || ((R4 != 0 || ((R0 != R35 || R35 = 1 || R35 < 0) && (R0 = R35 || R35 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R35 || R35 = 1 || R35 < 0) && (R35 != 1 || -1 < R0) && (R0 = R35 || R35 = 1))))) && (R36 != 0 || ((R4 != 0 || ((R0 != R37 || R37 = 1 || R37 < 0) && (R0 = R37 || R37 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R37 || R37 = 1 || R37 < 0) && (R37 != 1 || -1 < R0) && (R0 = R37 || R37 = 1))))) && (R3 = 0 || (R0 = R31 && R30 - R31 = -1)) && (R3 = 0 || (R0 = R33 && R32 - R33 = -1)) && (R34 = 0 || (R4 = 0 && R0 < 0)) && (R36 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
