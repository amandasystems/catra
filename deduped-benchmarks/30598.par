// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R5, R8, R9;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s1 [0, 65535] { R18 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R18 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 66] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [67, 67] { R20 += 1 };
  s0 -> s3 [67, 67] { R20 += 1 };
  s0 -> s1 [77, 65535] { R20 += 1 };
  s1 -> s1 [0, 66] { R20 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [67, 67] { R20 += 1 };
  s1 -> s3 [67, 67] { R20 += 1 };
  s1 -> s1 [77, 65535] { R20 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 67] { R20 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [77, 65535] { R20 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R26 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s2 [67, 67] { R26 += 1 };
  s0 -> s1 [68, 65535] { R26 += 1 };
  s1 -> s1 [0, 66] { R26 += 1 };
  s1 -> s2 [67, 67] { R26 += 1 };
  s1 -> s1 [68, 65535] { R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R26 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R28 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R28 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 66] { R30 += 1 };
  s0 -> s2 [0, 65535] { R30 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s3 [67, 67] { R30 += 1 };
  s0 -> s1 [68, 65535] { R30 += 1 };
  s1 -> s1 [0, 66] { R30 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R30 += 1 };
  s1 -> s1 [68, 65535] { R30 += 1 };
  s2 -> s1 [0, 66] { R30 += 1 };
  s2 -> s2 [0, 65535] { R30 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R30 += 1 };
  s2 -> s1 [68, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535] { R30 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 66] { R32 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R32 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [68, 65535] { R32 += 1, R12 += 1 };
  s1 -> s1 [0, 66] { R32 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R32 += 1, R12 += 1 };
  s2 -> s1 [0, 66] { R32 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R32 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [68, 65535] { R32 += 1, R12 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R14 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R34 += 1, R13 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R34 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R14 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R34 += 1, R14 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R34 += 1, R13 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R34 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 67] { R36 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R36 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s1 [76, 65535] { R36 += 1, R16 += 1 };
  s1 -> s1 [0, 67] { R36 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R36 += 1, R16 += 1 };
  s2 -> s1 [0, 67] { R36 += 1, R16 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R36 += 1, R15 += 1, R16 += 1 };
  s2 -> s1 [76, 65535] { R36 += 1, R16 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R22 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R38 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R22 += 1, R9 += 1 };
  s1 -> s4 [0, 65535] { R38 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R38 += 1, R22 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R38 += 1, R21 += 1, R22 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R38 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 66] { R40 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R40 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s3 [67, 67] { R40 += 1, R24 += 1 };
  s0 -> s4 [67, 67] { R40 += 1, R24 += 1 };
  s0 -> s5 [76, 76] { R40 += 1, R24 += 1 };
  s0 -> s1 [77, 65535] { R40 += 1, R24 += 1 };
  s1 -> s1 [0, 66] { R40 += 1, R24 += 1 };
  s1 -> s3 [67, 67] { R40 += 1, R24 += 1 };
  s1 -> s4 [67, 67] { R40 += 1, R24 += 1 };
  s1 -> s5 [76, 76] { R40 += 1, R24 += 1 };
  s1 -> s1 [77, 65535] { R40 += 1, R24 += 1 };
  s2 -> s1 [0, 66] { R40 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R40 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [67, 67] { R40 += 1, R24 += 1 };
  s2 -> s4 [67, 67] { R40 += 1, R24 += 1 };
  s2 -> s5 [76, 76] { R40 += 1, R24 += 1 };
  s2 -> s1 [77, 65535] { R40 += 1, R24 += 1 };
  s4 -> s4 [0, 67] { R40 += 1, R24 += 1 };
  s4 -> s8 [76, 76] { R40 += 1, R24 += 1 };
  s4 -> s4 [77, 65535] { R40 += 1, R24 += 1 };
  s5 -> s5 [0, 66] { R40 += 1, R24 += 1 };
  s5 -> s5 [0, 65535] { R40 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [67, 67] { R40 += 1, R24 += 1 };
  s5 -> s8 [67, 67] { R40 += 1, R24 += 1 };
  s5 -> s5 [76, 65535] { R40 += 1, R24 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R40 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 67] { R40 += 1, R24 += 1 };
  s8 -> s8 [0, 65535] { R40 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [76, 65535] { R40 += 1, R24 += 1 };
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining P10
automaton P10_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R1 = R40 && R23 = 0 && R24 = 0 && R25 = 0 && R26 = R40 && R39 = 0 && -1 < R0 && R2 < 1 && R5 < 1 && -1 < R40 && (R0 != 0 || R8 = 0 || (R11 = 0 && R12 = 0)) && (R0 != 0 || R8 = 0 || (R13 = 0 && R14 = 0)) && (R0 != 0 || R8 = 0 || (R15 = 0 && R16 = 0)) && (R11 != 0 || R0 = R12 || R0 < 1) && (R13 != 0 || R0 = R14 || R0 < 1) && (R15 != 0 || R0 = R16 || R0 < 1) && (R27 != 0 || R28 = R40 || (R0 = 0 && R40 = 0)) && (R29 != 0 || R30 = R40 || (R0 = 0 && R40 = 0)) && (R31 != 0 || R32 = R40 || (R0 = 0 && R40 = 0)) && (R33 != 0 || R34 = R40 || (R0 = 0 && R40 = 0)) && (R35 != 0 || R36 = R40 || (R0 = 0 && R40 = 0)) && (R37 != 0 || R38 = R40 || (R0 = 0 && R40 = 0)) && (R9 = 0 || (R21 = 0 && R22 = 0)) && (R10 = 0 || (R17 = 0 && R18 = 0)) && (R10 = 0 || (R19 = 0 && R20 = 0)) && (R11 = 0 || R0 < 1) && (R13 = 0 || R0 < 1) && (R15 = 0 || R0 < 1) && (R27 = 0 || (R0 = 0 && R40 = 0)) && (R29 = 0 || (R0 = 0 && R40 = 0)) && (R31 = 0 || (R0 = 0 && R40 = 0)) && (R33 = 0 || (R0 = 0 && R40 = 0)) && (R35 = 0 || (R0 = 0 && R40 = 0)) && (R37 = 0 || (R0 = 0 && R40 = 0));
// End of Parikh automata intersection problem
