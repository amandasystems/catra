// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R11, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87;
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 64] { R51 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s0 -> s1 [66, 65535] { R51 += 1 };
  s1 -> s1 [0, 64] { R51 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R51 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s1 [0, 65535] { R53 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R53 += 1, R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 65] { R55 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s2 [79, 79] { R55 += 1 };
  s0 -> s1 [80, 65535] { R55 += 1 };
  s1 -> s1 [0, 65] { R55 += 1 };
  s1 -> s2 [79, 79] { R55 += 1 };
  s1 -> s1 [80, 65535] { R55 += 1 };
  s2 -> s2 [0, 65] { R55 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [79, 65535] { R55 += 1 };
  accepting s2;
};
automaton key2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s1 [0, 65535] { R57 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R57 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R59 += 1 };
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R59 += 1, R25 += 1 };
  s0 -> s1 [80, 65535] { R59 += 1 };
  s1 -> s1 [0, 78] { R59 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R59 += 1 };
  s2 -> s1 [0, 78] { R59 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R59 += 1, R25 += 1 };
  s2 -> s1 [80, 65535] { R59 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_8 {
  init s0;
  s0 -> s1 [0, 78] { R61 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R61 += 1, R28 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R60 += 1, R61 += 1 };
  s0 -> s1 [80, 65535] { R61 += 1, R29 += 1 };
  s1 -> s1 [0, 78] { R61 += 1, R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R61 += 1 };
  s1 -> s1 [80, 65535] { R61 += 1, R29 += 1 };
  s2 -> s1 [0, 78] { R61 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R61 += 1, R28 += 1, R29 += 1 };
  s2 -> s1 [80, 65535] { R61 += 1, R29 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R34 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s2 [0, 65535] { R63 += 1, R33 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R34 += 1, R35 += 1 };
  s1 -> s4 [0, 65535] { R63 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R63 += 1, R34 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R63 += 1, R33 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R63 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_10 {
  init s0;
  s0 -> s1 [0, 79] { R65 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R65 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s3 [88, 88] { R65 += 1, R39 += 1 };
  s0 -> s1 [89, 65535] { R65 += 1, R39 += 1 };
  s1 -> s1 [0, 79] { R65 += 1, R39 += 1 };
  s1 -> s3 [88, 88] { R65 += 1, R39 += 1 };
  s1 -> s1 [89, 65535] { R65 += 1, R39 += 1 };
  s2 -> s1 [0, 79] { R65 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R65 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [88, 88] { R65 += 1, R39 += 1 };
  s2 -> s1 [89, 65535] { R65 += 1, R39 += 1 };
  s3 -> s3 [0, 79] { R65 += 1, R39 += 1 };
  s3 -> s3 [0, 65535] { R65 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [88, 65535] { R65 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton key2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R44 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R67 += 1, R43 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R67 += 1 };
  s1 -> s1 [0, 65535] { R67 += 1, R44 += 1, R45 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R67 += 1, R44 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R67 += 1, R43 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R67 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_12 {
  init s0;
  s0 -> s1 [0, 78] { R69 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R69 += 1, R48 += 1, R49 += 1 };
  s0 -> s3 [79, 79] { R69 += 1, R49 += 1 };
  s0 -> s4 [79, 79] { R69 += 1, R49 += 1 };
  s0 -> s1 [89, 65535] { R69 += 1, R49 += 1 };
  s1 -> s1 [0, 78] { R69 += 1, R49 += 1 };
  s1 -> s1 [0, 65535] { R69 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [79, 79] { R69 += 1, R49 += 1 };
  s1 -> s4 [79, 79] { R69 += 1, R49 += 1 };
  s1 -> s1 [89, 65535] { R69 += 1, R49 += 1 };
  s2 -> s1 [0, 78] { R69 += 1, R49 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R69 += 1, R48 += 1, R49 += 1 };
  s2 -> s3 [79, 79] { R69 += 1, R49 += 1 };
  s2 -> s4 [79, 79] { R69 += 1, R49 += 1 };
  s2 -> s1 [89, 65535] { R69 += 1, R49 += 1 };
  s3 -> s3 [0, 79] { R69 += 1, R49 += 1 };
  s3 -> s3 [0, 65535] { R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [89, 65535] { R69 += 1, R49 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R69 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R71 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R71 += 1, R11 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_14 {
  init s0;
  s0 -> s1 [0, 64] { R73 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s2 [65, 65] { R73 += 1 };
  s0 -> s3 [65, 65] { R73 += 1 };
  s0 -> s1 [80, 65535] { R73 += 1 };
  s1 -> s1 [0, 64] { R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R73 += 1 };
  s1 -> s3 [65, 65] { R73 += 1 };
  s1 -> s1 [80, 65535] { R73 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65] { R73 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [80, 65535] { R73 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key2_15 {
  init s0;
  s0 -> s1 [0, 64] { R75 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s2 [65, 65] { R75 += 1, R22 += 1 };
  s0 -> s3 [65, 65] { R75 += 1, R22 += 1 };
  s0 -> s1 [66, 65535] { R75 += 1, R22 += 1 };
  s1 -> s1 [0, 64] { R75 += 1, R22 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R75 += 1, R22 += 1 };
  s1 -> s3 [65, 65] { R75 += 1, R22 += 1 };
  s1 -> s1 [66, 65535] { R75 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R75 += 1, R22 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_16 {
  init s0;
  s0 -> s1 [0, 64] { R77 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s2 [65, 65] { R77 += 1, R24 += 1 };
  s0 -> s3 [65, 65] { R77 += 1, R24 += 1 };
  s0 -> s1 [66, 65535] { R77 += 1, R24 += 1 };
  s1 -> s1 [0, 64] { R77 += 1, R24 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R77 += 1, R24 += 1 };
  s1 -> s3 [65, 65] { R77 += 1, R24 += 1 };
  s1 -> s1 [66, 65535] { R77 += 1, R24 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R77 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_17 {
  init s0;
  s0 -> s1 [0, 64] { R79 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s2 [65, 65] { R79 += 1, R26 += 1, R27 += 1 };
  s0 -> s3 [65, 65] { R79 += 1, R26 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R79 += 1, R26 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R79 += 1, R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R79 += 1, R26 += 1, R27 += 1 };
  s1 -> s3 [65, 65] { R79 += 1, R26 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R79 += 1, R26 += 1, R27 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R79 += 1, R26 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_18 {
  init s0;
  s0 -> s1 [0, 64] { R81 += 1, R30 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s2 [65, 65] { R81 += 1, R30 += 1, R31 += 1 };
  s0 -> s3 [65, 65] { R81 += 1, R30 += 1, R31 += 1 };
  s0 -> s1 [66, 65535] { R81 += 1, R30 += 1, R31 += 1 };
  s1 -> s1 [0, 64] { R81 += 1, R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R81 += 1, R30 += 1, R31 += 1 };
  s1 -> s3 [65, 65] { R81 += 1, R30 += 1, R31 += 1 };
  s1 -> s1 [66, 65535] { R81 += 1, R30 += 1, R31 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R81 += 1, R30 += 1, R31 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_19 {
  init s0;
  s0 -> s1 [0, 64] { R83 += 1, R36 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [65, 65] { R83 += 1, R36 += 1, R37 += 1 };
  s0 -> s3 [65, 65] { R83 += 1, R36 += 1, R37 += 1 };
  s0 -> s1 [66, 65535] { R83 += 1, R36 += 1, R37 += 1 };
  s1 -> s1 [0, 64] { R83 += 1, R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R83 += 1, R36 += 1, R37 += 1 };
  s1 -> s3 [65, 65] { R83 += 1, R36 += 1, R37 += 1 };
  s1 -> s1 [66, 65535] { R83 += 1, R36 += 1, R37 += 1 };
  s2 -> s2 [0, 65535] { R83 += 1, R36 += 1, R37 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_20 {
  init s0;
  s0 -> s1 [0, 64] { R85 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s2 [65, 65] { R85 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [65, 65] { R85 += 1, R40 += 1, R41 += 1 };
  s0 -> s1 [66, 65535] { R85 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 64] { R85 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R85 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [65, 65] { R85 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [66, 65535] { R85 += 1, R40 += 1, R41 += 1 };
  s2 -> s2 [0, 65535] { R85 += 1, R40 += 1, R41 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_21 {
  init s0;
  s0 -> s1 [0, 64] { R87 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s2 [65, 65] { R87 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [65, 65] { R87 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [66, 65535] { R87 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 64] { R87 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R87 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [65, 65] { R87 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [66, 65535] { R87 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R87 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
constraint R1 = R65 && R23 + R22 + -1*R39 + -1*R37 = 0 && R38 + R36 = 0 && R54 = 0 && R55 = R65 && R64 = 0 && R5 < 1 && R25 + R24 < 1 && -1*R39 + -1*R37 < 1 && -1 < R65 && (R35 + R32 != 0 || ((R28 + R26 != 0 || R29 + R27 + -1*R39 + -1*R37 = 0 || R39 + R37 < 1) && (R28 + R26 = 0 || R39 + R37 < 1))) && (R35 + R32 != 0 || ((R33 + R30 != 0 || R34 + R31 + -1*R39 + -1*R37 = 0 || R39 + R37 < 1) && (R33 + R30 = 0 || R39 + R37 < 1))) && (R50 != 0 || R51 = R65 || (R10 = 0 && R65 = 0)) && (R52 != 0 || R53 = R65 || (R10 = 0 && R65 = 0)) && (R56 != 0 || R57 = R65 || (R10 = 0 && R65 = 0)) && (R58 != 0 || R59 = R65 || (R10 = 0 && R65 = 0)) && (R60 != 0 || R61 = R65 || (R10 = 0 && R65 = 0)) && (R62 != 0 || R63 = R65 || (R10 = 0 && R65 = 0)) && (R66 != 0 || R65 = R67 || (R10 = 0 && R65 = 0)) && (R68 != 0 || R65 = R69 || (R10 = 0 && R65 = 0)) && (R11 = 0 || (R70 = 0 && R71 = 0 && R72 = 0 && R73 = 0 && R74 = 0 && R75 = 0 && R76 = 0 && R77 = 0 && R78 = 0 && R79 = 0 && R80 = 0 && R81 = 0 && R82 = 0 && R83 = 0 && R84 = 0 && R85 = 0 && R86 = 0 && R87 = 0)) && (R35 + R32 = 0 || (R28 + R26 = 0 && R29 + R27 + -1*R39 + -1*R37 = 0)) && (R35 + R32 = 0 || (R33 + R30 = 0 && R34 + R31 + -1*R39 + -1*R37 = 0)) && (R45 + R42 = 0 || (R43 + R40 = 0 && R44 + R41 = 0)) && (R45 + R42 = 0 || (R48 + R46 = 0 && R49 + R47 = 0)) && (R50 = 0 || (R10 = 0 && R65 = 0)) && (R52 = 0 || (R10 = 0 && R65 = 0)) && (R56 = 0 || (R10 = 0 && R65 = 0)) && (R58 = 0 || (R10 = 0 && R65 = 0)) && (R60 = 0 || (R10 = 0 && R65 = 0)) && (R62 = 0 || (R10 = 0 && R65 = 0)) && (R66 = 0 || (R10 = 0 && R65 = 0)) && (R68 = 0 || (R10 = 0 && R65 = 0));
// End of Parikh automata intersection problem
