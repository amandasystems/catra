// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R18, R19, R22, R23, R3, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 64] { R121 += 1 };
  s0 -> s0 [0, 65535] { R120 += 1, R121 += 1 };
  s0 -> s1 [66, 65535] { R121 += 1 };
  s1 -> s1 [0, 64] { R121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R121 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R122 += 1, R123 += 1 };
  s0 -> s1 [0, 65535] { R123 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R123 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 65] { R125 += 1 };
  s0 -> s0 [0, 65535] { R124 += 1, R125 += 1 };
  s0 -> s2 [79, 79] { R125 += 1 };
  s0 -> s1 [80, 65535] { R125 += 1 };
  s1 -> s1 [0, 65] { R125 += 1 };
  s1 -> s2 [79, 79] { R125 += 1 };
  s1 -> s1 [80, 65535] { R125 += 1 };
  s2 -> s2 [0, 65] { R125 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [79, 65535] { R125 += 1 };
  accepting s2;
};
automaton key2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R127 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535] { R127 += 1, R73 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R129 += 1 };
  s0 -> s0 [0, 65535] { R128 += 1, R129 += 1 };
  s0 -> s2 [0, 65535] { R129 += 1, R75 += 1 };
  s0 -> s1 [80, 65535] { R129 += 1 };
  s1 -> s1 [0, 78] { R129 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R129 += 1 };
  s2 -> s1 [0, 78] { R129 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R129 += 1, R75 += 1 };
  s2 -> s1 [80, 65535] { R129 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_8 {
  init s0;
  s0 -> s1 [0, 78] { R131 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R130 += 1, R131 += 1 };
  s0 -> s2 [0, 65535] { R131 += 1, R78 += 1, R79 += 1 };
  s0 -> s1 [80, 65535] { R131 += 1, R79 += 1 };
  s1 -> s1 [0, 78] { R131 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R131 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R131 += 1, R79 += 1 };
  s2 -> s1 [0, 78] { R131 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R131 += 1, R78 += 1, R79 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R131 += 1, R79 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R133 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s2 [0, 65535] { R133 += 1, R83 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R133 += 1 };
  s1 -> s1 [0, 65535] { R133 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R133 += 1, R84 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R133 += 1, R83 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R133 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key2_10 {
  init s0;
  s0 -> s1 [0, 79] { R135 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R135 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s0 -> s1 [91, 65535] { R135 += 1, R89 += 1 };
  s1 -> s1 [0, 79] { R135 += 1, R89 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R135 += 1 };
  s1 -> s1 [91, 65535] { R135 += 1, R89 += 1 };
  s2 -> s1 [0, 79] { R135 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R135 += 1, R88 += 1, R89 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R135 += 1, R89 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R137 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s2 [0, 65535] { R137 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R137 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R137 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [0, 65535] { R137 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R137 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R137 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_12 {
  init s0;
  s0 -> s1 [0, 78] { R139 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R139 += 1, R98 += 1, R99 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s3 [79, 79] { R139 += 1, R99 += 1 };
  s0 -> s4 [79, 79] { R139 += 1, R99 += 1 };
  s0 -> s1 [91, 65535] { R139 += 1, R99 += 1 };
  s1 -> s1 [0, 78] { R139 += 1, R99 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R139 += 1 };
  s1 -> s3 [79, 79] { R139 += 1, R99 += 1 };
  s1 -> s4 [79, 79] { R139 += 1, R99 += 1 };
  s1 -> s1 [91, 65535] { R139 += 1, R99 += 1 };
  s2 -> s1 [0, 78] { R139 += 1, R99 += 1 };
  s2 -> s2 [0, 65535] { R139 += 1, R98 += 1, R99 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [79, 79] { R139 += 1, R99 += 1 };
  s2 -> s4 [79, 79] { R139 += 1, R99 += 1 };
  s2 -> s1 [91, 65535] { R139 += 1, R99 += 1 };
  s3 -> s3 [0, 65535] { R139 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 79] { R139 += 1, R99 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R139 += 1 };
  s4 -> s4 [91, 65535] { R139 += 1, R99 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R159 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R159 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_14 {
  init s0;
  s0 -> s1 [0, 64] { R161 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s2 [65, 65] { R161 += 1 };
  s0 -> s3 [65, 65] { R161 += 1 };
  s0 -> s1 [80, 65535] { R161 += 1 };
  s1 -> s1 [0, 64] { R161 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R161 += 1 };
  s1 -> s3 [65, 65] { R161 += 1 };
  s1 -> s1 [80, 65535] { R161 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65] { R161 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [80, 65535] { R161 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key2_15 {
  init s0;
  s0 -> s1 [0, 64] { R163 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s2 [65, 65] { R163 += 1, R72 += 1 };
  s0 -> s3 [65, 65] { R163 += 1, R72 += 1 };
  s0 -> s1 [66, 65535] { R163 += 1, R72 += 1 };
  s1 -> s1 [0, 64] { R163 += 1, R72 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R163 += 1, R72 += 1 };
  s1 -> s3 [65, 65] { R163 += 1, R72 += 1 };
  s1 -> s1 [66, 65535] { R163 += 1, R72 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R163 += 1, R72 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_16 {
  init s0;
  s0 -> s1 [0, 64] { R165 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s2 [65, 65] { R165 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R165 += 1, R74 += 1 };
  s0 -> s1 [66, 65535] { R165 += 1, R74 += 1 };
  s1 -> s1 [0, 64] { R165 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R165 += 1, R74 += 1 };
  s1 -> s3 [65, 65] { R165 += 1, R74 += 1 };
  s1 -> s1 [66, 65535] { R165 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R165 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_17 {
  init s0;
  s0 -> s1 [0, 64] { R167 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s2 [65, 65] { R167 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [65, 65] { R167 += 1, R76 += 1, R77 += 1 };
  s0 -> s1 [66, 65535] { R167 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 64] { R167 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R167 += 1, R76 += 1, R77 += 1 };
  s1 -> s3 [65, 65] { R167 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [66, 65535] { R167 += 1, R76 += 1, R77 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R167 += 1, R76 += 1, R77 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_18 {
  init s0;
  s0 -> s1 [0, 64] { R169 += 1, R80 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s2 [65, 65] { R169 += 1, R80 += 1, R81 += 1 };
  s0 -> s3 [65, 65] { R169 += 1, R80 += 1, R81 += 1 };
  s0 -> s1 [66, 65535] { R169 += 1, R80 += 1, R81 += 1 };
  s1 -> s1 [0, 64] { R169 += 1, R80 += 1, R81 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R169 += 1, R80 += 1, R81 += 1 };
  s1 -> s3 [65, 65] { R169 += 1, R80 += 1, R81 += 1 };
  s1 -> s1 [66, 65535] { R169 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R169 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_19 {
  init s0;
  s0 -> s1 [0, 64] { R171 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s2 [65, 65] { R171 += 1, R86 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R171 += 1, R86 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R171 += 1, R86 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R171 += 1, R86 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R171 += 1, R86 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R171 += 1, R86 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R171 += 1, R86 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R171 += 1, R86 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_20 {
  init s0;
  s0 -> s1 [0, 64] { R173 += 1, R90 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s2 [65, 65] { R173 += 1, R90 += 1, R91 += 1 };
  s0 -> s3 [65, 65] { R173 += 1, R90 += 1, R91 += 1 };
  s0 -> s1 [66, 65535] { R173 += 1, R90 += 1, R91 += 1 };
  s1 -> s1 [0, 64] { R173 += 1, R90 += 1, R91 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R173 += 1, R90 += 1, R91 += 1 };
  s1 -> s3 [65, 65] { R173 += 1, R90 += 1, R91 += 1 };
  s1 -> s1 [66, 65535] { R173 += 1, R90 += 1, R91 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R90 += 1, R91 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_21 {
  init s0;
  s0 -> s1 [0, 64] { R175 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s0 -> s2 [65, 65] { R175 += 1, R96 += 1, R97 += 1 };
  s0 -> s3 [65, 65] { R175 += 1, R96 += 1, R97 += 1 };
  s0 -> s1 [66, 65535] { R175 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 64] { R175 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R175 += 1, R96 += 1, R97 += 1 };
  s1 -> s3 [65, 65] { R175 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [66, 65535] { R175 += 1, R96 += 1, R97 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R175 += 1, R96 += 1, R97 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P50
automaton P50_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P35
automaton P35_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R7 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 64] { R101 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s1 [66, 65535] { R101 += 1 };
  s1 -> s1 [0, 64] { R101 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R101 += 1 };
  accepting s0, s1;
};
automaton key1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s1 [0, 65535] { R103 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R103 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 65] { R105 += 1 };
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s2 [80, 80] { R105 += 1 };
  s0 -> s1 [81, 65535] { R105 += 1 };
  s1 -> s1 [0, 65] { R105 += 1 };
  s1 -> s2 [80, 80] { R105 += 1 };
  s1 -> s1 [81, 65535] { R105 += 1 };
  s2 -> s2 [0, 65] { R105 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [80, 65535] { R105 += 1 };
  accepting s2;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R107 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R107 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 79] { R109 += 1 };
  s0 -> s0 [0, 65535] { R108 += 1, R109 += 1 };
  s0 -> s2 [0, 65535] { R109 += 1, R47 += 1 };
  s0 -> s1 [81, 65535] { R109 += 1 };
  s1 -> s1 [0, 79] { R109 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [81, 65535] { R109 += 1 };
  s2 -> s1 [0, 79] { R109 += 1 };
  s2 -> s2 [0, 65535] { R109 += 1, R47 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R109 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 79] { R111 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R111 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s1 [81, 65535] { R111 += 1, R51 += 1 };
  s1 -> s1 [0, 79] { R111 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R111 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R111 += 1, R51 += 1 };
  s2 -> s1 [0, 79] { R111 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R111 += 1, R50 += 1, R51 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R111 += 1, R51 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s1 [0, 65535] { R113 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R113 += 1, R55 += 1, R56 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R113 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535] { R113 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R113 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R113 += 1, R55 += 1, R56 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R113 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 80] { R115 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R115 += 1, R60 += 1, R61 += 1 };
  s0 -> s3 [85, 85] { R115 += 1, R61 += 1 };
  s0 -> s1 [86, 65535] { R115 += 1, R61 += 1 };
  s1 -> s1 [0, 80] { R115 += 1, R61 += 1 };
  s1 -> s3 [85, 85] { R115 += 1, R61 += 1 };
  s1 -> s1 [86, 65535] { R115 += 1, R61 += 1 };
  s2 -> s1 [0, 80] { R115 += 1, R61 += 1 };
  s2 -> s2 [0, 65535] { R115 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [85, 85] { R115 += 1, R61 += 1 };
  s2 -> s1 [86, 65535] { R115 += 1, R61 += 1 };
  s3 -> s3 [0, 80] { R115 += 1, R61 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R115 += 1 };
  s3 -> s3 [85, 65535] { R115 += 1, R61 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton key1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R116 += 1, R117 += 1 };
  s0 -> s1 [0, 65535] { R117 += 1, R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R117 += 1, R66 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R117 += 1, R65 += 1, R66 += 1 };
  s1 -> s2 [0, 65535] { R117 += 1, R66 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R117 += 1, R66 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R117 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R117 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 79] { R119 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R119 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R118 += 1, R119 += 1 };
  s0 -> s3 [80, 80] { R119 += 1, R71 += 1 };
  s0 -> s4 [80, 80] { R119 += 1, R71 += 1 };
  s0 -> s1 [86, 65535] { R119 += 1, R71 += 1 };
  s1 -> s1 [0, 79] { R119 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R119 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [80, 80] { R119 += 1, R71 += 1 };
  s1 -> s4 [80, 80] { R119 += 1, R71 += 1 };
  s1 -> s1 [86, 65535] { R119 += 1, R71 += 1 };
  s2 -> s1 [0, 79] { R119 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R119 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [80, 80] { R119 += 1, R71 += 1 };
  s2 -> s4 [80, 80] { R119 += 1, R71 += 1 };
  s2 -> s1 [86, 65535] { R119 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R119 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 80] { R119 += 1, R71 += 1 };
  s4 -> s4 [0, 65535] { R119 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [86, 65535] { R119 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s1 [0, 65535] { R141 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R141 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_14 {
  init s0;
  s0 -> s1 [0, 64] { R143 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s2 [65, 65] { R143 += 1 };
  s0 -> s3 [65, 65] { R143 += 1 };
  s0 -> s1 [81, 65535] { R143 += 1 };
  s1 -> s1 [0, 64] { R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R143 += 1 };
  s1 -> s3 [65, 65] { R143 += 1 };
  s1 -> s1 [81, 65535] { R143 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65] { R143 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [81, 65535] { R143 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key1_15 {
  init s0;
  s0 -> s1 [0, 64] { R145 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s2 [65, 65] { R145 += 1, R44 += 1 };
  s0 -> s3 [65, 65] { R145 += 1, R44 += 1 };
  s0 -> s1 [66, 65535] { R145 += 1, R44 += 1 };
  s1 -> s1 [0, 64] { R145 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R145 += 1, R44 += 1 };
  s1 -> s3 [65, 65] { R145 += 1, R44 += 1 };
  s1 -> s1 [66, 65535] { R145 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R145 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_16 {
  init s0;
  s0 -> s1 [0, 64] { R147 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s2 [65, 65] { R147 += 1, R46 += 1 };
  s0 -> s3 [65, 65] { R147 += 1, R46 += 1 };
  s0 -> s1 [66, 65535] { R147 += 1, R46 += 1 };
  s1 -> s1 [0, 64] { R147 += 1, R46 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R147 += 1, R46 += 1 };
  s1 -> s3 [65, 65] { R147 += 1, R46 += 1 };
  s1 -> s1 [66, 65535] { R147 += 1, R46 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R46 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_17 {
  init s0;
  s0 -> s1 [0, 64] { R149 += 1, R48 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s2 [65, 65] { R149 += 1, R48 += 1, R49 += 1 };
  s0 -> s3 [65, 65] { R149 += 1, R48 += 1, R49 += 1 };
  s0 -> s1 [66, 65535] { R149 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [0, 64] { R149 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R149 += 1, R48 += 1, R49 += 1 };
  s1 -> s3 [65, 65] { R149 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [66, 65535] { R149 += 1, R48 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R149 += 1, R48 += 1, R49 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_18 {
  init s0;
  s0 -> s1 [0, 64] { R151 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s2 [65, 65] { R151 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [65, 65] { R151 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [66, 65535] { R151 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 64] { R151 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R151 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [65, 65] { R151 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [66, 65535] { R151 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R151 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_19 {
  init s0;
  s0 -> s1 [0, 64] { R153 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s2 [65, 65] { R153 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [65, 65] { R153 += 1, R58 += 1, R59 += 1 };
  s0 -> s1 [66, 65535] { R153 += 1, R58 += 1, R59 += 1 };
  s1 -> s1 [0, 64] { R153 += 1, R58 += 1, R59 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R153 += 1, R58 += 1, R59 += 1 };
  s1 -> s3 [65, 65] { R153 += 1, R58 += 1, R59 += 1 };
  s1 -> s1 [66, 65535] { R153 += 1, R58 += 1, R59 += 1 };
  s2 -> s2 [0, 65535] { R153 += 1, R58 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_20 {
  init s0;
  s0 -> s1 [0, 64] { R155 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s0 -> s2 [65, 65] { R155 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [65, 65] { R155 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [66, 65535] { R155 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 64] { R155 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R155 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [65, 65] { R155 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [66, 65535] { R155 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R155 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_21 {
  init s0;
  s0 -> s1 [0, 64] { R157 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s2 [65, 65] { R157 += 1, R68 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R157 += 1, R68 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R157 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R157 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R157 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R157 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R157 += 1, R68 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R157 += 1, R68 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R115 && R3 = R125 && R45 + R44 + -1*R61 + -1*R59 = 0 && R60 + R58 = 0 && R104 = 0 && R105 = R115 && R114 = 0 && R124 = 0 && R7 < 1 && R13 < 1 && R47 + R46 < 1 && -1*R61 + -1*R59 < 1 && -1*R73 + -1*R72 < 1 && R75 + R74 < 1 && -1 < R115 && -1 < R125 && (R57 + R54 != 0 || ((R50 + R48 != 0 || R51 + R49 + -1*R61 + -1*R59 = 0 || R61 + R59 < 1) && (R50 + R48 = 0 || R61 + R59 < 1))) && (R57 + R54 != 0 || ((R55 + R52 != 0 || R56 + R53 + -1*R61 + -1*R59 = 0 || R61 + R59 < 1) && (R55 + R52 = 0 || R61 + R59 < 1))) && (R73 + R72 != 0 || R85 + R82 = 0 || (R78 + R76 = 0 && R79 + R77 = 0)) && (R73 + R72 != 0 || R85 + R82 = 0 || (R83 + R80 = 0 && R84 + R81 = 0)) && (R73 + R72 != 0 || R85 + R82 = 0 || (R88 + R86 = 0 && R89 + R87 = 0)) && (R78 + R76 != 0 || R73 + R72 + -1*R79 + -1*R77 = 0 || R73 + R72 < 1) && (R83 + R80 != 0 || R73 + R72 + -1*R84 + -1*R81 = 0 || R73 + R72 < 1) && (R88 + R86 != 0 || R73 + R72 + -1*R89 + -1*R87 = 0 || R73 + R72 < 1) && (R100 != 0 || R101 = R115 || (R18 = 0 && R115 = 0)) && (R102 != 0 || R103 = R115 || (R18 = 0 && R115 = 0)) && (R106 != 0 || R107 = R115 || (R18 = 0 && R115 = 0)) && (R108 != 0 || R109 = R115 || (R18 = 0 && R115 = 0)) && (R110 != 0 || R111 = R115 || (R18 = 0 && R115 = 0)) && (R112 != 0 || R113 = R115 || (R18 = 0 && R115 = 0)) && (R116 != 0 || R115 = R117 || (R18 = 0 && R115 = 0)) && (R118 != 0 || R115 = R119 || (R18 = 0 && R115 = 0)) && (R120 != 0 || R121 = R125 || (R22 = 0 && R125 = 0)) && (R122 != 0 || R123 = R125 || (R22 = 0 && R125 = 0)) && (R126 != 0 || R125 = R127 || (R22 = 0 && R125 = 0)) && (R128 != 0 || R125 = R129 || (R22 = 0 && R125 = 0)) && (R130 != 0 || R125 = R131 || (R22 = 0 && R125 = 0)) && (R132 != 0 || R125 = R133 || (R22 = 0 && R125 = 0)) && (R134 != 0 || R125 = R135 || (R22 = 0 && R125 = 0)) && (R136 != 0 || R125 = R137 || (R22 = 0 && R125 = 0)) && (R138 != 0 || R125 = R139 || (R22 = 0 && R125 = 0)) && (R19 = 0 || (R140 = 0 && R141 = 0)) && (R19 = 0 || (R142 = 0 && R143 = 0)) && (R19 = 0 || (R144 = 0 && R145 = 0)) && (R19 = 0 || (R146 = 0 && R147 = 0)) && (R19 = 0 || (R148 = 0 && R149 = 0)) && (R19 = 0 || (R150 = 0 && R151 = 0)) && (R19 = 0 || (R152 = 0 && R153 = 0)) && (R19 = 0 || (R154 = 0 && R155 = 0)) && (R19 = 0 || (R156 = 0 && R157 = 0)) && (R23 = 0 || (R158 = 0 && R159 = 0 && R160 = 0 && R161 = 0 && R162 = 0 && R163 = 0 && R164 = 0 && R165 = 0 && R166 = 0 && R167 = 0 && R168 = 0 && R169 = 0 && R170 = 0 && R171 = 0 && R172 = 0 && R173 = 0 && R174 = 0 && R175 = 0)) && (R57 + R54 = 0 || (R50 + R48 = 0 && R51 + R49 + -1*R61 + -1*R59 = 0)) && (R57 + R54 = 0 || (R55 + R52 = 0 && R56 + R53 + -1*R61 + -1*R59 = 0)) && (R67 + R64 = 0 || (R65 + R62 = 0 && R66 + R63 = 0)) && (R67 + R64 = 0 || (R70 + R68 = 0 && R71 + R69 = 0)) && (R78 + R76 = 0 || R73 + R72 < 1) && (R83 + R80 = 0 || R73 + R72 < 1) && (R88 + R86 = 0 || R73 + R72 < 1) && (R95 + R92 = 0 || (R93 + R90 = 0 && R94 + R91 = 0)) && (R95 + R92 = 0 || (R98 + R96 = 0 && R99 + R97 = 0)) && (R100 = 0 || (R18 = 0 && R115 = 0)) && (R102 = 0 || (R18 = 0 && R115 = 0)) && (R106 = 0 || (R18 = 0 && R115 = 0)) && (R108 = 0 || (R18 = 0 && R115 = 0)) && (R110 = 0 || (R18 = 0 && R115 = 0)) && (R112 = 0 || (R18 = 0 && R115 = 0)) && (R116 = 0 || (R18 = 0 && R115 = 0)) && (R118 = 0 || (R18 = 0 && R115 = 0)) && (R120 = 0 || (R22 = 0 && R125 = 0)) && (R122 = 0 || (R22 = 0 && R125 = 0)) && (R126 = 0 || (R22 = 0 && R125 = 0)) && (R128 = 0 || (R22 = 0 && R125 = 0)) && (R130 = 0 || (R22 = 0 && R125 = 0)) && (R132 = 0 || (R22 = 0 && R125 = 0)) && (R134 = 0 || (R22 = 0 && R125 = 0)) && (R136 = 0 || (R22 = 0 && R125 = 0)) && (R138 = 0 || (R22 = 0 && R125 = 0));
// End of Parikh automata intersection problem
