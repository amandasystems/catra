// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R10, R11, R12, R13, R2, R3, R9;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535] { R3 += 1 };
  s1 -> s1 [0, 66] { R3 += 1 };
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535] { R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 66] { R11 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s0 -> s1 [68, 65535] { R11 += 1 };
  s1 -> s1 [0, 66] { R11 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [68, 65535] { R11 += 1 };
  accepting s0, s1;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R13 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13 += 1, R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = 0 && R3 < R0 && -2 < R3 && (R9 != 0 || ((R0 != R13 || ((R10 != R12 || ((R11 != R13 || R3 - R12 = -1 || R13 - R3 < 2) && (R11 = R13 || R13 - R3 < 2))) && (R10 = R12 || R13 - R3 < 2))) && (R0 = R13 || R0 - R3 < 2))) && (R9 = 0 || (R0 = R13 && (R10 != R12 || ((R11 != R13 || R3 - R12 = -1 || R13 - R3 < 1) && (R11 = R13 || R13 - R3 < 1))) && (R10 = R12 || R13 - R3 < 1)));
// End of Parikh automata intersection problem
