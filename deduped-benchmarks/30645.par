// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R38, R4, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R38 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 66] { R47 += 1 };
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s2 [67, 67] { R47 += 1 };
  s0 -> s1 [68, 65535] { R47 += 1 };
  s1 -> s1 [0, 66] { R47 += 1 };
  s1 -> s2 [67, 67] { R47 += 1 };
  s1 -> s1 [68, 65535] { R47 += 1 };
  s2 -> s2 [0, 65535] { R47 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s1 [0, 65535] { R49 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R49 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R51 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R51 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s0 -> s3 [67, 67] { R51 += 1 };
  s0 -> s1 [68, 65535] { R51 += 1, R4 += 1 };
  s1 -> s1 [0, 66] { R51 += 1, R4 += 1 };
  s1 -> s3 [67, 67] { R51 += 1 };
  s1 -> s1 [68, 65535] { R51 += 1, R4 += 1 };
  s2 -> s1 [0, 66] { R51 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R51 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [67, 67] { R51 += 1 };
  s2 -> s1 [68, 65535] { R51 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R51 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 66] { R53 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R53 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s3 [67, 67] { R53 += 1, R43 += 1 };
  s0 -> s1 [68, 65535] { R53 += 1, R43 += 1 };
  s1 -> s1 [0, 66] { R53 += 1, R43 += 1 };
  s1 -> s3 [67, 67] { R53 += 1, R43 += 1 };
  s1 -> s1 [68, 65535] { R53 += 1, R43 += 1 };
  s2 -> s1 [0, 66] { R53 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R53 += 1, R42 += 1, R43 += 1 };
  s2 -> s3 [67, 67] { R53 += 1, R43 += 1 };
  s2 -> s1 [68, 65535] { R53 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R53 += 1, R43 += 1 };
  s3 -> s4 [0, 65535] { R53 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R53 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R55 += 1, R45 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s2 [0, 65535] { R55 += 1, R44 += 1, R45 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R55 += 1, R45 += 1, R41 += 1 };
  s1 -> s4 [0, 65535] { R55 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R55 += 1, R45 += 1, R41 += 1 };
  s2 -> s2 [0, 65535] { R55 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R55 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R43 && R1 = R53 && R3 = 0 && R4 - R42 = -1 && R46 = 0 && R47 = R53 && R50 = 0 && R51 = R53 && R52 = 0 && R38 < 1 && R42 - R43 < 1 && -1 < R42 && -1 < R53 && (R42 != R44 || R43 = R45 || ((R41 != 0 || R43 - R44 < 1 || R44 < 0) && (R41 = 0 || R43 < R44 || R44 < 0))) && (R48 != 0 || R49 = R53 || (R43 = 0 && (R42 != 0 || R53 < 1))) && (R54 != 0 || R53 = R55 || (R43 = 0 && (R42 != 0 || R53 < 1))) && (R42 = R44 || (R41 = 0 && R42 = R43)) && (R48 = 0 || (R43 = 0 && (R42 != 0 || R53 < 1))) && (R54 = 0 || (R43 = 0 && (R42 != 0 || R53 < 1)));
// End of Parikh automata intersection problem
