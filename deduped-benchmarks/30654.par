// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R9;
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 64] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s1 [66, 65535] { R30 += 1 };
  s1 -> s1 [0, 64] { R30 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R30 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [0, 65535] { R32 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R32 += 1, R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 65] { R34 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s2 [79, 79] { R34 += 1 };
  s0 -> s1 [80, 65535] { R34 += 1 };
  s1 -> s1 [0, 65] { R34 += 1 };
  s1 -> s2 [79, 79] { R34 += 1 };
  s1 -> s1 [80, 65535] { R34 += 1 };
  s2 -> s2 [0, 65] { R34 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [79, 65535] { R34 += 1 };
  accepting s2;
};
automaton key2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s1 [0, 65535] { R36 += 1, R16 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1, R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R38 += 1 };
  s0 -> s2 [0, 65535] { R38 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s0 -> s1 [80, 65535] { R38 += 1 };
  s1 -> s1 [0, 78] { R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R38 += 1 };
  s2 -> s1 [0, 78] { R38 += 1 };
  s2 -> s2 [0, 65535] { R38 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R38 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_8 {
  init s0;
  s0 -> s1 [0, 78] { R40 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R40 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [79, 79] { R40 += 1, R22 += 1 };
  s0 -> s1 [80, 65535] { R40 += 1, R22 += 1 };
  s1 -> s1 [0, 78] { R40 += 1, R22 += 1 };
  s1 -> s3 [79, 79] { R40 += 1, R22 += 1 };
  s1 -> s1 [80, 65535] { R40 += 1, R22 += 1 };
  s2 -> s1 [0, 78] { R40 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R40 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [79, 79] { R40 += 1, R22 += 1 };
  s2 -> s1 [80, 65535] { R40 += 1, R22 += 1 };
  s3 -> s4 [0, 65535] { R40 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R40 += 1, R22 += 1 };
  s4 -> s4 [0, 65535] { R40 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton key2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s1 [0, 65535] { R42 += 1, R26 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R42 += 1, R27 += 1, R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R42 += 1, R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535] { R42 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R42 += 1 };
  s2 -> s2 [0, 65535] { R42 += 1, R27 += 1, R28 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R42 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R44 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R44 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_11 {
  init s0;
  s0 -> s1 [0, 64] { R46 += 1 };
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s0 -> s2 [65, 65] { R46 += 1 };
  s0 -> s3 [65, 65] { R46 += 1 };
  s0 -> s1 [80, 65535] { R46 += 1 };
  s1 -> s1 [0, 64] { R46 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R46 += 1 };
  s1 -> s3 [65, 65] { R46 += 1 };
  s1 -> s1 [80, 65535] { R46 += 1 };
  s2 -> s2 [0, 65] { R46 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [80, 65535] { R46 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_12 {
  init s0;
  s0 -> s1 [0, 64] { R48 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s0 -> s2 [65, 65] { R48 += 1, R15 += 1 };
  s0 -> s3 [65, 65] { R48 += 1, R15 += 1 };
  s0 -> s1 [66, 65535] { R48 += 1, R15 += 1 };
  s1 -> s1 [0, 64] { R48 += 1, R15 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R48 += 1, R15 += 1 };
  s1 -> s3 [65, 65] { R48 += 1, R15 += 1 };
  s1 -> s1 [66, 65535] { R48 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R48 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_13 {
  init s0;
  s0 -> s1 [0, 64] { R50 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s0 -> s2 [65, 65] { R50 += 1, R17 += 1 };
  s0 -> s3 [65, 65] { R50 += 1, R17 += 1 };
  s0 -> s1 [66, 65535] { R50 += 1, R17 += 1 };
  s1 -> s1 [0, 64] { R50 += 1, R17 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R50 += 1, R17 += 1 };
  s1 -> s3 [65, 65] { R50 += 1, R17 += 1 };
  s1 -> s1 [66, 65535] { R50 += 1, R17 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R50 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_14 {
  init s0;
  s0 -> s1 [0, 64] { R52 += 1, R19 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s2 [65, 65] { R52 += 1, R19 += 1, R20 += 1 };
  s0 -> s3 [65, 65] { R52 += 1, R19 += 1, R20 += 1 };
  s0 -> s1 [66, 65535] { R52 += 1, R19 += 1, R20 += 1 };
  s1 -> s1 [0, 64] { R52 += 1, R19 += 1, R20 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R52 += 1, R19 += 1, R20 += 1 };
  s1 -> s3 [65, 65] { R52 += 1, R19 += 1, R20 += 1 };
  s1 -> s1 [66, 65535] { R52 += 1, R19 += 1, R20 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R52 += 1, R19 += 1, R20 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_15 {
  init s0;
  s0 -> s1 [0, 64] { R54 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R53 += 1, R54 += 1 };
  s0 -> s2 [65, 65] { R54 += 1, R23 += 1, R24 += 1 };
  s0 -> s3 [65, 65] { R54 += 1, R23 += 1, R24 += 1 };
  s0 -> s1 [66, 65535] { R54 += 1, R23 += 1, R24 += 1 };
  s1 -> s1 [0, 64] { R54 += 1, R23 += 1, R24 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R54 += 1, R23 += 1, R24 += 1 };
  s1 -> s3 [65, 65] { R54 += 1, R23 += 1, R24 += 1 };
  s1 -> s1 [66, 65535] { R54 += 1, R23 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R54 += 1, R23 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
constraint R1 = R40 && R16 + R15 + -1*R22 + -1*R20 = 0 && R21 + R19 = 0 && R33 = 0 && R34 = R40 && R39 = 0 && R5 < 1 && R18 + R17 < 1 && -1*R22 + -1*R20 < 1 && -1 < R40 && (R22 + R20 != 0 || R28 + R25 = 0 || (R26 + R23 = 0 && R27 + R24 = 0)) && (R26 + R23 != 0 || R22 + R20 + -1*R27 + -1*R24 = 0 || R22 + R20 < 1) && (R29 != 0 || R30 = R40 || (R9 = 0 && R40 = 0)) && (R31 != 0 || R32 = R40 || (R9 = 0 && R40 = 0)) && (R35 != 0 || R36 = R40 || (R9 = 0 && R40 = 0)) && (R37 != 0 || R38 = R40 || (R9 = 0 && R40 = 0)) && (R41 != 0 || R40 = R42 || (R9 = 0 && R40 = 0)) && (R10 = 0 || (R43 = 0 && R44 = 0 && R45 = 0 && R46 = 0 && R47 = 0 && R48 = 0 && R49 = 0 && R50 = 0 && R51 = 0 && R52 = 0 && R53 = 0 && R54 = 0)) && (R26 + R23 = 0 || R22 + R20 < 1) && (R29 = 0 || (R9 = 0 && R40 = 0)) && (R31 = 0 || (R9 = 0 && R40 = 0)) && (R35 = 0 || (R9 = 0 && R40 = 0)) && (R37 = 0 || (R9 = 0 && R40 = 0)) && (R41 = 0 || (R9 = 0 && R40 = 0));
// End of Parikh automata intersection problem
