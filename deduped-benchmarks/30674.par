// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3;
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [79, 79];
  s0 -> s0 [80, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [79, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 78] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [79, 79];
  s0 -> s1 [80, 65535] { R3 += 1 };
  s1 -> s1 [0, 78] { R3 += 1 };
  s1 -> s2 [79, 79];
  s1 -> s1 [80, 65535] { R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 78] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s1 [80, 65535] { R19 += 1 };
  s1 -> s1 [0, 78] { R19 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R19 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s1 [0, 65535] { R21 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1, R16 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 79] { R23 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [91, 65535] { R23 += 1 };
  s1 -> s1 [0, 79] { R23 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R23 += 1 };
  accepting s0, s1;
};
automaton key2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [0, 65535] { R25 += 1, R17 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1, R17 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R27 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s2 [79, 79] { R27 += 1 };
  s0 -> s3 [79, 79] { R27 += 1 };
  s0 -> s1 [91, 65535] { R27 += 1 };
  s1 -> s1 [0, 78] { R27 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [79, 79] { R27 += 1 };
  s1 -> s3 [79, 79] { R27 += 1 };
  s1 -> s1 [91, 65535] { R27 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 79] { R27 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R27 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s0 [68, 65535];
  accepting s0;
};
};
synchronised {  // Automata constraining P19
automaton P19_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
constraint R2 = 0 && R3 < R0 && -2 < R3 && (R0 != R19 || R3 - R18 = -1 || (R19 - R3 < 2 && (R3 - R19 != -1 || R16 = 0))) && (R0 != R21 || R3 - R20 = -1 || (R21 - R3 < 2 && (R3 - R21 != -1 || R16 = 0))) && (R0 != R23 || R3 - R22 = -1 || (R23 - R3 < 2 && (R3 - R23 != -1 || R16 = 0))) && (R17 != 0 || ((R24 != 0 || ((R26 != 0 || ((R25 != R27 || R3 - R27 = -1 || R0 < 1 || R3 < 0) && (R25 = R27 || R0 < 1 || R3 < 0))) && (R26 = 0 || R0 < 1 || R3 < 0))) && (R24 = 0 || R0 < 1 || R3 < 0))) && (R0 = R19 || (R0 - R3 = 1 && R16 = 0)) && (R0 = R21 || (R0 - R3 = 1 && R16 = 0)) && (R0 = R23 || (R0 - R3 = 1 && R16 = 0)) && (R17 = 0 || (R3 - R27 = -1 && R24 = 0 && R25 = R27 && R26 = 0));
// End of Parikh automata intersection problem
