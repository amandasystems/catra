// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R13, R17, R18, R2, R3, R395, R396, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R476, R477, R478, R479, R480, R481, R482, R483, R484, R485, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R395 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R396 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R422 += 1 };
  s0 -> s0 [0, 65535] { R421 += 1, R422 += 1 };
  s0 -> s2 [9, 13] { R422 += 1 };
  s0 -> s1 [14, 31] { R422 += 1 };
  s0 -> s2 [32, 32] { R422 += 1 };
  s0 -> s1 [33, 65535] { R422 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R422 += 1 };
  s2 -> s1 [0, 65535] { R422 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R423 += 1, R424 += 1 };
  s0 -> s1 [0, 65535] { R424 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R424 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R426 += 1 };
  s0 -> s0 [0, 65535] { R425 += 1, R426 += 1 };
  s0 -> s2 [9, 13] { R426 += 1 };
  s0 -> s1 [14, 31] { R426 += 1 };
  s0 -> s2 [32, 32] { R426 += 1 };
  s0 -> s1 [33, 65535] { R426 += 1 };
  s1 -> s1 [0, 65535] { R426 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R426 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R427 += 1, R428 += 1 };
  s0 -> s1 [0, 65535] { R428 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R428 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 80] { R442 += 1 };
  s0 -> s0 [0, 65535] { R441 += 1, R442 += 1 };
  s0 -> s1 [82, 65535] { R442 += 1 };
  s1 -> s1 [0, 80] { R442 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [82, 65535] { R442 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R443 += 1, R444 += 1 };
  s0 -> s1 [0, 65535] { R444 += 1, R403 += 1 };
  s1 -> s1 [0, 65535] { R444 += 1, R403 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 81] { R446 += 1 };
  s0 -> s0 [0, 65535] { R445 += 1, R446 += 1 };
  s0 -> s1 [91, 65535] { R446 += 1 };
  s1 -> s1 [0, 81] { R446 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R446 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R455 += 1, R456 += 1 };
  s0 -> s1 [0, 65535] { R456 += 1, R404 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R456 += 1, R404 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R458 += 1 };
  s0 -> s0 [0, 65535] { R457 += 1, R458 += 1 };
  s0 -> s2 [81, 81] { R458 += 1 };
  s0 -> s3 [81, 81] { R458 += 1 };
  s0 -> s1 [91, 65535] { R458 += 1 };
  s1 -> s1 [0, 80] { R458 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R458 += 1 };
  s1 -> s3 [81, 81] { R458 += 1 };
  s1 -> s1 [91, 65535] { R458 += 1 };
  s2 -> s2 [0, 81] { R458 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R458 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P76
automaton P76_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining P69
automaton P69_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R18 += 1 };
  s1 -> s1 [0, 60] { R18 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R460 += 1 };
  s0 -> s0 [0, 65535] { R459 += 1, R460 += 1 };
  s0 -> s2 [68, 68] { R460 += 1 };
  s0 -> s1 [69, 65535] { R460 += 1 };
  s1 -> s1 [0, 64] { R460 += 1 };
  s1 -> s2 [68, 68] { R460 += 1 };
  s1 -> s1 [69, 65535] { R460 += 1 };
  s2 -> s2 [0, 64] { R460 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R460 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R461 += 1, R462 += 1 };
  s0 -> s1 [0, 65535] { R462 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R462 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 67] { R464 += 1 };
  s0 -> s0 [0, 65535] { R463 += 1, R464 += 1 };
  s0 -> s2 [0, 65535] { R464 += 1, R10 += 1 };
  s0 -> s3 [68, 68] { R464 += 1 };
  s0 -> s1 [69, 65535] { R464 += 1 };
  s1 -> s1 [0, 67] { R464 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R464 += 1 };
  s1 -> s1 [69, 65535] { R464 += 1 };
  s2 -> s1 [0, 67] { R464 += 1 };
  s2 -> s2 [0, 65535] { R464 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [68, 68] { R464 += 1 };
  s2 -> s1 [69, 65535] { R464 += 1 };
  s3 -> s3 [0, 65535] { R464 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R466 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R466 += 1, R405 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R465 += 1, R466 += 1 };
  s0 -> s3 [9, 13] { R466 += 1, R406 += 1 };
  s0 -> s1 [14, 31] { R466 += 1, R406 += 1 };
  s0 -> s3 [32, 32] { R466 += 1, R406 += 1 };
  s0 -> s1 [33, 65535] { R466 += 1, R406 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R466 += 1, R406 += 1 };
  s1 -> s5 [0, 65535] { R466 += 1 };
  s2 -> s1 [0, 8] { R466 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R466 += 1, R405 += 1, R406 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R466 += 1, R406 += 1 };
  s2 -> s1 [14, 31] { R466 += 1, R406 += 1 };
  s2 -> s3 [32, 32] { R466 += 1, R406 += 1 };
  s2 -> s1 [33, 65535] { R466 += 1, R406 += 1 };
  s3 -> s1 [0, 65535] { R466 += 1, R406 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R466 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R468 += 1, R407 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R467 += 1, R468 += 1 };
  s0 -> s2 [0, 65535] { R468 += 1, R408 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R468 += 1, R407 += 1, R408 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R468 += 1, R408 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R468 += 1 };
  s2 -> s2 [0, 65535] { R468 += 1, R408 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R468 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R470 += 1, R410 += 1 };
  s0 -> s2 [0, 65535] { R470 += 1, R409 += 1, R410 += 1 };
  s0 -> s0 [0, 65535] { R469 += 1, R470 += 1 };
  s0 -> s3 [9, 13] { R470 += 1, R410 += 1 };
  s0 -> s1 [14, 31] { R470 += 1, R410 += 1 };
  s0 -> s3 [32, 32] { R470 += 1, R410 += 1 };
  s0 -> s1 [33, 65535] { R470 += 1, R410 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R470 += 1 };
  s1 -> s1 [0, 65535] { R470 += 1, R410 += 1 };
  s2 -> s1 [0, 8] { R470 += 1, R410 += 1 };
  s2 -> s2 [0, 65535] { R470 += 1, R409 += 1, R410 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R470 += 1, R410 += 1 };
  s2 -> s1 [14, 31] { R470 += 1, R410 += 1 };
  s2 -> s3 [32, 32] { R470 += 1, R410 += 1 };
  s2 -> s1 [33, 65535] { R470 += 1, R410 += 1 };
  s3 -> s1 [0, 65535] { R470 += 1, R410 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R470 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R472 += 1, R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R472 += 1, R412 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R471 += 1, R472 += 1 };
  s1 -> s1 [0, 65535] { R472 += 1, R411 += 1, R412 += 1 };
  s1 -> s2 [0, 65535] { R472 += 1, R412 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R472 += 1, R412 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R472 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R472 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 67] { R474 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R473 += 1, R474 += 1 };
  s0 -> s2 [0, 65535] { R474 += 1, R429 += 1, R430 += 1 };
  s0 -> s1 [69, 65535] { R474 += 1, R430 += 1 };
  s1 -> s1 [0, 67] { R474 += 1, R430 += 1 };
  s1 -> s1 [0, 65535] { R474 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R474 += 1, R430 += 1 };
  s2 -> s1 [0, 67] { R474 += 1, R430 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R474 += 1, R429 += 1, R430 += 1 };
  s2 -> s1 [69, 65535] { R474 += 1, R430 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R476 += 1, R432 += 1, R399 += 1 };
  s0 -> s0 [0, 65535] { R475 += 1, R476 += 1 };
  s0 -> s2 [0, 65535] { R476 += 1, R431 += 1, R432 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R476 += 1, R432 += 1, R399 += 1 };
  s1 -> s4 [0, 65535] { R476 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R476 += 1, R432 += 1, R399 += 1 };
  s2 -> s2 [0, 65535] { R476 += 1, R431 += 1, R432 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R476 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 68] { R478 += 1, R434 += 1 };
  s0 -> s2 [0, 65535] { R478 += 1, R433 += 1, R434 += 1 };
  s0 -> s0 [0, 65535] { R477 += 1, R478 += 1 };
  s0 -> s3 [76, 76] { R478 += 1, R434 += 1 };
  s0 -> s1 [77, 65535] { R478 += 1, R434 += 1 };
  s1 -> s1 [0, 68] { R478 += 1, R434 += 1 };
  s1 -> s3 [76, 76] { R478 += 1, R434 += 1 };
  s1 -> s1 [77, 65535] { R478 += 1, R434 += 1 };
  s2 -> s1 [0, 68] { R478 += 1, R434 += 1 };
  s2 -> s2 [0, 65535] { R478 += 1, R433 += 1, R434 += 1 };
  s2 -> s3 [76, 76] { R478 += 1, R434 += 1 };
  s2 -> s1 [77, 65535] { R478 += 1, R434 += 1 };
  s3 -> s3 [0, 68] { R478 += 1, R434 += 1 };
  s3 -> s3 [0, 65535] { R478 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [76, 65535] { R478 += 1, R434 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R479 += 1, R480 += 1 };
  s0 -> s1 [0, 65535] { R480 += 1, R447 += 1, R448 += 1 };
  s0 -> s2 [0, 65535] { R480 += 1, R448 += 1, R400 += 1 };
  s1 -> s1 [0, 65535] { R480 += 1, R447 += 1, R448 += 1 };
  s1 -> s2 [0, 65535] { R480 += 1, R448 += 1, R400 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R480 += 1 };
  s2 -> s2 [0, 65535] { R480 += 1, R448 += 1, R400 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R480 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 67] { R482 += 1, R450 += 1 };
  s0 -> s0 [0, 65535] { R481 += 1, R482 += 1 };
  s0 -> s2 [0, 65535] { R482 += 1, R449 += 1, R450 += 1 };
  s0 -> s3 [68, 68] { R482 += 1, R450 += 1 };
  s0 -> s4 [68, 68] { R482 += 1, R450 += 1 };
  s0 -> s1 [77, 65535] { R482 += 1, R450 += 1 };
  s1 -> s1 [0, 67] { R482 += 1, R450 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R482 += 1 };
  s1 -> s3 [68, 68] { R482 += 1, R450 += 1 };
  s1 -> s4 [68, 68] { R482 += 1, R450 += 1 };
  s1 -> s1 [77, 65535] { R482 += 1, R450 += 1 };
  s2 -> s1 [0, 67] { R482 += 1, R450 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R482 += 1, R449 += 1, R450 += 1 };
  s2 -> s3 [68, 68] { R482 += 1, R450 += 1 };
  s2 -> s4 [68, 68] { R482 += 1, R450 += 1 };
  s2 -> s1 [77, 65535] { R482 += 1, R450 += 1 };
  s3 -> s3 [0, 68] { R482 += 1, R450 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R482 += 1 };
  s3 -> s3 [77, 65535] { R482 += 1, R450 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R482 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 64] { R484 += 1 };
  s0 -> s0 [0, 65535] { R483 += 1, R484 += 1 };
  s0 -> s2 [77, 77] { R484 += 1 };
  s0 -> s1 [78, 65535] { R484 += 1 };
  s1 -> s1 [0, 64] { R484 += 1 };
  s1 -> s2 [77, 77] { R484 += 1 };
  s1 -> s1 [78, 65535] { R484 += 1 };
  s2 -> s2 [0, 64] { R484 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [77, 65535] { R484 += 1 };
  accepting s2;
};
automaton value1_16 {
  init s0;
  s0 -> s0 [0, 65535] { R485 += 1, R486 += 1 };
  s0 -> s1 [0, 65535] { R486 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R486 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 76] { R488 += 1 };
  s0 -> s2 [0, 65535] { R488 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R487 += 1, R488 += 1 };
  s0 -> s3 [77, 77] { R488 += 1 };
  s0 -> s1 [78, 65535] { R488 += 1 };
  s1 -> s1 [0, 76] { R488 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [77, 77] { R488 += 1 };
  s1 -> s1 [78, 65535] { R488 += 1 };
  s2 -> s1 [0, 76] { R488 += 1 };
  s2 -> s2 [0, 65535] { R488 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [77, 77] { R488 += 1 };
  s2 -> s1 [78, 65535] { R488 += 1 };
  s3 -> s3 [0, 65535] { R488 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 8] { R490 += 1, R414 += 1 };
  s0 -> s0 [0, 65535] { R489 += 1, R490 += 1 };
  s0 -> s2 [0, 65535] { R490 += 1, R413 += 1, R414 += 1 };
  s0 -> s3 [9, 13] { R490 += 1, R414 += 1 };
  s0 -> s1 [14, 31] { R490 += 1, R414 += 1 };
  s0 -> s3 [32, 32] { R490 += 1, R414 += 1 };
  s0 -> s1 [33, 65535] { R490 += 1, R414 += 1 };
  s1 -> s1 [0, 65535] { R490 += 1, R414 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R490 += 1 };
  s2 -> s1 [0, 8] { R490 += 1, R414 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R490 += 1, R413 += 1, R414 += 1 };
  s2 -> s3 [9, 13] { R490 += 1, R414 += 1 };
  s2 -> s1 [14, 31] { R490 += 1, R414 += 1 };
  s2 -> s3 [32, 32] { R490 += 1, R414 += 1 };
  s2 -> s1 [33, 65535] { R490 += 1, R414 += 1 };
  s3 -> s1 [0, 65535] { R490 += 1, R414 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R490 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R492 += 1, R415 += 1, R416 += 1 };
  s0 -> s2 [0, 65535] { R492 += 1, R416 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R491 += 1, R492 += 1 };
  s1 -> s1 [0, 65535] { R492 += 1, R415 += 1, R416 += 1 };
  s1 -> s2 [0, 65535] { R492 += 1, R416 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R492 += 1, R416 += 1, R6 += 1 };
  s2 -> s3 [0, 65535] { R492 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R492 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 8] { R494 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R493 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R494 += 1, R417 += 1, R418 += 1 };
  s0 -> s3 [9, 13] { R494 += 1, R418 += 1 };
  s0 -> s1 [14, 31] { R494 += 1, R418 += 1 };
  s0 -> s3 [32, 32] { R494 += 1, R418 += 1 };
  s0 -> s1 [33, 65535] { R494 += 1, R418 += 1 };
  s1 -> s5 [0, 65535] { R494 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R494 += 1, R418 += 1 };
  s2 -> s1 [0, 8] { R494 += 1, R418 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R494 += 1, R417 += 1, R418 += 1 };
  s2 -> s3 [9, 13] { R494 += 1, R418 += 1 };
  s2 -> s1 [14, 31] { R494 += 1, R418 += 1 };
  s2 -> s3 [32, 32] { R494 += 1, R418 += 1 };
  s2 -> s1 [33, 65535] { R494 += 1, R418 += 1 };
  s3 -> s1 [0, 65535] { R494 += 1, R418 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R494 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 65535] { R496 += 1, R420 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R495 += 1, R496 += 1 };
  s0 -> s2 [0, 65535] { R496 += 1, R419 += 1, R420 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R496 += 1 };
  s1 -> s1 [0, 65535] { R496 += 1, R420 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R496 += 1, R420 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R496 += 1, R419 += 1, R420 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R496 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 76] { R498 += 1, R436 += 1 };
  s0 -> s0 [0, 65535] { R497 += 1, R498 += 1 };
  s0 -> s2 [0, 65535] { R498 += 1, R435 += 1, R436 += 1 };
  s0 -> s1 [78, 65535] { R498 += 1, R436 += 1 };
  s1 -> s1 [0, 76] { R498 += 1, R436 += 1 };
  s1 -> s1 [0, 65535] { R498 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R498 += 1, R436 += 1 };
  s2 -> s1 [0, 76] { R498 += 1, R436 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R498 += 1, R435 += 1, R436 += 1 };
  s2 -> s1 [78, 65535] { R498 += 1, R436 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 65535] { R500 += 1, R438 += 1, R401 += 1 };
  s0 -> s2 [0, 65535] { R500 += 1, R437 += 1, R438 += 1 };
  s0 -> s0 [0, 65535] { R499 += 1, R500 += 1 };
  s1 -> s1 [0, 65535] { R500 += 1, R438 += 1, R401 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R500 += 1 };
  s2 -> s1 [0, 65535] { R500 += 1, R438 += 1, R401 += 1 };
  s2 -> s2 [0, 65535] { R500 += 1, R437 += 1, R438 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R500 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_24 {
  init s0;
  s0 -> s1 [0, 77] { R502 += 1, R440 += 1 };
  s0 -> s0 [0, 65535] { R501 += 1, R502 += 1 };
  s0 -> s2 [0, 65535] { R502 += 1, R439 += 1, R440 += 1 };
  s0 -> s1 [91, 65535] { R502 += 1, R440 += 1 };
  s1 -> s1 [0, 77] { R502 += 1, R440 += 1 };
  s1 -> s1 [0, 65535] { R502 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R502 += 1, R440 += 1 };
  s2 -> s1 [0, 77] { R502 += 1, R440 += 1 };
  s2 -> s2 [0, 65535] { R502 += 1, R439 += 1, R440 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R502 += 1, R440 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_25 {
  init s0;
  s0 -> s1 [0, 65535] { R504 += 1, R451 += 1, R452 += 1 };
  s0 -> s0 [0, 65535] { R503 += 1, R504 += 1 };
  s0 -> s2 [0, 65535] { R504 += 1, R452 += 1, R402 += 1 };
  s1 -> s1 [0, 65535] { R504 += 1, R451 += 1, R452 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R504 += 1, R452 += 1, R402 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R504 += 1, R452 += 1, R402 += 1 };
  s2 -> s4 [0, 65535] { R504 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R504 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_26 {
  init s0;
  s0 -> s1 [0, 76] { R506 += 1, R454 += 1 };
  s0 -> s2 [0, 65535] { R506 += 1, R453 += 1, R454 += 1 };
  s0 -> s0 [0, 65535] { R505 += 1, R506 += 1 };
  s0 -> s3 [77, 77] { R506 += 1, R454 += 1 };
  s0 -> s4 [77, 77] { R506 += 1, R454 += 1 };
  s0 -> s1 [91, 65535] { R506 += 1, R454 += 1 };
  s1 -> s1 [0, 76] { R506 += 1, R454 += 1 };
  s1 -> s1 [0, 65535] { R506 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [77, 77] { R506 += 1, R454 += 1 };
  s1 -> s4 [77, 77] { R506 += 1, R454 += 1 };
  s1 -> s1 [91, 65535] { R506 += 1, R454 += 1 };
  s2 -> s1 [0, 76] { R506 += 1, R454 += 1 };
  s2 -> s2 [0, 65535] { R506 += 1, R453 += 1, R454 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R506 += 1, R454 += 1 };
  s2 -> s4 [77, 77] { R506 += 1, R454 += 1 };
  s2 -> s1 [91, 65535] { R506 += 1, R454 += 1 };
  s3 -> s3 [0, 65535] { R506 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 77] { R506 += 1, R454 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R506 += 1 };
  s4 -> s4 [91, 65535] { R506 += 1, R454 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R0 = R434 && R1 = R440 && R2 = R482 && R3 = R446 && R17 = 0 && R18 = R506 && R405 - R434 = -1 && R406 = R434 && R407 - R434 = -1 && R408 = R434 && R409 = 0 && R410 = 1 && R411 = 0 && R412 = 1 && R413 - R440 = -1 && R414 = R440 && R415 - R440 = -1 && R416 = R440 && R417 = 0 && R418 = 1 && R419 = 0 && R420 = 1 && R421 - R446 = -1 && R422 = R446 && R423 - R446 = -1 && R424 = R446 && R425 = 0 && R426 = 1 && R427 = 0 && R428 = 1 && R429 = 0 && R430 = R434 && R431 = 0 && R432 = R434 && R433 = 0 && R435 = 0 && R436 = R440 && R437 = 0 && R438 = R440 && R439 = 0 && R441 = 0 && R442 = R446 && R443 = 0 && R444 = R446 && R445 = 0 && R459 - R506 = 1 && R460 = R482 && R461 - R506 = 1 && R462 = R482 && R463 - R506 = 1 && R464 = R482 && R465 - R506 = 1 && R466 = R482 && R467 - R506 = 1 && R468 = R482 && R469 - R506 = 1 && R470 = R482 && R471 - R506 = 1 && R472 = R482 && R473 - R506 = 1 && R474 = R482 && R475 - R506 = 1 && R476 = R482 && R477 - R506 = 1 && R478 = R482 && R479 - R506 = 1 && R480 = R482 && R481 - R506 = 1 && R483 = 0 && R484 = R506 && R485 = 0 && R486 = R506 && R487 = 0 && R488 = R506 && R489 = 0 && R490 = R506 && R491 = 0 && R492 = R506 && R493 = 0 && R494 = R506 && R495 = 0 && R496 = R506 && R497 = 0 && R498 = R506 && R499 = 0 && R500 = R506 && R501 = 0 && R502 = R506 && R503 = 0 && R504 = R506 && R505 = 0 && R10 < 1 && R13 < 1 && R395 < 1 && R396 < 1 && 0 < R434 && 0 < R440 && 0 < R446 && R506 < R482 && -1 < R506 && (R400 = 0 || (R447 = 0 && R448 = 0)) && (R400 = 0 || (R449 = 0 && R450 = 0)) && (R402 = 0 || (R451 = 0 && R452 = 0)) && (R402 = 0 || (R453 = 0 && R454 = 0)) && (R404 = 0 || (R455 = 0 && R456 = 0)) && (R404 = 0 || (R457 = 0 && R458 = 0));
// End of Parikh automata intersection problem
