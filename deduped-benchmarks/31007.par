// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R2, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R16 += 1 };
  s1 -> s1 [0, 60] { R16 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R214 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s1 [91, 65535] { R214 += 1 };
  s1 -> s1 [0, 64] { R214 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R214 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s1 [0, 65535] { R216 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R216 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R218 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [9, 13] { R218 += 1, R138 += 1 };
  s0 -> s1 [14, 31] { R218 += 1, R138 += 1 };
  s0 -> s3 [32, 32] { R218 += 1, R138 += 1 };
  s0 -> s1 [33, 65535] { R218 += 1, R138 += 1 };
  s1 -> s5 [0, 65535] { R218 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R218 += 1, R138 += 1 };
  s2 -> s1 [0, 8] { R218 += 1, R138 += 1 };
  s2 -> s2 [0, 65535] { R218 += 1, R137 += 1, R138 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R218 += 1, R138 += 1 };
  s2 -> s1 [14, 31] { R218 += 1, R138 += 1 };
  s2 -> s3 [32, 32] { R218 += 1, R138 += 1 };
  s2 -> s1 [33, 65535] { R218 += 1, R138 += 1 };
  s3 -> s1 [0, 65535] { R218 += 1, R138 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R218 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R220 += 1, R139 += 1, R140 += 1 };
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R140 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R220 += 1, R139 += 1, R140 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R220 += 1, R140 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R220 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R220 += 1, R140 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R220 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R222 += 1, R142 += 1 };
  s0 -> s2 [0, 65535] { R222 += 1, R141 += 1, R142 += 1 };
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s0 -> s3 [9, 13] { R222 += 1, R142 += 1 };
  s0 -> s1 [14, 31] { R222 += 1, R142 += 1 };
  s0 -> s3 [32, 32] { R222 += 1, R142 += 1 };
  s0 -> s1 [33, 65535] { R222 += 1, R142 += 1 };
  s1 -> s5 [0, 65535] { R222 += 1 };
  s1 -> s1 [0, 65535] { R222 += 1, R142 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R222 += 1, R142 += 1 };
  s2 -> s2 [0, 65535] { R222 += 1, R141 += 1, R142 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R222 += 1, R142 += 1 };
  s2 -> s1 [14, 31] { R222 += 1, R142 += 1 };
  s2 -> s3 [32, 32] { R222 += 1, R142 += 1 };
  s2 -> s1 [33, 65535] { R222 += 1, R142 += 1 };
  s3 -> s1 [0, 65535] { R222 += 1, R142 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R222 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R224 += 1, R144 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R224 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R223 += 1, R224 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R224 += 1 };
  s1 -> s1 [0, 65535] { R224 += 1, R144 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R224 += 1, R144 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R224 += 1, R143 += 1, R144 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R224 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R230 += 1 };
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s0 -> s2 [69, 69] { R230 += 1 };
  s0 -> s1 [70, 65535] { R230 += 1 };
  s1 -> s1 [0, 64] { R230 += 1 };
  s1 -> s2 [69, 69] { R230 += 1 };
  s1 -> s1 [70, 65535] { R230 += 1 };
  s2 -> s2 [0, 64] { R230 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [69, 65535] { R230 += 1 };
  accepting s2;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R232 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R232 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 68] { R234 += 1 };
  s0 -> s2 [0, 65535] { R234 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s0 -> s3 [69, 69] { R234 += 1 };
  s0 -> s1 [70, 65535] { R234 += 1 };
  s1 -> s1 [0, 68] { R234 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [69, 69] { R234 += 1 };
  s1 -> s1 [70, 65535] { R234 += 1 };
  s2 -> s1 [0, 68] { R234 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R234 += 1, R11 += 1 };
  s2 -> s3 [69, 69] { R234 += 1 };
  s2 -> s1 [70, 65535] { R234 += 1 };
  s3 -> s3 [0, 65535] { R234 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R236 += 1, R154 += 1 };
  s0 -> s2 [0, 65535] { R236 += 1, R153 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s3 [9, 13] { R236 += 1, R154 += 1 };
  s0 -> s1 [14, 31] { R236 += 1, R154 += 1 };
  s0 -> s3 [32, 32] { R236 += 1, R154 += 1 };
  s0 -> s1 [33, 65535] { R236 += 1, R154 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R236 += 1 };
  s1 -> s1 [0, 65535] { R236 += 1, R154 += 1 };
  s2 -> s1 [0, 8] { R236 += 1, R154 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R236 += 1, R153 += 1, R154 += 1 };
  s2 -> s3 [9, 13] { R236 += 1, R154 += 1 };
  s2 -> s1 [14, 31] { R236 += 1, R154 += 1 };
  s2 -> s3 [32, 32] { R236 += 1, R154 += 1 };
  s2 -> s1 [33, 65535] { R236 += 1, R154 += 1 };
  s3 -> s1 [0, 65535] { R236 += 1, R154 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R236 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R238 += 1, R155 += 1, R156 += 1 };
  s0 -> s2 [0, 65535] { R238 += 1, R156 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s1 -> s1 [0, 65535] { R238 += 1, R155 += 1, R156 += 1 };
  s1 -> s2 [0, 65535] { R238 += 1, R156 += 1, R8 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R238 += 1 };
  s2 -> s2 [0, 65535] { R238 += 1, R156 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R238 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R240 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R240 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s3 [9, 13] { R240 += 1, R158 += 1 };
  s0 -> s1 [14, 31] { R240 += 1, R158 += 1 };
  s0 -> s3 [32, 32] { R240 += 1, R158 += 1 };
  s0 -> s1 [33, 65535] { R240 += 1, R158 += 1 };
  s1 -> s5 [0, 65535] { R240 += 1 };
  s1 -> s1 [0, 65535] { R240 += 1, R158 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R240 += 1, R158 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R240 += 1, R157 += 1, R158 += 1 };
  s2 -> s3 [9, 13] { R240 += 1, R158 += 1 };
  s2 -> s1 [14, 31] { R240 += 1, R158 += 1 };
  s2 -> s3 [32, 32] { R240 += 1, R158 += 1 };
  s2 -> s1 [33, 65535] { R240 += 1, R158 += 1 };
  s3 -> s1 [0, 65535] { R240 += 1, R158 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R240 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s0 -> s1 [0, 65535] { R242 += 1, R159 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R242 += 1, R160 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R242 += 1, R159 += 1, R160 += 1 };
  s1 -> s2 [0, 65535] { R242 += 1, R160 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R242 += 1 };
  s2 -> s2 [0, 65535] { R242 += 1, R160 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R242 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 68] { R244 += 1, R208 += 1 };
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s0 -> s2 [0, 65535] { R244 += 1, R207 += 1, R208 += 1 };
  s0 -> s1 [70, 65535] { R244 += 1, R208 += 1 };
  s1 -> s1 [0, 68] { R244 += 1, R208 += 1 };
  s1 -> s1 [0, 65535] { R244 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [70, 65535] { R244 += 1, R208 += 1 };
  s2 -> s1 [0, 68] { R244 += 1, R208 += 1 };
  s2 -> s2 [0, 65535] { R244 += 1, R207 += 1, R208 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [70, 65535] { R244 += 1, R208 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R246 += 1, R210 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R246 += 1, R209 += 1, R210 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s1 -> s1 [0, 65535] { R246 += 1, R210 += 1, R135 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R246 += 1 };
  s2 -> s1 [0, 65535] { R246 += 1, R210 += 1, R135 += 1 };
  s2 -> s2 [0, 65535] { R246 += 1, R209 += 1, R210 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R246 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 69] { R248 += 1, R212 += 1 };
  s0 -> s2 [0, 65535] { R248 += 1, R211 += 1, R212 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s1 [76, 65535] { R248 += 1, R212 += 1 };
  s1 -> s1 [0, 69] { R248 += 1, R212 += 1 };
  s1 -> s1 [0, 65535] { R248 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R248 += 1, R212 += 1 };
  s2 -> s1 [0, 69] { R248 += 1, R212 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R248 += 1, R211 += 1, R212 += 1 };
  s2 -> s1 [76, 65535] { R248 += 1, R212 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R250 += 1, R225 += 1, R226 += 1 };
  s0 -> s2 [0, 65535] { R250 += 1, R226 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s1 -> s1 [0, 65535] { R250 += 1, R225 += 1, R226 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R250 += 1, R226 += 1, R136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R250 += 1, R226 += 1, R136 += 1 };
  s2 -> s4 [0, 65535] { R250 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R250 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 68] { R252 += 1, R228 += 1 };
  s0 -> s2 [0, 65535] { R252 += 1, R227 += 1, R228 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s0 -> s3 [69, 69] { R252 += 1, R228 += 1 };
  s0 -> s4 [69, 69] { R252 += 1, R228 += 1 };
  s0 -> s5 [76, 76] { R252 += 1, R228 += 1 };
  s0 -> s1 [77, 65535] { R252 += 1, R228 += 1 };
  s1 -> s1 [0, 68] { R252 += 1, R228 += 1 };
  s1 -> s3 [69, 69] { R252 += 1, R228 += 1 };
  s1 -> s4 [69, 69] { R252 += 1, R228 += 1 };
  s1 -> s5 [76, 76] { R252 += 1, R228 += 1 };
  s1 -> s1 [77, 65535] { R252 += 1, R228 += 1 };
  s2 -> s1 [0, 68] { R252 += 1, R228 += 1 };
  s2 -> s2 [0, 65535] { R252 += 1, R227 += 1, R228 += 1 };
  s2 -> s3 [69, 69] { R252 += 1, R228 += 1 };
  s2 -> s4 [69, 69] { R252 += 1, R228 += 1 };
  s2 -> s5 [76, 76] { R252 += 1, R228 += 1 };
  s2 -> s1 [77, 65535] { R252 += 1, R228 += 1 };
  s3 -> s3 [0, 69] { R252 += 1, R228 += 1 };
  s3 -> s7 [76, 76] { R252 += 1, R228 += 1 };
  s3 -> s3 [77, 65535] { R252 += 1, R228 += 1 };
  s5 -> s5 [0, 68] { R252 += 1, R228 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R252 += 1 };
  s5 -> s7 [69, 69] { R252 += 1, R228 += 1 };
  s5 -> s8 [69, 69] { R252 += 1, R228 += 1 };
  s5 -> s5 [76, 65535] { R252 += 1, R228 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 69] { R252 += 1, R228 += 1 };
  s7 -> s7 [0, 65535] { R252 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [76, 65535] { R252 += 1, R228 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R252 += 1 };
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R146 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s2 [9, 13] { R146 += 1 };
  s0 -> s1 [14, 31] { R146 += 1 };
  s0 -> s2 [32, 32] { R146 += 1 };
  s0 -> s1 [33, 65535] { R146 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R146 += 1 };
  s2 -> s1 [0, 65535] { R146 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s0 -> s1 [0, 65535] { R148 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R148 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R150 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s0 -> s2 [9, 13] { R150 += 1 };
  s0 -> s1 [14, 31] { R150 += 1 };
  s0 -> s2 [32, 32] { R150 += 1 };
  s0 -> s1 [33, 65535] { R150 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R150 += 1 };
  s2 -> s1 [0, 65535] { R150 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R152 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s1 -> s1 [0, 65535] { R152 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining c7
automaton c7_0 {
  init s0;
  s0 -> s1 [101, 101];
  accepting s1;
};
};
constraint R2 = R212 && R3 = R252 && R15 = 0 && R16 - R251 = -1 && R153 - R212 = -1 && R154 = R212 && R155 - R212 = -1 && R156 = R212 && R157 = 0 && R158 = 1 && R159 = 0 && R160 = 1 && R207 = 0 && R208 = R212 && R209 = 0 && R210 = R212 && R211 = 0 && R213 = 0 && R214 - R251 = -1 && R215 = 0 && R216 - R251 = -1 && R217 = 0 && R218 - R251 = -1 && R219 = 0 && R220 - R251 = -1 && R221 = 0 && R222 - R251 = -1 && R223 = 0 && R224 - R251 = -1 && R227 = 0 && R228 = 0 && R229 = R251 && R230 = R252 && R231 = R251 && R232 = R252 && R233 = R251 && R234 = R252 && R235 = R251 && R236 = R252 && R237 = R251 && R238 = R252 && R239 = R251 && R240 = R252 && R241 = R251 && R242 = R252 && R243 = R251 && R244 = R252 && R245 = R251 && R246 = R252 && R247 = R251 && R248 = R252 && R249 = R251 && R250 = R252 && R0 != 0 && R1 != 0 && R10 < 1 && R11 < 1 && 0 < R212 && R251 - R252 < 1 && 0 < R251 && (R4 != 0 || ((R0 != R138 || R137 - R138 = -1 || R138 < 0) && (R0 = R138 || R0 < 1))) && (R4 != 0 || ((R0 != R140 || R139 - R140 = -1 || R140 < 0) && (R0 = R140 || R0 < 1))) && (R6 != 0 || ((R1 != R146 || R145 - R146 = -1 || R146 < 0) && (R1 = R146 || R1 < 1))) && (R6 != 0 || ((R1 != R148 || R147 - R148 = -1 || R148 < 0) && (R1 = R148 || R1 < 1))) && (R141 != 0 || ((R5 != 0 || ((R0 != R142 || R142 = 1 || R142 < 0) && (R0 = R142 || R142 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R142 || R142 = 1 || R142 < 0) && (R142 != 1 || -1 < R0) && (R0 = R142 || R142 = 1))))) && (R143 != 0 || ((R5 != 0 || ((R0 != R144 || R144 = 1 || R144 < 0) && (R0 = R144 || R144 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R144 || R144 = 1 || R144 < 0) && (R144 != 1 || -1 < R0) && (R0 = R144 || R144 = 1))))) && (R149 != 0 || ((R7 != 0 || ((R1 != R150 || R150 = 1 || R150 < 0) && (R1 = R150 || R150 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R150 || R150 = 1 || R150 < 0) && (R150 != 1 || -1 < R1) && (R1 = R150 || R150 = 1))))) && (R151 != 0 || ((R7 != 0 || ((R1 != R152 || R152 = 1 || R152 < 0) && (R1 = R152 || R152 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R152 || R152 = 1 || R152 < 0) && (R152 != 1 || -1 < R1) && (R1 = R152 || R152 = 1))))) && (R4 = 0 || (R0 = R138 && R137 - R138 = -1)) && (R4 = 0 || (R0 = R140 && R139 - R140 = -1)) && (R6 = 0 || (R1 = R146 && R145 - R146 = -1)) && (R6 = 0 || (R1 = R148 && R147 - R148 = -1)) && (R136 = 0 || (R225 = 0 && R226 = 0)) && (R141 = 0 || (R5 = 0 && R0 < 0)) && (R143 = 0 || (R5 = 0 && R0 < 0)) && (R149 = 0 || (R7 = 0 && R1 < 0)) && (R151 = 0 || (R7 = 0 && R1 < 0));
// End of Parikh automata intersection problem
