// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R12, R13, R2, R254, R255, R3, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R255 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R255 += 1 };
  s1 -> s1 [0, 60] { R255 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R255 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R407 += 1 };
  s0 -> s0 [0, 65535] { R406 += 1, R407 += 1 };
  s0 -> s1 [91, 65535] { R407 += 1 };
  s1 -> s1 [0, 64] { R407 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R407 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R408 += 1, R409 += 1 };
  s0 -> s1 [0, 65535] { R409 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R409 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R411 += 1, R377 += 1 };
  s0 -> s2 [0, 65535] { R411 += 1, R376 += 1, R377 += 1 };
  s0 -> s0 [0, 65535] { R410 += 1, R411 += 1 };
  s0 -> s3 [9, 13] { R411 += 1, R377 += 1 };
  s0 -> s1 [14, 31] { R411 += 1, R377 += 1 };
  s0 -> s3 [32, 32] { R411 += 1, R377 += 1 };
  s0 -> s1 [33, 65535] { R411 += 1, R377 += 1 };
  s1 -> s1 [0, 65535] { R411 += 1, R377 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R411 += 1 };
  s2 -> s1 [0, 8] { R411 += 1, R377 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R411 += 1, R376 += 1, R377 += 1 };
  s2 -> s3 [9, 13] { R411 += 1, R377 += 1 };
  s2 -> s1 [14, 31] { R411 += 1, R377 += 1 };
  s2 -> s3 [32, 32] { R411 += 1, R377 += 1 };
  s2 -> s1 [33, 65535] { R411 += 1, R377 += 1 };
  s3 -> s1 [0, 65535] { R411 += 1, R377 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R411 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R413 += 1, R379 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R413 += 1, R378 += 1, R379 += 1 };
  s0 -> s0 [0, 65535] { R412 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R413 += 1, R379 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R413 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R413 += 1, R379 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R413 += 1, R378 += 1, R379 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R413 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R415 += 1, R381 += 1 };
  s0 -> s2 [0, 65535] { R415 += 1, R380 += 1, R381 += 1 };
  s0 -> s0 [0, 65535] { R414 += 1, R415 += 1 };
  s0 -> s3 [9, 13] { R415 += 1, R381 += 1 };
  s0 -> s1 [14, 31] { R415 += 1, R381 += 1 };
  s0 -> s3 [32, 32] { R415 += 1, R381 += 1 };
  s0 -> s1 [33, 65535] { R415 += 1, R381 += 1 };
  s1 -> s1 [0, 65535] { R415 += 1, R381 += 1 };
  s1 -> s5 [0, 65535] { R415 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R415 += 1, R381 += 1 };
  s2 -> s2 [0, 65535] { R415 += 1, R380 += 1, R381 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R415 += 1, R381 += 1 };
  s2 -> s1 [14, 31] { R415 += 1, R381 += 1 };
  s2 -> s3 [32, 32] { R415 += 1, R381 += 1 };
  s2 -> s1 [33, 65535] { R415 += 1, R381 += 1 };
  s3 -> s1 [0, 65535] { R415 += 1, R381 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R415 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R416 += 1, R417 += 1 };
  s0 -> s1 [0, 65535] { R417 += 1, R383 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R417 += 1, R382 += 1, R383 += 1 };
  s1 -> s1 [0, 65535] { R417 += 1, R383 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R417 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R417 += 1, R383 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R417 += 1, R382 += 1, R383 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R417 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R423 += 1 };
  s0 -> s0 [0, 65535] { R422 += 1, R423 += 1 };
  s0 -> s2 [70, 70] { R423 += 1 };
  s0 -> s1 [71, 65535] { R423 += 1 };
  s1 -> s1 [0, 64] { R423 += 1 };
  s1 -> s2 [70, 70] { R423 += 1 };
  s1 -> s1 [71, 65535] { R423 += 1 };
  s2 -> s2 [0, 64] { R423 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [70, 65535] { R423 += 1 };
  accepting s2;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R424 += 1, R425 += 1 };
  s0 -> s1 [0, 65535] { R425 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R425 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 69] { R427 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R426 += 1, R427 += 1 };
  s0 -> s2 [0, 65535] { R427 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [70, 70] { R427 += 1 };
  s0 -> s1 [71, 65535] { R427 += 1, R13 += 1 };
  s1 -> s1 [0, 69] { R427 += 1, R13 += 1 };
  s1 -> s3 [70, 70] { R427 += 1 };
  s1 -> s1 [71, 65535] { R427 += 1, R13 += 1 };
  s2 -> s1 [0, 69] { R427 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R427 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [70, 70] { R427 += 1 };
  s2 -> s1 [71, 65535] { R427 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R427 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R429 += 1, R393 += 1 };
  s0 -> s0 [0, 65535] { R428 += 1, R429 += 1 };
  s0 -> s2 [0, 65535] { R429 += 1, R392 += 1, R393 += 1 };
  s0 -> s3 [9, 13] { R429 += 1, R393 += 1 };
  s0 -> s1 [14, 31] { R429 += 1, R393 += 1 };
  s0 -> s3 [32, 32] { R429 += 1, R393 += 1 };
  s0 -> s1 [33, 65535] { R429 += 1, R393 += 1 };
  s1 -> s5 [0, 65535] { R429 += 1 };
  s1 -> s1 [0, 65535] { R429 += 1, R393 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R429 += 1, R393 += 1 };
  s2 -> s2 [0, 65535] { R429 += 1, R392 += 1, R393 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R429 += 1, R393 += 1 };
  s2 -> s1 [14, 31] { R429 += 1, R393 += 1 };
  s2 -> s3 [32, 32] { R429 += 1, R393 += 1 };
  s2 -> s1 [33, 65535] { R429 += 1, R393 += 1 };
  s3 -> s1 [0, 65535] { R429 += 1, R393 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R429 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R430 += 1, R431 += 1 };
  s0 -> s1 [0, 65535] { R431 += 1, R394 += 1, R395 += 1 };
  s0 -> s2 [0, 65535] { R431 += 1, R395 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R431 += 1, R394 += 1, R395 += 1 };
  s1 -> s2 [0, 65535] { R431 += 1, R395 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R431 += 1 };
  s2 -> s2 [0, 65535] { R431 += 1, R395 += 1, R8 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R431 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R433 += 1, R397 += 1 };
  s0 -> s2 [0, 65535] { R433 += 1, R396 += 1, R397 += 1 };
  s0 -> s0 [0, 65535] { R432 += 1, R433 += 1 };
  s0 -> s3 [9, 13] { R433 += 1, R397 += 1 };
  s0 -> s1 [14, 31] { R433 += 1, R397 += 1 };
  s0 -> s3 [32, 32] { R433 += 1, R397 += 1 };
  s0 -> s1 [33, 65535] { R433 += 1, R397 += 1 };
  s1 -> s5 [0, 65535] { R433 += 1 };
  s1 -> s1 [0, 65535] { R433 += 1, R397 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R433 += 1, R397 += 1 };
  s2 -> s2 [0, 65535] { R433 += 1, R396 += 1, R397 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R433 += 1, R397 += 1 };
  s2 -> s1 [14, 31] { R433 += 1, R397 += 1 };
  s2 -> s3 [32, 32] { R433 += 1, R397 += 1 };
  s2 -> s1 [33, 65535] { R433 += 1, R397 += 1 };
  s3 -> s1 [0, 65535] { R433 += 1, R397 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R433 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R434 += 1, R435 += 1 };
  s0 -> s1 [0, 65535] { R435 += 1, R398 += 1, R399 += 1 };
  s0 -> s2 [0, 65535] { R435 += 1, R399 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R435 += 1, R398 += 1, R399 += 1 };
  s1 -> s2 [0, 65535] { R435 += 1, R399 += 1, R9 += 1 };
  s2 -> s3 [0, 65535] { R435 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R435 += 1, R399 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R435 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 69] { R437 += 1, R401 += 1 };
  s0 -> s0 [0, 65535] { R436 += 1, R437 += 1 };
  s0 -> s2 [0, 65535] { R437 += 1, R400 += 1, R401 += 1 };
  s0 -> s1 [71, 65535] { R437 += 1, R401 += 1 };
  s1 -> s1 [0, 69] { R437 += 1, R401 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R437 += 1 };
  s1 -> s1 [71, 65535] { R437 += 1, R401 += 1 };
  s2 -> s1 [0, 69] { R437 += 1, R401 += 1 };
  s2 -> s2 [0, 65535] { R437 += 1, R400 += 1, R401 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R437 += 1, R401 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_17 {
  init s0;
  s0 -> s0 [0, 65535] { R438 += 1, R439 += 1 };
  s0 -> s1 [0, 65535] { R439 += 1, R402 += 1, R403 += 1 };
  s0 -> s2 [0, 65535] { R439 += 1, R403 += 1, R374 += 1 };
  s1 -> s1 [0, 65535] { R439 += 1, R402 += 1, R403 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R439 += 1, R403 += 1, R374 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R439 += 1 };
  s2 -> s2 [0, 65535] { R439 += 1, R403 += 1, R374 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R439 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 70] { R441 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R441 += 1, R404 += 1, R405 += 1 };
  s0 -> s0 [0, 65535] { R440 += 1, R441 += 1 };
  s0 -> s3 [84, 84] { R441 += 1, R405 += 1 };
  s0 -> s1 [85, 65535] { R441 += 1, R405 += 1 };
  s1 -> s1 [0, 70] { R441 += 1, R405 += 1 };
  s1 -> s3 [84, 84] { R441 += 1, R405 += 1 };
  s1 -> s1 [85, 65535] { R441 += 1, R405 += 1 };
  s2 -> s1 [0, 70] { R441 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R441 += 1, R404 += 1, R405 += 1 };
  s2 -> s3 [84, 84] { R441 += 1, R405 += 1 };
  s2 -> s1 [85, 65535] { R441 += 1, R405 += 1 };
  s3 -> s3 [0, 70] { R441 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R441 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [84, 65535] { R441 += 1, R405 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_19 {
  init s0;
  s0 -> s0 [0, 65535] { R442 += 1, R443 += 1 };
  s0 -> s1 [0, 65535] { R443 += 1, R418 += 1, R419 += 1 };
  s0 -> s2 [0, 65535] { R443 += 1, R419 += 1, R375 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R443 += 1, R418 += 1, R419 += 1 };
  s1 -> s2 [0, 65535] { R443 += 1, R419 += 1, R375 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R443 += 1 };
  s2 -> s2 [0, 65535] { R443 += 1, R419 += 1, R375 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R443 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 69] { R445 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R444 += 1, R445 += 1 };
  s0 -> s2 [0, 65535] { R445 += 1, R420 += 1, R421 += 1 };
  s0 -> s3 [70, 70] { R445 += 1, R421 += 1 };
  s0 -> s4 [70, 70] { R445 += 1, R421 += 1 };
  s0 -> s1 [85, 65535] { R445 += 1, R421 += 1 };
  s1 -> s1 [0, 69] { R445 += 1, R421 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R445 += 1 };
  s1 -> s3 [70, 70] { R445 += 1, R421 += 1 };
  s1 -> s4 [70, 70] { R445 += 1, R421 += 1 };
  s1 -> s1 [85, 65535] { R445 += 1, R421 += 1 };
  s2 -> s1 [0, 69] { R445 += 1, R421 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R445 += 1, R420 += 1, R421 += 1 };
  s2 -> s3 [70, 70] { R445 += 1, R421 += 1 };
  s2 -> s4 [70, 70] { R445 += 1, R421 += 1 };
  s2 -> s1 [85, 65535] { R445 += 1, R421 += 1 };
  s3 -> s3 [0, 70] { R445 += 1, R421 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R445 += 1 };
  s3 -> s3 [85, 65535] { R445 += 1, R421 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R445 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R385 += 1 };
  s0 -> s0 [0, 65535] { R384 += 1, R385 += 1 };
  s0 -> s2 [9, 13] { R385 += 1 };
  s0 -> s1 [14, 31] { R385 += 1 };
  s0 -> s2 [32, 32] { R385 += 1 };
  s0 -> s1 [33, 65535] { R385 += 1 };
  s1 -> s1 [0, 65535] { R385 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R385 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R387 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R386 += 1, R387 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R387 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R389 += 1 };
  s0 -> s0 [0, 65535] { R388 += 1, R389 += 1 };
  s0 -> s2 [9, 13] { R389 += 1 };
  s0 -> s1 [14, 31] { R389 += 1 };
  s0 -> s2 [32, 32] { R389 += 1 };
  s0 -> s1 [33, 65535] { R389 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R389 += 1 };
  s2 -> s1 [0, 65535] { R389 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R390 += 1, R391 += 1 };
  s0 -> s1 [0, 65535] { R391 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R391 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R405 && R3 = R445 && R12 = 0 && R13 - R404 = -1 && R254 = 0 && R255 - R444 = -1 && R392 - R405 = -1 && R393 = R405 && R394 - R405 = -1 && R395 = R405 && R396 = 0 && R397 = 1 && R398 = 0 && R399 = 1 && R406 = 0 && R407 - R444 = -1 && R408 = 0 && R409 - R444 = -1 && R410 = 0 && R411 - R444 = -1 && R412 = 0 && R413 - R444 = -1 && R414 = 0 && R415 - R444 = -1 && R416 = 0 && R417 - R444 = -1 && R422 = R444 && R423 = R445 && R424 = R444 && R425 = R445 && R426 = R444 && R427 = R445 && R428 = R444 && R429 = R445 && R430 = R444 && R431 = R445 && R432 = R444 && R433 = R445 && R434 = R444 && R435 = R445 && R436 = R444 && R437 = R445 && R438 = R444 && R439 = R445 && R440 = R444 && R441 = R445 && R442 = R444 && R443 = R445 && R0 != 0 && R1 != 0 && R10 < 1 && R404 - R405 < 1 && -1 < R404 && 0 < R405 && R444 - R445 < 1 && 0 < R444 && (R4 != 0 || ((R0 != R377 || R376 - R377 = -1 || R377 < 0) && (R0 = R377 || R0 < 1))) && (R4 != 0 || ((R0 != R379 || R378 - R379 = -1 || R379 < 0) && (R0 = R379 || R0 < 1))) && (R6 != 0 || ((R1 != R385 || R384 - R385 = -1 || R385 < 0) && (R1 = R385 || R1 < 1))) && (R6 != 0 || ((R1 != R387 || R386 - R387 = -1 || R387 < 0) && (R1 = R387 || R1 < 1))) && (R380 != 0 || ((R5 != 0 || ((R0 != R381 || R381 = 1 || R381 < 0) && (R0 = R381 || R381 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R381 || R381 = 1 || R381 < 0) && (R381 != 1 || -1 < R0) && (R0 = R381 || R381 = 1))))) && (R382 != 0 || ((R5 != 0 || ((R0 != R383 || R383 = 1 || R383 < 0) && (R0 = R383 || R383 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R383 || R383 = 1 || R383 < 0) && (R383 != 1 || -1 < R0) && (R0 = R383 || R383 = 1))))) && (R388 != 0 || ((R7 != 0 || ((R1 != R389 || R389 = 1 || R389 < 0) && (R1 = R389 || R389 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R389 || R389 = 1 || R389 < 0) && (R389 != 1 || -1 < R1) && (R1 = R389 || R389 = 1))))) && (R390 != 0 || ((R7 != 0 || ((R1 != R391 || R391 = 1 || R391 < 0) && (R1 = R391 || R391 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R391 || R391 = 1 || R391 < 0) && (R391 != 1 || -1 < R1) && (R1 = R391 || R391 = 1))))) && (R400 != R404 || R401 = R405 || (R374 = 0 && R404 = R405)) && (R402 != R404 || R403 = R405 || (R374 = 0 && R404 = R405)) && (R418 != 0 || R404 = R419 || (R375 = 0 && R404 = 0)) && (R420 != 0 || R404 = R421 || (R375 = 0 && R404 = 0)) && (R4 = 0 || (R0 = R377 && R376 - R377 = -1)) && (R4 = 0 || (R0 = R379 && R378 - R379 = -1)) && (R6 = 0 || (R1 = R385 && R384 - R385 = -1)) && (R6 = 0 || (R1 = R387 && R386 - R387 = -1)) && (R380 = 0 || (R5 = 0 && R0 < 0)) && (R382 = 0 || (R5 = 0 && R0 < 0)) && (R388 = 0 || (R7 = 0 && R1 < 0)) && (R390 = 0 || (R7 = 0 && R1 < 0)) && (R400 = R404 || (R374 = 0 && R404 = R405)) && (R402 = R404 || (R374 = 0 && R404 = R405)) && (R418 = 0 || (R375 = 0 && R404 = 0)) && (R420 = 0 || (R375 = 0 && R404 = 0));
// End of Parikh automata intersection problem
