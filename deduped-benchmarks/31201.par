// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R13, R14, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R14 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R14 += 1 };
  s1 -> s1 [0, 60] { R14 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R122 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535] { R122 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R168 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s2 [68, 68] { R168 += 1 };
  s0 -> s1 [69, 65535] { R168 += 1 };
  s1 -> s1 [0, 64] { R168 += 1 };
  s1 -> s2 [68, 68] { R168 += 1 };
  s1 -> s1 [69, 65535] { R168 += 1 };
  s2 -> s2 [0, 64] { R168 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R168 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s1 [0, 65535] { R170 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R170 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 67] { R172 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s3 [68, 68] { R172 += 1 };
  s0 -> s1 [69, 65535] { R172 += 1 };
  s1 -> s1 [0, 67] { R172 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R172 += 1 };
  s1 -> s1 [69, 65535] { R172 += 1 };
  s2 -> s1 [0, 67] { R172 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R172 += 1, R9 += 1 };
  s2 -> s3 [68, 68] { R172 += 1 };
  s2 -> s1 [69, 65535] { R172 += 1 };
  s3 -> s3 [0, 65535] { R172 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R174 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [9, 13] { R174 += 1, R114 += 1 };
  s0 -> s1 [14, 31] { R174 += 1, R114 += 1 };
  s0 -> s3 [32, 32] { R174 += 1, R114 += 1 };
  s0 -> s1 [33, 65535] { R174 += 1, R114 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R174 += 1 };
  s1 -> s1 [0, 65535] { R174 += 1, R114 += 1 };
  s2 -> s1 [0, 8] { R174 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R174 += 1, R113 += 1, R114 += 1 };
  s2 -> s3 [9, 13] { R174 += 1, R114 += 1 };
  s2 -> s1 [14, 31] { R174 += 1, R114 += 1 };
  s2 -> s3 [32, 32] { R174 += 1, R114 += 1 };
  s2 -> s1 [33, 65535] { R174 += 1, R114 += 1 };
  s3 -> s1 [0, 65535] { R174 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R174 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R176 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R116 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1, R115 += 1, R116 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R176 += 1, R116 += 1, R6 += 1 };
  s2 -> s3 [0, 65535] { R176 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R176 += 1, R116 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R176 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R178 += 1, R118 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s3 [9, 13] { R178 += 1, R118 += 1 };
  s0 -> s1 [14, 31] { R178 += 1, R118 += 1 };
  s0 -> s3 [32, 32] { R178 += 1, R118 += 1 };
  s0 -> s1 [33, 65535] { R178 += 1, R118 += 1 };
  s1 -> s5 [0, 65535] { R178 += 1 };
  s1 -> s1 [0, 65535] { R178 += 1, R118 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R178 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R178 += 1, R117 += 1, R118 += 1 };
  s2 -> s3 [9, 13] { R178 += 1, R118 += 1 };
  s2 -> s1 [14, 31] { R178 += 1, R118 += 1 };
  s2 -> s3 [32, 32] { R178 += 1, R118 += 1 };
  s2 -> s1 [33, 65535] { R178 += 1, R118 += 1 };
  s3 -> s1 [0, 65535] { R178 += 1, R118 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R178 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R180 += 1, R120 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R119 += 1, R120 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1, R120 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R180 += 1 };
  s2 -> s1 [0, 65535] { R180 += 1, R120 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R180 += 1, R119 += 1, R120 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R180 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 67] { R182 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R157 += 1, R158 += 1 };
  s0 -> s1 [69, 65535] { R182 += 1, R158 += 1 };
  s1 -> s1 [0, 67] { R182 += 1, R158 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R182 += 1 };
  s1 -> s1 [69, 65535] { R182 += 1, R158 += 1 };
  s2 -> s1 [0, 67] { R182 += 1, R158 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R182 += 1, R157 += 1, R158 += 1 };
  s2 -> s1 [69, 65535] { R182 += 1, R158 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R184 += 1, R160 += 1, R103 += 1 };
  s0 -> s2 [0, 65535] { R184 += 1, R159 += 1, R160 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R184 += 1, R160 += 1, R103 += 1 };
  s1 -> s4 [0, 65535] { R184 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R184 += 1, R160 += 1, R103 += 1 };
  s2 -> s2 [0, 65535] { R184 += 1, R159 += 1, R160 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R184 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 68] { R186 += 1, R162 += 1 };
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s2 [0, 65535] { R186 += 1, R161 += 1, R162 += 1 };
  s0 -> s1 [77, 65535] { R186 += 1, R162 += 1 };
  s1 -> s1 [0, 68] { R186 += 1, R162 += 1 };
  s1 -> s1 [0, 65535] { R186 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R186 += 1, R162 += 1 };
  s2 -> s1 [0, 68] { R186 += 1, R162 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R186 += 1, R161 += 1, R162 += 1 };
  s2 -> s1 [77, 65535] { R186 += 1, R162 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_14 {
  init s0;
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s1 [0, 65535] { R188 += 1, R164 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R188 += 1, R163 += 1, R164 += 1 };
  s1 -> s4 [0, 65535] { R188 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R188 += 1, R164 += 1, R104 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R188 += 1, R164 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R188 += 1, R163 += 1, R164 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R188 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 67] { R190 += 1, R166 += 1 };
  s0 -> s2 [0, 65535] { R190 += 1, R165 += 1, R166 += 1 };
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s3 [68, 68] { R190 += 1, R166 += 1 };
  s0 -> s4 [68, 68] { R190 += 1, R166 += 1 };
  s0 -> s5 [77, 77] { R190 += 1, R166 += 1 };
  s0 -> s1 [78, 65535] { R190 += 1, R166 += 1 };
  s1 -> s1 [0, 67] { R190 += 1, R166 += 1 };
  s1 -> s3 [68, 68] { R190 += 1, R166 += 1 };
  s1 -> s4 [68, 68] { R190 += 1, R166 += 1 };
  s1 -> s5 [77, 77] { R190 += 1, R166 += 1 };
  s1 -> s1 [78, 65535] { R190 += 1, R166 += 1 };
  s2 -> s1 [0, 67] { R190 += 1, R166 += 1 };
  s2 -> s2 [0, 65535] { R190 += 1, R165 += 1, R166 += 1 };
  s2 -> s3 [68, 68] { R190 += 1, R166 += 1 };
  s2 -> s4 [68, 68] { R190 += 1, R166 += 1 };
  s2 -> s5 [77, 77] { R190 += 1, R166 += 1 };
  s2 -> s1 [78, 65535] { R190 += 1, R166 += 1 };
  s3 -> s3 [0, 68] { R190 += 1, R166 += 1 };
  s3 -> s7 [77, 77] { R190 += 1, R166 += 1 };
  s3 -> s3 [78, 65535] { R190 += 1, R166 += 1 };
  s5 -> s5 [0, 67] { R190 += 1, R166 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R190 += 1 };
  s5 -> s7 [68, 68] { R190 += 1, R166 += 1 };
  s5 -> s8 [68, 68] { R190 += 1, R166 += 1 };
  s5 -> s5 [77, 65535] { R190 += 1, R166 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 68] { R190 += 1, R166 += 1 };
  s7 -> s7 [0, 65535] { R190 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R190 += 1, R166 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R190 += 1 };
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R8 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R106 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s2 [9, 13] { R106 += 1 };
  s0 -> s1 [14, 31] { R106 += 1 };
  s0 -> s2 [32, 32] { R106 += 1 };
  s0 -> s1 [33, 65535] { R106 += 1 };
  s1 -> s1 [0, 65535] { R106 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R106 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R108 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R110 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [9, 13] { R110 += 1 };
  s0 -> s1 [14, 31] { R110 += 1 };
  s0 -> s2 [32, 32] { R110 += 1 };
  s0 -> s1 [33, 65535] { R110 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R110 += 1 };
  s2 -> s1 [0, 65535] { R110 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s1 [0, 65535] { R112 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R162 && R3 = R122 && R13 = 0 && R14 = R190 && R113 - R162 = -1 && R114 = R162 && R115 - R162 = -1 && R116 = R162 && R117 = 0 && R118 = 1 && R119 = 0 && R120 = 1 && R121 - R190 = 1 && R157 = 0 && R158 = R162 && R159 = 0 && R160 = R162 && R161 = 0 && R165 = 0 && R166 = 0 && R167 = 0 && R168 = R190 && R169 = 0 && R170 = R190 && R171 = 0 && R172 = R190 && R173 = 0 && R174 = R190 && R175 = 0 && R176 = R190 && R177 = 0 && R178 = R190 && R179 = 0 && R180 = R190 && R181 = 0 && R182 = R190 && R183 = 0 && R184 = R190 && R185 = 0 && R186 = R190 && R187 = 0 && R188 = R190 && R189 = 0 && R0 != 0 && R1 != 0 && R8 < 1 && R9 < 1 && R190 < R122 && 0 < R162 && -1 < R190 && (R4 != 0 || ((R1 != R106 || R105 - R106 = -1 || R106 < 0) && (R1 = R106 || R1 < 1))) && (R4 != 0 || ((R1 != R108 || R107 - R108 = -1 || R108 < 0) && (R1 = R108 || R1 < 1))) && (R109 != 0 || ((R5 != 0 || ((R1 != R110 || R110 = 1 || R110 < 0) && (R1 = R110 || R110 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R110 || R110 = 1 || R110 < 0) && (R110 != 1 || -1 < R1) && (R1 = R110 || R110 = 1))))) && (R111 != 0 || ((R5 != 0 || ((R1 != R112 || R112 = 1 || R112 < 0) && (R1 = R112 || R112 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R112 || R112 = 1 || R112 < 0) && (R112 != 1 || -1 < R1) && (R1 = R112 || R112 = 1))))) && (R4 = 0 || (R1 = R106 && R105 - R106 = -1)) && (R4 = 0 || (R1 = R108 && R107 - R108 = -1)) && (R104 = 0 || (R163 = 0 && R164 = 0)) && (R109 = 0 || (R5 = 0 && R1 < 0)) && (R111 = 0 || (R5 = 0 && R1 < 0));
// End of Parikh automata intersection problem
