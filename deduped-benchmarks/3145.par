// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R2, R3, R4, R6, R7, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P5
automaton P5_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R91 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s1 [12, 12] { R103 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R105 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R105 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R151 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s2 [76, 76] { R151 += 1 };
  s0 -> s1 [77, 65535] { R151 += 1 };
  s1 -> s1 [0, 64] { R151 += 1 };
  s1 -> s2 [76, 76] { R151 += 1 };
  s1 -> s1 [77, 65535] { R151 += 1 };
  s2 -> s2 [0, 64] { R151 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R151 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s1 [0, 65535] { R153 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R153 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 75] { R155 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [76, 76] { R155 += 1 };
  s0 -> s1 [77, 65535] { R155 += 1, R7 += 1 };
  s1 -> s1 [0, 75] { R155 += 1, R7 += 1 };
  s1 -> s3 [76, 76] { R155 += 1 };
  s1 -> s1 [77, 65535] { R155 += 1, R7 += 1 };
  s2 -> s1 [0, 75] { R155 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R155 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [76, 76] { R155 += 1 };
  s2 -> s1 [77, 65535] { R155 += 1, R7 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R155 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R157 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R157 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s3 [9, 13] { R157 += 1, R95 += 1 };
  s0 -> s1 [14, 31] { R157 += 1, R95 += 1 };
  s0 -> s3 [32, 32] { R157 += 1, R95 += 1 };
  s0 -> s1 [33, 65535] { R157 += 1, R95 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R157 += 1 };
  s1 -> s1 [0, 65535] { R157 += 1, R95 += 1 };
  s2 -> s1 [0, 8] { R157 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R157 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R157 += 1, R95 += 1 };
  s2 -> s1 [14, 31] { R157 += 1, R95 += 1 };
  s2 -> s3 [32, 32] { R157 += 1, R95 += 1 };
  s2 -> s1 [33, 65535] { R157 += 1, R95 += 1 };
  s3 -> s1 [0, 65535] { R157 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R157 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s0 -> s1 [0, 65535] { R159 += 1, R97 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R159 += 1, R96 += 1, R97 += 1 };
  s1 -> s4 [0, 65535] { R159 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R159 += 1, R97 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R159 += 1, R97 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R159 += 1, R96 += 1, R97 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R159 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R161 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R161 += 1, R98 += 1, R99 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s3 [9, 13] { R161 += 1, R99 += 1 };
  s0 -> s1 [14, 31] { R161 += 1, R99 += 1 };
  s0 -> s3 [32, 32] { R161 += 1, R99 += 1 };
  s0 -> s1 [33, 65535] { R161 += 1, R99 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R161 += 1 };
  s1 -> s1 [0, 65535] { R161 += 1, R99 += 1 };
  s2 -> s1 [0, 8] { R161 += 1, R99 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R161 += 1, R98 += 1, R99 += 1 };
  s2 -> s3 [9, 13] { R161 += 1, R99 += 1 };
  s2 -> s1 [14, 31] { R161 += 1, R99 += 1 };
  s2 -> s3 [32, 32] { R161 += 1, R99 += 1 };
  s2 -> s1 [33, 65535] { R161 += 1, R99 += 1 };
  s3 -> s1 [0, 65535] { R161 += 1, R99 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R161 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R163 += 1, R101 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R163 += 1, R100 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s1 -> s1 [0, 65535] { R163 += 1, R101 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R163 += 1 };
  s2 -> s1 [0, 65535] { R163 += 1, R101 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R163 += 1, R100 += 1, R101 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R163 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R165 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s2 [0, 65535] { R165 += 1, R140 += 1, R141 += 1 };
  s0 -> s1 [77, 65535] { R165 += 1, R141 += 1 };
  s1 -> s1 [0, 75] { R165 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R165 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R165 += 1, R141 += 1 };
  s2 -> s1 [0, 75] { R165 += 1, R141 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R165 += 1, R140 += 1, R141 += 1 };
  s2 -> s1 [77, 65535] { R165 += 1, R141 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R167 += 1, R143 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R167 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s1 -> s4 [0, 65535] { R167 += 1 };
  s1 -> s1 [0, 65535] { R167 += 1, R143 += 1, R92 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R167 += 1, R143 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R167 += 1, R142 += 1, R143 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R167 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R169 += 1, R144 += 1, R145 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R145 += 1 };
  s1 -> s1 [0, 65535] { R169 += 1, R144 += 1, R145 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R169 += 1, R145 += 1 };
  s2 -> s3 [0, 65535] { R169 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R169 += 1, R145 += 1 };
  s3 -> s3 [0, 65535] { R169 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R171 += 1, R147 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R146 += 1, R147 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R171 += 1, R147 += 1, R93 += 1 };
  s1 -> s4 [0, 65535] { R171 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R171 += 1, R147 += 1, R93 += 1 };
  s2 -> s2 [0, 65535] { R171 += 1, R146 += 1, R147 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R171 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R173 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [76, 76] { R173 += 1, R149 += 1 };
  s0 -> s4 [76, 76] { R173 += 1, R149 += 1 };
  s0 -> s5 [77, 77] { R173 += 1, R149 += 1 };
  s0 -> s1 [78, 65535] { R173 += 1, R149 += 1 };
  s1 -> s1 [0, 75] { R173 += 1, R149 += 1 };
  s1 -> s3 [76, 76] { R173 += 1, R149 += 1 };
  s1 -> s4 [76, 76] { R173 += 1, R149 += 1 };
  s1 -> s5 [77, 77] { R173 += 1, R149 += 1 };
  s1 -> s1 [78, 65535] { R173 += 1, R149 += 1 };
  s2 -> s1 [0, 75] { R173 += 1, R149 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R148 += 1, R149 += 1 };
  s2 -> s3 [76, 76] { R173 += 1, R149 += 1 };
  s2 -> s4 [76, 76] { R173 += 1, R149 += 1 };
  s2 -> s5 [77, 77] { R173 += 1, R149 += 1 };
  s2 -> s1 [78, 65535] { R173 += 1, R149 += 1 };
  s4 -> s4 [0, 76] { R173 += 1, R149 += 1 };
  s4 -> s8 [77, 77] { R173 += 1, R149 += 1 };
  s4 -> s4 [78, 65535] { R173 += 1, R149 += 1 };
  s5 -> s5 [0, 75] { R173 += 1, R149 += 1 };
  s5 -> s5 [0, 65535] { R173 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [76, 76] { R173 += 1, R149 += 1 };
  s5 -> s8 [76, 76] { R173 += 1, R149 += 1 };
  s5 -> s5 [77, 65535] { R173 += 1, R149 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R173 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R173 += 1 };
  s8 -> s8 [0, 65535] { R173 += 1, R149 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R173 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
};
constraint R0 = R97 && R1 = R173 && R6 = 0 && R7 - R149 = -1 && R94 - R97 = -1 && R95 = R97 && R96 - R97 = -1 && R98 = 0 && R99 = 1 && R100 = 0 && R101 = 1 && R102 = 0 && R103 = 1 && R104 = 0 && R105 = 1 && R148 = 0 && R150 = 1 && R151 = R173 && R152 = 1 && R153 = R173 && R154 = 1 && R155 = R173 && R156 = 1 && R157 = R173 && R158 = 1 && R159 = R173 && R160 = 1 && R161 = R173 && R162 = 1 && R163 = R173 && R164 = 1 && R165 = R173 && R166 = 1 && R167 = R173 && R168 = 1 && R169 = R173 && R170 = 1 && R171 = R173 && R172 = 1 && R91 < 1 && R149 - R97 < 1 && 0 < R97 && -1 < R149 && 0 < R173 && (R97 != R141 || R140 = R149 || ((R92 != 0 || R141 - R149 < 1 || R141 < 1) && (R92 = 0 || R141 < R149 || R141 < 1))) && (R97 != R143 || R142 = R149 || ((R92 != 0 || R143 - R149 < 1 || R143 < 1) && (R92 = 0 || R143 < R149 || R143 < 1))) && (R97 != R145 || R144 = R149 || ((R92 != 0 || R145 - R149 < 1 || R145 < 1) && (R92 = 0 || R145 < R149 || R145 < 1))) && (R146 != 0 || R147 = R149 || (R93 = 0 && R149 = 0)) && (R97 = R141 || (R92 = 0 && R97 = R149)) && (R97 = R143 || (R92 = 0 && R97 = R149)) && (R97 = R145 || (R92 = 0 && R97 = R149)) && (R146 = 0 || (R93 = 0 && R149 = 0));
// End of Parikh automata intersection problem
