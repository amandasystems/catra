// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R12, R13, R162, R163, R2, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R163 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R163 += 1 };
  s1 -> s1 [0, 60] { R163 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R163 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R269 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s0 -> s2 [70, 70] { R269 += 1 };
  s0 -> s1 [71, 65535] { R269 += 1 };
  s1 -> s1 [0, 64] { R269 += 1 };
  s1 -> s2 [70, 70] { R269 += 1 };
  s1 -> s1 [71, 65535] { R269 += 1 };
  s2 -> s2 [0, 64] { R269 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [70, 65535] { R269 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R271 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R271 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R273 += 1, R239 += 1 };
  s0 -> s2 [0, 65535] { R273 += 1, R238 += 1, R239 += 1 };
  s0 -> s0 [0, 65535] { R272 += 1, R273 += 1 };
  s0 -> s3 [9, 13] { R273 += 1, R239 += 1 };
  s0 -> s1 [14, 31] { R273 += 1, R239 += 1 };
  s0 -> s3 [32, 32] { R273 += 1, R239 += 1 };
  s0 -> s1 [33, 65535] { R273 += 1, R239 += 1 };
  s1 -> s5 [0, 65535] { R273 += 1 };
  s1 -> s1 [0, 65535] { R273 += 1, R239 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R273 += 1, R239 += 1 };
  s2 -> s2 [0, 65535] { R273 += 1, R238 += 1, R239 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R273 += 1, R239 += 1 };
  s2 -> s1 [14, 31] { R273 += 1, R239 += 1 };
  s2 -> s3 [32, 32] { R273 += 1, R239 += 1 };
  s2 -> s1 [33, 65535] { R273 += 1, R239 += 1 };
  s3 -> s1 [0, 65535] { R273 += 1, R239 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R273 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R274 += 1, R275 += 1 };
  s0 -> s1 [0, 65535] { R275 += 1, R241 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R275 += 1, R240 += 1, R241 += 1 };
  s1 -> s4 [0, 65535] { R275 += 1 };
  s1 -> s1 [0, 65535] { R275 += 1, R241 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R275 += 1, R241 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R275 += 1, R240 += 1, R241 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R275 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R277 += 1, R243 += 1 };
  s0 -> s2 [0, 65535] { R277 += 1, R242 += 1, R243 += 1 };
  s0 -> s0 [0, 65535] { R276 += 1, R277 += 1 };
  s0 -> s3 [9, 13] { R277 += 1, R243 += 1 };
  s0 -> s1 [14, 31] { R277 += 1, R243 += 1 };
  s0 -> s3 [32, 32] { R277 += 1, R243 += 1 };
  s0 -> s1 [33, 65535] { R277 += 1, R243 += 1 };
  s1 -> s1 [0, 65535] { R277 += 1, R243 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R277 += 1 };
  s2 -> s1 [0, 8] { R277 += 1, R243 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R277 += 1, R242 += 1, R243 += 1 };
  s2 -> s3 [9, 13] { R277 += 1, R243 += 1 };
  s2 -> s1 [14, 31] { R277 += 1, R243 += 1 };
  s2 -> s3 [32, 32] { R277 += 1, R243 += 1 };
  s2 -> s1 [33, 65535] { R277 += 1, R243 += 1 };
  s3 -> s1 [0, 65535] { R277 += 1, R243 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R277 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R279 += 1, R244 += 1, R245 += 1 };
  s0 -> s0 [0, 65535] { R278 += 1, R279 += 1 };
  s0 -> s2 [0, 65535] { R279 += 1, R245 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R279 += 1, R244 += 1, R245 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R279 += 1, R245 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R279 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R279 += 1, R245 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R279 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R285 += 1 };
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s0 -> s2 [66, 66] { R285 += 1 };
  s0 -> s1 [67, 65535] { R285 += 1 };
  s1 -> s1 [0, 64] { R285 += 1 };
  s1 -> s2 [66, 66] { R285 += 1 };
  s1 -> s1 [67, 65535] { R285 += 1 };
  s2 -> s2 [0, 64] { R285 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R285 += 1 };
  accepting s2;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s0 -> s1 [0, 65535] { R287 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R287 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65] { R289 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s2 [0, 65535] { R289 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [66, 66] { R289 += 1 };
  s0 -> s1 [67, 65535] { R289 += 1, R13 += 1 };
  s1 -> s1 [0, 65] { R289 += 1, R13 += 1 };
  s1 -> s3 [66, 66] { R289 += 1 };
  s1 -> s1 [67, 65535] { R289 += 1, R13 += 1 };
  s2 -> s1 [0, 65] { R289 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R289 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [66, 66] { R289 += 1 };
  s2 -> s1 [67, 65535] { R289 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R289 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R291 += 1, R255 += 1 };
  s0 -> s0 [0, 65535] { R290 += 1, R291 += 1 };
  s0 -> s2 [0, 65535] { R291 += 1, R254 += 1, R255 += 1 };
  s0 -> s3 [9, 13] { R291 += 1, R255 += 1 };
  s0 -> s1 [14, 31] { R291 += 1, R255 += 1 };
  s0 -> s3 [32, 32] { R291 += 1, R255 += 1 };
  s0 -> s1 [33, 65535] { R291 += 1, R255 += 1 };
  s1 -> s5 [0, 65535] { R291 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R291 += 1, R255 += 1 };
  s2 -> s1 [0, 8] { R291 += 1, R255 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R291 += 1, R254 += 1, R255 += 1 };
  s2 -> s3 [9, 13] { R291 += 1, R255 += 1 };
  s2 -> s1 [14, 31] { R291 += 1, R255 += 1 };
  s2 -> s3 [32, 32] { R291 += 1, R255 += 1 };
  s2 -> s1 [33, 65535] { R291 += 1, R255 += 1 };
  s3 -> s1 [0, 65535] { R291 += 1, R255 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R291 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R293 += 1, R257 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R292 += 1, R293 += 1 };
  s0 -> s2 [0, 65535] { R293 += 1, R256 += 1, R257 += 1 };
  s1 -> s4 [0, 65535] { R293 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R293 += 1, R257 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R293 += 1, R257 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R293 += 1, R256 += 1, R257 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R293 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R295 += 1, R259 += 1 };
  s0 -> s0 [0, 65535] { R294 += 1, R295 += 1 };
  s0 -> s2 [0, 65535] { R295 += 1, R258 += 1, R259 += 1 };
  s0 -> s3 [9, 13] { R295 += 1, R259 += 1 };
  s0 -> s1 [14, 31] { R295 += 1, R259 += 1 };
  s0 -> s3 [32, 32] { R295 += 1, R259 += 1 };
  s0 -> s1 [33, 65535] { R295 += 1, R259 += 1 };
  s1 -> s5 [0, 65535] { R295 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R295 += 1, R259 += 1 };
  s2 -> s1 [0, 8] { R295 += 1, R259 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R295 += 1, R258 += 1, R259 += 1 };
  s2 -> s3 [9, 13] { R295 += 1, R259 += 1 };
  s2 -> s1 [14, 31] { R295 += 1, R259 += 1 };
  s2 -> s3 [32, 32] { R295 += 1, R259 += 1 };
  s2 -> s1 [33, 65535] { R295 += 1, R259 += 1 };
  s3 -> s1 [0, 65535] { R295 += 1, R259 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R295 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R297 += 1, R260 += 1, R261 += 1 };
  s0 -> s0 [0, 65535] { R296 += 1, R297 += 1 };
  s0 -> s2 [0, 65535] { R297 += 1, R261 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R297 += 1, R260 += 1, R261 += 1 };
  s1 -> s2 [0, 65535] { R297 += 1, R261 += 1, R9 += 1 };
  s2 -> s3 [0, 65535] { R297 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R297 += 1, R261 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R297 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65] { R299 += 1, R263 += 1 };
  s0 -> s0 [0, 65535] { R298 += 1, R299 += 1 };
  s0 -> s2 [0, 65535] { R299 += 1, R262 += 1, R263 += 1 };
  s0 -> s1 [67, 65535] { R299 += 1, R263 += 1 };
  s1 -> s1 [0, 65] { R299 += 1, R263 += 1 };
  s1 -> s1 [0, 65535] { R299 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [67, 65535] { R299 += 1, R263 += 1 };
  s2 -> s1 [0, 65] { R299 += 1, R263 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R299 += 1, R262 += 1, R263 += 1 };
  s2 -> s1 [67, 65535] { R299 += 1, R263 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R301 += 1, R264 += 1, R265 += 1 };
  s0 -> s0 [0, 65535] { R300 += 1, R301 += 1 };
  s0 -> s2 [0, 65535] { R301 += 1, R265 += 1, R236 += 1 };
  s1 -> s1 [0, 65535] { R301 += 1, R264 += 1, R265 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R301 += 1, R265 += 1, R236 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R301 += 1, R265 += 1, R236 += 1 };
  s2 -> s4 [0, 65535] { R301 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R301 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 66] { R303 += 1, R267 += 1 };
  s0 -> s0 [0, 65535] { R302 += 1, R303 += 1 };
  s0 -> s2 [0, 65535] { R303 += 1, R266 += 1, R267 += 1 };
  s0 -> s1 [91, 65535] { R303 += 1, R267 += 1 };
  s1 -> s1 [0, 66] { R303 += 1, R267 += 1 };
  s1 -> s1 [0, 65535] { R303 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R303 += 1, R267 += 1 };
  s2 -> s1 [0, 66] { R303 += 1, R267 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R303 += 1, R266 += 1, R267 += 1 };
  s2 -> s1 [91, 65535] { R303 += 1, R267 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R305 += 1, R281 += 1, R237 += 1 };
  s0 -> s0 [0, 65535] { R304 += 1, R305 += 1 };
  s0 -> s2 [0, 65535] { R305 += 1, R280 += 1, R281 += 1 };
  s1 -> s4 [0, 65535] { R305 += 1 };
  s1 -> s1 [0, 65535] { R305 += 1, R281 += 1, R237 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R305 += 1, R281 += 1, R237 += 1 };
  s2 -> s2 [0, 65535] { R305 += 1, R280 += 1, R281 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R305 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65] { R307 += 1, R283 += 1 };
  s0 -> s2 [0, 65535] { R307 += 1, R282 += 1, R283 += 1 };
  s0 -> s0 [0, 65535] { R306 += 1, R307 += 1 };
  s0 -> s3 [66, 66] { R307 += 1, R283 += 1 };
  s0 -> s4 [66, 66] { R307 += 1, R283 += 1 };
  s0 -> s1 [91, 65535] { R307 += 1, R283 += 1 };
  s1 -> s1 [0, 65] { R307 += 1, R283 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R307 += 1 };
  s1 -> s3 [66, 66] { R307 += 1, R283 += 1 };
  s1 -> s4 [66, 66] { R307 += 1, R283 += 1 };
  s1 -> s1 [91, 65535] { R307 += 1, R283 += 1 };
  s2 -> s1 [0, 65] { R307 += 1, R283 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R307 += 1, R282 += 1, R283 += 1 };
  s2 -> s3 [66, 66] { R307 += 1, R283 += 1 };
  s2 -> s4 [66, 66] { R307 += 1, R283 += 1 };
  s2 -> s1 [91, 65535] { R307 += 1, R283 += 1 };
  s3 -> s3 [0, 66] { R307 += 1, R283 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R307 += 1 };
  s3 -> s3 [91, 65535] { R307 += 1, R283 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R307 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R247 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s2 [9, 13] { R247 += 1 };
  s0 -> s1 [14, 31] { R247 += 1 };
  s0 -> s2 [32, 32] { R247 += 1 };
  s0 -> s1 [33, 65535] { R247 += 1 };
  s1 -> s1 [0, 65535] { R247 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R247 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R249 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R249 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R251 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s2 [9, 13] { R251 += 1 };
  s0 -> s1 [14, 31] { R251 += 1 };
  s0 -> s2 [32, 32] { R251 += 1 };
  s0 -> s1 [33, 65535] { R251 += 1 };
  s1 -> s1 [0, 65535] { R251 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R251 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s1 [0, 65535] { R253 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R253 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R257 && R3 = R279 && R12 = 0 && R162 = 0 && R163 = R307 && R254 - R257 = -1 && R255 = R257 && R256 - R257 = -1 && R258 = 0 && R259 = 1 && R260 = 0 && R261 = 1 && R268 - R307 = 1 && R269 = R279 && R270 - R307 = 1 && R271 = R279 && R272 - R307 = 1 && R273 = R279 && R274 - R307 = 1 && R275 = R279 && R276 - R307 = 1 && R277 = R279 && R278 - R307 = 1 && R284 = 0 && R285 = R307 && R286 = 0 && R287 = R307 && R288 = 0 && R289 = R307 && R290 = 0 && R291 = R307 && R292 = 0 && R293 = R307 && R294 = 0 && R295 = R307 && R296 = 0 && R297 = R307 && R298 = 0 && R299 = R307 && R300 = 0 && R301 = R307 && R302 = 0 && R303 = R307 && R304 = 0 && R305 = R307 && R306 = 0 && R0 != 0 && R1 != 0 && R10 < 1 && R13 < R257 && -2 < R13 && 0 < R257 && R307 < R279 && -1 < R307 && (R4 != 0 || ((R0 != R239 || R238 - R239 = -1 || R239 < 0) && (R0 = R239 || R0 < 1))) && (R4 != 0 || ((R0 != R241 || R240 - R241 = -1 || R241 < 0) && (R0 = R241 || R0 < 1))) && (R6 != 0 || ((R1 != R247 || R246 - R247 = -1 || R247 < 0) && (R1 = R247 || R1 < 1))) && (R6 != 0 || ((R1 != R249 || R248 - R249 = -1 || R249 < 0) && (R1 = R249 || R1 < 1))) && (R237 != 0 || ((R280 != 0 || R13 - R281 = -1 || R13 < 0) && (R280 = 0 || R13 < 0))) && (R237 != 0 || ((R282 != 0 || R13 - R283 = -1 || R13 < 0) && (R282 = 0 || R13 < 0))) && (R242 != 0 || ((R5 != 0 || ((R0 != R243 || R243 = 1 || R243 < 0) && (R0 = R243 || R243 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R243 || R243 = 1 || R243 < 0) && (R243 != 1 || -1 < R0) && (R0 = R243 || R243 = 1))))) && (R244 != 0 || ((R5 != 0 || ((R0 != R245 || R245 = 1 || R245 < 0) && (R0 = R245 || R245 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R245 || R245 = 1 || R245 < 0) && (R245 != 1 || -1 < R0) && (R0 = R245 || R245 = 1))))) && (R250 != 0 || ((R7 != 0 || ((R1 != R251 || R251 = 1 || R251 < 0) && (R1 = R251 || R251 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R251 || R251 = 1 || R251 < 0) && (R251 != 1 || -1 < R1) && (R1 = R251 || R251 = 1))))) && (R252 != 0 || ((R7 != 0 || ((R1 != R253 || R253 = 1 || R253 < 0) && (R1 = R253 || R253 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R253 || R253 = 1 || R253 < 0) && (R253 != 1 || -1 < R1) && (R1 = R253 || R253 = 1))))) && (R257 != R263 || R13 - R262 = -1 || ((R236 != 0 || R263 - R13 < 2) && (R236 = 0 || R263 - R13 < 1 || R263 < 1))) && (R257 != R265 || R13 - R264 = -1 || ((R236 != 0 || R265 - R13 < 2) && (R236 = 0 || R265 - R13 < 1 || R265 < 1))) && (R257 != R267 || R13 - R266 = -1 || ((R236 != 0 || R267 - R13 < 2) && (R236 = 0 || R267 - R13 < 1 || R267 < 1))) && (R4 = 0 || (R0 = R239 && R238 - R239 = -1)) && (R4 = 0 || (R0 = R241 && R240 - R241 = -1)) && (R6 = 0 || (R1 = R247 && R246 - R247 = -1)) && (R6 = 0 || (R1 = R249 && R248 - R249 = -1)) && (R237 = 0 || (R13 - R281 = -1 && R280 = 0)) && (R237 = 0 || (R13 - R283 = -1 && R282 = 0)) && (R242 = 0 || (R5 = 0 && R0 < 0)) && (R244 = 0 || (R5 = 0 && R0 < 0)) && (R250 = 0 || (R7 = 0 && R1 < 0)) && (R252 = 0 || (R7 = 0 && R1 < 0)) && (R257 = R263 || (R13 - R257 = -1 && R236 = 0)) && (R257 = R265 || (R13 - R257 = -1 && R236 = 0)) && (R257 = R267 || (R13 - R257 = -1 && R236 = 0));
// End of Parikh automata intersection problem
