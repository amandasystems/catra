// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R2, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R4, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [66, 66];
  s0 -> s0 [67, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [66, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R3 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R4 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R10 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s2 [9, 13] { R10 += 1 };
  s0 -> s1 [14, 31] { R10 += 1 };
  s0 -> s2 [32, 32] { R10 += 1 };
  s0 -> s1 [33, 65535] { R10 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10 += 1 };
  s2 -> s1 [0, 65535] { R10 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R12 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R12 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R14 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s2 [9, 13] { R14 += 1 };
  s0 -> s1 [14, 31] { R14 += 1 };
  s0 -> s2 [32, 32] { R14 += 1 };
  s0 -> s1 [33, 65535] { R14 += 1 };
  s1 -> s1 [0, 65535] { R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R16 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R16 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [67, 65535] { R28 += 1 };
  s1 -> s1 [0, 65] { R28 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [67, 65535] { R28 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s1 [0, 65535] { R30 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 66] { R32 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [86, 65535] { R32 += 1 };
  s1 -> s1 [0, 66] { R32 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R32 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R34 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [66, 66] { R36 += 1 };
  s0 -> s3 [66, 66] { R36 += 1 };
  s0 -> s4 [86, 86] { R36 += 1 };
  s0 -> s1 [87, 65535] { R36 += 1 };
  s1 -> s1 [0, 65] { R36 += 1 };
  s1 -> s2 [66, 66] { R36 += 1 };
  s1 -> s3 [66, 66] { R36 += 1 };
  s1 -> s4 [86, 86] { R36 += 1 };
  s1 -> s1 [87, 65535] { R36 += 1 };
  s2 -> s2 [0, 66] { R36 += 1 };
  s2 -> s6 [86, 86] { R36 += 1 };
  s2 -> s2 [87, 65535] { R36 += 1 };
  s4 -> s4 [0, 65] { R36 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [66, 66] { R36 += 1 };
  s4 -> s6 [66, 66] { R36 += 1 };
  s4 -> s4 [86, 65535] { R36 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 66] { R36 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s6 [86, 65535] { R36 += 1 };
  accepting s4, s5, s6;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R0 = R32 && R9 - R32 = -1 && R10 = R32 && R11 - R32 = -1 && R12 = R32 && R13 = 0 && R14 = 1 && R15 = 0 && R16 = 1 && R27 = 0 && R28 = R32 && R29 = 0 && R30 = R32 && R31 = 0 && R35 = 0 && R36 = 0 && R3 < 1 && R4 < 1 && 0 < R32 && (R8 = 0 || (R33 = 0 && R34 = 0));
// End of Parikh automata intersection problem
