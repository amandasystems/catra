// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R18, R19, R2, R25, R26, R27, R28, R29, R3;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 43] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R19 += 1 };
  s1 -> s1 [0, 43] { R19 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 60] { R27 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R27 += 1, R2 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s3 [61, 61] { R27 += 1 };
  s0 -> s1 [62, 65535] { R27 += 1, R3 += 1 };
  s1 -> s1 [0, 60] { R27 += 1, R3 += 1 };
  s1 -> s3 [61, 61] { R27 += 1 };
  s1 -> s1 [62, 65535] { R27 += 1, R3 += 1 };
  s2 -> s1 [0, 60] { R27 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R27 += 1, R2 += 1, R3 += 1 };
  s2 -> s3 [61, 61] { R27 += 1 };
  s2 -> s1 [62, 65535] { R27 += 1, R3 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R27 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s1 [0, 65535] { R29 += 1, R25 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R29 += 1, R25 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 - R27 = 1 && R2 = 0 && R18 = 0 && R19 = R27 && R26 = 0 && R3 != -1 && -1 < R27 && (R28 != 0 || R27 = R29 || (R25 = 0 && R27 = 0)) && (R28 = 0 || (R25 = 0 && R27 = 0));
// End of Parikh automata intersection problem
