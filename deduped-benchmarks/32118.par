// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining P20
automaton P20_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s1 [12, 12] { R8 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s1 [0, 65535] { R10 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R10 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R6 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R12 += 1 };
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s2 [9, 13] { R12 += 1 };
  s0 -> s1 [14, 31] { R12 += 1 };
  s0 -> s2 [32, 32] { R12 += 1 };
  s0 -> s1 [33, 65535] { R12 += 1 };
  s1 -> s1 [0, 65535] { R12 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R14 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R14 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [9, 13] { R16 += 1 };
  s0 -> s1 [14, 31] { R16 += 1 };
  s0 -> s2 [32, 32] { R16 += 1 };
  s0 -> s1 [33, 65535] { R16 += 1 };
  s1 -> s1 [0, 65535] { R16 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R18 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R18 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P21
automaton P21_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P19
automaton P19_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P18
automaton P18_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R7 = 0 && R0 != 0 && R1 != 0 && R5 < 1 && R6 < 1 && (R0 != R8 || R8 = 1 || R8 < 0) && (R3 != 0 || ((R1 != R12 || R11 - R12 = -1 || R12 < 0) && (R1 = R12 || R1 < 1))) && (R3 != 0 || ((R1 != R14 || R13 - R14 = -1 || R14 < 0) && (R1 = R14 || R1 < 1))) && (R4 != 0 || ((R15 != 0 || ((R17 != 0 || ((R1 != R16 || R16 = 1 || R16 < 0) && (R1 != R18 || R18 = 1 || R18 < 0) && (R1 = R16 || R16 = 1 || R1 < 1) && (R1 = R18 || R18 = 1 || R1 < 1))) && (R17 = 0 || R1 < 1))) && (R15 = 0 || R1 < 1))) && (R8 != 1 || -1 < R0) && (R9 != 0 || ((R2 != 0 || ((R0 != R10 || R10 = 1 || R10 < 0) && (R0 = R10 || R10 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R10 || R10 = 1 || R10 < 0) && (R10 != 1 || -1 < R0) && (R0 = R10 || R10 = 1))))) && (R0 = R8 || R8 = 1) && (R3 = 0 || (R1 = R12 && R11 - R12 = -1)) && (R3 = 0 || (R1 = R14 && R13 - R14 = -1)) && (R4 = 0 || (R15 = 0 && R17 = 0 && (R1 != R16 || R16 = 1 || R16 < 0) && (R1 != R18 || R18 = 1 || R18 < 0) && (R16 != 1 || -1 < R1) && (R18 != 1 || -1 < R1) && (R1 = R16 || R16 = 1) && (R1 = R18 || R18 = 1))) && (R9 = 0 || (R2 = 0 && R0 < 0));
// End of Parikh automata intersection problem
