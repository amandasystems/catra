// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R16, R17, R2, R254, R255, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [69, 69];
  s0 -> s0 [70, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [69, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R254 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 68];
  s0 -> s0 [0, 65535] { R255 += 1 };
  s0 -> s2 [69, 69];
  s0 -> s1 [70, 65535];
  s1 -> s1 [0, 68];
  s1 -> s2 [69, 69];
  s1 -> s1 [70, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R283 += 1 };
  s0 -> s0 [0, 65535] { R282 += 1, R283 += 1 };
  s0 -> s2 [9, 13] { R283 += 1 };
  s0 -> s1 [14, 31] { R283 += 1 };
  s0 -> s2 [32, 32] { R283 += 1 };
  s0 -> s1 [33, 65535] { R283 += 1 };
  s1 -> s1 [0, 65535] { R283 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R283 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R285 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s1 -> s1 [0, 65535] { R285 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R287 += 1 };
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s0 -> s2 [9, 13] { R287 += 1 };
  s0 -> s1 [14, 31] { R287 += 1 };
  s0 -> s2 [32, 32] { R287 += 1 };
  s0 -> s1 [33, 65535] { R287 += 1 };
  s1 -> s1 [0, 65535] { R287 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R287 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s1 [0, 65535] { R289 += 1, R11 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R289 += 1, R11 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 68] { R303 += 1 };
  s0 -> s0 [0, 65535] { R302 += 1, R303 += 1 };
  s0 -> s1 [70, 65535] { R303 += 1 };
  s1 -> s1 [0, 68] { R303 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [70, 65535] { R303 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R304 += 1, R305 += 1 };
  s0 -> s1 [0, 65535] { R305 += 1, R260 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R305 += 1, R260 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R307 += 1 };
  s0 -> s0 [0, 65535] { R306 += 1, R307 += 1 };
  s0 -> s1 [91, 65535] { R307 += 1 };
  s1 -> s1 [0, 69] { R307 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R307 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R312 += 1, R313 += 1 };
  s0 -> s1 [0, 65535] { R313 += 1, R261 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R313 += 1, R261 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 68] { R315 += 1 };
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s2 [69, 69] { R315 += 1 };
  s0 -> s3 [69, 69] { R315 += 1 };
  s0 -> s1 [91, 65535] { R315 += 1 };
  s1 -> s1 [0, 68] { R315 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [69, 69] { R315 += 1 };
  s1 -> s3 [69, 69] { R315 += 1 };
  s1 -> s1 [91, 65535] { R315 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 69] { R315 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R315 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P29
automaton P29_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R17 += 1 };
  s1 -> s1 [0, 60] { R17 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R17 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R297 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R296 += 1, R297 += 1 };
  s1 -> s1 [0, 65535] { R297 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R298 += 1, R299 += 1 };
  s0 -> s1 [0, 65535] { R299 += 1, R262 += 1, R263 += 1 };
  s0 -> s2 [9, 9] { R299 += 1, R263 += 1 };
  s1 -> s1 [0, 65535] { R299 += 1, R262 += 1, R263 += 1 };
  s1 -> s2 [9, 9] { R299 += 1, R263 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R299 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R300 += 1, R301 += 1 };
  s0 -> s1 [0, 65535] { R301 += 1, R264 += 1, R265 += 1 };
  s0 -> s2 [0, 65535] { R301 += 1, R265 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R301 += 1, R264 += 1, R265 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R301 += 1, R265 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R301 += 1 };
  s2 -> s2 [0, 65535] { R301 += 1, R265 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R301 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R340 += 1, R341 += 1 };
  s0 -> s1 [0, 65535] { R341 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R341 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R342 += 1, R343 += 1 };
  s0 -> s1 [0, 65535] { R343 += 1, R274 += 1, R275 += 1 };
  s0 -> s2 [12, 12] { R343 += 1, R275 += 1 };
  s1 -> s1 [0, 65535] { R343 += 1, R274 += 1, R275 += 1 };
  s1 -> s2 [12, 12] { R343 += 1, R275 += 1 };
  s2 -> s2 [0, 65535] { R343 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R345 += 1, R277 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R345 += 1, R276 += 1, R277 += 1 };
  s0 -> s0 [0, 65535] { R344 += 1, R345 += 1 };
  s1 -> s1 [0, 65535] { R345 += 1, R277 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R345 += 1 };
  s2 -> s1 [0, 65535] { R345 += 1, R277 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R345 += 1, R276 += 1, R277 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R345 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R347 += 1, R279 += 1 };
  s0 -> s0 [0, 65535] { R346 += 1, R347 += 1 };
  s0 -> s2 [0, 65535] { R347 += 1, R278 += 1, R279 += 1 };
  s0 -> s3 [9, 13] { R347 += 1, R279 += 1 };
  s0 -> s1 [14, 31] { R347 += 1, R279 += 1 };
  s0 -> s3 [32, 32] { R347 += 1, R279 += 1 };
  s0 -> s1 [33, 65535] { R347 += 1, R279 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R347 += 1, R279 += 1 };
  s1 -> s5 [0, 65535] { R347 += 1 };
  s2 -> s1 [0, 8] { R347 += 1, R279 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R347 += 1, R278 += 1, R279 += 1 };
  s2 -> s3 [9, 13] { R347 += 1, R279 += 1 };
  s2 -> s1 [14, 31] { R347 += 1, R279 += 1 };
  s2 -> s3 [32, 32] { R347 += 1, R279 += 1 };
  s2 -> s1 [33, 65535] { R347 += 1, R279 += 1 };
  s3 -> s1 [0, 65535] { R347 += 1, R279 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R347 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R348 += 1, R349 += 1 };
  s0 -> s1 [0, 65535] { R349 += 1, R281 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R349 += 1, R280 += 1, R281 += 1 };
  s1 -> s4 [0, 65535] { R349 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R349 += 1, R281 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R349 += 1, R281 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R349 += 1, R280 += 1, R281 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R349 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 64] { R351 += 1, R317 += 1 };
  s0 -> s0 [0, 65535] { R350 += 1, R351 += 1 };
  s0 -> s2 [0, 65535] { R351 += 1, R316 += 1, R317 += 1 };
  s0 -> s3 [69, 69] { R351 += 1, R317 += 1 };
  s0 -> s1 [70, 65535] { R351 += 1, R317 += 1 };
  s1 -> s1 [0, 64] { R351 += 1, R317 += 1 };
  s1 -> s3 [69, 69] { R351 += 1, R317 += 1 };
  s1 -> s1 [70, 65535] { R351 += 1, R317 += 1 };
  s2 -> s1 [0, 64] { R351 += 1, R317 += 1 };
  s2 -> s2 [0, 65535] { R351 += 1, R316 += 1, R317 += 1 };
  s2 -> s3 [69, 69] { R351 += 1, R317 += 1 };
  s2 -> s1 [70, 65535] { R351 += 1, R317 += 1 };
  s3 -> s3 [0, 64] { R351 += 1, R317 += 1 };
  s3 -> s3 [0, 65535] { R351 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [69, 65535] { R351 += 1, R317 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R353 += 1, R319 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R352 += 1, R353 += 1 };
  s0 -> s2 [0, 65535] { R353 += 1, R318 += 1, R319 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R353 += 1, R319 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R353 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R353 += 1, R319 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R353 += 1, R318 += 1, R319 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R353 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 68] { R355 += 1, R321 += 1 };
  s0 -> s2 [0, 65535] { R355 += 1, R320 += 1, R321 += 1 };
  s0 -> s3 [0, 65535] { R355 += 1, R321 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R354 += 1, R355 += 1 };
  s0 -> s4 [69, 69] { R355 += 1, R321 += 1 };
  s0 -> s1 [70, 65535] { R355 += 1, R321 += 1 };
  s1 -> s1 [0, 68] { R355 += 1, R321 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R355 += 1 };
  s1 -> s4 [69, 69] { R355 += 1, R321 += 1 };
  s1 -> s1 [70, 65535] { R355 += 1, R321 += 1 };
  s2 -> s1 [0, 68] { R355 += 1, R321 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R355 += 1, R320 += 1, R321 += 1 };
  s2 -> s3 [0, 65535] { R355 += 1, R321 += 1, R12 += 1 };
  s2 -> s4 [69, 69] { R355 += 1, R321 += 1 };
  s2 -> s1 [70, 65535] { R355 += 1, R321 += 1 };
  s3 -> s1 [0, 68] { R355 += 1, R321 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R355 += 1, R321 += 1, R12 += 1 };
  s3 -> s6 [0, 65535] { R355 += 1 };
  s3 -> s4 [69, 69] { R355 += 1, R321 += 1 };
  s3 -> s1 [70, 65535] { R355 += 1, R321 += 1 };
  s4 -> s4 [0, 65535] { R355 += 1, R321 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R355 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R357 += 1, R323 += 1, R267 += 1 };
  s0 -> s2 [0, 65535] { R357 += 1, R322 += 1, R323 += 1 };
  s0 -> s0 [0, 65535] { R356 += 1, R357 += 1 };
  s0 -> s3 [0, 65535] { R357 += 1, R323 += 1, R266 += 1, R267 += 1 };
  s0 -> s4 [9, 13] { R357 += 1, R323 += 1, R267 += 1 };
  s0 -> s1 [14, 31] { R357 += 1, R323 += 1, R267 += 1 };
  s0 -> s4 [32, 32] { R357 += 1, R323 += 1, R267 += 1 };
  s0 -> s1 [33, 65535] { R357 += 1, R323 += 1, R267 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R357 += 1, R323 += 1, R267 += 1 };
  s1 -> s7 [0, 65535] { R357 += 1, R323 += 1 };
  s1 -> s6 [0, 65535] { R357 += 1 };
  s2 -> s1 [0, 8] { R357 += 1, R323 += 1, R267 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R357 += 1, R322 += 1, R323 += 1 };
  s2 -> s3 [0, 65535] { R357 += 1, R323 += 1, R266 += 1, R267 += 1 };
  s2 -> s4 [9, 13] { R357 += 1, R323 += 1, R267 += 1 };
  s2 -> s1 [14, 31] { R357 += 1, R323 += 1, R267 += 1 };
  s2 -> s4 [32, 32] { R357 += 1, R323 += 1, R267 += 1 };
  s2 -> s1 [33, 65535] { R357 += 1, R323 += 1, R267 += 1 };
  s3 -> s1 [0, 8] { R357 += 1, R323 += 1, R267 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R357 += 1 };
  s3 -> s3 [0, 65535] { R357 += 1, R323 += 1, R266 += 1, R267 += 1 };
  s3 -> s4 [9, 13] { R357 += 1, R323 += 1, R267 += 1 };
  s3 -> s1 [14, 31] { R357 += 1, R323 += 1, R267 += 1 };
  s3 -> s4 [32, 32] { R357 += 1, R323 += 1, R267 += 1 };
  s3 -> s1 [33, 65535] { R357 += 1, R323 += 1, R267 += 1 };
  s4 -> s1 [0, 65535] { R357 += 1, R323 += 1, R267 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R357 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R357 += 1, R323 += 1 };
  s7 -> s6 [0, 65535] { R357 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R359 += 1, R325 += 1, R268 += 1, R269 += 1 };
  s0 -> s2 [0, 65535] { R359 += 1, R324 += 1, R325 += 1 };
  s0 -> s3 [0, 65535] { R359 += 1, R325 += 1, R269 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R358 += 1, R359 += 1 };
  s1 -> s4 [0, 65535] { R359 += 1 };
  s1 -> s1 [0, 65535] { R359 += 1, R325 += 1, R268 += 1, R269 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R359 += 1, R325 += 1, R269 += 1, R6 += 1 };
  s2 -> s1 [0, 65535] { R359 += 1, R325 += 1, R268 += 1, R269 += 1 };
  s2 -> s2 [0, 65535] { R359 += 1, R324 += 1, R325 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R359 += 1, R325 += 1, R269 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R359 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R359 += 1, R325 += 1 };
  s3 -> s3 [0, 65535] { R359 += 1, R325 += 1, R269 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R359 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R359 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R359 += 1, R325 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 8] { R361 += 1, R327 += 1, R271 += 1 };
  s0 -> s2 [0, 65535] { R361 += 1, R326 += 1, R327 += 1 };
  s0 -> s3 [0, 65535] { R361 += 1, R327 += 1, R270 += 1, R271 += 1 };
  s0 -> s0 [0, 65535] { R360 += 1, R361 += 1 };
  s0 -> s4 [9, 13] { R361 += 1, R327 += 1, R271 += 1 };
  s0 -> s1 [14, 31] { R361 += 1, R327 += 1, R271 += 1 };
  s0 -> s4 [32, 32] { R361 += 1, R327 += 1, R271 += 1 };
  s0 -> s1 [33, 65535] { R361 += 1, R327 += 1, R271 += 1 };
  s1 -> s7 [0, 65535] { R361 += 1, R327 += 1 };
  s1 -> s5 [0, 65535] { R361 += 1 };
  s1 -> s1 [0, 65535] { R361 += 1, R327 += 1, R271 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R361 += 1, R327 += 1, R271 += 1 };
  s2 -> s2 [0, 65535] { R361 += 1, R326 += 1, R327 += 1 };
  s2 -> s3 [0, 65535] { R361 += 1, R327 += 1, R270 += 1, R271 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [9, 13] { R361 += 1, R327 += 1, R271 += 1 };
  s2 -> s1 [14, 31] { R361 += 1, R327 += 1, R271 += 1 };
  s2 -> s4 [32, 32] { R361 += 1, R327 += 1, R271 += 1 };
  s2 -> s1 [33, 65535] { R361 += 1, R327 += 1, R271 += 1 };
  s3 -> s1 [0, 8] { R361 += 1, R327 += 1, R271 += 1 };
  s3 -> s5 [0, 65535] { R361 += 1 };
  s3 -> s3 [0, 65535] { R361 += 1, R327 += 1, R270 += 1, R271 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [9, 13] { R361 += 1, R327 += 1, R271 += 1 };
  s3 -> s1 [14, 31] { R361 += 1, R327 += 1, R271 += 1 };
  s3 -> s4 [32, 32] { R361 += 1, R327 += 1, R271 += 1 };
  s3 -> s1 [33, 65535] { R361 += 1, R327 += 1, R271 += 1 };
  s4 -> s1 [0, 65535] { R361 += 1, R327 += 1, R271 += 1 };
  s5 -> s5 [0, 65535] { R361 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R361 += 1, R327 += 1 };
  s7 -> s5 [0, 65535] { R361 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R363 += 1, R329 += 1, R273 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R363 += 1, R328 += 1, R329 += 1 };
  s0 -> s0 [0, 65535] { R362 += 1, R363 += 1 };
  s0 -> s3 [0, 65535] { R363 += 1, R329 += 1, R272 += 1, R273 += 1 };
  s1 -> s1 [0, 65535] { R363 += 1, R329 += 1, R273 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R363 += 1 };
  s1 -> s6 [0, 65535] { R363 += 1, R329 += 1 };
  s2 -> s1 [0, 65535] { R363 += 1, R329 += 1, R273 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R363 += 1, R328 += 1, R329 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R363 += 1, R329 += 1, R272 += 1, R273 += 1 };
  s3 -> s1 [0, 65535] { R363 += 1, R329 += 1, R273 += 1, R7 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R363 += 1 };
  s3 -> s3 [0, 65535] { R363 += 1, R329 += 1, R272 += 1, R273 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R363 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R363 += 1 };
  s6 -> s6 [0, 65535] { R363 += 1, R329 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 68] { R365 += 1, R331 += 1, R291 += 1 };
  s0 -> s0 [0, 65535] { R364 += 1, R365 += 1 };
  s0 -> s2 [0, 65535] { R365 += 1, R331 += 1, R290 += 1, R291 += 1 };
  s0 -> s3 [0, 65535] { R365 += 1, R330 += 1, R331 += 1 };
  s0 -> s1 [70, 65535] { R365 += 1, R331 += 1, R291 += 1 };
  s1 -> s1 [0, 68] { R365 += 1, R331 += 1, R291 += 1 };
  s1 -> s1 [0, 65535] { R365 += 1, R331 += 1 };
  s1 -> s5 [0, 65535] { R365 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [70, 65535] { R365 += 1, R331 += 1, R291 += 1 };
  s2 -> s1 [0, 68] { R365 += 1, R331 += 1, R291 += 1 };
  s2 -> s5 [0, 65535] { R365 += 1 };
  s2 -> s2 [0, 65535] { R365 += 1, R331 += 1, R290 += 1, R291 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [70, 65535] { R365 += 1, R331 += 1, R291 += 1 };
  s3 -> s1 [0, 68] { R365 += 1, R331 += 1, R291 += 1 };
  s3 -> s2 [0, 65535] { R365 += 1, R331 += 1, R290 += 1, R291 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R365 += 1, R330 += 1, R331 += 1 };
  s3 -> s1 [70, 65535] { R365 += 1, R331 += 1, R291 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R365 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R367 += 1, R333 += 1, R292 += 1, R293 += 1 };
  s0 -> s0 [0, 65535] { R366 += 1, R367 += 1 };
  s0 -> s2 [0, 65535] { R367 += 1, R333 += 1, R293 += 1, R258 += 1 };
  s0 -> s3 [0, 65535] { R367 += 1, R332 += 1, R333 += 1 };
  s1 -> s1 [0, 65535] { R367 += 1, R333 += 1, R292 += 1, R293 += 1 };
  s1 -> s2 [0, 65535] { R367 += 1, R333 += 1, R293 += 1, R258 += 1 };
  s1 -> s6 [0, 65535] { R367 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R367 += 1, R333 += 1, R293 += 1, R258 += 1 };
  s2 -> s5 [0, 65535] { R367 += 1, R333 += 1 };
  s2 -> s6 [0, 65535] { R367 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R367 += 1, R333 += 1, R292 += 1, R293 += 1 };
  s3 -> s2 [0, 65535] { R367 += 1, R333 += 1, R293 += 1, R258 += 1 };
  s3 -> s3 [0, 65535] { R367 += 1, R332 += 1, R333 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R367 += 1, R333 += 1 };
  s5 -> s6 [0, 65535] { R367 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R367 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 69] { R369 += 1, R335 += 1, R295 += 1 };
  s0 -> s0 [0, 65535] { R368 += 1, R369 += 1 };
  s0 -> s2 [0, 65535] { R369 += 1, R335 += 1, R294 += 1, R295 += 1 };
  s0 -> s3 [0, 65535] { R369 += 1, R334 += 1, R335 += 1 };
  s0 -> s1 [91, 65535] { R369 += 1, R335 += 1, R295 += 1 };
  s1 -> s1 [0, 69] { R369 += 1, R335 += 1, R295 += 1 };
  s1 -> s1 [0, 65535] { R369 += 1, R335 += 1 };
  s1 -> s5 [0, 65535] { R369 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [91, 65535] { R369 += 1, R335 += 1, R295 += 1 };
  s2 -> s1 [0, 69] { R369 += 1, R335 += 1, R295 += 1 };
  s2 -> s2 [0, 65535] { R369 += 1, R335 += 1, R294 += 1, R295 += 1 };
  s2 -> s5 [0, 65535] { R369 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [91, 65535] { R369 += 1, R335 += 1, R295 += 1 };
  s3 -> s1 [0, 69] { R369 += 1, R335 += 1, R295 += 1 };
  s3 -> s2 [0, 65535] { R369 += 1, R335 += 1, R294 += 1, R295 += 1 };
  s3 -> s3 [0, 65535] { R369 += 1, R334 += 1, R335 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [91, 65535] { R369 += 1, R335 += 1, R295 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R369 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R259 += 1 };
  s0 -> s0 [0, 65535] { R370 += 1, R371 += 1 };
  s0 -> s2 [0, 65535] { R371 += 1, R337 += 1, R308 += 1, R309 += 1 };
  s0 -> s3 [0, 65535] { R371 += 1, R336 += 1, R337 += 1 };
  s1 -> s1 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R259 += 1 };
  s1 -> s6 [0, 65535] { R371 += 1, R337 += 1 };
  s1 -> s5 [0, 65535] { R371 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R259 += 1 };
  s2 -> s2 [0, 65535] { R371 += 1, R337 += 1, R308 += 1, R309 += 1 };
  s2 -> s5 [0, 65535] { R371 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R371 += 1, R337 += 1, R309 += 1, R259 += 1 };
  s3 -> s2 [0, 65535] { R371 += 1, R337 += 1, R308 += 1, R309 += 1 };
  s3 -> s3 [0, 65535] { R371 += 1, R336 += 1, R337 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R371 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R371 += 1, R337 += 1 };
  s6 -> s5 [0, 65535] { R371 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 68] { R373 += 1, R339 += 1, R311 += 1 };
  s0 -> s2 [0, 65535] { R373 += 1, R338 += 1, R339 += 1 };
  s0 -> s0 [0, 65535] { R372 += 1, R373 += 1 };
  s0 -> s3 [0, 65535] { R373 += 1, R339 += 1, R310 += 1, R311 += 1 };
  s0 -> s4 [69, 69] { R373 += 1, R339 += 1, R311 += 1 };
  s0 -> s5 [69, 69] { R373 += 1, R339 += 1, R311 += 1 };
  s0 -> s1 [91, 65535] { R373 += 1, R339 += 1, R311 += 1 };
  s1 -> s1 [0, 68] { R373 += 1, R339 += 1, R311 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R373 += 1, R339 += 1 };
  s1 -> s7 [0, 65535] { R373 += 1 };
  s1 -> s4 [69, 69] { R373 += 1, R339 += 1, R311 += 1 };
  s1 -> s5 [69, 69] { R373 += 1, R339 += 1, R311 += 1 };
  s1 -> s1 [91, 65535] { R373 += 1, R339 += 1, R311 += 1 };
  s2 -> s1 [0, 68] { R373 += 1, R339 += 1, R311 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R373 += 1, R338 += 1, R339 += 1 };
  s2 -> s3 [0, 65535] { R373 += 1, R339 += 1, R310 += 1, R311 += 1 };
  s2 -> s4 [69, 69] { R373 += 1, R339 += 1, R311 += 1 };
  s2 -> s5 [69, 69] { R373 += 1, R339 += 1, R311 += 1 };
  s2 -> s1 [91, 65535] { R373 += 1, R339 += 1, R311 += 1 };
  s3 -> s1 [0, 68] { R373 += 1, R339 += 1, R311 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R373 += 1, R339 += 1, R310 += 1, R311 += 1 };
  s3 -> s7 [0, 65535] { R373 += 1 };
  s3 -> s4 [69, 69] { R373 += 1, R339 += 1, R311 += 1 };
  s3 -> s5 [69, 69] { R373 += 1, R339 += 1, R311 += 1 };
  s3 -> s1 [91, 65535] { R373 += 1, R339 += 1, R311 += 1 };
  s4 -> s4 [0, 69] { R373 += 1, R339 += 1, R311 += 1 };
  s4 -> s4 [0, 65535] { R373 += 1, R339 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R373 += 1 };
  s4 -> s4 [91, 65535] { R373 += 1, R339 += 1, R311 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R373 += 1 };
  s5 -> s5 [0, 65535] { R373 += 1, R339 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R373 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining c7
automaton c7_0 {
  init s0;
  s0 -> s1 [101, 101];
  accepting s1;
};
};
constraint R1 = R295 && R2 - R339 = 1 && R3 = R301 && R4 = R307 && R16 = 0 && R17 = R373 && R262 = 0 && R266 - R295 = -1 && R267 = R295 && R268 - R295 = -1 && R269 = R295 && R270 = 0 && R271 = 1 && R272 = 0 && R273 = 1 && R274 = R339 && R275 - R339 = 1 && R276 = R339 && R277 - R339 = 1 && R278 = 0 && R279 = 1 && R280 = 0 && R281 = 1 && R282 - R307 = -1 && R283 = R307 && R284 - R307 = -1 && R285 = R307 && R286 = 0 && R287 = 1 && R288 = 0 && R289 = 1 && R290 = 0 && R291 = R295 && R292 = 0 && R293 = R295 && R294 = 0 && R296 - R373 = 1 && R297 = R301 && R298 - R373 = 1 && R299 = R301 && R300 - R373 = 1 && R302 = 0 && R303 = R307 && R304 = 0 && R305 = R307 && R306 = 0 && R316 = 0 && R317 = R339 && R318 = 0 && R319 = R339 && R320 = 0 && R321 = R339 && R322 = 0 && R323 = R339 && R324 = 0 && R325 = R339 && R326 = 0 && R327 = R339 && R328 = 0 && R329 = R339 && R330 = 0 && R331 = R339 && R332 = 0 && R333 = R339 && R334 = 0 && R335 = R339 && R336 = 0 && R337 = R339 && R338 = 0 && R340 = 0 && R341 = R373 && R342 = 0 && R343 = R373 && R344 = 0 && R345 = R373 && R346 = 0 && R347 = R373 && R348 = 0 && R349 = R373 && R350 = 0 && R351 = R373 && R352 = 0 && R353 = R373 && R354 = 0 && R355 = R373 && R356 = 0 && R357 = R373 && R358 = 0 && R359 = R373 && R360 = 0 && R361 = R373 && R362 = 0 && R363 = R373 && R364 = 0 && R365 = R373 && R366 = 0 && R367 = R373 && R368 = 0 && R369 = R373 && R370 = 0 && R371 = R373 && R372 = 0 && R0 != 0 && R12 < 1 && R254 < 1 && R255 < 1 && 0 < R295 && R373 < R301 && 0 < R307 && -1 < R339 && -1 < R373 && (R0 != R263 || R263 = 1 || R263 < 0) && (R263 != 1 || -1 < R0) && (R264 != 0 || ((R5 != 0 || ((R0 != R265 || R265 = 1 || R265 < 0) && (R0 = R265 || R265 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R265 || R265 = 1 || R265 < 0) && (R265 != 1 || -1 < R0) && (R0 = R265 || R265 = 1))))) && (R0 = R263 || R263 = 1) && (R259 = 0 || (R308 = 0 && R309 = 0)) && (R259 = 0 || (R310 = 0 && R311 = 0)) && (R261 = 0 || (R312 = 0 && R313 = 0)) && (R261 = 0 || (R314 = 0 && R315 = 0)) && (R264 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
