// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R37, R39, R40, R5, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R40 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R40 += 1 };
  s1 -> s1 [0, 43] { R40 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R40 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 60] { R64 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R64 += 1, R5 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s0 -> s3 [61, 61] { R64 += 1 };
  s0 -> s1 [62, 65535] { R64 += 1, R6 += 1 };
  s1 -> s1 [0, 60] { R64 += 1, R6 += 1 };
  s1 -> s3 [61, 61] { R64 += 1 };
  s1 -> s1 [62, 65535] { R64 += 1, R6 += 1 };
  s2 -> s1 [0, 60] { R64 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R64 += 1, R5 += 1, R6 += 1 };
  s2 -> s3 [61, 61] { R64 += 1 };
  s2 -> s1 [62, 65535] { R64 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R64 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [0, 65535] { R66 += 1, R54 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R66 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R37 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R56 += 1 };
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s0 -> s2 [9, 13] { R56 += 1 };
  s0 -> s1 [14, 31] { R56 += 1 };
  s0 -> s2 [32, 32] { R56 += 1 };
  s0 -> s1 [33, 65535] { R56 += 1 };
  s1 -> s1 [0, 65535] { R56 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R56 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R58 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R58 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R60 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s2 [9, 13] { R60 += 1 };
  s0 -> s1 [14, 31] { R60 += 1 };
  s0 -> s2 [32, 32] { R60 += 1 };
  s0 -> s1 [33, 65535] { R60 += 1 };
  s1 -> s1 [0, 65535] { R60 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R60 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s1 [0, 65535] { R62 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R62 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 - R64 = 1 && R5 = 0 && R39 = 0 && R40 = R64 && R63 = 0 && R0 != 0 && R6 != -1 && R37 < 1 && -1 < R64 && (R2 != 0 || ((R0 != R56 || R55 - R56 = -1 || R56 < 0) && (R0 = R56 || R0 < 1))) && (R2 != 0 || ((R0 != R58 || R57 - R58 = -1 || R58 < 0) && (R0 = R58 || R0 < 1))) && (R59 != 0 || ((R3 != 0 || ((R0 != R60 || R60 = 1 || R60 < 0) && (R0 = R60 || R60 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R60 || R60 = 1 || R60 < 0) && (R60 != 1 || -1 < R0) && (R0 = R60 || R60 = 1))))) && (R61 != 0 || ((R3 != 0 || ((R0 != R62 || R62 = 1 || R62 < 0) && (R0 = R62 || R62 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R62 || R62 = 1 || R62 < 0) && (R62 != 1 || -1 < R0) && (R0 = R62 || R62 = 1))))) && (R65 != 0 || R64 = R66 || (R54 = 0 && R64 = 0)) && (R2 = 0 || (R0 = R56 && R55 - R56 = -1)) && (R2 = 0 || (R0 = R58 && R57 - R58 = -1)) && (R59 = 0 || (R3 = 0 && R0 < 0)) && (R61 = 0 || (R3 = 0 && R0 < 0)) && (R65 = 0 || (R54 = 0 && R64 = 0));
// End of Parikh automata intersection problem
