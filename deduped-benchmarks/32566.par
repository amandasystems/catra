// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R136, R137, R2, R200, R201, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R3, R4, R6, R7;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [86, 86];
  s0 -> s0 [87, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [86, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R200 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 85];
  s0 -> s0 [0, 65535] { R201 += 1 };
  s0 -> s2 [86, 86];
  s0 -> s1 [87, 65535];
  s1 -> s1 [0, 85];
  s1 -> s2 [86, 86];
  s1 -> s1 [87, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R208 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s2 [9, 13] { R208 += 1 };
  s0 -> s1 [14, 31] { R208 += 1 };
  s0 -> s2 [32, 32] { R208 += 1 };
  s0 -> s1 [33, 65535] { R208 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R208 += 1 };
  s2 -> s1 [0, 65535] { R208 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s1 [0, 65535] { R210 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R210 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R212 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [9, 13] { R212 += 1 };
  s0 -> s1 [14, 31] { R212 += 1 };
  s0 -> s2 [32, 32] { R212 += 1 };
  s0 -> s1 [33, 65535] { R212 += 1 };
  s1 -> s1 [0, 65535] { R212 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R212 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s1 [0, 65535] { R214 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 85] { R224 += 1 };
  s0 -> s0 [0, 65535] { R223 += 1, R224 += 1 };
  s0 -> s1 [87, 65535] { R224 += 1 };
  s1 -> s1 [0, 85] { R224 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [87, 65535] { R224 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s0 -> s1 [0, 65535] { R226 += 1, R205 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R226 += 1, R205 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 86] { R228 += 1 };
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s0 -> s1 [91, 65535] { R228 += 1 };
  s1 -> s1 [0, 86] { R228 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R228 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s0 -> s1 [0, 65535] { R230 += 1, R206 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R230 += 1, R206 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 85] { R232 += 1 };
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s0 -> s2 [86, 86] { R232 += 1 };
  s0 -> s3 [86, 86] { R232 += 1 };
  s0 -> s1 [91, 65535] { R232 += 1 };
  s1 -> s1 [0, 85] { R232 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [86, 86] { R232 += 1 };
  s1 -> s3 [86, 86] { R232 += 1 };
  s1 -> s1 [91, 65535] { R232 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 86] { R232 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R232 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R137 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R137 += 1 };
  s1 -> s1 [0, 43] { R137 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R137 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 43] { R216 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s1 [45, 65535] { R216 += 1 };
  s1 -> s1 [0, 43] { R216 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R216 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s1 [0, 65535] { R218 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R218 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 60] { R220 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s3 [61, 61] { R220 += 1 };
  s0 -> s1 [62, 65535] { R220 += 1, R7 += 1 };
  s1 -> s1 [0, 60] { R220 += 1, R7 += 1 };
  s1 -> s3 [61, 61] { R220 += 1 };
  s1 -> s1 [62, 65535] { R220 += 1, R7 += 1 };
  s2 -> s1 [0, 60] { R220 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R220 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [61, 61] { R220 += 1 };
  s2 -> s1 [62, 65535] { R220 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R220 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R222 += 1, R204 += 1 };
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s1 -> s1 [0, 65535] { R222 += 1, R204 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P52
automaton P52_0 {
  init s0;
  s0 -> s1 [118, 118];
  accepting s1;
};
};
constraint R1 = R218 && R2 = R228 && R6 = 0 && R136 = 0 && R137 = R220 && R207 - R228 = -1 && R208 = R228 && R209 - R228 = -1 && R210 = R228 && R211 = 0 && R212 = 1 && R213 = 0 && R214 = 1 && R215 - R220 = 1 && R216 = R218 && R217 - R220 = 1 && R219 = 0 && R223 = 0 && R224 = R228 && R225 = 0 && R226 = R228 && R227 = 0 && R0 != 0 && R7 != -1 && R200 < 1 && R201 < 1 && R220 < R218 && -1 < R220 && 0 < R228 && (R221 != 0 || R220 = R222 || (R204 = 0 && R220 = 0)) && (R206 = 0 || (R229 = 0 && R230 = 0 && R231 = 0 && R232 = 0)) && (R221 = 0 || (R204 = 0 && R220 = 0));
// End of Parikh automata intersection problem
