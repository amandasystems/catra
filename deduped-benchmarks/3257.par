// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R14, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R18, R180, R181, R182, R183, R184, R185, R19, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R19 += 1 };
  s1 -> s1 [0, 60] { R19 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R141 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s2 [83, 83] { R141 += 1 };
  s0 -> s1 [84, 65535] { R141 += 1 };
  s1 -> s1 [0, 64] { R141 += 1 };
  s1 -> s2 [83, 83] { R141 += 1 };
  s1 -> s1 [84, 65535] { R141 += 1 };
  s2 -> s2 [0, 64] { R141 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R141 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R143 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 82] { R145 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s3 [83, 83] { R145 += 1 };
  s0 -> s1 [84, 65535] { R145 += 1 };
  s1 -> s1 [0, 82] { R145 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [83, 83] { R145 += 1 };
  s1 -> s1 [84, 65535] { R145 += 1 };
  s2 -> s1 [0, 82] { R145 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [83, 83] { R145 += 1 };
  s2 -> s1 [84, 65535] { R145 += 1 };
  s3 -> s3 [0, 65535] { R145 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R147 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R114 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s3 [9, 13] { R147 += 1, R115 += 1 };
  s0 -> s1 [14, 31] { R147 += 1, R115 += 1 };
  s0 -> s3 [32, 32] { R147 += 1, R115 += 1 };
  s0 -> s1 [33, 65535] { R147 += 1, R115 += 1 };
  s1 -> s5 [0, 65535] { R147 += 1 };
  s1 -> s1 [0, 65535] { R147 += 1, R115 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R147 += 1, R115 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R114 += 1, R115 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R147 += 1, R115 += 1 };
  s2 -> s1 [14, 31] { R147 += 1, R115 += 1 };
  s2 -> s3 [32, 32] { R147 += 1, R115 += 1 };
  s2 -> s1 [33, 65535] { R147 += 1, R115 += 1 };
  s3 -> s1 [0, 65535] { R147 += 1, R115 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R147 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s1 [0, 65535] { R149 += 1, R117 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R116 += 1, R117 += 1 };
  s1 -> s4 [0, 65535] { R149 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R149 += 1, R117 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R149 += 1, R117 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R149 += 1, R116 += 1, R117 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R149 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R151 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R118 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s3 [9, 13] { R151 += 1, R119 += 1 };
  s0 -> s1 [14, 31] { R151 += 1, R119 += 1 };
  s0 -> s3 [32, 32] { R151 += 1, R119 += 1 };
  s0 -> s1 [33, 65535] { R151 += 1, R119 += 1 };
  s1 -> s1 [0, 65535] { R151 += 1, R119 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R151 += 1 };
  s2 -> s1 [0, 8] { R151 += 1, R119 += 1 };
  s2 -> s2 [0, 65535] { R151 += 1, R118 += 1, R119 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R151 += 1, R119 += 1 };
  s2 -> s1 [14, 31] { R151 += 1, R119 += 1 };
  s2 -> s3 [32, 32] { R151 += 1, R119 += 1 };
  s2 -> s1 [33, 65535] { R151 += 1, R119 += 1 };
  s3 -> s1 [0, 65535] { R151 += 1, R119 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R151 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s1 [0, 65535] { R153 += 1, R121 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R153 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R153 += 1, R121 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R153 += 1, R121 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R153 += 1, R120 += 1, R121 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R153 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 82] { R155 += 1, R131 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R130 += 1, R131 += 1 };
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s0 -> s3 [83, 83] { R155 += 1, R131 += 1 };
  s0 -> s1 [84, 65535] { R155 += 1, R131 += 1 };
  s1 -> s1 [0, 82] { R155 += 1, R131 += 1 };
  s1 -> s3 [83, 83] { R155 += 1, R131 += 1 };
  s1 -> s1 [84, 65535] { R155 += 1, R131 += 1 };
  s2 -> s1 [0, 82] { R155 += 1, R131 += 1 };
  s2 -> s2 [0, 65535] { R155 += 1, R130 += 1, R131 += 1 };
  s2 -> s3 [83, 83] { R155 += 1, R131 += 1 };
  s2 -> s1 [84, 65535] { R155 += 1, R131 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R155 += 1, R131 += 1 };
  s3 -> s5 [0, 65535] { R155 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R155 += 1 };
  accepting s3, s4, s5;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R157 += 1, R133 += 1, R103 += 1 };
  s0 -> s2 [0, 65535] { R157 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s1 -> s4 [0, 65535] { R157 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R157 += 1, R133 += 1, R103 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R157 += 1, R133 += 1, R103 += 1 };
  s2 -> s2 [0, 65535] { R157 += 1, R132 += 1, R133 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R157 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R163 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s2 [84, 84] { R163 += 1 };
  s0 -> s1 [85, 65535] { R163 += 1 };
  s1 -> s1 [0, 64] { R163 += 1 };
  s1 -> s2 [84, 84] { R163 += 1 };
  s1 -> s1 [85, 65535] { R163 += 1 };
  s2 -> s2 [0, 64] { R163 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [84, 65535] { R163 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s1 [0, 65535] { R165 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R165 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 83] { R167 += 1 };
  s0 -> s2 [0, 65535] { R167 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s3 [84, 84] { R167 += 1 };
  s0 -> s1 [85, 65535] { R167 += 1 };
  s1 -> s1 [0, 83] { R167 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R167 += 1 };
  s1 -> s1 [85, 65535] { R167 += 1 };
  s2 -> s1 [0, 83] { R167 += 1 };
  s2 -> s2 [0, 65535] { R167 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [84, 84] { R167 += 1 };
  s2 -> s1 [85, 65535] { R167 += 1 };
  s3 -> s3 [0, 65535] { R167 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R169 += 1, R123 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R122 += 1, R123 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s3 [9, 13] { R169 += 1, R123 += 1 };
  s0 -> s1 [14, 31] { R169 += 1, R123 += 1 };
  s0 -> s3 [32, 32] { R169 += 1, R123 += 1 };
  s0 -> s1 [33, 65535] { R169 += 1, R123 += 1 };
  s1 -> s5 [0, 65535] { R169 += 1 };
  s1 -> s1 [0, 65535] { R169 += 1, R123 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R169 += 1, R123 += 1 };
  s2 -> s2 [0, 65535] { R169 += 1, R122 += 1, R123 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R169 += 1, R123 += 1 };
  s2 -> s1 [14, 31] { R169 += 1, R123 += 1 };
  s2 -> s3 [32, 32] { R169 += 1, R123 += 1 };
  s2 -> s1 [33, 65535] { R169 += 1, R123 += 1 };
  s3 -> s1 [0, 65535] { R169 += 1, R123 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R169 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R171 += 1, R125 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R124 += 1, R125 += 1 };
  s1 -> s1 [0, 65535] { R171 += 1, R125 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R171 += 1 };
  s2 -> s1 [0, 65535] { R171 += 1, R125 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R171 += 1, R124 += 1, R125 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R171 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R173 += 1, R127 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s3 [9, 13] { R173 += 1, R127 += 1 };
  s0 -> s1 [14, 31] { R173 += 1, R127 += 1 };
  s0 -> s3 [32, 32] { R173 += 1, R127 += 1 };
  s0 -> s1 [33, 65535] { R173 += 1, R127 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R173 += 1, R127 += 1 };
  s1 -> s5 [0, 65535] { R173 += 1 };
  s2 -> s1 [0, 8] { R173 += 1, R127 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R173 += 1, R126 += 1, R127 += 1 };
  s2 -> s3 [9, 13] { R173 += 1, R127 += 1 };
  s2 -> s1 [14, 31] { R173 += 1, R127 += 1 };
  s2 -> s3 [32, 32] { R173 += 1, R127 += 1 };
  s2 -> s1 [33, 65535] { R173 += 1, R127 += 1 };
  s3 -> s1 [0, 65535] { R173 += 1, R127 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R173 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R175 += 1, R128 += 1, R129 += 1 };
  s0 -> s2 [0, 65535] { R175 += 1, R129 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s1 -> s1 [0, 65535] { R175 += 1, R128 += 1, R129 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R175 += 1, R129 += 1, R9 += 1 };
  s2 -> s3 [0, 65535] { R175 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R175 += 1, R129 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R175 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 83] { R177 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R177 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R176 += 1, R177 += 1 };
  s0 -> s1 [85, 65535] { R177 += 1, R135 += 1 };
  s1 -> s1 [0, 83] { R177 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R177 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R177 += 1, R135 += 1 };
  s2 -> s1 [0, 83] { R177 += 1, R135 += 1 };
  s2 -> s2 [0, 65535] { R177 += 1, R134 += 1, R135 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R177 += 1, R135 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R179 += 1, R137 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R178 += 1, R179 += 1 };
  s0 -> s2 [0, 65535] { R179 += 1, R136 += 1, R137 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R179 += 1, R137 += 1, R104 += 1 };
  s1 -> s4 [0, 65535] { R179 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R179 += 1, R137 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R179 += 1, R136 += 1, R137 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R179 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 84] { R181 += 1, R139 += 1 };
  s0 -> s2 [0, 65535] { R181 += 1, R138 += 1, R139 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s1 [91, 65535] { R181 += 1, R139 += 1 };
  s1 -> s1 [0, 84] { R181 += 1, R139 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R181 += 1 };
  s1 -> s1 [91, 65535] { R181 += 1, R139 += 1 };
  s2 -> s1 [0, 84] { R181 += 1, R139 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R181 += 1, R138 += 1, R139 += 1 };
  s2 -> s1 [91, 65535] { R181 += 1, R139 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R183 += 1, R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R183 += 1, R159 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s1 -> s1 [0, 65535] { R183 += 1, R158 += 1, R159 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R183 += 1, R159 += 1, R105 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R183 += 1, R159 += 1, R105 += 1 };
  s2 -> s4 [0, 65535] { R183 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R183 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 83] { R185 += 1, R161 += 1 };
  s0 -> s2 [0, 65535] { R185 += 1, R160 += 1, R161 += 1 };
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s0 -> s3 [84, 84] { R185 += 1, R161 += 1 };
  s0 -> s4 [84, 84] { R185 += 1, R161 += 1 };
  s0 -> s1 [91, 65535] { R185 += 1, R161 += 1 };
  s1 -> s1 [0, 83] { R185 += 1, R161 += 1 };
  s1 -> s1 [0, 65535] { R185 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R185 += 1, R161 += 1 };
  s1 -> s4 [84, 84] { R185 += 1, R161 += 1 };
  s1 -> s1 [91, 65535] { R185 += 1, R161 += 1 };
  s2 -> s1 [0, 83] { R185 += 1, R161 += 1 };
  s2 -> s2 [0, 65535] { R185 += 1, R160 += 1, R161 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R185 += 1, R161 += 1 };
  s2 -> s4 [84, 84] { R185 += 1, R161 += 1 };
  s2 -> s1 [91, 65535] { R185 += 1, R161 += 1 };
  s3 -> s3 [0, 84] { R185 += 1, R161 += 1 };
  s3 -> s3 [0, 65535] { R185 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R185 += 1, R161 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R185 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R107 += 1 };
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s0 -> s2 [9, 13] { R107 += 1 };
  s0 -> s1 [14, 31] { R107 += 1 };
  s0 -> s2 [32, 32] { R107 += 1 };
  s0 -> s1 [33, 65535] { R107 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R107 += 1 };
  s2 -> s1 [0, 65535] { R107 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R109 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R108 += 1, R109 += 1 };
  s1 -> s1 [0, 65535] { R109 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R111 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s2 [9, 13] { R111 += 1 };
  s0 -> s1 [14, 31] { R111 += 1 };
  s0 -> s2 [32, 32] { R111 += 1 };
  s0 -> s1 [33, 65535] { R111 += 1 };
  s1 -> s1 [0, 65535] { R111 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R111 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R113 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R113 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = R133 && R2 = R139 && R3 = R157 && R18 = 0 && R19 = R185 && R114 - R133 = -1 && R115 = R133 && R116 - R133 = -1 && R117 = R133 && R118 = 0 && R119 = 1 && R120 = 0 && R121 = 1 && R122 - R139 = -1 && R123 = R139 && R124 - R139 = -1 && R125 = R139 && R126 = 0 && R127 = 1 && R128 = 0 && R129 = 1 && R130 = 0 && R131 = R133 && R132 = 0 && R134 = 0 && R135 = R139 && R136 = 0 && R137 = R139 && R138 = 0 && R140 - R185 = 1 && R141 = R157 && R142 - R185 = 1 && R143 = R157 && R144 - R185 = 1 && R145 = R157 && R146 - R185 = 1 && R147 = R157 && R148 - R185 = 1 && R149 = R157 && R150 - R185 = 1 && R151 = R157 && R152 - R185 = 1 && R153 = R157 && R154 - R185 = 1 && R155 = R157 && R156 - R185 = 1 && R162 = 0 && R163 = R185 && R164 = 0 && R165 = R185 && R166 = 0 && R167 = R185 && R168 = 0 && R169 = R185 && R170 = 0 && R171 = R185 && R172 = 0 && R173 = R185 && R174 = 0 && R175 = R185 && R176 = 0 && R177 = R185 && R178 = 0 && R179 = R185 && R180 = 0 && R181 = R185 && R182 = 0 && R183 = R185 && R184 = 0 && R0 != 0 && R10 < 1 && R11 < 1 && R14 < 1 && 0 < R133 && 0 < R139 && R185 < R157 && -1 < R185 && (R4 != 0 || ((R0 != R107 || R106 - R107 = -1 || R107 < 0) && (R0 = R107 || R0 < 1))) && (R4 != 0 || ((R0 != R109 || R108 - R109 = -1 || R109 < 0) && (R0 = R109 || R0 < 1))) && (R110 != 0 || ((R5 != 0 || ((R0 != R111 || R111 = 1 || R111 < 0) && (R0 = R111 || R111 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R111 || R111 = 1 || R111 < 0) && (R111 != 1 || -1 < R0) && (R0 = R111 || R111 = 1))))) && (R112 != 0 || ((R5 != 0 || ((R0 != R113 || R113 = 1 || R113 < 0) && (R0 = R113 || R113 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R113 || R113 = 1 || R113 < 0) && (R113 != 1 || -1 < R0) && (R0 = R113 || R113 = 1))))) && (R4 = 0 || (R0 = R107 && R106 - R107 = -1)) && (R4 = 0 || (R0 = R109 && R108 - R109 = -1)) && (R105 = 0 || (R158 = 0 && R159 = 0)) && (R105 = 0 || (R160 = 0 && R161 = 0)) && (R110 = 0 || (R5 = 0 && R0 < 0)) && (R112 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
