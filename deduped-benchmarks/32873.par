// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R5, R6;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [89, 89];
  s0 -> s0 [90, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [89, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R3 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 88] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [89, 89];
  s0 -> s1 [90, 65535] { R6 += 1 };
  s1 -> s1 [0, 88] { R6 += 1 };
  s1 -> s2 [89, 89];
  s1 -> s1 [90, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R22 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s2 [9, 13] { R22 += 1 };
  s0 -> s1 [14, 31] { R22 += 1 };
  s0 -> s2 [32, 32] { R22 += 1 };
  s0 -> s1 [33, 65535] { R22 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R22 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R24 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R24 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R26 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s2 [9, 13] { R26 += 1 };
  s0 -> s1 [14, 31] { R26 += 1 };
  s0 -> s2 [32, 32] { R26 += 1 };
  s0 -> s1 [33, 65535] { R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R26 += 1 };
  s2 -> s1 [0, 65535] { R26 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 88] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [89, 89] { R30 += 1 };
  s0 -> s1 [90, 65535] { R30 += 1 };
  s1 -> s1 [0, 88] { R30 += 1 };
  s1 -> s2 [89, 89] { R30 += 1 };
  s1 -> s1 [90, 65535] { R30 += 1 };
  s2 -> s2 [0, 65535] { R30 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R32 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R32 += 1, R20 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R30 && R5 = 0 && R6 - R29 = -1 && R21 - R30 = -1 && R22 = R30 && R23 - R30 = -1 && R24 = R30 && R25 = 0 && R26 = 1 && R27 = 0 && R28 = 1 && R3 < 1 && R29 - R30 < 1 && -1 < R29 && 0 < R30 && (R29 != R31 || R30 = R32 || ((R20 != 0 || R30 - R31 < 1 || R31 < 0) && (R20 = 0 || R30 < R31 || R31 < 0))) && (R29 = R31 || (R20 = 0 && R29 = R30));
// End of Parikh automata intersection problem
