// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R175, R178, R179, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R3, R4, R6, R7;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [90, 90];
  s0 -> s0 [91, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [90, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R178 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 89];
  s0 -> s0 [0, 65535] { R179 += 1 };
  s0 -> s2 [90, 90];
  s0 -> s1 [91, 65535];
  s1 -> s1 [0, 89];
  s1 -> s2 [90, 90];
  s1 -> s1 [91, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R184 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s0 -> s2 [9, 13] { R184 += 1 };
  s0 -> s1 [14, 31] { R184 += 1 };
  s0 -> s2 [32, 32] { R184 += 1 };
  s0 -> s1 [33, 65535] { R184 += 1 };
  s1 -> s1 [0, 65535] { R184 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R184 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R186 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s1 -> s1 [0, 65535] { R186 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R188 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s2 [9, 13] { R188 += 1 };
  s0 -> s1 [14, 31] { R188 += 1 };
  s0 -> s2 [32, 32] { R188 += 1 };
  s0 -> s1 [33, 65535] { R188 += 1 };
  s1 -> s1 [0, 65535] { R188 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R188 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s1 [0, 65535] { R190 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R190 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 89] { R206 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s2 [90, 90] { R206 += 1 };
  s0 -> s1 [91, 65535] { R206 += 1 };
  s1 -> s1 [0, 89] { R206 += 1 };
  s1 -> s2 [90, 90] { R206 += 1 };
  s1 -> s1 [91, 65535] { R206 += 1 };
  s2 -> s2 [0, 65535] { R206 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s1 [0, 65535] { R208 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R208 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 89] { R210 += 1 };
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s2 [0, 65535] { R210 += 1, R175 += 1 };
  s0 -> s3 [90, 90] { R210 += 1 };
  s0 -> s1 [91, 65535] { R210 += 1 };
  s1 -> s1 [0, 89] { R210 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [90, 90] { R210 += 1 };
  s1 -> s1 [91, 65535] { R210 += 1 };
  s2 -> s1 [0, 89] { R210 += 1 };
  s2 -> s2 [0, 65535] { R210 += 1, R175 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [90, 90] { R210 += 1 };
  s2 -> s1 [91, 65535] { R210 += 1 };
  s3 -> s3 [0, 65535] { R210 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 89] { R212 += 1, R196 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [0, 65535] { R212 += 1, R195 += 1, R196 += 1 };
  s0 -> s3 [90, 90] { R212 += 1, R196 += 1 };
  s0 -> s1 [91, 65535] { R212 += 1, R196 += 1 };
  s1 -> s1 [0, 89] { R212 += 1, R196 += 1 };
  s1 -> s3 [90, 90] { R212 += 1, R196 += 1 };
  s1 -> s1 [91, 65535] { R212 += 1, R196 += 1 };
  s2 -> s1 [0, 89] { R212 += 1, R196 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1, R195 += 1, R196 += 1 };
  s2 -> s3 [90, 90] { R212 += 1, R196 += 1 };
  s2 -> s1 [91, 65535] { R212 += 1, R196 += 1 };
  s3 -> s4 [0, 65535] { R212 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R212 += 1, R196 += 1 };
  s4 -> s4 [0, 65535] { R212 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R214 += 1, R198 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R197 += 1, R198 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R198 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R214 += 1 };
  s2 -> s1 [0, 65535] { R214 += 1, R198 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R214 += 1, R197 += 1, R198 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R214 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 89] { R216 += 1, R200 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R199 += 1, R200 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s3 [0, 65535] { R216 += 1, R200 += 1, R6 += 1, R7 += 1 };
  s0 -> s4 [90, 90] { R216 += 1, R200 += 1 };
  s0 -> s1 [91, 65535] { R216 += 1, R200 += 1, R7 += 1 };
  s1 -> s1 [0, 89] { R216 += 1, R200 += 1, R7 += 1 };
  s1 -> s4 [90, 90] { R216 += 1, R200 += 1 };
  s1 -> s1 [91, 65535] { R216 += 1, R200 += 1, R7 += 1 };
  s2 -> s1 [0, 89] { R216 += 1, R200 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R216 += 1, R199 += 1, R200 += 1 };
  s2 -> s3 [0, 65535] { R216 += 1, R200 += 1, R6 += 1, R7 += 1 };
  s2 -> s4 [90, 90] { R216 += 1, R200 += 1 };
  s2 -> s1 [91, 65535] { R216 += 1, R200 += 1, R7 += 1 };
  s3 -> s1 [0, 89] { R216 += 1, R200 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R216 += 1, R200 += 1, R6 += 1, R7 += 1 };
  s3 -> s4 [90, 90] { R216 += 1, R200 += 1 };
  s3 -> s1 [91, 65535] { R216 += 1, R200 += 1, R7 += 1 };
  s4 -> s5 [0, 65535] { R216 += 1 };
  s4 -> s4 [0, 65535] { R216 += 1, R200 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R216 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 89] { R218 += 1, R202 += 1, R192 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R202 += 1, R191 += 1, R192 += 1 };
  s0 -> s3 [0, 65535] { R218 += 1, R201 += 1, R202 += 1 };
  s0 -> s4 [90, 90] { R218 += 1, R202 += 1, R192 += 1 };
  s0 -> s1 [91, 65535] { R218 += 1, R202 += 1, R192 += 1 };
  s1 -> s1 [0, 89] { R218 += 1, R202 += 1, R192 += 1 };
  s1 -> s4 [90, 90] { R218 += 1, R202 += 1, R192 += 1 };
  s1 -> s1 [91, 65535] { R218 += 1, R202 += 1, R192 += 1 };
  s2 -> s1 [0, 89] { R218 += 1, R202 += 1, R192 += 1 };
  s2 -> s2 [0, 65535] { R218 += 1, R202 += 1, R191 += 1, R192 += 1 };
  s2 -> s4 [90, 90] { R218 += 1, R202 += 1, R192 += 1 };
  s2 -> s1 [91, 65535] { R218 += 1, R202 += 1, R192 += 1 };
  s3 -> s1 [0, 89] { R218 += 1, R202 += 1, R192 += 1 };
  s3 -> s2 [0, 65535] { R218 += 1, R202 += 1, R191 += 1, R192 += 1 };
  s3 -> s3 [0, 65535] { R218 += 1, R201 += 1, R202 += 1 };
  s3 -> s4 [90, 90] { R218 += 1, R202 += 1, R192 += 1 };
  s3 -> s1 [91, 65535] { R218 += 1, R202 += 1, R192 += 1 };
  s4 -> s4 [0, 65535] { R218 += 1, R202 += 1, R192 += 1 };
  s4 -> s5 [0, 65535] { R218 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R218 += 1, R202 += 1 };
  s5 -> s5 [0, 65535] { R218 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R218 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R218 += 1, R202 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R220 += 1, R204 += 1, R193 += 1, R194 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R204 += 1, R194 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s3 [0, 65535] { R220 += 1, R203 += 1, R204 += 1 };
  s1 -> s6 [0, 65535] { R220 += 1 };
  s1 -> s1 [0, 65535] { R220 += 1, R204 += 1, R193 += 1, R194 += 1 };
  s1 -> s2 [0, 65535] { R220 += 1, R204 += 1, R194 += 1, R182 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R220 += 1, R204 += 1 };
  s2 -> s6 [0, 65535] { R220 += 1 };
  s2 -> s2 [0, 65535] { R220 += 1, R204 += 1, R194 += 1, R182 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R220 += 1, R204 += 1, R193 += 1, R194 += 1 };
  s3 -> s2 [0, 65535] { R220 += 1, R204 += 1, R194 += 1, R182 += 1 };
  s3 -> s3 [0, 65535] { R220 += 1, R203 += 1, R204 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R220 += 1, R204 += 1 };
  s5 -> s6 [0, 65535] { R220 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R220 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R192 && R1 = R202 && R2 = R220 && R6 = 0 && R7 - R191 = -1 && R183 - R220 = -1 && R184 = R220 && R185 - R220 = -1 && R186 = R220 && R187 = 0 && R188 = 1 && R189 = 0 && R190 = 1 && R195 = 0 && R196 = R202 && R199 = 0 && R200 = R202 && R201 = 0 && R205 = 0 && R206 = R220 && R207 = 0 && R208 = R220 && R209 = 0 && R210 = R220 && R211 = 0 && R212 = R220 && R213 = 0 && R214 = R220 && R215 = 0 && R216 = R220 && R217 = 0 && R218 = R220 && R219 = 0 && R175 < 1 && R178 < 1 && R179 < 1 && R191 - R192 < 1 && -1 < R191 && -1 < R202 && 0 < R220 && (R191 != R193 || R192 = R194 || ((R182 != 0 || R192 - R193 < 1 || R193 < 0) && (R182 = 0 || R192 < R193 || R193 < 0))) && (R197 != 0 || R198 = R202 || (R192 = 0 && (R191 != 0 || R202 < 1))) && (R203 != 0 || R202 = R204 || (R192 = 0 && (R191 != 0 || R202 < 1))) && (R191 = R193 || (R182 = 0 && R191 = R192)) && (R197 = 0 || (R192 = 0 && (R191 != 0 || R202 < 1))) && (R203 = 0 || (R192 = 0 && (R191 != 0 || R202 < 1)));
// End of Parikh automata intersection problem
