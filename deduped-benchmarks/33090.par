// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R5, R6, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95;
synchronised {  // Automata constraining c10
automaton c10_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s1 [32, 32] { R21 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R73 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s2 [65, 65] { R73 += 1 };
  s0 -> s1 [66, 65535] { R73 += 1 };
  s1 -> s1 [0, 64] { R73 += 1 };
  s1 -> s2 [65, 65] { R73 += 1 };
  s1 -> s1 [66, 65535] { R73 += 1 };
  s2 -> s2 [0, 65535] { R73 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R75 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 64] { R77 += 1 };
  s0 -> s2 [0, 65535] { R77 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s3 [65, 65] { R77 += 1 };
  s0 -> s1 [66, 65535] { R77 += 1 };
  s1 -> s1 [0, 64] { R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R77 += 1 };
  s1 -> s1 [66, 65535] { R77 += 1 };
  s2 -> s1 [0, 64] { R77 += 1 };
  s2 -> s2 [0, 65535] { R77 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R77 += 1 };
  s2 -> s1 [66, 65535] { R77 += 1 };
  s3 -> s3 [0, 65535] { R77 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R79 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R79 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s3 [9, 13] { R79 += 1, R13 += 1 };
  s0 -> s1 [14, 31] { R79 += 1, R13 += 1 };
  s0 -> s3 [32, 32] { R79 += 1, R13 += 1 };
  s0 -> s1 [33, 65535] { R79 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R13 += 1 };
  s1 -> s5 [0, 65535] { R79 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R79 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R79 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R79 += 1, R13 += 1 };
  s2 -> s1 [14, 31] { R79 += 1, R13 += 1 };
  s2 -> s3 [32, 32] { R79 += 1, R13 += 1 };
  s2 -> s1 [33, 65535] { R79 += 1, R13 += 1 };
  s3 -> s1 [0, 65535] { R79 += 1, R13 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R79 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R15 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s2 [0, 65535] { R81 += 1, R14 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R81 += 1, R15 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R81 += 1 };
  s2 -> s1 [0, 65535] { R81 += 1, R15 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R81 += 1, R14 += 1, R15 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R81 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R83 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R83 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R83 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R83 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R83 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R83 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R83 += 1 };
  s1 -> s1 [0, 65535] { R83 += 1, R17 += 1 };
  s2 -> s1 [0, 8] { R83 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R83 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R83 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R83 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R83 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R83 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R83 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R83 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s1 [0, 65535] { R85 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R18 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R85 += 1, R19 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R85 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R85 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R85 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R85 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 64] { R87 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [66, 65535] { R87 += 1, R63 += 1 };
  s1 -> s1 [0, 64] { R87 += 1, R63 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R87 += 1 };
  s1 -> s1 [66, 65535] { R87 += 1, R63 += 1 };
  s2 -> s1 [0, 64] { R87 += 1, R63 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R87 += 1, R62 += 1, R63 += 1 };
  s2 -> s1 [66, 65535] { R87 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s0 -> s1 [0, 65535] { R89 += 1, R64 += 1, R65 += 1 };
  s0 -> s2 [0, 65535] { R89 += 1, R65 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R64 += 1, R65 += 1 };
  s1 -> s2 [0, 65535] { R89 += 1, R65 += 1, R10 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R89 += 1 };
  s2 -> s2 [0, 65535] { R89 += 1, R65 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R89 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R91 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [0, 65535] { R91 += 1, R66 += 1, R67 += 1 };
  s0 -> s1 [70, 65535] { R91 += 1, R67 += 1 };
  s1 -> s1 [0, 65] { R91 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R91 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [70, 65535] { R91 += 1, R67 += 1 };
  s2 -> s1 [0, 65] { R91 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R91 += 1, R66 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [70, 65535] { R91 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R93 += 1, R69 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R93 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R69 += 1, R11 += 1 };
  s1 -> s4 [0, 65535] { R93 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R93 += 1, R69 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R93 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R93 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 64] { R95 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R95 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s3 [65, 65] { R95 += 1, R71 += 1 };
  s0 -> s4 [65, 65] { R95 += 1, R71 += 1 };
  s0 -> s5 [70, 70] { R95 += 1, R71 += 1 };
  s0 -> s1 [71, 65535] { R95 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R95 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R95 += 1, R71 += 1 };
  s1 -> s4 [65, 65] { R95 += 1, R71 += 1 };
  s1 -> s5 [70, 70] { R95 += 1, R71 += 1 };
  s1 -> s1 [71, 65535] { R95 += 1, R71 += 1 };
  s2 -> s1 [0, 64] { R95 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R95 += 1, R70 += 1, R71 += 1 };
  s2 -> s3 [65, 65] { R95 += 1, R71 += 1 };
  s2 -> s4 [65, 65] { R95 += 1, R71 += 1 };
  s2 -> s5 [70, 70] { R95 += 1, R71 += 1 };
  s2 -> s1 [71, 65535] { R95 += 1, R71 += 1 };
  s3 -> s3 [0, 65] { R95 += 1, R71 += 1 };
  s3 -> s8 [70, 70] { R95 += 1, R71 += 1 };
  s3 -> s3 [71, 65535] { R95 += 1, R71 += 1 };
  s5 -> s5 [0, 64] { R95 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R95 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R95 += 1, R71 += 1 };
  s5 -> s8 [65, 65] { R95 += 1, R71 += 1 };
  s5 -> s5 [70, 65535] { R95 += 1, R71 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R95 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R95 += 1, R71 += 1 };
  s8 -> s8 [0, 65535] { R95 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [70, 65535] { R95 += 1, R71 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R0 = R67 && R1 - R95 = 1 && R12 - R67 = -1 && R13 = R67 && R14 - R67 = -1 && R15 = R67 && R16 = 0 && R17 = 1 && R18 = 0 && R19 = 1 && R20 = R95 && R21 - R95 = 1 && R22 = R95 && R23 - R95 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R62 = 0 && R63 = R67 && R64 = 0 && R65 = R67 && R66 = 0 && R70 = 0 && R71 = 0 && R72 = 0 && R73 = R95 && R74 = 0 && R75 = R95 && R76 = 0 && R77 = R95 && R78 = 0 && R79 = R95 && R80 = 0 && R81 = R95 && R82 = 0 && R83 = R95 && R84 = 0 && R85 = R95 && R86 = 0 && R87 = R95 && R88 = 0 && R89 = R95 && R90 = 0 && R91 = R95 && R92 = 0 && R93 = R95 && R94 = 0 && R6 < 1 && R9 < 1 && 0 < R67 && -1 < R95 && (R11 = 0 || (R68 = 0 && R69 = 0));
// End of Parikh automata intersection problem
