// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R6;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [85, 85];
  s0 -> s0 [86, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [85, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R3 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 84] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [85, 85];
  s0 -> s1 [86, 65535] { R6 += 1 };
  s1 -> s1 [0, 84] { R6 += 1 };
  s1 -> s2 [85, 85];
  s1 -> s1 [86, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R40 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s2 [9, 13] { R40 += 1 };
  s0 -> s1 [14, 31] { R40 += 1 };
  s0 -> s2 [32, 32] { R40 += 1 };
  s0 -> s1 [33, 65535] { R40 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R40 += 1 };
  s2 -> s1 [0, 65535] { R40 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s1 [0, 65535] { R42 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R42 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R44 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s2 [9, 13] { R44 += 1 };
  s0 -> s1 [14, 31] { R44 += 1 };
  s0 -> s2 [32, 32] { R44 += 1 };
  s0 -> s1 [33, 65535] { R44 += 1 };
  s1 -> s1 [0, 65535] { R44 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R44 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s0 -> s1 [0, 65535] { R46 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R46 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 84] { R48 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s0 -> s1 [86, 65535] { R48 += 1 };
  s1 -> s1 [0, 84] { R48 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R48 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R50 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535] { R50 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 85] { R52 += 1 };
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s2 [88, 88] { R52 += 1 };
  s0 -> s1 [89, 65535] { R52 += 1 };
  s1 -> s1 [0, 85] { R52 += 1 };
  s1 -> s2 [88, 88] { R52 += 1 };
  s1 -> s1 [89, 65535] { R52 += 1 };
  s2 -> s2 [0, 85] { R52 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R52 += 1 };
  accepting s2;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R53 += 1, R54 += 1 };
  s0 -> s1 [0, 65535] { R54 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R54 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 84] { R56 += 1 };
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s0 -> s2 [85, 85] { R56 += 1 };
  s0 -> s3 [85, 85] { R56 += 1 };
  s0 -> s1 [89, 65535] { R56 += 1 };
  s1 -> s1 [0, 84] { R56 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R56 += 1 };
  s1 -> s3 [85, 85] { R56 += 1 };
  s1 -> s1 [89, 65535] { R56 += 1 };
  s2 -> s2 [0, 85] { R56 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [89, 65535] { R56 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P49
automaton P49_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R0 = R52 && R5 = 0 && R6 - R51 = -1 && R39 - R52 = -1 && R40 = R52 && R41 - R52 = -1 && R42 = R52 && R43 = 0 && R44 = 1 && R45 = 0 && R46 = 1 && R3 < 1 && R51 - R52 < 1 && -1 < R51 && 0 < R52 && (R38 != 0 || ((R53 != 0 || ((R55 != 0 || ((R51 != R56 || R54 = R56 || R52 < R56 || R56 < 1) && (R51 = R56 || R51 < 1))) && (R55 = 0 || R51 < 1))) && (R53 = 0 || R51 < 1))) && (R47 != R51 || R48 = R52 || (R37 = 0 && R51 = R52)) && (R49 != R51 || R50 = R52 || (R37 = 0 && R51 = R52)) && (R38 = 0 || (R51 = R56 && R53 = 0 && R55 = 0 && (R54 = R56 || R52 < R56 || R56 < 0))) && (R47 = R51 || (R37 = 0 && R51 = R52)) && (R49 = R51 || (R37 = 0 && R51 = R52));
// End of Parikh automata intersection problem
