// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R13, R14, R2, R3, R4, R5, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [90, 90];
  s0 -> s0 [91, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [90, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 89] { R14 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s2 [90, 90];
  s0 -> s1 [91, 65535] { R14 += 1 };
  s1 -> s1 [0, 89] { R14 += 1 };
  s1 -> s2 [90, 90];
  s1 -> s1 [91, 65535] { R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R56 += 1 };
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s0 -> s2 [9, 13] { R56 += 1 };
  s0 -> s1 [14, 31] { R56 += 1 };
  s0 -> s2 [32, 32] { R56 += 1 };
  s0 -> s1 [33, 65535] { R56 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R56 += 1 };
  s2 -> s1 [0, 65535] { R56 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R58 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R58 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R60 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s2 [9, 13] { R60 += 1 };
  s0 -> s1 [14, 31] { R60 += 1 };
  s0 -> s2 [32, 32] { R60 += 1 };
  s0 -> s1 [33, 65535] { R60 += 1 };
  s1 -> s1 [0, 65535] { R60 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R60 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R62 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R62 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 89] { R78 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [90, 90] { R78 += 1 };
  s0 -> s1 [91, 65535] { R78 += 1 };
  s1 -> s1 [0, 89] { R78 += 1 };
  s1 -> s2 [90, 90] { R78 += 1 };
  s1 -> s1 [91, 65535] { R78 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R78 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s1 [0, 65535] { R80 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R80 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 89] { R82 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s3 [90, 90] { R82 += 1 };
  s0 -> s1 [91, 65535] { R82 += 1 };
  s1 -> s1 [0, 89] { R82 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [90, 90] { R82 += 1 };
  s1 -> s1 [91, 65535] { R82 += 1 };
  s2 -> s1 [0, 89] { R82 += 1 };
  s2 -> s2 [0, 65535] { R82 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [90, 90] { R82 += 1 };
  s2 -> s1 [91, 65535] { R82 += 1 };
  s3 -> s3 [0, 65535] { R82 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 89] { R84 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R84 += 1, R67 += 1, R68 += 1 };
  s0 -> s3 [90, 90] { R84 += 1, R68 += 1 };
  s0 -> s1 [91, 65535] { R84 += 1, R68 += 1 };
  s1 -> s1 [0, 89] { R84 += 1, R68 += 1 };
  s1 -> s3 [90, 90] { R84 += 1, R68 += 1 };
  s1 -> s1 [91, 65535] { R84 += 1, R68 += 1 };
  s2 -> s1 [0, 89] { R84 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R67 += 1, R68 += 1 };
  s2 -> s3 [90, 90] { R84 += 1, R68 += 1 };
  s2 -> s1 [91, 65535] { R84 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R84 += 1, R68 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R84 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R84 += 1 };
  accepting s3, s4, s5;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R86 += 1, R69 += 1, R70 += 1 };
  s0 -> s2 [0, 65535] { R86 += 1, R70 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535] { R86 += 1, R69 += 1, R70 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R86 += 1, R70 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R86 += 1, R70 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R86 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R86 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 89] { R88 += 1, R72 += 1 };
  s0 -> s2 [0, 65535] { R88 += 1, R71 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R88 += 1, R72 += 1, R5 += 1 };
  s0 -> s4 [90, 90] { R88 += 1, R72 += 1 };
  s0 -> s1 [91, 65535] { R88 += 1, R72 += 1 };
  s1 -> s1 [0, 89] { R88 += 1, R72 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R88 += 1 };
  s1 -> s4 [90, 90] { R88 += 1, R72 += 1 };
  s1 -> s1 [91, 65535] { R88 += 1, R72 += 1 };
  s2 -> s1 [0, 89] { R88 += 1, R72 += 1 };
  s2 -> s2 [0, 65535] { R88 += 1, R71 += 1, R72 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R88 += 1, R72 += 1, R5 += 1 };
  s2 -> s4 [90, 90] { R88 += 1, R72 += 1 };
  s2 -> s1 [91, 65535] { R88 += 1, R72 += 1 };
  s3 -> s1 [0, 89] { R88 += 1, R72 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R88 += 1 };
  s3 -> s3 [0, 65535] { R88 += 1, R72 += 1, R5 += 1 };
  s3 -> s4 [90, 90] { R88 += 1, R72 += 1 };
  s3 -> s1 [91, 65535] { R88 += 1, R72 += 1 };
  s4 -> s4 [0, 65535] { R88 += 1, R72 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R88 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 89] { R90 += 1, R74 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R90 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [0, 65535] { R90 += 1, R74 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [90, 90] { R90 += 1, R74 += 1, R64 += 1 };
  s0 -> s1 [91, 65535] { R90 += 1, R74 += 1, R64 += 1 };
  s1 -> s1 [0, 89] { R90 += 1, R74 += 1, R64 += 1 };
  s1 -> s4 [90, 90] { R90 += 1, R74 += 1, R64 += 1 };
  s1 -> s1 [91, 65535] { R90 += 1, R74 += 1, R64 += 1 };
  s2 -> s1 [0, 89] { R90 += 1, R74 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R90 += 1, R73 += 1, R74 += 1 };
  s2 -> s3 [0, 65535] { R90 += 1, R74 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [90, 90] { R90 += 1, R74 += 1, R64 += 1 };
  s2 -> s1 [91, 65535] { R90 += 1, R74 += 1, R64 += 1 };
  s3 -> s1 [0, 89] { R90 += 1, R74 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R90 += 1, R74 += 1, R63 += 1, R64 += 1 };
  s3 -> s4 [90, 90] { R90 += 1, R74 += 1, R64 += 1 };
  s3 -> s1 [91, 65535] { R90 += 1, R74 += 1, R64 += 1 };
  s4 -> s5 [0, 65535] { R90 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R90 += 1, R74 += 1 };
  s4 -> s4 [0, 65535] { R90 += 1, R74 += 1, R64 += 1 };
  s5 -> s5 [0, 65535] { R90 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R90 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R90 += 1, R74 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R92 += 1, R76 += 1, R66 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R92 += 1, R75 += 1, R76 += 1 };
  s0 -> s3 [0, 65535] { R92 += 1, R76 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R92 += 1, R76 += 1, R66 += 1, R54 += 1 };
  s1 -> s4 [0, 65535] { R92 += 1 };
  s1 -> s6 [0, 65535] { R92 += 1, R76 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R92 += 1, R76 += 1, R66 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R92 += 1, R75 += 1, R76 += 1 };
  s2 -> s3 [0, 65535] { R92 += 1, R76 += 1, R65 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R92 += 1, R76 += 1, R66 += 1, R54 += 1 };
  s3 -> s3 [0, 65535] { R92 += 1, R76 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535] { R92 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R92 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R92 += 1 };
  s6 -> s6 [0, 65535] { R92 += 1, R76 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R64 && R1 = R74 && R2 = R90 && R13 = 0 && R14 - R89 = -1 && R55 - R90 = -1 && R56 = R90 && R57 - R90 = -1 && R58 = R90 && R59 = 0 && R60 = 1 && R61 = 0 && R62 = 1 && R63 = 0 && R67 = 0 && R68 = R74 && R73 = 0 && R77 = R89 && R78 = R90 && R83 = R89 && R84 = R90 && R5 < 1 && R8 < 1 && R11 < 1 && -1 < R64 && -1 < R74 && R89 - R90 < 1 && -1 < R89 && 0 < R90 && (R65 != 0 || R64 = R66 || (R54 = 0 && R64 = 0)) && (R69 != 0 || R70 = R74 || (R64 = 0 && R74 = 0)) && (R71 != 0 || R72 = R74 || (R64 = 0 && R74 = 0)) && (R75 != 0 || R74 = R76 || (R64 = 0 && R74 = 0)) && (R79 != R89 || R80 = R90 || (R74 = 0 && R89 = R90)) && (R81 != R89 || R82 = R90 || (R74 = 0 && R89 = R90)) && (R85 != R89 || R86 = R90 || (R74 = 0 && R89 = R90)) && (R87 != R89 || R88 = R90 || (R74 = 0 && R89 = R90)) && (R89 != R91 || R90 = R92 || ((R74 != 0 || R90 - R91 < 1 || R91 < 0) && (R74 < 1 || R90 < R91 || R91 < 0))) && (R65 = 0 || (R54 = 0 && R64 = 0)) && (R69 = 0 || (R64 = 0 && R74 = 0)) && (R71 = 0 || (R64 = 0 && R74 = 0)) && (R75 = 0 || (R64 = 0 && R74 = 0)) && (R79 = R89 || (R74 = 0 && R89 = R90)) && (R81 = R89 || (R74 = 0 && R89 = R90)) && (R85 = R89 || (R74 = 0 && R89 = R90)) && (R87 = R89 || (R74 = 0 && R89 = R90)) && (R89 = R91 || (R74 = 0 && R89 = R90));
// End of Parikh automata intersection problem
