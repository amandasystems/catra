// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R7;
synchronised {  // Automata constraining P3
automaton P3_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s0 -> s1 [9, 9] { R45 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_2 {
  init s0;
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s1 [0, 65535] { R47 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R47 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 31] { R49 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s2 [32, 32] { R49 += 1 };
  s0 -> s1 [33, 65535] { R49 += 1 };
  s1 -> s1 [0, 31] { R49 += 1 };
  s1 -> s2 [32, 32] { R49 += 1 };
  s1 -> s1 [33, 65535] { R49 += 1 };
  s2 -> s2 [0, 65535] { R49 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value_4 {
  init s0;
  s0 -> s1 [0, 65535] { R51 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R51 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 31] { R53 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R53 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [32, 32] { R53 += 1 };
  s0 -> s1 [33, 65535] { R53 += 1, R7 += 1 };
  s1 -> s1 [0, 31] { R53 += 1, R7 += 1 };
  s1 -> s3 [32, 32] { R53 += 1 };
  s1 -> s1 [33, 65535] { R53 += 1, R7 += 1 };
  s2 -> s1 [0, 31] { R53 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R53 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [32, 32] { R53 += 1 };
  s2 -> s1 [33, 65535] { R53 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_6 {
  init s0;
  s0 -> s1 [0, 8] { R55 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s2 [0, 65535] { R55 += 1, R36 += 1, R37 += 1 };
  s0 -> s3 [9, 13] { R55 += 1, R37 += 1 };
  s0 -> s1 [14, 31] { R55 += 1, R37 += 1 };
  s0 -> s3 [32, 32] { R55 += 1, R37 += 1 };
  s0 -> s1 [33, 65535] { R55 += 1, R37 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R55 += 1 };
  s1 -> s1 [0, 65535] { R55 += 1, R37 += 1 };
  s2 -> s1 [0, 8] { R55 += 1, R37 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R55 += 1, R36 += 1, R37 += 1 };
  s2 -> s3 [9, 13] { R55 += 1, R37 += 1 };
  s2 -> s1 [14, 31] { R55 += 1, R37 += 1 };
  s2 -> s3 [32, 32] { R55 += 1, R37 += 1 };
  s2 -> s1 [33, 65535] { R55 += 1, R37 += 1 };
  s3 -> s1 [0, 65535] { R55 += 1, R37 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R55 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value_7 {
  init s0;
  s0 -> s1 [0, 65535] { R57 += 1, R39 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R57 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R57 += 1, R39 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R57 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R57 += 1, R39 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R57 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R57 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 8] { R59 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R59 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [9, 13] { R59 += 1, R41 += 1 };
  s0 -> s1 [14, 31] { R59 += 1, R41 += 1 };
  s0 -> s3 [32, 32] { R59 += 1, R41 += 1 };
  s0 -> s1 [33, 65535] { R59 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R59 += 1, R41 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R59 += 1 };
  s2 -> s1 [0, 8] { R59 += 1, R41 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R59 += 1, R40 += 1, R41 += 1 };
  s2 -> s3 [9, 13] { R59 += 1, R41 += 1 };
  s2 -> s1 [14, 31] { R59 += 1, R41 += 1 };
  s2 -> s3 [32, 32] { R59 += 1, R41 += 1 };
  s2 -> s1 [33, 65535] { R59 += 1, R41 += 1 };
  s3 -> s1 [0, 65535] { R59 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R59 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value_9 {
  init s0;
  s0 -> s0 [0, 65535] { R60 += 1, R61 += 1 };
  s0 -> s1 [0, 65535] { R61 += 1, R43 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R61 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R61 += 1, R43 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R61 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R61 += 1, R43 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R61 += 1, R42 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R61 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R39 && R1 = R63 && R6 = 0 && R7 - R39 = -1 && R36 - R39 = -1 && R37 = R39 && R38 - R39 = -1 && R40 = 0 && R41 = 1 && R42 = 0 && R43 = 1 && R44 = 0 && R45 = 1 && R46 = 0 && R47 = 1 && R48 = 1 && R49 = R63 && R50 = 1 && R51 = R63 && R52 = 1 && R53 = R63 && R54 = 1 && R55 = R63 && R56 = 1 && R57 = R63 && R58 = 1 && R59 = R63 && R60 = 1 && R61 = R63 && R62 = 1 && 0 < R39 && 0 < R63;
// End of Parikh automata intersection problem
