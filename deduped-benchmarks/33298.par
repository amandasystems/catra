// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88;
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P23
automaton P23_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R49 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s1 [13, 13] { R60 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s1 [0, 65535] { R62 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R62 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R64 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s0 -> s2 [9, 13] { R64 += 1 };
  s0 -> s1 [14, 31] { R64 += 1 };
  s0 -> s2 [32, 32] { R64 += 1 };
  s0 -> s1 [33, 65535] { R64 += 1 };
  s1 -> s1 [0, 65535] { R64 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R64 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R66 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R66 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R72 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s2 [65, 65] { R72 += 1 };
  s0 -> s1 [66, 65535] { R72 += 1 };
  s1 -> s1 [0, 64] { R72 += 1 };
  s1 -> s2 [65, 65] { R72 += 1 };
  s1 -> s1 [66, 65535] { R72 += 1 };
  s2 -> s2 [0, 65535] { R72 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R74 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535] { R74 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 64] { R76 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R7 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s3 [65, 65] { R76 += 1 };
  s0 -> s1 [66, 65535] { R76 += 1, R8 += 1 };
  s1 -> s1 [0, 64] { R76 += 1, R8 += 1 };
  s1 -> s3 [65, 65] { R76 += 1 };
  s1 -> s1 [66, 65535] { R76 += 1, R8 += 1 };
  s2 -> s1 [0, 64] { R76 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R76 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R76 += 1 };
  s2 -> s1 [66, 65535] { R76 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R76 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R78 += 1, R52 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R51 += 1, R52 += 1 };
  s0 -> s3 [9, 13] { R78 += 1, R52 += 1 };
  s0 -> s1 [14, 31] { R78 += 1, R52 += 1 };
  s0 -> s3 [32, 32] { R78 += 1, R52 += 1 };
  s0 -> s1 [33, 65535] { R78 += 1, R52 += 1 };
  s1 -> s5 [0, 65535] { R78 += 1 };
  s1 -> s1 [0, 65535] { R78 += 1, R52 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R78 += 1, R52 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R78 += 1, R51 += 1, R52 += 1 };
  s2 -> s3 [9, 13] { R78 += 1, R52 += 1 };
  s2 -> s1 [14, 31] { R78 += 1, R52 += 1 };
  s2 -> s3 [32, 32] { R78 += 1, R52 += 1 };
  s2 -> s1 [33, 65535] { R78 += 1, R52 += 1 };
  s3 -> s1 [0, 65535] { R78 += 1, R52 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R78 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R80 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s2 [0, 65535] { R80 += 1, R54 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R80 += 1, R53 += 1, R54 += 1 };
  s1 -> s2 [0, 65535] { R80 += 1, R54 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R80 += 1 };
  s2 -> s2 [0, 65535] { R80 += 1, R54 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R80 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R82 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R55 += 1, R56 += 1 };
  s0 -> s3 [9, 13] { R82 += 1, R56 += 1 };
  s0 -> s1 [14, 31] { R82 += 1, R56 += 1 };
  s0 -> s3 [32, 32] { R82 += 1, R56 += 1 };
  s0 -> s1 [33, 65535] { R82 += 1, R56 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R56 += 1 };
  s1 -> s5 [0, 65535] { R82 += 1 };
  s2 -> s1 [0, 8] { R82 += 1, R56 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R82 += 1, R55 += 1, R56 += 1 };
  s2 -> s3 [9, 13] { R82 += 1, R56 += 1 };
  s2 -> s1 [14, 31] { R82 += 1, R56 += 1 };
  s2 -> s3 [32, 32] { R82 += 1, R56 += 1 };
  s2 -> s1 [33, 65535] { R82 += 1, R56 += 1 };
  s3 -> s1 [0, 65535] { R82 += 1, R56 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R82 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R84 += 1, R58 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R84 += 1, R57 += 1, R58 += 1 };
  s1 -> s2 [0, 65535] { R84 += 1, R58 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R84 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R84 += 1, R58 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R84 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 64] { R86 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R86 += 1, R67 += 1, R68 += 1 };
  s0 -> s3 [65, 65] { R86 += 1, R68 += 1 };
  s0 -> s1 [66, 65535] { R86 += 1, R68 += 1 };
  s1 -> s1 [0, 64] { R86 += 1, R68 += 1 };
  s1 -> s3 [65, 65] { R86 += 1, R68 += 1 };
  s1 -> s1 [66, 65535] { R86 += 1, R68 += 1 };
  s2 -> s1 [0, 64] { R86 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R86 += 1, R67 += 1, R68 += 1 };
  s2 -> s3 [65, 65] { R86 += 1, R68 += 1 };
  s2 -> s1 [66, 65535] { R86 += 1, R68 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R86 += 1 };
  s3 -> s3 [0, 65535] { R86 += 1, R68 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R86 += 1 };
  accepting s3, s4, s5;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R88 += 1, R69 += 1, R70 += 1 };
  s0 -> s2 [0, 65535] { R88 += 1, R70 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R88 += 1, R69 += 1, R70 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R88 += 1, R70 += 1, R50 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R88 += 1 };
  s2 -> s2 [0, 65535] { R88 += 1, R70 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R88 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R68 && R1 - R88 = 1 && R7 = 0 && R8 - R67 = -1 && R51 - R68 = -1 && R52 = R68 && R53 - R68 = -1 && R54 = R68 && R55 = 0 && R56 = 1 && R57 = 0 && R58 = 1 && R59 = R88 && R60 - R88 = 1 && R61 = R88 && R62 - R88 = 1 && R63 = 0 && R64 = 1 && R65 = 0 && R66 = 1 && R71 = 0 && R72 = R88 && R73 = 0 && R74 = R88 && R75 = 0 && R76 = R88 && R77 = 0 && R78 = R88 && R79 = 0 && R80 = R88 && R81 = 0 && R82 = R88 && R83 = 0 && R84 = R88 && R85 = 0 && R86 = R88 && R87 = 0 && R49 < 1 && R67 - R68 < 1 && -1 < R67 && 0 < R68 && -1 < R88 && (R67 != R69 || R68 = R70 || ((R50 != 0 || R68 - R69 < 1 || R69 < 0) && (R50 = 0 || R68 < R69 || R69 < 0))) && (R67 = R69 || (R50 = 0 && R67 = R68));
// End of Parikh automata intersection problem
