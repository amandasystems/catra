// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R15, R16, R2, R3, R361, R362, R4, R5, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R362 += 1 };
  s0 -> s0 [0, 65535] { R361 += 1, R362 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R362 += 1 };
  s1 -> s1 [0, 60] { R362 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R362 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R589 += 1, R590 += 1 };
  s0 -> s1 [0, 65535] { R590 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R590 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R591 += 1, R592 += 1 };
  s0 -> s1 [0, 65535] { R592 += 1, R559 += 1, R560 += 1 };
  s0 -> s2 [9, 9] { R592 += 1, R560 += 1 };
  s1 -> s1 [0, 65535] { R592 += 1, R559 += 1, R560 += 1 };
  s1 -> s2 [9, 9] { R592 += 1, R560 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R592 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R593 += 1, R594 += 1 };
  s0 -> s1 [0, 65535] { R594 += 1, R561 += 1, R562 += 1 };
  s0 -> s2 [0, 65535] { R594 += 1, R562 += 1, R11 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R594 += 1, R561 += 1, R562 += 1 };
  s1 -> s2 [0, 65535] { R594 += 1, R562 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R594 += 1 };
  s2 -> s2 [0, 65535] { R594 += 1, R562 += 1, R11 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R594 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R596 += 1, R564 += 1 };
  s0 -> s2 [0, 65535] { R596 += 1, R563 += 1, R564 += 1 };
  s0 -> s0 [0, 65535] { R595 += 1, R596 += 1 };
  s0 -> s3 [9, 13] { R596 += 1, R564 += 1 };
  s0 -> s1 [14, 31] { R596 += 1, R564 += 1 };
  s0 -> s3 [32, 32] { R596 += 1, R564 += 1 };
  s0 -> s1 [33, 65535] { R596 += 1, R564 += 1 };
  s1 -> s5 [0, 65535] { R596 += 1 };
  s1 -> s1 [0, 65535] { R596 += 1, R564 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R596 += 1, R564 += 1 };
  s2 -> s2 [0, 65535] { R596 += 1, R563 += 1, R564 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R596 += 1, R564 += 1 };
  s2 -> s1 [14, 31] { R596 += 1, R564 += 1 };
  s2 -> s3 [32, 32] { R596 += 1, R564 += 1 };
  s2 -> s1 [33, 65535] { R596 += 1, R564 += 1 };
  s3 -> s1 [0, 65535] { R596 += 1, R564 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R596 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R598 += 1, R566 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R597 += 1, R598 += 1 };
  s0 -> s2 [0, 65535] { R598 += 1, R565 += 1, R566 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R598 += 1, R566 += 1, R12 += 1 };
  s1 -> s4 [0, 65535] { R598 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R598 += 1, R566 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R598 += 1, R565 += 1, R566 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R598 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 64] { R600 += 1, R574 += 1 };
  s0 -> s2 [0, 65535] { R600 += 1, R573 += 1, R574 += 1 };
  s0 -> s0 [0, 65535] { R599 += 1, R600 += 1 };
  s0 -> s1 [91, 65535] { R600 += 1, R574 += 1 };
  s1 -> s1 [0, 64] { R600 += 1, R574 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R600 += 1 };
  s1 -> s1 [91, 65535] { R600 += 1, R574 += 1 };
  s2 -> s1 [0, 64] { R600 += 1, R574 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R600 += 1, R573 += 1, R574 += 1 };
  s2 -> s1 [91, 65535] { R600 += 1, R574 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R602 += 1, R575 += 1, R576 += 1 };
  s0 -> s0 [0, 65535] { R601 += 1, R602 += 1 };
  s0 -> s2 [0, 65535] { R602 += 1, R576 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R602 += 1, R575 += 1, R576 += 1 };
  s1 -> s2 [0, 65535] { R602 += 1, R576 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R602 += 1, R576 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R602 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R602 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R604 += 1, R578 += 1, R536 += 1 };
  s0 -> s2 [0, 65535] { R604 += 1, R578 += 1, R535 += 1, R536 += 1 };
  s0 -> s3 [0, 65535] { R604 += 1, R577 += 1, R578 += 1 };
  s0 -> s0 [0, 65535] { R603 += 1, R604 += 1 };
  s0 -> s4 [9, 13] { R604 += 1, R578 += 1, R536 += 1 };
  s0 -> s1 [14, 31] { R604 += 1, R578 += 1, R536 += 1 };
  s0 -> s4 [32, 32] { R604 += 1, R578 += 1, R536 += 1 };
  s0 -> s1 [33, 65535] { R604 += 1, R578 += 1, R536 += 1 };
  s1 -> s1 [0, 65535] { R604 += 1, R578 += 1, R536 += 1 };
  s1 -> s6 [0, 65535] { R604 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R604 += 1, R578 += 1 };
  s2 -> s1 [0, 8] { R604 += 1, R578 += 1, R536 += 1 };
  s2 -> s2 [0, 65535] { R604 += 1, R578 += 1, R535 += 1, R536 += 1 };
  s2 -> s6 [0, 65535] { R604 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R604 += 1, R578 += 1, R536 += 1 };
  s2 -> s1 [14, 31] { R604 += 1, R578 += 1, R536 += 1 };
  s2 -> s4 [32, 32] { R604 += 1, R578 += 1, R536 += 1 };
  s2 -> s1 [33, 65535] { R604 += 1, R578 += 1, R536 += 1 };
  s3 -> s1 [0, 8] { R604 += 1, R578 += 1, R536 += 1 };
  s3 -> s2 [0, 65535] { R604 += 1, R578 += 1, R535 += 1, R536 += 1 };
  s3 -> s3 [0, 65535] { R604 += 1, R577 += 1, R578 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R604 += 1, R578 += 1, R536 += 1 };
  s3 -> s1 [14, 31] { R604 += 1, R578 += 1, R536 += 1 };
  s3 -> s4 [32, 32] { R604 += 1, R578 += 1, R536 += 1 };
  s3 -> s1 [33, 65535] { R604 += 1, R578 += 1, R536 += 1 };
  s4 -> s1 [0, 65535] { R604 += 1, R578 += 1, R536 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R604 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R604 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R604 += 1, R578 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R606 += 1, R580 += 1, R538 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R606 += 1, R580 += 1, R537 += 1, R538 += 1 };
  s0 -> s0 [0, 65535] { R605 += 1, R606 += 1 };
  s0 -> s3 [0, 65535] { R606 += 1, R579 += 1, R580 += 1 };
  s1 -> s1 [0, 65535] { R606 += 1, R580 += 1, R538 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R606 += 1 };
  s1 -> s6 [0, 65535] { R606 += 1, R580 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R606 += 1, R580 += 1, R538 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R606 += 1 };
  s2 -> s2 [0, 65535] { R606 += 1, R580 += 1, R537 += 1, R538 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R606 += 1, R580 += 1, R538 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R606 += 1, R580 += 1, R537 += 1, R538 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R606 += 1, R579 += 1, R580 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R606 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R606 += 1 };
  s6 -> s6 [0, 65535] { R606 += 1, R580 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R608 += 1, R582 += 1, R540 += 1 };
  s0 -> s2 [0, 65535] { R608 += 1, R581 += 1, R582 += 1 };
  s0 -> s0 [0, 65535] { R607 += 1, R608 += 1 };
  s0 -> s3 [0, 65535] { R608 += 1, R582 += 1, R539 += 1, R540 += 1 };
  s0 -> s4 [9, 13] { R608 += 1, R582 += 1, R540 += 1 };
  s0 -> s1 [14, 31] { R608 += 1, R582 += 1, R540 += 1 };
  s0 -> s4 [32, 32] { R608 += 1, R582 += 1, R540 += 1 };
  s0 -> s1 [33, 65535] { R608 += 1, R582 += 1, R540 += 1 };
  s1 -> s5 [0, 65535] { R608 += 1 };
  s1 -> s7 [0, 65535] { R608 += 1, R582 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R608 += 1, R582 += 1, R540 += 1 };
  s2 -> s1 [0, 8] { R608 += 1, R582 += 1, R540 += 1 };
  s2 -> s2 [0, 65535] { R608 += 1, R581 += 1, R582 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R608 += 1, R582 += 1, R539 += 1, R540 += 1 };
  s2 -> s4 [9, 13] { R608 += 1, R582 += 1, R540 += 1 };
  s2 -> s1 [14, 31] { R608 += 1, R582 += 1, R540 += 1 };
  s2 -> s4 [32, 32] { R608 += 1, R582 += 1, R540 += 1 };
  s2 -> s1 [33, 65535] { R608 += 1, R582 += 1, R540 += 1 };
  s3 -> s1 [0, 8] { R608 += 1, R582 += 1, R540 += 1 };
  s3 -> s5 [0, 65535] { R608 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R608 += 1, R582 += 1, R539 += 1, R540 += 1 };
  s3 -> s4 [9, 13] { R608 += 1, R582 += 1, R540 += 1 };
  s3 -> s1 [14, 31] { R608 += 1, R582 += 1, R540 += 1 };
  s3 -> s4 [32, 32] { R608 += 1, R582 += 1, R540 += 1 };
  s3 -> s1 [33, 65535] { R608 += 1, R582 += 1, R540 += 1 };
  s4 -> s1 [0, 65535] { R608 += 1, R582 += 1, R540 += 1 };
  s5 -> s5 [0, 65535] { R608 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R608 += 1 };
  s7 -> s7 [0, 65535] { R608 += 1, R582 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R610 += 1, R584 += 1, R541 += 1, R542 += 1 };
  s0 -> s2 [0, 65535] { R610 += 1, R583 += 1, R584 += 1 };
  s0 -> s3 [0, 65535] { R610 += 1, R584 += 1, R542 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R609 += 1, R610 += 1 };
  s1 -> s1 [0, 65535] { R610 += 1, R584 += 1, R541 += 1, R542 += 1 };
  s1 -> s5 [0, 65535] { R610 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R610 += 1, R584 += 1, R542 += 1, R6 += 1 };
  s2 -> s1 [0, 65535] { R610 += 1, R584 += 1, R541 += 1, R542 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R610 += 1, R583 += 1, R584 += 1 };
  s2 -> s3 [0, 65535] { R610 += 1, R584 += 1, R542 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R610 += 1, R584 += 1 };
  s3 -> s5 [0, 65535] { R610 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R610 += 1, R584 += 1, R542 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R610 += 1, R584 += 1 };
  s4 -> s5 [0, 65535] { R610 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R610 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 64] { R612 += 1 };
  s0 -> s0 [0, 65535] { R611 += 1, R612 += 1 };
  s0 -> s2 [75, 75] { R612 += 1 };
  s0 -> s1 [76, 65535] { R612 += 1 };
  s1 -> s1 [0, 64] { R612 += 1 };
  s1 -> s2 [75, 75] { R612 += 1 };
  s1 -> s1 [76, 65535] { R612 += 1 };
  s2 -> s2 [0, 64] { R612 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R612 += 1 };
  accepting s2;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R614 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R613 += 1, R614 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R614 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 74] { R616 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R616 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R615 += 1, R616 += 1 };
  s0 -> s3 [75, 75] { R616 += 1 };
  s0 -> s1 [76, 65535] { R616 += 1, R16 += 1 };
  s1 -> s1 [0, 74] { R616 += 1, R16 += 1 };
  s1 -> s3 [75, 75] { R616 += 1 };
  s1 -> s1 [76, 65535] { R616 += 1, R16 += 1 };
  s2 -> s1 [0, 74] { R616 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R616 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [75, 75] { R616 += 1 };
  s2 -> s1 [76, 65535] { R616 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R616 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R618 += 1, R552 += 1 };
  s0 -> s0 [0, 65535] { R617 += 1, R618 += 1 };
  s0 -> s2 [0, 65535] { R618 += 1, R551 += 1, R552 += 1 };
  s0 -> s3 [9, 13] { R618 += 1, R552 += 1 };
  s0 -> s1 [14, 31] { R618 += 1, R552 += 1 };
  s0 -> s3 [32, 32] { R618 += 1, R552 += 1 };
  s0 -> s1 [33, 65535] { R618 += 1, R552 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R618 += 1, R552 += 1 };
  s1 -> s5 [0, 65535] { R618 += 1 };
  s2 -> s1 [0, 8] { R618 += 1, R552 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R618 += 1, R551 += 1, R552 += 1 };
  s2 -> s3 [9, 13] { R618 += 1, R552 += 1 };
  s2 -> s1 [14, 31] { R618 += 1, R552 += 1 };
  s2 -> s3 [32, 32] { R618 += 1, R552 += 1 };
  s2 -> s1 [33, 65535] { R618 += 1, R552 += 1 };
  s3 -> s1 [0, 65535] { R618 += 1, R552 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R618 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s0 [0, 65535] { R619 += 1, R620 += 1 };
  s0 -> s1 [0, 65535] { R620 += 1, R554 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R620 += 1, R553 += 1, R554 += 1 };
  s1 -> s4 [0, 65535] { R620 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R620 += 1, R554 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R620 += 1, R554 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R620 += 1, R553 += 1, R554 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R620 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 8] { R622 += 1, R556 += 1 };
  s0 -> s0 [0, 65535] { R621 += 1, R622 += 1 };
  s0 -> s2 [0, 65535] { R622 += 1, R555 += 1, R556 += 1 };
  s0 -> s3 [9, 13] { R622 += 1, R556 += 1 };
  s0 -> s1 [14, 31] { R622 += 1, R556 += 1 };
  s0 -> s3 [32, 32] { R622 += 1, R556 += 1 };
  s0 -> s1 [33, 65535] { R622 += 1, R556 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R622 += 1 };
  s1 -> s1 [0, 65535] { R622 += 1, R556 += 1 };
  s2 -> s1 [0, 8] { R622 += 1, R556 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R622 += 1, R555 += 1, R556 += 1 };
  s2 -> s3 [9, 13] { R622 += 1, R556 += 1 };
  s2 -> s1 [14, 31] { R622 += 1, R556 += 1 };
  s2 -> s3 [32, 32] { R622 += 1, R556 += 1 };
  s2 -> s1 [33, 65535] { R622 += 1, R556 += 1 };
  s3 -> s1 [0, 65535] { R622 += 1, R556 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R622 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R624 += 1, R557 += 1, R558 += 1 };
  s0 -> s2 [0, 65535] { R624 += 1, R558 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R623 += 1, R624 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R624 += 1, R557 += 1, R558 += 1 };
  s1 -> s2 [0, 65535] { R624 += 1, R558 += 1, R10 += 1 };
  s2 -> s3 [0, 65535] { R624 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R624 += 1, R558 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R624 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 74] { R626 += 1, R568 += 1 };
  s0 -> s0 [0, 65535] { R625 += 1, R626 += 1 };
  s0 -> s2 [0, 65535] { R626 += 1, R567 += 1, R568 += 1 };
  s0 -> s1 [76, 65535] { R626 += 1, R568 += 1 };
  s1 -> s1 [0, 74] { R626 += 1, R568 += 1 };
  s1 -> s1 [0, 65535] { R626 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R626 += 1, R568 += 1 };
  s2 -> s1 [0, 74] { R626 += 1, R568 += 1 };
  s2 -> s2 [0, 65535] { R626 += 1, R567 += 1, R568 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R626 += 1, R568 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R628 += 1, R569 += 1, R570 += 1 };
  s0 -> s0 [0, 65535] { R627 += 1, R628 += 1 };
  s0 -> s2 [0, 65535] { R628 += 1, R570 += 1, R533 += 1 };
  s1 -> s1 [0, 65535] { R628 += 1, R569 += 1, R570 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R628 += 1, R570 += 1, R533 += 1 };
  s2 -> s3 [0, 65535] { R628 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R628 += 1, R570 += 1, R533 += 1 };
  s3 -> s3 [0, 65535] { R628 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 75] { R630 += 1, R572 += 1 };
  s0 -> s0 [0, 65535] { R629 += 1, R630 += 1 };
  s0 -> s2 [0, 65535] { R630 += 1, R571 += 1, R572 += 1 };
  s0 -> s3 [82, 82] { R630 += 1, R572 += 1 };
  s0 -> s1 [83, 65535] { R630 += 1, R572 += 1 };
  s1 -> s1 [0, 75] { R630 += 1, R572 += 1 };
  s1 -> s3 [82, 82] { R630 += 1, R572 += 1 };
  s1 -> s1 [83, 65535] { R630 += 1, R572 += 1 };
  s2 -> s1 [0, 75] { R630 += 1, R572 += 1 };
  s2 -> s2 [0, 65535] { R630 += 1, R571 += 1, R572 += 1 };
  s2 -> s3 [82, 82] { R630 += 1, R572 += 1 };
  s2 -> s1 [83, 65535] { R630 += 1, R572 += 1 };
  s3 -> s3 [0, 75] { R630 += 1, R572 += 1 };
  s3 -> s3 [0, 65535] { R630 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [82, 65535] { R630 += 1, R572 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_24 {
  init s0;
  s0 -> s0 [0, 65535] { R631 += 1, R632 += 1 };
  s0 -> s1 [0, 65535] { R632 += 1, R585 += 1, R586 += 1 };
  s0 -> s2 [0, 65535] { R632 += 1, R586 += 1, R534 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R632 += 1, R585 += 1, R586 += 1 };
  s1 -> s2 [0, 65535] { R632 += 1, R586 += 1, R534 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R632 += 1, R586 += 1, R534 += 1 };
  s2 -> s4 [0, 65535] { R632 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R632 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_25 {
  init s0;
  s0 -> s1 [0, 74] { R634 += 1, R588 += 1 };
  s0 -> s0 [0, 65535] { R633 += 1, R634 += 1 };
  s0 -> s2 [0, 65535] { R634 += 1, R587 += 1, R588 += 1 };
  s0 -> s3 [75, 75] { R634 += 1, R588 += 1 };
  s0 -> s4 [75, 75] { R634 += 1, R588 += 1 };
  s0 -> s1 [83, 65535] { R634 += 1, R588 += 1 };
  s1 -> s1 [0, 74] { R634 += 1, R588 += 1 };
  s1 -> s1 [0, 65535] { R634 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R634 += 1, R588 += 1 };
  s1 -> s4 [75, 75] { R634 += 1, R588 += 1 };
  s1 -> s1 [83, 65535] { R634 += 1, R588 += 1 };
  s2 -> s1 [0, 74] { R634 += 1, R588 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R634 += 1, R587 += 1, R588 += 1 };
  s2 -> s3 [75, 75] { R634 += 1, R588 += 1 };
  s2 -> s4 [75, 75] { R634 += 1, R588 += 1 };
  s2 -> s1 [83, 65535] { R634 += 1, R588 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R634 += 1 };
  s4 -> s4 [0, 75] { R634 += 1, R588 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R634 += 1 };
  s4 -> s4 [83, 65535] { R634 += 1, R588 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R544 += 1 };
  s0 -> s0 [0, 65535] { R543 += 1, R544 += 1 };
  s0 -> s2 [9, 13] { R544 += 1 };
  s0 -> s1 [14, 31] { R544 += 1 };
  s0 -> s2 [32, 32] { R544 += 1 };
  s0 -> s1 [33, 65535] { R544 += 1 };
  s1 -> s1 [0, 65535] { R544 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R544 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R545 += 1, R546 += 1 };
  s0 -> s1 [0, 65535] { R546 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R546 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R548 += 1 };
  s0 -> s0 [0, 65535] { R547 += 1, R548 += 1 };
  s0 -> s2 [9, 13] { R548 += 1 };
  s0 -> s1 [14, 31] { R548 += 1 };
  s0 -> s2 [32, 32] { R548 += 1 };
  s0 -> s1 [33, 65535] { R548 += 1 };
  s1 -> s1 [0, 65535] { R548 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R548 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R550 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R549 += 1, R550 += 1 };
  s1 -> s1 [0, 65535] { R550 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P68
automaton P68_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R572 && R3 - R584 = 1 && R4 = R634 && R15 = 0 && R16 - R571 = -1 && R361 = 0 && R362 - R633 = -1 && R551 - R572 = -1 && R552 = R572 && R553 - R572 = -1 && R554 = R572 && R555 = 0 && R556 = 1 && R557 = 0 && R558 = 1 && R559 = R584 && R560 - R584 = 1 && R561 = R584 && R562 - R584 = 1 && R563 = 0 && R564 = 1 && R565 = 0 && R566 = 1 && R573 = 0 && R574 = R584 && R575 = 0 && R576 = R584 && R577 = 0 && R578 = R584 && R579 = 0 && R580 = R584 && R581 = 0 && R582 = R584 && R583 = 0 && R589 = 0 && R590 - R633 = -1 && R591 = 0 && R592 - R633 = -1 && R593 = 0 && R594 - R633 = -1 && R595 = 0 && R596 - R633 = -1 && R597 = 0 && R598 - R633 = -1 && R599 = 0 && R600 - R633 = -1 && R601 = 0 && R602 - R633 = -1 && R603 = 0 && R604 - R633 = -1 && R605 = 0 && R606 - R633 = -1 && R607 = 0 && R608 - R633 = -1 && R609 = 0 && R610 - R633 = -1 && R611 = R633 && R612 = R634 && R613 = R633 && R614 = R634 && R615 = R633 && R616 = R634 && R617 = R633 && R618 = R634 && R619 = R633 && R620 = R634 && R621 = R633 && R622 = R634 && R623 = R633 && R624 = R634 && R625 = R633 && R626 = R634 && R627 = R633 && R628 = R634 && R629 = R633 && R630 = R634 && R631 = R633 && R632 = R634 && R0 != 0 && R1 != 0 && R13 < 1 && R571 - R572 < 1 && -1 < R571 && 0 < R572 && -1 < R584 && R633 - R634 < 1 && 0 < R633 && (R5 != 0 || ((R0 != R536 || R535 - R536 = -1 || R536 < 0) && (R0 = R536 || R0 < 1))) && (R5 != 0 || ((R0 != R538 || R537 - R538 = -1 || R538 < 0) && (R0 = R538 || R0 < 1))) && (R7 != 0 || ((R1 != R544 || R543 - R544 = -1 || R544 < 0) && (R1 = R544 || R1 < 1))) && (R7 != 0 || ((R1 != R546 || R545 - R546 = -1 || R546 < 0) && (R1 = R546 || R1 < 1))) && (R539 != 0 || ((R6 != 0 || ((R0 != R540 || R540 = 1 || R540 < 0) && (R0 = R540 || R540 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R540 || R540 = 1 || R540 < 0) && (R540 != 1 || -1 < R0) && (R0 = R540 || R540 = 1))))) && (R541 != 0 || ((R6 != 0 || ((R0 != R542 || R542 = 1 || R542 < 0) && (R0 = R542 || R542 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R542 || R542 = 1 || R542 < 0) && (R542 != 1 || -1 < R0) && (R0 = R542 || R542 = 1))))) && (R547 != 0 || ((R8 != 0 || ((R1 != R548 || R548 = 1 || R548 < 0) && (R1 = R548 || R548 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R548 || R548 = 1 || R548 < 0) && (R548 != 1 || -1 < R1) && (R1 = R548 || R548 = 1))))) && (R549 != 0 || ((R8 != 0 || ((R1 != R550 || R550 = 1 || R550 < 0) && (R1 = R550 || R550 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R550 || R550 = 1 || R550 < 0) && (R550 != 1 || -1 < R1) && (R1 = R550 || R550 = 1))))) && (R567 != R571 || R568 = R572 || (R533 = 0 && R571 = R572)) && (R569 != R571 || R570 = R572 || (R533 = 0 && R571 = R572)) && (R585 != 0 || R571 = R586 || (R534 = 0 && R571 = 0)) && (R587 != 0 || R571 = R588 || (R534 = 0 && R571 = 0)) && (R5 = 0 || (R0 = R536 && R535 - R536 = -1)) && (R5 = 0 || (R0 = R538 && R537 - R538 = -1)) && (R7 = 0 || (R1 = R544 && R543 - R544 = -1)) && (R7 = 0 || (R1 = R546 && R545 - R546 = -1)) && (R539 = 0 || (R6 = 0 && R0 < 0)) && (R541 = 0 || (R6 = 0 && R0 < 0)) && (R547 = 0 || (R8 = 0 && R1 < 0)) && (R549 = 0 || (R8 = 0 && R1 < 0)) && (R567 = R571 || (R533 = 0 && R571 = R572)) && (R569 = R571 || (R533 = 0 && R571 = R572)) && (R585 = 0 || (R534 = 0 && R571 = 0)) && (R587 = 0 || (R534 = 0 && R571 = 0));
// End of Parikh automata intersection problem
