// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R18, R19, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R19 += 1 };
  s1 -> s1 [0, 60] { R19 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s1 [0, 65535] { R247 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R247 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R249 += 1, R216 += 1, R217 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s2 [9, 9] { R249 += 1, R217 += 1 };
  s1 -> s1 [0, 65535] { R249 += 1, R216 += 1, R217 += 1 };
  s1 -> s2 [9, 9] { R249 += 1, R217 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R249 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s1 [0, 65535] { R251 += 1, R218 += 1, R219 += 1 };
  s0 -> s2 [0, 65535] { R251 += 1, R219 += 1, R11 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R251 += 1, R218 += 1, R219 += 1 };
  s1 -> s2 [0, 65535] { R251 += 1, R219 += 1, R11 += 1 };
  s2 -> s3 [0, 65535] { R251 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R251 += 1, R219 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R251 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R253 += 1, R221 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R220 += 1, R221 += 1 };
  s0 -> s3 [9, 13] { R253 += 1, R221 += 1 };
  s0 -> s1 [14, 31] { R253 += 1, R221 += 1 };
  s0 -> s3 [32, 32] { R253 += 1, R221 += 1 };
  s0 -> s1 [33, 65535] { R253 += 1, R221 += 1 };
  s1 -> s5 [0, 65535] { R253 += 1 };
  s1 -> s1 [0, 65535] { R253 += 1, R221 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R253 += 1, R221 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R253 += 1, R220 += 1, R221 += 1 };
  s2 -> s3 [9, 13] { R253 += 1, R221 += 1 };
  s2 -> s1 [14, 31] { R253 += 1, R221 += 1 };
  s2 -> s3 [32, 32] { R253 += 1, R221 += 1 };
  s2 -> s1 [33, 65535] { R253 += 1, R221 += 1 };
  s3 -> s1 [0, 65535] { R253 += 1, R221 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R253 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R255 += 1, R223 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R222 += 1, R223 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R255 += 1, R223 += 1, R12 += 1 };
  s1 -> s4 [0, 65535] { R255 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R255 += 1, R223 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R255 += 1, R222 += 1, R223 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R255 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 64] { R257 += 1, R231 += 1 };
  s0 -> s2 [0, 65535] { R257 += 1, R230 += 1, R231 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s1 [91, 65535] { R257 += 1, R231 += 1 };
  s1 -> s1 [0, 64] { R257 += 1, R231 += 1 };
  s1 -> s1 [0, 65535] { R257 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R257 += 1, R231 += 1 };
  s2 -> s1 [0, 64] { R257 += 1, R231 += 1 };
  s2 -> s2 [0, 65535] { R257 += 1, R230 += 1, R231 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R257 += 1, R231 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R259 += 1, R233 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s2 [0, 65535] { R259 += 1, R232 += 1, R233 += 1 };
  s1 -> s1 [0, 65535] { R259 += 1, R233 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R259 += 1 };
  s2 -> s1 [0, 65535] { R259 += 1, R233 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R259 += 1, R232 += 1, R233 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R259 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R261 += 1, R235 += 1, R193 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R235 += 1, R192 += 1, R193 += 1 };
  s0 -> s3 [0, 65535] { R261 += 1, R234 += 1, R235 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s4 [9, 13] { R261 += 1, R235 += 1, R193 += 1 };
  s0 -> s1 [14, 31] { R261 += 1, R235 += 1, R193 += 1 };
  s0 -> s4 [32, 32] { R261 += 1, R235 += 1, R193 += 1 };
  s0 -> s1 [33, 65535] { R261 += 1, R235 += 1, R193 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R261 += 1 };
  s1 -> s1 [0, 65535] { R261 += 1, R235 += 1, R193 += 1 };
  s1 -> s7 [0, 65535] { R261 += 1, R235 += 1 };
  s2 -> s1 [0, 8] { R261 += 1, R235 += 1, R193 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R261 += 1 };
  s2 -> s2 [0, 65535] { R261 += 1, R235 += 1, R192 += 1, R193 += 1 };
  s2 -> s4 [9, 13] { R261 += 1, R235 += 1, R193 += 1 };
  s2 -> s1 [14, 31] { R261 += 1, R235 += 1, R193 += 1 };
  s2 -> s4 [32, 32] { R261 += 1, R235 += 1, R193 += 1 };
  s2 -> s1 [33, 65535] { R261 += 1, R235 += 1, R193 += 1 };
  s3 -> s1 [0, 8] { R261 += 1, R235 += 1, R193 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R261 += 1, R235 += 1, R192 += 1, R193 += 1 };
  s3 -> s3 [0, 65535] { R261 += 1, R234 += 1, R235 += 1 };
  s3 -> s4 [9, 13] { R261 += 1, R235 += 1, R193 += 1 };
  s3 -> s1 [14, 31] { R261 += 1, R235 += 1, R193 += 1 };
  s3 -> s4 [32, 32] { R261 += 1, R235 += 1, R193 += 1 };
  s3 -> s1 [33, 65535] { R261 += 1, R235 += 1, R193 += 1 };
  s4 -> s1 [0, 65535] { R261 += 1, R235 += 1, R193 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R261 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R261 += 1 };
  s7 -> s7 [0, 65535] { R261 += 1, R235 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R263 += 1, R237 += 1, R195 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R237 += 1, R194 += 1, R195 += 1 };
  s0 -> s3 [0, 65535] { R263 += 1, R236 += 1, R237 += 1 };
  s1 -> s5 [0, 65535] { R263 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R263 += 1, R237 += 1 };
  s1 -> s1 [0, 65535] { R263 += 1, R237 += 1, R195 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R263 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R263 += 1, R237 += 1, R195 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R263 += 1, R237 += 1, R194 += 1, R195 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R263 += 1, R237 += 1, R195 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R263 += 1, R237 += 1, R194 += 1, R195 += 1 };
  s3 -> s3 [0, 65535] { R263 += 1, R236 += 1, R237 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R263 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R263 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R263 += 1, R237 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R265 += 1, R239 += 1, R197 += 1 };
  s0 -> s2 [0, 65535] { R265 += 1, R238 += 1, R239 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s3 [0, 65535] { R265 += 1, R239 += 1, R196 += 1, R197 += 1 };
  s0 -> s4 [9, 13] { R265 += 1, R239 += 1, R197 += 1 };
  s0 -> s1 [14, 31] { R265 += 1, R239 += 1, R197 += 1 };
  s0 -> s4 [32, 32] { R265 += 1, R239 += 1, R197 += 1 };
  s0 -> s1 [33, 65535] { R265 += 1, R239 += 1, R197 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R265 += 1, R239 += 1, R197 += 1 };
  s1 -> s6 [0, 65535] { R265 += 1 };
  s1 -> s7 [0, 65535] { R265 += 1, R239 += 1 };
  s2 -> s1 [0, 8] { R265 += 1, R239 += 1, R197 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R265 += 1, R238 += 1, R239 += 1 };
  s2 -> s3 [0, 65535] { R265 += 1, R239 += 1, R196 += 1, R197 += 1 };
  s2 -> s4 [9, 13] { R265 += 1, R239 += 1, R197 += 1 };
  s2 -> s1 [14, 31] { R265 += 1, R239 += 1, R197 += 1 };
  s2 -> s4 [32, 32] { R265 += 1, R239 += 1, R197 += 1 };
  s2 -> s1 [33, 65535] { R265 += 1, R239 += 1, R197 += 1 };
  s3 -> s1 [0, 8] { R265 += 1, R239 += 1, R197 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R265 += 1, R239 += 1, R196 += 1, R197 += 1 };
  s3 -> s6 [0, 65535] { R265 += 1 };
  s3 -> s4 [9, 13] { R265 += 1, R239 += 1, R197 += 1 };
  s3 -> s1 [14, 31] { R265 += 1, R239 += 1, R197 += 1 };
  s3 -> s4 [32, 32] { R265 += 1, R239 += 1, R197 += 1 };
  s3 -> s1 [33, 65535] { R265 += 1, R239 += 1, R197 += 1 };
  s4 -> s1 [0, 65535] { R265 += 1, R239 += 1, R197 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R265 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R265 += 1 };
  s7 -> s7 [0, 65535] { R265 += 1, R239 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s1 [0, 65535] { R267 += 1, R241 += 1, R199 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R267 += 1, R241 += 1, R198 += 1, R199 += 1 };
  s0 -> s3 [0, 65535] { R267 += 1, R240 += 1, R241 += 1 };
  s1 -> s1 [0, 65535] { R267 += 1, R241 += 1, R199 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R267 += 1, R241 += 1 };
  s1 -> s5 [0, 65535] { R267 += 1 };
  s2 -> s1 [0, 65535] { R267 += 1, R241 += 1, R199 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R267 += 1, R241 += 1, R198 += 1, R199 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R267 += 1 };
  s3 -> s1 [0, 65535] { R267 += 1, R241 += 1, R199 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R267 += 1, R241 += 1, R198 += 1, R199 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R267 += 1, R240 += 1, R241 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R267 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R267 += 1, R241 += 1 };
  s6 -> s5 [0, 65535] { R267 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 64] { R269 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s0 -> s2 [75, 75] { R269 += 1 };
  s0 -> s1 [76, 65535] { R269 += 1 };
  s1 -> s1 [0, 64] { R269 += 1 };
  s1 -> s2 [75, 75] { R269 += 1 };
  s1 -> s1 [76, 65535] { R269 += 1 };
  s2 -> s2 [0, 64] { R269 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R269 += 1 };
  accepting s2;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s0 -> s1 [0, 65535] { R271 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R271 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 74] { R273 += 1 };
  s0 -> s0 [0, 65535] { R272 += 1, R273 += 1 };
  s0 -> s2 [0, 65535] { R273 += 1, R14 += 1 };
  s0 -> s3 [75, 75] { R273 += 1 };
  s0 -> s1 [76, 65535] { R273 += 1 };
  s1 -> s1 [0, 74] { R273 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R273 += 1 };
  s1 -> s1 [76, 65535] { R273 += 1 };
  s2 -> s1 [0, 74] { R273 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R273 += 1, R14 += 1 };
  s2 -> s3 [75, 75] { R273 += 1 };
  s2 -> s1 [76, 65535] { R273 += 1 };
  s3 -> s3 [0, 65535] { R273 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R275 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R274 += 1, R275 += 1 };
  s0 -> s2 [0, 65535] { R275 += 1, R208 += 1, R209 += 1 };
  s0 -> s3 [9, 13] { R275 += 1, R209 += 1 };
  s0 -> s1 [14, 31] { R275 += 1, R209 += 1 };
  s0 -> s3 [32, 32] { R275 += 1, R209 += 1 };
  s0 -> s1 [33, 65535] { R275 += 1, R209 += 1 };
  s1 -> s5 [0, 65535] { R275 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R275 += 1, R209 += 1 };
  s2 -> s1 [0, 8] { R275 += 1, R209 += 1 };
  s2 -> s2 [0, 65535] { R275 += 1, R208 += 1, R209 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R275 += 1, R209 += 1 };
  s2 -> s1 [14, 31] { R275 += 1, R209 += 1 };
  s2 -> s3 [32, 32] { R275 += 1, R209 += 1 };
  s2 -> s1 [33, 65535] { R275 += 1, R209 += 1 };
  s3 -> s1 [0, 65535] { R275 += 1, R209 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R275 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R277 += 1, R211 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R277 += 1, R210 += 1, R211 += 1 };
  s0 -> s0 [0, 65535] { R276 += 1, R277 += 1 };
  s1 -> s4 [0, 65535] { R277 += 1 };
  s1 -> s1 [0, 65535] { R277 += 1, R211 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R277 += 1, R211 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R277 += 1, R210 += 1, R211 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R277 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 8] { R279 += 1, R213 += 1 };
  s0 -> s2 [0, 65535] { R279 += 1, R212 += 1, R213 += 1 };
  s0 -> s0 [0, 65535] { R278 += 1, R279 += 1 };
  s0 -> s3 [9, 13] { R279 += 1, R213 += 1 };
  s0 -> s1 [14, 31] { R279 += 1, R213 += 1 };
  s0 -> s3 [32, 32] { R279 += 1, R213 += 1 };
  s0 -> s1 [33, 65535] { R279 += 1, R213 += 1 };
  s1 -> s1 [0, 65535] { R279 += 1, R213 += 1 };
  s1 -> s5 [0, 65535] { R279 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R279 += 1, R213 += 1 };
  s2 -> s2 [0, 65535] { R279 += 1, R212 += 1, R213 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R279 += 1, R213 += 1 };
  s2 -> s1 [14, 31] { R279 += 1, R213 += 1 };
  s2 -> s3 [32, 32] { R279 += 1, R213 += 1 };
  s2 -> s1 [33, 65535] { R279 += 1, R213 += 1 };
  s3 -> s1 [0, 65535] { R279 += 1, R213 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R279 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R281 += 1, R214 += 1, R215 += 1 };
  s0 -> s2 [0, 65535] { R281 += 1, R215 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R280 += 1, R281 += 1 };
  s1 -> s1 [0, 65535] { R281 += 1, R214 += 1, R215 += 1 };
  s1 -> s2 [0, 65535] { R281 += 1, R215 += 1, R10 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R281 += 1, R215 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R281 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R281 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 74] { R283 += 1, R225 += 1 };
  s0 -> s2 [0, 65535] { R283 += 1, R224 += 1, R225 += 1 };
  s0 -> s0 [0, 65535] { R282 += 1, R283 += 1 };
  s0 -> s1 [76, 65535] { R283 += 1, R225 += 1 };
  s1 -> s1 [0, 74] { R283 += 1, R225 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R283 += 1 };
  s1 -> s1 [76, 65535] { R283 += 1, R225 += 1 };
  s2 -> s1 [0, 74] { R283 += 1, R225 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R283 += 1, R224 += 1, R225 += 1 };
  s2 -> s1 [76, 65535] { R283 += 1, R225 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R285 += 1, R226 += 1, R227 += 1 };
  s0 -> s2 [0, 65535] { R285 += 1, R227 += 1, R190 += 1 };
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s1 -> s1 [0, 65535] { R285 += 1, R226 += 1, R227 += 1 };
  s1 -> s2 [0, 65535] { R285 += 1, R227 += 1, R190 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R285 += 1 };
  s2 -> s2 [0, 65535] { R285 += 1, R227 += 1, R190 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R285 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 75] { R287 += 1, R229 += 1 };
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s0 -> s2 [0, 65535] { R287 += 1, R228 += 1, R229 += 1 };
  s0 -> s3 [82, 82] { R287 += 1, R229 += 1 };
  s0 -> s1 [83, 65535] { R287 += 1, R229 += 1 };
  s1 -> s1 [0, 75] { R287 += 1, R229 += 1 };
  s1 -> s3 [82, 82] { R287 += 1, R229 += 1 };
  s1 -> s1 [83, 65535] { R287 += 1, R229 += 1 };
  s2 -> s1 [0, 75] { R287 += 1, R229 += 1 };
  s2 -> s2 [0, 65535] { R287 += 1, R228 += 1, R229 += 1 };
  s2 -> s3 [82, 82] { R287 += 1, R229 += 1 };
  s2 -> s1 [83, 65535] { R287 += 1, R229 += 1 };
  s3 -> s3 [0, 75] { R287 += 1, R229 += 1 };
  s3 -> s3 [0, 65535] { R287 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [82, 65535] { R287 += 1, R229 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_24 {
  init s0;
  s0 -> s1 [0, 65535] { R289 += 1, R242 += 1, R243 += 1 };
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s2 [0, 65535] { R289 += 1, R243 += 1, R191 += 1 };
  s1 -> s1 [0, 65535] { R289 += 1, R242 += 1, R243 += 1 };
  s1 -> s2 [0, 65535] { R289 += 1, R243 += 1, R191 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R289 += 1, R243 += 1, R191 += 1 };
  s2 -> s3 [0, 65535] { R289 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R289 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_25 {
  init s0;
  s0 -> s1 [0, 74] { R291 += 1, R245 += 1 };
  s0 -> s0 [0, 65535] { R290 += 1, R291 += 1 };
  s0 -> s2 [0, 65535] { R291 += 1, R244 += 1, R245 += 1 };
  s0 -> s3 [75, 75] { R291 += 1, R245 += 1 };
  s0 -> s4 [75, 75] { R291 += 1, R245 += 1 };
  s0 -> s1 [83, 65535] { R291 += 1, R245 += 1 };
  s1 -> s1 [0, 74] { R291 += 1, R245 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R291 += 1 };
  s1 -> s3 [75, 75] { R291 += 1, R245 += 1 };
  s1 -> s4 [75, 75] { R291 += 1, R245 += 1 };
  s1 -> s1 [83, 65535] { R291 += 1, R245 += 1 };
  s2 -> s1 [0, 74] { R291 += 1, R245 += 1 };
  s2 -> s2 [0, 65535] { R291 += 1, R244 += 1, R245 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R291 += 1, R245 += 1 };
  s2 -> s4 [75, 75] { R291 += 1, R245 += 1 };
  s2 -> s1 [83, 65535] { R291 += 1, R245 += 1 };
  s3 -> s3 [0, 65535] { R291 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 75] { R291 += 1, R245 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R291 += 1 };
  s4 -> s4 [83, 65535] { R291 += 1, R245 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R201 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s2 [9, 13] { R201 += 1 };
  s0 -> s1 [14, 31] { R201 += 1 };
  s0 -> s2 [32, 32] { R201 += 1 };
  s0 -> s1 [33, 65535] { R201 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R201 += 1 };
  s2 -> s1 [0, 65535] { R201 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R203 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R202 += 1, R203 += 1 };
  s1 -> s1 [0, 65535] { R203 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R205 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s0 -> s2 [9, 13] { R205 += 1 };
  s0 -> s1 [14, 31] { R205 += 1 };
  s0 -> s2 [32, 32] { R205 += 1 };
  s0 -> s1 [33, 65535] { R205 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R205 += 1 };
  s2 -> s1 [0, 65535] { R205 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R207 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R206 += 1, R207 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R207 += 1, R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P68
automaton P68_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R229 && R3 - R241 = 1 && R4 = R291 && R18 = 0 && R19 - R290 = -1 && R208 - R229 = -1 && R209 = R229 && R210 - R229 = -1 && R211 = R229 && R212 = 0 && R213 = 1 && R214 = 0 && R215 = 1 && R216 = R241 && R217 - R241 = 1 && R218 = R241 && R219 - R241 = 1 && R220 = 0 && R221 = 1 && R222 = 0 && R223 = 1 && R224 = 0 && R225 = R229 && R226 = 0 && R227 = R229 && R228 = 0 && R230 = 0 && R231 = R241 && R232 = 0 && R233 = R241 && R234 = 0 && R235 = R241 && R236 = 0 && R237 = R241 && R238 = 0 && R239 = R241 && R240 = 0 && R246 = 0 && R247 - R290 = -1 && R248 = 0 && R249 - R290 = -1 && R250 = 0 && R251 - R290 = -1 && R252 = 0 && R253 - R290 = -1 && R254 = 0 && R255 - R290 = -1 && R256 = 0 && R257 - R290 = -1 && R258 = 0 && R259 - R290 = -1 && R260 = 0 && R261 - R290 = -1 && R262 = 0 && R263 - R290 = -1 && R264 = 0 && R265 - R290 = -1 && R266 = 0 && R267 - R290 = -1 && R268 = R290 && R269 = R291 && R270 = R290 && R271 = R291 && R272 = R290 && R273 = R291 && R274 = R290 && R275 = R291 && R276 = R290 && R277 = R291 && R278 = R290 && R279 = R291 && R280 = R290 && R281 = R291 && R282 = R290 && R283 = R291 && R284 = R290 && R285 = R291 && R286 = R290 && R287 = R291 && R288 = R290 && R289 = R291 && R0 != 0 && R1 != 0 && R13 < 1 && R14 < 1 && 0 < R229 && -1 < R241 && R290 - R291 < 1 && 0 < R290 && (R5 != 0 || ((R0 != R193 || R192 - R193 = -1 || R193 < 0) && (R0 = R193 || R0 < 1))) && (R5 != 0 || ((R0 != R195 || R194 - R195 = -1 || R195 < 0) && (R0 = R195 || R0 < 1))) && (R7 != 0 || ((R1 != R201 || R200 - R201 = -1 || R201 < 0) && (R1 = R201 || R1 < 1))) && (R7 != 0 || ((R1 != R203 || R202 - R203 = -1 || R203 < 0) && (R1 = R203 || R1 < 1))) && (R196 != 0 || ((R6 != 0 || ((R0 != R197 || R197 = 1 || R197 < 0) && (R0 = R197 || R197 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R197 || R197 = 1 || R197 < 0) && (R197 != 1 || -1 < R0) && (R0 = R197 || R197 = 1))))) && (R198 != 0 || ((R6 != 0 || ((R0 != R199 || R199 = 1 || R199 < 0) && (R0 = R199 || R199 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R199 || R199 = 1 || R199 < 0) && (R199 != 1 || -1 < R0) && (R0 = R199 || R199 = 1))))) && (R204 != 0 || ((R8 != 0 || ((R1 != R205 || R205 = 1 || R205 < 0) && (R1 = R205 || R205 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R205 || R205 = 1 || R205 < 0) && (R205 != 1 || -1 < R1) && (R1 = R205 || R205 = 1))))) && (R206 != 0 || ((R8 != 0 || ((R1 != R207 || R207 = 1 || R207 < 0) && (R1 = R207 || R207 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R207 || R207 = 1 || R207 < 0) && (R207 != 1 || -1 < R1) && (R1 = R207 || R207 = 1))))) && (R5 = 0 || (R0 = R193 && R192 - R193 = -1)) && (R5 = 0 || (R0 = R195 && R194 - R195 = -1)) && (R7 = 0 || (R1 = R201 && R200 - R201 = -1)) && (R7 = 0 || (R1 = R203 && R202 - R203 = -1)) && (R191 = 0 || (R242 = 0 && R243 = 0)) && (R191 = 0 || (R244 = 0 && R245 = 0)) && (R196 = 0 || (R6 = 0 && R0 < 0)) && (R198 = 0 || (R6 = 0 && R0 < 0)) && (R204 = 0 || (R8 = 0 && R1 < 0)) && (R206 = 0 || (R8 = 0 && R1 < 0));
// End of Parikh automata intersection problem
