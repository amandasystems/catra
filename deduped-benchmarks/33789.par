// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R192, R193, R2, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R193 += 1 };
  s0 -> s0 [0, 65535] { R192 += 1, R193 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R193 += 1 };
  s1 -> s1 [0, 60] { R193 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R193 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R301 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R300 += 1, R301 += 1 };
  s1 -> s1 [0, 65535] { R301 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R347 += 1 };
  s0 -> s0 [0, 65535] { R346 += 1, R347 += 1 };
  s0 -> s2 [68, 68] { R347 += 1 };
  s0 -> s1 [69, 65535] { R347 += 1 };
  s1 -> s1 [0, 64] { R347 += 1 };
  s1 -> s2 [68, 68] { R347 += 1 };
  s1 -> s1 [69, 65535] { R347 += 1 };
  s2 -> s2 [0, 64] { R347 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R347 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R349 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R348 += 1, R349 += 1 };
  s1 -> s1 [0, 65535] { R349 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 67] { R351 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R350 += 1, R351 += 1 };
  s0 -> s2 [0, 65535] { R351 += 1, R10 += 1, R11 += 1 };
  s0 -> s3 [68, 68] { R351 += 1 };
  s0 -> s1 [69, 65535] { R351 += 1, R11 += 1 };
  s1 -> s1 [0, 67] { R351 += 1, R11 += 1 };
  s1 -> s3 [68, 68] { R351 += 1 };
  s1 -> s1 [69, 65535] { R351 += 1, R11 += 1 };
  s2 -> s1 [0, 67] { R351 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R351 += 1, R10 += 1, R11 += 1 };
  s2 -> s3 [68, 68] { R351 += 1 };
  s2 -> s1 [69, 65535] { R351 += 1, R11 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R351 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R353 += 1, R293 += 1 };
  s0 -> s2 [0, 65535] { R353 += 1, R292 += 1, R293 += 1 };
  s0 -> s0 [0, 65535] { R352 += 1, R353 += 1 };
  s0 -> s3 [9, 13] { R353 += 1, R293 += 1 };
  s0 -> s1 [14, 31] { R353 += 1, R293 += 1 };
  s0 -> s3 [32, 32] { R353 += 1, R293 += 1 };
  s0 -> s1 [33, 65535] { R353 += 1, R293 += 1 };
  s1 -> s5 [0, 65535] { R353 += 1 };
  s1 -> s1 [0, 65535] { R353 += 1, R293 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R353 += 1, R293 += 1 };
  s2 -> s2 [0, 65535] { R353 += 1, R292 += 1, R293 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R353 += 1, R293 += 1 };
  s2 -> s1 [14, 31] { R353 += 1, R293 += 1 };
  s2 -> s3 [32, 32] { R353 += 1, R293 += 1 };
  s2 -> s1 [33, 65535] { R353 += 1, R293 += 1 };
  s3 -> s1 [0, 65535] { R353 += 1, R293 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R353 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R354 += 1, R355 += 1 };
  s0 -> s1 [0, 65535] { R355 += 1, R295 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R355 += 1, R294 += 1, R295 += 1 };
  s1 -> s1 [0, 65535] { R355 += 1, R295 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R355 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R355 += 1, R295 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R355 += 1, R294 += 1, R295 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R355 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R357 += 1, R297 += 1 };
  s0 -> s2 [0, 65535] { R357 += 1, R296 += 1, R297 += 1 };
  s0 -> s0 [0, 65535] { R356 += 1, R357 += 1 };
  s0 -> s3 [9, 13] { R357 += 1, R297 += 1 };
  s0 -> s1 [14, 31] { R357 += 1, R297 += 1 };
  s0 -> s3 [32, 32] { R357 += 1, R297 += 1 };
  s0 -> s1 [33, 65535] { R357 += 1, R297 += 1 };
  s1 -> s1 [0, 65535] { R357 += 1, R297 += 1 };
  s1 -> s5 [0, 65535] { R357 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R357 += 1, R297 += 1 };
  s2 -> s2 [0, 65535] { R357 += 1, R296 += 1, R297 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R357 += 1, R297 += 1 };
  s2 -> s1 [14, 31] { R357 += 1, R297 += 1 };
  s2 -> s3 [32, 32] { R357 += 1, R297 += 1 };
  s2 -> s1 [33, 65535] { R357 += 1, R297 += 1 };
  s3 -> s1 [0, 65535] { R357 += 1, R297 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R357 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R358 += 1, R359 += 1 };
  s0 -> s1 [0, 65535] { R359 += 1, R298 += 1, R299 += 1 };
  s0 -> s2 [0, 65535] { R359 += 1, R299 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R359 += 1, R298 += 1, R299 += 1 };
  s1 -> s2 [0, 65535] { R359 += 1, R299 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R359 += 1, R299 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R359 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R359 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 67] { R361 += 1, R337 += 1 };
  s0 -> s2 [0, 65535] { R361 += 1, R336 += 1, R337 += 1 };
  s0 -> s0 [0, 65535] { R360 += 1, R361 += 1 };
  s0 -> s1 [69, 65535] { R361 += 1, R337 += 1 };
  s1 -> s1 [0, 67] { R361 += 1, R337 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R361 += 1 };
  s1 -> s1 [69, 65535] { R361 += 1, R337 += 1 };
  s2 -> s1 [0, 67] { R361 += 1, R337 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R361 += 1, R336 += 1, R337 += 1 };
  s2 -> s1 [69, 65535] { R361 += 1, R337 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R363 += 1, R338 += 1, R339 += 1 };
  s0 -> s0 [0, 65535] { R362 += 1, R363 += 1 };
  s0 -> s2 [0, 65535] { R363 += 1, R339 += 1, R282 += 1 };
  s1 -> s1 [0, 65535] { R363 += 1, R338 += 1, R339 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R363 += 1, R339 += 1, R282 += 1 };
  s2 -> s3 [0, 65535] { R363 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R363 += 1, R339 += 1, R282 += 1 };
  s3 -> s3 [0, 65535] { R363 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R365 += 1, R340 += 1, R341 += 1 };
  s0 -> s2 [0, 65535] { R365 += 1, R341 += 1 };
  s0 -> s0 [0, 65535] { R364 += 1, R365 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R365 += 1, R340 += 1, R341 += 1 };
  s1 -> s2 [0, 65535] { R365 += 1, R341 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R365 += 1, R341 += 1 };
  s2 -> s4 [0, 65535] { R365 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R365 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R367 += 1, R343 += 1, R283 += 1 };
  s0 -> s2 [0, 65535] { R367 += 1, R342 += 1, R343 += 1 };
  s0 -> s0 [0, 65535] { R366 += 1, R367 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R367 += 1, R343 += 1, R283 += 1 };
  s1 -> s4 [0, 65535] { R367 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R367 += 1, R343 += 1, R283 += 1 };
  s2 -> s2 [0, 65535] { R367 += 1, R342 += 1, R343 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R367 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 67] { R369 += 1, R345 += 1 };
  s0 -> s2 [0, 65535] { R369 += 1, R344 += 1, R345 += 1 };
  s0 -> s0 [0, 65535] { R368 += 1, R369 += 1 };
  s0 -> s3 [68, 68] { R369 += 1, R345 += 1 };
  s0 -> s4 [68, 68] { R369 += 1, R345 += 1 };
  s0 -> s5 [69, 69] { R369 += 1, R345 += 1 };
  s0 -> s1 [70, 65535] { R369 += 1, R345 += 1 };
  s1 -> s1 [0, 67] { R369 += 1, R345 += 1 };
  s1 -> s3 [68, 68] { R369 += 1, R345 += 1 };
  s1 -> s4 [68, 68] { R369 += 1, R345 += 1 };
  s1 -> s5 [69, 69] { R369 += 1, R345 += 1 };
  s1 -> s1 [70, 65535] { R369 += 1, R345 += 1 };
  s2 -> s1 [0, 67] { R369 += 1, R345 += 1 };
  s2 -> s2 [0, 65535] { R369 += 1, R344 += 1, R345 += 1 };
  s2 -> s3 [68, 68] { R369 += 1, R345 += 1 };
  s2 -> s4 [68, 68] { R369 += 1, R345 += 1 };
  s2 -> s5 [69, 69] { R369 += 1, R345 += 1 };
  s2 -> s1 [70, 65535] { R369 += 1, R345 += 1 };
  s4 -> s4 [0, 68] { R369 += 1, R345 += 1 };
  s4 -> s7 [69, 69] { R369 += 1, R345 += 1 };
  s4 -> s4 [70, 65535] { R369 += 1, R345 += 1 };
  s5 -> s5 [0, 67] { R369 += 1, R345 += 1 };
  s5 -> s5 [0, 65535] { R369 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [68, 68] { R369 += 1, R345 += 1 };
  s5 -> s8 [68, 68] { R369 += 1, R345 += 1 };
  s5 -> s5 [69, 65535] { R369 += 1, R345 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R369 += 1, R345 += 1 };
  s7 -> s9 [0, 65535] { R369 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R369 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R369 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R8 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R285 += 1 };
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s0 -> s2 [9, 13] { R285 += 1 };
  s0 -> s1 [14, 31] { R285 += 1 };
  s0 -> s2 [32, 32] { R285 += 1 };
  s0 -> s1 [33, 65535] { R285 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R285 += 1 };
  s2 -> s1 [0, 65535] { R285 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s0 -> s1 [0, 65535] { R287 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R287 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R289 += 1 };
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s2 [9, 13] { R289 += 1 };
  s0 -> s1 [14, 31] { R289 += 1 };
  s0 -> s2 [32, 32] { R289 += 1 };
  s0 -> s1 [33, 65535] { R289 += 1 };
  s1 -> s1 [0, 65535] { R289 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R289 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R291 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R290 += 1, R291 += 1 };
  s1 -> s1 [0, 65535] { R291 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R295 && R3 = R301 && R10 = 0 && R11 - R345 = -1 && R192 = 0 && R193 = R369 && R292 - R295 = -1 && R293 = R295 && R294 - R295 = -1 && R296 = 0 && R297 = 1 && R298 = 0 && R299 = 1 && R300 - R369 = 1 && R344 = 0 && R346 = 0 && R347 = R369 && R348 = 0 && R349 = R369 && R350 = 0 && R351 = R369 && R352 = 0 && R353 = R369 && R354 = 0 && R355 = R369 && R356 = 0 && R357 = R369 && R358 = 0 && R359 = R369 && R360 = 0 && R361 = R369 && R362 = 0 && R363 = R369 && R364 = 0 && R365 = R369 && R366 = 0 && R367 = R369 && R368 = 0 && R0 != 0 && R1 != 0 && R8 < 1 && R345 - R295 < 1 && 0 < R295 && R369 < R301 && -1 < R345 && -1 < R369 && (R4 != 0 || ((R1 != R285 || R284 - R285 = -1 || R285 < 0) && (R1 = R285 || R1 < 1))) && (R4 != 0 || ((R1 != R287 || R286 - R287 = -1 || R287 < 0) && (R1 = R287 || R1 < 1))) && (R288 != 0 || ((R5 != 0 || ((R1 != R289 || R289 = 1 || R289 < 0) && (R1 = R289 || R289 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R289 || R289 = 1 || R289 < 0) && (R289 != 1 || -1 < R1) && (R1 = R289 || R289 = 1))))) && (R290 != 0 || ((R5 != 0 || ((R1 != R291 || R291 = 1 || R291 < 0) && (R1 = R291 || R291 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R291 || R291 = 1 || R291 < 0) && (R291 != 1 || -1 < R1) && (R1 = R291 || R291 = 1))))) && (R295 != R337 || R336 = R345 || ((R282 != 0 || R337 - R345 < 1 || R337 < 1) && (R282 = 0 || R337 < R345 || R337 < 1))) && (R295 != R339 || R338 = R345 || ((R282 != 0 || R339 - R345 < 1 || R339 < 1) && (R282 = 0 || R339 < R345 || R339 < 1))) && (R295 != R341 || R340 = R345 || ((R282 != 0 || R341 - R345 < 1 || R341 < 1) && (R282 = 0 || R341 < R345 || R341 < 1))) && (R342 != 0 || R343 = R345 || (R283 = 0 && R345 = 0)) && (R4 = 0 || (R1 = R285 && R284 - R285 = -1)) && (R4 = 0 || (R1 = R287 && R286 - R287 = -1)) && (R288 = 0 || (R5 = 0 && R1 < 0)) && (R290 = 0 || (R5 = 0 && R1 < 0)) && (R295 = R337 || (R282 = 0 && R295 = R345)) && (R295 = R339 || (R282 = 0 && R295 = R345)) && (R295 = R341 || (R282 = 0 && R295 = R345)) && (R342 = 0 || (R283 = 0 && R345 = 0));
// End of Parikh automata intersection problem
