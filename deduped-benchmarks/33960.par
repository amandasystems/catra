// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R192, R193, R2, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R193 += 1 };
  s0 -> s0 [0, 65535] { R192 += 1, R193 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R193 += 1 };
  s1 -> s1 [0, 60] { R193 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R193 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R301 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R300 += 1, R301 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R301 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R313 += 1 };
  s0 -> s0 [0, 65535] { R312 += 1, R313 += 1 };
  s0 -> s2 [79, 79] { R313 += 1 };
  s0 -> s1 [80, 65535] { R313 += 1 };
  s1 -> s1 [0, 64] { R313 += 1 };
  s1 -> s2 [79, 79] { R313 += 1 };
  s1 -> s1 [80, 65535] { R313 += 1 };
  s2 -> s2 [0, 64] { R313 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [79, 65535] { R313 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R315 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R315 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 78] { R317 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R316 += 1, R317 += 1 };
  s0 -> s2 [0, 65535] { R317 += 1, R10 += 1, R11 += 1 };
  s0 -> s3 [79, 79] { R317 += 1 };
  s0 -> s1 [80, 65535] { R317 += 1, R11 += 1 };
  s1 -> s1 [0, 78] { R317 += 1, R11 += 1 };
  s1 -> s3 [79, 79] { R317 += 1 };
  s1 -> s1 [80, 65535] { R317 += 1, R11 += 1 };
  s2 -> s1 [0, 78] { R317 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R317 += 1, R10 += 1, R11 += 1 };
  s2 -> s3 [79, 79] { R317 += 1 };
  s2 -> s1 [80, 65535] { R317 += 1, R11 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R317 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R319 += 1, R293 += 1 };
  s0 -> s2 [0, 65535] { R319 += 1, R292 += 1, R293 += 1 };
  s0 -> s0 [0, 65535] { R318 += 1, R319 += 1 };
  s0 -> s3 [9, 13] { R319 += 1, R293 += 1 };
  s0 -> s1 [14, 31] { R319 += 1, R293 += 1 };
  s0 -> s3 [32, 32] { R319 += 1, R293 += 1 };
  s0 -> s1 [33, 65535] { R319 += 1, R293 += 1 };
  s1 -> s5 [0, 65535] { R319 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R319 += 1, R293 += 1 };
  s2 -> s1 [0, 8] { R319 += 1, R293 += 1 };
  s2 -> s2 [0, 65535] { R319 += 1, R292 += 1, R293 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R319 += 1, R293 += 1 };
  s2 -> s1 [14, 31] { R319 += 1, R293 += 1 };
  s2 -> s3 [32, 32] { R319 += 1, R293 += 1 };
  s2 -> s1 [33, 65535] { R319 += 1, R293 += 1 };
  s3 -> s1 [0, 65535] { R319 += 1, R293 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R319 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R321 += 1, R294 += 1, R295 += 1 };
  s0 -> s2 [0, 65535] { R321 += 1, R295 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R320 += 1, R321 += 1 };
  s1 -> s1 [0, 65535] { R321 += 1, R294 += 1, R295 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R321 += 1, R295 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R321 += 1 };
  s2 -> s2 [0, 65535] { R321 += 1, R295 += 1, R6 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R321 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R323 += 1, R297 += 1 };
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s0 -> s2 [0, 65535] { R323 += 1, R296 += 1, R297 += 1 };
  s0 -> s3 [9, 13] { R323 += 1, R297 += 1 };
  s0 -> s1 [14, 31] { R323 += 1, R297 += 1 };
  s0 -> s3 [32, 32] { R323 += 1, R297 += 1 };
  s0 -> s1 [33, 65535] { R323 += 1, R297 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R323 += 1, R297 += 1 };
  s1 -> s5 [0, 65535] { R323 += 1 };
  s2 -> s1 [0, 8] { R323 += 1, R297 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R323 += 1, R296 += 1, R297 += 1 };
  s2 -> s3 [9, 13] { R323 += 1, R297 += 1 };
  s2 -> s1 [14, 31] { R323 += 1, R297 += 1 };
  s2 -> s3 [32, 32] { R323 += 1, R297 += 1 };
  s2 -> s1 [33, 65535] { R323 += 1, R297 += 1 };
  s3 -> s1 [0, 65535] { R323 += 1, R297 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R323 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R325 += 1, R299 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R325 += 1, R298 += 1, R299 += 1 };
  s0 -> s0 [0, 65535] { R324 += 1, R325 += 1 };
  s1 -> s1 [0, 65535] { R325 += 1, R299 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R325 += 1 };
  s2 -> s1 [0, 65535] { R325 += 1, R299 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R325 += 1, R298 += 1, R299 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R325 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 78] { R327 += 1, R303 += 1 };
  s0 -> s0 [0, 65535] { R326 += 1, R327 += 1 };
  s0 -> s2 [0, 65535] { R327 += 1, R302 += 1, R303 += 1 };
  s0 -> s1 [80, 65535] { R327 += 1, R303 += 1 };
  s1 -> s1 [0, 78] { R327 += 1, R303 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R327 += 1 };
  s1 -> s1 [80, 65535] { R327 += 1, R303 += 1 };
  s2 -> s1 [0, 78] { R327 += 1, R303 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R327 += 1, R302 += 1, R303 += 1 };
  s2 -> s1 [80, 65535] { R327 += 1, R303 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R329 += 1, R304 += 1, R305 += 1 };
  s0 -> s0 [0, 65535] { R328 += 1, R329 += 1 };
  s0 -> s2 [0, 65535] { R329 += 1, R305 += 1, R282 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R329 += 1, R304 += 1, R305 += 1 };
  s1 -> s2 [0, 65535] { R329 += 1, R305 += 1, R282 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R329 += 1 };
  s2 -> s2 [0, 65535] { R329 += 1, R305 += 1, R282 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R329 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 79] { R331 += 1, R307 += 1 };
  s0 -> s2 [0, 65535] { R331 += 1, R306 += 1, R307 += 1 };
  s0 -> s0 [0, 65535] { R330 += 1, R331 += 1 };
  s0 -> s3 [80, 80] { R331 += 1, R307 += 1 };
  s0 -> s1 [81, 65535] { R331 += 1, R307 += 1 };
  s1 -> s1 [0, 79] { R331 += 1, R307 += 1 };
  s1 -> s3 [80, 80] { R331 += 1, R307 += 1 };
  s1 -> s1 [81, 65535] { R331 += 1, R307 += 1 };
  s2 -> s1 [0, 79] { R331 += 1, R307 += 1 };
  s2 -> s2 [0, 65535] { R331 += 1, R306 += 1, R307 += 1 };
  s2 -> s3 [80, 80] { R331 += 1, R307 += 1 };
  s2 -> s1 [81, 65535] { R331 += 1, R307 += 1 };
  s3 -> s3 [0, 65535] { R331 += 1, R307 += 1 };
  s3 -> s4 [0, 65535] { R331 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R331 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R333 += 1, R308 += 1, R309 += 1 };
  s0 -> s2 [0, 65535] { R333 += 1, R309 += 1, R283 += 1 };
  s0 -> s0 [0, 65535] { R332 += 1, R333 += 1 };
  s1 -> s1 [0, 65535] { R333 += 1, R308 += 1, R309 += 1 };
  s1 -> s2 [0, 65535] { R333 += 1, R309 += 1, R283 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R333 += 1, R309 += 1, R283 += 1 };
  s2 -> s3 [0, 65535] { R333 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R333 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 78] { R335 += 1, R311 += 1 };
  s0 -> s2 [0, 65535] { R335 += 1, R310 += 1, R311 += 1 };
  s0 -> s0 [0, 65535] { R334 += 1, R335 += 1 };
  s0 -> s3 [79, 79] { R335 += 1, R311 += 1 };
  s0 -> s4 [79, 79] { R335 += 1, R311 += 1 };
  s0 -> s1 [81, 65535] { R335 += 1, R311 += 1 };
  s1 -> s1 [0, 78] { R335 += 1, R311 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R335 += 1 };
  s1 -> s3 [79, 79] { R335 += 1, R311 += 1 };
  s1 -> s4 [79, 79] { R335 += 1, R311 += 1 };
  s1 -> s1 [81, 65535] { R335 += 1, R311 += 1 };
  s2 -> s1 [0, 78] { R335 += 1, R311 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R335 += 1, R310 += 1, R311 += 1 };
  s2 -> s3 [79, 79] { R335 += 1, R311 += 1 };
  s2 -> s4 [79, 79] { R335 += 1, R311 += 1 };
  s2 -> s1 [81, 65535] { R335 += 1, R311 += 1 };
  s3 -> s3 [0, 79] { R335 += 1, R311 += 1 };
  s3 -> s3 [0, 65535] { R335 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [81, 65535] { R335 += 1, R311 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R335 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R8 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R285 += 1 };
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s0 -> s2 [9, 13] { R285 += 1 };
  s0 -> s1 [14, 31] { R285 += 1 };
  s0 -> s2 [32, 32] { R285 += 1 };
  s0 -> s1 [33, 65535] { R285 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R285 += 1 };
  s2 -> s1 [0, 65535] { R285 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R287 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s1 -> s1 [0, 65535] { R287 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R289 += 1 };
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s2 [9, 13] { R289 += 1 };
  s0 -> s1 [14, 31] { R289 += 1 };
  s0 -> s2 [32, 32] { R289 += 1 };
  s0 -> s1 [33, 65535] { R289 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R289 += 1 };
  s2 -> s1 [0, 65535] { R289 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R290 += 1, R291 += 1 };
  s0 -> s1 [0, 65535] { R291 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R291 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining c0
automaton c0_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
constraint R2 = R307 && R3 = R301 && R10 = 0 && R11 - R306 = -1 && R192 = 0 && R193 = R335 && R292 - R307 = -1 && R293 = R307 && R294 - R307 = -1 && R295 = R307 && R296 = 0 && R297 = 1 && R298 = 0 && R299 = 1 && R300 - R335 = 1 && R312 = 0 && R313 = R335 && R314 = 0 && R315 = R335 && R316 = 0 && R317 = R335 && R318 = 0 && R319 = R335 && R320 = 0 && R321 = R335 && R322 = 0 && R323 = R335 && R324 = 0 && R325 = R335 && R326 = 0 && R327 = R335 && R328 = 0 && R329 = R335 && R330 = 0 && R331 = R335 && R332 = 0 && R333 = R335 && R334 = 0 && R0 != 0 && R1 != 0 && R8 < 1 && R335 < R301 && R306 - R307 < 1 && -1 < R306 && 0 < R307 && -1 < R335 && (R4 != 0 || ((R1 != R285 || R284 - R285 = -1 || R285 < 0) && (R1 = R285 || R1 < 1))) && (R4 != 0 || ((R1 != R287 || R286 - R287 = -1 || R287 < 0) && (R1 = R287 || R1 < 1))) && (R288 != 0 || ((R5 != 0 || ((R1 != R289 || R289 = 1 || R289 < 0) && (R1 = R289 || R289 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R289 || R289 = 1 || R289 < 0) && (R289 != 1 || -1 < R1) && (R1 = R289 || R289 = 1))))) && (R290 != 0 || ((R5 != 0 || ((R1 != R291 || R291 = 1 || R291 < 0) && (R1 = R291 || R291 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R291 || R291 = 1 || R291 < 0) && (R291 != 1 || -1 < R1) && (R1 = R291 || R291 = 1))))) && (R302 != R306 || R303 = R307 || (R282 = 0 && R306 = R307)) && (R304 != R306 || R305 = R307 || (R282 = 0 && R306 = R307)) && (R308 != 0 || R306 = R309 || (R283 = 0 && R306 = 0)) && (R310 != 0 || R306 = R311 || (R283 = 0 && R306 = 0)) && (R4 = 0 || (R1 = R285 && R284 - R285 = -1)) && (R4 = 0 || (R1 = R287 && R286 - R287 = -1)) && (R288 = 0 || (R5 = 0 && R1 < 0)) && (R290 = 0 || (R5 = 0 && R1 < 0)) && (R302 = R306 || (R282 = 0 && R306 = R307)) && (R304 = R306 || (R282 = 0 && R306 = R307)) && (R308 = 0 || (R283 = 0 && R306 = 0)) && (R310 = 0 || (R283 = 0 && R306 = 0));
// End of Parikh automata intersection problem
