// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R12, R13, R132, R133, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R133 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R133 += 1 };
  s1 -> s1 [0, 60] { R133 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R133 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R220 += 1, R221 += 1 };
  s0 -> s1 [0, 65535] { R221 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R221 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R223 += 1, R192 += 1, R193 += 1 };
  s0 -> s0 [0, 65535] { R222 += 1, R223 += 1 };
  s0 -> s2 [10, 10] { R223 += 1, R193 += 1 };
  s1 -> s1 [0, 65535] { R223 += 1, R192 += 1, R193 += 1 };
  s1 -> s2 [10, 10] { R223 += 1, R193 += 1 };
  s2 -> s2 [0, 65535] { R223 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R225 += 1, R195 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R224 += 1, R225 += 1 };
  s0 -> s2 [0, 65535] { R225 += 1, R194 += 1, R195 += 1 };
  s1 -> s1 [0, 65535] { R225 += 1, R195 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R225 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R225 += 1, R195 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R225 += 1, R194 += 1, R195 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R225 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R227 += 1, R197 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s2 [0, 65535] { R227 += 1, R196 += 1, R197 += 1 };
  s0 -> s3 [9, 13] { R227 += 1, R197 += 1 };
  s0 -> s1 [14, 31] { R227 += 1, R197 += 1 };
  s0 -> s3 [32, 32] { R227 += 1, R197 += 1 };
  s0 -> s1 [33, 65535] { R227 += 1, R197 += 1 };
  s1 -> s1 [0, 65535] { R227 += 1, R197 += 1 };
  s1 -> s5 [0, 65535] { R227 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R227 += 1, R197 += 1 };
  s2 -> s2 [0, 65535] { R227 += 1, R196 += 1, R197 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R227 += 1, R197 += 1 };
  s2 -> s1 [14, 31] { R227 += 1, R197 += 1 };
  s2 -> s3 [32, 32] { R227 += 1, R197 += 1 };
  s2 -> s1 [33, 65535] { R227 += 1, R197 += 1 };
  s3 -> s1 [0, 65535] { R227 += 1, R197 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R227 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R229 += 1, R199 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R229 += 1, R198 += 1, R199 += 1 };
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s1 -> s4 [0, 65535] { R229 += 1 };
  s1 -> s1 [0, 65535] { R229 += 1, R199 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R229 += 1, R199 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R229 += 1, R198 += 1, R199 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R229 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 64] { R231 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s2 [90, 90] { R231 += 1 };
  s0 -> s1 [91, 65535] { R231 += 1 };
  s1 -> s1 [0, 64] { R231 += 1 };
  s1 -> s2 [90, 90] { R231 += 1 };
  s1 -> s1 [91, 65535] { R231 += 1 };
  s2 -> s2 [0, 64] { R231 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [90, 65535] { R231 += 1 };
  accepting s2;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R233 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R233 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 89] { R235 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s2 [0, 65535] { R235 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [90, 90] { R235 += 1 };
  s0 -> s1 [91, 65535] { R235 += 1, R13 += 1 };
  s1 -> s1 [0, 89] { R235 += 1, R13 += 1 };
  s1 -> s3 [90, 90] { R235 += 1 };
  s1 -> s1 [91, 65535] { R235 += 1, R13 += 1 };
  s2 -> s1 [0, 89] { R235 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R235 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [90, 90] { R235 += 1 };
  s2 -> s1 [91, 65535] { R235 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R235 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 8] { R237 += 1, R209 += 1 };
  s0 -> s2 [0, 65535] { R237 += 1, R208 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s0 -> s3 [9, 13] { R237 += 1, R209 += 1 };
  s0 -> s1 [14, 31] { R237 += 1, R209 += 1 };
  s0 -> s3 [32, 32] { R237 += 1, R209 += 1 };
  s0 -> s1 [33, 65535] { R237 += 1, R209 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R237 += 1 };
  s1 -> s1 [0, 65535] { R237 += 1, R209 += 1 };
  s2 -> s1 [0, 8] { R237 += 1, R209 += 1 };
  s2 -> s2 [0, 65535] { R237 += 1, R208 += 1, R209 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R237 += 1, R209 += 1 };
  s2 -> s1 [14, 31] { R237 += 1, R209 += 1 };
  s2 -> s3 [32, 32] { R237 += 1, R209 += 1 };
  s2 -> s1 [33, 65535] { R237 += 1, R209 += 1 };
  s3 -> s1 [0, 65535] { R237 += 1, R209 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R237 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R239 += 1, R210 += 1, R211 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s0 -> s2 [0, 65535] { R239 += 1, R211 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R239 += 1, R210 += 1, R211 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R239 += 1, R211 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R239 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R239 += 1, R211 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R239 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 8] { R241 += 1, R213 += 1 };
  s0 -> s2 [0, 65535] { R241 += 1, R212 += 1, R213 += 1 };
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s0 -> s3 [9, 13] { R241 += 1, R213 += 1 };
  s0 -> s1 [14, 31] { R241 += 1, R213 += 1 };
  s0 -> s3 [32, 32] { R241 += 1, R213 += 1 };
  s0 -> s1 [33, 65535] { R241 += 1, R213 += 1 };
  s1 -> s1 [0, 65535] { R241 += 1, R213 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R241 += 1 };
  s2 -> s1 [0, 8] { R241 += 1, R213 += 1 };
  s2 -> s2 [0, 65535] { R241 += 1, R212 += 1, R213 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R241 += 1, R213 += 1 };
  s2 -> s1 [14, 31] { R241 += 1, R213 += 1 };
  s2 -> s3 [32, 32] { R241 += 1, R213 += 1 };
  s2 -> s1 [33, 65535] { R241 += 1, R213 += 1 };
  s3 -> s1 [0, 65535] { R241 += 1, R213 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R241 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s1 [0, 65535] { R243 += 1, R215 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R243 += 1, R214 += 1, R215 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R243 += 1 };
  s1 -> s1 [0, 65535] { R243 += 1, R215 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R243 += 1, R215 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R243 += 1, R214 += 1, R215 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R243 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 89] { R245 += 1, R217 += 1 };
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s2 [0, 65535] { R245 += 1, R216 += 1, R217 += 1 };
  s0 -> s1 [91, 65535] { R245 += 1, R217 += 1 };
  s1 -> s1 [0, 89] { R245 += 1, R217 += 1 };
  s1 -> s1 [0, 65535] { R245 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R245 += 1, R217 += 1 };
  s2 -> s1 [0, 89] { R245 += 1, R217 += 1 };
  s2 -> s2 [0, 65535] { R245 += 1, R216 += 1, R217 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R245 += 1, R217 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R247 += 1, R218 += 1, R219 += 1 };
  s0 -> s2 [0, 65535] { R247 += 1, R219 += 1, R191 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R247 += 1, R218 += 1, R219 += 1 };
  s1 -> s2 [0, 65535] { R247 += 1, R219 += 1, R191 += 1 };
  s2 -> s3 [0, 65535] { R247 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R247 += 1, R219 += 1, R191 += 1 };
  s3 -> s3 [0, 65535] { R247 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R201 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s2 [9, 13] { R201 += 1 };
  s0 -> s1 [14, 31] { R201 += 1 };
  s0 -> s2 [32, 32] { R201 += 1 };
  s0 -> s1 [33, 65535] { R201 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R201 += 1 };
  s2 -> s1 [0, 65535] { R201 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R203 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R202 += 1, R203 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R203 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R205 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s0 -> s2 [9, 13] { R205 += 1 };
  s0 -> s1 [14, 31] { R205 += 1 };
  s0 -> s2 [32, 32] { R205 += 1 };
  s0 -> s1 [33, 65535] { R205 += 1 };
  s1 -> s1 [0, 65535] { R205 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R205 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R206 += 1, R207 += 1 };
  s0 -> s1 [0, 65535] { R207 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R207 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R193 && R2 = R211 && R3 = R229 && R12 = 0 && R132 = 0 && R133 = R247 && R192 - R193 = -1 && R208 - R211 = -1 && R209 = R211 && R210 - R211 = -1 && R212 = 0 && R213 = 1 && R214 = 0 && R215 = 1 && R220 - R247 = 1 && R221 = R229 && R222 - R247 = 1 && R223 = R229 && R224 - R247 = 1 && R225 = R229 && R226 - R247 = 1 && R227 = R229 && R228 - R247 = 1 && R230 = 0 && R231 = R247 && R232 = 0 && R233 = R247 && R234 = 0 && R235 = R247 && R236 = 0 && R237 = R247 && R238 = 0 && R239 = R247 && R240 = 0 && R241 = R247 && R242 = 0 && R243 = R247 && R244 = 0 && R245 = R247 && R246 = 0 && R1 != 0 && R193 != 0 && R10 < 1 && R13 < R211 && -2 < R13 && 0 < R211 && R247 < R229 && -1 < R247 && (R6 != 0 || ((R1 != R201 || R200 - R201 = -1 || R201 < 0) && (R1 = R201 || R1 < 1))) && (R6 != 0 || ((R1 != R203 || R202 - R203 = -1 || R203 < 0) && (R1 = R203 || R1 < 1))) && (R193 != R195 || R194 - R195 = -1 || (R4 = 0 && R195 < 0)) && (R196 != 0 || ((R5 != 0 || ((R193 != R197 || R197 = 1 || R197 < 0) && (R193 = R197 || R197 = 1 || R193 < 1))) && (R5 = 0 || ((R193 != R197 || R197 = 1 || R197 < 0) && (R197 != 1 || -1 < R193) && (R193 = R197 || R197 = 1))))) && (R198 != 0 || ((R5 != 0 || ((R193 != R199 || R199 = 1 || R199 < 0) && (R193 = R199 || R199 = 1 || R193 < 1))) && (R5 = 0 || ((R193 != R199 || R199 = 1 || R199 < 0) && (R199 != 1 || -1 < R193) && (R193 = R199 || R199 = 1))))) && (R204 != 0 || ((R7 != 0 || ((R1 != R205 || R205 = 1 || R205 < 0) && (R1 = R205 || R205 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R205 || R205 = 1 || R205 < 0) && (R205 != 1 || -1 < R1) && (R1 = R205 || R205 = 1))))) && (R206 != 0 || ((R7 != 0 || ((R1 != R207 || R207 = 1 || R207 < 0) && (R1 = R207 || R207 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R207 || R207 = 1 || R207 < 0) && (R207 != 1 || -1 < R1) && (R1 = R207 || R207 = 1))))) && (R211 != R217 || R13 - R216 = -1 || ((R191 != 0 || R217 - R13 < 2) && (R191 = 0 || R217 - R13 < 1 || R217 < 1))) && (R211 != R219 || R13 - R218 = -1 || ((R191 != 0 || R219 - R13 < 2) && (R191 = 0 || R219 - R13 < 1 || R219 < 1))) && (R6 = 0 || (R1 = R201 && R200 - R201 = -1)) && (R6 = 0 || (R1 = R203 && R202 - R203 = -1)) && (R193 = R195 || (R4 = 0 && R193 < 0)) && (R196 = 0 || (R5 = 0 && R193 < 0)) && (R198 = 0 || (R5 = 0 && R193 < 0)) && (R204 = 0 || (R7 = 0 && R1 < 0)) && (R206 = 0 || (R7 = 0 && R1 < 0)) && (R211 = R217 || (R13 - R211 = -1 && R191 = 0)) && (R211 = R219 || (R13 - R211 = -1 && R191 = 0));
// End of Parikh automata intersection problem
