// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R5, R6;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 43];
  s0 -> s0 [0, 65535] { R2 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535];
  s1 -> s1 [0, 43];
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 65535] { R6 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R6 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = R6 && R5 = 0 && R0 != 0 && R2 < 1 && 0 < R6;
// End of Parikh automata intersection problem
