// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R2, R3, R4, R6, R7, R78, R79;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60] { R79 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R79 += 1 };
  s1 -> s1 [0, 60] { R79 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R79 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R126 += 1, R127 += 1 };
  s0 -> s1 [0, 65535] { R127 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R127 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 64] { R129 += 1 };
  s0 -> s0 [0, 65535] { R128 += 1, R129 += 1 };
  s0 -> s2 [67, 67] { R129 += 1 };
  s0 -> s1 [68, 65535] { R129 += 1 };
  s1 -> s1 [0, 64] { R129 += 1 };
  s1 -> s2 [67, 67] { R129 += 1 };
  s1 -> s1 [68, 65535] { R129 += 1 };
  s2 -> s2 [0, 64] { R129 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R129 += 1 };
  accepting s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R130 += 1, R131 += 1 };
  s0 -> s1 [0, 65535] { R131 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R131 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 66] { R133 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R133 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s3 [67, 67] { R133 += 1 };
  s0 -> s1 [68, 65535] { R133 += 1, R7 += 1 };
  s1 -> s1 [0, 66] { R133 += 1, R7 += 1 };
  s1 -> s3 [67, 67] { R133 += 1 };
  s1 -> s1 [68, 65535] { R133 += 1, R7 += 1 };
  s2 -> s1 [0, 66] { R133 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R133 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [67, 67] { R133 += 1 };
  s2 -> s1 [68, 65535] { R133 += 1, R7 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R133 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R135 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R135 += 1, R114 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s0 -> s3 [9, 13] { R135 += 1, R115 += 1 };
  s0 -> s1 [14, 31] { R135 += 1, R115 += 1 };
  s0 -> s3 [32, 32] { R135 += 1, R115 += 1 };
  s0 -> s1 [33, 65535] { R135 += 1, R115 += 1 };
  s1 -> s5 [0, 65535] { R135 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R135 += 1, R115 += 1 };
  s2 -> s1 [0, 8] { R135 += 1, R115 += 1 };
  s2 -> s2 [0, 65535] { R135 += 1, R114 += 1, R115 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R135 += 1, R115 += 1 };
  s2 -> s1 [14, 31] { R135 += 1, R115 += 1 };
  s2 -> s3 [32, 32] { R135 += 1, R115 += 1 };
  s2 -> s1 [33, 65535] { R135 += 1, R115 += 1 };
  s3 -> s1 [0, 65535] { R135 += 1, R115 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R135 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R137 += 1, R116 += 1, R117 += 1 };
  s0 -> s2 [0, 65535] { R137 += 1, R117 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535] { R137 += 1, R116 += 1, R117 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R137 += 1, R117 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R137 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R137 += 1, R117 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R137 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R139 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s2 [0, 65535] { R139 += 1, R118 += 1, R119 += 1 };
  s0 -> s3 [9, 13] { R139 += 1, R119 += 1 };
  s0 -> s1 [14, 31] { R139 += 1, R119 += 1 };
  s0 -> s3 [32, 32] { R139 += 1, R119 += 1 };
  s0 -> s1 [33, 65535] { R139 += 1, R119 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R139 += 1, R119 += 1 };
  s1 -> s5 [0, 65535] { R139 += 1 };
  s2 -> s1 [0, 8] { R139 += 1, R119 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R139 += 1, R118 += 1, R119 += 1 };
  s2 -> s3 [9, 13] { R139 += 1, R119 += 1 };
  s2 -> s1 [14, 31] { R139 += 1, R119 += 1 };
  s2 -> s3 [32, 32] { R139 += 1, R119 += 1 };
  s2 -> s1 [33, 65535] { R139 += 1, R119 += 1 };
  s3 -> s1 [0, 65535] { R139 += 1, R119 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R139 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R141 += 1, R120 += 1, R121 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R121 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R141 += 1, R120 += 1, R121 += 1 };
  s1 -> s2 [0, 65535] { R141 += 1, R121 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R141 += 1, R121 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R141 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R141 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 66] { R143 += 1, R123 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R122 += 1, R123 += 1 };
  s0 -> s3 [67, 67] { R143 += 1, R123 += 1 };
  s0 -> s1 [68, 65535] { R143 += 1, R123 += 1 };
  s1 -> s1 [0, 66] { R143 += 1, R123 += 1 };
  s1 -> s3 [67, 67] { R143 += 1, R123 += 1 };
  s1 -> s1 [68, 65535] { R143 += 1, R123 += 1 };
  s2 -> s1 [0, 66] { R143 += 1, R123 += 1 };
  s2 -> s2 [0, 65535] { R143 += 1, R122 += 1, R123 += 1 };
  s2 -> s3 [67, 67] { R143 += 1, R123 += 1 };
  s2 -> s1 [68, 65535] { R143 += 1, R123 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R143 += 1, R123 += 1 };
  s3 -> s5 [0, 65535] { R143 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R143 += 1 };
  accepting s3, s4, s5;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R145 += 1, R124 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R125 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R145 += 1, R124 += 1, R125 += 1 };
  s1 -> s2 [0, 65535] { R145 += 1, R125 += 1, R113 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R145 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R125 += 1, R113 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R145 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R123 && R2 = R127 && R6 = 0 && R7 - R122 = -1 && R78 = 0 && R79 = R145 && R114 - R123 = -1 && R115 = R123 && R116 - R123 = -1 && R117 = R123 && R118 = 0 && R119 = 1 && R120 = 0 && R121 = 1 && R126 - R145 = 1 && R128 = 0 && R129 = R145 && R130 = 0 && R131 = R145 && R132 = 0 && R133 = R145 && R134 = 0 && R135 = R145 && R136 = 0 && R137 = R145 && R138 = 0 && R139 = R145 && R140 = 0 && R141 = R145 && R142 = 0 && R143 = R145 && R144 = 0 && R0 != 0 && R122 - R123 < 1 && -1 < R122 && 0 < R123 && R145 < R127 && -1 < R145 && (R122 != R124 || R123 = R125 || ((R113 != 0 || R123 - R124 < 1 || R124 < 0) && (R113 = 0 || R123 < R124 || R124 < 0))) && (R122 = R124 || (R113 = 0 && R122 = R123));
// End of Parikh automata intersection problem
