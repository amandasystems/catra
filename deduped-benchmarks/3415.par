// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R3, R4, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60] { R10 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R10 += 1 };
  s1 -> s1 [0, 60] { R10 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 65535] { R58 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R58 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 64] { R60 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s2 [67, 67] { R60 += 1 };
  s0 -> s1 [68, 65535] { R60 += 1 };
  s1 -> s1 [0, 64] { R60 += 1 };
  s1 -> s2 [67, 67] { R60 += 1 };
  s1 -> s1 [68, 65535] { R60 += 1 };
  s2 -> s2 [0, 64] { R60 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R60 += 1 };
  accepting s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s1 [0, 65535] { R62 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R62 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 66] { R64 += 1 };
  s0 -> s2 [0, 65535] { R64 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s0 -> s3 [67, 67] { R64 += 1 };
  s0 -> s1 [68, 65535] { R64 += 1 };
  s1 -> s1 [0, 66] { R64 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R64 += 1 };
  s1 -> s1 [68, 65535] { R64 += 1 };
  s2 -> s1 [0, 66] { R64 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R64 += 1, R5 += 1 };
  s2 -> s3 [67, 67] { R64 += 1 };
  s2 -> s1 [68, 65535] { R64 += 1 };
  s3 -> s3 [0, 65535] { R64 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R66 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R66 += 1, R45 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s3 [9, 13] { R66 += 1, R46 += 1 };
  s0 -> s1 [14, 31] { R66 += 1, R46 += 1 };
  s0 -> s3 [32, 32] { R66 += 1, R46 += 1 };
  s0 -> s1 [33, 65535] { R66 += 1, R46 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R66 += 1, R46 += 1 };
  s1 -> s5 [0, 65535] { R66 += 1 };
  s2 -> s1 [0, 8] { R66 += 1, R46 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R66 += 1, R45 += 1, R46 += 1 };
  s2 -> s3 [9, 13] { R66 += 1, R46 += 1 };
  s2 -> s1 [14, 31] { R66 += 1, R46 += 1 };
  s2 -> s3 [32, 32] { R66 += 1, R46 += 1 };
  s2 -> s1 [33, 65535] { R66 += 1, R46 += 1 };
  s3 -> s1 [0, 65535] { R66 += 1, R46 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R66 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s1 [0, 65535] { R68 += 1, R47 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R68 += 1, R48 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1, R47 += 1, R48 += 1 };
  s1 -> s2 [0, 65535] { R68 += 1, R48 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R68 += 1, R48 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R68 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R68 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R70 += 1, R50 += 1 };
  s0 -> s2 [0, 65535] { R70 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s3 [9, 13] { R70 += 1, R50 += 1 };
  s0 -> s1 [14, 31] { R70 += 1, R50 += 1 };
  s0 -> s3 [32, 32] { R70 += 1, R50 += 1 };
  s0 -> s1 [33, 65535] { R70 += 1, R50 += 1 };
  s1 -> s5 [0, 65535] { R70 += 1 };
  s1 -> s1 [0, 65535] { R70 += 1, R50 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R70 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R70 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R70 += 1, R50 += 1 };
  s2 -> s1 [14, 31] { R70 += 1, R50 += 1 };
  s2 -> s3 [32, 32] { R70 += 1, R50 += 1 };
  s2 -> s1 [33, 65535] { R70 += 1, R50 += 1 };
  s3 -> s1 [0, 65535] { R70 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R70 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R72 += 1, R51 += 1, R52 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R52 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s1 -> s1 [0, 65535] { R72 += 1, R51 += 1, R52 += 1 };
  s1 -> s2 [0, 65535] { R72 += 1, R52 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R72 += 1 };
  s2 -> s2 [0, 65535] { R72 += 1, R52 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R72 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 66] { R74 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [67, 67] { R74 += 1, R54 += 1 };
  s0 -> s1 [68, 65535] { R74 += 1, R54 += 1 };
  s1 -> s1 [0, 66] { R74 += 1, R54 += 1 };
  s1 -> s3 [67, 67] { R74 += 1, R54 += 1 };
  s1 -> s1 [68, 65535] { R74 += 1, R54 += 1 };
  s2 -> s1 [0, 66] { R74 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R74 += 1, R53 += 1, R54 += 1 };
  s2 -> s3 [67, 67] { R74 += 1, R54 += 1 };
  s2 -> s1 [68, 65535] { R74 += 1, R54 += 1 };
  s3 -> s4 [0, 65535] { R74 += 1 };
  s3 -> s3 [0, 65535] { R74 += 1, R54 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R74 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R76 += 1, R55 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R56 += 1, R44 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R76 += 1, R55 += 1, R56 += 1 };
  s1 -> s2 [0, 65535] { R76 += 1, R56 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R76 += 1 };
  s2 -> s2 [0, 65535] { R76 += 1, R56 += 1, R44 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R76 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R56 && R2 = R58 && R9 = 0 && R10 = R76 && R45 - R56 = -1 && R46 = R56 && R47 - R56 = -1 && R48 = R56 && R49 = 0 && R50 = 1 && R51 = 0 && R52 = 1 && R53 = 0 && R54 = R56 && R55 = 0 && R57 - R76 = 1 && R59 = 0 && R60 = R76 && R61 = 0 && R62 = R76 && R63 = 0 && R64 = R76 && R65 = 0 && R66 = R76 && R67 = 0 && R68 = R76 && R69 = 0 && R70 = R76 && R71 = 0 && R72 = R76 && R73 = 0 && R74 = R76 && R75 = 0 && R0 != 0 && R5 < 1 && 0 < R56 && R76 < R58 && -1 < R76;
// End of Parikh automata intersection problem
