// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R393, R394, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R476, R477, R478, R479, R480, R481, R482, R483, R484, R485, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [69, 69];
  s0 -> s0 [70, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [69, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R393 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 68];
  s0 -> s0 [0, 65535] { R394 += 1 };
  s0 -> s2 [69, 69];
  s0 -> s1 [70, 65535];
  s1 -> s1 [0, 68];
  s1 -> s2 [69, 69];
  s1 -> s1 [70, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R418 += 1 };
  s0 -> s0 [0, 65535] { R417 += 1, R418 += 1 };
  s0 -> s2 [9, 13] { R418 += 1 };
  s0 -> s1 [14, 31] { R418 += 1 };
  s0 -> s2 [32, 32] { R418 += 1 };
  s0 -> s1 [33, 65535] { R418 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R418 += 1 };
  s2 -> s1 [0, 65535] { R418 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R420 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R419 += 1, R420 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R420 += 1, R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R422 += 1 };
  s0 -> s0 [0, 65535] { R421 += 1, R422 += 1 };
  s0 -> s2 [9, 13] { R422 += 1 };
  s0 -> s1 [14, 31] { R422 += 1 };
  s0 -> s2 [32, 32] { R422 += 1 };
  s0 -> s1 [33, 65535] { R422 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R422 += 1 };
  s2 -> s1 [0, 65535] { R422 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R424 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R423 += 1, R424 += 1 };
  s1 -> s1 [0, 65535] { R424 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 68] { R434 += 1 };
  s0 -> s0 [0, 65535] { R433 += 1, R434 += 1 };
  s0 -> s1 [70, 65535] { R434 += 1 };
  s1 -> s1 [0, 68] { R434 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [70, 65535] { R434 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R436 += 1, R399 += 1 };
  s0 -> s0 [0, 65535] { R435 += 1, R436 += 1 };
  s1 -> s1 [0, 65535] { R436 += 1, R399 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R438 += 1 };
  s0 -> s0 [0, 65535] { R437 += 1, R438 += 1 };
  s0 -> s1 [91, 65535] { R438 += 1 };
  s1 -> s1 [0, 69] { R438 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R438 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R443 += 1, R444 += 1 };
  s0 -> s1 [0, 65535] { R444 += 1, R400 += 1 };
  s1 -> s1 [0, 65535] { R444 += 1, R400 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 68] { R446 += 1 };
  s0 -> s0 [0, 65535] { R445 += 1, R446 += 1 };
  s0 -> s2 [69, 69] { R446 += 1 };
  s0 -> s3 [69, 69] { R446 += 1 };
  s0 -> s1 [91, 65535] { R446 += 1 };
  s1 -> s1 [0, 68] { R446 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [69, 69] { R446 += 1 };
  s1 -> s3 [69, 69] { R446 += 1 };
  s1 -> s1 [91, 65535] { R446 += 1 };
  s2 -> s2 [0, 69] { R446 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R446 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P29
automaton P29_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining c7
automaton c7_0 {
  init s0;
  s0 -> s1 [101, 101];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R16 += 1 };
  s1 -> s1 [0, 60] { R16 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R425 += 1, R426 += 1 };
  s0 -> s1 [0, 65535] { R426 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R426 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R472 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R471 += 1, R472 += 1 };
  s1 -> s1 [0, 65535] { R472 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R473 += 1, R474 += 1 };
  s0 -> s1 [0, 65535] { R474 += 1, R409 += 1, R410 += 1 };
  s0 -> s2 [12, 12] { R474 += 1, R410 += 1 };
  s1 -> s1 [0, 65535] { R474 += 1, R409 += 1, R410 += 1 };
  s1 -> s2 [12, 12] { R474 += 1, R410 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R474 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R475 += 1, R476 += 1 };
  s0 -> s1 [0, 65535] { R476 += 1, R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R476 += 1, R412 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R476 += 1, R411 += 1, R412 += 1 };
  s1 -> s2 [0, 65535] { R476 += 1, R412 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R476 += 1 };
  s2 -> s2 [0, 65535] { R476 += 1, R412 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R476 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R478 += 1, R414 += 1 };
  s0 -> s2 [0, 65535] { R478 += 1, R413 += 1, R414 += 1 };
  s0 -> s0 [0, 65535] { R477 += 1, R478 += 1 };
  s0 -> s3 [9, 13] { R478 += 1, R414 += 1 };
  s0 -> s1 [14, 31] { R478 += 1, R414 += 1 };
  s0 -> s3 [32, 32] { R478 += 1, R414 += 1 };
  s0 -> s1 [33, 65535] { R478 += 1, R414 += 1 };
  s1 -> s1 [0, 65535] { R478 += 1, R414 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R478 += 1 };
  s2 -> s1 [0, 8] { R478 += 1, R414 += 1 };
  s2 -> s2 [0, 65535] { R478 += 1, R413 += 1, R414 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R478 += 1, R414 += 1 };
  s2 -> s1 [14, 31] { R478 += 1, R414 += 1 };
  s2 -> s3 [32, 32] { R478 += 1, R414 += 1 };
  s2 -> s1 [33, 65535] { R478 += 1, R414 += 1 };
  s3 -> s1 [0, 65535] { R478 += 1, R414 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R478 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R480 += 1, R416 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R479 += 1, R480 += 1 };
  s0 -> s2 [0, 65535] { R480 += 1, R415 += 1, R416 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R480 += 1, R416 += 1, R8 += 1 };
  s1 -> s4 [0, 65535] { R480 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R480 += 1, R416 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R480 += 1, R415 += 1, R416 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R480 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R482 += 1, R448 += 1 };
  s0 -> s0 [0, 65535] { R481 += 1, R482 += 1 };
  s0 -> s2 [0, 65535] { R482 += 1, R447 += 1, R448 += 1 };
  s0 -> s3 [69, 69] { R482 += 1, R448 += 1 };
  s0 -> s1 [70, 65535] { R482 += 1, R448 += 1 };
  s1 -> s1 [0, 64] { R482 += 1, R448 += 1 };
  s1 -> s3 [69, 69] { R482 += 1, R448 += 1 };
  s1 -> s1 [70, 65535] { R482 += 1, R448 += 1 };
  s2 -> s1 [0, 64] { R482 += 1, R448 += 1 };
  s2 -> s2 [0, 65535] { R482 += 1, R447 += 1, R448 += 1 };
  s2 -> s3 [69, 69] { R482 += 1, R448 += 1 };
  s2 -> s1 [70, 65535] { R482 += 1, R448 += 1 };
  s3 -> s3 [0, 64] { R482 += 1, R448 += 1 };
  s3 -> s3 [0, 65535] { R482 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [69, 65535] { R482 += 1, R448 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R484 += 1, R449 += 1, R450 += 1 };
  s0 -> s0 [0, 65535] { R483 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R484 += 1, R450 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R484 += 1, R449 += 1, R450 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R484 += 1, R450 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R484 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R484 += 1, R450 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R484 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 68] { R486 += 1, R452 += 1 };
  s0 -> s2 [0, 65535] { R486 += 1, R452 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R485 += 1, R486 += 1 };
  s0 -> s3 [0, 65535] { R486 += 1, R451 += 1, R452 += 1 };
  s0 -> s4 [69, 69] { R486 += 1, R452 += 1 };
  s0 -> s1 [70, 65535] { R486 += 1, R452 += 1 };
  s1 -> s1 [0, 68] { R486 += 1, R452 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R486 += 1 };
  s1 -> s4 [69, 69] { R486 += 1, R452 += 1 };
  s1 -> s1 [70, 65535] { R486 += 1, R452 += 1 };
  s2 -> s1 [0, 68] { R486 += 1, R452 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R486 += 1, R452 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R486 += 1 };
  s2 -> s4 [69, 69] { R486 += 1, R452 += 1 };
  s2 -> s1 [70, 65535] { R486 += 1, R452 += 1 };
  s3 -> s1 [0, 68] { R486 += 1, R452 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R486 += 1, R452 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R486 += 1, R451 += 1, R452 += 1 };
  s3 -> s4 [69, 69] { R486 += 1, R452 += 1 };
  s3 -> s1 [70, 65535] { R486 += 1, R452 += 1 };
  s4 -> s4 [0, 65535] { R486 += 1, R452 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R486 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R488 += 1, R454 += 1, R402 += 1 };
  s0 -> s2 [0, 65535] { R488 += 1, R453 += 1, R454 += 1 };
  s0 -> s3 [0, 65535] { R488 += 1, R454 += 1, R401 += 1, R402 += 1 };
  s0 -> s0 [0, 65535] { R487 += 1, R488 += 1 };
  s0 -> s4 [9, 13] { R488 += 1, R454 += 1, R402 += 1 };
  s0 -> s1 [14, 31] { R488 += 1, R454 += 1, R402 += 1 };
  s0 -> s4 [32, 32] { R488 += 1, R454 += 1, R402 += 1 };
  s0 -> s1 [33, 65535] { R488 += 1, R454 += 1, R402 += 1 };
  s1 -> s5 [0, 65535] { R488 += 1 };
  s1 -> s1 [0, 65535] { R488 += 1, R454 += 1, R402 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R488 += 1, R454 += 1 };
  s2 -> s1 [0, 8] { R488 += 1, R454 += 1, R402 += 1 };
  s2 -> s2 [0, 65535] { R488 += 1, R453 += 1, R454 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R488 += 1, R454 += 1, R401 += 1, R402 += 1 };
  s2 -> s4 [9, 13] { R488 += 1, R454 += 1, R402 += 1 };
  s2 -> s1 [14, 31] { R488 += 1, R454 += 1, R402 += 1 };
  s2 -> s4 [32, 32] { R488 += 1, R454 += 1, R402 += 1 };
  s2 -> s1 [33, 65535] { R488 += 1, R454 += 1, R402 += 1 };
  s3 -> s1 [0, 8] { R488 += 1, R454 += 1, R402 += 1 };
  s3 -> s5 [0, 65535] { R488 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R488 += 1, R454 += 1, R401 += 1, R402 += 1 };
  s3 -> s4 [9, 13] { R488 += 1, R454 += 1, R402 += 1 };
  s3 -> s1 [14, 31] { R488 += 1, R454 += 1, R402 += 1 };
  s3 -> s4 [32, 32] { R488 += 1, R454 += 1, R402 += 1 };
  s3 -> s1 [33, 65535] { R488 += 1, R454 += 1, R402 += 1 };
  s4 -> s1 [0, 65535] { R488 += 1, R454 += 1, R402 += 1 };
  s5 -> s5 [0, 65535] { R488 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R488 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R488 += 1, R454 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R490 += 1, R455 += 1, R456 += 1 };
  s0 -> s0 [0, 65535] { R489 += 1, R490 += 1 };
  s0 -> s2 [0, 65535] { R490 += 1, R456 += 1, R403 += 1, R404 += 1 };
  s0 -> s3 [0, 65535] { R490 += 1, R456 += 1, R404 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R490 += 1, R455 += 1, R456 += 1 };
  s1 -> s2 [0, 65535] { R490 += 1, R456 += 1, R403 += 1, R404 += 1 };
  s1 -> s3 [0, 65535] { R490 += 1, R456 += 1, R404 += 1, R5 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R490 += 1 };
  s2 -> s2 [0, 65535] { R490 += 1, R456 += 1, R403 += 1, R404 += 1 };
  s2 -> s3 [0, 65535] { R490 += 1, R456 += 1, R404 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R490 += 1 };
  s3 -> s3 [0, 65535] { R490 += 1, R456 += 1, R404 += 1, R5 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R490 += 1, R456 += 1 };
  s4 -> s4 [0, 65535] { R490 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R490 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R490 += 1, R456 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R492 += 1, R458 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R492 += 1, R457 += 1, R458 += 1 };
  s0 -> s3 [0, 65535] { R492 += 1, R458 += 1, R405 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R491 += 1, R492 += 1 };
  s0 -> s4 [9, 13] { R492 += 1, R458 += 1, R406 += 1 };
  s0 -> s1 [14, 31] { R492 += 1, R458 += 1, R406 += 1 };
  s0 -> s4 [32, 32] { R492 += 1, R458 += 1, R406 += 1 };
  s0 -> s1 [33, 65535] { R492 += 1, R458 += 1, R406 += 1 };
  s1 -> s5 [0, 65535] { R492 += 1 };
  s1 -> s1 [0, 65535] { R492 += 1, R458 += 1, R406 += 1 };
  s1 -> s7 [0, 65535] { R492 += 1, R458 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R492 += 1, R458 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R492 += 1, R457 += 1, R458 += 1 };
  s2 -> s3 [0, 65535] { R492 += 1, R458 += 1, R405 += 1, R406 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [9, 13] { R492 += 1, R458 += 1, R406 += 1 };
  s2 -> s1 [14, 31] { R492 += 1, R458 += 1, R406 += 1 };
  s2 -> s4 [32, 32] { R492 += 1, R458 += 1, R406 += 1 };
  s2 -> s1 [33, 65535] { R492 += 1, R458 += 1, R406 += 1 };
  s3 -> s1 [0, 8] { R492 += 1, R458 += 1, R406 += 1 };
  s3 -> s5 [0, 65535] { R492 += 1 };
  s3 -> s3 [0, 65535] { R492 += 1, R458 += 1, R405 += 1, R406 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [9, 13] { R492 += 1, R458 += 1, R406 += 1 };
  s3 -> s1 [14, 31] { R492 += 1, R458 += 1, R406 += 1 };
  s3 -> s4 [32, 32] { R492 += 1, R458 += 1, R406 += 1 };
  s3 -> s1 [33, 65535] { R492 += 1, R458 += 1, R406 += 1 };
  s4 -> s1 [0, 65535] { R492 += 1, R458 += 1, R406 += 1 };
  s5 -> s5 [0, 65535] { R492 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R492 += 1 };
  s7 -> s7 [0, 65535] { R492 += 1, R458 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R494 += 1, R460 += 1, R408 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R494 += 1, R459 += 1, R460 += 1 };
  s0 -> s3 [0, 65535] { R494 += 1, R460 += 1, R407 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R493 += 1, R494 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R494 += 1, R460 += 1, R408 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R494 += 1 };
  s1 -> s6 [0, 65535] { R494 += 1, R460 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R494 += 1, R460 += 1, R408 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R494 += 1, R459 += 1, R460 += 1 };
  s2 -> s3 [0, 65535] { R494 += 1, R460 += 1, R407 += 1, R408 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R494 += 1, R460 += 1, R408 += 1, R6 += 1 };
  s3 -> s5 [0, 65535] { R494 += 1 };
  s3 -> s3 [0, 65535] { R494 += 1, R460 += 1, R407 += 1, R408 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R494 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R494 += 1 };
  s6 -> s6 [0, 65535] { R494 += 1, R460 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 68] { R496 += 1, R462 += 1, R428 += 1 };
  s0 -> s2 [0, 65535] { R496 += 1, R461 += 1, R462 += 1 };
  s0 -> s0 [0, 65535] { R495 += 1, R496 += 1 };
  s0 -> s3 [0, 65535] { R496 += 1, R462 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [70, 65535] { R496 += 1, R462 += 1, R428 += 1 };
  s1 -> s1 [0, 68] { R496 += 1, R462 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R496 += 1, R462 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R496 += 1 };
  s1 -> s1 [70, 65535] { R496 += 1, R462 += 1, R428 += 1 };
  s2 -> s1 [0, 68] { R496 += 1, R462 += 1, R428 += 1 };
  s2 -> s2 [0, 65535] { R496 += 1, R461 += 1, R462 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R496 += 1, R462 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [70, 65535] { R496 += 1, R462 += 1, R428 += 1 };
  s3 -> s1 [0, 68] { R496 += 1, R462 += 1, R428 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R496 += 1, R462 += 1, R427 += 1, R428 += 1 };
  s3 -> s5 [0, 65535] { R496 += 1 };
  s3 -> s1 [70, 65535] { R496 += 1, R462 += 1, R428 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R496 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R498 += 1, R463 += 1, R464 += 1 };
  s0 -> s0 [0, 65535] { R497 += 1, R498 += 1 };
  s0 -> s2 [0, 65535] { R498 += 1, R464 += 1, R429 += 1, R430 += 1 };
  s0 -> s3 [0, 65535] { R498 += 1, R464 += 1, R430 += 1, R397 += 1 };
  s1 -> s1 [0, 65535] { R498 += 1, R463 += 1, R464 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R498 += 1, R464 += 1, R429 += 1, R430 += 1 };
  s1 -> s3 [0, 65535] { R498 += 1, R464 += 1, R430 += 1, R397 += 1 };
  s2 -> s4 [0, 65535] { R498 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R498 += 1, R464 += 1, R429 += 1, R430 += 1 };
  s2 -> s3 [0, 65535] { R498 += 1, R464 += 1, R430 += 1, R397 += 1 };
  s3 -> s4 [0, 65535] { R498 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R498 += 1, R464 += 1, R430 += 1, R397 += 1 };
  s3 -> s6 [0, 65535] { R498 += 1, R464 += 1 };
  s4 -> s4 [0, 65535] { R498 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R498 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R498 += 1, R464 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 69] { R500 += 1, R466 += 1, R432 += 1 };
  s0 -> s0 [0, 65535] { R499 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R500 += 1, R466 += 1, R431 += 1, R432 += 1 };
  s0 -> s3 [0, 65535] { R500 += 1, R465 += 1, R466 += 1 };
  s0 -> s4 [83, 83] { R500 += 1, R466 += 1, R432 += 1 };
  s0 -> s1 [84, 65535] { R500 += 1, R466 += 1, R432 += 1 };
  s1 -> s1 [0, 69] { R500 += 1, R466 += 1, R432 += 1 };
  s1 -> s4 [83, 83] { R500 += 1, R466 += 1, R432 += 1 };
  s1 -> s1 [84, 65535] { R500 += 1, R466 += 1, R432 += 1 };
  s2 -> s1 [0, 69] { R500 += 1, R466 += 1, R432 += 1 };
  s2 -> s2 [0, 65535] { R500 += 1, R466 += 1, R431 += 1, R432 += 1 };
  s2 -> s4 [83, 83] { R500 += 1, R466 += 1, R432 += 1 };
  s2 -> s1 [84, 65535] { R500 += 1, R466 += 1, R432 += 1 };
  s3 -> s1 [0, 69] { R500 += 1, R466 += 1, R432 += 1 };
  s3 -> s2 [0, 65535] { R500 += 1, R466 += 1, R431 += 1, R432 += 1 };
  s3 -> s3 [0, 65535] { R500 += 1, R465 += 1, R466 += 1 };
  s3 -> s4 [83, 83] { R500 += 1, R466 += 1, R432 += 1 };
  s3 -> s1 [84, 65535] { R500 += 1, R466 += 1, R432 += 1 };
  s4 -> s4 [0, 69] { R500 += 1, R466 += 1, R432 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R500 += 1 };
  s4 -> s4 [0, 65535] { R500 += 1, R466 += 1 };
  s4 -> s4 [83, 65535] { R500 += 1, R466 += 1, R432 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R500 += 1 };
  accepting s4, s5, s6;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R502 += 1, R468 += 1, R440 += 1, R398 += 1 };
  s0 -> s2 [0, 65535] { R502 += 1, R467 += 1, R468 += 1 };
  s0 -> s3 [0, 65535] { R502 += 1, R468 += 1, R439 += 1, R440 += 1 };
  s0 -> s0 [0, 65535] { R501 += 1, R502 += 1 };
  s1 -> s1 [0, 65535] { R502 += 1, R468 += 1, R440 += 1, R398 += 1 };
  s1 -> s4 [0, 65535] { R502 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R502 += 1, R468 += 1 };
  s2 -> s1 [0, 65535] { R502 += 1, R468 += 1, R440 += 1, R398 += 1 };
  s2 -> s2 [0, 65535] { R502 += 1, R467 += 1, R468 += 1 };
  s2 -> s3 [0, 65535] { R502 += 1, R468 += 1, R439 += 1, R440 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R502 += 1, R468 += 1, R440 += 1, R398 += 1 };
  s3 -> s3 [0, 65535] { R502 += 1, R468 += 1, R439 += 1, R440 += 1 };
  s3 -> s4 [0, 65535] { R502 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R502 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R502 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R502 += 1, R468 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 68] { R504 += 1, R470 += 1, R442 += 1 };
  s0 -> s2 [0, 65535] { R504 += 1, R469 += 1, R470 += 1 };
  s0 -> s3 [0, 65535] { R504 += 1, R470 += 1, R441 += 1, R442 += 1 };
  s0 -> s0 [0, 65535] { R503 += 1, R504 += 1 };
  s0 -> s4 [69, 69] { R504 += 1, R470 += 1, R442 += 1 };
  s0 -> s5 [69, 69] { R504 += 1, R470 += 1, R442 += 1 };
  s0 -> s1 [84, 65535] { R504 += 1, R470 += 1, R442 += 1 };
  s1 -> s1 [0, 68] { R504 += 1, R470 += 1, R442 += 1 };
  s1 -> s1 [0, 65535] { R504 += 1, R470 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R504 += 1 };
  s1 -> s4 [69, 69] { R504 += 1, R470 += 1, R442 += 1 };
  s1 -> s5 [69, 69] { R504 += 1, R470 += 1, R442 += 1 };
  s1 -> s1 [84, 65535] { R504 += 1, R470 += 1, R442 += 1 };
  s2 -> s1 [0, 68] { R504 += 1, R470 += 1, R442 += 1 };
  s2 -> s2 [0, 65535] { R504 += 1, R469 += 1, R470 += 1 };
  s2 -> s3 [0, 65535] { R504 += 1, R470 += 1, R441 += 1, R442 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [69, 69] { R504 += 1, R470 += 1, R442 += 1 };
  s2 -> s5 [69, 69] { R504 += 1, R470 += 1, R442 += 1 };
  s2 -> s1 [84, 65535] { R504 += 1, R470 += 1, R442 += 1 };
  s3 -> s1 [0, 68] { R504 += 1, R470 += 1, R442 += 1 };
  s3 -> s3 [0, 65535] { R504 += 1, R470 += 1, R441 += 1, R442 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R504 += 1 };
  s3 -> s4 [69, 69] { R504 += 1, R470 += 1, R442 += 1 };
  s3 -> s5 [69, 69] { R504 += 1, R470 += 1, R442 += 1 };
  s3 -> s1 [84, 65535] { R504 += 1, R470 += 1, R442 += 1 };
  s4 -> s4 [0, 69] { R504 += 1, R470 += 1, R442 += 1 };
  s4 -> s4 [0, 65535] { R504 += 1, R470 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R504 += 1 };
  s4 -> s4 [84, 65535] { R504 += 1, R470 += 1, R442 += 1 };
  s5 -> s5 [0, 65535] { R504 += 1, R470 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R504 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R504 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 = R432 && R2 - R470 = 1 && R3 = R426 && R4 = R438 && R15 = 0 && R16 = R504 && R401 - R432 = -1 && R402 = R432 && R403 - R432 = -1 && R404 = R432 && R405 = 0 && R406 = 1 && R407 = 0 && R408 = 1 && R409 = R470 && R410 - R470 = 1 && R411 = R470 && R412 - R470 = 1 && R413 = 0 && R414 = 1 && R415 = 0 && R416 = 1 && R417 - R438 = -1 && R418 = R438 && R419 - R438 = -1 && R420 = R438 && R421 = 0 && R422 = 1 && R423 = 0 && R424 = 1 && R425 - R504 = 1 && R427 = 0 && R428 = R432 && R429 = 0 && R430 = R432 && R431 = 0 && R433 = 0 && R434 = R438 && R435 = 0 && R436 = R438 && R437 = 0 && R447 = 0 && R448 = R470 && R449 = 0 && R450 = R470 && R451 = 0 && R452 = R470 && R453 = 0 && R454 = R470 && R455 = 0 && R456 = R470 && R457 = 0 && R458 = R470 && R459 = 0 && R460 = R470 && R461 = 0 && R462 = R470 && R463 = 0 && R464 = R470 && R465 = 0 && R466 = R470 && R467 = 0 && R468 = R470 && R469 = 0 && R471 = 0 && R472 = R504 && R473 = 0 && R474 = R504 && R475 = 0 && R476 = R504 && R477 = 0 && R478 = R504 && R479 = 0 && R480 = R504 && R481 = 0 && R482 = R504 && R483 = 0 && R484 = R504 && R485 = 0 && R486 = R504 && R487 = 0 && R488 = R504 && R489 = 0 && R490 = R504 && R491 = 0 && R492 = R504 && R493 = 0 && R494 = R504 && R495 = 0 && R496 = R504 && R497 = 0 && R498 = R504 && R499 = 0 && R500 = R504 && R501 = 0 && R502 = R504 && R503 = 0 && R0 != 0 && R11 < 1 && R393 < 1 && R394 < 1 && R504 < R426 && 0 < R432 && 0 < R438 && -1 < R470 && -1 < R504 && (R398 = 0 || (R439 = 0 && R440 = 0)) && (R398 = 0 || (R441 = 0 && R442 = 0)) && (R400 = 0 || (R443 = 0 && R444 = 0)) && (R400 = 0 || (R445 = 0 && R446 = 0));
// End of Parikh automata intersection problem
