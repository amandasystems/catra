// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R46, R48, R49, R6, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R49 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R49 += 1 };
  s1 -> s1 [0, 43] { R49 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 43] { R77 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s1 [45, 65535] { R77 += 1 };
  s1 -> s1 [0, 43] { R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R77 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s1 [0, 65535] { R79 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 60] { R81 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s2 [0, 65535] { R81 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [61, 61] { R81 += 1 };
  s0 -> s1 [62, 65535] { R81 += 1, R7 += 1 };
  s1 -> s1 [0, 60] { R81 += 1, R7 += 1 };
  s1 -> s3 [61, 61] { R81 += 1 };
  s1 -> s1 [62, 65535] { R81 += 1, R7 += 1 };
  s2 -> s1 [0, 60] { R81 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R81 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [61, 61] { R81 += 1 };
  s2 -> s1 [62, 65535] { R81 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R81 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s1 [0, 65535] { R83 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R83 += 1, R67 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R46 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R69 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s2 [9, 13] { R69 += 1 };
  s0 -> s1 [14, 31] { R69 += 1 };
  s0 -> s2 [32, 32] { R69 += 1 };
  s0 -> s1 [33, 65535] { R69 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R69 += 1 };
  s2 -> s1 [0, 65535] { R69 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R71 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R71 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R73 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s2 [9, 13] { R73 += 1 };
  s0 -> s1 [14, 31] { R73 += 1 };
  s0 -> s2 [32, 32] { R73 += 1 };
  s0 -> s1 [33, 65535] { R73 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R73 += 1 };
  s2 -> s1 [0, 65535] { R73 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s1 [0, 65535] { R75 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R79 && R6 = 0 && R48 = 0 && R49 = R81 && R76 - R81 = 1 && R77 = R79 && R78 - R81 = 1 && R80 = 0 && R0 != 0 && R1 != 0 && R7 != -1 && R46 < 1 && R81 < R79 && -1 < R81 && (R3 != 0 || ((R1 != R69 || R68 - R69 = -1 || R69 < 0) && (R1 = R69 || R1 < 1))) && (R3 != 0 || ((R1 != R71 || R70 - R71 = -1 || R71 < 0) && (R1 = R71 || R1 < 1))) && (R72 != 0 || ((R4 != 0 || ((R1 != R73 || R73 = 1 || R73 < 0) && (R1 = R73 || R73 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R73 || R73 = 1 || R73 < 0) && (R73 != 1 || -1 < R1) && (R1 = R73 || R73 = 1))))) && (R74 != 0 || ((R4 != 0 || ((R1 != R75 || R75 = 1 || R75 < 0) && (R1 = R75 || R75 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R75 || R75 = 1 || R75 < 0) && (R75 != 1 || -1 < R1) && (R1 = R75 || R75 = 1))))) && (R82 != 0 || R81 = R83 || (R67 = 0 && R81 = 0)) && (R3 = 0 || (R1 = R69 && R68 - R69 = -1)) && (R3 = 0 || (R1 = R71 && R70 - R71 = -1)) && (R72 = 0 || (R4 = 0 && R1 < 0)) && (R74 = 0 || (R4 = 0 && R1 < 0)) && (R82 = 0 || (R67 = 0 && R81 = 0));
// End of Parikh automata intersection problem
