// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R16 += 1 };
  s1 -> s1 [0, 60] { R16 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R168 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s1 [91, 65535] { R168 += 1 };
  s1 -> s1 [0, 64] { R168 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R168 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R170 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s1 -> s1 [0, 65535] { R170 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R172 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [9, 13] { R172 += 1, R138 += 1 };
  s0 -> s1 [14, 31] { R172 += 1, R138 += 1 };
  s0 -> s3 [32, 32] { R172 += 1, R138 += 1 };
  s0 -> s1 [33, 65535] { R172 += 1, R138 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R172 += 1, R138 += 1 };
  s1 -> s5 [0, 65535] { R172 += 1 };
  s2 -> s1 [0, 8] { R172 += 1, R138 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R172 += 1, R137 += 1, R138 += 1 };
  s2 -> s3 [9, 13] { R172 += 1, R138 += 1 };
  s2 -> s1 [14, 31] { R172 += 1, R138 += 1 };
  s2 -> s3 [32, 32] { R172 += 1, R138 += 1 };
  s2 -> s1 [33, 65535] { R172 += 1, R138 += 1 };
  s3 -> s1 [0, 65535] { R172 += 1, R138 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R172 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R174 += 1, R139 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R140 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s1 -> s1 [0, 65535] { R174 += 1, R139 += 1, R140 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R174 += 1, R140 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R174 += 1, R140 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R174 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R174 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R176 += 1, R142 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R141 += 1, R142 += 1 };
  s0 -> s3 [9, 13] { R176 += 1, R142 += 1 };
  s0 -> s1 [14, 31] { R176 += 1, R142 += 1 };
  s0 -> s3 [32, 32] { R176 += 1, R142 += 1 };
  s0 -> s1 [33, 65535] { R176 += 1, R142 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1, R142 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R176 += 1 };
  s2 -> s1 [0, 8] { R176 += 1, R142 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R176 += 1, R141 += 1, R142 += 1 };
  s2 -> s3 [9, 13] { R176 += 1, R142 += 1 };
  s2 -> s1 [14, 31] { R176 += 1, R142 += 1 };
  s2 -> s3 [32, 32] { R176 += 1, R142 += 1 };
  s2 -> s1 [33, 65535] { R176 += 1, R142 += 1 };
  s3 -> s1 [0, 65535] { R176 += 1, R142 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R176 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s1 [0, 65535] { R178 += 1, R144 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535] { R178 += 1, R144 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R178 += 1 };
  s2 -> s1 [0, 65535] { R178 += 1, R144 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R178 += 1, R143 += 1, R144 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R178 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R184 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s0 -> s2 [65, 65] { R184 += 1 };
  s0 -> s1 [66, 65535] { R184 += 1 };
  s1 -> s1 [0, 64] { R184 += 1 };
  s1 -> s2 [65, 65] { R184 += 1 };
  s1 -> s1 [66, 65535] { R184 += 1 };
  s2 -> s2 [0, 65535] { R184 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s1 [0, 65535] { R186 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R186 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 64] { R188 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s2 [0, 65535] { R188 += 1, R11 += 1 };
  s0 -> s3 [65, 65] { R188 += 1 };
  s0 -> s1 [66, 65535] { R188 += 1 };
  s1 -> s1 [0, 64] { R188 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R188 += 1 };
  s1 -> s1 [66, 65535] { R188 += 1 };
  s2 -> s1 [0, 64] { R188 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R188 += 1, R11 += 1 };
  s2 -> s3 [65, 65] { R188 += 1 };
  s2 -> s1 [66, 65535] { R188 += 1 };
  s3 -> s3 [0, 65535] { R188 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R190 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s2 [0, 65535] { R190 += 1, R153 += 1, R154 += 1 };
  s0 -> s3 [9, 13] { R190 += 1, R154 += 1 };
  s0 -> s1 [14, 31] { R190 += 1, R154 += 1 };
  s0 -> s3 [32, 32] { R190 += 1, R154 += 1 };
  s0 -> s1 [33, 65535] { R190 += 1, R154 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R190 += 1 };
  s1 -> s1 [0, 65535] { R190 += 1, R154 += 1 };
  s2 -> s1 [0, 8] { R190 += 1, R154 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R190 += 1, R153 += 1, R154 += 1 };
  s2 -> s3 [9, 13] { R190 += 1, R154 += 1 };
  s2 -> s1 [14, 31] { R190 += 1, R154 += 1 };
  s2 -> s3 [32, 32] { R190 += 1, R154 += 1 };
  s2 -> s1 [33, 65535] { R190 += 1, R154 += 1 };
  s3 -> s1 [0, 65535] { R190 += 1, R154 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R190 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R192 += 1, R156 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s2 [0, 65535] { R192 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 65535] { R192 += 1, R156 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R192 += 1 };
  s2 -> s1 [0, 65535] { R192 += 1, R156 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R192 += 1, R155 += 1, R156 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R192 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R194 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R194 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s0 -> s3 [9, 13] { R194 += 1, R158 += 1 };
  s0 -> s1 [14, 31] { R194 += 1, R158 += 1 };
  s0 -> s3 [32, 32] { R194 += 1, R158 += 1 };
  s0 -> s1 [33, 65535] { R194 += 1, R158 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R194 += 1 };
  s1 -> s1 [0, 65535] { R194 += 1, R158 += 1 };
  s2 -> s1 [0, 8] { R194 += 1, R158 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R194 += 1, R157 += 1, R158 += 1 };
  s2 -> s3 [9, 13] { R194 += 1, R158 += 1 };
  s2 -> s1 [14, 31] { R194 += 1, R158 += 1 };
  s2 -> s3 [32, 32] { R194 += 1, R158 += 1 };
  s2 -> s1 [33, 65535] { R194 += 1, R158 += 1 };
  s3 -> s1 [0, 65535] { R194 += 1, R158 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R194 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R196 += 1, R159 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R196 += 1, R160 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s1 -> s1 [0, 65535] { R196 += 1, R159 += 1, R160 += 1 };
  s1 -> s2 [0, 65535] { R196 += 1, R160 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R196 += 1, R160 += 1, R9 += 1 };
  s2 -> s3 [0, 65535] { R196 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R196 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 64] { R198 += 1, R162 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s2 [0, 65535] { R198 += 1, R161 += 1, R162 += 1 };
  s0 -> s1 [66, 65535] { R198 += 1, R162 += 1 };
  s1 -> s1 [0, 64] { R198 += 1, R162 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R198 += 1 };
  s1 -> s1 [66, 65535] { R198 += 1, R162 += 1 };
  s2 -> s1 [0, 64] { R198 += 1, R162 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R198 += 1, R161 += 1, R162 += 1 };
  s2 -> s1 [66, 65535] { R198 += 1, R162 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R200 += 1, R164 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R200 += 1, R163 += 1, R164 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R200 += 1 };
  s1 -> s1 [0, 65535] { R200 += 1, R164 += 1, R135 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R200 += 1, R164 += 1, R135 += 1 };
  s2 -> s2 [0, 65535] { R200 += 1, R163 += 1, R164 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R200 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65] { R202 += 1, R166 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R165 += 1, R166 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s3 [70, 70] { R202 += 1, R166 += 1 };
  s0 -> s1 [71, 65535] { R202 += 1, R166 += 1 };
  s1 -> s1 [0, 65] { R202 += 1, R166 += 1 };
  s1 -> s3 [70, 70] { R202 += 1, R166 += 1 };
  s1 -> s1 [71, 65535] { R202 += 1, R166 += 1 };
  s2 -> s1 [0, 65] { R202 += 1, R166 += 1 };
  s2 -> s2 [0, 65535] { R202 += 1, R165 += 1, R166 += 1 };
  s2 -> s3 [70, 70] { R202 += 1, R166 += 1 };
  s2 -> s1 [71, 65535] { R202 += 1, R166 += 1 };
  s3 -> s3 [0, 65] { R202 += 1, R166 += 1 };
  s3 -> s3 [0, 65535] { R202 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [70, 65535] { R202 += 1, R166 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R204 += 1, R179 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R204 += 1, R180 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R204 += 1, R179 += 1, R180 += 1 };
  s1 -> s2 [0, 65535] { R204 += 1, R180 += 1, R136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R204 += 1, R180 += 1, R136 += 1 };
  s2 -> s4 [0, 65535] { R204 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R204 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 64] { R206 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s2 [0, 65535] { R206 += 1, R181 += 1, R182 += 1 };
  s0 -> s3 [65, 65] { R206 += 1, R182 += 1 };
  s0 -> s4 [65, 65] { R206 += 1, R182 += 1 };
  s0 -> s1 [71, 65535] { R206 += 1, R182 += 1 };
  s1 -> s1 [0, 64] { R206 += 1, R182 += 1 };
  s1 -> s1 [0, 65535] { R206 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R206 += 1, R182 += 1 };
  s1 -> s4 [65, 65] { R206 += 1, R182 += 1 };
  s1 -> s1 [71, 65535] { R206 += 1, R182 += 1 };
  s2 -> s1 [0, 64] { R206 += 1, R182 += 1 };
  s2 -> s2 [0, 65535] { R206 += 1, R181 += 1, R182 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R206 += 1, R182 += 1 };
  s2 -> s4 [65, 65] { R206 += 1, R182 += 1 };
  s2 -> s1 [71, 65535] { R206 += 1, R182 += 1 };
  s3 -> s3 [0, 65535] { R206 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R206 += 1, R182 += 1 };
  s4 -> s4 [0, 65535] { R206 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [71, 65535] { R206 += 1, R182 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R146 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s2 [9, 13] { R146 += 1 };
  s0 -> s1 [14, 31] { R146 += 1 };
  s0 -> s2 [32, 32] { R146 += 1 };
  s0 -> s1 [33, 65535] { R146 += 1 };
  s1 -> s1 [0, 65535] { R146 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R146 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R148 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R148 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R150 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s0 -> s2 [9, 13] { R150 += 1 };
  s0 -> s1 [14, 31] { R150 += 1 };
  s0 -> s2 [32, 32] { R150 += 1 };
  s0 -> s1 [33, 65535] { R150 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R150 += 1 };
  s2 -> s1 [0, 65535] { R150 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s0 -> s1 [0, 65535] { R152 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R152 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining c10
automaton c10_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
constraint R2 = R166 && R3 = R206 && R15 = 0 && R16 - R205 = -1 && R153 - R166 = -1 && R154 = R166 && R155 - R166 = -1 && R156 = R166 && R157 = 0 && R158 = 1 && R159 = 0 && R160 = 1 && R161 = 0 && R162 = R166 && R163 = 0 && R164 = R166 && R165 = 0 && R167 = 0 && R168 - R205 = -1 && R169 = 0 && R170 - R205 = -1 && R171 = 0 && R172 - R205 = -1 && R173 = 0 && R174 - R205 = -1 && R175 = 0 && R176 - R205 = -1 && R177 = 0 && R178 - R205 = -1 && R183 = R205 && R184 = R206 && R185 = R205 && R186 = R206 && R187 = R205 && R188 = R206 && R189 = R205 && R190 = R206 && R191 = R205 && R192 = R206 && R193 = R205 && R194 = R206 && R195 = R205 && R196 = R206 && R197 = R205 && R198 = R206 && R199 = R205 && R200 = R206 && R201 = R205 && R202 = R206 && R203 = R205 && R204 = R206 && R0 != 0 && R1 != 0 && R10 < 1 && R11 < 1 && 0 < R166 && R205 - R206 < 1 && 0 < R205 && (R4 != 0 || ((R0 != R138 || R137 - R138 = -1 || R138 < 0) && (R0 = R138 || R0 < 1))) && (R4 != 0 || ((R0 != R140 || R139 - R140 = -1 || R140 < 0) && (R0 = R140 || R0 < 1))) && (R6 != 0 || ((R1 != R146 || R145 - R146 = -1 || R146 < 0) && (R1 = R146 || R1 < 1))) && (R6 != 0 || ((R1 != R148 || R147 - R148 = -1 || R148 < 0) && (R1 = R148 || R1 < 1))) && (R141 != 0 || ((R5 != 0 || ((R0 != R142 || R142 = 1 || R142 < 0) && (R0 = R142 || R142 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R142 || R142 = 1 || R142 < 0) && (R142 != 1 || -1 < R0) && (R0 = R142 || R142 = 1))))) && (R143 != 0 || ((R5 != 0 || ((R0 != R144 || R144 = 1 || R144 < 0) && (R0 = R144 || R144 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R144 || R144 = 1 || R144 < 0) && (R144 != 1 || -1 < R0) && (R0 = R144 || R144 = 1))))) && (R149 != 0 || ((R7 != 0 || ((R1 != R150 || R150 = 1 || R150 < 0) && (R1 = R150 || R150 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R150 || R150 = 1 || R150 < 0) && (R150 != 1 || -1 < R1) && (R1 = R150 || R150 = 1))))) && (R151 != 0 || ((R7 != 0 || ((R1 != R152 || R152 = 1 || R152 < 0) && (R1 = R152 || R152 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R152 || R152 = 1 || R152 < 0) && (R152 != 1 || -1 < R1) && (R1 = R152 || R152 = 1))))) && (R4 = 0 || (R0 = R138 && R137 - R138 = -1)) && (R4 = 0 || (R0 = R140 && R139 - R140 = -1)) && (R6 = 0 || (R1 = R146 && R145 - R146 = -1)) && (R6 = 0 || (R1 = R148 && R147 - R148 = -1)) && (R136 = 0 || (R179 = 0 && R180 = 0)) && (R136 = 0 || (R181 = 0 && R182 = 0)) && (R141 = 0 || (R5 = 0 && R0 < 0)) && (R143 = 0 || (R5 = 0 && R0 < 0)) && (R149 = 0 || (R7 = 0 && R1 < 0)) && (R151 = 0 || (R7 = 0 && R1 < 0));
// End of Parikh automata intersection problem
