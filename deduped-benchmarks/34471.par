// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R2, R3, R4, R5, R6, R7, R8, R98, R99;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R99 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R99 += 1 };
  s1 -> s1 [0, 60] { R99 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R99 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s1 [0, 65535] { R163 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R163 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R165 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s2 [76, 76] { R165 += 1 };
  s0 -> s1 [77, 65535] { R165 += 1 };
  s1 -> s1 [0, 64] { R165 += 1 };
  s1 -> s2 [76, 76] { R165 += 1 };
  s1 -> s1 [77, 65535] { R165 += 1 };
  s2 -> s2 [0, 64] { R165 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R165 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R167 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s1 -> s1 [0, 65535] { R167 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 75] { R169 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R10 += 1, R11 += 1 };
  s0 -> s3 [76, 76] { R169 += 1 };
  s0 -> s1 [77, 65535] { R169 += 1, R11 += 1 };
  s1 -> s1 [0, 75] { R169 += 1, R11 += 1 };
  s1 -> s3 [76, 76] { R169 += 1 };
  s1 -> s1 [77, 65535] { R169 += 1, R11 += 1 };
  s2 -> s1 [0, 75] { R169 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R169 += 1, R10 += 1, R11 += 1 };
  s2 -> s3 [76, 76] { R169 += 1 };
  s2 -> s1 [77, 65535] { R169 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R169 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R171 += 1, R151 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R150 += 1, R151 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s3 [9, 13] { R171 += 1, R151 += 1 };
  s0 -> s1 [14, 31] { R171 += 1, R151 += 1 };
  s0 -> s3 [32, 32] { R171 += 1, R151 += 1 };
  s0 -> s1 [33, 65535] { R171 += 1, R151 += 1 };
  s1 -> s5 [0, 65535] { R171 += 1 };
  s1 -> s1 [0, 65535] { R171 += 1, R151 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R171 += 1, R151 += 1 };
  s2 -> s2 [0, 65535] { R171 += 1, R150 += 1, R151 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R171 += 1, R151 += 1 };
  s2 -> s1 [14, 31] { R171 += 1, R151 += 1 };
  s2 -> s3 [32, 32] { R171 += 1, R151 += 1 };
  s2 -> s1 [33, 65535] { R171 += 1, R151 += 1 };
  s3 -> s1 [0, 65535] { R171 += 1, R151 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R171 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s1 [0, 65535] { R173 += 1, R152 += 1, R153 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R153 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R173 += 1, R152 += 1, R153 += 1 };
  s1 -> s2 [0, 65535] { R173 += 1, R153 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R173 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R153 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R173 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R175 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s0 -> s2 [0, 65535] { R175 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [9, 13] { R175 += 1, R155 += 1 };
  s0 -> s1 [14, 31] { R175 += 1, R155 += 1 };
  s0 -> s3 [32, 32] { R175 += 1, R155 += 1 };
  s0 -> s1 [33, 65535] { R175 += 1, R155 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R175 += 1, R155 += 1 };
  s1 -> s5 [0, 65535] { R175 += 1 };
  s2 -> s1 [0, 8] { R175 += 1, R155 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R175 += 1, R154 += 1, R155 += 1 };
  s2 -> s3 [9, 13] { R175 += 1, R155 += 1 };
  s2 -> s1 [14, 31] { R175 += 1, R155 += 1 };
  s2 -> s3 [32, 32] { R175 += 1, R155 += 1 };
  s2 -> s1 [33, 65535] { R175 += 1, R155 += 1 };
  s3 -> s1 [0, 65535] { R175 += 1, R155 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R175 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R177 += 1, R157 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R177 += 1, R156 += 1, R157 += 1 };
  s0 -> s0 [0, 65535] { R176 += 1, R177 += 1 };
  s1 -> s1 [0, 65535] { R177 += 1, R157 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R177 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R177 += 1, R157 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R177 += 1, R156 += 1, R157 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R177 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 75] { R179 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R179 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R178 += 1, R179 += 1 };
  s0 -> s3 [76, 76] { R179 += 1, R159 += 1 };
  s0 -> s1 [77, 65535] { R179 += 1, R159 += 1 };
  s1 -> s1 [0, 75] { R179 += 1, R159 += 1 };
  s1 -> s3 [76, 76] { R179 += 1, R159 += 1 };
  s1 -> s1 [77, 65535] { R179 += 1, R159 += 1 };
  s2 -> s1 [0, 75] { R179 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R179 += 1, R158 += 1, R159 += 1 };
  s2 -> s3 [76, 76] { R179 += 1, R159 += 1 };
  s2 -> s1 [77, 65535] { R179 += 1, R159 += 1 };
  s3 -> s4 [0, 65535] { R179 += 1 };
  s3 -> s3 [0, 65535] { R179 += 1, R159 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R179 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_12 {
  init s0;
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s1 [0, 65535] { R181 += 1, R160 += 1, R161 += 1 };
  s0 -> s2 [0, 65535] { R181 += 1, R161 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R181 += 1, R160 += 1, R161 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R181 += 1, R161 += 1, R141 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R181 += 1 };
  s2 -> s2 [0, 65535] { R181 += 1, R161 += 1, R141 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R181 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R8 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R143 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s2 [9, 13] { R143 += 1 };
  s0 -> s1 [14, 31] { R143 += 1 };
  s0 -> s2 [32, 32] { R143 += 1 };
  s0 -> s1 [33, 65535] { R143 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R143 += 1 };
  s2 -> s1 [0, 65535] { R143 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R145 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s1 -> s1 [0, 65535] { R145 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R147 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s2 [9, 13] { R147 += 1 };
  s0 -> s1 [14, 31] { R147 += 1 };
  s0 -> s2 [32, 32] { R147 += 1 };
  s0 -> s1 [33, 65535] { R147 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R147 += 1 };
  s2 -> s1 [0, 65535] { R147 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R149 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R149 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R159 && R3 = R163 && R10 = 0 && R11 - R158 = -1 && R98 = 0 && R99 = R181 && R150 - R159 = -1 && R151 = R159 && R152 - R159 = -1 && R153 = R159 && R154 = 0 && R155 = 1 && R156 = 0 && R157 = 1 && R162 - R181 = 1 && R164 = 0 && R165 = R181 && R166 = 0 && R167 = R181 && R168 = 0 && R169 = R181 && R170 = 0 && R171 = R181 && R172 = 0 && R173 = R181 && R174 = 0 && R175 = R181 && R176 = 0 && R177 = R181 && R178 = 0 && R179 = R181 && R180 = 0 && R0 != 0 && R1 != 0 && R8 < 1 && R158 - R159 < 1 && -1 < R158 && 0 < R159 && R181 < R163 && -1 < R181 && (R4 != 0 || ((R1 != R143 || R142 - R143 = -1 || R143 < 0) && (R1 = R143 || R1 < 1))) && (R4 != 0 || ((R1 != R145 || R144 - R145 = -1 || R145 < 0) && (R1 = R145 || R1 < 1))) && (R146 != 0 || ((R5 != 0 || ((R1 != R147 || R147 = 1 || R147 < 0) && (R1 = R147 || R147 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R147 || R147 = 1 || R147 < 0) && (R147 != 1 || -1 < R1) && (R1 = R147 || R147 = 1))))) && (R148 != 0 || ((R5 != 0 || ((R1 != R149 || R149 = 1 || R149 < 0) && (R1 = R149 || R149 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R149 || R149 = 1 || R149 < 0) && (R149 != 1 || -1 < R1) && (R1 = R149 || R149 = 1))))) && (R158 != R160 || R159 = R161 || ((R141 != 0 || R159 - R160 < 1 || R160 < 0) && (R141 = 0 || R159 < R160 || R160 < 0))) && (R4 = 0 || (R1 = R143 && R142 - R143 = -1)) && (R4 = 0 || (R1 = R145 && R144 - R145 = -1)) && (R146 = 0 || (R5 = 0 && R1 < 0)) && (R148 = 0 || (R5 = 0 && R1 < 0)) && (R158 = R160 || (R141 = 0 && R158 = R159));
// End of Parikh automata intersection problem
