// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R13, R14, R2, R3, R4, R5, R6, R7, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R14 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R14 += 1 };
  s1 -> s1 [0, 60] { R14 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s1 [0, 65535] { R96 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R96 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R108 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R110 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [32, 32] { R110 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [32, 32] { R110 += 1, R88 += 1 };
  s2 -> s2 [0, 65535] { R110 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R112 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R90 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R112 += 1, R89 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R112 += 1, R90 += 1, R9 += 1 };
  s2 -> s3 [0, 65535] { R112 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R112 += 1, R90 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R112 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R114 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s3 [9, 13] { R114 += 1, R92 += 1 };
  s0 -> s1 [14, 31] { R114 += 1, R92 += 1 };
  s0 -> s3 [32, 32] { R114 += 1, R92 += 1 };
  s0 -> s1 [33, 65535] { R114 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R114 += 1, R92 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R114 += 1 };
  s2 -> s1 [0, 8] { R114 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R114 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R114 += 1, R92 += 1 };
  s2 -> s1 [14, 31] { R114 += 1, R92 += 1 };
  s2 -> s3 [32, 32] { R114 += 1, R92 += 1 };
  s2 -> s1 [33, 65535] { R114 += 1, R92 += 1 };
  s3 -> s1 [0, 65535] { R114 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R114 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R116 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R94 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R116 += 1, R94 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R116 += 1, R94 += 1, R10 += 1 };
  s2 -> s4 [0, 65535] { R116 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R116 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s1 [0, 65535] { R118 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R118 += 1, R98 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R118 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R118 += 1, R98 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R118 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R118 += 1, R98 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R118 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R120 += 1, R100 += 1, R71 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s2 [0, 65535] { R120 += 1, R99 += 1, R100 += 1 };
  s0 -> s3 [11, 11] { R120 += 1, R100 += 1, R72 += 1 };
  s1 -> s1 [0, 65535] { R120 += 1, R100 += 1, R71 += 1, R72 += 1 };
  s1 -> s3 [11, 11] { R120 += 1, R100 += 1, R72 += 1 };
  s2 -> s1 [0, 65535] { R120 += 1, R100 += 1, R71 += 1, R72 += 1 };
  s2 -> s2 [0, 65535] { R120 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [11, 11] { R120 += 1, R100 += 1, R72 += 1 };
  s3 -> s3 [0, 65535] { R120 += 1, R100 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R120 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R120 += 1 };
  accepting s3, s4, s5;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R122 += 1, R101 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R122 += 1, R102 += 1, R74 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s3 [0, 65535] { R122 += 1, R102 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R122 += 1, R101 += 1, R102 += 1 };
  s1 -> s2 [0, 65535] { R122 += 1, R102 += 1, R74 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R122 += 1, R102 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R122 += 1, R102 += 1, R74 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R122 += 1 };
  s2 -> s6 [0, 65535] { R122 += 1, R102 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R122 += 1, R102 += 1, R74 += 1, R5 += 1 };
  s3 -> s5 [0, 65535] { R122 += 1 };
  s3 -> s3 [0, 65535] { R122 += 1, R102 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R122 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R122 += 1 };
  s6 -> s6 [0, 65535] { R122 += 1, R102 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R124 += 1, R104 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R124 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s3 [0, 65535] { R124 += 1, R104 += 1, R75 += 1, R76 += 1 };
  s0 -> s4 [9, 13] { R124 += 1, R104 += 1, R76 += 1 };
  s0 -> s1 [14, 31] { R124 += 1, R104 += 1, R76 += 1 };
  s0 -> s4 [32, 32] { R124 += 1, R104 += 1, R76 += 1 };
  s0 -> s1 [33, 65535] { R124 += 1, R104 += 1, R76 += 1 };
  s1 -> s5 [0, 65535] { R124 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R124 += 1, R104 += 1 };
  s1 -> s1 [0, 65535] { R124 += 1, R104 += 1, R76 += 1 };
  s2 -> s1 [0, 8] { R124 += 1, R104 += 1, R76 += 1 };
  s2 -> s2 [0, 65535] { R124 += 1, R103 += 1, R104 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R124 += 1, R104 += 1, R75 += 1, R76 += 1 };
  s2 -> s4 [9, 13] { R124 += 1, R104 += 1, R76 += 1 };
  s2 -> s1 [14, 31] { R124 += 1, R104 += 1, R76 += 1 };
  s2 -> s4 [32, 32] { R124 += 1, R104 += 1, R76 += 1 };
  s2 -> s1 [33, 65535] { R124 += 1, R104 += 1, R76 += 1 };
  s3 -> s1 [0, 8] { R124 += 1, R104 += 1, R76 += 1 };
  s3 -> s5 [0, 65535] { R124 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R124 += 1, R104 += 1, R75 += 1, R76 += 1 };
  s3 -> s4 [9, 13] { R124 += 1, R104 += 1, R76 += 1 };
  s3 -> s1 [14, 31] { R124 += 1, R104 += 1, R76 += 1 };
  s3 -> s4 [32, 32] { R124 += 1, R104 += 1, R76 += 1 };
  s3 -> s1 [33, 65535] { R124 += 1, R104 += 1, R76 += 1 };
  s4 -> s1 [0, 65535] { R124 += 1, R104 += 1, R76 += 1 };
  s5 -> s5 [0, 65535] { R124 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R124 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R124 += 1, R104 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R126 += 1, R106 += 1, R78 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R126 += 1, R106 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s3 [0, 65535] { R126 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 65535] { R126 += 1, R106 += 1, R78 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R126 += 1 };
  s1 -> s6 [0, 65535] { R126 += 1, R106 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R126 += 1, R106 += 1, R78 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R126 += 1 };
  s2 -> s2 [0, 65535] { R126 += 1, R106 += 1, R77 += 1, R78 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R126 += 1, R106 += 1, R78 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R126 += 1, R106 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R126 += 1, R105 += 1, R106 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R126 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R126 += 1 };
  s6 -> s6 [0, 65535] { R126 += 1, R106 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P23
automaton P23_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R80 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s2 [9, 13] { R80 += 1 };
  s0 -> s1 [14, 31] { R80 += 1 };
  s0 -> s2 [32, 32] { R80 += 1 };
  s0 -> s1 [33, 65535] { R80 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1 };
  s2 -> s1 [0, 65535] { R80 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R82 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R84 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [9, 13] { R84 += 1 };
  s0 -> s1 [14, 31] { R84 += 1 };
  s0 -> s2 [32, 32] { R84 += 1 };
  s0 -> s1 [33, 65535] { R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R84 += 1 };
  s2 -> s1 [0, 65535] { R84 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s1 [0, 65535] { R86 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R86 += 1, R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
constraint R0 = R72 && R3 - R106 = 1 && R4 = R96 && R13 = 0 && R14 = R126 && R71 - R72 = -1 && R87 = R106 && R88 - R106 = 1 && R89 = R106 && R90 - R106 = 1 && R91 = 0 && R92 = 1 && R93 = 0 && R94 = 1 && R95 - R126 = 1 && R97 = 0 && R98 = R106 && R99 = 0 && R100 = R106 && R101 = 0 && R102 = R106 && R103 = 0 && R104 = R106 && R105 = 0 && R107 = 0 && R108 = R126 && R109 = 0 && R110 = R126 && R111 = 0 && R112 = R126 && R113 = 0 && R114 = R126 && R115 = 0 && R116 = R126 && R117 = 0 && R118 = R126 && R119 = 0 && R120 = R126 && R121 = 0 && R122 = R126 && R123 = 0 && R124 = R126 && R125 = 0 && R1 != 0 && R2 != 0 && R72 != 0 && R11 < 1 && R126 < R96 && -1 < R106 && -1 < R126 && (R7 != 0 || ((R2 != R80 || R79 - R80 = -1 || R80 < 0) && (R2 = R80 || R2 < 1))) && (R7 != 0 || ((R2 != R82 || R81 - R82 = -1 || R82 < 0) && (R2 = R82 || R2 < 1))) && (R72 != R74 || R73 - R74 = -1 || (R5 = 0 && R74 < 0)) && (R75 != 0 || ((R6 != 0 || ((R72 != R76 || R76 = 1 || R76 < 0) && (R72 = R76 || R76 = 1 || R72 < 1))) && (R6 = 0 || ((R72 != R76 || R76 = 1 || R76 < 0) && (R76 != 1 || -1 < R72) && (R72 = R76 || R76 = 1))))) && (R77 != 0 || ((R6 != 0 || ((R72 != R78 || R78 = 1 || R78 < 0) && (R72 = R78 || R78 = 1 || R72 < 1))) && (R6 = 0 || ((R72 != R78 || R78 = 1 || R78 < 0) && (R78 != 1 || -1 < R72) && (R72 = R78 || R78 = 1))))) && (R83 != 0 || ((R8 != 0 || ((R2 != R84 || R84 = 1 || R84 < 0) && (R2 = R84 || R84 = 1 || R2 < 1))) && (R8 = 0 || ((R2 != R84 || R84 = 1 || R84 < 0) && (R84 != 1 || -1 < R2) && (R2 = R84 || R84 = 1))))) && (R85 != 0 || ((R8 != 0 || ((R2 != R86 || R86 = 1 || R86 < 0) && (R2 = R86 || R86 = 1 || R2 < 1))) && (R8 = 0 || ((R2 != R86 || R86 = 1 || R86 < 0) && (R86 != 1 || -1 < R2) && (R2 = R86 || R86 = 1))))) && (R7 = 0 || (R2 = R80 && R79 - R80 = -1)) && (R7 = 0 || (R2 = R82 && R81 - R82 = -1)) && (R72 = R74 || (R5 = 0 && R72 < 0)) && (R75 = 0 || (R6 = 0 && R72 < 0)) && (R77 = 0 || (R6 = 0 && R72 < 0)) && (R83 = 0 || (R8 = 0 && R2 < 0)) && (R85 = 0 || (R8 = 0 && R2 < 0));
// End of Parikh automata intersection problem
