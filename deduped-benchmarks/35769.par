// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R14, R15, R18, R21, R24, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R453, R454, R455, R456, R457, R458, R459, R46, R460, R461, R462, R463, R464, R465, R466, R5, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R7383, R7384, R7385, R7386, R7387, R7388, R7389, R7390, R7391, R7392, R7393, R7394, R7395, R7396, R7397, R7398, R77, R78, R7855, R7856, R7857, R7858, R7859, R7860, R7861, R7862, R7863, R7864, R7865, R7866, R7867, R7868, R7869, R7870, R7871, R7872, R7873, R7874, R7875, R7876, R7877, R7878, R7879, R7880, R7881, R7882, R7883, R7884, R7885, R7886, R7887, R7888, R7889, R7890, R7891, R7892, R7893, R7894, R7895, R7896, R7897, R7898, R7899, R79, R7900, R7901, R7902, R7903, R7904, R7905, R7906, R7907, R7908, R7909, R7910, R7911, R7912, R7913, R7914, R7915, R7916, R7917, R7918, R7919, R7920, R7921, R7922, R7923, R7924, R7925, R7926, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R7935, R7936, R7937, R7938, R7939, R7940, R7941, R7942, R7943, R7944, R7945, R7946, R7947, R7948, R7949, R7950, R7951, R7952, R7953, R7954, R7955, R7956, R7957, R7958, R7959, R7960, R7961, R7962, R7963, R7964, R7965, R7966, R7967, R7968, R7969, R7970, R7971, R7972, R7973, R7974, R7975, R7976, R7977, R7978, R7979, R7980, R7981, R7982, R7983, R7984, R7985, R7986, R7987, R7988, R7989, R7990, R7991, R7992, R7993, R7994, R7995, R7996, R7997, R7998, R7999, R80, R8000, R8001, R8002, R8003, R8004, R8005, R8006, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [108, 108] { R68 += 1 };
  s0 -> s1 [109, 65535] { R68 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1 };
  s2 -> s1 [0, 110] { R68 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R68 += 1 };
  s2 -> s1 [112, 65535] { R68 += 1 };
  s3 -> s1 [0, 98] { R68 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R68 += 1 };
  s3 -> s1 [100, 65535] { R68 += 1 };
  s4 -> s1 [0, 96] { R68 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R68 += 1 };
  s4 -> s1 [98, 65535] { R68 += 1 };
  s5 -> s1 [0, 107] { R68 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R68 += 1 };
  s5 -> s1 [109, 65535] { R68 += 1 };
  s6 -> s1 [0, 103] { R68 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R68 += 1 };
  s6 -> s1 [105, 65535] { R68 += 1 };
  s7 -> s1 [0, 110] { R68 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R68 += 1 };
  s7 -> s1 [112, 65535] { R68 += 1 };
  s8 -> s1 [0, 114] { R68 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R68 += 1 };
  s8 -> s1 [116, 65535] { R68 += 1 };
  s9 -> s1 [0, 115] { R68 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R68 += 1 };
  s9 -> s1 [117, 65535] { R68 += 1 };
  s10 -> s1 [0, 65535] { R68 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R7885 += 1, R7886 += 1 };
  s0 -> s1 [0, 65535] { R7886 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7886 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R7888 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R7887 += 1, R7888 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7888 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R7890 += 1 };
  s0 -> s0 [0, 65535] { R7889 += 1, R7890 += 1 };
  s0 -> s2 [0, 65535] { R7890 += 1, R88 += 1 };
  s0 -> s1 [78, 65535] { R7890 += 1 };
  s1 -> s1 [0, 76] { R7890 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R7890 += 1 };
  s2 -> s1 [0, 76] { R7890 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7890 += 1, R88 += 1 };
  s2 -> s1 [78, 65535] { R7890 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R7892 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R7892 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R7891 += 1, R7892 += 1 };
  s1 -> s1 [0, 65535] { R7892 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [0, 65535] { R7892 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7892 += 1 };
  s2 -> s2 [0, 65535] { R7892 += 1, R93 += 1, R94 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7892 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7894 += 1 };
  s0 -> s0 [0, 65535] { R7893 += 1, R7894 += 1 };
  s1 -> s1 [0, 65535] { R7894 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7896 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R7895 += 1, R7896 += 1 };
  s0 -> s2 [0, 65535] { R7896 += 1, R98 += 1, R99 += 1 };
  s1 -> s4 [0, 65535] { R7896 += 1 };
  s1 -> s1 [0, 65535] { R7896 += 1, R99 += 1, R100 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7896 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7896 += 1, R98 += 1, R99 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7896 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R7897 += 1, R7898 += 1 };
  s0 -> s1 [0, 65535] { R7898 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7898 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R7922 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R7921 += 1, R7922 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7922 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R7924 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R7923 += 1, R7924 += 1 };
  s0 -> s2 [65, 65] { R7924 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R7924 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R7924 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R7924 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7924 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R7924 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R7924 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R7924 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R7926 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R7925 += 1, R7926 += 1 };
  s0 -> s2 [65, 65] { R7926 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R7926 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R7926 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R7926 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7926 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R7926 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R7926 += 1, R87 += 1 };
  s2 -> s2 [0, 65535] { R7926 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R7928 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R7927 += 1, R7928 += 1 };
  s0 -> s2 [65, 65] { R7928 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R7928 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R7928 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R7928 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7928 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R7928 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R7928 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7928 += 1, R89 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R7930 += 1 };
  s0 -> s0 [0, 65535] { R7929 += 1, R7930 += 1 };
  s0 -> s2 [65, 65] { R7930 += 1 };
  s0 -> s3 [65, 65] { R7930 += 1 };
  s0 -> s1 [66, 65535] { R7930 += 1 };
  s1 -> s1 [0, 64] { R7930 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7930 += 1 };
  s1 -> s3 [65, 65] { R7930 += 1 };
  s1 -> s1 [66, 65535] { R7930 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7930 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R7932 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R7931 += 1, R7932 += 1 };
  s0 -> s2 [65, 65] { R7932 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R7932 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R7932 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R7932 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7932 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R7932 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R7932 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7932 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R7934 += 1 };
  s0 -> s0 [0, 65535] { R7933 += 1, R7934 += 1 };
  s0 -> s2 [65, 65] { R7934 += 1 };
  s0 -> s3 [65, 65] { R7934 += 1 };
  s0 -> s1 [66, 65535] { R7934 += 1 };
  s1 -> s1 [0, 64] { R7934 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7934 += 1 };
  s1 -> s3 [65, 65] { R7934 += 1 };
  s1 -> s1 [66, 65535] { R7934 += 1 };
  s2 -> s2 [0, 65535] { R7934 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R7936 += 1 };
  s0 -> s0 [0, 65535] { R7935 += 1, R7936 += 1 };
  s0 -> s1 [45, 45] { R7936 += 1 };
  s0 -> s2 [46, 46] { R7936 += 1 };
  s0 -> s1 [48, 62] { R7936 += 1 };
  s0 -> s3 [65, 65] { R7936 += 1 };
  s0 -> s1 [66, 65535] { R7936 += 1 };
  s1 -> s1 [0, 43] { R7936 += 1 };
  s1 -> s1 [45, 45] { R7936 += 1 };
  s1 -> s2 [46, 46] { R7936 += 1 };
  s1 -> s1 [48, 62] { R7936 += 1 };
  s1 -> s3 [65, 65] { R7936 += 1 };
  s1 -> s1 [66, 65535] { R7936 += 1 };
  s2 -> s1 [0, 43] { R7936 += 1 };
  s2 -> s1 [45, 45] { R7936 += 1 };
  s2 -> s2 [46, 46] { R7936 += 1 };
  s2 -> s1 [48, 62] { R7936 += 1 };
  s2 -> s3 [65, 65] { R7936 += 1 };
  s2 -> s1 [66, 114] { R7936 += 1 };
  s2 -> s8 [115, 115] { R7936 += 1 };
  s2 -> s1 [116, 65535] { R7936 += 1 };
  s3 -> s3 [0, 43] { R7936 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R7936 += 1 };
  s3 -> s4 [46, 46] { R7936 += 1 };
  s3 -> s3 [48, 62] { R7936 += 1 };
  s3 -> s3 [65, 65535] { R7936 += 1 };
  s4 -> s3 [0, 43] { R7936 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R7936 += 1 };
  s4 -> s4 [46, 46] { R7936 += 1 };
  s4 -> s3 [48, 62] { R7936 += 1 };
  s4 -> s3 [65, 114] { R7936 += 1 };
  s4 -> s5 [115, 115] { R7936 += 1 };
  s4 -> s3 [116, 65535] { R7936 += 1 };
  s5 -> s3 [0, 43] { R7936 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R7936 += 1 };
  s5 -> s4 [46, 46] { R7936 += 1 };
  s5 -> s3 [48, 62] { R7936 += 1 };
  s5 -> s3 [65, 110] { R7936 += 1 };
  s5 -> s6 [111, 111] { R7936 += 1 };
  s5 -> s3 [112, 65535] { R7936 += 1 };
  s6 -> s3 [0, 43] { R7936 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R7936 += 1 };
  s6 -> s4 [46, 46] { R7936 += 1 };
  s6 -> s3 [48, 62] { R7936 += 1 };
  s6 -> s3 [65, 98] { R7936 += 1 };
  s6 -> s7 [99, 99] { R7936 += 1 };
  s6 -> s3 [100, 65535] { R7936 += 1 };
  s7 -> s3 [0, 43] { R7936 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R7936 += 1 };
  s7 -> s4 [46, 46] { R7936 += 1 };
  s7 -> s3 [48, 62] { R7936 += 1 };
  s7 -> s3 [65, 106] { R7936 += 1 };
  s7 -> s3 [108, 65535] { R7936 += 1 };
  s8 -> s1 [0, 43] { R7936 += 1 };
  s8 -> s1 [45, 45] { R7936 += 1 };
  s8 -> s2 [46, 46] { R7936 += 1 };
  s8 -> s1 [48, 62] { R7936 += 1 };
  s8 -> s3 [65, 65] { R7936 += 1 };
  s8 -> s1 [66, 110] { R7936 += 1 };
  s8 -> s9 [111, 111] { R7936 += 1 };
  s8 -> s1 [112, 65535] { R7936 += 1 };
  s9 -> s1 [0, 43] { R7936 += 1 };
  s9 -> s1 [45, 45] { R7936 += 1 };
  s9 -> s2 [46, 46] { R7936 += 1 };
  s9 -> s1 [48, 62] { R7936 += 1 };
  s9 -> s3 [65, 65] { R7936 += 1 };
  s9 -> s1 [66, 98] { R7936 += 1 };
  s9 -> s10 [99, 99] { R7936 += 1 };
  s9 -> s1 [100, 65535] { R7936 += 1 };
  s10 -> s1 [0, 43] { R7936 += 1 };
  s10 -> s1 [45, 45] { R7936 += 1 };
  s10 -> s2 [46, 46] { R7936 += 1 };
  s10 -> s1 [48, 62] { R7936 += 1 };
  s10 -> s3 [65, 65] { R7936 += 1 };
  s10 -> s1 [66, 106] { R7936 += 1 };
  s10 -> s1 [108, 65535] { R7936 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R7937 += 1, R7938 += 1 };
  s0 -> s1 [0, 65535] { R7938 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R7938 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R7940 += 1 };
  s0 -> s0 [0, 65535] { R7939 += 1, R7940 += 1 };
  s0 -> s2 [0, 65535] { R7940 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R7940 += 1 };
  s0 -> s1 [59, 65535] { R7940 += 1 };
  s1 -> s1 [0, 57] { R7940 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R7940 += 1 };
  s1 -> s1 [59, 65535] { R7940 += 1 };
  s2 -> s1 [0, 57] { R7940 += 1 };
  s2 -> s2 [0, 65535] { R7940 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R7940 += 1 };
  s2 -> s1 [59, 65535] { R7940 += 1 };
  s3 -> s3 [0, 65535] { R7940 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R7942 += 1 };
  s0 -> s0 [0, 65535] { R7941 += 1, R7942 += 1 };
  s0 -> s2 [0, 65535] { R7942 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R7942 += 1 };
  s0 -> s1 [44, 65535] { R7942 += 1 };
  s1 -> s1 [0, 42] { R7942 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R7942 += 1 };
  s1 -> s1 [44, 65535] { R7942 += 1 };
  s2 -> s1 [0, 42] { R7942 += 1 };
  s2 -> s2 [0, 65535] { R7942 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R7942 += 1 };
  s2 -> s1 [44, 65535] { R7942 += 1 };
  s3 -> s3 [0, 65535] { R7942 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R7944 += 1 };
  s0 -> s0 [0, 65535] { R7943 += 1, R7944 += 1 };
  s0 -> s2 [0, 65535] { R7944 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R7944 += 1 };
  s0 -> s1 [66, 65535] { R7944 += 1 };
  s1 -> s1 [0, 64] { R7944 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R7944 += 1 };
  s1 -> s1 [66, 65535] { R7944 += 1 };
  s2 -> s1 [0, 64] { R7944 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7944 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R7944 += 1 };
  s2 -> s1 [66, 65535] { R7944 += 1 };
  s3 -> s3 [0, 65535] { R7944 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R7946 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R7946 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7945 += 1, R7946 += 1 };
  s0 -> s3 [91, 91] { R7946 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R7946 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R7946 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7946 += 1, R40 += 1 };
  s2 -> s1 [0, 90] { R7946 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R7946 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R7946 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R7946 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R7946 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7946 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7948 += 1, R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R7948 += 1, R42 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R7947 += 1, R7948 += 1 };
  s1 -> s1 [0, 65535] { R7948 += 1, R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535] { R7948 += 1, R42 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7948 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R7948 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7948 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s0 [0, 65535] { R7949 += 1, R7950 += 1 };
  s0 -> s1 [0, 65535] { R7950 += 1, R60 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R7950 += 1, R59 += 1, R60 += 1 };
  s1 -> s4 [0, 65535] { R7950 += 1 };
  s1 -> s1 [0, 65535] { R7950 += 1, R60 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7950 += 1, R60 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7950 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7950 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R7952 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R7952 += 1, R61 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R7951 += 1, R7952 += 1 };
  s0 -> s3 [108, 108] { R7952 += 1, R62 += 1 };
  s0 -> s1 [109, 65535] { R7952 += 1, R62 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R7952 += 1 };
  s1 -> s1 [0, 65535] { R7952 += 1, R62 += 1 };
  s2 -> s1 [0, 107] { R7952 += 1, R62 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7952 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [108, 108] { R7952 += 1, R62 += 1 };
  s2 -> s1 [109, 65535] { R7952 += 1, R62 += 1 };
  s3 -> s1 [0, 110] { R7952 += 1, R62 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7952 += 1 };
  s3 -> s5 [111, 111] { R7952 += 1, R62 += 1 };
  s3 -> s1 [112, 65535] { R7952 += 1, R62 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R7952 += 1, R62 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7952 += 1 };
  s5 -> s6 [99, 99] { R7952 += 1, R62 += 1 };
  s5 -> s1 [100, 65535] { R7952 += 1, R62 += 1 };
  s6 -> s1 [0, 96] { R7952 += 1, R62 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7952 += 1 };
  s6 -> s7 [97, 97] { R7952 += 1, R62 += 1 };
  s6 -> s1 [98, 65535] { R7952 += 1, R62 += 1 };
  s7 -> s1 [0, 107] { R7952 += 1, R62 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R7952 += 1 };
  s7 -> s8 [108, 108] { R7952 += 1, R62 += 1 };
  s7 -> s1 [109, 65535] { R7952 += 1, R62 += 1 };
  s8 -> s1 [0, 103] { R7952 += 1, R62 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R7952 += 1 };
  s8 -> s9 [104, 104] { R7952 += 1, R62 += 1 };
  s8 -> s1 [105, 65535] { R7952 += 1, R62 += 1 };
  s9 -> s1 [0, 110] { R7952 += 1, R62 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R7952 += 1 };
  s9 -> s10 [111, 111] { R7952 += 1, R62 += 1 };
  s9 -> s1 [112, 65535] { R7952 += 1, R62 += 1 };
  s10 -> s1 [0, 114] { R7952 += 1, R62 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R7952 += 1 };
  s10 -> s11 [115, 115] { R7952 += 1, R62 += 1 };
  s10 -> s1 [116, 65535] { R7952 += 1, R62 += 1 };
  s11 -> s1 [0, 115] { R7952 += 1, R62 += 1 };
  s11 -> s11 [0, 65535] { R7952 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R7952 += 1, R62 += 1 };
  s11 -> s1 [117, 65535] { R7952 += 1, R62 += 1 };
  s12 -> s1 [0, 65535] { R7952 += 1, R62 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R7952 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s0 [0, 65535] { R7953 += 1, R7954 += 1 };
  s0 -> s1 [0, 65535] { R7954 += 1, R64 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R7954 += 1, R63 += 1, R64 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7954 += 1, R64 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R7954 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7954 += 1, R64 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R7954 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7954 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R7956 += 1, R78 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R7956 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R7955 += 1, R7956 += 1 };
  s1 -> s1 [0, 65535] { R7956 += 1, R78 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7956 += 1 };
  s2 -> s1 [0, 65535] { R7956 += 1, R78 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7956 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7956 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 65535] { R7958 += 1 };
  s0 -> s0 [0, 65535] { R7957 += 1, R7958 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7958 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R7960 += 1, R80 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R7960 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R7959 += 1, R7960 += 1 };
  s0 -> s3 [43, 43] { R7960 += 1, R80 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R7960 += 1, R80 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R7960 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R7960 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R7960 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R7960 += 1, R80 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R7960 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R7960 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R7960 += 1, R80 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R7960 += 1, R79 += 1, R80 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R7960 += 1, R80 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R7960 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R7960 += 1, R80 += 1, R43 += 1 };
  s3 -> s6 [0, 65535] { R7960 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7960 += 1, R80 += 1, R43 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7960 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7960 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R7962 += 1, R7862 += 1 };
  s0 -> s0 [0, 65535] { R7961 += 1, R7962 += 1 };
  s0 -> s2 [0, 65535] { R7962 += 1, R7861 += 1, R7862 += 1 };
  s0 -> s1 [66, 65535] { R7962 += 1, R7862 += 1 };
  s1 -> s1 [0, 64] { R7962 += 1, R7862 += 1 };
  s1 -> s1 [0, 65535] { R7962 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R7962 += 1, R7862 += 1 };
  s2 -> s1 [0, 64] { R7962 += 1, R7862 += 1 };
  s2 -> s2 [0, 65535] { R7962 += 1, R7861 += 1, R7862 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R7962 += 1, R7862 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R7964 += 1, R7863 += 1, R7864 += 1 };
  s0 -> s0 [0, 65535] { R7963 += 1, R7964 += 1 };
  s0 -> s2 [0, 65535] { R7964 += 1, R7864 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R7964 += 1, R7863 += 1, R7864 += 1 };
  s1 -> s2 [0, 65535] { R7964 += 1, R7864 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7964 += 1 };
  s2 -> s2 [0, 65535] { R7964 += 1, R7864 += 1, R32 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7964 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R7966 += 1, R7866 += 1 };
  s0 -> s2 [0, 65535] { R7966 += 1, R7865 += 1, R7866 += 1 };
  s0 -> s0 [0, 65535] { R7965 += 1, R7966 += 1 };
  s0 -> s1 [80, 65535] { R7966 += 1, R7866 += 1 };
  s1 -> s1 [0, 65] { R7966 += 1, R7866 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7966 += 1 };
  s1 -> s1 [80, 65535] { R7966 += 1, R7866 += 1 };
  s2 -> s1 [0, 65] { R7966 += 1, R7866 += 1 };
  s2 -> s2 [0, 65535] { R7966 += 1, R7865 += 1, R7866 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R7966 += 1, R7866 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R7968 += 1, R7867 += 1, R7868 += 1 };
  s0 -> s2 [0, 65535] { R7968 += 1, R7868 += 1, R454 += 1 };
  s0 -> s0 [0, 65535] { R7967 += 1, R7968 += 1 };
  s1 -> s1 [0, 65535] { R7968 += 1, R7867 += 1, R7868 += 1 };
  s1 -> s2 [0, 65535] { R7968 += 1, R7868 += 1, R454 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7968 += 1 };
  s2 -> s2 [0, 65535] { R7968 += 1, R7868 += 1, R454 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7968 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R7970 += 1, R7870 += 1 };
  s0 -> s2 [0, 65535] { R7970 += 1, R7869 += 1, R7870 += 1 };
  s0 -> s3 [0, 65535] { R7970 += 1, R7870 += 1, R456 += 1 };
  s0 -> s0 [0, 65535] { R7969 += 1, R7970 += 1 };
  s0 -> s1 [81, 65535] { R7970 += 1, R7870 += 1 };
  s1 -> s1 [0, 79] { R7970 += 1, R7870 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7970 += 1 };
  s1 -> s1 [81, 65535] { R7970 += 1, R7870 += 1 };
  s2 -> s1 [0, 79] { R7970 += 1, R7870 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7970 += 1, R7869 += 1, R7870 += 1 };
  s2 -> s3 [0, 65535] { R7970 += 1, R7870 += 1, R456 += 1 };
  s2 -> s1 [81, 65535] { R7970 += 1, R7870 += 1 };
  s3 -> s1 [0, 79] { R7970 += 1, R7870 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7970 += 1 };
  s3 -> s3 [0, 65535] { R7970 += 1, R7870 += 1, R456 += 1 };
  s3 -> s1 [81, 65535] { R7970 += 1, R7870 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7970 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R7972 += 1, R7872 += 1, R460 += 1 };
  s0 -> s2 [0, 65535] { R7972 += 1, R7871 += 1, R7872 += 1 };
  s0 -> s3 [0, 65535] { R7972 += 1, R7872 += 1, R459 += 1, R460 += 1 };
  s0 -> s0 [0, 65535] { R7971 += 1, R7972 += 1 };
  s0 -> s1 [81, 65535] { R7972 += 1, R7872 += 1, R460 += 1 };
  s1 -> s1 [0, 79] { R7972 += 1, R7872 += 1, R460 += 1 };
  s1 -> s4 [0, 65535] { R7972 += 1 };
  s1 -> s1 [0, 65535] { R7972 += 1, R7872 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R7972 += 1, R7872 += 1, R460 += 1 };
  s2 -> s1 [0, 79] { R7972 += 1, R7872 += 1, R460 += 1 };
  s2 -> s2 [0, 65535] { R7972 += 1, R7871 += 1, R7872 += 1 };
  s2 -> s3 [0, 65535] { R7972 += 1, R7872 += 1, R459 += 1, R460 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R7972 += 1, R7872 += 1, R460 += 1 };
  s3 -> s1 [0, 79] { R7972 += 1, R7872 += 1, R460 += 1 };
  s3 -> s4 [0, 65535] { R7972 += 1 };
  s3 -> s3 [0, 65535] { R7972 += 1, R7872 += 1, R459 += 1, R460 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R7972 += 1, R7872 += 1, R460 += 1 };
  s4 -> s4 [0, 65535] { R7972 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R7974 += 1, R7874 += 1, R465 += 1, R466 += 1 };
  s0 -> s0 [0, 65535] { R7973 += 1, R7974 += 1 };
  s0 -> s2 [0, 65535] { R7974 += 1, R7874 += 1, R464 += 1, R465 += 1 };
  s0 -> s3 [0, 65535] { R7974 += 1, R7873 += 1, R7874 += 1 };
  s1 -> s1 [0, 65535] { R7974 += 1, R7874 += 1, R465 += 1, R466 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7974 += 1 };
  s1 -> s6 [0, 65535] { R7974 += 1, R7874 += 1 };
  s2 -> s1 [0, 65535] { R7974 += 1, R7874 += 1, R465 += 1, R466 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7974 += 1 };
  s2 -> s2 [0, 65535] { R7974 += 1, R7874 += 1, R464 += 1, R465 += 1 };
  s3 -> s1 [0, 65535] { R7974 += 1, R7874 += 1, R465 += 1, R466 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7974 += 1, R7874 += 1, R464 += 1, R465 += 1 };
  s3 -> s3 [0, 65535] { R7974 += 1, R7873 += 1, R7874 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7974 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7974 += 1 };
  s6 -> s6 [0, 65535] { R7974 += 1, R7874 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R7976 += 1, R7876 += 1, R7386 += 1 };
  s0 -> s0 [0, 65535] { R7975 += 1, R7976 += 1 };
  s0 -> s1 [0, 65535] { R7976 += 1, R7876 += 1 };
  s0 -> s2 [0, 65535] { R7976 += 1, R7875 += 1, R7876 += 1 };
  s0 -> s1 [91, 65535] { R7976 += 1, R7876 += 1, R7386 += 1 };
  s1 -> s1 [0, 80] { R7976 += 1, R7876 += 1, R7386 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7976 += 1, R7876 += 1 };
  s1 -> s4 [0, 65535] { R7976 += 1 };
  s1 -> s1 [91, 65535] { R7976 += 1, R7876 += 1, R7386 += 1 };
  s2 -> s1 [0, 80] { R7976 += 1, R7876 += 1, R7386 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7976 += 1, R7876 += 1 };
  s2 -> s2 [0, 65535] { R7976 += 1, R7875 += 1, R7876 += 1 };
  s2 -> s1 [91, 65535] { R7976 += 1, R7876 += 1, R7386 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7976 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R7978 += 1, R7878 += 1, R7390 += 1, R7391 += 1 };
  s0 -> s0 [0, 65535] { R7977 += 1, R7978 += 1 };
  s0 -> s2 [0, 65535] { R7978 += 1, R7877 += 1, R7878 += 1 };
  s0 -> s3 [0, 65535] { R7978 += 1, R7878 += 1, R7391 += 1, R7392 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7978 += 1, R7878 += 1, R7390 += 1, R7391 += 1 };
  s1 -> s6 [0, 65535] { R7978 += 1 };
  s1 -> s3 [0, 65535] { R7978 += 1, R7878 += 1, R7391 += 1, R7392 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R7978 += 1, R7878 += 1, R7390 += 1, R7391 += 1 };
  s2 -> s2 [0, 65535] { R7978 += 1, R7877 += 1, R7878 += 1 };
  s2 -> s3 [0, 65535] { R7978 += 1, R7878 += 1, R7391 += 1, R7392 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7978 += 1, R7878 += 1 };
  s3 -> s6 [0, 65535] { R7978 += 1 };
  s3 -> s3 [0, 65535] { R7978 += 1, R7878 += 1, R7391 += 1, R7392 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7978 += 1, R7878 += 1 };
  s5 -> s6 [0, 65535] { R7978 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7978 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R7980 += 1, R7880 += 1, R7397 += 1, R7398 += 1 };
  s0 -> s2 [0, 65535] { R7980 += 1, R7880 += 1, R7396 += 1, R7397 += 1 };
  s0 -> s0 [0, 65535] { R7979 += 1, R7980 += 1 };
  s0 -> s3 [0, 65535] { R7980 += 1, R7879 += 1, R7880 += 1 };
  s1 -> s1 [0, 65535] { R7980 += 1, R7880 += 1, R7397 += 1, R7398 += 1 };
  s1 -> s6 [0, 65535] { R7980 += 1, R7880 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7980 += 1 };
  s2 -> s1 [0, 65535] { R7980 += 1, R7880 += 1, R7397 += 1, R7398 += 1 };
  s2 -> s2 [0, 65535] { R7980 += 1, R7880 += 1, R7396 += 1, R7397 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7980 += 1 };
  s3 -> s1 [0, 65535] { R7980 += 1, R7880 += 1, R7397 += 1, R7398 += 1 };
  s3 -> s2 [0, 65535] { R7980 += 1, R7880 += 1, R7396 += 1, R7397 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7980 += 1, R7879 += 1, R7880 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7980 += 1 };
  s6 -> s6 [0, 65535] { R7980 += 1, R7880 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7980 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R7982 += 1, R7882 += 1 };
  s0 -> s2 [0, 65535] { R7982 += 1, R7881 += 1, R7882 += 1 };
  s0 -> s0 [0, 65535] { R7981 += 1, R7982 += 1 };
  s1 -> s1 [0, 65535] { R7982 += 1, R7882 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7982 += 1 };
  s2 -> s1 [0, 65535] { R7982 += 1, R7882 += 1 };
  s2 -> s2 [0, 65535] { R7982 += 1, R7881 += 1, R7882 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7982 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R7984 += 1, R7884 += 1 };
  s0 -> s0 [0, 65535] { R7983 += 1, R7984 += 1 };
  s0 -> s2 [0, 65535] { R7984 += 1, R7883 += 1, R7884 += 1 };
  s0 -> s3 [0, 65535] { R7984 += 1, R7884 += 1, R7859 += 1, R7860 += 1 };
  s1 -> s1 [0, 65535] { R7984 += 1, R7884 += 1 };
  s1 -> s4 [0, 65535] { R7984 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7984 += 1, R7884 += 1 };
  s2 -> s2 [0, 65535] { R7984 += 1, R7883 += 1, R7884 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7984 += 1, R7884 += 1, R7859 += 1, R7860 += 1 };
  s3 -> s1 [0, 65535] { R7984 += 1, R7884 += 1 };
  s3 -> s4 [0, 65535] { R7984 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7984 += 1, R7884 += 1, R7859 += 1, R7860 += 1 };
  s4 -> s4 [0, 65535] { R7984 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R7986 += 1, R7900 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R7985 += 1, R7986 += 1 };
  s0 -> s2 [0, 65535] { R7986 += 1, R7899 += 1, R7900 += 1 };
  s1 -> s1 [0, 65535] { R7986 += 1, R7900 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7986 += 1 };
  s2 -> s1 [0, 65535] { R7986 += 1, R7900 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7986 += 1, R7899 += 1, R7900 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7986 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R7988 += 1, R7902 += 1 };
  s0 -> s0 [0, 65535] { R7987 += 1, R7988 += 1 };
  s0 -> s2 [0, 65535] { R7988 += 1, R7901 += 1, R7902 += 1 };
  s0 -> s3 [65, 65] { R7988 += 1, R7902 += 1 };
  s0 -> s4 [65, 65] { R7988 += 1, R7902 += 1 };
  s0 -> s5 [80, 80] { R7988 += 1, R7902 += 1 };
  s0 -> s1 [81, 65535] { R7988 += 1, R7902 += 1 };
  s1 -> s1 [0, 64] { R7988 += 1, R7902 += 1 };
  s1 -> s3 [65, 65] { R7988 += 1, R7902 += 1 };
  s1 -> s4 [65, 65] { R7988 += 1, R7902 += 1 };
  s1 -> s5 [80, 80] { R7988 += 1, R7902 += 1 };
  s1 -> s1 [81, 65535] { R7988 += 1, R7902 += 1 };
  s2 -> s1 [0, 64] { R7988 += 1, R7902 += 1 };
  s2 -> s2 [0, 65535] { R7988 += 1, R7901 += 1, R7902 += 1 };
  s2 -> s3 [65, 65] { R7988 += 1, R7902 += 1 };
  s2 -> s4 [65, 65] { R7988 += 1, R7902 += 1 };
  s2 -> s5 [80, 80] { R7988 += 1, R7902 += 1 };
  s2 -> s1 [81, 65535] { R7988 += 1, R7902 += 1 };
  s4 -> s4 [0, 65] { R7988 += 1, R7902 += 1 };
  s4 -> s8 [80, 80] { R7988 += 1, R7902 += 1 };
  s4 -> s4 [81, 65535] { R7988 += 1, R7902 += 1 };
  s5 -> s5 [0, 64] { R7988 += 1, R7902 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7988 += 1 };
  s5 -> s7 [65, 65] { R7988 += 1, R7902 += 1 };
  s5 -> s8 [65, 65] { R7988 += 1, R7902 += 1 };
  s5 -> s5 [80, 65535] { R7988 += 1, R7902 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7988 += 1 };
  s8 -> s8 [0, 65] { R7988 += 1, R7902 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7988 += 1 };
  s8 -> s8 [80, 65535] { R7988 += 1, R7902 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R7990 += 1, R7904 += 1, R453 += 1 };
  s0 -> s2 [0, 65535] { R7990 += 1, R7903 += 1, R7904 += 1 };
  s0 -> s0 [0, 65535] { R7989 += 1, R7990 += 1 };
  s0 -> s3 [65, 65] { R7990 += 1, R7904 += 1, R453 += 1 };
  s0 -> s4 [65, 65] { R7990 += 1, R7904 += 1, R453 += 1 };
  s0 -> s1 [66, 65535] { R7990 += 1, R7904 += 1, R453 += 1 };
  s1 -> s1 [0, 64] { R7990 += 1, R7904 += 1, R453 += 1 };
  s1 -> s1 [0, 65535] { R7990 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7990 += 1, R7904 += 1, R453 += 1 };
  s1 -> s4 [65, 65] { R7990 += 1, R7904 += 1, R453 += 1 };
  s1 -> s1 [66, 65535] { R7990 += 1, R7904 += 1, R453 += 1 };
  s2 -> s1 [0, 64] { R7990 += 1, R7904 += 1, R453 += 1 };
  s2 -> s2 [0, 65535] { R7990 += 1, R7903 += 1, R7904 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7990 += 1, R7904 += 1, R453 += 1 };
  s2 -> s4 [65, 65] { R7990 += 1, R7904 += 1, R453 += 1 };
  s2 -> s1 [66, 65535] { R7990 += 1, R7904 += 1, R453 += 1 };
  s3 -> s6 [0, 65535] { R7990 += 1 };
  s3 -> s3 [0, 65535] { R7990 += 1, R7904 += 1, R453 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7990 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7990 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R7992 += 1, R7906 += 1, R455 += 1 };
  s0 -> s0 [0, 65535] { R7991 += 1, R7992 += 1 };
  s0 -> s2 [0, 65535] { R7992 += 1, R7905 += 1, R7906 += 1 };
  s0 -> s3 [65, 65] { R7992 += 1, R7906 += 1, R455 += 1 };
  s0 -> s4 [65, 65] { R7992 += 1, R7906 += 1, R455 += 1 };
  s0 -> s1 [66, 65535] { R7992 += 1, R7906 += 1, R455 += 1 };
  s1 -> s1 [0, 64] { R7992 += 1, R7906 += 1, R455 += 1 };
  s1 -> s1 [0, 65535] { R7992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7992 += 1, R7906 += 1, R455 += 1 };
  s1 -> s4 [65, 65] { R7992 += 1, R7906 += 1, R455 += 1 };
  s1 -> s1 [66, 65535] { R7992 += 1, R7906 += 1, R455 += 1 };
  s2 -> s1 [0, 64] { R7992 += 1, R7906 += 1, R455 += 1 };
  s2 -> s2 [0, 65535] { R7992 += 1, R7905 += 1, R7906 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7992 += 1, R7906 += 1, R455 += 1 };
  s2 -> s4 [65, 65] { R7992 += 1, R7906 += 1, R455 += 1 };
  s2 -> s1 [66, 65535] { R7992 += 1, R7906 += 1, R455 += 1 };
  s3 -> s6 [0, 65535] { R7992 += 1 };
  s3 -> s3 [0, 65535] { R7992 += 1, R7906 += 1, R455 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7992 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7992 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s0 -> s0 [0, 65535] { R7993 += 1, R7994 += 1 };
  s0 -> s2 [0, 65535] { R7994 += 1, R7907 += 1, R7908 += 1 };
  s0 -> s3 [65, 65] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s0 -> s4 [65, 65] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s0 -> s1 [66, 65535] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 64] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 65535] { R7994 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s1 -> s4 [65, 65] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [66, 65535] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [0, 64] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s2 -> s2 [0, 65535] { R7994 += 1, R7907 += 1, R7908 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s2 -> s4 [65, 65] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [66, 65535] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s3 -> s3 [0, 65535] { R7994 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7994 += 1, R7908 += 1, R457 += 1, R458 += 1 };
  s4 -> s5 [0, 65535] { R7994 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7994 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s0 -> s2 [0, 65535] { R7996 += 1, R7909 += 1, R7910 += 1 };
  s0 -> s0 [0, 65535] { R7995 += 1, R7996 += 1 };
  s0 -> s3 [65, 65] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s0 -> s4 [65, 65] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s0 -> s1 [66, 65535] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 64] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 65535] { R7996 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s1 -> s4 [65, 65] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [66, 65535] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [0, 64] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s2 -> s2 [0, 65535] { R7996 += 1, R7909 += 1, R7910 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s2 -> s4 [65, 65] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [66, 65535] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s3 -> s3 [0, 65535] { R7996 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7996 += 1, R7910 += 1, R461 += 1, R462 += 1 };
  s4 -> s5 [0, 65535] { R7996 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7996 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s0 -> s3 [0, 65535] { R7998 += 1, R7911 += 1, R7912 += 1 };
  s0 -> s0 [0, 65535] { R7997 += 1, R7998 += 1 };
  s0 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s0 -> s5 [65, 65] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s6 [65, 65] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s0 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s0 -> s1 [66, 65535] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s2 [91, 107] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s0 -> s8 [108, 108] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s0 -> s2 [109, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s1 -> s1 [0, 64] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s1 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s1 -> s5 [65, 65] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s6 [65, 65] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s1 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s1 -> s1 [66, 65535] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s2 [91, 107] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s1 -> s8 [108, 108] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s1 -> s2 [109, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s2 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s2 -> s35 [0, 65535];
  s2 -> s2 [0, 65535] { R7998 += 1 };
  s2 -> s4 [65, 65] { R7998 += 1, R7912 += 1 };
  s2 -> s7 [65, 65] { R7998 += 1, R7912 += 1 };
  s2 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s2 -> s2 [66, 65535] { R7998 += 1, R7912 += 1 };
  s2 -> s2 [91, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s3 -> s1 [0, 64] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s3 -> s3 [0, 65535] { R7998 += 1, R7911 += 1, R7912 += 1 };
  s3 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s3 -> s5 [65, 65] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s6 [65, 65] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s3 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s3 -> s1 [66, 65535] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s2 [91, 107] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s3 -> s8 [108, 108] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s3 -> s2 [109, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s4 -> s4 [0, 65535] { R7998 += 1 };
  s4 -> s35 [0, 65535];
  s5 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s5 -> s5 [0, 65535] { R7998 += 1, R7912 += 1, R7383 += 1, R7384 += 1 };
  s5 -> s7 [91, 107] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s5 -> s9 [108, 108] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s5 -> s7 [109, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s7 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s7 -> s34 [0, 65535] { R7998 += 1 };
  s7 -> s35 [0, 65535];
  s7 -> s7 [0, 65535] { R7998 += 1, R7912 += 1 };
  s7 -> s7 [91, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s8 -> s8 [0, 64] { R7998 += 1, R7912 += 1 };
  s8 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s8 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s8 -> s9 [65, 65] { R7998 += 1, R7912 += 1 };
  s8 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s8 -> s10 [65, 65] { R7998 += 1, R7912 += 1 };
  s8 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s8 -> s8 [66, 65535] { R7998 += 1, R7912 += 1 };
  s8 -> s2 [91, 110] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s8 -> s11 [111, 111] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s8 -> s2 [112, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s9 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s9 -> s9 [0, 65535] { R7998 += 1, R7912 += 1 };
  s9 -> s7 [91, 110] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s9 -> s13 [111, 111] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s9 -> s7 [112, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s11 -> s11 [0, 64] { R7998 += 1, R7912 += 1 };
  s11 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s11 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s11 -> s12 [65, 65] { R7998 += 1, R7912 += 1 };
  s11 -> s13 [65, 65] { R7998 += 1, R7912 += 1 };
  s11 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s11 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s11 -> s11 [66, 65535] { R7998 += 1, R7912 += 1 };
  s11 -> s2 [91, 98] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s11 -> s14 [99, 99] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s11 -> s2 [100, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s13 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s13 -> s13 [0, 65535] { R7998 += 1, R7912 += 1 };
  s13 -> s7 [91, 98] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s13 -> s16 [99, 99] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s13 -> s7 [100, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s14 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s14 -> s14 [0, 64] { R7998 += 1, R7912 += 1 };
  s14 -> s15 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s14 -> s16 [65, 65] { R7998 += 1, R7912 += 1 };
  s14 -> s17 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s14 -> s18 [65, 65] { R7998 += 1, R7912 += 1 };
  s14 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s14 -> s14 [66, 65535] { R7998 += 1, R7912 += 1 };
  s14 -> s2 [91, 96] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s14 -> s19 [97, 97] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s14 -> s2 [98, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s15 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s15 -> s15 [0, 65535] { R7998 += 1, R7912 += 1 };
  s15 -> s7 [91, 107] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s15 -> s21 [108, 108] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s15 -> s7 [109, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s16 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s16 -> s16 [0, 65535] { R7998 += 1, R7912 += 1 };
  s16 -> s7 [91, 96] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s16 -> s15 [97, 97] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s16 -> s7 [98, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s19 -> s19 [0, 64] { R7998 += 1, R7912 += 1 };
  s19 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s19 -> s15 [65, 65] { R7998 += 1, R7912 += 1 };
  s19 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s19 -> s17 [65, 65] { R7998 += 1, R7912 += 1 };
  s19 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s19 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s19 -> s19 [66, 65535] { R7998 += 1, R7912 += 1 };
  s19 -> s2 [91, 107] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s19 -> s20 [108, 108] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s19 -> s2 [109, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s20 -> s20 [0, 64] { R7998 += 1, R7912 += 1 };
  s20 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s20 -> s21 [65, 65] { R7998 += 1, R7912 += 1 };
  s20 -> s22 [65, 65] { R7998 += 1, R7912 += 1 };
  s20 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s20 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s20 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s20 -> s20 [66, 65535] { R7998 += 1, R7912 += 1 };
  s20 -> s2 [91, 103] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s20 -> s23 [104, 104] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s20 -> s2 [105, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s21 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s21 -> s21 [0, 65535] { R7998 += 1, R7912 += 1 };
  s21 -> s7 [91, 103] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s21 -> s25 [104, 104] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s21 -> s7 [105, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s23 -> s23 [0, 64] { R7998 += 1, R7912 += 1 };
  s23 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s23 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s23 -> s24 [65, 65] { R7998 += 1, R7912 += 1 };
  s23 -> s25 [65, 65] { R7998 += 1, R7912 += 1 };
  s23 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s23 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s23 -> s23 [66, 65535] { R7998 += 1, R7912 += 1 };
  s23 -> s2 [91, 110] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s23 -> s26 [111, 111] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s23 -> s2 [112, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s25 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s25 -> s25 [0, 65535] { R7998 += 1, R7912 += 1 };
  s25 -> s7 [91, 110] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s25 -> s28 [111, 111] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s25 -> s7 [112, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s26 -> s26 [0, 64] { R7998 += 1, R7912 += 1 };
  s26 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s26 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s26 -> s27 [65, 65] { R7998 += 1, R7912 += 1 };
  s26 -> s28 [65, 65] { R7998 += 1, R7912 += 1 };
  s26 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s26 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s26 -> s26 [66, 65535] { R7998 += 1, R7912 += 1 };
  s26 -> s2 [91, 114] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s26 -> s29 [115, 115] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s26 -> s2 [116, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s28 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s28 -> s28 [0, 65535] { R7998 += 1, R7912 += 1 };
  s28 -> s7 [91, 114] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s28 -> s30 [115, 115] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s28 -> s7 [116, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s29 -> s29 [0, 64] { R7998 += 1, R7912 += 1 };
  s29 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s29 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s29 -> s30 [65, 65] { R7998 += 1, R7912 += 1 };
  s29 -> s31 [65, 65] { R7998 += 1, R7912 += 1 };
  s29 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s29 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s29 -> s29 [66, 65535] { R7998 += 1, R7912 += 1 };
  s29 -> s2 [91, 115] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s29 -> s32 [116, 116] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s29 -> s2 [117, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s30 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s30 -> s30 [0, 65535] { R7998 += 1, R7912 += 1 };
  s30 -> s7 [91, 115] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s30 -> s33 [116, 116] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s30 -> s7 [117, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s32 -> s2 [0, 64] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s32 -> s4 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s32 -> s7 [65, 65] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s32 -> s2 [66, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s32 -> s2 [91, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s33 -> s7 [0, 80] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s33 -> s7 [91, 65535] { R7998 += 1, R7912 += 1, R7384 += 1 };
  s34 -> s34 [0, 65535] { R7998 += 1 };
  s34 -> s35 [0, 65535];
  s35 -> s35 [0, 65535];
  accepting s4, s34, s2, s7, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s0 -> s2 [0, 65535] { R8000 += 1, R7913 += 1, R7914 += 1 };
  s0 -> s0 [0, 65535] { R7999 += 1, R8000 += 1 };
  s0 -> s3 [65, 65] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s0 -> s4 [65, 65] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s0 -> s1 [66, 65535] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s1 -> s1 [0, 64] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s1 -> s1 [0, 65535] { R8000 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s1 -> s4 [65, 65] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s1 -> s1 [66, 65535] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s2 -> s1 [0, 64] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s2 -> s2 [0, 65535] { R8000 += 1, R7913 += 1, R7914 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s2 -> s4 [65, 65] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s2 -> s1 [66, 65535] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s3 -> s3 [0, 65535] { R8000 += 1, R7914 += 1, R7387 += 1, R7388 += 1 };
  s3 -> s6 [0, 65535] { R8000 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8000 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8000 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s0 -> s0 [0, 65535] { R8001 += 1, R8002 += 1 };
  s0 -> s2 [0, 65535] { R8002 += 1, R7915 += 1, R7916 += 1 };
  s0 -> s3 [65, 65] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s0 -> s4 [65, 65] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s0 -> s1 [66, 65535] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s1 -> s1 [0, 64] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s1 -> s1 [0, 65535] { R8002 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s1 -> s4 [65, 65] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s1 -> s1 [66, 65535] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s2 -> s1 [0, 64] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8002 += 1, R7915 += 1, R7916 += 1 };
  s2 -> s3 [65, 65] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s2 -> s4 [65, 65] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s2 -> s1 [66, 65535] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s3 -> s3 [0, 65535] { R8002 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8002 += 1, R7916 += 1, R7393 += 1, R7394 += 1 };
  s4 -> s5 [0, 65535] { R8002 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8002 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R8004 += 1, R7918 += 1 };
  s0 -> s0 [0, 65535] { R8003 += 1, R8004 += 1 };
  s0 -> s2 [0, 65535] { R8004 += 1, R7917 += 1, R7918 += 1 };
  s0 -> s3 [65, 65] { R8004 += 1, R7918 += 1 };
  s0 -> s4 [65, 65] { R8004 += 1, R7918 += 1 };
  s0 -> s1 [66, 65535] { R8004 += 1, R7918 += 1 };
  s1 -> s1 [0, 64] { R8004 += 1, R7918 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8004 += 1 };
  s1 -> s3 [65, 65] { R8004 += 1, R7918 += 1 };
  s1 -> s4 [65, 65] { R8004 += 1, R7918 += 1 };
  s1 -> s1 [66, 65535] { R8004 += 1, R7918 += 1 };
  s2 -> s1 [0, 64] { R8004 += 1, R7918 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8004 += 1, R7917 += 1, R7918 += 1 };
  s2 -> s3 [65, 65] { R8004 += 1, R7918 += 1 };
  s2 -> s4 [65, 65] { R8004 += 1, R7918 += 1 };
  s2 -> s1 [66, 65535] { R8004 += 1, R7918 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8004 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8004 += 1 };
  s4 -> s4 [0, 65535] { R8004 += 1, R7918 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8004 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s0 -> s2 [0, 64] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s0 -> s0 [0, 65535] { R8005 += 1, R8006 += 1 };
  s0 -> s3 [0, 65535] { R8006 += 1, R7919 += 1, R7920 += 1 };
  s0 -> s4 [65, 65] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s0 -> s5 [65, 65] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s0 -> s6 [65, 65] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s0 -> s7 [65, 65] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s0 -> s2 [66, 79] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s0 -> s1 [66, 65535] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s0 -> s8 [80, 80] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s0 -> s2 [81, 65535] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s1 -> s1 [0, 64] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s1 -> s2 [0, 64] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s1 -> s4 [65, 65] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s1 -> s5 [65, 65] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s1 -> s6 [65, 65] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s1 -> s7 [65, 65] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s1 -> s2 [66, 79] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s1 -> s1 [66, 65535] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s1 -> s8 [80, 80] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s1 -> s2 [81, 65535] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s2 -> s2 [0, 64] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s2 -> s4 [65, 65] { R8006 += 1, R7920 += 1 };
  s2 -> s7 [65, 65] { R8006 += 1, R7920 += 1 };
  s2 -> s2 [66, 79] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s2 -> s2 [66, 65535] { R8006 += 1, R7920 += 1 };
  s2 -> s8 [80, 80] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s2 -> s2 [81, 65535] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s3 -> s1 [0, 64] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s3 -> s2 [0, 64] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s3 -> s3 [0, 65535] { R8006 += 1, R7919 += 1, R7920 += 1 };
  s3 -> s4 [65, 65] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s3 -> s5 [65, 65] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s3 -> s6 [65, 65] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s3 -> s7 [65, 65] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s3 -> s2 [66, 79] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s3 -> s1 [66, 65535] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s3 -> s8 [80, 80] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s3 -> s2 [81, 65535] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s4 -> s4 [0, 79] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s4 -> s4 [0, 65535] { R8006 += 1, R7920 += 1 };
  s4 -> s10 [80, 80] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s4 -> s4 [81, 65535] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s5 -> s4 [0, 79] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s5 -> s5 [0, 65535] { R8006 += 1, R7920 += 1, R7855 += 1, R7856 += 1 };
  s5 -> s10 [80, 80] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s5 -> s4 [81, 65535] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s8 -> s8 [0, 64] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s8 -> s8 [0, 65535] { R8006 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s8 -> s11 [65, 65] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s8 -> s8 [66, 65535] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8006 += 1, R7920 += 1, R7856 += 1, R7857 += 1 };
  s10 -> s12 [0, 65535] { R8006 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8006 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8006 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R5 = R7884 && R6 = R8006 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R59 = 0 && R60 = R7884 && R61 = 0 && R62 = R7884 && R63 = 0 && R64 = R7884 && R65 = 0 && R66 = R8006 && R67 = 0 && R68 = R8006 && R69 = 0 && R70 = R8006 && R86 + R85 = 0 && R7861 = 0 && R7862 = R7884 && R7863 = 0 && R7864 = R7884 && R7865 = 0 && R7866 = R7884 && R7867 = 0 && R7868 = R7884 && R7869 = 0 && R7870 = R7884 && R7871 = 0 && R7872 = R7884 && R7873 = 0 && R7874 = R7884 && R7875 = 0 && R7876 = R7884 && R7877 = 0 && R7878 = R7884 && R7879 = 0 && R7880 = R7884 && R7881 = 0 && R7882 = R7884 && R7883 = 0 && R7885 = 0 && R7886 = R8006 && R7887 = 0 && R7888 = R8006 && R7889 = 0 && R7890 = R8006 && R7891 = 0 && R7892 = R8006 && R7893 = 0 && R7894 = R8006 && R7895 = 0 && R7896 = R8006 && R7897 = 0 && R7898 = R8006 && R7901 = 0 && R7902 = 0 && R7911 = 0 && R7912 = 0 && R7919 = 0 && R7920 = 0 && R7935 = 10 && R7936 = R8006 && R7937 = 10 && R7938 = R8006 && R7939 = 10 && R7940 = R8006 && R7941 = 10 && R7942 = R8006 && R7943 = 10 && R7944 = R8006 && R7945 = 10 && R7946 = R8006 && R7947 = 10 && R7948 = R8006 && R7949 = 10 && R7950 = R8006 && R7951 = 10 && R7952 = R8006 && R7953 = 10 && R7954 = R8006 && R7955 = 10 && R7956 = R8006 && R7957 = 10 && R7958 = R8006 && R7959 = 10 && R7960 = R8006 && R7961 = 10 && R7962 = R8006 && R7963 = 10 && R7964 = R8006 && R7965 = 10 && R7966 = R8006 && R7967 = 10 && R7968 = R8006 && R7969 = 10 && R7970 = R8006 && R7971 = 10 && R7972 = R8006 && R7973 = 10 && R7974 = R8006 && R7975 = 10 && R7976 = R8006 && R7977 = 10 && R7978 = R8006 && R7979 = 10 && R7980 = R8006 && R7981 = 10 && R7982 = R8006 && R7983 = 10 && R7984 = R8006 && R7985 = 10 && R7986 = R8006 && R7987 = 10 && R7988 = R8006 && R7989 = 10 && R7990 = R8006 && R7991 = 10 && R7992 = R8006 && R7993 = 10 && R7994 = R8006 && R7995 = 10 && R7996 = R8006 && R7997 = 10 && R7998 = R8006 && R7999 = 10 && R8000 = R8006 && R8001 = 10 && R8002 = R8006 && R8003 = 10 && R8004 = R8006 && R8005 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R7392 + R7389 + R7860 + R7857 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && -1*R454 + -1*R453 < 1 && R456 + R455 < 1 && 0 < R7884 && 9 < R8006 && (R454 + R453 != 0 || R466 + R463 = 0 || (R459 + R457 = 0 && R460 + R458 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R464 + R461 = 0 && R465 + R462 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R7385 + R7383 = 0 && R7386 + R7384 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R7390 + R7387 = 0 && R7391 + R7388 = 0)) && (R459 + R457 != 0 || R454 + R453 + -1*R460 + -1*R458 = 0 || R454 + R453 < 1) && (R464 + R461 != 0 || R454 + R453 + -1*R465 + -1*R462 = 0 || R454 + R453 < 1) && (R7385 + R7383 != 0 || R454 + R453 + -1*R7386 + -1*R7384 = 0 || R454 + R453 < 1) && (R7390 + R7387 != 0 || R454 + R453 + -1*R7391 + -1*R7388 = 0 || R454 + R453 < 1) && (R33 = 0 || (R77 = 0 && R78 = 0)) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R34 = 0 || (R7899 = 0 && R7900 = 0)) && (R34 = 0 || (R7903 = 0 && R7904 = 0)) && (R34 = 0 || (R7905 = 0 && R7906 = 0)) && (R34 = 0 || (R7907 = 0 && R7908 = 0)) && (R34 = 0 || (R7909 = 0 && R7910 = 0)) && (R34 = 0 || (R7913 = 0 && R7914 = 0)) && (R34 = 0 || (R7915 = 0 && R7916 = 0)) && (R34 = 0 || (R7917 = 0 && R7918 = 0)) && (R37 = 0 || (R7921 = 0 && R7922 = 0)) && (R37 = 0 || (R7923 = 0 && R7924 = 0)) && (R37 = 0 || (R7925 = 0 && R7926 = 0)) && (R37 = 0 || (R7927 = 0 && R7928 = 0)) && (R37 = 0 || (R7929 = 0 && R7930 = 0)) && (R37 = 0 || (R7931 = 0 && R7932 = 0)) && (R37 = 0 || (R7933 = 0 && R7934 = 0)) && (R38 = 0 || (R81 = 0 && R82 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R94 + R91 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R459 + R457 = 0 || R454 + R453 < 1) && (R464 + R461 = 0 || R454 + R453 < 1) && (R7385 + R7383 = 0 || R454 + R453 < 1) && (R7390 + R7387 = 0 || R454 + R453 < 1) && (R7398 + R7395 = 0 || (R7396 + R7393 = 0 && R7397 + R7394 = 0)) && (R7398 + R7395 = 0 || (R7858 + R7855 = 0 && R7859 + R7856 = 0));
// End of Parikh automata intersection problem
