// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R14, R15, R18, R21, R24, R2775, R2776, R2777, R2778, R2779, R2780, R2781, R2782, R2783, R2784, R2785, R2786, R2939, R2940, R2941, R2942, R2943, R2944, R2945, R2946, R2947, R2948, R2949, R2950, R2951, R2952, R2953, R2954, R2955, R2956, R2957, R2958, R2959, R2960, R2961, R2962, R2963, R2964, R2965, R2966, R2967, R2968, R2969, R2970, R2971, R2972, R2973, R2974, R2975, R2976, R2977, R2978, R2979, R2980, R2981, R2982, R2983, R2984, R2985, R2986, R2987, R2988, R2989, R2990, R2991, R2992, R2993, R2994, R2995, R2996, R2997, R2998, R2999, R3000, R3001, R3002, R3003, R3004, R3005, R3006, R3007, R3008, R3009, R3010, R3011, R3012, R3013, R3014, R3015, R3016, R3017, R3018, R3019, R3020, R3021, R3022, R3023, R3024, R3025, R3026, R3027, R3028, R3029, R3030, R3031, R3032, R3033, R3034, R3035, R3036, R3037, R3038, R3039, R3040, R3041, R3042, R3043, R3044, R3045, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R453, R454, R455, R456, R457, R458, R459, R46, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R5, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [108, 108] { R68 += 1 };
  s0 -> s1 [109, 65535] { R68 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1 };
  s2 -> s1 [0, 110] { R68 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R68 += 1 };
  s2 -> s1 [112, 65535] { R68 += 1 };
  s3 -> s1 [0, 98] { R68 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R68 += 1 };
  s3 -> s1 [100, 65535] { R68 += 1 };
  s4 -> s1 [0, 96] { R68 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R68 += 1 };
  s4 -> s1 [98, 65535] { R68 += 1 };
  s5 -> s1 [0, 107] { R68 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R68 += 1 };
  s5 -> s1 [109, 65535] { R68 += 1 };
  s6 -> s1 [0, 103] { R68 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R68 += 1 };
  s6 -> s1 [105, 65535] { R68 += 1 };
  s7 -> s1 [0, 110] { R68 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R68 += 1 };
  s7 -> s1 [112, 65535] { R68 += 1 };
  s8 -> s1 [0, 114] { R68 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R68 += 1 };
  s8 -> s1 [116, 65535] { R68 += 1 };
  s9 -> s1 [0, 115] { R68 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R68 += 1 };
  s9 -> s1 [117, 65535] { R68 += 1 };
  s10 -> s1 [0, 65535] { R68 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R2970 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R2969 += 1, R2970 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2970 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R2971 += 1, R2972 += 1 };
  s0 -> s1 [0, 65535] { R2972 += 1, R86 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2972 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R2974 += 1 };
  s0 -> s0 [0, 65535] { R2973 += 1, R2974 += 1 };
  s0 -> s2 [0, 65535] { R2974 += 1, R88 += 1 };
  s0 -> s1 [78, 65535] { R2974 += 1 };
  s1 -> s1 [0, 76] { R2974 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R2974 += 1 };
  s2 -> s1 [0, 76] { R2974 += 1 };
  s2 -> s2 [0, 65535] { R2974 += 1, R88 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R2974 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R2976 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R2976 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R2975 += 1, R2976 += 1 };
  s1 -> s1 [0, 65535] { R2976 += 1, R92 += 1, R93 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2976 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2976 += 1 };
  s2 -> s2 [0, 65535] { R2976 += 1, R93 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2976 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2977 += 1, R2978 += 1 };
  s0 -> s1 [0, 65535] { R2978 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2978 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2980 += 1, R98 += 1, R99 += 1 };
  s0 -> s0 [0, 65535] { R2979 += 1, R2980 += 1 };
  s0 -> s2 [0, 65535] { R2980 += 1, R99 += 1, R100 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2980 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R2980 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2980 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535] { R2980 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2980 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2981 += 1, R2982 += 1 };
  s0 -> s1 [0, 65535] { R2982 += 1 };
  s1 -> s1 [0, 65535] { R2982 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3006 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R3005 += 1, R3006 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3006 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R3008 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3007 += 1, R3008 += 1 };
  s0 -> s2 [65, 65] { R3008 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R3008 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R3008 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R3008 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3008 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R3008 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R3008 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R3008 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3010 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R3009 += 1, R3010 += 1 };
  s0 -> s2 [65, 65] { R3010 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R3010 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R3010 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R3010 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3010 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R3010 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R3010 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3010 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3012 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R3011 += 1, R3012 += 1 };
  s0 -> s2 [65, 65] { R3012 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R3012 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R3012 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R3012 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3012 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R3012 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R3012 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R3012 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3014 += 1 };
  s0 -> s0 [0, 65535] { R3013 += 1, R3014 += 1 };
  s0 -> s2 [65, 65] { R3014 += 1 };
  s0 -> s3 [65, 65] { R3014 += 1 };
  s0 -> s1 [66, 65535] { R3014 += 1 };
  s1 -> s1 [0, 64] { R3014 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3014 += 1 };
  s1 -> s3 [65, 65] { R3014 += 1 };
  s1 -> s1 [66, 65535] { R3014 += 1 };
  s2 -> s2 [0, 65535] { R3014 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3016 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R3015 += 1, R3016 += 1 };
  s0 -> s2 [65, 65] { R3016 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R3016 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R3016 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R3016 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3016 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R3016 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R3016 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3016 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3018 += 1 };
  s0 -> s0 [0, 65535] { R3017 += 1, R3018 += 1 };
  s0 -> s2 [65, 65] { R3018 += 1 };
  s0 -> s3 [65, 65] { R3018 += 1 };
  s0 -> s1 [66, 65535] { R3018 += 1 };
  s1 -> s1 [0, 64] { R3018 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3018 += 1 };
  s1 -> s3 [65, 65] { R3018 += 1 };
  s1 -> s1 [66, 65535] { R3018 += 1 };
  s2 -> s2 [0, 65535] { R3018 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R3020 += 1 };
  s0 -> s0 [0, 65535] { R3019 += 1, R3020 += 1 };
  s0 -> s1 [45, 45] { R3020 += 1 };
  s0 -> s2 [46, 46] { R3020 += 1 };
  s0 -> s1 [48, 62] { R3020 += 1 };
  s0 -> s3 [65, 65] { R3020 += 1 };
  s0 -> s1 [66, 65535] { R3020 += 1 };
  s1 -> s1 [0, 43] { R3020 += 1 };
  s1 -> s1 [45, 45] { R3020 += 1 };
  s1 -> s2 [46, 46] { R3020 += 1 };
  s1 -> s1 [48, 62] { R3020 += 1 };
  s1 -> s3 [65, 65] { R3020 += 1 };
  s1 -> s1 [66, 65535] { R3020 += 1 };
  s2 -> s1 [0, 43] { R3020 += 1 };
  s2 -> s1 [45, 45] { R3020 += 1 };
  s2 -> s2 [46, 46] { R3020 += 1 };
  s2 -> s1 [48, 62] { R3020 += 1 };
  s2 -> s3 [65, 65] { R3020 += 1 };
  s2 -> s1 [66, 114] { R3020 += 1 };
  s2 -> s8 [115, 115] { R3020 += 1 };
  s2 -> s1 [116, 65535] { R3020 += 1 };
  s3 -> s3 [0, 43] { R3020 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3020 += 1 };
  s3 -> s4 [46, 46] { R3020 += 1 };
  s3 -> s3 [48, 62] { R3020 += 1 };
  s3 -> s3 [65, 65535] { R3020 += 1 };
  s4 -> s3 [0, 43] { R3020 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3020 += 1 };
  s4 -> s4 [46, 46] { R3020 += 1 };
  s4 -> s3 [48, 62] { R3020 += 1 };
  s4 -> s3 [65, 114] { R3020 += 1 };
  s4 -> s5 [115, 115] { R3020 += 1 };
  s4 -> s3 [116, 65535] { R3020 += 1 };
  s5 -> s3 [0, 43] { R3020 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3020 += 1 };
  s5 -> s4 [46, 46] { R3020 += 1 };
  s5 -> s3 [48, 62] { R3020 += 1 };
  s5 -> s3 [65, 110] { R3020 += 1 };
  s5 -> s6 [111, 111] { R3020 += 1 };
  s5 -> s3 [112, 65535] { R3020 += 1 };
  s6 -> s3 [0, 43] { R3020 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3020 += 1 };
  s6 -> s4 [46, 46] { R3020 += 1 };
  s6 -> s3 [48, 62] { R3020 += 1 };
  s6 -> s3 [65, 98] { R3020 += 1 };
  s6 -> s7 [99, 99] { R3020 += 1 };
  s6 -> s3 [100, 65535] { R3020 += 1 };
  s7 -> s3 [0, 43] { R3020 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3020 += 1 };
  s7 -> s4 [46, 46] { R3020 += 1 };
  s7 -> s3 [48, 62] { R3020 += 1 };
  s7 -> s3 [65, 106] { R3020 += 1 };
  s7 -> s3 [108, 65535] { R3020 += 1 };
  s8 -> s1 [0, 43] { R3020 += 1 };
  s8 -> s1 [45, 45] { R3020 += 1 };
  s8 -> s2 [46, 46] { R3020 += 1 };
  s8 -> s1 [48, 62] { R3020 += 1 };
  s8 -> s3 [65, 65] { R3020 += 1 };
  s8 -> s1 [66, 110] { R3020 += 1 };
  s8 -> s9 [111, 111] { R3020 += 1 };
  s8 -> s1 [112, 65535] { R3020 += 1 };
  s9 -> s1 [0, 43] { R3020 += 1 };
  s9 -> s1 [45, 45] { R3020 += 1 };
  s9 -> s2 [46, 46] { R3020 += 1 };
  s9 -> s1 [48, 62] { R3020 += 1 };
  s9 -> s3 [65, 65] { R3020 += 1 };
  s9 -> s1 [66, 98] { R3020 += 1 };
  s9 -> s10 [99, 99] { R3020 += 1 };
  s9 -> s1 [100, 65535] { R3020 += 1 };
  s10 -> s1 [0, 43] { R3020 += 1 };
  s10 -> s1 [45, 45] { R3020 += 1 };
  s10 -> s2 [46, 46] { R3020 += 1 };
  s10 -> s1 [48, 62] { R3020 += 1 };
  s10 -> s3 [65, 65] { R3020 += 1 };
  s10 -> s1 [66, 106] { R3020 += 1 };
  s10 -> s1 [108, 65535] { R3020 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3022 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R3021 += 1, R3022 += 1 };
  s1 -> s1 [0, 65535] { R3022 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R3024 += 1 };
  s0 -> s2 [0, 65535] { R3024 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R3023 += 1, R3024 += 1 };
  s0 -> s3 [58, 58] { R3024 += 1 };
  s0 -> s1 [59, 65535] { R3024 += 1 };
  s1 -> s1 [0, 57] { R3024 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3024 += 1 };
  s1 -> s1 [59, 65535] { R3024 += 1 };
  s2 -> s1 [0, 57] { R3024 += 1 };
  s2 -> s2 [0, 65535] { R3024 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3024 += 1 };
  s2 -> s1 [59, 65535] { R3024 += 1 };
  s3 -> s3 [0, 65535] { R3024 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R3026 += 1 };
  s0 -> s2 [0, 65535] { R3026 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R3025 += 1, R3026 += 1 };
  s0 -> s3 [43, 43] { R3026 += 1 };
  s0 -> s1 [44, 65535] { R3026 += 1 };
  s1 -> s1 [0, 42] { R3026 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3026 += 1 };
  s1 -> s1 [44, 65535] { R3026 += 1 };
  s2 -> s1 [0, 42] { R3026 += 1 };
  s2 -> s2 [0, 65535] { R3026 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R3026 += 1 };
  s2 -> s1 [44, 65535] { R3026 += 1 };
  s3 -> s3 [0, 65535] { R3026 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3028 += 1 };
  s0 -> s0 [0, 65535] { R3027 += 1, R3028 += 1 };
  s0 -> s2 [0, 65535] { R3028 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R3028 += 1 };
  s0 -> s1 [66, 65535] { R3028 += 1 };
  s1 -> s1 [0, 64] { R3028 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3028 += 1 };
  s1 -> s1 [66, 65535] { R3028 += 1 };
  s2 -> s1 [0, 64] { R3028 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3028 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R3028 += 1 };
  s2 -> s1 [66, 65535] { R3028 += 1 };
  s3 -> s3 [0, 65535] { R3028 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R3030 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R3030 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3029 += 1, R3030 += 1 };
  s0 -> s3 [91, 91] { R3030 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R3030 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R3030 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3030 += 1 };
  s2 -> s1 [0, 90] { R3030 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R3030 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3030 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R3030 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R3030 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3030 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3032 += 1, R42 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R3031 += 1, R3032 += 1 };
  s0 -> s2 [0, 65535] { R3032 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R3032 += 1, R42 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R3032 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3032 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3032 += 1, R41 += 1, R42 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3032 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 65535] { R3034 += 1, R59 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R3034 += 1, R60 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R3033 += 1, R3034 += 1 };
  s1 -> s1 [0, 65535] { R3034 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3034 += 1, R60 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3034 += 1, R60 += 1, R31 += 1 };
  s2 -> s4 [0, 65535] { R3034 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3034 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R3036 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R3036 += 1, R61 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R3035 += 1, R3036 += 1 };
  s0 -> s3 [108, 108] { R3036 += 1, R62 += 1 };
  s0 -> s1 [109, 65535] { R3036 += 1, R62 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R3036 += 1 };
  s1 -> s1 [0, 65535] { R3036 += 1, R62 += 1 };
  s2 -> s1 [0, 107] { R3036 += 1, R62 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3036 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [108, 108] { R3036 += 1, R62 += 1 };
  s2 -> s1 [109, 65535] { R3036 += 1, R62 += 1 };
  s3 -> s1 [0, 110] { R3036 += 1, R62 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3036 += 1 };
  s3 -> s5 [111, 111] { R3036 += 1, R62 += 1 };
  s3 -> s1 [112, 65535] { R3036 += 1, R62 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3036 += 1, R62 += 1 };
  s5 -> s5 [0, 65535] { R3036 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R3036 += 1, R62 += 1 };
  s5 -> s1 [100, 65535] { R3036 += 1, R62 += 1 };
  s6 -> s1 [0, 96] { R3036 += 1, R62 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3036 += 1 };
  s6 -> s7 [97, 97] { R3036 += 1, R62 += 1 };
  s6 -> s1 [98, 65535] { R3036 += 1, R62 += 1 };
  s7 -> s1 [0, 107] { R3036 += 1, R62 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3036 += 1 };
  s7 -> s8 [108, 108] { R3036 += 1, R62 += 1 };
  s7 -> s1 [109, 65535] { R3036 += 1, R62 += 1 };
  s8 -> s1 [0, 103] { R3036 += 1, R62 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3036 += 1 };
  s8 -> s9 [104, 104] { R3036 += 1, R62 += 1 };
  s8 -> s1 [105, 65535] { R3036 += 1, R62 += 1 };
  s9 -> s1 [0, 110] { R3036 += 1, R62 += 1 };
  s9 -> s9 [0, 65535] { R3036 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3036 += 1, R62 += 1 };
  s9 -> s1 [112, 65535] { R3036 += 1, R62 += 1 };
  s10 -> s1 [0, 114] { R3036 += 1, R62 += 1 };
  s10 -> s10 [0, 65535] { R3036 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3036 += 1, R62 += 1 };
  s10 -> s1 [116, 65535] { R3036 += 1, R62 += 1 };
  s11 -> s1 [0, 115] { R3036 += 1, R62 += 1 };
  s11 -> s11 [0, 65535] { R3036 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R3036 += 1, R62 += 1 };
  s11 -> s1 [117, 65535] { R3036 += 1, R62 += 1 };
  s12 -> s1 [0, 65535] { R3036 += 1, R62 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3036 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s0 [0, 65535] { R3037 += 1, R3038 += 1 };
  s0 -> s1 [0, 65535] { R3038 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R3038 += 1, R64 += 1, R44 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3038 += 1, R63 += 1, R64 += 1 };
  s1 -> s2 [0, 65535] { R3038 += 1, R64 += 1, R44 += 1 };
  s2 -> s3 [0, 65535] { R3038 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3038 += 1, R64 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R3038 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R3040 += 1, R78 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R3040 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R3039 += 1, R3040 += 1 };
  s1 -> s1 [0, 65535] { R3040 += 1, R78 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3040 += 1 };
  s2 -> s1 [0, 65535] { R3040 += 1, R78 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R3040 += 1, R77 += 1, R78 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3040 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s0 [0, 65535] { R3041 += 1, R3042 += 1 };
  s0 -> s1 [0, 65535] { R3042 += 1 };
  s1 -> s1 [0, 65535] { R3042 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R3044 += 1, R80 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3043 += 1, R3044 += 1 };
  s0 -> s2 [0, 65535] { R3044 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [43, 43] { R3044 += 1, R80 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R3044 += 1, R80 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R3044 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R3044 += 1, R80 += 1, R43 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3044 += 1 };
  s1 -> s3 [43, 43] { R3044 += 1, R80 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R3044 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R3044 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R3044 += 1, R80 += 1, R43 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3044 += 1, R79 += 1, R80 += 1 };
  s2 -> s3 [43, 43] { R3044 += 1, R80 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R3044 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R3044 += 1, R80 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R3044 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3044 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3044 += 1, R80 += 1, R43 += 1 };
  s5 -> s5 [0, 65535] { R3044 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3046 += 1, R2946 += 1 };
  s0 -> s0 [0, 65535] { R3045 += 1, R3046 += 1 };
  s0 -> s2 [0, 65535] { R3046 += 1, R2945 += 1, R2946 += 1 };
  s0 -> s1 [66, 65535] { R3046 += 1, R2946 += 1 };
  s1 -> s1 [0, 64] { R3046 += 1, R2946 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3046 += 1 };
  s1 -> s1 [66, 65535] { R3046 += 1, R2946 += 1 };
  s2 -> s1 [0, 64] { R3046 += 1, R2946 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3046 += 1, R2945 += 1, R2946 += 1 };
  s2 -> s1 [66, 65535] { R3046 += 1, R2946 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R3048 += 1, R2947 += 1, R2948 += 1 };
  s0 -> s2 [0, 65535] { R3048 += 1, R2948 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R3047 += 1, R3048 += 1 };
  s1 -> s1 [0, 65535] { R3048 += 1, R2947 += 1, R2948 += 1 };
  s1 -> s2 [0, 65535] { R3048 += 1, R2948 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3048 += 1, R2948 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3048 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3048 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R3050 += 1, R2950 += 1 };
  s0 -> s2 [0, 65535] { R3050 += 1, R2949 += 1, R2950 += 1 };
  s0 -> s0 [0, 65535] { R3049 += 1, R3050 += 1 };
  s0 -> s1 [80, 65535] { R3050 += 1, R2950 += 1 };
  s1 -> s1 [0, 65] { R3050 += 1, R2950 += 1 };
  s1 -> s1 [0, 65535] { R3050 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3050 += 1, R2950 += 1 };
  s2 -> s1 [0, 65] { R3050 += 1, R2950 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3050 += 1, R2949 += 1, R2950 += 1 };
  s2 -> s1 [80, 65535] { R3050 += 1, R2950 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R3052 += 1, R2952 += 1, R454 += 1 };
  s0 -> s2 [0, 65535] { R3052 += 1, R2951 += 1, R2952 += 1 };
  s0 -> s0 [0, 65535] { R3051 += 1, R3052 += 1 };
  s1 -> s1 [0, 65535] { R3052 += 1, R2952 += 1, R454 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3052 += 1 };
  s2 -> s1 [0, 65535] { R3052 += 1, R2952 += 1, R454 += 1 };
  s2 -> s2 [0, 65535] { R3052 += 1, R2951 += 1, R2952 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3052 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R3054 += 1, R2954 += 1 };
  s0 -> s0 [0, 65535] { R3053 += 1, R3054 += 1 };
  s0 -> s2 [0, 65535] { R3054 += 1, R2954 += 1, R456 += 1 };
  s0 -> s3 [0, 65535] { R3054 += 1, R2953 += 1, R2954 += 1 };
  s0 -> s1 [81, 65535] { R3054 += 1, R2954 += 1 };
  s1 -> s1 [0, 79] { R3054 += 1, R2954 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3054 += 1 };
  s1 -> s1 [81, 65535] { R3054 += 1, R2954 += 1 };
  s2 -> s1 [0, 79] { R3054 += 1, R2954 += 1 };
  s2 -> s2 [0, 65535] { R3054 += 1, R2954 += 1, R456 += 1 };
  s2 -> s5 [0, 65535] { R3054 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R3054 += 1, R2954 += 1 };
  s3 -> s1 [0, 79] { R3054 += 1, R2954 += 1 };
  s3 -> s2 [0, 65535] { R3054 += 1, R2954 += 1, R456 += 1 };
  s3 -> s3 [0, 65535] { R3054 += 1, R2953 += 1, R2954 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R3054 += 1, R2954 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3054 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R3056 += 1, R2956 += 1, R460 += 1 };
  s0 -> s0 [0, 65535] { R3055 += 1, R3056 += 1 };
  s0 -> s2 [0, 65535] { R3056 += 1, R2955 += 1, R2956 += 1 };
  s0 -> s3 [0, 65535] { R3056 += 1, R2956 += 1, R459 += 1, R460 += 1 };
  s0 -> s1 [81, 65535] { R3056 += 1, R2956 += 1, R460 += 1 };
  s1 -> s1 [0, 79] { R3056 += 1, R2956 += 1, R460 += 1 };
  s1 -> s4 [0, 65535] { R3056 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3056 += 1, R2956 += 1 };
  s1 -> s1 [81, 65535] { R3056 += 1, R2956 += 1, R460 += 1 };
  s2 -> s1 [0, 79] { R3056 += 1, R2956 += 1, R460 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3056 += 1, R2955 += 1, R2956 += 1 };
  s2 -> s3 [0, 65535] { R3056 += 1, R2956 += 1, R459 += 1, R460 += 1 };
  s2 -> s1 [81, 65535] { R3056 += 1, R2956 += 1, R460 += 1 };
  s3 -> s1 [0, 79] { R3056 += 1, R2956 += 1, R460 += 1 };
  s3 -> s4 [0, 65535] { R3056 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3056 += 1, R2956 += 1, R459 += 1, R460 += 1 };
  s3 -> s1 [81, 65535] { R3056 += 1, R2956 += 1, R460 += 1 };
  s4 -> s4 [0, 65535] { R3056 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R3058 += 1, R2957 += 1, R2958 += 1 };
  s0 -> s0 [0, 65535] { R3057 += 1, R3058 += 1 };
  s0 -> s2 [0, 65535] { R3058 += 1, R2958 += 1, R465 += 1, R466 += 1 };
  s0 -> s3 [0, 65535] { R3058 += 1, R2958 += 1, R464 += 1, R465 += 1 };
  s1 -> s1 [0, 65535] { R3058 += 1, R2957 += 1, R2958 += 1 };
  s1 -> s2 [0, 65535] { R3058 += 1, R2958 += 1, R465 += 1, R466 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R3058 += 1, R2958 += 1, R464 += 1, R465 += 1 };
  s2 -> s2 [0, 65535] { R3058 += 1, R2958 += 1, R465 += 1, R466 += 1 };
  s2 -> s6 [0, 65535] { R3058 += 1, R2958 += 1 };
  s2 -> s4 [0, 65535] { R3058 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3058 += 1, R2958 += 1, R465 += 1, R466 += 1 };
  s3 -> s4 [0, 65535] { R3058 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3058 += 1, R2958 += 1, R464 += 1, R465 += 1 };
  s4 -> s4 [0, 65535] { R3058 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3058 += 1, R2958 += 1 };
  s6 -> s4 [0, 65535] { R3058 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s0 -> s0 [0, 65535] { R3059 += 1, R3060 += 1 };
  s0 -> s2 [0, 65535] { R3060 += 1, R2960 += 1, R469 += 1, R470 += 1 };
  s0 -> s3 [0, 65535] { R3060 += 1, R2959 += 1, R2960 += 1 };
  s0 -> s1 [91, 107] { R3060 += 1, R2960 += 1, R470 += 1 };
  s0 -> s4 [108, 108] { R3060 += 1, R2960 += 1, R470 += 1 };
  s0 -> s1 [109, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s1 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s1 -> s1 [0, 65535] { R3060 += 1, R2960 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3060 += 1 };
  s1 -> s1 [91, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s2 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s2 -> s2 [0, 65535] { R3060 += 1, R2960 += 1, R469 += 1, R470 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3060 += 1 };
  s2 -> s1 [91, 107] { R3060 += 1, R2960 += 1, R470 += 1 };
  s2 -> s4 [108, 108] { R3060 += 1, R2960 += 1, R470 += 1 };
  s2 -> s1 [109, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s3 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s3 -> s2 [0, 65535] { R3060 += 1, R2960 += 1, R469 += 1, R470 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3060 += 1, R2959 += 1, R2960 += 1 };
  s3 -> s1 [91, 107] { R3060 += 1, R2960 += 1, R470 += 1 };
  s3 -> s4 [108, 108] { R3060 += 1, R2960 += 1, R470 += 1 };
  s3 -> s1 [109, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s4 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3060 += 1, R2960 += 1 };
  s4 -> s6 [0, 65535] { R3060 += 1 };
  s4 -> s1 [91, 110] { R3060 += 1, R2960 += 1, R470 += 1 };
  s4 -> s7 [111, 111] { R3060 += 1, R2960 += 1, R470 += 1 };
  s4 -> s1 [112, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3060 += 1 };
  s7 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s7 -> s7 [0, 65535] { R3060 += 1, R2960 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R3060 += 1 };
  s7 -> s1 [91, 98] { R3060 += 1, R2960 += 1, R470 += 1 };
  s7 -> s8 [99, 99] { R3060 += 1, R2960 += 1, R470 += 1 };
  s7 -> s1 [100, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s8 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s8 -> s8 [0, 65535] { R3060 += 1, R2960 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R3060 += 1 };
  s8 -> s1 [91, 96] { R3060 += 1, R2960 += 1, R470 += 1 };
  s8 -> s9 [97, 97] { R3060 += 1, R2960 += 1, R470 += 1 };
  s8 -> s1 [98, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s9 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3060 += 1 };
  s9 -> s9 [0, 65535] { R3060 += 1, R2960 += 1 };
  s9 -> s1 [91, 107] { R3060 += 1, R2960 += 1, R470 += 1 };
  s9 -> s10 [108, 108] { R3060 += 1, R2960 += 1, R470 += 1 };
  s9 -> s1 [109, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s10 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R3060 += 1 };
  s10 -> s10 [0, 65535] { R3060 += 1, R2960 += 1 };
  s10 -> s1 [91, 103] { R3060 += 1, R2960 += 1, R470 += 1 };
  s10 -> s11 [104, 104] { R3060 += 1, R2960 += 1, R470 += 1 };
  s10 -> s1 [105, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s11 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s11 -> s11 [0, 65535] { R3060 += 1, R2960 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3060 += 1 };
  s11 -> s1 [91, 110] { R3060 += 1, R2960 += 1, R470 += 1 };
  s11 -> s12 [111, 111] { R3060 += 1, R2960 += 1, R470 += 1 };
  s11 -> s1 [112, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s12 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s12 -> s12 [0, 65535] { R3060 += 1, R2960 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R3060 += 1 };
  s12 -> s1 [91, 114] { R3060 += 1, R2960 += 1, R470 += 1 };
  s12 -> s13 [115, 115] { R3060 += 1, R2960 += 1, R470 += 1 };
  s12 -> s1 [116, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s13 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R3060 += 1, R2960 += 1 };
  s13 -> s6 [0, 65535] { R3060 += 1 };
  s13 -> s1 [91, 115] { R3060 += 1, R2960 += 1, R470 += 1 };
  s13 -> s14 [116, 116] { R3060 += 1, R2960 += 1, R470 += 1 };
  s13 -> s1 [117, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  s14 -> s1 [0, 80] { R3060 += 1, R2960 += 1, R470 += 1 };
  s14 -> s1 [91, 65535] { R3060 += 1, R2960 += 1, R470 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R3062 += 1, R2962 += 1 };
  s0 -> s2 [0, 65535] { R3062 += 1, R2962 += 1, R2779 += 1, R2780 += 1 };
  s0 -> s0 [0, 65535] { R3061 += 1, R3062 += 1 };
  s0 -> s3 [0, 65535] { R3062 += 1, R2961 += 1, R2962 += 1 };
  s1 -> s5 [0, 65535] { R3062 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3062 += 1, R2962 += 1 };
  s2 -> s5 [0, 65535] { R3062 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3062 += 1, R2962 += 1 };
  s2 -> s2 [0, 65535] { R3062 += 1, R2962 += 1, R2779 += 1, R2780 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3062 += 1, R2962 += 1 };
  s3 -> s2 [0, 65535] { R3062 += 1, R2962 += 1, R2779 += 1, R2780 += 1 };
  s3 -> s3 [0, 65535] { R3062 += 1, R2961 += 1, R2962 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3062 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R3063 += 1, R3064 += 1 };
  s0 -> s1 [0, 65535] { R3064 += 1, R2963 += 1, R2964 += 1 };
  s0 -> s2 [0, 65535] { R3064 += 1, R2964 += 1, R2785 += 1, R2786 += 1 };
  s0 -> s3 [0, 65535] { R3064 += 1, R2964 += 1, R2784 += 1, R2785 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3064 += 1, R2963 += 1, R2964 += 1 };
  s1 -> s2 [0, 65535] { R3064 += 1, R2964 += 1, R2785 += 1, R2786 += 1 };
  s1 -> s3 [0, 65535] { R3064 += 1, R2964 += 1, R2784 += 1, R2785 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R3064 += 1, R2964 += 1 };
  s2 -> s5 [0, 65535] { R3064 += 1 };
  s2 -> s2 [0, 65535] { R3064 += 1, R2964 += 1, R2785 += 1, R2786 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3064 += 1 };
  s3 -> s2 [0, 65535] { R3064 += 1, R2964 += 1, R2785 += 1, R2786 += 1 };
  s3 -> s3 [0, 65535] { R3064 += 1, R2964 += 1, R2784 += 1, R2785 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3064 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3064 += 1, R2964 += 1 };
  s6 -> s5 [0, 65535] { R3064 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R3066 += 1, R2965 += 1, R2966 += 1 };
  s0 -> s2 [0, 65535] { R3066 += 1, R2966 += 1 };
  s0 -> s0 [0, 65535] { R3065 += 1, R3066 += 1 };
  s1 -> s1 [0, 65535] { R3066 += 1, R2965 += 1, R2966 += 1 };
  s1 -> s2 [0, 65535] { R3066 += 1, R2966 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3066 += 1, R2966 += 1 };
  s2 -> s3 [0, 65535] { R3066 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3066 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 79] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s0 -> s0 [0, 65535] { R3067 += 1, R3068 += 1 };
  s0 -> s2 [0, 65535] { R3068 += 1, R2967 += 1, R2968 += 1 };
  s0 -> s1 [0, 65535] { R3068 += 1, R2968 += 1 };
  s0 -> s3 [80, 80] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s0 -> s4 [80, 80] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s0 -> s1 [81, 65535] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s1 -> s1 [0, 79] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R3068 += 1 };
  s1 -> s1 [0, 65535] { R3068 += 1, R2968 += 1 };
  s1 -> s3 [80, 80] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s1 -> s4 [80, 80] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s1 -> s1 [81, 65535] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s2 -> s1 [0, 79] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3068 += 1, R2967 += 1, R2968 += 1 };
  s2 -> s1 [0, 65535] { R3068 += 1, R2968 += 1 };
  s2 -> s3 [80, 80] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s2 -> s4 [80, 80] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s2 -> s1 [81, 65535] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3068 += 1, R2968 += 1 };
  s3 -> s7 [0, 65535] { R3068 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3068 += 1, R2968 += 1 };
  s4 -> s7 [0, 65535] { R3068 += 1 };
  s4 -> s4 [0, 65535] { R3068 += 1, R2968 += 1, R2943 += 1, R2944 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3068 += 1, R2968 += 1 };
  s6 -> s7 [0, 65535] { R3068 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R3068 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R3070 += 1, R2983 += 1, R2984 += 1 };
  s0 -> s2 [0, 65535] { R3070 += 1, R2984 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R3069 += 1, R3070 += 1 };
  s1 -> s1 [0, 65535] { R3070 += 1, R2983 += 1, R2984 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3070 += 1, R2984 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3070 += 1, R2984 += 1, R34 += 1 };
  s2 -> s4 [0, 65535] { R3070 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3070 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R3072 += 1, R2986 += 1 };
  s0 -> s0 [0, 65535] { R3071 += 1, R3072 += 1 };
  s0 -> s2 [0, 65535] { R3072 += 1, R2985 += 1, R2986 += 1 };
  s0 -> s3 [65, 65] { R3072 += 1, R2986 += 1 };
  s0 -> s4 [65, 65] { R3072 += 1, R2986 += 1 };
  s0 -> s5 [80, 80] { R3072 += 1, R2986 += 1 };
  s0 -> s1 [81, 65535] { R3072 += 1, R2986 += 1 };
  s1 -> s1 [0, 64] { R3072 += 1, R2986 += 1 };
  s1 -> s3 [65, 65] { R3072 += 1, R2986 += 1 };
  s1 -> s4 [65, 65] { R3072 += 1, R2986 += 1 };
  s1 -> s5 [80, 80] { R3072 += 1, R2986 += 1 };
  s1 -> s1 [81, 65535] { R3072 += 1, R2986 += 1 };
  s2 -> s1 [0, 64] { R3072 += 1, R2986 += 1 };
  s2 -> s2 [0, 65535] { R3072 += 1, R2985 += 1, R2986 += 1 };
  s2 -> s3 [65, 65] { R3072 += 1, R2986 += 1 };
  s2 -> s4 [65, 65] { R3072 += 1, R2986 += 1 };
  s2 -> s5 [80, 80] { R3072 += 1, R2986 += 1 };
  s2 -> s1 [81, 65535] { R3072 += 1, R2986 += 1 };
  s4 -> s4 [0, 65] { R3072 += 1, R2986 += 1 };
  s4 -> s7 [80, 80] { R3072 += 1, R2986 += 1 };
  s4 -> s4 [81, 65535] { R3072 += 1, R2986 += 1 };
  s5 -> s5 [0, 64] { R3072 += 1, R2986 += 1 };
  s5 -> s5 [0, 65535] { R3072 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3072 += 1, R2986 += 1 };
  s5 -> s8 [65, 65] { R3072 += 1, R2986 += 1 };
  s5 -> s5 [80, 65535] { R3072 += 1, R2986 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3072 += 1, R2986 += 1 };
  s7 -> s7 [0, 65535] { R3072 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R3072 += 1, R2986 += 1 };
  s8 -> s8 [0, 65535] { R3072 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3074 += 1, R2988 += 1, R453 += 1 };
  s0 -> s2 [0, 65535] { R3074 += 1, R2987 += 1, R2988 += 1 };
  s0 -> s0 [0, 65535] { R3073 += 1, R3074 += 1 };
  s0 -> s3 [65, 65] { R3074 += 1, R2988 += 1, R453 += 1 };
  s0 -> s4 [65, 65] { R3074 += 1, R2988 += 1, R453 += 1 };
  s0 -> s1 [66, 65535] { R3074 += 1, R2988 += 1, R453 += 1 };
  s1 -> s1 [0, 64] { R3074 += 1, R2988 += 1, R453 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3074 += 1 };
  s1 -> s3 [65, 65] { R3074 += 1, R2988 += 1, R453 += 1 };
  s1 -> s4 [65, 65] { R3074 += 1, R2988 += 1, R453 += 1 };
  s1 -> s1 [66, 65535] { R3074 += 1, R2988 += 1, R453 += 1 };
  s2 -> s1 [0, 64] { R3074 += 1, R2988 += 1, R453 += 1 };
  s2 -> s2 [0, 65535] { R3074 += 1, R2987 += 1, R2988 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3074 += 1, R2988 += 1, R453 += 1 };
  s2 -> s4 [65, 65] { R3074 += 1, R2988 += 1, R453 += 1 };
  s2 -> s1 [66, 65535] { R3074 += 1, R2988 += 1, R453 += 1 };
  s3 -> s3 [0, 65535] { R3074 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3074 += 1, R2988 += 1, R453 += 1 };
  s4 -> s6 [0, 65535] { R3074 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3074 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R3076 += 1, R2990 += 1, R455 += 1 };
  s0 -> s0 [0, 65535] { R3075 += 1, R3076 += 1 };
  s0 -> s2 [0, 65535] { R3076 += 1, R2989 += 1, R2990 += 1 };
  s0 -> s3 [65, 65] { R3076 += 1, R2990 += 1, R455 += 1 };
  s0 -> s4 [65, 65] { R3076 += 1, R2990 += 1, R455 += 1 };
  s0 -> s1 [66, 65535] { R3076 += 1, R2990 += 1, R455 += 1 };
  s1 -> s1 [0, 64] { R3076 += 1, R2990 += 1, R455 += 1 };
  s1 -> s1 [0, 65535] { R3076 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3076 += 1, R2990 += 1, R455 += 1 };
  s1 -> s4 [65, 65] { R3076 += 1, R2990 += 1, R455 += 1 };
  s1 -> s1 [66, 65535] { R3076 += 1, R2990 += 1, R455 += 1 };
  s2 -> s1 [0, 64] { R3076 += 1, R2990 += 1, R455 += 1 };
  s2 -> s2 [0, 65535] { R3076 += 1, R2989 += 1, R2990 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3076 += 1, R2990 += 1, R455 += 1 };
  s2 -> s4 [65, 65] { R3076 += 1, R2990 += 1, R455 += 1 };
  s2 -> s1 [66, 65535] { R3076 += 1, R2990 += 1, R455 += 1 };
  s3 -> s3 [0, 65535] { R3076 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3076 += 1, R2990 += 1, R455 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3076 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3076 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s0 -> s2 [0, 65535] { R3078 += 1, R2991 += 1, R2992 += 1 };
  s0 -> s0 [0, 65535] { R3077 += 1, R3078 += 1 };
  s0 -> s3 [65, 65] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s0 -> s4 [65, 65] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s0 -> s1 [66, 65535] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 64] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 65535] { R3078 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s1 -> s4 [65, 65] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [66, 65535] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [0, 64] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s2 -> s2 [0, 65535] { R3078 += 1, R2991 += 1, R2992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s2 -> s4 [65, 65] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [66, 65535] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s3 -> s3 [0, 65535] { R3078 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3078 += 1, R2992 += 1, R457 += 1, R458 += 1 };
  s4 -> s6 [0, 65535] { R3078 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3078 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s0 -> s2 [0, 65535] { R3080 += 1, R2993 += 1, R2994 += 1 };
  s0 -> s0 [0, 65535] { R3079 += 1, R3080 += 1 };
  s0 -> s3 [65, 65] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s0 -> s4 [65, 65] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s0 -> s1 [66, 65535] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 64] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 65535] { R3080 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s1 -> s4 [65, 65] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [66, 65535] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [0, 64] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s2 -> s2 [0, 65535] { R3080 += 1, R2993 += 1, R2994 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s2 -> s4 [65, 65] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [66, 65535] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s3 -> s3 [0, 65535] { R3080 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3080 += 1 };
  s4 -> s4 [0, 65535] { R3080 += 1, R2994 += 1, R461 += 1, R462 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3080 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s0 -> s2 [0, 65535] { R3082 += 1, R2995 += 1, R2996 += 1 };
  s0 -> s0 [0, 65535] { R3081 += 1, R3082 += 1 };
  s0 -> s3 [65, 65] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s0 -> s4 [65, 65] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s0 -> s1 [66, 65535] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [0, 64] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3082 += 1 };
  s1 -> s3 [65, 65] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s1 -> s4 [65, 65] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [66, 65535] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [0, 64] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3082 += 1, R2995 += 1, R2996 += 1 };
  s2 -> s3 [65, 65] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s2 -> s4 [65, 65] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [66, 65535] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3082 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3082 += 1 };
  s4 -> s4 [0, 65535] { R3082 += 1, R2996 += 1, R467 += 1, R468 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3082 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s0 -> s2 [0, 64] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s0 -> s0 [0, 65535] { R3083 += 1, R3084 += 1 };
  s0 -> s3 [0, 65535] { R3084 += 1, R2997 += 1, R2998 += 1 };
  s0 -> s4 [65, 65] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s0 -> s5 [65, 65] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s0 -> s6 [65, 65] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s0 -> s7 [65, 65] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s0 -> s1 [66, 65535] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s0 -> s2 [66, 65535] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s1 -> s1 [0, 64] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R3084 += 1 };
  s1 -> s4 [65, 65] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s1 -> s5 [65, 65] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s1 -> s1 [66, 65535] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s1 [0, 64] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s2 [0, 64] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s2 -> s4 [65, 65] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s5 [65, 65] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s6 [65, 65] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s2 -> s7 [65, 65] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s2 -> s1 [66, 65535] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s2 [66, 65535] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s3 -> s1 [0, 64] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s3 -> s2 [0, 64] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s3 -> s3 [0, 65535] { R3084 += 1, R2997 += 1, R2998 += 1 };
  s3 -> s4 [65, 65] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s3 -> s5 [65, 65] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s3 -> s6 [65, 65] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s3 -> s7 [65, 65] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s3 -> s1 [66, 65535] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s3 -> s2 [66, 65535] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s4 -> s9 [0, 65535] { R3084 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R3084 += 1 };
  s6 -> s4 [0, 65535] { R3084 += 1, R2998 += 1, R2776 += 1, R2777 += 1 };
  s6 -> s6 [0, 65535] { R3084 += 1, R2998 += 1, R2775 += 1, R2776 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3084 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s0 -> s0 [0, 65535] { R3085 += 1, R3086 += 1 };
  s0 -> s2 [0, 65535] { R3086 += 1, R2999 += 1, R3000 += 1 };
  s0 -> s3 [65, 65] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s0 -> s4 [65, 65] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s0 -> s1 [66, 65535] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s1 -> s1 [0, 64] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s1 -> s1 [0, 65535] { R3086 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s1 -> s4 [65, 65] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s1 -> s1 [66, 65535] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s2 -> s1 [0, 64] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3086 += 1, R2999 += 1, R3000 += 1 };
  s2 -> s3 [65, 65] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s2 -> s4 [65, 65] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s2 -> s1 [66, 65535] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s3 -> s3 [0, 65535] { R3086 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3086 += 1, R3000 += 1, R2781 += 1, R2782 += 1 };
  s4 -> s6 [0, 65535] { R3086 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3086 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R3088 += 1, R3002 += 1 };
  s0 -> s2 [0, 65535] { R3088 += 1, R3001 += 1, R3002 += 1 };
  s0 -> s0 [0, 65535] { R3087 += 1, R3088 += 1 };
  s0 -> s3 [65, 65] { R3088 += 1, R3002 += 1 };
  s0 -> s4 [65, 65] { R3088 += 1, R3002 += 1 };
  s0 -> s1 [66, 65535] { R3088 += 1, R3002 += 1 };
  s1 -> s1 [0, 64] { R3088 += 1, R3002 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3088 += 1 };
  s1 -> s3 [65, 65] { R3088 += 1, R3002 += 1 };
  s1 -> s4 [65, 65] { R3088 += 1, R3002 += 1 };
  s1 -> s1 [66, 65535] { R3088 += 1, R3002 += 1 };
  s2 -> s1 [0, 64] { R3088 += 1, R3002 += 1 };
  s2 -> s2 [0, 65535] { R3088 += 1, R3001 += 1, R3002 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3088 += 1, R3002 += 1 };
  s2 -> s4 [65, 65] { R3088 += 1, R3002 += 1 };
  s2 -> s1 [66, 65535] { R3088 += 1, R3002 += 1 };
  s3 -> s3 [0, 65535] { R3088 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3088 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3088 += 1, R3002 += 1 };
  s5 -> s5 [0, 65535] { R3088 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s0 -> s2 [0, 64] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s0 -> s3 [0, 65535] { R3090 += 1, R3003 += 1, R3004 += 1 };
  s0 -> s0 [0, 65535] { R3089 += 1, R3090 += 1 };
  s0 -> s4 [65, 65] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s0 -> s5 [65, 65] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s0 -> s6 [65, 65] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s0 -> s7 [65, 65] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s0 -> s2 [66, 79] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s0 -> s1 [66, 65535] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s0 -> s2 [81, 65535] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s1 -> s1 [0, 64] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s1 -> s2 [0, 64] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s1 -> s4 [65, 65] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s1 -> s5 [65, 65] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s1 -> s6 [65, 65] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s1 -> s7 [65, 65] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s1 -> s2 [66, 79] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s1 -> s1 [66, 65535] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s1 -> s2 [81, 65535] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s2 -> s2 [0, 64] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s2 -> s2 [0, 65535] { R3090 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [65, 65] { R3090 += 1, R3004 += 1 };
  s2 -> s7 [65, 65] { R3090 += 1, R3004 += 1 };
  s2 -> s2 [66, 79] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s2 -> s2 [66, 65535] { R3090 += 1, R3004 += 1 };
  s2 -> s2 [81, 65535] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s3 -> s1 [0, 64] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s3 -> s2 [0, 64] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s3 -> s3 [0, 65535] { R3090 += 1, R3003 += 1, R3004 += 1 };
  s3 -> s4 [65, 65] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s3 -> s5 [65, 65] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s3 -> s6 [65, 65] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s3 -> s7 [65, 65] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s3 -> s2 [66, 79] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s3 -> s1 [66, 65535] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s3 -> s2 [81, 65535] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s4 -> s4 [0, 65535] { R3090 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s7 [0, 79] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s6 -> s6 [0, 65535] { R3090 += 1, R3004 += 1, R2939 += 1, R2940 += 1 };
  s6 -> s7 [81, 65535] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s7 -> s7 [0, 79] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s7 -> s8 [0, 65535] { R3090 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R3090 += 1, R3004 += 1 };
  s7 -> s7 [81, 65535] { R3090 += 1, R3004 += 1, R2940 += 1, R2941 += 1 };
  s8 -> s8 [0, 65535] { R3090 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R5 = R2968 && R6 = R3090 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R59 = 0 && R60 = R2968 && R61 = 0 && R62 = R2968 && R63 = 0 && R64 = R2968 && R65 = 0 && R66 = R3090 && R67 = 0 && R68 = R3090 && R69 = 0 && R70 = R3090 && R86 + R85 = 0 && R2945 = 0 && R2946 = R2968 && R2947 = 0 && R2948 = R2968 && R2949 = 0 && R2950 = R2968 && R2951 = 0 && R2952 = R2968 && R2953 = 0 && R2954 = R2968 && R2955 = 0 && R2956 = R2968 && R2957 = 0 && R2958 = R2968 && R2959 = 0 && R2960 = R2968 && R2961 = 0 && R2962 = R2968 && R2963 = 0 && R2964 = R2968 && R2965 = 0 && R2966 = R2968 && R2967 = 0 && R2969 = 0 && R2970 = R3090 && R2971 = 0 && R2972 = R3090 && R2973 = 0 && R2974 = R3090 && R2975 = 0 && R2976 = R3090 && R2977 = 0 && R2978 = R3090 && R2979 = 0 && R2980 = R3090 && R2981 = 0 && R2982 = R3090 && R2985 = 0 && R2986 = 0 && R2997 = 0 && R2998 = 0 && R3003 = 0 && R3004 = 0 && R3019 = 10 && R3020 = R3090 && R3021 = 10 && R3022 = R3090 && R3023 = 10 && R3024 = R3090 && R3025 = 10 && R3026 = R3090 && R3027 = 10 && R3028 = R3090 && R3029 = 10 && R3030 = R3090 && R3031 = 10 && R3032 = R3090 && R3033 = 10 && R3034 = R3090 && R3035 = 10 && R3036 = R3090 && R3037 = 10 && R3038 = R3090 && R3039 = 10 && R3040 = R3090 && R3041 = 10 && R3042 = R3090 && R3043 = 10 && R3044 = R3090 && R3045 = 10 && R3046 = R3090 && R3047 = 10 && R3048 = R3090 && R3049 = 10 && R3050 = R3090 && R3051 = 10 && R3052 = R3090 && R3053 = 10 && R3054 = R3090 && R3055 = 10 && R3056 = R3090 && R3057 = 10 && R3058 = R3090 && R3059 = 10 && R3060 = R3090 && R3061 = 10 && R3062 = R3090 && R3063 = 10 && R3064 = R3090 && R3065 = 10 && R3066 = R3090 && R3067 = 10 && R3068 = R3090 && R3069 = 10 && R3070 = R3090 && R3071 = 10 && R3072 = R3090 && R3073 = 10 && R3074 = R3090 && R3075 = 10 && R3076 = R3090 && R3077 = 10 && R3078 = R3090 && R3079 = 10 && R3080 = R3090 && R3081 = 10 && R3082 = R3090 && R3083 = 10 && R3084 = R3090 && R3085 = 10 && R3086 = R3090 && R3087 = 10 && R3088 = R3090 && R3089 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R2780 + R2777 + R2944 + R2941 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && -1*R454 + -1*R453 < 1 && R456 + R455 < 1 && 0 < R2968 && 9 < R3090 && (R454 + R453 != 0 || R466 + R463 = 0 || (R459 + R457 = 0 && R460 + R458 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R464 + R461 = 0 && R465 + R462 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R469 + R467 = 0 && R470 + R468 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R2778 + R2775 = 0 && R2779 + R2776 = 0)) && (R459 + R457 != 0 || R454 + R453 + -1*R460 + -1*R458 = 0 || R454 + R453 < 1) && (R464 + R461 != 0 || R454 + R453 + -1*R465 + -1*R462 = 0 || R454 + R453 < 1) && (R469 + R467 != 0 || R454 + R453 + -1*R470 + -1*R468 = 0 || R454 + R453 < 1) && (R2778 + R2775 != 0 || R454 + R453 + -1*R2779 + -1*R2776 = 0 || R454 + R453 < 1) && (R33 = 0 || (R77 = 0 && R78 = 0)) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R34 = 0 || (R2983 = 0 && R2984 = 0)) && (R34 = 0 || (R2987 = 0 && R2988 = 0)) && (R34 = 0 || (R2989 = 0 && R2990 = 0)) && (R34 = 0 || (R2991 = 0 && R2992 = 0)) && (R34 = 0 || (R2993 = 0 && R2994 = 0)) && (R34 = 0 || (R2995 = 0 && R2996 = 0)) && (R34 = 0 || (R2999 = 0 && R3000 = 0)) && (R34 = 0 || (R3001 = 0 && R3002 = 0)) && (R37 = 0 || (R3005 = 0 && R3006 = 0)) && (R37 = 0 || (R3007 = 0 && R3008 = 0)) && (R37 = 0 || (R3009 = 0 && R3010 = 0)) && (R37 = 0 || (R3011 = 0 && R3012 = 0)) && (R37 = 0 || (R3013 = 0 && R3014 = 0)) && (R37 = 0 || (R3015 = 0 && R3016 = 0)) && (R37 = 0 || (R3017 = 0 && R3018 = 0)) && (R38 = 0 || (R81 = 0 && R82 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R94 + R91 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R459 + R457 = 0 || R454 + R453 < 1) && (R464 + R461 = 0 || R454 + R453 < 1) && (R469 + R467 = 0 || R454 + R453 < 1) && (R2778 + R2775 = 0 || R454 + R453 < 1) && (R2786 + R2783 = 0 || (R2784 + R2781 = 0 && R2785 + R2782 = 0)) && (R2786 + R2783 = 0 || (R2942 + R2939 = 0 && R2943 + R2940 = 0));
// End of Parikh automata intersection problem
