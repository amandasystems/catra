// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R14, R15, R18, R21, R24, R2775, R2776, R2777, R2778, R2779, R2780, R31, R32, R33, R34, R35, R3547, R3548, R3549, R3550, R3551, R3552, R36, R37, R38, R3857, R3858, R3859, R3860, R3861, R3862, R3863, R3864, R3865, R3866, R3867, R3868, R3869, R3870, R3871, R3872, R3873, R3874, R3875, R3876, R3877, R3878, R3879, R3880, R3881, R3882, R3883, R3884, R3885, R3886, R3887, R3888, R3889, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R39, R3900, R3901, R3902, R3903, R3904, R3905, R3906, R3907, R3908, R3909, R3910, R3911, R3912, R3913, R3914, R3915, R3916, R3917, R3918, R3919, R3920, R3921, R3922, R3923, R3924, R3925, R3926, R3927, R3928, R3929, R3930, R3931, R3932, R3933, R3934, R3935, R3936, R3937, R3938, R3939, R3940, R3941, R3942, R3943, R3944, R3945, R3946, R3947, R3948, R3949, R3950, R3951, R3952, R3953, R3954, R3955, R3956, R3957, R3958, R3959, R3960, R3961, R3962, R3963, R3964, R3965, R3966, R3967, R3968, R3969, R3970, R3971, R3972, R3973, R3974, R3975, R3976, R3977, R3978, R3979, R3980, R3981, R3982, R3983, R3984, R3985, R3986, R3987, R3988, R3989, R3990, R3991, R3992, R3993, R3994, R3995, R3996, R3997, R3998, R3999, R40, R4000, R4001, R4002, R4003, R4004, R4005, R4006, R4007, R4008, R41, R42, R43, R44, R45, R453, R454, R455, R456, R457, R458, R459, R46, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R5, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [108, 108] { R68 += 1 };
  s0 -> s1 [109, 65535] { R68 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1 };
  s2 -> s1 [0, 110] { R68 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R68 += 1 };
  s2 -> s1 [112, 65535] { R68 += 1 };
  s3 -> s1 [0, 98] { R68 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R68 += 1 };
  s3 -> s1 [100, 65535] { R68 += 1 };
  s4 -> s1 [0, 96] { R68 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R68 += 1 };
  s4 -> s1 [98, 65535] { R68 += 1 };
  s5 -> s1 [0, 107] { R68 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R68 += 1 };
  s5 -> s1 [109, 65535] { R68 += 1 };
  s6 -> s1 [0, 103] { R68 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R68 += 1 };
  s6 -> s1 [105, 65535] { R68 += 1 };
  s7 -> s1 [0, 110] { R68 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R68 += 1 };
  s7 -> s1 [112, 65535] { R68 += 1 };
  s8 -> s1 [0, 114] { R68 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R68 += 1 };
  s8 -> s1 [116, 65535] { R68 += 1 };
  s9 -> s1 [0, 115] { R68 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R68 += 1 };
  s9 -> s1 [117, 65535] { R68 += 1 };
  s10 -> s1 [0, 65535] { R68 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R3887 += 1, R3888 += 1 };
  s0 -> s1 [0, 65535] { R3888 += 1, R35 += 1 };
  s1 -> s1 [0, 65535] { R3888 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R3889 += 1, R3890 += 1 };
  s0 -> s1 [0, 65535] { R3890 += 1, R86 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3890 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R3892 += 1 };
  s0 -> s2 [0, 65535] { R3892 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R3891 += 1, R3892 += 1 };
  s0 -> s1 [78, 65535] { R3892 += 1 };
  s1 -> s1 [0, 76] { R3892 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R3892 += 1 };
  s2 -> s1 [0, 76] { R3892 += 1 };
  s2 -> s2 [0, 65535] { R3892 += 1, R88 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R3892 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R3894 += 1, R93 += 1, R94 += 1 };
  s0 -> s2 [0, 65535] { R3894 += 1, R92 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R3893 += 1, R3894 += 1 };
  s1 -> s1 [0, 65535] { R3894 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [0, 65535] { R3894 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3894 += 1, R93 += 1, R94 += 1 };
  s2 -> s2 [0, 65535] { R3894 += 1, R92 += 1, R93 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3894 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R3895 += 1, R3896 += 1 };
  s0 -> s1 [0, 65535] { R3896 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3896 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3898 += 1, R98 += 1, R99 += 1 };
  s0 -> s0 [0, 65535] { R3897 += 1, R3898 += 1 };
  s0 -> s2 [0, 65535] { R3898 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R3898 += 1, R98 += 1, R99 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3898 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3898 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535] { R3898 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3898 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R3899 += 1, R3900 += 1 };
  s0 -> s1 [0, 65535] { R3900 += 1 };
  s1 -> s1 [0, 65535] { R3900 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3924 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R3923 += 1, R3924 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3924 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R3926 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3925 += 1, R3926 += 1 };
  s0 -> s2 [65, 65] { R3926 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R3926 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R3926 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R3926 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3926 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R3926 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R3926 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3926 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3928 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R3927 += 1, R3928 += 1 };
  s0 -> s2 [65, 65] { R3928 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R3928 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R3928 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R3928 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3928 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R3928 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R3928 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3928 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3930 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R3929 += 1, R3930 += 1 };
  s0 -> s2 [65, 65] { R3930 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R3930 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R3930 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R3930 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3930 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R3930 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R3930 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R3930 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3932 += 1 };
  s0 -> s0 [0, 65535] { R3931 += 1, R3932 += 1 };
  s0 -> s2 [65, 65] { R3932 += 1 };
  s0 -> s3 [65, 65] { R3932 += 1 };
  s0 -> s1 [66, 65535] { R3932 += 1 };
  s1 -> s1 [0, 64] { R3932 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3932 += 1 };
  s1 -> s3 [65, 65] { R3932 += 1 };
  s1 -> s1 [66, 65535] { R3932 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3932 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3934 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R3933 += 1, R3934 += 1 };
  s0 -> s2 [65, 65] { R3934 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R3934 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R3934 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R3934 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3934 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R3934 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R3934 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R3934 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3936 += 1 };
  s0 -> s0 [0, 65535] { R3935 += 1, R3936 += 1 };
  s0 -> s2 [65, 65] { R3936 += 1 };
  s0 -> s3 [65, 65] { R3936 += 1 };
  s0 -> s1 [66, 65535] { R3936 += 1 };
  s1 -> s1 [0, 64] { R3936 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3936 += 1 };
  s1 -> s3 [65, 65] { R3936 += 1 };
  s1 -> s1 [66, 65535] { R3936 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3936 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R3938 += 1 };
  s0 -> s0 [0, 65535] { R3937 += 1, R3938 += 1 };
  s0 -> s1 [45, 45] { R3938 += 1 };
  s0 -> s2 [46, 46] { R3938 += 1 };
  s0 -> s1 [48, 62] { R3938 += 1 };
  s0 -> s3 [65, 65] { R3938 += 1 };
  s0 -> s1 [66, 65535] { R3938 += 1 };
  s1 -> s1 [0, 43] { R3938 += 1 };
  s1 -> s1 [45, 45] { R3938 += 1 };
  s1 -> s2 [46, 46] { R3938 += 1 };
  s1 -> s1 [48, 62] { R3938 += 1 };
  s1 -> s3 [65, 65] { R3938 += 1 };
  s1 -> s1 [66, 65535] { R3938 += 1 };
  s2 -> s1 [0, 43] { R3938 += 1 };
  s2 -> s1 [45, 45] { R3938 += 1 };
  s2 -> s2 [46, 46] { R3938 += 1 };
  s2 -> s1 [48, 62] { R3938 += 1 };
  s2 -> s3 [65, 65] { R3938 += 1 };
  s2 -> s1 [66, 114] { R3938 += 1 };
  s2 -> s8 [115, 115] { R3938 += 1 };
  s2 -> s1 [116, 65535] { R3938 += 1 };
  s3 -> s3 [0, 43] { R3938 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3938 += 1 };
  s3 -> s4 [46, 46] { R3938 += 1 };
  s3 -> s3 [48, 62] { R3938 += 1 };
  s3 -> s3 [65, 65535] { R3938 += 1 };
  s4 -> s3 [0, 43] { R3938 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3938 += 1 };
  s4 -> s4 [46, 46] { R3938 += 1 };
  s4 -> s3 [48, 62] { R3938 += 1 };
  s4 -> s3 [65, 114] { R3938 += 1 };
  s4 -> s5 [115, 115] { R3938 += 1 };
  s4 -> s3 [116, 65535] { R3938 += 1 };
  s5 -> s3 [0, 43] { R3938 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3938 += 1 };
  s5 -> s4 [46, 46] { R3938 += 1 };
  s5 -> s3 [48, 62] { R3938 += 1 };
  s5 -> s3 [65, 110] { R3938 += 1 };
  s5 -> s6 [111, 111] { R3938 += 1 };
  s5 -> s3 [112, 65535] { R3938 += 1 };
  s6 -> s3 [0, 43] { R3938 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3938 += 1 };
  s6 -> s4 [46, 46] { R3938 += 1 };
  s6 -> s3 [48, 62] { R3938 += 1 };
  s6 -> s3 [65, 98] { R3938 += 1 };
  s6 -> s7 [99, 99] { R3938 += 1 };
  s6 -> s3 [100, 65535] { R3938 += 1 };
  s7 -> s3 [0, 43] { R3938 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3938 += 1 };
  s7 -> s4 [46, 46] { R3938 += 1 };
  s7 -> s3 [48, 62] { R3938 += 1 };
  s7 -> s3 [65, 106] { R3938 += 1 };
  s7 -> s3 [108, 65535] { R3938 += 1 };
  s8 -> s1 [0, 43] { R3938 += 1 };
  s8 -> s1 [45, 45] { R3938 += 1 };
  s8 -> s2 [46, 46] { R3938 += 1 };
  s8 -> s1 [48, 62] { R3938 += 1 };
  s8 -> s3 [65, 65] { R3938 += 1 };
  s8 -> s1 [66, 110] { R3938 += 1 };
  s8 -> s9 [111, 111] { R3938 += 1 };
  s8 -> s1 [112, 65535] { R3938 += 1 };
  s9 -> s1 [0, 43] { R3938 += 1 };
  s9 -> s1 [45, 45] { R3938 += 1 };
  s9 -> s2 [46, 46] { R3938 += 1 };
  s9 -> s1 [48, 62] { R3938 += 1 };
  s9 -> s3 [65, 65] { R3938 += 1 };
  s9 -> s1 [66, 98] { R3938 += 1 };
  s9 -> s10 [99, 99] { R3938 += 1 };
  s9 -> s1 [100, 65535] { R3938 += 1 };
  s10 -> s1 [0, 43] { R3938 += 1 };
  s10 -> s1 [45, 45] { R3938 += 1 };
  s10 -> s2 [46, 46] { R3938 += 1 };
  s10 -> s1 [48, 62] { R3938 += 1 };
  s10 -> s3 [65, 65] { R3938 += 1 };
  s10 -> s1 [66, 106] { R3938 += 1 };
  s10 -> s1 [108, 65535] { R3938 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3940 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R3939 += 1, R3940 += 1 };
  s1 -> s1 [0, 65535] { R3940 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R3942 += 1 };
  s0 -> s2 [0, 65535] { R3942 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R3941 += 1, R3942 += 1 };
  s0 -> s3 [58, 58] { R3942 += 1 };
  s0 -> s1 [59, 65535] { R3942 += 1 };
  s1 -> s1 [0, 57] { R3942 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3942 += 1 };
  s1 -> s1 [59, 65535] { R3942 += 1 };
  s2 -> s1 [0, 57] { R3942 += 1 };
  s2 -> s2 [0, 65535] { R3942 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3942 += 1 };
  s2 -> s1 [59, 65535] { R3942 += 1 };
  s3 -> s3 [0, 65535] { R3942 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R3944 += 1 };
  s0 -> s0 [0, 65535] { R3943 += 1, R3944 += 1 };
  s0 -> s2 [0, 65535] { R3944 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R3944 += 1 };
  s0 -> s1 [44, 65535] { R3944 += 1 };
  s1 -> s1 [0, 42] { R3944 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3944 += 1 };
  s1 -> s1 [44, 65535] { R3944 += 1 };
  s2 -> s1 [0, 42] { R3944 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3944 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R3944 += 1 };
  s2 -> s1 [44, 65535] { R3944 += 1 };
  s3 -> s3 [0, 65535] { R3944 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3946 += 1 };
  s0 -> s2 [0, 65535] { R3946 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R3945 += 1, R3946 += 1 };
  s0 -> s3 [65, 65] { R3946 += 1 };
  s0 -> s1 [66, 65535] { R3946 += 1 };
  s1 -> s1 [0, 64] { R3946 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3946 += 1 };
  s1 -> s1 [66, 65535] { R3946 += 1 };
  s2 -> s1 [0, 64] { R3946 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3946 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R3946 += 1 };
  s2 -> s1 [66, 65535] { R3946 += 1 };
  s3 -> s3 [0, 65535] { R3946 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R3948 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R3948 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3947 += 1, R3948 += 1 };
  s0 -> s3 [91, 91] { R3948 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R3948 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R3948 += 1 };
  s1 -> s1 [0, 65535] { R3948 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3948 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R3948 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3948 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R3948 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R3948 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3948 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3950 += 1, R42 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R3949 += 1, R3950 += 1 };
  s0 -> s2 [0, 65535] { R3950 += 1, R41 += 1, R42 += 1 };
  s1 -> s4 [0, 65535] { R3950 += 1 };
  s1 -> s1 [0, 65535] { R3950 += 1, R42 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3950 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3950 += 1, R41 += 1, R42 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3950 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 65535] { R3952 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R3951 += 1, R3952 += 1 };
  s0 -> s2 [0, 65535] { R3952 += 1, R60 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R3952 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3952 += 1, R60 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3952 += 1 };
  s2 -> s2 [0, 65535] { R3952 += 1, R60 += 1, R31 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3952 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R3954 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R3953 += 1, R3954 += 1 };
  s0 -> s2 [0, 65535] { R3954 += 1, R61 += 1, R62 += 1 };
  s0 -> s3 [108, 108] { R3954 += 1, R62 += 1 };
  s0 -> s1 [109, 65535] { R3954 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R3954 += 1, R62 += 1 };
  s1 -> s13 [0, 65535] { R3954 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R3954 += 1, R62 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3954 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [108, 108] { R3954 += 1, R62 += 1 };
  s2 -> s1 [109, 65535] { R3954 += 1, R62 += 1 };
  s3 -> s1 [0, 110] { R3954 += 1, R62 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3954 += 1 };
  s3 -> s5 [111, 111] { R3954 += 1, R62 += 1 };
  s3 -> s1 [112, 65535] { R3954 += 1, R62 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3954 += 1, R62 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3954 += 1 };
  s5 -> s6 [99, 99] { R3954 += 1, R62 += 1 };
  s5 -> s1 [100, 65535] { R3954 += 1, R62 += 1 };
  s6 -> s1 [0, 96] { R3954 += 1, R62 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3954 += 1 };
  s6 -> s7 [97, 97] { R3954 += 1, R62 += 1 };
  s6 -> s1 [98, 65535] { R3954 += 1, R62 += 1 };
  s7 -> s1 [0, 107] { R3954 += 1, R62 += 1 };
  s7 -> s7 [0, 65535] { R3954 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3954 += 1, R62 += 1 };
  s7 -> s1 [109, 65535] { R3954 += 1, R62 += 1 };
  s8 -> s1 [0, 103] { R3954 += 1, R62 += 1 };
  s8 -> s8 [0, 65535] { R3954 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3954 += 1, R62 += 1 };
  s8 -> s1 [105, 65535] { R3954 += 1, R62 += 1 };
  s9 -> s1 [0, 110] { R3954 += 1, R62 += 1 };
  s9 -> s9 [0, 65535] { R3954 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3954 += 1, R62 += 1 };
  s9 -> s1 [112, 65535] { R3954 += 1, R62 += 1 };
  s10 -> s1 [0, 114] { R3954 += 1, R62 += 1 };
  s10 -> s10 [0, 65535] { R3954 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3954 += 1, R62 += 1 };
  s10 -> s1 [116, 65535] { R3954 += 1, R62 += 1 };
  s11 -> s1 [0, 115] { R3954 += 1, R62 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3954 += 1 };
  s11 -> s12 [116, 116] { R3954 += 1, R62 += 1 };
  s11 -> s1 [117, 65535] { R3954 += 1, R62 += 1 };
  s12 -> s1 [0, 65535] { R3954 += 1, R62 += 1 };
  s13 -> s13 [0, 65535] { R3954 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65535] { R3956 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R3955 += 1, R3956 += 1 };
  s0 -> s2 [0, 65535] { R3956 += 1, R64 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R3956 += 1, R63 += 1, R64 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3956 += 1, R64 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3956 += 1 };
  s2 -> s2 [0, 65535] { R3956 += 1, R64 += 1, R44 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3956 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R3958 += 1, R78 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R3957 += 1, R3958 += 1 };
  s0 -> s2 [0, 65535] { R3958 += 1, R77 += 1, R78 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3958 += 1, R78 += 1, R33 += 1 };
  s1 -> s4 [0, 65535] { R3958 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3958 += 1, R78 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R3958 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3958 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 65535] { R3960 += 1 };
  s0 -> s0 [0, 65535] { R3959 += 1, R3960 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3960 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R3962 += 1, R80 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3961 += 1, R3962 += 1 };
  s0 -> s2 [0, 65535] { R3962 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [43, 43] { R3962 += 1, R80 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R3962 += 1, R80 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R3962 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R3962 += 1, R80 += 1, R43 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3962 += 1 };
  s1 -> s3 [43, 43] { R3962 += 1, R80 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R3962 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R3962 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R3962 += 1, R80 += 1, R43 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3962 += 1, R79 += 1, R80 += 1 };
  s2 -> s3 [43, 43] { R3962 += 1, R80 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R3962 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R3962 += 1, R80 += 1, R43 += 1 };
  s3 -> s6 [0, 65535] { R3962 += 1 };
  s3 -> s3 [0, 65535] { R3962 += 1, R80 += 1, R43 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3962 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3962 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3964 += 1, R3864 += 1 };
  s0 -> s0 [0, 65535] { R3963 += 1, R3964 += 1 };
  s0 -> s2 [0, 65535] { R3964 += 1, R3863 += 1, R3864 += 1 };
  s0 -> s1 [66, 65535] { R3964 += 1, R3864 += 1 };
  s1 -> s1 [0, 64] { R3964 += 1, R3864 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3964 += 1 };
  s1 -> s1 [66, 65535] { R3964 += 1, R3864 += 1 };
  s2 -> s1 [0, 64] { R3964 += 1, R3864 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3964 += 1, R3863 += 1, R3864 += 1 };
  s2 -> s1 [66, 65535] { R3964 += 1, R3864 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R3965 += 1, R3966 += 1 };
  s0 -> s1 [0, 65535] { R3966 += 1, R3865 += 1, R3866 += 1 };
  s0 -> s2 [0, 65535] { R3966 += 1, R3866 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3966 += 1, R3865 += 1, R3866 += 1 };
  s1 -> s2 [0, 65535] { R3966 += 1, R3866 += 1, R32 += 1 };
  s2 -> s3 [0, 65535] { R3966 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3966 += 1, R3866 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R3966 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R3968 += 1, R3868 += 1 };
  s0 -> s2 [0, 65535] { R3968 += 1, R3867 += 1, R3868 += 1 };
  s0 -> s0 [0, 65535] { R3967 += 1, R3968 += 1 };
  s0 -> s1 [80, 65535] { R3968 += 1, R3868 += 1 };
  s1 -> s1 [0, 65] { R3968 += 1, R3868 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3968 += 1 };
  s1 -> s1 [80, 65535] { R3968 += 1, R3868 += 1 };
  s2 -> s1 [0, 65] { R3968 += 1, R3868 += 1 };
  s2 -> s2 [0, 65535] { R3968 += 1, R3867 += 1, R3868 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R3968 += 1, R3868 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R3970 += 1, R3870 += 1, R454 += 1 };
  s0 -> s2 [0, 65535] { R3970 += 1, R3869 += 1, R3870 += 1 };
  s0 -> s0 [0, 65535] { R3969 += 1, R3970 += 1 };
  s1 -> s1 [0, 65535] { R3970 += 1, R3870 += 1, R454 += 1 };
  s1 -> s4 [0, 65535] { R3970 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3970 += 1, R3870 += 1, R454 += 1 };
  s2 -> s2 [0, 65535] { R3970 += 1, R3869 += 1, R3870 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3970 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R3972 += 1, R3872 += 1 };
  s0 -> s2 [0, 65535] { R3972 += 1, R3872 += 1, R456 += 1 };
  s0 -> s0 [0, 65535] { R3971 += 1, R3972 += 1 };
  s0 -> s3 [0, 65535] { R3972 += 1, R3871 += 1, R3872 += 1 };
  s0 -> s1 [81, 65535] { R3972 += 1, R3872 += 1 };
  s1 -> s1 [0, 79] { R3972 += 1, R3872 += 1 };
  s1 -> s1 [0, 65535] { R3972 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R3972 += 1, R3872 += 1 };
  s2 -> s1 [0, 79] { R3972 += 1, R3872 += 1 };
  s2 -> s5 [0, 65535] { R3972 += 1 };
  s2 -> s2 [0, 65535] { R3972 += 1, R3872 += 1, R456 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R3972 += 1, R3872 += 1 };
  s3 -> s1 [0, 79] { R3972 += 1, R3872 += 1 };
  s3 -> s2 [0, 65535] { R3972 += 1, R3872 += 1, R456 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3972 += 1, R3871 += 1, R3872 += 1 };
  s3 -> s1 [81, 65535] { R3972 += 1, R3872 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3972 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R3974 += 1, R3874 += 1, R460 += 1 };
  s0 -> s0 [0, 65535] { R3973 += 1, R3974 += 1 };
  s0 -> s2 [0, 65535] { R3974 += 1, R3873 += 1, R3874 += 1 };
  s0 -> s3 [0, 65535] { R3974 += 1, R3874 += 1, R459 += 1, R460 += 1 };
  s0 -> s1 [81, 65535] { R3974 += 1, R3874 += 1, R460 += 1 };
  s1 -> s1 [0, 79] { R3974 += 1, R3874 += 1, R460 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3974 += 1, R3874 += 1 };
  s1 -> s5 [0, 65535] { R3974 += 1 };
  s1 -> s1 [81, 65535] { R3974 += 1, R3874 += 1, R460 += 1 };
  s2 -> s1 [0, 79] { R3974 += 1, R3874 += 1, R460 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3974 += 1, R3873 += 1, R3874 += 1 };
  s2 -> s3 [0, 65535] { R3974 += 1, R3874 += 1, R459 += 1, R460 += 1 };
  s2 -> s1 [81, 65535] { R3974 += 1, R3874 += 1, R460 += 1 };
  s3 -> s1 [0, 79] { R3974 += 1, R3874 += 1, R460 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3974 += 1 };
  s3 -> s3 [0, 65535] { R3974 += 1, R3874 += 1, R459 += 1, R460 += 1 };
  s3 -> s1 [81, 65535] { R3974 += 1, R3874 += 1, R460 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3974 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R3975 += 1, R3976 += 1 };
  s0 -> s1 [0, 65535] { R3976 += 1, R3875 += 1, R3876 += 1 };
  s0 -> s2 [0, 65535] { R3976 += 1, R3876 += 1, R464 += 1, R465 += 1 };
  s0 -> s3 [0, 65535] { R3976 += 1, R3876 += 1, R465 += 1, R466 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3976 += 1, R3875 += 1, R3876 += 1 };
  s1 -> s2 [0, 65535] { R3976 += 1, R3876 += 1, R464 += 1, R465 += 1 };
  s1 -> s3 [0, 65535] { R3976 += 1, R3876 += 1, R465 += 1, R466 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3976 += 1 };
  s2 -> s2 [0, 65535] { R3976 += 1, R3876 += 1, R464 += 1, R465 += 1 };
  s2 -> s3 [0, 65535] { R3976 += 1, R3876 += 1, R465 += 1, R466 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3976 += 1 };
  s3 -> s3 [0, 65535] { R3976 += 1, R3876 += 1, R465 += 1, R466 += 1 };
  s3 -> s6 [0, 65535] { R3976 += 1, R3876 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3976 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3976 += 1 };
  s6 -> s6 [0, 65535] { R3976 += 1, R3876 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s0 -> s0 [0, 65535] { R3977 += 1, R3978 += 1 };
  s0 -> s2 [0, 65535] { R3978 += 1, R3877 += 1, R3878 += 1 };
  s0 -> s3 [0, 65535] { R3978 += 1, R3878 += 1, R469 += 1, R470 += 1 };
  s0 -> s1 [91, 107] { R3978 += 1, R3878 += 1, R470 += 1 };
  s0 -> s4 [108, 108] { R3978 += 1, R3878 += 1, R470 += 1 };
  s0 -> s1 [109, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s1 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s1 -> s5 [0, 65535] { R3978 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3978 += 1, R3878 += 1 };
  s1 -> s1 [91, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s2 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3978 += 1, R3877 += 1, R3878 += 1 };
  s2 -> s3 [0, 65535] { R3978 += 1, R3878 += 1, R469 += 1, R470 += 1 };
  s2 -> s1 [91, 107] { R3978 += 1, R3878 += 1, R470 += 1 };
  s2 -> s4 [108, 108] { R3978 += 1, R3878 += 1, R470 += 1 };
  s2 -> s1 [109, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s3 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s3 -> s5 [0, 65535] { R3978 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3978 += 1, R3878 += 1, R469 += 1, R470 += 1 };
  s3 -> s1 [91, 107] { R3978 += 1, R3878 += 1, R470 += 1 };
  s3 -> s4 [108, 108] { R3978 += 1, R3878 += 1, R470 += 1 };
  s3 -> s1 [109, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s4 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s4 -> s5 [0, 65535] { R3978 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3978 += 1, R3878 += 1 };
  s4 -> s1 [91, 110] { R3978 += 1, R3878 += 1, R470 += 1 };
  s4 -> s7 [111, 111] { R3978 += 1, R3878 += 1, R470 += 1 };
  s4 -> s1 [112, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s5 -> s5 [0, 65535] { R3978 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s7 -> s7 [0, 65535] { R3978 += 1, R3878 += 1 };
  s7 -> s5 [0, 65535] { R3978 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R3978 += 1, R3878 += 1, R470 += 1 };
  s7 -> s8 [99, 99] { R3978 += 1, R3878 += 1, R470 += 1 };
  s7 -> s1 [100, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s8 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s8 -> s5 [0, 65535] { R3978 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3978 += 1, R3878 += 1 };
  s8 -> s1 [91, 96] { R3978 += 1, R3878 += 1, R470 += 1 };
  s8 -> s9 [97, 97] { R3978 += 1, R3878 += 1, R470 += 1 };
  s8 -> s1 [98, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s9 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s9 -> s5 [0, 65535] { R3978 += 1 };
  s9 -> s9 [0, 65535] { R3978 += 1, R3878 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R3978 += 1, R3878 += 1, R470 += 1 };
  s9 -> s10 [108, 108] { R3978 += 1, R3878 += 1, R470 += 1 };
  s9 -> s1 [109, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s10 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s10 -> s5 [0, 65535] { R3978 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R3978 += 1, R3878 += 1 };
  s10 -> s1 [91, 103] { R3978 += 1, R3878 += 1, R470 += 1 };
  s10 -> s11 [104, 104] { R3978 += 1, R3878 += 1, R470 += 1 };
  s10 -> s1 [105, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s11 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s11 -> s11 [0, 65535] { R3978 += 1, R3878 += 1 };
  s11 -> s5 [0, 65535] { R3978 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R3978 += 1, R3878 += 1, R470 += 1 };
  s11 -> s12 [111, 111] { R3978 += 1, R3878 += 1, R470 += 1 };
  s11 -> s1 [112, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s12 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s12 -> s5 [0, 65535] { R3978 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R3978 += 1, R3878 += 1 };
  s12 -> s1 [91, 114] { R3978 += 1, R3878 += 1, R470 += 1 };
  s12 -> s13 [115, 115] { R3978 += 1, R3878 += 1, R470 += 1 };
  s12 -> s1 [116, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s13 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s13 -> s5 [0, 65535] { R3978 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R3978 += 1, R3878 += 1 };
  s13 -> s1 [91, 115] { R3978 += 1, R3878 += 1, R470 += 1 };
  s13 -> s14 [116, 116] { R3978 += 1, R3878 += 1, R470 += 1 };
  s13 -> s1 [117, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  s14 -> s1 [0, 80] { R3978 += 1, R3878 += 1, R470 += 1 };
  s14 -> s1 [91, 65535] { R3978 += 1, R3878 += 1, R470 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R3980 += 1, R3879 += 1, R3880 += 1 };
  s0 -> s0 [0, 65535] { R3979 += 1, R3980 += 1 };
  s0 -> s2 [0, 65535] { R3980 += 1, R3880 += 1 };
  s0 -> s3 [0, 65535] { R3980 += 1, R3880 += 1, R2779 += 1, R2780 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3980 += 1, R3879 += 1, R3880 += 1 };
  s1 -> s2 [0, 65535] { R3980 += 1, R3880 += 1 };
  s1 -> s3 [0, 65535] { R3980 += 1, R3880 += 1, R2779 += 1, R2780 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3980 += 1, R3880 += 1 };
  s2 -> s5 [0, 65535] { R3980 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3980 += 1, R3880 += 1 };
  s3 -> s3 [0, 65535] { R3980 += 1, R3880 += 1, R2779 += 1, R2780 += 1 };
  s3 -> s5 [0, 65535] { R3980 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3980 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R3982 += 1, R3881 += 1, R3882 += 1 };
  s0 -> s0 [0, 65535] { R3981 += 1, R3982 += 1 };
  s0 -> s2 [0, 65535] { R3982 += 1, R3882 += 1, R3551 += 1, R3552 += 1 };
  s0 -> s3 [0, 65535] { R3982 += 1, R3882 += 1 };
  s1 -> s1 [0, 65535] { R3982 += 1, R3881 += 1, R3882 += 1 };
  s1 -> s2 [0, 65535] { R3982 += 1, R3882 += 1, R3551 += 1, R3552 += 1 };
  s1 -> s3 [0, 65535] { R3982 += 1, R3882 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R3982 += 1 };
  s2 -> s2 [0, 65535] { R3982 += 1, R3882 += 1, R3551 += 1, R3552 += 1 };
  s2 -> s3 [0, 65535] { R3982 += 1, R3882 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R3982 += 1 };
  s3 -> s3 [0, 65535] { R3982 += 1, R3882 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3982 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R3983 += 1, R3984 += 1 };
  s0 -> s1 [0, 65535] { R3984 += 1, R3884 += 1 };
  s0 -> s2 [0, 65535] { R3984 += 1, R3883 += 1, R3884 += 1 };
  s1 -> s4 [0, 65535] { R3984 += 1 };
  s1 -> s1 [0, 65535] { R3984 += 1, R3884 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3984 += 1, R3884 += 1 };
  s2 -> s2 [0, 65535] { R3984 += 1, R3883 += 1, R3884 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3984 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R3985 += 1, R3986 += 1 };
  s0 -> s1 [0, 65535] { R3986 += 1, R3885 += 1, R3886 += 1 };
  s0 -> s2 [0, 65535] { R3986 += 1, R3886 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3986 += 1, R3885 += 1, R3886 += 1 };
  s1 -> s2 [0, 65535] { R3986 += 1, R3886 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3986 += 1, R3886 += 1 };
  s2 -> s4 [0, 65535] { R3986 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3986 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R3988 += 1, R3901 += 1, R3902 += 1 };
  s0 -> s2 [0, 65535] { R3988 += 1, R3902 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R3987 += 1, R3988 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3988 += 1, R3901 += 1, R3902 += 1 };
  s1 -> s2 [0, 65535] { R3988 += 1, R3902 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3988 += 1, R3902 += 1, R34 += 1 };
  s2 -> s4 [0, 65535] { R3988 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3988 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R3990 += 1, R3904 += 1 };
  s0 -> s0 [0, 65535] { R3989 += 1, R3990 += 1 };
  s0 -> s2 [0, 65535] { R3990 += 1, R3903 += 1, R3904 += 1 };
  s0 -> s3 [65, 65] { R3990 += 1, R3904 += 1 };
  s0 -> s4 [65, 65] { R3990 += 1, R3904 += 1 };
  s0 -> s5 [80, 80] { R3990 += 1, R3904 += 1 };
  s0 -> s1 [81, 65535] { R3990 += 1, R3904 += 1 };
  s1 -> s1 [0, 64] { R3990 += 1, R3904 += 1 };
  s1 -> s3 [65, 65] { R3990 += 1, R3904 += 1 };
  s1 -> s4 [65, 65] { R3990 += 1, R3904 += 1 };
  s1 -> s5 [80, 80] { R3990 += 1, R3904 += 1 };
  s1 -> s1 [81, 65535] { R3990 += 1, R3904 += 1 };
  s2 -> s1 [0, 64] { R3990 += 1, R3904 += 1 };
  s2 -> s2 [0, 65535] { R3990 += 1, R3903 += 1, R3904 += 1 };
  s2 -> s3 [65, 65] { R3990 += 1, R3904 += 1 };
  s2 -> s4 [65, 65] { R3990 += 1, R3904 += 1 };
  s2 -> s5 [80, 80] { R3990 += 1, R3904 += 1 };
  s2 -> s1 [81, 65535] { R3990 += 1, R3904 += 1 };
  s3 -> s3 [0, 65] { R3990 += 1, R3904 += 1 };
  s3 -> s8 [80, 80] { R3990 += 1, R3904 += 1 };
  s3 -> s3 [81, 65535] { R3990 += 1, R3904 += 1 };
  s5 -> s5 [0, 64] { R3990 += 1, R3904 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3990 += 1 };
  s5 -> s7 [65, 65] { R3990 += 1, R3904 += 1 };
  s5 -> s8 [65, 65] { R3990 += 1, R3904 += 1 };
  s5 -> s5 [80, 65535] { R3990 += 1, R3904 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3990 += 1 };
  s8 -> s8 [0, 65] { R3990 += 1, R3904 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3990 += 1 };
  s8 -> s8 [80, 65535] { R3990 += 1, R3904 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3992 += 1, R3906 += 1, R453 += 1 };
  s0 -> s2 [0, 65535] { R3992 += 1, R3905 += 1, R3906 += 1 };
  s0 -> s0 [0, 65535] { R3991 += 1, R3992 += 1 };
  s0 -> s3 [65, 65] { R3992 += 1, R3906 += 1, R453 += 1 };
  s0 -> s4 [65, 65] { R3992 += 1, R3906 += 1, R453 += 1 };
  s0 -> s1 [66, 65535] { R3992 += 1, R3906 += 1, R453 += 1 };
  s1 -> s1 [0, 64] { R3992 += 1, R3906 += 1, R453 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3992 += 1 };
  s1 -> s3 [65, 65] { R3992 += 1, R3906 += 1, R453 += 1 };
  s1 -> s4 [65, 65] { R3992 += 1, R3906 += 1, R453 += 1 };
  s1 -> s1 [66, 65535] { R3992 += 1, R3906 += 1, R453 += 1 };
  s2 -> s1 [0, 64] { R3992 += 1, R3906 += 1, R453 += 1 };
  s2 -> s2 [0, 65535] { R3992 += 1, R3905 += 1, R3906 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3992 += 1, R3906 += 1, R453 += 1 };
  s2 -> s4 [65, 65] { R3992 += 1, R3906 += 1, R453 += 1 };
  s2 -> s1 [66, 65535] { R3992 += 1, R3906 += 1, R453 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3992 += 1, R3906 += 1, R453 += 1 };
  s3 -> s6 [0, 65535] { R3992 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3992 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R3994 += 1, R3908 += 1, R455 += 1 };
  s0 -> s0 [0, 65535] { R3993 += 1, R3994 += 1 };
  s0 -> s2 [0, 65535] { R3994 += 1, R3907 += 1, R3908 += 1 };
  s0 -> s3 [65, 65] { R3994 += 1, R3908 += 1, R455 += 1 };
  s0 -> s4 [65, 65] { R3994 += 1, R3908 += 1, R455 += 1 };
  s0 -> s1 [66, 65535] { R3994 += 1, R3908 += 1, R455 += 1 };
  s1 -> s1 [0, 64] { R3994 += 1, R3908 += 1, R455 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3994 += 1 };
  s1 -> s3 [65, 65] { R3994 += 1, R3908 += 1, R455 += 1 };
  s1 -> s4 [65, 65] { R3994 += 1, R3908 += 1, R455 += 1 };
  s1 -> s1 [66, 65535] { R3994 += 1, R3908 += 1, R455 += 1 };
  s2 -> s1 [0, 64] { R3994 += 1, R3908 += 1, R455 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3994 += 1, R3907 += 1, R3908 += 1 };
  s2 -> s3 [65, 65] { R3994 += 1, R3908 += 1, R455 += 1 };
  s2 -> s4 [65, 65] { R3994 += 1, R3908 += 1, R455 += 1 };
  s2 -> s1 [66, 65535] { R3994 += 1, R3908 += 1, R455 += 1 };
  s3 -> s3 [0, 65535] { R3994 += 1, R3908 += 1, R455 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3994 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3994 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3994 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s0 -> s2 [0, 65535] { R3996 += 1, R3909 += 1, R3910 += 1 };
  s0 -> s0 [0, 65535] { R3995 += 1, R3996 += 1 };
  s0 -> s3 [65, 65] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s0 -> s4 [65, 65] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s0 -> s1 [66, 65535] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 64] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3996 += 1 };
  s1 -> s3 [65, 65] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s1 -> s4 [65, 65] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [66, 65535] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [0, 64] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3996 += 1, R3909 += 1, R3910 += 1 };
  s2 -> s3 [65, 65] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s2 -> s4 [65, 65] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [66, 65535] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s3 -> s3 [0, 65535] { R3996 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3996 += 1, R3910 += 1, R457 += 1, R458 += 1 };
  s4 -> s6 [0, 65535] { R3996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3996 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s0 -> s0 [0, 65535] { R3997 += 1, R3998 += 1 };
  s0 -> s2 [0, 65535] { R3998 += 1, R3911 += 1, R3912 += 1 };
  s0 -> s3 [65, 65] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s0 -> s4 [65, 65] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s0 -> s1 [66, 65535] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 64] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 65535] { R3998 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s1 -> s4 [65, 65] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [66, 65535] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [0, 64] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3998 += 1, R3911 += 1, R3912 += 1 };
  s2 -> s3 [65, 65] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s2 -> s4 [65, 65] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [66, 65535] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s3 -> s3 [0, 65535] { R3998 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3998 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3998 += 1, R3912 += 1, R461 += 1, R462 += 1 };
  s5 -> s5 [0, 65535] { R3998 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s0 -> s0 [0, 65535] { R3999 += 1, R4000 += 1 };
  s0 -> s2 [0, 65535] { R4000 += 1, R3913 += 1, R3914 += 1 };
  s0 -> s3 [65, 65] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s0 -> s4 [65, 65] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s0 -> s1 [66, 65535] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [0, 64] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [0, 65535] { R4000 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s1 -> s4 [65, 65] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [66, 65535] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [0, 64] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s2 -> s2 [0, 65535] { R4000 += 1, R3913 += 1, R3914 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s2 -> s4 [65, 65] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [66, 65535] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R4000 += 1 };
  s4 -> s5 [0, 65535] { R4000 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4000 += 1, R3914 += 1, R467 += 1, R468 += 1 };
  s5 -> s5 [0, 65535] { R4000 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s0 -> s2 [0, 64] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s0 -> s0 [0, 65535] { R4001 += 1, R4002 += 1 };
  s0 -> s3 [0, 65535] { R4002 += 1, R3915 += 1, R3916 += 1 };
  s0 -> s4 [65, 65] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s0 -> s5 [65, 65] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s0 -> s6 [65, 65] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s0 -> s7 [65, 65] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s0 -> s1 [66, 65535] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s0 -> s2 [66, 65535] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s1 -> s1 [0, 64] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s1 -> s1 [0, 65535] { R4002 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [65, 65] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s1 -> s5 [65, 65] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s1 -> s1 [66, 65535] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s1 [0, 64] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s2 [0, 64] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s2 -> s4 [65, 65] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s5 [65, 65] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s6 [65, 65] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s2 -> s7 [65, 65] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s2 -> s1 [66, 65535] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s2 [66, 65535] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s3 -> s1 [0, 64] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s3 -> s2 [0, 64] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s3 -> s3 [0, 65535] { R4002 += 1, R3915 += 1, R3916 += 1 };
  s3 -> s4 [65, 65] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s3 -> s5 [65, 65] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s3 -> s6 [65, 65] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s3 -> s7 [65, 65] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s3 -> s1 [66, 65535] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s3 -> s2 [66, 65535] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s4 -> s4 [0, 65535] { R4002 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s5 -> s8 [0, 65535] { R4002 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R4002 += 1, R3916 += 1, R2776 += 1, R2777 += 1 };
  s7 -> s7 [0, 65535] { R4002 += 1, R3916 += 1, R2775 += 1, R2776 += 1 };
  s8 -> s8 [0, 65535] { R4002 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s0 -> s2 [0, 64] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s0 -> s0 [0, 65535] { R4003 += 1, R4004 += 1 };
  s0 -> s3 [0, 65535] { R4004 += 1, R3917 += 1, R3918 += 1 };
  s0 -> s4 [65, 65] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s0 -> s5 [65, 65] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s0 -> s6 [65, 65] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s0 -> s7 [65, 65] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s0 -> s1 [66, 65535] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s0 -> s2 [66, 65535] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s1 -> s1 [0, 64] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s1 -> s1 [0, 65535] { R4004 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [65, 65] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s1 -> s5 [65, 65] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s1 -> s1 [66, 65535] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s2 -> s1 [0, 64] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s2 -> s2 [0, 64] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s2 -> s4 [65, 65] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s2 -> s5 [65, 65] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s2 -> s6 [65, 65] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s2 -> s7 [65, 65] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s2 -> s1 [66, 65535] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s2 -> s2 [66, 65535] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s3 -> s1 [0, 64] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s3 -> s2 [0, 64] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s3 -> s3 [0, 65535] { R4004 += 1, R3917 += 1, R3918 += 1 };
  s3 -> s4 [65, 65] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s3 -> s5 [65, 65] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s3 -> s6 [65, 65] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s3 -> s7 [65, 65] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s3 -> s1 [66, 65535] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s3 -> s2 [66, 65535] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s4 -> s4 [0, 65535] { R4004 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s5 -> s8 [0, 65535] { R4004 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R4004 += 1, R3918 += 1, R3548 += 1, R3549 += 1 };
  s7 -> s7 [0, 65535] { R4004 += 1, R3918 += 1, R3547 += 1, R3548 += 1 };
  s8 -> s8 [0, 65535] { R4004 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R4006 += 1, R3920 += 1 };
  s0 -> s2 [0, 65535] { R4006 += 1, R3919 += 1, R3920 += 1 };
  s0 -> s0 [0, 65535] { R4005 += 1, R4006 += 1 };
  s0 -> s3 [65, 65] { R4006 += 1, R3920 += 1 };
  s0 -> s4 [65, 65] { R4006 += 1, R3920 += 1 };
  s0 -> s1 [66, 65535] { R4006 += 1, R3920 += 1 };
  s1 -> s1 [0, 64] { R4006 += 1, R3920 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4006 += 1 };
  s1 -> s3 [65, 65] { R4006 += 1, R3920 += 1 };
  s1 -> s4 [65, 65] { R4006 += 1, R3920 += 1 };
  s1 -> s1 [66, 65535] { R4006 += 1, R3920 += 1 };
  s2 -> s1 [0, 64] { R4006 += 1, R3920 += 1 };
  s2 -> s2 [0, 65535] { R4006 += 1, R3919 += 1, R3920 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4006 += 1, R3920 += 1 };
  s2 -> s4 [65, 65] { R4006 += 1, R3920 += 1 };
  s2 -> s1 [66, 65535] { R4006 += 1, R3920 += 1 };
  s3 -> s3 [0, 65535] { R4006 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4006 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4006 += 1, R3920 += 1 };
  s5 -> s5 [0, 65535] { R4006 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s0 -> s2 [0, 64] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s0 -> s3 [0, 65535] { R4008 += 1, R3921 += 1, R3922 += 1 };
  s0 -> s0 [0, 65535] { R4007 += 1, R4008 += 1 };
  s0 -> s4 [65, 65] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s0 -> s5 [65, 65] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s0 -> s6 [65, 65] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s0 -> s7 [65, 65] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s0 -> s2 [66, 79] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s0 -> s1 [66, 65535] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s0 -> s8 [80, 80] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s0 -> s2 [81, 65535] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s1 -> s1 [0, 64] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s1 -> s2 [0, 64] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s1 -> s4 [65, 65] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s1 -> s5 [65, 65] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s1 -> s6 [65, 65] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s1 -> s7 [65, 65] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s1 -> s2 [66, 79] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s1 -> s1 [66, 65535] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s1 -> s8 [80, 80] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s1 -> s2 [81, 65535] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s2 -> s2 [0, 64] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s2 -> s6 [65, 65] { R4008 += 1, R3922 += 1 };
  s2 -> s7 [65, 65] { R4008 += 1, R3922 += 1 };
  s2 -> s2 [66, 79] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s2 -> s2 [66, 65535] { R4008 += 1, R3922 += 1 };
  s2 -> s8 [80, 80] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s2 -> s2 [81, 65535] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s3 -> s1 [0, 64] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s3 -> s2 [0, 64] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s3 -> s3 [0, 65535] { R4008 += 1, R3921 += 1, R3922 += 1 };
  s3 -> s4 [65, 65] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s3 -> s5 [65, 65] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s3 -> s6 [65, 65] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s3 -> s7 [65, 65] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s3 -> s2 [66, 79] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s3 -> s1 [66, 65535] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s3 -> s8 [80, 80] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s3 -> s2 [81, 65535] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s4 -> s7 [0, 79] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s4 -> s4 [0, 65535] { R4008 += 1, R3922 += 1, R3857 += 1, R3858 += 1 };
  s4 -> s11 [80, 80] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s4 -> s7 [81, 65535] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s7 -> s7 [0, 79] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s7 -> s7 [0, 65535] { R4008 += 1, R3922 += 1 };
  s7 -> s11 [80, 80] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s7 -> s7 [81, 65535] { R4008 += 1, R3922 += 1, R3858 += 1, R3859 += 1 };
  s8 -> s8 [0, 64] { R4008 += 1, R3922 += 1 };
  s8 -> s8 [0, 65535] { R4008 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R4008 += 1, R3922 += 1 };
  s8 -> s11 [65, 65] { R4008 += 1, R3922 += 1 };
  s8 -> s8 [66, 65535] { R4008 += 1, R3922 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4008 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4008 += 1, R3922 += 1 };
  s11 -> s12 [0, 65535] { R4008 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4008 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R5 = R3886 && R6 = R4008 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R59 = 0 && R60 = R3886 && R61 = 0 && R62 = R3886 && R63 = 0 && R64 = R3886 && R65 = 0 && R66 = R4008 && R67 = 0 && R68 = R4008 && R69 = 0 && R70 = R4008 && R86 + R85 = 0 && R3863 = 0 && R3864 = R3886 && R3865 = 0 && R3866 = R3886 && R3867 = 0 && R3868 = R3886 && R3869 = 0 && R3870 = R3886 && R3871 = 0 && R3872 = R3886 && R3873 = 0 && R3874 = R3886 && R3875 = 0 && R3876 = R3886 && R3877 = 0 && R3878 = R3886 && R3879 = 0 && R3880 = R3886 && R3881 = 0 && R3882 = R3886 && R3883 = 0 && R3884 = R3886 && R3885 = 0 && R3887 = 0 && R3888 = R4008 && R3889 = 0 && R3890 = R4008 && R3891 = 0 && R3892 = R4008 && R3893 = 0 && R3894 = R4008 && R3895 = 0 && R3896 = R4008 && R3897 = 0 && R3898 = R4008 && R3899 = 0 && R3900 = R4008 && R3903 = 0 && R3904 = 0 && R3915 = 0 && R3916 = 0 && R3917 = 0 && R3918 = 0 && R3921 = 0 && R3922 = 0 && R3937 = 10 && R3938 = R4008 && R3939 = 10 && R3940 = R4008 && R3941 = 10 && R3942 = R4008 && R3943 = 10 && R3944 = R4008 && R3945 = 10 && R3946 = R4008 && R3947 = 10 && R3948 = R4008 && R3949 = 10 && R3950 = R4008 && R3951 = 10 && R3952 = R4008 && R3953 = 10 && R3954 = R4008 && R3955 = 10 && R3956 = R4008 && R3957 = 10 && R3958 = R4008 && R3959 = 10 && R3960 = R4008 && R3961 = 10 && R3962 = R4008 && R3963 = 10 && R3964 = R4008 && R3965 = 10 && R3966 = R4008 && R3967 = 10 && R3968 = R4008 && R3969 = 10 && R3970 = R4008 && R3971 = 10 && R3972 = R4008 && R3973 = 10 && R3974 = R4008 && R3975 = 10 && R3976 = R4008 && R3977 = 10 && R3978 = R4008 && R3979 = 10 && R3980 = R4008 && R3981 = 10 && R3982 = R4008 && R3983 = 10 && R3984 = R4008 && R3985 = 10 && R3986 = R4008 && R3987 = 10 && R3988 = R4008 && R3989 = 10 && R3990 = R4008 && R3991 = 10 && R3992 = R4008 && R3993 = 10 && R3994 = R4008 && R3995 = 10 && R3996 = R4008 && R3997 = 10 && R3998 = R4008 && R3999 = 10 && R4000 = R4008 && R4001 = 10 && R4002 = R4008 && R4003 = 10 && R4004 = R4008 && R4005 = 10 && R4006 = R4008 && R4007 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R2780 + R2777 + R3862 + R3859 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && -1*R454 + -1*R453 < 1 && R456 + R455 < 1 && 0 < R3886 && 9 < R4008 && (R454 + R453 != 0 || R466 + R463 = 0 || (R459 + R457 = 0 && R460 + R458 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R464 + R461 = 0 && R465 + R462 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R469 + R467 = 0 && R470 + R468 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R2778 + R2775 = 0 && R2779 + R2776 = 0)) && (R459 + R457 != 0 || R454 + R453 + -1*R460 + -1*R458 = 0 || R454 + R453 < 1) && (R464 + R461 != 0 || R454 + R453 + -1*R465 + -1*R462 = 0 || R454 + R453 < 1) && (R469 + R467 != 0 || R454 + R453 + -1*R470 + -1*R468 = 0 || R454 + R453 < 1) && (R2778 + R2775 != 0 || R454 + R453 + -1*R2779 + -1*R2776 = 0 || R454 + R453 < 1) && (R33 = 0 || (R77 = 0 && R78 = 0)) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R34 = 0 || (R3901 = 0 && R3902 = 0)) && (R34 = 0 || (R3905 = 0 && R3906 = 0)) && (R34 = 0 || (R3907 = 0 && R3908 = 0)) && (R34 = 0 || (R3909 = 0 && R3910 = 0)) && (R34 = 0 || (R3911 = 0 && R3912 = 0)) && (R34 = 0 || (R3913 = 0 && R3914 = 0)) && (R34 = 0 || (R3919 = 0 && R3920 = 0)) && (R37 = 0 || (R3923 = 0 && R3924 = 0)) && (R37 = 0 || (R3925 = 0 && R3926 = 0)) && (R37 = 0 || (R3927 = 0 && R3928 = 0)) && (R37 = 0 || (R3929 = 0 && R3930 = 0)) && (R37 = 0 || (R3931 = 0 && R3932 = 0)) && (R37 = 0 || (R3933 = 0 && R3934 = 0)) && (R37 = 0 || (R3935 = 0 && R3936 = 0)) && (R38 = 0 || (R81 = 0 && R82 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R94 + R91 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R459 + R457 = 0 || R454 + R453 < 1) && (R464 + R461 = 0 || R454 + R453 < 1) && (R469 + R467 = 0 || R454 + R453 < 1) && (R2778 + R2775 = 0 || R454 + R453 < 1) && (R3552 + R3549 = 0 || (R3550 + R3547 = 0 && R3551 + R3548 = 0)) && (R3552 + R3549 = 0 || (R3860 + R3857 = 0 && R3861 + R3858 = 0));
// End of Parikh automata intersection problem
