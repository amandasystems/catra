// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R14, R15, R18, R21, R24, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R453, R454, R455, R456, R457, R458, R459, R46, R460, R461, R462, R463, R464, R465, R466, R5, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R7383, R7384, R7385, R7386, R7387, R7388, R7389, R7390, R7391, R7392, R7393, R7394, R7395, R7396, R7397, R7398, R77, R7703, R7704, R7705, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R7716, R7717, R7718, R7719, R7720, R7721, R7722, R7723, R7724, R7725, R7726, R7727, R7728, R7729, R7730, R7731, R7732, R7733, R7734, R7735, R7736, R7737, R7738, R7739, R7740, R7741, R7742, R7743, R7744, R7745, R7746, R7747, R7748, R7749, R7750, R7751, R7752, R7753, R7754, R7755, R7756, R7757, R7758, R7759, R7760, R7761, R7762, R7763, R7764, R7765, R7766, R7767, R7768, R7769, R7770, R7771, R7772, R7773, R7774, R7775, R7776, R7777, R7778, R7779, R7780, R7781, R7782, R7783, R7784, R7785, R7786, R7787, R7788, R7789, R7790, R7791, R7792, R7793, R7794, R7795, R7796, R7797, R7798, R7799, R78, R7800, R7801, R7802, R7803, R7804, R7805, R7806, R7807, R7808, R7809, R7810, R7811, R7812, R7813, R7814, R7815, R7816, R7817, R7818, R7819, R7820, R7821, R7822, R7823, R7824, R7825, R7826, R7827, R7828, R7829, R7830, R7831, R7832, R7833, R7834, R7835, R7836, R7837, R7838, R7839, R7840, R7841, R7842, R7843, R7844, R7845, R7846, R7847, R7848, R7849, R7850, R7851, R7852, R7853, R7854, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [108, 108] { R68 += 1 };
  s0 -> s1 [109, 65535] { R68 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1 };
  s2 -> s1 [0, 110] { R68 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R68 += 1 };
  s2 -> s1 [112, 65535] { R68 += 1 };
  s3 -> s1 [0, 98] { R68 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R68 += 1 };
  s3 -> s1 [100, 65535] { R68 += 1 };
  s4 -> s1 [0, 96] { R68 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R68 += 1 };
  s4 -> s1 [98, 65535] { R68 += 1 };
  s5 -> s1 [0, 107] { R68 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R68 += 1 };
  s5 -> s1 [109, 65535] { R68 += 1 };
  s6 -> s1 [0, 103] { R68 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R68 += 1 };
  s6 -> s1 [105, 65535] { R68 += 1 };
  s7 -> s1 [0, 110] { R68 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R68 += 1 };
  s7 -> s1 [112, 65535] { R68 += 1 };
  s8 -> s1 [0, 114] { R68 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R68 += 1 };
  s8 -> s1 [116, 65535] { R68 += 1 };
  s9 -> s1 [0, 115] { R68 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R68 += 1 };
  s9 -> s1 [117, 65535] { R68 += 1 };
  s10 -> s1 [0, 65535] { R68 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R7733 += 1, R7734 += 1 };
  s0 -> s1 [0, 65535] { R7734 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7734 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R7735 += 1, R7736 += 1 };
  s0 -> s1 [0, 65535] { R7736 += 1, R86 += 1 };
  s1 -> s1 [0, 65535] { R7736 += 1, R86 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R7738 += 1 };
  s0 -> s2 [0, 65535] { R7738 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R7737 += 1, R7738 += 1 };
  s0 -> s1 [78, 65535] { R7738 += 1 };
  s1 -> s1 [0, 76] { R7738 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R7738 += 1 };
  s2 -> s1 [0, 76] { R7738 += 1 };
  s2 -> s2 [0, 65535] { R7738 += 1, R88 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R7738 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R7740 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R7740 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R7739 += 1, R7740 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7740 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [0, 65535] { R7740 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7740 += 1, R93 += 1, R94 += 1 };
  s2 -> s4 [0, 65535] { R7740 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7740 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R7741 += 1, R7742 += 1 };
  s0 -> s1 [0, 65535] { R7742 += 1 };
  s1 -> s1 [0, 65535] { R7742 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R7743 += 1, R7744 += 1 };
  s0 -> s1 [0, 65535] { R7744 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R7744 += 1, R99 += 1, R100 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7744 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R7744 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7744 += 1 };
  s2 -> s2 [0, 65535] { R7744 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7744 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R7745 += 1, R7746 += 1 };
  s0 -> s1 [0, 65535] { R7746 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7746 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R7769 += 1, R7770 += 1 };
  s0 -> s1 [0, 65535] { R7770 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R7770 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R7772 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R7771 += 1, R7772 += 1 };
  s0 -> s2 [65, 65] { R7772 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R7772 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R7772 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R7772 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7772 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R7772 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R7772 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R7772 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R7774 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R7773 += 1, R7774 += 1 };
  s0 -> s2 [65, 65] { R7774 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R7774 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R7774 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R7774 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7774 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R7774 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R7774 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7774 += 1, R87 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R7776 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R7775 += 1, R7776 += 1 };
  s0 -> s2 [65, 65] { R7776 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R7776 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R7776 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R7776 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7776 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R7776 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R7776 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R7776 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R7778 += 1 };
  s0 -> s0 [0, 65535] { R7777 += 1, R7778 += 1 };
  s0 -> s2 [65, 65] { R7778 += 1 };
  s0 -> s3 [65, 65] { R7778 += 1 };
  s0 -> s1 [66, 65535] { R7778 += 1 };
  s1 -> s1 [0, 64] { R7778 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7778 += 1 };
  s1 -> s3 [65, 65] { R7778 += 1 };
  s1 -> s1 [66, 65535] { R7778 += 1 };
  s2 -> s2 [0, 65535] { R7778 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R7780 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R7779 += 1, R7780 += 1 };
  s0 -> s2 [65, 65] { R7780 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R7780 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R7780 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R7780 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7780 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R7780 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R7780 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7780 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R7782 += 1 };
  s0 -> s0 [0, 65535] { R7781 += 1, R7782 += 1 };
  s0 -> s2 [65, 65] { R7782 += 1 };
  s0 -> s3 [65, 65] { R7782 += 1 };
  s0 -> s1 [66, 65535] { R7782 += 1 };
  s1 -> s1 [0, 64] { R7782 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7782 += 1 };
  s1 -> s3 [65, 65] { R7782 += 1 };
  s1 -> s1 [66, 65535] { R7782 += 1 };
  s2 -> s2 [0, 65535] { R7782 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R7784 += 1 };
  s0 -> s0 [0, 65535] { R7783 += 1, R7784 += 1 };
  s0 -> s1 [45, 45] { R7784 += 1 };
  s0 -> s2 [46, 46] { R7784 += 1 };
  s0 -> s1 [48, 62] { R7784 += 1 };
  s0 -> s3 [65, 65] { R7784 += 1 };
  s0 -> s1 [66, 65535] { R7784 += 1 };
  s1 -> s1 [0, 43] { R7784 += 1 };
  s1 -> s1 [45, 45] { R7784 += 1 };
  s1 -> s2 [46, 46] { R7784 += 1 };
  s1 -> s1 [48, 62] { R7784 += 1 };
  s1 -> s3 [65, 65] { R7784 += 1 };
  s1 -> s1 [66, 65535] { R7784 += 1 };
  s2 -> s1 [0, 43] { R7784 += 1 };
  s2 -> s1 [45, 45] { R7784 += 1 };
  s2 -> s2 [46, 46] { R7784 += 1 };
  s2 -> s1 [48, 62] { R7784 += 1 };
  s2 -> s3 [65, 65] { R7784 += 1 };
  s2 -> s1 [66, 114] { R7784 += 1 };
  s2 -> s8 [115, 115] { R7784 += 1 };
  s2 -> s1 [116, 65535] { R7784 += 1 };
  s3 -> s3 [0, 43] { R7784 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R7784 += 1 };
  s3 -> s4 [46, 46] { R7784 += 1 };
  s3 -> s3 [48, 62] { R7784 += 1 };
  s3 -> s3 [65, 65535] { R7784 += 1 };
  s4 -> s3 [0, 43] { R7784 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R7784 += 1 };
  s4 -> s4 [46, 46] { R7784 += 1 };
  s4 -> s3 [48, 62] { R7784 += 1 };
  s4 -> s3 [65, 114] { R7784 += 1 };
  s4 -> s5 [115, 115] { R7784 += 1 };
  s4 -> s3 [116, 65535] { R7784 += 1 };
  s5 -> s3 [0, 43] { R7784 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R7784 += 1 };
  s5 -> s4 [46, 46] { R7784 += 1 };
  s5 -> s3 [48, 62] { R7784 += 1 };
  s5 -> s3 [65, 110] { R7784 += 1 };
  s5 -> s6 [111, 111] { R7784 += 1 };
  s5 -> s3 [112, 65535] { R7784 += 1 };
  s6 -> s3 [0, 43] { R7784 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R7784 += 1 };
  s6 -> s4 [46, 46] { R7784 += 1 };
  s6 -> s3 [48, 62] { R7784 += 1 };
  s6 -> s3 [65, 98] { R7784 += 1 };
  s6 -> s7 [99, 99] { R7784 += 1 };
  s6 -> s3 [100, 65535] { R7784 += 1 };
  s7 -> s3 [0, 43] { R7784 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R7784 += 1 };
  s7 -> s4 [46, 46] { R7784 += 1 };
  s7 -> s3 [48, 62] { R7784 += 1 };
  s7 -> s3 [65, 106] { R7784 += 1 };
  s7 -> s3 [108, 65535] { R7784 += 1 };
  s8 -> s1 [0, 43] { R7784 += 1 };
  s8 -> s1 [45, 45] { R7784 += 1 };
  s8 -> s2 [46, 46] { R7784 += 1 };
  s8 -> s1 [48, 62] { R7784 += 1 };
  s8 -> s3 [65, 65] { R7784 += 1 };
  s8 -> s1 [66, 110] { R7784 += 1 };
  s8 -> s9 [111, 111] { R7784 += 1 };
  s8 -> s1 [112, 65535] { R7784 += 1 };
  s9 -> s1 [0, 43] { R7784 += 1 };
  s9 -> s1 [45, 45] { R7784 += 1 };
  s9 -> s2 [46, 46] { R7784 += 1 };
  s9 -> s1 [48, 62] { R7784 += 1 };
  s9 -> s3 [65, 65] { R7784 += 1 };
  s9 -> s1 [66, 98] { R7784 += 1 };
  s9 -> s10 [99, 99] { R7784 += 1 };
  s9 -> s1 [100, 65535] { R7784 += 1 };
  s10 -> s1 [0, 43] { R7784 += 1 };
  s10 -> s1 [45, 45] { R7784 += 1 };
  s10 -> s2 [46, 46] { R7784 += 1 };
  s10 -> s1 [48, 62] { R7784 += 1 };
  s10 -> s3 [65, 65] { R7784 += 1 };
  s10 -> s1 [66, 106] { R7784 += 1 };
  s10 -> s1 [108, 65535] { R7784 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R7785 += 1, R7786 += 1 };
  s0 -> s1 [0, 65535] { R7786 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7786 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R7788 += 1 };
  s0 -> s2 [0, 65535] { R7788 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R7787 += 1, R7788 += 1 };
  s0 -> s3 [58, 58] { R7788 += 1 };
  s0 -> s1 [59, 65535] { R7788 += 1 };
  s1 -> s1 [0, 57] { R7788 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R7788 += 1 };
  s1 -> s1 [59, 65535] { R7788 += 1 };
  s2 -> s1 [0, 57] { R7788 += 1 };
  s2 -> s2 [0, 65535] { R7788 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R7788 += 1 };
  s2 -> s1 [59, 65535] { R7788 += 1 };
  s3 -> s3 [0, 65535] { R7788 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R7790 += 1 };
  s0 -> s0 [0, 65535] { R7789 += 1, R7790 += 1 };
  s0 -> s2 [0, 65535] { R7790 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R7790 += 1 };
  s0 -> s1 [44, 65535] { R7790 += 1 };
  s1 -> s1 [0, 42] { R7790 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R7790 += 1 };
  s1 -> s1 [44, 65535] { R7790 += 1 };
  s2 -> s1 [0, 42] { R7790 += 1 };
  s2 -> s2 [0, 65535] { R7790 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R7790 += 1 };
  s2 -> s1 [44, 65535] { R7790 += 1 };
  s3 -> s3 [0, 65535] { R7790 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R7792 += 1 };
  s0 -> s2 [0, 65535] { R7792 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R7791 += 1, R7792 += 1 };
  s0 -> s3 [65, 65] { R7792 += 1 };
  s0 -> s1 [66, 65535] { R7792 += 1 };
  s1 -> s1 [0, 64] { R7792 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R7792 += 1 };
  s1 -> s1 [66, 65535] { R7792 += 1 };
  s2 -> s1 [0, 64] { R7792 += 1 };
  s2 -> s2 [0, 65535] { R7792 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R7792 += 1 };
  s2 -> s1 [66, 65535] { R7792 += 1 };
  s3 -> s3 [0, 65535] { R7792 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R7794 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7793 += 1, R7794 += 1 };
  s0 -> s2 [0, 65535] { R7794 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [91, 91] { R7794 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R7794 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R7794 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7794 += 1, R40 += 1 };
  s2 -> s1 [0, 90] { R7794 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7794 += 1, R39 += 1, R40 += 1 };
  s2 -> s3 [91, 91] { R7794 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R7794 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R7794 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7794 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s0 [0, 65535] { R7795 += 1, R7796 += 1 };
  s0 -> s1 [0, 65535] { R7796 += 1, R42 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R7796 += 1, R41 += 1, R42 += 1 };
  s1 -> s4 [0, 65535] { R7796 += 1 };
  s1 -> s1 [0, 65535] { R7796 += 1, R42 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7796 += 1, R42 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R7796 += 1, R41 += 1, R42 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7796 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 65535] { R7798 += 1, R59 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R7798 += 1, R60 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R7797 += 1, R7798 += 1 };
  s1 -> s1 [0, 65535] { R7798 += 1, R59 += 1, R60 += 1 };
  s1 -> s2 [0, 65535] { R7798 += 1, R60 += 1, R31 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7798 += 1, R60 += 1, R31 += 1 };
  s2 -> s3 [0, 65535] { R7798 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7798 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R7800 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R7799 += 1, R7800 += 1 };
  s0 -> s2 [0, 65535] { R7800 += 1, R61 += 1, R62 += 1 };
  s0 -> s3 [108, 108] { R7800 += 1, R62 += 1 };
  s0 -> s1 [109, 65535] { R7800 += 1, R62 += 1 };
  s1 -> s13 [0, 65535] { R7800 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7800 += 1, R62 += 1 };
  s2 -> s1 [0, 107] { R7800 += 1, R62 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7800 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [108, 108] { R7800 += 1, R62 += 1 };
  s2 -> s1 [109, 65535] { R7800 += 1, R62 += 1 };
  s3 -> s1 [0, 110] { R7800 += 1, R62 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7800 += 1 };
  s3 -> s5 [111, 111] { R7800 += 1, R62 += 1 };
  s3 -> s1 [112, 65535] { R7800 += 1, R62 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R7800 += 1, R62 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7800 += 1 };
  s5 -> s6 [99, 99] { R7800 += 1, R62 += 1 };
  s5 -> s1 [100, 65535] { R7800 += 1, R62 += 1 };
  s6 -> s1 [0, 96] { R7800 += 1, R62 += 1 };
  s6 -> s6 [0, 65535] { R7800 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R7800 += 1, R62 += 1 };
  s6 -> s1 [98, 65535] { R7800 += 1, R62 += 1 };
  s7 -> s1 [0, 107] { R7800 += 1, R62 += 1 };
  s7 -> s7 [0, 65535] { R7800 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R7800 += 1, R62 += 1 };
  s7 -> s1 [109, 65535] { R7800 += 1, R62 += 1 };
  s8 -> s1 [0, 103] { R7800 += 1, R62 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R7800 += 1 };
  s8 -> s9 [104, 104] { R7800 += 1, R62 += 1 };
  s8 -> s1 [105, 65535] { R7800 += 1, R62 += 1 };
  s9 -> s1 [0, 110] { R7800 += 1, R62 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R7800 += 1 };
  s9 -> s10 [111, 111] { R7800 += 1, R62 += 1 };
  s9 -> s1 [112, 65535] { R7800 += 1, R62 += 1 };
  s10 -> s1 [0, 114] { R7800 += 1, R62 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R7800 += 1 };
  s10 -> s11 [115, 115] { R7800 += 1, R62 += 1 };
  s10 -> s1 [116, 65535] { R7800 += 1, R62 += 1 };
  s11 -> s1 [0, 115] { R7800 += 1, R62 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R7800 += 1 };
  s11 -> s12 [116, 116] { R7800 += 1, R62 += 1 };
  s11 -> s1 [117, 65535] { R7800 += 1, R62 += 1 };
  s12 -> s1 [0, 65535] { R7800 += 1, R62 += 1 };
  s13 -> s13 [0, 65535] { R7800 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65535] { R7802 += 1, R64 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R7801 += 1, R7802 += 1 };
  s0 -> s2 [0, 65535] { R7802 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R7802 += 1, R64 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R7802 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7802 += 1, R64 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R7802 += 1, R63 += 1, R64 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7802 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R7804 += 1, R78 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R7803 += 1, R7804 += 1 };
  s0 -> s2 [0, 65535] { R7804 += 1, R77 += 1, R78 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7804 += 1, R78 += 1, R33 += 1 };
  s1 -> s4 [0, 65535] { R7804 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7804 += 1, R78 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R7804 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7804 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 65535] { R7806 += 1 };
  s0 -> s0 [0, 65535] { R7805 += 1, R7806 += 1 };
  s1 -> s1 [0, 65535] { R7806 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R7808 += 1, R80 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R7808 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R7807 += 1, R7808 += 1 };
  s0 -> s3 [43, 43] { R7808 += 1, R80 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R7808 += 1, R80 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R7808 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R7808 += 1, R80 += 1, R43 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7808 += 1 };
  s1 -> s3 [43, 43] { R7808 += 1, R80 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R7808 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R7808 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R7808 += 1, R80 += 1, R43 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7808 += 1, R79 += 1, R80 += 1 };
  s2 -> s3 [43, 43] { R7808 += 1, R80 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R7808 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R7808 += 1, R80 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R7808 += 1, R80 += 1, R43 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7808 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7808 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7808 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R7810 += 1, R7710 += 1 };
  s0 -> s2 [0, 65535] { R7810 += 1, R7709 += 1, R7710 += 1 };
  s0 -> s0 [0, 65535] { R7809 += 1, R7810 += 1 };
  s0 -> s1 [66, 65535] { R7810 += 1, R7710 += 1 };
  s1 -> s1 [0, 64] { R7810 += 1, R7710 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7810 += 1 };
  s1 -> s1 [66, 65535] { R7810 += 1, R7710 += 1 };
  s2 -> s1 [0, 64] { R7810 += 1, R7710 += 1 };
  s2 -> s2 [0, 65535] { R7810 += 1, R7709 += 1, R7710 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R7810 += 1, R7710 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R7811 += 1, R7812 += 1 };
  s0 -> s1 [0, 65535] { R7812 += 1, R7712 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R7812 += 1, R7711 += 1, R7712 += 1 };
  s1 -> s4 [0, 65535] { R7812 += 1 };
  s1 -> s1 [0, 65535] { R7812 += 1, R7712 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7812 += 1, R7712 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R7812 += 1, R7711 += 1, R7712 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7812 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R7814 += 1, R7714 += 1 };
  s0 -> s0 [0, 65535] { R7813 += 1, R7814 += 1 };
  s0 -> s2 [0, 65535] { R7814 += 1, R7713 += 1, R7714 += 1 };
  s0 -> s1 [80, 65535] { R7814 += 1, R7714 += 1 };
  s1 -> s1 [0, 65] { R7814 += 1, R7714 += 1 };
  s1 -> s1 [0, 65535] { R7814 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R7814 += 1, R7714 += 1 };
  s2 -> s1 [0, 65] { R7814 += 1, R7714 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7814 += 1, R7713 += 1, R7714 += 1 };
  s2 -> s1 [80, 65535] { R7814 += 1, R7714 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R7816 += 1, R7716 += 1, R454 += 1 };
  s0 -> s0 [0, 65535] { R7815 += 1, R7816 += 1 };
  s0 -> s2 [0, 65535] { R7816 += 1, R7715 += 1, R7716 += 1 };
  s1 -> s1 [0, 65535] { R7816 += 1, R7716 += 1, R454 += 1 };
  s1 -> s4 [0, 65535] { R7816 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7816 += 1, R7716 += 1, R454 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7816 += 1, R7715 += 1, R7716 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7816 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R7818 += 1, R7718 += 1 };
  s0 -> s0 [0, 65535] { R7817 += 1, R7818 += 1 };
  s0 -> s2 [0, 65535] { R7818 += 1, R7717 += 1, R7718 += 1 };
  s0 -> s3 [0, 65535] { R7818 += 1, R7718 += 1, R456 += 1 };
  s0 -> s1 [81, 65535] { R7818 += 1, R7718 += 1 };
  s1 -> s1 [0, 79] { R7818 += 1, R7718 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7818 += 1 };
  s1 -> s1 [81, 65535] { R7818 += 1, R7718 += 1 };
  s2 -> s1 [0, 79] { R7818 += 1, R7718 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7818 += 1, R7717 += 1, R7718 += 1 };
  s2 -> s3 [0, 65535] { R7818 += 1, R7718 += 1, R456 += 1 };
  s2 -> s1 [81, 65535] { R7818 += 1, R7718 += 1 };
  s3 -> s1 [0, 79] { R7818 += 1, R7718 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7818 += 1, R7718 += 1, R456 += 1 };
  s3 -> s5 [0, 65535] { R7818 += 1 };
  s3 -> s1 [81, 65535] { R7818 += 1, R7718 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7818 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R7820 += 1, R7720 += 1, R460 += 1 };
  s0 -> s2 [0, 65535] { R7820 += 1, R7720 += 1, R459 += 1, R460 += 1 };
  s0 -> s3 [0, 65535] { R7820 += 1, R7719 += 1, R7720 += 1 };
  s0 -> s0 [0, 65535] { R7819 += 1, R7820 += 1 };
  s0 -> s1 [81, 65535] { R7820 += 1, R7720 += 1, R460 += 1 };
  s1 -> s1 [0, 79] { R7820 += 1, R7720 += 1, R460 += 1 };
  s1 -> s5 [0, 65535] { R7820 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7820 += 1, R7720 += 1 };
  s1 -> s1 [81, 65535] { R7820 += 1, R7720 += 1, R460 += 1 };
  s2 -> s1 [0, 79] { R7820 += 1, R7720 += 1, R460 += 1 };
  s2 -> s2 [0, 65535] { R7820 += 1, R7720 += 1, R459 += 1, R460 += 1 };
  s2 -> s5 [0, 65535] { R7820 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R7820 += 1, R7720 += 1, R460 += 1 };
  s3 -> s1 [0, 79] { R7820 += 1, R7720 += 1, R460 += 1 };
  s3 -> s2 [0, 65535] { R7820 += 1, R7720 += 1, R459 += 1, R460 += 1 };
  s3 -> s3 [0, 65535] { R7820 += 1, R7719 += 1, R7720 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R7820 += 1, R7720 += 1, R460 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7820 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R7822 += 1, R7722 += 1, R465 += 1, R466 += 1 };
  s0 -> s0 [0, 65535] { R7821 += 1, R7822 += 1 };
  s0 -> s2 [0, 65535] { R7822 += 1, R7721 += 1, R7722 += 1 };
  s0 -> s3 [0, 65535] { R7822 += 1, R7722 += 1, R464 += 1, R465 += 1 };
  s1 -> s1 [0, 65535] { R7822 += 1, R7722 += 1, R465 += 1, R466 += 1 };
  s1 -> s6 [0, 65535] { R7822 += 1, R7722 += 1 };
  s1 -> s4 [0, 65535] { R7822 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7822 += 1, R7722 += 1, R465 += 1, R466 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7822 += 1, R7721 += 1, R7722 += 1 };
  s2 -> s3 [0, 65535] { R7822 += 1, R7722 += 1, R464 += 1, R465 += 1 };
  s3 -> s1 [0, 65535] { R7822 += 1, R7722 += 1, R465 += 1, R466 += 1 };
  s3 -> s4 [0, 65535] { R7822 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7822 += 1, R7722 += 1, R464 += 1, R465 += 1 };
  s4 -> s4 [0, 65535] { R7822 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7822 += 1, R7722 += 1 };
  s6 -> s4 [0, 65535] { R7822 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R7824 += 1, R7724 += 1, R7386 += 1 };
  s0 -> s2 [0, 65535] { R7824 += 1, R7723 += 1, R7724 += 1 };
  s0 -> s0 [0, 65535] { R7823 += 1, R7824 += 1 };
  s0 -> s1 [0, 65535] { R7824 += 1, R7724 += 1 };
  s0 -> s1 [91, 65535] { R7824 += 1, R7724 += 1, R7386 += 1 };
  s1 -> s1 [0, 80] { R7824 += 1, R7724 += 1, R7386 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7824 += 1, R7724 += 1 };
  s1 -> s4 [0, 65535] { R7824 += 1 };
  s1 -> s1 [91, 65535] { R7824 += 1, R7724 += 1, R7386 += 1 };
  s2 -> s1 [0, 80] { R7824 += 1, R7724 += 1, R7386 += 1 };
  s2 -> s2 [0, 65535] { R7824 += 1, R7723 += 1, R7724 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7824 += 1, R7724 += 1 };
  s2 -> s1 [91, 65535] { R7824 += 1, R7724 += 1, R7386 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7824 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R7826 += 1, R7725 += 1, R7726 += 1 };
  s0 -> s2 [0, 65535] { R7826 += 1, R7726 += 1, R7391 += 1, R7392 += 1 };
  s0 -> s0 [0, 65535] { R7825 += 1, R7826 += 1 };
  s0 -> s3 [0, 65535] { R7826 += 1, R7726 += 1, R7390 += 1, R7391 += 1 };
  s1 -> s1 [0, 65535] { R7826 += 1, R7725 += 1, R7726 += 1 };
  s1 -> s2 [0, 65535] { R7826 += 1, R7726 += 1, R7391 += 1, R7392 += 1 };
  s1 -> s3 [0, 65535] { R7826 += 1, R7726 += 1, R7390 += 1, R7391 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7826 += 1, R7726 += 1, R7391 += 1, R7392 += 1 };
  s2 -> s4 [0, 65535] { R7826 += 1 };
  s2 -> s6 [0, 65535] { R7826 += 1, R7726 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7826 += 1, R7726 += 1, R7391 += 1, R7392 += 1 };
  s3 -> s4 [0, 65535] { R7826 += 1 };
  s3 -> s3 [0, 65535] { R7826 += 1, R7726 += 1, R7390 += 1, R7391 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7826 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R7826 += 1 };
  s6 -> s6 [0, 65535] { R7826 += 1, R7726 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R7828 += 1, R7728 += 1, R7396 += 1, R7397 += 1 };
  s0 -> s0 [0, 65535] { R7827 += 1, R7828 += 1 };
  s0 -> s2 [0, 65535] { R7828 += 1, R7728 += 1, R7397 += 1, R7398 += 1 };
  s0 -> s3 [0, 65535] { R7828 += 1, R7727 += 1, R7728 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7828 += 1, R7728 += 1, R7396 += 1, R7397 += 1 };
  s1 -> s5 [0, 65535] { R7828 += 1 };
  s1 -> s2 [0, 65535] { R7828 += 1, R7728 += 1, R7397 += 1, R7398 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7828 += 1 };
  s2 -> s2 [0, 65535] { R7828 += 1, R7728 += 1, R7397 += 1, R7398 += 1 };
  s2 -> s6 [0, 65535] { R7828 += 1, R7728 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7828 += 1, R7728 += 1, R7396 += 1, R7397 += 1 };
  s3 -> s2 [0, 65535] { R7828 += 1, R7728 += 1, R7397 += 1, R7398 += 1 };
  s3 -> s3 [0, 65535] { R7828 += 1, R7727 += 1, R7728 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7828 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7828 += 1 };
  s6 -> s6 [0, 65535] { R7828 += 1, R7728 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R7830 += 1, R7730 += 1 };
  s0 -> s0 [0, 65535] { R7829 += 1, R7830 += 1 };
  s0 -> s2 [0, 65535] { R7830 += 1, R7729 += 1, R7730 += 1 };
  s1 -> s1 [0, 65535] { R7830 += 1, R7730 += 1 };
  s1 -> s4 [0, 65535] { R7830 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7830 += 1, R7730 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7830 += 1, R7729 += 1, R7730 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7830 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R7831 += 1, R7832 += 1 };
  s0 -> s1 [0, 65535] { R7832 += 1, R7731 += 1, R7732 += 1 };
  s0 -> s2 [0, 65535] { R7832 += 1, R7732 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7832 += 1, R7731 += 1, R7732 += 1 };
  s1 -> s2 [0, 65535] { R7832 += 1, R7732 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7832 += 1 };
  s2 -> s2 [0, 65535] { R7832 += 1, R7732 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7832 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R7833 += 1, R7834 += 1 };
  s0 -> s1 [0, 65535] { R7834 += 1, R7747 += 1, R7748 += 1 };
  s0 -> s2 [0, 65535] { R7834 += 1, R7748 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R7834 += 1, R7747 += 1, R7748 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7834 += 1, R7748 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7834 += 1, R7748 += 1, R34 += 1 };
  s2 -> s4 [0, 65535] { R7834 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7834 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R7836 += 1, R7750 += 1 };
  s0 -> s0 [0, 65535] { R7835 += 1, R7836 += 1 };
  s0 -> s2 [0, 65535] { R7836 += 1, R7749 += 1, R7750 += 1 };
  s0 -> s3 [65, 65] { R7836 += 1, R7750 += 1 };
  s0 -> s4 [65, 65] { R7836 += 1, R7750 += 1 };
  s0 -> s5 [80, 80] { R7836 += 1, R7750 += 1 };
  s0 -> s1 [81, 65535] { R7836 += 1, R7750 += 1 };
  s1 -> s1 [0, 64] { R7836 += 1, R7750 += 1 };
  s1 -> s3 [65, 65] { R7836 += 1, R7750 += 1 };
  s1 -> s4 [65, 65] { R7836 += 1, R7750 += 1 };
  s1 -> s5 [80, 80] { R7836 += 1, R7750 += 1 };
  s1 -> s1 [81, 65535] { R7836 += 1, R7750 += 1 };
  s2 -> s1 [0, 64] { R7836 += 1, R7750 += 1 };
  s2 -> s2 [0, 65535] { R7836 += 1, R7749 += 1, R7750 += 1 };
  s2 -> s3 [65, 65] { R7836 += 1, R7750 += 1 };
  s2 -> s4 [65, 65] { R7836 += 1, R7750 += 1 };
  s2 -> s5 [80, 80] { R7836 += 1, R7750 += 1 };
  s2 -> s1 [81, 65535] { R7836 += 1, R7750 += 1 };
  s3 -> s3 [0, 65] { R7836 += 1, R7750 += 1 };
  s3 -> s7 [80, 80] { R7836 += 1, R7750 += 1 };
  s3 -> s3 [81, 65535] { R7836 += 1, R7750 += 1 };
  s5 -> s5 [0, 64] { R7836 += 1, R7750 += 1 };
  s5 -> s5 [0, 65535] { R7836 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R7836 += 1, R7750 += 1 };
  s5 -> s8 [65, 65] { R7836 += 1, R7750 += 1 };
  s5 -> s5 [80, 65535] { R7836 += 1, R7750 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R7836 += 1, R7750 += 1 };
  s7 -> s7 [0, 65535] { R7836 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R7836 += 1, R7750 += 1 };
  s8 -> s8 [0, 65535] { R7836 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R7838 += 1, R7752 += 1, R453 += 1 };
  s0 -> s2 [0, 65535] { R7838 += 1, R7751 += 1, R7752 += 1 };
  s0 -> s0 [0, 65535] { R7837 += 1, R7838 += 1 };
  s0 -> s3 [65, 65] { R7838 += 1, R7752 += 1, R453 += 1 };
  s0 -> s4 [65, 65] { R7838 += 1, R7752 += 1, R453 += 1 };
  s0 -> s1 [66, 65535] { R7838 += 1, R7752 += 1, R453 += 1 };
  s1 -> s1 [0, 64] { R7838 += 1, R7752 += 1, R453 += 1 };
  s1 -> s1 [0, 65535] { R7838 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7838 += 1, R7752 += 1, R453 += 1 };
  s1 -> s4 [65, 65] { R7838 += 1, R7752 += 1, R453 += 1 };
  s1 -> s1 [66, 65535] { R7838 += 1, R7752 += 1, R453 += 1 };
  s2 -> s1 [0, 64] { R7838 += 1, R7752 += 1, R453 += 1 };
  s2 -> s2 [0, 65535] { R7838 += 1, R7751 += 1, R7752 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7838 += 1, R7752 += 1, R453 += 1 };
  s2 -> s4 [65, 65] { R7838 += 1, R7752 += 1, R453 += 1 };
  s2 -> s1 [66, 65535] { R7838 += 1, R7752 += 1, R453 += 1 };
  s3 -> s3 [0, 65535] { R7838 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7838 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7838 += 1, R7752 += 1, R453 += 1 };
  s5 -> s5 [0, 65535] { R7838 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R7840 += 1, R7754 += 1, R455 += 1 };
  s0 -> s2 [0, 65535] { R7840 += 1, R7753 += 1, R7754 += 1 };
  s0 -> s0 [0, 65535] { R7839 += 1, R7840 += 1 };
  s0 -> s3 [65, 65] { R7840 += 1, R7754 += 1, R455 += 1 };
  s0 -> s4 [65, 65] { R7840 += 1, R7754 += 1, R455 += 1 };
  s0 -> s1 [66, 65535] { R7840 += 1, R7754 += 1, R455 += 1 };
  s1 -> s1 [0, 64] { R7840 += 1, R7754 += 1, R455 += 1 };
  s1 -> s1 [0, 65535] { R7840 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7840 += 1, R7754 += 1, R455 += 1 };
  s1 -> s4 [65, 65] { R7840 += 1, R7754 += 1, R455 += 1 };
  s1 -> s1 [66, 65535] { R7840 += 1, R7754 += 1, R455 += 1 };
  s2 -> s1 [0, 64] { R7840 += 1, R7754 += 1, R455 += 1 };
  s2 -> s2 [0, 65535] { R7840 += 1, R7753 += 1, R7754 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7840 += 1, R7754 += 1, R455 += 1 };
  s2 -> s4 [65, 65] { R7840 += 1, R7754 += 1, R455 += 1 };
  s2 -> s1 [66, 65535] { R7840 += 1, R7754 += 1, R455 += 1 };
  s3 -> s3 [0, 65535] { R7840 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7840 += 1, R7754 += 1, R455 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7840 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7840 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s0 -> s0 [0, 65535] { R7841 += 1, R7842 += 1 };
  s0 -> s2 [0, 65535] { R7842 += 1, R7755 += 1, R7756 += 1 };
  s0 -> s3 [65, 65] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s0 -> s4 [65, 65] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s0 -> s1 [66, 65535] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 64] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7842 += 1 };
  s1 -> s3 [65, 65] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s1 -> s4 [65, 65] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [66, 65535] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [0, 64] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7842 += 1, R7755 += 1, R7756 += 1 };
  s2 -> s3 [65, 65] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s2 -> s4 [65, 65] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [66, 65535] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7842 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7842 += 1 };
  s4 -> s4 [0, 65535] { R7842 += 1, R7756 += 1, R457 += 1, R458 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7842 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s0 -> s2 [0, 65535] { R7844 += 1, R7757 += 1, R7758 += 1 };
  s0 -> s0 [0, 65535] { R7843 += 1, R7844 += 1 };
  s0 -> s3 [65, 65] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s0 -> s4 [65, 65] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s0 -> s1 [66, 65535] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 64] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 65535] { R7844 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s1 -> s4 [65, 65] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [66, 65535] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [0, 64] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s2 -> s2 [0, 65535] { R7844 += 1, R7757 += 1, R7758 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s2 -> s4 [65, 65] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [66, 65535] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s3 -> s3 [0, 65535] { R7844 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7844 += 1 };
  s4 -> s4 [0, 65535] { R7844 += 1, R7758 += 1, R461 += 1, R462 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7844 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s0 -> s0 [0, 65535] { R7845 += 1, R7846 += 1 };
  s0 -> s3 [0, 65535] { R7846 += 1, R7759 += 1, R7760 += 1 };
  s0 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s0 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s0 -> s6 [65, 65] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s7 [65, 65] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s0 -> s1 [66, 65535] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s2 [91, 107] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s0 -> s8 [108, 108] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s0 -> s2 [109, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s1 -> s1 [0, 64] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s1 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s1 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s1 -> s6 [65, 65] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s7 [65, 65] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s1 -> s1 [66, 65535] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s2 [91, 107] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s1 -> s8 [108, 108] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s1 -> s2 [109, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s2 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s2 [0, 65535] { R7846 += 1 };
  s2 -> s4 [65, 65] { R7846 += 1, R7760 += 1 };
  s2 -> s5 [65, 65] { R7846 += 1, R7760 += 1 };
  s2 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s2 -> s2 [66, 65535] { R7846 += 1, R7760 += 1 };
  s2 -> s2 [91, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s3 -> s1 [0, 64] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s3 -> s3 [0, 65535] { R7846 += 1, R7759 += 1, R7760 += 1 };
  s3 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s3 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s3 -> s6 [65, 65] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s7 [65, 65] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s3 -> s1 [66, 65535] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s2 [91, 107] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s3 -> s8 [108, 108] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s3 -> s2 [109, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s4 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s35 [0, 65535] { R7846 += 1 };
  s4 -> s4 [0, 65535] { R7846 += 1, R7760 += 1 };
  s4 -> s4 [91, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s5 -> s34 [0, 65535];
  s5 -> s5 [0, 65535] { R7846 += 1 };
  s6 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s6 -> s6 [0, 65535] { R7846 += 1, R7760 += 1, R7383 += 1, R7384 += 1 };
  s6 -> s4 [91, 107] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s6 -> s9 [108, 108] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s6 -> s4 [109, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s8 -> s8 [0, 64] { R7846 += 1, R7760 += 1 };
  s8 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s8 -> s9 [65, 65] { R7846 += 1, R7760 += 1 };
  s8 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s8 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s8 -> s10 [65, 65] { R7846 += 1, R7760 += 1 };
  s8 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s8 -> s8 [66, 65535] { R7846 += 1, R7760 += 1 };
  s8 -> s2 [91, 110] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s8 -> s11 [111, 111] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s8 -> s2 [112, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s9 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s9 -> s9 [0, 65535] { R7846 += 1, R7760 += 1 };
  s9 -> s4 [91, 110] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s9 -> s12 [111, 111] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s9 -> s4 [112, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s11 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s11 -> s11 [0, 64] { R7846 += 1, R7760 += 1 };
  s11 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s11 -> s12 [65, 65] { R7846 += 1, R7760 += 1 };
  s11 -> s13 [65, 65] { R7846 += 1, R7760 += 1 };
  s11 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s11 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s11 -> s11 [66, 65535] { R7846 += 1, R7760 += 1 };
  s11 -> s2 [91, 98] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s11 -> s14 [99, 99] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s11 -> s2 [100, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s12 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s12 -> s12 [0, 65535] { R7846 += 1, R7760 += 1 };
  s12 -> s4 [91, 98] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s12 -> s16 [99, 99] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s12 -> s4 [100, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s14 -> s14 [0, 64] { R7846 += 1, R7760 += 1 };
  s14 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s14 -> s15 [65, 65] { R7846 += 1, R7760 += 1 };
  s14 -> s16 [65, 65] { R7846 += 1, R7760 += 1 };
  s14 -> s17 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s14 -> s18 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s14 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s14 -> s14 [66, 65535] { R7846 += 1, R7760 += 1 };
  s14 -> s2 [91, 96] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s14 -> s19 [97, 97] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s14 -> s2 [98, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s16 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s16 -> s16 [0, 65535] { R7846 += 1, R7760 += 1 };
  s16 -> s4 [91, 96] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s16 -> s18 [97, 97] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s16 -> s4 [98, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s18 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s18 -> s18 [0, 65535] { R7846 += 1, R7760 += 1 };
  s18 -> s4 [91, 107] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s18 -> s22 [108, 108] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s18 -> s4 [109, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s19 -> s19 [0, 64] { R7846 += 1, R7760 += 1 };
  s19 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s19 -> s17 [65, 65] { R7846 += 1, R7760 += 1 };
  s19 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s19 -> s18 [65, 65] { R7846 += 1, R7760 += 1 };
  s19 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s19 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s19 -> s19 [66, 65535] { R7846 += 1, R7760 += 1 };
  s19 -> s2 [91, 107] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s19 -> s20 [108, 108] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s19 -> s2 [109, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s20 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s20 -> s20 [0, 64] { R7846 += 1, R7760 += 1 };
  s20 -> s21 [65, 65] { R7846 += 1, R7760 += 1 };
  s20 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s20 -> s22 [65, 65] { R7846 += 1, R7760 += 1 };
  s20 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s20 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s20 -> s20 [66, 65535] { R7846 += 1, R7760 += 1 };
  s20 -> s2 [91, 103] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s20 -> s23 [104, 104] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s20 -> s2 [105, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s22 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s22 -> s22 [0, 65535] { R7846 += 1, R7760 += 1 };
  s22 -> s4 [91, 103] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s22 -> s25 [104, 104] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s22 -> s4 [105, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s23 -> s23 [0, 64] { R7846 += 1, R7760 += 1 };
  s23 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s23 -> s24 [65, 65] { R7846 += 1, R7760 += 1 };
  s23 -> s25 [65, 65] { R7846 += 1, R7760 += 1 };
  s23 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s23 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s23 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s23 -> s23 [66, 65535] { R7846 += 1, R7760 += 1 };
  s23 -> s2 [91, 110] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s23 -> s26 [111, 111] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s23 -> s2 [112, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s25 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s25 -> s25 [0, 65535] { R7846 += 1, R7760 += 1 };
  s25 -> s4 [91, 110] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s25 -> s28 [111, 111] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s25 -> s4 [112, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s26 -> s26 [0, 64] { R7846 += 1, R7760 += 1 };
  s26 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s26 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s26 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s26 -> s27 [65, 65] { R7846 += 1, R7760 += 1 };
  s26 -> s28 [65, 65] { R7846 += 1, R7760 += 1 };
  s26 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s26 -> s26 [66, 65535] { R7846 += 1, R7760 += 1 };
  s26 -> s2 [91, 114] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s26 -> s29 [115, 115] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s26 -> s2 [116, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s28 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s28 -> s28 [0, 65535] { R7846 += 1, R7760 += 1 };
  s28 -> s4 [91, 114] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s28 -> s30 [115, 115] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s28 -> s4 [116, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s29 -> s29 [0, 64] { R7846 += 1, R7760 += 1 };
  s29 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s29 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s29 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s29 -> s30 [65, 65] { R7846 += 1, R7760 += 1 };
  s29 -> s31 [65, 65] { R7846 += 1, R7760 += 1 };
  s29 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s29 -> s29 [66, 65535] { R7846 += 1, R7760 += 1 };
  s29 -> s2 [91, 115] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s29 -> s32 [116, 116] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s29 -> s2 [117, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s30 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s30 -> s30 [0, 65535] { R7846 += 1, R7760 += 1 };
  s30 -> s4 [91, 115] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s30 -> s33 [116, 116] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s30 -> s4 [117, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s32 -> s2 [0, 64] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s32 -> s4 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s32 -> s5 [65, 65] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s32 -> s2 [66, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s32 -> s2 [91, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s33 -> s4 [0, 80] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s33 -> s4 [91, 65535] { R7846 += 1, R7760 += 1, R7384 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R7846 += 1 };
  accepting s4, s34, s5, s2, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s0 -> s0 [0, 65535] { R7847 += 1, R7848 += 1 };
  s0 -> s2 [0, 65535] { R7848 += 1, R7761 += 1, R7762 += 1 };
  s0 -> s3 [65, 65] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s0 -> s4 [65, 65] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s0 -> s1 [66, 65535] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s1 -> s1 [0, 64] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s1 -> s1 [0, 65535] { R7848 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s1 -> s4 [65, 65] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s1 -> s1 [66, 65535] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s2 -> s1 [0, 64] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7848 += 1, R7761 += 1, R7762 += 1 };
  s2 -> s3 [65, 65] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s2 -> s4 [65, 65] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s2 -> s1 [66, 65535] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s3 -> s6 [0, 65535] { R7848 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7848 += 1, R7762 += 1, R7387 += 1, R7388 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7848 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7848 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s0 -> s2 [0, 65535] { R7850 += 1, R7763 += 1, R7764 += 1 };
  s0 -> s0 [0, 65535] { R7849 += 1, R7850 += 1 };
  s0 -> s3 [65, 65] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s0 -> s4 [65, 65] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s0 -> s1 [66, 65535] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s1 -> s1 [0, 64] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7850 += 1 };
  s1 -> s3 [65, 65] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s1 -> s4 [65, 65] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s1 -> s1 [66, 65535] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s2 -> s1 [0, 64] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7850 += 1, R7763 += 1, R7764 += 1 };
  s2 -> s3 [65, 65] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s2 -> s4 [65, 65] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s2 -> s1 [66, 65535] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s3 -> s3 [0, 65535] { R7850 += 1, R7764 += 1, R7393 += 1, R7394 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7850 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7850 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7850 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R7852 += 1, R7766 += 1 };
  s0 -> s0 [0, 65535] { R7851 += 1, R7852 += 1 };
  s0 -> s2 [0, 65535] { R7852 += 1, R7765 += 1, R7766 += 1 };
  s0 -> s3 [65, 65] { R7852 += 1, R7766 += 1 };
  s0 -> s4 [65, 65] { R7852 += 1, R7766 += 1 };
  s0 -> s1 [66, 65535] { R7852 += 1, R7766 += 1 };
  s1 -> s1 [0, 64] { R7852 += 1, R7766 += 1 };
  s1 -> s1 [0, 65535] { R7852 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7852 += 1, R7766 += 1 };
  s1 -> s4 [65, 65] { R7852 += 1, R7766 += 1 };
  s1 -> s1 [66, 65535] { R7852 += 1, R7766 += 1 };
  s2 -> s1 [0, 64] { R7852 += 1, R7766 += 1 };
  s2 -> s2 [0, 65535] { R7852 += 1, R7765 += 1, R7766 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7852 += 1, R7766 += 1 };
  s2 -> s4 [65, 65] { R7852 += 1, R7766 += 1 };
  s2 -> s1 [66, 65535] { R7852 += 1, R7766 += 1 };
  s3 -> s3 [0, 65535] { R7852 += 1, R7766 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7852 += 1 };
  s4 -> s4 [0, 65535] { R7852 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7852 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s0 -> s2 [0, 64] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s0 -> s0 [0, 65535] { R7853 += 1, R7854 += 1 };
  s0 -> s3 [0, 65535] { R7854 += 1, R7767 += 1, R7768 += 1 };
  s0 -> s4 [65, 65] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s0 -> s5 [65, 65] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s0 -> s6 [65, 65] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s0 -> s7 [65, 65] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s0 -> s2 [66, 79] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s0 -> s1 [66, 65535] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s0 -> s8 [80, 80] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s0 -> s2 [81, 65535] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s1 -> s1 [0, 64] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s1 -> s2 [0, 64] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s1 -> s4 [65, 65] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s1 -> s5 [65, 65] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s1 -> s6 [65, 65] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s1 -> s7 [65, 65] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s1 -> s2 [66, 79] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s1 -> s1 [66, 65535] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s1 -> s8 [80, 80] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s1 -> s2 [81, 65535] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s2 -> s2 [0, 64] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s2 -> s4 [65, 65] { R7854 += 1, R7768 += 1 };
  s2 -> s6 [65, 65] { R7854 += 1, R7768 += 1 };
  s2 -> s2 [66, 79] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s2 -> s2 [66, 65535] { R7854 += 1, R7768 += 1 };
  s2 -> s8 [80, 80] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s2 -> s2 [81, 65535] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s3 -> s1 [0, 64] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s3 -> s2 [0, 64] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s3 -> s3 [0, 65535] { R7854 += 1, R7767 += 1, R7768 += 1 };
  s3 -> s4 [65, 65] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s3 -> s5 [65, 65] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s3 -> s6 [65, 65] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s3 -> s7 [65, 65] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s3 -> s2 [66, 79] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s3 -> s1 [66, 65535] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s3 -> s8 [80, 80] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s3 -> s2 [81, 65535] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s4 -> s4 [0, 79] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s4 -> s4 [0, 65535] { R7854 += 1, R7768 += 1 };
  s4 -> s11 [80, 80] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s4 -> s4 [81, 65535] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s7 -> s4 [0, 79] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s7 -> s7 [0, 65535] { R7854 += 1, R7768 += 1, R7703 += 1, R7704 += 1 };
  s7 -> s11 [80, 80] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s7 -> s4 [81, 65535] { R7854 += 1, R7768 += 1, R7704 += 1, R7705 += 1 };
  s8 -> s8 [0, 64] { R7854 += 1, R7768 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7854 += 1 };
  s8 -> s10 [65, 65] { R7854 += 1, R7768 += 1 };
  s8 -> s11 [65, 65] { R7854 += 1, R7768 += 1 };
  s8 -> s8 [66, 65535] { R7854 += 1, R7768 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7854 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7854 += 1, R7768 += 1 };
  s11 -> s12 [0, 65535] { R7854 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7854 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R5 = R7732 && R6 = R7854 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R59 = 0 && R60 = R7732 && R61 = 0 && R62 = R7732 && R63 = 0 && R64 = R7732 && R65 = 0 && R66 = R7854 && R67 = 0 && R68 = R7854 && R69 = 0 && R70 = R7854 && R86 + R85 = 0 && R7709 = 0 && R7710 = R7732 && R7711 = 0 && R7712 = R7732 && R7713 = 0 && R7714 = R7732 && R7715 = 0 && R7716 = R7732 && R7717 = 0 && R7718 = R7732 && R7719 = 0 && R7720 = R7732 && R7721 = 0 && R7722 = R7732 && R7723 = 0 && R7724 = R7732 && R7725 = 0 && R7726 = R7732 && R7727 = 0 && R7728 = R7732 && R7729 = 0 && R7730 = R7732 && R7731 = 0 && R7733 = 0 && R7734 = R7854 && R7735 = 0 && R7736 = R7854 && R7737 = 0 && R7738 = R7854 && R7739 = 0 && R7740 = R7854 && R7741 = 0 && R7742 = R7854 && R7743 = 0 && R7744 = R7854 && R7745 = 0 && R7746 = R7854 && R7749 = 0 && R7750 = 0 && R7759 = 0 && R7760 = 0 && R7767 = 0 && R7768 = 0 && R7783 = 10 && R7784 = R7854 && R7785 = 10 && R7786 = R7854 && R7787 = 10 && R7788 = R7854 && R7789 = 10 && R7790 = R7854 && R7791 = 10 && R7792 = R7854 && R7793 = 10 && R7794 = R7854 && R7795 = 10 && R7796 = R7854 && R7797 = 10 && R7798 = R7854 && R7799 = 10 && R7800 = R7854 && R7801 = 10 && R7802 = R7854 && R7803 = 10 && R7804 = R7854 && R7805 = 10 && R7806 = R7854 && R7807 = 10 && R7808 = R7854 && R7809 = 10 && R7810 = R7854 && R7811 = 10 && R7812 = R7854 && R7813 = 10 && R7814 = R7854 && R7815 = 10 && R7816 = R7854 && R7817 = 10 && R7818 = R7854 && R7819 = 10 && R7820 = R7854 && R7821 = 10 && R7822 = R7854 && R7823 = 10 && R7824 = R7854 && R7825 = 10 && R7826 = R7854 && R7827 = 10 && R7828 = R7854 && R7829 = 10 && R7830 = R7854 && R7831 = 10 && R7832 = R7854 && R7833 = 10 && R7834 = R7854 && R7835 = 10 && R7836 = R7854 && R7837 = 10 && R7838 = R7854 && R7839 = 10 && R7840 = R7854 && R7841 = 10 && R7842 = R7854 && R7843 = 10 && R7844 = R7854 && R7845 = 10 && R7846 = R7854 && R7847 = 10 && R7848 = R7854 && R7849 = 10 && R7850 = R7854 && R7851 = 10 && R7852 = R7854 && R7853 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R7392 + R7389 + R7708 + R7705 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && -1*R454 + -1*R453 < 1 && R456 + R455 < 1 && 0 < R7732 && 9 < R7854 && (R454 + R453 != 0 || R466 + R463 = 0 || (R459 + R457 = 0 && R460 + R458 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R464 + R461 = 0 && R465 + R462 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R7385 + R7383 = 0 && R7386 + R7384 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R7390 + R7387 = 0 && R7391 + R7388 = 0)) && (R459 + R457 != 0 || R454 + R453 + -1*R460 + -1*R458 = 0 || R454 + R453 < 1) && (R464 + R461 != 0 || R454 + R453 + -1*R465 + -1*R462 = 0 || R454 + R453 < 1) && (R7385 + R7383 != 0 || R454 + R453 + -1*R7386 + -1*R7384 = 0 || R454 + R453 < 1) && (R7390 + R7387 != 0 || R454 + R453 + -1*R7391 + -1*R7388 = 0 || R454 + R453 < 1) && (R33 = 0 || (R77 = 0 && R78 = 0)) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R34 = 0 || (R7747 = 0 && R7748 = 0)) && (R34 = 0 || (R7751 = 0 && R7752 = 0)) && (R34 = 0 || (R7753 = 0 && R7754 = 0)) && (R34 = 0 || (R7755 = 0 && R7756 = 0)) && (R34 = 0 || (R7757 = 0 && R7758 = 0)) && (R34 = 0 || (R7761 = 0 && R7762 = 0)) && (R34 = 0 || (R7763 = 0 && R7764 = 0)) && (R34 = 0 || (R7765 = 0 && R7766 = 0)) && (R37 = 0 || (R7769 = 0 && R7770 = 0)) && (R37 = 0 || (R7771 = 0 && R7772 = 0)) && (R37 = 0 || (R7773 = 0 && R7774 = 0)) && (R37 = 0 || (R7775 = 0 && R7776 = 0)) && (R37 = 0 || (R7777 = 0 && R7778 = 0)) && (R37 = 0 || (R7779 = 0 && R7780 = 0)) && (R37 = 0 || (R7781 = 0 && R7782 = 0)) && (R38 = 0 || (R81 = 0 && R82 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R94 + R91 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R459 + R457 = 0 || R454 + R453 < 1) && (R464 + R461 = 0 || R454 + R453 < 1) && (R7385 + R7383 = 0 || R454 + R453 < 1) && (R7390 + R7387 = 0 || R454 + R453 < 1) && (R7398 + R7395 = 0 || (R7396 + R7393 = 0 && R7397 + R7394 = 0)) && (R7398 + R7395 = 0 || (R7706 + R7703 = 0 && R7707 + R7704 = 0));
// End of Parikh automata intersection problem
