// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R10000, R10001, R10002, R10003, R10004, R10005, R10006, R14, R15, R18, R21, R24, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R453, R454, R455, R456, R457, R458, R459, R46, R460, R461, R462, R463, R464, R465, R466, R5, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R7383, R7384, R7385, R7386, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R9691, R9692, R9693, R9694, R9695, R9696, R9697, R9698, R9699, R97, R9700, R9701, R9702, R98, R9855, R9856, R9857, R9858, R9859, R9860, R9861, R9862, R9863, R9864, R9865, R9866, R9867, R9868, R9869, R9870, R9871, R9872, R9873, R9874, R9875, R9876, R9877, R9878, R9879, R9880, R9881, R9882, R9883, R9884, R9885, R9886, R9887, R9888, R9889, R9890, R9891, R9892, R9893, R9894, R9895, R9896, R9897, R9898, R9899, R99, R9900, R9901, R9902, R9903, R9904, R9905, R9906, R9907, R9908, R9909, R9910, R9911, R9912, R9913, R9914, R9915, R9916, R9917, R9918, R9919, R9920, R9921, R9922, R9923, R9924, R9925, R9926, R9927, R9928, R9929, R9930, R9931, R9932, R9933, R9934, R9935, R9936, R9937, R9938, R9939, R9940, R9941, R9942, R9943, R9944, R9945, R9946, R9947, R9948, R9949, R9950, R9951, R9952, R9953, R9954, R9955, R9956, R9957, R9958, R9959, R9960, R9961, R9962, R9963, R9964, R9965, R9966, R9967, R9968, R9969, R9970, R9971, R9972, R9973, R9974, R9975, R9976, R9977, R9978, R9979, R9980, R9981, R9982, R9983, R9984, R9985, R9986, R9987, R9988, R9989, R9990, R9991, R9992, R9993, R9994, R9995, R9996, R9997, R9998, R9999;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [108, 108] { R68 += 1 };
  s0 -> s1 [109, 65535] { R68 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1 };
  s2 -> s1 [0, 110] { R68 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R68 += 1 };
  s2 -> s1 [112, 65535] { R68 += 1 };
  s3 -> s1 [0, 98] { R68 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R68 += 1 };
  s3 -> s1 [100, 65535] { R68 += 1 };
  s4 -> s1 [0, 96] { R68 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R68 += 1 };
  s4 -> s1 [98, 65535] { R68 += 1 };
  s5 -> s1 [0, 107] { R68 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R68 += 1 };
  s5 -> s1 [109, 65535] { R68 += 1 };
  s6 -> s1 [0, 103] { R68 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R68 += 1 };
  s6 -> s1 [105, 65535] { R68 += 1 };
  s7 -> s1 [0, 110] { R68 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R68 += 1 };
  s7 -> s1 [112, 65535] { R68 += 1 };
  s8 -> s1 [0, 114] { R68 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R68 += 1 };
  s8 -> s1 [116, 65535] { R68 += 1 };
  s9 -> s1 [0, 115] { R68 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R68 += 1 };
  s9 -> s1 [117, 65535] { R68 += 1 };
  s10 -> s1 [0, 65535] { R68 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R9886 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R9885 += 1, R9886 += 1 };
  s1 -> s1 [0, 65535] { R9886 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R9887 += 1, R9888 += 1 };
  s0 -> s1 [0, 65535] { R9888 += 1, R86 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9888 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R9890 += 1 };
  s0 -> s0 [0, 65535] { R9889 += 1, R9890 += 1 };
  s0 -> s2 [0, 65535] { R9890 += 1, R88 += 1 };
  s0 -> s1 [78, 65535] { R9890 += 1 };
  s1 -> s1 [0, 76] { R9890 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R9890 += 1 };
  s2 -> s1 [0, 76] { R9890 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9890 += 1, R88 += 1 };
  s2 -> s1 [78, 65535] { R9890 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R9892 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R9891 += 1, R9892 += 1 };
  s0 -> s2 [0, 65535] { R9892 += 1, R92 += 1, R93 += 1 };
  s1 -> s1 [0, 65535] { R9892 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [0, 65535] { R9892 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9892 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9892 += 1, R92 += 1, R93 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9892 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R9893 += 1, R9894 += 1 };
  s0 -> s1 [0, 65535] { R9894 += 1 };
  s1 -> s1 [0, 65535] { R9894 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9896 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R9896 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R9895 += 1, R9896 += 1 };
  s1 -> s1 [0, 65535] { R9896 += 1, R98 += 1, R99 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9896 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535] { R9896 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9896 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535] { R9896 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9898 += 1 };
  s0 -> s0 [0, 65535] { R9897 += 1, R9898 += 1 };
  s1 -> s1 [0, 65535] { R9898 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R9921 += 1, R9922 += 1 };
  s0 -> s1 [0, 65535] { R9922 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9922 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R9924 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R9923 += 1, R9924 += 1 };
  s0 -> s2 [65, 65] { R9924 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R9924 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R9924 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R9924 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9924 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R9924 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R9924 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R9924 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R9926 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R9925 += 1, R9926 += 1 };
  s0 -> s2 [65, 65] { R9926 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R9926 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R9926 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R9926 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9926 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R9926 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R9926 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9926 += 1, R87 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R9928 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R9927 += 1, R9928 += 1 };
  s0 -> s2 [65, 65] { R9928 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R9928 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R9928 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R9928 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9928 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R9928 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R9928 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9928 += 1, R89 += 1, R90 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R9930 += 1 };
  s0 -> s0 [0, 65535] { R9929 += 1, R9930 += 1 };
  s0 -> s2 [65, 65] { R9930 += 1 };
  s0 -> s3 [65, 65] { R9930 += 1 };
  s0 -> s1 [66, 65535] { R9930 += 1 };
  s1 -> s1 [0, 64] { R9930 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9930 += 1 };
  s1 -> s3 [65, 65] { R9930 += 1 };
  s1 -> s1 [66, 65535] { R9930 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9930 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R9932 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R9931 += 1, R9932 += 1 };
  s0 -> s2 [65, 65] { R9932 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R9932 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R9932 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R9932 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9932 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R9932 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R9932 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R9932 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R9934 += 1 };
  s0 -> s0 [0, 65535] { R9933 += 1, R9934 += 1 };
  s0 -> s2 [65, 65] { R9934 += 1 };
  s0 -> s3 [65, 65] { R9934 += 1 };
  s0 -> s1 [66, 65535] { R9934 += 1 };
  s1 -> s1 [0, 64] { R9934 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9934 += 1 };
  s1 -> s3 [65, 65] { R9934 += 1 };
  s1 -> s1 [66, 65535] { R9934 += 1 };
  s2 -> s2 [0, 65535] { R9934 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R9936 += 1 };
  s0 -> s0 [0, 65535] { R9935 += 1, R9936 += 1 };
  s0 -> s1 [45, 45] { R9936 += 1 };
  s0 -> s2 [46, 46] { R9936 += 1 };
  s0 -> s1 [48, 62] { R9936 += 1 };
  s0 -> s3 [65, 65] { R9936 += 1 };
  s0 -> s1 [66, 65535] { R9936 += 1 };
  s1 -> s1 [0, 43] { R9936 += 1 };
  s1 -> s1 [45, 45] { R9936 += 1 };
  s1 -> s2 [46, 46] { R9936 += 1 };
  s1 -> s1 [48, 62] { R9936 += 1 };
  s1 -> s3 [65, 65] { R9936 += 1 };
  s1 -> s1 [66, 65535] { R9936 += 1 };
  s2 -> s1 [0, 43] { R9936 += 1 };
  s2 -> s1 [45, 45] { R9936 += 1 };
  s2 -> s2 [46, 46] { R9936 += 1 };
  s2 -> s1 [48, 62] { R9936 += 1 };
  s2 -> s3 [65, 65] { R9936 += 1 };
  s2 -> s1 [66, 114] { R9936 += 1 };
  s2 -> s8 [115, 115] { R9936 += 1 };
  s2 -> s1 [116, 65535] { R9936 += 1 };
  s3 -> s3 [0, 43] { R9936 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R9936 += 1 };
  s3 -> s4 [46, 46] { R9936 += 1 };
  s3 -> s3 [48, 62] { R9936 += 1 };
  s3 -> s3 [65, 65535] { R9936 += 1 };
  s4 -> s3 [0, 43] { R9936 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R9936 += 1 };
  s4 -> s4 [46, 46] { R9936 += 1 };
  s4 -> s3 [48, 62] { R9936 += 1 };
  s4 -> s3 [65, 114] { R9936 += 1 };
  s4 -> s5 [115, 115] { R9936 += 1 };
  s4 -> s3 [116, 65535] { R9936 += 1 };
  s5 -> s3 [0, 43] { R9936 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R9936 += 1 };
  s5 -> s4 [46, 46] { R9936 += 1 };
  s5 -> s3 [48, 62] { R9936 += 1 };
  s5 -> s3 [65, 110] { R9936 += 1 };
  s5 -> s6 [111, 111] { R9936 += 1 };
  s5 -> s3 [112, 65535] { R9936 += 1 };
  s6 -> s3 [0, 43] { R9936 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R9936 += 1 };
  s6 -> s4 [46, 46] { R9936 += 1 };
  s6 -> s3 [48, 62] { R9936 += 1 };
  s6 -> s3 [65, 98] { R9936 += 1 };
  s6 -> s7 [99, 99] { R9936 += 1 };
  s6 -> s3 [100, 65535] { R9936 += 1 };
  s7 -> s3 [0, 43] { R9936 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R9936 += 1 };
  s7 -> s4 [46, 46] { R9936 += 1 };
  s7 -> s3 [48, 62] { R9936 += 1 };
  s7 -> s3 [65, 106] { R9936 += 1 };
  s7 -> s3 [108, 65535] { R9936 += 1 };
  s8 -> s1 [0, 43] { R9936 += 1 };
  s8 -> s1 [45, 45] { R9936 += 1 };
  s8 -> s2 [46, 46] { R9936 += 1 };
  s8 -> s1 [48, 62] { R9936 += 1 };
  s8 -> s3 [65, 65] { R9936 += 1 };
  s8 -> s1 [66, 110] { R9936 += 1 };
  s8 -> s9 [111, 111] { R9936 += 1 };
  s8 -> s1 [112, 65535] { R9936 += 1 };
  s9 -> s1 [0, 43] { R9936 += 1 };
  s9 -> s1 [45, 45] { R9936 += 1 };
  s9 -> s2 [46, 46] { R9936 += 1 };
  s9 -> s1 [48, 62] { R9936 += 1 };
  s9 -> s3 [65, 65] { R9936 += 1 };
  s9 -> s1 [66, 98] { R9936 += 1 };
  s9 -> s10 [99, 99] { R9936 += 1 };
  s9 -> s1 [100, 65535] { R9936 += 1 };
  s10 -> s1 [0, 43] { R9936 += 1 };
  s10 -> s1 [45, 45] { R9936 += 1 };
  s10 -> s2 [46, 46] { R9936 += 1 };
  s10 -> s1 [48, 62] { R9936 += 1 };
  s10 -> s3 [65, 65] { R9936 += 1 };
  s10 -> s1 [66, 106] { R9936 += 1 };
  s10 -> s1 [108, 65535] { R9936 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R9937 += 1, R9938 += 1 };
  s0 -> s1 [0, 65535] { R9938 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9938 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R9940 += 1 };
  s0 -> s0 [0, 65535] { R9939 += 1, R9940 += 1 };
  s0 -> s2 [0, 65535] { R9940 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R9940 += 1 };
  s0 -> s1 [59, 65535] { R9940 += 1 };
  s1 -> s1 [0, 57] { R9940 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R9940 += 1 };
  s1 -> s1 [59, 65535] { R9940 += 1 };
  s2 -> s1 [0, 57] { R9940 += 1 };
  s2 -> s2 [0, 65535] { R9940 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R9940 += 1 };
  s2 -> s1 [59, 65535] { R9940 += 1 };
  s3 -> s3 [0, 65535] { R9940 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R9942 += 1 };
  s0 -> s0 [0, 65535] { R9941 += 1, R9942 += 1 };
  s0 -> s2 [0, 65535] { R9942 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R9942 += 1 };
  s0 -> s1 [44, 65535] { R9942 += 1 };
  s1 -> s1 [0, 42] { R9942 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R9942 += 1 };
  s1 -> s1 [44, 65535] { R9942 += 1 };
  s2 -> s1 [0, 42] { R9942 += 1 };
  s2 -> s2 [0, 65535] { R9942 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R9942 += 1 };
  s2 -> s1 [44, 65535] { R9942 += 1 };
  s3 -> s3 [0, 65535] { R9942 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R9944 += 1 };
  s0 -> s0 [0, 65535] { R9943 += 1, R9944 += 1 };
  s0 -> s2 [0, 65535] { R9944 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R9944 += 1 };
  s0 -> s1 [66, 65535] { R9944 += 1 };
  s1 -> s1 [0, 64] { R9944 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R9944 += 1 };
  s1 -> s1 [66, 65535] { R9944 += 1 };
  s2 -> s1 [0, 64] { R9944 += 1 };
  s2 -> s2 [0, 65535] { R9944 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R9944 += 1 };
  s2 -> s1 [66, 65535] { R9944 += 1 };
  s3 -> s3 [0, 65535] { R9944 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R9946 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9945 += 1, R9946 += 1 };
  s0 -> s2 [0, 65535] { R9946 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [91, 91] { R9946 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R9946 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R9946 += 1 };
  s1 -> s1 [0, 65535] { R9946 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R9946 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R9946 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R9946 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R9946 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R9946 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9946 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9948 += 1, R42 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R9948 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R9947 += 1, R9948 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9948 += 1, R42 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R9948 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9948 += 1, R42 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R9948 += 1, R41 += 1, R42 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9948 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 65535] { R9950 += 1, R60 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R9950 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R9949 += 1, R9950 += 1 };
  s1 -> s4 [0, 65535] { R9950 += 1 };
  s1 -> s1 [0, 65535] { R9950 += 1, R60 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9950 += 1, R60 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R9950 += 1, R59 += 1, R60 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9950 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R9952 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R9951 += 1, R9952 += 1 };
  s0 -> s2 [0, 65535] { R9952 += 1, R61 += 1, R62 += 1 };
  s0 -> s3 [108, 108] { R9952 += 1, R62 += 1 };
  s0 -> s1 [109, 65535] { R9952 += 1, R62 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9952 += 1, R62 += 1 };
  s1 -> s13 [0, 65535] { R9952 += 1 };
  s2 -> s1 [0, 107] { R9952 += 1, R62 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9952 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [108, 108] { R9952 += 1, R62 += 1 };
  s2 -> s1 [109, 65535] { R9952 += 1, R62 += 1 };
  s3 -> s1 [0, 110] { R9952 += 1, R62 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9952 += 1 };
  s3 -> s5 [111, 111] { R9952 += 1, R62 += 1 };
  s3 -> s1 [112, 65535] { R9952 += 1, R62 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R9952 += 1, R62 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9952 += 1 };
  s5 -> s6 [99, 99] { R9952 += 1, R62 += 1 };
  s5 -> s1 [100, 65535] { R9952 += 1, R62 += 1 };
  s6 -> s1 [0, 96] { R9952 += 1, R62 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9952 += 1 };
  s6 -> s7 [97, 97] { R9952 += 1, R62 += 1 };
  s6 -> s1 [98, 65535] { R9952 += 1, R62 += 1 };
  s7 -> s1 [0, 107] { R9952 += 1, R62 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R9952 += 1 };
  s7 -> s8 [108, 108] { R9952 += 1, R62 += 1 };
  s7 -> s1 [109, 65535] { R9952 += 1, R62 += 1 };
  s8 -> s1 [0, 103] { R9952 += 1, R62 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R9952 += 1 };
  s8 -> s9 [104, 104] { R9952 += 1, R62 += 1 };
  s8 -> s1 [105, 65535] { R9952 += 1, R62 += 1 };
  s9 -> s1 [0, 110] { R9952 += 1, R62 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R9952 += 1 };
  s9 -> s10 [111, 111] { R9952 += 1, R62 += 1 };
  s9 -> s1 [112, 65535] { R9952 += 1, R62 += 1 };
  s10 -> s1 [0, 114] { R9952 += 1, R62 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R9952 += 1 };
  s10 -> s11 [115, 115] { R9952 += 1, R62 += 1 };
  s10 -> s1 [116, 65535] { R9952 += 1, R62 += 1 };
  s11 -> s1 [0, 115] { R9952 += 1, R62 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R9952 += 1 };
  s11 -> s12 [116, 116] { R9952 += 1, R62 += 1 };
  s11 -> s1 [117, 65535] { R9952 += 1, R62 += 1 };
  s12 -> s1 [0, 65535] { R9952 += 1, R62 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R9952 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s0 [0, 65535] { R9953 += 1, R9954 += 1 };
  s0 -> s1 [0, 65535] { R9954 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R9954 += 1, R64 += 1, R44 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9954 += 1, R63 += 1, R64 += 1 };
  s1 -> s2 [0, 65535] { R9954 += 1, R64 += 1, R44 += 1 };
  s2 -> s3 [0, 65535] { R9954 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9954 += 1, R64 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R9954 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R9955 += 1, R9956 += 1 };
  s0 -> s1 [0, 65535] { R9956 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R9956 += 1, R78 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R9956 += 1, R77 += 1, R78 += 1 };
  s1 -> s2 [0, 65535] { R9956 += 1, R78 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9956 += 1, R78 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9956 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9956 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 65535] { R9958 += 1 };
  s0 -> s0 [0, 65535] { R9957 += 1, R9958 += 1 };
  s1 -> s1 [0, 65535] { R9958 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R9960 += 1, R80 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R9960 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R9959 += 1, R9960 += 1 };
  s0 -> s3 [43, 43] { R9960 += 1, R80 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R9960 += 1, R80 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R9960 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R9960 += 1, R80 += 1, R43 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9960 += 1 };
  s1 -> s3 [43, 43] { R9960 += 1, R80 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R9960 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R9960 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R9960 += 1, R80 += 1, R43 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9960 += 1, R79 += 1, R80 += 1 };
  s2 -> s3 [43, 43] { R9960 += 1, R80 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R9960 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R9960 += 1, R80 += 1, R43 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9960 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9960 += 1, R80 += 1, R43 += 1 };
  s4 -> s6 [0, 65535] { R9960 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9960 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R9962 += 1, R9862 += 1 };
  s0 -> s0 [0, 65535] { R9961 += 1, R9962 += 1 };
  s0 -> s2 [0, 65535] { R9962 += 1, R9861 += 1, R9862 += 1 };
  s0 -> s1 [66, 65535] { R9962 += 1, R9862 += 1 };
  s1 -> s1 [0, 64] { R9962 += 1, R9862 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9962 += 1 };
  s1 -> s1 [66, 65535] { R9962 += 1, R9862 += 1 };
  s2 -> s1 [0, 64] { R9962 += 1, R9862 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9962 += 1, R9861 += 1, R9862 += 1 };
  s2 -> s1 [66, 65535] { R9962 += 1, R9862 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R9964 += 1, R9863 += 1, R9864 += 1 };
  s0 -> s2 [0, 65535] { R9964 += 1, R9864 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R9963 += 1, R9964 += 1 };
  s1 -> s1 [0, 65535] { R9964 += 1, R9863 += 1, R9864 += 1 };
  s1 -> s2 [0, 65535] { R9964 += 1, R9864 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9964 += 1, R9864 += 1, R32 += 1 };
  s2 -> s3 [0, 65535] { R9964 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9964 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R9966 += 1, R9866 += 1 };
  s0 -> s0 [0, 65535] { R9965 += 1, R9966 += 1 };
  s0 -> s2 [0, 65535] { R9966 += 1, R9865 += 1, R9866 += 1 };
  s0 -> s1 [80, 65535] { R9966 += 1, R9866 += 1 };
  s1 -> s1 [0, 65] { R9966 += 1, R9866 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9966 += 1 };
  s1 -> s1 [80, 65535] { R9966 += 1, R9866 += 1 };
  s2 -> s1 [0, 65] { R9966 += 1, R9866 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9966 += 1, R9865 += 1, R9866 += 1 };
  s2 -> s1 [80, 65535] { R9966 += 1, R9866 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R9967 += 1, R9968 += 1 };
  s0 -> s1 [0, 65535] { R9968 += 1, R9867 += 1, R9868 += 1 };
  s0 -> s2 [0, 65535] { R9968 += 1, R9868 += 1, R454 += 1 };
  s1 -> s1 [0, 65535] { R9968 += 1, R9867 += 1, R9868 += 1 };
  s1 -> s2 [0, 65535] { R9968 += 1, R9868 += 1, R454 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9968 += 1 };
  s2 -> s2 [0, 65535] { R9968 += 1, R9868 += 1, R454 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9968 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R9970 += 1, R9870 += 1 };
  s0 -> s2 [0, 65535] { R9970 += 1, R9870 += 1, R456 += 1 };
  s0 -> s0 [0, 65535] { R9969 += 1, R9970 += 1 };
  s0 -> s3 [0, 65535] { R9970 += 1, R9869 += 1, R9870 += 1 };
  s0 -> s1 [81, 65535] { R9970 += 1, R9870 += 1 };
  s1 -> s1 [0, 79] { R9970 += 1, R9870 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9970 += 1 };
  s1 -> s1 [81, 65535] { R9970 += 1, R9870 += 1 };
  s2 -> s1 [0, 79] { R9970 += 1, R9870 += 1 };
  s2 -> s2 [0, 65535] { R9970 += 1, R9870 += 1, R456 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9970 += 1 };
  s2 -> s1 [81, 65535] { R9970 += 1, R9870 += 1 };
  s3 -> s1 [0, 79] { R9970 += 1, R9870 += 1 };
  s3 -> s2 [0, 65535] { R9970 += 1, R9870 += 1, R456 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9970 += 1, R9869 += 1, R9870 += 1 };
  s3 -> s1 [81, 65535] { R9970 += 1, R9870 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9970 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R9972 += 1, R9872 += 1, R460 += 1 };
  s0 -> s2 [0, 65535] { R9972 += 1, R9871 += 1, R9872 += 1 };
  s0 -> s3 [0, 65535] { R9972 += 1, R9872 += 1, R459 += 1, R460 += 1 };
  s0 -> s0 [0, 65535] { R9971 += 1, R9972 += 1 };
  s0 -> s1 [81, 65535] { R9972 += 1, R9872 += 1, R460 += 1 };
  s1 -> s1 [0, 79] { R9972 += 1, R9872 += 1, R460 += 1 };
  s1 -> s4 [0, 65535] { R9972 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9972 += 1, R9872 += 1 };
  s1 -> s1 [81, 65535] { R9972 += 1, R9872 += 1, R460 += 1 };
  s2 -> s1 [0, 79] { R9972 += 1, R9872 += 1, R460 += 1 };
  s2 -> s2 [0, 65535] { R9972 += 1, R9871 += 1, R9872 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9972 += 1, R9872 += 1, R459 += 1, R460 += 1 };
  s2 -> s1 [81, 65535] { R9972 += 1, R9872 += 1, R460 += 1 };
  s3 -> s1 [0, 79] { R9972 += 1, R9872 += 1, R460 += 1 };
  s3 -> s4 [0, 65535] { R9972 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9972 += 1, R9872 += 1, R459 += 1, R460 += 1 };
  s3 -> s1 [81, 65535] { R9972 += 1, R9872 += 1, R460 += 1 };
  s4 -> s4 [0, 65535] { R9972 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R9974 += 1, R9873 += 1, R9874 += 1 };
  s0 -> s2 [0, 65535] { R9974 += 1, R9874 += 1, R464 += 1, R465 += 1 };
  s0 -> s0 [0, 65535] { R9973 += 1, R9974 += 1 };
  s0 -> s3 [0, 65535] { R9974 += 1, R9874 += 1, R465 += 1, R466 += 1 };
  s1 -> s1 [0, 65535] { R9974 += 1, R9873 += 1, R9874 += 1 };
  s1 -> s2 [0, 65535] { R9974 += 1, R9874 += 1, R464 += 1, R465 += 1 };
  s1 -> s3 [0, 65535] { R9974 += 1, R9874 += 1, R465 += 1, R466 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R9974 += 1 };
  s2 -> s2 [0, 65535] { R9974 += 1, R9874 += 1, R464 += 1, R465 += 1 };
  s2 -> s3 [0, 65535] { R9974 += 1, R9874 += 1, R465 += 1, R466 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R9974 += 1 };
  s3 -> s3 [0, 65535] { R9974 += 1, R9874 += 1, R465 += 1, R466 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9974 += 1, R9874 += 1 };
  s4 -> s4 [0, 65535] { R9974 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R9974 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9974 += 1, R9874 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R9976 += 1, R9876 += 1, R7386 += 1 };
  s0 -> s1 [0, 65535] { R9976 += 1, R9876 += 1 };
  s0 -> s0 [0, 65535] { R9975 += 1, R9976 += 1 };
  s0 -> s2 [0, 65535] { R9976 += 1, R9875 += 1, R9876 += 1 };
  s0 -> s1 [91, 65535] { R9976 += 1, R9876 += 1, R7386 += 1 };
  s1 -> s1 [0, 80] { R9976 += 1, R9876 += 1, R7386 += 1 };
  s1 -> s1 [0, 65535] { R9976 += 1, R9876 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9976 += 1 };
  s1 -> s1 [91, 65535] { R9976 += 1, R9876 += 1, R7386 += 1 };
  s2 -> s1 [0, 80] { R9976 += 1, R9876 += 1, R7386 += 1 };
  s2 -> s1 [0, 65535] { R9976 += 1, R9876 += 1 };
  s2 -> s2 [0, 65535] { R9976 += 1, R9875 += 1, R9876 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R9976 += 1, R9876 += 1, R7386 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9976 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R9978 += 1, R9878 += 1, R9695 += 1, R9696 += 1 };
  s0 -> s0 [0, 65535] { R9977 += 1, R9978 += 1 };
  s0 -> s2 [0, 65535] { R9978 += 1, R9878 += 1 };
  s0 -> s3 [0, 65535] { R9978 += 1, R9877 += 1, R9878 += 1 };
  s1 -> s1 [0, 65535] { R9978 += 1, R9878 += 1, R9695 += 1, R9696 += 1 };
  s1 -> s2 [0, 65535] { R9978 += 1, R9878 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9978 += 1 };
  s2 -> s2 [0, 65535] { R9978 += 1, R9878 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9978 += 1 };
  s3 -> s1 [0, 65535] { R9978 += 1, R9878 += 1, R9695 += 1, R9696 += 1 };
  s3 -> s2 [0, 65535] { R9978 += 1, R9878 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9978 += 1, R9877 += 1, R9878 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9978 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R9980 += 1, R9880 += 1, R9700 += 1, R9701 += 1 };
  s0 -> s0 [0, 65535] { R9979 += 1, R9980 += 1 };
  s0 -> s2 [0, 65535] { R9980 += 1, R9879 += 1, R9880 += 1 };
  s0 -> s3 [0, 65535] { R9980 += 1, R9880 += 1, R9701 += 1, R9702 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9980 += 1 };
  s1 -> s1 [0, 65535] { R9980 += 1, R9880 += 1, R9700 += 1, R9701 += 1 };
  s1 -> s3 [0, 65535] { R9980 += 1, R9880 += 1, R9701 += 1, R9702 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9980 += 1, R9880 += 1, R9700 += 1, R9701 += 1 };
  s2 -> s2 [0, 65535] { R9980 += 1, R9879 += 1, R9880 += 1 };
  s2 -> s3 [0, 65535] { R9980 += 1, R9880 += 1, R9701 += 1, R9702 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9980 += 1 };
  s3 -> s6 [0, 65535] { R9980 += 1, R9880 += 1 };
  s3 -> s3 [0, 65535] { R9980 += 1, R9880 += 1, R9701 += 1, R9702 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9980 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9980 += 1 };
  s6 -> s6 [0, 65535] { R9980 += 1, R9880 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R9981 += 1, R9982 += 1 };
  s0 -> s1 [0, 65535] { R9982 += 1, R9881 += 1, R9882 += 1 };
  s0 -> s2 [0, 65535] { R9982 += 1, R9882 += 1 };
  s1 -> s1 [0, 65535] { R9982 += 1, R9881 += 1, R9882 += 1 };
  s1 -> s2 [0, 65535] { R9982 += 1, R9882 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9982 += 1, R9882 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9982 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9982 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 79] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s0 -> s0 [0, 65535] { R9983 += 1, R9984 += 1 };
  s0 -> s1 [0, 65535] { R9984 += 1, R9884 += 1 };
  s0 -> s2 [0, 65535] { R9984 += 1, R9883 += 1, R9884 += 1 };
  s0 -> s3 [80, 80] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s0 -> s4 [80, 80] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s0 -> s1 [81, 65535] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s1 -> s1 [0, 79] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9984 += 1, R9884 += 1 };
  s1 -> s6 [0, 65535] { R9984 += 1 };
  s1 -> s3 [80, 80] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s1 -> s4 [80, 80] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s1 -> s1 [81, 65535] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s2 -> s1 [0, 79] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9984 += 1, R9884 += 1 };
  s2 -> s2 [0, 65535] { R9984 += 1, R9883 += 1, R9884 += 1 };
  s2 -> s3 [80, 80] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s2 -> s4 [80, 80] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s2 -> s1 [81, 65535] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s3 -> s3 [0, 65535] { R9984 += 1, R9884 += 1, R9859 += 1, R9860 += 1 };
  s3 -> s7 [0, 65535] { R9984 += 1, R9884 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9984 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9984 += 1, R9884 += 1 };
  s4 -> s6 [0, 65535] { R9984 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9984 += 1 };
  s7 -> s7 [0, 65535] { R9984 += 1, R9884 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9984 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R9986 += 1, R9899 += 1, R9900 += 1 };
  s0 -> s0 [0, 65535] { R9985 += 1, R9986 += 1 };
  s0 -> s2 [0, 65535] { R9986 += 1, R9900 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R9986 += 1, R9899 += 1, R9900 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9986 += 1, R9900 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9986 += 1 };
  s2 -> s2 [0, 65535] { R9986 += 1, R9900 += 1, R34 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9986 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R9988 += 1, R9902 += 1 };
  s0 -> s2 [0, 65535] { R9988 += 1, R9901 += 1, R9902 += 1 };
  s0 -> s0 [0, 65535] { R9987 += 1, R9988 += 1 };
  s0 -> s3 [65, 65] { R9988 += 1, R9902 += 1 };
  s0 -> s4 [65, 65] { R9988 += 1, R9902 += 1 };
  s0 -> s5 [80, 80] { R9988 += 1, R9902 += 1 };
  s0 -> s1 [81, 65535] { R9988 += 1, R9902 += 1 };
  s1 -> s1 [0, 64] { R9988 += 1, R9902 += 1 };
  s1 -> s3 [65, 65] { R9988 += 1, R9902 += 1 };
  s1 -> s4 [65, 65] { R9988 += 1, R9902 += 1 };
  s1 -> s5 [80, 80] { R9988 += 1, R9902 += 1 };
  s1 -> s1 [81, 65535] { R9988 += 1, R9902 += 1 };
  s2 -> s1 [0, 64] { R9988 += 1, R9902 += 1 };
  s2 -> s2 [0, 65535] { R9988 += 1, R9901 += 1, R9902 += 1 };
  s2 -> s3 [65, 65] { R9988 += 1, R9902 += 1 };
  s2 -> s4 [65, 65] { R9988 += 1, R9902 += 1 };
  s2 -> s5 [80, 80] { R9988 += 1, R9902 += 1 };
  s2 -> s1 [81, 65535] { R9988 += 1, R9902 += 1 };
  s4 -> s4 [0, 65] { R9988 += 1, R9902 += 1 };
  s4 -> s7 [80, 80] { R9988 += 1, R9902 += 1 };
  s4 -> s4 [81, 65535] { R9988 += 1, R9902 += 1 };
  s5 -> s5 [0, 64] { R9988 += 1, R9902 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9988 += 1 };
  s5 -> s7 [65, 65] { R9988 += 1, R9902 += 1 };
  s5 -> s8 [65, 65] { R9988 += 1, R9902 += 1 };
  s5 -> s5 [80, 65535] { R9988 += 1, R9902 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R9988 += 1, R9902 += 1 };
  s7 -> s7 [0, 65535] { R9988 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R9988 += 1, R9902 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9988 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R9990 += 1, R9904 += 1, R453 += 1 };
  s0 -> s0 [0, 65535] { R9989 += 1, R9990 += 1 };
  s0 -> s2 [0, 65535] { R9990 += 1, R9903 += 1, R9904 += 1 };
  s0 -> s3 [65, 65] { R9990 += 1, R9904 += 1, R453 += 1 };
  s0 -> s4 [65, 65] { R9990 += 1, R9904 += 1, R453 += 1 };
  s0 -> s1 [66, 65535] { R9990 += 1, R9904 += 1, R453 += 1 };
  s1 -> s1 [0, 64] { R9990 += 1, R9904 += 1, R453 += 1 };
  s1 -> s1 [0, 65535] { R9990 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9990 += 1, R9904 += 1, R453 += 1 };
  s1 -> s4 [65, 65] { R9990 += 1, R9904 += 1, R453 += 1 };
  s1 -> s1 [66, 65535] { R9990 += 1, R9904 += 1, R453 += 1 };
  s2 -> s1 [0, 64] { R9990 += 1, R9904 += 1, R453 += 1 };
  s2 -> s2 [0, 65535] { R9990 += 1, R9903 += 1, R9904 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9990 += 1, R9904 += 1, R453 += 1 };
  s2 -> s4 [65, 65] { R9990 += 1, R9904 += 1, R453 += 1 };
  s2 -> s1 [66, 65535] { R9990 += 1, R9904 += 1, R453 += 1 };
  s3 -> s3 [0, 65535] { R9990 += 1, R9904 += 1, R453 += 1 };
  s3 -> s6 [0, 65535] { R9990 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9990 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9990 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R9992 += 1, R9906 += 1, R455 += 1 };
  s0 -> s2 [0, 65535] { R9992 += 1, R9905 += 1, R9906 += 1 };
  s0 -> s0 [0, 65535] { R9991 += 1, R9992 += 1 };
  s0 -> s3 [65, 65] { R9992 += 1, R9906 += 1, R455 += 1 };
  s0 -> s4 [65, 65] { R9992 += 1, R9906 += 1, R455 += 1 };
  s0 -> s1 [66, 65535] { R9992 += 1, R9906 += 1, R455 += 1 };
  s1 -> s1 [0, 64] { R9992 += 1, R9906 += 1, R455 += 1 };
  s1 -> s1 [0, 65535] { R9992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9992 += 1, R9906 += 1, R455 += 1 };
  s1 -> s4 [65, 65] { R9992 += 1, R9906 += 1, R455 += 1 };
  s1 -> s1 [66, 65535] { R9992 += 1, R9906 += 1, R455 += 1 };
  s2 -> s1 [0, 64] { R9992 += 1, R9906 += 1, R455 += 1 };
  s2 -> s2 [0, 65535] { R9992 += 1, R9905 += 1, R9906 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9992 += 1, R9906 += 1, R455 += 1 };
  s2 -> s4 [65, 65] { R9992 += 1, R9906 += 1, R455 += 1 };
  s2 -> s1 [66, 65535] { R9992 += 1, R9906 += 1, R455 += 1 };
  s3 -> s6 [0, 65535] { R9992 += 1 };
  s3 -> s3 [0, 65535] { R9992 += 1, R9906 += 1, R455 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9992 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9992 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s0 -> s0 [0, 65535] { R9993 += 1, R9994 += 1 };
  s0 -> s2 [0, 65535] { R9994 += 1, R9907 += 1, R9908 += 1 };
  s0 -> s3 [65, 65] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s0 -> s4 [65, 65] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s0 -> s1 [66, 65535] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 64] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9994 += 1 };
  s1 -> s3 [65, 65] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s1 -> s4 [65, 65] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [66, 65535] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [0, 64] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9994 += 1, R9907 += 1, R9908 += 1 };
  s2 -> s3 [65, 65] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s2 -> s4 [65, 65] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [66, 65535] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9994 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9994 += 1, R9908 += 1, R457 += 1, R458 += 1 };
  s4 -> s6 [0, 65535] { R9994 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9994 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s0 -> s0 [0, 65535] { R9995 += 1, R9996 += 1 };
  s0 -> s2 [0, 65535] { R9996 += 1, R9909 += 1, R9910 += 1 };
  s0 -> s3 [65, 65] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s0 -> s4 [65, 65] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s0 -> s1 [66, 65535] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 64] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 65535] { R9996 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s1 -> s4 [65, 65] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [66, 65535] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [0, 64] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9996 += 1, R9909 += 1, R9910 += 1 };
  s2 -> s3 [65, 65] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s2 -> s4 [65, 65] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [66, 65535] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9996 += 1 };
  s4 -> s5 [0, 65535] { R9996 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9996 += 1, R9910 += 1, R461 += 1, R462 += 1 };
  s5 -> s5 [0, 65535] { R9996 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s0 -> s3 [0, 65535] { R9998 += 1, R9911 += 1, R9912 += 1 };
  s0 -> s0 [0, 65535] { R9997 += 1, R9998 += 1 };
  s0 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s0 -> s5 [65, 65] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s0 -> s7 [65, 65] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s0 -> s1 [66, 65535] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s2 [91, 107] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s0 -> s8 [108, 108] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s0 -> s2 [109, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s1 -> s1 [0, 64] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s1 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s1 -> s5 [65, 65] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s1 -> s7 [65, 65] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s1 -> s1 [66, 65535] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s1 -> s2 [91, 107] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s1 -> s8 [108, 108] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s1 -> s2 [109, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s2 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s2 [0, 65535] { R9998 += 1 };
  s2 -> s4 [65, 65] { R9998 += 1, R9912 += 1 };
  s2 -> s6 [65, 65] { R9998 += 1, R9912 += 1 };
  s2 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s2 -> s2 [66, 65535] { R9998 += 1, R9912 += 1 };
  s2 -> s2 [91, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s3 -> s1 [0, 64] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s3 -> s3 [0, 65535] { R9998 += 1, R9911 += 1, R9912 += 1 };
  s3 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s3 -> s5 [65, 65] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s3 -> s7 [65, 65] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s3 -> s1 [66, 65535] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s2 [91, 107] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s3 -> s8 [108, 108] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s3 -> s2 [109, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s4 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s4 -> s4 [0, 65535] { R9998 += 1, R9912 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s35 [0, 65535] { R9998 += 1 };
  s4 -> s4 [91, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s5 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s5 -> s5 [0, 65535] { R9998 += 1, R9912 += 1, R7383 += 1, R7384 += 1 };
  s5 -> s4 [91, 107] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s5 -> s10 [108, 108] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s5 -> s4 [109, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R9998 += 1 };
  s8 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s8 -> s8 [0, 64] { R9998 += 1, R9912 += 1 };
  s8 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s8 -> s9 [65, 65] { R9998 += 1, R9912 += 1 };
  s8 -> s10 [65, 65] { R9998 += 1, R9912 += 1 };
  s8 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s8 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s8 -> s8 [66, 65535] { R9998 += 1, R9912 += 1 };
  s8 -> s2 [91, 110] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s8 -> s11 [111, 111] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s8 -> s2 [112, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s10 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s10 -> s10 [0, 65535] { R9998 += 1, R9912 += 1 };
  s10 -> s4 [91, 110] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s10 -> s12 [111, 111] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s10 -> s4 [112, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s11 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s11 -> s11 [0, 64] { R9998 += 1, R9912 += 1 };
  s11 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s11 -> s12 [65, 65] { R9998 += 1, R9912 += 1 };
  s11 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s11 -> s13 [65, 65] { R9998 += 1, R9912 += 1 };
  s11 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s11 -> s11 [66, 65535] { R9998 += 1, R9912 += 1 };
  s11 -> s2 [91, 98] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s11 -> s14 [99, 99] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s11 -> s2 [100, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s12 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s12 -> s12 [0, 65535] { R9998 += 1, R9912 += 1 };
  s12 -> s4 [91, 98] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s12 -> s17 [99, 99] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s12 -> s4 [100, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s14 -> s14 [0, 64] { R9998 += 1, R9912 += 1 };
  s14 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s14 -> s15 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s14 -> s16 [65, 65] { R9998 += 1, R9912 += 1 };
  s14 -> s17 [65, 65] { R9998 += 1, R9912 += 1 };
  s14 -> s18 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s14 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s14 -> s14 [66, 65535] { R9998 += 1, R9912 += 1 };
  s14 -> s2 [91, 96] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s14 -> s19 [97, 97] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s14 -> s2 [98, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s15 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s15 -> s15 [0, 65535] { R9998 += 1, R9912 += 1 };
  s15 -> s4 [91, 107] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s15 -> s21 [108, 108] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s15 -> s4 [109, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s17 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s17 -> s17 [0, 65535] { R9998 += 1, R9912 += 1 };
  s17 -> s4 [91, 96] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s17 -> s15 [97, 97] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s17 -> s4 [98, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s19 -> s19 [0, 64] { R9998 += 1, R9912 += 1 };
  s19 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s19 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s19 -> s15 [65, 65] { R9998 += 1, R9912 += 1 };
  s19 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s19 -> s18 [65, 65] { R9998 += 1, R9912 += 1 };
  s19 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s19 -> s19 [66, 65535] { R9998 += 1, R9912 += 1 };
  s19 -> s2 [91, 107] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s19 -> s20 [108, 108] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s19 -> s2 [109, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s20 -> s20 [0, 64] { R9998 += 1, R9912 += 1 };
  s20 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s20 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s20 -> s21 [65, 65] { R9998 += 1, R9912 += 1 };
  s20 -> s22 [65, 65] { R9998 += 1, R9912 += 1 };
  s20 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s20 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s20 -> s20 [66, 65535] { R9998 += 1, R9912 += 1 };
  s20 -> s2 [91, 103] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s20 -> s23 [104, 104] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s20 -> s2 [105, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s21 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s21 -> s21 [0, 65535] { R9998 += 1, R9912 += 1 };
  s21 -> s4 [91, 103] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s21 -> s24 [104, 104] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s21 -> s4 [105, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s23 -> s23 [0, 64] { R9998 += 1, R9912 += 1 };
  s23 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s23 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s23 -> s24 [65, 65] { R9998 += 1, R9912 += 1 };
  s23 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s23 -> s25 [65, 65] { R9998 += 1, R9912 += 1 };
  s23 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s23 -> s23 [66, 65535] { R9998 += 1, R9912 += 1 };
  s23 -> s2 [91, 110] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s23 -> s26 [111, 111] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s23 -> s2 [112, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s24 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s24 -> s24 [0, 65535] { R9998 += 1, R9912 += 1 };
  s24 -> s4 [91, 110] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s24 -> s28 [111, 111] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s24 -> s4 [112, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s26 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s26 -> s26 [0, 64] { R9998 += 1, R9912 += 1 };
  s26 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s26 -> s27 [65, 65] { R9998 += 1, R9912 += 1 };
  s26 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s26 -> s28 [65, 65] { R9998 += 1, R9912 += 1 };
  s26 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s26 -> s26 [66, 65535] { R9998 += 1, R9912 += 1 };
  s26 -> s2 [91, 114] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s26 -> s29 [115, 115] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s26 -> s2 [116, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s28 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s28 -> s28 [0, 65535] { R9998 += 1, R9912 += 1 };
  s28 -> s4 [91, 114] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s28 -> s30 [115, 115] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s28 -> s4 [116, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s29 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s29 -> s29 [0, 64] { R9998 += 1, R9912 += 1 };
  s29 -> s30 [65, 65] { R9998 += 1, R9912 += 1 };
  s29 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s29 -> s31 [65, 65] { R9998 += 1, R9912 += 1 };
  s29 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s29 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s29 -> s29 [66, 65535] { R9998 += 1, R9912 += 1 };
  s29 -> s2 [91, 115] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s29 -> s32 [116, 116] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s29 -> s2 [117, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s30 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s30 -> s30 [0, 65535] { R9998 += 1, R9912 += 1 };
  s30 -> s4 [91, 115] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s30 -> s33 [116, 116] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s30 -> s4 [117, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s32 -> s2 [0, 64] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s32 -> s4 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s32 -> s6 [65, 65] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s32 -> s2 [66, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s32 -> s2 [91, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s33 -> s4 [0, 80] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s33 -> s4 [91, 65535] { R9998 += 1, R9912 += 1, R7384 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R9998 += 1 };
  accepting s4, s34, s2, s6, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s2 [0, 64] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s3 [0, 65535] { R10000 += 1, R9913 += 1, R9914 += 1 };
  s0 -> s0 [0, 65535] { R9999 += 1, R10000 += 1 };
  s0 -> s4 [65, 65] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s5 [65, 65] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s6 [65, 65] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s7 [65, 65] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s1 [66, 65535] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s2 [66, 65535] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s1 [0, 64] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s1 -> s2 [0, 64] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s4 [65, 65] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s1 -> s5 [65, 65] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s6 [65, 65] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s7 [65, 65] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s1 -> s1 [66, 65535] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s1 -> s2 [66, 65535] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s2 [0, 64] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s2 [0, 65535] { R10000 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [65, 65] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s6 [65, 65] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s2 [66, 65535] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s1 [0, 64] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s2 [0, 64] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s3 [0, 65535] { R10000 += 1, R9913 += 1, R9914 += 1 };
  s3 -> s4 [65, 65] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s5 [65, 65] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s6 [65, 65] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s7 [65, 65] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s1 [66, 65535] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s2 [66, 65535] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s5 -> s5 [0, 65535] { R10000 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R10000 += 1 };
  s6 -> s6 [0, 65535] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R10000 += 1, R9914 += 1, R9692 += 1, R9693 += 1 };
  s7 -> s7 [0, 65535] { R10000 += 1, R9914 += 1, R9691 += 1, R9692 += 1 };
  s8 -> s8 [0, 65535] { R10000 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s0 [0, 65535] { R10001 += 1, R10002 += 1 };
  s0 -> s2 [0, 65535] { R10002 += 1, R9915 += 1, R9916 += 1 };
  s0 -> s3 [65, 65] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s4 [65, 65] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s1 [66, 65535] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s1 [0, 64] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10002 += 1 };
  s1 -> s3 [65, 65] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s4 [65, 65] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s1 [66, 65535] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s1 [0, 64] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s2 [0, 65535] { R10002 += 1, R9915 += 1, R9916 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s4 [65, 65] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s1 [66, 65535] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s3 -> s3 [0, 65535] { R10002 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10002 += 1 };
  s4 -> s4 [0, 65535] { R10002 += 1, R9916 += 1, R9697 += 1, R9698 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10002 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R10004 += 1, R9918 += 1 };
  s0 -> s0 [0, 65535] { R10003 += 1, R10004 += 1 };
  s0 -> s2 [0, 65535] { R10004 += 1, R9917 += 1, R9918 += 1 };
  s0 -> s3 [65, 65] { R10004 += 1, R9918 += 1 };
  s0 -> s4 [65, 65] { R10004 += 1, R9918 += 1 };
  s0 -> s1 [66, 65535] { R10004 += 1, R9918 += 1 };
  s1 -> s1 [0, 64] { R10004 += 1, R9918 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10004 += 1 };
  s1 -> s3 [65, 65] { R10004 += 1, R9918 += 1 };
  s1 -> s4 [65, 65] { R10004 += 1, R9918 += 1 };
  s1 -> s1 [66, 65535] { R10004 += 1, R9918 += 1 };
  s2 -> s1 [0, 64] { R10004 += 1, R9918 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10004 += 1, R9917 += 1, R9918 += 1 };
  s2 -> s3 [65, 65] { R10004 += 1, R9918 += 1 };
  s2 -> s4 [65, 65] { R10004 += 1, R9918 += 1 };
  s2 -> s1 [66, 65535] { R10004 += 1, R9918 += 1 };
  s3 -> s3 [0, 65535] { R10004 += 1, R9918 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10004 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10004 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10004 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s0 -> s2 [0, 64] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s0 -> s0 [0, 65535] { R10005 += 1, R10006 += 1 };
  s0 -> s3 [0, 65535] { R10006 += 1, R9919 += 1, R9920 += 1 };
  s0 -> s4 [65, 65] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s0 -> s5 [65, 65] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s0 -> s6 [65, 65] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s0 -> s7 [65, 65] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s0 -> s2 [66, 79] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s0 -> s1 [66, 65535] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s0 -> s2 [81, 65535] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s1 -> s1 [0, 64] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s1 -> s2 [0, 64] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s1 -> s4 [65, 65] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s1 -> s5 [65, 65] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s1 -> s6 [65, 65] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s1 -> s7 [65, 65] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s1 -> s2 [66, 79] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s1 -> s1 [66, 65535] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s1 -> s2 [81, 65535] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s2 -> s2 [0, 64] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R10006 += 1 };
  s2 -> s4 [65, 65] { R10006 += 1, R9920 += 1 };
  s2 -> s7 [65, 65] { R10006 += 1, R9920 += 1 };
  s2 -> s2 [66, 79] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s2 -> s2 [66, 65535] { R10006 += 1, R9920 += 1 };
  s2 -> s2 [81, 65535] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s3 -> s1 [0, 64] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s3 -> s2 [0, 64] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s3 -> s3 [0, 65535] { R10006 += 1, R9919 += 1, R9920 += 1 };
  s3 -> s4 [65, 65] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s3 -> s5 [65, 65] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s3 -> s6 [65, 65] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s3 -> s7 [65, 65] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s3 -> s2 [66, 79] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s3 -> s1 [66, 65535] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s3 -> s2 [81, 65535] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R10006 += 1 };
  s6 -> s7 [0, 79] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s6 -> s6 [0, 65535] { R10006 += 1, R9920 += 1, R9855 += 1, R9856 += 1 };
  s6 -> s7 [81, 65535] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s7 -> s7 [0, 79] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R10006 += 1 };
  s7 -> s7 [0, 65535] { R10006 += 1, R9920 += 1 };
  s7 -> s7 [81, 65535] { R10006 += 1, R9920 += 1, R9856 += 1, R9857 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10006 += 1 };
  accepting s4, s8, s2, s9, s7;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R5 = R9884 && R6 = R10006 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R59 = 0 && R60 = R9884 && R61 = 0 && R62 = R9884 && R63 = 0 && R64 = R9884 && R65 = 0 && R66 = R10006 && R67 = 0 && R68 = R10006 && R69 = 0 && R70 = R10006 && R86 + R85 = 0 && R9861 = 0 && R9862 = R9884 && R9863 = 0 && R9864 = R9884 && R9865 = 0 && R9866 = R9884 && R9867 = 0 && R9868 = R9884 && R9869 = 0 && R9870 = R9884 && R9871 = 0 && R9872 = R9884 && R9873 = 0 && R9874 = R9884 && R9875 = 0 && R9876 = R9884 && R9877 = 0 && R9878 = R9884 && R9879 = 0 && R9880 = R9884 && R9881 = 0 && R9882 = R9884 && R9883 = 0 && R9885 = 0 && R9886 = R10006 && R9887 = 0 && R9888 = R10006 && R9889 = 0 && R9890 = R10006 && R9891 = 0 && R9892 = R10006 && R9893 = 0 && R9894 = R10006 && R9895 = 0 && R9896 = R10006 && R9897 = 0 && R9898 = R10006 && R9901 = 0 && R9902 = 0 && R9911 = 0 && R9912 = 0 && R9913 = 0 && R9914 = 0 && R9919 = 0 && R9920 = 0 && R9935 = 10 && R9936 = R10006 && R9937 = 10 && R9938 = R10006 && R9939 = 10 && R9940 = R10006 && R9941 = 10 && R9942 = R10006 && R9943 = 10 && R9944 = R10006 && R9945 = 10 && R9946 = R10006 && R9947 = 10 && R9948 = R10006 && R9949 = 10 && R9950 = R10006 && R9951 = 10 && R9952 = R10006 && R9953 = 10 && R9954 = R10006 && R9955 = 10 && R9956 = R10006 && R9957 = 10 && R9958 = R10006 && R9959 = 10 && R9960 = R10006 && R9961 = 10 && R9962 = R10006 && R9963 = 10 && R9964 = R10006 && R9965 = 10 && R9966 = R10006 && R9967 = 10 && R9968 = R10006 && R9969 = 10 && R9970 = R10006 && R9971 = 10 && R9972 = R10006 && R9973 = 10 && R9974 = R10006 && R9975 = 10 && R9976 = R10006 && R9977 = 10 && R9978 = R10006 && R9979 = 10 && R9980 = R10006 && R9981 = 10 && R9982 = R10006 && R9983 = 10 && R9984 = R10006 && R9985 = 10 && R9986 = R10006 && R9987 = 10 && R9988 = R10006 && R9989 = 10 && R9990 = R10006 && R9991 = 10 && R9992 = R10006 && R9993 = 10 && R9994 = R10006 && R9995 = 10 && R9996 = R10006 && R9997 = 10 && R9998 = R10006 && R9999 = 10 && R10000 = R10006 && R10001 = 10 && R10002 = R10006 && R10003 = 10 && R10004 = R10006 && R10005 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R9696 + R9693 + R9860 + R9857 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && -1*R454 + -1*R453 < 1 && R456 + R455 < 1 && 0 < R9884 && 9 < R10006 && (R454 + R453 != 0 || R466 + R463 = 0 || (R459 + R457 = 0 && R460 + R458 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R464 + R461 = 0 && R465 + R462 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R7385 + R7383 = 0 && R7386 + R7384 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R9694 + R9691 = 0 && R9695 + R9692 = 0)) && (R459 + R457 != 0 || R454 + R453 + -1*R460 + -1*R458 = 0 || R454 + R453 < 1) && (R464 + R461 != 0 || R454 + R453 + -1*R465 + -1*R462 = 0 || R454 + R453 < 1) && (R7385 + R7383 != 0 || R454 + R453 + -1*R7386 + -1*R7384 = 0 || R454 + R453 < 1) && (R9694 + R9691 != 0 || R454 + R453 + -1*R9695 + -1*R9692 = 0 || R454 + R453 < 1) && (R33 = 0 || (R77 = 0 && R78 = 0)) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R34 = 0 || (R9899 = 0 && R9900 = 0)) && (R34 = 0 || (R9903 = 0 && R9904 = 0)) && (R34 = 0 || (R9905 = 0 && R9906 = 0)) && (R34 = 0 || (R9907 = 0 && R9908 = 0)) && (R34 = 0 || (R9909 = 0 && R9910 = 0)) && (R34 = 0 || (R9915 = 0 && R9916 = 0)) && (R34 = 0 || (R9917 = 0 && R9918 = 0)) && (R37 = 0 || (R9921 = 0 && R9922 = 0)) && (R37 = 0 || (R9923 = 0 && R9924 = 0)) && (R37 = 0 || (R9925 = 0 && R9926 = 0)) && (R37 = 0 || (R9927 = 0 && R9928 = 0)) && (R37 = 0 || (R9929 = 0 && R9930 = 0)) && (R37 = 0 || (R9931 = 0 && R9932 = 0)) && (R37 = 0 || (R9933 = 0 && R9934 = 0)) && (R38 = 0 || (R81 = 0 && R82 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R94 + R91 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R459 + R457 = 0 || R454 + R453 < 1) && (R464 + R461 = 0 || R454 + R453 < 1) && (R7385 + R7383 = 0 || R454 + R453 < 1) && (R9694 + R9691 = 0 || R454 + R453 < 1) && (R9702 + R9699 = 0 || (R9700 + R9697 = 0 && R9701 + R9698 = 0)) && (R9702 + R9699 = 0 || (R9858 + R9855 = 0 && R9859 + R9856 = 0));
// End of Parikh automata intersection problem
