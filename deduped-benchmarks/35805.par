// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R10187, R10188, R10189, R10190, R10191, R10192, R10193, R10194, R10195, R10196, R10197, R10198, R10199, R10200, R10201, R10202, R10203, R10204, R10205, R10206, R10207, R10208, R10209, R10210, R10211, R10212, R10213, R10214, R10215, R10216, R10217, R10218, R10219, R10220, R10221, R10222, R10223, R10224, R10225, R10226, R10227, R10228, R10229, R10230, R10231, R10232, R10233, R10234, R10235, R10236, R10237, R10238, R10239, R10240, R10241, R10242, R10243, R10244, R10245, R10246, R10247, R10248, R10249, R10250, R10251, R10252, R10253, R10254, R10255, R10256, R10257, R10258, R10259, R10260, R10261, R10262, R10263, R10264, R10265, R10266, R10267, R10268, R10269, R10270, R10271, R10272, R10273, R10274, R10275, R10276, R10277, R10278, R10279, R10280, R10281, R10282, R10283, R10284, R10285, R10286, R10287, R10288, R10289, R10290, R10291, R10292, R10293, R10294, R10295, R10296, R10297, R10298, R10299, R10300, R10301, R10302, R10303, R10304, R10305, R10306, R10307, R10308, R10309, R10310, R14, R15, R18, R21, R24, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R453, R454, R455, R456, R457, R458, R459, R46, R460, R461, R462, R463, R464, R465, R466, R5, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R7383, R7384, R7385, R7386, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R9691, R9692, R9693, R9694, R9695, R9696, R9697, R9698, R9699, R97, R9700, R9701, R9702, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [108, 108] { R68 += 1 };
  s0 -> s1 [109, 65535] { R68 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1 };
  s2 -> s1 [0, 110] { R68 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R68 += 1 };
  s2 -> s1 [112, 65535] { R68 += 1 };
  s3 -> s1 [0, 98] { R68 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R68 += 1 };
  s3 -> s1 [100, 65535] { R68 += 1 };
  s4 -> s1 [0, 96] { R68 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R68 += 1 };
  s4 -> s1 [98, 65535] { R68 += 1 };
  s5 -> s1 [0, 107] { R68 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R68 += 1 };
  s5 -> s1 [109, 65535] { R68 += 1 };
  s6 -> s1 [0, 103] { R68 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R68 += 1 };
  s6 -> s1 [105, 65535] { R68 += 1 };
  s7 -> s1 [0, 110] { R68 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R68 += 1 };
  s7 -> s1 [112, 65535] { R68 += 1 };
  s8 -> s1 [0, 114] { R68 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R68 += 1 };
  s8 -> s1 [116, 65535] { R68 += 1 };
  s9 -> s1 [0, 115] { R68 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R68 += 1 };
  s9 -> s1 [117, 65535] { R68 += 1 };
  s10 -> s1 [0, 65535] { R68 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R10189 += 1, R10190 += 1 };
  s0 -> s1 [0, 65535] { R10190 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10190 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R10192 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R10191 += 1, R10192 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10192 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R10194 += 1 };
  s0 -> s2 [0, 65535] { R10194 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R10193 += 1, R10194 += 1 };
  s0 -> s1 [78, 65535] { R10194 += 1 };
  s1 -> s1 [0, 76] { R10194 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R10194 += 1 };
  s2 -> s1 [0, 76] { R10194 += 1 };
  s2 -> s2 [0, 65535] { R10194 += 1, R88 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R10194 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R10196 += 1, R93 += 1, R94 += 1 };
  s0 -> s2 [0, 65535] { R10196 += 1, R92 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R10195 += 1, R10196 += 1 };
  s1 -> s1 [0, 65535] { R10196 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [0, 65535] { R10196 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10196 += 1, R93 += 1, R94 += 1 };
  s2 -> s2 [0, 65535] { R10196 += 1, R92 += 1, R93 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10196 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10198 += 1 };
  s0 -> s0 [0, 65535] { R10197 += 1, R10198 += 1 };
  s1 -> s1 [0, 65535] { R10198 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10199 += 1, R10200 += 1 };
  s0 -> s1 [0, 65535] { R10200 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R10200 += 1, R99 += 1, R100 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10200 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R10200 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10200 += 1 };
  s2 -> s2 [0, 65535] { R10200 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10200 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R10201 += 1, R10202 += 1 };
  s0 -> s1 [0, 65535] { R10202 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10202 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R10226 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R10225 += 1, R10226 += 1 };
  s1 -> s1 [0, 65535] { R10226 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R10228 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R10227 += 1, R10228 += 1 };
  s0 -> s2 [65, 65] { R10228 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R10228 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R10228 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R10228 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10228 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R10228 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R10228 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R10228 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R10230 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R10229 += 1, R10230 += 1 };
  s0 -> s2 [65, 65] { R10230 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R10230 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R10230 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R10230 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10230 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R10230 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R10230 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10230 += 1, R87 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R10232 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R10231 += 1, R10232 += 1 };
  s0 -> s2 [65, 65] { R10232 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R10232 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R10232 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R10232 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10232 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R10232 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R10232 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10232 += 1, R89 += 1, R90 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R10234 += 1 };
  s0 -> s0 [0, 65535] { R10233 += 1, R10234 += 1 };
  s0 -> s2 [65, 65] { R10234 += 1 };
  s0 -> s3 [65, 65] { R10234 += 1 };
  s0 -> s1 [66, 65535] { R10234 += 1 };
  s1 -> s1 [0, 64] { R10234 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10234 += 1 };
  s1 -> s3 [65, 65] { R10234 += 1 };
  s1 -> s1 [66, 65535] { R10234 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10234 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10236 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R10235 += 1, R10236 += 1 };
  s0 -> s2 [65, 65] { R10236 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R10236 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R10236 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R10236 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10236 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R10236 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R10236 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10236 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R10238 += 1 };
  s0 -> s0 [0, 65535] { R10237 += 1, R10238 += 1 };
  s0 -> s2 [65, 65] { R10238 += 1 };
  s0 -> s3 [65, 65] { R10238 += 1 };
  s0 -> s1 [66, 65535] { R10238 += 1 };
  s1 -> s1 [0, 64] { R10238 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10238 += 1 };
  s1 -> s3 [65, 65] { R10238 += 1 };
  s1 -> s1 [66, 65535] { R10238 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10238 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R10240 += 1 };
  s0 -> s0 [0, 65535] { R10239 += 1, R10240 += 1 };
  s0 -> s1 [45, 45] { R10240 += 1 };
  s0 -> s2 [46, 46] { R10240 += 1 };
  s0 -> s1 [48, 62] { R10240 += 1 };
  s0 -> s3 [65, 65] { R10240 += 1 };
  s0 -> s1 [66, 65535] { R10240 += 1 };
  s1 -> s1 [0, 43] { R10240 += 1 };
  s1 -> s1 [45, 45] { R10240 += 1 };
  s1 -> s2 [46, 46] { R10240 += 1 };
  s1 -> s1 [48, 62] { R10240 += 1 };
  s1 -> s3 [65, 65] { R10240 += 1 };
  s1 -> s1 [66, 65535] { R10240 += 1 };
  s2 -> s1 [0, 43] { R10240 += 1 };
  s2 -> s1 [45, 45] { R10240 += 1 };
  s2 -> s2 [46, 46] { R10240 += 1 };
  s2 -> s1 [48, 62] { R10240 += 1 };
  s2 -> s3 [65, 65] { R10240 += 1 };
  s2 -> s1 [66, 114] { R10240 += 1 };
  s2 -> s8 [115, 115] { R10240 += 1 };
  s2 -> s1 [116, 65535] { R10240 += 1 };
  s3 -> s3 [0, 43] { R10240 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10240 += 1 };
  s3 -> s4 [46, 46] { R10240 += 1 };
  s3 -> s3 [48, 62] { R10240 += 1 };
  s3 -> s3 [65, 65535] { R10240 += 1 };
  s4 -> s3 [0, 43] { R10240 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10240 += 1 };
  s4 -> s4 [46, 46] { R10240 += 1 };
  s4 -> s3 [48, 62] { R10240 += 1 };
  s4 -> s3 [65, 114] { R10240 += 1 };
  s4 -> s5 [115, 115] { R10240 += 1 };
  s4 -> s3 [116, 65535] { R10240 += 1 };
  s5 -> s3 [0, 43] { R10240 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10240 += 1 };
  s5 -> s4 [46, 46] { R10240 += 1 };
  s5 -> s3 [48, 62] { R10240 += 1 };
  s5 -> s3 [65, 110] { R10240 += 1 };
  s5 -> s6 [111, 111] { R10240 += 1 };
  s5 -> s3 [112, 65535] { R10240 += 1 };
  s6 -> s3 [0, 43] { R10240 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10240 += 1 };
  s6 -> s4 [46, 46] { R10240 += 1 };
  s6 -> s3 [48, 62] { R10240 += 1 };
  s6 -> s3 [65, 98] { R10240 += 1 };
  s6 -> s7 [99, 99] { R10240 += 1 };
  s6 -> s3 [100, 65535] { R10240 += 1 };
  s7 -> s3 [0, 43] { R10240 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10240 += 1 };
  s7 -> s4 [46, 46] { R10240 += 1 };
  s7 -> s3 [48, 62] { R10240 += 1 };
  s7 -> s3 [65, 106] { R10240 += 1 };
  s7 -> s3 [108, 65535] { R10240 += 1 };
  s8 -> s1 [0, 43] { R10240 += 1 };
  s8 -> s1 [45, 45] { R10240 += 1 };
  s8 -> s2 [46, 46] { R10240 += 1 };
  s8 -> s1 [48, 62] { R10240 += 1 };
  s8 -> s3 [65, 65] { R10240 += 1 };
  s8 -> s1 [66, 110] { R10240 += 1 };
  s8 -> s9 [111, 111] { R10240 += 1 };
  s8 -> s1 [112, 65535] { R10240 += 1 };
  s9 -> s1 [0, 43] { R10240 += 1 };
  s9 -> s1 [45, 45] { R10240 += 1 };
  s9 -> s2 [46, 46] { R10240 += 1 };
  s9 -> s1 [48, 62] { R10240 += 1 };
  s9 -> s3 [65, 65] { R10240 += 1 };
  s9 -> s1 [66, 98] { R10240 += 1 };
  s9 -> s10 [99, 99] { R10240 += 1 };
  s9 -> s1 [100, 65535] { R10240 += 1 };
  s10 -> s1 [0, 43] { R10240 += 1 };
  s10 -> s1 [45, 45] { R10240 += 1 };
  s10 -> s2 [46, 46] { R10240 += 1 };
  s10 -> s1 [48, 62] { R10240 += 1 };
  s10 -> s3 [65, 65] { R10240 += 1 };
  s10 -> s1 [66, 106] { R10240 += 1 };
  s10 -> s1 [108, 65535] { R10240 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10241 += 1, R10242 += 1 };
  s0 -> s1 [0, 65535] { R10242 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10242 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R10244 += 1 };
  s0 -> s0 [0, 65535] { R10243 += 1, R10244 += 1 };
  s0 -> s2 [0, 65535] { R10244 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R10244 += 1 };
  s0 -> s1 [59, 65535] { R10244 += 1 };
  s1 -> s1 [0, 57] { R10244 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10244 += 1 };
  s1 -> s1 [59, 65535] { R10244 += 1 };
  s2 -> s1 [0, 57] { R10244 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10244 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R10244 += 1 };
  s2 -> s1 [59, 65535] { R10244 += 1 };
  s3 -> s3 [0, 65535] { R10244 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R10246 += 1 };
  s0 -> s2 [0, 65535] { R10246 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R10245 += 1, R10246 += 1 };
  s0 -> s3 [43, 43] { R10246 += 1 };
  s0 -> s1 [44, 65535] { R10246 += 1 };
  s1 -> s1 [0, 42] { R10246 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R10246 += 1 };
  s1 -> s1 [44, 65535] { R10246 += 1 };
  s2 -> s1 [0, 42] { R10246 += 1 };
  s2 -> s2 [0, 65535] { R10246 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R10246 += 1 };
  s2 -> s1 [44, 65535] { R10246 += 1 };
  s3 -> s3 [0, 65535] { R10246 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10248 += 1 };
  s0 -> s0 [0, 65535] { R10247 += 1, R10248 += 1 };
  s0 -> s2 [0, 65535] { R10248 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R10248 += 1 };
  s0 -> s1 [66, 65535] { R10248 += 1 };
  s1 -> s1 [0, 64] { R10248 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10248 += 1 };
  s1 -> s1 [66, 65535] { R10248 += 1 };
  s2 -> s1 [0, 64] { R10248 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10248 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R10248 += 1 };
  s2 -> s1 [66, 65535] { R10248 += 1 };
  s3 -> s3 [0, 65535] { R10248 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R10250 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R10250 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10249 += 1, R10250 += 1 };
  s0 -> s3 [91, 91] { R10250 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R10250 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10250 += 1 };
  s1 -> s1 [0, 65535] { R10250 += 1, R40 += 1 };
  s2 -> s1 [0, 90] { R10250 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R10250 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10250 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R10250 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R10250 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10250 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10252 += 1, R42 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R10252 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R10251 += 1, R10252 += 1 };
  s1 -> s1 [0, 65535] { R10252 += 1, R42 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10252 += 1 };
  s2 -> s1 [0, 65535] { R10252 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10252 += 1, R41 += 1, R42 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10252 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 65535] { R10254 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R10253 += 1, R10254 += 1 };
  s0 -> s2 [0, 65535] { R10254 += 1, R60 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R10254 += 1, R59 += 1, R60 += 1 };
  s1 -> s2 [0, 65535] { R10254 += 1, R60 += 1, R31 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10254 += 1, R60 += 1, R31 += 1 };
  s2 -> s3 [0, 65535] { R10254 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10254 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R10256 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R10255 += 1, R10256 += 1 };
  s0 -> s2 [0, 65535] { R10256 += 1, R61 += 1, R62 += 1 };
  s0 -> s3 [108, 108] { R10256 += 1, R62 += 1 };
  s0 -> s1 [109, 65535] { R10256 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R10256 += 1, R62 += 1 };
  s1 -> s13 [0, 65535] { R10256 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R10256 += 1, R62 += 1 };
  s2 -> s2 [0, 65535] { R10256 += 1, R61 += 1, R62 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R10256 += 1, R62 += 1 };
  s2 -> s1 [109, 65535] { R10256 += 1, R62 += 1 };
  s3 -> s1 [0, 110] { R10256 += 1, R62 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10256 += 1 };
  s3 -> s5 [111, 111] { R10256 += 1, R62 += 1 };
  s3 -> s1 [112, 65535] { R10256 += 1, R62 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10256 += 1, R62 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10256 += 1 };
  s5 -> s6 [99, 99] { R10256 += 1, R62 += 1 };
  s5 -> s1 [100, 65535] { R10256 += 1, R62 += 1 };
  s6 -> s1 [0, 96] { R10256 += 1, R62 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10256 += 1 };
  s6 -> s7 [97, 97] { R10256 += 1, R62 += 1 };
  s6 -> s1 [98, 65535] { R10256 += 1, R62 += 1 };
  s7 -> s1 [0, 107] { R10256 += 1, R62 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R10256 += 1 };
  s7 -> s8 [108, 108] { R10256 += 1, R62 += 1 };
  s7 -> s1 [109, 65535] { R10256 += 1, R62 += 1 };
  s8 -> s1 [0, 103] { R10256 += 1, R62 += 1 };
  s8 -> s8 [0, 65535] { R10256 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R10256 += 1, R62 += 1 };
  s8 -> s1 [105, 65535] { R10256 += 1, R62 += 1 };
  s9 -> s1 [0, 110] { R10256 += 1, R62 += 1 };
  s9 -> s9 [0, 65535] { R10256 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R10256 += 1, R62 += 1 };
  s9 -> s1 [112, 65535] { R10256 += 1, R62 += 1 };
  s10 -> s1 [0, 114] { R10256 += 1, R62 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R10256 += 1 };
  s10 -> s11 [115, 115] { R10256 += 1, R62 += 1 };
  s10 -> s1 [116, 65535] { R10256 += 1, R62 += 1 };
  s11 -> s1 [0, 115] { R10256 += 1, R62 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10256 += 1 };
  s11 -> s12 [116, 116] { R10256 += 1, R62 += 1 };
  s11 -> s1 [117, 65535] { R10256 += 1, R62 += 1 };
  s12 -> s1 [0, 65535] { R10256 += 1, R62 += 1 };
  s13 -> s13 [0, 65535] { R10256 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65535] { R10258 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R10257 += 1, R10258 += 1 };
  s0 -> s2 [0, 65535] { R10258 += 1, R64 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R10258 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10258 += 1, R64 += 1, R44 += 1 };
  s2 -> s3 [0, 65535] { R10258 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10258 += 1, R64 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R10258 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R10260 += 1, R78 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R10259 += 1, R10260 += 1 };
  s0 -> s2 [0, 65535] { R10260 += 1, R77 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R10260 += 1, R78 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10260 += 1 };
  s2 -> s1 [0, 65535] { R10260 += 1, R78 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10260 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10260 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s0 [0, 65535] { R10261 += 1, R10262 += 1 };
  s0 -> s1 [0, 65535] { R10262 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10262 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R10264 += 1, R80 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10263 += 1, R10264 += 1 };
  s0 -> s2 [0, 65535] { R10264 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [43, 43] { R10264 += 1, R80 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R10264 += 1, R80 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R10264 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R10264 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R10264 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R10264 += 1, R80 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R10264 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R10264 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R10264 += 1, R80 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10264 += 1, R79 += 1, R80 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R10264 += 1, R80 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R10264 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R10264 += 1, R80 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R10264 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10264 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10264 += 1, R80 += 1, R43 += 1 };
  s5 -> s5 [0, 65535] { R10264 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10266 += 1, R10166 += 1 };
  s0 -> s2 [0, 65535] { R10266 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s0 [0, 65535] { R10265 += 1, R10266 += 1 };
  s0 -> s1 [66, 65535] { R10266 += 1, R10166 += 1 };
  s1 -> s1 [0, 64] { R10266 += 1, R10166 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10266 += 1 };
  s1 -> s1 [66, 65535] { R10266 += 1, R10166 += 1 };
  s2 -> s1 [0, 64] { R10266 += 1, R10166 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10266 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s1 [66, 65535] { R10266 += 1, R10166 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R10267 += 1, R10268 += 1 };
  s0 -> s1 [0, 65535] { R10268 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s2 [0, 65535] { R10268 += 1, R10168 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10268 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s2 [0, 65535] { R10268 += 1, R10168 += 1, R32 += 1 };
  s2 -> s3 [0, 65535] { R10268 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10268 += 1, R10168 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R10268 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R10270 += 1, R10170 += 1 };
  s0 -> s0 [0, 65535] { R10269 += 1, R10270 += 1 };
  s0 -> s2 [0, 65535] { R10270 += 1, R10169 += 1, R10170 += 1 };
  s0 -> s1 [80, 65535] { R10270 += 1, R10170 += 1 };
  s1 -> s1 [0, 65] { R10270 += 1, R10170 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10270 += 1 };
  s1 -> s1 [80, 65535] { R10270 += 1, R10170 += 1 };
  s2 -> s1 [0, 65] { R10270 += 1, R10170 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10270 += 1, R10169 += 1, R10170 += 1 };
  s2 -> s1 [80, 65535] { R10270 += 1, R10170 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R10271 += 1, R10272 += 1 };
  s0 -> s1 [0, 65535] { R10272 += 1, R10171 += 1, R10172 += 1 };
  s0 -> s2 [0, 65535] { R10272 += 1, R10172 += 1, R454 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10272 += 1, R10171 += 1, R10172 += 1 };
  s1 -> s2 [0, 65535] { R10272 += 1, R10172 += 1, R454 += 1 };
  s2 -> s3 [0, 65535] { R10272 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10272 += 1, R10172 += 1, R454 += 1 };
  s3 -> s3 [0, 65535] { R10272 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R10274 += 1, R10174 += 1 };
  s0 -> s2 [0, 65535] { R10274 += 1, R10173 += 1, R10174 += 1 };
  s0 -> s3 [0, 65535] { R10274 += 1, R10174 += 1, R456 += 1 };
  s0 -> s0 [0, 65535] { R10273 += 1, R10274 += 1 };
  s0 -> s1 [81, 65535] { R10274 += 1, R10174 += 1 };
  s1 -> s1 [0, 79] { R10274 += 1, R10174 += 1 };
  s1 -> s1 [0, 65535] { R10274 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R10274 += 1, R10174 += 1 };
  s2 -> s1 [0, 79] { R10274 += 1, R10174 += 1 };
  s2 -> s2 [0, 65535] { R10274 += 1, R10173 += 1, R10174 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10274 += 1, R10174 += 1, R456 += 1 };
  s2 -> s1 [81, 65535] { R10274 += 1, R10174 += 1 };
  s3 -> s1 [0, 79] { R10274 += 1, R10174 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10274 += 1, R10174 += 1, R456 += 1 };
  s3 -> s5 [0, 65535] { R10274 += 1 };
  s3 -> s1 [81, 65535] { R10274 += 1, R10174 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10274 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R10276 += 1, R10176 += 1, R460 += 1 };
  s0 -> s2 [0, 65535] { R10276 += 1, R10175 += 1, R10176 += 1 };
  s0 -> s0 [0, 65535] { R10275 += 1, R10276 += 1 };
  s0 -> s3 [0, 65535] { R10276 += 1, R10176 += 1, R459 += 1, R460 += 1 };
  s0 -> s1 [81, 65535] { R10276 += 1, R10176 += 1, R460 += 1 };
  s1 -> s1 [0, 79] { R10276 += 1, R10176 += 1, R460 += 1 };
  s1 -> s1 [0, 65535] { R10276 += 1, R10176 += 1 };
  s1 -> s4 [0, 65535] { R10276 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R10276 += 1, R10176 += 1, R460 += 1 };
  s2 -> s1 [0, 79] { R10276 += 1, R10176 += 1, R460 += 1 };
  s2 -> s2 [0, 65535] { R10276 += 1, R10175 += 1, R10176 += 1 };
  s2 -> s3 [0, 65535] { R10276 += 1, R10176 += 1, R459 += 1, R460 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R10276 += 1, R10176 += 1, R460 += 1 };
  s3 -> s1 [0, 79] { R10276 += 1, R10176 += 1, R460 += 1 };
  s3 -> s3 [0, 65535] { R10276 += 1, R10176 += 1, R459 += 1, R460 += 1 };
  s3 -> s4 [0, 65535] { R10276 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R10276 += 1, R10176 += 1, R460 += 1 };
  s4 -> s4 [0, 65535] { R10276 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10278 += 1, R10177 += 1, R10178 += 1 };
  s0 -> s2 [0, 65535] { R10278 += 1, R10178 += 1, R464 += 1, R465 += 1 };
  s0 -> s0 [0, 65535] { R10277 += 1, R10278 += 1 };
  s0 -> s3 [0, 65535] { R10278 += 1, R10178 += 1, R465 += 1, R466 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10278 += 1, R10177 += 1, R10178 += 1 };
  s1 -> s2 [0, 65535] { R10278 += 1, R10178 += 1, R464 += 1, R465 += 1 };
  s1 -> s3 [0, 65535] { R10278 += 1, R10178 += 1, R465 += 1, R466 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10278 += 1, R10178 += 1, R464 += 1, R465 += 1 };
  s2 -> s3 [0, 65535] { R10278 += 1, R10178 += 1, R465 += 1, R466 += 1 };
  s2 -> s6 [0, 65535] { R10278 += 1 };
  s3 -> s4 [0, 65535] { R10278 += 1, R10178 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10278 += 1, R10178 += 1, R465 += 1, R466 += 1 };
  s3 -> s6 [0, 65535] { R10278 += 1 };
  s4 -> s4 [0, 65535] { R10278 += 1, R10178 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10278 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10278 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R10280 += 1, R10180 += 1, R7386 += 1 };
  s0 -> s0 [0, 65535] { R10279 += 1, R10280 += 1 };
  s0 -> s1 [0, 65535] { R10280 += 1, R10180 += 1 };
  s0 -> s2 [0, 65535] { R10280 += 1, R10179 += 1, R10180 += 1 };
  s0 -> s1 [91, 65535] { R10280 += 1, R10180 += 1, R7386 += 1 };
  s1 -> s1 [0, 80] { R10280 += 1, R10180 += 1, R7386 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10280 += 1 };
  s1 -> s1 [0, 65535] { R10280 += 1, R10180 += 1 };
  s1 -> s1 [91, 65535] { R10280 += 1, R10180 += 1, R7386 += 1 };
  s2 -> s1 [0, 80] { R10280 += 1, R10180 += 1, R7386 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10280 += 1, R10180 += 1 };
  s2 -> s2 [0, 65535] { R10280 += 1, R10179 += 1, R10180 += 1 };
  s2 -> s1 [91, 65535] { R10280 += 1, R10180 += 1, R7386 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10280 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R10281 += 1, R10282 += 1 };
  s0 -> s1 [0, 65535] { R10282 += 1, R10182 += 1, R9695 += 1, R9696 += 1 };
  s0 -> s2 [0, 65535] { R10282 += 1, R10181 += 1, R10182 += 1 };
  s0 -> s3 [0, 65535] { R10282 += 1, R10182 += 1 };
  s1 -> s1 [0, 65535] { R10282 += 1, R10182 += 1, R9695 += 1, R9696 += 1 };
  s1 -> s4 [0, 65535] { R10282 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10282 += 1, R10182 += 1 };
  s2 -> s1 [0, 65535] { R10282 += 1, R10182 += 1, R9695 += 1, R9696 += 1 };
  s2 -> s2 [0, 65535] { R10282 += 1, R10181 += 1, R10182 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10282 += 1, R10182 += 1 };
  s3 -> s4 [0, 65535] { R10282 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10282 += 1, R10182 += 1 };
  s4 -> s4 [0, 65535] { R10282 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R10283 += 1, R10284 += 1 };
  s0 -> s1 [0, 65535] { R10284 += 1, R10184 += 1, R9700 += 1, R9701 += 1 };
  s0 -> s2 [0, 65535] { R10284 += 1, R10183 += 1, R10184 += 1 };
  s0 -> s3 [0, 65535] { R10284 += 1, R10184 += 1, R9701 += 1, R9702 += 1 };
  s1 -> s1 [0, 65535] { R10284 += 1, R10184 += 1, R9700 += 1, R9701 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10284 += 1, R10184 += 1, R9701 += 1, R9702 += 1 };
  s1 -> s6 [0, 65535] { R10284 += 1 };
  s2 -> s1 [0, 65535] { R10284 += 1, R10184 += 1, R9700 += 1, R9701 += 1 };
  s2 -> s2 [0, 65535] { R10284 += 1, R10183 += 1, R10184 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10284 += 1, R10184 += 1, R9701 += 1, R9702 += 1 };
  s3 -> s4 [0, 65535] { R10284 += 1, R10184 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10284 += 1, R10184 += 1, R9701 += 1, R9702 += 1 };
  s3 -> s6 [0, 65535] { R10284 += 1 };
  s4 -> s4 [0, 65535] { R10284 += 1, R10184 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10284 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10284 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R10286 += 1, R10186 += 1 };
  s0 -> s0 [0, 65535] { R10285 += 1, R10286 += 1 };
  s0 -> s2 [0, 65535] { R10286 += 1, R10185 += 1, R10186 += 1 };
  s1 -> s1 [0, 65535] { R10286 += 1, R10186 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10286 += 1 };
  s2 -> s1 [0, 65535] { R10286 += 1, R10186 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10286 += 1, R10185 += 1, R10186 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10286 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R10287 += 1, R10288 += 1 };
  s0 -> s1 [0, 65535] { R10288 += 1, R10187 += 1, R10188 += 1 };
  s0 -> s2 [0, 65535] { R10288 += 1, R10188 += 1 };
  s0 -> s3 [0, 65535] { R10288 += 1, R10188 += 1, R10163 += 1, R10164 += 1 };
  s1 -> s1 [0, 65535] { R10288 += 1, R10187 += 1, R10188 += 1 };
  s1 -> s2 [0, 65535] { R10288 += 1, R10188 += 1 };
  s1 -> s3 [0, 65535] { R10288 += 1, R10188 += 1, R10163 += 1, R10164 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R10288 += 1 };
  s2 -> s2 [0, 65535] { R10288 += 1, R10188 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10288 += 1 };
  s3 -> s2 [0, 65535] { R10288 += 1, R10188 += 1 };
  s3 -> s3 [0, 65535] { R10288 += 1, R10188 += 1, R10163 += 1, R10164 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10288 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R10290 += 1, R10203 += 1, R10204 += 1 };
  s0 -> s2 [0, 65535] { R10290 += 1, R10204 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R10289 += 1, R10290 += 1 };
  s1 -> s1 [0, 65535] { R10290 += 1, R10203 += 1, R10204 += 1 };
  s1 -> s2 [0, 65535] { R10290 += 1, R10204 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10290 += 1, R10204 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R10290 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10290 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10292 += 1, R10206 += 1 };
  s0 -> s2 [0, 65535] { R10292 += 1, R10205 += 1, R10206 += 1 };
  s0 -> s0 [0, 65535] { R10291 += 1, R10292 += 1 };
  s0 -> s3 [65, 65] { R10292 += 1, R10206 += 1 };
  s0 -> s4 [65, 65] { R10292 += 1, R10206 += 1 };
  s0 -> s5 [80, 80] { R10292 += 1, R10206 += 1 };
  s0 -> s1 [81, 65535] { R10292 += 1, R10206 += 1 };
  s1 -> s1 [0, 64] { R10292 += 1, R10206 += 1 };
  s1 -> s3 [65, 65] { R10292 += 1, R10206 += 1 };
  s1 -> s4 [65, 65] { R10292 += 1, R10206 += 1 };
  s1 -> s5 [80, 80] { R10292 += 1, R10206 += 1 };
  s1 -> s1 [81, 65535] { R10292 += 1, R10206 += 1 };
  s2 -> s1 [0, 64] { R10292 += 1, R10206 += 1 };
  s2 -> s2 [0, 65535] { R10292 += 1, R10205 += 1, R10206 += 1 };
  s2 -> s3 [65, 65] { R10292 += 1, R10206 += 1 };
  s2 -> s4 [65, 65] { R10292 += 1, R10206 += 1 };
  s2 -> s5 [80, 80] { R10292 += 1, R10206 += 1 };
  s2 -> s1 [81, 65535] { R10292 += 1, R10206 += 1 };
  s3 -> s3 [0, 65] { R10292 += 1, R10206 += 1 };
  s3 -> s8 [80, 80] { R10292 += 1, R10206 += 1 };
  s3 -> s3 [81, 65535] { R10292 += 1, R10206 += 1 };
  s5 -> s5 [0, 64] { R10292 += 1, R10206 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10292 += 1 };
  s5 -> s7 [65, 65] { R10292 += 1, R10206 += 1 };
  s5 -> s8 [65, 65] { R10292 += 1, R10206 += 1 };
  s5 -> s5 [80, 65535] { R10292 += 1, R10206 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10292 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R10292 += 1, R10206 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10292 += 1 };
  s8 -> s8 [80, 65535] { R10292 += 1, R10206 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10294 += 1, R10208 += 1, R453 += 1 };
  s0 -> s0 [0, 65535] { R10293 += 1, R10294 += 1 };
  s0 -> s2 [0, 65535] { R10294 += 1, R10207 += 1, R10208 += 1 };
  s0 -> s3 [65, 65] { R10294 += 1, R10208 += 1, R453 += 1 };
  s0 -> s4 [65, 65] { R10294 += 1, R10208 += 1, R453 += 1 };
  s0 -> s1 [66, 65535] { R10294 += 1, R10208 += 1, R453 += 1 };
  s1 -> s1 [0, 64] { R10294 += 1, R10208 += 1, R453 += 1 };
  s1 -> s1 [0, 65535] { R10294 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10294 += 1, R10208 += 1, R453 += 1 };
  s1 -> s4 [65, 65] { R10294 += 1, R10208 += 1, R453 += 1 };
  s1 -> s1 [66, 65535] { R10294 += 1, R10208 += 1, R453 += 1 };
  s2 -> s1 [0, 64] { R10294 += 1, R10208 += 1, R453 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10294 += 1, R10207 += 1, R10208 += 1 };
  s2 -> s3 [65, 65] { R10294 += 1, R10208 += 1, R453 += 1 };
  s2 -> s4 [65, 65] { R10294 += 1, R10208 += 1, R453 += 1 };
  s2 -> s1 [66, 65535] { R10294 += 1, R10208 += 1, R453 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10294 += 1 };
  s3 -> s3 [0, 65535] { R10294 += 1, R10208 += 1, R453 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10294 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10294 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10296 += 1, R10210 += 1, R455 += 1 };
  s0 -> s0 [0, 65535] { R10295 += 1, R10296 += 1 };
  s0 -> s2 [0, 65535] { R10296 += 1, R10209 += 1, R10210 += 1 };
  s0 -> s3 [65, 65] { R10296 += 1, R10210 += 1, R455 += 1 };
  s0 -> s4 [65, 65] { R10296 += 1, R10210 += 1, R455 += 1 };
  s0 -> s1 [66, 65535] { R10296 += 1, R10210 += 1, R455 += 1 };
  s1 -> s1 [0, 64] { R10296 += 1, R10210 += 1, R455 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10296 += 1 };
  s1 -> s3 [65, 65] { R10296 += 1, R10210 += 1, R455 += 1 };
  s1 -> s4 [65, 65] { R10296 += 1, R10210 += 1, R455 += 1 };
  s1 -> s1 [66, 65535] { R10296 += 1, R10210 += 1, R455 += 1 };
  s2 -> s1 [0, 64] { R10296 += 1, R10210 += 1, R455 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10296 += 1, R10209 += 1, R10210 += 1 };
  s2 -> s3 [65, 65] { R10296 += 1, R10210 += 1, R455 += 1 };
  s2 -> s4 [65, 65] { R10296 += 1, R10210 += 1, R455 += 1 };
  s2 -> s1 [66, 65535] { R10296 += 1, R10210 += 1, R455 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10296 += 1, R10210 += 1, R455 += 1 };
  s3 -> s6 [0, 65535] { R10296 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10296 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10296 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s0 -> s0 [0, 65535] { R10297 += 1, R10298 += 1 };
  s0 -> s2 [0, 65535] { R10298 += 1, R10211 += 1, R10212 += 1 };
  s0 -> s3 [65, 65] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s0 -> s4 [65, 65] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s0 -> s1 [66, 65535] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 64] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10298 += 1 };
  s1 -> s3 [65, 65] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s1 -> s4 [65, 65] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [66, 65535] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [0, 64] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10298 += 1, R10211 += 1, R10212 += 1 };
  s2 -> s3 [65, 65] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s2 -> s4 [65, 65] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [66, 65535] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s3 -> s3 [0, 65535] { R10298 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10298 += 1, R10212 += 1, R457 += 1, R458 += 1 };
  s4 -> s6 [0, 65535] { R10298 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10298 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s0 -> s2 [0, 65535] { R10300 += 1, R10213 += 1, R10214 += 1 };
  s0 -> s0 [0, 65535] { R10299 += 1, R10300 += 1 };
  s0 -> s3 [65, 65] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s0 -> s4 [65, 65] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s0 -> s1 [66, 65535] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 64] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10300 += 1 };
  s1 -> s3 [65, 65] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s1 -> s4 [65, 65] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [66, 65535] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [0, 64] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10300 += 1, R10213 += 1, R10214 += 1 };
  s2 -> s3 [65, 65] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s2 -> s4 [65, 65] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [66, 65535] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10300 += 1 };
  s3 -> s3 [0, 65535] { R10300 += 1, R10214 += 1, R461 += 1, R462 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10300 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10300 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s0 -> s2 [0, 64] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s3 [0, 65535] { R10302 += 1, R10215 += 1, R10216 += 1 };
  s0 -> s0 [0, 65535] { R10301 += 1, R10302 += 1 };
  s0 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s0 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s0 -> s6 [65, 65] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s7 [65, 65] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s0 -> s2 [66, 65535] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s1 [91, 107] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s0 -> s8 [108, 108] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s0 -> s1 [109, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s1 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s1 -> s1 [0, 65535] { R10302 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s4 [65, 65] { R10302 += 1, R10216 += 1 };
  s1 -> s5 [65, 65] { R10302 += 1, R10216 += 1 };
  s1 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s1 -> s1 [66, 65535] { R10302 += 1, R10216 += 1 };
  s1 -> s1 [91, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s2 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s2 -> s2 [0, 64] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s2 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s2 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s2 -> s6 [65, 65] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s2 -> s7 [65, 65] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s2 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s2 -> s2 [66, 65535] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s2 -> s1 [91, 107] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s2 -> s8 [108, 108] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s2 -> s1 [109, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s3 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s3 -> s2 [0, 64] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s3 [0, 65535] { R10302 += 1, R10215 += 1, R10216 += 1 };
  s3 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s3 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s3 -> s6 [65, 65] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s7 [65, 65] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s3 -> s2 [66, 65535] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s1 [91, 107] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s3 -> s8 [108, 108] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s3 -> s1 [109, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s4 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s4 -> s4 [0, 65535] { R10302 += 1, R10216 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s35 [0, 65535] { R10302 += 1 };
  s4 -> s4 [91, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s5 -> s34 [0, 65535];
  s5 -> s5 [0, 65535] { R10302 += 1 };
  s7 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s7 -> s7 [0, 65535] { R10302 += 1, R10216 += 1, R7383 += 1, R7384 += 1 };
  s7 -> s4 [91, 107] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s7 -> s10 [108, 108] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s7 -> s4 [109, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s8 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s8 -> s8 [0, 64] { R10302 += 1, R10216 += 1 };
  s8 -> s9 [65, 65] { R10302 += 1, R10216 += 1 };
  s8 -> s10 [65, 65] { R10302 += 1, R10216 += 1 };
  s8 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s8 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s8 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s8 -> s8 [66, 65535] { R10302 += 1, R10216 += 1 };
  s8 -> s1 [91, 110] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s8 -> s11 [111, 111] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s8 -> s1 [112, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s10 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s10 -> s10 [0, 65535] { R10302 += 1, R10216 += 1 };
  s10 -> s4 [91, 110] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s10 -> s13 [111, 111] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s10 -> s4 [112, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s11 -> s11 [0, 64] { R10302 += 1, R10216 += 1 };
  s11 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s11 -> s12 [65, 65] { R10302 += 1, R10216 += 1 };
  s11 -> s13 [65, 65] { R10302 += 1, R10216 += 1 };
  s11 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s11 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s11 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s11 -> s11 [66, 65535] { R10302 += 1, R10216 += 1 };
  s11 -> s1 [91, 98] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s11 -> s14 [99, 99] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s11 -> s1 [100, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s13 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s13 -> s13 [0, 65535] { R10302 += 1, R10216 += 1 };
  s13 -> s4 [91, 98] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s13 -> s16 [99, 99] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s13 -> s4 [100, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s14 -> s14 [0, 64] { R10302 += 1, R10216 += 1 };
  s14 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s14 -> s15 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s14 -> s16 [65, 65] { R10302 += 1, R10216 += 1 };
  s14 -> s17 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s14 -> s18 [65, 65] { R10302 += 1, R10216 += 1 };
  s14 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s14 -> s14 [66, 65535] { R10302 += 1, R10216 += 1 };
  s14 -> s1 [91, 96] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s14 -> s19 [97, 97] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s14 -> s1 [98, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s15 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s15 -> s15 [0, 65535] { R10302 += 1, R10216 += 1 };
  s15 -> s4 [91, 107] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s15 -> s21 [108, 108] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s15 -> s4 [109, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s16 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s16 -> s16 [0, 65535] { R10302 += 1, R10216 += 1 };
  s16 -> s4 [91, 96] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s16 -> s15 [97, 97] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s16 -> s4 [98, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s19 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s19 -> s19 [0, 64] { R10302 += 1, R10216 += 1 };
  s19 -> s15 [65, 65] { R10302 += 1, R10216 += 1 };
  s19 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s19 -> s17 [65, 65] { R10302 += 1, R10216 += 1 };
  s19 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s19 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s19 -> s19 [66, 65535] { R10302 += 1, R10216 += 1 };
  s19 -> s1 [91, 107] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s19 -> s20 [108, 108] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s19 -> s1 [109, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s20 -> s20 [0, 64] { R10302 += 1, R10216 += 1 };
  s20 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s20 -> s21 [65, 65] { R10302 += 1, R10216 += 1 };
  s20 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s20 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s20 -> s22 [65, 65] { R10302 += 1, R10216 += 1 };
  s20 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s20 -> s20 [66, 65535] { R10302 += 1, R10216 += 1 };
  s20 -> s1 [91, 103] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s20 -> s23 [104, 104] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s20 -> s1 [105, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s21 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s21 -> s21 [0, 65535] { R10302 += 1, R10216 += 1 };
  s21 -> s4 [91, 103] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s21 -> s25 [104, 104] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s21 -> s4 [105, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s23 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s23 -> s23 [0, 64] { R10302 += 1, R10216 += 1 };
  s23 -> s24 [65, 65] { R10302 += 1, R10216 += 1 };
  s23 -> s25 [65, 65] { R10302 += 1, R10216 += 1 };
  s23 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s23 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s23 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s23 -> s23 [66, 65535] { R10302 += 1, R10216 += 1 };
  s23 -> s1 [91, 110] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s23 -> s26 [111, 111] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s23 -> s1 [112, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s25 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s25 -> s25 [0, 65535] { R10302 += 1, R10216 += 1 };
  s25 -> s4 [91, 110] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s25 -> s28 [111, 111] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s25 -> s4 [112, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s26 -> s26 [0, 64] { R10302 += 1, R10216 += 1 };
  s26 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s26 -> s27 [65, 65] { R10302 += 1, R10216 += 1 };
  s26 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s26 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s26 -> s28 [65, 65] { R10302 += 1, R10216 += 1 };
  s26 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s26 -> s26 [66, 65535] { R10302 += 1, R10216 += 1 };
  s26 -> s1 [91, 114] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s26 -> s29 [115, 115] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s26 -> s1 [116, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s28 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s28 -> s28 [0, 65535] { R10302 += 1, R10216 += 1 };
  s28 -> s4 [91, 114] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s28 -> s30 [115, 115] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s28 -> s4 [116, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s29 -> s29 [0, 64] { R10302 += 1, R10216 += 1 };
  s29 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s29 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s29 -> s30 [65, 65] { R10302 += 1, R10216 += 1 };
  s29 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s29 -> s31 [65, 65] { R10302 += 1, R10216 += 1 };
  s29 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s29 -> s29 [66, 65535] { R10302 += 1, R10216 += 1 };
  s29 -> s1 [91, 115] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s29 -> s32 [116, 116] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s29 -> s1 [117, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s30 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s30 -> s30 [0, 65535] { R10302 += 1, R10216 += 1 };
  s30 -> s4 [91, 115] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s30 -> s33 [116, 116] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s30 -> s4 [117, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s32 -> s1 [0, 64] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s32 -> s4 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s32 -> s5 [65, 65] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s32 -> s1 [66, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s32 -> s1 [91, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s33 -> s4 [0, 80] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s33 -> s4 [91, 65535] { R10302 += 1, R10216 += 1, R7384 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10302 += 1 };
  accepting s4, s34, s5, s1, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s2 [0, 64] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s0 [0, 65535] { R10303 += 1, R10304 += 1 };
  s0 -> s3 [0, 65535] { R10304 += 1, R10217 += 1, R10218 += 1 };
  s0 -> s4 [65, 65] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s5 [65, 65] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s6 [65, 65] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s7 [65, 65] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s1 [66, 65535] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s2 [66, 65535] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s1 -> s1 [0, 64] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s1 [0, 65535] { R10304 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s6 [65, 65] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s1 [66, 65535] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s1 [0, 64] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s2 [0, 64] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s2 -> s4 [65, 65] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s5 [65, 65] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s2 -> s6 [65, 65] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s7 [65, 65] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s2 -> s1 [66, 65535] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s2 [66, 65535] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s1 [0, 64] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s2 [0, 64] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s3 [0, 65535] { R10304 += 1, R10217 += 1, R10218 += 1 };
  s3 -> s4 [65, 65] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s5 [65, 65] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s6 [65, 65] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s7 [65, 65] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s1 [66, 65535] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s2 [66, 65535] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s4 -> s9 [0, 65535] { R10304 += 1 };
  s4 -> s4 [0, 65535] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10304 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R10304 += 1, R10218 += 1, R9692 += 1, R9693 += 1 };
  s7 -> s7 [0, 65535] { R10304 += 1, R10218 += 1, R9691 += 1, R9692 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10304 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s2 [0, 65535] { R10306 += 1, R10219 += 1, R10220 += 1 };
  s0 -> s0 [0, 65535] { R10305 += 1, R10306 += 1 };
  s0 -> s3 [65, 65] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s4 [65, 65] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s1 [66, 65535] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s1 [0, 64] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s1 [0, 65535] { R10306 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s4 [65, 65] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s1 [66, 65535] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s1 [0, 64] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s2 [0, 65535] { R10306 += 1, R10219 += 1, R10220 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s4 [65, 65] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s1 [66, 65535] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10306 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10306 += 1 };
  s4 -> s4 [0, 65535] { R10306 += 1, R10220 += 1, R9697 += 1, R9698 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10306 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R10308 += 1, R10222 += 1 };
  s0 -> s2 [0, 65535] { R10308 += 1, R10221 += 1, R10222 += 1 };
  s0 -> s0 [0, 65535] { R10307 += 1, R10308 += 1 };
  s0 -> s3 [65, 65] { R10308 += 1, R10222 += 1 };
  s0 -> s4 [65, 65] { R10308 += 1, R10222 += 1 };
  s0 -> s1 [66, 65535] { R10308 += 1, R10222 += 1 };
  s1 -> s1 [0, 64] { R10308 += 1, R10222 += 1 };
  s1 -> s1 [0, 65535] { R10308 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10308 += 1, R10222 += 1 };
  s1 -> s4 [65, 65] { R10308 += 1, R10222 += 1 };
  s1 -> s1 [66, 65535] { R10308 += 1, R10222 += 1 };
  s2 -> s1 [0, 64] { R10308 += 1, R10222 += 1 };
  s2 -> s2 [0, 65535] { R10308 += 1, R10221 += 1, R10222 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10308 += 1, R10222 += 1 };
  s2 -> s4 [65, 65] { R10308 += 1, R10222 += 1 };
  s2 -> s1 [66, 65535] { R10308 += 1, R10222 += 1 };
  s3 -> s3 [0, 65535] { R10308 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10308 += 1, R10222 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10308 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10308 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [0, 64] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s0 [0, 65535] { R10309 += 1, R10310 += 1 };
  s0 -> s3 [0, 65535] { R10310 += 1, R10223 += 1, R10224 += 1 };
  s0 -> s4 [65, 65] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s5 [65, 65] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [65, 65] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s7 [65, 65] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [66, 79] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [66, 65535] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s8 [80, 80] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [81, 65535] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [0, 64] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [0, 64] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [65, 65] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s5 [65, 65] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s6 [65, 65] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s7 [65, 65] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s2 [66, 79] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [66, 65535] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s8 [80, 80] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s2 [81, 65535] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 64] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s6 [65, 65] { R10310 += 1, R10224 += 1 };
  s2 -> s7 [65, 65] { R10310 += 1, R10224 += 1 };
  s2 -> s2 [66, 79] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [66, 65535] { R10310 += 1, R10224 += 1 };
  s2 -> s8 [80, 80] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [81, 65535] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [0, 64] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [0, 64] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s3 [0, 65535] { R10310 += 1, R10223 += 1, R10224 += 1 };
  s3 -> s4 [65, 65] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s5 [65, 65] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [65, 65] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s7 [65, 65] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [66, 79] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [66, 65535] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s8 [80, 80] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [81, 65535] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s7 [0, 79] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s4 [0, 65535] { R10310 += 1, R10224 += 1, R10159 += 1, R10160 += 1 };
  s4 -> s11 [80, 80] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s7 [81, 65535] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s7 [0, 79] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s7 [0, 65535] { R10310 += 1, R10224 += 1 };
  s7 -> s11 [80, 80] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s7 [81, 65535] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s8 [0, 64] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s8 [0, 65535] { R10310 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s11 [65, 65] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s8 [66, 65535] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10310 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10310 += 1, R10224 += 1, R10160 += 1, R10161 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10310 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10310 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R5 = R10188 && R6 = R10310 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R59 = 0 && R60 = R10188 && R61 = 0 && R62 = R10188 && R63 = 0 && R64 = R10188 && R65 = 0 && R66 = R10310 && R67 = 0 && R68 = R10310 && R69 = 0 && R70 = R10310 && R86 + R85 = 0 && R10165 = 0 && R10166 = R10188 && R10167 = 0 && R10168 = R10188 && R10169 = 0 && R10170 = R10188 && R10171 = 0 && R10172 = R10188 && R10173 = 0 && R10174 = R10188 && R10175 = 0 && R10176 = R10188 && R10177 = 0 && R10178 = R10188 && R10179 = 0 && R10180 = R10188 && R10181 = 0 && R10182 = R10188 && R10183 = 0 && R10184 = R10188 && R10185 = 0 && R10186 = R10188 && R10187 = 0 && R10189 = 0 && R10190 = R10310 && R10191 = 0 && R10192 = R10310 && R10193 = 0 && R10194 = R10310 && R10195 = 0 && R10196 = R10310 && R10197 = 0 && R10198 = R10310 && R10199 = 0 && R10200 = R10310 && R10201 = 0 && R10202 = R10310 && R10205 = 0 && R10206 = 0 && R10215 = 0 && R10216 = 0 && R10217 = 0 && R10218 = 0 && R10223 = 0 && R10224 = 0 && R10239 = 10 && R10240 = R10310 && R10241 = 10 && R10242 = R10310 && R10243 = 10 && R10244 = R10310 && R10245 = 10 && R10246 = R10310 && R10247 = 10 && R10248 = R10310 && R10249 = 10 && R10250 = R10310 && R10251 = 10 && R10252 = R10310 && R10253 = 10 && R10254 = R10310 && R10255 = 10 && R10256 = R10310 && R10257 = 10 && R10258 = R10310 && R10259 = 10 && R10260 = R10310 && R10261 = 10 && R10262 = R10310 && R10263 = 10 && R10264 = R10310 && R10265 = 10 && R10266 = R10310 && R10267 = 10 && R10268 = R10310 && R10269 = 10 && R10270 = R10310 && R10271 = 10 && R10272 = R10310 && R10273 = 10 && R10274 = R10310 && R10275 = 10 && R10276 = R10310 && R10277 = 10 && R10278 = R10310 && R10279 = 10 && R10280 = R10310 && R10281 = 10 && R10282 = R10310 && R10283 = 10 && R10284 = R10310 && R10285 = 10 && R10286 = R10310 && R10287 = 10 && R10288 = R10310 && R10289 = 10 && R10290 = R10310 && R10291 = 10 && R10292 = R10310 && R10293 = 10 && R10294 = R10310 && R10295 = 10 && R10296 = R10310 && R10297 = 10 && R10298 = R10310 && R10299 = 10 && R10300 = R10310 && R10301 = 10 && R10302 = R10310 && R10303 = 10 && R10304 = R10310 && R10305 = 10 && R10306 = R10310 && R10307 = 10 && R10308 = R10310 && R10309 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R9696 + R9693 + R10164 + R10161 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && -1*R454 + -1*R453 < 1 && R456 + R455 < 1 && 0 < R10188 && 9 < R10310 && (R454 + R453 != 0 || R466 + R463 = 0 || (R459 + R457 = 0 && R460 + R458 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R464 + R461 = 0 && R465 + R462 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R7385 + R7383 = 0 && R7386 + R7384 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R9694 + R9691 = 0 && R9695 + R9692 = 0)) && (R459 + R457 != 0 || R454 + R453 + -1*R460 + -1*R458 = 0 || R454 + R453 < 1) && (R464 + R461 != 0 || R454 + R453 + -1*R465 + -1*R462 = 0 || R454 + R453 < 1) && (R7385 + R7383 != 0 || R454 + R453 + -1*R7386 + -1*R7384 = 0 || R454 + R453 < 1) && (R9694 + R9691 != 0 || R454 + R453 + -1*R9695 + -1*R9692 = 0 || R454 + R453 < 1) && (R33 = 0 || (R77 = 0 && R78 = 0)) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R34 = 0 || (R10203 = 0 && R10204 = 0)) && (R34 = 0 || (R10207 = 0 && R10208 = 0)) && (R34 = 0 || (R10209 = 0 && R10210 = 0)) && (R34 = 0 || (R10211 = 0 && R10212 = 0)) && (R34 = 0 || (R10213 = 0 && R10214 = 0)) && (R34 = 0 || (R10219 = 0 && R10220 = 0)) && (R34 = 0 || (R10221 = 0 && R10222 = 0)) && (R37 = 0 || (R10225 = 0 && R10226 = 0)) && (R37 = 0 || (R10227 = 0 && R10228 = 0)) && (R37 = 0 || (R10229 = 0 && R10230 = 0)) && (R37 = 0 || (R10231 = 0 && R10232 = 0)) && (R37 = 0 || (R10233 = 0 && R10234 = 0)) && (R37 = 0 || (R10235 = 0 && R10236 = 0)) && (R37 = 0 || (R10237 = 0 && R10238 = 0)) && (R38 = 0 || (R81 = 0 && R82 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R94 + R91 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R459 + R457 = 0 || R454 + R453 < 1) && (R464 + R461 = 0 || R454 + R453 < 1) && (R7385 + R7383 = 0 || R454 + R453 < 1) && (R9694 + R9691 = 0 || R454 + R453 < 1) && (R9702 + R9699 = 0 || (R9700 + R9697 = 0 && R9701 + R9698 = 0)) && (R9702 + R9699 = 0 || (R10162 + R10159 = 0 && R10163 + R10160 = 0));
// End of Parikh automata intersection problem
