// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R10007, R10008, R10009, R10010, R10011, R10012, R10013, R10014, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R10100, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R14, R15, R18, R21, R24, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R453, R454, R455, R456, R457, R458, R459, R46, R460, R461, R462, R463, R464, R465, R466, R5, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R7383, R7384, R7385, R7386, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R9691, R9692, R9693, R9694, R9695, R9696, R9697, R9698, R9699, R97, R9700, R9701, R9702, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [108, 108] { R68 += 1 };
  s0 -> s1 [109, 65535] { R68 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1 };
  s2 -> s1 [0, 110] { R68 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R68 += 1 };
  s2 -> s1 [112, 65535] { R68 += 1 };
  s3 -> s1 [0, 98] { R68 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R68 += 1 };
  s3 -> s1 [100, 65535] { R68 += 1 };
  s4 -> s1 [0, 96] { R68 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R68 += 1 };
  s4 -> s1 [98, 65535] { R68 += 1 };
  s5 -> s1 [0, 107] { R68 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R68 += 1 };
  s5 -> s1 [109, 65535] { R68 += 1 };
  s6 -> s1 [0, 103] { R68 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R68 += 1 };
  s6 -> s1 [105, 65535] { R68 += 1 };
  s7 -> s1 [0, 110] { R68 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R68 += 1 };
  s7 -> s1 [112, 65535] { R68 += 1 };
  s8 -> s1 [0, 114] { R68 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R68 += 1 };
  s8 -> s1 [116, 65535] { R68 += 1 };
  s9 -> s1 [0, 115] { R68 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R68 += 1 };
  s9 -> s1 [117, 65535] { R68 += 1 };
  s10 -> s1 [0, 65535] { R68 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R84 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R84 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R84 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R10037 += 1, R10038 += 1 };
  s0 -> s1 [0, 65535] { R10038 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10038 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R10039 += 1, R10040 += 1 };
  s0 -> s1 [0, 65535] { R10040 += 1, R86 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10040 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R10042 += 1 };
  s0 -> s2 [0, 65535] { R10042 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R10041 += 1, R10042 += 1 };
  s0 -> s1 [78, 65535] { R10042 += 1 };
  s1 -> s1 [0, 76] { R10042 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R10042 += 1 };
  s2 -> s1 [0, 76] { R10042 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10042 += 1, R88 += 1 };
  s2 -> s1 [78, 65535] { R10042 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R10043 += 1, R10044 += 1 };
  s0 -> s1 [0, 65535] { R10044 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R10044 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10044 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [0, 65535] { R10044 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10044 += 1 };
  s2 -> s2 [0, 65535] { R10044 += 1, R93 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10044 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10046 += 1 };
  s0 -> s0 [0, 65535] { R10045 += 1, R10046 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10046 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10048 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R10048 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R10047 += 1, R10048 += 1 };
  s1 -> s1 [0, 65535] { R10048 += 1, R98 += 1, R99 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10048 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10048 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535] { R10048 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10048 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R10049 += 1, R10050 += 1 };
  s0 -> s1 [0, 65535] { R10050 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10050 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R10073 += 1, R10074 += 1 };
  s0 -> s1 [0, 65535] { R10074 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10074 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R10076 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R10075 += 1, R10076 += 1 };
  s0 -> s2 [65, 65] { R10076 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R10076 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R10076 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R10076 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10076 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R10076 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R10076 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R10076 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R10078 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R10077 += 1, R10078 += 1 };
  s0 -> s2 [65, 65] { R10078 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R10078 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R10078 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R10078 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10078 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R10078 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R10078 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10078 += 1, R87 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R10080 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R10079 += 1, R10080 += 1 };
  s0 -> s2 [65, 65] { R10080 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R10080 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R10080 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R10080 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10080 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R10080 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R10080 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10080 += 1, R89 += 1, R90 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R10082 += 1 };
  s0 -> s0 [0, 65535] { R10081 += 1, R10082 += 1 };
  s0 -> s2 [65, 65] { R10082 += 1 };
  s0 -> s3 [65, 65] { R10082 += 1 };
  s0 -> s1 [66, 65535] { R10082 += 1 };
  s1 -> s1 [0, 64] { R10082 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10082 += 1 };
  s1 -> s3 [65, 65] { R10082 += 1 };
  s1 -> s1 [66, 65535] { R10082 += 1 };
  s2 -> s2 [0, 65535] { R10082 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10084 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R10083 += 1, R10084 += 1 };
  s0 -> s2 [65, 65] { R10084 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R10084 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R10084 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R10084 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10084 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R10084 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R10084 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10084 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R10086 += 1 };
  s0 -> s0 [0, 65535] { R10085 += 1, R10086 += 1 };
  s0 -> s2 [65, 65] { R10086 += 1 };
  s0 -> s3 [65, 65] { R10086 += 1 };
  s0 -> s1 [66, 65535] { R10086 += 1 };
  s1 -> s1 [0, 64] { R10086 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10086 += 1 };
  s1 -> s3 [65, 65] { R10086 += 1 };
  s1 -> s1 [66, 65535] { R10086 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10086 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R10088 += 1 };
  s0 -> s0 [0, 65535] { R10087 += 1, R10088 += 1 };
  s0 -> s1 [45, 45] { R10088 += 1 };
  s0 -> s2 [46, 46] { R10088 += 1 };
  s0 -> s1 [48, 62] { R10088 += 1 };
  s0 -> s3 [65, 65] { R10088 += 1 };
  s0 -> s1 [66, 65535] { R10088 += 1 };
  s1 -> s1 [0, 43] { R10088 += 1 };
  s1 -> s1 [45, 45] { R10088 += 1 };
  s1 -> s2 [46, 46] { R10088 += 1 };
  s1 -> s1 [48, 62] { R10088 += 1 };
  s1 -> s3 [65, 65] { R10088 += 1 };
  s1 -> s1 [66, 65535] { R10088 += 1 };
  s2 -> s1 [0, 43] { R10088 += 1 };
  s2 -> s1 [45, 45] { R10088 += 1 };
  s2 -> s2 [46, 46] { R10088 += 1 };
  s2 -> s1 [48, 62] { R10088 += 1 };
  s2 -> s3 [65, 65] { R10088 += 1 };
  s2 -> s1 [66, 114] { R10088 += 1 };
  s2 -> s8 [115, 115] { R10088 += 1 };
  s2 -> s1 [116, 65535] { R10088 += 1 };
  s3 -> s3 [0, 43] { R10088 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10088 += 1 };
  s3 -> s4 [46, 46] { R10088 += 1 };
  s3 -> s3 [48, 62] { R10088 += 1 };
  s3 -> s3 [65, 65535] { R10088 += 1 };
  s4 -> s3 [0, 43] { R10088 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10088 += 1 };
  s4 -> s4 [46, 46] { R10088 += 1 };
  s4 -> s3 [48, 62] { R10088 += 1 };
  s4 -> s3 [65, 114] { R10088 += 1 };
  s4 -> s5 [115, 115] { R10088 += 1 };
  s4 -> s3 [116, 65535] { R10088 += 1 };
  s5 -> s3 [0, 43] { R10088 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10088 += 1 };
  s5 -> s4 [46, 46] { R10088 += 1 };
  s5 -> s3 [48, 62] { R10088 += 1 };
  s5 -> s3 [65, 110] { R10088 += 1 };
  s5 -> s6 [111, 111] { R10088 += 1 };
  s5 -> s3 [112, 65535] { R10088 += 1 };
  s6 -> s3 [0, 43] { R10088 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10088 += 1 };
  s6 -> s4 [46, 46] { R10088 += 1 };
  s6 -> s3 [48, 62] { R10088 += 1 };
  s6 -> s3 [65, 98] { R10088 += 1 };
  s6 -> s7 [99, 99] { R10088 += 1 };
  s6 -> s3 [100, 65535] { R10088 += 1 };
  s7 -> s3 [0, 43] { R10088 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10088 += 1 };
  s7 -> s4 [46, 46] { R10088 += 1 };
  s7 -> s3 [48, 62] { R10088 += 1 };
  s7 -> s3 [65, 106] { R10088 += 1 };
  s7 -> s3 [108, 65535] { R10088 += 1 };
  s8 -> s1 [0, 43] { R10088 += 1 };
  s8 -> s1 [45, 45] { R10088 += 1 };
  s8 -> s2 [46, 46] { R10088 += 1 };
  s8 -> s1 [48, 62] { R10088 += 1 };
  s8 -> s3 [65, 65] { R10088 += 1 };
  s8 -> s1 [66, 110] { R10088 += 1 };
  s8 -> s9 [111, 111] { R10088 += 1 };
  s8 -> s1 [112, 65535] { R10088 += 1 };
  s9 -> s1 [0, 43] { R10088 += 1 };
  s9 -> s1 [45, 45] { R10088 += 1 };
  s9 -> s2 [46, 46] { R10088 += 1 };
  s9 -> s1 [48, 62] { R10088 += 1 };
  s9 -> s3 [65, 65] { R10088 += 1 };
  s9 -> s1 [66, 98] { R10088 += 1 };
  s9 -> s10 [99, 99] { R10088 += 1 };
  s9 -> s1 [100, 65535] { R10088 += 1 };
  s10 -> s1 [0, 43] { R10088 += 1 };
  s10 -> s1 [45, 45] { R10088 += 1 };
  s10 -> s2 [46, 46] { R10088 += 1 };
  s10 -> s1 [48, 62] { R10088 += 1 };
  s10 -> s3 [65, 65] { R10088 += 1 };
  s10 -> s1 [66, 106] { R10088 += 1 };
  s10 -> s1 [108, 65535] { R10088 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10089 += 1, R10090 += 1 };
  s0 -> s1 [0, 65535] { R10090 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10090 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R10092 += 1 };
  s0 -> s0 [0, 65535] { R10091 += 1, R10092 += 1 };
  s0 -> s2 [0, 65535] { R10092 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R10092 += 1 };
  s0 -> s1 [59, 65535] { R10092 += 1 };
  s1 -> s1 [0, 57] { R10092 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10092 += 1 };
  s1 -> s1 [59, 65535] { R10092 += 1 };
  s2 -> s1 [0, 57] { R10092 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10092 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R10092 += 1 };
  s2 -> s1 [59, 65535] { R10092 += 1 };
  s3 -> s3 [0, 65535] { R10092 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R10094 += 1 };
  s0 -> s2 [0, 65535] { R10094 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R10093 += 1, R10094 += 1 };
  s0 -> s3 [43, 43] { R10094 += 1 };
  s0 -> s1 [44, 65535] { R10094 += 1 };
  s1 -> s1 [0, 42] { R10094 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R10094 += 1 };
  s1 -> s1 [44, 65535] { R10094 += 1 };
  s2 -> s1 [0, 42] { R10094 += 1 };
  s2 -> s2 [0, 65535] { R10094 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R10094 += 1 };
  s2 -> s1 [44, 65535] { R10094 += 1 };
  s3 -> s3 [0, 65535] { R10094 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10096 += 1 };
  s0 -> s0 [0, 65535] { R10095 += 1, R10096 += 1 };
  s0 -> s2 [0, 65535] { R10096 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R10096 += 1 };
  s0 -> s1 [66, 65535] { R10096 += 1 };
  s1 -> s1 [0, 64] { R10096 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10096 += 1 };
  s1 -> s1 [66, 65535] { R10096 += 1 };
  s2 -> s1 [0, 64] { R10096 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10096 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R10096 += 1 };
  s2 -> s1 [66, 65535] { R10096 += 1 };
  s3 -> s3 [0, 65535] { R10096 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R10098 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R10098 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10097 += 1, R10098 += 1 };
  s0 -> s3 [91, 91] { R10098 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R10098 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10098 += 1 };
  s1 -> s1 [0, 65535] { R10098 += 1, R40 += 1 };
  s2 -> s1 [0, 90] { R10098 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R10098 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10098 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R10098 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R10098 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10098 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10099 += 1, R10100 += 1 };
  s0 -> s1 [0, 65535] { R10100 += 1, R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R10100 += 1, R42 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R10100 += 1, R41 += 1, R42 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10100 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R10100 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10100 += 1, R42 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R10100 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s0 [0, 65535] { R10101 += 1, R10102 += 1 };
  s0 -> s1 [0, 65535] { R10102 += 1, R59 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R10102 += 1, R60 += 1, R31 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10102 += 1, R59 += 1, R60 += 1 };
  s1 -> s2 [0, 65535] { R10102 += 1, R60 += 1, R31 += 1 };
  s2 -> s3 [0, 65535] { R10102 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10102 += 1, R60 += 1, R31 += 1 };
  s3 -> s3 [0, 65535] { R10102 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R10104 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R10104 += 1, R61 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R10103 += 1, R10104 += 1 };
  s0 -> s3 [108, 108] { R10104 += 1, R62 += 1 };
  s0 -> s1 [109, 65535] { R10104 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R10104 += 1, R62 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R10104 += 1 };
  s2 -> s1 [0, 107] { R10104 += 1, R62 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10104 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [108, 108] { R10104 += 1, R62 += 1 };
  s2 -> s1 [109, 65535] { R10104 += 1, R62 += 1 };
  s3 -> s1 [0, 110] { R10104 += 1, R62 += 1 };
  s3 -> s3 [0, 65535] { R10104 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R10104 += 1, R62 += 1 };
  s3 -> s1 [112, 65535] { R10104 += 1, R62 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10104 += 1, R62 += 1 };
  s5 -> s5 [0, 65535] { R10104 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10104 += 1, R62 += 1 };
  s5 -> s1 [100, 65535] { R10104 += 1, R62 += 1 };
  s6 -> s1 [0, 96] { R10104 += 1, R62 += 1 };
  s6 -> s6 [0, 65535] { R10104 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R10104 += 1, R62 += 1 };
  s6 -> s1 [98, 65535] { R10104 += 1, R62 += 1 };
  s7 -> s1 [0, 107] { R10104 += 1, R62 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R10104 += 1 };
  s7 -> s8 [108, 108] { R10104 += 1, R62 += 1 };
  s7 -> s1 [109, 65535] { R10104 += 1, R62 += 1 };
  s8 -> s1 [0, 103] { R10104 += 1, R62 += 1 };
  s8 -> s8 [0, 65535] { R10104 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R10104 += 1, R62 += 1 };
  s8 -> s1 [105, 65535] { R10104 += 1, R62 += 1 };
  s9 -> s1 [0, 110] { R10104 += 1, R62 += 1 };
  s9 -> s9 [0, 65535] { R10104 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R10104 += 1, R62 += 1 };
  s9 -> s1 [112, 65535] { R10104 += 1, R62 += 1 };
  s10 -> s1 [0, 114] { R10104 += 1, R62 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R10104 += 1 };
  s10 -> s11 [115, 115] { R10104 += 1, R62 += 1 };
  s10 -> s1 [116, 65535] { R10104 += 1, R62 += 1 };
  s11 -> s1 [0, 115] { R10104 += 1, R62 += 1 };
  s11 -> s11 [0, 65535] { R10104 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R10104 += 1, R62 += 1 };
  s11 -> s1 [117, 65535] { R10104 += 1, R62 += 1 };
  s12 -> s1 [0, 65535] { R10104 += 1, R62 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R10104 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65535] { R10106 += 1, R64 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R10106 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R10105 += 1, R10106 += 1 };
  s1 -> s1 [0, 65535] { R10106 += 1, R64 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R10106 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10106 += 1, R64 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10106 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10106 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R10108 += 1, R78 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R10107 += 1, R10108 += 1 };
  s0 -> s2 [0, 65535] { R10108 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535] { R10108 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10108 += 1, R78 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10108 += 1, R78 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R10108 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10108 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s0 [0, 65535] { R10109 += 1, R10110 += 1 };
  s0 -> s1 [0, 65535] { R10110 += 1 };
  s1 -> s1 [0, 65535] { R10110 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R10112 += 1, R80 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R10112 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R10111 += 1, R10112 += 1 };
  s0 -> s3 [43, 43] { R10112 += 1, R80 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R10112 += 1, R80 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R10112 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R10112 += 1, R80 += 1, R43 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10112 += 1 };
  s1 -> s3 [43, 43] { R10112 += 1, R80 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R10112 += 1, R80 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R10112 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R10112 += 1, R80 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10112 += 1, R79 += 1, R80 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R10112 += 1, R80 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R10112 += 1, R80 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R10112 += 1, R80 += 1, R43 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10112 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10112 += 1 };
  s4 -> s4 [0, 65535] { R10112 += 1, R80 += 1, R43 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10112 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10114 += 1, R10014 += 1 };
  s0 -> s0 [0, 65535] { R10113 += 1, R10114 += 1 };
  s0 -> s2 [0, 65535] { R10114 += 1, R10013 += 1, R10014 += 1 };
  s0 -> s1 [66, 65535] { R10114 += 1, R10014 += 1 };
  s1 -> s1 [0, 64] { R10114 += 1, R10014 += 1 };
  s1 -> s1 [0, 65535] { R10114 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R10114 += 1, R10014 += 1 };
  s2 -> s1 [0, 64] { R10114 += 1, R10014 += 1 };
  s2 -> s2 [0, 65535] { R10114 += 1, R10013 += 1, R10014 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10114 += 1, R10014 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R10116 += 1, R10016 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R10115 += 1, R10116 += 1 };
  s0 -> s2 [0, 65535] { R10116 += 1, R10015 += 1, R10016 += 1 };
  s1 -> s1 [0, 65535] { R10116 += 1, R10016 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10116 += 1 };
  s2 -> s1 [0, 65535] { R10116 += 1, R10016 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10116 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10116 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R10118 += 1, R10018 += 1 };
  s0 -> s2 [0, 65535] { R10118 += 1, R10017 += 1, R10018 += 1 };
  s0 -> s0 [0, 65535] { R10117 += 1, R10118 += 1 };
  s0 -> s1 [80, 65535] { R10118 += 1, R10018 += 1 };
  s1 -> s1 [0, 65] { R10118 += 1, R10018 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10118 += 1 };
  s1 -> s1 [80, 65535] { R10118 += 1, R10018 += 1 };
  s2 -> s1 [0, 65] { R10118 += 1, R10018 += 1 };
  s2 -> s2 [0, 65535] { R10118 += 1, R10017 += 1, R10018 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R10118 += 1, R10018 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R10119 += 1, R10120 += 1 };
  s0 -> s1 [0, 65535] { R10120 += 1, R10019 += 1, R10020 += 1 };
  s0 -> s2 [0, 65535] { R10120 += 1, R10020 += 1, R454 += 1 };
  s1 -> s1 [0, 65535] { R10120 += 1, R10019 += 1, R10020 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10120 += 1, R10020 += 1, R454 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10120 += 1, R10020 += 1, R454 += 1 };
  s2 -> s4 [0, 65535] { R10120 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10120 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R10122 += 1, R10022 += 1 };
  s0 -> s2 [0, 65535] { R10122 += 1, R10021 += 1, R10022 += 1 };
  s0 -> s3 [0, 65535] { R10122 += 1, R10022 += 1, R456 += 1 };
  s0 -> s0 [0, 65535] { R10121 += 1, R10122 += 1 };
  s0 -> s1 [81, 65535] { R10122 += 1, R10022 += 1 };
  s1 -> s1 [0, 79] { R10122 += 1, R10022 += 1 };
  s1 -> s1 [0, 65535] { R10122 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R10122 += 1, R10022 += 1 };
  s2 -> s1 [0, 79] { R10122 += 1, R10022 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10122 += 1, R10021 += 1, R10022 += 1 };
  s2 -> s3 [0, 65535] { R10122 += 1, R10022 += 1, R456 += 1 };
  s2 -> s1 [81, 65535] { R10122 += 1, R10022 += 1 };
  s3 -> s1 [0, 79] { R10122 += 1, R10022 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10122 += 1, R10022 += 1, R456 += 1 };
  s3 -> s5 [0, 65535] { R10122 += 1 };
  s3 -> s1 [81, 65535] { R10122 += 1, R10022 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10122 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R10124 += 1, R10024 += 1, R460 += 1 };
  s0 -> s2 [0, 65535] { R10124 += 1, R10023 += 1, R10024 += 1 };
  s0 -> s3 [0, 65535] { R10124 += 1, R10024 += 1, R459 += 1, R460 += 1 };
  s0 -> s0 [0, 65535] { R10123 += 1, R10124 += 1 };
  s0 -> s1 [81, 65535] { R10124 += 1, R10024 += 1, R460 += 1 };
  s1 -> s1 [0, 79] { R10124 += 1, R10024 += 1, R460 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10124 += 1 };
  s1 -> s1 [0, 65535] { R10124 += 1, R10024 += 1 };
  s1 -> s1 [81, 65535] { R10124 += 1, R10024 += 1, R460 += 1 };
  s2 -> s1 [0, 79] { R10124 += 1, R10024 += 1, R460 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10124 += 1, R10023 += 1, R10024 += 1 };
  s2 -> s3 [0, 65535] { R10124 += 1, R10024 += 1, R459 += 1, R460 += 1 };
  s2 -> s1 [81, 65535] { R10124 += 1, R10024 += 1, R460 += 1 };
  s3 -> s1 [0, 79] { R10124 += 1, R10024 += 1, R460 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10124 += 1 };
  s3 -> s3 [0, 65535] { R10124 += 1, R10024 += 1, R459 += 1, R460 += 1 };
  s3 -> s1 [81, 65535] { R10124 += 1, R10024 += 1, R460 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10124 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R10125 += 1, R10126 += 1 };
  s0 -> s1 [0, 65535] { R10126 += 1, R10025 += 1, R10026 += 1 };
  s0 -> s2 [0, 65535] { R10126 += 1, R10026 += 1, R465 += 1, R466 += 1 };
  s0 -> s3 [0, 65535] { R10126 += 1, R10026 += 1, R464 += 1, R465 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10126 += 1, R10025 += 1, R10026 += 1 };
  s1 -> s2 [0, 65535] { R10126 += 1, R10026 += 1, R465 += 1, R466 += 1 };
  s1 -> s3 [0, 65535] { R10126 += 1, R10026 += 1, R464 += 1, R465 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10126 += 1, R10026 += 1 };
  s2 -> s2 [0, 65535] { R10126 += 1, R10026 += 1, R465 += 1, R466 += 1 };
  s2 -> s5 [0, 65535] { R10126 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10126 += 1, R10026 += 1, R465 += 1, R466 += 1 };
  s3 -> s5 [0, 65535] { R10126 += 1 };
  s3 -> s3 [0, 65535] { R10126 += 1, R10026 += 1, R464 += 1, R465 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10126 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10126 += 1, R10026 += 1 };
  s6 -> s5 [0, 65535] { R10126 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R10128 += 1, R10028 += 1, R7386 += 1 };
  s0 -> s1 [0, 65535] { R10128 += 1, R10028 += 1 };
  s0 -> s2 [0, 65535] { R10128 += 1, R10027 += 1, R10028 += 1 };
  s0 -> s0 [0, 65535] { R10127 += 1, R10128 += 1 };
  s0 -> s1 [91, 65535] { R10128 += 1, R10028 += 1, R7386 += 1 };
  s1 -> s1 [0, 80] { R10128 += 1, R10028 += 1, R7386 += 1 };
  s1 -> s1 [0, 65535] { R10128 += 1, R10028 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10128 += 1 };
  s1 -> s1 [91, 65535] { R10128 += 1, R10028 += 1, R7386 += 1 };
  s2 -> s1 [0, 80] { R10128 += 1, R10028 += 1, R7386 += 1 };
  s2 -> s1 [0, 65535] { R10128 += 1, R10028 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10128 += 1, R10027 += 1, R10028 += 1 };
  s2 -> s1 [91, 65535] { R10128 += 1, R10028 += 1, R7386 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10128 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R10129 += 1, R10130 += 1 };
  s0 -> s1 [0, 65535] { R10130 += 1, R10030 += 1 };
  s0 -> s2 [0, 65535] { R10130 += 1, R10030 += 1, R9695 += 1, R9696 += 1 };
  s0 -> s3 [0, 65535] { R10130 += 1, R10029 += 1, R10030 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10130 += 1, R10030 += 1 };
  s1 -> s5 [0, 65535] { R10130 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10130 += 1, R10030 += 1 };
  s2 -> s2 [0, 65535] { R10130 += 1, R10030 += 1, R9695 += 1, R9696 += 1 };
  s2 -> s5 [0, 65535] { R10130 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10130 += 1, R10030 += 1 };
  s3 -> s2 [0, 65535] { R10130 += 1, R10030 += 1, R9695 += 1, R9696 += 1 };
  s3 -> s3 [0, 65535] { R10130 += 1, R10029 += 1, R10030 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10130 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R10131 += 1, R10132 += 1 };
  s0 -> s1 [0, 65535] { R10132 += 1, R10031 += 1, R10032 += 1 };
  s0 -> s2 [0, 65535] { R10132 += 1, R10032 += 1, R9701 += 1, R9702 += 1 };
  s0 -> s3 [0, 65535] { R10132 += 1, R10032 += 1, R9700 += 1, R9701 += 1 };
  s1 -> s1 [0, 65535] { R10132 += 1, R10031 += 1, R10032 += 1 };
  s1 -> s2 [0, 65535] { R10132 += 1, R10032 += 1, R9701 += 1, R9702 += 1 };
  s1 -> s3 [0, 65535] { R10132 += 1, R10032 += 1, R9700 += 1, R9701 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R10132 += 1 };
  s2 -> s6 [0, 65535] { R10132 += 1, R10032 += 1 };
  s2 -> s2 [0, 65535] { R10132 += 1, R10032 += 1, R9701 += 1, R9702 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10132 += 1 };
  s3 -> s2 [0, 65535] { R10132 += 1, R10032 += 1, R9701 += 1, R9702 += 1 };
  s3 -> s3 [0, 65535] { R10132 += 1, R10032 += 1, R9700 += 1, R9701 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10132 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10132 += 1 };
  s6 -> s6 [0, 65535] { R10132 += 1, R10032 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R10133 += 1, R10134 += 1 };
  s0 -> s1 [0, 65535] { R10134 += 1, R10033 += 1, R10034 += 1 };
  s0 -> s2 [0, 65535] { R10134 += 1, R10034 += 1 };
  s1 -> s1 [0, 65535] { R10134 += 1, R10033 += 1, R10034 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10134 += 1, R10034 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10134 += 1 };
  s2 -> s2 [0, 65535] { R10134 += 1, R10034 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10134 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R10135 += 1, R10136 += 1 };
  s0 -> s1 [0, 65535] { R10136 += 1, R10036 += 1 };
  s0 -> s2 [0, 65535] { R10136 += 1, R10035 += 1, R10036 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10136 += 1, R10036 += 1 };
  s1 -> s4 [0, 65535] { R10136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10136 += 1, R10036 += 1 };
  s2 -> s2 [0, 65535] { R10136 += 1, R10035 += 1, R10036 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10136 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R10138 += 1, R10051 += 1, R10052 += 1 };
  s0 -> s0 [0, 65535] { R10137 += 1, R10138 += 1 };
  s0 -> s2 [0, 65535] { R10138 += 1, R10052 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R10138 += 1, R10051 += 1, R10052 += 1 };
  s1 -> s2 [0, 65535] { R10138 += 1, R10052 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10138 += 1 };
  s2 -> s2 [0, 65535] { R10138 += 1, R10052 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10138 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10140 += 1, R10054 += 1 };
  s0 -> s2 [0, 65535] { R10140 += 1, R10053 += 1, R10054 += 1 };
  s0 -> s0 [0, 65535] { R10139 += 1, R10140 += 1 };
  s0 -> s3 [65, 65] { R10140 += 1, R10054 += 1 };
  s0 -> s4 [65, 65] { R10140 += 1, R10054 += 1 };
  s0 -> s5 [80, 80] { R10140 += 1, R10054 += 1 };
  s0 -> s1 [81, 65535] { R10140 += 1, R10054 += 1 };
  s1 -> s1 [0, 64] { R10140 += 1, R10054 += 1 };
  s1 -> s3 [65, 65] { R10140 += 1, R10054 += 1 };
  s1 -> s4 [65, 65] { R10140 += 1, R10054 += 1 };
  s1 -> s5 [80, 80] { R10140 += 1, R10054 += 1 };
  s1 -> s1 [81, 65535] { R10140 += 1, R10054 += 1 };
  s2 -> s1 [0, 64] { R10140 += 1, R10054 += 1 };
  s2 -> s2 [0, 65535] { R10140 += 1, R10053 += 1, R10054 += 1 };
  s2 -> s3 [65, 65] { R10140 += 1, R10054 += 1 };
  s2 -> s4 [65, 65] { R10140 += 1, R10054 += 1 };
  s2 -> s5 [80, 80] { R10140 += 1, R10054 += 1 };
  s2 -> s1 [81, 65535] { R10140 += 1, R10054 += 1 };
  s4 -> s4 [0, 65] { R10140 += 1, R10054 += 1 };
  s4 -> s8 [80, 80] { R10140 += 1, R10054 += 1 };
  s4 -> s4 [81, 65535] { R10140 += 1, R10054 += 1 };
  s5 -> s5 [0, 64] { R10140 += 1, R10054 += 1 };
  s5 -> s5 [0, 65535] { R10140 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R10140 += 1, R10054 += 1 };
  s5 -> s8 [65, 65] { R10140 += 1, R10054 += 1 };
  s5 -> s5 [80, 65535] { R10140 += 1, R10054 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10140 += 1 };
  s8 -> s8 [0, 65] { R10140 += 1, R10054 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10140 += 1 };
  s8 -> s8 [80, 65535] { R10140 += 1, R10054 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10142 += 1, R10056 += 1, R453 += 1 };
  s0 -> s0 [0, 65535] { R10141 += 1, R10142 += 1 };
  s0 -> s2 [0, 65535] { R10142 += 1, R10055 += 1, R10056 += 1 };
  s0 -> s3 [65, 65] { R10142 += 1, R10056 += 1, R453 += 1 };
  s0 -> s4 [65, 65] { R10142 += 1, R10056 += 1, R453 += 1 };
  s0 -> s1 [66, 65535] { R10142 += 1, R10056 += 1, R453 += 1 };
  s1 -> s1 [0, 64] { R10142 += 1, R10056 += 1, R453 += 1 };
  s1 -> s1 [0, 65535] { R10142 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10142 += 1, R10056 += 1, R453 += 1 };
  s1 -> s4 [65, 65] { R10142 += 1, R10056 += 1, R453 += 1 };
  s1 -> s1 [66, 65535] { R10142 += 1, R10056 += 1, R453 += 1 };
  s2 -> s1 [0, 64] { R10142 += 1, R10056 += 1, R453 += 1 };
  s2 -> s2 [0, 65535] { R10142 += 1, R10055 += 1, R10056 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10142 += 1, R10056 += 1, R453 += 1 };
  s2 -> s4 [65, 65] { R10142 += 1, R10056 += 1, R453 += 1 };
  s2 -> s1 [66, 65535] { R10142 += 1, R10056 += 1, R453 += 1 };
  s3 -> s3 [0, 65535] { R10142 += 1, R10056 += 1, R453 += 1 };
  s3 -> s6 [0, 65535] { R10142 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10142 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10142 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10144 += 1, R10058 += 1, R455 += 1 };
  s0 -> s0 [0, 65535] { R10143 += 1, R10144 += 1 };
  s0 -> s2 [0, 65535] { R10144 += 1, R10057 += 1, R10058 += 1 };
  s0 -> s3 [65, 65] { R10144 += 1, R10058 += 1, R455 += 1 };
  s0 -> s4 [65, 65] { R10144 += 1, R10058 += 1, R455 += 1 };
  s0 -> s1 [66, 65535] { R10144 += 1, R10058 += 1, R455 += 1 };
  s1 -> s1 [0, 64] { R10144 += 1, R10058 += 1, R455 += 1 };
  s1 -> s1 [0, 65535] { R10144 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10144 += 1, R10058 += 1, R455 += 1 };
  s1 -> s4 [65, 65] { R10144 += 1, R10058 += 1, R455 += 1 };
  s1 -> s1 [66, 65535] { R10144 += 1, R10058 += 1, R455 += 1 };
  s2 -> s1 [0, 64] { R10144 += 1, R10058 += 1, R455 += 1 };
  s2 -> s2 [0, 65535] { R10144 += 1, R10057 += 1, R10058 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10144 += 1, R10058 += 1, R455 += 1 };
  s2 -> s4 [65, 65] { R10144 += 1, R10058 += 1, R455 += 1 };
  s2 -> s1 [66, 65535] { R10144 += 1, R10058 += 1, R455 += 1 };
  s3 -> s3 [0, 65535] { R10144 += 1, R10058 += 1, R455 += 1 };
  s3 -> s6 [0, 65535] { R10144 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10144 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10144 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s0 -> s0 [0, 65535] { R10145 += 1, R10146 += 1 };
  s0 -> s2 [0, 65535] { R10146 += 1, R10059 += 1, R10060 += 1 };
  s0 -> s3 [65, 65] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s0 -> s4 [65, 65] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s0 -> s1 [66, 65535] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 64] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [0, 65535] { R10146 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s1 -> s4 [65, 65] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s1 -> s1 [66, 65535] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [0, 64] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s2 -> s2 [0, 65535] { R10146 += 1, R10059 += 1, R10060 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s2 -> s4 [65, 65] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s2 -> s1 [66, 65535] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s3 -> s3 [0, 65535] { R10146 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10146 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10146 += 1, R10060 += 1, R457 += 1, R458 += 1 };
  s5 -> s5 [0, 65535] { R10146 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s0 -> s0 [0, 65535] { R10147 += 1, R10148 += 1 };
  s0 -> s2 [0, 65535] { R10148 += 1, R10061 += 1, R10062 += 1 };
  s0 -> s3 [65, 65] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s0 -> s4 [65, 65] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s0 -> s1 [66, 65535] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [0, 64] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10148 += 1 };
  s1 -> s3 [65, 65] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s1 -> s4 [65, 65] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s1 -> s1 [66, 65535] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [0, 64] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s2 -> s2 [0, 65535] { R10148 += 1, R10061 += 1, R10062 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s2 -> s4 [65, 65] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s2 -> s1 [66, 65535] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s3 -> s3 [0, 65535] { R10148 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10148 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10148 += 1, R10062 += 1, R461 += 1, R462 += 1 };
  s5 -> s5 [0, 65535] { R10148 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s0 -> s2 [0, 64] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s0 [0, 65535] { R10149 += 1, R10150 += 1 };
  s0 -> s3 [0, 65535] { R10150 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s4 [65, 65] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s5 [65, 65] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s0 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s0 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s0 -> s2 [66, 65535] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s0 -> s1 [91, 107] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s0 -> s8 [108, 108] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s0 -> s1 [109, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s1 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s1 [0, 65535] { R10150 += 1 };
  s1 -> s6 [65, 65] { R10150 += 1, R10064 += 1 };
  s1 -> s7 [65, 65] { R10150 += 1, R10064 += 1 };
  s1 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s1 -> s1 [66, 65535] { R10150 += 1, R10064 += 1 };
  s1 -> s1 [91, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s2 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s2 -> s2 [0, 64] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s2 -> s4 [65, 65] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s2 -> s5 [65, 65] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s2 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s2 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s2 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s2 -> s2 [66, 65535] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s2 -> s1 [91, 107] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s2 -> s8 [108, 108] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s2 -> s1 [109, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s3 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s3 -> s2 [0, 64] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s3 [0, 65535] { R10150 += 1, R10063 += 1, R10064 += 1 };
  s3 -> s4 [65, 65] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s5 [65, 65] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s3 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s3 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s3 -> s2 [66, 65535] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s3 -> s1 [91, 107] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s3 -> s8 [108, 108] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s3 -> s1 [109, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s4 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s4 -> s4 [0, 65535] { R10150 += 1, R10064 += 1, R7383 += 1, R7384 += 1 };
  s4 -> s6 [91, 107] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s4 -> s10 [108, 108] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s4 -> s6 [109, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s6 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R10150 += 1, R10064 += 1 };
  s6 -> s35 [0, 65535] { R10150 += 1 };
  s6 -> s6 [91, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s7 -> s34 [0, 65535];
  s7 -> s7 [0, 65535] { R10150 += 1 };
  s8 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s8 -> s8 [0, 64] { R10150 += 1, R10064 += 1 };
  s8 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s8 -> s9 [65, 65] { R10150 += 1, R10064 += 1 };
  s8 -> s10 [65, 65] { R10150 += 1, R10064 += 1 };
  s8 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s8 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s8 -> s8 [66, 65535] { R10150 += 1, R10064 += 1 };
  s8 -> s1 [91, 110] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s8 -> s11 [111, 111] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s8 -> s1 [112, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s10 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s10 -> s10 [0, 65535] { R10150 += 1, R10064 += 1 };
  s10 -> s6 [91, 110] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s10 -> s12 [111, 111] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s10 -> s6 [112, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s11 -> s11 [0, 64] { R10150 += 1, R10064 += 1 };
  s11 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s11 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s11 -> s12 [65, 65] { R10150 += 1, R10064 += 1 };
  s11 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s11 -> s13 [65, 65] { R10150 += 1, R10064 += 1 };
  s11 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s11 -> s11 [66, 65535] { R10150 += 1, R10064 += 1 };
  s11 -> s1 [91, 98] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s11 -> s14 [99, 99] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s11 -> s1 [100, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s12 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s12 -> s12 [0, 65535] { R10150 += 1, R10064 += 1 };
  s12 -> s6 [91, 98] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s12 -> s16 [99, 99] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s12 -> s6 [100, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s14 -> s14 [0, 64] { R10150 += 1, R10064 += 1 };
  s14 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s14 -> s15 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s14 -> s16 [65, 65] { R10150 += 1, R10064 += 1 };
  s14 -> s17 [65, 65] { R10150 += 1, R10064 += 1 };
  s14 -> s18 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s14 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s14 -> s14 [66, 65535] { R10150 += 1, R10064 += 1 };
  s14 -> s1 [91, 96] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s14 -> s19 [97, 97] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s14 -> s1 [98, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s16 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s16 -> s16 [0, 65535] { R10150 += 1, R10064 += 1 };
  s16 -> s6 [91, 96] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s16 -> s18 [97, 97] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s16 -> s6 [98, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s18 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s18 -> s18 [0, 65535] { R10150 += 1, R10064 += 1 };
  s18 -> s6 [91, 107] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s18 -> s21 [108, 108] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s18 -> s6 [109, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s19 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s19 -> s19 [0, 64] { R10150 += 1, R10064 += 1 };
  s19 -> s15 [65, 65] { R10150 += 1, R10064 += 1 };
  s19 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s19 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s19 -> s18 [65, 65] { R10150 += 1, R10064 += 1 };
  s19 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s19 -> s19 [66, 65535] { R10150 += 1, R10064 += 1 };
  s19 -> s1 [91, 107] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s19 -> s20 [108, 108] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s19 -> s1 [109, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s20 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s20 -> s20 [0, 64] { R10150 += 1, R10064 += 1 };
  s20 -> s21 [65, 65] { R10150 += 1, R10064 += 1 };
  s20 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s20 -> s22 [65, 65] { R10150 += 1, R10064 += 1 };
  s20 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s20 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s20 -> s20 [66, 65535] { R10150 += 1, R10064 += 1 };
  s20 -> s1 [91, 103] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s20 -> s23 [104, 104] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s20 -> s1 [105, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s21 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s21 -> s21 [0, 65535] { R10150 += 1, R10064 += 1 };
  s21 -> s6 [91, 103] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s21 -> s24 [104, 104] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s21 -> s6 [105, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s23 -> s23 [0, 64] { R10150 += 1, R10064 += 1 };
  s23 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s23 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s23 -> s24 [65, 65] { R10150 += 1, R10064 += 1 };
  s23 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s23 -> s25 [65, 65] { R10150 += 1, R10064 += 1 };
  s23 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s23 -> s23 [66, 65535] { R10150 += 1, R10064 += 1 };
  s23 -> s1 [91, 110] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s23 -> s26 [111, 111] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s23 -> s1 [112, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s24 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s24 -> s24 [0, 65535] { R10150 += 1, R10064 += 1 };
  s24 -> s6 [91, 110] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s24 -> s28 [111, 111] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s24 -> s6 [112, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s26 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s26 -> s26 [0, 64] { R10150 += 1, R10064 += 1 };
  s26 -> s27 [65, 65] { R10150 += 1, R10064 += 1 };
  s26 -> s28 [65, 65] { R10150 += 1, R10064 += 1 };
  s26 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s26 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s26 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s26 -> s26 [66, 65535] { R10150 += 1, R10064 += 1 };
  s26 -> s1 [91, 114] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s26 -> s29 [115, 115] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s26 -> s1 [116, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s28 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s28 -> s28 [0, 65535] { R10150 += 1, R10064 += 1 };
  s28 -> s6 [91, 114] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s28 -> s30 [115, 115] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s28 -> s6 [116, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s29 -> s29 [0, 64] { R10150 += 1, R10064 += 1 };
  s29 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s29 -> s30 [65, 65] { R10150 += 1, R10064 += 1 };
  s29 -> s31 [65, 65] { R10150 += 1, R10064 += 1 };
  s29 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s29 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s29 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s29 -> s29 [66, 65535] { R10150 += 1, R10064 += 1 };
  s29 -> s1 [91, 115] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s29 -> s32 [116, 116] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s29 -> s1 [117, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s30 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s30 -> s30 [0, 65535] { R10150 += 1, R10064 += 1 };
  s30 -> s6 [91, 115] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s30 -> s33 [116, 116] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s30 -> s6 [117, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s32 -> s1 [0, 64] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s32 -> s6 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s32 -> s7 [65, 65] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s32 -> s1 [66, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s32 -> s1 [91, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s33 -> s6 [0, 80] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s33 -> s6 [91, 65535] { R10150 += 1, R10064 += 1, R7384 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10150 += 1 };
  accepting s34, s6, s1, s7, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s2 [0, 64] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s3 [0, 65535] { R10152 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s0 [0, 65535] { R10151 += 1, R10152 += 1 };
  s0 -> s4 [65, 65] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s5 [65, 65] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s6 [65, 65] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s7 [65, 65] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s0 -> s1 [66, 65535] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s0 -> s2 [66, 65535] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s1 -> s1 [0, 64] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s1 [0, 65535] { R10152 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s5 [65, 65] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s1 -> s1 [66, 65535] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s1 [0, 64] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s2 [0, 64] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s2 -> s4 [65, 65] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s5 [65, 65] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s6 [65, 65] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s2 -> s7 [65, 65] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s2 -> s1 [66, 65535] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s2 -> s2 [66, 65535] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s1 [0, 64] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s2 [0, 64] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s3 [0, 65535] { R10152 += 1, R10065 += 1, R10066 += 1 };
  s3 -> s4 [65, 65] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s5 [65, 65] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s6 [65, 65] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s7 [65, 65] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s3 -> s1 [66, 65535] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s3 -> s2 [66, 65535] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s4 -> s4 [0, 65535] { R10152 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R10152 += 1 };
  s6 -> s5 [0, 65535] { R10152 += 1, R10066 += 1, R9692 += 1, R9693 += 1 };
  s6 -> s6 [0, 65535] { R10152 += 1, R10066 += 1, R9691 += 1, R9692 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10152 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s2 [0, 65535] { R10154 += 1, R10067 += 1, R10068 += 1 };
  s0 -> s0 [0, 65535] { R10153 += 1, R10154 += 1 };
  s0 -> s3 [65, 65] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s4 [65, 65] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s1 [66, 65535] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s1 [0, 64] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s1 [0, 65535] { R10154 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s4 [65, 65] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s1 [66, 65535] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s1 [0, 64] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s2 [0, 65535] { R10154 += 1, R10067 += 1, R10068 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s4 [65, 65] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s1 [66, 65535] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s3 -> s3 [0, 65535] { R10154 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10154 += 1 };
  s4 -> s4 [0, 65535] { R10154 += 1, R10068 += 1, R9697 += 1, R9698 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10154 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R10156 += 1, R10070 += 1 };
  s0 -> s0 [0, 65535] { R10155 += 1, R10156 += 1 };
  s0 -> s2 [0, 65535] { R10156 += 1, R10069 += 1, R10070 += 1 };
  s0 -> s3 [65, 65] { R10156 += 1, R10070 += 1 };
  s0 -> s4 [65, 65] { R10156 += 1, R10070 += 1 };
  s0 -> s1 [66, 65535] { R10156 += 1, R10070 += 1 };
  s1 -> s1 [0, 64] { R10156 += 1, R10070 += 1 };
  s1 -> s1 [0, 65535] { R10156 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10156 += 1, R10070 += 1 };
  s1 -> s4 [65, 65] { R10156 += 1, R10070 += 1 };
  s1 -> s1 [66, 65535] { R10156 += 1, R10070 += 1 };
  s2 -> s1 [0, 64] { R10156 += 1, R10070 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10156 += 1, R10069 += 1, R10070 += 1 };
  s2 -> s3 [65, 65] { R10156 += 1, R10070 += 1 };
  s2 -> s4 [65, 65] { R10156 += 1, R10070 += 1 };
  s2 -> s1 [66, 65535] { R10156 += 1, R10070 += 1 };
  s3 -> s3 [0, 65535] { R10156 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10156 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10156 += 1, R10070 += 1 };
  s5 -> s5 [0, 65535] { R10156 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s0 -> s2 [0, 64] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s0 -> s3 [0, 65535] { R10158 += 1, R10071 += 1, R10072 += 1 };
  s0 -> s0 [0, 65535] { R10157 += 1, R10158 += 1 };
  s0 -> s4 [65, 65] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s0 -> s5 [65, 65] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s0 -> s6 [65, 65] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s0 -> s7 [65, 65] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s0 -> s2 [66, 79] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s0 -> s1 [66, 65535] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s0 -> s8 [80, 80] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s0 -> s2 [81, 65535] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s1 -> s1 [0, 64] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s1 -> s2 [0, 64] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s1 -> s4 [65, 65] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s1 -> s5 [65, 65] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s1 -> s6 [65, 65] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s1 -> s7 [65, 65] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s1 -> s2 [66, 79] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s1 -> s1 [66, 65535] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s1 -> s8 [80, 80] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s1 -> s2 [81, 65535] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s2 -> s2 [0, 64] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s2 -> s5 [65, 65] { R10158 += 1, R10072 += 1 };
  s2 -> s6 [65, 65] { R10158 += 1, R10072 += 1 };
  s2 -> s2 [66, 79] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s2 -> s2 [66, 65535] { R10158 += 1, R10072 += 1 };
  s2 -> s8 [80, 80] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s2 -> s2 [81, 65535] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s3 -> s1 [0, 64] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s3 -> s2 [0, 64] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s3 -> s3 [0, 65535] { R10158 += 1, R10071 += 1, R10072 += 1 };
  s3 -> s4 [65, 65] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s3 -> s5 [65, 65] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s3 -> s6 [65, 65] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s3 -> s7 [65, 65] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s3 -> s2 [66, 79] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s3 -> s1 [66, 65535] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s3 -> s8 [80, 80] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s3 -> s2 [81, 65535] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s6 -> s6 [0, 79] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s6 -> s6 [0, 65535] { R10158 += 1, R10072 += 1 };
  s6 -> s11 [80, 80] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s6 -> s6 [81, 65535] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s7 -> s6 [0, 79] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s7 -> s7 [0, 65535] { R10158 += 1, R10072 += 1, R10007 += 1, R10008 += 1 };
  s7 -> s11 [80, 80] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s7 -> s6 [81, 65535] { R10158 += 1, R10072 += 1, R10008 += 1, R10009 += 1 };
  s8 -> s8 [0, 64] { R10158 += 1, R10072 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10158 += 1 };
  s8 -> s10 [65, 65] { R10158 += 1, R10072 += 1 };
  s8 -> s11 [65, 65] { R10158 += 1, R10072 += 1 };
  s8 -> s8 [66, 65535] { R10158 += 1, R10072 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10158 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10158 += 1 };
  s11 -> s11 [0, 65535] { R10158 += 1, R10072 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10158 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R5 = R10036 && R6 = R10158 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R59 = 0 && R60 = R10036 && R61 = 0 && R62 = R10036 && R63 = 0 && R64 = R10036 && R65 = 0 && R66 = R10158 && R67 = 0 && R68 = R10158 && R69 = 0 && R70 = R10158 && R86 + R85 = 0 && R10013 = 0 && R10014 = R10036 && R10015 = 0 && R10016 = R10036 && R10017 = 0 && R10018 = R10036 && R10019 = 0 && R10020 = R10036 && R10021 = 0 && R10022 = R10036 && R10023 = 0 && R10024 = R10036 && R10025 = 0 && R10026 = R10036 && R10027 = 0 && R10028 = R10036 && R10029 = 0 && R10030 = R10036 && R10031 = 0 && R10032 = R10036 && R10033 = 0 && R10034 = R10036 && R10035 = 0 && R10037 = 0 && R10038 = R10158 && R10039 = 0 && R10040 = R10158 && R10041 = 0 && R10042 = R10158 && R10043 = 0 && R10044 = R10158 && R10045 = 0 && R10046 = R10158 && R10047 = 0 && R10048 = R10158 && R10049 = 0 && R10050 = R10158 && R10053 = 0 && R10054 = 0 && R10063 = 0 && R10064 = 0 && R10065 = 0 && R10066 = 0 && R10071 = 0 && R10072 = 0 && R10087 = 10 && R10088 = R10158 && R10089 = 10 && R10090 = R10158 && R10091 = 10 && R10092 = R10158 && R10093 = 10 && R10094 = R10158 && R10095 = 10 && R10096 = R10158 && R10097 = 10 && R10098 = R10158 && R10099 = 10 && R10100 = R10158 && R10101 = 10 && R10102 = R10158 && R10103 = 10 && R10104 = R10158 && R10105 = 10 && R10106 = R10158 && R10107 = 10 && R10108 = R10158 && R10109 = 10 && R10110 = R10158 && R10111 = 10 && R10112 = R10158 && R10113 = 10 && R10114 = R10158 && R10115 = 10 && R10116 = R10158 && R10117 = 10 && R10118 = R10158 && R10119 = 10 && R10120 = R10158 && R10121 = 10 && R10122 = R10158 && R10123 = 10 && R10124 = R10158 && R10125 = 10 && R10126 = R10158 && R10127 = 10 && R10128 = R10158 && R10129 = 10 && R10130 = R10158 && R10131 = 10 && R10132 = R10158 && R10133 = 10 && R10134 = R10158 && R10135 = 10 && R10136 = R10158 && R10137 = 10 && R10138 = R10158 && R10139 = 10 && R10140 = R10158 && R10141 = 10 && R10142 = R10158 && R10143 = 10 && R10144 = R10158 && R10145 = 10 && R10146 = R10158 && R10147 = 10 && R10148 = R10158 && R10149 = 10 && R10150 = R10158 && R10151 = 10 && R10152 = R10158 && R10153 = 10 && R10154 = R10158 && R10155 = 10 && R10156 = R10158 && R10157 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R9696 + R9693 + R10012 + R10009 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && -1*R454 + -1*R453 < 1 && R456 + R455 < 1 && 0 < R10036 && 9 < R10158 && (R454 + R453 != 0 || R466 + R463 = 0 || (R459 + R457 = 0 && R460 + R458 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R464 + R461 = 0 && R465 + R462 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R7385 + R7383 = 0 && R7386 + R7384 = 0)) && (R454 + R453 != 0 || R466 + R463 = 0 || (R9694 + R9691 = 0 && R9695 + R9692 = 0)) && (R459 + R457 != 0 || R454 + R453 + -1*R460 + -1*R458 = 0 || R454 + R453 < 1) && (R464 + R461 != 0 || R454 + R453 + -1*R465 + -1*R462 = 0 || R454 + R453 < 1) && (R7385 + R7383 != 0 || R454 + R453 + -1*R7386 + -1*R7384 = 0 || R454 + R453 < 1) && (R9694 + R9691 != 0 || R454 + R453 + -1*R9695 + -1*R9692 = 0 || R454 + R453 < 1) && (R33 = 0 || (R77 = 0 && R78 = 0)) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R34 = 0 || (R10051 = 0 && R10052 = 0)) && (R34 = 0 || (R10055 = 0 && R10056 = 0)) && (R34 = 0 || (R10057 = 0 && R10058 = 0)) && (R34 = 0 || (R10059 = 0 && R10060 = 0)) && (R34 = 0 || (R10061 = 0 && R10062 = 0)) && (R34 = 0 || (R10067 = 0 && R10068 = 0)) && (R34 = 0 || (R10069 = 0 && R10070 = 0)) && (R37 = 0 || (R10073 = 0 && R10074 = 0)) && (R37 = 0 || (R10075 = 0 && R10076 = 0)) && (R37 = 0 || (R10077 = 0 && R10078 = 0)) && (R37 = 0 || (R10079 = 0 && R10080 = 0)) && (R37 = 0 || (R10081 = 0 && R10082 = 0)) && (R37 = 0 || (R10083 = 0 && R10084 = 0)) && (R37 = 0 || (R10085 = 0 && R10086 = 0)) && (R38 = 0 || (R81 = 0 && R82 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R94 + R91 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R459 + R457 = 0 || R454 + R453 < 1) && (R464 + R461 = 0 || R454 + R453 < 1) && (R7385 + R7383 = 0 || R454 + R453 < 1) && (R9694 + R9691 = 0 || R454 + R453 < 1) && (R9702 + R9699 = 0 || (R9700 + R9697 = 0 && R9701 + R9698 = 0)) && (R9702 + R9699 = 0 || (R10010 + R10007 = 0 && R10011 + R10008 = 0));
// End of Parikh automata intersection problem
