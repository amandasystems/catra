// Parikh automata intersection problem, generated by OSTRICH+
counter int R10750, R10751, R10752, R10753, R10754, R10755, R11442, R11443, R11444, R11445, R11446, R11447, R11992, R11993, R11994, R11995, R11996, R11997, R11998, R11999, R12000, R12001, R12002, R12003, R12004, R12005, R12006, R12007, R12008, R12009, R12010, R12011, R12012, R12013, R12014, R12015, R12016, R12017, R12018, R12019, R12020, R12021, R12022, R12023, R12024, R12025, R12026, R12027, R12028, R12029, R12030, R12031, R12032, R12033, R12034, R12035, R12036, R12037, R12038, R12039, R12040, R12041, R12042, R12043, R12044, R12045, R12046, R12047, R12048, R12049, R12050, R12051, R12052, R12053, R12054, R12055, R12056, R12057, R12058, R12059, R12060, R12061, R12062, R12063, R12064, R12065, R12066, R12067, R12068, R12069, R12070, R12071, R12072, R12073, R12074, R12075, R12076, R12077, R12078, R12079, R12080, R12081, R12082, R12083, R12084, R12085, R12086, R12087, R12088, R12089, R12090, R12091, R12092, R12093, R12094, R12095, R12096, R12097, R12098, R12099, R12100, R12101, R12102, R12103, R12104, R12105, R12106, R12107, R12108, R12109, R12110, R12111, R12112, R12113, R12114, R12115, R12116, R12117, R12118, R12119, R12120, R12121, R12122, R12123, R12124, R12125, R12126, R12127, R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6618, R6619, R6620, R6621, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R12023 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R12022 += 1, R12023 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12023 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R12025 += 1 };
  s0 -> s0 [0, 65535] { R12024 += 1, R12025 += 1 };
  s0 -> s2 [0, 65535] { R12025 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R12025 += 1 };
  s0 -> s1 [66, 65535] { R12025 += 1 };
  s1 -> s1 [0, 64] { R12025 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R12025 += 1 };
  s1 -> s1 [66, 65535] { R12025 += 1 };
  s2 -> s1 [0, 64] { R12025 += 1 };
  s2 -> s2 [0, 65535] { R12025 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R12025 += 1 };
  s2 -> s1 [66, 65535] { R12025 += 1 };
  s3 -> s3 [0, 65535] { R12025 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R12026 += 1, R12027 += 1 };
  s0 -> s1 [0, 65535] { R12027 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R12027 += 1, R69 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12027 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R12027 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535] { R12027 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12027 += 1, R69 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R12027 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R12029 += 1 };
  s0 -> s0 [0, 65535] { R12028 += 1, R12029 += 1 };
  s1 -> s1 [0, 65535] { R12029 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R12031 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R12031 += 1, R85 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R12030 += 1, R12031 += 1 };
  s1 -> s1 [0, 65535] { R12031 += 1, R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R12031 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12031 += 1 };
  s2 -> s2 [0, 65535] { R12031 += 1, R85 += 1, R28 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12031 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R12033 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R12032 += 1, R12033 += 1 };
  s0 -> s2 [108, 108] { R12033 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R12033 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R12033 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R12033 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R12033 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R12033 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R12033 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R12033 += 1, R87 += 1 };
  s6 -> s14 [108, 108] { R12033 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R12033 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R12033 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R12033 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R12033 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R12033 += 1, R87 += 1 };
  s12 -> s12 [0, 65535] { R12033 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R12033 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R12033 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R12033 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R12033 += 1, R87 += 1 };
  s18 -> s18 [0, 65535] { R12033 += 1 };
  s18 -> s13 [0, 65535];
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R12057 += 1 };
  s0 -> s0 [0, 65535] { R12056 += 1, R12057 += 1 };
  s0 -> s1 [45, 45] { R12057 += 1 };
  s0 -> s2 [46, 46] { R12057 += 1 };
  s0 -> s1 [48, 62] { R12057 += 1 };
  s0 -> s3 [65, 65] { R12057 += 1 };
  s0 -> s1 [66, 65535] { R12057 += 1 };
  s1 -> s1 [0, 43] { R12057 += 1 };
  s1 -> s1 [45, 45] { R12057 += 1 };
  s1 -> s2 [46, 46] { R12057 += 1 };
  s1 -> s1 [48, 62] { R12057 += 1 };
  s1 -> s3 [65, 65] { R12057 += 1 };
  s1 -> s1 [66, 65535] { R12057 += 1 };
  s2 -> s1 [0, 43] { R12057 += 1 };
  s2 -> s1 [45, 45] { R12057 += 1 };
  s2 -> s2 [46, 46] { R12057 += 1 };
  s2 -> s1 [48, 62] { R12057 += 1 };
  s2 -> s3 [65, 65] { R12057 += 1 };
  s2 -> s1 [66, 114] { R12057 += 1 };
  s2 -> s8 [115, 115] { R12057 += 1 };
  s2 -> s1 [116, 65535] { R12057 += 1 };
  s3 -> s3 [0, 43] { R12057 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R12057 += 1 };
  s3 -> s4 [46, 46] { R12057 += 1 };
  s3 -> s3 [48, 62] { R12057 += 1 };
  s3 -> s3 [65, 65535] { R12057 += 1 };
  s4 -> s3 [0, 43] { R12057 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R12057 += 1 };
  s4 -> s4 [46, 46] { R12057 += 1 };
  s4 -> s3 [48, 62] { R12057 += 1 };
  s4 -> s3 [65, 114] { R12057 += 1 };
  s4 -> s5 [115, 115] { R12057 += 1 };
  s4 -> s3 [116, 65535] { R12057 += 1 };
  s5 -> s3 [0, 43] { R12057 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R12057 += 1 };
  s5 -> s4 [46, 46] { R12057 += 1 };
  s5 -> s3 [48, 62] { R12057 += 1 };
  s5 -> s3 [65, 110] { R12057 += 1 };
  s5 -> s6 [111, 111] { R12057 += 1 };
  s5 -> s3 [112, 65535] { R12057 += 1 };
  s6 -> s3 [0, 43] { R12057 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R12057 += 1 };
  s6 -> s4 [46, 46] { R12057 += 1 };
  s6 -> s3 [48, 62] { R12057 += 1 };
  s6 -> s3 [65, 98] { R12057 += 1 };
  s6 -> s7 [99, 99] { R12057 += 1 };
  s6 -> s3 [100, 65535] { R12057 += 1 };
  s7 -> s3 [0, 43] { R12057 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R12057 += 1 };
  s7 -> s4 [46, 46] { R12057 += 1 };
  s7 -> s3 [48, 62] { R12057 += 1 };
  s7 -> s3 [65, 106] { R12057 += 1 };
  s7 -> s3 [108, 65535] { R12057 += 1 };
  s8 -> s1 [0, 43] { R12057 += 1 };
  s8 -> s1 [45, 45] { R12057 += 1 };
  s8 -> s2 [46, 46] { R12057 += 1 };
  s8 -> s1 [48, 62] { R12057 += 1 };
  s8 -> s3 [65, 65] { R12057 += 1 };
  s8 -> s1 [66, 110] { R12057 += 1 };
  s8 -> s9 [111, 111] { R12057 += 1 };
  s8 -> s1 [112, 65535] { R12057 += 1 };
  s9 -> s1 [0, 43] { R12057 += 1 };
  s9 -> s1 [45, 45] { R12057 += 1 };
  s9 -> s2 [46, 46] { R12057 += 1 };
  s9 -> s1 [48, 62] { R12057 += 1 };
  s9 -> s3 [65, 65] { R12057 += 1 };
  s9 -> s1 [66, 98] { R12057 += 1 };
  s9 -> s10 [99, 99] { R12057 += 1 };
  s9 -> s1 [100, 65535] { R12057 += 1 };
  s10 -> s1 [0, 43] { R12057 += 1 };
  s10 -> s1 [45, 45] { R12057 += 1 };
  s10 -> s2 [46, 46] { R12057 += 1 };
  s10 -> s1 [48, 62] { R12057 += 1 };
  s10 -> s3 [65, 65] { R12057 += 1 };
  s10 -> s1 [66, 106] { R12057 += 1 };
  s10 -> s1 [108, 65535] { R12057 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R12058 += 1, R12059 += 1 };
  s0 -> s1 [0, 65535] { R12059 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12059 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R12061 += 1 };
  s0 -> s2 [0, 65535] { R12061 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R12060 += 1, R12061 += 1 };
  s0 -> s3 [58, 58] { R12061 += 1 };
  s0 -> s1 [59, 65535] { R12061 += 1 };
  s1 -> s1 [0, 57] { R12061 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R12061 += 1 };
  s1 -> s1 [59, 65535] { R12061 += 1 };
  s2 -> s1 [0, 57] { R12061 += 1 };
  s2 -> s2 [0, 65535] { R12061 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R12061 += 1 };
  s2 -> s1 [59, 65535] { R12061 += 1 };
  s3 -> s3 [0, 65535] { R12061 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R12063 += 1 };
  s0 -> s0 [0, 65535] { R12062 += 1, R12063 += 1 };
  s0 -> s2 [0, 65535] { R12063 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R12063 += 1 };
  s0 -> s1 [44, 65535] { R12063 += 1 };
  s1 -> s1 [0, 42] { R12063 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R12063 += 1 };
  s1 -> s1 [44, 65535] { R12063 += 1 };
  s2 -> s1 [0, 42] { R12063 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12063 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R12063 += 1 };
  s2 -> s1 [44, 65535] { R12063 += 1 };
  s3 -> s3 [0, 65535] { R12063 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R12065 += 1 };
  s0 -> s0 [0, 65535] { R12064 += 1, R12065 += 1 };
  s0 -> s2 [0, 65535] { R12065 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R12065 += 1 };
  s0 -> s1 [66, 65535] { R12065 += 1 };
  s1 -> s1 [0, 64] { R12065 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R12065 += 1 };
  s1 -> s1 [66, 65535] { R12065 += 1 };
  s2 -> s1 [0, 64] { R12065 += 1 };
  s2 -> s2 [0, 65535] { R12065 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R12065 += 1 };
  s2 -> s1 [66, 65535] { R12065 += 1 };
  s3 -> s3 [0, 65535] { R12065 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R12067 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R12066 += 1, R12067 += 1 };
  s0 -> s2 [0, 65535] { R12067 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R12067 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R12067 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R12067 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12067 += 1 };
  s2 -> s1 [0, 90] { R12067 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12067 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R12067 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R12067 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R12067 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12067 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R12069 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R12068 += 1, R12069 += 1 };
  s0 -> s2 [0, 65535] { R12069 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R12069 += 1, R41 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R12069 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12069 += 1, R41 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R12069 += 1, R40 += 1, R41 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12069 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R12071 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12070 += 1, R12071 += 1 };
  s0 -> s2 [0, 65535] { R12071 += 1, R57 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R12071 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12071 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535] { R12071 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12071 += 1, R57 += 1, R31 += 1 };
  s3 -> s3 [0, 65535] { R12071 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R12073 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R12072 += 1, R12073 += 1 };
  s0 -> s2 [0, 65535] { R12073 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R12073 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R12073 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R12073 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12073 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R12073 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12073 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R12073 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R12073 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R12073 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12073 += 1 };
  s3 -> s5 [111, 111] { R12073 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R12073 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R12073 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R12073 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R12073 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R12073 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R12073 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R12073 += 1 };
  s6 -> s7 [97, 97] { R12073 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R12073 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R12073 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R12073 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R12073 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R12073 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R12073 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R12073 += 1 };
  s8 -> s9 [104, 104] { R12073 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R12073 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R12073 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R12073 += 1 };
  s9 -> s10 [111, 111] { R12073 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R12073 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R12073 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R12073 += 1 };
  s10 -> s11 [115, 115] { R12073 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R12073 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R12073 += 1, R59 += 1 };
  s11 -> s11 [0, 65535] { R12073 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R12073 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R12073 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R12073 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R12073 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R12074 += 1, R12075 += 1 };
  s0 -> s1 [0, 65535] { R12075 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R12075 += 1, R61 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R12075 += 1, R60 += 1, R61 += 1 };
  s1 -> s2 [0, 65535] { R12075 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12075 += 1 };
  s2 -> s2 [0, 65535] { R12075 += 1, R61 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12075 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R12077 += 1, R75 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R12077 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R12076 += 1, R12077 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12077 += 1 };
  s1 -> s1 [0, 65535] { R12077 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12077 += 1, R75 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R12077 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12077 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R12078 += 1, R12079 += 1 };
  s0 -> s1 [0, 65535] { R12079 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12079 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R12081 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R12080 += 1, R12081 += 1 };
  s0 -> s2 [0, 65535] { R12081 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R12081 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R12081 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R12081 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R12081 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12081 += 1 };
  s1 -> s3 [43, 43] { R12081 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R12081 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R12081 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R12081 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12081 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R12081 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R12081 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R12081 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12081 += 1, R77 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R12081 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12081 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12081 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R12083 += 1, R11999 += 1 };
  s0 -> s0 [0, 65535] { R12082 += 1, R12083 += 1 };
  s0 -> s2 [0, 65535] { R12083 += 1, R11998 += 1, R11999 += 1 };
  s0 -> s1 [66, 65535] { R12083 += 1, R11999 += 1 };
  s1 -> s1 [0, 64] { R12083 += 1, R11999 += 1 };
  s1 -> s1 [0, 65535] { R12083 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R12083 += 1, R11999 += 1 };
  s2 -> s1 [0, 64] { R12083 += 1, R11999 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12083 += 1, R11998 += 1, R11999 += 1 };
  s2 -> s1 [66, 65535] { R12083 += 1, R11999 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R12084 += 1, R12085 += 1 };
  s0 -> s1 [0, 65535] { R12085 += 1, R12000 += 1, R12001 += 1 };
  s0 -> s2 [0, 65535] { R12085 += 1, R12001 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12085 += 1, R12000 += 1, R12001 += 1 };
  s1 -> s2 [0, 65535] { R12085 += 1, R12001 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12085 += 1 };
  s2 -> s2 [0, 65535] { R12085 += 1, R12001 += 1, R32 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12085 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R12087 += 1, R12003 += 1 };
  s0 -> s2 [0, 65535] { R12087 += 1, R12002 += 1, R12003 += 1 };
  s0 -> s0 [0, 65535] { R12086 += 1, R12087 += 1 };
  s0 -> s1 [80, 65535] { R12087 += 1, R12003 += 1 };
  s1 -> s1 [0, 65] { R12087 += 1, R12003 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12087 += 1 };
  s1 -> s1 [80, 65535] { R12087 += 1, R12003 += 1 };
  s2 -> s1 [0, 65] { R12087 += 1, R12003 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12087 += 1, R12002 += 1, R12003 += 1 };
  s2 -> s1 [80, 65535] { R12087 += 1, R12003 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R12089 += 1, R12005 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R12088 += 1, R12089 += 1 };
  s0 -> s2 [0, 65535] { R12089 += 1, R12004 += 1, R12005 += 1 };
  s1 -> s1 [0, 65535] { R12089 += 1, R12005 += 1, R409 += 1 };
  s1 -> s4 [0, 65535] { R12089 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12089 += 1, R12005 += 1, R409 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12089 += 1, R12004 += 1, R12005 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12089 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R12091 += 1, R12007 += 1 };
  s0 -> s2 [0, 65535] { R12091 += 1, R12007 += 1, R411 += 1 };
  s0 -> s3 [0, 65535] { R12091 += 1, R12006 += 1, R12007 += 1 };
  s0 -> s0 [0, 65535] { R12090 += 1, R12091 += 1 };
  s0 -> s1 [81, 65535] { R12091 += 1, R12007 += 1 };
  s1 -> s1 [0, 79] { R12091 += 1, R12007 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12091 += 1 };
  s1 -> s1 [81, 65535] { R12091 += 1, R12007 += 1 };
  s2 -> s1 [0, 79] { R12091 += 1, R12007 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12091 += 1, R12007 += 1, R411 += 1 };
  s2 -> s5 [0, 65535] { R12091 += 1 };
  s2 -> s1 [81, 65535] { R12091 += 1, R12007 += 1 };
  s3 -> s1 [0, 79] { R12091 += 1, R12007 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12091 += 1, R12007 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R12091 += 1, R12006 += 1, R12007 += 1 };
  s3 -> s1 [81, 65535] { R12091 += 1, R12007 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12091 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R12093 += 1, R12009 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R12093 += 1, R12009 += 1, R414 += 1, R415 += 1 };
  s0 -> s3 [0, 65535] { R12093 += 1, R12008 += 1, R12009 += 1 };
  s0 -> s0 [0, 65535] { R12092 += 1, R12093 += 1 };
  s0 -> s1 [81, 65535] { R12093 += 1, R12009 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R12093 += 1, R12009 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R12093 += 1, R12009 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12093 += 1 };
  s1 -> s1 [81, 65535] { R12093 += 1, R12009 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R12093 += 1, R12009 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R12093 += 1, R12009 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R12093 += 1 };
  s2 -> s1 [81, 65535] { R12093 += 1, R12009 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R12093 += 1, R12009 += 1, R415 += 1 };
  s3 -> s2 [0, 65535] { R12093 += 1, R12009 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R12093 += 1, R12008 += 1, R12009 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R12093 += 1, R12009 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12093 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R12095 += 1, R12011 += 1, R419 += 1, R420 += 1 };
  s0 -> s2 [0, 65535] { R12095 += 1, R12010 += 1, R12011 += 1 };
  s0 -> s3 [0, 65535] { R12095 += 1, R12011 += 1, R420 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R12094 += 1, R12095 += 1 };
  s1 -> s1 [0, 65535] { R12095 += 1, R12011 += 1, R419 += 1, R420 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R12095 += 1, R12011 += 1, R420 += 1, R421 += 1 };
  s1 -> s6 [0, 65535] { R12095 += 1 };
  s2 -> s1 [0, 65535] { R12095 += 1, R12011 += 1, R419 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12095 += 1, R12010 += 1, R12011 += 1 };
  s2 -> s3 [0, 65535] { R12095 += 1, R12011 += 1, R420 += 1, R421 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12095 += 1, R12011 += 1 };
  s3 -> s3 [0, 65535] { R12095 += 1, R12011 += 1, R420 += 1, R421 += 1 };
  s3 -> s6 [0, 65535] { R12095 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12095 += 1, R12011 += 1 };
  s5 -> s6 [0, 65535] { R12095 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R12095 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R12097 += 1, R12013 += 1, R6621 += 1 };
  s0 -> s2 [0, 65535] { R12097 += 1, R12012 += 1, R12013 += 1 };
  s0 -> s0 [0, 65535] { R12096 += 1, R12097 += 1 };
  s0 -> s1 [0, 65535] { R12097 += 1, R12013 += 1 };
  s0 -> s1 [91, 65535] { R12097 += 1, R12013 += 1, R6621 += 1 };
  s1 -> s1 [0, 80] { R12097 += 1, R12013 += 1, R6621 += 1 };
  s1 -> s4 [0, 65535] { R12097 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12097 += 1, R12013 += 1 };
  s1 -> s1 [91, 65535] { R12097 += 1, R12013 += 1, R6621 += 1 };
  s2 -> s1 [0, 80] { R12097 += 1, R12013 += 1, R6621 += 1 };
  s2 -> s2 [0, 65535] { R12097 += 1, R12012 += 1, R12013 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12097 += 1, R12013 += 1 };
  s2 -> s1 [91, 65535] { R12097 += 1, R12013 += 1, R6621 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12097 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R12098 += 1, R12099 += 1 };
  s0 -> s1 [0, 65535] { R12099 += 1, R12015 += 1 };
  s0 -> s2 [0, 65535] { R12099 += 1, R12014 += 1, R12015 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12099 += 1, R12015 += 1 };
  s1 -> s4 [0, 65535] { R12099 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12099 += 1, R12015 += 1 };
  s2 -> s2 [0, 65535] { R12099 += 1, R12014 += 1, R12015 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12099 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R12101 += 1, R12017 += 1, R11446 += 1, R11447 += 1 };
  s0 -> s2 [0, 65535] { R12101 += 1, R12017 += 1 };
  s0 -> s0 [0, 65535] { R12100 += 1, R12101 += 1 };
  s0 -> s3 [0, 65535] { R12101 += 1, R12016 += 1, R12017 += 1 };
  s1 -> s1 [0, 65535] { R12101 += 1, R12017 += 1, R11446 += 1, R11447 += 1 };
  s1 -> s5 [0, 65535] { R12101 += 1 };
  s1 -> s2 [0, 65535] { R12101 += 1, R12017 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R12101 += 1 };
  s2 -> s2 [0, 65535] { R12101 += 1, R12017 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12101 += 1, R12017 += 1, R11446 += 1, R11447 += 1 };
  s3 -> s2 [0, 65535] { R12101 += 1, R12017 += 1 };
  s3 -> s3 [0, 65535] { R12101 += 1, R12016 += 1, R12017 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12101 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R12103 += 1, R12018 += 1, R12019 += 1 };
  s0 -> s0 [0, 65535] { R12102 += 1, R12103 += 1 };
  s0 -> s2 [0, 65535] { R12103 += 1, R12019 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12103 += 1, R12018 += 1, R12019 += 1 };
  s1 -> s2 [0, 65535] { R12103 += 1, R12019 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12103 += 1 };
  s2 -> s2 [0, 65535] { R12103 += 1, R12019 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12103 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s0 [0, 65535] { R12104 += 1, R12105 += 1 };
  s0 -> s1 [0, 65535] { R12105 += 1, R12021 += 1 };
  s0 -> s2 [0, 65535] { R12105 += 1, R12020 += 1, R12021 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12105 += 1 };
  s1 -> s1 [0, 65535] { R12105 += 1, R12021 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12105 += 1, R12021 += 1 };
  s2 -> s2 [0, 65535] { R12105 += 1, R12020 += 1, R12021 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12105 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R12107 += 1, R12035 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R12107 += 1, R12034 += 1, R12035 += 1 };
  s0 -> s0 [0, 65535] { R12106 += 1, R12107 += 1 };
  s1 -> s1 [0, 65535] { R12107 += 1, R12035 += 1, R34 += 1 };
  s1 -> s4 [0, 65535] { R12107 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12107 += 1, R12035 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R12107 += 1, R12034 += 1, R12035 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12107 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R12109 += 1, R12037 += 1 };
  s0 -> s2 [0, 65535] { R12109 += 1, R12036 += 1, R12037 += 1 };
  s0 -> s0 [0, 65535] { R12108 += 1, R12109 += 1 };
  s0 -> s3 [65, 65] { R12109 += 1, R12037 += 1 };
  s0 -> s4 [65, 65] { R12109 += 1, R12037 += 1 };
  s0 -> s5 [80, 80] { R12109 += 1, R12037 += 1 };
  s0 -> s1 [81, 65535] { R12109 += 1, R12037 += 1 };
  s1 -> s1 [0, 64] { R12109 += 1, R12037 += 1 };
  s1 -> s3 [65, 65] { R12109 += 1, R12037 += 1 };
  s1 -> s4 [65, 65] { R12109 += 1, R12037 += 1 };
  s1 -> s5 [80, 80] { R12109 += 1, R12037 += 1 };
  s1 -> s1 [81, 65535] { R12109 += 1, R12037 += 1 };
  s2 -> s1 [0, 64] { R12109 += 1, R12037 += 1 };
  s2 -> s2 [0, 65535] { R12109 += 1, R12036 += 1, R12037 += 1 };
  s2 -> s3 [65, 65] { R12109 += 1, R12037 += 1 };
  s2 -> s4 [65, 65] { R12109 += 1, R12037 += 1 };
  s2 -> s5 [80, 80] { R12109 += 1, R12037 += 1 };
  s2 -> s1 [81, 65535] { R12109 += 1, R12037 += 1 };
  s3 -> s3 [0, 65] { R12109 += 1, R12037 += 1 };
  s3 -> s7 [80, 80] { R12109 += 1, R12037 += 1 };
  s3 -> s3 [81, 65535] { R12109 += 1, R12037 += 1 };
  s5 -> s5 [0, 64] { R12109 += 1, R12037 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12109 += 1 };
  s5 -> s7 [65, 65] { R12109 += 1, R12037 += 1 };
  s5 -> s8 [65, 65] { R12109 += 1, R12037 += 1 };
  s5 -> s5 [80, 65535] { R12109 += 1, R12037 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R12109 += 1, R12037 += 1 };
  s7 -> s7 [0, 65535] { R12109 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R12109 += 1, R12037 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12109 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R12111 += 1, R12039 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R12111 += 1, R12038 += 1, R12039 += 1 };
  s0 -> s0 [0, 65535] { R12110 += 1, R12111 += 1 };
  s0 -> s3 [65, 65] { R12111 += 1, R12039 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R12111 += 1, R12039 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R12111 += 1, R12039 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R12111 += 1, R12039 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R12111 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R12111 += 1, R12039 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R12111 += 1, R12039 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R12111 += 1, R12039 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R12111 += 1, R12039 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R12111 += 1, R12038 += 1, R12039 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R12111 += 1, R12039 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R12111 += 1, R12039 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R12111 += 1, R12039 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R12111 += 1 };
  s3 -> s3 [0, 65535] { R12111 += 1, R12039 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12111 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12111 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R12113 += 1, R12041 += 1, R410 += 1 };
  s0 -> s2 [0, 65535] { R12113 += 1, R12040 += 1, R12041 += 1 };
  s0 -> s0 [0, 65535] { R12112 += 1, R12113 += 1 };
  s0 -> s3 [65, 65] { R12113 += 1, R12041 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R12113 += 1, R12041 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R12113 += 1, R12041 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R12113 += 1, R12041 += 1, R410 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12113 += 1 };
  s1 -> s3 [65, 65] { R12113 += 1, R12041 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R12113 += 1, R12041 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R12113 += 1, R12041 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R12113 += 1, R12041 += 1, R410 += 1 };
  s2 -> s2 [0, 65535] { R12113 += 1, R12040 += 1, R12041 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R12113 += 1, R12041 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R12113 += 1, R12041 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R12113 += 1, R12041 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R12113 += 1, R12041 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12113 += 1 };
  s4 -> s4 [0, 65535] { R12113 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12113 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R12114 += 1, R12115 += 1 };
  s0 -> s2 [0, 65535] { R12115 += 1, R12042 += 1, R12043 += 1 };
  s0 -> s3 [65, 65] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12115 += 1 };
  s1 -> s3 [65, 65] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12115 += 1, R12042 += 1, R12043 += 1 };
  s2 -> s3 [65, 65] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12115 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12115 += 1, R12043 += 1, R412 += 1, R413 += 1 };
  s4 -> s6 [0, 65535] { R12115 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12115 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R12116 += 1, R12117 += 1 };
  s0 -> s2 [0, 65535] { R12117 += 1, R12044 += 1, R12045 += 1 };
  s0 -> s3 [65, 65] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12117 += 1 };
  s1 -> s3 [65, 65] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s2 -> s2 [0, 65535] { R12117 += 1, R12044 += 1, R12045 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s3 -> s6 [0, 65535] { R12117 += 1 };
  s3 -> s3 [0, 65535] { R12117 += 1, R12045 += 1, R416 += 1, R417 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12117 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12117 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s0 -> s0 [0, 65535] { R12118 += 1, R12119 += 1 };
  s0 -> s3 [0, 65535] { R12119 += 1, R12046 += 1, R12047 += 1 };
  s0 -> s4 [65, 65] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s5 [65, 65] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s0 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s0 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s0 -> s1 [66, 65535] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s2 [91, 107] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s0 -> s8 [108, 108] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s0 -> s2 [109, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s1 -> s1 [0, 64] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s1 -> s4 [65, 65] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s5 [65, 65] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s1 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s1 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s1 -> s1 [66, 65535] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s2 [91, 107] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s1 -> s8 [108, 108] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s1 -> s2 [109, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s2 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s2 [0, 65535] { R12119 += 1 };
  s2 -> s6 [65, 65] { R12119 += 1, R12047 += 1 };
  s2 -> s7 [65, 65] { R12119 += 1, R12047 += 1 };
  s2 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s2 -> s2 [66, 65535] { R12119 += 1, R12047 += 1 };
  s2 -> s2 [91, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s3 -> s1 [0, 64] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535] { R12119 += 1, R12046 += 1, R12047 += 1 };
  s3 -> s4 [65, 65] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s5 [65, 65] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s3 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s3 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s3 -> s1 [66, 65535] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s2 [91, 107] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s3 -> s8 [108, 108] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s3 -> s2 [109, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s4 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s4 -> s4 [0, 65535] { R12119 += 1, R12047 += 1, R6618 += 1, R6619 += 1 };
  s4 -> s7 [91, 107] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s4 -> s10 [108, 108] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s4 -> s7 [109, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R12119 += 1 };
  s7 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s7 -> s34 [0, 65535];
  s7 -> s35 [0, 65535] { R12119 += 1 };
  s7 -> s7 [0, 65535] { R12119 += 1, R12047 += 1 };
  s7 -> s7 [91, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s8 -> s8 [0, 64] { R12119 += 1, R12047 += 1 };
  s8 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s8 -> s9 [65, 65] { R12119 += 1, R12047 += 1 };
  s8 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s8 -> s10 [65, 65] { R12119 += 1, R12047 += 1 };
  s8 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s8 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s8 -> s8 [66, 65535] { R12119 += 1, R12047 += 1 };
  s8 -> s2 [91, 110] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s8 -> s11 [111, 111] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s8 -> s2 [112, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s10 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s10 -> s10 [0, 65535] { R12119 += 1, R12047 += 1 };
  s10 -> s7 [91, 110] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s10 -> s12 [111, 111] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s10 -> s7 [112, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s11 -> s11 [0, 64] { R12119 += 1, R12047 += 1 };
  s11 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s11 -> s12 [65, 65] { R12119 += 1, R12047 += 1 };
  s11 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s11 -> s13 [65, 65] { R12119 += 1, R12047 += 1 };
  s11 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s11 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s11 -> s11 [66, 65535] { R12119 += 1, R12047 += 1 };
  s11 -> s2 [91, 98] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s11 -> s14 [99, 99] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s11 -> s2 [100, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s12 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s12 -> s12 [0, 65535] { R12119 += 1, R12047 += 1 };
  s12 -> s7 [91, 98] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s12 -> s15 [99, 99] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s12 -> s7 [100, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s14 -> s14 [0, 64] { R12119 += 1, R12047 += 1 };
  s14 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s14 -> s15 [65, 65] { R12119 += 1, R12047 += 1 };
  s14 -> s16 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s14 -> s17 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s14 -> s18 [65, 65] { R12119 += 1, R12047 += 1 };
  s14 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s14 -> s14 [66, 65535] { R12119 += 1, R12047 += 1 };
  s14 -> s2 [91, 96] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s14 -> s19 [97, 97] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s14 -> s2 [98, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s15 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s15 -> s15 [0, 65535] { R12119 += 1, R12047 += 1 };
  s15 -> s7 [91, 96] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s15 -> s16 [97, 97] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s15 -> s7 [98, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s16 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s16 -> s16 [0, 65535] { R12119 += 1, R12047 += 1 };
  s16 -> s7 [91, 107] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s16 -> s22 [108, 108] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s16 -> s7 [109, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s19 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s19 -> s19 [0, 64] { R12119 += 1, R12047 += 1 };
  s19 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s19 -> s16 [65, 65] { R12119 += 1, R12047 += 1 };
  s19 -> s17 [65, 65] { R12119 += 1, R12047 += 1 };
  s19 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s19 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s19 -> s19 [66, 65535] { R12119 += 1, R12047 += 1 };
  s19 -> s2 [91, 107] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s19 -> s20 [108, 108] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s19 -> s2 [109, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s20 -> s20 [0, 64] { R12119 += 1, R12047 += 1 };
  s20 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s20 -> s21 [65, 65] { R12119 += 1, R12047 += 1 };
  s20 -> s22 [65, 65] { R12119 += 1, R12047 += 1 };
  s20 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s20 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s20 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s20 -> s20 [66, 65535] { R12119 += 1, R12047 += 1 };
  s20 -> s2 [91, 103] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s20 -> s23 [104, 104] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s20 -> s2 [105, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s22 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s22 -> s22 [0, 65535] { R12119 += 1, R12047 += 1 };
  s22 -> s7 [91, 103] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s22 -> s25 [104, 104] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s22 -> s7 [105, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s23 -> s23 [0, 64] { R12119 += 1, R12047 += 1 };
  s23 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s23 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s23 -> s24 [65, 65] { R12119 += 1, R12047 += 1 };
  s23 -> s25 [65, 65] { R12119 += 1, R12047 += 1 };
  s23 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s23 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s23 -> s23 [66, 65535] { R12119 += 1, R12047 += 1 };
  s23 -> s2 [91, 110] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s23 -> s26 [111, 111] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s23 -> s2 [112, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s25 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s25 -> s25 [0, 65535] { R12119 += 1, R12047 += 1 };
  s25 -> s7 [91, 110] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s25 -> s28 [111, 111] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s25 -> s7 [112, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s26 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s26 -> s26 [0, 64] { R12119 += 1, R12047 += 1 };
  s26 -> s27 [65, 65] { R12119 += 1, R12047 += 1 };
  s26 -> s28 [65, 65] { R12119 += 1, R12047 += 1 };
  s26 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s26 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s26 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s26 -> s26 [66, 65535] { R12119 += 1, R12047 += 1 };
  s26 -> s2 [91, 114] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s26 -> s29 [115, 115] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s26 -> s2 [116, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s28 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s28 -> s28 [0, 65535] { R12119 += 1, R12047 += 1 };
  s28 -> s7 [91, 114] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s28 -> s31 [115, 115] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s28 -> s7 [116, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s29 -> s29 [0, 64] { R12119 += 1, R12047 += 1 };
  s29 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s29 -> s30 [65, 65] { R12119 += 1, R12047 += 1 };
  s29 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s29 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s29 -> s31 [65, 65] { R12119 += 1, R12047 += 1 };
  s29 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s29 -> s29 [66, 65535] { R12119 += 1, R12047 += 1 };
  s29 -> s2 [91, 115] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s29 -> s32 [116, 116] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s29 -> s2 [117, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s31 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s31 -> s31 [0, 65535] { R12119 += 1, R12047 += 1 };
  s31 -> s7 [91, 115] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s31 -> s33 [116, 116] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s31 -> s7 [117, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s32 -> s2 [0, 64] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s32 -> s6 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s32 -> s7 [65, 65] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s32 -> s2 [66, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s32 -> s2 [91, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s33 -> s7 [0, 80] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s33 -> s7 [91, 65535] { R12119 += 1, R12047 += 1, R6619 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R12119 += 1 };
  accepting s34, s2, s6, s7, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s0 -> s2 [0, 64] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s0 -> s0 [0, 65535] { R12120 += 1, R12121 += 1 };
  s0 -> s3 [0, 65535] { R12121 += 1, R12048 += 1, R12049 += 1 };
  s0 -> s4 [65, 65] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s0 -> s5 [65, 65] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s0 -> s6 [65, 65] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s0 -> s7 [65, 65] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s0 -> s1 [66, 65535] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s0 -> s2 [66, 65535] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s1 -> s1 [0, 64] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s1 -> s11 [0, 64] { R12121 += 1, R12049 += 1 };
  s1 -> s8 [65, 65] { R12121 += 1, R12049 += 1 };
  s1 -> s12 [65, 65] { R12121 += 1, R12049 += 1 };
  s1 -> s6 [65, 65] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s1 -> s7 [65, 65] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s1 -> s1 [66, 65535] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s1 -> s11 [66, 65535] { R12121 += 1, R12049 += 1 };
  s2 -> s1 [0, 64] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s2 -> s2 [0, 64] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s2 -> s4 [65, 65] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s2 -> s5 [65, 65] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s2 -> s6 [65, 65] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s2 -> s7 [65, 65] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s2 -> s1 [66, 65535] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s2 -> s2 [66, 65535] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s3 -> s1 [0, 64] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s3 -> s2 [0, 64] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s3 -> s3 [0, 65535] { R12121 += 1, R12048 += 1, R12049 += 1 };
  s3 -> s4 [65, 65] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s3 -> s5 [65, 65] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s3 -> s6 [65, 65] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s3 -> s7 [65, 65] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s3 -> s1 [66, 65535] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s3 -> s2 [66, 65535] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s4 -> s4 [0, 65535] { R12121 += 1, R12049 += 1, R10750 += 1, R10751 += 1 };
  s4 -> s6 [0, 65535] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s6 -> s8 [0, 65535] { R12121 += 1, R12049 += 1 };
  s6 -> s6 [0, 65535] { R12121 += 1, R12049 += 1, R10751 += 1, R10752 += 1 };
  s8 -> s8 [0, 65535] { R12121 += 1, R12049 += 1 };
  s8 -> s9 [0, 65535] { R12121 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R12121 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R12121 += 1, R12049 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R12121 += 1 };
  s11 -> s8 [65, 65] { R12121 += 1, R12049 += 1 };
  s11 -> s12 [65, 65] { R12121 += 1, R12049 += 1 };
  s11 -> s11 [66, 65535] { R12121 += 1, R12049 += 1 };
  s12 -> s12 [0, 65535] { R12121 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s0 -> s2 [0, 64] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s0 -> s0 [0, 65535] { R12122 += 1, R12123 += 1 };
  s0 -> s3 [0, 65535] { R12123 += 1, R12050 += 1, R12051 += 1 };
  s0 -> s4 [65, 65] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s0 -> s5 [65, 65] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s0 -> s6 [65, 65] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s0 -> s7 [65, 65] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s0 -> s1 [66, 65535] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s0 -> s2 [66, 65535] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s1 -> s1 [0, 64] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s1 -> s2 [0, 64] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s1 -> s4 [65, 65] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s1 -> s5 [65, 65] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s1 -> s6 [65, 65] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s1 -> s7 [65, 65] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s1 -> s1 [66, 65535] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s1 -> s2 [66, 65535] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s2 -> s2 [0, 64] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s2 -> s2 [0, 65535] { R12123 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [65, 65] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s2 -> s6 [65, 65] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s2 -> s2 [66, 65535] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s3 -> s1 [0, 64] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s3 -> s2 [0, 64] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s3 -> s3 [0, 65535] { R12123 += 1, R12050 += 1, R12051 += 1 };
  s3 -> s4 [65, 65] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s3 -> s5 [65, 65] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s3 -> s6 [65, 65] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s3 -> s7 [65, 65] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s3 -> s1 [66, 65535] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s3 -> s2 [66, 65535] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s5 -> s5 [0, 65535] { R12123 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R12123 += 1 };
  s6 -> s6 [0, 65535] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R12123 += 1, R12051 += 1, R11443 += 1, R11444 += 1 };
  s7 -> s7 [0, 65535] { R12123 += 1, R12051 += 1, R11442 += 1, R11443 += 1 };
  s8 -> s8 [0, 65535] { R12123 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R12125 += 1, R12053 += 1 };
  s0 -> s2 [0, 65535] { R12125 += 1, R12052 += 1, R12053 += 1 };
  s0 -> s0 [0, 65535] { R12124 += 1, R12125 += 1 };
  s0 -> s3 [65, 65] { R12125 += 1, R12053 += 1 };
  s0 -> s4 [65, 65] { R12125 += 1, R12053 += 1 };
  s0 -> s1 [66, 65535] { R12125 += 1, R12053 += 1 };
  s1 -> s1 [0, 64] { R12125 += 1, R12053 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12125 += 1 };
  s1 -> s3 [65, 65] { R12125 += 1, R12053 += 1 };
  s1 -> s4 [65, 65] { R12125 += 1, R12053 += 1 };
  s1 -> s1 [66, 65535] { R12125 += 1, R12053 += 1 };
  s2 -> s1 [0, 64] { R12125 += 1, R12053 += 1 };
  s2 -> s2 [0, 65535] { R12125 += 1, R12052 += 1, R12053 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R12125 += 1, R12053 += 1 };
  s2 -> s4 [65, 65] { R12125 += 1, R12053 += 1 };
  s2 -> s1 [66, 65535] { R12125 += 1, R12053 += 1 };
  s3 -> s6 [0, 65535] { R12125 += 1 };
  s3 -> s3 [0, 65535] { R12125 += 1, R12053 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12125 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12125 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s0 -> s2 [0, 64] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s0 -> s0 [0, 65535] { R12126 += 1, R12127 += 1 };
  s0 -> s3 [0, 65535] { R12127 += 1, R12054 += 1, R12055 += 1 };
  s0 -> s4 [65, 65] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s0 -> s5 [65, 65] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s0 -> s6 [65, 65] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s0 -> s7 [65, 65] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s0 -> s2 [66, 79] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s0 -> s1 [66, 65535] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s0 -> s8 [80, 80] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s0 -> s2 [81, 65535] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s1 -> s1 [0, 64] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s1 -> s2 [0, 64] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s1 -> s4 [65, 65] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s1 -> s5 [65, 65] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s1 -> s6 [65, 65] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s1 -> s7 [65, 65] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s1 -> s2 [66, 79] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s1 -> s1 [66, 65535] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s1 -> s8 [80, 80] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s1 -> s2 [81, 65535] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s2 -> s2 [0, 64] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s2 -> s5 [65, 65] { R12127 += 1, R12055 += 1 };
  s2 -> s6 [65, 65] { R12127 += 1, R12055 += 1 };
  s2 -> s2 [66, 79] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s2 -> s2 [66, 65535] { R12127 += 1, R12055 += 1 };
  s2 -> s8 [80, 80] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s2 -> s2 [81, 65535] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s3 -> s1 [0, 64] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s3 -> s2 [0, 64] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s3 -> s3 [0, 65535] { R12127 += 1, R12054 += 1, R12055 += 1 };
  s3 -> s4 [65, 65] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s3 -> s5 [65, 65] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s3 -> s6 [65, 65] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s3 -> s7 [65, 65] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s3 -> s2 [66, 79] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s3 -> s1 [66, 65535] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s3 -> s8 [80, 80] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s3 -> s2 [81, 65535] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s5 -> s5 [0, 79] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s5 -> s5 [0, 65535] { R12127 += 1, R12055 += 1 };
  s5 -> s10 [80, 80] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s5 -> s5 [81, 65535] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s7 -> s5 [0, 79] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s7 -> s7 [0, 65535] { R12127 += 1, R12055 += 1, R11992 += 1, R11993 += 1 };
  s7 -> s10 [80, 80] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s7 -> s5 [81, 65535] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s8 -> s9 [0, 64] { R12127 += 1, R12055 += 1 };
  s8 -> s8 [0, 64] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s8 -> s10 [65, 65] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s8 -> s11 [65, 65] { R12127 += 1, R12055 += 1 };
  s8 -> s12 [65, 65] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s8 -> s13 [65, 65] { R12127 += 1, R12055 += 1 };
  s8 -> s9 [66, 65535] { R12127 += 1, R12055 += 1 };
  s8 -> s8 [66, 65535] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s9 -> s9 [0, 64] { R12127 += 1, R12055 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s9 [0, 65535] { R12127 += 1 };
  s9 -> s11 [65, 65] { R12127 += 1, R12055 += 1 };
  s9 -> s13 [65, 65] { R12127 += 1, R12055 += 1 };
  s9 -> s9 [66, 65535] { R12127 += 1, R12055 += 1 };
  s10 -> s10 [0, 65535] { R12127 += 1, R12055 += 1, R11993 += 1, R11994 += 1 };
  s10 -> s13 [0, 65535] { R12127 += 1, R12055 += 1 };
  s11 -> s14 [0, 65535];
  s11 -> s11 [0, 65535] { R12127 += 1 };
  s13 -> s14 [0, 65535];
  s13 -> s15 [0, 65535] { R12127 += 1 };
  s13 -> s13 [0, 65535] { R12127 += 1, R12055 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R12127 += 1 };
  accepting s13, s9, s14, s15, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R12021 && R6 = R12127 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R12021 && R58 = 0 && R59 = R12021 && R60 = 0 && R61 = R12021 && R62 = 0 && R63 = R12127 && R64 = 0 && R65 = R12127 && R66 = 0 && R67 = R12127 && R86 = 0 && R87 = 0 && R11998 = 0 && R11999 = R12021 && R12000 = 0 && R12001 = R12021 && R12002 = 0 && R12003 = R12021 && R12004 = 0 && R12005 = R12021 && R12006 = 0 && R12007 = R12021 && R12008 = 0 && R12009 = R12021 && R12010 = 0 && R12011 = R12021 && R12012 = 0 && R12013 = R12021 && R12014 = 0 && R12015 = R12021 && R12016 = 0 && R12017 = R12021 && R12018 = 0 && R12019 = R12021 && R12020 = 0 && R12022 = 0 && R12023 = R12127 && R12024 = 0 && R12025 = R12127 && R12026 = 0 && R12027 = R12127 && R12028 = 0 && R12029 = R12127 && R12030 = 0 && R12031 = R12127 && R12032 = 0 && R12033 = R12127 && R12036 = 0 && R12037 = 0 && R12046 = 0 && R12047 = 0 && R12048 = 0 && R12049 = 0 && R12050 = 0 && R12051 = 0 && R12054 = 0 && R12055 = 0 && R12056 = 10 && R12057 = R12127 && R12058 = 10 && R12059 = R12127 && R12060 = 10 && R12061 = R12127 && R12062 = 10 && R12063 = R12127 && R12064 = 10 && R12065 = R12127 && R12066 = 10 && R12067 = R12127 && R12068 = 10 && R12069 = R12127 && R12070 = 10 && R12071 = R12127 && R12072 = 10 && R12073 = R12127 && R12074 = 10 && R12075 = R12127 && R12076 = 10 && R12077 = R12127 && R12078 = 10 && R12079 = R12127 && R12080 = 10 && R12081 = R12127 && R12082 = 10 && R12083 = R12127 && R12084 = 10 && R12085 = R12127 && R12086 = 10 && R12087 = R12127 && R12088 = 10 && R12089 = R12127 && R12090 = 10 && R12091 = R12127 && R12092 = 10 && R12093 = R12127 && R12094 = 10 && R12095 = R12127 && R12096 = 10 && R12097 = R12127 && R12098 = 10 && R12099 = R12127 && R12100 = 10 && R12101 = R12127 && R12102 = 10 && R12103 = R12127 && R12104 = 10 && R12105 = R12127 && R12106 = 10 && R12107 = R12127 && R12108 = 10 && R12109 = R12127 && R12110 = 10 && R12111 = R12127 && R12112 = 10 && R12113 = R12127 && R12114 = 10 && R12115 = R12127 && R12116 = 10 && R12117 = R12127 && R12118 = 10 && R12119 = R12127 && R12120 = 10 && R12121 = R12127 && R12122 = 10 && R12123 = R12127 && R12124 = 10 && R12125 = R12127 && R12126 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R10755 + R10752 + R11997 + R11994 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R12021 && 9 < R12127 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R6620 + R6618 = 0 && R6621 + R6619 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R10753 + R10750 = 0 && R10754 + R10751 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R6620 + R6618 != 0 || R409 + R408 + -1*R6621 + -1*R6619 = 0 || R409 + R408 < 1) && (R10753 + R10750 != 0 || R409 + R408 + -1*R10754 + -1*R10751 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R12034 = 0 && R12035 = 0)) && (R34 = 0 || (R12038 = 0 && R12039 = 0)) && (R34 = 0 || (R12040 = 0 && R12041 = 0)) && (R34 = 0 || (R12042 = 0 && R12043 = 0)) && (R34 = 0 || (R12044 = 0 && R12045 = 0)) && (R34 = 0 || (R12052 = 0 && R12053 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R6620 + R6618 = 0 || R409 + R408 < 1) && (R10753 + R10750 = 0 || R409 + R408 < 1) && (R11447 + R11444 = 0 || (R11445 + R11442 = 0 && R11446 + R11443 = 0)) && (R11447 + R11444 = 0 || (R11995 + R11992 = 0 && R11996 + R11993 = 0));
// End of Parikh automata intersection problem
