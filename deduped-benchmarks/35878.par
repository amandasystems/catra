// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R424, R425, R43, R44, R45, R4554, R4555, R4556, R4557, R4558, R4559, R4560, R4561, R4562, R4563, R4564, R4565, R4974, R4975, R4976, R4977, R4978, R4979, R4980, R4981, R4982, R4983, R4984, R4985, R4986, R4987, R4988, R4989, R4990, R4991, R4992, R4993, R4994, R4995, R4996, R4997, R4998, R4999, R5, R5000, R5001, R5002, R5003, R5004, R5005, R5006, R5007, R5008, R5009, R5010, R5011, R5012, R5013, R5014, R5015, R5016, R5017, R5018, R5019, R5020, R5021, R5022, R5023, R5024, R5025, R5026, R5027, R5028, R5029, R5030, R5031, R5032, R5033, R5034, R5035, R5036, R5037, R5038, R5039, R5040, R5041, R5042, R5043, R5044, R5045, R5046, R5047, R5048, R5049, R5050, R5051, R5052, R5053, R5054, R5055, R5056, R5057, R5058, R5059, R5060, R5061, R5062, R5063, R5064, R5065, R5066, R5067, R5068, R5069, R5070, R5071, R5072, R5073, R5074, R5075, R5076, R5077, R5078, R5079, R5080, R5081, R5082, R5083, R5084, R5085, R5086, R5087, R5088, R5089, R5090, R5091, R5092, R5093, R5094, R5095, R5096, R5097, R5098, R5099, R5100, R5101, R5102, R5103, R5104, R5105, R5106, R5107, R5108, R5109, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R5004 += 1, R5005 += 1 };
  s0 -> s1 [0, 65535] { R5005 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5005 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R5007 += 1 };
  s0 -> s0 [0, 65535] { R5006 += 1, R5007 += 1 };
  s0 -> s2 [0, 65535] { R5007 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R5007 += 1 };
  s0 -> s1 [66, 65535] { R5007 += 1 };
  s1 -> s1 [0, 64] { R5007 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R5007 += 1 };
  s1 -> s1 [66, 65535] { R5007 += 1 };
  s2 -> s1 [0, 64] { R5007 += 1 };
  s2 -> s2 [0, 65535] { R5007 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R5007 += 1 };
  s2 -> s1 [66, 65535] { R5007 += 1 };
  s3 -> s3 [0, 65535] { R5007 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R5009 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R5008 += 1, R5009 += 1 };
  s0 -> s2 [0, 65535] { R5009 += 1, R69 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R5009 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R5009 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5009 += 1 };
  s2 -> s2 [0, 65535] { R5009 += 1, R69 += 1, R27 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5009 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R5011 += 1 };
  s0 -> s0 [0, 65535] { R5010 += 1, R5011 += 1 };
  s1 -> s1 [0, 65535] { R5011 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R5013 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R5013 += 1, R85 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R5012 += 1, R5013 += 1 };
  s1 -> s1 [0, 65535] { R5013 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R5013 += 1, R85 += 1, R28 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5013 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5013 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5013 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R5014 += 1, R5015 += 1 };
  s0 -> s1 [0, 65535] { R5015 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [108, 108] { R5015 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R5015 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R5015 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R5015 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R5015 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R5015 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R5015 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R5015 += 1, R87 += 1 };
  s6 -> s14 [108, 108] { R5015 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R5015 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R5015 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R5015 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R5015 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R5015 += 1, R87 += 1 };
  s12 -> s12 [0, 65535] { R5015 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R5015 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R5015 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R5015 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R5015 += 1, R87 += 1 };
  s18 -> s18 [0, 65535] { R5015 += 1 };
  s18 -> s13 [0, 65535];
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R5039 += 1 };
  s0 -> s0 [0, 65535] { R5038 += 1, R5039 += 1 };
  s0 -> s1 [45, 45] { R5039 += 1 };
  s0 -> s2 [46, 46] { R5039 += 1 };
  s0 -> s1 [48, 62] { R5039 += 1 };
  s0 -> s3 [65, 65] { R5039 += 1 };
  s0 -> s1 [66, 65535] { R5039 += 1 };
  s1 -> s1 [0, 43] { R5039 += 1 };
  s1 -> s1 [45, 45] { R5039 += 1 };
  s1 -> s2 [46, 46] { R5039 += 1 };
  s1 -> s1 [48, 62] { R5039 += 1 };
  s1 -> s3 [65, 65] { R5039 += 1 };
  s1 -> s1 [66, 65535] { R5039 += 1 };
  s2 -> s1 [0, 43] { R5039 += 1 };
  s2 -> s1 [45, 45] { R5039 += 1 };
  s2 -> s2 [46, 46] { R5039 += 1 };
  s2 -> s1 [48, 62] { R5039 += 1 };
  s2 -> s3 [65, 65] { R5039 += 1 };
  s2 -> s1 [66, 114] { R5039 += 1 };
  s2 -> s8 [115, 115] { R5039 += 1 };
  s2 -> s1 [116, 65535] { R5039 += 1 };
  s3 -> s3 [0, 43] { R5039 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R5039 += 1 };
  s3 -> s4 [46, 46] { R5039 += 1 };
  s3 -> s3 [48, 62] { R5039 += 1 };
  s3 -> s3 [65, 65535] { R5039 += 1 };
  s4 -> s3 [0, 43] { R5039 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R5039 += 1 };
  s4 -> s4 [46, 46] { R5039 += 1 };
  s4 -> s3 [48, 62] { R5039 += 1 };
  s4 -> s3 [65, 114] { R5039 += 1 };
  s4 -> s5 [115, 115] { R5039 += 1 };
  s4 -> s3 [116, 65535] { R5039 += 1 };
  s5 -> s3 [0, 43] { R5039 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R5039 += 1 };
  s5 -> s4 [46, 46] { R5039 += 1 };
  s5 -> s3 [48, 62] { R5039 += 1 };
  s5 -> s3 [65, 110] { R5039 += 1 };
  s5 -> s6 [111, 111] { R5039 += 1 };
  s5 -> s3 [112, 65535] { R5039 += 1 };
  s6 -> s3 [0, 43] { R5039 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R5039 += 1 };
  s6 -> s4 [46, 46] { R5039 += 1 };
  s6 -> s3 [48, 62] { R5039 += 1 };
  s6 -> s3 [65, 98] { R5039 += 1 };
  s6 -> s7 [99, 99] { R5039 += 1 };
  s6 -> s3 [100, 65535] { R5039 += 1 };
  s7 -> s3 [0, 43] { R5039 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R5039 += 1 };
  s7 -> s4 [46, 46] { R5039 += 1 };
  s7 -> s3 [48, 62] { R5039 += 1 };
  s7 -> s3 [65, 106] { R5039 += 1 };
  s7 -> s3 [108, 65535] { R5039 += 1 };
  s8 -> s1 [0, 43] { R5039 += 1 };
  s8 -> s1 [45, 45] { R5039 += 1 };
  s8 -> s2 [46, 46] { R5039 += 1 };
  s8 -> s1 [48, 62] { R5039 += 1 };
  s8 -> s3 [65, 65] { R5039 += 1 };
  s8 -> s1 [66, 110] { R5039 += 1 };
  s8 -> s9 [111, 111] { R5039 += 1 };
  s8 -> s1 [112, 65535] { R5039 += 1 };
  s9 -> s1 [0, 43] { R5039 += 1 };
  s9 -> s1 [45, 45] { R5039 += 1 };
  s9 -> s2 [46, 46] { R5039 += 1 };
  s9 -> s1 [48, 62] { R5039 += 1 };
  s9 -> s3 [65, 65] { R5039 += 1 };
  s9 -> s1 [66, 98] { R5039 += 1 };
  s9 -> s10 [99, 99] { R5039 += 1 };
  s9 -> s1 [100, 65535] { R5039 += 1 };
  s10 -> s1 [0, 43] { R5039 += 1 };
  s10 -> s1 [45, 45] { R5039 += 1 };
  s10 -> s2 [46, 46] { R5039 += 1 };
  s10 -> s1 [48, 62] { R5039 += 1 };
  s10 -> s3 [65, 65] { R5039 += 1 };
  s10 -> s1 [66, 106] { R5039 += 1 };
  s10 -> s1 [108, 65535] { R5039 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R5040 += 1, R5041 += 1 };
  s0 -> s1 [0, 65535] { R5041 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5041 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R5043 += 1 };
  s0 -> s2 [0, 65535] { R5043 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R5042 += 1, R5043 += 1 };
  s0 -> s3 [58, 58] { R5043 += 1 };
  s0 -> s1 [59, 65535] { R5043 += 1 };
  s1 -> s1 [0, 57] { R5043 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R5043 += 1 };
  s1 -> s1 [59, 65535] { R5043 += 1 };
  s2 -> s1 [0, 57] { R5043 += 1 };
  s2 -> s2 [0, 65535] { R5043 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R5043 += 1 };
  s2 -> s1 [59, 65535] { R5043 += 1 };
  s3 -> s3 [0, 65535] { R5043 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R5045 += 1 };
  s0 -> s2 [0, 65535] { R5045 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R5044 += 1, R5045 += 1 };
  s0 -> s3 [43, 43] { R5045 += 1 };
  s0 -> s1 [44, 65535] { R5045 += 1 };
  s1 -> s1 [0, 42] { R5045 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R5045 += 1 };
  s1 -> s1 [44, 65535] { R5045 += 1 };
  s2 -> s1 [0, 42] { R5045 += 1 };
  s2 -> s2 [0, 65535] { R5045 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R5045 += 1 };
  s2 -> s1 [44, 65535] { R5045 += 1 };
  s3 -> s3 [0, 65535] { R5045 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R5047 += 1 };
  s0 -> s0 [0, 65535] { R5046 += 1, R5047 += 1 };
  s0 -> s2 [0, 65535] { R5047 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R5047 += 1 };
  s0 -> s1 [66, 65535] { R5047 += 1 };
  s1 -> s1 [0, 64] { R5047 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R5047 += 1 };
  s1 -> s1 [66, 65535] { R5047 += 1 };
  s2 -> s1 [0, 64] { R5047 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5047 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R5047 += 1 };
  s2 -> s1 [66, 65535] { R5047 += 1 };
  s3 -> s3 [0, 65535] { R5047 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R5049 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R5049 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R5048 += 1, R5049 += 1 };
  s0 -> s3 [91, 91] { R5049 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R5049 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R5049 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R5049 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R5049 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R5049 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R5049 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R5049 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R5049 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5049 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R5051 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R5050 += 1, R5051 += 1 };
  s0 -> s2 [0, 65535] { R5051 += 1, R40 += 1, R41 += 1 };
  s1 -> s4 [0, 65535] { R5051 += 1 };
  s1 -> s1 [0, 65535] { R5051 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5051 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5051 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5051 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R5053 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R5053 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R5052 += 1, R5053 += 1 };
  s1 -> s4 [0, 65535] { R5053 += 1 };
  s1 -> s1 [0, 65535] { R5053 += 1, R57 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5053 += 1, R57 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R5053 += 1, R56 += 1, R57 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5053 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R5055 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R5054 += 1, R5055 += 1 };
  s0 -> s2 [0, 65535] { R5055 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R5055 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R5055 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R5055 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5055 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R5055 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5055 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R5055 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R5055 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R5055 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R5055 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R5055 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R5055 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R5055 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R5055 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R5055 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R5055 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R5055 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R5055 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R5055 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R5055 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R5055 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R5055 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R5055 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R5055 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R5055 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R5055 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R5055 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R5055 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R5055 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R5055 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R5055 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R5055 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R5055 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R5055 += 1 };
  s10 -> s11 [115, 115] { R5055 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R5055 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R5055 += 1, R59 += 1 };
  s11 -> s11 [0, 65535] { R5055 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R5055 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R5055 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R5055 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R5055 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R5057 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R5057 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R5056 += 1, R5057 += 1 };
  s1 -> s1 [0, 65535] { R5057 += 1, R61 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5057 += 1 };
  s2 -> s1 [0, 65535] { R5057 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R5057 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5057 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R5059 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R5058 += 1, R5059 += 1 };
  s0 -> s2 [0, 65535] { R5059 += 1, R74 += 1, R75 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5059 += 1, R75 += 1, R33 += 1 };
  s1 -> s4 [0, 65535] { R5059 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5059 += 1, R75 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R5059 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5059 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R5060 += 1, R5061 += 1 };
  s0 -> s1 [0, 65535] { R5061 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5061 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R5063 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R5063 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R5062 += 1, R5063 += 1 };
  s0 -> s3 [43, 43] { R5063 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R5063 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R5063 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R5063 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R5063 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R5063 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R5063 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R5063 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R5063 += 1, R77 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R5063 += 1, R76 += 1, R77 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R5063 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R5063 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R5063 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R5063 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5063 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5063 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5063 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R5065 += 1, R4981 += 1 };
  s0 -> s0 [0, 65535] { R5064 += 1, R5065 += 1 };
  s0 -> s2 [0, 65535] { R5065 += 1, R4980 += 1, R4981 += 1 };
  s0 -> s1 [66, 65535] { R5065 += 1, R4981 += 1 };
  s1 -> s1 [0, 64] { R5065 += 1, R4981 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5065 += 1 };
  s1 -> s1 [66, 65535] { R5065 += 1, R4981 += 1 };
  s2 -> s1 [0, 64] { R5065 += 1, R4981 += 1 };
  s2 -> s2 [0, 65535] { R5065 += 1, R4980 += 1, R4981 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R5065 += 1, R4981 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R5067 += 1, R4983 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R5067 += 1, R4982 += 1, R4983 += 1 };
  s0 -> s0 [0, 65535] { R5066 += 1, R5067 += 1 };
  s1 -> s1 [0, 65535] { R5067 += 1, R4983 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5067 += 1 };
  s2 -> s1 [0, 65535] { R5067 += 1, R4983 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5067 += 1, R4982 += 1, R4983 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5067 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R5069 += 1, R4985 += 1 };
  s0 -> s2 [0, 65535] { R5069 += 1, R4984 += 1, R4985 += 1 };
  s0 -> s0 [0, 65535] { R5068 += 1, R5069 += 1 };
  s0 -> s1 [80, 65535] { R5069 += 1, R4985 += 1 };
  s1 -> s1 [0, 65] { R5069 += 1, R4985 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5069 += 1 };
  s1 -> s1 [80, 65535] { R5069 += 1, R4985 += 1 };
  s2 -> s1 [0, 65] { R5069 += 1, R4985 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5069 += 1, R4984 += 1, R4985 += 1 };
  s2 -> s1 [80, 65535] { R5069 += 1, R4985 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R5070 += 1, R5071 += 1 };
  s0 -> s1 [0, 65535] { R5071 += 1, R4986 += 1, R4987 += 1 };
  s0 -> s2 [0, 65535] { R5071 += 1, R4987 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R5071 += 1, R4986 += 1, R4987 += 1 };
  s1 -> s2 [0, 65535] { R5071 += 1, R4987 += 1, R409 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5071 += 1, R4987 += 1, R409 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5071 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5071 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R5073 += 1, R4989 += 1 };
  s0 -> s2 [0, 65535] { R5073 += 1, R4989 += 1, R411 += 1 };
  s0 -> s3 [0, 65535] { R5073 += 1, R4988 += 1, R4989 += 1 };
  s0 -> s0 [0, 65535] { R5072 += 1, R5073 += 1 };
  s0 -> s1 [81, 65535] { R5073 += 1, R4989 += 1 };
  s1 -> s1 [0, 79] { R5073 += 1, R4989 += 1 };
  s1 -> s1 [0, 65535] { R5073 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R5073 += 1, R4989 += 1 };
  s2 -> s1 [0, 79] { R5073 += 1, R4989 += 1 };
  s2 -> s2 [0, 65535] { R5073 += 1, R4989 += 1, R411 += 1 };
  s2 -> s5 [0, 65535] { R5073 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R5073 += 1, R4989 += 1 };
  s3 -> s1 [0, 79] { R5073 += 1, R4989 += 1 };
  s3 -> s2 [0, 65535] { R5073 += 1, R4989 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R5073 += 1, R4988 += 1, R4989 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R5073 += 1, R4989 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5073 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R5075 += 1, R4991 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R5075 += 1, R4991 += 1, R414 += 1, R415 += 1 };
  s0 -> s3 [0, 65535] { R5075 += 1, R4990 += 1, R4991 += 1 };
  s0 -> s0 [0, 65535] { R5074 += 1, R5075 += 1 };
  s0 -> s1 [81, 65535] { R5075 += 1, R4991 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R5075 += 1, R4991 += 1, R415 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5075 += 1 };
  s1 -> s1 [0, 65535] { R5075 += 1, R4991 += 1 };
  s1 -> s1 [81, 65535] { R5075 += 1, R4991 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R5075 += 1, R4991 += 1, R415 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5075 += 1, R4991 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535] { R5075 += 1 };
  s2 -> s1 [81, 65535] { R5075 += 1, R4991 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R5075 += 1, R4991 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R5075 += 1, R4991 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R5075 += 1, R4990 += 1, R4991 += 1 };
  s3 -> s1 [81, 65535] { R5075 += 1, R4991 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5075 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R5077 += 1, R4993 += 1, R420 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R5076 += 1, R5077 += 1 };
  s0 -> s2 [0, 65535] { R5077 += 1, R4993 += 1, R419 += 1, R420 += 1 };
  s0 -> s3 [0, 65535] { R5077 += 1, R4992 += 1, R4993 += 1 };
  s1 -> s1 [0, 65535] { R5077 += 1, R4993 += 1, R420 += 1, R421 += 1 };
  s1 -> s6 [0, 65535] { R5077 += 1, R4993 += 1 };
  s1 -> s5 [0, 65535] { R5077 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R5077 += 1, R4993 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R5077 += 1, R4993 += 1, R419 += 1, R420 += 1 };
  s2 -> s5 [0, 65535] { R5077 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5077 += 1, R4993 += 1, R420 += 1, R421 += 1 };
  s3 -> s2 [0, 65535] { R5077 += 1, R4993 += 1, R419 += 1, R420 += 1 };
  s3 -> s3 [0, 65535] { R5077 += 1, R4992 += 1, R4993 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5077 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R5077 += 1, R4993 += 1 };
  s6 -> s5 [0, 65535] { R5077 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s0 -> s0 [0, 65535] { R5078 += 1, R5079 += 1 };
  s0 -> s2 [0, 65535] { R5079 += 1, R4994 += 1, R4995 += 1 };
  s0 -> s3 [0, 65535] { R5079 += 1, R4995 += 1, R424 += 1, R425 += 1 };
  s0 -> s1 [91, 107] { R5079 += 1, R4995 += 1, R425 += 1 };
  s0 -> s4 [108, 108] { R5079 += 1, R4995 += 1, R425 += 1 };
  s0 -> s1 [109, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s1 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5079 += 1, R4995 += 1 };
  s1 -> s6 [0, 65535] { R5079 += 1 };
  s1 -> s1 [91, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s2 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5079 += 1, R4994 += 1, R4995 += 1 };
  s2 -> s3 [0, 65535] { R5079 += 1, R4995 += 1, R424 += 1, R425 += 1 };
  s2 -> s1 [91, 107] { R5079 += 1, R4995 += 1, R425 += 1 };
  s2 -> s4 [108, 108] { R5079 += 1, R4995 += 1, R425 += 1 };
  s2 -> s1 [109, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s3 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5079 += 1, R4995 += 1, R424 += 1, R425 += 1 };
  s3 -> s6 [0, 65535] { R5079 += 1 };
  s3 -> s1 [91, 107] { R5079 += 1, R4995 += 1, R425 += 1 };
  s3 -> s4 [108, 108] { R5079 += 1, R4995 += 1, R425 += 1 };
  s3 -> s1 [109, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s4 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5079 += 1, R4995 += 1 };
  s4 -> s6 [0, 65535] { R5079 += 1 };
  s4 -> s1 [91, 110] { R5079 += 1, R4995 += 1, R425 += 1 };
  s4 -> s7 [111, 111] { R5079 += 1, R4995 += 1, R425 += 1 };
  s4 -> s1 [112, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5079 += 1 };
  s7 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R5079 += 1, R4995 += 1 };
  s7 -> s6 [0, 65535] { R5079 += 1 };
  s7 -> s1 [91, 98] { R5079 += 1, R4995 += 1, R425 += 1 };
  s7 -> s8 [99, 99] { R5079 += 1, R4995 += 1, R425 += 1 };
  s7 -> s1 [100, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s8 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s8 -> s6 [0, 65535] { R5079 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R5079 += 1, R4995 += 1 };
  s8 -> s1 [91, 96] { R5079 += 1, R4995 += 1, R425 += 1 };
  s8 -> s9 [97, 97] { R5079 += 1, R4995 += 1, R425 += 1 };
  s8 -> s1 [98, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s9 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R5079 += 1, R4995 += 1 };
  s9 -> s6 [0, 65535] { R5079 += 1 };
  s9 -> s1 [91, 107] { R5079 += 1, R4995 += 1, R425 += 1 };
  s9 -> s10 [108, 108] { R5079 += 1, R4995 += 1, R425 += 1 };
  s9 -> s1 [109, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s10 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R5079 += 1, R4995 += 1 };
  s10 -> s6 [0, 65535] { R5079 += 1 };
  s10 -> s1 [91, 103] { R5079 += 1, R4995 += 1, R425 += 1 };
  s10 -> s11 [104, 104] { R5079 += 1, R4995 += 1, R425 += 1 };
  s10 -> s1 [105, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s11 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R5079 += 1, R4995 += 1 };
  s11 -> s6 [0, 65535] { R5079 += 1 };
  s11 -> s1 [91, 110] { R5079 += 1, R4995 += 1, R425 += 1 };
  s11 -> s12 [111, 111] { R5079 += 1, R4995 += 1, R425 += 1 };
  s11 -> s1 [112, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s12 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R5079 += 1, R4995 += 1 };
  s12 -> s6 [0, 65535] { R5079 += 1 };
  s12 -> s1 [91, 114] { R5079 += 1, R4995 += 1, R425 += 1 };
  s12 -> s13 [115, 115] { R5079 += 1, R4995 += 1, R425 += 1 };
  s12 -> s1 [116, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s13 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R5079 += 1, R4995 += 1 };
  s13 -> s6 [0, 65535] { R5079 += 1 };
  s13 -> s1 [91, 115] { R5079 += 1, R4995 += 1, R425 += 1 };
  s13 -> s14 [116, 116] { R5079 += 1, R4995 += 1, R425 += 1 };
  s13 -> s1 [117, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  s14 -> s1 [0, 80] { R5079 += 1, R4995 += 1, R425 += 1 };
  s14 -> s1 [91, 65535] { R5079 += 1, R4995 += 1, R425 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R5080 += 1, R5081 += 1 };
  s0 -> s1 [0, 65535] { R5081 += 1, R4996 += 1, R4997 += 1 };
  s0 -> s2 [0, 65535] { R5081 += 1, R4997 += 1 };
  s1 -> s1 [0, 65535] { R5081 += 1, R4996 += 1, R4997 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R5081 += 1, R4997 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5081 += 1 };
  s2 -> s2 [0, 65535] { R5081 += 1, R4997 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5081 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R5083 += 1, R4998 += 1, R4999 += 1 };
  s0 -> s0 [0, 65535] { R5082 += 1, R5083 += 1 };
  s0 -> s2 [0, 65535] { R5083 += 1, R4999 += 1, R4564 += 1, R4565 += 1 };
  s0 -> s3 [0, 65535] { R5083 += 1, R4999 += 1, R4563 += 1, R4564 += 1 };
  s1 -> s1 [0, 65535] { R5083 += 1, R4998 += 1, R4999 += 1 };
  s1 -> s2 [0, 65535] { R5083 += 1, R4999 += 1, R4564 += 1, R4565 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R5083 += 1, R4999 += 1, R4563 += 1, R4564 += 1 };
  s2 -> s6 [0, 65535] { R5083 += 1, R4999 += 1 };
  s2 -> s2 [0, 65535] { R5083 += 1, R4999 += 1, R4564 += 1, R4565 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5083 += 1 };
  s3 -> s2 [0, 65535] { R5083 += 1, R4999 += 1, R4564 += 1, R4565 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5083 += 1 };
  s3 -> s3 [0, 65535] { R5083 += 1, R4999 += 1, R4563 += 1, R4564 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5083 += 1 };
  s6 -> s6 [0, 65535] { R5083 += 1, R4999 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R5083 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s0 [0, 65535] { R5084 += 1, R5085 += 1 };
  s0 -> s1 [0, 65535] { R5085 += 1, R5001 += 1 };
  s0 -> s2 [0, 65535] { R5085 += 1, R5000 += 1, R5001 += 1 };
  s1 -> s4 [0, 65535] { R5085 += 1 };
  s1 -> s1 [0, 65535] { R5085 += 1, R5001 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5085 += 1, R5001 += 1 };
  s2 -> s2 [0, 65535] { R5085 += 1, R5000 += 1, R5001 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5085 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R5087 += 1, R5003 += 1 };
  s0 -> s2 [0, 65535] { R5087 += 1, R5003 += 1, R4978 += 1, R4979 += 1 };
  s0 -> s0 [0, 65535] { R5086 += 1, R5087 += 1 };
  s0 -> s3 [0, 65535] { R5087 += 1, R5002 += 1, R5003 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5087 += 1, R5003 += 1 };
  s1 -> s5 [0, 65535] { R5087 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R5087 += 1, R5003 += 1 };
  s2 -> s2 [0, 65535] { R5087 += 1, R5003 += 1, R4978 += 1, R4979 += 1 };
  s2 -> s5 [0, 65535] { R5087 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5087 += 1, R5003 += 1 };
  s3 -> s2 [0, 65535] { R5087 += 1, R5003 += 1, R4978 += 1, R4979 += 1 };
  s3 -> s3 [0, 65535] { R5087 += 1, R5002 += 1, R5003 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5087 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R5089 += 1, R5017 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R5088 += 1, R5089 += 1 };
  s0 -> s2 [0, 65535] { R5089 += 1, R5016 += 1, R5017 += 1 };
  s1 -> s1 [0, 65535] { R5089 += 1, R5017 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5089 += 1 };
  s2 -> s1 [0, 65535] { R5089 += 1, R5017 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5089 += 1, R5016 += 1, R5017 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5089 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R5091 += 1, R5019 += 1 };
  s0 -> s0 [0, 65535] { R5090 += 1, R5091 += 1 };
  s0 -> s2 [0, 65535] { R5091 += 1, R5018 += 1, R5019 += 1 };
  s0 -> s3 [65, 65] { R5091 += 1, R5019 += 1 };
  s0 -> s4 [65, 65] { R5091 += 1, R5019 += 1 };
  s0 -> s5 [80, 80] { R5091 += 1, R5019 += 1 };
  s0 -> s1 [81, 65535] { R5091 += 1, R5019 += 1 };
  s1 -> s1 [0, 64] { R5091 += 1, R5019 += 1 };
  s1 -> s3 [65, 65] { R5091 += 1, R5019 += 1 };
  s1 -> s4 [65, 65] { R5091 += 1, R5019 += 1 };
  s1 -> s5 [80, 80] { R5091 += 1, R5019 += 1 };
  s1 -> s1 [81, 65535] { R5091 += 1, R5019 += 1 };
  s2 -> s1 [0, 64] { R5091 += 1, R5019 += 1 };
  s2 -> s2 [0, 65535] { R5091 += 1, R5018 += 1, R5019 += 1 };
  s2 -> s3 [65, 65] { R5091 += 1, R5019 += 1 };
  s2 -> s4 [65, 65] { R5091 += 1, R5019 += 1 };
  s2 -> s5 [80, 80] { R5091 += 1, R5019 += 1 };
  s2 -> s1 [81, 65535] { R5091 += 1, R5019 += 1 };
  s4 -> s4 [0, 65] { R5091 += 1, R5019 += 1 };
  s4 -> s8 [80, 80] { R5091 += 1, R5019 += 1 };
  s4 -> s4 [81, 65535] { R5091 += 1, R5019 += 1 };
  s5 -> s5 [0, 64] { R5091 += 1, R5019 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5091 += 1 };
  s5 -> s7 [65, 65] { R5091 += 1, R5019 += 1 };
  s5 -> s8 [65, 65] { R5091 += 1, R5019 += 1 };
  s5 -> s5 [80, 65535] { R5091 += 1, R5019 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5091 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R5091 += 1, R5019 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5091 += 1 };
  s8 -> s8 [80, 65535] { R5091 += 1, R5019 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R5093 += 1, R5021 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R5092 += 1, R5093 += 1 };
  s0 -> s2 [0, 65535] { R5093 += 1, R5020 += 1, R5021 += 1 };
  s0 -> s3 [65, 65] { R5093 += 1, R5021 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R5093 += 1, R5021 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R5093 += 1, R5021 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R5093 += 1, R5021 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5093 += 1 };
  s1 -> s3 [65, 65] { R5093 += 1, R5021 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R5093 += 1, R5021 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R5093 += 1, R5021 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R5093 += 1, R5021 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5093 += 1, R5020 += 1, R5021 += 1 };
  s2 -> s3 [65, 65] { R5093 += 1, R5021 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R5093 += 1, R5021 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R5093 += 1, R5021 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5093 += 1, R5021 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R5093 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5093 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5093 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R5095 += 1, R5023 += 1, R410 += 1 };
  s0 -> s2 [0, 65535] { R5095 += 1, R5022 += 1, R5023 += 1 };
  s0 -> s0 [0, 65535] { R5094 += 1, R5095 += 1 };
  s0 -> s3 [65, 65] { R5095 += 1, R5023 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R5095 += 1, R5023 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R5095 += 1, R5023 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R5095 += 1, R5023 += 1, R410 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5095 += 1 };
  s1 -> s3 [65, 65] { R5095 += 1, R5023 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R5095 += 1, R5023 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R5095 += 1, R5023 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R5095 += 1, R5023 += 1, R410 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5095 += 1, R5022 += 1, R5023 += 1 };
  s2 -> s3 [65, 65] { R5095 += 1, R5023 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R5095 += 1, R5023 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R5095 += 1, R5023 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5095 += 1, R5023 += 1, R410 += 1 };
  s3 -> s6 [0, 65535] { R5095 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5095 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5095 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R5096 += 1, R5097 += 1 };
  s0 -> s2 [0, 65535] { R5097 += 1, R5024 += 1, R5025 += 1 };
  s0 -> s3 [65, 65] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5097 += 1 };
  s1 -> s3 [65, 65] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R5097 += 1, R5024 += 1, R5025 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R5097 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5097 += 1 };
  s4 -> s4 [0, 65535] { R5097 += 1, R5025 += 1, R412 += 1, R413 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5097 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R5098 += 1, R5099 += 1 };
  s0 -> s2 [0, 65535] { R5099 += 1, R5026 += 1, R5027 += 1 };
  s0 -> s3 [65, 65] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5099 += 1 };
  s1 -> s3 [65, 65] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5099 += 1, R5026 += 1, R5027 += 1 };
  s2 -> s3 [65, 65] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s3 -> s3 [0, 65535] { R5099 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5099 += 1 };
  s4 -> s4 [0, 65535] { R5099 += 1, R5027 += 1, R416 += 1, R417 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5099 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R5101 += 1, R5028 += 1, R5029 += 1 };
  s0 -> s0 [0, 65535] { R5100 += 1, R5101 += 1 };
  s0 -> s3 [65, 65] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s0 -> s4 [65, 65] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s0 -> s1 [66, 65535] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [0, 64] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5101 += 1 };
  s1 -> s3 [65, 65] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s1 -> s4 [65, 65] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [66, 65535] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [0, 64] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s2 -> s2 [0, 65535] { R5101 += 1, R5028 += 1, R5029 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s2 -> s4 [65, 65] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [66, 65535] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s3 -> s3 [0, 65535] { R5101 += 1, R5029 += 1, R422 += 1, R423 += 1 };
  s3 -> s6 [0, 65535] { R5101 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5101 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5101 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s0 -> s2 [0, 64] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s0 -> s3 [0, 65535] { R5103 += 1, R5030 += 1, R5031 += 1 };
  s0 -> s0 [0, 65535] { R5102 += 1, R5103 += 1 };
  s0 -> s4 [65, 65] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s0 -> s5 [65, 65] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s0 -> s6 [65, 65] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s0 -> s7 [65, 65] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s0 -> s1 [66, 65535] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s0 -> s2 [66, 65535] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s1 -> s1 [0, 64] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s1 -> s11 [0, 64] { R5103 += 1, R5031 += 1 };
  s1 -> s12 [65, 65] { R5103 += 1, R5031 += 1 };
  s1 -> s8 [65, 65] { R5103 += 1, R5031 += 1 };
  s1 -> s4 [65, 65] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s1 -> s7 [65, 65] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s1 -> s1 [66, 65535] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s1 -> s11 [66, 65535] { R5103 += 1, R5031 += 1 };
  s2 -> s1 [0, 64] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s2 -> s2 [0, 64] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s2 -> s4 [65, 65] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s2 -> s5 [65, 65] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s2 -> s6 [65, 65] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s2 -> s7 [65, 65] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s2 -> s1 [66, 65535] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s2 -> s2 [66, 65535] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s3 -> s1 [0, 64] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s3 -> s2 [0, 64] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s3 -> s3 [0, 65535] { R5103 += 1, R5030 += 1, R5031 += 1 };
  s3 -> s4 [65, 65] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s3 -> s5 [65, 65] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s3 -> s6 [65, 65] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s3 -> s7 [65, 65] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s3 -> s1 [66, 65535] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s3 -> s2 [66, 65535] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s5 -> s5 [0, 65535] { R5103 += 1, R5031 += 1, R4554 += 1, R4555 += 1 };
  s5 -> s7 [0, 65535] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s7 -> s8 [0, 65535] { R5103 += 1, R5031 += 1 };
  s7 -> s7 [0, 65535] { R5103 += 1, R5031 += 1, R4555 += 1, R4556 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R5103 += 1, R5031 += 1 };
  s8 -> s10 [0, 65535] { R5103 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5103 += 1 };
  s11 -> s11 [0, 64] { R5103 += 1, R5031 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R5103 += 1 };
  s11 -> s12 [65, 65] { R5103 += 1, R5031 += 1 };
  s11 -> s8 [65, 65] { R5103 += 1, R5031 += 1 };
  s11 -> s11 [66, 65535] { R5103 += 1, R5031 += 1 };
  s12 -> s12 [0, 65535] { R5103 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s0 -> s0 [0, 65535] { R5104 += 1, R5105 += 1 };
  s0 -> s2 [0, 65535] { R5105 += 1, R5032 += 1, R5033 += 1 };
  s0 -> s3 [65, 65] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s0 -> s4 [65, 65] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s0 -> s1 [66, 65535] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s1 -> s1 [0, 64] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5105 += 1 };
  s1 -> s3 [65, 65] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s1 -> s4 [65, 65] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s1 -> s1 [66, 65535] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s2 -> s1 [0, 64] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5105 += 1, R5032 += 1, R5033 += 1 };
  s2 -> s3 [65, 65] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s2 -> s4 [65, 65] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s2 -> s1 [66, 65535] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s3 -> s3 [0, 65535] { R5105 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5105 += 1, R5033 += 1, R4560 += 1, R4561 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5105 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5105 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R5107 += 1, R5035 += 1 };
  s0 -> s0 [0, 65535] { R5106 += 1, R5107 += 1 };
  s0 -> s2 [0, 65535] { R5107 += 1, R5034 += 1, R5035 += 1 };
  s0 -> s3 [65, 65] { R5107 += 1, R5035 += 1 };
  s0 -> s4 [65, 65] { R5107 += 1, R5035 += 1 };
  s0 -> s1 [66, 65535] { R5107 += 1, R5035 += 1 };
  s1 -> s1 [0, 64] { R5107 += 1, R5035 += 1 };
  s1 -> s1 [0, 65535] { R5107 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5107 += 1, R5035 += 1 };
  s1 -> s4 [65, 65] { R5107 += 1, R5035 += 1 };
  s1 -> s1 [66, 65535] { R5107 += 1, R5035 += 1 };
  s2 -> s1 [0, 64] { R5107 += 1, R5035 += 1 };
  s2 -> s2 [0, 65535] { R5107 += 1, R5034 += 1, R5035 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5107 += 1, R5035 += 1 };
  s2 -> s4 [65, 65] { R5107 += 1, R5035 += 1 };
  s2 -> s1 [66, 65535] { R5107 += 1, R5035 += 1 };
  s3 -> s3 [0, 65535] { R5107 += 1, R5035 += 1 };
  s3 -> s6 [0, 65535] { R5107 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5107 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5107 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s0 -> s2 [0, 64] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s0 -> s0 [0, 65535] { R5108 += 1, R5109 += 1 };
  s0 -> s3 [0, 65535] { R5109 += 1, R5036 += 1, R5037 += 1 };
  s0 -> s4 [65, 65] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s0 -> s5 [65, 65] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s0 -> s6 [65, 65] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s0 -> s7 [65, 65] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s0 -> s2 [66, 79] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s0 -> s1 [66, 65535] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s0 -> s8 [80, 80] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s0 -> s2 [81, 65535] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s1 -> s1 [0, 64] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s1 -> s2 [0, 64] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s1 -> s4 [65, 65] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s1 -> s5 [65, 65] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s1 -> s6 [65, 65] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s1 -> s7 [65, 65] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s1 -> s2 [66, 79] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s1 -> s1 [66, 65535] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s1 -> s8 [80, 80] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s1 -> s2 [81, 65535] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s2 -> s2 [0, 64] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s2 -> s6 [65, 65] { R5109 += 1, R5037 += 1 };
  s2 -> s7 [65, 65] { R5109 += 1, R5037 += 1 };
  s2 -> s2 [66, 79] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s2 -> s2 [66, 65535] { R5109 += 1, R5037 += 1 };
  s2 -> s8 [80, 80] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s2 -> s2 [81, 65535] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s3 -> s1 [0, 64] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s3 -> s2 [0, 64] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s3 -> s3 [0, 65535] { R5109 += 1, R5036 += 1, R5037 += 1 };
  s3 -> s4 [65, 65] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s3 -> s5 [65, 65] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s3 -> s6 [65, 65] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s3 -> s7 [65, 65] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s3 -> s2 [66, 79] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s3 -> s1 [66, 65535] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s3 -> s8 [80, 80] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s3 -> s2 [81, 65535] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s4 -> s6 [0, 79] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s4 -> s4 [0, 65535] { R5109 += 1, R5037 += 1, R4974 += 1, R4975 += 1 };
  s4 -> s10 [80, 80] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s4 -> s6 [81, 65535] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s6 -> s6 [0, 79] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s6 -> s6 [0, 65535] { R5109 += 1, R5037 += 1 };
  s6 -> s10 [80, 80] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s6 -> s6 [81, 65535] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s8 -> s8 [0, 64] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s8 -> s8 [0, 65535] { R5109 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s8 -> s11 [65, 65] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s8 -> s8 [66, 65535] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5109 += 1, R5037 += 1, R4975 += 1, R4976 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R5109 += 1 };
  s11 -> s11 [0, 65535] { R5109 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R5109 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R5003 && R6 = R5109 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R5003 && R58 = 0 && R59 = R5003 && R60 = 0 && R61 = R5003 && R62 = 0 && R63 = R5109 && R64 = 0 && R65 = R5109 && R66 = 0 && R67 = R5109 && R86 = 0 && R87 = 0 && R4980 = 0 && R4981 = R5003 && R4982 = 0 && R4983 = R5003 && R4984 = 0 && R4985 = R5003 && R4986 = 0 && R4987 = R5003 && R4988 = 0 && R4989 = R5003 && R4990 = 0 && R4991 = R5003 && R4992 = 0 && R4993 = R5003 && R4994 = 0 && R4995 = R5003 && R4996 = 0 && R4997 = R5003 && R4998 = 0 && R4999 = R5003 && R5000 = 0 && R5001 = R5003 && R5002 = 0 && R5004 = 0 && R5005 = R5109 && R5006 = 0 && R5007 = R5109 && R5008 = 0 && R5009 = R5109 && R5010 = 0 && R5011 = R5109 && R5012 = 0 && R5013 = R5109 && R5014 = 0 && R5015 = R5109 && R5018 = 0 && R5019 = 0 && R5030 = 0 && R5031 = 0 && R5036 = 0 && R5037 = 0 && R5038 = 10 && R5039 = R5109 && R5040 = 10 && R5041 = R5109 && R5042 = 10 && R5043 = R5109 && R5044 = 10 && R5045 = R5109 && R5046 = 10 && R5047 = R5109 && R5048 = 10 && R5049 = R5109 && R5050 = 10 && R5051 = R5109 && R5052 = 10 && R5053 = R5109 && R5054 = 10 && R5055 = R5109 && R5056 = 10 && R5057 = R5109 && R5058 = 10 && R5059 = R5109 && R5060 = 10 && R5061 = R5109 && R5062 = 10 && R5063 = R5109 && R5064 = 10 && R5065 = R5109 && R5066 = 10 && R5067 = R5109 && R5068 = 10 && R5069 = R5109 && R5070 = 10 && R5071 = R5109 && R5072 = 10 && R5073 = R5109 && R5074 = 10 && R5075 = R5109 && R5076 = 10 && R5077 = R5109 && R5078 = 10 && R5079 = R5109 && R5080 = 10 && R5081 = R5109 && R5082 = 10 && R5083 = R5109 && R5084 = 10 && R5085 = R5109 && R5086 = 10 && R5087 = R5109 && R5088 = 10 && R5089 = R5109 && R5090 = 10 && R5091 = R5109 && R5092 = 10 && R5093 = R5109 && R5094 = 10 && R5095 = R5109 && R5096 = 10 && R5097 = R5109 && R5098 = 10 && R5099 = R5109 && R5100 = 10 && R5101 = R5109 && R5102 = 10 && R5103 = R5109 && R5104 = 10 && R5105 = R5109 && R5106 = 10 && R5107 = R5109 && R5108 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R4559 + R4556 + R4979 + R4976 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R5003 && 9 < R5109 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R424 + R422 = 0 && R425 + R423 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R4557 + R4554 = 0 && R4558 + R4555 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R424 + R422 != 0 || R409 + R408 + -1*R425 + -1*R423 = 0 || R409 + R408 < 1) && (R4557 + R4554 != 0 || R409 + R408 + -1*R4558 + -1*R4555 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R5016 = 0 && R5017 = 0)) && (R34 = 0 || (R5020 = 0 && R5021 = 0)) && (R34 = 0 || (R5022 = 0 && R5023 = 0)) && (R34 = 0 || (R5024 = 0 && R5025 = 0)) && (R34 = 0 || (R5026 = 0 && R5027 = 0)) && (R34 = 0 || (R5028 = 0 && R5029 = 0)) && (R34 = 0 || (R5032 = 0 && R5033 = 0)) && (R34 = 0 || (R5034 = 0 && R5035 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R424 + R422 = 0 || R409 + R408 < 1) && (R4557 + R4554 = 0 || R409 + R408 < 1) && (R4565 + R4562 = 0 || (R4563 + R4560 = 0 && R4564 + R4561 = 0)) && (R4565 + R4562 = 0 || (R4977 + R4974 = 0 && R4978 + R4975 = 0));
// End of Parikh automata intersection problem
