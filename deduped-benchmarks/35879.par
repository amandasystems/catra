// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R2490, R2491, R2492, R2493, R2494, R2495, R2496, R2497, R2498, R2499, R2500, R2501, R27, R28, R3, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R3091, R3092, R3093, R3094, R3095, R3096, R3097, R3098, R3099, R31, R3100, R3101, R3102, R3103, R3104, R3105, R3106, R3107, R3108, R3109, R3110, R3111, R3112, R3113, R3114, R3115, R3116, R3117, R3118, R3119, R3120, R3121, R3122, R3123, R3124, R3125, R3126, R3127, R3128, R3129, R3130, R3131, R3132, R3133, R3134, R3135, R3136, R3137, R3138, R3139, R3140, R3141, R3142, R3143, R3144, R3145, R3146, R3147, R3148, R3149, R3150, R3151, R3152, R3153, R3154, R3155, R3156, R3157, R3158, R3159, R3160, R3161, R3162, R3163, R3164, R3165, R3166, R3167, R3168, R3169, R3170, R3171, R3172, R3173, R3174, R3175, R3176, R3177, R3178, R3179, R3180, R3181, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R424, R425, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R3076 += 1, R3077 += 1 };
  s0 -> s1 [0, 65535] { R3077 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3077 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R3079 += 1 };
  s0 -> s0 [0, 65535] { R3078 += 1, R3079 += 1 };
  s0 -> s2 [0, 65535] { R3079 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R3079 += 1 };
  s0 -> s1 [66, 65535] { R3079 += 1 };
  s1 -> s1 [0, 64] { R3079 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3079 += 1 };
  s1 -> s1 [66, 65535] { R3079 += 1 };
  s2 -> s1 [0, 64] { R3079 += 1 };
  s2 -> s2 [0, 65535] { R3079 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3079 += 1 };
  s2 -> s1 [66, 65535] { R3079 += 1 };
  s3 -> s3 [0, 65535] { R3079 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3081 += 1, R69 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R3080 += 1, R3081 += 1 };
  s0 -> s2 [0, 65535] { R3081 += 1, R68 += 1, R69 += 1 };
  s1 -> s4 [0, 65535] { R3081 += 1 };
  s1 -> s1 [0, 65535] { R3081 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3081 += 1, R69 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R3081 += 1, R68 += 1, R69 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3081 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3083 += 1 };
  s0 -> s0 [0, 65535] { R3082 += 1, R3083 += 1 };
  s1 -> s1 [0, 65535] { R3083 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R3084 += 1, R3085 += 1 };
  s0 -> s1 [0, 65535] { R3085 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R3085 += 1, R85 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R3085 += 1, R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3085 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3085 += 1, R85 += 1, R28 += 1 };
  s2 -> s4 [0, 65535] { R3085 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3085 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3086 += 1, R3087 += 1 };
  s0 -> s1 [0, 65535] { R3087 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [108, 108] { R3087 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R3087 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R3087 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R3087 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R3087 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R3087 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R3087 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R3087 += 1, R87 += 1 };
  s5 -> s14 [108, 108] { R3087 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R3087 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R3087 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R3087 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R3087 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R3087 += 1, R87 += 1 };
  s12 -> s12 [0, 65535] { R3087 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R3087 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R3087 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R3087 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R3087 += 1, R87 += 1 };
  s18 -> s18 [0, 65535] { R3087 += 1 };
  s18 -> s13 [0, 65535];
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R3111 += 1 };
  s0 -> s0 [0, 65535] { R3110 += 1, R3111 += 1 };
  s0 -> s1 [45, 45] { R3111 += 1 };
  s0 -> s2 [46, 46] { R3111 += 1 };
  s0 -> s1 [48, 62] { R3111 += 1 };
  s0 -> s3 [65, 65] { R3111 += 1 };
  s0 -> s1 [66, 65535] { R3111 += 1 };
  s1 -> s1 [0, 43] { R3111 += 1 };
  s1 -> s1 [45, 45] { R3111 += 1 };
  s1 -> s2 [46, 46] { R3111 += 1 };
  s1 -> s1 [48, 62] { R3111 += 1 };
  s1 -> s3 [65, 65] { R3111 += 1 };
  s1 -> s1 [66, 65535] { R3111 += 1 };
  s2 -> s1 [0, 43] { R3111 += 1 };
  s2 -> s1 [45, 45] { R3111 += 1 };
  s2 -> s2 [46, 46] { R3111 += 1 };
  s2 -> s1 [48, 62] { R3111 += 1 };
  s2 -> s3 [65, 65] { R3111 += 1 };
  s2 -> s1 [66, 114] { R3111 += 1 };
  s2 -> s8 [115, 115] { R3111 += 1 };
  s2 -> s1 [116, 65535] { R3111 += 1 };
  s3 -> s3 [0, 43] { R3111 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3111 += 1 };
  s3 -> s4 [46, 46] { R3111 += 1 };
  s3 -> s3 [48, 62] { R3111 += 1 };
  s3 -> s3 [65, 65535] { R3111 += 1 };
  s4 -> s3 [0, 43] { R3111 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3111 += 1 };
  s4 -> s4 [46, 46] { R3111 += 1 };
  s4 -> s3 [48, 62] { R3111 += 1 };
  s4 -> s3 [65, 114] { R3111 += 1 };
  s4 -> s5 [115, 115] { R3111 += 1 };
  s4 -> s3 [116, 65535] { R3111 += 1 };
  s5 -> s3 [0, 43] { R3111 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3111 += 1 };
  s5 -> s4 [46, 46] { R3111 += 1 };
  s5 -> s3 [48, 62] { R3111 += 1 };
  s5 -> s3 [65, 110] { R3111 += 1 };
  s5 -> s6 [111, 111] { R3111 += 1 };
  s5 -> s3 [112, 65535] { R3111 += 1 };
  s6 -> s3 [0, 43] { R3111 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3111 += 1 };
  s6 -> s4 [46, 46] { R3111 += 1 };
  s6 -> s3 [48, 62] { R3111 += 1 };
  s6 -> s3 [65, 98] { R3111 += 1 };
  s6 -> s7 [99, 99] { R3111 += 1 };
  s6 -> s3 [100, 65535] { R3111 += 1 };
  s7 -> s3 [0, 43] { R3111 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3111 += 1 };
  s7 -> s4 [46, 46] { R3111 += 1 };
  s7 -> s3 [48, 62] { R3111 += 1 };
  s7 -> s3 [65, 106] { R3111 += 1 };
  s7 -> s3 [108, 65535] { R3111 += 1 };
  s8 -> s1 [0, 43] { R3111 += 1 };
  s8 -> s1 [45, 45] { R3111 += 1 };
  s8 -> s2 [46, 46] { R3111 += 1 };
  s8 -> s1 [48, 62] { R3111 += 1 };
  s8 -> s3 [65, 65] { R3111 += 1 };
  s8 -> s1 [66, 110] { R3111 += 1 };
  s8 -> s9 [111, 111] { R3111 += 1 };
  s8 -> s1 [112, 65535] { R3111 += 1 };
  s9 -> s1 [0, 43] { R3111 += 1 };
  s9 -> s1 [45, 45] { R3111 += 1 };
  s9 -> s2 [46, 46] { R3111 += 1 };
  s9 -> s1 [48, 62] { R3111 += 1 };
  s9 -> s3 [65, 65] { R3111 += 1 };
  s9 -> s1 [66, 98] { R3111 += 1 };
  s9 -> s10 [99, 99] { R3111 += 1 };
  s9 -> s1 [100, 65535] { R3111 += 1 };
  s10 -> s1 [0, 43] { R3111 += 1 };
  s10 -> s1 [45, 45] { R3111 += 1 };
  s10 -> s2 [46, 46] { R3111 += 1 };
  s10 -> s1 [48, 62] { R3111 += 1 };
  s10 -> s3 [65, 65] { R3111 += 1 };
  s10 -> s1 [66, 106] { R3111 += 1 };
  s10 -> s1 [108, 65535] { R3111 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R3113 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R3112 += 1, R3113 += 1 };
  s1 -> s1 [0, 65535] { R3113 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R3115 += 1 };
  s0 -> s0 [0, 65535] { R3114 += 1, R3115 += 1 };
  s0 -> s2 [0, 65535] { R3115 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R3115 += 1 };
  s0 -> s1 [59, 65535] { R3115 += 1 };
  s1 -> s1 [0, 57] { R3115 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3115 += 1 };
  s1 -> s1 [59, 65535] { R3115 += 1 };
  s2 -> s1 [0, 57] { R3115 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3115 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R3115 += 1 };
  s2 -> s1 [59, 65535] { R3115 += 1 };
  s3 -> s3 [0, 65535] { R3115 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R3117 += 1 };
  s0 -> s2 [0, 65535] { R3117 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R3116 += 1, R3117 += 1 };
  s0 -> s3 [43, 43] { R3117 += 1 };
  s0 -> s1 [44, 65535] { R3117 += 1 };
  s1 -> s1 [0, 42] { R3117 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3117 += 1 };
  s1 -> s1 [44, 65535] { R3117 += 1 };
  s2 -> s1 [0, 42] { R3117 += 1 };
  s2 -> s2 [0, 65535] { R3117 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R3117 += 1 };
  s2 -> s1 [44, 65535] { R3117 += 1 };
  s3 -> s3 [0, 65535] { R3117 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3119 += 1 };
  s0 -> s2 [0, 65535] { R3119 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R3118 += 1, R3119 += 1 };
  s0 -> s3 [65, 65] { R3119 += 1 };
  s0 -> s1 [66, 65535] { R3119 += 1 };
  s1 -> s1 [0, 64] { R3119 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3119 += 1 };
  s1 -> s1 [66, 65535] { R3119 += 1 };
  s2 -> s1 [0, 64] { R3119 += 1 };
  s2 -> s2 [0, 65535] { R3119 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3119 += 1 };
  s2 -> s1 [66, 65535] { R3119 += 1 };
  s3 -> s3 [0, 65535] { R3119 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R3121 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R3120 += 1, R3121 += 1 };
  s0 -> s2 [0, 65535] { R3121 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R3121 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R3121 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R3121 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3121 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R3121 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R3121 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3121 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R3121 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R3121 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3121 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R3122 += 1, R3123 += 1 };
  s0 -> s1 [0, 65535] { R3123 += 1, R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R3123 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3123 += 1, R40 += 1, R41 += 1 };
  s1 -> s2 [0, 65535] { R3123 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3123 += 1 };
  s2 -> s2 [0, 65535] { R3123 += 1, R41 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3123 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3125 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R3125 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3124 += 1, R3125 += 1 };
  s1 -> s1 [0, 65535] { R3125 += 1, R57 += 1, R31 += 1 };
  s1 -> s4 [0, 65535] { R3125 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3125 += 1, R57 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R3125 += 1, R56 += 1, R57 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3125 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R3127 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R3126 += 1, R3127 += 1 };
  s0 -> s2 [0, 65535] { R3127 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R3127 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R3127 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R3127 += 1 };
  s1 -> s1 [0, 65535] { R3127 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R3127 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3127 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R3127 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R3127 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R3127 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R3127 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R3127 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R3127 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3127 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3127 += 1 };
  s5 -> s6 [99, 99] { R3127 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R3127 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R3127 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3127 += 1 };
  s6 -> s7 [97, 97] { R3127 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R3127 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R3127 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R3127 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3127 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R3127 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R3127 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R3127 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3127 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R3127 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R3127 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3127 += 1 };
  s9 -> s10 [111, 111] { R3127 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R3127 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R3127 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3127 += 1 };
  s10 -> s11 [115, 115] { R3127 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R3127 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R3127 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3127 += 1 };
  s11 -> s12 [116, 116] { R3127 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R3127 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R3127 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R3127 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R3129 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R3128 += 1, R3129 += 1 };
  s0 -> s2 [0, 65535] { R3129 += 1, R61 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R3129 += 1, R60 += 1, R61 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3129 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535] { R3129 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3129 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R3129 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s0 [0, 65535] { R3130 += 1, R3131 += 1 };
  s0 -> s1 [0, 65535] { R3131 += 1, R75 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R3131 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [0, 65535] { R3131 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3131 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3131 += 1, R75 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R3131 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3131 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R3132 += 1, R3133 += 1 };
  s0 -> s1 [0, 65535] { R3133 += 1 };
  s1 -> s1 [0, 65535] { R3133 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R3135 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R3134 += 1, R3135 += 1 };
  s0 -> s2 [0, 65535] { R3135 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R3135 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R3135 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R3135 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R3135 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R3135 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R3135 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R3135 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R3135 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R3135 += 1, R77 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R3135 += 1, R76 += 1, R77 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R3135 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R3135 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R3135 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R3135 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3135 += 1 };
  s4 -> s4 [0, 65535] { R3135 += 1, R77 += 1, R42 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3135 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3137 += 1, R3053 += 1 };
  s0 -> s2 [0, 65535] { R3137 += 1, R3052 += 1, R3053 += 1 };
  s0 -> s0 [0, 65535] { R3136 += 1, R3137 += 1 };
  s0 -> s1 [66, 65535] { R3137 += 1, R3053 += 1 };
  s1 -> s1 [0, 64] { R3137 += 1, R3053 += 1 };
  s1 -> s1 [0, 65535] { R3137 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3137 += 1, R3053 += 1 };
  s2 -> s1 [0, 64] { R3137 += 1, R3053 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3137 += 1, R3052 += 1, R3053 += 1 };
  s2 -> s1 [66, 65535] { R3137 += 1, R3053 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R3138 += 1, R3139 += 1 };
  s0 -> s1 [0, 65535] { R3139 += 1, R3055 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R3139 += 1, R3054 += 1, R3055 += 1 };
  s1 -> s1 [0, 65535] { R3139 += 1, R3055 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3139 += 1 };
  s2 -> s1 [0, 65535] { R3139 += 1, R3055 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3139 += 1, R3054 += 1, R3055 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3139 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R3141 += 1, R3057 += 1 };
  s0 -> s0 [0, 65535] { R3140 += 1, R3141 += 1 };
  s0 -> s2 [0, 65535] { R3141 += 1, R3056 += 1, R3057 += 1 };
  s0 -> s1 [80, 65535] { R3141 += 1, R3057 += 1 };
  s1 -> s1 [0, 65] { R3141 += 1, R3057 += 1 };
  s1 -> s1 [0, 65535] { R3141 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3141 += 1, R3057 += 1 };
  s2 -> s1 [0, 65] { R3141 += 1, R3057 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3141 += 1, R3056 += 1, R3057 += 1 };
  s2 -> s1 [80, 65535] { R3141 += 1, R3057 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R3143 += 1, R3058 += 1, R3059 += 1 };
  s0 -> s2 [0, 65535] { R3143 += 1, R3059 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R3142 += 1, R3143 += 1 };
  s1 -> s1 [0, 65535] { R3143 += 1, R3058 += 1, R3059 += 1 };
  s1 -> s2 [0, 65535] { R3143 += 1, R3059 += 1, R409 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3143 += 1 };
  s2 -> s2 [0, 65535] { R3143 += 1, R3059 += 1, R409 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3143 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R3145 += 1, R3061 += 1 };
  s0 -> s2 [0, 65535] { R3145 += 1, R3060 += 1, R3061 += 1 };
  s0 -> s0 [0, 65535] { R3144 += 1, R3145 += 1 };
  s0 -> s3 [0, 65535] { R3145 += 1, R3061 += 1, R411 += 1 };
  s0 -> s1 [81, 65535] { R3145 += 1, R3061 += 1 };
  s1 -> s1 [0, 79] { R3145 += 1, R3061 += 1 };
  s1 -> s1 [0, 65535] { R3145 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R3145 += 1, R3061 += 1 };
  s2 -> s1 [0, 79] { R3145 += 1, R3061 += 1 };
  s2 -> s2 [0, 65535] { R3145 += 1, R3060 += 1, R3061 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3145 += 1, R3061 += 1, R411 += 1 };
  s2 -> s1 [81, 65535] { R3145 += 1, R3061 += 1 };
  s3 -> s1 [0, 79] { R3145 += 1, R3061 += 1 };
  s3 -> s4 [0, 65535] { R3145 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3145 += 1, R3061 += 1, R411 += 1 };
  s3 -> s1 [81, 65535] { R3145 += 1, R3061 += 1 };
  s4 -> s4 [0, 65535] { R3145 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R3147 += 1, R3063 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R3147 += 1, R3062 += 1, R3063 += 1 };
  s0 -> s0 [0, 65535] { R3146 += 1, R3147 += 1 };
  s0 -> s3 [0, 65535] { R3147 += 1, R3063 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [81, 65535] { R3147 += 1, R3063 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R3147 += 1, R3063 += 1, R415 += 1 };
  s1 -> s4 [0, 65535] { R3147 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3147 += 1, R3063 += 1 };
  s1 -> s1 [81, 65535] { R3147 += 1, R3063 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R3147 += 1, R3063 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R3147 += 1, R3062 += 1, R3063 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3147 += 1, R3063 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [81, 65535] { R3147 += 1, R3063 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R3147 += 1, R3063 += 1, R415 += 1 };
  s3 -> s4 [0, 65535] { R3147 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3147 += 1, R3063 += 1, R414 += 1, R415 += 1 };
  s3 -> s1 [81, 65535] { R3147 += 1, R3063 += 1, R415 += 1 };
  s4 -> s4 [0, 65535] { R3147 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s0 [0, 65535] { R3148 += 1, R3149 += 1 };
  s0 -> s1 [0, 65535] { R3149 += 1, R3065 += 1, R420 += 1, R421 += 1 };
  s0 -> s2 [0, 65535] { R3149 += 1, R3064 += 1, R3065 += 1 };
  s0 -> s3 [0, 65535] { R3149 += 1, R3065 += 1, R419 += 1, R420 += 1 };
  s1 -> s4 [0, 65535] { R3149 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3149 += 1, R3065 += 1, R420 += 1, R421 += 1 };
  s1 -> s6 [0, 65535] { R3149 += 1, R3065 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3149 += 1, R3065 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R3149 += 1, R3064 += 1, R3065 += 1 };
  s2 -> s3 [0, 65535] { R3149 += 1, R3065 += 1, R419 += 1, R420 += 1 };
  s3 -> s4 [0, 65535] { R3149 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R3149 += 1, R3065 += 1, R420 += 1, R421 += 1 };
  s3 -> s3 [0, 65535] { R3149 += 1, R3065 += 1, R419 += 1, R420 += 1 };
  s4 -> s4 [0, 65535] { R3149 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3149 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3149 += 1, R3065 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R3151 += 1, R3067 += 1, R424 += 1, R425 += 1 };
  s0 -> s0 [0, 65535] { R3150 += 1, R3151 += 1 };
  s0 -> s3 [0, 65535] { R3151 += 1, R3066 += 1, R3067 += 1 };
  s0 -> s1 [91, 107] { R3151 += 1, R3067 += 1, R425 += 1 };
  s0 -> s4 [108, 108] { R3151 += 1, R3067 += 1, R425 += 1 };
  s0 -> s1 [109, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s1 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s1 -> s5 [0, 65535] { R3151 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3151 += 1, R3067 += 1 };
  s1 -> s1 [91, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s2 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s2 -> s2 [0, 65535] { R3151 += 1, R3067 += 1, R424 += 1, R425 += 1 };
  s2 -> s5 [0, 65535] { R3151 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R3151 += 1, R3067 += 1, R425 += 1 };
  s2 -> s4 [108, 108] { R3151 += 1, R3067 += 1, R425 += 1 };
  s2 -> s1 [109, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s3 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s3 -> s2 [0, 65535] { R3151 += 1, R3067 += 1, R424 += 1, R425 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3151 += 1, R3066 += 1, R3067 += 1 };
  s3 -> s1 [91, 107] { R3151 += 1, R3067 += 1, R425 += 1 };
  s3 -> s4 [108, 108] { R3151 += 1, R3067 += 1, R425 += 1 };
  s3 -> s1 [109, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s4 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s4 -> s4 [0, 65535] { R3151 += 1, R3067 += 1 };
  s4 -> s5 [0, 65535] { R3151 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R3151 += 1, R3067 += 1, R425 += 1 };
  s4 -> s7 [111, 111] { R3151 += 1, R3067 += 1, R425 += 1 };
  s4 -> s1 [112, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s5 -> s5 [0, 65535] { R3151 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s7 -> s7 [0, 65535] { R3151 += 1, R3067 += 1 };
  s7 -> s5 [0, 65535] { R3151 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R3151 += 1, R3067 += 1, R425 += 1 };
  s7 -> s8 [99, 99] { R3151 += 1, R3067 += 1, R425 += 1 };
  s7 -> s1 [100, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s8 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s8 -> s8 [0, 65535] { R3151 += 1, R3067 += 1 };
  s8 -> s5 [0, 65535] { R3151 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R3151 += 1, R3067 += 1, R425 += 1 };
  s8 -> s9 [97, 97] { R3151 += 1, R3067 += 1, R425 += 1 };
  s8 -> s1 [98, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s9 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s9 -> s5 [0, 65535] { R3151 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R3151 += 1, R3067 += 1 };
  s9 -> s1 [91, 107] { R3151 += 1, R3067 += 1, R425 += 1 };
  s9 -> s10 [108, 108] { R3151 += 1, R3067 += 1, R425 += 1 };
  s9 -> s1 [109, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s10 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s10 -> s10 [0, 65535] { R3151 += 1, R3067 += 1 };
  s10 -> s5 [0, 65535] { R3151 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R3151 += 1, R3067 += 1, R425 += 1 };
  s10 -> s11 [104, 104] { R3151 += 1, R3067 += 1, R425 += 1 };
  s10 -> s1 [105, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s11 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s11 -> s11 [0, 65535] { R3151 += 1, R3067 += 1 };
  s11 -> s5 [0, 65535] { R3151 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R3151 += 1, R3067 += 1, R425 += 1 };
  s11 -> s12 [111, 111] { R3151 += 1, R3067 += 1, R425 += 1 };
  s11 -> s1 [112, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s12 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s12 -> s5 [0, 65535] { R3151 += 1 };
  s12 -> s12 [0, 65535] { R3151 += 1, R3067 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R3151 += 1, R3067 += 1, R425 += 1 };
  s12 -> s13 [115, 115] { R3151 += 1, R3067 += 1, R425 += 1 };
  s12 -> s1 [116, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s13 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s13 -> s5 [0, 65535] { R3151 += 1 };
  s13 -> s13 [0, 65535] { R3151 += 1, R3067 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R3151 += 1, R3067 += 1, R425 += 1 };
  s13 -> s14 [116, 116] { R3151 += 1, R3067 += 1, R425 += 1 };
  s13 -> s1 [117, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  s14 -> s1 [0, 80] { R3151 += 1, R3067 += 1, R425 += 1 };
  s14 -> s1 [91, 65535] { R3151 += 1, R3067 += 1, R425 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R3152 += 1, R3153 += 1 };
  s0 -> s1 [0, 65535] { R3153 += 1, R3069 += 1 };
  s0 -> s2 [0, 65535] { R3153 += 1, R3069 += 1, R2494 += 1, R2495 += 1 };
  s0 -> s3 [0, 65535] { R3153 += 1, R3068 += 1, R3069 += 1 };
  s1 -> s5 [0, 65535] { R3153 += 1 };
  s1 -> s1 [0, 65535] { R3153 += 1, R3069 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3153 += 1 };
  s2 -> s1 [0, 65535] { R3153 += 1, R3069 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3153 += 1, R3069 += 1, R2494 += 1, R2495 += 1 };
  s3 -> s1 [0, 65535] { R3153 += 1, R3069 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3153 += 1, R3069 += 1, R2494 += 1, R2495 += 1 };
  s3 -> s3 [0, 65535] { R3153 += 1, R3068 += 1, R3069 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3153 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R3155 += 1, R3071 += 1, R2500 += 1, R2501 += 1 };
  s0 -> s0 [0, 65535] { R3154 += 1, R3155 += 1 };
  s0 -> s2 [0, 65535] { R3155 += 1, R3071 += 1, R2499 += 1, R2500 += 1 };
  s0 -> s3 [0, 65535] { R3155 += 1, R3070 += 1, R3071 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3155 += 1, R3071 += 1, R2500 += 1, R2501 += 1 };
  s1 -> s6 [0, 65535] { R3155 += 1, R3071 += 1 };
  s1 -> s5 [0, 65535] { R3155 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3155 += 1, R3071 += 1, R2500 += 1, R2501 += 1 };
  s2 -> s5 [0, 65535] { R3155 += 1 };
  s2 -> s2 [0, 65535] { R3155 += 1, R3071 += 1, R2499 += 1, R2500 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3155 += 1, R3071 += 1, R2500 += 1, R2501 += 1 };
  s3 -> s2 [0, 65535] { R3155 += 1, R3071 += 1, R2499 += 1, R2500 += 1 };
  s3 -> s3 [0, 65535] { R3155 += 1, R3070 += 1, R3071 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3155 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3155 += 1, R3071 += 1 };
  s6 -> s5 [0, 65535] { R3155 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R3157 += 1, R3072 += 1, R3073 += 1 };
  s0 -> s0 [0, 65535] { R3156 += 1, R3157 += 1 };
  s0 -> s2 [0, 65535] { R3157 += 1, R3073 += 1 };
  s1 -> s1 [0, 65535] { R3157 += 1, R3072 += 1, R3073 += 1 };
  s1 -> s2 [0, 65535] { R3157 += 1, R3073 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3157 += 1, R3073 += 1 };
  s2 -> s3 [0, 65535] { R3157 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3157 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R3159 += 1, R3075 += 1 };
  s0 -> s2 [0, 65535] { R3159 += 1, R3074 += 1, R3075 += 1 };
  s0 -> s0 [0, 65535] { R3158 += 1, R3159 += 1 };
  s1 -> s4 [0, 65535] { R3159 += 1 };
  s1 -> s1 [0, 65535] { R3159 += 1, R3075 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3159 += 1, R3075 += 1 };
  s2 -> s2 [0, 65535] { R3159 += 1, R3074 += 1, R3075 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3159 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R3161 += 1, R3089 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R3161 += 1, R3088 += 1, R3089 += 1 };
  s0 -> s0 [0, 65535] { R3160 += 1, R3161 += 1 };
  s1 -> s1 [0, 65535] { R3161 += 1, R3089 += 1, R34 += 1 };
  s1 -> s4 [0, 65535] { R3161 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3161 += 1, R3089 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R3161 += 1, R3088 += 1, R3089 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3161 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R3163 += 1, R3091 += 1 };
  s0 -> s2 [0, 65535] { R3163 += 1, R3090 += 1, R3091 += 1 };
  s0 -> s0 [0, 65535] { R3162 += 1, R3163 += 1 };
  s0 -> s3 [65, 65] { R3163 += 1, R3091 += 1 };
  s0 -> s4 [65, 65] { R3163 += 1, R3091 += 1 };
  s0 -> s5 [80, 80] { R3163 += 1, R3091 += 1 };
  s0 -> s1 [81, 65535] { R3163 += 1, R3091 += 1 };
  s1 -> s1 [0, 64] { R3163 += 1, R3091 += 1 };
  s1 -> s3 [65, 65] { R3163 += 1, R3091 += 1 };
  s1 -> s4 [65, 65] { R3163 += 1, R3091 += 1 };
  s1 -> s5 [80, 80] { R3163 += 1, R3091 += 1 };
  s1 -> s1 [81, 65535] { R3163 += 1, R3091 += 1 };
  s2 -> s1 [0, 64] { R3163 += 1, R3091 += 1 };
  s2 -> s2 [0, 65535] { R3163 += 1, R3090 += 1, R3091 += 1 };
  s2 -> s3 [65, 65] { R3163 += 1, R3091 += 1 };
  s2 -> s4 [65, 65] { R3163 += 1, R3091 += 1 };
  s2 -> s5 [80, 80] { R3163 += 1, R3091 += 1 };
  s2 -> s1 [81, 65535] { R3163 += 1, R3091 += 1 };
  s3 -> s3 [0, 65] { R3163 += 1, R3091 += 1 };
  s3 -> s8 [80, 80] { R3163 += 1, R3091 += 1 };
  s3 -> s3 [81, 65535] { R3163 += 1, R3091 += 1 };
  s5 -> s5 [0, 64] { R3163 += 1, R3091 += 1 };
  s5 -> s5 [0, 65535] { R3163 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3163 += 1, R3091 += 1 };
  s5 -> s8 [65, 65] { R3163 += 1, R3091 += 1 };
  s5 -> s5 [80, 65535] { R3163 += 1, R3091 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3163 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3163 += 1, R3091 += 1 };
  s8 -> s8 [0, 65535] { R3163 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R3163 += 1, R3091 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R3165 += 1, R3093 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R3164 += 1, R3165 += 1 };
  s0 -> s2 [0, 65535] { R3165 += 1, R3092 += 1, R3093 += 1 };
  s0 -> s3 [65, 65] { R3165 += 1, R3093 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R3165 += 1, R3093 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R3165 += 1, R3093 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R3165 += 1, R3093 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3165 += 1 };
  s1 -> s3 [65, 65] { R3165 += 1, R3093 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R3165 += 1, R3093 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R3165 += 1, R3093 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R3165 += 1, R3093 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3165 += 1, R3092 += 1, R3093 += 1 };
  s2 -> s3 [65, 65] { R3165 += 1, R3093 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R3165 += 1, R3093 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R3165 += 1, R3093 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3165 += 1, R3093 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R3165 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3165 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3165 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R3167 += 1, R3095 += 1, R410 += 1 };
  s0 -> s2 [0, 65535] { R3167 += 1, R3094 += 1, R3095 += 1 };
  s0 -> s0 [0, 65535] { R3166 += 1, R3167 += 1 };
  s0 -> s3 [65, 65] { R3167 += 1, R3095 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R3167 += 1, R3095 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R3167 += 1, R3095 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R3167 += 1, R3095 += 1, R410 += 1 };
  s1 -> s1 [0, 65535] { R3167 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3167 += 1, R3095 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R3167 += 1, R3095 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R3167 += 1, R3095 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R3167 += 1, R3095 += 1, R410 += 1 };
  s2 -> s2 [0, 65535] { R3167 += 1, R3094 += 1, R3095 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3167 += 1, R3095 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R3167 += 1, R3095 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R3167 += 1, R3095 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R3167 += 1, R3095 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3167 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3167 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3167 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R3169 += 1, R3096 += 1, R3097 += 1 };
  s0 -> s0 [0, 65535] { R3168 += 1, R3169 += 1 };
  s0 -> s3 [65, 65] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R3169 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R3169 += 1, R3096 += 1, R3097 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R3169 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3169 += 1, R3097 += 1, R412 += 1, R413 += 1 };
  s4 -> s5 [0, 65535] { R3169 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3169 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R3170 += 1, R3171 += 1 };
  s0 -> s2 [0, 65535] { R3171 += 1, R3098 += 1, R3099 += 1 };
  s0 -> s3 [65, 65] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3171 += 1 };
  s1 -> s3 [65, 65] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3171 += 1, R3098 += 1, R3099 += 1 };
  s2 -> s3 [65, 65] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3171 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3171 += 1, R3099 += 1, R416 += 1, R417 += 1 };
  s4 -> s6 [0, 65535] { R3171 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3171 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s0 -> s0 [0, 65535] { R3172 += 1, R3173 += 1 };
  s0 -> s2 [0, 65535] { R3173 += 1, R3100 += 1, R3101 += 1 };
  s0 -> s3 [65, 65] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s0 -> s4 [65, 65] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s0 -> s1 [66, 65535] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [0, 64] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [0, 65535] { R3173 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s1 -> s4 [65, 65] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [66, 65535] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [0, 64] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3173 += 1, R3100 += 1, R3101 += 1 };
  s2 -> s3 [65, 65] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s2 -> s4 [65, 65] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [66, 65535] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s3 -> s6 [0, 65535] { R3173 += 1 };
  s3 -> s3 [0, 65535] { R3173 += 1, R3101 += 1, R422 += 1, R423 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3173 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3173 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s0 -> s2 [0, 64] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s0 -> s0 [0, 65535] { R3174 += 1, R3175 += 1 };
  s0 -> s3 [0, 65535] { R3175 += 1, R3102 += 1, R3103 += 1 };
  s0 -> s4 [65, 65] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s0 -> s5 [65, 65] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s0 -> s6 [65, 65] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s0 -> s7 [65, 65] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s0 -> s1 [66, 65535] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s0 -> s2 [66, 65535] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s1 -> s1 [0, 64] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s1 -> s1 [0, 65535] { R3175 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s1 -> s7 [65, 65] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s1 -> s1 [66, 65535] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s2 -> s1 [0, 64] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s2 -> s2 [0, 64] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s2 -> s4 [65, 65] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s2 -> s5 [65, 65] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s2 -> s6 [65, 65] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s2 -> s7 [65, 65] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s2 -> s1 [66, 65535] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s2 -> s2 [66, 65535] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s3 -> s1 [0, 64] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s3 -> s2 [0, 64] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s3 -> s3 [0, 65535] { R3175 += 1, R3102 += 1, R3103 += 1 };
  s3 -> s4 [65, 65] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s3 -> s5 [65, 65] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s3 -> s6 [65, 65] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s3 -> s7 [65, 65] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s3 -> s1 [66, 65535] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s3 -> s2 [66, 65535] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s4 -> s4 [0, 65535] { R3175 += 1, R3103 += 1, R2490 += 1, R2491 += 1 };
  s4 -> s7 [0, 65535] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R3175 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3175 += 1, R3103 += 1, R2491 += 1, R2492 += 1 };
  s7 -> s9 [0, 65535] { R3175 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3175 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s0 -> s0 [0, 65535] { R3176 += 1, R3177 += 1 };
  s0 -> s2 [0, 65535] { R3177 += 1, R3104 += 1, R3105 += 1 };
  s0 -> s3 [65, 65] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s0 -> s4 [65, 65] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s0 -> s1 [66, 65535] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s1 -> s1 [0, 64] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3177 += 1 };
  s1 -> s3 [65, 65] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s1 -> s4 [65, 65] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s1 -> s1 [66, 65535] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s2 -> s1 [0, 64] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3177 += 1, R3104 += 1, R3105 += 1 };
  s2 -> s3 [65, 65] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s2 -> s4 [65, 65] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s2 -> s1 [66, 65535] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3177 += 1 };
  s3 -> s3 [0, 65535] { R3177 += 1, R3105 += 1, R2496 += 1, R2497 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3177 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3177 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R3179 += 1, R3107 += 1 };
  s0 -> s2 [0, 65535] { R3179 += 1, R3106 += 1, R3107 += 1 };
  s0 -> s0 [0, 65535] { R3178 += 1, R3179 += 1 };
  s0 -> s3 [65, 65] { R3179 += 1, R3107 += 1 };
  s0 -> s4 [65, 65] { R3179 += 1, R3107 += 1 };
  s0 -> s1 [66, 65535] { R3179 += 1, R3107 += 1 };
  s1 -> s1 [0, 64] { R3179 += 1, R3107 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3179 += 1 };
  s1 -> s3 [65, 65] { R3179 += 1, R3107 += 1 };
  s1 -> s4 [65, 65] { R3179 += 1, R3107 += 1 };
  s1 -> s1 [66, 65535] { R3179 += 1, R3107 += 1 };
  s2 -> s1 [0, 64] { R3179 += 1, R3107 += 1 };
  s2 -> s2 [0, 65535] { R3179 += 1, R3106 += 1, R3107 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3179 += 1, R3107 += 1 };
  s2 -> s4 [65, 65] { R3179 += 1, R3107 += 1 };
  s2 -> s1 [66, 65535] { R3179 += 1, R3107 += 1 };
  s3 -> s3 [0, 65535] { R3179 += 1, R3107 += 1 };
  s3 -> s6 [0, 65535] { R3179 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3179 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3179 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s2 [0, 64] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s0 [0, 65535] { R3180 += 1, R3181 += 1 };
  s0 -> s3 [0, 65535] { R3181 += 1, R3108 += 1, R3109 += 1 };
  s0 -> s4 [65, 65] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s5 [65, 65] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s6 [65, 65] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s7 [65, 65] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s2 [66, 79] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s1 [66, 65535] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s8 [80, 80] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s2 [81, 65535] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [0, 64] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s2 [0, 64] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s4 [65, 65] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s5 [65, 65] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s6 [65, 65] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s7 [65, 65] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s2 [66, 79] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [66, 65535] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s8 [80, 80] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s2 [81, 65535] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [0, 64] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s5 [65, 65] { R3181 += 1, R3109 += 1 };
  s2 -> s7 [65, 65] { R3181 += 1, R3109 += 1 };
  s2 -> s2 [66, 79] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [66, 65535] { R3181 += 1, R3109 += 1 };
  s2 -> s8 [80, 80] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [81, 65535] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s1 [0, 64] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s2 [0, 64] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s3 [0, 65535] { R3181 += 1, R3108 += 1, R3109 += 1 };
  s3 -> s4 [65, 65] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s5 [65, 65] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s6 [65, 65] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s7 [65, 65] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s2 [66, 79] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s1 [66, 65535] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s8 [80, 80] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s2 [81, 65535] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s5 -> s5 [0, 79] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s5 -> s5 [0, 65535] { R3181 += 1, R3109 += 1 };
  s5 -> s10 [80, 80] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s5 -> s5 [81, 65535] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s6 -> s5 [0, 79] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s6 -> s6 [0, 65535] { R3181 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s6 -> s10 [80, 80] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s6 -> s5 [81, 65535] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s8 -> s8 [0, 64] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s8 -> s9 [0, 64] { R3181 += 1, R3109 += 1 };
  s8 -> s10 [65, 65] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s8 -> s11 [65, 65] { R3181 += 1, R3109 += 1 };
  s8 -> s12 [65, 65] { R3181 += 1, R3109 += 1 };
  s8 -> s13 [65, 65] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s8 -> s8 [66, 65535] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s8 -> s9 [66, 65535] { R3181 += 1, R3109 += 1 };
  s9 -> s9 [0, 64] { R3181 += 1, R3109 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s9 [0, 65535] { R3181 += 1 };
  s9 -> s11 [65, 65] { R3181 += 1, R3109 += 1 };
  s9 -> s12 [65, 65] { R3181 += 1, R3109 += 1 };
  s9 -> s9 [66, 65535] { R3181 += 1, R3109 += 1 };
  s10 -> s10 [0, 65535] { R3181 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s10 -> s11 [0, 65535] { R3181 += 1, R3109 += 1 };
  s11 -> s11 [0, 65535] { R3181 += 1, R3109 += 1 };
  s11 -> s14 [0, 65535];
  s11 -> s15 [0, 65535] { R3181 += 1 };
  s12 -> s12 [0, 65535] { R3181 += 1 };
  s12 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R3181 += 1 };
  accepting s12, s9, s14, s15, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R3075 && R6 = R3181 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R3075 && R58 = 0 && R59 = R3075 && R60 = 0 && R61 = R3075 && R62 = 0 && R63 = R3181 && R64 = 0 && R65 = R3181 && R66 = 0 && R67 = R3181 && R86 = 0 && R87 = 0 && R3052 = 0 && R3053 = R3075 && R3054 = 0 && R3055 = R3075 && R3056 = 0 && R3057 = R3075 && R3058 = 0 && R3059 = R3075 && R3060 = 0 && R3061 = R3075 && R3062 = 0 && R3063 = R3075 && R3064 = 0 && R3065 = R3075 && R3066 = 0 && R3067 = R3075 && R3068 = 0 && R3069 = R3075 && R3070 = 0 && R3071 = R3075 && R3072 = 0 && R3073 = R3075 && R3074 = 0 && R3076 = 0 && R3077 = R3181 && R3078 = 0 && R3079 = R3181 && R3080 = 0 && R3081 = R3181 && R3082 = 0 && R3083 = R3181 && R3084 = 0 && R3085 = R3181 && R3086 = 0 && R3087 = R3181 && R3090 = 0 && R3091 = 0 && R3102 = 0 && R3103 = 0 && R3108 = 0 && R3109 = 0 && R3110 = 10 && R3111 = R3181 && R3112 = 10 && R3113 = R3181 && R3114 = 10 && R3115 = R3181 && R3116 = 10 && R3117 = R3181 && R3118 = 10 && R3119 = R3181 && R3120 = 10 && R3121 = R3181 && R3122 = 10 && R3123 = R3181 && R3124 = 10 && R3125 = R3181 && R3126 = 10 && R3127 = R3181 && R3128 = 10 && R3129 = R3181 && R3130 = 10 && R3131 = R3181 && R3132 = 10 && R3133 = R3181 && R3134 = 10 && R3135 = R3181 && R3136 = 10 && R3137 = R3181 && R3138 = 10 && R3139 = R3181 && R3140 = 10 && R3141 = R3181 && R3142 = 10 && R3143 = R3181 && R3144 = 10 && R3145 = R3181 && R3146 = 10 && R3147 = R3181 && R3148 = 10 && R3149 = R3181 && R3150 = 10 && R3151 = R3181 && R3152 = 10 && R3153 = R3181 && R3154 = 10 && R3155 = R3181 && R3156 = 10 && R3157 = R3181 && R3158 = 10 && R3159 = R3181 && R3160 = 10 && R3161 = R3181 && R3162 = 10 && R3163 = R3181 && R3164 = 10 && R3165 = R3181 && R3166 = 10 && R3167 = R3181 && R3168 = 10 && R3169 = R3181 && R3170 = 10 && R3171 = R3181 && R3172 = 10 && R3173 = R3181 && R3174 = 10 && R3175 = R3181 && R3176 = 10 && R3177 = R3181 && R3178 = 10 && R3179 = R3181 && R3180 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R2495 + R2492 + R3051 + R3048 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R3075 && 9 < R3181 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R424 + R422 = 0 && R425 + R423 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R2493 + R2490 = 0 && R2494 + R2491 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R424 + R422 != 0 || R409 + R408 + -1*R425 + -1*R423 = 0 || R409 + R408 < 1) && (R2493 + R2490 != 0 || R409 + R408 + -1*R2494 + -1*R2491 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R3088 = 0 && R3089 = 0)) && (R34 = 0 || (R3092 = 0 && R3093 = 0)) && (R34 = 0 || (R3094 = 0 && R3095 = 0)) && (R34 = 0 || (R3096 = 0 && R3097 = 0)) && (R34 = 0 || (R3098 = 0 && R3099 = 0)) && (R34 = 0 || (R3100 = 0 && R3101 = 0)) && (R34 = 0 || (R3104 = 0 && R3105 = 0)) && (R34 = 0 || (R3106 = 0 && R3107 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R424 + R422 = 0 || R409 + R408 < 1) && (R2493 + R2490 = 0 || R409 + R408 < 1) && (R2501 + R2498 = 0 || (R2499 + R2496 = 0 && R2500 + R2497 = 0)) && (R2501 + R2498 = 0 || (R3049 + R3046 = 0 && R3050 + R3047 = 0));
// End of Parikh automata intersection problem
