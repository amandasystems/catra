// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R1804, R1805, R1806, R1807, R1808, R1809, R1946, R1947, R1948, R1949, R1950, R1951, R1952, R1953, R1954, R1955, R1956, R1957, R1958, R1959, R1960, R1961, R1962, R1963, R1964, R1965, R1966, R1967, R1968, R1969, R1970, R1971, R1972, R1973, R1974, R1975, R1976, R1977, R1978, R1979, R1980, R1981, R1982, R1983, R1984, R1985, R1986, R1987, R1988, R1989, R1990, R1991, R1992, R1993, R1994, R1995, R1996, R1997, R1998, R1999, R2000, R2001, R2002, R2003, R2004, R2005, R2006, R2007, R2008, R2009, R2010, R2011, R2012, R2013, R2014, R2015, R2016, R2017, R2018, R2019, R2020, R2021, R2022, R2023, R2024, R2025, R2026, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R2047, R2048, R2049, R2050, R2051, R2052, R2053, R2054, R2055, R2056, R2057, R2058, R2059, R2060, R2061, R2062, R2063, R2064, R2065, R2066, R2067, R2068, R2069, R2070, R2071, R2072, R2073, R2074, R2075, R2076, R2077, R2078, R2079, R2080, R2081, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R43, R430, R431, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R1977 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R1976 += 1, R1977 += 1 };
  s1 -> s1 [0, 65535] { R1977 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R1979 += 1 };
  s0 -> s2 [0, 65535] { R1979 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1978 += 1, R1979 += 1 };
  s0 -> s3 [65, 65] { R1979 += 1 };
  s0 -> s1 [66, 65535] { R1979 += 1 };
  s1 -> s1 [0, 64] { R1979 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1979 += 1 };
  s1 -> s1 [66, 65535] { R1979 += 1 };
  s2 -> s1 [0, 64] { R1979 += 1 };
  s2 -> s2 [0, 65535] { R1979 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R1979 += 1 };
  s2 -> s1 [66, 65535] { R1979 += 1 };
  s3 -> s3 [0, 65535] { R1979 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1981 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R1981 += 1, R69 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1980 += 1, R1981 += 1 };
  s1 -> s1 [0, 65535] { R1981 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R1981 += 1, R69 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1981 += 1 };
  s2 -> s2 [0, 65535] { R1981 += 1, R69 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1981 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1983 += 1 };
  s0 -> s0 [0, 65535] { R1982 += 1, R1983 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1983 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1985 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R1985 += 1, R85 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R1984 += 1, R1985 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1985 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R1985 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1985 += 1 };
  s2 -> s2 [0, 65535] { R1985 += 1, R85 += 1, R28 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1985 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1986 += 1, R1987 += 1 };
  s0 -> s1 [0, 65535] { R1987 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [108, 108] { R1987 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R1987 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R1987 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R1987 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R1987 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R1987 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R1987 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R1987 += 1, R87 += 1 };
  s5 -> s14 [108, 108] { R1987 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R1987 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R1987 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R1987 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R1987 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R1987 += 1, R87 += 1 };
  s12 -> s12 [0, 65535] { R1987 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R1987 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R1987 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R1987 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R1987 += 1, R87 += 1 };
  s18 -> s18 [0, 65535] { R1987 += 1 };
  s18 -> s13 [0, 65535];
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R2011 += 1 };
  s0 -> s0 [0, 65535] { R2010 += 1, R2011 += 1 };
  s0 -> s1 [45, 45] { R2011 += 1 };
  s0 -> s2 [46, 46] { R2011 += 1 };
  s0 -> s1 [48, 62] { R2011 += 1 };
  s0 -> s3 [65, 65] { R2011 += 1 };
  s0 -> s1 [66, 65535] { R2011 += 1 };
  s1 -> s1 [0, 43] { R2011 += 1 };
  s1 -> s1 [45, 45] { R2011 += 1 };
  s1 -> s2 [46, 46] { R2011 += 1 };
  s1 -> s1 [48, 62] { R2011 += 1 };
  s1 -> s3 [65, 65] { R2011 += 1 };
  s1 -> s1 [66, 65535] { R2011 += 1 };
  s2 -> s1 [0, 43] { R2011 += 1 };
  s2 -> s1 [45, 45] { R2011 += 1 };
  s2 -> s2 [46, 46] { R2011 += 1 };
  s2 -> s1 [48, 62] { R2011 += 1 };
  s2 -> s3 [65, 65] { R2011 += 1 };
  s2 -> s1 [66, 114] { R2011 += 1 };
  s2 -> s8 [115, 115] { R2011 += 1 };
  s2 -> s1 [116, 65535] { R2011 += 1 };
  s3 -> s3 [0, 43] { R2011 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2011 += 1 };
  s3 -> s4 [46, 46] { R2011 += 1 };
  s3 -> s3 [48, 62] { R2011 += 1 };
  s3 -> s3 [65, 65535] { R2011 += 1 };
  s4 -> s3 [0, 43] { R2011 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2011 += 1 };
  s4 -> s4 [46, 46] { R2011 += 1 };
  s4 -> s3 [48, 62] { R2011 += 1 };
  s4 -> s3 [65, 114] { R2011 += 1 };
  s4 -> s5 [115, 115] { R2011 += 1 };
  s4 -> s3 [116, 65535] { R2011 += 1 };
  s5 -> s3 [0, 43] { R2011 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2011 += 1 };
  s5 -> s4 [46, 46] { R2011 += 1 };
  s5 -> s3 [48, 62] { R2011 += 1 };
  s5 -> s3 [65, 110] { R2011 += 1 };
  s5 -> s6 [111, 111] { R2011 += 1 };
  s5 -> s3 [112, 65535] { R2011 += 1 };
  s6 -> s3 [0, 43] { R2011 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2011 += 1 };
  s6 -> s4 [46, 46] { R2011 += 1 };
  s6 -> s3 [48, 62] { R2011 += 1 };
  s6 -> s3 [65, 98] { R2011 += 1 };
  s6 -> s7 [99, 99] { R2011 += 1 };
  s6 -> s3 [100, 65535] { R2011 += 1 };
  s7 -> s3 [0, 43] { R2011 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2011 += 1 };
  s7 -> s4 [46, 46] { R2011 += 1 };
  s7 -> s3 [48, 62] { R2011 += 1 };
  s7 -> s3 [65, 106] { R2011 += 1 };
  s7 -> s3 [108, 65535] { R2011 += 1 };
  s8 -> s1 [0, 43] { R2011 += 1 };
  s8 -> s1 [45, 45] { R2011 += 1 };
  s8 -> s2 [46, 46] { R2011 += 1 };
  s8 -> s1 [48, 62] { R2011 += 1 };
  s8 -> s3 [65, 65] { R2011 += 1 };
  s8 -> s1 [66, 110] { R2011 += 1 };
  s8 -> s9 [111, 111] { R2011 += 1 };
  s8 -> s1 [112, 65535] { R2011 += 1 };
  s9 -> s1 [0, 43] { R2011 += 1 };
  s9 -> s1 [45, 45] { R2011 += 1 };
  s9 -> s2 [46, 46] { R2011 += 1 };
  s9 -> s1 [48, 62] { R2011 += 1 };
  s9 -> s3 [65, 65] { R2011 += 1 };
  s9 -> s1 [66, 98] { R2011 += 1 };
  s9 -> s10 [99, 99] { R2011 += 1 };
  s9 -> s1 [100, 65535] { R2011 += 1 };
  s10 -> s1 [0, 43] { R2011 += 1 };
  s10 -> s1 [45, 45] { R2011 += 1 };
  s10 -> s2 [46, 46] { R2011 += 1 };
  s10 -> s1 [48, 62] { R2011 += 1 };
  s10 -> s3 [65, 65] { R2011 += 1 };
  s10 -> s1 [66, 106] { R2011 += 1 };
  s10 -> s1 [108, 65535] { R2011 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2013 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2012 += 1, R2013 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2013 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R2015 += 1 };
  s0 -> s2 [0, 65535] { R2015 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R2014 += 1, R2015 += 1 };
  s0 -> s3 [58, 58] { R2015 += 1 };
  s0 -> s1 [59, 65535] { R2015 += 1 };
  s1 -> s1 [0, 57] { R2015 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2015 += 1 };
  s1 -> s1 [59, 65535] { R2015 += 1 };
  s2 -> s1 [0, 57] { R2015 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2015 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R2015 += 1 };
  s2 -> s1 [59, 65535] { R2015 += 1 };
  s3 -> s3 [0, 65535] { R2015 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R2017 += 1 };
  s0 -> s0 [0, 65535] { R2016 += 1, R2017 += 1 };
  s0 -> s2 [0, 65535] { R2017 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R2017 += 1 };
  s0 -> s1 [44, 65535] { R2017 += 1 };
  s1 -> s1 [0, 42] { R2017 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R2017 += 1 };
  s1 -> s1 [44, 65535] { R2017 += 1 };
  s2 -> s1 [0, 42] { R2017 += 1 };
  s2 -> s2 [0, 65535] { R2017 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R2017 += 1 };
  s2 -> s1 [44, 65535] { R2017 += 1 };
  s3 -> s3 [0, 65535] { R2017 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2019 += 1 };
  s0 -> s0 [0, 65535] { R2018 += 1, R2019 += 1 };
  s0 -> s2 [0, 65535] { R2019 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R2019 += 1 };
  s0 -> s1 [66, 65535] { R2019 += 1 };
  s1 -> s1 [0, 64] { R2019 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2019 += 1 };
  s1 -> s1 [66, 65535] { R2019 += 1 };
  s2 -> s1 [0, 64] { R2019 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2019 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R2019 += 1 };
  s2 -> s1 [66, 65535] { R2019 += 1 };
  s3 -> s3 [0, 65535] { R2019 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R2021 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R2021 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R2020 += 1, R2021 += 1 };
  s0 -> s3 [91, 91] { R2021 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R2021 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2021 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R2021 += 1 };
  s2 -> s1 [0, 90] { R2021 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R2021 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2021 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R2021 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R2021 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2021 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R2023 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2022 += 1, R2023 += 1 };
  s0 -> s2 [0, 65535] { R2023 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R2023 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2023 += 1 };
  s2 -> s1 [0, 65535] { R2023 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2023 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2023 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R2025 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R2024 += 1, R2025 += 1 };
  s0 -> s2 [0, 65535] { R2025 += 1, R57 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R2025 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2025 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535] { R2025 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2025 += 1, R57 += 1, R31 += 1 };
  s3 -> s3 [0, 65535] { R2025 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R2027 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R2027 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R2026 += 1, R2027 += 1 };
  s0 -> s3 [108, 108] { R2027 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R2027 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R2027 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R2027 += 1 };
  s2 -> s1 [0, 107] { R2027 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2027 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R2027 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R2027 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R2027 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2027 += 1 };
  s3 -> s5 [111, 111] { R2027 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R2027 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R2027 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2027 += 1 };
  s5 -> s6 [99, 99] { R2027 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R2027 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R2027 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2027 += 1 };
  s6 -> s7 [97, 97] { R2027 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R2027 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R2027 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R2027 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R2027 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R2027 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R2027 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R2027 += 1 };
  s8 -> s9 [104, 104] { R2027 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R2027 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R2027 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R2027 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R2027 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R2027 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R2027 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R2027 += 1 };
  s10 -> s11 [115, 115] { R2027 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R2027 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R2027 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R2027 += 1 };
  s11 -> s12 [116, 116] { R2027 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R2027 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R2027 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R2027 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R2029 += 1, R61 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2028 += 1, R2029 += 1 };
  s0 -> s2 [0, 65535] { R2029 += 1, R60 += 1, R61 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2029 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R2029 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2029 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R2029 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2029 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s0 [0, 65535] { R2030 += 1, R2031 += 1 };
  s0 -> s1 [0, 65535] { R2031 += 1, R75 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R2031 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [0, 65535] { R2031 += 1 };
  s1 -> s1 [0, 65535] { R2031 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2031 += 1, R75 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R2031 += 1, R74 += 1, R75 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2031 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R2033 += 1 };
  s0 -> s0 [0, 65535] { R2032 += 1, R2033 += 1 };
  s1 -> s1 [0, 65535] { R2033 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R2035 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R2035 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R2034 += 1, R2035 += 1 };
  s0 -> s3 [43, 43] { R2035 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R2035 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R2035 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R2035 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R2035 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R2035 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R2035 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R2035 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R2035 += 1, R77 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R2035 += 1, R76 += 1, R77 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R2035 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R2035 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R2035 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R2035 += 1, R77 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R2035 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2035 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2035 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R2037 += 1, R1953 += 1 };
  s0 -> s0 [0, 65535] { R2036 += 1, R2037 += 1 };
  s0 -> s2 [0, 65535] { R2037 += 1, R1952 += 1, R1953 += 1 };
  s0 -> s1 [66, 65535] { R2037 += 1, R1953 += 1 };
  s1 -> s1 [0, 64] { R2037 += 1, R1953 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2037 += 1 };
  s1 -> s1 [66, 65535] { R2037 += 1, R1953 += 1 };
  s2 -> s1 [0, 64] { R2037 += 1, R1953 += 1 };
  s2 -> s2 [0, 65535] { R2037 += 1, R1952 += 1, R1953 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2037 += 1, R1953 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R2039 += 1, R1954 += 1, R1955 += 1 };
  s0 -> s2 [0, 65535] { R2039 += 1, R1955 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R2038 += 1, R2039 += 1 };
  s1 -> s1 [0, 65535] { R2039 += 1, R1954 += 1, R1955 += 1 };
  s1 -> s2 [0, 65535] { R2039 += 1, R1955 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2039 += 1 };
  s2 -> s2 [0, 65535] { R2039 += 1, R1955 += 1, R32 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2039 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R2041 += 1, R1957 += 1 };
  s0 -> s2 [0, 65535] { R2041 += 1, R1956 += 1, R1957 += 1 };
  s0 -> s0 [0, 65535] { R2040 += 1, R2041 += 1 };
  s0 -> s1 [80, 65535] { R2041 += 1, R1957 += 1 };
  s1 -> s1 [0, 65] { R2041 += 1, R1957 += 1 };
  s1 -> s1 [0, 65535] { R2041 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R2041 += 1, R1957 += 1 };
  s2 -> s1 [0, 65] { R2041 += 1, R1957 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2041 += 1, R1956 += 1, R1957 += 1 };
  s2 -> s1 [80, 65535] { R2041 += 1, R1957 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R2043 += 1, R1959 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R2043 += 1, R1958 += 1, R1959 += 1 };
  s0 -> s0 [0, 65535] { R2042 += 1, R2043 += 1 };
  s1 -> s4 [0, 65535] { R2043 += 1 };
  s1 -> s1 [0, 65535] { R2043 += 1, R1959 += 1, R409 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2043 += 1, R1959 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R2043 += 1, R1958 += 1, R1959 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2043 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R2045 += 1, R1961 += 1 };
  s0 -> s2 [0, 65535] { R2045 += 1, R1960 += 1, R1961 += 1 };
  s0 -> s0 [0, 65535] { R2044 += 1, R2045 += 1 };
  s0 -> s3 [0, 65535] { R2045 += 1, R1961 += 1, R411 += 1 };
  s0 -> s1 [81, 65535] { R2045 += 1, R1961 += 1 };
  s1 -> s1 [0, 79] { R2045 += 1, R1961 += 1 };
  s1 -> s1 [0, 65535] { R2045 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R2045 += 1, R1961 += 1 };
  s2 -> s1 [0, 79] { R2045 += 1, R1961 += 1 };
  s2 -> s2 [0, 65535] { R2045 += 1, R1960 += 1, R1961 += 1 };
  s2 -> s3 [0, 65535] { R2045 += 1, R1961 += 1, R411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R2045 += 1, R1961 += 1 };
  s3 -> s1 [0, 79] { R2045 += 1, R1961 += 1 };
  s3 -> s3 [0, 65535] { R2045 += 1, R1961 += 1, R411 += 1 };
  s3 -> s4 [0, 65535] { R2045 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R2045 += 1, R1961 += 1 };
  s4 -> s4 [0, 65535] { R2045 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R2047 += 1, R1963 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R2047 += 1, R1963 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R2046 += 1, R2047 += 1 };
  s0 -> s3 [0, 65535] { R2047 += 1, R1962 += 1, R1963 += 1 };
  s0 -> s1 [81, 65535] { R2047 += 1, R1963 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R2047 += 1, R1963 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R2047 += 1, R1963 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2047 += 1 };
  s1 -> s1 [81, 65535] { R2047 += 1, R1963 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R2047 += 1, R1963 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R2047 += 1, R1963 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2047 += 1 };
  s2 -> s1 [81, 65535] { R2047 += 1, R1963 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R2047 += 1, R1963 += 1, R415 += 1 };
  s3 -> s2 [0, 65535] { R2047 += 1, R1963 += 1, R414 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2047 += 1, R1962 += 1, R1963 += 1 };
  s3 -> s1 [81, 65535] { R2047 += 1, R1963 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2047 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R2049 += 1, R1965 += 1, R420 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R2048 += 1, R2049 += 1 };
  s0 -> s2 [0, 65535] { R2049 += 1, R1964 += 1, R1965 += 1 };
  s0 -> s3 [0, 65535] { R2049 += 1, R1965 += 1, R419 += 1, R420 += 1 };
  s1 -> s1 [0, 65535] { R2049 += 1, R1965 += 1, R420 += 1, R421 += 1 };
  s1 -> s4 [0, 65535] { R2049 += 1 };
  s1 -> s6 [0, 65535] { R2049 += 1, R1965 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2049 += 1, R1965 += 1, R420 += 1, R421 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2049 += 1, R1964 += 1, R1965 += 1 };
  s2 -> s3 [0, 65535] { R2049 += 1, R1965 += 1, R419 += 1, R420 += 1 };
  s3 -> s1 [0, 65535] { R2049 += 1, R1965 += 1, R420 += 1, R421 += 1 };
  s3 -> s4 [0, 65535] { R2049 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2049 += 1, R1965 += 1, R419 += 1, R420 += 1 };
  s4 -> s4 [0, 65535] { R2049 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2049 += 1 };
  s6 -> s6 [0, 65535] { R2049 += 1, R1965 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R2051 += 1, R1966 += 1, R1967 += 1 };
  s0 -> s3 [0, 65535] { R2051 += 1, R1967 += 1, R424 += 1, R425 += 1 };
  s0 -> s0 [0, 65535] { R2050 += 1, R2051 += 1 };
  s0 -> s1 [91, 107] { R2051 += 1, R1967 += 1, R425 += 1 };
  s0 -> s4 [108, 108] { R2051 += 1, R1967 += 1, R425 += 1 };
  s0 -> s1 [109, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s1 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2051 += 1 };
  s1 -> s1 [0, 65535] { R2051 += 1, R1967 += 1 };
  s1 -> s1 [91, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s2 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s2 -> s2 [0, 65535] { R2051 += 1, R1966 += 1, R1967 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2051 += 1, R1967 += 1, R424 += 1, R425 += 1 };
  s2 -> s1 [91, 107] { R2051 += 1, R1967 += 1, R425 += 1 };
  s2 -> s4 [108, 108] { R2051 += 1, R1967 += 1, R425 += 1 };
  s2 -> s1 [109, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s3 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2051 += 1, R1967 += 1, R424 += 1, R425 += 1 };
  s3 -> s6 [0, 65535] { R2051 += 1 };
  s3 -> s1 [91, 107] { R2051 += 1, R1967 += 1, R425 += 1 };
  s3 -> s4 [108, 108] { R2051 += 1, R1967 += 1, R425 += 1 };
  s3 -> s1 [109, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s4 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2051 += 1, R1967 += 1 };
  s4 -> s6 [0, 65535] { R2051 += 1 };
  s4 -> s1 [91, 110] { R2051 += 1, R1967 += 1, R425 += 1 };
  s4 -> s7 [111, 111] { R2051 += 1, R1967 += 1, R425 += 1 };
  s4 -> s1 [112, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2051 += 1 };
  s7 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s7 -> s7 [0, 65535] { R2051 += 1, R1967 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2051 += 1 };
  s7 -> s1 [91, 98] { R2051 += 1, R1967 += 1, R425 += 1 };
  s7 -> s8 [99, 99] { R2051 += 1, R1967 += 1, R425 += 1 };
  s7 -> s1 [100, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s8 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s8 -> s8 [0, 65535] { R2051 += 1, R1967 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R2051 += 1 };
  s8 -> s1 [91, 96] { R2051 += 1, R1967 += 1, R425 += 1 };
  s8 -> s9 [97, 97] { R2051 += 1, R1967 += 1, R425 += 1 };
  s8 -> s1 [98, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s9 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R2051 += 1, R1967 += 1 };
  s9 -> s6 [0, 65535] { R2051 += 1 };
  s9 -> s1 [91, 107] { R2051 += 1, R1967 += 1, R425 += 1 };
  s9 -> s10 [108, 108] { R2051 += 1, R1967 += 1, R425 += 1 };
  s9 -> s1 [109, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s10 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s10 -> s10 [0, 65535] { R2051 += 1, R1967 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R2051 += 1 };
  s10 -> s1 [91, 103] { R2051 += 1, R1967 += 1, R425 += 1 };
  s10 -> s11 [104, 104] { R2051 += 1, R1967 += 1, R425 += 1 };
  s10 -> s1 [105, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s11 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R2051 += 1, R1967 += 1 };
  s11 -> s6 [0, 65535] { R2051 += 1 };
  s11 -> s1 [91, 110] { R2051 += 1, R1967 += 1, R425 += 1 };
  s11 -> s12 [111, 111] { R2051 += 1, R1967 += 1, R425 += 1 };
  s11 -> s1 [112, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s12 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s12 -> s12 [0, 65535] { R2051 += 1, R1967 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R2051 += 1 };
  s12 -> s1 [91, 114] { R2051 += 1, R1967 += 1, R425 += 1 };
  s12 -> s13 [115, 115] { R2051 += 1, R1967 += 1, R425 += 1 };
  s12 -> s1 [116, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s13 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R2051 += 1, R1967 += 1 };
  s13 -> s6 [0, 65535] { R2051 += 1 };
  s13 -> s1 [91, 115] { R2051 += 1, R1967 += 1, R425 += 1 };
  s13 -> s14 [116, 116] { R2051 += 1, R1967 += 1, R425 += 1 };
  s13 -> s1 [117, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  s14 -> s1 [0, 80] { R2051 += 1, R1967 += 1, R425 += 1 };
  s14 -> s1 [91, 65535] { R2051 += 1, R1967 += 1, R425 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R2053 += 1, R1969 += 1, R429 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R2053 += 1, R1969 += 1, R430 += 1, R431 += 1 };
  s0 -> s3 [0, 65535] { R2053 += 1, R1968 += 1, R1969 += 1 };
  s0 -> s0 [0, 65535] { R2052 += 1, R2053 += 1 };
  s1 -> s5 [0, 65535] { R2053 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2053 += 1, R1969 += 1, R429 += 1, R430 += 1 };
  s1 -> s2 [0, 65535] { R2053 += 1, R1969 += 1, R430 += 1, R431 += 1 };
  s2 -> s5 [0, 65535] { R2053 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2053 += 1, R1969 += 1, R430 += 1, R431 += 1 };
  s2 -> s6 [0, 65535] { R2053 += 1, R1969 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2053 += 1, R1969 += 1, R429 += 1, R430 += 1 };
  s3 -> s2 [0, 65535] { R2053 += 1, R1969 += 1, R430 += 1, R431 += 1 };
  s3 -> s3 [0, 65535] { R2053 += 1, R1968 += 1, R1969 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2053 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2053 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2053 += 1, R1969 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R2055 += 1, R1971 += 1 };
  s0 -> s2 [0, 65535] { R2055 += 1, R1970 += 1, R1971 += 1 };
  s0 -> s0 [0, 65535] { R2054 += 1, R2055 += 1 };
  s1 -> s4 [0, 65535] { R2055 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2055 += 1, R1971 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2055 += 1, R1971 += 1 };
  s2 -> s2 [0, 65535] { R2055 += 1, R1970 += 1, R1971 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2055 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R2057 += 1, R1972 += 1, R1973 += 1 };
  s0 -> s2 [0, 65535] { R2057 += 1, R1973 += 1 };
  s0 -> s0 [0, 65535] { R2056 += 1, R2057 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2057 += 1, R1972 += 1, R1973 += 1 };
  s1 -> s2 [0, 65535] { R2057 += 1, R1973 += 1 };
  s2 -> s3 [0, 65535] { R2057 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2057 += 1, R1973 += 1 };
  s3 -> s3 [0, 65535] { R2057 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s0 -> s0 [0, 65535] { R2058 += 1, R2059 += 1 };
  s0 -> s2 [0, 65535] { R2059 += 1, R1974 += 1, R1975 += 1 };
  s0 -> s1 [0, 65535] { R2059 += 1, R1975 += 1 };
  s0 -> s3 [80, 80] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s0 -> s4 [80, 80] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s0 -> s1 [81, 65535] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s1 -> s1 [0, 79] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s1 -> s5 [0, 65535] { R2059 += 1 };
  s1 -> s1 [0, 65535] { R2059 += 1, R1975 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [80, 80] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s1 -> s4 [80, 80] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s1 -> s1 [81, 65535] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s2 -> s1 [0, 79] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s2 -> s2 [0, 65535] { R2059 += 1, R1974 += 1, R1975 += 1 };
  s2 -> s1 [0, 65535] { R2059 += 1, R1975 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [80, 80] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s2 -> s4 [80, 80] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s2 -> s1 [81, 65535] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s3 -> s5 [0, 65535] { R2059 += 1 };
  s3 -> s3 [0, 65535] { R2059 += 1, R1975 += 1, R1950 += 1, R1951 += 1 };
  s3 -> s7 [0, 65535] { R2059 += 1, R1975 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2059 += 1 };
  s4 -> s4 [0, 65535] { R2059 += 1, R1975 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2059 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R2059 += 1 };
  s7 -> s7 [0, 65535] { R2059 += 1, R1975 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R2061 += 1, R1988 += 1, R1989 += 1 };
  s0 -> s0 [0, 65535] { R2060 += 1, R2061 += 1 };
  s0 -> s2 [0, 65535] { R2061 += 1, R1989 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R2061 += 1, R1988 += 1, R1989 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2061 += 1, R1989 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2061 += 1, R1989 += 1, R34 += 1 };
  s2 -> s4 [0, 65535] { R2061 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2061 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R2063 += 1, R1991 += 1 };
  s0 -> s0 [0, 65535] { R2062 += 1, R2063 += 1 };
  s0 -> s2 [0, 65535] { R2063 += 1, R1990 += 1, R1991 += 1 };
  s0 -> s3 [65, 65] { R2063 += 1, R1991 += 1 };
  s0 -> s4 [65, 65] { R2063 += 1, R1991 += 1 };
  s0 -> s5 [80, 80] { R2063 += 1, R1991 += 1 };
  s0 -> s1 [81, 65535] { R2063 += 1, R1991 += 1 };
  s1 -> s1 [0, 64] { R2063 += 1, R1991 += 1 };
  s1 -> s3 [65, 65] { R2063 += 1, R1991 += 1 };
  s1 -> s4 [65, 65] { R2063 += 1, R1991 += 1 };
  s1 -> s5 [80, 80] { R2063 += 1, R1991 += 1 };
  s1 -> s1 [81, 65535] { R2063 += 1, R1991 += 1 };
  s2 -> s1 [0, 64] { R2063 += 1, R1991 += 1 };
  s2 -> s2 [0, 65535] { R2063 += 1, R1990 += 1, R1991 += 1 };
  s2 -> s3 [65, 65] { R2063 += 1, R1991 += 1 };
  s2 -> s4 [65, 65] { R2063 += 1, R1991 += 1 };
  s2 -> s5 [80, 80] { R2063 += 1, R1991 += 1 };
  s2 -> s1 [81, 65535] { R2063 += 1, R1991 += 1 };
  s4 -> s4 [0, 65] { R2063 += 1, R1991 += 1 };
  s4 -> s7 [80, 80] { R2063 += 1, R1991 += 1 };
  s4 -> s4 [81, 65535] { R2063 += 1, R1991 += 1 };
  s5 -> s5 [0, 64] { R2063 += 1, R1991 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2063 += 1 };
  s5 -> s7 [65, 65] { R2063 += 1, R1991 += 1 };
  s5 -> s8 [65, 65] { R2063 += 1, R1991 += 1 };
  s5 -> s5 [80, 65535] { R2063 += 1, R1991 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2063 += 1, R1991 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2063 += 1 };
  s7 -> s7 [80, 65535] { R2063 += 1, R1991 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2063 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R2065 += 1, R1993 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R2064 += 1, R2065 += 1 };
  s0 -> s2 [0, 65535] { R2065 += 1, R1992 += 1, R1993 += 1 };
  s0 -> s3 [65, 65] { R2065 += 1, R1993 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R2065 += 1, R1993 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R2065 += 1, R1993 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R2065 += 1, R1993 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R2065 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2065 += 1, R1993 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R2065 += 1, R1993 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R2065 += 1, R1993 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R2065 += 1, R1993 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2065 += 1, R1992 += 1, R1993 += 1 };
  s2 -> s3 [65, 65] { R2065 += 1, R1993 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R2065 += 1, R1993 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R2065 += 1, R1993 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R2065 += 1 };
  s3 -> s3 [0, 65535] { R2065 += 1, R1993 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2065 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2065 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R2067 += 1, R1995 += 1, R410 += 1 };
  s0 -> s2 [0, 65535] { R2067 += 1, R1994 += 1, R1995 += 1 };
  s0 -> s0 [0, 65535] { R2066 += 1, R2067 += 1 };
  s0 -> s3 [65, 65] { R2067 += 1, R1995 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R2067 += 1, R1995 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R2067 += 1, R1995 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R2067 += 1, R1995 += 1, R410 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2067 += 1 };
  s1 -> s3 [65, 65] { R2067 += 1, R1995 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R2067 += 1, R1995 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R2067 += 1, R1995 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R2067 += 1, R1995 += 1, R410 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2067 += 1, R1994 += 1, R1995 += 1 };
  s2 -> s3 [65, 65] { R2067 += 1, R1995 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R2067 += 1, R1995 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R2067 += 1, R1995 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2067 += 1, R1995 += 1, R410 += 1 };
  s3 -> s6 [0, 65535] { R2067 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2067 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2067 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R2069 += 1, R1996 += 1, R1997 += 1 };
  s0 -> s0 [0, 65535] { R2068 += 1, R2069 += 1 };
  s0 -> s3 [65, 65] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R2069 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2069 += 1, R1996 += 1, R1997 += 1 };
  s2 -> s3 [65, 65] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R2069 += 1, R1997 += 1, R412 += 1, R413 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2069 += 1 };
  s4 -> s4 [0, 65535] { R2069 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2069 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R2070 += 1, R2071 += 1 };
  s0 -> s2 [0, 65535] { R2071 += 1, R1998 += 1, R1999 += 1 };
  s0 -> s3 [65, 65] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 65535] { R2071 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2071 += 1, R1998 += 1, R1999 += 1 };
  s2 -> s3 [65, 65] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s3 -> s3 [0, 65535] { R2071 += 1, R1999 += 1, R416 += 1, R417 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2071 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2071 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2071 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s0 -> s0 [0, 65535] { R2072 += 1, R2073 += 1 };
  s0 -> s2 [0, 65535] { R2073 += 1, R2000 += 1, R2001 += 1 };
  s0 -> s3 [65, 65] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s0 -> s4 [65, 65] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s0 -> s1 [66, 65535] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [0, 64] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [0, 65535] { R2073 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s1 -> s4 [65, 65] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [66, 65535] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [0, 64] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2073 += 1, R2000 += 1, R2001 += 1 };
  s2 -> s3 [65, 65] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s2 -> s4 [65, 65] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [66, 65535] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s3 -> s3 [0, 65535] { R2073 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2073 += 1 };
  s4 -> s4 [0, 65535] { R2073 += 1, R2001 += 1, R422 += 1, R423 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2073 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s0 -> s0 [0, 65535] { R2074 += 1, R2075 += 1 };
  s0 -> s2 [0, 65535] { R2075 += 1, R2002 += 1, R2003 += 1 };
  s0 -> s3 [65, 65] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s0 -> s4 [65, 65] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s0 -> s1 [66, 65535] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s1 -> s1 [0, 64] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2075 += 1 };
  s1 -> s3 [65, 65] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s1 -> s4 [65, 65] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s1 -> s1 [66, 65535] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s2 -> s1 [0, 64] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2075 += 1, R2002 += 1, R2003 += 1 };
  s2 -> s3 [65, 65] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s2 -> s4 [65, 65] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s2 -> s1 [66, 65535] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s3 -> s3 [0, 65535] { R2075 += 1, R2003 += 1, R426 += 1, R427 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2075 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2075 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2075 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s0 -> s2 [0, 64] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s0 -> s3 [0, 65535] { R2077 += 1, R2004 += 1, R2005 += 1 };
  s0 -> s0 [0, 65535] { R2076 += 1, R2077 += 1 };
  s0 -> s4 [65, 65] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s0 -> s5 [65, 65] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s0 -> s6 [65, 65] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s0 -> s7 [65, 65] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s0 -> s1 [66, 65535] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s0 -> s2 [66, 65535] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s1 -> s1 [0, 64] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s1 -> s11 [0, 64] { R2077 += 1, R2005 += 1 };
  s1 -> s8 [65, 65] { R2077 += 1, R2005 += 1 };
  s1 -> s12 [65, 65] { R2077 += 1, R2005 += 1 };
  s1 -> s5 [65, 65] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s1 -> s6 [65, 65] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s1 -> s1 [66, 65535] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s1 -> s11 [66, 65535] { R2077 += 1, R2005 += 1 };
  s2 -> s1 [0, 64] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s2 -> s2 [0, 64] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s2 -> s4 [65, 65] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s2 -> s5 [65, 65] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s2 -> s6 [65, 65] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s2 -> s7 [65, 65] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s2 -> s1 [66, 65535] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s2 -> s2 [66, 65535] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s3 -> s1 [0, 64] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s3 -> s2 [0, 64] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s3 -> s3 [0, 65535] { R2077 += 1, R2004 += 1, R2005 += 1 };
  s3 -> s4 [65, 65] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s3 -> s5 [65, 65] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s3 -> s6 [65, 65] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s3 -> s7 [65, 65] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s3 -> s1 [66, 65535] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s3 -> s2 [66, 65535] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s4 -> s4 [0, 65535] { R2077 += 1, R2005 += 1, R1804 += 1, R1805 += 1 };
  s4 -> s5 [0, 65535] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s5 -> s8 [0, 65535] { R2077 += 1, R2005 += 1 };
  s5 -> s5 [0, 65535] { R2077 += 1, R2005 += 1, R1805 += 1, R1806 += 1 };
  s8 -> s8 [0, 65535] { R2077 += 1, R2005 += 1 };
  s8 -> s9 [0, 65535] { R2077 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R2077 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R2077 += 1, R2005 += 1 };
  s11 -> s11 [0, 65535] { R2077 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R2077 += 1, R2005 += 1 };
  s11 -> s12 [65, 65] { R2077 += 1, R2005 += 1 };
  s11 -> s11 [66, 65535] { R2077 += 1, R2005 += 1 };
  s12 -> s12 [0, 65535] { R2077 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R2079 += 1, R2007 += 1 };
  s0 -> s2 [0, 65535] { R2079 += 1, R2006 += 1, R2007 += 1 };
  s0 -> s0 [0, 65535] { R2078 += 1, R2079 += 1 };
  s0 -> s3 [65, 65] { R2079 += 1, R2007 += 1 };
  s0 -> s4 [65, 65] { R2079 += 1, R2007 += 1 };
  s0 -> s1 [66, 65535] { R2079 += 1, R2007 += 1 };
  s1 -> s1 [0, 64] { R2079 += 1, R2007 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2079 += 1 };
  s1 -> s3 [65, 65] { R2079 += 1, R2007 += 1 };
  s1 -> s4 [65, 65] { R2079 += 1, R2007 += 1 };
  s1 -> s1 [66, 65535] { R2079 += 1, R2007 += 1 };
  s2 -> s1 [0, 64] { R2079 += 1, R2007 += 1 };
  s2 -> s2 [0, 65535] { R2079 += 1, R2006 += 1, R2007 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2079 += 1, R2007 += 1 };
  s2 -> s4 [65, 65] { R2079 += 1, R2007 += 1 };
  s2 -> s1 [66, 65535] { R2079 += 1, R2007 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2079 += 1 };
  s4 -> s5 [0, 65535] { R2079 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2079 += 1, R2007 += 1 };
  s5 -> s5 [0, 65535] { R2079 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s0 -> s2 [0, 64] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s0 -> s3 [0, 65535] { R2081 += 1, R2008 += 1, R2009 += 1 };
  s0 -> s0 [0, 65535] { R2080 += 1, R2081 += 1 };
  s0 -> s4 [65, 65] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s0 -> s5 [65, 65] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s0 -> s6 [65, 65] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s0 -> s7 [65, 65] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s0 -> s2 [66, 79] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s0 -> s1 [66, 65535] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s0 -> s2 [81, 65535] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s1 -> s1 [0, 64] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s1 -> s2 [0, 64] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s1 -> s4 [65, 65] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s1 -> s5 [65, 65] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s1 -> s6 [65, 65] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s1 -> s7 [65, 65] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s1 -> s2 [66, 79] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s1 -> s1 [66, 65535] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s1 -> s2 [81, 65535] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s2 -> s2 [0, 64] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R2081 += 1 };
  s2 -> s4 [65, 65] { R2081 += 1, R2009 += 1 };
  s2 -> s7 [65, 65] { R2081 += 1, R2009 += 1 };
  s2 -> s2 [66, 79] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s2 -> s2 [66, 65535] { R2081 += 1, R2009 += 1 };
  s2 -> s2 [81, 65535] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s3 -> s1 [0, 64] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s3 -> s2 [0, 64] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s3 -> s3 [0, 65535] { R2081 += 1, R2008 += 1, R2009 += 1 };
  s3 -> s4 [65, 65] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s3 -> s5 [65, 65] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s3 -> s6 [65, 65] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s3 -> s7 [65, 65] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s3 -> s2 [66, 79] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s3 -> s1 [66, 65535] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s3 -> s2 [81, 65535] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s4 -> s4 [0, 65535] { R2081 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s7 [0, 79] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s5 -> s5 [0, 65535] { R2081 += 1, R2009 += 1, R1946 += 1, R1947 += 1 };
  s5 -> s7 [81, 65535] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s7 -> s7 [0, 79] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R2081 += 1 };
  s7 -> s7 [0, 65535] { R2081 += 1, R2009 += 1 };
  s7 -> s7 [81, 65535] { R2081 += 1, R2009 += 1, R1947 += 1, R1948 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2081 += 1 };
  accepting s4, s8, s2, s9, s7;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R1975 && R6 = R2081 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R1975 && R58 = 0 && R59 = R1975 && R60 = 0 && R61 = R1975 && R62 = 0 && R63 = R2081 && R64 = 0 && R65 = R2081 && R66 = 0 && R67 = R2081 && R86 = 0 && R87 = 0 && R1952 = 0 && R1953 = R1975 && R1954 = 0 && R1955 = R1975 && R1956 = 0 && R1957 = R1975 && R1958 = 0 && R1959 = R1975 && R1960 = 0 && R1961 = R1975 && R1962 = 0 && R1963 = R1975 && R1964 = 0 && R1965 = R1975 && R1966 = 0 && R1967 = R1975 && R1968 = 0 && R1969 = R1975 && R1970 = 0 && R1971 = R1975 && R1972 = 0 && R1973 = R1975 && R1974 = 0 && R1976 = 0 && R1977 = R2081 && R1978 = 0 && R1979 = R2081 && R1980 = 0 && R1981 = R2081 && R1982 = 0 && R1983 = R2081 && R1984 = 0 && R1985 = R2081 && R1986 = 0 && R1987 = R2081 && R1990 = 0 && R1991 = 0 && R2004 = 0 && R2005 = 0 && R2008 = 0 && R2009 = 0 && R2010 = 10 && R2011 = R2081 && R2012 = 10 && R2013 = R2081 && R2014 = 10 && R2015 = R2081 && R2016 = 10 && R2017 = R2081 && R2018 = 10 && R2019 = R2081 && R2020 = 10 && R2021 = R2081 && R2022 = 10 && R2023 = R2081 && R2024 = 10 && R2025 = R2081 && R2026 = 10 && R2027 = R2081 && R2028 = 10 && R2029 = R2081 && R2030 = 10 && R2031 = R2081 && R2032 = 10 && R2033 = R2081 && R2034 = 10 && R2035 = R2081 && R2036 = 10 && R2037 = R2081 && R2038 = 10 && R2039 = R2081 && R2040 = 10 && R2041 = R2081 && R2042 = 10 && R2043 = R2081 && R2044 = 10 && R2045 = R2081 && R2046 = 10 && R2047 = R2081 && R2048 = 10 && R2049 = R2081 && R2050 = 10 && R2051 = R2081 && R2052 = 10 && R2053 = R2081 && R2054 = 10 && R2055 = R2081 && R2056 = 10 && R2057 = R2081 && R2058 = 10 && R2059 = R2081 && R2060 = 10 && R2061 = R2081 && R2062 = 10 && R2063 = R2081 && R2064 = 10 && R2065 = R2081 && R2066 = 10 && R2067 = R2081 && R2068 = 10 && R2069 = R2081 && R2070 = 10 && R2071 = R2081 && R2072 = 10 && R2073 = R2081 && R2074 = 10 && R2075 = R2081 && R2076 = 10 && R2077 = R2081 && R2078 = 10 && R2079 = R2081 && R2080 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R431 + R428 + R1951 + R1948 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R1975 && 9 < R2081 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R424 + R422 = 0 && R425 + R423 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R429 + R426 = 0 && R430 + R427 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R424 + R422 != 0 || R409 + R408 + -1*R425 + -1*R423 = 0 || R409 + R408 < 1) && (R429 + R426 != 0 || R409 + R408 + -1*R430 + -1*R427 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R1988 = 0 && R1989 = 0)) && (R34 = 0 || (R1992 = 0 && R1993 = 0)) && (R34 = 0 || (R1994 = 0 && R1995 = 0)) && (R34 = 0 || (R1996 = 0 && R1997 = 0)) && (R34 = 0 || (R1998 = 0 && R1999 = 0)) && (R34 = 0 || (R2000 = 0 && R2001 = 0)) && (R34 = 0 || (R2002 = 0 && R2003 = 0)) && (R34 = 0 || (R2006 = 0 && R2007 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R424 + R422 = 0 || R409 + R408 < 1) && (R429 + R426 = 0 || R409 + R408 < 1) && (R1809 + R1806 = 0 || (R1807 + R1804 = 0 && R1808 + R1805 = 0)) && (R1809 + R1806 = 0 || (R1949 + R1946 = 0 && R1950 + R1947 = 0));
// End of Parikh automata intersection problem
