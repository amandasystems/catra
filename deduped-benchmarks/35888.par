// Parikh automata intersection problem, generated by OSTRICH+
counter int R10064, R10065, R10066, R10067, R10068, R10069, R10342, R10343, R10344, R10345, R10346, R10347, R10348, R10349, R10350, R10351, R10352, R10353, R10354, R10355, R10356, R10357, R10358, R10359, R10360, R10361, R10362, R10363, R10364, R10365, R10366, R10367, R10368, R10369, R10370, R10371, R10372, R10373, R10374, R10375, R10376, R10377, R10378, R10379, R10380, R10381, R10382, R10383, R10384, R10385, R10386, R10387, R10388, R10389, R10390, R10391, R10392, R10393, R10394, R10395, R10396, R10397, R10398, R10399, R10400, R10401, R10402, R10403, R10404, R10405, R10406, R10407, R10408, R10409, R10410, R10411, R10412, R10413, R10414, R10415, R10416, R10417, R10418, R10419, R10420, R10421, R10422, R10423, R10424, R10425, R10426, R10427, R10428, R10429, R10430, R10431, R10432, R10433, R10434, R10435, R10436, R10437, R10438, R10439, R10440, R10441, R10442, R10443, R10444, R10445, R10446, R10447, R10448, R10449, R10450, R10451, R10452, R10453, R10454, R10455, R10456, R10457, R10458, R10459, R10460, R10461, R10462, R10463, R10464, R10465, R10466, R10467, R10468, R10469, R10470, R10471, R10472, R10473, R10474, R10475, R10476, R10477, R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6618, R6619, R6620, R6621, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R8686, R8687, R8688, R8689, R8690, R8691, R87;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R10372 += 1, R10373 += 1 };
  s0 -> s1 [0, 65535] { R10373 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10373 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R10375 += 1 };
  s0 -> s0 [0, 65535] { R10374 += 1, R10375 += 1 };
  s0 -> s2 [0, 65535] { R10375 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R10375 += 1 };
  s0 -> s1 [66, 65535] { R10375 += 1 };
  s1 -> s1 [0, 64] { R10375 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10375 += 1 };
  s1 -> s1 [66, 65535] { R10375 += 1 };
  s2 -> s1 [0, 64] { R10375 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10375 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R10375 += 1 };
  s2 -> s1 [66, 65535] { R10375 += 1 };
  s3 -> s3 [0, 65535] { R10375 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10377 += 1, R69 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R10376 += 1, R10377 += 1 };
  s0 -> s2 [0, 65535] { R10377 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10377 += 1 };
  s1 -> s1 [0, 65535] { R10377 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10377 += 1, R69 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R10377 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10377 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10378 += 1, R10379 += 1 };
  s0 -> s1 [0, 65535] { R10379 += 1 };
  s1 -> s1 [0, 65535] { R10379 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10381 += 1, R85 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R10381 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R10380 += 1, R10381 += 1 };
  s1 -> s1 [0, 65535] { R10381 += 1, R85 += 1, R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10381 += 1 };
  s2 -> s1 [0, 65535] { R10381 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10381 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10381 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R10383 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R10382 += 1, R10383 += 1 };
  s0 -> s2 [108, 108] { R10383 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R10383 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R10383 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R10383 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R10383 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R10383 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R10383 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R10383 += 1, R87 += 1 };
  s6 -> s14 [108, 108] { R10383 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R10383 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R10383 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R10383 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R10383 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R10383 += 1, R87 += 1 };
  s12 -> s12 [0, 65535] { R10383 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R10383 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R10383 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R10383 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R10383 += 1, R87 += 1 };
  s18 -> s13 [0, 65535];
  s18 -> s18 [0, 65535] { R10383 += 1 };
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R10407 += 1 };
  s0 -> s0 [0, 65535] { R10406 += 1, R10407 += 1 };
  s0 -> s1 [45, 45] { R10407 += 1 };
  s0 -> s2 [46, 46] { R10407 += 1 };
  s0 -> s1 [48, 62] { R10407 += 1 };
  s0 -> s3 [65, 65] { R10407 += 1 };
  s0 -> s1 [66, 65535] { R10407 += 1 };
  s1 -> s1 [0, 43] { R10407 += 1 };
  s1 -> s1 [45, 45] { R10407 += 1 };
  s1 -> s2 [46, 46] { R10407 += 1 };
  s1 -> s1 [48, 62] { R10407 += 1 };
  s1 -> s3 [65, 65] { R10407 += 1 };
  s1 -> s1 [66, 65535] { R10407 += 1 };
  s2 -> s1 [0, 43] { R10407 += 1 };
  s2 -> s1 [45, 45] { R10407 += 1 };
  s2 -> s2 [46, 46] { R10407 += 1 };
  s2 -> s1 [48, 62] { R10407 += 1 };
  s2 -> s3 [65, 65] { R10407 += 1 };
  s2 -> s1 [66, 114] { R10407 += 1 };
  s2 -> s8 [115, 115] { R10407 += 1 };
  s2 -> s1 [116, 65535] { R10407 += 1 };
  s3 -> s3 [0, 43] { R10407 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10407 += 1 };
  s3 -> s4 [46, 46] { R10407 += 1 };
  s3 -> s3 [48, 62] { R10407 += 1 };
  s3 -> s3 [65, 65535] { R10407 += 1 };
  s4 -> s3 [0, 43] { R10407 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10407 += 1 };
  s4 -> s4 [46, 46] { R10407 += 1 };
  s4 -> s3 [48, 62] { R10407 += 1 };
  s4 -> s3 [65, 114] { R10407 += 1 };
  s4 -> s5 [115, 115] { R10407 += 1 };
  s4 -> s3 [116, 65535] { R10407 += 1 };
  s5 -> s3 [0, 43] { R10407 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10407 += 1 };
  s5 -> s4 [46, 46] { R10407 += 1 };
  s5 -> s3 [48, 62] { R10407 += 1 };
  s5 -> s3 [65, 110] { R10407 += 1 };
  s5 -> s6 [111, 111] { R10407 += 1 };
  s5 -> s3 [112, 65535] { R10407 += 1 };
  s6 -> s3 [0, 43] { R10407 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10407 += 1 };
  s6 -> s4 [46, 46] { R10407 += 1 };
  s6 -> s3 [48, 62] { R10407 += 1 };
  s6 -> s3 [65, 98] { R10407 += 1 };
  s6 -> s7 [99, 99] { R10407 += 1 };
  s6 -> s3 [100, 65535] { R10407 += 1 };
  s7 -> s3 [0, 43] { R10407 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10407 += 1 };
  s7 -> s4 [46, 46] { R10407 += 1 };
  s7 -> s3 [48, 62] { R10407 += 1 };
  s7 -> s3 [65, 106] { R10407 += 1 };
  s7 -> s3 [108, 65535] { R10407 += 1 };
  s8 -> s1 [0, 43] { R10407 += 1 };
  s8 -> s1 [45, 45] { R10407 += 1 };
  s8 -> s2 [46, 46] { R10407 += 1 };
  s8 -> s1 [48, 62] { R10407 += 1 };
  s8 -> s3 [65, 65] { R10407 += 1 };
  s8 -> s1 [66, 110] { R10407 += 1 };
  s8 -> s9 [111, 111] { R10407 += 1 };
  s8 -> s1 [112, 65535] { R10407 += 1 };
  s9 -> s1 [0, 43] { R10407 += 1 };
  s9 -> s1 [45, 45] { R10407 += 1 };
  s9 -> s2 [46, 46] { R10407 += 1 };
  s9 -> s1 [48, 62] { R10407 += 1 };
  s9 -> s3 [65, 65] { R10407 += 1 };
  s9 -> s1 [66, 98] { R10407 += 1 };
  s9 -> s10 [99, 99] { R10407 += 1 };
  s9 -> s1 [100, 65535] { R10407 += 1 };
  s10 -> s1 [0, 43] { R10407 += 1 };
  s10 -> s1 [45, 45] { R10407 += 1 };
  s10 -> s2 [46, 46] { R10407 += 1 };
  s10 -> s1 [48, 62] { R10407 += 1 };
  s10 -> s3 [65, 65] { R10407 += 1 };
  s10 -> s1 [66, 106] { R10407 += 1 };
  s10 -> s1 [108, 65535] { R10407 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R10408 += 1, R10409 += 1 };
  s0 -> s1 [0, 65535] { R10409 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10409 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R10411 += 1 };
  s0 -> s0 [0, 65535] { R10410 += 1, R10411 += 1 };
  s0 -> s2 [0, 65535] { R10411 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R10411 += 1 };
  s0 -> s1 [59, 65535] { R10411 += 1 };
  s1 -> s1 [0, 57] { R10411 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10411 += 1 };
  s1 -> s1 [59, 65535] { R10411 += 1 };
  s2 -> s1 [0, 57] { R10411 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10411 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R10411 += 1 };
  s2 -> s1 [59, 65535] { R10411 += 1 };
  s3 -> s3 [0, 65535] { R10411 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R10413 += 1 };
  s0 -> s0 [0, 65535] { R10412 += 1, R10413 += 1 };
  s0 -> s2 [0, 65535] { R10413 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R10413 += 1 };
  s0 -> s1 [44, 65535] { R10413 += 1 };
  s1 -> s1 [0, 42] { R10413 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R10413 += 1 };
  s1 -> s1 [44, 65535] { R10413 += 1 };
  s2 -> s1 [0, 42] { R10413 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10413 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R10413 += 1 };
  s2 -> s1 [44, 65535] { R10413 += 1 };
  s3 -> s3 [0, 65535] { R10413 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10415 += 1 };
  s0 -> s0 [0, 65535] { R10414 += 1, R10415 += 1 };
  s0 -> s2 [0, 65535] { R10415 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R10415 += 1 };
  s0 -> s1 [66, 65535] { R10415 += 1 };
  s1 -> s1 [0, 64] { R10415 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10415 += 1 };
  s1 -> s1 [66, 65535] { R10415 += 1 };
  s2 -> s1 [0, 64] { R10415 += 1 };
  s2 -> s2 [0, 65535] { R10415 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R10415 += 1 };
  s2 -> s1 [66, 65535] { R10415 += 1 };
  s3 -> s3 [0, 65535] { R10415 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R10417 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R10416 += 1, R10417 += 1 };
  s0 -> s2 [0, 65535] { R10417 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R10417 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R10417 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10417 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R10417 += 1 };
  s2 -> s1 [0, 90] { R10417 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R10417 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10417 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R10417 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R10417 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10417 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R10418 += 1, R10419 += 1 };
  s0 -> s1 [0, 65535] { R10419 += 1, R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R10419 += 1, R41 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R10419 += 1, R40 += 1, R41 += 1 };
  s1 -> s2 [0, 65535] { R10419 += 1, R41 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10419 += 1 };
  s2 -> s2 [0, 65535] { R10419 += 1, R41 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10419 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10421 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R10421 += 1, R57 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R10420 += 1, R10421 += 1 };
  s1 -> s1 [0, 65535] { R10421 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10421 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535] { R10421 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10421 += 1, R57 += 1, R31 += 1 };
  s3 -> s3 [0, 65535] { R10421 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R10423 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R10423 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R10422 += 1, R10423 += 1 };
  s0 -> s3 [108, 108] { R10423 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R10423 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R10423 += 1 };
  s1 -> s1 [0, 65535] { R10423 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R10423 += 1, R59 += 1 };
  s2 -> s2 [0, 65535] { R10423 += 1, R58 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R10423 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R10423 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R10423 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R10423 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R10423 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R10423 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10423 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R10423 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10423 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R10423 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R10423 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R10423 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R10423 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R10423 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R10423 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R10423 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R10423 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R10423 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R10423 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R10423 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R10423 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R10423 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R10423 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R10423 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R10423 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R10423 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R10423 += 1, R59 += 1 };
  s10 -> s10 [0, 65535] { R10423 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R10423 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R10423 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R10423 += 1, R59 += 1 };
  s11 -> s11 [0, 65535] { R10423 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R10423 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R10423 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R10423 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R10423 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10425 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R10425 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R10424 += 1, R10425 += 1 };
  s1 -> s1 [0, 65535] { R10425 += 1, R61 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10425 += 1 };
  s2 -> s1 [0, 65535] { R10425 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10425 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10425 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10427 += 1, R75 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R10427 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R10426 += 1, R10427 += 1 };
  s1 -> s4 [0, 65535] { R10427 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10427 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10427 += 1, R75 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R10427 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10427 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10429 += 1 };
  s0 -> s0 [0, 65535] { R10428 += 1, R10429 += 1 };
  s1 -> s1 [0, 65535] { R10429 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R10431 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R10431 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R10430 += 1, R10431 += 1 };
  s0 -> s3 [43, 43] { R10431 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R10431 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R10431 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R10431 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10431 += 1 };
  s1 -> s3 [43, 43] { R10431 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R10431 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R10431 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R10431 += 1, R77 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R10431 += 1, R76 += 1, R77 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R10431 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R10431 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R10431 += 1, R77 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R10431 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10431 += 1, R77 += 1, R42 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10431 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10431 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R10433 += 1, R10349 += 1 };
  s0 -> s0 [0, 65535] { R10432 += 1, R10433 += 1 };
  s0 -> s2 [0, 65535] { R10433 += 1, R10348 += 1, R10349 += 1 };
  s0 -> s1 [66, 65535] { R10433 += 1, R10349 += 1 };
  s1 -> s1 [0, 64] { R10433 += 1, R10349 += 1 };
  s1 -> s1 [0, 65535] { R10433 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R10433 += 1, R10349 += 1 };
  s2 -> s1 [0, 64] { R10433 += 1, R10349 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10433 += 1, R10348 += 1, R10349 += 1 };
  s2 -> s1 [66, 65535] { R10433 += 1, R10349 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10435 += 1, R10351 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R10435 += 1, R10350 += 1, R10351 += 1 };
  s0 -> s0 [0, 65535] { R10434 += 1, R10435 += 1 };
  s1 -> s4 [0, 65535] { R10435 += 1 };
  s1 -> s1 [0, 65535] { R10435 += 1, R10351 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10435 += 1, R10351 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10435 += 1, R10350 += 1, R10351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10435 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R10437 += 1, R10353 += 1 };
  s0 -> s2 [0, 65535] { R10437 += 1, R10352 += 1, R10353 += 1 };
  s0 -> s0 [0, 65535] { R10436 += 1, R10437 += 1 };
  s0 -> s1 [80, 65535] { R10437 += 1, R10353 += 1 };
  s1 -> s1 [0, 65] { R10437 += 1, R10353 += 1 };
  s1 -> s1 [0, 65535] { R10437 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R10437 += 1, R10353 += 1 };
  s2 -> s1 [0, 65] { R10437 += 1, R10353 += 1 };
  s2 -> s2 [0, 65535] { R10437 += 1, R10352 += 1, R10353 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R10437 += 1, R10353 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R10438 += 1, R10439 += 1 };
  s0 -> s1 [0, 65535] { R10439 += 1, R10355 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R10439 += 1, R10354 += 1, R10355 += 1 };
  s1 -> s1 [0, 65535] { R10439 += 1, R10355 += 1, R409 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10439 += 1 };
  s2 -> s1 [0, 65535] { R10439 += 1, R10355 += 1, R409 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10439 += 1, R10354 += 1, R10355 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10439 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R10441 += 1, R10357 += 1 };
  s0 -> s2 [0, 65535] { R10441 += 1, R10357 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R10440 += 1, R10441 += 1 };
  s0 -> s3 [0, 65535] { R10441 += 1, R10356 += 1, R10357 += 1 };
  s0 -> s1 [81, 65535] { R10441 += 1, R10357 += 1 };
  s1 -> s1 [0, 79] { R10441 += 1, R10357 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10441 += 1 };
  s1 -> s1 [81, 65535] { R10441 += 1, R10357 += 1 };
  s2 -> s1 [0, 79] { R10441 += 1, R10357 += 1 };
  s2 -> s2 [0, 65535] { R10441 += 1, R10357 += 1, R411 += 1 };
  s2 -> s5 [0, 65535] { R10441 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R10441 += 1, R10357 += 1 };
  s3 -> s1 [0, 79] { R10441 += 1, R10357 += 1 };
  s3 -> s2 [0, 65535] { R10441 += 1, R10357 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R10441 += 1, R10356 += 1, R10357 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R10441 += 1, R10357 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10441 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R10443 += 1, R10359 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R10442 += 1, R10443 += 1 };
  s0 -> s2 [0, 65535] { R10443 += 1, R10359 += 1, R414 += 1, R415 += 1 };
  s0 -> s3 [0, 65535] { R10443 += 1, R10358 += 1, R10359 += 1 };
  s0 -> s1 [81, 65535] { R10443 += 1, R10359 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R10443 += 1, R10359 += 1, R415 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10443 += 1 };
  s1 -> s1 [0, 65535] { R10443 += 1, R10359 += 1 };
  s1 -> s1 [81, 65535] { R10443 += 1, R10359 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R10443 += 1, R10359 += 1, R415 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10443 += 1 };
  s2 -> s2 [0, 65535] { R10443 += 1, R10359 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [81, 65535] { R10443 += 1, R10359 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R10443 += 1, R10359 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10443 += 1, R10359 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R10443 += 1, R10358 += 1, R10359 += 1 };
  s3 -> s1 [81, 65535] { R10443 += 1, R10359 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10443 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s0 [0, 65535] { R10444 += 1, R10445 += 1 };
  s0 -> s1 [0, 65535] { R10445 += 1, R10361 += 1, R419 += 1, R420 += 1 };
  s0 -> s2 [0, 65535] { R10445 += 1, R10361 += 1, R420 += 1, R421 += 1 };
  s0 -> s3 [0, 65535] { R10445 += 1, R10360 += 1, R10361 += 1 };
  s1 -> s5 [0, 65535] { R10445 += 1 };
  s1 -> s1 [0, 65535] { R10445 += 1, R10361 += 1, R419 += 1, R420 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10445 += 1, R10361 += 1, R420 += 1, R421 += 1 };
  s2 -> s5 [0, 65535] { R10445 += 1 };
  s2 -> s6 [0, 65535] { R10445 += 1, R10361 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10445 += 1, R10361 += 1, R420 += 1, R421 += 1 };
  s3 -> s1 [0, 65535] { R10445 += 1, R10361 += 1, R419 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10445 += 1, R10361 += 1, R420 += 1, R421 += 1 };
  s3 -> s3 [0, 65535] { R10445 += 1, R10360 += 1, R10361 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10445 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10445 += 1 };
  s6 -> s6 [0, 65535] { R10445 += 1, R10361 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R10447 += 1, R10363 += 1, R6621 += 1 };
  s0 -> s2 [0, 65535] { R10447 += 1, R10362 += 1, R10363 += 1 };
  s0 -> s0 [0, 65535] { R10446 += 1, R10447 += 1 };
  s0 -> s1 [0, 65535] { R10447 += 1, R10363 += 1 };
  s0 -> s1 [91, 65535] { R10447 += 1, R10363 += 1, R6621 += 1 };
  s1 -> s1 [0, 80] { R10447 += 1, R10363 += 1, R6621 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10447 += 1 };
  s1 -> s1 [0, 65535] { R10447 += 1, R10363 += 1 };
  s1 -> s1 [91, 65535] { R10447 += 1, R10363 += 1, R6621 += 1 };
  s2 -> s1 [0, 80] { R10447 += 1, R10363 += 1, R6621 += 1 };
  s2 -> s2 [0, 65535] { R10447 += 1, R10362 += 1, R10363 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10447 += 1, R10363 += 1 };
  s2 -> s1 [91, 65535] { R10447 += 1, R10363 += 1, R6621 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10447 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R10449 += 1, R10364 += 1, R10365 += 1 };
  s0 -> s0 [0, 65535] { R10448 += 1, R10449 += 1 };
  s0 -> s2 [0, 65535] { R10449 += 1, R10365 += 1 };
  s0 -> s3 [0, 65535] { R10449 += 1, R10365 += 1, R8690 += 1, R8691 += 1 };
  s1 -> s1 [0, 65535] { R10449 += 1, R10364 += 1, R10365 += 1 };
  s1 -> s2 [0, 65535] { R10449 += 1, R10365 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R10449 += 1, R10365 += 1, R8690 += 1, R8691 += 1 };
  s2 -> s2 [0, 65535] { R10449 += 1, R10365 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10449 += 1 };
  s3 -> s2 [0, 65535] { R10449 += 1, R10365 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10449 += 1, R10365 += 1, R8690 += 1, R8691 += 1 };
  s3 -> s5 [0, 65535] { R10449 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10449 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R10451 += 1, R10367 += 1 };
  s0 -> s2 [0, 65535] { R10451 += 1, R10366 += 1, R10367 += 1 };
  s0 -> s0 [0, 65535] { R10450 += 1, R10451 += 1 };
  s1 -> s4 [0, 65535] { R10451 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10451 += 1, R10367 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10451 += 1, R10367 += 1 };
  s2 -> s2 [0, 65535] { R10451 += 1, R10366 += 1, R10367 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10451 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s0 [0, 65535] { R10452 += 1, R10453 += 1 };
  s0 -> s1 [0, 65535] { R10453 += 1, R10369 += 1 };
  s0 -> s2 [0, 65535] { R10453 += 1, R10368 += 1, R10369 += 1 };
  s1 -> s1 [0, 65535] { R10453 += 1, R10369 += 1 };
  s1 -> s4 [0, 65535] { R10453 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10453 += 1, R10369 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10453 += 1, R10368 += 1, R10369 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10453 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R10455 += 1, R10370 += 1, R10371 += 1 };
  s0 -> s0 [0, 65535] { R10454 += 1, R10455 += 1 };
  s0 -> s2 [0, 65535] { R10455 += 1, R10371 += 1 };
  s1 -> s1 [0, 65535] { R10455 += 1, R10370 += 1, R10371 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10455 += 1, R10371 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10455 += 1 };
  s2 -> s2 [0, 65535] { R10455 += 1, R10371 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10455 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R10456 += 1, R10457 += 1 };
  s0 -> s1 [0, 65535] { R10457 += 1, R10385 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R10457 += 1, R10384 += 1, R10385 += 1 };
  s1 -> s4 [0, 65535] { R10457 += 1 };
  s1 -> s1 [0, 65535] { R10457 += 1, R10385 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10457 += 1, R10385 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R10457 += 1, R10384 += 1, R10385 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10457 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R10459 += 1, R10387 += 1 };
  s0 -> s2 [0, 65535] { R10459 += 1, R10386 += 1, R10387 += 1 };
  s0 -> s0 [0, 65535] { R10458 += 1, R10459 += 1 };
  s0 -> s3 [65, 65] { R10459 += 1, R10387 += 1 };
  s0 -> s4 [65, 65] { R10459 += 1, R10387 += 1 };
  s0 -> s5 [80, 80] { R10459 += 1, R10387 += 1 };
  s0 -> s1 [81, 65535] { R10459 += 1, R10387 += 1 };
  s1 -> s1 [0, 64] { R10459 += 1, R10387 += 1 };
  s1 -> s3 [65, 65] { R10459 += 1, R10387 += 1 };
  s1 -> s4 [65, 65] { R10459 += 1, R10387 += 1 };
  s1 -> s5 [80, 80] { R10459 += 1, R10387 += 1 };
  s1 -> s1 [81, 65535] { R10459 += 1, R10387 += 1 };
  s2 -> s1 [0, 64] { R10459 += 1, R10387 += 1 };
  s2 -> s2 [0, 65535] { R10459 += 1, R10386 += 1, R10387 += 1 };
  s2 -> s3 [65, 65] { R10459 += 1, R10387 += 1 };
  s2 -> s4 [65, 65] { R10459 += 1, R10387 += 1 };
  s2 -> s5 [80, 80] { R10459 += 1, R10387 += 1 };
  s2 -> s1 [81, 65535] { R10459 += 1, R10387 += 1 };
  s3 -> s3 [0, 65] { R10459 += 1, R10387 += 1 };
  s3 -> s7 [80, 80] { R10459 += 1, R10387 += 1 };
  s3 -> s3 [81, 65535] { R10459 += 1, R10387 += 1 };
  s5 -> s5 [0, 64] { R10459 += 1, R10387 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10459 += 1 };
  s5 -> s7 [65, 65] { R10459 += 1, R10387 += 1 };
  s5 -> s8 [65, 65] { R10459 += 1, R10387 += 1 };
  s5 -> s5 [80, 65535] { R10459 += 1, R10387 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10459 += 1, R10387 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10459 += 1 };
  s7 -> s7 [80, 65535] { R10459 += 1, R10387 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10459 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R10461 += 1, R10389 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R10460 += 1, R10461 += 1 };
  s0 -> s2 [0, 65535] { R10461 += 1, R10388 += 1, R10389 += 1 };
  s0 -> s3 [65, 65] { R10461 += 1, R10389 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R10461 += 1, R10389 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R10461 += 1, R10389 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R10461 += 1, R10389 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10461 += 1 };
  s1 -> s3 [65, 65] { R10461 += 1, R10389 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R10461 += 1, R10389 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R10461 += 1, R10389 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R10461 += 1, R10389 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10461 += 1, R10388 += 1, R10389 += 1 };
  s2 -> s3 [65, 65] { R10461 += 1, R10389 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R10461 += 1, R10389 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R10461 += 1, R10389 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10461 += 1 };
  s3 -> s3 [0, 65535] { R10461 += 1, R10389 += 1, R408 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10461 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10461 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R10463 += 1, R10391 += 1, R410 += 1 };
  s0 -> s0 [0, 65535] { R10462 += 1, R10463 += 1 };
  s0 -> s2 [0, 65535] { R10463 += 1, R10390 += 1, R10391 += 1 };
  s0 -> s3 [65, 65] { R10463 += 1, R10391 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R10463 += 1, R10391 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R10463 += 1, R10391 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R10463 += 1, R10391 += 1, R410 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10463 += 1 };
  s1 -> s3 [65, 65] { R10463 += 1, R10391 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R10463 += 1, R10391 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R10463 += 1, R10391 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R10463 += 1, R10391 += 1, R410 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10463 += 1, R10390 += 1, R10391 += 1 };
  s2 -> s3 [65, 65] { R10463 += 1, R10391 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R10463 += 1, R10391 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R10463 += 1, R10391 += 1, R410 += 1 };
  s3 -> s6 [0, 65535] { R10463 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10463 += 1, R10391 += 1, R410 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10463 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10463 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R10465 += 1, R10392 += 1, R10393 += 1 };
  s0 -> s0 [0, 65535] { R10464 += 1, R10465 += 1 };
  s0 -> s3 [65, 65] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10465 += 1 };
  s1 -> s3 [65, 65] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10465 += 1, R10392 += 1, R10393 += 1 };
  s2 -> s3 [65, 65] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10465 += 1 };
  s3 -> s3 [0, 65535] { R10465 += 1, R10393 += 1, R412 += 1, R413 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10465 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10465 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R10466 += 1, R10467 += 1 };
  s0 -> s2 [0, 65535] { R10467 += 1, R10394 += 1, R10395 += 1 };
  s0 -> s3 [65, 65] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 65535] { R10467 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10467 += 1, R10394 += 1, R10395 += 1 };
  s2 -> s3 [65, 65] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10467 += 1 };
  s4 -> s5 [0, 65535] { R10467 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10467 += 1, R10395 += 1, R416 += 1, R417 += 1 };
  s5 -> s5 [0, 65535] { R10467 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s0 -> s2 [0, 64] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s0 [0, 65535] { R10468 += 1, R10469 += 1 };
  s0 -> s3 [0, 65535] { R10469 += 1, R10396 += 1, R10397 += 1 };
  s0 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s0 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s0 -> s6 [65, 65] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s7 [65, 65] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s0 -> s2 [66, 65535] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s1 [91, 107] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s0 -> s8 [108, 108] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s0 -> s1 [109, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s1 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s1 -> s1 [0, 65535] { R10469 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s4 [65, 65] { R10469 += 1, R10397 += 1 };
  s1 -> s5 [65, 65] { R10469 += 1, R10397 += 1 };
  s1 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s1 -> s1 [66, 65535] { R10469 += 1, R10397 += 1 };
  s1 -> s1 [91, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s2 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s2 -> s2 [0, 64] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s2 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s2 -> s6 [65, 65] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s7 [65, 65] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s2 -> s2 [66, 65535] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s1 [91, 107] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s2 -> s8 [108, 108] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s2 -> s1 [109, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s3 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s3 -> s2 [0, 64] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535] { R10469 += 1, R10396 += 1, R10397 += 1 };
  s3 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s3 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s3 -> s6 [65, 65] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s7 [65, 65] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s3 -> s2 [66, 65535] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s1 [91, 107] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s3 -> s8 [108, 108] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s3 -> s1 [109, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s4 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s4 -> s35 [0, 65535] { R10469 += 1 };
  s4 -> s4 [0, 65535] { R10469 += 1, R10397 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s4 [91, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s5 -> s5 [0, 65535] { R10469 += 1 };
  s5 -> s34 [0, 65535];
  s7 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s7 -> s7 [0, 65535] { R10469 += 1, R10397 += 1, R6618 += 1, R6619 += 1 };
  s7 -> s4 [91, 107] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s7 -> s10 [108, 108] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s7 -> s4 [109, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s8 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s8 -> s8 [0, 64] { R10469 += 1, R10397 += 1 };
  s8 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s8 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s8 -> s9 [65, 65] { R10469 += 1, R10397 += 1 };
  s8 -> s10 [65, 65] { R10469 += 1, R10397 += 1 };
  s8 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s8 -> s8 [66, 65535] { R10469 += 1, R10397 += 1 };
  s8 -> s1 [91, 110] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s8 -> s11 [111, 111] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s8 -> s1 [112, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s10 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s10 -> s10 [0, 65535] { R10469 += 1, R10397 += 1 };
  s10 -> s4 [91, 110] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s10 -> s13 [111, 111] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s10 -> s4 [112, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s11 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s11 -> s11 [0, 64] { R10469 += 1, R10397 += 1 };
  s11 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s11 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s11 -> s12 [65, 65] { R10469 += 1, R10397 += 1 };
  s11 -> s13 [65, 65] { R10469 += 1, R10397 += 1 };
  s11 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s11 -> s11 [66, 65535] { R10469 += 1, R10397 += 1 };
  s11 -> s1 [91, 98] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s11 -> s14 [99, 99] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s11 -> s1 [100, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s13 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s13 -> s13 [0, 65535] { R10469 += 1, R10397 += 1 };
  s13 -> s4 [91, 98] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s13 -> s18 [99, 99] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s13 -> s4 [100, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s14 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s14 -> s14 [0, 64] { R10469 += 1, R10397 += 1 };
  s14 -> s15 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s14 -> s16 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s14 -> s17 [65, 65] { R10469 += 1, R10397 += 1 };
  s14 -> s18 [65, 65] { R10469 += 1, R10397 += 1 };
  s14 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s14 -> s14 [66, 65535] { R10469 += 1, R10397 += 1 };
  s14 -> s1 [91, 96] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s14 -> s19 [97, 97] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s14 -> s1 [98, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s16 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s16 -> s16 [0, 65535] { R10469 += 1, R10397 += 1 };
  s16 -> s4 [91, 107] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s16 -> s21 [108, 108] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s16 -> s4 [109, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s18 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s18 -> s18 [0, 65535] { R10469 += 1, R10397 += 1 };
  s18 -> s4 [91, 96] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s18 -> s16 [97, 97] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s18 -> s4 [98, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s19 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s19 -> s19 [0, 64] { R10469 += 1, R10397 += 1 };
  s19 -> s15 [65, 65] { R10469 += 1, R10397 += 1 };
  s19 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s19 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s19 -> s16 [65, 65] { R10469 += 1, R10397 += 1 };
  s19 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s19 -> s19 [66, 65535] { R10469 += 1, R10397 += 1 };
  s19 -> s1 [91, 107] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s19 -> s20 [108, 108] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s19 -> s1 [109, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s20 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s20 -> s20 [0, 64] { R10469 += 1, R10397 += 1 };
  s20 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s20 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s20 -> s21 [65, 65] { R10469 += 1, R10397 += 1 };
  s20 -> s22 [65, 65] { R10469 += 1, R10397 += 1 };
  s20 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s20 -> s20 [66, 65535] { R10469 += 1, R10397 += 1 };
  s20 -> s1 [91, 103] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s20 -> s23 [104, 104] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s20 -> s1 [105, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s21 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s21 -> s21 [0, 65535] { R10469 += 1, R10397 += 1 };
  s21 -> s4 [91, 103] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s21 -> s24 [104, 104] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s21 -> s4 [105, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s23 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s23 -> s23 [0, 64] { R10469 += 1, R10397 += 1 };
  s23 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s23 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s23 -> s24 [65, 65] { R10469 += 1, R10397 += 1 };
  s23 -> s25 [65, 65] { R10469 += 1, R10397 += 1 };
  s23 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s23 -> s23 [66, 65535] { R10469 += 1, R10397 += 1 };
  s23 -> s1 [91, 110] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s23 -> s26 [111, 111] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s23 -> s1 [112, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s24 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s24 -> s24 [0, 65535] { R10469 += 1, R10397 += 1 };
  s24 -> s4 [91, 110] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s24 -> s28 [111, 111] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s24 -> s4 [112, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s26 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s26 -> s26 [0, 64] { R10469 += 1, R10397 += 1 };
  s26 -> s27 [65, 65] { R10469 += 1, R10397 += 1 };
  s26 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s26 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s26 -> s28 [65, 65] { R10469 += 1, R10397 += 1 };
  s26 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s26 -> s26 [66, 65535] { R10469 += 1, R10397 += 1 };
  s26 -> s1 [91, 114] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s26 -> s29 [115, 115] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s26 -> s1 [116, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s28 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s28 -> s28 [0, 65535] { R10469 += 1, R10397 += 1 };
  s28 -> s4 [91, 114] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s28 -> s30 [115, 115] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s28 -> s4 [116, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s29 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s29 -> s29 [0, 64] { R10469 += 1, R10397 += 1 };
  s29 -> s30 [65, 65] { R10469 += 1, R10397 += 1 };
  s29 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s29 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s29 -> s31 [65, 65] { R10469 += 1, R10397 += 1 };
  s29 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s29 -> s29 [66, 65535] { R10469 += 1, R10397 += 1 };
  s29 -> s1 [91, 115] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s29 -> s32 [116, 116] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s29 -> s1 [117, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s30 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s30 -> s30 [0, 65535] { R10469 += 1, R10397 += 1 };
  s30 -> s4 [91, 115] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s30 -> s33 [116, 116] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s30 -> s4 [117, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s32 -> s1 [0, 64] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s32 -> s4 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s32 -> s5 [65, 65] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s32 -> s1 [66, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s32 -> s1 [91, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s33 -> s4 [0, 80] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s33 -> s4 [91, 65535] { R10469 += 1, R10397 += 1, R6619 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10469 += 1 };
  s35 -> s34 [0, 65535];
  accepting s4, s34, s5, s1, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s2 [0, 64] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s0 [0, 65535] { R10470 += 1, R10471 += 1 };
  s0 -> s3 [0, 65535] { R10471 += 1, R10398 += 1, R10399 += 1 };
  s0 -> s4 [65, 65] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s5 [65, 65] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s6 [65, 65] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s7 [65, 65] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s1 [66, 65535] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s2 [66, 65535] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s1 [0, 64] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s1 [0, 65535] { R10471 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s7 [65, 65] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s1 [66, 65535] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s1 [0, 64] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s2 [0, 64] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s2 -> s4 [65, 65] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s5 [65, 65] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s2 -> s6 [65, 65] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s2 -> s7 [65, 65] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s1 [66, 65535] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s2 [66, 65535] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s1 [0, 64] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s2 [0, 64] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s3 [0, 65535] { R10471 += 1, R10398 += 1, R10399 += 1 };
  s3 -> s4 [65, 65] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s5 [65, 65] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s6 [65, 65] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s7 [65, 65] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s1 [66, 65535] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s2 [66, 65535] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s4 -> s9 [0, 65535] { R10471 += 1 };
  s6 -> s4 [0, 65535] { R10471 += 1, R10399 += 1, R8687 += 1, R8688 += 1 };
  s6 -> s6 [0, 65535] { R10471 += 1, R10399 += 1, R8686 += 1, R8687 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10471 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10471 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s2 [0, 64] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s0 -> s3 [0, 65535] { R10473 += 1, R10400 += 1, R10401 += 1 };
  s0 -> s0 [0, 65535] { R10472 += 1, R10473 += 1 };
  s0 -> s4 [65, 65] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s5 [65, 65] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s0 -> s6 [65, 65] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s0 -> s7 [65, 65] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s1 [66, 65535] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s2 [66, 65535] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s1 -> s1 [0, 64] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s1 -> s11 [0, 64] { R10473 += 1, R10401 += 1 };
  s1 -> s8 [65, 65] { R10473 += 1, R10401 += 1 };
  s1 -> s12 [65, 65] { R10473 += 1, R10401 += 1 };
  s1 -> s4 [65, 65] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s1 -> s7 [65, 65] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s1 -> s1 [66, 65535] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s1 -> s11 [66, 65535] { R10473 += 1, R10401 += 1 };
  s2 -> s1 [0, 64] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s2 [0, 64] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s2 -> s4 [65, 65] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s5 [65, 65] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s2 -> s6 [65, 65] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s2 -> s7 [65, 65] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s1 [66, 65535] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s2 [66, 65535] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s3 -> s1 [0, 64] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s3 -> s2 [0, 64] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s3 -> s3 [0, 65535] { R10473 += 1, R10400 += 1, R10401 += 1 };
  s3 -> s4 [65, 65] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s3 -> s5 [65, 65] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s3 -> s6 [65, 65] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s3 -> s7 [65, 65] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s3 -> s1 [66, 65535] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s3 -> s2 [66, 65535] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s6 -> s6 [0, 65535] { R10473 += 1, R10401 += 1, R10064 += 1, R10065 += 1 };
  s6 -> s7 [0, 65535] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s7 -> s8 [0, 65535] { R10473 += 1, R10401 += 1 };
  s7 -> s7 [0, 65535] { R10473 += 1, R10401 += 1, R10065 += 1, R10066 += 1 };
  s8 -> s8 [0, 65535] { R10473 += 1, R10401 += 1 };
  s8 -> s9 [0, 65535] { R10473 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10473 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R10473 += 1, R10401 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10473 += 1 };
  s11 -> s8 [65, 65] { R10473 += 1, R10401 += 1 };
  s11 -> s12 [65, 65] { R10473 += 1, R10401 += 1 };
  s11 -> s11 [66, 65535] { R10473 += 1, R10401 += 1 };
  s12 -> s12 [0, 65535] { R10473 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10475 += 1, R10403 += 1 };
  s0 -> s0 [0, 65535] { R10474 += 1, R10475 += 1 };
  s0 -> s2 [0, 65535] { R10475 += 1, R10402 += 1, R10403 += 1 };
  s0 -> s3 [65, 65] { R10475 += 1, R10403 += 1 };
  s0 -> s4 [65, 65] { R10475 += 1, R10403 += 1 };
  s0 -> s1 [66, 65535] { R10475 += 1, R10403 += 1 };
  s1 -> s1 [0, 64] { R10475 += 1, R10403 += 1 };
  s1 -> s1 [0, 65535] { R10475 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10475 += 1, R10403 += 1 };
  s1 -> s4 [65, 65] { R10475 += 1, R10403 += 1 };
  s1 -> s1 [66, 65535] { R10475 += 1, R10403 += 1 };
  s2 -> s1 [0, 64] { R10475 += 1, R10403 += 1 };
  s2 -> s2 [0, 65535] { R10475 += 1, R10402 += 1, R10403 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10475 += 1, R10403 += 1 };
  s2 -> s4 [65, 65] { R10475 += 1, R10403 += 1 };
  s2 -> s1 [66, 65535] { R10475 += 1, R10403 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10475 += 1, R10403 += 1 };
  s3 -> s6 [0, 65535] { R10475 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10475 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10475 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s0 -> s2 [0, 64] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s0 -> s0 [0, 65535] { R10476 += 1, R10477 += 1 };
  s0 -> s3 [0, 65535] { R10477 += 1, R10404 += 1, R10405 += 1 };
  s0 -> s4 [65, 65] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s0 -> s5 [65, 65] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s0 -> s6 [65, 65] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s0 -> s7 [65, 65] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s0 -> s2 [66, 79] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s0 -> s1 [66, 65535] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s0 -> s8 [80, 80] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s0 -> s2 [81, 65535] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s1 -> s1 [0, 64] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s1 -> s2 [0, 64] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s1 -> s4 [65, 65] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s1 -> s5 [65, 65] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s1 -> s6 [65, 65] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s1 -> s7 [65, 65] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s1 -> s2 [66, 79] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s1 -> s1 [66, 65535] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s1 -> s8 [80, 80] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s1 -> s2 [81, 65535] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s2 -> s2 [0, 64] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s2 -> s4 [65, 65] { R10477 += 1, R10405 += 1 };
  s2 -> s5 [65, 65] { R10477 += 1, R10405 += 1 };
  s2 -> s2 [66, 79] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s2 -> s2 [66, 65535] { R10477 += 1, R10405 += 1 };
  s2 -> s8 [80, 80] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s2 -> s2 [81, 65535] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s3 -> s1 [0, 64] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s3 -> s2 [0, 64] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s3 -> s3 [0, 65535] { R10477 += 1, R10404 += 1, R10405 += 1 };
  s3 -> s4 [65, 65] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s3 -> s5 [65, 65] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s3 -> s6 [65, 65] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s3 -> s7 [65, 65] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s3 -> s2 [66, 79] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s3 -> s1 [66, 65535] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s3 -> s8 [80, 80] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s3 -> s2 [81, 65535] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s4 -> s4 [0, 79] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s4 -> s4 [0, 65535] { R10477 += 1, R10405 += 1 };
  s4 -> s11 [80, 80] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s4 -> s4 [81, 65535] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s6 -> s4 [0, 79] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s6 -> s6 [0, 65535] { R10477 += 1, R10405 += 1, R10342 += 1, R10343 += 1 };
  s6 -> s11 [80, 80] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s6 -> s4 [81, 65535] { R10477 += 1, R10405 += 1, R10343 += 1, R10344 += 1 };
  s8 -> s8 [0, 64] { R10477 += 1, R10405 += 1 };
  s8 -> s8 [0, 65535] { R10477 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R10477 += 1, R10405 += 1 };
  s8 -> s11 [65, 65] { R10477 += 1, R10405 += 1 };
  s8 -> s8 [66, 65535] { R10477 += 1, R10405 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10477 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10477 += 1, R10405 += 1 };
  s11 -> s12 [0, 65535] { R10477 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10477 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R10371 && R6 = R10477 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R10371 && R58 = 0 && R59 = R10371 && R60 = 0 && R61 = R10371 && R62 = 0 && R63 = R10477 && R64 = 0 && R65 = R10477 && R66 = 0 && R67 = R10477 && R86 = 0 && R87 = 0 && R10348 = 0 && R10349 = R10371 && R10350 = 0 && R10351 = R10371 && R10352 = 0 && R10353 = R10371 && R10354 = 0 && R10355 = R10371 && R10356 = 0 && R10357 = R10371 && R10358 = 0 && R10359 = R10371 && R10360 = 0 && R10361 = R10371 && R10362 = 0 && R10363 = R10371 && R10364 = 0 && R10365 = R10371 && R10366 = 0 && R10367 = R10371 && R10368 = 0 && R10369 = R10371 && R10370 = 0 && R10372 = 0 && R10373 = R10477 && R10374 = 0 && R10375 = R10477 && R10376 = 0 && R10377 = R10477 && R10378 = 0 && R10379 = R10477 && R10380 = 0 && R10381 = R10477 && R10382 = 0 && R10383 = R10477 && R10386 = 0 && R10387 = 0 && R10396 = 0 && R10397 = 0 && R10398 = 0 && R10399 = 0 && R10400 = 0 && R10401 = 0 && R10404 = 0 && R10405 = 0 && R10406 = 10 && R10407 = R10477 && R10408 = 10 && R10409 = R10477 && R10410 = 10 && R10411 = R10477 && R10412 = 10 && R10413 = R10477 && R10414 = 10 && R10415 = R10477 && R10416 = 10 && R10417 = R10477 && R10418 = 10 && R10419 = R10477 && R10420 = 10 && R10421 = R10477 && R10422 = 10 && R10423 = R10477 && R10424 = 10 && R10425 = R10477 && R10426 = 10 && R10427 = R10477 && R10428 = 10 && R10429 = R10477 && R10430 = 10 && R10431 = R10477 && R10432 = 10 && R10433 = R10477 && R10434 = 10 && R10435 = R10477 && R10436 = 10 && R10437 = R10477 && R10438 = 10 && R10439 = R10477 && R10440 = 10 && R10441 = R10477 && R10442 = 10 && R10443 = R10477 && R10444 = 10 && R10445 = R10477 && R10446 = 10 && R10447 = R10477 && R10448 = 10 && R10449 = R10477 && R10450 = 10 && R10451 = R10477 && R10452 = 10 && R10453 = R10477 && R10454 = 10 && R10455 = R10477 && R10456 = 10 && R10457 = R10477 && R10458 = 10 && R10459 = R10477 && R10460 = 10 && R10461 = R10477 && R10462 = 10 && R10463 = R10477 && R10464 = 10 && R10465 = R10477 && R10466 = 10 && R10467 = R10477 && R10468 = 10 && R10469 = R10477 && R10470 = 10 && R10471 = R10477 && R10472 = 10 && R10473 = R10477 && R10474 = 10 && R10475 = R10477 && R10476 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R8691 + R8688 + R10347 + R10344 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R10371 && 9 < R10477 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R6620 + R6618 = 0 && R6621 + R6619 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R8689 + R8686 = 0 && R8690 + R8687 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R6620 + R6618 != 0 || R409 + R408 + -1*R6621 + -1*R6619 = 0 || R409 + R408 < 1) && (R8689 + R8686 != 0 || R409 + R408 + -1*R8690 + -1*R8687 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R10384 = 0 && R10385 = 0)) && (R34 = 0 || (R10388 = 0 && R10389 = 0)) && (R34 = 0 || (R10390 = 0 && R10391 = 0)) && (R34 = 0 || (R10392 = 0 && R10393 = 0)) && (R34 = 0 || (R10394 = 0 && R10395 = 0)) && (R34 = 0 || (R10402 = 0 && R10403 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R6620 + R6618 = 0 || R409 + R408 < 1) && (R8689 + R8686 = 0 || R409 + R408 < 1) && (R10069 + R10066 = 0 || (R10067 + R10064 = 0 && R10068 + R10065 = 0)) && (R10069 + R10066 = 0 || (R10345 + R10342 = 0 && R10346 + R10343 = 0));
// End of Parikh automata intersection problem
