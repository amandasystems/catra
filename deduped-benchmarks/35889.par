// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6618, R6619, R6620, R6621, R6622, R6623, R6624, R6625, R6626, R6627, R6628, R6629, R6630, R6631, R6632, R6633, R67, R68, R69, R6906, R6907, R6908, R6909, R6910, R6911, R6912, R6913, R6914, R6915, R6916, R6917, R6918, R6919, R6920, R6921, R6922, R6923, R6924, R6925, R6926, R6927, R6928, R6929, R6930, R6931, R6932, R6933, R6934, R6935, R6936, R6937, R6938, R6939, R6940, R6941, R6942, R6943, R6944, R6945, R6946, R6947, R6948, R6949, R6950, R6951, R6952, R6953, R6954, R6955, R6956, R6957, R6958, R6959, R6960, R6961, R6962, R6963, R6964, R6965, R6966, R6967, R6968, R6969, R6970, R6971, R6972, R6973, R6974, R6975, R6976, R6977, R6978, R6979, R6980, R6981, R6982, R6983, R6984, R6985, R6986, R6987, R6988, R6989, R6990, R6991, R6992, R6993, R6994, R6995, R6996, R6997, R6998, R6999, R7, R7000, R7001, R7002, R7003, R7004, R7005, R7006, R7007, R7008, R7009, R7010, R7011, R7012, R7013, R7014, R7015, R7016, R7017, R7018, R7019, R7020, R7021, R7022, R7023, R7024, R7025, R7026, R7027, R7028, R7029, R7030, R7031, R7032, R7033, R7034, R7035, R7036, R7037, R7038, R7039, R7040, R7041, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R6936 += 1, R6937 += 1 };
  s0 -> s1 [0, 65535] { R6937 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6937 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R6939 += 1 };
  s0 -> s0 [0, 65535] { R6938 += 1, R6939 += 1 };
  s0 -> s2 [0, 65535] { R6939 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R6939 += 1 };
  s0 -> s1 [66, 65535] { R6939 += 1 };
  s1 -> s1 [0, 64] { R6939 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R6939 += 1 };
  s1 -> s1 [66, 65535] { R6939 += 1 };
  s2 -> s1 [0, 64] { R6939 += 1 };
  s2 -> s2 [0, 65535] { R6939 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R6939 += 1 };
  s2 -> s1 [66, 65535] { R6939 += 1 };
  s3 -> s3 [0, 65535] { R6939 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R6940 += 1, R6941 += 1 };
  s0 -> s1 [0, 65535] { R6941 += 1, R69 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R6941 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6941 += 1, R69 += 1, R27 += 1 };
  s1 -> s4 [0, 65535] { R6941 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6941 += 1, R69 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R6941 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6941 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R6943 += 1 };
  s0 -> s0 [0, 65535] { R6942 += 1, R6943 += 1 };
  s1 -> s1 [0, 65535] { R6943 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R6944 += 1, R6945 += 1 };
  s0 -> s1 [0, 65535] { R6945 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R6945 += 1, R85 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R6945 += 1, R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R6945 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6945 += 1, R85 += 1, R28 += 1 };
  s2 -> s4 [0, 65535] { R6945 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6945 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R6946 += 1, R6947 += 1 };
  s0 -> s1 [0, 65535] { R6947 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [108, 108] { R6947 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R6947 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R6947 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R6947 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R6947 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R6947 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R6947 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R6947 += 1, R87 += 1 };
  s6 -> s14 [108, 108] { R6947 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R6947 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R6947 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R6947 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R6947 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R6947 += 1, R87 += 1 };
  s12 -> s12 [0, 65535] { R6947 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R6947 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R6947 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R6947 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R6947 += 1, R87 += 1 };
  s18 -> s13 [0, 65535];
  s18 -> s18 [0, 65535] { R6947 += 1 };
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R6971 += 1 };
  s0 -> s0 [0, 65535] { R6970 += 1, R6971 += 1 };
  s0 -> s1 [45, 45] { R6971 += 1 };
  s0 -> s2 [46, 46] { R6971 += 1 };
  s0 -> s1 [48, 62] { R6971 += 1 };
  s0 -> s3 [65, 65] { R6971 += 1 };
  s0 -> s1 [66, 65535] { R6971 += 1 };
  s1 -> s1 [0, 43] { R6971 += 1 };
  s1 -> s1 [45, 45] { R6971 += 1 };
  s1 -> s2 [46, 46] { R6971 += 1 };
  s1 -> s1 [48, 62] { R6971 += 1 };
  s1 -> s3 [65, 65] { R6971 += 1 };
  s1 -> s1 [66, 65535] { R6971 += 1 };
  s2 -> s1 [0, 43] { R6971 += 1 };
  s2 -> s1 [45, 45] { R6971 += 1 };
  s2 -> s2 [46, 46] { R6971 += 1 };
  s2 -> s1 [48, 62] { R6971 += 1 };
  s2 -> s3 [65, 65] { R6971 += 1 };
  s2 -> s1 [66, 114] { R6971 += 1 };
  s2 -> s8 [115, 115] { R6971 += 1 };
  s2 -> s1 [116, 65535] { R6971 += 1 };
  s3 -> s3 [0, 43] { R6971 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R6971 += 1 };
  s3 -> s4 [46, 46] { R6971 += 1 };
  s3 -> s3 [48, 62] { R6971 += 1 };
  s3 -> s3 [65, 65535] { R6971 += 1 };
  s4 -> s3 [0, 43] { R6971 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R6971 += 1 };
  s4 -> s4 [46, 46] { R6971 += 1 };
  s4 -> s3 [48, 62] { R6971 += 1 };
  s4 -> s3 [65, 114] { R6971 += 1 };
  s4 -> s5 [115, 115] { R6971 += 1 };
  s4 -> s3 [116, 65535] { R6971 += 1 };
  s5 -> s3 [0, 43] { R6971 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R6971 += 1 };
  s5 -> s4 [46, 46] { R6971 += 1 };
  s5 -> s3 [48, 62] { R6971 += 1 };
  s5 -> s3 [65, 110] { R6971 += 1 };
  s5 -> s6 [111, 111] { R6971 += 1 };
  s5 -> s3 [112, 65535] { R6971 += 1 };
  s6 -> s3 [0, 43] { R6971 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R6971 += 1 };
  s6 -> s4 [46, 46] { R6971 += 1 };
  s6 -> s3 [48, 62] { R6971 += 1 };
  s6 -> s3 [65, 98] { R6971 += 1 };
  s6 -> s7 [99, 99] { R6971 += 1 };
  s6 -> s3 [100, 65535] { R6971 += 1 };
  s7 -> s3 [0, 43] { R6971 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R6971 += 1 };
  s7 -> s4 [46, 46] { R6971 += 1 };
  s7 -> s3 [48, 62] { R6971 += 1 };
  s7 -> s3 [65, 106] { R6971 += 1 };
  s7 -> s3 [108, 65535] { R6971 += 1 };
  s8 -> s1 [0, 43] { R6971 += 1 };
  s8 -> s1 [45, 45] { R6971 += 1 };
  s8 -> s2 [46, 46] { R6971 += 1 };
  s8 -> s1 [48, 62] { R6971 += 1 };
  s8 -> s3 [65, 65] { R6971 += 1 };
  s8 -> s1 [66, 110] { R6971 += 1 };
  s8 -> s9 [111, 111] { R6971 += 1 };
  s8 -> s1 [112, 65535] { R6971 += 1 };
  s9 -> s1 [0, 43] { R6971 += 1 };
  s9 -> s1 [45, 45] { R6971 += 1 };
  s9 -> s2 [46, 46] { R6971 += 1 };
  s9 -> s1 [48, 62] { R6971 += 1 };
  s9 -> s3 [65, 65] { R6971 += 1 };
  s9 -> s1 [66, 98] { R6971 += 1 };
  s9 -> s10 [99, 99] { R6971 += 1 };
  s9 -> s1 [100, 65535] { R6971 += 1 };
  s10 -> s1 [0, 43] { R6971 += 1 };
  s10 -> s1 [45, 45] { R6971 += 1 };
  s10 -> s2 [46, 46] { R6971 += 1 };
  s10 -> s1 [48, 62] { R6971 += 1 };
  s10 -> s3 [65, 65] { R6971 += 1 };
  s10 -> s1 [66, 106] { R6971 += 1 };
  s10 -> s1 [108, 65535] { R6971 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R6973 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R6972 += 1, R6973 += 1 };
  s1 -> s1 [0, 65535] { R6973 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R6975 += 1 };
  s0 -> s2 [0, 65535] { R6975 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R6974 += 1, R6975 += 1 };
  s0 -> s3 [58, 58] { R6975 += 1 };
  s0 -> s1 [59, 65535] { R6975 += 1 };
  s1 -> s1 [0, 57] { R6975 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R6975 += 1 };
  s1 -> s1 [59, 65535] { R6975 += 1 };
  s2 -> s1 [0, 57] { R6975 += 1 };
  s2 -> s2 [0, 65535] { R6975 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R6975 += 1 };
  s2 -> s1 [59, 65535] { R6975 += 1 };
  s3 -> s3 [0, 65535] { R6975 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R6977 += 1 };
  s0 -> s0 [0, 65535] { R6976 += 1, R6977 += 1 };
  s0 -> s2 [0, 65535] { R6977 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R6977 += 1 };
  s0 -> s1 [44, 65535] { R6977 += 1 };
  s1 -> s1 [0, 42] { R6977 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R6977 += 1 };
  s1 -> s1 [44, 65535] { R6977 += 1 };
  s2 -> s1 [0, 42] { R6977 += 1 };
  s2 -> s2 [0, 65535] { R6977 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R6977 += 1 };
  s2 -> s1 [44, 65535] { R6977 += 1 };
  s3 -> s3 [0, 65535] { R6977 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R6979 += 1 };
  s0 -> s0 [0, 65535] { R6978 += 1, R6979 += 1 };
  s0 -> s2 [0, 65535] { R6979 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R6979 += 1 };
  s0 -> s1 [66, 65535] { R6979 += 1 };
  s1 -> s1 [0, 64] { R6979 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R6979 += 1 };
  s1 -> s1 [66, 65535] { R6979 += 1 };
  s2 -> s1 [0, 64] { R6979 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6979 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R6979 += 1 };
  s2 -> s1 [66, 65535] { R6979 += 1 };
  s3 -> s3 [0, 65535] { R6979 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R6981 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R6981 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R6980 += 1, R6981 += 1 };
  s0 -> s3 [91, 91] { R6981 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R6981 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R6981 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6981 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R6981 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R6981 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R6981 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R6981 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R6981 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6981 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6983 += 1, R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R6983 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R6982 += 1, R6983 += 1 };
  s1 -> s1 [0, 65535] { R6983 += 1, R40 += 1, R41 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6983 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R6983 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6983 += 1, R41 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R6983 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R6984 += 1, R6985 += 1 };
  s0 -> s1 [0, 65535] { R6985 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R6985 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6985 += 1, R57 += 1, R31 += 1 };
  s1 -> s4 [0, 65535] { R6985 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6985 += 1, R57 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R6985 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6985 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R6987 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R6986 += 1, R6987 += 1 };
  s0 -> s2 [0, 65535] { R6987 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R6987 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R6987 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R6987 += 1 };
  s1 -> s1 [0, 65535] { R6987 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R6987 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6987 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R6987 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R6987 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R6987 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6987 += 1 };
  s3 -> s5 [111, 111] { R6987 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R6987 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R6987 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6987 += 1 };
  s5 -> s6 [99, 99] { R6987 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R6987 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R6987 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6987 += 1 };
  s6 -> s7 [97, 97] { R6987 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R6987 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R6987 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R6987 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R6987 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R6987 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R6987 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R6987 += 1 };
  s8 -> s9 [104, 104] { R6987 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R6987 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R6987 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R6987 += 1 };
  s9 -> s10 [111, 111] { R6987 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R6987 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R6987 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R6987 += 1 };
  s10 -> s11 [115, 115] { R6987 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R6987 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R6987 += 1, R59 += 1 };
  s11 -> s11 [0, 65535] { R6987 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R6987 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R6987 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R6987 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R6987 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R6989 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R6989 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R6988 += 1, R6989 += 1 };
  s1 -> s1 [0, 65535] { R6989 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R6989 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6989 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R6989 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6989 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R6991 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R6990 += 1, R6991 += 1 };
  s0 -> s2 [0, 65535] { R6991 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R6991 += 1, R75 += 1, R33 += 1 };
  s1 -> s4 [0, 65535] { R6991 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6991 += 1, R75 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R6991 += 1, R74 += 1, R75 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6991 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R6992 += 1, R6993 += 1 };
  s0 -> s1 [0, 65535] { R6993 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6993 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R6995 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R6994 += 1, R6995 += 1 };
  s0 -> s2 [0, 65535] { R6995 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R6995 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R6995 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R6995 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R6995 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6995 += 1 };
  s1 -> s3 [43, 43] { R6995 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R6995 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R6995 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R6995 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6995 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R6995 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R6995 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R6995 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6995 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6995 += 1 };
  s4 -> s4 [0, 65535] { R6995 += 1, R77 += 1, R42 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6995 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R6997 += 1, R6913 += 1 };
  s0 -> s0 [0, 65535] { R6996 += 1, R6997 += 1 };
  s0 -> s2 [0, 65535] { R6997 += 1, R6912 += 1, R6913 += 1 };
  s0 -> s1 [66, 65535] { R6997 += 1, R6913 += 1 };
  s1 -> s1 [0, 64] { R6997 += 1, R6913 += 1 };
  s1 -> s1 [0, 65535] { R6997 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R6997 += 1, R6913 += 1 };
  s2 -> s1 [0, 64] { R6997 += 1, R6913 += 1 };
  s2 -> s2 [0, 65535] { R6997 += 1, R6912 += 1, R6913 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R6997 += 1, R6913 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R6999 += 1, R6914 += 1, R6915 += 1 };
  s0 -> s0 [0, 65535] { R6998 += 1, R6999 += 1 };
  s0 -> s2 [0, 65535] { R6999 += 1, R6915 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6999 += 1, R6914 += 1, R6915 += 1 };
  s1 -> s2 [0, 65535] { R6999 += 1, R6915 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6999 += 1 };
  s2 -> s2 [0, 65535] { R6999 += 1, R6915 += 1, R32 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6999 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R7001 += 1, R6917 += 1 };
  s0 -> s0 [0, 65535] { R7000 += 1, R7001 += 1 };
  s0 -> s2 [0, 65535] { R7001 += 1, R6916 += 1, R6917 += 1 };
  s0 -> s1 [80, 65535] { R7001 += 1, R6917 += 1 };
  s1 -> s1 [0, 65] { R7001 += 1, R6917 += 1 };
  s1 -> s1 [0, 65535] { R7001 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R7001 += 1, R6917 += 1 };
  s2 -> s1 [0, 65] { R7001 += 1, R6917 += 1 };
  s2 -> s2 [0, 65535] { R7001 += 1, R6916 += 1, R6917 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R7001 += 1, R6917 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R7002 += 1, R7003 += 1 };
  s0 -> s1 [0, 65535] { R7003 += 1, R6918 += 1, R6919 += 1 };
  s0 -> s2 [0, 65535] { R7003 += 1, R6919 += 1, R409 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7003 += 1, R6918 += 1, R6919 += 1 };
  s1 -> s2 [0, 65535] { R7003 += 1, R6919 += 1, R409 += 1 };
  s2 -> s3 [0, 65535] { R7003 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7003 += 1, R6919 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R7003 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R7005 += 1, R6921 += 1 };
  s0 -> s0 [0, 65535] { R7004 += 1, R7005 += 1 };
  s0 -> s2 [0, 65535] { R7005 += 1, R6920 += 1, R6921 += 1 };
  s0 -> s3 [0, 65535] { R7005 += 1, R6921 += 1, R411 += 1 };
  s0 -> s1 [81, 65535] { R7005 += 1, R6921 += 1 };
  s1 -> s1 [0, 79] { R7005 += 1, R6921 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7005 += 1 };
  s1 -> s1 [81, 65535] { R7005 += 1, R6921 += 1 };
  s2 -> s1 [0, 79] { R7005 += 1, R6921 += 1 };
  s2 -> s2 [0, 65535] { R7005 += 1, R6920 += 1, R6921 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7005 += 1, R6921 += 1, R411 += 1 };
  s2 -> s1 [81, 65535] { R7005 += 1, R6921 += 1 };
  s3 -> s1 [0, 79] { R7005 += 1, R6921 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7005 += 1 };
  s3 -> s3 [0, 65535] { R7005 += 1, R6921 += 1, R411 += 1 };
  s3 -> s1 [81, 65535] { R7005 += 1, R6921 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7005 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R7007 += 1, R6923 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R7007 += 1, R6923 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R7006 += 1, R7007 += 1 };
  s0 -> s3 [0, 65535] { R7007 += 1, R6922 += 1, R6923 += 1 };
  s0 -> s1 [81, 65535] { R7007 += 1, R6923 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R7007 += 1, R6923 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R7007 += 1, R6923 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7007 += 1 };
  s1 -> s1 [81, 65535] { R7007 += 1, R6923 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R7007 += 1, R6923 += 1, R415 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7007 += 1 };
  s2 -> s2 [0, 65535] { R7007 += 1, R6923 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [81, 65535] { R7007 += 1, R6923 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R7007 += 1, R6923 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7007 += 1, R6923 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R7007 += 1, R6922 += 1, R6923 += 1 };
  s3 -> s1 [81, 65535] { R7007 += 1, R6923 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7007 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R7009 += 1, R6925 += 1, R420 += 1, R421 += 1 };
  s0 -> s2 [0, 65535] { R7009 += 1, R6925 += 1, R419 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R7008 += 1, R7009 += 1 };
  s0 -> s3 [0, 65535] { R7009 += 1, R6924 += 1, R6925 += 1 };
  s1 -> s5 [0, 65535] { R7009 += 1 };
  s1 -> s1 [0, 65535] { R7009 += 1, R6925 += 1, R420 += 1, R421 += 1 };
  s1 -> s6 [0, 65535] { R7009 += 1, R6925 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7009 += 1 };
  s2 -> s1 [0, 65535] { R7009 += 1, R6925 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R7009 += 1, R6925 += 1, R419 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7009 += 1, R6925 += 1, R420 += 1, R421 += 1 };
  s3 -> s2 [0, 65535] { R7009 += 1, R6925 += 1, R419 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7009 += 1, R6924 += 1, R6925 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7009 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7009 += 1 };
  s6 -> s6 [0, 65535] { R7009 += 1, R6925 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R7011 += 1, R6927 += 1, R6621 += 1 };
  s0 -> s2 [0, 65535] { R7011 += 1, R6926 += 1, R6927 += 1 };
  s0 -> s1 [0, 65535] { R7011 += 1, R6927 += 1 };
  s0 -> s0 [0, 65535] { R7010 += 1, R7011 += 1 };
  s0 -> s1 [91, 65535] { R7011 += 1, R6927 += 1, R6621 += 1 };
  s1 -> s1 [0, 80] { R7011 += 1, R6927 += 1, R6621 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7011 += 1, R6927 += 1 };
  s1 -> s4 [0, 65535] { R7011 += 1 };
  s1 -> s1 [91, 65535] { R7011 += 1, R6927 += 1, R6621 += 1 };
  s2 -> s1 [0, 80] { R7011 += 1, R6927 += 1, R6621 += 1 };
  s2 -> s2 [0, 65535] { R7011 += 1, R6926 += 1, R6927 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7011 += 1, R6927 += 1 };
  s2 -> s1 [91, 65535] { R7011 += 1, R6927 += 1, R6621 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7011 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R7013 += 1, R6929 += 1, R6626 += 1, R6627 += 1 };
  s0 -> s2 [0, 65535] { R7013 += 1, R6929 += 1, R6625 += 1, R6626 += 1 };
  s0 -> s3 [0, 65535] { R7013 += 1, R6928 += 1, R6929 += 1 };
  s0 -> s0 [0, 65535] { R7012 += 1, R7013 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7013 += 1, R6929 += 1, R6626 += 1, R6627 += 1 };
  s1 -> s5 [0, 65535] { R7013 += 1 };
  s1 -> s6 [0, 65535] { R7013 += 1, R6929 += 1 };
  s2 -> s1 [0, 65535] { R7013 += 1, R6929 += 1, R6626 += 1, R6627 += 1 };
  s2 -> s2 [0, 65535] { R7013 += 1, R6929 += 1, R6625 += 1, R6626 += 1 };
  s2 -> s5 [0, 65535] { R7013 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7013 += 1, R6929 += 1, R6626 += 1, R6627 += 1 };
  s3 -> s2 [0, 65535] { R7013 += 1, R6929 += 1, R6625 += 1, R6626 += 1 };
  s3 -> s3 [0, 65535] { R7013 += 1, R6928 += 1, R6929 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7013 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7013 += 1 };
  s6 -> s6 [0, 65535] { R7013 += 1, R6929 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R7015 += 1, R6931 += 1, R6632 += 1, R6633 += 1 };
  s0 -> s2 [0, 65535] { R7015 += 1, R6931 += 1, R6631 += 1, R6632 += 1 };
  s0 -> s3 [0, 65535] { R7015 += 1, R6930 += 1, R6931 += 1 };
  s0 -> s0 [0, 65535] { R7014 += 1, R7015 += 1 };
  s1 -> s6 [0, 65535] { R7015 += 1, R6931 += 1 };
  s1 -> s1 [0, 65535] { R7015 += 1, R6931 += 1, R6632 += 1, R6633 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7015 += 1 };
  s2 -> s1 [0, 65535] { R7015 += 1, R6931 += 1, R6632 += 1, R6633 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7015 += 1 };
  s2 -> s2 [0, 65535] { R7015 += 1, R6931 += 1, R6631 += 1, R6632 += 1 };
  s3 -> s1 [0, 65535] { R7015 += 1, R6931 += 1, R6632 += 1, R6633 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7015 += 1, R6931 += 1, R6631 += 1, R6632 += 1 };
  s3 -> s3 [0, 65535] { R7015 += 1, R6930 += 1, R6931 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7015 += 1 };
  s6 -> s6 [0, 65535] { R7015 += 1, R6931 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7015 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R7017 += 1, R6932 += 1, R6933 += 1 };
  s0 -> s2 [0, 65535] { R7017 += 1, R6933 += 1 };
  s0 -> s0 [0, 65535] { R7016 += 1, R7017 += 1 };
  s1 -> s1 [0, 65535] { R7017 += 1, R6932 += 1, R6933 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7017 += 1, R6933 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7017 += 1 };
  s2 -> s2 [0, 65535] { R7017 += 1, R6933 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7017 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R7019 += 1, R6934 += 1, R6935 += 1 };
  s0 -> s2 [0, 65535] { R7019 += 1, R6935 += 1 };
  s0 -> s0 [0, 65535] { R7018 += 1, R7019 += 1 };
  s1 -> s1 [0, 65535] { R7019 += 1, R6934 += 1, R6935 += 1 };
  s1 -> s2 [0, 65535] { R7019 += 1, R6935 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7019 += 1 };
  s2 -> s2 [0, 65535] { R7019 += 1, R6935 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7019 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R7020 += 1, R7021 += 1 };
  s0 -> s1 [0, 65535] { R7021 += 1, R6948 += 1, R6949 += 1 };
  s0 -> s2 [0, 65535] { R7021 += 1, R6949 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7021 += 1, R6948 += 1, R6949 += 1 };
  s1 -> s2 [0, 65535] { R7021 += 1, R6949 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7021 += 1, R6949 += 1, R34 += 1 };
  s2 -> s4 [0, 65535] { R7021 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7021 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R7023 += 1, R6951 += 1 };
  s0 -> s2 [0, 65535] { R7023 += 1, R6950 += 1, R6951 += 1 };
  s0 -> s0 [0, 65535] { R7022 += 1, R7023 += 1 };
  s0 -> s3 [65, 65] { R7023 += 1, R6951 += 1 };
  s0 -> s4 [65, 65] { R7023 += 1, R6951 += 1 };
  s0 -> s5 [80, 80] { R7023 += 1, R6951 += 1 };
  s0 -> s1 [81, 65535] { R7023 += 1, R6951 += 1 };
  s1 -> s1 [0, 64] { R7023 += 1, R6951 += 1 };
  s1 -> s3 [65, 65] { R7023 += 1, R6951 += 1 };
  s1 -> s4 [65, 65] { R7023 += 1, R6951 += 1 };
  s1 -> s5 [80, 80] { R7023 += 1, R6951 += 1 };
  s1 -> s1 [81, 65535] { R7023 += 1, R6951 += 1 };
  s2 -> s1 [0, 64] { R7023 += 1, R6951 += 1 };
  s2 -> s2 [0, 65535] { R7023 += 1, R6950 += 1, R6951 += 1 };
  s2 -> s3 [65, 65] { R7023 += 1, R6951 += 1 };
  s2 -> s4 [65, 65] { R7023 += 1, R6951 += 1 };
  s2 -> s5 [80, 80] { R7023 += 1, R6951 += 1 };
  s2 -> s1 [81, 65535] { R7023 += 1, R6951 += 1 };
  s3 -> s3 [0, 65] { R7023 += 1, R6951 += 1 };
  s3 -> s7 [80, 80] { R7023 += 1, R6951 += 1 };
  s3 -> s3 [81, 65535] { R7023 += 1, R6951 += 1 };
  s5 -> s5 [0, 64] { R7023 += 1, R6951 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7023 += 1 };
  s5 -> s7 [65, 65] { R7023 += 1, R6951 += 1 };
  s5 -> s8 [65, 65] { R7023 += 1, R6951 += 1 };
  s5 -> s5 [80, 65535] { R7023 += 1, R6951 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R7023 += 1, R6951 += 1 };
  s7 -> s7 [0, 65535] { R7023 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R7023 += 1, R6951 += 1 };
  s8 -> s8 [0, 65535] { R7023 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R7025 += 1, R6953 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R7025 += 1, R6952 += 1, R6953 += 1 };
  s0 -> s0 [0, 65535] { R7024 += 1, R7025 += 1 };
  s0 -> s3 [65, 65] { R7025 += 1, R6953 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R7025 += 1, R6953 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R7025 += 1, R6953 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R7025 += 1, R6953 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7025 += 1 };
  s1 -> s3 [65, 65] { R7025 += 1, R6953 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R7025 += 1, R6953 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R7025 += 1, R6953 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R7025 += 1, R6953 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7025 += 1, R6952 += 1, R6953 += 1 };
  s2 -> s3 [65, 65] { R7025 += 1, R6953 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R7025 += 1, R6953 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R7025 += 1, R6953 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R7025 += 1, R6953 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7025 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7025 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7025 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R7027 += 1, R6955 += 1, R410 += 1 };
  s0 -> s0 [0, 65535] { R7026 += 1, R7027 += 1 };
  s0 -> s2 [0, 65535] { R7027 += 1, R6954 += 1, R6955 += 1 };
  s0 -> s3 [65, 65] { R7027 += 1, R6955 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R7027 += 1, R6955 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R7027 += 1, R6955 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R7027 += 1, R6955 += 1, R410 += 1 };
  s1 -> s1 [0, 65535] { R7027 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7027 += 1, R6955 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R7027 += 1, R6955 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R7027 += 1, R6955 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R7027 += 1, R6955 += 1, R410 += 1 };
  s2 -> s2 [0, 65535] { R7027 += 1, R6954 += 1, R6955 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7027 += 1, R6955 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R7027 += 1, R6955 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R7027 += 1, R6955 += 1, R410 += 1 };
  s3 -> s6 [0, 65535] { R7027 += 1 };
  s3 -> s3 [0, 65535] { R7027 += 1, R6955 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7027 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7027 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R7028 += 1, R7029 += 1 };
  s0 -> s2 [0, 65535] { R7029 += 1, R6956 += 1, R6957 += 1 };
  s0 -> s3 [65, 65] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R7029 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R7029 += 1, R6956 += 1, R6957 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R7029 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7029 += 1 };
  s4 -> s4 [0, 65535] { R7029 += 1, R6957 += 1, R412 += 1, R413 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7029 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R7030 += 1, R7031 += 1 };
  s0 -> s2 [0, 65535] { R7031 += 1, R6958 += 1, R6959 += 1 };
  s0 -> s3 [65, 65] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 65535] { R7031 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7031 += 1, R6958 += 1, R6959 += 1 };
  s2 -> s3 [65, 65] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7031 += 1, R6959 += 1, R416 += 1, R417 += 1 };
  s3 -> s6 [0, 65535] { R7031 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7031 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7031 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s0 -> s3 [0, 65535] { R7033 += 1, R6960 += 1, R6961 += 1 };
  s0 -> s0 [0, 65535] { R7032 += 1, R7033 += 1 };
  s0 -> s4 [65, 65] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s5 [65, 65] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s0 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s0 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s0 -> s1 [66, 65535] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s2 [91, 107] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s0 -> s8 [108, 108] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s0 -> s2 [109, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s1 -> s1 [0, 64] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s1 -> s4 [65, 65] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s5 [65, 65] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s1 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s1 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s1 -> s1 [66, 65535] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s2 [91, 107] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s1 -> s8 [108, 108] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s1 -> s2 [109, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s2 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s2 -> s35 [0, 65535];
  s2 -> s2 [0, 65535] { R7033 += 1 };
  s2 -> s6 [65, 65] { R7033 += 1, R6961 += 1 };
  s2 -> s7 [65, 65] { R7033 += 1, R6961 += 1 };
  s2 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s2 -> s2 [66, 65535] { R7033 += 1, R6961 += 1 };
  s2 -> s2 [91, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s3 -> s1 [0, 64] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535] { R7033 += 1, R6960 += 1, R6961 += 1 };
  s3 -> s4 [65, 65] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s5 [65, 65] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s3 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s3 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s3 -> s1 [66, 65535] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s2 [91, 107] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s3 -> s8 [108, 108] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s3 -> s2 [109, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s4 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s4 -> s4 [0, 65535] { R7033 += 1, R6961 += 1, R6618 += 1, R6619 += 1 };
  s4 -> s7 [91, 107] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s4 -> s10 [108, 108] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s4 -> s7 [109, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s6 -> s6 [0, 65535] { R7033 += 1 };
  s6 -> s35 [0, 65535];
  s7 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s7 -> s34 [0, 65535] { R7033 += 1 };
  s7 -> s35 [0, 65535];
  s7 -> s7 [0, 65535] { R7033 += 1, R6961 += 1 };
  s7 -> s7 [91, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s8 -> s8 [0, 64] { R7033 += 1, R6961 += 1 };
  s8 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s8 -> s9 [65, 65] { R7033 += 1, R6961 += 1 };
  s8 -> s10 [65, 65] { R7033 += 1, R6961 += 1 };
  s8 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s8 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s8 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s8 -> s8 [66, 65535] { R7033 += 1, R6961 += 1 };
  s8 -> s2 [91, 110] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s8 -> s11 [111, 111] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s8 -> s2 [112, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s10 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s10 -> s10 [0, 65535] { R7033 += 1, R6961 += 1 };
  s10 -> s7 [91, 110] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s10 -> s12 [111, 111] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s10 -> s7 [112, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s11 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s11 -> s11 [0, 64] { R7033 += 1, R6961 += 1 };
  s11 -> s12 [65, 65] { R7033 += 1, R6961 += 1 };
  s11 -> s13 [65, 65] { R7033 += 1, R6961 += 1 };
  s11 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s11 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s11 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s11 -> s11 [66, 65535] { R7033 += 1, R6961 += 1 };
  s11 -> s2 [91, 98] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s11 -> s14 [99, 99] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s11 -> s2 [100, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s12 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s12 -> s12 [0, 65535] { R7033 += 1, R6961 += 1 };
  s12 -> s7 [91, 98] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s12 -> s15 [99, 99] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s12 -> s7 [100, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s14 -> s14 [0, 64] { R7033 += 1, R6961 += 1 };
  s14 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s14 -> s15 [65, 65] { R7033 += 1, R6961 += 1 };
  s14 -> s16 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s14 -> s17 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s14 -> s18 [65, 65] { R7033 += 1, R6961 += 1 };
  s14 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s14 -> s14 [66, 65535] { R7033 += 1, R6961 += 1 };
  s14 -> s2 [91, 96] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s14 -> s19 [97, 97] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s14 -> s2 [98, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s15 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s15 -> s15 [0, 65535] { R7033 += 1, R6961 += 1 };
  s15 -> s7 [91, 96] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s15 -> s17 [97, 97] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s15 -> s7 [98, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s17 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s17 -> s17 [0, 65535] { R7033 += 1, R6961 += 1 };
  s17 -> s7 [91, 107] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s17 -> s22 [108, 108] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s17 -> s7 [109, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s19 -> s19 [0, 64] { R7033 += 1, R6961 += 1 };
  s19 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s19 -> s16 [65, 65] { R7033 += 1, R6961 += 1 };
  s19 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s19 -> s17 [65, 65] { R7033 += 1, R6961 += 1 };
  s19 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s19 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s19 -> s19 [66, 65535] { R7033 += 1, R6961 += 1 };
  s19 -> s2 [91, 107] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s19 -> s20 [108, 108] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s19 -> s2 [109, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s20 -> s20 [0, 64] { R7033 += 1, R6961 += 1 };
  s20 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s20 -> s21 [65, 65] { R7033 += 1, R6961 += 1 };
  s20 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s20 -> s22 [65, 65] { R7033 += 1, R6961 += 1 };
  s20 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s20 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s20 -> s20 [66, 65535] { R7033 += 1, R6961 += 1 };
  s20 -> s2 [91, 103] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s20 -> s23 [104, 104] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s20 -> s2 [105, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s22 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s22 -> s22 [0, 65535] { R7033 += 1, R6961 += 1 };
  s22 -> s7 [91, 103] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s22 -> s24 [104, 104] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s22 -> s7 [105, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s23 -> s23 [0, 64] { R7033 += 1, R6961 += 1 };
  s23 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s23 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s23 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s23 -> s24 [65, 65] { R7033 += 1, R6961 += 1 };
  s23 -> s25 [65, 65] { R7033 += 1, R6961 += 1 };
  s23 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s23 -> s23 [66, 65535] { R7033 += 1, R6961 += 1 };
  s23 -> s2 [91, 110] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s23 -> s26 [111, 111] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s23 -> s2 [112, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s24 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s24 -> s24 [0, 65535] { R7033 += 1, R6961 += 1 };
  s24 -> s7 [91, 110] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s24 -> s28 [111, 111] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s24 -> s7 [112, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s26 -> s26 [0, 64] { R7033 += 1, R6961 += 1 };
  s26 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s26 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s26 -> s27 [65, 65] { R7033 += 1, R6961 += 1 };
  s26 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s26 -> s28 [65, 65] { R7033 += 1, R6961 += 1 };
  s26 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s26 -> s26 [66, 65535] { R7033 += 1, R6961 += 1 };
  s26 -> s2 [91, 114] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s26 -> s29 [115, 115] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s26 -> s2 [116, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s28 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s28 -> s28 [0, 65535] { R7033 += 1, R6961 += 1 };
  s28 -> s7 [91, 114] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s28 -> s31 [115, 115] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s28 -> s7 [116, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s29 -> s29 [0, 64] { R7033 += 1, R6961 += 1 };
  s29 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s29 -> s30 [65, 65] { R7033 += 1, R6961 += 1 };
  s29 -> s31 [65, 65] { R7033 += 1, R6961 += 1 };
  s29 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s29 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s29 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s29 -> s29 [66, 65535] { R7033 += 1, R6961 += 1 };
  s29 -> s2 [91, 115] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s29 -> s32 [116, 116] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s29 -> s2 [117, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s31 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s31 -> s31 [0, 65535] { R7033 += 1, R6961 += 1 };
  s31 -> s7 [91, 115] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s31 -> s33 [116, 116] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s31 -> s7 [117, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s32 -> s2 [0, 64] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s32 -> s6 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s32 -> s7 [65, 65] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s32 -> s2 [66, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s32 -> s2 [91, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s33 -> s7 [0, 80] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s33 -> s7 [91, 65535] { R7033 += 1, R6961 += 1, R6619 += 1 };
  s34 -> s34 [0, 65535] { R7033 += 1 };
  s34 -> s35 [0, 65535];
  s35 -> s35 [0, 65535];
  accepting s34, s2, s6, s7, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s0 -> s0 [0, 65535] { R7034 += 1, R7035 += 1 };
  s0 -> s2 [0, 65535] { R7035 += 1, R6962 += 1, R6963 += 1 };
  s0 -> s3 [65, 65] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s0 -> s4 [65, 65] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s0 -> s1 [66, 65535] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s1 -> s1 [0, 64] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s1 -> s1 [0, 65535] { R7035 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s1 -> s4 [65, 65] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s1 -> s1 [66, 65535] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s2 -> s1 [0, 64] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s2 -> s2 [0, 65535] { R7035 += 1, R6962 += 1, R6963 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s2 -> s4 [65, 65] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s2 -> s1 [66, 65535] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s3 -> s3 [0, 65535] { R7035 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7035 += 1, R6963 += 1, R6622 += 1, R6623 += 1 };
  s4 -> s5 [0, 65535] { R7035 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7035 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s0 -> s0 [0, 65535] { R7036 += 1, R7037 += 1 };
  s0 -> s2 [0, 65535] { R7037 += 1, R6964 += 1, R6965 += 1 };
  s0 -> s3 [65, 65] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s0 -> s4 [65, 65] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s0 -> s1 [66, 65535] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s1 -> s1 [0, 64] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7037 += 1 };
  s1 -> s3 [65, 65] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s1 -> s4 [65, 65] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s1 -> s1 [66, 65535] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s2 -> s1 [0, 64] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7037 += 1, R6964 += 1, R6965 += 1 };
  s2 -> s3 [65, 65] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s2 -> s4 [65, 65] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s2 -> s1 [66, 65535] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s3 -> s3 [0, 65535] { R7037 += 1, R6965 += 1, R6628 += 1, R6629 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7037 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7037 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7037 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R7039 += 1, R6967 += 1 };
  s0 -> s2 [0, 65535] { R7039 += 1, R6966 += 1, R6967 += 1 };
  s0 -> s0 [0, 65535] { R7038 += 1, R7039 += 1 };
  s0 -> s3 [65, 65] { R7039 += 1, R6967 += 1 };
  s0 -> s4 [65, 65] { R7039 += 1, R6967 += 1 };
  s0 -> s1 [66, 65535] { R7039 += 1, R6967 += 1 };
  s1 -> s1 [0, 64] { R7039 += 1, R6967 += 1 };
  s1 -> s1 [0, 65535] { R7039 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7039 += 1, R6967 += 1 };
  s1 -> s4 [65, 65] { R7039 += 1, R6967 += 1 };
  s1 -> s1 [66, 65535] { R7039 += 1, R6967 += 1 };
  s2 -> s1 [0, 64] { R7039 += 1, R6967 += 1 };
  s2 -> s2 [0, 65535] { R7039 += 1, R6966 += 1, R6967 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7039 += 1, R6967 += 1 };
  s2 -> s4 [65, 65] { R7039 += 1, R6967 += 1 };
  s2 -> s1 [66, 65535] { R7039 += 1, R6967 += 1 };
  s3 -> s3 [0, 65535] { R7039 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7039 += 1, R6967 += 1 };
  s4 -> s5 [0, 65535] { R7039 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7039 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s0 -> s2 [0, 64] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s0 -> s3 [0, 65535] { R7041 += 1, R6968 += 1, R6969 += 1 };
  s0 -> s0 [0, 65535] { R7040 += 1, R7041 += 1 };
  s0 -> s4 [65, 65] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s0 -> s5 [65, 65] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s0 -> s6 [65, 65] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s0 -> s7 [65, 65] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s0 -> s1 [66, 79] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s0 -> s2 [66, 65535] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s0 -> s8 [80, 80] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s0 -> s1 [81, 65535] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s1 -> s1 [0, 64] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s1 -> s5 [65, 65] { R7041 += 1, R6969 += 1 };
  s1 -> s7 [65, 65] { R7041 += 1, R6969 += 1 };
  s1 -> s1 [66, 79] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s1 -> s1 [66, 65535] { R7041 += 1, R6969 += 1 };
  s1 -> s8 [80, 80] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s1 -> s1 [81, 65535] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s2 -> s1 [0, 64] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s2 -> s2 [0, 64] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s2 -> s4 [65, 65] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s2 -> s5 [65, 65] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s2 -> s6 [65, 65] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s2 -> s7 [65, 65] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s2 -> s1 [66, 79] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s2 -> s2 [66, 65535] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s2 -> s8 [80, 80] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s2 -> s1 [81, 65535] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s3 -> s1 [0, 64] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s3 -> s2 [0, 64] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s3 -> s3 [0, 65535] { R7041 += 1, R6968 += 1, R6969 += 1 };
  s3 -> s4 [65, 65] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s3 -> s5 [65, 65] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s3 -> s6 [65, 65] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s3 -> s7 [65, 65] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s3 -> s1 [66, 79] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s3 -> s2 [66, 65535] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s3 -> s8 [80, 80] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s3 -> s1 [81, 65535] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s4 -> s7 [0, 79] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s4 -> s4 [0, 65535] { R7041 += 1, R6969 += 1, R6906 += 1, R6907 += 1 };
  s4 -> s10 [80, 80] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s4 -> s7 [81, 65535] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s7 -> s7 [0, 79] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s7 -> s7 [0, 65535] { R7041 += 1, R6969 += 1 };
  s7 -> s10 [80, 80] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s7 -> s7 [81, 65535] { R7041 += 1, R6969 += 1, R6907 += 1, R6908 += 1 };
  s8 -> s8 [0, 64] { R7041 += 1, R6969 += 1 };
  s8 -> s8 [0, 65535] { R7041 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R7041 += 1, R6969 += 1 };
  s8 -> s11 [65, 65] { R7041 += 1, R6969 += 1 };
  s8 -> s8 [66, 65535] { R7041 += 1, R6969 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R7041 += 1 };
  s10 -> s10 [0, 65535] { R7041 += 1, R6969 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7041 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7041 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R6935 && R6 = R7041 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R6935 && R58 = 0 && R59 = R6935 && R60 = 0 && R61 = R6935 && R62 = 0 && R63 = R7041 && R64 = 0 && R65 = R7041 && R66 = 0 && R67 = R7041 && R86 = 0 && R87 = 0 && R6912 = 0 && R6913 = R6935 && R6914 = 0 && R6915 = R6935 && R6916 = 0 && R6917 = R6935 && R6918 = 0 && R6919 = R6935 && R6920 = 0 && R6921 = R6935 && R6922 = 0 && R6923 = R6935 && R6924 = 0 && R6925 = R6935 && R6926 = 0 && R6927 = R6935 && R6928 = 0 && R6929 = R6935 && R6930 = 0 && R6931 = R6935 && R6932 = 0 && R6933 = R6935 && R6934 = 0 && R6936 = 0 && R6937 = R7041 && R6938 = 0 && R6939 = R7041 && R6940 = 0 && R6941 = R7041 && R6942 = 0 && R6943 = R7041 && R6944 = 0 && R6945 = R7041 && R6946 = 0 && R6947 = R7041 && R6950 = 0 && R6951 = 0 && R6960 = 0 && R6961 = 0 && R6968 = 0 && R6969 = 0 && R6970 = 10 && R6971 = R7041 && R6972 = 10 && R6973 = R7041 && R6974 = 10 && R6975 = R7041 && R6976 = 10 && R6977 = R7041 && R6978 = 10 && R6979 = R7041 && R6980 = 10 && R6981 = R7041 && R6982 = 10 && R6983 = R7041 && R6984 = 10 && R6985 = R7041 && R6986 = 10 && R6987 = R7041 && R6988 = 10 && R6989 = R7041 && R6990 = 10 && R6991 = R7041 && R6992 = 10 && R6993 = R7041 && R6994 = 10 && R6995 = R7041 && R6996 = 10 && R6997 = R7041 && R6998 = 10 && R6999 = R7041 && R7000 = 10 && R7001 = R7041 && R7002 = 10 && R7003 = R7041 && R7004 = 10 && R7005 = R7041 && R7006 = 10 && R7007 = R7041 && R7008 = 10 && R7009 = R7041 && R7010 = 10 && R7011 = R7041 && R7012 = 10 && R7013 = R7041 && R7014 = 10 && R7015 = R7041 && R7016 = 10 && R7017 = R7041 && R7018 = 10 && R7019 = R7041 && R7020 = 10 && R7021 = R7041 && R7022 = 10 && R7023 = R7041 && R7024 = 10 && R7025 = R7041 && R7026 = 10 && R7027 = R7041 && R7028 = 10 && R7029 = R7041 && R7030 = 10 && R7031 = R7041 && R7032 = 10 && R7033 = R7041 && R7034 = 10 && R7035 = R7041 && R7036 = 10 && R7037 = R7041 && R7038 = 10 && R7039 = R7041 && R7040 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R6627 + R6624 + R6911 + R6908 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R6935 && 9 < R7041 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R6620 + R6618 = 0 && R6621 + R6619 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R6625 + R6622 = 0 && R6626 + R6623 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R6620 + R6618 != 0 || R409 + R408 + -1*R6621 + -1*R6619 = 0 || R409 + R408 < 1) && (R6625 + R6622 != 0 || R409 + R408 + -1*R6626 + -1*R6623 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R6948 = 0 && R6949 = 0)) && (R34 = 0 || (R6952 = 0 && R6953 = 0)) && (R34 = 0 || (R6954 = 0 && R6955 = 0)) && (R34 = 0 || (R6956 = 0 && R6957 = 0)) && (R34 = 0 || (R6958 = 0 && R6959 = 0)) && (R34 = 0 || (R6962 = 0 && R6963 = 0)) && (R34 = 0 || (R6964 = 0 && R6965 = 0)) && (R34 = 0 || (R6966 = 0 && R6967 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R6620 + R6618 = 0 || R409 + R408 < 1) && (R6625 + R6622 = 0 || R409 + R408 < 1) && (R6633 + R6630 = 0 || (R6631 + R6628 = 0 && R6632 + R6629 = 0)) && (R6633 + R6630 = 0 || (R6909 + R6906 = 0 && R6910 + R6907 = 0));
// End of Parikh automata intersection problem
