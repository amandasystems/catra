// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R43, R430, R431, R432, R433, R434, R435, R436, R437, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R846, R847, R848, R849, R85, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R86, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R87, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R877 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R876 += 1, R877 += 1 };
  s1 -> s1 [0, 65535] { R877 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R879 += 1 };
  s0 -> s0 [0, 65535] { R878 += 1, R879 += 1 };
  s0 -> s2 [0, 65535] { R879 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R879 += 1 };
  s0 -> s1 [66, 65535] { R879 += 1 };
  s1 -> s1 [0, 64] { R879 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R879 += 1 };
  s1 -> s1 [66, 65535] { R879 += 1 };
  s2 -> s1 [0, 64] { R879 += 1 };
  s2 -> s2 [0, 65535] { R879 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R879 += 1 };
  s2 -> s1 [66, 65535] { R879 += 1 };
  s3 -> s3 [0, 65535] { R879 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R881 += 1, R69 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R881 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R880 += 1, R881 += 1 };
  s1 -> s1 [0, 65535] { R881 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R881 += 1 };
  s2 -> s1 [0, 65535] { R881 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R881 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R881 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R882 += 1, R883 += 1 };
  s0 -> s1 [0, 65535] { R883 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R883 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R884 += 1, R885 += 1 };
  s0 -> s1 [0, 65535] { R885 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R885 += 1, R85 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R885 += 1, R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R885 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R885 += 1, R85 += 1, R28 += 1 };
  s2 -> s4 [0, 65535] { R885 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R885 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R887 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R886 += 1, R887 += 1 };
  s0 -> s2 [108, 108] { R887 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R887 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R887 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R887 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R887 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R887 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R887 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R887 += 1, R87 += 1 };
  s5 -> s14 [108, 108] { R887 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R887 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R887 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R887 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R887 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R887 += 1, R87 += 1 };
  s12 -> s12 [0, 65535] { R887 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R887 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R887 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R887 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R887 += 1, R87 += 1 };
  s18 -> s18 [0, 65535] { R887 += 1 };
  s18 -> s13 [0, 65535];
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R911 += 1 };
  s0 -> s0 [0, 65535] { R910 += 1, R911 += 1 };
  s0 -> s1 [45, 45] { R911 += 1 };
  s0 -> s2 [46, 46] { R911 += 1 };
  s0 -> s1 [48, 62] { R911 += 1 };
  s0 -> s3 [65, 65] { R911 += 1 };
  s0 -> s1 [66, 65535] { R911 += 1 };
  s1 -> s1 [0, 43] { R911 += 1 };
  s1 -> s1 [45, 45] { R911 += 1 };
  s1 -> s2 [46, 46] { R911 += 1 };
  s1 -> s1 [48, 62] { R911 += 1 };
  s1 -> s3 [65, 65] { R911 += 1 };
  s1 -> s1 [66, 65535] { R911 += 1 };
  s2 -> s1 [0, 43] { R911 += 1 };
  s2 -> s1 [45, 45] { R911 += 1 };
  s2 -> s2 [46, 46] { R911 += 1 };
  s2 -> s1 [48, 62] { R911 += 1 };
  s2 -> s3 [65, 65] { R911 += 1 };
  s2 -> s1 [66, 114] { R911 += 1 };
  s2 -> s8 [115, 115] { R911 += 1 };
  s2 -> s1 [116, 65535] { R911 += 1 };
  s3 -> s3 [0, 43] { R911 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R911 += 1 };
  s3 -> s4 [46, 46] { R911 += 1 };
  s3 -> s3 [48, 62] { R911 += 1 };
  s3 -> s3 [65, 65535] { R911 += 1 };
  s4 -> s3 [0, 43] { R911 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R911 += 1 };
  s4 -> s4 [46, 46] { R911 += 1 };
  s4 -> s3 [48, 62] { R911 += 1 };
  s4 -> s3 [65, 114] { R911 += 1 };
  s4 -> s5 [115, 115] { R911 += 1 };
  s4 -> s3 [116, 65535] { R911 += 1 };
  s5 -> s3 [0, 43] { R911 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R911 += 1 };
  s5 -> s4 [46, 46] { R911 += 1 };
  s5 -> s3 [48, 62] { R911 += 1 };
  s5 -> s3 [65, 110] { R911 += 1 };
  s5 -> s6 [111, 111] { R911 += 1 };
  s5 -> s3 [112, 65535] { R911 += 1 };
  s6 -> s3 [0, 43] { R911 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R911 += 1 };
  s6 -> s4 [46, 46] { R911 += 1 };
  s6 -> s3 [48, 62] { R911 += 1 };
  s6 -> s3 [65, 98] { R911 += 1 };
  s6 -> s7 [99, 99] { R911 += 1 };
  s6 -> s3 [100, 65535] { R911 += 1 };
  s7 -> s3 [0, 43] { R911 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R911 += 1 };
  s7 -> s4 [46, 46] { R911 += 1 };
  s7 -> s3 [48, 62] { R911 += 1 };
  s7 -> s3 [65, 106] { R911 += 1 };
  s7 -> s3 [108, 65535] { R911 += 1 };
  s8 -> s1 [0, 43] { R911 += 1 };
  s8 -> s1 [45, 45] { R911 += 1 };
  s8 -> s2 [46, 46] { R911 += 1 };
  s8 -> s1 [48, 62] { R911 += 1 };
  s8 -> s3 [65, 65] { R911 += 1 };
  s8 -> s1 [66, 110] { R911 += 1 };
  s8 -> s9 [111, 111] { R911 += 1 };
  s8 -> s1 [112, 65535] { R911 += 1 };
  s9 -> s1 [0, 43] { R911 += 1 };
  s9 -> s1 [45, 45] { R911 += 1 };
  s9 -> s2 [46, 46] { R911 += 1 };
  s9 -> s1 [48, 62] { R911 += 1 };
  s9 -> s3 [65, 65] { R911 += 1 };
  s9 -> s1 [66, 98] { R911 += 1 };
  s9 -> s10 [99, 99] { R911 += 1 };
  s9 -> s1 [100, 65535] { R911 += 1 };
  s10 -> s1 [0, 43] { R911 += 1 };
  s10 -> s1 [45, 45] { R911 += 1 };
  s10 -> s2 [46, 46] { R911 += 1 };
  s10 -> s1 [48, 62] { R911 += 1 };
  s10 -> s3 [65, 65] { R911 += 1 };
  s10 -> s1 [66, 106] { R911 += 1 };
  s10 -> s1 [108, 65535] { R911 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R912 += 1, R913 += 1 };
  s0 -> s1 [0, 65535] { R913 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R913 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R915 += 1 };
  s0 -> s0 [0, 65535] { R914 += 1, R915 += 1 };
  s0 -> s2 [0, 65535] { R915 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R915 += 1 };
  s0 -> s1 [59, 65535] { R915 += 1 };
  s1 -> s1 [0, 57] { R915 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R915 += 1 };
  s1 -> s1 [59, 65535] { R915 += 1 };
  s2 -> s1 [0, 57] { R915 += 1 };
  s2 -> s2 [0, 65535] { R915 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R915 += 1 };
  s2 -> s1 [59, 65535] { R915 += 1 };
  s3 -> s3 [0, 65535] { R915 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R917 += 1 };
  s0 -> s2 [0, 65535] { R917 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R916 += 1, R917 += 1 };
  s0 -> s3 [43, 43] { R917 += 1 };
  s0 -> s1 [44, 65535] { R917 += 1 };
  s1 -> s1 [0, 42] { R917 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R917 += 1 };
  s1 -> s1 [44, 65535] { R917 += 1 };
  s2 -> s1 [0, 42] { R917 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R917 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R917 += 1 };
  s2 -> s1 [44, 65535] { R917 += 1 };
  s3 -> s3 [0, 65535] { R917 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R919 += 1 };
  s0 -> s0 [0, 65535] { R918 += 1, R919 += 1 };
  s0 -> s2 [0, 65535] { R919 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R919 += 1 };
  s0 -> s1 [66, 65535] { R919 += 1 };
  s1 -> s1 [0, 64] { R919 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R919 += 1 };
  s1 -> s1 [66, 65535] { R919 += 1 };
  s2 -> s1 [0, 64] { R919 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R919 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R919 += 1 };
  s2 -> s1 [66, 65535] { R919 += 1 };
  s3 -> s3 [0, 65535] { R919 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R921 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R920 += 1, R921 += 1 };
  s0 -> s2 [0, 65535] { R921 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R921 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R921 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R921 += 1 };
  s1 -> s1 [0, 65535] { R921 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R921 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R921 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R921 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R921 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R921 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R921 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R923 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R922 += 1, R923 += 1 };
  s0 -> s2 [0, 65535] { R923 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R923 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R923 += 1 };
  s2 -> s1 [0, 65535] { R923 += 1, R41 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R923 += 1, R40 += 1, R41 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R923 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R924 += 1, R925 += 1 };
  s0 -> s1 [0, 65535] { R925 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R925 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535] { R925 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R925 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R925 += 1, R57 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R925 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R925 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R927 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R927 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R926 += 1, R927 += 1 };
  s0 -> s3 [108, 108] { R927 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R927 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R927 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R927 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R927 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R927 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R927 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R927 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R927 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R927 += 1 };
  s3 -> s5 [111, 111] { R927 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R927 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R927 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R927 += 1 };
  s5 -> s6 [99, 99] { R927 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R927 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R927 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R927 += 1 };
  s6 -> s7 [97, 97] { R927 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R927 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R927 += 1, R59 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R927 += 1 };
  s7 -> s8 [108, 108] { R927 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R927 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R927 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R927 += 1 };
  s8 -> s9 [104, 104] { R927 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R927 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R927 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R927 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R927 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R927 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R927 += 1, R59 += 1 };
  s10 -> s10 [0, 65535] { R927 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R927 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R927 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R927 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R927 += 1 };
  s11 -> s12 [116, 116] { R927 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R927 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R927 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R927 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R929 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R928 += 1, R929 += 1 };
  s0 -> s2 [0, 65535] { R929 += 1, R61 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R929 += 1, R60 += 1, R61 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R929 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R929 += 1 };
  s2 -> s2 [0, 65535] { R929 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R929 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R931 += 1, R75 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R931 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R930 += 1, R931 += 1 };
  s1 -> s1 [0, 65535] { R931 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R931 += 1 };
  s2 -> s1 [0, 65535] { R931 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R931 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R931 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R932 += 1, R933 += 1 };
  s0 -> s1 [0, 65535] { R933 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R933 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R935 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R935 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R934 += 1, R935 += 1 };
  s0 -> s3 [43, 43] { R935 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R935 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R935 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R935 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R935 += 1 };
  s1 -> s3 [43, 43] { R935 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R935 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R935 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R935 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R935 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R935 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R935 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R935 += 1, R77 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R935 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R935 += 1, R77 += 1, R42 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R935 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R935 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R937 += 1, R853 += 1 };
  s0 -> s0 [0, 65535] { R936 += 1, R937 += 1 };
  s0 -> s2 [0, 65535] { R937 += 1, R852 += 1, R853 += 1 };
  s0 -> s1 [66, 65535] { R937 += 1, R853 += 1 };
  s1 -> s1 [0, 64] { R937 += 1, R853 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R937 += 1 };
  s1 -> s1 [66, 65535] { R937 += 1, R853 += 1 };
  s2 -> s1 [0, 64] { R937 += 1, R853 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R937 += 1, R852 += 1, R853 += 1 };
  s2 -> s1 [66, 65535] { R937 += 1, R853 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R939 += 1, R854 += 1, R855 += 1 };
  s0 -> s2 [0, 65535] { R939 += 1, R855 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R938 += 1, R939 += 1 };
  s1 -> s1 [0, 65535] { R939 += 1, R854 += 1, R855 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R939 += 1, R855 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R939 += 1, R855 += 1, R32 += 1 };
  s2 -> s4 [0, 65535] { R939 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R939 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R941 += 1, R857 += 1 };
  s0 -> s2 [0, 65535] { R941 += 1, R856 += 1, R857 += 1 };
  s0 -> s0 [0, 65535] { R940 += 1, R941 += 1 };
  s0 -> s1 [80, 65535] { R941 += 1, R857 += 1 };
  s1 -> s1 [0, 65] { R941 += 1, R857 += 1 };
  s1 -> s1 [0, 65535] { R941 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R941 += 1, R857 += 1 };
  s2 -> s1 [0, 65] { R941 += 1, R857 += 1 };
  s2 -> s2 [0, 65535] { R941 += 1, R856 += 1, R857 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R941 += 1, R857 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R943 += 1, R858 += 1, R859 += 1 };
  s0 -> s0 [0, 65535] { R942 += 1, R943 += 1 };
  s0 -> s2 [0, 65535] { R943 += 1, R859 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R943 += 1, R858 += 1, R859 += 1 };
  s1 -> s2 [0, 65535] { R943 += 1, R859 += 1, R409 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R943 += 1 };
  s2 -> s2 [0, 65535] { R943 += 1, R859 += 1, R409 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R943 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R945 += 1, R861 += 1 };
  s0 -> s2 [0, 65535] { R945 += 1, R860 += 1, R861 += 1 };
  s0 -> s3 [0, 65535] { R945 += 1, R861 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R944 += 1, R945 += 1 };
  s0 -> s1 [81, 65535] { R945 += 1, R861 += 1 };
  s1 -> s1 [0, 79] { R945 += 1, R861 += 1 };
  s1 -> s1 [0, 65535] { R945 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R945 += 1, R861 += 1 };
  s2 -> s1 [0, 79] { R945 += 1, R861 += 1 };
  s2 -> s2 [0, 65535] { R945 += 1, R860 += 1, R861 += 1 };
  s2 -> s3 [0, 65535] { R945 += 1, R861 += 1, R411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R945 += 1, R861 += 1 };
  s3 -> s1 [0, 79] { R945 += 1, R861 += 1 };
  s3 -> s4 [0, 65535] { R945 += 1 };
  s3 -> s3 [0, 65535] { R945 += 1, R861 += 1, R411 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R945 += 1, R861 += 1 };
  s4 -> s4 [0, 65535] { R945 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R947 += 1, R863 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R947 += 1, R863 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R946 += 1, R947 += 1 };
  s0 -> s3 [0, 65535] { R947 += 1, R862 += 1, R863 += 1 };
  s0 -> s1 [81, 65535] { R947 += 1, R863 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R947 += 1, R863 += 1, R415 += 1 };
  s1 -> s5 [0, 65535] { R947 += 1 };
  s1 -> s1 [0, 65535] { R947 += 1, R863 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R947 += 1, R863 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R947 += 1, R863 += 1, R415 += 1 };
  s2 -> s5 [0, 65535] { R947 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R947 += 1, R863 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [81, 65535] { R947 += 1, R863 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R947 += 1, R863 += 1, R415 += 1 };
  s3 -> s2 [0, 65535] { R947 += 1, R863 += 1, R414 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R947 += 1, R862 += 1, R863 += 1 };
  s3 -> s1 [81, 65535] { R947 += 1, R863 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R947 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R949 += 1, R865 += 1, R420 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R948 += 1, R949 += 1 };
  s0 -> s2 [0, 65535] { R949 += 1, R865 += 1, R419 += 1, R420 += 1 };
  s0 -> s3 [0, 65535] { R949 += 1, R864 += 1, R865 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R949 += 1 };
  s1 -> s6 [0, 65535] { R949 += 1, R865 += 1 };
  s1 -> s1 [0, 65535] { R949 += 1, R865 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R949 += 1, R865 += 1, R419 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R949 += 1 };
  s2 -> s1 [0, 65535] { R949 += 1, R865 += 1, R420 += 1, R421 += 1 };
  s3 -> s1 [0, 65535] { R949 += 1, R865 += 1, R420 += 1, R421 += 1 };
  s3 -> s2 [0, 65535] { R949 += 1, R865 += 1, R419 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R949 += 1, R864 += 1, R865 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R949 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R949 += 1 };
  s6 -> s6 [0, 65535] { R949 += 1, R865 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s0 -> s0 [0, 65535] { R950 += 1, R951 += 1 };
  s0 -> s2 [0, 65535] { R951 += 1, R867 += 1, R424 += 1, R425 += 1 };
  s0 -> s3 [0, 65535] { R951 += 1, R866 += 1, R867 += 1 };
  s0 -> s1 [91, 107] { R951 += 1, R867 += 1, R425 += 1 };
  s0 -> s4 [108, 108] { R951 += 1, R867 += 1, R425 += 1 };
  s0 -> s1 [109, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s1 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R951 += 1 };
  s1 -> s1 [0, 65535] { R951 += 1, R867 += 1 };
  s1 -> s1 [91, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s2 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R951 += 1 };
  s2 -> s2 [0, 65535] { R951 += 1, R867 += 1, R424 += 1, R425 += 1 };
  s2 -> s1 [91, 107] { R951 += 1, R867 += 1, R425 += 1 };
  s2 -> s4 [108, 108] { R951 += 1, R867 += 1, R425 += 1 };
  s2 -> s1 [109, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s3 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R951 += 1, R867 += 1, R424 += 1, R425 += 1 };
  s3 -> s3 [0, 65535] { R951 += 1, R866 += 1, R867 += 1 };
  s3 -> s1 [91, 107] { R951 += 1, R867 += 1, R425 += 1 };
  s3 -> s4 [108, 108] { R951 += 1, R867 += 1, R425 += 1 };
  s3 -> s1 [109, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s4 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R951 += 1 };
  s4 -> s4 [0, 65535] { R951 += 1, R867 += 1 };
  s4 -> s1 [91, 110] { R951 += 1, R867 += 1, R425 += 1 };
  s4 -> s7 [111, 111] { R951 += 1, R867 += 1, R425 += 1 };
  s4 -> s1 [112, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R951 += 1 };
  s7 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s7 -> s7 [0, 65535] { R951 += 1, R867 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R951 += 1 };
  s7 -> s1 [91, 98] { R951 += 1, R867 += 1, R425 += 1 };
  s7 -> s8 [99, 99] { R951 += 1, R867 += 1, R425 += 1 };
  s7 -> s1 [100, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s8 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R951 += 1 };
  s8 -> s8 [0, 65535] { R951 += 1, R867 += 1 };
  s8 -> s1 [91, 96] { R951 += 1, R867 += 1, R425 += 1 };
  s8 -> s9 [97, 97] { R951 += 1, R867 += 1, R425 += 1 };
  s8 -> s1 [98, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s9 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R951 += 1, R867 += 1 };
  s9 -> s6 [0, 65535] { R951 += 1 };
  s9 -> s1 [91, 107] { R951 += 1, R867 += 1, R425 += 1 };
  s9 -> s10 [108, 108] { R951 += 1, R867 += 1, R425 += 1 };
  s9 -> s1 [109, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s10 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R951 += 1, R867 += 1 };
  s10 -> s6 [0, 65535] { R951 += 1 };
  s10 -> s1 [91, 103] { R951 += 1, R867 += 1, R425 += 1 };
  s10 -> s11 [104, 104] { R951 += 1, R867 += 1, R425 += 1 };
  s10 -> s1 [105, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s11 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s11 -> s11 [0, 65535] { R951 += 1, R867 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R951 += 1 };
  s11 -> s1 [91, 110] { R951 += 1, R867 += 1, R425 += 1 };
  s11 -> s12 [111, 111] { R951 += 1, R867 += 1, R425 += 1 };
  s11 -> s1 [112, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s12 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R951 += 1 };
  s12 -> s12 [0, 65535] { R951 += 1, R867 += 1 };
  s12 -> s1 [91, 114] { R951 += 1, R867 += 1, R425 += 1 };
  s12 -> s13 [115, 115] { R951 += 1, R867 += 1, R425 += 1 };
  s12 -> s1 [116, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s13 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R951 += 1 };
  s13 -> s13 [0, 65535] { R951 += 1, R867 += 1 };
  s13 -> s1 [91, 115] { R951 += 1, R867 += 1, R425 += 1 };
  s13 -> s14 [116, 116] { R951 += 1, R867 += 1, R425 += 1 };
  s13 -> s1 [117, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  s14 -> s1 [0, 80] { R951 += 1, R867 += 1, R425 += 1 };
  s14 -> s1 [91, 65535] { R951 += 1, R867 += 1, R425 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R953 += 1, R869 += 1, R429 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R953 += 1, R869 += 1, R430 += 1, R431 += 1 };
  s0 -> s3 [0, 65535] { R953 += 1, R868 += 1, R869 += 1 };
  s0 -> s0 [0, 65535] { R952 += 1, R953 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R953 += 1, R869 += 1, R429 += 1, R430 += 1 };
  s1 -> s5 [0, 65535] { R953 += 1 };
  s1 -> s2 [0, 65535] { R953 += 1, R869 += 1, R430 += 1, R431 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R953 += 1 };
  s2 -> s2 [0, 65535] { R953 += 1, R869 += 1, R430 += 1, R431 += 1 };
  s2 -> s6 [0, 65535] { R953 += 1, R869 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R953 += 1, R869 += 1, R429 += 1, R430 += 1 };
  s3 -> s2 [0, 65535] { R953 += 1, R869 += 1, R430 += 1, R431 += 1 };
  s3 -> s3 [0, 65535] { R953 += 1, R868 += 1, R869 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R953 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R953 += 1 };
  s6 -> s6 [0, 65535] { R953 += 1, R869 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R954 += 1, R955 += 1 };
  s0 -> s1 [0, 65535] { R955 += 1, R871 += 1, R435 += 1, R436 += 1 };
  s0 -> s2 [0, 65535] { R955 += 1, R871 += 1, R436 += 1, R437 += 1 };
  s0 -> s3 [0, 65535] { R955 += 1, R870 += 1, R871 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R955 += 1 };
  s1 -> s1 [0, 65535] { R955 += 1, R871 += 1, R435 += 1, R436 += 1 };
  s1 -> s2 [0, 65535] { R955 += 1, R871 += 1, R436 += 1, R437 += 1 };
  s2 -> s5 [0, 65535] { R955 += 1, R871 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R955 += 1 };
  s2 -> s2 [0, 65535] { R955 += 1, R871 += 1, R436 += 1, R437 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R955 += 1, R871 += 1, R435 += 1, R436 += 1 };
  s3 -> s2 [0, 65535] { R955 += 1, R871 += 1, R436 += 1, R437 += 1 };
  s3 -> s3 [0, 65535] { R955 += 1, R870 += 1, R871 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R955 += 1, R871 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R955 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R955 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s0 [0, 65535] { R956 += 1, R957 += 1 };
  s0 -> s1 [0, 65535] { R957 += 1, R873 += 1 };
  s0 -> s2 [0, 65535] { R957 += 1, R872 += 1, R873 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R957 += 1 };
  s1 -> s1 [0, 65535] { R957 += 1, R873 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R957 += 1, R873 += 1 };
  s2 -> s2 [0, 65535] { R957 += 1, R872 += 1, R873 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R957 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s0 [0, 65535] { R958 += 1, R959 += 1 };
  s0 -> s1 [0, 65535] { R959 += 1, R875 += 1, R850 += 1, R851 += 1 };
  s0 -> s2 [0, 65535] { R959 += 1, R875 += 1 };
  s0 -> s3 [0, 65535] { R959 += 1, R874 += 1, R875 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R959 += 1 };
  s1 -> s1 [0, 65535] { R959 += 1, R875 += 1, R850 += 1, R851 += 1 };
  s1 -> s2 [0, 65535] { R959 += 1, R875 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R959 += 1 };
  s2 -> s2 [0, 65535] { R959 += 1, R875 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R959 += 1, R875 += 1, R850 += 1, R851 += 1 };
  s3 -> s2 [0, 65535] { R959 += 1, R875 += 1 };
  s3 -> s3 [0, 65535] { R959 += 1, R874 += 1, R875 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R959 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R960 += 1, R961 += 1 };
  s0 -> s1 [0, 65535] { R961 += 1, R889 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R961 += 1, R888 += 1, R889 += 1 };
  s1 -> s4 [0, 65535] { R961 += 1 };
  s1 -> s1 [0, 65535] { R961 += 1, R889 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R961 += 1, R889 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R961 += 1, R888 += 1, R889 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R961 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R963 += 1, R891 += 1 };
  s0 -> s0 [0, 65535] { R962 += 1, R963 += 1 };
  s0 -> s2 [0, 65535] { R963 += 1, R890 += 1, R891 += 1 };
  s0 -> s3 [65, 65] { R963 += 1, R891 += 1 };
  s0 -> s4 [65, 65] { R963 += 1, R891 += 1 };
  s0 -> s5 [80, 80] { R963 += 1, R891 += 1 };
  s0 -> s1 [81, 65535] { R963 += 1, R891 += 1 };
  s1 -> s1 [0, 64] { R963 += 1, R891 += 1 };
  s1 -> s3 [65, 65] { R963 += 1, R891 += 1 };
  s1 -> s4 [65, 65] { R963 += 1, R891 += 1 };
  s1 -> s5 [80, 80] { R963 += 1, R891 += 1 };
  s1 -> s1 [81, 65535] { R963 += 1, R891 += 1 };
  s2 -> s1 [0, 64] { R963 += 1, R891 += 1 };
  s2 -> s2 [0, 65535] { R963 += 1, R890 += 1, R891 += 1 };
  s2 -> s3 [65, 65] { R963 += 1, R891 += 1 };
  s2 -> s4 [65, 65] { R963 += 1, R891 += 1 };
  s2 -> s5 [80, 80] { R963 += 1, R891 += 1 };
  s2 -> s1 [81, 65535] { R963 += 1, R891 += 1 };
  s3 -> s3 [0, 65] { R963 += 1, R891 += 1 };
  s3 -> s7 [80, 80] { R963 += 1, R891 += 1 };
  s3 -> s3 [81, 65535] { R963 += 1, R891 += 1 };
  s5 -> s5 [0, 64] { R963 += 1, R891 += 1 };
  s5 -> s5 [0, 65535] { R963 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R963 += 1, R891 += 1 };
  s5 -> s8 [65, 65] { R963 += 1, R891 += 1 };
  s5 -> s5 [80, 65535] { R963 += 1, R891 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R963 += 1, R891 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R963 += 1 };
  s7 -> s7 [80, 65535] { R963 += 1, R891 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R963 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R965 += 1, R893 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R965 += 1, R892 += 1, R893 += 1 };
  s0 -> s0 [0, 65535] { R964 += 1, R965 += 1 };
  s0 -> s3 [65, 65] { R965 += 1, R893 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R965 += 1, R893 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R965 += 1, R893 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R965 += 1, R893 += 1, R408 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R965 += 1 };
  s1 -> s3 [65, 65] { R965 += 1, R893 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R965 += 1, R893 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R965 += 1, R893 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R965 += 1, R893 += 1, R408 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R965 += 1, R892 += 1, R893 += 1 };
  s2 -> s3 [65, 65] { R965 += 1, R893 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R965 += 1, R893 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R965 += 1, R893 += 1, R408 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R965 += 1 };
  s4 -> s5 [0, 65535] { R965 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R965 += 1, R893 += 1, R408 += 1 };
  s5 -> s5 [0, 65535] { R965 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R967 += 1, R895 += 1, R410 += 1 };
  s0 -> s0 [0, 65535] { R966 += 1, R967 += 1 };
  s0 -> s2 [0, 65535] { R967 += 1, R894 += 1, R895 += 1 };
  s0 -> s3 [65, 65] { R967 += 1, R895 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R967 += 1, R895 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R967 += 1, R895 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R967 += 1, R895 += 1, R410 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R967 += 1 };
  s1 -> s3 [65, 65] { R967 += 1, R895 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R967 += 1, R895 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R967 += 1, R895 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R967 += 1, R895 += 1, R410 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R967 += 1, R894 += 1, R895 += 1 };
  s2 -> s3 [65, 65] { R967 += 1, R895 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R967 += 1, R895 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R967 += 1, R895 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R967 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R967 += 1 };
  s4 -> s4 [0, 65535] { R967 += 1, R895 += 1, R410 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R967 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R969 += 1, R896 += 1, R897 += 1 };
  s0 -> s0 [0, 65535] { R968 += 1, R969 += 1 };
  s0 -> s3 [65, 65] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R969 += 1 };
  s1 -> s3 [65, 65] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R969 += 1, R896 += 1, R897 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R969 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R969 += 1, R897 += 1, R412 += 1, R413 += 1 };
  s4 -> s5 [0, 65535] { R969 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R969 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R970 += 1, R971 += 1 };
  s0 -> s2 [0, 65535] { R971 += 1, R898 += 1, R899 += 1 };
  s0 -> s3 [65, 65] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 65535] { R971 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R971 += 1, R898 += 1, R899 += 1 };
  s2 -> s3 [65, 65] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s3 -> s3 [0, 65535] { R971 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R971 += 1, R899 += 1, R416 += 1, R417 += 1 };
  s4 -> s6 [0, 65535] { R971 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R971 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R973 += 1, R900 += 1, R901 += 1 };
  s0 -> s0 [0, 65535] { R972 += 1, R973 += 1 };
  s0 -> s3 [65, 65] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s0 -> s4 [65, 65] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s0 -> s1 [66, 65535] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [0, 64] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [0, 65535] { R973 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s1 -> s4 [65, 65] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s1 -> s1 [66, 65535] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [0, 64] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s2 -> s2 [0, 65535] { R973 += 1, R900 += 1, R901 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s2 -> s4 [65, 65] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [66, 65535] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s3 -> s6 [0, 65535] { R973 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R973 += 1, R901 += 1, R422 += 1, R423 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R973 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R973 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s0 -> s2 [0, 65535] { R975 += 1, R902 += 1, R903 += 1 };
  s0 -> s0 [0, 65535] { R974 += 1, R975 += 1 };
  s0 -> s3 [65, 65] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s0 -> s4 [65, 65] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s0 -> s1 [66, 65535] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s1 -> s1 [0, 64] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R975 += 1 };
  s1 -> s3 [65, 65] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s1 -> s4 [65, 65] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s1 -> s1 [66, 65535] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s2 -> s1 [0, 64] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R975 += 1, R902 += 1, R903 += 1 };
  s2 -> s3 [65, 65] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s2 -> s4 [65, 65] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s2 -> s1 [66, 65535] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R975 += 1 };
  s3 -> s3 [0, 65535] { R975 += 1, R903 += 1, R426 += 1, R427 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R975 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R975 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s0 -> s0 [0, 65535] { R976 += 1, R977 += 1 };
  s0 -> s2 [0, 65535] { R977 += 1, R904 += 1, R905 += 1 };
  s0 -> s3 [65, 65] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s0 -> s4 [65, 65] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s0 -> s1 [66, 65535] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s1 -> s1 [0, 64] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R977 += 1 };
  s1 -> s3 [65, 65] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s1 -> s4 [65, 65] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s1 -> s1 [66, 65535] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s2 -> s1 [0, 64] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R977 += 1, R904 += 1, R905 += 1 };
  s2 -> s3 [65, 65] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s2 -> s4 [65, 65] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s2 -> s1 [66, 65535] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s3 -> s3 [0, 65535] { R977 += 1, R905 += 1, R432 += 1, R433 += 1 };
  s3 -> s6 [0, 65535] { R977 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R977 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R977 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R979 += 1, R907 += 1 };
  s0 -> s0 [0, 65535] { R978 += 1, R979 += 1 };
  s0 -> s2 [0, 65535] { R979 += 1, R906 += 1, R907 += 1 };
  s0 -> s3 [65, 65] { R979 += 1, R907 += 1 };
  s0 -> s4 [65, 65] { R979 += 1, R907 += 1 };
  s0 -> s1 [66, 65535] { R979 += 1, R907 += 1 };
  s1 -> s1 [0, 64] { R979 += 1, R907 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R979 += 1 };
  s1 -> s3 [65, 65] { R979 += 1, R907 += 1 };
  s1 -> s4 [65, 65] { R979 += 1, R907 += 1 };
  s1 -> s1 [66, 65535] { R979 += 1, R907 += 1 };
  s2 -> s1 [0, 64] { R979 += 1, R907 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R979 += 1, R906 += 1, R907 += 1 };
  s2 -> s3 [65, 65] { R979 += 1, R907 += 1 };
  s2 -> s4 [65, 65] { R979 += 1, R907 += 1 };
  s2 -> s1 [66, 65535] { R979 += 1, R907 += 1 };
  s3 -> s3 [0, 65535] { R979 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R979 += 1, R907 += 1 };
  s4 -> s6 [0, 65535] { R979 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R979 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s0 -> s2 [0, 64] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s0 -> s0 [0, 65535] { R980 += 1, R981 += 1 };
  s0 -> s3 [0, 65535] { R981 += 1, R908 += 1, R909 += 1 };
  s0 -> s4 [65, 65] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s0 -> s5 [65, 65] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s0 -> s6 [65, 65] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s0 -> s7 [65, 65] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s0 -> s2 [66, 79] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s0 -> s1 [66, 65535] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s0 -> s8 [80, 80] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s0 -> s2 [81, 65535] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s1 -> s1 [0, 64] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s1 -> s2 [0, 64] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s1 -> s4 [65, 65] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s1 -> s5 [65, 65] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s1 -> s6 [65, 65] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s1 -> s7 [65, 65] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s1 -> s2 [66, 79] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s1 -> s1 [66, 65535] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s1 -> s8 [80, 80] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s1 -> s2 [81, 65535] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s2 -> s2 [0, 64] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s2 -> s5 [65, 65] { R981 += 1, R909 += 1 };
  s2 -> s6 [65, 65] { R981 += 1, R909 += 1 };
  s2 -> s2 [66, 79] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s2 -> s2 [66, 65535] { R981 += 1, R909 += 1 };
  s2 -> s8 [80, 80] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s2 -> s2 [81, 65535] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s3 -> s1 [0, 64] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s3 -> s2 [0, 64] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s3 -> s3 [0, 65535] { R981 += 1, R908 += 1, R909 += 1 };
  s3 -> s4 [65, 65] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s3 -> s5 [65, 65] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s3 -> s6 [65, 65] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s3 -> s7 [65, 65] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s3 -> s2 [66, 79] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s3 -> s1 [66, 65535] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s3 -> s8 [80, 80] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s3 -> s2 [81, 65535] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s4 -> s6 [0, 79] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s4 -> s4 [0, 65535] { R981 += 1, R909 += 1, R846 += 1, R847 += 1 };
  s4 -> s10 [80, 80] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s4 -> s6 [81, 65535] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s6 -> s6 [0, 79] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s6 -> s6 [0, 65535] { R981 += 1, R909 += 1 };
  s6 -> s10 [80, 80] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s6 -> s6 [81, 65535] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s8 -> s8 [0, 64] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R981 += 1 };
  s8 -> s10 [65, 65] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s8 -> s11 [65, 65] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s8 -> s8 [66, 65535] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R981 += 1 };
  s10 -> s10 [0, 65535] { R981 += 1, R909 += 1, R847 += 1, R848 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R981 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R981 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R875 && R6 = R981 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R875 && R58 = 0 && R59 = R875 && R60 = 0 && R61 = R875 && R62 = 0 && R63 = R981 && R64 = 0 && R65 = R981 && R66 = 0 && R67 = R981 && R86 = 0 && R87 = 0 && R852 = 0 && R853 = R875 && R854 = 0 && R855 = R875 && R856 = 0 && R857 = R875 && R858 = 0 && R859 = R875 && R860 = 0 && R861 = R875 && R862 = 0 && R863 = R875 && R864 = 0 && R865 = R875 && R866 = 0 && R867 = R875 && R868 = 0 && R869 = R875 && R870 = 0 && R871 = R875 && R872 = 0 && R873 = R875 && R874 = 0 && R876 = 0 && R877 = R981 && R878 = 0 && R879 = R981 && R880 = 0 && R881 = R981 && R882 = 0 && R883 = R981 && R884 = 0 && R885 = R981 && R886 = 0 && R887 = R981 && R890 = 0 && R891 = 0 && R908 = 0 && R909 = 0 && R910 = 10 && R911 = R981 && R912 = 10 && R913 = R981 && R914 = 10 && R915 = R981 && R916 = 10 && R917 = R981 && R918 = 10 && R919 = R981 && R920 = 10 && R921 = R981 && R922 = 10 && R923 = R981 && R924 = 10 && R925 = R981 && R926 = 10 && R927 = R981 && R928 = 10 && R929 = R981 && R930 = 10 && R931 = R981 && R932 = 10 && R933 = R981 && R934 = 10 && R935 = R981 && R936 = 10 && R937 = R981 && R938 = 10 && R939 = R981 && R940 = 10 && R941 = R981 && R942 = 10 && R943 = R981 && R944 = 10 && R945 = R981 && R946 = 10 && R947 = R981 && R948 = 10 && R949 = R981 && R950 = 10 && R951 = R981 && R952 = 10 && R953 = R981 && R954 = 10 && R955 = R981 && R956 = 10 && R957 = R981 && R958 = 10 && R959 = R981 && R960 = 10 && R961 = R981 && R962 = 10 && R963 = R981 && R964 = 10 && R965 = R981 && R966 = 10 && R967 = R981 && R968 = 10 && R969 = R981 && R970 = 10 && R971 = R981 && R972 = 10 && R973 = R981 && R974 = 10 && R975 = R981 && R976 = 10 && R977 = R981 && R978 = 10 && R979 = R981 && R980 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R431 + R428 + R851 + R848 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R875 && 9 < R981 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R424 + R422 = 0 && R425 + R423 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R429 + R426 = 0 && R430 + R427 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R424 + R422 != 0 || R409 + R408 + -1*R425 + -1*R423 = 0 || R409 + R408 < 1) && (R429 + R426 != 0 || R409 + R408 + -1*R430 + -1*R427 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R888 = 0 && R889 = 0)) && (R34 = 0 || (R892 = 0 && R893 = 0)) && (R34 = 0 || (R894 = 0 && R895 = 0)) && (R34 = 0 || (R896 = 0 && R897 = 0)) && (R34 = 0 || (R898 = 0 && R899 = 0)) && (R34 = 0 || (R900 = 0 && R901 = 0)) && (R34 = 0 || (R902 = 0 && R903 = 0)) && (R34 = 0 || (R904 = 0 && R905 = 0)) && (R34 = 0 || (R906 = 0 && R907 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R424 + R422 = 0 || R409 + R408 < 1) && (R429 + R426 = 0 || R409 + R408 < 1) && (R437 + R434 = 0 || (R435 + R432 = 0 && R436 + R433 = 0)) && (R437 + R434 = 0 || (R849 + R846 = 0 && R850 + R847 = 0));
// End of Parikh automata intersection problem
