// Parikh automata intersection problem, generated by OSTRICH+
counter int R10064, R10065, R10066, R10067, R10068, R10069, R10614, R10615, R10616, R10617, R10618, R10619, R10620, R10621, R10622, R10623, R10624, R10625, R10626, R10627, R10628, R10629, R10630, R10631, R10632, R10633, R10634, R10635, R10636, R10637, R10638, R10639, R10640, R10641, R10642, R10643, R10644, R10645, R10646, R10647, R10648, R10649, R10650, R10651, R10652, R10653, R10654, R10655, R10656, R10657, R10658, R10659, R10660, R10661, R10662, R10663, R10664, R10665, R10666, R10667, R10668, R10669, R10670, R10671, R10672, R10673, R10674, R10675, R10676, R10677, R10678, R10679, R10680, R10681, R10682, R10683, R10684, R10685, R10686, R10687, R10688, R10689, R10690, R10691, R10692, R10693, R10694, R10695, R10696, R10697, R10698, R10699, R10700, R10701, R10702, R10703, R10704, R10705, R10706, R10707, R10708, R10709, R10710, R10711, R10712, R10713, R10714, R10715, R10716, R10717, R10718, R10719, R10720, R10721, R10722, R10723, R10724, R10725, R10726, R10727, R10728, R10729, R10730, R10731, R10732, R10733, R10734, R10735, R10736, R10737, R10738, R10739, R10740, R10741, R10742, R10743, R10744, R10745, R10746, R10747, R10748, R10749, R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6618, R6619, R6620, R6621, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R8686, R8687, R8688, R8689, R8690, R8691, R87;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R10644 += 1, R10645 += 1 };
  s0 -> s1 [0, 65535] { R10645 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R10645 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R10647 += 1 };
  s0 -> s2 [0, 65535] { R10647 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R10646 += 1, R10647 += 1 };
  s0 -> s3 [65, 65] { R10647 += 1 };
  s0 -> s1 [66, 65535] { R10647 += 1 };
  s1 -> s1 [0, 64] { R10647 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10647 += 1 };
  s1 -> s1 [66, 65535] { R10647 += 1 };
  s2 -> s1 [0, 64] { R10647 += 1 };
  s2 -> s2 [0, 65535] { R10647 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R10647 += 1 };
  s2 -> s1 [66, 65535] { R10647 += 1 };
  s3 -> s3 [0, 65535] { R10647 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10649 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R10648 += 1, R10649 += 1 };
  s0 -> s2 [0, 65535] { R10649 += 1, R69 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R10649 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10649 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10649 += 1 };
  s2 -> s2 [0, 65535] { R10649 += 1, R69 += 1, R27 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10649 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10650 += 1, R10651 += 1 };
  s0 -> s1 [0, 65535] { R10651 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10651 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R10652 += 1, R10653 += 1 };
  s0 -> s1 [0, 65535] { R10653 += 1, R85 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R10653 += 1, R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10653 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535] { R10653 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10653 += 1, R85 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R10653 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10653 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R10654 += 1, R10655 += 1 };
  s0 -> s1 [0, 65535] { R10655 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [108, 108] { R10655 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R10655 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R10655 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R10655 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R10655 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R10655 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R10655 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R10655 += 1, R87 += 1 };
  s5 -> s14 [108, 108] { R10655 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R10655 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R10655 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R10655 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R10655 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R10655 += 1, R87 += 1 };
  s12 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R10655 += 1 };
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R10655 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R10655 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R10655 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R10655 += 1, R87 += 1 };
  s18 -> s13 [0, 65535];
  s18 -> s18 [0, 65535] { R10655 += 1 };
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R10679 += 1 };
  s0 -> s0 [0, 65535] { R10678 += 1, R10679 += 1 };
  s0 -> s1 [45, 45] { R10679 += 1 };
  s0 -> s2 [46, 46] { R10679 += 1 };
  s0 -> s1 [48, 62] { R10679 += 1 };
  s0 -> s3 [65, 65] { R10679 += 1 };
  s0 -> s1 [66, 65535] { R10679 += 1 };
  s1 -> s1 [0, 43] { R10679 += 1 };
  s1 -> s1 [45, 45] { R10679 += 1 };
  s1 -> s2 [46, 46] { R10679 += 1 };
  s1 -> s1 [48, 62] { R10679 += 1 };
  s1 -> s3 [65, 65] { R10679 += 1 };
  s1 -> s1 [66, 65535] { R10679 += 1 };
  s2 -> s1 [0, 43] { R10679 += 1 };
  s2 -> s1 [45, 45] { R10679 += 1 };
  s2 -> s2 [46, 46] { R10679 += 1 };
  s2 -> s1 [48, 62] { R10679 += 1 };
  s2 -> s3 [65, 65] { R10679 += 1 };
  s2 -> s1 [66, 114] { R10679 += 1 };
  s2 -> s8 [115, 115] { R10679 += 1 };
  s2 -> s1 [116, 65535] { R10679 += 1 };
  s3 -> s3 [0, 43] { R10679 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10679 += 1 };
  s3 -> s4 [46, 46] { R10679 += 1 };
  s3 -> s3 [48, 62] { R10679 += 1 };
  s3 -> s3 [65, 65535] { R10679 += 1 };
  s4 -> s3 [0, 43] { R10679 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10679 += 1 };
  s4 -> s4 [46, 46] { R10679 += 1 };
  s4 -> s3 [48, 62] { R10679 += 1 };
  s4 -> s3 [65, 114] { R10679 += 1 };
  s4 -> s5 [115, 115] { R10679 += 1 };
  s4 -> s3 [116, 65535] { R10679 += 1 };
  s5 -> s3 [0, 43] { R10679 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10679 += 1 };
  s5 -> s4 [46, 46] { R10679 += 1 };
  s5 -> s3 [48, 62] { R10679 += 1 };
  s5 -> s3 [65, 110] { R10679 += 1 };
  s5 -> s6 [111, 111] { R10679 += 1 };
  s5 -> s3 [112, 65535] { R10679 += 1 };
  s6 -> s3 [0, 43] { R10679 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10679 += 1 };
  s6 -> s4 [46, 46] { R10679 += 1 };
  s6 -> s3 [48, 62] { R10679 += 1 };
  s6 -> s3 [65, 98] { R10679 += 1 };
  s6 -> s7 [99, 99] { R10679 += 1 };
  s6 -> s3 [100, 65535] { R10679 += 1 };
  s7 -> s3 [0, 43] { R10679 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10679 += 1 };
  s7 -> s4 [46, 46] { R10679 += 1 };
  s7 -> s3 [48, 62] { R10679 += 1 };
  s7 -> s3 [65, 106] { R10679 += 1 };
  s7 -> s3 [108, 65535] { R10679 += 1 };
  s8 -> s1 [0, 43] { R10679 += 1 };
  s8 -> s1 [45, 45] { R10679 += 1 };
  s8 -> s2 [46, 46] { R10679 += 1 };
  s8 -> s1 [48, 62] { R10679 += 1 };
  s8 -> s3 [65, 65] { R10679 += 1 };
  s8 -> s1 [66, 110] { R10679 += 1 };
  s8 -> s9 [111, 111] { R10679 += 1 };
  s8 -> s1 [112, 65535] { R10679 += 1 };
  s9 -> s1 [0, 43] { R10679 += 1 };
  s9 -> s1 [45, 45] { R10679 += 1 };
  s9 -> s2 [46, 46] { R10679 += 1 };
  s9 -> s1 [48, 62] { R10679 += 1 };
  s9 -> s3 [65, 65] { R10679 += 1 };
  s9 -> s1 [66, 98] { R10679 += 1 };
  s9 -> s10 [99, 99] { R10679 += 1 };
  s9 -> s1 [100, 65535] { R10679 += 1 };
  s10 -> s1 [0, 43] { R10679 += 1 };
  s10 -> s1 [45, 45] { R10679 += 1 };
  s10 -> s2 [46, 46] { R10679 += 1 };
  s10 -> s1 [48, 62] { R10679 += 1 };
  s10 -> s3 [65, 65] { R10679 += 1 };
  s10 -> s1 [66, 106] { R10679 += 1 };
  s10 -> s1 [108, 65535] { R10679 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R10681 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R10680 += 1, R10681 += 1 };
  s1 -> s1 [0, 65535] { R10681 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R10683 += 1 };
  s0 -> s0 [0, 65535] { R10682 += 1, R10683 += 1 };
  s0 -> s2 [0, 65535] { R10683 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R10683 += 1 };
  s0 -> s1 [59, 65535] { R10683 += 1 };
  s1 -> s1 [0, 57] { R10683 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10683 += 1 };
  s1 -> s1 [59, 65535] { R10683 += 1 };
  s2 -> s1 [0, 57] { R10683 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10683 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R10683 += 1 };
  s2 -> s1 [59, 65535] { R10683 += 1 };
  s3 -> s3 [0, 65535] { R10683 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R10685 += 1 };
  s0 -> s2 [0, 65535] { R10685 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R10684 += 1, R10685 += 1 };
  s0 -> s3 [43, 43] { R10685 += 1 };
  s0 -> s1 [44, 65535] { R10685 += 1 };
  s1 -> s1 [0, 42] { R10685 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R10685 += 1 };
  s1 -> s1 [44, 65535] { R10685 += 1 };
  s2 -> s1 [0, 42] { R10685 += 1 };
  s2 -> s2 [0, 65535] { R10685 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R10685 += 1 };
  s2 -> s1 [44, 65535] { R10685 += 1 };
  s3 -> s3 [0, 65535] { R10685 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10687 += 1 };
  s0 -> s0 [0, 65535] { R10686 += 1, R10687 += 1 };
  s0 -> s2 [0, 65535] { R10687 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R10687 += 1 };
  s0 -> s1 [66, 65535] { R10687 += 1 };
  s1 -> s1 [0, 64] { R10687 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10687 += 1 };
  s1 -> s1 [66, 65535] { R10687 += 1 };
  s2 -> s1 [0, 64] { R10687 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10687 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R10687 += 1 };
  s2 -> s1 [66, 65535] { R10687 += 1 };
  s3 -> s3 [0, 65535] { R10687 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R10689 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R10688 += 1, R10689 += 1 };
  s0 -> s2 [0, 65535] { R10689 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R10689 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R10689 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10689 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R10689 += 1 };
  s2 -> s1 [0, 90] { R10689 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R10689 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10689 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R10689 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R10689 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10689 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10691 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R10690 += 1, R10691 += 1 };
  s0 -> s2 [0, 65535] { R10691 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R10691 += 1, R41 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R10691 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10691 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10691 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10691 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10692 += 1, R10693 += 1 };
  s0 -> s1 [0, 65535] { R10693 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R10693 += 1, R57 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R10693 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10693 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10693 += 1, R57 += 1, R31 += 1 };
  s2 -> s4 [0, 65535] { R10693 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10693 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R10695 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R10694 += 1, R10695 += 1 };
  s0 -> s2 [0, 65535] { R10695 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R10695 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R10695 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R10695 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R10695 += 1 };
  s2 -> s1 [0, 107] { R10695 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10695 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R10695 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R10695 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R10695 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R10695 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R10695 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R10695 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10695 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R10695 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10695 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R10695 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R10695 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R10695 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R10695 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R10695 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R10695 += 1, R59 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R10695 += 1 };
  s7 -> s8 [108, 108] { R10695 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R10695 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R10695 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R10695 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R10695 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R10695 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R10695 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R10695 += 1 };
  s9 -> s10 [111, 111] { R10695 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R10695 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R10695 += 1, R59 += 1 };
  s10 -> s10 [0, 65535] { R10695 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R10695 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R10695 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R10695 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10695 += 1 };
  s11 -> s12 [116, 116] { R10695 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R10695 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R10695 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R10695 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R10696 += 1, R10697 += 1 };
  s0 -> s1 [0, 65535] { R10697 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R10697 += 1, R60 += 1, R61 += 1 };
  s1 -> s4 [0, 65535] { R10697 += 1 };
  s1 -> s1 [0, 65535] { R10697 += 1, R61 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10697 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10697 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10697 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s0 [0, 65535] { R10698 += 1, R10699 += 1 };
  s0 -> s1 [0, 65535] { R10699 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R10699 += 1, R75 += 1, R33 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10699 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R10699 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535] { R10699 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10699 += 1, R75 += 1, R33 += 1 };
  s3 -> s3 [0, 65535] { R10699 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10701 += 1 };
  s0 -> s0 [0, 65535] { R10700 += 1, R10701 += 1 };
  s1 -> s1 [0, 65535] { R10701 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R10703 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R10703 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R10702 += 1, R10703 += 1 };
  s0 -> s3 [43, 43] { R10703 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R10703 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R10703 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R10703 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R10703 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R10703 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R10703 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R10703 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R10703 += 1, R77 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R10703 += 1, R76 += 1, R77 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R10703 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R10703 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R10703 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R10703 += 1, R77 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R10703 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10703 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10703 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R10705 += 1, R10621 += 1 };
  s0 -> s0 [0, 65535] { R10704 += 1, R10705 += 1 };
  s0 -> s2 [0, 65535] { R10705 += 1, R10620 += 1, R10621 += 1 };
  s0 -> s1 [66, 65535] { R10705 += 1, R10621 += 1 };
  s1 -> s1 [0, 64] { R10705 += 1, R10621 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10705 += 1 };
  s1 -> s1 [66, 65535] { R10705 += 1, R10621 += 1 };
  s2 -> s1 [0, 64] { R10705 += 1, R10621 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10705 += 1, R10620 += 1, R10621 += 1 };
  s2 -> s1 [66, 65535] { R10705 += 1, R10621 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10707 += 1, R10622 += 1, R10623 += 1 };
  s0 -> s2 [0, 65535] { R10707 += 1, R10623 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R10706 += 1, R10707 += 1 };
  s1 -> s1 [0, 65535] { R10707 += 1, R10622 += 1, R10623 += 1 };
  s1 -> s2 [0, 65535] { R10707 += 1, R10623 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10707 += 1 };
  s2 -> s2 [0, 65535] { R10707 += 1, R10623 += 1, R32 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10707 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R10709 += 1, R10625 += 1 };
  s0 -> s2 [0, 65535] { R10709 += 1, R10624 += 1, R10625 += 1 };
  s0 -> s0 [0, 65535] { R10708 += 1, R10709 += 1 };
  s0 -> s1 [80, 65535] { R10709 += 1, R10625 += 1 };
  s1 -> s1 [0, 65] { R10709 += 1, R10625 += 1 };
  s1 -> s1 [0, 65535] { R10709 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R10709 += 1, R10625 += 1 };
  s2 -> s1 [0, 65] { R10709 += 1, R10625 += 1 };
  s2 -> s2 [0, 65535] { R10709 += 1, R10624 += 1, R10625 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R10709 += 1, R10625 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R10711 += 1, R10627 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R10710 += 1, R10711 += 1 };
  s0 -> s2 [0, 65535] { R10711 += 1, R10626 += 1, R10627 += 1 };
  s1 -> s1 [0, 65535] { R10711 += 1, R10627 += 1, R409 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10711 += 1 };
  s2 -> s1 [0, 65535] { R10711 += 1, R10627 += 1, R409 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10711 += 1, R10626 += 1, R10627 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10711 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R10713 += 1, R10629 += 1 };
  s0 -> s2 [0, 65535] { R10713 += 1, R10628 += 1, R10629 += 1 };
  s0 -> s3 [0, 65535] { R10713 += 1, R10629 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R10712 += 1, R10713 += 1 };
  s0 -> s1 [81, 65535] { R10713 += 1, R10629 += 1 };
  s1 -> s1 [0, 79] { R10713 += 1, R10629 += 1 };
  s1 -> s1 [0, 65535] { R10713 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R10713 += 1, R10629 += 1 };
  s2 -> s1 [0, 79] { R10713 += 1, R10629 += 1 };
  s2 -> s2 [0, 65535] { R10713 += 1, R10628 += 1, R10629 += 1 };
  s2 -> s3 [0, 65535] { R10713 += 1, R10629 += 1, R411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R10713 += 1, R10629 += 1 };
  s3 -> s1 [0, 79] { R10713 += 1, R10629 += 1 };
  s3 -> s4 [0, 65535] { R10713 += 1 };
  s3 -> s3 [0, 65535] { R10713 += 1, R10629 += 1, R411 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R10713 += 1, R10629 += 1 };
  s4 -> s4 [0, 65535] { R10713 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R10715 += 1, R10631 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R10715 += 1, R10631 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R10714 += 1, R10715 += 1 };
  s0 -> s3 [0, 65535] { R10715 += 1, R10630 += 1, R10631 += 1 };
  s0 -> s1 [81, 65535] { R10715 += 1, R10631 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R10715 += 1, R10631 += 1, R415 += 1 };
  s1 -> s5 [0, 65535] { R10715 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10715 += 1, R10631 += 1 };
  s1 -> s1 [81, 65535] { R10715 += 1, R10631 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R10715 += 1, R10631 += 1, R415 += 1 };
  s2 -> s5 [0, 65535] { R10715 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10715 += 1, R10631 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [81, 65535] { R10715 += 1, R10631 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R10715 += 1, R10631 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10715 += 1, R10631 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R10715 += 1, R10630 += 1, R10631 += 1 };
  s3 -> s1 [81, 65535] { R10715 += 1, R10631 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10715 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R10717 += 1, R10633 += 1, R420 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R10716 += 1, R10717 += 1 };
  s0 -> s2 [0, 65535] { R10717 += 1, R10632 += 1, R10633 += 1 };
  s0 -> s3 [0, 65535] { R10717 += 1, R10633 += 1, R419 += 1, R420 += 1 };
  s1 -> s6 [0, 65535] { R10717 += 1, R10633 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10717 += 1 };
  s1 -> s1 [0, 65535] { R10717 += 1, R10633 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [0, 65535] { R10717 += 1, R10633 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R10717 += 1, R10632 += 1, R10633 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10717 += 1, R10633 += 1, R419 += 1, R420 += 1 };
  s3 -> s1 [0, 65535] { R10717 += 1, R10633 += 1, R420 += 1, R421 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10717 += 1 };
  s3 -> s3 [0, 65535] { R10717 += 1, R10633 += 1, R419 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10717 += 1 };
  s6 -> s6 [0, 65535] { R10717 += 1, R10633 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10717 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R10719 += 1, R10635 += 1, R6621 += 1 };
  s0 -> s2 [0, 65535] { R10719 += 1, R10634 += 1, R10635 += 1 };
  s0 -> s1 [0, 65535] { R10719 += 1, R10635 += 1 };
  s0 -> s0 [0, 65535] { R10718 += 1, R10719 += 1 };
  s0 -> s1 [91, 65535] { R10719 += 1, R10635 += 1, R6621 += 1 };
  s1 -> s1 [0, 80] { R10719 += 1, R10635 += 1, R6621 += 1 };
  s1 -> s4 [0, 65535] { R10719 += 1 };
  s1 -> s1 [0, 65535] { R10719 += 1, R10635 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R10719 += 1, R10635 += 1, R6621 += 1 };
  s2 -> s1 [0, 80] { R10719 += 1, R10635 += 1, R6621 += 1 };
  s2 -> s2 [0, 65535] { R10719 += 1, R10634 += 1, R10635 += 1 };
  s2 -> s1 [0, 65535] { R10719 += 1, R10635 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R10719 += 1, R10635 += 1, R6621 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10719 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R10721 += 1, R10636 += 1, R10637 += 1 };
  s0 -> s0 [0, 65535] { R10720 += 1, R10721 += 1 };
  s0 -> s2 [0, 65535] { R10721 += 1, R10637 += 1 };
  s0 -> s3 [0, 65535] { R10721 += 1, R10637 += 1, R8690 += 1, R8691 += 1 };
  s1 -> s1 [0, 65535] { R10721 += 1, R10636 += 1, R10637 += 1 };
  s1 -> s2 [0, 65535] { R10721 += 1, R10637 += 1 };
  s1 -> s3 [0, 65535] { R10721 += 1, R10637 += 1, R8690 += 1, R8691 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R10721 += 1 };
  s2 -> s2 [0, 65535] { R10721 += 1, R10637 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10721 += 1 };
  s3 -> s2 [0, 65535] { R10721 += 1, R10637 += 1 };
  s3 -> s3 [0, 65535] { R10721 += 1, R10637 += 1, R8690 += 1, R8691 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10721 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R10722 += 1, R10723 += 1 };
  s0 -> s1 [0, 65535] { R10723 += 1, R10639 += 1 };
  s0 -> s2 [0, 65535] { R10723 += 1, R10638 += 1, R10639 += 1 };
  s1 -> s4 [0, 65535] { R10723 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10723 += 1, R10639 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10723 += 1, R10639 += 1 };
  s2 -> s2 [0, 65535] { R10723 += 1, R10638 += 1, R10639 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10723 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R10725 += 1, R10640 += 1, R10641 += 1 };
  s0 -> s0 [0, 65535] { R10724 += 1, R10725 += 1 };
  s0 -> s2 [0, 65535] { R10725 += 1, R10641 += 1 };
  s1 -> s1 [0, 65535] { R10725 += 1, R10640 += 1, R10641 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10725 += 1, R10641 += 1 };
  s2 -> s3 [0, 65535] { R10725 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10725 += 1, R10641 += 1 };
  s3 -> s3 [0, 65535] { R10725 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s0 [0, 65535] { R10726 += 1, R10727 += 1 };
  s0 -> s1 [0, 65535] { R10727 += 1, R10643 += 1 };
  s0 -> s2 [0, 65535] { R10727 += 1, R10642 += 1, R10643 += 1 };
  s1 -> s1 [0, 65535] { R10727 += 1, R10643 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10727 += 1 };
  s2 -> s1 [0, 65535] { R10727 += 1, R10643 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10727 += 1, R10642 += 1, R10643 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10727 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10729 += 1, R10656 += 1, R10657 += 1 };
  s0 -> s2 [0, 65535] { R10729 += 1, R10657 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R10728 += 1, R10729 += 1 };
  s1 -> s1 [0, 65535] { R10729 += 1, R10656 += 1, R10657 += 1 };
  s1 -> s2 [0, 65535] { R10729 += 1, R10657 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10729 += 1, R10657 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R10729 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10729 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R10731 += 1, R10659 += 1 };
  s0 -> s2 [0, 65535] { R10731 += 1, R10658 += 1, R10659 += 1 };
  s0 -> s0 [0, 65535] { R10730 += 1, R10731 += 1 };
  s0 -> s3 [65, 65] { R10731 += 1, R10659 += 1 };
  s0 -> s4 [65, 65] { R10731 += 1, R10659 += 1 };
  s0 -> s5 [80, 80] { R10731 += 1, R10659 += 1 };
  s0 -> s1 [81, 65535] { R10731 += 1, R10659 += 1 };
  s1 -> s1 [0, 64] { R10731 += 1, R10659 += 1 };
  s1 -> s3 [65, 65] { R10731 += 1, R10659 += 1 };
  s1 -> s4 [65, 65] { R10731 += 1, R10659 += 1 };
  s1 -> s5 [80, 80] { R10731 += 1, R10659 += 1 };
  s1 -> s1 [81, 65535] { R10731 += 1, R10659 += 1 };
  s2 -> s1 [0, 64] { R10731 += 1, R10659 += 1 };
  s2 -> s2 [0, 65535] { R10731 += 1, R10658 += 1, R10659 += 1 };
  s2 -> s3 [65, 65] { R10731 += 1, R10659 += 1 };
  s2 -> s4 [65, 65] { R10731 += 1, R10659 += 1 };
  s2 -> s5 [80, 80] { R10731 += 1, R10659 += 1 };
  s2 -> s1 [81, 65535] { R10731 += 1, R10659 += 1 };
  s3 -> s3 [0, 65] { R10731 += 1, R10659 += 1 };
  s3 -> s8 [80, 80] { R10731 += 1, R10659 += 1 };
  s3 -> s3 [81, 65535] { R10731 += 1, R10659 += 1 };
  s5 -> s5 [0, 64] { R10731 += 1, R10659 += 1 };
  s5 -> s5 [0, 65535] { R10731 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R10731 += 1, R10659 += 1 };
  s5 -> s8 [65, 65] { R10731 += 1, R10659 += 1 };
  s5 -> s5 [80, 65535] { R10731 += 1, R10659 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10731 += 1 };
  s8 -> s8 [0, 65] { R10731 += 1, R10659 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10731 += 1 };
  s8 -> s8 [80, 65535] { R10731 += 1, R10659 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R10733 += 1, R10661 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R10732 += 1, R10733 += 1 };
  s0 -> s2 [0, 65535] { R10733 += 1, R10660 += 1, R10661 += 1 };
  s0 -> s3 [65, 65] { R10733 += 1, R10661 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R10733 += 1, R10661 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R10733 += 1, R10661 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R10733 += 1, R10661 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R10733 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10733 += 1, R10661 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R10733 += 1, R10661 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R10733 += 1, R10661 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R10733 += 1, R10661 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10733 += 1, R10660 += 1, R10661 += 1 };
  s2 -> s3 [65, 65] { R10733 += 1, R10661 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R10733 += 1, R10661 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R10733 += 1, R10661 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R10733 += 1, R10661 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R10733 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10733 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10733 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R10735 += 1, R10663 += 1, R410 += 1 };
  s0 -> s0 [0, 65535] { R10734 += 1, R10735 += 1 };
  s0 -> s2 [0, 65535] { R10735 += 1, R10662 += 1, R10663 += 1 };
  s0 -> s3 [65, 65] { R10735 += 1, R10663 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R10735 += 1, R10663 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R10735 += 1, R10663 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R10735 += 1, R10663 += 1, R410 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10735 += 1 };
  s1 -> s3 [65, 65] { R10735 += 1, R10663 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R10735 += 1, R10663 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R10735 += 1, R10663 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R10735 += 1, R10663 += 1, R410 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10735 += 1, R10662 += 1, R10663 += 1 };
  s2 -> s3 [65, 65] { R10735 += 1, R10663 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R10735 += 1, R10663 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R10735 += 1, R10663 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R10735 += 1, R10663 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10735 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10735 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10735 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R10737 += 1, R10664 += 1, R10665 += 1 };
  s0 -> s0 [0, 65535] { R10736 += 1, R10737 += 1 };
  s0 -> s3 [65, 65] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R10737 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R10737 += 1, R10664 += 1, R10665 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R10737 += 1, R10665 += 1, R412 += 1, R413 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10737 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10737 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10737 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R10738 += 1, R10739 += 1 };
  s0 -> s2 [0, 65535] { R10739 += 1, R10666 += 1, R10667 += 1 };
  s0 -> s3 [65, 65] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 65535] { R10739 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s2 -> s2 [0, 65535] { R10739 += 1, R10666 += 1, R10667 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10739 += 1 };
  s4 -> s5 [0, 65535] { R10739 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10739 += 1, R10667 += 1, R416 += 1, R417 += 1 };
  s5 -> s5 [0, 65535] { R10739 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s0 -> s2 [0, 64] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s3 [0, 65535] { R10741 += 1, R10668 += 1, R10669 += 1 };
  s0 -> s0 [0, 65535] { R10740 += 1, R10741 += 1 };
  s0 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s0 -> s5 [65, 65] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s6 [65, 65] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s0 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s0 -> s2 [66, 65535] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s1 [91, 107] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s0 -> s8 [108, 108] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s0 -> s1 [109, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s1 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s1 [0, 65535] { R10741 += 1 };
  s1 -> s4 [65, 65] { R10741 += 1, R10669 += 1 };
  s1 -> s7 [65, 65] { R10741 += 1, R10669 += 1 };
  s1 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s1 -> s1 [66, 65535] { R10741 += 1, R10669 += 1 };
  s1 -> s1 [91, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s2 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s2 -> s2 [0, 64] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s2 -> s5 [65, 65] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s6 [65, 65] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s2 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s2 -> s2 [66, 65535] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s1 [91, 107] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s2 -> s8 [108, 108] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s2 -> s1 [109, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s3 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s3 -> s2 [0, 64] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535] { R10741 += 1, R10668 += 1, R10669 += 1 };
  s3 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s3 -> s5 [65, 65] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s6 [65, 65] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s3 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s3 -> s2 [66, 65535] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s1 [91, 107] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s3 -> s8 [108, 108] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s3 -> s1 [109, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s4 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s4 [0, 65535] { R10741 += 1, R10669 += 1 };
  s4 -> s35 [0, 65535] { R10741 += 1 };
  s4 -> s4 [91, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s5 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s5 -> s5 [0, 65535] { R10741 += 1, R10669 += 1, R6618 += 1, R6619 += 1 };
  s5 -> s4 [91, 107] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s5 -> s9 [108, 108] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s5 -> s4 [109, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s7 -> s34 [0, 65535];
  s7 -> s7 [0, 65535] { R10741 += 1 };
  s8 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s8 -> s8 [0, 64] { R10741 += 1, R10669 += 1 };
  s8 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s8 -> s9 [65, 65] { R10741 += 1, R10669 += 1 };
  s8 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s8 -> s10 [65, 65] { R10741 += 1, R10669 += 1 };
  s8 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s8 -> s8 [66, 65535] { R10741 += 1, R10669 += 1 };
  s8 -> s1 [91, 110] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s8 -> s11 [111, 111] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s8 -> s1 [112, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s9 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s9 -> s9 [0, 65535] { R10741 += 1, R10669 += 1 };
  s9 -> s4 [91, 110] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s9 -> s13 [111, 111] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s9 -> s4 [112, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s11 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s11 -> s11 [0, 64] { R10741 += 1, R10669 += 1 };
  s11 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s11 -> s12 [65, 65] { R10741 += 1, R10669 += 1 };
  s11 -> s13 [65, 65] { R10741 += 1, R10669 += 1 };
  s11 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s11 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s11 -> s11 [66, 65535] { R10741 += 1, R10669 += 1 };
  s11 -> s1 [91, 98] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s11 -> s14 [99, 99] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s11 -> s1 [100, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s13 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s13 -> s13 [0, 65535] { R10741 += 1, R10669 += 1 };
  s13 -> s4 [91, 98] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s13 -> s15 [99, 99] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s13 -> s4 [100, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s14 -> s14 [0, 64] { R10741 += 1, R10669 += 1 };
  s14 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s14 -> s15 [65, 65] { R10741 += 1, R10669 += 1 };
  s14 -> s16 [65, 65] { R10741 += 1, R10669 += 1 };
  s14 -> s17 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s14 -> s18 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s14 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s14 -> s14 [66, 65535] { R10741 += 1, R10669 += 1 };
  s14 -> s1 [91, 96] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s14 -> s19 [97, 97] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s14 -> s1 [98, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s15 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s15 -> s15 [0, 65535] { R10741 += 1, R10669 += 1 };
  s15 -> s4 [91, 96] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s15 -> s17 [97, 97] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s15 -> s4 [98, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s17 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s17 -> s17 [0, 65535] { R10741 += 1, R10669 += 1 };
  s17 -> s4 [91, 107] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s17 -> s22 [108, 108] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s17 -> s4 [109, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s19 -> s19 [0, 64] { R10741 += 1, R10669 += 1 };
  s19 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s19 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s19 -> s17 [65, 65] { R10741 += 1, R10669 += 1 };
  s19 -> s18 [65, 65] { R10741 += 1, R10669 += 1 };
  s19 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s19 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s19 -> s19 [66, 65535] { R10741 += 1, R10669 += 1 };
  s19 -> s1 [91, 107] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s19 -> s20 [108, 108] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s19 -> s1 [109, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s20 -> s20 [0, 64] { R10741 += 1, R10669 += 1 };
  s20 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s20 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s20 -> s21 [65, 65] { R10741 += 1, R10669 += 1 };
  s20 -> s22 [65, 65] { R10741 += 1, R10669 += 1 };
  s20 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s20 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s20 -> s20 [66, 65535] { R10741 += 1, R10669 += 1 };
  s20 -> s1 [91, 103] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s20 -> s23 [104, 104] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s20 -> s1 [105, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s22 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s22 -> s22 [0, 65535] { R10741 += 1, R10669 += 1 };
  s22 -> s4 [91, 103] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s22 -> s25 [104, 104] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s22 -> s4 [105, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s23 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s23 -> s23 [0, 64] { R10741 += 1, R10669 += 1 };
  s23 -> s24 [65, 65] { R10741 += 1, R10669 += 1 };
  s23 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s23 -> s25 [65, 65] { R10741 += 1, R10669 += 1 };
  s23 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s23 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s23 -> s23 [66, 65535] { R10741 += 1, R10669 += 1 };
  s23 -> s1 [91, 110] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s23 -> s26 [111, 111] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s23 -> s1 [112, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s25 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s25 -> s25 [0, 65535] { R10741 += 1, R10669 += 1 };
  s25 -> s4 [91, 110] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s25 -> s28 [111, 111] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s25 -> s4 [112, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s26 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s26 -> s26 [0, 64] { R10741 += 1, R10669 += 1 };
  s26 -> s27 [65, 65] { R10741 += 1, R10669 += 1 };
  s26 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s26 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s26 -> s28 [65, 65] { R10741 += 1, R10669 += 1 };
  s26 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s26 -> s26 [66, 65535] { R10741 += 1, R10669 += 1 };
  s26 -> s1 [91, 114] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s26 -> s29 [115, 115] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s26 -> s1 [116, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s28 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s28 -> s28 [0, 65535] { R10741 += 1, R10669 += 1 };
  s28 -> s4 [91, 114] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s28 -> s30 [115, 115] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s28 -> s4 [116, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s29 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s29 -> s29 [0, 64] { R10741 += 1, R10669 += 1 };
  s29 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s29 -> s30 [65, 65] { R10741 += 1, R10669 += 1 };
  s29 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s29 -> s31 [65, 65] { R10741 += 1, R10669 += 1 };
  s29 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s29 -> s29 [66, 65535] { R10741 += 1, R10669 += 1 };
  s29 -> s1 [91, 115] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s29 -> s32 [116, 116] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s29 -> s1 [117, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s30 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s30 -> s30 [0, 65535] { R10741 += 1, R10669 += 1 };
  s30 -> s4 [91, 115] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s30 -> s33 [116, 116] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s30 -> s4 [117, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s32 -> s1 [0, 64] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s32 -> s4 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s32 -> s7 [65, 65] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s32 -> s1 [66, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s32 -> s1 [91, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s33 -> s4 [0, 80] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s33 -> s4 [91, 65535] { R10741 += 1, R10669 += 1, R6619 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10741 += 1 };
  accepting s4, s34, s1, s7, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s2 [0, 64] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s3 [0, 65535] { R10743 += 1, R10670 += 1, R10671 += 1 };
  s0 -> s0 [0, 65535] { R10742 += 1, R10743 += 1 };
  s0 -> s4 [65, 65] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s5 [65, 65] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s6 [65, 65] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s7 [65, 65] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s1 [66, 65535] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s2 [66, 65535] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s1 [0, 64] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s2 [0, 64] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s4 [65, 65] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s5 [65, 65] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s6 [65, 65] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s7 [65, 65] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s1 [66, 65535] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s2 [66, 65535] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s2 [0, 64] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R10743 += 1 };
  s2 -> s6 [65, 65] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s7 [65, 65] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s2 [66, 65535] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s1 [0, 64] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s2 [0, 64] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s3 [0, 65535] { R10743 += 1, R10670 += 1, R10671 += 1 };
  s3 -> s4 [65, 65] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s5 [65, 65] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s6 [65, 65] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s7 [65, 65] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s1 [66, 65535] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s2 [66, 65535] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s4 -> s4 [0, 65535] { R10743 += 1, R10671 += 1, R8686 += 1, R8687 += 1 };
  s4 -> s6 [0, 65535] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R10743 += 1 };
  s6 -> s6 [0, 65535] { R10743 += 1, R10671 += 1, R8687 += 1, R8688 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10743 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10743 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s0 -> s2 [0, 64] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s0 [0, 65535] { R10744 += 1, R10745 += 1 };
  s0 -> s3 [0, 65535] { R10745 += 1, R10672 += 1, R10673 += 1 };
  s0 -> s4 [65, 65] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s5 [65, 65] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s6 [65, 65] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s0 -> s7 [65, 65] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s0 -> s1 [66, 65535] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s0 -> s2 [66, 65535] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s1 -> s1 [0, 64] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s1 -> s2 [0, 64] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s1 -> s4 [65, 65] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s1 -> s5 [65, 65] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s1 -> s6 [65, 65] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s1 -> s7 [65, 65] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s1 -> s1 [66, 65535] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s1 -> s2 [66, 65535] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s2 [0, 64] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s11 [0, 64] { R10745 += 1, R10673 += 1 };
  s2 -> s8 [65, 65] { R10745 += 1, R10673 += 1 };
  s2 -> s5 [65, 65] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s12 [65, 65] { R10745 += 1, R10673 += 1 };
  s2 -> s4 [65, 65] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s2 [66, 65535] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s11 [66, 65535] { R10745 += 1, R10673 += 1 };
  s3 -> s1 [0, 64] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s3 -> s2 [0, 64] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s3 -> s3 [0, 65535] { R10745 += 1, R10672 += 1, R10673 += 1 };
  s3 -> s4 [65, 65] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s3 -> s5 [65, 65] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s3 -> s6 [65, 65] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s3 -> s7 [65, 65] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s3 -> s1 [66, 65535] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s3 -> s2 [66, 65535] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s5 -> s8 [0, 65535] { R10745 += 1, R10673 += 1 };
  s5 -> s5 [0, 65535] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s7 -> s5 [0, 65535] { R10745 += 1, R10673 += 1, R10065 += 1, R10066 += 1 };
  s7 -> s7 [0, 65535] { R10745 += 1, R10673 += 1, R10064 += 1, R10065 += 1 };
  s8 -> s8 [0, 65535] { R10745 += 1, R10673 += 1 };
  s8 -> s9 [0, 65535] { R10745 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10745 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R10745 += 1, R10673 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10745 += 1 };
  s11 -> s8 [65, 65] { R10745 += 1, R10673 += 1 };
  s11 -> s12 [65, 65] { R10745 += 1, R10673 += 1 };
  s11 -> s11 [66, 65535] { R10745 += 1, R10673 += 1 };
  s12 -> s12 [0, 65535] { R10745 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10747 += 1, R10675 += 1 };
  s0 -> s0 [0, 65535] { R10746 += 1, R10747 += 1 };
  s0 -> s2 [0, 65535] { R10747 += 1, R10674 += 1, R10675 += 1 };
  s0 -> s3 [65, 65] { R10747 += 1, R10675 += 1 };
  s0 -> s4 [65, 65] { R10747 += 1, R10675 += 1 };
  s0 -> s1 [66, 65535] { R10747 += 1, R10675 += 1 };
  s1 -> s1 [0, 64] { R10747 += 1, R10675 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10747 += 1 };
  s1 -> s3 [65, 65] { R10747 += 1, R10675 += 1 };
  s1 -> s4 [65, 65] { R10747 += 1, R10675 += 1 };
  s1 -> s1 [66, 65535] { R10747 += 1, R10675 += 1 };
  s2 -> s1 [0, 64] { R10747 += 1, R10675 += 1 };
  s2 -> s2 [0, 65535] { R10747 += 1, R10674 += 1, R10675 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10747 += 1, R10675 += 1 };
  s2 -> s4 [65, 65] { R10747 += 1, R10675 += 1 };
  s2 -> s1 [66, 65535] { R10747 += 1, R10675 += 1 };
  s3 -> s3 [0, 65535] { R10747 += 1, R10675 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10747 += 1 };
  s4 -> s4 [0, 65535] { R10747 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10747 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s0 -> s2 [0, 64] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s0 -> s3 [0, 65535] { R10749 += 1, R10676 += 1, R10677 += 1 };
  s0 -> s0 [0, 65535] { R10748 += 1, R10749 += 1 };
  s0 -> s4 [65, 65] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s0 -> s5 [65, 65] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s0 -> s6 [65, 65] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s0 -> s7 [65, 65] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s0 -> s1 [66, 79] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s0 -> s2 [66, 65535] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s0 -> s8 [80, 80] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s0 -> s1 [81, 65535] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s1 -> s1 [0, 64] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s1 -> s4 [65, 65] { R10749 += 1, R10677 += 1 };
  s1 -> s5 [65, 65] { R10749 += 1, R10677 += 1 };
  s1 -> s1 [66, 79] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s1 -> s1 [66, 65535] { R10749 += 1, R10677 += 1 };
  s1 -> s8 [80, 80] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s1 -> s1 [81, 65535] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s1 [0, 64] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s2 [0, 64] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s2 -> s4 [65, 65] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s5 [65, 65] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s6 [65, 65] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s2 -> s7 [65, 65] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s2 -> s1 [66, 79] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s2 [66, 65535] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s2 -> s8 [80, 80] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s1 [81, 65535] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s1 [0, 64] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s2 [0, 64] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s3 -> s3 [0, 65535] { R10749 += 1, R10676 += 1, R10677 += 1 };
  s3 -> s4 [65, 65] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s5 [65, 65] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s6 [65, 65] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s3 -> s7 [65, 65] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s3 -> s1 [66, 79] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s2 [66, 65535] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s3 -> s8 [80, 80] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s1 [81, 65535] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s5 -> s5 [0, 79] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s5 -> s5 [0, 65535] { R10749 += 1, R10677 += 1 };
  s5 -> s12 [80, 80] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s5 -> s5 [81, 65535] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s6 -> s5 [0, 79] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s6 -> s6 [0, 65535] { R10749 += 1, R10677 += 1, R10614 += 1, R10615 += 1 };
  s6 -> s12 [80, 80] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s6 -> s5 [81, 65535] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s8 -> s9 [0, 64] { R10749 += 1, R10677 += 1 };
  s8 -> s8 [0, 64] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s8 -> s10 [65, 65] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s8 -> s11 [65, 65] { R10749 += 1, R10677 += 1 };
  s8 -> s12 [65, 65] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s8 -> s13 [65, 65] { R10749 += 1, R10677 += 1 };
  s8 -> s9 [66, 65535] { R10749 += 1, R10677 += 1 };
  s8 -> s8 [66, 65535] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s9 -> s9 [0, 64] { R10749 += 1, R10677 += 1 };
  s9 -> s9 [0, 65535] { R10749 += 1 };
  s9 -> s15 [0, 65535];
  s9 -> s11 [65, 65] { R10749 += 1, R10677 += 1 };
  s9 -> s13 [65, 65] { R10749 += 1, R10677 += 1 };
  s9 -> s9 [66, 65535] { R10749 += 1, R10677 += 1 };
  s11 -> s11 [0, 65535] { R10749 += 1 };
  s11 -> s15 [0, 65535];
  s12 -> s12 [0, 65535] { R10749 += 1, R10677 += 1, R10615 += 1, R10616 += 1 };
  s12 -> s13 [0, 65535] { R10749 += 1, R10677 += 1 };
  s13 -> s14 [0, 65535] { R10749 += 1 };
  s13 -> s15 [0, 65535];
  s13 -> s13 [0, 65535] { R10749 += 1, R10677 += 1 };
  s14 -> s14 [0, 65535] { R10749 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s13, s9, s14, s15, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R10643 && R6 = R10749 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R10643 && R58 = 0 && R59 = R10643 && R60 = 0 && R61 = R10643 && R62 = 0 && R63 = R10749 && R64 = 0 && R65 = R10749 && R66 = 0 && R67 = R10749 && R86 = 0 && R87 = 0 && R10620 = 0 && R10621 = R10643 && R10622 = 0 && R10623 = R10643 && R10624 = 0 && R10625 = R10643 && R10626 = 0 && R10627 = R10643 && R10628 = 0 && R10629 = R10643 && R10630 = 0 && R10631 = R10643 && R10632 = 0 && R10633 = R10643 && R10634 = 0 && R10635 = R10643 && R10636 = 0 && R10637 = R10643 && R10638 = 0 && R10639 = R10643 && R10640 = 0 && R10641 = R10643 && R10642 = 0 && R10644 = 0 && R10645 = R10749 && R10646 = 0 && R10647 = R10749 && R10648 = 0 && R10649 = R10749 && R10650 = 0 && R10651 = R10749 && R10652 = 0 && R10653 = R10749 && R10654 = 0 && R10655 = R10749 && R10658 = 0 && R10659 = 0 && R10668 = 0 && R10669 = 0 && R10670 = 0 && R10671 = 0 && R10672 = 0 && R10673 = 0 && R10676 = 0 && R10677 = 0 && R10678 = 10 && R10679 = R10749 && R10680 = 10 && R10681 = R10749 && R10682 = 10 && R10683 = R10749 && R10684 = 10 && R10685 = R10749 && R10686 = 10 && R10687 = R10749 && R10688 = 10 && R10689 = R10749 && R10690 = 10 && R10691 = R10749 && R10692 = 10 && R10693 = R10749 && R10694 = 10 && R10695 = R10749 && R10696 = 10 && R10697 = R10749 && R10698 = 10 && R10699 = R10749 && R10700 = 10 && R10701 = R10749 && R10702 = 10 && R10703 = R10749 && R10704 = 10 && R10705 = R10749 && R10706 = 10 && R10707 = R10749 && R10708 = 10 && R10709 = R10749 && R10710 = 10 && R10711 = R10749 && R10712 = 10 && R10713 = R10749 && R10714 = 10 && R10715 = R10749 && R10716 = 10 && R10717 = R10749 && R10718 = 10 && R10719 = R10749 && R10720 = 10 && R10721 = R10749 && R10722 = 10 && R10723 = R10749 && R10724 = 10 && R10725 = R10749 && R10726 = 10 && R10727 = R10749 && R10728 = 10 && R10729 = R10749 && R10730 = 10 && R10731 = R10749 && R10732 = 10 && R10733 = R10749 && R10734 = 10 && R10735 = R10749 && R10736 = 10 && R10737 = R10749 && R10738 = 10 && R10739 = R10749 && R10740 = 10 && R10741 = R10749 && R10742 = 10 && R10743 = R10749 && R10744 = 10 && R10745 = R10749 && R10746 = 10 && R10747 = R10749 && R10748 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R8691 + R8688 + R10619 + R10616 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R10643 && 9 < R10749 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R6620 + R6618 = 0 && R6621 + R6619 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R8689 + R8686 = 0 && R8690 + R8687 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R6620 + R6618 != 0 || R409 + R408 + -1*R6621 + -1*R6619 = 0 || R409 + R408 < 1) && (R8689 + R8686 != 0 || R409 + R408 + -1*R8690 + -1*R8687 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R10656 = 0 && R10657 = 0)) && (R34 = 0 || (R10660 = 0 && R10661 = 0)) && (R34 = 0 || (R10662 = 0 && R10663 = 0)) && (R34 = 0 || (R10664 = 0 && R10665 = 0)) && (R34 = 0 || (R10666 = 0 && R10667 = 0)) && (R34 = 0 || (R10674 = 0 && R10675 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R6620 + R6618 = 0 || R409 + R408 < 1) && (R8689 + R8686 = 0 || R409 + R408 < 1) && (R10069 + R10066 = 0 || (R10067 + R10064 = 0 && R10068 + R10065 = 0)) && (R10069 + R10066 = 0 || (R10617 + R10614 = 0 && R10618 + R10615 = 0));
// End of Parikh automata intersection problem
