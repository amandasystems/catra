// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6618, R6619, R6620, R6621, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R8686, R8687, R8688, R8689, R8690, R8691, R87, R9378, R9379, R9380, R9381, R9382, R9383, R9792, R9793, R9794, R9795, R9796, R9797, R9798, R9799, R9800, R9801, R9802, R9803, R9804, R9805, R9806, R9807, R9808, R9809, R9810, R9811, R9812, R9813, R9814, R9815, R9816, R9817, R9818, R9819, R9820, R9821, R9822, R9823, R9824, R9825, R9826, R9827, R9828, R9829, R9830, R9831, R9832, R9833, R9834, R9835, R9836, R9837, R9838, R9839, R9840, R9841, R9842, R9843, R9844, R9845, R9846, R9847, R9848, R9849, R9850, R9851, R9852, R9853, R9854, R9855, R9856, R9857, R9858, R9859, R9860, R9861, R9862, R9863, R9864, R9865, R9866, R9867, R9868, R9869, R9870, R9871, R9872, R9873, R9874, R9875, R9876, R9877, R9878, R9879, R9880, R9881, R9882, R9883, R9884, R9885, R9886, R9887, R9888, R9889, R9890, R9891, R9892, R9893, R9894, R9895, R9896, R9897, R9898, R9899, R9900, R9901, R9902, R9903, R9904, R9905, R9906, R9907, R9908, R9909, R9910, R9911, R9912, R9913, R9914, R9915, R9916, R9917, R9918, R9919, R9920, R9921, R9922, R9923, R9924, R9925, R9926, R9927;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R9822 += 1, R9823 += 1 };
  s0 -> s1 [0, 65535] { R9823 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9823 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R9825 += 1 };
  s0 -> s0 [0, 65535] { R9824 += 1, R9825 += 1 };
  s0 -> s2 [0, 65535] { R9825 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R9825 += 1 };
  s0 -> s1 [66, 65535] { R9825 += 1 };
  s1 -> s1 [0, 64] { R9825 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R9825 += 1 };
  s1 -> s1 [66, 65535] { R9825 += 1 };
  s2 -> s1 [0, 64] { R9825 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9825 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R9825 += 1 };
  s2 -> s1 [66, 65535] { R9825 += 1 };
  s3 -> s3 [0, 65535] { R9825 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R9826 += 1, R9827 += 1 };
  s0 -> s1 [0, 65535] { R9827 += 1, R69 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R9827 += 1, R68 += 1, R69 += 1 };
  s1 -> s4 [0, 65535] { R9827 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9827 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9827 += 1, R69 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R9827 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9827 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R9828 += 1, R9829 += 1 };
  s0 -> s1 [0, 65535] { R9829 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9829 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9831 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R9830 += 1, R9831 += 1 };
  s0 -> s2 [0, 65535] { R9831 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9831 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R9831 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535] { R9831 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9831 += 1, R85 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R9831 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R9832 += 1, R9833 += 1 };
  s0 -> s1 [0, 65535] { R9833 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [108, 108] { R9833 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R9833 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R9833 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R9833 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R9833 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R9833 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R9833 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R9833 += 1, R87 += 1 };
  s5 -> s14 [108, 108] { R9833 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R9833 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R9833 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R9833 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R9833 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R9833 += 1, R87 += 1 };
  s12 -> s12 [0, 65535] { R9833 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R9833 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R9833 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R9833 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R9833 += 1, R87 += 1 };
  s18 -> s13 [0, 65535];
  s18 -> s18 [0, 65535] { R9833 += 1 };
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R9857 += 1 };
  s0 -> s0 [0, 65535] { R9856 += 1, R9857 += 1 };
  s0 -> s1 [45, 45] { R9857 += 1 };
  s0 -> s2 [46, 46] { R9857 += 1 };
  s0 -> s1 [48, 62] { R9857 += 1 };
  s0 -> s3 [65, 65] { R9857 += 1 };
  s0 -> s1 [66, 65535] { R9857 += 1 };
  s1 -> s1 [0, 43] { R9857 += 1 };
  s1 -> s1 [45, 45] { R9857 += 1 };
  s1 -> s2 [46, 46] { R9857 += 1 };
  s1 -> s1 [48, 62] { R9857 += 1 };
  s1 -> s3 [65, 65] { R9857 += 1 };
  s1 -> s1 [66, 65535] { R9857 += 1 };
  s2 -> s1 [0, 43] { R9857 += 1 };
  s2 -> s1 [45, 45] { R9857 += 1 };
  s2 -> s2 [46, 46] { R9857 += 1 };
  s2 -> s1 [48, 62] { R9857 += 1 };
  s2 -> s3 [65, 65] { R9857 += 1 };
  s2 -> s1 [66, 114] { R9857 += 1 };
  s2 -> s8 [115, 115] { R9857 += 1 };
  s2 -> s1 [116, 65535] { R9857 += 1 };
  s3 -> s3 [0, 43] { R9857 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R9857 += 1 };
  s3 -> s4 [46, 46] { R9857 += 1 };
  s3 -> s3 [48, 62] { R9857 += 1 };
  s3 -> s3 [65, 65535] { R9857 += 1 };
  s4 -> s3 [0, 43] { R9857 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R9857 += 1 };
  s4 -> s4 [46, 46] { R9857 += 1 };
  s4 -> s3 [48, 62] { R9857 += 1 };
  s4 -> s3 [65, 114] { R9857 += 1 };
  s4 -> s5 [115, 115] { R9857 += 1 };
  s4 -> s3 [116, 65535] { R9857 += 1 };
  s5 -> s3 [0, 43] { R9857 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R9857 += 1 };
  s5 -> s4 [46, 46] { R9857 += 1 };
  s5 -> s3 [48, 62] { R9857 += 1 };
  s5 -> s3 [65, 110] { R9857 += 1 };
  s5 -> s6 [111, 111] { R9857 += 1 };
  s5 -> s3 [112, 65535] { R9857 += 1 };
  s6 -> s3 [0, 43] { R9857 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R9857 += 1 };
  s6 -> s4 [46, 46] { R9857 += 1 };
  s6 -> s3 [48, 62] { R9857 += 1 };
  s6 -> s3 [65, 98] { R9857 += 1 };
  s6 -> s7 [99, 99] { R9857 += 1 };
  s6 -> s3 [100, 65535] { R9857 += 1 };
  s7 -> s3 [0, 43] { R9857 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R9857 += 1 };
  s7 -> s4 [46, 46] { R9857 += 1 };
  s7 -> s3 [48, 62] { R9857 += 1 };
  s7 -> s3 [65, 106] { R9857 += 1 };
  s7 -> s3 [108, 65535] { R9857 += 1 };
  s8 -> s1 [0, 43] { R9857 += 1 };
  s8 -> s1 [45, 45] { R9857 += 1 };
  s8 -> s2 [46, 46] { R9857 += 1 };
  s8 -> s1 [48, 62] { R9857 += 1 };
  s8 -> s3 [65, 65] { R9857 += 1 };
  s8 -> s1 [66, 110] { R9857 += 1 };
  s8 -> s9 [111, 111] { R9857 += 1 };
  s8 -> s1 [112, 65535] { R9857 += 1 };
  s9 -> s1 [0, 43] { R9857 += 1 };
  s9 -> s1 [45, 45] { R9857 += 1 };
  s9 -> s2 [46, 46] { R9857 += 1 };
  s9 -> s1 [48, 62] { R9857 += 1 };
  s9 -> s3 [65, 65] { R9857 += 1 };
  s9 -> s1 [66, 98] { R9857 += 1 };
  s9 -> s10 [99, 99] { R9857 += 1 };
  s9 -> s1 [100, 65535] { R9857 += 1 };
  s10 -> s1 [0, 43] { R9857 += 1 };
  s10 -> s1 [45, 45] { R9857 += 1 };
  s10 -> s2 [46, 46] { R9857 += 1 };
  s10 -> s1 [48, 62] { R9857 += 1 };
  s10 -> s3 [65, 65] { R9857 += 1 };
  s10 -> s1 [66, 106] { R9857 += 1 };
  s10 -> s1 [108, 65535] { R9857 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R9859 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R9858 += 1, R9859 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9859 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R9861 += 1 };
  s0 -> s0 [0, 65535] { R9860 += 1, R9861 += 1 };
  s0 -> s2 [0, 65535] { R9861 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R9861 += 1 };
  s0 -> s1 [59, 65535] { R9861 += 1 };
  s1 -> s1 [0, 57] { R9861 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R9861 += 1 };
  s1 -> s1 [59, 65535] { R9861 += 1 };
  s2 -> s1 [0, 57] { R9861 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9861 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R9861 += 1 };
  s2 -> s1 [59, 65535] { R9861 += 1 };
  s3 -> s3 [0, 65535] { R9861 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R9863 += 1 };
  s0 -> s2 [0, 65535] { R9863 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R9862 += 1, R9863 += 1 };
  s0 -> s3 [43, 43] { R9863 += 1 };
  s0 -> s1 [44, 65535] { R9863 += 1 };
  s1 -> s1 [0, 42] { R9863 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R9863 += 1 };
  s1 -> s1 [44, 65535] { R9863 += 1 };
  s2 -> s1 [0, 42] { R9863 += 1 };
  s2 -> s2 [0, 65535] { R9863 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R9863 += 1 };
  s2 -> s1 [44, 65535] { R9863 += 1 };
  s3 -> s3 [0, 65535] { R9863 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R9865 += 1 };
  s0 -> s2 [0, 65535] { R9865 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R9864 += 1, R9865 += 1 };
  s0 -> s3 [65, 65] { R9865 += 1 };
  s0 -> s1 [66, 65535] { R9865 += 1 };
  s1 -> s1 [0, 64] { R9865 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R9865 += 1 };
  s1 -> s1 [66, 65535] { R9865 += 1 };
  s2 -> s1 [0, 64] { R9865 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9865 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R9865 += 1 };
  s2 -> s1 [66, 65535] { R9865 += 1 };
  s3 -> s3 [0, 65535] { R9865 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R9867 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R9867 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R9866 += 1, R9867 += 1 };
  s0 -> s3 [91, 91] { R9867 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R9867 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R9867 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9867 += 1 };
  s2 -> s1 [0, 90] { R9867 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9867 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R9867 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R9867 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R9867 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9867 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R9868 += 1, R9869 += 1 };
  s0 -> s1 [0, 65535] { R9869 += 1, R41 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R9869 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R9869 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9869 += 1 };
  s2 -> s1 [0, 65535] { R9869 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9869 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9869 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R9870 += 1, R9871 += 1 };
  s0 -> s1 [0, 65535] { R9871 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R9871 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535] { R9871 += 1 };
  s1 -> s1 [0, 65535] { R9871 += 1, R57 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9871 += 1, R57 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R9871 += 1, R56 += 1, R57 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9871 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R9873 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R9872 += 1, R9873 += 1 };
  s0 -> s2 [0, 65535] { R9873 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R9873 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R9873 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R9873 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R9873 += 1 };
  s2 -> s1 [0, 107] { R9873 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9873 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R9873 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R9873 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R9873 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R9873 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R9873 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R9873 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R9873 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R9873 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R9873 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R9873 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R9873 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R9873 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R9873 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R9873 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R9873 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R9873 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R9873 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R9873 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R9873 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R9873 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R9873 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R9873 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R9873 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R9873 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R9873 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R9873 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R9873 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R9873 += 1 };
  s10 -> s11 [115, 115] { R9873 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R9873 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R9873 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R9873 += 1 };
  s11 -> s12 [116, 116] { R9873 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R9873 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R9873 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R9873 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R9874 += 1, R9875 += 1 };
  s0 -> s1 [0, 65535] { R9875 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R9875 += 1, R60 += 1, R61 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9875 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R9875 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9875 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R9875 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9875 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R9877 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R9877 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R9876 += 1, R9877 += 1 };
  s1 -> s1 [0, 65535] { R9877 += 1, R74 += 1, R75 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9877 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9877 += 1 };
  s2 -> s2 [0, 65535] { R9877 += 1, R75 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9877 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R9878 += 1, R9879 += 1 };
  s0 -> s1 [0, 65535] { R9879 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9879 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R9881 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R9880 += 1, R9881 += 1 };
  s0 -> s2 [0, 65535] { R9881 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R9881 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R9881 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R9881 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R9881 += 1, R77 += 1, R42 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9881 += 1 };
  s1 -> s3 [43, 43] { R9881 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R9881 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R9881 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R9881 += 1, R77 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R9881 += 1, R76 += 1, R77 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R9881 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R9881 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R9881 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R9881 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9881 += 1 };
  s4 -> s4 [0, 65535] { R9881 += 1, R77 += 1, R42 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9881 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R9883 += 1, R9799 += 1 };
  s0 -> s0 [0, 65535] { R9882 += 1, R9883 += 1 };
  s0 -> s2 [0, 65535] { R9883 += 1, R9798 += 1, R9799 += 1 };
  s0 -> s1 [66, 65535] { R9883 += 1, R9799 += 1 };
  s1 -> s1 [0, 64] { R9883 += 1, R9799 += 1 };
  s1 -> s1 [0, 65535] { R9883 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R9883 += 1, R9799 += 1 };
  s2 -> s1 [0, 64] { R9883 += 1, R9799 += 1 };
  s2 -> s2 [0, 65535] { R9883 += 1, R9798 += 1, R9799 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R9883 += 1, R9799 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R9885 += 1, R9801 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R9884 += 1, R9885 += 1 };
  s0 -> s2 [0, 65535] { R9885 += 1, R9800 += 1, R9801 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9885 += 1, R9801 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R9885 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9885 += 1, R9801 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R9885 += 1, R9800 += 1, R9801 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9885 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R9887 += 1, R9803 += 1 };
  s0 -> s0 [0, 65535] { R9886 += 1, R9887 += 1 };
  s0 -> s2 [0, 65535] { R9887 += 1, R9802 += 1, R9803 += 1 };
  s0 -> s1 [80, 65535] { R9887 += 1, R9803 += 1 };
  s1 -> s1 [0, 65] { R9887 += 1, R9803 += 1 };
  s1 -> s1 [0, 65535] { R9887 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R9887 += 1, R9803 += 1 };
  s2 -> s1 [0, 65] { R9887 += 1, R9803 += 1 };
  s2 -> s2 [0, 65535] { R9887 += 1, R9802 += 1, R9803 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R9887 += 1, R9803 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R9889 += 1, R9804 += 1, R9805 += 1 };
  s0 -> s2 [0, 65535] { R9889 += 1, R9805 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R9888 += 1, R9889 += 1 };
  s1 -> s1 [0, 65535] { R9889 += 1, R9804 += 1, R9805 += 1 };
  s1 -> s2 [0, 65535] { R9889 += 1, R9805 += 1, R409 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9889 += 1, R9805 += 1, R409 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9889 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9889 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R9891 += 1, R9807 += 1 };
  s0 -> s2 [0, 65535] { R9891 += 1, R9806 += 1, R9807 += 1 };
  s0 -> s3 [0, 65535] { R9891 += 1, R9807 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R9890 += 1, R9891 += 1 };
  s0 -> s1 [81, 65535] { R9891 += 1, R9807 += 1 };
  s1 -> s1 [0, 79] { R9891 += 1, R9807 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9891 += 1 };
  s1 -> s1 [81, 65535] { R9891 += 1, R9807 += 1 };
  s2 -> s1 [0, 79] { R9891 += 1, R9807 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9891 += 1, R9806 += 1, R9807 += 1 };
  s2 -> s3 [0, 65535] { R9891 += 1, R9807 += 1, R411 += 1 };
  s2 -> s1 [81, 65535] { R9891 += 1, R9807 += 1 };
  s3 -> s1 [0, 79] { R9891 += 1, R9807 += 1 };
  s3 -> s4 [0, 65535] { R9891 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9891 += 1, R9807 += 1, R411 += 1 };
  s3 -> s1 [81, 65535] { R9891 += 1, R9807 += 1 };
  s4 -> s4 [0, 65535] { R9891 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R9893 += 1, R9809 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R9893 += 1, R9808 += 1, R9809 += 1 };
  s0 -> s3 [0, 65535] { R9893 += 1, R9809 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R9892 += 1, R9893 += 1 };
  s0 -> s1 [81, 65535] { R9893 += 1, R9809 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R9893 += 1, R9809 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R9893 += 1, R9809 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9893 += 1 };
  s1 -> s1 [81, 65535] { R9893 += 1, R9809 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R9893 += 1, R9809 += 1, R415 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9893 += 1, R9808 += 1, R9809 += 1 };
  s2 -> s3 [0, 65535] { R9893 += 1, R9809 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [81, 65535] { R9893 += 1, R9809 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R9893 += 1, R9809 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9893 += 1 };
  s3 -> s3 [0, 65535] { R9893 += 1, R9809 += 1, R414 += 1, R415 += 1 };
  s3 -> s1 [81, 65535] { R9893 += 1, R9809 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9893 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R9895 += 1, R9811 += 1, R420 += 1, R421 += 1 };
  s0 -> s2 [0, 65535] { R9895 += 1, R9811 += 1, R419 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R9894 += 1, R9895 += 1 };
  s0 -> s3 [0, 65535] { R9895 += 1, R9810 += 1, R9811 += 1 };
  s1 -> s1 [0, 65535] { R9895 += 1, R9811 += 1, R420 += 1, R421 += 1 };
  s1 -> s5 [0, 65535] { R9895 += 1 };
  s1 -> s6 [0, 65535] { R9895 += 1, R9811 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9895 += 1, R9811 += 1, R420 += 1, R421 += 1 };
  s2 -> s5 [0, 65535] { R9895 += 1 };
  s2 -> s2 [0, 65535] { R9895 += 1, R9811 += 1, R419 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9895 += 1, R9811 += 1, R420 += 1, R421 += 1 };
  s3 -> s2 [0, 65535] { R9895 += 1, R9811 += 1, R419 += 1, R420 += 1 };
  s3 -> s3 [0, 65535] { R9895 += 1, R9810 += 1, R9811 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9895 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9895 += 1 };
  s6 -> s6 [0, 65535] { R9895 += 1, R9811 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R9897 += 1, R9813 += 1, R6621 += 1 };
  s0 -> s2 [0, 65535] { R9897 += 1, R9812 += 1, R9813 += 1 };
  s0 -> s1 [0, 65535] { R9897 += 1, R9813 += 1 };
  s0 -> s0 [0, 65535] { R9896 += 1, R9897 += 1 };
  s0 -> s1 [91, 65535] { R9897 += 1, R9813 += 1, R6621 += 1 };
  s1 -> s1 [0, 80] { R9897 += 1, R9813 += 1, R6621 += 1 };
  s1 -> s4 [0, 65535] { R9897 += 1 };
  s1 -> s1 [0, 65535] { R9897 += 1, R9813 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R9897 += 1, R9813 += 1, R6621 += 1 };
  s2 -> s1 [0, 80] { R9897 += 1, R9813 += 1, R6621 += 1 };
  s2 -> s2 [0, 65535] { R9897 += 1, R9812 += 1, R9813 += 1 };
  s2 -> s1 [0, 65535] { R9897 += 1, R9813 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R9897 += 1, R9813 += 1, R6621 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9897 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R9899 += 1, R9815 += 1, R8690 += 1, R8691 += 1 };
  s0 -> s2 [0, 65535] { R9899 += 1, R9815 += 1 };
  s0 -> s0 [0, 65535] { R9898 += 1, R9899 += 1 };
  s0 -> s3 [0, 65535] { R9899 += 1, R9814 += 1, R9815 += 1 };
  s1 -> s1 [0, 65535] { R9899 += 1, R9815 += 1, R8690 += 1, R8691 += 1 };
  s1 -> s5 [0, 65535] { R9899 += 1 };
  s1 -> s2 [0, 65535] { R9899 += 1, R9815 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9899 += 1 };
  s2 -> s2 [0, 65535] { R9899 += 1, R9815 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9899 += 1, R9815 += 1, R8690 += 1, R8691 += 1 };
  s3 -> s2 [0, 65535] { R9899 += 1, R9815 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9899 += 1, R9814 += 1, R9815 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9899 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R9901 += 1, R9816 += 1, R9817 += 1 };
  s0 -> s2 [0, 65535] { R9901 += 1, R9817 += 1, R9382 += 1, R9383 += 1 };
  s0 -> s3 [0, 65535] { R9901 += 1, R9817 += 1 };
  s0 -> s0 [0, 65535] { R9900 += 1, R9901 += 1 };
  s1 -> s1 [0, 65535] { R9901 += 1, R9816 += 1, R9817 += 1 };
  s1 -> s2 [0, 65535] { R9901 += 1, R9817 += 1, R9382 += 1, R9383 += 1 };
  s1 -> s3 [0, 65535] { R9901 += 1, R9817 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9901 += 1, R9817 += 1, R9382 += 1, R9383 += 1 };
  s2 -> s4 [0, 65535] { R9901 += 1 };
  s2 -> s3 [0, 65535] { R9901 += 1, R9817 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R9901 += 1 };
  s3 -> s3 [0, 65535] { R9901 += 1, R9817 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9901 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R9903 += 1, R9819 += 1 };
  s0 -> s0 [0, 65535] { R9902 += 1, R9903 += 1 };
  s0 -> s2 [0, 65535] { R9903 += 1, R9818 += 1, R9819 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9903 += 1, R9819 += 1 };
  s1 -> s4 [0, 65535] { R9903 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9903 += 1, R9819 += 1 };
  s2 -> s2 [0, 65535] { R9903 += 1, R9818 += 1, R9819 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9903 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R9905 += 1, R9821 += 1 };
  s0 -> s2 [0, 65535] { R9905 += 1, R9820 += 1, R9821 += 1 };
  s0 -> s3 [0, 65535] { R9905 += 1, R9821 += 1, R9796 += 1, R9797 += 1 };
  s0 -> s0 [0, 65535] { R9904 += 1, R9905 += 1 };
  s1 -> s1 [0, 65535] { R9905 += 1, R9821 += 1 };
  s1 -> s4 [0, 65535] { R9905 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9905 += 1, R9821 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9905 += 1, R9820 += 1, R9821 += 1 };
  s2 -> s3 [0, 65535] { R9905 += 1, R9821 += 1, R9796 += 1, R9797 += 1 };
  s3 -> s1 [0, 65535] { R9905 += 1, R9821 += 1 };
  s3 -> s4 [0, 65535] { R9905 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9905 += 1, R9821 += 1, R9796 += 1, R9797 += 1 };
  s4 -> s4 [0, 65535] { R9905 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R9906 += 1, R9907 += 1 };
  s0 -> s1 [0, 65535] { R9907 += 1, R9835 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R9907 += 1, R9834 += 1, R9835 += 1 };
  s1 -> s4 [0, 65535] { R9907 += 1 };
  s1 -> s1 [0, 65535] { R9907 += 1, R9835 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9907 += 1, R9835 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9907 += 1, R9834 += 1, R9835 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9907 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R9909 += 1, R9837 += 1 };
  s0 -> s0 [0, 65535] { R9908 += 1, R9909 += 1 };
  s0 -> s2 [0, 65535] { R9909 += 1, R9836 += 1, R9837 += 1 };
  s0 -> s3 [65, 65] { R9909 += 1, R9837 += 1 };
  s0 -> s4 [65, 65] { R9909 += 1, R9837 += 1 };
  s0 -> s5 [80, 80] { R9909 += 1, R9837 += 1 };
  s0 -> s1 [81, 65535] { R9909 += 1, R9837 += 1 };
  s1 -> s1 [0, 64] { R9909 += 1, R9837 += 1 };
  s1 -> s3 [65, 65] { R9909 += 1, R9837 += 1 };
  s1 -> s4 [65, 65] { R9909 += 1, R9837 += 1 };
  s1 -> s5 [80, 80] { R9909 += 1, R9837 += 1 };
  s1 -> s1 [81, 65535] { R9909 += 1, R9837 += 1 };
  s2 -> s1 [0, 64] { R9909 += 1, R9837 += 1 };
  s2 -> s2 [0, 65535] { R9909 += 1, R9836 += 1, R9837 += 1 };
  s2 -> s3 [65, 65] { R9909 += 1, R9837 += 1 };
  s2 -> s4 [65, 65] { R9909 += 1, R9837 += 1 };
  s2 -> s5 [80, 80] { R9909 += 1, R9837 += 1 };
  s2 -> s1 [81, 65535] { R9909 += 1, R9837 += 1 };
  s3 -> s3 [0, 65] { R9909 += 1, R9837 += 1 };
  s3 -> s7 [80, 80] { R9909 += 1, R9837 += 1 };
  s3 -> s3 [81, 65535] { R9909 += 1, R9837 += 1 };
  s5 -> s5 [0, 64] { R9909 += 1, R9837 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9909 += 1 };
  s5 -> s7 [65, 65] { R9909 += 1, R9837 += 1 };
  s5 -> s8 [65, 65] { R9909 += 1, R9837 += 1 };
  s5 -> s5 [80, 65535] { R9909 += 1, R9837 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R9909 += 1, R9837 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9909 += 1 };
  s7 -> s7 [80, 65535] { R9909 += 1, R9837 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9909 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R9911 += 1, R9839 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R9911 += 1, R9838 += 1, R9839 += 1 };
  s0 -> s0 [0, 65535] { R9910 += 1, R9911 += 1 };
  s0 -> s3 [65, 65] { R9911 += 1, R9839 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R9911 += 1, R9839 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R9911 += 1, R9839 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R9911 += 1, R9839 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9911 += 1 };
  s1 -> s3 [65, 65] { R9911 += 1, R9839 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R9911 += 1, R9839 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R9911 += 1, R9839 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R9911 += 1, R9839 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R9911 += 1, R9838 += 1, R9839 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9911 += 1, R9839 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R9911 += 1, R9839 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R9911 += 1, R9839 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R9911 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9911 += 1, R9839 += 1, R408 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9911 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9911 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R9913 += 1, R9841 += 1, R410 += 1 };
  s0 -> s2 [0, 65535] { R9913 += 1, R9840 += 1, R9841 += 1 };
  s0 -> s0 [0, 65535] { R9912 += 1, R9913 += 1 };
  s0 -> s3 [65, 65] { R9913 += 1, R9841 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R9913 += 1, R9841 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R9913 += 1, R9841 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R9913 += 1, R9841 += 1, R410 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9913 += 1 };
  s1 -> s3 [65, 65] { R9913 += 1, R9841 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R9913 += 1, R9841 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R9913 += 1, R9841 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R9913 += 1, R9841 += 1, R410 += 1 };
  s2 -> s2 [0, 65535] { R9913 += 1, R9840 += 1, R9841 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9913 += 1, R9841 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R9913 += 1, R9841 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R9913 += 1, R9841 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9913 += 1 };
  s3 -> s3 [0, 65535] { R9913 += 1, R9841 += 1, R410 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9913 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9913 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R9915 += 1, R9842 += 1, R9843 += 1 };
  s0 -> s0 [0, 65535] { R9914 += 1, R9915 += 1 };
  s0 -> s3 [65, 65] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R9915 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9915 += 1, R9842 += 1, R9843 += 1 };
  s2 -> s3 [65, 65] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R9915 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9915 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9915 += 1, R9843 += 1, R412 += 1, R413 += 1 };
  s5 -> s5 [0, 65535] { R9915 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R9916 += 1, R9917 += 1 };
  s0 -> s2 [0, 65535] { R9917 += 1, R9844 += 1, R9845 += 1 };
  s0 -> s3 [65, 65] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 65535] { R9917 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s2 -> s2 [0, 65535] { R9917 += 1, R9844 += 1, R9845 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s3 -> s3 [0, 65535] { R9917 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9917 += 1 };
  s4 -> s4 [0, 65535] { R9917 += 1, R9845 += 1, R416 += 1, R417 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9917 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s0 -> s3 [0, 65535] { R9919 += 1, R9846 += 1, R9847 += 1 };
  s0 -> s0 [0, 65535] { R9918 += 1, R9919 += 1 };
  s0 -> s4 [65, 65] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s0 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s0 -> s7 [65, 65] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s0 -> s1 [66, 65535] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s2 [91, 107] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s0 -> s8 [108, 108] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s0 -> s2 [109, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s1 -> s1 [0, 64] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s1 -> s4 [65, 65] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s1 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s1 -> s7 [65, 65] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s1 -> s1 [66, 65535] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s1 -> s2 [91, 107] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s1 -> s8 [108, 108] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s1 -> s2 [109, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s2 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s2 -> s2 [0, 65535] { R9919 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s5 [65, 65] { R9919 += 1, R9847 += 1 };
  s2 -> s6 [65, 65] { R9919 += 1, R9847 += 1 };
  s2 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s2 -> s2 [66, 65535] { R9919 += 1, R9847 += 1 };
  s2 -> s2 [91, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s3 -> s1 [0, 64] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535] { R9919 += 1, R9846 += 1, R9847 += 1 };
  s3 -> s4 [65, 65] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s3 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s3 -> s7 [65, 65] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s3 -> s1 [66, 65535] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s2 [91, 107] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s3 -> s8 [108, 108] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s3 -> s2 [109, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s5 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s5 -> s35 [0, 65535] { R9919 += 1 };
  s5 -> s5 [0, 65535] { R9919 += 1, R9847 += 1 };
  s5 -> s34 [0, 65535];
  s5 -> s5 [91, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s6 -> s6 [0, 65535] { R9919 += 1 };
  s6 -> s34 [0, 65535];
  s7 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s7 -> s7 [0, 65535] { R9919 += 1, R9847 += 1, R6618 += 1, R6619 += 1 };
  s7 -> s5 [91, 107] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s7 -> s9 [108, 108] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s7 -> s5 [109, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s8 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s8 -> s8 [0, 64] { R9919 += 1, R9847 += 1 };
  s8 -> s9 [65, 65] { R9919 += 1, R9847 += 1 };
  s8 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s8 -> s10 [65, 65] { R9919 += 1, R9847 += 1 };
  s8 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s8 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s8 -> s8 [66, 65535] { R9919 += 1, R9847 += 1 };
  s8 -> s2 [91, 110] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s8 -> s11 [111, 111] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s8 -> s2 [112, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s9 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s9 -> s9 [0, 65535] { R9919 += 1, R9847 += 1 };
  s9 -> s5 [91, 110] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s9 -> s13 [111, 111] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s9 -> s5 [112, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s11 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s11 -> s11 [0, 64] { R9919 += 1, R9847 += 1 };
  s11 -> s12 [65, 65] { R9919 += 1, R9847 += 1 };
  s11 -> s13 [65, 65] { R9919 += 1, R9847 += 1 };
  s11 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s11 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s11 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s11 -> s11 [66, 65535] { R9919 += 1, R9847 += 1 };
  s11 -> s2 [91, 98] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s11 -> s14 [99, 99] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s11 -> s2 [100, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s13 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s13 -> s13 [0, 65535] { R9919 += 1, R9847 += 1 };
  s13 -> s5 [91, 98] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s13 -> s17 [99, 99] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s13 -> s5 [100, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s14 -> s14 [0, 64] { R9919 += 1, R9847 += 1 };
  s14 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s14 -> s15 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s14 -> s16 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s14 -> s17 [65, 65] { R9919 += 1, R9847 += 1 };
  s14 -> s18 [65, 65] { R9919 += 1, R9847 += 1 };
  s14 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s14 -> s14 [66, 65535] { R9919 += 1, R9847 += 1 };
  s14 -> s2 [91, 96] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s14 -> s19 [97, 97] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s14 -> s2 [98, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s16 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s16 -> s16 [0, 65535] { R9919 += 1, R9847 += 1 };
  s16 -> s5 [91, 107] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s16 -> s22 [108, 108] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s16 -> s5 [109, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s17 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s17 -> s17 [0, 65535] { R9919 += 1, R9847 += 1 };
  s17 -> s5 [91, 96] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s17 -> s16 [97, 97] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s17 -> s5 [98, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s19 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s19 -> s19 [0, 64] { R9919 += 1, R9847 += 1 };
  s19 -> s15 [65, 65] { R9919 += 1, R9847 += 1 };
  s19 -> s16 [65, 65] { R9919 += 1, R9847 += 1 };
  s19 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s19 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s19 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s19 -> s19 [66, 65535] { R9919 += 1, R9847 += 1 };
  s19 -> s2 [91, 107] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s19 -> s20 [108, 108] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s19 -> s2 [109, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s20 -> s20 [0, 64] { R9919 += 1, R9847 += 1 };
  s20 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s20 -> s21 [65, 65] { R9919 += 1, R9847 += 1 };
  s20 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s20 -> s22 [65, 65] { R9919 += 1, R9847 += 1 };
  s20 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s20 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s20 -> s20 [66, 65535] { R9919 += 1, R9847 += 1 };
  s20 -> s2 [91, 103] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s20 -> s23 [104, 104] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s20 -> s2 [105, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s22 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s22 -> s22 [0, 65535] { R9919 += 1, R9847 += 1 };
  s22 -> s5 [91, 103] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s22 -> s24 [104, 104] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s22 -> s5 [105, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s23 -> s23 [0, 64] { R9919 += 1, R9847 += 1 };
  s23 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s23 -> s24 [65, 65] { R9919 += 1, R9847 += 1 };
  s23 -> s25 [65, 65] { R9919 += 1, R9847 += 1 };
  s23 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s23 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s23 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s23 -> s23 [66, 65535] { R9919 += 1, R9847 += 1 };
  s23 -> s2 [91, 110] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s23 -> s26 [111, 111] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s23 -> s2 [112, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s24 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s24 -> s24 [0, 65535] { R9919 += 1, R9847 += 1 };
  s24 -> s5 [91, 110] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s24 -> s28 [111, 111] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s24 -> s5 [112, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s26 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s26 -> s26 [0, 64] { R9919 += 1, R9847 += 1 };
  s26 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s26 -> s27 [65, 65] { R9919 += 1, R9847 += 1 };
  s26 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s26 -> s28 [65, 65] { R9919 += 1, R9847 += 1 };
  s26 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s26 -> s26 [66, 65535] { R9919 += 1, R9847 += 1 };
  s26 -> s2 [91, 114] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s26 -> s29 [115, 115] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s26 -> s2 [116, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s28 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s28 -> s28 [0, 65535] { R9919 += 1, R9847 += 1 };
  s28 -> s5 [91, 114] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s28 -> s30 [115, 115] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s28 -> s5 [116, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s29 -> s29 [0, 64] { R9919 += 1, R9847 += 1 };
  s29 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s29 -> s30 [65, 65] { R9919 += 1, R9847 += 1 };
  s29 -> s31 [65, 65] { R9919 += 1, R9847 += 1 };
  s29 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s29 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s29 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s29 -> s29 [66, 65535] { R9919 += 1, R9847 += 1 };
  s29 -> s2 [91, 115] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s29 -> s32 [116, 116] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s29 -> s2 [117, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s30 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s30 -> s30 [0, 65535] { R9919 += 1, R9847 += 1 };
  s30 -> s5 [91, 115] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s30 -> s33 [116, 116] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s30 -> s5 [117, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s32 -> s2 [0, 64] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s32 -> s5 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s32 -> s6 [65, 65] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s32 -> s2 [66, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s32 -> s2 [91, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s33 -> s5 [0, 80] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s33 -> s5 [91, 65535] { R9919 += 1, R9847 += 1, R6619 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R9919 += 1 };
  s35 -> s34 [0, 65535];
  accepting s34, s5, s2, s6, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s2 [0, 64] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s0 [0, 65535] { R9920 += 1, R9921 += 1 };
  s0 -> s3 [0, 65535] { R9921 += 1, R9848 += 1, R9849 += 1 };
  s0 -> s4 [65, 65] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s5 [65, 65] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s0 -> s6 [65, 65] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s7 [65, 65] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s1 [66, 65535] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s0 -> s2 [66, 65535] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s1 [0, 64] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s2 [0, 64] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s4 [65, 65] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s5 [65, 65] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s1 -> s6 [65, 65] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s7 [65, 65] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s1 [66, 65535] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s2 [66, 65535] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s2 [0, 64] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R9921 += 1 };
  s2 -> s4 [65, 65] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s5 [65, 65] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s2 -> s2 [66, 65535] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s1 [0, 64] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s2 [0, 64] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s3 [0, 65535] { R9921 += 1, R9848 += 1, R9849 += 1 };
  s3 -> s4 [65, 65] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s5 [65, 65] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s3 -> s6 [65, 65] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s7 [65, 65] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s1 [66, 65535] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s3 -> s2 [66, 65535] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s4 -> s4 [0, 65535] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R9921 += 1 };
  s5 -> s5 [0, 65535] { R9921 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R9921 += 1, R9849 += 1, R8687 += 1, R8688 += 1 };
  s7 -> s7 [0, 65535] { R9921 += 1, R9849 += 1, R8686 += 1, R8687 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9921 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s0 -> s2 [0, 64] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s0 -> s3 [0, 65535] { R9923 += 1, R9850 += 1, R9851 += 1 };
  s0 -> s0 [0, 65535] { R9922 += 1, R9923 += 1 };
  s0 -> s4 [65, 65] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s0 -> s5 [65, 65] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s0 -> s6 [65, 65] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s0 -> s7 [65, 65] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s0 -> s1 [66, 65535] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s0 -> s2 [66, 65535] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s1 -> s1 [0, 64] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s1 -> s2 [0, 64] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s1 -> s4 [65, 65] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s1 -> s5 [65, 65] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s1 -> s6 [65, 65] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s1 -> s7 [65, 65] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s1 -> s1 [66, 65535] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s1 -> s2 [66, 65535] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s2 -> s2 [0, 64] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s2 -> s2 [0, 65535] { R9923 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [65, 65] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s2 -> s6 [65, 65] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s2 -> s2 [66, 65535] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s3 -> s1 [0, 64] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s3 -> s2 [0, 64] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s3 -> s3 [0, 65535] { R9923 += 1, R9850 += 1, R9851 += 1 };
  s3 -> s4 [65, 65] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s3 -> s5 [65, 65] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s3 -> s6 [65, 65] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s3 -> s7 [65, 65] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s3 -> s1 [66, 65535] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s3 -> s2 [66, 65535] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s4 -> s4 [0, 65535] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s4 -> s9 [0, 65535] { R9923 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R9923 += 1, R9851 += 1, R9379 += 1, R9380 += 1 };
  s5 -> s5 [0, 65535] { R9923 += 1, R9851 += 1, R9378 += 1, R9379 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9923 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9923 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R9925 += 1, R9853 += 1 };
  s0 -> s0 [0, 65535] { R9924 += 1, R9925 += 1 };
  s0 -> s2 [0, 65535] { R9925 += 1, R9852 += 1, R9853 += 1 };
  s0 -> s3 [65, 65] { R9925 += 1, R9853 += 1 };
  s0 -> s4 [65, 65] { R9925 += 1, R9853 += 1 };
  s0 -> s1 [66, 65535] { R9925 += 1, R9853 += 1 };
  s1 -> s1 [0, 64] { R9925 += 1, R9853 += 1 };
  s1 -> s1 [0, 65535] { R9925 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9925 += 1, R9853 += 1 };
  s1 -> s4 [65, 65] { R9925 += 1, R9853 += 1 };
  s1 -> s1 [66, 65535] { R9925 += 1, R9853 += 1 };
  s2 -> s1 [0, 64] { R9925 += 1, R9853 += 1 };
  s2 -> s2 [0, 65535] { R9925 += 1, R9852 += 1, R9853 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9925 += 1, R9853 += 1 };
  s2 -> s4 [65, 65] { R9925 += 1, R9853 += 1 };
  s2 -> s1 [66, 65535] { R9925 += 1, R9853 += 1 };
  s3 -> s3 [0, 65535] { R9925 += 1, R9853 += 1 };
  s3 -> s6 [0, 65535] { R9925 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9925 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9925 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s0 -> s2 [0, 64] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s0 -> s3 [0, 65535] { R9927 += 1, R9854 += 1, R9855 += 1 };
  s0 -> s0 [0, 65535] { R9926 += 1, R9927 += 1 };
  s0 -> s4 [65, 65] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s0 -> s5 [65, 65] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s0 -> s6 [65, 65] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s0 -> s7 [65, 65] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s0 -> s2 [66, 79] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s0 -> s1 [66, 65535] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s0 -> s8 [80, 80] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s0 -> s2 [81, 65535] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s1 -> s1 [0, 64] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s1 -> s2 [0, 64] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s1 -> s4 [65, 65] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s1 -> s5 [65, 65] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s1 -> s6 [65, 65] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s1 -> s7 [65, 65] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s1 -> s2 [66, 79] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s1 -> s1 [66, 65535] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s1 -> s8 [80, 80] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s1 -> s2 [81, 65535] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s2 -> s2 [0, 64] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s2 -> s6 [65, 65] { R9927 += 1, R9855 += 1 };
  s2 -> s7 [65, 65] { R9927 += 1, R9855 += 1 };
  s2 -> s2 [66, 79] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s2 -> s2 [66, 65535] { R9927 += 1, R9855 += 1 };
  s2 -> s8 [80, 80] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s2 -> s2 [81, 65535] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s3 -> s1 [0, 64] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s3 -> s2 [0, 64] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s3 -> s3 [0, 65535] { R9927 += 1, R9854 += 1, R9855 += 1 };
  s3 -> s4 [65, 65] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s3 -> s5 [65, 65] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s3 -> s6 [65, 65] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s3 -> s7 [65, 65] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s3 -> s2 [66, 79] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s3 -> s1 [66, 65535] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s3 -> s8 [80, 80] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s3 -> s2 [81, 65535] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s5 -> s7 [0, 79] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s5 -> s5 [0, 65535] { R9927 += 1, R9855 += 1, R9792 += 1, R9793 += 1 };
  s5 -> s11 [80, 80] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s5 -> s7 [81, 65535] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s7 -> s7 [0, 79] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s7 -> s7 [0, 65535] { R9927 += 1, R9855 += 1 };
  s7 -> s11 [80, 80] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s7 -> s7 [81, 65535] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s8 -> s8 [0, 64] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s8 -> s8 [0, 65535] { R9927 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s8 -> s11 [65, 65] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s8 -> s8 [66, 65535] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9927 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R9927 += 1 };
  s11 -> s11 [0, 65535] { R9927 += 1, R9855 += 1, R9793 += 1, R9794 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9927 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R9821 && R6 = R9927 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R9821 && R58 = 0 && R59 = R9821 && R60 = 0 && R61 = R9821 && R62 = 0 && R63 = R9927 && R64 = 0 && R65 = R9927 && R66 = 0 && R67 = R9927 && R86 = 0 && R87 = 0 && R9798 = 0 && R9799 = R9821 && R9800 = 0 && R9801 = R9821 && R9802 = 0 && R9803 = R9821 && R9804 = 0 && R9805 = R9821 && R9806 = 0 && R9807 = R9821 && R9808 = 0 && R9809 = R9821 && R9810 = 0 && R9811 = R9821 && R9812 = 0 && R9813 = R9821 && R9814 = 0 && R9815 = R9821 && R9816 = 0 && R9817 = R9821 && R9818 = 0 && R9819 = R9821 && R9820 = 0 && R9822 = 0 && R9823 = R9927 && R9824 = 0 && R9825 = R9927 && R9826 = 0 && R9827 = R9927 && R9828 = 0 && R9829 = R9927 && R9830 = 0 && R9831 = R9927 && R9832 = 0 && R9833 = R9927 && R9836 = 0 && R9837 = 0 && R9846 = 0 && R9847 = 0 && R9848 = 0 && R9849 = 0 && R9850 = 0 && R9851 = 0 && R9854 = 0 && R9855 = 0 && R9856 = 10 && R9857 = R9927 && R9858 = 10 && R9859 = R9927 && R9860 = 10 && R9861 = R9927 && R9862 = 10 && R9863 = R9927 && R9864 = 10 && R9865 = R9927 && R9866 = 10 && R9867 = R9927 && R9868 = 10 && R9869 = R9927 && R9870 = 10 && R9871 = R9927 && R9872 = 10 && R9873 = R9927 && R9874 = 10 && R9875 = R9927 && R9876 = 10 && R9877 = R9927 && R9878 = 10 && R9879 = R9927 && R9880 = 10 && R9881 = R9927 && R9882 = 10 && R9883 = R9927 && R9884 = 10 && R9885 = R9927 && R9886 = 10 && R9887 = R9927 && R9888 = 10 && R9889 = R9927 && R9890 = 10 && R9891 = R9927 && R9892 = 10 && R9893 = R9927 && R9894 = 10 && R9895 = R9927 && R9896 = 10 && R9897 = R9927 && R9898 = 10 && R9899 = R9927 && R9900 = 10 && R9901 = R9927 && R9902 = 10 && R9903 = R9927 && R9904 = 10 && R9905 = R9927 && R9906 = 10 && R9907 = R9927 && R9908 = 10 && R9909 = R9927 && R9910 = 10 && R9911 = R9927 && R9912 = 10 && R9913 = R9927 && R9914 = 10 && R9915 = R9927 && R9916 = 10 && R9917 = R9927 && R9918 = 10 && R9919 = R9927 && R9920 = 10 && R9921 = R9927 && R9922 = 10 && R9923 = R9927 && R9924 = 10 && R9925 = R9927 && R9926 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R8691 + R8688 + R9797 + R9794 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R9821 && 9 < R9927 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R6620 + R6618 = 0 && R6621 + R6619 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R8689 + R8686 = 0 && R8690 + R8687 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R6620 + R6618 != 0 || R409 + R408 + -1*R6621 + -1*R6619 = 0 || R409 + R408 < 1) && (R8689 + R8686 != 0 || R409 + R408 + -1*R8690 + -1*R8687 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R9834 = 0 && R9835 = 0)) && (R34 = 0 || (R9838 = 0 && R9839 = 0)) && (R34 = 0 || (R9840 = 0 && R9841 = 0)) && (R34 = 0 || (R9842 = 0 && R9843 = 0)) && (R34 = 0 || (R9844 = 0 && R9845 = 0)) && (R34 = 0 || (R9852 = 0 && R9853 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R6620 + R6618 = 0 || R409 + R408 < 1) && (R8689 + R8686 = 0 || R409 + R408 < 1) && (R9383 + R9380 = 0 || (R9381 + R9378 = 0 && R9382 + R9379 = 0)) && (R9383 + R9380 = 0 || (R9795 + R9792 = 0 && R9796 + R9793 = 0));
// End of Parikh automata intersection problem
