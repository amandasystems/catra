// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6618, R6619, R6620, R6621, R6622, R6623, R6624, R6625, R6626, R6627, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R8000, R8001, R8002, R8003, R8004, R8005, R81, R8142, R8143, R8144, R8145, R8146, R8147, R8148, R8149, R8150, R8151, R8152, R8153, R8154, R8155, R8156, R8157, R8158, R8159, R8160, R8161, R8162, R8163, R8164, R8165, R8166, R8167, R8168, R8169, R8170, R8171, R8172, R8173, R8174, R8175, R8176, R8177, R8178, R8179, R8180, R8181, R8182, R8183, R8184, R8185, R8186, R8187, R8188, R8189, R8190, R8191, R8192, R8193, R8194, R8195, R8196, R8197, R8198, R8199, R82, R8200, R8201, R8202, R8203, R8204, R8205, R8206, R8207, R8208, R8209, R8210, R8211, R8212, R8213, R8214, R8215, R8216, R8217, R8218, R8219, R8220, R8221, R8222, R8223, R8224, R8225, R8226, R8227, R8228, R8229, R8230, R8231, R8232, R8233, R8234, R8235, R8236, R8237, R8238, R8239, R8240, R8241, R8242, R8243, R8244, R8245, R8246, R8247, R8248, R8249, R8250, R8251, R8252, R8253, R8254, R8255, R8256, R8257, R8258, R8259, R8260, R8261, R8262, R8263, R8264, R8265, R8266, R8267, R8268, R8269, R8270, R8271, R8272, R8273, R8274, R8275, R8276, R8277, R83, R84, R85, R86, R87;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R8172 += 1, R8173 += 1 };
  s0 -> s1 [0, 65535] { R8173 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R8173 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R8175 += 1 };
  s0 -> s0 [0, 65535] { R8174 += 1, R8175 += 1 };
  s0 -> s2 [0, 65535] { R8175 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R8175 += 1 };
  s0 -> s1 [66, 65535] { R8175 += 1 };
  s1 -> s1 [0, 64] { R8175 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8175 += 1 };
  s1 -> s1 [66, 65535] { R8175 += 1 };
  s2 -> s1 [0, 64] { R8175 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8175 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R8175 += 1 };
  s2 -> s1 [66, 65535] { R8175 += 1 };
  s3 -> s3 [0, 65535] { R8175 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R8176 += 1, R8177 += 1 };
  s0 -> s1 [0, 65535] { R8177 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R8177 += 1, R69 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R8177 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R8177 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8177 += 1 };
  s2 -> s2 [0, 65535] { R8177 += 1, R69 += 1, R27 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8177 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8179 += 1 };
  s0 -> s0 [0, 65535] { R8178 += 1, R8179 += 1 };
  s1 -> s1 [0, 65535] { R8179 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R8181 += 1, R85 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R8181 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R8180 += 1, R8181 += 1 };
  s1 -> s1 [0, 65535] { R8181 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535] { R8181 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8181 += 1, R85 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R8181 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8181 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R8182 += 1, R8183 += 1 };
  s0 -> s1 [0, 65535] { R8183 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [108, 108] { R8183 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R8183 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [108, 108] { R8183 += 1, R87 += 1 };
  s2 -> s3 [111, 111] { R8183 += 1, R87 += 1 };
  s3 -> s4 [99, 99] { R8183 += 1, R87 += 1 };
  s4 -> s5 [65, 65] { R8183 += 1, R87 += 1 };
  s4 -> s6 [65, 65] { R8183 += 1, R87 += 1 };
  s4 -> s7 [97, 97] { R8183 += 1, R87 += 1 };
  s6 -> s14 [108, 108] { R8183 += 1, R87 += 1 };
  s7 -> s8 [108, 108] { R8183 += 1, R87 += 1 };
  s8 -> s9 [104, 104] { R8183 += 1, R87 += 1 };
  s9 -> s10 [111, 111] { R8183 += 1, R87 += 1 };
  s10 -> s11 [115, 115] { R8183 += 1, R87 += 1 };
  s11 -> s12 [116, 116] { R8183 += 1, R87 += 1 };
  s12 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R8183 += 1 };
  s13 -> s13 [0, 65535];
  s14 -> s15 [104, 104] { R8183 += 1, R87 += 1 };
  s15 -> s16 [111, 111] { R8183 += 1, R87 += 1 };
  s16 -> s17 [115, 115] { R8183 += 1, R87 += 1 };
  s17 -> s18 [116, 116] { R8183 += 1, R87 += 1 };
  s18 -> s13 [0, 65535];
  s18 -> s18 [0, 65535] { R8183 += 1 };
  accepting s12, s13, s18;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R8207 += 1 };
  s0 -> s0 [0, 65535] { R8206 += 1, R8207 += 1 };
  s0 -> s1 [45, 45] { R8207 += 1 };
  s0 -> s2 [46, 46] { R8207 += 1 };
  s0 -> s1 [48, 62] { R8207 += 1 };
  s0 -> s3 [65, 65] { R8207 += 1 };
  s0 -> s1 [66, 65535] { R8207 += 1 };
  s1 -> s1 [0, 43] { R8207 += 1 };
  s1 -> s1 [45, 45] { R8207 += 1 };
  s1 -> s2 [46, 46] { R8207 += 1 };
  s1 -> s1 [48, 62] { R8207 += 1 };
  s1 -> s3 [65, 65] { R8207 += 1 };
  s1 -> s1 [66, 65535] { R8207 += 1 };
  s2 -> s1 [0, 43] { R8207 += 1 };
  s2 -> s1 [45, 45] { R8207 += 1 };
  s2 -> s2 [46, 46] { R8207 += 1 };
  s2 -> s1 [48, 62] { R8207 += 1 };
  s2 -> s3 [65, 65] { R8207 += 1 };
  s2 -> s1 [66, 114] { R8207 += 1 };
  s2 -> s8 [115, 115] { R8207 += 1 };
  s2 -> s1 [116, 65535] { R8207 += 1 };
  s3 -> s3 [0, 43] { R8207 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R8207 += 1 };
  s3 -> s4 [46, 46] { R8207 += 1 };
  s3 -> s3 [48, 62] { R8207 += 1 };
  s3 -> s3 [65, 65535] { R8207 += 1 };
  s4 -> s3 [0, 43] { R8207 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R8207 += 1 };
  s4 -> s4 [46, 46] { R8207 += 1 };
  s4 -> s3 [48, 62] { R8207 += 1 };
  s4 -> s3 [65, 114] { R8207 += 1 };
  s4 -> s5 [115, 115] { R8207 += 1 };
  s4 -> s3 [116, 65535] { R8207 += 1 };
  s5 -> s3 [0, 43] { R8207 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R8207 += 1 };
  s5 -> s4 [46, 46] { R8207 += 1 };
  s5 -> s3 [48, 62] { R8207 += 1 };
  s5 -> s3 [65, 110] { R8207 += 1 };
  s5 -> s6 [111, 111] { R8207 += 1 };
  s5 -> s3 [112, 65535] { R8207 += 1 };
  s6 -> s3 [0, 43] { R8207 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R8207 += 1 };
  s6 -> s4 [46, 46] { R8207 += 1 };
  s6 -> s3 [48, 62] { R8207 += 1 };
  s6 -> s3 [65, 98] { R8207 += 1 };
  s6 -> s7 [99, 99] { R8207 += 1 };
  s6 -> s3 [100, 65535] { R8207 += 1 };
  s7 -> s3 [0, 43] { R8207 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R8207 += 1 };
  s7 -> s4 [46, 46] { R8207 += 1 };
  s7 -> s3 [48, 62] { R8207 += 1 };
  s7 -> s3 [65, 106] { R8207 += 1 };
  s7 -> s3 [108, 65535] { R8207 += 1 };
  s8 -> s1 [0, 43] { R8207 += 1 };
  s8 -> s1 [45, 45] { R8207 += 1 };
  s8 -> s2 [46, 46] { R8207 += 1 };
  s8 -> s1 [48, 62] { R8207 += 1 };
  s8 -> s3 [65, 65] { R8207 += 1 };
  s8 -> s1 [66, 110] { R8207 += 1 };
  s8 -> s9 [111, 111] { R8207 += 1 };
  s8 -> s1 [112, 65535] { R8207 += 1 };
  s9 -> s1 [0, 43] { R8207 += 1 };
  s9 -> s1 [45, 45] { R8207 += 1 };
  s9 -> s2 [46, 46] { R8207 += 1 };
  s9 -> s1 [48, 62] { R8207 += 1 };
  s9 -> s3 [65, 65] { R8207 += 1 };
  s9 -> s1 [66, 98] { R8207 += 1 };
  s9 -> s10 [99, 99] { R8207 += 1 };
  s9 -> s1 [100, 65535] { R8207 += 1 };
  s10 -> s1 [0, 43] { R8207 += 1 };
  s10 -> s1 [45, 45] { R8207 += 1 };
  s10 -> s2 [46, 46] { R8207 += 1 };
  s10 -> s1 [48, 62] { R8207 += 1 };
  s10 -> s3 [65, 65] { R8207 += 1 };
  s10 -> s1 [66, 106] { R8207 += 1 };
  s10 -> s1 [108, 65535] { R8207 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R8208 += 1, R8209 += 1 };
  s0 -> s1 [0, 65535] { R8209 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8209 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R8211 += 1 };
  s0 -> s0 [0, 65535] { R8210 += 1, R8211 += 1 };
  s0 -> s2 [0, 65535] { R8211 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R8211 += 1 };
  s0 -> s1 [59, 65535] { R8211 += 1 };
  s1 -> s1 [0, 57] { R8211 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R8211 += 1 };
  s1 -> s1 [59, 65535] { R8211 += 1 };
  s2 -> s1 [0, 57] { R8211 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8211 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R8211 += 1 };
  s2 -> s1 [59, 65535] { R8211 += 1 };
  s3 -> s3 [0, 65535] { R8211 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R8213 += 1 };
  s0 -> s2 [0, 65535] { R8213 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R8212 += 1, R8213 += 1 };
  s0 -> s3 [43, 43] { R8213 += 1 };
  s0 -> s1 [44, 65535] { R8213 += 1 };
  s1 -> s1 [0, 42] { R8213 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R8213 += 1 };
  s1 -> s1 [44, 65535] { R8213 += 1 };
  s2 -> s1 [0, 42] { R8213 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8213 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R8213 += 1 };
  s2 -> s1 [44, 65535] { R8213 += 1 };
  s3 -> s3 [0, 65535] { R8213 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R8215 += 1 };
  s0 -> s2 [0, 65535] { R8215 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R8214 += 1, R8215 += 1 };
  s0 -> s3 [65, 65] { R8215 += 1 };
  s0 -> s1 [66, 65535] { R8215 += 1 };
  s1 -> s1 [0, 64] { R8215 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8215 += 1 };
  s1 -> s1 [66, 65535] { R8215 += 1 };
  s2 -> s1 [0, 64] { R8215 += 1 };
  s2 -> s2 [0, 65535] { R8215 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R8215 += 1 };
  s2 -> s1 [66, 65535] { R8215 += 1 };
  s3 -> s3 [0, 65535] { R8215 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R8217 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R8217 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R8216 += 1, R8217 += 1 };
  s0 -> s3 [91, 91] { R8217 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R8217 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R8217 += 1 };
  s1 -> s1 [0, 65535] { R8217 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R8217 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R8217 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R8217 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R8217 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R8217 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8217 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8219 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R8218 += 1, R8219 += 1 };
  s0 -> s2 [0, 65535] { R8219 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R8219 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8219 += 1 };
  s2 -> s1 [0, 65535] { R8219 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8219 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8219 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R8220 += 1, R8221 += 1 };
  s0 -> s1 [0, 65535] { R8221 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R8221 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535] { R8221 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8221 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8221 += 1, R57 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R8221 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8221 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R8223 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R8223 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R8222 += 1, R8223 += 1 };
  s0 -> s3 [108, 108] { R8223 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R8223 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R8223 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R8223 += 1 };
  s2 -> s1 [0, 107] { R8223 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8223 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R8223 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R8223 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R8223 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8223 += 1 };
  s3 -> s5 [111, 111] { R8223 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R8223 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R8223 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8223 += 1 };
  s5 -> s6 [99, 99] { R8223 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R8223 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R8223 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R8223 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R8223 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R8223 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R8223 += 1, R59 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R8223 += 1 };
  s7 -> s8 [108, 108] { R8223 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R8223 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R8223 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R8223 += 1 };
  s8 -> s9 [104, 104] { R8223 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R8223 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R8223 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R8223 += 1 };
  s9 -> s10 [111, 111] { R8223 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R8223 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R8223 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R8223 += 1 };
  s10 -> s11 [115, 115] { R8223 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R8223 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R8223 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R8223 += 1 };
  s11 -> s12 [116, 116] { R8223 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R8223 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R8223 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R8223 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R8225 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R8224 += 1, R8225 += 1 };
  s0 -> s2 [0, 65535] { R8225 += 1, R61 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R8225 += 1, R60 += 1, R61 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8225 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535] { R8225 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8225 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R8225 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8227 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R8227 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R8226 += 1, R8227 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8227 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R8227 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8227 += 1, R75 += 1, R33 += 1 };
  s2 -> s4 [0, 65535] { R8227 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8227 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R8228 += 1, R8229 += 1 };
  s0 -> s1 [0, 65535] { R8229 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8229 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R8231 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R8230 += 1, R8231 += 1 };
  s0 -> s2 [0, 65535] { R8231 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R8231 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R8231 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R8231 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R8231 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8231 += 1 };
  s1 -> s3 [43, 43] { R8231 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R8231 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R8231 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R8231 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8231 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R8231 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R8231 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R8231 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R8231 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8231 += 1, R77 += 1, R42 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8231 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8231 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R8233 += 1, R8149 += 1 };
  s0 -> s2 [0, 65535] { R8233 += 1, R8148 += 1, R8149 += 1 };
  s0 -> s0 [0, 65535] { R8232 += 1, R8233 += 1 };
  s0 -> s1 [66, 65535] { R8233 += 1, R8149 += 1 };
  s1 -> s1 [0, 64] { R8233 += 1, R8149 += 1 };
  s1 -> s1 [0, 65535] { R8233 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R8233 += 1, R8149 += 1 };
  s2 -> s1 [0, 64] { R8233 += 1, R8149 += 1 };
  s2 -> s2 [0, 65535] { R8233 += 1, R8148 += 1, R8149 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R8233 += 1, R8149 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R8234 += 1, R8235 += 1 };
  s0 -> s1 [0, 65535] { R8235 += 1, R8151 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R8235 += 1, R8150 += 1, R8151 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8235 += 1 };
  s1 -> s1 [0, 65535] { R8235 += 1, R8151 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8235 += 1, R8151 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R8235 += 1, R8150 += 1, R8151 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8235 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R8237 += 1, R8153 += 1 };
  s0 -> s2 [0, 65535] { R8237 += 1, R8152 += 1, R8153 += 1 };
  s0 -> s0 [0, 65535] { R8236 += 1, R8237 += 1 };
  s0 -> s1 [80, 65535] { R8237 += 1, R8153 += 1 };
  s1 -> s1 [0, 65] { R8237 += 1, R8153 += 1 };
  s1 -> s1 [0, 65535] { R8237 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R8237 += 1, R8153 += 1 };
  s2 -> s1 [0, 65] { R8237 += 1, R8153 += 1 };
  s2 -> s2 [0, 65535] { R8237 += 1, R8152 += 1, R8153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R8237 += 1, R8153 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R8239 += 1, R8155 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R8239 += 1, R8154 += 1, R8155 += 1 };
  s0 -> s0 [0, 65535] { R8238 += 1, R8239 += 1 };
  s1 -> s4 [0, 65535] { R8239 += 1 };
  s1 -> s1 [0, 65535] { R8239 += 1, R8155 += 1, R409 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8239 += 1, R8155 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R8239 += 1, R8154 += 1, R8155 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8239 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R8241 += 1, R8157 += 1 };
  s0 -> s2 [0, 65535] { R8241 += 1, R8156 += 1, R8157 += 1 };
  s0 -> s3 [0, 65535] { R8241 += 1, R8157 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R8240 += 1, R8241 += 1 };
  s0 -> s1 [81, 65535] { R8241 += 1, R8157 += 1 };
  s1 -> s1 [0, 79] { R8241 += 1, R8157 += 1 };
  s1 -> s1 [0, 65535] { R8241 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R8241 += 1, R8157 += 1 };
  s2 -> s1 [0, 79] { R8241 += 1, R8157 += 1 };
  s2 -> s2 [0, 65535] { R8241 += 1, R8156 += 1, R8157 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8241 += 1, R8157 += 1, R411 += 1 };
  s2 -> s1 [81, 65535] { R8241 += 1, R8157 += 1 };
  s3 -> s1 [0, 79] { R8241 += 1, R8157 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8241 += 1, R8157 += 1, R411 += 1 };
  s3 -> s5 [0, 65535] { R8241 += 1 };
  s3 -> s1 [81, 65535] { R8241 += 1, R8157 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8241 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R8243 += 1, R8159 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R8243 += 1, R8159 += 1, R414 += 1, R415 += 1 };
  s0 -> s3 [0, 65535] { R8243 += 1, R8158 += 1, R8159 += 1 };
  s0 -> s0 [0, 65535] { R8242 += 1, R8243 += 1 };
  s0 -> s1 [81, 65535] { R8243 += 1, R8159 += 1, R415 += 1 };
  s1 -> s1 [0, 79] { R8243 += 1, R8159 += 1, R415 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8243 += 1, R8159 += 1 };
  s1 -> s5 [0, 65535] { R8243 += 1 };
  s1 -> s1 [81, 65535] { R8243 += 1, R8159 += 1, R415 += 1 };
  s2 -> s1 [0, 79] { R8243 += 1, R8159 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R8243 += 1, R8159 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8243 += 1 };
  s2 -> s1 [81, 65535] { R8243 += 1, R8159 += 1, R415 += 1 };
  s3 -> s1 [0, 79] { R8243 += 1, R8159 += 1, R415 += 1 };
  s3 -> s2 [0, 65535] { R8243 += 1, R8159 += 1, R414 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8243 += 1, R8158 += 1, R8159 += 1 };
  s3 -> s1 [81, 65535] { R8243 += 1, R8159 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8243 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R8245 += 1, R8161 += 1, R420 += 1, R421 += 1 };
  s0 -> s2 [0, 65535] { R8245 += 1, R8160 += 1, R8161 += 1 };
  s0 -> s0 [0, 65535] { R8244 += 1, R8245 += 1 };
  s0 -> s3 [0, 65535] { R8245 += 1, R8161 += 1, R419 += 1, R420 += 1 };
  s1 -> s4 [0, 65535] { R8245 += 1 };
  s1 -> s1 [0, 65535] { R8245 += 1, R8161 += 1, R420 += 1, R421 += 1 };
  s1 -> s6 [0, 65535] { R8245 += 1, R8161 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8245 += 1, R8161 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R8245 += 1, R8160 += 1, R8161 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8245 += 1, R8161 += 1, R419 += 1, R420 += 1 };
  s3 -> s4 [0, 65535] { R8245 += 1 };
  s3 -> s1 [0, 65535] { R8245 += 1, R8161 += 1, R420 += 1, R421 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8245 += 1, R8161 += 1, R419 += 1, R420 += 1 };
  s4 -> s4 [0, 65535] { R8245 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8245 += 1 };
  s6 -> s6 [0, 65535] { R8245 += 1, R8161 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R8247 += 1, R8163 += 1, R6621 += 1 };
  s0 -> s0 [0, 65535] { R8246 += 1, R8247 += 1 };
  s0 -> s2 [0, 65535] { R8247 += 1, R8162 += 1, R8163 += 1 };
  s0 -> s1 [0, 65535] { R8247 += 1, R8163 += 1 };
  s0 -> s1 [91, 65535] { R8247 += 1, R8163 += 1, R6621 += 1 };
  s1 -> s1 [0, 80] { R8247 += 1, R8163 += 1, R6621 += 1 };
  s1 -> s4 [0, 65535] { R8247 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8247 += 1, R8163 += 1 };
  s1 -> s1 [91, 65535] { R8247 += 1, R8163 += 1, R6621 += 1 };
  s2 -> s1 [0, 80] { R8247 += 1, R8163 += 1, R6621 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8247 += 1, R8162 += 1, R8163 += 1 };
  s2 -> s1 [0, 65535] { R8247 += 1, R8163 += 1 };
  s2 -> s1 [91, 65535] { R8247 += 1, R8163 += 1, R6621 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8247 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R8249 += 1, R8165 += 1, R6625 += 1, R6626 += 1 };
  s0 -> s2 [0, 65535] { R8249 += 1, R8165 += 1, R6626 += 1, R6627 += 1 };
  s0 -> s0 [0, 65535] { R8248 += 1, R8249 += 1 };
  s0 -> s3 [0, 65535] { R8249 += 1, R8164 += 1, R8165 += 1 };
  s1 -> s1 [0, 65535] { R8249 += 1, R8165 += 1, R6625 += 1, R6626 += 1 };
  s1 -> s2 [0, 65535] { R8249 += 1, R8165 += 1, R6626 += 1, R6627 += 1 };
  s1 -> s5 [0, 65535] { R8249 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8249 += 1, R8165 += 1, R6626 += 1, R6627 += 1 };
  s2 -> s5 [0, 65535] { R8249 += 1 };
  s2 -> s6 [0, 65535] { R8249 += 1, R8165 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8249 += 1, R8165 += 1, R6625 += 1, R6626 += 1 };
  s3 -> s2 [0, 65535] { R8249 += 1, R8165 += 1, R6626 += 1, R6627 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8249 += 1, R8164 += 1, R8165 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8249 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8249 += 1 };
  s6 -> s6 [0, 65535] { R8249 += 1, R8165 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R8250 += 1, R8251 += 1 };
  s0 -> s1 [0, 65535] { R8251 += 1, R8166 += 1, R8167 += 1 };
  s0 -> s2 [0, 65535] { R8251 += 1, R8167 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8251 += 1, R8166 += 1, R8167 += 1 };
  s1 -> s2 [0, 65535] { R8251 += 1, R8167 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8251 += 1 };
  s2 -> s2 [0, 65535] { R8251 += 1, R8167 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8251 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R8253 += 1, R8169 += 1 };
  s0 -> s2 [0, 65535] { R8253 += 1, R8168 += 1, R8169 += 1 };
  s0 -> s0 [0, 65535] { R8252 += 1, R8253 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8253 += 1, R8169 += 1 };
  s1 -> s4 [0, 65535] { R8253 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8253 += 1, R8169 += 1 };
  s2 -> s2 [0, 65535] { R8253 += 1, R8168 += 1, R8169 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8253 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s0 -> s2 [0, 65535] { R8255 += 1, R8170 += 1, R8171 += 1 };
  s0 -> s1 [0, 65535] { R8255 += 1, R8171 += 1 };
  s0 -> s0 [0, 65535] { R8254 += 1, R8255 += 1 };
  s0 -> s3 [80, 80] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s0 -> s4 [80, 80] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s0 -> s1 [81, 65535] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s1 -> s1 [0, 79] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s1 -> s1 [0, 65535] { R8255 += 1, R8171 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8255 += 1 };
  s1 -> s3 [80, 80] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s1 -> s4 [80, 80] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s1 -> s1 [81, 65535] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s2 -> s1 [0, 79] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s2 -> s2 [0, 65535] { R8255 += 1, R8170 += 1, R8171 += 1 };
  s2 -> s1 [0, 65535] { R8255 += 1, R8171 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [80, 80] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s2 -> s4 [80, 80] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s2 -> s1 [81, 65535] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s3 -> s3 [0, 65535] { R8255 += 1, R8171 += 1, R8146 += 1, R8147 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8255 += 1 };
  s3 -> s7 [0, 65535] { R8255 += 1, R8171 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8255 += 1 };
  s4 -> s4 [0, 65535] { R8255 += 1, R8171 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8255 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8255 += 1 };
  s7 -> s7 [0, 65535] { R8255 += 1, R8171 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R8256 += 1, R8257 += 1 };
  s0 -> s1 [0, 65535] { R8257 += 1, R8185 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R8257 += 1, R8184 += 1, R8185 += 1 };
  s1 -> s1 [0, 65535] { R8257 += 1, R8185 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8257 += 1 };
  s2 -> s1 [0, 65535] { R8257 += 1, R8185 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8257 += 1, R8184 += 1, R8185 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8257 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R8259 += 1, R8187 += 1 };
  s0 -> s2 [0, 65535] { R8259 += 1, R8186 += 1, R8187 += 1 };
  s0 -> s0 [0, 65535] { R8258 += 1, R8259 += 1 };
  s0 -> s3 [65, 65] { R8259 += 1, R8187 += 1 };
  s0 -> s4 [65, 65] { R8259 += 1, R8187 += 1 };
  s0 -> s5 [80, 80] { R8259 += 1, R8187 += 1 };
  s0 -> s1 [81, 65535] { R8259 += 1, R8187 += 1 };
  s1 -> s1 [0, 64] { R8259 += 1, R8187 += 1 };
  s1 -> s3 [65, 65] { R8259 += 1, R8187 += 1 };
  s1 -> s4 [65, 65] { R8259 += 1, R8187 += 1 };
  s1 -> s5 [80, 80] { R8259 += 1, R8187 += 1 };
  s1 -> s1 [81, 65535] { R8259 += 1, R8187 += 1 };
  s2 -> s1 [0, 64] { R8259 += 1, R8187 += 1 };
  s2 -> s2 [0, 65535] { R8259 += 1, R8186 += 1, R8187 += 1 };
  s2 -> s3 [65, 65] { R8259 += 1, R8187 += 1 };
  s2 -> s4 [65, 65] { R8259 += 1, R8187 += 1 };
  s2 -> s5 [80, 80] { R8259 += 1, R8187 += 1 };
  s2 -> s1 [81, 65535] { R8259 += 1, R8187 += 1 };
  s3 -> s3 [0, 65] { R8259 += 1, R8187 += 1 };
  s3 -> s8 [80, 80] { R8259 += 1, R8187 += 1 };
  s3 -> s3 [81, 65535] { R8259 += 1, R8187 += 1 };
  s5 -> s5 [0, 64] { R8259 += 1, R8187 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8259 += 1 };
  s5 -> s7 [65, 65] { R8259 += 1, R8187 += 1 };
  s5 -> s8 [65, 65] { R8259 += 1, R8187 += 1 };
  s5 -> s5 [80, 65535] { R8259 += 1, R8187 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8259 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R8259 += 1, R8187 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8259 += 1 };
  s8 -> s8 [80, 65535] { R8259 += 1, R8187 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R8261 += 1, R8189 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R8260 += 1, R8261 += 1 };
  s0 -> s2 [0, 65535] { R8261 += 1, R8188 += 1, R8189 += 1 };
  s0 -> s3 [65, 65] { R8261 += 1, R8189 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R8261 += 1, R8189 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R8261 += 1, R8189 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R8261 += 1, R8189 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R8261 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8261 += 1, R8189 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R8261 += 1, R8189 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R8261 += 1, R8189 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R8261 += 1, R8189 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R8261 += 1, R8188 += 1, R8189 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8261 += 1, R8189 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R8261 += 1, R8189 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R8261 += 1, R8189 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R8261 += 1, R8189 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R8261 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8261 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8261 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R8263 += 1, R8191 += 1, R410 += 1 };
  s0 -> s2 [0, 65535] { R8263 += 1, R8190 += 1, R8191 += 1 };
  s0 -> s0 [0, 65535] { R8262 += 1, R8263 += 1 };
  s0 -> s3 [65, 65] { R8263 += 1, R8191 += 1, R410 += 1 };
  s0 -> s4 [65, 65] { R8263 += 1, R8191 += 1, R410 += 1 };
  s0 -> s1 [66, 65535] { R8263 += 1, R8191 += 1, R410 += 1 };
  s1 -> s1 [0, 64] { R8263 += 1, R8191 += 1, R410 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8263 += 1 };
  s1 -> s3 [65, 65] { R8263 += 1, R8191 += 1, R410 += 1 };
  s1 -> s4 [65, 65] { R8263 += 1, R8191 += 1, R410 += 1 };
  s1 -> s1 [66, 65535] { R8263 += 1, R8191 += 1, R410 += 1 };
  s2 -> s1 [0, 64] { R8263 += 1, R8191 += 1, R410 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8263 += 1, R8190 += 1, R8191 += 1 };
  s2 -> s3 [65, 65] { R8263 += 1, R8191 += 1, R410 += 1 };
  s2 -> s4 [65, 65] { R8263 += 1, R8191 += 1, R410 += 1 };
  s2 -> s1 [66, 65535] { R8263 += 1, R8191 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8263 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8263 += 1 };
  s4 -> s4 [0, 65535] { R8263 += 1, R8191 += 1, R410 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8263 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R8265 += 1, R8192 += 1, R8193 += 1 };
  s0 -> s0 [0, 65535] { R8264 += 1, R8265 += 1 };
  s0 -> s3 [65, 65] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s0 -> s4 [65, 65] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [66, 65535] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [0, 64] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8265 += 1 };
  s1 -> s3 [65, 65] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [65, 65] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s1 -> s1 [66, 65535] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [0, 64] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R8265 += 1, R8192 += 1, R8193 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [65, 65] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [66, 65535] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R8265 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8265 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8265 += 1, R8193 += 1, R412 += 1, R413 += 1 };
  s5 -> s5 [0, 65535] { R8265 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s0 -> s0 [0, 65535] { R8266 += 1, R8267 += 1 };
  s0 -> s2 [0, 65535] { R8267 += 1, R8194 += 1, R8195 += 1 };
  s0 -> s3 [65, 65] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s0 -> s4 [65, 65] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [66, 65535] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 64] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [0, 65535] { R8267 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s1 -> s4 [65, 65] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s1 -> s1 [66, 65535] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [0, 64] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8267 += 1, R8194 += 1, R8195 += 1 };
  s2 -> s3 [65, 65] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s2 -> s4 [65, 65] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s2 -> s1 [66, 65535] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s3 -> s3 [0, 65535] { R8267 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8267 += 1 };
  s4 -> s4 [0, 65535] { R8267 += 1, R8195 += 1, R416 += 1, R417 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8267 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s0 -> s2 [0, 64] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s3 [0, 65535] { R8269 += 1, R8196 += 1, R8197 += 1 };
  s0 -> s0 [0, 65535] { R8268 += 1, R8269 += 1 };
  s0 -> s4 [65, 65] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s5 [65, 65] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s0 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s0 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s0 -> s2 [66, 65535] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s0 -> s1 [91, 107] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s0 -> s8 [108, 108] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s0 -> s1 [109, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s1 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s1 -> s1 [0, 65535] { R8269 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s6 [65, 65] { R8269 += 1, R8197 += 1 };
  s1 -> s7 [65, 65] { R8269 += 1, R8197 += 1 };
  s1 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s1 -> s1 [66, 65535] { R8269 += 1, R8197 += 1 };
  s1 -> s1 [91, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s2 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s2 -> s2 [0, 64] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s4 [65, 65] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s5 [65, 65] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s2 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s2 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s2 -> s2 [66, 65535] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s2 -> s1 [91, 107] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s2 -> s8 [108, 108] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s2 -> s1 [109, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s3 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s3 -> s2 [0, 64] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535] { R8269 += 1, R8196 += 1, R8197 += 1 };
  s3 -> s4 [65, 65] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s5 [65, 65] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s3 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s3 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s3 -> s2 [66, 65535] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s3 -> s1 [91, 107] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s3 -> s8 [108, 108] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s3 -> s1 [109, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s5 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s5 -> s5 [0, 65535] { R8269 += 1, R8197 += 1, R6618 += 1, R6619 += 1 };
  s5 -> s6 [91, 107] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s5 -> s10 [108, 108] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s5 -> s6 [109, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s6 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s6 -> s35 [0, 65535] { R8269 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R8269 += 1, R8197 += 1 };
  s6 -> s6 [91, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s7 -> s34 [0, 65535];
  s7 -> s7 [0, 65535] { R8269 += 1 };
  s8 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s8 -> s8 [0, 64] { R8269 += 1, R8197 += 1 };
  s8 -> s9 [65, 65] { R8269 += 1, R8197 += 1 };
  s8 -> s10 [65, 65] { R8269 += 1, R8197 += 1 };
  s8 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s8 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s8 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s8 -> s8 [66, 65535] { R8269 += 1, R8197 += 1 };
  s8 -> s1 [91, 110] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s8 -> s11 [111, 111] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s8 -> s1 [112, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s10 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s10 -> s10 [0, 65535] { R8269 += 1, R8197 += 1 };
  s10 -> s6 [91, 110] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s10 -> s12 [111, 111] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s10 -> s6 [112, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s11 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s11 -> s11 [0, 64] { R8269 += 1, R8197 += 1 };
  s11 -> s12 [65, 65] { R8269 += 1, R8197 += 1 };
  s11 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s11 -> s13 [65, 65] { R8269 += 1, R8197 += 1 };
  s11 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s11 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s11 -> s11 [66, 65535] { R8269 += 1, R8197 += 1 };
  s11 -> s1 [91, 98] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s11 -> s14 [99, 99] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s11 -> s1 [100, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s12 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s12 -> s12 [0, 65535] { R8269 += 1, R8197 += 1 };
  s12 -> s6 [91, 98] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s12 -> s16 [99, 99] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s12 -> s6 [100, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s14 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s14 -> s14 [0, 64] { R8269 += 1, R8197 += 1 };
  s14 -> s15 [65, 65] { R8269 += 1, R8197 += 1 };
  s14 -> s16 [65, 65] { R8269 += 1, R8197 += 1 };
  s14 -> s17 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s14 -> s18 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s14 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s14 -> s14 [66, 65535] { R8269 += 1, R8197 += 1 };
  s14 -> s1 [91, 96] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s14 -> s19 [97, 97] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s14 -> s1 [98, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s16 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s16 -> s16 [0, 65535] { R8269 += 1, R8197 += 1 };
  s16 -> s6 [91, 96] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s16 -> s18 [97, 97] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s16 -> s6 [98, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s18 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s18 -> s18 [0, 65535] { R8269 += 1, R8197 += 1 };
  s18 -> s6 [91, 107] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s18 -> s21 [108, 108] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s18 -> s6 [109, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s19 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s19 -> s19 [0, 64] { R8269 += 1, R8197 += 1 };
  s19 -> s17 [65, 65] { R8269 += 1, R8197 += 1 };
  s19 -> s18 [65, 65] { R8269 += 1, R8197 += 1 };
  s19 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s19 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s19 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s19 -> s19 [66, 65535] { R8269 += 1, R8197 += 1 };
  s19 -> s1 [91, 107] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s19 -> s20 [108, 108] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s19 -> s1 [109, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s20 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s20 -> s20 [0, 64] { R8269 += 1, R8197 += 1 };
  s20 -> s21 [65, 65] { R8269 += 1, R8197 += 1 };
  s20 -> s22 [65, 65] { R8269 += 1, R8197 += 1 };
  s20 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s20 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s20 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s20 -> s20 [66, 65535] { R8269 += 1, R8197 += 1 };
  s20 -> s1 [91, 103] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s20 -> s23 [104, 104] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s20 -> s1 [105, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s21 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s21 -> s21 [0, 65535] { R8269 += 1, R8197 += 1 };
  s21 -> s6 [91, 103] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s21 -> s25 [104, 104] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s21 -> s6 [105, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s23 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s23 -> s23 [0, 64] { R8269 += 1, R8197 += 1 };
  s23 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s23 -> s24 [65, 65] { R8269 += 1, R8197 += 1 };
  s23 -> s25 [65, 65] { R8269 += 1, R8197 += 1 };
  s23 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s23 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s23 -> s23 [66, 65535] { R8269 += 1, R8197 += 1 };
  s23 -> s1 [91, 110] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s23 -> s26 [111, 111] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s23 -> s1 [112, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s25 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s25 -> s25 [0, 65535] { R8269 += 1, R8197 += 1 };
  s25 -> s6 [91, 110] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s25 -> s28 [111, 111] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s25 -> s6 [112, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s26 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s26 -> s26 [0, 64] { R8269 += 1, R8197 += 1 };
  s26 -> s27 [65, 65] { R8269 += 1, R8197 += 1 };
  s26 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s26 -> s28 [65, 65] { R8269 += 1, R8197 += 1 };
  s26 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s26 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s26 -> s26 [66, 65535] { R8269 += 1, R8197 += 1 };
  s26 -> s1 [91, 114] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s26 -> s29 [115, 115] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s26 -> s1 [116, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s28 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s28 -> s28 [0, 65535] { R8269 += 1, R8197 += 1 };
  s28 -> s6 [91, 114] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s28 -> s31 [115, 115] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s28 -> s6 [116, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s29 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s29 -> s29 [0, 64] { R8269 += 1, R8197 += 1 };
  s29 -> s30 [65, 65] { R8269 += 1, R8197 += 1 };
  s29 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s29 -> s31 [65, 65] { R8269 += 1, R8197 += 1 };
  s29 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s29 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s29 -> s29 [66, 65535] { R8269 += 1, R8197 += 1 };
  s29 -> s1 [91, 115] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s29 -> s32 [116, 116] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s29 -> s1 [117, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s31 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s31 -> s31 [0, 65535] { R8269 += 1, R8197 += 1 };
  s31 -> s6 [91, 115] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s31 -> s33 [116, 116] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s31 -> s6 [117, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s32 -> s1 [0, 64] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s32 -> s6 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s32 -> s7 [65, 65] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s32 -> s1 [66, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s32 -> s1 [91, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s33 -> s6 [0, 80] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s33 -> s6 [91, 65535] { R8269 += 1, R8197 += 1, R6619 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R8269 += 1 };
  s35 -> s34 [0, 65535];
  accepting s34, s6, s1, s7, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s0 -> s2 [0, 65535] { R8271 += 1, R8198 += 1, R8199 += 1 };
  s0 -> s0 [0, 65535] { R8270 += 1, R8271 += 1 };
  s0 -> s3 [65, 65] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s0 -> s4 [65, 65] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s0 -> s1 [66, 65535] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s1 -> s1 [0, 64] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s1 -> s1 [0, 65535] { R8271 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s1 -> s4 [65, 65] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s1 -> s1 [66, 65535] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s2 -> s1 [0, 64] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8271 += 1, R8198 += 1, R8199 += 1 };
  s2 -> s3 [65, 65] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s2 -> s4 [65, 65] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s2 -> s1 [66, 65535] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s3 -> s6 [0, 65535] { R8271 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8271 += 1, R8199 += 1, R6622 += 1, R6623 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8271 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8271 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s0 -> s2 [0, 64] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s0 -> s0 [0, 65535] { R8272 += 1, R8273 += 1 };
  s0 -> s3 [0, 65535] { R8273 += 1, R8200 += 1, R8201 += 1 };
  s0 -> s4 [65, 65] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s0 -> s5 [65, 65] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s0 -> s6 [65, 65] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s0 -> s7 [65, 65] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s0 -> s1 [66, 65535] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s0 -> s2 [66, 65535] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s1 -> s11 [0, 64] { R8273 += 1, R8201 += 1 };
  s1 -> s1 [0, 64] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s1 -> s5 [65, 65] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s1 -> s12 [65, 65] { R8273 += 1, R8201 += 1 };
  s1 -> s8 [65, 65] { R8273 += 1, R8201 += 1 };
  s1 -> s7 [65, 65] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s1 -> s11 [66, 65535] { R8273 += 1, R8201 += 1 };
  s1 -> s1 [66, 65535] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s2 -> s1 [0, 64] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s2 -> s2 [0, 64] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s2 -> s4 [65, 65] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s2 -> s5 [65, 65] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s2 -> s6 [65, 65] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s2 -> s7 [65, 65] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s2 -> s1 [66, 65535] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s2 -> s2 [66, 65535] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s3 -> s1 [0, 64] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s3 -> s2 [0, 64] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s3 -> s3 [0, 65535] { R8273 += 1, R8200 += 1, R8201 += 1 };
  s3 -> s4 [65, 65] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s3 -> s5 [65, 65] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s3 -> s6 [65, 65] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s3 -> s7 [65, 65] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s3 -> s1 [66, 65535] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s3 -> s2 [66, 65535] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s4 -> s4 [0, 65535] { R8273 += 1, R8201 += 1, R8000 += 1, R8001 += 1 };
  s4 -> s5 [0, 65535] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s5 -> s5 [0, 65535] { R8273 += 1, R8201 += 1, R8001 += 1, R8002 += 1 };
  s5 -> s8 [0, 65535] { R8273 += 1, R8201 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8273 += 1 };
  s8 -> s8 [0, 65535] { R8273 += 1, R8201 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8273 += 1 };
  s11 -> s11 [0, 64] { R8273 += 1, R8201 += 1 };
  s11 -> s11 [0, 65535] { R8273 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R8273 += 1, R8201 += 1 };
  s11 -> s8 [65, 65] { R8273 += 1, R8201 += 1 };
  s11 -> s11 [66, 65535] { R8273 += 1, R8201 += 1 };
  s12 -> s12 [0, 65535] { R8273 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R8275 += 1, R8203 += 1 };
  s0 -> s0 [0, 65535] { R8274 += 1, R8275 += 1 };
  s0 -> s2 [0, 65535] { R8275 += 1, R8202 += 1, R8203 += 1 };
  s0 -> s3 [65, 65] { R8275 += 1, R8203 += 1 };
  s0 -> s4 [65, 65] { R8275 += 1, R8203 += 1 };
  s0 -> s1 [66, 65535] { R8275 += 1, R8203 += 1 };
  s1 -> s1 [0, 64] { R8275 += 1, R8203 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8275 += 1 };
  s1 -> s3 [65, 65] { R8275 += 1, R8203 += 1 };
  s1 -> s4 [65, 65] { R8275 += 1, R8203 += 1 };
  s1 -> s1 [66, 65535] { R8275 += 1, R8203 += 1 };
  s2 -> s1 [0, 64] { R8275 += 1, R8203 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8275 += 1, R8202 += 1, R8203 += 1 };
  s2 -> s3 [65, 65] { R8275 += 1, R8203 += 1 };
  s2 -> s4 [65, 65] { R8275 += 1, R8203 += 1 };
  s2 -> s1 [66, 65535] { R8275 += 1, R8203 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8275 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8275 += 1 };
  s4 -> s4 [0, 65535] { R8275 += 1, R8203 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8275 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s0 -> s2 [0, 64] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s0 -> s0 [0, 65535] { R8276 += 1, R8277 += 1 };
  s0 -> s3 [0, 65535] { R8277 += 1, R8204 += 1, R8205 += 1 };
  s0 -> s4 [65, 65] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s0 -> s5 [65, 65] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s0 -> s6 [65, 65] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s0 -> s7 [65, 65] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s0 -> s1 [66, 79] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s0 -> s2 [66, 65535] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s0 -> s1 [81, 65535] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s1 -> s1 [0, 64] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s1 -> s1 [0, 65535] { R8277 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R8277 += 1, R8205 += 1 };
  s1 -> s5 [65, 65] { R8277 += 1, R8205 += 1 };
  s1 -> s1 [66, 79] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s1 -> s1 [66, 65535] { R8277 += 1, R8205 += 1 };
  s1 -> s1 [81, 65535] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s2 -> s1 [0, 64] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s2 -> s2 [0, 64] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s2 -> s4 [65, 65] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s2 -> s5 [65, 65] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s2 -> s6 [65, 65] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s2 -> s7 [65, 65] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s2 -> s1 [66, 79] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s2 -> s2 [66, 65535] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s2 -> s1 [81, 65535] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s3 -> s1 [0, 64] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s3 -> s2 [0, 64] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s3 -> s3 [0, 65535] { R8277 += 1, R8204 += 1, R8205 += 1 };
  s3 -> s4 [65, 65] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s3 -> s5 [65, 65] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s3 -> s6 [65, 65] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s3 -> s7 [65, 65] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s3 -> s1 [66, 79] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s3 -> s2 [66, 65535] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s3 -> s1 [81, 65535] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s4 -> s4 [0, 79] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s4 -> s4 [0, 65535] { R8277 += 1, R8205 += 1 };
  s4 -> s9 [0, 65535] { R8277 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s5 -> s5 [0, 65535] { R8277 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 79] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s7 -> s7 [0, 65535] { R8277 += 1, R8205 += 1, R8142 += 1, R8143 += 1 };
  s7 -> s4 [81, 65535] { R8277 += 1, R8205 += 1, R8143 += 1, R8144 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8277 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R8171 && R6 = R8277 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R8171 && R58 = 0 && R59 = R8171 && R60 = 0 && R61 = R8171 && R62 = 0 && R63 = R8277 && R64 = 0 && R65 = R8277 && R66 = 0 && R67 = R8277 && R86 = 0 && R87 = 0 && R8148 = 0 && R8149 = R8171 && R8150 = 0 && R8151 = R8171 && R8152 = 0 && R8153 = R8171 && R8154 = 0 && R8155 = R8171 && R8156 = 0 && R8157 = R8171 && R8158 = 0 && R8159 = R8171 && R8160 = 0 && R8161 = R8171 && R8162 = 0 && R8163 = R8171 && R8164 = 0 && R8165 = R8171 && R8166 = 0 && R8167 = R8171 && R8168 = 0 && R8169 = R8171 && R8170 = 0 && R8172 = 0 && R8173 = R8277 && R8174 = 0 && R8175 = R8277 && R8176 = 0 && R8177 = R8277 && R8178 = 0 && R8179 = R8277 && R8180 = 0 && R8181 = R8277 && R8182 = 0 && R8183 = R8277 && R8186 = 0 && R8187 = 0 && R8196 = 0 && R8197 = 0 && R8200 = 0 && R8201 = 0 && R8204 = 0 && R8205 = 0 && R8206 = 10 && R8207 = R8277 && R8208 = 10 && R8209 = R8277 && R8210 = 10 && R8211 = R8277 && R8212 = 10 && R8213 = R8277 && R8214 = 10 && R8215 = R8277 && R8216 = 10 && R8217 = R8277 && R8218 = 10 && R8219 = R8277 && R8220 = 10 && R8221 = R8277 && R8222 = 10 && R8223 = R8277 && R8224 = 10 && R8225 = R8277 && R8226 = 10 && R8227 = R8277 && R8228 = 10 && R8229 = R8277 && R8230 = 10 && R8231 = R8277 && R8232 = 10 && R8233 = R8277 && R8234 = 10 && R8235 = R8277 && R8236 = 10 && R8237 = R8277 && R8238 = 10 && R8239 = R8277 && R8240 = 10 && R8241 = R8277 && R8242 = 10 && R8243 = R8277 && R8244 = 10 && R8245 = R8277 && R8246 = 10 && R8247 = R8277 && R8248 = 10 && R8249 = R8277 && R8250 = 10 && R8251 = R8277 && R8252 = 10 && R8253 = R8277 && R8254 = 10 && R8255 = R8277 && R8256 = 10 && R8257 = R8277 && R8258 = 10 && R8259 = R8277 && R8260 = 10 && R8261 = R8277 && R8262 = 10 && R8263 = R8277 && R8264 = 10 && R8265 = R8277 && R8266 = 10 && R8267 = R8277 && R8268 = 10 && R8269 = R8277 && R8270 = 10 && R8271 = R8277 && R8272 = 10 && R8273 = R8277 && R8274 = 10 && R8275 = R8277 && R8276 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R6627 + R6624 + R8147 + R8144 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R409 + -1*R408 < 1 && R411 + R410 < 1 && 0 < R8171 && 9 < R8277 && (R409 + R408 != 0 || R421 + R418 = 0 || (R414 + R412 = 0 && R415 + R413 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R419 + R416 = 0 && R420 + R417 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R6620 + R6618 = 0 && R6621 + R6619 = 0)) && (R409 + R408 != 0 || R421 + R418 = 0 || (R6625 + R6622 = 0 && R6626 + R6623 = 0)) && (R414 + R412 != 0 || R409 + R408 + -1*R415 + -1*R413 = 0 || R409 + R408 < 1) && (R419 + R416 != 0 || R409 + R408 + -1*R420 + -1*R417 = 0 || R409 + R408 < 1) && (R6620 + R6618 != 0 || R409 + R408 + -1*R6621 + -1*R6619 = 0 || R409 + R408 < 1) && (R6625 + R6622 != 0 || R409 + R408 + -1*R6626 + -1*R6623 = 0 || R409 + R408 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R8184 = 0 && R8185 = 0)) && (R34 = 0 || (R8188 = 0 && R8189 = 0)) && (R34 = 0 || (R8190 = 0 && R8191 = 0)) && (R34 = 0 || (R8192 = 0 && R8193 = 0)) && (R34 = 0 || (R8194 = 0 && R8195 = 0)) && (R34 = 0 || (R8198 = 0 && R8199 = 0)) && (R34 = 0 || (R8202 = 0 && R8203 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R414 + R412 = 0 || R409 + R408 < 1) && (R419 + R416 = 0 || R409 + R408 < 1) && (R6620 + R6618 = 0 || R409 + R408 < 1) && (R6625 + R6622 = 0 || R409 + R408 < 1) && (R8005 + R8002 = 0 || (R8003 + R8000 = 0 && R8004 + R8001 = 0)) && (R8005 + R8002 = 0 || (R8145 + R8142 = 0 && R8146 + R8143 = 0));
// End of Parikh automata intersection problem
