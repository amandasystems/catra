// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R49 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s2 [46, 46] { R49 += 1 };
  s0 -> s3 [47, 47] { R49 += 1 };
  s0 -> s1 [48, 65535] { R49 += 1 };
  s1 -> s1 [0, 45] { R49 += 1 };
  s1 -> s2 [46, 46] { R49 += 1 };
  s1 -> s3 [47, 47] { R49 += 1 };
  s1 -> s1 [48, 65535] { R49 += 1 };
  s2 -> s1 [0, 45] { R49 += 1 };
  s2 -> s2 [46, 46] { R49 += 1 };
  s2 -> s3 [47, 47] { R49 += 1 };
  s2 -> s1 [48, 114] { R49 += 1 };
  s2 -> s8 [115, 115] { R49 += 1 };
  s2 -> s1 [116, 65535] { R49 += 1 };
  s3 -> s3 [0, 45] { R49 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R49 += 1 };
  s3 -> s3 [47, 65535] { R49 += 1 };
  s4 -> s3 [0, 45] { R49 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R49 += 1 };
  s4 -> s3 [47, 114] { R49 += 1 };
  s4 -> s5 [115, 115] { R49 += 1 };
  s4 -> s3 [116, 65535] { R49 += 1 };
  s5 -> s3 [0, 45] { R49 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R49 += 1 };
  s5 -> s3 [47, 110] { R49 += 1 };
  s5 -> s6 [111, 111] { R49 += 1 };
  s5 -> s3 [112, 65535] { R49 += 1 };
  s6 -> s3 [0, 45] { R49 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R49 += 1 };
  s6 -> s3 [47, 98] { R49 += 1 };
  s6 -> s7 [99, 99] { R49 += 1 };
  s6 -> s3 [100, 65535] { R49 += 1 };
  s7 -> s3 [0, 45] { R49 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R49 += 1 };
  s7 -> s3 [47, 106] { R49 += 1 };
  s7 -> s3 [108, 65535] { R49 += 1 };
  s8 -> s1 [0, 45] { R49 += 1 };
  s8 -> s2 [46, 46] { R49 += 1 };
  s8 -> s3 [47, 47] { R49 += 1 };
  s8 -> s1 [48, 110] { R49 += 1 };
  s8 -> s9 [111, 111] { R49 += 1 };
  s8 -> s1 [112, 65535] { R49 += 1 };
  s9 -> s1 [0, 45] { R49 += 1 };
  s9 -> s2 [46, 46] { R49 += 1 };
  s9 -> s3 [47, 47] { R49 += 1 };
  s9 -> s1 [48, 98] { R49 += 1 };
  s9 -> s10 [99, 99] { R49 += 1 };
  s9 -> s1 [100, 65535] { R49 += 1 };
  s10 -> s1 [0, 45] { R49 += 1 };
  s10 -> s2 [46, 46] { R49 += 1 };
  s10 -> s3 [47, 47] { R49 += 1 };
  s10 -> s1 [48, 106] { R49 += 1 };
  s10 -> s1 [108, 65535] { R49 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R51 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R51 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R53 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R53 += 1, R4 += 1, R5 += 1 };
  s0 -> s3 [47, 47] { R53 += 1 };
  s0 -> s1 [48, 65535] { R53 += 1, R5 += 1 };
  s1 -> s1 [0, 46] { R53 += 1, R5 += 1 };
  s1 -> s3 [47, 47] { R53 += 1 };
  s1 -> s1 [48, 65535] { R53 += 1, R5 += 1 };
  s2 -> s1 [0, 46] { R53 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R53 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [47, 47] { R53 += 1 };
  s2 -> s1 [48, 65535] { R53 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s1 [0, 65535] { R55 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R55 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 62] { R57 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R57 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [64, 64] { R57 += 1, R41 += 1 };
  s0 -> s1 [65, 65535] { R57 += 1, R41 += 1 };
  s1 -> s1 [0, 62] { R57 += 1, R41 += 1 };
  s1 -> s3 [64, 64] { R57 += 1, R41 += 1 };
  s1 -> s1 [65, 65535] { R57 += 1, R41 += 1 };
  s2 -> s1 [0, 62] { R57 += 1, R41 += 1 };
  s2 -> s2 [0, 65535] { R57 += 1, R40 += 1, R41 += 1 };
  s2 -> s3 [64, 64] { R57 += 1, R41 += 1 };
  s2 -> s1 [65, 65535] { R57 += 1, R41 += 1 };
  s3 -> s3 [0, 62] { R57 += 1, R41 += 1 };
  s3 -> s3 [0, 65535] { R57 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [64, 65535] { R57 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R59 += 1, R43 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R59 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R59 += 1, R43 += 1, R35 += 1 };
  s1 -> s4 [0, 65535] { R59 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R59 += 1, R43 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R59 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R59 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R61 += 1, R45 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R61 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [0, 65535] { R61 += 1, R45 += 1, R36 += 1, R37 += 1 };
  s0 -> s1 [59, 63] { R61 += 1, R45 += 1, R37 += 1 };
  s0 -> s1 [65, 65535] { R61 += 1, R45 += 1, R37 += 1 };
  s1 -> s1 [0, 57] { R61 += 1, R45 += 1, R37 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R61 += 1 };
  s1 -> s1 [0, 65535] { R61 += 1, R45 += 1 };
  s1 -> s1 [59, 63] { R61 += 1, R45 += 1, R37 += 1 };
  s1 -> s1 [65, 65535] { R61 += 1, R45 += 1, R37 += 1 };
  s2 -> s1 [0, 57] { R61 += 1, R45 += 1, R37 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R61 += 1, R44 += 1, R45 += 1 };
  s2 -> s3 [0, 65535] { R61 += 1, R45 += 1, R36 += 1, R37 += 1 };
  s2 -> s1 [59, 63] { R61 += 1, R45 += 1, R37 += 1 };
  s2 -> s1 [65, 65535] { R61 += 1, R45 += 1, R37 += 1 };
  s3 -> s1 [0, 57] { R61 += 1, R45 += 1, R37 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R61 += 1 };
  s3 -> s3 [0, 65535] { R61 += 1, R45 += 1, R36 += 1, R37 += 1 };
  s3 -> s1 [59, 63] { R61 += 1, R45 += 1, R37 += 1 };
  s3 -> s1 [65, 65535] { R61 += 1, R45 += 1, R37 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R61 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s2 [0, 65535] { R63 += 1, R47 += 1, R39 += 1, R0 += 1 };
  s0 -> s3 [0, 65535] { R63 += 1, R47 += 1, R38 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R46 += 1, R47 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R63 += 1, R47 += 1, R39 += 1, R0 += 1 };
  s1 -> s3 [0, 65535] { R63 += 1, R47 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535] { R63 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R63 += 1, R47 += 1, R39 += 1, R0 += 1 };
  s2 -> s6 [0, 65535] { R63 += 1, R47 += 1 };
  s3 -> s4 [0, 65535] { R63 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R63 += 1, R47 += 1, R39 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R63 += 1, R47 += 1, R38 += 1, R39 += 1 };
  s4 -> s4 [0, 65535] { R63 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R63 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R63 += 1, R47 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 - R41 = 1 && R2 = R63 && R4 = 0 && R5 = R41 && R36 = 0 && R38 = 0 && R40 = 0 && R48 = 10 && R49 = R63 && R50 = 10 && R51 = R63 && R52 = 10 && R53 = R63 && R54 = 10 && R55 = R63 && R56 = 10 && R57 = R63 && R58 = 10 && R59 = R63 && R60 = 10 && R61 = R63 && R62 = 10 && R0 != 0 && R37 < 1 && R39 < 1 && -1 < R41 && 9 < R63 && (R37 != 0 || -1 < R35) && (R39 != 0 || -1 < R35) && (R42 != 0 || R41 = R43 || (R35 = 0 && R41 = 0)) && (R44 != 0 || R41 = R45 || (R35 = 0 && R41 = 0)) && (R46 != 0 || R41 = R47 || (R35 = 0 && R41 = 0)) && (R35 = R37 || -1 < R37) && (R35 = R39 || -1 < R39) && (R42 = 0 || (R35 = 0 && R41 = 0)) && (R44 = 0 || (R35 = 0 && R41 = 0)) && (R46 = 0 || (R35 = 0 && R41 = 0));
// End of Parikh automata intersection problem
