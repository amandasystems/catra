// Parikh automata intersection problem, generated by OSTRICH+
counter int R10014, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R10100, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R10187, R10188, R10189, R10190, R10191, R10192, R10193, R10194, R10195, R10196, R10197, R10198, R10199, R10200, R10201, R10202, R10203, R10204, R10205, R10206, R10207, R10208, R10209, R10210, R10211, R10212, R10213, R10214, R10215, R10216, R10217, R10218, R10219, R10220, R10221, R10222, R10223, R10224, R10225, R10226, R10227, R10228, R10229, R10230, R10231, R10232, R10233, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R21, R22, R25, R28, R31, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R56, R57, R58, R59, R6, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R7350, R7351, R7352, R7353, R7354, R7355, R8, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R9568, R9569, R9570, R9571, R9572, R9573;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P93
automaton P93_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R31 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R91 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [108, 108] { R91 += 1 };
  s0 -> s1 [109, 65535] { R91 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R91 += 1 };
  s2 -> s1 [0, 110] { R91 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R91 += 1 };
  s2 -> s1 [112, 65535] { R91 += 1 };
  s3 -> s1 [0, 98] { R91 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R91 += 1 };
  s3 -> s1 [100, 65535] { R91 += 1 };
  s4 -> s1 [0, 96] { R91 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R91 += 1 };
  s4 -> s1 [98, 65535] { R91 += 1 };
  s5 -> s1 [0, 107] { R91 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R91 += 1 };
  s5 -> s1 [109, 65535] { R91 += 1 };
  s6 -> s1 [0, 103] { R91 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R91 += 1 };
  s6 -> s1 [105, 65535] { R91 += 1 };
  s7 -> s1 [0, 110] { R91 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R91 += 1 };
  s7 -> s1 [112, 65535] { R91 += 1 };
  s8 -> s1 [0, 114] { R91 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R91 += 1 };
  s8 -> s1 [116, 65535] { R91 += 1 };
  s9 -> s1 [0, 115] { R91 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R91 += 1 };
  s9 -> s1 [117, 65535] { R91 += 1 };
  s10 -> s1 [0, 65535] { R91 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R113 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R10055 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R10054 += 1, R10055 += 1 };
  s1 -> s1 [0, 65535] { R10055 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R10057 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R10056 += 1, R10057 += 1 };
  s1 -> s1 [0, 65535] { R10057 += 1, R115 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 74] { R10059 += 1 };
  s0 -> s2 [0, 65535] { R10059 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R10058 += 1, R10059 += 1 };
  s0 -> s1 [76, 65535] { R10059 += 1 };
  s1 -> s1 [0, 74] { R10059 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [76, 65535] { R10059 += 1 };
  s2 -> s1 [0, 74] { R10059 += 1 };
  s2 -> s2 [0, 65535] { R10059 += 1, R117 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R10059 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 76] { R10061 += 1 };
  s0 -> s0 [0, 65535] { R10060 += 1, R10061 += 1 };
  s0 -> s2 [0, 65535] { R10061 += 1, R119 += 1 };
  s0 -> s1 [78, 65535] { R10061 += 1 };
  s1 -> s1 [0, 76] { R10061 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R10061 += 1 };
  s2 -> s1 [0, 76] { R10061 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10061 += 1, R119 += 1 };
  s2 -> s1 [78, 65535] { R10061 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R10062 += 1, R10063 += 1 };
  s0 -> s1 [0, 65535] { R10063 += 1, R124 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R10063 += 1, R123 += 1, R124 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10063 += 1, R124 += 1, R125 += 1 };
  s1 -> s4 [0, 65535] { R10063 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10063 += 1, R124 += 1, R125 += 1 };
  s2 -> s2 [0, 65535] { R10063 += 1, R123 += 1, R124 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10063 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10064 += 1, R10065 += 1 };
  s0 -> s1 [0, 65535] { R10065 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10065 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10067 += 1, R130 += 1, R131 += 1 };
  s0 -> s0 [0, 65535] { R10066 += 1, R10067 += 1 };
  s0 -> s2 [0, 65535] { R10067 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 65535] { R10067 += 1, R130 += 1, R131 += 1 };
  s1 -> s4 [0, 65535] { R10067 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10067 += 1, R130 += 1, R131 += 1 };
  s2 -> s2 [0, 65535] { R10067 += 1, R129 += 1, R130 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10067 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R10069 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R10069 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R10068 += 1, R10069 += 1 };
  s0 -> s3 [108, 108] { R10069 += 1, R135 += 1 };
  s0 -> s1 [109, 65535] { R10069 += 1, R135 += 1 };
  s1 -> s13 [0, 65535] { R10069 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10069 += 1, R135 += 1 };
  s2 -> s1 [0, 107] { R10069 += 1, R135 += 1 };
  s2 -> s2 [0, 65535] { R10069 += 1, R134 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R10069 += 1, R135 += 1 };
  s2 -> s1 [109, 65535] { R10069 += 1, R135 += 1 };
  s3 -> s1 [0, 110] { R10069 += 1, R135 += 1 };
  s3 -> s3 [0, 65535] { R10069 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R10069 += 1, R135 += 1 };
  s3 -> s1 [112, 65535] { R10069 += 1, R135 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10069 += 1, R135 += 1 };
  s5 -> s5 [0, 65535] { R10069 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10069 += 1, R135 += 1 };
  s5 -> s1 [100, 65535] { R10069 += 1, R135 += 1 };
  s6 -> s1 [0, 96] { R10069 += 1, R135 += 1 };
  s6 -> s6 [0, 65535] { R10069 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R10069 += 1, R135 += 1 };
  s6 -> s1 [98, 65535] { R10069 += 1, R135 += 1 };
  s7 -> s1 [0, 107] { R10069 += 1, R135 += 1 };
  s7 -> s7 [0, 65535] { R10069 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R10069 += 1, R135 += 1 };
  s7 -> s1 [109, 65535] { R10069 += 1, R135 += 1 };
  s8 -> s1 [0, 103] { R10069 += 1, R135 += 1 };
  s8 -> s8 [0, 65535] { R10069 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R10069 += 1, R135 += 1 };
  s8 -> s1 [105, 65535] { R10069 += 1, R135 += 1 };
  s9 -> s1 [0, 110] { R10069 += 1, R135 += 1 };
  s9 -> s9 [0, 65535] { R10069 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R10069 += 1, R135 += 1 };
  s9 -> s1 [112, 65535] { R10069 += 1, R135 += 1 };
  s10 -> s1 [0, 114] { R10069 += 1, R135 += 1 };
  s10 -> s10 [0, 65535] { R10069 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R10069 += 1, R135 += 1 };
  s10 -> s1 [116, 65535] { R10069 += 1, R135 += 1 };
  s11 -> s1 [0, 115] { R10069 += 1, R135 += 1 };
  s11 -> s11 [0, 65535] { R10069 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R10069 += 1, R135 += 1 };
  s11 -> s1 [117, 65535] { R10069 += 1, R135 += 1 };
  s12 -> s1 [0, 65535] { R10069 += 1, R135 += 1 };
  s13 -> s13 [0, 65535] { R10069 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10071 += 1, R139 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R10071 += 1, R140 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R10070 += 1, R10071 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10071 += 1, R139 += 1, R140 += 1 };
  s1 -> s2 [0, 65535] { R10071 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10071 += 1 };
  s2 -> s2 [0, 65535] { R10071 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10071 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R10073 += 1, R146 += 1, R147 += 1 };
  s0 -> s0 [0, 65535] { R10072 += 1, R10073 += 1 };
  s0 -> s2 [0, 65535] { R10073 += 1, R145 += 1, R146 += 1 };
  s1 -> s4 [0, 65535] { R10073 += 1 };
  s1 -> s1 [0, 65535] { R10073 += 1, R146 += 1, R147 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10073 += 1, R146 += 1, R147 += 1 };
  s2 -> s2 [0, 65535] { R10073 += 1, R145 += 1, R146 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10073 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R10075 += 1 };
  s0 -> s0 [0, 65535] { R10074 += 1, R10075 += 1 };
  s1 -> s1 [0, 65535] { R10075 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10077 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R10076 += 1, R10077 += 1 };
  s0 -> s2 [0, 65535] { R10077 += 1, R151 += 1, R152 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10077 += 1, R152 += 1, R153 += 1 };
  s1 -> s4 [0, 65535] { R10077 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10077 += 1, R152 += 1, R153 += 1 };
  s2 -> s2 [0, 65535] { R10077 += 1, R151 += 1, R152 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10077 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R10078 += 1, R10079 += 1 };
  s0 -> s1 [0, 65535] { R10079 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10079 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 76] { R10081 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R10080 += 1, R10081 += 1 };
  s0 -> s2 [0, 65535] { R10081 += 1, R157 += 1, R158 += 1 };
  s0 -> s3 [77, 77] { R10081 += 1, R158 += 1, R159 += 1 };
  s0 -> s4 [77, 77] { R10081 += 1, R158 += 1, R159 += 1 };
  s0 -> s1 [78, 65535] { R10081 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 76] { R10081 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R10081 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [77, 77] { R10081 += 1, R158 += 1, R159 += 1 };
  s1 -> s4 [77, 77] { R10081 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [78, 65535] { R10081 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [0, 76] { R10081 += 1, R158 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R10081 += 1, R157 += 1, R158 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R10081 += 1, R158 += 1, R159 += 1 };
  s2 -> s4 [77, 77] { R10081 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [78, 65535] { R10081 += 1, R158 += 1, R159 += 1 };
  s3 -> s6 [0, 65535] { R10081 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10081 += 1, R158 += 1, R159 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10081 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10081 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10115 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R10114 += 1, R10115 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10115 += 1, R48 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R10117 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R10116 += 1, R10117 += 1 };
  s0 -> s2 [65, 65] { R10117 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R10117 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R10117 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R10117 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10117 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R10117 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R10117 += 1, R114 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10117 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R10119 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R10118 += 1, R10119 += 1 };
  s0 -> s2 [65, 65] { R10119 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R10119 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R10119 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R10119 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10119 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R10119 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R10119 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10119 += 1, R116 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R10121 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R10120 += 1, R10121 += 1 };
  s0 -> s2 [65, 65] { R10121 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R10121 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R10121 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R10121 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10121 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R10121 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R10121 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10121 += 1, R118 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10123 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R10122 += 1, R10123 += 1 };
  s0 -> s2 [65, 65] { R10123 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [65, 65] { R10123 += 1, R120 += 1, R121 += 1 };
  s0 -> s1 [66, 65535] { R10123 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 64] { R10123 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10123 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [65, 65] { R10123 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [66, 65535] { R10123 += 1, R120 += 1, R121 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10123 += 1, R120 += 1, R121 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R10125 += 1 };
  s0 -> s0 [0, 65535] { R10124 += 1, R10125 += 1 };
  s0 -> s2 [65, 65] { R10125 += 1 };
  s0 -> s3 [65, 65] { R10125 += 1 };
  s0 -> s1 [66, 65535] { R10125 += 1 };
  s1 -> s1 [0, 64] { R10125 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10125 += 1 };
  s1 -> s3 [65, 65] { R10125 += 1 };
  s1 -> s1 [66, 65535] { R10125 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10125 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R10127 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R10126 += 1, R10127 += 1 };
  s0 -> s2 [65, 65] { R10127 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [65, 65] { R10127 += 1, R126 += 1, R127 += 1 };
  s0 -> s1 [66, 65535] { R10127 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 64] { R10127 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10127 += 1, R126 += 1, R127 += 1 };
  s1 -> s3 [65, 65] { R10127 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [66, 65535] { R10127 += 1, R126 += 1, R127 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10127 += 1, R126 += 1, R127 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R10129 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R10128 += 1, R10129 += 1 };
  s0 -> s2 [65, 65] { R10129 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [65, 65] { R10129 += 1, R132 += 1, R133 += 1 };
  s0 -> s1 [66, 65535] { R10129 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 64] { R10129 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10129 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [65, 65] { R10129 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [66, 65535] { R10129 += 1, R132 += 1, R133 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10129 += 1, R132 += 1, R133 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R10131 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R10130 += 1, R10131 += 1 };
  s0 -> s2 [65, 65] { R10131 += 1, R136 += 1, R137 += 1 };
  s0 -> s3 [65, 65] { R10131 += 1, R136 += 1, R137 += 1 };
  s0 -> s1 [66, 65535] { R10131 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 64] { R10131 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10131 += 1, R136 += 1, R137 += 1 };
  s1 -> s3 [65, 65] { R10131 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [66, 65535] { R10131 += 1, R136 += 1, R137 += 1 };
  s2 -> s2 [0, 65535] { R10131 += 1, R136 += 1, R137 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R10133 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R10132 += 1, R10133 += 1 };
  s0 -> s2 [65, 65] { R10133 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R10133 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R10133 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R10133 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10133 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R10133 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R10133 += 1, R142 += 1, R143 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10133 += 1, R142 += 1, R143 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R10135 += 1 };
  s0 -> s0 [0, 65535] { R10134 += 1, R10135 += 1 };
  s0 -> s2 [65, 65] { R10135 += 1 };
  s0 -> s3 [65, 65] { R10135 += 1 };
  s0 -> s1 [66, 65535] { R10135 += 1 };
  s1 -> s1 [0, 64] { R10135 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10135 += 1 };
  s1 -> s3 [65, 65] { R10135 += 1 };
  s1 -> s1 [66, 65535] { R10135 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10135 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R10137 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R10136 += 1, R10137 += 1 };
  s0 -> s2 [65, 65] { R10137 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [65, 65] { R10137 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [66, 65535] { R10137 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 64] { R10137 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10137 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [65, 65] { R10137 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [66, 65535] { R10137 += 1, R148 += 1, R149 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10137 += 1, R148 += 1, R149 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R10139 += 1 };
  s0 -> s0 [0, 65535] { R10138 += 1, R10139 += 1 };
  s0 -> s2 [65, 65] { R10139 += 1 };
  s0 -> s3 [65, 65] { R10139 += 1 };
  s0 -> s1 [66, 65535] { R10139 += 1 };
  s1 -> s1 [0, 64] { R10139 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10139 += 1 };
  s1 -> s3 [65, 65] { R10139 += 1 };
  s1 -> s1 [66, 65535] { R10139 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10139 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10141 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R10140 += 1, R10141 += 1 };
  s0 -> s2 [65, 65] { R10141 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [65, 65] { R10141 += 1, R154 += 1, R155 += 1 };
  s0 -> s1 [66, 65535] { R10141 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 64] { R10141 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10141 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [65, 65] { R10141 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [66, 65535] { R10141 += 1, R154 += 1, R155 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10141 += 1, R154 += 1, R155 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 43] { R10143 += 1 };
  s0 -> s0 [0, 65535] { R10142 += 1, R10143 += 1 };
  s0 -> s1 [45, 45] { R10143 += 1 };
  s0 -> s2 [46, 46] { R10143 += 1 };
  s0 -> s1 [48, 62] { R10143 += 1 };
  s0 -> s3 [65, 65] { R10143 += 1 };
  s0 -> s1 [66, 65535] { R10143 += 1 };
  s1 -> s1 [0, 43] { R10143 += 1 };
  s1 -> s1 [45, 45] { R10143 += 1 };
  s1 -> s2 [46, 46] { R10143 += 1 };
  s1 -> s1 [48, 62] { R10143 += 1 };
  s1 -> s3 [65, 65] { R10143 += 1 };
  s1 -> s1 [66, 65535] { R10143 += 1 };
  s2 -> s1 [0, 43] { R10143 += 1 };
  s2 -> s1 [45, 45] { R10143 += 1 };
  s2 -> s2 [46, 46] { R10143 += 1 };
  s2 -> s1 [48, 62] { R10143 += 1 };
  s2 -> s3 [65, 65] { R10143 += 1 };
  s2 -> s1 [66, 114] { R10143 += 1 };
  s2 -> s8 [115, 115] { R10143 += 1 };
  s2 -> s1 [116, 65535] { R10143 += 1 };
  s3 -> s3 [0, 43] { R10143 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10143 += 1 };
  s3 -> s4 [46, 46] { R10143 += 1 };
  s3 -> s3 [48, 62] { R10143 += 1 };
  s3 -> s3 [65, 65535] { R10143 += 1 };
  s4 -> s3 [0, 43] { R10143 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10143 += 1 };
  s4 -> s4 [46, 46] { R10143 += 1 };
  s4 -> s3 [48, 62] { R10143 += 1 };
  s4 -> s3 [65, 114] { R10143 += 1 };
  s4 -> s5 [115, 115] { R10143 += 1 };
  s4 -> s3 [116, 65535] { R10143 += 1 };
  s5 -> s3 [0, 43] { R10143 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10143 += 1 };
  s5 -> s4 [46, 46] { R10143 += 1 };
  s5 -> s3 [48, 62] { R10143 += 1 };
  s5 -> s3 [65, 110] { R10143 += 1 };
  s5 -> s6 [111, 111] { R10143 += 1 };
  s5 -> s3 [112, 65535] { R10143 += 1 };
  s6 -> s3 [0, 43] { R10143 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10143 += 1 };
  s6 -> s4 [46, 46] { R10143 += 1 };
  s6 -> s3 [48, 62] { R10143 += 1 };
  s6 -> s3 [65, 98] { R10143 += 1 };
  s6 -> s7 [99, 99] { R10143 += 1 };
  s6 -> s3 [100, 65535] { R10143 += 1 };
  s7 -> s3 [0, 43] { R10143 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10143 += 1 };
  s7 -> s4 [46, 46] { R10143 += 1 };
  s7 -> s3 [48, 62] { R10143 += 1 };
  s7 -> s3 [65, 106] { R10143 += 1 };
  s7 -> s3 [108, 65535] { R10143 += 1 };
  s8 -> s1 [0, 43] { R10143 += 1 };
  s8 -> s1 [45, 45] { R10143 += 1 };
  s8 -> s2 [46, 46] { R10143 += 1 };
  s8 -> s1 [48, 62] { R10143 += 1 };
  s8 -> s3 [65, 65] { R10143 += 1 };
  s8 -> s1 [66, 110] { R10143 += 1 };
  s8 -> s9 [111, 111] { R10143 += 1 };
  s8 -> s1 [112, 65535] { R10143 += 1 };
  s9 -> s1 [0, 43] { R10143 += 1 };
  s9 -> s1 [45, 45] { R10143 += 1 };
  s9 -> s2 [46, 46] { R10143 += 1 };
  s9 -> s1 [48, 62] { R10143 += 1 };
  s9 -> s3 [65, 65] { R10143 += 1 };
  s9 -> s1 [66, 98] { R10143 += 1 };
  s9 -> s10 [99, 99] { R10143 += 1 };
  s9 -> s1 [100, 65535] { R10143 += 1 };
  s10 -> s1 [0, 43] { R10143 += 1 };
  s10 -> s1 [45, 45] { R10143 += 1 };
  s10 -> s2 [46, 46] { R10143 += 1 };
  s10 -> s1 [48, 62] { R10143 += 1 };
  s10 -> s3 [65, 65] { R10143 += 1 };
  s10 -> s1 [66, 106] { R10143 += 1 };
  s10 -> s1 [108, 65535] { R10143 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R10144 += 1, R10145 += 1 };
  s0 -> s1 [0, 65535] { R10145 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10145 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 57] { R10147 += 1 };
  s0 -> s0 [0, 65535] { R10146 += 1, R10147 += 1 };
  s0 -> s2 [0, 65535] { R10147 += 1, R21 += 1 };
  s0 -> s3 [58, 58] { R10147 += 1 };
  s0 -> s1 [59, 65535] { R10147 += 1 };
  s1 -> s1 [0, 57] { R10147 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10147 += 1 };
  s1 -> s1 [59, 65535] { R10147 += 1 };
  s2 -> s1 [0, 57] { R10147 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10147 += 1, R21 += 1 };
  s2 -> s3 [58, 58] { R10147 += 1 };
  s2 -> s1 [59, 65535] { R10147 += 1 };
  s3 -> s3 [0, 65535] { R10147 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 42] { R10149 += 1 };
  s0 -> s2 [0, 65535] { R10149 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10148 += 1, R10149 += 1 };
  s0 -> s3 [43, 43] { R10149 += 1 };
  s0 -> s1 [44, 65535] { R10149 += 1 };
  s1 -> s1 [0, 42] { R10149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R10149 += 1 };
  s1 -> s1 [44, 65535] { R10149 += 1 };
  s2 -> s1 [0, 42] { R10149 += 1 };
  s2 -> s2 [0, 65535] { R10149 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R10149 += 1 };
  s2 -> s1 [44, 65535] { R10149 += 1 };
  s3 -> s3 [0, 65535] { R10149 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R10151 += 1 };
  s0 -> s2 [0, 65535] { R10151 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R10150 += 1, R10151 += 1 };
  s0 -> s3 [65, 65] { R10151 += 1 };
  s0 -> s1 [66, 65535] { R10151 += 1 };
  s1 -> s1 [0, 64] { R10151 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10151 += 1 };
  s1 -> s1 [66, 65535] { R10151 += 1 };
  s2 -> s1 [0, 64] { R10151 += 1 };
  s2 -> s2 [0, 65535] { R10151 += 1, R25 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R10151 += 1 };
  s2 -> s1 [66, 65535] { R10151 += 1 };
  s3 -> s3 [0, 65535] { R10151 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 90] { R10153 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R10152 += 1, R10153 += 1 };
  s0 -> s2 [0, 65535] { R10153 += 1, R50 += 1, R51 += 1 };
  s0 -> s3 [91, 91] { R10153 += 1, R51 += 1 };
  s0 -> s1 [92, 65535] { R10153 += 1, R51 += 1 };
  s1 -> s5 [0, 65535] { R10153 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10153 += 1, R51 += 1 };
  s2 -> s1 [0, 90] { R10153 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10153 += 1, R50 += 1, R51 += 1 };
  s2 -> s3 [91, 91] { R10153 += 1, R51 += 1 };
  s2 -> s1 [92, 65535] { R10153 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R10153 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10153 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 65535] { R10155 += 1, R53 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R10154 += 1, R10155 += 1 };
  s0 -> s2 [0, 65535] { R10155 += 1, R52 += 1, R53 += 1 };
  s1 -> s4 [0, 65535] { R10155 += 1 };
  s1 -> s1 [0, 65535] { R10155 += 1, R53 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10155 += 1, R53 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R10155 += 1, R52 += 1, R53 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10155 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R10157 += 1, R83 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R10157 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R10156 += 1, R10157 += 1 };
  s1 -> s1 [0, 65535] { R10157 += 1, R83 += 1, R42 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10157 += 1 };
  s2 -> s1 [0, 65535] { R10157 += 1, R83 += 1, R42 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10157 += 1, R82 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10157 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 107] { R10159 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R10159 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R10158 += 1, R10159 += 1 };
  s0 -> s3 [108, 108] { R10159 += 1, R85 += 1 };
  s0 -> s1 [109, 65535] { R10159 += 1, R85 += 1 };
  s1 -> s13 [0, 65535] { R10159 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10159 += 1, R85 += 1 };
  s2 -> s1 [0, 107] { R10159 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10159 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [108, 108] { R10159 += 1, R85 += 1 };
  s2 -> s1 [109, 65535] { R10159 += 1, R85 += 1 };
  s3 -> s1 [0, 110] { R10159 += 1, R85 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10159 += 1 };
  s3 -> s5 [111, 111] { R10159 += 1, R85 += 1 };
  s3 -> s1 [112, 65535] { R10159 += 1, R85 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10159 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R10159 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10159 += 1, R85 += 1 };
  s5 -> s1 [100, 65535] { R10159 += 1, R85 += 1 };
  s6 -> s1 [0, 96] { R10159 += 1, R85 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10159 += 1 };
  s6 -> s7 [97, 97] { R10159 += 1, R85 += 1 };
  s6 -> s1 [98, 65535] { R10159 += 1, R85 += 1 };
  s7 -> s1 [0, 107] { R10159 += 1, R85 += 1 };
  s7 -> s7 [0, 65535] { R10159 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R10159 += 1, R85 += 1 };
  s7 -> s1 [109, 65535] { R10159 += 1, R85 += 1 };
  s8 -> s1 [0, 103] { R10159 += 1, R85 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R10159 += 1 };
  s8 -> s9 [104, 104] { R10159 += 1, R85 += 1 };
  s8 -> s1 [105, 65535] { R10159 += 1, R85 += 1 };
  s9 -> s1 [0, 110] { R10159 += 1, R85 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R10159 += 1 };
  s9 -> s10 [111, 111] { R10159 += 1, R85 += 1 };
  s9 -> s1 [112, 65535] { R10159 += 1, R85 += 1 };
  s10 -> s1 [0, 114] { R10159 += 1, R85 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R10159 += 1 };
  s10 -> s11 [115, 115] { R10159 += 1, R85 += 1 };
  s10 -> s1 [116, 65535] { R10159 += 1, R85 += 1 };
  s11 -> s1 [0, 115] { R10159 += 1, R85 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10159 += 1 };
  s11 -> s12 [116, 116] { R10159 += 1, R85 += 1 };
  s11 -> s1 [117, 65535] { R10159 += 1, R85 += 1 };
  s12 -> s1 [0, 65535] { R10159 += 1, R85 += 1 };
  s13 -> s13 [0, 65535] { R10159 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R10161 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R10161 += 1, R87 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10160 += 1, R10161 += 1 };
  s1 -> s1 [0, 65535] { R10161 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [0, 65535] { R10161 += 1, R87 += 1, R57 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10161 += 1, R87 += 1, R57 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10161 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10161 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R10163 += 1, R106 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R10163 += 1, R107 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R10162 += 1, R10163 += 1 };
  s1 -> s1 [0, 65535] { R10163 += 1, R106 += 1, R107 += 1 };
  s1 -> s2 [0, 65535] { R10163 += 1, R107 += 1, R44 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10163 += 1, R107 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10163 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10163 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R10165 += 1 };
  s0 -> s0 [0, 65535] { R10164 += 1, R10165 += 1 };
  s1 -> s1 [0, 65535] { R10165 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 42] { R10167 += 1, R109 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R10166 += 1, R10167 += 1 };
  s0 -> s2 [0, 65535] { R10167 += 1, R108 += 1, R109 += 1 };
  s0 -> s3 [43, 43] { R10167 += 1, R109 += 1, R56 += 1 };
  s0 -> s4 [43, 43] { R10167 += 1, R109 += 1, R56 += 1 };
  s0 -> s1 [44, 65535] { R10167 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [0, 42] { R10167 += 1, R109 += 1, R56 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10167 += 1 };
  s1 -> s3 [43, 43] { R10167 += 1, R109 += 1, R56 += 1 };
  s1 -> s4 [43, 43] { R10167 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [44, 65535] { R10167 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [0, 42] { R10167 += 1, R109 += 1, R56 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10167 += 1, R108 += 1, R109 += 1 };
  s2 -> s3 [43, 43] { R10167 += 1, R109 += 1, R56 += 1 };
  s2 -> s4 [43, 43] { R10167 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [44, 65535] { R10167 += 1, R109 += 1, R56 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10167 += 1, R109 += 1, R56 += 1 };
  s3 -> s6 [0, 65535] { R10167 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10167 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10167 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10169 += 1, R10021 += 1 };
  s0 -> s2 [0, 65535] { R10169 += 1, R10020 += 1, R10021 += 1 };
  s0 -> s0 [0, 65535] { R10168 += 1, R10169 += 1 };
  s0 -> s1 [66, 65535] { R10169 += 1, R10021 += 1 };
  s1 -> s1 [0, 64] { R10169 += 1, R10021 += 1 };
  s1 -> s1 [0, 65535] { R10169 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R10169 += 1, R10021 += 1 };
  s2 -> s1 [0, 64] { R10169 += 1, R10021 += 1 };
  s2 -> s2 [0, 65535] { R10169 += 1, R10020 += 1, R10021 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10169 += 1, R10021 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R10171 += 1, R10022 += 1, R10023 += 1 };
  s0 -> s0 [0, 65535] { R10170 += 1, R10171 += 1 };
  s0 -> s2 [0, 65535] { R10171 += 1, R10023 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10171 += 1, R10022 += 1, R10023 += 1 };
  s1 -> s2 [0, 65535] { R10171 += 1, R10023 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10171 += 1 };
  s2 -> s2 [0, 65535] { R10171 += 1, R10023 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10171 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R10173 += 1, R10025 += 1 };
  s0 -> s2 [0, 65535] { R10173 += 1, R10024 += 1, R10025 += 1 };
  s0 -> s0 [0, 65535] { R10172 += 1, R10173 += 1 };
  s0 -> s1 [80, 65535] { R10173 += 1, R10025 += 1 };
  s1 -> s1 [0, 65] { R10173 += 1, R10025 += 1 };
  s1 -> s1 [0, 65535] { R10173 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R10173 += 1, R10025 += 1 };
  s2 -> s1 [0, 65] { R10173 += 1, R10025 += 1 };
  s2 -> s2 [0, 65535] { R10173 += 1, R10024 += 1, R10025 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R10173 += 1, R10025 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R10175 += 1, R10026 += 1, R10027 += 1 };
  s0 -> s2 [0, 65535] { R10175 += 1, R10027 += 1, R667 += 1 };
  s0 -> s0 [0, 65535] { R10174 += 1, R10175 += 1 };
  s1 -> s1 [0, 65535] { R10175 += 1, R10026 += 1, R10027 += 1 };
  s1 -> s2 [0, 65535] { R10175 += 1, R10027 += 1, R667 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10175 += 1, R10027 += 1, R667 += 1 };
  s2 -> s3 [0, 65535] { R10175 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10175 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 81] { R10177 += 1, R10029 += 1 };
  s0 -> s2 [0, 65535] { R10177 += 1, R10029 += 1, R669 += 1 };
  s0 -> s3 [0, 65535] { R10177 += 1, R10028 += 1, R10029 += 1 };
  s0 -> s0 [0, 65535] { R10176 += 1, R10177 += 1 };
  s0 -> s1 [83, 65535] { R10177 += 1, R10029 += 1 };
  s1 -> s1 [0, 81] { R10177 += 1, R10029 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10177 += 1 };
  s1 -> s1 [83, 65535] { R10177 += 1, R10029 += 1 };
  s2 -> s1 [0, 81] { R10177 += 1, R10029 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10177 += 1, R10029 += 1, R669 += 1 };
  s2 -> s5 [0, 65535] { R10177 += 1 };
  s2 -> s1 [83, 65535] { R10177 += 1, R10029 += 1 };
  s3 -> s1 [0, 81] { R10177 += 1, R10029 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10177 += 1, R10029 += 1, R669 += 1 };
  s3 -> s3 [0, 65535] { R10177 += 1, R10028 += 1, R10029 += 1 };
  s3 -> s1 [83, 65535] { R10177 += 1, R10029 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10177 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 79] { R10179 += 1, R10031 += 1 };
  s0 -> s2 [0, 65535] { R10179 += 1, R10031 += 1, R671 += 1 };
  s0 -> s3 [0, 65535] { R10179 += 1, R10030 += 1, R10031 += 1 };
  s0 -> s0 [0, 65535] { R10178 += 1, R10179 += 1 };
  s0 -> s1 [81, 65535] { R10179 += 1, R10031 += 1 };
  s1 -> s1 [0, 79] { R10179 += 1, R10031 += 1 };
  s1 -> s1 [0, 65535] { R10179 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R10179 += 1, R10031 += 1 };
  s2 -> s1 [0, 79] { R10179 += 1, R10031 += 1 };
  s2 -> s5 [0, 65535] { R10179 += 1 };
  s2 -> s2 [0, 65535] { R10179 += 1, R10031 += 1, R671 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R10179 += 1, R10031 += 1 };
  s3 -> s1 [0, 79] { R10179 += 1, R10031 += 1 };
  s3 -> s2 [0, 65535] { R10179 += 1, R10031 += 1, R671 += 1 };
  s3 -> s3 [0, 65535] { R10179 += 1, R10030 += 1, R10031 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R10179 += 1, R10031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10179 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R10181 += 1, R10033 += 1, R676 += 1, R677 += 1 };
  s0 -> s2 [0, 65535] { R10181 += 1, R10033 += 1, R675 += 1, R676 += 1 };
  s0 -> s3 [0, 65535] { R10181 += 1, R10032 += 1, R10033 += 1 };
  s0 -> s0 [0, 65535] { R10180 += 1, R10181 += 1 };
  s1 -> s1 [0, 65535] { R10181 += 1, R10033 += 1, R676 += 1, R677 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10181 += 1 };
  s1 -> s6 [0, 65535] { R10181 += 1, R10033 += 1 };
  s2 -> s1 [0, 65535] { R10181 += 1, R10033 += 1, R676 += 1, R677 += 1 };
  s2 -> s2 [0, 65535] { R10181 += 1, R10033 += 1, R675 += 1, R676 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10181 += 1 };
  s3 -> s1 [0, 65535] { R10181 += 1, R10033 += 1, R676 += 1, R677 += 1 };
  s3 -> s2 [0, 65535] { R10181 += 1, R10033 += 1, R675 += 1, R676 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10181 += 1, R10032 += 1, R10033 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10181 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10181 += 1 };
  s6 -> s6 [0, 65535] { R10181 += 1, R10033 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 107] { R10183 += 1, R10035 += 1, R681 += 1 };
  s0 -> s2 [0, 65535] { R10183 += 1, R10035 += 1, R680 += 1, R681 += 1 };
  s0 -> s0 [0, 65535] { R10182 += 1, R10183 += 1 };
  s0 -> s3 [0, 65535] { R10183 += 1, R10034 += 1, R10035 += 1 };
  s0 -> s4 [108, 108] { R10183 += 1, R10035 += 1, R681 += 1 };
  s0 -> s1 [109, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s1 -> s15 [0, 65535] { R10183 += 1, R10035 += 1 };
  s1 -> s6 [0, 65535] { R10183 += 1 };
  s2 -> s1 [0, 107] { R10183 += 1, R10035 += 1, R681 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10183 += 1, R10035 += 1, R680 += 1, R681 += 1 };
  s2 -> s6 [0, 65535] { R10183 += 1 };
  s2 -> s4 [108, 108] { R10183 += 1, R10035 += 1, R681 += 1 };
  s2 -> s1 [109, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s3 -> s1 [0, 107] { R10183 += 1, R10035 += 1, R681 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10183 += 1, R10035 += 1, R680 += 1, R681 += 1 };
  s3 -> s3 [0, 65535] { R10183 += 1, R10034 += 1, R10035 += 1 };
  s3 -> s4 [108, 108] { R10183 += 1, R10035 += 1, R681 += 1 };
  s3 -> s1 [109, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s4 -> s1 [0, 110] { R10183 += 1, R10035 += 1, R681 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10183 += 1, R10035 += 1 };
  s4 -> s6 [0, 65535] { R10183 += 1 };
  s4 -> s7 [111, 111] { R10183 += 1, R10035 += 1, R681 += 1 };
  s4 -> s1 [112, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10183 += 1 };
  s7 -> s1 [0, 98] { R10183 += 1, R10035 += 1, R681 += 1 };
  s7 -> s7 [0, 65535] { R10183 += 1, R10035 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10183 += 1 };
  s7 -> s8 [99, 99] { R10183 += 1, R10035 += 1, R681 += 1 };
  s7 -> s1 [100, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s8 -> s1 [0, 96] { R10183 += 1, R10035 += 1, R681 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10183 += 1 };
  s8 -> s8 [0, 65535] { R10183 += 1, R10035 += 1 };
  s8 -> s9 [97, 97] { R10183 += 1, R10035 += 1, R681 += 1 };
  s8 -> s1 [98, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s9 -> s1 [0, 107] { R10183 += 1, R10035 += 1, R681 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R10183 += 1 };
  s9 -> s9 [0, 65535] { R10183 += 1, R10035 += 1 };
  s9 -> s10 [108, 108] { R10183 += 1, R10035 += 1, R681 += 1 };
  s9 -> s1 [109, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s10 -> s1 [0, 103] { R10183 += 1, R10035 += 1, R681 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R10183 += 1, R10035 += 1 };
  s10 -> s6 [0, 65535] { R10183 += 1 };
  s10 -> s11 [104, 104] { R10183 += 1, R10035 += 1, R681 += 1 };
  s10 -> s1 [105, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s11 -> s1 [0, 110] { R10183 += 1, R10035 += 1, R681 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R10183 += 1, R10035 += 1 };
  s11 -> s6 [0, 65535] { R10183 += 1 };
  s11 -> s12 [111, 111] { R10183 += 1, R10035 += 1, R681 += 1 };
  s11 -> s1 [112, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s12 -> s1 [0, 114] { R10183 += 1, R10035 += 1, R681 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R10183 += 1 };
  s12 -> s12 [0, 65535] { R10183 += 1, R10035 += 1 };
  s12 -> s13 [115, 115] { R10183 += 1, R10035 += 1, R681 += 1 };
  s12 -> s1 [116, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s13 -> s1 [0, 115] { R10183 += 1, R10035 += 1, R681 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R10183 += 1, R10035 += 1 };
  s13 -> s6 [0, 65535] { R10183 += 1 };
  s13 -> s14 [116, 116] { R10183 += 1, R10035 += 1, R681 += 1 };
  s13 -> s1 [117, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s14 -> s1 [0, 65535] { R10183 += 1, R10035 += 1, R681 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s15 [0, 65535] { R10183 += 1, R10035 += 1 };
  s15 -> s6 [0, 65535] { R10183 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 79] { R10185 += 1, R10037 += 1, R685 += 1 };
  s0 -> s0 [0, 65535] { R10184 += 1, R10185 += 1 };
  s0 -> s2 [0, 65535] { R10185 += 1, R10037 += 1, R684 += 1, R685 += 1 };
  s0 -> s3 [0, 65535] { R10185 += 1, R10036 += 1, R10037 += 1 };
  s0 -> s1 [81, 65535] { R10185 += 1, R10037 += 1, R685 += 1 };
  s1 -> s1 [0, 79] { R10185 += 1, R10037 += 1, R685 += 1 };
  s1 -> s5 [0, 65535] { R10185 += 1 };
  s1 -> s1 [0, 65535] { R10185 += 1, R10037 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R10185 += 1, R10037 += 1, R685 += 1 };
  s2 -> s1 [0, 79] { R10185 += 1, R10037 += 1, R685 += 1 };
  s2 -> s5 [0, 65535] { R10185 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10185 += 1, R10037 += 1, R684 += 1, R685 += 1 };
  s2 -> s1 [81, 65535] { R10185 += 1, R10037 += 1, R685 += 1 };
  s3 -> s1 [0, 79] { R10185 += 1, R10037 += 1, R685 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10185 += 1, R10037 += 1, R684 += 1, R685 += 1 };
  s3 -> s3 [0, 65535] { R10185 += 1, R10036 += 1, R10037 += 1 };
  s3 -> s1 [81, 65535] { R10185 += 1, R10037 += 1, R685 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10185 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 65535] { R10187 += 1, R10039 += 1, R689 += 1, R690 += 1 };
  s0 -> s0 [0, 65535] { R10186 += 1, R10187 += 1 };
  s0 -> s2 [0, 65535] { R10187 += 1, R10038 += 1, R10039 += 1 };
  s0 -> s3 [0, 65535] { R10187 += 1, R10039 += 1, R690 += 1, R691 += 1 };
  s1 -> s1 [0, 65535] { R10187 += 1, R10039 += 1, R689 += 1, R690 += 1 };
  s1 -> s5 [0, 65535] { R10187 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R10187 += 1, R10039 += 1, R690 += 1, R691 += 1 };
  s2 -> s1 [0, 65535] { R10187 += 1, R10039 += 1, R689 += 1, R690 += 1 };
  s2 -> s2 [0, 65535] { R10187 += 1, R10038 += 1, R10039 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10187 += 1, R10039 += 1, R690 += 1, R691 += 1 };
  s3 -> s4 [0, 65535] { R10187 += 1, R10039 += 1 };
  s3 -> s5 [0, 65535] { R10187 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10187 += 1, R10039 += 1, R690 += 1, R691 += 1 };
  s4 -> s4 [0, 65535] { R10187 += 1, R10039 += 1 };
  s4 -> s5 [0, 65535] { R10187 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10187 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s0 -> s2 [0, 65535] { R10189 += 1, R10040 += 1, R10041 += 1 };
  s0 -> s3 [0, 65535] { R10189 += 1, R10041 += 1, R694 += 1, R695 += 1 };
  s0 -> s0 [0, 65535] { R10188 += 1, R10189 += 1 };
  s0 -> s1 [91, 107] { R10189 += 1, R10041 += 1, R695 += 1 };
  s0 -> s4 [108, 108] { R10189 += 1, R10041 += 1, R695 += 1 };
  s0 -> s1 [109, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s1 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10189 += 1 };
  s1 -> s1 [0, 65535] { R10189 += 1, R10041 += 1 };
  s1 -> s1 [91, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s2 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s2 -> s2 [0, 65535] { R10189 += 1, R10040 += 1, R10041 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10189 += 1, R10041 += 1, R694 += 1, R695 += 1 };
  s2 -> s1 [91, 107] { R10189 += 1, R10041 += 1, R695 += 1 };
  s2 -> s4 [108, 108] { R10189 += 1, R10041 += 1, R695 += 1 };
  s2 -> s1 [109, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s3 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10189 += 1 };
  s3 -> s3 [0, 65535] { R10189 += 1, R10041 += 1, R694 += 1, R695 += 1 };
  s3 -> s1 [91, 107] { R10189 += 1, R10041 += 1, R695 += 1 };
  s3 -> s4 [108, 108] { R10189 += 1, R10041 += 1, R695 += 1 };
  s3 -> s1 [109, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s4 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s4 -> s4 [0, 65535] { R10189 += 1, R10041 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10189 += 1 };
  s4 -> s1 [91, 110] { R10189 += 1, R10041 += 1, R695 += 1 };
  s4 -> s7 [111, 111] { R10189 += 1, R10041 += 1, R695 += 1 };
  s4 -> s1 [112, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10189 += 1 };
  s7 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10189 += 1 };
  s7 -> s7 [0, 65535] { R10189 += 1, R10041 += 1 };
  s7 -> s1 [91, 98] { R10189 += 1, R10041 += 1, R695 += 1 };
  s7 -> s8 [99, 99] { R10189 += 1, R10041 += 1, R695 += 1 };
  s7 -> s1 [100, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s8 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10189 += 1 };
  s8 -> s8 [0, 65535] { R10189 += 1, R10041 += 1 };
  s8 -> s1 [91, 96] { R10189 += 1, R10041 += 1, R695 += 1 };
  s8 -> s9 [97, 97] { R10189 += 1, R10041 += 1, R695 += 1 };
  s8 -> s1 [98, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s9 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R10189 += 1 };
  s9 -> s9 [0, 65535] { R10189 += 1, R10041 += 1 };
  s9 -> s1 [91, 107] { R10189 += 1, R10041 += 1, R695 += 1 };
  s9 -> s10 [108, 108] { R10189 += 1, R10041 += 1, R695 += 1 };
  s9 -> s1 [109, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s10 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R10189 += 1 };
  s10 -> s10 [0, 65535] { R10189 += 1, R10041 += 1 };
  s10 -> s1 [91, 103] { R10189 += 1, R10041 += 1, R695 += 1 };
  s10 -> s11 [104, 104] { R10189 += 1, R10041 += 1, R695 += 1 };
  s10 -> s1 [105, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s11 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R10189 += 1, R10041 += 1 };
  s11 -> s6 [0, 65535] { R10189 += 1 };
  s11 -> s1 [91, 110] { R10189 += 1, R10041 += 1, R695 += 1 };
  s11 -> s12 [111, 111] { R10189 += 1, R10041 += 1, R695 += 1 };
  s11 -> s1 [112, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s12 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R10189 += 1 };
  s12 -> s12 [0, 65535] { R10189 += 1, R10041 += 1 };
  s12 -> s1 [91, 114] { R10189 += 1, R10041 += 1, R695 += 1 };
  s12 -> s13 [115, 115] { R10189 += 1, R10041 += 1, R695 += 1 };
  s12 -> s1 [116, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s13 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R10189 += 1 };
  s13 -> s13 [0, 65535] { R10189 += 1, R10041 += 1 };
  s13 -> s1 [91, 115] { R10189 += 1, R10041 += 1, R695 += 1 };
  s13 -> s14 [116, 116] { R10189 += 1, R10041 += 1, R695 += 1 };
  s13 -> s1 [117, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  s14 -> s1 [0, 80] { R10189 += 1, R10041 += 1, R695 += 1 };
  s14 -> s1 [91, 65535] { R10189 += 1, R10041 += 1, R695 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R10191 += 1, R10043 += 1, R699 += 1, R700 += 1 };
  s0 -> s0 [0, 65535] { R10190 += 1, R10191 += 1 };
  s0 -> s2 [0, 65535] { R10191 += 1, R10043 += 1, R700 += 1, R701 += 1 };
  s0 -> s3 [0, 65535] { R10191 += 1, R10042 += 1, R10043 += 1 };
  s1 -> s1 [0, 65535] { R10191 += 1, R10043 += 1, R699 += 1, R700 += 1 };
  s1 -> s2 [0, 65535] { R10191 += 1, R10043 += 1, R700 += 1, R701 += 1 };
  s1 -> s5 [0, 65535] { R10191 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10191 += 1, R10043 += 1, R700 += 1, R701 += 1 };
  s2 -> s5 [0, 65535] { R10191 += 1 };
  s2 -> s6 [0, 65535] { R10191 += 1, R10043 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10191 += 1, R10043 += 1, R699 += 1, R700 += 1 };
  s3 -> s2 [0, 65535] { R10191 += 1, R10043 += 1, R700 += 1, R701 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10191 += 1, R10042 += 1, R10043 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10191 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10191 += 1 };
  s6 -> s6 [0, 65535] { R10191 += 1, R10043 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R10193 += 1, R10044 += 1, R10045 += 1 };
  s0 -> s0 [0, 65535] { R10192 += 1, R10193 += 1 };
  s0 -> s2 [0, 65535] { R10193 += 1, R10045 += 1 };
  s1 -> s1 [0, 65535] { R10193 += 1, R10044 += 1, R10045 += 1 };
  s1 -> s2 [0, 65535] { R10193 += 1, R10045 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10193 += 1, R10045 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10193 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10193 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 65535] { R10195 += 1, R10047 += 1 };
  s0 -> s0 [0, 65535] { R10194 += 1, R10195 += 1 };
  s0 -> s2 [0, 65535] { R10195 += 1, R10046 += 1, R10047 += 1 };
  s1 -> s1 [0, 65535] { R10195 += 1, R10047 += 1 };
  s1 -> s4 [0, 65535] { R10195 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10195 += 1, R10047 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10195 += 1, R10046 += 1, R10047 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10195 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 65535] { R10197 += 1, R10049 += 1 };
  s0 -> s2 [0, 65535] { R10197 += 1, R10048 += 1, R10049 += 1 };
  s0 -> s0 [0, 65535] { R10196 += 1, R10197 += 1 };
  s1 -> s1 [0, 65535] { R10197 += 1, R10049 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10197 += 1 };
  s2 -> s1 [0, 65535] { R10197 += 1, R10049 += 1 };
  s2 -> s2 [0, 65535] { R10197 += 1, R10048 += 1, R10049 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10197 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 65535] { R10199 += 1, R10051 += 1 };
  s0 -> s0 [0, 65535] { R10198 += 1, R10199 += 1 };
  s0 -> s2 [0, 65535] { R10199 += 1, R10050 += 1, R10051 += 1 };
  s1 -> s4 [0, 65535] { R10199 += 1 };
  s1 -> s1 [0, 65535] { R10199 += 1, R10051 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10199 += 1, R10051 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10199 += 1, R10050 += 1, R10051 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10199 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s0 [0, 65535] { R10200 += 1, R10201 += 1 };
  s0 -> s1 [0, 65535] { R10201 += 1, R10053 += 1 };
  s0 -> s2 [0, 65535] { R10201 += 1, R10053 += 1, R10018 += 1, R10019 += 1 };
  s0 -> s3 [0, 65535] { R10201 += 1, R10052 += 1, R10053 += 1 };
  s1 -> s5 [0, 65535] { R10201 += 1 };
  s1 -> s1 [0, 65535] { R10201 += 1, R10053 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10201 += 1 };
  s2 -> s1 [0, 65535] { R10201 += 1, R10053 += 1 };
  s2 -> s2 [0, 65535] { R10201 += 1, R10053 += 1, R10018 += 1, R10019 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10201 += 1, R10053 += 1 };
  s3 -> s2 [0, 65535] { R10201 += 1, R10053 += 1, R10018 += 1, R10019 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10201 += 1, R10052 += 1, R10053 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10201 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s0 [0, 65535] { R10202 += 1, R10203 += 1 };
  s0 -> s1 [0, 65535] { R10203 += 1, R10082 += 1, R10083 += 1 };
  s0 -> s2 [0, 65535] { R10203 += 1, R10083 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R10203 += 1, R10082 += 1, R10083 += 1 };
  s1 -> s2 [0, 65535] { R10203 += 1, R10083 += 1, R45 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10203 += 1, R10083 += 1, R45 += 1 };
  s2 -> s3 [0, 65535] { R10203 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10203 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R10205 += 1, R10085 += 1 };
  s0 -> s2 [0, 65535] { R10205 += 1, R10084 += 1, R10085 += 1 };
  s0 -> s0 [0, 65535] { R10204 += 1, R10205 += 1 };
  s0 -> s3 [65, 65] { R10205 += 1, R10085 += 1 };
  s0 -> s4 [65, 65] { R10205 += 1, R10085 += 1 };
  s0 -> s5 [80, 80] { R10205 += 1, R10085 += 1 };
  s0 -> s1 [81, 65535] { R10205 += 1, R10085 += 1 };
  s1 -> s1 [0, 64] { R10205 += 1, R10085 += 1 };
  s1 -> s3 [65, 65] { R10205 += 1, R10085 += 1 };
  s1 -> s4 [65, 65] { R10205 += 1, R10085 += 1 };
  s1 -> s5 [80, 80] { R10205 += 1, R10085 += 1 };
  s1 -> s1 [81, 65535] { R10205 += 1, R10085 += 1 };
  s2 -> s1 [0, 64] { R10205 += 1, R10085 += 1 };
  s2 -> s2 [0, 65535] { R10205 += 1, R10084 += 1, R10085 += 1 };
  s2 -> s3 [65, 65] { R10205 += 1, R10085 += 1 };
  s2 -> s4 [65, 65] { R10205 += 1, R10085 += 1 };
  s2 -> s5 [80, 80] { R10205 += 1, R10085 += 1 };
  s2 -> s1 [81, 65535] { R10205 += 1, R10085 += 1 };
  s3 -> s3 [0, 65] { R10205 += 1, R10085 += 1 };
  s3 -> s7 [80, 80] { R10205 += 1, R10085 += 1 };
  s3 -> s3 [81, 65535] { R10205 += 1, R10085 += 1 };
  s5 -> s5 [0, 64] { R10205 += 1, R10085 += 1 };
  s5 -> s5 [0, 65535] { R10205 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R10205 += 1, R10085 += 1 };
  s5 -> s8 [65, 65] { R10205 += 1, R10085 += 1 };
  s5 -> s5 [80, 65535] { R10205 += 1, R10085 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10205 += 1, R10085 += 1 };
  s7 -> s7 [0, 65535] { R10205 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R10205 += 1, R10085 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10205 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R10207 += 1, R10087 += 1, R666 += 1 };
  s0 -> s0 [0, 65535] { R10206 += 1, R10207 += 1 };
  s0 -> s2 [0, 65535] { R10207 += 1, R10086 += 1, R10087 += 1 };
  s0 -> s3 [65, 65] { R10207 += 1, R10087 += 1, R666 += 1 };
  s0 -> s4 [65, 65] { R10207 += 1, R10087 += 1, R666 += 1 };
  s0 -> s1 [66, 65535] { R10207 += 1, R10087 += 1, R666 += 1 };
  s1 -> s1 [0, 64] { R10207 += 1, R10087 += 1, R666 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10207 += 1 };
  s1 -> s3 [65, 65] { R10207 += 1, R10087 += 1, R666 += 1 };
  s1 -> s4 [65, 65] { R10207 += 1, R10087 += 1, R666 += 1 };
  s1 -> s1 [66, 65535] { R10207 += 1, R10087 += 1, R666 += 1 };
  s2 -> s1 [0, 64] { R10207 += 1, R10087 += 1, R666 += 1 };
  s2 -> s2 [0, 65535] { R10207 += 1, R10086 += 1, R10087 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10207 += 1, R10087 += 1, R666 += 1 };
  s2 -> s4 [65, 65] { R10207 += 1, R10087 += 1, R666 += 1 };
  s2 -> s1 [66, 65535] { R10207 += 1, R10087 += 1, R666 += 1 };
  s3 -> s3 [0, 65535] { R10207 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10207 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10207 += 1, R10087 += 1, R666 += 1 };
  s5 -> s5 [0, 65535] { R10207 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R10209 += 1, R10089 += 1, R668 += 1 };
  s0 -> s2 [0, 65535] { R10209 += 1, R10088 += 1, R10089 += 1 };
  s0 -> s0 [0, 65535] { R10208 += 1, R10209 += 1 };
  s0 -> s3 [65, 65] { R10209 += 1, R10089 += 1, R668 += 1 };
  s0 -> s4 [65, 65] { R10209 += 1, R10089 += 1, R668 += 1 };
  s0 -> s1 [66, 65535] { R10209 += 1, R10089 += 1, R668 += 1 };
  s1 -> s1 [0, 64] { R10209 += 1, R10089 += 1, R668 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10209 += 1 };
  s1 -> s3 [65, 65] { R10209 += 1, R10089 += 1, R668 += 1 };
  s1 -> s4 [65, 65] { R10209 += 1, R10089 += 1, R668 += 1 };
  s1 -> s1 [66, 65535] { R10209 += 1, R10089 += 1, R668 += 1 };
  s2 -> s1 [0, 64] { R10209 += 1, R10089 += 1, R668 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10209 += 1, R10088 += 1, R10089 += 1 };
  s2 -> s3 [65, 65] { R10209 += 1, R10089 += 1, R668 += 1 };
  s2 -> s4 [65, 65] { R10209 += 1, R10089 += 1, R668 += 1 };
  s2 -> s1 [66, 65535] { R10209 += 1, R10089 += 1, R668 += 1 };
  s3 -> s3 [0, 65535] { R10209 += 1, R10089 += 1, R668 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10209 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10209 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10209 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R10211 += 1, R10091 += 1, R670 += 1 };
  s0 -> s2 [0, 65535] { R10211 += 1, R10090 += 1, R10091 += 1 };
  s0 -> s0 [0, 65535] { R10210 += 1, R10211 += 1 };
  s0 -> s3 [65, 65] { R10211 += 1, R10091 += 1, R670 += 1 };
  s0 -> s4 [65, 65] { R10211 += 1, R10091 += 1, R670 += 1 };
  s0 -> s1 [66, 65535] { R10211 += 1, R10091 += 1, R670 += 1 };
  s1 -> s1 [0, 64] { R10211 += 1, R10091 += 1, R670 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10211 += 1 };
  s1 -> s3 [65, 65] { R10211 += 1, R10091 += 1, R670 += 1 };
  s1 -> s4 [65, 65] { R10211 += 1, R10091 += 1, R670 += 1 };
  s1 -> s1 [66, 65535] { R10211 += 1, R10091 += 1, R670 += 1 };
  s2 -> s1 [0, 64] { R10211 += 1, R10091 += 1, R670 += 1 };
  s2 -> s2 [0, 65535] { R10211 += 1, R10090 += 1, R10091 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10211 += 1, R10091 += 1, R670 += 1 };
  s2 -> s4 [65, 65] { R10211 += 1, R10091 += 1, R670 += 1 };
  s2 -> s1 [66, 65535] { R10211 += 1, R10091 += 1, R670 += 1 };
  s3 -> s3 [0, 65535] { R10211 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10211 += 1, R10091 += 1, R670 += 1 };
  s4 -> s5 [0, 65535] { R10211 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10211 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s0 -> s2 [0, 65535] { R10213 += 1, R10092 += 1, R10093 += 1 };
  s0 -> s0 [0, 65535] { R10212 += 1, R10213 += 1 };
  s0 -> s3 [65, 65] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s0 -> s4 [65, 65] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s0 -> s1 [66, 65535] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 64] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 65535] { R10213 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s1 -> s4 [65, 65] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [66, 65535] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [0, 64] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s2 -> s2 [0, 65535] { R10213 += 1, R10092 += 1, R10093 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s2 -> s4 [65, 65] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [66, 65535] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s3 -> s6 [0, 65535] { R10213 += 1 };
  s3 -> s3 [0, 65535] { R10213 += 1, R10093 += 1, R672 += 1, R673 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10213 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10213 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 64] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s0 -> s0 [0, 65535] { R10214 += 1, R10215 += 1 };
  s0 -> s2 [0, 65535] { R10215 += 1, R10094 += 1, R10095 += 1 };
  s0 -> s3 [65, 65] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s0 -> s4 [65, 65] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s0 -> s1 [66, 65535] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 64] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 65535] { R10215 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s1 -> s4 [65, 65] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [66, 65535] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [0, 64] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10215 += 1, R10094 += 1, R10095 += 1 };
  s2 -> s3 [65, 65] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s2 -> s4 [65, 65] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [66, 65535] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s3 -> s3 [0, 65535] { R10215 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10215 += 1 };
  s4 -> s4 [0, 65535] { R10215 += 1, R10095 += 1, R678 += 1, R679 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10215 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s1 [0, 64] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s0 -> s2 [0, 65535] { R10217 += 1, R10096 += 1, R10097 += 1 };
  s0 -> s0 [0, 65535] { R10216 += 1, R10217 += 1 };
  s0 -> s3 [65, 65] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s0 -> s4 [65, 65] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s0 -> s1 [66, 65535] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 64] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 65535] { R10217 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s1 -> s4 [65, 65] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [66, 65535] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [0, 64] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s2 -> s2 [0, 65535] { R10217 += 1, R10096 += 1, R10097 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s2 -> s4 [65, 65] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [66, 65535] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s3 -> s3 [0, 65535] { R10217 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10217 += 1 };
  s4 -> s4 [0, 65535] { R10217 += 1, R10097 += 1, R682 += 1, R683 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10217 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 64] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s0 -> s0 [0, 65535] { R10218 += 1, R10219 += 1 };
  s0 -> s2 [0, 65535] { R10219 += 1, R10098 += 1, R10099 += 1 };
  s0 -> s3 [65, 65] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s0 -> s4 [65, 65] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s0 -> s1 [66, 65535] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 64] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 65535] { R10219 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s1 -> s4 [65, 65] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [66, 65535] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [0, 64] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s2 -> s2 [0, 65535] { R10219 += 1, R10098 += 1, R10099 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s2 -> s4 [65, 65] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [66, 65535] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s3 -> s3 [0, 65535] { R10219 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10219 += 1, R10099 += 1, R686 += 1, R687 += 1 };
  s4 -> s5 [0, 65535] { R10219 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10219 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s1 [0, 64] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s0 -> s0 [0, 65535] { R10220 += 1, R10221 += 1 };
  s0 -> s2 [0, 65535] { R10221 += 1, R10100 += 1, R10101 += 1 };
  s0 -> s3 [65, 65] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s0 -> s4 [65, 65] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s0 -> s1 [66, 65535] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 64] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 65535] { R10221 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s1 -> s4 [65, 65] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [66, 65535] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [0, 64] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s2 -> s2 [0, 65535] { R10221 += 1, R10100 += 1, R10101 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s2 -> s4 [65, 65] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [66, 65535] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s3 -> s3 [0, 65535] { R10221 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10221 += 1 };
  s4 -> s4 [0, 65535] { R10221 += 1, R10101 += 1, R692 += 1, R693 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10221 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s0 -> s0 [0, 65535] { R10222 += 1, R10223 += 1 };
  s0 -> s2 [0, 65535] { R10223 += 1, R10102 += 1, R10103 += 1 };
  s0 -> s3 [65, 65] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s0 -> s4 [65, 65] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s0 -> s1 [66, 65535] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 64] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10223 += 1 };
  s1 -> s3 [65, 65] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s1 -> s4 [65, 65] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [66, 65535] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [0, 64] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10223 += 1, R10102 += 1, R10103 += 1 };
  s2 -> s3 [65, 65] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s2 -> s4 [65, 65] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [66, 65535] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s3 -> s3 [0, 65535] { R10223 += 1, R10103 += 1, R696 += 1, R697 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10223 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10223 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10223 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s2 [0, 64] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s3 [0, 65535] { R10225 += 1, R10104 += 1, R10105 += 1 };
  s0 -> s0 [0, 65535] { R10224 += 1, R10225 += 1 };
  s0 -> s4 [65, 65] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s5 [65, 65] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s6 [65, 65] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s7 [65, 65] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s1 [66, 65535] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s2 [66, 65535] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s1 [0, 64] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s1 -> s2 [0, 64] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s4 [65, 65] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s5 [65, 65] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s1 -> s6 [65, 65] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s7 [65, 65] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s1 -> s1 [66, 65535] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s1 -> s2 [66, 65535] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s11 [0, 64] { R10225 += 1, R10105 += 1 };
  s2 -> s2 [0, 64] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s4 [65, 65] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s6 [65, 65] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s12 [65, 65] { R10225 += 1, R10105 += 1 };
  s2 -> s8 [65, 65] { R10225 += 1, R10105 += 1 };
  s2 -> s11 [66, 65535] { R10225 += 1, R10105 += 1 };
  s2 -> s2 [66, 65535] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s1 [0, 64] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s2 [0, 64] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s3 [0, 65535] { R10225 += 1, R10104 += 1, R10105 += 1 };
  s3 -> s4 [65, 65] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s5 [65, 65] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s6 [65, 65] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s7 [65, 65] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s1 [66, 65535] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s2 [66, 65535] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s4 -> s4 [0, 65535] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s4 -> s8 [0, 65535] { R10225 += 1, R10105 += 1 };
  s5 -> s4 [0, 65535] { R10225 += 1, R10105 += 1, R7351 += 1, R7352 += 1 };
  s5 -> s5 [0, 65535] { R10225 += 1, R10105 += 1, R7350 += 1, R7351 += 1 };
  s8 -> s9 [0, 65535] { R10225 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R10225 += 1, R10105 += 1 };
  s9 -> s9 [0, 65535] { R10225 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R10225 += 1, R10105 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10225 += 1 };
  s11 -> s12 [65, 65] { R10225 += 1, R10105 += 1 };
  s11 -> s8 [65, 65] { R10225 += 1, R10105 += 1 };
  s11 -> s11 [66, 65535] { R10225 += 1, R10105 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R10225 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R10227 += 1, R10107 += 1 };
  s0 -> s0 [0, 65535] { R10226 += 1, R10227 += 1 };
  s0 -> s2 [0, 65535] { R10227 += 1, R10106 += 1, R10107 += 1 };
  s0 -> s3 [65, 65] { R10227 += 1, R10107 += 1 };
  s0 -> s4 [65, 65] { R10227 += 1, R10107 += 1 };
  s0 -> s1 [66, 65535] { R10227 += 1, R10107 += 1 };
  s1 -> s1 [0, 64] { R10227 += 1, R10107 += 1 };
  s1 -> s1 [0, 65535] { R10227 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10227 += 1, R10107 += 1 };
  s1 -> s4 [65, 65] { R10227 += 1, R10107 += 1 };
  s1 -> s1 [66, 65535] { R10227 += 1, R10107 += 1 };
  s2 -> s1 [0, 64] { R10227 += 1, R10107 += 1 };
  s2 -> s2 [0, 65535] { R10227 += 1, R10106 += 1, R10107 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10227 += 1, R10107 += 1 };
  s2 -> s4 [65, 65] { R10227 += 1, R10107 += 1 };
  s2 -> s1 [66, 65535] { R10227 += 1, R10107 += 1 };
  s3 -> s3 [0, 65535] { R10227 += 1, R10107 += 1 };
  s3 -> s6 [0, 65535] { R10227 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10227 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10227 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s0 -> s2 [0, 64] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s0 -> s0 [0, 65535] { R10228 += 1, R10229 += 1 };
  s0 -> s3 [0, 65535] { R10229 += 1, R10108 += 1, R10109 += 1 };
  s0 -> s4 [65, 65] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s0 -> s5 [65, 65] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s0 -> s6 [65, 65] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s0 -> s7 [65, 65] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s0 -> s1 [66, 65535] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s0 -> s2 [66, 65535] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s1 -> s1 [0, 64] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s1 -> s2 [0, 64] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s1 -> s4 [65, 65] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s1 -> s5 [65, 65] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s1 -> s6 [65, 65] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s1 -> s7 [65, 65] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s1 -> s1 [66, 65535] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s1 -> s2 [66, 65535] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s2 -> s2 [0, 64] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s2 -> s11 [0, 64] { R10229 += 1, R10109 += 1 };
  s2 -> s4 [65, 65] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s2 -> s7 [65, 65] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s2 -> s12 [65, 65] { R10229 += 1, R10109 += 1 };
  s2 -> s8 [65, 65] { R10229 += 1, R10109 += 1 };
  s2 -> s2 [66, 65535] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s2 -> s11 [66, 65535] { R10229 += 1, R10109 += 1 };
  s3 -> s1 [0, 64] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s3 -> s2 [0, 64] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s3 -> s3 [0, 65535] { R10229 += 1, R10108 += 1, R10109 += 1 };
  s3 -> s4 [65, 65] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s3 -> s5 [65, 65] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s3 -> s6 [65, 65] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s3 -> s7 [65, 65] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s3 -> s1 [66, 65535] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s3 -> s2 [66, 65535] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s6 -> s6 [0, 65535] { R10229 += 1, R10109 += 1, R9568 += 1, R9569 += 1 };
  s6 -> s7 [0, 65535] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s7 -> s7 [0, 65535] { R10229 += 1, R10109 += 1, R9569 += 1, R9570 += 1 };
  s7 -> s8 [0, 65535] { R10229 += 1, R10109 += 1 };
  s8 -> s9 [0, 65535] { R10229 += 1 };
  s8 -> s8 [0, 65535] { R10229 += 1, R10109 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10229 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R10229 += 1, R10109 += 1 };
  s11 -> s11 [0, 65535] { R10229 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R10229 += 1, R10109 += 1 };
  s11 -> s8 [65, 65] { R10229 += 1, R10109 += 1 };
  s11 -> s11 [66, 65535] { R10229 += 1, R10109 += 1 };
  s12 -> s12 [0, 65535] { R10229 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R10231 += 1, R10111 += 1 };
  s0 -> s0 [0, 65535] { R10230 += 1, R10231 += 1 };
  s0 -> s2 [0, 65535] { R10231 += 1, R10110 += 1, R10111 += 1 };
  s0 -> s3 [65, 65] { R10231 += 1, R10111 += 1 };
  s0 -> s4 [65, 65] { R10231 += 1, R10111 += 1 };
  s0 -> s1 [66, 65535] { R10231 += 1, R10111 += 1 };
  s1 -> s1 [0, 64] { R10231 += 1, R10111 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10231 += 1 };
  s1 -> s3 [65, 65] { R10231 += 1, R10111 += 1 };
  s1 -> s4 [65, 65] { R10231 += 1, R10111 += 1 };
  s1 -> s1 [66, 65535] { R10231 += 1, R10111 += 1 };
  s2 -> s1 [0, 64] { R10231 += 1, R10111 += 1 };
  s2 -> s2 [0, 65535] { R10231 += 1, R10110 += 1, R10111 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10231 += 1, R10111 += 1 };
  s2 -> s4 [65, 65] { R10231 += 1, R10111 += 1 };
  s2 -> s1 [66, 65535] { R10231 += 1, R10111 += 1 };
  s3 -> s3 [0, 65535] { R10231 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10231 += 1, R10111 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10231 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10231 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s2 [0, 64] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s0 -> s0 [0, 65535] { R10232 += 1, R10233 += 1 };
  s0 -> s3 [0, 65535] { R10233 += 1, R10112 += 1, R10113 += 1 };
  s0 -> s4 [65, 65] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s5 [65, 65] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s0 -> s6 [65, 65] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s7 [65, 65] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s0 -> s1 [66, 79] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s2 [66, 65535] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s0 -> s8 [80, 80] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s1 [81, 65535] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s1 -> s1 [0, 64] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s1 -> s4 [65, 65] { R10233 += 1, R10113 += 1 };
  s1 -> s6 [65, 65] { R10233 += 1, R10113 += 1 };
  s1 -> s1 [66, 79] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s1 -> s1 [66, 65535] { R10233 += 1, R10113 += 1 };
  s1 -> s8 [80, 80] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s1 -> s1 [81, 65535] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s1 [0, 64] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s2 [0, 64] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s2 -> s4 [65, 65] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s5 [65, 65] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s2 -> s6 [65, 65] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s7 [65, 65] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s2 -> s1 [66, 79] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s2 [66, 65535] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s2 -> s8 [80, 80] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s1 [81, 65535] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s1 [0, 64] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s2 [0, 64] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s3 -> s3 [0, 65535] { R10233 += 1, R10112 += 1, R10113 += 1 };
  s3 -> s4 [65, 65] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s5 [65, 65] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s3 -> s6 [65, 65] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s7 [65, 65] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s3 -> s1 [66, 79] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s2 [66, 65535] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s3 -> s8 [80, 80] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s1 [81, 65535] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s4 -> s4 [0, 79] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s4 -> s4 [0, 65535] { R10233 += 1, R10113 += 1 };
  s4 -> s10 [80, 80] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s4 -> s4 [81, 65535] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s5 -> s4 [0, 79] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s5 -> s5 [0, 65535] { R10233 += 1, R10113 += 1, R10014 += 1, R10015 += 1 };
  s5 -> s10 [80, 80] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s5 -> s4 [81, 65535] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s8 -> s8 [0, 64] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10233 += 1 };
  s8 -> s10 [65, 65] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s8 -> s11 [65, 65] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s8 -> s8 [66, 65535] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10233 += 1, R10113 += 1, R10015 += 1, R10016 += 1 };
  s10 -> s12 [0, 65535] { R10233 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10233 += 1 };
  s12 -> s12 [0, 65535] { R10233 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P105
automaton P105_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P39
automaton P39_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R6 = R10053 && R7 = R10233 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R82 = 0 && R83 = R10053 && R84 = 0 && R85 = R10053 && R86 = 0 && R87 = R10053 && R88 = 0 && R89 = R10233 && R90 = 0 && R91 = R10233 && R92 = 0 && R93 = R10233 && R115 + R114 = 0 && R10020 = 0 && R10021 = R10053 && R10022 = 0 && R10023 = R10053 && R10024 = 0 && R10025 = R10053 && R10026 = 0 && R10027 = R10053 && R10028 = 0 && R10029 = R10053 && R10030 = 0 && R10031 = R10053 && R10032 = 0 && R10033 = R10053 && R10034 = 0 && R10035 = R10053 && R10036 = 0 && R10037 = R10053 && R10038 = 0 && R10039 = R10053 && R10040 = 0 && R10041 = R10053 && R10042 = 0 && R10043 = R10053 && R10044 = 0 && R10045 = R10053 && R10046 = 0 && R10047 = R10053 && R10048 = 0 && R10049 = R10053 && R10050 = 0 && R10051 = R10053 && R10052 = 0 && R10054 = 0 && R10055 = R10233 && R10056 = 0 && R10057 = R10233 && R10058 = 0 && R10059 = R10233 && R10060 = 0 && R10061 = R10233 && R10062 = 0 && R10063 = R10233 && R10064 = 0 && R10065 = R10233 && R10066 = 0 && R10067 = R10233 && R10068 = 0 && R10069 = R10233 && R10070 = 0 && R10071 = R10233 && R10072 = 0 && R10073 = R10233 && R10074 = 0 && R10075 = R10233 && R10076 = 0 && R10077 = R10233 && R10078 = 0 && R10079 = R10233 && R10080 = 0 && R10081 = R10233 && R10084 = 0 && R10085 = 0 && R10104 = 0 && R10105 = 0 && R10108 = 0 && R10109 = 0 && R10112 = 0 && R10113 = 0 && R10142 = 10 && R10143 = R10233 && R10144 = 10 && R10145 = R10233 && R10146 = 10 && R10147 = R10233 && R10148 = 10 && R10149 = R10233 && R10150 = 10 && R10151 = R10233 && R10152 = 10 && R10153 = R10233 && R10154 = 10 && R10155 = R10233 && R10156 = 10 && R10157 = R10233 && R10158 = 10 && R10159 = R10233 && R10160 = 10 && R10161 = R10233 && R10162 = 10 && R10163 = R10233 && R10164 = 10 && R10165 = R10233 && R10166 = 10 && R10167 = R10233 && R10168 = 10 && R10169 = R10233 && R10170 = 10 && R10171 = R10233 && R10172 = 10 && R10173 = R10233 && R10174 = 10 && R10175 = R10233 && R10176 = 10 && R10177 = R10233 && R10178 = 10 && R10179 = R10233 && R10180 = 10 && R10181 = R10233 && R10182 = 10 && R10183 = R10233 && R10184 = 10 && R10185 = R10233 && R10186 = 10 && R10187 = R10233 && R10188 = 10 && R10189 = R10233 && R10190 = 10 && R10191 = R10233 && R10192 = 10 && R10193 = R10233 && R10194 = 10 && R10195 = R10233 && R10196 = 10 && R10197 = R10233 && R10198 = 10 && R10199 = R10233 && R10200 = 10 && R10201 = R10233 && R10202 = 10 && R10203 = R10233 && R10204 = 10 && R10205 = R10233 && R10206 = 10 && R10207 = R10233 && R10208 = 10 && R10209 = R10233 && R10210 = 10 && R10211 = R10233 && R10212 = 10 && R10213 = R10233 && R10214 = 10 && R10215 = R10233 && R10216 = 10 && R10217 = R10233 && R10218 = 10 && R10219 = R10233 && R10220 = 10 && R10221 = R10233 && R10222 = 10 && R10223 = R10233 && R10224 = 10 && R10225 = R10233 && R10226 = 10 && R10227 = R10233 && R10228 = 10 && R10229 = R10233 && R10230 = 10 && R10231 = R10233 && R10232 = 10 && R57 + R56 != 0 && R59 + R58 != 0 && R141 + R138 + R159 + R156 != 0 && R701 + R698 + R10019 + R10016 != 0 && R21 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && R31 < 1 && R117 + R116 < 1 && R119 + R118 < 1 && -1*R667 + -1*R666 < 1 && R669 + R668 < 1 && R671 + R670 < 1 && 0 < R10053 && 9 < R10233 && (R667 + R666 != 0 || R677 + R674 = 0 || (R675 + R672 = 0 && R676 + R673 = 0)) && (R667 + R666 != 0 || R677 + R674 = 0 || (R680 + R678 = 0 && R681 + R679 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R684 + R682 = 0 && R685 + R683 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R689 + R686 = 0 && R690 + R687 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R694 + R692 = 0 && R695 + R693 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R699 + R696 = 0 && R700 + R697 = 0)) && (R675 + R672 != 0 || R667 + R666 + -1*R676 + -1*R673 = 0 || R667 + R666 < 1) && (R680 + R678 != 0 || R667 + R666 + -1*R681 + -1*R679 = 0 || R667 + R666 < 1) && (R684 + R682 != 0 || R667 + R666 + -1*R685 + -1*R683 = 0 || R667 + R666 < 1) && (R689 + R686 != 0 || R667 + R666 + -1*R690 + -1*R687 = 0 || R667 + R666 < 1) && (R694 + R692 != 0 || R667 + R666 + -1*R695 + -1*R693 = 0 || R667 + R666 < 1) && (R699 + R696 != 0 || R667 + R666 + -1*R700 + -1*R697 = 0 || R667 + R666 < 1) && (R44 = 0 || (R106 = 0 && R107 = 0)) && (R44 = 0 || (R108 = 0 && R109 = 0)) && (R45 = 0 || (R10082 = 0 && R10083 = 0)) && (R45 = 0 || (R10086 = 0 && R10087 = 0)) && (R45 = 0 || (R10088 = 0 && R10089 = 0)) && (R45 = 0 || (R10090 = 0 && R10091 = 0)) && (R45 = 0 || (R10092 = 0 && R10093 = 0)) && (R45 = 0 || (R10094 = 0 && R10095 = 0)) && (R45 = 0 || (R10096 = 0 && R10097 = 0)) && (R45 = 0 || (R10098 = 0 && R10099 = 0)) && (R45 = 0 || (R10100 = 0 && R10101 = 0)) && (R45 = 0 || (R10102 = 0 && R10103 = 0)) && (R45 = 0 || (R10106 = 0 && R10107 = 0)) && (R45 = 0 || (R10110 = 0 && R10111 = 0)) && (R48 = 0 || (R10114 = 0 && R10115 = 0)) && (R48 = 0 || (R10116 = 0 && R10117 = 0)) && (R48 = 0 || (R10118 = 0 && R10119 = 0)) && (R48 = 0 || (R10120 = 0 && R10121 = 0)) && (R48 = 0 || (R10122 = 0 && R10123 = 0)) && (R48 = 0 || (R10124 = 0 && R10125 = 0)) && (R48 = 0 || (R10126 = 0 && R10127 = 0)) && (R48 = 0 || (R10128 = 0 && R10129 = 0)) && (R48 = 0 || (R10130 = 0 && R10131 = 0)) && (R48 = 0 || (R10132 = 0 && R10133 = 0)) && (R48 = 0 || (R10134 = 0 && R10135 = 0)) && (R48 = 0 || (R10136 = 0 && R10137 = 0)) && (R48 = 0 || (R10138 = 0 && R10139 = 0)) && (R48 = 0 || (R10140 = 0 && R10141 = 0)) && (R49 = 0 || (R110 = 0 && R111 = 0)) && (R49 = 0 || (R112 = 0 && R113 = 0)) && (R125 + R122 = 0 || (R123 + R120 = 0 && R124 + R121 = 0)) && (R131 + R128 = 0 || (R129 + R126 = 0 && R130 + R127 = 0)) && (R131 + R128 = 0 || (R134 + R132 = 0 && R135 + R133 = 0)) && (R131 + R128 = 0 || (R139 + R136 = 0 && R140 + R137 = 0)) && (R147 + R144 = 0 || (R145 + R142 = 0 && R146 + R143 = 0)) && (R153 + R150 = 0 || (R151 + R148 = 0 && R152 + R149 = 0)) && (R153 + R150 = 0 || (R157 + R154 = 0 && R158 + R155 = 0)) && (R675 + R672 = 0 || R667 + R666 < 1) && (R680 + R678 = 0 || R667 + R666 < 1) && (R684 + R682 = 0 || R667 + R666 < 1) && (R689 + R686 = 0 || R667 + R666 < 1) && (R694 + R692 = 0 || R667 + R666 < 1) && (R699 + R696 = 0 || R667 + R666 < 1) && (R7355 + R7352 = 0 || (R7353 + R7350 = 0 && R7354 + R7351 = 0)) && (R9573 + R9570 = 0 || (R9571 + R9568 = 0 && R9572 + R9569 = 0)) && (R9573 + R9570 = 0 || (R10017 + R10014 = 0 && R10018 + R10015 = 0));
// End of Parikh automata intersection problem
