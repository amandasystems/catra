// Parikh automata intersection problem, generated by OSTRICH+
counter int R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R21, R22, R25, R28, R31, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R56, R57, R58, R59, R6, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R7350, R7351, R7352, R7353, R7354, R7355, R7356, R7357, R7358, R7359, R7360, R7361, R8, R8022, R8023, R8024, R8025, R8026, R8027, R8028, R8029, R8030, R8031, R8032, R8033, R8034, R8035, R8036, R8037, R8038, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8047, R8048, R8049, R8050, R8051, R8052, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R8069, R8070, R8071, R8072, R8073, R8074, R8075, R8076, R8077, R8078, R8079, R8080, R8081, R8082, R8083, R8084, R8085, R8086, R8087, R8088, R8089, R8090, R8091, R8092, R8093, R8094, R8095, R8096, R8097, R8098, R8099, R8100, R8101, R8102, R8103, R8104, R8105, R8106, R8107, R8108, R8109, R8110, R8111, R8112, R8113, R8114, R8115, R8116, R8117, R8118, R8119, R8120, R8121, R8122, R8123, R8124, R8125, R8126, R8127, R8128, R8129, R8130, R8131, R8132, R8133, R8134, R8135, R8136, R8137, R8138, R8139, R8140, R8141, R8142, R8143, R8144, R8145, R8146, R8147, R8148, R8149, R8150, R8151, R8152, R8153, R8154, R8155, R8156, R8157, R8158, R8159, R8160, R8161, R8162, R8163, R8164, R8165, R8166, R8167, R8168, R8169, R8170, R8171, R8172, R8173, R8174, R8175, R8176, R8177, R8178, R8179, R8180, R8181, R8182, R8183, R8184, R8185, R8186, R8187, R8188, R8189, R8190, R8191, R8192, R8193, R8194, R8195, R8196, R8197, R8198, R8199, R82, R8200, R8201, R8202, R8203, R8204, R8205, R8206, R8207, R8208, R8209, R8210, R8211, R8212, R8213, R8214, R8215, R8216, R8217, R8218, R8219, R8220, R8221, R8222, R8223, R8224, R8225, R8226, R8227, R8228, R8229, R8230, R8231, R8232, R8233, R8234, R8235, R8236, R8237, R8238, R8239, R8240, R8241, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P93
automaton P93_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R31 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R91 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [108, 108] { R91 += 1 };
  s0 -> s1 [109, 65535] { R91 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R91 += 1 };
  s2 -> s1 [0, 110] { R91 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R91 += 1 };
  s2 -> s1 [112, 65535] { R91 += 1 };
  s3 -> s1 [0, 98] { R91 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R91 += 1 };
  s3 -> s1 [100, 65535] { R91 += 1 };
  s4 -> s1 [0, 96] { R91 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R91 += 1 };
  s4 -> s1 [98, 65535] { R91 += 1 };
  s5 -> s1 [0, 107] { R91 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R91 += 1 };
  s5 -> s1 [109, 65535] { R91 += 1 };
  s6 -> s1 [0, 103] { R91 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R91 += 1 };
  s6 -> s1 [105, 65535] { R91 += 1 };
  s7 -> s1 [0, 110] { R91 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R91 += 1 };
  s7 -> s1 [112, 65535] { R91 += 1 };
  s8 -> s1 [0, 114] { R91 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R91 += 1 };
  s8 -> s1 [116, 65535] { R91 += 1 };
  s9 -> s1 [0, 115] { R91 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R91 += 1 };
  s9 -> s1 [117, 65535] { R91 += 1 };
  s10 -> s1 [0, 65535] { R91 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R113 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R8063 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R8062 += 1, R8063 += 1 };
  s1 -> s1 [0, 65535] { R8063 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R8064 += 1, R8065 += 1 };
  s0 -> s1 [0, 65535] { R8065 += 1, R115 += 1 };
  s1 -> s1 [0, 65535] { R8065 += 1, R115 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 74] { R8067 += 1 };
  s0 -> s0 [0, 65535] { R8066 += 1, R8067 += 1 };
  s0 -> s2 [0, 65535] { R8067 += 1, R117 += 1 };
  s0 -> s1 [76, 65535] { R8067 += 1 };
  s1 -> s1 [0, 74] { R8067 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [76, 65535] { R8067 += 1 };
  s2 -> s1 [0, 74] { R8067 += 1 };
  s2 -> s2 [0, 65535] { R8067 += 1, R117 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R8067 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 76] { R8069 += 1 };
  s0 -> s2 [0, 65535] { R8069 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R8068 += 1, R8069 += 1 };
  s0 -> s1 [78, 65535] { R8069 += 1 };
  s1 -> s1 [0, 76] { R8069 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R8069 += 1 };
  s2 -> s1 [0, 76] { R8069 += 1 };
  s2 -> s2 [0, 65535] { R8069 += 1, R119 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R8069 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R8070 += 1, R8071 += 1 };
  s0 -> s1 [0, 65535] { R8071 += 1, R124 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R8071 += 1, R123 += 1, R124 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8071 += 1, R124 += 1, R125 += 1 };
  s1 -> s4 [0, 65535] { R8071 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8071 += 1, R124 += 1, R125 += 1 };
  s2 -> s2 [0, 65535] { R8071 += 1, R123 += 1, R124 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8071 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8073 += 1 };
  s0 -> s0 [0, 65535] { R8072 += 1, R8073 += 1 };
  s1 -> s1 [0, 65535] { R8073 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R8074 += 1, R8075 += 1 };
  s0 -> s1 [0, 65535] { R8075 += 1, R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R8075 += 1, R130 += 1, R131 += 1 };
  s1 -> s1 [0, 65535] { R8075 += 1, R129 += 1, R130 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8075 += 1, R130 += 1, R131 += 1 };
  s2 -> s3 [0, 65535] { R8075 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8075 += 1, R130 += 1, R131 += 1 };
  s3 -> s3 [0, 65535] { R8075 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R8077 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R8077 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R8076 += 1, R8077 += 1 };
  s0 -> s3 [108, 108] { R8077 += 1, R135 += 1 };
  s0 -> s1 [109, 65535] { R8077 += 1, R135 += 1 };
  s1 -> s13 [0, 65535] { R8077 += 1 };
  s1 -> s1 [0, 65535] { R8077 += 1, R135 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R8077 += 1, R135 += 1 };
  s2 -> s2 [0, 65535] { R8077 += 1, R134 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R8077 += 1, R135 += 1 };
  s2 -> s1 [109, 65535] { R8077 += 1, R135 += 1 };
  s3 -> s1 [0, 110] { R8077 += 1, R135 += 1 };
  s3 -> s3 [0, 65535] { R8077 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R8077 += 1, R135 += 1 };
  s3 -> s1 [112, 65535] { R8077 += 1, R135 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R8077 += 1, R135 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8077 += 1 };
  s5 -> s6 [99, 99] { R8077 += 1, R135 += 1 };
  s5 -> s1 [100, 65535] { R8077 += 1, R135 += 1 };
  s6 -> s1 [0, 96] { R8077 += 1, R135 += 1 };
  s6 -> s6 [0, 65535] { R8077 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R8077 += 1, R135 += 1 };
  s6 -> s1 [98, 65535] { R8077 += 1, R135 += 1 };
  s7 -> s1 [0, 107] { R8077 += 1, R135 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R8077 += 1 };
  s7 -> s8 [108, 108] { R8077 += 1, R135 += 1 };
  s7 -> s1 [109, 65535] { R8077 += 1, R135 += 1 };
  s8 -> s1 [0, 103] { R8077 += 1, R135 += 1 };
  s8 -> s8 [0, 65535] { R8077 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R8077 += 1, R135 += 1 };
  s8 -> s1 [105, 65535] { R8077 += 1, R135 += 1 };
  s9 -> s1 [0, 110] { R8077 += 1, R135 += 1 };
  s9 -> s9 [0, 65535] { R8077 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R8077 += 1, R135 += 1 };
  s9 -> s1 [112, 65535] { R8077 += 1, R135 += 1 };
  s10 -> s1 [0, 114] { R8077 += 1, R135 += 1 };
  s10 -> s10 [0, 65535] { R8077 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R8077 += 1, R135 += 1 };
  s10 -> s1 [116, 65535] { R8077 += 1, R135 += 1 };
  s11 -> s1 [0, 115] { R8077 += 1, R135 += 1 };
  s11 -> s11 [0, 65535] { R8077 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R8077 += 1, R135 += 1 };
  s11 -> s1 [117, 65535] { R8077 += 1, R135 += 1 };
  s12 -> s1 [0, 65535] { R8077 += 1, R135 += 1 };
  s13 -> s13 [0, 65535] { R8077 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8079 += 1, R140 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R8078 += 1, R8079 += 1 };
  s0 -> s2 [0, 65535] { R8079 += 1, R139 += 1, R140 += 1 };
  s1 -> s1 [0, 65535] { R8079 += 1, R140 += 1, R141 += 1 };
  s1 -> s4 [0, 65535] { R8079 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8079 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8079 += 1, R139 += 1, R140 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8079 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R8081 += 1, R145 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R8080 += 1, R8081 += 1 };
  s0 -> s2 [0, 65535] { R8081 += 1, R146 += 1, R147 += 1 };
  s1 -> s1 [0, 65535] { R8081 += 1, R145 += 1, R146 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8081 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8081 += 1 };
  s2 -> s2 [0, 65535] { R8081 += 1, R146 += 1, R147 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8081 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R8082 += 1, R8083 += 1 };
  s0 -> s1 [0, 65535] { R8083 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8083 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8084 += 1, R8085 += 1 };
  s0 -> s1 [0, 65535] { R8085 += 1, R152 += 1, R153 += 1 };
  s0 -> s2 [0, 65535] { R8085 += 1, R151 += 1, R152 += 1 };
  s1 -> s1 [0, 65535] { R8085 += 1, R152 += 1, R153 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8085 += 1 };
  s2 -> s1 [0, 65535] { R8085 += 1, R152 += 1, R153 += 1 };
  s2 -> s2 [0, 65535] { R8085 += 1, R151 += 1, R152 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8085 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R8086 += 1, R8087 += 1 };
  s0 -> s1 [0, 65535] { R8087 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8087 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 76] { R8089 += 1, R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R8089 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R8088 += 1, R8089 += 1 };
  s0 -> s3 [77, 77] { R8089 += 1, R158 += 1, R159 += 1 };
  s0 -> s4 [77, 77] { R8089 += 1, R158 += 1, R159 += 1 };
  s0 -> s1 [78, 65535] { R8089 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 76] { R8089 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R8089 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [77, 77] { R8089 += 1, R158 += 1, R159 += 1 };
  s1 -> s4 [77, 77] { R8089 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [78, 65535] { R8089 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [0, 76] { R8089 += 1, R158 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R8089 += 1, R157 += 1, R158 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R8089 += 1, R158 += 1, R159 += 1 };
  s2 -> s4 [77, 77] { R8089 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [78, 65535] { R8089 += 1, R158 += 1, R159 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8089 += 1, R158 += 1, R159 += 1 };
  s3 -> s6 [0, 65535] { R8089 += 1 };
  s4 -> s4 [0, 65535] { R8089 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8089 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R8122 += 1, R8123 += 1 };
  s0 -> s1 [0, 65535] { R8123 += 1, R48 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8123 += 1, R48 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R8125 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R8124 += 1, R8125 += 1 };
  s0 -> s2 [65, 65] { R8125 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R8125 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R8125 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R8125 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8125 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R8125 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R8125 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R8125 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R8127 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R8126 += 1, R8127 += 1 };
  s0 -> s2 [65, 65] { R8127 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R8127 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R8127 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R8127 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8127 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R8127 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R8127 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8127 += 1, R116 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R8129 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R8128 += 1, R8129 += 1 };
  s0 -> s2 [65, 65] { R8129 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R8129 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R8129 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R8129 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8129 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R8129 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R8129 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R8129 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R8131 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R8130 += 1, R8131 += 1 };
  s0 -> s2 [65, 65] { R8131 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [65, 65] { R8131 += 1, R120 += 1, R121 += 1 };
  s0 -> s1 [66, 65535] { R8131 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 64] { R8131 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8131 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [65, 65] { R8131 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [66, 65535] { R8131 += 1, R120 += 1, R121 += 1 };
  s2 -> s2 [0, 65535] { R8131 += 1, R120 += 1, R121 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R8133 += 1 };
  s0 -> s0 [0, 65535] { R8132 += 1, R8133 += 1 };
  s0 -> s2 [65, 65] { R8133 += 1 };
  s0 -> s3 [65, 65] { R8133 += 1 };
  s0 -> s1 [66, 65535] { R8133 += 1 };
  s1 -> s1 [0, 64] { R8133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8133 += 1 };
  s1 -> s3 [65, 65] { R8133 += 1 };
  s1 -> s1 [66, 65535] { R8133 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8133 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R8135 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R8134 += 1, R8135 += 1 };
  s0 -> s2 [65, 65] { R8135 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [65, 65] { R8135 += 1, R126 += 1, R127 += 1 };
  s0 -> s1 [66, 65535] { R8135 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 64] { R8135 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8135 += 1, R126 += 1, R127 += 1 };
  s1 -> s3 [65, 65] { R8135 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [66, 65535] { R8135 += 1, R126 += 1, R127 += 1 };
  s2 -> s2 [0, 65535] { R8135 += 1, R126 += 1, R127 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R8137 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R8136 += 1, R8137 += 1 };
  s0 -> s2 [65, 65] { R8137 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [65, 65] { R8137 += 1, R132 += 1, R133 += 1 };
  s0 -> s1 [66, 65535] { R8137 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 64] { R8137 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8137 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [65, 65] { R8137 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [66, 65535] { R8137 += 1, R132 += 1, R133 += 1 };
  s2 -> s2 [0, 65535] { R8137 += 1, R132 += 1, R133 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R8139 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R8138 += 1, R8139 += 1 };
  s0 -> s2 [65, 65] { R8139 += 1, R136 += 1, R137 += 1 };
  s0 -> s3 [65, 65] { R8139 += 1, R136 += 1, R137 += 1 };
  s0 -> s1 [66, 65535] { R8139 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 64] { R8139 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8139 += 1, R136 += 1, R137 += 1 };
  s1 -> s3 [65, 65] { R8139 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [66, 65535] { R8139 += 1, R136 += 1, R137 += 1 };
  s2 -> s2 [0, 65535] { R8139 += 1, R136 += 1, R137 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R8141 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R8140 += 1, R8141 += 1 };
  s0 -> s2 [65, 65] { R8141 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R8141 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R8141 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R8141 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8141 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R8141 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R8141 += 1, R142 += 1, R143 += 1 };
  s2 -> s2 [0, 65535] { R8141 += 1, R142 += 1, R143 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R8143 += 1 };
  s0 -> s0 [0, 65535] { R8142 += 1, R8143 += 1 };
  s0 -> s2 [65, 65] { R8143 += 1 };
  s0 -> s3 [65, 65] { R8143 += 1 };
  s0 -> s1 [66, 65535] { R8143 += 1 };
  s1 -> s1 [0, 64] { R8143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8143 += 1 };
  s1 -> s3 [65, 65] { R8143 += 1 };
  s1 -> s1 [66, 65535] { R8143 += 1 };
  s2 -> s2 [0, 65535] { R8143 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R8145 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R8144 += 1, R8145 += 1 };
  s0 -> s2 [65, 65] { R8145 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [65, 65] { R8145 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [66, 65535] { R8145 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 64] { R8145 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8145 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [65, 65] { R8145 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [66, 65535] { R8145 += 1, R148 += 1, R149 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8145 += 1, R148 += 1, R149 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R8147 += 1 };
  s0 -> s0 [0, 65535] { R8146 += 1, R8147 += 1 };
  s0 -> s2 [65, 65] { R8147 += 1 };
  s0 -> s3 [65, 65] { R8147 += 1 };
  s0 -> s1 [66, 65535] { R8147 += 1 };
  s1 -> s1 [0, 64] { R8147 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8147 += 1 };
  s1 -> s3 [65, 65] { R8147 += 1 };
  s1 -> s1 [66, 65535] { R8147 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8147 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R8149 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R8148 += 1, R8149 += 1 };
  s0 -> s2 [65, 65] { R8149 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [65, 65] { R8149 += 1, R154 += 1, R155 += 1 };
  s0 -> s1 [66, 65535] { R8149 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 64] { R8149 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8149 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [65, 65] { R8149 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [66, 65535] { R8149 += 1, R154 += 1, R155 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8149 += 1, R154 += 1, R155 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 43] { R8151 += 1 };
  s0 -> s0 [0, 65535] { R8150 += 1, R8151 += 1 };
  s0 -> s1 [45, 45] { R8151 += 1 };
  s0 -> s2 [46, 46] { R8151 += 1 };
  s0 -> s1 [48, 62] { R8151 += 1 };
  s0 -> s3 [65, 65] { R8151 += 1 };
  s0 -> s1 [66, 65535] { R8151 += 1 };
  s1 -> s1 [0, 43] { R8151 += 1 };
  s1 -> s1 [45, 45] { R8151 += 1 };
  s1 -> s2 [46, 46] { R8151 += 1 };
  s1 -> s1 [48, 62] { R8151 += 1 };
  s1 -> s3 [65, 65] { R8151 += 1 };
  s1 -> s1 [66, 65535] { R8151 += 1 };
  s2 -> s1 [0, 43] { R8151 += 1 };
  s2 -> s1 [45, 45] { R8151 += 1 };
  s2 -> s2 [46, 46] { R8151 += 1 };
  s2 -> s1 [48, 62] { R8151 += 1 };
  s2 -> s3 [65, 65] { R8151 += 1 };
  s2 -> s1 [66, 114] { R8151 += 1 };
  s2 -> s8 [115, 115] { R8151 += 1 };
  s2 -> s1 [116, 65535] { R8151 += 1 };
  s3 -> s3 [0, 43] { R8151 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R8151 += 1 };
  s3 -> s4 [46, 46] { R8151 += 1 };
  s3 -> s3 [48, 62] { R8151 += 1 };
  s3 -> s3 [65, 65535] { R8151 += 1 };
  s4 -> s3 [0, 43] { R8151 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R8151 += 1 };
  s4 -> s4 [46, 46] { R8151 += 1 };
  s4 -> s3 [48, 62] { R8151 += 1 };
  s4 -> s3 [65, 114] { R8151 += 1 };
  s4 -> s5 [115, 115] { R8151 += 1 };
  s4 -> s3 [116, 65535] { R8151 += 1 };
  s5 -> s3 [0, 43] { R8151 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R8151 += 1 };
  s5 -> s4 [46, 46] { R8151 += 1 };
  s5 -> s3 [48, 62] { R8151 += 1 };
  s5 -> s3 [65, 110] { R8151 += 1 };
  s5 -> s6 [111, 111] { R8151 += 1 };
  s5 -> s3 [112, 65535] { R8151 += 1 };
  s6 -> s3 [0, 43] { R8151 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R8151 += 1 };
  s6 -> s4 [46, 46] { R8151 += 1 };
  s6 -> s3 [48, 62] { R8151 += 1 };
  s6 -> s3 [65, 98] { R8151 += 1 };
  s6 -> s7 [99, 99] { R8151 += 1 };
  s6 -> s3 [100, 65535] { R8151 += 1 };
  s7 -> s3 [0, 43] { R8151 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R8151 += 1 };
  s7 -> s4 [46, 46] { R8151 += 1 };
  s7 -> s3 [48, 62] { R8151 += 1 };
  s7 -> s3 [65, 106] { R8151 += 1 };
  s7 -> s3 [108, 65535] { R8151 += 1 };
  s8 -> s1 [0, 43] { R8151 += 1 };
  s8 -> s1 [45, 45] { R8151 += 1 };
  s8 -> s2 [46, 46] { R8151 += 1 };
  s8 -> s1 [48, 62] { R8151 += 1 };
  s8 -> s3 [65, 65] { R8151 += 1 };
  s8 -> s1 [66, 110] { R8151 += 1 };
  s8 -> s9 [111, 111] { R8151 += 1 };
  s8 -> s1 [112, 65535] { R8151 += 1 };
  s9 -> s1 [0, 43] { R8151 += 1 };
  s9 -> s1 [45, 45] { R8151 += 1 };
  s9 -> s2 [46, 46] { R8151 += 1 };
  s9 -> s1 [48, 62] { R8151 += 1 };
  s9 -> s3 [65, 65] { R8151 += 1 };
  s9 -> s1 [66, 98] { R8151 += 1 };
  s9 -> s10 [99, 99] { R8151 += 1 };
  s9 -> s1 [100, 65535] { R8151 += 1 };
  s10 -> s1 [0, 43] { R8151 += 1 };
  s10 -> s1 [45, 45] { R8151 += 1 };
  s10 -> s2 [46, 46] { R8151 += 1 };
  s10 -> s1 [48, 62] { R8151 += 1 };
  s10 -> s3 [65, 65] { R8151 += 1 };
  s10 -> s1 [66, 106] { R8151 += 1 };
  s10 -> s1 [108, 65535] { R8151 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R8152 += 1, R8153 += 1 };
  s0 -> s1 [0, 65535] { R8153 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R8153 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 57] { R8155 += 1 };
  s0 -> s0 [0, 65535] { R8154 += 1, R8155 += 1 };
  s0 -> s2 [0, 65535] { R8155 += 1, R21 += 1 };
  s0 -> s3 [58, 58] { R8155 += 1 };
  s0 -> s1 [59, 65535] { R8155 += 1 };
  s1 -> s1 [0, 57] { R8155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R8155 += 1 };
  s1 -> s1 [59, 65535] { R8155 += 1 };
  s2 -> s1 [0, 57] { R8155 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8155 += 1, R21 += 1 };
  s2 -> s3 [58, 58] { R8155 += 1 };
  s2 -> s1 [59, 65535] { R8155 += 1 };
  s3 -> s3 [0, 65535] { R8155 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 42] { R8157 += 1 };
  s0 -> s2 [0, 65535] { R8157 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8156 += 1, R8157 += 1 };
  s0 -> s3 [43, 43] { R8157 += 1 };
  s0 -> s1 [44, 65535] { R8157 += 1 };
  s1 -> s1 [0, 42] { R8157 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R8157 += 1 };
  s1 -> s1 [44, 65535] { R8157 += 1 };
  s2 -> s1 [0, 42] { R8157 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8157 += 1, R22 += 1 };
  s2 -> s3 [43, 43] { R8157 += 1 };
  s2 -> s1 [44, 65535] { R8157 += 1 };
  s3 -> s3 [0, 65535] { R8157 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R8159 += 1 };
  s0 -> s2 [0, 65535] { R8159 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R8158 += 1, R8159 += 1 };
  s0 -> s3 [65, 65] { R8159 += 1 };
  s0 -> s1 [66, 65535] { R8159 += 1 };
  s1 -> s1 [0, 64] { R8159 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8159 += 1 };
  s1 -> s1 [66, 65535] { R8159 += 1 };
  s2 -> s1 [0, 64] { R8159 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8159 += 1, R25 += 1 };
  s2 -> s3 [65, 65] { R8159 += 1 };
  s2 -> s1 [66, 65535] { R8159 += 1 };
  s3 -> s3 [0, 65535] { R8159 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 90] { R8161 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R8161 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R8160 += 1, R8161 += 1 };
  s0 -> s3 [91, 91] { R8161 += 1, R51 += 1 };
  s0 -> s1 [92, 65535] { R8161 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R8161 += 1, R51 += 1 };
  s1 -> s5 [0, 65535] { R8161 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R8161 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R8161 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R8161 += 1, R51 += 1 };
  s2 -> s1 [92, 65535] { R8161 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R8161 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8161 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 65535] { R8163 += 1, R53 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R8163 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8162 += 1, R8163 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8163 += 1, R53 += 1, R8 += 1 };
  s1 -> s4 [0, 65535] { R8163 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8163 += 1, R53 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R8163 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8163 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R8165 += 1, R83 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R8165 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R8164 += 1, R8165 += 1 };
  s1 -> s1 [0, 65535] { R8165 += 1, R83 += 1, R42 += 1 };
  s1 -> s4 [0, 65535] { R8165 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8165 += 1, R83 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R8165 += 1, R82 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8165 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 107] { R8167 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R8166 += 1, R8167 += 1 };
  s0 -> s2 [0, 65535] { R8167 += 1, R84 += 1, R85 += 1 };
  s0 -> s3 [108, 108] { R8167 += 1, R85 += 1 };
  s0 -> s1 [109, 65535] { R8167 += 1, R85 += 1 };
  s1 -> s13 [0, 65535] { R8167 += 1 };
  s1 -> s1 [0, 65535] { R8167 += 1, R85 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R8167 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8167 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [108, 108] { R8167 += 1, R85 += 1 };
  s2 -> s1 [109, 65535] { R8167 += 1, R85 += 1 };
  s3 -> s1 [0, 110] { R8167 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R8167 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R8167 += 1, R85 += 1 };
  s3 -> s1 [112, 65535] { R8167 += 1, R85 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R8167 += 1, R85 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8167 += 1 };
  s5 -> s6 [99, 99] { R8167 += 1, R85 += 1 };
  s5 -> s1 [100, 65535] { R8167 += 1, R85 += 1 };
  s6 -> s1 [0, 96] { R8167 += 1, R85 += 1 };
  s6 -> s6 [0, 65535] { R8167 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R8167 += 1, R85 += 1 };
  s6 -> s1 [98, 65535] { R8167 += 1, R85 += 1 };
  s7 -> s1 [0, 107] { R8167 += 1, R85 += 1 };
  s7 -> s7 [0, 65535] { R8167 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R8167 += 1, R85 += 1 };
  s7 -> s1 [109, 65535] { R8167 += 1, R85 += 1 };
  s8 -> s1 [0, 103] { R8167 += 1, R85 += 1 };
  s8 -> s8 [0, 65535] { R8167 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R8167 += 1, R85 += 1 };
  s8 -> s1 [105, 65535] { R8167 += 1, R85 += 1 };
  s9 -> s1 [0, 110] { R8167 += 1, R85 += 1 };
  s9 -> s9 [0, 65535] { R8167 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R8167 += 1, R85 += 1 };
  s9 -> s1 [112, 65535] { R8167 += 1, R85 += 1 };
  s10 -> s1 [0, 114] { R8167 += 1, R85 += 1 };
  s10 -> s10 [0, 65535] { R8167 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R8167 += 1, R85 += 1 };
  s10 -> s1 [116, 65535] { R8167 += 1, R85 += 1 };
  s11 -> s1 [0, 115] { R8167 += 1, R85 += 1 };
  s11 -> s11 [0, 65535] { R8167 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R8167 += 1, R85 += 1 };
  s11 -> s1 [117, 65535] { R8167 += 1, R85 += 1 };
  s12 -> s1 [0, 65535] { R8167 += 1, R85 += 1 };
  s13 -> s13 [0, 65535] { R8167 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R8169 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R8169 += 1, R87 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8168 += 1, R8169 += 1 };
  s1 -> s1 [0, 65535] { R8169 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [0, 65535] { R8169 += 1, R87 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8169 += 1, R87 += 1, R57 += 1 };
  s2 -> s3 [0, 65535] { R8169 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8169 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R8170 += 1, R8171 += 1 };
  s0 -> s1 [0, 65535] { R8171 += 1, R107 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R8171 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 65535] { R8171 += 1, R107 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R8171 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8171 += 1, R107 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8171 += 1, R106 += 1, R107 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8171 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R8173 += 1 };
  s0 -> s0 [0, 65535] { R8172 += 1, R8173 += 1 };
  s1 -> s1 [0, 65535] { R8173 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 42] { R8175 += 1, R109 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R8175 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R8174 += 1, R8175 += 1 };
  s0 -> s3 [43, 43] { R8175 += 1, R109 += 1, R56 += 1 };
  s0 -> s4 [43, 43] { R8175 += 1, R109 += 1, R56 += 1 };
  s0 -> s1 [44, 65535] { R8175 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [0, 42] { R8175 += 1, R109 += 1, R56 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8175 += 1 };
  s1 -> s3 [43, 43] { R8175 += 1, R109 += 1, R56 += 1 };
  s1 -> s4 [43, 43] { R8175 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [44, 65535] { R8175 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [0, 42] { R8175 += 1, R109 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R8175 += 1, R108 += 1, R109 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R8175 += 1, R109 += 1, R56 += 1 };
  s2 -> s4 [43, 43] { R8175 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [44, 65535] { R8175 += 1, R109 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R8175 += 1, R109 += 1, R56 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8175 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8175 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8175 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R8177 += 1, R8029 += 1 };
  s0 -> s2 [0, 65535] { R8177 += 1, R8028 += 1, R8029 += 1 };
  s0 -> s0 [0, 65535] { R8176 += 1, R8177 += 1 };
  s0 -> s1 [66, 65535] { R8177 += 1, R8029 += 1 };
  s1 -> s1 [0, 64] { R8177 += 1, R8029 += 1 };
  s1 -> s1 [0, 65535] { R8177 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R8177 += 1, R8029 += 1 };
  s2 -> s1 [0, 64] { R8177 += 1, R8029 += 1 };
  s2 -> s2 [0, 65535] { R8177 += 1, R8028 += 1, R8029 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R8177 += 1, R8029 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s0 [0, 65535] { R8178 += 1, R8179 += 1 };
  s0 -> s1 [0, 65535] { R8179 += 1, R8031 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R8179 += 1, R8030 += 1, R8031 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8179 += 1, R8031 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R8179 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8179 += 1, R8031 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R8179 += 1, R8030 += 1, R8031 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8179 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R8181 += 1, R8033 += 1 };
  s0 -> s0 [0, 65535] { R8180 += 1, R8181 += 1 };
  s0 -> s2 [0, 65535] { R8181 += 1, R8032 += 1, R8033 += 1 };
  s0 -> s1 [80, 65535] { R8181 += 1, R8033 += 1 };
  s1 -> s1 [0, 65] { R8181 += 1, R8033 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8181 += 1 };
  s1 -> s1 [80, 65535] { R8181 += 1, R8033 += 1 };
  s2 -> s1 [0, 65] { R8181 += 1, R8033 += 1 };
  s2 -> s2 [0, 65535] { R8181 += 1, R8032 += 1, R8033 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R8181 += 1, R8033 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R8183 += 1, R8035 += 1, R667 += 1 };
  s0 -> s2 [0, 65535] { R8183 += 1, R8034 += 1, R8035 += 1 };
  s0 -> s0 [0, 65535] { R8182 += 1, R8183 += 1 };
  s1 -> s1 [0, 65535] { R8183 += 1, R8035 += 1, R667 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8183 += 1 };
  s2 -> s1 [0, 65535] { R8183 += 1, R8035 += 1, R667 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8183 += 1, R8034 += 1, R8035 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8183 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 81] { R8185 += 1, R8037 += 1 };
  s0 -> s2 [0, 65535] { R8185 += 1, R8037 += 1, R669 += 1 };
  s0 -> s0 [0, 65535] { R8184 += 1, R8185 += 1 };
  s0 -> s3 [0, 65535] { R8185 += 1, R8036 += 1, R8037 += 1 };
  s0 -> s1 [83, 65535] { R8185 += 1, R8037 += 1 };
  s1 -> s1 [0, 81] { R8185 += 1, R8037 += 1 };
  s1 -> s1 [0, 65535] { R8185 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R8185 += 1, R8037 += 1 };
  s2 -> s1 [0, 81] { R8185 += 1, R8037 += 1 };
  s2 -> s2 [0, 65535] { R8185 += 1, R8037 += 1, R669 += 1 };
  s2 -> s5 [0, 65535] { R8185 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R8185 += 1, R8037 += 1 };
  s3 -> s1 [0, 81] { R8185 += 1, R8037 += 1 };
  s3 -> s2 [0, 65535] { R8185 += 1, R8037 += 1, R669 += 1 };
  s3 -> s3 [0, 65535] { R8185 += 1, R8036 += 1, R8037 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R8185 += 1, R8037 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8185 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 79] { R8187 += 1, R8039 += 1 };
  s0 -> s2 [0, 65535] { R8187 += 1, R8038 += 1, R8039 += 1 };
  s0 -> s3 [0, 65535] { R8187 += 1, R8039 += 1, R671 += 1 };
  s0 -> s0 [0, 65535] { R8186 += 1, R8187 += 1 };
  s0 -> s1 [81, 65535] { R8187 += 1, R8039 += 1 };
  s1 -> s1 [0, 79] { R8187 += 1, R8039 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8187 += 1 };
  s1 -> s1 [81, 65535] { R8187 += 1, R8039 += 1 };
  s2 -> s1 [0, 79] { R8187 += 1, R8039 += 1 };
  s2 -> s2 [0, 65535] { R8187 += 1, R8038 += 1, R8039 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8187 += 1, R8039 += 1, R671 += 1 };
  s2 -> s1 [81, 65535] { R8187 += 1, R8039 += 1 };
  s3 -> s1 [0, 79] { R8187 += 1, R8039 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8187 += 1, R8039 += 1, R671 += 1 };
  s3 -> s5 [0, 65535] { R8187 += 1 };
  s3 -> s1 [81, 65535] { R8187 += 1, R8039 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8187 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R8189 += 1, R8041 += 1, R675 += 1, R676 += 1 };
  s0 -> s2 [0, 65535] { R8189 += 1, R8040 += 1, R8041 += 1 };
  s0 -> s0 [0, 65535] { R8188 += 1, R8189 += 1 };
  s0 -> s3 [0, 65535] { R8189 += 1, R8041 += 1, R676 += 1, R677 += 1 };
  s1 -> s1 [0, 65535] { R8189 += 1, R8041 += 1, R675 += 1, R676 += 1 };
  s1 -> s4 [0, 65535] { R8189 += 1 };
  s1 -> s3 [0, 65535] { R8189 += 1, R8041 += 1, R676 += 1, R677 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R8189 += 1, R8041 += 1, R675 += 1, R676 += 1 };
  s2 -> s2 [0, 65535] { R8189 += 1, R8040 += 1, R8041 += 1 };
  s2 -> s3 [0, 65535] { R8189 += 1, R8041 += 1, R676 += 1, R677 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R8189 += 1 };
  s3 -> s5 [0, 65535] { R8189 += 1, R8041 += 1 };
  s3 -> s3 [0, 65535] { R8189 += 1, R8041 += 1, R676 += 1, R677 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8189 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R8189 += 1 };
  s5 -> s5 [0, 65535] { R8189 += 1, R8041 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 107] { R8191 += 1, R8043 += 1, R681 += 1 };
  s0 -> s2 [0, 65535] { R8191 += 1, R8043 += 1, R680 += 1, R681 += 1 };
  s0 -> s0 [0, 65535] { R8190 += 1, R8191 += 1 };
  s0 -> s3 [0, 65535] { R8191 += 1, R8042 += 1, R8043 += 1 };
  s0 -> s4 [108, 108] { R8191 += 1, R8043 += 1, R681 += 1 };
  s0 -> s1 [109, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s1 -> s1 [0, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s1 -> s5 [0, 65535] { R8191 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s15 [0, 65535] { R8191 += 1, R8043 += 1 };
  s2 -> s1 [0, 107] { R8191 += 1, R8043 += 1, R681 += 1 };
  s2 -> s2 [0, 65535] { R8191 += 1, R8043 += 1, R680 += 1, R681 += 1 };
  s2 -> s5 [0, 65535] { R8191 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [108, 108] { R8191 += 1, R8043 += 1, R681 += 1 };
  s2 -> s1 [109, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s3 -> s1 [0, 107] { R8191 += 1, R8043 += 1, R681 += 1 };
  s3 -> s2 [0, 65535] { R8191 += 1, R8043 += 1, R680 += 1, R681 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8191 += 1, R8042 += 1, R8043 += 1 };
  s3 -> s4 [108, 108] { R8191 += 1, R8043 += 1, R681 += 1 };
  s3 -> s1 [109, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s4 -> s1 [0, 110] { R8191 += 1, R8043 += 1, R681 += 1 };
  s4 -> s5 [0, 65535] { R8191 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8191 += 1, R8043 += 1 };
  s4 -> s7 [111, 111] { R8191 += 1, R8043 += 1, R681 += 1 };
  s4 -> s1 [112, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s5 -> s5 [0, 65535] { R8191 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R8191 += 1, R8043 += 1, R681 += 1 };
  s7 -> s5 [0, 65535] { R8191 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8191 += 1, R8043 += 1 };
  s7 -> s8 [99, 99] { R8191 += 1, R8043 += 1, R681 += 1 };
  s7 -> s1 [100, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s8 -> s1 [0, 96] { R8191 += 1, R8043 += 1, R681 += 1 };
  s8 -> s5 [0, 65535] { R8191 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8191 += 1, R8043 += 1 };
  s8 -> s9 [97, 97] { R8191 += 1, R8043 += 1, R681 += 1 };
  s8 -> s1 [98, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s9 -> s1 [0, 107] { R8191 += 1, R8043 += 1, R681 += 1 };
  s9 -> s5 [0, 65535] { R8191 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R8191 += 1, R8043 += 1 };
  s9 -> s10 [108, 108] { R8191 += 1, R8043 += 1, R681 += 1 };
  s9 -> s1 [109, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s10 -> s1 [0, 103] { R8191 += 1, R8043 += 1, R681 += 1 };
  s10 -> s10 [0, 65535] { R8191 += 1, R8043 += 1 };
  s10 -> s5 [0, 65535] { R8191 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s11 [104, 104] { R8191 += 1, R8043 += 1, R681 += 1 };
  s10 -> s1 [105, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s11 -> s1 [0, 110] { R8191 += 1, R8043 += 1, R681 += 1 };
  s11 -> s5 [0, 65535] { R8191 += 1 };
  s11 -> s11 [0, 65535] { R8191 += 1, R8043 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s12 [111, 111] { R8191 += 1, R8043 += 1, R681 += 1 };
  s11 -> s1 [112, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s12 -> s1 [0, 114] { R8191 += 1, R8043 += 1, R681 += 1 };
  s12 -> s5 [0, 65535] { R8191 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R8191 += 1, R8043 += 1 };
  s12 -> s13 [115, 115] { R8191 += 1, R8043 += 1, R681 += 1 };
  s12 -> s1 [116, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s13 -> s1 [0, 115] { R8191 += 1, R8043 += 1, R681 += 1 };
  s13 -> s5 [0, 65535] { R8191 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R8191 += 1, R8043 += 1 };
  s13 -> s14 [116, 116] { R8191 += 1, R8043 += 1, R681 += 1 };
  s13 -> s1 [117, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s14 -> s1 [0, 65535] { R8191 += 1, R8043 += 1, R681 += 1 };
  s15 -> s5 [0, 65535] { R8191 += 1 };
  s15 -> s6 [0, 65535];
  s15 -> s15 [0, 65535] { R8191 += 1, R8043 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 79] { R8193 += 1, R8045 += 1, R685 += 1 };
  s0 -> s2 [0, 65535] { R8193 += 1, R8044 += 1, R8045 += 1 };
  s0 -> s0 [0, 65535] { R8192 += 1, R8193 += 1 };
  s0 -> s3 [0, 65535] { R8193 += 1, R8045 += 1, R684 += 1, R685 += 1 };
  s0 -> s1 [81, 65535] { R8193 += 1, R8045 += 1, R685 += 1 };
  s1 -> s1 [0, 79] { R8193 += 1, R8045 += 1, R685 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8193 += 1 };
  s1 -> s1 [0, 65535] { R8193 += 1, R8045 += 1 };
  s1 -> s1 [81, 65535] { R8193 += 1, R8045 += 1, R685 += 1 };
  s2 -> s1 [0, 79] { R8193 += 1, R8045 += 1, R685 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8193 += 1, R8044 += 1, R8045 += 1 };
  s2 -> s3 [0, 65535] { R8193 += 1, R8045 += 1, R684 += 1, R685 += 1 };
  s2 -> s1 [81, 65535] { R8193 += 1, R8045 += 1, R685 += 1 };
  s3 -> s1 [0, 79] { R8193 += 1, R8045 += 1, R685 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8193 += 1 };
  s3 -> s3 [0, 65535] { R8193 += 1, R8045 += 1, R684 += 1, R685 += 1 };
  s3 -> s1 [81, 65535] { R8193 += 1, R8045 += 1, R685 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8193 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 65535] { R8195 += 1, R8047 += 1, R689 += 1, R690 += 1 };
  s0 -> s2 [0, 65535] { R8195 += 1, R8046 += 1, R8047 += 1 };
  s0 -> s3 [0, 65535] { R8195 += 1, R8047 += 1, R690 += 1, R691 += 1 };
  s0 -> s0 [0, 65535] { R8194 += 1, R8195 += 1 };
  s1 -> s1 [0, 65535] { R8195 += 1, R8047 += 1, R689 += 1, R690 += 1 };
  s1 -> s4 [0, 65535] { R8195 += 1 };
  s1 -> s3 [0, 65535] { R8195 += 1, R8047 += 1, R690 += 1, R691 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R8195 += 1, R8047 += 1, R689 += 1, R690 += 1 };
  s2 -> s2 [0, 65535] { R8195 += 1, R8046 += 1, R8047 += 1 };
  s2 -> s3 [0, 65535] { R8195 += 1, R8047 += 1, R690 += 1, R691 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R8195 += 1 };
  s3 -> s3 [0, 65535] { R8195 += 1, R8047 += 1, R690 += 1, R691 += 1 };
  s3 -> s5 [0, 65535] { R8195 += 1, R8047 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8195 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R8195 += 1 };
  s5 -> s5 [0, 65535] { R8195 += 1, R8047 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s0 -> s0 [0, 65535] { R8196 += 1, R8197 += 1 };
  s0 -> s2 [0, 65535] { R8197 += 1, R8048 += 1, R8049 += 1 };
  s0 -> s3 [0, 65535] { R8197 += 1, R8049 += 1, R694 += 1, R695 += 1 };
  s0 -> s1 [91, 107] { R8197 += 1, R8049 += 1, R695 += 1 };
  s0 -> s4 [108, 108] { R8197 += 1, R8049 += 1, R695 += 1 };
  s0 -> s1 [109, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s1 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s1 -> s1 [0, 65535] { R8197 += 1, R8049 += 1 };
  s1 -> s5 [0, 65535] { R8197 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s2 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s2 -> s2 [0, 65535] { R8197 += 1, R8048 += 1, R8049 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8197 += 1, R8049 += 1, R694 += 1, R695 += 1 };
  s2 -> s1 [91, 107] { R8197 += 1, R8049 += 1, R695 += 1 };
  s2 -> s4 [108, 108] { R8197 += 1, R8049 += 1, R695 += 1 };
  s2 -> s1 [109, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s3 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s3 -> s5 [0, 65535] { R8197 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8197 += 1, R8049 += 1, R694 += 1, R695 += 1 };
  s3 -> s1 [91, 107] { R8197 += 1, R8049 += 1, R695 += 1 };
  s3 -> s4 [108, 108] { R8197 += 1, R8049 += 1, R695 += 1 };
  s3 -> s1 [109, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s4 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s4 -> s4 [0, 65535] { R8197 += 1, R8049 += 1 };
  s4 -> s5 [0, 65535] { R8197 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R8197 += 1, R8049 += 1, R695 += 1 };
  s4 -> s7 [111, 111] { R8197 += 1, R8049 += 1, R695 += 1 };
  s4 -> s1 [112, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s5 -> s5 [0, 65535] { R8197 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s7 -> s5 [0, 65535] { R8197 += 1 };
  s7 -> s7 [0, 65535] { R8197 += 1, R8049 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R8197 += 1, R8049 += 1, R695 += 1 };
  s7 -> s8 [99, 99] { R8197 += 1, R8049 += 1, R695 += 1 };
  s7 -> s1 [100, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s8 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s8 -> s5 [0, 65535] { R8197 += 1 };
  s8 -> s8 [0, 65535] { R8197 += 1, R8049 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R8197 += 1, R8049 += 1, R695 += 1 };
  s8 -> s9 [97, 97] { R8197 += 1, R8049 += 1, R695 += 1 };
  s8 -> s1 [98, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s9 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s9 -> s5 [0, 65535] { R8197 += 1 };
  s9 -> s9 [0, 65535] { R8197 += 1, R8049 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R8197 += 1, R8049 += 1, R695 += 1 };
  s9 -> s10 [108, 108] { R8197 += 1, R8049 += 1, R695 += 1 };
  s9 -> s1 [109, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s10 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s10 -> s5 [0, 65535] { R8197 += 1 };
  s10 -> s10 [0, 65535] { R8197 += 1, R8049 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R8197 += 1, R8049 += 1, R695 += 1 };
  s10 -> s11 [104, 104] { R8197 += 1, R8049 += 1, R695 += 1 };
  s10 -> s1 [105, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s11 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s11 -> s5 [0, 65535] { R8197 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R8197 += 1, R8049 += 1 };
  s11 -> s1 [91, 110] { R8197 += 1, R8049 += 1, R695 += 1 };
  s11 -> s12 [111, 111] { R8197 += 1, R8049 += 1, R695 += 1 };
  s11 -> s1 [112, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s12 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s12 -> s5 [0, 65535] { R8197 += 1 };
  s12 -> s12 [0, 65535] { R8197 += 1, R8049 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R8197 += 1, R8049 += 1, R695 += 1 };
  s12 -> s13 [115, 115] { R8197 += 1, R8049 += 1, R695 += 1 };
  s12 -> s1 [116, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s13 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s13 -> s13 [0, 65535] { R8197 += 1, R8049 += 1 };
  s13 -> s5 [0, 65535] { R8197 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R8197 += 1, R8049 += 1, R695 += 1 };
  s13 -> s14 [116, 116] { R8197 += 1, R8049 += 1, R695 += 1 };
  s13 -> s1 [117, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  s14 -> s1 [0, 80] { R8197 += 1, R8049 += 1, R695 += 1 };
  s14 -> s1 [91, 65535] { R8197 += 1, R8049 += 1, R695 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R8199 += 1, R8051 += 1, R699 += 1, R700 += 1 };
  s0 -> s0 [0, 65535] { R8198 += 1, R8199 += 1 };
  s0 -> s2 [0, 65535] { R8199 += 1, R8050 += 1, R8051 += 1 };
  s0 -> s3 [0, 65535] { R8199 += 1, R8051 += 1, R700 += 1, R701 += 1 };
  s1 -> s1 [0, 65535] { R8199 += 1, R8051 += 1, R699 += 1, R700 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8199 += 1 };
  s1 -> s3 [0, 65535] { R8199 += 1, R8051 += 1, R700 += 1, R701 += 1 };
  s2 -> s1 [0, 65535] { R8199 += 1, R8051 += 1, R699 += 1, R700 += 1 };
  s2 -> s2 [0, 65535] { R8199 += 1, R8050 += 1, R8051 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8199 += 1, R8051 += 1, R700 += 1, R701 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8199 += 1, R8051 += 1 };
  s3 -> s6 [0, 65535] { R8199 += 1 };
  s3 -> s3 [0, 65535] { R8199 += 1, R8051 += 1, R700 += 1, R701 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8199 += 1, R8051 += 1 };
  s5 -> s6 [0, 65535] { R8199 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8199 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R8201 += 1, R8053 += 1 };
  s0 -> s2 [0, 65535] { R8201 += 1, R8052 += 1, R8053 += 1 };
  s0 -> s0 [0, 65535] { R8200 += 1, R8201 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8201 += 1, R8053 += 1 };
  s1 -> s4 [0, 65535] { R8201 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8201 += 1, R8053 += 1 };
  s2 -> s2 [0, 65535] { R8201 += 1, R8052 += 1, R8053 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8201 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s0 [0, 65535] { R8202 += 1, R8203 += 1 };
  s0 -> s1 [0, 65535] { R8203 += 1, R8055 += 1 };
  s0 -> s2 [0, 65535] { R8203 += 1, R8054 += 1, R8055 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8203 += 1 };
  s1 -> s1 [0, 65535] { R8203 += 1, R8055 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8203 += 1, R8055 += 1 };
  s2 -> s2 [0, 65535] { R8203 += 1, R8054 += 1, R8055 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8203 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 65535] { R8205 += 1, R8057 += 1, R7359 += 1, R7360 += 1 };
  s0 -> s0 [0, 65535] { R8204 += 1, R8205 += 1 };
  s0 -> s2 [0, 65535] { R8205 += 1, R8057 += 1, R7360 += 1, R7361 += 1 };
  s0 -> s3 [0, 65535] { R8205 += 1, R8056 += 1, R8057 += 1 };
  s1 -> s1 [0, 65535] { R8205 += 1, R8057 += 1, R7359 += 1, R7360 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8205 += 1, R8057 += 1, R7360 += 1, R7361 += 1 };
  s1 -> s6 [0, 65535] { R8205 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8205 += 1, R8057 += 1 };
  s2 -> s2 [0, 65535] { R8205 += 1, R8057 += 1, R7360 += 1, R7361 += 1 };
  s2 -> s6 [0, 65535] { R8205 += 1 };
  s3 -> s1 [0, 65535] { R8205 += 1, R8057 += 1, R7359 += 1, R7360 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8205 += 1, R8057 += 1, R7360 += 1, R7361 += 1 };
  s3 -> s3 [0, 65535] { R8205 += 1, R8056 += 1, R8057 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8205 += 1, R8057 += 1 };
  s5 -> s6 [0, 65535] { R8205 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8205 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s0 [0, 65535] { R8206 += 1, R8207 += 1 };
  s0 -> s1 [0, 65535] { R8207 += 1, R8059 += 1 };
  s0 -> s2 [0, 65535] { R8207 += 1, R8058 += 1, R8059 += 1 };
  s1 -> s4 [0, 65535] { R8207 += 1 };
  s1 -> s1 [0, 65535] { R8207 += 1, R8059 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8207 += 1, R8059 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8207 += 1, R8058 += 1, R8059 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8207 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 65535] { R8209 += 1, R8060 += 1, R8061 += 1 };
  s0 -> s2 [0, 65535] { R8209 += 1, R8061 += 1 };
  s0 -> s0 [0, 65535] { R8208 += 1, R8209 += 1 };
  s1 -> s1 [0, 65535] { R8209 += 1, R8060 += 1, R8061 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8209 += 1, R8061 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8209 += 1 };
  s2 -> s2 [0, 65535] { R8209 += 1, R8061 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8209 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s0 [0, 65535] { R8210 += 1, R8211 += 1 };
  s0 -> s1 [0, 65535] { R8211 += 1, R8091 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R8211 += 1, R8090 += 1, R8091 += 1 };
  s1 -> s1 [0, 65535] { R8211 += 1, R8091 += 1, R45 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8211 += 1 };
  s2 -> s1 [0, 65535] { R8211 += 1, R8091 += 1, R45 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8211 += 1, R8090 += 1, R8091 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8211 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R8213 += 1, R8093 += 1 };
  s0 -> s0 [0, 65535] { R8212 += 1, R8213 += 1 };
  s0 -> s2 [0, 65535] { R8213 += 1, R8092 += 1, R8093 += 1 };
  s0 -> s3 [65, 65] { R8213 += 1, R8093 += 1 };
  s0 -> s4 [65, 65] { R8213 += 1, R8093 += 1 };
  s0 -> s5 [80, 80] { R8213 += 1, R8093 += 1 };
  s0 -> s1 [81, 65535] { R8213 += 1, R8093 += 1 };
  s1 -> s1 [0, 64] { R8213 += 1, R8093 += 1 };
  s1 -> s3 [65, 65] { R8213 += 1, R8093 += 1 };
  s1 -> s4 [65, 65] { R8213 += 1, R8093 += 1 };
  s1 -> s5 [80, 80] { R8213 += 1, R8093 += 1 };
  s1 -> s1 [81, 65535] { R8213 += 1, R8093 += 1 };
  s2 -> s1 [0, 64] { R8213 += 1, R8093 += 1 };
  s2 -> s2 [0, 65535] { R8213 += 1, R8092 += 1, R8093 += 1 };
  s2 -> s3 [65, 65] { R8213 += 1, R8093 += 1 };
  s2 -> s4 [65, 65] { R8213 += 1, R8093 += 1 };
  s2 -> s5 [80, 80] { R8213 += 1, R8093 += 1 };
  s2 -> s1 [81, 65535] { R8213 += 1, R8093 += 1 };
  s3 -> s3 [0, 65] { R8213 += 1, R8093 += 1 };
  s3 -> s7 [80, 80] { R8213 += 1, R8093 += 1 };
  s3 -> s3 [81, 65535] { R8213 += 1, R8093 += 1 };
  s5 -> s5 [0, 64] { R8213 += 1, R8093 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8213 += 1 };
  s5 -> s7 [65, 65] { R8213 += 1, R8093 += 1 };
  s5 -> s8 [65, 65] { R8213 += 1, R8093 += 1 };
  s5 -> s5 [80, 65535] { R8213 += 1, R8093 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R8213 += 1, R8093 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8213 += 1 };
  s7 -> s7 [80, 65535] { R8213 += 1, R8093 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8213 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R8215 += 1, R8095 += 1, R666 += 1 };
  s0 -> s0 [0, 65535] { R8214 += 1, R8215 += 1 };
  s0 -> s2 [0, 65535] { R8215 += 1, R8094 += 1, R8095 += 1 };
  s0 -> s3 [65, 65] { R8215 += 1, R8095 += 1, R666 += 1 };
  s0 -> s4 [65, 65] { R8215 += 1, R8095 += 1, R666 += 1 };
  s0 -> s1 [66, 65535] { R8215 += 1, R8095 += 1, R666 += 1 };
  s1 -> s1 [0, 64] { R8215 += 1, R8095 += 1, R666 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8215 += 1 };
  s1 -> s3 [65, 65] { R8215 += 1, R8095 += 1, R666 += 1 };
  s1 -> s4 [65, 65] { R8215 += 1, R8095 += 1, R666 += 1 };
  s1 -> s1 [66, 65535] { R8215 += 1, R8095 += 1, R666 += 1 };
  s2 -> s1 [0, 64] { R8215 += 1, R8095 += 1, R666 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8215 += 1, R8094 += 1, R8095 += 1 };
  s2 -> s3 [65, 65] { R8215 += 1, R8095 += 1, R666 += 1 };
  s2 -> s4 [65, 65] { R8215 += 1, R8095 += 1, R666 += 1 };
  s2 -> s1 [66, 65535] { R8215 += 1, R8095 += 1, R666 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8215 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8215 += 1 };
  s4 -> s4 [0, 65535] { R8215 += 1, R8095 += 1, R666 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8215 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R8217 += 1, R8097 += 1, R668 += 1 };
  s0 -> s0 [0, 65535] { R8216 += 1, R8217 += 1 };
  s0 -> s2 [0, 65535] { R8217 += 1, R8096 += 1, R8097 += 1 };
  s0 -> s3 [65, 65] { R8217 += 1, R8097 += 1, R668 += 1 };
  s0 -> s4 [65, 65] { R8217 += 1, R8097 += 1, R668 += 1 };
  s0 -> s1 [66, 65535] { R8217 += 1, R8097 += 1, R668 += 1 };
  s1 -> s1 [0, 64] { R8217 += 1, R8097 += 1, R668 += 1 };
  s1 -> s1 [0, 65535] { R8217 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8217 += 1, R8097 += 1, R668 += 1 };
  s1 -> s4 [65, 65] { R8217 += 1, R8097 += 1, R668 += 1 };
  s1 -> s1 [66, 65535] { R8217 += 1, R8097 += 1, R668 += 1 };
  s2 -> s1 [0, 64] { R8217 += 1, R8097 += 1, R668 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8217 += 1, R8096 += 1, R8097 += 1 };
  s2 -> s3 [65, 65] { R8217 += 1, R8097 += 1, R668 += 1 };
  s2 -> s4 [65, 65] { R8217 += 1, R8097 += 1, R668 += 1 };
  s2 -> s1 [66, 65535] { R8217 += 1, R8097 += 1, R668 += 1 };
  s3 -> s6 [0, 65535] { R8217 += 1 };
  s3 -> s3 [0, 65535] { R8217 += 1, R8097 += 1, R668 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8217 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8217 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R8219 += 1, R8099 += 1, R670 += 1 };
  s0 -> s0 [0, 65535] { R8218 += 1, R8219 += 1 };
  s0 -> s2 [0, 65535] { R8219 += 1, R8098 += 1, R8099 += 1 };
  s0 -> s3 [65, 65] { R8219 += 1, R8099 += 1, R670 += 1 };
  s0 -> s4 [65, 65] { R8219 += 1, R8099 += 1, R670 += 1 };
  s0 -> s1 [66, 65535] { R8219 += 1, R8099 += 1, R670 += 1 };
  s1 -> s1 [0, 64] { R8219 += 1, R8099 += 1, R670 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8219 += 1 };
  s1 -> s3 [65, 65] { R8219 += 1, R8099 += 1, R670 += 1 };
  s1 -> s4 [65, 65] { R8219 += 1, R8099 += 1, R670 += 1 };
  s1 -> s1 [66, 65535] { R8219 += 1, R8099 += 1, R670 += 1 };
  s2 -> s1 [0, 64] { R8219 += 1, R8099 += 1, R670 += 1 };
  s2 -> s2 [0, 65535] { R8219 += 1, R8098 += 1, R8099 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R8219 += 1, R8099 += 1, R670 += 1 };
  s2 -> s4 [65, 65] { R8219 += 1, R8099 += 1, R670 += 1 };
  s2 -> s1 [66, 65535] { R8219 += 1, R8099 += 1, R670 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8219 += 1 };
  s4 -> s5 [0, 65535] { R8219 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8219 += 1, R8099 += 1, R670 += 1 };
  s5 -> s5 [0, 65535] { R8219 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s0 -> s2 [0, 65535] { R8221 += 1, R8100 += 1, R8101 += 1 };
  s0 -> s0 [0, 65535] { R8220 += 1, R8221 += 1 };
  s0 -> s3 [65, 65] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s0 -> s4 [65, 65] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s0 -> s1 [66, 65535] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 64] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 65535] { R8221 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s1 -> s4 [65, 65] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [66, 65535] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [0, 64] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s2 -> s2 [0, 65535] { R8221 += 1, R8100 += 1, R8101 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s2 -> s4 [65, 65] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [66, 65535] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s3 -> s6 [0, 65535] { R8221 += 1 };
  s3 -> s3 [0, 65535] { R8221 += 1, R8101 += 1, R672 += 1, R673 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8221 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8221 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 64] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s0 -> s2 [0, 65535] { R8223 += 1, R8102 += 1, R8103 += 1 };
  s0 -> s0 [0, 65535] { R8222 += 1, R8223 += 1 };
  s0 -> s3 [65, 65] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s0 -> s4 [65, 65] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s0 -> s1 [66, 65535] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 64] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8223 += 1 };
  s1 -> s3 [65, 65] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s1 -> s4 [65, 65] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [66, 65535] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [0, 64] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s2 -> s2 [0, 65535] { R8223 += 1, R8102 += 1, R8103 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s2 -> s4 [65, 65] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [66, 65535] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s3 -> s6 [0, 65535] { R8223 += 1 };
  s3 -> s3 [0, 65535] { R8223 += 1, R8103 += 1, R678 += 1, R679 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8223 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8223 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s1 [0, 64] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s0 -> s0 [0, 65535] { R8224 += 1, R8225 += 1 };
  s0 -> s2 [0, 65535] { R8225 += 1, R8104 += 1, R8105 += 1 };
  s0 -> s3 [65, 65] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s0 -> s4 [65, 65] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s0 -> s1 [66, 65535] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 64] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 65535] { R8225 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s1 -> s4 [65, 65] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [66, 65535] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [0, 64] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s2 -> s2 [0, 65535] { R8225 += 1, R8104 += 1, R8105 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s2 -> s4 [65, 65] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [66, 65535] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8225 += 1 };
  s4 -> s5 [0, 65535] { R8225 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8225 += 1, R8105 += 1, R682 += 1, R683 += 1 };
  s5 -> s5 [0, 65535] { R8225 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 64] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s0 -> s2 [0, 65535] { R8227 += 1, R8106 += 1, R8107 += 1 };
  s0 -> s0 [0, 65535] { R8226 += 1, R8227 += 1 };
  s0 -> s3 [65, 65] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s0 -> s4 [65, 65] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s0 -> s1 [66, 65535] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 64] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8227 += 1 };
  s1 -> s3 [65, 65] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s1 -> s4 [65, 65] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [66, 65535] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [0, 64] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8227 += 1, R8106 += 1, R8107 += 1 };
  s2 -> s3 [65, 65] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s2 -> s4 [65, 65] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [66, 65535] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s3 -> s3 [0, 65535] { R8227 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8227 += 1 };
  s4 -> s4 [0, 65535] { R8227 += 1, R8107 += 1, R686 += 1, R687 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8227 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s1 [0, 64] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s0 -> s0 [0, 65535] { R8228 += 1, R8229 += 1 };
  s0 -> s2 [0, 65535] { R8229 += 1, R8108 += 1, R8109 += 1 };
  s0 -> s3 [65, 65] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s0 -> s4 [65, 65] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s0 -> s1 [66, 65535] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 64] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 65535] { R8229 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s1 -> s4 [65, 65] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [66, 65535] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [0, 64] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8229 += 1, R8108 += 1, R8109 += 1 };
  s2 -> s3 [65, 65] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s2 -> s4 [65, 65] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [66, 65535] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8229 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8229 += 1 };
  s4 -> s4 [0, 65535] { R8229 += 1, R8109 += 1, R692 += 1, R693 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8229 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s0 -> s2 [0, 65535] { R8231 += 1, R8110 += 1, R8111 += 1 };
  s0 -> s0 [0, 65535] { R8230 += 1, R8231 += 1 };
  s0 -> s3 [65, 65] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s0 -> s4 [65, 65] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s0 -> s1 [66, 65535] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 64] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 65535] { R8231 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s1 -> s4 [65, 65] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [66, 65535] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [0, 64] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s2 -> s2 [0, 65535] { R8231 += 1, R8110 += 1, R8111 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s2 -> s4 [65, 65] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [66, 65535] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s3 -> s6 [0, 65535] { R8231 += 1 };
  s3 -> s3 [0, 65535] { R8231 += 1, R8111 += 1, R696 += 1, R697 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8231 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8231 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s2 [0, 64] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s0 [0, 65535] { R8232 += 1, R8233 += 1 };
  s0 -> s3 [0, 65535] { R8233 += 1, R8112 += 1, R8113 += 1 };
  s0 -> s4 [65, 65] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s5 [65, 65] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s6 [65, 65] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s7 [65, 65] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s1 [66, 65535] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s2 [66, 65535] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s1 [0, 64] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s1 -> s2 [0, 64] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s4 [65, 65] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s1 -> s5 [65, 65] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s6 [65, 65] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s1 -> s7 [65, 65] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s1 [66, 65535] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s1 -> s2 [66, 65535] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s2 [0, 64] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s11 [0, 64] { R8233 += 1, R8113 += 1 };
  s2 -> s12 [65, 65] { R8233 += 1, R8113 += 1 };
  s2 -> s8 [65, 65] { R8233 += 1, R8113 += 1 };
  s2 -> s5 [65, 65] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s7 [65, 65] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s2 [66, 65535] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s11 [66, 65535] { R8233 += 1, R8113 += 1 };
  s3 -> s1 [0, 64] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s2 [0, 64] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s3 [0, 65535] { R8233 += 1, R8112 += 1, R8113 += 1 };
  s3 -> s4 [65, 65] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s5 [65, 65] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s6 [65, 65] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s7 [65, 65] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s1 [66, 65535] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s2 [66, 65535] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s5 -> s8 [0, 65535] { R8233 += 1, R8113 += 1 };
  s5 -> s5 [0, 65535] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s6 -> s5 [0, 65535] { R8233 += 1, R8113 += 1, R7351 += 1, R7352 += 1 };
  s6 -> s6 [0, 65535] { R8233 += 1, R8113 += 1, R7350 += 1, R7351 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8233 += 1, R8113 += 1 };
  s8 -> s10 [0, 65535] { R8233 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8233 += 1 };
  s11 -> s11 [0, 64] { R8233 += 1, R8113 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8233 += 1 };
  s11 -> s12 [65, 65] { R8233 += 1, R8113 += 1 };
  s11 -> s8 [65, 65] { R8233 += 1, R8113 += 1 };
  s11 -> s11 [66, 65535] { R8233 += 1, R8113 += 1 };
  s12 -> s12 [0, 65535] { R8233 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R8235 += 1, R8115 += 1 };
  s0 -> s2 [0, 65535] { R8235 += 1, R8114 += 1, R8115 += 1 };
  s0 -> s0 [0, 65535] { R8234 += 1, R8235 += 1 };
  s0 -> s3 [65, 65] { R8235 += 1, R8115 += 1 };
  s0 -> s4 [65, 65] { R8235 += 1, R8115 += 1 };
  s0 -> s1 [66, 65535] { R8235 += 1, R8115 += 1 };
  s1 -> s1 [0, 64] { R8235 += 1, R8115 += 1 };
  s1 -> s1 [0, 65535] { R8235 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8235 += 1, R8115 += 1 };
  s1 -> s4 [65, 65] { R8235 += 1, R8115 += 1 };
  s1 -> s1 [66, 65535] { R8235 += 1, R8115 += 1 };
  s2 -> s1 [0, 64] { R8235 += 1, R8115 += 1 };
  s2 -> s2 [0, 65535] { R8235 += 1, R8114 += 1, R8115 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8235 += 1, R8115 += 1 };
  s2 -> s4 [65, 65] { R8235 += 1, R8115 += 1 };
  s2 -> s1 [66, 65535] { R8235 += 1, R8115 += 1 };
  s3 -> s6 [0, 65535] { R8235 += 1 };
  s3 -> s3 [0, 65535] { R8235 += 1, R8115 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8235 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8235 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s0 -> s2 [0, 65535] { R8237 += 1, R8116 += 1, R8117 += 1 };
  s0 -> s0 [0, 65535] { R8236 += 1, R8237 += 1 };
  s0 -> s3 [65, 65] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s0 -> s4 [65, 65] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s0 -> s1 [66, 65535] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s1 -> s1 [0, 64] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s1 -> s1 [0, 65535] { R8237 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s1 -> s4 [65, 65] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s1 -> s1 [66, 65535] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s2 -> s1 [0, 64] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s2 -> s2 [0, 65535] { R8237 += 1, R8116 += 1, R8117 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s2 -> s4 [65, 65] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s2 -> s1 [66, 65535] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s3 -> s3 [0, 65535] { R8237 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8237 += 1, R8117 += 1, R7356 += 1, R7357 += 1 };
  s4 -> s5 [0, 65535] { R8237 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8237 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R8239 += 1, R8119 += 1 };
  s0 -> s2 [0, 65535] { R8239 += 1, R8118 += 1, R8119 += 1 };
  s0 -> s0 [0, 65535] { R8238 += 1, R8239 += 1 };
  s0 -> s3 [65, 65] { R8239 += 1, R8119 += 1 };
  s0 -> s4 [65, 65] { R8239 += 1, R8119 += 1 };
  s0 -> s1 [66, 65535] { R8239 += 1, R8119 += 1 };
  s1 -> s1 [0, 64] { R8239 += 1, R8119 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8239 += 1 };
  s1 -> s3 [65, 65] { R8239 += 1, R8119 += 1 };
  s1 -> s4 [65, 65] { R8239 += 1, R8119 += 1 };
  s1 -> s1 [66, 65535] { R8239 += 1, R8119 += 1 };
  s2 -> s1 [0, 64] { R8239 += 1, R8119 += 1 };
  s2 -> s2 [0, 65535] { R8239 += 1, R8118 += 1, R8119 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8239 += 1, R8119 += 1 };
  s2 -> s4 [65, 65] { R8239 += 1, R8119 += 1 };
  s2 -> s1 [66, 65535] { R8239 += 1, R8119 += 1 };
  s3 -> s3 [0, 65535] { R8239 += 1, R8119 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8239 += 1 };
  s4 -> s4 [0, 65535] { R8239 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8239 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s0 -> s2 [0, 64] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s0 -> s3 [0, 65535] { R8241 += 1, R8120 += 1, R8121 += 1 };
  s0 -> s0 [0, 65535] { R8240 += 1, R8241 += 1 };
  s0 -> s4 [65, 65] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s0 -> s5 [65, 65] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s0 -> s6 [65, 65] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s0 -> s7 [65, 65] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s0 -> s1 [66, 79] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s0 -> s2 [66, 65535] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s0 -> s8 [80, 80] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s0 -> s1 [81, 65535] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s1 -> s1 [0, 64] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s1 -> s6 [65, 65] { R8241 += 1, R8121 += 1 };
  s1 -> s7 [65, 65] { R8241 += 1, R8121 += 1 };
  s1 -> s1 [66, 79] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s1 -> s1 [66, 65535] { R8241 += 1, R8121 += 1 };
  s1 -> s8 [80, 80] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s1 -> s1 [81, 65535] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s2 -> s1 [0, 64] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s2 -> s2 [0, 64] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s2 -> s4 [65, 65] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s2 -> s5 [65, 65] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s2 -> s6 [65, 65] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s2 -> s7 [65, 65] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s2 -> s1 [66, 79] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s2 -> s2 [66, 65535] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s2 -> s8 [80, 80] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s2 -> s1 [81, 65535] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s3 -> s1 [0, 64] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s3 -> s2 [0, 64] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s3 -> s3 [0, 65535] { R8241 += 1, R8120 += 1, R8121 += 1 };
  s3 -> s4 [65, 65] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s3 -> s5 [65, 65] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s3 -> s6 [65, 65] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s3 -> s7 [65, 65] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s3 -> s1 [66, 79] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s3 -> s2 [66, 65535] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s3 -> s8 [80, 80] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s3 -> s1 [81, 65535] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s5 -> s7 [0, 79] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s5 -> s5 [0, 65535] { R8241 += 1, R8121 += 1, R8022 += 1, R8023 += 1 };
  s5 -> s10 [80, 80] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s5 -> s7 [81, 65535] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s7 -> s7 [0, 79] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s7 -> s7 [0, 65535] { R8241 += 1, R8121 += 1 };
  s7 -> s10 [80, 80] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s7 -> s7 [81, 65535] { R8241 += 1, R8121 += 1, R8023 += 1, R8024 += 1 };
  s8 -> s8 [0, 64] { R8241 += 1, R8121 += 1 };
  s8 -> s8 [0, 65535] { R8241 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R8241 += 1, R8121 += 1 };
  s8 -> s11 [65, 65] { R8241 += 1, R8121 += 1 };
  s8 -> s8 [66, 65535] { R8241 += 1, R8121 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R8241 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8241 += 1, R8121 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8241 += 1 };
  s12 -> s12 [0, 65535] { R8241 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P105
automaton P105_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P39
automaton P39_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R6 = R8061 && R7 = R8241 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R82 = 0 && R83 = R8061 && R84 = 0 && R85 = R8061 && R86 = 0 && R87 = R8061 && R88 = 0 && R89 = R8241 && R90 = 0 && R91 = R8241 && R92 = 0 && R93 = R8241 && R115 + R114 = 0 && R8028 = 0 && R8029 = R8061 && R8030 = 0 && R8031 = R8061 && R8032 = 0 && R8033 = R8061 && R8034 = 0 && R8035 = R8061 && R8036 = 0 && R8037 = R8061 && R8038 = 0 && R8039 = R8061 && R8040 = 0 && R8041 = R8061 && R8042 = 0 && R8043 = R8061 && R8044 = 0 && R8045 = R8061 && R8046 = 0 && R8047 = R8061 && R8048 = 0 && R8049 = R8061 && R8050 = 0 && R8051 = R8061 && R8052 = 0 && R8053 = R8061 && R8054 = 0 && R8055 = R8061 && R8056 = 0 && R8057 = R8061 && R8058 = 0 && R8059 = R8061 && R8060 = 0 && R8062 = 0 && R8063 = R8241 && R8064 = 0 && R8065 = R8241 && R8066 = 0 && R8067 = R8241 && R8068 = 0 && R8069 = R8241 && R8070 = 0 && R8071 = R8241 && R8072 = 0 && R8073 = R8241 && R8074 = 0 && R8075 = R8241 && R8076 = 0 && R8077 = R8241 && R8078 = 0 && R8079 = R8241 && R8080 = 0 && R8081 = R8241 && R8082 = 0 && R8083 = R8241 && R8084 = 0 && R8085 = R8241 && R8086 = 0 && R8087 = R8241 && R8088 = 0 && R8089 = R8241 && R8092 = 0 && R8093 = 0 && R8112 = 0 && R8113 = 0 && R8120 = 0 && R8121 = 0 && R8150 = 10 && R8151 = R8241 && R8152 = 10 && R8153 = R8241 && R8154 = 10 && R8155 = R8241 && R8156 = 10 && R8157 = R8241 && R8158 = 10 && R8159 = R8241 && R8160 = 10 && R8161 = R8241 && R8162 = 10 && R8163 = R8241 && R8164 = 10 && R8165 = R8241 && R8166 = 10 && R8167 = R8241 && R8168 = 10 && R8169 = R8241 && R8170 = 10 && R8171 = R8241 && R8172 = 10 && R8173 = R8241 && R8174 = 10 && R8175 = R8241 && R8176 = 10 && R8177 = R8241 && R8178 = 10 && R8179 = R8241 && R8180 = 10 && R8181 = R8241 && R8182 = 10 && R8183 = R8241 && R8184 = 10 && R8185 = R8241 && R8186 = 10 && R8187 = R8241 && R8188 = 10 && R8189 = R8241 && R8190 = 10 && R8191 = R8241 && R8192 = 10 && R8193 = R8241 && R8194 = 10 && R8195 = R8241 && R8196 = 10 && R8197 = R8241 && R8198 = 10 && R8199 = R8241 && R8200 = 10 && R8201 = R8241 && R8202 = 10 && R8203 = R8241 && R8204 = 10 && R8205 = R8241 && R8206 = 10 && R8207 = R8241 && R8208 = 10 && R8209 = R8241 && R8210 = 10 && R8211 = R8241 && R8212 = 10 && R8213 = R8241 && R8214 = 10 && R8215 = R8241 && R8216 = 10 && R8217 = R8241 && R8218 = 10 && R8219 = R8241 && R8220 = 10 && R8221 = R8241 && R8222 = 10 && R8223 = R8241 && R8224 = 10 && R8225 = R8241 && R8226 = 10 && R8227 = R8241 && R8228 = 10 && R8229 = R8241 && R8230 = 10 && R8231 = R8241 && R8232 = 10 && R8233 = R8241 && R8234 = 10 && R8235 = R8241 && R8236 = 10 && R8237 = R8241 && R8238 = 10 && R8239 = R8241 && R8240 = 10 && R57 + R56 != 0 && R59 + R58 != 0 && R141 + R138 + R159 + R156 != 0 && R701 + R698 + R8027 + R8024 != 0 && R21 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && R31 < 1 && R117 + R116 < 1 && R119 + R118 < 1 && -1*R667 + -1*R666 < 1 && R669 + R668 < 1 && R671 + R670 < 1 && 0 < R8061 && 9 < R8241 && (R667 + R666 != 0 || R677 + R674 = 0 || (R675 + R672 = 0 && R676 + R673 = 0)) && (R667 + R666 != 0 || R677 + R674 = 0 || (R680 + R678 = 0 && R681 + R679 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R684 + R682 = 0 && R685 + R683 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R689 + R686 = 0 && R690 + R687 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R694 + R692 = 0 && R695 + R693 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R699 + R696 = 0 && R700 + R697 = 0)) && (R675 + R672 != 0 || R667 + R666 + -1*R676 + -1*R673 = 0 || R667 + R666 < 1) && (R680 + R678 != 0 || R667 + R666 + -1*R681 + -1*R679 = 0 || R667 + R666 < 1) && (R684 + R682 != 0 || R667 + R666 + -1*R685 + -1*R683 = 0 || R667 + R666 < 1) && (R689 + R686 != 0 || R667 + R666 + -1*R690 + -1*R687 = 0 || R667 + R666 < 1) && (R694 + R692 != 0 || R667 + R666 + -1*R695 + -1*R693 = 0 || R667 + R666 < 1) && (R699 + R696 != 0 || R667 + R666 + -1*R700 + -1*R697 = 0 || R667 + R666 < 1) && (R44 = 0 || (R106 = 0 && R107 = 0)) && (R44 = 0 || (R108 = 0 && R109 = 0)) && (R45 = 0 || (R8090 = 0 && R8091 = 0)) && (R45 = 0 || (R8094 = 0 && R8095 = 0)) && (R45 = 0 || (R8096 = 0 && R8097 = 0)) && (R45 = 0 || (R8098 = 0 && R8099 = 0)) && (R45 = 0 || (R8100 = 0 && R8101 = 0)) && (R45 = 0 || (R8102 = 0 && R8103 = 0)) && (R45 = 0 || (R8104 = 0 && R8105 = 0)) && (R45 = 0 || (R8106 = 0 && R8107 = 0)) && (R45 = 0 || (R8108 = 0 && R8109 = 0)) && (R45 = 0 || (R8110 = 0 && R8111 = 0)) && (R45 = 0 || (R8114 = 0 && R8115 = 0)) && (R45 = 0 || (R8116 = 0 && R8117 = 0)) && (R45 = 0 || (R8118 = 0 && R8119 = 0)) && (R48 = 0 || (R8122 = 0 && R8123 = 0)) && (R48 = 0 || (R8124 = 0 && R8125 = 0)) && (R48 = 0 || (R8126 = 0 && R8127 = 0)) && (R48 = 0 || (R8128 = 0 && R8129 = 0)) && (R48 = 0 || (R8130 = 0 && R8131 = 0)) && (R48 = 0 || (R8132 = 0 && R8133 = 0)) && (R48 = 0 || (R8134 = 0 && R8135 = 0)) && (R48 = 0 || (R8136 = 0 && R8137 = 0)) && (R48 = 0 || (R8138 = 0 && R8139 = 0)) && (R48 = 0 || (R8140 = 0 && R8141 = 0)) && (R48 = 0 || (R8142 = 0 && R8143 = 0)) && (R48 = 0 || (R8144 = 0 && R8145 = 0)) && (R48 = 0 || (R8146 = 0 && R8147 = 0)) && (R48 = 0 || (R8148 = 0 && R8149 = 0)) && (R49 = 0 || (R110 = 0 && R111 = 0)) && (R49 = 0 || (R112 = 0 && R113 = 0)) && (R125 + R122 = 0 || (R123 + R120 = 0 && R124 + R121 = 0)) && (R131 + R128 = 0 || (R129 + R126 = 0 && R130 + R127 = 0)) && (R131 + R128 = 0 || (R134 + R132 = 0 && R135 + R133 = 0)) && (R131 + R128 = 0 || (R139 + R136 = 0 && R140 + R137 = 0)) && (R147 + R144 = 0 || (R145 + R142 = 0 && R146 + R143 = 0)) && (R153 + R150 = 0 || (R151 + R148 = 0 && R152 + R149 = 0)) && (R153 + R150 = 0 || (R157 + R154 = 0 && R158 + R155 = 0)) && (R675 + R672 = 0 || R667 + R666 < 1) && (R680 + R678 = 0 || R667 + R666 < 1) && (R684 + R682 = 0 || R667 + R666 < 1) && (R689 + R686 = 0 || R667 + R666 < 1) && (R694 + R692 = 0 || R667 + R666 < 1) && (R699 + R696 = 0 || R667 + R666 < 1) && (R7355 + R7352 = 0 || (R7353 + R7350 = 0 && R7354 + R7351 = 0)) && (R7361 + R7358 = 0 || (R7359 + R7356 = 0 && R7360 + R7357 = 0)) && (R7361 + R7358 = 0 || (R8025 + R8022 = 0 && R8026 + R8023 = 0));
// End of Parikh automata intersection problem
