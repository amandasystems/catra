// Parikh automata intersection problem, generated by OSTRICH+
counter int R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R21, R22, R25, R28, R31, R4026, R4027, R4028, R4029, R4030, R4031, R4032, R4033, R4034, R4035, R4036, R4037, R42, R43, R44, R45, R46, R47, R48, R49, R4918, R4919, R4920, R4921, R4922, R4923, R4924, R4925, R4926, R4927, R4928, R4929, R4930, R4931, R4932, R4933, R4934, R4935, R4936, R4937, R4938, R4939, R4940, R4941, R4942, R4943, R4944, R4945, R4946, R4947, R4948, R4949, R4950, R4951, R4952, R4953, R4954, R4955, R4956, R4957, R4958, R4959, R4960, R4961, R4962, R4963, R4964, R4965, R4966, R4967, R4968, R4969, R4970, R4971, R4972, R4973, R4974, R4975, R4976, R4977, R4978, R4979, R4980, R4981, R4982, R4983, R4984, R4985, R4986, R4987, R4988, R4989, R4990, R4991, R4992, R4993, R4994, R4995, R4996, R4997, R4998, R4999, R50, R5000, R5001, R5002, R5003, R5004, R5005, R5006, R5007, R5008, R5009, R5010, R5011, R5012, R5013, R5014, R5015, R5016, R5017, R5018, R5019, R5020, R5021, R5022, R5023, R5024, R5025, R5026, R5027, R5028, R5029, R5030, R5031, R5032, R5033, R5034, R5035, R5036, R5037, R5038, R5039, R5040, R5041, R5042, R5043, R5044, R5045, R5046, R5047, R5048, R5049, R5050, R5051, R5052, R5053, R5054, R5055, R5056, R5057, R5058, R5059, R5060, R5061, R5062, R5063, R5064, R5065, R5066, R5067, R5068, R5069, R5070, R5071, R5072, R5073, R5074, R5075, R5076, R5077, R5078, R5079, R5080, R5081, R5082, R5083, R5084, R5085, R5086, R5087, R5088, R5089, R5090, R5091, R5092, R5093, R5094, R5095, R5096, R5097, R5098, R5099, R51, R5100, R5101, R5102, R5103, R5104, R5105, R5106, R5107, R5108, R5109, R5110, R5111, R5112, R5113, R5114, R5115, R5116, R5117, R5118, R5119, R5120, R5121, R5122, R5123, R5124, R5125, R5126, R5127, R5128, R5129, R5130, R5131, R5132, R5133, R5134, R5135, R5136, R5137, R52, R53, R56, R57, R58, R59, R6, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R8, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P93
automaton P93_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R31 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R91 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [108, 108] { R91 += 1 };
  s0 -> s1 [109, 65535] { R91 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R91 += 1 };
  s2 -> s1 [0, 110] { R91 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R91 += 1 };
  s2 -> s1 [112, 65535] { R91 += 1 };
  s3 -> s1 [0, 98] { R91 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R91 += 1 };
  s3 -> s1 [100, 65535] { R91 += 1 };
  s4 -> s1 [0, 96] { R91 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R91 += 1 };
  s4 -> s1 [98, 65535] { R91 += 1 };
  s5 -> s1 [0, 107] { R91 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R91 += 1 };
  s5 -> s1 [109, 65535] { R91 += 1 };
  s6 -> s1 [0, 103] { R91 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R91 += 1 };
  s6 -> s1 [105, 65535] { R91 += 1 };
  s7 -> s1 [0, 110] { R91 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R91 += 1 };
  s7 -> s1 [112, 65535] { R91 += 1 };
  s8 -> s1 [0, 114] { R91 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R91 += 1 };
  s8 -> s1 [116, 65535] { R91 += 1 };
  s9 -> s1 [0, 115] { R91 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R91 += 1 };
  s9 -> s1 [117, 65535] { R91 += 1 };
  s10 -> s1 [0, 65535] { R91 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R113 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R4958 += 1, R4959 += 1 };
  s0 -> s1 [0, 65535] { R4959 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4959 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R4961 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R4960 += 1, R4961 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4961 += 1, R115 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 74] { R4963 += 1 };
  s0 -> s0 [0, 65535] { R4962 += 1, R4963 += 1 };
  s0 -> s2 [0, 65535] { R4963 += 1, R117 += 1 };
  s0 -> s1 [76, 65535] { R4963 += 1 };
  s1 -> s1 [0, 74] { R4963 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [76, 65535] { R4963 += 1 };
  s2 -> s1 [0, 74] { R4963 += 1 };
  s2 -> s2 [0, 65535] { R4963 += 1, R117 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R4963 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 76] { R4965 += 1 };
  s0 -> s2 [0, 65535] { R4965 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R4964 += 1, R4965 += 1 };
  s0 -> s1 [78, 65535] { R4965 += 1 };
  s1 -> s1 [0, 76] { R4965 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R4965 += 1 };
  s2 -> s1 [0, 76] { R4965 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4965 += 1, R119 += 1 };
  s2 -> s1 [78, 65535] { R4965 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R4967 += 1, R124 += 1, R125 += 1 };
  s0 -> s0 [0, 65535] { R4966 += 1, R4967 += 1 };
  s0 -> s2 [0, 65535] { R4967 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R4967 += 1, R124 += 1, R125 += 1 };
  s1 -> s4 [0, 65535] { R4967 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4967 += 1, R124 += 1, R125 += 1 };
  s2 -> s2 [0, 65535] { R4967 += 1, R123 += 1, R124 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4967 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R4968 += 1, R4969 += 1 };
  s0 -> s1 [0, 65535] { R4969 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4969 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4971 += 1, R130 += 1, R131 += 1 };
  s0 -> s2 [0, 65535] { R4971 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R4970 += 1, R4971 += 1 };
  s1 -> s4 [0, 65535] { R4971 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4971 += 1, R130 += 1, R131 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4971 += 1, R130 += 1, R131 += 1 };
  s2 -> s2 [0, 65535] { R4971 += 1, R129 += 1, R130 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4971 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R4973 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R4972 += 1, R4973 += 1 };
  s0 -> s2 [0, 65535] { R4973 += 1, R134 += 1, R135 += 1 };
  s0 -> s3 [108, 108] { R4973 += 1, R135 += 1 };
  s0 -> s1 [109, 65535] { R4973 += 1, R135 += 1 };
  s1 -> s13 [0, 65535] { R4973 += 1 };
  s1 -> s1 [0, 65535] { R4973 += 1, R135 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R4973 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4973 += 1, R134 += 1, R135 += 1 };
  s2 -> s3 [108, 108] { R4973 += 1, R135 += 1 };
  s2 -> s1 [109, 65535] { R4973 += 1, R135 += 1 };
  s3 -> s1 [0, 110] { R4973 += 1, R135 += 1 };
  s3 -> s3 [0, 65535] { R4973 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R4973 += 1, R135 += 1 };
  s3 -> s1 [112, 65535] { R4973 += 1, R135 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R4973 += 1, R135 += 1 };
  s5 -> s5 [0, 65535] { R4973 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R4973 += 1, R135 += 1 };
  s5 -> s1 [100, 65535] { R4973 += 1, R135 += 1 };
  s6 -> s1 [0, 96] { R4973 += 1, R135 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4973 += 1 };
  s6 -> s7 [97, 97] { R4973 += 1, R135 += 1 };
  s6 -> s1 [98, 65535] { R4973 += 1, R135 += 1 };
  s7 -> s1 [0, 107] { R4973 += 1, R135 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R4973 += 1 };
  s7 -> s8 [108, 108] { R4973 += 1, R135 += 1 };
  s7 -> s1 [109, 65535] { R4973 += 1, R135 += 1 };
  s8 -> s1 [0, 103] { R4973 += 1, R135 += 1 };
  s8 -> s8 [0, 65535] { R4973 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R4973 += 1, R135 += 1 };
  s8 -> s1 [105, 65535] { R4973 += 1, R135 += 1 };
  s9 -> s1 [0, 110] { R4973 += 1, R135 += 1 };
  s9 -> s9 [0, 65535] { R4973 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R4973 += 1, R135 += 1 };
  s9 -> s1 [112, 65535] { R4973 += 1, R135 += 1 };
  s10 -> s1 [0, 114] { R4973 += 1, R135 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R4973 += 1 };
  s10 -> s11 [115, 115] { R4973 += 1, R135 += 1 };
  s10 -> s1 [116, 65535] { R4973 += 1, R135 += 1 };
  s11 -> s1 [0, 115] { R4973 += 1, R135 += 1 };
  s11 -> s11 [0, 65535] { R4973 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R4973 += 1, R135 += 1 };
  s11 -> s1 [117, 65535] { R4973 += 1, R135 += 1 };
  s12 -> s1 [0, 65535] { R4973 += 1, R135 += 1 };
  s13 -> s13 [0, 65535] { R4973 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4975 += 1, R139 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R4975 += 1, R140 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R4974 += 1, R4975 += 1 };
  s1 -> s1 [0, 65535] { R4975 += 1, R139 += 1, R140 += 1 };
  s1 -> s2 [0, 65535] { R4975 += 1, R140 += 1, R141 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4975 += 1 };
  s2 -> s2 [0, 65535] { R4975 += 1, R140 += 1, R141 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4975 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R4976 += 1, R4977 += 1 };
  s0 -> s1 [0, 65535] { R4977 += 1, R145 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R4977 += 1, R146 += 1, R147 += 1 };
  s1 -> s1 [0, 65535] { R4977 += 1, R145 += 1, R146 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4977 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [0, 65535] { R4977 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4977 += 1, R146 += 1, R147 += 1 };
  s3 -> s3 [0, 65535] { R4977 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R4978 += 1, R4979 += 1 };
  s0 -> s1 [0, 65535] { R4979 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4979 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R4981 += 1, R152 += 1, R153 += 1 };
  s0 -> s2 [0, 65535] { R4981 += 1, R151 += 1, R152 += 1 };
  s0 -> s0 [0, 65535] { R4980 += 1, R4981 += 1 };
  s1 -> s4 [0, 65535] { R4981 += 1 };
  s1 -> s1 [0, 65535] { R4981 += 1, R152 += 1, R153 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4981 += 1, R152 += 1, R153 += 1 };
  s2 -> s2 [0, 65535] { R4981 += 1, R151 += 1, R152 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4981 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R4983 += 1 };
  s0 -> s0 [0, 65535] { R4982 += 1, R4983 += 1 };
  s1 -> s1 [0, 65535] { R4983 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 76] { R4985 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R4984 += 1, R4985 += 1 };
  s0 -> s2 [0, 65535] { R4985 += 1, R157 += 1, R158 += 1 };
  s0 -> s3 [77, 77] { R4985 += 1, R158 += 1, R159 += 1 };
  s0 -> s4 [77, 77] { R4985 += 1, R158 += 1, R159 += 1 };
  s0 -> s1 [78, 65535] { R4985 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 76] { R4985 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R4985 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [77, 77] { R4985 += 1, R158 += 1, R159 += 1 };
  s1 -> s4 [77, 77] { R4985 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [78, 65535] { R4985 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [0, 76] { R4985 += 1, R158 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R4985 += 1, R157 += 1, R158 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R4985 += 1, R158 += 1, R159 += 1 };
  s2 -> s4 [77, 77] { R4985 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [78, 65535] { R4985 += 1, R158 += 1, R159 += 1 };
  s3 -> s3 [0, 65535] { R4985 += 1, R158 += 1, R159 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4985 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4985 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4985 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R5019 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R5018 += 1, R5019 += 1 };
  s1 -> s1 [0, 65535] { R5019 += 1, R48 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R5021 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R5020 += 1, R5021 += 1 };
  s0 -> s2 [65, 65] { R5021 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R5021 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R5021 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R5021 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5021 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R5021 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R5021 += 1, R114 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5021 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R5023 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R5022 += 1, R5023 += 1 };
  s0 -> s2 [65, 65] { R5023 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R5023 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R5023 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R5023 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5023 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R5023 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R5023 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5023 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R5025 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R5024 += 1, R5025 += 1 };
  s0 -> s2 [65, 65] { R5025 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R5025 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R5025 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R5025 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5025 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R5025 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R5025 += 1, R118 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5025 += 1, R118 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R5027 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R5026 += 1, R5027 += 1 };
  s0 -> s2 [65, 65] { R5027 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [65, 65] { R5027 += 1, R120 += 1, R121 += 1 };
  s0 -> s1 [66, 65535] { R5027 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 64] { R5027 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5027 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [65, 65] { R5027 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [66, 65535] { R5027 += 1, R120 += 1, R121 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5027 += 1, R120 += 1, R121 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R5029 += 1 };
  s0 -> s0 [0, 65535] { R5028 += 1, R5029 += 1 };
  s0 -> s2 [65, 65] { R5029 += 1 };
  s0 -> s3 [65, 65] { R5029 += 1 };
  s0 -> s1 [66, 65535] { R5029 += 1 };
  s1 -> s1 [0, 64] { R5029 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5029 += 1 };
  s1 -> s3 [65, 65] { R5029 += 1 };
  s1 -> s1 [66, 65535] { R5029 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5029 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R5031 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R5030 += 1, R5031 += 1 };
  s0 -> s2 [65, 65] { R5031 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [65, 65] { R5031 += 1, R126 += 1, R127 += 1 };
  s0 -> s1 [66, 65535] { R5031 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 64] { R5031 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5031 += 1, R126 += 1, R127 += 1 };
  s1 -> s3 [65, 65] { R5031 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [66, 65535] { R5031 += 1, R126 += 1, R127 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5031 += 1, R126 += 1, R127 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R5033 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R5032 += 1, R5033 += 1 };
  s0 -> s2 [65, 65] { R5033 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [65, 65] { R5033 += 1, R132 += 1, R133 += 1 };
  s0 -> s1 [66, 65535] { R5033 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 64] { R5033 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5033 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [65, 65] { R5033 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [66, 65535] { R5033 += 1, R132 += 1, R133 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5033 += 1, R132 += 1, R133 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R5035 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R5034 += 1, R5035 += 1 };
  s0 -> s2 [65, 65] { R5035 += 1, R136 += 1, R137 += 1 };
  s0 -> s3 [65, 65] { R5035 += 1, R136 += 1, R137 += 1 };
  s0 -> s1 [66, 65535] { R5035 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 64] { R5035 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5035 += 1, R136 += 1, R137 += 1 };
  s1 -> s3 [65, 65] { R5035 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [66, 65535] { R5035 += 1, R136 += 1, R137 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5035 += 1, R136 += 1, R137 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R5037 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R5036 += 1, R5037 += 1 };
  s0 -> s2 [65, 65] { R5037 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R5037 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R5037 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R5037 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5037 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R5037 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R5037 += 1, R142 += 1, R143 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5037 += 1, R142 += 1, R143 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R5039 += 1 };
  s0 -> s0 [0, 65535] { R5038 += 1, R5039 += 1 };
  s0 -> s2 [65, 65] { R5039 += 1 };
  s0 -> s3 [65, 65] { R5039 += 1 };
  s0 -> s1 [66, 65535] { R5039 += 1 };
  s1 -> s1 [0, 64] { R5039 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5039 += 1 };
  s1 -> s3 [65, 65] { R5039 += 1 };
  s1 -> s1 [66, 65535] { R5039 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5039 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R5041 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R5040 += 1, R5041 += 1 };
  s0 -> s2 [65, 65] { R5041 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [65, 65] { R5041 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [66, 65535] { R5041 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 64] { R5041 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5041 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [65, 65] { R5041 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [66, 65535] { R5041 += 1, R148 += 1, R149 += 1 };
  s2 -> s2 [0, 65535] { R5041 += 1, R148 += 1, R149 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R5043 += 1 };
  s0 -> s0 [0, 65535] { R5042 += 1, R5043 += 1 };
  s0 -> s2 [65, 65] { R5043 += 1 };
  s0 -> s3 [65, 65] { R5043 += 1 };
  s0 -> s1 [66, 65535] { R5043 += 1 };
  s1 -> s1 [0, 64] { R5043 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5043 += 1 };
  s1 -> s3 [65, 65] { R5043 += 1 };
  s1 -> s1 [66, 65535] { R5043 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5043 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R5045 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R5044 += 1, R5045 += 1 };
  s0 -> s2 [65, 65] { R5045 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [65, 65] { R5045 += 1, R154 += 1, R155 += 1 };
  s0 -> s1 [66, 65535] { R5045 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 64] { R5045 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5045 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [65, 65] { R5045 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [66, 65535] { R5045 += 1, R154 += 1, R155 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5045 += 1, R154 += 1, R155 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 43] { R5047 += 1 };
  s0 -> s0 [0, 65535] { R5046 += 1, R5047 += 1 };
  s0 -> s1 [45, 45] { R5047 += 1 };
  s0 -> s2 [46, 46] { R5047 += 1 };
  s0 -> s1 [48, 62] { R5047 += 1 };
  s0 -> s3 [65, 65] { R5047 += 1 };
  s0 -> s1 [66, 65535] { R5047 += 1 };
  s1 -> s1 [0, 43] { R5047 += 1 };
  s1 -> s1 [45, 45] { R5047 += 1 };
  s1 -> s2 [46, 46] { R5047 += 1 };
  s1 -> s1 [48, 62] { R5047 += 1 };
  s1 -> s3 [65, 65] { R5047 += 1 };
  s1 -> s1 [66, 65535] { R5047 += 1 };
  s2 -> s1 [0, 43] { R5047 += 1 };
  s2 -> s1 [45, 45] { R5047 += 1 };
  s2 -> s2 [46, 46] { R5047 += 1 };
  s2 -> s1 [48, 62] { R5047 += 1 };
  s2 -> s3 [65, 65] { R5047 += 1 };
  s2 -> s1 [66, 114] { R5047 += 1 };
  s2 -> s8 [115, 115] { R5047 += 1 };
  s2 -> s1 [116, 65535] { R5047 += 1 };
  s3 -> s3 [0, 43] { R5047 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R5047 += 1 };
  s3 -> s4 [46, 46] { R5047 += 1 };
  s3 -> s3 [48, 62] { R5047 += 1 };
  s3 -> s3 [65, 65535] { R5047 += 1 };
  s4 -> s3 [0, 43] { R5047 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R5047 += 1 };
  s4 -> s4 [46, 46] { R5047 += 1 };
  s4 -> s3 [48, 62] { R5047 += 1 };
  s4 -> s3 [65, 114] { R5047 += 1 };
  s4 -> s5 [115, 115] { R5047 += 1 };
  s4 -> s3 [116, 65535] { R5047 += 1 };
  s5 -> s3 [0, 43] { R5047 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R5047 += 1 };
  s5 -> s4 [46, 46] { R5047 += 1 };
  s5 -> s3 [48, 62] { R5047 += 1 };
  s5 -> s3 [65, 110] { R5047 += 1 };
  s5 -> s6 [111, 111] { R5047 += 1 };
  s5 -> s3 [112, 65535] { R5047 += 1 };
  s6 -> s3 [0, 43] { R5047 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R5047 += 1 };
  s6 -> s4 [46, 46] { R5047 += 1 };
  s6 -> s3 [48, 62] { R5047 += 1 };
  s6 -> s3 [65, 98] { R5047 += 1 };
  s6 -> s7 [99, 99] { R5047 += 1 };
  s6 -> s3 [100, 65535] { R5047 += 1 };
  s7 -> s3 [0, 43] { R5047 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R5047 += 1 };
  s7 -> s4 [46, 46] { R5047 += 1 };
  s7 -> s3 [48, 62] { R5047 += 1 };
  s7 -> s3 [65, 106] { R5047 += 1 };
  s7 -> s3 [108, 65535] { R5047 += 1 };
  s8 -> s1 [0, 43] { R5047 += 1 };
  s8 -> s1 [45, 45] { R5047 += 1 };
  s8 -> s2 [46, 46] { R5047 += 1 };
  s8 -> s1 [48, 62] { R5047 += 1 };
  s8 -> s3 [65, 65] { R5047 += 1 };
  s8 -> s1 [66, 110] { R5047 += 1 };
  s8 -> s9 [111, 111] { R5047 += 1 };
  s8 -> s1 [112, 65535] { R5047 += 1 };
  s9 -> s1 [0, 43] { R5047 += 1 };
  s9 -> s1 [45, 45] { R5047 += 1 };
  s9 -> s2 [46, 46] { R5047 += 1 };
  s9 -> s1 [48, 62] { R5047 += 1 };
  s9 -> s3 [65, 65] { R5047 += 1 };
  s9 -> s1 [66, 98] { R5047 += 1 };
  s9 -> s10 [99, 99] { R5047 += 1 };
  s9 -> s1 [100, 65535] { R5047 += 1 };
  s10 -> s1 [0, 43] { R5047 += 1 };
  s10 -> s1 [45, 45] { R5047 += 1 };
  s10 -> s2 [46, 46] { R5047 += 1 };
  s10 -> s1 [48, 62] { R5047 += 1 };
  s10 -> s3 [65, 65] { R5047 += 1 };
  s10 -> s1 [66, 106] { R5047 += 1 };
  s10 -> s1 [108, 65535] { R5047 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R5048 += 1, R5049 += 1 };
  s0 -> s1 [0, 65535] { R5049 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5049 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 57] { R5051 += 1 };
  s0 -> s0 [0, 65535] { R5050 += 1, R5051 += 1 };
  s0 -> s2 [0, 65535] { R5051 += 1, R21 += 1 };
  s0 -> s3 [58, 58] { R5051 += 1 };
  s0 -> s1 [59, 65535] { R5051 += 1 };
  s1 -> s1 [0, 57] { R5051 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R5051 += 1 };
  s1 -> s1 [59, 65535] { R5051 += 1 };
  s2 -> s1 [0, 57] { R5051 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5051 += 1, R21 += 1 };
  s2 -> s3 [58, 58] { R5051 += 1 };
  s2 -> s1 [59, 65535] { R5051 += 1 };
  s3 -> s3 [0, 65535] { R5051 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 42] { R5053 += 1 };
  s0 -> s2 [0, 65535] { R5053 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R5052 += 1, R5053 += 1 };
  s0 -> s3 [43, 43] { R5053 += 1 };
  s0 -> s1 [44, 65535] { R5053 += 1 };
  s1 -> s1 [0, 42] { R5053 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R5053 += 1 };
  s1 -> s1 [44, 65535] { R5053 += 1 };
  s2 -> s1 [0, 42] { R5053 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5053 += 1, R22 += 1 };
  s2 -> s3 [43, 43] { R5053 += 1 };
  s2 -> s1 [44, 65535] { R5053 += 1 };
  s3 -> s3 [0, 65535] { R5053 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R5055 += 1 };
  s0 -> s2 [0, 65535] { R5055 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R5054 += 1, R5055 += 1 };
  s0 -> s3 [65, 65] { R5055 += 1 };
  s0 -> s1 [66, 65535] { R5055 += 1 };
  s1 -> s1 [0, 64] { R5055 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R5055 += 1 };
  s1 -> s1 [66, 65535] { R5055 += 1 };
  s2 -> s1 [0, 64] { R5055 += 1 };
  s2 -> s2 [0, 65535] { R5055 += 1, R25 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R5055 += 1 };
  s2 -> s1 [66, 65535] { R5055 += 1 };
  s3 -> s3 [0, 65535] { R5055 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 90] { R5057 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R5057 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R5056 += 1, R5057 += 1 };
  s0 -> s3 [91, 91] { R5057 += 1, R51 += 1 };
  s0 -> s1 [92, 65535] { R5057 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5057 += 1, R51 += 1 };
  s1 -> s5 [0, 65535] { R5057 += 1 };
  s2 -> s1 [0, 90] { R5057 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5057 += 1, R50 += 1, R51 += 1 };
  s2 -> s3 [91, 91] { R5057 += 1, R51 += 1 };
  s2 -> s1 [92, 65535] { R5057 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R5057 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5057 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 65535] { R5059 += 1, R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R5059 += 1, R53 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R5058 += 1, R5059 += 1 };
  s1 -> s1 [0, 65535] { R5059 += 1, R52 += 1, R53 += 1 };
  s1 -> s2 [0, 65535] { R5059 += 1, R53 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5059 += 1, R53 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5059 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5059 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R5060 += 1, R5061 += 1 };
  s0 -> s1 [0, 65535] { R5061 += 1, R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R5061 += 1, R83 += 1, R42 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5061 += 1, R82 += 1, R83 += 1 };
  s1 -> s2 [0, 65535] { R5061 += 1, R83 += 1, R42 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5061 += 1, R83 += 1, R42 += 1 };
  s2 -> s4 [0, 65535] { R5061 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5061 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 107] { R5063 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R5062 += 1, R5063 += 1 };
  s0 -> s2 [0, 65535] { R5063 += 1, R84 += 1, R85 += 1 };
  s0 -> s3 [108, 108] { R5063 += 1, R85 += 1 };
  s0 -> s1 [109, 65535] { R5063 += 1, R85 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5063 += 1, R85 += 1 };
  s1 -> s13 [0, 65535] { R5063 += 1 };
  s2 -> s1 [0, 107] { R5063 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5063 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [108, 108] { R5063 += 1, R85 += 1 };
  s2 -> s1 [109, 65535] { R5063 += 1, R85 += 1 };
  s3 -> s1 [0, 110] { R5063 += 1, R85 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5063 += 1 };
  s3 -> s5 [111, 111] { R5063 += 1, R85 += 1 };
  s3 -> s1 [112, 65535] { R5063 += 1, R85 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R5063 += 1, R85 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5063 += 1 };
  s5 -> s6 [99, 99] { R5063 += 1, R85 += 1 };
  s5 -> s1 [100, 65535] { R5063 += 1, R85 += 1 };
  s6 -> s1 [0, 96] { R5063 += 1, R85 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R5063 += 1 };
  s6 -> s7 [97, 97] { R5063 += 1, R85 += 1 };
  s6 -> s1 [98, 65535] { R5063 += 1, R85 += 1 };
  s7 -> s1 [0, 107] { R5063 += 1, R85 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R5063 += 1 };
  s7 -> s8 [108, 108] { R5063 += 1, R85 += 1 };
  s7 -> s1 [109, 65535] { R5063 += 1, R85 += 1 };
  s8 -> s1 [0, 103] { R5063 += 1, R85 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R5063 += 1 };
  s8 -> s9 [104, 104] { R5063 += 1, R85 += 1 };
  s8 -> s1 [105, 65535] { R5063 += 1, R85 += 1 };
  s9 -> s1 [0, 110] { R5063 += 1, R85 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R5063 += 1 };
  s9 -> s10 [111, 111] { R5063 += 1, R85 += 1 };
  s9 -> s1 [112, 65535] { R5063 += 1, R85 += 1 };
  s10 -> s1 [0, 114] { R5063 += 1, R85 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R5063 += 1 };
  s10 -> s11 [115, 115] { R5063 += 1, R85 += 1 };
  s10 -> s1 [116, 65535] { R5063 += 1, R85 += 1 };
  s11 -> s1 [0, 115] { R5063 += 1, R85 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R5063 += 1 };
  s11 -> s12 [116, 116] { R5063 += 1, R85 += 1 };
  s11 -> s1 [117, 65535] { R5063 += 1, R85 += 1 };
  s12 -> s1 [0, 65535] { R5063 += 1, R85 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R5063 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R5064 += 1, R5065 += 1 };
  s0 -> s1 [0, 65535] { R5065 += 1, R87 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R5065 += 1, R86 += 1, R87 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5065 += 1, R87 += 1, R57 += 1 };
  s1 -> s4 [0, 65535] { R5065 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5065 += 1, R87 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R5065 += 1, R86 += 1, R87 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5065 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R5066 += 1, R5067 += 1 };
  s0 -> s1 [0, 65535] { R5067 += 1, R106 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R5067 += 1, R107 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R5067 += 1, R106 += 1, R107 += 1 };
  s1 -> s2 [0, 65535] { R5067 += 1, R107 += 1, R44 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5067 += 1 };
  s2 -> s2 [0, 65535] { R5067 += 1, R107 += 1, R44 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5067 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R5068 += 1, R5069 += 1 };
  s0 -> s1 [0, 65535] { R5069 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5069 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 42] { R5071 += 1, R109 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R5071 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R5070 += 1, R5071 += 1 };
  s0 -> s3 [43, 43] { R5071 += 1, R109 += 1, R56 += 1 };
  s0 -> s4 [43, 43] { R5071 += 1, R109 += 1, R56 += 1 };
  s0 -> s1 [44, 65535] { R5071 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [0, 42] { R5071 += 1, R109 += 1, R56 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5071 += 1 };
  s1 -> s3 [43, 43] { R5071 += 1, R109 += 1, R56 += 1 };
  s1 -> s4 [43, 43] { R5071 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [44, 65535] { R5071 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [0, 42] { R5071 += 1, R109 += 1, R56 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5071 += 1, R108 += 1, R109 += 1 };
  s2 -> s3 [43, 43] { R5071 += 1, R109 += 1, R56 += 1 };
  s2 -> s4 [43, 43] { R5071 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [44, 65535] { R5071 += 1, R109 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R5071 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5071 += 1, R109 += 1, R56 += 1 };
  s4 -> s6 [0, 65535] { R5071 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5071 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R5073 += 1, R4925 += 1 };
  s0 -> s2 [0, 65535] { R5073 += 1, R4924 += 1, R4925 += 1 };
  s0 -> s0 [0, 65535] { R5072 += 1, R5073 += 1 };
  s0 -> s1 [66, 65535] { R5073 += 1, R4925 += 1 };
  s1 -> s1 [0, 64] { R5073 += 1, R4925 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5073 += 1 };
  s1 -> s1 [66, 65535] { R5073 += 1, R4925 += 1 };
  s2 -> s1 [0, 64] { R5073 += 1, R4925 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5073 += 1, R4924 += 1, R4925 += 1 };
  s2 -> s1 [66, 65535] { R5073 += 1, R4925 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R5075 += 1, R4927 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R5075 += 1, R4926 += 1, R4927 += 1 };
  s0 -> s0 [0, 65535] { R5074 += 1, R5075 += 1 };
  s1 -> s1 [0, 65535] { R5075 += 1, R4927 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R5075 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5075 += 1, R4927 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R5075 += 1, R4926 += 1, R4927 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5075 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R5077 += 1, R4929 += 1 };
  s0 -> s0 [0, 65535] { R5076 += 1, R5077 += 1 };
  s0 -> s2 [0, 65535] { R5077 += 1, R4928 += 1, R4929 += 1 };
  s0 -> s1 [80, 65535] { R5077 += 1, R4929 += 1 };
  s1 -> s1 [0, 65] { R5077 += 1, R4929 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5077 += 1 };
  s1 -> s1 [80, 65535] { R5077 += 1, R4929 += 1 };
  s2 -> s1 [0, 65] { R5077 += 1, R4929 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5077 += 1, R4928 += 1, R4929 += 1 };
  s2 -> s1 [80, 65535] { R5077 += 1, R4929 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s0 [0, 65535] { R5078 += 1, R5079 += 1 };
  s0 -> s1 [0, 65535] { R5079 += 1, R4931 += 1, R667 += 1 };
  s0 -> s2 [0, 65535] { R5079 += 1, R4930 += 1, R4931 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5079 += 1, R4931 += 1, R667 += 1 };
  s1 -> s4 [0, 65535] { R5079 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5079 += 1, R4931 += 1, R667 += 1 };
  s2 -> s2 [0, 65535] { R5079 += 1, R4930 += 1, R4931 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5079 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 81] { R5081 += 1, R4933 += 1 };
  s0 -> s2 [0, 65535] { R5081 += 1, R4932 += 1, R4933 += 1 };
  s0 -> s3 [0, 65535] { R5081 += 1, R4933 += 1, R669 += 1 };
  s0 -> s0 [0, 65535] { R5080 += 1, R5081 += 1 };
  s0 -> s1 [83, 65535] { R5081 += 1, R4933 += 1 };
  s1 -> s1 [0, 81] { R5081 += 1, R4933 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5081 += 1 };
  s1 -> s1 [83, 65535] { R5081 += 1, R4933 += 1 };
  s2 -> s1 [0, 81] { R5081 += 1, R4933 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5081 += 1, R4932 += 1, R4933 += 1 };
  s2 -> s3 [0, 65535] { R5081 += 1, R4933 += 1, R669 += 1 };
  s2 -> s1 [83, 65535] { R5081 += 1, R4933 += 1 };
  s3 -> s1 [0, 81] { R5081 += 1, R4933 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5081 += 1, R4933 += 1, R669 += 1 };
  s3 -> s5 [0, 65535] { R5081 += 1 };
  s3 -> s1 [83, 65535] { R5081 += 1, R4933 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5081 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 79] { R5083 += 1, R4935 += 1 };
  s0 -> s0 [0, 65535] { R5082 += 1, R5083 += 1 };
  s0 -> s2 [0, 65535] { R5083 += 1, R4935 += 1, R671 += 1 };
  s0 -> s3 [0, 65535] { R5083 += 1, R4934 += 1, R4935 += 1 };
  s0 -> s1 [81, 65535] { R5083 += 1, R4935 += 1 };
  s1 -> s1 [0, 79] { R5083 += 1, R4935 += 1 };
  s1 -> s1 [0, 65535] { R5083 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R5083 += 1, R4935 += 1 };
  s2 -> s1 [0, 79] { R5083 += 1, R4935 += 1 };
  s2 -> s5 [0, 65535] { R5083 += 1 };
  s2 -> s2 [0, 65535] { R5083 += 1, R4935 += 1, R671 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R5083 += 1, R4935 += 1 };
  s3 -> s1 [0, 79] { R5083 += 1, R4935 += 1 };
  s3 -> s2 [0, 65535] { R5083 += 1, R4935 += 1, R671 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5083 += 1, R4934 += 1, R4935 += 1 };
  s3 -> s1 [81, 65535] { R5083 += 1, R4935 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5083 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R5085 += 1, R4937 += 1, R675 += 1, R676 += 1 };
  s0 -> s2 [0, 65535] { R5085 += 1, R4936 += 1, R4937 += 1 };
  s0 -> s0 [0, 65535] { R5084 += 1, R5085 += 1 };
  s0 -> s3 [0, 65535] { R5085 += 1, R4937 += 1, R676 += 1, R677 += 1 };
  s1 -> s4 [0, 65535] { R5085 += 1 };
  s1 -> s1 [0, 65535] { R5085 += 1, R4937 += 1, R675 += 1, R676 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R5085 += 1, R4937 += 1, R676 += 1, R677 += 1 };
  s2 -> s1 [0, 65535] { R5085 += 1, R4937 += 1, R675 += 1, R676 += 1 };
  s2 -> s2 [0, 65535] { R5085 += 1, R4936 += 1, R4937 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R5085 += 1, R4937 += 1, R676 += 1, R677 += 1 };
  s3 -> s4 [0, 65535] { R5085 += 1 };
  s3 -> s5 [0, 65535] { R5085 += 1, R4937 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R5085 += 1, R4937 += 1, R676 += 1, R677 += 1 };
  s4 -> s4 [0, 65535] { R5085 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R5085 += 1 };
  s5 -> s5 [0, 65535] { R5085 += 1, R4937 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 107] { R5087 += 1, R4939 += 1, R681 += 1 };
  s0 -> s2 [0, 65535] { R5087 += 1, R4939 += 1, R680 += 1, R681 += 1 };
  s0 -> s3 [0, 65535] { R5087 += 1, R4938 += 1, R4939 += 1 };
  s0 -> s0 [0, 65535] { R5086 += 1, R5087 += 1 };
  s0 -> s4 [108, 108] { R5087 += 1, R4939 += 1, R681 += 1 };
  s0 -> s1 [109, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R5087 += 1 };
  s1 -> s15 [0, 65535] { R5087 += 1, R4939 += 1 };
  s1 -> s1 [0, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s2 -> s1 [0, 107] { R5087 += 1, R4939 += 1, R681 += 1 };
  s2 -> s2 [0, 65535] { R5087 += 1, R4939 += 1, R680 += 1, R681 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R5087 += 1 };
  s2 -> s4 [108, 108] { R5087 += 1, R4939 += 1, R681 += 1 };
  s2 -> s1 [109, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s3 -> s1 [0, 107] { R5087 += 1, R4939 += 1, R681 += 1 };
  s3 -> s2 [0, 65535] { R5087 += 1, R4939 += 1, R680 += 1, R681 += 1 };
  s3 -> s3 [0, 65535] { R5087 += 1, R4938 += 1, R4939 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [108, 108] { R5087 += 1, R4939 += 1, R681 += 1 };
  s3 -> s1 [109, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s4 -> s1 [0, 110] { R5087 += 1, R4939 += 1, R681 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5087 += 1, R4939 += 1 };
  s4 -> s6 [0, 65535] { R5087 += 1 };
  s4 -> s7 [111, 111] { R5087 += 1, R4939 += 1, R681 += 1 };
  s4 -> s1 [112, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5087 += 1 };
  s7 -> s1 [0, 98] { R5087 += 1, R4939 += 1, R681 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R5087 += 1 };
  s7 -> s7 [0, 65535] { R5087 += 1, R4939 += 1 };
  s7 -> s8 [99, 99] { R5087 += 1, R4939 += 1, R681 += 1 };
  s7 -> s1 [100, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s8 -> s1 [0, 96] { R5087 += 1, R4939 += 1, R681 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R5087 += 1 };
  s8 -> s8 [0, 65535] { R5087 += 1, R4939 += 1 };
  s8 -> s9 [97, 97] { R5087 += 1, R4939 += 1, R681 += 1 };
  s8 -> s1 [98, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s9 -> s1 [0, 107] { R5087 += 1, R4939 += 1, R681 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R5087 += 1 };
  s9 -> s9 [0, 65535] { R5087 += 1, R4939 += 1 };
  s9 -> s10 [108, 108] { R5087 += 1, R4939 += 1, R681 += 1 };
  s9 -> s1 [109, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s10 -> s1 [0, 103] { R5087 += 1, R4939 += 1, R681 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R5087 += 1 };
  s10 -> s10 [0, 65535] { R5087 += 1, R4939 += 1 };
  s10 -> s11 [104, 104] { R5087 += 1, R4939 += 1, R681 += 1 };
  s10 -> s1 [105, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s11 -> s1 [0, 110] { R5087 += 1, R4939 += 1, R681 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R5087 += 1 };
  s11 -> s11 [0, 65535] { R5087 += 1, R4939 += 1 };
  s11 -> s12 [111, 111] { R5087 += 1, R4939 += 1, R681 += 1 };
  s11 -> s1 [112, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s12 -> s1 [0, 114] { R5087 += 1, R4939 += 1, R681 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R5087 += 1, R4939 += 1 };
  s12 -> s6 [0, 65535] { R5087 += 1 };
  s12 -> s13 [115, 115] { R5087 += 1, R4939 += 1, R681 += 1 };
  s12 -> s1 [116, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s13 -> s1 [0, 115] { R5087 += 1, R4939 += 1, R681 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R5087 += 1, R4939 += 1 };
  s13 -> s6 [0, 65535] { R5087 += 1 };
  s13 -> s14 [116, 116] { R5087 += 1, R4939 += 1, R681 += 1 };
  s13 -> s1 [117, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s14 -> s1 [0, 65535] { R5087 += 1, R4939 += 1, R681 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s6 [0, 65535] { R5087 += 1 };
  s15 -> s15 [0, 65535] { R5087 += 1, R4939 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 79] { R5089 += 1, R4941 += 1, R685 += 1 };
  s0 -> s0 [0, 65535] { R5088 += 1, R5089 += 1 };
  s0 -> s2 [0, 65535] { R5089 += 1, R4941 += 1, R684 += 1, R685 += 1 };
  s0 -> s3 [0, 65535] { R5089 += 1, R4940 += 1, R4941 += 1 };
  s0 -> s1 [81, 65535] { R5089 += 1, R4941 += 1, R685 += 1 };
  s1 -> s1 [0, 79] { R5089 += 1, R4941 += 1, R685 += 1 };
  s1 -> s1 [0, 65535] { R5089 += 1, R4941 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5089 += 1 };
  s1 -> s1 [81, 65535] { R5089 += 1, R4941 += 1, R685 += 1 };
  s2 -> s1 [0, 79] { R5089 += 1, R4941 += 1, R685 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5089 += 1 };
  s2 -> s2 [0, 65535] { R5089 += 1, R4941 += 1, R684 += 1, R685 += 1 };
  s2 -> s1 [81, 65535] { R5089 += 1, R4941 += 1, R685 += 1 };
  s3 -> s1 [0, 79] { R5089 += 1, R4941 += 1, R685 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R5089 += 1, R4941 += 1, R684 += 1, R685 += 1 };
  s3 -> s3 [0, 65535] { R5089 += 1, R4940 += 1, R4941 += 1 };
  s3 -> s1 [81, 65535] { R5089 += 1, R4941 += 1, R685 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5089 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s0 [0, 65535] { R5090 += 1, R5091 += 1 };
  s0 -> s1 [0, 65535] { R5091 += 1, R4942 += 1, R4943 += 1 };
  s0 -> s2 [0, 65535] { R5091 += 1, R4943 += 1, R690 += 1, R691 += 1 };
  s0 -> s3 [0, 65535] { R5091 += 1, R4943 += 1, R689 += 1, R690 += 1 };
  s1 -> s1 [0, 65535] { R5091 += 1, R4942 += 1, R4943 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R5091 += 1, R4943 += 1, R690 += 1, R691 += 1 };
  s1 -> s3 [0, 65535] { R5091 += 1, R4943 += 1, R689 += 1, R690 += 1 };
  s2 -> s4 [0, 65535] { R5091 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5091 += 1, R4943 += 1, R690 += 1, R691 += 1 };
  s2 -> s6 [0, 65535] { R5091 += 1, R4943 += 1 };
  s3 -> s4 [0, 65535] { R5091 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R5091 += 1, R4943 += 1, R690 += 1, R691 += 1 };
  s3 -> s3 [0, 65535] { R5091 += 1, R4943 += 1, R689 += 1, R690 += 1 };
  s4 -> s4 [0, 65535] { R5091 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R5091 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5091 += 1, R4943 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s0 -> s2 [0, 65535] { R5093 += 1, R4944 += 1, R4945 += 1 };
  s0 -> s3 [0, 65535] { R5093 += 1, R4945 += 1, R694 += 1, R695 += 1 };
  s0 -> s0 [0, 65535] { R5092 += 1, R5093 += 1 };
  s0 -> s1 [91, 107] { R5093 += 1, R4945 += 1, R695 += 1 };
  s0 -> s4 [108, 108] { R5093 += 1, R4945 += 1, R695 += 1 };
  s0 -> s1 [109, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s1 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s1 -> s1 [0, 65535] { R5093 += 1, R4945 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R5093 += 1 };
  s1 -> s1 [91, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s2 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s2 -> s2 [0, 65535] { R5093 += 1, R4944 += 1, R4945 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R5093 += 1, R4945 += 1, R694 += 1, R695 += 1 };
  s2 -> s1 [91, 107] { R5093 += 1, R4945 += 1, R695 += 1 };
  s2 -> s4 [108, 108] { R5093 += 1, R4945 += 1, R695 += 1 };
  s2 -> s1 [109, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s3 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5093 += 1 };
  s3 -> s3 [0, 65535] { R5093 += 1, R4945 += 1, R694 += 1, R695 += 1 };
  s3 -> s1 [91, 107] { R5093 += 1, R4945 += 1, R695 += 1 };
  s3 -> s4 [108, 108] { R5093 += 1, R4945 += 1, R695 += 1 };
  s3 -> s1 [109, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s4 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s4 -> s4 [0, 65535] { R5093 += 1, R4945 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5093 += 1 };
  s4 -> s1 [91, 110] { R5093 += 1, R4945 += 1, R695 += 1 };
  s4 -> s7 [111, 111] { R5093 += 1, R4945 += 1, R695 += 1 };
  s4 -> s1 [112, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5093 += 1 };
  s7 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R5093 += 1, R4945 += 1 };
  s7 -> s6 [0, 65535] { R5093 += 1 };
  s7 -> s1 [91, 98] { R5093 += 1, R4945 += 1, R695 += 1 };
  s7 -> s8 [99, 99] { R5093 += 1, R4945 += 1, R695 += 1 };
  s7 -> s1 [100, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s8 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R5093 += 1 };
  s8 -> s8 [0, 65535] { R5093 += 1, R4945 += 1 };
  s8 -> s1 [91, 96] { R5093 += 1, R4945 += 1, R695 += 1 };
  s8 -> s9 [97, 97] { R5093 += 1, R4945 += 1, R695 += 1 };
  s8 -> s1 [98, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s9 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s9 -> s9 [0, 65535] { R5093 += 1, R4945 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R5093 += 1 };
  s9 -> s1 [91, 107] { R5093 += 1, R4945 += 1, R695 += 1 };
  s9 -> s10 [108, 108] { R5093 += 1, R4945 += 1, R695 += 1 };
  s9 -> s1 [109, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s10 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s10 -> s10 [0, 65535] { R5093 += 1, R4945 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R5093 += 1 };
  s10 -> s1 [91, 103] { R5093 += 1, R4945 += 1, R695 += 1 };
  s10 -> s11 [104, 104] { R5093 += 1, R4945 += 1, R695 += 1 };
  s10 -> s1 [105, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s11 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R5093 += 1 };
  s11 -> s11 [0, 65535] { R5093 += 1, R4945 += 1 };
  s11 -> s1 [91, 110] { R5093 += 1, R4945 += 1, R695 += 1 };
  s11 -> s12 [111, 111] { R5093 += 1, R4945 += 1, R695 += 1 };
  s11 -> s1 [112, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s12 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R5093 += 1 };
  s12 -> s12 [0, 65535] { R5093 += 1, R4945 += 1 };
  s12 -> s1 [91, 114] { R5093 += 1, R4945 += 1, R695 += 1 };
  s12 -> s13 [115, 115] { R5093 += 1, R4945 += 1, R695 += 1 };
  s12 -> s1 [116, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s13 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R5093 += 1 };
  s13 -> s13 [0, 65535] { R5093 += 1, R4945 += 1 };
  s13 -> s1 [91, 115] { R5093 += 1, R4945 += 1, R695 += 1 };
  s13 -> s14 [116, 116] { R5093 += 1, R4945 += 1, R695 += 1 };
  s13 -> s1 [117, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  s14 -> s1 [0, 80] { R5093 += 1, R4945 += 1, R695 += 1 };
  s14 -> s1 [91, 65535] { R5093 += 1, R4945 += 1, R695 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R5095 += 1, R4946 += 1, R4947 += 1 };
  s0 -> s0 [0, 65535] { R5094 += 1, R5095 += 1 };
  s0 -> s2 [0, 65535] { R5095 += 1, R4947 += 1, R699 += 1, R700 += 1 };
  s0 -> s3 [0, 65535] { R5095 += 1, R4947 += 1, R700 += 1, R701 += 1 };
  s1 -> s1 [0, 65535] { R5095 += 1, R4946 += 1, R4947 += 1 };
  s1 -> s2 [0, 65535] { R5095 += 1, R4947 += 1, R699 += 1, R700 += 1 };
  s1 -> s3 [0, 65535] { R5095 += 1, R4947 += 1, R700 += 1, R701 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5095 += 1, R4947 += 1, R699 += 1, R700 += 1 };
  s2 -> s5 [0, 65535] { R5095 += 1 };
  s2 -> s3 [0, 65535] { R5095 += 1, R4947 += 1, R700 += 1, R701 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R5095 += 1, R4947 += 1 };
  s3 -> s5 [0, 65535] { R5095 += 1 };
  s3 -> s3 [0, 65535] { R5095 += 1, R4947 += 1, R700 += 1, R701 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5095 += 1, R4947 += 1 };
  s4 -> s5 [0, 65535] { R5095 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5095 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R5097 += 1, R4948 += 1, R4949 += 1 };
  s0 -> s0 [0, 65535] { R5096 += 1, R5097 += 1 };
  s0 -> s2 [0, 65535] { R5097 += 1, R4949 += 1, R4030 += 1, R4031 += 1 };
  s0 -> s3 [0, 65535] { R5097 += 1, R4949 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5097 += 1, R4948 += 1, R4949 += 1 };
  s1 -> s2 [0, 65535] { R5097 += 1, R4949 += 1, R4030 += 1, R4031 += 1 };
  s1 -> s3 [0, 65535] { R5097 += 1, R4949 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5097 += 1 };
  s2 -> s2 [0, 65535] { R5097 += 1, R4949 += 1, R4030 += 1, R4031 += 1 };
  s2 -> s3 [0, 65535] { R5097 += 1, R4949 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5097 += 1 };
  s3 -> s3 [0, 65535] { R5097 += 1, R4949 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5097 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 65535] { R5099 += 1, R4950 += 1, R4951 += 1 };
  s0 -> s2 [0, 65535] { R5099 += 1, R4951 += 1 };
  s0 -> s0 [0, 65535] { R5098 += 1, R5099 += 1 };
  s1 -> s1 [0, 65535] { R5099 += 1, R4950 += 1, R4951 += 1 };
  s1 -> s2 [0, 65535] { R5099 += 1, R4951 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5099 += 1, R4951 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5099 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5099 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s0 [0, 65535] { R5100 += 1, R5101 += 1 };
  s0 -> s1 [0, 65535] { R5101 += 1, R4953 += 1, R4036 += 1, R4037 += 1 };
  s0 -> s2 [0, 65535] { R5101 += 1, R4952 += 1, R4953 += 1 };
  s0 -> s3 [0, 65535] { R5101 += 1, R4953 += 1, R4035 += 1, R4036 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5101 += 1 };
  s1 -> s1 [0, 65535] { R5101 += 1, R4953 += 1, R4036 += 1, R4037 += 1 };
  s1 -> s6 [0, 65535] { R5101 += 1, R4953 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R5101 += 1, R4953 += 1, R4036 += 1, R4037 += 1 };
  s2 -> s2 [0, 65535] { R5101 += 1, R4952 += 1, R4953 += 1 };
  s2 -> s3 [0, 65535] { R5101 += 1, R4953 += 1, R4035 += 1, R4036 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5101 += 1 };
  s3 -> s1 [0, 65535] { R5101 += 1, R4953 += 1, R4036 += 1, R4037 += 1 };
  s3 -> s3 [0, 65535] { R5101 += 1, R4953 += 1, R4035 += 1, R4036 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5101 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R5101 += 1 };
  s6 -> s6 [0, 65535] { R5101 += 1, R4953 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 65535] { R5103 += 1, R4954 += 1, R4955 += 1 };
  s0 -> s0 [0, 65535] { R5102 += 1, R5103 += 1 };
  s0 -> s2 [0, 65535] { R5103 += 1, R4955 += 1 };
  s1 -> s1 [0, 65535] { R5103 += 1, R4954 += 1, R4955 += 1 };
  s1 -> s2 [0, 65535] { R5103 += 1, R4955 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5103 += 1 };
  s2 -> s2 [0, 65535] { R5103 += 1, R4955 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5103 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 65535] { R5105 += 1, R4956 += 1, R4957 += 1 };
  s0 -> s2 [0, 65535] { R5105 += 1, R4957 += 1 };
  s0 -> s0 [0, 65535] { R5104 += 1, R5105 += 1 };
  s1 -> s1 [0, 65535] { R5105 += 1, R4956 += 1, R4957 += 1 };
  s1 -> s2 [0, 65535] { R5105 += 1, R4957 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5105 += 1 };
  s2 -> s2 [0, 65535] { R5105 += 1, R4957 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5105 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 65535] { R5107 += 1, R4986 += 1, R4987 += 1 };
  s0 -> s2 [0, 65535] { R5107 += 1, R4987 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R5106 += 1, R5107 += 1 };
  s1 -> s1 [0, 65535] { R5107 += 1, R4986 += 1, R4987 += 1 };
  s1 -> s2 [0, 65535] { R5107 += 1, R4987 += 1, R45 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5107 += 1, R4987 += 1, R45 += 1 };
  s2 -> s3 [0, 65535] { R5107 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5107 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R5109 += 1, R4989 += 1 };
  s0 -> s2 [0, 65535] { R5109 += 1, R4988 += 1, R4989 += 1 };
  s0 -> s0 [0, 65535] { R5108 += 1, R5109 += 1 };
  s0 -> s3 [65, 65] { R5109 += 1, R4989 += 1 };
  s0 -> s4 [65, 65] { R5109 += 1, R4989 += 1 };
  s0 -> s5 [80, 80] { R5109 += 1, R4989 += 1 };
  s0 -> s1 [81, 65535] { R5109 += 1, R4989 += 1 };
  s1 -> s1 [0, 64] { R5109 += 1, R4989 += 1 };
  s1 -> s3 [65, 65] { R5109 += 1, R4989 += 1 };
  s1 -> s4 [65, 65] { R5109 += 1, R4989 += 1 };
  s1 -> s5 [80, 80] { R5109 += 1, R4989 += 1 };
  s1 -> s1 [81, 65535] { R5109 += 1, R4989 += 1 };
  s2 -> s1 [0, 64] { R5109 += 1, R4989 += 1 };
  s2 -> s2 [0, 65535] { R5109 += 1, R4988 += 1, R4989 += 1 };
  s2 -> s3 [65, 65] { R5109 += 1, R4989 += 1 };
  s2 -> s4 [65, 65] { R5109 += 1, R4989 += 1 };
  s2 -> s5 [80, 80] { R5109 += 1, R4989 += 1 };
  s2 -> s1 [81, 65535] { R5109 += 1, R4989 += 1 };
  s3 -> s3 [0, 65] { R5109 += 1, R4989 += 1 };
  s3 -> s8 [80, 80] { R5109 += 1, R4989 += 1 };
  s3 -> s3 [81, 65535] { R5109 += 1, R4989 += 1 };
  s5 -> s5 [0, 64] { R5109 += 1, R4989 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5109 += 1 };
  s5 -> s7 [65, 65] { R5109 += 1, R4989 += 1 };
  s5 -> s8 [65, 65] { R5109 += 1, R4989 += 1 };
  s5 -> s5 [80, 65535] { R5109 += 1, R4989 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5109 += 1 };
  s8 -> s8 [0, 65] { R5109 += 1, R4989 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5109 += 1 };
  s8 -> s8 [80, 65535] { R5109 += 1, R4989 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R5111 += 1, R4991 += 1, R666 += 1 };
  s0 -> s2 [0, 65535] { R5111 += 1, R4990 += 1, R4991 += 1 };
  s0 -> s0 [0, 65535] { R5110 += 1, R5111 += 1 };
  s0 -> s3 [65, 65] { R5111 += 1, R4991 += 1, R666 += 1 };
  s0 -> s4 [65, 65] { R5111 += 1, R4991 += 1, R666 += 1 };
  s0 -> s1 [66, 65535] { R5111 += 1, R4991 += 1, R666 += 1 };
  s1 -> s1 [0, 64] { R5111 += 1, R4991 += 1, R666 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5111 += 1 };
  s1 -> s3 [65, 65] { R5111 += 1, R4991 += 1, R666 += 1 };
  s1 -> s4 [65, 65] { R5111 += 1, R4991 += 1, R666 += 1 };
  s1 -> s1 [66, 65535] { R5111 += 1, R4991 += 1, R666 += 1 };
  s2 -> s1 [0, 64] { R5111 += 1, R4991 += 1, R666 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5111 += 1, R4990 += 1, R4991 += 1 };
  s2 -> s3 [65, 65] { R5111 += 1, R4991 += 1, R666 += 1 };
  s2 -> s4 [65, 65] { R5111 += 1, R4991 += 1, R666 += 1 };
  s2 -> s1 [66, 65535] { R5111 += 1, R4991 += 1, R666 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5111 += 1, R4991 += 1, R666 += 1 };
  s3 -> s6 [0, 65535] { R5111 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5111 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5111 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R5113 += 1, R4993 += 1, R668 += 1 };
  s0 -> s2 [0, 65535] { R5113 += 1, R4992 += 1, R4993 += 1 };
  s0 -> s0 [0, 65535] { R5112 += 1, R5113 += 1 };
  s0 -> s3 [65, 65] { R5113 += 1, R4993 += 1, R668 += 1 };
  s0 -> s4 [65, 65] { R5113 += 1, R4993 += 1, R668 += 1 };
  s0 -> s1 [66, 65535] { R5113 += 1, R4993 += 1, R668 += 1 };
  s1 -> s1 [0, 64] { R5113 += 1, R4993 += 1, R668 += 1 };
  s1 -> s1 [0, 65535] { R5113 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5113 += 1, R4993 += 1, R668 += 1 };
  s1 -> s4 [65, 65] { R5113 += 1, R4993 += 1, R668 += 1 };
  s1 -> s1 [66, 65535] { R5113 += 1, R4993 += 1, R668 += 1 };
  s2 -> s1 [0, 64] { R5113 += 1, R4993 += 1, R668 += 1 };
  s2 -> s2 [0, 65535] { R5113 += 1, R4992 += 1, R4993 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5113 += 1, R4993 += 1, R668 += 1 };
  s2 -> s4 [65, 65] { R5113 += 1, R4993 += 1, R668 += 1 };
  s2 -> s1 [66, 65535] { R5113 += 1, R4993 += 1, R668 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5113 += 1, R4993 += 1, R668 += 1 };
  s3 -> s6 [0, 65535] { R5113 += 1 };
  s4 -> s4 [0, 65535] { R5113 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5113 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R5115 += 1, R4995 += 1, R670 += 1 };
  s0 -> s2 [0, 65535] { R5115 += 1, R4994 += 1, R4995 += 1 };
  s0 -> s0 [0, 65535] { R5114 += 1, R5115 += 1 };
  s0 -> s3 [65, 65] { R5115 += 1, R4995 += 1, R670 += 1 };
  s0 -> s4 [65, 65] { R5115 += 1, R4995 += 1, R670 += 1 };
  s0 -> s1 [66, 65535] { R5115 += 1, R4995 += 1, R670 += 1 };
  s1 -> s1 [0, 64] { R5115 += 1, R4995 += 1, R670 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5115 += 1 };
  s1 -> s3 [65, 65] { R5115 += 1, R4995 += 1, R670 += 1 };
  s1 -> s4 [65, 65] { R5115 += 1, R4995 += 1, R670 += 1 };
  s1 -> s1 [66, 65535] { R5115 += 1, R4995 += 1, R670 += 1 };
  s2 -> s1 [0, 64] { R5115 += 1, R4995 += 1, R670 += 1 };
  s2 -> s2 [0, 65535] { R5115 += 1, R4994 += 1, R4995 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5115 += 1, R4995 += 1, R670 += 1 };
  s2 -> s4 [65, 65] { R5115 += 1, R4995 += 1, R670 += 1 };
  s2 -> s1 [66, 65535] { R5115 += 1, R4995 += 1, R670 += 1 };
  s3 -> s3 [0, 65535] { R5115 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5115 += 1 };
  s4 -> s4 [0, 65535] { R5115 += 1, R4995 += 1, R670 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5115 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s0 -> s2 [0, 65535] { R5117 += 1, R4996 += 1, R4997 += 1 };
  s0 -> s0 [0, 65535] { R5116 += 1, R5117 += 1 };
  s0 -> s3 [65, 65] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s0 -> s4 [65, 65] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s0 -> s1 [66, 65535] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 64] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 65535] { R5117 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s1 -> s4 [65, 65] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [66, 65535] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [0, 64] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s2 -> s2 [0, 65535] { R5117 += 1, R4996 += 1, R4997 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s2 -> s4 [65, 65] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [66, 65535] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s3 -> s3 [0, 65535] { R5117 += 1, R4997 += 1, R672 += 1, R673 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5117 += 1 };
  s4 -> s4 [0, 65535] { R5117 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5117 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 64] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s0 -> s0 [0, 65535] { R5118 += 1, R5119 += 1 };
  s0 -> s2 [0, 65535] { R5119 += 1, R4998 += 1, R4999 += 1 };
  s0 -> s3 [65, 65] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s0 -> s4 [65, 65] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s0 -> s1 [66, 65535] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 64] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 65535] { R5119 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s1 -> s4 [65, 65] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [66, 65535] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [0, 64] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5119 += 1, R4998 += 1, R4999 += 1 };
  s2 -> s3 [65, 65] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s2 -> s4 [65, 65] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [66, 65535] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5119 += 1, R4999 += 1, R678 += 1, R679 += 1 };
  s3 -> s6 [0, 65535] { R5119 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5119 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5119 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s1 [0, 64] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s0 -> s0 [0, 65535] { R5120 += 1, R5121 += 1 };
  s0 -> s2 [0, 65535] { R5121 += 1, R5000 += 1, R5001 += 1 };
  s0 -> s3 [65, 65] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s0 -> s4 [65, 65] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s0 -> s1 [66, 65535] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 64] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5121 += 1 };
  s1 -> s3 [65, 65] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s1 -> s4 [65, 65] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [66, 65535] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [0, 64] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5121 += 1, R5000 += 1, R5001 += 1 };
  s2 -> s3 [65, 65] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s2 -> s4 [65, 65] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [66, 65535] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5121 += 1 };
  s3 -> s3 [0, 65535] { R5121 += 1, R5001 += 1, R682 += 1, R683 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5121 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5121 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 64] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s0 -> s0 [0, 65535] { R5122 += 1, R5123 += 1 };
  s0 -> s2 [0, 65535] { R5123 += 1, R5002 += 1, R5003 += 1 };
  s0 -> s3 [65, 65] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s0 -> s4 [65, 65] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s0 -> s1 [66, 65535] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 64] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5123 += 1 };
  s1 -> s3 [65, 65] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s1 -> s4 [65, 65] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [66, 65535] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [0, 64] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5123 += 1, R5002 += 1, R5003 += 1 };
  s2 -> s3 [65, 65] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s2 -> s4 [65, 65] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [66, 65535] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s3 -> s3 [0, 65535] { R5123 += 1, R5003 += 1, R686 += 1, R687 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5123 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5123 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5123 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s1 [0, 64] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s0 -> s2 [0, 65535] { R5125 += 1, R5004 += 1, R5005 += 1 };
  s0 -> s0 [0, 65535] { R5124 += 1, R5125 += 1 };
  s0 -> s3 [65, 65] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s0 -> s4 [65, 65] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s0 -> s1 [66, 65535] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 64] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5125 += 1 };
  s1 -> s3 [65, 65] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s1 -> s4 [65, 65] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [66, 65535] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [0, 64] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s2 -> s2 [0, 65535] { R5125 += 1, R5004 += 1, R5005 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s2 -> s4 [65, 65] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [66, 65535] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5125 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5125 += 1 };
  s4 -> s4 [0, 65535] { R5125 += 1, R5005 += 1, R692 += 1, R693 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5125 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s0 -> s2 [0, 65535] { R5127 += 1, R5006 += 1, R5007 += 1 };
  s0 -> s0 [0, 65535] { R5126 += 1, R5127 += 1 };
  s0 -> s3 [65, 65] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s0 -> s4 [65, 65] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s0 -> s1 [66, 65535] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 64] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5127 += 1 };
  s1 -> s3 [65, 65] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s1 -> s4 [65, 65] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [66, 65535] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [0, 64] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5127 += 1, R5006 += 1, R5007 += 1 };
  s2 -> s3 [65, 65] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s2 -> s4 [65, 65] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [66, 65535] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5127 += 1 };
  s3 -> s3 [0, 65535] { R5127 += 1, R5007 += 1, R696 += 1, R697 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5127 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5127 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s0 -> s2 [0, 64] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s0 -> s0 [0, 65535] { R5128 += 1, R5129 += 1 };
  s0 -> s3 [0, 65535] { R5129 += 1, R5008 += 1, R5009 += 1 };
  s0 -> s4 [65, 65] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s0 -> s5 [65, 65] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s0 -> s6 [65, 65] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s0 -> s7 [65, 65] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s0 -> s1 [66, 65535] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s0 -> s2 [66, 65535] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s1 -> s1 [0, 64] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s1 -> s2 [0, 64] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s1 -> s4 [65, 65] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s1 -> s5 [65, 65] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s1 -> s6 [65, 65] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s1 -> s7 [65, 65] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s1 -> s1 [66, 65535] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s1 -> s2 [66, 65535] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s2 -> s2 [0, 64] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5129 += 1 };
  s2 -> s4 [65, 65] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s2 -> s6 [65, 65] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s2 -> s2 [66, 65535] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s3 -> s1 [0, 64] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s3 -> s2 [0, 64] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s3 -> s3 [0, 65535] { R5129 += 1, R5008 += 1, R5009 += 1 };
  s3 -> s4 [65, 65] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s3 -> s5 [65, 65] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s3 -> s6 [65, 65] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s3 -> s7 [65, 65] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s3 -> s1 [66, 65535] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s3 -> s2 [66, 65535] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R5129 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s6 -> s9 [0, 65535] { R5129 += 1 };
  s7 -> s6 [0, 65535] { R5129 += 1, R5009 += 1, R4027 += 1, R4028 += 1 };
  s7 -> s7 [0, 65535] { R5129 += 1, R5009 += 1, R4026 += 1, R4027 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5129 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R5131 += 1, R5011 += 1 };
  s0 -> s2 [0, 65535] { R5131 += 1, R5010 += 1, R5011 += 1 };
  s0 -> s0 [0, 65535] { R5130 += 1, R5131 += 1 };
  s0 -> s3 [65, 65] { R5131 += 1, R5011 += 1 };
  s0 -> s4 [65, 65] { R5131 += 1, R5011 += 1 };
  s0 -> s1 [66, 65535] { R5131 += 1, R5011 += 1 };
  s1 -> s1 [0, 64] { R5131 += 1, R5011 += 1 };
  s1 -> s1 [0, 65535] { R5131 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5131 += 1, R5011 += 1 };
  s1 -> s4 [65, 65] { R5131 += 1, R5011 += 1 };
  s1 -> s1 [66, 65535] { R5131 += 1, R5011 += 1 };
  s2 -> s1 [0, 64] { R5131 += 1, R5011 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5131 += 1, R5010 += 1, R5011 += 1 };
  s2 -> s3 [65, 65] { R5131 += 1, R5011 += 1 };
  s2 -> s4 [65, 65] { R5131 += 1, R5011 += 1 };
  s2 -> s1 [66, 65535] { R5131 += 1, R5011 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5131 += 1 };
  s3 -> s3 [0, 65535] { R5131 += 1, R5011 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5131 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5131 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s0 -> s2 [0, 65535] { R5133 += 1, R5012 += 1, R5013 += 1 };
  s0 -> s0 [0, 65535] { R5132 += 1, R5133 += 1 };
  s0 -> s3 [65, 65] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s0 -> s4 [65, 65] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s0 -> s1 [66, 65535] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s1 -> s1 [0, 64] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5133 += 1 };
  s1 -> s3 [65, 65] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s1 -> s4 [65, 65] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s1 -> s1 [66, 65535] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s2 -> s1 [0, 64] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s2 -> s2 [0, 65535] { R5133 += 1, R5012 += 1, R5013 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s2 -> s4 [65, 65] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s2 -> s1 [66, 65535] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R5133 += 1 };
  s4 -> s5 [0, 65535] { R5133 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5133 += 1, R5013 += 1, R4032 += 1, R4033 += 1 };
  s5 -> s5 [0, 65535] { R5133 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R5135 += 1, R5015 += 1 };
  s0 -> s2 [0, 65535] { R5135 += 1, R5014 += 1, R5015 += 1 };
  s0 -> s0 [0, 65535] { R5134 += 1, R5135 += 1 };
  s0 -> s3 [65, 65] { R5135 += 1, R5015 += 1 };
  s0 -> s4 [65, 65] { R5135 += 1, R5015 += 1 };
  s0 -> s1 [66, 65535] { R5135 += 1, R5015 += 1 };
  s1 -> s1 [0, 64] { R5135 += 1, R5015 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5135 += 1 };
  s1 -> s3 [65, 65] { R5135 += 1, R5015 += 1 };
  s1 -> s4 [65, 65] { R5135 += 1, R5015 += 1 };
  s1 -> s1 [66, 65535] { R5135 += 1, R5015 += 1 };
  s2 -> s1 [0, 64] { R5135 += 1, R5015 += 1 };
  s2 -> s2 [0, 65535] { R5135 += 1, R5014 += 1, R5015 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5135 += 1, R5015 += 1 };
  s2 -> s4 [65, 65] { R5135 += 1, R5015 += 1 };
  s2 -> s1 [66, 65535] { R5135 += 1, R5015 += 1 };
  s3 -> s3 [0, 65535] { R5135 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5135 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5135 += 1, R5015 += 1 };
  s5 -> s5 [0, 65535] { R5135 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s0 -> s2 [0, 64] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s0 -> s3 [0, 65535] { R5137 += 1, R5016 += 1, R5017 += 1 };
  s0 -> s0 [0, 65535] { R5136 += 1, R5137 += 1 };
  s0 -> s4 [65, 65] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s0 -> s5 [65, 65] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s0 -> s6 [65, 65] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s0 -> s7 [65, 65] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s0 -> s1 [66, 79] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s0 -> s2 [66, 65535] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s0 -> s8 [80, 80] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s0 -> s1 [81, 65535] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s1 -> s1 [0, 64] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s1 -> s4 [65, 65] { R5137 += 1, R5017 += 1 };
  s1 -> s7 [65, 65] { R5137 += 1, R5017 += 1 };
  s1 -> s1 [66, 79] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s1 -> s1 [66, 65535] { R5137 += 1, R5017 += 1 };
  s1 -> s8 [80, 80] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s1 -> s1 [81, 65535] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s2 -> s1 [0, 64] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s2 -> s2 [0, 64] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s2 -> s4 [65, 65] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s2 -> s5 [65, 65] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s2 -> s6 [65, 65] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s2 -> s7 [65, 65] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s2 -> s1 [66, 79] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s2 -> s2 [66, 65535] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s2 -> s8 [80, 80] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s2 -> s1 [81, 65535] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s3 -> s1 [0, 64] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s3 -> s2 [0, 64] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s3 -> s3 [0, 65535] { R5137 += 1, R5016 += 1, R5017 += 1 };
  s3 -> s4 [65, 65] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s3 -> s5 [65, 65] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s3 -> s6 [65, 65] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s3 -> s7 [65, 65] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s3 -> s1 [66, 79] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s3 -> s2 [66, 65535] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s3 -> s8 [80, 80] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s3 -> s1 [81, 65535] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s6 -> s7 [0, 79] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s6 -> s6 [0, 65535] { R5137 += 1, R5017 += 1, R4918 += 1, R4919 += 1 };
  s6 -> s13 [80, 80] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s6 -> s7 [81, 65535] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s7 -> s7 [0, 79] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s7 -> s7 [0, 65535] { R5137 += 1, R5017 += 1 };
  s7 -> s13 [80, 80] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s7 -> s7 [81, 65535] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s8 -> s8 [0, 64] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s8 -> s9 [0, 64] { R5137 += 1, R5017 += 1 };
  s8 -> s10 [65, 65] { R5137 += 1, R5017 += 1 };
  s8 -> s11 [65, 65] { R5137 += 1, R5017 += 1 };
  s8 -> s12 [65, 65] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s8 -> s13 [65, 65] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s8 -> s8 [66, 65535] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s8 -> s9 [66, 65535] { R5137 += 1, R5017 += 1 };
  s9 -> s9 [0, 64] { R5137 += 1, R5017 += 1 };
  s9 -> s9 [0, 65535] { R5137 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s10 [65, 65] { R5137 += 1, R5017 += 1 };
  s9 -> s11 [65, 65] { R5137 += 1, R5017 += 1 };
  s9 -> s9 [66, 65535] { R5137 += 1, R5017 += 1 };
  s10 -> s10 [0, 65535] { R5137 += 1, R5017 += 1 };
  s10 -> s15 [0, 65535] { R5137 += 1 };
  s10 -> s14 [0, 65535];
  s11 -> s11 [0, 65535] { R5137 += 1 };
  s11 -> s14 [0, 65535];
  s13 -> s10 [0, 65535] { R5137 += 1, R5017 += 1 };
  s13 -> s13 [0, 65535] { R5137 += 1, R5017 += 1, R4919 += 1, R4920 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R5137 += 1 };
  s15 -> s14 [0, 65535];
  accepting s9, s14, s15, s10, s11;
};
};
synchronised {  // Automata constraining P105
automaton P105_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P39
automaton P39_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R6 = R4957 && R7 = R5137 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R82 = 0 && R83 = R4957 && R84 = 0 && R85 = R4957 && R86 = 0 && R87 = R4957 && R88 = 0 && R89 = R5137 && R90 = 0 && R91 = R5137 && R92 = 0 && R93 = R5137 && R115 + R114 = 0 && R4924 = 0 && R4925 = R4957 && R4926 = 0 && R4927 = R4957 && R4928 = 0 && R4929 = R4957 && R4930 = 0 && R4931 = R4957 && R4932 = 0 && R4933 = R4957 && R4934 = 0 && R4935 = R4957 && R4936 = 0 && R4937 = R4957 && R4938 = 0 && R4939 = R4957 && R4940 = 0 && R4941 = R4957 && R4942 = 0 && R4943 = R4957 && R4944 = 0 && R4945 = R4957 && R4946 = 0 && R4947 = R4957 && R4948 = 0 && R4949 = R4957 && R4950 = 0 && R4951 = R4957 && R4952 = 0 && R4953 = R4957 && R4954 = 0 && R4955 = R4957 && R4956 = 0 && R4958 = 0 && R4959 = R5137 && R4960 = 0 && R4961 = R5137 && R4962 = 0 && R4963 = R5137 && R4964 = 0 && R4965 = R5137 && R4966 = 0 && R4967 = R5137 && R4968 = 0 && R4969 = R5137 && R4970 = 0 && R4971 = R5137 && R4972 = 0 && R4973 = R5137 && R4974 = 0 && R4975 = R5137 && R4976 = 0 && R4977 = R5137 && R4978 = 0 && R4979 = R5137 && R4980 = 0 && R4981 = R5137 && R4982 = 0 && R4983 = R5137 && R4984 = 0 && R4985 = R5137 && R4988 = 0 && R4989 = 0 && R5008 = 0 && R5009 = 0 && R5016 = 0 && R5017 = 0 && R5046 = 10 && R5047 = R5137 && R5048 = 10 && R5049 = R5137 && R5050 = 10 && R5051 = R5137 && R5052 = 10 && R5053 = R5137 && R5054 = 10 && R5055 = R5137 && R5056 = 10 && R5057 = R5137 && R5058 = 10 && R5059 = R5137 && R5060 = 10 && R5061 = R5137 && R5062 = 10 && R5063 = R5137 && R5064 = 10 && R5065 = R5137 && R5066 = 10 && R5067 = R5137 && R5068 = 10 && R5069 = R5137 && R5070 = 10 && R5071 = R5137 && R5072 = 10 && R5073 = R5137 && R5074 = 10 && R5075 = R5137 && R5076 = 10 && R5077 = R5137 && R5078 = 10 && R5079 = R5137 && R5080 = 10 && R5081 = R5137 && R5082 = 10 && R5083 = R5137 && R5084 = 10 && R5085 = R5137 && R5086 = 10 && R5087 = R5137 && R5088 = 10 && R5089 = R5137 && R5090 = 10 && R5091 = R5137 && R5092 = 10 && R5093 = R5137 && R5094 = 10 && R5095 = R5137 && R5096 = 10 && R5097 = R5137 && R5098 = 10 && R5099 = R5137 && R5100 = 10 && R5101 = R5137 && R5102 = 10 && R5103 = R5137 && R5104 = 10 && R5105 = R5137 && R5106 = 10 && R5107 = R5137 && R5108 = 10 && R5109 = R5137 && R5110 = 10 && R5111 = R5137 && R5112 = 10 && R5113 = R5137 && R5114 = 10 && R5115 = R5137 && R5116 = 10 && R5117 = R5137 && R5118 = 10 && R5119 = R5137 && R5120 = 10 && R5121 = R5137 && R5122 = 10 && R5123 = R5137 && R5124 = 10 && R5125 = R5137 && R5126 = 10 && R5127 = R5137 && R5128 = 10 && R5129 = R5137 && R5130 = 10 && R5131 = R5137 && R5132 = 10 && R5133 = R5137 && R5134 = 10 && R5135 = R5137 && R5136 = 10 && R57 + R56 != 0 && R59 + R58 != 0 && R141 + R138 + R159 + R156 != 0 && R701 + R698 + R4923 + R4920 != 0 && R21 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && R31 < 1 && R117 + R116 < 1 && R119 + R118 < 1 && -1*R667 + -1*R666 < 1 && R669 + R668 < 1 && R671 + R670 < 1 && 0 < R4957 && 9 < R5137 && (R667 + R666 != 0 || R677 + R674 = 0 || (R675 + R672 = 0 && R676 + R673 = 0)) && (R667 + R666 != 0 || R677 + R674 = 0 || (R680 + R678 = 0 && R681 + R679 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R684 + R682 = 0 && R685 + R683 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R689 + R686 = 0 && R690 + R687 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R694 + R692 = 0 && R695 + R693 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R699 + R696 = 0 && R700 + R697 = 0)) && (R675 + R672 != 0 || R667 + R666 + -1*R676 + -1*R673 = 0 || R667 + R666 < 1) && (R680 + R678 != 0 || R667 + R666 + -1*R681 + -1*R679 = 0 || R667 + R666 < 1) && (R684 + R682 != 0 || R667 + R666 + -1*R685 + -1*R683 = 0 || R667 + R666 < 1) && (R689 + R686 != 0 || R667 + R666 + -1*R690 + -1*R687 = 0 || R667 + R666 < 1) && (R694 + R692 != 0 || R667 + R666 + -1*R695 + -1*R693 = 0 || R667 + R666 < 1) && (R699 + R696 != 0 || R667 + R666 + -1*R700 + -1*R697 = 0 || R667 + R666 < 1) && (R44 = 0 || (R106 = 0 && R107 = 0)) && (R44 = 0 || (R108 = 0 && R109 = 0)) && (R45 = 0 || (R4986 = 0 && R4987 = 0)) && (R45 = 0 || (R4990 = 0 && R4991 = 0)) && (R45 = 0 || (R4992 = 0 && R4993 = 0)) && (R45 = 0 || (R4994 = 0 && R4995 = 0)) && (R45 = 0 || (R4996 = 0 && R4997 = 0)) && (R45 = 0 || (R4998 = 0 && R4999 = 0)) && (R45 = 0 || (R5000 = 0 && R5001 = 0)) && (R45 = 0 || (R5002 = 0 && R5003 = 0)) && (R45 = 0 || (R5004 = 0 && R5005 = 0)) && (R45 = 0 || (R5006 = 0 && R5007 = 0)) && (R45 = 0 || (R5010 = 0 && R5011 = 0)) && (R45 = 0 || (R5012 = 0 && R5013 = 0)) && (R45 = 0 || (R5014 = 0 && R5015 = 0)) && (R48 = 0 || (R5018 = 0 && R5019 = 0)) && (R48 = 0 || (R5020 = 0 && R5021 = 0)) && (R48 = 0 || (R5022 = 0 && R5023 = 0)) && (R48 = 0 || (R5024 = 0 && R5025 = 0)) && (R48 = 0 || (R5026 = 0 && R5027 = 0)) && (R48 = 0 || (R5028 = 0 && R5029 = 0)) && (R48 = 0 || (R5030 = 0 && R5031 = 0)) && (R48 = 0 || (R5032 = 0 && R5033 = 0)) && (R48 = 0 || (R5034 = 0 && R5035 = 0)) && (R48 = 0 || (R5036 = 0 && R5037 = 0)) && (R48 = 0 || (R5038 = 0 && R5039 = 0)) && (R48 = 0 || (R5040 = 0 && R5041 = 0)) && (R48 = 0 || (R5042 = 0 && R5043 = 0)) && (R48 = 0 || (R5044 = 0 && R5045 = 0)) && (R49 = 0 || (R110 = 0 && R111 = 0)) && (R49 = 0 || (R112 = 0 && R113 = 0)) && (R125 + R122 = 0 || (R123 + R120 = 0 && R124 + R121 = 0)) && (R131 + R128 = 0 || (R129 + R126 = 0 && R130 + R127 = 0)) && (R131 + R128 = 0 || (R134 + R132 = 0 && R135 + R133 = 0)) && (R131 + R128 = 0 || (R139 + R136 = 0 && R140 + R137 = 0)) && (R147 + R144 = 0 || (R145 + R142 = 0 && R146 + R143 = 0)) && (R153 + R150 = 0 || (R151 + R148 = 0 && R152 + R149 = 0)) && (R153 + R150 = 0 || (R157 + R154 = 0 && R158 + R155 = 0)) && (R675 + R672 = 0 || R667 + R666 < 1) && (R680 + R678 = 0 || R667 + R666 < 1) && (R684 + R682 = 0 || R667 + R666 < 1) && (R689 + R686 = 0 || R667 + R666 < 1) && (R694 + R692 = 0 || R667 + R666 < 1) && (R699 + R696 = 0 || R667 + R666 < 1) && (R4031 + R4028 = 0 || (R4029 + R4026 = 0 && R4030 + R4027 = 0)) && (R4037 + R4034 = 0 || (R4035 + R4032 = 0 && R4036 + R4033 = 0)) && (R4037 + R4034 = 0 || (R4921 + R4918 = 0 && R4922 + R4919 = 0));
// End of Parikh automata intersection problem
