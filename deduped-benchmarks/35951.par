// Parikh automata intersection problem, generated by OSTRICH+
counter int R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R21, R22, R25, R28, R31, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R56, R57, R58, R59, R6, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R7350, R7351, R7352, R7353, R7354, R7355, R7356, R7357, R7358, R7359, R7360, R7361, R7802, R7803, R7804, R7805, R7806, R7807, R7808, R7809, R7810, R7811, R7812, R7813, R7814, R7815, R7816, R7817, R7818, R7819, R7820, R7821, R7822, R7823, R7824, R7825, R7826, R7827, R7828, R7829, R7830, R7831, R7832, R7833, R7834, R7835, R7836, R7837, R7838, R7839, R7840, R7841, R7842, R7843, R7844, R7845, R7846, R7847, R7848, R7849, R7850, R7851, R7852, R7853, R7854, R7855, R7856, R7857, R7858, R7859, R7860, R7861, R7862, R7863, R7864, R7865, R7866, R7867, R7868, R7869, R7870, R7871, R7872, R7873, R7874, R7875, R7876, R7877, R7878, R7879, R7880, R7881, R7882, R7883, R7884, R7885, R7886, R7887, R7888, R7889, R7890, R7891, R7892, R7893, R7894, R7895, R7896, R7897, R7898, R7899, R7900, R7901, R7902, R7903, R7904, R7905, R7906, R7907, R7908, R7909, R7910, R7911, R7912, R7913, R7914, R7915, R7916, R7917, R7918, R7919, R7920, R7921, R7922, R7923, R7924, R7925, R7926, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R7935, R7936, R7937, R7938, R7939, R7940, R7941, R7942, R7943, R7944, R7945, R7946, R7947, R7948, R7949, R7950, R7951, R7952, R7953, R7954, R7955, R7956, R7957, R7958, R7959, R7960, R7961, R7962, R7963, R7964, R7965, R7966, R7967, R7968, R7969, R7970, R7971, R7972, R7973, R7974, R7975, R7976, R7977, R7978, R7979, R7980, R7981, R7982, R7983, R7984, R7985, R7986, R7987, R7988, R7989, R7990, R7991, R7992, R7993, R7994, R7995, R7996, R7997, R7998, R7999, R8, R8000, R8001, R8002, R8003, R8004, R8005, R8006, R8007, R8008, R8009, R8010, R8011, R8012, R8013, R8014, R8015, R8016, R8017, R8018, R8019, R8020, R8021, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P93
automaton P93_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R31 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R91 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [108, 108] { R91 += 1 };
  s0 -> s1 [109, 65535] { R91 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R91 += 1 };
  s2 -> s1 [0, 110] { R91 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R91 += 1 };
  s2 -> s1 [112, 65535] { R91 += 1 };
  s3 -> s1 [0, 98] { R91 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R91 += 1 };
  s3 -> s1 [100, 65535] { R91 += 1 };
  s4 -> s1 [0, 96] { R91 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R91 += 1 };
  s4 -> s1 [98, 65535] { R91 += 1 };
  s5 -> s1 [0, 107] { R91 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R91 += 1 };
  s5 -> s1 [109, 65535] { R91 += 1 };
  s6 -> s1 [0, 103] { R91 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R91 += 1 };
  s6 -> s1 [105, 65535] { R91 += 1 };
  s7 -> s1 [0, 110] { R91 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R91 += 1 };
  s7 -> s1 [112, 65535] { R91 += 1 };
  s8 -> s1 [0, 114] { R91 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R91 += 1 };
  s8 -> s1 [116, 65535] { R91 += 1 };
  s9 -> s1 [0, 115] { R91 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R91 += 1 };
  s9 -> s1 [117, 65535] { R91 += 1 };
  s10 -> s1 [0, 65535] { R91 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R113 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R7843 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R7842 += 1, R7843 += 1 };
  s1 -> s1 [0, 65535] { R7843 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R7845 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R7844 += 1, R7845 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7845 += 1, R115 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 74] { R7847 += 1 };
  s0 -> s0 [0, 65535] { R7846 += 1, R7847 += 1 };
  s0 -> s2 [0, 65535] { R7847 += 1, R117 += 1 };
  s0 -> s1 [76, 65535] { R7847 += 1 };
  s1 -> s1 [0, 74] { R7847 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [76, 65535] { R7847 += 1 };
  s2 -> s1 [0, 74] { R7847 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7847 += 1, R117 += 1 };
  s2 -> s1 [76, 65535] { R7847 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 76] { R7849 += 1 };
  s0 -> s0 [0, 65535] { R7848 += 1, R7849 += 1 };
  s0 -> s2 [0, 65535] { R7849 += 1, R119 += 1 };
  s0 -> s1 [78, 65535] { R7849 += 1 };
  s1 -> s1 [0, 76] { R7849 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R7849 += 1 };
  s2 -> s1 [0, 76] { R7849 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7849 += 1, R119 += 1 };
  s2 -> s1 [78, 65535] { R7849 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7851 += 1, R124 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R7851 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R7850 += 1, R7851 += 1 };
  s1 -> s1 [0, 65535] { R7851 += 1, R124 += 1, R125 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7851 += 1 };
  s2 -> s1 [0, 65535] { R7851 += 1, R124 += 1, R125 += 1 };
  s2 -> s2 [0, 65535] { R7851 += 1, R123 += 1, R124 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7851 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7853 += 1 };
  s0 -> s0 [0, 65535] { R7852 += 1, R7853 += 1 };
  s1 -> s1 [0, 65535] { R7853 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R7854 += 1, R7855 += 1 };
  s0 -> s1 [0, 65535] { R7855 += 1, R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R7855 += 1, R130 += 1, R131 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7855 += 1, R129 += 1, R130 += 1 };
  s1 -> s2 [0, 65535] { R7855 += 1, R130 += 1, R131 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7855 += 1, R130 += 1, R131 += 1 };
  s2 -> s4 [0, 65535] { R7855 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7855 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R7857 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R7856 += 1, R7857 += 1 };
  s0 -> s2 [0, 65535] { R7857 += 1, R134 += 1, R135 += 1 };
  s0 -> s3 [108, 108] { R7857 += 1, R135 += 1 };
  s0 -> s1 [109, 65535] { R7857 += 1, R135 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R7857 += 1 };
  s1 -> s1 [0, 65535] { R7857 += 1, R135 += 1 };
  s2 -> s1 [0, 107] { R7857 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7857 += 1, R134 += 1, R135 += 1 };
  s2 -> s3 [108, 108] { R7857 += 1, R135 += 1 };
  s2 -> s1 [109, 65535] { R7857 += 1, R135 += 1 };
  s3 -> s1 [0, 110] { R7857 += 1, R135 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7857 += 1 };
  s3 -> s5 [111, 111] { R7857 += 1, R135 += 1 };
  s3 -> s1 [112, 65535] { R7857 += 1, R135 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R7857 += 1, R135 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7857 += 1 };
  s5 -> s6 [99, 99] { R7857 += 1, R135 += 1 };
  s5 -> s1 [100, 65535] { R7857 += 1, R135 += 1 };
  s6 -> s1 [0, 96] { R7857 += 1, R135 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7857 += 1 };
  s6 -> s7 [97, 97] { R7857 += 1, R135 += 1 };
  s6 -> s1 [98, 65535] { R7857 += 1, R135 += 1 };
  s7 -> s1 [0, 107] { R7857 += 1, R135 += 1 };
  s7 -> s7 [0, 65535] { R7857 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R7857 += 1, R135 += 1 };
  s7 -> s1 [109, 65535] { R7857 += 1, R135 += 1 };
  s8 -> s1 [0, 103] { R7857 += 1, R135 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R7857 += 1 };
  s8 -> s9 [104, 104] { R7857 += 1, R135 += 1 };
  s8 -> s1 [105, 65535] { R7857 += 1, R135 += 1 };
  s9 -> s1 [0, 110] { R7857 += 1, R135 += 1 };
  s9 -> s9 [0, 65535] { R7857 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R7857 += 1, R135 += 1 };
  s9 -> s1 [112, 65535] { R7857 += 1, R135 += 1 };
  s10 -> s1 [0, 114] { R7857 += 1, R135 += 1 };
  s10 -> s10 [0, 65535] { R7857 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R7857 += 1, R135 += 1 };
  s10 -> s1 [116, 65535] { R7857 += 1, R135 += 1 };
  s11 -> s1 [0, 115] { R7857 += 1, R135 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R7857 += 1 };
  s11 -> s12 [116, 116] { R7857 += 1, R135 += 1 };
  s11 -> s1 [117, 65535] { R7857 += 1, R135 += 1 };
  s12 -> s1 [0, 65535] { R7857 += 1, R135 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R7857 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7858 += 1, R7859 += 1 };
  s0 -> s1 [0, 65535] { R7859 += 1, R139 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R7859 += 1, R140 += 1, R141 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7859 += 1, R139 += 1, R140 += 1 };
  s1 -> s2 [0, 65535] { R7859 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7859 += 1 };
  s2 -> s2 [0, 65535] { R7859 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7859 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R7861 += 1, R145 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R7861 += 1, R146 += 1, R147 += 1 };
  s0 -> s0 [0, 65535] { R7860 += 1, R7861 += 1 };
  s1 -> s1 [0, 65535] { R7861 += 1, R145 += 1, R146 += 1 };
  s1 -> s2 [0, 65535] { R7861 += 1, R146 += 1, R147 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7861 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [0, 65535] { R7861 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7861 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R7863 += 1 };
  s0 -> s0 [0, 65535] { R7862 += 1, R7863 += 1 };
  s1 -> s1 [0, 65535] { R7863 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7865 += 1, R152 += 1, R153 += 1 };
  s0 -> s2 [0, 65535] { R7865 += 1, R151 += 1, R152 += 1 };
  s0 -> s0 [0, 65535] { R7864 += 1, R7865 += 1 };
  s1 -> s1 [0, 65535] { R7865 += 1, R152 += 1, R153 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7865 += 1 };
  s2 -> s1 [0, 65535] { R7865 += 1, R152 += 1, R153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7865 += 1, R151 += 1, R152 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7865 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R7866 += 1, R7867 += 1 };
  s0 -> s1 [0, 65535] { R7867 += 1 };
  s1 -> s1 [0, 65535] { R7867 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 76] { R7869 += 1, R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R7869 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R7868 += 1, R7869 += 1 };
  s0 -> s3 [77, 77] { R7869 += 1, R158 += 1, R159 += 1 };
  s0 -> s4 [77, 77] { R7869 += 1, R158 += 1, R159 += 1 };
  s0 -> s1 [78, 65535] { R7869 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 76] { R7869 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R7869 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [77, 77] { R7869 += 1, R158 += 1, R159 += 1 };
  s1 -> s4 [77, 77] { R7869 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [78, 65535] { R7869 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [0, 76] { R7869 += 1, R158 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R7869 += 1, R157 += 1, R158 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [77, 77] { R7869 += 1, R158 += 1, R159 += 1 };
  s2 -> s4 [77, 77] { R7869 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [78, 65535] { R7869 += 1, R158 += 1, R159 += 1 };
  s3 -> s3 [0, 65535] { R7869 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7869 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7869 += 1, R158 += 1, R159 += 1 };
  s5 -> s5 [0, 65535] { R7869 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R7903 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R7902 += 1, R7903 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7903 += 1, R48 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R7905 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R7904 += 1, R7905 += 1 };
  s0 -> s2 [65, 65] { R7905 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R7905 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R7905 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R7905 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7905 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R7905 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R7905 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R7905 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R7907 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R7906 += 1, R7907 += 1 };
  s0 -> s2 [65, 65] { R7907 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R7907 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R7907 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R7907 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7907 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R7907 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R7907 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R7907 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R7909 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R7908 += 1, R7909 += 1 };
  s0 -> s2 [65, 65] { R7909 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R7909 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R7909 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R7909 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7909 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R7909 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R7909 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R7909 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R7911 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R7910 += 1, R7911 += 1 };
  s0 -> s2 [65, 65] { R7911 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [65, 65] { R7911 += 1, R120 += 1, R121 += 1 };
  s0 -> s1 [66, 65535] { R7911 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 64] { R7911 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7911 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [65, 65] { R7911 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [66, 65535] { R7911 += 1, R120 += 1, R121 += 1 };
  s2 -> s2 [0, 65535] { R7911 += 1, R120 += 1, R121 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R7913 += 1 };
  s0 -> s0 [0, 65535] { R7912 += 1, R7913 += 1 };
  s0 -> s2 [65, 65] { R7913 += 1 };
  s0 -> s3 [65, 65] { R7913 += 1 };
  s0 -> s1 [66, 65535] { R7913 += 1 };
  s1 -> s1 [0, 64] { R7913 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7913 += 1 };
  s1 -> s3 [65, 65] { R7913 += 1 };
  s1 -> s1 [66, 65535] { R7913 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7913 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R7915 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R7914 += 1, R7915 += 1 };
  s0 -> s2 [65, 65] { R7915 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [65, 65] { R7915 += 1, R126 += 1, R127 += 1 };
  s0 -> s1 [66, 65535] { R7915 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 64] { R7915 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7915 += 1, R126 += 1, R127 += 1 };
  s1 -> s3 [65, 65] { R7915 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [66, 65535] { R7915 += 1, R126 += 1, R127 += 1 };
  s2 -> s2 [0, 65535] { R7915 += 1, R126 += 1, R127 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R7917 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R7916 += 1, R7917 += 1 };
  s0 -> s2 [65, 65] { R7917 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [65, 65] { R7917 += 1, R132 += 1, R133 += 1 };
  s0 -> s1 [66, 65535] { R7917 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 64] { R7917 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7917 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [65, 65] { R7917 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [66, 65535] { R7917 += 1, R132 += 1, R133 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7917 += 1, R132 += 1, R133 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R7919 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R7918 += 1, R7919 += 1 };
  s0 -> s2 [65, 65] { R7919 += 1, R136 += 1, R137 += 1 };
  s0 -> s3 [65, 65] { R7919 += 1, R136 += 1, R137 += 1 };
  s0 -> s1 [66, 65535] { R7919 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 64] { R7919 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7919 += 1, R136 += 1, R137 += 1 };
  s1 -> s3 [65, 65] { R7919 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [66, 65535] { R7919 += 1, R136 += 1, R137 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7919 += 1, R136 += 1, R137 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R7921 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R7920 += 1, R7921 += 1 };
  s0 -> s2 [65, 65] { R7921 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R7921 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R7921 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R7921 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7921 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R7921 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R7921 += 1, R142 += 1, R143 += 1 };
  s2 -> s2 [0, 65535] { R7921 += 1, R142 += 1, R143 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R7923 += 1 };
  s0 -> s0 [0, 65535] { R7922 += 1, R7923 += 1 };
  s0 -> s2 [65, 65] { R7923 += 1 };
  s0 -> s3 [65, 65] { R7923 += 1 };
  s0 -> s1 [66, 65535] { R7923 += 1 };
  s1 -> s1 [0, 64] { R7923 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7923 += 1 };
  s1 -> s3 [65, 65] { R7923 += 1 };
  s1 -> s1 [66, 65535] { R7923 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7923 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R7925 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R7924 += 1, R7925 += 1 };
  s0 -> s2 [65, 65] { R7925 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [65, 65] { R7925 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [66, 65535] { R7925 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 64] { R7925 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7925 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [65, 65] { R7925 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [66, 65535] { R7925 += 1, R148 += 1, R149 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7925 += 1, R148 += 1, R149 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R7927 += 1 };
  s0 -> s0 [0, 65535] { R7926 += 1, R7927 += 1 };
  s0 -> s2 [65, 65] { R7927 += 1 };
  s0 -> s3 [65, 65] { R7927 += 1 };
  s0 -> s1 [66, 65535] { R7927 += 1 };
  s1 -> s1 [0, 64] { R7927 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7927 += 1 };
  s1 -> s3 [65, 65] { R7927 += 1 };
  s1 -> s1 [66, 65535] { R7927 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7927 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R7929 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R7928 += 1, R7929 += 1 };
  s0 -> s2 [65, 65] { R7929 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [65, 65] { R7929 += 1, R154 += 1, R155 += 1 };
  s0 -> s1 [66, 65535] { R7929 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 64] { R7929 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7929 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [65, 65] { R7929 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [66, 65535] { R7929 += 1, R154 += 1, R155 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7929 += 1, R154 += 1, R155 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 43] { R7931 += 1 };
  s0 -> s0 [0, 65535] { R7930 += 1, R7931 += 1 };
  s0 -> s1 [45, 45] { R7931 += 1 };
  s0 -> s2 [46, 46] { R7931 += 1 };
  s0 -> s1 [48, 62] { R7931 += 1 };
  s0 -> s3 [65, 65] { R7931 += 1 };
  s0 -> s1 [66, 65535] { R7931 += 1 };
  s1 -> s1 [0, 43] { R7931 += 1 };
  s1 -> s1 [45, 45] { R7931 += 1 };
  s1 -> s2 [46, 46] { R7931 += 1 };
  s1 -> s1 [48, 62] { R7931 += 1 };
  s1 -> s3 [65, 65] { R7931 += 1 };
  s1 -> s1 [66, 65535] { R7931 += 1 };
  s2 -> s1 [0, 43] { R7931 += 1 };
  s2 -> s1 [45, 45] { R7931 += 1 };
  s2 -> s2 [46, 46] { R7931 += 1 };
  s2 -> s1 [48, 62] { R7931 += 1 };
  s2 -> s3 [65, 65] { R7931 += 1 };
  s2 -> s1 [66, 114] { R7931 += 1 };
  s2 -> s8 [115, 115] { R7931 += 1 };
  s2 -> s1 [116, 65535] { R7931 += 1 };
  s3 -> s3 [0, 43] { R7931 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R7931 += 1 };
  s3 -> s4 [46, 46] { R7931 += 1 };
  s3 -> s3 [48, 62] { R7931 += 1 };
  s3 -> s3 [65, 65535] { R7931 += 1 };
  s4 -> s3 [0, 43] { R7931 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R7931 += 1 };
  s4 -> s4 [46, 46] { R7931 += 1 };
  s4 -> s3 [48, 62] { R7931 += 1 };
  s4 -> s3 [65, 114] { R7931 += 1 };
  s4 -> s5 [115, 115] { R7931 += 1 };
  s4 -> s3 [116, 65535] { R7931 += 1 };
  s5 -> s3 [0, 43] { R7931 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R7931 += 1 };
  s5 -> s4 [46, 46] { R7931 += 1 };
  s5 -> s3 [48, 62] { R7931 += 1 };
  s5 -> s3 [65, 110] { R7931 += 1 };
  s5 -> s6 [111, 111] { R7931 += 1 };
  s5 -> s3 [112, 65535] { R7931 += 1 };
  s6 -> s3 [0, 43] { R7931 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R7931 += 1 };
  s6 -> s4 [46, 46] { R7931 += 1 };
  s6 -> s3 [48, 62] { R7931 += 1 };
  s6 -> s3 [65, 98] { R7931 += 1 };
  s6 -> s7 [99, 99] { R7931 += 1 };
  s6 -> s3 [100, 65535] { R7931 += 1 };
  s7 -> s3 [0, 43] { R7931 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R7931 += 1 };
  s7 -> s4 [46, 46] { R7931 += 1 };
  s7 -> s3 [48, 62] { R7931 += 1 };
  s7 -> s3 [65, 106] { R7931 += 1 };
  s7 -> s3 [108, 65535] { R7931 += 1 };
  s8 -> s1 [0, 43] { R7931 += 1 };
  s8 -> s1 [45, 45] { R7931 += 1 };
  s8 -> s2 [46, 46] { R7931 += 1 };
  s8 -> s1 [48, 62] { R7931 += 1 };
  s8 -> s3 [65, 65] { R7931 += 1 };
  s8 -> s1 [66, 110] { R7931 += 1 };
  s8 -> s9 [111, 111] { R7931 += 1 };
  s8 -> s1 [112, 65535] { R7931 += 1 };
  s9 -> s1 [0, 43] { R7931 += 1 };
  s9 -> s1 [45, 45] { R7931 += 1 };
  s9 -> s2 [46, 46] { R7931 += 1 };
  s9 -> s1 [48, 62] { R7931 += 1 };
  s9 -> s3 [65, 65] { R7931 += 1 };
  s9 -> s1 [66, 98] { R7931 += 1 };
  s9 -> s10 [99, 99] { R7931 += 1 };
  s9 -> s1 [100, 65535] { R7931 += 1 };
  s10 -> s1 [0, 43] { R7931 += 1 };
  s10 -> s1 [45, 45] { R7931 += 1 };
  s10 -> s2 [46, 46] { R7931 += 1 };
  s10 -> s1 [48, 62] { R7931 += 1 };
  s10 -> s3 [65, 65] { R7931 += 1 };
  s10 -> s1 [66, 106] { R7931 += 1 };
  s10 -> s1 [108, 65535] { R7931 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R7933 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R7932 += 1, R7933 += 1 };
  s1 -> s1 [0, 65535] { R7933 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 57] { R7935 += 1 };
  s0 -> s2 [0, 65535] { R7935 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R7934 += 1, R7935 += 1 };
  s0 -> s3 [58, 58] { R7935 += 1 };
  s0 -> s1 [59, 65535] { R7935 += 1 };
  s1 -> s1 [0, 57] { R7935 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R7935 += 1 };
  s1 -> s1 [59, 65535] { R7935 += 1 };
  s2 -> s1 [0, 57] { R7935 += 1 };
  s2 -> s2 [0, 65535] { R7935 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R7935 += 1 };
  s2 -> s1 [59, 65535] { R7935 += 1 };
  s3 -> s3 [0, 65535] { R7935 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 42] { R7937 += 1 };
  s0 -> s0 [0, 65535] { R7936 += 1, R7937 += 1 };
  s0 -> s2 [0, 65535] { R7937 += 1, R22 += 1 };
  s0 -> s3 [43, 43] { R7937 += 1 };
  s0 -> s1 [44, 65535] { R7937 += 1 };
  s1 -> s1 [0, 42] { R7937 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R7937 += 1 };
  s1 -> s1 [44, 65535] { R7937 += 1 };
  s2 -> s1 [0, 42] { R7937 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7937 += 1, R22 += 1 };
  s2 -> s3 [43, 43] { R7937 += 1 };
  s2 -> s1 [44, 65535] { R7937 += 1 };
  s3 -> s3 [0, 65535] { R7937 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R7939 += 1 };
  s0 -> s0 [0, 65535] { R7938 += 1, R7939 += 1 };
  s0 -> s2 [0, 65535] { R7939 += 1, R25 += 1 };
  s0 -> s3 [65, 65] { R7939 += 1 };
  s0 -> s1 [66, 65535] { R7939 += 1 };
  s1 -> s1 [0, 64] { R7939 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R7939 += 1 };
  s1 -> s1 [66, 65535] { R7939 += 1 };
  s2 -> s1 [0, 64] { R7939 += 1 };
  s2 -> s2 [0, 65535] { R7939 += 1, R25 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R7939 += 1 };
  s2 -> s1 [66, 65535] { R7939 += 1 };
  s3 -> s3 [0, 65535] { R7939 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 90] { R7941 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R7941 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R7940 += 1, R7941 += 1 };
  s0 -> s3 [91, 91] { R7941 += 1, R51 += 1 };
  s0 -> s1 [92, 65535] { R7941 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7941 += 1 };
  s1 -> s1 [0, 65535] { R7941 += 1, R51 += 1 };
  s2 -> s1 [0, 90] { R7941 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7941 += 1, R50 += 1, R51 += 1 };
  s2 -> s3 [91, 91] { R7941 += 1, R51 += 1 };
  s2 -> s1 [92, 65535] { R7941 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R7941 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7941 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s0 [0, 65535] { R7942 += 1, R7943 += 1 };
  s0 -> s1 [0, 65535] { R7943 += 1, R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R7943 += 1, R53 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R7943 += 1, R52 += 1, R53 += 1 };
  s1 -> s2 [0, 65535] { R7943 += 1, R53 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7943 += 1, R53 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7943 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7943 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R7944 += 1, R7945 += 1 };
  s0 -> s1 [0, 65535] { R7945 += 1, R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R7945 += 1, R83 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R7945 += 1, R82 += 1, R83 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7945 += 1, R83 += 1, R42 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7945 += 1 };
  s2 -> s2 [0, 65535] { R7945 += 1, R83 += 1, R42 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7945 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 107] { R7947 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R7947 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R7946 += 1, R7947 += 1 };
  s0 -> s3 [108, 108] { R7947 += 1, R85 += 1 };
  s0 -> s1 [109, 65535] { R7947 += 1, R85 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R7947 += 1 };
  s1 -> s1 [0, 65535] { R7947 += 1, R85 += 1 };
  s2 -> s1 [0, 107] { R7947 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R7947 += 1, R84 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R7947 += 1, R85 += 1 };
  s2 -> s1 [109, 65535] { R7947 += 1, R85 += 1 };
  s3 -> s1 [0, 110] { R7947 += 1, R85 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7947 += 1 };
  s3 -> s5 [111, 111] { R7947 += 1, R85 += 1 };
  s3 -> s1 [112, 65535] { R7947 += 1, R85 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R7947 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R7947 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R7947 += 1, R85 += 1 };
  s5 -> s1 [100, 65535] { R7947 += 1, R85 += 1 };
  s6 -> s1 [0, 96] { R7947 += 1, R85 += 1 };
  s6 -> s6 [0, 65535] { R7947 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R7947 += 1, R85 += 1 };
  s6 -> s1 [98, 65535] { R7947 += 1, R85 += 1 };
  s7 -> s1 [0, 107] { R7947 += 1, R85 += 1 };
  s7 -> s7 [0, 65535] { R7947 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R7947 += 1, R85 += 1 };
  s7 -> s1 [109, 65535] { R7947 += 1, R85 += 1 };
  s8 -> s1 [0, 103] { R7947 += 1, R85 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R7947 += 1 };
  s8 -> s9 [104, 104] { R7947 += 1, R85 += 1 };
  s8 -> s1 [105, 65535] { R7947 += 1, R85 += 1 };
  s9 -> s1 [0, 110] { R7947 += 1, R85 += 1 };
  s9 -> s9 [0, 65535] { R7947 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R7947 += 1, R85 += 1 };
  s9 -> s1 [112, 65535] { R7947 += 1, R85 += 1 };
  s10 -> s1 [0, 114] { R7947 += 1, R85 += 1 };
  s10 -> s10 [0, 65535] { R7947 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R7947 += 1, R85 += 1 };
  s10 -> s1 [116, 65535] { R7947 += 1, R85 += 1 };
  s11 -> s1 [0, 115] { R7947 += 1, R85 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R7947 += 1 };
  s11 -> s12 [116, 116] { R7947 += 1, R85 += 1 };
  s11 -> s1 [117, 65535] { R7947 += 1, R85 += 1 };
  s12 -> s1 [0, 65535] { R7947 += 1, R85 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R7947 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R7948 += 1, R7949 += 1 };
  s0 -> s1 [0, 65535] { R7949 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R7949 += 1, R87 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R7949 += 1, R86 += 1, R87 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7949 += 1, R87 += 1, R57 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7949 += 1, R87 += 1, R57 += 1 };
  s2 -> s4 [0, 65535] { R7949 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7949 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R7951 += 1, R107 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R7951 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R7950 += 1, R7951 += 1 };
  s1 -> s1 [0, 65535] { R7951 += 1, R107 += 1, R44 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7951 += 1 };
  s2 -> s1 [0, 65535] { R7951 += 1, R107 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R7951 += 1, R106 += 1, R107 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7951 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R7953 += 1 };
  s0 -> s0 [0, 65535] { R7952 += 1, R7953 += 1 };
  s1 -> s1 [0, 65535] { R7953 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 42] { R7955 += 1, R109 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R7955 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R7954 += 1, R7955 += 1 };
  s0 -> s3 [43, 43] { R7955 += 1, R109 += 1, R56 += 1 };
  s0 -> s4 [43, 43] { R7955 += 1, R109 += 1, R56 += 1 };
  s0 -> s1 [44, 65535] { R7955 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [0, 42] { R7955 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [0, 65535] { R7955 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R7955 += 1, R109 += 1, R56 += 1 };
  s1 -> s4 [43, 43] { R7955 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [44, 65535] { R7955 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [0, 42] { R7955 += 1, R109 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R7955 += 1, R108 += 1, R109 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R7955 += 1, R109 += 1, R56 += 1 };
  s2 -> s4 [43, 43] { R7955 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [44, 65535] { R7955 += 1, R109 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R7955 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7955 += 1 };
  s4 -> s4 [0, 65535] { R7955 += 1, R109 += 1, R56 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7955 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R7957 += 1, R7809 += 1 };
  s0 -> s0 [0, 65535] { R7956 += 1, R7957 += 1 };
  s0 -> s2 [0, 65535] { R7957 += 1, R7808 += 1, R7809 += 1 };
  s0 -> s1 [66, 65535] { R7957 += 1, R7809 += 1 };
  s1 -> s1 [0, 64] { R7957 += 1, R7809 += 1 };
  s1 -> s1 [0, 65535] { R7957 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R7957 += 1, R7809 += 1 };
  s2 -> s1 [0, 64] { R7957 += 1, R7809 += 1 };
  s2 -> s2 [0, 65535] { R7957 += 1, R7808 += 1, R7809 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R7957 += 1, R7809 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R7959 += 1, R7810 += 1, R7811 += 1 };
  s0 -> s0 [0, 65535] { R7958 += 1, R7959 += 1 };
  s0 -> s2 [0, 65535] { R7959 += 1, R7811 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7959 += 1, R7810 += 1, R7811 += 1 };
  s1 -> s2 [0, 65535] { R7959 += 1, R7811 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7959 += 1 };
  s2 -> s2 [0, 65535] { R7959 += 1, R7811 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7959 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R7961 += 1, R7813 += 1 };
  s0 -> s2 [0, 65535] { R7961 += 1, R7812 += 1, R7813 += 1 };
  s0 -> s0 [0, 65535] { R7960 += 1, R7961 += 1 };
  s0 -> s1 [80, 65535] { R7961 += 1, R7813 += 1 };
  s1 -> s1 [0, 65] { R7961 += 1, R7813 += 1 };
  s1 -> s1 [0, 65535] { R7961 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R7961 += 1, R7813 += 1 };
  s2 -> s1 [0, 65] { R7961 += 1, R7813 += 1 };
  s2 -> s2 [0, 65535] { R7961 += 1, R7812 += 1, R7813 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R7961 += 1, R7813 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R7963 += 1, R7814 += 1, R7815 += 1 };
  s0 -> s0 [0, 65535] { R7962 += 1, R7963 += 1 };
  s0 -> s2 [0, 65535] { R7963 += 1, R7815 += 1, R667 += 1 };
  s1 -> s1 [0, 65535] { R7963 += 1, R7814 += 1, R7815 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7963 += 1, R7815 += 1, R667 += 1 };
  s2 -> s3 [0, 65535] { R7963 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7963 += 1, R7815 += 1, R667 += 1 };
  s3 -> s3 [0, 65535] { R7963 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 81] { R7965 += 1, R7817 += 1 };
  s0 -> s0 [0, 65535] { R7964 += 1, R7965 += 1 };
  s0 -> s2 [0, 65535] { R7965 += 1, R7817 += 1, R669 += 1 };
  s0 -> s3 [0, 65535] { R7965 += 1, R7816 += 1, R7817 += 1 };
  s0 -> s1 [83, 65535] { R7965 += 1, R7817 += 1 };
  s1 -> s1 [0, 81] { R7965 += 1, R7817 += 1 };
  s1 -> s1 [0, 65535] { R7965 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R7965 += 1, R7817 += 1 };
  s2 -> s1 [0, 81] { R7965 += 1, R7817 += 1 };
  s2 -> s2 [0, 65535] { R7965 += 1, R7817 += 1, R669 += 1 };
  s2 -> s5 [0, 65535] { R7965 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R7965 += 1, R7817 += 1 };
  s3 -> s1 [0, 81] { R7965 += 1, R7817 += 1 };
  s3 -> s2 [0, 65535] { R7965 += 1, R7817 += 1, R669 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7965 += 1, R7816 += 1, R7817 += 1 };
  s3 -> s1 [83, 65535] { R7965 += 1, R7817 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7965 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 79] { R7967 += 1, R7819 += 1 };
  s0 -> s2 [0, 65535] { R7967 += 1, R7819 += 1, R671 += 1 };
  s0 -> s0 [0, 65535] { R7966 += 1, R7967 += 1 };
  s0 -> s3 [0, 65535] { R7967 += 1, R7818 += 1, R7819 += 1 };
  s0 -> s1 [81, 65535] { R7967 += 1, R7819 += 1 };
  s1 -> s1 [0, 79] { R7967 += 1, R7819 += 1 };
  s1 -> s1 [0, 65535] { R7967 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R7967 += 1, R7819 += 1 };
  s2 -> s1 [0, 79] { R7967 += 1, R7819 += 1 };
  s2 -> s2 [0, 65535] { R7967 += 1, R7819 += 1, R671 += 1 };
  s2 -> s5 [0, 65535] { R7967 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R7967 += 1, R7819 += 1 };
  s3 -> s1 [0, 79] { R7967 += 1, R7819 += 1 };
  s3 -> s2 [0, 65535] { R7967 += 1, R7819 += 1, R671 += 1 };
  s3 -> s3 [0, 65535] { R7967 += 1, R7818 += 1, R7819 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R7967 += 1, R7819 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7967 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s0 [0, 65535] { R7968 += 1, R7969 += 1 };
  s0 -> s1 [0, 65535] { R7969 += 1, R7821 += 1, R676 += 1, R677 += 1 };
  s0 -> s2 [0, 65535] { R7969 += 1, R7821 += 1, R675 += 1, R676 += 1 };
  s0 -> s3 [0, 65535] { R7969 += 1, R7820 += 1, R7821 += 1 };
  s1 -> s1 [0, 65535] { R7969 += 1, R7821 += 1, R676 += 1, R677 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R7969 += 1, R7821 += 1 };
  s1 -> s5 [0, 65535] { R7969 += 1 };
  s2 -> s1 [0, 65535] { R7969 += 1, R7821 += 1, R676 += 1, R677 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7969 += 1, R7821 += 1, R675 += 1, R676 += 1 };
  s2 -> s5 [0, 65535] { R7969 += 1 };
  s3 -> s1 [0, 65535] { R7969 += 1, R7821 += 1, R676 += 1, R677 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7969 += 1, R7821 += 1, R675 += 1, R676 += 1 };
  s3 -> s3 [0, 65535] { R7969 += 1, R7820 += 1, R7821 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7969 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7969 += 1, R7821 += 1 };
  s6 -> s5 [0, 65535] { R7969 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 107] { R7971 += 1, R7823 += 1, R681 += 1 };
  s0 -> s2 [0, 65535] { R7971 += 1, R7823 += 1, R680 += 1, R681 += 1 };
  s0 -> s0 [0, 65535] { R7970 += 1, R7971 += 1 };
  s0 -> s3 [0, 65535] { R7971 += 1, R7822 += 1, R7823 += 1 };
  s0 -> s4 [108, 108] { R7971 += 1, R7823 += 1, R681 += 1 };
  s0 -> s1 [109, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s1 -> s5 [0, 65535] { R7971 += 1 };
  s1 -> s15 [0, 65535] { R7971 += 1, R7823 += 1 };
  s1 -> s1 [0, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 107] { R7971 += 1, R7823 += 1, R681 += 1 };
  s2 -> s5 [0, 65535] { R7971 += 1 };
  s2 -> s2 [0, 65535] { R7971 += 1, R7823 += 1, R680 += 1, R681 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [108, 108] { R7971 += 1, R7823 += 1, R681 += 1 };
  s2 -> s1 [109, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s3 -> s1 [0, 107] { R7971 += 1, R7823 += 1, R681 += 1 };
  s3 -> s2 [0, 65535] { R7971 += 1, R7823 += 1, R680 += 1, R681 += 1 };
  s3 -> s3 [0, 65535] { R7971 += 1, R7822 += 1, R7823 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [108, 108] { R7971 += 1, R7823 += 1, R681 += 1 };
  s3 -> s1 [109, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s4 -> s1 [0, 110] { R7971 += 1, R7823 += 1, R681 += 1 };
  s4 -> s5 [0, 65535] { R7971 += 1 };
  s4 -> s4 [0, 65535] { R7971 += 1, R7823 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [111, 111] { R7971 += 1, R7823 += 1, R681 += 1 };
  s4 -> s1 [112, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s5 -> s5 [0, 65535] { R7971 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R7971 += 1, R7823 += 1, R681 += 1 };
  s7 -> s5 [0, 65535] { R7971 += 1 };
  s7 -> s7 [0, 65535] { R7971 += 1, R7823 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [99, 99] { R7971 += 1, R7823 += 1, R681 += 1 };
  s7 -> s1 [100, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s8 -> s1 [0, 96] { R7971 += 1, R7823 += 1, R681 += 1 };
  s8 -> s5 [0, 65535] { R7971 += 1 };
  s8 -> s8 [0, 65535] { R7971 += 1, R7823 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [97, 97] { R7971 += 1, R7823 += 1, R681 += 1 };
  s8 -> s1 [98, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s9 -> s1 [0, 107] { R7971 += 1, R7823 += 1, R681 += 1 };
  s9 -> s5 [0, 65535] { R7971 += 1 };
  s9 -> s9 [0, 65535] { R7971 += 1, R7823 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s10 [108, 108] { R7971 += 1, R7823 += 1, R681 += 1 };
  s9 -> s1 [109, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s10 -> s1 [0, 103] { R7971 += 1, R7823 += 1, R681 += 1 };
  s10 -> s5 [0, 65535] { R7971 += 1 };
  s10 -> s10 [0, 65535] { R7971 += 1, R7823 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s11 [104, 104] { R7971 += 1, R7823 += 1, R681 += 1 };
  s10 -> s1 [105, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s11 -> s1 [0, 110] { R7971 += 1, R7823 += 1, R681 += 1 };
  s11 -> s5 [0, 65535] { R7971 += 1 };
  s11 -> s11 [0, 65535] { R7971 += 1, R7823 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s12 [111, 111] { R7971 += 1, R7823 += 1, R681 += 1 };
  s11 -> s1 [112, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s12 -> s1 [0, 114] { R7971 += 1, R7823 += 1, R681 += 1 };
  s12 -> s5 [0, 65535] { R7971 += 1 };
  s12 -> s12 [0, 65535] { R7971 += 1, R7823 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s13 [115, 115] { R7971 += 1, R7823 += 1, R681 += 1 };
  s12 -> s1 [116, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s13 -> s1 [0, 115] { R7971 += 1, R7823 += 1, R681 += 1 };
  s13 -> s5 [0, 65535] { R7971 += 1 };
  s13 -> s13 [0, 65535] { R7971 += 1, R7823 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s14 [116, 116] { R7971 += 1, R7823 += 1, R681 += 1 };
  s13 -> s1 [117, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s14 -> s1 [0, 65535] { R7971 += 1, R7823 += 1, R681 += 1 };
  s15 -> s5 [0, 65535] { R7971 += 1 };
  s15 -> s15 [0, 65535] { R7971 += 1, R7823 += 1 };
  s15 -> s6 [0, 65535];
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 79] { R7973 += 1, R7825 += 1, R685 += 1 };
  s0 -> s0 [0, 65535] { R7972 += 1, R7973 += 1 };
  s0 -> s2 [0, 65535] { R7973 += 1, R7824 += 1, R7825 += 1 };
  s0 -> s3 [0, 65535] { R7973 += 1, R7825 += 1, R684 += 1, R685 += 1 };
  s0 -> s1 [81, 65535] { R7973 += 1, R7825 += 1, R685 += 1 };
  s1 -> s1 [0, 79] { R7973 += 1, R7825 += 1, R685 += 1 };
  s1 -> s4 [0, 65535] { R7973 += 1 };
  s1 -> s1 [0, 65535] { R7973 += 1, R7825 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R7973 += 1, R7825 += 1, R685 += 1 };
  s2 -> s1 [0, 79] { R7973 += 1, R7825 += 1, R685 += 1 };
  s2 -> s2 [0, 65535] { R7973 += 1, R7824 += 1, R7825 += 1 };
  s2 -> s3 [0, 65535] { R7973 += 1, R7825 += 1, R684 += 1, R685 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R7973 += 1, R7825 += 1, R685 += 1 };
  s3 -> s1 [0, 79] { R7973 += 1, R7825 += 1, R685 += 1 };
  s3 -> s4 [0, 65535] { R7973 += 1 };
  s3 -> s3 [0, 65535] { R7973 += 1, R7825 += 1, R684 += 1, R685 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R7973 += 1, R7825 += 1, R685 += 1 };
  s4 -> s4 [0, 65535] { R7973 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 65535] { R7975 += 1, R7827 += 1, R689 += 1, R690 += 1 };
  s0 -> s0 [0, 65535] { R7974 += 1, R7975 += 1 };
  s0 -> s2 [0, 65535] { R7975 += 1, R7827 += 1, R690 += 1, R691 += 1 };
  s0 -> s3 [0, 65535] { R7975 += 1, R7826 += 1, R7827 += 1 };
  s1 -> s5 [0, 65535] { R7975 += 1 };
  s1 -> s1 [0, 65535] { R7975 += 1, R7827 += 1, R689 += 1, R690 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7975 += 1, R7827 += 1, R690 += 1, R691 += 1 };
  s2 -> s5 [0, 65535] { R7975 += 1 };
  s2 -> s6 [0, 65535] { R7975 += 1, R7827 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7975 += 1, R7827 += 1, R690 += 1, R691 += 1 };
  s3 -> s1 [0, 65535] { R7975 += 1, R7827 += 1, R689 += 1, R690 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7975 += 1, R7827 += 1, R690 += 1, R691 += 1 };
  s3 -> s3 [0, 65535] { R7975 += 1, R7826 += 1, R7827 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7975 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7975 += 1 };
  s6 -> s6 [0, 65535] { R7975 += 1, R7827 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s0 -> s2 [0, 65535] { R7977 += 1, R7829 += 1, R694 += 1, R695 += 1 };
  s0 -> s0 [0, 65535] { R7976 += 1, R7977 += 1 };
  s0 -> s3 [0, 65535] { R7977 += 1, R7828 += 1, R7829 += 1 };
  s0 -> s1 [91, 107] { R7977 += 1, R7829 += 1, R695 += 1 };
  s0 -> s4 [108, 108] { R7977 += 1, R7829 += 1, R695 += 1 };
  s0 -> s1 [109, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s1 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7977 += 1, R7829 += 1 };
  s1 -> s6 [0, 65535] { R7977 += 1 };
  s1 -> s1 [91, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s2 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7977 += 1, R7829 += 1, R694 += 1, R695 += 1 };
  s2 -> s6 [0, 65535] { R7977 += 1 };
  s2 -> s1 [91, 107] { R7977 += 1, R7829 += 1, R695 += 1 };
  s2 -> s4 [108, 108] { R7977 += 1, R7829 += 1, R695 += 1 };
  s2 -> s1 [109, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s3 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7977 += 1, R7829 += 1, R694 += 1, R695 += 1 };
  s3 -> s3 [0, 65535] { R7977 += 1, R7828 += 1, R7829 += 1 };
  s3 -> s1 [91, 107] { R7977 += 1, R7829 += 1, R695 += 1 };
  s3 -> s4 [108, 108] { R7977 += 1, R7829 += 1, R695 += 1 };
  s3 -> s1 [109, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s4 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7977 += 1, R7829 += 1 };
  s4 -> s6 [0, 65535] { R7977 += 1 };
  s4 -> s1 [91, 110] { R7977 += 1, R7829 += 1, R695 += 1 };
  s4 -> s7 [111, 111] { R7977 += 1, R7829 += 1, R695 += 1 };
  s4 -> s1 [112, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7977 += 1 };
  s7 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7977 += 1, R7829 += 1 };
  s7 -> s6 [0, 65535] { R7977 += 1 };
  s7 -> s1 [91, 98] { R7977 += 1, R7829 += 1, R695 += 1 };
  s7 -> s8 [99, 99] { R7977 += 1, R7829 += 1, R695 += 1 };
  s7 -> s1 [100, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s8 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R7977 += 1, R7829 += 1 };
  s8 -> s6 [0, 65535] { R7977 += 1 };
  s8 -> s1 [91, 96] { R7977 += 1, R7829 += 1, R695 += 1 };
  s8 -> s9 [97, 97] { R7977 += 1, R7829 += 1, R695 += 1 };
  s8 -> s1 [98, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s9 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R7977 += 1, R7829 += 1 };
  s9 -> s6 [0, 65535] { R7977 += 1 };
  s9 -> s1 [91, 107] { R7977 += 1, R7829 += 1, R695 += 1 };
  s9 -> s10 [108, 108] { R7977 += 1, R7829 += 1, R695 += 1 };
  s9 -> s1 [109, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s10 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R7977 += 1, R7829 += 1 };
  s10 -> s6 [0, 65535] { R7977 += 1 };
  s10 -> s1 [91, 103] { R7977 += 1, R7829 += 1, R695 += 1 };
  s10 -> s11 [104, 104] { R7977 += 1, R7829 += 1, R695 += 1 };
  s10 -> s1 [105, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s11 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R7977 += 1, R7829 += 1 };
  s11 -> s6 [0, 65535] { R7977 += 1 };
  s11 -> s1 [91, 110] { R7977 += 1, R7829 += 1, R695 += 1 };
  s11 -> s12 [111, 111] { R7977 += 1, R7829 += 1, R695 += 1 };
  s11 -> s1 [112, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s12 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R7977 += 1, R7829 += 1 };
  s12 -> s6 [0, 65535] { R7977 += 1 };
  s12 -> s1 [91, 114] { R7977 += 1, R7829 += 1, R695 += 1 };
  s12 -> s13 [115, 115] { R7977 += 1, R7829 += 1, R695 += 1 };
  s12 -> s1 [116, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s13 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s13 -> s13 [0, 65535] { R7977 += 1, R7829 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R7977 += 1 };
  s13 -> s1 [91, 115] { R7977 += 1, R7829 += 1, R695 += 1 };
  s13 -> s14 [116, 116] { R7977 += 1, R7829 += 1, R695 += 1 };
  s13 -> s1 [117, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  s14 -> s1 [0, 80] { R7977 += 1, R7829 += 1, R695 += 1 };
  s14 -> s1 [91, 65535] { R7977 += 1, R7829 += 1, R695 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R7979 += 1, R7831 += 1, R699 += 1, R700 += 1 };
  s0 -> s2 [0, 65535] { R7979 += 1, R7830 += 1, R7831 += 1 };
  s0 -> s0 [0, 65535] { R7978 += 1, R7979 += 1 };
  s0 -> s3 [0, 65535] { R7979 += 1, R7831 += 1, R700 += 1, R701 += 1 };
  s1 -> s1 [0, 65535] { R7979 += 1, R7831 += 1, R699 += 1, R700 += 1 };
  s1 -> s4 [0, 65535] { R7979 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R7979 += 1, R7831 += 1, R700 += 1, R701 += 1 };
  s2 -> s1 [0, 65535] { R7979 += 1, R7831 += 1, R699 += 1, R700 += 1 };
  s2 -> s2 [0, 65535] { R7979 += 1, R7830 += 1, R7831 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R7979 += 1, R7831 += 1, R700 += 1, R701 += 1 };
  s3 -> s4 [0, 65535] { R7979 += 1 };
  s3 -> s5 [0, 65535] { R7979 += 1, R7831 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7979 += 1, R7831 += 1, R700 += 1, R701 += 1 };
  s4 -> s4 [0, 65535] { R7979 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R7979 += 1 };
  s5 -> s5 [0, 65535] { R7979 += 1, R7831 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R7981 += 1, R7832 += 1, R7833 += 1 };
  s0 -> s2 [0, 65535] { R7981 += 1, R7833 += 1 };
  s0 -> s0 [0, 65535] { R7980 += 1, R7981 += 1 };
  s1 -> s1 [0, 65535] { R7981 += 1, R7832 += 1, R7833 += 1 };
  s1 -> s2 [0, 65535] { R7981 += 1, R7833 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7981 += 1 };
  s2 -> s2 [0, 65535] { R7981 += 1, R7833 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7981 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 65535] { R7983 += 1, R7835 += 1 };
  s0 -> s0 [0, 65535] { R7982 += 1, R7983 += 1 };
  s0 -> s2 [0, 65535] { R7983 += 1, R7834 += 1, R7835 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7983 += 1 };
  s1 -> s1 [0, 65535] { R7983 += 1, R7835 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7983 += 1, R7835 += 1 };
  s2 -> s2 [0, 65535] { R7983 += 1, R7834 += 1, R7835 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7983 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 65535] { R7985 += 1, R7836 += 1, R7837 += 1 };
  s0 -> s0 [0, 65535] { R7984 += 1, R7985 += 1 };
  s0 -> s2 [0, 65535] { R7985 += 1, R7837 += 1, R7360 += 1, R7361 += 1 };
  s0 -> s3 [0, 65535] { R7985 += 1, R7837 += 1, R7359 += 1, R7360 += 1 };
  s1 -> s1 [0, 65535] { R7985 += 1, R7836 += 1, R7837 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7985 += 1, R7837 += 1, R7360 += 1, R7361 += 1 };
  s1 -> s3 [0, 65535] { R7985 += 1, R7837 += 1, R7359 += 1, R7360 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7985 += 1 };
  s2 -> s2 [0, 65535] { R7985 += 1, R7837 += 1, R7360 += 1, R7361 += 1 };
  s2 -> s6 [0, 65535] { R7985 += 1, R7837 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7985 += 1 };
  s3 -> s2 [0, 65535] { R7985 += 1, R7837 += 1, R7360 += 1, R7361 += 1 };
  s3 -> s3 [0, 65535] { R7985 += 1, R7837 += 1, R7359 += 1, R7360 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7985 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7985 += 1 };
  s6 -> s6 [0, 65535] { R7985 += 1, R7837 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 65535] { R7987 += 1, R7839 += 1 };
  s0 -> s2 [0, 65535] { R7987 += 1, R7838 += 1, R7839 += 1 };
  s0 -> s0 [0, 65535] { R7986 += 1, R7987 += 1 };
  s1 -> s1 [0, 65535] { R7987 += 1, R7839 += 1 };
  s1 -> s4 [0, 65535] { R7987 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7987 += 1, R7839 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7987 += 1, R7838 += 1, R7839 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7987 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s0 [0, 65535] { R7988 += 1, R7989 += 1 };
  s0 -> s1 [0, 65535] { R7989 += 1, R7841 += 1 };
  s0 -> s2 [0, 65535] { R7989 += 1, R7841 += 1, R7806 += 1, R7807 += 1 };
  s0 -> s3 [0, 65535] { R7989 += 1, R7840 += 1, R7841 += 1 };
  s1 -> s1 [0, 65535] { R7989 += 1, R7841 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7989 += 1 };
  s2 -> s1 [0, 65535] { R7989 += 1, R7841 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7989 += 1 };
  s2 -> s2 [0, 65535] { R7989 += 1, R7841 += 1, R7806 += 1, R7807 += 1 };
  s3 -> s1 [0, 65535] { R7989 += 1, R7841 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7989 += 1, R7841 += 1, R7806 += 1, R7807 += 1 };
  s3 -> s3 [0, 65535] { R7989 += 1, R7840 += 1, R7841 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7989 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 65535] { R7991 += 1, R7870 += 1, R7871 += 1 };
  s0 -> s0 [0, 65535] { R7990 += 1, R7991 += 1 };
  s0 -> s2 [0, 65535] { R7991 += 1, R7871 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R7991 += 1, R7870 += 1, R7871 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7991 += 1, R7871 += 1, R45 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7991 += 1 };
  s2 -> s2 [0, 65535] { R7991 += 1, R7871 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7991 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R7993 += 1, R7873 += 1 };
  s0 -> s2 [0, 65535] { R7993 += 1, R7872 += 1, R7873 += 1 };
  s0 -> s0 [0, 65535] { R7992 += 1, R7993 += 1 };
  s0 -> s3 [65, 65] { R7993 += 1, R7873 += 1 };
  s0 -> s4 [65, 65] { R7993 += 1, R7873 += 1 };
  s0 -> s5 [80, 80] { R7993 += 1, R7873 += 1 };
  s0 -> s1 [81, 65535] { R7993 += 1, R7873 += 1 };
  s1 -> s1 [0, 64] { R7993 += 1, R7873 += 1 };
  s1 -> s3 [65, 65] { R7993 += 1, R7873 += 1 };
  s1 -> s4 [65, 65] { R7993 += 1, R7873 += 1 };
  s1 -> s5 [80, 80] { R7993 += 1, R7873 += 1 };
  s1 -> s1 [81, 65535] { R7993 += 1, R7873 += 1 };
  s2 -> s1 [0, 64] { R7993 += 1, R7873 += 1 };
  s2 -> s2 [0, 65535] { R7993 += 1, R7872 += 1, R7873 += 1 };
  s2 -> s3 [65, 65] { R7993 += 1, R7873 += 1 };
  s2 -> s4 [65, 65] { R7993 += 1, R7873 += 1 };
  s2 -> s5 [80, 80] { R7993 += 1, R7873 += 1 };
  s2 -> s1 [81, 65535] { R7993 += 1, R7873 += 1 };
  s3 -> s3 [0, 65] { R7993 += 1, R7873 += 1 };
  s3 -> s7 [80, 80] { R7993 += 1, R7873 += 1 };
  s3 -> s3 [81, 65535] { R7993 += 1, R7873 += 1 };
  s5 -> s5 [0, 64] { R7993 += 1, R7873 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7993 += 1 };
  s5 -> s7 [65, 65] { R7993 += 1, R7873 += 1 };
  s5 -> s8 [65, 65] { R7993 += 1, R7873 += 1 };
  s5 -> s5 [80, 65535] { R7993 += 1, R7873 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R7993 += 1, R7873 += 1 };
  s7 -> s7 [0, 65535] { R7993 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R7993 += 1, R7873 += 1 };
  s8 -> s8 [0, 65535] { R7993 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R7995 += 1, R7875 += 1, R666 += 1 };
  s0 -> s2 [0, 65535] { R7995 += 1, R7874 += 1, R7875 += 1 };
  s0 -> s0 [0, 65535] { R7994 += 1, R7995 += 1 };
  s0 -> s3 [65, 65] { R7995 += 1, R7875 += 1, R666 += 1 };
  s0 -> s4 [65, 65] { R7995 += 1, R7875 += 1, R666 += 1 };
  s0 -> s1 [66, 65535] { R7995 += 1, R7875 += 1, R666 += 1 };
  s1 -> s1 [0, 64] { R7995 += 1, R7875 += 1, R666 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7995 += 1 };
  s1 -> s3 [65, 65] { R7995 += 1, R7875 += 1, R666 += 1 };
  s1 -> s4 [65, 65] { R7995 += 1, R7875 += 1, R666 += 1 };
  s1 -> s1 [66, 65535] { R7995 += 1, R7875 += 1, R666 += 1 };
  s2 -> s1 [0, 64] { R7995 += 1, R7875 += 1, R666 += 1 };
  s2 -> s2 [0, 65535] { R7995 += 1, R7874 += 1, R7875 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7995 += 1, R7875 += 1, R666 += 1 };
  s2 -> s4 [65, 65] { R7995 += 1, R7875 += 1, R666 += 1 };
  s2 -> s1 [66, 65535] { R7995 += 1, R7875 += 1, R666 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7995 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7995 += 1 };
  s4 -> s4 [0, 65535] { R7995 += 1, R7875 += 1, R666 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7995 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R7997 += 1, R7877 += 1, R668 += 1 };
  s0 -> s2 [0, 65535] { R7997 += 1, R7876 += 1, R7877 += 1 };
  s0 -> s0 [0, 65535] { R7996 += 1, R7997 += 1 };
  s0 -> s3 [65, 65] { R7997 += 1, R7877 += 1, R668 += 1 };
  s0 -> s4 [65, 65] { R7997 += 1, R7877 += 1, R668 += 1 };
  s0 -> s1 [66, 65535] { R7997 += 1, R7877 += 1, R668 += 1 };
  s1 -> s1 [0, 64] { R7997 += 1, R7877 += 1, R668 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7997 += 1 };
  s1 -> s3 [65, 65] { R7997 += 1, R7877 += 1, R668 += 1 };
  s1 -> s4 [65, 65] { R7997 += 1, R7877 += 1, R668 += 1 };
  s1 -> s1 [66, 65535] { R7997 += 1, R7877 += 1, R668 += 1 };
  s2 -> s1 [0, 64] { R7997 += 1, R7877 += 1, R668 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7997 += 1, R7876 += 1, R7877 += 1 };
  s2 -> s3 [65, 65] { R7997 += 1, R7877 += 1, R668 += 1 };
  s2 -> s4 [65, 65] { R7997 += 1, R7877 += 1, R668 += 1 };
  s2 -> s1 [66, 65535] { R7997 += 1, R7877 += 1, R668 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7997 += 1 };
  s3 -> s3 [0, 65535] { R7997 += 1, R7877 += 1, R668 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7997 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7997 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R7999 += 1, R7879 += 1, R670 += 1 };
  s0 -> s2 [0, 65535] { R7999 += 1, R7878 += 1, R7879 += 1 };
  s0 -> s0 [0, 65535] { R7998 += 1, R7999 += 1 };
  s0 -> s3 [65, 65] { R7999 += 1, R7879 += 1, R670 += 1 };
  s0 -> s4 [65, 65] { R7999 += 1, R7879 += 1, R670 += 1 };
  s0 -> s1 [66, 65535] { R7999 += 1, R7879 += 1, R670 += 1 };
  s1 -> s1 [0, 64] { R7999 += 1, R7879 += 1, R670 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7999 += 1 };
  s1 -> s3 [65, 65] { R7999 += 1, R7879 += 1, R670 += 1 };
  s1 -> s4 [65, 65] { R7999 += 1, R7879 += 1, R670 += 1 };
  s1 -> s1 [66, 65535] { R7999 += 1, R7879 += 1, R670 += 1 };
  s2 -> s1 [0, 64] { R7999 += 1, R7879 += 1, R670 += 1 };
  s2 -> s2 [0, 65535] { R7999 += 1, R7878 += 1, R7879 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7999 += 1, R7879 += 1, R670 += 1 };
  s2 -> s4 [65, 65] { R7999 += 1, R7879 += 1, R670 += 1 };
  s2 -> s1 [66, 65535] { R7999 += 1, R7879 += 1, R670 += 1 };
  s3 -> s3 [0, 65535] { R7999 += 1, R7879 += 1, R670 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7999 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7999 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7999 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s0 -> s2 [0, 65535] { R8001 += 1, R7880 += 1, R7881 += 1 };
  s0 -> s0 [0, 65535] { R8000 += 1, R8001 += 1 };
  s0 -> s3 [65, 65] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s0 -> s4 [65, 65] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s0 -> s1 [66, 65535] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 64] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 65535] { R8001 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s1 -> s4 [65, 65] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [66, 65535] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [0, 64] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s2 -> s2 [0, 65535] { R8001 += 1, R7880 += 1, R7881 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s2 -> s4 [65, 65] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [66, 65535] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s3 -> s3 [0, 65535] { R8001 += 1, R7881 += 1, R672 += 1, R673 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8001 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8001 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8001 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 64] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s0 -> s0 [0, 65535] { R8002 += 1, R8003 += 1 };
  s0 -> s2 [0, 65535] { R8003 += 1, R7882 += 1, R7883 += 1 };
  s0 -> s3 [65, 65] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s0 -> s4 [65, 65] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s0 -> s1 [66, 65535] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 64] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8003 += 1 };
  s1 -> s3 [65, 65] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s1 -> s4 [65, 65] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [66, 65535] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [0, 64] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8003 += 1, R7882 += 1, R7883 += 1 };
  s2 -> s3 [65, 65] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s2 -> s4 [65, 65] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [66, 65535] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s3 -> s3 [0, 65535] { R8003 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8003 += 1, R7883 += 1, R678 += 1, R679 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8003 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8003 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s1 [0, 64] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s0 -> s0 [0, 65535] { R8004 += 1, R8005 += 1 };
  s0 -> s2 [0, 65535] { R8005 += 1, R7884 += 1, R7885 += 1 };
  s0 -> s3 [65, 65] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s0 -> s4 [65, 65] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s0 -> s1 [66, 65535] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 64] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 65535] { R8005 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s1 -> s4 [65, 65] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [66, 65535] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [0, 64] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s2 -> s2 [0, 65535] { R8005 += 1, R7884 += 1, R7885 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s2 -> s4 [65, 65] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [66, 65535] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s3 -> s3 [0, 65535] { R8005 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8005 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8005 += 1, R7885 += 1, R682 += 1, R683 += 1 };
  s5 -> s5 [0, 65535] { R8005 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 64] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s0 -> s2 [0, 65535] { R8007 += 1, R7886 += 1, R7887 += 1 };
  s0 -> s0 [0, 65535] { R8006 += 1, R8007 += 1 };
  s0 -> s3 [65, 65] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s0 -> s4 [65, 65] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s0 -> s1 [66, 65535] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 64] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8007 += 1 };
  s1 -> s3 [65, 65] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s1 -> s4 [65, 65] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [66, 65535] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [0, 64] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8007 += 1, R7886 += 1, R7887 += 1 };
  s2 -> s3 [65, 65] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s2 -> s4 [65, 65] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [66, 65535] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s3 -> s3 [0, 65535] { R8007 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8007 += 1, R7887 += 1, R686 += 1, R687 += 1 };
  s4 -> s6 [0, 65535] { R8007 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8007 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s1 [0, 64] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s0 -> s2 [0, 65535] { R8009 += 1, R7888 += 1, R7889 += 1 };
  s0 -> s0 [0, 65535] { R8008 += 1, R8009 += 1 };
  s0 -> s3 [65, 65] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s0 -> s4 [65, 65] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s0 -> s1 [66, 65535] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 64] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 65535] { R8009 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s1 -> s4 [65, 65] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [66, 65535] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [0, 64] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s2 -> s2 [0, 65535] { R8009 += 1, R7888 += 1, R7889 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s2 -> s4 [65, 65] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [66, 65535] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s3 -> s6 [0, 65535] { R8009 += 1 };
  s3 -> s3 [0, 65535] { R8009 += 1, R7889 += 1, R692 += 1, R693 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8009 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8009 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s0 -> s0 [0, 65535] { R8010 += 1, R8011 += 1 };
  s0 -> s2 [0, 65535] { R8011 += 1, R7890 += 1, R7891 += 1 };
  s0 -> s3 [65, 65] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s0 -> s4 [65, 65] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s0 -> s1 [66, 65535] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 64] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 65535] { R8011 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s1 -> s4 [65, 65] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [66, 65535] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [0, 64] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s2 -> s2 [0, 65535] { R8011 += 1, R7890 += 1, R7891 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s2 -> s4 [65, 65] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [66, 65535] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s3 -> s6 [0, 65535] { R8011 += 1 };
  s3 -> s3 [0, 65535] { R8011 += 1, R7891 += 1, R696 += 1, R697 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8011 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8011 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s2 [0, 64] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s3 [0, 65535] { R8013 += 1, R7892 += 1, R7893 += 1 };
  s0 -> s0 [0, 65535] { R8012 += 1, R8013 += 1 };
  s0 -> s4 [65, 65] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s5 [65, 65] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s6 [65, 65] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s7 [65, 65] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s0 -> s1 [66, 65535] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s0 -> s2 [66, 65535] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s1 -> s1 [0, 64] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s11 [0, 64] { R8013 += 1, R7893 += 1 };
  s1 -> s8 [65, 65] { R8013 += 1, R7893 += 1 };
  s1 -> s4 [65, 65] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s5 [65, 65] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s12 [65, 65] { R8013 += 1, R7893 += 1 };
  s1 -> s1 [66, 65535] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s1 -> s11 [66, 65535] { R8013 += 1, R7893 += 1 };
  s2 -> s1 [0, 64] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s2 [0, 64] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s2 -> s4 [65, 65] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s5 [65, 65] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s6 [65, 65] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s2 -> s7 [65, 65] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s2 -> s1 [66, 65535] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s2 -> s2 [66, 65535] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s1 [0, 64] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s2 [0, 64] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s3 [0, 65535] { R8013 += 1, R7892 += 1, R7893 += 1 };
  s3 -> s4 [65, 65] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s5 [65, 65] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s6 [65, 65] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s7 [65, 65] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s3 -> s1 [66, 65535] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s3 -> s2 [66, 65535] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s4 -> s8 [0, 65535] { R8013 += 1, R7893 += 1 };
  s4 -> s4 [0, 65535] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s6 -> s4 [0, 65535] { R8013 += 1, R7893 += 1, R7351 += 1, R7352 += 1 };
  s6 -> s6 [0, 65535] { R8013 += 1, R7893 += 1, R7350 += 1, R7351 += 1 };
  s8 -> s8 [0, 65535] { R8013 += 1, R7893 += 1 };
  s8 -> s9 [0, 65535] { R8013 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R8013 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R8013 += 1, R7893 += 1 };
  s11 -> s11 [0, 65535] { R8013 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R8013 += 1, R7893 += 1 };
  s11 -> s12 [65, 65] { R8013 += 1, R7893 += 1 };
  s11 -> s11 [66, 65535] { R8013 += 1, R7893 += 1 };
  s12 -> s12 [0, 65535] { R8013 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R8015 += 1, R7895 += 1 };
  s0 -> s2 [0, 65535] { R8015 += 1, R7894 += 1, R7895 += 1 };
  s0 -> s0 [0, 65535] { R8014 += 1, R8015 += 1 };
  s0 -> s3 [65, 65] { R8015 += 1, R7895 += 1 };
  s0 -> s4 [65, 65] { R8015 += 1, R7895 += 1 };
  s0 -> s1 [66, 65535] { R8015 += 1, R7895 += 1 };
  s1 -> s1 [0, 64] { R8015 += 1, R7895 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8015 += 1 };
  s1 -> s3 [65, 65] { R8015 += 1, R7895 += 1 };
  s1 -> s4 [65, 65] { R8015 += 1, R7895 += 1 };
  s1 -> s1 [66, 65535] { R8015 += 1, R7895 += 1 };
  s2 -> s1 [0, 64] { R8015 += 1, R7895 += 1 };
  s2 -> s2 [0, 65535] { R8015 += 1, R7894 += 1, R7895 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8015 += 1, R7895 += 1 };
  s2 -> s4 [65, 65] { R8015 += 1, R7895 += 1 };
  s2 -> s1 [66, 65535] { R8015 += 1, R7895 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8015 += 1, R7895 += 1 };
  s3 -> s6 [0, 65535] { R8015 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8015 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8015 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s0 -> s2 [0, 65535] { R8017 += 1, R7896 += 1, R7897 += 1 };
  s0 -> s0 [0, 65535] { R8016 += 1, R8017 += 1 };
  s0 -> s3 [65, 65] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s0 -> s4 [65, 65] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s0 -> s1 [66, 65535] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s1 -> s1 [0, 64] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s1 -> s1 [0, 65535] { R8017 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s1 -> s4 [65, 65] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s1 -> s1 [66, 65535] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s2 -> s1 [0, 64] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s2 -> s2 [0, 65535] { R8017 += 1, R7896 += 1, R7897 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s2 -> s4 [65, 65] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s2 -> s1 [66, 65535] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s3 -> s3 [0, 65535] { R8017 += 1, R7897 += 1, R7356 += 1, R7357 += 1 };
  s3 -> s6 [0, 65535] { R8017 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8017 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8017 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R8019 += 1, R7899 += 1 };
  s0 -> s2 [0, 65535] { R8019 += 1, R7898 += 1, R7899 += 1 };
  s0 -> s0 [0, 65535] { R8018 += 1, R8019 += 1 };
  s0 -> s3 [65, 65] { R8019 += 1, R7899 += 1 };
  s0 -> s4 [65, 65] { R8019 += 1, R7899 += 1 };
  s0 -> s1 [66, 65535] { R8019 += 1, R7899 += 1 };
  s1 -> s1 [0, 64] { R8019 += 1, R7899 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8019 += 1 };
  s1 -> s3 [65, 65] { R8019 += 1, R7899 += 1 };
  s1 -> s4 [65, 65] { R8019 += 1, R7899 += 1 };
  s1 -> s1 [66, 65535] { R8019 += 1, R7899 += 1 };
  s2 -> s1 [0, 64] { R8019 += 1, R7899 += 1 };
  s2 -> s2 [0, 65535] { R8019 += 1, R7898 += 1, R7899 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8019 += 1, R7899 += 1 };
  s2 -> s4 [65, 65] { R8019 += 1, R7899 += 1 };
  s2 -> s1 [66, 65535] { R8019 += 1, R7899 += 1 };
  s3 -> s3 [0, 65535] { R8019 += 1, R7899 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8019 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8019 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8019 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s0 -> s2 [0, 64] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s0 -> s3 [0, 65535] { R8021 += 1, R7900 += 1, R7901 += 1 };
  s0 -> s0 [0, 65535] { R8020 += 1, R8021 += 1 };
  s0 -> s4 [65, 65] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s0 -> s5 [65, 65] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s0 -> s6 [65, 65] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s0 -> s7 [65, 65] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s0 -> s1 [66, 79] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s0 -> s2 [66, 65535] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s0 -> s8 [80, 80] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s0 -> s1 [81, 65535] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s1 -> s1 [0, 64] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s1 -> s5 [65, 65] { R8021 += 1, R7901 += 1 };
  s1 -> s6 [65, 65] { R8021 += 1, R7901 += 1 };
  s1 -> s1 [66, 79] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s1 -> s1 [66, 65535] { R8021 += 1, R7901 += 1 };
  s1 -> s8 [80, 80] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s1 -> s1 [81, 65535] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s2 -> s1 [0, 64] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s2 -> s2 [0, 64] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s2 -> s4 [65, 65] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s2 -> s5 [65, 65] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s2 -> s6 [65, 65] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s2 -> s7 [65, 65] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s2 -> s1 [66, 79] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s2 -> s2 [66, 65535] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s2 -> s8 [80, 80] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s2 -> s1 [81, 65535] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s3 -> s1 [0, 64] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s3 -> s2 [0, 64] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s3 -> s3 [0, 65535] { R8021 += 1, R7900 += 1, R7901 += 1 };
  s3 -> s4 [65, 65] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s3 -> s5 [65, 65] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s3 -> s6 [65, 65] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s3 -> s7 [65, 65] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s3 -> s1 [66, 79] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s3 -> s2 [66, 65535] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s3 -> s8 [80, 80] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s3 -> s1 [81, 65535] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s5 -> s5 [0, 79] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s5 -> s5 [0, 65535] { R8021 += 1, R7901 += 1 };
  s5 -> s10 [80, 80] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s5 -> s5 [81, 65535] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s7 -> s5 [0, 79] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s7 -> s7 [0, 65535] { R8021 += 1, R7901 += 1, R7802 += 1, R7803 += 1 };
  s7 -> s10 [80, 80] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s7 -> s5 [81, 65535] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s8 -> s8 [0, 64] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s8 -> s8 [0, 65535] { R8021 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s8 -> s11 [65, 65] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s8 -> s8 [66, 65535] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8021 += 1, R7901 += 1, R7803 += 1, R7804 += 1 };
  s10 -> s12 [0, 65535] { R8021 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8021 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8021 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P105
automaton P105_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P39
automaton P39_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R6 = R7841 && R7 = R8021 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R82 = 0 && R83 = R7841 && R84 = 0 && R85 = R7841 && R86 = 0 && R87 = R7841 && R88 = 0 && R89 = R8021 && R90 = 0 && R91 = R8021 && R92 = 0 && R93 = R8021 && R115 + R114 = 0 && R7808 = 0 && R7809 = R7841 && R7810 = 0 && R7811 = R7841 && R7812 = 0 && R7813 = R7841 && R7814 = 0 && R7815 = R7841 && R7816 = 0 && R7817 = R7841 && R7818 = 0 && R7819 = R7841 && R7820 = 0 && R7821 = R7841 && R7822 = 0 && R7823 = R7841 && R7824 = 0 && R7825 = R7841 && R7826 = 0 && R7827 = R7841 && R7828 = 0 && R7829 = R7841 && R7830 = 0 && R7831 = R7841 && R7832 = 0 && R7833 = R7841 && R7834 = 0 && R7835 = R7841 && R7836 = 0 && R7837 = R7841 && R7838 = 0 && R7839 = R7841 && R7840 = 0 && R7842 = 0 && R7843 = R8021 && R7844 = 0 && R7845 = R8021 && R7846 = 0 && R7847 = R8021 && R7848 = 0 && R7849 = R8021 && R7850 = 0 && R7851 = R8021 && R7852 = 0 && R7853 = R8021 && R7854 = 0 && R7855 = R8021 && R7856 = 0 && R7857 = R8021 && R7858 = 0 && R7859 = R8021 && R7860 = 0 && R7861 = R8021 && R7862 = 0 && R7863 = R8021 && R7864 = 0 && R7865 = R8021 && R7866 = 0 && R7867 = R8021 && R7868 = 0 && R7869 = R8021 && R7872 = 0 && R7873 = 0 && R7892 = 0 && R7893 = 0 && R7900 = 0 && R7901 = 0 && R7930 = 10 && R7931 = R8021 && R7932 = 10 && R7933 = R8021 && R7934 = 10 && R7935 = R8021 && R7936 = 10 && R7937 = R8021 && R7938 = 10 && R7939 = R8021 && R7940 = 10 && R7941 = R8021 && R7942 = 10 && R7943 = R8021 && R7944 = 10 && R7945 = R8021 && R7946 = 10 && R7947 = R8021 && R7948 = 10 && R7949 = R8021 && R7950 = 10 && R7951 = R8021 && R7952 = 10 && R7953 = R8021 && R7954 = 10 && R7955 = R8021 && R7956 = 10 && R7957 = R8021 && R7958 = 10 && R7959 = R8021 && R7960 = 10 && R7961 = R8021 && R7962 = 10 && R7963 = R8021 && R7964 = 10 && R7965 = R8021 && R7966 = 10 && R7967 = R8021 && R7968 = 10 && R7969 = R8021 && R7970 = 10 && R7971 = R8021 && R7972 = 10 && R7973 = R8021 && R7974 = 10 && R7975 = R8021 && R7976 = 10 && R7977 = R8021 && R7978 = 10 && R7979 = R8021 && R7980 = 10 && R7981 = R8021 && R7982 = 10 && R7983 = R8021 && R7984 = 10 && R7985 = R8021 && R7986 = 10 && R7987 = R8021 && R7988 = 10 && R7989 = R8021 && R7990 = 10 && R7991 = R8021 && R7992 = 10 && R7993 = R8021 && R7994 = 10 && R7995 = R8021 && R7996 = 10 && R7997 = R8021 && R7998 = 10 && R7999 = R8021 && R8000 = 10 && R8001 = R8021 && R8002 = 10 && R8003 = R8021 && R8004 = 10 && R8005 = R8021 && R8006 = 10 && R8007 = R8021 && R8008 = 10 && R8009 = R8021 && R8010 = 10 && R8011 = R8021 && R8012 = 10 && R8013 = R8021 && R8014 = 10 && R8015 = R8021 && R8016 = 10 && R8017 = R8021 && R8018 = 10 && R8019 = R8021 && R8020 = 10 && R57 + R56 != 0 && R59 + R58 != 0 && R141 + R138 + R159 + R156 != 0 && R701 + R698 + R7807 + R7804 != 0 && R21 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && R31 < 1 && R117 + R116 < 1 && R119 + R118 < 1 && -1*R667 + -1*R666 < 1 && R669 + R668 < 1 && R671 + R670 < 1 && 0 < R7841 && 9 < R8021 && (R667 + R666 != 0 || R677 + R674 = 0 || (R675 + R672 = 0 && R676 + R673 = 0)) && (R667 + R666 != 0 || R677 + R674 = 0 || (R680 + R678 = 0 && R681 + R679 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R684 + R682 = 0 && R685 + R683 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R689 + R686 = 0 && R690 + R687 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R694 + R692 = 0 && R695 + R693 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R699 + R696 = 0 && R700 + R697 = 0)) && (R675 + R672 != 0 || R667 + R666 + -1*R676 + -1*R673 = 0 || R667 + R666 < 1) && (R680 + R678 != 0 || R667 + R666 + -1*R681 + -1*R679 = 0 || R667 + R666 < 1) && (R684 + R682 != 0 || R667 + R666 + -1*R685 + -1*R683 = 0 || R667 + R666 < 1) && (R689 + R686 != 0 || R667 + R666 + -1*R690 + -1*R687 = 0 || R667 + R666 < 1) && (R694 + R692 != 0 || R667 + R666 + -1*R695 + -1*R693 = 0 || R667 + R666 < 1) && (R699 + R696 != 0 || R667 + R666 + -1*R700 + -1*R697 = 0 || R667 + R666 < 1) && (R44 = 0 || (R106 = 0 && R107 = 0)) && (R44 = 0 || (R108 = 0 && R109 = 0)) && (R45 = 0 || (R7870 = 0 && R7871 = 0)) && (R45 = 0 || (R7874 = 0 && R7875 = 0)) && (R45 = 0 || (R7876 = 0 && R7877 = 0)) && (R45 = 0 || (R7878 = 0 && R7879 = 0)) && (R45 = 0 || (R7880 = 0 && R7881 = 0)) && (R45 = 0 || (R7882 = 0 && R7883 = 0)) && (R45 = 0 || (R7884 = 0 && R7885 = 0)) && (R45 = 0 || (R7886 = 0 && R7887 = 0)) && (R45 = 0 || (R7888 = 0 && R7889 = 0)) && (R45 = 0 || (R7890 = 0 && R7891 = 0)) && (R45 = 0 || (R7894 = 0 && R7895 = 0)) && (R45 = 0 || (R7896 = 0 && R7897 = 0)) && (R45 = 0 || (R7898 = 0 && R7899 = 0)) && (R48 = 0 || (R7902 = 0 && R7903 = 0)) && (R48 = 0 || (R7904 = 0 && R7905 = 0)) && (R48 = 0 || (R7906 = 0 && R7907 = 0)) && (R48 = 0 || (R7908 = 0 && R7909 = 0)) && (R48 = 0 || (R7910 = 0 && R7911 = 0)) && (R48 = 0 || (R7912 = 0 && R7913 = 0)) && (R48 = 0 || (R7914 = 0 && R7915 = 0)) && (R48 = 0 || (R7916 = 0 && R7917 = 0)) && (R48 = 0 || (R7918 = 0 && R7919 = 0)) && (R48 = 0 || (R7920 = 0 && R7921 = 0)) && (R48 = 0 || (R7922 = 0 && R7923 = 0)) && (R48 = 0 || (R7924 = 0 && R7925 = 0)) && (R48 = 0 || (R7926 = 0 && R7927 = 0)) && (R48 = 0 || (R7928 = 0 && R7929 = 0)) && (R49 = 0 || (R110 = 0 && R111 = 0)) && (R49 = 0 || (R112 = 0 && R113 = 0)) && (R125 + R122 = 0 || (R123 + R120 = 0 && R124 + R121 = 0)) && (R131 + R128 = 0 || (R129 + R126 = 0 && R130 + R127 = 0)) && (R131 + R128 = 0 || (R134 + R132 = 0 && R135 + R133 = 0)) && (R131 + R128 = 0 || (R139 + R136 = 0 && R140 + R137 = 0)) && (R147 + R144 = 0 || (R145 + R142 = 0 && R146 + R143 = 0)) && (R153 + R150 = 0 || (R151 + R148 = 0 && R152 + R149 = 0)) && (R153 + R150 = 0 || (R157 + R154 = 0 && R158 + R155 = 0)) && (R675 + R672 = 0 || R667 + R666 < 1) && (R680 + R678 = 0 || R667 + R666 < 1) && (R684 + R682 = 0 || R667 + R666 < 1) && (R689 + R686 = 0 || R667 + R666 < 1) && (R694 + R692 = 0 || R667 + R666 < 1) && (R699 + R696 = 0 || R667 + R666 < 1) && (R7355 + R7352 = 0 || (R7353 + R7350 = 0 && R7354 + R7351 = 0)) && (R7361 + R7358 = 0 || (R7359 + R7356 = 0 && R7360 + R7357 = 0)) && (R7361 + R7358 = 0 || (R7805 + R7802 = 0 && R7806 + R7803 = 0));
// End of Parikh automata intersection problem
