// Parikh automata intersection problem, generated by OSTRICH+
counter int R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R21, R22, R25, R28, R2920, R2921, R2922, R2923, R2924, R2925, R31, R3806, R3807, R3808, R3809, R3810, R3811, R3812, R3813, R3814, R3815, R3816, R3817, R3818, R3819, R3820, R3821, R3822, R3823, R3824, R3825, R3826, R3827, R3828, R3829, R3830, R3831, R3832, R3833, R3834, R3835, R3836, R3837, R3838, R3839, R3840, R3841, R3842, R3843, R3844, R3845, R3846, R3847, R3848, R3849, R3850, R3851, R3852, R3853, R3854, R3855, R3856, R3857, R3858, R3859, R3860, R3861, R3862, R3863, R3864, R3865, R3866, R3867, R3868, R3869, R3870, R3871, R3872, R3873, R3874, R3875, R3876, R3877, R3878, R3879, R3880, R3881, R3882, R3883, R3884, R3885, R3886, R3887, R3888, R3889, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R3900, R3901, R3902, R3903, R3904, R3905, R3906, R3907, R3908, R3909, R3910, R3911, R3912, R3913, R3914, R3915, R3916, R3917, R3918, R3919, R3920, R3921, R3922, R3923, R3924, R3925, R3926, R3927, R3928, R3929, R3930, R3931, R3932, R3933, R3934, R3935, R3936, R3937, R3938, R3939, R3940, R3941, R3942, R3943, R3944, R3945, R3946, R3947, R3948, R3949, R3950, R3951, R3952, R3953, R3954, R3955, R3956, R3957, R3958, R3959, R3960, R3961, R3962, R3963, R3964, R3965, R3966, R3967, R3968, R3969, R3970, R3971, R3972, R3973, R3974, R3975, R3976, R3977, R3978, R3979, R3980, R3981, R3982, R3983, R3984, R3985, R3986, R3987, R3988, R3989, R3990, R3991, R3992, R3993, R3994, R3995, R3996, R3997, R3998, R3999, R4000, R4001, R4002, R4003, R4004, R4005, R4006, R4007, R4008, R4009, R4010, R4011, R4012, R4013, R4014, R4015, R4016, R4017, R4018, R4019, R4020, R4021, R4022, R4023, R4024, R4025, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R56, R57, R58, R59, R6, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R705, R706, R707, R8, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P93
automaton P93_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R31 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R91 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [108, 108] { R91 += 1 };
  s0 -> s1 [109, 65535] { R91 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R91 += 1 };
  s2 -> s1 [0, 110] { R91 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R91 += 1 };
  s2 -> s1 [112, 65535] { R91 += 1 };
  s3 -> s1 [0, 98] { R91 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R91 += 1 };
  s3 -> s1 [100, 65535] { R91 += 1 };
  s4 -> s1 [0, 96] { R91 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R91 += 1 };
  s4 -> s1 [98, 65535] { R91 += 1 };
  s5 -> s1 [0, 107] { R91 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R91 += 1 };
  s5 -> s1 [109, 65535] { R91 += 1 };
  s6 -> s1 [0, 103] { R91 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R91 += 1 };
  s6 -> s1 [105, 65535] { R91 += 1 };
  s7 -> s1 [0, 110] { R91 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R91 += 1 };
  s7 -> s1 [112, 65535] { R91 += 1 };
  s8 -> s1 [0, 114] { R91 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R91 += 1 };
  s8 -> s1 [116, 65535] { R91 += 1 };
  s9 -> s1 [0, 115] { R91 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R91 += 1 };
  s9 -> s1 [117, 65535] { R91 += 1 };
  s10 -> s1 [0, 65535] { R91 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R113 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R3846 += 1, R3847 += 1 };
  s0 -> s1 [0, 65535] { R3847 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3847 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3849 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R3848 += 1, R3849 += 1 };
  s1 -> s1 [0, 65535] { R3849 += 1, R115 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 74] { R3851 += 1 };
  s0 -> s2 [0, 65535] { R3851 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R3850 += 1, R3851 += 1 };
  s0 -> s1 [76, 65535] { R3851 += 1 };
  s1 -> s1 [0, 74] { R3851 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [76, 65535] { R3851 += 1 };
  s2 -> s1 [0, 74] { R3851 += 1 };
  s2 -> s2 [0, 65535] { R3851 += 1, R117 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R3851 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 76] { R3853 += 1 };
  s0 -> s2 [0, 65535] { R3853 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R3852 += 1, R3853 += 1 };
  s0 -> s1 [78, 65535] { R3853 += 1 };
  s1 -> s1 [0, 76] { R3853 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R3853 += 1 };
  s2 -> s1 [0, 76] { R3853 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3853 += 1, R119 += 1 };
  s2 -> s1 [78, 65535] { R3853 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R3854 += 1, R3855 += 1 };
  s0 -> s1 [0, 65535] { R3855 += 1, R124 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R3855 += 1, R123 += 1, R124 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3855 += 1, R124 += 1, R125 += 1 };
  s1 -> s4 [0, 65535] { R3855 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3855 += 1, R124 += 1, R125 += 1 };
  s2 -> s2 [0, 65535] { R3855 += 1, R123 += 1, R124 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3855 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R3856 += 1, R3857 += 1 };
  s0 -> s1 [0, 65535] { R3857 += 1 };
  s1 -> s1 [0, 65535] { R3857 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3859 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R3858 += 1, R3859 += 1 };
  s0 -> s2 [0, 65535] { R3859 += 1, R130 += 1, R131 += 1 };
  s1 -> s1 [0, 65535] { R3859 += 1, R129 += 1, R130 += 1 };
  s1 -> s2 [0, 65535] { R3859 += 1, R130 += 1, R131 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3859 += 1 };
  s2 -> s2 [0, 65535] { R3859 += 1, R130 += 1, R131 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3859 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R3861 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R3861 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R3860 += 1, R3861 += 1 };
  s0 -> s3 [108, 108] { R3861 += 1, R135 += 1 };
  s0 -> s1 [109, 65535] { R3861 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R3861 += 1, R135 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R3861 += 1 };
  s2 -> s1 [0, 107] { R3861 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3861 += 1, R134 += 1, R135 += 1 };
  s2 -> s3 [108, 108] { R3861 += 1, R135 += 1 };
  s2 -> s1 [109, 65535] { R3861 += 1, R135 += 1 };
  s3 -> s1 [0, 110] { R3861 += 1, R135 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3861 += 1 };
  s3 -> s5 [111, 111] { R3861 += 1, R135 += 1 };
  s3 -> s1 [112, 65535] { R3861 += 1, R135 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3861 += 1, R135 += 1 };
  s5 -> s5 [0, 65535] { R3861 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R3861 += 1, R135 += 1 };
  s5 -> s1 [100, 65535] { R3861 += 1, R135 += 1 };
  s6 -> s1 [0, 96] { R3861 += 1, R135 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3861 += 1 };
  s6 -> s7 [97, 97] { R3861 += 1, R135 += 1 };
  s6 -> s1 [98, 65535] { R3861 += 1, R135 += 1 };
  s7 -> s1 [0, 107] { R3861 += 1, R135 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3861 += 1 };
  s7 -> s8 [108, 108] { R3861 += 1, R135 += 1 };
  s7 -> s1 [109, 65535] { R3861 += 1, R135 += 1 };
  s8 -> s1 [0, 103] { R3861 += 1, R135 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3861 += 1 };
  s8 -> s9 [104, 104] { R3861 += 1, R135 += 1 };
  s8 -> s1 [105, 65535] { R3861 += 1, R135 += 1 };
  s9 -> s1 [0, 110] { R3861 += 1, R135 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3861 += 1 };
  s9 -> s10 [111, 111] { R3861 += 1, R135 += 1 };
  s9 -> s1 [112, 65535] { R3861 += 1, R135 += 1 };
  s10 -> s1 [0, 114] { R3861 += 1, R135 += 1 };
  s10 -> s10 [0, 65535] { R3861 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3861 += 1, R135 += 1 };
  s10 -> s1 [116, 65535] { R3861 += 1, R135 += 1 };
  s11 -> s1 [0, 115] { R3861 += 1, R135 += 1 };
  s11 -> s11 [0, 65535] { R3861 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R3861 += 1, R135 += 1 };
  s11 -> s1 [117, 65535] { R3861 += 1, R135 += 1 };
  s12 -> s1 [0, 65535] { R3861 += 1, R135 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3861 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3862 += 1, R3863 += 1 };
  s0 -> s1 [0, 65535] { R3863 += 1, R139 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R3863 += 1, R140 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R3863 += 1, R139 += 1, R140 += 1 };
  s1 -> s2 [0, 65535] { R3863 += 1, R140 += 1, R141 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3863 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [0, 65535] { R3863 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3863 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R3865 += 1, R146 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R3865 += 1, R145 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R3864 += 1, R3865 += 1 };
  s1 -> s4 [0, 65535] { R3865 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3865 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3865 += 1, R146 += 1, R147 += 1 };
  s2 -> s2 [0, 65535] { R3865 += 1, R145 += 1, R146 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3865 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R3867 += 1 };
  s0 -> s0 [0, 65535] { R3866 += 1, R3867 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3867 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3869 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R3868 += 1, R3869 += 1 };
  s0 -> s2 [0, 65535] { R3869 += 1, R151 += 1, R152 += 1 };
  s1 -> s1 [0, 65535] { R3869 += 1, R152 += 1, R153 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3869 += 1 };
  s2 -> s1 [0, 65535] { R3869 += 1, R152 += 1, R153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3869 += 1, R151 += 1, R152 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3869 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R3870 += 1, R3871 += 1 };
  s0 -> s1 [0, 65535] { R3871 += 1 };
  s1 -> s1 [0, 65535] { R3871 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 76] { R3873 += 1, R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R3873 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R3872 += 1, R3873 += 1 };
  s0 -> s3 [77, 77] { R3873 += 1, R158 += 1, R159 += 1 };
  s0 -> s4 [77, 77] { R3873 += 1, R158 += 1, R159 += 1 };
  s0 -> s1 [78, 65535] { R3873 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 76] { R3873 += 1, R158 += 1, R159 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3873 += 1 };
  s1 -> s3 [77, 77] { R3873 += 1, R158 += 1, R159 += 1 };
  s1 -> s4 [77, 77] { R3873 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [78, 65535] { R3873 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [0, 76] { R3873 += 1, R158 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R3873 += 1, R157 += 1, R158 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R3873 += 1, R158 += 1, R159 += 1 };
  s2 -> s4 [77, 77] { R3873 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [78, 65535] { R3873 += 1, R158 += 1, R159 += 1 };
  s3 -> s3 [0, 65535] { R3873 += 1, R158 += 1, R159 += 1 };
  s3 -> s6 [0, 65535] { R3873 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3873 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3873 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R3907 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R3906 += 1, R3907 += 1 };
  s1 -> s1 [0, 65535] { R3907 += 1, R48 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3909 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R3908 += 1, R3909 += 1 };
  s0 -> s2 [65, 65] { R3909 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R3909 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R3909 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R3909 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3909 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R3909 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R3909 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3909 += 1, R114 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3911 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R3910 += 1, R3911 += 1 };
  s0 -> s2 [65, 65] { R3911 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R3911 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R3911 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R3911 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3911 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R3911 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R3911 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3911 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3913 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R3912 += 1, R3913 += 1 };
  s0 -> s2 [65, 65] { R3913 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R3913 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R3913 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R3913 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3913 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R3913 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R3913 += 1, R118 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3913 += 1, R118 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3915 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R3914 += 1, R3915 += 1 };
  s0 -> s2 [65, 65] { R3915 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [65, 65] { R3915 += 1, R120 += 1, R121 += 1 };
  s0 -> s1 [66, 65535] { R3915 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 64] { R3915 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3915 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [65, 65] { R3915 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [66, 65535] { R3915 += 1, R120 += 1, R121 += 1 };
  s2 -> s2 [0, 65535] { R3915 += 1, R120 += 1, R121 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3917 += 1 };
  s0 -> s0 [0, 65535] { R3916 += 1, R3917 += 1 };
  s0 -> s2 [65, 65] { R3917 += 1 };
  s0 -> s3 [65, 65] { R3917 += 1 };
  s0 -> s1 [66, 65535] { R3917 += 1 };
  s1 -> s1 [0, 64] { R3917 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3917 += 1 };
  s1 -> s3 [65, 65] { R3917 += 1 };
  s1 -> s1 [66, 65535] { R3917 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3917 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3919 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R3918 += 1, R3919 += 1 };
  s0 -> s2 [65, 65] { R3919 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [65, 65] { R3919 += 1, R126 += 1, R127 += 1 };
  s0 -> s1 [66, 65535] { R3919 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 64] { R3919 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3919 += 1, R126 += 1, R127 += 1 };
  s1 -> s3 [65, 65] { R3919 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [66, 65535] { R3919 += 1, R126 += 1, R127 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3919 += 1, R126 += 1, R127 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3921 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R3920 += 1, R3921 += 1 };
  s0 -> s2 [65, 65] { R3921 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [65, 65] { R3921 += 1, R132 += 1, R133 += 1 };
  s0 -> s1 [66, 65535] { R3921 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 64] { R3921 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3921 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [65, 65] { R3921 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [66, 65535] { R3921 += 1, R132 += 1, R133 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3921 += 1, R132 += 1, R133 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3923 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R3922 += 1, R3923 += 1 };
  s0 -> s2 [65, 65] { R3923 += 1, R136 += 1, R137 += 1 };
  s0 -> s3 [65, 65] { R3923 += 1, R136 += 1, R137 += 1 };
  s0 -> s1 [66, 65535] { R3923 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 64] { R3923 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3923 += 1, R136 += 1, R137 += 1 };
  s1 -> s3 [65, 65] { R3923 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [66, 65535] { R3923 += 1, R136 += 1, R137 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3923 += 1, R136 += 1, R137 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3925 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R3924 += 1, R3925 += 1 };
  s0 -> s2 [65, 65] { R3925 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R3925 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R3925 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R3925 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3925 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R3925 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R3925 += 1, R142 += 1, R143 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3925 += 1, R142 += 1, R143 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3927 += 1 };
  s0 -> s0 [0, 65535] { R3926 += 1, R3927 += 1 };
  s0 -> s2 [65, 65] { R3927 += 1 };
  s0 -> s3 [65, 65] { R3927 += 1 };
  s0 -> s1 [66, 65535] { R3927 += 1 };
  s1 -> s1 [0, 64] { R3927 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3927 += 1 };
  s1 -> s3 [65, 65] { R3927 += 1 };
  s1 -> s1 [66, 65535] { R3927 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3927 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3929 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R3928 += 1, R3929 += 1 };
  s0 -> s2 [65, 65] { R3929 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [65, 65] { R3929 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [66, 65535] { R3929 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 64] { R3929 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3929 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [65, 65] { R3929 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [66, 65535] { R3929 += 1, R148 += 1, R149 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3929 += 1, R148 += 1, R149 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3931 += 1 };
  s0 -> s0 [0, 65535] { R3930 += 1, R3931 += 1 };
  s0 -> s2 [65, 65] { R3931 += 1 };
  s0 -> s3 [65, 65] { R3931 += 1 };
  s0 -> s1 [66, 65535] { R3931 += 1 };
  s1 -> s1 [0, 64] { R3931 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3931 += 1 };
  s1 -> s3 [65, 65] { R3931 += 1 };
  s1 -> s1 [66, 65535] { R3931 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3931 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3933 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R3932 += 1, R3933 += 1 };
  s0 -> s2 [65, 65] { R3933 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [65, 65] { R3933 += 1, R154 += 1, R155 += 1 };
  s0 -> s1 [66, 65535] { R3933 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 64] { R3933 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3933 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [65, 65] { R3933 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [66, 65535] { R3933 += 1, R154 += 1, R155 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3933 += 1, R154 += 1, R155 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 43] { R3935 += 1 };
  s0 -> s0 [0, 65535] { R3934 += 1, R3935 += 1 };
  s0 -> s1 [45, 45] { R3935 += 1 };
  s0 -> s2 [46, 46] { R3935 += 1 };
  s0 -> s1 [48, 62] { R3935 += 1 };
  s0 -> s3 [65, 65] { R3935 += 1 };
  s0 -> s1 [66, 65535] { R3935 += 1 };
  s1 -> s1 [0, 43] { R3935 += 1 };
  s1 -> s1 [45, 45] { R3935 += 1 };
  s1 -> s2 [46, 46] { R3935 += 1 };
  s1 -> s1 [48, 62] { R3935 += 1 };
  s1 -> s3 [65, 65] { R3935 += 1 };
  s1 -> s1 [66, 65535] { R3935 += 1 };
  s2 -> s1 [0, 43] { R3935 += 1 };
  s2 -> s1 [45, 45] { R3935 += 1 };
  s2 -> s2 [46, 46] { R3935 += 1 };
  s2 -> s1 [48, 62] { R3935 += 1 };
  s2 -> s3 [65, 65] { R3935 += 1 };
  s2 -> s1 [66, 114] { R3935 += 1 };
  s2 -> s8 [115, 115] { R3935 += 1 };
  s2 -> s1 [116, 65535] { R3935 += 1 };
  s3 -> s3 [0, 43] { R3935 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3935 += 1 };
  s3 -> s4 [46, 46] { R3935 += 1 };
  s3 -> s3 [48, 62] { R3935 += 1 };
  s3 -> s3 [65, 65535] { R3935 += 1 };
  s4 -> s3 [0, 43] { R3935 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3935 += 1 };
  s4 -> s4 [46, 46] { R3935 += 1 };
  s4 -> s3 [48, 62] { R3935 += 1 };
  s4 -> s3 [65, 114] { R3935 += 1 };
  s4 -> s5 [115, 115] { R3935 += 1 };
  s4 -> s3 [116, 65535] { R3935 += 1 };
  s5 -> s3 [0, 43] { R3935 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3935 += 1 };
  s5 -> s4 [46, 46] { R3935 += 1 };
  s5 -> s3 [48, 62] { R3935 += 1 };
  s5 -> s3 [65, 110] { R3935 += 1 };
  s5 -> s6 [111, 111] { R3935 += 1 };
  s5 -> s3 [112, 65535] { R3935 += 1 };
  s6 -> s3 [0, 43] { R3935 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3935 += 1 };
  s6 -> s4 [46, 46] { R3935 += 1 };
  s6 -> s3 [48, 62] { R3935 += 1 };
  s6 -> s3 [65, 98] { R3935 += 1 };
  s6 -> s7 [99, 99] { R3935 += 1 };
  s6 -> s3 [100, 65535] { R3935 += 1 };
  s7 -> s3 [0, 43] { R3935 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3935 += 1 };
  s7 -> s4 [46, 46] { R3935 += 1 };
  s7 -> s3 [48, 62] { R3935 += 1 };
  s7 -> s3 [65, 106] { R3935 += 1 };
  s7 -> s3 [108, 65535] { R3935 += 1 };
  s8 -> s1 [0, 43] { R3935 += 1 };
  s8 -> s1 [45, 45] { R3935 += 1 };
  s8 -> s2 [46, 46] { R3935 += 1 };
  s8 -> s1 [48, 62] { R3935 += 1 };
  s8 -> s3 [65, 65] { R3935 += 1 };
  s8 -> s1 [66, 110] { R3935 += 1 };
  s8 -> s9 [111, 111] { R3935 += 1 };
  s8 -> s1 [112, 65535] { R3935 += 1 };
  s9 -> s1 [0, 43] { R3935 += 1 };
  s9 -> s1 [45, 45] { R3935 += 1 };
  s9 -> s2 [46, 46] { R3935 += 1 };
  s9 -> s1 [48, 62] { R3935 += 1 };
  s9 -> s3 [65, 65] { R3935 += 1 };
  s9 -> s1 [66, 98] { R3935 += 1 };
  s9 -> s10 [99, 99] { R3935 += 1 };
  s9 -> s1 [100, 65535] { R3935 += 1 };
  s10 -> s1 [0, 43] { R3935 += 1 };
  s10 -> s1 [45, 45] { R3935 += 1 };
  s10 -> s2 [46, 46] { R3935 += 1 };
  s10 -> s1 [48, 62] { R3935 += 1 };
  s10 -> s3 [65, 65] { R3935 += 1 };
  s10 -> s1 [66, 106] { R3935 += 1 };
  s10 -> s1 [108, 65535] { R3935 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R3937 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R3936 += 1, R3937 += 1 };
  s1 -> s1 [0, 65535] { R3937 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 57] { R3939 += 1 };
  s0 -> s0 [0, 65535] { R3938 += 1, R3939 += 1 };
  s0 -> s2 [0, 65535] { R3939 += 1, R21 += 1 };
  s0 -> s3 [58, 58] { R3939 += 1 };
  s0 -> s1 [59, 65535] { R3939 += 1 };
  s1 -> s1 [0, 57] { R3939 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3939 += 1 };
  s1 -> s1 [59, 65535] { R3939 += 1 };
  s2 -> s1 [0, 57] { R3939 += 1 };
  s2 -> s2 [0, 65535] { R3939 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3939 += 1 };
  s2 -> s1 [59, 65535] { R3939 += 1 };
  s3 -> s3 [0, 65535] { R3939 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 42] { R3941 += 1 };
  s0 -> s2 [0, 65535] { R3941 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R3940 += 1, R3941 += 1 };
  s0 -> s3 [43, 43] { R3941 += 1 };
  s0 -> s1 [44, 65535] { R3941 += 1 };
  s1 -> s1 [0, 42] { R3941 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3941 += 1 };
  s1 -> s1 [44, 65535] { R3941 += 1 };
  s2 -> s1 [0, 42] { R3941 += 1 };
  s2 -> s2 [0, 65535] { R3941 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R3941 += 1 };
  s2 -> s1 [44, 65535] { R3941 += 1 };
  s3 -> s3 [0, 65535] { R3941 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R3943 += 1 };
  s0 -> s2 [0, 65535] { R3943 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R3942 += 1, R3943 += 1 };
  s0 -> s3 [65, 65] { R3943 += 1 };
  s0 -> s1 [66, 65535] { R3943 += 1 };
  s1 -> s1 [0, 64] { R3943 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3943 += 1 };
  s1 -> s1 [66, 65535] { R3943 += 1 };
  s2 -> s1 [0, 64] { R3943 += 1 };
  s2 -> s2 [0, 65535] { R3943 += 1, R25 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3943 += 1 };
  s2 -> s1 [66, 65535] { R3943 += 1 };
  s3 -> s3 [0, 65535] { R3943 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 90] { R3945 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R3945 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R3944 += 1, R3945 += 1 };
  s0 -> s3 [91, 91] { R3945 += 1, R51 += 1 };
  s0 -> s1 [92, 65535] { R3945 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R3945 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3945 += 1 };
  s2 -> s1 [0, 90] { R3945 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R3945 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3945 += 1, R51 += 1 };
  s2 -> s1 [92, 65535] { R3945 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R3945 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3945 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 65535] { R3947 += 1, R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R3947 += 1, R53 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3946 += 1, R3947 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3947 += 1, R52 += 1, R53 += 1 };
  s1 -> s2 [0, 65535] { R3947 += 1, R53 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R3947 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3947 += 1, R53 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R3947 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R3948 += 1, R3949 += 1 };
  s0 -> s1 [0, 65535] { R3949 += 1, R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R3949 += 1, R83 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R3949 += 1, R82 += 1, R83 += 1 };
  s1 -> s2 [0, 65535] { R3949 += 1, R83 += 1, R42 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3949 += 1 };
  s2 -> s2 [0, 65535] { R3949 += 1, R83 += 1, R42 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3949 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 107] { R3951 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3950 += 1, R3951 += 1 };
  s0 -> s2 [0, 65535] { R3951 += 1, R84 += 1, R85 += 1 };
  s0 -> s3 [108, 108] { R3951 += 1, R85 += 1 };
  s0 -> s1 [109, 65535] { R3951 += 1, R85 += 1 };
  s1 -> s13 [0, 65535] { R3951 += 1 };
  s1 -> s1 [0, 65535] { R3951 += 1, R85 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R3951 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R3951 += 1, R84 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R3951 += 1, R85 += 1 };
  s2 -> s1 [109, 65535] { R3951 += 1, R85 += 1 };
  s3 -> s1 [0, 110] { R3951 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R3951 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R3951 += 1, R85 += 1 };
  s3 -> s1 [112, 65535] { R3951 += 1, R85 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3951 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R3951 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R3951 += 1, R85 += 1 };
  s5 -> s1 [100, 65535] { R3951 += 1, R85 += 1 };
  s6 -> s1 [0, 96] { R3951 += 1, R85 += 1 };
  s6 -> s6 [0, 65535] { R3951 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3951 += 1, R85 += 1 };
  s6 -> s1 [98, 65535] { R3951 += 1, R85 += 1 };
  s7 -> s1 [0, 107] { R3951 += 1, R85 += 1 };
  s7 -> s7 [0, 65535] { R3951 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3951 += 1, R85 += 1 };
  s7 -> s1 [109, 65535] { R3951 += 1, R85 += 1 };
  s8 -> s1 [0, 103] { R3951 += 1, R85 += 1 };
  s8 -> s8 [0, 65535] { R3951 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3951 += 1, R85 += 1 };
  s8 -> s1 [105, 65535] { R3951 += 1, R85 += 1 };
  s9 -> s1 [0, 110] { R3951 += 1, R85 += 1 };
  s9 -> s9 [0, 65535] { R3951 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3951 += 1, R85 += 1 };
  s9 -> s1 [112, 65535] { R3951 += 1, R85 += 1 };
  s10 -> s1 [0, 114] { R3951 += 1, R85 += 1 };
  s10 -> s10 [0, 65535] { R3951 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3951 += 1, R85 += 1 };
  s10 -> s1 [116, 65535] { R3951 += 1, R85 += 1 };
  s11 -> s1 [0, 115] { R3951 += 1, R85 += 1 };
  s11 -> s11 [0, 65535] { R3951 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R3951 += 1, R85 += 1 };
  s11 -> s1 [117, 65535] { R3951 += 1, R85 += 1 };
  s12 -> s1 [0, 65535] { R3951 += 1, R85 += 1 };
  s13 -> s13 [0, 65535] { R3951 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R3952 += 1, R3953 += 1 };
  s0 -> s1 [0, 65535] { R3953 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R3953 += 1, R87 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3953 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [0, 65535] { R3953 += 1, R87 += 1, R57 += 1 };
  s2 -> s3 [0, 65535] { R3953 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3953 += 1, R87 += 1, R57 += 1 };
  s3 -> s3 [0, 65535] { R3953 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R3955 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R3954 += 1, R3955 += 1 };
  s0 -> s2 [0, 65535] { R3955 += 1, R107 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R3955 += 1, R106 += 1, R107 += 1 };
  s1 -> s2 [0, 65535] { R3955 += 1, R107 += 1, R44 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3955 += 1, R107 += 1, R44 += 1 };
  s2 -> s3 [0, 65535] { R3955 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3955 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R3956 += 1, R3957 += 1 };
  s0 -> s1 [0, 65535] { R3957 += 1 };
  s1 -> s1 [0, 65535] { R3957 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 42] { R3959 += 1, R109 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R3958 += 1, R3959 += 1 };
  s0 -> s2 [0, 65535] { R3959 += 1, R108 += 1, R109 += 1 };
  s0 -> s3 [43, 43] { R3959 += 1, R109 += 1, R56 += 1 };
  s0 -> s4 [43, 43] { R3959 += 1, R109 += 1, R56 += 1 };
  s0 -> s1 [44, 65535] { R3959 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [0, 42] { R3959 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [0, 65535] { R3959 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R3959 += 1, R109 += 1, R56 += 1 };
  s1 -> s4 [43, 43] { R3959 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [44, 65535] { R3959 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [0, 42] { R3959 += 1, R109 += 1, R56 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3959 += 1, R108 += 1, R109 += 1 };
  s2 -> s3 [43, 43] { R3959 += 1, R109 += 1, R56 += 1 };
  s2 -> s4 [43, 43] { R3959 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [44, 65535] { R3959 += 1, R109 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R3959 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3959 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3959 += 1, R109 += 1, R56 += 1 };
  s5 -> s5 [0, 65535] { R3959 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3961 += 1, R3813 += 1 };
  s0 -> s0 [0, 65535] { R3960 += 1, R3961 += 1 };
  s0 -> s2 [0, 65535] { R3961 += 1, R3812 += 1, R3813 += 1 };
  s0 -> s1 [66, 65535] { R3961 += 1, R3813 += 1 };
  s1 -> s1 [0, 64] { R3961 += 1, R3813 += 1 };
  s1 -> s1 [0, 65535] { R3961 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3961 += 1, R3813 += 1 };
  s2 -> s1 [0, 64] { R3961 += 1, R3813 += 1 };
  s2 -> s2 [0, 65535] { R3961 += 1, R3812 += 1, R3813 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3961 += 1, R3813 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s0 [0, 65535] { R3962 += 1, R3963 += 1 };
  s0 -> s1 [0, 65535] { R3963 += 1, R3815 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R3963 += 1, R3814 += 1, R3815 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3963 += 1, R3815 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R3963 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3963 += 1, R3815 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R3963 += 1, R3814 += 1, R3815 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3963 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R3965 += 1, R3817 += 1 };
  s0 -> s0 [0, 65535] { R3964 += 1, R3965 += 1 };
  s0 -> s2 [0, 65535] { R3965 += 1, R3816 += 1, R3817 += 1 };
  s0 -> s1 [80, 65535] { R3965 += 1, R3817 += 1 };
  s1 -> s1 [0, 65] { R3965 += 1, R3817 += 1 };
  s1 -> s1 [0, 65535] { R3965 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3965 += 1, R3817 += 1 };
  s2 -> s1 [0, 65] { R3965 += 1, R3817 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3965 += 1, R3816 += 1, R3817 += 1 };
  s2 -> s1 [80, 65535] { R3965 += 1, R3817 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R3967 += 1, R3819 += 1, R667 += 1 };
  s0 -> s0 [0, 65535] { R3966 += 1, R3967 += 1 };
  s0 -> s2 [0, 65535] { R3967 += 1, R3818 += 1, R3819 += 1 };
  s1 -> s1 [0, 65535] { R3967 += 1, R3819 += 1, R667 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3967 += 1 };
  s2 -> s1 [0, 65535] { R3967 += 1, R3819 += 1, R667 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3967 += 1, R3818 += 1, R3819 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3967 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 81] { R3969 += 1, R3821 += 1 };
  s0 -> s2 [0, 65535] { R3969 += 1, R3821 += 1, R669 += 1 };
  s0 -> s3 [0, 65535] { R3969 += 1, R3820 += 1, R3821 += 1 };
  s0 -> s0 [0, 65535] { R3968 += 1, R3969 += 1 };
  s0 -> s1 [83, 65535] { R3969 += 1, R3821 += 1 };
  s1 -> s1 [0, 81] { R3969 += 1, R3821 += 1 };
  s1 -> s1 [0, 65535] { R3969 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R3969 += 1, R3821 += 1 };
  s2 -> s1 [0, 81] { R3969 += 1, R3821 += 1 };
  s2 -> s5 [0, 65535] { R3969 += 1 };
  s2 -> s2 [0, 65535] { R3969 += 1, R3821 += 1, R669 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R3969 += 1, R3821 += 1 };
  s3 -> s1 [0, 81] { R3969 += 1, R3821 += 1 };
  s3 -> s2 [0, 65535] { R3969 += 1, R3821 += 1, R669 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3969 += 1, R3820 += 1, R3821 += 1 };
  s3 -> s1 [83, 65535] { R3969 += 1, R3821 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3969 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 79] { R3971 += 1, R3823 += 1 };
  s0 -> s2 [0, 65535] { R3971 += 1, R3823 += 1, R671 += 1 };
  s0 -> s3 [0, 65535] { R3971 += 1, R3822 += 1, R3823 += 1 };
  s0 -> s0 [0, 65535] { R3970 += 1, R3971 += 1 };
  s0 -> s1 [81, 65535] { R3971 += 1, R3823 += 1 };
  s1 -> s1 [0, 79] { R3971 += 1, R3823 += 1 };
  s1 -> s1 [0, 65535] { R3971 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R3971 += 1, R3823 += 1 };
  s2 -> s1 [0, 79] { R3971 += 1, R3823 += 1 };
  s2 -> s5 [0, 65535] { R3971 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3971 += 1, R3823 += 1, R671 += 1 };
  s2 -> s1 [81, 65535] { R3971 += 1, R3823 += 1 };
  s3 -> s1 [0, 79] { R3971 += 1, R3823 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3971 += 1, R3823 += 1, R671 += 1 };
  s3 -> s3 [0, 65535] { R3971 += 1, R3822 += 1, R3823 += 1 };
  s3 -> s1 [81, 65535] { R3971 += 1, R3823 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3971 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R3973 += 1, R3825 += 1, R676 += 1, R677 += 1 };
  s0 -> s0 [0, 65535] { R3972 += 1, R3973 += 1 };
  s0 -> s2 [0, 65535] { R3973 += 1, R3825 += 1, R675 += 1, R676 += 1 };
  s0 -> s3 [0, 65535] { R3973 += 1, R3824 += 1, R3825 += 1 };
  s1 -> s1 [0, 65535] { R3973 += 1, R3825 += 1, R676 += 1, R677 += 1 };
  s1 -> s6 [0, 65535] { R3973 += 1, R3825 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3973 += 1 };
  s2 -> s1 [0, 65535] { R3973 += 1, R3825 += 1, R676 += 1, R677 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3973 += 1, R3825 += 1, R675 += 1, R676 += 1 };
  s2 -> s5 [0, 65535] { R3973 += 1 };
  s3 -> s1 [0, 65535] { R3973 += 1, R3825 += 1, R676 += 1, R677 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3973 += 1, R3825 += 1, R675 += 1, R676 += 1 };
  s3 -> s3 [0, 65535] { R3973 += 1, R3824 += 1, R3825 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3973 += 1 };
  s6 -> s6 [0, 65535] { R3973 += 1, R3825 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3973 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 107] { R3975 += 1, R3827 += 1, R681 += 1 };
  s0 -> s2 [0, 65535] { R3975 += 1, R3827 += 1, R680 += 1, R681 += 1 };
  s0 -> s0 [0, 65535] { R3974 += 1, R3975 += 1 };
  s0 -> s3 [0, 65535] { R3975 += 1, R3826 += 1, R3827 += 1 };
  s0 -> s4 [108, 108] { R3975 += 1, R3827 += 1, R681 += 1 };
  s0 -> s1 [109, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s15 [0, 65535] { R3975 += 1, R3827 += 1 };
  s1 -> s6 [0, 65535] { R3975 += 1 };
  s1 -> s1 [0, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s2 -> s1 [0, 107] { R3975 += 1, R3827 += 1, R681 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3975 += 1 };
  s2 -> s2 [0, 65535] { R3975 += 1, R3827 += 1, R680 += 1, R681 += 1 };
  s2 -> s4 [108, 108] { R3975 += 1, R3827 += 1, R681 += 1 };
  s2 -> s1 [109, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s3 -> s1 [0, 107] { R3975 += 1, R3827 += 1, R681 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3975 += 1, R3827 += 1, R680 += 1, R681 += 1 };
  s3 -> s3 [0, 65535] { R3975 += 1, R3826 += 1, R3827 += 1 };
  s3 -> s4 [108, 108] { R3975 += 1, R3827 += 1, R681 += 1 };
  s3 -> s1 [109, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s4 -> s1 [0, 110] { R3975 += 1, R3827 += 1, R681 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3975 += 1 };
  s4 -> s4 [0, 65535] { R3975 += 1, R3827 += 1 };
  s4 -> s7 [111, 111] { R3975 += 1, R3827 += 1, R681 += 1 };
  s4 -> s1 [112, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3975 += 1 };
  s7 -> s1 [0, 98] { R3975 += 1, R3827 += 1, R681 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R3975 += 1 };
  s7 -> s7 [0, 65535] { R3975 += 1, R3827 += 1 };
  s7 -> s8 [99, 99] { R3975 += 1, R3827 += 1, R681 += 1 };
  s7 -> s1 [100, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s8 -> s1 [0, 96] { R3975 += 1, R3827 += 1, R681 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R3975 += 1 };
  s8 -> s8 [0, 65535] { R3975 += 1, R3827 += 1 };
  s8 -> s9 [97, 97] { R3975 += 1, R3827 += 1, R681 += 1 };
  s8 -> s1 [98, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s9 -> s1 [0, 107] { R3975 += 1, R3827 += 1, R681 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3975 += 1 };
  s9 -> s9 [0, 65535] { R3975 += 1, R3827 += 1 };
  s9 -> s10 [108, 108] { R3975 += 1, R3827 += 1, R681 += 1 };
  s9 -> s1 [109, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s10 -> s1 [0, 103] { R3975 += 1, R3827 += 1, R681 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R3975 += 1 };
  s10 -> s10 [0, 65535] { R3975 += 1, R3827 += 1 };
  s10 -> s11 [104, 104] { R3975 += 1, R3827 += 1, R681 += 1 };
  s10 -> s1 [105, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s11 -> s1 [0, 110] { R3975 += 1, R3827 += 1, R681 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3975 += 1 };
  s11 -> s11 [0, 65535] { R3975 += 1, R3827 += 1 };
  s11 -> s12 [111, 111] { R3975 += 1, R3827 += 1, R681 += 1 };
  s11 -> s1 [112, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s12 -> s1 [0, 114] { R3975 += 1, R3827 += 1, R681 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R3975 += 1 };
  s12 -> s12 [0, 65535] { R3975 += 1, R3827 += 1 };
  s12 -> s13 [115, 115] { R3975 += 1, R3827 += 1, R681 += 1 };
  s12 -> s1 [116, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s13 -> s1 [0, 115] { R3975 += 1, R3827 += 1, R681 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3975 += 1 };
  s13 -> s13 [0, 65535] { R3975 += 1, R3827 += 1 };
  s13 -> s14 [116, 116] { R3975 += 1, R3827 += 1, R681 += 1 };
  s13 -> s1 [117, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s14 -> s1 [0, 65535] { R3975 += 1, R3827 += 1, R681 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s15 [0, 65535] { R3975 += 1, R3827 += 1 };
  s15 -> s6 [0, 65535] { R3975 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 79] { R3977 += 1, R3829 += 1, R685 += 1 };
  s0 -> s0 [0, 65535] { R3976 += 1, R3977 += 1 };
  s0 -> s2 [0, 65535] { R3977 += 1, R3829 += 1, R684 += 1, R685 += 1 };
  s0 -> s3 [0, 65535] { R3977 += 1, R3828 += 1, R3829 += 1 };
  s0 -> s1 [81, 65535] { R3977 += 1, R3829 += 1, R685 += 1 };
  s1 -> s1 [0, 79] { R3977 += 1, R3829 += 1, R685 += 1 };
  s1 -> s5 [0, 65535] { R3977 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3977 += 1, R3829 += 1 };
  s1 -> s1 [81, 65535] { R3977 += 1, R3829 += 1, R685 += 1 };
  s2 -> s1 [0, 79] { R3977 += 1, R3829 += 1, R685 += 1 };
  s2 -> s5 [0, 65535] { R3977 += 1 };
  s2 -> s2 [0, 65535] { R3977 += 1, R3829 += 1, R684 += 1, R685 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R3977 += 1, R3829 += 1, R685 += 1 };
  s3 -> s1 [0, 79] { R3977 += 1, R3829 += 1, R685 += 1 };
  s3 -> s2 [0, 65535] { R3977 += 1, R3829 += 1, R684 += 1, R685 += 1 };
  s3 -> s3 [0, 65535] { R3977 += 1, R3828 += 1, R3829 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R3977 += 1, R3829 += 1, R685 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3977 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 65535] { R3979 += 1, R3831 += 1, R689 += 1, R690 += 1 };
  s0 -> s2 [0, 65535] { R3979 += 1, R3831 += 1, R690 += 1, R691 += 1 };
  s0 -> s0 [0, 65535] { R3978 += 1, R3979 += 1 };
  s0 -> s3 [0, 65535] { R3979 += 1, R3830 += 1, R3831 += 1 };
  s1 -> s1 [0, 65535] { R3979 += 1, R3831 += 1, R689 += 1, R690 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3979 += 1, R3831 += 1, R690 += 1, R691 += 1 };
  s1 -> s6 [0, 65535] { R3979 += 1 };
  s2 -> s5 [0, 65535] { R3979 += 1, R3831 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3979 += 1, R3831 += 1, R690 += 1, R691 += 1 };
  s2 -> s6 [0, 65535] { R3979 += 1 };
  s3 -> s1 [0, 65535] { R3979 += 1, R3831 += 1, R689 += 1, R690 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3979 += 1, R3831 += 1, R690 += 1, R691 += 1 };
  s3 -> s3 [0, 65535] { R3979 += 1, R3830 += 1, R3831 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3979 += 1, R3831 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R3979 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3979 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s0 -> s2 [0, 65535] { R3981 += 1, R3833 += 1, R694 += 1, R695 += 1 };
  s0 -> s3 [0, 65535] { R3981 += 1, R3832 += 1, R3833 += 1 };
  s0 -> s0 [0, 65535] { R3980 += 1, R3981 += 1 };
  s0 -> s1 [91, 107] { R3981 += 1, R3833 += 1, R695 += 1 };
  s0 -> s4 [108, 108] { R3981 += 1, R3833 += 1, R695 += 1 };
  s0 -> s1 [109, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s1 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3981 += 1 };
  s1 -> s1 [0, 65535] { R3981 += 1, R3833 += 1 };
  s1 -> s1 [91, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s2 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s2 -> s2 [0, 65535] { R3981 += 1, R3833 += 1, R694 += 1, R695 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3981 += 1 };
  s2 -> s1 [91, 107] { R3981 += 1, R3833 += 1, R695 += 1 };
  s2 -> s4 [108, 108] { R3981 += 1, R3833 += 1, R695 += 1 };
  s2 -> s1 [109, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s3 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s3 -> s2 [0, 65535] { R3981 += 1, R3833 += 1, R694 += 1, R695 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3981 += 1, R3832 += 1, R3833 += 1 };
  s3 -> s1 [91, 107] { R3981 += 1, R3833 += 1, R695 += 1 };
  s3 -> s4 [108, 108] { R3981 += 1, R3833 += 1, R695 += 1 };
  s3 -> s1 [109, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s4 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3981 += 1 };
  s4 -> s4 [0, 65535] { R3981 += 1, R3833 += 1 };
  s4 -> s1 [91, 110] { R3981 += 1, R3833 += 1, R695 += 1 };
  s4 -> s7 [111, 111] { R3981 += 1, R3833 += 1, R695 += 1 };
  s4 -> s1 [112, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3981 += 1 };
  s7 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R3981 += 1 };
  s7 -> s7 [0, 65535] { R3981 += 1, R3833 += 1 };
  s7 -> s1 [91, 98] { R3981 += 1, R3833 += 1, R695 += 1 };
  s7 -> s8 [99, 99] { R3981 += 1, R3833 += 1, R695 += 1 };
  s7 -> s1 [100, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s8 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R3981 += 1 };
  s8 -> s8 [0, 65535] { R3981 += 1, R3833 += 1 };
  s8 -> s1 [91, 96] { R3981 += 1, R3833 += 1, R695 += 1 };
  s8 -> s9 [97, 97] { R3981 += 1, R3833 += 1, R695 += 1 };
  s8 -> s1 [98, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s9 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s9 -> s9 [0, 65535] { R3981 += 1, R3833 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3981 += 1 };
  s9 -> s1 [91, 107] { R3981 += 1, R3833 += 1, R695 += 1 };
  s9 -> s10 [108, 108] { R3981 += 1, R3833 += 1, R695 += 1 };
  s9 -> s1 [109, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s10 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s10 -> s10 [0, 65535] { R3981 += 1, R3833 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R3981 += 1 };
  s10 -> s1 [91, 103] { R3981 += 1, R3833 += 1, R695 += 1 };
  s10 -> s11 [104, 104] { R3981 += 1, R3833 += 1, R695 += 1 };
  s10 -> s1 [105, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s11 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3981 += 1 };
  s11 -> s11 [0, 65535] { R3981 += 1, R3833 += 1 };
  s11 -> s1 [91, 110] { R3981 += 1, R3833 += 1, R695 += 1 };
  s11 -> s12 [111, 111] { R3981 += 1, R3833 += 1, R695 += 1 };
  s11 -> s1 [112, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s12 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s12 -> s12 [0, 65535] { R3981 += 1, R3833 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R3981 += 1 };
  s12 -> s1 [91, 114] { R3981 += 1, R3833 += 1, R695 += 1 };
  s12 -> s13 [115, 115] { R3981 += 1, R3833 += 1, R695 += 1 };
  s12 -> s1 [116, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s13 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s13 -> s13 [0, 65535] { R3981 += 1, R3833 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3981 += 1 };
  s13 -> s1 [91, 115] { R3981 += 1, R3833 += 1, R695 += 1 };
  s13 -> s14 [116, 116] { R3981 += 1, R3833 += 1, R695 += 1 };
  s13 -> s1 [117, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  s14 -> s1 [0, 80] { R3981 += 1, R3833 += 1, R695 += 1 };
  s14 -> s1 [91, 65535] { R3981 += 1, R3833 += 1, R695 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R3983 += 1, R3835 += 1, R699 += 1, R700 += 1 };
  s0 -> s2 [0, 65535] { R3983 += 1, R3835 += 1, R700 += 1, R701 += 1 };
  s0 -> s3 [0, 65535] { R3983 += 1, R3834 += 1, R3835 += 1 };
  s0 -> s0 [0, 65535] { R3982 += 1, R3983 += 1 };
  s1 -> s1 [0, 65535] { R3983 += 1, R3835 += 1, R699 += 1, R700 += 1 };
  s1 -> s2 [0, 65535] { R3983 += 1, R3835 += 1, R700 += 1, R701 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3983 += 1 };
  s2 -> s2 [0, 65535] { R3983 += 1, R3835 += 1, R700 += 1, R701 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3983 += 1 };
  s2 -> s6 [0, 65535] { R3983 += 1, R3835 += 1 };
  s3 -> s1 [0, 65535] { R3983 += 1, R3835 += 1, R699 += 1, R700 += 1 };
  s3 -> s2 [0, 65535] { R3983 += 1, R3835 += 1, R700 += 1, R701 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3983 += 1, R3834 += 1, R3835 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3983 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3983 += 1 };
  s6 -> s6 [0, 65535] { R3983 += 1, R3835 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R3985 += 1, R3836 += 1, R3837 += 1 };
  s0 -> s2 [0, 65535] { R3985 += 1, R3837 += 1, R706 += 1, R707 += 1 };
  s0 -> s3 [0, 65535] { R3985 += 1, R3837 += 1, R705 += 1, R706 += 1 };
  s0 -> s0 [0, 65535] { R3984 += 1, R3985 += 1 };
  s1 -> s1 [0, 65535] { R3985 += 1, R3836 += 1, R3837 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R3985 += 1, R3837 += 1, R706 += 1, R707 += 1 };
  s1 -> s3 [0, 65535] { R3985 += 1, R3837 += 1, R705 += 1, R706 += 1 };
  s2 -> s4 [0, 65535] { R3985 += 1 };
  s2 -> s6 [0, 65535] { R3985 += 1, R3837 += 1 };
  s2 -> s2 [0, 65535] { R3985 += 1, R3837 += 1, R706 += 1, R707 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R3985 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3985 += 1, R3837 += 1, R706 += 1, R707 += 1 };
  s3 -> s3 [0, 65535] { R3985 += 1, R3837 += 1, R705 += 1, R706 += 1 };
  s4 -> s4 [0, 65535] { R3985 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3985 += 1 };
  s6 -> s6 [0, 65535] { R3985 += 1, R3837 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 65535] { R3987 += 1, R3838 += 1, R3839 += 1 };
  s0 -> s0 [0, 65535] { R3986 += 1, R3987 += 1 };
  s0 -> s2 [0, 65535] { R3987 += 1, R3839 += 1 };
  s1 -> s1 [0, 65535] { R3987 += 1, R3838 += 1, R3839 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3987 += 1, R3839 += 1 };
  s2 -> s3 [0, 65535] { R3987 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3987 += 1, R3839 += 1 };
  s3 -> s3 [0, 65535] { R3987 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s0 [0, 65535] { R3988 += 1, R3989 += 1 };
  s0 -> s1 [0, 65535] { R3989 += 1, R3841 += 1 };
  s0 -> s2 [0, 65535] { R3989 += 1, R3840 += 1, R3841 += 1 };
  s1 -> s4 [0, 65535] { R3989 += 1 };
  s1 -> s1 [0, 65535] { R3989 += 1, R3841 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3989 += 1, R3841 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3989 += 1, R3840 += 1, R3841 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3989 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s0 [0, 65535] { R3990 += 1, R3991 += 1 };
  s0 -> s1 [0, 65535] { R3991 += 1, R3842 += 1, R3843 += 1 };
  s0 -> s2 [0, 65535] { R3991 += 1, R3843 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3991 += 1, R3842 += 1, R3843 += 1 };
  s1 -> s2 [0, 65535] { R3991 += 1, R3843 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3991 += 1 };
  s2 -> s2 [0, 65535] { R3991 += 1, R3843 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3991 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 65535] { R3993 += 1, R3845 += 1 };
  s0 -> s2 [0, 65535] { R3993 += 1, R3844 += 1, R3845 += 1 };
  s0 -> s0 [0, 65535] { R3992 += 1, R3993 += 1 };
  s1 -> s1 [0, 65535] { R3993 += 1, R3845 += 1 };
  s1 -> s4 [0, 65535] { R3993 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3993 += 1, R3845 += 1 };
  s2 -> s2 [0, 65535] { R3993 += 1, R3844 += 1, R3845 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3993 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 65535] { R3995 += 1, R3874 += 1, R3875 += 1 };
  s0 -> s0 [0, 65535] { R3994 += 1, R3995 += 1 };
  s0 -> s2 [0, 65535] { R3995 += 1, R3875 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R3995 += 1, R3874 += 1, R3875 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3995 += 1, R3875 += 1, R45 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3995 += 1 };
  s2 -> s2 [0, 65535] { R3995 += 1, R3875 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3995 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R3997 += 1, R3877 += 1 };
  s0 -> s0 [0, 65535] { R3996 += 1, R3997 += 1 };
  s0 -> s2 [0, 65535] { R3997 += 1, R3876 += 1, R3877 += 1 };
  s0 -> s3 [65, 65] { R3997 += 1, R3877 += 1 };
  s0 -> s4 [65, 65] { R3997 += 1, R3877 += 1 };
  s0 -> s5 [80, 80] { R3997 += 1, R3877 += 1 };
  s0 -> s1 [81, 65535] { R3997 += 1, R3877 += 1 };
  s1 -> s1 [0, 64] { R3997 += 1, R3877 += 1 };
  s1 -> s3 [65, 65] { R3997 += 1, R3877 += 1 };
  s1 -> s4 [65, 65] { R3997 += 1, R3877 += 1 };
  s1 -> s5 [80, 80] { R3997 += 1, R3877 += 1 };
  s1 -> s1 [81, 65535] { R3997 += 1, R3877 += 1 };
  s2 -> s1 [0, 64] { R3997 += 1, R3877 += 1 };
  s2 -> s2 [0, 65535] { R3997 += 1, R3876 += 1, R3877 += 1 };
  s2 -> s3 [65, 65] { R3997 += 1, R3877 += 1 };
  s2 -> s4 [65, 65] { R3997 += 1, R3877 += 1 };
  s2 -> s5 [80, 80] { R3997 += 1, R3877 += 1 };
  s2 -> s1 [81, 65535] { R3997 += 1, R3877 += 1 };
  s4 -> s4 [0, 65] { R3997 += 1, R3877 += 1 };
  s4 -> s8 [80, 80] { R3997 += 1, R3877 += 1 };
  s4 -> s4 [81, 65535] { R3997 += 1, R3877 += 1 };
  s5 -> s5 [0, 64] { R3997 += 1, R3877 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3997 += 1 };
  s5 -> s7 [65, 65] { R3997 += 1, R3877 += 1 };
  s5 -> s8 [65, 65] { R3997 += 1, R3877 += 1 };
  s5 -> s5 [80, 65535] { R3997 += 1, R3877 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3997 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3997 += 1, R3877 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3997 += 1 };
  s8 -> s8 [80, 65535] { R3997 += 1, R3877 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R3999 += 1, R3879 += 1, R666 += 1 };
  s0 -> s0 [0, 65535] { R3998 += 1, R3999 += 1 };
  s0 -> s2 [0, 65535] { R3999 += 1, R3878 += 1, R3879 += 1 };
  s0 -> s3 [65, 65] { R3999 += 1, R3879 += 1, R666 += 1 };
  s0 -> s4 [65, 65] { R3999 += 1, R3879 += 1, R666 += 1 };
  s0 -> s1 [66, 65535] { R3999 += 1, R3879 += 1, R666 += 1 };
  s1 -> s1 [0, 64] { R3999 += 1, R3879 += 1, R666 += 1 };
  s1 -> s1 [0, 65535] { R3999 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3999 += 1, R3879 += 1, R666 += 1 };
  s1 -> s4 [65, 65] { R3999 += 1, R3879 += 1, R666 += 1 };
  s1 -> s1 [66, 65535] { R3999 += 1, R3879 += 1, R666 += 1 };
  s2 -> s1 [0, 64] { R3999 += 1, R3879 += 1, R666 += 1 };
  s2 -> s2 [0, 65535] { R3999 += 1, R3878 += 1, R3879 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3999 += 1, R3879 += 1, R666 += 1 };
  s2 -> s4 [65, 65] { R3999 += 1, R3879 += 1, R666 += 1 };
  s2 -> s1 [66, 65535] { R3999 += 1, R3879 += 1, R666 += 1 };
  s3 -> s6 [0, 65535] { R3999 += 1 };
  s3 -> s3 [0, 65535] { R3999 += 1, R3879 += 1, R666 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3999 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3999 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R4001 += 1, R3881 += 1, R668 += 1 };
  s0 -> s0 [0, 65535] { R4000 += 1, R4001 += 1 };
  s0 -> s2 [0, 65535] { R4001 += 1, R3880 += 1, R3881 += 1 };
  s0 -> s3 [65, 65] { R4001 += 1, R3881 += 1, R668 += 1 };
  s0 -> s4 [65, 65] { R4001 += 1, R3881 += 1, R668 += 1 };
  s0 -> s1 [66, 65535] { R4001 += 1, R3881 += 1, R668 += 1 };
  s1 -> s1 [0, 64] { R4001 += 1, R3881 += 1, R668 += 1 };
  s1 -> s1 [0, 65535] { R4001 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4001 += 1, R3881 += 1, R668 += 1 };
  s1 -> s4 [65, 65] { R4001 += 1, R3881 += 1, R668 += 1 };
  s1 -> s1 [66, 65535] { R4001 += 1, R3881 += 1, R668 += 1 };
  s2 -> s1 [0, 64] { R4001 += 1, R3881 += 1, R668 += 1 };
  s2 -> s2 [0, 65535] { R4001 += 1, R3880 += 1, R3881 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4001 += 1, R3881 += 1, R668 += 1 };
  s2 -> s4 [65, 65] { R4001 += 1, R3881 += 1, R668 += 1 };
  s2 -> s1 [66, 65535] { R4001 += 1, R3881 += 1, R668 += 1 };
  s3 -> s3 [0, 65535] { R4001 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4001 += 1 };
  s4 -> s4 [0, 65535] { R4001 += 1, R3881 += 1, R668 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4001 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R4003 += 1, R3883 += 1, R670 += 1 };
  s0 -> s2 [0, 65535] { R4003 += 1, R3882 += 1, R3883 += 1 };
  s0 -> s0 [0, 65535] { R4002 += 1, R4003 += 1 };
  s0 -> s3 [65, 65] { R4003 += 1, R3883 += 1, R670 += 1 };
  s0 -> s4 [65, 65] { R4003 += 1, R3883 += 1, R670 += 1 };
  s0 -> s1 [66, 65535] { R4003 += 1, R3883 += 1, R670 += 1 };
  s1 -> s1 [0, 64] { R4003 += 1, R3883 += 1, R670 += 1 };
  s1 -> s1 [0, 65535] { R4003 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4003 += 1, R3883 += 1, R670 += 1 };
  s1 -> s4 [65, 65] { R4003 += 1, R3883 += 1, R670 += 1 };
  s1 -> s1 [66, 65535] { R4003 += 1, R3883 += 1, R670 += 1 };
  s2 -> s1 [0, 64] { R4003 += 1, R3883 += 1, R670 += 1 };
  s2 -> s2 [0, 65535] { R4003 += 1, R3882 += 1, R3883 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4003 += 1, R3883 += 1, R670 += 1 };
  s2 -> s4 [65, 65] { R4003 += 1, R3883 += 1, R670 += 1 };
  s2 -> s1 [66, 65535] { R4003 += 1, R3883 += 1, R670 += 1 };
  s3 -> s3 [0, 65535] { R4003 += 1, R3883 += 1, R670 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4003 += 1 };
  s4 -> s4 [0, 65535] { R4003 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4003 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s0 -> s0 [0, 65535] { R4004 += 1, R4005 += 1 };
  s0 -> s2 [0, 65535] { R4005 += 1, R3884 += 1, R3885 += 1 };
  s0 -> s3 [65, 65] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s0 -> s4 [65, 65] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s0 -> s1 [66, 65535] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 64] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4005 += 1 };
  s1 -> s3 [65, 65] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s1 -> s4 [65, 65] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [66, 65535] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [0, 64] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4005 += 1, R3884 += 1, R3885 += 1 };
  s2 -> s3 [65, 65] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s2 -> s4 [65, 65] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [66, 65535] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4005 += 1, R3885 += 1, R672 += 1, R673 += 1 };
  s3 -> s6 [0, 65535] { R4005 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4005 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4005 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 64] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s0 -> s2 [0, 65535] { R4007 += 1, R3886 += 1, R3887 += 1 };
  s0 -> s0 [0, 65535] { R4006 += 1, R4007 += 1 };
  s0 -> s3 [65, 65] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s0 -> s4 [65, 65] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s0 -> s1 [66, 65535] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 64] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 65535] { R4007 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s1 -> s4 [65, 65] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [66, 65535] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [0, 64] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4007 += 1, R3886 += 1, R3887 += 1 };
  s2 -> s3 [65, 65] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s2 -> s4 [65, 65] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [66, 65535] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s3 -> s6 [0, 65535] { R4007 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4007 += 1, R3887 += 1, R678 += 1, R679 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4007 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4007 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s1 [0, 64] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s0 -> s0 [0, 65535] { R4008 += 1, R4009 += 1 };
  s0 -> s2 [0, 65535] { R4009 += 1, R3888 += 1, R3889 += 1 };
  s0 -> s3 [65, 65] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s0 -> s4 [65, 65] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s0 -> s1 [66, 65535] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 64] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4009 += 1 };
  s1 -> s3 [65, 65] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s1 -> s4 [65, 65] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [66, 65535] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [0, 64] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4009 += 1, R3888 += 1, R3889 += 1 };
  s2 -> s3 [65, 65] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s2 -> s4 [65, 65] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [66, 65535] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s3 -> s6 [0, 65535] { R4009 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4009 += 1, R3889 += 1, R682 += 1, R683 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4009 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4009 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 64] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s0 -> s0 [0, 65535] { R4010 += 1, R4011 += 1 };
  s0 -> s2 [0, 65535] { R4011 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s3 [65, 65] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s0 -> s4 [65, 65] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s0 -> s1 [66, 65535] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 64] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4011 += 1 };
  s1 -> s3 [65, 65] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s1 -> s4 [65, 65] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [66, 65535] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [0, 64] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s2 -> s2 [0, 65535] { R4011 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s2 -> s4 [65, 65] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [66, 65535] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s3 -> s3 [0, 65535] { R4011 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4011 += 1, R3891 += 1, R686 += 1, R687 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4011 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4011 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s1 [0, 64] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s0 -> s0 [0, 65535] { R4012 += 1, R4013 += 1 };
  s0 -> s2 [0, 65535] { R4013 += 1, R3892 += 1, R3893 += 1 };
  s0 -> s3 [65, 65] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s0 -> s4 [65, 65] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s0 -> s1 [66, 65535] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 64] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 65535] { R4013 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s1 -> s4 [65, 65] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [66, 65535] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [0, 64] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4013 += 1, R3892 += 1, R3893 += 1 };
  s2 -> s3 [65, 65] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s2 -> s4 [65, 65] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [66, 65535] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s3 -> s3 [0, 65535] { R4013 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4013 += 1 };
  s4 -> s4 [0, 65535] { R4013 += 1, R3893 += 1, R692 += 1, R693 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4013 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s0 -> s2 [0, 65535] { R4015 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s0 [0, 65535] { R4014 += 1, R4015 += 1 };
  s0 -> s3 [65, 65] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s0 -> s4 [65, 65] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s0 -> s1 [66, 65535] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 64] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4015 += 1 };
  s1 -> s3 [65, 65] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s1 -> s4 [65, 65] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [66, 65535] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [0, 64] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s2 -> s2 [0, 65535] { R4015 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s2 -> s4 [65, 65] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [66, 65535] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s3 -> s3 [0, 65535] { R4015 += 1, R3895 += 1, R696 += 1, R697 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4015 += 1 };
  s4 -> s4 [0, 65535] { R4015 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4015 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s0 -> s2 [0, 65535] { R4017 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s0 [0, 65535] { R4016 += 1, R4017 += 1 };
  s0 -> s3 [65, 65] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s0 -> s4 [65, 65] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s0 -> s1 [66, 65535] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 64] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 65535] { R4017 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s1 -> s4 [65, 65] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [66, 65535] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [0, 64] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s2 -> s2 [0, 65535] { R4017 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s2 -> s4 [65, 65] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [66, 65535] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s3 -> s3 [0, 65535] { R4017 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4017 += 1 };
  s4 -> s4 [0, 65535] { R4017 += 1, R3897 += 1, R702 += 1, R703 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4017 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R4019 += 1, R3899 += 1 };
  s0 -> s2 [0, 65535] { R4019 += 1, R3898 += 1, R3899 += 1 };
  s0 -> s0 [0, 65535] { R4018 += 1, R4019 += 1 };
  s0 -> s3 [65, 65] { R4019 += 1, R3899 += 1 };
  s0 -> s4 [65, 65] { R4019 += 1, R3899 += 1 };
  s0 -> s1 [66, 65535] { R4019 += 1, R3899 += 1 };
  s1 -> s1 [0, 64] { R4019 += 1, R3899 += 1 };
  s1 -> s1 [0, 65535] { R4019 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4019 += 1, R3899 += 1 };
  s1 -> s4 [65, 65] { R4019 += 1, R3899 += 1 };
  s1 -> s1 [66, 65535] { R4019 += 1, R3899 += 1 };
  s2 -> s1 [0, 64] { R4019 += 1, R3899 += 1 };
  s2 -> s2 [0, 65535] { R4019 += 1, R3898 += 1, R3899 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4019 += 1, R3899 += 1 };
  s2 -> s4 [65, 65] { R4019 += 1, R3899 += 1 };
  s2 -> s1 [66, 65535] { R4019 += 1, R3899 += 1 };
  s3 -> s3 [0, 65535] { R4019 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4019 += 1 };
  s4 -> s4 [0, 65535] { R4019 += 1, R3899 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4019 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s2 [0, 64] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s0 -> s0 [0, 65535] { R4020 += 1, R4021 += 1 };
  s0 -> s3 [0, 65535] { R4021 += 1, R3900 += 1, R3901 += 1 };
  s0 -> s4 [65, 65] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s0 -> s5 [65, 65] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s6 [65, 65] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s0 -> s7 [65, 65] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s1 [66, 65535] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s2 [66, 65535] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s1 -> s1 [0, 64] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s11 [0, 64] { R4021 += 1, R3901 += 1 };
  s1 -> s5 [65, 65] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s7 [65, 65] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s12 [65, 65] { R4021 += 1, R3901 += 1 };
  s1 -> s8 [65, 65] { R4021 += 1, R3901 += 1 };
  s1 -> s1 [66, 65535] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s11 [66, 65535] { R4021 += 1, R3901 += 1 };
  s2 -> s1 [0, 64] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s2 [0, 64] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s2 -> s4 [65, 65] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s2 -> s5 [65, 65] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s6 [65, 65] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s2 -> s7 [65, 65] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s1 [66, 65535] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s2 [66, 65535] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s3 -> s1 [0, 64] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s3 -> s2 [0, 64] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s3 -> s3 [0, 65535] { R4021 += 1, R3900 += 1, R3901 += 1 };
  s3 -> s4 [65, 65] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s3 -> s5 [65, 65] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s3 -> s6 [65, 65] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s3 -> s7 [65, 65] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s3 -> s1 [66, 65535] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s3 -> s2 [66, 65535] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s5 -> s5 [0, 65535] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s5 -> s8 [0, 65535] { R4021 += 1, R3901 += 1 };
  s6 -> s5 [0, 65535] { R4021 += 1, R3901 += 1, R2921 += 1, R2922 += 1 };
  s6 -> s6 [0, 65535] { R4021 += 1, R3901 += 1, R2920 += 1, R2921 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R4021 += 1 };
  s8 -> s8 [0, 65535] { R4021 += 1, R3901 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4021 += 1 };
  s11 -> s11 [0, 64] { R4021 += 1, R3901 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4021 += 1 };
  s11 -> s12 [65, 65] { R4021 += 1, R3901 += 1 };
  s11 -> s8 [65, 65] { R4021 += 1, R3901 += 1 };
  s11 -> s11 [66, 65535] { R4021 += 1, R3901 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4021 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R4023 += 1, R3903 += 1 };
  s0 -> s2 [0, 65535] { R4023 += 1, R3902 += 1, R3903 += 1 };
  s0 -> s0 [0, 65535] { R4022 += 1, R4023 += 1 };
  s0 -> s3 [65, 65] { R4023 += 1, R3903 += 1 };
  s0 -> s4 [65, 65] { R4023 += 1, R3903 += 1 };
  s0 -> s1 [66, 65535] { R4023 += 1, R3903 += 1 };
  s1 -> s1 [0, 64] { R4023 += 1, R3903 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4023 += 1 };
  s1 -> s3 [65, 65] { R4023 += 1, R3903 += 1 };
  s1 -> s4 [65, 65] { R4023 += 1, R3903 += 1 };
  s1 -> s1 [66, 65535] { R4023 += 1, R3903 += 1 };
  s2 -> s1 [0, 64] { R4023 += 1, R3903 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4023 += 1, R3902 += 1, R3903 += 1 };
  s2 -> s3 [65, 65] { R4023 += 1, R3903 += 1 };
  s2 -> s4 [65, 65] { R4023 += 1, R3903 += 1 };
  s2 -> s1 [66, 65535] { R4023 += 1, R3903 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4023 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4023 += 1, R3903 += 1 };
  s4 -> s6 [0, 65535] { R4023 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4023 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s0 -> s2 [0, 64] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s0 -> s3 [0, 65535] { R4025 += 1, R3904 += 1, R3905 += 1 };
  s0 -> s0 [0, 65535] { R4024 += 1, R4025 += 1 };
  s0 -> s4 [65, 65] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s0 -> s5 [65, 65] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s0 -> s6 [65, 65] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s0 -> s7 [65, 65] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s0 -> s2 [66, 79] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s0 -> s1 [66, 65535] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s0 -> s8 [80, 80] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s0 -> s2 [81, 65535] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s1 [0, 64] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s1 -> s2 [0, 64] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s4 [65, 65] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s1 -> s5 [65, 65] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s6 [65, 65] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s7 [65, 65] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s1 -> s2 [66, 79] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s1 [66, 65535] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s1 -> s8 [80, 80] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s2 [81, 65535] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s2 -> s2 [0, 64] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s2 -> s5 [65, 65] { R4025 += 1, R3905 += 1 };
  s2 -> s6 [65, 65] { R4025 += 1, R3905 += 1 };
  s2 -> s2 [66, 79] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s2 -> s2 [66, 65535] { R4025 += 1, R3905 += 1 };
  s2 -> s8 [80, 80] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s2 -> s2 [81, 65535] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s3 -> s1 [0, 64] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s3 -> s2 [0, 64] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s3 -> s3 [0, 65535] { R4025 += 1, R3904 += 1, R3905 += 1 };
  s3 -> s4 [65, 65] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s3 -> s5 [65, 65] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s3 -> s6 [65, 65] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s3 -> s7 [65, 65] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s3 -> s2 [66, 79] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s3 -> s1 [66, 65535] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s3 -> s8 [80, 80] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s3 -> s2 [81, 65535] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s4 -> s5 [0, 79] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s4 -> s4 [0, 65535] { R4025 += 1, R3905 += 1, R3806 += 1, R3807 += 1 };
  s4 -> s10 [80, 80] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s4 -> s5 [81, 65535] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s5 -> s5 [0, 79] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s5 -> s5 [0, 65535] { R4025 += 1, R3905 += 1 };
  s5 -> s10 [80, 80] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s5 -> s5 [81, 65535] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s8 -> s8 [0, 64] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s8 -> s9 [0, 64] { R4025 += 1, R3905 += 1 };
  s8 -> s10 [65, 65] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s8 -> s11 [65, 65] { R4025 += 1, R3905 += 1 };
  s8 -> s12 [65, 65] { R4025 += 1, R3905 += 1 };
  s8 -> s13 [65, 65] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s8 -> s8 [66, 65535] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s8 -> s9 [66, 65535] { R4025 += 1, R3905 += 1 };
  s9 -> s9 [0, 64] { R4025 += 1, R3905 += 1 };
  s9 -> s15 [0, 65535];
  s9 -> s9 [0, 65535] { R4025 += 1 };
  s9 -> s11 [65, 65] { R4025 += 1, R3905 += 1 };
  s9 -> s12 [65, 65] { R4025 += 1, R3905 += 1 };
  s9 -> s9 [66, 65535] { R4025 += 1, R3905 += 1 };
  s10 -> s10 [0, 65535] { R4025 += 1, R3905 += 1, R3807 += 1, R3808 += 1 };
  s10 -> s12 [0, 65535] { R4025 += 1, R3905 += 1 };
  s11 -> s11 [0, 65535] { R4025 += 1 };
  s11 -> s15 [0, 65535];
  s12 -> s14 [0, 65535] { R4025 += 1 };
  s12 -> s12 [0, 65535] { R4025 += 1, R3905 += 1 };
  s12 -> s15 [0, 65535];
  s14 -> s14 [0, 65535] { R4025 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s12, s9, s14, s15, s11;
};
};
synchronised {  // Automata constraining P105
automaton P105_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P39
automaton P39_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R6 = R3845 && R7 = R4025 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R82 = 0 && R83 = R3845 && R84 = 0 && R85 = R3845 && R86 = 0 && R87 = R3845 && R88 = 0 && R89 = R4025 && R90 = 0 && R91 = R4025 && R92 = 0 && R93 = R4025 && R115 + R114 = 0 && R3812 = 0 && R3813 = R3845 && R3814 = 0 && R3815 = R3845 && R3816 = 0 && R3817 = R3845 && R3818 = 0 && R3819 = R3845 && R3820 = 0 && R3821 = R3845 && R3822 = 0 && R3823 = R3845 && R3824 = 0 && R3825 = R3845 && R3826 = 0 && R3827 = R3845 && R3828 = 0 && R3829 = R3845 && R3830 = 0 && R3831 = R3845 && R3832 = 0 && R3833 = R3845 && R3834 = 0 && R3835 = R3845 && R3836 = 0 && R3837 = R3845 && R3838 = 0 && R3839 = R3845 && R3840 = 0 && R3841 = R3845 && R3842 = 0 && R3843 = R3845 && R3844 = 0 && R3846 = 0 && R3847 = R4025 && R3848 = 0 && R3849 = R4025 && R3850 = 0 && R3851 = R4025 && R3852 = 0 && R3853 = R4025 && R3854 = 0 && R3855 = R4025 && R3856 = 0 && R3857 = R4025 && R3858 = 0 && R3859 = R4025 && R3860 = 0 && R3861 = R4025 && R3862 = 0 && R3863 = R4025 && R3864 = 0 && R3865 = R4025 && R3866 = 0 && R3867 = R4025 && R3868 = 0 && R3869 = R4025 && R3870 = 0 && R3871 = R4025 && R3872 = 0 && R3873 = R4025 && R3876 = 0 && R3877 = 0 && R3900 = 0 && R3901 = 0 && R3904 = 0 && R3905 = 0 && R3934 = 10 && R3935 = R4025 && R3936 = 10 && R3937 = R4025 && R3938 = 10 && R3939 = R4025 && R3940 = 10 && R3941 = R4025 && R3942 = 10 && R3943 = R4025 && R3944 = 10 && R3945 = R4025 && R3946 = 10 && R3947 = R4025 && R3948 = 10 && R3949 = R4025 && R3950 = 10 && R3951 = R4025 && R3952 = 10 && R3953 = R4025 && R3954 = 10 && R3955 = R4025 && R3956 = 10 && R3957 = R4025 && R3958 = 10 && R3959 = R4025 && R3960 = 10 && R3961 = R4025 && R3962 = 10 && R3963 = R4025 && R3964 = 10 && R3965 = R4025 && R3966 = 10 && R3967 = R4025 && R3968 = 10 && R3969 = R4025 && R3970 = 10 && R3971 = R4025 && R3972 = 10 && R3973 = R4025 && R3974 = 10 && R3975 = R4025 && R3976 = 10 && R3977 = R4025 && R3978 = 10 && R3979 = R4025 && R3980 = 10 && R3981 = R4025 && R3982 = 10 && R3983 = R4025 && R3984 = 10 && R3985 = R4025 && R3986 = 10 && R3987 = R4025 && R3988 = 10 && R3989 = R4025 && R3990 = 10 && R3991 = R4025 && R3992 = 10 && R3993 = R4025 && R3994 = 10 && R3995 = R4025 && R3996 = 10 && R3997 = R4025 && R3998 = 10 && R3999 = R4025 && R4000 = 10 && R4001 = R4025 && R4002 = 10 && R4003 = R4025 && R4004 = 10 && R4005 = R4025 && R4006 = 10 && R4007 = R4025 && R4008 = 10 && R4009 = R4025 && R4010 = 10 && R4011 = R4025 && R4012 = 10 && R4013 = R4025 && R4014 = 10 && R4015 = R4025 && R4016 = 10 && R4017 = R4025 && R4018 = 10 && R4019 = R4025 && R4020 = 10 && R4021 = R4025 && R4022 = 10 && R4023 = R4025 && R4024 = 10 && R57 + R56 != 0 && R59 + R58 != 0 && R141 + R138 + R159 + R156 != 0 && R701 + R698 + R3811 + R3808 != 0 && R21 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && R31 < 1 && R117 + R116 < 1 && R119 + R118 < 1 && -1*R667 + -1*R666 < 1 && R669 + R668 < 1 && R671 + R670 < 1 && 0 < R3845 && 9 < R4025 && (R667 + R666 != 0 || R677 + R674 = 0 || (R675 + R672 = 0 && R676 + R673 = 0)) && (R667 + R666 != 0 || R677 + R674 = 0 || (R680 + R678 = 0 && R681 + R679 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R684 + R682 = 0 && R685 + R683 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R689 + R686 = 0 && R690 + R687 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R694 + R692 = 0 && R695 + R693 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R699 + R696 = 0 && R700 + R697 = 0)) && (R675 + R672 != 0 || R667 + R666 + -1*R676 + -1*R673 = 0 || R667 + R666 < 1) && (R680 + R678 != 0 || R667 + R666 + -1*R681 + -1*R679 = 0 || R667 + R666 < 1) && (R684 + R682 != 0 || R667 + R666 + -1*R685 + -1*R683 = 0 || R667 + R666 < 1) && (R689 + R686 != 0 || R667 + R666 + -1*R690 + -1*R687 = 0 || R667 + R666 < 1) && (R694 + R692 != 0 || R667 + R666 + -1*R695 + -1*R693 = 0 || R667 + R666 < 1) && (R699 + R696 != 0 || R667 + R666 + -1*R700 + -1*R697 = 0 || R667 + R666 < 1) && (R44 = 0 || (R106 = 0 && R107 = 0)) && (R44 = 0 || (R108 = 0 && R109 = 0)) && (R45 = 0 || (R3874 = 0 && R3875 = 0)) && (R45 = 0 || (R3878 = 0 && R3879 = 0)) && (R45 = 0 || (R3880 = 0 && R3881 = 0)) && (R45 = 0 || (R3882 = 0 && R3883 = 0)) && (R45 = 0 || (R3884 = 0 && R3885 = 0)) && (R45 = 0 || (R3886 = 0 && R3887 = 0)) && (R45 = 0 || (R3888 = 0 && R3889 = 0)) && (R45 = 0 || (R3890 = 0 && R3891 = 0)) && (R45 = 0 || (R3892 = 0 && R3893 = 0)) && (R45 = 0 || (R3894 = 0 && R3895 = 0)) && (R45 = 0 || (R3896 = 0 && R3897 = 0)) && (R45 = 0 || (R3898 = 0 && R3899 = 0)) && (R45 = 0 || (R3902 = 0 && R3903 = 0)) && (R48 = 0 || (R3906 = 0 && R3907 = 0)) && (R48 = 0 || (R3908 = 0 && R3909 = 0)) && (R48 = 0 || (R3910 = 0 && R3911 = 0)) && (R48 = 0 || (R3912 = 0 && R3913 = 0)) && (R48 = 0 || (R3914 = 0 && R3915 = 0)) && (R48 = 0 || (R3916 = 0 && R3917 = 0)) && (R48 = 0 || (R3918 = 0 && R3919 = 0)) && (R48 = 0 || (R3920 = 0 && R3921 = 0)) && (R48 = 0 || (R3922 = 0 && R3923 = 0)) && (R48 = 0 || (R3924 = 0 && R3925 = 0)) && (R48 = 0 || (R3926 = 0 && R3927 = 0)) && (R48 = 0 || (R3928 = 0 && R3929 = 0)) && (R48 = 0 || (R3930 = 0 && R3931 = 0)) && (R48 = 0 || (R3932 = 0 && R3933 = 0)) && (R49 = 0 || (R110 = 0 && R111 = 0)) && (R49 = 0 || (R112 = 0 && R113 = 0)) && (R125 + R122 = 0 || (R123 + R120 = 0 && R124 + R121 = 0)) && (R131 + R128 = 0 || (R129 + R126 = 0 && R130 + R127 = 0)) && (R131 + R128 = 0 || (R134 + R132 = 0 && R135 + R133 = 0)) && (R131 + R128 = 0 || (R139 + R136 = 0 && R140 + R137 = 0)) && (R147 + R144 = 0 || (R145 + R142 = 0 && R146 + R143 = 0)) && (R153 + R150 = 0 || (R151 + R148 = 0 && R152 + R149 = 0)) && (R153 + R150 = 0 || (R157 + R154 = 0 && R158 + R155 = 0)) && (R675 + R672 = 0 || R667 + R666 < 1) && (R680 + R678 = 0 || R667 + R666 < 1) && (R684 + R682 = 0 || R667 + R666 < 1) && (R689 + R686 = 0 || R667 + R666 < 1) && (R694 + R692 = 0 || R667 + R666 < 1) && (R699 + R696 = 0 || R667 + R666 < 1) && (R707 + R704 = 0 || (R705 + R702 = 0 && R706 + R703 = 0)) && (R2925 + R2922 = 0 || (R2923 + R2920 = 0 && R2924 + R2921 = 0)) && (R2925 + R2922 = 0 || (R3809 + R3806 = 0 && R3810 + R3807 = 0));
// End of Parikh automata intersection problem
