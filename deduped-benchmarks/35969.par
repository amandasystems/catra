// Parikh automata intersection problem, generated by OSTRICH+
counter int R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R1814, R1815, R1816, R1817, R1818, R1819, R21, R22, R25, R2700, R2701, R2702, R2703, R2704, R2705, R2706, R2707, R2708, R2709, R2710, R2711, R2712, R2713, R2714, R2715, R2716, R2717, R2718, R2719, R2720, R2721, R2722, R2723, R2724, R2725, R2726, R2727, R2728, R2729, R2730, R2731, R2732, R2733, R2734, R2735, R2736, R2737, R2738, R2739, R2740, R2741, R2742, R2743, R2744, R2745, R2746, R2747, R2748, R2749, R2750, R2751, R2752, R2753, R2754, R2755, R2756, R2757, R2758, R2759, R2760, R2761, R2762, R2763, R2764, R2765, R2766, R2767, R2768, R2769, R2770, R2771, R2772, R2773, R2774, R2775, R2776, R2777, R2778, R2779, R2780, R2781, R2782, R2783, R2784, R2785, R2786, R2787, R2788, R2789, R2790, R2791, R2792, R2793, R2794, R2795, R2796, R2797, R2798, R2799, R28, R2800, R2801, R2802, R2803, R2804, R2805, R2806, R2807, R2808, R2809, R2810, R2811, R2812, R2813, R2814, R2815, R2816, R2817, R2818, R2819, R2820, R2821, R2822, R2823, R2824, R2825, R2826, R2827, R2828, R2829, R2830, R2831, R2832, R2833, R2834, R2835, R2836, R2837, R2838, R2839, R2840, R2841, R2842, R2843, R2844, R2845, R2846, R2847, R2848, R2849, R2850, R2851, R2852, R2853, R2854, R2855, R2856, R2857, R2858, R2859, R2860, R2861, R2862, R2863, R2864, R2865, R2866, R2867, R2868, R2869, R2870, R2871, R2872, R2873, R2874, R2875, R2876, R2877, R2878, R2879, R2880, R2881, R2882, R2883, R2884, R2885, R2886, R2887, R2888, R2889, R2890, R2891, R2892, R2893, R2894, R2895, R2896, R2897, R2898, R2899, R2900, R2901, R2902, R2903, R2904, R2905, R2906, R2907, R2908, R2909, R2910, R2911, R2912, R2913, R2914, R2915, R2916, R2917, R2918, R2919, R31, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R56, R57, R58, R59, R6, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R705, R706, R707, R8, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P93
automaton P93_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R31 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R91 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [108, 108] { R91 += 1 };
  s0 -> s1 [109, 65535] { R91 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R91 += 1 };
  s2 -> s1 [0, 110] { R91 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R91 += 1 };
  s2 -> s1 [112, 65535] { R91 += 1 };
  s3 -> s1 [0, 98] { R91 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R91 += 1 };
  s3 -> s1 [100, 65535] { R91 += 1 };
  s4 -> s1 [0, 96] { R91 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R91 += 1 };
  s4 -> s1 [98, 65535] { R91 += 1 };
  s5 -> s1 [0, 107] { R91 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R91 += 1 };
  s5 -> s1 [109, 65535] { R91 += 1 };
  s6 -> s1 [0, 103] { R91 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R91 += 1 };
  s6 -> s1 [105, 65535] { R91 += 1 };
  s7 -> s1 [0, 110] { R91 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R91 += 1 };
  s7 -> s1 [112, 65535] { R91 += 1 };
  s8 -> s1 [0, 114] { R91 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R91 += 1 };
  s8 -> s1 [116, 65535] { R91 += 1 };
  s9 -> s1 [0, 115] { R91 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R91 += 1 };
  s9 -> s1 [117, 65535] { R91 += 1 };
  s10 -> s1 [0, 65535] { R91 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R113 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R2741 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R2740 += 1, R2741 += 1 };
  s1 -> s1 [0, 65535] { R2741 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R2742 += 1, R2743 += 1 };
  s0 -> s1 [0, 65535] { R2743 += 1, R115 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2743 += 1, R115 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 74] { R2745 += 1 };
  s0 -> s0 [0, 65535] { R2744 += 1, R2745 += 1 };
  s0 -> s2 [0, 65535] { R2745 += 1, R117 += 1 };
  s0 -> s1 [76, 65535] { R2745 += 1 };
  s1 -> s1 [0, 74] { R2745 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [76, 65535] { R2745 += 1 };
  s2 -> s1 [0, 74] { R2745 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2745 += 1, R117 += 1 };
  s2 -> s1 [76, 65535] { R2745 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 76] { R2747 += 1 };
  s0 -> s2 [0, 65535] { R2747 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R2746 += 1, R2747 += 1 };
  s0 -> s1 [78, 65535] { R2747 += 1 };
  s1 -> s1 [0, 76] { R2747 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R2747 += 1 };
  s2 -> s1 [0, 76] { R2747 += 1 };
  s2 -> s2 [0, 65535] { R2747 += 1, R119 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R2747 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2749 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R2748 += 1, R2749 += 1 };
  s0 -> s2 [0, 65535] { R2749 += 1, R124 += 1, R125 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2749 += 1, R123 += 1, R124 += 1 };
  s1 -> s2 [0, 65535] { R2749 += 1, R124 += 1, R125 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2749 += 1 };
  s2 -> s2 [0, 65535] { R2749 += 1, R124 += 1, R125 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2749 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2751 += 1 };
  s0 -> s0 [0, 65535] { R2750 += 1, R2751 += 1 };
  s1 -> s1 [0, 65535] { R2751 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2753 += 1, R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R2753 += 1, R130 += 1, R131 += 1 };
  s0 -> s0 [0, 65535] { R2752 += 1, R2753 += 1 };
  s1 -> s1 [0, 65535] { R2753 += 1, R129 += 1, R130 += 1 };
  s1 -> s2 [0, 65535] { R2753 += 1, R130 += 1, R131 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2753 += 1, R130 += 1, R131 += 1 };
  s2 -> s3 [0, 65535] { R2753 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2753 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R2755 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R2755 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R2754 += 1, R2755 += 1 };
  s0 -> s3 [108, 108] { R2755 += 1, R135 += 1 };
  s0 -> s1 [109, 65535] { R2755 += 1, R135 += 1 };
  s1 -> s13 [0, 65535] { R2755 += 1 };
  s1 -> s1 [0, 65535] { R2755 += 1, R135 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R2755 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2755 += 1, R134 += 1, R135 += 1 };
  s2 -> s3 [108, 108] { R2755 += 1, R135 += 1 };
  s2 -> s1 [109, 65535] { R2755 += 1, R135 += 1 };
  s3 -> s1 [0, 110] { R2755 += 1, R135 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2755 += 1 };
  s3 -> s5 [111, 111] { R2755 += 1, R135 += 1 };
  s3 -> s1 [112, 65535] { R2755 += 1, R135 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R2755 += 1, R135 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2755 += 1 };
  s5 -> s6 [99, 99] { R2755 += 1, R135 += 1 };
  s5 -> s1 [100, 65535] { R2755 += 1, R135 += 1 };
  s6 -> s1 [0, 96] { R2755 += 1, R135 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2755 += 1 };
  s6 -> s7 [97, 97] { R2755 += 1, R135 += 1 };
  s6 -> s1 [98, 65535] { R2755 += 1, R135 += 1 };
  s7 -> s1 [0, 107] { R2755 += 1, R135 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R2755 += 1 };
  s7 -> s8 [108, 108] { R2755 += 1, R135 += 1 };
  s7 -> s1 [109, 65535] { R2755 += 1, R135 += 1 };
  s8 -> s1 [0, 103] { R2755 += 1, R135 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R2755 += 1 };
  s8 -> s9 [104, 104] { R2755 += 1, R135 += 1 };
  s8 -> s1 [105, 65535] { R2755 += 1, R135 += 1 };
  s9 -> s1 [0, 110] { R2755 += 1, R135 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R2755 += 1 };
  s9 -> s10 [111, 111] { R2755 += 1, R135 += 1 };
  s9 -> s1 [112, 65535] { R2755 += 1, R135 += 1 };
  s10 -> s1 [0, 114] { R2755 += 1, R135 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R2755 += 1 };
  s10 -> s11 [115, 115] { R2755 += 1, R135 += 1 };
  s10 -> s1 [116, 65535] { R2755 += 1, R135 += 1 };
  s11 -> s1 [0, 115] { R2755 += 1, R135 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R2755 += 1 };
  s11 -> s12 [116, 116] { R2755 += 1, R135 += 1 };
  s11 -> s1 [117, 65535] { R2755 += 1, R135 += 1 };
  s12 -> s1 [0, 65535] { R2755 += 1, R135 += 1 };
  s13 -> s13 [0, 65535] { R2755 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2757 += 1, R139 += 1, R140 += 1 };
  s0 -> s0 [0, 65535] { R2756 += 1, R2757 += 1 };
  s0 -> s2 [0, 65535] { R2757 += 1, R140 += 1, R141 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2757 += 1, R139 += 1, R140 += 1 };
  s1 -> s2 [0, 65535] { R2757 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [0, 65535] { R2757 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2757 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535] { R2757 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2759 += 1, R145 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R2759 += 1, R146 += 1, R147 += 1 };
  s0 -> s0 [0, 65535] { R2758 += 1, R2759 += 1 };
  s1 -> s1 [0, 65535] { R2759 += 1, R145 += 1, R146 += 1 };
  s1 -> s2 [0, 65535] { R2759 += 1, R146 += 1, R147 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2759 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [0, 65535] { R2759 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2759 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R2760 += 1, R2761 += 1 };
  s0 -> s1 [0, 65535] { R2761 += 1 };
  s1 -> s1 [0, 65535] { R2761 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2763 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R2762 += 1, R2763 += 1 };
  s0 -> s2 [0, 65535] { R2763 += 1, R151 += 1, R152 += 1 };
  s1 -> s1 [0, 65535] { R2763 += 1, R152 += 1, R153 += 1 };
  s1 -> s4 [0, 65535] { R2763 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2763 += 1, R152 += 1, R153 += 1 };
  s2 -> s2 [0, 65535] { R2763 += 1, R151 += 1, R152 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2763 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R2764 += 1, R2765 += 1 };
  s0 -> s1 [0, 65535] { R2765 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2765 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 76] { R2767 += 1, R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R2767 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R2766 += 1, R2767 += 1 };
  s0 -> s3 [77, 77] { R2767 += 1, R158 += 1, R159 += 1 };
  s0 -> s4 [77, 77] { R2767 += 1, R158 += 1, R159 += 1 };
  s0 -> s1 [78, 65535] { R2767 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 76] { R2767 += 1, R158 += 1, R159 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2767 += 1 };
  s1 -> s3 [77, 77] { R2767 += 1, R158 += 1, R159 += 1 };
  s1 -> s4 [77, 77] { R2767 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [78, 65535] { R2767 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [0, 76] { R2767 += 1, R158 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R2767 += 1, R157 += 1, R158 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R2767 += 1, R158 += 1, R159 += 1 };
  s2 -> s4 [77, 77] { R2767 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [78, 65535] { R2767 += 1, R158 += 1, R159 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2767 += 1 };
  s3 -> s3 [0, 65535] { R2767 += 1, R158 += 1, R159 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2767 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2767 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R2800 += 1, R2801 += 1 };
  s0 -> s1 [0, 65535] { R2801 += 1, R48 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2801 += 1, R48 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2803 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R2802 += 1, R2803 += 1 };
  s0 -> s2 [65, 65] { R2803 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R2803 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R2803 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R2803 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2803 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R2803 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R2803 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R2803 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2805 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R2804 += 1, R2805 += 1 };
  s0 -> s2 [65, 65] { R2805 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R2805 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R2805 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R2805 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2805 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R2805 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R2805 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2805 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R2807 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R2806 += 1, R2807 += 1 };
  s0 -> s2 [65, 65] { R2807 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R2807 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R2807 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R2807 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2807 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R2807 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R2807 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2807 += 1, R118 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R2809 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R2808 += 1, R2809 += 1 };
  s0 -> s2 [65, 65] { R2809 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [65, 65] { R2809 += 1, R120 += 1, R121 += 1 };
  s0 -> s1 [66, 65535] { R2809 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 64] { R2809 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2809 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [65, 65] { R2809 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [66, 65535] { R2809 += 1, R120 += 1, R121 += 1 };
  s2 -> s2 [0, 65535] { R2809 += 1, R120 += 1, R121 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R2811 += 1 };
  s0 -> s0 [0, 65535] { R2810 += 1, R2811 += 1 };
  s0 -> s2 [65, 65] { R2811 += 1 };
  s0 -> s3 [65, 65] { R2811 += 1 };
  s0 -> s1 [66, 65535] { R2811 += 1 };
  s1 -> s1 [0, 64] { R2811 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2811 += 1 };
  s1 -> s3 [65, 65] { R2811 += 1 };
  s1 -> s1 [66, 65535] { R2811 += 1 };
  s2 -> s2 [0, 65535] { R2811 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R2813 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R2812 += 1, R2813 += 1 };
  s0 -> s2 [65, 65] { R2813 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [65, 65] { R2813 += 1, R126 += 1, R127 += 1 };
  s0 -> s1 [66, 65535] { R2813 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 64] { R2813 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2813 += 1, R126 += 1, R127 += 1 };
  s1 -> s3 [65, 65] { R2813 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [66, 65535] { R2813 += 1, R126 += 1, R127 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2813 += 1, R126 += 1, R127 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R2815 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R2814 += 1, R2815 += 1 };
  s0 -> s2 [65, 65] { R2815 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [65, 65] { R2815 += 1, R132 += 1, R133 += 1 };
  s0 -> s1 [66, 65535] { R2815 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 64] { R2815 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2815 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [65, 65] { R2815 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [66, 65535] { R2815 += 1, R132 += 1, R133 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2815 += 1, R132 += 1, R133 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R2817 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R2816 += 1, R2817 += 1 };
  s0 -> s2 [65, 65] { R2817 += 1, R136 += 1, R137 += 1 };
  s0 -> s3 [65, 65] { R2817 += 1, R136 += 1, R137 += 1 };
  s0 -> s1 [66, 65535] { R2817 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 64] { R2817 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2817 += 1, R136 += 1, R137 += 1 };
  s1 -> s3 [65, 65] { R2817 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [66, 65535] { R2817 += 1, R136 += 1, R137 += 1 };
  s2 -> s2 [0, 65535] { R2817 += 1, R136 += 1, R137 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R2819 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R2818 += 1, R2819 += 1 };
  s0 -> s2 [65, 65] { R2819 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R2819 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R2819 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R2819 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2819 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R2819 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R2819 += 1, R142 += 1, R143 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2819 += 1, R142 += 1, R143 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R2821 += 1 };
  s0 -> s0 [0, 65535] { R2820 += 1, R2821 += 1 };
  s0 -> s2 [65, 65] { R2821 += 1 };
  s0 -> s3 [65, 65] { R2821 += 1 };
  s0 -> s1 [66, 65535] { R2821 += 1 };
  s1 -> s1 [0, 64] { R2821 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2821 += 1 };
  s1 -> s3 [65, 65] { R2821 += 1 };
  s1 -> s1 [66, 65535] { R2821 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2821 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R2823 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R2822 += 1, R2823 += 1 };
  s0 -> s2 [65, 65] { R2823 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [65, 65] { R2823 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [66, 65535] { R2823 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 64] { R2823 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2823 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [65, 65] { R2823 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [66, 65535] { R2823 += 1, R148 += 1, R149 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2823 += 1, R148 += 1, R149 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R2825 += 1 };
  s0 -> s0 [0, 65535] { R2824 += 1, R2825 += 1 };
  s0 -> s2 [65, 65] { R2825 += 1 };
  s0 -> s3 [65, 65] { R2825 += 1 };
  s0 -> s1 [66, 65535] { R2825 += 1 };
  s1 -> s1 [0, 64] { R2825 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2825 += 1 };
  s1 -> s3 [65, 65] { R2825 += 1 };
  s1 -> s1 [66, 65535] { R2825 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2825 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R2827 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R2826 += 1, R2827 += 1 };
  s0 -> s2 [65, 65] { R2827 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [65, 65] { R2827 += 1, R154 += 1, R155 += 1 };
  s0 -> s1 [66, 65535] { R2827 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 64] { R2827 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2827 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [65, 65] { R2827 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [66, 65535] { R2827 += 1, R154 += 1, R155 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2827 += 1, R154 += 1, R155 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 43] { R2829 += 1 };
  s0 -> s0 [0, 65535] { R2828 += 1, R2829 += 1 };
  s0 -> s1 [45, 45] { R2829 += 1 };
  s0 -> s2 [46, 46] { R2829 += 1 };
  s0 -> s1 [48, 62] { R2829 += 1 };
  s0 -> s3 [65, 65] { R2829 += 1 };
  s0 -> s1 [66, 65535] { R2829 += 1 };
  s1 -> s1 [0, 43] { R2829 += 1 };
  s1 -> s1 [45, 45] { R2829 += 1 };
  s1 -> s2 [46, 46] { R2829 += 1 };
  s1 -> s1 [48, 62] { R2829 += 1 };
  s1 -> s3 [65, 65] { R2829 += 1 };
  s1 -> s1 [66, 65535] { R2829 += 1 };
  s2 -> s1 [0, 43] { R2829 += 1 };
  s2 -> s1 [45, 45] { R2829 += 1 };
  s2 -> s2 [46, 46] { R2829 += 1 };
  s2 -> s1 [48, 62] { R2829 += 1 };
  s2 -> s3 [65, 65] { R2829 += 1 };
  s2 -> s1 [66, 114] { R2829 += 1 };
  s2 -> s8 [115, 115] { R2829 += 1 };
  s2 -> s1 [116, 65535] { R2829 += 1 };
  s3 -> s3 [0, 43] { R2829 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2829 += 1 };
  s3 -> s4 [46, 46] { R2829 += 1 };
  s3 -> s3 [48, 62] { R2829 += 1 };
  s3 -> s3 [65, 65535] { R2829 += 1 };
  s4 -> s3 [0, 43] { R2829 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2829 += 1 };
  s4 -> s4 [46, 46] { R2829 += 1 };
  s4 -> s3 [48, 62] { R2829 += 1 };
  s4 -> s3 [65, 114] { R2829 += 1 };
  s4 -> s5 [115, 115] { R2829 += 1 };
  s4 -> s3 [116, 65535] { R2829 += 1 };
  s5 -> s3 [0, 43] { R2829 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2829 += 1 };
  s5 -> s4 [46, 46] { R2829 += 1 };
  s5 -> s3 [48, 62] { R2829 += 1 };
  s5 -> s3 [65, 110] { R2829 += 1 };
  s5 -> s6 [111, 111] { R2829 += 1 };
  s5 -> s3 [112, 65535] { R2829 += 1 };
  s6 -> s3 [0, 43] { R2829 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2829 += 1 };
  s6 -> s4 [46, 46] { R2829 += 1 };
  s6 -> s3 [48, 62] { R2829 += 1 };
  s6 -> s3 [65, 98] { R2829 += 1 };
  s6 -> s7 [99, 99] { R2829 += 1 };
  s6 -> s3 [100, 65535] { R2829 += 1 };
  s7 -> s3 [0, 43] { R2829 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2829 += 1 };
  s7 -> s4 [46, 46] { R2829 += 1 };
  s7 -> s3 [48, 62] { R2829 += 1 };
  s7 -> s3 [65, 106] { R2829 += 1 };
  s7 -> s3 [108, 65535] { R2829 += 1 };
  s8 -> s1 [0, 43] { R2829 += 1 };
  s8 -> s1 [45, 45] { R2829 += 1 };
  s8 -> s2 [46, 46] { R2829 += 1 };
  s8 -> s1 [48, 62] { R2829 += 1 };
  s8 -> s3 [65, 65] { R2829 += 1 };
  s8 -> s1 [66, 110] { R2829 += 1 };
  s8 -> s9 [111, 111] { R2829 += 1 };
  s8 -> s1 [112, 65535] { R2829 += 1 };
  s9 -> s1 [0, 43] { R2829 += 1 };
  s9 -> s1 [45, 45] { R2829 += 1 };
  s9 -> s2 [46, 46] { R2829 += 1 };
  s9 -> s1 [48, 62] { R2829 += 1 };
  s9 -> s3 [65, 65] { R2829 += 1 };
  s9 -> s1 [66, 98] { R2829 += 1 };
  s9 -> s10 [99, 99] { R2829 += 1 };
  s9 -> s1 [100, 65535] { R2829 += 1 };
  s10 -> s1 [0, 43] { R2829 += 1 };
  s10 -> s1 [45, 45] { R2829 += 1 };
  s10 -> s2 [46, 46] { R2829 += 1 };
  s10 -> s1 [48, 62] { R2829 += 1 };
  s10 -> s3 [65, 65] { R2829 += 1 };
  s10 -> s1 [66, 106] { R2829 += 1 };
  s10 -> s1 [108, 65535] { R2829 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R2830 += 1, R2831 += 1 };
  s0 -> s1 [0, 65535] { R2831 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R2831 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 57] { R2833 += 1 };
  s0 -> s0 [0, 65535] { R2832 += 1, R2833 += 1 };
  s0 -> s2 [0, 65535] { R2833 += 1, R21 += 1 };
  s0 -> s3 [58, 58] { R2833 += 1 };
  s0 -> s1 [59, 65535] { R2833 += 1 };
  s1 -> s1 [0, 57] { R2833 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2833 += 1 };
  s1 -> s1 [59, 65535] { R2833 += 1 };
  s2 -> s1 [0, 57] { R2833 += 1 };
  s2 -> s2 [0, 65535] { R2833 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2833 += 1 };
  s2 -> s1 [59, 65535] { R2833 += 1 };
  s3 -> s3 [0, 65535] { R2833 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 42] { R2835 += 1 };
  s0 -> s2 [0, 65535] { R2835 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R2834 += 1, R2835 += 1 };
  s0 -> s3 [43, 43] { R2835 += 1 };
  s0 -> s1 [44, 65535] { R2835 += 1 };
  s1 -> s1 [0, 42] { R2835 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R2835 += 1 };
  s1 -> s1 [44, 65535] { R2835 += 1 };
  s2 -> s1 [0, 42] { R2835 += 1 };
  s2 -> s2 [0, 65535] { R2835 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R2835 += 1 };
  s2 -> s1 [44, 65535] { R2835 += 1 };
  s3 -> s3 [0, 65535] { R2835 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R2837 += 1 };
  s0 -> s0 [0, 65535] { R2836 += 1, R2837 += 1 };
  s0 -> s2 [0, 65535] { R2837 += 1, R25 += 1 };
  s0 -> s3 [65, 65] { R2837 += 1 };
  s0 -> s1 [66, 65535] { R2837 += 1 };
  s1 -> s1 [0, 64] { R2837 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2837 += 1 };
  s1 -> s1 [66, 65535] { R2837 += 1 };
  s2 -> s1 [0, 64] { R2837 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2837 += 1, R25 += 1 };
  s2 -> s3 [65, 65] { R2837 += 1 };
  s2 -> s1 [66, 65535] { R2837 += 1 };
  s3 -> s3 [0, 65535] { R2837 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 90] { R2839 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R2839 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R2838 += 1, R2839 += 1 };
  s0 -> s3 [91, 91] { R2839 += 1, R51 += 1 };
  s0 -> s1 [92, 65535] { R2839 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2839 += 1 };
  s1 -> s1 [0, 65535] { R2839 += 1, R51 += 1 };
  s2 -> s1 [0, 90] { R2839 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2839 += 1, R50 += 1, R51 += 1 };
  s2 -> s3 [91, 91] { R2839 += 1, R51 += 1 };
  s2 -> s1 [92, 65535] { R2839 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R2839 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2839 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s0 [0, 65535] { R2840 += 1, R2841 += 1 };
  s0 -> s1 [0, 65535] { R2841 += 1, R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R2841 += 1, R53 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2841 += 1, R52 += 1, R53 += 1 };
  s1 -> s2 [0, 65535] { R2841 += 1, R53 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2841 += 1 };
  s2 -> s2 [0, 65535] { R2841 += 1, R53 += 1, R8 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2841 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R2843 += 1, R83 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R2842 += 1, R2843 += 1 };
  s0 -> s2 [0, 65535] { R2843 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R2843 += 1, R83 += 1, R42 += 1 };
  s1 -> s4 [0, 65535] { R2843 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2843 += 1, R83 += 1, R42 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2843 += 1, R82 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2843 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 107] { R2845 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R2844 += 1, R2845 += 1 };
  s0 -> s2 [0, 65535] { R2845 += 1, R84 += 1, R85 += 1 };
  s0 -> s3 [108, 108] { R2845 += 1, R85 += 1 };
  s0 -> s1 [109, 65535] { R2845 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R2845 += 1, R85 += 1 };
  s1 -> s13 [0, 65535] { R2845 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R2845 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2845 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [108, 108] { R2845 += 1, R85 += 1 };
  s2 -> s1 [109, 65535] { R2845 += 1, R85 += 1 };
  s3 -> s1 [0, 110] { R2845 += 1, R85 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2845 += 1 };
  s3 -> s5 [111, 111] { R2845 += 1, R85 += 1 };
  s3 -> s1 [112, 65535] { R2845 += 1, R85 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R2845 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R2845 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R2845 += 1, R85 += 1 };
  s5 -> s1 [100, 65535] { R2845 += 1, R85 += 1 };
  s6 -> s1 [0, 96] { R2845 += 1, R85 += 1 };
  s6 -> s6 [0, 65535] { R2845 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R2845 += 1, R85 += 1 };
  s6 -> s1 [98, 65535] { R2845 += 1, R85 += 1 };
  s7 -> s1 [0, 107] { R2845 += 1, R85 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R2845 += 1 };
  s7 -> s8 [108, 108] { R2845 += 1, R85 += 1 };
  s7 -> s1 [109, 65535] { R2845 += 1, R85 += 1 };
  s8 -> s1 [0, 103] { R2845 += 1, R85 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R2845 += 1 };
  s8 -> s9 [104, 104] { R2845 += 1, R85 += 1 };
  s8 -> s1 [105, 65535] { R2845 += 1, R85 += 1 };
  s9 -> s1 [0, 110] { R2845 += 1, R85 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R2845 += 1 };
  s9 -> s10 [111, 111] { R2845 += 1, R85 += 1 };
  s9 -> s1 [112, 65535] { R2845 += 1, R85 += 1 };
  s10 -> s1 [0, 114] { R2845 += 1, R85 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R2845 += 1 };
  s10 -> s11 [115, 115] { R2845 += 1, R85 += 1 };
  s10 -> s1 [116, 65535] { R2845 += 1, R85 += 1 };
  s11 -> s1 [0, 115] { R2845 += 1, R85 += 1 };
  s11 -> s11 [0, 65535] { R2845 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R2845 += 1, R85 += 1 };
  s11 -> s1 [117, 65535] { R2845 += 1, R85 += 1 };
  s12 -> s1 [0, 65535] { R2845 += 1, R85 += 1 };
  s13 -> s13 [0, 65535] { R2845 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R2847 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R2847 += 1, R87 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R2846 += 1, R2847 += 1 };
  s1 -> s1 [0, 65535] { R2847 += 1, R86 += 1, R87 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2847 += 1, R87 += 1, R57 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2847 += 1, R87 += 1, R57 += 1 };
  s2 -> s4 [0, 65535] { R2847 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2847 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R2848 += 1, R2849 += 1 };
  s0 -> s1 [0, 65535] { R2849 += 1, R107 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R2849 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 65535] { R2849 += 1, R107 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R2849 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2849 += 1, R107 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R2849 += 1, R106 += 1, R107 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2849 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R2850 += 1, R2851 += 1 };
  s0 -> s1 [0, 65535] { R2851 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2851 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 42] { R2853 += 1, R109 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R2852 += 1, R2853 += 1 };
  s0 -> s2 [0, 65535] { R2853 += 1, R108 += 1, R109 += 1 };
  s0 -> s3 [43, 43] { R2853 += 1, R109 += 1, R56 += 1 };
  s0 -> s4 [43, 43] { R2853 += 1, R109 += 1, R56 += 1 };
  s0 -> s1 [44, 65535] { R2853 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [0, 42] { R2853 += 1, R109 += 1, R56 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2853 += 1 };
  s1 -> s3 [43, 43] { R2853 += 1, R109 += 1, R56 += 1 };
  s1 -> s4 [43, 43] { R2853 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [44, 65535] { R2853 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [0, 42] { R2853 += 1, R109 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R2853 += 1, R108 += 1, R109 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R2853 += 1, R109 += 1, R56 += 1 };
  s2 -> s4 [43, 43] { R2853 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [44, 65535] { R2853 += 1, R109 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R2853 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2853 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2853 += 1, R109 += 1, R56 += 1 };
  s5 -> s5 [0, 65535] { R2853 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R2855 += 1, R2707 += 1 };
  s0 -> s2 [0, 65535] { R2855 += 1, R2706 += 1, R2707 += 1 };
  s0 -> s0 [0, 65535] { R2854 += 1, R2855 += 1 };
  s0 -> s1 [66, 65535] { R2855 += 1, R2707 += 1 };
  s1 -> s1 [0, 64] { R2855 += 1, R2707 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2855 += 1 };
  s1 -> s1 [66, 65535] { R2855 += 1, R2707 += 1 };
  s2 -> s1 [0, 64] { R2855 += 1, R2707 += 1 };
  s2 -> s2 [0, 65535] { R2855 += 1, R2706 += 1, R2707 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2855 += 1, R2707 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R2857 += 1, R2708 += 1, R2709 += 1 };
  s0 -> s2 [0, 65535] { R2857 += 1, R2709 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2856 += 1, R2857 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2857 += 1, R2708 += 1, R2709 += 1 };
  s1 -> s2 [0, 65535] { R2857 += 1, R2709 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2857 += 1, R2709 += 1, R43 += 1 };
  s2 -> s4 [0, 65535] { R2857 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2857 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R2859 += 1, R2711 += 1 };
  s0 -> s2 [0, 65535] { R2859 += 1, R2710 += 1, R2711 += 1 };
  s0 -> s0 [0, 65535] { R2858 += 1, R2859 += 1 };
  s0 -> s1 [80, 65535] { R2859 += 1, R2711 += 1 };
  s1 -> s1 [0, 65] { R2859 += 1, R2711 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2859 += 1 };
  s1 -> s1 [80, 65535] { R2859 += 1, R2711 += 1 };
  s2 -> s1 [0, 65] { R2859 += 1, R2711 += 1 };
  s2 -> s2 [0, 65535] { R2859 += 1, R2710 += 1, R2711 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R2859 += 1, R2711 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R2861 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s2 [0, 65535] { R2861 += 1, R2713 += 1, R667 += 1 };
  s0 -> s0 [0, 65535] { R2860 += 1, R2861 += 1 };
  s1 -> s1 [0, 65535] { R2861 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s2 [0, 65535] { R2861 += 1, R2713 += 1, R667 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2861 += 1, R2713 += 1, R667 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2861 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2861 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 81] { R2863 += 1, R2715 += 1 };
  s0 -> s0 [0, 65535] { R2862 += 1, R2863 += 1 };
  s0 -> s2 [0, 65535] { R2863 += 1, R2715 += 1, R669 += 1 };
  s0 -> s3 [0, 65535] { R2863 += 1, R2714 += 1, R2715 += 1 };
  s0 -> s1 [83, 65535] { R2863 += 1, R2715 += 1 };
  s1 -> s1 [0, 81] { R2863 += 1, R2715 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2863 += 1 };
  s1 -> s1 [83, 65535] { R2863 += 1, R2715 += 1 };
  s2 -> s1 [0, 81] { R2863 += 1, R2715 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2863 += 1, R2715 += 1, R669 += 1 };
  s2 -> s5 [0, 65535] { R2863 += 1 };
  s2 -> s1 [83, 65535] { R2863 += 1, R2715 += 1 };
  s3 -> s1 [0, 81] { R2863 += 1, R2715 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2863 += 1, R2715 += 1, R669 += 1 };
  s3 -> s3 [0, 65535] { R2863 += 1, R2714 += 1, R2715 += 1 };
  s3 -> s1 [83, 65535] { R2863 += 1, R2715 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2863 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 79] { R2865 += 1, R2717 += 1 };
  s0 -> s2 [0, 65535] { R2865 += 1, R2717 += 1, R671 += 1 };
  s0 -> s3 [0, 65535] { R2865 += 1, R2716 += 1, R2717 += 1 };
  s0 -> s0 [0, 65535] { R2864 += 1, R2865 += 1 };
  s0 -> s1 [81, 65535] { R2865 += 1, R2717 += 1 };
  s1 -> s1 [0, 79] { R2865 += 1, R2717 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2865 += 1 };
  s1 -> s1 [81, 65535] { R2865 += 1, R2717 += 1 };
  s2 -> s1 [0, 79] { R2865 += 1, R2717 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2865 += 1, R2717 += 1, R671 += 1 };
  s2 -> s5 [0, 65535] { R2865 += 1 };
  s2 -> s1 [81, 65535] { R2865 += 1, R2717 += 1 };
  s3 -> s1 [0, 79] { R2865 += 1, R2717 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2865 += 1, R2717 += 1, R671 += 1 };
  s3 -> s3 [0, 65535] { R2865 += 1, R2716 += 1, R2717 += 1 };
  s3 -> s1 [81, 65535] { R2865 += 1, R2717 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2865 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R2867 += 1, R2718 += 1, R2719 += 1 };
  s0 -> s2 [0, 65535] { R2867 += 1, R2719 += 1, R675 += 1, R676 += 1 };
  s0 -> s3 [0, 65535] { R2867 += 1, R2719 += 1, R676 += 1, R677 += 1 };
  s0 -> s0 [0, 65535] { R2866 += 1, R2867 += 1 };
  s1 -> s1 [0, 65535] { R2867 += 1, R2718 += 1, R2719 += 1 };
  s1 -> s2 [0, 65535] { R2867 += 1, R2719 += 1, R675 += 1, R676 += 1 };
  s1 -> s3 [0, 65535] { R2867 += 1, R2719 += 1, R676 += 1, R677 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R2867 += 1 };
  s2 -> s2 [0, 65535] { R2867 += 1, R2719 += 1, R675 += 1, R676 += 1 };
  s2 -> s3 [0, 65535] { R2867 += 1, R2719 += 1, R676 += 1, R677 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R2867 += 1 };
  s3 -> s3 [0, 65535] { R2867 += 1, R2719 += 1, R676 += 1, R677 += 1 };
  s3 -> s5 [0, 65535] { R2867 += 1, R2719 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2867 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R2867 += 1 };
  s5 -> s5 [0, 65535] { R2867 += 1, R2719 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 107] { R2869 += 1, R2721 += 1, R681 += 1 };
  s0 -> s2 [0, 65535] { R2869 += 1, R2721 += 1, R680 += 1, R681 += 1 };
  s0 -> s0 [0, 65535] { R2868 += 1, R2869 += 1 };
  s0 -> s3 [0, 65535] { R2869 += 1, R2720 += 1, R2721 += 1 };
  s0 -> s4 [108, 108] { R2869 += 1, R2721 += 1, R681 += 1 };
  s0 -> s1 [109, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s1 -> s15 [0, 65535] { R2869 += 1, R2721 += 1 };
  s1 -> s6 [0, 65535] { R2869 += 1 };
  s2 -> s1 [0, 107] { R2869 += 1, R2721 += 1, R681 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2869 += 1, R2721 += 1, R680 += 1, R681 += 1 };
  s2 -> s6 [0, 65535] { R2869 += 1 };
  s2 -> s4 [108, 108] { R2869 += 1, R2721 += 1, R681 += 1 };
  s2 -> s1 [109, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s3 -> s1 [0, 107] { R2869 += 1, R2721 += 1, R681 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2869 += 1, R2721 += 1, R680 += 1, R681 += 1 };
  s3 -> s3 [0, 65535] { R2869 += 1, R2720 += 1, R2721 += 1 };
  s3 -> s4 [108, 108] { R2869 += 1, R2721 += 1, R681 += 1 };
  s3 -> s1 [109, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s4 -> s1 [0, 110] { R2869 += 1, R2721 += 1, R681 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2869 += 1, R2721 += 1 };
  s4 -> s6 [0, 65535] { R2869 += 1 };
  s4 -> s7 [111, 111] { R2869 += 1, R2721 += 1, R681 += 1 };
  s4 -> s1 [112, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2869 += 1 };
  s7 -> s1 [0, 98] { R2869 += 1, R2721 += 1, R681 += 1 };
  s7 -> s7 [0, 65535] { R2869 += 1, R2721 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2869 += 1 };
  s7 -> s8 [99, 99] { R2869 += 1, R2721 += 1, R681 += 1 };
  s7 -> s1 [100, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s8 -> s1 [0, 96] { R2869 += 1, R2721 += 1, R681 += 1 };
  s8 -> s8 [0, 65535] { R2869 += 1, R2721 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R2869 += 1 };
  s8 -> s9 [97, 97] { R2869 += 1, R2721 += 1, R681 += 1 };
  s8 -> s1 [98, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s9 -> s1 [0, 107] { R2869 += 1, R2721 += 1, R681 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R2869 += 1, R2721 += 1 };
  s9 -> s6 [0, 65535] { R2869 += 1 };
  s9 -> s10 [108, 108] { R2869 += 1, R2721 += 1, R681 += 1 };
  s9 -> s1 [109, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s10 -> s1 [0, 103] { R2869 += 1, R2721 += 1, R681 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R2869 += 1, R2721 += 1 };
  s10 -> s6 [0, 65535] { R2869 += 1 };
  s10 -> s11 [104, 104] { R2869 += 1, R2721 += 1, R681 += 1 };
  s10 -> s1 [105, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s11 -> s1 [0, 110] { R2869 += 1, R2721 += 1, R681 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R2869 += 1, R2721 += 1 };
  s11 -> s6 [0, 65535] { R2869 += 1 };
  s11 -> s12 [111, 111] { R2869 += 1, R2721 += 1, R681 += 1 };
  s11 -> s1 [112, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s12 -> s1 [0, 114] { R2869 += 1, R2721 += 1, R681 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R2869 += 1, R2721 += 1 };
  s12 -> s6 [0, 65535] { R2869 += 1 };
  s12 -> s13 [115, 115] { R2869 += 1, R2721 += 1, R681 += 1 };
  s12 -> s1 [116, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s13 -> s1 [0, 115] { R2869 += 1, R2721 += 1, R681 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R2869 += 1, R2721 += 1 };
  s13 -> s6 [0, 65535] { R2869 += 1 };
  s13 -> s14 [116, 116] { R2869 += 1, R2721 += 1, R681 += 1 };
  s13 -> s1 [117, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s14 -> s1 [0, 65535] { R2869 += 1, R2721 += 1, R681 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s15 [0, 65535] { R2869 += 1, R2721 += 1 };
  s15 -> s6 [0, 65535] { R2869 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 79] { R2871 += 1, R2723 += 1, R685 += 1 };
  s0 -> s2 [0, 65535] { R2871 += 1, R2722 += 1, R2723 += 1 };
  s0 -> s3 [0, 65535] { R2871 += 1, R2723 += 1, R684 += 1, R685 += 1 };
  s0 -> s0 [0, 65535] { R2870 += 1, R2871 += 1 };
  s0 -> s1 [81, 65535] { R2871 += 1, R2723 += 1, R685 += 1 };
  s1 -> s1 [0, 79] { R2871 += 1, R2723 += 1, R685 += 1 };
  s1 -> s4 [0, 65535] { R2871 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2871 += 1, R2723 += 1 };
  s1 -> s1 [81, 65535] { R2871 += 1, R2723 += 1, R685 += 1 };
  s2 -> s1 [0, 79] { R2871 += 1, R2723 += 1, R685 += 1 };
  s2 -> s2 [0, 65535] { R2871 += 1, R2722 += 1, R2723 += 1 };
  s2 -> s3 [0, 65535] { R2871 += 1, R2723 += 1, R684 += 1, R685 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R2871 += 1, R2723 += 1, R685 += 1 };
  s3 -> s1 [0, 79] { R2871 += 1, R2723 += 1, R685 += 1 };
  s3 -> s3 [0, 65535] { R2871 += 1, R2723 += 1, R684 += 1, R685 += 1 };
  s3 -> s4 [0, 65535] { R2871 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R2871 += 1, R2723 += 1, R685 += 1 };
  s4 -> s4 [0, 65535] { R2871 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s0 [0, 65535] { R2872 += 1, R2873 += 1 };
  s0 -> s1 [0, 65535] { R2873 += 1, R2725 += 1, R690 += 1, R691 += 1 };
  s0 -> s2 [0, 65535] { R2873 += 1, R2724 += 1, R2725 += 1 };
  s0 -> s3 [0, 65535] { R2873 += 1, R2725 += 1, R689 += 1, R690 += 1 };
  s1 -> s4 [0, 65535] { R2873 += 1 };
  s1 -> s1 [0, 65535] { R2873 += 1, R2725 += 1, R690 += 1, R691 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2873 += 1, R2725 += 1 };
  s2 -> s1 [0, 65535] { R2873 += 1, R2725 += 1, R690 += 1, R691 += 1 };
  s2 -> s2 [0, 65535] { R2873 += 1, R2724 += 1, R2725 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2873 += 1, R2725 += 1, R689 += 1, R690 += 1 };
  s3 -> s4 [0, 65535] { R2873 += 1 };
  s3 -> s1 [0, 65535] { R2873 += 1, R2725 += 1, R690 += 1, R691 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2873 += 1, R2725 += 1, R689 += 1, R690 += 1 };
  s4 -> s4 [0, 65535] { R2873 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2873 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2873 += 1, R2725 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s0 -> s2 [0, 65535] { R2875 += 1, R2726 += 1, R2727 += 1 };
  s0 -> s3 [0, 65535] { R2875 += 1, R2727 += 1, R694 += 1, R695 += 1 };
  s0 -> s0 [0, 65535] { R2874 += 1, R2875 += 1 };
  s0 -> s1 [91, 107] { R2875 += 1, R2727 += 1, R695 += 1 };
  s0 -> s4 [108, 108] { R2875 += 1, R2727 += 1, R695 += 1 };
  s0 -> s1 [109, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s1 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2875 += 1 };
  s1 -> s1 [0, 65535] { R2875 += 1, R2727 += 1 };
  s1 -> s1 [91, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s2 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s2 -> s2 [0, 65535] { R2875 += 1, R2726 += 1, R2727 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2875 += 1, R2727 += 1, R694 += 1, R695 += 1 };
  s2 -> s1 [91, 107] { R2875 += 1, R2727 += 1, R695 += 1 };
  s2 -> s4 [108, 108] { R2875 += 1, R2727 += 1, R695 += 1 };
  s2 -> s1 [109, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s3 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2875 += 1, R2727 += 1, R694 += 1, R695 += 1 };
  s3 -> s6 [0, 65535] { R2875 += 1 };
  s3 -> s1 [91, 107] { R2875 += 1, R2727 += 1, R695 += 1 };
  s3 -> s4 [108, 108] { R2875 += 1, R2727 += 1, R695 += 1 };
  s3 -> s1 [109, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s4 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2875 += 1, R2727 += 1 };
  s4 -> s6 [0, 65535] { R2875 += 1 };
  s4 -> s1 [91, 110] { R2875 += 1, R2727 += 1, R695 += 1 };
  s4 -> s7 [111, 111] { R2875 += 1, R2727 += 1, R695 += 1 };
  s4 -> s1 [112, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2875 += 1 };
  s7 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2875 += 1 };
  s7 -> s7 [0, 65535] { R2875 += 1, R2727 += 1 };
  s7 -> s1 [91, 98] { R2875 += 1, R2727 += 1, R695 += 1 };
  s7 -> s8 [99, 99] { R2875 += 1, R2727 += 1, R695 += 1 };
  s7 -> s1 [100, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s8 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R2875 += 1 };
  s8 -> s8 [0, 65535] { R2875 += 1, R2727 += 1 };
  s8 -> s1 [91, 96] { R2875 += 1, R2727 += 1, R695 += 1 };
  s8 -> s9 [97, 97] { R2875 += 1, R2727 += 1, R695 += 1 };
  s8 -> s1 [98, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s9 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R2875 += 1 };
  s9 -> s9 [0, 65535] { R2875 += 1, R2727 += 1 };
  s9 -> s1 [91, 107] { R2875 += 1, R2727 += 1, R695 += 1 };
  s9 -> s10 [108, 108] { R2875 += 1, R2727 += 1, R695 += 1 };
  s9 -> s1 [109, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s10 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R2875 += 1, R2727 += 1 };
  s10 -> s6 [0, 65535] { R2875 += 1 };
  s10 -> s1 [91, 103] { R2875 += 1, R2727 += 1, R695 += 1 };
  s10 -> s11 [104, 104] { R2875 += 1, R2727 += 1, R695 += 1 };
  s10 -> s1 [105, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s11 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R2875 += 1, R2727 += 1 };
  s11 -> s6 [0, 65535] { R2875 += 1 };
  s11 -> s1 [91, 110] { R2875 += 1, R2727 += 1, R695 += 1 };
  s11 -> s12 [111, 111] { R2875 += 1, R2727 += 1, R695 += 1 };
  s11 -> s1 [112, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s12 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R2875 += 1 };
  s12 -> s12 [0, 65535] { R2875 += 1, R2727 += 1 };
  s12 -> s1 [91, 114] { R2875 += 1, R2727 += 1, R695 += 1 };
  s12 -> s13 [115, 115] { R2875 += 1, R2727 += 1, R695 += 1 };
  s12 -> s1 [116, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s13 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R2875 += 1, R2727 += 1 };
  s13 -> s6 [0, 65535] { R2875 += 1 };
  s13 -> s1 [91, 115] { R2875 += 1, R2727 += 1, R695 += 1 };
  s13 -> s14 [116, 116] { R2875 += 1, R2727 += 1, R695 += 1 };
  s13 -> s1 [117, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  s14 -> s1 [0, 80] { R2875 += 1, R2727 += 1, R695 += 1 };
  s14 -> s1 [91, 65535] { R2875 += 1, R2727 += 1, R695 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R2877 += 1, R2729 += 1, R700 += 1, R701 += 1 };
  s0 -> s2 [0, 65535] { R2877 += 1, R2729 += 1, R699 += 1, R700 += 1 };
  s0 -> s0 [0, 65535] { R2876 += 1, R2877 += 1 };
  s0 -> s3 [0, 65535] { R2877 += 1, R2728 += 1, R2729 += 1 };
  s1 -> s6 [0, 65535] { R2877 += 1, R2729 += 1 };
  s1 -> s1 [0, 65535] { R2877 += 1, R2729 += 1, R700 += 1, R701 += 1 };
  s1 -> s5 [0, 65535] { R2877 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2877 += 1, R2729 += 1, R700 += 1, R701 += 1 };
  s2 -> s2 [0, 65535] { R2877 += 1, R2729 += 1, R699 += 1, R700 += 1 };
  s2 -> s5 [0, 65535] { R2877 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2877 += 1, R2729 += 1, R700 += 1, R701 += 1 };
  s3 -> s2 [0, 65535] { R2877 += 1, R2729 += 1, R699 += 1, R700 += 1 };
  s3 -> s3 [0, 65535] { R2877 += 1, R2728 += 1, R2729 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2877 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2877 += 1, R2729 += 1 };
  s6 -> s5 [0, 65535] { R2877 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R2879 += 1, R2731 += 1, R705 += 1, R706 += 1 };
  s0 -> s0 [0, 65535] { R2878 += 1, R2879 += 1 };
  s0 -> s2 [0, 65535] { R2879 += 1, R2731 += 1, R706 += 1, R707 += 1 };
  s0 -> s3 [0, 65535] { R2879 += 1, R2730 += 1, R2731 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2879 += 1, R2731 += 1, R705 += 1, R706 += 1 };
  s1 -> s6 [0, 65535] { R2879 += 1 };
  s1 -> s2 [0, 65535] { R2879 += 1, R2731 += 1, R706 += 1, R707 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2879 += 1, R2731 += 1 };
  s2 -> s6 [0, 65535] { R2879 += 1 };
  s2 -> s2 [0, 65535] { R2879 += 1, R2731 += 1, R706 += 1, R707 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2879 += 1, R2731 += 1, R705 += 1, R706 += 1 };
  s3 -> s2 [0, 65535] { R2879 += 1, R2731 += 1, R706 += 1, R707 += 1 };
  s3 -> s3 [0, 65535] { R2879 += 1, R2730 += 1, R2731 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2879 += 1, R2731 += 1 };
  s5 -> s6 [0, 65535] { R2879 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2879 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 65535] { R2881 += 1, R2733 += 1 };
  s0 -> s2 [0, 65535] { R2881 += 1, R2732 += 1, R2733 += 1 };
  s0 -> s0 [0, 65535] { R2880 += 1, R2881 += 1 };
  s1 -> s1 [0, 65535] { R2881 += 1, R2733 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2881 += 1 };
  s2 -> s1 [0, 65535] { R2881 += 1, R2733 += 1 };
  s2 -> s2 [0, 65535] { R2881 += 1, R2732 += 1, R2733 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2881 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 65535] { R2883 += 1, R2734 += 1, R2735 += 1 };
  s0 -> s2 [0, 65535] { R2883 += 1, R2735 += 1 };
  s0 -> s0 [0, 65535] { R2882 += 1, R2883 += 1 };
  s0 -> s3 [0, 65535] { R2883 += 1, R2735 += 1, R1818 += 1, R1819 += 1 };
  s1 -> s1 [0, 65535] { R2883 += 1, R2734 += 1, R2735 += 1 };
  s1 -> s2 [0, 65535] { R2883 += 1, R2735 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R2883 += 1, R2735 += 1, R1818 += 1, R1819 += 1 };
  s2 -> s2 [0, 65535] { R2883 += 1, R2735 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2883 += 1 };
  s3 -> s2 [0, 65535] { R2883 += 1, R2735 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2883 += 1 };
  s3 -> s3 [0, 65535] { R2883 += 1, R2735 += 1, R1818 += 1, R1819 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2883 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 65535] { R2885 += 1, R2737 += 1 };
  s0 -> s2 [0, 65535] { R2885 += 1, R2736 += 1, R2737 += 1 };
  s0 -> s0 [0, 65535] { R2884 += 1, R2885 += 1 };
  s1 -> s1 [0, 65535] { R2885 += 1, R2737 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2885 += 1 };
  s2 -> s1 [0, 65535] { R2885 += 1, R2737 += 1 };
  s2 -> s2 [0, 65535] { R2885 += 1, R2736 += 1, R2737 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2885 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 65535] { R2887 += 1, R2739 += 1 };
  s0 -> s2 [0, 65535] { R2887 += 1, R2738 += 1, R2739 += 1 };
  s0 -> s0 [0, 65535] { R2886 += 1, R2887 += 1 };
  s1 -> s1 [0, 65535] { R2887 += 1, R2739 += 1 };
  s1 -> s4 [0, 65535] { R2887 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2887 += 1, R2739 += 1 };
  s2 -> s2 [0, 65535] { R2887 += 1, R2738 += 1, R2739 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2887 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s0 [0, 65535] { R2888 += 1, R2889 += 1 };
  s0 -> s1 [0, 65535] { R2889 += 1, R2768 += 1, R2769 += 1 };
  s0 -> s2 [0, 65535] { R2889 += 1, R2769 += 1, R45 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2889 += 1, R2768 += 1, R2769 += 1 };
  s1 -> s2 [0, 65535] { R2889 += 1, R2769 += 1, R45 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2889 += 1, R2769 += 1, R45 += 1 };
  s2 -> s4 [0, 65535] { R2889 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2889 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R2891 += 1, R2771 += 1 };
  s0 -> s2 [0, 65535] { R2891 += 1, R2770 += 1, R2771 += 1 };
  s0 -> s0 [0, 65535] { R2890 += 1, R2891 += 1 };
  s0 -> s3 [65, 65] { R2891 += 1, R2771 += 1 };
  s0 -> s4 [65, 65] { R2891 += 1, R2771 += 1 };
  s0 -> s5 [80, 80] { R2891 += 1, R2771 += 1 };
  s0 -> s1 [81, 65535] { R2891 += 1, R2771 += 1 };
  s1 -> s1 [0, 64] { R2891 += 1, R2771 += 1 };
  s1 -> s3 [65, 65] { R2891 += 1, R2771 += 1 };
  s1 -> s4 [65, 65] { R2891 += 1, R2771 += 1 };
  s1 -> s5 [80, 80] { R2891 += 1, R2771 += 1 };
  s1 -> s1 [81, 65535] { R2891 += 1, R2771 += 1 };
  s2 -> s1 [0, 64] { R2891 += 1, R2771 += 1 };
  s2 -> s2 [0, 65535] { R2891 += 1, R2770 += 1, R2771 += 1 };
  s2 -> s3 [65, 65] { R2891 += 1, R2771 += 1 };
  s2 -> s4 [65, 65] { R2891 += 1, R2771 += 1 };
  s2 -> s5 [80, 80] { R2891 += 1, R2771 += 1 };
  s2 -> s1 [81, 65535] { R2891 += 1, R2771 += 1 };
  s4 -> s4 [0, 65] { R2891 += 1, R2771 += 1 };
  s4 -> s8 [80, 80] { R2891 += 1, R2771 += 1 };
  s4 -> s4 [81, 65535] { R2891 += 1, R2771 += 1 };
  s5 -> s5 [0, 64] { R2891 += 1, R2771 += 1 };
  s5 -> s5 [0, 65535] { R2891 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R2891 += 1, R2771 += 1 };
  s5 -> s8 [65, 65] { R2891 += 1, R2771 += 1 };
  s5 -> s5 [80, 65535] { R2891 += 1, R2771 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2891 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R2891 += 1, R2771 += 1 };
  s8 -> s8 [0, 65535] { R2891 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R2891 += 1, R2771 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R2893 += 1, R2773 += 1, R666 += 1 };
  s0 -> s0 [0, 65535] { R2892 += 1, R2893 += 1 };
  s0 -> s2 [0, 65535] { R2893 += 1, R2772 += 1, R2773 += 1 };
  s0 -> s3 [65, 65] { R2893 += 1, R2773 += 1, R666 += 1 };
  s0 -> s4 [65, 65] { R2893 += 1, R2773 += 1, R666 += 1 };
  s0 -> s1 [66, 65535] { R2893 += 1, R2773 += 1, R666 += 1 };
  s1 -> s1 [0, 64] { R2893 += 1, R2773 += 1, R666 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2893 += 1 };
  s1 -> s3 [65, 65] { R2893 += 1, R2773 += 1, R666 += 1 };
  s1 -> s4 [65, 65] { R2893 += 1, R2773 += 1, R666 += 1 };
  s1 -> s1 [66, 65535] { R2893 += 1, R2773 += 1, R666 += 1 };
  s2 -> s1 [0, 64] { R2893 += 1, R2773 += 1, R666 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2893 += 1, R2772 += 1, R2773 += 1 };
  s2 -> s3 [65, 65] { R2893 += 1, R2773 += 1, R666 += 1 };
  s2 -> s4 [65, 65] { R2893 += 1, R2773 += 1, R666 += 1 };
  s2 -> s1 [66, 65535] { R2893 += 1, R2773 += 1, R666 += 1 };
  s3 -> s3 [0, 65535] { R2893 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2893 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2893 += 1, R2773 += 1, R666 += 1 };
  s5 -> s5 [0, 65535] { R2893 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R2895 += 1, R2775 += 1, R668 += 1 };
  s0 -> s0 [0, 65535] { R2894 += 1, R2895 += 1 };
  s0 -> s2 [0, 65535] { R2895 += 1, R2774 += 1, R2775 += 1 };
  s0 -> s3 [65, 65] { R2895 += 1, R2775 += 1, R668 += 1 };
  s0 -> s4 [65, 65] { R2895 += 1, R2775 += 1, R668 += 1 };
  s0 -> s1 [66, 65535] { R2895 += 1, R2775 += 1, R668 += 1 };
  s1 -> s1 [0, 64] { R2895 += 1, R2775 += 1, R668 += 1 };
  s1 -> s1 [0, 65535] { R2895 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2895 += 1, R2775 += 1, R668 += 1 };
  s1 -> s4 [65, 65] { R2895 += 1, R2775 += 1, R668 += 1 };
  s1 -> s1 [66, 65535] { R2895 += 1, R2775 += 1, R668 += 1 };
  s2 -> s1 [0, 64] { R2895 += 1, R2775 += 1, R668 += 1 };
  s2 -> s2 [0, 65535] { R2895 += 1, R2774 += 1, R2775 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2895 += 1, R2775 += 1, R668 += 1 };
  s2 -> s4 [65, 65] { R2895 += 1, R2775 += 1, R668 += 1 };
  s2 -> s1 [66, 65535] { R2895 += 1, R2775 += 1, R668 += 1 };
  s3 -> s3 [0, 65535] { R2895 += 1, R2775 += 1, R668 += 1 };
  s3 -> s6 [0, 65535] { R2895 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2895 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2895 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R2897 += 1, R2777 += 1, R670 += 1 };
  s0 -> s0 [0, 65535] { R2896 += 1, R2897 += 1 };
  s0 -> s2 [0, 65535] { R2897 += 1, R2776 += 1, R2777 += 1 };
  s0 -> s3 [65, 65] { R2897 += 1, R2777 += 1, R670 += 1 };
  s0 -> s4 [65, 65] { R2897 += 1, R2777 += 1, R670 += 1 };
  s0 -> s1 [66, 65535] { R2897 += 1, R2777 += 1, R670 += 1 };
  s1 -> s1 [0, 64] { R2897 += 1, R2777 += 1, R670 += 1 };
  s1 -> s1 [0, 65535] { R2897 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2897 += 1, R2777 += 1, R670 += 1 };
  s1 -> s4 [65, 65] { R2897 += 1, R2777 += 1, R670 += 1 };
  s1 -> s1 [66, 65535] { R2897 += 1, R2777 += 1, R670 += 1 };
  s2 -> s1 [0, 64] { R2897 += 1, R2777 += 1, R670 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2897 += 1, R2776 += 1, R2777 += 1 };
  s2 -> s3 [65, 65] { R2897 += 1, R2777 += 1, R670 += 1 };
  s2 -> s4 [65, 65] { R2897 += 1, R2777 += 1, R670 += 1 };
  s2 -> s1 [66, 65535] { R2897 += 1, R2777 += 1, R670 += 1 };
  s3 -> s3 [0, 65535] { R2897 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2897 += 1 };
  s4 -> s4 [0, 65535] { R2897 += 1, R2777 += 1, R670 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2897 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s0 -> s0 [0, 65535] { R2898 += 1, R2899 += 1 };
  s0 -> s2 [0, 65535] { R2899 += 1, R2778 += 1, R2779 += 1 };
  s0 -> s3 [65, 65] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s0 -> s4 [65, 65] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s0 -> s1 [66, 65535] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 64] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2899 += 1 };
  s1 -> s3 [65, 65] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s1 -> s4 [65, 65] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [66, 65535] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [0, 64] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2899 += 1, R2778 += 1, R2779 += 1 };
  s2 -> s3 [65, 65] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s2 -> s4 [65, 65] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [66, 65535] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2899 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2899 += 1, R2779 += 1, R672 += 1, R673 += 1 };
  s4 -> s6 [0, 65535] { R2899 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2899 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 64] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s0 -> s2 [0, 65535] { R2901 += 1, R2780 += 1, R2781 += 1 };
  s0 -> s0 [0, 65535] { R2900 += 1, R2901 += 1 };
  s0 -> s3 [65, 65] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s0 -> s4 [65, 65] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s0 -> s1 [66, 65535] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 64] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 65535] { R2901 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s1 -> s4 [65, 65] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [66, 65535] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [0, 64] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2901 += 1, R2780 += 1, R2781 += 1 };
  s2 -> s3 [65, 65] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s2 -> s4 [65, 65] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [66, 65535] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s3 -> s3 [0, 65535] { R2901 += 1, R2781 += 1, R678 += 1, R679 += 1 };
  s3 -> s6 [0, 65535] { R2901 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2901 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2901 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s1 [0, 64] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s0 -> s0 [0, 65535] { R2902 += 1, R2903 += 1 };
  s0 -> s2 [0, 65535] { R2903 += 1, R2782 += 1, R2783 += 1 };
  s0 -> s3 [65, 65] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s0 -> s4 [65, 65] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s0 -> s1 [66, 65535] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 64] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 65535] { R2903 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s1 -> s4 [65, 65] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [66, 65535] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [0, 64] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s2 -> s2 [0, 65535] { R2903 += 1, R2782 += 1, R2783 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s2 -> s4 [65, 65] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [66, 65535] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s3 -> s3 [0, 65535] { R2903 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2903 += 1 };
  s4 -> s4 [0, 65535] { R2903 += 1, R2783 += 1, R682 += 1, R683 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2903 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 64] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s0 -> s2 [0, 65535] { R2905 += 1, R2784 += 1, R2785 += 1 };
  s0 -> s0 [0, 65535] { R2904 += 1, R2905 += 1 };
  s0 -> s3 [65, 65] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s0 -> s4 [65, 65] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s0 -> s1 [66, 65535] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 64] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 65535] { R2905 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s1 -> s4 [65, 65] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [66, 65535] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [0, 64] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s2 -> s2 [0, 65535] { R2905 += 1, R2784 += 1, R2785 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s2 -> s4 [65, 65] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [66, 65535] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s3 -> s6 [0, 65535] { R2905 += 1 };
  s3 -> s3 [0, 65535] { R2905 += 1, R2785 += 1, R686 += 1, R687 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2905 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2905 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s1 [0, 64] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s0 -> s2 [0, 65535] { R2907 += 1, R2786 += 1, R2787 += 1 };
  s0 -> s0 [0, 65535] { R2906 += 1, R2907 += 1 };
  s0 -> s3 [65, 65] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s0 -> s4 [65, 65] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s0 -> s1 [66, 65535] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 64] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2907 += 1 };
  s1 -> s3 [65, 65] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s1 -> s4 [65, 65] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [66, 65535] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [0, 64] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s2 -> s2 [0, 65535] { R2907 += 1, R2786 += 1, R2787 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s2 -> s4 [65, 65] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [66, 65535] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2907 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2907 += 1 };
  s4 -> s4 [0, 65535] { R2907 += 1, R2787 += 1, R692 += 1, R693 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2907 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s0 -> s0 [0, 65535] { R2908 += 1, R2909 += 1 };
  s0 -> s2 [0, 65535] { R2909 += 1, R2788 += 1, R2789 += 1 };
  s0 -> s3 [65, 65] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s0 -> s4 [65, 65] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s0 -> s1 [66, 65535] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 64] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2909 += 1 };
  s1 -> s3 [65, 65] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s1 -> s4 [65, 65] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [66, 65535] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [0, 64] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2909 += 1, R2788 += 1, R2789 += 1 };
  s2 -> s3 [65, 65] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s2 -> s4 [65, 65] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [66, 65535] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2909 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2909 += 1 };
  s4 -> s4 [0, 65535] { R2909 += 1, R2789 += 1, R696 += 1, R697 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2909 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s0 -> s2 [0, 65535] { R2911 += 1, R2790 += 1, R2791 += 1 };
  s0 -> s0 [0, 65535] { R2910 += 1, R2911 += 1 };
  s0 -> s3 [65, 65] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s0 -> s4 [65, 65] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s0 -> s1 [66, 65535] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 64] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 65535] { R2911 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s1 -> s4 [65, 65] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [66, 65535] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [0, 64] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s2 -> s2 [0, 65535] { R2911 += 1, R2790 += 1, R2791 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s2 -> s4 [65, 65] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [66, 65535] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s3 -> s3 [0, 65535] { R2911 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2911 += 1, R2791 += 1, R702 += 1, R703 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2911 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2911 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R2913 += 1, R2793 += 1 };
  s0 -> s0 [0, 65535] { R2912 += 1, R2913 += 1 };
  s0 -> s2 [0, 65535] { R2913 += 1, R2792 += 1, R2793 += 1 };
  s0 -> s3 [65, 65] { R2913 += 1, R2793 += 1 };
  s0 -> s4 [65, 65] { R2913 += 1, R2793 += 1 };
  s0 -> s1 [66, 65535] { R2913 += 1, R2793 += 1 };
  s1 -> s1 [0, 64] { R2913 += 1, R2793 += 1 };
  s1 -> s1 [0, 65535] { R2913 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2913 += 1, R2793 += 1 };
  s1 -> s4 [65, 65] { R2913 += 1, R2793 += 1 };
  s1 -> s1 [66, 65535] { R2913 += 1, R2793 += 1 };
  s2 -> s1 [0, 64] { R2913 += 1, R2793 += 1 };
  s2 -> s2 [0, 65535] { R2913 += 1, R2792 += 1, R2793 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2913 += 1, R2793 += 1 };
  s2 -> s4 [65, 65] { R2913 += 1, R2793 += 1 };
  s2 -> s1 [66, 65535] { R2913 += 1, R2793 += 1 };
  s3 -> s3 [0, 65535] { R2913 += 1, R2793 += 1 };
  s3 -> s6 [0, 65535] { R2913 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2913 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2913 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s0 -> s2 [0, 64] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s0 -> s0 [0, 65535] { R2914 += 1, R2915 += 1 };
  s0 -> s3 [0, 65535] { R2915 += 1, R2794 += 1, R2795 += 1 };
  s0 -> s4 [65, 65] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s0 -> s5 [65, 65] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s0 -> s6 [65, 65] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s0 -> s7 [65, 65] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s0 -> s1 [66, 65535] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s0 -> s2 [66, 65535] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s1 -> s1 [0, 64] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s1 -> s2 [0, 64] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s1 -> s4 [65, 65] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s1 -> s5 [65, 65] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s1 -> s6 [65, 65] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s1 -> s7 [65, 65] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s1 -> s1 [66, 65535] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s1 -> s2 [66, 65535] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s2 -> s2 [0, 64] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R2915 += 1 };
  s2 -> s4 [65, 65] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s2 -> s7 [65, 65] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s2 -> s2 [66, 65535] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s3 -> s1 [0, 64] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s3 -> s2 [0, 64] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s3 -> s3 [0, 65535] { R2915 += 1, R2794 += 1, R2795 += 1 };
  s3 -> s4 [65, 65] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s3 -> s5 [65, 65] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s3 -> s6 [65, 65] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s3 -> s7 [65, 65] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s3 -> s1 [66, 65535] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s3 -> s2 [66, 65535] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s4 -> s4 [0, 65535] { R2915 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R2915 += 1, R2795 += 1, R1814 += 1, R1815 += 1 };
  s5 -> s7 [0, 65535] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2915 += 1, R2795 += 1, R1815 += 1, R1816 += 1 };
  s7 -> s9 [0, 65535] { R2915 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2915 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R2917 += 1, R2797 += 1 };
  s0 -> s2 [0, 65535] { R2917 += 1, R2796 += 1, R2797 += 1 };
  s0 -> s0 [0, 65535] { R2916 += 1, R2917 += 1 };
  s0 -> s3 [65, 65] { R2917 += 1, R2797 += 1 };
  s0 -> s4 [65, 65] { R2917 += 1, R2797 += 1 };
  s0 -> s1 [66, 65535] { R2917 += 1, R2797 += 1 };
  s1 -> s1 [0, 64] { R2917 += 1, R2797 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2917 += 1 };
  s1 -> s3 [65, 65] { R2917 += 1, R2797 += 1 };
  s1 -> s4 [65, 65] { R2917 += 1, R2797 += 1 };
  s1 -> s1 [66, 65535] { R2917 += 1, R2797 += 1 };
  s2 -> s1 [0, 64] { R2917 += 1, R2797 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2917 += 1, R2796 += 1, R2797 += 1 };
  s2 -> s3 [65, 65] { R2917 += 1, R2797 += 1 };
  s2 -> s4 [65, 65] { R2917 += 1, R2797 += 1 };
  s2 -> s1 [66, 65535] { R2917 += 1, R2797 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2917 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2917 += 1 };
  s4 -> s4 [0, 65535] { R2917 += 1, R2797 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2917 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s0 -> s2 [0, 64] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s0 -> s3 [0, 65535] { R2919 += 1, R2798 += 1, R2799 += 1 };
  s0 -> s0 [0, 65535] { R2918 += 1, R2919 += 1 };
  s0 -> s4 [65, 65] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s0 -> s5 [65, 65] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s0 -> s6 [65, 65] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s0 -> s7 [65, 65] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s0 -> s1 [66, 79] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s0 -> s2 [66, 65535] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s0 -> s8 [80, 80] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s0 -> s1 [81, 65535] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s1 -> s1 [0, 64] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s1 -> s6 [65, 65] { R2919 += 1, R2799 += 1 };
  s1 -> s7 [65, 65] { R2919 += 1, R2799 += 1 };
  s1 -> s1 [66, 79] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s1 -> s1 [66, 65535] { R2919 += 1, R2799 += 1 };
  s1 -> s8 [80, 80] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s1 -> s1 [81, 65535] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s2 -> s1 [0, 64] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s2 -> s2 [0, 64] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s2 -> s4 [65, 65] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s2 -> s5 [65, 65] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s2 -> s6 [65, 65] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s2 -> s7 [65, 65] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s2 -> s1 [66, 79] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s2 -> s2 [66, 65535] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s2 -> s8 [80, 80] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s2 -> s1 [81, 65535] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s3 -> s1 [0, 64] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s3 -> s2 [0, 64] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s3 -> s3 [0, 65535] { R2919 += 1, R2798 += 1, R2799 += 1 };
  s3 -> s4 [65, 65] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s3 -> s5 [65, 65] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s3 -> s6 [65, 65] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s3 -> s7 [65, 65] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s3 -> s1 [66, 79] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s3 -> s2 [66, 65535] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s3 -> s8 [80, 80] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s3 -> s1 [81, 65535] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s5 -> s6 [0, 79] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s5 -> s5 [0, 65535] { R2919 += 1, R2799 += 1, R2700 += 1, R2701 += 1 };
  s5 -> s12 [80, 80] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s5 -> s6 [81, 65535] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s6 -> s6 [0, 79] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s6 -> s6 [0, 65535] { R2919 += 1, R2799 += 1 };
  s6 -> s12 [80, 80] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s6 -> s6 [81, 65535] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s8 -> s8 [0, 64] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s8 -> s9 [0, 64] { R2919 += 1, R2799 += 1 };
  s8 -> s10 [65, 65] { R2919 += 1, R2799 += 1 };
  s8 -> s11 [65, 65] { R2919 += 1, R2799 += 1 };
  s8 -> s12 [65, 65] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s8 -> s13 [65, 65] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s8 -> s8 [66, 65535] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s8 -> s9 [66, 65535] { R2919 += 1, R2799 += 1 };
  s9 -> s9 [0, 64] { R2919 += 1, R2799 += 1 };
  s9 -> s15 [0, 65535];
  s9 -> s9 [0, 65535] { R2919 += 1 };
  s9 -> s10 [65, 65] { R2919 += 1, R2799 += 1 };
  s9 -> s11 [65, 65] { R2919 += 1, R2799 += 1 };
  s9 -> s9 [66, 65535] { R2919 += 1, R2799 += 1 };
  s10 -> s10 [0, 65535] { R2919 += 1 };
  s10 -> s15 [0, 65535];
  s11 -> s14 [0, 65535] { R2919 += 1 };
  s11 -> s11 [0, 65535] { R2919 += 1, R2799 += 1 };
  s11 -> s15 [0, 65535];
  s12 -> s11 [0, 65535] { R2919 += 1, R2799 += 1 };
  s12 -> s12 [0, 65535] { R2919 += 1, R2799 += 1, R2701 += 1, R2702 += 1 };
  s14 -> s14 [0, 65535] { R2919 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s9, s14, s15, s10, s11;
};
};
synchronised {  // Automata constraining P105
automaton P105_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P39
automaton P39_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R6 = R2739 && R7 = R2919 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R82 = 0 && R83 = R2739 && R84 = 0 && R85 = R2739 && R86 = 0 && R87 = R2739 && R88 = 0 && R89 = R2919 && R90 = 0 && R91 = R2919 && R92 = 0 && R93 = R2919 && R115 + R114 = 0 && R2706 = 0 && R2707 = R2739 && R2708 = 0 && R2709 = R2739 && R2710 = 0 && R2711 = R2739 && R2712 = 0 && R2713 = R2739 && R2714 = 0 && R2715 = R2739 && R2716 = 0 && R2717 = R2739 && R2718 = 0 && R2719 = R2739 && R2720 = 0 && R2721 = R2739 && R2722 = 0 && R2723 = R2739 && R2724 = 0 && R2725 = R2739 && R2726 = 0 && R2727 = R2739 && R2728 = 0 && R2729 = R2739 && R2730 = 0 && R2731 = R2739 && R2732 = 0 && R2733 = R2739 && R2734 = 0 && R2735 = R2739 && R2736 = 0 && R2737 = R2739 && R2738 = 0 && R2740 = 0 && R2741 = R2919 && R2742 = 0 && R2743 = R2919 && R2744 = 0 && R2745 = R2919 && R2746 = 0 && R2747 = R2919 && R2748 = 0 && R2749 = R2919 && R2750 = 0 && R2751 = R2919 && R2752 = 0 && R2753 = R2919 && R2754 = 0 && R2755 = R2919 && R2756 = 0 && R2757 = R2919 && R2758 = 0 && R2759 = R2919 && R2760 = 0 && R2761 = R2919 && R2762 = 0 && R2763 = R2919 && R2764 = 0 && R2765 = R2919 && R2766 = 0 && R2767 = R2919 && R2770 = 0 && R2771 = 0 && R2794 = 0 && R2795 = 0 && R2798 = 0 && R2799 = 0 && R2828 = 10 && R2829 = R2919 && R2830 = 10 && R2831 = R2919 && R2832 = 10 && R2833 = R2919 && R2834 = 10 && R2835 = R2919 && R2836 = 10 && R2837 = R2919 && R2838 = 10 && R2839 = R2919 && R2840 = 10 && R2841 = R2919 && R2842 = 10 && R2843 = R2919 && R2844 = 10 && R2845 = R2919 && R2846 = 10 && R2847 = R2919 && R2848 = 10 && R2849 = R2919 && R2850 = 10 && R2851 = R2919 && R2852 = 10 && R2853 = R2919 && R2854 = 10 && R2855 = R2919 && R2856 = 10 && R2857 = R2919 && R2858 = 10 && R2859 = R2919 && R2860 = 10 && R2861 = R2919 && R2862 = 10 && R2863 = R2919 && R2864 = 10 && R2865 = R2919 && R2866 = 10 && R2867 = R2919 && R2868 = 10 && R2869 = R2919 && R2870 = 10 && R2871 = R2919 && R2872 = 10 && R2873 = R2919 && R2874 = 10 && R2875 = R2919 && R2876 = 10 && R2877 = R2919 && R2878 = 10 && R2879 = R2919 && R2880 = 10 && R2881 = R2919 && R2882 = 10 && R2883 = R2919 && R2884 = 10 && R2885 = R2919 && R2886 = 10 && R2887 = R2919 && R2888 = 10 && R2889 = R2919 && R2890 = 10 && R2891 = R2919 && R2892 = 10 && R2893 = R2919 && R2894 = 10 && R2895 = R2919 && R2896 = 10 && R2897 = R2919 && R2898 = 10 && R2899 = R2919 && R2900 = 10 && R2901 = R2919 && R2902 = 10 && R2903 = R2919 && R2904 = 10 && R2905 = R2919 && R2906 = 10 && R2907 = R2919 && R2908 = 10 && R2909 = R2919 && R2910 = 10 && R2911 = R2919 && R2912 = 10 && R2913 = R2919 && R2914 = 10 && R2915 = R2919 && R2916 = 10 && R2917 = R2919 && R2918 = 10 && R57 + R56 != 0 && R59 + R58 != 0 && R141 + R138 + R159 + R156 != 0 && R701 + R698 + R2705 + R2702 != 0 && R21 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && R31 < 1 && R117 + R116 < 1 && R119 + R118 < 1 && -1*R667 + -1*R666 < 1 && R669 + R668 < 1 && R671 + R670 < 1 && 0 < R2739 && 9 < R2919 && (R667 + R666 != 0 || R677 + R674 = 0 || (R675 + R672 = 0 && R676 + R673 = 0)) && (R667 + R666 != 0 || R677 + R674 = 0 || (R680 + R678 = 0 && R681 + R679 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R684 + R682 = 0 && R685 + R683 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R689 + R686 = 0 && R690 + R687 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R694 + R692 = 0 && R695 + R693 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R699 + R696 = 0 && R700 + R697 = 0)) && (R675 + R672 != 0 || R667 + R666 + -1*R676 + -1*R673 = 0 || R667 + R666 < 1) && (R680 + R678 != 0 || R667 + R666 + -1*R681 + -1*R679 = 0 || R667 + R666 < 1) && (R684 + R682 != 0 || R667 + R666 + -1*R685 + -1*R683 = 0 || R667 + R666 < 1) && (R689 + R686 != 0 || R667 + R666 + -1*R690 + -1*R687 = 0 || R667 + R666 < 1) && (R694 + R692 != 0 || R667 + R666 + -1*R695 + -1*R693 = 0 || R667 + R666 < 1) && (R699 + R696 != 0 || R667 + R666 + -1*R700 + -1*R697 = 0 || R667 + R666 < 1) && (R44 = 0 || (R106 = 0 && R107 = 0)) && (R44 = 0 || (R108 = 0 && R109 = 0)) && (R45 = 0 || (R2768 = 0 && R2769 = 0)) && (R45 = 0 || (R2772 = 0 && R2773 = 0)) && (R45 = 0 || (R2774 = 0 && R2775 = 0)) && (R45 = 0 || (R2776 = 0 && R2777 = 0)) && (R45 = 0 || (R2778 = 0 && R2779 = 0)) && (R45 = 0 || (R2780 = 0 && R2781 = 0)) && (R45 = 0 || (R2782 = 0 && R2783 = 0)) && (R45 = 0 || (R2784 = 0 && R2785 = 0)) && (R45 = 0 || (R2786 = 0 && R2787 = 0)) && (R45 = 0 || (R2788 = 0 && R2789 = 0)) && (R45 = 0 || (R2790 = 0 && R2791 = 0)) && (R45 = 0 || (R2792 = 0 && R2793 = 0)) && (R45 = 0 || (R2796 = 0 && R2797 = 0)) && (R48 = 0 || (R2800 = 0 && R2801 = 0)) && (R48 = 0 || (R2802 = 0 && R2803 = 0)) && (R48 = 0 || (R2804 = 0 && R2805 = 0)) && (R48 = 0 || (R2806 = 0 && R2807 = 0)) && (R48 = 0 || (R2808 = 0 && R2809 = 0)) && (R48 = 0 || (R2810 = 0 && R2811 = 0)) && (R48 = 0 || (R2812 = 0 && R2813 = 0)) && (R48 = 0 || (R2814 = 0 && R2815 = 0)) && (R48 = 0 || (R2816 = 0 && R2817 = 0)) && (R48 = 0 || (R2818 = 0 && R2819 = 0)) && (R48 = 0 || (R2820 = 0 && R2821 = 0)) && (R48 = 0 || (R2822 = 0 && R2823 = 0)) && (R48 = 0 || (R2824 = 0 && R2825 = 0)) && (R48 = 0 || (R2826 = 0 && R2827 = 0)) && (R49 = 0 || (R110 = 0 && R111 = 0)) && (R49 = 0 || (R112 = 0 && R113 = 0)) && (R125 + R122 = 0 || (R123 + R120 = 0 && R124 + R121 = 0)) && (R131 + R128 = 0 || (R129 + R126 = 0 && R130 + R127 = 0)) && (R131 + R128 = 0 || (R134 + R132 = 0 && R135 + R133 = 0)) && (R131 + R128 = 0 || (R139 + R136 = 0 && R140 + R137 = 0)) && (R147 + R144 = 0 || (R145 + R142 = 0 && R146 + R143 = 0)) && (R153 + R150 = 0 || (R151 + R148 = 0 && R152 + R149 = 0)) && (R153 + R150 = 0 || (R157 + R154 = 0 && R158 + R155 = 0)) && (R675 + R672 = 0 || R667 + R666 < 1) && (R680 + R678 = 0 || R667 + R666 < 1) && (R684 + R682 = 0 || R667 + R666 < 1) && (R689 + R686 = 0 || R667 + R666 < 1) && (R694 + R692 = 0 || R667 + R666 < 1) && (R699 + R696 = 0 || R667 + R666 < 1) && (R707 + R704 = 0 || (R705 + R702 = 0 && R706 + R703 = 0)) && (R1819 + R1816 = 0 || (R1817 + R1814 = 0 && R1818 + R1815 = 0)) && (R1819 + R1816 = 0 || (R2703 + R2700 = 0 && R2704 + R2701 = 0));
// End of Parikh automata intersection problem
