// Parikh automata intersection problem, generated by OSTRICH+
counter int R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R21, R22, R25, R28, R2920, R2921, R2922, R2923, R2924, R2925, R31, R3146, R3147, R3148, R3149, R3150, R3151, R3152, R3153, R3154, R3155, R3156, R3157, R3158, R3159, R3160, R3161, R3162, R3163, R3164, R3165, R3166, R3167, R3168, R3169, R3170, R3171, R3172, R3173, R3174, R3175, R3176, R3177, R3178, R3179, R3180, R3181, R3182, R3183, R3184, R3185, R3186, R3187, R3188, R3189, R3190, R3191, R3192, R3193, R3194, R3195, R3196, R3197, R3198, R3199, R3200, R3201, R3202, R3203, R3204, R3205, R3206, R3207, R3208, R3209, R3210, R3211, R3212, R3213, R3214, R3215, R3216, R3217, R3218, R3219, R3220, R3221, R3222, R3223, R3224, R3225, R3226, R3227, R3228, R3229, R3230, R3231, R3232, R3233, R3234, R3235, R3236, R3237, R3238, R3239, R3240, R3241, R3242, R3243, R3244, R3245, R3246, R3247, R3248, R3249, R3250, R3251, R3252, R3253, R3254, R3255, R3256, R3257, R3258, R3259, R3260, R3261, R3262, R3263, R3264, R3265, R3266, R3267, R3268, R3269, R3270, R3271, R3272, R3273, R3274, R3275, R3276, R3277, R3278, R3279, R3280, R3281, R3282, R3283, R3284, R3285, R3286, R3287, R3288, R3289, R3290, R3291, R3292, R3293, R3294, R3295, R3296, R3297, R3298, R3299, R3300, R3301, R3302, R3303, R3304, R3305, R3306, R3307, R3308, R3309, R3310, R3311, R3312, R3313, R3314, R3315, R3316, R3317, R3318, R3319, R3320, R3321, R3322, R3323, R3324, R3325, R3326, R3327, R3328, R3329, R3330, R3331, R3332, R3333, R3334, R3335, R3336, R3337, R3338, R3339, R3340, R3341, R3342, R3343, R3344, R3345, R3346, R3347, R3348, R3349, R3350, R3351, R3352, R3353, R3354, R3355, R3356, R3357, R3358, R3359, R3360, R3361, R3362, R3363, R3364, R3365, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R56, R57, R58, R59, R6, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R705, R706, R707, R8, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P93
automaton P93_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R31 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R91 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [108, 108] { R91 += 1 };
  s0 -> s1 [109, 65535] { R91 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R91 += 1 };
  s2 -> s1 [0, 110] { R91 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R91 += 1 };
  s2 -> s1 [112, 65535] { R91 += 1 };
  s3 -> s1 [0, 98] { R91 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R91 += 1 };
  s3 -> s1 [100, 65535] { R91 += 1 };
  s4 -> s1 [0, 96] { R91 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R91 += 1 };
  s4 -> s1 [98, 65535] { R91 += 1 };
  s5 -> s1 [0, 107] { R91 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R91 += 1 };
  s5 -> s1 [109, 65535] { R91 += 1 };
  s6 -> s1 [0, 103] { R91 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R91 += 1 };
  s6 -> s1 [105, 65535] { R91 += 1 };
  s7 -> s1 [0, 110] { R91 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R91 += 1 };
  s7 -> s1 [112, 65535] { R91 += 1 };
  s8 -> s1 [0, 114] { R91 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R91 += 1 };
  s8 -> s1 [116, 65535] { R91 += 1 };
  s9 -> s1 [0, 115] { R91 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R91 += 1 };
  s9 -> s1 [117, 65535] { R91 += 1 };
  s10 -> s1 [0, 65535] { R91 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R111 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R113 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R113 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R113 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R113 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R3186 += 1, R3187 += 1 };
  s0 -> s1 [0, 65535] { R3187 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R3187 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R3188 += 1, R3189 += 1 };
  s0 -> s1 [0, 65535] { R3189 += 1, R115 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3189 += 1, R115 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 74] { R3191 += 1 };
  s0 -> s2 [0, 65535] { R3191 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R3190 += 1, R3191 += 1 };
  s0 -> s1 [76, 65535] { R3191 += 1 };
  s1 -> s1 [0, 74] { R3191 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [76, 65535] { R3191 += 1 };
  s2 -> s1 [0, 74] { R3191 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3191 += 1, R117 += 1 };
  s2 -> s1 [76, 65535] { R3191 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 76] { R3193 += 1 };
  s0 -> s0 [0, 65535] { R3192 += 1, R3193 += 1 };
  s0 -> s2 [0, 65535] { R3193 += 1, R119 += 1 };
  s0 -> s1 [78, 65535] { R3193 += 1 };
  s1 -> s1 [0, 76] { R3193 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R3193 += 1 };
  s2 -> s1 [0, 76] { R3193 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3193 += 1, R119 += 1 };
  s2 -> s1 [78, 65535] { R3193 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3195 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R3194 += 1, R3195 += 1 };
  s0 -> s2 [0, 65535] { R3195 += 1, R124 += 1, R125 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3195 += 1, R123 += 1, R124 += 1 };
  s1 -> s2 [0, 65535] { R3195 += 1, R124 += 1, R125 += 1 };
  s2 -> s3 [0, 65535] { R3195 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3195 += 1, R124 += 1, R125 += 1 };
  s3 -> s3 [0, 65535] { R3195 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3197 += 1 };
  s0 -> s0 [0, 65535] { R3196 += 1, R3197 += 1 };
  s1 -> s1 [0, 65535] { R3197 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R3198 += 1, R3199 += 1 };
  s0 -> s1 [0, 65535] { R3199 += 1, R130 += 1, R131 += 1 };
  s0 -> s2 [0, 65535] { R3199 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 65535] { R3199 += 1, R130 += 1, R131 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3199 += 1 };
  s2 -> s1 [0, 65535] { R3199 += 1, R130 += 1, R131 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3199 += 1, R129 += 1, R130 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3199 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R3201 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R3200 += 1, R3201 += 1 };
  s0 -> s2 [0, 65535] { R3201 += 1, R134 += 1, R135 += 1 };
  s0 -> s3 [108, 108] { R3201 += 1, R135 += 1 };
  s0 -> s1 [109, 65535] { R3201 += 1, R135 += 1 };
  s1 -> s13 [0, 65535] { R3201 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3201 += 1, R135 += 1 };
  s2 -> s1 [0, 107] { R3201 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3201 += 1, R134 += 1, R135 += 1 };
  s2 -> s3 [108, 108] { R3201 += 1, R135 += 1 };
  s2 -> s1 [109, 65535] { R3201 += 1, R135 += 1 };
  s3 -> s1 [0, 110] { R3201 += 1, R135 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3201 += 1 };
  s3 -> s5 [111, 111] { R3201 += 1, R135 += 1 };
  s3 -> s1 [112, 65535] { R3201 += 1, R135 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3201 += 1, R135 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3201 += 1 };
  s5 -> s6 [99, 99] { R3201 += 1, R135 += 1 };
  s5 -> s1 [100, 65535] { R3201 += 1, R135 += 1 };
  s6 -> s1 [0, 96] { R3201 += 1, R135 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3201 += 1 };
  s6 -> s7 [97, 97] { R3201 += 1, R135 += 1 };
  s6 -> s1 [98, 65535] { R3201 += 1, R135 += 1 };
  s7 -> s1 [0, 107] { R3201 += 1, R135 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3201 += 1 };
  s7 -> s8 [108, 108] { R3201 += 1, R135 += 1 };
  s7 -> s1 [109, 65535] { R3201 += 1, R135 += 1 };
  s8 -> s1 [0, 103] { R3201 += 1, R135 += 1 };
  s8 -> s8 [0, 65535] { R3201 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3201 += 1, R135 += 1 };
  s8 -> s1 [105, 65535] { R3201 += 1, R135 += 1 };
  s9 -> s1 [0, 110] { R3201 += 1, R135 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3201 += 1 };
  s9 -> s10 [111, 111] { R3201 += 1, R135 += 1 };
  s9 -> s1 [112, 65535] { R3201 += 1, R135 += 1 };
  s10 -> s1 [0, 114] { R3201 += 1, R135 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3201 += 1 };
  s10 -> s11 [115, 115] { R3201 += 1, R135 += 1 };
  s10 -> s1 [116, 65535] { R3201 += 1, R135 += 1 };
  s11 -> s1 [0, 115] { R3201 += 1, R135 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3201 += 1 };
  s11 -> s12 [116, 116] { R3201 += 1, R135 += 1 };
  s11 -> s1 [117, 65535] { R3201 += 1, R135 += 1 };
  s12 -> s1 [0, 65535] { R3201 += 1, R135 += 1 };
  s13 -> s13 [0, 65535] { R3201 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3202 += 1, R3203 += 1 };
  s0 -> s1 [0, 65535] { R3203 += 1, R139 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R3203 += 1, R140 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R3203 += 1, R139 += 1, R140 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3203 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [0, 65535] { R3203 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3203 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535] { R3203 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R3205 += 1, R146 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R3205 += 1, R145 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R3204 += 1, R3205 += 1 };
  s1 -> s1 [0, 65535] { R3205 += 1, R146 += 1, R147 += 1 };
  s1 -> s4 [0, 65535] { R3205 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3205 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3205 += 1, R145 += 1, R146 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3205 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R3207 += 1 };
  s0 -> s0 [0, 65535] { R3206 += 1, R3207 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3207 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3209 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R3208 += 1, R3209 += 1 };
  s0 -> s2 [0, 65535] { R3209 += 1, R151 += 1, R152 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3209 += 1 };
  s1 -> s1 [0, 65535] { R3209 += 1, R152 += 1, R153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3209 += 1, R152 += 1, R153 += 1 };
  s2 -> s2 [0, 65535] { R3209 += 1, R151 += 1, R152 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3209 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R3210 += 1, R3211 += 1 };
  s0 -> s1 [0, 65535] { R3211 += 1 };
  s1 -> s1 [0, 65535] { R3211 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 76] { R3213 += 1, R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R3213 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R3212 += 1, R3213 += 1 };
  s0 -> s3 [77, 77] { R3213 += 1, R158 += 1, R159 += 1 };
  s0 -> s4 [77, 77] { R3213 += 1, R158 += 1, R159 += 1 };
  s0 -> s1 [78, 65535] { R3213 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 76] { R3213 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R3213 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [77, 77] { R3213 += 1, R158 += 1, R159 += 1 };
  s1 -> s4 [77, 77] { R3213 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [78, 65535] { R3213 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [0, 76] { R3213 += 1, R158 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R3213 += 1, R157 += 1, R158 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R3213 += 1, R158 += 1, R159 += 1 };
  s2 -> s4 [77, 77] { R3213 += 1, R158 += 1, R159 += 1 };
  s2 -> s1 [78, 65535] { R3213 += 1, R158 += 1, R159 += 1 };
  s3 -> s3 [0, 65535] { R3213 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3213 += 1 };
  s4 -> s4 [0, 65535] { R3213 += 1, R158 += 1, R159 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3213 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R3246 += 1, R3247 += 1 };
  s0 -> s1 [0, 65535] { R3247 += 1, R48 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3247 += 1, R48 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3249 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R3248 += 1, R3249 += 1 };
  s0 -> s2 [65, 65] { R3249 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R3249 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R3249 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R3249 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3249 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R3249 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R3249 += 1, R114 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3249 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3251 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R3250 += 1, R3251 += 1 };
  s0 -> s2 [65, 65] { R3251 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R3251 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R3251 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R3251 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3251 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R3251 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R3251 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3251 += 1, R116 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3253 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R3252 += 1, R3253 += 1 };
  s0 -> s2 [65, 65] { R3253 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R3253 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R3253 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R3253 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3253 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R3253 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R3253 += 1, R118 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3253 += 1, R118 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3255 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R3254 += 1, R3255 += 1 };
  s0 -> s2 [65, 65] { R3255 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [65, 65] { R3255 += 1, R120 += 1, R121 += 1 };
  s0 -> s1 [66, 65535] { R3255 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 64] { R3255 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3255 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [65, 65] { R3255 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [66, 65535] { R3255 += 1, R120 += 1, R121 += 1 };
  s2 -> s2 [0, 65535] { R3255 += 1, R120 += 1, R121 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3257 += 1 };
  s0 -> s0 [0, 65535] { R3256 += 1, R3257 += 1 };
  s0 -> s2 [65, 65] { R3257 += 1 };
  s0 -> s3 [65, 65] { R3257 += 1 };
  s0 -> s1 [66, 65535] { R3257 += 1 };
  s1 -> s1 [0, 64] { R3257 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3257 += 1 };
  s1 -> s3 [65, 65] { R3257 += 1 };
  s1 -> s1 [66, 65535] { R3257 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3257 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3259 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R3258 += 1, R3259 += 1 };
  s0 -> s2 [65, 65] { R3259 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [65, 65] { R3259 += 1, R126 += 1, R127 += 1 };
  s0 -> s1 [66, 65535] { R3259 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 64] { R3259 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3259 += 1, R126 += 1, R127 += 1 };
  s1 -> s3 [65, 65] { R3259 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [66, 65535] { R3259 += 1, R126 += 1, R127 += 1 };
  s2 -> s2 [0, 65535] { R3259 += 1, R126 += 1, R127 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3261 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R3260 += 1, R3261 += 1 };
  s0 -> s2 [65, 65] { R3261 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [65, 65] { R3261 += 1, R132 += 1, R133 += 1 };
  s0 -> s1 [66, 65535] { R3261 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 64] { R3261 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3261 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [65, 65] { R3261 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [66, 65535] { R3261 += 1, R132 += 1, R133 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3261 += 1, R132 += 1, R133 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3263 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R3262 += 1, R3263 += 1 };
  s0 -> s2 [65, 65] { R3263 += 1, R136 += 1, R137 += 1 };
  s0 -> s3 [65, 65] { R3263 += 1, R136 += 1, R137 += 1 };
  s0 -> s1 [66, 65535] { R3263 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 64] { R3263 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3263 += 1, R136 += 1, R137 += 1 };
  s1 -> s3 [65, 65] { R3263 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [66, 65535] { R3263 += 1, R136 += 1, R137 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3263 += 1, R136 += 1, R137 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3265 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R3264 += 1, R3265 += 1 };
  s0 -> s2 [65, 65] { R3265 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R3265 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R3265 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R3265 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3265 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R3265 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R3265 += 1, R142 += 1, R143 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3265 += 1, R142 += 1, R143 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3267 += 1 };
  s0 -> s0 [0, 65535] { R3266 += 1, R3267 += 1 };
  s0 -> s2 [65, 65] { R3267 += 1 };
  s0 -> s3 [65, 65] { R3267 += 1 };
  s0 -> s1 [66, 65535] { R3267 += 1 };
  s1 -> s1 [0, 64] { R3267 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3267 += 1 };
  s1 -> s3 [65, 65] { R3267 += 1 };
  s1 -> s1 [66, 65535] { R3267 += 1 };
  s2 -> s2 [0, 65535] { R3267 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3269 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R3268 += 1, R3269 += 1 };
  s0 -> s2 [65, 65] { R3269 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [65, 65] { R3269 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [66, 65535] { R3269 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 64] { R3269 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3269 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [65, 65] { R3269 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [66, 65535] { R3269 += 1, R148 += 1, R149 += 1 };
  s2 -> s2 [0, 65535] { R3269 += 1, R148 += 1, R149 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3271 += 1 };
  s0 -> s0 [0, 65535] { R3270 += 1, R3271 += 1 };
  s0 -> s2 [65, 65] { R3271 += 1 };
  s0 -> s3 [65, 65] { R3271 += 1 };
  s0 -> s1 [66, 65535] { R3271 += 1 };
  s1 -> s1 [0, 64] { R3271 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3271 += 1 };
  s1 -> s3 [65, 65] { R3271 += 1 };
  s1 -> s1 [66, 65535] { R3271 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3271 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3273 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R3272 += 1, R3273 += 1 };
  s0 -> s2 [65, 65] { R3273 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [65, 65] { R3273 += 1, R154 += 1, R155 += 1 };
  s0 -> s1 [66, 65535] { R3273 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 64] { R3273 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3273 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [65, 65] { R3273 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [66, 65535] { R3273 += 1, R154 += 1, R155 += 1 };
  s2 -> s2 [0, 65535] { R3273 += 1, R154 += 1, R155 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 43] { R3275 += 1 };
  s0 -> s0 [0, 65535] { R3274 += 1, R3275 += 1 };
  s0 -> s1 [45, 45] { R3275 += 1 };
  s0 -> s2 [46, 46] { R3275 += 1 };
  s0 -> s1 [48, 62] { R3275 += 1 };
  s0 -> s3 [65, 65] { R3275 += 1 };
  s0 -> s1 [66, 65535] { R3275 += 1 };
  s1 -> s1 [0, 43] { R3275 += 1 };
  s1 -> s1 [45, 45] { R3275 += 1 };
  s1 -> s2 [46, 46] { R3275 += 1 };
  s1 -> s1 [48, 62] { R3275 += 1 };
  s1 -> s3 [65, 65] { R3275 += 1 };
  s1 -> s1 [66, 65535] { R3275 += 1 };
  s2 -> s1 [0, 43] { R3275 += 1 };
  s2 -> s1 [45, 45] { R3275 += 1 };
  s2 -> s2 [46, 46] { R3275 += 1 };
  s2 -> s1 [48, 62] { R3275 += 1 };
  s2 -> s3 [65, 65] { R3275 += 1 };
  s2 -> s1 [66, 114] { R3275 += 1 };
  s2 -> s8 [115, 115] { R3275 += 1 };
  s2 -> s1 [116, 65535] { R3275 += 1 };
  s3 -> s3 [0, 43] { R3275 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3275 += 1 };
  s3 -> s4 [46, 46] { R3275 += 1 };
  s3 -> s3 [48, 62] { R3275 += 1 };
  s3 -> s3 [65, 65535] { R3275 += 1 };
  s4 -> s3 [0, 43] { R3275 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3275 += 1 };
  s4 -> s4 [46, 46] { R3275 += 1 };
  s4 -> s3 [48, 62] { R3275 += 1 };
  s4 -> s3 [65, 114] { R3275 += 1 };
  s4 -> s5 [115, 115] { R3275 += 1 };
  s4 -> s3 [116, 65535] { R3275 += 1 };
  s5 -> s3 [0, 43] { R3275 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3275 += 1 };
  s5 -> s4 [46, 46] { R3275 += 1 };
  s5 -> s3 [48, 62] { R3275 += 1 };
  s5 -> s3 [65, 110] { R3275 += 1 };
  s5 -> s6 [111, 111] { R3275 += 1 };
  s5 -> s3 [112, 65535] { R3275 += 1 };
  s6 -> s3 [0, 43] { R3275 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3275 += 1 };
  s6 -> s4 [46, 46] { R3275 += 1 };
  s6 -> s3 [48, 62] { R3275 += 1 };
  s6 -> s3 [65, 98] { R3275 += 1 };
  s6 -> s7 [99, 99] { R3275 += 1 };
  s6 -> s3 [100, 65535] { R3275 += 1 };
  s7 -> s3 [0, 43] { R3275 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3275 += 1 };
  s7 -> s4 [46, 46] { R3275 += 1 };
  s7 -> s3 [48, 62] { R3275 += 1 };
  s7 -> s3 [65, 106] { R3275 += 1 };
  s7 -> s3 [108, 65535] { R3275 += 1 };
  s8 -> s1 [0, 43] { R3275 += 1 };
  s8 -> s1 [45, 45] { R3275 += 1 };
  s8 -> s2 [46, 46] { R3275 += 1 };
  s8 -> s1 [48, 62] { R3275 += 1 };
  s8 -> s3 [65, 65] { R3275 += 1 };
  s8 -> s1 [66, 110] { R3275 += 1 };
  s8 -> s9 [111, 111] { R3275 += 1 };
  s8 -> s1 [112, 65535] { R3275 += 1 };
  s9 -> s1 [0, 43] { R3275 += 1 };
  s9 -> s1 [45, 45] { R3275 += 1 };
  s9 -> s2 [46, 46] { R3275 += 1 };
  s9 -> s1 [48, 62] { R3275 += 1 };
  s9 -> s3 [65, 65] { R3275 += 1 };
  s9 -> s1 [66, 98] { R3275 += 1 };
  s9 -> s10 [99, 99] { R3275 += 1 };
  s9 -> s1 [100, 65535] { R3275 += 1 };
  s10 -> s1 [0, 43] { R3275 += 1 };
  s10 -> s1 [45, 45] { R3275 += 1 };
  s10 -> s2 [46, 46] { R3275 += 1 };
  s10 -> s1 [48, 62] { R3275 += 1 };
  s10 -> s3 [65, 65] { R3275 += 1 };
  s10 -> s1 [66, 106] { R3275 += 1 };
  s10 -> s1 [108, 65535] { R3275 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R3276 += 1, R3277 += 1 };
  s0 -> s1 [0, 65535] { R3277 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3277 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 57] { R3279 += 1 };
  s0 -> s2 [0, 65535] { R3279 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R3278 += 1, R3279 += 1 };
  s0 -> s3 [58, 58] { R3279 += 1 };
  s0 -> s1 [59, 65535] { R3279 += 1 };
  s1 -> s1 [0, 57] { R3279 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3279 += 1 };
  s1 -> s1 [59, 65535] { R3279 += 1 };
  s2 -> s1 [0, 57] { R3279 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3279 += 1, R21 += 1 };
  s2 -> s3 [58, 58] { R3279 += 1 };
  s2 -> s1 [59, 65535] { R3279 += 1 };
  s3 -> s3 [0, 65535] { R3279 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 42] { R3281 += 1 };
  s0 -> s2 [0, 65535] { R3281 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R3280 += 1, R3281 += 1 };
  s0 -> s3 [43, 43] { R3281 += 1 };
  s0 -> s1 [44, 65535] { R3281 += 1 };
  s1 -> s1 [0, 42] { R3281 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3281 += 1 };
  s1 -> s1 [44, 65535] { R3281 += 1 };
  s2 -> s1 [0, 42] { R3281 += 1 };
  s2 -> s2 [0, 65535] { R3281 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R3281 += 1 };
  s2 -> s1 [44, 65535] { R3281 += 1 };
  s3 -> s3 [0, 65535] { R3281 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R3283 += 1 };
  s0 -> s2 [0, 65535] { R3283 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R3282 += 1, R3283 += 1 };
  s0 -> s3 [65, 65] { R3283 += 1 };
  s0 -> s1 [66, 65535] { R3283 += 1 };
  s1 -> s1 [0, 64] { R3283 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3283 += 1 };
  s1 -> s1 [66, 65535] { R3283 += 1 };
  s2 -> s1 [0, 64] { R3283 += 1 };
  s2 -> s2 [0, 65535] { R3283 += 1, R25 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3283 += 1 };
  s2 -> s1 [66, 65535] { R3283 += 1 };
  s3 -> s3 [0, 65535] { R3283 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 90] { R3285 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R3285 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R3284 += 1, R3285 += 1 };
  s0 -> s3 [91, 91] { R3285 += 1, R51 += 1 };
  s0 -> s1 [92, 65535] { R3285 += 1, R51 += 1 };
  s1 -> s5 [0, 65535] { R3285 += 1 };
  s1 -> s1 [0, 65535] { R3285 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3285 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R3285 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3285 += 1, R51 += 1 };
  s2 -> s1 [92, 65535] { R3285 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R3285 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3285 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 65535] { R3287 += 1, R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R3287 += 1, R53 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3286 += 1, R3287 += 1 };
  s1 -> s1 [0, 65535] { R3287 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3287 += 1, R53 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3287 += 1, R53 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R3287 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3287 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R3288 += 1, R3289 += 1 };
  s0 -> s1 [0, 65535] { R3289 += 1, R83 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R3289 += 1, R82 += 1, R83 += 1 };
  s1 -> s4 [0, 65535] { R3289 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3289 += 1, R83 += 1, R42 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3289 += 1, R83 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R3289 += 1, R82 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3289 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 107] { R3291 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R3291 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3290 += 1, R3291 += 1 };
  s0 -> s3 [108, 108] { R3291 += 1, R85 += 1 };
  s0 -> s1 [109, 65535] { R3291 += 1, R85 += 1 };
  s1 -> s13 [0, 65535] { R3291 += 1 };
  s1 -> s1 [0, 65535] { R3291 += 1, R85 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R3291 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R3291 += 1, R84 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R3291 += 1, R85 += 1 };
  s2 -> s1 [109, 65535] { R3291 += 1, R85 += 1 };
  s3 -> s1 [0, 110] { R3291 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R3291 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R3291 += 1, R85 += 1 };
  s3 -> s1 [112, 65535] { R3291 += 1, R85 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3291 += 1, R85 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3291 += 1 };
  s5 -> s6 [99, 99] { R3291 += 1, R85 += 1 };
  s5 -> s1 [100, 65535] { R3291 += 1, R85 += 1 };
  s6 -> s1 [0, 96] { R3291 += 1, R85 += 1 };
  s6 -> s6 [0, 65535] { R3291 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3291 += 1, R85 += 1 };
  s6 -> s1 [98, 65535] { R3291 += 1, R85 += 1 };
  s7 -> s1 [0, 107] { R3291 += 1, R85 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3291 += 1 };
  s7 -> s8 [108, 108] { R3291 += 1, R85 += 1 };
  s7 -> s1 [109, 65535] { R3291 += 1, R85 += 1 };
  s8 -> s1 [0, 103] { R3291 += 1, R85 += 1 };
  s8 -> s8 [0, 65535] { R3291 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3291 += 1, R85 += 1 };
  s8 -> s1 [105, 65535] { R3291 += 1, R85 += 1 };
  s9 -> s1 [0, 110] { R3291 += 1, R85 += 1 };
  s9 -> s9 [0, 65535] { R3291 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3291 += 1, R85 += 1 };
  s9 -> s1 [112, 65535] { R3291 += 1, R85 += 1 };
  s10 -> s1 [0, 114] { R3291 += 1, R85 += 1 };
  s10 -> s10 [0, 65535] { R3291 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3291 += 1, R85 += 1 };
  s10 -> s1 [116, 65535] { R3291 += 1, R85 += 1 };
  s11 -> s1 [0, 115] { R3291 += 1, R85 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3291 += 1 };
  s11 -> s12 [116, 116] { R3291 += 1, R85 += 1 };
  s11 -> s1 [117, 65535] { R3291 += 1, R85 += 1 };
  s12 -> s1 [0, 65535] { R3291 += 1, R85 += 1 };
  s13 -> s13 [0, 65535] { R3291 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R3293 += 1, R87 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R3293 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R3292 += 1, R3293 += 1 };
  s1 -> s1 [0, 65535] { R3293 += 1, R87 += 1, R57 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3293 += 1 };
  s2 -> s1 [0, 65535] { R3293 += 1, R87 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R3293 += 1, R86 += 1, R87 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3293 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R3295 += 1, R106 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R3295 += 1, R107 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R3294 += 1, R3295 += 1 };
  s1 -> s1 [0, 65535] { R3295 += 1, R106 += 1, R107 += 1 };
  s1 -> s2 [0, 65535] { R3295 += 1, R107 += 1, R44 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3295 += 1, R107 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3295 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3295 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R3296 += 1, R3297 += 1 };
  s0 -> s1 [0, 65535] { R3297 += 1 };
  s1 -> s1 [0, 65535] { R3297 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 42] { R3299 += 1, R109 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R3299 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R3298 += 1, R3299 += 1 };
  s0 -> s3 [43, 43] { R3299 += 1, R109 += 1, R56 += 1 };
  s0 -> s4 [43, 43] { R3299 += 1, R109 += 1, R56 += 1 };
  s0 -> s1 [44, 65535] { R3299 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [0, 42] { R3299 += 1, R109 += 1, R56 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3299 += 1 };
  s1 -> s3 [43, 43] { R3299 += 1, R109 += 1, R56 += 1 };
  s1 -> s4 [43, 43] { R3299 += 1, R109 += 1, R56 += 1 };
  s1 -> s1 [44, 65535] { R3299 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [0, 42] { R3299 += 1, R109 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R3299 += 1, R108 += 1, R109 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R3299 += 1, R109 += 1, R56 += 1 };
  s2 -> s4 [43, 43] { R3299 += 1, R109 += 1, R56 += 1 };
  s2 -> s1 [44, 65535] { R3299 += 1, R109 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R3299 += 1, R109 += 1, R56 += 1 };
  s3 -> s6 [0, 65535] { R3299 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3299 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3299 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3301 += 1, R3153 += 1 };
  s0 -> s0 [0, 65535] { R3300 += 1, R3301 += 1 };
  s0 -> s2 [0, 65535] { R3301 += 1, R3152 += 1, R3153 += 1 };
  s0 -> s1 [66, 65535] { R3301 += 1, R3153 += 1 };
  s1 -> s1 [0, 64] { R3301 += 1, R3153 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3301 += 1 };
  s1 -> s1 [66, 65535] { R3301 += 1, R3153 += 1 };
  s2 -> s1 [0, 64] { R3301 += 1, R3153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3301 += 1, R3152 += 1, R3153 += 1 };
  s2 -> s1 [66, 65535] { R3301 += 1, R3153 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R3303 += 1, R3154 += 1, R3155 += 1 };
  s0 -> s0 [0, 65535] { R3302 += 1, R3303 += 1 };
  s0 -> s2 [0, 65535] { R3303 += 1, R3155 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R3303 += 1, R3154 += 1, R3155 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3303 += 1, R3155 += 1, R43 += 1 };
  s2 -> s3 [0, 65535] { R3303 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3303 += 1, R3155 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R3303 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R3305 += 1, R3157 += 1 };
  s0 -> s0 [0, 65535] { R3304 += 1, R3305 += 1 };
  s0 -> s2 [0, 65535] { R3305 += 1, R3156 += 1, R3157 += 1 };
  s0 -> s1 [80, 65535] { R3305 += 1, R3157 += 1 };
  s1 -> s1 [0, 65] { R3305 += 1, R3157 += 1 };
  s1 -> s1 [0, 65535] { R3305 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3305 += 1, R3157 += 1 };
  s2 -> s1 [0, 65] { R3305 += 1, R3157 += 1 };
  s2 -> s2 [0, 65535] { R3305 += 1, R3156 += 1, R3157 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R3305 += 1, R3157 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R3307 += 1, R3158 += 1, R3159 += 1 };
  s0 -> s0 [0, 65535] { R3306 += 1, R3307 += 1 };
  s0 -> s2 [0, 65535] { R3307 += 1, R3159 += 1, R667 += 1 };
  s1 -> s1 [0, 65535] { R3307 += 1, R3158 += 1, R3159 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3307 += 1, R3159 += 1, R667 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3307 += 1 };
  s2 -> s2 [0, 65535] { R3307 += 1, R3159 += 1, R667 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3307 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 81] { R3309 += 1, R3161 += 1 };
  s0 -> s2 [0, 65535] { R3309 += 1, R3161 += 1, R669 += 1 };
  s0 -> s3 [0, 65535] { R3309 += 1, R3160 += 1, R3161 += 1 };
  s0 -> s0 [0, 65535] { R3308 += 1, R3309 += 1 };
  s0 -> s1 [83, 65535] { R3309 += 1, R3161 += 1 };
  s1 -> s1 [0, 81] { R3309 += 1, R3161 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3309 += 1 };
  s1 -> s1 [83, 65535] { R3309 += 1, R3161 += 1 };
  s2 -> s1 [0, 81] { R3309 += 1, R3161 += 1 };
  s2 -> s2 [0, 65535] { R3309 += 1, R3161 += 1, R669 += 1 };
  s2 -> s5 [0, 65535] { R3309 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R3309 += 1, R3161 += 1 };
  s3 -> s1 [0, 81] { R3309 += 1, R3161 += 1 };
  s3 -> s2 [0, 65535] { R3309 += 1, R3161 += 1, R669 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3309 += 1, R3160 += 1, R3161 += 1 };
  s3 -> s1 [83, 65535] { R3309 += 1, R3161 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3309 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 79] { R3311 += 1, R3163 += 1 };
  s0 -> s2 [0, 65535] { R3311 += 1, R3163 += 1, R671 += 1 };
  s0 -> s3 [0, 65535] { R3311 += 1, R3162 += 1, R3163 += 1 };
  s0 -> s0 [0, 65535] { R3310 += 1, R3311 += 1 };
  s0 -> s1 [81, 65535] { R3311 += 1, R3163 += 1 };
  s1 -> s1 [0, 79] { R3311 += 1, R3163 += 1 };
  s1 -> s1 [0, 65535] { R3311 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R3311 += 1, R3163 += 1 };
  s2 -> s1 [0, 79] { R3311 += 1, R3163 += 1 };
  s2 -> s2 [0, 65535] { R3311 += 1, R3163 += 1, R671 += 1 };
  s2 -> s5 [0, 65535] { R3311 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R3311 += 1, R3163 += 1 };
  s3 -> s1 [0, 79] { R3311 += 1, R3163 += 1 };
  s3 -> s2 [0, 65535] { R3311 += 1, R3163 += 1, R671 += 1 };
  s3 -> s3 [0, 65535] { R3311 += 1, R3162 += 1, R3163 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R3311 += 1, R3163 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3311 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R3313 += 1, R3165 += 1, R675 += 1, R676 += 1 };
  s0 -> s0 [0, 65535] { R3312 += 1, R3313 += 1 };
  s0 -> s2 [0, 65535] { R3313 += 1, R3164 += 1, R3165 += 1 };
  s0 -> s3 [0, 65535] { R3313 += 1, R3165 += 1, R676 += 1, R677 += 1 };
  s1 -> s1 [0, 65535] { R3313 += 1, R3165 += 1, R675 += 1, R676 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3313 += 1 };
  s1 -> s3 [0, 65535] { R3313 += 1, R3165 += 1, R676 += 1, R677 += 1 };
  s2 -> s1 [0, 65535] { R3313 += 1, R3165 += 1, R675 += 1, R676 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3313 += 1, R3164 += 1, R3165 += 1 };
  s2 -> s3 [0, 65535] { R3313 += 1, R3165 += 1, R676 += 1, R677 += 1 };
  s3 -> s4 [0, 65535] { R3313 += 1, R3165 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3313 += 1 };
  s3 -> s3 [0, 65535] { R3313 += 1, R3165 += 1, R676 += 1, R677 += 1 };
  s4 -> s4 [0, 65535] { R3313 += 1, R3165 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3313 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3313 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 107] { R3315 += 1, R3167 += 1, R681 += 1 };
  s0 -> s0 [0, 65535] { R3314 += 1, R3315 += 1 };
  s0 -> s2 [0, 65535] { R3315 += 1, R3167 += 1, R680 += 1, R681 += 1 };
  s0 -> s3 [0, 65535] { R3315 += 1, R3166 += 1, R3167 += 1 };
  s0 -> s4 [108, 108] { R3315 += 1, R3167 += 1, R681 += 1 };
  s0 -> s1 [109, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3315 += 1 };
  s1 -> s15 [0, 65535] { R3315 += 1, R3167 += 1 };
  s1 -> s1 [0, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s2 -> s1 [0, 107] { R3315 += 1, R3167 += 1, R681 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3315 += 1 };
  s2 -> s2 [0, 65535] { R3315 += 1, R3167 += 1, R680 += 1, R681 += 1 };
  s2 -> s4 [108, 108] { R3315 += 1, R3167 += 1, R681 += 1 };
  s2 -> s1 [109, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s3 -> s1 [0, 107] { R3315 += 1, R3167 += 1, R681 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3315 += 1, R3167 += 1, R680 += 1, R681 += 1 };
  s3 -> s3 [0, 65535] { R3315 += 1, R3166 += 1, R3167 += 1 };
  s3 -> s4 [108, 108] { R3315 += 1, R3167 += 1, R681 += 1 };
  s3 -> s1 [109, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s4 -> s1 [0, 110] { R3315 += 1, R3167 += 1, R681 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3315 += 1 };
  s4 -> s4 [0, 65535] { R3315 += 1, R3167 += 1 };
  s4 -> s7 [111, 111] { R3315 += 1, R3167 += 1, R681 += 1 };
  s4 -> s1 [112, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3315 += 1 };
  s7 -> s1 [0, 98] { R3315 += 1, R3167 += 1, R681 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R3315 += 1, R3167 += 1 };
  s7 -> s6 [0, 65535] { R3315 += 1 };
  s7 -> s8 [99, 99] { R3315 += 1, R3167 += 1, R681 += 1 };
  s7 -> s1 [100, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s8 -> s1 [0, 96] { R3315 += 1, R3167 += 1, R681 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R3315 += 1 };
  s8 -> s8 [0, 65535] { R3315 += 1, R3167 += 1 };
  s8 -> s9 [97, 97] { R3315 += 1, R3167 += 1, R681 += 1 };
  s8 -> s1 [98, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s9 -> s1 [0, 107] { R3315 += 1, R3167 += 1, R681 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3315 += 1 };
  s9 -> s9 [0, 65535] { R3315 += 1, R3167 += 1 };
  s9 -> s10 [108, 108] { R3315 += 1, R3167 += 1, R681 += 1 };
  s9 -> s1 [109, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s10 -> s1 [0, 103] { R3315 += 1, R3167 += 1, R681 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R3315 += 1 };
  s10 -> s10 [0, 65535] { R3315 += 1, R3167 += 1 };
  s10 -> s11 [104, 104] { R3315 += 1, R3167 += 1, R681 += 1 };
  s10 -> s1 [105, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s11 -> s1 [0, 110] { R3315 += 1, R3167 += 1, R681 += 1 };
  s11 -> s11 [0, 65535] { R3315 += 1, R3167 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3315 += 1 };
  s11 -> s12 [111, 111] { R3315 += 1, R3167 += 1, R681 += 1 };
  s11 -> s1 [112, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s12 -> s1 [0, 114] { R3315 += 1, R3167 += 1, R681 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R3315 += 1 };
  s12 -> s12 [0, 65535] { R3315 += 1, R3167 += 1 };
  s12 -> s13 [115, 115] { R3315 += 1, R3167 += 1, R681 += 1 };
  s12 -> s1 [116, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s13 -> s1 [0, 115] { R3315 += 1, R3167 += 1, R681 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3315 += 1 };
  s13 -> s13 [0, 65535] { R3315 += 1, R3167 += 1 };
  s13 -> s14 [116, 116] { R3315 += 1, R3167 += 1, R681 += 1 };
  s13 -> s1 [117, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s14 -> s1 [0, 65535] { R3315 += 1, R3167 += 1, R681 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s6 [0, 65535] { R3315 += 1 };
  s15 -> s15 [0, 65535] { R3315 += 1, R3167 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 79] { R3317 += 1, R3169 += 1, R685 += 1 };
  s0 -> s2 [0, 65535] { R3317 += 1, R3169 += 1, R684 += 1, R685 += 1 };
  s0 -> s3 [0, 65535] { R3317 += 1, R3168 += 1, R3169 += 1 };
  s0 -> s0 [0, 65535] { R3316 += 1, R3317 += 1 };
  s0 -> s1 [81, 65535] { R3317 += 1, R3169 += 1, R685 += 1 };
  s1 -> s1 [0, 79] { R3317 += 1, R3169 += 1, R685 += 1 };
  s1 -> s5 [0, 65535] { R3317 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3317 += 1, R3169 += 1 };
  s1 -> s1 [81, 65535] { R3317 += 1, R3169 += 1, R685 += 1 };
  s2 -> s1 [0, 79] { R3317 += 1, R3169 += 1, R685 += 1 };
  s2 -> s2 [0, 65535] { R3317 += 1, R3169 += 1, R684 += 1, R685 += 1 };
  s2 -> s5 [0, 65535] { R3317 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R3317 += 1, R3169 += 1, R685 += 1 };
  s3 -> s1 [0, 79] { R3317 += 1, R3169 += 1, R685 += 1 };
  s3 -> s2 [0, 65535] { R3317 += 1, R3169 += 1, R684 += 1, R685 += 1 };
  s3 -> s3 [0, 65535] { R3317 += 1, R3168 += 1, R3169 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R3317 += 1, R3169 += 1, R685 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3317 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s0 [0, 65535] { R3318 += 1, R3319 += 1 };
  s0 -> s1 [0, 65535] { R3319 += 1, R3171 += 1, R690 += 1, R691 += 1 };
  s0 -> s2 [0, 65535] { R3319 += 1, R3170 += 1, R3171 += 1 };
  s0 -> s3 [0, 65535] { R3319 += 1, R3171 += 1, R689 += 1, R690 += 1 };
  s1 -> s1 [0, 65535] { R3319 += 1, R3171 += 1, R690 += 1, R691 += 1 };
  s1 -> s4 [0, 65535] { R3319 += 1 };
  s1 -> s6 [0, 65535] { R3319 += 1, R3171 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3319 += 1, R3171 += 1, R690 += 1, R691 += 1 };
  s2 -> s2 [0, 65535] { R3319 += 1, R3170 += 1, R3171 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3319 += 1, R3171 += 1, R689 += 1, R690 += 1 };
  s3 -> s1 [0, 65535] { R3319 += 1, R3171 += 1, R690 += 1, R691 += 1 };
  s3 -> s4 [0, 65535] { R3319 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3319 += 1, R3171 += 1, R689 += 1, R690 += 1 };
  s4 -> s4 [0, 65535] { R3319 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3319 += 1 };
  s6 -> s6 [0, 65535] { R3319 += 1, R3171 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s0 -> s2 [0, 65535] { R3321 += 1, R3173 += 1, R694 += 1, R695 += 1 };
  s0 -> s3 [0, 65535] { R3321 += 1, R3172 += 1, R3173 += 1 };
  s0 -> s0 [0, 65535] { R3320 += 1, R3321 += 1 };
  s0 -> s1 [91, 107] { R3321 += 1, R3173 += 1, R695 += 1 };
  s0 -> s4 [108, 108] { R3321 += 1, R3173 += 1, R695 += 1 };
  s0 -> s1 [109, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s1 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s1 -> s1 [0, 65535] { R3321 += 1, R3173 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3321 += 1 };
  s1 -> s1 [91, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s2 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s2 -> s2 [0, 65535] { R3321 += 1, R3173 += 1, R694 += 1, R695 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3321 += 1 };
  s2 -> s1 [91, 107] { R3321 += 1, R3173 += 1, R695 += 1 };
  s2 -> s4 [108, 108] { R3321 += 1, R3173 += 1, R695 += 1 };
  s2 -> s1 [109, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s3 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s3 -> s2 [0, 65535] { R3321 += 1, R3173 += 1, R694 += 1, R695 += 1 };
  s3 -> s3 [0, 65535] { R3321 += 1, R3172 += 1, R3173 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [91, 107] { R3321 += 1, R3173 += 1, R695 += 1 };
  s3 -> s4 [108, 108] { R3321 += 1, R3173 += 1, R695 += 1 };
  s3 -> s1 [109, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s4 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s4 -> s4 [0, 65535] { R3321 += 1, R3173 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3321 += 1 };
  s4 -> s1 [91, 110] { R3321 += 1, R3173 += 1, R695 += 1 };
  s4 -> s7 [111, 111] { R3321 += 1, R3173 += 1, R695 += 1 };
  s4 -> s1 [112, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3321 += 1 };
  s7 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R3321 += 1, R3173 += 1 };
  s7 -> s6 [0, 65535] { R3321 += 1 };
  s7 -> s1 [91, 98] { R3321 += 1, R3173 += 1, R695 += 1 };
  s7 -> s8 [99, 99] { R3321 += 1, R3173 += 1, R695 += 1 };
  s7 -> s1 [100, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s8 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R3321 += 1, R3173 += 1 };
  s8 -> s6 [0, 65535] { R3321 += 1 };
  s8 -> s1 [91, 96] { R3321 += 1, R3173 += 1, R695 += 1 };
  s8 -> s9 [97, 97] { R3321 += 1, R3173 += 1, R695 += 1 };
  s8 -> s1 [98, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s9 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R3321 += 1, R3173 += 1 };
  s9 -> s6 [0, 65535] { R3321 += 1 };
  s9 -> s1 [91, 107] { R3321 += 1, R3173 += 1, R695 += 1 };
  s9 -> s10 [108, 108] { R3321 += 1, R3173 += 1, R695 += 1 };
  s9 -> s1 [109, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s10 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R3321 += 1, R3173 += 1 };
  s10 -> s6 [0, 65535] { R3321 += 1 };
  s10 -> s1 [91, 103] { R3321 += 1, R3173 += 1, R695 += 1 };
  s10 -> s11 [104, 104] { R3321 += 1, R3173 += 1, R695 += 1 };
  s10 -> s1 [105, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s11 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s11 -> s11 [0, 65535] { R3321 += 1, R3173 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3321 += 1 };
  s11 -> s1 [91, 110] { R3321 += 1, R3173 += 1, R695 += 1 };
  s11 -> s12 [111, 111] { R3321 += 1, R3173 += 1, R695 += 1 };
  s11 -> s1 [112, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s12 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s12 -> s12 [0, 65535] { R3321 += 1, R3173 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R3321 += 1 };
  s12 -> s1 [91, 114] { R3321 += 1, R3173 += 1, R695 += 1 };
  s12 -> s13 [115, 115] { R3321 += 1, R3173 += 1, R695 += 1 };
  s12 -> s1 [116, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s13 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s13 -> s13 [0, 65535] { R3321 += 1, R3173 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3321 += 1 };
  s13 -> s1 [91, 115] { R3321 += 1, R3173 += 1, R695 += 1 };
  s13 -> s14 [116, 116] { R3321 += 1, R3173 += 1, R695 += 1 };
  s13 -> s1 [117, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  s14 -> s1 [0, 80] { R3321 += 1, R3173 += 1, R695 += 1 };
  s14 -> s1 [91, 65535] { R3321 += 1, R3173 += 1, R695 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R3323 += 1, R3175 += 1, R699 += 1, R700 += 1 };
  s0 -> s0 [0, 65535] { R3322 += 1, R3323 += 1 };
  s0 -> s2 [0, 65535] { R3323 += 1, R3175 += 1, R700 += 1, R701 += 1 };
  s0 -> s3 [0, 65535] { R3323 += 1, R3174 += 1, R3175 += 1 };
  s1 -> s1 [0, 65535] { R3323 += 1, R3175 += 1, R699 += 1, R700 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R3323 += 1 };
  s1 -> s2 [0, 65535] { R3323 += 1, R3175 += 1, R700 += 1, R701 += 1 };
  s2 -> s5 [0, 65535] { R3323 += 1, R3175 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R3323 += 1 };
  s2 -> s2 [0, 65535] { R3323 += 1, R3175 += 1, R700 += 1, R701 += 1 };
  s3 -> s1 [0, 65535] { R3323 += 1, R3175 += 1, R699 += 1, R700 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3323 += 1, R3175 += 1, R700 += 1, R701 += 1 };
  s3 -> s3 [0, 65535] { R3323 += 1, R3174 += 1, R3175 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3323 += 1, R3175 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R3323 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3323 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R3325 += 1, R3177 += 1, R706 += 1, R707 += 1 };
  s0 -> s2 [0, 65535] { R3325 += 1, R3176 += 1, R3177 += 1 };
  s0 -> s0 [0, 65535] { R3324 += 1, R3325 += 1 };
  s0 -> s3 [0, 65535] { R3325 += 1, R3177 += 1, R705 += 1, R706 += 1 };
  s1 -> s1 [0, 65535] { R3325 += 1, R3177 += 1, R706 += 1, R707 += 1 };
  s1 -> s6 [0, 65535] { R3325 += 1, R3177 += 1 };
  s1 -> s4 [0, 65535] { R3325 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3325 += 1, R3177 += 1, R706 += 1, R707 += 1 };
  s2 -> s2 [0, 65535] { R3325 += 1, R3176 += 1, R3177 += 1 };
  s2 -> s3 [0, 65535] { R3325 += 1, R3177 += 1, R705 += 1, R706 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R3325 += 1, R3177 += 1, R706 += 1, R707 += 1 };
  s3 -> s4 [0, 65535] { R3325 += 1 };
  s3 -> s3 [0, 65535] { R3325 += 1, R3177 += 1, R705 += 1, R706 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3325 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3325 += 1, R3177 += 1 };
  s6 -> s4 [0, 65535] { R3325 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 65535] { R3327 += 1, R3178 += 1, R3179 += 1 };
  s0 -> s0 [0, 65535] { R3326 += 1, R3327 += 1 };
  s0 -> s2 [0, 65535] { R3327 += 1, R3179 += 1 };
  s1 -> s1 [0, 65535] { R3327 += 1, R3178 += 1, R3179 += 1 };
  s1 -> s2 [0, 65535] { R3327 += 1, R3179 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3327 += 1 };
  s2 -> s2 [0, 65535] { R3327 += 1, R3179 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3327 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 65535] { R3329 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s2 [0, 65535] { R3329 += 1, R3181 += 1 };
  s0 -> s0 [0, 65535] { R3328 += 1, R3329 += 1 };
  s1 -> s1 [0, 65535] { R3329 += 1, R3180 += 1, R3181 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3329 += 1, R3181 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3329 += 1 };
  s2 -> s2 [0, 65535] { R3329 += 1, R3181 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3329 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s0 [0, 65535] { R3330 += 1, R3331 += 1 };
  s0 -> s1 [0, 65535] { R3331 += 1, R3183 += 1 };
  s0 -> s2 [0, 65535] { R3331 += 1, R3182 += 1, R3183 += 1 };
  s1 -> s1 [0, 65535] { R3331 += 1, R3183 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3331 += 1 };
  s2 -> s1 [0, 65535] { R3331 += 1, R3183 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3331 += 1, R3182 += 1, R3183 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3331 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 79] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s0 -> s2 [0, 65535] { R3333 += 1, R3184 += 1, R3185 += 1 };
  s0 -> s1 [0, 65535] { R3333 += 1, R3185 += 1 };
  s0 -> s0 [0, 65535] { R3332 += 1, R3333 += 1 };
  s0 -> s3 [80, 80] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s0 -> s4 [80, 80] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s0 -> s1 [81, 65535] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s1 -> s1 [0, 79] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s1 -> s1 [0, 65535] { R3333 += 1, R3185 += 1 };
  s1 -> s5 [0, 65535] { R3333 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [80, 80] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s1 -> s4 [80, 80] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s1 -> s1 [81, 65535] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s2 -> s1 [0, 79] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s2 -> s2 [0, 65535] { R3333 += 1, R3184 += 1, R3185 += 1 };
  s2 -> s1 [0, 65535] { R3333 += 1, R3185 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [80, 80] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s2 -> s4 [80, 80] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s2 -> s1 [81, 65535] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s3 -> s3 [0, 65535] { R3333 += 1, R3185 += 1 };
  s3 -> s5 [0, 65535] { R3333 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3333 += 1, R3185 += 1, R3150 += 1, R3151 += 1 };
  s4 -> s5 [0, 65535] { R3333 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R3333 += 1, R3185 += 1 };
  s5 -> s5 [0, 65535] { R3333 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R3333 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3333 += 1, R3185 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 65535] { R3335 += 1, R3214 += 1, R3215 += 1 };
  s0 -> s0 [0, 65535] { R3334 += 1, R3335 += 1 };
  s0 -> s2 [0, 65535] { R3335 += 1, R3215 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R3335 += 1, R3214 += 1, R3215 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3335 += 1, R3215 += 1, R45 += 1 };
  s2 -> s3 [0, 65535] { R3335 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3335 += 1, R3215 += 1, R45 += 1 };
  s3 -> s3 [0, 65535] { R3335 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R3337 += 1, R3217 += 1 };
  s0 -> s2 [0, 65535] { R3337 += 1, R3216 += 1, R3217 += 1 };
  s0 -> s0 [0, 65535] { R3336 += 1, R3337 += 1 };
  s0 -> s3 [65, 65] { R3337 += 1, R3217 += 1 };
  s0 -> s4 [65, 65] { R3337 += 1, R3217 += 1 };
  s0 -> s5 [80, 80] { R3337 += 1, R3217 += 1 };
  s0 -> s1 [81, 65535] { R3337 += 1, R3217 += 1 };
  s1 -> s1 [0, 64] { R3337 += 1, R3217 += 1 };
  s1 -> s3 [65, 65] { R3337 += 1, R3217 += 1 };
  s1 -> s4 [65, 65] { R3337 += 1, R3217 += 1 };
  s1 -> s5 [80, 80] { R3337 += 1, R3217 += 1 };
  s1 -> s1 [81, 65535] { R3337 += 1, R3217 += 1 };
  s2 -> s1 [0, 64] { R3337 += 1, R3217 += 1 };
  s2 -> s2 [0, 65535] { R3337 += 1, R3216 += 1, R3217 += 1 };
  s2 -> s3 [65, 65] { R3337 += 1, R3217 += 1 };
  s2 -> s4 [65, 65] { R3337 += 1, R3217 += 1 };
  s2 -> s5 [80, 80] { R3337 += 1, R3217 += 1 };
  s2 -> s1 [81, 65535] { R3337 += 1, R3217 += 1 };
  s4 -> s4 [0, 65] { R3337 += 1, R3217 += 1 };
  s4 -> s8 [80, 80] { R3337 += 1, R3217 += 1 };
  s4 -> s4 [81, 65535] { R3337 += 1, R3217 += 1 };
  s5 -> s5 [0, 64] { R3337 += 1, R3217 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3337 += 1 };
  s5 -> s7 [65, 65] { R3337 += 1, R3217 += 1 };
  s5 -> s8 [65, 65] { R3337 += 1, R3217 += 1 };
  s5 -> s5 [80, 65535] { R3337 += 1, R3217 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3337 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3337 += 1, R3217 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3337 += 1 };
  s8 -> s8 [80, 65535] { R3337 += 1, R3217 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R3339 += 1, R3219 += 1, R666 += 1 };
  s0 -> s0 [0, 65535] { R3338 += 1, R3339 += 1 };
  s0 -> s2 [0, 65535] { R3339 += 1, R3218 += 1, R3219 += 1 };
  s0 -> s3 [65, 65] { R3339 += 1, R3219 += 1, R666 += 1 };
  s0 -> s4 [65, 65] { R3339 += 1, R3219 += 1, R666 += 1 };
  s0 -> s1 [66, 65535] { R3339 += 1, R3219 += 1, R666 += 1 };
  s1 -> s1 [0, 64] { R3339 += 1, R3219 += 1, R666 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3339 += 1 };
  s1 -> s3 [65, 65] { R3339 += 1, R3219 += 1, R666 += 1 };
  s1 -> s4 [65, 65] { R3339 += 1, R3219 += 1, R666 += 1 };
  s1 -> s1 [66, 65535] { R3339 += 1, R3219 += 1, R666 += 1 };
  s2 -> s1 [0, 64] { R3339 += 1, R3219 += 1, R666 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3339 += 1, R3218 += 1, R3219 += 1 };
  s2 -> s3 [65, 65] { R3339 += 1, R3219 += 1, R666 += 1 };
  s2 -> s4 [65, 65] { R3339 += 1, R3219 += 1, R666 += 1 };
  s2 -> s1 [66, 65535] { R3339 += 1, R3219 += 1, R666 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3339 += 1, R3219 += 1, R666 += 1 };
  s3 -> s6 [0, 65535] { R3339 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3339 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3339 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R3341 += 1, R3221 += 1, R668 += 1 };
  s0 -> s2 [0, 65535] { R3341 += 1, R3220 += 1, R3221 += 1 };
  s0 -> s0 [0, 65535] { R3340 += 1, R3341 += 1 };
  s0 -> s3 [65, 65] { R3341 += 1, R3221 += 1, R668 += 1 };
  s0 -> s4 [65, 65] { R3341 += 1, R3221 += 1, R668 += 1 };
  s0 -> s1 [66, 65535] { R3341 += 1, R3221 += 1, R668 += 1 };
  s1 -> s1 [0, 64] { R3341 += 1, R3221 += 1, R668 += 1 };
  s1 -> s1 [0, 65535] { R3341 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3341 += 1, R3221 += 1, R668 += 1 };
  s1 -> s4 [65, 65] { R3341 += 1, R3221 += 1, R668 += 1 };
  s1 -> s1 [66, 65535] { R3341 += 1, R3221 += 1, R668 += 1 };
  s2 -> s1 [0, 64] { R3341 += 1, R3221 += 1, R668 += 1 };
  s2 -> s2 [0, 65535] { R3341 += 1, R3220 += 1, R3221 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3341 += 1, R3221 += 1, R668 += 1 };
  s2 -> s4 [65, 65] { R3341 += 1, R3221 += 1, R668 += 1 };
  s2 -> s1 [66, 65535] { R3341 += 1, R3221 += 1, R668 += 1 };
  s3 -> s6 [0, 65535] { R3341 += 1 };
  s3 -> s3 [0, 65535] { R3341 += 1, R3221 += 1, R668 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3341 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3341 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R3343 += 1, R3223 += 1, R670 += 1 };
  s0 -> s2 [0, 65535] { R3343 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s0 [0, 65535] { R3342 += 1, R3343 += 1 };
  s0 -> s3 [65, 65] { R3343 += 1, R3223 += 1, R670 += 1 };
  s0 -> s4 [65, 65] { R3343 += 1, R3223 += 1, R670 += 1 };
  s0 -> s1 [66, 65535] { R3343 += 1, R3223 += 1, R670 += 1 };
  s1 -> s1 [0, 64] { R3343 += 1, R3223 += 1, R670 += 1 };
  s1 -> s1 [0, 65535] { R3343 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3343 += 1, R3223 += 1, R670 += 1 };
  s1 -> s4 [65, 65] { R3343 += 1, R3223 += 1, R670 += 1 };
  s1 -> s1 [66, 65535] { R3343 += 1, R3223 += 1, R670 += 1 };
  s2 -> s1 [0, 64] { R3343 += 1, R3223 += 1, R670 += 1 };
  s2 -> s2 [0, 65535] { R3343 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3343 += 1, R3223 += 1, R670 += 1 };
  s2 -> s4 [65, 65] { R3343 += 1, R3223 += 1, R670 += 1 };
  s2 -> s1 [66, 65535] { R3343 += 1, R3223 += 1, R670 += 1 };
  s3 -> s6 [0, 65535] { R3343 += 1 };
  s3 -> s3 [0, 65535] { R3343 += 1, R3223 += 1, R670 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3343 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3343 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s0 -> s0 [0, 65535] { R3344 += 1, R3345 += 1 };
  s0 -> s2 [0, 65535] { R3345 += 1, R3224 += 1, R3225 += 1 };
  s0 -> s3 [65, 65] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s0 -> s4 [65, 65] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s0 -> s1 [66, 65535] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 64] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 65535] { R3345 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s1 -> s4 [65, 65] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [66, 65535] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [0, 64] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s2 -> s2 [0, 65535] { R3345 += 1, R3224 += 1, R3225 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s2 -> s4 [65, 65] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [66, 65535] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s3 -> s3 [0, 65535] { R3345 += 1, R3225 += 1, R672 += 1, R673 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3345 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3345 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3345 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 64] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s0 -> s2 [0, 65535] { R3347 += 1, R3226 += 1, R3227 += 1 };
  s0 -> s0 [0, 65535] { R3346 += 1, R3347 += 1 };
  s0 -> s3 [65, 65] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s0 -> s4 [65, 65] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s0 -> s1 [66, 65535] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 64] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3347 += 1 };
  s1 -> s3 [65, 65] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s1 -> s4 [65, 65] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [66, 65535] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [0, 64] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s2 -> s2 [0, 65535] { R3347 += 1, R3226 += 1, R3227 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s2 -> s4 [65, 65] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [66, 65535] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s3 -> s3 [0, 65535] { R3347 += 1, R3227 += 1, R678 += 1, R679 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3347 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3347 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3347 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s1 [0, 64] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s0 -> s0 [0, 65535] { R3348 += 1, R3349 += 1 };
  s0 -> s2 [0, 65535] { R3349 += 1, R3228 += 1, R3229 += 1 };
  s0 -> s3 [65, 65] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s0 -> s4 [65, 65] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s0 -> s1 [66, 65535] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [0, 64] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3349 += 1 };
  s1 -> s3 [65, 65] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s1 -> s4 [65, 65] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s1 -> s1 [66, 65535] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [0, 64] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s2 -> s2 [0, 65535] { R3349 += 1, R3228 += 1, R3229 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s2 -> s4 [65, 65] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s2 -> s1 [66, 65535] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s3 -> s3 [0, 65535] { R3349 += 1, R3229 += 1, R682 += 1, R683 += 1 };
  s3 -> s6 [0, 65535] { R3349 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3349 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3349 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 64] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s0 -> s0 [0, 65535] { R3350 += 1, R3351 += 1 };
  s0 -> s2 [0, 65535] { R3351 += 1, R3230 += 1, R3231 += 1 };
  s0 -> s3 [65, 65] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s0 -> s4 [65, 65] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s0 -> s1 [66, 65535] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [0, 64] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3351 += 1 };
  s1 -> s3 [65, 65] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s1 -> s4 [65, 65] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s1 -> s1 [66, 65535] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [0, 64] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3351 += 1, R3230 += 1, R3231 += 1 };
  s2 -> s3 [65, 65] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s2 -> s4 [65, 65] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s2 -> s1 [66, 65535] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s3 -> s6 [0, 65535] { R3351 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3351 += 1, R3231 += 1, R686 += 1, R687 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3351 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3351 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s1 [0, 64] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s0 -> s0 [0, 65535] { R3352 += 1, R3353 += 1 };
  s0 -> s2 [0, 65535] { R3353 += 1, R3232 += 1, R3233 += 1 };
  s0 -> s3 [65, 65] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s0 -> s4 [65, 65] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s0 -> s1 [66, 65535] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 64] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3353 += 1 };
  s1 -> s3 [65, 65] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s1 -> s4 [65, 65] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [66, 65535] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [0, 64] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3353 += 1, R3232 += 1, R3233 += 1 };
  s2 -> s3 [65, 65] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s2 -> s4 [65, 65] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [66, 65535] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3353 += 1, R3233 += 1, R692 += 1, R693 += 1 };
  s3 -> s6 [0, 65535] { R3353 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3353 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3353 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s0 -> s2 [0, 65535] { R3355 += 1, R3234 += 1, R3235 += 1 };
  s0 -> s0 [0, 65535] { R3354 += 1, R3355 += 1 };
  s0 -> s3 [65, 65] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s0 -> s4 [65, 65] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s0 -> s1 [66, 65535] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 64] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [0, 65535] { R3355 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s1 -> s4 [65, 65] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s1 -> s1 [66, 65535] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [0, 64] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3355 += 1, R3234 += 1, R3235 += 1 };
  s2 -> s3 [65, 65] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s2 -> s4 [65, 65] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s2 -> s1 [66, 65535] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s3 -> s3 [0, 65535] { R3355 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3355 += 1, R3235 += 1, R696 += 1, R697 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3355 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3355 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s0 -> s2 [0, 65535] { R3357 += 1, R3236 += 1, R3237 += 1 };
  s0 -> s0 [0, 65535] { R3356 += 1, R3357 += 1 };
  s0 -> s3 [65, 65] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s0 -> s4 [65, 65] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s0 -> s1 [66, 65535] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 64] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 65535] { R3357 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s1 -> s4 [65, 65] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [66, 65535] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [0, 64] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3357 += 1, R3236 += 1, R3237 += 1 };
  s2 -> s3 [65, 65] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s2 -> s4 [65, 65] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [66, 65535] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s3 -> s6 [0, 65535] { R3357 += 1 };
  s3 -> s3 [0, 65535] { R3357 += 1, R3237 += 1, R702 += 1, R703 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3357 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3357 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R3359 += 1, R3239 += 1 };
  s0 -> s0 [0, 65535] { R3358 += 1, R3359 += 1 };
  s0 -> s2 [0, 65535] { R3359 += 1, R3238 += 1, R3239 += 1 };
  s0 -> s3 [65, 65] { R3359 += 1, R3239 += 1 };
  s0 -> s4 [65, 65] { R3359 += 1, R3239 += 1 };
  s0 -> s1 [66, 65535] { R3359 += 1, R3239 += 1 };
  s1 -> s1 [0, 64] { R3359 += 1, R3239 += 1 };
  s1 -> s1 [0, 65535] { R3359 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3359 += 1, R3239 += 1 };
  s1 -> s4 [65, 65] { R3359 += 1, R3239 += 1 };
  s1 -> s1 [66, 65535] { R3359 += 1, R3239 += 1 };
  s2 -> s1 [0, 64] { R3359 += 1, R3239 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3359 += 1, R3238 += 1, R3239 += 1 };
  s2 -> s3 [65, 65] { R3359 += 1, R3239 += 1 };
  s2 -> s4 [65, 65] { R3359 += 1, R3239 += 1 };
  s2 -> s1 [66, 65535] { R3359 += 1, R3239 += 1 };
  s3 -> s3 [0, 65535] { R3359 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3359 += 1, R3239 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3359 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3359 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s2 [0, 64] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s0 -> s0 [0, 65535] { R3360 += 1, R3361 += 1 };
  s0 -> s3 [0, 65535] { R3361 += 1, R3240 += 1, R3241 += 1 };
  s0 -> s4 [65, 65] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s0 -> s5 [65, 65] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s6 [65, 65] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s7 [65, 65] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s0 -> s1 [66, 65535] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s2 [66, 65535] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s1 -> s11 [0, 64] { R3361 += 1, R3241 += 1 };
  s1 -> s1 [0, 64] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s8 [65, 65] { R3361 += 1, R3241 += 1 };
  s1 -> s5 [65, 65] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s6 [65, 65] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s12 [65, 65] { R3361 += 1, R3241 += 1 };
  s1 -> s11 [66, 65535] { R3361 += 1, R3241 += 1 };
  s1 -> s1 [66, 65535] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s1 [0, 64] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s2 [0, 64] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s2 -> s4 [65, 65] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s2 -> s5 [65, 65] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s6 [65, 65] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s7 [65, 65] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s2 -> s1 [66, 65535] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s2 [66, 65535] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s3 -> s1 [0, 64] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s3 -> s2 [0, 64] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s3 -> s3 [0, 65535] { R3361 += 1, R3240 += 1, R3241 += 1 };
  s3 -> s4 [65, 65] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s3 -> s5 [65, 65] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s3 -> s6 [65, 65] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s3 -> s7 [65, 65] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s3 -> s1 [66, 65535] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s3 -> s2 [66, 65535] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s6 -> s8 [0, 65535] { R3361 += 1, R3241 += 1 };
  s6 -> s6 [0, 65535] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s7 -> s6 [0, 65535] { R3361 += 1, R3241 += 1, R2921 += 1, R2922 += 1 };
  s7 -> s7 [0, 65535] { R3361 += 1, R3241 += 1, R2920 += 1, R2921 += 1 };
  s8 -> s8 [0, 65535] { R3361 += 1, R3241 += 1 };
  s8 -> s9 [0, 65535] { R3361 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R3361 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R3361 += 1, R3241 += 1 };
  s11 -> s11 [0, 65535] { R3361 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R3361 += 1, R3241 += 1 };
  s11 -> s12 [65, 65] { R3361 += 1, R3241 += 1 };
  s11 -> s11 [66, 65535] { R3361 += 1, R3241 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R3361 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R3363 += 1, R3243 += 1 };
  s0 -> s0 [0, 65535] { R3362 += 1, R3363 += 1 };
  s0 -> s2 [0, 65535] { R3363 += 1, R3242 += 1, R3243 += 1 };
  s0 -> s3 [65, 65] { R3363 += 1, R3243 += 1 };
  s0 -> s4 [65, 65] { R3363 += 1, R3243 += 1 };
  s0 -> s1 [66, 65535] { R3363 += 1, R3243 += 1 };
  s1 -> s1 [0, 64] { R3363 += 1, R3243 += 1 };
  s1 -> s1 [0, 65535] { R3363 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3363 += 1, R3243 += 1 };
  s1 -> s4 [65, 65] { R3363 += 1, R3243 += 1 };
  s1 -> s1 [66, 65535] { R3363 += 1, R3243 += 1 };
  s2 -> s1 [0, 64] { R3363 += 1, R3243 += 1 };
  s2 -> s2 [0, 65535] { R3363 += 1, R3242 += 1, R3243 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3363 += 1, R3243 += 1 };
  s2 -> s4 [65, 65] { R3363 += 1, R3243 += 1 };
  s2 -> s1 [66, 65535] { R3363 += 1, R3243 += 1 };
  s3 -> s3 [0, 65535] { R3363 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3363 += 1, R3243 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3363 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3363 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s0 -> s2 [0, 64] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s0 -> s3 [0, 65535] { R3365 += 1, R3244 += 1, R3245 += 1 };
  s0 -> s0 [0, 65535] { R3364 += 1, R3365 += 1 };
  s0 -> s4 [65, 65] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s0 -> s5 [65, 65] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s0 -> s6 [65, 65] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s0 -> s7 [65, 65] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s0 -> s2 [66, 79] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s0 -> s1 [66, 65535] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s0 -> s2 [81, 65535] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s1 -> s1 [0, 64] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s1 -> s2 [0, 64] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s1 -> s4 [65, 65] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s1 -> s5 [65, 65] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s1 -> s6 [65, 65] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s1 -> s7 [65, 65] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s1 -> s2 [66, 79] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s1 -> s1 [66, 65535] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s1 -> s2 [81, 65535] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s2 -> s2 [0, 64] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3365 += 1 };
  s2 -> s4 [65, 65] { R3365 += 1, R3245 += 1 };
  s2 -> s7 [65, 65] { R3365 += 1, R3245 += 1 };
  s2 -> s2 [66, 79] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s2 -> s2 [66, 65535] { R3365 += 1, R3245 += 1 };
  s2 -> s2 [81, 65535] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s3 -> s1 [0, 64] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s3 -> s2 [0, 64] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s3 -> s3 [0, 65535] { R3365 += 1, R3244 += 1, R3245 += 1 };
  s3 -> s4 [65, 65] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s3 -> s5 [65, 65] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s3 -> s6 [65, 65] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s3 -> s7 [65, 65] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s3 -> s2 [66, 79] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s3 -> s1 [66, 65535] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s3 -> s2 [81, 65535] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s4 -> s4 [0, 79] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s4 -> s4 [0, 65535] { R3365 += 1, R3245 += 1 };
  s4 -> s9 [0, 65535] { R3365 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s5 -> s4 [0, 79] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s5 -> s5 [0, 65535] { R3365 += 1, R3245 += 1, R3146 += 1, R3147 += 1 };
  s5 -> s4 [81, 65535] { R3365 += 1, R3245 += 1, R3147 += 1, R3148 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3365 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3365 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
};
synchronised {  // Automata constraining P105
automaton P105_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P39
automaton P39_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R6 = R3185 && R7 = R3365 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R82 = 0 && R83 = R3185 && R84 = 0 && R85 = R3185 && R86 = 0 && R87 = R3185 && R88 = 0 && R89 = R3365 && R90 = 0 && R91 = R3365 && R92 = 0 && R93 = R3365 && R115 + R114 = 0 && R3152 = 0 && R3153 = R3185 && R3154 = 0 && R3155 = R3185 && R3156 = 0 && R3157 = R3185 && R3158 = 0 && R3159 = R3185 && R3160 = 0 && R3161 = R3185 && R3162 = 0 && R3163 = R3185 && R3164 = 0 && R3165 = R3185 && R3166 = 0 && R3167 = R3185 && R3168 = 0 && R3169 = R3185 && R3170 = 0 && R3171 = R3185 && R3172 = 0 && R3173 = R3185 && R3174 = 0 && R3175 = R3185 && R3176 = 0 && R3177 = R3185 && R3178 = 0 && R3179 = R3185 && R3180 = 0 && R3181 = R3185 && R3182 = 0 && R3183 = R3185 && R3184 = 0 && R3186 = 0 && R3187 = R3365 && R3188 = 0 && R3189 = R3365 && R3190 = 0 && R3191 = R3365 && R3192 = 0 && R3193 = R3365 && R3194 = 0 && R3195 = R3365 && R3196 = 0 && R3197 = R3365 && R3198 = 0 && R3199 = R3365 && R3200 = 0 && R3201 = R3365 && R3202 = 0 && R3203 = R3365 && R3204 = 0 && R3205 = R3365 && R3206 = 0 && R3207 = R3365 && R3208 = 0 && R3209 = R3365 && R3210 = 0 && R3211 = R3365 && R3212 = 0 && R3213 = R3365 && R3216 = 0 && R3217 = 0 && R3240 = 0 && R3241 = 0 && R3244 = 0 && R3245 = 0 && R3274 = 10 && R3275 = R3365 && R3276 = 10 && R3277 = R3365 && R3278 = 10 && R3279 = R3365 && R3280 = 10 && R3281 = R3365 && R3282 = 10 && R3283 = R3365 && R3284 = 10 && R3285 = R3365 && R3286 = 10 && R3287 = R3365 && R3288 = 10 && R3289 = R3365 && R3290 = 10 && R3291 = R3365 && R3292 = 10 && R3293 = R3365 && R3294 = 10 && R3295 = R3365 && R3296 = 10 && R3297 = R3365 && R3298 = 10 && R3299 = R3365 && R3300 = 10 && R3301 = R3365 && R3302 = 10 && R3303 = R3365 && R3304 = 10 && R3305 = R3365 && R3306 = 10 && R3307 = R3365 && R3308 = 10 && R3309 = R3365 && R3310 = 10 && R3311 = R3365 && R3312 = 10 && R3313 = R3365 && R3314 = 10 && R3315 = R3365 && R3316 = 10 && R3317 = R3365 && R3318 = 10 && R3319 = R3365 && R3320 = 10 && R3321 = R3365 && R3322 = 10 && R3323 = R3365 && R3324 = 10 && R3325 = R3365 && R3326 = 10 && R3327 = R3365 && R3328 = 10 && R3329 = R3365 && R3330 = 10 && R3331 = R3365 && R3332 = 10 && R3333 = R3365 && R3334 = 10 && R3335 = R3365 && R3336 = 10 && R3337 = R3365 && R3338 = 10 && R3339 = R3365 && R3340 = 10 && R3341 = R3365 && R3342 = 10 && R3343 = R3365 && R3344 = 10 && R3345 = R3365 && R3346 = 10 && R3347 = R3365 && R3348 = 10 && R3349 = R3365 && R3350 = 10 && R3351 = R3365 && R3352 = 10 && R3353 = R3365 && R3354 = 10 && R3355 = R3365 && R3356 = 10 && R3357 = R3365 && R3358 = 10 && R3359 = R3365 && R3360 = 10 && R3361 = R3365 && R3362 = 10 && R3363 = R3365 && R3364 = 10 && R57 + R56 != 0 && R59 + R58 != 0 && R141 + R138 + R159 + R156 != 0 && R701 + R698 + R3151 + R3148 != 0 && R21 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && R31 < 1 && R117 + R116 < 1 && R119 + R118 < 1 && -1*R667 + -1*R666 < 1 && R669 + R668 < 1 && R671 + R670 < 1 && 0 < R3185 && 9 < R3365 && (R667 + R666 != 0 || R677 + R674 = 0 || (R675 + R672 = 0 && R676 + R673 = 0)) && (R667 + R666 != 0 || R677 + R674 = 0 || (R680 + R678 = 0 && R681 + R679 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R684 + R682 = 0 && R685 + R683 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R689 + R686 = 0 && R690 + R687 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R694 + R692 = 0 && R695 + R693 = 0)) && (R667 + R666 != 0 || R691 + R688 = 0 || (R699 + R696 = 0 && R700 + R697 = 0)) && (R675 + R672 != 0 || R667 + R666 + -1*R676 + -1*R673 = 0 || R667 + R666 < 1) && (R680 + R678 != 0 || R667 + R666 + -1*R681 + -1*R679 = 0 || R667 + R666 < 1) && (R684 + R682 != 0 || R667 + R666 + -1*R685 + -1*R683 = 0 || R667 + R666 < 1) && (R689 + R686 != 0 || R667 + R666 + -1*R690 + -1*R687 = 0 || R667 + R666 < 1) && (R694 + R692 != 0 || R667 + R666 + -1*R695 + -1*R693 = 0 || R667 + R666 < 1) && (R699 + R696 != 0 || R667 + R666 + -1*R700 + -1*R697 = 0 || R667 + R666 < 1) && (R44 = 0 || (R106 = 0 && R107 = 0)) && (R44 = 0 || (R108 = 0 && R109 = 0)) && (R45 = 0 || (R3214 = 0 && R3215 = 0)) && (R45 = 0 || (R3218 = 0 && R3219 = 0)) && (R45 = 0 || (R3220 = 0 && R3221 = 0)) && (R45 = 0 || (R3222 = 0 && R3223 = 0)) && (R45 = 0 || (R3224 = 0 && R3225 = 0)) && (R45 = 0 || (R3226 = 0 && R3227 = 0)) && (R45 = 0 || (R3228 = 0 && R3229 = 0)) && (R45 = 0 || (R3230 = 0 && R3231 = 0)) && (R45 = 0 || (R3232 = 0 && R3233 = 0)) && (R45 = 0 || (R3234 = 0 && R3235 = 0)) && (R45 = 0 || (R3236 = 0 && R3237 = 0)) && (R45 = 0 || (R3238 = 0 && R3239 = 0)) && (R45 = 0 || (R3242 = 0 && R3243 = 0)) && (R48 = 0 || (R3246 = 0 && R3247 = 0)) && (R48 = 0 || (R3248 = 0 && R3249 = 0)) && (R48 = 0 || (R3250 = 0 && R3251 = 0)) && (R48 = 0 || (R3252 = 0 && R3253 = 0)) && (R48 = 0 || (R3254 = 0 && R3255 = 0)) && (R48 = 0 || (R3256 = 0 && R3257 = 0)) && (R48 = 0 || (R3258 = 0 && R3259 = 0)) && (R48 = 0 || (R3260 = 0 && R3261 = 0)) && (R48 = 0 || (R3262 = 0 && R3263 = 0)) && (R48 = 0 || (R3264 = 0 && R3265 = 0)) && (R48 = 0 || (R3266 = 0 && R3267 = 0)) && (R48 = 0 || (R3268 = 0 && R3269 = 0)) && (R48 = 0 || (R3270 = 0 && R3271 = 0)) && (R48 = 0 || (R3272 = 0 && R3273 = 0)) && (R49 = 0 || (R110 = 0 && R111 = 0)) && (R49 = 0 || (R112 = 0 && R113 = 0)) && (R125 + R122 = 0 || (R123 + R120 = 0 && R124 + R121 = 0)) && (R131 + R128 = 0 || (R129 + R126 = 0 && R130 + R127 = 0)) && (R131 + R128 = 0 || (R134 + R132 = 0 && R135 + R133 = 0)) && (R131 + R128 = 0 || (R139 + R136 = 0 && R140 + R137 = 0)) && (R147 + R144 = 0 || (R145 + R142 = 0 && R146 + R143 = 0)) && (R153 + R150 = 0 || (R151 + R148 = 0 && R152 + R149 = 0)) && (R153 + R150 = 0 || (R157 + R154 = 0 && R158 + R155 = 0)) && (R675 + R672 = 0 || R667 + R666 < 1) && (R680 + R678 = 0 || R667 + R666 < 1) && (R684 + R682 = 0 || R667 + R666 < 1) && (R689 + R686 = 0 || R667 + R666 < 1) && (R694 + R692 = 0 || R667 + R666 < 1) && (R699 + R696 = 0 || R667 + R666 < 1) && (R707 + R704 = 0 || (R705 + R702 = 0 && R706 + R703 = 0)) && (R2925 + R2922 = 0 || (R2923 + R2920 = 0 && R2924 + R2921 = 0)) && (R2925 + R2922 = 0 || (R3149 + R3146 = 0 && R3150 + R3147 = 0));
// End of Parikh automata intersection problem
