// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R116, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R2, R3, R4, R5, R7, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R119 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s1 [13, 13] { R130 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s1 [0, 65535] { R132 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R132 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R148 += 1 };
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s0 -> s2 [67, 67] { R148 += 1 };
  s0 -> s1 [68, 65535] { R148 += 1 };
  s1 -> s1 [0, 64] { R148 += 1 };
  s1 -> s2 [67, 67] { R148 += 1 };
  s1 -> s1 [68, 65535] { R148 += 1 };
  s2 -> s2 [0, 64] { R148 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R148 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R150 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s1 -> s1 [0, 65535] { R150 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 66] { R152 += 1 };
  s0 -> s2 [0, 65535] { R152 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s0 -> s3 [67, 67] { R152 += 1 };
  s0 -> s1 [68, 65535] { R152 += 1 };
  s1 -> s1 [0, 66] { R152 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R152 += 1 };
  s1 -> s1 [68, 65535] { R152 += 1 };
  s2 -> s1 [0, 66] { R152 += 1 };
  s2 -> s2 [0, 65535] { R152 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R152 += 1 };
  s2 -> s1 [68, 65535] { R152 += 1 };
  s3 -> s3 [0, 65535] { R152 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R154 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R154 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s3 [9, 13] { R154 += 1, R122 += 1 };
  s0 -> s1 [14, 31] { R154 += 1, R122 += 1 };
  s0 -> s3 [32, 32] { R154 += 1, R122 += 1 };
  s0 -> s1 [33, 65535] { R154 += 1, R122 += 1 };
  s1 -> s5 [0, 65535] { R154 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R154 += 1, R122 += 1 };
  s2 -> s1 [0, 8] { R154 += 1, R122 += 1 };
  s2 -> s2 [0, 65535] { R154 += 1, R121 += 1, R122 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R154 += 1, R122 += 1 };
  s2 -> s1 [14, 31] { R154 += 1, R122 += 1 };
  s2 -> s3 [32, 32] { R154 += 1, R122 += 1 };
  s2 -> s1 [33, 65535] { R154 += 1, R122 += 1 };
  s3 -> s1 [0, 65535] { R154 += 1, R122 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R154 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s0 -> s1 [0, 65535] { R156 += 1, R123 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R156 += 1, R124 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R156 += 1, R123 += 1, R124 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R156 += 1, R124 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R156 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R156 += 1, R124 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R156 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R158 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R158 += 1, R125 += 1, R126 += 1 };
  s0 -> s3 [9, 13] { R158 += 1, R126 += 1 };
  s0 -> s1 [14, 31] { R158 += 1, R126 += 1 };
  s0 -> s3 [32, 32] { R158 += 1, R126 += 1 };
  s0 -> s1 [33, 65535] { R158 += 1, R126 += 1 };
  s1 -> s1 [0, 65535] { R158 += 1, R126 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R158 += 1 };
  s2 -> s1 [0, 8] { R158 += 1, R126 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R158 += 1, R125 += 1, R126 += 1 };
  s2 -> s3 [9, 13] { R158 += 1, R126 += 1 };
  s2 -> s1 [14, 31] { R158 += 1, R126 += 1 };
  s2 -> s3 [32, 32] { R158 += 1, R126 += 1 };
  s2 -> s1 [33, 65535] { R158 += 1, R126 += 1 };
  s3 -> s1 [0, 65535] { R158 += 1, R126 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R158 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s1 [0, 65535] { R160 += 1, R127 += 1, R128 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R128 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R160 += 1, R127 += 1, R128 += 1 };
  s1 -> s2 [0, 65535] { R160 += 1, R128 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R160 += 1, R128 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R160 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R160 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 66] { R162 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s2 [0, 65535] { R162 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [67, 67] { R162 += 1, R138 += 1 };
  s0 -> s1 [68, 65535] { R162 += 1, R138 += 1 };
  s1 -> s1 [0, 66] { R162 += 1, R138 += 1 };
  s1 -> s3 [67, 67] { R162 += 1, R138 += 1 };
  s1 -> s1 [68, 65535] { R162 += 1, R138 += 1 };
  s2 -> s1 [0, 66] { R162 += 1, R138 += 1 };
  s2 -> s2 [0, 65535] { R162 += 1, R137 += 1, R138 += 1 };
  s2 -> s3 [67, 67] { R162 += 1, R138 += 1 };
  s2 -> s1 [68, 65535] { R162 += 1, R138 += 1 };
  s3 -> s3 [0, 65535] { R162 += 1, R138 += 1 };
  s3 -> s4 [0, 65535] { R162 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R162 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s0 -> s1 [0, 65535] { R164 += 1, R139 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R140 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R164 += 1, R139 += 1, R140 += 1 };
  s1 -> s2 [0, 65535] { R164 += 1, R140 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R164 += 1, R140 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R164 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R164 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 66] { R166 += 1, R142 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R141 += 1, R142 += 1 };
  s0 -> s3 [0, 65535] { R166 += 1, R142 += 1, R7 += 1, R8 += 1 };
  s0 -> s4 [67, 67] { R166 += 1, R142 += 1 };
  s0 -> s1 [68, 65535] { R166 += 1, R142 += 1, R8 += 1 };
  s1 -> s1 [0, 66] { R166 += 1, R142 += 1, R8 += 1 };
  s1 -> s4 [67, 67] { R166 += 1, R142 += 1 };
  s1 -> s1 [68, 65535] { R166 += 1, R142 += 1, R8 += 1 };
  s2 -> s1 [0, 66] { R166 += 1, R142 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R166 += 1, R141 += 1, R142 += 1 };
  s2 -> s3 [0, 65535] { R166 += 1, R142 += 1, R7 += 1, R8 += 1 };
  s2 -> s4 [67, 67] { R166 += 1, R142 += 1 };
  s2 -> s1 [68, 65535] { R166 += 1, R142 += 1, R8 += 1 };
  s3 -> s1 [0, 66] { R166 += 1, R142 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R166 += 1, R142 += 1, R7 += 1, R8 += 1 };
  s3 -> s4 [67, 67] { R166 += 1, R142 += 1 };
  s3 -> s1 [68, 65535] { R166 += 1, R142 += 1, R8 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R166 += 1, R142 += 1 };
  s4 -> s6 [0, 65535] { R166 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R166 += 1 };
  accepting s4, s5, s6;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 66] { R168 += 1, R144 += 1, R134 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R144 += 1, R133 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s3 [0, 65535] { R168 += 1, R143 += 1, R144 += 1 };
  s0 -> s4 [67, 67] { R168 += 1, R144 += 1, R134 += 1 };
  s0 -> s1 [68, 65535] { R168 += 1, R144 += 1, R134 += 1 };
  s1 -> s1 [0, 66] { R168 += 1, R144 += 1, R134 += 1 };
  s1 -> s4 [67, 67] { R168 += 1, R144 += 1, R134 += 1 };
  s1 -> s1 [68, 65535] { R168 += 1, R144 += 1, R134 += 1 };
  s2 -> s1 [0, 66] { R168 += 1, R144 += 1, R134 += 1 };
  s2 -> s2 [0, 65535] { R168 += 1, R144 += 1, R133 += 1, R134 += 1 };
  s2 -> s4 [67, 67] { R168 += 1, R144 += 1, R134 += 1 };
  s2 -> s1 [68, 65535] { R168 += 1, R144 += 1, R134 += 1 };
  s3 -> s1 [0, 66] { R168 += 1, R144 += 1, R134 += 1 };
  s3 -> s2 [0, 65535] { R168 += 1, R144 += 1, R133 += 1, R134 += 1 };
  s3 -> s3 [0, 65535] { R168 += 1, R143 += 1, R144 += 1 };
  s3 -> s4 [67, 67] { R168 += 1, R144 += 1, R134 += 1 };
  s3 -> s1 [68, 65535] { R168 += 1, R144 += 1, R134 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R168 += 1 };
  s4 -> s7 [0, 65535] { R168 += 1, R144 += 1 };
  s4 -> s4 [0, 65535] { R168 += 1, R144 += 1, R134 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R168 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R168 += 1 };
  s7 -> s7 [0, 65535] { R168 += 1, R144 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R170 += 1, R145 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R146 += 1, R135 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s3 [0, 65535] { R170 += 1, R146 += 1, R136 += 1, R120 += 1 };
  s1 -> s1 [0, 65535] { R170 += 1, R145 += 1, R146 += 1 };
  s1 -> s2 [0, 65535] { R170 += 1, R146 += 1, R135 += 1, R136 += 1 };
  s1 -> s3 [0, 65535] { R170 += 1, R146 += 1, R136 += 1, R120 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R170 += 1 };
  s2 -> s2 [0, 65535] { R170 += 1, R146 += 1, R135 += 1, R136 += 1 };
  s2 -> s3 [0, 65535] { R170 += 1, R146 += 1, R136 += 1, R120 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R170 += 1 };
  s3 -> s3 [0, 65535] { R170 += 1, R146 += 1, R136 += 1, R120 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R170 += 1, R146 += 1 };
  s4 -> s4 [0, 65535] { R170 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R170 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R170 += 1, R146 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R134 && R1 = R146 && R2 = R170 && R7 = 0 && R8 - R133 = -1 && R121 - R146 = -1 && R122 = R146 && R123 - R146 = -1 && R124 = R146 && R125 = 0 && R126 = 1 && R127 = 0 && R128 = 1 && R129 = 0 && R130 = 1 && R131 = 0 && R132 = 1 && R137 = 0 && R138 = R146 && R139 = 0 && R140 = R146 && R141 = 0 && R142 = R146 && R143 = 0 && R144 = R146 && R145 = 0 && R147 = 1 && R148 = R170 && R149 = 1 && R150 = R170 && R151 = 1 && R152 = R170 && R153 = 1 && R154 = R170 && R155 = 1 && R156 = R170 && R157 = 1 && R158 = R170 && R159 = 1 && R160 = R170 && R161 = 1 && R162 = R170 && R163 = 1 && R164 = R170 && R165 = 1 && R166 = R170 && R167 = 1 && R168 = R170 && R169 = 1 && R116 < 1 && R119 < 1 && R133 - R134 < 1 && -1 < R133 && 0 < R146 && 0 < R170 && (R133 != R135 || R134 = R136 || ((R120 != 0 || R134 - R135 < 1 || R135 < 0) && (R120 = 0 || R134 < R135 || R135 < 0))) && (R133 = R135 || (R120 = 0 && R133 = R134));
// End of Parikh automata intersection problem
