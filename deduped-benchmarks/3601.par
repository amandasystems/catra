// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R117, R118, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R3, R4, R5, R7, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R171 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s1 [13, 13] { R182 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R184 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R184 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R200 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s2 [67, 67] { R200 += 1 };
  s0 -> s1 [68, 65535] { R200 += 1 };
  s1 -> s1 [0, 64] { R200 += 1 };
  s1 -> s2 [67, 67] { R200 += 1 };
  s1 -> s1 [68, 65535] { R200 += 1 };
  s2 -> s2 [0, 64] { R200 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R200 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s1 [0, 65535] { R202 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R202 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 66] { R204 += 1, R118 += 1 };
  s0 -> s2 [0, 65535] { R204 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s3 [67, 67] { R204 += 1 };
  s0 -> s1 [68, 65535] { R204 += 1, R118 += 1 };
  s1 -> s1 [0, 66] { R204 += 1, R118 += 1 };
  s1 -> s3 [67, 67] { R204 += 1 };
  s1 -> s1 [68, 65535] { R204 += 1, R118 += 1 };
  s2 -> s1 [0, 66] { R204 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R204 += 1, R117 += 1, R118 += 1 };
  s2 -> s3 [67, 67] { R204 += 1 };
  s2 -> s1 [68, 65535] { R204 += 1, R118 += 1 };
  s3 -> s3 [0, 65535] { R204 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R206 += 1, R174 += 1 };
  s0 -> s2 [0, 65535] { R206 += 1, R173 += 1, R174 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s3 [9, 13] { R206 += 1, R174 += 1 };
  s0 -> s1 [14, 31] { R206 += 1, R174 += 1 };
  s0 -> s3 [32, 32] { R206 += 1, R174 += 1 };
  s0 -> s1 [33, 65535] { R206 += 1, R174 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R206 += 1 };
  s1 -> s1 [0, 65535] { R206 += 1, R174 += 1 };
  s2 -> s1 [0, 8] { R206 += 1, R174 += 1 };
  s2 -> s2 [0, 65535] { R206 += 1, R173 += 1, R174 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R206 += 1, R174 += 1 };
  s2 -> s1 [14, 31] { R206 += 1, R174 += 1 };
  s2 -> s3 [32, 32] { R206 += 1, R174 += 1 };
  s2 -> s1 [33, 65535] { R206 += 1, R174 += 1 };
  s3 -> s1 [0, 65535] { R206 += 1, R174 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R206 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s1 [0, 65535] { R208 += 1, R175 += 1, R176 += 1 };
  s0 -> s2 [0, 65535] { R208 += 1, R176 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R208 += 1, R175 += 1, R176 += 1 };
  s1 -> s2 [0, 65535] { R208 += 1, R176 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R208 += 1 };
  s2 -> s2 [0, 65535] { R208 += 1, R176 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R208 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R210 += 1, R178 += 1 };
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s2 [0, 65535] { R210 += 1, R177 += 1, R178 += 1 };
  s0 -> s3 [9, 13] { R210 += 1, R178 += 1 };
  s0 -> s1 [14, 31] { R210 += 1, R178 += 1 };
  s0 -> s3 [32, 32] { R210 += 1, R178 += 1 };
  s0 -> s1 [33, 65535] { R210 += 1, R178 += 1 };
  s1 -> s5 [0, 65535] { R210 += 1 };
  s1 -> s1 [0, 65535] { R210 += 1, R178 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R210 += 1, R178 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R210 += 1, R177 += 1, R178 += 1 };
  s2 -> s3 [9, 13] { R210 += 1, R178 += 1 };
  s2 -> s1 [14, 31] { R210 += 1, R178 += 1 };
  s2 -> s3 [32, 32] { R210 += 1, R178 += 1 };
  s2 -> s1 [33, 65535] { R210 += 1, R178 += 1 };
  s3 -> s1 [0, 65535] { R210 += 1, R178 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R210 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R212 += 1, R180 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R212 += 1, R179 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s1 -> s4 [0, 65535] { R212 += 1 };
  s1 -> s1 [0, 65535] { R212 += 1, R180 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R212 += 1, R180 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1, R179 += 1, R180 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R212 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 66] { R214 += 1, R190 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R189 += 1, R190 += 1 };
  s0 -> s3 [67, 67] { R214 += 1, R190 += 1 };
  s0 -> s1 [68, 65535] { R214 += 1, R190 += 1 };
  s1 -> s1 [0, 66] { R214 += 1, R190 += 1 };
  s1 -> s3 [67, 67] { R214 += 1, R190 += 1 };
  s1 -> s1 [68, 65535] { R214 += 1, R190 += 1 };
  s2 -> s1 [0, 66] { R214 += 1, R190 += 1 };
  s2 -> s2 [0, 65535] { R214 += 1, R189 += 1, R190 += 1 };
  s2 -> s3 [67, 67] { R214 += 1, R190 += 1 };
  s2 -> s1 [68, 65535] { R214 += 1, R190 += 1 };
  s3 -> s3 [0, 65535] { R214 += 1, R190 += 1 };
  s3 -> s4 [0, 65535] { R214 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R214 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s1 [0, 65535] { R216 += 1, R191 += 1, R192 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R192 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R216 += 1, R191 += 1, R192 += 1 };
  s1 -> s2 [0, 65535] { R216 += 1, R192 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R216 += 1 };
  s2 -> s2 [0, 65535] { R216 += 1, R192 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R216 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 66] { R218 += 1, R194 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R193 += 1, R194 += 1 };
  s0 -> s3 [0, 65535] { R218 += 1, R194 += 1, R7 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s4 [67, 67] { R218 += 1, R194 += 1 };
  s0 -> s1 [68, 65535] { R218 += 1, R194 += 1, R8 += 1 };
  s1 -> s1 [0, 66] { R218 += 1, R194 += 1, R8 += 1 };
  s1 -> s4 [67, 67] { R218 += 1, R194 += 1 };
  s1 -> s1 [68, 65535] { R218 += 1, R194 += 1, R8 += 1 };
  s2 -> s1 [0, 66] { R218 += 1, R194 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R218 += 1, R193 += 1, R194 += 1 };
  s2 -> s3 [0, 65535] { R218 += 1, R194 += 1, R7 += 1, R8 += 1 };
  s2 -> s4 [67, 67] { R218 += 1, R194 += 1 };
  s2 -> s1 [68, 65535] { R218 += 1, R194 += 1, R8 += 1 };
  s3 -> s1 [0, 66] { R218 += 1, R194 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R218 += 1, R194 += 1, R7 += 1, R8 += 1 };
  s3 -> s4 [67, 67] { R218 += 1, R194 += 1 };
  s3 -> s1 [68, 65535] { R218 += 1, R194 += 1, R8 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R218 += 1 };
  s4 -> s4 [0, 65535] { R218 += 1, R194 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R218 += 1 };
  accepting s4, s5, s6;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 66] { R220 += 1, R196 += 1, R186 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R196 += 1, R185 += 1, R186 += 1 };
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s3 [0, 65535] { R220 += 1, R195 += 1, R196 += 1 };
  s0 -> s4 [67, 67] { R220 += 1, R196 += 1, R186 += 1 };
  s0 -> s1 [68, 65535] { R220 += 1, R196 += 1, R186 += 1 };
  s1 -> s1 [0, 66] { R220 += 1, R196 += 1, R186 += 1 };
  s1 -> s4 [67, 67] { R220 += 1, R196 += 1, R186 += 1 };
  s1 -> s1 [68, 65535] { R220 += 1, R196 += 1, R186 += 1 };
  s2 -> s1 [0, 66] { R220 += 1, R196 += 1, R186 += 1 };
  s2 -> s2 [0, 65535] { R220 += 1, R196 += 1, R185 += 1, R186 += 1 };
  s2 -> s4 [67, 67] { R220 += 1, R196 += 1, R186 += 1 };
  s2 -> s1 [68, 65535] { R220 += 1, R196 += 1, R186 += 1 };
  s3 -> s1 [0, 66] { R220 += 1, R196 += 1, R186 += 1 };
  s3 -> s2 [0, 65535] { R220 += 1, R196 += 1, R185 += 1, R186 += 1 };
  s3 -> s3 [0, 65535] { R220 += 1, R195 += 1, R196 += 1 };
  s3 -> s4 [67, 67] { R220 += 1, R196 += 1, R186 += 1 };
  s3 -> s1 [68, 65535] { R220 += 1, R196 += 1, R186 += 1 };
  s4 -> s4 [0, 65535] { R220 += 1, R196 += 1, R186 += 1 };
  s4 -> s5 [0, 65535] { R220 += 1, R196 += 1 };
  s4 -> s6 [0, 65535] { R220 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R220 += 1, R196 += 1 };
  s5 -> s6 [0, 65535] { R220 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R220 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R222 += 1, R198 += 1, R187 += 1, R188 += 1 };
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s0 -> s2 [0, 65535] { R222 += 1, R198 += 1, R188 += 1, R172 += 1 };
  s0 -> s3 [0, 65535] { R222 += 1, R197 += 1, R198 += 1 };
  s1 -> s1 [0, 65535] { R222 += 1, R198 += 1, R187 += 1, R188 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R222 += 1 };
  s1 -> s2 [0, 65535] { R222 += 1, R198 += 1, R188 += 1, R172 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R222 += 1 };
  s2 -> s6 [0, 65535] { R222 += 1, R198 += 1 };
  s2 -> s2 [0, 65535] { R222 += 1, R198 += 1, R188 += 1, R172 += 1 };
  s3 -> s1 [0, 65535] { R222 += 1, R198 += 1, R187 += 1, R188 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R222 += 1, R198 += 1, R188 += 1, R172 += 1 };
  s3 -> s3 [0, 65535] { R222 += 1, R197 += 1, R198 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R222 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R222 += 1 };
  s6 -> s6 [0, 65535] { R222 += 1, R198 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R186 && R1 = R196 && R2 = R222 && R7 = 0 && R8 - R185 = -1 && R117 = 0 && R118 - R195 = -1 && R173 - R196 = -1 && R174 = R196 && R175 - R196 = -1 && R176 = R196 && R177 = 0 && R178 = 1 && R179 = 0 && R180 = 1 && R181 = 0 && R182 = 1 && R183 = 0 && R184 = 1 && R189 = R195 && R190 = R196 && R193 = R195 && R194 = R196 && R199 = 1 && R200 = R222 && R201 = 1 && R202 = R222 && R203 = 1 && R204 = R222 && R205 = 1 && R206 = R222 && R207 = 1 && R208 = R222 && R209 = 1 && R210 = R222 && R211 = 1 && R212 = R222 && R213 = 1 && R214 = R222 && R215 = 1 && R216 = R222 && R217 = 1 && R218 = R222 && R219 = 1 && R220 = R222 && R221 = 1 && R171 < 1 && R185 - R186 < 1 && -1 < R185 && R195 - R196 < 1 && -1 < R195 && 0 < R196 && 0 < R222 && (R185 != R187 || R186 = R188 || ((R172 != 0 || R186 - R187 < 1 || R187 < 0) && (R172 = 0 || R186 < R187 || R187 < 0))) && (R191 != R195 || R192 = R196 || (R186 = 0 && (R185 != 0 || R196 - R195 < 1))) && (R195 != R197 || R196 = R198 || ((R185 != 0 || R186 != 0 || R196 - R197 < 1 || R197 < 0) && (R186 < 1 || R196 < R197 || R197 < 0))) && (R185 = R187 || (R172 = 0 && R185 = R186)) && (R191 = R195 || (R186 = 0 && (R185 != 0 || R196 - R195 < 1))) && (R195 = R197 || (R186 = 0 && (R185 != 0 || R196 - R195 < 1)));
// End of Parikh automata intersection problem
