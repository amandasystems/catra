// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R14, R15, R18, R21, R24, R2781, R2782, R2783, R2784, R2785, R2786, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R4319, R4320, R4321, R4322, R4323, R4324, R44, R45, R459, R46, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R476, R4933, R4934, R4935, R4936, R4937, R4938, R4939, R4940, R4941, R4942, R4943, R4944, R4945, R4946, R4947, R4948, R4949, R4950, R4951, R4952, R4953, R4954, R4955, R4956, R4957, R4958, R4959, R4960, R4961, R4962, R4963, R4964, R4965, R4966, R4967, R4968, R4969, R4970, R4971, R4972, R4973, R4974, R4975, R4976, R4977, R4978, R4979, R4980, R4981, R4982, R4983, R4984, R4985, R4986, R4987, R4988, R4989, R4990, R4991, R4992, R4993, R4994, R4995, R4996, R4997, R4998, R4999, R5, R5000, R5001, R5002, R5003, R5004, R5005, R5006, R5007, R5008, R5009, R5010, R5011, R5012, R5013, R5014, R5015, R5016, R5017, R5018, R5019, R5020, R5021, R5022, R5023, R5024, R5025, R5026, R5027, R5028, R5029, R5030, R5031, R5032, R5033, R5034, R5035, R5036, R5037, R5038, R5039, R5040, R5041, R5042, R5043, R5044, R5045, R5046, R5047, R5048, R5049, R5050, R5051, R5052, R5053, R5054, R5055, R5056, R5057, R5058, R5059, R5060, R5061, R5062, R5063, R5064, R5065, R5066, R5067, R5068, R5069, R5070, R5071, R5072, R5073, R5074, R5075, R5076, R5077, R5078, R5079, R5080, R5081, R5082, R5083, R5084, R6, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R68 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R70 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s2 [108, 108] { R70 += 1 };
  s0 -> s1 [109, 65535] { R70 += 1 };
  s1 -> s1 [0, 65535] { R70 += 1 };
  s1 -> s11 [0, 65535];
  s2 -> s1 [0, 110] { R70 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R70 += 1 };
  s2 -> s1 [112, 65535] { R70 += 1 };
  s3 -> s1 [0, 98] { R70 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R70 += 1 };
  s3 -> s1 [100, 65535] { R70 += 1 };
  s4 -> s1 [0, 96] { R70 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R70 += 1 };
  s4 -> s1 [98, 65535] { R70 += 1 };
  s5 -> s1 [0, 107] { R70 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R70 += 1 };
  s5 -> s1 [109, 65535] { R70 += 1 };
  s6 -> s1 [0, 103] { R70 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R70 += 1 };
  s6 -> s1 [105, 65535] { R70 += 1 };
  s7 -> s1 [0, 110] { R70 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R70 += 1 };
  s7 -> s1 [112, 65535] { R70 += 1 };
  s8 -> s1 [0, 114] { R70 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R70 += 1 };
  s8 -> s1 [116, 65535] { R70 += 1 };
  s9 -> s1 [0, 115] { R70 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R70 += 1 };
  s9 -> s1 [117, 65535] { R70 += 1 };
  s10 -> s1 [0, 65535] { R70 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s1 [0, 65535] { R72 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R72 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R86 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s2 [66, 66] { R86 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R86 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R86 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R86 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R86 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R86 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R86 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R86 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R4964 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R4963 += 1, R4964 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4964 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R4966 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R4965 += 1, R4966 += 1 };
  s1 -> s1 [0, 65535] { R4966 += 1, R88 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R4968 += 1 };
  s0 -> s2 [0, 65535] { R4968 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R4967 += 1, R4968 += 1 };
  s0 -> s1 [78, 65535] { R4968 += 1 };
  s1 -> s1 [0, 76] { R4968 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R4968 += 1 };
  s2 -> s1 [0, 76] { R4968 += 1 };
  s2 -> s2 [0, 65535] { R4968 += 1, R90 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R4968 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R4969 += 1, R4970 += 1 };
  s0 -> s1 [0, 65535] { R4970 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R4970 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4970 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535] { R4970 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4970 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R4970 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4970 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R4972 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R4971 += 1, R4972 += 1 };
  s0 -> s2 [108, 108] { R4972 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R4972 += 1, R99 += 1, R100 += 1 };
  s1 -> s2 [108, 108] { R4972 += 1, R100 += 1 };
  s2 -> s3 [111, 111] { R4972 += 1, R100 += 1 };
  s3 -> s4 [99, 99] { R4972 += 1, R100 += 1 };
  s4 -> s5 [97, 97] { R4972 += 1, R100 += 1 };
  s5 -> s6 [108, 108] { R4972 += 1, R100 += 1 };
  s6 -> s7 [104, 104] { R4972 += 1, R100 += 1 };
  s7 -> s8 [111, 111] { R4972 += 1, R100 += 1 };
  s8 -> s9 [115, 115] { R4972 += 1, R100 += 1 };
  s9 -> s10 [116, 116] { R4972 += 1, R100 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R4972 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R4974 += 1, R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R4974 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R4973 += 1, R4974 += 1 };
  s1 -> s1 [0, 65535] { R4974 += 1, R104 += 1, R105 += 1 };
  s1 -> s2 [0, 65535] { R4974 += 1, R105 += 1, R106 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4974 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535] { R4974 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4974 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R4975 += 1, R4976 += 1 };
  s0 -> s1 [0, 65535] { R4976 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4976 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R5000 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R4999 += 1, R5000 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5000 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R5002 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R5001 += 1, R5002 += 1 };
  s0 -> s2 [65, 65] { R5002 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R5002 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R5002 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R5002 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5002 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R5002 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R5002 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5002 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R5004 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R5003 += 1, R5004 += 1 };
  s0 -> s2 [65, 65] { R5004 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R5004 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R5004 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R5004 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5004 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R5004 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R5004 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R5004 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R5006 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R5005 += 1, R5006 += 1 };
  s0 -> s2 [65, 65] { R5006 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R5006 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R5006 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R5006 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5006 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R5006 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R5006 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5006 += 1, R91 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R5008 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R5007 += 1, R5008 += 1 };
  s0 -> s2 [65, 65] { R5008 += 1, R97 += 1, R98 += 1 };
  s0 -> s3 [65, 65] { R5008 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [66, 65535] { R5008 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 64] { R5008 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5008 += 1, R97 += 1, R98 += 1 };
  s1 -> s3 [65, 65] { R5008 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [66, 65535] { R5008 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5008 += 1, R97 += 1, R98 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R5010 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R5009 += 1, R5010 += 1 };
  s0 -> s2 [65, 65] { R5010 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R5010 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R5010 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R5010 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5010 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R5010 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R5010 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5010 += 1, R101 += 1, R102 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R5012 += 1 };
  s0 -> s0 [0, 65535] { R5011 += 1, R5012 += 1 };
  s0 -> s2 [65, 65] { R5012 += 1 };
  s0 -> s3 [65, 65] { R5012 += 1 };
  s0 -> s1 [66, 65535] { R5012 += 1 };
  s1 -> s1 [0, 64] { R5012 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5012 += 1 };
  s1 -> s3 [65, 65] { R5012 += 1 };
  s1 -> s1 [66, 65535] { R5012 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5012 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R5014 += 1 };
  s0 -> s0 [0, 65535] { R5013 += 1, R5014 += 1 };
  s0 -> s1 [45, 45] { R5014 += 1 };
  s0 -> s2 [46, 46] { R5014 += 1 };
  s0 -> s1 [48, 62] { R5014 += 1 };
  s0 -> s3 [65, 65] { R5014 += 1 };
  s0 -> s1 [66, 65535] { R5014 += 1 };
  s1 -> s1 [0, 43] { R5014 += 1 };
  s1 -> s1 [45, 45] { R5014 += 1 };
  s1 -> s2 [46, 46] { R5014 += 1 };
  s1 -> s1 [48, 62] { R5014 += 1 };
  s1 -> s3 [65, 65] { R5014 += 1 };
  s1 -> s1 [66, 65535] { R5014 += 1 };
  s2 -> s1 [0, 43] { R5014 += 1 };
  s2 -> s1 [45, 45] { R5014 += 1 };
  s2 -> s2 [46, 46] { R5014 += 1 };
  s2 -> s1 [48, 62] { R5014 += 1 };
  s2 -> s3 [65, 65] { R5014 += 1 };
  s2 -> s1 [66, 114] { R5014 += 1 };
  s2 -> s8 [115, 115] { R5014 += 1 };
  s2 -> s1 [116, 65535] { R5014 += 1 };
  s3 -> s3 [0, 43] { R5014 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R5014 += 1 };
  s3 -> s4 [46, 46] { R5014 += 1 };
  s3 -> s3 [48, 62] { R5014 += 1 };
  s3 -> s3 [65, 65535] { R5014 += 1 };
  s4 -> s3 [0, 43] { R5014 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R5014 += 1 };
  s4 -> s4 [46, 46] { R5014 += 1 };
  s4 -> s3 [48, 62] { R5014 += 1 };
  s4 -> s3 [65, 114] { R5014 += 1 };
  s4 -> s5 [115, 115] { R5014 += 1 };
  s4 -> s3 [116, 65535] { R5014 += 1 };
  s5 -> s3 [0, 43] { R5014 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R5014 += 1 };
  s5 -> s4 [46, 46] { R5014 += 1 };
  s5 -> s3 [48, 62] { R5014 += 1 };
  s5 -> s3 [65, 110] { R5014 += 1 };
  s5 -> s6 [111, 111] { R5014 += 1 };
  s5 -> s3 [112, 65535] { R5014 += 1 };
  s6 -> s3 [0, 43] { R5014 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R5014 += 1 };
  s6 -> s4 [46, 46] { R5014 += 1 };
  s6 -> s3 [48, 62] { R5014 += 1 };
  s6 -> s3 [65, 98] { R5014 += 1 };
  s6 -> s7 [99, 99] { R5014 += 1 };
  s6 -> s3 [100, 65535] { R5014 += 1 };
  s7 -> s3 [0, 43] { R5014 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R5014 += 1 };
  s7 -> s4 [46, 46] { R5014 += 1 };
  s7 -> s3 [48, 62] { R5014 += 1 };
  s7 -> s3 [65, 106] { R5014 += 1 };
  s7 -> s3 [108, 65535] { R5014 += 1 };
  s8 -> s1 [0, 43] { R5014 += 1 };
  s8 -> s1 [45, 45] { R5014 += 1 };
  s8 -> s2 [46, 46] { R5014 += 1 };
  s8 -> s1 [48, 62] { R5014 += 1 };
  s8 -> s3 [65, 65] { R5014 += 1 };
  s8 -> s1 [66, 110] { R5014 += 1 };
  s8 -> s9 [111, 111] { R5014 += 1 };
  s8 -> s1 [112, 65535] { R5014 += 1 };
  s9 -> s1 [0, 43] { R5014 += 1 };
  s9 -> s1 [45, 45] { R5014 += 1 };
  s9 -> s2 [46, 46] { R5014 += 1 };
  s9 -> s1 [48, 62] { R5014 += 1 };
  s9 -> s3 [65, 65] { R5014 += 1 };
  s9 -> s1 [66, 98] { R5014 += 1 };
  s9 -> s10 [99, 99] { R5014 += 1 };
  s9 -> s1 [100, 65535] { R5014 += 1 };
  s10 -> s1 [0, 43] { R5014 += 1 };
  s10 -> s1 [45, 45] { R5014 += 1 };
  s10 -> s2 [46, 46] { R5014 += 1 };
  s10 -> s1 [48, 62] { R5014 += 1 };
  s10 -> s3 [65, 65] { R5014 += 1 };
  s10 -> s1 [66, 106] { R5014 += 1 };
  s10 -> s1 [108, 65535] { R5014 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R5015 += 1, R5016 += 1 };
  s0 -> s1 [0, 65535] { R5016 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R5016 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R5018 += 1 };
  s0 -> s0 [0, 65535] { R5017 += 1, R5018 += 1 };
  s0 -> s2 [0, 65535] { R5018 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R5018 += 1 };
  s0 -> s1 [59, 65535] { R5018 += 1 };
  s1 -> s1 [0, 57] { R5018 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R5018 += 1 };
  s1 -> s1 [59, 65535] { R5018 += 1 };
  s2 -> s1 [0, 57] { R5018 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5018 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R5018 += 1 };
  s2 -> s1 [59, 65535] { R5018 += 1 };
  s3 -> s3 [0, 65535] { R5018 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R5020 += 1 };
  s0 -> s2 [0, 65535] { R5020 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R5019 += 1, R5020 += 1 };
  s0 -> s3 [43, 43] { R5020 += 1 };
  s0 -> s1 [44, 65535] { R5020 += 1 };
  s1 -> s1 [0, 42] { R5020 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R5020 += 1 };
  s1 -> s1 [44, 65535] { R5020 += 1 };
  s2 -> s1 [0, 42] { R5020 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5020 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R5020 += 1 };
  s2 -> s1 [44, 65535] { R5020 += 1 };
  s3 -> s3 [0, 65535] { R5020 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R5022 += 1 };
  s0 -> s2 [0, 65535] { R5022 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R5021 += 1, R5022 += 1 };
  s0 -> s3 [65, 65] { R5022 += 1 };
  s0 -> s1 [66, 65535] { R5022 += 1 };
  s1 -> s1 [0, 64] { R5022 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R5022 += 1 };
  s1 -> s1 [66, 65535] { R5022 += 1 };
  s2 -> s1 [0, 64] { R5022 += 1 };
  s2 -> s2 [0, 65535] { R5022 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R5022 += 1 };
  s2 -> s1 [66, 65535] { R5022 += 1 };
  s3 -> s3 [0, 65535] { R5022 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R5024 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R5023 += 1, R5024 += 1 };
  s0 -> s2 [0, 65535] { R5024 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [91, 91] { R5024 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R5024 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R5024 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5024 += 1 };
  s2 -> s1 [0, 90] { R5024 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R5024 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R5024 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R5024 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R5024 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5024 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s0 [0, 65535] { R5025 += 1, R5026 += 1 };
  s0 -> s1 [0, 65535] { R5026 += 1, R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R5026 += 1, R42 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5026 += 1, R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535] { R5026 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5026 += 1, R42 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R5026 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5026 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 65535] { R5028 += 1, R62 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R5027 += 1, R5028 += 1 };
  s0 -> s2 [0, 65535] { R5028 += 1, R61 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R5028 += 1, R62 += 1, R31 += 1 };
  s1 -> s4 [0, 65535] { R5028 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5028 += 1, R62 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5028 += 1, R61 += 1, R62 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5028 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R5030 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R5029 += 1, R5030 += 1 };
  s0 -> s2 [0, 65535] { R5030 += 1, R63 += 1, R64 += 1 };
  s0 -> s3 [108, 108] { R5030 += 1, R64 += 1 };
  s0 -> s1 [109, 65535] { R5030 += 1, R64 += 1 };
  s1 -> s13 [0, 65535] { R5030 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5030 += 1, R64 += 1 };
  s2 -> s1 [0, 107] { R5030 += 1, R64 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5030 += 1, R63 += 1, R64 += 1 };
  s2 -> s3 [108, 108] { R5030 += 1, R64 += 1 };
  s2 -> s1 [109, 65535] { R5030 += 1, R64 += 1 };
  s3 -> s1 [0, 110] { R5030 += 1, R64 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5030 += 1 };
  s3 -> s5 [111, 111] { R5030 += 1, R64 += 1 };
  s3 -> s1 [112, 65535] { R5030 += 1, R64 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R5030 += 1, R64 += 1 };
  s5 -> s5 [0, 65535] { R5030 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R5030 += 1, R64 += 1 };
  s5 -> s1 [100, 65535] { R5030 += 1, R64 += 1 };
  s6 -> s1 [0, 96] { R5030 += 1, R64 += 1 };
  s6 -> s6 [0, 65535] { R5030 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R5030 += 1, R64 += 1 };
  s6 -> s1 [98, 65535] { R5030 += 1, R64 += 1 };
  s7 -> s1 [0, 107] { R5030 += 1, R64 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R5030 += 1 };
  s7 -> s8 [108, 108] { R5030 += 1, R64 += 1 };
  s7 -> s1 [109, 65535] { R5030 += 1, R64 += 1 };
  s8 -> s1 [0, 103] { R5030 += 1, R64 += 1 };
  s8 -> s8 [0, 65535] { R5030 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R5030 += 1, R64 += 1 };
  s8 -> s1 [105, 65535] { R5030 += 1, R64 += 1 };
  s9 -> s1 [0, 110] { R5030 += 1, R64 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R5030 += 1 };
  s9 -> s10 [111, 111] { R5030 += 1, R64 += 1 };
  s9 -> s1 [112, 65535] { R5030 += 1, R64 += 1 };
  s10 -> s1 [0, 114] { R5030 += 1, R64 += 1 };
  s10 -> s10 [0, 65535] { R5030 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R5030 += 1, R64 += 1 };
  s10 -> s1 [116, 65535] { R5030 += 1, R64 += 1 };
  s11 -> s1 [0, 115] { R5030 += 1, R64 += 1 };
  s11 -> s11 [0, 65535] { R5030 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R5030 += 1, R64 += 1 };
  s11 -> s1 [117, 65535] { R5030 += 1, R64 += 1 };
  s12 -> s1 [0, 65535] { R5030 += 1, R64 += 1 };
  s13 -> s13 [0, 65535] { R5030 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s0 [0, 65535] { R5031 += 1, R5032 += 1 };
  s0 -> s1 [0, 65535] { R5032 += 1, R66 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R5032 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5032 += 1, R66 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R5032 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5032 += 1, R66 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R5032 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5032 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R5033 += 1, R5034 += 1 };
  s0 -> s1 [0, 65535] { R5034 += 1, R80 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R5034 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5034 += 1 };
  s1 -> s1 [0, 65535] { R5034 += 1, R80 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5034 += 1, R80 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R5034 += 1, R79 += 1, R80 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5034 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s0 [0, 65535] { R5035 += 1, R5036 += 1 };
  s0 -> s1 [0, 65535] { R5036 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5036 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R5038 += 1, R82 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R5037 += 1, R5038 += 1 };
  s0 -> s2 [0, 65535] { R5038 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [43, 43] { R5038 += 1, R82 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R5038 += 1, R82 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R5038 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R5038 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R5038 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R5038 += 1, R82 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R5038 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R5038 += 1, R82 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R5038 += 1, R82 += 1, R43 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5038 += 1, R81 += 1, R82 += 1 };
  s2 -> s3 [43, 43] { R5038 += 1, R82 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R5038 += 1, R82 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R5038 += 1, R82 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R5038 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5038 += 1, R82 += 1, R43 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5038 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5038 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R5040 += 1, R4940 += 1 };
  s0 -> s2 [0, 65535] { R5040 += 1, R4939 += 1, R4940 += 1 };
  s0 -> s0 [0, 65535] { R5039 += 1, R5040 += 1 };
  s0 -> s1 [66, 65535] { R5040 += 1, R4940 += 1 };
  s1 -> s1 [0, 64] { R5040 += 1, R4940 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5040 += 1 };
  s1 -> s1 [66, 65535] { R5040 += 1, R4940 += 1 };
  s2 -> s1 [0, 64] { R5040 += 1, R4940 += 1 };
  s2 -> s2 [0, 65535] { R5040 += 1, R4939 += 1, R4940 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R5040 += 1, R4940 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R5042 += 1, R4941 += 1, R4942 += 1 };
  s0 -> s0 [0, 65535] { R5041 += 1, R5042 += 1 };
  s0 -> s2 [0, 65535] { R5042 += 1, R4942 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R5042 += 1, R4941 += 1, R4942 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R5042 += 1, R4942 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5042 += 1 };
  s2 -> s2 [0, 65535] { R5042 += 1, R4942 += 1, R32 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5042 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R5044 += 1, R4944 += 1 };
  s0 -> s0 [0, 65535] { R5043 += 1, R5044 += 1 };
  s0 -> s2 [0, 65535] { R5044 += 1, R4943 += 1, R4944 += 1 };
  s0 -> s1 [80, 65535] { R5044 += 1, R4944 += 1 };
  s1 -> s1 [0, 65] { R5044 += 1, R4944 += 1 };
  s1 -> s1 [0, 65535] { R5044 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R5044 += 1, R4944 += 1 };
  s2 -> s1 [0, 65] { R5044 += 1, R4944 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5044 += 1, R4943 += 1, R4944 += 1 };
  s2 -> s1 [80, 65535] { R5044 += 1, R4944 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R5046 += 1, R4946 += 1, R460 += 1 };
  s0 -> s0 [0, 65535] { R5045 += 1, R5046 += 1 };
  s0 -> s2 [0, 65535] { R5046 += 1, R4945 += 1, R4946 += 1 };
  s1 -> s1 [0, 65535] { R5046 += 1, R4946 += 1, R460 += 1 };
  s1 -> s4 [0, 65535] { R5046 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5046 += 1, R4946 += 1, R460 += 1 };
  s2 -> s2 [0, 65535] { R5046 += 1, R4945 += 1, R4946 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5046 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R5048 += 1, R4948 += 1 };
  s0 -> s0 [0, 65535] { R5047 += 1, R5048 += 1 };
  s0 -> s2 [0, 65535] { R5048 += 1, R4948 += 1, R462 += 1 };
  s0 -> s3 [0, 65535] { R5048 += 1, R4947 += 1, R4948 += 1 };
  s0 -> s1 [81, 65535] { R5048 += 1, R4948 += 1 };
  s1 -> s1 [0, 79] { R5048 += 1, R4948 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5048 += 1 };
  s1 -> s1 [81, 65535] { R5048 += 1, R4948 += 1 };
  s2 -> s1 [0, 79] { R5048 += 1, R4948 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5048 += 1 };
  s2 -> s2 [0, 65535] { R5048 += 1, R4948 += 1, R462 += 1 };
  s2 -> s1 [81, 65535] { R5048 += 1, R4948 += 1 };
  s3 -> s1 [0, 79] { R5048 += 1, R4948 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R5048 += 1, R4948 += 1, R462 += 1 };
  s3 -> s3 [0, 65535] { R5048 += 1, R4947 += 1, R4948 += 1 };
  s3 -> s1 [81, 65535] { R5048 += 1, R4948 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5048 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R5050 += 1, R4950 += 1, R466 += 1 };
  s0 -> s2 [0, 65535] { R5050 += 1, R4949 += 1, R4950 += 1 };
  s0 -> s0 [0, 65535] { R5049 += 1, R5050 += 1 };
  s0 -> s3 [0, 65535] { R5050 += 1, R4950 += 1, R465 += 1, R466 += 1 };
  s0 -> s1 [81, 65535] { R5050 += 1, R4950 += 1, R466 += 1 };
  s1 -> s1 [0, 79] { R5050 += 1, R4950 += 1, R466 += 1 };
  s1 -> s1 [0, 65535] { R5050 += 1, R4950 += 1 };
  s1 -> s4 [0, 65535] { R5050 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R5050 += 1, R4950 += 1, R466 += 1 };
  s2 -> s1 [0, 79] { R5050 += 1, R4950 += 1, R466 += 1 };
  s2 -> s2 [0, 65535] { R5050 += 1, R4949 += 1, R4950 += 1 };
  s2 -> s3 [0, 65535] { R5050 += 1, R4950 += 1, R465 += 1, R466 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R5050 += 1, R4950 += 1, R466 += 1 };
  s3 -> s1 [0, 79] { R5050 += 1, R4950 += 1, R466 += 1 };
  s3 -> s4 [0, 65535] { R5050 += 1 };
  s3 -> s3 [0, 65535] { R5050 += 1, R4950 += 1, R465 += 1, R466 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R5050 += 1, R4950 += 1, R466 += 1 };
  s4 -> s4 [0, 65535] { R5050 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R5052 += 1, R4952 += 1, R471 += 1, R472 += 1 };
  s0 -> s2 [0, 65535] { R5052 += 1, R4952 += 1, R470 += 1, R471 += 1 };
  s0 -> s3 [0, 65535] { R5052 += 1, R4951 += 1, R4952 += 1 };
  s0 -> s0 [0, 65535] { R5051 += 1, R5052 += 1 };
  s1 -> s1 [0, 65535] { R5052 += 1, R4952 += 1, R471 += 1, R472 += 1 };
  s1 -> s6 [0, 65535] { R5052 += 1, R4952 += 1 };
  s1 -> s5 [0, 65535] { R5052 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R5052 += 1, R4952 += 1, R471 += 1, R472 += 1 };
  s2 -> s2 [0, 65535] { R5052 += 1, R4952 += 1, R470 += 1, R471 += 1 };
  s2 -> s5 [0, 65535] { R5052 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5052 += 1, R4952 += 1, R471 += 1, R472 += 1 };
  s3 -> s2 [0, 65535] { R5052 += 1, R4952 += 1, R470 += 1, R471 += 1 };
  s3 -> s3 [0, 65535] { R5052 += 1, R4951 += 1, R4952 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5052 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R5052 += 1, R4952 += 1 };
  s6 -> s5 [0, 65535] { R5052 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s0 -> s0 [0, 65535] { R5053 += 1, R5054 += 1 };
  s0 -> s2 [0, 65535] { R5054 += 1, R4954 += 1, R475 += 1, R476 += 1 };
  s0 -> s3 [0, 65535] { R5054 += 1, R4953 += 1, R4954 += 1 };
  s0 -> s1 [91, 107] { R5054 += 1, R4954 += 1, R476 += 1 };
  s0 -> s4 [108, 108] { R5054 += 1, R4954 += 1, R476 += 1 };
  s0 -> s1 [109, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s1 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R5054 += 1 };
  s1 -> s1 [0, 65535] { R5054 += 1, R4954 += 1 };
  s1 -> s1 [91, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s2 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R5054 += 1 };
  s2 -> s2 [0, 65535] { R5054 += 1, R4954 += 1, R475 += 1, R476 += 1 };
  s2 -> s1 [91, 107] { R5054 += 1, R4954 += 1, R476 += 1 };
  s2 -> s4 [108, 108] { R5054 += 1, R4954 += 1, R476 += 1 };
  s2 -> s1 [109, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s3 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R5054 += 1, R4954 += 1, R475 += 1, R476 += 1 };
  s3 -> s3 [0, 65535] { R5054 += 1, R4953 += 1, R4954 += 1 };
  s3 -> s1 [91, 107] { R5054 += 1, R4954 += 1, R476 += 1 };
  s3 -> s4 [108, 108] { R5054 += 1, R4954 += 1, R476 += 1 };
  s3 -> s1 [109, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s4 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5054 += 1, R4954 += 1 };
  s4 -> s6 [0, 65535] { R5054 += 1 };
  s4 -> s1 [91, 110] { R5054 += 1, R4954 += 1, R476 += 1 };
  s4 -> s7 [111, 111] { R5054 += 1, R4954 += 1, R476 += 1 };
  s4 -> s1 [112, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5054 += 1 };
  s7 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R5054 += 1 };
  s7 -> s7 [0, 65535] { R5054 += 1, R4954 += 1 };
  s7 -> s1 [91, 98] { R5054 += 1, R4954 += 1, R476 += 1 };
  s7 -> s8 [99, 99] { R5054 += 1, R4954 += 1, R476 += 1 };
  s7 -> s1 [100, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s8 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s8 -> s8 [0, 65535] { R5054 += 1, R4954 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R5054 += 1 };
  s8 -> s1 [91, 96] { R5054 += 1, R4954 += 1, R476 += 1 };
  s8 -> s9 [97, 97] { R5054 += 1, R4954 += 1, R476 += 1 };
  s8 -> s1 [98, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s9 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s9 -> s9 [0, 65535] { R5054 += 1, R4954 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R5054 += 1 };
  s9 -> s1 [91, 107] { R5054 += 1, R4954 += 1, R476 += 1 };
  s9 -> s10 [108, 108] { R5054 += 1, R4954 += 1, R476 += 1 };
  s9 -> s1 [109, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s10 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R5054 += 1 };
  s10 -> s10 [0, 65535] { R5054 += 1, R4954 += 1 };
  s10 -> s1 [91, 103] { R5054 += 1, R4954 += 1, R476 += 1 };
  s10 -> s11 [104, 104] { R5054 += 1, R4954 += 1, R476 += 1 };
  s10 -> s1 [105, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s11 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R5054 += 1 };
  s11 -> s11 [0, 65535] { R5054 += 1, R4954 += 1 };
  s11 -> s1 [91, 110] { R5054 += 1, R4954 += 1, R476 += 1 };
  s11 -> s12 [111, 111] { R5054 += 1, R4954 += 1, R476 += 1 };
  s11 -> s1 [112, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s12 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R5054 += 1, R4954 += 1 };
  s12 -> s6 [0, 65535] { R5054 += 1 };
  s12 -> s1 [91, 114] { R5054 += 1, R4954 += 1, R476 += 1 };
  s12 -> s13 [115, 115] { R5054 += 1, R4954 += 1, R476 += 1 };
  s12 -> s1 [116, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s13 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R5054 += 1 };
  s13 -> s13 [0, 65535] { R5054 += 1, R4954 += 1 };
  s13 -> s1 [91, 115] { R5054 += 1, R4954 += 1, R476 += 1 };
  s13 -> s14 [116, 116] { R5054 += 1, R4954 += 1, R476 += 1 };
  s13 -> s1 [117, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  s14 -> s1 [0, 80] { R5054 += 1, R4954 += 1, R476 += 1 };
  s14 -> s1 [91, 65535] { R5054 += 1, R4954 += 1, R476 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R5056 += 1, R4956 += 1 };
  s0 -> s2 [0, 65535] { R5056 += 1, R4955 += 1, R4956 += 1 };
  s0 -> s0 [0, 65535] { R5055 += 1, R5056 += 1 };
  s0 -> s3 [0, 65535] { R5056 += 1, R4956 += 1, R2785 += 1, R2786 += 1 };
  s1 -> s1 [0, 65535] { R5056 += 1, R4956 += 1 };
  s1 -> s4 [0, 65535] { R5056 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R5056 += 1, R4956 += 1 };
  s2 -> s2 [0, 65535] { R5056 += 1, R4955 += 1, R4956 += 1 };
  s2 -> s3 [0, 65535] { R5056 += 1, R4956 += 1, R2785 += 1, R2786 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R5056 += 1, R4956 += 1 };
  s3 -> s4 [0, 65535] { R5056 += 1 };
  s3 -> s3 [0, 65535] { R5056 += 1, R4956 += 1, R2785 += 1, R2786 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5056 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R5057 += 1, R5058 += 1 };
  s0 -> s1 [0, 65535] { R5058 += 1, R4957 += 1, R4958 += 1 };
  s0 -> s2 [0, 65535] { R5058 += 1, R4958 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5058 += 1, R4957 += 1, R4958 += 1 };
  s1 -> s2 [0, 65535] { R5058 += 1, R4958 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5058 += 1 };
  s2 -> s2 [0, 65535] { R5058 += 1, R4958 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5058 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R5059 += 1, R5060 += 1 };
  s0 -> s1 [0, 65535] { R5060 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s2 [0, 65535] { R5060 += 1, R4960 += 1 };
  s1 -> s1 [0, 65535] { R5060 += 1, R4959 += 1, R4960 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R5060 += 1, R4960 += 1 };
  s2 -> s3 [0, 65535] { R5060 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5060 += 1, R4960 += 1 };
  s3 -> s3 [0, 65535] { R5060 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R5061 += 1, R5062 += 1 };
  s0 -> s1 [0, 65535] { R5062 += 1, R4961 += 1, R4962 += 1 };
  s0 -> s2 [0, 65535] { R5062 += 1, R4962 += 1 };
  s1 -> s1 [0, 65535] { R5062 += 1, R4961 += 1, R4962 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R5062 += 1, R4962 += 1 };
  s2 -> s3 [0, 65535] { R5062 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5062 += 1, R4962 += 1 };
  s3 -> s3 [0, 65535] { R5062 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R5064 += 1, R4977 += 1, R4978 += 1 };
  s0 -> s2 [0, 65535] { R5064 += 1, R4978 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R5063 += 1, R5064 += 1 };
  s1 -> s1 [0, 65535] { R5064 += 1, R4977 += 1, R4978 += 1 };
  s1 -> s2 [0, 65535] { R5064 += 1, R4978 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5064 += 1, R4978 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5064 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5064 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R5066 += 1, R4980 += 1 };
  s0 -> s0 [0, 65535] { R5065 += 1, R5066 += 1 };
  s0 -> s2 [0, 65535] { R5066 += 1, R4979 += 1, R4980 += 1 };
  s0 -> s3 [65, 65] { R5066 += 1, R4980 += 1 };
  s0 -> s4 [65, 65] { R5066 += 1, R4980 += 1 };
  s0 -> s5 [80, 80] { R5066 += 1, R4980 += 1 };
  s0 -> s1 [81, 65535] { R5066 += 1, R4980 += 1 };
  s1 -> s1 [0, 64] { R5066 += 1, R4980 += 1 };
  s1 -> s3 [65, 65] { R5066 += 1, R4980 += 1 };
  s1 -> s4 [65, 65] { R5066 += 1, R4980 += 1 };
  s1 -> s5 [80, 80] { R5066 += 1, R4980 += 1 };
  s1 -> s1 [81, 65535] { R5066 += 1, R4980 += 1 };
  s2 -> s1 [0, 64] { R5066 += 1, R4980 += 1 };
  s2 -> s2 [0, 65535] { R5066 += 1, R4979 += 1, R4980 += 1 };
  s2 -> s3 [65, 65] { R5066 += 1, R4980 += 1 };
  s2 -> s4 [65, 65] { R5066 += 1, R4980 += 1 };
  s2 -> s5 [80, 80] { R5066 += 1, R4980 += 1 };
  s2 -> s1 [81, 65535] { R5066 += 1, R4980 += 1 };
  s4 -> s4 [0, 65] { R5066 += 1, R4980 += 1 };
  s4 -> s8 [80, 80] { R5066 += 1, R4980 += 1 };
  s4 -> s4 [81, 65535] { R5066 += 1, R4980 += 1 };
  s5 -> s5 [0, 64] { R5066 += 1, R4980 += 1 };
  s5 -> s5 [0, 65535] { R5066 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R5066 += 1, R4980 += 1 };
  s5 -> s8 [65, 65] { R5066 += 1, R4980 += 1 };
  s5 -> s5 [80, 65535] { R5066 += 1, R4980 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5066 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R5066 += 1, R4980 += 1 };
  s8 -> s8 [0, 65535] { R5066 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R5066 += 1, R4980 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R5068 += 1, R4982 += 1, R459 += 1 };
  s0 -> s2 [0, 65535] { R5068 += 1, R4981 += 1, R4982 += 1 };
  s0 -> s0 [0, 65535] { R5067 += 1, R5068 += 1 };
  s0 -> s3 [65, 65] { R5068 += 1, R4982 += 1, R459 += 1 };
  s0 -> s4 [65, 65] { R5068 += 1, R4982 += 1, R459 += 1 };
  s0 -> s1 [66, 65535] { R5068 += 1, R4982 += 1, R459 += 1 };
  s1 -> s1 [0, 64] { R5068 += 1, R4982 += 1, R459 += 1 };
  s1 -> s1 [0, 65535] { R5068 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5068 += 1, R4982 += 1, R459 += 1 };
  s1 -> s4 [65, 65] { R5068 += 1, R4982 += 1, R459 += 1 };
  s1 -> s1 [66, 65535] { R5068 += 1, R4982 += 1, R459 += 1 };
  s2 -> s1 [0, 64] { R5068 += 1, R4982 += 1, R459 += 1 };
  s2 -> s2 [0, 65535] { R5068 += 1, R4981 += 1, R4982 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5068 += 1, R4982 += 1, R459 += 1 };
  s2 -> s4 [65, 65] { R5068 += 1, R4982 += 1, R459 += 1 };
  s2 -> s1 [66, 65535] { R5068 += 1, R4982 += 1, R459 += 1 };
  s3 -> s3 [0, 65535] { R5068 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5068 += 1 };
  s4 -> s4 [0, 65535] { R5068 += 1, R4982 += 1, R459 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5068 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R5070 += 1, R4984 += 1, R461 += 1 };
  s0 -> s0 [0, 65535] { R5069 += 1, R5070 += 1 };
  s0 -> s2 [0, 65535] { R5070 += 1, R4983 += 1, R4984 += 1 };
  s0 -> s3 [65, 65] { R5070 += 1, R4984 += 1, R461 += 1 };
  s0 -> s4 [65, 65] { R5070 += 1, R4984 += 1, R461 += 1 };
  s0 -> s1 [66, 65535] { R5070 += 1, R4984 += 1, R461 += 1 };
  s1 -> s1 [0, 64] { R5070 += 1, R4984 += 1, R461 += 1 };
  s1 -> s1 [0, 65535] { R5070 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5070 += 1, R4984 += 1, R461 += 1 };
  s1 -> s4 [65, 65] { R5070 += 1, R4984 += 1, R461 += 1 };
  s1 -> s1 [66, 65535] { R5070 += 1, R4984 += 1, R461 += 1 };
  s2 -> s1 [0, 64] { R5070 += 1, R4984 += 1, R461 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5070 += 1, R4983 += 1, R4984 += 1 };
  s2 -> s3 [65, 65] { R5070 += 1, R4984 += 1, R461 += 1 };
  s2 -> s4 [65, 65] { R5070 += 1, R4984 += 1, R461 += 1 };
  s2 -> s1 [66, 65535] { R5070 += 1, R4984 += 1, R461 += 1 };
  s3 -> s3 [0, 65535] { R5070 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5070 += 1 };
  s4 -> s4 [0, 65535] { R5070 += 1, R4984 += 1, R461 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5070 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s0 -> s2 [0, 65535] { R5072 += 1, R4985 += 1, R4986 += 1 };
  s0 -> s0 [0, 65535] { R5071 += 1, R5072 += 1 };
  s0 -> s3 [65, 65] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s0 -> s4 [65, 65] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s0 -> s1 [66, 65535] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s1 -> s1 [0, 64] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5072 += 1 };
  s1 -> s3 [65, 65] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s1 -> s4 [65, 65] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s1 -> s1 [66, 65535] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s2 -> s1 [0, 64] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5072 += 1, R4985 += 1, R4986 += 1 };
  s2 -> s3 [65, 65] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s2 -> s4 [65, 65] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s2 -> s1 [66, 65535] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s3 -> s3 [0, 65535] { R5072 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5072 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5072 += 1, R4986 += 1, R463 += 1, R464 += 1 };
  s5 -> s5 [0, 65535] { R5072 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s0 -> s0 [0, 65535] { R5073 += 1, R5074 += 1 };
  s0 -> s2 [0, 65535] { R5074 += 1, R4987 += 1, R4988 += 1 };
  s0 -> s3 [65, 65] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s0 -> s4 [65, 65] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s0 -> s1 [66, 65535] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [0, 64] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5074 += 1 };
  s1 -> s3 [65, 65] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s1 -> s4 [65, 65] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [66, 65535] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [0, 64] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5074 += 1, R4987 += 1, R4988 += 1 };
  s2 -> s3 [65, 65] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s2 -> s4 [65, 65] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [66, 65535] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5074 += 1, R4988 += 1, R467 += 1, R468 += 1 };
  s3 -> s6 [0, 65535] { R5074 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5074 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5074 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s0 -> s2 [0, 65535] { R5076 += 1, R4989 += 1, R4990 += 1 };
  s0 -> s0 [0, 65535] { R5075 += 1, R5076 += 1 };
  s0 -> s3 [65, 65] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s0 -> s4 [65, 65] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s0 -> s1 [66, 65535] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s1 -> s1 [0, 64] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s1 -> s1 [0, 65535] { R5076 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s1 -> s4 [65, 65] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s1 -> s1 [66, 65535] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s2 -> s1 [0, 64] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s2 -> s2 [0, 65535] { R5076 += 1, R4989 += 1, R4990 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s2 -> s4 [65, 65] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s2 -> s1 [66, 65535] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s3 -> s3 [0, 65535] { R5076 += 1, R4990 += 1, R473 += 1, R474 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5076 += 1 };
  s4 -> s4 [0, 65535] { R5076 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5076 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s0 -> s2 [0, 64] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s0 -> s0 [0, 65535] { R5077 += 1, R5078 += 1 };
  s0 -> s3 [0, 65535] { R5078 += 1, R4991 += 1, R4992 += 1 };
  s0 -> s4 [65, 65] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s0 -> s5 [65, 65] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s0 -> s6 [65, 65] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s0 -> s7 [65, 65] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s0 -> s1 [66, 65535] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s0 -> s2 [66, 65535] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s1 -> s1 [0, 64] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s1 -> s2 [0, 64] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s1 -> s4 [65, 65] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s1 -> s5 [65, 65] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s1 -> s6 [65, 65] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s1 -> s7 [65, 65] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s1 -> s1 [66, 65535] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s1 -> s2 [66, 65535] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s2 -> s2 [0, 64] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5078 += 1 };
  s2 -> s5 [65, 65] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s2 -> s6 [65, 65] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s2 -> s2 [66, 65535] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s3 -> s1 [0, 64] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s3 -> s2 [0, 64] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s3 -> s3 [0, 65535] { R5078 += 1, R4991 += 1, R4992 += 1 };
  s3 -> s4 [65, 65] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s3 -> s5 [65, 65] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s3 -> s6 [65, 65] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s3 -> s7 [65, 65] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s3 -> s1 [66, 65535] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s3 -> s2 [66, 65535] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s4 -> s4 [0, 65535] { R5078 += 1, R4992 += 1, R2781 += 1, R2782 += 1 };
  s4 -> s5 [0, 65535] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s5 -> s9 [0, 65535] { R5078 += 1 };
  s5 -> s5 [0, 65535] { R5078 += 1, R4992 += 1, R2782 += 1, R2783 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5078 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5078 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s0 -> s2 [0, 64] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s0 -> s3 [0, 65535] { R5080 += 1, R4993 += 1, R4994 += 1 };
  s0 -> s0 [0, 65535] { R5079 += 1, R5080 += 1 };
  s0 -> s4 [65, 65] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s0 -> s5 [65, 65] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s0 -> s6 [65, 65] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s0 -> s7 [65, 65] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s0 -> s1 [66, 65535] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s0 -> s2 [66, 65535] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s1 -> s11 [0, 64] { R5080 += 1, R4994 += 1 };
  s1 -> s1 [0, 64] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s1 -> s4 [65, 65] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s1 -> s12 [65, 65] { R5080 += 1, R4994 += 1 };
  s1 -> s6 [65, 65] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s1 -> s8 [65, 65] { R5080 += 1, R4994 += 1 };
  s1 -> s11 [66, 65535] { R5080 += 1, R4994 += 1 };
  s1 -> s1 [66, 65535] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s2 -> s1 [0, 64] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s2 -> s2 [0, 64] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s2 -> s4 [65, 65] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s2 -> s5 [65, 65] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s2 -> s6 [65, 65] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s2 -> s7 [65, 65] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s2 -> s1 [66, 65535] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s2 -> s2 [66, 65535] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s3 -> s1 [0, 64] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s3 -> s2 [0, 64] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s3 -> s3 [0, 65535] { R5080 += 1, R4993 += 1, R4994 += 1 };
  s3 -> s4 [65, 65] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s3 -> s5 [65, 65] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s3 -> s6 [65, 65] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s3 -> s7 [65, 65] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s3 -> s1 [66, 65535] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s3 -> s2 [66, 65535] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s5 -> s5 [0, 65535] { R5080 += 1, R4994 += 1, R4319 += 1, R4320 += 1 };
  s5 -> s6 [0, 65535] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s6 -> s6 [0, 65535] { R5080 += 1, R4994 += 1, R4320 += 1, R4321 += 1 };
  s6 -> s8 [0, 65535] { R5080 += 1, R4994 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R5080 += 1, R4994 += 1 };
  s8 -> s10 [0, 65535] { R5080 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5080 += 1 };
  s11 -> s11 [0, 64] { R5080 += 1, R4994 += 1 };
  s11 -> s11 [0, 65535] { R5080 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R5080 += 1, R4994 += 1 };
  s11 -> s8 [65, 65] { R5080 += 1, R4994 += 1 };
  s11 -> s11 [66, 65535] { R5080 += 1, R4994 += 1 };
  s12 -> s12 [0, 65535] { R5080 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R5082 += 1, R4996 += 1 };
  s0 -> s2 [0, 65535] { R5082 += 1, R4995 += 1, R4996 += 1 };
  s0 -> s0 [0, 65535] { R5081 += 1, R5082 += 1 };
  s0 -> s3 [65, 65] { R5082 += 1, R4996 += 1 };
  s0 -> s4 [65, 65] { R5082 += 1, R4996 += 1 };
  s0 -> s1 [66, 65535] { R5082 += 1, R4996 += 1 };
  s1 -> s1 [0, 64] { R5082 += 1, R4996 += 1 };
  s1 -> s1 [0, 65535] { R5082 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R5082 += 1, R4996 += 1 };
  s1 -> s4 [65, 65] { R5082 += 1, R4996 += 1 };
  s1 -> s1 [66, 65535] { R5082 += 1, R4996 += 1 };
  s2 -> s1 [0, 64] { R5082 += 1, R4996 += 1 };
  s2 -> s2 [0, 65535] { R5082 += 1, R4995 += 1, R4996 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5082 += 1, R4996 += 1 };
  s2 -> s4 [65, 65] { R5082 += 1, R4996 += 1 };
  s2 -> s1 [66, 65535] { R5082 += 1, R4996 += 1 };
  s3 -> s3 [0, 65535] { R5082 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5082 += 1, R4996 += 1 };
  s4 -> s5 [0, 65535] { R5082 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5082 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s0 -> s2 [0, 64] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s0 -> s0 [0, 65535] { R5083 += 1, R5084 += 1 };
  s0 -> s3 [0, 65535] { R5084 += 1, R4997 += 1, R4998 += 1 };
  s0 -> s4 [65, 65] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s0 -> s5 [65, 65] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s0 -> s6 [65, 65] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s0 -> s7 [65, 65] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s0 -> s2 [66, 79] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s0 -> s1 [66, 65535] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s0 -> s8 [80, 80] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s0 -> s2 [81, 65535] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s1 -> s1 [0, 64] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s1 -> s2 [0, 64] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s1 -> s4 [65, 65] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s1 -> s5 [65, 65] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s1 -> s6 [65, 65] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s1 -> s7 [65, 65] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s1 -> s2 [66, 79] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s1 -> s1 [66, 65535] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s1 -> s8 [80, 80] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s1 -> s2 [81, 65535] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s2 -> s2 [0, 64] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s2 -> s4 [65, 65] { R5084 += 1, R4998 += 1 };
  s2 -> s5 [65, 65] { R5084 += 1, R4998 += 1 };
  s2 -> s2 [66, 79] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s2 -> s2 [66, 65535] { R5084 += 1, R4998 += 1 };
  s2 -> s8 [80, 80] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s2 -> s2 [81, 65535] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s3 -> s1 [0, 64] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s3 -> s2 [0, 64] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s3 -> s3 [0, 65535] { R5084 += 1, R4997 += 1, R4998 += 1 };
  s3 -> s4 [65, 65] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s3 -> s5 [65, 65] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s3 -> s6 [65, 65] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s3 -> s7 [65, 65] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s3 -> s2 [66, 79] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s3 -> s1 [66, 65535] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s3 -> s8 [80, 80] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s3 -> s2 [81, 65535] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s5 -> s5 [0, 79] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s5 -> s5 [0, 65535] { R5084 += 1, R4998 += 1 };
  s5 -> s10 [80, 80] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s5 -> s5 [81, 65535] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s7 -> s5 [0, 79] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s7 -> s7 [0, 65535] { R5084 += 1, R4998 += 1, R4933 += 1, R4934 += 1 };
  s7 -> s10 [80, 80] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s7 -> s5 [81, 65535] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s8 -> s8 [0, 64] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s8 -> s9 [0, 64] { R5084 += 1, R4998 += 1 };
  s8 -> s10 [65, 65] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s8 -> s11 [65, 65] { R5084 += 1, R4998 += 1 };
  s8 -> s12 [65, 65] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s8 -> s13 [65, 65] { R5084 += 1, R4998 += 1 };
  s8 -> s8 [66, 65535] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s8 -> s9 [66, 65535] { R5084 += 1, R4998 += 1 };
  s9 -> s9 [0, 64] { R5084 += 1, R4998 += 1 };
  s9 -> s9 [0, 65535] { R5084 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s11 [65, 65] { R5084 += 1, R4998 += 1 };
  s9 -> s13 [65, 65] { R5084 += 1, R4998 += 1 };
  s9 -> s9 [66, 65535] { R5084 += 1, R4998 += 1 };
  s10 -> s10 [0, 65535] { R5084 += 1, R4998 += 1, R4934 += 1, R4935 += 1 };
  s10 -> s11 [0, 65535] { R5084 += 1, R4998 += 1 };
  s11 -> s11 [0, 65535] { R5084 += 1, R4998 += 1 };
  s11 -> s14 [0, 65535];
  s11 -> s15 [0, 65535] { R5084 += 1 };
  s13 -> s13 [0, 65535] { R5084 += 1 };
  s13 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R5084 += 1 };
  accepting s13, s9, s14, s15, s11;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R5 = R4962 && R6 = R5084 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R61 = 0 && R62 = R4962 && R63 = 0 && R64 = R4962 && R65 = 0 && R66 = R4962 && R67 = 0 && R68 = R5084 && R69 = 0 && R70 = R5084 && R71 = 0 && R72 = R5084 && R88 + R87 + -1*R100 + -1*R98 = 0 && R99 + R97 = 0 && R4939 = 0 && R4940 = R4962 && R4941 = 0 && R4942 = R4962 && R4943 = 0 && R4944 = R4962 && R4945 = 0 && R4946 = R4962 && R4947 = 0 && R4948 = R4962 && R4949 = 0 && R4950 = R4962 && R4951 = 0 && R4952 = R4962 && R4953 = 0 && R4954 = R4962 && R4955 = 0 && R4956 = R4962 && R4957 = 0 && R4958 = R4962 && R4959 = 0 && R4960 = R4962 && R4961 = 0 && R4963 = 0 && R4964 = R5084 && R4965 = 0 && R4966 = R5084 && R4967 = 0 && R4968 = R5084 && R4969 = 0 && R4970 = R5084 && R4971 = 0 && R4972 = R5084 && R4973 = 0 && R4974 = R5084 && R4975 = 0 && R4976 = R5084 && R4979 = 0 && R4980 = 0 && R4991 = 0 && R4992 = 0 && R4993 = 0 && R4994 = 0 && R4997 = 0 && R4998 = 0 && R5013 = 10 && R5014 = R5084 && R5015 = 10 && R5016 = R5084 && R5017 = 10 && R5018 = R5084 && R5019 = 10 && R5020 = R5084 && R5021 = 10 && R5022 = R5084 && R5023 = 10 && R5024 = R5084 && R5025 = 10 && R5026 = R5084 && R5027 = 10 && R5028 = R5084 && R5029 = 10 && R5030 = R5084 && R5031 = 10 && R5032 = R5084 && R5033 = 10 && R5034 = R5084 && R5035 = 10 && R5036 = R5084 && R5037 = 10 && R5038 = R5084 && R5039 = 10 && R5040 = R5084 && R5041 = 10 && R5042 = R5084 && R5043 = 10 && R5044 = R5084 && R5045 = 10 && R5046 = R5084 && R5047 = 10 && R5048 = R5084 && R5049 = 10 && R5050 = R5084 && R5051 = 10 && R5052 = R5084 && R5053 = 10 && R5054 = R5084 && R5055 = 10 && R5056 = R5084 && R5057 = 10 && R5058 = R5084 && R5059 = 10 && R5060 = R5084 && R5061 = 10 && R5062 = R5084 && R5063 = 10 && R5064 = R5084 && R5065 = 10 && R5066 = R5084 && R5067 = 10 && R5068 = R5084 && R5069 = 10 && R5070 = R5084 && R5071 = 10 && R5072 = R5084 && R5073 = 10 && R5074 = R5084 && R5075 = 10 && R5076 = R5084 && R5077 = 10 && R5078 = R5084 && R5079 = 10 && R5080 = R5084 && R5081 = 10 && R5082 = R5084 && R5083 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R2786 + R2783 + R4938 + R4935 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R90 + R89 < 1 && -1*R100 + -1*R98 < 1 && -1*R460 + -1*R459 < 1 && R462 + R461 < 1 && 0 < R4962 && 9 < R5084 && (R96 + R93 != 0 || ((R94 + R91 != 0 || R95 + R92 + -1*R100 + -1*R98 = 0 || R100 + R98 < 1) && (R94 + R91 = 0 || R100 + R98 < 1))) && (R460 + R459 != 0 || R472 + R469 = 0 || (R465 + R463 = 0 && R466 + R464 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R470 + R467 = 0 && R471 + R468 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R475 + R473 = 0 && R476 + R474 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R2784 + R2781 = 0 && R2785 + R2782 = 0)) && (R465 + R463 != 0 || R460 + R459 + -1*R466 + -1*R464 = 0 || R460 + R459 < 1) && (R470 + R467 != 0 || R460 + R459 + -1*R471 + -1*R468 = 0 || R460 + R459 < 1) && (R475 + R473 != 0 || R460 + R459 + -1*R476 + -1*R474 = 0 || R460 + R459 < 1) && (R2784 + R2781 != 0 || R460 + R459 + -1*R2785 + -1*R2782 = 0 || R460 + R459 < 1) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R33 = 0 || (R81 = 0 && R82 = 0)) && (R34 = 0 || (R4977 = 0 && R4978 = 0)) && (R34 = 0 || (R4981 = 0 && R4982 = 0)) && (R34 = 0 || (R4983 = 0 && R4984 = 0)) && (R34 = 0 || (R4985 = 0 && R4986 = 0)) && (R34 = 0 || (R4987 = 0 && R4988 = 0)) && (R34 = 0 || (R4989 = 0 && R4990 = 0)) && (R34 = 0 || (R4995 = 0 && R4996 = 0)) && (R37 = 0 || (R4999 = 0 && R5000 = 0)) && (R37 = 0 || (R5001 = 0 && R5002 = 0)) && (R37 = 0 || (R5003 = 0 && R5004 = 0)) && (R37 = 0 || (R5005 = 0 && R5006 = 0)) && (R37 = 0 || (R5007 = 0 && R5008 = 0)) && (R37 = 0 || (R5009 = 0 && R5010 = 0)) && (R37 = 0 || (R5011 = 0 && R5012 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R38 = 0 || (R85 = 0 && R86 = 0)) && (R96 + R93 = 0 || (R94 + R91 = 0 && R95 + R92 + -1*R100 + -1*R98 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R465 + R463 = 0 || R460 + R459 < 1) && (R470 + R467 = 0 || R460 + R459 < 1) && (R475 + R473 = 0 || R460 + R459 < 1) && (R2784 + R2781 = 0 || R460 + R459 < 1) && (R4324 + R4321 = 0 || (R4322 + R4319 = 0 && R4323 + R4320 = 0)) && (R4324 + R4321 = 0 || (R4936 + R4933 = 0 && R4937 + R4934 = 0));
// End of Parikh automata intersection problem
