// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R14, R15, R18, R2015, R2016, R2017, R2018, R2019, R2020, R2021, R2022, R2023, R2024, R2025, R2026, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R2047, R2048, R2049, R2050, R2051, R2052, R2053, R2054, R2055, R2056, R2057, R2058, R2059, R2060, R2061, R2062, R2063, R2064, R2065, R2066, R2067, R2068, R2069, R2070, R2071, R2072, R2073, R2074, R2075, R2076, R2077, R2078, R2079, R2080, R2081, R2082, R2083, R2084, R2085, R2086, R2087, R2088, R2089, R2090, R2091, R2092, R2093, R2094, R2095, R2096, R2097, R2098, R2099, R21, R2100, R2101, R2102, R2103, R2104, R2105, R2106, R2107, R2108, R2109, R2110, R2111, R2112, R2113, R2114, R2115, R2116, R2117, R2118, R2119, R2120, R2121, R2122, R2123, R2124, R2125, R2126, R2127, R2128, R2129, R2130, R2131, R2132, R2133, R2134, R2135, R2136, R2137, R2138, R2139, R2140, R2141, R2142, R2143, R2144, R2145, R2146, R2147, R2148, R2149, R2150, R2151, R2152, R2153, R2154, R2155, R2156, R2157, R2158, R2159, R2160, R2161, R2162, R2163, R2164, R2165, R2166, R2167, R2168, R2169, R2170, R2171, R2172, R24, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R459, R46, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R476, R477, R478, R479, R480, R481, R482, R5, R6, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R68 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R70 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s2 [108, 108] { R70 += 1 };
  s0 -> s1 [109, 65535] { R70 += 1 };
  s1 -> s1 [0, 65535] { R70 += 1 };
  s1 -> s11 [0, 65535];
  s2 -> s1 [0, 110] { R70 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R70 += 1 };
  s2 -> s1 [112, 65535] { R70 += 1 };
  s3 -> s1 [0, 98] { R70 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R70 += 1 };
  s3 -> s1 [100, 65535] { R70 += 1 };
  s4 -> s1 [0, 96] { R70 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R70 += 1 };
  s4 -> s1 [98, 65535] { R70 += 1 };
  s5 -> s1 [0, 107] { R70 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R70 += 1 };
  s5 -> s1 [109, 65535] { R70 += 1 };
  s6 -> s1 [0, 103] { R70 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R70 += 1 };
  s6 -> s1 [105, 65535] { R70 += 1 };
  s7 -> s1 [0, 110] { R70 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R70 += 1 };
  s7 -> s1 [112, 65535] { R70 += 1 };
  s8 -> s1 [0, 114] { R70 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R70 += 1 };
  s8 -> s1 [116, 65535] { R70 += 1 };
  s9 -> s1 [0, 115] { R70 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R70 += 1 };
  s9 -> s1 [117, 65535] { R70 += 1 };
  s10 -> s1 [0, 65535] { R70 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s1 [0, 65535] { R72 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R72 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R86 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s2 [66, 66] { R86 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R86 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R86 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R86 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R86 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R86 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R86 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R86 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R2052 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R2051 += 1, R2052 += 1 };
  s1 -> s1 [0, 65535] { R2052 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2054 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R2053 += 1, R2054 += 1 };
  s1 -> s1 [0, 65535] { R2054 += 1, R88 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R2056 += 1 };
  s0 -> s2 [0, 65535] { R2056 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R2055 += 1, R2056 += 1 };
  s0 -> s1 [78, 65535] { R2056 += 1 };
  s1 -> s1 [0, 76] { R2056 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R2056 += 1 };
  s2 -> s1 [0, 76] { R2056 += 1 };
  s2 -> s2 [0, 65535] { R2056 += 1, R90 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R2056 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R2058 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R2057 += 1, R2058 += 1 };
  s0 -> s2 [0, 65535] { R2058 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R2058 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2058 += 1, R95 += 1, R96 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2058 += 1 };
  s2 -> s2 [0, 65535] { R2058 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2058 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2060 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R2059 += 1, R2060 += 1 };
  s0 -> s2 [108, 108] { R2060 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R2060 += 1, R99 += 1, R100 += 1 };
  s1 -> s2 [108, 108] { R2060 += 1, R100 += 1 };
  s2 -> s3 [111, 111] { R2060 += 1, R100 += 1 };
  s3 -> s4 [99, 99] { R2060 += 1, R100 += 1 };
  s4 -> s5 [97, 97] { R2060 += 1, R100 += 1 };
  s5 -> s6 [108, 108] { R2060 += 1, R100 += 1 };
  s6 -> s7 [104, 104] { R2060 += 1, R100 += 1 };
  s7 -> s8 [111, 111] { R2060 += 1, R100 += 1 };
  s8 -> s9 [115, 115] { R2060 += 1, R100 += 1 };
  s9 -> s10 [116, 116] { R2060 += 1, R100 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2060 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2062 += 1, R104 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R2061 += 1, R2062 += 1 };
  s0 -> s2 [0, 65535] { R2062 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2062 += 1, R104 += 1, R105 += 1 };
  s1 -> s2 [0, 65535] { R2062 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2062 += 1 };
  s2 -> s2 [0, 65535] { R2062 += 1, R105 += 1, R106 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2062 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2063 += 1, R2064 += 1 };
  s0 -> s1 [0, 65535] { R2064 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2064 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2088 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R2087 += 1, R2088 += 1 };
  s1 -> s1 [0, 65535] { R2088 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R2090 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R2089 += 1, R2090 += 1 };
  s0 -> s2 [65, 65] { R2090 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R2090 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R2090 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R2090 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2090 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R2090 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R2090 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2090 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2092 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R2091 += 1, R2092 += 1 };
  s0 -> s2 [65, 65] { R2092 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R2092 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R2092 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R2092 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2092 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R2092 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R2092 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2092 += 1, R89 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2094 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R2093 += 1, R2094 += 1 };
  s0 -> s2 [65, 65] { R2094 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R2094 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R2094 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R2094 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2094 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R2094 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R2094 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2094 += 1, R91 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2096 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R2095 += 1, R2096 += 1 };
  s0 -> s2 [65, 65] { R2096 += 1, R97 += 1, R98 += 1 };
  s0 -> s3 [65, 65] { R2096 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [66, 65535] { R2096 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 64] { R2096 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2096 += 1, R97 += 1, R98 += 1 };
  s1 -> s3 [65, 65] { R2096 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [66, 65535] { R2096 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2096 += 1, R97 += 1, R98 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2098 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R2097 += 1, R2098 += 1 };
  s0 -> s2 [65, 65] { R2098 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R2098 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R2098 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R2098 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2098 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R2098 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R2098 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2098 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2100 += 1 };
  s0 -> s0 [0, 65535] { R2099 += 1, R2100 += 1 };
  s0 -> s2 [65, 65] { R2100 += 1 };
  s0 -> s3 [65, 65] { R2100 += 1 };
  s0 -> s1 [66, 65535] { R2100 += 1 };
  s1 -> s1 [0, 64] { R2100 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2100 += 1 };
  s1 -> s3 [65, 65] { R2100 += 1 };
  s1 -> s1 [66, 65535] { R2100 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2100 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R2102 += 1 };
  s0 -> s0 [0, 65535] { R2101 += 1, R2102 += 1 };
  s0 -> s1 [45, 45] { R2102 += 1 };
  s0 -> s2 [46, 46] { R2102 += 1 };
  s0 -> s1 [48, 62] { R2102 += 1 };
  s0 -> s3 [65, 65] { R2102 += 1 };
  s0 -> s1 [66, 65535] { R2102 += 1 };
  s1 -> s1 [0, 43] { R2102 += 1 };
  s1 -> s1 [45, 45] { R2102 += 1 };
  s1 -> s2 [46, 46] { R2102 += 1 };
  s1 -> s1 [48, 62] { R2102 += 1 };
  s1 -> s3 [65, 65] { R2102 += 1 };
  s1 -> s1 [66, 65535] { R2102 += 1 };
  s2 -> s1 [0, 43] { R2102 += 1 };
  s2 -> s1 [45, 45] { R2102 += 1 };
  s2 -> s2 [46, 46] { R2102 += 1 };
  s2 -> s1 [48, 62] { R2102 += 1 };
  s2 -> s3 [65, 65] { R2102 += 1 };
  s2 -> s1 [66, 114] { R2102 += 1 };
  s2 -> s8 [115, 115] { R2102 += 1 };
  s2 -> s1 [116, 65535] { R2102 += 1 };
  s3 -> s3 [0, 43] { R2102 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2102 += 1 };
  s3 -> s4 [46, 46] { R2102 += 1 };
  s3 -> s3 [48, 62] { R2102 += 1 };
  s3 -> s3 [65, 65535] { R2102 += 1 };
  s4 -> s3 [0, 43] { R2102 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2102 += 1 };
  s4 -> s4 [46, 46] { R2102 += 1 };
  s4 -> s3 [48, 62] { R2102 += 1 };
  s4 -> s3 [65, 114] { R2102 += 1 };
  s4 -> s5 [115, 115] { R2102 += 1 };
  s4 -> s3 [116, 65535] { R2102 += 1 };
  s5 -> s3 [0, 43] { R2102 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2102 += 1 };
  s5 -> s4 [46, 46] { R2102 += 1 };
  s5 -> s3 [48, 62] { R2102 += 1 };
  s5 -> s3 [65, 110] { R2102 += 1 };
  s5 -> s6 [111, 111] { R2102 += 1 };
  s5 -> s3 [112, 65535] { R2102 += 1 };
  s6 -> s3 [0, 43] { R2102 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2102 += 1 };
  s6 -> s4 [46, 46] { R2102 += 1 };
  s6 -> s3 [48, 62] { R2102 += 1 };
  s6 -> s3 [65, 98] { R2102 += 1 };
  s6 -> s7 [99, 99] { R2102 += 1 };
  s6 -> s3 [100, 65535] { R2102 += 1 };
  s7 -> s3 [0, 43] { R2102 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2102 += 1 };
  s7 -> s4 [46, 46] { R2102 += 1 };
  s7 -> s3 [48, 62] { R2102 += 1 };
  s7 -> s3 [65, 106] { R2102 += 1 };
  s7 -> s3 [108, 65535] { R2102 += 1 };
  s8 -> s1 [0, 43] { R2102 += 1 };
  s8 -> s1 [45, 45] { R2102 += 1 };
  s8 -> s2 [46, 46] { R2102 += 1 };
  s8 -> s1 [48, 62] { R2102 += 1 };
  s8 -> s3 [65, 65] { R2102 += 1 };
  s8 -> s1 [66, 110] { R2102 += 1 };
  s8 -> s9 [111, 111] { R2102 += 1 };
  s8 -> s1 [112, 65535] { R2102 += 1 };
  s9 -> s1 [0, 43] { R2102 += 1 };
  s9 -> s1 [45, 45] { R2102 += 1 };
  s9 -> s2 [46, 46] { R2102 += 1 };
  s9 -> s1 [48, 62] { R2102 += 1 };
  s9 -> s3 [65, 65] { R2102 += 1 };
  s9 -> s1 [66, 98] { R2102 += 1 };
  s9 -> s10 [99, 99] { R2102 += 1 };
  s9 -> s1 [100, 65535] { R2102 += 1 };
  s10 -> s1 [0, 43] { R2102 += 1 };
  s10 -> s1 [45, 45] { R2102 += 1 };
  s10 -> s2 [46, 46] { R2102 += 1 };
  s10 -> s1 [48, 62] { R2102 += 1 };
  s10 -> s3 [65, 65] { R2102 += 1 };
  s10 -> s1 [66, 106] { R2102 += 1 };
  s10 -> s1 [108, 65535] { R2102 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R2104 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2103 += 1, R2104 += 1 };
  s1 -> s1 [0, 65535] { R2104 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R2106 += 1 };
  s0 -> s2 [0, 65535] { R2106 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R2105 += 1, R2106 += 1 };
  s0 -> s3 [58, 58] { R2106 += 1 };
  s0 -> s1 [59, 65535] { R2106 += 1 };
  s1 -> s1 [0, 57] { R2106 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2106 += 1 };
  s1 -> s1 [59, 65535] { R2106 += 1 };
  s2 -> s1 [0, 57] { R2106 += 1 };
  s2 -> s2 [0, 65535] { R2106 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2106 += 1 };
  s2 -> s1 [59, 65535] { R2106 += 1 };
  s3 -> s3 [0, 65535] { R2106 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R2108 += 1 };
  s0 -> s0 [0, 65535] { R2107 += 1, R2108 += 1 };
  s0 -> s2 [0, 65535] { R2108 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R2108 += 1 };
  s0 -> s1 [44, 65535] { R2108 += 1 };
  s1 -> s1 [0, 42] { R2108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R2108 += 1 };
  s1 -> s1 [44, 65535] { R2108 += 1 };
  s2 -> s1 [0, 42] { R2108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2108 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R2108 += 1 };
  s2 -> s1 [44, 65535] { R2108 += 1 };
  s3 -> s3 [0, 65535] { R2108 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R2110 += 1 };
  s0 -> s0 [0, 65535] { R2109 += 1, R2110 += 1 };
  s0 -> s2 [0, 65535] { R2110 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R2110 += 1 };
  s0 -> s1 [66, 65535] { R2110 += 1 };
  s1 -> s1 [0, 64] { R2110 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2110 += 1 };
  s1 -> s1 [66, 65535] { R2110 += 1 };
  s2 -> s1 [0, 64] { R2110 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2110 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R2110 += 1 };
  s2 -> s1 [66, 65535] { R2110 += 1 };
  s3 -> s3 [0, 65535] { R2110 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R2112 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R2112 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R2111 += 1, R2112 += 1 };
  s0 -> s3 [91, 91] { R2112 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R2112 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R2112 += 1 };
  s1 -> s1 [0, 65535] { R2112 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2112 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R2112 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2112 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R2112 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R2112 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2112 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R2114 += 1, R42 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R2114 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R2113 += 1, R2114 += 1 };
  s1 -> s4 [0, 65535] { R2114 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2114 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2114 += 1, R42 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R2114 += 1, R41 += 1, R42 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2114 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 65535] { R2116 += 1, R62 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R2116 += 1, R61 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R2115 += 1, R2116 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2116 += 1 };
  s1 -> s1 [0, 65535] { R2116 += 1, R62 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2116 += 1, R62 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R2116 += 1, R61 += 1, R62 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2116 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R2118 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R2118 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R2117 += 1, R2118 += 1 };
  s0 -> s3 [108, 108] { R2118 += 1, R64 += 1 };
  s0 -> s1 [109, 65535] { R2118 += 1, R64 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2118 += 1, R64 += 1 };
  s1 -> s13 [0, 65535] { R2118 += 1 };
  s2 -> s1 [0, 107] { R2118 += 1, R64 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2118 += 1, R63 += 1, R64 += 1 };
  s2 -> s3 [108, 108] { R2118 += 1, R64 += 1 };
  s2 -> s1 [109, 65535] { R2118 += 1, R64 += 1 };
  s3 -> s1 [0, 110] { R2118 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R2118 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R2118 += 1, R64 += 1 };
  s3 -> s1 [112, 65535] { R2118 += 1, R64 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R2118 += 1, R64 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2118 += 1 };
  s5 -> s6 [99, 99] { R2118 += 1, R64 += 1 };
  s5 -> s1 [100, 65535] { R2118 += 1, R64 += 1 };
  s6 -> s1 [0, 96] { R2118 += 1, R64 += 1 };
  s6 -> s6 [0, 65535] { R2118 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R2118 += 1, R64 += 1 };
  s6 -> s1 [98, 65535] { R2118 += 1, R64 += 1 };
  s7 -> s1 [0, 107] { R2118 += 1, R64 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R2118 += 1 };
  s7 -> s8 [108, 108] { R2118 += 1, R64 += 1 };
  s7 -> s1 [109, 65535] { R2118 += 1, R64 += 1 };
  s8 -> s1 [0, 103] { R2118 += 1, R64 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R2118 += 1 };
  s8 -> s9 [104, 104] { R2118 += 1, R64 += 1 };
  s8 -> s1 [105, 65535] { R2118 += 1, R64 += 1 };
  s9 -> s1 [0, 110] { R2118 += 1, R64 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R2118 += 1 };
  s9 -> s10 [111, 111] { R2118 += 1, R64 += 1 };
  s9 -> s1 [112, 65535] { R2118 += 1, R64 += 1 };
  s10 -> s1 [0, 114] { R2118 += 1, R64 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R2118 += 1 };
  s10 -> s11 [115, 115] { R2118 += 1, R64 += 1 };
  s10 -> s1 [116, 65535] { R2118 += 1, R64 += 1 };
  s11 -> s1 [0, 115] { R2118 += 1, R64 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R2118 += 1 };
  s11 -> s12 [116, 116] { R2118 += 1, R64 += 1 };
  s11 -> s1 [117, 65535] { R2118 += 1, R64 += 1 };
  s12 -> s1 [0, 65535] { R2118 += 1, R64 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R2118 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s0 [0, 65535] { R2119 += 1, R2120 += 1 };
  s0 -> s1 [0, 65535] { R2120 += 1, R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R2120 += 1, R66 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R2120 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2120 += 1, R66 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2120 += 1 };
  s2 -> s2 [0, 65535] { R2120 += 1, R66 += 1, R44 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2120 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R2121 += 1, R2122 += 1 };
  s0 -> s1 [0, 65535] { R2122 += 1, R80 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R2122 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535] { R2122 += 1, R80 += 1, R33 += 1 };
  s1 -> s4 [0, 65535] { R2122 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2122 += 1, R80 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R2122 += 1, R79 += 1, R80 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2122 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 65535] { R2124 += 1 };
  s0 -> s0 [0, 65535] { R2123 += 1, R2124 += 1 };
  s1 -> s1 [0, 65535] { R2124 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R2126 += 1, R82 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2125 += 1, R2126 += 1 };
  s0 -> s2 [0, 65535] { R2126 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [43, 43] { R2126 += 1, R82 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R2126 += 1, R82 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R2126 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R2126 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R2126 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R2126 += 1, R82 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R2126 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R2126 += 1, R82 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R2126 += 1, R82 += 1, R43 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2126 += 1, R81 += 1, R82 += 1 };
  s2 -> s3 [43, 43] { R2126 += 1, R82 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R2126 += 1, R82 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R2126 += 1, R82 += 1, R43 += 1 };
  s3 -> s6 [0, 65535] { R2126 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2126 += 1, R82 += 1, R43 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2126 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2126 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R2128 += 1, R2028 += 1 };
  s0 -> s0 [0, 65535] { R2127 += 1, R2128 += 1 };
  s0 -> s2 [0, 65535] { R2128 += 1, R2027 += 1, R2028 += 1 };
  s0 -> s1 [66, 65535] { R2128 += 1, R2028 += 1 };
  s1 -> s1 [0, 64] { R2128 += 1, R2028 += 1 };
  s1 -> s1 [0, 65535] { R2128 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R2128 += 1, R2028 += 1 };
  s2 -> s1 [0, 64] { R2128 += 1, R2028 += 1 };
  s2 -> s2 [0, 65535] { R2128 += 1, R2027 += 1, R2028 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2128 += 1, R2028 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R2130 += 1, R2030 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R2129 += 1, R2130 += 1 };
  s0 -> s2 [0, 65535] { R2130 += 1, R2029 += 1, R2030 += 1 };
  s1 -> s4 [0, 65535] { R2130 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2130 += 1, R2030 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2130 += 1, R2030 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R2130 += 1, R2029 += 1, R2030 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2130 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R2132 += 1, R2032 += 1 };
  s0 -> s2 [0, 65535] { R2132 += 1, R2031 += 1, R2032 += 1 };
  s0 -> s0 [0, 65535] { R2131 += 1, R2132 += 1 };
  s0 -> s1 [80, 65535] { R2132 += 1, R2032 += 1 };
  s1 -> s1 [0, 65] { R2132 += 1, R2032 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2132 += 1 };
  s1 -> s1 [80, 65535] { R2132 += 1, R2032 += 1 };
  s2 -> s1 [0, 65] { R2132 += 1, R2032 += 1 };
  s2 -> s2 [0, 65535] { R2132 += 1, R2031 += 1, R2032 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R2132 += 1, R2032 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R2133 += 1, R2134 += 1 };
  s0 -> s1 [0, 65535] { R2134 += 1, R2033 += 1, R2034 += 1 };
  s0 -> s2 [0, 65535] { R2134 += 1, R2034 += 1, R460 += 1 };
  s1 -> s1 [0, 65535] { R2134 += 1, R2033 += 1, R2034 += 1 };
  s1 -> s2 [0, 65535] { R2134 += 1, R2034 += 1, R460 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2134 += 1, R2034 += 1, R460 += 1 };
  s2 -> s3 [0, 65535] { R2134 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2134 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R2136 += 1, R2036 += 1 };
  s0 -> s2 [0, 65535] { R2136 += 1, R2035 += 1, R2036 += 1 };
  s0 -> s3 [0, 65535] { R2136 += 1, R2036 += 1, R462 += 1 };
  s0 -> s0 [0, 65535] { R2135 += 1, R2136 += 1 };
  s0 -> s1 [81, 65535] { R2136 += 1, R2036 += 1 };
  s1 -> s1 [0, 79] { R2136 += 1, R2036 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2136 += 1 };
  s1 -> s1 [81, 65535] { R2136 += 1, R2036 += 1 };
  s2 -> s1 [0, 79] { R2136 += 1, R2036 += 1 };
  s2 -> s2 [0, 65535] { R2136 += 1, R2035 += 1, R2036 += 1 };
  s2 -> s3 [0, 65535] { R2136 += 1, R2036 += 1, R462 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R2136 += 1, R2036 += 1 };
  s3 -> s1 [0, 79] { R2136 += 1, R2036 += 1 };
  s3 -> s3 [0, 65535] { R2136 += 1, R2036 += 1, R462 += 1 };
  s3 -> s4 [0, 65535] { R2136 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R2136 += 1, R2036 += 1 };
  s4 -> s4 [0, 65535] { R2136 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R2138 += 1, R2038 += 1, R466 += 1 };
  s0 -> s2 [0, 65535] { R2138 += 1, R2037 += 1, R2038 += 1 };
  s0 -> s3 [0, 65535] { R2138 += 1, R2038 += 1, R465 += 1, R466 += 1 };
  s0 -> s0 [0, 65535] { R2137 += 1, R2138 += 1 };
  s0 -> s1 [81, 65535] { R2138 += 1, R2038 += 1, R466 += 1 };
  s1 -> s1 [0, 79] { R2138 += 1, R2038 += 1, R466 += 1 };
  s1 -> s1 [0, 65535] { R2138 += 1, R2038 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2138 += 1 };
  s1 -> s1 [81, 65535] { R2138 += 1, R2038 += 1, R466 += 1 };
  s2 -> s1 [0, 79] { R2138 += 1, R2038 += 1, R466 += 1 };
  s2 -> s2 [0, 65535] { R2138 += 1, R2037 += 1, R2038 += 1 };
  s2 -> s3 [0, 65535] { R2138 += 1, R2038 += 1, R465 += 1, R466 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R2138 += 1, R2038 += 1, R466 += 1 };
  s3 -> s1 [0, 79] { R2138 += 1, R2038 += 1, R466 += 1 };
  s3 -> s3 [0, 65535] { R2138 += 1, R2038 += 1, R465 += 1, R466 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2138 += 1 };
  s3 -> s1 [81, 65535] { R2138 += 1, R2038 += 1, R466 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2138 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R2140 += 1, R2040 += 1, R470 += 1, R471 += 1 };
  s0 -> s0 [0, 65535] { R2139 += 1, R2140 += 1 };
  s0 -> s2 [0, 65535] { R2140 += 1, R2039 += 1, R2040 += 1 };
  s0 -> s3 [0, 65535] { R2140 += 1, R2040 += 1, R471 += 1, R472 += 1 };
  s1 -> s1 [0, 65535] { R2140 += 1, R2040 += 1, R470 += 1, R471 += 1 };
  s1 -> s5 [0, 65535] { R2140 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R2140 += 1, R2040 += 1, R471 += 1, R472 += 1 };
  s2 -> s1 [0, 65535] { R2140 += 1, R2040 += 1, R470 += 1, R471 += 1 };
  s2 -> s2 [0, 65535] { R2140 += 1, R2039 += 1, R2040 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2140 += 1, R2040 += 1, R471 += 1, R472 += 1 };
  s3 -> s4 [0, 65535] { R2140 += 1, R2040 += 1 };
  s3 -> s5 [0, 65535] { R2140 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2140 += 1, R2040 += 1, R471 += 1, R472 += 1 };
  s4 -> s4 [0, 65535] { R2140 += 1, R2040 += 1 };
  s4 -> s5 [0, 65535] { R2140 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2140 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s0 -> s2 [0, 65535] { R2142 += 1, R2042 += 1, R475 += 1, R476 += 1 };
  s0 -> s3 [0, 65535] { R2142 += 1, R2041 += 1, R2042 += 1 };
  s0 -> s0 [0, 65535] { R2141 += 1, R2142 += 1 };
  s0 -> s1 [91, 107] { R2142 += 1, R2042 += 1, R476 += 1 };
  s0 -> s4 [108, 108] { R2142 += 1, R2042 += 1, R476 += 1 };
  s0 -> s1 [109, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s1 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2142 += 1, R2042 += 1 };
  s1 -> s6 [0, 65535] { R2142 += 1 };
  s1 -> s1 [91, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s2 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s2 -> s2 [0, 65535] { R2142 += 1, R2042 += 1, R475 += 1, R476 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2142 += 1 };
  s2 -> s1 [91, 107] { R2142 += 1, R2042 += 1, R476 += 1 };
  s2 -> s4 [108, 108] { R2142 += 1, R2042 += 1, R476 += 1 };
  s2 -> s1 [109, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s3 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s3 -> s2 [0, 65535] { R2142 += 1, R2042 += 1, R475 += 1, R476 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2142 += 1, R2041 += 1, R2042 += 1 };
  s3 -> s1 [91, 107] { R2142 += 1, R2042 += 1, R476 += 1 };
  s3 -> s4 [108, 108] { R2142 += 1, R2042 += 1, R476 += 1 };
  s3 -> s1 [109, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s4 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2142 += 1, R2042 += 1 };
  s4 -> s6 [0, 65535] { R2142 += 1 };
  s4 -> s1 [91, 110] { R2142 += 1, R2042 += 1, R476 += 1 };
  s4 -> s7 [111, 111] { R2142 += 1, R2042 += 1, R476 += 1 };
  s4 -> s1 [112, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2142 += 1 };
  s7 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2142 += 1 };
  s7 -> s7 [0, 65535] { R2142 += 1, R2042 += 1 };
  s7 -> s1 [91, 98] { R2142 += 1, R2042 += 1, R476 += 1 };
  s7 -> s8 [99, 99] { R2142 += 1, R2042 += 1, R476 += 1 };
  s7 -> s1 [100, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s8 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R2142 += 1 };
  s8 -> s8 [0, 65535] { R2142 += 1, R2042 += 1 };
  s8 -> s1 [91, 96] { R2142 += 1, R2042 += 1, R476 += 1 };
  s8 -> s9 [97, 97] { R2142 += 1, R2042 += 1, R476 += 1 };
  s8 -> s1 [98, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s9 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R2142 += 1, R2042 += 1 };
  s9 -> s6 [0, 65535] { R2142 += 1 };
  s9 -> s1 [91, 107] { R2142 += 1, R2042 += 1, R476 += 1 };
  s9 -> s10 [108, 108] { R2142 += 1, R2042 += 1, R476 += 1 };
  s9 -> s1 [109, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s10 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R2142 += 1, R2042 += 1 };
  s10 -> s6 [0, 65535] { R2142 += 1 };
  s10 -> s1 [91, 103] { R2142 += 1, R2042 += 1, R476 += 1 };
  s10 -> s11 [104, 104] { R2142 += 1, R2042 += 1, R476 += 1 };
  s10 -> s1 [105, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s11 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R2142 += 1 };
  s11 -> s11 [0, 65535] { R2142 += 1, R2042 += 1 };
  s11 -> s1 [91, 110] { R2142 += 1, R2042 += 1, R476 += 1 };
  s11 -> s12 [111, 111] { R2142 += 1, R2042 += 1, R476 += 1 };
  s11 -> s1 [112, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s12 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s12 -> s12 [0, 65535] { R2142 += 1, R2042 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R2142 += 1 };
  s12 -> s1 [91, 114] { R2142 += 1, R2042 += 1, R476 += 1 };
  s12 -> s13 [115, 115] { R2142 += 1, R2042 += 1, R476 += 1 };
  s12 -> s1 [116, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s13 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R2142 += 1 };
  s13 -> s13 [0, 65535] { R2142 += 1, R2042 += 1 };
  s13 -> s1 [91, 115] { R2142 += 1, R2042 += 1, R476 += 1 };
  s13 -> s14 [116, 116] { R2142 += 1, R2042 += 1, R476 += 1 };
  s13 -> s1 [117, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  s14 -> s1 [0, 80] { R2142 += 1, R2042 += 1, R476 += 1 };
  s14 -> s1 [91, 65535] { R2142 += 1, R2042 += 1, R476 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R2144 += 1, R2044 += 1, R480 += 1, R481 += 1 };
  s0 -> s2 [0, 65535] { R2144 += 1, R2044 += 1, R481 += 1, R482 += 1 };
  s0 -> s3 [0, 65535] { R2144 += 1, R2043 += 1, R2044 += 1 };
  s0 -> s0 [0, 65535] { R2143 += 1, R2144 += 1 };
  s1 -> s1 [0, 65535] { R2144 += 1, R2044 += 1, R480 += 1, R481 += 1 };
  s1 -> s5 [0, 65535] { R2144 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2144 += 1, R2044 += 1, R481 += 1, R482 += 1 };
  s2 -> s5 [0, 65535] { R2144 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2144 += 1, R2044 += 1, R481 += 1, R482 += 1 };
  s2 -> s6 [0, 65535] { R2144 += 1, R2044 += 1 };
  s3 -> s1 [0, 65535] { R2144 += 1, R2044 += 1, R480 += 1, R481 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2144 += 1, R2044 += 1, R481 += 1, R482 += 1 };
  s3 -> s3 [0, 65535] { R2144 += 1, R2043 += 1, R2044 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2144 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2144 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2144 += 1, R2044 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R2146 += 1, R2046 += 1 };
  s0 -> s2 [0, 65535] { R2146 += 1, R2045 += 1, R2046 += 1 };
  s0 -> s0 [0, 65535] { R2145 += 1, R2146 += 1 };
  s1 -> s1 [0, 65535] { R2146 += 1, R2046 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2146 += 1 };
  s2 -> s1 [0, 65535] { R2146 += 1, R2046 += 1 };
  s2 -> s2 [0, 65535] { R2146 += 1, R2045 += 1, R2046 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2146 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R2148 += 1, R2048 += 1 };
  s0 -> s0 [0, 65535] { R2147 += 1, R2148 += 1 };
  s0 -> s2 [0, 65535] { R2148 += 1, R2047 += 1, R2048 += 1 };
  s1 -> s1 [0, 65535] { R2148 += 1, R2048 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2148 += 1 };
  s2 -> s1 [0, 65535] { R2148 += 1, R2048 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2148 += 1, R2047 += 1, R2048 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2148 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 79] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s0 -> s2 [0, 65535] { R2150 += 1, R2049 += 1, R2050 += 1 };
  s0 -> s0 [0, 65535] { R2149 += 1, R2150 += 1 };
  s0 -> s3 [0, 65535] { R2150 += 1, R2050 += 1, R2024 += 1, R2025 += 1 };
  s0 -> s4 [80, 80] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s0 -> s5 [80, 80] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s0 -> s1 [81, 65535] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s1 -> s1 [0, 79] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s1 -> s1 [0, 65535] { R2150 += 1, R2050 += 1 };
  s1 -> s6 [0, 65535] { R2150 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [80, 80] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s1 -> s5 [80, 80] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s1 -> s1 [81, 65535] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s2 -> s1 [0, 79] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s2 -> s2 [0, 65535] { R2150 += 1, R2049 += 1, R2050 += 1 };
  s2 -> s3 [0, 65535] { R2150 += 1, R2050 += 1, R2024 += 1, R2025 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [80, 80] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s2 -> s5 [80, 80] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s2 -> s1 [81, 65535] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s3 -> s1 [0, 79] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s3 -> s3 [0, 65535] { R2150 += 1, R2050 += 1, R2024 += 1, R2025 += 1 };
  s3 -> s6 [0, 65535] { R2150 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [80, 80] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s3 -> s5 [80, 80] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s3 -> s1 [81, 65535] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s4 -> s4 [0, 65535] { R2150 += 1, R2050 += 1 };
  s4 -> s6 [0, 65535] { R2150 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 65535] { R2150 += 1 };
  s5 -> s7 [0, 65535] { R2150 += 1, R2050 += 1 };
  s5 -> s5 [0, 65535] { R2150 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R2150 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R2150 += 1 };
  s7 -> s7 [0, 65535] { R2150 += 1, R2050 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R2151 += 1, R2152 += 1 };
  s0 -> s1 [0, 65535] { R2152 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s2 [0, 65535] { R2152 += 1, R2066 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R2152 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2152 += 1, R2066 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R2152 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2152 += 1, R2066 += 1, R34 += 1 };
  s3 -> s3 [0, 65535] { R2152 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R2154 += 1, R2068 += 1 };
  s0 -> s0 [0, 65535] { R2153 += 1, R2154 += 1 };
  s0 -> s2 [0, 65535] { R2154 += 1, R2067 += 1, R2068 += 1 };
  s0 -> s3 [65, 65] { R2154 += 1, R2068 += 1 };
  s0 -> s4 [65, 65] { R2154 += 1, R2068 += 1 };
  s0 -> s5 [80, 80] { R2154 += 1, R2068 += 1 };
  s0 -> s1 [81, 65535] { R2154 += 1, R2068 += 1 };
  s1 -> s1 [0, 64] { R2154 += 1, R2068 += 1 };
  s1 -> s3 [65, 65] { R2154 += 1, R2068 += 1 };
  s1 -> s4 [65, 65] { R2154 += 1, R2068 += 1 };
  s1 -> s5 [80, 80] { R2154 += 1, R2068 += 1 };
  s1 -> s1 [81, 65535] { R2154 += 1, R2068 += 1 };
  s2 -> s1 [0, 64] { R2154 += 1, R2068 += 1 };
  s2 -> s2 [0, 65535] { R2154 += 1, R2067 += 1, R2068 += 1 };
  s2 -> s3 [65, 65] { R2154 += 1, R2068 += 1 };
  s2 -> s4 [65, 65] { R2154 += 1, R2068 += 1 };
  s2 -> s5 [80, 80] { R2154 += 1, R2068 += 1 };
  s2 -> s1 [81, 65535] { R2154 += 1, R2068 += 1 };
  s4 -> s4 [0, 65] { R2154 += 1, R2068 += 1 };
  s4 -> s8 [80, 80] { R2154 += 1, R2068 += 1 };
  s4 -> s4 [81, 65535] { R2154 += 1, R2068 += 1 };
  s5 -> s5 [0, 64] { R2154 += 1, R2068 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2154 += 1 };
  s5 -> s7 [65, 65] { R2154 += 1, R2068 += 1 };
  s5 -> s8 [65, 65] { R2154 += 1, R2068 += 1 };
  s5 -> s5 [80, 65535] { R2154 += 1, R2068 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2154 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R2154 += 1, R2068 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2154 += 1 };
  s8 -> s8 [80, 65535] { R2154 += 1, R2068 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R2156 += 1, R2070 += 1, R459 += 1 };
  s0 -> s2 [0, 65535] { R2156 += 1, R2069 += 1, R2070 += 1 };
  s0 -> s0 [0, 65535] { R2155 += 1, R2156 += 1 };
  s0 -> s3 [65, 65] { R2156 += 1, R2070 += 1, R459 += 1 };
  s0 -> s4 [65, 65] { R2156 += 1, R2070 += 1, R459 += 1 };
  s0 -> s1 [66, 65535] { R2156 += 1, R2070 += 1, R459 += 1 };
  s1 -> s1 [0, 64] { R2156 += 1, R2070 += 1, R459 += 1 };
  s1 -> s1 [0, 65535] { R2156 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2156 += 1, R2070 += 1, R459 += 1 };
  s1 -> s4 [65, 65] { R2156 += 1, R2070 += 1, R459 += 1 };
  s1 -> s1 [66, 65535] { R2156 += 1, R2070 += 1, R459 += 1 };
  s2 -> s1 [0, 64] { R2156 += 1, R2070 += 1, R459 += 1 };
  s2 -> s2 [0, 65535] { R2156 += 1, R2069 += 1, R2070 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2156 += 1, R2070 += 1, R459 += 1 };
  s2 -> s4 [65, 65] { R2156 += 1, R2070 += 1, R459 += 1 };
  s2 -> s1 [66, 65535] { R2156 += 1, R2070 += 1, R459 += 1 };
  s3 -> s3 [0, 65535] { R2156 += 1, R2070 += 1, R459 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2156 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2156 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2156 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R2158 += 1, R2072 += 1, R461 += 1 };
  s0 -> s0 [0, 65535] { R2157 += 1, R2158 += 1 };
  s0 -> s2 [0, 65535] { R2158 += 1, R2071 += 1, R2072 += 1 };
  s0 -> s3 [65, 65] { R2158 += 1, R2072 += 1, R461 += 1 };
  s0 -> s4 [65, 65] { R2158 += 1, R2072 += 1, R461 += 1 };
  s0 -> s1 [66, 65535] { R2158 += 1, R2072 += 1, R461 += 1 };
  s1 -> s1 [0, 64] { R2158 += 1, R2072 += 1, R461 += 1 };
  s1 -> s1 [0, 65535] { R2158 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2158 += 1, R2072 += 1, R461 += 1 };
  s1 -> s4 [65, 65] { R2158 += 1, R2072 += 1, R461 += 1 };
  s1 -> s1 [66, 65535] { R2158 += 1, R2072 += 1, R461 += 1 };
  s2 -> s1 [0, 64] { R2158 += 1, R2072 += 1, R461 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2158 += 1, R2071 += 1, R2072 += 1 };
  s2 -> s3 [65, 65] { R2158 += 1, R2072 += 1, R461 += 1 };
  s2 -> s4 [65, 65] { R2158 += 1, R2072 += 1, R461 += 1 };
  s2 -> s1 [66, 65535] { R2158 += 1, R2072 += 1, R461 += 1 };
  s3 -> s3 [0, 65535] { R2158 += 1, R2072 += 1, R461 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2158 += 1 };
  s4 -> s4 [0, 65535] { R2158 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2158 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s0 -> s0 [0, 65535] { R2159 += 1, R2160 += 1 };
  s0 -> s2 [0, 65535] { R2160 += 1, R2073 += 1, R2074 += 1 };
  s0 -> s3 [65, 65] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s0 -> s4 [65, 65] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s0 -> s1 [66, 65535] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s1 -> s1 [0, 64] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2160 += 1 };
  s1 -> s3 [65, 65] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s1 -> s4 [65, 65] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s1 -> s1 [66, 65535] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s2 -> s1 [0, 64] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s2 -> s2 [0, 65535] { R2160 += 1, R2073 += 1, R2074 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s2 -> s4 [65, 65] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s2 -> s1 [66, 65535] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s3 -> s3 [0, 65535] { R2160 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2160 += 1 };
  s4 -> s4 [0, 65535] { R2160 += 1, R2074 += 1, R463 += 1, R464 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2160 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s0 -> s0 [0, 65535] { R2161 += 1, R2162 += 1 };
  s0 -> s2 [0, 65535] { R2162 += 1, R2075 += 1, R2076 += 1 };
  s0 -> s3 [65, 65] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s0 -> s4 [65, 65] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s0 -> s1 [66, 65535] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [0, 64] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [0, 65535] { R2162 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s1 -> s4 [65, 65] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [66, 65535] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [0, 64] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2162 += 1, R2075 += 1, R2076 += 1 };
  s2 -> s3 [65, 65] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s2 -> s4 [65, 65] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [66, 65535] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s3 -> s3 [0, 65535] { R2162 += 1, R2076 += 1, R467 += 1, R468 += 1 };
  s3 -> s6 [0, 65535] { R2162 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2162 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2162 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s0 -> s2 [0, 65535] { R2164 += 1, R2077 += 1, R2078 += 1 };
  s0 -> s0 [0, 65535] { R2163 += 1, R2164 += 1 };
  s0 -> s3 [65, 65] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s0 -> s4 [65, 65] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s0 -> s1 [66, 65535] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s1 -> s1 [0, 64] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2164 += 1 };
  s1 -> s3 [65, 65] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s1 -> s4 [65, 65] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s1 -> s1 [66, 65535] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s2 -> s1 [0, 64] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2164 += 1, R2077 += 1, R2078 += 1 };
  s2 -> s3 [65, 65] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s2 -> s4 [65, 65] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s2 -> s1 [66, 65535] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s3 -> s3 [0, 65535] { R2164 += 1, R2078 += 1, R473 += 1, R474 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2164 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2164 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2164 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s0 -> s2 [0, 65535] { R2166 += 1, R2079 += 1, R2080 += 1 };
  s0 -> s0 [0, 65535] { R2165 += 1, R2166 += 1 };
  s0 -> s3 [65, 65] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s0 -> s4 [65, 65] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s0 -> s1 [66, 65535] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s1 -> s1 [0, 64] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2166 += 1 };
  s1 -> s3 [65, 65] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s1 -> s4 [65, 65] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s1 -> s1 [66, 65535] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s2 -> s1 [0, 64] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s2 -> s2 [0, 65535] { R2166 += 1, R2079 += 1, R2080 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s2 -> s4 [65, 65] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s2 -> s1 [66, 65535] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s3 -> s3 [0, 65535] { R2166 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2166 += 1 };
  s4 -> s4 [0, 65535] { R2166 += 1, R2080 += 1, R477 += 1, R478 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2166 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s0 -> s2 [0, 64] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s0 -> s0 [0, 65535] { R2167 += 1, R2168 += 1 };
  s0 -> s3 [0, 65535] { R2168 += 1, R2081 += 1, R2082 += 1 };
  s0 -> s4 [65, 65] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s0 -> s5 [65, 65] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s0 -> s6 [65, 65] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s0 -> s7 [65, 65] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s0 -> s1 [66, 65535] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s0 -> s2 [66, 65535] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s1 -> s1 [0, 64] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s1 -> s11 [0, 64] { R2168 += 1, R2082 += 1 };
  s1 -> s5 [65, 65] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s1 -> s12 [65, 65] { R2168 += 1, R2082 += 1 };
  s1 -> s6 [65, 65] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s1 -> s8 [65, 65] { R2168 += 1, R2082 += 1 };
  s1 -> s1 [66, 65535] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s1 -> s11 [66, 65535] { R2168 += 1, R2082 += 1 };
  s2 -> s1 [0, 64] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s2 -> s2 [0, 64] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s2 -> s4 [65, 65] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s2 -> s5 [65, 65] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s2 -> s6 [65, 65] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s2 -> s7 [65, 65] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s2 -> s1 [66, 65535] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s2 -> s2 [66, 65535] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s3 -> s1 [0, 64] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s3 -> s2 [0, 64] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s3 -> s3 [0, 65535] { R2168 += 1, R2081 += 1, R2082 += 1 };
  s3 -> s4 [65, 65] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s3 -> s5 [65, 65] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s3 -> s6 [65, 65] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s3 -> s7 [65, 65] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s3 -> s1 [66, 65535] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s3 -> s2 [66, 65535] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s6 -> s6 [0, 65535] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s6 -> s8 [0, 65535] { R2168 += 1, R2082 += 1 };
  s7 -> s6 [0, 65535] { R2168 += 1, R2082 += 1, R2016 += 1, R2017 += 1 };
  s7 -> s7 [0, 65535] { R2168 += 1, R2082 += 1, R2015 += 1, R2016 += 1 };
  s8 -> s9 [0, 65535] { R2168 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R2168 += 1, R2082 += 1 };
  s9 -> s9 [0, 65535] { R2168 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R2168 += 1, R2082 += 1 };
  s11 -> s11 [0, 65535] { R2168 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R2168 += 1, R2082 += 1 };
  s11 -> s8 [65, 65] { R2168 += 1, R2082 += 1 };
  s11 -> s11 [66, 65535] { R2168 += 1, R2082 += 1 };
  s12 -> s12 [0, 65535] { R2168 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R2170 += 1, R2084 += 1 };
  s0 -> s0 [0, 65535] { R2169 += 1, R2170 += 1 };
  s0 -> s2 [0, 65535] { R2170 += 1, R2083 += 1, R2084 += 1 };
  s0 -> s3 [65, 65] { R2170 += 1, R2084 += 1 };
  s0 -> s4 [65, 65] { R2170 += 1, R2084 += 1 };
  s0 -> s1 [66, 65535] { R2170 += 1, R2084 += 1 };
  s1 -> s1 [0, 64] { R2170 += 1, R2084 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2170 += 1 };
  s1 -> s3 [65, 65] { R2170 += 1, R2084 += 1 };
  s1 -> s4 [65, 65] { R2170 += 1, R2084 += 1 };
  s1 -> s1 [66, 65535] { R2170 += 1, R2084 += 1 };
  s2 -> s1 [0, 64] { R2170 += 1, R2084 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2170 += 1, R2083 += 1, R2084 += 1 };
  s2 -> s3 [65, 65] { R2170 += 1, R2084 += 1 };
  s2 -> s4 [65, 65] { R2170 += 1, R2084 += 1 };
  s2 -> s1 [66, 65535] { R2170 += 1, R2084 += 1 };
  s3 -> s3 [0, 65535] { R2170 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2170 += 1, R2084 += 1 };
  s4 -> s6 [0, 65535] { R2170 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2170 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s0 -> s2 [0, 65535] { R2172 += 1, R2085 += 1, R2086 += 1 };
  s0 -> s0 [0, 65535] { R2171 += 1, R2172 += 1 };
  s0 -> s3 [65, 65] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s0 -> s4 [65, 65] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s0 -> s1 [66, 65535] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s1 -> s1 [0, 64] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s1 -> s1 [0, 65535] { R2172 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s1 -> s4 [65, 65] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s1 -> s1 [66, 65535] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s2 -> s1 [0, 64] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s2 -> s2 [0, 65535] { R2172 += 1, R2085 += 1, R2086 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s2 -> s4 [65, 65] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s2 -> s1 [66, 65535] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s3 -> s3 [0, 65535] { R2172 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2172 += 1 };
  s4 -> s4 [0, 65535] { R2172 += 1, R2086 += 1, R2021 += 1, R2022 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2172 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R5 = R2050 && R6 = R2172 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R61 = 0 && R62 = R2050 && R63 = 0 && R64 = R2050 && R65 = 0 && R66 = R2050 && R67 = 0 && R68 = R2172 && R69 = 0 && R70 = R2172 && R71 = 0 && R72 = R2172 && R88 + R87 + -1*R100 + -1*R98 = 0 && R99 + R97 = 0 && R2027 = 0 && R2028 = R2050 && R2029 = 0 && R2030 = R2050 && R2031 = 0 && R2032 = R2050 && R2033 = 0 && R2034 = R2050 && R2035 = 0 && R2036 = R2050 && R2037 = 0 && R2038 = R2050 && R2039 = 0 && R2040 = R2050 && R2041 = 0 && R2042 = R2050 && R2043 = 0 && R2044 = R2050 && R2045 = 0 && R2046 = R2050 && R2047 = 0 && R2048 = R2050 && R2049 = 0 && R2051 = 0 && R2052 = R2172 && R2053 = 0 && R2054 = R2172 && R2055 = 0 && R2056 = R2172 && R2057 = 0 && R2058 = R2172 && R2059 = 0 && R2060 = R2172 && R2061 = 0 && R2062 = R2172 && R2063 = 0 && R2064 = R2172 && R2067 = 0 && R2068 = 0 && R2081 = 0 && R2082 = 0 && R2101 = 10 && R2102 = R2172 && R2103 = 10 && R2104 = R2172 && R2105 = 10 && R2106 = R2172 && R2107 = 10 && R2108 = R2172 && R2109 = 10 && R2110 = R2172 && R2111 = 10 && R2112 = R2172 && R2113 = 10 && R2114 = R2172 && R2115 = 10 && R2116 = R2172 && R2117 = 10 && R2118 = R2172 && R2119 = 10 && R2120 = R2172 && R2121 = 10 && R2122 = R2172 && R2123 = 10 && R2124 = R2172 && R2125 = 10 && R2126 = R2172 && R2127 = 10 && R2128 = R2172 && R2129 = 10 && R2130 = R2172 && R2131 = 10 && R2132 = R2172 && R2133 = 10 && R2134 = R2172 && R2135 = 10 && R2136 = R2172 && R2137 = 10 && R2138 = R2172 && R2139 = 10 && R2140 = R2172 && R2141 = 10 && R2142 = R2172 && R2143 = 10 && R2144 = R2172 && R2145 = 10 && R2146 = R2172 && R2147 = 10 && R2148 = R2172 && R2149 = 10 && R2150 = R2172 && R2151 = 10 && R2152 = R2172 && R2153 = 10 && R2154 = R2172 && R2155 = 10 && R2156 = R2172 && R2157 = 10 && R2158 = R2172 && R2159 = 10 && R2160 = R2172 && R2161 = 10 && R2162 = R2172 && R2163 = 10 && R2164 = R2172 && R2165 = 10 && R2166 = R2172 && R2167 = 10 && R2168 = R2172 && R2169 = 10 && R2170 = R2172 && R2171 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R482 + R479 + R2026 + R2023 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R90 + R89 < 1 && -1*R100 + -1*R98 < 1 && -1*R460 + -1*R459 < 1 && R462 + R461 < 1 && 0 < R2050 && 9 < R2172 && (R96 + R93 != 0 || ((R94 + R91 != 0 || R95 + R92 + -1*R100 + -1*R98 = 0 || R100 + R98 < 1) && (R94 + R91 = 0 || R100 + R98 < 1))) && (R460 + R459 != 0 || R472 + R469 = 0 || (R465 + R463 = 0 && R466 + R464 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R470 + R467 = 0 && R471 + R468 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R475 + R473 = 0 && R476 + R474 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R480 + R477 = 0 && R481 + R478 = 0)) && (R465 + R463 != 0 || R460 + R459 + -1*R466 + -1*R464 = 0 || R460 + R459 < 1) && (R470 + R467 != 0 || R460 + R459 + -1*R471 + -1*R468 = 0 || R460 + R459 < 1) && (R475 + R473 != 0 || R460 + R459 + -1*R476 + -1*R474 = 0 || R460 + R459 < 1) && (R480 + R477 != 0 || R460 + R459 + -1*R481 + -1*R478 = 0 || R460 + R459 < 1) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R33 = 0 || (R81 = 0 && R82 = 0)) && (R34 = 0 || (R2065 = 0 && R2066 = 0)) && (R34 = 0 || (R2069 = 0 && R2070 = 0)) && (R34 = 0 || (R2071 = 0 && R2072 = 0)) && (R34 = 0 || (R2073 = 0 && R2074 = 0)) && (R34 = 0 || (R2075 = 0 && R2076 = 0)) && (R34 = 0 || (R2077 = 0 && R2078 = 0)) && (R34 = 0 || (R2079 = 0 && R2080 = 0)) && (R34 = 0 || (R2083 = 0 && R2084 = 0)) && (R34 = 0 || (R2085 = 0 && R2086 = 0)) && (R37 = 0 || (R2087 = 0 && R2088 = 0)) && (R37 = 0 || (R2089 = 0 && R2090 = 0)) && (R37 = 0 || (R2091 = 0 && R2092 = 0)) && (R37 = 0 || (R2093 = 0 && R2094 = 0)) && (R37 = 0 || (R2095 = 0 && R2096 = 0)) && (R37 = 0 || (R2097 = 0 && R2098 = 0)) && (R37 = 0 || (R2099 = 0 && R2100 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R38 = 0 || (R85 = 0 && R86 = 0)) && (R96 + R93 = 0 || (R94 + R91 = 0 && R95 + R92 + -1*R100 + -1*R98 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R465 + R463 = 0 || R460 + R459 < 1) && (R470 + R467 = 0 || R460 + R459 < 1) && (R475 + R473 = 0 || R460 + R459 < 1) && (R480 + R477 = 0 || R460 + R459 < 1) && (R2020 + R2017 = 0 || (R2018 + R2015 = 0 && R2019 + R2016 = 0)) && (R2020 + R2017 = 0 || (R2024 + R2021 = 0 && R2025 + R2022 = 0));
// End of Parikh automata intersection problem
