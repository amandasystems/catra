// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R14, R15, R18, R21, R24, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R459, R46, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R476, R477, R478, R479, R480, R481, R482, R483, R484, R485, R486, R487, R488, R5, R6, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R79, R793, R794, R795, R796, R797, R798, R799, R80, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R81, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R82, R820, R821, R822, R823, R824, R825, R826, R827, R828, R829, R83, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R84, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R85, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R86, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R87, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R88, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R89, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R90, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R91, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R92, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R93, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R94, R940, R941, R942, R943, R944, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R68 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R70 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s2 [108, 108] { R70 += 1 };
  s0 -> s1 [109, 65535] { R70 += 1 };
  s1 -> s1 [0, 65535] { R70 += 1 };
  s1 -> s11 [0, 65535];
  s2 -> s1 [0, 110] { R70 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R70 += 1 };
  s2 -> s1 [112, 65535] { R70 += 1 };
  s3 -> s1 [0, 98] { R70 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R70 += 1 };
  s3 -> s1 [100, 65535] { R70 += 1 };
  s4 -> s1 [0, 96] { R70 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R70 += 1 };
  s4 -> s1 [98, 65535] { R70 += 1 };
  s5 -> s1 [0, 107] { R70 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R70 += 1 };
  s5 -> s1 [109, 65535] { R70 += 1 };
  s6 -> s1 [0, 103] { R70 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R70 += 1 };
  s6 -> s1 [105, 65535] { R70 += 1 };
  s7 -> s1 [0, 110] { R70 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R70 += 1 };
  s7 -> s1 [112, 65535] { R70 += 1 };
  s8 -> s1 [0, 114] { R70 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R70 += 1 };
  s8 -> s1 [116, 65535] { R70 += 1 };
  s9 -> s1 [0, 115] { R70 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R70 += 1 };
  s9 -> s1 [117, 65535] { R70 += 1 };
  s10 -> s1 [0, 65535] { R70 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s1 [0, 65535] { R72 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R72 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R86 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s2 [66, 66] { R86 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R86 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R86 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R86 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R86 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R86 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R86 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R86 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R823 += 1, R824 += 1 };
  s0 -> s1 [0, 65535] { R824 += 1, R35 += 1 };
  s1 -> s1 [0, 65535] { R824 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R826 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R825 += 1, R826 += 1 };
  s1 -> s1 [0, 65535] { R826 += 1, R88 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R828 += 1 };
  s0 -> s0 [0, 65535] { R827 += 1, R828 += 1 };
  s0 -> s2 [0, 65535] { R828 += 1, R90 += 1 };
  s0 -> s1 [78, 65535] { R828 += 1 };
  s1 -> s1 [0, 76] { R828 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R828 += 1 };
  s2 -> s1 [0, 76] { R828 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R828 += 1, R90 += 1 };
  s2 -> s1 [78, 65535] { R828 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R829 += 1, R830 += 1 };
  s0 -> s1 [0, 65535] { R830 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R830 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R830 += 1, R94 += 1, R95 += 1 };
  s1 -> s2 [0, 65535] { R830 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R830 += 1, R95 += 1, R96 += 1 };
  s2 -> s3 [0, 65535] { R830 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R830 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R831 += 1, R832 += 1 };
  s0 -> s1 [0, 65535] { R832 += 1, R99 += 1, R100 += 1 };
  s0 -> s2 [108, 108] { R832 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R832 += 1, R99 += 1, R100 += 1 };
  s1 -> s2 [108, 108] { R832 += 1, R100 += 1 };
  s2 -> s3 [111, 111] { R832 += 1, R100 += 1 };
  s3 -> s4 [99, 99] { R832 += 1, R100 += 1 };
  s4 -> s5 [97, 97] { R832 += 1, R100 += 1 };
  s5 -> s6 [108, 108] { R832 += 1, R100 += 1 };
  s6 -> s7 [104, 104] { R832 += 1, R100 += 1 };
  s7 -> s8 [111, 111] { R832 += 1, R100 += 1 };
  s8 -> s9 [115, 115] { R832 += 1, R100 += 1 };
  s9 -> s10 [116, 116] { R832 += 1, R100 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R832 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R834 += 1, R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R834 += 1, R104 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R833 += 1, R834 += 1 };
  s1 -> s4 [0, 65535] { R834 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R834 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R834 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R834 += 1, R104 += 1, R105 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R834 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R836 += 1 };
  s0 -> s0 [0, 65535] { R835 += 1, R836 += 1 };
  s1 -> s1 [0, 65535] { R836 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R860 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R859 += 1, R860 += 1 };
  s1 -> s1 [0, 65535] { R860 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R862 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R861 += 1, R862 += 1 };
  s0 -> s2 [65, 65] { R862 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R862 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R862 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R862 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R862 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R862 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R862 += 1, R87 += 1 };
  s2 -> s2 [0, 65535] { R862 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R864 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R863 += 1, R864 += 1 };
  s0 -> s2 [65, 65] { R864 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R864 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R864 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R864 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R864 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R864 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R864 += 1, R89 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R864 += 1, R89 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R866 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R865 += 1, R866 += 1 };
  s0 -> s2 [65, 65] { R866 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R866 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R866 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R866 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R866 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R866 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R866 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R866 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R868 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R867 += 1, R868 += 1 };
  s0 -> s2 [65, 65] { R868 += 1, R97 += 1, R98 += 1 };
  s0 -> s3 [65, 65] { R868 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [66, 65535] { R868 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 64] { R868 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R868 += 1, R97 += 1, R98 += 1 };
  s1 -> s3 [65, 65] { R868 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [66, 65535] { R868 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R868 += 1, R97 += 1, R98 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R870 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R869 += 1, R870 += 1 };
  s0 -> s2 [65, 65] { R870 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R870 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R870 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R870 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R870 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R870 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R870 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R870 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R872 += 1 };
  s0 -> s0 [0, 65535] { R871 += 1, R872 += 1 };
  s0 -> s2 [65, 65] { R872 += 1 };
  s0 -> s3 [65, 65] { R872 += 1 };
  s0 -> s1 [66, 65535] { R872 += 1 };
  s1 -> s1 [0, 64] { R872 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R872 += 1 };
  s1 -> s3 [65, 65] { R872 += 1 };
  s1 -> s1 [66, 65535] { R872 += 1 };
  s2 -> s2 [0, 65535] { R872 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R874 += 1 };
  s0 -> s0 [0, 65535] { R873 += 1, R874 += 1 };
  s0 -> s1 [45, 45] { R874 += 1 };
  s0 -> s2 [46, 46] { R874 += 1 };
  s0 -> s1 [48, 62] { R874 += 1 };
  s0 -> s3 [65, 65] { R874 += 1 };
  s0 -> s1 [66, 65535] { R874 += 1 };
  s1 -> s1 [0, 43] { R874 += 1 };
  s1 -> s1 [45, 45] { R874 += 1 };
  s1 -> s2 [46, 46] { R874 += 1 };
  s1 -> s1 [48, 62] { R874 += 1 };
  s1 -> s3 [65, 65] { R874 += 1 };
  s1 -> s1 [66, 65535] { R874 += 1 };
  s2 -> s1 [0, 43] { R874 += 1 };
  s2 -> s1 [45, 45] { R874 += 1 };
  s2 -> s2 [46, 46] { R874 += 1 };
  s2 -> s1 [48, 62] { R874 += 1 };
  s2 -> s3 [65, 65] { R874 += 1 };
  s2 -> s1 [66, 114] { R874 += 1 };
  s2 -> s8 [115, 115] { R874 += 1 };
  s2 -> s1 [116, 65535] { R874 += 1 };
  s3 -> s3 [0, 43] { R874 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R874 += 1 };
  s3 -> s4 [46, 46] { R874 += 1 };
  s3 -> s3 [48, 62] { R874 += 1 };
  s3 -> s3 [65, 65535] { R874 += 1 };
  s4 -> s3 [0, 43] { R874 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R874 += 1 };
  s4 -> s4 [46, 46] { R874 += 1 };
  s4 -> s3 [48, 62] { R874 += 1 };
  s4 -> s3 [65, 114] { R874 += 1 };
  s4 -> s5 [115, 115] { R874 += 1 };
  s4 -> s3 [116, 65535] { R874 += 1 };
  s5 -> s3 [0, 43] { R874 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R874 += 1 };
  s5 -> s4 [46, 46] { R874 += 1 };
  s5 -> s3 [48, 62] { R874 += 1 };
  s5 -> s3 [65, 110] { R874 += 1 };
  s5 -> s6 [111, 111] { R874 += 1 };
  s5 -> s3 [112, 65535] { R874 += 1 };
  s6 -> s3 [0, 43] { R874 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R874 += 1 };
  s6 -> s4 [46, 46] { R874 += 1 };
  s6 -> s3 [48, 62] { R874 += 1 };
  s6 -> s3 [65, 98] { R874 += 1 };
  s6 -> s7 [99, 99] { R874 += 1 };
  s6 -> s3 [100, 65535] { R874 += 1 };
  s7 -> s3 [0, 43] { R874 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R874 += 1 };
  s7 -> s4 [46, 46] { R874 += 1 };
  s7 -> s3 [48, 62] { R874 += 1 };
  s7 -> s3 [65, 106] { R874 += 1 };
  s7 -> s3 [108, 65535] { R874 += 1 };
  s8 -> s1 [0, 43] { R874 += 1 };
  s8 -> s1 [45, 45] { R874 += 1 };
  s8 -> s2 [46, 46] { R874 += 1 };
  s8 -> s1 [48, 62] { R874 += 1 };
  s8 -> s3 [65, 65] { R874 += 1 };
  s8 -> s1 [66, 110] { R874 += 1 };
  s8 -> s9 [111, 111] { R874 += 1 };
  s8 -> s1 [112, 65535] { R874 += 1 };
  s9 -> s1 [0, 43] { R874 += 1 };
  s9 -> s1 [45, 45] { R874 += 1 };
  s9 -> s2 [46, 46] { R874 += 1 };
  s9 -> s1 [48, 62] { R874 += 1 };
  s9 -> s3 [65, 65] { R874 += 1 };
  s9 -> s1 [66, 98] { R874 += 1 };
  s9 -> s10 [99, 99] { R874 += 1 };
  s9 -> s1 [100, 65535] { R874 += 1 };
  s10 -> s1 [0, 43] { R874 += 1 };
  s10 -> s1 [45, 45] { R874 += 1 };
  s10 -> s2 [46, 46] { R874 += 1 };
  s10 -> s1 [48, 62] { R874 += 1 };
  s10 -> s3 [65, 65] { R874 += 1 };
  s10 -> s1 [66, 106] { R874 += 1 };
  s10 -> s1 [108, 65535] { R874 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R876 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R875 += 1, R876 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R876 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R878 += 1 };
  s0 -> s0 [0, 65535] { R877 += 1, R878 += 1 };
  s0 -> s2 [0, 65535] { R878 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R878 += 1 };
  s0 -> s1 [59, 65535] { R878 += 1 };
  s1 -> s1 [0, 57] { R878 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R878 += 1 };
  s1 -> s1 [59, 65535] { R878 += 1 };
  s2 -> s1 [0, 57] { R878 += 1 };
  s2 -> s2 [0, 65535] { R878 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R878 += 1 };
  s2 -> s1 [59, 65535] { R878 += 1 };
  s3 -> s3 [0, 65535] { R878 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R880 += 1 };
  s0 -> s2 [0, 65535] { R880 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R879 += 1, R880 += 1 };
  s0 -> s3 [43, 43] { R880 += 1 };
  s0 -> s1 [44, 65535] { R880 += 1 };
  s1 -> s1 [0, 42] { R880 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R880 += 1 };
  s1 -> s1 [44, 65535] { R880 += 1 };
  s2 -> s1 [0, 42] { R880 += 1 };
  s2 -> s2 [0, 65535] { R880 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R880 += 1 };
  s2 -> s1 [44, 65535] { R880 += 1 };
  s3 -> s3 [0, 65535] { R880 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R882 += 1 };
  s0 -> s0 [0, 65535] { R881 += 1, R882 += 1 };
  s0 -> s2 [0, 65535] { R882 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R882 += 1 };
  s0 -> s1 [66, 65535] { R882 += 1 };
  s1 -> s1 [0, 64] { R882 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R882 += 1 };
  s1 -> s1 [66, 65535] { R882 += 1 };
  s2 -> s1 [0, 64] { R882 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R882 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R882 += 1 };
  s2 -> s1 [66, 65535] { R882 += 1 };
  s3 -> s3 [0, 65535] { R882 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R884 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R884 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R883 += 1, R884 += 1 };
  s0 -> s3 [91, 91] { R884 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R884 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R884 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R884 += 1 };
  s2 -> s1 [0, 90] { R884 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R884 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R884 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R884 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R884 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R884 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R886 += 1, R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R886 += 1, R42 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R885 += 1, R886 += 1 };
  s1 -> s1 [0, 65535] { R886 += 1, R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535] { R886 += 1, R42 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R886 += 1 };
  s2 -> s2 [0, 65535] { R886 += 1, R42 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R886 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 65535] { R888 += 1, R61 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R888 += 1, R62 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R887 += 1, R888 += 1 };
  s1 -> s1 [0, 65535] { R888 += 1, R61 += 1, R62 += 1 };
  s1 -> s2 [0, 65535] { R888 += 1, R62 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R888 += 1, R62 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R888 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R888 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R890 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R890 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R889 += 1, R890 += 1 };
  s0 -> s3 [108, 108] { R890 += 1, R64 += 1 };
  s0 -> s1 [109, 65535] { R890 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R890 += 1, R64 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R890 += 1 };
  s2 -> s1 [0, 107] { R890 += 1, R64 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R890 += 1, R63 += 1, R64 += 1 };
  s2 -> s3 [108, 108] { R890 += 1, R64 += 1 };
  s2 -> s1 [109, 65535] { R890 += 1, R64 += 1 };
  s3 -> s1 [0, 110] { R890 += 1, R64 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R890 += 1 };
  s3 -> s5 [111, 111] { R890 += 1, R64 += 1 };
  s3 -> s1 [112, 65535] { R890 += 1, R64 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R890 += 1, R64 += 1 };
  s5 -> s5 [0, 65535] { R890 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R890 += 1, R64 += 1 };
  s5 -> s1 [100, 65535] { R890 += 1, R64 += 1 };
  s6 -> s1 [0, 96] { R890 += 1, R64 += 1 };
  s6 -> s6 [0, 65535] { R890 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R890 += 1, R64 += 1 };
  s6 -> s1 [98, 65535] { R890 += 1, R64 += 1 };
  s7 -> s1 [0, 107] { R890 += 1, R64 += 1 };
  s7 -> s7 [0, 65535] { R890 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R890 += 1, R64 += 1 };
  s7 -> s1 [109, 65535] { R890 += 1, R64 += 1 };
  s8 -> s1 [0, 103] { R890 += 1, R64 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R890 += 1 };
  s8 -> s9 [104, 104] { R890 += 1, R64 += 1 };
  s8 -> s1 [105, 65535] { R890 += 1, R64 += 1 };
  s9 -> s1 [0, 110] { R890 += 1, R64 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R890 += 1 };
  s9 -> s10 [111, 111] { R890 += 1, R64 += 1 };
  s9 -> s1 [112, 65535] { R890 += 1, R64 += 1 };
  s10 -> s1 [0, 114] { R890 += 1, R64 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R890 += 1 };
  s10 -> s11 [115, 115] { R890 += 1, R64 += 1 };
  s10 -> s1 [116, 65535] { R890 += 1, R64 += 1 };
  s11 -> s1 [0, 115] { R890 += 1, R64 += 1 };
  s11 -> s11 [0, 65535] { R890 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R890 += 1, R64 += 1 };
  s11 -> s1 [117, 65535] { R890 += 1, R64 += 1 };
  s12 -> s1 [0, 65535] { R890 += 1, R64 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R890 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65535] { R892 += 1, R66 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R892 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R891 += 1, R892 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R892 += 1, R66 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R892 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R892 += 1, R66 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R892 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R892 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R894 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R893 += 1, R894 += 1 };
  s0 -> s2 [0, 65535] { R894 += 1, R80 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R894 += 1, R79 += 1, R80 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R894 += 1, R80 += 1, R33 += 1 };
  s2 -> s3 [0, 65535] { R894 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R894 += 1, R80 += 1, R33 += 1 };
  s3 -> s3 [0, 65535] { R894 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 65535] { R896 += 1 };
  s0 -> s0 [0, 65535] { R895 += 1, R896 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R896 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R898 += 1, R82 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R897 += 1, R898 += 1 };
  s0 -> s2 [0, 65535] { R898 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [43, 43] { R898 += 1, R82 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R898 += 1, R82 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R898 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R898 += 1, R82 += 1, R43 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R898 += 1 };
  s1 -> s3 [43, 43] { R898 += 1, R82 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R898 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R898 += 1, R82 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R898 += 1, R82 += 1, R43 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R898 += 1, R81 += 1, R82 += 1 };
  s2 -> s3 [43, 43] { R898 += 1, R82 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R898 += 1, R82 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R898 += 1, R82 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R898 += 1, R82 += 1, R43 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R898 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R898 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R898 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R900 += 1, R800 += 1 };
  s0 -> s2 [0, 65535] { R900 += 1, R799 += 1, R800 += 1 };
  s0 -> s0 [0, 65535] { R899 += 1, R900 += 1 };
  s0 -> s1 [66, 65535] { R900 += 1, R800 += 1 };
  s1 -> s1 [0, 64] { R900 += 1, R800 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R900 += 1 };
  s1 -> s1 [66, 65535] { R900 += 1, R800 += 1 };
  s2 -> s1 [0, 64] { R900 += 1, R800 += 1 };
  s2 -> s2 [0, 65535] { R900 += 1, R799 += 1, R800 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R900 += 1, R800 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R901 += 1, R902 += 1 };
  s0 -> s1 [0, 65535] { R902 += 1, R802 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R902 += 1, R801 += 1, R802 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R902 += 1, R802 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R902 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R902 += 1, R802 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R902 += 1, R801 += 1, R802 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R902 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R904 += 1, R804 += 1 };
  s0 -> s2 [0, 65535] { R904 += 1, R803 += 1, R804 += 1 };
  s0 -> s0 [0, 65535] { R903 += 1, R904 += 1 };
  s0 -> s1 [80, 65535] { R904 += 1, R804 += 1 };
  s1 -> s1 [0, 65] { R904 += 1, R804 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R904 += 1 };
  s1 -> s1 [80, 65535] { R904 += 1, R804 += 1 };
  s2 -> s1 [0, 65] { R904 += 1, R804 += 1 };
  s2 -> s2 [0, 65535] { R904 += 1, R803 += 1, R804 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R904 += 1, R804 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R906 += 1, R806 += 1, R460 += 1 };
  s0 -> s2 [0, 65535] { R906 += 1, R805 += 1, R806 += 1 };
  s0 -> s0 [0, 65535] { R905 += 1, R906 += 1 };
  s1 -> s1 [0, 65535] { R906 += 1, R806 += 1, R460 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R906 += 1 };
  s2 -> s1 [0, 65535] { R906 += 1, R806 += 1, R460 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R906 += 1, R805 += 1, R806 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R906 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R908 += 1, R808 += 1 };
  s0 -> s2 [0, 65535] { R908 += 1, R807 += 1, R808 += 1 };
  s0 -> s3 [0, 65535] { R908 += 1, R808 += 1, R462 += 1 };
  s0 -> s0 [0, 65535] { R907 += 1, R908 += 1 };
  s0 -> s1 [81, 65535] { R908 += 1, R808 += 1 };
  s1 -> s1 [0, 79] { R908 += 1, R808 += 1 };
  s1 -> s1 [0, 65535] { R908 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R908 += 1, R808 += 1 };
  s2 -> s1 [0, 79] { R908 += 1, R808 += 1 };
  s2 -> s2 [0, 65535] { R908 += 1, R807 += 1, R808 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R908 += 1, R808 += 1, R462 += 1 };
  s2 -> s1 [81, 65535] { R908 += 1, R808 += 1 };
  s3 -> s1 [0, 79] { R908 += 1, R808 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R908 += 1, R808 += 1, R462 += 1 };
  s3 -> s5 [0, 65535] { R908 += 1 };
  s3 -> s1 [81, 65535] { R908 += 1, R808 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R908 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R910 += 1, R810 += 1, R466 += 1 };
  s0 -> s2 [0, 65535] { R910 += 1, R809 += 1, R810 += 1 };
  s0 -> s3 [0, 65535] { R910 += 1, R810 += 1, R465 += 1, R466 += 1 };
  s0 -> s0 [0, 65535] { R909 += 1, R910 += 1 };
  s0 -> s1 [81, 65535] { R910 += 1, R810 += 1, R466 += 1 };
  s1 -> s1 [0, 79] { R910 += 1, R810 += 1, R466 += 1 };
  s1 -> s4 [0, 65535] { R910 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R910 += 1, R810 += 1 };
  s1 -> s1 [81, 65535] { R910 += 1, R810 += 1, R466 += 1 };
  s2 -> s1 [0, 79] { R910 += 1, R810 += 1, R466 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R910 += 1, R809 += 1, R810 += 1 };
  s2 -> s3 [0, 65535] { R910 += 1, R810 += 1, R465 += 1, R466 += 1 };
  s2 -> s1 [81, 65535] { R910 += 1, R810 += 1, R466 += 1 };
  s3 -> s1 [0, 79] { R910 += 1, R810 += 1, R466 += 1 };
  s3 -> s4 [0, 65535] { R910 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R910 += 1, R810 += 1, R465 += 1, R466 += 1 };
  s3 -> s1 [81, 65535] { R910 += 1, R810 += 1, R466 += 1 };
  s4 -> s4 [0, 65535] { R910 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R912 += 1, R812 += 1, R470 += 1, R471 += 1 };
  s0 -> s2 [0, 65535] { R912 += 1, R811 += 1, R812 += 1 };
  s0 -> s3 [0, 65535] { R912 += 1, R812 += 1, R471 += 1, R472 += 1 };
  s0 -> s0 [0, 65535] { R911 += 1, R912 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R912 += 1, R812 += 1, R470 += 1, R471 += 1 };
  s1 -> s3 [0, 65535] { R912 += 1, R812 += 1, R471 += 1, R472 += 1 };
  s1 -> s6 [0, 65535] { R912 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R912 += 1, R812 += 1, R470 += 1, R471 += 1 };
  s2 -> s2 [0, 65535] { R912 += 1, R811 += 1, R812 += 1 };
  s2 -> s3 [0, 65535] { R912 += 1, R812 += 1, R471 += 1, R472 += 1 };
  s3 -> s4 [0, 65535] { R912 += 1, R812 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R912 += 1, R812 += 1, R471 += 1, R472 += 1 };
  s3 -> s6 [0, 65535] { R912 += 1 };
  s4 -> s4 [0, 65535] { R912 += 1, R812 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R912 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R912 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s0 -> s0 [0, 65535] { R913 += 1, R914 += 1 };
  s0 -> s2 [0, 65535] { R914 += 1, R813 += 1, R814 += 1 };
  s0 -> s3 [0, 65535] { R914 += 1, R814 += 1, R475 += 1, R476 += 1 };
  s0 -> s1 [91, 107] { R914 += 1, R814 += 1, R476 += 1 };
  s0 -> s4 [108, 108] { R914 += 1, R814 += 1, R476 += 1 };
  s0 -> s1 [109, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s1 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s1 -> s1 [0, 65535] { R914 += 1, R814 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R914 += 1 };
  s1 -> s1 [91, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s2 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s2 -> s2 [0, 65535] { R914 += 1, R813 += 1, R814 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R914 += 1, R814 += 1, R475 += 1, R476 += 1 };
  s2 -> s1 [91, 107] { R914 += 1, R814 += 1, R476 += 1 };
  s2 -> s4 [108, 108] { R914 += 1, R814 += 1, R476 += 1 };
  s2 -> s1 [109, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s3 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R914 += 1, R814 += 1, R475 += 1, R476 += 1 };
  s3 -> s6 [0, 65535] { R914 += 1 };
  s3 -> s1 [91, 107] { R914 += 1, R814 += 1, R476 += 1 };
  s3 -> s4 [108, 108] { R914 += 1, R814 += 1, R476 += 1 };
  s3 -> s1 [109, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s4 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R914 += 1 };
  s4 -> s4 [0, 65535] { R914 += 1, R814 += 1 };
  s4 -> s1 [91, 110] { R914 += 1, R814 += 1, R476 += 1 };
  s4 -> s7 [111, 111] { R914 += 1, R814 += 1, R476 += 1 };
  s4 -> s1 [112, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R914 += 1 };
  s7 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s7 -> s7 [0, 65535] { R914 += 1, R814 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R914 += 1 };
  s7 -> s1 [91, 98] { R914 += 1, R814 += 1, R476 += 1 };
  s7 -> s8 [99, 99] { R914 += 1, R814 += 1, R476 += 1 };
  s7 -> s1 [100, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s8 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s8 -> s8 [0, 65535] { R914 += 1, R814 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R914 += 1 };
  s8 -> s1 [91, 96] { R914 += 1, R814 += 1, R476 += 1 };
  s8 -> s9 [97, 97] { R914 += 1, R814 += 1, R476 += 1 };
  s8 -> s1 [98, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s9 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R914 += 1 };
  s9 -> s9 [0, 65535] { R914 += 1, R814 += 1 };
  s9 -> s1 [91, 107] { R914 += 1, R814 += 1, R476 += 1 };
  s9 -> s10 [108, 108] { R914 += 1, R814 += 1, R476 += 1 };
  s9 -> s1 [109, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s10 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s10 -> s10 [0, 65535] { R914 += 1, R814 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R914 += 1 };
  s10 -> s1 [91, 103] { R914 += 1, R814 += 1, R476 += 1 };
  s10 -> s11 [104, 104] { R914 += 1, R814 += 1, R476 += 1 };
  s10 -> s1 [105, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s11 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s11 -> s11 [0, 65535] { R914 += 1, R814 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R914 += 1 };
  s11 -> s1 [91, 110] { R914 += 1, R814 += 1, R476 += 1 };
  s11 -> s12 [111, 111] { R914 += 1, R814 += 1, R476 += 1 };
  s11 -> s1 [112, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s12 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R914 += 1, R814 += 1 };
  s12 -> s6 [0, 65535] { R914 += 1 };
  s12 -> s1 [91, 114] { R914 += 1, R814 += 1, R476 += 1 };
  s12 -> s13 [115, 115] { R914 += 1, R814 += 1, R476 += 1 };
  s12 -> s1 [116, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s13 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R914 += 1, R814 += 1 };
  s13 -> s6 [0, 65535] { R914 += 1 };
  s13 -> s1 [91, 115] { R914 += 1, R814 += 1, R476 += 1 };
  s13 -> s14 [116, 116] { R914 += 1, R814 += 1, R476 += 1 };
  s13 -> s1 [117, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  s14 -> s1 [0, 80] { R914 += 1, R814 += 1, R476 += 1 };
  s14 -> s1 [91, 65535] { R914 += 1, R814 += 1, R476 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R916 += 1, R816 += 1, R481 += 1, R482 += 1 };
  s0 -> s2 [0, 65535] { R916 += 1, R816 += 1, R480 += 1, R481 += 1 };
  s0 -> s3 [0, 65535] { R916 += 1, R815 += 1, R816 += 1 };
  s0 -> s0 [0, 65535] { R915 += 1, R916 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R916 += 1, R816 += 1, R481 += 1, R482 += 1 };
  s1 -> s6 [0, 65535] { R916 += 1, R816 += 1 };
  s1 -> s5 [0, 65535] { R916 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R916 += 1, R816 += 1, R481 += 1, R482 += 1 };
  s2 -> s5 [0, 65535] { R916 += 1 };
  s2 -> s2 [0, 65535] { R916 += 1, R816 += 1, R480 += 1, R481 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R916 += 1, R816 += 1, R481 += 1, R482 += 1 };
  s3 -> s2 [0, 65535] { R916 += 1, R816 += 1, R480 += 1, R481 += 1 };
  s3 -> s3 [0, 65535] { R916 += 1, R815 += 1, R816 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R916 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R916 += 1, R816 += 1 };
  s6 -> s5 [0, 65535] { R916 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R918 += 1, R818 += 1, R486 += 1, R487 += 1 };
  s0 -> s2 [0, 65535] { R918 += 1, R817 += 1, R818 += 1 };
  s0 -> s3 [0, 65535] { R918 += 1, R818 += 1, R487 += 1, R488 += 1 };
  s0 -> s0 [0, 65535] { R917 += 1, R918 += 1 };
  s1 -> s1 [0, 65535] { R918 += 1, R818 += 1, R486 += 1, R487 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R918 += 1, R818 += 1, R487 += 1, R488 += 1 };
  s1 -> s6 [0, 65535] { R918 += 1 };
  s2 -> s1 [0, 65535] { R918 += 1, R818 += 1, R486 += 1, R487 += 1 };
  s2 -> s2 [0, 65535] { R918 += 1, R817 += 1, R818 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R918 += 1, R818 += 1, R487 += 1, R488 += 1 };
  s3 -> s4 [0, 65535] { R918 += 1, R818 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R918 += 1, R818 += 1, R487 += 1, R488 += 1 };
  s3 -> s6 [0, 65535] { R918 += 1 };
  s4 -> s4 [0, 65535] { R918 += 1, R818 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R918 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R918 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R920 += 1, R819 += 1, R820 += 1 };
  s0 -> s2 [0, 65535] { R920 += 1, R820 += 1 };
  s0 -> s0 [0, 65535] { R919 += 1, R920 += 1 };
  s1 -> s1 [0, 65535] { R920 += 1, R819 += 1, R820 += 1 };
  s1 -> s2 [0, 65535] { R920 += 1, R820 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R920 += 1, R820 += 1 };
  s2 -> s3 [0, 65535] { R920 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R920 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R921 += 1, R922 += 1 };
  s0 -> s1 [0, 65535] { R922 += 1, R821 += 1, R822 += 1 };
  s0 -> s2 [0, 65535] { R922 += 1, R822 += 1 };
  s1 -> s1 [0, 65535] { R922 += 1, R821 += 1, R822 += 1 };
  s1 -> s2 [0, 65535] { R922 += 1, R822 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R922 += 1 };
  s2 -> s2 [0, 65535] { R922 += 1, R822 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R922 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R924 += 1, R837 += 1, R838 += 1 };
  s0 -> s2 [0, 65535] { R924 += 1, R838 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R923 += 1, R924 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R924 += 1, R837 += 1, R838 += 1 };
  s1 -> s2 [0, 65535] { R924 += 1, R838 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R924 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R924 += 1, R838 += 1, R34 += 1 };
  s3 -> s3 [0, 65535] { R924 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R926 += 1, R840 += 1 };
  s0 -> s0 [0, 65535] { R925 += 1, R926 += 1 };
  s0 -> s2 [0, 65535] { R926 += 1, R839 += 1, R840 += 1 };
  s0 -> s3 [65, 65] { R926 += 1, R840 += 1 };
  s0 -> s4 [65, 65] { R926 += 1, R840 += 1 };
  s0 -> s5 [80, 80] { R926 += 1, R840 += 1 };
  s0 -> s1 [81, 65535] { R926 += 1, R840 += 1 };
  s1 -> s1 [0, 64] { R926 += 1, R840 += 1 };
  s1 -> s3 [65, 65] { R926 += 1, R840 += 1 };
  s1 -> s4 [65, 65] { R926 += 1, R840 += 1 };
  s1 -> s5 [80, 80] { R926 += 1, R840 += 1 };
  s1 -> s1 [81, 65535] { R926 += 1, R840 += 1 };
  s2 -> s1 [0, 64] { R926 += 1, R840 += 1 };
  s2 -> s2 [0, 65535] { R926 += 1, R839 += 1, R840 += 1 };
  s2 -> s3 [65, 65] { R926 += 1, R840 += 1 };
  s2 -> s4 [65, 65] { R926 += 1, R840 += 1 };
  s2 -> s5 [80, 80] { R926 += 1, R840 += 1 };
  s2 -> s1 [81, 65535] { R926 += 1, R840 += 1 };
  s4 -> s4 [0, 65] { R926 += 1, R840 += 1 };
  s4 -> s8 [80, 80] { R926 += 1, R840 += 1 };
  s4 -> s4 [81, 65535] { R926 += 1, R840 += 1 };
  s5 -> s5 [0, 64] { R926 += 1, R840 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R926 += 1 };
  s5 -> s7 [65, 65] { R926 += 1, R840 += 1 };
  s5 -> s8 [65, 65] { R926 += 1, R840 += 1 };
  s5 -> s5 [80, 65535] { R926 += 1, R840 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R926 += 1 };
  s8 -> s8 [0, 65] { R926 += 1, R840 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R926 += 1 };
  s8 -> s8 [80, 65535] { R926 += 1, R840 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R928 += 1, R842 += 1, R459 += 1 };
  s0 -> s0 [0, 65535] { R927 += 1, R928 += 1 };
  s0 -> s2 [0, 65535] { R928 += 1, R841 += 1, R842 += 1 };
  s0 -> s3 [65, 65] { R928 += 1, R842 += 1, R459 += 1 };
  s0 -> s4 [65, 65] { R928 += 1, R842 += 1, R459 += 1 };
  s0 -> s1 [66, 65535] { R928 += 1, R842 += 1, R459 += 1 };
  s1 -> s1 [0, 64] { R928 += 1, R842 += 1, R459 += 1 };
  s1 -> s1 [0, 65535] { R928 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R928 += 1, R842 += 1, R459 += 1 };
  s1 -> s4 [65, 65] { R928 += 1, R842 += 1, R459 += 1 };
  s1 -> s1 [66, 65535] { R928 += 1, R842 += 1, R459 += 1 };
  s2 -> s1 [0, 64] { R928 += 1, R842 += 1, R459 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R928 += 1, R841 += 1, R842 += 1 };
  s2 -> s3 [65, 65] { R928 += 1, R842 += 1, R459 += 1 };
  s2 -> s4 [65, 65] { R928 += 1, R842 += 1, R459 += 1 };
  s2 -> s1 [66, 65535] { R928 += 1, R842 += 1, R459 += 1 };
  s3 -> s3 [0, 65535] { R928 += 1, R842 += 1, R459 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R928 += 1 };
  s4 -> s4 [0, 65535] { R928 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R928 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R930 += 1, R844 += 1, R461 += 1 };
  s0 -> s0 [0, 65535] { R929 += 1, R930 += 1 };
  s0 -> s2 [0, 65535] { R930 += 1, R843 += 1, R844 += 1 };
  s0 -> s3 [65, 65] { R930 += 1, R844 += 1, R461 += 1 };
  s0 -> s4 [65, 65] { R930 += 1, R844 += 1, R461 += 1 };
  s0 -> s1 [66, 65535] { R930 += 1, R844 += 1, R461 += 1 };
  s1 -> s1 [0, 64] { R930 += 1, R844 += 1, R461 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R930 += 1 };
  s1 -> s3 [65, 65] { R930 += 1, R844 += 1, R461 += 1 };
  s1 -> s4 [65, 65] { R930 += 1, R844 += 1, R461 += 1 };
  s1 -> s1 [66, 65535] { R930 += 1, R844 += 1, R461 += 1 };
  s2 -> s1 [0, 64] { R930 += 1, R844 += 1, R461 += 1 };
  s2 -> s2 [0, 65535] { R930 += 1, R843 += 1, R844 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R930 += 1, R844 += 1, R461 += 1 };
  s2 -> s4 [65, 65] { R930 += 1, R844 += 1, R461 += 1 };
  s2 -> s1 [66, 65535] { R930 += 1, R844 += 1, R461 += 1 };
  s3 -> s3 [0, 65535] { R930 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R930 += 1, R844 += 1, R461 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R930 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R930 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s0 -> s0 [0, 65535] { R931 += 1, R932 += 1 };
  s0 -> s2 [0, 65535] { R932 += 1, R845 += 1, R846 += 1 };
  s0 -> s3 [65, 65] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s0 -> s4 [65, 65] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s0 -> s1 [66, 65535] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s1 -> s1 [0, 64] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R932 += 1 };
  s1 -> s3 [65, 65] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s1 -> s4 [65, 65] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s1 -> s1 [66, 65535] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s2 -> s1 [0, 64] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R932 += 1, R845 += 1, R846 += 1 };
  s2 -> s3 [65, 65] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s2 -> s4 [65, 65] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s2 -> s1 [66, 65535] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R932 += 1 };
  s4 -> s5 [0, 65535] { R932 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R932 += 1, R846 += 1, R463 += 1, R464 += 1 };
  s5 -> s5 [0, 65535] { R932 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s0 -> s2 [0, 65535] { R934 += 1, R847 += 1, R848 += 1 };
  s0 -> s0 [0, 65535] { R933 += 1, R934 += 1 };
  s0 -> s3 [65, 65] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s0 -> s4 [65, 65] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s0 -> s1 [66, 65535] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [0, 64] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [0, 65535] { R934 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s1 -> s4 [65, 65] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [66, 65535] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [0, 64] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s2 -> s2 [0, 65535] { R934 += 1, R847 += 1, R848 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s2 -> s4 [65, 65] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [66, 65535] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s3 -> s6 [0, 65535] { R934 += 1 };
  s3 -> s3 [0, 65535] { R934 += 1, R848 += 1, R467 += 1, R468 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R934 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R934 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s0 -> s0 [0, 65535] { R935 += 1, R936 += 1 };
  s0 -> s2 [0, 65535] { R936 += 1, R849 += 1, R850 += 1 };
  s0 -> s3 [65, 65] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s0 -> s4 [65, 65] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s0 -> s1 [66, 65535] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s1 -> s1 [0, 64] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s1 -> s1 [0, 65535] { R936 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s1 -> s4 [65, 65] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s1 -> s1 [66, 65535] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s2 -> s1 [0, 64] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s2 -> s2 [0, 65535] { R936 += 1, R849 += 1, R850 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s2 -> s4 [65, 65] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s2 -> s1 [66, 65535] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R936 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R936 += 1 };
  s4 -> s4 [0, 65535] { R936 += 1, R850 += 1, R473 += 1, R474 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R936 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s0 -> s2 [0, 65535] { R938 += 1, R851 += 1, R852 += 1 };
  s0 -> s0 [0, 65535] { R937 += 1, R938 += 1 };
  s0 -> s3 [65, 65] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s0 -> s4 [65, 65] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s0 -> s1 [66, 65535] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s1 -> s1 [0, 64] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R938 += 1 };
  s1 -> s3 [65, 65] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s1 -> s4 [65, 65] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s1 -> s1 [66, 65535] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s2 -> s1 [0, 64] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s2 -> s2 [0, 65535] { R938 += 1, R851 += 1, R852 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s2 -> s4 [65, 65] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s2 -> s1 [66, 65535] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R938 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R938 += 1 };
  s4 -> s4 [0, 65535] { R938 += 1, R852 += 1, R477 += 1, R478 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R938 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R940 += 1, R853 += 1, R854 += 1 };
  s0 -> s0 [0, 65535] { R939 += 1, R940 += 1 };
  s0 -> s3 [65, 65] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s0 -> s4 [65, 65] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s0 -> s1 [66, 65535] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s1 -> s1 [0, 64] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R940 += 1 };
  s1 -> s3 [65, 65] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s1 -> s4 [65, 65] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s1 -> s1 [66, 65535] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s2 -> s1 [0, 64] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R940 += 1, R853 += 1, R854 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s2 -> s4 [65, 65] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s2 -> s1 [66, 65535] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R940 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R940 += 1, R854 += 1, R483 += 1, R484 += 1 };
  s4 -> s6 [0, 65535] { R940 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R940 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R942 += 1, R856 += 1 };
  s0 -> s0 [0, 65535] { R941 += 1, R942 += 1 };
  s0 -> s2 [0, 65535] { R942 += 1, R855 += 1, R856 += 1 };
  s0 -> s3 [65, 65] { R942 += 1, R856 += 1 };
  s0 -> s4 [65, 65] { R942 += 1, R856 += 1 };
  s0 -> s1 [66, 65535] { R942 += 1, R856 += 1 };
  s1 -> s1 [0, 64] { R942 += 1, R856 += 1 };
  s1 -> s1 [0, 65535] { R942 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R942 += 1, R856 += 1 };
  s1 -> s4 [65, 65] { R942 += 1, R856 += 1 };
  s1 -> s1 [66, 65535] { R942 += 1, R856 += 1 };
  s2 -> s1 [0, 64] { R942 += 1, R856 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R942 += 1, R855 += 1, R856 += 1 };
  s2 -> s3 [65, 65] { R942 += 1, R856 += 1 };
  s2 -> s4 [65, 65] { R942 += 1, R856 += 1 };
  s2 -> s1 [66, 65535] { R942 += 1, R856 += 1 };
  s3 -> s3 [0, 65535] { R942 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R942 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R942 += 1, R856 += 1 };
  s5 -> s5 [0, 65535] { R942 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s0 -> s2 [0, 64] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s0 -> s3 [0, 65535] { R944 += 1, R857 += 1, R858 += 1 };
  s0 -> s0 [0, 65535] { R943 += 1, R944 += 1 };
  s0 -> s4 [65, 65] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s0 -> s5 [65, 65] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s0 -> s6 [65, 65] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s0 -> s7 [65, 65] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s0 -> s1 [66, 79] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s0 -> s2 [66, 65535] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s0 -> s8 [80, 80] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s0 -> s1 [81, 65535] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s1 -> s1 [0, 64] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s1 -> s4 [65, 65] { R944 += 1, R858 += 1 };
  s1 -> s7 [65, 65] { R944 += 1, R858 += 1 };
  s1 -> s1 [66, 79] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s1 -> s1 [66, 65535] { R944 += 1, R858 += 1 };
  s1 -> s8 [80, 80] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s1 -> s1 [81, 65535] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s2 -> s1 [0, 64] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s2 -> s2 [0, 64] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s2 -> s4 [65, 65] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s2 -> s5 [65, 65] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s2 -> s6 [65, 65] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s2 -> s7 [65, 65] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s2 -> s1 [66, 79] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s2 -> s2 [66, 65535] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s2 -> s8 [80, 80] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s2 -> s1 [81, 65535] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s3 -> s1 [0, 64] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s3 -> s2 [0, 64] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s3 -> s3 [0, 65535] { R944 += 1, R857 += 1, R858 += 1 };
  s3 -> s4 [65, 65] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s3 -> s5 [65, 65] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s3 -> s6 [65, 65] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s3 -> s7 [65, 65] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s3 -> s1 [66, 79] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s3 -> s2 [66, 65535] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s3 -> s8 [80, 80] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s3 -> s1 [81, 65535] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s4 -> s4 [0, 79] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s4 -> s4 [0, 65535] { R944 += 1, R858 += 1 };
  s4 -> s11 [80, 80] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s4 -> s4 [81, 65535] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s6 -> s4 [0, 79] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s6 -> s6 [0, 65535] { R944 += 1, R858 += 1, R793 += 1, R794 += 1 };
  s6 -> s11 [80, 80] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s6 -> s4 [81, 65535] { R944 += 1, R858 += 1, R794 += 1, R795 += 1 };
  s8 -> s8 [0, 64] { R944 += 1, R858 += 1 };
  s8 -> s8 [0, 65535] { R944 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R944 += 1, R858 += 1 };
  s8 -> s11 [65, 65] { R944 += 1, R858 += 1 };
  s8 -> s8 [66, 65535] { R944 += 1, R858 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R944 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R944 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R944 += 1, R858 += 1 };
  s12 -> s12 [0, 65535] { R944 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R5 = R822 && R6 = R944 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R61 = 0 && R62 = R822 && R63 = 0 && R64 = R822 && R65 = 0 && R66 = R822 && R67 = 0 && R68 = R944 && R69 = 0 && R70 = R944 && R71 = 0 && R72 = R944 && R88 + R87 + -1*R100 + -1*R98 = 0 && R99 + R97 = 0 && R799 = 0 && R800 = R822 && R801 = 0 && R802 = R822 && R803 = 0 && R804 = R822 && R805 = 0 && R806 = R822 && R807 = 0 && R808 = R822 && R809 = 0 && R810 = R822 && R811 = 0 && R812 = R822 && R813 = 0 && R814 = R822 && R815 = 0 && R816 = R822 && R817 = 0 && R818 = R822 && R819 = 0 && R820 = R822 && R821 = 0 && R823 = 0 && R824 = R944 && R825 = 0 && R826 = R944 && R827 = 0 && R828 = R944 && R829 = 0 && R830 = R944 && R831 = 0 && R832 = R944 && R833 = 0 && R834 = R944 && R835 = 0 && R836 = R944 && R839 = 0 && R840 = 0 && R857 = 0 && R858 = 0 && R873 = 10 && R874 = R944 && R875 = 10 && R876 = R944 && R877 = 10 && R878 = R944 && R879 = 10 && R880 = R944 && R881 = 10 && R882 = R944 && R883 = 10 && R884 = R944 && R885 = 10 && R886 = R944 && R887 = 10 && R888 = R944 && R889 = 10 && R890 = R944 && R891 = 10 && R892 = R944 && R893 = 10 && R894 = R944 && R895 = 10 && R896 = R944 && R897 = 10 && R898 = R944 && R899 = 10 && R900 = R944 && R901 = 10 && R902 = R944 && R903 = 10 && R904 = R944 && R905 = 10 && R906 = R944 && R907 = 10 && R908 = R944 && R909 = 10 && R910 = R944 && R911 = 10 && R912 = R944 && R913 = 10 && R914 = R944 && R915 = 10 && R916 = R944 && R917 = 10 && R918 = R944 && R919 = 10 && R920 = R944 && R921 = 10 && R922 = R944 && R923 = 10 && R924 = R944 && R925 = 10 && R926 = R944 && R927 = 10 && R928 = R944 && R929 = 10 && R930 = R944 && R931 = 10 && R932 = R944 && R933 = 10 && R934 = R944 && R935 = 10 && R936 = R944 && R937 = 10 && R938 = R944 && R939 = 10 && R940 = R944 && R941 = 10 && R942 = R944 && R943 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R482 + R479 + R798 + R795 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R90 + R89 < 1 && -1*R100 + -1*R98 < 1 && -1*R460 + -1*R459 < 1 && R462 + R461 < 1 && 0 < R822 && 9 < R944 && (R96 + R93 != 0 || ((R94 + R91 != 0 || R95 + R92 + -1*R100 + -1*R98 = 0 || R100 + R98 < 1) && (R94 + R91 = 0 || R100 + R98 < 1))) && (R460 + R459 != 0 || R472 + R469 = 0 || (R465 + R463 = 0 && R466 + R464 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R470 + R467 = 0 && R471 + R468 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R475 + R473 = 0 && R476 + R474 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R480 + R477 = 0 && R481 + R478 = 0)) && (R465 + R463 != 0 || R460 + R459 + -1*R466 + -1*R464 = 0 || R460 + R459 < 1) && (R470 + R467 != 0 || R460 + R459 + -1*R471 + -1*R468 = 0 || R460 + R459 < 1) && (R475 + R473 != 0 || R460 + R459 + -1*R476 + -1*R474 = 0 || R460 + R459 < 1) && (R480 + R477 != 0 || R460 + R459 + -1*R481 + -1*R478 = 0 || R460 + R459 < 1) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R33 = 0 || (R81 = 0 && R82 = 0)) && (R34 = 0 || (R837 = 0 && R838 = 0)) && (R34 = 0 || (R841 = 0 && R842 = 0)) && (R34 = 0 || (R843 = 0 && R844 = 0)) && (R34 = 0 || (R845 = 0 && R846 = 0)) && (R34 = 0 || (R847 = 0 && R848 = 0)) && (R34 = 0 || (R849 = 0 && R850 = 0)) && (R34 = 0 || (R851 = 0 && R852 = 0)) && (R34 = 0 || (R853 = 0 && R854 = 0)) && (R34 = 0 || (R855 = 0 && R856 = 0)) && (R37 = 0 || (R859 = 0 && R860 = 0)) && (R37 = 0 || (R861 = 0 && R862 = 0)) && (R37 = 0 || (R863 = 0 && R864 = 0)) && (R37 = 0 || (R865 = 0 && R866 = 0)) && (R37 = 0 || (R867 = 0 && R868 = 0)) && (R37 = 0 || (R869 = 0 && R870 = 0)) && (R37 = 0 || (R871 = 0 && R872 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R38 = 0 || (R85 = 0 && R86 = 0)) && (R96 + R93 = 0 || (R94 + R91 = 0 && R95 + R92 + -1*R100 + -1*R98 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R465 + R463 = 0 || R460 + R459 < 1) && (R470 + R467 = 0 || R460 + R459 < 1) && (R475 + R473 = 0 || R460 + R459 < 1) && (R480 + R477 = 0 || R460 + R459 < 1) && (R488 + R485 = 0 || (R486 + R483 = 0 && R487 + R484 = 0)) && (R488 + R485 = 0 || (R796 + R793 = 0 && R797 + R794 = 0));
// End of Parikh automata intersection problem
