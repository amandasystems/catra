// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R10317, R10318, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10327, R10328, R10329, R10330, R10331, R10332, R10333, R10334, R10335, R10336, R10337, R10338, R10339, R10340, R10341, R10342, R10343, R10344, R10345, R10346, R10347, R10348, R10349, R10350, R10351, R10352, R10353, R10354, R10355, R10356, R10357, R10358, R10359, R10360, R10361, R10362, R10363, R10364, R10365, R10366, R10367, R10368, R10369, R10370, R10371, R10372, R10373, R10374, R10375, R10376, R10377, R10378, R10379, R10380, R10381, R10382, R10383, R10384, R10385, R10386, R10387, R10388, R10389, R10390, R10391, R10392, R10393, R10394, R10395, R10396, R10397, R10398, R10399, R104, R10400, R10401, R10402, R10403, R10404, R10405, R10406, R10407, R10408, R10409, R10410, R10411, R10412, R10413, R10414, R10415, R10416, R10417, R10418, R10419, R10420, R10421, R10422, R10423, R10424, R10425, R10426, R10427, R10428, R10429, R10430, R10431, R10432, R10433, R10434, R10435, R10436, R10437, R10438, R10439, R10440, R10441, R10442, R10443, R10444, R10445, R10446, R10447, R10448, R10449, R10450, R10451, R10452, R10453, R10454, R10455, R10456, R10457, R10458, R10459, R10460, R10461, R10462, R10463, R10464, R10465, R10466, R10467, R10468, R105, R106, R14, R15, R18, R21, R24, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R459, R46, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R5, R6, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R7389, R7390, R7391, R7392, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R9697, R9698, R9699, R97, R9700, R9701, R9702, R9703, R9704, R9705, R9706, R9707, R9708, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R68 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1, R36 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R70 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s2 [108, 108] { R70 += 1 };
  s0 -> s1 [109, 65535] { R70 += 1 };
  s1 -> s1 [0, 65535] { R70 += 1 };
  s1 -> s11 [0, 65535];
  s2 -> s1 [0, 110] { R70 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R70 += 1 };
  s2 -> s1 [112, 65535] { R70 += 1 };
  s3 -> s1 [0, 98] { R70 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R70 += 1 };
  s3 -> s1 [100, 65535] { R70 += 1 };
  s4 -> s1 [0, 96] { R70 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R70 += 1 };
  s4 -> s1 [98, 65535] { R70 += 1 };
  s5 -> s1 [0, 107] { R70 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R70 += 1 };
  s5 -> s1 [109, 65535] { R70 += 1 };
  s6 -> s1 [0, 103] { R70 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R70 += 1 };
  s6 -> s1 [105, 65535] { R70 += 1 };
  s7 -> s1 [0, 110] { R70 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R70 += 1 };
  s7 -> s1 [112, 65535] { R70 += 1 };
  s8 -> s1 [0, 114] { R70 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R70 += 1 };
  s8 -> s1 [116, 65535] { R70 += 1 };
  s9 -> s1 [0, 115] { R70 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R70 += 1 };
  s9 -> s1 [117, 65535] { R70 += 1 };
  s10 -> s1 [0, 65535] { R70 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s1 [0, 65535] { R72 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R72 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R86 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s2 [66, 66] { R86 += 1, R45 += 1 };
  s0 -> s3 [66, 66] { R86 += 1, R45 += 1 };
  s0 -> s1 [67, 65535] { R86 += 1, R45 += 1 };
  s1 -> s1 [0, 65] { R86 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R86 += 1, R45 += 1 };
  s1 -> s3 [66, 66] { R86 += 1, R45 += 1 };
  s1 -> s1 [67, 65535] { R86 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R86 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R10347 += 1, R10348 += 1 };
  s0 -> s1 [0, 65535] { R10348 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10348 += 1, R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R10349 += 1, R10350 += 1 };
  s0 -> s1 [0, 65535] { R10350 += 1, R88 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10350 += 1, R88 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R10352 += 1 };
  s0 -> s0 [0, 65535] { R10351 += 1, R10352 += 1 };
  s0 -> s2 [0, 65535] { R10352 += 1, R90 += 1 };
  s0 -> s1 [78, 65535] { R10352 += 1 };
  s1 -> s1 [0, 76] { R10352 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R10352 += 1 };
  s2 -> s1 [0, 76] { R10352 += 1 };
  s2 -> s2 [0, 65535] { R10352 += 1, R90 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R10352 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R10354 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R10353 += 1, R10354 += 1 };
  s0 -> s2 [0, 65535] { R10354 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R10354 += 1, R94 += 1, R95 += 1 };
  s1 -> s2 [0, 65535] { R10354 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10354 += 1 };
  s2 -> s2 [0, 65535] { R10354 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10354 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10356 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R10355 += 1, R10356 += 1 };
  s0 -> s2 [108, 108] { R10356 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R10356 += 1, R99 += 1, R100 += 1 };
  s1 -> s2 [108, 108] { R10356 += 1, R100 += 1 };
  s2 -> s3 [111, 111] { R10356 += 1, R100 += 1 };
  s3 -> s4 [99, 99] { R10356 += 1, R100 += 1 };
  s4 -> s5 [97, 97] { R10356 += 1, R100 += 1 };
  s5 -> s6 [108, 108] { R10356 += 1, R100 += 1 };
  s6 -> s7 [104, 104] { R10356 += 1, R100 += 1 };
  s7 -> s8 [111, 111] { R10356 += 1, R100 += 1 };
  s8 -> s9 [115, 115] { R10356 += 1, R100 += 1 };
  s9 -> s10 [116, 116] { R10356 += 1, R100 += 1 };
  s10 -> s10 [0, 65535] { R10356 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10357 += 1, R10358 += 1 };
  s0 -> s1 [0, 65535] { R10358 += 1, R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R10358 += 1, R104 += 1, R105 += 1 };
  s1 -> s4 [0, 65535] { R10358 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10358 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10358 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R10358 += 1, R104 += 1, R105 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10358 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10360 += 1 };
  s0 -> s0 [0, 65535] { R10359 += 1, R10360 += 1 };
  s1 -> s1 [0, 65535] { R10360 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R10383 += 1, R10384 += 1 };
  s0 -> s1 [0, 65535] { R10384 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10384 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R10386 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R10385 += 1, R10386 += 1 };
  s0 -> s2 [65, 65] { R10386 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R10386 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R10386 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R10386 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10386 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R10386 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R10386 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10386 += 1, R87 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R10388 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R10387 += 1, R10388 += 1 };
  s0 -> s2 [65, 65] { R10388 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R10388 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R10388 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R10388 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10388 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R10388 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R10388 += 1, R89 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10388 += 1, R89 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R10390 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R10389 += 1, R10390 += 1 };
  s0 -> s2 [65, 65] { R10390 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R10390 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R10390 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R10390 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10390 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R10390 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R10390 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10390 += 1, R91 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R10392 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R10391 += 1, R10392 += 1 };
  s0 -> s2 [65, 65] { R10392 += 1, R97 += 1, R98 += 1 };
  s0 -> s3 [65, 65] { R10392 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [66, 65535] { R10392 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 64] { R10392 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10392 += 1, R97 += 1, R98 += 1 };
  s1 -> s3 [65, 65] { R10392 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [66, 65535] { R10392 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R10392 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10394 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R10393 += 1, R10394 += 1 };
  s0 -> s2 [65, 65] { R10394 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R10394 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R10394 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R10394 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10394 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R10394 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R10394 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10394 += 1, R101 += 1, R102 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R10396 += 1 };
  s0 -> s0 [0, 65535] { R10395 += 1, R10396 += 1 };
  s0 -> s2 [65, 65] { R10396 += 1 };
  s0 -> s3 [65, 65] { R10396 += 1 };
  s0 -> s1 [66, 65535] { R10396 += 1 };
  s1 -> s1 [0, 64] { R10396 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10396 += 1 };
  s1 -> s3 [65, 65] { R10396 += 1 };
  s1 -> s1 [66, 65535] { R10396 += 1 };
  s2 -> s2 [0, 65535] { R10396 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 43] { R10398 += 1 };
  s0 -> s0 [0, 65535] { R10397 += 1, R10398 += 1 };
  s0 -> s1 [45, 45] { R10398 += 1 };
  s0 -> s2 [46, 46] { R10398 += 1 };
  s0 -> s1 [48, 62] { R10398 += 1 };
  s0 -> s3 [65, 65] { R10398 += 1 };
  s0 -> s1 [66, 65535] { R10398 += 1 };
  s1 -> s1 [0, 43] { R10398 += 1 };
  s1 -> s1 [45, 45] { R10398 += 1 };
  s1 -> s2 [46, 46] { R10398 += 1 };
  s1 -> s1 [48, 62] { R10398 += 1 };
  s1 -> s3 [65, 65] { R10398 += 1 };
  s1 -> s1 [66, 65535] { R10398 += 1 };
  s2 -> s1 [0, 43] { R10398 += 1 };
  s2 -> s1 [45, 45] { R10398 += 1 };
  s2 -> s2 [46, 46] { R10398 += 1 };
  s2 -> s1 [48, 62] { R10398 += 1 };
  s2 -> s3 [65, 65] { R10398 += 1 };
  s2 -> s1 [66, 114] { R10398 += 1 };
  s2 -> s8 [115, 115] { R10398 += 1 };
  s2 -> s1 [116, 65535] { R10398 += 1 };
  s3 -> s3 [0, 43] { R10398 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10398 += 1 };
  s3 -> s4 [46, 46] { R10398 += 1 };
  s3 -> s3 [48, 62] { R10398 += 1 };
  s3 -> s3 [65, 65535] { R10398 += 1 };
  s4 -> s3 [0, 43] { R10398 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10398 += 1 };
  s4 -> s4 [46, 46] { R10398 += 1 };
  s4 -> s3 [48, 62] { R10398 += 1 };
  s4 -> s3 [65, 114] { R10398 += 1 };
  s4 -> s5 [115, 115] { R10398 += 1 };
  s4 -> s3 [116, 65535] { R10398 += 1 };
  s5 -> s3 [0, 43] { R10398 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10398 += 1 };
  s5 -> s4 [46, 46] { R10398 += 1 };
  s5 -> s3 [48, 62] { R10398 += 1 };
  s5 -> s3 [65, 110] { R10398 += 1 };
  s5 -> s6 [111, 111] { R10398 += 1 };
  s5 -> s3 [112, 65535] { R10398 += 1 };
  s6 -> s3 [0, 43] { R10398 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10398 += 1 };
  s6 -> s4 [46, 46] { R10398 += 1 };
  s6 -> s3 [48, 62] { R10398 += 1 };
  s6 -> s3 [65, 98] { R10398 += 1 };
  s6 -> s7 [99, 99] { R10398 += 1 };
  s6 -> s3 [100, 65535] { R10398 += 1 };
  s7 -> s3 [0, 43] { R10398 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10398 += 1 };
  s7 -> s4 [46, 46] { R10398 += 1 };
  s7 -> s3 [48, 62] { R10398 += 1 };
  s7 -> s3 [65, 106] { R10398 += 1 };
  s7 -> s3 [108, 65535] { R10398 += 1 };
  s8 -> s1 [0, 43] { R10398 += 1 };
  s8 -> s1 [45, 45] { R10398 += 1 };
  s8 -> s2 [46, 46] { R10398 += 1 };
  s8 -> s1 [48, 62] { R10398 += 1 };
  s8 -> s3 [65, 65] { R10398 += 1 };
  s8 -> s1 [66, 110] { R10398 += 1 };
  s8 -> s9 [111, 111] { R10398 += 1 };
  s8 -> s1 [112, 65535] { R10398 += 1 };
  s9 -> s1 [0, 43] { R10398 += 1 };
  s9 -> s1 [45, 45] { R10398 += 1 };
  s9 -> s2 [46, 46] { R10398 += 1 };
  s9 -> s1 [48, 62] { R10398 += 1 };
  s9 -> s3 [65, 65] { R10398 += 1 };
  s9 -> s1 [66, 98] { R10398 += 1 };
  s9 -> s10 [99, 99] { R10398 += 1 };
  s9 -> s1 [100, 65535] { R10398 += 1 };
  s10 -> s1 [0, 43] { R10398 += 1 };
  s10 -> s1 [45, 45] { R10398 += 1 };
  s10 -> s2 [46, 46] { R10398 += 1 };
  s10 -> s1 [48, 62] { R10398 += 1 };
  s10 -> s3 [65, 65] { R10398 += 1 };
  s10 -> s1 [66, 106] { R10398 += 1 };
  s10 -> s1 [108, 65535] { R10398 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10399 += 1, R10400 += 1 };
  s0 -> s1 [0, 65535] { R10400 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10400 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 57] { R10402 += 1 };
  s0 -> s2 [0, 65535] { R10402 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R10401 += 1, R10402 += 1 };
  s0 -> s3 [58, 58] { R10402 += 1 };
  s0 -> s1 [59, 65535] { R10402 += 1 };
  s1 -> s1 [0, 57] { R10402 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10402 += 1 };
  s1 -> s1 [59, 65535] { R10402 += 1 };
  s2 -> s1 [0, 57] { R10402 += 1 };
  s2 -> s2 [0, 65535] { R10402 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R10402 += 1 };
  s2 -> s1 [59, 65535] { R10402 += 1 };
  s3 -> s3 [0, 65535] { R10402 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 42] { R10404 += 1 };
  s0 -> s2 [0, 65535] { R10404 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R10403 += 1, R10404 += 1 };
  s0 -> s3 [43, 43] { R10404 += 1 };
  s0 -> s1 [44, 65535] { R10404 += 1 };
  s1 -> s1 [0, 42] { R10404 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R10404 += 1 };
  s1 -> s1 [44, 65535] { R10404 += 1 };
  s2 -> s1 [0, 42] { R10404 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10404 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R10404 += 1 };
  s2 -> s1 [44, 65535] { R10404 += 1 };
  s3 -> s3 [0, 65535] { R10404 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10406 += 1 };
  s0 -> s2 [0, 65535] { R10406 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R10405 += 1, R10406 += 1 };
  s0 -> s3 [65, 65] { R10406 += 1 };
  s0 -> s1 [66, 65535] { R10406 += 1 };
  s1 -> s1 [0, 64] { R10406 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10406 += 1 };
  s1 -> s1 [66, 65535] { R10406 += 1 };
  s2 -> s1 [0, 64] { R10406 += 1 };
  s2 -> s2 [0, 65535] { R10406 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R10406 += 1 };
  s2 -> s1 [66, 65535] { R10406 += 1 };
  s3 -> s3 [0, 65535] { R10406 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 90] { R10408 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10407 += 1, R10408 += 1 };
  s0 -> s2 [0, 65535] { R10408 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [91, 91] { R10408 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R10408 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10408 += 1 };
  s1 -> s1 [0, 65535] { R10408 += 1, R40 += 1 };
  s2 -> s1 [0, 90] { R10408 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R10408 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10408 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R10408 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R10408 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10408 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10409 += 1, R10410 += 1 };
  s0 -> s1 [0, 65535] { R10410 += 1, R42 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R10410 += 1, R41 += 1, R42 += 1 };
  s1 -> s4 [0, 65535] { R10410 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10410 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10410 += 1, R42 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R10410 += 1, R41 += 1, R42 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10410 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 65535] { R10412 += 1, R62 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R10412 += 1, R61 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R10411 += 1, R10412 += 1 };
  s1 -> s1 [0, 65535] { R10412 += 1, R62 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10412 += 1 };
  s2 -> s1 [0, 65535] { R10412 += 1, R62 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R10412 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10412 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 107] { R10414 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R10413 += 1, R10414 += 1 };
  s0 -> s2 [0, 65535] { R10414 += 1, R63 += 1, R64 += 1 };
  s0 -> s3 [108, 108] { R10414 += 1, R64 += 1 };
  s0 -> s1 [109, 65535] { R10414 += 1, R64 += 1 };
  s1 -> s13 [0, 65535] { R10414 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10414 += 1, R64 += 1 };
  s2 -> s1 [0, 107] { R10414 += 1, R64 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10414 += 1, R63 += 1, R64 += 1 };
  s2 -> s3 [108, 108] { R10414 += 1, R64 += 1 };
  s2 -> s1 [109, 65535] { R10414 += 1, R64 += 1 };
  s3 -> s1 [0, 110] { R10414 += 1, R64 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10414 += 1 };
  s3 -> s5 [111, 111] { R10414 += 1, R64 += 1 };
  s3 -> s1 [112, 65535] { R10414 += 1, R64 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10414 += 1, R64 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10414 += 1 };
  s5 -> s6 [99, 99] { R10414 += 1, R64 += 1 };
  s5 -> s1 [100, 65535] { R10414 += 1, R64 += 1 };
  s6 -> s1 [0, 96] { R10414 += 1, R64 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10414 += 1 };
  s6 -> s7 [97, 97] { R10414 += 1, R64 += 1 };
  s6 -> s1 [98, 65535] { R10414 += 1, R64 += 1 };
  s7 -> s1 [0, 107] { R10414 += 1, R64 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R10414 += 1 };
  s7 -> s8 [108, 108] { R10414 += 1, R64 += 1 };
  s7 -> s1 [109, 65535] { R10414 += 1, R64 += 1 };
  s8 -> s1 [0, 103] { R10414 += 1, R64 += 1 };
  s8 -> s8 [0, 65535] { R10414 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R10414 += 1, R64 += 1 };
  s8 -> s1 [105, 65535] { R10414 += 1, R64 += 1 };
  s9 -> s1 [0, 110] { R10414 += 1, R64 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R10414 += 1 };
  s9 -> s10 [111, 111] { R10414 += 1, R64 += 1 };
  s9 -> s1 [112, 65535] { R10414 += 1, R64 += 1 };
  s10 -> s1 [0, 114] { R10414 += 1, R64 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R10414 += 1 };
  s10 -> s11 [115, 115] { R10414 += 1, R64 += 1 };
  s10 -> s1 [116, 65535] { R10414 += 1, R64 += 1 };
  s11 -> s1 [0, 115] { R10414 += 1, R64 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10414 += 1 };
  s11 -> s12 [116, 116] { R10414 += 1, R64 += 1 };
  s11 -> s1 [117, 65535] { R10414 += 1, R64 += 1 };
  s12 -> s1 [0, 65535] { R10414 += 1, R64 += 1 };
  s13 -> s13 [0, 65535] { R10414 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65535] { R10416 += 1, R66 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R10416 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10415 += 1, R10416 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10416 += 1, R66 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R10416 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10416 += 1, R66 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R10416 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10416 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R10417 += 1, R10418 += 1 };
  s0 -> s1 [0, 65535] { R10418 += 1, R79 += 1, R80 += 1 };
  s0 -> s2 [0, 65535] { R10418 += 1, R80 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10418 += 1, R79 += 1, R80 += 1 };
  s1 -> s2 [0, 65535] { R10418 += 1, R80 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10418 += 1 };
  s2 -> s2 [0, 65535] { R10418 += 1, R80 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10418 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s0 [0, 65535] { R10419 += 1, R10420 += 1 };
  s0 -> s1 [0, 65535] { R10420 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10420 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 42] { R10422 += 1, R82 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10421 += 1, R10422 += 1 };
  s0 -> s2 [0, 65535] { R10422 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [43, 43] { R10422 += 1, R82 += 1, R43 += 1 };
  s0 -> s4 [43, 43] { R10422 += 1, R82 += 1, R43 += 1 };
  s0 -> s1 [44, 65535] { R10422 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [0, 42] { R10422 += 1, R82 += 1, R43 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10422 += 1 };
  s1 -> s3 [43, 43] { R10422 += 1, R82 += 1, R43 += 1 };
  s1 -> s4 [43, 43] { R10422 += 1, R82 += 1, R43 += 1 };
  s1 -> s1 [44, 65535] { R10422 += 1, R82 += 1, R43 += 1 };
  s2 -> s1 [0, 42] { R10422 += 1, R82 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10422 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R10422 += 1, R82 += 1, R43 += 1 };
  s2 -> s4 [43, 43] { R10422 += 1, R82 += 1, R43 += 1 };
  s2 -> s1 [44, 65535] { R10422 += 1, R82 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R10422 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10422 += 1, R82 += 1, R43 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10422 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10422 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10424 += 1, R10324 += 1 };
  s0 -> s2 [0, 65535] { R10424 += 1, R10323 += 1, R10324 += 1 };
  s0 -> s0 [0, 65535] { R10423 += 1, R10424 += 1 };
  s0 -> s1 [66, 65535] { R10424 += 1, R10324 += 1 };
  s1 -> s1 [0, 64] { R10424 += 1, R10324 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10424 += 1 };
  s1 -> s1 [66, 65535] { R10424 += 1, R10324 += 1 };
  s2 -> s1 [0, 64] { R10424 += 1, R10324 += 1 };
  s2 -> s2 [0, 65535] { R10424 += 1, R10323 += 1, R10324 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10424 += 1, R10324 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R10425 += 1, R10426 += 1 };
  s0 -> s1 [0, 65535] { R10426 += 1, R10326 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R10426 += 1, R10325 += 1, R10326 += 1 };
  s1 -> s1 [0, 65535] { R10426 += 1, R10326 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R10426 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10426 += 1, R10326 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R10426 += 1, R10325 += 1, R10326 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10426 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R10428 += 1, R10328 += 1 };
  s0 -> s0 [0, 65535] { R10427 += 1, R10428 += 1 };
  s0 -> s2 [0, 65535] { R10428 += 1, R10327 += 1, R10328 += 1 };
  s0 -> s1 [80, 65535] { R10428 += 1, R10328 += 1 };
  s1 -> s1 [0, 65] { R10428 += 1, R10328 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10428 += 1 };
  s1 -> s1 [80, 65535] { R10428 += 1, R10328 += 1 };
  s2 -> s1 [0, 65] { R10428 += 1, R10328 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10428 += 1, R10327 += 1, R10328 += 1 };
  s2 -> s1 [80, 65535] { R10428 += 1, R10328 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R10429 += 1, R10430 += 1 };
  s0 -> s1 [0, 65535] { R10430 += 1, R10329 += 1, R10330 += 1 };
  s0 -> s2 [0, 65535] { R10430 += 1, R10330 += 1, R460 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10430 += 1, R10329 += 1, R10330 += 1 };
  s1 -> s2 [0, 65535] { R10430 += 1, R10330 += 1, R460 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10430 += 1 };
  s2 -> s2 [0, 65535] { R10430 += 1, R10330 += 1, R460 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10430 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 79] { R10432 += 1, R10332 += 1 };
  s0 -> s2 [0, 65535] { R10432 += 1, R10331 += 1, R10332 += 1 };
  s0 -> s0 [0, 65535] { R10431 += 1, R10432 += 1 };
  s0 -> s3 [0, 65535] { R10432 += 1, R10332 += 1, R462 += 1 };
  s0 -> s1 [81, 65535] { R10432 += 1, R10332 += 1 };
  s1 -> s1 [0, 79] { R10432 += 1, R10332 += 1 };
  s1 -> s1 [0, 65535] { R10432 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R10432 += 1, R10332 += 1 };
  s2 -> s1 [0, 79] { R10432 += 1, R10332 += 1 };
  s2 -> s2 [0, 65535] { R10432 += 1, R10331 += 1, R10332 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10432 += 1, R10332 += 1, R462 += 1 };
  s2 -> s1 [81, 65535] { R10432 += 1, R10332 += 1 };
  s3 -> s1 [0, 79] { R10432 += 1, R10332 += 1 };
  s3 -> s4 [0, 65535] { R10432 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10432 += 1, R10332 += 1, R462 += 1 };
  s3 -> s1 [81, 65535] { R10432 += 1, R10332 += 1 };
  s4 -> s4 [0, 65535] { R10432 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R10434 += 1, R10334 += 1, R466 += 1 };
  s0 -> s2 [0, 65535] { R10434 += 1, R10334 += 1, R465 += 1, R466 += 1 };
  s0 -> s0 [0, 65535] { R10433 += 1, R10434 += 1 };
  s0 -> s3 [0, 65535] { R10434 += 1, R10333 += 1, R10334 += 1 };
  s0 -> s1 [81, 65535] { R10434 += 1, R10334 += 1, R466 += 1 };
  s1 -> s1 [0, 79] { R10434 += 1, R10334 += 1, R466 += 1 };
  s1 -> s1 [0, 65535] { R10434 += 1, R10334 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10434 += 1 };
  s1 -> s1 [81, 65535] { R10434 += 1, R10334 += 1, R466 += 1 };
  s2 -> s1 [0, 79] { R10434 += 1, R10334 += 1, R466 += 1 };
  s2 -> s2 [0, 65535] { R10434 += 1, R10334 += 1, R465 += 1, R466 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10434 += 1 };
  s2 -> s1 [81, 65535] { R10434 += 1, R10334 += 1, R466 += 1 };
  s3 -> s1 [0, 79] { R10434 += 1, R10334 += 1, R466 += 1 };
  s3 -> s2 [0, 65535] { R10434 += 1, R10334 += 1, R465 += 1, R466 += 1 };
  s3 -> s3 [0, 65535] { R10434 += 1, R10333 += 1, R10334 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R10434 += 1, R10334 += 1, R466 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10434 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10436 += 1, R10336 += 1, R471 += 1, R472 += 1 };
  s0 -> s0 [0, 65535] { R10435 += 1, R10436 += 1 };
  s0 -> s2 [0, 65535] { R10436 += 1, R10335 += 1, R10336 += 1 };
  s0 -> s3 [0, 65535] { R10436 += 1, R10336 += 1, R470 += 1, R471 += 1 };
  s1 -> s1 [0, 65535] { R10436 += 1, R10336 += 1, R471 += 1, R472 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10436 += 1 };
  s1 -> s6 [0, 65535] { R10436 += 1, R10336 += 1 };
  s2 -> s1 [0, 65535] { R10436 += 1, R10336 += 1, R471 += 1, R472 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10436 += 1, R10335 += 1, R10336 += 1 };
  s2 -> s3 [0, 65535] { R10436 += 1, R10336 += 1, R470 += 1, R471 += 1 };
  s3 -> s1 [0, 65535] { R10436 += 1, R10336 += 1, R471 += 1, R472 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10436 += 1 };
  s3 -> s3 [0, 65535] { R10436 += 1, R10336 += 1, R470 += 1, R471 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10436 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10436 += 1 };
  s6 -> s6 [0, 65535] { R10436 += 1, R10336 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 80] { R10438 += 1, R10338 += 1, R7392 += 1 };
  s0 -> s0 [0, 65535] { R10437 += 1, R10438 += 1 };
  s0 -> s2 [0, 65535] { R10438 += 1, R10337 += 1, R10338 += 1 };
  s0 -> s1 [0, 65535] { R10438 += 1, R10338 += 1 };
  s0 -> s1 [91, 65535] { R10438 += 1, R10338 += 1, R7392 += 1 };
  s1 -> s1 [0, 80] { R10438 += 1, R10338 += 1, R7392 += 1 };
  s1 -> s4 [0, 65535] { R10438 += 1 };
  s1 -> s1 [0, 65535] { R10438 += 1, R10338 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R10438 += 1, R10338 += 1, R7392 += 1 };
  s2 -> s1 [0, 80] { R10438 += 1, R10338 += 1, R7392 += 1 };
  s2 -> s2 [0, 65535] { R10438 += 1, R10337 += 1, R10338 += 1 };
  s2 -> s1 [0, 65535] { R10438 += 1, R10338 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R10438 += 1, R10338 += 1, R7392 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10438 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R10440 += 1, R10339 += 1, R10340 += 1 };
  s0 -> s2 [0, 65535] { R10440 += 1, R10340 += 1, R9701 += 1, R9702 += 1 };
  s0 -> s3 [0, 65535] { R10440 += 1, R10340 += 1 };
  s0 -> s0 [0, 65535] { R10439 += 1, R10440 += 1 };
  s1 -> s1 [0, 65535] { R10440 += 1, R10339 += 1, R10340 += 1 };
  s1 -> s2 [0, 65535] { R10440 += 1, R10340 += 1, R9701 += 1, R9702 += 1 };
  s1 -> s3 [0, 65535] { R10440 += 1, R10340 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10440 += 1, R10340 += 1, R9701 += 1, R9702 += 1 };
  s2 -> s3 [0, 65535] { R10440 += 1, R10340 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10440 += 1 };
  s3 -> s3 [0, 65535] { R10440 += 1, R10340 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10440 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10440 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R10442 += 1, R10342 += 1, R9707 += 1, R9708 += 1 };
  s0 -> s2 [0, 65535] { R10442 += 1, R10342 += 1, R9706 += 1, R9707 += 1 };
  s0 -> s0 [0, 65535] { R10441 += 1, R10442 += 1 };
  s0 -> s3 [0, 65535] { R10442 += 1, R10341 += 1, R10342 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10442 += 1, R10342 += 1, R9707 += 1, R9708 += 1 };
  s1 -> s5 [0, 65535] { R10442 += 1 };
  s1 -> s6 [0, 65535] { R10442 += 1, R10342 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10442 += 1, R10342 += 1, R9707 += 1, R9708 += 1 };
  s2 -> s2 [0, 65535] { R10442 += 1, R10342 += 1, R9706 += 1, R9707 += 1 };
  s2 -> s5 [0, 65535] { R10442 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10442 += 1, R10342 += 1, R9707 += 1, R9708 += 1 };
  s3 -> s2 [0, 65535] { R10442 += 1, R10342 += 1, R9706 += 1, R9707 += 1 };
  s3 -> s3 [0, 65535] { R10442 += 1, R10341 += 1, R10342 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10442 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10442 += 1 };
  s6 -> s6 [0, 65535] { R10442 += 1, R10342 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R10444 += 1, R10344 += 1 };
  s0 -> s0 [0, 65535] { R10443 += 1, R10444 += 1 };
  s0 -> s2 [0, 65535] { R10444 += 1, R10343 += 1, R10344 += 1 };
  s1 -> s1 [0, 65535] { R10444 += 1, R10344 += 1 };
  s1 -> s4 [0, 65535] { R10444 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10444 += 1, R10344 += 1 };
  s2 -> s2 [0, 65535] { R10444 += 1, R10343 += 1, R10344 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10444 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R10445 += 1, R10446 += 1 };
  s0 -> s1 [0, 65535] { R10446 += 1, R10345 += 1, R10346 += 1 };
  s0 -> s2 [0, 65535] { R10446 += 1, R10346 += 1 };
  s1 -> s1 [0, 65535] { R10446 += 1, R10345 += 1, R10346 += 1 };
  s1 -> s2 [0, 65535] { R10446 += 1, R10346 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10446 += 1, R10346 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10446 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10446 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R10447 += 1, R10448 += 1 };
  s0 -> s1 [0, 65535] { R10448 += 1, R10362 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R10448 += 1, R10361 += 1, R10362 += 1 };
  s1 -> s1 [0, 65535] { R10448 += 1, R10362 += 1, R34 += 1 };
  s1 -> s4 [0, 65535] { R10448 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10448 += 1, R10362 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R10448 += 1, R10361 += 1, R10362 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10448 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10450 += 1, R10364 += 1 };
  s0 -> s2 [0, 65535] { R10450 += 1, R10363 += 1, R10364 += 1 };
  s0 -> s0 [0, 65535] { R10449 += 1, R10450 += 1 };
  s0 -> s3 [65, 65] { R10450 += 1, R10364 += 1 };
  s0 -> s4 [65, 65] { R10450 += 1, R10364 += 1 };
  s0 -> s5 [80, 80] { R10450 += 1, R10364 += 1 };
  s0 -> s1 [81, 65535] { R10450 += 1, R10364 += 1 };
  s1 -> s1 [0, 64] { R10450 += 1, R10364 += 1 };
  s1 -> s3 [65, 65] { R10450 += 1, R10364 += 1 };
  s1 -> s4 [65, 65] { R10450 += 1, R10364 += 1 };
  s1 -> s5 [80, 80] { R10450 += 1, R10364 += 1 };
  s1 -> s1 [81, 65535] { R10450 += 1, R10364 += 1 };
  s2 -> s1 [0, 64] { R10450 += 1, R10364 += 1 };
  s2 -> s2 [0, 65535] { R10450 += 1, R10363 += 1, R10364 += 1 };
  s2 -> s3 [65, 65] { R10450 += 1, R10364 += 1 };
  s2 -> s4 [65, 65] { R10450 += 1, R10364 += 1 };
  s2 -> s5 [80, 80] { R10450 += 1, R10364 += 1 };
  s2 -> s1 [81, 65535] { R10450 += 1, R10364 += 1 };
  s4 -> s4 [0, 65] { R10450 += 1, R10364 += 1 };
  s4 -> s7 [80, 80] { R10450 += 1, R10364 += 1 };
  s4 -> s4 [81, 65535] { R10450 += 1, R10364 += 1 };
  s5 -> s5 [0, 64] { R10450 += 1, R10364 += 1 };
  s5 -> s5 [0, 65535] { R10450 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R10450 += 1, R10364 += 1 };
  s5 -> s8 [65, 65] { R10450 += 1, R10364 += 1 };
  s5 -> s5 [80, 65535] { R10450 += 1, R10364 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10450 += 1, R10364 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10450 += 1 };
  s7 -> s7 [80, 65535] { R10450 += 1, R10364 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10450 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10452 += 1, R10366 += 1, R459 += 1 };
  s0 -> s2 [0, 65535] { R10452 += 1, R10365 += 1, R10366 += 1 };
  s0 -> s0 [0, 65535] { R10451 += 1, R10452 += 1 };
  s0 -> s3 [65, 65] { R10452 += 1, R10366 += 1, R459 += 1 };
  s0 -> s4 [65, 65] { R10452 += 1, R10366 += 1, R459 += 1 };
  s0 -> s1 [66, 65535] { R10452 += 1, R10366 += 1, R459 += 1 };
  s1 -> s1 [0, 64] { R10452 += 1, R10366 += 1, R459 += 1 };
  s1 -> s1 [0, 65535] { R10452 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10452 += 1, R10366 += 1, R459 += 1 };
  s1 -> s4 [65, 65] { R10452 += 1, R10366 += 1, R459 += 1 };
  s1 -> s1 [66, 65535] { R10452 += 1, R10366 += 1, R459 += 1 };
  s2 -> s1 [0, 64] { R10452 += 1, R10366 += 1, R459 += 1 };
  s2 -> s2 [0, 65535] { R10452 += 1, R10365 += 1, R10366 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10452 += 1, R10366 += 1, R459 += 1 };
  s2 -> s4 [65, 65] { R10452 += 1, R10366 += 1, R459 += 1 };
  s2 -> s1 [66, 65535] { R10452 += 1, R10366 += 1, R459 += 1 };
  s3 -> s3 [0, 65535] { R10452 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10452 += 1 };
  s4 -> s4 [0, 65535] { R10452 += 1, R10366 += 1, R459 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10452 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10454 += 1, R10368 += 1, R461 += 1 };
  s0 -> s0 [0, 65535] { R10453 += 1, R10454 += 1 };
  s0 -> s2 [0, 65535] { R10454 += 1, R10367 += 1, R10368 += 1 };
  s0 -> s3 [65, 65] { R10454 += 1, R10368 += 1, R461 += 1 };
  s0 -> s4 [65, 65] { R10454 += 1, R10368 += 1, R461 += 1 };
  s0 -> s1 [66, 65535] { R10454 += 1, R10368 += 1, R461 += 1 };
  s1 -> s1 [0, 64] { R10454 += 1, R10368 += 1, R461 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10454 += 1 };
  s1 -> s3 [65, 65] { R10454 += 1, R10368 += 1, R461 += 1 };
  s1 -> s4 [65, 65] { R10454 += 1, R10368 += 1, R461 += 1 };
  s1 -> s1 [66, 65535] { R10454 += 1, R10368 += 1, R461 += 1 };
  s2 -> s1 [0, 64] { R10454 += 1, R10368 += 1, R461 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10454 += 1, R10367 += 1, R10368 += 1 };
  s2 -> s3 [65, 65] { R10454 += 1, R10368 += 1, R461 += 1 };
  s2 -> s4 [65, 65] { R10454 += 1, R10368 += 1, R461 += 1 };
  s2 -> s1 [66, 65535] { R10454 += 1, R10368 += 1, R461 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10454 += 1, R10368 += 1, R461 += 1 };
  s3 -> s6 [0, 65535] { R10454 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10454 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10454 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s0 -> s0 [0, 65535] { R10455 += 1, R10456 += 1 };
  s0 -> s2 [0, 65535] { R10456 += 1, R10369 += 1, R10370 += 1 };
  s0 -> s3 [65, 65] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s0 -> s4 [65, 65] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s0 -> s1 [66, 65535] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s1 -> s1 [0, 64] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s1 -> s1 [0, 65535] { R10456 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s1 -> s4 [65, 65] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s1 -> s1 [66, 65535] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s2 -> s1 [0, 64] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s2 -> s2 [0, 65535] { R10456 += 1, R10369 += 1, R10370 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s2 -> s4 [65, 65] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s2 -> s1 [66, 65535] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s3 -> s3 [0, 65535] { R10456 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10456 += 1 };
  s4 -> s4 [0, 65535] { R10456 += 1, R10370 += 1, R463 += 1, R464 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10456 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s0 -> s2 [0, 65535] { R10458 += 1, R10371 += 1, R10372 += 1 };
  s0 -> s0 [0, 65535] { R10457 += 1, R10458 += 1 };
  s0 -> s3 [65, 65] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s0 -> s4 [65, 65] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s0 -> s1 [66, 65535] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [0, 64] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10458 += 1 };
  s1 -> s3 [65, 65] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s1 -> s4 [65, 65] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s1 -> s1 [66, 65535] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [0, 64] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10458 += 1, R10371 += 1, R10372 += 1 };
  s2 -> s3 [65, 65] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s2 -> s4 [65, 65] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s2 -> s1 [66, 65535] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s3 -> s3 [0, 65535] { R10458 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10458 += 1, R10372 += 1, R467 += 1, R468 += 1 };
  s4 -> s6 [0, 65535] { R10458 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10458 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s0 -> s2 [0, 64] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s0 -> s3 [0, 65535] { R10460 += 1, R10373 += 1, R10374 += 1 };
  s0 -> s0 [0, 65535] { R10459 += 1, R10460 += 1 };
  s0 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s0 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s0 -> s6 [65, 65] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s0 -> s7 [65, 65] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s0 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s0 -> s2 [66, 65535] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s0 -> s1 [91, 107] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s0 -> s8 [108, 108] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s0 -> s1 [109, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s1 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s1 -> s1 [0, 65535] { R10460 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s4 [65, 65] { R10460 += 1, R10374 += 1 };
  s1 -> s5 [65, 65] { R10460 += 1, R10374 += 1 };
  s1 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s1 -> s1 [66, 65535] { R10460 += 1, R10374 += 1 };
  s1 -> s1 [91, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s2 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s2 -> s2 [0, 64] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s2 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s2 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s2 -> s6 [65, 65] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s2 -> s7 [65, 65] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s2 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s2 -> s2 [66, 65535] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s2 -> s1 [91, 107] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s2 -> s8 [108, 108] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s2 -> s1 [109, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s3 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s3 -> s2 [0, 64] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s3 -> s3 [0, 65535] { R10460 += 1, R10373 += 1, R10374 += 1 };
  s3 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s3 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s3 -> s6 [65, 65] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s3 -> s7 [65, 65] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s3 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s3 -> s2 [66, 65535] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s3 -> s1 [91, 107] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s3 -> s8 [108, 108] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s3 -> s1 [109, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s4 -> s4 [0, 65535] { R10460 += 1 };
  s4 -> s34 [0, 65535];
  s5 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s5 -> s5 [0, 65535] { R10460 += 1, R10374 += 1 };
  s5 -> s34 [0, 65535];
  s5 -> s35 [0, 65535] { R10460 += 1 };
  s5 -> s5 [91, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s7 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s7 -> s7 [0, 65535] { R10460 += 1, R10374 += 1, R7389 += 1, R7390 += 1 };
  s7 -> s5 [91, 107] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s7 -> s10 [108, 108] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s7 -> s5 [109, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s8 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s8 -> s8 [0, 64] { R10460 += 1, R10374 += 1 };
  s8 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s8 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s8 -> s9 [65, 65] { R10460 += 1, R10374 += 1 };
  s8 -> s10 [65, 65] { R10460 += 1, R10374 += 1 };
  s8 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s8 -> s8 [66, 65535] { R10460 += 1, R10374 += 1 };
  s8 -> s1 [91, 110] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s8 -> s11 [111, 111] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s8 -> s1 [112, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s10 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s10 -> s10 [0, 65535] { R10460 += 1, R10374 += 1 };
  s10 -> s5 [91, 110] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s10 -> s13 [111, 111] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s10 -> s5 [112, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s11 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s11 -> s11 [0, 64] { R10460 += 1, R10374 += 1 };
  s11 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s11 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s11 -> s12 [65, 65] { R10460 += 1, R10374 += 1 };
  s11 -> s13 [65, 65] { R10460 += 1, R10374 += 1 };
  s11 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s11 -> s11 [66, 65535] { R10460 += 1, R10374 += 1 };
  s11 -> s1 [91, 98] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s11 -> s14 [99, 99] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s11 -> s1 [100, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s13 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s13 -> s13 [0, 65535] { R10460 += 1, R10374 += 1 };
  s13 -> s5 [91, 98] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s13 -> s17 [99, 99] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s13 -> s5 [100, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s14 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s14 -> s14 [0, 64] { R10460 += 1, R10374 += 1 };
  s14 -> s15 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s14 -> s16 [65, 65] { R10460 += 1, R10374 += 1 };
  s14 -> s17 [65, 65] { R10460 += 1, R10374 += 1 };
  s14 -> s18 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s14 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s14 -> s14 [66, 65535] { R10460 += 1, R10374 += 1 };
  s14 -> s1 [91, 96] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s14 -> s19 [97, 97] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s14 -> s1 [98, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s17 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s17 -> s17 [0, 65535] { R10460 += 1, R10374 += 1 };
  s17 -> s5 [91, 96] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s17 -> s18 [97, 97] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s17 -> s5 [98, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s18 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s18 -> s18 [0, 65535] { R10460 += 1, R10374 += 1 };
  s18 -> s5 [91, 107] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s18 -> s21 [108, 108] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s18 -> s5 [109, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s19 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s19 -> s19 [0, 64] { R10460 += 1, R10374 += 1 };
  s19 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s19 -> s15 [65, 65] { R10460 += 1, R10374 += 1 };
  s19 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s19 -> s18 [65, 65] { R10460 += 1, R10374 += 1 };
  s19 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s19 -> s19 [66, 65535] { R10460 += 1, R10374 += 1 };
  s19 -> s1 [91, 107] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s19 -> s20 [108, 108] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s19 -> s1 [109, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s20 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s20 -> s20 [0, 64] { R10460 += 1, R10374 += 1 };
  s20 -> s21 [65, 65] { R10460 += 1, R10374 += 1 };
  s20 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s20 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s20 -> s22 [65, 65] { R10460 += 1, R10374 += 1 };
  s20 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s20 -> s20 [66, 65535] { R10460 += 1, R10374 += 1 };
  s20 -> s1 [91, 103] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s20 -> s23 [104, 104] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s20 -> s1 [105, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s21 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s21 -> s21 [0, 65535] { R10460 += 1, R10374 += 1 };
  s21 -> s5 [91, 103] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s21 -> s24 [104, 104] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s21 -> s5 [105, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s23 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s23 -> s23 [0, 64] { R10460 += 1, R10374 += 1 };
  s23 -> s24 [65, 65] { R10460 += 1, R10374 += 1 };
  s23 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s23 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s23 -> s25 [65, 65] { R10460 += 1, R10374 += 1 };
  s23 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s23 -> s23 [66, 65535] { R10460 += 1, R10374 += 1 };
  s23 -> s1 [91, 110] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s23 -> s26 [111, 111] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s23 -> s1 [112, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s24 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s24 -> s24 [0, 65535] { R10460 += 1, R10374 += 1 };
  s24 -> s5 [91, 110] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s24 -> s28 [111, 111] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s24 -> s5 [112, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s26 -> s26 [0, 64] { R10460 += 1, R10374 += 1 };
  s26 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s26 -> s27 [65, 65] { R10460 += 1, R10374 += 1 };
  s26 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s26 -> s28 [65, 65] { R10460 += 1, R10374 += 1 };
  s26 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s26 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s26 -> s26 [66, 65535] { R10460 += 1, R10374 += 1 };
  s26 -> s1 [91, 114] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s26 -> s29 [115, 115] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s26 -> s1 [116, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s28 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s28 -> s28 [0, 65535] { R10460 += 1, R10374 += 1 };
  s28 -> s5 [91, 114] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s28 -> s31 [115, 115] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s28 -> s5 [116, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s29 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s29 -> s29 [0, 64] { R10460 += 1, R10374 += 1 };
  s29 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s29 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s29 -> s30 [65, 65] { R10460 += 1, R10374 += 1 };
  s29 -> s31 [65, 65] { R10460 += 1, R10374 += 1 };
  s29 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s29 -> s29 [66, 65535] { R10460 += 1, R10374 += 1 };
  s29 -> s1 [91, 115] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s29 -> s32 [116, 116] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s29 -> s1 [117, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s31 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s31 -> s31 [0, 65535] { R10460 += 1, R10374 += 1 };
  s31 -> s5 [91, 115] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s31 -> s33 [116, 116] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s31 -> s5 [117, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s32 -> s1 [0, 64] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s32 -> s4 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s32 -> s5 [65, 65] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s32 -> s1 [66, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s32 -> s1 [91, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s33 -> s5 [0, 80] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s33 -> s5 [91, 65535] { R10460 += 1, R10374 += 1, R7390 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10460 += 1 };
  accepting s4, s34, s5, s1, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s0 -> s2 [0, 64] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s3 [0, 65535] { R10462 += 1, R10375 += 1, R10376 += 1 };
  s0 -> s0 [0, 65535] { R10461 += 1, R10462 += 1 };
  s0 -> s4 [65, 65] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s5 [65, 65] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s0 -> s6 [65, 65] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s0 -> s7 [65, 65] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s0 -> s1 [66, 65535] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s0 -> s2 [66, 65535] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s1 -> s1 [0, 64] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s1 -> s1 [0, 65535] { R10462 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s1 -> s7 [65, 65] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s1 -> s1 [66, 65535] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s2 -> s1 [0, 64] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s2 -> s2 [0, 64] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s4 [65, 65] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s5 [65, 65] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s2 -> s6 [65, 65] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s2 -> s7 [65, 65] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s2 -> s1 [66, 65535] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s2 -> s2 [66, 65535] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s3 -> s1 [0, 64] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s3 -> s2 [0, 64] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s3 -> s3 [0, 65535] { R10462 += 1, R10375 += 1, R10376 += 1 };
  s3 -> s4 [65, 65] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s3 -> s5 [65, 65] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s3 -> s6 [65, 65] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s3 -> s7 [65, 65] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s3 -> s1 [66, 65535] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s3 -> s2 [66, 65535] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10462 += 1 };
  s6 -> s6 [0, 65535] { R10462 += 1, R10376 += 1, R9697 += 1, R9698 += 1 };
  s6 -> s7 [0, 65535] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10462 += 1, R10376 += 1, R9698 += 1, R9699 += 1 };
  s7 -> s9 [0, 65535] { R10462 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10462 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s0 -> s2 [0, 65535] { R10464 += 1, R10377 += 1, R10378 += 1 };
  s0 -> s0 [0, 65535] { R10463 += 1, R10464 += 1 };
  s0 -> s3 [65, 65] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s0 -> s4 [65, 65] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s0 -> s1 [66, 65535] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s1 -> s1 [0, 64] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s1 -> s1 [0, 65535] { R10464 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s1 -> s4 [65, 65] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s1 -> s1 [66, 65535] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s2 -> s1 [0, 64] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10464 += 1, R10377 += 1, R10378 += 1 };
  s2 -> s3 [65, 65] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s2 -> s4 [65, 65] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s2 -> s1 [66, 65535] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s3 -> s6 [0, 65535] { R10464 += 1 };
  s3 -> s3 [0, 65535] { R10464 += 1, R10378 += 1, R9703 += 1, R9704 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10464 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10464 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R10466 += 1, R10380 += 1 };
  s0 -> s0 [0, 65535] { R10465 += 1, R10466 += 1 };
  s0 -> s2 [0, 65535] { R10466 += 1, R10379 += 1, R10380 += 1 };
  s0 -> s3 [65, 65] { R10466 += 1, R10380 += 1 };
  s0 -> s4 [65, 65] { R10466 += 1, R10380 += 1 };
  s0 -> s1 [66, 65535] { R10466 += 1, R10380 += 1 };
  s1 -> s1 [0, 64] { R10466 += 1, R10380 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10466 += 1 };
  s1 -> s3 [65, 65] { R10466 += 1, R10380 += 1 };
  s1 -> s4 [65, 65] { R10466 += 1, R10380 += 1 };
  s1 -> s1 [66, 65535] { R10466 += 1, R10380 += 1 };
  s2 -> s1 [0, 64] { R10466 += 1, R10380 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10466 += 1, R10379 += 1, R10380 += 1 };
  s2 -> s3 [65, 65] { R10466 += 1, R10380 += 1 };
  s2 -> s4 [65, 65] { R10466 += 1, R10380 += 1 };
  s2 -> s1 [66, 65535] { R10466 += 1, R10380 += 1 };
  s3 -> s3 [0, 65535] { R10466 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10466 += 1, R10380 += 1 };
  s4 -> s6 [0, 65535] { R10466 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10466 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s0 -> s2 [0, 64] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s0 -> s0 [0, 65535] { R10467 += 1, R10468 += 1 };
  s0 -> s3 [0, 65535] { R10468 += 1, R10381 += 1, R10382 += 1 };
  s0 -> s4 [65, 65] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s0 -> s5 [65, 65] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s0 -> s6 [65, 65] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s0 -> s7 [65, 65] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s0 -> s1 [66, 79] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s0 -> s2 [66, 65535] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s0 -> s8 [80, 80] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s0 -> s1 [81, 65535] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s1 -> s1 [0, 64] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s1 -> s5 [65, 65] { R10468 += 1, R10382 += 1 };
  s1 -> s7 [65, 65] { R10468 += 1, R10382 += 1 };
  s1 -> s1 [66, 79] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s1 -> s1 [66, 65535] { R10468 += 1, R10382 += 1 };
  s1 -> s8 [80, 80] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s1 -> s1 [81, 65535] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s2 -> s1 [0, 64] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s2 -> s2 [0, 64] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s2 -> s4 [65, 65] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s2 -> s5 [65, 65] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s2 -> s6 [65, 65] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s2 -> s7 [65, 65] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s2 -> s1 [66, 79] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s2 -> s2 [66, 65535] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s2 -> s8 [80, 80] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s2 -> s1 [81, 65535] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s3 -> s1 [0, 64] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s3 -> s2 [0, 64] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s3 -> s3 [0, 65535] { R10468 += 1, R10381 += 1, R10382 += 1 };
  s3 -> s4 [65, 65] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s3 -> s5 [65, 65] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s3 -> s6 [65, 65] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s3 -> s7 [65, 65] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s3 -> s1 [66, 79] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s3 -> s2 [66, 65535] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s3 -> s8 [80, 80] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s3 -> s1 [81, 65535] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s4 -> s7 [0, 79] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s4 -> s4 [0, 65535] { R10468 += 1, R10382 += 1, R10317 += 1, R10318 += 1 };
  s4 -> s10 [80, 80] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s4 -> s7 [81, 65535] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s7 -> s7 [0, 79] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s7 -> s7 [0, 65535] { R10468 += 1, R10382 += 1 };
  s7 -> s10 [80, 80] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s7 -> s7 [81, 65535] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s8 -> s9 [0, 64] { R10468 += 1, R10382 += 1 };
  s8 -> s8 [0, 64] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s8 -> s10 [65, 65] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s8 -> s11 [65, 65] { R10468 += 1, R10382 += 1 };
  s8 -> s12 [65, 65] { R10468 += 1, R10382 += 1 };
  s8 -> s13 [65, 65] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s8 -> s9 [66, 65535] { R10468 += 1, R10382 += 1 };
  s8 -> s8 [66, 65535] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s9 -> s9 [0, 64] { R10468 += 1, R10382 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s9 [0, 65535] { R10468 += 1 };
  s9 -> s11 [65, 65] { R10468 += 1, R10382 += 1 };
  s9 -> s12 [65, 65] { R10468 += 1, R10382 += 1 };
  s9 -> s9 [66, 65535] { R10468 += 1, R10382 += 1 };
  s10 -> s10 [0, 65535] { R10468 += 1, R10382 += 1, R10318 += 1, R10319 += 1 };
  s10 -> s12 [0, 65535] { R10468 += 1, R10382 += 1 };
  s11 -> s14 [0, 65535];
  s11 -> s11 [0, 65535] { R10468 += 1 };
  s12 -> s14 [0, 65535];
  s12 -> s15 [0, 65535] { R10468 += 1 };
  s12 -> s12 [0, 65535] { R10468 += 1, R10382 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R10468 += 1 };
  accepting s12, s9, s14, s15, s11;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R5 = R10346 && R6 = R10468 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R61 = 0 && R62 = R10346 && R63 = 0 && R64 = R10346 && R65 = 0 && R66 = R10346 && R67 = 0 && R68 = R10468 && R69 = 0 && R70 = R10468 && R71 = 0 && R72 = R10468 && R88 + R87 + -1*R100 + -1*R98 = 0 && R99 + R97 = 0 && R10323 = 0 && R10324 = R10346 && R10325 = 0 && R10326 = R10346 && R10327 = 0 && R10328 = R10346 && R10329 = 0 && R10330 = R10346 && R10331 = 0 && R10332 = R10346 && R10333 = 0 && R10334 = R10346 && R10335 = 0 && R10336 = R10346 && R10337 = 0 && R10338 = R10346 && R10339 = 0 && R10340 = R10346 && R10341 = 0 && R10342 = R10346 && R10343 = 0 && R10344 = R10346 && R10345 = 0 && R10347 = 0 && R10348 = R10468 && R10349 = 0 && R10350 = R10468 && R10351 = 0 && R10352 = R10468 && R10353 = 0 && R10354 = R10468 && R10355 = 0 && R10356 = R10468 && R10357 = 0 && R10358 = R10468 && R10359 = 0 && R10360 = R10468 && R10363 = 0 && R10364 = 0 && R10373 = 0 && R10374 = 0 && R10375 = 0 && R10376 = 0 && R10381 = 0 && R10382 = 0 && R10397 = 10 && R10398 = R10468 && R10399 = 10 && R10400 = R10468 && R10401 = 10 && R10402 = R10468 && R10403 = 10 && R10404 = R10468 && R10405 = 10 && R10406 = R10468 && R10407 = 10 && R10408 = R10468 && R10409 = 10 && R10410 = R10468 && R10411 = 10 && R10412 = R10468 && R10413 = 10 && R10414 = R10468 && R10415 = 10 && R10416 = R10468 && R10417 = 10 && R10418 = R10468 && R10419 = 10 && R10420 = R10468 && R10421 = 10 && R10422 = R10468 && R10423 = 10 && R10424 = R10468 && R10425 = 10 && R10426 = R10468 && R10427 = 10 && R10428 = R10468 && R10429 = 10 && R10430 = R10468 && R10431 = 10 && R10432 = R10468 && R10433 = 10 && R10434 = R10468 && R10435 = 10 && R10436 = R10468 && R10437 = 10 && R10438 = R10468 && R10439 = 10 && R10440 = R10468 && R10441 = 10 && R10442 = R10468 && R10443 = 10 && R10444 = R10468 && R10445 = 10 && R10446 = R10468 && R10447 = 10 && R10448 = R10468 && R10449 = 10 && R10450 = R10468 && R10451 = 10 && R10452 = R10468 && R10453 = 10 && R10454 = R10468 && R10455 = 10 && R10456 = R10468 && R10457 = 10 && R10458 = R10468 && R10459 = 10 && R10460 = R10468 && R10461 = 10 && R10462 = R10468 && R10463 = 10 && R10464 = R10468 && R10465 = 10 && R10466 = R10468 && R10467 = 10 && R44 + R43 != 0 && R46 + R45 != 0 && R9702 + R9699 + R10322 + R10319 != 0 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && R90 + R89 < 1 && -1*R100 + -1*R98 < 1 && -1*R460 + -1*R459 < 1 && R462 + R461 < 1 && 0 < R10346 && 9 < R10468 && (R96 + R93 != 0 || ((R94 + R91 != 0 || R95 + R92 + -1*R100 + -1*R98 = 0 || R100 + R98 < 1) && (R94 + R91 = 0 || R100 + R98 < 1))) && (R460 + R459 != 0 || R472 + R469 = 0 || (R465 + R463 = 0 && R466 + R464 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R470 + R467 = 0 && R471 + R468 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R7391 + R7389 = 0 && R7392 + R7390 = 0)) && (R460 + R459 != 0 || R472 + R469 = 0 || (R9700 + R9697 = 0 && R9701 + R9698 = 0)) && (R465 + R463 != 0 || R460 + R459 + -1*R466 + -1*R464 = 0 || R460 + R459 < 1) && (R470 + R467 != 0 || R460 + R459 + -1*R471 + -1*R468 = 0 || R460 + R459 < 1) && (R7391 + R7389 != 0 || R460 + R459 + -1*R7392 + -1*R7390 = 0 || R460 + R459 < 1) && (R9700 + R9697 != 0 || R460 + R459 + -1*R9701 + -1*R9698 = 0 || R460 + R459 < 1) && (R33 = 0 || (R79 = 0 && R80 = 0)) && (R33 = 0 || (R81 = 0 && R82 = 0)) && (R34 = 0 || (R10361 = 0 && R10362 = 0)) && (R34 = 0 || (R10365 = 0 && R10366 = 0)) && (R34 = 0 || (R10367 = 0 && R10368 = 0)) && (R34 = 0 || (R10369 = 0 && R10370 = 0)) && (R34 = 0 || (R10371 = 0 && R10372 = 0)) && (R34 = 0 || (R10377 = 0 && R10378 = 0)) && (R34 = 0 || (R10379 = 0 && R10380 = 0)) && (R37 = 0 || (R10383 = 0 && R10384 = 0)) && (R37 = 0 || (R10385 = 0 && R10386 = 0)) && (R37 = 0 || (R10387 = 0 && R10388 = 0)) && (R37 = 0 || (R10389 = 0 && R10390 = 0)) && (R37 = 0 || (R10391 = 0 && R10392 = 0)) && (R37 = 0 || (R10393 = 0 && R10394 = 0)) && (R37 = 0 || (R10395 = 0 && R10396 = 0)) && (R38 = 0 || (R83 = 0 && R84 = 0)) && (R38 = 0 || (R85 = 0 && R86 = 0)) && (R96 + R93 = 0 || (R94 + R91 = 0 && R95 + R92 + -1*R100 + -1*R98 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R465 + R463 = 0 || R460 + R459 < 1) && (R470 + R467 = 0 || R460 + R459 < 1) && (R7391 + R7389 = 0 || R460 + R459 < 1) && (R9700 + R9697 = 0 || R460 + R459 < 1) && (R9708 + R9705 = 0 || (R9706 + R9703 = 0 && R9707 + R9704 = 0)) && (R9708 + R9705 = 0 || (R10320 + R10317 = 0 && R10321 + R10318 = 0));
// End of Parikh automata intersection problem
