// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R156, R160, R161, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R3, R5, R6;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s2 [0, 43];
  s1 -> s2 [45, 46];
  s1 -> s3 [47, 47];
  s1 -> s2 [48, 57];
  s1 -> s1 [58, 58];
  s1 -> s2 [59, 65535];
  s2 -> s2 [0, 43];
  s2 -> s2 [45, 57];
  s2 -> s1 [58, 58];
  s2 -> s2 [59, 65535];
  s3 -> s2 [0, 43];
  s3 -> s2 [45, 46];
  s3 -> s2 [48, 57];
  s3 -> s1 [58, 58];
  s3 -> s2 [59, 65535];
  accepting s1, s2, s3;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 57] { R161 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R161 += 1 };
  s1 -> s1 [0, 57] { R161 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R161 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 90] { R199 += 1 };
  s0 -> s0 [0, 65535] { R198 += 1, R199 += 1 };
  s0 -> s2 [91, 91] { R199 += 1 };
  s0 -> s1 [92, 65535] { R199 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R199 += 1 };
  s2 -> s1 [0, 65535] { R199 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s1 [0, 65535] { R201 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R201 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R217 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s2 [58, 58] { R217 += 1 };
  s0 -> s1 [59, 65535] { R217 += 1 };
  s1 -> s1 [0, 57] { R217 += 1 };
  s1 -> s2 [58, 58] { R217 += 1 };
  s1 -> s1 [59, 65535] { R217 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R217 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R218 += 1, R219 += 1 };
  s0 -> s1 [0, 65535] { R219 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R219 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 57] { R221 += 1 };
  s0 -> s0 [0, 65535] { R220 += 1, R221 += 1 };
  s0 -> s2 [0, 65535] { R221 += 1, R156 += 1 };
  s0 -> s3 [58, 58] { R221 += 1 };
  s0 -> s1 [59, 65535] { R221 += 1 };
  s1 -> s1 [0, 57] { R221 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R221 += 1 };
  s1 -> s1 [59, 65535] { R221 += 1 };
  s2 -> s1 [0, 57] { R221 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R221 += 1, R156 += 1 };
  s2 -> s3 [58, 58] { R221 += 1 };
  s2 -> s1 [59, 65535] { R221 += 1 };
  s3 -> s3 [0, 65535] { R221 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R223 += 1, R207 += 1 };
  s0 -> s2 [0, 65535] { R223 += 1, R206 += 1, R207 += 1 };
  s0 -> s0 [0, 65535] { R222 += 1, R223 += 1 };
  s0 -> s3 [58, 58] { R223 += 1, R207 += 1 };
  s0 -> s1 [59, 65535] { R223 += 1, R207 += 1 };
  s1 -> s1 [0, 57] { R223 += 1, R207 += 1 };
  s1 -> s3 [58, 58] { R223 += 1, R207 += 1 };
  s1 -> s1 [59, 65535] { R223 += 1, R207 += 1 };
  s2 -> s1 [0, 57] { R223 += 1, R207 += 1 };
  s2 -> s2 [0, 65535] { R223 += 1, R206 += 1, R207 += 1 };
  s2 -> s3 [58, 58] { R223 += 1, R207 += 1 };
  s2 -> s1 [59, 65535] { R223 += 1, R207 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R223 += 1, R207 += 1 };
  s3 -> s5 [0, 65535] { R223 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R223 += 1 };
  accepting s3, s4, s5;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R225 += 1, R208 += 1, R209 += 1 };
  s0 -> s2 [0, 65535] { R225 += 1, R209 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R224 += 1, R225 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R225 += 1, R208 += 1, R209 += 1 };
  s1 -> s2 [0, 65535] { R225 += 1, R209 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R225 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R225 += 1, R209 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R225 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R227 += 1, R211 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R227 += 1, R211 += 1, R5 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R227 += 1, R210 += 1, R211 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s4 [58, 58] { R227 += 1, R211 += 1 };
  s0 -> s1 [59, 65535] { R227 += 1, R211 += 1, R6 += 1 };
  s1 -> s1 [0, 57] { R227 += 1, R211 += 1, R6 += 1 };
  s1 -> s4 [58, 58] { R227 += 1, R211 += 1 };
  s1 -> s1 [59, 65535] { R227 += 1, R211 += 1, R6 += 1 };
  s2 -> s1 [0, 57] { R227 += 1, R211 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R227 += 1, R211 += 1, R5 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R227 += 1, R211 += 1 };
  s2 -> s1 [59, 65535] { R227 += 1, R211 += 1, R6 += 1 };
  s3 -> s1 [0, 57] { R227 += 1, R211 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R227 += 1, R211 += 1, R5 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R227 += 1, R210 += 1, R211 += 1 };
  s3 -> s4 [58, 58] { R227 += 1, R211 += 1 };
  s3 -> s1 [59, 65535] { R227 += 1, R211 += 1, R6 += 1 };
  s4 -> s5 [0, 65535] { R227 += 1 };
  s4 -> s4 [0, 65535] { R227 += 1, R211 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R227 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R229 += 1, R213 += 1, R203 += 1 };
  s0 -> s2 [0, 65535] { R229 += 1, R212 += 1, R213 += 1 };
  s0 -> s3 [0, 65535] { R229 += 1, R213 += 1, R202 += 1, R203 += 1 };
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s0 -> s4 [58, 58] { R229 += 1, R213 += 1, R203 += 1 };
  s0 -> s1 [59, 65535] { R229 += 1, R213 += 1, R203 += 1 };
  s1 -> s1 [0, 57] { R229 += 1, R213 += 1, R203 += 1 };
  s1 -> s4 [58, 58] { R229 += 1, R213 += 1, R203 += 1 };
  s1 -> s1 [59, 65535] { R229 += 1, R213 += 1, R203 += 1 };
  s2 -> s1 [0, 57] { R229 += 1, R213 += 1, R203 += 1 };
  s2 -> s2 [0, 65535] { R229 += 1, R212 += 1, R213 += 1 };
  s2 -> s3 [0, 65535] { R229 += 1, R213 += 1, R202 += 1, R203 += 1 };
  s2 -> s4 [58, 58] { R229 += 1, R213 += 1, R203 += 1 };
  s2 -> s1 [59, 65535] { R229 += 1, R213 += 1, R203 += 1 };
  s3 -> s1 [0, 57] { R229 += 1, R213 += 1, R203 += 1 };
  s3 -> s3 [0, 65535] { R229 += 1, R213 += 1, R202 += 1, R203 += 1 };
  s3 -> s4 [58, 58] { R229 += 1, R213 += 1, R203 += 1 };
  s3 -> s1 [59, 65535] { R229 += 1, R213 += 1, R203 += 1 };
  s4 -> s5 [0, 65535] { R229 += 1 };
  s4 -> s6 [0, 65535] { R229 += 1, R213 += 1 };
  s4 -> s4 [0, 65535] { R229 += 1, R213 += 1, R203 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R229 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R229 += 1 };
  s6 -> s6 [0, 65535] { R229 += 1, R213 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s1 [0, 65535] { R231 += 1, R215 += 1, R204 += 1, R205 += 1 };
  s0 -> s2 [0, 65535] { R231 += 1, R215 += 1, R205 += 1, R197 += 1 };
  s0 -> s3 [0, 65535] { R231 += 1, R214 += 1, R215 += 1 };
  s1 -> s1 [0, 65535] { R231 += 1, R215 += 1, R204 += 1, R205 += 1 };
  s1 -> s2 [0, 65535] { R231 += 1, R215 += 1, R205 += 1, R197 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R231 += 1 };
  s2 -> s2 [0, 65535] { R231 += 1, R215 += 1, R205 += 1, R197 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R231 += 1 };
  s2 -> s6 [0, 65535] { R231 += 1, R215 += 1 };
  s3 -> s1 [0, 65535] { R231 += 1, R215 += 1, R204 += 1, R205 += 1 };
  s3 -> s2 [0, 65535] { R231 += 1, R215 += 1, R205 += 1, R197 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R231 += 1, R214 += 1, R215 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R231 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R231 += 1 };
  s6 -> s6 [0, 65535] { R231 += 1, R215 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R203 && R1 = R213 && R2 = R229 && R5 = 0 && R6 - R202 = -1 && R160 = 0 && R161 - R228 = -1 && R198 = 0 && R199 = 1 && R200 = 0 && R201 = 1 && R206 = 0 && R207 = R213 && R210 = 0 && R211 = R213 && R212 = 0 && R216 = R228 && R217 = R229 && R222 = R228 && R223 = R229 && R226 = R228 && R227 = R229 && R156 < 1 && R202 - R203 < 1 && -1 < R202 && -1 < R213 && R228 - R229 < 1 && 0 < R228 && (R202 != R204 || R203 = R205 || ((R197 != 0 || R203 - R204 < 1 || R204 < 0) && (R197 = 0 || R203 < R204 || R204 < 0))) && (R208 != 0 || R209 = R213 || (R203 = 0 && (R202 != 0 || R213 < 1))) && (R214 != 0 || R213 = R215 || (R203 = 0 && (R202 != 0 || R213 < 1))) && (R218 != R228 || R219 = R229 || (R213 = 0 && R228 = R229)) && (R220 != R228 || R221 = R229 || (R213 = 0 && R228 = R229)) && (R224 != R228 || R225 = R229 || (R213 = 0 && R228 = R229)) && (R228 != R230 || R229 = R231 || ((R213 != 0 || R229 - R230 < 1 || R230 < 1) && (R213 < 1 || R229 < R230 || R230 < 1))) && (R202 = R204 || (R197 = 0 && R202 = R203)) && (R208 = 0 || (R203 = 0 && (R202 != 0 || R213 < 1))) && (R214 = 0 || (R203 = 0 && (R202 != 0 || R213 < 1))) && (R218 = R228 || (R213 = 0 && R228 = R229)) && (R220 = R228 || (R213 = 0 && R228 = R229)) && (R224 = R228 || (R213 = 0 && R228 = R229)) && (R228 = R230 || (R213 = 0 && R228 = R229));
// End of Parikh automata intersection problem
