// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R157, R158, R2, R233, R234, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R5, R6;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s2 [0, 43];
  s1 -> s2 [45, 46];
  s1 -> s3 [47, 47];
  s1 -> s2 [48, 57];
  s1 -> s1 [58, 58];
  s1 -> s2 [59, 65535];
  s2 -> s2 [0, 43];
  s2 -> s2 [45, 57];
  s2 -> s1 [58, 58];
  s2 -> s2 [59, 65535];
  s3 -> s2 [0, 43];
  s3 -> s2 [45, 46];
  s3 -> s2 [48, 57];
  s3 -> s1 [58, 58];
  s3 -> s2 [59, 65535];
  accepting s1, s2, s3;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 57] { R234 += 1 };
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R234 += 1 };
  s1 -> s1 [0, 57] { R234 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R234 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 90] { R272 += 1 };
  s0 -> s0 [0, 65535] { R271 += 1, R272 += 1 };
  s0 -> s2 [91, 91] { R272 += 1 };
  s0 -> s1 [92, 65535] { R272 += 1 };
  s1 -> s1 [0, 65535] { R272 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R272 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R273 += 1, R274 += 1 };
  s0 -> s1 [0, 65535] { R274 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R274 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R290 += 1 };
  s0 -> s0 [0, 65535] { R289 += 1, R290 += 1 };
  s0 -> s2 [58, 58] { R290 += 1 };
  s0 -> s1 [59, 65535] { R290 += 1 };
  s1 -> s1 [0, 57] { R290 += 1 };
  s1 -> s2 [58, 58] { R290 += 1 };
  s1 -> s1 [59, 65535] { R290 += 1 };
  s2 -> s2 [0, 65535] { R290 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R292 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R291 += 1, R292 += 1 };
  s1 -> s1 [0, 65535] { R292 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 57] { R294 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R294 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R293 += 1, R294 += 1 };
  s0 -> s3 [58, 58] { R294 += 1 };
  s0 -> s1 [59, 65535] { R294 += 1, R158 += 1 };
  s1 -> s1 [0, 57] { R294 += 1, R158 += 1 };
  s1 -> s3 [58, 58] { R294 += 1 };
  s1 -> s1 [59, 65535] { R294 += 1, R158 += 1 };
  s2 -> s1 [0, 57] { R294 += 1, R158 += 1 };
  s2 -> s2 [0, 65535] { R294 += 1, R157 += 1, R158 += 1 };
  s2 -> s3 [58, 58] { R294 += 1 };
  s2 -> s1 [59, 65535] { R294 += 1, R158 += 1 };
  s3 -> s3 [0, 65535] { R294 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R296 += 1, R280 += 1 };
  s0 -> s2 [0, 65535] { R296 += 1, R279 += 1, R280 += 1 };
  s0 -> s0 [0, 65535] { R295 += 1, R296 += 1 };
  s0 -> s3 [58, 58] { R296 += 1, R280 += 1 };
  s0 -> s1 [59, 65535] { R296 += 1, R280 += 1 };
  s1 -> s1 [0, 57] { R296 += 1, R280 += 1 };
  s1 -> s3 [58, 58] { R296 += 1, R280 += 1 };
  s1 -> s1 [59, 65535] { R296 += 1, R280 += 1 };
  s2 -> s1 [0, 57] { R296 += 1, R280 += 1 };
  s2 -> s2 [0, 65535] { R296 += 1, R279 += 1, R280 += 1 };
  s2 -> s3 [58, 58] { R296 += 1, R280 += 1 };
  s2 -> s1 [59, 65535] { R296 += 1, R280 += 1 };
  s3 -> s3 [0, 65535] { R296 += 1, R280 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R296 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R296 += 1 };
  accepting s3, s4, s5;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R298 += 1, R281 += 1, R282 += 1 };
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s0 -> s2 [0, 65535] { R298 += 1, R282 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R298 += 1, R281 += 1, R282 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R298 += 1, R282 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R298 += 1 };
  s2 -> s2 [0, 65535] { R298 += 1, R282 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R298 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R300 += 1, R284 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s2 [0, 65535] { R300 += 1, R283 += 1, R284 += 1 };
  s0 -> s3 [0, 65535] { R300 += 1, R284 += 1, R5 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R300 += 1, R284 += 1 };
  s0 -> s1 [59, 65535] { R300 += 1, R284 += 1, R6 += 1 };
  s1 -> s1 [0, 57] { R300 += 1, R284 += 1, R6 += 1 };
  s1 -> s4 [58, 58] { R300 += 1, R284 += 1 };
  s1 -> s1 [59, 65535] { R300 += 1, R284 += 1, R6 += 1 };
  s2 -> s1 [0, 57] { R300 += 1, R284 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R300 += 1, R283 += 1, R284 += 1 };
  s2 -> s3 [0, 65535] { R300 += 1, R284 += 1, R5 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R300 += 1, R284 += 1 };
  s2 -> s1 [59, 65535] { R300 += 1, R284 += 1, R6 += 1 };
  s3 -> s1 [0, 57] { R300 += 1, R284 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R300 += 1, R284 += 1, R5 += 1, R6 += 1 };
  s3 -> s4 [58, 58] { R300 += 1, R284 += 1 };
  s3 -> s1 [59, 65535] { R300 += 1, R284 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R300 += 1, R284 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R300 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R300 += 1 };
  accepting s4, s5, s6;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R302 += 1, R286 += 1, R276 += 1 };
  s0 -> s2 [0, 65535] { R302 += 1, R286 += 1, R275 += 1, R276 += 1 };
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s3 [0, 65535] { R302 += 1, R285 += 1, R286 += 1 };
  s0 -> s4 [58, 58] { R302 += 1, R286 += 1, R276 += 1 };
  s0 -> s1 [59, 65535] { R302 += 1, R286 += 1, R276 += 1 };
  s1 -> s1 [0, 57] { R302 += 1, R286 += 1, R276 += 1 };
  s1 -> s4 [58, 58] { R302 += 1, R286 += 1, R276 += 1 };
  s1 -> s1 [59, 65535] { R302 += 1, R286 += 1, R276 += 1 };
  s2 -> s1 [0, 57] { R302 += 1, R286 += 1, R276 += 1 };
  s2 -> s2 [0, 65535] { R302 += 1, R286 += 1, R275 += 1, R276 += 1 };
  s2 -> s4 [58, 58] { R302 += 1, R286 += 1, R276 += 1 };
  s2 -> s1 [59, 65535] { R302 += 1, R286 += 1, R276 += 1 };
  s3 -> s1 [0, 57] { R302 += 1, R286 += 1, R276 += 1 };
  s3 -> s2 [0, 65535] { R302 += 1, R286 += 1, R275 += 1, R276 += 1 };
  s3 -> s3 [0, 65535] { R302 += 1, R285 += 1, R286 += 1 };
  s3 -> s4 [58, 58] { R302 += 1, R286 += 1, R276 += 1 };
  s3 -> s1 [59, 65535] { R302 += 1, R286 += 1, R276 += 1 };
  s4 -> s4 [0, 65535] { R302 += 1, R286 += 1, R276 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R302 += 1 };
  s4 -> s7 [0, 65535] { R302 += 1, R286 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R302 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R302 += 1 };
  s7 -> s7 [0, 65535] { R302 += 1, R286 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s0 -> s1 [0, 65535] { R304 += 1, R288 += 1, R277 += 1, R278 += 1 };
  s0 -> s2 [0, 65535] { R304 += 1, R288 += 1, R278 += 1, R270 += 1 };
  s0 -> s3 [0, 65535] { R304 += 1, R287 += 1, R288 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R304 += 1, R288 += 1, R277 += 1, R278 += 1 };
  s1 -> s2 [0, 65535] { R304 += 1, R288 += 1, R278 += 1, R270 += 1 };
  s1 -> s6 [0, 65535] { R304 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R304 += 1, R288 += 1, R278 += 1, R270 += 1 };
  s2 -> s5 [0, 65535] { R304 += 1, R288 += 1 };
  s2 -> s6 [0, 65535] { R304 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R304 += 1, R288 += 1, R277 += 1, R278 += 1 };
  s3 -> s2 [0, 65535] { R304 += 1, R288 += 1, R278 += 1, R270 += 1 };
  s3 -> s3 [0, 65535] { R304 += 1, R287 += 1, R288 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R304 += 1, R288 += 1 };
  s5 -> s6 [0, 65535] { R304 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R304 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R276 && R1 = R286 && R2 = R302 && R5 = 0 && R6 - R275 = -1 && R157 = 0 && R158 - R285 = -1 && R233 = 0 && R234 - R301 = -1 && R271 = 0 && R272 = 1 && R273 = 0 && R274 = 1 && R279 = R285 && R280 = R286 && R283 = R285 && R284 = R286 && R289 = R301 && R290 = R302 && R293 = R301 && R294 = R302 && R295 = R301 && R296 = R302 && R299 = R301 && R300 = R302 && R275 - R276 < 1 && -1 < R275 && R285 - R286 < 1 && -1 < R285 && R301 - R302 < 1 && 0 < R301 && (R275 != R277 || R276 = R278 || ((R270 != 0 || R276 - R277 < 1 || R277 < 0) && (R270 = 0 || R276 < R277 || R277 < 0))) && (R281 != R285 || R282 = R286 || (R276 = 0 && (R275 != 0 || R286 - R285 < 1))) && (R285 != R287 || R286 = R288 || ((R275 != 0 || R276 != 0 || R286 - R287 < 1 || R287 < 0) && (R276 < 1 || R286 < R287 || R287 < 0))) && (R291 != R301 || R292 = R302 || (R286 = 0 && (R285 != 0 || R302 - R301 < 1))) && (R297 != R301 || R298 = R302 || (R286 = 0 && (R285 != 0 || R302 - R301 < 1))) && (R301 != R303 || R302 = R304 || ((R285 != 0 || R286 != 0 || R302 - R303 < 1 || R303 < 1) && (R286 < 1 || R302 < R303 || R303 < 1))) && (R275 = R277 || (R270 = 0 && R275 = R276)) && (R281 = R285 || (R276 = 0 && (R275 != 0 || R286 - R285 < 1))) && (R285 = R287 || (R276 = 0 && (R275 != 0 || R286 - R285 < 1))) && (R291 = R301 || (R286 = 0 && (R285 != 0 || R302 - R301 < 1))) && (R297 = R301 || (R286 = 0 && (R285 != 0 || R302 - R301 < 1))) && (R301 = R303 || (R286 = 0 && (R285 != 0 || R302 - R301 < 1)));
// End of Parikh automata intersection problem
