// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R2, R3, R4, R8, R84, R85, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s2 [0, 43];
  s1 -> s2 [45, 46];
  s1 -> s3 [47, 47];
  s1 -> s2 [48, 57];
  s1 -> s1 [58, 58];
  s1 -> s2 [59, 65535];
  s2 -> s2 [0, 43];
  s2 -> s2 [45, 57];
  s2 -> s1 [58, 58];
  s2 -> s2 [59, 65535];
  s3 -> s2 [0, 43];
  s3 -> s2 [45, 46];
  s3 -> s2 [48, 57];
  s3 -> s1 [58, 58];
  s3 -> s2 [59, 65535];
  accepting s1, s2, s3;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 57] { R85 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R85 += 1 };
  s1 -> s1 [0, 57] { R85 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R85 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 90] { R123 += 1 };
  s0 -> s0 [0, 65535] { R122 += 1, R123 += 1 };
  s0 -> s2 [91, 91] { R123 += 1 };
  s0 -> s1 [92, 65535] { R123 += 1 };
  s1 -> s1 [0, 65535] { R123 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R123 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R125 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R124 += 1, R125 += 1 };
  s1 -> s1 [0, 65535] { R125 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R141 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s2 [58, 58] { R141 += 1 };
  s0 -> s1 [59, 65535] { R141 += 1 };
  s1 -> s1 [0, 57] { R141 += 1 };
  s1 -> s2 [58, 58] { R141 += 1 };
  s1 -> s1 [59, 65535] { R141 += 1 };
  s2 -> s2 [0, 65535] { R141 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s1 [0, 65535] { R143 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 57] { R145 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R8 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s3 [58, 58] { R145 += 1 };
  s0 -> s1 [59, 65535] { R145 += 1, R9 += 1 };
  s1 -> s1 [0, 57] { R145 += 1, R9 += 1 };
  s1 -> s3 [58, 58] { R145 += 1 };
  s1 -> s1 [59, 65535] { R145 += 1, R9 += 1 };
  s2 -> s1 [0, 57] { R145 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R8 += 1, R9 += 1 };
  s2 -> s3 [58, 58] { R145 += 1 };
  s2 -> s1 [59, 65535] { R145 += 1, R9 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R145 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R147 += 1, R131 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R130 += 1, R131 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s3 [58, 58] { R147 += 1, R131 += 1 };
  s0 -> s1 [59, 65535] { R147 += 1, R131 += 1 };
  s1 -> s1 [0, 57] { R147 += 1, R131 += 1 };
  s1 -> s3 [58, 58] { R147 += 1, R131 += 1 };
  s1 -> s1 [59, 65535] { R147 += 1, R131 += 1 };
  s2 -> s1 [0, 57] { R147 += 1, R131 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R130 += 1, R131 += 1 };
  s2 -> s3 [58, 58] { R147 += 1, R131 += 1 };
  s2 -> s1 [59, 65535] { R147 += 1, R131 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R147 += 1, R131 += 1 };
  s3 -> s5 [0, 65535] { R147 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R147 += 1 };
  accepting s3, s4, s5;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R149 += 1, R132 += 1, R133 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R133 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R149 += 1, R132 += 1, R133 += 1 };
  s1 -> s2 [0, 65535] { R149 += 1, R133 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R149 += 1 };
  s2 -> s2 [0, 65535] { R149 += 1, R133 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R149 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R151 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s3 [0, 65535] { R151 += 1, R135 += 1, R4 += 1 };
  s0 -> s4 [58, 58] { R151 += 1, R135 += 1 };
  s0 -> s1 [59, 65535] { R151 += 1, R135 += 1 };
  s1 -> s1 [0, 57] { R151 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R151 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [58, 58] { R151 += 1, R135 += 1 };
  s1 -> s1 [59, 65535] { R151 += 1, R135 += 1 };
  s2 -> s1 [0, 57] { R151 += 1, R135 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R151 += 1, R134 += 1, R135 += 1 };
  s2 -> s3 [0, 65535] { R151 += 1, R135 += 1, R4 += 1 };
  s2 -> s4 [58, 58] { R151 += 1, R135 += 1 };
  s2 -> s1 [59, 65535] { R151 += 1, R135 += 1 };
  s3 -> s1 [0, 57] { R151 += 1, R135 += 1 };
  s3 -> s5 [0, 65535] { R151 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R151 += 1, R135 += 1, R4 += 1 };
  s3 -> s4 [58, 58] { R151 += 1, R135 += 1 };
  s3 -> s1 [59, 65535] { R151 += 1, R135 += 1 };
  s4 -> s4 [0, 65535] { R151 += 1, R135 += 1 };
  s5 -> s5 [0, 65535] { R151 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R153 += 1, R137 += 1, R127 += 1 };
  s0 -> s2 [0, 65535] { R153 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s3 [0, 65535] { R153 += 1, R137 += 1, R126 += 1, R127 += 1 };
  s0 -> s4 [58, 58] { R153 += 1, R137 += 1, R127 += 1 };
  s0 -> s1 [59, 65535] { R153 += 1, R137 += 1, R127 += 1 };
  s1 -> s1 [0, 57] { R153 += 1, R137 += 1, R127 += 1 };
  s1 -> s4 [58, 58] { R153 += 1, R137 += 1, R127 += 1 };
  s1 -> s1 [59, 65535] { R153 += 1, R137 += 1, R127 += 1 };
  s2 -> s1 [0, 57] { R153 += 1, R137 += 1, R127 += 1 };
  s2 -> s2 [0, 65535] { R153 += 1, R136 += 1, R137 += 1 };
  s2 -> s3 [0, 65535] { R153 += 1, R137 += 1, R126 += 1, R127 += 1 };
  s2 -> s4 [58, 58] { R153 += 1, R137 += 1, R127 += 1 };
  s2 -> s1 [59, 65535] { R153 += 1, R137 += 1, R127 += 1 };
  s3 -> s1 [0, 57] { R153 += 1, R137 += 1, R127 += 1 };
  s3 -> s3 [0, 65535] { R153 += 1, R137 += 1, R126 += 1, R127 += 1 };
  s3 -> s4 [58, 58] { R153 += 1, R137 += 1, R127 += 1 };
  s3 -> s1 [59, 65535] { R153 += 1, R137 += 1, R127 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R153 += 1, R137 += 1 };
  s4 -> s4 [0, 65535] { R153 += 1, R137 += 1, R127 += 1 };
  s4 -> s7 [0, 65535] { R153 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R153 += 1, R137 += 1 };
  s6 -> s7 [0, 65535] { R153 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R153 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R155 += 1, R138 += 1, R139 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R139 += 1, R129 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s0 -> s3 [0, 65535] { R155 += 1, R139 += 1, R128 += 1, R129 += 1 };
  s1 -> s1 [0, 65535] { R155 += 1, R138 += 1, R139 += 1 };
  s1 -> s2 [0, 65535] { R155 += 1, R139 += 1, R129 += 1, R121 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R155 += 1, R139 += 1, R128 += 1, R129 += 1 };
  s2 -> s6 [0, 65535] { R155 += 1, R139 += 1 };
  s2 -> s4 [0, 65535] { R155 += 1 };
  s2 -> s2 [0, 65535] { R155 += 1, R139 += 1, R129 += 1, R121 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R155 += 1 };
  s3 -> s2 [0, 65535] { R155 += 1, R139 += 1, R129 += 1, R121 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R155 += 1, R139 += 1, R128 += 1, R129 += 1 };
  s4 -> s4 [0, 65535] { R155 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R155 += 1, R139 += 1 };
  s6 -> s4 [0, 65535] { R155 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R127 && R1 = R137 && R2 = R153 && R8 = 0 && R9 - R136 = -1 && R84 = 0 && R85 - R152 = -1 && R122 = 0 && R123 = 1 && R124 = 0 && R125 = 1 && R126 = 0 && R130 = R136 && R131 = R137 && R140 = R152 && R141 = R153 && R144 = R152 && R145 = R153 && R146 = R152 && R147 = R153 && R4 < 1 && -1 < R127 && R136 - R137 < 1 && -1 < R136 && R152 - R153 < 1 && 0 < R152 && (R128 != 0 || R127 = R129 || (R121 = 0 && R127 = 0)) && (R132 != R136 || R133 = R137 || (R127 = 0 && R136 = R137)) && (R134 != R136 || R135 = R137 || (R127 = 0 && R136 = R137)) && (R136 != R138 || R137 = R139 || ((R127 != 0 || R137 - R138 < 1 || R138 < 0) && (R127 < 1 || R137 < R138 || R138 < 0))) && (R142 != R152 || R143 = R153 || (R137 = 0 && (R136 != 0 || R153 - R152 < 1))) && (R148 != R152 || R149 = R153 || (R137 = 0 && (R136 != 0 || R153 - R152 < 1))) && (R150 != R152 || R151 = R153 || (R137 = 0 && (R136 != 0 || R153 - R152 < 1))) && (R152 != R154 || R153 = R155 || ((R136 != 0 || R137 != 0 || R153 - R154 < 1 || R154 < 1) && (R137 < 1 || R153 < R154 || R154 < 1))) && (R128 = 0 || (R121 = 0 && R127 = 0)) && (R132 = R136 || (R127 = 0 && R136 = R137)) && (R134 = R136 || (R127 = 0 && R136 = R137)) && (R136 = R138 || (R127 = 0 && R136 = R137)) && (R142 = R152 || (R137 = 0 && (R136 != 0 || R153 - R152 < 1))) && (R148 = R152 || (R137 = 0 && (R136 != 0 || R153 - R152 < 1))) && (R150 = R152 || (R137 = 0 && (R136 != 0 || R153 - R152 < 1))) && (R152 = R154 || (R137 = 0 && (R136 != 0 || R153 - R152 < 1)));
// End of Parikh automata intersection problem
