// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R2, R3, R4, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s2 [0, 43];
  s1 -> s2 [45, 46];
  s1 -> s3 [47, 47];
  s1 -> s2 [48, 57];
  s1 -> s1 [58, 58];
  s1 -> s2 [59, 65535];
  s2 -> s2 [0, 43];
  s2 -> s2 [45, 57];
  s2 -> s1 [58, 58];
  s2 -> s2 [59, 65535];
  s3 -> s2 [0, 43];
  s3 -> s2 [45, 46];
  s3 -> s2 [48, 57];
  s3 -> s1 [58, 58];
  s3 -> s2 [59, 65535];
  accepting s1, s2, s3;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 57] { R12 += 1 };
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R12 += 1 };
  s1 -> s1 [0, 57] { R12 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R12 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 90] { R50 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s0 -> s2 [91, 91] { R50 += 1 };
  s0 -> s1 [92, 65535] { R50 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R50 += 1 };
  s2 -> s1 [0, 65535] { R50 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s1 [0, 65535] { R52 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R52 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [58, 58] { R68 += 1 };
  s0 -> s1 [59, 65535] { R68 += 1 };
  s1 -> s1 [0, 57] { R68 += 1 };
  s1 -> s2 [58, 58] { R68 += 1 };
  s1 -> s1 [59, 65535] { R68 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R68 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R70 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 57] { R72 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s3 [58, 58] { R72 += 1 };
  s0 -> s1 [59, 65535] { R72 += 1 };
  s1 -> s1 [0, 57] { R72 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R72 += 1 };
  s1 -> s1 [59, 65535] { R72 += 1 };
  s2 -> s1 [0, 57] { R72 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R72 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R72 += 1 };
  s2 -> s1 [59, 65535] { R72 += 1 };
  s3 -> s3 [0, 65535] { R72 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R74 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R57 += 1, R58 += 1 };
  s0 -> s3 [58, 58] { R74 += 1, R58 += 1 };
  s0 -> s1 [59, 65535] { R74 += 1, R58 += 1 };
  s1 -> s1 [0, 57] { R74 += 1, R58 += 1 };
  s1 -> s3 [58, 58] { R74 += 1, R58 += 1 };
  s1 -> s1 [59, 65535] { R74 += 1, R58 += 1 };
  s2 -> s1 [0, 57] { R74 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R74 += 1, R57 += 1, R58 += 1 };
  s2 -> s3 [58, 58] { R74 += 1, R58 += 1 };
  s2 -> s1 [59, 65535] { R74 += 1, R58 += 1 };
  s3 -> s4 [0, 65535] { R74 += 1 };
  s3 -> s3 [0, 65535] { R74 += 1, R58 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R74 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R76 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R60 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R76 += 1, R59 += 1, R60 += 1 };
  s1 -> s2 [0, 65535] { R76 += 1, R60 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R76 += 1, R60 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R76 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R76 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R78 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R62 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R78 += 1, R61 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s4 [58, 58] { R78 += 1, R62 += 1 };
  s0 -> s1 [59, 65535] { R78 += 1, R62 += 1 };
  s1 -> s1 [0, 57] { R78 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R78 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R78 += 1, R62 += 1 };
  s1 -> s1 [59, 65535] { R78 += 1, R62 += 1 };
  s2 -> s1 [0, 57] { R78 += 1, R62 += 1 };
  s2 -> s2 [0, 65535] { R78 += 1, R62 += 1, R4 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R78 += 1 };
  s2 -> s4 [58, 58] { R78 += 1, R62 += 1 };
  s2 -> s1 [59, 65535] { R78 += 1, R62 += 1 };
  s3 -> s1 [0, 57] { R78 += 1, R62 += 1 };
  s3 -> s2 [0, 65535] { R78 += 1, R62 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R78 += 1, R61 += 1, R62 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [58, 58] { R78 += 1, R62 += 1 };
  s3 -> s1 [59, 65535] { R78 += 1, R62 += 1 };
  s4 -> s4 [0, 65535] { R78 += 1, R62 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R78 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R80 += 1, R64 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R80 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s3 [0, 65535] { R80 += 1, R64 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [58, 58] { R80 += 1, R64 += 1, R54 += 1 };
  s0 -> s1 [59, 65535] { R80 += 1, R64 += 1, R54 += 1 };
  s1 -> s1 [0, 57] { R80 += 1, R64 += 1, R54 += 1 };
  s1 -> s4 [58, 58] { R80 += 1, R64 += 1, R54 += 1 };
  s1 -> s1 [59, 65535] { R80 += 1, R64 += 1, R54 += 1 };
  s2 -> s1 [0, 57] { R80 += 1, R64 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R80 += 1, R63 += 1, R64 += 1 };
  s2 -> s3 [0, 65535] { R80 += 1, R64 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [58, 58] { R80 += 1, R64 += 1, R54 += 1 };
  s2 -> s1 [59, 65535] { R80 += 1, R64 += 1, R54 += 1 };
  s3 -> s1 [0, 57] { R80 += 1, R64 += 1, R54 += 1 };
  s3 -> s3 [0, 65535] { R80 += 1, R64 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [58, 58] { R80 += 1, R64 += 1, R54 += 1 };
  s3 -> s1 [59, 65535] { R80 += 1, R64 += 1, R54 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R80 += 1, R64 += 1 };
  s4 -> s7 [0, 65535] { R80 += 1 };
  s4 -> s4 [0, 65535] { R80 += 1, R64 += 1, R54 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R80 += 1, R64 += 1 };
  s6 -> s7 [0, 65535] { R80 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R80 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R82 += 1, R66 += 1, R55 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s3 [0, 65535] { R82 += 1, R66 += 1, R56 += 1, R48 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1, R66 += 1, R55 += 1, R56 += 1 };
  s1 -> s4 [0, 65535] { R82 += 1 };
  s1 -> s3 [0, 65535] { R82 += 1, R66 += 1, R56 += 1, R48 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R82 += 1, R66 += 1, R55 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R82 += 1, R65 += 1, R66 += 1 };
  s2 -> s3 [0, 65535] { R82 += 1, R66 += 1, R56 += 1, R48 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R82 += 1 };
  s3 -> s5 [0, 65535] { R82 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R82 += 1, R66 += 1, R56 += 1, R48 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R82 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R82 += 1 };
  s5 -> s5 [0, 65535] { R82 += 1, R66 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R54 && R1 = R64 && R2 = R80 && R11 = 0 && R12 - R79 = -1 && R49 = 0 && R50 = 1 && R51 = 0 && R52 = 1 && R53 = 0 && R57 = 0 && R58 = R64 && R63 = 0 && R67 = R79 && R68 = R80 && R73 = R79 && R74 = R80 && R4 < 1 && R7 < 1 && -1 < R54 && -1 < R64 && R79 - R80 < 1 && 0 < R79 && (R55 != 0 || R54 = R56 || (R48 = 0 && R54 = 0)) && (R59 != 0 || R60 = R64 || (R54 = 0 && R64 = 0)) && (R61 != 0 || R62 = R64 || (R54 = 0 && R64 = 0)) && (R65 != 0 || R64 = R66 || (R54 = 0 && R64 = 0)) && (R69 != R79 || R70 = R80 || (R64 = 0 && R79 = R80)) && (R71 != R79 || R72 = R80 || (R64 = 0 && R79 = R80)) && (R75 != R79 || R76 = R80 || (R64 = 0 && R79 = R80)) && (R77 != R79 || R78 = R80 || (R64 = 0 && R79 = R80)) && (R79 != R81 || R80 = R82 || ((R64 != 0 || R80 - R81 < 1 || R81 < 1) && (R64 < 1 || R80 < R81 || R81 < 1))) && (R55 = 0 || (R48 = 0 && R54 = 0)) && (R59 = 0 || (R54 = 0 && R64 = 0)) && (R61 = 0 || (R54 = 0 && R64 = 0)) && (R65 = 0 || (R54 = 0 && R64 = 0)) && (R69 = R79 || (R64 = 0 && R79 = R80)) && (R71 = R79 || (R64 = 0 && R79 = R80)) && (R75 = R79 || (R64 = 0 && R79 = R80)) && (R77 = R79 || (R64 = 0 && R79 = R80)) && (R79 = R81 || (R64 = 0 && R79 = R80));
// End of Parikh automata intersection problem
