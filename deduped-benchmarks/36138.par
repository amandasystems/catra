// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R16, R17, R20, R29, R30, R31, R32, R33, R34, R35, R36, R4, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R6, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R9741, R9742, R9743, R9744, R9745, R9746, R9747, R9748, R9749, R9750, R9751, R9752, R9753, R9754, R9755, R9756, R9757, R9758, R9759, R9760, R9761, R9762, R9763, R9764, R9765, R9766, R9767, R9768, R9769, R9770, R9771, R9772, R9773, R9774, R9775, R9776, R9777, R9778, R9779, R9780, R9781, R9782, R9783, R9784, R9785, R9786, R9787, R9788, R9789, R9790, R9791, R9792, R9793, R9794, R9795, R9796, R9797, R9798, R9799, R98, R9800, R9801, R9802, R9803, R9804, R9805, R9806, R9807, R9808, R9809, R9810, R9811, R9812, R9813, R9814, R9815, R9816, R9817, R9818, R9819, R9820, R9821, R9822, R9823, R9824, R9825, R9826, R9827, R9828, R9829, R9830, R9831, R9832, R9833, R9834, R9835, R9836, R9837, R9838, R9839, R9840, R9841, R9842, R9843, R9844, R9845, R9846, R9847, R9848, R9849, R9850, R9851, R9852, R9853, R9854, R9855, R9856, R9857, R9858, R9859, R9860, R9861, R9862, R9863, R9864, R9865, R9866, R9867, R9868, R9869, R9870, R9871, R9872, R9873, R9874, R9875, R9876, R9877, R9878, R9879, R9880, R9881, R9882, R9883, R9884, R9885, R9886, R9887, R9888, R9889, R9890, R9891, R9892, R9893, R9894, R9895, R9896, R9897, R9898, R9899, R99, R9900, R9901, R9902, R9903, R9904, R9905, R9906, R9907, R9908, R9909, R9910, R9911, R9912;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R9777 += 1, R9778 += 1 };
  s0 -> s1 [0, 65535] { R9778 += 1, R31 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9778 += 1, R31 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R9780 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R9779 += 1, R9780 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9780 += 1, R70 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R9782 += 1 };
  s0 -> s0 [0, 65535] { R9781 += 1, R9782 += 1 };
  s0 -> s2 [0, 65535] { R9782 += 1, R72 += 1 };
  s0 -> s1 [90, 65535] { R9782 += 1 };
  s1 -> s1 [0, 88] { R9782 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R9782 += 1 };
  s2 -> s1 [0, 88] { R9782 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9782 += 1, R72 += 1 };
  s2 -> s1 [90, 65535] { R9782 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R9784 += 1 };
  s0 -> s2 [0, 65535] { R9784 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R9783 += 1, R9784 += 1 };
  s0 -> s1 [74, 65535] { R9784 += 1 };
  s1 -> s1 [0, 72] { R9784 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R9784 += 1 };
  s2 -> s1 [0, 72] { R9784 += 1 };
  s2 -> s2 [0, 65535] { R9784 += 1, R74 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R9784 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R9785 += 1, R9786 += 1 };
  s0 -> s1 [0, 65535] { R9786 += 1, R79 += 1, R80 += 1 };
  s0 -> s2 [0, 65535] { R9786 += 1, R78 += 1, R79 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9786 += 1, R79 += 1, R80 += 1 };
  s1 -> s4 [0, 65535] { R9786 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9786 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535] { R9786 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9786 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9787 += 1, R9788 += 1 };
  s0 -> s1 [0, 65535] { R9788 += 1, R83 += 1, R84 += 1 };
  s0 -> s2 [108, 108] { R9788 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R9788 += 1, R83 += 1, R84 += 1 };
  s1 -> s2 [108, 108] { R9788 += 1, R84 += 1 };
  s2 -> s3 [111, 111] { R9788 += 1, R84 += 1 };
  s3 -> s4 [99, 99] { R9788 += 1, R84 += 1 };
  s4 -> s5 [97, 97] { R9788 += 1, R84 += 1 };
  s5 -> s6 [108, 108] { R9788 += 1, R84 += 1 };
  s6 -> s7 [104, 104] { R9788 += 1, R84 += 1 };
  s7 -> s8 [111, 111] { R9788 += 1, R84 += 1 };
  s8 -> s9 [115, 115] { R9788 += 1, R84 += 1 };
  s9 -> s10 [116, 116] { R9788 += 1, R84 += 1 };
  s10 -> s10 [0, 65535] { R9788 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R9790 += 1, R88 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R9790 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R9789 += 1, R9790 += 1 };
  s1 -> s1 [0, 65535] { R9790 += 1, R88 += 1, R89 += 1 };
  s1 -> s2 [0, 65535] { R9790 += 1, R89 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9790 += 1 };
  s2 -> s2 [0, 65535] { R9790 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9790 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R9792 += 1, R94 += 1 };
  s0 -> s2 [0, 65535] { R9792 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R9791 += 1, R9792 += 1 };
  s0 -> s3 [108, 108] { R9792 += 1, R94 += 1 };
  s0 -> s1 [109, 65535] { R9792 += 1, R94 += 1 };
  s1 -> s1 [0, 65535] { R9792 += 1, R94 += 1 };
  s1 -> s13 [0, 65535] { R9792 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R9792 += 1, R94 += 1 };
  s2 -> s2 [0, 65535] { R9792 += 1, R93 += 1, R94 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R9792 += 1, R94 += 1 };
  s2 -> s1 [109, 65535] { R9792 += 1, R94 += 1 };
  s3 -> s1 [0, 110] { R9792 += 1, R94 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9792 += 1 };
  s3 -> s5 [111, 111] { R9792 += 1, R94 += 1 };
  s3 -> s1 [112, 65535] { R9792 += 1, R94 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R9792 += 1, R94 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9792 += 1 };
  s5 -> s6 [99, 99] { R9792 += 1, R94 += 1 };
  s5 -> s1 [100, 65535] { R9792 += 1, R94 += 1 };
  s6 -> s1 [0, 96] { R9792 += 1, R94 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9792 += 1 };
  s6 -> s7 [97, 97] { R9792 += 1, R94 += 1 };
  s6 -> s1 [98, 65535] { R9792 += 1, R94 += 1 };
  s7 -> s1 [0, 107] { R9792 += 1, R94 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R9792 += 1 };
  s7 -> s8 [108, 108] { R9792 += 1, R94 += 1 };
  s7 -> s1 [109, 65535] { R9792 += 1, R94 += 1 };
  s8 -> s1 [0, 103] { R9792 += 1, R94 += 1 };
  s8 -> s8 [0, 65535] { R9792 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R9792 += 1, R94 += 1 };
  s8 -> s1 [105, 65535] { R9792 += 1, R94 += 1 };
  s9 -> s1 [0, 110] { R9792 += 1, R94 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R9792 += 1 };
  s9 -> s10 [111, 111] { R9792 += 1, R94 += 1 };
  s9 -> s1 [112, 65535] { R9792 += 1, R94 += 1 };
  s10 -> s1 [0, 114] { R9792 += 1, R94 += 1 };
  s10 -> s10 [0, 65535] { R9792 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R9792 += 1, R94 += 1 };
  s10 -> s1 [116, 65535] { R9792 += 1, R94 += 1 };
  s11 -> s1 [0, 115] { R9792 += 1, R94 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R9792 += 1 };
  s11 -> s12 [116, 116] { R9792 += 1, R94 += 1 };
  s11 -> s1 [117, 65535] { R9792 += 1, R94 += 1 };
  s12 -> s1 [0, 65535] { R9792 += 1, R94 += 1 };
  s13 -> s13 [0, 65535] { R9792 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R9794 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R9794 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R9793 += 1, R9794 += 1 };
  s1 -> s1 [0, 65535] { R9794 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R9794 += 1, R99 += 1, R100 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9794 += 1 };
  s2 -> s2 [0, 65535] { R9794 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9794 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R9796 += 1, R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R9796 += 1, R104 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R9795 += 1, R9796 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9796 += 1, R105 += 1, R106 += 1 };
  s1 -> s4 [0, 65535] { R9796 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9796 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R9796 += 1, R104 += 1, R105 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9796 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R9798 += 1 };
  s0 -> s0 [0, 65535] { R9797 += 1, R9798 += 1 };
  s1 -> s1 [0, 65535] { R9798 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9800 += 1, R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R9800 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R9799 += 1, R9800 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9800 += 1 };
  s1 -> s1 [0, 65535] { R9800 += 1, R111 += 1, R112 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9800 += 1, R111 += 1, R112 += 1 };
  s2 -> s2 [0, 65535] { R9800 += 1, R110 += 1, R111 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9800 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9802 += 1 };
  s0 -> s0 [0, 65535] { R9801 += 1, R9802 += 1 };
  s1 -> s1 [0, 65535] { R9802 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R9804 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R9803 += 1, R9804 += 1 };
  s0 -> s2 [0, 65535] { R9804 += 1, R116 += 1, R117 += 1 };
  s0 -> s3 [73, 73] { R9804 += 1, R117 += 1, R118 += 1 };
  s0 -> s4 [73, 73] { R9804 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [74, 65535] { R9804 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 72] { R9804 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 65535] { R9804 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R9804 += 1, R117 += 1, R118 += 1 };
  s1 -> s4 [73, 73] { R9804 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [74, 65535] { R9804 += 1, R117 += 1, R118 += 1 };
  s2 -> s1 [0, 72] { R9804 += 1, R117 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R9804 += 1, R116 += 1, R117 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R9804 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [73, 73] { R9804 += 1, R117 += 1, R118 += 1 };
  s2 -> s1 [74, 65535] { R9804 += 1, R117 += 1, R118 += 1 };
  s3 -> s3 [0, 65535] { R9804 += 1, R117 += 1, R118 += 1 };
  s3 -> s6 [0, 65535] { R9804 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9804 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9804 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R9828 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R9827 += 1, R9828 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9828 += 1, R32 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R9830 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R9829 += 1, R9830 += 1 };
  s0 -> s2 [65, 65] { R9830 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R9830 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R9830 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R9830 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9830 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R9830 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R9830 += 1, R69 += 1 };
  s2 -> s2 [0, 65535] { R9830 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R9832 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R9831 += 1, R9832 += 1 };
  s0 -> s2 [65, 65] { R9832 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R9832 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R9832 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R9832 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9832 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R9832 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R9832 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9832 += 1, R71 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R9834 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R9833 += 1, R9834 += 1 };
  s0 -> s2 [65, 65] { R9834 += 1, R73 += 1 };
  s0 -> s3 [65, 65] { R9834 += 1, R73 += 1 };
  s0 -> s1 [66, 65535] { R9834 += 1, R73 += 1 };
  s1 -> s1 [0, 64] { R9834 += 1, R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9834 += 1, R73 += 1 };
  s1 -> s3 [65, 65] { R9834 += 1, R73 += 1 };
  s1 -> s1 [66, 65535] { R9834 += 1, R73 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9834 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R9836 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R9835 += 1, R9836 += 1 };
  s0 -> s2 [65, 65] { R9836 += 1, R75 += 1, R76 += 1 };
  s0 -> s3 [65, 65] { R9836 += 1, R75 += 1, R76 += 1 };
  s0 -> s1 [66, 65535] { R9836 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 64] { R9836 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9836 += 1, R75 += 1, R76 += 1 };
  s1 -> s3 [65, 65] { R9836 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [66, 65535] { R9836 += 1, R75 += 1, R76 += 1 };
  s2 -> s2 [0, 65535] { R9836 += 1, R75 += 1, R76 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R9838 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R9837 += 1, R9838 += 1 };
  s0 -> s2 [65, 65] { R9838 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [65, 65] { R9838 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [66, 65535] { R9838 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 64] { R9838 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9838 += 1, R81 += 1, R82 += 1 };
  s1 -> s3 [65, 65] { R9838 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [66, 65535] { R9838 += 1, R81 += 1, R82 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9838 += 1, R81 += 1, R82 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R9840 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R9839 += 1, R9840 += 1 };
  s0 -> s2 [65, 65] { R9840 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R9840 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R9840 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R9840 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9840 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R9840 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R9840 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9840 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R9842 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R9841 += 1, R9842 += 1 };
  s0 -> s2 [65, 65] { R9842 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R9842 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R9842 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R9842 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9842 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R9842 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R9842 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R9842 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R9844 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R9843 += 1, R9844 += 1 };
  s0 -> s2 [65, 65] { R9844 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R9844 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R9844 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R9844 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9844 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R9844 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R9844 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9844 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R9846 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R9845 += 1, R9846 += 1 };
  s0 -> s2 [65, 65] { R9846 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R9846 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R9846 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R9846 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9846 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R9846 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R9846 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535] { R9846 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R9848 += 1 };
  s0 -> s0 [0, 65535] { R9847 += 1, R9848 += 1 };
  s0 -> s2 [65, 65] { R9848 += 1 };
  s0 -> s3 [65, 65] { R9848 += 1 };
  s0 -> s1 [66, 65535] { R9848 += 1 };
  s1 -> s1 [0, 64] { R9848 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9848 += 1 };
  s1 -> s3 [65, 65] { R9848 += 1 };
  s1 -> s1 [66, 65535] { R9848 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9848 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R9850 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R9849 += 1, R9850 += 1 };
  s0 -> s2 [65, 65] { R9850 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R9850 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R9850 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R9850 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9850 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R9850 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R9850 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9850 += 1, R107 += 1, R108 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R9852 += 1 };
  s0 -> s0 [0, 65535] { R9851 += 1, R9852 += 1 };
  s0 -> s2 [65, 65] { R9852 += 1 };
  s0 -> s3 [65, 65] { R9852 += 1 };
  s0 -> s1 [66, 65535] { R9852 += 1 };
  s1 -> s1 [0, 64] { R9852 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9852 += 1 };
  s1 -> s3 [65, 65] { R9852 += 1 };
  s1 -> s1 [66, 65535] { R9852 += 1 };
  s2 -> s2 [0, 65535] { R9852 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R9854 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R9853 += 1, R9854 += 1 };
  s0 -> s2 [65, 65] { R9854 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R9854 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R9854 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R9854 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9854 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R9854 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R9854 += 1, R113 += 1, R114 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9854 += 1, R113 += 1, R114 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R9856 += 1 };
  s0 -> s0 [0, 65535] { R9855 += 1, R9856 += 1 };
  s0 -> s1 [45, 45] { R9856 += 1 };
  s0 -> s2 [46, 46] { R9856 += 1 };
  s0 -> s1 [48, 62] { R9856 += 1 };
  s0 -> s3 [65, 65] { R9856 += 1 };
  s0 -> s1 [66, 65535] { R9856 += 1 };
  s1 -> s1 [0, 43] { R9856 += 1 };
  s1 -> s1 [45, 45] { R9856 += 1 };
  s1 -> s2 [46, 46] { R9856 += 1 };
  s1 -> s1 [48, 62] { R9856 += 1 };
  s1 -> s3 [65, 65] { R9856 += 1 };
  s1 -> s1 [66, 65535] { R9856 += 1 };
  s2 -> s1 [0, 43] { R9856 += 1 };
  s2 -> s1 [45, 45] { R9856 += 1 };
  s2 -> s2 [46, 46] { R9856 += 1 };
  s2 -> s1 [48, 62] { R9856 += 1 };
  s2 -> s3 [65, 65] { R9856 += 1 };
  s2 -> s1 [66, 114] { R9856 += 1 };
  s2 -> s8 [115, 115] { R9856 += 1 };
  s2 -> s1 [116, 65535] { R9856 += 1 };
  s3 -> s3 [0, 43] { R9856 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R9856 += 1 };
  s3 -> s4 [46, 46] { R9856 += 1 };
  s3 -> s3 [48, 62] { R9856 += 1 };
  s3 -> s3 [65, 65535] { R9856 += 1 };
  s4 -> s3 [0, 43] { R9856 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R9856 += 1 };
  s4 -> s4 [46, 46] { R9856 += 1 };
  s4 -> s3 [48, 62] { R9856 += 1 };
  s4 -> s3 [65, 114] { R9856 += 1 };
  s4 -> s5 [115, 115] { R9856 += 1 };
  s4 -> s3 [116, 65535] { R9856 += 1 };
  s5 -> s3 [0, 43] { R9856 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R9856 += 1 };
  s5 -> s4 [46, 46] { R9856 += 1 };
  s5 -> s3 [48, 62] { R9856 += 1 };
  s5 -> s3 [65, 110] { R9856 += 1 };
  s5 -> s6 [111, 111] { R9856 += 1 };
  s5 -> s3 [112, 65535] { R9856 += 1 };
  s6 -> s3 [0, 43] { R9856 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R9856 += 1 };
  s6 -> s4 [46, 46] { R9856 += 1 };
  s6 -> s3 [48, 62] { R9856 += 1 };
  s6 -> s3 [65, 98] { R9856 += 1 };
  s6 -> s7 [99, 99] { R9856 += 1 };
  s6 -> s3 [100, 65535] { R9856 += 1 };
  s7 -> s3 [0, 43] { R9856 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R9856 += 1 };
  s7 -> s4 [46, 46] { R9856 += 1 };
  s7 -> s3 [48, 62] { R9856 += 1 };
  s7 -> s3 [65, 106] { R9856 += 1 };
  s7 -> s3 [108, 65535] { R9856 += 1 };
  s8 -> s1 [0, 43] { R9856 += 1 };
  s8 -> s1 [45, 45] { R9856 += 1 };
  s8 -> s2 [46, 46] { R9856 += 1 };
  s8 -> s1 [48, 62] { R9856 += 1 };
  s8 -> s3 [65, 65] { R9856 += 1 };
  s8 -> s1 [66, 110] { R9856 += 1 };
  s8 -> s9 [111, 111] { R9856 += 1 };
  s8 -> s1 [112, 65535] { R9856 += 1 };
  s9 -> s1 [0, 43] { R9856 += 1 };
  s9 -> s1 [45, 45] { R9856 += 1 };
  s9 -> s2 [46, 46] { R9856 += 1 };
  s9 -> s1 [48, 62] { R9856 += 1 };
  s9 -> s3 [65, 65] { R9856 += 1 };
  s9 -> s1 [66, 98] { R9856 += 1 };
  s9 -> s10 [99, 99] { R9856 += 1 };
  s9 -> s1 [100, 65535] { R9856 += 1 };
  s10 -> s1 [0, 43] { R9856 += 1 };
  s10 -> s1 [45, 45] { R9856 += 1 };
  s10 -> s2 [46, 46] { R9856 += 1 };
  s10 -> s1 [48, 62] { R9856 += 1 };
  s10 -> s3 [65, 65] { R9856 += 1 };
  s10 -> s1 [66, 106] { R9856 += 1 };
  s10 -> s1 [108, 65535] { R9856 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R9857 += 1, R9858 += 1 };
  s0 -> s1 [0, 65535] { R9858 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9858 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R9860 += 1 };
  s0 -> s0 [0, 65535] { R9859 += 1, R9860 += 1 };
  s0 -> s2 [0, 65535] { R9860 += 1, R16 += 1 };
  s0 -> s3 [58, 58] { R9860 += 1 };
  s0 -> s1 [59, 65535] { R9860 += 1 };
  s1 -> s1 [0, 57] { R9860 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R9860 += 1 };
  s1 -> s1 [59, 65535] { R9860 += 1 };
  s2 -> s1 [0, 57] { R9860 += 1 };
  s2 -> s2 [0, 65535] { R9860 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R9860 += 1 };
  s2 -> s1 [59, 65535] { R9860 += 1 };
  s3 -> s3 [0, 65535] { R9860 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R9862 += 1 };
  s0 -> s2 [0, 65535] { R9862 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R9861 += 1, R9862 += 1 };
  s0 -> s3 [65, 65] { R9862 += 1 };
  s0 -> s1 [66, 65535] { R9862 += 1 };
  s1 -> s1 [0, 64] { R9862 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R9862 += 1 };
  s1 -> s1 [66, 65535] { R9862 += 1 };
  s2 -> s1 [0, 64] { R9862 += 1 };
  s2 -> s2 [0, 65535] { R9862 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R9862 += 1 };
  s2 -> s1 [66, 65535] { R9862 += 1 };
  s3 -> s3 [0, 65535] { R9862 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R9864 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R9864 += 1, R33 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R9863 += 1, R9864 += 1 };
  s0 -> s3 [91, 91] { R9864 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R9864 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R9864 += 1 };
  s1 -> s1 [0, 65535] { R9864 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R9864 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R9864 += 1, R33 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R9864 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R9864 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R9864 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9864 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 65535] { R9866 += 1, R36 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R9866 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R9865 += 1, R9866 += 1 };
  s1 -> s1 [0, 65535] { R9866 += 1, R36 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R9866 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9866 += 1, R36 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9866 += 1, R35 += 1, R36 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9866 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R9868 += 1, R9754 += 1 };
  s0 -> s2 [0, 65535] { R9868 += 1, R9753 += 1, R9754 += 1 };
  s0 -> s0 [0, 65535] { R9867 += 1, R9868 += 1 };
  s0 -> s1 [66, 65535] { R9868 += 1, R9754 += 1 };
  s1 -> s1 [0, 64] { R9868 += 1, R9754 += 1 };
  s1 -> s1 [0, 65535] { R9868 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R9868 += 1, R9754 += 1 };
  s2 -> s1 [0, 64] { R9868 += 1, R9754 += 1 };
  s2 -> s2 [0, 65535] { R9868 += 1, R9753 += 1, R9754 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R9868 += 1, R9754 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R9870 += 1, R9756 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R9870 += 1, R9755 += 1, R9756 += 1 };
  s0 -> s0 [0, 65535] { R9869 += 1, R9870 += 1 };
  s1 -> s1 [0, 65535] { R9870 += 1, R9756 += 1, R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9870 += 1 };
  s2 -> s1 [0, 65535] { R9870 += 1, R9756 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9870 += 1, R9755 += 1, R9756 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9870 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R9872 += 1, R9758 += 1 };
  s0 -> s0 [0, 65535] { R9871 += 1, R9872 += 1 };
  s0 -> s2 [0, 65535] { R9872 += 1, R9757 += 1, R9758 += 1 };
  s0 -> s1 [81, 65535] { R9872 += 1, R9758 += 1 };
  s1 -> s1 [0, 65] { R9872 += 1, R9758 += 1 };
  s1 -> s1 [0, 65535] { R9872 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R9872 += 1, R9758 += 1 };
  s2 -> s1 [0, 65] { R9872 += 1, R9758 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9872 += 1, R9757 += 1, R9758 += 1 };
  s2 -> s1 [81, 65535] { R9872 += 1, R9758 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R9874 += 1, R9760 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R9874 += 1, R9759 += 1, R9760 += 1 };
  s0 -> s0 [0, 65535] { R9873 += 1, R9874 += 1 };
  s1 -> s1 [0, 65535] { R9874 += 1, R9760 += 1, R500 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9874 += 1 };
  s2 -> s1 [0, 65535] { R9874 += 1, R9760 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R9874 += 1, R9759 += 1, R9760 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9874 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R9876 += 1, R9762 += 1 };
  s0 -> s2 [0, 65535] { R9876 += 1, R9762 += 1, R502 += 1 };
  s0 -> s0 [0, 65535] { R9875 += 1, R9876 += 1 };
  s0 -> s3 [0, 65535] { R9876 += 1, R9761 += 1, R9762 += 1 };
  s0 -> s1 [82, 65535] { R9876 += 1, R9762 += 1 };
  s1 -> s1 [0, 80] { R9876 += 1, R9762 += 1 };
  s1 -> s1 [0, 65535] { R9876 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R9876 += 1, R9762 += 1 };
  s2 -> s1 [0, 80] { R9876 += 1, R9762 += 1 };
  s2 -> s2 [0, 65535] { R9876 += 1, R9762 += 1, R502 += 1 };
  s2 -> s5 [0, 65535] { R9876 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R9876 += 1, R9762 += 1 };
  s3 -> s1 [0, 80] { R9876 += 1, R9762 += 1 };
  s3 -> s2 [0, 65535] { R9876 += 1, R9762 += 1, R502 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9876 += 1, R9761 += 1, R9762 += 1 };
  s3 -> s1 [82, 65535] { R9876 += 1, R9762 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9876 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R9878 += 1, R9764 += 1, R506 += 1 };
  s0 -> s2 [0, 65535] { R9878 += 1, R9763 += 1, R9764 += 1 };
  s0 -> s0 [0, 65535] { R9877 += 1, R9878 += 1 };
  s0 -> s3 [0, 65535] { R9878 += 1, R9764 += 1, R505 += 1, R506 += 1 };
  s0 -> s1 [82, 65535] { R9878 += 1, R9764 += 1, R506 += 1 };
  s1 -> s1 [0, 80] { R9878 += 1, R9764 += 1, R506 += 1 };
  s1 -> s4 [0, 65535] { R9878 += 1 };
  s1 -> s1 [0, 65535] { R9878 += 1, R9764 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R9878 += 1, R9764 += 1, R506 += 1 };
  s2 -> s1 [0, 80] { R9878 += 1, R9764 += 1, R506 += 1 };
  s2 -> s2 [0, 65535] { R9878 += 1, R9763 += 1, R9764 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9878 += 1, R9764 += 1, R505 += 1, R506 += 1 };
  s2 -> s1 [82, 65535] { R9878 += 1, R9764 += 1, R506 += 1 };
  s3 -> s1 [0, 80] { R9878 += 1, R9764 += 1, R506 += 1 };
  s3 -> s4 [0, 65535] { R9878 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9878 += 1, R9764 += 1, R505 += 1, R506 += 1 };
  s3 -> s1 [82, 65535] { R9878 += 1, R9764 += 1, R506 += 1 };
  s4 -> s4 [0, 65535] { R9878 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R9879 += 1, R9880 += 1 };
  s0 -> s1 [0, 65535] { R9880 += 1, R9765 += 1, R9766 += 1 };
  s0 -> s2 [0, 65535] { R9880 += 1, R9766 += 1, R511 += 1, R512 += 1 };
  s0 -> s3 [0, 65535] { R9880 += 1, R9766 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535] { R9880 += 1, R9765 += 1, R9766 += 1 };
  s1 -> s2 [0, 65535] { R9880 += 1, R9766 += 1, R511 += 1, R512 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R9880 += 1, R9766 += 1, R510 += 1, R511 += 1 };
  s2 -> s6 [0, 65535] { R9880 += 1, R9766 += 1 };
  s2 -> s2 [0, 65535] { R9880 += 1, R9766 += 1, R511 += 1, R512 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9880 += 1 };
  s3 -> s2 [0, 65535] { R9880 += 1, R9766 += 1, R511 += 1, R512 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9880 += 1, R9766 += 1, R510 += 1, R511 += 1 };
  s3 -> s5 [0, 65535] { R9880 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9880 += 1 };
  s6 -> s6 [0, 65535] { R9880 += 1, R9766 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9880 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R9882 += 1, R9768 += 1, R8062 += 1 };
  s0 -> s0 [0, 65535] { R9881 += 1, R9882 += 1 };
  s0 -> s1 [0, 65535] { R9882 += 1, R9768 += 1 };
  s0 -> s2 [0, 65535] { R9882 += 1, R9767 += 1, R9768 += 1 };
  s0 -> s1 [91, 65535] { R9882 += 1, R9768 += 1, R8062 += 1 };
  s1 -> s1 [0, 81] { R9882 += 1, R9768 += 1, R8062 += 1 };
  s1 -> s1 [0, 65535] { R9882 += 1, R9768 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9882 += 1 };
  s1 -> s1 [91, 65535] { R9882 += 1, R9768 += 1, R8062 += 1 };
  s2 -> s1 [0, 81] { R9882 += 1, R9768 += 1, R8062 += 1 };
  s2 -> s1 [0, 65535] { R9882 += 1, R9768 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9882 += 1, R9767 += 1, R9768 += 1 };
  s2 -> s1 [91, 65535] { R9882 += 1, R9768 += 1, R8062 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9882 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R9884 += 1, R9769 += 1, R9770 += 1 };
  s0 -> s2 [0, 65535] { R9884 += 1, R9770 += 1, R8067 += 1, R8068 += 1 };
  s0 -> s0 [0, 65535] { R9883 += 1, R9884 += 1 };
  s0 -> s3 [0, 65535] { R9884 += 1, R9770 += 1, R8066 += 1, R8067 += 1 };
  s1 -> s1 [0, 65535] { R9884 += 1, R9769 += 1, R9770 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R9884 += 1, R9770 += 1, R8067 += 1, R8068 += 1 };
  s1 -> s3 [0, 65535] { R9884 += 1, R9770 += 1, R8066 += 1, R8067 += 1 };
  s2 -> s4 [0, 65535] { R9884 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9884 += 1, R9770 += 1 };
  s2 -> s2 [0, 65535] { R9884 += 1, R9770 += 1, R8067 += 1, R8068 += 1 };
  s3 -> s4 [0, 65535] { R9884 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9884 += 1, R9770 += 1, R8067 += 1, R8068 += 1 };
  s3 -> s3 [0, 65535] { R9884 += 1, R9770 += 1, R8066 += 1, R8067 += 1 };
  s4 -> s4 [0, 65535] { R9884 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R9884 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9884 += 1, R9770 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R9886 += 1, R9772 += 1 };
  s0 -> s0 [0, 65535] { R9885 += 1, R9886 += 1 };
  s0 -> s2 [0, 65535] { R9886 += 1, R9771 += 1, R9772 += 1 };
  s1 -> s1 [0, 65535] { R9886 += 1, R9772 += 1 };
  s1 -> s4 [0, 65535] { R9886 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9886 += 1, R9772 += 1 };
  s2 -> s2 [0, 65535] { R9886 += 1, R9771 += 1, R9772 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9886 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R9888 += 1, R9774 += 1 };
  s0 -> s0 [0, 65535] { R9887 += 1, R9888 += 1 };
  s0 -> s2 [0, 65535] { R9888 += 1, R9773 += 1, R9774 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9888 += 1, R9774 += 1 };
  s1 -> s4 [0, 65535] { R9888 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9888 += 1, R9774 += 1 };
  s2 -> s2 [0, 65535] { R9888 += 1, R9773 += 1, R9774 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9888 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 80] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s0 -> s2 [0, 65535] { R9890 += 1, R9775 += 1, R9776 += 1 };
  s0 -> s3 [0, 65535] { R9890 += 1, R9776 += 1, R9750 += 1, R9751 += 1 };
  s0 -> s0 [0, 65535] { R9889 += 1, R9890 += 1 };
  s0 -> s4 [81, 81] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s0 -> s5 [81, 81] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s0 -> s1 [82, 65535] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s1 -> s1 [0, 80] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R9890 += 1 };
  s1 -> s1 [0, 65535] { R9890 += 1, R9776 += 1 };
  s1 -> s4 [81, 81] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s1 -> s5 [81, 81] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s1 -> s1 [82, 65535] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s2 -> s1 [0, 80] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s2 -> s2 [0, 65535] { R9890 += 1, R9775 += 1, R9776 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R9890 += 1, R9776 += 1, R9750 += 1, R9751 += 1 };
  s2 -> s4 [81, 81] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s2 -> s5 [81, 81] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s2 -> s1 [82, 65535] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s3 -> s1 [0, 80] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R9890 += 1 };
  s3 -> s3 [0, 65535] { R9890 += 1, R9776 += 1, R9750 += 1, R9751 += 1 };
  s3 -> s4 [81, 81] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s3 -> s5 [81, 81] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s3 -> s1 [82, 65535] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s4 -> s4 [0, 65535] { R9890 += 1, R9776 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9890 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9890 += 1, R9776 += 1, R9751 += 1, R9752 += 1 };
  s5 -> s7 [0, 65535] { R9890 += 1 };
  s5 -> s8 [0, 65535] { R9890 += 1, R9776 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9890 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9890 += 1 };
  s8 -> s8 [0, 65535] { R9890 += 1, R9776 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R9892 += 1, R9806 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R9892 += 1, R9805 += 1, R9806 += 1 };
  s0 -> s0 [0, 65535] { R9891 += 1, R9892 += 1 };
  s1 -> s4 [0, 65535] { R9892 += 1 };
  s1 -> s1 [0, 65535] { R9892 += 1, R9806 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9892 += 1, R9806 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9892 += 1, R9805 += 1, R9806 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9892 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R9894 += 1, R9808 += 1 };
  s0 -> s2 [0, 65535] { R9894 += 1, R9807 += 1, R9808 += 1 };
  s0 -> s0 [0, 65535] { R9893 += 1, R9894 += 1 };
  s0 -> s3 [65, 65] { R9894 += 1, R9808 += 1 };
  s0 -> s4 [65, 65] { R9894 += 1, R9808 += 1 };
  s0 -> s5 [81, 81] { R9894 += 1, R9808 += 1 };
  s0 -> s1 [82, 65535] { R9894 += 1, R9808 += 1 };
  s1 -> s1 [0, 64] { R9894 += 1, R9808 += 1 };
  s1 -> s3 [65, 65] { R9894 += 1, R9808 += 1 };
  s1 -> s4 [65, 65] { R9894 += 1, R9808 += 1 };
  s1 -> s5 [81, 81] { R9894 += 1, R9808 += 1 };
  s1 -> s1 [82, 65535] { R9894 += 1, R9808 += 1 };
  s2 -> s1 [0, 64] { R9894 += 1, R9808 += 1 };
  s2 -> s2 [0, 65535] { R9894 += 1, R9807 += 1, R9808 += 1 };
  s2 -> s3 [65, 65] { R9894 += 1, R9808 += 1 };
  s2 -> s4 [65, 65] { R9894 += 1, R9808 += 1 };
  s2 -> s5 [81, 81] { R9894 += 1, R9808 += 1 };
  s2 -> s1 [82, 65535] { R9894 += 1, R9808 += 1 };
  s4 -> s4 [0, 65] { R9894 += 1, R9808 += 1 };
  s4 -> s8 [81, 81] { R9894 += 1, R9808 += 1 };
  s4 -> s4 [82, 65535] { R9894 += 1, R9808 += 1 };
  s5 -> s5 [0, 64] { R9894 += 1, R9808 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9894 += 1 };
  s5 -> s7 [65, 65] { R9894 += 1, R9808 += 1 };
  s5 -> s8 [65, 65] { R9894 += 1, R9808 += 1 };
  s5 -> s5 [81, 65535] { R9894 += 1, R9808 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9894 += 1 };
  s8 -> s8 [0, 65] { R9894 += 1, R9808 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9894 += 1 };
  s8 -> s8 [81, 65535] { R9894 += 1, R9808 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R9896 += 1, R9810 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R9896 += 1, R9809 += 1, R9810 += 1 };
  s0 -> s0 [0, 65535] { R9895 += 1, R9896 += 1 };
  s0 -> s3 [65, 65] { R9896 += 1, R9810 += 1, R499 += 1 };
  s0 -> s4 [65, 65] { R9896 += 1, R9810 += 1, R499 += 1 };
  s0 -> s1 [66, 65535] { R9896 += 1, R9810 += 1, R499 += 1 };
  s1 -> s1 [0, 64] { R9896 += 1, R9810 += 1, R499 += 1 };
  s1 -> s1 [0, 65535] { R9896 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R9896 += 1, R9810 += 1, R499 += 1 };
  s1 -> s4 [65, 65] { R9896 += 1, R9810 += 1, R499 += 1 };
  s1 -> s1 [66, 65535] { R9896 += 1, R9810 += 1, R499 += 1 };
  s2 -> s1 [0, 64] { R9896 += 1, R9810 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R9896 += 1, R9809 += 1, R9810 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R9896 += 1, R9810 += 1, R499 += 1 };
  s2 -> s4 [65, 65] { R9896 += 1, R9810 += 1, R499 += 1 };
  s2 -> s1 [66, 65535] { R9896 += 1, R9810 += 1, R499 += 1 };
  s3 -> s3 [0, 65535] { R9896 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9896 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9896 += 1, R9810 += 1, R499 += 1 };
  s5 -> s5 [0, 65535] { R9896 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R9898 += 1, R9812 += 1, R501 += 1 };
  s0 -> s2 [0, 65535] { R9898 += 1, R9811 += 1, R9812 += 1 };
  s0 -> s0 [0, 65535] { R9897 += 1, R9898 += 1 };
  s0 -> s3 [65, 65] { R9898 += 1, R9812 += 1, R501 += 1 };
  s0 -> s4 [65, 65] { R9898 += 1, R9812 += 1, R501 += 1 };
  s0 -> s1 [66, 65535] { R9898 += 1, R9812 += 1, R501 += 1 };
  s1 -> s1 [0, 64] { R9898 += 1, R9812 += 1, R501 += 1 };
  s1 -> s1 [0, 65535] { R9898 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9898 += 1, R9812 += 1, R501 += 1 };
  s1 -> s4 [65, 65] { R9898 += 1, R9812 += 1, R501 += 1 };
  s1 -> s1 [66, 65535] { R9898 += 1, R9812 += 1, R501 += 1 };
  s2 -> s1 [0, 64] { R9898 += 1, R9812 += 1, R501 += 1 };
  s2 -> s2 [0, 65535] { R9898 += 1, R9811 += 1, R9812 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9898 += 1, R9812 += 1, R501 += 1 };
  s2 -> s4 [65, 65] { R9898 += 1, R9812 += 1, R501 += 1 };
  s2 -> s1 [66, 65535] { R9898 += 1, R9812 += 1, R501 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9898 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9898 += 1 };
  s4 -> s4 [0, 65535] { R9898 += 1, R9812 += 1, R501 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9898 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s0 -> s0 [0, 65535] { R9899 += 1, R9900 += 1 };
  s0 -> s2 [0, 65535] { R9900 += 1, R9813 += 1, R9814 += 1 };
  s0 -> s3 [65, 65] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s0 -> s4 [65, 65] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s0 -> s1 [66, 65535] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [0, 64] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [0, 65535] { R9900 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s1 -> s4 [65, 65] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [66, 65535] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s2 -> s1 [0, 64] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s2 -> s2 [0, 65535] { R9900 += 1, R9813 += 1, R9814 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s2 -> s4 [65, 65] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s2 -> s1 [66, 65535] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s3 -> s3 [0, 65535] { R9900 += 1, R9814 += 1, R503 += 1, R504 += 1 };
  s3 -> s6 [0, 65535] { R9900 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9900 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9900 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s0 -> s0 [0, 65535] { R9901 += 1, R9902 += 1 };
  s0 -> s2 [0, 65535] { R9902 += 1, R9815 += 1, R9816 += 1 };
  s0 -> s3 [65, 65] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s0 -> s4 [65, 65] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s0 -> s1 [66, 65535] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 64] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R9902 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s1 -> s4 [65, 65] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [66, 65535] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [0, 64] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9902 += 1, R9815 += 1, R9816 += 1 };
  s2 -> s3 [65, 65] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s2 -> s4 [65, 65] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [66, 65535] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s3 -> s3 [0, 65535] { R9902 += 1, R9816 += 1, R507 += 1, R508 += 1 };
  s3 -> s6 [0, 65535] { R9902 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9902 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9902 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s0 -> s0 [0, 65535] { R9903 += 1, R9904 += 1 };
  s0 -> s3 [0, 65535] { R9904 += 1, R9817 += 1, R9818 += 1 };
  s0 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s0 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s0 -> s6 [65, 65] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s7 [65, 65] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s0 -> s1 [66, 65535] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s2 [91, 107] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s0 -> s8 [108, 108] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s0 -> s2 [109, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s1 -> s1 [0, 64] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s1 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s1 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s1 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s1 -> s6 [65, 65] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s1 -> s7 [65, 65] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s1 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s1 -> s1 [66, 65535] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s1 -> s2 [91, 107] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s1 -> s8 [108, 108] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s1 -> s2 [109, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s2 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s2 [0, 65535] { R9904 += 1 };
  s2 -> s4 [65, 65] { R9904 += 1, R9818 += 1 };
  s2 -> s5 [65, 65] { R9904 += 1, R9818 += 1 };
  s2 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s2 -> s2 [66, 65535] { R9904 += 1, R9818 += 1 };
  s2 -> s2 [91, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s3 -> s1 [0, 64] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s3 -> s3 [0, 65535] { R9904 += 1, R9817 += 1, R9818 += 1 };
  s3 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s3 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s3 -> s6 [65, 65] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s7 [65, 65] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s3 -> s1 [66, 65535] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s2 [91, 107] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s3 -> s8 [108, 108] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s3 -> s2 [109, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s4 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s4 -> s4 [0, 65535] { R9904 += 1, R9818 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s35 [0, 65535] { R9904 += 1 };
  s4 -> s4 [91, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s5 -> s34 [0, 65535];
  s5 -> s5 [0, 65535] { R9904 += 1 };
  s6 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s6 -> s6 [0, 65535] { R9904 += 1, R9818 += 1, R8059 += 1, R8060 += 1 };
  s6 -> s4 [91, 107] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s6 -> s9 [108, 108] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s6 -> s4 [109, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s8 -> s8 [0, 64] { R9904 += 1, R9818 += 1 };
  s8 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s8 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s8 -> s9 [65, 65] { R9904 += 1, R9818 += 1 };
  s8 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s8 -> s10 [65, 65] { R9904 += 1, R9818 += 1 };
  s8 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s8 -> s8 [66, 65535] { R9904 += 1, R9818 += 1 };
  s8 -> s2 [91, 110] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s8 -> s11 [111, 111] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s8 -> s2 [112, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s9 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s9 -> s9 [0, 65535] { R9904 += 1, R9818 += 1 };
  s9 -> s4 [91, 110] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s9 -> s12 [111, 111] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s9 -> s4 [112, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s11 -> s11 [0, 64] { R9904 += 1, R9818 += 1 };
  s11 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s11 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s11 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s11 -> s12 [65, 65] { R9904 += 1, R9818 += 1 };
  s11 -> s13 [65, 65] { R9904 += 1, R9818 += 1 };
  s11 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s11 -> s11 [66, 65535] { R9904 += 1, R9818 += 1 };
  s11 -> s2 [91, 98] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s11 -> s14 [99, 99] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s11 -> s2 [100, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s12 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s12 -> s12 [0, 65535] { R9904 += 1, R9818 += 1 };
  s12 -> s4 [91, 98] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s12 -> s16 [99, 99] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s12 -> s4 [100, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s14 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s14 -> s14 [0, 64] { R9904 += 1, R9818 += 1 };
  s14 -> s15 [65, 65] { R9904 += 1, R9818 += 1 };
  s14 -> s16 [65, 65] { R9904 += 1, R9818 += 1 };
  s14 -> s17 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s14 -> s18 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s14 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s14 -> s14 [66, 65535] { R9904 += 1, R9818 += 1 };
  s14 -> s2 [91, 96] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s14 -> s19 [97, 97] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s14 -> s2 [98, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s16 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s16 -> s16 [0, 65535] { R9904 += 1, R9818 += 1 };
  s16 -> s4 [91, 96] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s16 -> s18 [97, 97] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s16 -> s4 [98, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s18 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s18 -> s18 [0, 65535] { R9904 += 1, R9818 += 1 };
  s18 -> s4 [91, 107] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s18 -> s21 [108, 108] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s18 -> s4 [109, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s19 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s19 -> s19 [0, 64] { R9904 += 1, R9818 += 1 };
  s19 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s19 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s19 -> s17 [65, 65] { R9904 += 1, R9818 += 1 };
  s19 -> s18 [65, 65] { R9904 += 1, R9818 += 1 };
  s19 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s19 -> s19 [66, 65535] { R9904 += 1, R9818 += 1 };
  s19 -> s2 [91, 107] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s19 -> s20 [108, 108] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s19 -> s2 [109, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s20 -> s20 [0, 64] { R9904 += 1, R9818 += 1 };
  s20 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s20 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s20 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s20 -> s21 [65, 65] { R9904 += 1, R9818 += 1 };
  s20 -> s22 [65, 65] { R9904 += 1, R9818 += 1 };
  s20 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s20 -> s20 [66, 65535] { R9904 += 1, R9818 += 1 };
  s20 -> s2 [91, 103] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s20 -> s23 [104, 104] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s20 -> s2 [105, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s21 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s21 -> s21 [0, 65535] { R9904 += 1, R9818 += 1 };
  s21 -> s4 [91, 103] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s21 -> s25 [104, 104] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s21 -> s4 [105, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s23 -> s23 [0, 64] { R9904 += 1, R9818 += 1 };
  s23 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s23 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s23 -> s24 [65, 65] { R9904 += 1, R9818 += 1 };
  s23 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s23 -> s25 [65, 65] { R9904 += 1, R9818 += 1 };
  s23 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s23 -> s23 [66, 65535] { R9904 += 1, R9818 += 1 };
  s23 -> s2 [91, 110] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s23 -> s26 [111, 111] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s23 -> s2 [112, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s25 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s25 -> s25 [0, 65535] { R9904 += 1, R9818 += 1 };
  s25 -> s4 [91, 110] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s25 -> s27 [111, 111] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s25 -> s4 [112, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s26 -> s26 [0, 64] { R9904 += 1, R9818 += 1 };
  s26 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s26 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s26 -> s27 [65, 65] { R9904 += 1, R9818 += 1 };
  s26 -> s28 [65, 65] { R9904 += 1, R9818 += 1 };
  s26 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s26 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s26 -> s26 [66, 65535] { R9904 += 1, R9818 += 1 };
  s26 -> s2 [91, 114] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s26 -> s29 [115, 115] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s26 -> s2 [116, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s27 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s27 -> s27 [0, 65535] { R9904 += 1, R9818 += 1 };
  s27 -> s4 [91, 114] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s27 -> s30 [115, 115] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s27 -> s4 [116, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s29 -> s29 [0, 64] { R9904 += 1, R9818 += 1 };
  s29 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s29 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s29 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s29 -> s30 [65, 65] { R9904 += 1, R9818 += 1 };
  s29 -> s31 [65, 65] { R9904 += 1, R9818 += 1 };
  s29 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s29 -> s29 [66, 65535] { R9904 += 1, R9818 += 1 };
  s29 -> s2 [91, 115] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s29 -> s32 [116, 116] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s29 -> s2 [117, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s30 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s30 -> s30 [0, 65535] { R9904 += 1, R9818 += 1 };
  s30 -> s4 [91, 115] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s30 -> s33 [116, 116] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s30 -> s4 [117, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s32 -> s2 [0, 64] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s32 -> s4 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s32 -> s5 [65, 65] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s32 -> s2 [66, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s32 -> s2 [91, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s33 -> s4 [0, 81] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s33 -> s4 [91, 65535] { R9904 += 1, R9818 += 1, R8060 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R9904 += 1 };
  accepting s4, s34, s5, s2, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s2 [0, 65535] { R9906 += 1, R9819 += 1, R9820 += 1 };
  s0 -> s0 [0, 65535] { R9905 += 1, R9906 += 1 };
  s0 -> s3 [65, 65] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s4 [65, 65] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s1 [66, 65535] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [0, 64] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9906 += 1 };
  s1 -> s3 [65, 65] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s4 [65, 65] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [66, 65535] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s1 [0, 64] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s2 [0, 65535] { R9906 += 1, R9819 += 1, R9820 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s4 [65, 65] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s1 [66, 65535] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s3 -> s6 [0, 65535] { R9906 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9906 += 1, R9820 += 1, R8063 += 1, R8064 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9906 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9906 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s2 [0, 64] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s0 [0, 65535] { R9907 += 1, R9908 += 1 };
  s0 -> s3 [0, 65535] { R9908 += 1, R9821 += 1, R9822 += 1 };
  s0 -> s4 [65, 65] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s5 [65, 65] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s6 [65, 65] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s7 [65, 65] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s1 [66, 65535] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s2 [66, 65535] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s1 [0, 64] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s1 -> s2 [0, 64] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s4 [65, 65] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s1 -> s5 [65, 65] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s1 -> s6 [65, 65] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s7 [65, 65] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s1 [66, 65535] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s1 -> s2 [66, 65535] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s11 [0, 64] { R9908 += 1, R9822 += 1 };
  s2 -> s2 [0, 64] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s12 [65, 65] { R9908 += 1, R9822 += 1 };
  s2 -> s6 [65, 65] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s8 [65, 65] { R9908 += 1, R9822 += 1 };
  s2 -> s7 [65, 65] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s11 [66, 65535] { R9908 += 1, R9822 += 1 };
  s2 -> s2 [66, 65535] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s1 [0, 64] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s2 [0, 64] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s3 [0, 65535] { R9908 += 1, R9821 += 1, R9822 += 1 };
  s3 -> s4 [65, 65] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s5 [65, 65] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s6 [65, 65] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s7 [65, 65] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s1 [66, 65535] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s2 [66, 65535] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s5 -> s5 [0, 65535] { R9908 += 1, R9822 += 1, R9741 += 1, R9742 += 1 };
  s5 -> s7 [0, 65535] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s7 -> s8 [0, 65535] { R9908 += 1, R9822 += 1 };
  s7 -> s7 [0, 65535] { R9908 += 1, R9822 += 1, R9742 += 1, R9743 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R9908 += 1, R9822 += 1 };
  s8 -> s10 [0, 65535] { R9908 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9908 += 1 };
  s11 -> s11 [0, 64] { R9908 += 1, R9822 += 1 };
  s11 -> s11 [0, 65535] { R9908 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R9908 += 1, R9822 += 1 };
  s11 -> s8 [65, 65] { R9908 += 1, R9822 += 1 };
  s11 -> s11 [66, 65535] { R9908 += 1, R9822 += 1 };
  s12 -> s12 [0, 65535] { R9908 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R9910 += 1, R9824 += 1 };
  s0 -> s0 [0, 65535] { R9909 += 1, R9910 += 1 };
  s0 -> s2 [0, 65535] { R9910 += 1, R9823 += 1, R9824 += 1 };
  s0 -> s3 [65, 65] { R9910 += 1, R9824 += 1 };
  s0 -> s4 [65, 65] { R9910 += 1, R9824 += 1 };
  s0 -> s1 [66, 65535] { R9910 += 1, R9824 += 1 };
  s1 -> s1 [0, 64] { R9910 += 1, R9824 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9910 += 1 };
  s1 -> s3 [65, 65] { R9910 += 1, R9824 += 1 };
  s1 -> s4 [65, 65] { R9910 += 1, R9824 += 1 };
  s1 -> s1 [66, 65535] { R9910 += 1, R9824 += 1 };
  s2 -> s1 [0, 64] { R9910 += 1, R9824 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9910 += 1, R9823 += 1, R9824 += 1 };
  s2 -> s3 [65, 65] { R9910 += 1, R9824 += 1 };
  s2 -> s4 [65, 65] { R9910 += 1, R9824 += 1 };
  s2 -> s1 [66, 65535] { R9910 += 1, R9824 += 1 };
  s3 -> s3 [0, 65535] { R9910 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9910 += 1, R9824 += 1 };
  s4 -> s6 [0, 65535] { R9910 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9910 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s0 -> s0 [0, 65535] { R9911 += 1, R9912 += 1 };
  s0 -> s2 [0, 65535] { R9912 += 1, R9825 += 1, R9826 += 1 };
  s0 -> s3 [65, 65] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s0 -> s4 [65, 65] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s0 -> s1 [66, 65535] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s1 -> s1 [0, 64] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9912 += 1 };
  s1 -> s3 [65, 65] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s1 -> s4 [65, 65] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s1 -> s1 [66, 65535] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s2 -> s1 [0, 64] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s2 -> s2 [0, 65535] { R9912 += 1, R9825 += 1, R9826 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s2 -> s4 [65, 65] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s2 -> s1 [66, 65535] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s3 -> s3 [0, 65535] { R9912 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9912 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9912 += 1, R9826 += 1, R9747 += 1, R9748 += 1 };
  s5 -> s5 [0, 65535] { R9912 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R9776 && R5 = R9912 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R70 + R69 + -1*R84 + -1*R82 = 0 && R83 + R81 = 0 && R9753 = 0 && R9754 = R9776 && R9755 = 0 && R9756 = R9776 && R9757 = 0 && R9758 = R9776 && R9759 = 0 && R9760 = R9776 && R9761 = 0 && R9762 = R9776 && R9763 = 0 && R9764 = R9776 && R9765 = 0 && R9766 = R9776 && R9767 = 0 && R9768 = R9776 && R9769 = 0 && R9770 = R9776 && R9771 = 0 && R9772 = R9776 && R9773 = 0 && R9774 = R9776 && R9775 = 0 && R9777 = 0 && R9778 = R9912 && R9779 = 0 && R9780 = R9912 && R9781 = 0 && R9782 = R9912 && R9783 = 0 && R9784 = R9912 && R9785 = 0 && R9786 = R9912 && R9787 = 0 && R9788 = R9912 && R9789 = 0 && R9790 = R9912 && R9791 = 0 && R9792 = R9912 && R9793 = 0 && R9794 = R9912 && R9795 = 0 && R9796 = R9912 && R9797 = 0 && R9798 = R9912 && R9799 = 0 && R9800 = R9912 && R9801 = 0 && R9802 = R9912 && R9803 = 0 && R9804 = R9912 && R9807 = 0 && R9808 = 0 && R9817 = 0 && R9818 = 0 && R9821 = 0 && R9822 = 0 && R9855 = 10 && R9856 = R9912 && R9857 = 10 && R9858 = R9912 && R9859 = 10 && R9860 = R9912 && R9861 = 10 && R9862 = R9912 && R9863 = 10 && R9864 = R9912 && R9865 = 10 && R9866 = R9912 && R9867 = 10 && R9868 = R9912 && R9869 = 10 && R9870 = R9912 && R9871 = 10 && R9872 = R9912 && R9873 = 10 && R9874 = R9912 && R9875 = 10 && R9876 = R9912 && R9877 = 10 && R9878 = R9912 && R9879 = 10 && R9880 = R9912 && R9881 = 10 && R9882 = R9912 && R9883 = 10 && R9884 = R9912 && R9885 = 10 && R9886 = R9912 && R9887 = 10 && R9888 = R9912 && R9889 = 10 && R9890 = R9912 && R9891 = 10 && R9892 = R9912 && R9893 = 10 && R9894 = R9912 && R9895 = 10 && R9896 = R9912 && R9897 = 10 && R9898 = R9912 && R9899 = 10 && R9900 = R9912 && R9901 = 10 && R9902 = R9912 && R9903 = 10 && R9904 = R9912 && R9905 = 10 && R9906 = R9912 && R9907 = 10 && R9908 = R9912 && R9909 = 10 && R9910 = R9912 && R9911 = 10 && R100 + R97 + R118 + R115 != 0 && R8068 + R8065 + R9752 + R9749 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R72 + R71 < 1 && R74 + R73 < 1 && -1*R84 + -1*R82 < 1 && -1*R500 + -1*R499 < 1 && R502 + R501 < 1 && 0 < R9776 && 9 < R9912 && (R80 + R77 != 0 || ((R78 + R75 != 0 || R79 + R76 + -1*R84 + -1*R82 = 0 || R84 + R82 < 1) && (R78 + R75 = 0 || R84 + R82 < 1))) && (R84 + R82 != 0 || R90 + R87 = 0 || (R88 + R85 = 0 && R89 + R86 = 0)) && (R84 + R82 != 0 || R90 + R87 = 0 || (R93 + R91 = 0 && R94 + R92 = 0)) && (R84 + R82 != 0 || R90 + R87 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R88 + R85 != 0 || R84 + R82 + -1*R89 + -1*R86 = 0 || R84 + R82 < 1) && (R93 + R91 != 0 || R84 + R82 + -1*R94 + -1*R92 = 0 || R84 + R82 < 1) && (R98 + R95 != 0 || R84 + R82 + -1*R99 + -1*R96 = 0 || R84 + R82 < 1) && (R500 + R499 != 0 || R512 + R509 = 0 || (R505 + R503 = 0 && R506 + R504 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R510 + R507 = 0 && R511 + R508 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R8061 + R8059 = 0 && R8062 + R8060 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R8066 + R8063 = 0 && R8067 + R8064 = 0)) && (R505 + R503 != 0 || R500 + R499 + -1*R506 + -1*R504 = 0 || R500 + R499 < 1) && (R510 + R507 != 0 || R500 + R499 + -1*R511 + -1*R508 = 0 || R500 + R499 < 1) && (R8061 + R8059 != 0 || R500 + R499 + -1*R8062 + -1*R8060 = 0 || R500 + R499 < 1) && (R8066 + R8063 != 0 || R500 + R499 + -1*R8067 + -1*R8064 = 0 || R500 + R499 < 1) && (R30 = 0 || (R9805 = 0 && R9806 = 0)) && (R30 = 0 || (R9809 = 0 && R9810 = 0)) && (R30 = 0 || (R9811 = 0 && R9812 = 0)) && (R30 = 0 || (R9813 = 0 && R9814 = 0)) && (R30 = 0 || (R9815 = 0 && R9816 = 0)) && (R30 = 0 || (R9819 = 0 && R9820 = 0)) && (R30 = 0 || (R9823 = 0 && R9824 = 0)) && (R30 = 0 || (R9825 = 0 && R9826 = 0)) && (R32 = 0 || (R9827 = 0 && R9828 = 0)) && (R32 = 0 || (R9829 = 0 && R9830 = 0)) && (R32 = 0 || (R9831 = 0 && R9832 = 0)) && (R32 = 0 || (R9833 = 0 && R9834 = 0)) && (R32 = 0 || (R9835 = 0 && R9836 = 0)) && (R32 = 0 || (R9837 = 0 && R9838 = 0)) && (R32 = 0 || (R9839 = 0 && R9840 = 0)) && (R32 = 0 || (R9841 = 0 && R9842 = 0)) && (R32 = 0 || (R9843 = 0 && R9844 = 0)) && (R32 = 0 || (R9845 = 0 && R9846 = 0)) && (R32 = 0 || (R9847 = 0 && R9848 = 0)) && (R32 = 0 || (R9849 = 0 && R9850 = 0)) && (R32 = 0 || (R9851 = 0 && R9852 = 0)) && (R32 = 0 || (R9853 = 0 && R9854 = 0)) && (R80 + R77 = 0 || (R78 + R75 = 0 && R79 + R76 + -1*R84 + -1*R82 = 0)) && (R88 + R85 = 0 || R84 + R82 < 1) && (R93 + R91 = 0 || R84 + R82 < 1) && (R98 + R95 = 0 || R84 + R82 < 1) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R112 + R109 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R112 + R109 = 0 || (R116 + R113 = 0 && R117 + R114 = 0)) && (R505 + R503 = 0 || R500 + R499 < 1) && (R510 + R507 = 0 || R500 + R499 < 1) && (R8061 + R8059 = 0 || R500 + R499 < 1) && (R8066 + R8063 = 0 || R500 + R499 < 1) && (R9746 + R9743 = 0 || (R9744 + R9741 = 0 && R9745 + R9742 = 0)) && (R9746 + R9743 = 0 || (R9750 + R9747 = 0 && R9751 + R9748 = 0));
// End of Parikh automata intersection problem
